<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="lua">
    <body>
      <group id="lua">
        <trans-unit id="85ee1dce4e7f426747bd89aef5bd47aa20d38aad" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;L&lt;/code&gt;&quot;:  reads the next line keeping the end-of-line character (if present), returning &lt;b&gt;nil&lt;/b&gt; on end of file.</source>
          <target state="translated">&quot; &lt;code&gt;L&lt;/code&gt; &quot;：行末文字（存在する場合）を維持して次の行を読み取り、ファイルの終わりに&lt;b&gt;nil&lt;/b&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="e0c82711681d3851f13f59346546cd0a034bb77a" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;a+&lt;/code&gt;&quot;:  append update mode, previous data is preserved, writing is only allowed at the end of file.</source>
          <target state="translated">&quot; &lt;code&gt;a+&lt;/code&gt; &quot;：追加更新モード。以前のデータは保持され、書き込みはファイルの最後でのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="68f6a1b79e4ab4f973b74b712a8ec0055442f0ec" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;a&lt;/code&gt;&quot;:  append mode;</source>
          <target state="translated">&quot; &lt;code&gt;a&lt;/code&gt; &quot;：追加モード。</target>
        </trans-unit>
        <trans-unit id="da2c3d0b3051b286b1d0b50590784dedf845e53c" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;a&lt;/code&gt;&quot;:  reads the whole file, starting at the current position. On end of file, it returns the empty string.</source>
          <target state="translated">&quot; &lt;code&gt;a&lt;/code&gt; &quot;：現在の位置からファイル全体を読み取ります。ファイルの終わりに、空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="7fa0969179f03d1f39ed55770cfc19ab243badc2" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;collect&lt;/code&gt;&quot;:  performs a full garbage-collection cycle. This is the default option.</source>
          <target state="translated">&quot; &lt;code&gt;collect&lt;/code&gt; &quot;：完全なガベージコレクションサイクルを実行します。これがデフォルトのオプションです。</target>
        </trans-unit>
        <trans-unit id="4d2df6eb922319bf606a86a89e2fc83230795af9" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;count&lt;/code&gt;&quot;:  returns the total memory in use by Lua in Kbytes. The value has a fractional part, so that it multiplied by 1024 gives the exact number of bytes in use by Lua (except for overflows).</source>
          <target state="translated">&quot; &lt;code&gt;count&lt;/code&gt; &quot;：Luaが使用しているメモリの合計をキロバイト単位で返します。値には小数部があるため、1024を掛けると、Luaで使用されている正確なバイト数が得られます（オーバーフローを除く）。</target>
        </trans-unit>
        <trans-unit id="ef21751d9473020b9e5da0603526fbc16553da86" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;cur&lt;/code&gt;&quot;:  base is current position;</source>
          <target state="translated">&quot; &lt;code&gt;cur&lt;/code&gt; &quot;：ベースは現在の位置です。</target>
        </trans-unit>
        <trans-unit id="45f4427c05fe67a6aadc962320833307f03356f2" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;end&lt;/code&gt;&quot;:  base is end of file;</source>
          <target state="translated">&quot; &lt;code&gt;end&lt;/code&gt; &quot;：ベースはファイルの終わりです。</target>
        </trans-unit>
        <trans-unit id="b6883b7ef8179370d3a9ce57af44e1806db3b5d3" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;exit&lt;/code&gt;&quot;:  the command terminated normally; the following number is the exit status of the command.</source>
          <target state="translated">&quot; &lt;code&gt;exit&lt;/code&gt; &quot;：コマンドは正常に終了しました。次の番号は、コマンドの終了ステータスです。</target>
        </trans-unit>
        <trans-unit id="f86582b43c224b125fce8af4c1bd39d83c959584" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;full&lt;/code&gt;&quot;:  full buffering; output operation is performed only when the buffer is full or when you explicitly &lt;code&gt;flush&lt;/code&gt; the file (see &lt;a href=&quot;#pdf-io.flush&quot;&gt;&lt;code&gt;io.flush&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&quot; &lt;code&gt;full&lt;/code&gt; &quot;：完全なバッファリング。出力操作は、バッファーがいっぱいになったとき、または明示的にファイルを &lt;code&gt;flush&lt;/code&gt; たときにのみ実行されます（&lt;a href=&quot;#pdf-io.flush&quot;&gt; &lt;code&gt;io.flush&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8b36390a21d74199c7097e386abdc8966f9f3141" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;isrunning&lt;/code&gt;&quot;:  returns a boolean that tells whether the collector is running (i.e., not stopped).</source>
          <target state="translated">&quot; &lt;code&gt;isrunning&lt;/code&gt; &quot;：コレクターが実行されている（つまり、停止されていない）かどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="35126f6ad470130461b610dc64352ebf2d5ba8ac" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;l&lt;/code&gt;&quot;:  reads the next line skipping the end of line, returning &lt;b&gt;nil&lt;/b&gt; on end of file. This is the default format.</source>
          <target state="translated">&quot; &lt;code&gt;l&lt;/code&gt; &quot;：ファイルの終わりで&lt;b&gt;nil&lt;/b&gt;を返し、行の終わりをスキップして次の行を読み取ります。これがデフォルトのフォーマットです。</target>
        </trans-unit>
        <trans-unit id="0bf7bc41709a6ccf5aa6eae67b8f346e5001d8b6" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;line&lt;/code&gt;&quot;:  line buffering; output is buffered until a newline is output or there is any input from some special files (such as a terminal device).</source>
          <target state="translated">&quot; &lt;code&gt;line&lt;/code&gt; &quot;：行バッファリング。出力は、改行が出力されるまで、または一部の特殊ファイル（端末デバイスなど）からの入力があるまでバッファリングされます。</target>
        </trans-unit>
        <trans-unit id="e4a59afc3c3aee61c303a6c6f2b2a762d2ad3d81" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;n&lt;/code&gt;&quot;:  reads a numeral and returns it as a float or an integer, following the lexical conventions of Lua. (The numeral may have leading spaces and a sign.) This format always reads the longest input sequence that is a valid prefix for a numeral; if that prefix does not form a valid numeral (e.g., an empty string, &quot;&lt;code&gt;0x&lt;/code&gt;&quot;, or &quot;&lt;code&gt;3.4e-&lt;/code&gt;&quot;), it is discarded and the function returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">&quot; &lt;code&gt;n&lt;/code&gt; &quot;：Luaの字句規則に従って、数値を読み取り、それを浮動小数点数または整数として返します。（数値には先行スペースと符号が含まれる場合があります。）この形式は常に、数値の有効な接頭辞である最も長い入力シーケンスを読み取ります。その接頭辞が有効な数字を形成しない場合（たとえば、空の文字列、「 &lt;code&gt;0x&lt;/code&gt; 」、または「 &lt;code&gt;3.4e-&lt;/code&gt; 」）、それは破棄され、関数は&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="1a4495ab81e55566441b9ba9cd4267c1f76a8e00" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;no&lt;/code&gt;&quot;:  no buffering; the result of any output operation appears immediately.</source>
          <target state="translated">&quot; &lt;code&gt;no&lt;/code&gt; &quot;：バッファリングなし; 出力操作の結果はすぐに表示されます。</target>
        </trans-unit>
        <trans-unit id="6aff03076b0cbaa7624920aed996ee3d088508ee" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;r+&lt;/code&gt;&quot;:  update mode, all previous data is preserved;</source>
          <target state="translated">&quot; &lt;code&gt;r+&lt;/code&gt; &quot;：更新モード。以前のデータはすべて保持されます。</target>
        </trans-unit>
        <trans-unit id="482f32bfc1639381f140a1f788e0fb798f9e8562" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;r&lt;/code&gt;&quot;:  read mode (the default);</source>
          <target state="translated">&quot; &lt;code&gt;r&lt;/code&gt; &quot;：読み取りモード（デフォルト）。</target>
        </trans-unit>
        <trans-unit id="1f0ba614002bce35b460ade5c8343fbd966c8766" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;restart&lt;/code&gt;&quot;:  restarts automatic execution of the garbage collector.</source>
          <target state="translated">&quot; &lt;code&gt;restart&lt;/code&gt; &quot;：ガベージコレクターの自動実行を再開します。</target>
        </trans-unit>
        <trans-unit id="da9e4c23feee0a79d4abaaf5c61375cea61ef16e" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;set&lt;/code&gt;&quot;:  base is position 0 (beginning of the file);</source>
          <target state="translated">&quot; &lt;code&gt;set&lt;/code&gt; &quot;：ベースは位置0（ファイルの先頭）です。</target>
        </trans-unit>
        <trans-unit id="3ec56036cdf5df6fcc52e9cfbd8e2a8921f7aeb1" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;setpause&lt;/code&gt;&quot;:  sets &lt;code&gt;arg&lt;/code&gt; as the new value for the &lt;em&gt;pause&lt;/em&gt; of the collector (see &lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;). Returns the previous value for &lt;em&gt;pause&lt;/em&gt;.</source>
          <target state="translated">&quot; &lt;code&gt;setpause&lt;/code&gt; &quot;： &lt;code&gt;arg&lt;/code&gt; をコレクターの&lt;em&gt;一時停止の&lt;/em&gt;新しい値として設定します（&lt;a href=&quot;#2.5&quot;&gt;2.5を&lt;/a&gt;参照）。&lt;em&gt;pause&lt;/em&gt;の前の値を返します。</target>
        </trans-unit>
        <trans-unit id="d1dc91f2ee994f6c3a3be7368d48037cc9c1b59c" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;setstepmul&lt;/code&gt;&quot;:  sets &lt;code&gt;arg&lt;/code&gt; as the new value for the &lt;em&gt;step multiplier&lt;/em&gt; of the collector (see &lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;). Returns the previous value for &lt;em&gt;step&lt;/em&gt;.</source>
          <target state="translated">&quot; &lt;code&gt;setstepmul&lt;/code&gt; &quot;： &lt;code&gt;arg&lt;/code&gt; をコレクターの&lt;em&gt;ステップ乗数の&lt;/em&gt;新しい値として設定します（&lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5を&lt;/a&gt;参照）。&lt;em&gt;ステップ&lt;/em&gt;の前の値を返します。</target>
        </trans-unit>
        <trans-unit id="c115c4696628bd2659c03d76315d495492249e40" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;signal&lt;/code&gt;&quot;:  the command was terminated by a signal; the following number is the signal that terminated the command.</source>
          <target state="translated">&quot; &lt;code&gt;signal&lt;/code&gt; &quot;：コマンドはシグナルによって終了しました。次の番号は、コマンドを終了した信号です。</target>
        </trans-unit>
        <trans-unit id="c28a219da2e678f08b09e43596cbee1a80cf4c50" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;step&lt;/code&gt;&quot;:  performs a garbage-collection step. The step &quot;size&quot; is controlled by &lt;code&gt;arg&lt;/code&gt;. With a zero value, the collector will perform one basic (indivisible) step. For non-zero values, the collector will perform as if that amount of memory (in KBytes) had been allocated by Lua. Returns &lt;b&gt;true&lt;/b&gt; if the step finished a collection cycle.</source>
          <target state="translated">&quot; &lt;code&gt;step&lt;/code&gt; &quot;：ガベージコレクションのステップを実行します。ステップ「サイズ」は &lt;code&gt;arg&lt;/code&gt; によって制御されます。値がゼロの場合、コレクターは1つの基本的な（分割できない）ステップを実行します。ゼロ以外の値の場合、コレクターはその量のメモリー（KB単位）がLuaによって割り当てられたかのように実行します。ステップが収集サイクルを終了した場合は&lt;b&gt;trueを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="93ae23d840374f0e5fdda6d2e1995e17e2530e29" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;stop&lt;/code&gt;&quot;:  stops automatic execution of the garbage collector. The collector will run only when explicitly invoked, until a call to restart it.</source>
          <target state="translated">&quot; &lt;code&gt;stop&lt;/code&gt; &quot;：ガベージコレクターの自動実行を停止します。コレクターは、明示的に呼び出された場合にのみ、再起動するまで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="630c88288eece276817c37c452c13aad30aeeac6" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;w+&lt;/code&gt;&quot;:  update mode, all previous data is erased;</source>
          <target state="translated">&quot; &lt;code&gt;w+&lt;/code&gt; &quot;：更新モード。以前のデータはすべて消去されます。</target>
        </trans-unit>
        <trans-unit id="4c032e7180fccc925387c5e5d8ef02f876f66a43" translate="yes" xml:space="preserve">
          <source>&quot;&lt;code&gt;w&lt;/code&gt;&quot;:  write mode;</source>
          <target state="translated">&quot; &lt;code&gt;w&lt;/code&gt; &quot;：書き込みモード。</target>
        </trans-unit>
        <trans-unit id="f33634dd2aed7619f53f32286917ce87f67cf9f3" translate="yes" xml:space="preserve">
          <source>&amp;copy; 1994&amp;ndash;2017 Lua.org, PUC-Rio.</source>
          <target state="translated">&amp;copy;1994&amp;ndash;2017 Lua.org、PUC-Rio。</target>
        </trans-unit>
        <trans-unit id="726a699c479b955107f38c46bbe964c5bb86c9c1" translate="yes" xml:space="preserve">
          <source>'': (empty space) ignored</source>
          <target state="translated">'':(空欄)無視</target>
        </trans-unit>
        <trans-unit id="f90841632f7dd28deac05f9104f8757d4d938ddf" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;L&lt;/code&gt;':  pushes onto the stack a table whose indices are the numbers of the lines that are valid on the function. (A &lt;em&gt;valid line&lt;/em&gt; is a line with some associated code, that is, a line where you can put a break point. Non-valid lines include empty lines and comments.)</source>
          <target state="translated">' &lt;code&gt;L&lt;/code&gt; '：関数で有効な行の番号をインデックスとするテーブルをスタックにプッシュします。（&lt;em&gt;有効な行&lt;/em&gt;とは、コードが関連付けられている行、つまりブレークポイントを設定できる行です。無効な行には、空の行とコメントが含まれます。）</target>
        </trans-unit>
        <trans-unit id="16fe771c19d862613ab04d78a26fbb806a4f2023" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;S&lt;/code&gt;':  fills in the fields &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;short_src&lt;/code&gt;, &lt;code&gt;linedefined&lt;/code&gt;, &lt;code&gt;lastlinedefined&lt;/code&gt;, and &lt;code&gt;what&lt;/code&gt;;</source>
          <target state="translated">' &lt;code&gt;S&lt;/code&gt; '： &lt;code&gt;source&lt;/code&gt; 、 &lt;code&gt;short_src&lt;/code&gt; 、 &lt;code&gt;linedefined&lt;/code&gt; 、 &lt;code&gt;lastlinedefined&lt;/code&gt; 、および &lt;code&gt;what&lt;/code&gt; のフィールドに入力します。</target>
        </trans-unit>
        <trans-unit id="11a8d7eb3de20bf4074efa8302fa3ebc068c92db" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;c&lt;/code&gt;':  the hook is called every time Lua calls a function;</source>
          <target state="translated">' &lt;code&gt;c&lt;/code&gt; '：Luaが関数を呼び出すたびにフックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5dcde03cc29cac4fbee975fd5c6324c0eb2f762a" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;f&lt;/code&gt;':  pushes onto the stack the function that is running at the given level;</source>
          <target state="translated">' &lt;code&gt;f&lt;/code&gt; '：指定されたレベルで実行されている関数をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="d52c4536e0d633bd2dc95275436338ca66e5b0e0" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;l&lt;/code&gt;':  fills in the field &lt;code&gt;currentline&lt;/code&gt;;</source>
          <target state="translated">' &lt;code&gt;l&lt;/code&gt; '：フィールド &lt;code&gt;currentline&lt;/code&gt; に入力します。</target>
        </trans-unit>
        <trans-unit id="06eefa71811d3d77eadfb569caf992bf00533260" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;l&lt;/code&gt;':  the hook is called every time Lua enters a new line of code.</source>
          <target state="translated">' &lt;code&gt;l&lt;/code&gt; '：Luaが新しいコード行を入力するたびにフックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="19b3d6db914e545df7410bf6ead714c645f9d90c" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;n&lt;/code&gt;':  fills in the field &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;namewhat&lt;/code&gt;;</source>
          <target state="translated">' &lt;code&gt;n&lt;/code&gt; '：フィールド &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;namewhat&lt;/code&gt; を入力します。</target>
        </trans-unit>
        <trans-unit id="0af9c5fa72fd0ae40f86d69a634de5abaff185ba" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;r&lt;/code&gt;':  the hook is called every time Lua returns from a function;</source>
          <target state="translated">' &lt;code&gt;r&lt;/code&gt; '：Luaが関数から戻るたびにフックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5aab32dc44a04b46cf39fd9dca7828f4e75632c3" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;t&lt;/code&gt;':  fills in the field &lt;code&gt;istailcall&lt;/code&gt;;</source>
          <target state="translated">' &lt;code&gt;t&lt;/code&gt; '： &lt;code&gt;istailcall&lt;/code&gt; フィールドに入力します。</target>
        </trans-unit>
        <trans-unit id="2995d9a5b2edfc5c4090bb5aeac40be286f51c1c" translate="yes" xml:space="preserve">
          <source>'&lt;code&gt;u&lt;/code&gt;':  fills in the fields &lt;code&gt;nups&lt;/code&gt;, &lt;code&gt;nparams&lt;/code&gt;, and &lt;code&gt;isvararg&lt;/code&gt;;</source>
          <target state="translated">' &lt;code&gt;u&lt;/code&gt; '：フィールド &lt;code&gt;nups&lt;/code&gt; 、 &lt;code&gt;nparams&lt;/code&gt; 、および &lt;code&gt;isvararg&lt;/code&gt; を入力します。</target>
        </trans-unit>
        <trans-unit id="3ba9ac7e76f439728000e96df248ad5393e0be09" translate="yes" xml:space="preserve">
          <source>(A &quot;&lt;code&gt;[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;&quot; means an optional integral numeral.) Except for padding, spaces, and configurations (options &quot;&lt;code&gt;xX &amp;lt;=&amp;gt;!&lt;/code&gt;&quot;), each option corresponds to an argument (in &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt;) or a result (in &lt;a href=&quot;#pdf-string.unpack&quot;&gt;&lt;code&gt;string.unpack&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">（A &quot; &lt;code&gt;[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt; &quot;はオプションの整数を意味します。）パディング、スペース、および構成（オプション &quot; &lt;code&gt;xX &amp;lt;=&amp;gt;!&lt;/code&gt; &quot;）を除き、各オプションは引数（&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; 内&lt;/a&gt;）または結果（&lt;a href=&quot;#pdf-string.unpack&quot;&gt; &lt;code&gt;string.unpack&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ff34abdb860538263e1592eaf5de0e2697e490fe" translate="yes" xml:space="preserve">
          <source>(Formally this is not an incompatibility, because Lua does not specify how numbers are formatted as strings, but some programs assumed a specific format.)</source>
          <target state="translated">(Luaでは数値の文字列としての書式は指定されていませんが、一部のプログラムでは特定の書式を想定していたため、形式的には非互換ではありません)</target>
        </trans-unit>
        <trans-unit id="83e737da7c8003cef965fa66244b7d4f0e811971" translate="yes" xml:space="preserve">
          <source>(In this manual, &lt;code&gt;--&amp;gt;&lt;/code&gt; indicates the result of the preceding expression.)</source>
          <target state="translated">（このマニュアルでは、 &lt;code&gt;--&amp;gt;&lt;/code&gt; は前の式の結果を示しています。）</target>
        </trans-unit>
        <trans-unit id="bf94fa4119b73b349cb3a869be243c96bbbd716b" translate="yes" xml:space="preserve">
          <source>(Note that it is very easy to exhaust the memory of your machine with a single call to this function.)</source>
          <target state="translated">(この関数を1回呼び出すだけで、マシンのメモリを使い切るのは非常に簡単であることに注意してください)。</target>
        </trans-unit>
        <trans-unit id="15e67d53040898eb1d72848e8bf16a113fbe8148" translate="yes" xml:space="preserve">
          <source>(Of course, the location of the Lua interpreter may be different in your machine. If &lt;code&gt;lua&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt;, then</source>
          <target state="translated">（もちろん、Luaインタープリターの場所はマシンによって異なる場合があります &lt;code&gt;lua&lt;/code&gt; が &lt;code&gt;PATH&lt;/code&gt; にある場合、</target>
        </trans-unit>
        <trans-unit id="81e3e714f7f80485e58bd929a17d4b2437cf6658" translate="yes" xml:space="preserve">
          <source>(This only makes a difference when the body of the function contains references to &lt;code&gt;f&lt;/code&gt;.)</source>
          <target state="translated">（これは、関数の本体に &lt;code&gt;f&lt;/code&gt; への参照が含まれている場合にのみ、違いを生じます。）</target>
        </trans-unit>
        <trans-unit id="cc7121f94b54a95b8b969917eaaadf1818bfdd84" translate="yes" xml:space="preserve">
          <source>1 &amp;ndash; Introduction</source>
          <target state="translated">1 &amp;ndash;はじめに</target>
        </trans-unit>
        <trans-unit id="8f2807c1adb4cb8317971da9ae6f8750a47585a8" translate="yes" xml:space="preserve">
          <source>2 &amp;ndash; Basic Concepts</source>
          <target state="translated">2 &amp;ndash;基本的な概念</target>
        </trans-unit>
        <trans-unit id="addc53e794c80e9178d488e577f3a4dea23392c9" translate="yes" xml:space="preserve">
          <source>2.1 &amp;ndash; Values and Types</source>
          <target state="translated">2.1 &amp;ndash;値と型</target>
        </trans-unit>
        <trans-unit id="3a2d12c82ff6ae933fc4f58e1c29dac173475282" translate="yes" xml:space="preserve">
          <source>2.2 &amp;ndash; Environments and the Global Environment</source>
          <target state="translated">2.2 &amp;ndash;環境と地球環境</target>
        </trans-unit>
        <trans-unit id="9ffa2c3b3aefb8ca31249b42217d40b45a53d14c" translate="yes" xml:space="preserve">
          <source>2.3 &amp;ndash; Error Handling</source>
          <target state="translated">2.3 &amp;ndash;エラー処理</target>
        </trans-unit>
        <trans-unit id="5c74738bb551c5852eee4f0c5bc1c1ba329666da" translate="yes" xml:space="preserve">
          <source>2.4 &amp;ndash; Metatables and Metamethods</source>
          <target state="translated">2.4 &amp;ndash;メタテーブルとメタメソッド</target>
        </trans-unit>
        <trans-unit id="33aac5b72dac431d0193e5a027944729e242300d" translate="yes" xml:space="preserve">
          <source>2.5 &amp;ndash; Garbage Collection</source>
          <target state="translated">2.5 &amp;ndash;ガベージコレクション</target>
        </trans-unit>
        <trans-unit id="0f9506705cc9aac3384b718f0231b4eeaf53f83b" translate="yes" xml:space="preserve">
          <source>2.5.1 &amp;ndash; Garbage-Collection Metamethods</source>
          <target state="translated">2.5.1 &amp;ndash;ガベージコレクションメタメソッド</target>
        </trans-unit>
        <trans-unit id="360b1c24eeac1e48dfe95fc741100e73b36bcc2b" translate="yes" xml:space="preserve">
          <source>2.5.2 &amp;ndash; Weak Tables</source>
          <target state="translated">2.5.2 &amp;ndash;弱いテーブル</target>
        </trans-unit>
        <trans-unit id="49622640c10cc5518dfa4cbdd39ec33d28b234e2" translate="yes" xml:space="preserve">
          <source>2.6 &amp;ndash; Coroutines</source>
          <target state="translated">2.6 &amp;ndash;コルーチン</target>
        </trans-unit>
        <trans-unit id="44e5a7dffeb9301dcfea49c570d9242c8df4de45" translate="yes" xml:space="preserve">
          <source>3 &amp;ndash; The Language</source>
          <target state="translated">3 &amp;ndash;言語</target>
        </trans-unit>
        <trans-unit id="2e41c7c97446c4f1020d50a68126a5a0606e6e8f" translate="yes" xml:space="preserve">
          <source>3.1 &amp;ndash; Lexical Conventions</source>
          <target state="translated">3.1 &amp;ndash;字句表記</target>
        </trans-unit>
        <trans-unit id="0612a6e0f7da40e6c864f4e6e097977a5b51bcbe" translate="yes" xml:space="preserve">
          <source>3.2 &amp;ndash; Variables</source>
          <target state="translated">3.2 &amp;ndash;変数</target>
        </trans-unit>
        <trans-unit id="831eca58ed9634bf35d286b0652dd764c6225329" translate="yes" xml:space="preserve">
          <source>3.3 &amp;ndash; Statements</source>
          <target state="translated">3.3 &amp;ndash;ステートメント</target>
        </trans-unit>
        <trans-unit id="b9b8530dd3439338077cae5d9a81b0f8388246f9" translate="yes" xml:space="preserve">
          <source>3.3.1 &amp;ndash; Blocks</source>
          <target state="translated">3.3.1 &amp;ndash;ブロック</target>
        </trans-unit>
        <trans-unit id="249018398e87db611b2f382c32e3c2029e7a3362" translate="yes" xml:space="preserve">
          <source>3.3.2 &amp;ndash; Chunks</source>
          <target state="translated">3.3.2 &amp;ndash;チャンク</target>
        </trans-unit>
        <trans-unit id="93fdc1a5227f5f767eda4b33118ca26d4d3ec98f" translate="yes" xml:space="preserve">
          <source>3.3.3 &amp;ndash; Assignment</source>
          <target state="translated">3.3.3 &amp;ndash;割り当て</target>
        </trans-unit>
        <trans-unit id="60ea5bc043174dd66add3628579020e9fd6149ea" translate="yes" xml:space="preserve">
          <source>3.3.4 &amp;ndash; Control Structures</source>
          <target state="translated">3.3.4 &amp;ndash;制御構造</target>
        </trans-unit>
        <trans-unit id="b4e38214a26cbc13913d45fcdc42571b93281b8f" translate="yes" xml:space="preserve">
          <source>3.3.5 &amp;ndash; For Statement</source>
          <target state="translated">3.3.5 &amp;ndash;ステートメントについて</target>
        </trans-unit>
        <trans-unit id="1f046a545135d5e9e1e65842299b34f6b36157ac" translate="yes" xml:space="preserve">
          <source>3.3.6 &amp;ndash; Function Calls as Statements</source>
          <target state="translated">3.3.6 &amp;ndash;ステートメントとしての関数呼び出し</target>
        </trans-unit>
        <trans-unit id="19a6d2647263682fe5a7621ae89477d702d33727" translate="yes" xml:space="preserve">
          <source>3.3.7 &amp;ndash; Local Declarations</source>
          <target state="translated">3.3.7 &amp;ndash;ローカル宣言</target>
        </trans-unit>
        <trans-unit id="ac56f78d28bb6bfafede4821e374042b6d5ded3c" translate="yes" xml:space="preserve">
          <source>3.4 &amp;ndash; Expressions</source>
          <target state="translated">3.4 &amp;ndash;式</target>
        </trans-unit>
        <trans-unit id="11859fef39e3ab01288c6dd79b5e2b11fdad4c8d" translate="yes" xml:space="preserve">
          <source>3.4.1 &amp;ndash; Arithmetic Operators</source>
          <target state="translated">3.4.1 &amp;ndash;算術演算子</target>
        </trans-unit>
        <trans-unit id="5ba9603d3900196b96bc99dd68bef5ea214ec46d" translate="yes" xml:space="preserve">
          <source>3.4.10 &amp;ndash; Function Calls</source>
          <target state="translated">3.4.10 &amp;ndash;関数呼び出し</target>
        </trans-unit>
        <trans-unit id="d521e09f296fb652ca685e9986c89365b3a3a60e" translate="yes" xml:space="preserve">
          <source>3.4.11 &amp;ndash; Function Definitions</source>
          <target state="translated">3.4.11 &amp;ndash;関数定義</target>
        </trans-unit>
        <trans-unit id="0767b1e410d6366522683c5dea029dba330f750e" translate="yes" xml:space="preserve">
          <source>3.4.2 &amp;ndash; Bitwise Operators</source>
          <target state="translated">3.4.2 &amp;ndash;ビット演算子</target>
        </trans-unit>
        <trans-unit id="7fcc429ce74b3bad7b171ca68ce6278ebc43bae9" translate="yes" xml:space="preserve">
          <source>3.4.3 &amp;ndash; Coercions and Conversions</source>
          <target state="translated">3.4.3 &amp;ndash;強制と変換</target>
        </trans-unit>
        <trans-unit id="a5cfc763ebbbdbc2d383f04e2795f848e29252e2" translate="yes" xml:space="preserve">
          <source>3.4.4 &amp;ndash; Relational Operators</source>
          <target state="translated">3.4.4 &amp;ndash;関係演算子</target>
        </trans-unit>
        <trans-unit id="0813780c5158e7059551f2d8bd071c10fcd64a1e" translate="yes" xml:space="preserve">
          <source>3.4.5 &amp;ndash; Logical Operators</source>
          <target state="translated">3.4.5 &amp;ndash;論理演算子</target>
        </trans-unit>
        <trans-unit id="053f15c92c03eee025a09cbef6910c4913cf9628" translate="yes" xml:space="preserve">
          <source>3.4.6 &amp;ndash; Concatenation</source>
          <target state="translated">3.4.6 &amp;ndash;連結</target>
        </trans-unit>
        <trans-unit id="48ea8196506d47e56086f0bd779ad133e81d539a" translate="yes" xml:space="preserve">
          <source>3.4.7 &amp;ndash; The Length Operator</source>
          <target state="translated">3.4.7 &amp;ndash;長さ演算子</target>
        </trans-unit>
        <trans-unit id="b77361dfb2f580a09634468b4a92c293c9a90987" translate="yes" xml:space="preserve">
          <source>3.4.8 &amp;ndash; Precedence</source>
          <target state="translated">3.4.8 &amp;ndash;優先順位</target>
        </trans-unit>
        <trans-unit id="1716010a5bdaeeaa519496e7998b4394c6b17b0d" translate="yes" xml:space="preserve">
          <source>3.4.9 &amp;ndash; Table Constructors</source>
          <target state="translated">3.4.9 &amp;ndash;テーブルコンストラクタ</target>
        </trans-unit>
        <trans-unit id="c20fcbea7777ae7db816c4f7863db3c7e76c4be7" translate="yes" xml:space="preserve">
          <source>3.5 &amp;ndash; Visibility Rules</source>
          <target state="translated">3.5 &amp;ndash;可視性ルール</target>
        </trans-unit>
        <trans-unit id="dd63ac66a4ed838d368dd76236f0026ba6aee449" translate="yes" xml:space="preserve">
          <source>4 &amp;ndash; The Application Program Interface</source>
          <target state="translated">4 &amp;ndash;アプリケーションプログラムインターフェイス</target>
        </trans-unit>
        <trans-unit id="f79922b6ade2d7cb13fd986a703b2a74313e769b" translate="yes" xml:space="preserve">
          <source>4.1 &amp;ndash; The Stack</source>
          <target state="translated">4.1 &amp;ndash;スタック</target>
        </trans-unit>
        <trans-unit id="5b51906b5985deb44043d8f246cfc18dd2ae60aa" translate="yes" xml:space="preserve">
          <source>4.2 &amp;ndash; Stack Size</source>
          <target state="translated">4.2 &amp;ndash;スタックサイズ</target>
        </trans-unit>
        <trans-unit id="31b2949d1c9fcdf122a9e531b559332da4485f80" translate="yes" xml:space="preserve">
          <source>4.3 &amp;ndash; Valid and Acceptable Indices</source>
          <target state="translated">4.3 &amp;ndash;有効で許容可能なインデックス</target>
        </trans-unit>
        <trans-unit id="74f0c5c5ee47538264fae29f7657133d0d699462" translate="yes" xml:space="preserve">
          <source>4.4 &amp;ndash; C Closures</source>
          <target state="translated">4.4 &amp;ndash; Cクロージャ</target>
        </trans-unit>
        <trans-unit id="dc6aa4af1e5cbd9bad1a034dc03de85dd86ad779" translate="yes" xml:space="preserve">
          <source>4.5 &amp;ndash; Registry</source>
          <target state="translated">4.5 &amp;ndash;レジストリ</target>
        </trans-unit>
        <trans-unit id="d8452600dbf3930156ccc218b4b4ddb69035a3ec" translate="yes" xml:space="preserve">
          <source>4.6 &amp;ndash; Error Handling in C</source>
          <target state="translated">4.6 &amp;ndash; Cでのエラー処理</target>
        </trans-unit>
        <trans-unit id="275ecb37e4e88aebd92acb558147bf849a62c9bb" translate="yes" xml:space="preserve">
          <source>4.7 &amp;ndash; Handling Yields in C</source>
          <target state="translated">4.7 &amp;ndash; Cでの収量の処理</target>
        </trans-unit>
        <trans-unit id="bd1985494a7c3d7d1062380e781037ccb1f14dbf" translate="yes" xml:space="preserve">
          <source>4.8 &amp;ndash; Functions and Types[-o, +p, &lt;em&gt;x&lt;/em&gt;]</source>
          <target state="translated">4.8 &amp;ndash;関数と型[-o、+ p、&lt;em&gt;x&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="fd295b2094f1a31a0f8f4e3c5ef5c7874f795c82" translate="yes" xml:space="preserve">
          <source>4.9 &amp;ndash; The Debug Interface</source>
          <target state="translated">4.9 &amp;ndash;デバッグインターフェイス</target>
        </trans-unit>
        <trans-unit id="7ad85d079aa056f3c063c288f0c0093ca0f6c73d" translate="yes" xml:space="preserve">
          <source>5 &amp;ndash; The Auxiliary Library</source>
          <target state="translated">5 &amp;ndash;補助ライブラリ</target>
        </trans-unit>
        <trans-unit id="71d57e32825e907432cc4adf35e23a77ed97c0a2" translate="yes" xml:space="preserve">
          <source>5.1 &amp;ndash; Functions and Types</source>
          <target state="translated">5.1 &amp;ndash;関数と型</target>
        </trans-unit>
        <trans-unit id="92cc3da65a13c96c43af92f1e98bfede2f153c83" translate="yes" xml:space="preserve">
          <source>6 &amp;ndash; Standard Libraries</source>
          <target state="translated">6 &amp;ndash;標準ライブラリ</target>
        </trans-unit>
        <trans-unit id="c1cf8fe5aceb71994bc78f0adf755277b6681f00" translate="yes" xml:space="preserve">
          <source>6.1 &amp;ndash; Basic Functions</source>
          <target state="translated">6.1 &amp;ndash;基本機能</target>
        </trans-unit>
        <trans-unit id="6e24ce31a4d8a8b2c4bf3eaf4c953e980b335967" translate="yes" xml:space="preserve">
          <source>6.10 &amp;ndash; The Debug Library</source>
          <target state="translated">6.10 &amp;ndash;デバッグライブラリ</target>
        </trans-unit>
        <trans-unit id="03d2065bb3d3315a8c459cb76f8c692d4aabb3b3" translate="yes" xml:space="preserve">
          <source>6.2 &amp;ndash; Coroutine Manipulation</source>
          <target state="translated">6.2 &amp;ndash;コルーチン操作</target>
        </trans-unit>
        <trans-unit id="7ab3ec70bbfde06cb8aacd9d27858f73840ca3e6" translate="yes" xml:space="preserve">
          <source>6.3 &amp;ndash; Modules</source>
          <target state="translated">6.3 &amp;ndash;モジュール</target>
        </trans-unit>
        <trans-unit id="1a9e8fe3268257be8690631f66b150e7b529fa25" translate="yes" xml:space="preserve">
          <source>6.4 &amp;ndash; String Manipulation</source>
          <target state="translated">6.4 &amp;ndash;文字列操作</target>
        </trans-unit>
        <trans-unit id="c32244a851c4ca4fbd524d465d9ac63a62295558" translate="yes" xml:space="preserve">
          <source>6.4.1 &amp;ndash; Patterns</source>
          <target state="translated">6.4.1 &amp;ndash;パターン</target>
        </trans-unit>
        <trans-unit id="117f4fd92a6a3918b099c684ab382f396d5eb6a0" translate="yes" xml:space="preserve">
          <source>6.4.2 &amp;ndash; Format Strings for Pack and Unpack</source>
          <target state="translated">6.4.2 &amp;ndash;パックおよびアンパックのフォーマット文字列</target>
        </trans-unit>
        <trans-unit id="2c69cea016f7e6620297e4c1a14aee86bca54a5d" translate="yes" xml:space="preserve">
          <source>6.5 &amp;ndash; UTF-8 Support</source>
          <target state="translated">6.5 &amp;ndash; UTF-8サポート</target>
        </trans-unit>
        <trans-unit id="63cc5647192e9aeb780e978b92120a1f45dd2739" translate="yes" xml:space="preserve">
          <source>6.6 &amp;ndash; Table Manipulation</source>
          <target state="translated">6.6 &amp;ndash;テーブル操作</target>
        </trans-unit>
        <trans-unit id="c32e233273be58074db0281b90ff78f133dadaa9" translate="yes" xml:space="preserve">
          <source>6.7 &amp;ndash; Mathematical Functions</source>
          <target state="translated">6.7 &amp;ndash;数学関数</target>
        </trans-unit>
        <trans-unit id="832907e7e19406cf81191180275a0cb50dea430b" translate="yes" xml:space="preserve">
          <source>6.8 &amp;ndash; Input and Output Facilities</source>
          <target state="translated">6.8 &amp;ndash;入力および出力機能</target>
        </trans-unit>
        <trans-unit id="cb34b15416a677114058591f5dd2c4ae7287d44b" translate="yes" xml:space="preserve">
          <source>6.9 &amp;ndash; Operating System Facilities</source>
          <target state="translated">6.9 &amp;ndash;オペレーティングシステム機能</target>
        </trans-unit>
        <trans-unit id="392af5f262337c8a47dea77fc574c5980a74525f" translate="yes" xml:space="preserve">
          <source>7 &amp;ndash; Lua Standalone</source>
          <target state="translated">7 &amp;ndash; Luaスタンドアロン</target>
        </trans-unit>
        <trans-unit id="8f903b288c9e6ac2b63f9c5ac1ae4e51b0452d1a" translate="yes" xml:space="preserve">
          <source>8 &amp;ndash; Incompatibilities with the Previous Version</source>
          <target state="translated">8 &amp;ndash;以前のバージョンとの非互換性</target>
        </trans-unit>
        <trans-unit id="3f8999c0013347303415ee512a5929d88176001f" translate="yes" xml:space="preserve">
          <source>8.1 &amp;ndash; Changes in the Language</source>
          <target state="translated">8.1 &amp;ndash;言語の変更</target>
        </trans-unit>
        <trans-unit id="9e15fa697b4f86446516c25786580893e59e6a10" translate="yes" xml:space="preserve">
          <source>8.2 &amp;ndash; Changes in the Libraries</source>
          <target state="translated">8.2 &amp;ndash;ライブラリの変更</target>
        </trans-unit>
        <trans-unit id="d089e3545870977ceda5c673010988a582c7e893" translate="yes" xml:space="preserve">
          <source>8.3 &amp;ndash; Changes in the API</source>
          <target state="translated">8.3 &amp;ndash; APIの変更</target>
        </trans-unit>
        <trans-unit id="d31e9eb94987aca4e6da693733376a5662dabd38" translate="yes" xml:space="preserve">
          <source>9 &amp;ndash; The Complete Syntax of Lua</source>
          <target state="translated">9 &amp;ndash; Luaの完全な構文</target>
        </trans-unit>
        <trans-unit id="81d3ce176f56748de5e1f64f56afa6b88a0919fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#lua_getlocal&quot;&gt;&lt;code&gt;lua_getlocal&lt;/code&gt;&lt;/a&gt; pushes the variable's value onto the stack and returns its name.</source>
          <target state="translated">&lt;a href=&quot;#lua_getlocal&quot;&gt; &lt;code&gt;lua_getlocal&lt;/code&gt; &lt;/a&gt;は変数の値をスタックにプッシュし、その名前を返します。</target>
        </trans-unit>
        <trans-unit id="997a4ac3078b35c85f1fb0a338e5857990690995" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;#pdf-LUA_ERRGCMM&quot;&gt;&lt;code&gt;LUA_ERRGCMM&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; error while running a &lt;code&gt;__gc&lt;/code&gt; metamethod. (This error has no relation with the chunk being loaded. It is generated by the garbage collector.)</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;#pdf-LUA_ERRGCMM&quot;&gt; &lt;code&gt;LUA_ERRGCMM&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;エラー実行中 &lt;code&gt;__gc&lt;/code&gt; メタメソッドを。（このエラーは、ロードされているチャンクとは関係ありません。ガベージコレクターによって生成されます。）</target>
        </trans-unit>
        <trans-unit id="0a62e7bf056e6b28156f4c231057917eae3f721a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;#pdf-LUA_ERRMEM&quot;&gt;&lt;code&gt;LUA_ERRMEM&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; memory allocation (out-of-memory) error;</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;#pdf-LUA_ERRMEM&quot;&gt; &lt;code&gt;LUA_ERRMEM&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;メモリ割り当て（メモリ不足）エラー。</target>
        </trans-unit>
        <trans-unit id="bb87b0a3626f8ed024c6ec50e4a5a62da84f1ba0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; no errors;</source>
          <target state="translated">&lt;b&gt;&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;エラーなし。</target>
        </trans-unit>
        <trans-unit id="39a5a19fe9e5d2de47a8c090156531e8d630b23d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRERR&quot;&gt;&lt;code&gt;LUA_ERRERR&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; error while running the message handler.</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRERR&quot;&gt; &lt;code&gt;LUA_ERRERR&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;メッセージハンドラの実行中にエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="58785899340ce91e0de9aca15120aa7cff3c9758" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRGCMM&quot;&gt;&lt;code&gt;LUA_ERRGCMM&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; error while running a &lt;code&gt;__gc&lt;/code&gt; metamethod. For such errors, Lua does not call the message handler (as this kind of error typically has no relation with the function being called).</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRGCMM&quot;&gt; &lt;code&gt;LUA_ERRGCMM&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;エラー実行中 &lt;code&gt;__gc&lt;/code&gt; メタメソッドを。そのようなエラーの場合、Luaはメッセージハンドラーを呼び出しません（この種のエラーは通常、呼び出される関数とは関係がないため）。</target>
        </trans-unit>
        <trans-unit id="0513936f3247fabebe04e7758e5c7c600069b199" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRMEM&quot;&gt;&lt;code&gt;LUA_ERRMEM&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; memory allocation error. For such errors, Lua does not call the message handler.</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRMEM&quot;&gt; &lt;code&gt;LUA_ERRMEM&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;メモリ割り当てエラー。このようなエラーの場合、Luaはメッセージハンドラーを呼び出しません。</target>
        </trans-unit>
        <trans-unit id="6d5a47c8aea539962fb70e275409743f8d4b5c7d" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRRUN&quot;&gt;&lt;code&gt;LUA_ERRRUN&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; a runtime error.</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRRUN&quot;&gt; &lt;code&gt;LUA_ERRRUN&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;ランタイムエラー。</target>
        </trans-unit>
        <trans-unit id="d3a51e900c7e297ae9668bf44b0828218aa58bb0" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRSYNTAX&quot;&gt;&lt;code&gt;LUA_ERRSYNTAX&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; syntax error during precompilation;</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_ERRSYNTAX&quot;&gt; &lt;code&gt;LUA_ERRSYNTAX&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;プリコンパイル中の構文エラー。</target>
        </trans-unit>
        <trans-unit id="069ddb6d3068bf3edc5b7f77df2372cab0d8f9ef" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; (0): &lt;/b&gt; success.</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;（0）：&lt;/b&gt;成功。</target>
        </trans-unit>
        <trans-unit id="3ec3be0613ea3827ce544ed885c9f84ec41464e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPADD&quot;&gt;&lt;code&gt;LUA_OPADD&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs addition (&lt;code&gt;+&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPADD&quot;&gt; &lt;code&gt;LUA_OPADD&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;加算を実行（ &lt;code&gt;+&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6c814447a9527d908c1ce86da63fcae3cd57025f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPBAND&quot;&gt;&lt;code&gt;LUA_OPBAND&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs bitwise AND (&lt;code&gt;&amp;amp;&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPBAND&quot;&gt; &lt;code&gt;LUA_OPBAND&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;ビットごとのAND（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）を実行します</target>
        </trans-unit>
        <trans-unit id="b84c3f3596e3f23015f094f8174ece0ce3d795e1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPBNOT&quot;&gt;&lt;code&gt;LUA_OPBNOT&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs bitwise NOT (&lt;code&gt;~&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPBNOT&quot;&gt; &lt;code&gt;LUA_OPBNOT&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;ビットごとのNOT（ &lt;code&gt;~&lt;/code&gt; ）を実行します</target>
        </trans-unit>
        <trans-unit id="aa756b6d2d7eef20df16036a246330397dc748b4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPBOR&quot;&gt;&lt;code&gt;LUA_OPBOR&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs bitwise OR (&lt;code&gt;|&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPBOR&quot;&gt; &lt;code&gt;LUA_OPBOR&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;ビットごとのOR（ &lt;code&gt;|&lt;/code&gt; ）を実行します</target>
        </trans-unit>
        <trans-unit id="cadd32314c831b1dd6807904ee89f82906c6a5d7" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPBXOR&quot;&gt;&lt;code&gt;LUA_OPBXOR&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs bitwise exclusive OR (&lt;code&gt;~&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPBXOR&quot;&gt; &lt;code&gt;LUA_OPBXOR&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;ビットごとの排他的OR（ &lt;code&gt;~&lt;/code&gt; ）を実行します</target>
        </trans-unit>
        <trans-unit id="0120c4dc4899ecd53a28bb0567448d1dfc295a55" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPDIV&quot;&gt;&lt;code&gt;LUA_OPDIV&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs float division (&lt;code&gt;/&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPDIV&quot;&gt; &lt;code&gt;LUA_OPDIV&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;浮動小数点除算を実行します（ &lt;code&gt;/&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="297add48d11993decc4e07fa953033476d1943cc" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPEQ&quot;&gt;&lt;code&gt;LUA_OPEQ&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; compares for equality (&lt;code&gt;==&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPEQ&quot;&gt; &lt;code&gt;LUA_OPEQ&lt;/code&gt; &lt;/a&gt;：等しいかどうか&lt;/b&gt;比較します（ &lt;code&gt;==&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6ad36382d905550ab53f7c8b67e61d620b311419" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPIDIV&quot;&gt;&lt;code&gt;LUA_OPIDIV&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs floor division (&lt;code&gt;//&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPIDIV&quot;&gt; &lt;code&gt;LUA_OPIDIV&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;フロア分割を実行します（ &lt;code&gt;//&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="65b04a9f94a548d3eb547be608241aacea9320cb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPLE&quot;&gt;&lt;code&gt;LUA_OPLE&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; compares for less or equal (&lt;code&gt;&amp;lt;=&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPLE&quot;&gt; &lt;code&gt;LUA_OPLE&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;より小さいか等しいか比較します（ &lt;code&gt;&amp;lt;=&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="475bd49677a764ed78bc57bf43886acf09d7bdab" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPLT&quot;&gt;&lt;code&gt;LUA_OPLT&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; compares for less than (&lt;code&gt;&amp;lt;&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPLT&quot;&gt; &lt;code&gt;LUA_OPLT&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;より小さい（ &lt;code&gt;&amp;lt;&lt;/code&gt; ）と比較</target>
        </trans-unit>
        <trans-unit id="d59eb3b1ef4b950e8399516c5f783e0f11e809c4" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPMOD&quot;&gt;&lt;code&gt;LUA_OPMOD&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs modulo (&lt;code&gt;%&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPMOD&quot;&gt; &lt;code&gt;LUA_OPMOD&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;モジュロ（ &lt;code&gt;%&lt;/code&gt; ）を実行します</target>
        </trans-unit>
        <trans-unit id="3be2f129960c9b22d8bed03fc870c9ddeb0d44a1" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPMUL&quot;&gt;&lt;code&gt;LUA_OPMUL&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs multiplication (&lt;code&gt;*&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPMUL&quot;&gt; &lt;code&gt;LUA_OPMUL&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;乗算を実行します（ &lt;code&gt;*&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="0df86847b8617d3071f5659dea048400514522e5" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPPOW&quot;&gt;&lt;code&gt;LUA_OPPOW&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs exponentiation (&lt;code&gt;^&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPPOW&quot;&gt; &lt;code&gt;LUA_OPPOW&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;べき乗を実行します（ &lt;code&gt;^&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="5d397dbd765f0534ad52cb6ff558ee4e7202a360" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPSHL&quot;&gt;&lt;code&gt;LUA_OPSHL&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs left shift (&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPSHL&quot;&gt; &lt;code&gt;LUA_OPSHL&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;左シフトを実行（ &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a57f78cb55bc79c59850850886b07440785fc250" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPSHR&quot;&gt;&lt;code&gt;LUA_OPSHR&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs right shift (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPSHR&quot;&gt; &lt;code&gt;LUA_OPSHR&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;右シフト（ &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ）を実行します</target>
        </trans-unit>
        <trans-unit id="5a256a2902d1801dfd4b235ec7de48d549ccf5af" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPSUB&quot;&gt;&lt;code&gt;LUA_OPSUB&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs subtraction (&lt;code&gt;-&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPSUB&quot;&gt; &lt;code&gt;LUA_OPSUB&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;減算を実行します（ &lt;code&gt;-&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="0079ed2e4b11f9492f31692fe85400731bec09ed" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPUNM&quot;&gt;&lt;code&gt;LUA_OPUNM&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; performs mathematical negation (unary &lt;code&gt;-&lt;/code&gt;)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_OPUNM&quot;&gt; &lt;code&gt;LUA_OPUNM&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;数学的否定を実行します（単項 &lt;code&gt;-&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="490be7142f1b450637c62dce5134a58b5b7cd4c9" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_RIDX_GLOBALS&quot;&gt;&lt;code&gt;LUA_RIDX_GLOBALS&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; At this index the registry has the global environment.</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_RIDX_GLOBALS&quot;&gt; &lt;code&gt;LUA_RIDX_GLOBALS&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;このインデックスでは、レジストリにはグローバル環境があります。</target>
        </trans-unit>
        <trans-unit id="67692b9acd7ece42dccee1c401f83f0322c87845" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;a id=&quot;pdf-LUA_RIDX_MAINTHREAD&quot;&gt;&lt;code&gt;LUA_RIDX_MAINTHREAD&lt;/code&gt;&lt;/a&gt;: &lt;/b&gt; At this index the registry has the main thread of the state. (The main thread is the one created together with the state.)</source>
          <target state="translated">&lt;b&gt;&lt;a id=&quot;pdf-LUA_RIDX_MAINTHREAD&quot;&gt; &lt;code&gt;LUA_RIDX_MAINTHREAD&lt;/code&gt; &lt;/a&gt;：&lt;/b&gt;このインデックスでは、レジストリに状態のメインスレッドがあります。（メインスレッドは、状態とともに作成されるスレッドです。）</target>
        </trans-unit>
        <trans-unit id="3ad03bfffa23a0e90024b5cb186d8482335efd71" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;em&gt;number&lt;/em&gt;: &lt;/b&gt; reads a string with up to this number of bytes, returning &lt;b&gt;nil&lt;/b&gt; on end of file. If &lt;code&gt;number&lt;/code&gt; is zero, it reads nothing and returns an empty string, or &lt;b&gt;nil&lt;/b&gt; on end of file.</source>
          <target state="translated">&lt;b&gt;&lt;em&gt;number&lt;/em&gt;：&lt;/b&gt;このバイト数までの文字列を読み取り、ファイルの終わりに&lt;b&gt; nil&lt;/b&gt;を返します。場合 &lt;code&gt;number&lt;/code&gt; ゼロである、それは何も読まないし、空の文字列、または返します&lt;b&gt; nilを&lt;/b&gt;ファイルの末尾にを。</target>
        </trans-unit>
        <trans-unit id="2a0c3c0bea2d7e7832082339aece729a1babeddb" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;&lt;em&gt;x&lt;/em&gt;: &lt;/b&gt; (where &lt;em&gt;x&lt;/em&gt; is not one of the &lt;em&gt;magic characters&lt;/em&gt;&lt;code&gt;^$()%.[]*+-?&lt;/code&gt;) represents the character &lt;em&gt;x&lt;/em&gt; itself.</source>
          <target state="translated">&lt;b&gt;&lt;em&gt;x&lt;/em&gt;：&lt;/b&gt;（&lt;em&gt; x&lt;/em&gt;は、&lt;em&gt;マジックキャラクター&lt;/em&gt; &lt;code&gt;^$()%.[]*+-?&lt;/code&gt; 1つではありません）は、文字&lt;em&gt; x&lt;/em&gt;自体を表します。</target>
        </trans-unit>
        <trans-unit id="3d2c4186a84e56cd4d03c088b58a9fb64d00944f" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;The call hook: &lt;/b&gt; is called when the interpreter calls a function. The hook is called just after Lua enters the new function, before the function gets its arguments.</source>
          <target state="translated">&lt;b&gt;呼び出しフック：&lt;/b&gt;インタープリターが関数を呼び出すときに呼び出されます。このフックは、Luaが新しい関数に入った直後、関数が引数を取得する前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3586bc19f491f63ef8c6fbe8267e796599c9d56a" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;The count hook: &lt;/b&gt; is called after the interpreter executes every &lt;code&gt;count&lt;/code&gt; instructions. (This event only happens while Lua is executing a Lua function.)</source>
          <target state="translated">&lt;b&gt;countフック：&lt;/b&gt;インタプリタがすべての &lt;code&gt;count&lt;/code&gt; 命令を実行した後に呼び出されます。（このイベントは、LuaがLua関数を実行しているときにのみ発生します。）</target>
        </trans-unit>
        <trans-unit id="dc132bdb212730eeb73d3b168b816f3020c8283b" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;The line hook: &lt;/b&gt; is called when the interpreter is about to start the execution of a new line of code, or when it jumps back in the code (even to the same line). (This event only happens while Lua is executing a Lua function.)</source>
          <target state="translated">&lt;b&gt;行フック：&lt;/b&gt;インタープリターがコードの新しい行の実行を開始しようとしているとき、またはコード内で（同じ行にさえ）ジャンプするときに呼び出されます。（このイベントは、LuaがLua関数を実行しているときにのみ発生します。）</target>
        </trans-unit>
        <trans-unit id="b0512dd920d52edfa2ad49b9db0251dfbc206479" translate="yes" xml:space="preserve">
          <source>&lt;b&gt;The return hook: &lt;/b&gt; is called when the interpreter returns from a function. The hook is called just before Lua leaves the function. There is no standard way to access the values to be returned by the function.</source>
          <target state="translated">&lt;b&gt;returnフック：&lt;/b&gt;インタプリタが関数から戻るときに呼び出されます。フックはLuaが関数を離れる直前に呼び出されます。関数によって返される値にアクセスする標準的な方法はありません。</target>
        </trans-unit>
        <trans-unit id="8805e2bcd652fa518016fd2d76cf56a7869fb8f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;![&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;: sets maximum alignment to &lt;code&gt;n&lt;/code&gt; (default is native alignment)</source>
          <target state="translated">&lt;code&gt;![&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt; ：最大配置を &lt;code&gt;n&lt;/code&gt; に設定します（デフォルトはネイティブ配置です）</target>
        </trans-unit>
        <trans-unit id="3acec99eacd1af7f2ca649aaae893e3003aadfa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;/code&gt;: modulo</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; ：モジュロ</target>
        </trans-unit>
        <trans-unit id="6309f6de64785e493ad21fb0175b5bdc8f6ad525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;em&gt;n&lt;/em&gt;&lt;/code&gt;, for &lt;em&gt;n&lt;/em&gt; between 1 and 9; such item matches a substring equal to the &lt;em&gt;n&lt;/em&gt;-th captured string (see below);</source>
          <target state="translated">&lt;code&gt;%&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; 、&lt;em&gt;n&lt;/em&gt;が1〜9の場合。このようなアイテムは、&lt;em&gt;n&lt;/em&gt;番目にキャプチャされた文字列に等しい部分文字列に一致します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="f20e837008e6cbff5b2ce584f8dd66b1ebff0267" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%&lt;em&gt;x&lt;/em&gt;&lt;/code&gt;:  (where &lt;em&gt;x&lt;/em&gt; is any non-alphanumeric character) represents the character &lt;em&gt;x&lt;/em&gt;. This is the standard way to escape the magic characters. Any non-alphanumeric character (including all punctuation characters, even the non-magical) can be preceded by a '&lt;code&gt;%&lt;/code&gt;' when used to represent itself in a pattern.</source>
          <target state="translated">&lt;code&gt;%&lt;em&gt;x&lt;/em&gt;&lt;/code&gt; ：（&lt;em&gt;x&lt;/em&gt;は英数字以外の文字）文字&lt;em&gt;xを&lt;/em&gt;表します。これは、魔法のキャラクターをエスケープする標準的な方法です。英数字以外の文字（すべての句読文字を含み、魔法以外のものも含む）は、パターンでそれ自体を表すために使用する場合、 ' &lt;code&gt;%&lt;/code&gt; 'を前に付けることができます。</target>
        </trans-unit>
        <trans-unit id="e54e56bd80af5958ec4c201065fe5778f27f86df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%a&lt;/code&gt;:  represents all letters.</source>
          <target state="translated">&lt;code&gt;%a&lt;/code&gt; ：すべての文字を表します。</target>
        </trans-unit>
        <trans-unit id="cbfe0af04bd3d02f8310cc2561a3ed583449532b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%b&lt;em&gt;xy&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are two distinct characters; such item matches strings that start with &lt;em&gt;x&lt;/em&gt;, end with &lt;em&gt;y&lt;/em&gt;, and where the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are &lt;em&gt;balanced&lt;/em&gt;. This means that, if one reads the string from left to right, counting &lt;em&gt;+1&lt;/em&gt; for an &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;-1&lt;/em&gt; for a &lt;em&gt;y&lt;/em&gt;, the ending &lt;em&gt;y&lt;/em&gt; is the first &lt;em&gt;y&lt;/em&gt; where the count reaches 0. For instance, the item &lt;code&gt;%b()&lt;/code&gt; matches expressions with balanced parentheses.</source>
          <target state="translated">&lt;code&gt;%b&lt;em&gt;xy&lt;/em&gt;&lt;/code&gt; 、ここで&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;y&lt;/em&gt;は2つの異なる文字です。このような項目は、&lt;em&gt;x&lt;/em&gt;で始まり&lt;em&gt;y&lt;/em&gt;で終わり、&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;yの&lt;/em&gt;&lt;em&gt;バランス&lt;/em&gt;が&lt;em&gt;とれて&lt;/em&gt;いる文字列に一致します。カウント、左から右に一つの文字列を読み取る場合、この手段&lt;em&gt;+1&lt;/em&gt;のための&lt;em&gt;X&lt;/em&gt;とは、&lt;em&gt;-1&lt;/em&gt;ため&lt;em&gt;Y&lt;/em&gt;、終了&lt;em&gt;yは&lt;/em&gt;最初に&lt;em&gt;Y&lt;/em&gt;カウントが例えば0に達し、項目 &lt;code&gt;%b()&lt;/code&gt; マッチかっこで囲まれた式。</target>
        </trans-unit>
        <trans-unit id="3de9b6ffd559dcc163f65726d138b7349ce95ff4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%c&lt;/code&gt;:  represents all control characters.</source>
          <target state="translated">&lt;code&gt;%c&lt;/code&gt; ：すべての制御文字を表します。</target>
        </trans-unit>
        <trans-unit id="b8ad684e3be8e7587d3c8ce155f426f377443ed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%d&lt;/code&gt;:  represents all digits.</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; ：すべての数字を表します。</target>
        </trans-unit>
        <trans-unit id="a6f3e3f52646f53a60bfe00b2ff656a09e89a4a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%f[&lt;em&gt;set&lt;/em&gt;]&lt;/code&gt;, a &lt;em&gt;frontier pattern&lt;/em&gt;; such item matches an empty string at any position such that the next character belongs to &lt;em&gt;set&lt;/em&gt; and the previous character does not belong to &lt;em&gt;set&lt;/em&gt;. The set &lt;em&gt;set&lt;/em&gt; is interpreted as previously described. The beginning and the end of the subject are handled as if they were the character '&lt;code&gt;\0&lt;/code&gt;'.</source>
          <target state="translated">&lt;code&gt;%f[&lt;em&gt;set&lt;/em&gt;]&lt;/code&gt; 、&lt;em&gt;フロンティアパターン&lt;/em&gt; ; そのような項目は、次の文字が&lt;em&gt;setに&lt;/em&gt;属し、前の文字が&lt;em&gt;setに&lt;/em&gt;属さないように、任意の位置で空の文字列と一致します。セット&lt;em&gt;セット&lt;/em&gt;は、前述のように解釈されます。件名の最初と最後は、文字 ' &lt;code&gt;\0&lt;/code&gt; 'であるかのように処理されます。</target>
        </trans-unit>
        <trans-unit id="d1068a849784cb8f30e250147da15aaa395b0729" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%g&lt;/code&gt;:  represents all printable characters except space.</source>
          <target state="translated">&lt;code&gt;%g&lt;/code&gt; ：スペースを除くすべての印刷可能な文字を表します。</target>
        </trans-unit>
        <trans-unit id="b46f710e58e77aaa525ff9403405ff161c474587" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%l&lt;/code&gt;:  represents all lowercase letters.</source>
          <target state="translated">&lt;code&gt;%l&lt;/code&gt; ：すべての小文字を表します。</target>
        </trans-unit>
        <trans-unit id="00faa1ce628bd5bbd5ebfc1430bf64ce8032b2e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%p&lt;/code&gt;:  represents all punctuation characters.</source>
          <target state="translated">&lt;code&gt;%p&lt;/code&gt; ：すべての句読文字を表します。</target>
        </trans-unit>
        <trans-unit id="409154041b5a8377f4c4a43f5e7a2daca1efae16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%s&lt;/code&gt;:  represents all space characters.</source>
          <target state="translated">&lt;code&gt;%s&lt;/code&gt; ：すべてのスペース文字を表します。</target>
        </trans-unit>
        <trans-unit id="1d077077eba594eeb532db5bbbb344383bb9dc30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%u&lt;/code&gt;:  represents all uppercase letters.</source>
          <target state="translated">&lt;code&gt;%u&lt;/code&gt; ：すべての大文字を表します。</target>
        </trans-unit>
        <trans-unit id="c778e1666515254950019edcc8b53bc7994b2c06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%w&lt;/code&gt;:  represents all alphanumeric characters.</source>
          <target state="translated">&lt;code&gt;%w&lt;/code&gt; ：すべての英数字を表します。</target>
        </trans-unit>
        <trans-unit id="9d32033a43bf5e4d6d3a33f3c31f104d598f06a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%x&lt;/code&gt;:  represents all hexadecimal digits.</source>
          <target state="translated">&lt;code&gt;%x&lt;/code&gt; ：すべての16進数字を表します。</target>
        </trans-unit>
        <trans-unit id="321eb4eafd66d05c141a030945ca6e42e18477a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;amp;&lt;/code&gt;: bitwise AND</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; ：ビットごとのAND</target>
        </trans-unit>
        <trans-unit id="8997dce827f9650de2681505f986bfe4f56868cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;: right shift</source>
          <target state="translated">&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ：右シフト</target>
        </trans-unit>
        <trans-unit id="09075062c64c86a8670a7f150b47a6e95e038431" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;: greater than</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; ：より大きい</target>
        </trans-unit>
        <trans-unit id="4cf6b41db6ebd22069687677e294b12324a1aa22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;&lt;/code&gt;: sets big endian</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; ：ビッグエンディアンを設定します</target>
        </trans-unit>
        <trans-unit id="84aa2a09e22da5344a9e8eb1d63a625c2e6ab9d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;gt;=&lt;/code&gt;: greater or equal</source>
          <target state="translated">&lt;code&gt;&amp;gt;=&lt;/code&gt; ：以上</target>
        </trans-unit>
        <trans-unit id="e1e0a0e88d4b268783cec444b7830a1c8a905396" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;: left shift</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; ：左シフト</target>
        </trans-unit>
        <trans-unit id="64760ee63a8e109d429eec539c3225463668a5c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;: less than</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; ：より小さい</target>
        </trans-unit>
        <trans-unit id="0dc1199995acf8e834d1133c3d0ffe757a0c8c59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;&lt;/code&gt;: sets little endian</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;/code&gt; ：リトルエンディアンを設定</target>
        </trans-unit>
        <trans-unit id="539e9a1a68d56527181e6fda1757b93c7bb90872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;=&lt;/code&gt;: less or equal</source>
          <target state="translated">&lt;code&gt;&amp;lt;=&lt;/code&gt; ：以下</target>
        </trans-unit>
        <trans-unit id="d93e49b81b005f7b70f3e457112527bfdf5d8afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt;: multiplication</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; ：乗算</target>
        </trans-unit>
        <trans-unit id="5a896065ff143b8d4e4525f134563235b2836309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;+&lt;/code&gt;: addition</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; ：追加</target>
        </trans-unit>
        <trans-unit id="6e690d325ab205c7e3e2edc33dded7238d1e95e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--&lt;/code&gt;:  stops handling options;</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; ：オプションの処理を停止します。</target>
        </trans-unit>
        <trans-unit id="7e30ca421360d9668078533affe3127fefa56922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-&lt;/code&gt;:  executes &lt;code&gt;stdin&lt;/code&gt; as a file and stops handling options.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; ： &lt;code&gt;stdin&lt;/code&gt; をファイルとして実行し、オプションの処理を停止します。</target>
        </trans-unit>
        <trans-unit id="fe732ff63697204d0a3854b3dd684f5776ef0028" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-&lt;/code&gt;: subtraction</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; ：減算</target>
        </trans-unit>
        <trans-unit id="769def5a060686cf3ed3fab103466f33fde9d1c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-&lt;/code&gt;: unary minus</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; ：単項マイナス</target>
        </trans-unit>
        <trans-unit id="a62c9dea412713fabd70b0572ce384a36c8975a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-E&lt;/code&gt;:  ignores environment variables;</source>
          <target state="translated">&lt;code&gt;-E&lt;/code&gt; ：環境変数を無視します。</target>
        </trans-unit>
        <trans-unit id="666a8ef269cc241ff9e08c8b6b13c312ec6e0985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-e &lt;em&gt;stat&lt;/em&gt;&lt;/code&gt;:  executes string &lt;em&gt;stat&lt;/em&gt;;</source>
          <target state="translated">&lt;code&gt;-e &lt;em&gt;stat&lt;/em&gt;&lt;/code&gt; ：文字列&lt;em&gt;statを&lt;/em&gt;実行します。</target>
        </trans-unit>
        <trans-unit id="c08ce0d22173d753a71a183348f5899d3deb6286" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-i&lt;/code&gt;:  enters interactive mode after running &lt;em&gt;script&lt;/em&gt;;</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; ：&lt;em&gt;スクリプトの&lt;/em&gt;実行後にインタラクティブモードに入り&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="dacf10d39c10471335c9d03c807dc8f228a1a26f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-l &lt;em&gt;mod&lt;/em&gt;&lt;/code&gt;:  &quot;requires&quot; &lt;em&gt;mod&lt;/em&gt;;</source>
          <target state="translated">&lt;code&gt;-l &lt;em&gt;mod&lt;/em&gt;&lt;/code&gt; ： &quot;必要とする&quot; &lt;em&gt;モッズ&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0bb7b2827bd9676bf04daa9b6241bf4c4b937a87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-v&lt;/code&gt;:  prints version information;</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; ：バージョン情報を出力します。</target>
        </trans-unit>
        <trans-unit id="380d1b565924cf193969bb6016e909adf7faad53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.&lt;/code&gt;:  (a dot) represents all characters.</source>
          <target state="translated">&lt;code&gt;.&lt;/code&gt; ：（ドット）はすべての文字を表します。</target>
        </trans-unit>
        <trans-unit id="29471d9e07752a02a646c75289cc2200ed687ca9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;//&lt;/code&gt;: floor division</source>
          <target state="translated">&lt;code&gt;//&lt;/code&gt; ：床の分割</target>
        </trans-unit>
        <trans-unit id="e74818859a32b3c68f9a537da22031801f01b845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/&lt;/code&gt;: float division</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; ：フロート除算</target>
        </trans-unit>
        <trans-unit id="61efe208b861a62c6b51bce3253be1558c21c997" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;explist&lt;/em&gt;&lt;/code&gt; is evaluated only once. Its results are an &lt;em&gt;iterator&lt;/em&gt; function, a &lt;em&gt;state&lt;/em&gt;, and an initial value for the first &lt;em&gt;iterator variable&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;explist&lt;/em&gt;&lt;/code&gt; は1回だけ評価されます。その結果は、&lt;em&gt;イテレーター&lt;/em&gt;関数、&lt;em&gt;状態&lt;/em&gt;、および最初の&lt;em&gt;イテレーター変数の&lt;/em&gt;初期値&lt;em&gt;です&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="02c81725154593faf7b3b3f43b31b6aa30161b7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;f&lt;/em&gt;&lt;/code&gt;, &lt;code&gt;&lt;em&gt;s&lt;/em&gt;&lt;/code&gt;, and &lt;code&gt;&lt;em&gt;var&lt;/em&gt;&lt;/code&gt; are invisible variables. The names are here for explanatory purposes only.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;f&lt;/em&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;em&gt;s&lt;/em&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;em&gt;var&lt;/em&gt;&lt;/code&gt; は非表示の変数です。名前は、説明のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="562c795de59069a6c76dd75325349c2fc11e4bf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;var&lt;/em&gt;&lt;/code&gt;, &lt;code&gt;&lt;em&gt;limit&lt;/em&gt;&lt;/code&gt;, and &lt;code&gt;&lt;em&gt;step&lt;/em&gt;&lt;/code&gt; are invisible variables. The names shown here are for explanatory purposes only.</source>
          <target state="translated">&lt;code&gt;&lt;em&gt;var&lt;/em&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;em&gt;limit&lt;/em&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;em&gt;step&lt;/em&gt;&lt;/code&gt; は非表示の変数です。ここに表示されている名前は、説明のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="2f71e0d38e440115b80b8062b2667073a2b99d24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;=&lt;/code&gt;: sets native endian</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; ：ネイティブエンディアンを設定します</target>
        </trans-unit>
        <trans-unit id="0a197dcb32b592a6117175ac588ba58ade78518a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;==&lt;/code&gt;: equality</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; ：平等</target>
        </trans-unit>
        <trans-unit id="751cff1d44a9460c79c1d8247a3762226d5dc596" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;B&lt;/code&gt;: an unsigned byte (&lt;code&gt;char&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; ：符号なしバイト（ &lt;code&gt;char&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="78939819671012d7b27e3304caefff90a2896e05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;H&lt;/code&gt;: an unsigned &lt;code&gt;short&lt;/code&gt; (native size)</source>
          <target state="translated">&lt;code&gt;H&lt;/code&gt; ：符号なし &lt;code&gt;short&lt;/code&gt; （ネイティブサイズ）</target>
        </trans-unit>
        <trans-unit id="7b789f63dd50ed7c3fda6b86e141977ab88fef74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;I[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;: an unsigned &lt;code&gt;int&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt; bytes (default is native size)</source>
          <target state="translated">&lt;code&gt;I[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt; ：符号なし &lt;code&gt;int&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; バイト（デフォルトは天然のサイズです）</target>
        </trans-unit>
        <trans-unit id="fb9847bb7bda0dddeaa7102eb5ff82fef56363b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;J&lt;/code&gt;: a &lt;code&gt;lua_Unsigned&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;J&lt;/code&gt; ： &lt;code&gt;lua_Unsigned&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="684450a0b3b1fdd57e3aba433e9b9488eff7d191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&lt;/code&gt;: an unsigned &lt;code&gt;long&lt;/code&gt; (native size)</source>
          <target state="translated">&lt;code&gt;L&lt;/code&gt; ：符号なし &lt;code&gt;long&lt;/code&gt; （ネイティブサイズ）</target>
        </trans-unit>
        <trans-unit id="25c78f460ce68a552941c0b856d21bb1212d5c60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCCOLLECT&lt;/code&gt;:  performs a full garbage-collection cycle.</source>
          <target state="translated">&lt;code&gt;LUA_GCCOLLECT&lt;/code&gt; ：完全なガベージコレクションサイクルを実行します。</target>
        </trans-unit>
        <trans-unit id="feb5e716d218ca16ede442156a2c17fc22562d67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCCOUNT&lt;/code&gt;:  returns the current amount of memory (in Kbytes) in use by Lua.</source>
          <target state="translated">&lt;code&gt;LUA_GCCOUNT&lt;/code&gt; ：Luaが使用している現在のメモリ量（KB）を返します。</target>
        </trans-unit>
        <trans-unit id="5a68d642e09792078a82b22bae5351cbaac81a3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCCOUNTB&lt;/code&gt;:  returns the remainder of dividing the current amount of bytes of memory in use by Lua by 1024.</source>
          <target state="translated">&lt;code&gt;LUA_GCCOUNTB&lt;/code&gt; ：Luaが使用しているメモリの現在のバイト数を1024で除算した余りを返します。</target>
        </trans-unit>
        <trans-unit id="98c1ec01d66de8e0320c4d93348ae60d493d3e9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCISRUNNING&lt;/code&gt;:  returns a boolean that tells whether the collector is running (i.e., not stopped).</source>
          <target state="translated">&lt;code&gt;LUA_GCISRUNNING&lt;/code&gt; ：コレクターが実行中である（つまり、停止していない）かどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="b2278ee01aaa7877800006c384258d197cbdf9bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCRESTART&lt;/code&gt;:  restarts the garbage collector.</source>
          <target state="translated">&lt;code&gt;LUA_GCRESTART&lt;/code&gt; ：ガベージコレクターを再起動します。</target>
        </trans-unit>
        <trans-unit id="fa1ba56a5a60dabda23e38f6db79d5515a2addfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCSETPAUSE&lt;/code&gt;:  sets &lt;code&gt;data&lt;/code&gt; as the new value for the &lt;em&gt;pause&lt;/em&gt; of the collector (see &lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;) and returns the previous value of the pause.</source>
          <target state="translated">&lt;code&gt;LUA_GCSETPAUSE&lt;/code&gt; ： &lt;code&gt;data&lt;/code&gt; をコレクターの&lt;em&gt;休止の&lt;/em&gt;新しい値として設定し（&lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5を&lt;/a&gt;参照）、以前の休止の値を返します。</target>
        </trans-unit>
        <trans-unit id="3b218eaca4b6e9893a3e16aea485fd11554bfd2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCSETSTEPMUL&lt;/code&gt;:  sets &lt;code&gt;data&lt;/code&gt; as the new value for the &lt;em&gt;step multiplier&lt;/em&gt; of the collector (see &lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;) and returns the previous value of the step multiplier.</source>
          <target state="translated">&lt;code&gt;LUA_GCSETSTEPMUL&lt;/code&gt; ： &lt;code&gt;data&lt;/code&gt; をコレクターの&lt;em&gt;ステップ乗数の&lt;/em&gt;新しい値として設定し（&lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5を&lt;/a&gt;参照）、ステップ乗数の以前の値を返します。</target>
        </trans-unit>
        <trans-unit id="1d7e799ac56c4ff839b3019633b438fb825a18fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCSTEP&lt;/code&gt;:  performs an incremental step of garbage collection.</source>
          <target state="translated">&lt;code&gt;LUA_GCSTEP&lt;/code&gt; ：ガベージコレクションの増分ステップを実行します。</target>
        </trans-unit>
        <trans-unit id="450adac195733dc26043ca23487ff56033910e41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LUA_GCSTOP&lt;/code&gt;:  stops the garbage collector.</source>
          <target state="translated">&lt;code&gt;LUA_GCSTOP&lt;/code&gt; ：ガベージコレクターを停止します。</target>
        </trans-unit>
        <trans-unit id="03ae56412dd5cb45458646b97dd071be591e5e04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt;: a &lt;code&gt;size_t&lt;/code&gt; (native size)</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; ： &lt;code&gt;size_t&lt;/code&gt; （ネイティブサイズ）</target>
        </trans-unit>
        <trans-unit id="0a8a0f3d7f67d7fd79f7990d2b94e59b8a7b4375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X&lt;em&gt;op&lt;/em&gt;&lt;/code&gt;: an empty item that aligns according to option &lt;code&gt;op&lt;/code&gt; (which is otherwise ignored)</source>
          <target state="translated">&lt;code&gt;X&lt;em&gt;op&lt;/em&gt;&lt;/code&gt; ：オプション &lt;code&gt;op&lt;/code&gt; に従って整列する空のアイテム（それ以外の場合は無視されます）</target>
        </trans-unit>
        <trans-unit id="6bce72d0d5e32b91f85c07cd8060a5d09dda59ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[&lt;em&gt;set&lt;/em&gt;]&lt;/code&gt;:  represents the class which is the union of all characters in &lt;em&gt;set&lt;/em&gt;. A range of characters can be specified by separating the end characters of the range, in ascending order, with a '&lt;code&gt;-&lt;/code&gt;'. All classes &lt;code&gt;%&lt;/code&gt;&lt;em&gt;x&lt;/em&gt; described above can also be used as components in &lt;em&gt;set&lt;/em&gt;. All other characters in &lt;em&gt;set&lt;/em&gt; represent themselves. For example, &lt;code&gt;[%w_]&lt;/code&gt; (or &lt;code&gt;[_%w]&lt;/code&gt;) represents all alphanumeric characters plus the underscore, &lt;code&gt;[0-7]&lt;/code&gt; represents the octal digits, and &lt;code&gt;[0-7%l%-]&lt;/code&gt; represents the octal digits plus the lowercase letters plus the '&lt;code&gt;-&lt;/code&gt;' character.</source>
          <target state="translated">&lt;code&gt;[&lt;em&gt;set&lt;/em&gt;]&lt;/code&gt; ：のすべての文字の和集合であるクラスを表し&lt;em&gt;セット&lt;/em&gt;。文字の範囲は、範囲の終了文字を昇順で「 &lt;code&gt;-&lt;/code&gt; 」で区切ることによって指定できます。上記のすべてのクラス &lt;code&gt;%&lt;/code&gt; &lt;em&gt;x&lt;/em&gt;は、&lt;em&gt;setの&lt;/em&gt;コンポーネントとしても使用できます。&lt;em&gt;セット&lt;/em&gt;内の他のすべての文字は自分自身を表します。たとえば、 &lt;code&gt;[%w_]&lt;/code&gt; &lt;code&gt;[_%w]&lt;/code&gt; ]（または[_％w]）はすべての英数字とアンダースコアを表し、 &lt;code&gt;[0-7]&lt;/code&gt; は8進数を表し、 &lt;code&gt;[0-7%l%-]&lt;/code&gt; は8進数と小文字を表します文字と ' &lt;code&gt;-&lt;/code&gt; '文字。</target>
        </trans-unit>
        <trans-unit id="2bfa8d127c2e8935e2fff05f79f71c951f40cbb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[^&lt;em&gt;set&lt;/em&gt;]&lt;/code&gt;:  represents the complement of &lt;em&gt;set&lt;/em&gt;, where &lt;em&gt;set&lt;/em&gt; is interpreted as above.</source>
          <target state="translated">&lt;code&gt;[^&lt;em&gt;set&lt;/em&gt;]&lt;/code&gt; ：の補数を表し&lt;em&gt;セット&lt;/em&gt;、&lt;em&gt;セットは、&lt;/em&gt;上記のように解釈されます。</target>
        </trans-unit>
        <trans-unit id="f38e7d51801e02a7747b20500a8b2e632836efe3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt;: exponentiation</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; ：べき乗</target>
        </trans-unit>
        <trans-unit id="f5b98943f5025fa1cf7612c16dfff443caedc2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__add&lt;/code&gt;:  the addition (&lt;code&gt;+&lt;/code&gt;) operation. If any operand for an addition is not a number (nor a string coercible to a number), Lua will try to call a metamethod. First, Lua will check the first operand (even if it is valid). If that operand does not define a metamethod for &lt;code&gt;__add&lt;/code&gt;, then Lua will check the second operand. If Lua can find a metamethod, it calls the metamethod with the two operands as arguments, and the result of the call (adjusted to one value) is the result of the operation. Otherwise, it raises an error.</source>
          <target state="translated">&lt;code&gt;__add&lt;/code&gt; ：加算（ &lt;code&gt;+&lt;/code&gt; ）演算。加算のオペランドが数値（または数値に強制変換可能な文字列）でない場合、Luaはメタメソッドを呼び出そうとします。まず、Luaは最初のオペランドをチェックします（有効であっても）。そのオペランドが &lt;code&gt;__add&lt;/code&gt; のメタメソッドを定義していない場合、Luaは2番目のオペランドをチェックします。Luaがメタメソッドを見つけることができる場合、2つのオペランドを引数としてメタメソッドを呼び出し、呼び出しの結果（1つの値に調整された）は演算の結果です。それ以外の場合は、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bda95a3552fcf7eb5fbbb735dac806d610f70311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__band&lt;/code&gt;:  the bitwise AND (&lt;code&gt;&amp;amp;&lt;/code&gt;) operation. Behavior similar to the addition operation, except that Lua will try a metamethod if any operand is neither an integer nor a value coercible to an integer (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;__band&lt;/code&gt; ：ビットごとのAND（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）演算。加算演算と同様の挙動は、いずれかのオペランドが整数や整数の値の強制可能（参照でもない場合はLuaがメタメソッドをしようとすることを除いて&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c8271d8f21a0a60ed616ec9f38e97d661ff31836" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__bnot&lt;/code&gt;:  the bitwise NOT (unary &lt;code&gt;~&lt;/code&gt;) operation. Behavior similar to the bitwise AND operation.</source>
          <target state="translated">&lt;code&gt;__bnot&lt;/code&gt; ：ビットごとのNOT（単項 &lt;code&gt;~&lt;/code&gt; ）演算。ビットごとのAND演算に似た動作。</target>
        </trans-unit>
        <trans-unit id="9e9026d2ac8c089b351feccecbb25019aa6cc74f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__bor&lt;/code&gt;:  the bitwise OR (&lt;code&gt;|&lt;/code&gt;) operation. Behavior similar to the bitwise AND operation.</source>
          <target state="translated">&lt;code&gt;__bor&lt;/code&gt; ：ビットごとのOR（ &lt;code&gt;|&lt;/code&gt; ）演算。ビットごとのAND演算に似た動作。</target>
        </trans-unit>
        <trans-unit id="3984b6f7c6542cb91c472a68f850228f86078c2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__bxor&lt;/code&gt;:  the bitwise exclusive OR (binary &lt;code&gt;~&lt;/code&gt;) operation. Behavior similar to the bitwise AND operation.</source>
          <target state="translated">&lt;code&gt;__bxor&lt;/code&gt; ：ビットごとの排他的OR（バイナリ &lt;code&gt;~&lt;/code&gt; ）演算。ビットごとのAND演算に似た動作。</target>
        </trans-unit>
        <trans-unit id="47f84fd28e5003b12c1cddb7e1213ad73677ce7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__call&lt;/code&gt;:  The call operation &lt;code&gt;func(args)&lt;/code&gt;. This event happens when Lua tries to call a non-function value (that is, &lt;code&gt;func&lt;/code&gt; is not a function). The metamethod is looked up in &lt;code&gt;func&lt;/code&gt;. If present, the metamethod is called with &lt;code&gt;func&lt;/code&gt; as its first argument, followed by the arguments of the original call (&lt;code&gt;args&lt;/code&gt;). All results of the call are the result of the operation. (This is the only metamethod that allows multiple results.)</source>
          <target state="translated">&lt;code&gt;__call&lt;/code&gt; ：呼び出し操作 &lt;code&gt;func(args)&lt;/code&gt; 。このイベントは、Luaが関数以外の値を呼び出そうとしたときに発生します（つまり、 &lt;code&gt;func&lt;/code&gt; は関数ではありません）。メタメソッドは &lt;code&gt;func&lt;/code&gt; で検索されます。存在する場合、メタメソッドは最初の引数として &lt;code&gt;func&lt;/code&gt; を使用して呼び出され、その後に元の呼び出しの引数（ &lt;code&gt;args&lt;/code&gt; ）が続きます。呼び出しのすべての結果は、操作の結果です。（これは、複数の結果を許可する唯一のメタメソッドです。）</target>
        </trans-unit>
        <trans-unit id="790454d48e53027f216e2bf64f3530d0774dee89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__concat&lt;/code&gt;:  the concatenation (&lt;code&gt;..&lt;/code&gt;) operation. Behavior similar to the addition operation, except that Lua will try a metamethod if any operand is neither a string nor a number (which is always coercible to a string).</source>
          <target state="translated">&lt;code&gt;__concat&lt;/code&gt; ：連結（ &lt;code&gt;..&lt;/code&gt; ）操作。加算演算と同様の動作ですが、Luaは、オペランドが文字列でも数値でもない場合にメタメソッドを試行します（常に文字列に強制変換できます）。</target>
        </trans-unit>
        <trans-unit id="ad91de859a0158bed21ee979ae23cedc031843c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__div&lt;/code&gt;:  the division (&lt;code&gt;/&lt;/code&gt;) operation. Behavior similar to the addition operation.</source>
          <target state="translated">&lt;code&gt;__div&lt;/code&gt; ：除算（ &lt;code&gt;/&lt;/code&gt; ）操作。加算操作と同様の動作。</target>
        </trans-unit>
        <trans-unit id="7344afb47ab39dbb1dcc686092dbb2c33112ca27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__eq&lt;/code&gt;:  the equal (&lt;code&gt;==&lt;/code&gt;) operation. Behavior similar to the addition operation, except that Lua will try a metamethod only when the values being compared are either both tables or both full userdata and they are not primitively equal. The result of the call is always converted to a boolean.</source>
          <target state="translated">&lt;code&gt;__eq&lt;/code&gt; ：等しい（ &lt;code&gt;==&lt;/code&gt; ）演算。Luaが比較される値が両方のテーブルまたは両方の完全なユーザーデータのいずれかであり、それらが基本的に等しくない場合にのみLuaがメタメソッドを試行することを除いて、追加操作と同様の動作。呼び出しの結果は常にブール値に変換されます。</target>
        </trans-unit>
        <trans-unit id="e98db71bbf36f23352f716c30f1f7a8ecfbe62c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__idiv&lt;/code&gt;:  the floor division (&lt;code&gt;//&lt;/code&gt;) operation. Behavior similar to the addition operation.</source>
          <target state="translated">&lt;code&gt;__idiv&lt;/code&gt; ：フロア除算（ &lt;code&gt;//&lt;/code&gt; ）操作。加算操作と同様の動作。</target>
        </trans-unit>
        <trans-unit id="decd7b7eb1b7416a469f2fca59f8e4ddd7f2a85d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__index&lt;/code&gt;:  The indexing access &lt;code&gt;table[key]&lt;/code&gt;. This event happens when &lt;code&gt;table&lt;/code&gt; is not a table or when &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;table&lt;/code&gt;. The metamethod is looked up in &lt;code&gt;table&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__index&lt;/code&gt; ：インデックスアクセス &lt;code&gt;table[key]&lt;/code&gt; 。このイベントは、 &lt;code&gt;table&lt;/code&gt; がテーブルではない場合、または &lt;code&gt;key&lt;/code&gt; が &lt;code&gt;table&lt;/code&gt; 存在しない場合に発生します。メタメソッドは &lt;code&gt;table&lt;/code&gt; 検索されます。</target>
        </trans-unit>
        <trans-unit id="f475d84a338693db6fd2862596f21c01f8175167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__le&lt;/code&gt;:  the less equal (&lt;code&gt;&amp;lt;=&lt;/code&gt;) operation. Unlike other operations, the less-equal operation can use two different events. First, Lua looks for the &lt;code&gt;__le&lt;/code&gt; metamethod in both operands, like in the less than operation. If it cannot find such a metamethod, then it will try the &lt;code&gt;__lt&lt;/code&gt; metamethod, assuming that &lt;code&gt;a &amp;lt;= b&lt;/code&gt; is equivalent to &lt;code&gt;not (b &amp;lt; a)&lt;/code&gt;. As with the other comparison operators, the result is always a boolean. (This use of the &lt;code&gt;__lt&lt;/code&gt; event can be removed in future versions; it is also slower than a real &lt;code&gt;__le&lt;/code&gt; metamethod.)</source>
          <target state="translated">&lt;code&gt;__le&lt;/code&gt; ：より小さい（ &lt;code&gt;&amp;lt;=&lt;/code&gt; ）演算。他の操作とは異なり、等しくない操作では2つの異なるイベントを使用できます。最初に、Luaは、 &lt;code&gt;__le&lt;/code&gt; なり演算と同様に、両方のオペランドで__leメタメソッドを探します。そのような &lt;code&gt;__lt&lt;/code&gt; が見つからない場合は &lt;code&gt;a &amp;lt;= b&lt;/code&gt; が &lt;code&gt;not (b &amp;lt; a)&lt;/code&gt; と同等であると想定して、__ltメタメソッドを試行します。他の比較演算子と同様に、結果は常にブール値です。 （この &lt;code&gt;__lt&lt;/code&gt; イベントの使用は、将来のバージョンで削除される可能性があります。また、実際の &lt;code&gt;__le&lt;/code&gt; メタメソッドよりも低速です。）</target>
        </trans-unit>
        <trans-unit id="c61fb722a1eddfcc88f7846f65e68ff08a2c65a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__len&lt;/code&gt;:  the length (&lt;code&gt;#&lt;/code&gt;) operation. If the object is not a string, Lua will try its metamethod. If there is a metamethod, Lua calls it with the object as argument, and the result of the call (always adjusted to one value) is the result of the operation. If there is no metamethod but the object is a table, then Lua uses the table length operation (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;). Otherwise, Lua raises an error.</source>
          <target state="translated">&lt;code&gt;__len&lt;/code&gt; ：長さ（ &lt;code&gt;#&lt;/code&gt; ）操作。オブジェクトが文字列でない場合、Luaはメタメソッドを試します。メタメソッドがある場合、Luaはオブジェクトを引数としてそれを呼び出し、呼び出しの結果（常に1つの値に調整されます）は操作の結果です。&lt;a href=&quot;#3.4.7&quot;&gt;メタメソッド&lt;/a&gt;はないがオブジェクトがテーブルの場合、Luaはテーブル長の演算を使用します（&amp;sect;3.4.7を参照）。そうでない場合、Luaはエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="6902b36544db7b8d689de0371d69c1173727d394" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__lt&lt;/code&gt;:  the less than (&lt;code&gt;&amp;lt;&lt;/code&gt;) operation. Behavior similar to the addition operation, except that Lua will try a metamethod only when the values being compared are neither both numbers nor both strings. The result of the call is always converted to a boolean.</source>
          <target state="translated">&lt;code&gt;__lt&lt;/code&gt; ：より小さい（ &lt;code&gt;&amp;lt;&lt;/code&gt; ）操作。Luaが比較される値が両方とも数値でも文字列でもない場合にのみメタメソッドを試行することを除いて、加算演算と同様の動作。呼び出しの結果は常にブール値に変換されます。</target>
        </trans-unit>
        <trans-unit id="a925135fe1afbe74d4fe523a8c1e22003b5c4f3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__mod&lt;/code&gt;:  the modulo (&lt;code&gt;%&lt;/code&gt;) operation. Behavior similar to the addition operation.</source>
          <target state="translated">&lt;code&gt;__mod&lt;/code&gt; ：モジュロ（ &lt;code&gt;%&lt;/code&gt; ）演算。加算操作と同様の動作。</target>
        </trans-unit>
        <trans-unit id="1ff94de42579b732d623fc7c57cf9f6691cc124d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__mul&lt;/code&gt;:  the multiplication (&lt;code&gt;*&lt;/code&gt;) operation. Behavior similar to the addition operation.</source>
          <target state="translated">&lt;code&gt;__mul&lt;/code&gt; ：乗算（ &lt;code&gt;*&lt;/code&gt; ）演算。加算操作と同様の動作。</target>
        </trans-unit>
        <trans-unit id="bae10caba1f39db8a0508384a96106120784c41c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__newindex&lt;/code&gt;:  The indexing assignment &lt;code&gt;table[key] = value&lt;/code&gt;. Like the index event, this event happens when &lt;code&gt;table&lt;/code&gt; is not a table or when &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;table&lt;/code&gt;. The metamethod is looked up in &lt;code&gt;table&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__newindex&lt;/code&gt; ：インデックス割り当て &lt;code&gt;table[key] = value&lt;/code&gt; 。インデックスイベントと同様に、このイベントは、 &lt;code&gt;table&lt;/code&gt; がテーブルでない場合、または &lt;code&gt;key&lt;/code&gt; が &lt;code&gt;table&lt;/code&gt; に存在しない場合に発生します。メタメソッドは &lt;code&gt;table&lt;/code&gt; 検索されます。</target>
        </trans-unit>
        <trans-unit id="7488b0be1bc57b10dfdfc405a5e990f26a432a65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__pow&lt;/code&gt;:  the exponentiation (&lt;code&gt;^&lt;/code&gt;) operation. Behavior similar to the addition operation.</source>
          <target state="translated">&lt;code&gt;__pow&lt;/code&gt; ：指数（ &lt;code&gt;^&lt;/code&gt; ）演算。加算操作と同様の動作。</target>
        </trans-unit>
        <trans-unit id="fc7215a1c4f0ddfcac8bc0abef79b38818065a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__shl&lt;/code&gt;:  the bitwise left shift (&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;) operation. Behavior similar to the bitwise AND operation.</source>
          <target state="translated">&lt;code&gt;__shl&lt;/code&gt; ：ビット単位の左シフト（ &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; ）演算。ビットごとのAND演算に似た動作。</target>
        </trans-unit>
        <trans-unit id="8da8f661ba59d8ea368c0a166410be846f25ed51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__shr&lt;/code&gt;:  the bitwise right shift (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;) operation. Behavior similar to the bitwise AND operation.</source>
          <target state="translated">&lt;code&gt;__shr&lt;/code&gt; ：ビット単位の右シフト（ &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ）演算。ビットごとのAND演算に似た動作。</target>
        </trans-unit>
        <trans-unit id="0839e6023e2c19b90e41d7d692715ae3bb15dd52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__sub&lt;/code&gt;:  the subtraction (&lt;code&gt;-&lt;/code&gt;) operation. Behavior similar to the addition operation.</source>
          <target state="translated">&lt;code&gt;__sub&lt;/code&gt; ：減算（ &lt;code&gt;-&lt;/code&gt; ）演算。加算操作と同様の動作。</target>
        </trans-unit>
        <trans-unit id="a0a7b7005a2b1ce8342934d9e28b702f6591bbad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__unm&lt;/code&gt;:  the negation (unary &lt;code&gt;-&lt;/code&gt;) operation. Behavior similar to the addition operation.</source>
          <target state="translated">&lt;code&gt;__unm&lt;/code&gt; ：否定（単項 &lt;code&gt;-&lt;/code&gt; ）演算。加算操作と同様の動作。</target>
        </trans-unit>
        <trans-unit id="2034132fb0cda57893ded314ea78d570a3b8a1a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b&lt;/code&gt;: a signed byte (&lt;code&gt;char&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; ：符号付きバイト（ &lt;code&gt;char&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="1f9d27a224e5a678dfac01895e2774339ad358a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c&lt;em&gt;n&lt;/em&gt;&lt;/code&gt;: a fixed-sized string with &lt;code&gt;n&lt;/code&gt; bytes</source>
          <target state="translated">&lt;code&gt;c&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; ： &lt;code&gt;n&lt;/code&gt; バイトの固定サイズの文字列</target>
        </trans-unit>
        <trans-unit id="007ab16ec0f7187cc23f5c4f0e1b0b9ee75de945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunkname&lt;/code&gt; is used as the name of the chunk for error messages and debug information (see &lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;). When absent, it defaults to &lt;code&gt;chunk&lt;/code&gt;, if &lt;code&gt;chunk&lt;/code&gt; is a string, or to &quot;&lt;code&gt;=(load)&lt;/code&gt;&quot; otherwise.</source>
          <target state="translated">&lt;code&gt;chunkname&lt;/code&gt; は、エラーメッセージとデバッグ情報のチャンクの名前として使用されます（&lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9を&lt;/a&gt;参照）。指定しない場合、 &lt;code&gt;chunk&lt;/code&gt; が文字列の場合はデフォルトで &lt;code&gt;chunk&lt;/code&gt; になり、それ以外の場合は「 &lt;code&gt;=(load)&lt;/code&gt; 」になります。</target>
        </trans-unit>
        <trans-unit id="d532eddb006ab7874f0dc6fb8cbdceb76c478728" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;currentline&lt;/code&gt;:  the current line where the given function is executing. When no line information is available, &lt;code&gt;currentline&lt;/code&gt; is set to -1.</source>
          <target state="translated">&lt;code&gt;currentline&lt;/code&gt; ：指定された関数が実行されている現在の行。行情報が利用できない場合、 &lt;code&gt;currentline&lt;/code&gt; は-1に設定されます。</target>
        </trans-unit>
        <trans-unit id="166b1d8e53dd83b1f49810b36d2120d5fb8cf928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;d&lt;/code&gt;: a &lt;code&gt;double&lt;/code&gt; (native size)</source>
          <target state="translated">&lt;code&gt;d&lt;/code&gt; ： &lt;code&gt;double&lt;/code&gt; （ネイティブサイズ）</target>
        </trans-unit>
        <trans-unit id="0e1028744aa421b0605c6b88904012494c91f125" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt;: a &lt;code&gt;float&lt;/code&gt; (native size)</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; ： &lt;code&gt;float&lt;/code&gt; （ネイティブサイズ）</target>
        </trans-unit>
        <trans-unit id="c592f8c4c1d4f47249d70ff1f5e192a26d8afe2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h&lt;/code&gt;: a signed &lt;code&gt;short&lt;/code&gt; (native size)</source>
          <target state="translated">&lt;code&gt;h&lt;/code&gt; ：符号付き &lt;code&gt;short&lt;/code&gt; （ネイティブサイズ）</target>
        </trans-unit>
        <trans-unit id="f5282762e143fb0df1d1386e42490a8eef06c695" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;: a signed &lt;code&gt;int&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt; bytes (default is native size)</source>
          <target state="translated">&lt;code&gt;i[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt; ：署名された &lt;code&gt;int&lt;/code&gt; を有する &lt;code&gt;n&lt;/code&gt; バイト（デフォルトは天然のサイズです）</target>
        </trans-unit>
        <trans-unit id="77b05e59859fe1e74f32e61593a0eca919f3206e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;istailcall&lt;/code&gt;:  true if this function invocation was called by a tail call. In this case, the caller of this level is not in the stack.</source>
          <target state="translated">&lt;code&gt;istailcall&lt;/code&gt; ：この関数呼び出しが末尾呼び出しによって呼び出された場合はtrue。この場合、このレベルの呼び出し元はスタックにありません。</target>
        </trans-unit>
        <trans-unit id="d69e22a542b48170e894be5d97f55fd47a232538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isvararg&lt;/code&gt;:  true if the function is a vararg function (always true for C functions).</source>
          <target state="translated">&lt;code&gt;isvararg&lt;/code&gt; ：関数が可変引数関数の場合はtrue（C関数の場合は常にtrue）。</target>
        </trans-unit>
        <trans-unit id="580dc9d1e4e90c03d788258153e5988096093196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;j&lt;/code&gt;: a &lt;code&gt;lua_Integer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;j&lt;/code&gt; ： &lt;code&gt;lua_Integer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e758d0de7cc3d0f062a6819b73437ee9ec2a2b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;l&lt;/code&gt;: a signed &lt;code&gt;long&lt;/code&gt; (native size)</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; ：符号付き &lt;code&gt;long&lt;/code&gt; （ネイティブサイズ）</target>
        </trans-unit>
        <trans-unit id="f04a40c17b42b18f44495a16f52bfd52196ef418" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lastlinedefined&lt;/code&gt;:  the line number where the definition of the function ends.</source>
          <target state="translated">&lt;code&gt;lastlinedefined&lt;/code&gt; ：関数の定義が終了する行番号。</target>
        </trans-unit>
        <trans-unit id="c558e7acb9233839c3055af52ec8d17bbbf36292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;linedefined&lt;/code&gt;:  the line number where the definition of the function starts.</source>
          <target state="translated">&lt;code&gt;linedefined&lt;/code&gt; ：関数の定義が始まる行番号。</target>
        </trans-unit>
        <trans-unit id="1814936b717a437d1f1941926869384106ce1392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_addchar&lt;/code&gt;[-?, +?, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_addchar&lt;/code&gt; [-？、+ ?、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="575546c5b83ac45ad492ca8e44de50943cdf9d36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_addlstring&lt;/code&gt;[-?, +?, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_addlstring&lt;/code&gt; [-？、+ ?、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="ab2404026db427b81b929835fcc07320d0975966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_addsize&lt;/code&gt;[-?, +?, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_addsize&lt;/code&gt; [-？、+？、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="6af536d80928bc10905ab3dce78e92ea76d54e77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_addstring&lt;/code&gt;[-?, +?, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_addstring&lt;/code&gt; [-？、+ ?、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="f62f4ab7ab22c41889b8409e3b36723d81cabada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_addvalue&lt;/code&gt;[-1, +?, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_addvalue&lt;/code&gt; [-1、+ ?, &lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="32a97bb778b383afdcf82dbf302e1156a6cc0b2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_argcheck&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_argcheck&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="d807e00e947d759f9dcb553ac98ec1f1193a93e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_argerror&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_argerror&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="4db817fce2c3b28619d23198a312e17e8c0b41fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_buffinit&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_buffinit&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="76b56ecab1b6154600ac285b1b29eb963a213f07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_buffinitsize&lt;/code&gt;[-?, +?, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_buffinitsize&lt;/code&gt; [-？、+ ?、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="15797d76578ab05f141375478dbdaccf46d64197" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_callmeta&lt;/code&gt;[-0, +(0|1), &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_callmeta&lt;/code&gt; [-0、+（0 | 1）、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="85267089380208d1670ba57aca773cbfd01c3852" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checkany&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checkany&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="60a4f7f116afbde74193d5e8eb007754d432edfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checkinteger&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checkinteger&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="caad9f257f912ca30f4e0c4103ba996c9420a91b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checklstring&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checklstring&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="fb3b4e49519cf5dbd32c138191f993b8dc2a1534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checknumber&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checknumber&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="38dfb40ea1a004fd0d2b69fead480d9a49d8202a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checkoption&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checkoption&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="322257f7e30d47626338ffdee9062b057e90cd8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checkstack&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checkstack&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="817bb0029ff7aff6991eab710b919497a5dbc912" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checkstring&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checkstring&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="341111dc53b49f417dcd96b3fc29b039a26ba056" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checktype&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checktype&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="12123157de5a720309f6a7c63a2cfa0c299903b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checkudata&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checkudata&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="dffa7856bb9be8c95d07d1f17dadf607bf429ad1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_checkversion&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_checkversion&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="3374658d775d8aa7fb8fe52da4e6fc7cfd927d02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_dofile&lt;/code&gt;[-0, +?, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_dofile&lt;/code&gt; [-0、+ ?、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="a582cca705f2cb3830ac7257f0eb21203b6e929b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_dostring&lt;/code&gt;[-0, +?, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_dostring&lt;/code&gt; [-0、+？、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="a5a15bfcee6d520f8c55a01f53ed494d8d316be5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_error&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_error&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="6faffe57f68b2e507d46bda2d67142fcf1bd3eda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_execresult&lt;/code&gt;[-0, +3, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_execresult&lt;/code&gt; [-0、+ 3、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="689d9709c543e39ba4b14f659761c6fbee59fb20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_fileresult&lt;/code&gt;[-0, +(1|3), &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_fileresult&lt;/code&gt; [-0、+（1 | 3）、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="26ad671f853e795fc32c1842c210c309e5737a70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_getmetafield&lt;/code&gt;[-0, +(0|1), &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_getmetafield&lt;/code&gt; [-0、+（0 | 1）、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="86627657b2139b0ee31a53c83ad51ed9c63ee4f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_getmetatable&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_getmetatable&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="f0429bf39eeee8b432bf2c4ac915eb9bd9c58fe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_getsubtable&lt;/code&gt;[-0, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_getsubtable&lt;/code&gt; [-0、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="dcbde4eb043fd7a6a88005560668c86e718f4d64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_gsub&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_gsub&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="6aa13480ee4b2afee4725e8c33c17ccef37dacb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_len&lt;/code&gt;[-0, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_len&lt;/code&gt; [-0、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="1ff1186e40e0c45fe6b82e0cd030ddaab25d3514" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_loadbuffer&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_loadbuffer&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="5c9c6205f5ab035f8481cc23adec6d68a927c21e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_loadbufferx&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_loadbufferx&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="3efa8a062aa5c6fd99fa30d9a6b615805d5f6633" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_loadfile&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_loadfile&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="bed752688a8097a24d7fe06f2d44fb3b8104d51d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_loadfilex&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_loadfilex&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="a1117ad9189ec1e73f1b81cc6ca7a6ca13b4d08a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_loadstring&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_loadstring&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="7006cdeb7d6e0f06f8bd85a3e8e67991899f625c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_newlib&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_newlib&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="4bb6d574631ce0eb10e53ee60cc236afb57494d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_newlibtable&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_newlibtable&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="1597a9788daec91a227c519bb2f818e05f9f4c08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_newmetatable&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_newmetatable&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="ce4b485fbcd4cc791900d08f23c6cdfdec7f1520" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_newstate&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_newstate&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="49f8165e8132fcb469103de8892f176c1f0def64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_openlibs&lt;/code&gt;[-0, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_openlibs&lt;/code&gt; [-0、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="83750c461dfda8dcc3cadb263ef7f900676721c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_opt&lt;/code&gt;[-0, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_opt&lt;/code&gt; [-0、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="7ddba39b66f773750f9ae187c2d2d76d0f89ac96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_optinteger&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_optinteger&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="2fcf8ecf5a60e1bef873c06be25a18130a4d742f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_optlstring&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_optlstring&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="9f89308fc4e4595c99a38d039175c1137359ac54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_optnumber&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_optnumber&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="274c9ca5ceedb91c17aae3f6a7353a8fe5343712" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_optstring&lt;/code&gt;[-0, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_optstring&lt;/code&gt; [-0、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="7a41c18601fede06cd92afc10561621476415195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_prepbuffer&lt;/code&gt;[-?, +?, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_prepbuffer&lt;/code&gt; [-？、+ ?、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="6dd4e822d50779a6e2f55486d474e3cf4dc9a3a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_prepbuffsize&lt;/code&gt;[-?, +?, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_prepbuffsize&lt;/code&gt; [-？、+ ?、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="f4c1792dcbf5df89608d53cfa3c381e725d7c8dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_pushresult&lt;/code&gt;[-?, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_pushresult&lt;/code&gt; [-？、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="56aef86b4910793d510e049e250c4ba15d08651b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_pushresultsize&lt;/code&gt;[-?, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_pushresultsize&lt;/code&gt; [-?, +1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="cf9ba081e7beac774ea13e9e5e96e368f77f91b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_ref&lt;/code&gt;[-1, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_ref&lt;/code&gt; [-1、+ 0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="964377d76c6003fa09c52e382c6f30d89d8e7733" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_requiref&lt;/code&gt;[-0, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_requiref&lt;/code&gt; [-0、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="0fa64c78fb075f6bccbf9d15ca226451decea5ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_setfuncs&lt;/code&gt;[-nup, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_setfuncs&lt;/code&gt; [-nup、+0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="2e5d3d14dd1ede554838763a71c2eb2b30f00e10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_setmetatable&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_setmetatable&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="b4785fa0b78405754bdd9e6816e0505e89bb2ed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_testudata&lt;/code&gt;[-0, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_testudata&lt;/code&gt; [-0、+ 0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="87fa79dd9413aed4e20cd6a034ba315882e2e0de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_tolstring&lt;/code&gt;[-0, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_tolstring&lt;/code&gt; [-0、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="306b764f016817d71c097f8443a6177598555795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_traceback&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_traceback&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="ca032fc0be8f16a7dbcab71e66bfe7be88723983" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_typename&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_typename&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="f49e88ae95e2c08d4f66fb932d9bcde472eca71a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_unref&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;luaL_unref&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="e61c1eb9f0ad1ce243ab6024b692ea269b6a3ddc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;luaL_where&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;luaL_where&lt;/code&gt; [-0、+1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="990854d58117af3aa9e8e4765776b83ce30f5cb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_absindex&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_absindex&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="b1819f228761942b7921d51557a46ebabdfda1ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_arith&lt;/code&gt;[-(2|1), +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_arith&lt;/code&gt; [-（2 | 1）、+1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="f24f91865ac7127a8413e2ae152416f6c2ed006b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_atpanic&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_atpanic&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="e7479fe5b0585be43d2a995bebe0c8255ad26bbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_call&lt;/code&gt;[-(nargs+1), +nresults, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_call&lt;/code&gt; [-（nargs + 1）、+ nresults、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="c65d2f6c1099ba05a81459947c26df8cf58a8ea8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_callk&lt;/code&gt;[-(nargs + 1), +nresults, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_callk&lt;/code&gt; [-（nargs + 1）、+ nresults、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="acf13cf1bfb7ad750c4fa45422c658708c5d250e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_checkstack&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_checkstack&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="ce69674693f57931d2d994412ec490a58883fe0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_close&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_close&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="9f95f6e80bc09c2b612082485467d037fdabd286" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_compare&lt;/code&gt;[-0, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_compare&lt;/code&gt; [-0、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="a04bab7507101355ee6351af1abfc06a7108a08a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_concat&lt;/code&gt;[-n, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_concat&lt;/code&gt; [-n、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="814bbfd9c45c7f18a87781bf3ee57bb270d7c603" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_copy&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_copy&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="79ee61bf6bf5fa92650008381392b1a21cbabf69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_createtable&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_createtable&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="e7551097f181c02c15fea59139836b798d27fd76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_dump&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_dump&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="d1d8b7fcdc2438a4309209f0e66816aa345e3ea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_error&lt;/code&gt;[-1, +0, &lt;em&gt;v&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_error&lt;/code&gt; [-1、+ 0、&lt;em&gt;v&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="a66371d02bb2a5294ddc7ff965f4078200f059e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_gc&lt;/code&gt;[-0, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_gc&lt;/code&gt; [-0、+ 0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="9956d0bc82cc5409c737543da96a541d83bfbf7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getallocf&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_getallocf&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="59632bab17bc189c3148482bc4080f9bd4b84547" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getextraspace&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_getextraspace&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="60f37f158845e124eace06ea63e2280a95012974" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getfield&lt;/code&gt;[-0, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_getfield&lt;/code&gt; [-0、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="c94c6fd2b7c14b3e3b6ad04d5fe36bf6add888c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getglobal&lt;/code&gt;[-0, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_getglobal&lt;/code&gt; [-0、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="ff4cee0e3a4e1d63522125ff34c46aca37313caf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_gethook&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_gethook&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="ec0eadfb615abc82aff0c7990a50162481f09f63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_gethookcount&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_gethookcount&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="d7f8a674ccfd65eff1082ce412eb29972a57b18c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_gethookmask&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_gethookmask&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="f71c31c54898e128df0441cf376c9e767064382d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_geti&lt;/code&gt;[-0, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_geti&lt;/code&gt; [-0、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="ea4a9e14acd3cb3bbf7462b6fb68c3ad28de14f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getinfo&lt;/code&gt;[-(0|1), +(0|1|2), &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_getinfo&lt;/code&gt; [-（0 | 1）、+（0 | 1 | 2）、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="273e8c6ec216c7c83ca38a878d93b95631b13f24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getlocal&lt;/code&gt;[-0, +(0|1), &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_getlocal&lt;/code&gt; [-0、+（0 | 1）、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="e2eca7f4a92d49d560aa8d947a3a1e0961d07be4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getmetatable&lt;/code&gt;[-0, +(0|1), &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_getmetatable&lt;/code&gt; [-0、+（0 | 1）、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="7e3ce20be5f0c5d99b7e25b37999cb8bb5fd91e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getstack&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_getstack&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="e01aa99ca62e5ceb24fa39ed4a6f4d31e572fa50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_gettable&lt;/code&gt;[-1, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_gettable&lt;/code&gt; [-1、+1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="8e15475f1fb39e9839166b70e212b31d2521646e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_gettop&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_gettop&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="75cc1327823f758a6a97b78b712f93d5c639d881" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getupvalue&lt;/code&gt;[-0, +(0|1), &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_getupvalue&lt;/code&gt; [-0、+（0 | 1）、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="06a9850be6a3681bd25c5c7e797cd88c22cc51e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_getuservalue&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_getuservalue&lt;/code&gt; [-0、+1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="97ccd9464bf8253b4595901de1c28a281d630bca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_insert&lt;/code&gt;[-1, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_insert&lt;/code&gt; [-1、+1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="ccf0205da2145136a72004529c69ef0d97389a74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isboolean&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isboolean&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="d8f9274340043a6fe5b4a6502b209dfbcbc8102f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_iscfunction&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_iscfunction&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="344ac0a298f2d260c0cf30e7563213a6456c1391" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isfunction&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isfunction&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="95a6448d21c638bda4c1f328498fa19c59e41122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isinteger&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isinteger&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="906431d15e81d16a20736c110a889aa904f850f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_islightuserdata&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_islightuserdata&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="c331f628d45e17d9badc04decdc73b3dfba9aa43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isnil&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isnil&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="b6f54dbbadf1568e10c49c9c8d51351826575cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isnone&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isnone&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="6141fdc1edd3191ed965eb184782c4bcc77ab662" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isnoneornil&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isnoneornil&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="244c0aa7d5c38d7aff3d8a120df5d0ff4dedd191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isnumber&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isnumber&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="9c5842c76ba56cc7b434b470a13d5db9a2ae746b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isstring&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isstring&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="9e4d02a146e4faff57845d1d808d69e94d4d5760" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_istable&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_istable&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="fca695e4d6ae492d953e231c04e6456779c318ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isthread&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isthread&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="9054b192261af4e3df167d43972cc92d8f12c922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isuserdata&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isuserdata&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="6558ec7a9edae7a2472cab5d36feb4a25937b33a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_isyieldable&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_isyieldable&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="84ed319e4f41b15e379b0c80b8d751fb0a3350ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_len&lt;/code&gt;[-0, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_len&lt;/code&gt; [-0、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="7a22e4332e1d809d6600680001552784b09874aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_load&lt;/code&gt; automatically detects whether the chunk is text or binary and loads it accordingly (see program &lt;code&gt;luac&lt;/code&gt;). The string &lt;code&gt;mode&lt;/code&gt; works as in function &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;, with the addition that a &lt;code&gt;NULL&lt;/code&gt; value is equivalent to the string &quot;&lt;code&gt;bt&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;lua_load&lt;/code&gt; は、チャンクがテキストかバイナリかを自動的に検出し、それに応じてロードします（プログラム &lt;code&gt;luac&lt;/code&gt; を参照）。文字列 &lt;code&gt;mode&lt;/code&gt; は関数&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;と同様に機能し、 &lt;code&gt;NULL&lt;/code&gt; 値は文字列「 &lt;code&gt;bt&lt;/code&gt; 」と同等です。</target>
        </trans-unit>
        <trans-unit id="ccb7a1a988cb848b3d6f32fc68386067014fdd3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_load&lt;/code&gt; uses the stack internally, so the reader function must always leave the stack unmodified when returning.</source>
          <target state="translated">&lt;code&gt;lua_load&lt;/code&gt; は内部的にスタックを使用するため、リーダー関数は戻るときに常にスタックを変更しないでおく必要があります。</target>
        </trans-unit>
        <trans-unit id="c9ad4cdb5afe054e2d52630b341bddcd5318dcbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_load&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_load&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="7374aef019136058240eb91bf9d7d1be64edc6b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_newstate&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_newstate&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="1a38a1e48176080fdd830cbfa8d2959e31ce81e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_newtable&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_newtable&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="0a032a953b6701cd3d3ac0a4241cf5e3af19ca63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_newthread&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_newthread&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="aa090c22b67b6e811e3f6576dbb546c21227c3b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_newuserdata&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_newuserdata&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="a2e6cbd4372d1f48086bd4ed0d56df437b0da92b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_next&lt;/code&gt;[-1, +(2|0), &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_next&lt;/code&gt; [-1、+（2 | 0）、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="e26fc6d5a88b15e99cc4567b71c159df4ba7279c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pcall&lt;/code&gt;[-(nargs + 1), +(nresults|1), &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pcall&lt;/code&gt; [-（nargs + 1）、+（nresults | 1）、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="850c75458d454fa1e854b2a9dc95240fca9f635c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pcallk&lt;/code&gt;[-(nargs + 1), +(nresults|1), &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pcallk&lt;/code&gt; [-（nargs + 1）、+（nresults | 1）、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="88661d7b63266eddc349ccd0237a4a2fc79f215f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pop&lt;/code&gt;[-n, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pop&lt;/code&gt; [-n、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="666e2142d3e457306d33378f3369679386a5b561" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushboolean&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushboolean&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="65a5e45fe5816a098fad98e557109633e97a1de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushcclosure&lt;/code&gt;[-n, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_pushcclosure&lt;/code&gt; [-n、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="73447e0e4c9e92da86686da3e2f378b5e95bb556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushcfunction&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushcfunction&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="6d9930915fc5c9a7d6f3b1983934256b1782cdce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushfstring&lt;/code&gt;[-0, +1, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_pushfstring&lt;/code&gt; [-0、+ 1、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="6ca7a523e75628341dcb660957104bd730722b5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushglobaltable&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushglobaltable&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="a664d85fd673d8e5f2c1f86f70023732e187465e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushinteger&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushinteger&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="a766edeb81578b9f6c5186a1ef1e02ddf5cb9453" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushlightuserdata&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushlightuserdata&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="78d98a728cf4ae7cccb9296c51e6350cb444a216" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushliteral&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_pushliteral&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="52c39aa3679bdd694c82d8b6920a76e7887f4f65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushlstring&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_pushlstring&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="f18e9b33f026fcc7f0bb37b6518778960e0be147" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushnil&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushnil&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="5b61a28ad71dd0c16bf5685880526849b74d1b22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushnumber&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushnumber&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="48093510761a8d9599932440e922c82a70bff0b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushstring&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_pushstring&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="8941a8b85742686999473929b77ca66b0c29786c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushthread&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushthread&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="a01e6c270aa1f8c90cd63c088fc55f395501c232" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushvalue&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_pushvalue&lt;/code&gt; [-0、+1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="c4891a46279c1165ab6f6829b04d0f80e80af46f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_pushvfstring&lt;/code&gt;[-0, +1, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_pushvfstring&lt;/code&gt; [-0、+ 1、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="5301ff5e4db06f4a902ea6e4f46a536016dec115" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rawequal&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_rawequal&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="e7190a64e66cfdbfaa05e771b86b2428ce0f0c4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rawget&lt;/code&gt;[-1, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_rawget&lt;/code&gt; [-1、+1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="d8f63e8c899fc2163ea12e1929521f16195b8027" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rawgeti&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_rawgeti&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="fd2f5fea0059c2e1a9ec9f806dd9bc92085001d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rawgetp&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_rawgetp&lt;/code&gt; [-0、+ 1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="32af4b6d514d73f35935bd7c665974260bb2d400" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rawlen&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_rawlen&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="1d4cc3e1e56562010c53810d955212d9e94456ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rawset&lt;/code&gt;[-2, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_rawset&lt;/code&gt; [-2、+ 0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="6ebc570fbad1c557a9df049aab4ab6766494d940" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rawseti&lt;/code&gt;[-1, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_rawseti&lt;/code&gt; [-1、+ 0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="7c35ae056b934f9d827a204944f9eb45d6eac2c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rawsetp&lt;/code&gt;[-1, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_rawsetp&lt;/code&gt; [-1、+ 0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="13a48b8091c79dfb748c242e690a7dfb0126ad0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_register&lt;/code&gt;[-0, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_register&lt;/code&gt; [-0、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="a0f12f7525f2b835c43c2bbb5726d22e75a7ad66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_remove&lt;/code&gt;[-1, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_remove&lt;/code&gt; [-1、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="e3aac1a6f4d80e971df8eaa5fd21798ce934e9c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_replace&lt;/code&gt;[-1, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_replace&lt;/code&gt; [-1、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="3a14b7df302fab9d83a4283a02b409867a164c3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_resume&lt;/code&gt;[-?, +?, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_resume&lt;/code&gt; [-？、+？、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="64b664566bc1133823238a94df36387e91cc4ce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_rotate&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_rotate&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="01005f76c6b7629878b4c890f865d738f3e13645" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_setallocf&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_setallocf&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="69d7c876f5849763d0227a670cfb4cab56753235" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_setfield&lt;/code&gt;[-1, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_setfield&lt;/code&gt; [-1、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="0afc85df066219abbaa2ee335f767a7b6896a049" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_setglobal&lt;/code&gt;[-1, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_setglobal&lt;/code&gt; [-1、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="1b87726690c26be63f2ac34a4ef8702546d30a9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_sethook&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_sethook&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="f0d0da820dadc58bad264baff1243876ee500108" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_seti&lt;/code&gt;[-1, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_seti&lt;/code&gt; [-1、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="5673fc21d54441e768e98b5369226b29b8a4d4e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_setlocal&lt;/code&gt;[-(0|1), +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_setlocal&lt;/code&gt; [-（0 | 1）、+0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="411f7433e89a45adb3e7009dbdd17fd585bc8560" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_setmetatable&lt;/code&gt;[-1, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_setmetatable&lt;/code&gt; [-1、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="20dcd39a78d5bdc5aa9f802eb25a1dd6a435cab5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_settable&lt;/code&gt;[-2, +0, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_settable&lt;/code&gt; [-2、+ 0、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="8259b61e77e47265f15b0e9934536650ba6717ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_settop&lt;/code&gt;[-?, +?, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_settop&lt;/code&gt; [-？、+？、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="fd6996e775cf476c1f493f52a1afccf6f6c1f4c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_setupvalue&lt;/code&gt;[-(0|1), +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_setupvalue&lt;/code&gt; [-（0 | 1）、+0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="962bd088aac144ff787da78a548da45dbaa42a60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_setuservalue&lt;/code&gt;[-1, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_setuservalue&lt;/code&gt; [-1、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="cc614bc467cfc52c396d5f4863abfb818cf5cd26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_status&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_status&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="2ccbee67de9eb87f0444d554fe5e403f4ee12142" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_stringtonumber&lt;/code&gt;[-0, +1, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_stringtonumber&lt;/code&gt; [-0、+1、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="3c297ec1e5647fff579f5d361ceaa2a83c13bc96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_toboolean&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_toboolean&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="2f40e6bccafddc0d0eb0d56fd2ebb507f4a741b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tocfunction&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_tocfunction&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="772105fa735d3f8e52e4dcf1f374a906313801c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tointeger&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_tointeger&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="087ba9ee74385ce56dc7afa2421e9fe18d49cdf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tointegerx&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_tointegerx&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="d547274b13aa55e1f5b1a1ead3114fadb93ca9e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tolstring&lt;/code&gt; returns a pointer to a string inside the Lua state. This string always has a zero ('&lt;code&gt;\0&lt;/code&gt;') after its last character (as in C), but can contain other zeros in its body.</source>
          <target state="translated">&lt;code&gt;lua_tolstring&lt;/code&gt; は、Lua状態内の文字列へのポインターを返します。この文字列では、最後の文字の後に（Cのように）常にゼロ（ ' &lt;code&gt;\0&lt;/code&gt; '）がありますが、本文には他のゼロを含めることができます。</target>
        </trans-unit>
        <trans-unit id="784eecca5b67aab549cd43e3189c0b5977217c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tolstring&lt;/code&gt;[-0, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_tolstring&lt;/code&gt; [-0、+ 0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="7687cab7b8801ef5abea1aaa0693b3341c3eb2a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tonumber&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_tonumber&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="99cab8a87a9cde1e6e3d9aaa6081962667424cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tonumberx&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_tonumberx&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="d77c2f1d7b9ab8de85633a1ac860cb38ef23ca1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_topointer&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_topointer&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="d7d11d995d3d1465098bd08f248711e428607f48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tostring&lt;/code&gt;[-0, +0, &lt;em&gt;m&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_tostring&lt;/code&gt; [-0、+ 0、&lt;em&gt;m&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="e8d8a7c874870b0198c1a9b7c8f6d3c505824583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_tothread&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_tothread&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="2d3423346c67cf164db6ad8970bd4f2222cb7fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_touserdata&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_touserdata&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="c0476212a8a15366d6ce4f81f04d030827e0066d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_type&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_type&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="f96cc4b0e1232bc22121e6810d74b42c2b1d3e06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_typename&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_typename&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="91a931321e8502b23d51c1a0a5c98f0c4165be7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_upvalueid&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_upvalueid&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="0ac955e136a22fb0a5cd4db3550046e858514163" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_upvalueindex&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_upvalueindex&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="27e8b4001de191561a219319ddfcf067f1e183b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_upvaluejoin&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_upvaluejoin&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="457f873509336f31072e0a6dc8f411b538781818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_version&lt;/code&gt;[-0, +0, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_version&lt;/code&gt; [-0、+ 0、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="bcb44f56e283569bb547217712306f8852f22cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_xmove&lt;/code&gt;[-?, +?, &amp;ndash;]</source>
          <target state="translated">&lt;code&gt;lua_xmove&lt;/code&gt; [-？、+？、&amp;ndash;]</target>
        </trans-unit>
        <trans-unit id="76eecec65311fcc388227c521b10b1a314479323" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_yield&lt;/code&gt;[-?, +?, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_yield&lt;/code&gt; [-？、+ ?、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="81c6c643ec495e4991ca6c7475dab89f182c2cfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lua_yieldk&lt;/code&gt;[-?, +?, &lt;em&gt;e&lt;/em&gt;]</source>
          <target state="translated">&lt;code&gt;lua_yieldk&lt;/code&gt; [-？、+ ?、&lt;em&gt;e&lt;/em&gt; ]</target>
        </trans-unit>
        <trans-unit id="96b82c4509109433cf6af1e0be37d96a7fd94922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt;: a &lt;code&gt;lua_Number&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; ： &lt;code&gt;lua_Number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b29a4583bd00c0104cbe887c8111b95b42c3a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt;:  a reasonable name for the given function. Because functions in Lua are first-class values, they do not have a fixed name: some functions can be the value of multiple global variables, while others can be stored only in a table field. The &lt;code&gt;lua_getinfo&lt;/code&gt; function checks how the function was called to find a suitable name. If it cannot find a name, then &lt;code&gt;name&lt;/code&gt; is set to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; ：指定された関数の適切な名前。 Luaの関数はファーストクラスの値であるため、固定の名前はありません。一部の関数は複数のグローバル変数の値になる場合がありますが、他の関数はテーブルフィールドにのみ格納できます。 &lt;code&gt;lua_getinfo&lt;/code&gt; 関数は、適切な名前を見つけるために呼ばれたかの機能をチェックします。 &lt;code&gt;name&lt;/code&gt; が見つからない場合、名前は &lt;code&gt;NULL&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="18c79c193a99a81d7281723cef6c12912cbf6433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;namewhat&lt;/code&gt;:  explains the &lt;code&gt;name&lt;/code&gt; field. The value of &lt;code&gt;namewhat&lt;/code&gt; can be &lt;code&gt;&quot;global&quot;&lt;/code&gt;, &lt;code&gt;&quot;local&quot;&lt;/code&gt;, &lt;code&gt;&quot;method&quot;&lt;/code&gt;, &lt;code&gt;&quot;field&quot;&lt;/code&gt;, &lt;code&gt;&quot;upvalue&quot;&lt;/code&gt;, or &lt;code&gt;&quot;&quot;&lt;/code&gt; (the empty string), according to how the function was called. (Lua uses the empty string when no other option seems to apply.)</source>
          <target state="translated">&lt;code&gt;namewhat&lt;/code&gt; ： &lt;code&gt;name&lt;/code&gt; フィールドについて説明します。値 &lt;code&gt;namewhat&lt;/code&gt; をすることができ &lt;code&gt;&quot;global&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;local&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;method&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;field&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;upvalue&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;&quot;&lt;/code&gt; 関数が呼び出された方法によれば、（空文字列）。（他のオプションが適用されないように思われる場合、Luaは空ストリングを使用します。）</target>
        </trans-unit>
        <trans-unit id="1fa95e55dd4784388ede4cc0ae537a28a3080930" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nparams&lt;/code&gt;:  the number of fixed parameters of the function (always 0 for C functions).</source>
          <target state="translated">&lt;code&gt;nparams&lt;/code&gt; ：関数の固定パラメーターの数（C関数の場合は常に0）。</target>
        </trans-unit>
        <trans-unit id="f379a6299ba3a449833511efbfb031b2dee8fac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nups&lt;/code&gt;:  the number of upvalues of the function.</source>
          <target state="translated">&lt;code&gt;nups&lt;/code&gt; ：関数のアップバリューの数。</target>
        </trans-unit>
        <trans-unit id="3afc1431e3aae979f726ea70b785e9f045e81a13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt;: a string preceded by its length coded as an unsigned integer with &lt;code&gt;n&lt;/code&gt; bytes (default is a &lt;code&gt;size_t&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;s[&lt;em&gt;n&lt;/em&gt;]&lt;/code&gt; ：長さが前に付いた文字列で、 &lt;code&gt;n&lt;/code&gt; バイトの符号なし整数としてコード化されています（デフォルトは &lt;code&gt;size_t&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="41b71842909a6cbea5231fb02ae01a15bb5d7485" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;short_src&lt;/code&gt;:  a &quot;printable&quot; version of &lt;code&gt;source&lt;/code&gt;, to be used in error messages.</source>
          <target state="translated">&lt;code&gt;short_src&lt;/code&gt; ： &lt;code&gt;source&lt;/code&gt; 「印刷可能な」バージョン。エラーメッセージで使用されます。</target>
        </trans-unit>
        <trans-unit id="8c0e50b9fe2c50cd274f54eaadc1fbca633a98ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt;:  the name of the chunk that created the function. If &lt;code&gt;source&lt;/code&gt; starts with a '&lt;code&gt;@&lt;/code&gt;', it means that the function was defined in a file where the file name follows the '&lt;code&gt;@&lt;/code&gt;'. If &lt;code&gt;source&lt;/code&gt; starts with a '&lt;code&gt;=&lt;/code&gt;', the remainder of its contents describe the source in a user-dependent manner. Otherwise, the function was defined in a string where &lt;code&gt;source&lt;/code&gt; is that string.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; ：関数を作成したチャンクの名前。 &lt;code&gt;source&lt;/code&gt; が ' &lt;code&gt;@&lt;/code&gt; 'で始まる場合は、関数がファイルで定義されており、ファイル名が ' &lt;code&gt;@&lt;/code&gt; 'の後に続くことを意味します。 &lt;code&gt;source&lt;/code&gt; が ' &lt;code&gt;=&lt;/code&gt; 'で始まる場合、その内容の残りの部分はソースをユーザー依存の方法で説明します。それ以外の場合、関数は、 &lt;code&gt;source&lt;/code&gt; がその文字列である文字列で定義されました。</target>
        </trans-unit>
        <trans-unit id="d2ee7088a398a6c05a7c0875bb94a590aab08cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;what&lt;/code&gt;:  the string &lt;code&gt;&quot;Lua&quot;&lt;/code&gt; if the function is a Lua function, &lt;code&gt;&quot;C&quot;&lt;/code&gt; if it is a C function, &lt;code&gt;&quot;main&quot;&lt;/code&gt; if it is the main part of a chunk.</source>
          <target state="translated">&lt;code&gt;what&lt;/code&gt; ：文字列 &lt;code&gt;&quot;Lua&quot;&lt;/code&gt; (関数がLua関数の場合）、 &lt;code&gt;&quot;C&quot;&lt;/code&gt; ( C関数の場合）、 &lt;code&gt;&quot;main&quot;&lt;/code&gt; (チャンクのメイン部分の場合）。</target>
        </trans-unit>
        <trans-unit id="87cd3c11f99f314ecc367ad79ade7d620b0027d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;: one byte of padding</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; ：1バイトのパディング</target>
        </trans-unit>
        <trans-unit id="001502b0ce7e783ed32ff78090d4ed094c235365" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt;: a zero-terminated string</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; ：ゼロで終了する文字列</target>
        </trans-unit>
        <trans-unit id="35770f2a3e697f3d7fc1b9f9a92ee552d22bf261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt;: bitwise OR</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; ：ビットごとのOR</target>
        </trans-unit>
        <trans-unit id="7d6fd4ec60e16166466f316ad472a99346ef7ce9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~&lt;/code&gt;: bitwise exclusive OR</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; ：ビットごとの排他的OR</target>
        </trans-unit>
        <trans-unit id="96b4aa7e1aec2aa10ad8536c6f27c6c544521708" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~&lt;/code&gt;: unary bitwise NOT</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; ：単項ビット単位NOT</target>
        </trans-unit>
        <trans-unit id="acd6d8cce51a342c5b90bb1907903a7f4dbad3e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~=&lt;/code&gt;: inequality</source>
          <target state="translated">&lt;code&gt;~=&lt;/code&gt; ：不等式</target>
        </trans-unit>
        <trans-unit id="aa7f065407772e44a51b8ffb896bf3e031ec8b94" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Names&lt;/em&gt; (also called &lt;em&gt;identifiers&lt;/em&gt;) in Lua can be any string of letters, digits, and underscores, not beginning with a digit and not being a reserved word. Identifiers are used to name variables, table fields, and labels.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Luaの&lt;em&gt;名前&lt;/em&gt;（&lt;em&gt;識別子&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;）は、文字、数字、およびアンダースコアの任意の文字列にすることができます。識別子は、変数、テーブルフィールド、ラベルに名前を付けるために使用されます。</target>
        </trans-unit>
        <trans-unit id="4aadb70307c23ca740f6eccdee86415794b36e75" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;break&lt;/b&gt; ends the innermost enclosing loop.</source>
          <target state="translated">&lt;b&gt;breakは&lt;/b&gt;最も内側のループを終了します。</target>
        </trans-unit>
        <trans-unit id="144235cbc1ccef915119f45152ac47c5119d150b" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;for&lt;/b&gt; statement like</source>
          <target state="translated">&lt;b&gt;以下のための&lt;/b&gt;ようなステートメント</target>
        </trans-unit>
        <trans-unit id="8da2571ab7c7e060c4976d340da392d89313fdab" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;character class&lt;/em&gt; is used to represent a set of characters. The following combinations are allowed in describing a character class:</source>
          <target state="translated">&lt;em&gt;文字クラスは、&lt;/em&gt;文字の集合を表すために使用されます。文字クラスの記述では、次の組み合わせが許可されています。</target>
        </trans-unit>
        <trans-unit id="11942e741b80827f49b57cea2ee7a3083c5c5105" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;comment&lt;/em&gt; starts with a double hyphen (&lt;code&gt;--&lt;/code&gt;) anywhere outside a string. If the text immediately after &lt;code&gt;--&lt;/code&gt; is not an opening long bracket, the comment is a &lt;em&gt;short comment&lt;/em&gt;, which runs until the end of the line. Otherwise, it is a &lt;em&gt;long comment&lt;/em&gt;, which runs until the corresponding closing long bracket. Long comments are frequently used to disable code temporarily.</source>
          <target state="translated">&lt;em&gt;コメントは、&lt;/em&gt;（二重ハイフンで始まる &lt;code&gt;--&lt;/code&gt; どこでも外の文字列）。 &lt;code&gt;--&lt;/code&gt; 直後のテキストが開始の長いブラケットでない場合、コメントは&lt;em&gt;短いコメント&lt;/em&gt;で、行の終わりまで続きます。それ以外の場合、これは&lt;em&gt;長いコメント&lt;/em&gt;であり、対応する終了の長い括弧まで続きます。長いコメントは、コードを一時的に無効にするために頻繁に使用されます。</target>
        </trans-unit>
        <trans-unit id="45246a537ee28cdd862e9e3b659c6215f07e13a0" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;numeric constant&lt;/em&gt; (or &lt;em&gt;numeral&lt;/em&gt;) can be written with an optional fractional part and an optional decimal exponent, marked by a letter '&lt;code&gt;e&lt;/code&gt;' or '&lt;code&gt;E&lt;/code&gt;'. Lua also accepts hexadecimal constants, which start with &lt;code&gt;0x&lt;/code&gt; or &lt;code&gt;0X&lt;/code&gt;. Hexadecimal constants also accept an optional fractional part plus an optional binary exponent, marked by a letter '&lt;code&gt;p&lt;/code&gt;' or '&lt;code&gt;P&lt;/code&gt;'. A numeric constant with a radix point or an exponent denotes a float; otherwise, if its value fits in an integer, it denotes an integer. Examples of valid integer constants are</source>
          <target state="translated">&lt;em&gt;数値定数&lt;/em&gt;（または&lt;em&gt;数字&lt;/em&gt;）文字「でマークされたオプションの小数部および任意の小数指数で書き込むことができ &lt;code&gt;e&lt;/code&gt; 」または「 &lt;code&gt;E&lt;/code&gt; 」。Luaは &lt;code&gt;0x&lt;/code&gt; または &lt;code&gt;0X&lt;/code&gt; で始まる16進定数も受け入れます。16進定数は、オプションの小数部とオプションの2進指数も受け入れ、文字「 &lt;code&gt;p&lt;/code&gt; 」または「 &lt;code&gt;P&lt;/code&gt; 」でマークされます。基数ポイントまたは指数を持つ数値定数は、浮動小数点数を示します。そうでなければ、その値が整数に収まる場合、それは整数を示します。有効な整数定数の例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="43c4164c55abb7933faf258648b8253172e7ddaf" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;pattern item&lt;/em&gt; can be</source>
          <target state="translated">&lt;em&gt;パターン項目が&lt;/em&gt;あってもよいです</target>
        </trans-unit>
        <trans-unit id="9b3f67e64fdd3547c2b4af7f1362a66a7279295d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;pattern&lt;/em&gt; is a sequence of pattern items. A caret '&lt;code&gt;^&lt;/code&gt;' at the beginning of a pattern anchors the match at the beginning of the subject string. A '&lt;code&gt;$&lt;/code&gt;' at the end of a pattern anchors the match at the end of the subject string. At other positions, '&lt;code&gt;^&lt;/code&gt;' and '&lt;code&gt;$&lt;/code&gt;' have no special meaning and represent themselves.</source>
          <target state="translated">&lt;em&gt;パターンは&lt;/em&gt;、パターンアイテムのシーケンスです。パターンの先頭にあるキャレット「 &lt;code&gt;^&lt;/code&gt; 」は、対象の文字列の先頭に一致を固定します。パターンの最後にある' &lt;code&gt;$&lt;/code&gt; 'は、対象の文字列の最後に一致を固定します。他の位置では、「 &lt;code&gt;^&lt;/code&gt; 」と「 &lt;code&gt;$&lt;/code&gt; 」は特別な意味を持たず、それ自体を表します。</target>
        </trans-unit>
        <trans-unit id="c9d93dadd47fb17d5c1f30a2f6969069891cffbe" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;short literal string&lt;/em&gt; can be delimited by matching single or double quotes, and can contain the following C-like escape sequences: '&lt;code&gt;\a&lt;/code&gt;' (bell), '&lt;code&gt;\b&lt;/code&gt;' (backspace), '&lt;code&gt;\f&lt;/code&gt;' (form feed), '&lt;code&gt;\n&lt;/code&gt;' (newline), '&lt;code&gt;\r&lt;/code&gt;' (carriage return), '&lt;code&gt;\t&lt;/code&gt;' (horizontal tab), '&lt;code&gt;\v&lt;/code&gt;' (vertical tab), '&lt;code&gt;\\&lt;/code&gt;' (backslash), '&lt;code&gt;\&quot;&lt;/code&gt;' (quotation mark [double quote]), and '&lt;code&gt;\'&lt;/code&gt;' (apostrophe [single quote]). A backslash followed by a line break results in a newline in the string. The escape sequence '&lt;code&gt;\z&lt;/code&gt;' skips the following span of white-space characters, including line breaks; it is particularly useful to break and indent a long literal string into multiple lines without adding the newlines and spaces into the string contents. A short literal string cannot contain unescaped line breaks nor escapes not forming a valid escape sequence.</source>
          <target state="translated">&lt;em&gt;短い文字列リテラルは、&lt;/em&gt;単一または二重引用符を照合することによって区切ることができ、以下のC状エスケープシーケンスを含めることができます「 &lt;code&gt;\a&lt;/code&gt; 」（ベル）、「 &lt;code&gt;\b&lt;/code&gt; 」（バックスペース）、「 &lt;code&gt;\f&lt;/code&gt; 」（改） ' &lt;code&gt;\n&lt;/code&gt; '（改行）、 ' &lt;code&gt;\r&lt;/code&gt; '（キャリッジリターン）、 ' &lt;code&gt;\t&lt;/code&gt; '（水平タブ）、 ' &lt;code&gt;\v&lt;/code&gt; '（垂直タブ）、 ' &lt;code&gt;\\&lt;/code&gt; '（バックスラッシュ）、 ' &lt;code&gt;\&quot;&lt;/code&gt; '（引用符[二重引用符]）、および ' &lt;code&gt;\'&lt;/code&gt; '（アポストロフィ[一重引用符]）バックスラッシュの後に改行が続くと、文字列に改行が挿入されます。エスケープシーケンス' &lt;code&gt;\z&lt;/code&gt; '次の改行を含む空白文字の範囲をスキップします。文字列の内容に改行とスペースを追加せずに、長いリテラル文字列を複数行に分割してインデントすることは特に便利です。短いリテラル文字列には、エスケープされていない改行や有効なエスケープシーケンスを形成しないエスケープを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="28b71986dee98cd86a5bb65ac2e321dbab699546" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;valid index&lt;/em&gt; is an index that refers to a position that stores a modifiable Lua value. It comprises stack indices between 1 and the stack top (&lt;code&gt;1 &amp;le; abs(index) &amp;le; top&lt;/code&gt;) plus &lt;em&gt;pseudo-indices&lt;/em&gt;, which represent some positions that are accessible to C code but that are not in the stack. Pseudo-indices are used to access the registry (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;) and the upvalues of a C function (see &lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;有効なインデックスは、&lt;/em&gt;修正Luaの値を格納する位置を指すインデックスです。これは、1からスタックトップまでのスタックインデックス（ &lt;code&gt;1 &amp;le; abs(index) &amp;le; top&lt;/code&gt; ）と、Cコードからアクセスできるがスタック内にないいくつかの位置を表す&lt;em&gt;疑似インデックス&lt;/em&gt;で構成されます。擬似インデックスは、レジストリ（参照にアクセスするために使用さ&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;）とC関数の上位値を（参照&lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="cc2ccfd57dd2ee13db0881ad932f1a878faf0c64" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;weak table&lt;/em&gt; is a table whose elements are &lt;em&gt;weak references&lt;/em&gt;. A weak reference is ignored by the garbage collector. In other words, if the only references to an object are weak references, then the garbage collector will collect that object.</source>
          <target state="translated">&lt;em&gt;弱いテーブルは&lt;/em&gt;、その要素であるテーブルである&lt;em&gt;弱参照&lt;/em&gt;。弱い参照はガベージコレクターによって無視されます。つまり、オブジェクトへの唯一の参照が弱参照である場合、ガベージコレクターはそのオブジェクトを収集します。</target>
        </trans-unit>
        <trans-unit id="9fa55e8031d6eb3c6d20f33859dde00134235bf3" translate="yes" xml:space="preserve">
          <source>A block can be explicitly delimited to produce a single statement:</source>
          <target state="translated">ブロックを明示的に区切ることで、1つのステートメントを生成することができます。</target>
        </trans-unit>
        <trans-unit id="ec51a298084d5b31d4dab8833e20239393ee6e1e" translate="yes" xml:space="preserve">
          <source>A block is a list of statements, which are executed sequentially:</source>
          <target state="translated">ブロックとは、連続して実行されるステートメントのリストのことです。</target>
        </trans-unit>
        <trans-unit id="1a46bdc4d8fc003e74bbca9567f9845260ef3e19" translate="yes" xml:space="preserve">
          <source>A call of the form &lt;code&gt;return &lt;em&gt;functioncall&lt;/em&gt;&lt;/code&gt; is called a &lt;em&gt;tail call&lt;/em&gt;. Lua implements &lt;em&gt;proper tail calls&lt;/em&gt; (or &lt;em&gt;proper tail recursion&lt;/em&gt;): in a tail call, the called function reuses the stack entry of the calling function. Therefore, there is no limit on the number of nested tail calls that a program can execute. However, a tail call erases any debug information about the calling function. Note that a tail call only happens with a particular syntax, where the &lt;b&gt;return&lt;/b&gt; has one single function call as argument; this syntax makes the calling function return exactly the returns of the called function. So, none of the following examples are tail calls:</source>
          <target state="translated">&lt;code&gt;return &lt;em&gt;functioncall&lt;/em&gt;&lt;/code&gt; の形式の呼び出しは、&lt;em&gt;末尾呼び出し&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。 Luaは&lt;em&gt;適切な末尾呼び出し&lt;/em&gt;（または&lt;em&gt;適切な末尾再帰&lt;/em&gt;）を実装し&lt;em&gt;ます。末尾呼び出し&lt;/em&gt;では、呼び出された関数は呼び出し元の関数のスタックエントリを再利用します。したがって、プログラムが実行できるネストされた末尾呼び出しの数に制限はありません。ただし、末尾呼び出しは、呼び出し元関数に関するデバッグ情報を消去します。末尾呼び出しは特定の構文でのみ発生することに注意してください。&lt;b&gt;戻り値に&lt;/b&gt;は引数として1つの単一の関数呼び出しがあります。この構文により、呼び出し元の関数は呼び出し先の関数の戻り値を正確に返します。したがって、次の例はいずれも末尾呼び出しではありません。</target>
        </trans-unit>
        <trans-unit id="d2afda0df1ca02ec9a60e9c8cfd19f5d2f5a92aa" translate="yes" xml:space="preserve">
          <source>A chunk can be stored in a file or in a string inside the host program. To execute a chunk, Lua first &lt;em&gt;loads&lt;/em&gt; it, precompiling the chunk's code into instructions for a virtual machine, and then Lua executes the compiled code with an interpreter for the virtual machine.</source>
          <target state="translated">チャンクは、ホストプログラム内のファイルまたは文字列に格納できます。チャンクを実行するために、Luaはまずチャンクを&lt;em&gt;ロード&lt;/em&gt;し、チャンクのコードを仮想マシンの命令にプリコンパイルし&lt;em&gt;ます。&lt;/em&gt;次に、Luaはコンパイルされたコードを仮想マシンのインタープリターで実行します。</target>
        </trans-unit>
        <trans-unit id="c4ee67ff442e191f14dbdcdb9233561f4dc58f7c" translate="yes" xml:space="preserve">
          <source>A chunk is also a block (see &lt;a href=&quot;#3.3.2&quot;&gt;&amp;sect;3.3.2&lt;/a&gt;), and so local variables can be declared in a chunk outside any explicit block.</source>
          <target state="translated">チャンクはブロックでもあり（&lt;a href=&quot;#3.3.2&quot;&gt;&amp;sect;3.3.2を&lt;/a&gt;参照）、ローカル変数は明示的なブロックの外側のチャンクで宣言できます。</target>
        </trans-unit>
        <trans-unit id="89f058cf87035dfffc923b06bddc388bf582fef2" translate="yes" xml:space="preserve">
          <source>A coroutine can terminate its execution in two ways: normally, when its main function returns (explicitly or implicitly, after the last instruction); and abnormally, if there is an unprotected error. In case of normal termination, &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt; returns &lt;b&gt;true&lt;/b&gt;, plus any values returned by the coroutine main function. In case of errors, &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt; returns &lt;b&gt;false&lt;/b&gt; plus an error object.</source>
          <target state="translated">コルーチンは、2つの方法でその実行を終了できます。通常、そのメイン関数が（最後の命令の後に明示的または暗黙的に）戻るとき。保護されていないエラーがある場合は異常。正常に終了した場合、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;は&lt;b&gt;true&lt;/b&gt;に加えて、コルーチンのメイン関数によって返された値を返します。エラーが発生した場合、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;は&lt;b&gt;false&lt;/b&gt;とエラーオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="27ee02330bdc9c7efb921e9fa622f05fad377bb4" translate="yes" xml:space="preserve">
          <source>A coroutine yields by calling &lt;a href=&quot;#pdf-coroutine.yield&quot;&gt;&lt;code&gt;coroutine.yield&lt;/code&gt;&lt;/a&gt;. When a coroutine yields, the corresponding &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt; returns immediately, even if the yield happens inside nested function calls (that is, not in the main function, but in a function directly or indirectly called by the main function). In the case of a yield, &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt; also returns &lt;b&gt;true&lt;/b&gt;, plus any values passed to &lt;a href=&quot;#pdf-coroutine.yield&quot;&gt;&lt;code&gt;coroutine.yield&lt;/code&gt;&lt;/a&gt;. The next time you resume the same coroutine, it continues its execution from the point where it yielded, with the call to &lt;a href=&quot;#pdf-coroutine.yield&quot;&gt;&lt;code&gt;coroutine.yield&lt;/code&gt;&lt;/a&gt; returning any extra arguments passed to &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">呼び出すことにより、コルーチン利回り&lt;a href=&quot;#pdf-coroutine.yield&quot;&gt; &lt;code&gt;coroutine.yield&lt;/code&gt; を&lt;/a&gt;。コルーチンが生成されるとき、対応する&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;は、ネストされた関数呼び出し内（つまり、メイン関数内ではなく、メイン関数によって直接または間接的に呼び出される関数内）で生成が発生した場合でも、すぐに戻ります。収量の場合、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;は&lt;b&gt;trueと&lt;/b&gt;、&lt;a href=&quot;#pdf-coroutine.yield&quot;&gt; &lt;code&gt;coroutine.yield&lt;/code&gt; に&lt;/a&gt;渡された値も返し&lt;b&gt;ます&lt;/b&gt;。あなたは同じコルーチンを再開する次回は、それはへの呼び出しで、得られた時点から、その実行続け&lt;a href=&quot;#pdf-coroutine.yield&quot;&gt; &lt;code&gt;coroutine.yield&lt;/code&gt; &lt;/a&gt;に渡される追加の引数を返す&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eb3088438d805eed5e3fbd8b4df355ce4b0938eb" translate="yes" xml:space="preserve">
          <source>A detailed list of events controlled by metatables is given next. Each operation is identified by its corresponding key.</source>
          <target state="translated">次に、メタテーブルによって制御されるイベントの詳細なリストを示します。それぞれの操作は、対応するキーによって識別されます。</target>
        </trans-unit>
        <trans-unit id="11ece8c655dc36e8d6319d68c95bcaac2d49dfe7" translate="yes" xml:space="preserve">
          <source>A file handle is implemented as a full userdata, with a metatable called &lt;code&gt;LUA_FILEHANDLE&lt;/code&gt; (where &lt;code&gt;LUA_FILEHANDLE&lt;/code&gt; is a macro with the actual metatable's name). The metatable is created by the I/O library (see &lt;a href=&quot;#luaL_newmetatable&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">ファイルハンドルは、 &lt;code&gt;LUA_FILEHANDLE&lt;/code&gt; （ &lt;code&gt;LUA_FILEHANDLE&lt;/code&gt; は実際のメタテーブルの名前を持つマクロ）と呼ばれるメタテーブルを使用して、完全なユーザーデータとして実装されます。メタテーブルはI / Oライブラリーによって作成されます（&lt;a href=&quot;#luaL_newmetatable&quot;&gt; &lt;code&gt;luaL_newmetatable&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="bd31b6026ec306c9598314c7a4fb9720392f25d4" translate="yes" xml:space="preserve">
          <source>A format string is a sequence of conversion options. The conversion options are as follows:</source>
          <target state="translated">フォーマット文字列は,変換オプションのシーケンスです。変換オプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="bbe12450770ac90f140b941579b60535c8af83cf" translate="yes" xml:space="preserve">
          <source>A function call in Lua has the following syntax:</source>
          <target state="translated">Luaの関数呼び出しには、以下のような構文があります。</target>
        </trans-unit>
        <trans-unit id="0cb80c7bdf41b4df631b1f8aa57077bfb622b3ca" translate="yes" xml:space="preserve">
          <source>A function definition is an executable expression, whose value has type &lt;em&gt;function&lt;/em&gt;. When Lua precompiles a chunk, all its function bodies are precompiled too. Then, whenever Lua executes the function definition, the function is &lt;em&gt;instantiated&lt;/em&gt; (or &lt;em&gt;closed&lt;/em&gt;). This function instance (or &lt;em&gt;closure&lt;/em&gt;) is the final value of the expression.</source>
          <target state="translated">関数定義は実行可能な式であり、その値の型は&lt;em&gt;function&lt;/em&gt;です。Luaがチャンクをプリコンパイルすると、そのすべての関数本体もプリコンパイルされます。次に、Luaが関数定義を実行するたびに、関数が&lt;em&gt;インスタンス化&lt;/em&gt;（または&lt;em&gt;closed&lt;/em&gt;）されます。この関数インスタンス（または&lt;em&gt;クロージャ&lt;/em&gt;）は、式の最終的な値です。</target>
        </trans-unit>
        <trans-unit id="def5b5d3fc526d80ec07c94970f2e05b00532d11" translate="yes" xml:space="preserve">
          <source>A global variable (not a function) that holds a string containing the running Lua version. The current value of this variable is &quot;&lt;code&gt;Lua 5.3&lt;/code&gt;&quot;.</source>
          <target state="translated">実行中のLuaバージョンを含む文字列を保持する（関数ではなく）グローバル変数。この変数の現在の値は「 &lt;code&gt;Lua 5.3&lt;/code&gt; 」です。</target>
        </trans-unit>
        <trans-unit id="353c97fb2432c2d977afa942e47185d3456b4910" translate="yes" xml:space="preserve">
          <source>A global variable (not a function) that holds the global environment (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.</source>
          <target state="translated">グローバル環境を保持する（関数ではなく）グローバル変数（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。Lua自体はこの変数を使用しません。その値を変更しても、環境には影響しません。逆も同様です。</target>
        </trans-unit>
        <trans-unit id="bb9da1771a20805caac7264030f37560221e3663" translate="yes" xml:space="preserve">
          <source>A hook is disabled by setting &lt;code&gt;mask&lt;/code&gt; to zero.</source>
          <target state="translated">&lt;code&gt;mask&lt;/code&gt; をゼロに設定すると、フックが無効になります。</target>
        </trans-unit>
        <trans-unit id="22f3c7023ea10aed55497eb7b7366ee3b6a6cb22" translate="yes" xml:space="preserve">
          <source>A label is visible in the entire block where it is defined, except inside nested blocks where a label with the same name is defined and inside nested functions. A goto may jump to any visible label as long as it does not enter into the scope of a local variable.</source>
          <target state="translated">ラベルは、同じ名前のラベルが定義されているネストされたブロック内とネストされた関数内を除き、そのラベルが定義されているブロック全体で表示されます。gotoは、ローカル変数のスコープに入らない限り、どのような可視ラベルにもジャンプすることができます。</target>
        </trans-unit>
        <trans-unit id="933dd832c6b0be5ada1dd95c6bacc46f4be4f532" translate="yes" xml:space="preserve">
          <source>A metatable controls how an object behaves in arithmetic operations, bitwise operations, order comparisons, concatenation, length operation, calls, and indexing. A metatable also can define a function to be called when a userdata or a table is garbage collected (&lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;).</source>
          <target state="translated">メタテーブルは、算術演算、ビット単位の演算、順序比較、連結、長さ演算、呼び出し、およびインデックス作成でのオブジェクトの動作を制御します。メタテーブルは、ユーザーデータまたはテーブルがガベージコレクションされたときに呼び出される関数も定義できます（&lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3fbf280f4f9e4cb8aa41cf93549ddcd00b0d6b38" translate="yes" xml:space="preserve">
          <source>A path is a string containing a sequence of &lt;em&gt;templates&lt;/em&gt; separated by semicolons. For each template, the function replaces each interrogation mark (if any) in the template with a copy of &lt;code&gt;name&lt;/code&gt; wherein all occurrences of &lt;code&gt;sep&lt;/code&gt; (a dot, by default) were replaced by &lt;code&gt;rep&lt;/code&gt; (the system's directory separator, by default), and then tries to open the resulting file name.</source>
          <target state="translated">パスは、セミコロンで区切られた一連の&lt;em&gt;テンプレート&lt;/em&gt;を含む文字列です。この関数は、テンプレートごとに、テンプレート内の各調査マーク（存在する場合）を &lt;code&gt;name&lt;/code&gt; コピーに置き換えます。名前のコピーには、 &lt;code&gt;sep&lt;/code&gt; （デフォルトではドット）がすべて &lt;code&gt;rep&lt;/code&gt; （システムのディレクトリセパレーター）に置き換えられます。結果のファイル名を開こうとします。</target>
        </trans-unit>
        <trans-unit id="3592c30e99bab5898e5564c352fa7c9c589dc5de" translate="yes" xml:space="preserve">
          <source>A pattern can contain sub-patterns enclosed in parentheses; they describe &lt;em&gt;captures&lt;/em&gt;. When a match succeeds, the substrings of the subject string that match captures are stored (&lt;em&gt;captured&lt;/em&gt;) for future use. Captures are numbered according to their left parentheses. For instance, in the pattern &lt;code&gt;&quot;(a*(.)%w(%s*))&quot;&lt;/code&gt;, the part of the string matching &lt;code&gt;&quot;a*(.)%w(%s*)&quot;&lt;/code&gt; is stored as the first capture (and therefore has number 1); the character matching &quot;&lt;code&gt;.&lt;/code&gt;&quot; is captured with number 2, and the part matching &quot;&lt;code&gt;%s*&lt;/code&gt;&quot; has number 3.</source>
          <target state="translated">パターンには、括弧で囲まれたサブパターンを含めることができます。&lt;em&gt;キャプチャ&lt;/em&gt;について説明&lt;em&gt;し&lt;/em&gt;ます。一致が成功すると、キャプチャに一致するサブジェクト文字列のサブ文字列が将来の使用に備えて保存（&lt;em&gt;captured&lt;/em&gt;）されます。キャプチャは、左括弧に従って番号が付けられています。たとえば、パターン &lt;code&gt;&quot;(a*(.)%w(%s*))&quot;&lt;/code&gt; では、 &lt;code&gt;&quot;a*(.)%w(%s*)&quot;&lt;/code&gt; 一致する文字列の部分が最初のキャプチャ（したがって、1番です。 「 &lt;code&gt;.&lt;/code&gt; 」に一致する文字は番号2でキャプチャされ、「 &lt;code&gt;%s*&lt;/code&gt; 」に一致する部分は番号3になります。</target>
        </trans-unit>
        <trans-unit id="38cf749bb9ad3579d6b255d66e52681d302f2ddf" translate="yes" xml:space="preserve">
          <source>A pointer to a thread must be passed as the first argument to every function in the library, except to &lt;a href=&quot;#lua_newstate&quot;&gt;&lt;code&gt;lua_newstate&lt;/code&gt;&lt;/a&gt;, which creates a Lua state from scratch and returns a pointer to the &lt;em&gt;main thread&lt;/em&gt; in the new state.</source>
          <target state="translated">スレッドへのポインターは、最初の引数としてライブラリ内のすべての関数に渡す必要があります。ただし、&lt;a href=&quot;#lua_newstate&quot;&gt; &lt;code&gt;lua_newstate&lt;/code&gt; は&lt;/a&gt;、最初からLua状態を作成し、新しい状態の&lt;em&gt;メインスレッド&lt;/em&gt;へのポインターを返します。</target>
        </trans-unit>
        <trans-unit id="9f720f6817ac0c98d606b9b7538ff16874a21500" translate="yes" xml:space="preserve">
          <source>A pointer to this structure must be passed as the first argument to every function in the library, except to &lt;a href=&quot;#lua_newstate&quot;&gt;&lt;code&gt;lua_newstate&lt;/code&gt;&lt;/a&gt;, which creates a Lua state from scratch.</source>
          <target state="translated">この構造体へのポインターは、最初からLua状態を作成する&lt;a href=&quot;#lua_newstate&quot;&gt; &lt;code&gt;lua_newstate&lt;/code&gt; &lt;/a&gt;を除き、ライブラリー内のすべての関数の最初の引数として渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="85de206f279ceaa430602580da3ee35a9d16cd8a" translate="yes" xml:space="preserve">
          <source>A program can modify the behavior of the length operator for any value but strings through the &lt;code&gt;__len&lt;/code&gt; metamethod (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">プログラムは、 &lt;code&gt;__len&lt;/code&gt; メタメソッドを使用して、文字列以外の任意の値の長さ演算子の動作を変更できます（&lt;a href=&quot;#2.4&quot;&gt;2.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="bd8bd19d7a0da2968b0e0676ae5bf0fd9c2f4e0b" translate="yes" xml:space="preserve">
          <source>A reference is a unique integer key. As long as you do not manually add integer keys into table &lt;code&gt;t&lt;/code&gt;, &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt; ensures the uniqueness of the key it returns. You can retrieve an object referred by reference &lt;code&gt;r&lt;/code&gt; by calling &lt;code&gt;lua_rawgeti(L, t, r)&lt;/code&gt;. Function &lt;a href=&quot;#luaL_unref&quot;&gt;&lt;code&gt;luaL_unref&lt;/code&gt;&lt;/a&gt; frees a reference and its associated object.</source>
          <target state="translated">参照は一意の整数キーです。整数キーを手動でテーブル &lt;code&gt;t&lt;/code&gt; に追加しない限り、&lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; &lt;/a&gt;は返されるキーの一意性を保証します。 &lt;code&gt;lua_rawgeti(L, t, r)&lt;/code&gt; 呼び出すことにより、参照 &lt;code&gt;r&lt;/code&gt; によって参照されるオブジェクトを取得できます。関数&lt;a href=&quot;#luaL_unref&quot;&gt; &lt;code&gt;luaL_unref&lt;/code&gt; &lt;/a&gt;は、参照とそれに関連付けられたオブジェクトを解放します。</target>
        </trans-unit>
        <trans-unit id="5886b914eeefc6fe9c97cf73899590f4453edb42" translate="yes" xml:space="preserve">
          <source>A running coroutine is yieldable if it is not the main thread and it is not inside a non-yieldable C function.</source>
          <target state="translated">実行中のコルーチンは、それがメインスレッドではなく、降伏可能ではないC関数の中にない場合、降伏可能です。</target>
        </trans-unit>
        <trans-unit id="02104a4bea2c474acf11ad8559dae77d59bc940e" translate="yes" xml:space="preserve">
          <source>A single name can denote a global variable or a local variable (or a function's formal parameter, which is a particular kind of local variable):</source>
          <target state="translated">単一の名前は、グローバル変数やローカル変数を表すことができます(または、関数の形式的なパラメータは、特定の種類のローカル変数です)。</target>
        </trans-unit>
        <trans-unit id="4794c70aa8c69ef2ec8802a8dbbec4cdd33e83e8" translate="yes" xml:space="preserve">
          <source>A string buffer allows C code to build Lua strings piecemeal. Its pattern of use is as follows:</source>
          <target state="translated">文字列バッファを使用すると、CコードでLuaの文字列を断片的に構築することができます。その使用方法は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f87ecc6b4255bdd2af412051775ae09429630fe0" translate="yes" xml:space="preserve">
          <source>A string describing some compile-time configurations for packages. This string is a sequence of lines:</source>
          <target state="translated">パッケージのコンパイル時の設定を記述した文字列。この文字列は一連の行を表します。</target>
        </trans-unit>
        <trans-unit id="fec6a000811b19de6807d9f5d778634007385bd8" translate="yes" xml:space="preserve">
          <source>A structure used to carry different pieces of information about a function or an activation record. &lt;a href=&quot;#lua_getstack&quot;&gt;&lt;code&gt;lua_getstack&lt;/code&gt;&lt;/a&gt; fills only the private part of this structure, for later use. To fill the other fields of &lt;a href=&quot;#lua_Debug&quot;&gt;&lt;code&gt;lua_Debug&lt;/code&gt;&lt;/a&gt; with useful information, call &lt;a href=&quot;#lua_getinfo&quot;&gt;&lt;code&gt;lua_getinfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">機能またはアクティブ化レコードに関するさまざまな情報を運ぶために使用される構造。&lt;a href=&quot;#lua_getstack&quot;&gt; &lt;code&gt;lua_getstack&lt;/code&gt; &lt;/a&gt;は、後で使用するために、この構造のプライベート部分のみを埋めます。&lt;a href=&quot;#lua_Debug&quot;&gt; &lt;code&gt;lua_Debug&lt;/code&gt; &lt;/a&gt;の他のフィールドに有用な情報を入力するには、lua_getinfoを呼び出し&lt;a href=&quot;#lua_getinfo&quot;&gt; &lt;code&gt;lua_getinfo&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f70841dbcffb4668b72f4ee9f5d20362ac22ade" translate="yes" xml:space="preserve">
          <source>A table to store loaders for specific modules (see &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">特定のモジュールのローダーを格納するテーブル（&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="04907543b8fecfeecd0da3b12b889da3eb87f79e" translate="yes" xml:space="preserve">
          <source>A table used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; to control how to load modules.</source>
          <target state="translated">モジュールのロード方法を制御するために&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;が使用するテーブル。</target>
        </trans-unit>
        <trans-unit id="236d800446c3c980d88f62e84b598b19165287ba" translate="yes" xml:space="preserve">
          <source>A table used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; to control which modules are already loaded. When you require a module &lt;code&gt;modname&lt;/code&gt; and &lt;code&gt;package.loaded[modname]&lt;/code&gt; is not false, &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; simply returns the value stored there.</source>
          <target state="translated">ロード済みのモジュールを制御する&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;が使用するテーブル。あなたは、モジュール必要な場合 &lt;code&gt;modname&lt;/code&gt; と &lt;code&gt;package.loaded[modname]&lt;/code&gt; 、偽ではありません&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;単にそこに格納された値を返します。</target>
        </trans-unit>
        <trans-unit id="3862e82890432c457763712f15a7fd6f5e4a1a62" translate="yes" xml:space="preserve">
          <source>A table with exactly one border is called a &lt;em&gt;sequence&lt;/em&gt;. For instance, the table &lt;code&gt;{10, 20, 30, 40, 50}&lt;/code&gt; is a sequence, as it has only one border (5). The table &lt;code&gt;{10, 20, 30, nil, 50}&lt;/code&gt; has two borders (3 and 5), and therefore it is not a sequence. The table &lt;code&gt;{nil, 20, 30, nil, nil, 60, nil}&lt;/code&gt; has three borders (0, 3, and 6), so it is not a sequence, too. The table &lt;code&gt;{}&lt;/code&gt; is a sequence with border 0. Note that non-natural keys do not interfere with whether a table is a sequence.</source>
          <target state="translated">境界線が1つだけのテーブルは、&lt;em&gt;シーケンス&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。たとえば、テーブル &lt;code&gt;{10, 20, 30, 40, 50}&lt;/code&gt; は、ボーダーが1つしかないため、シーケンスです（5）。テーブル &lt;code&gt;{10, 20, 30, nil, 50}&lt;/code&gt; は2つの境界線（3と5）があるため、シーケンスではありません。テーブル &lt;code&gt;{nil, 20, 30, nil, nil, 60, nil}&lt;/code&gt; は3つの境界線（0、3、および6）があるため、これもシーケンスではありません。テーブル &lt;code&gt;{}&lt;/code&gt; は、境界が0のシーケンスです。非自然キーは、テーブルがシーケンスであるかどうかを妨げないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0d3f40da2d8f70f83b27ea28adbba3891980e807" translate="yes" xml:space="preserve">
          <source>A table with weak keys and strong values is also called an &lt;em&gt;ephemeron table&lt;/em&gt;. In an ephemeron table, a value is considered reachable only if its key is reachable. In particular, if the only reference to a key comes through its value, the pair is removed.</source>
          <target state="translated">弱いキーと強い値を持つテーブルは、&lt;em&gt;エフェメロンテーブル&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;。エフェメロンテーブルでは、キーが到達可能である場合にのみ、値は到達可能であると見なされます。特に、キーへの唯一の参照がその値を介して来る場合、ペアは削除されます。</target>
        </trans-unit>
        <trans-unit id="4654fe97bf7d302a9567895699edd89cbcd9e791" translate="yes" xml:space="preserve">
          <source>A typical traversal looks like this:</source>
          <target state="translated">典型的なトラバーサルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="56d6e1795249533ab7eb0411e5a66433e31c3e9e" translate="yes" xml:space="preserve">
          <source>A weak table can have weak keys, weak values, or both. A table with weak values allows the collection of its values, but prevents the collection of its keys. A table with both weak keys and weak values allows the collection of both keys and values. In any case, if either the key or the value is collected, the whole pair is removed from the table. The weakness of a table is controlled by the &lt;code&gt;__mode&lt;/code&gt; field of its metatable. If the &lt;code&gt;__mode&lt;/code&gt; field is a string containing the character '&lt;code&gt;k&lt;/code&gt;', the keys in the table are weak. If &lt;code&gt;__mode&lt;/code&gt; contains '&lt;code&gt;v&lt;/code&gt;', the values in the table are weak.</source>
          <target state="translated">弱いテーブルは、弱いキー、弱い値、またはその両方を持つことができます。弱い値を持つテーブルでは、その値を収集できますが、キーの収集はできません。弱いキーと弱い値の両方を持つテーブルでは、キーと値の両方を収集できます。いずれの場合も、キーまたは値のいずれかが収集されると、ペア全体がテーブルから削除されます。テーブルの弱点は、 &lt;code&gt;__mode&lt;/code&gt; テーブルの__modeフィールドによって制御されます。 &lt;code&gt;__mode&lt;/code&gt; フィールドが文字「 &lt;code&gt;k&lt;/code&gt; 」を含む文字列である場合、テーブルのキーは脆弱です。 &lt;code&gt;__mode&lt;/code&gt; に ' &lt;code&gt;v&lt;/code&gt; ' が含まれている場合、表の値は脆弱です。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="be7df36d7d8ed1468bab871c0aefed53b43ba4c0" translate="yes" xml:space="preserve">
          <source>Acceptable indices serve to avoid extra tests against the stack top when querying the stack. For instance, a C function can query its third argument without the need to first check whether there is a third argument, that is, without the need to check whether 3 is a valid index.</source>
          <target state="translated">受け入れ可能なインデックスは、スタックへの問い合わせの際にスタックトップに対する余分なテストを回避するのに役立ちます。例えば、C関数は、第3引数があるかどうかを最初にチェックする必要なく、つまり、3が有効なインデックスであるかどうかをチェックする必要なく、その第3引数を問い合わせることができます。</target>
        </trans-unit>
        <trans-unit id="f9bead715d3aed55f00ef8b226e3b3d6b628f98c" translate="yes" xml:space="preserve">
          <source>Accepts any index, or 0, and sets the stack top to this index. If the new top is larger than the old one, then the new elements are filled with &lt;b&gt;nil&lt;/b&gt;. If &lt;code&gt;index&lt;/code&gt; is 0, then all stack elements are removed.</source>
          <target state="translated">インデックスまたは0を受け入れ、スタックの先頭をこのインデックスに設定します。新しいトップが古いトップよりも大きい場合、新しい要素は&lt;b&gt;nilで&lt;/b&gt;埋められます。場合は &lt;code&gt;index&lt;/code&gt; 0である場合、すべてのスタック要素が削除されます。</target>
        </trans-unit>
        <trans-unit id="fa67d1b55b60391424ed0215f797f8cda588620a" translate="yes" xml:space="preserve">
          <source>Adds the byte &lt;code&gt;c&lt;/code&gt; to the buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">バイト &lt;code&gt;c&lt;/code&gt; をバッファー &lt;code&gt;B&lt;/code&gt; に追加します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e90d8fb3354b196fdab7ad34fbe37926f7654b63" translate="yes" xml:space="preserve">
          <source>Adds the string pointed to by &lt;code&gt;s&lt;/code&gt; with length &lt;code&gt;l&lt;/code&gt; to the buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;). The string can contain embedded zeros.</source>
          <target state="translated">長さ &lt;code&gt;l&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; が指す文字列をバッファー &lt;code&gt;B&lt;/code&gt; に追加します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。文字列には、埋め込まれたゼロを含めることができます。</target>
        </trans-unit>
        <trans-unit id="a1554fdc1fb0aa862c71bc7fc397a26d3a4ef58d" translate="yes" xml:space="preserve">
          <source>Adds the value at the top of the stack to the buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;). Pops the value.</source>
          <target state="translated">スタックの一番上の値をバッファー &lt;code&gt;B&lt;/code&gt; に追加します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。値をポップします。</target>
        </trans-unit>
        <trans-unit id="805463d8104725860e0a53e77554865962b221ce" translate="yes" xml:space="preserve">
          <source>Adds the zero-terminated string pointed to by &lt;code&gt;s&lt;/code&gt; to the buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が指すゼロで終了する文字列をバッファー &lt;code&gt;B&lt;/code&gt; に追加します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="71ca21350559a88942a584e333d8d2fdeaeb2968" translate="yes" xml:space="preserve">
          <source>Adds to the buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;) a string of length &lt;code&gt;n&lt;/code&gt; previously copied to the buffer area (see &lt;a href=&quot;#luaL_prepbuffer&quot;&gt;&lt;code&gt;luaL_prepbuffer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">バッファー &lt;code&gt;B&lt;/code&gt; （&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）に、以前にバッファー領域にコピーされた長さ &lt;code&gt;n&lt;/code&gt; の文字列を追加します（&lt;a href=&quot;#luaL_prepbuffer&quot;&gt; &lt;code&gt;luaL_prepbuffer&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a9bf8213e7ff3700b5b856d615911be85fad5679" translate="yes" xml:space="preserve">
          <source>After handling its options, &lt;code&gt;lua&lt;/code&gt; runs the given &lt;em&gt;script&lt;/em&gt;. When called without arguments, &lt;code&gt;lua&lt;/code&gt; behaves as &lt;code&gt;lua -v -i&lt;/code&gt; when the standard input (&lt;code&gt;stdin&lt;/code&gt;) is a terminal, and as &lt;code&gt;lua -&lt;/code&gt; otherwise.</source>
          <target state="translated">オプションを処理した後、 &lt;code&gt;lua&lt;/code&gt; は指定された&lt;em&gt;スクリプトを&lt;/em&gt;実行し&lt;em&gt;ます&lt;/em&gt;。引数なしで呼び出された場合、 &lt;code&gt;lua&lt;/code&gt; は標準入力（ &lt;code&gt;stdin&lt;/code&gt; ）が端末の場合は &lt;code&gt;lua -v -i&lt;/code&gt; として動作し、それ以外の場合は &lt;code&gt;lua -&lt;/code&gt; として動作します。</target>
        </trans-unit>
        <trans-unit id="15063350c6a79260afaac68065c69671ef9eeded" translate="yes" xml:space="preserve">
          <source>Alignment works as follows: For each option, the format gets extra padding until the data starts at an offset that is a multiple of the minimum between the option size and the maximum alignment; this minimum must be a power of 2. Options &quot;&lt;code&gt;c&lt;/code&gt;&quot; and &quot;&lt;code&gt;z&lt;/code&gt;&quot; are not aligned; option &quot;&lt;code&gt;s&lt;/code&gt;&quot; follows the alignment of its starting integer.</source>
          <target state="translated">アラインメントは次のように機能します。オプションは、オプションサイズと最大アラインメント間の最小値の倍数であるオフセットでデータが始まるまで、オプションごとに追加のパディングを取得します。この最小値は2の累乗でなければなりません。オプション &quot; &lt;code&gt;c&lt;/code&gt; &quot;と &quot; &lt;code&gt;z&lt;/code&gt; &quot;は整列していません。オプション &quot; &lt;code&gt;s&lt;/code&gt; &quot;は、開始整数の配置に従います。</target>
        </trans-unit>
        <trans-unit id="3f5b4e7445d1ae596693345d80aebb59b269536b" translate="yes" xml:space="preserve">
          <source>All argument expressions are evaluated before the call. A call of the form &lt;code&gt;f{&lt;em&gt;fields&lt;/em&gt;}&lt;/code&gt; is syntactic sugar for &lt;code&gt;f({&lt;em&gt;fields&lt;/em&gt;})&lt;/code&gt;; that is, the argument list is a single new table. A call of the form &lt;code&gt;f'&lt;em&gt;string&lt;/em&gt;'&lt;/code&gt; (or &lt;code&gt;f&quot;&lt;em&gt;string&lt;/em&gt;&quot;&lt;/code&gt; or &lt;code&gt;f[[&lt;em&gt;string&lt;/em&gt;]]&lt;/code&gt;) is syntactic sugar for &lt;code&gt;f('&lt;em&gt;string&lt;/em&gt;')&lt;/code&gt;; that is, the argument list is a single literal string.</source>
          <target state="translated">すべての引数式は、呼び出しの前に評価されます。 &lt;code&gt;f{&lt;em&gt;fields&lt;/em&gt;}&lt;/code&gt; という形式の呼び出しは、 &lt;code&gt;f({&lt;em&gt;fields&lt;/em&gt;})&lt;/code&gt; 構文糖衣です。つまり、引数リストは単一の新しいテーブルです。 &lt;code&gt;f'&lt;em&gt;string&lt;/em&gt;'&lt;/code&gt; （または &lt;code&gt;f&quot;&lt;em&gt;string&lt;/em&gt;&quot;&lt;/code&gt; または &lt;code&gt;f[[&lt;em&gt;string&lt;/em&gt;]]&lt;/code&gt; ）の形式の呼び出しは、 &lt;code&gt;f('&lt;em&gt;string&lt;/em&gt;')&lt;/code&gt; 構文糖衣です。つまり、引数リストは単一のリテラル文字列です。</target>
        </trans-unit>
        <trans-unit id="acc9b360c0f165382f26927b4e5133003a413b44" translate="yes" xml:space="preserve">
          <source>All bitwise operations convert its operands to integers (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;), operate on all bits of those integers, and result in an integer.</source>
          <target state="translated">すべてのビット演算は、オペランドを整数に変換し（&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3を&lt;/a&gt;参照）、それらの整数のすべてのビットを操作し、結果として整数になります。</target>
        </trans-unit>
        <trans-unit id="f305da96ae003ba3953ef2d24d1bf9f7d1a7db44" translate="yes" xml:space="preserve">
          <source>All conversions from strings to numbers accept both a dot and the current locale mark as the radix character. (The Lua lexer, however, accepts only a dot.)</source>
          <target state="translated">文字列から数値への変換では、基底文字としてドットと現在のロケールマークの両方が使用できます (Lua lexer ではドットのみが使用できます)。(ただし、Lua レキサーではドットのみを受け付けます)。</target>
        </trans-unit>
        <trans-unit id="e8fc76868f788278527229cf8ae331ac5e9af057" translate="yes" xml:space="preserve">
          <source>All functions and types from the auxiliary library are defined in header file &lt;code&gt;lauxlib.h&lt;/code&gt; and have a prefix &lt;code&gt;luaL_&lt;/code&gt;.</source>
          <target state="translated">補助ライブラリのすべての関数と型は、ヘッダーファイル &lt;code&gt;lauxlib.h&lt;/code&gt; で定義され、接頭辞 &lt;code&gt;luaL_&lt;/code&gt; が付いています。</target>
        </trans-unit>
        <trans-unit id="5b5a80d9354e5e4fed6af6805ce75ff37321a509" translate="yes" xml:space="preserve">
          <source>All functions in the auxiliary library are built on top of the basic API, and so they provide nothing that cannot be done with that API. Nevertheless, the use of the auxiliary library ensures more consistency to your code.</source>
          <target state="translated">補助ライブラリのすべての関数は基本APIの上に構築されているので、そのAPIでできないことは何も提供しません。それにもかかわらず、補助ライブラリを使用することで、あなたのコードの一貫性をより確実なものにします。</target>
        </trans-unit>
        <trans-unit id="f6848b784c95c8339b84a72671e794bafd5c29ba" translate="yes" xml:space="preserve">
          <source>All functions in this library are provided inside the &lt;a id=&quot;pdf-debug&quot;&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt; table. All functions that operate over a thread have an optional first argument which is the thread to operate over. The default is always the current thread.</source>
          <target state="translated">このライブラリのすべての関数は、&lt;a id=&quot;pdf-debug&quot;&gt; &lt;code&gt;debug&lt;/code&gt; &lt;/a&gt;テーブル内で提供されます。スレッドを操作するすべての関数には、オプションの最初の引数があります。これは、操作するスレッドです。デフォルトは常に現在のスレッドです。</target>
        </trans-unit>
        <trans-unit id="8b98fc2da2d38e4cd78c4bb220a6cf5b66fcdbf5" translate="yes" xml:space="preserve">
          <source>All libraries are implemented through the official C API and are provided as separate C modules. Currently, Lua has the following standard libraries:</source>
          <target state="translated">すべてのライブラリは公式C APIを介して実装されており、個別のCモジュールとして提供されています。現在、Luaには以下の標準ライブラリがあります。</target>
        </trans-unit>
        <trans-unit id="10be42d50eaafb61e391ebcac5db4409c7956116" translate="yes" xml:space="preserve">
          <source>All options are handled in order, except &lt;code&gt;-i&lt;/code&gt; and &lt;code&gt;-E&lt;/code&gt;. For instance, an invocation like</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; と &lt;code&gt;-E&lt;/code&gt; を除くすべてのオプションは順番に処理されます。たとえば、次のような呼び出し</target>
        </trans-unit>
        <trans-unit id="1b7b7722940601955048fe77c6f31cf2d41c7761" translate="yes" xml:space="preserve">
          <source>All padding is filled with zeros by &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt; (and ignored by &lt;a href=&quot;#pdf-string.unpack&quot;&gt;&lt;code&gt;string.unpack&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">すべてのパディングは、&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; &lt;/a&gt;によってゼロで埋められます（&lt;a href=&quot;#pdf-string.unpack&quot;&gt; &lt;code&gt;string.unpack&lt;/code&gt; &lt;/a&gt;では無視されます）。</target>
        </trans-unit>
        <trans-unit id="c35badbdc9570c80976734173cdf4107df29b353" translate="yes" xml:space="preserve">
          <source>All searchers except the first one (preload) return as the extra value the file name where the module was found, as returned by &lt;a href=&quot;#pdf-package.searchpath&quot;&gt;&lt;code&gt;package.searchpath&lt;/code&gt;&lt;/a&gt;. The first searcher returns no extra value.</source>
          <target state="translated">最初のサーチャー（プリロード）を除くすべてのサーチャーは、&lt;a href=&quot;#pdf-package.searchpath&quot;&gt; &lt;code&gt;package.searchpath&lt;/code&gt; &lt;/a&gt;によって返されるように、モジュールが見つかったファイル名を追加の値として返します。最初のサーチャーは追加の値を返しません。</target>
        </trans-unit>
        <trans-unit id="99fdaa228f269a7cd440d59ce3942091cbc2215f" translate="yes" xml:space="preserve">
          <source>All three control expressions are evaluated only once, before the loop starts. They must all result in numbers.</source>
          <target state="translated">3つの制御式はすべて、ループが始まる前に一度だけ評価されます。これらはすべて数値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="08a75b1f27277905293829400b5db953b7bb2d39" translate="yes" xml:space="preserve">
          <source>All values in Lua are &lt;em&gt;first-class values&lt;/em&gt;. This means that all values can be stored in variables, passed as arguments to other functions, and returned as results.</source>
          <target state="translated">Luaのすべての値は&lt;em&gt;ファーストクラスの値&lt;/em&gt;です。つまり、すべての値を変数に格納し、引数として他の関数に渡し、結果として返すことができます。</target>
        </trans-unit>
        <trans-unit id="2bd0e37afd18d9af3189d6b1b6cc7f9956125931" translate="yes" xml:space="preserve">
          <source>Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. &lt;code&gt;next&lt;/code&gt; returns the next index of the table and its associated value. When called with &lt;b&gt;nil&lt;/b&gt; as its second argument, &lt;code&gt;next&lt;/code&gt; returns an initial index and its associated value. When called with the last index, or with &lt;b&gt;nil&lt;/b&gt; in an empty table, &lt;code&gt;next&lt;/code&gt; returns &lt;b&gt;nil&lt;/b&gt;. If the second argument is absent, then it is interpreted as &lt;b&gt;nil&lt;/b&gt;. In particular, you can use &lt;code&gt;next(t)&lt;/code&gt; to check whether a table is empty.</source>
          <target state="translated">プログラムがテーブルのすべてのフィールドをトラバースできるようにします。最初の引数はテーブルで、2番目の引数はこのテーブルのインデックスです。 &lt;code&gt;next&lt;/code&gt; は、テーブルの次のインデックスとそれに関連する値を返します。2番目の引数として&lt;b&gt;nil&lt;/b&gt;を指定して呼び出されると、 &lt;code&gt;next&lt;/code&gt; は初期インデックスとそれに関連付けられた値を返します。最後のインデックスで、または空のテーブルの&lt;b&gt;nil&lt;/b&gt;で呼び出された場合、 &lt;code&gt;next&lt;/code&gt; は&lt;b&gt;nilを&lt;/b&gt;返します。2番目の引数がない場合、&lt;b&gt;nil&lt;/b&gt;と解釈されます。特に、 &lt;code&gt;next(t)&lt;/code&gt; を使用して、テーブルが空かどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="1e2a17f106d80620dc6b184a036cc43c0d0d20e9" translate="yes" xml:space="preserve">
          <source>Also as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;, this function only loads the chunk; it does not run it.</source>
          <target state="translated">また、この関数は&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;と同様に、チャンクのみをロードします。実行しません。</target>
        </trans-unit>
        <trans-unit id="333012935d43c77111be49619f3626aed605f1f6" translate="yes" xml:space="preserve">
          <source>Although Lua has been designed as an extension language, to be embedded in a host C program, it is also frequently used as a standalone language. An interpreter for Lua as a standalone language, called simply &lt;code&gt;lua&lt;/code&gt;, is provided with the standard distribution. The standalone interpreter includes all standard libraries, including the debug library. Its usage is:</source>
          <target state="translated">Luaは拡張言語として設計されていますが、ホストCプログラムに組み込むために、スタンドアロン言語としても頻繁に使用されます。単に &lt;code&gt;lua&lt;/code&gt; と呼ばれるスタンドアロン言語としてのLuaのインタープリターは、標準ディストリビューションに付属しています。スタンドアロンインタープリターには、デバッグライブラリを含むすべての標準ライブラリが含まれています。その使用法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f591bdff24ecb3f0d81234f57e546b0357fc181a" translate="yes" xml:space="preserve">
          <source>An access to a global variable &lt;code&gt;x&lt;/code&gt; is equivalent to &lt;code&gt;_ENV.x&lt;/code&gt;. Due to the way that chunks are compiled, &lt;code&gt;_ENV&lt;/code&gt; is never a global name (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;).</source>
          <target state="translated">グローバル変数 &lt;code&gt;x&lt;/code&gt; へのアクセスは &lt;code&gt;_ENV.x&lt;/code&gt; と同等です。チャンクのコンパイル方法により、 &lt;code&gt;_ENV&lt;/code&gt; がグローバル名になることはありません（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3489bcbcdb764986900a0e61314738b50570455a" translate="yes" xml:space="preserve">
          <source>An assignment to a global name &lt;code&gt;x = val&lt;/code&gt; is equivalent to the assignment &lt;code&gt;_ENV.x = val&lt;/code&gt; (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;).</source>
          <target state="translated">グローバル名 &lt;code&gt;x = val&lt;/code&gt; への割り当ては、割り当て &lt;code&gt;_ENV.x = val&lt;/code&gt; と同等です（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="faeac64cb85287d304252a69d85edf0374894817" translate="yes" xml:space="preserve">
          <source>An integer with the maximum value for an integer.</source>
          <target state="translated">整数の最大値を持つ整数。</target>
        </trans-unit>
        <trans-unit id="7043af6943c0de40fedd4cee1164e62e2ee3cd11" translate="yes" xml:space="preserve">
          <source>An integer with the minimum value for an integer.</source>
          <target state="translated">整数の最小値を持つ整数。</target>
        </trans-unit>
        <trans-unit id="29302dcac6eba15dcddc4542a902b42251fa77ed" translate="yes" xml:space="preserve">
          <source>An opaque structure that points to a thread and indirectly (through the thread) to the whole state of a Lua interpreter. The Lua library is fully reentrant: it has no global variables. All information about a state is accessible through this structure.</source>
          <target state="translated">スレッドを指す不透明な構造体で、スレッドを介して間接的に(スレッドを介して)Luaインタプリタの状態全体を指し示します。Lua ライブラリは完全にリエントラント型で、グローバル変数を持ちません。状態に関するすべての情報は、この構造体からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3b2afdee2bff80f7fa27a65f139ce4ca79afecee" translate="yes" xml:space="preserve">
          <source>Any byte in a literal string not explicitly affected by the previous rules represents itself. However, Lua opens files for parsing in text mode, and the system file functions may have problems with some control characters. So, it is safer to represent non-text data as a quoted literal with explicit escape sequences for the non-text characters.</source>
          <target state="translated">前のルールの影響を明示的に受けないリテラル文字列内のバイトは、それ自体を表します。しかし、Luaはテキストモードでファイルを開いて解析を行いますが、システムファイル関数では制御文字の中に問題がある場合があります。そのため、テキスト以外のデータは引用符で囲まれたリテラルで表現し、テキスト以外の文字には明示的にエスケープシーケンスを付けて表現する方が安全です。</target>
        </trans-unit>
        <trans-unit id="0060ede52bc0952daad17758c1e09ebce620eaf5" translate="yes" xml:space="preserve">
          <source>Any change in the weakness of a table may take effect only at the next collect cycle. In particular, if you change the weakness to a stronger mode, Lua may still collect some items from that table before the change takes effect.</source>
          <target state="translated">テーブルの弱点を変更した場合、次の収集サイクルでのみ有効になる場合があります。特に、弱点をより強力なモードに変更した場合、変更が有効になる前でも、Luaはそのテーブルからアイテムを収集することがあります。</target>
        </trans-unit>
        <trans-unit id="3f738315de077ed686d71d19c5f4cc3874696c9c" translate="yes" xml:space="preserve">
          <source>Any error inside the called function is propagated upwards (with a &lt;code&gt;longjmp&lt;/code&gt;).</source>
          <target state="translated">呼び出された関数内のエラーはすべて、（ &lt;code&gt;longjmp&lt;/code&gt; を使用して）上に伝搬されます。</target>
        </trans-unit>
        <trans-unit id="7b037f464e01b904a69f5673d5e1aeced352fda1" translate="yes" xml:space="preserve">
          <source>Any expression enclosed in parentheses always results in only one value. Thus, &lt;code&gt;(f(x,y,z))&lt;/code&gt; is always a single value, even if &lt;code&gt;f&lt;/code&gt; returns several values. (The value of &lt;code&gt;(f(x,y,z))&lt;/code&gt; is the first value returned by &lt;code&gt;f&lt;/code&gt; or &lt;b&gt;nil&lt;/b&gt; if &lt;code&gt;f&lt;/code&gt; does not return any values.)</source>
          <target state="translated">括弧で囲まれた式は、常に1つの値になります。したがって、 &lt;code&gt;f&lt;/code&gt; が複数の値を返す場合でも、 &lt;code&gt;(f(x,y,z))&lt;/code&gt; は常に単一の値です。（の値が &lt;code&gt;(f(x,y,z))&lt;/code&gt; によって返される最初の値であり、 &lt;code&gt;f&lt;/code&gt; 又は&lt;b&gt;ゼロ&lt;/b&gt;ならば &lt;code&gt;f&lt;/code&gt; 任意の値を返しません。）&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7a4d95ffedc5bbaa1adc38079189908a5033db52" translate="yes" xml:space="preserve">
          <source>Any format string starts as if prefixed by &quot;&lt;code&gt;!1=&lt;/code&gt;&quot;, that is, with maximum alignment of 1 (no alignment) and native endianness.</source>
          <target state="translated">すべてのフォーマット文字列は、「 &lt;code&gt;!1=&lt;/code&gt; 」が前に付いているかのように開始します。つまり、最大アライメントは1（アライメントなし）であり、ネイティブエンディアンです。</target>
        </trans-unit>
        <trans-unit id="646e2060904f262b44a42847531c18e9dbcd493e" translate="yes" xml:space="preserve">
          <source>Any function in the API that receives stack indices works only with &lt;em&gt;valid indices&lt;/em&gt; or &lt;em&gt;acceptable indices&lt;/em&gt;.</source>
          <target state="translated">スタックインデックスを受け取るAPIの関数は、&lt;em&gt;有効なインデックス&lt;/em&gt;または&lt;em&gt;受け入れ可能&lt;/em&gt;&lt;em&gt;なインデックスで&lt;/em&gt;のみ機能し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1687626599a587d25400fc4ce2fc6e934da6f356" translate="yes" xml:space="preserve">
          <source>Any function to be callable by Lua must follow the correct protocol to receive its parameters and return its results (see &lt;a href=&quot;#lua_CFunction&quot;&gt;&lt;code&gt;lua_CFunction&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Luaから&lt;a href=&quot;#lua_CFunction&quot;&gt; &lt;code&gt;lua_CFunction&lt;/code&gt; &lt;/a&gt;関数は、正しいプロトコルに従ってパラメータを受け取り、その結果を返す必要があります（lua_CFunctionを参照）。</target>
        </trans-unit>
        <trans-unit id="185d7a33eb3655abd764787ebf509971ea6392f6" translate="yes" xml:space="preserve">
          <source>Any table used as the value of &lt;code&gt;_ENV&lt;/code&gt; is called an &lt;em&gt;environment&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;_ENV&lt;/code&gt; の値として使用されるテーブルは、&lt;em&gt;環境&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c0c786e87f6aa7c682c7c682888f5d96ee64056b" translate="yes" xml:space="preserve">
          <source>Any variable name is assumed to be global unless explicitly declared as a local (see &lt;a href=&quot;#3.3.7&quot;&gt;&amp;sect;3.3.7&lt;/a&gt;). Local variables are &lt;em&gt;lexically scoped&lt;/em&gt;: local variables can be freely accessed by functions defined inside their scope (see &lt;a href=&quot;#3.5&quot;&gt;&amp;sect;3.5&lt;/a&gt;).</source>
          <target state="translated">変数名は、明示的にローカルとして宣言されていない限り、グローバルであると見なされます（&lt;a href=&quot;#3.3.7&quot;&gt;&amp;sect;3.3.7を&lt;/a&gt;参照）。ローカル変数の&lt;em&gt;スコープ&lt;/em&gt;は&lt;a href=&quot;#3.5&quot;&gt;レキシカル&lt;/a&gt;です。ローカル変数は、スコープ内で定義された関数によって自由にアクセスできます（&amp;sect;3.5を参照）。</target>
        </trans-unit>
        <trans-unit id="a78246fd7dee1462777916bec1d99382a25c060e" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;f&lt;/code&gt; is the hook function. &lt;code&gt;mask&lt;/code&gt; specifies on which events the hook will be called: it is formed by a bitwise OR of the constants &lt;a id=&quot;pdf-LUA_MASKCALL&quot;&gt;&lt;code&gt;LUA_MASKCALL&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_MASKRET&quot;&gt;&lt;code&gt;LUA_MASKRET&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_MASKLINE&quot;&gt;&lt;code&gt;LUA_MASKLINE&lt;/code&gt;&lt;/a&gt;, and &lt;a id=&quot;pdf-LUA_MASKCOUNT&quot;&gt;&lt;code&gt;LUA_MASKCOUNT&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;count&lt;/code&gt; argument is only meaningful when the mask includes &lt;code&gt;LUA_MASKCOUNT&lt;/code&gt;. For each event, the hook is called as explained below:</source>
          <target state="translated">引数 &lt;code&gt;f&lt;/code&gt; はフック関数です。 &lt;code&gt;mask&lt;/code&gt; は、フックが呼び出されるイベントを指定します。これは、定数&lt;a id=&quot;pdf-LUA_MASKCALL&quot;&gt; &lt;code&gt;LUA_MASKCALL&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_MASKRET&quot;&gt; &lt;code&gt;LUA_MASKRET&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_MASKLINE&quot;&gt; &lt;code&gt;LUA_MASKLINE&lt;/code&gt; &lt;/a&gt;、および&lt;a id=&quot;pdf-LUA_MASKCOUNT&quot;&gt; &lt;code&gt;LUA_MASKCOUNT&lt;/code&gt; の&lt;/a&gt;ビット単位のORによって形成されます。 &lt;code&gt;count&lt;/code&gt; 引数は、マスクが含まれている場合にのみ意味があり &lt;code&gt;LUA_MASKCOUNT&lt;/code&gt; を。イベントごとに、以下で説明するようにフックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fef66cc0524e2056cb5b4bfefd4a25591b35ea85" translate="yes" xml:space="preserve">
          <source>Arguments have the following syntax:</source>
          <target state="translated">引数には以下の構文があります。</target>
        </trans-unit>
        <trans-unit id="6104f39ed22a2cd32e98536a3447a01c4b9f4781" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
          <target state="translated">算術演算子</target>
        </trans-unit>
        <trans-unit id="9c834ef6f4ffe0319762efe06a63f2041cc46cbe" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;, this function only loads the chunk; it does not run it.</source>
          <target state="translated">&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;と同様に、この関数はチャンクのみをロードします。実行しません。</target>
        </trans-unit>
        <trans-unit id="88fec743575b609e2abb343864ded003e7d1df35" translate="yes" xml:space="preserve">
          <source>As a special case, the empty capture &lt;code&gt;()&lt;/code&gt; captures the current string position (a number). For instance, if we apply the pattern &lt;code&gt;&quot;()aa()&quot;&lt;/code&gt; on the string &lt;code&gt;&quot;flaaap&quot;&lt;/code&gt;, there will be two captures: 3 and 5.</source>
          <target state="translated">特殊なケースとして、空のキャプチャ &lt;code&gt;()&lt;/code&gt; は現在の文字列の位置（数値）をキャプチャします。たとえば、文字列 &lt;code&gt;&quot;flaaap&quot;&lt;/code&gt; にパターン &lt;code&gt;&quot;()aa()&quot;&lt;/code&gt; を適用すると、3と5の2つのキャプチャが存在します。</target>
        </trans-unit>
        <trans-unit id="608b10320a24077d4060bee1b1e8e54c6bf52c0d" translate="yes" xml:space="preserve">
          <source>As a special case, when &lt;code&gt;n&lt;/code&gt; is 0 the function returns the start of the encoding of the character that contains the &lt;code&gt;i&lt;/code&gt;-th byte of &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">特殊なケースとして、 &lt;code&gt;n&lt;/code&gt; が0の場合、関数は &lt;code&gt;s&lt;/code&gt; の &lt;code&gt;i&lt;/code&gt; 番目のバイトを含む文字のエンコードの開始を返します。</target>
        </trans-unit>
        <trans-unit id="43f16f56abca8a29fd824d5c58c8606029f22356" translate="yes" xml:space="preserve">
          <source>As an example of how coroutines work, consider the following code:</source>
          <target state="translated">コアーチンがどのように動作するかの例として、次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="55fd3c324f7088b1e4e4ef9627852502a3224e79" translate="yes" xml:space="preserve">
          <source>As an example, consider the following definitions:</source>
          <target state="translated">例として、以下の定義を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="74222d71219a9516ef23c72ea9fe93b833f10fca" translate="yes" xml:space="preserve">
          <source>As an example, the following function receives a variable number of numeric arguments and returns their average and their sum:</source>
          <target state="translated">例として、以下の関数は可変数の数値引数を受け取り、その平均値と合計値を返します。</target>
        </trans-unit>
        <trans-unit id="e53c537a917ff61bdeaf745cd25b581253b587b4" translate="yes" xml:space="preserve">
          <source>As an example, the following loop will iterate over all the words from string &lt;code&gt;s&lt;/code&gt;, printing one per line:</source>
          <target state="translated">例として、次のループは文字列 &lt;code&gt;s&lt;/code&gt; からのすべての単語を反復し、1行に1つずつ出力します。</target>
        </trans-unit>
        <trans-unit id="10342e6eb6b2fd67fdff1919f85d366e227d7fc9" translate="yes" xml:space="preserve">
          <source>As an extension language, Lua has no notion of a &quot;main&quot; program: it works &lt;em&gt;embedded&lt;/em&gt; in a host client, called the &lt;em&gt;embedding program&lt;/em&gt; or simply the &lt;em&gt;host&lt;/em&gt;. (Frequently, this host is the stand-alone &lt;code&gt;lua&lt;/code&gt; program.) The host program can invoke functions to execute a piece of Lua code, can write and read Lua variables, and can register C functions to be called by Lua code. Through the use of C functions, Lua can be augmented to cope with a wide range of different domains, thus creating customized programming languages sharing a syntactical framework.</source>
          <target state="translated">Luaには拡張言語として「メイン」プログラムという概念はありません。それは、&lt;em&gt;埋め込みプログラム&lt;/em&gt;または単に&lt;em&gt;ホスト&lt;/em&gt;と呼ばれるホストクライアントに&lt;em&gt;埋め込ま&lt;/em&gt;れて動作し&lt;em&gt;ます&lt;/em&gt;。 （多くの場合、このホストはスタンドアロンの &lt;code&gt;lua&lt;/code&gt; プログラムです。）ホストプログラムは、Luaコードの一部を実行する関数を呼び出し、Lua変数を読み書きし、Luaコードによって呼び出されるC関数を登録できます。 C関数を使用することで、Luaを拡張してさまざまなドメインに対応できるため、構文フレームワークを共有するカスタマイズされたプログラミング言語を作成できます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="18e8b25f2432d6d4994bc8412127c9c6a9fd835a" translate="yes" xml:space="preserve">
          <source>As an illustration, consider the following function:</source>
          <target state="translated">例として、次の関数を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f3e9897f2d1040dc7274b7624604db4d8b6ac14f" translate="yes" xml:space="preserve">
          <source>As in most C libraries, the Lua API functions do not check their arguments for validity or consistency. However, you can change this behavior by compiling Lua with the macro &lt;a id=&quot;pdf-LUA_USE_APICHECK&quot;&gt;&lt;code&gt;LUA_USE_APICHECK&lt;/code&gt;&lt;/a&gt; defined.</source>
          <target state="translated">ほとんどのCライブラリと同様に、Lua API関数は引数の有効性や一貫性をチェックしません。ただし、マクロ&lt;a id=&quot;pdf-LUA_USE_APICHECK&quot;&gt; &lt;code&gt;LUA_USE_APICHECK&lt;/code&gt; を&lt;/a&gt;定義してLuaをコンパイルすることにより、この動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="24c57582c72da098884fa076ca9862645c6e1334" translate="yes" xml:space="preserve">
          <source>As usual, you can use parentheses to change the precedences of an expression. The concatenation ('&lt;code&gt;..&lt;/code&gt;') and exponentiation ('&lt;code&gt;^&lt;/code&gt;') operators are right associative. All other binary operators are left associative.</source>
          <target state="translated">通常のように、括弧を使用して式の優先順位を変更できます。連結（ ' &lt;code&gt;..&lt;/code&gt; '）および指数（ ' &lt;code&gt;^&lt;/code&gt; '）演算子は右結合です。他のすべての二項演算子は、結合性のままです。</target>
        </trans-unit>
        <trans-unit id="90c78100181d409a60710e1b3cf4f61c8d6e6ff7" translate="yes" xml:space="preserve">
          <source>As will be discussed in &lt;a href=&quot;#3.2&quot;&gt;&amp;sect;3.2&lt;/a&gt; and &lt;a href=&quot;#3.3.3&quot;&gt;&amp;sect;3.3.3&lt;/a&gt;, any reference to a free name (that is, a name not bound to any declaration) &lt;code&gt;var&lt;/code&gt; is syntactically translated to &lt;code&gt;_ENV.var&lt;/code&gt;. Moreover, every chunk is compiled in the scope of an external local variable named &lt;code&gt;_ENV&lt;/code&gt; (see &lt;a href=&quot;#3.3.2&quot;&gt;&amp;sect;3.3.2&lt;/a&gt;), so &lt;code&gt;_ENV&lt;/code&gt; itself is never a free name in a chunk.</source>
          <target state="translated">&lt;a href=&quot;#3.2&quot;&gt;&amp;sect;3.2&lt;/a&gt;および&lt;a href=&quot;#3.3.3&quot;&gt;&amp;sect;3.3.3&lt;/a&gt;で説明するように、フリー名（つまり、どの宣言にもバインドされていない名前） &lt;code&gt;var&lt;/code&gt; への &lt;code&gt;_ENV.var&lt;/code&gt; は、構文的に_ENV.varに変換されます。さらに、すべてのチャンクは &lt;code&gt;_ENV&lt;/code&gt; （&lt;a href=&quot;#3.3.2&quot;&gt;&amp;sect;3.3.2を&lt;/a&gt;参照）という名前の外部ローカル変数のスコープでコンパイルされるため、 &lt;code&gt;_ENV&lt;/code&gt; 自体がチャンク内のフリー名になることはありません。</target>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="translated">Assignment</target>
        </trans-unit>
        <trans-unit id="3b37b5372cc754e07c5399ff64d83d0917ca19d3" translate="yes" xml:space="preserve">
          <source>At start-up, Lua initializes this variable with the value of the environment variable &lt;a id=&quot;pdf-LUA_PATH_5_3&quot;&gt;&lt;code&gt;LUA_PATH_5_3&lt;/code&gt;&lt;/a&gt; or the environment variable &lt;a id=&quot;pdf-LUA_PATH&quot;&gt;&lt;code&gt;LUA_PATH&lt;/code&gt;&lt;/a&gt; or with a default path defined in &lt;code&gt;luaconf.h&lt;/code&gt;, if those environment variables are not defined. Any &quot;&lt;code&gt;;;&lt;/code&gt;&quot; in the value of the environment variable is replaced by the default path.</source>
          <target state="translated">起動時に、Luaは環境変数の値で、この変数を初期化&lt;a id=&quot;pdf-LUA_PATH_5_3&quot;&gt; &lt;code&gt;LUA_PATH_5_3&lt;/code&gt; &lt;/a&gt;または環境変数&lt;a id=&quot;pdf-LUA_PATH&quot;&gt; &lt;code&gt;LUA_PATH&lt;/code&gt; &lt;/a&gt;かで定義されたデフォルトのパスで &lt;code&gt;luaconf.h&lt;/code&gt; これらの環境変数が定義されていない場合は、。環境変数の値に含まれる「 &lt;code&gt;;;&lt;/code&gt; 」は、デフォルトのパスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="1c846064774d3fc9a0c20918821eeca9ef19288b" translate="yes" xml:space="preserve">
          <source>At the end of each garbage-collection cycle, the finalizers for objects are called in the reverse order that the objects were marked for finalization, among those collected in that cycle; that is, the first finalizer to be called is the one associated with the object marked last in the program. The execution of each finalizer may occur at any point during the execution of the regular code.</source>
          <target state="translated">各ゴミ収集サイクルの終了時に、オブジェクトのファイナライザは、そのサイクルで収集されたオブジェクトの中で、最終化のためにマークされたオブジェクトとは逆の順序で呼び出されます。各ファイナライザの実行は、通常のコードの実行中の任意の時点で発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7b97861ba9e02b6857fb91f3d5b2a8013e6bffda" translate="yes" xml:space="preserve">
          <source>Auxiliary Library</source>
          <target state="translated">附属図書館</target>
        </trans-unit>
        <trans-unit id="5eab8fc3ffa32aa796174a77104a420884806a36" translate="yes" xml:space="preserve">
          <source>Basic Concepts</source>
          <target state="translated">基本概念</target>
        </trans-unit>
        <trans-unit id="8f4cb4f0510bd523b95aae50ed7278eb36070fa4" translate="yes" xml:space="preserve">
          <source>Because Lua has garbage collection, there is no guarantee that the pointer returned by &lt;code&gt;lua_tolstring&lt;/code&gt; will be valid after the corresponding Lua value is removed from the stack.</source>
          <target state="translated">Luaにはガベージコレクションがあるため、対応するLua値がスタックから削除された後、 &lt;code&gt;lua_tolstring&lt;/code&gt; によって返されたポインターが有効になる保証はありません。</target>
        </trans-unit>
        <trans-unit id="4e550731f0f7f512357918c5d533714fe0133257" translate="yes" xml:space="preserve">
          <source>Because Lua is an embedded extension language, all Lua actions start from C code in the host program calling a function from the Lua library. (When you use Lua standalone, the &lt;code&gt;lua&lt;/code&gt; application is the host program.) Whenever an error occurs during the compilation or execution of a Lua chunk, control returns to the host, which can take appropriate measures (such as printing an error message).</source>
          <target state="translated">Luaは組み込み拡張言語であるため、すべてのLuaアクションは、Luaライブラリの関数を呼び出すホストプログラムのCコードから始まります。（スタンドアロンのLuaを使用する場合、 &lt;code&gt;lua&lt;/code&gt; アプリケーションはホストプログラムです。）Luaチャンクのコンパイルまたは実行中にエラーが発生すると、制御がホストに戻り、適切な対策（エラーメッセージの出力など）を実行できます。</target>
        </trans-unit>
        <trans-unit id="0fad2c0ffc739d9f59d3ff44590e127f2bd7b785" translate="yes" xml:space="preserve">
          <source>Because metatables are regular tables, they can contain arbitrary fields, not only the event names defined above. Some functions in the standard library (e.g., &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt;) use other fields in metatables for their own purposes.</source>
          <target state="translated">メタテーブルは通常のテーブルであるため、上記で定義したイベント名だけでなく、任意のフィールドを含めることができます。標準ライブラリの一部の機能（例えば、&lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; &lt;/a&gt;）独自の目的のためにメタテーブルの他のフィールドを使用します。</target>
        </trans-unit>
        <trans-unit id="ceef25556ecac12093ede647b1814c0461f552fa" translate="yes" xml:space="preserve">
          <source>Because of the lexical scoping rules, local variables can be freely accessed by functions defined inside their scope. A local variable used by an inner function is called an &lt;em&gt;upvalue&lt;/em&gt;, or &lt;em&gt;external local variable&lt;/em&gt;, inside the inner function.</source>
          <target state="translated">字句スコープ規則のため、ローカル変数はスコープ内で定義された関数から自由にアクセスできます。内部関数で使用されるローカル変数は、内部関数内で&lt;em&gt;アップバリュー&lt;/em&gt;または&lt;em&gt;外部ローカル変数&lt;/em&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="100abb5c579b396b2c34374efb4ff5f9d32a765e" translate="yes" xml:space="preserve">
          <source>Because the object being collected must still be used by the finalizer, that object (and other objects accessible only through it) must be &lt;em&gt;resurrected&lt;/em&gt; by Lua. Usually, this resurrection is transient, and the object memory is freed in the next garbage-collection cycle. However, if the finalizer stores the object in some global place (e.g., a global variable), then the resurrection is permanent. Moreover, if the finalizer marks a finalizing object for finalization again, its finalizer will be called again in the next cycle where the object is unreachable. In any case, the object memory is freed only in a GC cycle where the object is unreachable and not marked for finalization.</source>
          <target state="translated">収集されるオブジェクトはファイナライザによって引き続き使用される必要があるため、そのオブジェクト（およびそれを通じてのみアクセス可能な他のオブジェクト）はLuaによって&lt;em&gt;復活&lt;/em&gt;さ&lt;em&gt;せる&lt;/em&gt;必要があります。通常、この復活は一時的なものであり、オブジェクトメモリは次のガベージコレクションサイクルで解放されます。ただし、ファイナライザがオブジェクトをグローバルな場所（グローバル変数など）に格納する場合、復活は永続的です。さらに、ファイナライザがファイナライズするオブジェクトを再度ファイナライズするようにマークすると、そのファイナライザは、オブジェクトに到達できない次のサイクルで再び呼び出されます。いずれの場合でも、オブジェクトメモリは、オブジェクトに到達できず、ファイナライズ対象としてマークされていないGCサイクルでのみ解放されます。</target>
        </trans-unit>
        <trans-unit id="6d5b47e3e1cfd97e4c1094c7771191d76ffbf4e8" translate="yes" xml:space="preserve">
          <source>Before running any code, &lt;code&gt;lua&lt;/code&gt; collects all command-line arguments in a global table called &lt;code&gt;arg&lt;/code&gt;. The script name goes to index 0, the first argument after the script name goes to index 1, and so on. Any arguments before the script name (that is, the interpreter name plus its options) go to negative indices. For instance, in the call</source>
          <target state="translated">コードを実行する前に、 &lt;code&gt;lua&lt;/code&gt; はすべてのコマンドライン引数を &lt;code&gt;arg&lt;/code&gt; というグローバルテーブルに収集します。スクリプト名はインデックス0に、スクリプト名の後の最初の引数はインデックス1に、というように続きます。スクリプト名の前の引数（つまり、インタープリター名とそのオプション）は、負のインデックスになります。たとえば、呼び出しで</target>
        </trans-unit>
        <trans-unit id="41d09b228ef66be3a22078c99e4ef2dcb3df78d1" translate="yes" xml:space="preserve">
          <source>Before the assignment, the list of values is &lt;em&gt;adjusted&lt;/em&gt; to the length of the list of variables. If there are more values than needed, the excess values are thrown away. If there are fewer values than needed, the list is extended with as many &lt;b&gt;nil&lt;/b&gt;'s as needed. If the list of expressions ends with a function call, then all values returned by that call enter the list of values, before the adjustment (except when the call is enclosed in parentheses; see &lt;a href=&quot;#3.4&quot;&gt;&amp;sect;3.4&lt;/a&gt;).</source>
          <target state="translated">割り当ての前に、値のリストは変数のリストの長さに&lt;em&gt;合わせ&lt;/em&gt;て&lt;em&gt;調整さ&lt;/em&gt;れます。必要以上の値がある場合、超過した値は破棄されます。必要な値よりも値が少ない場合、リストは必要な数の&lt;b&gt;nilで&lt;/b&gt;拡張されます。式のリストが関数呼び出しで終わっている場合、その呼び出しによって返されるすべての値は、調整前に値のリストに入ります（呼び出しが括弧で囲まれている場合を除く&lt;a href=&quot;#3.4&quot;&gt;。&amp;sect;3.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="746907c57e653b279bf39358594d492bc0bfe3b2" translate="yes" xml:space="preserve">
          <source>Before the first assignment to a variable, its value is &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">変数への最初の割り当ての前は、その値は&lt;b&gt;nil&lt;/b&gt;です。</target>
        </trans-unit>
        <trans-unit id="eceec5af294d53441f5ac4ad61816149f7f14e22" translate="yes" xml:space="preserve">
          <source>Besides the Lua state, the continuation function has two other parameters: the final status of the call plus the context value (&lt;code&gt;ctx&lt;/code&gt;) that was passed originally to &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt;. (Lua does not use this context value; it only passes this value from the original function to the continuation function.) For &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt;, the status is the same value that would be returned by &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt;, except that it is &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; when being executed after a yield (instead of &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt;). For &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt;, the status is always &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; when Lua calls the continuation. (For these two functions, Lua will not call the continuation in case of errors, because they do not handle errors.) Similarly, when using &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt;, you should call the continuation function with &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; as the status. (For &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, there is not much point in calling directly the continuation function, because &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt; usually does not return.)</source>
          <target state="translated">Lua状態のほかに、継続関数には2つの他のパラメーターがあります。呼び出しの最終ステータスと、元々&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;に渡されたコンテキスト値（ &lt;code&gt;ctx&lt;/code&gt; ）です。 （Luaはこのコンテキスト値を使用しません。元の関数から継続関数にこの値を渡すだけです。）&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; の&lt;/a&gt;場合、ステータスは、後に実行されたときに&lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; で&lt;/a&gt;あることを除いて、&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;によって返される値と同じです。収量（&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; の&lt;/a&gt;代わり）。&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;、ステータスは常に&lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt;Luaが継続を呼び出すとき。 （これら2つの関数の場合、Luaはエラーを処理しないため、エラーが発生した場合に継続を呼び出しません。）同様に、&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;を使用する場合は、ステータスとして&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;を使用して継続関数を呼び出す必要があります。 （について&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;ので、多くのポイントは、直接継続関数を呼び出すにはありません&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; は&lt;/a&gt;通常、戻りません。）</target>
        </trans-unit>
        <trans-unit id="178d0c1a22b01e10ab0fe06b4a5afb972b2a24e2" translate="yes" xml:space="preserve">
          <source>Binary operators comprise arithmetic operators (see &lt;a href=&quot;#3.4.1&quot;&gt;&amp;sect;3.4.1&lt;/a&gt;), bitwise operators (see &lt;a href=&quot;#3.4.2&quot;&gt;&amp;sect;3.4.2&lt;/a&gt;), relational operators (see &lt;a href=&quot;#3.4.4&quot;&gt;&amp;sect;3.4.4&lt;/a&gt;), logical operators (see &lt;a href=&quot;#3.4.5&quot;&gt;&amp;sect;3.4.5&lt;/a&gt;), and the concatenation operator (see &lt;a href=&quot;#3.4.6&quot;&gt;&amp;sect;3.4.6&lt;/a&gt;). Unary operators comprise the unary minus (see &lt;a href=&quot;#3.4.1&quot;&gt;&amp;sect;3.4.1&lt;/a&gt;), the unary bitwise NOT (see &lt;a href=&quot;#3.4.2&quot;&gt;&amp;sect;3.4.2&lt;/a&gt;), the unary logical &lt;b&gt;not&lt;/b&gt; (see &lt;a href=&quot;#3.4.5&quot;&gt;&amp;sect;3.4.5&lt;/a&gt;), and the unary &lt;em&gt;length operator&lt;/em&gt; (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;).</source>
          <target state="translated">二項演算子は、算術演算子（&lt;a href=&quot;#3.4.1&quot;&gt;&amp;sect;3.4.1を&lt;/a&gt;参照）、ビット単位演算子（&lt;a href=&quot;#3.4.2&quot;&gt;&amp;sect;3.4.2を&lt;/a&gt;参照）、関係演算子（&lt;a href=&quot;#3.4.4&quot;&gt;&amp;sect;3.4.4を&lt;/a&gt;参照）、論理演算子（&lt;a href=&quot;#3.4.5&quot;&gt;&amp;sect;3.4.5を&lt;/a&gt;参照）、および連結演算子（&lt;a href=&quot;#3.4.6&quot;&gt;&amp;sect;を&lt;/a&gt;参照）で構成されます3.4.6）。単項演算子は、（参照単項マイナスを備え&lt;a href=&quot;#3.4.1&quot;&gt;&amp;sect;3.4.1&lt;/a&gt;）、単項ビットごとのNOT（参照&lt;a href=&quot;#3.4.2&quot;&gt;&amp;sect;3.4.2&lt;/a&gt;）、論理単項&lt;b&gt;ない&lt;/b&gt;（参照&lt;a href=&quot;#3.4.5&quot;&gt;&amp;sect;3.4.5&lt;/a&gt;）、および単項&lt;em&gt;長さ演算子は、&lt;/em&gt;（参照&lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;） 。</target>
        </trans-unit>
        <trans-unit id="f06f824cef5caab026aebdaccc85d665d4b620db" translate="yes" xml:space="preserve">
          <source>Bitwise Operators</source>
          <target state="translated">ビット演算子</target>
        </trans-unit>
        <trans-unit id="54c45c033f5eb914fae27a646cbd9e23d3750d19" translate="yes" xml:space="preserve">
          <source>Blocks</source>
          <target state="translated">Blocks</target>
        </trans-unit>
        <trans-unit id="b864e3b0c9b0957e85741aadf6674e44cf5c2496" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;nargs&lt;/code&gt; and &lt;code&gt;nresults&lt;/code&gt; have the same meaning as in &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;. If there are no errors during the call, &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; behaves exactly like &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;. However, if there is any error, &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; catches it, pushes a single value on the stack (the error object), and returns an error code. Like &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; always removes the function and its arguments from the stack.</source>
          <target state="translated">&lt;code&gt;nargs&lt;/code&gt; と &lt;code&gt;nresults&lt;/code&gt; はどちらもlua_callと同じ意味&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;。呼び出し中にエラーがない場合、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;はlua_callとまったく同じように&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;ます。ただし、エラーが発生した場合、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;はそれをキャッチし、単一の値をスタック（エラーオブジェクト）にプッシュして、エラーコードを返します。&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; は&lt;/a&gt;常に関数とその引数をスタックから削除します。</target>
        </trans-unit>
        <trans-unit id="3328c9c8f16b59988d2720e58557b3f6a8cdbbb5" translate="yes" xml:space="preserve">
          <source>Both function calls and vararg expressions can result in multiple values. If a function call is used as a statement (see &lt;a href=&quot;#3.3.6&quot;&gt;&amp;sect;3.3.6&lt;/a&gt;), then its return list is adjusted to zero elements, thus discarding all returned values. If an expression is used as the last (or the only) element of a list of expressions, then no adjustment is made (unless the expression is enclosed in parentheses). In all other contexts, Lua adjusts the result list to one element, either discarding all values except the first one or adding a single &lt;b&gt;nil&lt;/b&gt; if there are no values.</source>
          <target state="translated">関数呼び出しと可変引数式の両方で、複数の値が生じる可能性があります。関数呼び出しがステートメントとして使用される場合（&lt;a href=&quot;#3.3.6&quot;&gt;&amp;sect;3.3.6を&lt;/a&gt;参照）、その戻りリストはゼロ要素に調整されるため、戻り値はすべて破棄されます。式が式のリストの最後の（または唯一の）要素として使用される場合、（式が括弧で囲まれていない限り）調整は行われません。他のすべてのコンテキストでは、Luaは結果リストを1つの要素に調整し、最初の値を除くすべての値を破棄するか、値がない場合は単一の&lt;b&gt;nilを&lt;/b&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="ef0d7df25b511d8e1f840431681fc99b96959ea0" translate="yes" xml:space="preserve">
          <source>Both right and left shifts fill the vacant bits with zeros. Negative displacements shift to the other direction; displacements with absolute values equal to or higher than the number of bits in an integer result in zero (as all bits are shifted out).</source>
          <target state="translated">右シフトと左シフトの両方で、空いているビットをゼロで埋めます。負の変位は反対方向にシフトします。絶対値が整数のビット数以上の変位はゼロになります(すべてのビットがシフトアウトされるため)。</target>
        </trans-unit>
        <trans-unit id="606a21a2a41de7578fb85238576a85c01cff0d09" translate="yes" xml:space="preserve">
          <source>By default this type is &lt;code&gt;long long&lt;/code&gt;, (usually a 64-bit two-complement integer), but that can be changed to &lt;code&gt;long&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; (usually a 32-bit two-complement integer). (See &lt;code&gt;LUA_INT_TYPE&lt;/code&gt; in &lt;code&gt;luaconf.h&lt;/code&gt;.)</source>
          <target state="translated">デフォルトでは、このタイプは &lt;code&gt;long long&lt;/code&gt; （通常は64ビットの2の補数の整数）ですが、これを &lt;code&gt;long&lt;/code&gt; または &lt;code&gt;int&lt;/code&gt; （通常は32ビットの2の補数の整数）に変更できます。（参照 &lt;code&gt;LUA_INT_TYPE&lt;/code&gt; で &lt;code&gt;luaconf.h&lt;/code&gt; を。）</target>
        </trans-unit>
        <trans-unit id="8d4b756a61274079d48c6b43e4f7a164ad5525c5" translate="yes" xml:space="preserve">
          <source>By default this type is double, but that can be changed to a single float or a long double. (See &lt;code&gt;LUA_FLOAT_TYPE&lt;/code&gt; in &lt;code&gt;luaconf.h&lt;/code&gt;.)</source>
          <target state="translated">デフォルトではこのタイプはdoubleですが、これは単一のfloatまたはlong doubleに変更できます。（参照 &lt;code&gt;LUA_FLOAT_TYPE&lt;/code&gt; で &lt;code&gt;luaconf.h&lt;/code&gt; を。）</target>
        </trans-unit>
        <trans-unit id="29af92c8be46565be89222f77a2f4fb50aaf902e" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;i&lt;/code&gt; is 1 and &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;#list&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;i&lt;/code&gt; は1で、 &lt;code&gt;j&lt;/code&gt; は &lt;code&gt;#list&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4b94595a9de392a583ea21fcbca5ff4996bbeb4c" translate="yes" xml:space="preserve">
          <source>By default, this area has the size of a pointer to void, but you can recompile Lua with a different size for this area. (See &lt;code&gt;LUA_EXTRASPACE&lt;/code&gt; in &lt;code&gt;luaconf.h&lt;/code&gt;.)</source>
          <target state="translated">デフォルトでは、この領域にはvoidへのポインターのサイズがありますが、この領域に対して別のサイズでLuaを再コンパイルできます。（参照 &lt;code&gt;LUA_EXTRASPACE&lt;/code&gt; で &lt;code&gt;luaconf.h&lt;/code&gt; を。）</target>
        </trans-unit>
        <trans-unit id="03114feec4c78056b8ef7cfc58a14ecddceef3d8" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#pdf-error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; if the value of its argument &lt;code&gt;v&lt;/code&gt; is false (i.e., &lt;b&gt;nil&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt;); otherwise, returns all its arguments. In case of error, &lt;code&gt;message&lt;/code&gt; is the error object; when absent, it defaults to &quot;&lt;code&gt;assertion failed!&lt;/code&gt;&quot;</source>
          <target state="translated">引数 &lt;code&gt;v&lt;/code&gt; の値がfalse（つまり、&lt;b&gt;nil&lt;/b&gt;または&lt;b&gt;false&lt;/b&gt;）の場合、&lt;a href=&quot;#pdf-error&quot;&gt; &lt;code&gt;error&lt;/code&gt; &lt;/a&gt;呼び出します。それ以外の場合は、すべての引数を返します。エラーの場合、 &lt;code&gt;message&lt;/code&gt; はエラーオブジェクトです。存在しない場合、デフォルトで「 &lt;code&gt;assertion failed!&lt;/code&gt; 」&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1c9a6f6c22d821f1d190cf7b504945ad9b4cbdf3" translate="yes" xml:space="preserve">
          <source>Calls a function in protected mode.</source>
          <target state="translated">保護されたモードで関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b098c5a2357f0f1bcda94addf0cd58b14d7f56d4" translate="yes" xml:space="preserve">
          <source>Calls a function.</source>
          <target state="translated">関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a92585404dfb5c102735b49e368c931de0bcf925" translate="yes" xml:space="preserve">
          <source>Calls a metamethod.</source>
          <target state="translated">メタメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="afb856a058891b728039960270f34dcfa7886cb5" translate="yes" xml:space="preserve">
          <source>Calls function &lt;code&gt;f&lt;/code&gt; with the given arguments in &lt;em&gt;protected mode&lt;/em&gt;. This means that any error inside &lt;code&gt;f&lt;/code&gt; is not propagated; instead, &lt;code&gt;pcall&lt;/code&gt; catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, &lt;code&gt;pcall&lt;/code&gt; also returns all results from the call, after this first result. In case of any error, &lt;code&gt;pcall&lt;/code&gt; returns &lt;b&gt;false&lt;/b&gt; plus the error message.</source>
          <target state="translated">&lt;em&gt;プロテクトモード&lt;/em&gt;で、指定された引数を使用して関数 &lt;code&gt;f&lt;/code&gt; を呼び出し&lt;em&gt;ます&lt;/em&gt;。つまり、 &lt;code&gt;f&lt;/code&gt; 内のエラーは伝搬されません。代わりに、 &lt;code&gt;pcall&lt;/code&gt; はエラーをキャッチし、ステータスコードを返します。最初の結果はステータスコード（ブール値）で、呼び出しがエラーなしで成功した場合はtrueです。そのような場合、 &lt;code&gt;pcall&lt;/code&gt; は、この最初の結果の後に、呼び出しからのすべての結果も返します。エラーが発生した場合、 &lt;code&gt;pcall&lt;/code&gt; は&lt;b&gt;false&lt;/b&gt;とエラーメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="d13e849aa5160d3c27d99ea69deec271ee71dd22" translate="yes" xml:space="preserve">
          <source>Calls the ISO C function &lt;code&gt;exit&lt;/code&gt; to terminate the host program. If &lt;code&gt;code&lt;/code&gt; is &lt;b&gt;true&lt;/b&gt;, the returned status is &lt;code&gt;EXIT_SUCCESS&lt;/code&gt;; if &lt;code&gt;code&lt;/code&gt; is &lt;b&gt;false&lt;/b&gt;, the returned status is &lt;code&gt;EXIT_FAILURE&lt;/code&gt;; if &lt;code&gt;code&lt;/code&gt; is a number, the returned status is this number. The default value for &lt;code&gt;code&lt;/code&gt; is &lt;b&gt;true&lt;/b&gt;.</source>
          <target state="translated">ISO C関数 &lt;code&gt;exit&lt;/code&gt; を呼び出して、ホストプログラムを終了します。場合 &lt;code&gt;code&lt;/code&gt; ある&lt;b&gt;真&lt;/b&gt;、返されたステータスがあり &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; 。場合 &lt;code&gt;code&lt;/code&gt; ある&lt;b&gt;偽&lt;/b&gt;、返されたステータスがあり &lt;code&gt;EXIT_FAILURE&lt;/code&gt; 。場合 &lt;code&gt;code&lt;/code&gt; 数ある、返されたステータスは、この番号です。 &lt;code&gt;code&lt;/code&gt; のデフォルト値は&lt;b&gt;true&lt;/b&gt;です。</target>
        </trans-unit>
        <trans-unit id="ce944ae1c348eb980d3cfe553b3502d5679075a6" translate="yes" xml:space="preserve">
          <source>Captures:</source>
          <target state="translated">Captures:</target>
        </trans-unit>
        <trans-unit id="07ae3990eabe4f174acb75467a4a336ef037a4a0" translate="yes" xml:space="preserve">
          <source>Changes the allocator function of a given state to &lt;code&gt;f&lt;/code&gt; with user data &lt;code&gt;ud&lt;/code&gt;.</source>
          <target state="translated">ユーザーデータ &lt;code&gt;ud&lt;/code&gt; を使用して、特定の状態のアロケータ関数を &lt;code&gt;f&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="6e6cb5ea0746fe0ad7fa97751f92f6157ed314b2" translate="yes" xml:space="preserve">
          <source>Character Class:</source>
          <target state="translated">キャラクタークラス。</target>
        </trans-unit>
        <trans-unit id="0a2e61548b9d88afb89262b803b6de8bd1e2b486" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;cond&lt;/code&gt; is true. If it is not, raises an error with a standard message (see &lt;a href=&quot;#luaL_argerror&quot;&gt;&lt;code&gt;luaL_argerror&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;cond&lt;/code&gt; がtrue かどうかを確認します。そうでない場合は、標準メッセージでエラーを発生させます（&lt;a href=&quot;#luaL_argerror&quot;&gt; &lt;code&gt;luaL_argerror&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e06a04dbdce44628706ea99a276e73819504d5ac" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;obj&lt;/code&gt; is a valid file handle. Returns the string &lt;code&gt;&quot;file&quot;&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; is an open file handle, &lt;code&gt;&quot;closed file&quot;&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; is a closed file handle, or &lt;b&gt;nil&lt;/b&gt; if &lt;code&gt;obj&lt;/code&gt; is not a file handle.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; が有効なファイルハンドルかどうかを確認します。戻り値文字列 &lt;code&gt;&quot;file&quot;&lt;/code&gt; 場合 &lt;code&gt;obj&lt;/code&gt; が開いているファイルハンドルで、 &lt;code&gt;&quot;closed file&quot;&lt;/code&gt; 場合 &lt;code&gt;obj&lt;/code&gt; が閉じられたファイルハンドル、またはある&lt;b&gt;nilの&lt;/b&gt;場合 &lt;code&gt;obj&lt;/code&gt; がファイルハンドルではありません。</target>
        </trans-unit>
        <trans-unit id="c496e326cea24bf25262cd1109c5d86ac743d694" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;v1&lt;/code&gt; is equal to &lt;code&gt;v2&lt;/code&gt;, without invoking the &lt;code&gt;__eq&lt;/code&gt; metamethod. Returns a boolean.</source>
          <target state="translated">&lt;code&gt;__eq&lt;/code&gt; メタメソッドを呼び出さずに、 &lt;code&gt;v1&lt;/code&gt; が &lt;code&gt;v2&lt;/code&gt; と等しいかどうかを確認します。ブール値を返します。</target>
        </trans-unit>
        <trans-unit id="71f0115e5d4ddbb6ea3de5ce5156cd7d330a1e43" translate="yes" xml:space="preserve">
          <source>Checks whether the core running the call, the core that created the Lua state, and the code making the call are all using the same version of Lua. Also checks whether the core running the call and the core that created the Lua state are using the same address space.</source>
          <target state="translated">呼び出しを実行しているコア、Luaステートを作成したコア、呼び出しを行うコードがすべて同じバージョンのLuaを使用しているかどうかをチェックします。また、コールを実行しているコアとLuaステートを作成したコアが同じアドレス空間を使用しているかどうかもチェックします。</target>
        </trans-unit>
        <trans-unit id="c7e0b23ddda5a7e9cb9a184dd2fb56f91b2baeb4" translate="yes" xml:space="preserve">
          <source>Checks whether the function argument &lt;code&gt;arg&lt;/code&gt; has type &lt;code&gt;t&lt;/code&gt;. See &lt;a href=&quot;#lua_type&quot;&gt;&lt;code&gt;lua_type&lt;/code&gt;&lt;/a&gt; for the encoding of types for &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; の型が &lt;code&gt;t&lt;/code&gt; かどうかを確認します。 &lt;code&gt;t&lt;/code&gt; の型のエンコーディングについては、&lt;a href=&quot;#lua_type&quot;&gt; &lt;code&gt;lua_type&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="34efff80aa99092adc3395e3a3c3cec54e5e3ae4" translate="yes" xml:space="preserve">
          <source>Checks whether the function argument &lt;code&gt;arg&lt;/code&gt; is a number and returns this number.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; が数値かどうかを確認し、この数値を返します。</target>
        </trans-unit>
        <trans-unit id="acb38043b3ab1b3ca9ad57148867e32ff48f49a4" translate="yes" xml:space="preserve">
          <source>Checks whether the function argument &lt;code&gt;arg&lt;/code&gt; is a string and returns this string.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; が文字列かどうかを確認し、この文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fd80c52685065a298a4083d4f4ae27709571e837" translate="yes" xml:space="preserve">
          <source>Checks whether the function argument &lt;code&gt;arg&lt;/code&gt; is a string and returns this string; if &lt;code&gt;l&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt; fills &lt;code&gt;*l&lt;/code&gt; with the string's length.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; が文字列かどうかを確認し、この文字列を返します。 &lt;code&gt;l&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、 &lt;code&gt;*l&lt;/code&gt; は文字列の長さで埋められます。</target>
        </trans-unit>
        <trans-unit id="6bda7fb8ccffc0321708f10ba7b5f9fa4d8f642f" translate="yes" xml:space="preserve">
          <source>Checks whether the function argument &lt;code&gt;arg&lt;/code&gt; is a string and searches for this string in the array &lt;code&gt;lst&lt;/code&gt; (which must be NULL-terminated). Returns the index in the array where the string was found. Raises an error if the argument is not a string or if the string cannot be found.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; が文字列かどうかをチェックし、この文字列を配列 &lt;code&gt;lst&lt;/code&gt; （NULLで終了する必要があります）で検索します。文字列が見つかった配列のインデックスを返します。引数が文字列でない場合、または文字列が見つからない場合は、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bfaae18ec316bac0d06a7d8b2f1269f7452bb73f" translate="yes" xml:space="preserve">
          <source>Checks whether the function argument &lt;code&gt;arg&lt;/code&gt; is a userdata of the type &lt;code&gt;tname&lt;/code&gt; (see &lt;a href=&quot;#luaL_newmetatable&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;) and returns the userdata address (see &lt;a href=&quot;#lua_touserdata&quot;&gt;&lt;code&gt;lua_touserdata&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; がタイプ &lt;code&gt;tname&lt;/code&gt; （&lt;a href=&quot;#luaL_newmetatable&quot;&gt; &lt;code&gt;luaL_newmetatable&lt;/code&gt; を&lt;/a&gt;参照）のユーザーデータであるかどうかを確認し、ユーザーデータアドレス（&lt;a href=&quot;#lua_touserdata&quot;&gt; &lt;code&gt;lua_touserdata&lt;/code&gt; を&lt;/a&gt;参照）を返します。</target>
        </trans-unit>
        <trans-unit id="21c6e89e09e8362727785a70d17dbd46aac6e5d8" translate="yes" xml:space="preserve">
          <source>Checks whether the function argument &lt;code&gt;arg&lt;/code&gt; is an integer (or can be converted to an integer) and returns this integer cast to a &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; が整数である（または整数に変換できる）かどうかを確認し、この整数を&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; に&lt;/a&gt;キャストして返します。</target>
        </trans-unit>
        <trans-unit id="ec6102b1e83850fda1240175c176c9a4d38d5de9" translate="yes" xml:space="preserve">
          <source>Checks whether the function has an argument of any type (including &lt;b&gt;nil&lt;/b&gt;) at position &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">関数の位置 &lt;code&gt;arg&lt;/code&gt; に任意の型（&lt;b&gt;nil&lt;/b&gt;を含む）の引数があるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="4a527377dfdcd1435bbaa177dc63f2a6bb39b269" translate="yes" xml:space="preserve">
          <source>Chunks</source>
          <target state="translated">Chunks</target>
        </trans-unit>
        <trans-unit id="b103f8207401db3956a89008862d6396af66ca00" translate="yes" xml:space="preserve">
          <source>Chunks can also be precompiled into binary form; see program &lt;code&gt;luac&lt;/code&gt; and function &lt;a href=&quot;#pdf-string.dump&quot;&gt;&lt;code&gt;string.dump&lt;/code&gt;&lt;/a&gt; for details. Programs in source and compiled forms are interchangeable; Lua automatically detects the file type and acts accordingly (see &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">チャンクはバイナリ形式にプリコンパイルすることもできます。詳細については、プログラム &lt;code&gt;luac&lt;/code&gt; および関数&lt;a href=&quot;#pdf-string.dump&quot;&gt; &lt;code&gt;string.dump&lt;/code&gt; &lt;/a&gt;を参照してください。ソース形式とコンパイルされた形式のプログラムは交換可能です。Luaは自動的にファイルタイプを検出し、それに応じて動作します（&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="52566db36dfcd9f2bf9c74284a4bfdd56dc85476" translate="yes" xml:space="preserve">
          <source>Closes &lt;code&gt;file&lt;/code&gt;. Note that files are automatically closed when their handles are garbage collected, but that takes an unpredictable amount of time to happen.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 閉じます。ハンドルがガベージコレクションされると、ファイルは自動的に閉じられますが、これには予期しない時間がかかることに注意してください。</target>
        </trans-unit>
        <trans-unit id="85fc3e790a7e917db028a531acd7642ab374f383" translate="yes" xml:space="preserve">
          <source>Coercions and Conversions</source>
          <target state="translated">強制と変換</target>
        </trans-unit>
        <trans-unit id="226470405b7e44d61ec64752eddb0da20100aa01" translate="yes" xml:space="preserve">
          <source>Compares two Lua values. Returns 1 if the value at index &lt;code&gt;index1&lt;/code&gt; satisfies &lt;code&gt;op&lt;/code&gt; when compared with the value at index &lt;code&gt;index2&lt;/code&gt;, following the semantics of the corresponding Lua operator (that is, it may call metamethods). Otherwise returns 0. Also returns 0 if any of the indices is not valid.</source>
          <target state="translated">2つのLua値を比較します。インデックスの値場合に1を返し &lt;code&gt;index1&lt;/code&gt; のを満たす &lt;code&gt;op&lt;/code&gt; インデックスの値と比較した場合 &lt;code&gt;index2&lt;/code&gt; 対応Luaの演算子の意味論（すなわち、それはメタメソッドを呼び出すこと）以下、。それ以外の場合は0を返します。無効なインデックスがある場合も0を返します。</target>
        </trans-unit>
        <trans-unit id="372bb0dd29dd69cdea95231ec5f25f17cfbc3df5" translate="yes" xml:space="preserve">
          <source>Concatenates the &lt;code&gt;n&lt;/code&gt; values at the top of the stack, pops them, and leaves the result at the top. If &lt;code&gt;n&lt;/code&gt; is 1, the result is the single value on the stack (that is, the function does nothing); if &lt;code&gt;n&lt;/code&gt; is 0, the result is the empty string. Concatenation is performed following the usual semantics of Lua (see &lt;a href=&quot;#3.4.6&quot;&gt;&amp;sect;3.4.6&lt;/a&gt;).</source>
          <target state="translated">スタックの最上部にある &lt;code&gt;n&lt;/code&gt; 個の値を連結し、それらをポップして、結果を最上部に残します。場合 &lt;code&gt;n&lt;/code&gt; 1であり、結果はスタック上の単一の値である（すなわち、関数は何もしません）。場合は &lt;code&gt;n&lt;/code&gt; 0で、結果は空の文字列です。連結は、Luaの通常のセマンティクスに従って実行されます（&lt;a href=&quot;#3.4.6&quot;&gt;&amp;sect;3.4.6を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="eec037fd21cdbe752cf956ee1da877b809e27461" translate="yes" xml:space="preserve">
          <source>Concatenation</source>
          <target state="translated">Concatenation</target>
        </trans-unit>
        <trans-unit id="398713ac023b450e8c4b5b95b390a7f9a7cf2b57" translate="yes" xml:space="preserve">
          <source>Continuation functions now receive as parameters what they needed to get through &lt;code&gt;lua_getctx&lt;/code&gt;, so &lt;code&gt;lua_getctx&lt;/code&gt; has been removed. Adapt your code accordingly.</source>
          <target state="translated">継続関数が &lt;code&gt;lua_getctx&lt;/code&gt; を取得するために必要なものをパラメーターとして受け取るようになったため、 &lt;code&gt;lua_getctx&lt;/code&gt; は削除されました。それに応じてコードを適応させます。</target>
        </trans-unit>
        <trans-unit id="49551177d73377982310b6a218929215d8146939" translate="yes" xml:space="preserve">
          <source>Control Structures</source>
          <target state="translated">制御構造</target>
        </trans-unit>
        <trans-unit id="5ee818a21f2b1465f364481c4e0134cff5f18467" translate="yes" xml:space="preserve">
          <source>Controls the garbage collector.</source>
          <target state="translated">ガベージコレクタを制御します。</target>
        </trans-unit>
        <trans-unit id="7837da47cfdd57111dc0e4c0e5a4d9267fcf8abb" translate="yes" xml:space="preserve">
          <source>Converts a Lua float to a Lua integer. This macro assumes that &lt;code&gt;n&lt;/code&gt; has an integral value. If that value is within the range of Lua integers, it is converted to an integer and assigned to &lt;code&gt;*p&lt;/code&gt;. The macro results in a boolean indicating whether the conversion was successful. (Note that this range test can be tricky to do correctly without this macro, due to roundings.)</source>
          <target state="translated">Lua floatをLua整数に変換します。このマクロは、 &lt;code&gt;n&lt;/code&gt; に整数値があることを前提としています。その値がLua整数の範囲内にある場合は、整数に変換されて &lt;code&gt;*p&lt;/code&gt; に割り当てられます。マクロは、変換が成功したかどうかを示すブール値になります。（丸めのため、この範囲テストは、このマクロなしで正しく実行するのが難しい場合があることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="5e3aa93bc10e31bb44d33a41364e25a0f08ad8ca" translate="yes" xml:space="preserve">
          <source>Converts a value at the given index to a C function. That value must be a C function; otherwise, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">指定されたインデックスの値をC関数に変換します。その値はC関数でなければなりません。それ以外の場合は &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d00d889b1b22745925c2a76fb0e196b525544aa3" translate="yes" xml:space="preserve">
          <source>Converts any Lua value at the given index to a C string in a reasonable format. The resulting string is pushed onto the stack and also returned by the function. If &lt;code&gt;len&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, the function also sets &lt;code&gt;*len&lt;/code&gt; with the string length.</source>
          <target state="translated">指定されたインデックスにある任意のLua値を適切な形式のC文字列に変換します。結果の文字列はスタックにプッシュされ、関数によっても返されます。 &lt;code&gt;len&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、関数は &lt;code&gt;*len&lt;/code&gt; にも文字列長を設定します。</target>
        </trans-unit>
        <trans-unit id="116e857e2ca9e12d4b94e18f89755a1be1b5803e" translate="yes" xml:space="preserve">
          <source>Converts the Lua value at the given index to a C boolean value (0 or 1). Like all tests in Lua, &lt;a href=&quot;#lua_toboolean&quot;&gt;&lt;code&gt;lua_toboolean&lt;/code&gt;&lt;/a&gt; returns true for any Lua value different from &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;nil&lt;/b&gt;; otherwise it returns false. (If you want to accept only actual boolean values, use &lt;a href=&quot;#lua_isboolean&quot;&gt;&lt;code&gt;lua_isboolean&lt;/code&gt;&lt;/a&gt; to test the value's type.)</source>
          <target state="translated">指定されたインデックスのLua値をCのブール値（0または1）に変換します。Luaのすべてのテストと同様に、&lt;a href=&quot;#lua_toboolean&quot;&gt; &lt;code&gt;lua_toboolean&lt;/code&gt; &lt;/a&gt;は、&lt;b&gt;false&lt;/b&gt;および&lt;b&gt;nil&lt;/b&gt;とは異なる任意のLua値に対してtrueを返します。それ以外の場合はfalseを返します。（実際のブール値のみを受け入れる場合は、&lt;a href=&quot;#lua_isboolean&quot;&gt; &lt;code&gt;lua_isboolean&lt;/code&gt; &lt;/a&gt;を使用して値のタイプをテストします。）</target>
        </trans-unit>
        <trans-unit id="d683bc445abde80f362551e45b28ac54bcdd2673" translate="yes" xml:space="preserve">
          <source>Converts the Lua value at the given index to a C string. If &lt;code&gt;len&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, it sets &lt;code&gt;*len&lt;/code&gt; with the string length. The Lua value must be a string or a number; otherwise, the function returns &lt;code&gt;NULL&lt;/code&gt;. If the value is a number, then &lt;code&gt;lua_tolstring&lt;/code&gt; also &lt;em&gt;changes the actual value in the stack to a string&lt;/em&gt;. (This change confuses &lt;a href=&quot;#lua_next&quot;&gt;&lt;code&gt;lua_next&lt;/code&gt;&lt;/a&gt; when &lt;code&gt;lua_tolstring&lt;/code&gt; is applied to keys during a table traversal.)</source>
          <target state="translated">指定されたインデックスのLua値をC文字列に変換します。 &lt;code&gt;len&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合は、 &lt;code&gt;*len&lt;/code&gt; に文字列の長さを設定します。 Luaの値は文字列または数値でなければなりません。それ以外の場合、関数は &lt;code&gt;NULL&lt;/code&gt; を返します。値が数値の場合、 &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;em&gt;はスタック内の実際の値&lt;/em&gt;もstringに&lt;em&gt;変更します&lt;/em&gt;。 （この変更の混乱は&lt;a href=&quot;#lua_next&quot;&gt; &lt;code&gt;lua_next&lt;/code&gt; &lt;/a&gt;場合 &lt;code&gt;lua_tolstring&lt;/code&gt; が表トラバーサル中にキーに適用されます。）</target>
        </trans-unit>
        <trans-unit id="b70c1818d1a487a028f6acabf5e97860ef23c14b" translate="yes" xml:space="preserve">
          <source>Converts the Lua value at the given index to the C type &lt;a href=&quot;#lua_Number&quot;&gt;&lt;code&gt;lua_Number&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;#lua_Number&quot;&gt;&lt;code&gt;lua_Number&lt;/code&gt;&lt;/a&gt;). The Lua value must be a number or a string convertible to a number (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;); otherwise, &lt;a href=&quot;#lua_tonumberx&quot;&gt;&lt;code&gt;lua_tonumberx&lt;/code&gt;&lt;/a&gt; returns 0.</source>
          <target state="translated">指定されたインデックスのLua値をCタイプの&lt;a href=&quot;#lua_Number&quot;&gt; &lt;code&gt;lua_Number&lt;/code&gt; に&lt;/a&gt;変換します（&lt;a href=&quot;#lua_Number&quot;&gt; &lt;code&gt;lua_Number&lt;/code&gt; を&lt;/a&gt;参照）。Luaの値は、数値または数値に変換可能な文字列でなければなりません（&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3を&lt;/a&gt;参照）。それ以外の場合、&lt;a href=&quot;#lua_tonumberx&quot;&gt; &lt;code&gt;lua_tonumberx&lt;/code&gt; &lt;/a&gt;は0を返します。</target>
        </trans-unit>
        <trans-unit id="15f299b2d961c145de7c7f6e078e5bce8ef3ebc3" translate="yes" xml:space="preserve">
          <source>Converts the Lua value at the given index to the signed integral type &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt;. The Lua value must be an integer, or a number or string convertible to an integer (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;); otherwise, &lt;code&gt;lua_tointegerx&lt;/code&gt; returns 0.</source>
          <target state="translated">指定されたインデックスのLua値を符号付き整数型&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; に変換し&lt;/a&gt;ます。Lua値は整数、または整数に変換可能な数値または文字列でなければなりません（&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3を&lt;/a&gt;参照）。それ以外の場合、 &lt;code&gt;lua_tointegerx&lt;/code&gt; は0を返します。</target>
        </trans-unit>
        <trans-unit id="56b8fd88e6e0c138775b719f7a5a3ba451055b5f" translate="yes" xml:space="preserve">
          <source>Converts the acceptable index &lt;code&gt;idx&lt;/code&gt; into an equivalent absolute index (that is, one that does not depend on the stack top).</source>
          <target state="translated">許容可能なインデックス &lt;code&gt;idx&lt;/code&gt; を同等の絶対インデックス（つまり、スタックトップに依存しないインデックス）に変換します。</target>
        </trans-unit>
        <trans-unit id="e6fb8705a562a080e28f0029fd5720bc4900e0ba" translate="yes" xml:space="preserve">
          <source>Converts the angle &lt;code&gt;x&lt;/code&gt; from degrees to radians.</source>
          <target state="translated">角度 &lt;code&gt;x&lt;/code&gt; を度からラジアンに変換します。</target>
        </trans-unit>
        <trans-unit id="a9e18c902b7ca6a770ce37f4b1286eab04eed85b" translate="yes" xml:space="preserve">
          <source>Converts the angle &lt;code&gt;x&lt;/code&gt; from radians to degrees.</source>
          <target state="translated">角度 &lt;code&gt;x&lt;/code&gt; をラジアンから度に変換します。</target>
        </trans-unit>
        <trans-unit id="f0f8e779d171995ba326ae0853150d5a8e164de0" translate="yes" xml:space="preserve">
          <source>Converts the value at the given index to a Lua thread (represented as &lt;code&gt;lua_State*&lt;/code&gt;). This value must be a thread; otherwise, the function returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">指定されたインデックスの値をLuaスレッド（ &lt;code&gt;lua_State*&lt;/code&gt; として表される）に変換します。この値はスレッドでなければなりません。それ以外の場合、関数は &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fa669b19e261e97a900695fc2754e811aa721912" translate="yes" xml:space="preserve">
          <source>Converts the value at the given index to a generic C pointer (&lt;code&gt;void*&lt;/code&gt;). The value can be a userdata, a table, a thread, or a function; otherwise, &lt;code&gt;lua_topointer&lt;/code&gt; returns &lt;code&gt;NULL&lt;/code&gt;. Different objects will give different pointers. There is no way to convert the pointer back to its original value.</source>
          <target state="translated">指定されたインデックスの値を汎用Cポインター（ &lt;code&gt;void*&lt;/code&gt; ）に変換します。値は、userdata、テーブル、スレッド、または関数です。それ以外の場合、 &lt;code&gt;lua_topointer&lt;/code&gt; は &lt;code&gt;NULL&lt;/code&gt; を返します。オブジェクトが異なれば、ポインタも異なります。ポインターを元の値に戻す方法はありません。</target>
        </trans-unit>
        <trans-unit id="e5b98b4c46b3b3b87df50590e233197fb42ee19f" translate="yes" xml:space="preserve">
          <source>Converts the zero-terminated string &lt;code&gt;s&lt;/code&gt; to a number, pushes that number into the stack, and returns the total size of the string, that is, its length plus one. The conversion can result in an integer or a float, according to the lexical conventions of Lua (see &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;). The string may have leading and trailing spaces and a sign. If the string is not a valid numeral, returns 0 and pushes nothing. (Note that the result can be used as a boolean, true if the conversion succeeds.)</source>
          <target state="translated">ゼロで終了する文字列 &lt;code&gt;s&lt;/code&gt; を数値に変換し、その数値をスタックにプッシュして、文字列の合計サイズ（つまり、長さ+ 1）を返します。Luaの字句規則（&lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1を&lt;/a&gt;参照）に従って、変換の結果は整数または浮動小数点数になる可能性があります。文字列には、先頭と末尾にスペースと記号を含めることができます。文字列が有効な数値でない場合、0を返し、何もプッシュしません。（結果はブール値として使用できることに注意してください。変換が成功した場合はtrueです。）</target>
        </trans-unit>
        <trans-unit id="afda351611f229d2ffdcdc3ced1f84f41bb44f33" translate="yes" xml:space="preserve">
          <source>Copies the element at index &lt;code&gt;fromidx&lt;/code&gt; into the valid index &lt;code&gt;toidx&lt;/code&gt;, replacing the value at that position. Values at other positions are not affected.</source>
          <target state="translated">インデックス &lt;code&gt;fromidx&lt;/code&gt; の要素を有効なインデックス &lt;code&gt;toidx&lt;/code&gt; にコピーし、その位置の値を置き換えます。他の位置の値は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="038697113018f4400bc94f1be4aebad0829b635a" translate="yes" xml:space="preserve">
          <source>Coroutines</source>
          <target state="translated">Coroutines</target>
        </trans-unit>
        <trans-unit id="725136a9add10a0a9d7033c2e6eefd6766658f99" translate="yes" xml:space="preserve">
          <source>Creates a copy of string &lt;code&gt;s&lt;/code&gt; by replacing any occurrence of the string &lt;code&gt;p&lt;/code&gt; with the string &lt;code&gt;r&lt;/code&gt;. Pushes the resulting string on the stack and returns it.</source>
          <target state="translated">文字列 &lt;code&gt;p&lt;/code&gt; を文字列 &lt;code&gt;r&lt;/code&gt; で置き換えて、文字列 &lt;code&gt;s&lt;/code&gt; のコピーを作成します。結果の文字列をスタックにプッシュして返します。</target>
        </trans-unit>
        <trans-unit id="409211348501f0fceae087d0a64eb7812f2900e2" translate="yes" xml:space="preserve">
          <source>Creates a new Lua state. It calls &lt;a href=&quot;#lua_newstate&quot;&gt;&lt;code&gt;lua_newstate&lt;/code&gt;&lt;/a&gt; with an allocator based on the standard C &lt;code&gt;realloc&lt;/code&gt; function and then sets a panic function (see &lt;a href=&quot;#4.6&quot;&gt;&amp;sect;4.6&lt;/a&gt;) that prints an error message to the standard error output in case of fatal errors.</source>
          <target state="translated">新しいLua状態を作成します。標準のC &lt;code&gt;realloc&lt;/code&gt; 関数に基づくアロケーターで&lt;a href=&quot;#lua_newstate&quot;&gt; &lt;code&gt;lua_newstate&lt;/code&gt; &lt;/a&gt;を呼び出し、致命的なエラーが発生した場合に標準エラー出力にエラーメッセージを出力するパニック関数（&lt;a href=&quot;#4.6&quot;&gt;&amp;sect;4.6を&lt;/a&gt;参照）を設定します。</target>
        </trans-unit>
        <trans-unit id="e2e14753be2923d3727ec4c0b2962317308b7a78" translate="yes" xml:space="preserve">
          <source>Creates a new coroutine, with body &lt;code&gt;f&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; must be a function. Returns a function that resumes the coroutine each time it is called. Any arguments passed to the function behave as the extra arguments to &lt;code&gt;resume&lt;/code&gt;. Returns the same values returned by &lt;code&gt;resume&lt;/code&gt;, except the first boolean. In case of error, propagates the error.</source>
          <target state="translated">本文が &lt;code&gt;f&lt;/code&gt; の新しいコルーチンを作成します。 &lt;code&gt;f&lt;/code&gt; は関数でなければなりません。コルーチンが呼び出されるたびに再開する関数を返します。関数に渡された引数は、 &lt;code&gt;resume&lt;/code&gt; するための追加の引数として機能します。最初のブール値を除いて、 &lt;code&gt;resume&lt;/code&gt; によって返されるのと同じ値を返します。エラーの場合、エラーを伝播します。</target>
        </trans-unit>
        <trans-unit id="05bb83a7ae7bf5c690003996483410c7c3b04c7a" translate="yes" xml:space="preserve">
          <source>Creates a new coroutine, with body &lt;code&gt;f&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; must be a function. Returns this new coroutine, an object with type &lt;code&gt;&quot;thread&quot;&lt;/code&gt;.</source>
          <target state="translated">本文が &lt;code&gt;f&lt;/code&gt; の新しいコルーチンを作成します。 &lt;code&gt;f&lt;/code&gt; は関数でなければなりません。この新しいコルーチン、タイプが &lt;code&gt;&quot;thread&quot;&lt;/code&gt; のオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="2a50f66b26d5dc5b8cc4ba979a4ea976308b32d2" translate="yes" xml:space="preserve">
          <source>Creates a new empty table and pushes it onto the stack. It is equivalent to &lt;code&gt;lua_createtable(L, 0, 0)&lt;/code&gt;.</source>
          <target state="translated">新しい空のテーブルを作成し、それをスタックにプッシュします。これは、 &lt;code&gt;lua_createtable(L, 0, 0)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="96db399082b6917880b7df2255e1672897dcd9fd" translate="yes" xml:space="preserve">
          <source>Creates a new empty table and pushes it onto the stack. Parameter &lt;code&gt;narr&lt;/code&gt; is a hint for how many elements the table will have as a sequence; parameter &lt;code&gt;nrec&lt;/code&gt; is a hint for how many other elements the table will have. Lua may use these hints to preallocate memory for the new table. This preallocation is useful for performance when you know in advance how many elements the table will have. Otherwise you can use the function &lt;a href=&quot;#lua_newtable&quot;&gt;&lt;code&gt;lua_newtable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">新しい空のテーブルを作成し、それをスタックにプッシュします。パラメータ &lt;code&gt;narr&lt;/code&gt; は、テーブルがシーケンスとして持つ要素数のヒントです。パラメータ &lt;code&gt;nrec&lt;/code&gt; は、テーブルが持つ他の要素の数に関するヒントです。Luaはこれらのヒントを使用して、新しいテーブルにメモリを事前に割り当てます。この事前割り当ては、テーブルが持つ要素の数が事前にわかっている場合のパフォーマンスに役立ちます。それ以外の場合は、関数&lt;a href=&quot;#lua_newtable&quot;&gt; &lt;code&gt;lua_newtable&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="cc85f5dc1d8e4aacd51d81be148d528a2a237f3a" translate="yes" xml:space="preserve">
          <source>Creates a new table and registers there the functions in list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="translated">新しいテーブルを作成し、そこにリスト &lt;code&gt;l&lt;/code&gt; の関数を登録します。</target>
        </trans-unit>
        <trans-unit id="5e609328dccbccc7603668252d3543d1885dfb3e" translate="yes" xml:space="preserve">
          <source>Creates a new table with a size optimized to store all entries in the array &lt;code&gt;l&lt;/code&gt; (but does not actually store them). It is intended to be used in conjunction with &lt;a href=&quot;#luaL_setfuncs&quot;&gt;&lt;code&gt;luaL_setfuncs&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;#luaL_newlib&quot;&gt;&lt;code&gt;luaL_newlib&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">配列 &lt;code&gt;l&lt;/code&gt; にすべてのエントリを格納するように最適化されたサイズで新しいテーブルを作成します（実際には格納しません）。これは、&lt;a href=&quot;#luaL_setfuncs&quot;&gt; &lt;code&gt;luaL_setfuncs&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;#luaL_newlib&quot;&gt; &lt;code&gt;luaL_newlib&lt;/code&gt; を&lt;/a&gt;参照）と組み合わせて使用​​することを目的としています。</target>
        </trans-unit>
        <trans-unit id="9c2dc3a7ed086d8ba5b98b47e50da72e0597ad2f" translate="yes" xml:space="preserve">
          <source>Creates a new thread running in a new, independent state. Returns &lt;code&gt;NULL&lt;/code&gt; if it cannot create the thread or the state (due to lack of memory). The argument &lt;code&gt;f&lt;/code&gt; is the allocator function; Lua does all memory allocation for this state through this function (see &lt;a href=&quot;#lua_Alloc&quot;&gt;&lt;code&gt;lua_Alloc&lt;/code&gt;&lt;/a&gt;). The second argument, &lt;code&gt;ud&lt;/code&gt;, is an opaque pointer that Lua passes to the allocator in every call.</source>
          <target state="translated">新しい独立した状態で実行される新しいスレッドを作成します。（メモリ不足のため）スレッドまたは状態を作成できない場合は、 &lt;code&gt;NULL&lt;/code&gt; を返します。引数 &lt;code&gt;f&lt;/code&gt; はアロケーター関数です。Luaは、この関数を介して、この状態のすべてのメモリ割り当てを行います（&lt;a href=&quot;#lua_Alloc&quot;&gt; &lt;code&gt;lua_Alloc&lt;/code&gt; を&lt;/a&gt;参照）。2番目の引数 &lt;code&gt;ud&lt;/code&gt; は、Luaがすべての呼び出しでアロケーターに渡す不透明なポインターです。</target>
        </trans-unit>
        <trans-unit id="fd9ec8c11d7ac5415a760ccd09c2fad1db9839cf" translate="yes" xml:space="preserve">
          <source>Creates a new thread, pushes it on the stack, and returns a pointer to a &lt;a href=&quot;#lua_State&quot;&gt;&lt;code&gt;lua_State&lt;/code&gt;&lt;/a&gt; that represents this new thread. The new thread returned by this function shares with the original thread its global environment, but has an independent execution stack.</source>
          <target state="translated">新しいスレッドを作成してスタックにプッシュし、この新しいスレッドを表す&lt;a href=&quot;#lua_State&quot;&gt; &lt;code&gt;lua_State&lt;/code&gt; &lt;/a&gt;へのポインターを返します。この関数によって返される新しいスレッドは、元のスレッドとグローバル環境を共有しますが、独立した実行スタックを持っています。</target>
        </trans-unit>
        <trans-unit id="6e0ca6aea862016d29b1b85fa495b05b651392c7" translate="yes" xml:space="preserve">
          <source>Creates and pushes a traceback of the stack &lt;code&gt;L1&lt;/code&gt;. If &lt;code&gt;msg&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt; it is appended at the beginning of the traceback. The &lt;code&gt;level&lt;/code&gt; parameter tells at which level to start the traceback.</source>
          <target state="translated">スタック &lt;code&gt;L1&lt;/code&gt; のトレースバックを作成してプッシュします。 &lt;code&gt;msg&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、トレースバックの先頭に追加されます。 &lt;code&gt;level&lt;/code&gt; パラメータは、トレースバックを開始するためにどのレベルで伝えます。</target>
        </trans-unit>
        <trans-unit id="15fe05dc16322e6d58cea2513fabb05e8a458e73" translate="yes" xml:space="preserve">
          <source>Creates and returns a &lt;em&gt;reference&lt;/em&gt;, in the table at index &lt;code&gt;t&lt;/code&gt;, for the object at the top of the stack (and pops the object).</source>
          <target state="translated">スタックの最上部にあるオブジェクトのインデックス &lt;code&gt;t&lt;/code&gt; のテーブルに&lt;em&gt;参照を&lt;/em&gt;作成して返します（オブジェクトをポップします）。</target>
        </trans-unit>
        <trans-unit id="9a1d518693f03f77a887add36287621e0ff6c775" translate="yes" xml:space="preserve">
          <source>Deletes the file (or empty directory, on POSIX systems) with the given name. If this function fails, it returns &lt;b&gt;nil&lt;/b&gt;, plus a string describing the error and the error code. Otherwise, it returns true.</source>
          <target state="translated">指定された名前のファイル（またはPOSIXシステムでは空のディレクトリ）を削除します。この関数が失敗すると、&lt;b&gt;nil&lt;/b&gt;に加えて、エラーとエラーコードを説明する文字列が返されます。それ以外の場合は、trueを返します。</target>
        </trans-unit>
        <trans-unit id="7e2e965899d00dbeb421cf187b25cd3fbb127acb" translate="yes" xml:space="preserve">
          <source>Despite the existence of this external &lt;code&gt;_ENV&lt;/code&gt; variable and the translation of free names, &lt;code&gt;_ENV&lt;/code&gt; is a completely regular name. In particular, you can define new variables and parameters with that name. Each reference to a free name uses the &lt;code&gt;_ENV&lt;/code&gt; that is visible at that point in the program, following the usual visibility rules of Lua (see &lt;a href=&quot;#3.5&quot;&gt;&amp;sect;3.5&lt;/a&gt;).</source>
          <target state="translated">この外部 &lt;code&gt;_ENV&lt;/code&gt; 変数の存在とフリー名の変換にもかかわらず、 &lt;code&gt;_ENV&lt;/code&gt; は完全に通常の名前です。特に、その名前で新しい変数とパラメーターを定義できます。フリー名への各参照は、Luaの通常の可視性規則（&lt;a href=&quot;#3.5&quot;&gt;&amp;sect;3.5を&lt;/a&gt;参照）に従って、プログラムのその時点で可視である &lt;code&gt;_ENV&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="12de5a5770780d211823aca1736624c0440ac4a1" translate="yes" xml:space="preserve">
          <source>Despite the name, the metamethod for this event can be either a function or a table. If it is a function, it is called with &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; as arguments, and the result of the call (adjusted to one value) is the result of the operation. If it is a table, the final result is the result of indexing this table with &lt;code&gt;key&lt;/code&gt;. (This indexing is regular, not raw, and therefore can trigger another metamethod.)</source>
          <target state="translated">名前にもかかわらず、このイベントのメタメソッドは、関数またはテーブルのいずれかです。関数の場合は、 &lt;code&gt;table&lt;/code&gt; と &lt;code&gt;key&lt;/code&gt; を引数として呼び出され、呼び出しの結果（1つの値に調整されます）は操作の結果です。テーブルの場合、最終結果は、このテーブルに &lt;code&gt;key&lt;/code&gt; でインデックスを付けた結果です。（このインデックス作成は生ではなく定期的であるため、別のメタメソッドをトリガーできます。）</target>
        </trans-unit>
        <trans-unit id="e2dd868cc18f6f74b6780c7bcc3d9948c1df04c3" translate="yes" xml:space="preserve">
          <source>Destroys all objects in the given Lua state (calling the corresponding garbage-collection metamethods, if any) and frees all dynamic memory used by this state. On several platforms, you may not need to call this function, because all resources are naturally released when the host program ends. On the other hand, long-running programs that create multiple states, such as daemons or web servers, will probably need to close states as soon as they are not needed.</source>
          <target state="translated">指定されたLuaステート内のすべてのオブジェクトを破棄し(対応するガベージコレクションメタメソッドがある場合はそれを呼び出します)、そのステートで使用されているすべてのダイナミックメモリを解放します。プラットフォームによっては、ホストプログラムの終了時にすべてのリソースが自然に解放されるため、この関数を呼び出す必要がない場合もあります。一方で、デーモンやウェブサーバのように複数のステートを作成するような長時間稼働するプログラムでは、不要になったらすぐにステートを閉じる必要があるでしょう。</target>
        </trans-unit>
        <trans-unit id="d6c256480b3e40e037a15bde7dbddae426d6a7cf" translate="yes" xml:space="preserve">
          <source>Does the equivalent of &lt;code&gt;t[i] = v&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the table at the given index and &lt;code&gt;v&lt;/code&gt; is the value at the top of the stack.</source>
          <target state="translated">&lt;code&gt;t[i] = v&lt;/code&gt; に相当します。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスのテーブルであり、 &lt;code&gt;v&lt;/code&gt; はスタックの最上位の値です。</target>
        </trans-unit>
        <trans-unit id="83102ba0627ee415bcdafad8e821cc410f6ca4e8" translate="yes" xml:space="preserve">
          <source>Does the equivalent of &lt;code&gt;t[p] = v&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the table at the given index, &lt;code&gt;p&lt;/code&gt; is encoded as a light userdata, and &lt;code&gt;v&lt;/code&gt; is the value at the top of the stack.</source>
          <target state="translated">&lt;code&gt;t[p] = v&lt;/code&gt; に相当します。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスのテーブルであり、 &lt;code&gt;p&lt;/code&gt; はライトユーザーデータとしてエンコードされ、 &lt;code&gt;v&lt;/code&gt; はスタックの最上位の値です。</target>
        </trans-unit>
        <trans-unit id="e5e1d7b2dfe0e4b65f51a80784409021aefed2c4" translate="yes" xml:space="preserve">
          <source>Does the equivalent to &lt;code&gt;t[k] = v&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index and &lt;code&gt;v&lt;/code&gt; is the value at the top of the stack.</source>
          <target state="translated">&lt;code&gt;t[k] = v&lt;/code&gt; に相当します。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値で、 &lt;code&gt;v&lt;/code&gt; はスタックの最上位の値です。</target>
        </trans-unit>
        <trans-unit id="8b79cf1f60fca53d0de89a3a12255d00973edf92" translate="yes" xml:space="preserve">
          <source>Does the equivalent to &lt;code&gt;t[k] = v&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index, &lt;code&gt;v&lt;/code&gt; is the value at the top of the stack, and &lt;code&gt;k&lt;/code&gt; is the value just below the top.</source>
          <target state="translated">&lt;code&gt;t[k] = v&lt;/code&gt; に相当します。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値、 &lt;code&gt;v&lt;/code&gt; はスタックの一番上の値、 &lt;code&gt;k&lt;/code&gt; は一番上の値です。</target>
        </trans-unit>
        <trans-unit id="cc3b7a2b7b1afec72c53764dcaa4a8915523e72b" translate="yes" xml:space="preserve">
          <source>Does the equivalent to &lt;code&gt;t[n] = v&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index and &lt;code&gt;v&lt;/code&gt; is the value at the top of the stack.</source>
          <target state="translated">&lt;code&gt;t[n] = v&lt;/code&gt; に相当します。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値で、 &lt;code&gt;v&lt;/code&gt; はスタックの最上位の値です。</target>
        </trans-unit>
        <trans-unit id="054070872d4195e45bf298511993c73d44db5c6e" translate="yes" xml:space="preserve">
          <source>Dumps a function as a binary chunk. Receives a Lua function on the top of the stack and produces a binary chunk that, if loaded again, results in a function equivalent to the one dumped. As it produces parts of the chunk, &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt; calls function &lt;code&gt;writer&lt;/code&gt; (see &lt;a href=&quot;#lua_Writer&quot;&gt;&lt;code&gt;lua_Writer&lt;/code&gt;&lt;/a&gt;) with the given &lt;code&gt;data&lt;/code&gt; to write them.</source>
          <target state="translated">関数をバイナリチャンクとしてダンプします。スタックの最上位でLua関数を受け取り、バイナリチャンクを生成します。再度ロードすると、ダンプされたものと同等の関数になります。チャンクの一部を生成するときに、&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;は指定された &lt;code&gt;data&lt;/code&gt; を使用して関数 &lt;code&gt;writer&lt;/code&gt; （&lt;a href=&quot;#lua_Writer&quot;&gt; &lt;code&gt;lua_Writer&lt;/code&gt; を&lt;/a&gt;参照）を呼び出し、それらを書き込みます。</target>
        </trans-unit>
        <trans-unit id="c90c7bb6d9829fd16d0afd908f93d4e6040aff4e" translate="yes" xml:space="preserve">
          <source>During its normal operation, a string buffer uses a variable number of stack slots. So, while using a buffer, you cannot assume that you know where the top of the stack is. You can use the stack between successive calls to buffer operations as long as that use is balanced; that is, when you call a buffer operation, the stack is at the same level it was immediately after the previous buffer operation. (The only exception to this rule is &lt;a href=&quot;#luaL_addvalue&quot;&gt;&lt;code&gt;luaL_addvalue&lt;/code&gt;&lt;/a&gt;.) After calling &lt;a href=&quot;#luaL_pushresult&quot;&gt;&lt;code&gt;luaL_pushresult&lt;/code&gt;&lt;/a&gt; the stack is back to its level when the buffer was initialized, plus the final string on its top.</source>
          <target state="translated">通常の操作中、文字列バッファは可変数のスタックスロットを使用します。したがって、バッファを使用している間は、スタックのトップがどこにあるかがわかっているとは限りません。使用がバランスしている限り、バッファ操作への連続した呼び出し間でスタックを使用できます。つまり、バッファ操作を呼び出すと、スタックは直前のバッファ操作の直後と同じレベルになります。（この規則の唯一の例外はある&lt;a href=&quot;#luaL_addvalue&quot;&gt; &lt;code&gt;luaL_addvalue&lt;/code&gt; &lt;/a&gt;。）を呼び出した後&lt;a href=&quot;#luaL_pushresult&quot;&gt; &lt;code&gt;luaL_pushresult&lt;/code&gt; &lt;/a&gt;バッファが初期化されたときにスタックが戻ってそのレベルにある、プラスその上に、最終的な文字列を。</target>
        </trans-unit>
        <trans-unit id="b76fabdeb134cd6b1444f21660aa818a7b0d8c8f" translate="yes" xml:space="preserve">
          <source>Dynamically links the host program with the C library &lt;code&gt;libname&lt;/code&gt;.</source>
          <target state="translated">ホストプログラムをCライブラリ &lt;code&gt;libname&lt;/code&gt; に動的にリンクします。</target>
        </trans-unit>
        <trans-unit id="a0f3fe6a9590293b6274b20698d15691bfb7be9e" translate="yes" xml:space="preserve">
          <source>Each Lua state has one or more threads, which correspond to independent, cooperative lines of execution. The type &lt;a href=&quot;#lua_State&quot;&gt;&lt;code&gt;lua_State&lt;/code&gt;&lt;/a&gt; (despite its name) refers to a thread. (Indirectly, through the thread, it also refers to the Lua state associated to the thread.)</source>
          <target state="translated">Luaの各状態には、独立した協調的な実行行に対応する1つまたは複数のスレッドがあります。タイプ&lt;a href=&quot;#lua_State&quot;&gt; &lt;code&gt;lua_State&lt;/code&gt; &lt;/a&gt;（その名前にもかかわらず）はスレッドを参照します。（スレッドを介して間接的に、それはスレッドに関連付けられたLua状態も参照します。）</target>
        </trans-unit>
        <trans-unit id="271d158703dde3ea70b23b6f13cd8c963bd8f8f2" translate="yes" xml:space="preserve">
          <source>Each character in the string &lt;code&gt;what&lt;/code&gt; selects some fields of the structure &lt;code&gt;ar&lt;/code&gt; to be filled or a value to be pushed on the stack:</source>
          <target state="translated">文字列の各文字 &lt;code&gt;what&lt;/code&gt; 構造のいくつかのフィールドを選択 &lt;code&gt;ar&lt;/code&gt; 充填するか、値がスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="34ea340a21718b1d5eb33af7ac68465d8a3a932c" translate="yes" xml:space="preserve">
          <source>Each entry in this table is a &lt;em&gt;searcher function&lt;/em&gt;. When looking for a module, &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; calls each of these searchers in ascending order, with the module name (the argument given to &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;) as its sole parameter. The function can return another function (the module &lt;em&gt;loader&lt;/em&gt;) plus an extra value that will be passed to that loader, or a string explaining why it did not find that module (or &lt;b&gt;nil&lt;/b&gt; if it has nothing to say).</source>
          <target state="translated">この表の各エントリは&lt;em&gt;サーチャー関数&lt;/em&gt;です。モジュールを探すとき、&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;はこれらの各サーチャーを昇順で呼び出し、モジュール名（&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; に&lt;/a&gt;指定された引数）を唯一のパラメーターとして使用します。この関数は、別の関数（モジュール&lt;em&gt;ローダー&lt;/em&gt;）に加えて、そのローダーに渡される追加の値、またはそのモジュールが見つからなかった理由を説明する文字列（または何も言うことがない場合は&lt;b&gt;nil&lt;/b&gt;）を返すことができます。</target>
        </trans-unit>
        <trans-unit id="315546f1f8c7df68b4e7271febe7523458c848c7" translate="yes" xml:space="preserve">
          <source>Each field of the form &lt;code&gt;[exp1] = exp2&lt;/code&gt; adds to the new table an entry with key &lt;code&gt;exp1&lt;/code&gt; and value &lt;code&gt;exp2&lt;/code&gt;. A field of the form &lt;code&gt;name = exp&lt;/code&gt; is equivalent to &lt;code&gt;[&quot;name&quot;] = exp&lt;/code&gt;. Finally, fields of the form &lt;code&gt;exp&lt;/code&gt; are equivalent to &lt;code&gt;[i] = exp&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; are consecutive integers starting with 1. Fields in the other formats do not affect this counting. For example,</source>
          <target state="translated">&lt;code&gt;[exp1] = exp2&lt;/code&gt; 形式の各フィールドは、新しいテーブルにキー &lt;code&gt;exp1&lt;/code&gt; と値 &lt;code&gt;exp2&lt;/code&gt; を持つエントリを追加します。 &lt;code&gt;name = exp&lt;/code&gt; という形式のフィールドは、 &lt;code&gt;[&quot;name&quot;] = exp&lt;/code&gt; と同等です。最後に、 &lt;code&gt;exp&lt;/code&gt; 形式のフィールドは &lt;code&gt;[i] = exp&lt;/code&gt; と同等です。ここで、 &lt;code&gt;i&lt;/code&gt; は1から始まる連続した整数です。他の形式のフィールドはこのカウントに影響しません。例えば、</target>
        </trans-unit>
        <trans-unit id="5ded60221fcd42af87598bfa3998cbd1f3094a3c" translate="yes" xml:space="preserve">
          <source>Each new thread has this area initialized with a copy of the area of the main thread.</source>
          <target state="translated">各新しいスレッドは、メインスレッドの領域のコピーでこの領域を初期化します。</target>
        </trans-unit>
        <trans-unit id="724adec43f3df4f9471590e57b3efefd102497cf" translate="yes" xml:space="preserve">
          <source>Ensures that the stack has space for at least &lt;code&gt;n&lt;/code&gt; extra slots (that is, that you can safely push up to &lt;code&gt;n&lt;/code&gt; values into it). It returns false if it cannot fulfill the request, either because it would cause the stack to be larger than a fixed maximum size (typically at least several thousand elements) or because it cannot allocate memory for the extra space. This function never shrinks the stack; if the stack already has space for the extra slots, it is left unchanged.</source>
          <target state="translated">スタックに少なくとも &lt;code&gt;n&lt;/code&gt; 個の追加スロット用のスペースがあることを保証します（つまり、 &lt;code&gt;n&lt;/code&gt; 個までの値を安全にプッシュできます）。スタックが固定の最大サイズ（通常は少なくとも数千の要素）よりも大きくなるか、余分なスペースにメモリを割り当てることができないため、要求を実行できない場合はfalseを返します。この関数はスタックを縮小しません。スタックに追加スロット用のスペースがすでにある場合は、変更されません。</target>
        </trans-unit>
        <trans-unit id="94cdd3c18c2b4719474c53fa6f1b9fb02152a15d" translate="yes" xml:space="preserve">
          <source>Ensures that the value &lt;code&gt;t[fname]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at index &lt;code&gt;idx&lt;/code&gt;, is a table, and pushes that table onto the stack. Returns true if it finds a previous table there and false if it creates a new table.</source>
          <target state="translated">値 &lt;code&gt;t[fname]&lt;/code&gt; （ &lt;code&gt;t&lt;/code&gt; はインデックス &lt;code&gt;idx&lt;/code&gt; の値）がテーブルであることを確認し、そのテーブルをスタックにプッシュします。そこで前のテーブルが見つかった場合はtrueを返し、新しいテーブルを作成した場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="d2187e2e8c84822845af903355cda0cd820011ab" translate="yes" xml:space="preserve">
          <source>Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word &lt;code&gt;cont&lt;/code&gt; finishes this function, so that the caller continues its execution.</source>
          <target state="translated">ユーザーと対話モードに入り、ユーザーが入力した各文字列を実行します。簡単なコマンドとその他のデバッグ機能を使用して、ユーザーはグローバル変数とローカル変数の検査、それらの値の変更、式の評価などを行うことができます。単語 &lt;code&gt;cont&lt;/code&gt; のみを含む行がこの関数を終了するため、呼び出し元はその実行を継続します。</target>
        </trans-unit>
        <trans-unit id="4bc7c25b89d339e7967419718f888c8e7706661a" translate="yes" xml:space="preserve">
          <source>Environments and the Global Environment</source>
          <target state="translated">環境と地球環境</target>
        </trans-unit>
        <trans-unit id="911d3f66ebade1de45eca3fa1b80cbca2b45963a" translate="yes" xml:space="preserve">
          <source>Equality (&lt;code&gt;==&lt;/code&gt;) first compares the type of its operands. If the types are different, then the result is &lt;b&gt;false&lt;/b&gt;. Otherwise, the values of the operands are compared. Strings are compared in the obvious way. Numbers are equal if they denote the same mathematical value.</source>
          <target state="translated">等価（ &lt;code&gt;==&lt;/code&gt; ）は、最初にそのオペランドの型を比較します。タイプが異なる場合、結果は&lt;b&gt;falseになります&lt;/b&gt;。それ以外の場合は、オペランドの値が比較されます。文字列は明白な方法で比較されます。同じ数学的値を表す場合、数値は同じです。</target>
        </trans-unit>
        <trans-unit id="8bba7708d9cd62b79eff18edb05f15a66e6e4fc3" translate="yes" xml:space="preserve">
          <source>Equality comparisons do not convert strings to numbers or vice versa. Thus, &lt;code&gt;&quot;0&quot;==0&lt;/code&gt; evaluates to &lt;b&gt;false&lt;/b&gt;, and &lt;code&gt;t[0]&lt;/code&gt; and &lt;code&gt;t[&quot;0&quot;]&lt;/code&gt; denote different entries in a table.</source>
          <target state="translated">等価比較では、文字列は数値に、またはその逆には変換されません。したがって、 &lt;code&gt;&quot;0&quot;==0&lt;/code&gt; は&lt;b&gt;false&lt;/b&gt;と評価され、 &lt;code&gt;t[0]&lt;/code&gt; と &lt;code&gt;t[&quot;0&quot;]&lt;/code&gt; はテーブル内の異なるエントリを示します。</target>
        </trans-unit>
        <trans-unit id="eeb6206afe341a7d07c673213b74b2763b8aad8a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#luaL_loadbufferx&quot;&gt;&lt;code&gt;luaL_loadbufferx&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;mode&lt;/code&gt; equal to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">同等の&lt;a href=&quot;#luaL_loadbufferx&quot;&gt; &lt;code&gt;luaL_loadbufferx&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;mode&lt;/code&gt; 等しく &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c5ac0bf4ab4157c76c5229bc6b001f02e1bbdbe" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#luaL_loadfilex&quot;&gt;&lt;code&gt;luaL_loadfilex&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;mode&lt;/code&gt; equal to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">同等の&lt;a href=&quot;#luaL_loadfilex&quot;&gt; &lt;code&gt;luaL_loadfilex&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;mode&lt;/code&gt; 等しく &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="417f3cabd0ae3b21c9200dade7625b6b803e2a8a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#luaL_prepbuffsize&quot;&gt;&lt;code&gt;luaL_prepbuffsize&lt;/code&gt;&lt;/a&gt; with the predefined size &lt;a id=&quot;pdf-LUAL_BUFFERSIZE&quot;&gt;&lt;code&gt;LUAL_BUFFERSIZE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">事前定義されたサイズ&lt;a href=&quot;#luaL_prepbuffsize&quot;&gt; &lt;code&gt;luaL_prepbuffsize&lt;/code&gt; &lt;/a&gt;持つluaL_prepbuffsizeと同等&lt;a id=&quot;pdf-LUAL_BUFFERSIZE&quot;&gt; &lt;code&gt;LUAL_BUFFERSIZE&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3bdbca26c05283a107728b580733fbf5005aa002" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#lua_pushfstring&quot;&gt;&lt;code&gt;lua_pushfstring&lt;/code&gt;&lt;/a&gt;, except that it receives a &lt;code&gt;va_list&lt;/code&gt; instead of a variable number of arguments.</source>
          <target state="translated">可変数の引数の代わりに &lt;code&gt;va_list&lt;/code&gt; を受け取ることを除いて、&lt;a href=&quot;#lua_pushfstring&quot;&gt; &lt;code&gt;lua_pushfstring&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="048179e8ca8eda05fb0bd3fd434b84a3be42d2f7" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#lua_tointegerx&quot;&gt;&lt;code&gt;lua_tointegerx&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;isnum&lt;/code&gt; equal to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">同等の&lt;a href=&quot;#lua_tointegerx&quot;&gt; &lt;code&gt;lua_tointegerx&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;isnum&lt;/code&gt; は等しく &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3eea1358153e9600e250e3541353b60210297af9" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;len&lt;/code&gt; equal to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">相当&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;len&lt;/code&gt; のに等しい &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="859cc0dd8a506649ee3ce18e480ee774adf2690e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;#lua_tonumberx&quot;&gt;&lt;code&gt;lua_tonumberx&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;isnum&lt;/code&gt; equal to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">同等の&lt;a href=&quot;#lua_tonumberx&quot;&gt; &lt;code&gt;lua_tonumberx&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;isnum&lt;/code&gt; は等しく &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f10e3538e7d3cff0cc3010f6eafa5510d5b4eabf" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;file:close()&lt;/code&gt;. Without a &lt;code&gt;file&lt;/code&gt;, closes the default output file.</source>
          <target state="translated">&lt;code&gt;file:close()&lt;/code&gt; と同等です。 &lt;code&gt;file&lt;/code&gt; ない場合、デフォルトの出力ファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="47bb85f8430ddf2501d6a1df9b4dd575ae0b94f6" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;io.input():read(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;io.input():read(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="b236c5a9b8def03419e72a62b54cf06568e7ac12" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;io.output():flush()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;io.output():flush()&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="f4a16ee993787daf20f8abfd04e25a53a52555ae" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;io.output():write(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;io.output():write(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="95841ee72cef3e69b1415de06e904a02c3a22ad7" translate="yes" xml:space="preserve">
          <source>Equivalent to the sequence &lt;a href=&quot;#luaL_addsize&quot;&gt;&lt;code&gt;luaL_addsize&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#luaL_pushresult&quot;&gt;&lt;code&gt;luaL_pushresult&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">シーケンス&lt;a href=&quot;#luaL_addsize&quot;&gt; &lt;code&gt;luaL_addsize&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#luaL_pushresult&quot;&gt; &lt;code&gt;luaL_pushresult&lt;/code&gt; と同等&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9a9197bd8cc7210e1d081737ce79a0004c900ea5" translate="yes" xml:space="preserve">
          <source>Equivalent to the sequence &lt;a href=&quot;#luaL_buffinit&quot;&gt;&lt;code&gt;luaL_buffinit&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#luaL_prepbuffsize&quot;&gt;&lt;code&gt;luaL_prepbuffsize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">シーケンス&lt;a href=&quot;#luaL_buffinit&quot;&gt; &lt;code&gt;luaL_buffinit&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#luaL_prepbuffsize&quot;&gt; &lt;code&gt;luaL_prepbuffsize&lt;/code&gt; と同等&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="efce06d9e3b29a083012c673a0d05df2af20d9a0" translate="yes" xml:space="preserve">
          <source>Even when we use the term &quot;function&quot;, any facility in the API may be provided as a macro instead. Except where stated otherwise, all such macros use each of their arguments exactly once (except for the first argument, which is always a Lua state), and so do not generate any hidden side-effects.</source>
          <target state="translated">関数」という言葉を使用している場合でも、API内の機能はマクロとして提供されることがあります。特に指定がない場合を除き、そのようなマクロはすべて、各引数を正確に一度だけ使用します(第一引数は常にLuaの状態であることを除いて)ので、隠れた副作用は発生しません。</target>
        </trans-unit>
        <trans-unit id="876b22e6469bec417ede0947f746abdd3c61cdc3" translate="yes" xml:space="preserve">
          <source>Every value in Lua can have a &lt;em&gt;metatable&lt;/em&gt;. This &lt;em&gt;metatable&lt;/em&gt; is an ordinary Lua table that defines the behavior of the original value under certain special operations. You can change several aspects of the behavior of operations over a value by setting specific fields in its metatable. For instance, when a non-numeric value is the operand of an addition, Lua checks for a function in the field &quot;&lt;code&gt;__add&lt;/code&gt;&quot; of the value's metatable. If it finds one, Lua calls this function to perform the addition.</source>
          <target state="translated">Luaのすべての値は&lt;em&gt;メタテーブル&lt;/em&gt;を持つことができます。この&lt;em&gt;メタ&lt;/em&gt;テーブルは、特定の特別な操作における元の値の動作を定義する通常のLuaテーブルです。メタテーブルに特定のフィールドを設定することにより、値に対する操作の動作のいくつかの側面を変更できます。たとえば、数値以外の値が加算のオペランドである場合、Lua は値のメタ &lt;code&gt;__add&lt;/code&gt; のフィールド「__add」で関数をチェックします。見つかった場合、Luaはこの関数を呼び出して追加を実行します。</target>
        </trans-unit>
        <trans-unit id="34fb3456225dbfac064754a0c940e7ab97d70dab" translate="yes" xml:space="preserve">
          <source>Examples of valid float constants are</source>
          <target state="translated">有効な float 定数の例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="dc9054ac99639aca0dedbf9ce85be2d8cb078353" translate="yes" xml:space="preserve">
          <source>Except for the basic and the package libraries, each library provides all its functions as fields of a global table or as methods of its objects.</source>
          <target state="translated">基本ライブラリとパッケージライブラリを除いて、各ライブラリはすべての関数をグローバルテーブルのフィールドとして、またはオブジェクトのメソッドとして提供します。</target>
        </trans-unit>
        <trans-unit id="a454333e5ab07af66349fc9dcc89eefc63ffc046" translate="yes" xml:space="preserve">
          <source>Exchange values between different threads of the same state.</source>
          <target state="translated">同じ状態の異なるスレッド間で値を交換します。</target>
        </trans-unit>
        <trans-unit id="8a70a348295e730e4d487448d5bdfd5d0a1f52d4" translate="yes" xml:space="preserve">
          <source>Explicit blocks are useful to control the scope of variable declarations. Explicit blocks are also sometimes used to add a &lt;b&gt;return&lt;/b&gt; statement in the middle of another block (see &lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4&lt;/a&gt;).</source>
          <target state="translated">明示的なブロックは、変数宣言のスコープを制御するのに役立ちます。明示的なブロックは、別のブロックの途中に&lt;b&gt;return&lt;/b&gt;ステートメントを追加する場合にも使用されます（&lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6068d6a6087004b84e19a26f762381a6d306ebf7" translate="yes" xml:space="preserve">
          <source>Exponentiation and float division (&lt;code&gt;/&lt;/code&gt;) always convert their operands to floats and the result is always a float. Exponentiation uses the ISO C function &lt;code&gt;pow&lt;/code&gt;, so that it works for non-integer exponents too.</source>
          <target state="translated">指数および浮動小数点除算（ &lt;code&gt;/&lt;/code&gt; ）は、常にそれらのオペランドを浮動小数点数に変換し、結果は常に浮動小数点数です。指数はISO C関数 &lt;code&gt;pow&lt;/code&gt; を使用するため、整数以外の指数でも機能します。</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="3403002da8268dbb07086fbb61ed468d09402d3c" translate="yes" xml:space="preserve">
          <source>Expressions are discussed in &lt;a href=&quot;#3.4&quot;&gt;&amp;sect;3.4&lt;/a&gt;.</source>
          <target state="translated">式については、&lt;a href=&quot;#3.4&quot;&gt;&amp;sect;3.4で&lt;/a&gt;説明します。</target>
        </trans-unit>
        <trans-unit id="952220342168dc20bbaf6ee3888975552b5929df" translate="yes" xml:space="preserve">
          <source>Finish by calling &lt;code&gt;luaL_pushresult(&amp;amp;b)&lt;/code&gt;. This call leaves the final string on the top of the stack.</source>
          <target state="translated">&lt;code&gt;luaL_pushresult(&amp;amp;b)&lt;/code&gt; を呼び出して終了します。この呼び出しは、最終的な文字列をスタックの一番上に残します。</target>
        </trans-unit>
        <trans-unit id="e24c3abeab89141035172a8f0844d2e645ae86bc" translate="yes" xml:space="preserve">
          <source>Finish by calling &lt;code&gt;luaL_pushresultsize(&amp;amp;b, sz)&lt;/code&gt;, where &lt;code&gt;sz&lt;/code&gt; is the total size of the resulting string copied into that space.</source>
          <target state="translated">&lt;code&gt;luaL_pushresultsize(&amp;amp;b, sz)&lt;/code&gt; 呼び出して終了します。ここで、 &lt;code&gt;sz&lt;/code&gt; は、そのスペースにコピーされた結果の文字列の合計サイズです。</target>
        </trans-unit>
        <trans-unit id="fa1b0bd32568564210439e9f8bbb29579af4e8f6" translate="yes" xml:space="preserve">
          <source>Finishes the use of buffer &lt;code&gt;B&lt;/code&gt; leaving the final string on the top of the stack.</source>
          <target state="translated">バッファ &lt;code&gt;B&lt;/code&gt; の使用を終了し、最後の文字列をスタックの一番上に残します。</target>
        </trans-unit>
        <trans-unit id="9581cd1476458beea36edaaa1aab1a70ddd9b799" translate="yes" xml:space="preserve">
          <source>First &lt;code&gt;require&lt;/code&gt; queries &lt;code&gt;package.preload[modname]&lt;/code&gt;. If it has a value, this value (which must be a function) is the loader. Otherwise &lt;code&gt;require&lt;/code&gt; searches for a Lua loader using the path stored in &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt;. If that also fails, it searches for a C loader using the path stored in &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt;. If that also fails, it tries an &lt;em&gt;all-in-one&lt;/em&gt; loader (see &lt;a href=&quot;#pdf-package.searchers&quot;&gt;&lt;code&gt;package.searchers&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">まずクエリ &lt;code&gt;package.preload[modname]&lt;/code&gt; &lt;code&gt;require&lt;/code&gt; です。値がある場合、この値（関数でなければなりません）がローダーです。それ以外の場合 &lt;code&gt;require&lt;/code&gt; 、&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; に&lt;/a&gt;格納されているパスを使用してLuaローダーを検索する必要があります。それも失敗した場合は、&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; に&lt;/a&gt;格納されているパスを使用してCローダーを検索します。それも失敗した場合は、&lt;em&gt;オールインワン&lt;/em&gt;ローダーを試みます（&lt;a href=&quot;#pdf-package.searchers&quot;&gt; &lt;code&gt;package.searchers&lt;/code&gt; を&lt;/a&gt;参照）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cf6993356b76fa41b8a9a12311a4583412cacf12" translate="yes" xml:space="preserve">
          <source>First declare a variable &lt;code&gt;b&lt;/code&gt; of type &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最初に、タイプ&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; の&lt;/a&gt;変数 &lt;code&gt;b&lt;/code&gt; を宣言します。</target>
        </trans-unit>
        <trans-unit id="b2d47a74b914f2999fca9d267f869c38ca08b9e6" translate="yes" xml:space="preserve">
          <source>Floor division (&lt;code&gt;//&lt;/code&gt;) is a division that rounds the quotient towards minus infinity, that is, the floor of the division of its operands.</source>
          <target state="translated">床除算（ &lt;code&gt;//&lt;/code&gt; ）は、商をマイナス無限大、つまりそのオペランドの除算の床に丸める除算です。</target>
        </trans-unit>
        <trans-unit id="9578580e96abd6dc66d3f4a9ec50cb8852f521d3" translate="yes" xml:space="preserve">
          <source>Following the IEEE 754 standard, NaN is considered neither smaller than, nor equal to, nor greater than any value (including itself).</source>
          <target state="translated">IEEE 754規格に従い、NaNはいかなる値(それ自体を含む)よりも小さくもなく、それと同等でもなく、それ以上でもないと考えられています。</target>
        </trans-unit>
        <trans-unit id="7968a691f0ed611daf368a38173ca221f41fe6c2" translate="yes" xml:space="preserve">
          <source>For C functions, this function uses the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt; as a name for all upvalues. (For Lua functions, upvalues are the external local variables that the function uses, and that are consequently included in its closure.)</source>
          <target state="translated">C関数の場合、この関数はすべてのアップバリューの名前として空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; を使用します。（Lua関数の場合、upvalueは、関数が使用する外部ローカル変数であり、その結果、クロージャーに含まれます。）</target>
        </trans-unit>
        <trans-unit id="826bad097a9af03241478f133b816c28a093c4ff" translate="yes" xml:space="preserve">
          <source>For Statement</source>
          <target state="translated">ステートメントについて</target>
        </trans-unit>
        <trans-unit id="232d13ae76c1a448a0dbe30fce0093b7011c947c" translate="yes" xml:space="preserve">
          <source>For all classes represented by single letters (&lt;code&gt;%a&lt;/code&gt;, &lt;code&gt;%c&lt;/code&gt;, etc.), the corresponding uppercase letter represents the complement of the class. For instance, &lt;code&gt;%S&lt;/code&gt; represents all non-space characters.</source>
          <target state="translated">1つの文字（ &lt;code&gt;%a&lt;/code&gt; 、 &lt;code&gt;%c&lt;/code&gt; など）で表されるすべてのクラスでは、対応する大文字はクラスの補数を表します。たとえば、 &lt;code&gt;%S&lt;/code&gt; はすべての非スペース文字を表します。</target>
        </trans-unit>
        <trans-unit id="b277899f2ddc10d7e3dad8301744987f188c3222" translate="yes" xml:space="preserve">
          <source>For an object (table or userdata) to be finalized when collected, you must &lt;em&gt;mark&lt;/em&gt; it for finalization. You mark an object for finalization when you set its metatable and the metatable has a field indexed by the string &quot;&lt;code&gt;__gc&lt;/code&gt;&quot;. Note that if you set a metatable without a &lt;code&gt;__gc&lt;/code&gt; field and later create that field in the metatable, the object will not be marked for finalization.</source>
          <target state="translated">収集時にオブジェクト（テーブルまたはユーザーデータ）をファイナライズするには、ファイナライズするように&lt;em&gt;マークを付ける&lt;/em&gt;必要があります。メタテーブルを設定し、メタテーブルに文字列「 &lt;code&gt;__gc&lt;/code&gt; 」でインデックス付けされたフィールドがある場合、オブジェクトにファイナライズのマークを付けます。 &lt;code&gt;__gc&lt;/code&gt; フィールドなしでメタテーブルを設定し、後でそのフィールドをメタテーブルに作成した場合、オブジェクトはファイナライズ用にマークされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="21127f5444f9175d599260124aacb43b3cb15bde" translate="yes" xml:space="preserve">
          <source>For call events, &lt;code&gt;event&lt;/code&gt; can be &lt;code&gt;LUA_HOOKCALL&lt;/code&gt;, the normal value, or &lt;code&gt;LUA_HOOKTAILCALL&lt;/code&gt;, for a tail call; in this case, there will be no corresponding return event.</source>
          <target state="translated">呼び出しイベントの場合、 &lt;code&gt;event&lt;/code&gt; は &lt;code&gt;LUA_HOOKCALL&lt;/code&gt; （通常の値）、または末尾呼び出しの場合は &lt;code&gt;LUA_HOOKTAILCALL&lt;/code&gt; です。この場合、対応するreturnイベントはありません。</target>
        </trans-unit>
        <trans-unit id="ef19782c3b513548f8d3e4e46e68c607de619e6c" translate="yes" xml:space="preserve">
          <source>For convenience, most query operations in the API do not follow a strict stack discipline. Instead, they can refer to any element in the stack by using an &lt;em&gt;index&lt;/em&gt;: A positive index represents an absolute stack position (starting at 1); a negative index represents an offset relative to the top of the stack. More specifically, if the stack has &lt;em&gt;n&lt;/em&gt; elements, then index 1 represents the first element (that is, the element that was pushed onto the stack first) and index &lt;em&gt;n&lt;/em&gt; represents the last element; index -1 also represents the last element (that is, the element at the top) and index &lt;em&gt;-n&lt;/em&gt; represents the first element.</source>
          <target state="translated">便宜上、APIのほとんどのクエリ操作は、厳密なスタック規則に従っていません。代わりに、&lt;em&gt;インデックス&lt;/em&gt;を使用してスタック内の任意の要素を参照でき&lt;em&gt;ます&lt;/em&gt;。正のインデックスは、スタックの絶対位置（1から開始）を表します。負のインデックスは、スタックの最上部に対するオフセットを表します。より具体的には、スタックに&lt;em&gt;n個の&lt;/em&gt;要素がある場合、インデックス1は最初の要素（つまり、最初にスタックにプッシュされた要素）を表し、インデックス&lt;em&gt;n&lt;/em&gt;は最後の要素を表します。インデックス-1は最後の要素（つまり、一番上の要素）も表し、インデックス&lt;em&gt;-n&lt;/em&gt;は最初の要素を表します。</target>
        </trans-unit>
        <trans-unit id="e8e7817ee2d33410b37da66bff2f4abc60fd9f19" translate="yes" xml:space="preserve">
          <source>For convenience, when the opening long bracket is immediately followed by a newline, the newline is not included in the string. As an example, in a system using ASCII (in which '&lt;code&gt;a&lt;/code&gt;' is coded as 97, newline is coded as 10, and '&lt;code&gt;1&lt;/code&gt;' is coded as 49), the five literal strings below denote the same string:</source>
          <target state="translated">便宜上、開始の長いブラケットの直後に改行が続く場合、その改行は文字列に含まれません。例として、ASCIIを使用するシステム（ ' &lt;code&gt;a&lt;/code&gt; 'が97としてコーディングされ、改行が10としてコーディングされ、 ' &lt;code&gt;1&lt;/code&gt; 'が49としてコーディングされる）では、以下の5つのリテラル文字列は同じ文字列を示します。</target>
        </trans-unit>
        <trans-unit id="c75b8f31dba0d91bae695aa013d0381fc16c8094" translate="yes" xml:space="preserve">
          <source>For functions that can be called with acceptable indices, any non-valid index is treated as if it contains a value of a virtual type &lt;a id=&quot;pdf-LUA_TNONE&quot;&gt;&lt;code&gt;LUA_TNONE&lt;/code&gt;&lt;/a&gt;, which behaves like a nil value.</source>
          <target state="translated">受け入れ可能なインデックスで呼び出すことができる関数の場合、無効なインデックスは、nil値のように動作する仮想タイプ&lt;a id=&quot;pdf-LUA_TNONE&quot;&gt; &lt;code&gt;LUA_TNONE&lt;/code&gt; の&lt;/a&gt;値が含まれているものとして扱われます。</target>
        </trans-unit>
        <trans-unit id="a31447203fafe5a4da4338521a4a4fb721154e10" translate="yes" xml:space="preserve">
          <source>For instance, if the path is the string</source>
          <target state="translated">例えば、パスが文字列</target>
        </trans-unit>
        <trans-unit id="ea7d77d2e3991db06f939eac321dd577052affc3" translate="yes" xml:space="preserve">
          <source>For instance, the expression &lt;code&gt;debug.getinfo(1,&quot;n&quot;).name&lt;/code&gt; returns a name for the current function, if a reasonable name can be found, and the expression &lt;code&gt;debug.getinfo(print)&lt;/code&gt; returns a table with all available information about the &lt;a href=&quot;#pdf-print&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">たとえば、式 &lt;code&gt;debug.getinfo(1,&quot;n&quot;).name&lt;/code&gt; は、適切な名前が見つかった場合、現在の関数の名前を返し、式 &lt;code&gt;debug.getinfo(print)&lt;/code&gt; は、利用可能なすべての情報を含むテーブルを返します。&lt;a href=&quot;#pdf-print&quot;&gt; &lt;code&gt;print&lt;/code&gt; &lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="f325475ad152d3908d4847a20ea6df37fed2cc91" translate="yes" xml:space="preserve">
          <source>For more details about these options, see &lt;a href=&quot;#pdf-collectgarbage&quot;&gt;&lt;code&gt;collectgarbage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのオプションの詳細については、&lt;a href=&quot;#pdf-collectgarbage&quot;&gt; &lt;code&gt;collectgarbage&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="34c0c487495b8d4cfa8ec08b6a774ef30e784f4f" translate="yes" xml:space="preserve">
          <source>For options &quot;&lt;code&gt;!&lt;em&gt;n&lt;/em&gt;&lt;/code&gt;&quot;, &quot;&lt;code&gt;s&lt;em&gt;n&lt;/em&gt;&lt;/code&gt;&quot;, &quot;&lt;code&gt;i&lt;em&gt;n&lt;/em&gt;&lt;/code&gt;&quot;, and &quot;&lt;code&gt;I&lt;em&gt;n&lt;/em&gt;&lt;/code&gt;&quot;, &lt;code&gt;n&lt;/code&gt; can be any integer between 1 and 16. All integral options check overflows; &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt; checks whether the given value fits in the given size; &lt;a href=&quot;#pdf-string.unpack&quot;&gt;&lt;code&gt;string.unpack&lt;/code&gt;&lt;/a&gt; checks whether the read value fits in a Lua integer.</source>
          <target state="translated">オプション &quot; &lt;code&gt;!&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; &quot;、 &quot; &lt;code&gt;s&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; &quot;、 &quot; &lt;code&gt;i&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; &quot;、および &quot; &lt;code&gt;I&lt;em&gt;n&lt;/em&gt;&lt;/code&gt; &quot;の場合、 &lt;code&gt;n&lt;/code&gt; は1から16までの任意の整数にできます。すべての整数オプションはオーバーフローをチェックします。&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; &lt;/a&gt;は、指定された値が指定されたサイズに収まるかどうかを確認します。&lt;a href=&quot;#pdf-string.unpack&quot;&gt; &lt;code&gt;string.unpack&lt;/code&gt; &lt;/a&gt;は、読み取った値がLua整数に収まるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f81592a23f0c3cfdc23fb61def4f995f00f7e4be" translate="yes" xml:space="preserve">
          <source>For the last two cases, &lt;code&gt;size&lt;/code&gt; specifies the size of the buffer, in bytes. The default is an appropriate size.</source>
          <target state="translated">最後の2つのケースでは、 &lt;code&gt;size&lt;/code&gt; はバッファーのサイズをバイト単位で指定します。デフォルトは適切なサイズです。</target>
        </trans-unit>
        <trans-unit id="f0c4dd09d2da4ac2d83e7333654eda3bf03b94aa" translate="yes" xml:space="preserve">
          <source>For the unary operators (negation, length, and bitwise NOT), the metamethod is computed and called with a dummy second operand, equal to the first one. This extra operand is only to simplify Lua's internals (by making these operators behave like a binary operation) and may be removed in future versions. (For most uses this extra operand is irrelevant.)</source>
          <target state="translated">単項演算子 (否定、長さ、ビットごとの NOT)については、メタメソッドが計算され、最初のオペランドと等しいダミーの第二オペランドを使って呼び出されます。この余分なオペランドは、Luaの内部を単純化するためのものであり、将来のバージョンでは削除される可能性があります(ほとんどの用途では、この余分なオペランドは不要です)。(ほとんどの用途では、この余分なオペランドは関係ありません)</target>
        </trans-unit>
        <trans-unit id="9bee60d752066315e8c5d61073cf8553d9376cba" translate="yes" xml:space="preserve">
          <source>For this function, a caret '&lt;code&gt;^&lt;/code&gt;' at the start of a pattern does not work as an anchor, as this would prevent the iteration.</source>
          <target state="translated">この関数では、パターンの先頭にあるキャレット ' &lt;code&gt;^&lt;/code&gt; 'はアンカーとして機能しません。これにより、反復が妨げられます。</target>
        </trans-unit>
        <trans-unit id="399be06d89bf8fe00ffb06cec99c776653b07ce7" translate="yes" xml:space="preserve">
          <source>Format Strings for Pack and Unpack</source>
          <target state="translated">パックとアンパックのための文字列の書式設定</target>
        </trans-unit>
        <trans-unit id="530d75eed648d882414a993d7c2be06a4295791d" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt; has an extra parameter, &lt;code&gt;strip&lt;/code&gt;. Use 0 as the value of this parameter to get the old behavior.</source>
          <target state="translated">関数&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;には追加のパラメーター &lt;code&gt;strip&lt;/code&gt; があります。このパラメーターの値として0を使用して、古い動作を取得します。</target>
        </trans-unit>
        <trans-unit id="d8cdf10face49f05a0d7bce562c1cbcff9eeec04" translate="yes" xml:space="preserve">
          <source>Function Calls</source>
          <target state="translated">関数呼び出し</target>
        </trans-unit>
        <trans-unit id="4b57ecf18e5d2f870512efd9673b84b72878ac94" translate="yes" xml:space="preserve">
          <source>Function Calls as Statements</source>
          <target state="translated">ステートメントとしての関数呼び出し</target>
        </trans-unit>
        <trans-unit id="92923ba91494ddefbc1f5287cf60c97558518359" translate="yes" xml:space="preserve">
          <source>Function Definitions</source>
          <target state="translated">関数の定義</target>
        </trans-unit>
        <trans-unit id="a8675a73106b372729db5f272e24a7c2891c266a" translate="yes" xml:space="preserve">
          <source>Function calls and assignments can start with an open parenthesis. This possibility leads to an ambiguity in Lua's grammar. Consider the following fragment:</source>
          <target state="translated">関数の呼び出しや割り当ては、オープンカッコで始まることがあります。このような可能性があると、Lua の文法が曖昧になってしまいます。次のフラグメントを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="723bc3c839b5efbdcf6d6d540aec9e08e9a27818" translate="yes" xml:space="preserve">
          <source>Functions called &lt;code&gt;luaL_check*&lt;/code&gt; always raise an error if the check is not satisfied.</source>
          <target state="translated">&lt;code&gt;luaL_check*&lt;/code&gt; と呼ばれる関数は、チェックが満たされない場合は常にエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="5c702d0533cf7bf413cae345667e4f93afbda238" translate="yes" xml:space="preserve">
          <source>Functions that do not need a specific mutable position, but only a value (e.g., query functions), can be called with acceptable indices. An &lt;em&gt;acceptable index&lt;/em&gt; can be any valid index, but it also can be any positive index after the stack top within the space allocated for the stack, that is, indices up to the stack size. (Note that 0 is never an acceptable index.) Except when noted otherwise, functions in the API work with acceptable indices.</source>
          <target state="translated">特定の変更可能な位置を必要とせず、値（クエリ関数など）のみを必要とする関数は、許容可能なインデックスで呼び出すことができます。&lt;em&gt;受け入れ可能なインデックスは、&lt;/em&gt;任意の有効な指標となるが、それはまた、スタックサイズまでの指標であるスタックに割り当てられた領域内のスタックトップの後、任意の正の指標とすることができます。（0は決して許容できるインデックスではないことに注意してください。）特に明記されていない限り、APIの関数は許容可能なインデックスで機能します。</target>
        </trans-unit>
        <trans-unit id="a1a5aae46bd7798a00126da19dd14418bb7e3eb8" translate="yes" xml:space="preserve">
          <source>Functions to inject/project unsigned integers (&lt;code&gt;lua_pushunsigned&lt;/code&gt;, &lt;code&gt;lua_tounsigned&lt;/code&gt;, &lt;code&gt;lua_tounsignedx&lt;/code&gt;, &lt;code&gt;luaL_checkunsigned&lt;/code&gt;, &lt;code&gt;luaL_optunsigned&lt;/code&gt;) were deprecated. Use their signed equivalents with a type cast.</source>
          <target state="translated">符号なし整数を挿入/投影する関数（ &lt;code&gt;lua_pushunsigned&lt;/code&gt; 、 &lt;code&gt;lua_tounsigned&lt;/code&gt; 、 &lt;code&gt;lua_tounsignedx&lt;/code&gt; 、 &lt;code&gt;luaL_checkunsigned&lt;/code&gt; 、 &lt;code&gt;luaL_optunsigned&lt;/code&gt; ）は非推奨になりました。型キャストでそれらの同等の署名を使用します。</target>
        </trans-unit>
        <trans-unit id="399c67992893454b594db8a5c3ddb1835002a32d" translate="yes" xml:space="preserve">
          <source>Functions with upvalues have only their number of upvalues saved. When (re)loaded, those upvalues receive fresh instances containing &lt;b&gt;nil&lt;/b&gt;. (You can use the debug library to serialize and reload the upvalues of a function in a way adequate to your needs.)</source>
          <target state="translated">アップバリューを持つ関数は、保存されているアップバリューの数のみを持ちます。（再）ロードされると、それらのアップバリューは&lt;b&gt;nil&lt;/b&gt;を含む新しいインスタンスを受け取ります。（デバッグライブラリを使用して、必要に応じた方法で関数のアップバリューをシリアル化および再ロードできます。）</target>
        </trans-unit>
        <trans-unit id="5b32b8542e4c8854b05455c0b114c2bdced713ad" translate="yes" xml:space="preserve">
          <source>Garbage Collection</source>
          <target state="translated">ゴミの収集</target>
        </trans-unit>
        <trans-unit id="f6855bbf563c59c18fc37154e4af975ae952d5a4" translate="yes" xml:space="preserve">
          <source>Garbage-Collection Metamethods</source>
          <target state="translated">ガベージコレクションメタメソッド</target>
        </trans-unit>
        <trans-unit id="313100c75a8533ab565e1eb0ac9c81f85a7c5073" translate="yes" xml:space="preserve">
          <source>Generates a Lua error, using the value at the top of the stack as the error object. This function does a long jump, and therefore never returns (see &lt;a href=&quot;#luaL_error&quot;&gt;&lt;code&gt;luaL_error&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">スタックの一番上の値をエラーオブジェクトとして使用して、Luaエラーを生成します。この関数はロングジャンプを行うため、戻りません（&lt;a href=&quot;#luaL_error&quot;&gt; &lt;code&gt;luaL_error&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c0be169e33a9a31268a5328272fe2fa469b1c7ec" translate="yes" xml:space="preserve">
          <source>Gets information about a local variable of a given activation record or a given function.</source>
          <target state="translated">指定された活性化レコードまたは指定された関数のローカル変数に関する情報を取得します。</target>
        </trans-unit>
        <trans-unit id="5cf3ef7371f5378d8e58a5b0757ef77be8111cff" translate="yes" xml:space="preserve">
          <source>Gets information about a specific function or function invocation.</source>
          <target state="translated">特定の関数または関数の呼び出しに関する情報を取得します。</target>
        </trans-unit>
        <trans-unit id="5d07f6c25730366d5782ddf2124f63eacbe7a041" translate="yes" xml:space="preserve">
          <source>Gets information about the &lt;code&gt;n&lt;/code&gt;-th upvalue of the closure at index &lt;code&gt;funcindex&lt;/code&gt;. It pushes the upvalue's value onto the stack and returns its name. Returns &lt;code&gt;NULL&lt;/code&gt; (and pushes nothing) when the index &lt;code&gt;n&lt;/code&gt; is greater than the number of upvalues.</source>
          <target state="translated">インデックス &lt;code&gt;funcindex&lt;/code&gt; のクロージャの &lt;code&gt;n&lt;/code&gt; 番目のアップバリューに関する情報を取得します。アップバリューの値をスタックにプッシュし、その名前を返します。インデックス &lt;code&gt;n&lt;/code&gt; がアップ値の数より大きい場合、 &lt;code&gt;NULL&lt;/code&gt; を返します（何もプッシュしません）。</target>
        </trans-unit>
        <trans-unit id="62c6dfe4bd33a93e8e74cb65c4ff32424b3ecf7b" translate="yes" xml:space="preserve">
          <source>Gets information about the interpreter runtime stack.</source>
          <target state="translated">インタプリタのランタイムスタックの情報を取得します。</target>
        </trans-unit>
        <trans-unit id="0b201abab8551378dd82fcd0d47c8bebaab95fa2" translate="yes" xml:space="preserve">
          <source>Gets the real value of &lt;code&gt;table[index]&lt;/code&gt;, without invoking the &lt;code&gt;__index&lt;/code&gt; metamethod. &lt;code&gt;table&lt;/code&gt; must be a table; &lt;code&gt;index&lt;/code&gt; may be any value.</source>
          <target state="translated">&lt;code&gt;__index&lt;/code&gt; メタメソッドを呼び出さずに、 &lt;code&gt;table[index]&lt;/code&gt; の実際の値を取得します。 &lt;code&gt;table&lt;/code&gt; はテーブルでなければなりません。 &lt;code&gt;index&lt;/code&gt; は任意の値です。</target>
        </trans-unit>
        <trans-unit id="91020a88f59d9c8fbc1c662bdb6eda5896f6dbfe" translate="yes" xml:space="preserve">
          <source>Given a list where all elements are strings or numbers, returns the string &lt;code&gt;list[i]..sep..list[i+1] &amp;middot;&amp;middot;&amp;middot; sep..list[j]&lt;/code&gt;. The default value for &lt;code&gt;sep&lt;/code&gt; is the empty string, the default for &lt;code&gt;i&lt;/code&gt; is 1, and the default for &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;#list&lt;/code&gt;. If &lt;code&gt;i&lt;/code&gt; is greater than &lt;code&gt;j&lt;/code&gt;, returns the empty string.</source>
          <target state="translated">すべての要素が文字列または数値である &lt;code&gt;list[i]..sep..list[i+1] &amp;middot;&amp;middot;&amp;middot; sep..list[j]&lt;/code&gt; すると、文字列list [i] .. sep..list [i + 1]&amp;middot;&amp;middot;&amp;middot;sep..list [j]を返します。 &lt;code&gt;sep&lt;/code&gt; のデフォルト値は空の文字列、 &lt;code&gt;i&lt;/code&gt; のデフォルト値は1、 &lt;code&gt;j&lt;/code&gt; のデフォルト値は &lt;code&gt;#list&lt;/code&gt; です。 &lt;code&gt;i&lt;/code&gt; が &lt;code&gt;j&lt;/code&gt; より大きい場合、空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="b57745f04b18114e4271e54461167a450eab4e48" translate="yes" xml:space="preserve">
          <source>Grows the stack size to &lt;code&gt;top + sz&lt;/code&gt; elements, raising an error if the stack cannot grow to that size. &lt;code&gt;msg&lt;/code&gt; is an additional text to go into the error message (or &lt;code&gt;NULL&lt;/code&gt; for no additional text).</source>
          <target state="translated">スタックサイズを &lt;code&gt;top + sz&lt;/code&gt; 要素まで拡大し、スタックがそのサイズまで拡大できない場合はエラーを発生させます。 &lt;code&gt;msg&lt;/code&gt; は、エラーメッセージに入る追加のテキストです（追加のテキストがない場合は &lt;code&gt;NULL&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0931022beea83b3afc095873234631b7243eeca4" translate="yes" xml:space="preserve">
          <source>Here are some examples:</source>
          <target state="translated">ここでは、いくつかの例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="4b1c6bd65c741e8ff2d3bbd3ff2fc22c3d2a47ba" translate="yes" xml:space="preserve">
          <source>Here is a simple implementation for the allocator function. It is used in the auxiliary library by &lt;a href=&quot;#luaL_newstate&quot;&gt;&lt;code&gt;luaL_newstate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次に、アロケータ関数の簡単な実装を示します。これは、補助ライブラリで&lt;a href=&quot;#luaL_newstate&quot;&gt; &lt;code&gt;luaL_newstate&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="d1dab51e6891f4e284fffd166a6bd35c869f4cc2" translate="yes" xml:space="preserve">
          <source>Here is the complete syntax of Lua in extended BNF. As usual in extended BNF, {A} means 0 or more As, and [A] means an optional A. (For operator precedences, see &lt;a href=&quot;#3.4.8&quot;&gt;&amp;sect;3.4.8&lt;/a&gt;; for a description of the terminals Name, Numeral, and LiteralString, see &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;.)</source>
          <target state="translated">拡張BNFでのLuaの完全な構文は次のとおりです。拡張BNFでいつものように、{A}は0以上として、かつ[A]任意の手段A.（オペレータの優先順位については、手段&lt;a href=&quot;#3.4.8&quot;&gt;&amp;sect;3.4.8の&lt;/a&gt;端子名、数字、及びLITERALSTRINGの説明については、参照、&lt;a href=&quot;#3.1&quot;&gt;&amp;sect; 3.1&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="ded763c4029757dddf3f7027714a4cf075c2d5bd" translate="yes" xml:space="preserve">
          <source>Here it is in C:</source>
          <target state="translated">ここではCです。</target>
        </trans-unit>
        <trans-unit id="3f274b8694db69b484f40f23944a016b4fffa6f3" translate="yes" xml:space="preserve">
          <source>Here we list all functions and types from the C API in alphabetical order. Each function has an indicator like this:</source>
          <target state="translated">ここでは、C APIのすべての関数と型をアルファベット順にリストアップしています。各関数にはこのようなインジケータがあります。</target>
        </trans-unit>
        <trans-unit id="759a7b44d9cbdbdff0c6256556529057e71e4bfc" translate="yes" xml:space="preserve">
          <source>Here we list all functions and types from the auxiliary library in alphabetical order.</source>
          <target state="translated">ここでは、補助ライブラリのすべての関数と型をアルファベット順にリストアップしています。</target>
        </trans-unit>
        <trans-unit id="5ef4637da05a815223e812a542adefe907813773" translate="yes" xml:space="preserve">
          <source>Here we list the incompatibilities that you may find when moving a program from Lua 5.2 to Lua 5.3. You can avoid some incompatibilities by compiling Lua with appropriate options (see file &lt;code&gt;luaconf.h&lt;/code&gt;). However, all these compatibility options will be removed in the future.</source>
          <target state="translated">ここでは、Lua 5.2からLua 5.3にプログラムを移動するときに検出される非互換性を示します。Luaを適切なオプションでコンパイルすることにより、いくつかの非互換性を回避できます（ &lt;code&gt;luaconf.h&lt;/code&gt; ファイルを参照）。ただし、これらの互換性オプションはすべて将来削除される予定です。</target>
        </trans-unit>
        <trans-unit id="6e8633ec37fd0a545b50c273991305c0a0ccd6af" translate="yes" xml:space="preserve">
          <source>Hook functions can yield under the following conditions: Only count and line events can yield; to yield, a hook function must finish its execution calling &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;nresults&lt;/code&gt; equal to zero (that is, with no values).</source>
          <target state="translated">フック関数は、次の条件下で生成できます。生成できるのは、カウントイベントとラインイベントだけです。&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; &lt;/a&gt;するには、フック関数は、 &lt;code&gt;nresults&lt;/code&gt; がゼロに等しい（つまり、値がない）状態でlua_yieldを呼び出して実行を終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="57503e65706288b8ec579f8045e20e5c7fc42803" translate="yes" xml:space="preserve">
          <source>Hook functions cannot have continuations, that is, they cannot call &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt; with a non-null &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="translated">フック関数は継続を持つことができません。つまり、非null &lt;code&gt;k&lt;/code&gt; で&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="c0c8d828197edf926fd895a22fd233a53985fe4e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;chunk&lt;/code&gt; is a string, the chunk is this string. If &lt;code&gt;chunk&lt;/code&gt; is a function, &lt;code&gt;load&lt;/code&gt; calls it repeatedly to get the chunk pieces. Each call to &lt;code&gt;chunk&lt;/code&gt; must return a string that concatenates with previous results. A return of an empty string, &lt;b&gt;nil&lt;/b&gt;, or no value signals the end of the chunk.</source>
          <target state="translated">場合 &lt;code&gt;chunk&lt;/code&gt; 文字列で、チャンクはこの文字列です。 &lt;code&gt;chunk&lt;/code&gt; が関数の場合、 &lt;code&gt;load&lt;/code&gt; はそれを繰り返し呼び出してチャンクピースを取得します。 &lt;code&gt;chunk&lt;/code&gt; を呼び出すたびに、以前の結果と連結した文字列を返す必要があります。空の文字列&lt;b&gt;nilが&lt;/b&gt;返されるか、値が返されない場合は、チャンクの終わりを示します。</target>
        </trans-unit>
        <trans-unit id="56626a6306a0218f5ebc2bc99df5b09f8b5d3616" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;def&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, the function uses &lt;code&gt;def&lt;/code&gt; as a default value when there is no argument &lt;code&gt;arg&lt;/code&gt; or when this argument is &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;def&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、引数 &lt;code&gt;arg&lt;/code&gt; がない場合、またはこの引数が&lt;b&gt;nilの&lt;/b&gt;場合、関数は &lt;code&gt;def&lt;/code&gt; をデフォルト値として使用します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d7b55b3722d0d97704dcddb34cbf9bcdade76ec4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;format&lt;/code&gt; is not &quot;&lt;code&gt;*t&lt;/code&gt;&quot;, then &lt;code&gt;date&lt;/code&gt; returns the date as a string, formatted according to the same rules as the ISO C function &lt;code&gt;strftime&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; が &quot; &lt;code&gt;*t&lt;/code&gt; &quot;でない場合、 &lt;code&gt;date&lt;/code&gt; は、ISO C関数 &lt;code&gt;strftime&lt;/code&gt; と同じ規則に従ってフォーマットされた日付を文字列として返します。</target>
        </trans-unit>
        <trans-unit id="506e40ff0a74eaa2a16ebe55cc542c656b7d6688" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;format&lt;/code&gt; starts with '&lt;code&gt;!&lt;/code&gt;', then the date is formatted in Coordinated Universal Time. After this optional character, if &lt;code&gt;format&lt;/code&gt; is the string &quot;&lt;code&gt;*t&lt;/code&gt;&quot;, then &lt;code&gt;date&lt;/code&gt; returns a table with the following fields: &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt; (1&amp;ndash;12), &lt;code&gt;day&lt;/code&gt; (1&amp;ndash;31), &lt;code&gt;hour&lt;/code&gt; (0&amp;ndash;23), &lt;code&gt;min&lt;/code&gt; (0&amp;ndash;59), &lt;code&gt;sec&lt;/code&gt; (0&amp;ndash;61), &lt;code&gt;wday&lt;/code&gt; (weekday, 1&amp;ndash;7, Sunday is 1), &lt;code&gt;yday&lt;/code&gt; (day of the year, 1&amp;ndash;366), and &lt;code&gt;isdst&lt;/code&gt; (daylight saving flag, a boolean). This last field may be absent if the information is not available.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; が ' &lt;code&gt;!&lt;/code&gt; で始まる場合'の場合、日付は協定世界時でフォーマットされます。このオプション文字の後、 &lt;code&gt;format&lt;/code&gt; が文字列 &quot; &lt;code&gt;*t&lt;/code&gt; &quot;の場合、 &lt;code&gt;date&lt;/code&gt; は、 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; （1〜12）、 &lt;code&gt;day&lt;/code&gt; （1〜31）、 &lt;code&gt;hour&lt;/code&gt; （0〜23）、 &lt;code&gt;min&lt;/code&gt; （ 0&amp;ndash;59）、 &lt;code&gt;sec&lt;/code&gt; （0&amp;ndash;61）、 &lt;code&gt;wday&lt;/code&gt; （平日、1&amp;ndash;7、日曜日は1）、 &lt;code&gt;yday&lt;/code&gt; （年間通算日、1&amp;ndash;366）、および &lt;code&gt;isdst&lt;/code&gt; （夏時間フラグ、ブール）。情報が利用できない場合、この最後のフィールドは存在しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="8190672d8b6e5a23cf38bf7fd250cf0fc81f9304" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;funcname&lt;/code&gt; is &quot;&lt;code&gt;*&lt;/code&gt;&quot;, then it only links with the library, making the symbols exported by the library available to other dynamically linked libraries. Otherwise, it looks for a function &lt;code&gt;funcname&lt;/code&gt; inside the library and returns this function as a C function. So, &lt;code&gt;funcname&lt;/code&gt; must follow the &lt;a href=&quot;#lua_CFunction&quot;&gt;&lt;code&gt;lua_CFunction&lt;/code&gt;&lt;/a&gt; prototype (see &lt;a href=&quot;#lua_CFunction&quot;&gt;&lt;code&gt;lua_CFunction&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;funcname&lt;/code&gt; が &quot; &lt;code&gt;*&lt;/code&gt; &quot;の場合、ライブラリとのみリンクし、ライブラリによってエクスポートされたシンボルを他の動的にリンクされたライブラリで使用できるようにします。それ以外の場合は、ライブラリ内で関数 &lt;code&gt;funcname&lt;/code&gt; を探し、この関数をC関数として返します。したがって、 &lt;code&gt;funcname&lt;/code&gt; は&lt;a href=&quot;#lua_CFunction&quot;&gt; &lt;code&gt;lua_CFunction&lt;/code&gt; &lt;/a&gt;プロトタイプに従う必要があります（&lt;a href=&quot;#lua_CFunction&quot;&gt; &lt;code&gt;lua_CFunction&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3843661cd0d22957a2df1b74e3cc0eae40b47007" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;glb&lt;/code&gt; is true, also stores the module into global &lt;code&gt;modname&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;glb&lt;/code&gt; がtrueの場合、モジュールをグローバル &lt;code&gt;modname&lt;/code&gt; にも格納します。</target>
        </trans-unit>
        <trans-unit id="1dfd113b7f3930f57215faca9229d63e5a7444d8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;index&lt;/code&gt; is a number, returns all arguments after argument number &lt;code&gt;index&lt;/code&gt;; a negative number indexes from the end (-1 is the last argument). Otherwise, &lt;code&gt;index&lt;/code&gt; must be the string &lt;code&gt;&quot;#&quot;&lt;/code&gt;, and &lt;code&gt;select&lt;/code&gt; returns the total number of extra arguments it received.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; が数値の場合、引数番号 &lt;code&gt;index&lt;/code&gt; の後のすべての引数を返します。最後から負の数のインデックス（-1が最後の引数）。それ以外の場合、 &lt;code&gt;index&lt;/code&gt; は文字列 &lt;code&gt;&quot;#&quot;&lt;/code&gt; である必要があり、 &lt;code&gt;select&lt;/code&gt; は受け取った追加の引数の総数を返します。</target>
        </trans-unit>
        <trans-unit id="9a792f6a10658dfe428995a06ea53ae4d673e447" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;isnum&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, its referent is assigned a boolean value that indicates whether the operation succeeded.</source>
          <target state="translated">&lt;code&gt;isnum&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、その指示対象には、操作が成功したかどうかを示すブール値が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="e15877b81cb8f4644f0e73a139f0b786972779bc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;l&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, fills the position &lt;code&gt;*l&lt;/code&gt; with the result's length. If the result is &lt;code&gt;NULL&lt;/code&gt; (only possible when returning &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;d == NULL&lt;/code&gt;), its length is considered zero.</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、位置 &lt;code&gt;*l&lt;/code&gt; を結果の長さで埋めます。結果が &lt;code&gt;NULL&lt;/code&gt; の場合（ &lt;code&gt;d&lt;/code&gt; および &lt;code&gt;d == NULL&lt;/code&gt; 返す場合のみ可能）、その長さはゼロと見なされます。</target>
        </trans-unit>
        <trans-unit id="73f0cbaf64ffcc698ebe789e3bf72282c151d928" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;locale&lt;/code&gt; is the empty string, the current locale is set to an implementation-defined native locale. If &lt;code&gt;locale&lt;/code&gt; is the string &quot;&lt;code&gt;C&lt;/code&gt;&quot;, the current locale is set to the standard C locale.</source>
          <target state="translated">場合は &lt;code&gt;locale&lt;/code&gt; 空の文字列で、現在のロケールは、実装定義のネイティブのロケールに設定されています。場合は &lt;code&gt;locale&lt;/code&gt; 、文字列「である &lt;code&gt;C&lt;/code&gt; 」、現在のロケールは、標準のCロケールに設定されています。</target>
        </trans-unit>
        <trans-unit id="acb78160a1f280ce628830b7a5b6f03f442478bf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;message&lt;/code&gt; is present but is neither a string nor &lt;b&gt;nil&lt;/b&gt;, this function returns &lt;code&gt;message&lt;/code&gt; without further processing. Otherwise, it returns a string with a traceback of the call stack. The optional &lt;code&gt;message&lt;/code&gt; string is appended at the beginning of the traceback. An optional &lt;code&gt;level&lt;/code&gt; number tells at which level to start the traceback (default is 1, the function calling &lt;code&gt;traceback&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; は存在するが、文字列でも&lt;b&gt;nil&lt;/b&gt;でもない場合、この関数はそれ以上処理せずに &lt;code&gt;message&lt;/code&gt; を返します。それ以外の場合は、呼び出しスタックのトレースバックを含む文字列を返します。オプションの &lt;code&gt;message&lt;/code&gt; 文字列は、トレースバックの先頭に追加されます。オプションの &lt;code&gt;level&lt;/code&gt; 番号は、トレースバックを開始するレベルを指示します（デフォルトは1で、 &lt;code&gt;traceback&lt;/code&gt; を呼び出す関数です）。</target>
        </trans-unit>
        <trans-unit id="842cd5b591dfca5b2f8676469b17faefa0a0959f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;modname&lt;/code&gt; is not already present in &lt;a href=&quot;#pdf-package.loaded&quot;&gt;&lt;code&gt;package.loaded&lt;/code&gt;&lt;/a&gt;, calls function &lt;code&gt;openf&lt;/code&gt; with string &lt;code&gt;modname&lt;/code&gt; as an argument and sets the call result in &lt;code&gt;package.loaded[modname]&lt;/code&gt;, as if that function has been called through &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;modname&lt;/code&gt; が&lt;a href=&quot;#pdf-package.loaded&quot;&gt; &lt;code&gt;package.loaded&lt;/code&gt; &lt;/a&gt;にまだ存在しない場合は、文字列 &lt;code&gt;modname&lt;/code&gt; を引数として関数 &lt;code&gt;openf&lt;/code&gt; を呼び出し、その関数が&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;から呼び出されたかのように、呼び出し結果を &lt;code&gt;package.loaded[modname]&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="c31adda24a7d148cbbeb4abd1c9efc9a5e0f6cc8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;msgh&lt;/code&gt; is 0, then the error object returned on the stack is exactly the original error object. Otherwise, &lt;code&gt;msgh&lt;/code&gt; is the stack index of a &lt;em&gt;message handler&lt;/em&gt;. (This index cannot be a pseudo-index.) In case of runtime errors, this function will be called with the error object and its return value will be the object returned on the stack by &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;msgh&lt;/code&gt; が0の場合、スタックに返されたエラーオブジェクトは元のエラーオブジェクトとまったく同じです。それ以外の場合、 &lt;code&gt;msgh&lt;/code&gt; は&lt;em&gt;メッセージハンドラの&lt;/em&gt;スタックインデックスです。（このインデックスは疑似インデックスであってはなりません。）ランタイムエラーの場合、この関数はエラーオブジェクトで呼び出され、その戻り値は&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;によってスタックに返されたオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="1820013984578d01f9005b716812fa4d2f636236" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;object&lt;/code&gt; does not have a metatable, returns &lt;b&gt;nil&lt;/b&gt;. Otherwise, if the object's metatable has a &lt;code&gt;__metatable&lt;/code&gt; field, returns the associated value. Otherwise, returns the metatable of the given object.</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; メタテーブルがない場合は、&lt;b&gt;nilを&lt;/b&gt;返します。それ以外の場合、オブジェクトのメタテーブルに &lt;code&gt;__metatable&lt;/code&gt; フィールドがある場合は、関連付けられた値を返します。それ以外の場合は、指定されたオブジェクトのメタテーブルを返します。</target>
        </trans-unit>
        <trans-unit id="8540353902febf7d816e3357366d699709e0ebfd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ref&lt;/code&gt; is &lt;a href=&quot;#pdf-LUA_NOREF&quot;&gt;&lt;code&gt;LUA_NOREF&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pdf-LUA_REFNIL&quot;&gt;&lt;code&gt;LUA_REFNIL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#luaL_unref&quot;&gt;&lt;code&gt;luaL_unref&lt;/code&gt;&lt;/a&gt; does nothing.</source>
          <target state="translated">場合は &lt;code&gt;ref&lt;/code&gt; がある&lt;a href=&quot;#pdf-LUA_NOREF&quot;&gt; &lt;code&gt;LUA_NOREF&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#pdf-LUA_REFNIL&quot;&gt; &lt;code&gt;LUA_REFNIL&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#luaL_unref&quot;&gt; &lt;code&gt;luaL_unref&lt;/code&gt; は&lt;/a&gt;何もしません。</target>
        </trans-unit>
        <trans-unit id="0ef9686e0e91a6b272fed24ea40a04743ba642b9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;repl&lt;/code&gt; is a function, then this function is called every time a match occurs, with all captured substrings passed as arguments, in order.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; が関数の場合、一致が発生するたびにこの関数が呼び出され、キャプチャされたすべての部分文字列が引数として順番に渡されます。</target>
        </trans-unit>
        <trans-unit id="acbcb36c3a66c6e9e703f8cba5f8b02711833af9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;repl&lt;/code&gt; is a string, then its value is used for replacement. The character &lt;code&gt;%&lt;/code&gt; works as an escape character: any sequence in &lt;code&gt;repl&lt;/code&gt; of the form &lt;code&gt;%&lt;em&gt;d&lt;/em&gt;&lt;/code&gt;, with &lt;em&gt;d&lt;/em&gt; between 1 and 9, stands for the value of the &lt;em&gt;d&lt;/em&gt;-th captured substring. The sequence &lt;code&gt;%0&lt;/code&gt; stands for the whole match. The sequence &lt;code&gt;%%&lt;/code&gt; stands for a single &lt;code&gt;%&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;repl&lt;/code&gt; 文字列で、その値は、交換のために使用されています。文字 &lt;code&gt;%&lt;/code&gt; は、エスケープ文字として動作：中の任意の配列 &lt;code&gt;repl&lt;/code&gt; 形式の &lt;code&gt;%&lt;em&gt;d&lt;/em&gt;&lt;/code&gt; と、&lt;em&gt;D&lt;/em&gt; 1と9との間には、の値を表し&lt;em&gt;、D&lt;/em&gt;サブストリング捕捉目。シーケンス &lt;code&gt;%0&lt;/code&gt; は一致全体を表します。シーケンス &lt;code&gt;%%&lt;/code&gt; は単一の &lt;code&gt;%&lt;/code&gt; を表します。</target>
        </trans-unit>
        <trans-unit id="e3b705ba3b278873bc97aa05e3303e0da7b4c996" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;repl&lt;/code&gt; is a table, then the table is queried for every match, using the first capture as the key.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; がテーブルの場合、最初のキャプチャをキーとして使用して、すべての一致に対してテーブルがクエリされます。</target>
        </trans-unit>
        <trans-unit id="904a3adc32b5b8e5036d0de4893c822c32415c1c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, pushes &lt;b&gt;nil&lt;/b&gt; and returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; の場合、&lt;b&gt;nil&lt;/b&gt;をプッシュして &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2c0fc40539b156bda0a027e224a170becb69976c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;strip&lt;/code&gt; is true, the binary representation may not include all debug information about the function, to save space.</source>
          <target state="translated">場合 &lt;code&gt;strip&lt;/code&gt; 真である、バイナリ表現は、スペースを節約するために、機能に関するすべてのデバッグ情報を含まなくてもよいです。</target>
        </trans-unit>
        <trans-unit id="6d87b247b5a3a2f34515ba0454eae0564f8d8461" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;t&lt;/code&gt; has a metamethod &lt;code&gt;__pairs&lt;/code&gt;, calls it with &lt;code&gt;t&lt;/code&gt; as argument and returns the first three results from the call.</source>
          <target state="translated">場合は &lt;code&gt;t&lt;/code&gt; がメタメソッドを持っている &lt;code&gt;__pairs&lt;/code&gt; を、とそれを呼び出す &lt;code&gt;t&lt;/code&gt; 引数として、コールから最初の3つの結果を返します。</target>
        </trans-unit>
        <trans-unit id="aa2adbca5a2a771576b0ebf6701fe853d554fc4c" translate="yes" xml:space="preserve">
          <source>If a weak table is among the resurrected objects in a collection cycle, it may not be properly cleared until the next cycle.</source>
          <target state="translated">弱いテーブルがコレクションサイクルで復活したオブジェクトの中にある場合、次のサイクルまで適切にクリアされない可能性があります。</target>
        </trans-unit>
        <trans-unit id="976c050d10a007d84f504f71e351c1274cb11c09" translate="yes" xml:space="preserve">
          <source>If an error happens outside any protected environment, Lua calls a &lt;em&gt;panic function&lt;/em&gt; (see &lt;a href=&quot;#lua_atpanic&quot;&gt;&lt;code&gt;lua_atpanic&lt;/code&gt;&lt;/a&gt;) and then calls &lt;code&gt;abort&lt;/code&gt;, thus exiting the host application. Your panic function can avoid this exit by never returning (e.g., doing a long jump to your own recovery point outside Lua).</source>
          <target state="translated">保護された環境の外でエラーが発生した場合、Luaは&lt;em&gt;パニック関数&lt;/em&gt;（&lt;a href=&quot;#lua_atpanic&quot;&gt; &lt;code&gt;lua_atpanic&lt;/code&gt; を&lt;/a&gt;参照）を呼び出してから、 &lt;code&gt;abort&lt;/code&gt; を呼び出し、ホストアプリケーションを終了します。あなたのパニック機能は二度と戻らないことでこの出口を回避することができます（例えば、Luaの外にあるあなた自身の回復ポイントへの長いジャンプをする）。</target>
        </trans-unit>
        <trans-unit id="6a7b831a74ddf1c4c96bf3f5226d336731f2c355" translate="yes" xml:space="preserve">
          <source>If present, an initial assignment has the same semantics of a multiple assignment (see &lt;a href=&quot;#3.3.3&quot;&gt;&amp;sect;3.3.3&lt;/a&gt;). Otherwise, all variables are initialized with &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">存在する場合、初期割り当ては複数割り当てと同じセマンティクスを持ちます（&lt;a href=&quot;#3.3.3&quot;&gt;&amp;sect;3.3.3を&lt;/a&gt;参照）。それ以外の場合、すべての変数は&lt;b&gt;nilで&lt;/b&gt;初期化されます。</target>
        </trans-unit>
        <trans-unit id="d10ce6dce1cf5ed21ab267244f3f1b4e5f1c53a0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;time&lt;/code&gt; argument is present, this is the time to be formatted (see the &lt;a href=&quot;#pdf-os.time&quot;&gt;&lt;code&gt;os.time&lt;/code&gt;&lt;/a&gt; function for a description of this value). Otherwise, &lt;code&gt;date&lt;/code&gt; formats the current time.</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; 引数が存在する場合、これはフォーマットされる時刻です（この値の説明については、&lt;a href=&quot;#pdf-os.time&quot;&gt; &lt;code&gt;os.time&lt;/code&gt; &lt;/a&gt;関数を参照してください）。それ以外の場合、 &lt;code&gt;date&lt;/code&gt; は現在時刻をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="445b1cd7605edb6c9a09a49501ea3688f7a25284" translate="yes" xml:space="preserve">
          <source>If the coroutine runs without any errors, &lt;code&gt;resume&lt;/code&gt; returns &lt;b&gt;true&lt;/b&gt; plus any values passed to &lt;code&gt;yield&lt;/code&gt; (when the coroutine yields) or any values returned by the body function (when the coroutine terminates). If there is any error, &lt;code&gt;resume&lt;/code&gt; returns &lt;b&gt;false&lt;/b&gt; plus the error message.</source>
          <target state="translated">コルーチンがエラーなしで実行される場合、 &lt;code&gt;resume&lt;/code&gt; は&lt;b&gt;trueを&lt;/b&gt;返し、 &lt;code&gt;yield&lt;/code&gt; に渡された値（コルーチンが生成されたとき）またはbody関数によって返された値（コルーチンが終了したとき）を返します。エラーがある場合、 &lt;code&gt;resume&lt;/code&gt; は&lt;b&gt;false&lt;/b&gt;とエラーメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="d55f1311c7ac9c86cbdbbe5af34159b56481c975" translate="yes" xml:space="preserve">
          <source>If the function argument &lt;code&gt;arg&lt;/code&gt; is a number, returns this number. If this argument is absent or is &lt;b&gt;nil&lt;/b&gt;, returns &lt;code&gt;d&lt;/code&gt;. Otherwise, raises an error.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; が数値の場合、この数値を返します。この引数が存在しないか&lt;b&gt;nilの&lt;/b&gt;場合、 &lt;code&gt;d&lt;/code&gt; を返します。それ以外の場合は、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="1d6a415374d2508756a64e53d2de95963256a6b5" translate="yes" xml:space="preserve">
          <source>If the function argument &lt;code&gt;arg&lt;/code&gt; is a string, returns this string. If this argument is absent or is &lt;b&gt;nil&lt;/b&gt;, returns &lt;code&gt;d&lt;/code&gt;. Otherwise, raises an error.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; が文字列の場合、この文字列を返します。この引数が存在しないか&lt;b&gt;nilの&lt;/b&gt;場合、 &lt;code&gt;d&lt;/code&gt; を返します。それ以外の場合は、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="6e17c7a9a9f53d843ebe48aadc33c874ae824510" translate="yes" xml:space="preserve">
          <source>If the function argument &lt;code&gt;arg&lt;/code&gt; is an integer (or convertible to an integer), returns this integer. If this argument is absent or is &lt;b&gt;nil&lt;/b&gt;, returns &lt;code&gt;d&lt;/code&gt;. Otherwise, raises an error.</source>
          <target state="translated">関数の引数 &lt;code&gt;arg&lt;/code&gt; が整数（または整数に変換可能）の場合、この整数を返します。この引数が存在しないか&lt;b&gt;nilの&lt;/b&gt;場合、 &lt;code&gt;d&lt;/code&gt; を返します。それ以外の場合は、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="f1e13f8872ac6f0a738c6612fcccd3954091bb67" translate="yes" xml:space="preserve">
          <source>If the global variable &lt;a id=&quot;pdf-_PROMPT&quot;&gt;&lt;code&gt;_PROMPT&lt;/code&gt;&lt;/a&gt; contains a string, then its value is used as the prompt. Similarly, if the global variable &lt;a id=&quot;pdf-_PROMPT2&quot;&gt;&lt;code&gt;_PROMPT2&lt;/code&gt;&lt;/a&gt; contains a string, its value is used as the secondary prompt (issued during incomplete statements).</source>
          <target state="translated">グローバル変数&lt;a id=&quot;pdf-_PROMPT&quot;&gt; &lt;code&gt;_PROMPT&lt;/code&gt; &lt;/a&gt;に文字列が含まれている場合、その値がプロンプトとして使用されます。同様に、グローバル変数&lt;a id=&quot;pdf-_PROMPT2&quot;&gt; &lt;code&gt;_PROMPT2&lt;/code&gt; &lt;/a&gt;に文字列が含まれている場合、その値がセカンダリプロンプトとして使用されます（不完全なステートメント中に発行されます）。</target>
        </trans-unit>
        <trans-unit id="69dd50d5154f10c839f6adf50538404208ab3819" translate="yes" xml:space="preserve">
          <source>If the last field in the list has the form &lt;code&gt;exp&lt;/code&gt; and the expression is a function call or a vararg expression, then all values returned by this expression enter the list consecutively (see &lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10&lt;/a&gt;).</source>
          <target state="translated">リストの最後のフィールドの形式が &lt;code&gt;exp&lt;/code&gt; であり、式が関数呼び出しまたは可変引数式である場合、この式によって返されるすべての値がリストに連続して入力されます（&lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c2c41a18b7f1f35462130fbee68e6deb46c899ae" translate="yes" xml:space="preserve">
          <source>If the metatable of &lt;code&gt;v&lt;/code&gt; has a &lt;code&gt;__tostring&lt;/code&gt; field, then &lt;code&gt;tostring&lt;/code&gt; calls the corresponding value with &lt;code&gt;v&lt;/code&gt; as argument, and uses the result of the call as its result.</source>
          <target state="translated">メタテーブル場合 &lt;code&gt;v&lt;/code&gt; はあり &lt;code&gt;__tostring&lt;/code&gt; フィールドを、その後、 &lt;code&gt;tostring&lt;/code&gt; の呼び出しで対応する値 &lt;code&gt;v&lt;/code&gt; の引数としての、そしてその結果として、呼び出しの結果を使用しています。</target>
        </trans-unit>
        <trans-unit id="03e2a2337d10f7a7f932c47ab9c9e3292e20a274" translate="yes" xml:space="preserve">
          <source>If the object at index &lt;code&gt;obj&lt;/code&gt; has a metatable and this metatable has a field &lt;code&gt;e&lt;/code&gt;, this function calls this field passing the object as its only argument. In this case this function returns true and pushes onto the stack the value returned by the call. If there is no metatable or no metamethod, this function returns false (without pushing any value on the stack).</source>
          <target state="translated">インデックス &lt;code&gt;obj&lt;/code&gt; のオブジェクトにメタテーブルがあり、このメタテーブルにフィールド &lt;code&gt;e&lt;/code&gt; がある場合、この関数はこのフィールドを呼び出し、オブジェクトを唯一の引数として渡します。この場合、この関数はtrueを返し、呼び出しによって返された値をスタックにプッシュします。メタテーブルまたはメタメソッドがない場合、この関数は（スタックに値をプッシュせずに）falseを返します。</target>
        </trans-unit>
        <trans-unit id="5290383f51a42a73a3f52ae1f2cee8c56a74c3fd" translate="yes" xml:space="preserve">
          <source>If the object at the top of the stack is &lt;b&gt;nil&lt;/b&gt;, &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt; returns the constant &lt;a id=&quot;pdf-LUA_REFNIL&quot;&gt;&lt;code&gt;LUA_REFNIL&lt;/code&gt;&lt;/a&gt;. The constant &lt;a id=&quot;pdf-LUA_NOREF&quot;&gt;&lt;code&gt;LUA_NOREF&lt;/code&gt;&lt;/a&gt; is guaranteed to be different from any reference returned by &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スタックの最上位のオブジェクトが&lt;b&gt;nilの&lt;/b&gt;場合、&lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; &lt;/a&gt;は定数&lt;a id=&quot;pdf-LUA_REFNIL&quot;&gt; &lt;code&gt;LUA_REFNIL&lt;/code&gt; を&lt;/a&gt;返します。定数&lt;a id=&quot;pdf-LUA_NOREF&quot;&gt; &lt;code&gt;LUA_NOREF&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; &lt;/a&gt;によって返される参照とは異なることが保証されています。</target>
        </trans-unit>
        <trans-unit id="acec67c576442c0c5a9f70f70aebd00845c9de45" translate="yes" xml:space="preserve">
          <source>If the optional second argument &lt;code&gt;close&lt;/code&gt; is true, closes the Lua state before exiting.</source>
          <target state="translated">オプションの2番目の引数 &lt;code&gt;close&lt;/code&gt; がtrueの場合、終了する前にLua状態を閉じます。</target>
        </trans-unit>
        <trans-unit id="3b0396e6bb027f8d7ab0995f60b457d88ddf9d43" translate="yes" xml:space="preserve">
          <source>If the pattern has captures, then in a successful match the captured values are also returned, after the two indices.</source>
          <target state="translated">パターンにキャプチャがある場合、マッチが成功した場合、キャプチャされた値も2つのインデックスの後に返されます。</target>
        </trans-unit>
        <trans-unit id="55dfb22871228c3e2bce9a6e070cde79a0f26198" translate="yes" xml:space="preserve">
          <source>If the registry already has the key &lt;code&gt;tname&lt;/code&gt;, returns 0. Otherwise, creates a new table to be used as a metatable for userdata, adds to this new table the pair &lt;code&gt;__name = tname&lt;/code&gt;, adds to the registry the pair &lt;code&gt;[tname] = new table&lt;/code&gt;, and returns 1. (The entry &lt;code&gt;__name&lt;/code&gt; is used by some error-reporting functions.)</source>
          <target state="translated">レジストリにすでにキー &lt;code&gt;tname&lt;/code&gt; がある場合は0を返します。それ以外の場合は、userdataのメタテーブルとして使用する新しいテーブルを作成し、この新しいテーブルに &lt;code&gt;__name = tname&lt;/code&gt; のペアを追加し、レジストリにペア &lt;code&gt;[tname] = new table&lt;/code&gt; 、1を返します（エントリ &lt;code&gt;__name&lt;/code&gt; は、いくつかのエラー報告関数で使用されます）。</target>
        </trans-unit>
        <trans-unit id="afde979ca5fc178b1fdd97cd1a0eb2a3d73cbc9c" translate="yes" xml:space="preserve">
          <source>If the resulting function has upvalues, its first upvalue is set to the value of the global environment stored at index &lt;code&gt;LUA_RIDX_GLOBALS&lt;/code&gt; in the registry (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;). When loading main chunks, this upvalue will be the &lt;code&gt;_ENV&lt;/code&gt; variable (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). Other upvalues are initialized with &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">結果の関数にアップ値がある場合、その最初のアップ値は、レジストリのインデックス &lt;code&gt;LUA_RIDX_GLOBALS&lt;/code&gt; に格納されているグローバル環境の値に設定されます（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。メインチャンクをロードする場合、このアップバリューは &lt;code&gt;_ENV&lt;/code&gt; 変数になります（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。他のアップ値は&lt;b&gt;nilで&lt;/b&gt;初期化されます。</target>
        </trans-unit>
        <trans-unit id="275e9e5485299a94935ea18cd6064e91a7392a15" translate="yes" xml:space="preserve">
          <source>If the resulting function has upvalues, the first upvalue is set to the value of &lt;code&gt;env&lt;/code&gt;, if that parameter is given, or to the value of the global environment. Other upvalues are initialized with &lt;b&gt;nil&lt;/b&gt;. (When you load a main chunk, the resulting function will always have exactly one upvalue, the &lt;code&gt;_ENV&lt;/code&gt; variable (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). However, when you load a binary chunk created from a function (see &lt;a href=&quot;#pdf-string.dump&quot;&gt;&lt;code&gt;string.dump&lt;/code&gt;&lt;/a&gt;), the resulting function can have an arbitrary number of upvalues.) All upvalues are fresh, that is, they are not shared with any other function.</source>
          <target state="translated">結果の関数にアップ値がある場合、最初のアップ値は、そのパラメーターが指定されている場合は &lt;code&gt;env&lt;/code&gt; の値、またはグローバル環境の値に設定されます。他のアップ値は&lt;b&gt;nilで&lt;/b&gt;初期化されます。（メインチャンクをロードすると、結果の関数には常に1つのアップ値、 &lt;code&gt;_ENV&lt;/code&gt; 変数が含まれます（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。ただし、関数から作成されたバイナリチャンクをロードすると（&lt;a href=&quot;#pdf-string.dump&quot;&gt; &lt;code&gt;string.dump&lt;/code&gt; を&lt;/a&gt;参照）、結果の関数は任意の数のアップバリューがあります。）すべてのアップバリューは新しいものです。つまり、他の関数と共有されません。</target>
        </trans-unit>
        <trans-unit id="2440107420c56013ca178ce5e9d33aaab09429e6" translate="yes" xml:space="preserve">
          <source>If the third expression (the step) is absent, then a step of 1 is used.</source>
          <target state="translated">第3の式(ステップ)がない場合は、1のステップを使用します。</target>
        </trans-unit>
        <trans-unit id="876e4bd473070df65d9eb13c67cd61272830f8dd" translate="yes" xml:space="preserve">
          <source>If the value &lt;code&gt;x&lt;/code&gt; is convertible to an integer, returns that integer. Otherwise, returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">値 &lt;code&gt;x&lt;/code&gt; が整数に変換可能な場合は、その整数を返します。それ以外の場合は&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="94b7f8b2fd53356736681842c541a85531d3f0c6" translate="yes" xml:space="preserve">
          <source>If the value at the given index has a metatable, the function pushes that metatable onto the stack and returns 1. Otherwise, the function returns 0 and pushes nothing on the stack.</source>
          <target state="translated">指定されたインデックスの値にメタテーブルがある場合、この関数はそのメタテーブルをスタックにプッシュして 1 を返します。そうでない場合は、この関数は 0 を返し、スタック上には何もプッシュしません。</target>
        </trans-unit>
        <trans-unit id="9441049c218d493b700b38a8bccd81b0ab58775b" translate="yes" xml:space="preserve">
          <source>If the value at the given index is a full userdata, returns its block address. If the value is a light userdata, returns its pointer. Otherwise, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">指定されたインデックスの値が完全なユーザーデータの場合、そのブロックアドレスを返します。値がlight userdataの場合、そのポインタを返します。それ以外の場合は、 &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4632120bcb257e680797b7d6b495d6ae5165f498" translate="yes" xml:space="preserve">
          <source>If the value has a metatable with a &lt;code&gt;__tostring&lt;/code&gt; field, then &lt;code&gt;luaL_tolstring&lt;/code&gt; calls the corresponding metamethod with the value as argument, and uses the result of the call as its result.</source>
          <target state="translated">値に &lt;code&gt;__tostring&lt;/code&gt; フィールドを持つメタテーブルがある場合、 &lt;code&gt;luaL_tolstring&lt;/code&gt; は対応するメタメソッドを値を引数として呼び出し、呼び出しの結果を結果として使用します。</target>
        </trans-unit>
        <trans-unit id="d98fc2205300b7d347d732dbb4a9c377f9f7a2f3" translate="yes" xml:space="preserve">
          <source>If the value returned by the table query or by the function call is a string or a number, then it is used as the replacement string; otherwise, if it is &lt;b&gt;false&lt;/b&gt; or &lt;b&gt;nil&lt;/b&gt;, then there is no replacement (that is, the original match is kept in the string).</source>
          <target state="translated">テーブルクエリまたは関数呼び出しによって返された値が文字列または数値の場合は、置換文字列として使用されます。それ以外の場合、&lt;b&gt;false&lt;/b&gt;または&lt;b&gt;nilの&lt;/b&gt;場合、置換はありません（つまり、元の一致は文字列に保持されます）。</target>
        </trans-unit>
        <trans-unit id="ed5b55c4ebb32433c98e6d7ba29a004a9265213b" translate="yes" xml:space="preserve">
          <source>If there are no syntactic errors, returns the compiled chunk as a function; otherwise, returns &lt;b&gt;nil&lt;/b&gt; plus the error message.</source>
          <target state="translated">構文エラーがない場合は、コンパイルされたチャンクを関数として返します。それ以外の場合は、&lt;b&gt;nil&lt;/b&gt;とエラーメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="94d76ea95ae9d04310650a4926fa6e03a91eead5" translate="yes" xml:space="preserve">
          <source>If there is any error loading or running the module, or if it cannot find any loader for the module, then &lt;code&gt;require&lt;/code&gt; raises an error.</source>
          <target state="translated">モジュールのロードまたは実行中にエラーが発生した場合、またはモジュールのローダーが見つからない場合、 &lt;code&gt;require&lt;/code&gt; はエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="0a6dbd64b84e48ca7300b890ff312675543ee0f6" translate="yes" xml:space="preserve">
          <source>If there is no script in the call, the interpreter name goes to index 0, followed by the other arguments. For instance, the call</source>
          <target state="translated">呼び出しにスクリプトがない場合、インタープリタ名はインデックス 0 になり、その後に他の引数が続きます。例えば、呼び出し</target>
        </trans-unit>
        <trans-unit id="2f77907008466a9df684a2c79024f9604e714a0c" translate="yes" xml:space="preserve">
          <source>If this option is given together with option '&lt;code&gt;f&lt;/code&gt;', its table is pushed after the function.</source>
          <target state="translated">このオプションがオプション ' &lt;code&gt;f&lt;/code&gt; ' とともに指定された場合、そのテーブルは関数の後にプッシュされます。</target>
        </trans-unit>
        <trans-unit id="eda48319758ff6bba8bcf8cb507f6d311265837c" translate="yes" xml:space="preserve">
          <source>If you know beforehand the total size of the resulting string, you can use the buffer like this:</source>
          <target state="translated">結果として得られる文字列の合計サイズがあらかじめわかっていれば、このようなバッファを使うことができます。</target>
        </trans-unit>
        <trans-unit id="0e57af394dbc6d5a626668daa30c3f8e2018059e" translate="yes" xml:space="preserve">
          <source>If you set the step multiplier to a very large number (larger than 10% of the maximum number of bytes that the program may use), the collector behaves like a stop-the-world collector. If you then set the pause to 200, the collector behaves as in old Lua versions, doing a complete collection every time Lua doubles its memory usage.</source>
          <target state="translated">ステップ倍率を非常に大きな数値(プログラムが使用できる最大バイト数の10%以上)に設定すると、コレクターはストップザワールドコレクターのような動作をします。一時停止の値を200に設定すると、Luaのメモリ使用量が2倍になるたびにコレクターは完全なコレクションを行います。</target>
        </trans-unit>
        <trans-unit id="29af696fcc1cdd39d14ec551ccbd633c6f06b895" translate="yes" xml:space="preserve">
          <source>If, after the translation of negative indices, &lt;code&gt;i&lt;/code&gt; is less than 1, it is corrected to 1. If &lt;code&gt;j&lt;/code&gt; is greater than the string length, it is corrected to that length. If, after these corrections, &lt;code&gt;i&lt;/code&gt; is greater than &lt;code&gt;j&lt;/code&gt;, the function returns the empty string.</source>
          <target state="translated">負のインデックスの変換後、 &lt;code&gt;i&lt;/code&gt; が1未満の場合は1に修正されます &lt;code&gt;j&lt;/code&gt; が文字列の長さより大きい場合は、その長さに修正されます。これらの修正後、 &lt;code&gt;i&lt;/code&gt; が &lt;code&gt;j&lt;/code&gt; より大きい場合、関数は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6e188c4467182589f4f24a348f7b82d5dc4eb843" translate="yes" xml:space="preserve">
          <source>In a conversion from integer to float, if the integer value has an exact representation as a float, that is the result. Otherwise, the conversion gets the nearest higher or the nearest lower representable value. This kind of conversion never fails.</source>
          <target state="translated">整数から浮動小数点数への変換では,整数値が浮動小数点数として正確に表現されていれば,それが結果となります。そうでなければ,変換は,最も近い上位の値または最も近い下位の表現可能な値を取得します。この種の変換は決して失敗しません。</target>
        </trans-unit>
        <trans-unit id="97b9aa4de4630491dcb4d24142294547e0b16cc1" translate="yes" xml:space="preserve">
          <source>In a function call, first prefixexp and args are evaluated. If the value of prefixexp has type &lt;em&gt;function&lt;/em&gt;, then this function is called with the given arguments. Otherwise, the prefixexp &quot;call&quot; metamethod is called, having as first parameter the value of prefixexp, followed by the original call arguments (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">関数呼び出しでは、最初のprefixexpとargsが評価されます。prefixexpの値の型が&lt;em&gt;functionの&lt;/em&gt;場合、この関数は指定された引数で呼び出されます。そうでない場合、prefixexp &quot;call&quot;メタメソッドが呼び出され、最初のパラメーターとしてprefixexpの値があり、その後に元の呼び出し引数が続きます（&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="62eebdc1879c0b1be4e46a0d6b0e9bcf316566f7" translate="yes" xml:space="preserve">
          <source>In any case, if the pattern specifies no captures, then it behaves as if the whole pattern was inside a capture.</source>
          <target state="translated">いずれにしても、パターンがキャプチャを指定していない場合は、パターン全体がキャプチャの中にあるかのように振る舞います。</target>
        </trans-unit>
        <trans-unit id="2bb9e40f7423d9d013509578590213e990081254" translate="yes" xml:space="preserve">
          <source>In both cases pushes onto the stack the final value associated with &lt;code&gt;tname&lt;/code&gt; in the registry.</source>
          <target state="translated">どちらの場合も、レジストリの &lt;code&gt;tname&lt;/code&gt; に関連付けられている最終的な値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="529481951babb324dab477372f5c6d52890e6006" translate="yes" xml:space="preserve">
          <source>In case of errors this function raises the error, instead of returning an error code.</source>
          <target state="translated">エラーが発生した場合、この関数はエラーコードを返す代わりにエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="f30334a63968b6ddb7bb2b4604dd500f34422267" translate="yes" xml:space="preserve">
          <source>In case of errors, the stack is not unwound, so you can use the debug API over it. The error object is on the top of the stack.</source>
          <target state="translated">エラーが発生した場合、スタックは巻き戻されないので、その上でデバッグAPIを利用することができます。エラーオブジェクトはスタックの先頭にあります。</target>
        </trans-unit>
        <trans-unit id="467db70feecc1c4f6d135a7d76a384db5dda44c8" translate="yes" xml:space="preserve">
          <source>In case of overflows in integer arithmetic, all operations &lt;em&gt;wrap around&lt;/em&gt;, according to the usual rules of two-complement arithmetic. (In other words, they return the unique representable integer that is equal modulo &lt;em&gt;2&lt;sup&gt;64&lt;/sup&gt;&lt;/em&gt; to the mathematical result.)</source>
          <target state="translated">整数演算でオーバーフローが発生した場合、2つの補数演算の通常の規則に従って、すべての演算が&lt;em&gt;ラップアラウンドし&lt;/em&gt;ます。（言い換えれば、&lt;em&gt;2 &lt;sup&gt;64&lt;/sup&gt;&lt;/em&gt;を法とする数学的な結果に等しい一意の表現可能な整数を返します。）</target>
        </trans-unit>
        <trans-unit id="af2e9f70152b7436cb1235e5607b1026adf8b4df" translate="yes" xml:space="preserve">
          <source>In case of success, &lt;code&gt;seek&lt;/code&gt; returns the final file position, measured in bytes from the beginning of the file. If &lt;code&gt;seek&lt;/code&gt; fails, it returns &lt;b&gt;nil&lt;/b&gt;, plus a string describing the error.</source>
          <target state="translated">成功した場合、 &lt;code&gt;seek&lt;/code&gt; はファイルの先頭からのバイト数で測定された最終的なファイル位置を返します。場合 &lt;code&gt;seek&lt;/code&gt; 失敗し、それを返します&lt;b&gt;nilを&lt;/b&gt;、プラスのエラーを説明する文字列を。</target>
        </trans-unit>
        <trans-unit id="8ce8027efe413a45818ec783d9d3bd6228742c83" translate="yes" xml:space="preserve">
          <source>In case of success, returns a handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.</source>
          <target state="translated">成功した場合、一時ファイルのハンドルを返します。このファイルは更新モードで開かれ、プログラムが終了すると自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="b6a86eee5d971d25767843d4dbdef34e84774cef" translate="yes" xml:space="preserve">
          <source>In case of success, this function returns &lt;code&gt;file&lt;/code&gt;. Otherwise it returns &lt;b&gt;nil&lt;/b&gt; plus a string describing the error.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;file&lt;/code&gt; を返します。それ以外の場合は、&lt;b&gt;nil&lt;/b&gt;とエラーを説明する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="8c632a9fad5564d87f459215e17e926cda31f0ee" translate="yes" xml:space="preserve">
          <source>In case of unprotected errors in the script, the interpreter reports the error to the standard error stream. If the error object is not a string but has a metamethod &lt;code&gt;__tostring&lt;/code&gt;, the interpreter calls this metamethod to produce the final message. Otherwise, the interpreter converts the error object to a string and adds a stack traceback to it.</source>
          <target state="translated">スクリプトで保護されていないエラーが発生した場合、インタープリターはエラーを標準エラーストリームに報告します。エラーオブジェクトが文字列ではないが &lt;code&gt;__tostring&lt;/code&gt; 場合、インタプリタはこのメタメソッドを呼び出して最終的なメッセージを生成します。それ以外の場合、インタプリタはエラーオブジェクトを文字列に変換し、それにスタックトレースバックを追加します。</target>
        </trans-unit>
        <trans-unit id="bae459100d0f219cfd74a53f2eb34f96a6176512" translate="yes" xml:space="preserve">
          <source>In interactive mode, Lua repeatedly prompts and waits for a line. After reading a line, Lua first try to interpret the line as an expression. If it succeeds, it prints its value. Otherwise, it interprets the line as a statement. If you write an incomplete statement, the interpreter waits for its completion by issuing a different prompt.</source>
          <target state="translated">対話型モードでは、Luaはプロンプトと行待ちを繰り返します。行を読み込んだ後、Luaはまずその行を式として解釈しようとします。成功した場合は、その値を表示します。それ以外の場合は、その行を文として解釈します。不完全な文を書いた場合、インタプリタは別のプロンプトを出してその完了を待ちます。</target>
        </trans-unit>
        <trans-unit id="08b57c85f9e4681ef2b296b47dfe58462b42111a" translate="yes" xml:space="preserve">
          <source>In order to communicate properly with Lua, a C function must use the following protocol, which defines the way parameters and results are passed: a C function receives its arguments from Lua in its stack in direct order (the first argument is pushed first). So, when the function starts, &lt;code&gt;lua_gettop(L)&lt;/code&gt; returns the number of arguments received by the function. The first argument (if any) is at index 1 and its last argument is at index &lt;code&gt;lua_gettop(L)&lt;/code&gt;. To return values to Lua, a C function just pushes them onto the stack, in direct order (the first result is pushed first), and returns the number of results. Any other value in the stack below the results will be properly discarded by Lua. Like a Lua function, a C function called by Lua can also return many results.</source>
          <target state="translated">Luaと正しく通信するために、C関数は次のプロトコルを使用する必要があります。プロトコルは、パラメーターと結果が渡される方法を定義します。C関数は、スタック内のLuaから直接引数を受け取ります（最初の引数が最初にプッシュされます）。したがって、関数が開始すると、 &lt;code&gt;lua_gettop(L)&lt;/code&gt; は関数が受け取った引数の数を返します。最初の引数（存在する場合）はインデックス1にあり、最後の引数はインデックス &lt;code&gt;lua_gettop(L)&lt;/code&gt; にあります。 Luaに値を返すために、C関数は直接それらをスタックにプッシュし（最初の結果が最初にプッシュされます）、結果の数を返します。結果の下にあるスタック内の他の値は、Luaによって適切に破棄されます。 Lua関数と同様に、Luaによって呼び出されたC関数も多くの結果を返すことができます。</target>
        </trans-unit>
        <trans-unit id="1509d2ba42008705f892c900bc91b5bc201ddc1e" translate="yes" xml:space="preserve">
          <source>In the &lt;b&gt;repeat&lt;/b&gt;&amp;ndash;&lt;b&gt;until&lt;/b&gt; loop, the inner block does not end at the &lt;b&gt;until&lt;/b&gt; keyword, but only after the condition. So, the condition can refer to local variables declared inside the loop block.</source>
          <target state="translated">で&lt;b&gt;繰り返し&lt;/b&gt; - &lt;b&gt;まで&lt;/b&gt;ループ、内側のブロックは時に終わらない&lt;b&gt;まで&lt;/b&gt;だけの状態の後に、キーワード。したがって、条件はループブロック内で宣言されたローカル変数を参照できます。</target>
        </trans-unit>
        <trans-unit id="82f098174293e606c23ea050f8d7e73e0153453e" translate="yes" xml:space="preserve">
          <source>In the above code, the new function &lt;code&gt;k&lt;/code&gt; is a &lt;em&gt;continuation function&lt;/em&gt; (with type &lt;a href=&quot;#lua_KFunction&quot;&gt;&lt;code&gt;lua_KFunction&lt;/code&gt;&lt;/a&gt;), which should do all the work that the original function was doing after calling &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;. Now, we must inform Lua that it must call &lt;code&gt;k&lt;/code&gt; if the Lua code being executed by &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; gets interrupted in some way (errors or yielding), so we rewrite the code as here, replacing &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; by &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">上記のコードでは、新しい関数 &lt;code&gt;k&lt;/code&gt; は&lt;em&gt;継続関数&lt;/em&gt;（タイプは&lt;a href=&quot;#lua_KFunction&quot;&gt; &lt;code&gt;lua_KFunction&lt;/code&gt; &lt;/a&gt;）であり、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;を呼び出した後に元の関数が行っていたすべての作業を実行する必要があります。ここで、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;によって実行されているLuaコードが何らかの方法（エラーまたは生成）で中断された場合に &lt;code&gt;k&lt;/code&gt; を呼び出す必要があることをLuaに通知する必要があるため、次のようにコードを書き直し、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;に置き換えます。</target>
        </trans-unit>
        <trans-unit id="06f49d50825ba7a2c55ba6aba66f792c4da727cd" translate="yes" xml:space="preserve">
          <source>In the first case, the parameter &lt;code&gt;ar&lt;/code&gt; must be a valid activation record that was filled by a previous call to &lt;a href=&quot;#lua_getstack&quot;&gt;&lt;code&gt;lua_getstack&lt;/code&gt;&lt;/a&gt; or given as argument to a hook (see &lt;a href=&quot;#lua_Hook&quot;&gt;&lt;code&gt;lua_Hook&lt;/code&gt;&lt;/a&gt;). The index &lt;code&gt;n&lt;/code&gt; selects which local variable to inspect; see &lt;a href=&quot;#pdf-debug.getlocal&quot;&gt;&lt;code&gt;debug.getlocal&lt;/code&gt;&lt;/a&gt; for details about variable indices and names.</source>
          <target state="translated">最初のケースでは、パラメーター &lt;code&gt;ar&lt;/code&gt; は、&lt;a href=&quot;#lua_getstack&quot;&gt; &lt;code&gt;lua_getstack&lt;/code&gt; &lt;/a&gt;への以前の呼び出しによって満たされた、またはフックへの引数として指定された有効なアクティブ化レコードである必要があります（&lt;a href=&quot;#lua_Hook&quot;&gt; &lt;code&gt;lua_Hook&lt;/code&gt; を&lt;/a&gt;参照）。インデックス &lt;code&gt;n&lt;/code&gt; は、検査するローカル変数を選択します。変数のインデックスと名前の詳細については、&lt;a href=&quot;#pdf-debug.getlocal&quot;&gt; &lt;code&gt;debug.getlocal&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="41a440753f8786d13a87f3b118280fbe98ed6aa7" translate="yes" xml:space="preserve">
          <source>In the second case, &lt;code&gt;ar&lt;/code&gt; must be &lt;code&gt;NULL&lt;/code&gt; and the function to be inspected must be at the top of the stack. In this case, only parameters of Lua functions are visible (as there is no information about what variables are active) and no values are pushed onto the stack.</source>
          <target state="translated">2番目のケースでは、 &lt;code&gt;ar&lt;/code&gt; は &lt;code&gt;NULL&lt;/code&gt; でなければならず、検査される関数はスタックの一番上になければなりません。この場合、Lua関数のパラメーターのみが表示され（アクティブな変数に関する情報がないため）、値はスタックにプッシュされません。</target>
        </trans-unit>
        <trans-unit id="431335cf2ea122b520413c8e75c042e2443dd934" translate="yes" xml:space="preserve">
          <source>In this case, all returned values are thrown away. Function calls are explained in &lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10&lt;/a&gt;.</source>
          <target state="translated">この場合、戻り値はすべて破棄されます。関数呼び出しについては、&lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10で&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="789e39d8c294634d33eb6b9c165293b5343c70b0" translate="yes" xml:space="preserve">
          <source>In words, a border is any (natural) index in a table where a non-nil value is followed by a nil value (or zero, when index 1 is nil).</source>
          <target state="translated">言い換えれば、ボーダーとは、表の中の任意の(自然な)インデックスで、非nil値の後にnil値(インデックス1がnilの場合は0)が続くものを指します。</target>
        </trans-unit>
        <trans-unit id="1d61c65c4df032dfd4680710a9c5e29989e4f8c3" translate="yes" xml:space="preserve">
          <source>In words, if the argument &lt;code&gt;arg&lt;/code&gt; is nil or absent, the macro results in the default &lt;code&gt;dflt&lt;/code&gt;. Otherwise, it results in the result of calling &lt;code&gt;func&lt;/code&gt; with the state &lt;code&gt;L&lt;/code&gt; and the argument index &lt;code&gt;arg&lt;/code&gt; as parameters. Note that it evaluates the expression &lt;code&gt;dflt&lt;/code&gt; only if needed.</source>
          <target state="translated">つまり、引数 &lt;code&gt;arg&lt;/code&gt; がnilまたは存在しない場合、マクロはデフォルトの &lt;code&gt;dflt&lt;/code&gt; になります。それ以外の場合は、状態 &lt;code&gt;L&lt;/code&gt; と引数インデックス &lt;code&gt;arg&lt;/code&gt; をパラメーターとして指定して &lt;code&gt;func&lt;/code&gt; を呼び出した結果になります。必要な場合にのみ、式 &lt;code&gt;dflt&lt;/code&gt; を評価することに注意してください。</target>
        </trans-unit>
        <trans-unit id="67c7955edf181aeadc7e61f0904d3690ad3a91fb" translate="yes" xml:space="preserve">
          <source>Initializes a buffer &lt;code&gt;B&lt;/code&gt;. This function does not allocate any space; the buffer must be declared as a variable (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">バッファ &lt;code&gt;B&lt;/code&gt; を初期化します。この関数はスペースを割り当てません。バッファは変数として宣言する必要があります（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0abea9e11cfbbca6718360dab7feca24a7e28d57" translate="yes" xml:space="preserve">
          <source>Inserts element &lt;code&gt;value&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, shifting up the elements &lt;code&gt;list[pos], list[pos+1], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt;. The default value for &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;#list+1&lt;/code&gt;, so that a call &lt;code&gt;table.insert(t,x)&lt;/code&gt; inserts &lt;code&gt;x&lt;/code&gt; at the end of list &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; の位置 &lt;code&gt;pos&lt;/code&gt; に要素 &lt;code&gt;value&lt;/code&gt; を挿入し、要素を上にシフトします &lt;code&gt;list[pos], list[pos+1], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; 。デフォルト値 &lt;code&gt;pos&lt;/code&gt; ある &lt;code&gt;#list+1&lt;/code&gt; そう呼こと、 &lt;code&gt;table.insert(t,x)&lt;/code&gt; インサートが &lt;code&gt;x&lt;/code&gt; はリストの最後に &lt;code&gt;t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3151191ed07199be567c359ddf6e784a4e531a23" translate="yes" xml:space="preserve">
          <source>Inside a C function you can raise an error by calling &lt;a href=&quot;#lua_error&quot;&gt;&lt;code&gt;lua_error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">C関数内では、&lt;a href=&quot;#lua_error&quot;&gt; &lt;code&gt;lua_error&lt;/code&gt; &lt;/a&gt;を呼び出してエラーを発生させることができます。</target>
        </trans-unit>
        <trans-unit id="85b166ec01ff2a0e99bcb49337529aa50cdf9ed8" translate="yes" xml:space="preserve">
          <source>Internally, Lua uses the C &lt;code&gt;longjmp&lt;/code&gt; facility to handle errors. (Lua will use exceptions if you compile it as C++; search for &lt;code&gt;LUAI_THROW&lt;/code&gt; in the source code for details.) When Lua faces any error (such as a memory allocation error or a type error) it &lt;em&gt;raises&lt;/em&gt; an error; that is, it does a long jump. A &lt;em&gt;protected environment&lt;/em&gt; uses &lt;code&gt;setjmp&lt;/code&gt; to set a recovery point; any error jumps to the most recent active recovery point.</source>
          <target state="translated">内部的には、LuaはC &lt;code&gt;longjmp&lt;/code&gt; 機能を使用してエラーを処理します。 （C ++としてコンパイルする場合、Luaは例外を使用します。詳細については、ソースコードで &lt;code&gt;LUAI_THROW&lt;/code&gt; を検索してください。）Luaでエラー（メモリ割り当てエラーやタイプエラーなど）が&lt;em&gt;発生&lt;/em&gt;すると、エラーが発生します。つまり、ロングジャンプします。&lt;em&gt;保護された環境の&lt;/em&gt;用途は &lt;code&gt;setjmp&lt;/code&gt; のリカバリポイントを設定します。エラーが発生すると、最新のアクティブなリカバリポイントにジャンプします。</target>
        </trans-unit>
        <trans-unit id="8519c30b2fe0a1d5b4b757f31a04911a4641884f" translate="yes" xml:space="preserve">
          <source>Internally, Lua uses the C &lt;code&gt;longjmp&lt;/code&gt; facility to yield a coroutine. Therefore, if a C function &lt;code&gt;foo&lt;/code&gt; calls an API function and this API function yields (directly or indirectly by calling another function that yields), Lua cannot return to &lt;code&gt;foo&lt;/code&gt; any more, because the &lt;code&gt;longjmp&lt;/code&gt; removes its frame from the C stack.</source>
          <target state="translated">内部的には、LuaはC &lt;code&gt;longjmp&lt;/code&gt; 機能を使用してコルーチンを生成します。したがって、C関数 &lt;code&gt;foo&lt;/code&gt; がAPI関数を呼び出し、このAPI関数が（直接または間接的に生成する別の関数を呼び出すことによって）生成する場合、 &lt;code&gt;longjmp&lt;/code&gt; はCスタックからフレームを削除するため、Luaは &lt;code&gt;foo&lt;/code&gt; に戻ることができません。</target>
        </trans-unit>
        <trans-unit id="ffa29374aa14b1802d3041c63b03777bfa3568ee" translate="yes" xml:space="preserve">
          <source>It is a good practice to add all needed metamethods to a table before setting it as a metatable of some object. In particular, the &lt;code&gt;__gc&lt;/code&gt; metamethod works only when this order is followed (see &lt;a href=&quot;#2.5.1&quot;&gt;&amp;sect;2.5.1&lt;/a&gt;).</source>
          <target state="translated">オブジェクトのメタテーブルとして設定する前に、必要なメタメソッドをすべてテーブルに追加することをお勧めします。特に、 &lt;code&gt;__gc&lt;/code&gt; メタメソッドがこの順に（参照続いている場合にのみ動作し&lt;a href=&quot;#2.5.1&quot;&gt;&amp;sect;2.5.1&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1db3cf420aeec740d5b98f3c2218fb5a839f1cb0" translate="yes" xml:space="preserve">
          <source>It is implemented as a macro. The array &lt;code&gt;l&lt;/code&gt; must be the actual array, not a pointer to it.</source>
          <target state="translated">マクロとして実装されています。配列 &lt;code&gt;l&lt;/code&gt; は、それを指すポインターではなく、実際の配列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c9afa0ea65ace9886d214c45b938bb7c94f5de0d" translate="yes" xml:space="preserve">
          <source>It is implemented as the following macro:</source>
          <target state="translated">以下のマクロとして実装されています。</target>
        </trans-unit>
        <trans-unit id="2562ec974531de3f4ff5f92b1e35fb5384a96e25" translate="yes" xml:space="preserve">
          <source>It returns false if there are no errors or true in case of errors.</source>
          <target state="translated">エラーがなければfalseを返し、エラーの場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="53569202de7b24893f55608fc3a251509d5c5ed1" translate="yes" xml:space="preserve">
          <source>Labels and empty statements are called &lt;em&gt;void statements&lt;/em&gt;, as they perform no actions.</source>
          <target state="translated">ラベルと空のステートメントはアクションを実行しないため、&lt;em&gt;voidステートメント&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="34328aff9c833379f4f7362578f7f6f3c35f336b" translate="yes" xml:space="preserve">
          <source>Language constructs will be explained using the usual extended BNF notation, in which {&lt;em&gt;a&lt;/em&gt;} means 0 or more &lt;em&gt;a&lt;/em&gt;'s, and [&lt;em&gt;a&lt;/em&gt;] means an optional &lt;em&gt;a&lt;/em&gt;. Non-terminals are shown like non-terminal, keywords are shown like &lt;b&gt;kword&lt;/b&gt;, and other terminal symbols are shown like &amp;lsquo;&lt;b&gt;=&lt;/b&gt;&amp;rsquo;. The complete syntax of Lua can be found in &lt;a href=&quot;#9&quot;&gt;&amp;sect;9&lt;/a&gt; at the end of this manual.</source>
          <target state="translated">言語構造は、通常の拡張BNF表記を使用して説明されます。ここで、{ &lt;em&gt;a&lt;/em&gt; }は0個以上の&lt;em&gt;aを&lt;/em&gt;意味し、[ &lt;em&gt;a&lt;/em&gt; ]はオプションの&lt;em&gt;aを&lt;/em&gt;意味します。&lt;b&gt;非終端&lt;/b&gt;記号は非終端記号のように表示され、キーワードは&lt;b&gt;kwordの&lt;/b&gt;ように表示され、その他の終端記号は「&lt;b&gt;=&lt;/b&gt;」のように表示されます。Luaの完全な構文は、このマニュアルの最後にある&lt;a href=&quot;#9&quot;&gt;&amp;sect;9&lt;/a&gt;にあります。</target>
        </trans-unit>
        <trans-unit id="b15777583b377cc227a5505487783a1d631969a6" translate="yes" xml:space="preserve">
          <source>Leaves a copy of the module on the stack.</source>
          <target state="translated">スタック上にモジュールのコピーを残します。</target>
        </trans-unit>
        <trans-unit id="c282589ab5afc326acf6f1bd9d84cafcef993944" translate="yes" xml:space="preserve">
          <source>Level 0 is the running function, level 1 is the function that called the running function, etc.</source>
          <target state="translated">レベル0はランニング関数、レベル1はランニング関数を呼び出した関数などです。</target>
        </trans-unit>
        <trans-unit id="bd2f93f70d8b01be186bad25b37a58b9b3ce91ea" translate="yes" xml:space="preserve">
          <source>Lexical Conventions</source>
          <target state="translated">語彙規則</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="63d6bf8afb548c458acc9de58d99159419a5b08e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#pdf-coroutine.create&quot;&gt;&lt;code&gt;coroutine.create&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; function also creates a coroutine, but instead of returning the coroutine itself, it returns a function that, when called, resumes the coroutine. Any arguments passed to this function go as extra arguments to &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; returns all the values returned by &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;, except the first one (the boolean error code). Unlike &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; does not catch errors; any error is propagated to the caller.</source>
          <target state="translated">&lt;a href=&quot;#pdf-coroutine.create&quot;&gt; &lt;code&gt;coroutine.create&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; &lt;/a&gt;関数もコルーチンを作成しますが、コルーチン自体を返すのではなく、呼び出されたときにコルーチンを再開する関数を返します。この関数に渡される引数は、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;への追加の引数として渡されます。&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; &lt;/a&gt;は、最初の値（ブールエラーコード）を除いて、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;によって返されるすべての値を返します。&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; &lt;/a&gt;はエラーをキャッチしません。エラーは呼び出し元に伝搬されます。</target>
        </trans-unit>
        <trans-unit id="589bb9a9b2f8417c5c99beaf7b463ed9bff7b7a8" translate="yes" xml:space="preserve">
          <source>Like any other reference manual, this document is dry in places. For a discussion of the decisions behind the design of Lua, see the technical papers available at Lua's web site. For a detailed introduction to programming in Lua, see Roberto's book, &lt;em&gt;Programming in Lua&lt;/em&gt;.</source>
          <target state="translated">他のリファレンスマニュアルと同様に、このドキュメントは一部が乾燥しています。Luaの設計の背後にある決定の議論については、LuaのWebサイトで入手可能な技術文書を参照してください。Luaでのプログラミングの詳細については、Robertoの著書 『&lt;em&gt;Programming in Lua&lt;/em&gt;』を参照してください。</target>
        </trans-unit>
        <trans-unit id="0685b0afda8aac522f92e3eb98e6860f9fdecb1c" translate="yes" xml:space="preserve">
          <source>Like indices, the values of table fields can be of any type. In particular, because functions are first-class values, table fields can contain functions. Thus tables can also carry &lt;em&gt;methods&lt;/em&gt; (see &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;).</source>
          <target state="translated">インデックスと同様に、テーブルフィールドの値は任意のタイプにすることができます。特に、関数はファーストクラスの値であるため、テーブルフィールドに関数を含めることができます。したがって、テーブルは&lt;em&gt;メソッドを&lt;/em&gt;運ぶこともでき&lt;em&gt;ます&lt;/em&gt;（&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8afe6c1d451218575629deb4965cb995c2e958ea" translate="yes" xml:space="preserve">
          <source>Like with indexing, the metamethod for this event can be either a function or a table. If it is a function, it is called with &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt; as arguments. If it is a table, Lua does an indexing assignment to this table with the same key and value. (This assignment is regular, not raw, and therefore can trigger another metamethod.)</source>
          <target state="translated">インデックス作成の場合と同様に、このイベントのメタメソッドは関数またはテーブルのいずれかです。関数の場合は、 &lt;code&gt;table&lt;/code&gt; 、 &lt;code&gt;key&lt;/code&gt; 、および &lt;code&gt;value&lt;/code&gt; を引数として呼び出されます。テーブルの場合、Luaは同じキーと値を使用してこのテーブルにインデックス割り当てを行います。 （この割り当ては、生ではなく定期的であるため、別のメタメソッドをトリガーできます。）</target>
        </trans-unit>
        <trans-unit id="5cf4bcbf4e9a4c997d9f25e1a4ebd39ad823de69" translate="yes" xml:space="preserve">
          <source>Literal strings can also be defined using a long format enclosed by &lt;em&gt;long brackets&lt;/em&gt;. We define an &lt;em&gt;opening long bracket of level &lt;em&gt;n&lt;/em&gt;&lt;/em&gt; as an opening square bracket followed by &lt;em&gt;n&lt;/em&gt; equal signs followed by another opening square bracket. So, an opening long bracket of level 0 is written as &lt;code&gt;[[&lt;/code&gt;, an opening long bracket of level 1 is written as &lt;code&gt;[=[&lt;/code&gt;, and so on. A &lt;em&gt;closing long bracket&lt;/em&gt; is defined similarly; for instance, a closing long bracket of level 4 is written as &lt;code&gt;]====]&lt;/code&gt;. A &lt;em&gt;long literal&lt;/em&gt; starts with an opening long bracket of any level and ends at the first closing long bracket of the same level. It can contain any text except a closing bracket of the same level. Literals in this bracketed form can run for several lines, do not interpret any escape sequences, and ignore long brackets of any other level. Any kind of end-of-line sequence (carriage return, newline, carriage return followed by newline, or newline followed by carriage return) is converted to a simple newline.</source>
          <target state="translated">リテラル文字列は、&lt;em&gt;長い角かっこで&lt;/em&gt;囲まれた長い形式を使用して定義することもでき&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;レベル&lt;em&gt;nの&lt;/em&gt;&lt;/em&gt;&lt;em&gt;開始の長い括弧を&lt;/em&gt;、開始の角括弧、&lt;em&gt;nの&lt;/em&gt;等号、それに続く別の開始の角括弧として定義します。したがって、レベル0の開始ロングブラケットは &lt;code&gt;[[&lt;/code&gt; として記述され、レベル1の開始ロングブラケットは &lt;code&gt;[=[&lt;/code&gt; として記述されます。&lt;em&gt;閉鎖長いブラケットは&lt;/em&gt;同様に定義されます。たとえば、レベル4の閉じ長いブラケットは &lt;code&gt;]====]&lt;/code&gt; と記述されます。&lt;em&gt;長いリテラル&lt;/em&gt;任意のレベルの開始ロングブラケットで始まり、同じレベルの最初の終了ロングブラケットで終了します。同じレベルの閉じ括弧以外の任意のテキストを含めることができます。この括弧で囲まれた形式のリテラルは、数行にわたって実行でき、エスケープシーケンスを解釈せず、他のレベルの長い括弧を無視します。すべての種類の行末シーケンス（復帰、改行、復帰とそれに続く改行、または復帰とそれに続く復帰）は、単純な改行に変換されます。</target>
        </trans-unit>
        <trans-unit id="e1021ae8c4b84ca4a4e3486abedfb8d10587c094" translate="yes" xml:space="preserve">
          <source>Loads a Lua chunk without running it. If there are no errors, &lt;code&gt;lua_load&lt;/code&gt; pushes the compiled chunk as a Lua function on top of the stack. Otherwise, it pushes an error message.</source>
          <target state="translated">実行せずにLuaチャンクをロードします。エラーがない場合、 &lt;code&gt;lua_load&lt;/code&gt; はコンパイルされたチャンクをLua関数としてスタックの一番上にプッシュします。それ以外の場合は、エラーメッセージをプッシュします。</target>
        </trans-unit>
        <trans-unit id="d5d5fd2502388f4bdbfdc40480095cb9940c91fb" translate="yes" xml:space="preserve">
          <source>Loads a buffer as a Lua chunk. This function uses &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; to load the chunk in the buffer pointed to by &lt;code&gt;buff&lt;/code&gt; with size &lt;code&gt;sz&lt;/code&gt;.</source>
          <target state="translated">バッファをLuaチャンクとしてロードします。この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;を使用して、サイズ &lt;code&gt;sz&lt;/code&gt; の &lt;code&gt;buff&lt;/code&gt; が指すバッファーにチャンクをロードします。</target>
        </trans-unit>
        <trans-unit id="014ceb5ba979a3f7460e80adaf03760442d4492f" translate="yes" xml:space="preserve">
          <source>Loads a chunk.</source>
          <target state="translated">チャンクを積む。</target>
        </trans-unit>
        <trans-unit id="8dd06506aefef93d24f715ed25819bedec96323c" translate="yes" xml:space="preserve">
          <source>Loads a file as a Lua chunk. This function uses &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; to load the chunk in the file named &lt;code&gt;filename&lt;/code&gt;. If &lt;code&gt;filename&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, then it loads from the standard input. The first line in the file is ignored if it starts with a &lt;code&gt;#&lt;/code&gt;.</source>
          <target state="translated">ファイルをLuaチャンクとしてロードします。この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;filename&lt;/code&gt; という名前のファイルにチャンクをロードします。 &lt;code&gt;filename&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; の場合、標準入力からロードされます。 &lt;code&gt;#&lt;/code&gt; で始まる場合、ファイルの最初の行は無視されます。</target>
        </trans-unit>
        <trans-unit id="f640ebe64a89ecb5b9bd56467fcc7e3fb5298535" translate="yes" xml:space="preserve">
          <source>Loads a string as a Lua chunk. This function uses &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; to load the chunk in the zero-terminated string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">文字列をLuaチャンクとしてロードします。この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;を使用して、ゼロで終了する文字列 &lt;code&gt;s&lt;/code&gt; にチャンクをロードします。</target>
        </trans-unit>
        <trans-unit id="601f4f126ff0dc3c88078602ece1575bc60b38da" translate="yes" xml:space="preserve">
          <source>Loads and runs the given file. It is defined as the following macro:</source>
          <target state="translated">与えられたファイルをロードして実行します。以下のマクロで定義されています。</target>
        </trans-unit>
        <trans-unit id="41daddb6c30d8daa7aa997ef002e9682aa252572" translate="yes" xml:space="preserve">
          <source>Loads and runs the given string. It is defined as the following macro:</source>
          <target state="translated">与えられた文字列をロードして実行します。以下のマクロとして定義されています。</target>
        </trans-unit>
        <trans-unit id="5754e2c7cbb7348e49d26f5b052dec66fe41474e" translate="yes" xml:space="preserve">
          <source>Loads the given module. The function starts by looking into the &lt;a href=&quot;#pdf-package.loaded&quot;&gt;&lt;code&gt;package.loaded&lt;/code&gt;&lt;/a&gt; table to determine whether &lt;code&gt;modname&lt;/code&gt; is already loaded. If it is, then &lt;code&gt;require&lt;/code&gt; returns the value stored at &lt;code&gt;package.loaded[modname]&lt;/code&gt;. Otherwise, it tries to find a &lt;em&gt;loader&lt;/em&gt; for the module.</source>
          <target state="translated">指定されたモジュールをロードします。関数はまず、&lt;a href=&quot;#pdf-package.loaded&quot;&gt; &lt;code&gt;package.loaded&lt;/code&gt; &lt;/a&gt;テーブルを調べて、 &lt;code&gt;modname&lt;/code&gt; がすでにロードされているかどうかを判別します。そうであれば、 &lt;code&gt;require&lt;/code&gt; は &lt;code&gt;package.loaded[modname]&lt;/code&gt; 保存されている値を返します。それ以外の場合は、モジュールの&lt;em&gt;ローダー&lt;/em&gt;を見つけようとします。</target>
        </trans-unit>
        <trans-unit id="675ad816883ad3050b77c4af165af0c382872da3" translate="yes" xml:space="preserve">
          <source>Local Declarations</source>
          <target state="translated">ローカル宣言</target>
        </trans-unit>
        <trans-unit id="e74ccb9aead3e3f9b1bc796bf321e14c551c0f2e" translate="yes" xml:space="preserve">
          <source>Local variables can be declared anywhere inside a block. The declaration can include an initial assignment:</source>
          <target state="translated">ローカル変数はブロック内のどこでも宣言できます。宣言には初期代入を含めることができます。</target>
        </trans-unit>
        <trans-unit id="65eac6118ebdd55aa38b41f70efdf532e567ffd8" translate="yes" xml:space="preserve">
          <source>Logical Operators</source>
          <target state="translated">論理演算子</target>
        </trans-unit>
        <trans-unit id="f3c2c12151d04fbe64aef12442234645ff418818" translate="yes" xml:space="preserve">
          <source>Looks for the first &lt;em&gt;match&lt;/em&gt; of &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) in the string &lt;code&gt;s&lt;/code&gt;. If it finds one, then &lt;code&gt;match&lt;/code&gt; returns the captures from the pattern; otherwise it returns &lt;b&gt;nil&lt;/b&gt;. If &lt;code&gt;pattern&lt;/code&gt; specifies no captures, then the whole match is returned. A third, optional numeric argument &lt;code&gt;init&lt;/code&gt; specifies where to start the search; its default value is 1 and can be negative.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; で &lt;code&gt;pattern&lt;/code&gt; の最初の&lt;em&gt;一致&lt;/em&gt;（&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）を検索します。見つかった場合、 &lt;code&gt;match&lt;/code&gt; はパターンからのキャプチャを返します。それ以外の場合は&lt;b&gt;nilを&lt;/b&gt;返します。 &lt;code&gt;pattern&lt;/code&gt; がキャプチャを指定しない場合、一致全体が返されます。 3番目のオプションの数値引数 &lt;code&gt;init&lt;/code&gt; は、検索を開始する場所を指定します。デフォルト値は1で、負の値も可能です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0531dd8559629f728382a45e8fa0141160f819b2" translate="yes" xml:space="preserve">
          <source>Looks for the first match of &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) in the string &lt;code&gt;s&lt;/code&gt;. If it finds a match, then &lt;code&gt;find&lt;/code&gt; returns the indices of &lt;code&gt;s&lt;/code&gt; where this occurrence starts and ends; otherwise, it returns &lt;b&gt;nil&lt;/b&gt;. A third, optional numeric argument &lt;code&gt;init&lt;/code&gt; specifies where to start the search; its default value is 1 and can be negative. A value of &lt;b&gt;true&lt;/b&gt; as a fourth, optional argument &lt;code&gt;plain&lt;/code&gt; turns off the pattern matching facilities, so the function does a plain &quot;find substring&quot; operation, with no characters in &lt;code&gt;pattern&lt;/code&gt; being considered magic. Note that if &lt;code&gt;plain&lt;/code&gt; is given, then &lt;code&gt;init&lt;/code&gt; must be given as well.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; で &lt;code&gt;pattern&lt;/code&gt; の最初の一致（&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）を検索します。一致が見つかると、 &lt;code&gt;find&lt;/code&gt; は、このオカレンスが開始および終了する &lt;code&gt;s&lt;/code&gt; のインデックスを返します。それ以外の場合は&lt;b&gt;nilを&lt;/b&gt;返します。 3番目のオプションの数値引数 &lt;code&gt;init&lt;/code&gt; は、検索を開始する場所を指定します。デフォルト値は1で、負の値も可能です。4番目のオプションの引数 &lt;code&gt;plain&lt;/code&gt; として&lt;b&gt;true&lt;/b&gt;の値を指定すると、パターンマッチング機能が無効になるため、関数は単純な「サブストリングの検索」操作を実行し、 &lt;code&gt;pattern&lt;/code&gt; 内の文字はマジックと見なされません。 &lt;code&gt;plain&lt;/code&gt; が指定されている場合、&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt; &lt;code&gt;init&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b0832074630eb731d7fbe8074de48a90cd9bb220" translate="yes" xml:space="preserve">
          <source>Lua</source>
          <target state="translated">Lua</target>
        </trans-unit>
        <trans-unit id="74935e355c6d4299b6901e869daba41fae3ae4f2" translate="yes" xml:space="preserve">
          <source>Lua 5.3 Reference Manual</source>
          <target state="translated">Lua 5.3 リファレンスマニュアル</target>
        </trans-unit>
        <trans-unit id="e8957a41e15b0eb53aad63ef201700fe8063f094" translate="yes" xml:space="preserve">
          <source>Lua allows multiple assignments. Therefore, the syntax for assignment defines a list of variables on the left side and a list of expressions on the right side. The elements in both lists are separated by commas:</source>
          <target state="translated">Luaでは複数の代入が可能です。そのため、代入の構文では、左側に変数のリスト、右側に式のリストを定義します。両リストの要素はカンマで区切られています。</target>
        </trans-unit>
        <trans-unit id="1e02808cd690aaf7df864db5c4c452af196be013" translate="yes" xml:space="preserve">
          <source>Lua also converts strings to numbers, whenever a number is expected.</source>
          <target state="translated">また、Luaでは文字列を数字に変換することもできます。</target>
        </trans-unit>
        <trans-unit id="93377de262ae6c56472bd1d07591e21435ec1e52" translate="yes" xml:space="preserve">
          <source>Lua also defines the constants &lt;a id=&quot;pdf-LUA_MININTEGER&quot;&gt;&lt;code&gt;LUA_MININTEGER&lt;/code&gt;&lt;/a&gt; and &lt;a id=&quot;pdf-LUA_MAXINTEGER&quot;&gt;&lt;code&gt;LUA_MAXINTEGER&lt;/code&gt;&lt;/a&gt;, with the minimum and the maximum values that fit in this type.</source>
          <target state="translated">Luaは定数&lt;a id=&quot;pdf-LUA_MININTEGER&quot;&gt; &lt;code&gt;LUA_MININTEGER&lt;/code&gt; &lt;/a&gt;および&lt;a id=&quot;pdf-LUA_MAXINTEGER&quot;&gt; &lt;code&gt;LUA_MAXINTEGER&lt;/code&gt; &lt;/a&gt;も定義し、この型に適合する最小値と最大値を使用します。</target>
        </trans-unit>
        <trans-unit id="801090e92a322f968636387436cbfb91aa33b154" translate="yes" xml:space="preserve">
          <source>Lua also has a &lt;b&gt;for&lt;/b&gt; statement, in two flavors (see &lt;a href=&quot;#3.3.5&quot;&gt;&amp;sect;3.3.5&lt;/a&gt;).</source>
          <target state="translated">Luaには、2つの種類の&lt;b&gt;for&lt;/b&gt;ステートメントもあります（&lt;a href=&quot;#3.3.5&quot;&gt;&amp;sect;3.3.5を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3da908593ea7c1cd8a16b5d87a2733072f9be916" translate="yes" xml:space="preserve">
          <source>Lua assumes the following behavior from the allocator function:</source>
          <target state="translated">Luaでは、アロケータ関数から以下のような動作を想定しています。</target>
        </trans-unit>
        <trans-unit id="ebffede5db745b98cdaa093a245240704c9e96b1" translate="yes" xml:space="preserve">
          <source>Lua can call (and manipulate) functions written in Lua and functions written in C (see &lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10&lt;/a&gt;). Both are represented by the type &lt;em&gt;function&lt;/em&gt;.</source>
          <target state="translated">Luaは、Luaで記述された関数とCで記述された関数を呼び出す（および操​​作する）ことができます（&lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10を&lt;/a&gt;参照）。どちらもtype &lt;em&gt;関数で&lt;/em&gt;表され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="95c6862384367c489829b9fcf5d130d494969aa1" translate="yes" xml:space="preserve">
          <source>Lua code can explicitly generate an error by calling the &lt;a href=&quot;#pdf-error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; function. If you need to catch errors in Lua, you can use &lt;a href=&quot;#pdf-pcall&quot;&gt;&lt;code&gt;pcall&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pdf-xpcall&quot;&gt;&lt;code&gt;xpcall&lt;/code&gt;&lt;/a&gt; to call a given function in &lt;em&gt;protected mode&lt;/em&gt;.</source>
          <target state="translated">Luaコードは、&lt;a href=&quot;#pdf-error&quot;&gt; &lt;code&gt;error&lt;/code&gt; &lt;/a&gt;関数を呼び出すことにより、明示的にエラーを生成できます。Luaでエラーをキャッチする必要がある場合は、&lt;a href=&quot;#pdf-pcall&quot;&gt; &lt;code&gt;pcall&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#pdf-xpcall&quot;&gt; &lt;code&gt;xpcall&lt;/code&gt; &lt;/a&gt;を使用して、&lt;em&gt;プロテクトモードで&lt;/em&gt;特定の関数を呼び出すことができ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="55000944726bac35e3a7a8c2c659ce8ea827ae88" translate="yes" xml:space="preserve">
          <source>Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode with a register-based virtual machine, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping.</source>
          <target state="translated">Luaは、シンプルな手続き的構文と、連想配列と拡張可能なセマンティクスに基づく強力なデータ記述構造を組み合わせたものです。Luaは動的に型付けされ、レジスタベースの仮想マシンでバイトコードを解釈して実行されます。また、インクリメンタルガベージコレクションによる自動メモリ管理機能を備えているため、設定やスクリプト作成、ラピッドプロトタイピングに最適です。</target>
        </trans-unit>
        <trans-unit id="8c26f824cf75010655e9550b8fde705425a3784c" translate="yes" xml:space="preserve">
          <source>Lua does not check the consistency of binary chunks. Maliciously crafted binary chunks can crash the interpreter.</source>
          <target state="translated">Lua はバイナリチャンクの整合性をチェックしません。悪意を持って作られたバイナリチャンクは、インタープリタをクラッシュさせる可能性があります。</target>
        </trans-unit>
        <trans-unit id="35b65ab36f2f47f5954bb270f0f9be36cfe1a6ba" translate="yes" xml:space="preserve">
          <source>Lua handles a chunk as the body of an anonymous function with a variable number of arguments (see &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;). As such, chunks can define local variables, receive arguments, and return values. Moreover, such anonymous function is compiled as in the scope of an external local variable called &lt;code&gt;_ENV&lt;/code&gt; (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). The resulting function always has &lt;code&gt;_ENV&lt;/code&gt; as its only upvalue, even if it does not use that variable.</source>
          <target state="translated">Luaはチャンクを可変数の引数を持つ無名関数の本体として扱います（&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11を&lt;/a&gt;参照）。したがって、チャンクはローカル変数を定義し、引数を受け取り、値を返すことができます。また、このような匿名関数が呼び出される外部ローカル変数のスコープのようにコンパイルされ &lt;code&gt;_ENV&lt;/code&gt; （参照&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;）。結果の関数は、その変数を使用していなくても、常に &lt;code&gt;_ENV&lt;/code&gt; を唯一のアップバリューとして持っています。</target>
        </trans-unit>
        <trans-unit id="7bb5694782dd5240f5a360755736e520cb7caddd" translate="yes" xml:space="preserve">
          <source>Lua has &lt;em&gt;empty statements&lt;/em&gt; that allow you to separate statements with semicolons, start a block with a semicolon or write two semicolons in sequence:</source>
          <target state="translated">Luaには&lt;em&gt;空のステートメント&lt;/em&gt;があり、セミコロンでステートメントを分離したり、セミコロンでブロックを開始したり、2つのセミコロンを順番に書き込んだりできます。</target>
        </trans-unit>
        <trans-unit id="08b67a26f91c4bb6ecbeaabc79499925202576c4" translate="yes" xml:space="preserve">
          <source>Lua has no built-in debugging facilities. Instead, it offers a special interface by means of functions and &lt;em&gt;hooks&lt;/em&gt;. This interface allows the construction of different kinds of debuggers, profilers, and other tools that need &quot;inside information&quot; from the interpreter.</source>
          <target state="translated">Luaにはデバッグ機能が組み込まれていません。代わりに、関数と&lt;em&gt;フック&lt;/em&gt;によって特別なインターフェースを提供します。このインターフェイスを使用すると、インタープリターからの「内部情報」を必要とするさまざまな種類のデバッガー、プロファイラー、およびその他のツールを構築できます。</target>
        </trans-unit>
        <trans-unit id="ab53ba5d8b707a086c1f55306a5e491b7ca0c834" translate="yes" xml:space="preserve">
          <source>Lua implements an incremental mark-and-sweep collector. It uses two numbers to control its garbage-collection cycles: the &lt;em&gt;garbage-collector pause&lt;/em&gt; and the &lt;em&gt;garbage-collector step multiplier&lt;/em&gt;. Both use percentage points as units (e.g., a value of 100 means an internal value of 1).</source>
          <target state="translated">Luaはインクリメンタルマークアンドスイープコレクターを実装しています。ガベージコレクションのサイクルを制御するために、ガベージ&lt;em&gt;コレクタの一時停止&lt;/em&gt;と&lt;em&gt;ガベージコレクタのステップ乗数という&lt;/em&gt; 2つの数値を使用します。どちらもパーセントポイントを単位として使用します（たとえば、値100は内部値1を意味します）。</target>
        </trans-unit>
        <trans-unit id="4be60237bd80620e268374029f3211e510b05c17" translate="yes" xml:space="preserve">
          <source>Lua initializes the C path &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt; in the same way it initializes the Lua path &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt;, using the environment variable &lt;a id=&quot;pdf-LUA_CPATH_5_3&quot;&gt;&lt;code&gt;LUA_CPATH_5_3&lt;/code&gt;&lt;/a&gt;, or the environment variable &lt;a id=&quot;pdf-LUA_CPATH&quot;&gt;&lt;code&gt;LUA_CPATH&lt;/code&gt;&lt;/a&gt;, or a default path defined in &lt;code&gt;luaconf.h&lt;/code&gt;.</source>
          <target state="translated">LuaはCパス初期化&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; &lt;/a&gt;がLuaのパス初期化同様に&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; を&lt;/a&gt;環境変数の使用、&lt;a id=&quot;pdf-LUA_CPATH_5_3&quot;&gt; &lt;code&gt;LUA_CPATH_5_3&lt;/code&gt; &lt;/a&gt;、または環境変数&lt;a id=&quot;pdf-LUA_CPATH&quot;&gt; &lt;code&gt;LUA_CPATH&lt;/code&gt; &lt;/a&gt;、又はで定義されたデフォルトのパス &lt;code&gt;luaconf.h&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="4714009f33265bf1fc4688da888d62c97c45d7b7" translate="yes" xml:space="preserve">
          <source>Lua initializes this table with four searcher functions.</source>
          <target state="translated">Luaはこのテーブルを4つのサーチャー関数で初期化します。</target>
        </trans-unit>
        <trans-unit id="ef9edf704545b26dfa394b151700f2e58198d961" translate="yes" xml:space="preserve">
          <source>Lua is a &lt;em&gt;dynamically typed language&lt;/em&gt;. This means that variables do not have types; only values do. There are no type definitions in the language. All values carry their own type.</source>
          <target state="translated">Luaは&lt;em&gt;動的に型付けされた言語&lt;/em&gt;です。つまり、変数には型がありません。値のみです。言語に型定義はありません。すべての値には独自のタイプがあります。</target>
        </trans-unit>
        <trans-unit id="768b1dfa86b0332cedc5bdb9fcc8e17166f9ef47" translate="yes" xml:space="preserve">
          <source>Lua is a case-sensitive language: &lt;code&gt;and&lt;/code&gt; is a reserved word, but &lt;code&gt;And&lt;/code&gt; and &lt;code&gt;AND&lt;/code&gt; are two different, valid names. As a convention, programs should avoid creating names that start with an underscore followed by one or more uppercase letters (such as &lt;a href=&quot;#pdf-_VERSION&quot;&gt;&lt;code&gt;_VERSION&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Luaは大文字と小文字を区別する言語です &lt;code&gt;and&lt;/code&gt; 予約語ですが、 &lt;code&gt;And&lt;/code&gt; そして &lt;code&gt;AND&lt;/code&gt; 二つの異なる、有効な名前です。慣例として、プログラムは、アンダースコアで始まり、1つ以上の大文字が続く名前（&lt;a href=&quot;#pdf-_VERSION&quot;&gt; &lt;code&gt;_VERSION&lt;/code&gt; &lt;/a&gt;など）を作成しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="5747aeb4d5eff65fa7549c62e63b2802c05d28fa" translate="yes" xml:space="preserve">
          <source>Lua is a free-form language. It ignores spaces (including new lines) and comments between lexical elements (tokens), except as delimiters between names and keywords.</source>
          <target state="translated">Lua は自由形式言語です。名前とキーワードの間の区切り文字として使用する場合を除き、スペース(改行を含む)や字句要素(トークン)間のコメントは無視されます。</target>
        </trans-unit>
        <trans-unit id="10cf3931978ad3da8f2a0c2e42a3bc57db1befcb" translate="yes" xml:space="preserve">
          <source>Lua is a lexically scoped language. The scope of a local variable begins at the first statement after its declaration and lasts until the last non-void statement of the innermost block that includes the declaration. Consider the following example:</source>
          <target state="translated">Lua は語彙的にスコープが設定された言語です。ローカル変数のスコープは、宣言後の最初のステートメントから始まり、その宣言を含む最上位ブロックの最後の非ボイドステートメントまで続きます。次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="64997c71b569a923ad45e14df6ef4a0a98b01aef" translate="yes" xml:space="preserve">
          <source>Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description.</source>
          <target state="translated">Luaは、パワフルで効率的、軽量、埋め込み可能なスクリプト言語です。手続き型プログラミング、オブジェクト指向プログラミング、関数型プログラミング、データ駆動型プログラミング、データ記述をサポートしています。</target>
        </trans-unit>
        <trans-unit id="6525b86788861e011c88cf07f7294dd56f02830d" translate="yes" xml:space="preserve">
          <source>Lua is free software, and is provided as usual with no guarantees, as stated in its license. The implementation described in this manual is available at Lua's official web site, &lt;code&gt;www.lua.org&lt;/code&gt;.</source>
          <target state="translated">Luaはフリーソフトウェアであり、ライセンスに記載されているように、通常どおり提供され、保証はありません。このマニュアルで説明されている実装は、Luaの公式Webサイト &lt;code&gt;www.lua.org&lt;/code&gt; から入手できます。</target>
        </trans-unit>
        <trans-unit id="bf89f8ce15263309be1a18939b1bc8b312081d0b" translate="yes" xml:space="preserve">
          <source>Lua is implemented as a library, written in &lt;em&gt;clean C&lt;/em&gt;, the common subset of Standard C and C++. The Lua distribution includes a host program called &lt;code&gt;lua&lt;/code&gt;, which uses the Lua library to offer a complete, standalone Lua interpreter, for interactive or batch use. Lua is intended to be used both as a powerful, lightweight, embeddable scripting language for any program that needs one, and as a powerful but lightweight and efficient stand-alone language.</source>
          <target state="translated">Luaは、標準CおよびC ++の共通サブセットである&lt;em&gt;クリーンC&lt;/em&gt;で記述されたライブラリーとして実装されます。Luaのディストリビューションと呼ばれるホストプログラムが含ま &lt;code&gt;lua&lt;/code&gt; 対話型またはバッチの使用のために、完全なスタンドアロンのLuaインタプリタを提供するためにLuaのライブラリを使用しています、。Luaは、強力で軽量な埋め込み可能なスクリプト言語として、プログラムを必要とするすべてのプログラムと、強力でありながら軽量で効率的なスタンドアロン言語の両方として使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="766bf2f3607b0c894574e1db0930518cd452197d" translate="yes" xml:space="preserve">
          <source>Lua keeps a distinguished environment called the &lt;em&gt;global environment&lt;/em&gt;. This value is kept at a special index in the C registry (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;). In Lua, the global variable &lt;a href=&quot;#pdf-_G&quot;&gt;&lt;code&gt;_G&lt;/code&gt;&lt;/a&gt; is initialized with this same value. (&lt;a href=&quot;#pdf-_G&quot;&gt;&lt;code&gt;_G&lt;/code&gt;&lt;/a&gt; is never used internally.)</source>
          <target state="translated">Luaは、&lt;em&gt;地球環境&lt;/em&gt;と呼ばれる際立った環境を維持してい&lt;em&gt;ます&lt;/em&gt;。この値は、Cレジストリの特別なインデックスに保持されます（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。Luaでは、グローバル変数&lt;a href=&quot;#pdf-_G&quot;&gt; &lt;code&gt;_G&lt;/code&gt; &lt;/a&gt;はこれと同じ値で初期化されます。（&lt;a href=&quot;#pdf-_G&quot;&gt; &lt;code&gt;_G&lt;/code&gt; &lt;/a&gt;は内部的に使用されることはありません。）</target>
        </trans-unit>
        <trans-unit id="50a6344d2469ab6de8e8a3709a57a990d508f2b9" translate="yes" xml:space="preserve">
          <source>Lua performs automatic memory management. This means that you do not have to worry about allocating memory for new objects or freeing it when the objects are no longer needed. Lua manages memory automatically by running a &lt;em&gt;garbage collector&lt;/em&gt; to collect all &lt;em&gt;dead objects&lt;/em&gt; (that is, objects that are no longer accessible from Lua). All memory used by Lua is subject to automatic management: strings, tables, userdata, functions, threads, internal structures, etc.</source>
          <target state="translated">Luaは自動メモリ管理を実行します。つまり、新しいオブジェクトにメモリを割り当てたり、オブジェクトが不要になったときにメモリを解放したりする必要はありません。 Luaは、&lt;em&gt;ガベージコレクター&lt;/em&gt;を実行してすべての&lt;em&gt;無効なオブジェクト&lt;/em&gt;（つまり、Luaからアクセスできなくなったオブジェクト）を&lt;em&gt;収集&lt;/em&gt;することにより、メモリを自動的に管理します。 Luaが使用するすべてのメモリは自動管理の対象になります：文字列、テーブル、ユーザーデータ、関数、スレッド、内部構造など。</target>
        </trans-unit>
        <trans-unit id="ff53c69b14f5a971156b01cea314fe8462f1fb40" translate="yes" xml:space="preserve">
          <source>Lua provides a &lt;em&gt;registry&lt;/em&gt;, a predefined table that can be used by any C code to store whatever Lua values it needs to store. The registry table is always located at pseudo-index &lt;a id=&quot;pdf-LUA_REGISTRYINDEX&quot;&gt;&lt;code&gt;LUA_REGISTRYINDEX&lt;/code&gt;&lt;/a&gt;. Any C library can store data into this table, but it must take care to choose keys that are different from those used by other libraries, to avoid collisions. Typically, you should use as key a string containing your library name, or a light userdata with the address of a C object in your code, or any Lua object created by your code. As with variable names, string keys starting with an underscore followed by uppercase letters are reserved for Lua.</source>
          <target state="translated">Luaは&lt;em&gt;レジストリを&lt;/em&gt;提供し&lt;em&gt;ます。これ&lt;/em&gt;は、任意のCコードが格納に必要なLuaの値を格納するために使用できる定義済みのテーブルです。レジストリテーブルは常に疑似インデックス&lt;a id=&quot;pdf-LUA_REGISTRYINDEX&quot;&gt; &lt;code&gt;LUA_REGISTRYINDEX&lt;/code&gt; にあり&lt;/a&gt;ます。どのCライブラリでもこのテーブルにデータを格納できますが、衝突を避けるために、他のライブラリで使用されているものとは異なるキーを選択するように注意する必要があります。通常は、ライブラリ名を含む文字列、コード内のCオブジェクトのアドレスを含むライトユーザーデータ、またはコードによって作成されたLuaオブジェクトをキーとして使用する必要があります。変数名と同様に、アンダースコアで始まり、その後に大文字が続く文字列キーは、Lua用に予約されています。</target>
        </trans-unit>
        <trans-unit id="8aebea72c222a51d9f5c90460286acb8ff7bd836" translate="yes" xml:space="preserve">
          <source>Lua provides some automatic conversions between some types and representations at run time. Bitwise operators always convert float operands to integers. Exponentiation and float division always convert integer operands to floats. All other arithmetic operations applied to mixed numbers (integers and floats) convert the integer operand to a float; this is called the &lt;em&gt;usual rule&lt;/em&gt;. The C API also converts both integers to floats and floats to integers, as needed. Moreover, string concatenation accepts numbers as arguments, besides strings.</source>
          <target state="translated">Luaは、実行時にいくつかの型と表現の間のいくつかの自動変換を提供します。ビット演算子は常に浮動小数点オペランドを整数に変換します。べき乗と浮動小数点除算は常に整数オペランドを浮動小数点に変換します。混合数（整数と浮動小数点数）に適用される他のすべての算術演算は、整数オペランドを浮動小数点数に変換します。これは&lt;em&gt;通常のルール&lt;/em&gt;と呼ばれます。 C APIは、必要に応じて、両方の整数を浮動小数点数に、浮動小数点数を整数に変換します。さらに、文字列連結では、文字列のほかに数値を引数として受け入れます。</target>
        </trans-unit>
        <trans-unit id="fc88527d32d4eef52fab883602cc5a04e027d076" translate="yes" xml:space="preserve">
          <source>Lua supports an almost conventional set of statements, similar to those in Pascal or C. This set includes assignments, control structures, function calls, and variable declarations.</source>
          <target state="translated">Luaは、PascalやC言語と同様に、代入、制御構造、関数呼び出し、変数宣言など、ほぼ従来のステートメントをサポートしています。</target>
        </trans-unit>
        <trans-unit id="d24c360e7097470e8a9eb4284ea5f5a81791560b" translate="yes" xml:space="preserve">
          <source>Lua supports coroutines, also called &lt;em&gt;collaborative multithreading&lt;/em&gt;. A coroutine in Lua represents an independent thread of execution. Unlike threads in multithread systems, however, a coroutine only suspends its execution by explicitly calling a yield function.</source>
          <target state="translated">Luaはコルーチンをサポートします。これは、&lt;em&gt;コラボレーションマルチスレッド&lt;/em&gt;とも呼ばれます。Luaのコルーチンは、独立した実行スレッドを表します。ただし、マルチスレッドシステムのスレッドとは異なり、コルーチンは、yield関数を明示的に呼び出して実行を一時停止するだけです。</target>
        </trans-unit>
        <trans-unit id="3591c85e3de8f7bdc4a45d500a8261a9e6ec09be" translate="yes" xml:space="preserve">
          <source>Lua supports the following arithmetic operators:</source>
          <target state="translated">Luaは以下の算術演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="f0e5bf2dcec5e267f3660839f8aee19d34a65569" translate="yes" xml:space="preserve">
          <source>Lua supports the following bitwise operators:</source>
          <target state="translated">Luaは以下のビット演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="681beb7c86ad47856fd70c3b7329189c44c67f13" translate="yes" xml:space="preserve">
          <source>Lua supports the following relational operators:</source>
          <target state="translated">Luaは以下のリレーショナル演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="ea7647f42e558dda5334904038fac1e7ced0aeee" translate="yes" xml:space="preserve">
          <source>Lua treats the continuation function as if it were the original function. The continuation function receives the same Lua stack from the original function, in the same state it would be if the callee function had returned. (For instance, after a &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt; the function and its arguments are removed from the stack and replaced by the results from the call.) It also has the same upvalues. Whatever it returns is handled by Lua as if it were the return of the original function.</source>
          <target state="translated">Luaは継続関数を元の関数と同様に扱います。継続関数は元の関数から同じLuaスタックを受け取ります。呼び出し先関数が戻った場合と同じ状態です。（たとえば、&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;の後、関数とその引数はスタックから削除され、呼び出しの結果に置き換えられます。）また、同じアップ値があります。それが返すものはすべて、それが元の関数の戻りであるかのようにLuaによって処理されます。</target>
        </trans-unit>
        <trans-unit id="8d18554a7115d65153a0cecb32181cd5cd13b803" translate="yes" xml:space="preserve">
          <source>Lua uses a &lt;em&gt;virtual stack&lt;/em&gt; to pass values to and from C. Each element in this stack represents a Lua value (&lt;b&gt;nil&lt;/b&gt;, number, string, etc.). Functions in the API can access this stack through the Lua state parameter that they receive.</source>
          <target state="translated">Luaは&lt;em&gt;仮想スタック&lt;/em&gt;を使用してCとの間で値を渡します。このスタックの各要素はLua値（&lt;b&gt;nil&lt;/b&gt;、数値、文字列など）を表します。APIの関数は、受け取ったLua状態パラメーターを介してこのスタックにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="225017af8d199117d297936391565191b16afd75" translate="yes" xml:space="preserve">
          <source>Lua versions can always change the C API in ways that do not imply source-code changes in a program, such as the numeric values for constants or the implementation of functions as macros. Therefore, you should not assume that binaries are compatible between different Lua versions. Always recompile clients of the Lua API when using a new version.</source>
          <target state="translated">Luaのバージョンでは、定数の数値やマクロとしての関数の実装など、プログラムのソースコードの変更を意味しない方法でC APIを変更することが常にあります。そのため、バイナリが異なる Lua バージョン間で互換性があると思い込んではいけません。新しいバージョンを使用する場合は、必ずLua APIのクライアントを再コンパイルしてください。</target>
        </trans-unit>
        <trans-unit id="d9819702e70f7dce9f1483706cfae2f70bcb9e32" translate="yes" xml:space="preserve">
          <source>Macros to project non-default integer types (&lt;code&gt;luaL_checkint&lt;/code&gt;, &lt;code&gt;luaL_optint&lt;/code&gt;, &lt;code&gt;luaL_checklong&lt;/code&gt;, &lt;code&gt;luaL_optlong&lt;/code&gt;) were deprecated. Use their equivalent over &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt; with a type cast (or, when possible, use &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt; in your code).</source>
          <target state="translated">デフォルト以外の整数型（ &lt;code&gt;luaL_checkint&lt;/code&gt; 、 &lt;code&gt;luaL_optint&lt;/code&gt; 、 &lt;code&gt;luaL_checklong&lt;/code&gt; 、 &lt;code&gt;luaL_optlong&lt;/code&gt; ）を投影するマクロは非推奨になりました。型キャストで&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; に&lt;/a&gt;相当するものを使用します（または、可能であれば、コードで&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; &lt;/a&gt;を使用します）。</target>
        </trans-unit>
        <trans-unit id="b77ee37c1b7bd6807618cb75d302c1c6fbf5df15" translate="yes" xml:space="preserve">
          <source>Make the &lt;code&gt;n1&lt;/code&gt;-th upvalue of the Lua closure &lt;code&gt;f1&lt;/code&gt; refer to the &lt;code&gt;n2&lt;/code&gt;-th upvalue of the Lua closure &lt;code&gt;f2&lt;/code&gt;.</source>
          <target state="translated">Luaクロージャー &lt;code&gt;f1&lt;/code&gt; の &lt;code&gt;n1&lt;/code&gt; 番目のアップ値がLuaクロージャー &lt;code&gt;f2&lt;/code&gt; の &lt;code&gt;n2&lt;/code&gt; 番目のアップ値を参照するようにします。</target>
        </trans-unit>
        <trans-unit id="62787e3133e3f8c1540f23ea948a696e338e2fa1" translate="yes" xml:space="preserve">
          <source>Make the &lt;code&gt;n1&lt;/code&gt;-th upvalue of the Lua closure at index &lt;code&gt;funcindex1&lt;/code&gt; refer to the &lt;code&gt;n2&lt;/code&gt;-th upvalue of the Lua closure at index &lt;code&gt;funcindex2&lt;/code&gt;.</source>
          <target state="translated">作る &lt;code&gt;n1&lt;/code&gt; 番目の上位値のインデックスのLuaのクロージャの &lt;code&gt;funcindex1&lt;/code&gt; はを参照してください &lt;code&gt;n2&lt;/code&gt; のインデックスで番目の上位値Luaのクロージャの &lt;code&gt;funcindex2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0580c95da4f3ceb84abf5c18ee164021809ea4c" translate="yes" xml:space="preserve">
          <source>Metatables and Metamethods</source>
          <target state="translated">メタテーブルとメタメソッド</target>
        </trans-unit>
        <trans-unit id="4feff686bfbdf59cf154d1294db67c187b9f7489" translate="yes" xml:space="preserve">
          <source>Modulo is defined as the remainder of a division that rounds the quotient towards minus infinity (floor division).</source>
          <target state="translated">モデューロとは、商をマイナス無限大に向けて丸める除算(床除算)の残りと定義されています。</target>
        </trans-unit>
        <trans-unit id="71e2b3ce8af16f1677267e51894cb5b57ee61429" translate="yes" xml:space="preserve">
          <source>Moreover, with a &lt;code&gt;count&lt;/code&gt; different from zero, the hook is called also after every &lt;code&gt;count&lt;/code&gt; instructions.</source>
          <target state="translated">さらに、 &lt;code&gt;count&lt;/code&gt; がゼロ以外の場合、フックはすべての &lt;code&gt;count&lt;/code&gt; 命令の後にも呼び出されます。</target>
        </trans-unit>
        <trans-unit id="68a5432576b0a8367df52ec04ef603f754149162" translate="yes" xml:space="preserve">
          <source>Most functions in the API can raise an error, for instance due to a memory allocation error. The documentation for each function indicates whether it can raise errors.</source>
          <target state="translated">API のほとんどの関数は、メモリ割り当てエラーなどの理由でエラーを発生させることができます。各関数のドキュメントには、エラーを発生させることができるかどうかが記載されています。</target>
        </trans-unit>
        <trans-unit id="211349efeacad71bfc6580d063e630f7c7ac8b51" translate="yes" xml:space="preserve">
          <source>Moves elements from table &lt;code&gt;a1&lt;/code&gt; to table &lt;code&gt;a2&lt;/code&gt;, performing the equivalent to the following multiple assignment: &lt;code&gt;a2[t],&amp;middot;&amp;middot;&amp;middot; = a1[f],&amp;middot;&amp;middot;&amp;middot;,a1[e]&lt;/code&gt;. The default for &lt;code&gt;a2&lt;/code&gt; is &lt;code&gt;a1&lt;/code&gt;. The destination range can overlap with the source range. The number of elements to be moved must fit in a Lua integer.</source>
          <target state="translated">要素をテーブル &lt;code&gt;a1&lt;/code&gt; からテーブル &lt;code&gt;a2&lt;/code&gt; に移動し、次の複数の代入と同等の処理を実行します： &lt;code&gt;a2[t],&amp;middot;&amp;middot;&amp;middot; = a1[f],&amp;middot;&amp;middot;&amp;middot;,a1[e]&lt;/code&gt; 。 &lt;code&gt;a2&lt;/code&gt; のデフォルトは &lt;code&gt;a1&lt;/code&gt; です。宛先範囲は、ソース範囲と重複する可能性があります。移動する要素の数は、Lua整数に収まる必要があります。</target>
        </trans-unit>
        <trans-unit id="7f2bdd0bd3d59fce772f98ee9eb7eb0b3b6d4a93" translate="yes" xml:space="preserve">
          <source>Moves the top element into the given valid index without shifting any element (therefore replacing the value at that given index), and then pops the top element.</source>
          <target state="translated">先頭の要素をシフトせずに有効なインデックスに移動し(したがって、そのインデックスの値を置き換えます)、先頭の要素をポップします。</target>
        </trans-unit>
        <trans-unit id="4e0c82df95dd4d912151141c645e29919783b9cd" translate="yes" xml:space="preserve">
          <source>Moves the top element into the given valid index, shifting up the elements above this index to open space. This function cannot be called with a pseudo-index, because a pseudo-index is not an actual stack position.</source>
          <target state="translated">先頭の要素を有効なインデックスに移動し、このインデックスより上の要素をオープンスペースに移動します。疑似インデックスは実際のスタックの位置ではないので、この関数は疑似インデックスを指定して呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="53b225abd3f0033a18a8e56044eee89e7ebbd191" translate="yes" xml:space="preserve">
          <source>Name denotes identifiers, as defined in &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;.</source>
          <target state="translated">名前は、&lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1で&lt;/a&gt;定義されている識別子を示します。</target>
        </trans-unit>
        <trans-unit id="1fb92775055c34d37036245800bd4e66793f8802" translate="yes" xml:space="preserve">
          <source>Note that Standard C ensures that &lt;code&gt;free(NULL)&lt;/code&gt; has no effect and that &lt;code&gt;realloc(NULL,size)&lt;/code&gt; is equivalent to &lt;code&gt;malloc(size)&lt;/code&gt;. This code assumes that &lt;code&gt;realloc&lt;/code&gt; does not fail when shrinking a block. (Although Standard C does not ensure this behavior, it seems to be a safe assumption.)</source>
          <target state="translated">標準Cでは、 &lt;code&gt;free(NULL)&lt;/code&gt; は効果がなく、 &lt;code&gt;realloc(NULL,size)&lt;/code&gt; は &lt;code&gt;malloc(size)&lt;/code&gt; と同等であることに注意してください。このコードは、ブロックの縮小時に &lt;code&gt;realloc&lt;/code&gt; が失敗しないことを前提としています。（標準Cではこの動作は保証されていませんが、安全な仮定のようです。）</target>
        </trans-unit>
        <trans-unit id="7a567518fb3007e639daf24d7ac35ede7aba1d84" translate="yes" xml:space="preserve">
          <source>Note that commands for &lt;code&gt;debug.debug&lt;/code&gt; are not lexically nested within any function and so have no direct access to local variables.</source>
          <target state="translated">&lt;code&gt;debug.debug&lt;/code&gt; のコマンドは、関数内で字句的にネストされていないため、ローカル変数に直接アクセスできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a3819f26854d326b0f73d55f7e4a2133dc45716a" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;comp&lt;/code&gt; function must define a strict partial order over the elements in the list; that is, it must be asymmetric and transitive. Otherwise, no valid sort may be possible.</source>
          <target state="translated">&lt;code&gt;comp&lt;/code&gt; 関数は、リスト内の要素に対して厳密な部分順序を定義する必要があることに注意してください。つまり、非対称で推移的でなければなりません。そうしないと、有効なソートができない可能性があります。</target>
        </trans-unit>
        <trans-unit id="1dab5c0bc6e3b7d33e45552977787711c9e9cd82" translate="yes" xml:space="preserve">
          <source>Note that the code above is &lt;em&gt;balanced&lt;/em&gt;: at its end, the stack is back to its original configuration. This is considered good programming practice.</source>
          <target state="translated">上記のコードは&lt;em&gt;バランス&lt;/em&gt;が&lt;em&gt;取れ&lt;/em&gt;ていることに注意してください。最後に、スタックは元の構成に戻ります。これは優れたプログラミング手法と見なされます。</target>
        </trans-unit>
        <trans-unit id="f095d9ef1108e5d2ebeb20830f7a9cdf31641d73" translate="yes" xml:space="preserve">
          <source>Note the external, explicit call to the continuation: Lua will call the continuation only if needed, that is, in case of errors or resuming after a yield. If the called function returns normally without ever yielding, &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt; (and &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt;) will also return normally. (Of course, instead of calling the continuation in that case, you can do the equivalent work directly inside the original function.)</source>
          <target state="translated">継続に対する外部の明示的な呼び出しに注意してください。Luaは、必要な場合にのみ、つまり、エラーが発生した場合、または収量の後に再開した場合にのみ、継続を呼び出します。呼び出された関数が正常に戻ることなく、正常に戻る場合、&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;（および&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;）も正常に戻ります。（もちろん、その場合、継続を呼び出す代わりに、元の関数内で直接同等の作業を行うことができます。）</target>
        </trans-unit>
        <trans-unit id="20d78a8e421517dfc8501178399cb2a435e63306" translate="yes" xml:space="preserve">
          <source>Note the following:</source>
          <target state="translated">以下に注意してください。</target>
        </trans-unit>
        <trans-unit id="143069908049a001ca51a83cef0a8d3fcbe11397" translate="yes" xml:space="preserve">
          <source>Notice that each execution of a &lt;b&gt;local&lt;/b&gt; statement defines new local variables. Consider the following example:</source>
          <target state="translated">&lt;b&gt;ローカル&lt;/b&gt;ステートメントを実行するたびに新しいローカル変数が定義されることに注意してください。次の例を考えてみます。</target>
        </trans-unit>
        <trans-unit id="fcc164423a09d2953e5486a056f1e10293de0711" translate="yes" xml:space="preserve">
          <source>Notice that, in a declaration like &lt;code&gt;local x = x&lt;/code&gt;, the new &lt;code&gt;x&lt;/code&gt; being declared is not in scope yet, and so the second &lt;code&gt;x&lt;/code&gt; refers to the outside variable.</source>
          <target state="translated">&lt;code&gt;local x = x&lt;/code&gt; ような宣言では、宣言される新しい &lt;code&gt;x&lt;/code&gt; はまだスコープ内にないため、2番目の &lt;code&gt;x&lt;/code&gt; は外部変数を参照していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d213f09117ec25cd2306bbea812a90e0c2b8aabb" translate="yes" xml:space="preserve">
          <source>Now we want to allow the Lua code being run by &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; to yield. First, we can rewrite our function like here:</source>
          <target state="translated">ここで、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;によって実行されるLuaコードが生成されるようにします。まず、次のように関数を書き換えます。</target>
        </trans-unit>
        <trans-unit id="754d929d0f6f3e09a813d3e11d5cb6448eada594" translate="yes" xml:space="preserve">
          <source>Numerals and literal strings are explained in &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;; variables are explained in &lt;a href=&quot;#3.2&quot;&gt;&amp;sect;3.2&lt;/a&gt;; function definitions are explained in &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;; function calls are explained in &lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10&lt;/a&gt;; table constructors are explained in &lt;a href=&quot;#3.4.9&quot;&gt;&amp;sect;3.4.9&lt;/a&gt;. Vararg expressions, denoted by three dots ('&lt;code&gt;...&lt;/code&gt;'), can only be used when directly inside a vararg function; they are explained in &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;.</source>
          <target state="translated">数字とリテラル文字列は&lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1で&lt;/a&gt;説明されています。変数については、&lt;a href=&quot;#3.2&quot;&gt;&amp;sect;3.2で&lt;/a&gt;説明しています。関数定義は&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11で&lt;/a&gt;説明されています。関数呼び出しは&lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10で&lt;/a&gt;説明されています。テーブルコンストラクタについては、&lt;a href=&quot;#3.4.9&quot;&gt;&amp;sect;3.4.9で&lt;/a&gt;説明しています。3つのドット（ ' &lt;code&gt;...&lt;/code&gt; '）で示されるVararg式は、vararg関数内で直接使用する場合にのみ使用できます。それらは&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="4ef3b305c58fad6f6199b8fc85c384f4f0aec1bf" translate="yes" xml:space="preserve">
          <source>Numeric codes are not necessarily portable across platforms.</source>
          <target state="translated">数値コードは必ずしもプラットフォーム間で移植可能とは限りません。</target>
        </trans-unit>
        <trans-unit id="b1e9a773eef8de621ab2c2acf9814098928b38f7" translate="yes" xml:space="preserve">
          <source>On POSIX systems, this function also creates a file with that name, to avoid security risks. (Someone else might create the file with wrong permissions in the time between getting the name and creating the file.) You still have to open the file to use it and to remove it (even if you do not use it).</source>
          <target state="translated">POSIXシステムでは、セキュリティリスクを避けるために、この関数はその名前のファイルも作成します。(名前を取得してからファイルを作成するまでの間に、他の誰かが間違った権限でファイルを作成してしまうかもしれません)。ファイルを使用するためには、ファイルを開いて削除する必要があります (使用していなくても)。</target>
        </trans-unit>
        <trans-unit id="b4eb9b31d3cdaa19214342b44ace3c1948a9b1c8" translate="yes" xml:space="preserve">
          <source>On non-POSIX systems, this function may be not thread safe because of its reliance on C function &lt;code&gt;gmtime&lt;/code&gt; and C function &lt;code&gt;localtime&lt;/code&gt;.</source>
          <target state="translated">非POSIXシステムでは、この関数はC関数 &lt;code&gt;gmtime&lt;/code&gt; およびC関数 &lt;code&gt;localtime&lt;/code&gt; に依存しているため、スレッドセーフではない場合があります。</target>
        </trans-unit>
        <trans-unit id="087e8ef073a71f75716b2985ce5b0a8533e700f2" translate="yes" xml:space="preserve">
          <source>Once a loader is found, &lt;code&gt;require&lt;/code&gt; calls the loader with two arguments: &lt;code&gt;modname&lt;/code&gt; and an extra value dependent on how it got the loader. (If the loader came from a file, this extra value is the file name.) If the loader returns any non-nil value, &lt;code&gt;require&lt;/code&gt; assigns the returned value to &lt;code&gt;package.loaded[modname]&lt;/code&gt;. If the loader does not return a non-nil value and has not assigned any value to &lt;code&gt;package.loaded[modname]&lt;/code&gt;, then &lt;code&gt;require&lt;/code&gt; assigns &lt;b&gt;true&lt;/b&gt; to this entry. In any case, &lt;code&gt;require&lt;/code&gt; returns the final value of &lt;code&gt;package.loaded[modname]&lt;/code&gt;.</source>
          <target state="translated">ローダーが見つかると、 &lt;code&gt;require&lt;/code&gt; は2つの引数でローダーを呼び出します &lt;code&gt;modname&lt;/code&gt; と、ローダーの取得方法に応じた追加の値です。 （ローダーがファイルからのものである場合、この追加の値はファイル名です。）ローダーが非nil値を返す場合、 &lt;code&gt;require&lt;/code&gt; は戻り値を &lt;code&gt;package.loaded[modname]&lt;/code&gt; 割り当てます。ローダーが非nil値を返さず、 &lt;code&gt;package.loaded[modname]&lt;/code&gt; 値を割り当てていない場合、 &lt;code&gt;require&lt;/code&gt; はこのエントリに&lt;b&gt;true&lt;/b&gt;を割り当て&lt;b&gt;ます&lt;/b&gt;。いずれの場合も、 &lt;code&gt;require&lt;/code&gt; は &lt;code&gt;package.loaded[modname]&lt;/code&gt; 最終値を返します。</target>
        </trans-unit>
        <trans-unit id="dd79eaea9e398294fa6609bcc37919375540b811" translate="yes" xml:space="preserve">
          <source>Only objects that have an explicit construction are removed from weak tables. Values, such as numbers and light C functions, are not subject to garbage collection, and therefore are not removed from weak tables (unless their associated values are collected). Although strings are subject to garbage collection, they do not have an explicit construction, and therefore are not removed from weak tables.</source>
          <target state="translated">明示的な構造を持つオブジェクトのみが弱いテーブルから削除されます。数値や軽度のC関数のような値はガベージコレクションの対象ではないので、弱いテーブルからは削除されません(関連する値が収集されない限り)。文字列はガベージコレクションの対象となりますが、明示的な構造を持たないため、弱いテーブルからは削除されません。</target>
        </trans-unit>
        <trans-unit id="b08de619674921c221a144a642faade8131401ce" translate="yes" xml:space="preserve">
          <source>Opens all standard Lua libraries into the given state.</source>
          <target state="translated">すべての標準Luaライブラリを指定された状態で開きます。</target>
        </trans-unit>
        <trans-unit id="fed8115b8cb0d575a6d2ddd5024ea0f4b7c2651d" translate="yes" xml:space="preserve">
          <source>Opens the given file name in read mode and returns an iterator function that works like &lt;code&gt;file:lines(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt; over the opened file. When the iterator function detects the end of file, it returns no values (to finish the loop) and automatically closes the file.</source>
          <target state="translated">指定されたファイル名を読み取りモードで開き、開いているファイルに対して &lt;code&gt;file:lines(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt; のように機能する反復関数を返します。イテレータ関数はファイルの終わりを検出すると、値を返さず（ループを終了するため）、ファイルを自動的に閉じます。</target>
        </trans-unit>
        <trans-unit id="4996bd3a029769976e9b98ed2378b1547c48ce7d" translate="yes" xml:space="preserve">
          <source>Opens the named file and executes its contents as a Lua chunk. When called without arguments, &lt;code&gt;dofile&lt;/code&gt; executes the contents of the standard input (&lt;code&gt;stdin&lt;/code&gt;). Returns all values returned by the chunk. In case of errors, &lt;code&gt;dofile&lt;/code&gt; propagates the error to its caller (that is, &lt;code&gt;dofile&lt;/code&gt; does not run in protected mode).</source>
          <target state="translated">指定されたファイルを開き、その内容をLuaチャンクとして実行します。引数なしで呼び出されると、 &lt;code&gt;dofile&lt;/code&gt; は標準入力（ &lt;code&gt;stdin&lt;/code&gt; ）の内容を実行します。チャンクによって返されたすべての値を返します。エラーが発生した場合、 &lt;code&gt;dofile&lt;/code&gt; は呼び出し元にエラーを伝達します（つまり、 &lt;code&gt;dofile&lt;/code&gt; はプロテクトモードで実行されません）。</target>
        </trans-unit>
        <trans-unit id="1b77184a8e40f826198903ec77c88ff94fba7356" translate="yes" xml:space="preserve">
          <source>Operator precedence in Lua follows the table below, from lower to higher priority:</source>
          <target state="translated">Lua の演算子の優先順位は以下の表の通りです。</target>
        </trans-unit>
        <trans-unit id="5d68118be76331913c2ce7bb079ac0bdce1e02a7" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;s&lt;/code&gt; expects a string; if its argument is not a string, it is converted to one following the same rules of &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt;. If the option has any modifier (flags, width, length), the string argument should not contain embedded zeros.</source>
          <target state="translated">オプション &lt;code&gt;s&lt;/code&gt; には文字列が必要です。引数が文字列でない場合は、&lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; &lt;/a&gt;と同じ規則に従って変換されます。オプションに修飾子（フラグ、幅、長さ）がある場合、文字列引数にゼロが埋め込まれていてはなりません。</target>
        </trans-unit>
        <trans-unit id="87ca1fbe6a8feba28ed3fc6964e861a77643303f" translate="yes" xml:space="preserve">
          <source>Option names in &lt;a href=&quot;#pdf-io.read&quot;&gt;&lt;code&gt;io.read&lt;/code&gt;&lt;/a&gt; do not have a starting '&lt;code&gt;*&lt;/code&gt;' anymore. For compatibility, Lua will continue to accept (and ignore) this character.</source>
          <target state="translated">&lt;a href=&quot;#pdf-io.read&quot;&gt; &lt;code&gt;io.read&lt;/code&gt; の&lt;/a&gt;オプション名には、先頭に「 &lt;code&gt;*&lt;/code&gt; 」がありません。互換性のために、Luaはこの文字を引き続き受け入れます（無視します）。</target>
        </trans-unit>
        <trans-unit id="b8e36de59136b88fc2be5c019f1c1af0d901d853" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;g&lt;/code&gt; all expect a number as argument. Options &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; expect an integer. When Lua is compiled with a C89 compiler, options &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; (hexadecimal floats) do not support any modifier (flags, width, length).</source>
          <target state="translated">オプション &lt;code&gt;A&lt;/code&gt; 、 &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;E&lt;/code&gt; 、 &lt;code&gt;e&lt;/code&gt; 、 &lt;code&gt;f&lt;/code&gt; 、 &lt;code&gt;G&lt;/code&gt; 、および &lt;code&gt;g&lt;/code&gt; はすべて、引数として数値を期待します。オプション &lt;code&gt;c&lt;/code&gt; 、 &lt;code&gt;d&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;o&lt;/code&gt; 、 &lt;code&gt;u&lt;/code&gt; 、 &lt;code&gt;X&lt;/code&gt; 、および &lt;code&gt;x&lt;/code&gt; には整数が必要です。LuaがC89コンパイラーでコンパイルされる場合、オプション &lt;code&gt;A&lt;/code&gt; および &lt;code&gt;a&lt;/code&gt; （16進浮動小数点数）は修飾子（フラグ、幅、長さ）をサポートしません。</target>
        </trans-unit>
        <trans-unit id="8a1abeaa4ebe74d5340ad5d927126ab129362a92" translate="yes" xml:space="preserve">
          <source>Otherwise, returns three values: the &lt;a href=&quot;#pdf-next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; function, the table &lt;code&gt;t&lt;/code&gt;, and &lt;b&gt;nil&lt;/b&gt;, so that the construction</source>
          <target state="translated">それ以外の場合は、3つの値を返します。&lt;a href=&quot;#pdf-next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;関数、テーブル &lt;code&gt;t&lt;/code&gt; 、および&lt;b&gt;nil&lt;/b&gt;なので、構築</target>
        </trans-unit>
        <trans-unit id="178c0a8da555da3fb52bb9fe10047627cb505e75" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;ar&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in function &lt;a href=&quot;#lua_getlocal&quot;&gt;&lt;code&gt;lua_getlocal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;ar&lt;/code&gt; および &lt;code&gt;n&lt;/code&gt; は、関数&lt;a href=&quot;#lua_getlocal&quot;&gt; &lt;code&gt;lua_getlocal&lt;/code&gt; の&lt;/a&gt;場合と同じです。</target>
        </trans-unit>
        <trans-unit id="6ea29796519b03e49b8f299281d87fde989109ec" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;funcindex&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in function &lt;a href=&quot;#lua_getupvalue&quot;&gt;&lt;code&gt;lua_getupvalue&lt;/code&gt;&lt;/a&gt;, but &lt;code&gt;n&lt;/code&gt; cannot be greater than the number of upvalues.</source>
          <target state="translated">パラメータ &lt;code&gt;funcindex&lt;/code&gt; および &lt;code&gt;n&lt;/code&gt; は関数&lt;a href=&quot;#lua_getupvalue&quot;&gt; &lt;code&gt;lua_getupvalue&lt;/code&gt; の&lt;/a&gt;場合と同じですが、 &lt;code&gt;n&lt;/code&gt; はアップ値の数より大きくすることはできません。</target>
        </trans-unit>
        <trans-unit id="430e32c1c643e4f1d035c6b28b1a7ed4bf4a0eac" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;funcindex&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in function &lt;a href=&quot;#lua_getupvalue&quot;&gt;&lt;code&gt;lua_getupvalue&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;funcindex&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; は、関数&lt;a href=&quot;#lua_getupvalue&quot;&gt; &lt;code&gt;lua_getupvalue&lt;/code&gt; と同じ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ed5ec09aef437013e06ea8a8354f4fd26022ed2a" translate="yes" xml:space="preserve">
          <source>Parameters act as local variables that are initialized with the argument values:</source>
          <target state="translated">パラメータは、引数の値で初期化されるローカル変数として動作します。</target>
        </trans-unit>
        <trans-unit id="448ecaf1d946410d7f3122c5e30729943106812b" translate="yes" xml:space="preserve">
          <source>Pattern Item:</source>
          <target state="translated">パターンアイテム</target>
        </trans-unit>
        <trans-unit id="5da899e9024f2b8d94cc4514fe33d4ff85310e83" translate="yes" xml:space="preserve">
          <source>Pattern:</source>
          <target state="translated">Pattern:</target>
        </trans-unit>
        <trans-unit id="4d34f7a2b0b3b6df62a051917d7e7ac2de8a38df" translate="yes" xml:space="preserve">
          <source>Patterns</source>
          <target state="translated">Patterns</target>
        </trans-unit>
        <trans-unit id="8d2dcea1a0ef2ec1d9376ec9b8afe27c3f59c3e3" translate="yes" xml:space="preserve">
          <source>Patterns in Lua are described by regular strings, which are interpreted as patterns by the pattern-matching functions &lt;a href=&quot;#pdf-string.find&quot;&gt;&lt;code&gt;string.find&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-string.gmatch&quot;&gt;&lt;code&gt;string.gmatch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-string.gsub&quot;&gt;&lt;code&gt;string.gsub&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#pdf-string.match&quot;&gt;&lt;code&gt;string.match&lt;/code&gt;&lt;/a&gt;. This section describes the syntax and the meaning (that is, what they match) of these strings.</source>
          <target state="translated">Luaのパターンは、パターンマッチング機能によってパターンとして解釈される定期的な文字列で記述されている&lt;a href=&quot;#pdf-string.find&quot;&gt; &lt;code&gt;string.find&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-string.gmatch&quot;&gt; &lt;code&gt;string.gmatch&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-string.gsub&quot;&gt; &lt;code&gt;string.gsub&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;#pdf-string.match&quot;&gt; &lt;code&gt;string.match&lt;/code&gt; &lt;/a&gt;。このセクションでは、これらの文字列の構文と意味（つまり、一致するもの）について説明します。</target>
        </trans-unit>
        <trans-unit id="dc7394297e26f026260d375d7cd96592fbd9339e" translate="yes" xml:space="preserve">
          <source>Performs an arithmetic or bitwise operation over the two values (or one, in the case of negations) at the top of the stack, with the value at the top being the second operand, pops these values, and pushes the result of the operation. The function follows the semantics of the corresponding Lua operator (that is, it may call metamethods).</source>
          <target state="translated">スタックの先頭の値を 2 番目のオペランドとして、スタックの先頭にある 2 つの値 (否定の場合は 1 つ)に対して算術演算またはビット演算を行い、これらの値をポップし、演算結果をプッシュします。この関数は、対応する Lua 演算子のセマンティクスに従います (つまり、メタメソッドを呼び出すことができます)。</target>
        </trans-unit>
        <trans-unit id="1299b0bc498833db75f9cf0fffff3c4bae0facff" translate="yes" xml:space="preserve">
          <source>Pops &lt;code&gt;n&lt;/code&gt; elements from the stack.</source>
          <target state="translated">スタックから &lt;code&gt;n&lt;/code&gt; 個の要素をポップします。</target>
        </trans-unit>
        <trans-unit id="fcc747279637a2d8a447881433d9aea7cb9cb559" translate="yes" xml:space="preserve">
          <source>Pops a key from the stack, and pushes a key&amp;ndash;value pair from the table at the given index (the &quot;next&quot; pair after the given key). If there are no more elements in the table, then &lt;a href=&quot;#lua_next&quot;&gt;&lt;code&gt;lua_next&lt;/code&gt;&lt;/a&gt; returns 0 (and pushes nothing).</source>
          <target state="translated">スタックからキーをポップし、キーと値のペアをテーブルの指定されたインデックス（指定されたキーの次のペア）にプッシュします。テーブルに要素がなくなると、&lt;a href=&quot;#lua_next&quot;&gt; &lt;code&gt;lua_next&lt;/code&gt; &lt;/a&gt;は0を返します（何もプッシュしません）。</target>
        </trans-unit>
        <trans-unit id="38ce2b2d648784be385652bd2405ecdc4f5fbdbc" translate="yes" xml:space="preserve">
          <source>Pops a table from the stack and sets it as the new metatable for the value at the given index.</source>
          <target state="translated">スタックからテーブルをポップし、それを指定されたインデックスの値に対する新しいメタテーブルとして設定します。</target>
        </trans-unit>
        <trans-unit id="9e0a9d18a088445b817b9df7884bfcb32d185882" translate="yes" xml:space="preserve">
          <source>Pops a value from the stack and sets it as the new value associated to the full userdata at the given index.</source>
          <target state="translated">スタックから値をポップし、指定されたインデックスの完全な userdata に関連付けられた新しい値として設定します。</target>
        </trans-unit>
        <trans-unit id="e2b2f785858d2ccd19fa2b3c3174e4f53334d580" translate="yes" xml:space="preserve">
          <source>Pops a value from the stack and sets it as the new value of global &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">スタックから値をポップし、それをグローバル &lt;code&gt;name&lt;/code&gt; 新しい値として設定します。</target>
        </trans-unit>
        <trans-unit id="ab86fb82a986460447b29bbb55ca5b9bf867bad6" translate="yes" xml:space="preserve">
          <source>Precedence</source>
          <target state="translated">Precedence</target>
        </trans-unit>
        <trans-unit id="6069e3ce33f065015c2dc7cf19747d682b66d1cb" translate="yes" xml:space="preserve">
          <source>Pushes a C function onto the stack. This function receives a pointer to a C function and pushes onto the stack a Lua value of type &lt;code&gt;function&lt;/code&gt; that, when called, invokes the corresponding C function.</source>
          <target state="translated">C関数をスタックにプッシュします。この関数は、C関数へのポインターを受け取り、呼び出されたときに対応するC関数を呼び出す &lt;code&gt;function&lt;/code&gt; 型のLua値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="225557cebb89115cc93c59763f61b47f6e9246c5" translate="yes" xml:space="preserve">
          <source>Pushes a boolean value with value &lt;code&gt;b&lt;/code&gt; onto the stack.</source>
          <target state="translated">値 &lt;code&gt;b&lt;/code&gt; のブール値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="894000f061d35d3982475e83383dc72799631571" translate="yes" xml:space="preserve">
          <source>Pushes a copy of the element at the given index onto the stack.</source>
          <target state="translated">指定されたインデックスの要素のコピーをスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="b6ff7b2e435c0e0bd4a4dbe8af13548197a7ba1c" translate="yes" xml:space="preserve">
          <source>Pushes a float with value &lt;code&gt;n&lt;/code&gt; onto the stack.</source>
          <target state="translated">値 &lt;code&gt;n&lt;/code&gt; のフロートをスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="1b7c742fb6acbbb7614fff04126bb1d65108509f" translate="yes" xml:space="preserve">
          <source>Pushes a light userdata onto the stack.</source>
          <target state="translated">ライトのユーザデータをスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="f9640c606650c6c3b185fb6d556165b919470195" translate="yes" xml:space="preserve">
          <source>Pushes a new C closure onto the stack.</source>
          <target state="translated">新しいCのクロージャをスタックに押し付けます。</target>
        </trans-unit>
        <trans-unit id="f1a59444f671b252069eb2dc564dace63fe90d50" translate="yes" xml:space="preserve">
          <source>Pushes a nil value onto the stack.</source>
          <target state="translated">nil の値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="2ac334edd538c29ffe856d049cab16b02559c4e6" translate="yes" xml:space="preserve">
          <source>Pushes an integer with value &lt;code&gt;n&lt;/code&gt; onto the stack.</source>
          <target state="translated">値 &lt;code&gt;n&lt;/code&gt; の整数をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="ebf2182a4bd44a4ababe6986cdc0d46624511d6f" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack a formatted string and returns a pointer to this string. It is similar to the ISO C function &lt;code&gt;sprintf&lt;/code&gt;, but has some important differences:</source>
          <target state="translated">スタックにフォーマットされた文字列をプッシュし、この文字列へのポインタを返します。ISO C関数 &lt;code&gt;sprintf&lt;/code&gt; に似ていますが、いくつかの重要な違いがあります。</target>
        </trans-unit>
        <trans-unit id="e3eb6979dbbec2441c887e7c302c341c3e2193b2" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack a string identifying the current position of the control at level &lt;code&gt;lvl&lt;/code&gt; in the call stack. Typically this string has the following format:</source>
          <target state="translated">呼び出しスタックのレベル &lt;code&gt;lvl&lt;/code&gt; にあるコントロールの現在の位置を識別する文字列をスタックにプッシュします。通常、この文字列の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1400d6038d9c13c6266dab4b80bdcdd7fc31a04b" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the Lua value associated with the full userdata at the given index.</source>
          <target state="translated">指定されたインデックスの完全なuserdataに関連付けられたLua値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="96d78a717bd5f3b49461732d2e8f02559185b11e" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the field &lt;code&gt;e&lt;/code&gt; from the metatable of the object at index &lt;code&gt;obj&lt;/code&gt; and returns the type of pushed value. If the object does not have a metatable, or if the metatable does not have this field, pushes nothing and returns &lt;code&gt;LUA_TNIL&lt;/code&gt;.</source>
          <target state="translated">インデックス &lt;code&gt;obj&lt;/code&gt; のオブジェクトのメタテーブルからフィールド &lt;code&gt;e&lt;/code&gt; をスタックにプッシュし、プッシュされた値のタイプを返します。オブジェクトにメタテーブルがない場合、またはメタテーブルにこのフィールドがない場合は、何もプッシュせずに &lt;code&gt;LUA_TNIL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e6a3ae7b655cf9df13c5b9cf6975aa8b58442402" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the metatable associated with name &lt;code&gt;tname&lt;/code&gt; in the registry (see &lt;a href=&quot;#luaL_newmetatable&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;) (&lt;b&gt;nil&lt;/b&gt; if there is no metatable associated with that name). Returns the type of the pushed value.</source>
          <target state="translated">レジストリの名前 &lt;code&gt;tname&lt;/code&gt; に関連付けられたメタテーブルをスタックにプッシュします（&lt;a href=&quot;#luaL_newmetatable&quot;&gt; &lt;code&gt;luaL_newmetatable&lt;/code&gt; を&lt;/a&gt;参照）（その名前に関連付けられたメタテーブルがない場合は&lt;b&gt;nil&lt;/b&gt;）。プッシュされた値のタイプを返します。</target>
        </trans-unit>
        <trans-unit id="3681d4e1cdd569fb3b2f3300755bb4d0cfb69c67" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[i]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index. As in Lua, this function may trigger a metamethod for the &quot;index&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">スタックに値 &lt;code&gt;t[i]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値です。Luaと同様に、この関数は「index」イベントの&lt;a href=&quot;#2.4&quot;&gt;メタメソッドを&lt;/a&gt;トリガーすることがあります（&amp;sect;2.4を参照）。</target>
        </trans-unit>
        <trans-unit id="160cbb51fcadb575239ec804bbd26447a616f853" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[k]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the table at the given index and &lt;code&gt;k&lt;/code&gt; is the pointer &lt;code&gt;p&lt;/code&gt; represented as a light userdata. The access is raw; that is, it does not invoke the &lt;code&gt;__index&lt;/code&gt; metamethod.</source>
          <target state="translated">スタックに値 &lt;code&gt;t[k]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスにあるテーブルであり、 &lt;code&gt;k&lt;/code&gt; は軽いユーザーデータとして表されるポインター &lt;code&gt;p&lt;/code&gt; です。アクセスは未加工です。つまり、 &lt;code&gt;__index&lt;/code&gt; メタメソッドを呼び出しません。</target>
        </trans-unit>
        <trans-unit id="9ba28c13e89d272d19c50f5e767726525d936e21" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[k]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index and &lt;code&gt;k&lt;/code&gt; is the value at the top of the stack.</source>
          <target state="translated">スタックに値 &lt;code&gt;t[k]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値で、 &lt;code&gt;k&lt;/code&gt; はスタックの最上位の値です。</target>
        </trans-unit>
        <trans-unit id="d433d1f4953100bc2a0c9d7a8e8e092f7c0a5c2a" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[k]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index. As in Lua, this function may trigger a metamethod for the &quot;index&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">スタックに値 &lt;code&gt;t[k]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値です。Luaと同様に、この関数は「index」イベントの&lt;a href=&quot;#2.4&quot;&gt;メタメソッドを&lt;/a&gt;トリガーすることがあります（&amp;sect;2.4を参照）。</target>
        </trans-unit>
        <trans-unit id="27c3e32a80e22fb604cbe4557acc820d3c5231a7" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[n]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the table at the given index. The access is raw, that is, it does not invoke the &lt;code&gt;__index&lt;/code&gt; metamethod.</source>
          <target state="translated">スタックに値 &lt;code&gt;t[n]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスのテーブルです。アクセスはraw です。 &lt;code&gt;__index&lt;/code&gt; 、__ indexメタメソッドを呼び出しません。</target>
        </trans-unit>
        <trans-unit id="3adeb92584bb85f61e3f56627b5522106f4dd7b4" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value of the global &lt;code&gt;name&lt;/code&gt;. Returns the type of that value.</source>
          <target state="translated">スタックにグローバル &lt;code&gt;name&lt;/code&gt; 値をプッシュします。その値のタイプを返します。</target>
        </trans-unit>
        <trans-unit id="96bb89f8fd253dc6a3b3b23f64ce3135d6817db4" translate="yes" xml:space="preserve">
          <source>Pushes the global environment onto the stack.</source>
          <target state="translated">グローバル環境をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="b8b8e3282a4a6ab4f3ed7c29929c1ea38215b0e1" translate="yes" xml:space="preserve">
          <source>Pushes the string pointed to by &lt;code&gt;s&lt;/code&gt; with size &lt;code&gt;len&lt;/code&gt; onto the stack. Lua makes (or reuses) an internal copy of the given string, so the memory at &lt;code&gt;s&lt;/code&gt; can be freed or reused immediately after the function returns. The string can contain any binary data, including embedded zeros.</source>
          <target state="translated">サイズ &lt;code&gt;len&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; が指す文字列をスタックにプッシュします。Luaは指定された文字列の内部コピーを作成（または再利用）するため、関数が戻った直後に &lt;code&gt;s&lt;/code&gt; のメモリを解放または再利用できます。文字列には、埋め込まれたゼロを含む任意のバイナリデータを含めることができます。</target>
        </trans-unit>
        <trans-unit id="b6b66a7bc8fe80fa098dee231f5eaec5a6ccedfa" translate="yes" xml:space="preserve">
          <source>Pushes the thread represented by &lt;code&gt;L&lt;/code&gt; onto the stack. Returns 1 if this thread is the main thread of its state.</source>
          <target state="translated">&lt;code&gt;L&lt;/code&gt; で表されるスレッドをスタックにプッシュします。このスレッドがその状態のメインスレッドである場合、1を返します。</target>
        </trans-unit>
        <trans-unit id="4854f8dce1b3efb397d0da3cc0315b1cfb867e30" translate="yes" xml:space="preserve">
          <source>Pushes the zero-terminated string pointed to by &lt;code&gt;s&lt;/code&gt; onto the stack. Lua makes (or reuses) an internal copy of the given string, so the memory at &lt;code&gt;s&lt;/code&gt; can be freed or reused immediately after the function returns.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が指すゼロで終了する文字列をスタックにプッシュします。Luaは指定された文字列の内部コピーを作成（または再利用）するため、関数が戻った直後に &lt;code&gt;s&lt;/code&gt; のメモリを解放または再利用できます。</target>
        </trans-unit>
        <trans-unit id="fc0763820b54eedcf07407cf791911e6a4435f20" translate="yes" xml:space="preserve">
          <source>Raises an error reporting a problem with argument &lt;code&gt;arg&lt;/code&gt; of the C function that called it, using a standard message that includes &lt;code&gt;extramsg&lt;/code&gt; as a comment:</source>
          <target state="translated">コメントとして &lt;code&gt;extramsg&lt;/code&gt; を含む標準メッセージを使用して、それを呼び出したC関数の引数 &lt;code&gt;arg&lt;/code&gt; の問題を報告するエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="2195072e1ce816af3985bb81599b653639e6d200" translate="yes" xml:space="preserve">
          <source>Raises an error. The error message format is given by &lt;code&gt;fmt&lt;/code&gt; plus any extra arguments, following the same rules of &lt;a href=&quot;#lua_pushfstring&quot;&gt;&lt;code&gt;lua_pushfstring&lt;/code&gt;&lt;/a&gt;. It also adds at the beginning of the message the file name and the line number where the error occurred, if this information is available.</source>
          <target state="translated">エラーを発生させます。エラーメッセージの形式は、&lt;a href=&quot;#lua_pushfstring&quot;&gt; &lt;code&gt;lua_pushfstring&lt;/code&gt; の&lt;/a&gt;同じルールに従って、 &lt;code&gt;fmt&lt;/code&gt; と追加の引数で指定されます。また、この情報が利用可能な場合は、エラーの発生したファイル名と行番号をメッセージの先頭に追加します。</target>
        </trans-unit>
        <trans-unit id="76a33dab1cf51144cd77abed8a485f73ea3a2319" translate="yes" xml:space="preserve">
          <source>Reads the file &lt;code&gt;file&lt;/code&gt;, according to the given formats, which specify what to read. For each format, the function returns a string or a number with the characters read, or &lt;b&gt;nil&lt;/b&gt; if it cannot read data with the specified format. (In this latter case, the function does not read subsequent formats.) When called without formats, it uses a default format that reads the next line (see below).</source>
          <target state="translated">何を読み取るかを指定する指定された形式に従って、ファイル &lt;code&gt;file&lt;/code&gt; を読み取ります。各形式について、関数は読み取った文字を含む文字列または数値を返します。指定された形式でデータを読み取れない場合は&lt;b&gt;nilを&lt;/b&gt;返します。（この後者の場合、関数は後続のフォーマットを読み取りません。）フォーマットなしで呼び出されると、次の行を読み取るデフォルトのフォーマットを使用します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="19c5c64f58aecd561b0cc1876786dfe7cb5a0fec" translate="yes" xml:space="preserve">
          <source>Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged. The definition of what a lowercase letter is depends on the current locale.</source>
          <target state="translated">文字列を受け取り、小文字をすべて大文字に変更したこの文字列のコピーを返します。それ以外の文字はすべて変更されません。小文字の定義は、現在のロケールに依存します。</target>
        </trans-unit>
        <trans-unit id="540aac1cb2574351ee99baa96641925cd5f56a55" translate="yes" xml:space="preserve">
          <source>Receives a string and returns a copy of this string with all uppercase letters changed to lowercase. All other characters are left unchanged. The definition of what an uppercase letter is depends on the current locale.</source>
          <target state="translated">文字列を受け取り、大文字をすべて小文字に変更した文字列のコピーを返します。それ以外の文字はすべて変更されません。大文字の定義は、現在のロケールに依存します。</target>
        </trans-unit>
        <trans-unit id="b890d3f853acc49ad9cf651903e6eb6cdf33901a" translate="yes" xml:space="preserve">
          <source>Receives a string and returns its length. The empty string &lt;code&gt;&quot;&quot;&lt;/code&gt; has length 0. Embedded zeros are counted, so &lt;code&gt;&quot;a\000bc\000&quot;&lt;/code&gt; has length 5.</source>
          <target state="translated">文字列を受け取り、その長さを返します。空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; の長さは0です。埋め込まれたゼロはカウントされるため、 &lt;code&gt;&quot;a\000bc\000&quot;&lt;/code&gt; 長さは5です。</target>
        </trans-unit>
        <trans-unit id="525f707997f87240ceb1b2b5bdf4cfc009a704fc" translate="yes" xml:space="preserve">
          <source>Receives a value of any type and converts it to a string in a human-readable format. (For complete control of how numbers are converted, use &lt;a href=&quot;#pdf-string.format&quot;&gt;&lt;code&gt;string.format&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">任意のタイプの値を受け取り、それを人間が読める形式の文字列に変換します。（数値の変換方法を完全に制御するには、&lt;a href=&quot;#pdf-string.format&quot;&gt; &lt;code&gt;string.format&lt;/code&gt; を&lt;/a&gt;使用してください。）</target>
        </trans-unit>
        <trans-unit id="4a03622d8f97ccec5d5f7daa5dac73af6b7c7028" translate="yes" xml:space="preserve">
          <source>Receives any number of arguments and prints their values to &lt;code&gt;stdout&lt;/code&gt;, using the &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt; function to convert each argument to a string. &lt;code&gt;print&lt;/code&gt; is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use &lt;a href=&quot;#pdf-string.format&quot;&gt;&lt;code&gt;string.format&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-io.write&quot;&gt;&lt;code&gt;io.write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; &lt;/a&gt;関数を使用して各引数を文字列に変換し、任意の数の引数を受け取り、それらの値を &lt;code&gt;stdout&lt;/code&gt; に出力します。 &lt;code&gt;print&lt;/code&gt; は、フォーマットされた出力を目的としたものではなく、たとえばデバッグのために、値をすばやく表示する方法としてのみ使用されます。出力を完全に制御するには、&lt;a href=&quot;#pdf-string.format&quot;&gt; &lt;code&gt;string.format&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#pdf-io.write&quot;&gt; &lt;code&gt;io.write&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b2cf76b7f314d7be6b1d5b068287552d8871811e" translate="yes" xml:space="preserve">
          <source>Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.</source>
          <target state="translated">0個以上の整数を受け取り、それぞれを対応するUTF-8バイト列に変換し、これらすべての列を連結した文字列を返します。</target>
        </trans-unit>
        <trans-unit id="cb0dfce9b4c27c4105f7ed0248bef997f2d2f7bb" translate="yes" xml:space="preserve">
          <source>Receives zero or more integers. Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.</source>
          <target state="translated">0 個以上の整数を受け取ります。引数の数と同じ長さの文字列を返し、各文字は対応する引数と同じ内部数値コードを持ちます。</target>
        </trans-unit>
        <trans-unit id="ba50e88a283776123b7b75fd12714beb6542b84c" translate="yes" xml:space="preserve">
          <source>Registers all functions in the array &lt;code&gt;l&lt;/code&gt; (see &lt;a href=&quot;#luaL_Reg&quot;&gt;&lt;code&gt;luaL_Reg&lt;/code&gt;&lt;/a&gt;) into the table on the top of the stack (below optional upvalues, see next).</source>
          <target state="translated">配列 &lt;code&gt;l&lt;/code&gt; （&lt;a href=&quot;#luaL_Reg&quot;&gt; &lt;code&gt;luaL_Reg&lt;/code&gt; を&lt;/a&gt;参照）のすべての関数をスタックの最上部のテーブルに登録します（オプションのupvaluesの下、次を参照）。</target>
        </trans-unit>
        <trans-unit id="354032ada697719ccb58ca87cd221831508c42b3" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
          <target state="translated">関係演算子</target>
        </trans-unit>
        <trans-unit id="7d652aafaa213ccec3954206dc0a95e5d151cad3" translate="yes" xml:space="preserve">
          <source>Releases reference &lt;code&gt;ref&lt;/code&gt; from the table at index &lt;code&gt;t&lt;/code&gt; (see &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt;). The entry is removed from the table, so that the referred object can be collected. The reference &lt;code&gt;ref&lt;/code&gt; is also freed to be used again.</source>
          <target state="translated">インデックス &lt;code&gt;t&lt;/code&gt; のテーブルから参照 &lt;code&gt;ref&lt;/code&gt; を&lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; &lt;/a&gt;します（luaL_refを参照）。エントリがテーブルから削除されるため、参照されたオブジェクトを収集できます。参照 &lt;code&gt;ref&lt;/code&gt; も解放され、再度使用できます。</target>
        </trans-unit>
        <trans-unit id="1f21ed8cdd38e88c74187592dabfbf9189cec444" translate="yes" xml:space="preserve">
          <source>Remember that, whenever an operation needs the length of a table, all caveats about the length operator apply (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;). All functions ignore non-numeric keys in the tables given as arguments.</source>
          <target state="translated">操作でテーブルの長さが必要な場合は常に、長さ演算子に関するすべての警告が適用されることに注意してください（&lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7を&lt;/a&gt;参照）。すべての関数は、引数として指定されたテーブル内の非数値キーを無視します。</target>
        </trans-unit>
        <trans-unit id="78486a859650e2590601f8f6a90106add4cefb81" translate="yes" xml:space="preserve">
          <source>Removes from &lt;code&gt;list&lt;/code&gt; the element at position &lt;code&gt;pos&lt;/code&gt;, returning the value of the removed element. When &lt;code&gt;pos&lt;/code&gt; is an integer between 1 and &lt;code&gt;#list&lt;/code&gt;, it shifts down the elements &lt;code&gt;list[pos+1], list[pos+2], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; and erases element &lt;code&gt;list[#list]&lt;/code&gt;; The index &lt;code&gt;pos&lt;/code&gt; can also be 0 when &lt;code&gt;#list&lt;/code&gt; is 0, or &lt;code&gt;#list + 1&lt;/code&gt;; in those cases, the function erases the element &lt;code&gt;list[pos]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; の位置にある要素を &lt;code&gt;list&lt;/code&gt; から削除し、削除された要素の値を返します。 &lt;code&gt;pos&lt;/code&gt; が1から &lt;code&gt;#list&lt;/code&gt; までの整数の場合、要素 &lt;code&gt;list[pos+1], list[pos+2], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; を下にシフトし、要素list [#list]を &lt;code&gt;list[#list]&lt;/code&gt; 。 &lt;code&gt;#list&lt;/code&gt; が0、または &lt;code&gt;#list + 1&lt;/code&gt; 場合、インデックス &lt;code&gt;pos&lt;/code&gt; も0になります。そのような場合、関数は要素 &lt;code&gt;list[pos]&lt;/code&gt; 消去します。</target>
        </trans-unit>
        <trans-unit id="11e20bb227ba77f3bb86f13b7935abd6f4634200" translate="yes" xml:space="preserve">
          <source>Removes the element at the given valid index, shifting down the elements above this index to fill the gap. This function cannot be called with a pseudo-index, because a pseudo-index is not an actual stack position.</source>
          <target state="translated">指定された有効なインデックスの要素を削除し、このインデックスより上の要素を下にシフトしてギャップを埋めます。疑似インデックスは実際のスタックの位置ではないため、この関数は疑似インデックスを指定して呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="57bc261321eacee5a6b51aa33ad8b6bdff0d2216" translate="yes" xml:space="preserve">
          <source>Renames the file or directory named &lt;code&gt;oldname&lt;/code&gt; to &lt;code&gt;newname&lt;/code&gt;. If this function fails, it returns &lt;b&gt;nil&lt;/b&gt;, plus a string describing the error and the error code. Otherwise, it returns true.</source>
          <target state="translated">&lt;code&gt;oldname&lt;/code&gt; という名前のファイルまたはディレクトリの名前を &lt;code&gt;newname&lt;/code&gt; に変更します。この関数が失敗すると、&lt;b&gt;nil&lt;/b&gt;に加えて、エラーとエラーコードを説明する文字列が返されます。それ以外の場合は、trueを返します。</target>
        </trans-unit>
        <trans-unit id="0ce3bd88cc94ffb61167bb8f7b9e843c7604f13b" translate="yes" xml:space="preserve">
          <source>Results are returned using the &lt;b&gt;return&lt;/b&gt; statement (see &lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4&lt;/a&gt;). If control reaches the end of a function without encountering a &lt;b&gt;return&lt;/b&gt; statement, then the function returns with no results.</source>
          <target state="translated">結果は&lt;b&gt;return&lt;/b&gt;ステートメントを使用して&lt;b&gt;返されます&lt;/b&gt;（&lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4を&lt;/a&gt;参照）。制御が&lt;b&gt;return&lt;/b&gt;ステートメントに出会わずに関数の終わりに到達した場合、関数は結果なしで戻ります。</target>
        </trans-unit>
        <trans-unit id="244c963cdbd920ed3e3a03fe837b76f265d0a0b8" translate="yes" xml:space="preserve">
          <source>Resurrected objects (that is, objects being finalized and objects accessible only through objects being finalized) have a special behavior in weak tables. They are removed from weak values before running their finalizers, but are removed from weak keys only in the next collection after running their finalizers, when such objects are actually freed. This behavior allows the finalizer to access properties associated with the object through weak tables.</source>
          <target state="translated">復活したオブジェクト(つまり、確定されたオブジェクトと、確定されたオブジェクトからのみアクセス可能なオブジェクト)は、弱いテーブルでは特別な動作をします。これらのオブジェクトは、ファイナライザを実行する前に弱い値から削除されますが、ファイナライザを実行した後、そのようなオブジェクトが実際に解放されたときにのみ、次のコレクションで弱いキーから削除されます。この動作により、ファイナライザは弱いテーブルを通してオブジェクトに関連付けられたプロパティにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="03118cc39c1e81c1c438cef7d116290590135b5a" translate="yes" xml:space="preserve">
          <source>Returns &quot;&lt;code&gt;integer&lt;/code&gt;&quot; if &lt;code&gt;x&lt;/code&gt; is an integer, &quot;&lt;code&gt;float&lt;/code&gt;&quot; if it is a float, or &lt;b&gt;nil&lt;/b&gt; if &lt;code&gt;x&lt;/code&gt; is not a number.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;integer&lt;/code&gt; 場合は「integer」、 &lt;code&gt;float&lt;/code&gt; の場合は「float」、 &lt;code&gt;x&lt;/code&gt; が数値でない場合は&lt;b&gt;nilを&lt;/b&gt;返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ec136d49176b1dfa086d0b59ff735d87f5d8b25c" translate="yes" xml:space="preserve">
          <source>Returns 1 if the given coroutine can yield, and 0 otherwise.</source>
          <target state="translated">指定したコアーチンが降伏可能な場合は1を、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="36a260eb163a20a6982a495d8fcda57196ae377b" translate="yes" xml:space="preserve">
          <source>Returns 1 if the given index is not valid or if the value at this index is &lt;b&gt;nil&lt;/b&gt;, and 0 otherwise.</source>
          <target state="translated">指定されたインデックスが有効でない場合、またはこのインデックスの値が&lt;b&gt;nilの&lt;/b&gt;場合は1を返し、そうでない場合は&lt;b&gt;0を&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="8a03c180e8267d605c7828397144f7c543874d2c" translate="yes" xml:space="preserve">
          <source>Returns 1 if the given index is not valid, and 0 otherwise.</source>
          <target state="translated">指定したインデックスが有効でない場合は 1 を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="4abb71a0bd2d89035111fe1406578f64ee99f1cd" translate="yes" xml:space="preserve">
          <source>Returns 1 if the two values in indices &lt;code&gt;index1&lt;/code&gt; and &lt;code&gt;index2&lt;/code&gt; are primitively equal (that is, without calling the &lt;code&gt;__eq&lt;/code&gt; metamethod). Otherwise returns 0. Also returns 0 if any of the indices are not valid.</source>
          <target state="translated">指数内の2つの値の場合に1を返し &lt;code&gt;index1&lt;/code&gt; のと &lt;code&gt;index2&lt;/code&gt; （呼び出さずに、である原始等しい &lt;code&gt;__eq&lt;/code&gt; のメタメソッドを）。それ以外の場合は0を返します。無効なインデックスがある場合も0を返します。</target>
        </trans-unit>
        <trans-unit id="77b6c0faff8f019e54587bee38b27269e8ece2d8" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is &lt;b&gt;nil&lt;/b&gt;, and 0 otherwise.</source>
          <target state="translated">指定されたインデックスの値が&lt;b&gt;nilの&lt;/b&gt;場合は1を返し、それ以外の場合は&lt;b&gt;0を&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="acad229e61c0f7b3cf84876f85fd1aed4340fdeb" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a C function, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がC関数の場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="c6d1286ca58fd2bca52facd7ccf6f424aa47dca4" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a boolean, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がブール値の場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="04d4d0a8fc1e9ff9c642f37982cd6541f074eaf2" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a function (either C or Lua), and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が関数(C または Lua)の場合は 1 を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="85c97cef398c89971e6d5d95362f5833c0efeb94" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a light userdata, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がライトユーザデータであれば1を返し、そうでなければ0を返します。</target>
        </trans-unit>
        <trans-unit id="293be583246b5c6f5755824ebef65496d84be9b9" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a number or a string convertible to a number, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が数値または数値に変換可能な文字列の場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="1ef629a2e4c4bd109da15d0096305f549d521e11" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a string or a number (which is always convertible to a string), and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が文字列か数値(これは常に文字列に変換可能です)の場合は 1 を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="b24b734f996f24f0d2edcb352efb5d0a8733d485" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a table, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がテーブルの場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="6452edfae9b54954154513a55afe95f60e75b4fa" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a thread, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がスレッドの場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="fbf8a110fe7143ca6d907ca070a5c03ffa0f2050" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a userdata (either full or light), and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が userdata (full または light のいずれか)の場合は 1 を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="83893644ee4437282f1a7daf1d6a53c7e83643da" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is an integer (that is, the value is a number and is represented as an integer), and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が整数(つまり、値が数値であり、整数として表現されている)の場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="e0d04eca2996cc50939c173c775d0d5f069d8627" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NULL&lt;/code&gt; (and pops nothing) when the index &lt;code&gt;n&lt;/code&gt; is greater than the number of upvalues.</source>
          <target state="translated">インデックス &lt;code&gt;n&lt;/code&gt; がアップ値の数より大きい場合、 &lt;code&gt;NULL&lt;/code&gt; を返します（そして何もポップしません）。</target>
        </trans-unit>
        <trans-unit id="f56ddb3bc18ad7e4888cfe9050da5f11bd833971" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NULL&lt;/code&gt; (and pops nothing) when the index is greater than the number of active local variables.</source>
          <target state="translated">インデックスがアクティブなローカル変数の数より大きい場合、 &lt;code&gt;NULL&lt;/code&gt; を返します（何もポップしません）。</target>
        </trans-unit>
        <trans-unit id="57d7205f6585ea512d11e87992ca7441e1e7627e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NULL&lt;/code&gt; (and pushes nothing) when the index is greater than the number of active local variables.</source>
          <target state="translated">インデックスがアクティブなローカル変数の数より大きい場合、 &lt;code&gt;NULL&lt;/code&gt; を返します（何もプッシュしません）。</target>
        </trans-unit>
        <trans-unit id="cfcdfcdeac01eab8c7e33e91fd9027aed705b576" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;udata&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;udata&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="95b61d5c1d6df056ea18d8531706d5088a5cc2ec" translate="yes" xml:space="preserve">
          <source>Returns a binary string containing the values &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, etc. packed (that is, serialized in binary form) according to the format string &lt;code&gt;fmt&lt;/code&gt; (see &lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2&lt;/a&gt;).</source>
          <target state="translated">フォーマット文字列 &lt;code&gt;fmt&lt;/code&gt; に従ってパックされた（つまり、バイナリ形式でシリアル化された）値 &lt;code&gt;v1&lt;/code&gt; 、 &lt;code&gt;v2&lt;/code&gt; などを含むバイナリ文字列を返します（&lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="34fa3ab9c6fcc7c0b0e41c857bf1c60b601f5344" translate="yes" xml:space="preserve">
          <source>Returns a boolean, true if and only if integer &lt;code&gt;m&lt;/code&gt; is below integer &lt;code&gt;n&lt;/code&gt; when they are compared as unsigned integers.</source>
          <target state="translated">ブール値を返します。それらが符号なし整数として比較されたときに整数 &lt;code&gt;m&lt;/code&gt; が整数 &lt;code&gt;n&lt;/code&gt; を下回る場合にのみtrueを返します。</target>
        </trans-unit>
        <trans-unit id="83c4b62eb52291289917793f1a6cc1b8ea7a62cf" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;s&lt;/code&gt; in which all (or the first &lt;code&gt;n&lt;/code&gt;, if given) occurrences of the &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) have been replaced by a replacement string specified by &lt;code&gt;repl&lt;/code&gt;, which can be a string, a table, or a function. &lt;code&gt;gsub&lt;/code&gt; also returns, as its second value, the total number of matches that occurred. The name &lt;code&gt;gsub&lt;/code&gt; comes from &lt;em&gt;Global SUBstitution&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; （&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）のすべての出現（または指定されている場合は最初の &lt;code&gt;n&lt;/code&gt; ）が &lt;code&gt;repl&lt;/code&gt; で指定された置換文字列（文字列、テーブル、またはaのいずれか）で置き換えられた &lt;code&gt;s&lt;/code&gt; のコピーを返します。関数。 &lt;code&gt;gsub&lt;/code&gt; は、2番目の値として、発生した一致の総数も返します。 &lt;code&gt;gsub&lt;/code&gt; という名前は、&lt;em&gt;Global SUBstitutionに&lt;/em&gt;由来します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2ddd8b557487a7047dc27604858d100902c9eec4" translate="yes" xml:space="preserve">
          <source>Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string). The format string follows the same rules as the ISO C function &lt;code&gt;sprintf&lt;/code&gt;. The only differences are that the options/modifiers &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;p&lt;/code&gt; are not supported and that there is an extra option, &lt;code&gt;q&lt;/code&gt;.</source>
          <target state="translated">最初の引数（文字列である必要があります）で指定された説明に続く、可変数の引数のフォーマットされたバージョンを返します。フォーマット文字列は、ISO C関数 &lt;code&gt;sprintf&lt;/code&gt; と同じ規則に従います。唯一の違いは、オプション/修飾子 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;l&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; 、および &lt;code&gt;p&lt;/code&gt; がサポートされていないことと、追加のオプション &lt;code&gt;q&lt;/code&gt; があることです。</target>
        </trans-unit>
        <trans-unit id="4e8f9acfbbc61db53d975814a02f1c9aab94a23d" translate="yes" xml:space="preserve">
          <source>Returns a new table with all parameters stored into keys 1, 2, etc. and with a field &quot;&lt;code&gt;n&lt;/code&gt;&quot; with the total number of parameters. Note that the resulting table may not be a sequence.</source>
          <target state="translated">すべてのパラメータがキー1、2などに格納され、フィールド &quot; &lt;code&gt;n&lt;/code&gt; &quot;がパラメータの総数を含む新しいテーブルを返します。結果のテーブルはシーケンスではない場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="04445fdc39272b542d188c106147fa8b6a611119" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a raw memory area associated with the given Lua state. The application can use this area for any purpose; Lua does not use it for anything.</source>
          <target state="translated">指定した Lua の状態に関連付けられた生のメモリ領域へのポインタを返します。アプリケーションはこの領域を任意の目的に使用することができますが、Luaはこの領域を何かに使用することはありません。</target>
        </trans-unit>
        <trans-unit id="4f4330812b83811a6da51b5ddf77a1c753b5a3f8" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the internal copy of the string.</source>
          <target state="translated">文字列の内部コピーへのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="110bc8230211fc8ab3a4f90c96eb53b6ace38d6f" translate="yes" xml:space="preserve">
          <source>Returns a string containing a binary representation (a &lt;em&gt;binary chunk&lt;/em&gt;) of the given function, so that a later &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; on this string returns a copy of the function (but with new upvalues). If &lt;code&gt;strip&lt;/code&gt; is a true value, the binary representation may not include all debug information about the function, to save space.</source>
          <target state="translated">指定された関数のバイナリ表現（&lt;em&gt;バイナリチャンク&lt;/em&gt;）を含む文字列を返します。これにより、この文字列を後で&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;すると、関数のコピーが返されます（ただし、新しいupvalueが含まれます）。場合 &lt;code&gt;strip&lt;/code&gt; 真の値で、バイナリ表現は、スペースを節約するために、機能に関するすべてのデバッグ情報を含まなくてもよいです。</target>
        </trans-unit>
        <trans-unit id="7785dcf0d96ed76232f8ceff4782113f5d891ebc" translate="yes" xml:space="preserve">
          <source>Returns a string or a table containing date and time, formatted according to the given string &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="translated">指定された文字列 &lt;code&gt;format&lt;/code&gt; に従ってフォーマットされた、文字列または日付と時刻を含むテーブルを返します。</target>
        </trans-unit>
        <trans-unit id="e96b629efb1e60f437ca5030afcaedd1ef526018" translate="yes" xml:space="preserve">
          <source>Returns a string that is the concatenation of &lt;code&gt;n&lt;/code&gt; copies of the string &lt;code&gt;s&lt;/code&gt; separated by the string &lt;code&gt;sep&lt;/code&gt;. The default value for &lt;code&gt;sep&lt;/code&gt; is the empty string (that is, no separator). Returns the empty string if &lt;code&gt;n&lt;/code&gt; is not positive.</source>
          <target state="translated">文字列 &lt;code&gt;sep&lt;/code&gt; で区切られた文字列 &lt;code&gt;s&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個のコピーを連結した文字列を返します。 &lt;code&gt;sep&lt;/code&gt; のデフォルト値は空の文字列（つまり、区切り記号なし）です。 &lt;code&gt;n&lt;/code&gt; が正でない場合は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="c23b06e9809db45e6323880c87aa7252a0bafcb4" translate="yes" xml:space="preserve">
          <source>Returns a string that is the string &lt;code&gt;s&lt;/code&gt; reversed.</source>
          <target state="translated">文字列である文字列を返します &lt;code&gt;s&lt;/code&gt; の逆転を。</target>
        </trans-unit>
        <trans-unit id="fc7ced1cf6bbd4c86f0ee87b0d833bbb93586b07" translate="yes" xml:space="preserve">
          <source>Returns a string with a file name that can be used for a temporary file. The file must be explicitly opened before its use and explicitly removed when no longer needed.</source>
          <target state="translated">一時ファイルに使用できるファイル名の文字列を返します。このファイルは、使用する前に明示的にオープンし、不要になったら明示的に削除しなければなりません。</target>
        </trans-unit>
        <trans-unit id="41736de9eba1b5a23348a72c73555dbf11b75db2" translate="yes" xml:space="preserve">
          <source>Returns a table with information about a function. You can give the function directly or you can give a number as the value of &lt;code&gt;f&lt;/code&gt;, which means the function running at level &lt;code&gt;f&lt;/code&gt; of the call stack of the given thread: level 0 is the current function (&lt;code&gt;getinfo&lt;/code&gt; itself); level 1 is the function that called &lt;code&gt;getinfo&lt;/code&gt; (except for tail calls, which do not count on the stack); and so on. If &lt;code&gt;f&lt;/code&gt; is a number larger than the number of active functions, then &lt;code&gt;getinfo&lt;/code&gt; returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">関数に関する情報を含むテーブルを返します。関数を直接指定することも、 &lt;code&gt;f&lt;/code&gt; の値として数値を指定することもできます。これは、指定されたスレッドのコールスタックのレベル &lt;code&gt;f&lt;/code&gt; で実行される関数を意味します。レベル0は現在の関数です（ &lt;code&gt;getinfo&lt;/code&gt; 自体）。レベル1は &lt;code&gt;getinfo&lt;/code&gt; を呼び出した関数です（スタックでカウントされない末尾呼び出しを除く）。等々。 &lt;code&gt;f&lt;/code&gt; がアクティブな関数の数より大きい数の場合、 &lt;code&gt;getinfo&lt;/code&gt; は&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="10b30ad1ae8da522aed09e1a02ace7921e1f51a6" translate="yes" xml:space="preserve">
          <source>Returns a unique identifier (as a light userdata) for the upvalue numbered &lt;code&gt;n&lt;/code&gt; from the given function.</source>
          <target state="translated">指定された関数から &lt;code&gt;n&lt;/code&gt; と番号が付けられたアップバリューの一意の識別子を（軽量のユーザーデータとして）返します。</target>
        </trans-unit>
        <trans-unit id="0b3fe57552c933213408135c6244c0db831931eb" translate="yes" xml:space="preserve">
          <source>Returns a unique identifier for the upvalue numbered &lt;code&gt;n&lt;/code&gt; from the closure at index &lt;code&gt;funcindex&lt;/code&gt;.</source>
          <target state="translated">インデックス &lt;code&gt;funcindex&lt;/code&gt; のクロージャから &lt;code&gt;n&lt;/code&gt; 番のアップバリューの一意の識別子を返します。</target>
        </trans-unit>
        <trans-unit id="bee587bfd0df43f919edb6f2e537b30c2fff9e47" translate="yes" xml:space="preserve">
          <source>Returns an address to a space of size &lt;code&gt;sz&lt;/code&gt; where you can copy a string to be added to buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;). After copying the string into this space you must call &lt;a href=&quot;#luaL_addsize&quot;&gt;&lt;code&gt;luaL_addsize&lt;/code&gt;&lt;/a&gt; with the size of the string to actually add it to the buffer.</source>
          <target state="translated">追加する文字列をバッファー &lt;code&gt;B&lt;/code&gt; にコピーできるサイズ &lt;code&gt;sz&lt;/code&gt; のスペースにアドレスを返します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。文字列をこのスペースにコピーした後、実際にバッファに追加するには、文字列のサイズを&lt;a href=&quot;#luaL_addsize&quot;&gt; &lt;code&gt;luaL_addsize&lt;/code&gt; &lt;/a&gt;してluaL_addsizeを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="791d30f65759aca9bc8c2ab0c81b3414394fb75d" translate="yes" xml:space="preserve">
          <source>Returns an approximation of the amount in seconds of CPU time used by the program.</source>
          <target state="translated">プログラムが使用したCPU時間の概算値を秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="ed3bd9acca66b3345ff64ecf82770701deaf6e39" translate="yes" xml:space="preserve">
          <source>Returns an iterator function that, each time it is called, reads the file according to the given formats. When no format is given, uses &quot;&lt;code&gt;l&lt;/code&gt;&quot; as a default. As an example, the construction</source>
          <target state="translated">呼び出されるたびに、指定された形式に従ってファイルを読み取る反復関数を返します。フォーマットが指定されていない場合、デフォルトとして「 &lt;code&gt;l&lt;/code&gt; 」を使用します。例として、構造</target>
        </trans-unit>
        <trans-unit id="9502ef377c9031927e39c05f93ef446921a0becd" translate="yes" xml:space="preserve">
          <source>Returns an iterator function that, each time it is called, returns the next captures from &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) over the string &lt;code&gt;s&lt;/code&gt;. If &lt;code&gt;pattern&lt;/code&gt; specifies no captures, then the whole match is produced in each call.</source>
          <target state="translated">呼び出されるたびに、文字列 &lt;code&gt;s&lt;/code&gt; の &lt;code&gt;pattern&lt;/code&gt; （&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）から次のキャプチャを返す反復関数を返します。 &lt;code&gt;pattern&lt;/code&gt; がキャプチャを指定しない場合、一致全体が各呼び出しで生成されます。</target>
        </trans-unit>
        <trans-unit id="ea5fe629e50500647001f1530cb02685325af73a" translate="yes" xml:space="preserve">
          <source>Returns the &quot;length&quot; of the value at the given index as a number; it is equivalent to the '&lt;code&gt;#&lt;/code&gt;' operator in Lua (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;). Raises an error if the result of the operation is not an integer. (This case only can happen through metamethods.)</source>
          <target state="translated">指定されたインデックスにある値の「長さ」を数値として返します。これはLuaの' &lt;code&gt;#&lt;/code&gt; '演算子と同等です（&lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7を&lt;/a&gt;参照）。操作の結果が整数でない場合、エラーが発生します。（このケースはメタメソッドを通じてのみ発生します。）</target>
        </trans-unit>
        <trans-unit id="db78771d6acbed28111d58cf748f20e4959f1e52" translate="yes" xml:space="preserve">
          <source>Returns the Lua value associated to &lt;code&gt;u&lt;/code&gt;. If &lt;code&gt;u&lt;/code&gt; is not a full userdata, returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; に関連付けられたLua値を返します。 &lt;code&gt;u&lt;/code&gt; が完全なユーザーデータでない場合は、&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="d1851a04bfd13cc05cd523998c36bdc322db17e1" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of &lt;code&gt;x&lt;/code&gt;. (integer/float)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の絶対値を返します。（整数/浮動小数点）</target>
        </trans-unit>
        <trans-unit id="19e9a2e3f9c2da4b70e14502d18cc907361074e9" translate="yes" xml:space="preserve">
          <source>Returns the address of the version number (a C static variable) stored in the Lua core. When called with a valid &lt;a href=&quot;#lua_State&quot;&gt;&lt;code&gt;lua_State&lt;/code&gt;&lt;/a&gt;, returns the address of the version used to create that state. When called with &lt;code&gt;NULL&lt;/code&gt;, returns the address of the version running the call.</source>
          <target state="translated">Luaコアに保存されているバージョン番号（C静的変数）のアドレスを返します。有効な&lt;a href=&quot;#lua_State&quot;&gt; &lt;code&gt;lua_State&lt;/code&gt; &lt;/a&gt;を指定して呼び出されると、その状態の作成に使用されたバージョンのアドレスを返します。 &lt;code&gt;NULL&lt;/code&gt; を指定して呼び出すと、呼び出しを実行しているバージョンのアドレスが返されます。</target>
        </trans-unit>
        <trans-unit id="d492dc5dd4aa5f92735d2073fff7474e1a6b394e" translate="yes" xml:space="preserve">
          <source>Returns the arc cosine of &lt;code&gt;x&lt;/code&gt; (in radians).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; （ラジアン）の逆余弦を返します。</target>
        </trans-unit>
        <trans-unit id="f089a8dff08d67188de1f7c5039f149b9fa4a377" translate="yes" xml:space="preserve">
          <source>Returns the arc sine of &lt;code&gt;x&lt;/code&gt; (in radians).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の逆正弦（ラジアン）を返します。</target>
        </trans-unit>
        <trans-unit id="94a36782eb1a80f58363dabc61ceebcb41f258d2" translate="yes" xml:space="preserve">
          <source>Returns the arc tangent of &lt;code&gt;y/x&lt;/code&gt; (in radians), but uses the signs of both parameters to find the quadrant of the result. (It also handles correctly the case of &lt;code&gt;x&lt;/code&gt; being zero.)</source>
          <target state="translated">&lt;code&gt;y/x&lt;/code&gt; の逆正接（ラジアン）を返しますが、両方のパラメーターの符号を使用して結果の象限を検索します。（ &lt;code&gt;x&lt;/code&gt; がゼロの場合も正しく処理されます。）</target>
        </trans-unit>
        <trans-unit id="de4793305a62a7e062a99c696537172768770061" translate="yes" xml:space="preserve">
          <source>Returns the argument with the maximum value, according to the Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt;. (integer/float)</source>
          <target state="translated">Lua演算子 &lt;code&gt;&amp;lt;&lt;/code&gt; に従って、最大値の引数を返します。（整数/浮動小数点）</target>
        </trans-unit>
        <trans-unit id="23b18e62742fdde277f18684dd6adb5af258b562" translate="yes" xml:space="preserve">
          <source>Returns the argument with the minimum value, according to the Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt;. (integer/float)</source>
          <target state="translated">Lua演算子 &lt;code&gt;&amp;lt;&lt;/code&gt; に従って、最小値の引数を返します。（整数/浮動小数点）</target>
        </trans-unit>
        <trans-unit id="008974cf3ea7a0e47cc66825ae9db754a6215ba2" translate="yes" xml:space="preserve">
          <source>Returns the codepoints (as integers) from all characters in &lt;code&gt;s&lt;/code&gt; that start between byte position &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; (both included). The default for &lt;code&gt;i&lt;/code&gt; is 1 and for &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;i&lt;/code&gt;. It raises an error if it meets any invalid byte sequence.</source>
          <target state="translated">バイト位置 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; （両方を含む）の間で始まる &lt;code&gt;s&lt;/code&gt; のすべての文字からコードポイントを（整数として）返します。 &lt;code&gt;i&lt;/code&gt; のデフォルトは1で、 &lt;code&gt;j&lt;/code&gt; のデフォルトは &lt;code&gt;i&lt;/code&gt; です。無効なバイトシーケンスに一致すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="4e9e95635ca72435ec1e4654b329133fcb9b67b6" translate="yes" xml:space="preserve">
          <source>Returns the cosine of &lt;code&gt;x&lt;/code&gt; (assumed to be in radians).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の余弦を返します（ラジアンであると想定）。</target>
        </trans-unit>
        <trans-unit id="d63943c503fbdbc9daf70eb8b368eb63c603cce5" translate="yes" xml:space="preserve">
          <source>Returns the current hook count.</source>
          <target state="translated">現在のフック数を返します。</target>
        </trans-unit>
        <trans-unit id="91adc8b466cf6e5462daa3cdcd2555a890c15635" translate="yes" xml:space="preserve">
          <source>Returns the current hook function.</source>
          <target state="translated">現在のフック関数を返します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
