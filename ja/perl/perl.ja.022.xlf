<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="44b7c0500e40c11db7bf0e11bd6e37ab7d88c5ec" translate="yes" xml:space="preserve">
          <source>Code originally inside MM_Win32. Original author unknown.</source>
          <target state="translated">元々はMM_Win32の中のコードです。原著者不明。</target>
        </trans-unit>
        <trans-unit id="242e717fb5b853da360c4c4e3fd5e16c899cc09d" translate="yes" xml:space="preserve">
          <source>Code tree</source>
          <target state="translated">コードツリー</target>
        </trans-unit>
        <trans-unit id="238c9390ad5966dbe9669eb0b38a5c9c564b39c3" translate="yes" xml:space="preserve">
          <source>Code which is compiled outside the compartment can choose to place variables into (or</source>
          <target state="translated">コンパートメントの外側でコンパイルされたコードは、変数を (または</target>
        </trans-unit>
        <trans-unit id="ca567dda33cdf7058994a40bb9ef4db135c7d283" translate="yes" xml:space="preserve">
          <source>Code:</source>
          <target state="translated">Code:</target>
        </trans-unit>
        <trans-unit id="7346b6c55ef1dd3ee635f412ba8c8fa0b34bc040" translate="yes" xml:space="preserve">
          <source>Coderef of a subroutine to call when a portion of data is received on STDERR from the executing program.</source>
          <target state="translated">実行中のプログラムからSTDERR上にデータの一部を受信した場合に呼び出すサブルーチンのCoderef。</target>
        </trans-unit>
        <trans-unit id="0e6272092332283344899c5d9151fdf70f8638d8" translate="yes" xml:space="preserve">
          <source>Coderef of a subroutine to call when a portion of data is received on STDOUT from the executing program.</source>
          <target state="translated">実行中のプログラムからSTDOUT上にデータの一部を受信した場合に呼び出すサブルーチンのCoderef。</target>
        </trans-unit>
        <trans-unit id="cc3b474bef3775734e7b035b9dfcfb4a3687ffad" translate="yes" xml:space="preserve">
          <source>Coding style is a matter of personal taste. Many people evolve their style over several years as they learn what helps them write and maintain good code. Here's one set of assorted suggestions that seem to be widely used by experienced developers:</source>
          <target state="translated">コーディングスタイルは個人の好みの問題です。多くの人は、何が良いコードを書いて維持するのに役立つのかを学びながら、数年かけて自分のスタイルを進化させていきます。ここでは、経験豊富な開発者に広く使われているように思われる、様々な提案のセットを紹介します。</target>
        </trans-unit>
        <trans-unit id="83c20e2b46967a4d332883ed6f06dc35bb23a9dc" translate="yes" xml:space="preserve">
          <source>Coerce the given SV to a double and return it. See &lt;code&gt;SvNVx&lt;/code&gt; for a version which guarantees to evaluate sv only once.</source>
          <target state="translated">与えられたSVをdoubleに強制し、それを返します。svを1回だけ評価することを保証するバージョンについては、 &lt;code&gt;SvNVx&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3b9cb8dd077ee8e9789410150752cb5df2cf59b7" translate="yes" xml:space="preserve">
          <source>Coerces the given SV to a double and returns it. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once. Only use this if &lt;code&gt;sv&lt;/code&gt; is an expression with side effects, otherwise use the more efficient &lt;code&gt;SvNV&lt;/code&gt; .</source>
          <target state="translated">指定されたSVをdoubleに変換して返します。 &lt;code&gt;sv&lt;/code&gt; を一度だけ評価することを保証します。これは、 &lt;code&gt;sv&lt;/code&gt; が副作用のある式である場合にのみ使用します。それ以外の場合は、より効率的な &lt;code&gt;SvNV&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bac4ad8b9286fd32a256bd30b536befa1ae2a9ff" translate="yes" xml:space="preserve">
          <source>Coerces the given SV to an integer and returns it. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once. Only use this if &lt;code&gt;sv&lt;/code&gt; is an expression with side effects, otherwise use the more efficient &lt;code&gt;SvIV&lt;/code&gt; .</source>
          <target state="translated">指定されたSVを整数に変換して返します。 &lt;code&gt;sv&lt;/code&gt; を一度だけ評価することを保証します。これは、 &lt;code&gt;sv&lt;/code&gt; が副作用のある式である場合にのみ使用します。それ以外の場合は、より効率的な &lt;code&gt;SvIV&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e4398a91485317bebc11f68b77ab6f61e17b4142" translate="yes" xml:space="preserve">
          <source>Coerces the given SV to an integer and returns it. See &lt;code&gt;SvIVx&lt;/code&gt; for a version which guarantees to evaluate sv only once.</source>
          <target state="translated">指定されたSVを整数に変換して返します。svを1回だけ評価することを保証するバージョンについては、 &lt;code&gt;SvIVx&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7056ee3094a77bc1cd5afdf0d2f7a644af6c1de6" translate="yes" xml:space="preserve">
          <source>Coerces the given SV to an unsigned integer and returns it. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once. Only use this if &lt;code&gt;sv&lt;/code&gt; is an expression with side effects, otherwise use the more efficient &lt;code&gt;SvUV&lt;/code&gt; .</source>
          <target state="translated">指定されたSVを符号なし整数に強制変換して返します。 &lt;code&gt;sv&lt;/code&gt; を一度だけ評価することを保証します。 &lt;code&gt;sv&lt;/code&gt; が副作用のある式である場合にのみこれを使用します。それ以外の場合は、より効率的な &lt;code&gt;SvUV&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="796a973103d95c3243cc98edd65b34d9d2c5c67f" translate="yes" xml:space="preserve">
          <source>Coerces the given SV to an unsigned integer and returns it. See &lt;code&gt;SvUVx&lt;/code&gt; for a version which guarantees to evaluate sv only once.</source>
          <target state="translated">指定されたSVを符号なし整数に強制変換して返します。svを1回だけ評価することを保証するバージョンについては、 &lt;code&gt;SvUVx&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ea772ad5805b57d6b06159ae7393c73ccddc1d9c" translate="yes" xml:space="preserve">
          <source>CollationTest_NON_IGNORABLE.txt</source>
          <target state="translated">CollationTest_NON_IGNORABLE.txt</target>
        </trans-unit>
        <trans-unit id="7b7f09f7ff55d9003bbbf6e2b6ad35cc1d55629d" translate="yes" xml:space="preserve">
          <source>CollationTest_SHIFTED.txt</source>
          <target state="translated">CollationTest_SHIFTED.txt</target>
        </trans-unit>
        <trans-unit id="ca66835bc771bd4402dea87da5941178b9bd8799" translate="yes" xml:space="preserve">
          <source>Collects the backtrace (aka &quot;stacktrace&quot;) into a single linear malloced buffer, which the caller &lt;b&gt;must&lt;/b&gt; Perl_free_c_backtrace().</source>
          <target state="translated">呼び出し側&lt;b&gt;が&lt;/b&gt; Perl_free_c_backtrace（）である&lt;b&gt;必要が&lt;/b&gt;ある単一の線形mallocされたバッファーにバックトレース（別名「スタックトレース」）を収集します。</target>
        </trans-unit>
        <trans-unit id="e2794035cca1617a1f9360d576b9e234bb68e64d" translate="yes" xml:space="preserve">
          <source>Color for debugging messages?</source>
          <target state="translated">デバッグメッセージの色?</target>
        </trans-unit>
        <trans-unit id="931d4698b17a59cb56194fcf346f0e3466642612" translate="yes" xml:space="preserve">
          <source>Color for normal output?</source>
          <target state="translated">通常の出力の場合はカラー?</target>
        </trans-unit>
        <trans-unit id="943c85b3de9955c182721971471df60c6005726b" translate="yes" xml:space="preserve">
          <source>Color for warnings?</source>
          <target state="translated">警告の色?</target>
        </trans-unit>
        <trans-unit id="37277b98a26979971b3578b4784f262eaebdf1a4" translate="yes" xml:space="preserve">
          <source>Color screen output using ANSI escape sequences</source>
          <target state="translated">ANSI エスケープシーケンスを使用したカラー画面出力</target>
        </trans-unit>
        <trans-unit id="814253eeac185847ba47c5faad82c62ef62cc160" translate="yes" xml:space="preserve">
          <source>Color support requires &lt;a href=&quot;term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; on Unix-like platforms and &lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Console&quot;&gt;Win32::Console&lt;/a&gt; on windows. If the necessary module is not installed colored output will not be available.</source>
          <target state="translated">色のサポートには、Unixライクなプラットフォームでは&lt;a href=&quot;term/ansicolor&quot;&gt;Term :: ANSIColor&lt;/a&gt;、Windowsでは&lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Console&quot;&gt;Win32 :: Console&lt;/a&gt;が必要です。必要なモジュールがインストールされていない場合、カラー出力は利用できません。</target>
        </trans-unit>
        <trans-unit id="303879dcc89284b00c097930cabcb85cc2dc5e5d" translate="yes" xml:space="preserve">
          <source>Colored Test Output</source>
          <target state="translated">カラーテスト出力</target>
        </trans-unit>
        <trans-unit id="8864b43824503a2f85bf0964b2768f6f871f7626" translate="yes" xml:space="preserve">
          <source>Colored test output using &lt;a href=&quot;tap/formatter/color&quot;&gt;TAP::Formatter::Color&lt;/a&gt; is the default, but if output is not to a terminal, color is disabled. You can override this by adding the &lt;code&gt;--color&lt;/code&gt; switch.</source>
          <target state="translated">&lt;a href=&quot;tap/formatter/color&quot;&gt;TAP :: Formatter :: Color&lt;/a&gt;を使用した色付きのテスト出力がデフォルトですが、出力が端末でない場合、色は無効になります。 &lt;code&gt;--color&lt;/code&gt; スイッチを追加することでこれを上書きできます。</target>
        </trans-unit>
        <trans-unit id="3923712e15f6cde93b49aa53ec44f5c8d09bcfff" translate="yes" xml:space="preserve">
          <source>Combination of perl's malloc() and rigid DLL name resolution creates a special problem with library functions which expect their return value to be free()d by system's free(). To facilitate extensions which need to call such functions, system memory-allocation functions are still available with the prefix &lt;code&gt;emx_&lt;/code&gt; added. (Currently only DLL perl has this, it should propagate to</source>
          <target state="translated">perlのmalloc（）と厳格なDLL名前解決の組み合わせにより、ライブラリ関数に戻り値がシステムのfree（）によってfree（）dになることを期待する特別な問題が発生します。そのような関数を呼び出す必要のある拡張機能を容易にするために、システムメモリ割り当て関数は、接頭辞 &lt;code&gt;emx_&lt;/code&gt; が追加された状態で引き続き使用できます。（現在、DLL perlだけがこれを持っています。</target>
        </trans-unit>
        <trans-unit id="d4084d48b233ef3ed460fe34c2d006a3d174500e" translate="yes" xml:space="preserve">
          <source>Combining RE Pieces</source>
          <target state="translated">REピースの組み合わせ</target>
        </trans-unit>
        <trans-unit id="d5245a49f5313d2490851a0af63ee29dbcb57fb2" translate="yes" xml:space="preserve">
          <source>Combining that form with &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; and putting parentheses immediately around a hash are forbidden (because it is not clear what they should do):</source>
          <target state="translated">そのフォームを &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; と組み合わせ、ハッシュのすぐ後ろに括弧を置くことは禁止されています（何をすべきか明確でないため）：</target>
        </trans-unit>
        <trans-unit id="763921651d0da6d3a3be0284d4211879873417fe" translate="yes" xml:space="preserve">
          <source>Combining two pack codes with a slash (&lt;code&gt;/&lt;/code&gt;) associates them with a single value from the argument list. In &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;, the length of the argument is taken and packed according to the first code while the argument itself is added after being converted with the template code after the slash. This saves us the trouble of inserting the &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; call, but it is in &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; where we really score: The value of the length byte marks the end of the string to be taken from the buffer. Since this combination doesn't make sense except when the second pack code isn't &lt;code&gt;a*&lt;/code&gt; , &lt;code&gt;A*&lt;/code&gt; or &lt;code&gt;Z*&lt;/code&gt; , Perl won't let you.</source>
          <target state="translated">2つのパックコードをスラッシュ（ &lt;code&gt;/&lt;/code&gt; ）と組み合わせると、それらは引数リストの単一の値に関連付けられます。 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 引数自体は、スラッシュの後のテンプレートコードに変換された後に添加しながら、引数の長さは、第1コードに従って採取し、充填されています。これにより、 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; 呼び出しを挿入する手間が &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; が、実際にスコアを取得するのはアンパックです。長さのバイトの値は、バッファーから取得する文字列の終わりを示します。 2番目のパックのコードが &lt;code&gt;a*&lt;/code&gt; 、 &lt;code&gt;A*&lt;/code&gt; または &lt;code&gt;Z*&lt;/code&gt; でない場合を除いて、この組み合わせは意味をなさないため、Perlでは許可されません。</target>
        </trans-unit>
        <trans-unit id="32bae387055126d95306c7bb6532b73268f5a2d5" translate="yes" xml:space="preserve">
          <source>Comma Operator</source>
          <target state="translated">コンマ演算子</target>
        </trans-unit>
        <trans-unit id="62802cbe492e03ca981781cca641adb33725f540" translate="yes" xml:space="preserve">
          <source>Command Line Options, an Introduction</source>
          <target state="translated">コマンドラインオプション、入門編</target>
        </trans-unit>
        <trans-unit id="18beb4c43cfe79cec6e126626aa3ad7fd190e477" translate="yes" xml:space="preserve">
          <source>Command Paragraph</source>
          <target state="translated">コマンド段落</target>
        </trans-unit>
        <trans-unit id="417187d63fa0def34d24b8c333083506dc32200a" translate="yes" xml:space="preserve">
          <source>Command Switches</source>
          <target state="translated">コマンドスイッチ</target>
        </trans-unit>
        <trans-unit id="f6fe35e209171bf42b301a97ecb399ad5a56cfaf" translate="yes" xml:space="preserve">
          <source>Command line</source>
          <target state="translated">コマンドライン</target>
        </trans-unit>
        <trans-unit id="12f9d6c76aaded8fe20cb1cb15944fff0ce754c0" translate="yes" xml:space="preserve">
          <source>Command line operated programs traditionally take their arguments from the command line, for example filenames or other information that the program needs to know. Besides arguments, these programs often take command line</source>
          <target state="translated">コマンドラインで操作されるプログラムは、伝統的にコマンドラインから引数を取り、例えばファイル名やプログラムが知る必要のある他の情報などです。引数以外にも、これらのプログラムはしばしばコマンドラインの</target>
        </trans-unit>
        <trans-unit id="97c3aa97cab34b4855e7892644f3277edc0d033f" translate="yes" xml:space="preserve">
          <source>Command line options come in several flavours. Historically, they are preceded by a single dash &lt;code&gt;-&lt;/code&gt; , and consist of a single letter.</source>
          <target state="translated">コマンドラインオプションにはいくつかの種類があります。歴史的に、それらは単一のダッシュ &lt;code&gt;-&lt;/code&gt; が先行し、単一の文字で構成されています。</target>
        </trans-unit>
        <trans-unit id="1ee51dd0beb8fe1eba61df99e777a8a7fdc630b8" translate="yes" xml:space="preserve">
          <source>Command line options used by &lt;code&gt;MakeMaker-&amp;gt;new()&lt;/code&gt; , and thus by &lt;code&gt;WriteMakefile()&lt;/code&gt; . The string is split as the shell would, and the result is processed before any actual command line arguments are processed.</source>
          <target state="translated">&lt;code&gt;MakeMaker-&amp;gt;new()&lt;/code&gt; 、つまり &lt;code&gt;WriteMakefile()&lt;/code&gt; によって使用されるコマンドラインオプション。文字列はシェルと同じように分割され、実際のコマンドライン引数が処理される前に結果が処理されます。</target>
        </trans-unit>
        <trans-unit id="774ba146a62c9c3ff46ff9cc5455b08807e03827" translate="yes" xml:space="preserve">
          <source>Command line switches</source>
          <target state="translated">コマンドラインスイッチ</target>
        </trans-unit>
        <trans-unit id="878211c78a67be0fed3e28b560c4cca71216618c" translate="yes" xml:space="preserve">
          <source>Command names versus file pathnames</source>
          <target state="translated">コマンド名とファイルパス名</target>
        </trans-unit>
        <trans-unit id="f1032cc2ac5d43d9d5d41261914fc29d43686b3f" translate="yes" xml:space="preserve">
          <source>Command so make does not print the literal commands it's running.</source>
          <target state="translated">コマンド so make は実行中のリテラルコマンドを表示しません。</target>
        </trans-unit>
        <trans-unit id="4c37e3809f3281c8c25395b17b26a434eb5f38e1" translate="yes" xml:space="preserve">
          <source>Command-interpreters on non-Unix systems have rather different ideas on quoting than Unix shells. You'll need to learn the special characters in your command-interpreter (&lt;code&gt;*&lt;/code&gt; , &lt;code&gt;\&lt;/code&gt; and &lt;code&gt;&quot;&lt;/code&gt; are common) and how to protect whitespace and these characters to run one-liners (see &lt;a href=&quot;#-e-commandline&quot;&gt;-e&lt;/a&gt; below).</source>
          <target state="translated">非Unixシステムのコマンドインタープリターは、引用に関して、Unixシェルとはかなり異なる考えを持っています。コマンドインタープリタの特殊文字（ &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;\&lt;/code&gt; 、 &lt;code&gt;&quot;&lt;/code&gt; が一般的です）と、空白文字とこれらの文字を保護してワンライナーを実行する方法（下記の&lt;a href=&quot;#-e-commandline&quot;&gt;-eを&lt;/a&gt;参照）を学ぶ必要があります。</target>
        </trans-unit>
        <trans-unit id="0f2498f5306d2ed5cdf02e78b8fd02f5090806ac" translate="yes" xml:space="preserve">
          <source>Command-line options (switches). Switches in this variable are treated as if they were on every Perl command line. Only the &lt;b&gt;-[CDIMUdmtwW]&lt;/b&gt; switches are allowed. When running taint checks (either because the program was running setuid or setgid, or because the &lt;b&gt;-T&lt;/b&gt; or &lt;b&gt;-t&lt;/b&gt; switch was used), this variable is ignored. If PERL5OPT begins with &lt;b&gt;-T&lt;/b&gt;, tainting will be enabled and subsequent options ignored. If PERL5OPT begins with &lt;b&gt;-t&lt;/b&gt;, tainting will be enabled, a writable dot removed from @INC, and subsequent options honored.</source>
          <target state="translated">コマンドラインオプション（スイッチ）。この変数のスイッチは、すべてのPerlコマンドラインにあるかのように扱われます。&lt;b&gt;-[CDIMUdmtwW]&lt;/b&gt;スイッチのみが許可されます。汚染チェックを実行するとき（プログラムがsetuidまたはsetgidを実行していたため、または&lt;b&gt;-T&lt;/b&gt;または&lt;b&gt;-t&lt;/b&gt;スイッチが使用されたため）、この変数は無視されます。 PERL5OPTが&lt;b&gt;-T&lt;/b&gt;で始まる場合、汚染が有効になり、後続のオプションは無視されます。 PERL5OPTが&lt;b&gt;-t&lt;/b&gt;で始まる場合、汚染が有効になり、@ INCから書き込み可能なドットが削除され、その後のオプションが受け入れられます。</target>
        </trans-unit>
        <trans-unit id="6f3e177b917fb27cf84346755d918af92a7cfb2b" translate="yes" xml:space="preserve">
          <source>Commands for the MM's to use in Makefiles</source>
          <target state="translated">Makefileで使用するMMのコマンド</target>
        </trans-unit>
        <trans-unit id="2312e47cb85161c64e509845981fc1af27401c37" translate="yes" xml:space="preserve">
          <source>Commands that launch external processes are generally supported on most platforms (though many of them do not support any type of forking). The problem with using them arises from what you invoke them on. External tools are often named differently on different platforms, may not be available in the same location, might accept different arguments, can behave differently, and often present their results in a platform-dependent way. Thus, you should seldom depend on them to produce consistent results. (Then again, if you're calling</source>
          <target state="translated">外部プロセスを起動するコマンドは、一般的にほとんどのプラットフォームでサポートされています (多くのプラットフォームでは、どのようなタイプのフォークもサポートしていませんが)。コマンドを使用する際に問題となるのは、何のためにコマンドを起動するかということです。外部ツールの名前はプラットフォームによって異なることが多く、同じ場所では利用できないかもしれませんし、異なる引数を受け入れるかもしれませんし、異なる動作をするかもしれません。そのため、一貫した結果を得るためにそれらに頼ることはほとんどありません。(そして、もし</target>
        </trans-unit>
        <trans-unit id="3f11f6a37b2bb1f46ae24400fbbec0133765dee3" translate="yes" xml:space="preserve">
          <source>Comment result token.</source>
          <target state="translated">コメント結果トークン。</target>
        </trans-unit>
        <trans-unit id="33cd8b27d6e79d80d7f00dae59eedee6f870da21" translate="yes" xml:space="preserve">
          <source>Comment, suggestions, and patches welcome.</source>
          <target state="translated">コメント、提案、パッチを歓迎します。</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="a6b602c915283ace9dfdb4567ddd955a24271e51" translate="yes" xml:space="preserve">
          <source>Comments begin with &quot;#&quot;, not &quot;/*&quot; or &quot;//&quot;. Perl may interpret C/C++ comments as division operators, unterminated regular expressions or the defined-or operator.</source>
          <target state="translated">コメントは&quot;/*&quot;や&quot;//&quot;ではなく &quot;#&quot;で始まります。Perl は、C/C++のコメントを除算演算子、アンターミネーテッド正規表現、または defined-or 演算子として解釈することができます。</target>
        </trans-unit>
        <trans-unit id="39a11c5627026c5647a98241784b981e03eeba67" translate="yes" xml:space="preserve">
          <source>Comments can be added to XSUBs by placing a &lt;code&gt;#&lt;/code&gt; as the first non-whitespace of a line. Care should be taken to avoid making the comment look like a C preprocessor directive, lest it be interpreted as such. The simplest way to prevent this is to put whitespace in front of the &lt;code&gt;#&lt;/code&gt; .</source>
          <target state="translated">行の最初の非空白文字として &lt;code&gt;#&lt;/code&gt; を配置することで、XSUBにコメントを追加できます。コメントがCプリプロセッサディレクティブのように見えないように注意してください。これを防ぐ最も簡単な方法は、 &lt;code&gt;#&lt;/code&gt; の前に空白を置くことです。</target>
        </trans-unit>
        <trans-unit id="d3573b55c22b5f8d93f519ce02a5ac87f75d58f1" translate="yes" xml:space="preserve">
          <source>Comments can be embedded in a TEMPLATE using &lt;code&gt;#&lt;/code&gt; through the end of line. White space can separate pack codes from each other, but modifiers and repeat counts must follow immediately. Breaking complex templates into individual line-by-line components, suitably annotated, can do as much to improve legibility and maintainability of pack/unpack formats as &lt;code&gt;/x&lt;/code&gt; can for complicated pattern matches.</source>
          <target state="translated">コメントは、行末まで &lt;code&gt;#&lt;/code&gt; を使用してテンプレートに埋め込むことができます。空白はパックコードを互いに分離することができますが、修飾子と繰り返し回数はすぐに続く必要があります。複雑なテンプレートを個別の行ごとのコンポーネントに分割し、適切に注釈を付けると、 &lt;code&gt;/x&lt;/code&gt; が複雑なパターンマッチでできるのと同じくらい、パック/アンパック形式の読みやすさと保守性が向上します。</target>
        </trans-unit>
        <trans-unit id="c99a223d578e07988c8679c590eaf92f0323e14f" translate="yes" xml:space="preserve">
          <source>Comments on this feature are welcome; send email to &lt;code&gt;perl5-porters@perl.org&lt;/code&gt; .</source>
          <target state="translated">この機能に関するコメントは大歓迎です。 &lt;code&gt;perl5-porters@perl.org&lt;/code&gt; にメールを送信します。</target>
        </trans-unit>
        <trans-unit id="66bf0dd35fe077bd96ea49557abe1254cfe3d453" translate="yes" xml:space="preserve">
          <source>Comments start with a hash symbol and run to the end of the line</source>
          <target state="translated">コメントはハッシュ記号で始まり、行の最後まで表示されます。</target>
        </trans-unit>
        <trans-unit id="a0809fab0f6e5f47cada9e750c63afe1aea71d14" translate="yes" xml:space="preserve">
          <source>Comments, Comments, Comments</source>
          <target state="translated">コメント、コメント、コメント</target>
        </trans-unit>
        <trans-unit id="a635957687d394ed8eb32dd7af4e9fb9ea45ae9c" translate="yes" xml:space="preserve">
          <source>Commit message</source>
          <target state="translated">コミットメッセージ</target>
        </trans-unit>
        <trans-unit id="bf8186840565d9d31b1a177074576c6626b1a28e" translate="yes" xml:space="preserve">
          <source>Committing your work will save the change</source>
          <target state="translated">作業をコミットすると変更が保存されます。</target>
        </trans-unit>
        <trans-unit id="7de90a65241a6cdbd9ade485d777715d99285a1e" translate="yes" xml:space="preserve">
          <source>Common</source>
          <target state="translated">Common</target>
        </trans-unit>
        <trans-unit id="0160caed21fbd46d3db9b1e56d4701e45dadedf1" translate="yes" xml:space="preserve">
          <source>Common encodings recognized by ISO, MIME, IANA, and various other standardisation organisations are recognised; for a more detailed list see &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt;.</source>
          <target state="translated">ISO、MIME、IANA、およびその他のさまざまな標準化組織によって認識されている一般的なエンコーディングが認識されています。より詳細なリストについては、&lt;a href=&quot;encode/supported&quot;&gt;Encode :: Supportedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9506633a3b0fc3eabffeede071b59b13423caf84" translate="yes" xml:space="preserve">
          <source>Common errors and problems</source>
          <target state="translated">よくあるエラーや問題点</target>
        </trans-unit>
        <trans-unit id="3710bbf841f5662d9076f286b3544953fd32bcdf" translate="yes" xml:space="preserve">
          <source>Common type methods</source>
          <target state="translated">一般的な型メソッド</target>
        </trans-unit>
        <trans-unit id="e8a9217a7a2833f7343523310e0806117cb02577" translate="yes" xml:space="preserve">
          <source>Compare 8-bit scalar data according to the current locale</source>
          <target state="translated">現在のロケールに応じて 8 ビットのスカラーデータを比較します。</target>
        </trans-unit>
        <trans-unit id="e77e2932b456b90db814e0a4de05c60e78fca296" translate="yes" xml:space="preserve">
          <source>Compare C</source>
          <target state="translated">Cを比較する</target>
        </trans-unit>
        <trans-unit id="9608a3eba277fa15d97bc5d85ad1fc9cb0be2844" translate="yes" xml:space="preserve">
          <source>Compare OBJ1 and OBJ2 and return -1, 0, or 1, if OBJ1 is less than, equal to, or larger than OBJ2, respectively.</source>
          <target state="translated">OBJ1とOBJ2を比較し、OBJ1がOBJ2より小さいか、OBJ2と同じか、OBJ2より大きい場合は-1、0、1を返します。</target>
        </trans-unit>
        <trans-unit id="5ea95d1f886daac818a31006775ac3fb0265210d" translate="yes" xml:space="preserve">
          <source>Compare files or filehandles</source>
          <target state="translated">ファイルやファイルハンドルの比較</target>
        </trans-unit>
        <trans-unit id="c8f1d71cf0a936dd7f0500caee4610cd7b62576a" translate="yes" xml:space="preserve">
          <source>Compare the following to the examples in &lt;code&gt;(*PRUNE)&lt;/code&gt; ; note the string is twice as long:</source>
          <target state="translated">以下を &lt;code&gt;(*PRUNE)&lt;/code&gt; の例と比較してください。文字列の長さが2倍であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="69ddd15b8d251ac3138eb554c808b81fba8e3f77" translate="yes" xml:space="preserve">
          <source>Compare this code that uses an arbitrary ID...</source>
          <target state="translated">任意のIDを使用するこのコードを比較すると...</target>
        </trans-unit>
        <trans-unit id="d12d96005a498c4cadff6daa5f0a0e574ae4acad" translate="yes" xml:space="preserve">
          <source>Compare this to:</source>
          <target state="translated">これと比較してみてください。</target>
        </trans-unit>
        <trans-unit id="7f18e1a8f5bc872f75eec509b3be6157fc03fc7a" translate="yes" xml:space="preserve">
          <source>Compare this with a similar but locale-aware program:</source>
          <target state="translated">同じような、しかしローカライズを意識したプログラムと比較してみてください。</target>
        </trans-unit>
        <trans-unit id="777b2f3ef1bbfb2e49e5cc0c311dce3b665b3d34" translate="yes" xml:space="preserve">
          <source>Compare this with the characters that you see and their order if you state explicitly that the locale should be ignored:</source>
          <target state="translated">これを、ロケールを無視することを明示的に述べた場合に表示される文字とその順番と比較します。</target>
        </trans-unit>
        <trans-unit id="8989d48e5efe1cfe0a91400d8b896a2d5b0f2ac0" translate="yes" xml:space="preserve">
          <source>Compares $x with $y and takes the sign into account. Returns -1, 0, 1 or undef.</source>
          <target state="translated">x と $y を比較し、符号を考慮します。返り値は -1、0、1、または undef です。</target>
        </trans-unit>
        <trans-unit id="7080fdc780e08e244284eff667294f04737c6d6a" translate="yes" xml:space="preserve">
          <source>Compares $x with $y while ignoring their sign. Returns -1, 0, 1 or undef.</source>
          <target state="translated">符号を無視して $x と $y を比較します。返り値は -1、0、1、または undef です。</target>
        </trans-unit>
        <trans-unit id="bb939a704fb32544966548a9a5549dad34ca8481" translate="yes" xml:space="preserve">
          <source>Compares the sequence of characters (stored as octets) in &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;blen&lt;/code&gt; with the sequence of characters (stored as UTF-8) in &lt;code&gt;u&lt;/code&gt; , &lt;code&gt;ulen&lt;/code&gt; . Returns 0 if they are equal, -1 or -2 if the first string is less than the second string, +1 or +2 if the first string is greater than the second string.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;blen&lt;/code&gt; の文字のシーケンス（オクテットとして格納）を、 &lt;code&gt;u&lt;/code&gt; 、 &lt;code&gt;ulen&lt;/code&gt; の文字のシーケンス（UTF-8として格納）と比較します。等しい場合は0、最初の文字列が2番目の文字列より小さい場合は-1または-2、最初の文字列が2番目の文字列より大きい場合は+1または+2を返します。</target>
        </trans-unit>
        <trans-unit id="20da491304f6c81eaa643ddf1af11a10dab08b5e" translate="yes" xml:space="preserve">
          <source>Compares the strings in two SVs in a locale-aware manner. Is UTF-8 and 'use bytes' aware and will coerce its args to strings if necessary. If the flags contain SV_GMAGIC, it handles get magic. See also &lt;code&gt;sv_cmp_flags&lt;/code&gt; .</source>
          <target state="translated">2つのSV内の文字列をロケールに対応した方法で比較します。UTF-8で「バイトを使用」を認識し、必要に応じてその引数を文字列に強制変換します。フラグにSV_GMAGICが含まれている場合は、getマジックを処理します。 &lt;code&gt;sv_cmp_flags&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="14038da5801f25b5039c66301e98f0e246769198" translate="yes" xml:space="preserve">
          <source>Compares the strings in two SVs in a locale-aware manner. Is UTF-8 and 'use bytes' aware, handles get magic, and will coerce its args to strings if necessary. See also &lt;code&gt;sv_cmp&lt;/code&gt; .</source>
          <target state="translated">2つのSV内の文字列をロケールに対応した方法で比較します。UTF-8で「バイトを使用」を認識し、ハンドルがマジックを取得し、必要に応じてその引数を文字列に強制変換します。 &lt;code&gt;sv_cmp&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="810a90ac09960b8d41b487c729062ca1467528ef" translate="yes" xml:space="preserve">
          <source>Compares the strings in two SVs. Returns -1, 0, or 1 indicating whether the string in &lt;code&gt;sv1&lt;/code&gt; is less than, equal to, or greater than the string in &lt;code&gt;sv2&lt;/code&gt; . Is UTF-8 and 'use bytes' aware and will coerce its args to strings if necessary. If the flags include SV_GMAGIC, it handles get magic. See also &lt;code&gt;sv_cmp_locale_flags&lt;/code&gt; .</source>
          <target state="translated">2つのSVの文字列を比較します。-1、0、または1を返し、 &lt;code&gt;sv1&lt;/code&gt; の文字列が &lt;code&gt;sv2&lt;/code&gt; の文字列より小さいか、等しいか、大きいかを示します。UTF-8で「バイトを使用」を認識し、必要に応じてその引数を文字列に強制変換します。フラグにSV_GMAGICが含まれている場合は、get magicを処理します。 &lt;code&gt;sv_cmp_locale_flags&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="41ea1ccdf864f6da3ab35b8196aaf20a51353014" translate="yes" xml:space="preserve">
          <source>Compares the strings in two SVs. Returns -1, 0, or 1 indicating whether the string in &lt;code&gt;sv1&lt;/code&gt; is less than, equal to, or greater than the string in &lt;code&gt;sv2&lt;/code&gt; . Is UTF-8 and 'use bytes' aware, handles get magic, and will coerce its args to strings if necessary. See also &lt;code&gt;sv_cmp_locale&lt;/code&gt; .</source>
          <target state="translated">2つのSVの文字列を比較します。-1、0、または1を返し、 &lt;code&gt;sv1&lt;/code&gt; の文字列が &lt;code&gt;sv2&lt;/code&gt; の文字列より小さいか、等しいか、大きいかを示します。UTF-8で「バイトを使用」を認識し、ハンドルがマジックを取得し、必要に応じてその引数を文字列に強制変換します。 &lt;code&gt;sv_cmp_locale&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="2b4ac967a48ac38926d5bd3b00ae02344f0ba5c7" translate="yes" xml:space="preserve">
          <source>Comparing and sorting by locale is usually slower than the default sorting; slow-downs of two to four times have been observed. It will also consume more memory: once a Perl scalar variable has participated in any string comparison or sorting operation obeying the locale collation rules, it will take 3-15 times more memory than before. (The exact multiplier depends on the string's contents, the operating system and the locale.) These downsides are dictated more by the operating system's implementation of the locale system than by Perl.</source>
          <target state="translated">ロケールによる比較やソートは通常、デフォルトのソートよりも遅くなります。また、より多くのメモリを消費します。Perl のスカラー変数がロケールの照合ルールに従った文字列の比較やソート操作に参加すると、以前よりも 3-15 倍のメモリを消費します (正確な倍率は文字列の内容に依存します。(正確な倍率は、文字列の内容、オペレーティングシステム、ロケールによって異なります)。これらの欠点は、Perlよりもオペレーティングシステムのロケールシステムの実装に起因しています。</target>
        </trans-unit>
        <trans-unit id="5d0a71bcc03489928ee6825a22ad30e52059487a" translate="yes" xml:space="preserve">
          <source>Comparing eval'd strings with code references will give you inaccurate results: a code reference will show a slightly slower execution time than the equivalent eval'd string.</source>
          <target state="translated">eval'd文字列とコード参照を比較すると、不正確な結果が得られます:コード参照は、同等のeval'd文字列よりも実行時間が若干遅くなります。</target>
        </trans-unit>
        <trans-unit id="07ac02349f220b342a1d6f35982d496f173f647a" translate="yes" xml:space="preserve">
          <source>Comparing or matching a string case-insensitively. In Perl, it is implemented with the &lt;code&gt;/i&lt;/code&gt; pattern modifier, the &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; function, and the &lt;code&gt;\F&lt;/code&gt; double-quote translation escape.</source>
          <target state="translated">大文字と小文字を区別せずに文字列を比較または照合します。Perlでは、 &lt;code&gt;/i&lt;/code&gt; パターン修飾子、 &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; 関数、および &lt;code&gt;\F&lt;/code&gt; 二重引用符変換エスケープを使用して実装されます。</target>
        </trans-unit>
        <trans-unit id="80c2dde455c2c05f663d3e4f08b51ffa85278453" translate="yes" xml:space="preserve">
          <source>Compatibility functions:</source>
          <target state="translated">互換性のある機能。</target>
        </trans-unit>
        <trans-unit id="5b943666a01e98d02ba66c24633566eaaa275c3f" translate="yes" xml:space="preserve">
          <source>Compatibility with Unix compress/uncompress.</source>
          <target state="translated">Unix の圧縮/解凍との互換性。</target>
        </trans-unit>
        <trans-unit id="aad755de429541e8ec1db943cf4102247f2bb5d3" translate="yes" xml:space="preserve">
          <source>Compilation</source>
          <target state="translated">Compilation</target>
        </trans-unit>
        <trans-unit id="61222b08840c5d756903ba61f2c94b08f72f00f1" translate="yes" xml:space="preserve">
          <source>Compilation errors will tell you the line number of the error, with an indication of the next token or token type that was to be examined. (In a script passed to Perl via &lt;b&gt;-e&lt;/b&gt; switches, each &lt;b&gt;-e&lt;/b&gt; is counted as one line.)</source>
          <target state="translated">コンパイルエラーは、エラーの行番号を示し、次のトークンまたはトークンタイプが調査されることを示します。（&lt;b&gt;-e&lt;/b&gt;スイッチを介してPerlに渡されるスクリプトでは、各&lt;b&gt;-e&lt;/b&gt;は1行としてカウントされます。）</target>
        </trans-unit>
        <trans-unit id="acc9cabc1ceec333d13d3b9abb6ebf9a6c73a5f8" translate="yes" xml:space="preserve">
          <source>Compilation problems</source>
          <target state="translated">コンパイルの問題</target>
        </trans-unit>
        <trans-unit id="e55924dc0dada3b1eb85a06e699cc43d910428cf" translate="yes" xml:space="preserve">
          <source>Compilation starts with &lt;code&gt;pregcomp()&lt;/code&gt; , which is mostly an initialisation wrapper which farms work out to two other routines for the heavy lifting: the first is &lt;code&gt;reg()&lt;/code&gt; , which is the start point for parsing; the second, &lt;code&gt;study_chunk()&lt;/code&gt; , is responsible for optimisation.</source>
          <target state="translated">コンパイルが始まる &lt;code&gt;pregcomp()&lt;/code&gt; ほとんど農場は力仕事のための2つの他のルーチンにうまく初期化ラッパーであり、第一は、 &lt;code&gt;reg()&lt;/code&gt; 構文解析の開始点です。2番目の &lt;code&gt;study_chunk()&lt;/code&gt; は、最適化を担当します。</target>
        </trans-unit>
        <trans-unit id="44ff6f247296e1f189e3389d776ef21cc85aecb1" translate="yes" xml:space="preserve">
          <source>Compile and execute code in restricted compartments</source>
          <target state="translated">制限されたコンパートメントでのコードのコンパイルと実行</target>
        </trans-unit>
        <trans-unit id="7d8b71307540ad88b5ce354792888a1fa8ac7b97" translate="yes" xml:space="preserve">
          <source>Compile and link C code for Perl modules</source>
          <target state="translated">Perl モジュール用の C コードのコンパイルとリンク</target>
        </trans-unit>
        <trans-unit id="b5228203f0e6f671c5f4f6a9e10132ab1a69d71c" translate="yes" xml:space="preserve">
          <source>Compile and run:</source>
          <target state="translated">コンパイルして実行します。</target>
        </trans-unit>
        <trans-unit id="527a73f377cb4327fd734d48795ab96620ea39d0" translate="yes" xml:space="preserve">
          <source>Compile as usual:</source>
          <target state="translated">いつものようにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="cdeeb661a0937ab7ad6e505a38d072a24f8b1609" translate="yes" xml:space="preserve">
          <source>Compile pass 1: check routines</source>
          <target state="translated">コンパイルパス 1:ルーチンのチェック</target>
        </trans-unit>
        <trans-unit id="ad1d375b3a209f1d8455aec99a7200242837c043" translate="yes" xml:space="preserve">
          <source>Compile pass 1a: constant folding</source>
          <target state="translated">コンパイルパス1a:一定のフォールディング</target>
        </trans-unit>
        <trans-unit id="7161db3a41fd5c2db89e47b0432b3cd9aaab4ad8" translate="yes" xml:space="preserve">
          <source>Compile pass 2: context propagation</source>
          <target state="translated">コンパイルパス 2:コンテキストの伝播</target>
        </trans-unit>
        <trans-unit id="87a46269fcd4885277b1fc9babaffbe09e6ff612" translate="yes" xml:space="preserve">
          <source>Compile pass 3: peephole optimization</source>
          <target state="translated">コンパイルパス3:のぞき穴の最適化</target>
        </trans-unit>
        <trans-unit id="8ca3fba27b3ae96fd6b344a588412c93d138dee1" translate="yes" xml:space="preserve">
          <source>Compile perl and extensions sources with AddressSanitizer.</source>
          <target state="translated">AddressSanitizerでPerlとextensionsのソースをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="e9f217dff0c1cb84ca4c53ebcecee0f4ba366dbb" translate="yes" xml:space="preserve">
          <source>Compile the pattern stored in &lt;code&gt;pattern&lt;/code&gt; using the given &lt;code&gt;flags&lt;/code&gt; and return a pointer to a prepared &lt;code&gt;REGEXP&lt;/code&gt; structure that can perform the match. See &lt;a href=&quot;#The-REGEXP-structure&quot;&gt;The REGEXP structure&lt;/a&gt; below for an explanation of the individual fields in the REGEXP struct.</source>
          <target state="translated">与えられた &lt;code&gt;flags&lt;/code&gt; を使用してパターンに格納された &lt;code&gt;pattern&lt;/code&gt; をコンパイルし、一致を実行できる準備された &lt;code&gt;REGEXP&lt;/code&gt; 構造体へのポインタを返します。&lt;a href=&quot;#The-REGEXP-structure&quot;&gt;REGEXP構造体&lt;/a&gt;の個々のフィールドの説明については、以下のREGEXP構造体を参照してください。</target>
        </trans-unit>
        <trans-unit id="52c41fd78e57b0ea9c7edd279f09324e8febcf36" translate="yes" xml:space="preserve">
          <source>Compile this wrapper into a binary executable and then make</source>
          <target state="translated">このラッパーをバイナリ実行ファイルにコンパイルして</target>
        </trans-unit>
        <trans-unit id="5e2892ae20c461e25a70a7b9ce2cc0ca3e806286" translate="yes" xml:space="preserve">
          <source>Compile-time Output</source>
          <target state="translated">コンパイル時の出力</target>
        </trans-unit>
        <trans-unit id="316b6940ee7ff98d0c91d6eed52347ec98e1cebd" translate="yes" xml:space="preserve">
          <source>Compile-time class fields</source>
          <target state="translated">コンパイル時のクラスフィールド</target>
        </trans-unit>
        <trans-unit id="b224a19e379a66e5216e1e3a4c23fb529c4ffd00" translate="yes" xml:space="preserve">
          <source>Compile-time options</source>
          <target state="translated">コンパイル時のオプション</target>
        </trans-unit>
        <trans-unit id="f6133097eb347671ef54899d886f2ecc59f839b5" translate="yes" xml:space="preserve">
          <source>Compile-time scope hooks</source>
          <target state="translated">コンパイル時のスコープフック</target>
        </trans-unit>
        <trans-unit id="9a1874d143fe11d6c914d3925623b8d4023c98fe" translate="yes" xml:space="preserve">
          <source>Compiled Encodings</source>
          <target state="translated">コンパイルされたエンコーディング</target>
        </trans-unit>
        <trans-unit id="1d37a3ea5df0706c7c9b42fdc4c2ef0fe0a0aa99" translate="yes" xml:space="preserve">
          <source>Compiled code</source>
          <target state="translated">コンパイルされたコード</target>
        </trans-unit>
        <trans-unit id="5c415c80469833c9cf270c47e731b8c7453f9dbd" translate="yes" xml:space="preserve">
          <source>Compiled program. Inlined into the structure so the entire struct can be treated as a single blob.</source>
          <target state="translated">コンパイルされたプログラム。構造体に組み込まれているので、構造体全体を単一のブロブとして扱うことができます。</target>
        </trans-unit>
        <trans-unit id="208f16ae59394d8539a13277bb3ef361462a3b2b" translate="yes" xml:space="preserve">
          <source>Compiler and Related Tools on Solaris.</source>
          <target state="translated">Solaris 上のコンパイラと関連ツール。</target>
        </trans-unit>
        <trans-unit id="34f24cbbea7db0e43a9c0993c8373a846789f46b" translate="yes" xml:space="preserve">
          <source>Compiles a C source file and produces an object file. The name of the object file is returned. The source file is specified in a &lt;code&gt;source&lt;/code&gt; parameter, which is required; the other parameters listed below are optional.</source>
          <target state="translated">Cソースファイルをコンパイルし、オブジェクトファイルを生成します。オブジェクトファイルの名前が返されます。ソースファイルは、必須の &lt;code&gt;source&lt;/code&gt; パラメータで指定されます。以下にリストされている他のパラメーターはオプションです。</target>
        </trans-unit>
        <trans-unit id="e24918face3ac9c1b717001b232debfe6ee36a5c" translate="yes" xml:space="preserve">
          <source>Compiling Perl 5 on AIX</source>
          <target state="translated">AIX で Perl 5 をコンパイルする</target>
        </trans-unit>
        <trans-unit id="c22ae861a5bf3dbdbae654f91cbd81651f885935" translate="yes" xml:space="preserve">
          <source>Compiling Perl 5 on AIX 7.1.0</source>
          <target state="translated">AIX 7.1.0 で Perl 5 をコンパイルする</target>
        </trans-unit>
        <trans-unit id="9c229fda73fdbf38e74af7c957910e2ab6e8ac38" translate="yes" xml:space="preserve">
          <source>Compiling Perl 5 on HP-UX</source>
          <target state="translated">HP-UX上でPerl 5をコンパイルする</target>
        </trans-unit>
        <trans-unit id="4367b922eaae098fdd83c24f81fe1e73e3dcc108" translate="yes" xml:space="preserve">
          <source>Compiling Perl 5 on Tru64</source>
          <target state="translated">Tru64 での Perl 5 のコンパイル</target>
        </trans-unit>
        <trans-unit id="0ab72b58debfaa78bed9b0dabffd26a67134a0a0" translate="yes" xml:space="preserve">
          <source>Compiling Perl 5 on older AIX versions up to 4.3.3</source>
          <target state="translated">4.3.3.3までの古いAIXバージョンでPerl 5をコンパイルする</target>
        </trans-unit>
        <trans-unit id="b9b693c192dd1710f2e9e413a10dac38987acc04" translate="yes" xml:space="preserve">
          <source>Compiling Perl for OS/400 PASE</source>
          <target state="translated">OS/400用Perlのコンパイル PASE</target>
        </trans-unit>
        <trans-unit id="89c4a07bdd1b063c8640e5cb7f79fc20fab27cc4" translate="yes" xml:space="preserve">
          <source>Compiling Perl on BS2000</source>
          <target state="translated">BS2000でPerlをコンパイル</target>
        </trans-unit>
        <trans-unit id="7f945a02f351065a45ab543615ac08775ab27ccb" translate="yes" xml:space="preserve">
          <source>Compiling Perl on Symbian</source>
          <target state="translated">Symbian で Perl をコンパイルする</target>
        </trans-unit>
        <trans-unit id="cea78e017dd3458f4890e6e74a3e6990888adbfd" translate="yes" xml:space="preserve">
          <source>Compiling and saving regular expressions</source>
          <target state="translated">正規表現のコンパイルと保存</target>
        </trans-unit>
        <trans-unit id="73da9444429f3393b9a36999cf3b31965029c0e7" translate="yes" xml:space="preserve">
          <source>Compiling with threading (-Duseithreads) completely rewrites the function prototypes of Perl. You better try your changes with that. Related to this is the difference between &quot;Perl_-less&quot; and &quot;Perl_-ly&quot; APIs, for example:</source>
          <target state="translated">スレッディングを使ってコンパイルすると(-Duseithreads)、Perlの関数のプロトタイプを完全に書き換えてしまいます。これを使って変更してみてはいかがでしょうか。これに関連して、例えば「Perl_less」と「Perl_ly」のAPIの違いがあります。</target>
        </trans-unit>
        <trans-unit id="ce33e80de717ad8f29fa7b0d95b6100971d4a1f5" translate="yes" xml:space="preserve">
          <source>Compiling your C program</source>
          <target state="translated">Cプログラムのコンパイル</target>
        </trans-unit>
        <trans-unit id="4a85048775fa0a61ab607374e9f2ae3d47a74e50" translate="yes" xml:space="preserve">
          <source>Complete Dissociation of Child from Parent</source>
          <target state="translated">子と親の完全な解離</target>
        </trans-unit>
        <trans-unit id="c18b6d49a703c470c73b112b479a086dc7896837" translate="yes" xml:space="preserve">
          <source>Complete applications rarely belong in the Perl Module Library.</source>
          <target state="translated">完全なアプリケーションが Perl モジュールライブラリに属することはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="74c1508ef341d68c6231bb4d7d525101aab30f53" translate="yes" xml:space="preserve">
          <source>Complex data structures</source>
          <target state="translated">複雑なデータ構造</target>
        </trans-unit>
        <trans-unit id="ffe6248574dae7c5af853909dcd998ffa5a77c65" translate="yes" xml:space="preserve">
          <source>Complex numbers and associated mathematical functions</source>
          <target state="translated">複素数と関連する数学関数</target>
        </trans-unit>
        <trans-unit id="cc43311382c470cc090f7797edbba8e531a9d677" translate="yes" xml:space="preserve">
          <source>Complex numbers are numbers that have both a real part and an imaginary part, and are usually noted:</source>
          <target state="translated">複素数とは、実数部と虚数部の両方を持つ数のことで、通常は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="48b933ad5b59e3f82ebc999f039fd64112dc79e5" translate="yes" xml:space="preserve">
          <source>Compliant parsers must not treat &quot;-&amp;gt;&quot; as special.</source>
          <target state="translated">準拠しているパーサーは、「-&amp;gt;」を特別なものとして扱わないでください。</target>
        </trans-unit>
        <trans-unit id="b4e13848c14cd38c0bce075ad2fa8690d5d9a71b" translate="yes" xml:space="preserve">
          <source>Complicated stuff for Win32 that I don't understand. :(</source>
          <target state="translated">Win32の複雑でよくわからないもの。</target>
        </trans-unit>
        <trans-unit id="f9088d8d7c9d5789f609c18210cfd55fd0924e55" translate="yes" xml:space="preserve">
          <source>Composing regular expressions at runtime</source>
          <target state="translated">実行時に正規表現を構成する</target>
        </trans-unit>
        <trans-unit id="ca5e00120498b815c12de59fd45e93f8086a8bfc" translate="yes" xml:space="preserve">
          <source>Composition</source>
          <target state="translated">Composition</target>
        </trans-unit>
        <trans-unit id="63df8303c717b29c266d23df163b1b18d7225c3d" translate="yes" xml:space="preserve">
          <source>Composition Exclusion Table</source>
          <target state="translated">組成除外表</target>
        </trans-unit>
        <trans-unit id="fb6884eb8992b62c7c1af30d600b40339c50155a" translate="yes" xml:space="preserve">
          <source>Compound Statements</source>
          <target state="translated">複合文</target>
        </trans-unit>
        <trans-unit id="485ff8d4769defdc95809b50d74f993442a7e521" translate="yes" xml:space="preserve">
          <source>Compress all the DLLs with</source>
          <target state="translated">ですべての DLL を圧縮します。</target>
        </trans-unit>
        <trans-unit id="9fd56668bd5f18daaa0b667a0debd58feedac101" translate="yes" xml:space="preserve">
          <source>Compress::Raw::Bzip2</source>
          <target state="translated">Compress::Raw::Bzip2</target>
        </trans-unit>
        <trans-unit id="18d94e1500a428c004428df46c1953161a32df03" translate="yes" xml:space="preserve">
          <source>Compress::Raw::Bzip2 - Low-Level Interface to bzip2 compression library</source>
          <target state="translated">Compress::Raw::Bzip2-bzip2 圧縮ライブラリへの低レベルインターフェース</target>
        </trans-unit>
        <trans-unit id="45bc572c9ec4512947eadc206937635681bf6c11" translate="yes" xml:space="preserve">
          <source>Compress::Raw::Zlib</source>
          <target state="translated">Compress::Raw::Zlib</target>
        </trans-unit>
        <trans-unit id="c076710bf2d12402a0edf3b2175c1d82039053a0" translate="yes" xml:space="preserve">
          <source>Compress::Raw::Zlib - Low-Level Interface to zlib compression library</source>
          <target state="translated">Compress::Raw::Zlib-zlib 圧縮ライブラリへの低レベルインターフェース</target>
        </trans-unit>
        <trans-unit id="35464ef9d0e6b29547404c53959f74fe619d2fa0" translate="yes" xml:space="preserve">
          <source>Compress::Raw::Zlib::Deflate</source>
          <target state="translated">Compress::Raw::Zlib::Deflate</target>
        </trans-unit>
        <trans-unit id="9da283b891dfecdc74e74f383b66cc8440ffe8da" translate="yes" xml:space="preserve">
          <source>Compress::Raw::Zlib::Inflate</source>
          <target state="translated">Compress::Raw::Zlib::Inflate</target>
        </trans-unit>
        <trans-unit id="0a6571e5bcd046dfe8f32f7d79b4f6bae3366dd5" translate="yes" xml:space="preserve">
          <source>Compress::Zlib</source>
          <target state="translated">Compress::Zlib</target>
        </trans-unit>
        <trans-unit id="96c20806a0d6c0bf54bc6c1767bdc331836742ff" translate="yes" xml:space="preserve">
          <source>Compress::Zlib - Interface to zlib compression library</source>
          <target state="translated">Compress::Zlib-zlib 圧縮ライブラリへのインターフェイス</target>
        </trans-unit>
        <trans-unit id="b27c649ac2489267a35287d00edb05f007c3c52e" translate="yes" xml:space="preserve">
          <source>Compress::Zlib::memGunzip</source>
          <target state="translated">Compress::Zlib::memGunzip</target>
        </trans-unit>
        <trans-unit id="6729436703929444a364247fdaaf90b9905bdce6" translate="yes" xml:space="preserve">
          <source>Compress::Zlib::memGzip</source>
          <target state="translated">Compress::Zlib::memGzip</target>
        </trans-unit>
        <trans-unit id="ee774a21a0a3c5ce8303c3d53424d9997d3a1a40" translate="yes" xml:space="preserve">
          <source>Compresses &lt;code&gt;$source&lt;/code&gt; . If successful it returns the compressed data. Otherwise it returns</source>
          <target state="translated">&lt;code&gt;$source&lt;/code&gt; 圧縮します。成功すると、圧縮データが返されます。それ以外の場合は戻ります</target>
        </trans-unit>
        <trans-unit id="f4abdd87ed061063a95a2ba22a68b1517b4fb78e" translate="yes" xml:space="preserve">
          <source>Compresses and outputs the contents of the &lt;code&gt;$data&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;$data&lt;/code&gt; パラメーターの内容を圧縮して出力します。</target>
        </trans-unit>
        <trans-unit id="bae9119119ae4847de6084005870d7cd27c57d09" translate="yes" xml:space="preserve">
          <source>Compresses and outputs the contents of the &lt;code&gt;$data&lt;/code&gt; parameter. This has the same behaviour as the &lt;code&gt;&lt;a href=&quot;../../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; built-in.</source>
          <target state="translated">&lt;code&gt;$data&lt;/code&gt; パラメーターの内容を圧縮して出力します。これは組み込みの &lt;code&gt;&lt;a href=&quot;../../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; と同じ動作をします。</target>
        </trans-unit>
        <trans-unit id="46ead4045fbadbc2f0b37b6046e5803972459710" translate="yes" xml:space="preserve">
          <source>Compression</source>
          <target state="translated">Compression</target>
        </trans-unit>
        <trans-unit id="61322d91de1a1c9dd976decc2eac0656945186ef" translate="yes" xml:space="preserve">
          <source>Compute $x ** $y.</source>
          <target state="translated">x **$yを計算します。</target>
        </trans-unit>
        <trans-unit id="b0e6b1f79c9f3294396b346171031d6eefb80388" translate="yes" xml:space="preserve">
          <source>Computers are good at being predictable and bad at being random (despite appearances caused by bugs in your programs :-). The</source>
          <target state="translated">コンピュータは、予測可能であることが得意であり、ランダムであることが苦手です(プログラムのバグが原因で出現しているにもかかわらずです :-)。そのため、コンピュータの</target>
        </trans-unit>
        <trans-unit id="08d9ea43c28304526180b5a57915a96d4c9ac81d" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;$x&lt;/code&gt; raised to the power &lt;code&gt;$exponent&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$x&lt;/code&gt; を &lt;code&gt;$exponent&lt;/code&gt; して計算します。</target>
        </trans-unit>
        <trans-unit id="57ac7c8e25d01d0b70814899b6ae00d4e8d209cf" translate="yes" xml:space="preserve">
          <source>Computing MROs can be expensive. The implementation provides a cache, in which you can store a single &lt;code&gt;SV *&lt;/code&gt; , or anything that can be cast to &lt;code&gt;SV *&lt;/code&gt; , such as &lt;code&gt;AV *&lt;/code&gt; . To read your private value, use the macro &lt;code&gt;MRO_GET_PRIVATE_DATA()&lt;/code&gt; , passing it the &lt;code&gt;mro_meta&lt;/code&gt; structure from the stash, and a pointer to your &lt;code&gt;mro_alg&lt;/code&gt; structure:</source>
          <target state="translated">MROの計算は高価になる可能性があります。実装は、単一の &lt;code&gt;SV *&lt;/code&gt; 、または &lt;code&gt;AV *&lt;/code&gt; などの &lt;code&gt;SV *&lt;/code&gt; にキャストできるものを格納できるキャッシュを提供します。プライベート値を読み取るには、マクロ &lt;code&gt;MRO_GET_PRIVATE_DATA()&lt;/code&gt; を使用して、 &lt;code&gt;mro_meta&lt;/code&gt; からmro_meta構造体と、mro_alg構造体へのポインターを &lt;code&gt;mro_alg&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="cb3a0dfbaecfd882d35c67f5f3bd704631194aab" translate="yes" xml:space="preserve">
          <source>Concatenate one or more directory names and a filename to form a complete path ending with a filename</source>
          <target state="translated">1 つ以上のディレクトリ名とファイル名を連結して、ファイル名で終わる完全なパスを形成します。</target>
        </trans-unit>
        <trans-unit id="047b05311f0dc34982a56cd2fb9ad1f922dcbd7c" translate="yes" xml:space="preserve">
          <source>Concatenate one or more directory names and a filename to form a complete path ending with a filename. Resulting paths are &lt;b&gt;relative&lt;/b&gt; by default, but can be forced to be absolute (but avoid this).</source>
          <target state="translated">1つ以上のディレクトリ名とファイル名を連結して、ファイル名で終わる完全なパスを形成します。結果のパスはデフォルトでは&lt;b&gt;相対&lt;/b&gt;パスですが、絶対パスにすることもできます（ただし、これは避けてください）。</target>
        </trans-unit>
        <trans-unit id="f35597adc56e5ce25242327211e537bda9c2f250" translate="yes" xml:space="preserve">
          <source>Concatenate the lists of ops contained directly within two list-type ops, returning the combined list.</source>
          <target state="translated">2つのリスト型OPSの中に直接含まれるOPSのリストを連結し、連結されたリストを返します。</target>
        </trans-unit>
        <trans-unit id="649e67e9503162d4b5271ac24839b4dd127f4a0a" translate="yes" xml:space="preserve">
          <source>Concatenate two or more directory names to form a complete path ending with a directory. But remove the trailing slash from the resulting string, because it doesn't look good, isn't necessary and confuses OS/2. Of course, if this is the root directory, don't cut off the trailing slash :-)</source>
          <target state="translated">2つ以上のディレクトリ名を連結して、ディレクトリで終わる完全なパスを作ります。しかし、結果の文字列から最後のスラッシュを削除すると、見た目が悪くなるし、必要ないし、OS/2を混乱させてしまうからです。もちろん、もしこれがルートディレクトリであれば、末尾のスラッシュを削除する必要はありません。)</target>
        </trans-unit>
        <trans-unit id="55de8a490d5d9aa9964bf82d52f080f49c22f141" translate="yes" xml:space="preserve">
          <source>Concatenate two or more directory names to form a complete path ending with a directory. But remove the trailing slash from the resulting string, because it doesn't look good, isn't necessary and confuses OS2. Of course, if this is the root directory, don't cut off the trailing slash :-)</source>
          <target state="translated">2つ以上のディレクトリ名を連結して、ディレクトリで終わる完全なパスを作ります。しかし、結果の文字列から最後のスラッシュを削除してください。もちろん、これがルートディレクトリであれば、末尾のスラッシュを切り落とさないでください。)</target>
        </trans-unit>
        <trans-unit id="7d067b3996ede67611d936f0cc0594b33d12b143" translate="yes" xml:space="preserve">
          <source>Concatenate two or more directory names to form a path separated by colons (&quot;:&quot;) ending with a directory. Resulting paths are &lt;b&gt;relative&lt;/b&gt; by default, but can be forced to be absolute (but avoid this, see below). Automatically puts a trailing &quot;:&quot; on the end of the complete path, because that's what's done in MacPerl's environment and helps to distinguish a file path from a directory path.</source>
          <target state="translated">2つ以上のディレクトリ名を連結して、ディレクトリで終わるコロン（ &quot;：&quot;）で区切られたパスを形成します。結果のパスはデフォルトでは&lt;b&gt;相対&lt;/b&gt;パスですが、絶対パスにすることもできます（ただし、これは避けてください。以下を参照してください）。完全なパスの最後に自動的に末尾の「：」を付けます。これは、MacPerlの環境で行われ、ファイルパスとディレクトリパスを区別するためです。</target>
        </trans-unit>
        <trans-unit id="1f92bbd0599928bde109c94dcff53b7718e50962" translate="yes" xml:space="preserve">
          <source>Concatenates a list of directory specifications with a filename specification to build a path.</source>
          <target state="translated">ディレクトリ指定のリストとファイル名指定を連結してパスを構築します。</target>
        </trans-unit>
        <trans-unit id="443b92cba56de5e426bb70ed2661bc12a7f0aa5f" translate="yes" xml:space="preserve">
          <source>Concatenates a list of file specifications, and returns the result as a native directory specification unless the Unix filename reporting feature has been enabled. No check is made for &quot;impossible&quot; cases (e.g. elements other than the first being absolute filespecs).</source>
          <target state="translated">ファイル仕様のリストを連結し、Unix のファイル名報告機能が有効になっていない限り、結果をネイティブディレクトリ仕様として返します。不可能」な場合 (例えば、最初の要素以外の要素が絶対ファイル仕様であるなど)のチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="a1064ed1ab12c5551a61949efb23c2a0fe5e1b5a" translate="yes" xml:space="preserve">
          <source>Concatenates all files mentioned on command line to STDOUT.</source>
          <target state="translated">コマンドラインで指定された全てのファイルをSTDOUTに連結します。</target>
        </trans-unit>
        <trans-unit id="aeaf86da2ac135282bf22834043d6e62fbe3a826" translate="yes" xml:space="preserve">
          <source>Concatenates the &lt;code&gt;NUL&lt;/code&gt; -terminated string onto the end of the string which is in the SV. If the SV has the UTF-8 status set, then the bytes appended should be valid UTF-8. Handles 'get' magic, but not 'set' magic. See &lt;code&gt;sv_catpv_mg&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;NUL&lt;/code&gt; で終了する文字列をSV内の文字列の最後に連結します。SVにUTF-8ステータスが設定されている場合、追加されるバイトは有効なUTF-8である必要があります。「取得」マジックは処理しますが、「設定」マジックは処理しません。 &lt;code&gt;sv_catpv_mg&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="14b45eaa62bb9cbc2fd55f55bbeff1b25f09af1b" translate="yes" xml:space="preserve">
          <source>Concatenates the &lt;code&gt;NUL&lt;/code&gt; -terminated string onto the end of the string which is in the SV. If the SV has the UTF-8 status set, then the bytes appended should be valid UTF-8. If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;SV_SMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_set&lt;/code&gt; on the modified SV if appropriate.</source>
          <target state="translated">&lt;code&gt;NUL&lt;/code&gt; で終了する文字列をSV内の文字列の最後に連結します。SVにUTF-8ステータスが設定されている場合、追加されるバイトは有効なUTF-8である必要があります。場合は &lt;code&gt;flags&lt;/code&gt; あり &lt;code&gt;SV_SMAGIC&lt;/code&gt; のビットがセットされて、します &lt;code&gt;mg_set&lt;/code&gt; 修正SV適切な場合に。</target>
        </trans-unit>
        <trans-unit id="eb1ee548c525e9ae72200cea308c51a15c04e05b" translate="yes" xml:space="preserve">
          <source>Concatenates the string from SV &lt;code&gt;ssv&lt;/code&gt; onto the end of the string in SV &lt;code&gt;dsv&lt;/code&gt; . If &lt;code&gt;ssv&lt;/code&gt; is null, does nothing; otherwise modifies only &lt;code&gt;dsv&lt;/code&gt; . Handles 'get' magic on both SVs, but no 'set' magic. See &lt;code&gt;sv_catsv_mg&lt;/code&gt; and &lt;code&gt;sv_catsv_nomg&lt;/code&gt; .</source>
          <target state="translated">連結SVから文字列 &lt;code&gt;ssv&lt;/code&gt; SVの中の文字列の最後に &lt;code&gt;dsv&lt;/code&gt; 。 &lt;code&gt;ssv&lt;/code&gt; がnullの場合、何もしません。それ以外の場合は、 &lt;code&gt;dsv&lt;/code&gt; のみを変更します。両方のSVで「取得」マジックを処理しますが、「設定」マジックは処理しません。 &lt;code&gt;sv_catsv_mg&lt;/code&gt; および &lt;code&gt;sv_catsv_nomg&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="638b5971cabc9806aa9868b5283e2415ea8bede6" translate="yes" xml:space="preserve">
          <source>Concatenates the string from SV &lt;code&gt;ssv&lt;/code&gt; onto the end of the string in SV &lt;code&gt;dsv&lt;/code&gt; . If &lt;code&gt;ssv&lt;/code&gt; is null, does nothing; otherwise modifies only &lt;code&gt;dsv&lt;/code&gt; . If &lt;code&gt;flags&lt;/code&gt; include &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, will call &lt;code&gt;mg_get&lt;/code&gt; on both SVs if appropriate. If &lt;code&gt;flags&lt;/code&gt; include &lt;code&gt;SV_SMAGIC&lt;/code&gt; , &lt;code&gt;mg_set&lt;/code&gt; will be called on the modified SV afterward, if appropriate. &lt;code&gt;sv_catsv&lt;/code&gt; , &lt;code&gt;sv_catsv_nomg&lt;/code&gt; , and &lt;code&gt;sv_catsv_mg&lt;/code&gt; are implemented in terms of this function.</source>
          <target state="translated">連結SVから文字列 &lt;code&gt;ssv&lt;/code&gt; SVの中の文字列の最後に &lt;code&gt;dsv&lt;/code&gt; 。 &lt;code&gt;ssv&lt;/code&gt; がnullの場合、何もしません。それ以外の場合は、 &lt;code&gt;dsv&lt;/code&gt; のみを変更します。場合は &lt;code&gt;flags&lt;/code&gt; 含ま &lt;code&gt;SV_GMAGIC&lt;/code&gt; ビットセットを、呼び出す &lt;code&gt;mg_get&lt;/code&gt; を適切な場合には、両方のSVに。場合は &lt;code&gt;flags&lt;/code&gt; 含ま &lt;code&gt;SV_SMAGIC&lt;/code&gt; を、 &lt;code&gt;mg_set&lt;/code&gt; が適切であれば、後から修正SVに呼び出されます。 &lt;code&gt;sv_catsv&lt;/code&gt; 、 &lt;code&gt;sv_catsv_nomg&lt;/code&gt; 、および &lt;code&gt;sv_catsv_mg&lt;/code&gt; は、この関数の観点から実装されています。</target>
        </trans-unit>
        <trans-unit id="32fe76b48251f7900129b9480f9210b340fdc9af" translate="yes" xml:space="preserve">
          <source>Concatenates the string onto the end of the string which is in the SV. The &lt;code&gt;len&lt;/code&gt; indicates number of bytes to copy.</source>
          <target state="translated">SVにある文字列の末尾に文字列を連結します。 &lt;code&gt;len&lt;/code&gt; はコピーするバイト数を示します。</target>
        </trans-unit>
        <trans-unit id="9552a0de5c0babf6573b77f8cdd2583744fe375e" translate="yes" xml:space="preserve">
          <source>Concatenates the string onto the end of the string which is in the SV. The &lt;code&gt;len&lt;/code&gt; indicates number of bytes to copy. If the SV has the UTF-8 status set, then the bytes appended should be valid UTF-8. Handles 'get' magic, but not 'set' magic. See &lt;code&gt;sv_catpvn_mg&lt;/code&gt; .</source>
          <target state="translated">SVにある文字列の末尾に文字列を連結します。 &lt;code&gt;len&lt;/code&gt; はコピーするバイト数を示します。SVにUTF-8ステータスが設定されている場合、追加されるバイトは有効なUTF-8である必要があります。「取得」マジックは処理しますが、「設定」マジックは処理しません。 &lt;code&gt;sv_catpvn_mg&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="cdcfedf7534d333df8380db86be3ac2ea169364e" translate="yes" xml:space="preserve">
          <source>Conceptually, the easiest way to count the lines in a file is to simply read them and count them:</source>
          <target state="translated">概念的には、ファイルの行を読み込んで数えるのが一番簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="0dbde46110575d19c57e331505cceacbb06fd5c7" translate="yes" xml:space="preserve">
          <source>Conditional Operator</source>
          <target state="translated">条件付き演算子</target>
        </trans-unit>
        <trans-unit id="80a3a5f034865959dc043303f8d87089be9bec1e" translate="yes" xml:space="preserve">
          <source>Conditional and looping constructs</source>
          <target state="translated">条件付き構文とループ構文</target>
        </trans-unit>
        <trans-unit id="96632c17c857e0c02d178649142fafe7584b5abf" translate="yes" xml:space="preserve">
          <source>Conditional expression. Matches &lt;code&gt;yes-pattern&lt;/code&gt; if &lt;code&gt;condition&lt;/code&gt; yields a true value, matches &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no-pattern&lt;/a&gt;&lt;/code&gt; otherwise. A missing pattern always matches.</source>
          <target state="translated">条件式。マッチの &lt;code&gt;yes-pattern&lt;/code&gt; ならば &lt;code&gt;condition&lt;/code&gt; 真の値を返し、一致していない &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no-pattern&lt;/a&gt;&lt;/code&gt; そう。欠落したパターンは常に一致します。</target>
        </trans-unit>
        <trans-unit id="e428c12fd355944b5e6b7023bd80dd3c17b5aee5" translate="yes" xml:space="preserve">
          <source>Conditional expressions</source>
          <target state="translated">条件式</target>
        </trans-unit>
        <trans-unit id="a343c81c0a2492332b5fb3f41392ce89176105c4" translate="yes" xml:space="preserve">
          <source>Conditional tests</source>
          <target state="translated">条件付きテスト</target>
        </trans-unit>
        <trans-unit id="cf037e3922672487abb4fdf8a9fb64c629078717" translate="yes" xml:space="preserve">
          <source>Conditionally does &lt;code&gt;OpMORESIB_set&lt;/code&gt; or &lt;code&gt;OpLASTSIB_set&lt;/code&gt; depending on whether sib is non-null. For a higher-level interface, see &lt;code&gt;op_sibling_splice&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;OpMORESIB_set&lt;/code&gt; nullでないかどうかに応じて、条件付きでOpMORESIB_setまたは &lt;code&gt;OpLASTSIB_set&lt;/code&gt; を実行します。より上位のインターフェースについては、 &lt;code&gt;op_sibling_splice&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="ecd4bd981dd9c138dc910d68320acc6b8da803ca" translate="yes" xml:space="preserve">
          <source>Config - access Perl configuration information</source>
          <target state="translated">Config-Perl の設定情報にアクセスする</target>
        </trans-unit>
        <trans-unit id="fbb49b6e5c194d0312a905696c20f6b5d8a43c67" translate="yes" xml:space="preserve">
          <source>Config Variables</source>
          <target state="translated">設定変数</target>
        </trans-unit>
        <trans-unit id="2c6df16e95af35ad3cf55abb04956aab698aea9b" translate="yes" xml:space="preserve">
          <source>Config.pm</source>
          <target state="translated">Config.pm</target>
        </trans-unit>
        <trans-unit id="3784c094667e63aa78e7304ec87ad01e622ad79e" translate="yes" xml:space="preserve">
          <source>Config.sys</source>
          <target state="translated">Config.sys</target>
        </trans-unit>
        <trans-unit id="61386747172506a6ac768b51dbad3d57554bb149" translate="yes" xml:space="preserve">
          <source>Config::Extensions</source>
          <target state="translated">Config::Extensions</target>
        </trans-unit>
        <trans-unit id="fb7f1d1b07ade815b9ca8129a9e4d8f0870938dc" translate="yes" xml:space="preserve">
          <source>Configurable Options</source>
          <target state="translated">設定可能なオプション</target>
        </trans-unit>
        <trans-unit id="56f4add64bfc676813ad28c07cc79f57bf4381eb" translate="yes" xml:space="preserve">
          <source>Configurable error handling can be very useful to your users. Consider offering a choice of levels for warning and debug messages, an option to send messages to a separate file, a way to specify an error-handling routine, or other such features. Be sure to default all these options to the commonest use.</source>
          <target state="translated">設定可能なエラー処理は、ユーザーにとって非常に便利です。警告メッセージとデバッグメッセージのレベルの選択、メッセージを別のファイルに送信するオプション、エラー処理ルーチンを指定する方法、またはその他の機能を提供することを検討してください。これらのオプションはすべて、最も一般的な使用法をデフォルトにするようにしてください。</target>
        </trans-unit>
        <trans-unit id="81fb8746ddaba4745cb47bc6c868c238d3f12698" translate="yes" xml:space="preserve">
          <source>Configuration Variables or Methods</source>
          <target state="translated">設定変数またはメソッド</target>
        </trans-unit>
        <trans-unit id="d2fcd0c469689696cdc57b270bd37400e3e0e6c1" translate="yes" xml:space="preserve">
          <source>Configuration errors and errors in the option definitions are signalled using die() and will terminate the calling program unless the call to Getopt::Long::GetOptions() was embedded in &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt; { ...
}&lt;/code&gt; , or die() was trapped using &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; .</source>
          <target state="translated">構成エラーおよびオプション定義のエラーは、die（）を使用して通知され、Getopt :: Long :: GetOptions（）への呼び出しが &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt; { ... }&lt;/code&gt; に埋め込まれていないか、die（）がトラップされない限り、呼び出しプログラムを終了します &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01782ddc9fc1147edd83eb2ff115b31fada6fafa" translate="yes" xml:space="preserve">
          <source>Configuration for individual distributions (</source>
          <target state="translated">個別分布の設定 (</target>
        </trans-unit>
        <trans-unit id="620eedd56ce9ab6e57edf826ebebcc6cc23b9756" translate="yes" xml:space="preserve">
          <source>Configuration for individual distributions (_Distroprefs_)</source>
          <target state="translated">個別ディストリビューションの設定 (_Distroprefs_)</target>
        </trans-unit>
        <trans-unit id="5394ae422bdb720639203760041881561ff41485" translate="yes" xml:space="preserve">
          <source>Configuration options can be passed to the constructor:</source>
          <target state="translated">コンストラクタに設定オプションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="38b23d1375544f4a68ea9228188041f47459e054" translate="yes" xml:space="preserve">
          <source>Configuration variables</source>
          <target state="translated">設定変数</target>
        </trans-unit>
        <trans-unit id="792c81a4cfdcb5b45d688cb03c2fd2e816f86d44" translate="yes" xml:space="preserve">
          <source>Configure</source>
          <target state="translated">Configure</target>
        </trans-unit>
        <trans-unit id="5319105d548748be6bfc04e58d097068e24ec3c4" translate="yes" xml:space="preserve">
          <source>Configure Perl on OS/390</source>
          <target state="translated">OS/390でPerlを設定する</target>
        </trans-unit>
        <trans-unit id="8c3578dc7c3bfda9e6cafe0a3dcc7133abe34a4d" translate="yes" xml:space="preserve">
          <source>Configure and perl need a way to invoke a C preprocessor. I have created a simple cover for cc which does the right thing. Without this, Configure will create its own wrapper which works, but it doesn't handle some of the command line arguments that perl will throw at it.</source>
          <target state="translated">設定とperlは、Cのプリプロセッサを呼び出す方法が必要です。私は正しいことをするcc用のシンプルなカバーを作りました。これがないと、Configure は独自のラッパーを作成して動作しますが、perl が投げつけるコマンドライン引数のいくつかを処理できません。</target>
        </trans-unit>
        <trans-unit id="42f3effdfaee1be1f099b1b5ad94e5c21896a110" translate="yes" xml:space="preserve">
          <source>Configure notes: This function is called 'Perl_signbit' instead of a plain 'signbit' because it is easy to imagine a system having a signbit() function or macro that doesn't happen to work with our particular choice of NVs. We shouldn't just re-#define signbit as Perl_signbit and expect the standard system headers to be happy. Also, this is a no-context function (no pTHX_) because Perl_signbit() is usually re-#defined in perl.h as a simple macro call to the system's signbit(). Users should just always call Perl_signbit().</source>
          <target state="translated">ノートを設定します。この関数は、単純な 'signbit' の代わりに 'Perl_signbit' と呼ばれていますが、これは、私たちが選択した特定の NV で動作しない signbit()関数やマクロを持っているシステムを容易に想像できるからです。signbit を Perl_signbit として再定義して、標準のシステムヘッダが満足することを期待してはいけません。また、Perl_signbit()は通常 perl.h でシステムの signbit()への単純なマクロ呼び出しとして再定義されているので、これはノーコンテキスト関数です (pTHX_もありません)。ユーザは常にPerl_signbit()を呼び出すべきです。</target>
        </trans-unit>
        <trans-unit id="4f6173a649f1483a99a4687a3ffadbcdca70587d" translate="yes" xml:space="preserve">
          <source>Configure-time Options for Perl on Cygwin</source>
          <target state="translated">CygwinでPerlの時間オプションを設定する</target>
        </trans-unit>
        <trans-unit id="9df8ff6ed6cb175291b798f1b94a9c669317082c" translate="yes" xml:space="preserve">
          <source>Configured this way, single-character options can be bundled but long options &lt;b&gt;must&lt;/b&gt; always start with a double dash &lt;code&gt;--&lt;/code&gt; to avoid ambiguity. For example, when &lt;code&gt;vax&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; are all valid options,</source>
          <target state="translated">このように構成された、単一文字のオプションを同梱することができますが、長いオプションは、&lt;b&gt;必要があり&lt;/b&gt;、常にダブルダッシュで始まる &lt;code&gt;--&lt;/code&gt; あいまいさを避けるために。たとえば、 &lt;code&gt;vax&lt;/code&gt; 、 &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; および &lt;code&gt;x&lt;/code&gt; がすべて有効なオプションである場合、</target>
        </trans-unit>
        <trans-unit id="95e3547b156067af12afba08b6daf72fe4ff1b22" translate="yes" xml:space="preserve">
          <source>Configuring Getopt::Long</source>
          <target state="translated">Getopt::Long の設定</target>
        </trans-unit>
        <trans-unit id="205f634664a81d583aebe4d32b4cfaa368eaa173" translate="yes" xml:space="preserve">
          <source>Configuring lynx or ncftp for going through a firewall</source>
          <target state="translated">ファイアウォールを通過するための lynx または ncftp の設定</target>
        </trans-unit>
        <trans-unit id="a90ca9c9438d0e03c655e7e421109dc9a2965820" translate="yes" xml:space="preserve">
          <source>Conflicting storage orders make an utter mess out of the numbers. If a little-endian host (Intel, VAX) stores 0x12345678 (305419896 in decimal), a big-endian host (Motorola, Sparc, PA) reads it as 0x78563412 (2018915346 in decimal). Alpha and MIPS can be either: Digital/Compaq used/uses them in little-endian mode; SGI/Cray uses them in big-endian mode. To avoid this problem in network (socket) connections use the &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; formats &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; , the &quot;network&quot; orders. These are guaranteed to be portable.</source>
          <target state="translated">競合するストレージの注文は、数値を完全に混乱させます。リトルエンディアンホスト（Intel、VAX）が0x12345678（10進数で305419896）を格納している場合、ビッグエンディアンホスト（Motorola、Sparc、PA）はそれを0x78563412（10進数で2018915346）として読み取ります。AlphaとMIPSは次のいずれかです。デジタル/コンパックが使用/リトルエンディアンモードで使用。SGI / Crayはビッグエンディアンモードでそれらを使用します。ネットワーク（ソケット）接続でのこの問題を回避するには、 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; フォーマット &lt;code&gt;n&lt;/code&gt; および &lt;code&gt;N&lt;/code&gt; を使用します。これは、「ネットワーク」の順序です。これらは移植可能であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="7c5523655003f964e64fb217f9f8e4a760dcd771" translate="yes" xml:space="preserve">
          <source>Conflicts between parameters LIB, PREFIX and the various INSTALL* arguments are resolved so that:</source>
          <target state="translated">LIB、PREFIX、および様々なINSTALL*引数間の競合が解決されているので、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d58273d316d0bc21f48ecd5b6254bb29f9f6bf8e" translate="yes" xml:space="preserve">
          <source>Confused yet? It's time for an example program to show some of the things we've covered. This program finds prime numbers using threads.</source>
          <target state="translated">まだ混乱していますか?今まで説明してきたことのいくつかを示す例題プログラムの時間です。このプログラムはスレッドを使って素数を見つけます。</target>
        </trans-unit>
        <trans-unit id="e96e2cb50db9a42b686132ae3630295f7ba8934b" translate="yes" xml:space="preserve">
          <source>Connecting to the server is only the first part of the process: once you have the connection, you have to use the server's language. Each server on the network has its own little command language that it expects as input. The string that we send to the server starting with &quot;GET&quot; is in HTTP syntax. In this case, we simply request each specified document. Yes, we really are making a new connection for each document, even though it's the same host. That's the way you always used to have to speak HTTP. Recent versions of web browsers may request that the remote server leave the connection open a little while, but the server doesn't have to honor such a request.</source>
          <target state="translated">サーバに接続することはプロセスの最初の部分に過ぎません。ネットワーク上の各サーバは、入力として期待される独自の小さなコマンド言語を持っています。GET &quot;で始まる文字列はHTTP構文でサーバに送信します。この場合、私たちは単に指定された各ドキュメントを要求しているだけです。そう、同じホストであっても、それぞれのドキュメントに対して新しい接続を行っているのです。これが今までのHTTPの話し方です。最近のウェブブラウザのバージョンでは、リモートサーバが接続を少しの間開いたままにしておくように要求するかもしれませんが、サーバはそのような要求を尊重する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1e64457037d72f3af7e4c98e763af1778685b4a7" translate="yes" xml:space="preserve">
          <source>Consequently, if the code in the</source>
          <target state="translated">その結果、もし</target>
        </trans-unit>
        <trans-unit id="2aebd1c0023adb488842327316cfbc056a8738a1" translate="yes" xml:space="preserve">
          <source>Consider a character, say &lt;code&gt;H&lt;/code&gt; . It could appear with various marks around it, such as an acute accent, or a circumflex, or various hooks, circles, arrows,</source>
          <target state="translated">文字を考えて、 &lt;code&gt;H&lt;/code&gt; と言います。鋭いアクセント、サーカムフレックス、さまざまなフック、円、矢印など、周囲にさまざまなマークが表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="f87b1aebc18642da43916d9c7c0029ba1587fd12" translate="yes" xml:space="preserve">
          <source>Consider a function foo() in package pkg compiled outside a compartment but shared with it. Assume the compartment has a root package called 'Root'. If foo() contains an eval statement like eval '$foo = 1' then, normally, $pkg::foo will be set to 1. If foo() is called from the compartment (by whatever means) then instead of setting $pkg::foo, the eval will actually set $Root::pkg::foo.</source>
          <target state="translated">コンパートメントの外部でコンパイルされた pkg パッケージの中の関数 foo()が、コンパートメントと共有されているとします。コンパートメントには 'Root' というルートパッケージがあるとします。もし foo()に eval '$foo=1' のような eval 文が含まれている場合、通常は $pkg::foo に 1 が設定されます。 もし foo()がコンパートメントから (どのような方法で)コールされた場合、$pkg::foo を設定するのではなく、実際には $Root::pkg::foo を設定することになります。</target>
        </trans-unit>
        <trans-unit id="fa0726375d47145ef9cbf1c119c720175b5cdb39" translate="yes" xml:space="preserve">
          <source>Consider always blessing objects in CLASSNAMEs that are mixed case. Namespaces with all lowercase names are considered reserved for Perl pragmata. Builtin types have all uppercase names. To prevent confusion, you may wish to avoid such package names as well. Make sure that CLASSNAME is a true value.</source>
          <target state="translated">大文字と小文字が混在するCLASSNAMEのオブジェクトを常に祝福することを考慮してください。すべての小文字の名前を持つ名前空間は、Perl のプラグマタのために予約されていると見なされます。ビルトイン型はすべて大文字の名前を持っています。混乱を防ぐために、このようなパッケージ名も避けた方がよいでしょう。CLASSNAMEが真の値であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="54bd3e39ecc1dc0a3103a2a4bb188aab06a6068e" translate="yes" xml:space="preserve">
          <source>Consider arguments as file names; no search in directories will be performed.</source>
          <target state="translated">引数をファイル名とみなし、ディレクトリ内の検索は行われません。</target>
        </trans-unit>
        <trans-unit id="1b1d13cd5ce92e946f7ab5b33dc6419aff0f850f" translate="yes" xml:space="preserve">
          <source>Consider that &quot;division by zero&quot; of Encode :)</source>
          <target state="translated">Encodeの「ゼロによる除算」について考えてみましょう :)</target>
        </trans-unit>
        <trans-unit id="42926455b13e587b6e93dd752aad04492e788722" translate="yes" xml:space="preserve">
          <source>Consider the Perl code below</source>
          <target state="translated">以下のPerlのコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="010e07e2525e9ccf7d06cb1256121da84a80d2b8" translate="yes" xml:space="preserve">
          <source>Consider the autogenerated files as skeletons only, you may invent better interfaces than what h2xs could guess.</source>
          <target state="translated">自動生成されたファイルをスケルトンとしてのみ考慮してください。</target>
        </trans-unit>
        <trans-unit id="8650ada785e6a05ab5925372ee6ad4e84e025768" translate="yes" xml:space="preserve">
          <source>Consider the following Perl code:</source>
          <target state="translated">以下のPerlのコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="7f74e12aabb1877452a7d53cc071e21357b26c18" translate="yes" xml:space="preserve">
          <source>Consider the following pattern. The numbers underneath show in which group the captured content will be stored.</source>
          <target state="translated">次のパターンを考えてみましょう。下の数字は、キャプチャしたコンテンツがどのグループに保存されるかを示しています。</target>
        </trans-unit>
        <trans-unit id="5599b31813d52e72ab7b0f81e5b0ee2cd936fffb" translate="yes" xml:space="preserve">
          <source>Consider the following scenario. You have a DBM database that you need to share with a third-party C application. The C application assumes that</source>
          <target state="translated">次のようなシナリオを考えてみましょう。あなたは、サードパーティのCアプリケーションと共有する必要のあるDBMデータベースを持っています。C アプリケーションは次のように想定しています。</target>
        </trans-unit>
        <trans-unit id="8fd75f493422859997cd7850cec39135120cb65b" translate="yes" xml:space="preserve">
          <source>Consider the implications.</source>
          <target state="translated">その意味を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="72c370504fc887121d33e7c91d4e60dee9fc8d48" translate="yes" xml:space="preserve">
          <source>Consider the module &lt;code&gt;MyMod::Abc&lt;/code&gt; below.</source>
          <target state="translated">以下のモジュール &lt;code&gt;MyMod::Abc&lt;/code&gt; 考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="91193a63d32f0407e30025add9e80a60522f7554" translate="yes" xml:space="preserve">
          <source>Consider these functions: &lt;code&gt;getusers&lt;/code&gt; returns a list of users somehow, and then &lt;code&gt;main&lt;/code&gt; throws away the first user on the list and prints the rest:</source>
          <target state="translated">これらの関数を考えてみましょう： &lt;code&gt;getusers&lt;/code&gt; は何とかユーザーのリストを返し、その後、 &lt;code&gt;main&lt;/code&gt; 、リスト上の最初のユーザーを捨て、残りを出力します。</target>
        </trans-unit>
        <trans-unit id="a6af64455c7f7fc0377e14c06fd26c8d88bd4457" translate="yes" xml:space="preserve">
          <source>Consider this carefully</source>
          <target state="translated">慎重に検討してください。</target>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
          <target state="translated">この例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="bfa3c3c6eb24f57753daa498c1da469254839e82" translate="yes" xml:space="preserve">
          <source>Consider this function:</source>
          <target state="translated">この関数を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="8941a9b985d7af8702f49a4f16ae94cca0faaad4" translate="yes" xml:space="preserve">
          <source>Consider this line:</source>
          <target state="translated">この線を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="e6c30ae9cfc668295698d4bf00794eb1d360161b" translate="yes" xml:space="preserve">
          <source>Consider this pattern:</source>
          <target state="translated">このパターンを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="1933a50a57bf352434dc1e181b868210ee85c8c1" translate="yes" xml:space="preserve">
          <source>Consider this rather facetious example, where we have used an XS version of the call_Subtract example above inside a destructor:</source>
          <target state="translated">上の call_Subtract の XS バージョンをデストラクタの中で使用した例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="6cb9a94e2bea8da922c3c19cf684a0e47677d4e9" translate="yes" xml:space="preserve">
          <source>Consider this script, which has an error you may not notice immediately.</source>
          <target state="translated">すぐには気づかないかもしれないエラーが出ているこのスクリプトを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="221f972e292aedaaa9907f3e013cc1a6d1499997" translate="yes" xml:space="preserve">
          <source>Consider this section as a guideline only, some other options of h2xs may better suit your needs.</source>
          <target state="translated">このセクションはガイドラインとしてのみ考慮し、他のいくつかのh2xsのオプションは、あなたのニーズに適しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="ef89846ebcc9e55f8e16c8d6eeaf74751bcc0834" translate="yes" xml:space="preserve">
          <source>Consider two possible matches, &lt;code&gt;AB&lt;/code&gt; and &lt;code&gt;A'B'&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;A'&lt;/code&gt; are substrings which can be matched by &lt;code&gt;S&lt;/code&gt; , &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;B'&lt;/code&gt; are substrings which can be matched by &lt;code&gt;T&lt;/code&gt; .</source>
          <target state="translated">二つの可能なマッチ、検討 &lt;code&gt;AB&lt;/code&gt; と &lt;code&gt;A'B'&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; 及び &lt;code&gt;A'&lt;/code&gt; することによって適合させることができるストリングれる &lt;code&gt;S&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; 及び &lt;code&gt;B'&lt;/code&gt; によって一致させることができるストリングである &lt;code&gt;T&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9492d2cabe7fd9e4932b42a71ed433789fc97e73" translate="yes" xml:space="preserve">
          <source>Consider using &quot;real&quot; multidimensional arrays as described in &lt;a href=&quot;perllol&quot;&gt;perllol&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perllol&quot;&gt;perllolで&lt;/a&gt;説明されている「実際の」多次元配列の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="88bf0b769dc7bb2c0aaed54218c7a09d588e237d" translate="yes" xml:space="preserve">
          <source>Consider what happens during execution of the BEGIN block. At this point the BEGIN block has already been compiled, but the body of &lt;code&gt;foo()&lt;/code&gt; is still being compiled. The new value of &lt;code&gt;$^H&lt;/code&gt; will therefore be visible only while the body of &lt;code&gt;foo()&lt;/code&gt; is being compiled.</source>
          <target state="translated">BEGINブロックの実行中に何が起こるかを考えます。この時点で、BEGINブロックはすでにコンパイルされていますが、 &lt;code&gt;foo()&lt;/code&gt; の本体はまだコンパイルされています。したがって、 &lt;code&gt;$^H&lt;/code&gt; の新しい値は、 &lt;code&gt;foo()&lt;/code&gt; の本体がコンパイルされている間のみ表示されます。</target>
        </trans-unit>
        <trans-unit id="75e291169a2ebb63c935a5de7382990c0513d618" translate="yes" xml:space="preserve">
          <source>Consider:</source>
          <target state="translated">Consider:</target>
        </trans-unit>
        <trans-unit id="83e396f6992f0832c8075c73a610b8e2aaff7469" translate="yes" xml:space="preserve">
          <source>Considerations for module design and coding:</source>
          <target state="translated">モジュール設計とコーディングの検討。</target>
        </trans-unit>
        <trans-unit id="5413348d3aaa513d685bd38624f77e878e74a24a" translate="yes" xml:space="preserve">
          <source>Consistent naming of subroutines or methods</source>
          <target state="translated">サブルーチンやメソッドの一貫したネーミング</target>
        </trans-unit>
        <trans-unit id="2d686acf592debeada13314ea153c3c8cc7487e9" translate="yes" xml:space="preserve">
          <source>Constant Folding</source>
          <target state="translated">一定の折りたたみ</target>
        </trans-unit>
        <trans-unit id="20e7a47ab29e19ba135c447b4536a0bd6e1d82dd" translate="yes" xml:space="preserve">
          <source>Constant Functions</source>
          <target state="translated">定数関数</target>
        </trans-unit>
        <trans-unit id="d83ebf1e43cbbe5eb7aa831bfb0f3e3251894c92" translate="yes" xml:space="preserve">
          <source>Constant Interface</source>
          <target state="translated">一定のインターフェイス</target>
        </trans-unit>
        <trans-unit id="05b0c81a6abce35ba0658d6d8b023f51626d6394" translate="yes" xml:space="preserve">
          <source>Constant subs can be created with &lt;code&gt;newCONSTSUB&lt;/code&gt; or as described in &lt;a href=&quot;perlsub#Constant-Functions&quot;&gt;Constant Functions in perlsub&lt;/a&gt;.</source>
          <target state="translated">定数サブは、 &lt;code&gt;newCONSTSUB&lt;/code&gt; を使用して、または&lt;a href=&quot;perlsub#Constant-Functions&quot;&gt;perlsubの定数関数で&lt;/a&gt;説明されているように作成できます。</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="9e611a824a8183e220d4a7c0d0aa3bafaf2b538a" translate="yes" xml:space="preserve">
          <source>Constants belong to the package they are defined in. To refer to a constant defined in another package, specify the full package name, as in &lt;code&gt;Some::Package::CONSTANT&lt;/code&gt; . Constants may be exported by modules, and may also be called as either class or instance methods, that is, as &lt;code&gt;Some::Package-&amp;gt;CONSTANT&lt;/code&gt; or as &lt;code&gt;$obj-&amp;gt;CONSTANT&lt;/code&gt; where &lt;code&gt;$obj&lt;/code&gt; is an instance of &lt;code&gt;Some::Package&lt;/code&gt; . Subclasses may define their own constants to override those in their base class.</source>
          <target state="translated">定数は、それらが定義されているパッケージに属します。別のパッケージで定義されている定数を参照するには、 &lt;code&gt;Some::Package::CONSTANT&lt;/code&gt; ように完全なパッケージ名を指定します。定数はモジュールによってエクスポートされ、クラスまたはインスタンスメソッドとして、つまり、 &lt;code&gt;Some::Package-&amp;gt;CONSTANT&lt;/code&gt; または &lt;code&gt;$obj-&amp;gt;CONSTANT&lt;/code&gt; として呼び出される場合があります。 &lt;code&gt;$obj&lt;/code&gt; は &lt;code&gt;Some::Package&lt;/code&gt; インスタンスです。サブクラスは独自の定数を定義して、基本クラスの定数をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="a21cfbc2db87f9182c549bff7c8f35745bf20234" translate="yes" xml:space="preserve">
          <source>Constants defined using this module cannot be interpolated into strings like variables. However, concatenation works just fine:</source>
          <target state="translated">このモジュールを使って定義された定数は、変数のような文字列に補間することはできません。しかし、連結は問題なく動作します。</target>
        </trans-unit>
        <trans-unit id="8ece936e7325f2407cd17ba720f075223bee4d90" translate="yes" xml:space="preserve">
          <source>Constants for Locale codes</source>
          <target state="translated">ロケールコード用の定数</target>
        </trans-unit>
        <trans-unit id="90018db3a64f1b35ef89d41c0084cc18166e6bd9" translate="yes" xml:space="preserve">
          <source>Constants giving the special &lt;code&gt;AF_INET6&lt;/code&gt; addresses for wildcard and local loopback.</source>
          <target state="translated">ワイルドカードおよびローカルループバック用の特別な &lt;code&gt;AF_INET6&lt;/code&gt; アドレスを与える定数。</target>
        </trans-unit>
        <trans-unit id="3f844ade6411f17a07d09e25894b5b9acfe42b33" translate="yes" xml:space="preserve">
          <source>Constants giving the special &lt;code&gt;AF_INET&lt;/code&gt; addresses for wildcard, broadcast, local loopback, and invalid addresses.</source>
          <target state="translated">ワイルドカード、ブロードキャスト、ローカルループバック、および無効なアドレスに特別な &lt;code&gt;AF_INET&lt;/code&gt; アドレスを与える定数。</target>
        </trans-unit>
        <trans-unit id="7f1778f60074f1115e51de3d87a3332a8d7fc830" translate="yes" xml:space="preserve">
          <source>Constants may be lists of more (or less) than one value. A constant with no values evaluates to &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in scalar context. Note that constants with more than one value do</source>
          <target state="translated">定数は、1つより多い（または少ない）値のリストです。値のない定数は、スカラーコンテキストでは &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; と評価されます。複数の値を持つ定数は</target>
        </trans-unit>
        <trans-unit id="355a3d53a7e14f7a729e8f91686b85505d33df33" translate="yes" xml:space="preserve">
          <source>Construct a complete filespec.</source>
          <target state="translated">完全なファイルスペックを構築します。</target>
        </trans-unit>
        <trans-unit id="aec9f3529c9af4370344830a20d26a1ac2ddabe7" translate="yes" xml:space="preserve">
          <source>Construct and return cache object.</source>
          <target state="translated">キャッシュオブジェクトを構築して返します。</target>
        </trans-unit>
        <trans-unit id="da33e1b7e0c4eae1911ee4a15280f0990e1a6115" translate="yes" xml:space="preserve">
          <source>Construction</source>
          <target state="translated">Construction</target>
        </trans-unit>
        <trans-unit id="0c9d593aa97f6e3f26bb7e4cf664176f5ffd4019" translate="yes" xml:space="preserve">
          <source>Construction Methods</source>
          <target state="translated">施工方法</target>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="translated">Constructor</target>
        </trans-unit>
        <trans-unit id="ef269264e27df02b9462bb6740ca823b7e335569" translate="yes" xml:space="preserve">
          <source>Constructor Options</source>
          <target state="translated">コンストラクタオプション</target>
        </trans-unit>
        <trans-unit id="94b976a5ab3f62f6c26557a2c4dbf4bbae664372" translate="yes" xml:space="preserve">
          <source>Constructor and Tailoring</source>
          <target state="translated">コンストラクタとテーラーリング</target>
        </trans-unit>
        <trans-unit id="60a5c966a71a24034f9238685790a526710ef75d" translate="yes" xml:space="preserve">
          <source>Constructors</source>
          <target state="translated">Constructors</target>
        </trans-unit>
        <trans-unit id="d746fdc33e3789e1ca29174d30fb76d7df4e6835" translate="yes" xml:space="preserve">
          <source>Constructs a state op (COP). The state op is normally a &lt;code&gt;nextstate&lt;/code&gt; op, but will be a &lt;code&gt;dbstate&lt;/code&gt; op if debugging is enabled for currently-compiled code. The state op is populated from &lt;code&gt;PL_curcop&lt;/code&gt; (or &lt;code&gt;PL_compiling&lt;/code&gt; ). If</source>
          <target state="translated">状態演算（COP）を構築します。状態opは通常 &lt;code&gt;nextstate&lt;/code&gt; op ですが、現在コンパイルされているコードに対してデバッグが有効になっている場合は &lt;code&gt;dbstate&lt;/code&gt; opになります。状態opは、 &lt;code&gt;PL_curcop&lt;/code&gt; （または &lt;code&gt;PL_compiling&lt;/code&gt; ）から入力されます。もし</target>
        </trans-unit>
        <trans-unit id="252503586ad552246e785267ad1b402b11d9c378" translate="yes" xml:space="preserve">
          <source>Constructs and returns a &lt;code&gt;range&lt;/code&gt; op, with subordinate &lt;code&gt;flip&lt;/code&gt; and &lt;code&gt;flop&lt;/code&gt; ops.</source>
          <target state="translated">下位の &lt;code&gt;flip&lt;/code&gt; と &lt;code&gt;flop&lt;/code&gt; 演算を使用して、 &lt;code&gt;range&lt;/code&gt; 演算を構築して返します。</target>
        </trans-unit>
        <trans-unit id="7931ff4d1b3865a020bb44b64b70244e6b1d8e26" translate="yes" xml:space="preserve">
          <source>Constructs and returns a new pad name.</source>
          <target state="translated">新しいパッド名を作成して返します。</target>
        </trans-unit>
        <trans-unit id="957cf4dcc64056248a5fc94c4f5122d5b4253099" translate="yes" xml:space="preserve">
          <source>Constructs and returns a new pad name. Only use this function for names that refer to outer lexicals. (See also &lt;a href=&quot;#newPADNAMEpvn&quot;&gt;newPADNAMEpvn&lt;/a&gt;.)</source>
          <target state="translated">新しいパッド名を作成して返します。この関数は、外部語彙を参照する名前にのみ使用してください。（&lt;a href=&quot;#newPADNAMEpvn&quot;&gt;newPADNAMEpvn&lt;/a&gt;も参照してください。）</target>
        </trans-unit>
        <trans-unit id="2e65b217a955ea30db7dba5262fee4bb7d3f1ee4" translate="yes" xml:space="preserve">
          <source>Constructs and returns an op to access &lt;code&gt;$_&lt;/code&gt; , either as a lexical variable (if declared as &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; ) in the current scope, or the global &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">構築およびアクセスにオペアンプを返す &lt;code&gt;$_&lt;/code&gt; （として宣言されている場合のいずれかの字句変数として、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; 現在のスコープ、またはグローバルに） &lt;code&gt;$_&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a4f89b89092a94b632bbcc30495e0f779fb1b98" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns a conditional-expression (&lt;code&gt;cond_expr&lt;/code&gt; ) op.</source>
          <target state="translated">条件式（ &lt;code&gt;cond_expr&lt;/code&gt; ）opを作成、チェック、および返します。</target>
        </trans-unit>
        <trans-unit id="a15e166f7981a3b6de1c8fa20addbc3d348e0378" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns a logical (flow control) op.</source>
          <target state="translated">論理(フロー制御)opを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="f0264af3189ddcf2b7f625626d2ac18862a78a27" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns a loop-exiting op (such as &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">ループを終了するop（ &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; など）を作成、チェック、および返します。</target>
        </trans-unit>
        <trans-unit id="30e773cac5de3784659768f91ee0dd8d9488d2fc" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns a new &lt;code&gt;stub&lt;/code&gt; op, which represents an empty list expression.</source>
          <target state="translated">空のリスト式を表す新しい &lt;code&gt;stub&lt;/code&gt; オペレーションを作成、チェック、および返します。</target>
        </trans-unit>
        <trans-unit id="c12d66e7978fb577b34088dcb70b91bfaa6d01da" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an &lt;code&gt;lslice&lt;/code&gt; (list slice) op.</source>
          <target state="translated">&lt;code&gt;lslice&lt;/code&gt; （リストスライス）opを作成、チェック、および返します。</target>
        </trans-unit>
        <trans-unit id="ba48f5f9a71999341342f24283dfacd3a8b711b1" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an assignment op.</source>
          <target state="translated">代入オペランドを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="d9f565e2e42ef02d170588ec129f3ce0451ec355" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any base type (any type that has no extra fields).</source>
          <target state="translated">任意のベース型(余分なフィールドを持たない任意の型)のopを構築し、チェックし、返します。</target>
        </trans-unit>
        <trans-unit id="01c70184d1741ef212b465d435e97985417a8b0c" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any binary type.</source>
          <target state="translated">任意のバイナリ型のopを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="eaa434ea30a23789450d348f36bdecb9028e1240" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any list type.</source>
          <target state="translated">任意のリスト型のopを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="f0e39d7609ebd71139a1fdb8c22c888dbc1b3832" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any pattern matching type.</source>
          <target state="translated">任意のパターンマッチ型のopを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="5458dc98c9452c937824a796bdb326f5e0961a85" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any type that involves a reference to a pad element.</source>
          <target state="translated">pad要素への参照を含む任意の型のopを構築し、チェックし、返します。</target>
        </trans-unit>
        <trans-unit id="40ba5d8fe10410945734740719237761dd251d13" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any type that involves an embedded C-level pointer (PV).</source>
          <target state="translated">埋め込まれたCレベルポインタ(PV)を含む任意の型のopを構築し、チェックし、返します。</target>
        </trans-unit>
        <trans-unit id="97dc9643deaf81478aaf21202427a04fd76571a8" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any type that involves an embedded SV.</source>
          <target state="translated">埋め込まれたSVを含む任意の型のopを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="11846120c71e3d2b822e351f27e91e0b600f0d70" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any type that involves an embedded reference to a GV.</source>
          <target state="translated">GVへの埋め込み参照を含む任意の型のopを構築し、チェックし、返します。</target>
        </trans-unit>
        <trans-unit id="b1d063b1956e56be8e0dab06b4dad3b2a72f8365" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of any unary type.</source>
          <target state="translated">任意の単項型のopを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="be6ef2fa148c74ce9131470cb7120ad15eeee6a2" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of method type with a constant method name.</source>
          <target state="translated">定数のメソッド名を持つメソッド型のopを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="d3dad86210e9b0dd94c41f8743c265b479cf1818" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op of method type with a method name evaluated at runtime.</source>
          <target state="translated">実行時に評価されるメソッド名を持つメソッド型のopを構築し、チェックして返します。</target>
        </trans-unit>
        <trans-unit id="4ac910e3116c4e1a0b4ad7257fc6a8a1ad7ea627" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op tree expressing a &lt;code&gt;foreach&lt;/code&gt; loop (iteration through a list of values). This is a heavyweight loop, with structure that allows exiting the loop by &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; and suchlike.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; ループ（値のリストによる反復）を表すopツリーを作成、チェック、および返します。これはヘビーウェイトループで、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; からループを抜けることができる構造になっています。</target>
        </trans-unit>
        <trans-unit id="55a13424c4ba2a08e5a59cecb68e29d3affe0ee4" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op tree expressing a &lt;code&gt;given&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;given&lt;/code&gt; ブロックを表すopツリーを作成、チェック、および返します。</target>
        </trans-unit>
        <trans-unit id="fa87d1a87fb2d4ab5d631e62f196faf139c56915" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op tree expressing a &lt;code&gt;when&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; ブロックを表すopツリーを作成、チェック、および返します。</target>
        </trans-unit>
        <trans-unit id="e9e325766c242f95f44aebbca8d081041fa05bdb" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op tree expressing a &lt;code&gt;while&lt;/code&gt; loop. This is a heavyweight loop, with structure that allows exiting the loop by &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; and suchlike.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; ループを表すopツリーを作成、チェック、および返します。これはヘビーウェイトループで、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; からループを抜けることができる構造になっています。</target>
        </trans-unit>
        <trans-unit id="c90b8188bc17094c3efa9918fac996ca1396dace" translate="yes" xml:space="preserve">
          <source>Constructs, checks, and returns an op tree expressing a loop. This is only a loop in the control flow through the op tree; it does not have the heavyweight loop structure that allows exiting the loop by &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; and suchlike.</source>
          <target state="translated">ループを表すopツリーを作成、チェック、および返します。これは、opツリーを通る制御フローのループにすぎません。 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; からループを抜けることができるような重いループ構造はありません。</target>
        </trans-unit>
        <trans-unit id="8c8c9bb3c9bf3bfa59be4b5278462422ffe70ce9" translate="yes" xml:space="preserve">
          <source>Consult &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;, &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;, and &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for more details.</source>
          <target state="translated">詳細&lt;a href=&quot;perlxs&quot;&gt;については&lt;/a&gt;、perlxs、&lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;、および&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ec12aed4c398eee706a2f38aa675e4e5cfbdd63" translate="yes" xml:space="preserve">
          <source>Consult the match table in &lt;a href=&quot;perlop#Smartmatch-Operator&quot;&gt;Smartmatch Operator in perlop&lt;/a&gt; for details of when overloading is invoked.</source>
          <target state="translated">オーバーロードが呼び出される&lt;a href=&quot;perlop#Smartmatch-Operator&quot;&gt;タイミング&lt;/a&gt;の詳細については、perlopのSmartmatch Operatorの一致テーブルを参照してください。</target>
        </trans-unit>
        <trans-unit id="ca43cc0a723d7c90161c4e5b539040ca4d3086b1" translate="yes" xml:space="preserve">
          <source>Consume text in the lexer buffer, from &lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt;bufptr&lt;/a&gt; up to</source>
          <target state="translated">字句解析バッファ内のテキストを消費&lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;&amp;gt; PL_parser- BUFPTR&lt;/a&gt;まで</target>
        </trans-unit>
        <trans-unit id="712ade694782b4208a7818ba8fcb3c706be82adc" translate="yes" xml:space="preserve">
          <source>Consuming all (or nearly all) available memory.</source>
          <target state="translated">利用可能なすべての(またはほぼすべての)メモリを消費する。</target>
        </trans-unit>
        <trans-unit id="bda96c5452873306650630c6976f525d6dc4916b" translate="yes" xml:space="preserve">
          <source>Contact a system administrator (preferably your own) and report the exact error message you get, and ask them to read this same documentation you are now reading. They should be able to check whether there is something wrong with the locale configuration of the system. The &lt;a href=&quot;#Finding-locales&quot;&gt;Finding locales&lt;/a&gt; section is unfortunately a bit vague about the exact commands and places because these things are not that standardized.</source>
          <target state="translated">システム管理者（できれば自分のシステム管理者）に連絡して、表示される正確なエラーメッセージを報告し、現在読んでいるこの同じドキュメントを読むように依頼してください。システムのロケール設定に問題がないかどうかを確認できるはずです。&lt;a href=&quot;#Finding-locales&quot;&gt;検索のロケール&lt;/a&gt;これらのものが標準化されていないことをのでセクションでは、残念ながら正確なコマンドや場所について少しあいまいです。</target>
        </trans-unit>
        <trans-unit id="5a0be3e3d687fc1f8934755e52704c0c7e6471d4" translate="yes" xml:space="preserve">
          <source>Contact the author on &lt;code&gt;rainer@mathematik.uni-bielefeld.de&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;rainer@mathematik.uni-bielefeld.de&lt;/code&gt; で作成者に連絡してください。</target>
        </trans-unit>
        <trans-unit id="d62bfc367abe11a79b1d86ac7e31441eab7366c1" translate="yes" xml:space="preserve">
          <source>Contained in the file specified by the first filename on the command line. (Note that systems supporting the &lt;code&gt;#!&lt;/code&gt; notation invoke interpreters this way. See &lt;a href=&quot;#Location-of-Perl&quot;&gt;Location of Perl&lt;/a&gt;.)</source>
          <target state="translated">コマンドラインの最初のファイル名で指定されたファイルに含まれています。（ &lt;code&gt;#!&lt;/code&gt; 表記をサポートするシステムはこの方法でインタープリターを呼び出すことに注意してください&lt;a href=&quot;#Location-of-Perl&quot;&gt;。Perlの場所を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="537701da726a37f50cd1190981e9266174458d7a" translate="yes" xml:space="preserve">
          <source>Contains routines that emulate low-level math functions in BigInt, e.g. optional routines the low-level math package does not provide on its own.</source>
          <target state="translated">BigInt の低レベル数学関数をエミュレートするルーチンが含まれています。</target>
        </trans-unit>
        <trans-unit id="a8140068c6564fc99ecc142e17f391b1e09f6ccb" translate="yes" xml:space="preserve">
          <source>Contains the arguments of current subroutine, or the &lt;code&gt;@ARGV&lt;/code&gt; array if in the toplevel context.</source>
          <target state="translated">現在のサブルーチンの引数、またはトップレベルのコンテキストの場合は &lt;code&gt;@ARGV&lt;/code&gt; 配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="9f2a5da0585f47140af9323564aa8fb7d1d06cc4" translate="yes" xml:space="preserve">
          <source>Contains the name of the current file when reading from &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; から読み取るときの現在のファイルの名前が含まれます。</target>
        </trans-unit>
        <trans-unit id="6178dce23f2a4c5ea5896dcce1de535426b55d99" translate="yes" xml:space="preserve">
          <source>Contains the name of the header to be included to get va_dcl definition. Typically one of</source>
          <target state="translated">va_dcl定義を取得するために含まれるヘッダーの名前を含む。通常は</target>
        </trans-unit>
        <trans-unit id="d1e0c34957a016a1b3c12f032cd551c8908cd506" translate="yes" xml:space="preserve">
          <source>Contains the name of the program being executed.</source>
          <target state="translated">実行中のプログラム名を含みます。</target>
        </trans-unit>
        <trans-unit id="a2d63762428e57520df2f4f29a1e038ab7994558" translate="yes" xml:space="preserve">
          <source>Contains the prefix to use for tagging variable names in the output. The default is &quot;VAR&quot;.</source>
          <target state="translated">出力内の変数名をタグ付けする際に使用する接頭辞を指定します。デフォルトは &quot;VAR &quot;です。</target>
        </trans-unit>
        <trans-unit id="0e2da210cc9bb0a18aac5aab8614cb8e5b7b6dff" translate="yes" xml:space="preserve">
          <source>Contains the subpattern from the corresponding set of capturing parentheses from the last successful pattern match, not counting patterns matched in nested blocks that have been exited already.</source>
          <target state="translated">最後に成功したパターンマッチからのキャプチャー括弧の対応するセットからのサブパターンを含み、既に終了したネストされたブロックでマッチしたパターンはカウントしません。</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="9cb23f093a42f57fb6e20b27af11bf8e322e39c5" translate="yes" xml:space="preserve">
          <source>Continent | |--&amp;gt;Country | |--&amp;gt;[state/province] | |--&amp;gt;ftp | |--&amp;gt;[http]</source>
          <target state="translated">大陸| |-&amp;gt;国| |-&amp;gt; [州/県] | |-&amp;gt; ftp | |-&amp;gt; [http]</target>
        </trans-unit>
        <trans-unit id="5eba0b3f0a46323a9b3b38a065a8cf6fcd45e0eb" translate="yes" xml:space="preserve">
          <source>Continue until the return from the current subroutine. Dump the return value if the &lt;code&gt;PrintRet&lt;/code&gt; option is set (default).</source>
          <target state="translated">現在のサブルーチンから戻るまで続けます。 &lt;code&gt;PrintRet&lt;/code&gt; オプションが設定されている場合（デフォルト）、戻り値をダンプします。</target>
        </trans-unit>
        <trans-unit id="8cfbf2d4c02ef7cbf2f81d0785ff1541fec7f195" translate="yes" xml:space="preserve">
          <source>Continue, optionally inserting a one-time-only breakpoint at the specified line or subroutine.</source>
          <target state="translated">Continue,オプションで、指定された行またはサブルーチンに一度だけのブレークポイントを挿入します。</target>
        </trans-unit>
        <trans-unit id="8a7a39f29f66ddaa64957e3237a6a6d6ce7714c5" translate="yes" xml:space="preserve">
          <source>Contractions beginning with the specified characters are suppressed, even if those contractions are defined in &lt;code&gt;table&lt;/code&gt; .</source>
          <target state="translated">指定された文字で始まる短縮は、それらの短縮が &lt;code&gt;table&lt;/code&gt; で定義されている場合でも抑制されます。</target>
        </trans-unit>
        <trans-unit id="f182d17ce2e9b56202114ddc3d06d6361dea7a8d" translate="yes" xml:space="preserve">
          <source>Contrary to popular belief, Perl 6 and Perl 5 peacefully coexist with one another. Perl 6 has proven to be a fascinating source of ideas for those using Perl 5 (the &lt;a href=&quot;http://search.cpan.org/perldoc/Moose&quot;&gt;Moose&lt;/a&gt; object system is a well-known example). There is overlap in the communities, and this overlap fosters the tradition of sharing and borrowing that have been instrumental to Perl's success. The current leading implementation of Perl 6 is Rakudo, and you can learn more about it at &lt;a href=&quot;http://rakudo.org&quot;&gt;http://rakudo.org&lt;/a&gt;.</source>
          <target state="translated">一般的な考えに反して、Perl 6とPerl 5は互いに平和に共存しています。Perl 6は、Perl 5を使用する人にとって魅力的なアイデアのソースであることが証明されています（&lt;a href=&quot;http://search.cpan.org/perldoc/Moose&quot;&gt;Moose&lt;/a&gt;オブジェクトシステムはよく知られている例です）。コミュニティには重複があり、この重複は、Perlの成功に役立ってきた共有と借用の伝統を育みます。Perl 6の現在の主要な実装はRakudoであり、&lt;a href=&quot;http://rakudo.org&quot;&gt;http：//rakudo.orgで&lt;/a&gt;詳細を学ぶことができます。</target>
        </trans-unit>
        <trans-unit id="1cc2fb5710ee22531776c8ba9e55098e2618c67c" translate="yes" xml:space="preserve">
          <source>Contrast that with an independent subexpression:</source>
          <target state="translated">それを独立した副表現と対比させてみてください。</target>
        </trans-unit>
        <trans-unit id="69735e4ec537e4e29ad052c50c3613321af3383c" translate="yes" xml:space="preserve">
          <source>Contrast this with the following make_adder() function, in which the returned anonymous function contains a reference to a lexical variable outside the scope of that function itself. Such a reference requires that Perl return a proper closure, thus locking in for all time the value that the lexical had when the function was created.</source>
          <target state="translated">このことを、次の make_adder()関数と対比してみてください。このような参照は、Perl が適切なクロージャを返すことを必要とします。</target>
        </trans-unit>
        <trans-unit id="e16f6173d03c0c8b09cdd1d2ddfa6f13bebfd052" translate="yes" xml:space="preserve">
          <source>Control Flow Utilities (callbacks and exceptions etc)</source>
          <target state="translated">コントロールフローユーティリティ(コールバックや例外など</target>
        </trans-unit>
        <trans-unit id="d8e3def8f1fded2e3eff4c8ea59924177caf98dc" translate="yes" xml:space="preserve">
          <source>Control VMS-specific language features</source>
          <target state="translated">VMS固有の言語機能の制御</target>
        </trans-unit>
        <trans-unit id="bce115b0c925643288d6d66089149032ada8c603" translate="yes" xml:space="preserve">
          <source>Control characters</source>
          <target state="translated">制御文字</target>
        </trans-unit>
        <trans-unit id="b7fe68fe8faa99ef764732f95206a72acbe672ba" translate="yes" xml:space="preserve">
          <source>Control characters can be escaped with &lt;code&gt;\c&lt;/code&gt; , so that a control-Z character would be matched with &lt;code&gt;\cZ&lt;/code&gt; . The escape sequence &lt;code&gt;\Q&lt;/code&gt; ...&lt;code&gt;\E&lt;/code&gt; quotes, or protects most non-alphabetic characters. For instance,</source>
          <target state="translated">制御文字は &lt;code&gt;\c&lt;/code&gt; でエスケープできるため、制御Z文字は &lt;code&gt;\cZ&lt;/code&gt; と一致します。エスケープシーケンス &lt;code&gt;\Q&lt;/code&gt; ... &lt;code&gt;\E&lt;/code&gt; は、ほとんどの非アルファベット文字を引用、または保護します。例えば、</target>
        </trans-unit>
        <trans-unit id="021626ea5dbee24ff07ea2691bf82bb74b7a5674" translate="yes" xml:space="preserve">
          <source>Control characters don't produce output as such, but instead usually control the terminal somehow: for example, newline and backspace are control characters. On ASCII platforms, in the ASCII range, characters whose code points are between 0 and 31 inclusive, plus 127 (&lt;code&gt;DEL&lt;/code&gt; ) are control characters; on EBCDIC platforms, their counterparts are control characters.</source>
          <target state="translated">制御文字自体は出力を生成しませんが、通常はなんらかの方法で端末を制御します。たとえば、改行とバックスペースは制御文字です。ASCIIプラットフォームでは、ASCII範囲では、コードポイントが0から31までの範囲にある文字に加えて127（ &lt;code&gt;DEL&lt;/code&gt; ）が制御文字です。EBCDICプラットフォームでは、対応するものは制御文字です。</target>
        </trans-unit>
        <trans-unit id="c0323bcd19431aa40d48a7a04e563e491b5de2b5" translate="yes" xml:space="preserve">
          <source>Control sort() behaviour</source>
          <target state="translated">ソート()の振る舞いを制御する</target>
        </trans-unit>
        <trans-unit id="6eed236126d30fd4de8e539b1434bde859966005" translate="yes" xml:space="preserve">
          <source>Control the filetest permission operators</source>
          <target state="translated">ファイルテスト許可演算子の制御</target>
        </trans-unit>
        <trans-unit id="1a2eedb1b60e1d8a80a133e954e55be108ac924a" translate="yes" xml:space="preserve">
          <source>Control whether the file is unlinked when the object goes out of scope. The file is removed if this value is true and $KEEP_ALL is not.</source>
          <target state="translated">オブジェクトがスコープ外になったときにファイルのリンクを解除するかどうかを制御します。この値がtrueで$KEEP_ALLがtrueでない場合、ファイルは削除されます。</target>
        </trans-unit>
        <trans-unit id="e9597894a326a5dddbc5dee41019e4d31b7362ce" translate="yes" xml:space="preserve">
          <source>Controlling Warnings from the Command Line</source>
          <target state="translated">コマンドラインからの警告の制御</target>
        </trans-unit>
        <trans-unit id="68987a6a2f290ee6ca2caa6b3e7b36432344b22a" translate="yes" xml:space="preserve">
          <source>Controlling access: lock()</source>
          <target state="translated">アクセスの制御:lock()</target>
        </trans-unit>
        <trans-unit id="a1e94cef9625b439090d57cc70615fae34127ab7" translate="yes" xml:space="preserve">
          <source>Controlling input buffering is a remarkably system-dependent matter. On many systems, you can just use the &lt;b&gt;stty&lt;/b&gt; command as shown in &lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt;, but as you see, that's already getting you into portability snags.</source>
          <target state="translated">入力バッファリングの制御は、システムに大きく依存する問題です。多くのシステムでは、&lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt;に示されているように&lt;b&gt;stty&lt;/b&gt;コマンドを使用するだけで済みますが、ご覧のとおり、すでに移植性の問題が発生しています。</target>
        </trans-unit>
        <trans-unit id="d20f10fc399adc1e8262f1893ceb51478f185a6b" translate="yes" xml:space="preserve">
          <source>Controlling where the test output goes.</source>
          <target state="translated">テスト出力の行き先を制御します。</target>
        </trans-unit>
        <trans-unit id="07da5ac1184a4498e39e115db900514920d805cf" translate="yes" xml:space="preserve">
          <source>Controls how certain regex optimisations are applied and how much memory they utilize. This value by default is 65536 which corresponds to a 512kB temporary cache. Set this to a higher value to trade memory for speed when matching large alternations. Set it to a lower value if you want the optimisations to be as conservative of memory as possible but still occur, and set it to a negative value to prevent the optimisation and conserve the most memory. Under normal situations this variable should be of no interest to you.</source>
          <target state="translated">特定の正規表現の最適化の適用方法と使用するメモリ量を制御します。この値はデフォルトで65536で、512kBの一時キャッシュに相当します。大きな代替案をマッチングする際にメモリを高速化したい場合は、この値を高く設定してください。最適化を可能な限りメモリを節約しながらも実行したい場合は低い値に設定し、最適化を回避してメモリを最大限に節約したい場合は負の値に設定します。通常の状況では、この変数は何の関心も持たないはずです。</target>
        </trans-unit>
        <trans-unit id="554cef6ea070153a4ee1bebb92008fd6058cf45d" translate="yes" xml:space="preserve">
          <source>Controls the degree to which the output can be &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed to recreate the supplied reference structures. Setting it to 1 will output additional perl statements that will correctly recreate nested references. The default is 0.</source>
          <target state="translated">指定された参照構造を再作成するために出力を &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; できる度合いを制御します。これを1に設定すると、ネストされた参照を正しく再作成する追加のperlステートメントが出力されます。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="acfa684e2caf08a3da5e3ef30109246db004e5da" translate="yes" xml:space="preserve">
          <source>Controls the lengths to which the module will go to check the safety of the temporary file or directory before proceeding. Options are:</source>
          <target state="translated">モジュールが先に進む前に、一時ファイルまたはディレクトリの安全性をチェックするための長さを制御します。オプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0ca7717f12fe26367883aafa8d3fbe334c1b18a2" translate="yes" xml:space="preserve">
          <source>Controls the style of indentation. It can be set to 0, 1, 2 or 3. Style 0 spews output without any newlines, indentation, or spaces between list items. It is the most compact format possible that can still be called valid perl. Style 1 outputs a readable form with newlines but no fancy indentation (each level in the structure is simply indented by a fixed amount of whitespace). Style 2 (the default) outputs a very readable form which takes into account the length of hash keys (so the hash value lines up). Style 3 is like style 2, but also annotates the elements of arrays with their index (but the comment is on its own line, so array output consumes twice the number of lines). Style 2 is the default.</source>
          <target state="translated">インデントのスタイルを制御します。0,1,2,3 のいずれかに設定できます。スタイル0では、リスト項目の間に改行やインデント、スペースを入れずに出力します。これは、有効なPerlと呼ばれることができる最もコンパクトな形式です。スタイル 1 は、改行はありますが、派手なインデントはありません (構造体の各レベルは、一定量の空白で単純にインデントされています)。スタイル2(デフォルト)は、ハッシュキーの長さを考慮した(ハッシュ値が並ぶように)非常に読みやすいフォームを出力します。スタイル 3 はスタイル 2 と似ていますが、配列の要素にインデックスを付けて注釈を付けます (ただし、コメントはそれ自身の行にあるので、配列の出力は 2 倍の行数を消費します)。スタイル 2 がデフォルトです。</target>
        </trans-unit>
        <trans-unit id="22a31fdc3bd2e052c43c5ff90f54688767846776" translate="yes" xml:space="preserve">
          <source>Controls whether debugging messages should be enabled.</source>
          <target state="translated">デバッグメッセージを有効にするかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="e34cd6a1d6fc0675d9cf236e50c7a40d4f7e0985" translate="yes" xml:space="preserve">
          <source>Controls whether temporary files and directories should be retained regardless of any instructions in the program to remove them automatically. This is useful for debugging but should not be used in production code.</source>
          <target state="translated">プログラム内で自動的に削除するように指示があっても、一時ファイルやディレクトリを保持するかどうかを制御します。これはデバッグに便利ですが、プロダクションコードでは使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="7787de4ed8d37741fa377fafe5fdafa8b3011126" translate="yes" xml:space="preserve">
          <source>Controls whether the compressed data is appended to the output buffer in the &lt;code&gt;bzdeflate&lt;/code&gt; , &lt;code&gt;bzflush&lt;/code&gt; and &lt;code&gt;bzclose&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;bzdeflate&lt;/code&gt; 、 &lt;code&gt;bzflush&lt;/code&gt; 、および &lt;code&gt;bzclose&lt;/code&gt; メソッドで、圧縮データを出力バッファーに追加するかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="f221020431f51974b32a3b5e2fbd634d97908661" translate="yes" xml:space="preserve">
          <source>Controls whether the compressed data is appended to the output buffer in the &lt;code&gt;bzinflate&lt;/code&gt; , &lt;code&gt;bzflush&lt;/code&gt; and &lt;code&gt;bzclose&lt;/code&gt; methods.</source>
          <target state="translated">圧縮データを &lt;code&gt;bzinflate&lt;/code&gt; 、 &lt;code&gt;bzflush&lt;/code&gt; 、および &lt;code&gt;bzclose&lt;/code&gt; メソッドの出力バッファーに追加するかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="c4245dd2343e96e7d4aa52338568c9fd8977b600" translate="yes" xml:space="preserve">
          <source>Controls which compression method is used. At present four compression methods are supported, namely Store (no compression at all), Deflate, Bzip2 and Lzma.</source>
          <target state="translated">どの圧縮方式を使用するかを制御します。現在サポートされている圧縮方法は、Store (全く圧縮しない)、Deflate、Bzip2、Lzmaの4つです。</target>
        </trans-unit>
        <trans-unit id="2eb06b69bb4c9f83f42cb55738cfe404434afd67" translate="yes" xml:space="preserve">
          <source>Convenience macro to get the REGEXP from a SV. This is approximately equivalent to the following snippet:</source>
          <target state="translated">SVからREGEXPを取得する便利なマクロ。以下のスニペットとほぼ同等です。</target>
        </trans-unit>
        <trans-unit id="197b239c74a71f263a8d75330c22e4fc91bea1ec" translate="yes" xml:space="preserve">
          <source>Convenience method for building testing functions that take regular expressions as arguments.</source>
          <target state="translated">正規表現を引数に取るテスト関数を構築するための便利なメソッド。</target>
        </trans-unit>
        <trans-unit id="1f619076858d6ded347f81f166e575080deac279" translate="yes" xml:space="preserve">
          <source>Convenience methods</source>
          <target state="translated">便利な方法</target>
        </trans-unit>
        <trans-unit id="61856b8c17a4ff32006fe4b7dcc6f96f253b2120" translate="yes" xml:space="preserve">
          <source>Conventions</source>
          <target state="translated">Conventions</target>
        </trans-unit>
        <trans-unit id="643e483203bf1176839f0449bd1086c5d82b2884" translate="yes" xml:space="preserve">
          <source>Conversely for &lt;code&gt;INPUT&lt;/code&gt; (Perl to XSUB) mapping, the function named &lt;code&gt;XS_unpack_$ntype&lt;/code&gt; is called with the input Perl scalar as argument and the return value is cast to the mapped C type and assigned to the output C variable.</source>
          <target state="translated">逆に &lt;code&gt;INPUT&lt;/code&gt; （PerlからXSUB）マッピングの場合、 &lt;code&gt;XS_unpack_$ntype&lt;/code&gt; という名前の関数が引数として入力Perlスカラーで呼び出され、戻り値はマップされたC型にキャストされ、出力C変数に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="12d9c05ad456b2e9dfbd26729c7d5a4582ad8668" translate="yes" xml:space="preserve">
          <source>Conversely when &lt;code&gt;Append&lt;/code&gt; is not specified, or it is present and is set to false, it will operate as follows.</source>
          <target state="translated">逆に、 &lt;code&gt;Append&lt;/code&gt; が指定されていない場合、または存在していてfalseに設定されている場合は、次のように動作します。</target>
        </trans-unit>
        <trans-unit id="1099367c0a33e0960cc2a79b8c82b72aa819293c" translate="yes" xml:space="preserve">
          <source>Conversely, here is a partial solution for the task of encoding such a URL in any EBCDIC code page:</source>
          <target state="translated">逆に、このようなURLを任意のEBCDICコードのページでエンコードするというタスクの部分的な解決策は、ここにあります。</target>
        </trans-unit>
        <trans-unit id="0cdc49909eca70fcdaa9911c75b9017083c28375" translate="yes" xml:space="preserve">
          <source>Conversely, when setting &lt;code&gt;$?&lt;/code&gt; in an END block, an attempt is made to convert the POSIX value into a native status intelligible to the operating system upon exiting Perl. What this boils down to is that setting &lt;code&gt;$?&lt;/code&gt; to zero results in the generic success value SS$_NORMAL, and setting &lt;code&gt;$?&lt;/code&gt; to a non-zero value results in the generic failure status SS$_ABORT. See also &lt;a href=&quot;perlport#exit&quot;&gt;exit in perlport&lt;/a&gt;.</source>
          <target state="translated">逆に、 &lt;code&gt;$?&lt;/code&gt; 設定するときは？ENDブロックでは、Perlの終了時に、POSIX値をオペレーティングシステムが理解できるネイティブステータスに変換しようとします。結局のところ、その設定は &lt;code&gt;$?&lt;/code&gt; ゼロにすると、一般的な成功値SS $ _NORMALが設定され、 &lt;code&gt;$?&lt;/code&gt; が設定されます。ゼロ以外の値にすると、一般的なエラーステータスSS $ _ABORTになります。&lt;a href=&quot;perlport#exit&quot;&gt;perlportのexit&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="42f99a69b0dbcdf11a6d0337c05dbfa48ee474e9" translate="yes" xml:space="preserve">
          <source>Conversions to and from spherical and cylindrical coordinates are available. Please notice that the conversions are not necessarily reversible because of the equalities like</source>
          <target state="translated">球体座標、円筒座標への変換が可能です。のような等号のため、変換は必ずしも可逆的ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="bf35c8b871a1fb1996c50ba5b0b5ab5801039529" translate="yes" xml:space="preserve">
          <source>Convert CPAN distribution metadata structures</source>
          <target state="translated">CPAN ディストリビューションのメタデータ構造を変換</target>
        </trans-unit>
        <trans-unit id="21841a84ce705fac7522bc0e5a625ceef2574143" translate="yes" xml:space="preserve">
          <source>Convert POD data to ASCII text with format escapes</source>
          <target state="translated">フォーマットエスケープでPODデータをASCIIテキストに変換</target>
        </trans-unit>
        <trans-unit id="26d9ff3691abc55fd6770d630e2e5af82498a473" translate="yes" xml:space="preserve">
          <source>Convert POD data to formatted *roff input</source>
          <target state="translated">PODデータをフォーマットされた*roff入力に変換</target>
        </trans-unit>
        <trans-unit id="04c7609219077dfc8d84b97d557ad0e72666eb9b" translate="yes" xml:space="preserve">
          <source>Convert POD data to formatted ASCII text</source>
          <target state="translated">PODデータをフォーマットされたASCIIテキストに変換</target>
        </trans-unit>
        <trans-unit id="db9fd6e0fab456fdc8445a16cbc6756038a981de" translate="yes" xml:space="preserve">
          <source>Convert POD data to formatted color ASCII text</source>
          <target state="translated">PODデータをフォーマット済みカラーASCIIテキストに変換</target>
        </trans-unit>
        <trans-unit id="112d5a9d03872dcf431cd72fd930ebba527fc129" translate="yes" xml:space="preserve">
          <source>Convert Pod to HTML</source>
          <target state="translated">PodをHTMLに変換</target>
        </trans-unit>
        <trans-unit id="025ffb8bfa07a8087fac34adc747a7743f7ef294" translate="yes" xml:space="preserve">
          <source>Convert a string representing an unsigned decimal number to an object representing the same number. The input is normalize, i.e., it matches &lt;code&gt;^(0|[1-9]\d*)$&lt;/code&gt; .</source>
          <target state="translated">符号なし10進数を表す文字列を、同じ数値を表すオブジェクトに変換します。入力は正規化されます。つまり、 &lt;code&gt;^(0|[1-9]\d*)$&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="1c765e62f3e179084fe5d84bf0b2c3905b911ee2" translate="yes" xml:space="preserve">
          <source>Convert all keys to lowercase</source>
          <target state="translated">すべてのキーを小文字に変換</target>
        </trans-unit>
        <trans-unit id="7fc597b2a41ac67e1656734e7eb3b3a11b24ebbf" translate="yes" xml:space="preserve">
          <source>Convert between VMS and Unix file specification syntax</source>
          <target state="translated">VMSとUnixファイル指定構文間の変換</target>
        </trans-unit>
        <trans-unit id="22551a6fa56e0b088f54f393df223d0617c9d7fd" translate="yes" xml:space="preserve">
          <source>Convert date and time information to string. Returns the string.</source>
          <target state="translated">日時情報を文字列に変換します。文字列を返します。</target>
        </trans-unit>
        <trans-unit id="9dcc937b46bf0f95b02e92f32e357340020b79bb" translate="yes" xml:space="preserve">
          <source>Convert date/time info to a calendar time.</source>
          <target state="translated">日付/時刻情報をカレンダーの時刻に変換します。</target>
        </trans-unit>
        <trans-unit id="c755a3bc45c556fa5a645d889408aa48ca046b43" translate="yes" xml:space="preserve">
          <source>Convert several Pod files to several HTML files</source>
          <target state="translated">複数のPodファイルを複数のHTMLファイルに変換</target>
        </trans-unit>
        <trans-unit id="e36fcb46538b5f65c12d8c2a4fdc9c5ba89e1e4c" translate="yes" xml:space="preserve">
          <source>Convert the items to a normalised form. For 8 bit and Unicode values converts the item to an array of 1 or 2 items, both 8 bit and UTF-8 encoded.</source>
          <target state="translated">項目を正規化された形式に変換します。8 ビ ッ ト と Unicode 値の場合は、 8 ビ ッ ト と UTF-8 の両方でエン コ ー ド さ れた 1 個ない し 2 個の項目の配列に変換 し ます。</target>
        </trans-unit>
        <trans-unit id="6a89fde6d6a92b19247264815bcda3f0b2c24bd4" translate="yes" xml:space="preserve">
          <source>Converters</source>
          <target state="translated">Converters</target>
        </trans-unit>
        <trans-unit id="e602181f27c8b76305cde3933fa7a93bda7e1d5f" translate="yes" xml:space="preserve">
          <source>Converting a text string into an alternate but equivalent &lt;b&gt;canonical&lt;/b&gt; (or compatible) representation that can then be compared for equivalence. Unicode recognizes four different normalization forms: NFD, NFC, NFKD, and NFKC.</source>
          <target state="translated">テキスト文字列を代替であるが同等の&lt;b&gt;正規&lt;/b&gt;（または互換性のある）表現に変換し、同等かどうかを比較できます。Unicodeは、NFD、NFC、NFKD、NFKCの4つの異なる正規化形式を認識します。</target>
        </trans-unit>
        <trans-unit id="a905d8ec528f352ed045a0e47323b3f945f63fbc" translate="yes" xml:space="preserve">
          <source>Converting data from one type to another. C permits this. Perl does not need it. Nor want it.</source>
          <target state="translated">データをある型から別の型に変換します。Cではこれが可能です。Perlには必要ありません。必要ともしませんし、必要ともしません。</target>
        </trans-unit>
        <trans-unit id="ff10e616cf0cab260f69d9d71be4dea1b4105184" translate="yes" xml:space="preserve">
          <source>Converting neutral double quotes to properly matched double quotes doesn't work unless there are no formatting codes between the quote marks. This only matters for troff output.</source>
          <target state="translated">ニュートラルな二重引用符を適切にマッチした二重引用符に変換しても、引用符の間にフォーマットコードがない限りは動作しません。これは troff 出力の場合にのみ問題となります。</target>
        </trans-unit>
        <trans-unit id="39ed30f1fb153d42aedc1603d4595d899a1c4eb9" translate="yes" xml:space="preserve">
          <source>Converting these two bytes to a string can be done with the unpack template &lt;code&gt;'b16'&lt;/code&gt; . To obtain the individual bit values from the bit string we use &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; with the &quot;empty&quot; separator pattern which dissects into individual characters. Bit values from the &quot;reserved&quot; positions are simply assigned to &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, a convenient notation for &quot;I don't care where this goes&quot;.</source>
          <target state="translated">これらの2バイトを文字列に変換するには、アンパックテンプレート &lt;code&gt;'b16'&lt;/code&gt; を使用します。ビット文字列から個々のビット値を取得するには、個々の文字に分解する「空の」セパレータパターンを使用して &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; を使用します。「予約済み」の位置からのビット値は、単に &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; に割り当てられます。これは、「どこに行くのか気にしない」という便利な表記です。</target>
        </trans-unit>
        <trans-unit id="872d9a7e434a3f8eac01f8a956be9ef98e1065ef" translate="yes" xml:space="preserve">
          <source>Converts</source>
          <target state="translated">Converts</target>
        </trans-unit>
        <trans-unit id="f1b0ff19255621f0cc44bdfb4998d413782b614b" translate="yes" xml:space="preserve">
          <source>Converts DOS and OS/2 linefeeds to Unix style recursively.</source>
          <target state="translated">DOSおよびOS/2のラインフィードを再帰的にUnixスタイルに変換します。</target>
        </trans-unit>
        <trans-unit id="10562257cdade00a6b21d5534b7a854fb31311ef" translate="yes" xml:space="preserve">
          <source>Converts Perl XS code into C code</source>
          <target state="translated">Perl XS コードを C コードに変換</target>
        </trans-unit>
        <trans-unit id="3b4c118ffecc90a457e623e35d47e06d75541310" translate="yes" xml:space="preserve">
          <source>Converts a list into a string wrapped at approximately 80 columns.</source>
          <target state="translated">リストを約80カラムでラップした文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="68b9e6f5ba88d84e905a481b6520ce3880c387ca" translate="yes" xml:space="preserve">
          <source>Converts a pod section specification to a suitable section specification for HTML. Note that we keep spaces and special characters except &lt;code&gt;&quot;, ?&lt;/code&gt; (Netscape problem) and the hyphen (writer's problem...).</source>
          <target state="translated">ポッドのセクション仕様をHTMLの適切なセクション仕様に変換します。 &lt;code&gt;&quot;, ?&lt;/code&gt; （Netscapeの問題）とハイフン（ライターの問題...）を除いて、スペースと特殊文字を保持していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="49497595bfccaed317aa3b3b73a4144bb41b64d6" translate="yes" xml:space="preserve">
          <source>Converts a relative path to an absolute path.</source>
          <target state="translated">相対パスを絶対パスに変換します。</target>
        </trans-unit>
        <trans-unit id="9d892d6020931849ea5043d615d0a40eee45b982" translate="yes" xml:space="preserve">
          <source>Converts a relative path to an absolute path:</source>
          <target state="translated">相対パスを絶対パスに変換します。</target>
        </trans-unit>
        <trans-unit id="66b5dd91e7acb7cb912818ec494442452642d20c" translate="yes" xml:space="preserve">
          <source>Converts a scalar into a typeglob. This is an incoercible typeglob; assigning a reference to it will assign to one of its slots, instead of overwriting it as happens with typeglobs created by SvSetSV. Converting any scalar that is SvOK() may produce unpredictable results and is reserved for perl's internal use.</source>
          <target state="translated">スカラをタイプグローブに変換します。これは、SvSetSV で作成されたタイプグローブのように上書きされるのではなく、これに参照を代入すると、そのスロットの一つに代入されます。SvOK()であるスカラを変換すると、予測不可能な結果が生じる可能性がありますので、Perl の内部での使用のために予約されています。</target>
        </trans-unit>
        <trans-unit id="cbf47bd965a32350de298ea4a1bd9d84f13c4c78" translate="yes" xml:space="preserve">
          <source>Converts a sorting key into its representation form. If &lt;code&gt;UCA_Version&lt;/code&gt; is 8, the output is slightly different.</source>
          <target state="translated">ソートキーを表現形式に変換します。場合 &lt;code&gt;UCA_Version&lt;/code&gt; は 8で、出力は若干異なっています。</target>
        </trans-unit>
        <trans-unit id="e09251ed3a676eb23e02a6f2269b32e4facc6e9a" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; of length &lt;code&gt;len&lt;/code&gt; bytes from the native encoding into UTF-8. Returns a pointer to the newly-created string, and sets &lt;code&gt;len&lt;/code&gt; to reflect the new length in bytes.</source>
          <target state="translated">長さ &lt;code&gt;len&lt;/code&gt; バイトの文字列 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; をネイティブエンコーディングからUTF-8に変換します。新しく作成された文字列へのポインタを返し、 &lt;code&gt;len&lt;/code&gt; を設定して新しい長さをバイト単位で反映します。</target>
        </trans-unit>
        <trans-unit id="25e23f0e18e40bbf0fb5c8f36fb8ccc5209e18d9" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; of length &lt;code&gt;len&lt;/code&gt; from UTF-8 into native byte encoding. Unlike &lt;a href=&quot;#bytes_to_utf8&quot;&gt;bytes_to_utf8&lt;/a&gt;, this over-writes the original string, and updates &lt;code&gt;len&lt;/code&gt; to contain the new length. Returns zero on failure, setting &lt;code&gt;len&lt;/code&gt; to -1.</source>
          <target state="translated">長さ &lt;code&gt;len&lt;/code&gt; の文字列 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; をUTF-8からネイティブバイトエンコーディングに変換します。&lt;a href=&quot;#bytes_to_utf8&quot;&gt;bytes_to_utf8&lt;/a&gt;とは異なり、これは元の文字列を上書きし、新しい長さを含むように &lt;code&gt;len&lt;/code&gt; を更新します。失敗するとゼロを返し、 &lt;code&gt;len&lt;/code&gt; を-1 に設定します。</target>
        </trans-unit>
        <trans-unit id="c9aaa9139532e77f8d3100c51e3d0b848d4c571b" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; of length &lt;code&gt;len&lt;/code&gt; from UTF-8 into native byte encoding. Unlike &lt;a href=&quot;#utf8_to_bytes&quot;&gt;utf8_to_bytes&lt;/a&gt; but like &lt;a href=&quot;#bytes_to_utf8&quot;&gt;bytes_to_utf8&lt;/a&gt;, returns a pointer to the newly-created string, and updates &lt;code&gt;len&lt;/code&gt; to contain the new length. Returns the original string if no conversion occurs, &lt;code&gt;len&lt;/code&gt; is unchanged. Do nothing if &lt;code&gt;is_utf8&lt;/code&gt; points to 0. Sets &lt;code&gt;is_utf8&lt;/code&gt; to 0 if &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; is converted or consisted entirely of characters that are invariant in utf8 (i.e., US-ASCII on non-EBCDIC machines).</source>
          <target state="translated">長さ &lt;code&gt;len&lt;/code&gt; の文字列 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; をUTF-8からネイティブバイトエンコーディングに変換します。&lt;a href=&quot;#utf8_to_bytes&quot;&gt;utf8_to_bytes&lt;/a&gt;とは異なり、&lt;a href=&quot;#bytes_to_utf8&quot;&gt;bytes_to_utf8&lt;/a&gt;と同様に、新しく作成された文字列へのポインタを返し、 &lt;code&gt;len&lt;/code&gt; を更新して新しい長さを含めます。変換が発生しない場合は元の文字列を返します &lt;code&gt;len&lt;/code&gt; は変更されません。場合は何もしない &lt;code&gt;is_utf8&lt;/code&gt; 0セットにポイントが &lt;code&gt;is_utf8&lt;/code&gt; 場合は0に &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が変換または完全にUTF8で不変な文字で構成された（すなわち、US-ASCII以外のEBCDICマシン上）。</target>
        </trans-unit>
        <trans-unit id="57ad9fed6045b19b9f737301c45af3031d5885f4" translate="yes" xml:space="preserve">
          <source>Converts a string into something presentable, handling escaping via pv_escape() and supporting quoting and ellipses.</source>
          <target state="translated">pv_escape()によるエスケープを処理し、クォートや楕円をサポートします。</target>
        </trans-unit>
        <trans-unit id="985fbcc4acdc3a7d9cb06fa3db4de16008517d11" translate="yes" xml:space="preserve">
          <source>Converts a time as returned by the time function to a 9-element list with the time analyzed for the local time zone. Typically used as follows:</source>
          <target state="translated">time関数で返された時刻を、ローカルタイムゾーンで解析された時刻を含む9要素のリストに変換します。通常は以下のように使用されます。</target>
        </trans-unit>
        <trans-unit id="df456bac0ead4ef5d6822c04fb63b24887c0fcbb" translate="yes" xml:space="preserve">
          <source>Converts die(...) to croak(...)</source>
          <target state="translated">die(...)を croak(...)に変換します。</target>
        </trans-unit>
        <trans-unit id="ab7d6db5ad0a6af07725954c367981536f9b78b6" translate="yes" xml:space="preserve">
          <source>Converts files from pod format (see &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt;) to HTML format. It can automatically generate indexes and cross-references, and it keeps a cache of things it knows how to cross-reference.</source>
          <target state="translated">ファイルをポッド形式（&lt;a href=&quot;../perlpod&quot;&gt;perlpodを&lt;/a&gt;参照）からHTML形式に変換します。インデックスと相互参照を自動的に生成し、相互参照する方法を知っているもののキャッシュを保持します。</target>
        </trans-unit>
        <trans-unit id="0d36251afb146d0c47c8632d04ba280e7678c879" translate="yes" xml:space="preserve">
          <source>Converts files from pod format (see &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;) to HTML format.</source>
          <target state="translated">ファイルをポッド形式（&lt;a href=&quot;perlpod&quot;&gt;perlpodを&lt;/a&gt;参照）からHTML形式に変換します。</target>
        </trans-unit>
        <trans-unit id="c4c3911f04371bd3f5a9edcc045060266cb007b3" translate="yes" xml:space="preserve">
          <source>Converts in-place the character sequence to the corresponding octet sequence in</source>
          <target state="translated">の中の対応するオクテットシーケンスに変換します。</target>
        </trans-unit>
        <trans-unit id="1f8d941153ff67ac1c72faf751cbeb55c8bc3ffd" translate="yes" xml:space="preserve">
          <source>Converts in-place the internal representation of the string from</source>
          <target state="translated">から文字列の内部表現をインプレースで変換します。</target>
        </trans-unit>
        <trans-unit id="d8b721335ac74a399b53a4c7b83d6d6e77dad793" translate="yes" xml:space="preserve">
          <source>Converts in-place the internal representation of the string from an octet sequence in the native encoding (Latin-1 or EBCDIC) to</source>
          <target state="translated">文字列の内部表現を、ネイティブエンコーディング (Latin-1 または EBCDIC)のオクテットシーケンスからインプレースで変換します。</target>
        </trans-unit>
        <trans-unit id="693d5393f2c198b06d62ba43ecdf4f6431cd33c1" translate="yes" xml:space="preserve">
          <source>Converts package specifiers from ' to ::</source>
          <target state="translated">パッケージ指定子を ' から:に変換します。</target>
        </trans-unit>
        <trans-unit id="75d0a666542f6f624e396b88276d95cb7e5e33ef" translate="yes" xml:space="preserve">
          <source>Converts the PV of an SV to UTF-8, but then turns the &lt;code&gt;SvUTF8&lt;/code&gt; flag off so that it looks like octets again.</source>
          <target state="translated">SVのPVをUTF-8に変換しますが、 &lt;code&gt;SvUTF8&lt;/code&gt; フラグをオフにして、オクテットのようにします。</target>
        </trans-unit>
        <trans-unit id="8e31e6f885da29a23f47b2b49d056556f7053dad" translate="yes" xml:space="preserve">
          <source>Converts the PV of an SV to its UTF-8-encoded form. Forces the SV to string form if it is not already. Always sets the SvUTF8 flag to avoid future validity checks even if all the bytes are invariant in UTF-8. If &lt;code&gt;flags&lt;/code&gt; has &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_get&lt;/code&gt; on &lt;code&gt;sv&lt;/code&gt; if appropriate, else not.</source>
          <target state="translated">SVのPVをUTF-8エンコード形式に変換します。SVがまだ存在しない場合は、強制的に文字列形式にします。すべてのバイトがUTF-8で不変であっても、将来の有効性チェックを回避するために、常にSvUTF8フラグを設定します。場合は &lt;code&gt;flags&lt;/code&gt; あり &lt;code&gt;SV_GMAGIC&lt;/code&gt; のビットがセットされて、します &lt;code&gt;mg_get&lt;/code&gt; に &lt;code&gt;sv&lt;/code&gt; 適切であれば、他にはありません。</target>
        </trans-unit>
        <trans-unit id="2eaeedbacb6754f3bf67d2ff185622d62fb661fa" translate="yes" xml:space="preserve">
          <source>Converts the PV of an SV to its UTF-8-encoded form. Forces the SV to string form if it is not already. Will &lt;code&gt;mg_get&lt;/code&gt; on &lt;code&gt;sv&lt;/code&gt; if appropriate. Always sets the SvUTF8 flag to avoid future validity checks even if the whole string is the same in UTF-8 as not. Returns the number of bytes in the converted string</source>
          <target state="translated">SVのPVをUTF-8エンコード形式に変換します。SVがまだ存在しない場合は、強制的に文字列形式にします。ウィル &lt;code&gt;mg_get&lt;/code&gt; に &lt;code&gt;sv&lt;/code&gt; 適切であれば。文字列全体がUTF-8と同じである場合でも、将来の有効性チェックを回避するために、常にSvUTF8フラグを設定します。変換された文字列のバイト数を返します</target>
        </trans-unit>
        <trans-unit id="d858a4518b8e2b0edbb72d67957101032b8b2eb8" translate="yes" xml:space="preserve">
          <source>Converts the UTF-8 encoded character at &lt;code&gt;p&lt;/code&gt; to its foldcase version, and stores that in UTF-8 in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, and its length in bytes in &lt;code&gt;lenp&lt;/code&gt; . Note that the buffer pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; needs to be at least &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; bytes since the foldcase version may be longer than the original character.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; のUTF-8エンコード文字をそのフォールドケースバージョンに変換し、それをUTF-8で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に、長さをバイトで &lt;code&gt;lenp&lt;/code&gt; に格納します。フォールドケースバージョンは元の文字よりも長い場合があるため、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すバッファは少なくとも &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; バイトである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="52e572e9590b1d15237c9891ad99225648f02174" translate="yes" xml:space="preserve">
          <source>Converts the UTF-8 encoded character at &lt;code&gt;p&lt;/code&gt; to its lowercase version, and stores that in UTF-8 in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, and its length in bytes in &lt;code&gt;lenp&lt;/code&gt; . Note that the buffer pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; needs to be at least &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; bytes since the lowercase version may be longer than the original character.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; のUTF-8エンコード文字を小文字バージョンに変換し、UTF-8で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に、長さをバイトで &lt;code&gt;lenp&lt;/code&gt; に格納します。小文字バージョンは元の文字よりも長い場合があるため、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すバッファーは少なくとも &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; バイトである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1a058c8fc2f6f2b47b13e70622269534e295cc45" translate="yes" xml:space="preserve">
          <source>Converts the UTF-8 encoded character at &lt;code&gt;p&lt;/code&gt; to its titlecase version, and stores that in UTF-8 in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, and its length in bytes in &lt;code&gt;lenp&lt;/code&gt; . Note that the buffer pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; needs to be at least &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; bytes since the titlecase version may be longer than the original character.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; のUTF-8エンコード文字をタイトルケースバージョンに変換し、UTF-8で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に、長さをバイトで &lt;code&gt;lenp&lt;/code&gt; に格納します。タイトルケースのバージョンは元の文字よりも長い場合があるため、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すバッファは少なくとも &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; バイトである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe4a9e2cd918385161f10e124e4741e692641e86" translate="yes" xml:space="preserve">
          <source>Converts the UTF-8 encoded character at &lt;code&gt;p&lt;/code&gt; to its uppercase version, and stores that in UTF-8 in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, and its length in bytes in &lt;code&gt;lenp&lt;/code&gt; . Note that the buffer pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; needs to be at least &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; bytes since the uppercase version may be longer than the original character.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; のUTF-8エンコード文字を大文字バージョンに変換し、UTF-8で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に、長さをバイトで &lt;code&gt;lenp&lt;/code&gt; に格納します。大文字のバージョンは元の文字よりも長い場合があるため、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すバッファは少なくとも &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; バイトである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c3a3eb4c108a356b7fa84675b8535c22195fbd62" translate="yes" xml:space="preserve">
          <source>Converts the Unicode code point &lt;code&gt;cp&lt;/code&gt; to its foldcase version, and stores that in UTF-8 in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, and its length in bytes in &lt;code&gt;lenp&lt;/code&gt; . Note that the buffer pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; needs to be at least &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; bytes since the foldcase version may be longer than the original character.</source>
          <target state="translated">Unicodeコードポイント &lt;code&gt;cp&lt;/code&gt; をフォールドケースバージョンに変換し、それをUTF-8で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に、長さをバイトで &lt;code&gt;lenp&lt;/code&gt; に格納します。フォールドケースバージョンは元の文字よりも長い場合があるため、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すバッファは少なくとも &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; バイトである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d979a580aaef23727c36debd38227c49408a9b47" translate="yes" xml:space="preserve">
          <source>Converts the Unicode code point &lt;code&gt;cp&lt;/code&gt; to its lowercase version, and stores that in UTF-8 in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, and its length in bytes in &lt;code&gt;lenp&lt;/code&gt; . Note that the buffer pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; needs to be at least &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; bytes since the lowercase version may be longer than the original character.</source>
          <target state="translated">Unicodeコードポイント &lt;code&gt;cp&lt;/code&gt; を小文字バージョンに変換し、それをUTF-8で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に、長さをバイトで &lt;code&gt;lenp&lt;/code&gt; に格納します。小文字バージョンは元の文字よりも長い場合があるため、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すバッファーは少なくとも &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; バイトである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="26f7f9dab73dba77fbe7d1b19eddf8f73d1b5671" translate="yes" xml:space="preserve">
          <source>Converts the Unicode code point &lt;code&gt;cp&lt;/code&gt; to its titlecase version, and stores that in UTF-8 in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, and its length in bytes in &lt;code&gt;lenp&lt;/code&gt; . Note that the buffer pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; needs to be at least &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; bytes since the titlecase version may be longer than the original character.</source>
          <target state="translated">Unicodeコードポイント &lt;code&gt;cp&lt;/code&gt; をタイトルケースバージョンに変換し、UTF-8で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に、長さをバイトで &lt;code&gt;lenp&lt;/code&gt; に格納します。タイトルケースのバージョンは元の文字よりも長い場合があるため、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すバッファは少なくとも &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; バイトである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="45a23ff030e1856fb80fa2a5c1977970b50af607" translate="yes" xml:space="preserve">
          <source>Converts the Unicode code point &lt;code&gt;cp&lt;/code&gt; to its uppercase version, and stores that in UTF-8 in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, and its length in bytes in &lt;code&gt;lenp&lt;/code&gt; . Note that the buffer pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; needs to be at least &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; bytes since the uppercase version may be longer than the original character.</source>
          <target state="translated">Unicodeコードポイント &lt;code&gt;cp&lt;/code&gt; を大文字バージョンに変換し、それをUTF-8で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に、長さをバイトで &lt;code&gt;lenp&lt;/code&gt; に格納します。大文字のバージョンは元の文字よりも長い場合があるため、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すバッファは少なくとも &lt;code&gt;UTF8_MAXBYTES_CASE+1&lt;/code&gt; バイトである必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c3d6ca1c2f0c8dcb86d38412b232b00c790cee63" translate="yes" xml:space="preserve">
          <source>Converts the distdir into a shell archive.</source>
          <target state="translated">distdir をシェルアーカイブに変換します。</target>
        </trans-unit>
        <trans-unit id="0cf90c7998d2448281ddcaab8fbf0e0504c17afc" translate="yes" xml:space="preserve">
          <source>Converts the name of a C source file to the most natural name of an output object file to create from it. For instance, on Unix the source file</source>
          <target state="translated">C のソースファイルの名前を、そこから作成する出力オブジェクトファイルの最も自然な名前に変換します。例えば、Unixではソースファイル</target>
        </trans-unit>
        <trans-unit id="294bcf2fccd9227784487d719b1402d9277e26d7" translate="yes" xml:space="preserve">
          <source>Converts the name of an object file to the most natural name of a output library file to create from it. For instance, on Mac OS X the object file</source>
          <target state="translated">オブジェクトファイルの名前を、そこから作成する出力ライブラリファイルの最も自然な名前に変換します。例えば、Mac OS X の場合、オブジェクトファイル</target>
        </trans-unit>
        <trans-unit id="a88553ec1e53f9448f2a6cf55dbbb5a77e63eaea" translate="yes" xml:space="preserve">
          <source>Converts the name of an object file to the most natural name of an executable file to create from it. For instance, on Mac OS X the object file</source>
          <target state="translated">オブジェクトファイルの名前を、そこから作成する実行ファイルの最も自然な名前に変換します。例えば、Mac OS X の場合、オブジェクトファイル</target>
        </trans-unit>
        <trans-unit id="bd026beb328c8d2f6c169ba8bd729c19b9c13311" translate="yes" xml:space="preserve">
          <source>Converts the offset from a count of UTF-8 chars from the start of the string, to a count of the equivalent number of bytes; if lenp is non-zero, it does the same to lenp, but this time starting from the offset, rather than from the start of the string. Handles type coercion.</source>
          <target state="translated">lenp が 0 以外の場合は lenp に同じ処理を行いますが、今回は文字列の先頭からではなくオフセットから開始します。強制型を処理します。</target>
        </trans-unit>
        <trans-unit id="00d51fe700c6a5db38a413be18aee4d817d83eb5" translate="yes" xml:space="preserve">
          <source>Converts the offset from a count of bytes from the start of the string, to a count of the equivalent number of UTF-8 chars. Handles type coercion.</source>
          <target state="translated">文字列の先頭からのバイト数からのオフセットを、UTF-8文字に相当する数のカウントに変換します。型強制に対応しています。</target>
        </trans-unit>
        <trans-unit id="29fc75feba3b4414c8baae81dd1c2325b9e8ab51" translate="yes" xml:space="preserve">
          <source>Converts the specified Latin1 character to lowercase. The results are undefined if the input doesn't fit in a byte.</source>
          <target state="translated">指定されたLatin1文字を小文字に変換します。入力がバイトに収まらない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="2c20384152ac3c169167a164a1d915c66eb3398e" translate="yes" xml:space="preserve">
          <source>Converts the specified character to foldcase. If the input is anything but an ASCII uppercase character, that input character itself is returned. Variant &lt;code&gt;toFOLD_A&lt;/code&gt; is equivalent. (There is no equivalent &lt;code&gt;to_FOLD_L1&lt;/code&gt; for the full Latin1 range, as the full generality of &lt;a href=&quot;#toFOLD_uni&quot;&gt;toFOLD_uni&lt;/a&gt; is needed there.)</source>
          <target state="translated">指定された文字をフォールドケースに変換します。入力がASCII大文字以外の場合は、その入力文字自体が返されます。バリアント &lt;code&gt;toFOLD_A&lt;/code&gt; は同等です。（同等はありません &lt;code&gt;to_FOLD_L1&lt;/code&gt; の完全な一般としてフルLatin1の範囲については、&lt;a href=&quot;#toFOLD_uni&quot;&gt;toFOLD_uniが&lt;/a&gt;そこに必要とされています。）</target>
        </trans-unit>
        <trans-unit id="7775e6edae290c80035bdde5ee180cafb1a95c9a" translate="yes" xml:space="preserve">
          <source>Converts the specified character to lowercase using the current locale's rules, if possible; otherwise returns the input character itself.</source>
          <target state="translated">指定した文字を、可能であれば現在のロケールのルールを用いて小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="6f3b386523ea039f2b6d6f2c24bea443697341ca" translate="yes" xml:space="preserve">
          <source>Converts the specified character to lowercase. If the input is anything but an ASCII uppercase character, that input character itself is returned. Variant &lt;code&gt;toLOWER_A&lt;/code&gt; is equivalent.</source>
          <target state="translated">指定された文字を小文字に変換します。入力がASCII大文字以外の場合は、その入力文字自体が返されます。 &lt;code&gt;toLOWER_A&lt;/code&gt; バリアントは同等です。</target>
        </trans-unit>
        <trans-unit id="4c7f73f6dc4ef675e0ea0c8a1169c8b80eea8488" translate="yes" xml:space="preserve">
          <source>Converts the specified character to titlecase. If the input is anything but an ASCII lowercase character, that input character itself is returned. Variant &lt;code&gt;toTITLE_A&lt;/code&gt; is equivalent. (There is no &lt;code&gt;toTITLE_L1&lt;/code&gt; for the full Latin1 range, as the full generality of &lt;a href=&quot;#toTITLE_uni&quot;&gt;toTITLE_uni&lt;/a&gt; is needed there. Titlecase is not a concept used in locale handling, so there is no functionality for that.)</source>
          <target state="translated">指定された文字をタイトルケースに変換します。入力がASCII小文字以外の場合、その入力文字自体が返されます。バリアント &lt;code&gt;toTITLE_A&lt;/code&gt; は同等です。（何もありません &lt;code&gt;toTITLE_L1&lt;/code&gt; の完全な一般としてフルLatin1の範囲については、&lt;a href=&quot;#toTITLE_uni&quot;&gt;toTITLE_uniが&lt;/a&gt;そこに必要とされている。タイトル文字は、ロケール処理に使用される、概念ではないので、そのための機能がありません。）</target>
        </trans-unit>
        <trans-unit id="38943cd0db5a909d68224b0f5858aec10b5fbd97" translate="yes" xml:space="preserve">
          <source>Converts the specified character to uppercase. If the input is anything but an ASCII lowercase character, that input character itself is returned. Variant &lt;code&gt;toUPPER_A&lt;/code&gt; is equivalent.</source>
          <target state="translated">指定された文字を大文字に変換します。入力がASCII小文字以外の場合、その入力文字自体が返されます。バリアント &lt;code&gt;toUPPER_A&lt;/code&gt; は同等です。</target>
        </trans-unit>
        <trans-unit id="cbfe95a5d57e473ed974a2c8dd7b4c3a3dc6f133" translate="yes" xml:space="preserve">
          <source>Converts the tarfile into a uuencoded file</source>
          <target state="translated">tar ファイルを uuencode ファイルに変換します。</target>
        </trans-unit>
        <trans-unit id="8105a421b149b241dd9345f828f8405806dc4509" translate="yes" xml:space="preserve">
          <source>Converts the value pointed to by offsetp from a count of UTF-8 chars from the start of the string, to a count of the equivalent number of bytes; if lenp is non-zero, it does the same to lenp, but this time starting from the offset, rather than from the start of the string. Handles magic and type coercion.</source>
          <target state="translated">lenp が 0 以外の場合は lenp に同じことをしますが、今回は文字列の先頭からではなくオフセットから始まります。マジックと型強制を処理します。</target>
        </trans-unit>
        <trans-unit id="40b55cad996caa19ed6d279ac88d5fa4b681b529" translate="yes" xml:space="preserve">
          <source>Converts the value pointed to by offsetp from a count of bytes from the start of the string, to a count of the equivalent number of UTF-8 chars. Handles magic and type coercion.</source>
          <target state="translated">offsetp が指す値を、文字列の先頭からのバイト数から、UTF-8 文字の相当数のカウントに変換します。マジックと型強制に対応しています。</target>
        </trans-unit>
        <trans-unit id="a9134f42b0fc69f710ef38795745edc87cc85d2d" translate="yes" xml:space="preserve">
          <source>Cooperative multitasking systems have running threads give up control if one of two things happen. If a thread calls a yield function, it gives up control. It also gives up control if the thread does something that would cause it to block, such as perform I/O. In a cooperative multitasking implementation, one thread can starve all the others for CPU time if it so chooses.</source>
          <target state="translated">協調型マルチタスクシステムでは、実行中のスレッドが次の2つのいずれかが発生した場合に制御を放棄します。スレッドが降伏関数を呼び出した場合、スレッドは制御を放棄します。また、スレッドがI/Oを実行するなど、スレッドがブロックされる原因となるようなことをした場合も制御を放棄します。協調的なマルチタスクの実装では、1つのスレッドがその気になれば、他のすべてのスレッドのCPU時間を奪うことができます。</target>
        </trans-unit>
        <trans-unit id="d032796f15a64112e4e06fa18894fca88d7a2f99" translate="yes" xml:space="preserve">
          <source>Copied from &lt;a href=&quot;../ipc/cmd#%24path-%3d-can_run(-PROGRAM-)%3b&quot;&gt;IPC::Cmd&lt;/a&gt;, but modified into a method (and removed &lt;code&gt;$INSTANCES&lt;/code&gt; capability).</source>
          <target state="translated">&lt;a href=&quot;../ipc/cmd#%24path-%3d-can_run(-PROGRAM-)%3b&quot;&gt;IPC :: Cmd&lt;/a&gt;からコピーしましたが、メソッドに変更しました（および &lt;code&gt;$INSTANCES&lt;/code&gt; 機能を削除しました）。</target>
        </trans-unit>
        <trans-unit id="58da612a1bc6d614d12d58ef8797a656a94e658e" translate="yes" xml:space="preserve">
          <source>Copies a double into a new SV, optionally blessing the SV. The &lt;code&gt;rv&lt;/code&gt; argument will be upgraded to an RV. That RV will be modified to point to the new SV. The &lt;code&gt;classname&lt;/code&gt; argument indicates the package for the blessing. Set &lt;code&gt;classname&lt;/code&gt; to &lt;code&gt;NULL&lt;/code&gt; to avoid the blessing. The new SV will have a reference count of 1, and the RV will be returned.</source>
          <target state="translated">doubleを新しいSVにコピーし、オプションでSVを祝福します。 &lt;code&gt;rv&lt;/code&gt; 引数は、RVにアップグレードされます。そのRVは、新しいSVを指すように変更されます。 &lt;code&gt;classname&lt;/code&gt; 引数は、祝福のためのパッケージを示します。祝福を避けるために、 &lt;code&gt;classname&lt;/code&gt; を &lt;code&gt;NULL&lt;/code&gt; に設定します。新しいSVの参照カウントは1になり、RVが返されます。</target>
        </trans-unit>
        <trans-unit id="c347bb9b827a2334958f6bf2f2ca6f534daeac0e" translate="yes" xml:space="preserve">
          <source>Copies a double into the given SV, upgrading first if necessary. Does not handle 'set' magic. See also &lt;code&gt;sv_setnv_mg&lt;/code&gt; .</source>
          <target state="translated">doubleを指定されたSVにコピーし、必要に応じて最初にアップグレードします。「セット」マジックを処理しません。 &lt;code&gt;sv_setnv_mg&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b27095a6cd52e5d6134280b02b569beed020d999" translate="yes" xml:space="preserve">
          <source>Copies a pointer into a new SV, optionally blessing the SV. The &lt;code&gt;rv&lt;/code&gt; argument will be upgraded to an RV. That RV will be modified to point to the new SV. If the &lt;code&gt;pv&lt;/code&gt; argument is NULL then &lt;code&gt;PL_sv_undef&lt;/code&gt; will be placed into the SV. The &lt;code&gt;classname&lt;/code&gt; argument indicates the package for the blessing. Set &lt;code&gt;classname&lt;/code&gt; to &lt;code&gt;NULL&lt;/code&gt; to avoid the blessing. The new SV will have a reference count of 1, and the RV will be returned.</source>
          <target state="translated">ポインターを新しいSVにコピーし、オプションでSVを祝福します。 &lt;code&gt;rv&lt;/code&gt; 引数は、RVにアップグレードされます。そのRVは、新しいSVを指すように変更されます。 &lt;code&gt;pv&lt;/code&gt; 引数がNULLの場合、 &lt;code&gt;PL_sv_undef&lt;/code&gt; がSVに配置されます。 &lt;code&gt;classname&lt;/code&gt; 引数は、祝福のためのパッケージを示します。祝福を避けるために、 &lt;code&gt;classname&lt;/code&gt; を &lt;code&gt;NULL&lt;/code&gt; に設定します。新しいSVの参照カウントは1になり、RVが返されます。</target>
        </trans-unit>
        <trans-unit id="1786cfa4001f16d4465ff1be0891e50c99f2c03f" translate="yes" xml:space="preserve">
          <source>Copies a string (possibly containing embedded &lt;code&gt;NUL&lt;/code&gt; characters) into an SV. The &lt;code&gt;len&lt;/code&gt; parameter indicates the number of bytes to be copied. If the &lt;code&gt;ptr&lt;/code&gt; argument is NULL the SV will become undefined. Does not handle 'set' magic. See &lt;code&gt;sv_setpvn_mg&lt;/code&gt; .</source>
          <target state="translated">文字列（埋め込まれた &lt;code&gt;NUL&lt;/code&gt; 文字を含む場合があります）をSVにコピーします。 &lt;code&gt;len&lt;/code&gt; パラメータがコピーされるバイト数を示します。 &lt;code&gt;ptr&lt;/code&gt; 引数がNULLの場合、SVは未定義になります。「セット」マジックを処理しません。 &lt;code&gt;sv_setpvn_mg&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d174a878d53f27a45b16e4832647c4bb0c4f91eb" translate="yes" xml:space="preserve">
          <source>Copies a string into a new SV, optionally blessing the SV. The length of the string must be specified with &lt;code&gt;n&lt;/code&gt; . The &lt;code&gt;rv&lt;/code&gt; argument will be upgraded to an RV. That RV will be modified to point to the new SV. The &lt;code&gt;classname&lt;/code&gt; argument indicates the package for the blessing. Set &lt;code&gt;classname&lt;/code&gt; to &lt;code&gt;NULL&lt;/code&gt; to avoid the blessing. The new SV will have a reference count of 1, and the RV will be returned.</source>
          <target state="translated">文字列を新しいSVにコピーし、オプションでSVを祝福します。文字列の長さは &lt;code&gt;n&lt;/code&gt; で指定する必要があります。 &lt;code&gt;rv&lt;/code&gt; 引数は、RVにアップグレードされます。そのRVは、新しいSVを指すように変更されます。 &lt;code&gt;classname&lt;/code&gt; 引数は、祝福のためのパッケージを示します。祝福を避けるために、 &lt;code&gt;classname&lt;/code&gt; を &lt;code&gt;NULL&lt;/code&gt; に設定します。新しいSVの参照カウントは1になり、RVが返されます。</target>
        </trans-unit>
        <trans-unit id="2cc17ff1663cdcd5ccc34774a29afbe226d6bde7" translate="yes" xml:space="preserve">
          <source>Copies a string into an SV. The string must be terminated with a &lt;code&gt;NUL&lt;/code&gt; character. Does not handle 'set' magic. See &lt;code&gt;sv_setpv_mg&lt;/code&gt; .</source>
          <target state="translated">文字列をSVにコピーします。文字列は &lt;code&gt;NUL&lt;/code&gt; 文字で終了する必要があります。「セット」マジックを処理しません。 &lt;code&gt;sv_setpv_mg&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="acd7e631f37132f2461a9f4128a317eb4d34d689" translate="yes" xml:space="preserve">
          <source>Copies a stringified representation of the source SV into the destination SV. Automatically performs any necessary mg_get and coercion of numeric values into strings. Guaranteed to preserve UTF8 flag even from overloaded objects. Similar in nature to sv_2pv[_flags] but operates directly on an SV instead of just the string. Mostly uses sv_2pv_flags to do its work, except when that would lose the UTF-8'ness of the PV.</source>
          <target state="translated">文字列化された元 SV の表現をコピー先 SV にコピーします。必要な mg_get や数値の文字列への強制処理を自動的に行います。オーバーロードされたオブジェクトからも UTF8 フラグを保持することを保証する。sv_2pv[_flags]に似ていますが、文字列だけではなくSVに対して直接操作します。PVのUTF-8性が失われる場合を除き、ほとんどの場合はsv_2pv_flagsを使用して動作します。</target>
        </trans-unit>
        <trans-unit id="1ceb5498aa08b64599a670ddd20b40acf24c2850" translate="yes" xml:space="preserve">
          <source>Copies all the files that are in the MANIFEST file to a newly created directory with the name &lt;code&gt;$(DISTNAME)-$(VERSION)&lt;/code&gt;. If that directory exists, it will be removed first.</source>
          <target state="translated">MANIFESTファイル内のすべてのファイルを、 &lt;code&gt;$(DISTNAME)-$(VERSION)&lt;/code&gt; という名前で新しく作成されたディレクトリにコピーします。そのディレクトリが存在する場合、最初に削除されます。</target>
        </trans-unit>
        <trans-unit id="6f5a43cdae0ae6da25d7ce8fda19fe8a78a5ff5d" translate="yes" xml:space="preserve">
          <source>Copies an integer into a new SV, optionally blessing the SV. The &lt;code&gt;rv&lt;/code&gt; argument will be upgraded to an RV. That RV will be modified to point to the new SV. The &lt;code&gt;classname&lt;/code&gt; argument indicates the package for the blessing. Set &lt;code&gt;classname&lt;/code&gt; to &lt;code&gt;NULL&lt;/code&gt; to avoid the blessing. The new SV will have a reference count of 1, and the RV will be returned.</source>
          <target state="translated">整数を新しいSVにコピーし、オプションでSVを祝福します。 &lt;code&gt;rv&lt;/code&gt; 引数は、RVにアップグレードされます。そのRVは、新しいSVを指すように変更されます。 &lt;code&gt;classname&lt;/code&gt; 引数は、祝福のためのパッケージを示します。祝福を避けるために、 &lt;code&gt;classname&lt;/code&gt; を &lt;code&gt;NULL&lt;/code&gt; に設定します。新しいSVの参照カウントは1になり、RVが返されます。</target>
        </trans-unit>
        <trans-unit id="87655bfb9567748496e5eaf66f62a786876d2425" translate="yes" xml:space="preserve">
          <source>Copies an integer into the given SV, also updating its string value. Does not handle 'set' magic. See &lt;code&gt;sv_setpviv_mg&lt;/code&gt; .</source>
          <target state="translated">整数を指定されたSVにコピーし、その文字列値も更新します。「セット」マジックを処理しません。 &lt;code&gt;sv_setpviv_mg&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f2eb4580cc9eaa76949e7acc7122330f226683c" translate="yes" xml:space="preserve">
          <source>Copies an integer into the given SV, upgrading first if necessary. Does not handle 'set' magic. See also &lt;code&gt;sv_setiv_mg&lt;/code&gt; .</source>
          <target state="translated">整数を指定されたSVにコピーし、必要に応じて最初にアップグレードします。「セット」マジックを処理しません。 &lt;code&gt;sv_setiv_mg&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="9a3984d0cef29ac256b94baf888dc25a6bab8951" translate="yes" xml:space="preserve">
          <source>Copies an unsigned integer into a new SV, optionally blessing the SV. The &lt;code&gt;rv&lt;/code&gt; argument will be upgraded to an RV. That RV will be modified to point to the new SV. The &lt;code&gt;classname&lt;/code&gt; argument indicates the package for the blessing. Set &lt;code&gt;classname&lt;/code&gt; to &lt;code&gt;NULL&lt;/code&gt; to avoid the blessing. The new SV will have a reference count of 1, and the RV will be returned.</source>
          <target state="translated">符号なし整数を新しいSVにコピーし、オプションでSVを祝福します。 &lt;code&gt;rv&lt;/code&gt; 引数は、RVにアップグレードされます。そのRVは、新しいSVを指すように変更されます。 &lt;code&gt;classname&lt;/code&gt; 引数は、祝福のためのパッケージを示します。祝福を避けるために、 &lt;code&gt;classname&lt;/code&gt; を &lt;code&gt;NULL&lt;/code&gt; に設定します。新しいSVの参照カウントは1になり、RVが返されます。</target>
        </trans-unit>
        <trans-unit id="817708bbdae5a3bc2e1729daf57c7384a8ed11df" translate="yes" xml:space="preserve">
          <source>Copies an unsigned integer into the given SV, upgrading first if necessary. Does not handle 'set' magic. See also &lt;code&gt;sv_setuv_mg&lt;/code&gt; .</source>
          <target state="translated">符号なし整数を指定されたSVにコピーし、必要に応じて最初にアップグレードします。「セット」マジックを処理しません。 &lt;code&gt;sv_setuv_mg&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="f42b69b0be33ffa2663dc670be8d62b1f6b76a37" translate="yes" xml:space="preserve">
          <source>Copies each directory tree of %from_to to its corresponding value preserving timestamps and permissions.</source>
          <target state="translated">from_to の各ディレクトリ・ツリーを、タイムスタンプとパーミッションを保持したまま、対応する値にコピーします。</target>
        </trans-unit>
        <trans-unit id="547ef09412d01381bdd77f45cd22559f6b5f129c" translate="yes" xml:space="preserve">
          <source>Copies each key of %from_to to its corresponding value efficiently. Filenames with the extension .pm are autosplit into the $autosplit_dir. Any destination directories are created.</source>
          <target state="translated">from_to の各キーを対応する値に効率的にコピーします。拡張子 .pm を持つファイル名は、$autosplit_dir に自動スプリットされます。任意の宛先ディレクトリが作成されます。</target>
        </trans-unit>
        <trans-unit id="8b4556d985cc8c666fe1310a61eb0e2bd704d901" translate="yes" xml:space="preserve">
          <source>Copies sources to the destination. Multiple sources are allowed if destination is an existing directory.</source>
          <target state="translated">ソースを宛先にコピーします。コピー先が既存のディレクトリの場合、複数のソースを使用できます。</target>
        </trans-unit>
        <trans-unit id="22aa8bfe9c7cb3953e35f5697eea8150b160ffab" translate="yes" xml:space="preserve">
          <source>Copies the contents of the source SV &lt;code&gt;ssv&lt;/code&gt; into the destination SV &lt;code&gt;dsv&lt;/code&gt; . The source SV may be destroyed if it is mortal, so don't use this function if the source SV needs to be reused. Does not handle 'set' magic on destination SV. Calls 'get' magic on source SV. Loosely speaking, it performs a copy-by-value, obliterating any previous content of the destination.</source>
          <target state="translated">ソースSV &lt;code&gt;ssv&lt;/code&gt; の内容を宛先SV &lt;code&gt;dsv&lt;/code&gt; にコピーします。致命的な場合、ソースSVが破壊される可能性があるため、ソースSVを再利用する必要がある場合は、この関数を使用しないでください。宛先SVで「設定」マジックを処理しません。ソースSVで「取得」マジックを呼び出します。大まかに言えば、値によるコピーを実行し、宛先の以前のコンテンツをすべて消去します。</target>
        </trans-unit>
        <trans-unit id="60fc994ce68e4c7b21a4843b708d86bf7c3db663" translate="yes" xml:space="preserve">
          <source>Copies the contents of the source SV &lt;code&gt;ssv&lt;/code&gt; into the destination SV &lt;code&gt;dsv&lt;/code&gt; . The source SV may be destroyed if it is mortal, so don't use this function if the source SV needs to be reused. Does not handle 'set' magic. Loosely speaking, it performs a copy-by-value, obliterating any previous content of the destination. If the &lt;code&gt;flags&lt;/code&gt; parameter has the &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_get&lt;/code&gt; on &lt;code&gt;ssv&lt;/code&gt; if appropriate, else not. If the &lt;code&gt;flags&lt;/code&gt; parameter has the &lt;code&gt;SV_NOSTEAL&lt;/code&gt; bit set then the buffers of temps will not be stolen. &amp;lt;sv_setsv&amp;gt; and &lt;code&gt;sv_setsv_nomg&lt;/code&gt; are implemented in terms of this function.</source>
          <target state="translated">ソースSV &lt;code&gt;ssv&lt;/code&gt; の内容を宛先SV &lt;code&gt;dsv&lt;/code&gt; にコピーします。致命的な場合、ソースSVが破壊される可能性があるため、ソースSVを再利用する必要がある場合は、この関数を使用しないでください。 「セット」マジックを処理しません。大まかに言えば、値によるコピーを実行し、宛先の以前のコンテンツをすべて消去します。場合は &lt;code&gt;flags&lt;/code&gt; があるパラメータ &lt;code&gt;SV_GMAGIC&lt;/code&gt; のビットセットは、う &lt;code&gt;mg_get&lt;/code&gt; に &lt;code&gt;ssv&lt;/code&gt; 適切な場合には、他にありません。 &lt;code&gt;flags&lt;/code&gt; パラメータに &lt;code&gt;SV_NOSTEAL&lt;/code&gt; ビットが設定されている場合、tempsのバッファは盗まれません。 &amp;lt;sv_setsv&amp;gt;および &lt;code&gt;sv_setsv_nomg&lt;/code&gt; は、この関数の観点から実装されています。</target>
        </trans-unit>
        <trans-unit id="847212512bee6cfe3c2fc61106e5643ef825dc7e" translate="yes" xml:space="preserve">
          <source>Copies the files that are the keys in %src to the $dest_dir. %src is typically returned by the maniread() function.</source>
          <target state="translated">src のキーであるファイルを $dest_dir にコピーします。%src は通常 maniread()関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="1e68b585bfbe265f09cd9d4efb3e0feed1b83417" translate="yes" xml:space="preserve">
          <source>Copies the magic from one SV to another. See &lt;code&gt;sv_magic&lt;/code&gt; .</source>
          <target state="translated">魔法をあるSVから別のSVにコピーします。 &lt;code&gt;sv_magic&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="844182ad4ab003932666f9c6d69d92cbb8e46845" translate="yes" xml:space="preserve">
          <source>Coping with duplicate mappings</source>
          <target state="translated">重複したマッピングへの対処</target>
        </trans-unit>
        <trans-unit id="82e1de5d54543510504259bd75e1005b5001c11a" translate="yes" xml:space="preserve">
          <source>Copy Constructor</source>
          <target state="translated">コピーコンストラクタ</target>
        </trans-unit>
        <trans-unit id="5534252cfc67f8ea30c5aeb4b712455aa3844020" translate="yes" xml:space="preserve">
          <source>Copy files or filehandles</source>
          <target state="translated">ファイルまたはファイルハンドルのコピー</target>
        </trans-unit>
        <trans-unit id="8f8861ebe6be1c187f524367a7e8796012ce6621" translate="yes" xml:space="preserve">
          <source>Copy it from there to %PlatformSDKDir%\Bin</source>
          <target state="translated">そこから %PlatformSDKDir%Bin にコピーします。</target>
        </trans-unit>
        <trans-unit id="262ea28b5df50512a45d54b1fa1054f3be93e5d2" translate="yes" xml:space="preserve">
          <source>Copy on Write</source>
          <target state="translated">コピーオンライト</target>
        </trans-unit>
        <trans-unit id="a4bc97f3ddf500700682ce93b45d0b65e29cc177" translate="yes" xml:space="preserve">
          <source>Copy some of the magic from an existing SV to new localized version of that SV. Container magic (eg %ENV, $1, tie) gets copied, value magic doesn't (eg taint, pos).</source>
          <target state="translated">既存の SV からその SV の新しいローカライズされたバージョンにマジックの一部をコピーします。コンテナマジック (例:%ENV,$1,tie)はコピーされますが、値マジック (例:taint,pos)はコピーされません。</target>
        </trans-unit>
        <trans-unit id="6d73bd4397739daf068f0e0c81f47887b133737c" translate="yes" xml:space="preserve">
          <source>Copy the miniperl executable from the native build done earlier to replace the cross compiled miniperl.</source>
          <target state="translated">クロスコンパイルされたminiperlを置き換えるために、以前に行ったネイティブビルドからminiperl実行ファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="944d3ba1daacc35a1c39f04db6c6016f8a5e0184" translate="yes" xml:space="preserve">
          <source>Copy your Perl executable to a BS2000 LLM using bs2cp:</source>
          <target state="translated">bs2cpを使ってPerlの実行ファイルをBS2000 LLMにコピーします。</target>
        </trans-unit>
        <trans-unit id="2d7ed2211bbc181246d723daf7d8159780f901a4" translate="yes" xml:space="preserve">
          <source>Copy your header files and C files to this directory</source>
          <target state="translated">ヘッダーファイルとCファイルをこのディレクトリにコピーします。</target>
        </trans-unit>
        <trans-unit id="704f751eff0d0b505d7bf92d8e801e4d308664b6" translate="yes" xml:space="preserve">
          <source>Copying and pasting code without understanding it, while superstitiously believing in its value. This term originated from preindustrial cultures dealing with the detritus of explorers and colonizers of technologically advanced cultures. See</source>
          <target state="translated">迷信的にその価値を信じながら、コードを理解せずにコピーして貼り付けること。この用語は、産業革命以前の文化が、技術的に進んだ文化の探検家や植民地化した人々の残骸を扱ったことに由来します。参照</target>
        </trans-unit>
        <trans-unit id="f48221dc8de0edb298f93c3d9ea0b286f39f81ac" translate="yes" xml:space="preserve">
          <source>Copying private information out of your system. Even something as simple as your user name is of value to others. Much useful information could be gleaned from your environment variables for example.</source>
          <target state="translated">あなたのシステムから個人情報をコピーします。あなたのユーザー名のような単純なものでさえ、他の人にとっては価値のあるものです。例えば、環境変数から多くの有用な情報を得ることができます。</target>
        </trans-unit>
        <trans-unit id="ba61f765e33a7dbdaa5dc699f7442584180fbf0c" translate="yes" xml:space="preserve">
          <source>Copyright &amp;copy; 2012 Tom Christiansen.</source>
          <target state="translated">Copyright&amp;copy;2012 Tom Christiansen。</target>
        </trans-unit>
        <trans-unit id="937d2f60d09c53d79a1381de58ec4983d7faadb3" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1990-2011 by Larry Wall and others.</source>
          <target state="translated">Copyright (C)1990-2011 by Larry Wall and others.</target>
        </trans-unit>
        <trans-unit id="fb8450e1f5cfd8fc44ca561023832e2026e0d699" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1990-2012 by Larry Wall and others.</source>
          <target state="translated">Copyright (C)1990-2012 by Larry Wall and others.</target>
        </trans-unit>
        <trans-unit id="866e8b342f220185b06062e3c92301f53f840c56" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All rights reserved.</source>
          <target state="translated">Copyright (C)1991-2,RSA Data Security,Inc.1991年に作成されました。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="8fd1a6d880564bdc3ea1e763f953df5ebac7e46e" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1994-2013 Larry Wall</source>
          <target state="translated">著作権 (C)1994-2013 ラリー・ウォール</target>
        </trans-unit>
        <trans-unit id="1c0c559930ca4225e8816cff4ee2873c1c41a1ac" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1995, 1996, 1997, 1998 Doug MacEachern and Jon Orwant. All Rights Reserved.</source>
          <target state="translated">Copyright (C)1995,1996,1997,1998 Doug MacEachern and Jon Orwant.すべての権利は予約されています。</target>
        </trans-unit>
        <trans-unit id="292274a2b01d4df1c901b9114cee5b641d729f45" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1996-2002,2005,2006 David Muir Sharnoff. Copyright (C) 2005 Aristotle Pagaltzis Copyright (C) 2012-2013 Google, Inc. This module may be modified, used, copied, and redistributed at your own risk. Although allowed by the preceding license, please do not publicly redistribute modified versions of this code with the name &quot;Text::Tabs&quot; unless it passes the unmodified Text::Tabs test suite.</source>
          <target state="translated">Copyright (C)1996-2002,2005,2006 David Muir Sharnoff.Copyright (C)2005 Aristotle Pagaltzis Copyright (C)2012-2013 Google,Inc.このモジュールは、あなた自身の責任で変更、使用、複製、再配布することができます。前述のライセンスで許可されていますが、修正されていないText::Tabsテストスイートに合格しない限り、&quot;Text::Tabs &quot;という名前のこのコードの修正版を公に再配布しないでください。</target>
        </trans-unit>
        <trans-unit id="02bb538e3acc9fba7e66a4108eaa2f54189885d2" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1996-2009 David Muir Sharnoff. Copyright (C) 2012-2013 Google, Inc. This module may be modified, used, copied, and redistributed at your own risk. Although allowed by the preceding license, please do not publicly redistribute modified versions of this code with the name &quot;Text::Wrap&quot; unless it passes the unmodified Text::Wrap test suite.</source>
          <target state="translated">Copyright (C)1996-2009 David Muir Sharnoff.著作権 (C)2012-2013 Google,Inc.このモジュールは、あなた自身の責任において、改変、使用、複製、再配布することができます。前述のライセンスで許可されていますが、 改変されていないText::Wrapテスト・スイートに合格しない限り、 「Text::Wrap」という名前のこのコードの改変されたバージョンを公に再配布しないでください。</target>
        </trans-unit>
        <trans-unit id="77d8ad6518ef8e3ffa4a429ac08f118904c382ac" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1997, 1999 Tom Phoenix</source>
          <target state="translated">Copyright (C)1997,1999 トム・フェニックス</target>
        </trans-unit>
        <trans-unit id="67e16ccb30ea63aa1d756ce57f18d2d7b5847ff8" translate="yes" xml:space="preserve">
          <source>Copyright (C) 1998, 2002, 2003 Jon Orwant. All Rights Reserved.</source>
          <target state="translated">著作権 (C)1998,2002,2003 Jon Orwant.すべての権利は予約されています。</target>
        </trans-unit>
        <trans-unit id="b90a8995c2bc16a451a02631a6a11820b0642403" translate="yes" xml:space="preserve">
          <source>Copyright (C) 2002-2009 Richard Clamp. All Rights Reserved.</source>
          <target state="translated">著作権(C)2002-2009リチャードクランプ。すべての権利は予約されています。</target>
        </trans-unit>
        <trans-unit id="066dc5f0420738b9ed994bc87aed4131e1192b32" translate="yes" xml:space="preserve">
          <source>Copyright (C) 2003-2015 Mark Shelor</source>
          <target state="translated">Copyright (C)2003-2015 Mark Shelor</target>
        </trans-unit>
        <trans-unit id="1c7f20037aad67be66061eee55047374368b5f2e" translate="yes" xml:space="preserve">
          <source>Copyright (C) 2004, 2008 Matthijs van Duin. All rights reserved. Copyright (C) 2014 cPanel Inc. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">著作権(C)2004、2008 Matthijs van Duin。無断複写・転載を禁じます。著作権(C)2014年cPanel Inc.無断複写・転載を禁じます。このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="5def902ce53af0d66c9ae0b1a9f55a7bc540b36c" translate="yes" xml:space="preserve">
          <source>Copyright (C) 2006-2007 by (Anno Siegel)</source>
          <target state="translated">著作権 (C)2006-2007 by (Anno Siegel)</target>
        </trans-unit>
        <trans-unit id="d16dc4251e47686ff5ed08ba79678470456a743a" translate="yes" xml:space="preserve">
          <source>Copyright (C) 2011, 2012, 2013 Andrew Main (Zefram) &amp;lt;zefram@fysh.org&amp;gt;</source>
          <target state="translated">Copyright（C）2011、2012、2013 Andrew Main（Zefram）&amp;lt;zefram@fysh.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c99e15fbe5fafed3fe83907c942a8467ca2f0856" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1995 Graham Barr &amp;amp; Nick Ing-Simmons. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright（c）1995 Graham Barr＆Nick Ing-Simmons。全著作権所有。このプログラムはフリーソフトウェアです。Perl自体と同じ条件で再配布および/または変更できます。</target>
        </trans-unit>
        <trans-unit id="95d67aab425ae8ab541cdf2624605b8e79d554fe" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1995-2011 Paul Marquess. All rights reserved. Copyright (c) 2011-2014 Reini Urban. All rights reserved.</source>
          <target state="translated">著作権(c)1995-2011 Paul Marquess。すべての権利を保有しています。著作権(c)2011-2014 Reini Urban。無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="f9a66947e2ff3697bb460252be39f2139fd2dfb8" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1995-2012 Paul Marquess. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright (c)1995-2012 Paul Marquess.すべての権利を保有しています。このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="a331cc5bbf130d1638077c14f80eecf3e2a52eaf" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1995-2014 Paul Marquess. All rights reserved.</source>
          <target state="translated">Copyright (c)1995-2014 Paul Marquess.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="733de8f3f1ca09b5c9786044fb092e7f4c05f294" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1995-98 Ilya Zakharevich. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">著作権(c)1995-98イリヤZakharevich。すべての権利を保有しています。このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更ができます。</target>
        </trans-unit>
        <trans-unit id="ecaed13460704998ba577e4c2d2468a151c24b30" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1996, 1997 Malcolm Beattie Copyright (c) 2008, 2010, 2013, 2014 Reini Urban</source>
          <target state="translated">Copyright (c)1996,1997 Malcolm Beattie Copyright (c)2008,2010,2013,2014 Reini Urban</target>
        </trans-unit>
        <trans-unit id="1feb9747b49165f4eb65853775088ee0251ff609" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1996-2002 Douglas E. Wegscheid. All rights reserved.</source>
          <target state="translated">著作権(c)1996-2002 ダグラス・E・ウェグシード。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="cc400f4ad8917f7b799fd3975597a9810d8ce636" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1996-2014 Gurusamy Sarathy. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright (c)1996-2014 Gurusamy Sarathy.すべての著作権は留保されています。このプログラムはフリーソフトウェアです。</target>
        </trans-unit>
        <trans-unit id="485f651d515be5bba642d42e474826a93f61bb6b" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1996-8 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright（c）1996-8 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;。全著作権所有。このプログラムはフリーソフトウェアです。Perl自体と同じ条件で再配布および/または変更できます。</target>
        </trans-unit>
        <trans-unit id="08e4cdda088cf550ea65b3bf4dc89aba9b493bbc" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1997-2003 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright（c）1997-2003 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;。全著作権所有。このプログラムはフリーソフトウェアです。Perl自体と同じ条件で再配布および/または変更できます。</target>
        </trans-unit>
        <trans-unit id="4887e8376b496893469d0bac43718dbc07ae1822" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1997-2003 Graham Barr, 2003-2007 David Rolsky. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright (c)1997-2003 Graham Barr,2003-2007 David Rolsky.このプログラムの著作権はすべて保有しています。このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="d7245b2dcd573952f48717b9921c61d1e9b2c21e" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1997-2007 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright（c）1997-2007 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;。全著作権所有。このプログラムはフリーソフトウェアです。Perl自体と同じ条件で再配布および/または変更できます。</target>
        </trans-unit>
        <trans-unit id="6d6af5defc144adda44580441213764dbdd5a579" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and other authors as noted. All rights reserved.</source>
          <target state="translated">Copyright (c)1997-2010 Tom Christiansen,Nathan Torkington,and other authors as mentioned.すべての著作権は留保されています。</target>
        </trans-unit>
        <trans-unit id="96ab04550bbdbe3276e7b627e8ac745ea70c4e50" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1997-2013 Tom Christiansen, Nathan Torkington, and other authors as noted. All rights reserved.</source>
          <target state="translated">Copyright (c)1997-2013 Tom Christiansen,Nathan Torkington,and other authors as mentioned.すべての著作権は留保されています。</target>
        </trans-unit>
        <trans-unit id="b85bffc2f702e5a69d96edf1040c8231c9905e16" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1997-8 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright（c）1997-8 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;。全著作権所有。このプログラムはフリーソフトウェアです。Perl自体と同じ条件で再配布および/または変更できます。</target>
        </trans-unit>
        <trans-unit id="f7a94533b6d04a11dc7e8f73fc628424ecae3fb0" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1997-8 Graham Barr. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">著作権 (c)1997-8 Graham Barr.すべての権利を保有しています。このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="422bbbfa2ebf0ecbc7060450d7441d3ab485a17c" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1998+ Sean M. Burke. All rights reserved.</source>
          <target state="translated">著作権 (c)1998+ショーン・M・バーク。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="4c5d0fa3fbcbb72648eeb53bb25226cd8e07fc2d" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1998-2000 Joshua Nathaniel Pritikin.</source>
          <target state="translated">著作権(c)1998-2000 ジョシュア・ナサニエル・プリティキン</target>
        </trans-unit>
        <trans-unit id="f70857aa7efdb3e62785ad1d300160624d1ca8c4" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1998-2004 Sean M. Burke. All rights reserved.</source>
          <target state="translated">著作権(c)1998-2004ショーン・M・バーク。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="7bf33c9fe762000df4df0dfadc70c956cdf17ba0" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1998-2004 Tom Hughes &amp;lt;</source>
          <target state="translated">Copyright（c）1998-2004 Tom Hughes &amp;lt;</target>
        </trans-unit>
        <trans-unit id="e0ae8e826ee43e27b9f80f2f471b56b206c7c868" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1999 Tuomas J. Lukka &amp;lt;lukka@iki.fi&amp;gt;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as perl itself.</source>
          <target state="translated">Copyright（c）1999 Tuomas J. Lukka &amp;lt;lukka@iki.fi&amp;gt;。全著作権所有。このプログラムはフリーソフトウェアです。あなたはそれをperl自身と同じ条件で再配布および/または修正することができます。</target>
        </trans-unit>
        <trans-unit id="a6b26641bc7ea8de46aed22323cf3dc2c633f52e" translate="yes" xml:space="preserve">
          <source>Copyright (c) 1999-2004 Sean M. Burke. All rights reserved.</source>
          <target state="translated">著作権(c)1999-2004ショーン・M・バーク。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="61d2f566b03b65ebb8a473ade4f6c05ec2e7b7d6" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2000 Mark Kvale All rights reserved.</source>
          <target state="translated">Copyright (c)2000 Mark Kvale All rights reserved.</target>
        </trans-unit>
        <trans-unit id="956588c9cff385547adb21a72fd25e005bd741ba" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2001+ Sean M. Burke. All rights reserved.</source>
          <target state="translated">著作権 (c)2001+ショーン・M・バーク。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="101703b452cff466c3017bb8ed36a01aa5987d0f" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2001, Colin McMillen. All rights reserved.</source>
          <target state="translated">著作権(c)2001年、コリン・マクミレン。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="4be1efc0ccc0981f45abf323878167441401a846" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2001-2002 Michael G. Schwern.</source>
          <target state="translated">Copyright (c)2001-2002 Michael G.Schwern.</target>
        </trans-unit>
        <trans-unit id="745610c91808a145be6f46517082d4e57524612c" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2001-2004 Sean M. Burke. All rights reserved.</source>
          <target state="translated">Copyright (c)2001-2004 Sean M.Burke.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="943b9de4d5b00b8ab9c8008e42e2cad2c939e815" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002 Sean M. Burke.</source>
          <target state="translated">Copyright (c)2002 Sean M.Burke.</target>
        </trans-unit>
        <trans-unit id="27329c3ca1bd874414fcb99c62900358075672d6" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002 Sean M. Burke. All rights reserved.</source>
          <target state="translated">Copyright (c)2002 Sean M.Burke.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="2b28a7c47cb1fc722aa93ca95ba51f4648d81356" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008 Jarkko Hietaniemi. All rights reserved.</source>
          <target state="translated">著作権(c)2002,2003,2004,2005,2006,2007,2008 Jarkko Hietaniemi.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="999355b8d02ad239f1c7f43da46147f2a00c43e4" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002, 2003, 2004, 2012 Elizabeth Mattijsen. All rights reserved. This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">著作権(c)2002,2003,2004,2012 Elizabeth Mattijsen.このライブラリの著作権はすべて保護されています。このライブラリはフリーソフトウェアです。</target>
        </trans-unit>
        <trans-unit id="baaf0433379f30ce563209428329e2d5328a5310" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002,3,4 Sean M. Burke. All rights reserved.</source>
          <target state="translated">Copyright (c)2002,3,4 Sean M.Burke.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="bfb8ae6b5304e536dda7306d8f5e5b4e96abc310" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002-2003, Rob Brown. All rights reserved.</source>
          <target state="translated">著作権(c)2002-2003、ロブ・ブラウン。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="d3cf30d649786ddcd606f40863280a1c98090473" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002-2004 Sean M. Burke.</source>
          <target state="translated">Copyright (c)2002-2004 Sean M.Burke.</target>
        </trans-unit>
        <trans-unit id="370a5e83a0a375fc863482e0f23b23bcc8829b4b" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002-2007 Sean M. Burke.</source>
          <target state="translated">Copyright (c)2002-2007 Sean M.Burke.</target>
        </trans-unit>
        <trans-unit id="d20f5965d8d31028f9af0d7c9c2319d612d7cf7c" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2002-2007 by D.H. aka PodMaster</source>
          <target state="translated">著作権 (c)2002-2007 by D.H.aka PodMaster</target>
        </trans-unit>
        <trans-unit id="1a96f1bac6842e525db311ea1fddc129e4e8347c" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2003-2005 Allison Randal.</source>
          <target state="translated">Copyright (c)2003-2005 Allison Randal.</target>
        </trans-unit>
        <trans-unit id="739c0eceb4f80af2e4cb7f48ed65f0a345752cc6" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2003-2005 Ken Williams. All rights reserved.</source>
          <target state="translated">著作権(c)2003-2005 ケン・ウィリアムズ。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="2afe6350b059d07cb75bd42fe8c3e717187f030d" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2003-2015 Mark Shelor &amp;lt;mshelor@cpan.org&amp;gt;.</source>
          <target state="translated">Copyright（c）2003-2015 Mark Shelor &amp;lt;mshelor@cpan.org&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="8cbc77258020bb73d4d2613484c0c85b25c299f1" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2004 Sean M. Burke.</source>
          <target state="translated">Copyright (c)2004 Sean M.Burke.</target>
        </trans-unit>
        <trans-unit id="68da7dd6a77efed4cbb3653f046ac6a3a62b384b" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2004 by the Perl 5 Porters. All rights reserved.</source>
          <target state="translated">Copyright (c)2004 by the Perl 5 Porters.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="81397d758a65133b90ab0602bb70a5a4dd4563d7" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2004,2007 by the Perl 5 Porters. All rights reserved.</source>
          <target state="translated">Copyright (c)2004,2007 by Perl 5 Porters.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="3c8167cf442af8fc4f64de836da6cfdb60bde4e8" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2004-14 by the Perl 5 Porters. All rights reserved.</source>
          <target state="translated">Copyright (c)2004-14 by the Perl 5 Porters.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="6b274ec54ed3e9fc14376e565d4163bda3b1ca64" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2004-2005 Nokia. All rights reserved.</source>
          <target state="translated">著作権 (c)2004-2005 ノキア。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="00c3184f7198be0bfec2c01f0ef09d44048c6235" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2004-2013 by the Perl 5 Porters. All rights reserved.</source>
          <target state="translated">Copyright (c)2004-2013 by the Perl 5 Porters.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="08da8c434007b220b2ae85c8f6ae67bced13a749" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2005 Paul Marquess. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright (c)2005 Paul Marquess.すべての権利を保有しています。このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="626531bda13f14d08f7f1720b4b85c8df8972de4" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2005-2014 Paul Marquess. All rights reserved.</source>
          <target state="translated">Copyright (c)2005-2014 Paul Marquess.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="f4b7861e56dd95d2fb72c43ec9bcffc12d2604f4" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2006-2007 Jarkko Hietaniemi.</source>
          <target state="translated">著作権(c)2006-2007 ヤルコ・ヒエタニエミ。</target>
        </trans-unit>
        <trans-unit id="ca4bb54bc6b524ec7b6211da633ce092f06642b6" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2007-10 Max Maischein &lt;code&gt;&amp;lt;corion@cpan.org&amp;gt;&lt;/code&gt; Based on the idea of &lt;code&gt;base.pm&lt;/code&gt; , which was introduced with Perl 5.004_04.</source>
          <target state="translated">Copyright（c）2007-10 Max Maischein &lt;code&gt;&amp;lt;corion@cpan.org&amp;gt;&lt;/code&gt; Perl 5.004_04で導入された &lt;code&gt;base.pm&lt;/code&gt; のアイデアに基づいています。</target>
        </trans-unit>
        <trans-unit id="99b55113ec04a69f163df98ad79820c69bf73427" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2007-2011, Andy Armstrong &lt;code&gt;&amp;lt;andy@hexten.net&amp;gt;&lt;/code&gt; . All rights reserved.</source>
          <target state="translated">Copyright（c）2007-2011、Andy Armstrong &lt;code&gt;&amp;lt;andy@hexten.net&amp;gt;&lt;/code&gt; 。全著作権所有。</target>
        </trans-unit>
        <trans-unit id="edf65b9e5034d506f64cda4d822d94cf071d2118" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2008 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright（c）2008 Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;。全著作権所有。このプログラムはフリーソフトウェアです。Perl自体と同じ条件で再配布および/または変更できます。</target>
        </trans-unit>
        <trans-unit id="d2961ceaca647df086cd88aa0aa9059e913775ed" translate="yes" xml:space="preserve">
          <source>Copyright (c) 2011 brian d foy. All rights reserved.</source>
          <target state="translated">著作権(c)2011 ブライアンDフォイ。すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="0a0578f5c0a1861e0a6616062cbeff94f9471da0" translate="yes" xml:space="preserve">
          <source>Copyright 1995-1997,2002-2004 Gisle Aas.</source>
          <target state="translated">著作権 1995-1997,2002-2004 Gisle Aas.</target>
        </trans-unit>
        <trans-unit id="40d0702e44bca347009394197d44a9e6c4610d74" translate="yes" xml:space="preserve">
          <source>Copyright 1995-1999, 2001-2004, 2010 Gisle Aas.</source>
          <target state="translated">Copyright 1995-1999,2001-2004,2010 Gisle Aas.</target>
        </trans-unit>
        <trans-unit id="9f586c7c8d64bfd9e85b5c08564c28475c2476d0" translate="yes" xml:space="preserve">
          <source>Copyright 1996 Zenin. Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2005, 2006, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Russ Allbery &amp;lt;rra@cpan.org&amp;gt;. Copyright 2012 Kurt Starsinic &amp;lt;kstarsinic@gmail.com&amp;gt;. This program is free software; you may redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">Copyright 1996 Zenin。Copyright 1996、1997、1998、2000、2001、2002、2005、2006、2008、2009、2010、2011、2012、2013、2014 Russ Allbery &amp;lt;rra@cpan.org&amp;gt;。Copyright 2012 Kurt Starsinic &amp;lt;kstarsinic@gmail.com&amp;gt;。このプログラムはフリーソフトウェアです。あなたはそれをPerl自身と同じ条件で再配布および/または修正することができます。</target>
        </trans-unit>
        <trans-unit id="2578ceec7e839432122171b06d2ebf101a0829d8" translate="yes" xml:space="preserve">
          <source>Copyright 1997 - 2001 Damian Conway. All Rights Reserved.</source>
          <target state="translated">著作権1997年-2001年ダミアンコンウェイ。すべての権利予約。</target>
        </trans-unit>
        <trans-unit id="e24c0d040bccb06d10ccb3a57cbbc46e6ed0dddf" translate="yes" xml:space="preserve">
          <source>Copyright 1998 The Perl Journal.</source>
          <target state="translated">Copyright 1998 The Perl Journal.</target>
        </trans-unit>
        <trans-unit id="d52fcfe7bec45098d75b5470bde1a0d7ed1a805a" translate="yes" xml:space="preserve">
          <source>Copyright 1998, 1999, 2000, 2001, 2012 by Mark Jason Dominus</source>
          <target state="translated">著作権 1998,1999,2000,2001,2012 by Mark Jason Dominus</target>
        </trans-unit>
        <trans-unit id="25fd40d58410cd1696c803df7d48f5ed2513b4fb" translate="yes" xml:space="preserve">
          <source>Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2012, 2013 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;.</source>
          <target state="translated">Copyright 1999、2000、2001、2002、2003、2004、2005、2006、2007、2008、2009、2010、2012、2013 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="beb00d2f951db1eb5afb7de8fb7c0bdeb6824fdf" translate="yes" xml:space="preserve">
          <source>Copyright 1999, 2000, 2001, 2002, 2004, 2006, 2008, 2009, 2012, 2013 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;.</source>
          <target state="translated">Copyright 1999、2000、2001、2002、2004、2006、2008、2009、2012、2013 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="a467ad5fa2d0aa209d23ad0c1537c33c44052bff" translate="yes" xml:space="preserve">
          <source>Copyright 1999, 2000, 2001, 2004, 2006, 2008, 2010 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;.</source>
          <target state="translated">Copyright 1999、2000、2001、2004、2006、2008、2010 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="d116660891649b2a4f34cbcb8ed7ded670e6b71e" translate="yes" xml:space="preserve">
          <source>Copyright 1999, 2000, 2001, 2004, 2006, 2008, 2010, 2012, 2013 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;.</source>
          <target state="translated">Copyright 1999、2000、2001、2004、2006、2008、2010、2012、2013 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="3b5d92e90abbe2d5c568afb5c521beac86f1e04e" translate="yes" xml:space="preserve">
          <source>Copyright 1999, 2001, 2002, 2004, 2006, 2008, 2009 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;.</source>
          <target state="translated">Copyright 1999、2001、2002、2004、2006、2008、2009 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="24528ac4ae30b0fed790404fa53cadcc8ddc8c0c" translate="yes" xml:space="preserve">
          <source>Copyright 1999, 2001, 2004, 2006, 2008, 2009 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;.</source>
          <target state="translated">Copyright 1999、2001、2004、2006、2008、2009 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="233c7c72bfb3a12d36d9a0b1a2a2236732bf795f" translate="yes" xml:space="preserve">
          <source>Copyright 2000 by Joe Smith &amp;lt;Joe.Smith@inwap.com&amp;gt;. Copyright 2001, 2004, 2008 by Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;.</source>
          <target state="translated">Joe Smith &amp;lt;Joe.Smith@inwap.com&amp;gt;によるCopyright 2000。Copyright 2001、2004、2008 by Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="bac1b99511dfac3f040f153e32b31825485f6b22" translate="yes" xml:space="preserve">
          <source>Copyright 2001 by Jarkko Hietaniemi</source>
          <target state="translated">著作権は2001年にJarkko Hietaniemiによって。</target>
        </trans-unit>
        <trans-unit id="39f328bf52bbb81edfba43d285c298d3543ac18c" translate="yes" xml:space="preserve">
          <source>Copyright 2001, 2008, 2009 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;.</source>
          <target state="translated">Copyright 2001、2008、2009 Russ Allbery &amp;lt;rra@stanford.edu&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="7c959eb5c2acf1300054205c4d9f5d4cbb02d027" translate="yes" xml:space="preserve">
          <source>Copyright 2001, Larry Wall.</source>
          <target state="translated">Copyright 2001,Larry Wall.</target>
        </trans-unit>
        <trans-unit id="0e90130d5f5b2ccf88af0b6d57add0a492ab06a4" translate="yes" xml:space="preserve">
          <source>Copyright 2001-2008 by Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;.</source>
          <target state="translated">Copyright 2001-2008 by Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="758760659ae9e9da078236b8c96e4f04f45e80be" translate="yes" xml:space="preserve">
          <source>Copyright 2001-2011 Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;. Now maintained by Perl 5 Porters.</source>
          <target state="translated">Copyright 2001-2011 Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;。Perl 5ポーターによって現在維持されます。</target>
        </trans-unit>
        <trans-unit id="24f4f8eae6a435477fe3bf3b0fd15810a567f325" translate="yes" xml:space="preserve">
          <source>Copyright 2002-2008 by chromatic &amp;lt;chromatic@wgz.org&amp;gt; and Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;.</source>
          <target state="translated">Copyright 2002-2008 by chromatic &amp;lt;chromatic@wgz.org&amp;gt;およびMichael G Schwern &amp;lt;schwern@pobox.com&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="9ad00efbd2d58cad6bbe8ee8a6e69c0624704508" translate="yes" xml:space="preserve">
          <source>Copyright 2002-2014 Dan Kogai</source>
          <target state="translated">著作権 2002-2014 ダン・コガイ</target>
        </trans-unit>
        <trans-unit id="adff1afaa96bc6908438762288df7e0c84cec743" translate="yes" xml:space="preserve">
          <source>Copyright 2002-2014 by Ken Williams, David Golden and other contributors. All rights reserved.</source>
          <target state="translated">Copyright 2002-2014 by Ken Williams,David Golden and other contributors.すべての権利を保有しています。</target>
        </trans-unit>
        <trans-unit id="718ed72e455fb194df80ae2d0693e8d68c4004c0" translate="yes" xml:space="preserve">
          <source>Copyright 2003, 2004, 2005, 2006 by Audrey Tang &amp;lt;cpan@audreyt.org&amp;gt;.</source>
          <target state="translated">Copyright 2003、2004、2005、2006 by Audrey Tang &amp;lt;cpan@audreyt.org&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="03f9138fcf89a29043a1e2a727cfe2c79ab79b5d" translate="yes" xml:space="preserve">
          <source>Copyright 2006 Yves Orton and 2007 &amp;AElig;var Arnfj&amp;ouml;r&amp;eth; Bjarmason.</source>
          <target state="translated">Copyright 2006 Yves Orton and 2007&amp;AElig;varArnfj&amp;ouml;r&amp;eth;Bjarmason。</target>
        </trans-unit>
        <trans-unit id="a7b10ddec953c21d4f38ad07fa70d878c1a1f6b9" translate="yes" xml:space="preserve">
          <source>Copyright 2006-2008 Curtis &quot;Ovid&quot; Poe, all rights reserved.</source>
          <target state="translated">Copyright 2006-2008 Curtis &quot;Ovid&quot; Poe,all rights reserved.</target>
        </trans-unit>
        <trans-unit id="2dc2b4cddeffd8148859258dfa192ac667c79bfb" translate="yes" xml:space="preserve">
          <source>Copyright 2007-2011 Andy Armstrong.</source>
          <target state="translated">著作権2007-2011アンディ・アームストロング。</target>
        </trans-unit>
        <trans-unit id="eeaf3232c6892ccf2f411117d77f548428dc4ef2" translate="yes" xml:space="preserve">
          <source>Copyright 2008-2009, Paul Fenwick &amp;lt;pjf@perltraining.com.au&amp;gt;</source>
          <target state="translated">Copyright 2008-2009、Paul Fenwick &amp;lt;pjf@perltraining.com.au&amp;gt;</target>
        </trans-unit>
        <trans-unit id="4da493f5c04edefe46b0fd74ae429ad56b0dc531" translate="yes" xml:space="preserve">
          <source>Copyright 2010, brian d foy &lt;code&gt;&amp;lt;brian.d.foy@gmail.com&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Copyright 2010、brian d foy &lt;code&gt;&amp;lt;brian.d.foy@gmail.com&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b47a4389c364b8abd358a0f467c39b15dbdea1cb" translate="yes" xml:space="preserve">
          <source>Copyright 2013 Tom Christiansen.</source>
          <target state="translated">著作権2013トム・クリスチャンセン。</target>
        </trans-unit>
        <trans-unit id="f64383541384dc3e2eb364fd68051f5f3748d4e0" translate="yes" xml:space="preserve">
          <source>Copyright Mark Fowler &amp;lt;mark@twoshortplanks.com&amp;gt; 2002, 2004.</source>
          <target state="translated">Copyright Mark Fowler &amp;lt;mark@twoshortplanks.com&amp;gt; 2002、2004。</target>
        </trans-unit>
        <trans-unit id="2e7c31625c0b13304190ac801e54ebae59236c4f" translate="yes" xml:space="preserve">
          <source>Copyright Mark Fowler &amp;lt;mark@twoshortplanks.com&amp;gt; 2002.</source>
          <target state="translated">Copyright Mark Fowler &amp;lt;mark@twoshortplanks.com&amp;gt; 2002。</target>
        </trans-unit>
        <trans-unit id="a9f33cf7a4a5fda17e447238e45c4abe5cf41f08" translate="yes" xml:space="preserve">
          <source>Copyright(C) 2001-2012, SADAHIRO Tomoyuki. Japan. All rights reserved.</source>
          <target state="translated">Copyright(C)2001-2012,定廣智之.貞廣智之(さだひろともゆき)。無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="31e40e06c4bcb283edebf594f2bd7378bcf58ce9" translate="yes" xml:space="preserve">
          <source>Copyrights</source>
          <target state="translated">Copyrights</target>
        </trans-unit>
        <trans-unit id="97c1dd3ec24454b864720faa54a3abda989f1564" translate="yes" xml:space="preserve">
          <source>Core Images</source>
          <target state="translated">コアイメージ</target>
        </trans-unit>
        <trans-unit id="99bb4f655f44c04dddda9615c8eb20527c7cc996" translate="yes" xml:space="preserve">
          <source>Core Layers</source>
          <target state="translated">コア層</target>
        </trans-unit>
        <trans-unit id="bc6e3a410aa372c2487ec123aa51c13c61ba9355" translate="yes" xml:space="preserve">
          <source>Core Modules</source>
          <target state="translated">コアモジュール</target>
        </trans-unit>
        <trans-unit id="783102c8987eec788fa90e6f2de9f84f1caf1885" translate="yes" xml:space="preserve">
          <source>Core Perl does not have any support for the wide and multibyte characters of the C standards, except under UTF-8 locales, so this might be a rather useless function.</source>
          <target state="translated">Core PerlはUTF-8ロケールを除いて、C標準のワイドバイト文字やマルチバイト文字をサポートしていないので、これはかなり無駄な機能かもしれません。</target>
        </trans-unit>
        <trans-unit id="54b87e196a65aa25a514c9ea7b2551d2cd6978d7" translate="yes" xml:space="preserve">
          <source>Core Perl modules</source>
          <target state="translated">Perl のコアモジュール</target>
        </trans-unit>
        <trans-unit id="67d35c68c7df776a652523a80899e489b317a9b0" translate="yes" xml:space="preserve">
          <source>Core modules</source>
          <target state="translated">コアモジュール</target>
        </trans-unit>
        <trans-unit id="ce831d7b130ca37b50a0ab62dd64d0056aa444db" translate="yes" xml:space="preserve">
          <source>Correspondingly, sending a signal to a thread does not disrupt the operation the thread is currently working on: The signal will be acted upon after the current operation has completed. For instance, if the thread is</source>
          <target state="translated">これに対応して、スレッドにシグナルを送信しても、スレッドが現在作業中の操作を中断することはありません。シグナルは現在の操作が完了した後に処理されます。例えば、スレッドが</target>
        </trans-unit>
        <trans-unit id="5d25cbf547052ef26b7bd5b301c3044498d75c9a" translate="yes" xml:space="preserve">
          <source>Could it be a module instead?</source>
          <target state="translated">代わりにモジュールではないか?</target>
        </trans-unit>
        <trans-unit id="09e55edb3e65ad6732e40f6cd984478db5d78fce" translate="yes" xml:space="preserve">
          <source>Counting Repetitions</source>
          <target state="translated">繰り返しを数える</target>
        </trans-unit>
        <trans-unit id="6638251b6bc95fa3de20882497e46af5dda04835" translate="yes" xml:space="preserve">
          <source>Counting bytes and watching alignments in lengthy structures is bound to be a drag. Isn't there a way we can create the template with a simple program? Here's a C program that does the trick:</source>
          <target state="translated">バイト数を数えたり、長い構造体の整列を見たりするのは足かせになってしまいます。簡単なプログラムでテンプレートを作成する方法はないのでしょうか?ここにトリックを実行するC言語のプログラムがあります。</target>
        </trans-unit>
        <trans-unit id="1cfd2770db664059c57a58368f587a061ac0b45a" translate="yes" xml:space="preserve">
          <source>Counting the number of entries in a hash via &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(keys(%hash))&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(values(%hash)&lt;/a&gt;&lt;/code&gt;) is inefficient since it needs to iterate through all the entries with FIRSTKEY/NEXTKEY.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(keys(%hash))&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(values(%hash)&lt;/a&gt;&lt;/code&gt; ）を介してハッシュのエントリー数を数えることは、FIRSTKEY / NEXTKEYですべてのエントリーを繰り返す必要があるため、非効率的です。</target>
        </trans-unit>
        <trans-unit id="b4d6e94a784b6e291943d7b2c4e0fc93520909e7" translate="yes" xml:space="preserve">
          <source>Counting the opening parentheses to get the correct number for a backreference is error-prone as soon as there is more than one capturing group. A more convenient technique became available with Perl 5.10: relative backreferences. To refer to the immediately preceding capture group one now may write &lt;code&gt;\g{-1}&lt;/code&gt; , the next but last is available via &lt;code&gt;\g{-2}&lt;/code&gt; , and so on.</source>
          <target state="translated">複数のキャプチャグループがあるとすぐに、左かっこを数えてバックリファレンスの正しい数を取得すると、エラーが発生しやすくなります。Perl 5.10でより便利な手法が利用可能になりました：相対的な後方参照。直前のキャプチャグループを参照するには、今度は &lt;code&gt;\g{-1}&lt;/code&gt; 書き込むことができ、次の最後のキャプチャグループは &lt;code&gt;\g{-2}&lt;/code&gt; を介して利用できます。</target>
        </trans-unit>
        <trans-unit id="2815297cdc53ede6ff2cb024503f24e17cc60a88" translate="yes" xml:space="preserve">
          <source>Coverity</source>
          <target state="translated">Coverity</target>
        </trans-unit>
        <trans-unit id="9fbbe918826f27bbfcf0ae0fdd88d18c0d6bd29a" translate="yes" xml:space="preserve">
          <source>Coverity (&lt;a href=&quot;http://www.coverity.com/&quot;&gt;http://www.coverity.com/&lt;/a&gt;) is a product similar to lint and as a testbed for their product they periodically check several open source projects, and they give out accounts to open source developers to the defect databases.</source>
          <target state="translated">Coverity（&lt;a href=&quot;http://www.coverity.com/&quot;&gt;http://www.coverity.com/&lt;/a&gt;）は、lintに似た製品であり、自社製品のテストベッドとして定期的にいくつかのオープンソースプロジェクトをチェックし、オープンソース開発者に欠陥データベースのアカウントを提供しています。</target>
        </trans-unit>
        <trans-unit id="30f10fb60094a5736894608b7733f1893682a3ec" translate="yes" xml:space="preserve">
          <source>Cppsym.U</source>
          <target state="translated">Cppsym.U</target>
        </trans-unit>
        <trans-unit id="5ebece852ecc4ea6150b191a89b2f264b38241db" translate="yes" xml:space="preserve">
          <source>Create VMS linker options files specifying universal symbols for this extension's shareable image, and listing other shareable images or libraries to which it should be linked.</source>
          <target state="translated">この拡張機能の共有可能な画像のユニバーサルシンボルを指定したVMSリンカオプションファイルを作成し、リンク先となる他の共有可能な画像やライブラリをリストアップします。</target>
        </trans-unit>
        <trans-unit id="02cd22cf6983deda3bb052ea3365661fc9cd4123" translate="yes" xml:space="preserve">
          <source>Create a &quot;symlink&quot; or copy your bash.exe to sh.exe in your &lt;code&gt;($DJDIR)/bin&lt;/code&gt; directory.</source>
          <target state="translated">「シンボリックリンク」を作成するか、bash.exeを &lt;code&gt;($DJDIR)/bin&lt;/code&gt; ディレクトリのsh.exeにコピーします。</target>
        </trans-unit>
        <trans-unit id="18cde0b66e2ee12909d4ed1d9eb6ea9c47f3f1a9" translate="yes" xml:space="preserve">
          <source>Create a BigRat from an hexadecimal, binary or octal number in string form.</source>
          <target state="translated">文字列形式の16進数、2進数、または8進数からBigRatを作成します。</target>
        </trans-unit>
        <trans-unit id="473f8f658940e07568176b34bfa435fa80921f41" translate="yes" xml:space="preserve">
          <source>Create a Zip64 zip file/buffer. This option is used if you want to store files larger than 4 Gig or store more than 64K files in a single zip archive..</source>
          <target state="translated">Zip64 zip ファイル/バッファを作成します。このオプションは、4 Gig 以上のファイルを保存したい場合や、1 つの zip アーカイブに 64K 以上のファイルを保存したい場合に使用します。</target>
        </trans-unit>
        <trans-unit id="11130cde618dc2de912450499554a974016ed7af" translate="yes" xml:space="preserve">
          <source>Create a batch file to run your program, and codify it in &lt;code&gt;ALTERNATE_SHEBANG&lt;/code&gt; (see the</source>
          <target state="translated">プログラムを実行するバッチファイルを作成し、 &lt;code&gt;ALTERNATE_SHEBANG&lt;/code&gt; でコード化します（</target>
        </trans-unit>
        <trans-unit id="bc3d1ef79a98971d38e02b76ce890553cad199f4" translate="yes" xml:space="preserve">
          <source>Create a class for the language your internal keys are in. Name the class after the language-tag for that language, in lowercase, with dashes changed to underscores. Assuming your project's first language is US English, you should call this Projname::L10N::en_us. It should consist minimally of:</source>
          <target state="translated">内部キーが使用している言語のクラスを作成します。クラスの名前は、その言語の言語タグの後に、ダッシュをアンダースコアに変更した小文字で付けます。プロジェクトの第一言語が米国英語であると仮定して、このクラスを Projname::L10N::en_us と呼ぶべきです。最小限の構成要素である必要があります。</target>
        </trans-unit>
        <trans-unit id="af5af99f136ed2ceb6678c03a38a42040f4ea033" translate="yes" xml:space="preserve">
          <source>Create a class for your localization project. This is the name of the class that you'll use in the idiom:</source>
          <target state="translated">ローカライズプロジェクト用のクラスを作成します。これはイディオムで使うクラスの名前です。</target>
        </trans-unit>
        <trans-unit id="d140dda80edfdc914d774a5fe6e3ebbdbcd954b7" translate="yes" xml:space="preserve">
          <source>Create a directory from a template. The template must end in X's that are replaced by the routine.</source>
          <target state="translated">テンプレートからディレクトリを作成します。テンプレートの末尾はXでなければなりませんが、それはルーチンで置き換えられます。</target>
        </trans-unit>
        <trans-unit id="87942e6092afa4288ce7b6b61b23174e2b70e314" translate="yes" xml:space="preserve">
          <source>Create a directory from the supplied template. This template is similar to that described for tempfile(). `X' characters at the end of the template are replaced with random letters to construct the directory name. At least four `X' characters must be in the template.</source>
          <target state="translated">与えられたテンプレートからディレクトリを作成します。このテンプレートは tempfile()で説明したものと似ています。テンプレートの最後にある `X' 文字はランダムな文字に置き換えられ、ディレクトリ名が作成されます。少なくとも4つの `X' 文字がテンプレートに含まれていなければならない。</target>
        </trans-unit>
        <trans-unit id="97bd03e560de52beb6792bf090df2f8c408c1b3d" translate="yes" xml:space="preserve">
          <source>Create a directory in tmpdir() (see L&amp;lt;:spec&amp;gt;).</source>
          <target state="translated">tmpdir（）にディレクトリを作成します（L &amp;lt;：spec&amp;gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="4362437c4dee6826064eba29335269a256a16b4f" translate="yes" xml:space="preserve">
          <source>Create a module Makefile</source>
          <target state="translated">モジュールMakefileの作成</target>
        </trans-unit>
        <trans-unit id="50c598518f68bf9f28b1793bfb579fbc50559040" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;App::Prove&lt;/code&gt; . Optionally a hash ref of attribute initializers may be passed.</source>
          <target state="translated">新しい &lt;code&gt;App::Prove&lt;/code&gt; 作成します。オプションで、属性初期化子のハッシュ参照を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="637b03561b650422dbca5301699123a3114e7256" translate="yes" xml:space="preserve">
          <source>Create a new Math::BigRat object. Input can come in various forms:</source>
          <target state="translated">新しい Math::BigRat オブジェクトを作成します。入力は様々な形で来ることができます。</target>
        </trans-unit>
        <trans-unit id="37ec6f7cf703eb7c8d20ea11f3b6a2d9d8f1bdf2" translate="yes" xml:space="preserve">
          <source>Create a new Perl external subroutine named $perl_name using $symref as a pointer to the function which implements the routine. This is simply a direct call to newXSUB(). Returns a reference to the installed function.</source>
          <target state="translated">ルーチンを実装する関数へのポインタとして $symref を使用して $perl_name という名前の新しい Perl 外部サブルーチンを作成します。これは単に newXSUB()を直接呼び出すだけです。インストールされている関数への参照を返します。</target>
        </trans-unit>
        <trans-unit id="8b815122ea1b53bab2fea52aa82c0738dc639ea2" translate="yes" xml:space="preserve">
          <source>Create a new SigSet object. This object will be destroyed automatically when it is no longer needed. Arguments may be supplied to initialize the set.</source>
          <target state="translated">新しい SigSet オブジェクトを作成します。このオブジェクトは不要になると自動的に破棄されます。セットを初期化するために引数を与えることができます。</target>
        </trans-unit>
        <trans-unit id="8f2191aaab0a2fe03dd235f940c62b8ea3693cca" translate="yes" xml:space="preserve">
          <source>Create a new Termios object. This object will be destroyed automatically when it is no longer needed. A Termios object corresponds to the &lt;code&gt;termios&lt;/code&gt; C struct. &lt;code&gt;new()&lt;/code&gt; mallocs a new one, &lt;code&gt;getattr()&lt;/code&gt; fills it from a file descriptor, and &lt;code&gt;setattr()&lt;/code&gt; sets a file descriptor's parameters to match Termios' contents.</source>
          <target state="translated">新しいTermiosオブジェクトを作成します。このオブジェクトは、不要になると自動的に破棄されます。Termiosオブジェクトは、 &lt;code&gt;termios&lt;/code&gt; C構造体に対応しています。 &lt;code&gt;new()&lt;/code&gt; は新しいものをmallocし、getattr &lt;code&gt;getattr()&lt;/code&gt; はそれをファイル記述子から書き込み、 &lt;code&gt;setattr()&lt;/code&gt; はファイル記述子のパラメーターを設定してTermiosの内容と一致させます。</target>
        </trans-unit>
        <trans-unit id="e8e14e0bd357803bf052153bab4c0a139ecb8716" translate="yes" xml:space="preserve">
          <source>Create a new cache object. This object can hold an arbitrary number of POD documents of class Pod::Cache::Item.</source>
          <target state="translated">新しいキャッシュオブジェクトを作成します。このオブジェクトは、クラスPod::Cache::ItemのPODドキュメントを任意の数だけ保持することができます。</target>
        </trans-unit>
        <trans-unit id="7234e7b8446d88bd6969be5e67b0f7bcc7d431e8" translate="yes" xml:space="preserve">
          <source>Create a new directory called Mytest2 at the same level as the directory Mytest. In the Mytest2 directory, create another directory called mylib, and cd into that directory.</source>
          <target state="translated">Mytestディレクトリと同じレベルにMytest2という新しいディレクトリを作成します。Mytest2ディレクトリの中に、mylibという名前の別のディレクトリを作成し、そのディレクトリにcdします。</target>
        </trans-unit>
        <trans-unit id="31384a4a0ee35aebb04c1c58d30d768f683e1f93" translate="yes" xml:space="preserve">
          <source>Create a new directory with the name &lt;code&gt;DIR&lt;/code&gt; . If &lt;code&gt;RECURSE&lt;/code&gt; is</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; という名前の新しいディレクトリを作成します。場合 &lt;code&gt;RECURSE&lt;/code&gt; があります</target>
        </trans-unit>
        <trans-unit id="d7b61de6466590ec52305327e27f85b32bce01c7" translate="yes" xml:space="preserve">
          <source>Create a new file with mode 0640. Set up the file for writing.</source>
          <target state="translated">モード0640で新規ファイルを作成します。書き込み用のファイルを設定します。</target>
        </trans-unit>
        <trans-unit id="a881eb9aa6d20d6d909d029e4c81928e7bc18391" translate="yes" xml:space="preserve">
          <source>Create a new file. This returns a file descriptor like the ones returned by &lt;code&gt;POSIX::open&lt;/code&gt; . Use &lt;code&gt;POSIX::close&lt;/code&gt; to close the file.</source>
          <target state="translated">新しいファイルを作成します。これは、 &lt;code&gt;POSIX::open&lt;/code&gt; によって返されるものと同様のファイル記述子を返します。 &lt;code&gt;POSIX::close&lt;/code&gt; を使用してファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="74dd602c7c6a1f1cb930e156dfc79f8193fd0b55" translate="yes" xml:space="preserve">
          <source>Create a new instance of the specified class.</source>
          <target state="translated">指定したクラスのインスタンスを新規作成します。</target>
        </trans-unit>
        <trans-unit id="6cc585773d59263f24bc1ca5a399b6f4d519e67f" translate="yes" xml:space="preserve">
          <source>Create a new list object. Properties may be specified through a hash reference like this:</source>
          <target state="translated">新しいリストオブジェクトを作成します。プロパティは、以下のようなハッシュ参照を通して指定することができます。</target>
        </trans-unit>
        <trans-unit id="9ba7c62c943cded5489456e206c446db08d870de" translate="yes" xml:space="preserve">
          <source>Create a new object.</source>
          <target state="translated">新しいオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="fcb9d9d9881e78822adfe0bbac4eee7555066ecb" translate="yes" xml:space="preserve">
          <source>Create a new object. Any arguments passed to &lt;code&gt;new&lt;/code&gt; will be passed on to the &lt;a href=&quot;#_initialize&quot;&gt;_initialize&lt;/a&gt; method. Returns a new object.</source>
          <target state="translated">新しいオブジェクトを作成します。 &lt;code&gt;new&lt;/code&gt; に渡される引数は、&lt;a href=&quot;#_initialize&quot;&gt;_initialize&lt;/a&gt;メソッドに渡されます。新しいオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="0a8a658289cee30e5b27a60292e471ac179b2181" translate="yes" xml:space="preserve">
          <source>Create a new padlist, updating the global variables for the currently-compiling padlist to point to the new padlist. The following flags can be OR'ed together:</source>
          <target state="translated">新しいパッドリストを作成し、現在コンパイル中のパッドリストのグローバル変数を新しいパッドリストを指すように更新します。以下のフラグは OR を併用することができます。</target>
        </trans-unit>
        <trans-unit id="ee2261993683f4a99c0cc5814cbab351173c8386" translate="yes" xml:space="preserve">
          <source>Create a new ping object. All of the parameters are optional. $proto specifies the protocol to use when doing a ping. The current choices are &quot;tcp&quot;, &quot;udp&quot;, &quot;icmp&quot;, &quot;stream&quot;, &quot;syn&quot;, or &quot;external&quot;. The default is &quot;tcp&quot;.</source>
          <target state="translated">新しい ping オブジェクトを作成します。すべてのパラメータはオプションです。proto は ping を行う際に使用するプロトコルを指定します。現在の選択肢は &quot;tcp&quot;、&quot;udp&quot;、&quot;icmp&quot;、&quot;stream&quot;、&quot;syn&quot;、&quot;external&quot; です。デフォルトは &quot;tcp&quot; です。</target>
        </trans-unit>
        <trans-unit id="3430e716a61ae83b9e144c2c5c8622a75ae88917" translate="yes" xml:space="preserve">
          <source>Create a new semaphore set associated with &lt;code&gt;KEY&lt;/code&gt; . &lt;code&gt;NSEMS&lt;/code&gt; is the number of semaphores in the set. A new set is created if</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; に関連付けられた新しいセマフォセットを作成します。 &lt;code&gt;NSEMS&lt;/code&gt; は、セット内のセマフォの数です。次の場合に新しいセットが作成されます</target>
        </trans-unit>
        <trans-unit id="4a7ef28ba91fedd9a746c8523a72dbcb8eb69fb7" translate="yes" xml:space="preserve">
          <source>Create a perl subroutine for the specified macros rather than autoload with the constant() subroutine. These macros are assumed to have a return type of &lt;b&gt;char *&lt;/b&gt;, e.g., -s sec_rgy_wildcard_name,sec_rgy_wildcard_sid.</source>
          <target state="translated">constant（）サブルーチンでオートロードするのではなく、指定したマクロのperlサブルーチンを作成します。これらのマクロは、戻り値の型が&lt;b&gt;char *&lt;/b&gt;であると想定されています（例：-s sec_rgy_wildcard_name、sec_rgy_wildcard_sid）。</target>
        </trans-unit>
        <trans-unit id="481a60ee3395b3b1cf7945f04080acc645acd340" translate="yes" xml:space="preserve">
          <source>Create a reverse hash:</source>
          <target state="translated">逆ハッシュを作成します。</target>
        </trans-unit>
        <trans-unit id="f0e04e4f20e56fddcf662a44731769084042c59e" translate="yes" xml:space="preserve">
          <source>Create a set with &lt;code&gt;SIGUSR1&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;SIGUSR1&lt;/code&gt; を使用してセットを作成します。</target>
        </trans-unit>
        <trans-unit id="3ac62f075bf8001f6525a8640c77b2f7fb60c81b" translate="yes" xml:space="preserve">
          <source>Create a temporary directory using an object oriented interface.</source>
          <target state="translated">オブジェクト指向インターフェースを使用してテンポラリディレクトリを作成します。</target>
        </trans-unit>
        <trans-unit id="303ec3c6180101ba95b912105da0ce7bfcb1deb4" translate="yes" xml:space="preserve">
          <source>Create a temporary directory using the supplied template, but attempt to remove it (and all files inside it) when the program exits. Note that an attempt will be made to remove all files from the directory even if they were not created by this module (otherwise why ask to clean it up?). The directory removal is made with the rmtree() function from the L&amp;lt;:path&amp;gt; module. Of course, if the template is not specified, the temporary directory will be created in tmpdir() and will also be removed at program exit.</source>
          <target state="translated">提供されたテンプレートを使用して一時ディレクトリを作成しますが、プログラムの終了時にそれ（およびその中のすべてのファイル）を削除しようとします。これらのファイルがこのモジュールで作成されていない場合でも、ディレクトリからすべてのファイルを削除する試みが行われることに注意してください（それ以外の場合は、クリーンアップを要求するのはなぜですか？）。ディレクトリの削除は、L &amp;lt;：path&amp;gt;モジュールのrmtree（）関数で行われます。もちろん、テンプレートが指定されていない場合、一時ディレクトリはtmpdir（）に作成され、プログラムの終了時にも削除されます。</target>
        </trans-unit>
        <trans-unit id="55698f6a3601555bd654382a0b288d1302315bd9" translate="yes" xml:space="preserve">
          <source>Create a temporary file in the current directory using the supplied template. Trailing `X' characters are replaced with random letters to generate the filename. At least four `X' characters must be present at the end of the template.</source>
          <target state="translated">与えられたテンプレートを使用して、カレントディレクトリに一時ファイルを作成します。最後の `X' 文字はランダムな文字に置き換えられ、ファイル名が生成されます。テンプレートの最後には少なくとも4つの `X' 文字がなければなりません。</target>
        </trans-unit>
        <trans-unit id="bc36137f6fa982d9a92b93d4881687f9cba40176" translate="yes" xml:space="preserve">
          <source>Create a temporary file in the directory specified for temporary files, as specified by the tmpdir() function in L&amp;lt;:spec&amp;gt;.</source>
          <target state="translated">L &amp;lt;：spec&amp;gt;のtmpdir（）関数で指定されているように、一時ファイル用に指定されたディレクトリに一時ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="24495d1f7765573877dcd812b1a4948cc60660ee" translate="yes" xml:space="preserve">
          <source>Create a temporary file object.</source>
          <target state="translated">一時ファイルオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="69935c6719cc9d9adfa0d718baf1f913522468e6" translate="yes" xml:space="preserve">
          <source>Create an empty set.</source>
          <target state="translated">空のセットを作成します。</target>
        </trans-unit>
        <trans-unit id="36282f608207859c78f549fdddb59df654b98999" translate="yes" xml:space="preserve">
          <source>Create an interprocess channel. This returns file descriptors like those returned by &lt;code&gt;POSIX::open&lt;/code&gt; .</source>
          <target state="translated">プロセス間チャネルを作成します。これは、 &lt;code&gt;POSIX::open&lt;/code&gt; によって返されるようなファイル記述子を返します。</target>
        </trans-unit>
        <trans-unit id="ff79fe2c6259816c55880a8381a93476c6afdffb" translate="yes" xml:space="preserve">
          <source>Create an iterator. Expects one argument containing a filehandle.</source>
          <target state="translated">イテレータを作成します。ファイルハンドルを含む1つの引数を想定しています。</target>
        </trans-unit>
        <trans-unit id="616caec393d0885ab17bf7298761058cad98107e" translate="yes" xml:space="preserve">
          <source>Create an iterator. Expects one argument containing a hashref of the form:</source>
          <target state="translated">イテレータを作成します。形式のハッシュリフを含む1つの引数を期待しています。</target>
        </trans-unit>
        <trans-unit id="7016a4d543732a6745b00979a34621bd52cd3c30" translate="yes" xml:space="preserve">
          <source>Create an iterator. Provided by &lt;a href=&quot;../object&quot;&gt;TAP::Object&lt;/a&gt;.</source>
          <target state="translated">イテレータを作成します。&lt;a href=&quot;../object&quot;&gt;TAP :: Object&lt;/a&gt;によって提供されます。</target>
        </trans-unit>
        <trans-unit id="f2a61216ea6bd1172096b7e521d63d97ec506b32" translate="yes" xml:space="preserve">
          <source>Create an iterator. Takes one argument: an &lt;code&gt;$array_ref&lt;/code&gt;</source>
          <target state="translated">イテレータを作成します。1つの引数を取ります： &lt;code&gt;$array_ref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d452463d593e43e7b412e932435358550d3459d0" translate="yes" xml:space="preserve">
          <source>Create an object to store the state of a deparsing operation and any options. The options are the same as those that can be given on the command line (see &lt;a href=&quot;#OPTIONS&quot;&gt;OPTIONS&lt;/a&gt;); options that are separated by commas after &lt;b&gt;-MO=Deparse&lt;/b&gt; should be given as separate strings.</source>
          <target state="translated">解析操作の状態とオプションを格納するオブジェクトを作成します。オプションは、コマンドラインで指定できるものと同じです（&lt;a href=&quot;#OPTIONS&quot;&gt;OPTIONSを&lt;/a&gt;参照）。&lt;b&gt;-MO = Deparseの&lt;/b&gt;後にカンマで区切られたオプションは、個別の文字列として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9112787448a0b0a1b976b8609db263871f034c88" translate="yes" xml:space="preserve">
          <source>Create and return a new interpreter by cloning the current one.</source>
          <target state="translated">現在のインタープリタを複製して新しいインタープリタを作成して返します。</target>
        </trans-unit>
        <trans-unit id="681f59f5e6812683ee0d03597d9f2b4876cee8dc" translate="yes" xml:space="preserve">
          <source>Create header and footer blocks containing the text of the &quot;NAME&quot; section.</source>
          <target state="translated">NAME」セクションのテキストを含むヘッダーとフッターブロックを作成します。</target>
        </trans-unit>
        <trans-unit id="2d5ca272bf9f8abe24e8b1f4fd428df6751e11d3" translate="yes" xml:space="preserve">
          <source>Create or remove directory trees</source>
          <target state="translated">ディレクトリツリーの作成と削除</target>
        </trans-unit>
        <trans-unit id="896a63b966c3b07644d559d9c2dce6fddbbfbefe" translate="yes" xml:space="preserve">
          <source>Create simple getter/setters.</source>
          <target state="translated">シンプルなゲッター/セッターを作成します。</target>
        </trans-unit>
        <trans-unit id="82149e5249dc1d6a3b9690dd546cd84a48533f50" translate="yes" xml:space="preserve">
          <source>Created - 18 Jan 2001</source>
          <target state="translated">作成-2001年1月18日</target>
        </trans-unit>
        <trans-unit id="33db1a73ae0e0d1852a295cdab91f536d92a8891" translate="yes" xml:space="preserve">
          <source>Created by Tom Hughes &amp;lt;</source>
          <target state="translated">トム・ヒューズ作成&amp;lt;</target>
        </trans-unit>
        <trans-unit id="e6cdaaaee22d0c4e6b235592749143d45c2fe9b7" translate="yes" xml:space="preserve">
          <source>Creates a constant sub equivalent to Perl &lt;code&gt;sub FOO () { 123 }&lt;/code&gt; which is eligible for inlining at compile-time.</source>
          <target state="translated">コンパイル時にインライン化するのに適したPerl &lt;code&gt;sub FOO () { 123 }&lt;/code&gt; と同等の定数subを作成します。</target>
        </trans-unit>
        <trans-unit id="7f75da7fd0f98bc8dc84b4b1a932c3f5aea3cd14" translate="yes" xml:space="preserve">
          <source>Creates a digest string exactly like the crypt(3) function in the C library (assuming that you actually have a version there that has not been extirpated as a potential munition).</source>
          <target state="translated">C ライブラリの crypt(3)関数とまったく同じようなダイジェスト文字列を作成します (潜在的な兵器として駆逐されていないバージョンを実際に持っていることを前提としています)。</target>
        </trans-unit>
        <trans-unit id="eac496469522ef212783107cb6f208d37140024c" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;IO::Handle&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;IO::Handle&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="950a7fce8052aa44e77d67eb7cce6a9b17f503cc" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;POSIX::SigAction&lt;/code&gt; object which corresponds to the C &lt;code&gt;struct sigaction&lt;/code&gt; . This object will be destroyed automatically when it is no longer needed. The first parameter is the handler, a sub reference. The second parameter is a &lt;code&gt;POSIX::SigSet&lt;/code&gt; object, it defaults to the empty set. The third parameter contains the &lt;code&gt;sa_flags&lt;/code&gt; , it defaults to 0.</source>
          <target state="translated">Cの &lt;code&gt;struct sigaction&lt;/code&gt; に対応する新しい &lt;code&gt;POSIX::SigAction&lt;/code&gt; オブジェクトを作成します。このオブジェクトは、不要になると自動的に破棄されます。最初のパラメーターはハンドラー、サブ参照です。2番目のパラメーターは &lt;code&gt;POSIX::SigSet&lt;/code&gt; オブジェクトで、デフォルトでは空のセットです。3番目のパラメーターには &lt;code&gt;sa_flags&lt;/code&gt; が含まれ、デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="4409ce2d7a51f583ec857ef63305d9c328af09b3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;refcounted_he&lt;/code&gt; . This consists of a single key/value pair and a reference to an existing &lt;code&gt;refcounted_he&lt;/code&gt; chain (which may be empty), and thus forms a longer chain. When using the longer chain, the new key/value pair takes precedence over any entry for the same key further along the chain.</source>
          <target state="translated">新しい &lt;code&gt;refcounted_he&lt;/code&gt; を作成します。これは、単一のキーと値のペアと、既存の &lt;code&gt;refcounted_he&lt;/code&gt; チェーン（空の場合もある）への参照で構成されているため、より長いチェーンを形成します。長いチェーンを使用する場合、新しいキーと値のペアは、チェーンに沿った同じキーのエントリよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="50f1aadb519c6f1717d95b45f0702486fa9496f0" translate="yes" xml:space="preserve">
          <source>Creates a new AV and populates it with a list of SVs. The SVs are copied into the array, so they may be freed after the call to av_make. The new AV will have a reference count of 1.</source>
          <target state="translated">新しい AV を作成し、SV のリストで埋めます。SV は配列にコピーされるので、 av_make を呼び出した後に解放されます。新しい AV は参照カウントが 1 になります。</target>
        </trans-unit>
        <trans-unit id="33114a24c831591f9857c8f08551925f33fb6511" translate="yes" xml:space="preserve">
          <source>Creates a new AV. The reference count is set to 1.</source>
          <target state="translated">新しい AV を作成します。参照カウントは1に設定されています。</target>
        </trans-unit>
        <trans-unit id="aa1ac2ca7a7bb62339b5b238de6e909b22341ab0" translate="yes" xml:space="preserve">
          <source>Creates a new BigInt object from a scalar or another BigInt object. The input is accepted as decimal, hex (with leading '0x') or binary (with leading '0b').</source>
          <target state="translated">スカラまたは別の BigInt オブジェクトから新しい BigInt オブジェクトを作成します。入力は、10 進数、16 進数 (先頭に '0x' を含む)、またはバイナリ (先頭に '0b' を含む)のいずれかで受け付けられます。</target>
        </trans-unit>
        <trans-unit id="cc0f0aa1d0ba94cb717a19862e381519302e9596" translate="yes" xml:space="preserve">
          <source>Creates a new BigInt object representing NaN (Not A Number). If used on an object, it will set it to NaN:</source>
          <target state="translated">NaN (Not A Number)を表す新しいBigIntオブジェクトを作成します。オブジェクト上で使用された場合は、NaNに設定されます。</target>
        </trans-unit>
        <trans-unit id="9de9810e6c72332db75b8fa66a77cdf8fc6dc8ae" translate="yes" xml:space="preserve">
          <source>Creates a new BigInt object representing infinity. The optional argument is either '-' or '+', indicating whether you want infinity or minus infinity. If used on an object, it will set it to infinity:</source>
          <target state="translated">無限大を表す新しい BigInt オブジェクトを作成します。オプションの引数には '-' または '+' を指定し、無限大かマイナスの無限大かを指定します。オブジェクトに対して使用された場合、それは無限大に設定されます。</target>
        </trans-unit>
        <trans-unit id="ef067d4e1aa5d4de6db6fbb3fdb193a34b25bcd5" translate="yes" xml:space="preserve">
          <source>Creates a new BigInt object representing one. The optional argument is either '-' or '+', indicating whether you want one or minus one. If used on an object, it will set it to one:</source>
          <target state="translated">1 を表す新しい BigInt オブジェクトを作成します。オプションの引数には '-' または '+' を指定します。オブジェクトに対して使用された場合は、それを1に設定します。</target>
        </trans-unit>
        <trans-unit id="2d66a0e771c364720b98473ea0bd85073686ef36" translate="yes" xml:space="preserve">
          <source>Creates a new BigInt object representing zero. If used on an object, it will set it to zero:</source>
          <target state="translated">ゼロを表す新しい BigInt オブジェクトを作成します。オブジェクト上で使用された場合、それはゼロに設定されます。</target>
        </trans-unit>
        <trans-unit id="f27ebfb7f2c2069457b323e2292201c271ad4602" translate="yes" xml:space="preserve">
          <source>Creates a new HV. The reference count is set to 1.</source>
          <target state="translated">新しいHVを作成します。参照カウントは 1 に設定されています。</target>
        </trans-unit>
        <trans-unit id="5c4c9fc922e6f0fc2c8c0dc9a56aa12406f49a23" translate="yes" xml:space="preserve">
          <source>Creates a new SV and copies a floating point value into it. The reference count for the SV is set to 1.</source>
          <target state="translated">新しい SV を作成し、浮動小数点値をコピーします。SV の参照カウントは 1 に設定されます。</target>
        </trans-unit>
        <trans-unit id="8a706dc63eba9f9d97a63992d45f33ffaa0260f8" translate="yes" xml:space="preserve">
          <source>Creates a new SV and copies a string (which may contain &lt;code&gt;NUL&lt;/code&gt; (&lt;code&gt;\0&lt;/code&gt; ) characters) into it. If utf8 is true, calls &lt;code&gt;SvUTF8_on&lt;/code&gt; on the new SV. Implemented as a wrapper around &lt;code&gt;newSVpvn_flags&lt;/code&gt; .</source>
          <target state="translated">新しいSVを作成し、そこに文字列（ &lt;code&gt;NUL&lt;/code&gt; （ &lt;code&gt;\0&lt;/code&gt; ）文字を含む可能性があります）をコピーします。utf8がtrueの場合、新しいSVで &lt;code&gt;SvUTF8_on&lt;/code&gt; を呼び出します。 &lt;code&gt;newSVpvn_flags&lt;/code&gt; のラッパーとして実装されます。</target>
        </trans-unit>
        <trans-unit id="ba2d40d3f42edeb3193c212e63e131081199c97e" translate="yes" xml:space="preserve">
          <source>Creates a new SV and copies a string (which may contain &lt;code&gt;NUL&lt;/code&gt; (&lt;code&gt;\0&lt;/code&gt; ) characters) into it. The reference count for the SV is set to 1. If &lt;code&gt;len&lt;/code&gt; is zero, Perl will compute the length using strlen(), (which means if you use this option, that &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; can't have embedded &lt;code&gt;NUL&lt;/code&gt; characters and has to have a terminating &lt;code&gt;NUL&lt;/code&gt; byte).</source>
          <target state="translated">新しいSVを作成し、そこに文字列（ &lt;code&gt;NUL&lt;/code&gt; （ &lt;code&gt;\0&lt;/code&gt; ）文字を含む可能性があります）をコピーします。 SVの参照カウントは1に設定されます &lt;code&gt;len&lt;/code&gt; がゼロの場合、Perlはstrlen（）を使用して長さを計算します（つまり、このオプションを使用する場合、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;NUL&lt;/code&gt; 文字を埋め込むことはできず、終了文字が必要です。 &lt;code&gt;NUL&lt;/code&gt; バイト）。</target>
        </trans-unit>
        <trans-unit id="b321a7140bf968fa858a05cea608e9cde629793f" translate="yes" xml:space="preserve">
          <source>Creates a new SV and copies a string (which may contain &lt;code&gt;NUL&lt;/code&gt; (&lt;code&gt;\0&lt;/code&gt; ) characters) into it. The reference count for the SV is set to 1. Note that if &lt;code&gt;len&lt;/code&gt; is zero, Perl will create a zero length string. You are responsible for ensuring that the source string is at least &lt;code&gt;len&lt;/code&gt; bytes long. If the &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; argument is NULL the new SV will be undefined. Currently the only flag bits accepted are &lt;code&gt;SVf_UTF8&lt;/code&gt; and &lt;code&gt;SVs_TEMP&lt;/code&gt; . If &lt;code&gt;SVs_TEMP&lt;/code&gt; is set, then &lt;code&gt;sv_2mortal()&lt;/code&gt; is called on the result before returning. If &lt;code&gt;SVf_UTF8&lt;/code&gt; is set, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; is considered to be in UTF-8 and the &lt;code&gt;SVf_UTF8&lt;/code&gt; flag will be set on the new SV. &lt;code&gt;newSVpvn_utf8()&lt;/code&gt; is a convenience wrapper for this function, defined as</source>
          <target state="translated">新しいSVを作成し、そこに文字列（ &lt;code&gt;NUL&lt;/code&gt; （ &lt;code&gt;\0&lt;/code&gt; ）文字を含む可能性があります）をコピーします。 SVの参照カウントは1に設定されます &lt;code&gt;len&lt;/code&gt; がゼロの場合、Perlは長さがゼロの文字列を作成することに注意してください。ソース文字列の長さが少なくとも &lt;code&gt;len&lt;/code&gt; バイトであることを確認する必要があります。 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 引数がNULL の場合、新しいSVは未定義になります。現在受け入れられるフラグビットは &lt;code&gt;SVf_UTF8&lt;/code&gt; と &lt;code&gt;SVs_TEMP&lt;/code&gt; のみです。 &lt;code&gt;SVs_TEMP&lt;/code&gt; が設定されている場合、戻る前に結果 &lt;code&gt;sv_2mortal()&lt;/code&gt; が呼び出されます。 &lt;code&gt;SVf_UTF8&lt;/code&gt; が設定されている場合、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; はUTF-8であると見なされ、 &lt;code&gt;SVf_UTF8&lt;/code&gt; フラグが新しいSVに設定されます。 &lt;code&gt;newSVpvn_utf8()&lt;/code&gt; は、この関数の簡易ラッパーであり、次のように定義されています</target>
        </trans-unit>
        <trans-unit id="564cfa2529586958403f4ae104186110ddb6158c" translate="yes" xml:space="preserve">
          <source>Creates a new SV and copies a string into it, which may contain &lt;code&gt;NUL&lt;/code&gt; characters (&lt;code&gt;\0&lt;/code&gt; ) and other binary data. The reference count for the SV is set to 1. Note that if &lt;code&gt;len&lt;/code&gt; is zero, Perl will create a zero length (Perl) string. You are responsible for ensuring that the source buffer is at least &lt;code&gt;len&lt;/code&gt; bytes long. If the &lt;code&gt;buffer&lt;/code&gt; argument is NULL the new SV will be undefined.</source>
          <target state="translated">新しいSVを作成し、そこに文字列をコピーします。これには、 &lt;code&gt;NUL&lt;/code&gt; 文字（ &lt;code&gt;\0&lt;/code&gt; ）およびその他のバイナリデータが含まれている可能性があります。SVの参照カウントは1に設定されます &lt;code&gt;len&lt;/code&gt; がゼロの場合、Perlは長さゼロ（Perl）の文字列を作成することに注意してください。ソースバッファーの長さが少なくとも &lt;code&gt;len&lt;/code&gt; バイトであることを確認する必要があります。 &lt;code&gt;buffer&lt;/code&gt; 引数がNULLの場合、新しいSVは未定義になります。</target>
        </trans-unit>
        <trans-unit id="9de1b0a97a64089b618097ac3dffb046bfdc6779" translate="yes" xml:space="preserve">
          <source>Creates a new SV and copies an integer into it. The reference count for the SV is set to 1.</source>
          <target state="translated">新しい SV を作成し、その中に整数をコピーします。SV の参照カウントは 1 に設定されます。</target>
        </trans-unit>
        <trans-unit id="ad0aaf0d14999388a8de7db8b3ae47db90806dcf" translate="yes" xml:space="preserve">
          <source>Creates a new SV and copies an unsigned integer into it. The reference count for the SV is set to 1.</source>
          <target state="translated">新しい SV を作成し、その中に符号なし整数をコピーします。SV の参照カウントは 1 に設定されます。</target>
        </trans-unit>
        <trans-unit id="e144449cf71b321cfaa7ad7d73caee74bd802815" translate="yes" xml:space="preserve">
          <source>Creates a new SV and initializes it with the string formatted like &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">新しいSVを作成し、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; のような形式の文字列で初期化します。</target>
        </trans-unit>
        <trans-unit id="8fe580b8ead3e78b800fd8ca819c064553dc4b84" translate="yes" xml:space="preserve">
          <source>Creates a new SV containing the pad name.</source>
          <target state="translated">パッド名を含む新しい SV を作成します。</target>
        </trans-unit>
        <trans-unit id="fdde1c5ef502eaafbff9afbbccd3fe8baa5b7fc2" translate="yes" xml:space="preserve">
          <source>Creates a new SV for the existing RV, &lt;code&gt;rv&lt;/code&gt; , to point to. If &lt;code&gt;rv&lt;/code&gt; is not an RV then it will be upgraded to one. If &lt;code&gt;classname&lt;/code&gt; is non-null then the new SV will be blessed in the specified package. The new SV is returned and its reference count is 1. The reference count 1 is owned by &lt;code&gt;rv&lt;/code&gt; .</source>
          <target state="translated">ポイントする既存のRV &lt;code&gt;rv&lt;/code&gt; の新しいSVを作成します。 &lt;code&gt;rv&lt;/code&gt; がRVでない場合、RVにアップグレードされます。 &lt;code&gt;classname&lt;/code&gt; がnullでない場合、指定されたパッケージで新しいSVが祝福されます。新しいSVが返され、その参照カウントは1です。参照カウント1は &lt;code&gt;rv&lt;/code&gt; が所有しています。</target>
        </trans-unit>
        <trans-unit id="639f7c9a254704d094942032f6f23eecd10dcb3d" translate="yes" xml:space="preserve">
          <source>Creates a new SV from the hash key structure. It will generate scalars that point to the shared string table where possible. Returns a new (undefined) SV if the hek is NULL.</source>
          <target state="translated">ハッシュキー構造体から新しい SV を作成します。可能であれば共有文字列テーブルを指すスカラを生成します。hekがNULLの場合は、新しい(未定義の)SVを返します。</target>
        </trans-unit>
        <trans-unit id="1cd7ce4c785336645dd9ca8151db8dfa4fd5a1c4" translate="yes" xml:space="preserve">
          <source>Creates a new SV which is a copy of the original SV (using &lt;code&gt;sv_setsv&lt;/code&gt; ). The new SV is marked as mortal. It will be destroyed &quot;soon&quot;, either by an explicit call to FREETMPS, or by an implicit call at places such as statement boundaries. See also &lt;code&gt;sv_newmortal&lt;/code&gt; and &lt;code&gt;sv_2mortal&lt;/code&gt; .</source>
          <target state="translated">（ &lt;code&gt;sv_setsv&lt;/code&gt; を使用して）元のSVのコピーである新しいSVを作成します。新しいSVは致命的とマークされます。FREETMPSへの明示的な呼び出し、またはステートメント境界などの場所での暗黙的な呼び出しによって、「すぐに」破棄されます。 &lt;code&gt;sv_newmortal&lt;/code&gt; および &lt;code&gt;sv_2mortal&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="04a78f404d15207cad1d1bd98de9d1a89be2f47d" translate="yes" xml:space="preserve">
          <source>Creates a new SV which is an exact duplicate of the original SV. (Uses &lt;code&gt;sv_setsv&lt;/code&gt; .)</source>
          <target state="translated">元のSVの完全な複製である新しいSVを作成します。（ &lt;code&gt;sv_setsv&lt;/code&gt; を使用します。）</target>
        </trans-unit>
        <trans-unit id="f878a6fda000644884fdbc9cf596c38a8f7b65c4" translate="yes" xml:space="preserve">
          <source>Creates a new SV with its SvPVX_const pointing to a shared string in the string table. If the string does not already exist in the table, it is created first. Turns on the SvIsCOW flag (or READONLY and FAKE in 5.16 and earlier). If the &lt;code&gt;hash&lt;/code&gt; parameter is non-zero, that value is used; otherwise the hash is computed. The string's hash can later be retrieved from the SV with the &lt;code&gt;SvSHARED_HASH()&lt;/code&gt; macro. The idea here is that as the string table is used for shared hash keys these strings will have SvPVX_const == HeKEY and hash lookup will avoid string compare.</source>
          <target state="translated">SvPVX_constが文字列テーブルの共有文字列を指す新しいSVを作成します。文字列がテーブルに存在しない場合は、最初に作成されます。 SvIsCOWフラグ（または5.16以前ではREADONLYおよびFAKE）をオンにします。場合 &lt;code&gt;hash&lt;/code&gt; パラメータは非ゼロであり、その値が使用されています。それ以外の場合、ハッシュが計算されます。文字列のハッシュは、後で &lt;code&gt;SvSHARED_HASH()&lt;/code&gt; マクロを使用してSVから取得できます。ここでの考え方は、共有ハッシュキーに文字列テーブルが使用されるため、これらの文字列はSvPVX_const == HeKEYを持ち、ハッシュルックアップは文字列の比較を回避するということです。</target>
        </trans-unit>
        <trans-unit id="c74397b44268e30b14c395c9db4f9d4c75043d98" translate="yes" xml:space="preserve">
          <source>Creates a new SV, of the type specified. The reference count for the new SV is set to 1.</source>
          <target state="translated">指定された型の新しい SV を作成します。新しい SV の参照カウントは 1 に設定されます。</target>
        </trans-unit>
        <trans-unit id="d12e4b3cc81eba03f26cff30464e8b479b1d58a2" translate="yes" xml:space="preserve">
          <source>Creates a new SV. A non-zero &lt;code&gt;len&lt;/code&gt; parameter indicates the number of bytes of preallocated string space the SV should have. An extra byte for a trailing &lt;code&gt;NUL&lt;/code&gt; is also reserved. (SvPOK is not set for the SV even if string space is allocated.) The reference count for the new SV is set to 1.</source>
          <target state="translated">新しいSVを作成します。ゼロ以外の &lt;code&gt;len&lt;/code&gt; パラメータは、SVに必要な事前に割り当てられた文字列スペースのバイト数を示します。末尾の &lt;code&gt;NUL&lt;/code&gt; 用の追加バイトも予約されています。（文字列スペースが割り当てられていても、SvPOKはSVに設定されません。）新しいSVの参照カウントは1に設定されます。</target>
        </trans-unit>
        <trans-unit id="e9a57493668fe58cacf785eda42f6ca83298c5e7" translate="yes" xml:space="preserve">
          <source>Creates a new compression object.</source>
          <target state="translated">新しい圧縮オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="5d1118553623fb7729c552dfc670d49ec70f74e5" translate="yes" xml:space="preserve">
          <source>Creates a new empty queue.</source>
          <target state="translated">新しい空のキューを作成します。</target>
        </trans-unit>
        <trans-unit id="453a7438c9a0abf2f411dfc88ef08eeb919af43f" translate="yes" xml:space="preserve">
          <source>Creates a new factory class.</source>
          <target state="translated">新しいファクトリークラスを作成します。</target>
        </trans-unit>
        <trans-unit id="1df3f928ae77e486f8fc4331645875637263feb9" translate="yes" xml:space="preserve">
          <source>Creates a new factory class:</source>
          <target state="translated">新しいファクトリークラスを作成します。</target>
        </trans-unit>
        <trans-unit id="f4b3ad0f4845756e7eb366403f2b64a035efb137" translate="yes" xml:space="preserve">
          <source>Creates a new filename linked to the old filename. Returns true for success, false otherwise.</source>
          <target state="translated">古いファイル名にリンクされた新しいファイル名を作成します。成功した場合はtrueを、そうでない場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="83f895542990ab6651e9706888c2de08e523dee6" translate="yes" xml:space="preserve">
          <source>Creates a new filename symbolically linked to the old filename. Returns &lt;code&gt;1&lt;/code&gt; for success, &lt;code&gt;0&lt;/code&gt; otherwise. On systems that don't support symbolic links, raises an exception. To check for that, use eval:</source>
          <target state="translated">古いファイル名にシンボリックリンクされた新しいファイル名を作成します。成功した場合は &lt;code&gt;1&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;0&lt;/code&gt; を返します。シンボリックリンクをサポートしていないシステムでは、例外が発生します。これを確認するには、evalを使用します。</target>
        </trans-unit>
        <trans-unit id="c51b3b07b0600d4054dee0c964ac75e53c578450" translate="yes" xml:space="preserve">
          <source>Creates a new message queue associated with &lt;code&gt;KEY&lt;/code&gt; . A new queue is created if</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; に関連付けられた新しいメッセージキューを作成します。次の場合、新しいキューが作成されます</target>
        </trans-unit>
        <trans-unit id="b254f69cf661a8637fb6b526c326443550777a61" translate="yes" xml:space="preserve">
          <source>Creates a new null SV which is mortal. The reference count of the SV is set to 1. It will be destroyed &quot;soon&quot;, either by an explicit call to FREETMPS, or by an implicit call at places such as statement boundaries. See also &lt;code&gt;sv_mortalcopy&lt;/code&gt; and &lt;code&gt;sv_2mortal&lt;/code&gt; .</source>
          <target state="translated">致命的な新しいnull SVを作成します。SVの参照カウントは1に設定されます。FREETMPSへの明示的な呼び出しによって、またはステートメント境界などの場所での暗黙的な呼び出しによって、「すぐに」破棄されます。 &lt;code&gt;sv_mortalcopy&lt;/code&gt; および &lt;code&gt;sv_2mortal&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="2c5d61aab7b4b2bae3ae0cd3fa405a1453e48d56" translate="yes" xml:space="preserve">
          <source>Creates a new pad name list. &lt;code&gt;max&lt;/code&gt; is the highest index for which space is allocated.</source>
          <target state="translated">新しいパッド名リストを作成します。 &lt;code&gt;max&lt;/code&gt; は、スペースが割り当てられる最高のインデックスです。</target>
        </trans-unit>
        <trans-unit id="a518faeb54384b75b7b16380f67e97a55f19fb8d" translate="yes" xml:space="preserve">
          <source>Creates a new queue pre-populated with the provided list of items.</source>
          <target state="translated">指定した項目のリストであらかじめ区切られた新しいキューを作成します。</target>
        </trans-unit>
        <trans-unit id="97776043490921bb3f4e1a2aa4a3d94c8dd73946" translate="yes" xml:space="preserve">
          <source>Creates a new shared memory segment of &lt;code&gt;SIZE&lt;/code&gt; bytes size associated with &lt;code&gt;KEY&lt;/code&gt; . A new segment is created if</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; に関連付けられた &lt;code&gt;SIZE&lt;/code&gt; バイトサイズの新しい共有メモリセグメントを作成します。次の場合に新しいセグメントが作成されます</target>
        </trans-unit>
        <trans-unit id="ad8744084b0140499061b16f2e692d8d12d06891" translate="yes" xml:space="preserve">
          <source>Creates a new warnings category with the same name as the package where the call to the pragma is used.</source>
          <target state="translated">pragma の呼び出しが使用されているパッケージと同じ名前の新しい警告カテゴリを作成します。</target>
        </trans-unit>
        <trans-unit id="5a27d8b72cf141aebe58f87546d0d0c019b88e6f" translate="yes" xml:space="preserve">
          <source>Creates a single fieldhash. The argument must be a hash. Returns a reference to the given hash if successful, otherwise nothing.</source>
          <target state="translated">単一のフィールドハッシュを作成します。引数はハッシュでなければなりません。成功した場合は与えられたハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="6753f8b68917c94c7ceeba08d8a64a68bec41531" translate="yes" xml:space="preserve">
          <source>Creates a tar file from the list of files provided. The first argument can either be the name of the tar file to create or a reference to an open file handle (e.g. a GLOB reference).</source>
          <target state="translated">提供されたファイルのリストから tar ファイルを作成します。最初の引数には、作成する tar ファイルの名前か、開いているファイルハンドルへの参照 (例:GLOB 参照)を指定します。</target>
        </trans-unit>
        <trans-unit id="0c586f81366892d7608cff1caa98747fac265568" translate="yes" xml:space="preserve">
          <source>Creates a warnings category with the same name as the current package.</source>
          <target state="translated">現在のパッケージと同じ名前の警告カテゴリを作成します。</target>
        </trans-unit>
        <trans-unit id="70531cb628a95443a0bc996522c80ed3a1612eec" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IO::File&lt;/code&gt; . If it receives any parameters, they are passed to the method &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;; if the open fails, the object is destroyed. Otherwise, it is returned to the caller.</source>
          <target state="translated">&lt;code&gt;IO::File&lt;/code&gt; 作成します。パラメータを受け取ると、それらは &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; メソッドに渡されます。オープンが失敗した場合、オブジェクトは破棄されます。それ以外の場合は、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="b8f206ecd7edeba7b8082544ed88fc391c7aee72" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IO::File&lt;/code&gt; opened for read/write on a newly created temporary file. On systems where this is possible, the temporary file is anonymous (i.e. it is unlinked after creation, but held open). If the temporary file cannot be created or opened, the &lt;code&gt;IO::File&lt;/code&gt; object is destroyed. Otherwise, it is returned to the caller.</source>
          <target state="translated">新しく作成された一時ファイルの読み取り/書き込み用に開かれた &lt;code&gt;IO::File&lt;/code&gt; 作成します。これが可能なシステムでは、一時ファイルは匿名です（つまり、作成後にリンクが解除されますが、開いたままになります）。一時ファイルを作成または開くことができない場合、 &lt;code&gt;IO::File&lt;/code&gt; オブジェクトは破棄されます。それ以外の場合は、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="c5557a6d1ee1551613908cbc27f931101ce8ae4e" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IO::Handle&lt;/code&gt; like &lt;code&gt;new&lt;/code&gt; does. It requires two parameters, which are passed to the method &lt;code&gt;fdopen&lt;/code&gt; ; if the fdopen fails, the object is destroyed. Otherwise, it is returned to the caller.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; のように &lt;code&gt;IO::Handle&lt;/code&gt; 作成します。メソッド &lt;code&gt;fdopen&lt;/code&gt; に渡される2つのパラメーターが必要です。fdopenが失敗した場合、オブジェクトは破棄されます。それ以外の場合は、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="fc7d510d5075facd036fd1af77938045b2ecd2fd" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IO::Pipe&lt;/code&gt; , which is a reference to a newly created symbol (see the &lt;code&gt;Symbol&lt;/code&gt; package). &lt;code&gt;IO::Pipe::new&lt;/code&gt; optionally takes two arguments, which should be objects blessed into &lt;code&gt;IO::Handle&lt;/code&gt; , or a subclass thereof. These two objects will be used for the system call to &lt;code&gt;&lt;a href=&quot;../functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt;. If no arguments are given then method &lt;code&gt;handles&lt;/code&gt; is called on the new &lt;code&gt;IO::Pipe&lt;/code&gt; object.</source>
          <target state="translated">新しく作成されたシンボルへの参照である &lt;code&gt;IO::Pipe&lt;/code&gt; 作成します（ &lt;code&gt;Symbol&lt;/code&gt; パッケージを参照）。 &lt;code&gt;IO::Pipe::new&lt;/code&gt; オプションで2つの引数を取ります。これらは &lt;code&gt;IO::Handle&lt;/code&gt; またはそのサブクラスにblessされたオブジェクトである必要があります。これらの2つのオブジェクトは、 &lt;code&gt;&lt;a href=&quot;../functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; へのシステムコールに使用されます。引数が指定されていない場合、メソッド &lt;code&gt;handles&lt;/code&gt; が新しい &lt;code&gt;IO::Pipe&lt;/code&gt; オブジェクトで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="047841e1943658ae57257fef4f133cd272fd4811" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IO::Socket::INET&lt;/code&gt; object, which is a reference to a newly created symbol (see the &lt;code&gt;Symbol&lt;/code&gt; package). &lt;code&gt;new&lt;/code&gt; optionally takes arguments, these arguments are in key-value pairs.</source>
          <target state="translated">作成 &lt;code&gt;IO::Socket::INET&lt;/code&gt; 新しく作成されたシンボルへの参照であるオブジェクトは、（参照 &lt;code&gt;Symbol&lt;/code&gt; パッケージを）。 &lt;code&gt;new&lt;/code&gt; はオプションで引数を取ります。これらの引数はキーと値のペアです。</target>
        </trans-unit>
        <trans-unit id="fab2be9faf86fae0e4bd5b1cd1283009b201bf09" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IO::Socket::UNIX&lt;/code&gt; object, which is a reference to a newly created symbol (see the &lt;code&gt;Symbol&lt;/code&gt; package). &lt;code&gt;new&lt;/code&gt; optionally takes arguments, these arguments are in key-value pairs.</source>
          <target state="translated">作成 &lt;code&gt;IO::Socket::UNIX&lt;/code&gt; 新しく作成されたシンボルへの参照であるオブジェクトは、（参照 &lt;code&gt;Symbol&lt;/code&gt; パッケージを）。 &lt;code&gt;new&lt;/code&gt; はオプションで引数を取ります。これらの引数はキーと値のペアです。</target>
        </trans-unit>
        <trans-unit id="a250b42b4dd05b62200f3a07cb3c80166c30a874" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IO::Socket&lt;/code&gt; , which is a reference to a newly created symbol (see the &lt;code&gt;Symbol&lt;/code&gt; package). &lt;code&gt;new&lt;/code&gt; optionally takes arguments, these arguments are in key-value pairs. &lt;code&gt;new&lt;/code&gt; only looks for one key &lt;code&gt;Domain&lt;/code&gt; which tells new which domain the socket will be in. All other arguments will be passed to the configuration method of the package for that domain, See below.</source>
          <target state="translated">新しく作成されたシンボルへの参照である &lt;code&gt;IO::Socket&lt;/code&gt; 作成します（ &lt;code&gt;Symbol&lt;/code&gt; パッケージを参照）。 &lt;code&gt;new&lt;/code&gt; はオプションで引数を取ります。これらの引数はキーと値のペアです。 &lt;code&gt;new&lt;/code&gt; は、ソケットが存在するドメインをnewに &lt;code&gt;Domain&lt;/code&gt; する1つの主要なドメインのみを検索します。他のすべての引数は、そのドメインのパッケージの構成メソッドに渡されます。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="f1fb9d0f6d66fb3d087378bdbe9232327d60e9d1" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IO::Zlib&lt;/code&gt; object. If it receives any parameters, they are passed to the method &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;; if the open fails, the object is destroyed. Otherwise, it is returned to the caller.</source>
          <target state="translated">&lt;code&gt;IO::Zlib&lt;/code&gt; オブジェクトを作成します。パラメータを受け取ると、それらは &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; メソッドに渡されます。オープンが失敗した場合、オブジェクトは破棄されます。それ以外の場合は、呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="119c0a1aef44d3b6314c9a2aeed4485068748984" translate="yes" xml:space="preserve">
          <source>Creates an RV wrapper for an SV. The reference count for the original SV is &lt;b&gt;not&lt;/b&gt; incremented.</source>
          <target state="translated">SVのRVラッパーを作成します。元のSVの参照カウント&lt;b&gt;は&lt;/b&gt;増分され&lt;b&gt;ません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="9a2099bcbcca20ca005321683291f2d84f8f9fa9" translate="yes" xml:space="preserve">
          <source>Creates an RV wrapper for an SV. The reference count for the original SV is incremented.</source>
          <target state="translated">SV の RV ラッパーを作成します。元の SV の参照カウントがインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="583c7b0e3437e1faffd9da7f44fbc7a044be2a1d" translate="yes" xml:space="preserve">
          <source>Creates an unnamed pair of sockets in the specified domain, of the specified type. DOMAIN, TYPE, and PROTOCOL are specified the same as for the syscall of the same name. If unimplemented, raises an exception. Returns true if successful.</source>
          <target state="translated">指定されたドメインに、指定されたタイプの無名のソケットのペアを作成します。DOMAIN,TYPE,PROTOCOLは同名のシステムコールと同じように指定されます。未実装の場合は例外を発生させます。成功した場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="3305aabab05db99f8bfc2b84c2d73fe46ce45fee" translate="yes" xml:space="preserve">
          <source>Creates and initialises a new lexer/parser state object, supplying a context in which to lex and parse from a new source of Perl code. A pointer to the new state object is placed in &lt;a href=&quot;#PL_parser&quot;&gt;PL_parser&lt;/a&gt;. An entry is made on the save stack so that upon unwinding the new state object will be destroyed and the former value of &lt;a href=&quot;#PL_parser&quot;&gt;PL_parser&lt;/a&gt; will be restored. Nothing else need be done to clean up the parsing context.</source>
          <target state="translated">新しいlexer / parser状態オブジェクトを作成および初期化し、Perlコードの新しいソースからlexおよび解析するコンテキストを提供します。新しい状態オブジェクトへのポインタが&lt;a href=&quot;#PL_parser&quot;&gt;PL_parserに&lt;/a&gt;配置されます。セーブスタックにエントリが作成されるため、巻き戻し時に新しい状態オブジェクトが破棄され、&lt;a href=&quot;#PL_parser&quot;&gt;PL_parser&lt;/a&gt;の以前の値が復元されます。解析コンテキストをクリーンアップするために、他に何もする必要はありません。</target>
        </trans-unit>
        <trans-unit id="0f3dfed1a964ab0db38fbf8138ec0f7abbedf2e8" translate="yes" xml:space="preserve">
          <source>Creates any number of field hashes. Arguments must be hash references. Returns the converted hashrefs in list context, their number in scalar context.</source>
          <target state="translated">任意の数のフィールドハッシュを作成します。引数はハッシュ参照でなければなりません。変換されたハッシュ値をリストコンテキストで、その数をスカラコンテキストで返します。</target>
        </trans-unit>
        <trans-unit id="c592704db2b29209bd7ddf205e6af585a4f99b67" translate="yes" xml:space="preserve">
          <source>Creates directories, including any parent directories.</source>
          <target state="translated">親ディレクトリを含むディレクトリを作成します。</target>
        </trans-unit>
        <trans-unit id="ad1d92000326b7959a82dfb9dc22227bf6a2e0c5" translate="yes" xml:space="preserve">
          <source>Creates header and footer blocks containing the text of the &lt;code&gt;NAME&lt;/code&gt; section. By default, no headers are generated.</source>
          <target state="translated">&lt;code&gt;NAME&lt;/code&gt; セクションのテキストを含むヘッダーブロックとフッターブロックを作成します。デフォルトでは、ヘッダーは生成されません。</target>
        </trans-unit>
        <trans-unit id="530e5ca354f68101b7370c2ecfbbf80ed760e37a" translate="yes" xml:space="preserve">
          <source>Creates many idhashes from its hashref arguments. Returns those arguments that could be converted or their number in scalar context.</source>
          <target state="translated">ハッシュ値の引数から多くのidhashを作成します。変換可能な引数、またはその数をスカラコンテキストで返します。</target>
        </trans-unit>
        <trans-unit id="83ad3819309f6108b72bbb402ce3a8c80083d9b4" translate="yes" xml:space="preserve">
          <source>Creates the blibdirs target which creates all the directories we use in blib/.</source>
          <target state="translated">blib/で使用するすべてのディレクトリを作成するblibdirsターゲットを作成します。</target>
        </trans-unit>
        <trans-unit id="621a860874ef631fda40d3dbd09752ecf44fe523" translate="yes" xml:space="preserve">
          <source>Creates the directory cache in the given directory.</source>
          <target state="translated">指定したディレクトリにディレクトリキャッシュを作成します。</target>
        </trans-unit>
        <trans-unit id="de22bdbde2d4398a6a9a9d6284383fd915d03734" translate="yes" xml:space="preserve">
          <source>Creates the directory specified by FILENAME, with permissions specified by MASK (as modified by &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt;). If it succeeds it returns true; otherwise it returns false and sets &lt;code&gt;$!&lt;/code&gt; (errno). MASK defaults to 0777 if omitted, and FILENAME defaults to &lt;code&gt;$_&lt;/code&gt; if omitted.</source>
          <target state="translated">MASKで指定されたアクセス許可（ &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; で変更）を使用して、FILENAMEで指定されたディレクトリを作成します。成功した場合はtrueを返します。それ以外の場合はfalseを返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。（errno）。省略した場合、MASKはデフォルトで0777になり、省略した場合、FILENAMEはデフォルトで &lt;code&gt;$_&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="bb7b117514892c7c30b3fe9f7719849bbac44c0c" translate="yes" xml:space="preserve">
          <source>Creates the directory specified by FILENAME, with permissions specified by MASK (as modified by &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt;). If it succeeds it returns true; otherwise it returns false and sets &lt;code&gt;$!&lt;/code&gt; (errno). MASK defaults to 0777 if omitted, and FILENAME defaults to &lt;code&gt;$_&lt;/code&gt; if omitted.</source>
          <target state="translated">MASKで指定されたアクセス許可（ &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; で変更）を使用して、FILENAMEで指定されたディレクトリを作成します。成功した場合はtrueを返します。それ以外の場合はfalseを返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。（errno）。省略した場合、MASKはデフォルトで0777になり、省略した場合、FILENAMEはデフォルトで &lt;code&gt;$_&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="3cac7695a4d3664891070ffa2341b3035d0f19e8" translate="yes" xml:space="preserve">
          <source>Creating Custom RE Engines</source>
          <target state="translated">カスタムREエンジンの作成</target>
        </trans-unit>
        <trans-unit id="76d93a113b300b303dad480ac2a300eb6051aa71" translate="yes" xml:space="preserve">
          <source>Creating New Variables</source>
          <target state="translated">新しい変数の作成</target>
        </trans-unit>
        <trans-unit id="ca3daf69e2f937f89c7b4c76bccdabe68e3b34bf" translate="yes" xml:space="preserve">
          <source>Creating Threads</source>
          <target state="translated">スレッドの作成</target>
        </trans-unit>
        <trans-unit id="00c8935ea8223dcafffacb17ecb8c41069921e4c" translate="yes" xml:space="preserve">
          <source>Creating Unicode</source>
          <target state="translated">ユニコードの作成</target>
        </trans-unit>
        <trans-unit id="9a6874111f18f654b4c464c7232a28e3e371a0c4" translate="yes" xml:space="preserve">
          <source>Creating and Calling an Anonymous Subroutine in C</source>
          <target state="translated">C言語での匿名サブルーチンの作成と呼び出し</target>
        </trans-unit>
        <trans-unit id="57dbae3986bf4e92740a80829b68126452d91265" translate="yes" xml:space="preserve">
          <source>Creating threads inside &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; or &lt;code&gt;INIT&lt;/code&gt; blocks should not be relied upon. Depending on the Perl version and the application code, results may range from success, to (apparently harmless) warnings of leaked scalar, or all the way up to crashing of the Perl interpreter.</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、または &lt;code&gt;INIT&lt;/code&gt; ブロック内にスレッドを作成することはあてにしないでください。Perlのバージョンとアプリケーションコードに応じて、結果は成功から、リークされたスカラーの（明らかに無害な）警告、またはPerlインタープリターのクラッシュに至るまでの範囲に及ぶ可能性があります。</target>
        </trans-unit>
        <trans-unit id="e13e0554f557ba882751e261b5a60777b337bea6" translate="yes" xml:space="preserve">
          <source>Creation</source>
          <target state="translated">Creation</target>
        </trans-unit>
        <trans-unit id="bfac50d6424b5166c3ee2808c85ae7c139b5182f" translate="yes" xml:space="preserve">
          <source>Credits</source>
          <target state="translated">Credits</target>
        </trans-unit>
        <trans-unit id="dbfe7362b2b881e1e5fb877d5c3a4872cad26c3a" translate="yes" xml:space="preserve">
          <source>Cross</source>
          <target state="translated">Cross</target>
        </trans-unit>
        <trans-unit id="beaa2e9dbdf1ef3ec15f5de471f07f4851c7dc4d" translate="yes" xml:space="preserve">
          <source>Cross-compilation</source>
          <target state="translated">Cross-compilation</target>
        </trans-unit>
        <trans-unit id="c43833b5347e1426f60796becda4f61af3fd0923" translate="yes" xml:space="preserve">
          <source>Cross-platform helper methods</source>
          <target state="translated">クロスプラットフォームのヘルパーメソッド</target>
        </trans-unit>
        <trans-unit id="011ef13d181b36064597a661d4df564056d4ff83" translate="yes" xml:space="preserve">
          <source>Cross-platform methods are being moved into MM_Any. If you can't find something that used to be in here, look in MM_Any.</source>
          <target state="translated">クロスプラットフォームのメソッドは MM_Any に移動されています。ここにあったものが見つからない場合は、MM_Anyを探してみてください。</target>
        </trans-unit>
        <trans-unit id="57799b23e7a710965dddb84cacd4ec89c1bbb1f6" translate="yes" xml:space="preserve">
          <source>Cross.U</source>
          <target state="translated">Cross.U</target>
        </trans-unit>
        <trans-unit id="ef9075f5545abec4dcc7e79d15c590cae4255eac" translate="yes" xml:space="preserve">
          <source>Cross.pm</source>
          <target state="translated">Cross.pm</target>
        </trans-unit>
        <trans-unit id="74c3c4ec5d65e9bc6995543581db9cbe363527f7" translate="yes" xml:space="preserve">
          <source>Cross/README</source>
          <target state="translated">Cross/README</target>
        </trans-unit>
        <trans-unit id="cef80d77f8c81ee5266d145a95eedb7c0a3f235f" translate="yes" xml:space="preserve">
          <source>Crypt</source>
          <target state="translated">Crypt</target>
        </trans-unit>
        <trans-unit id="ad96a37a856f346a15c53478f77eb332fbfa2f2b" translate="yes" xml:space="preserve">
          <source>Cryptographically signed modules</source>
          <target state="translated">暗号化されたモジュール</target>
        </trans-unit>
        <trans-unit id="0141138dc5196a48315b4577e2fbfbeecad52362" translate="yes" xml:space="preserve">
          <source>Csym.U</source>
          <target state="translated">Csym.U</target>
        </trans-unit>
        <trans-unit id="52962f195b14aa22c7fc6a7f9b3d2ee383096fec" translate="yes" xml:space="preserve">
          <source>Cuddle &lt;code&gt;elsif&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;../functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; blocks. For example, print</source>
          <target state="translated">寄り添う &lt;code&gt;elsif&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、そして &lt;code&gt;&lt;a href=&quot;../functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロックを。たとえば、印刷</target>
        </trans-unit>
        <trans-unit id="d64219b5f8b4b745bbd46c3a32d3c7d8682cff39" translate="yes" xml:space="preserve">
          <source>Curious/ambitious users are welcome to propose additional features they wish to see in &lt;b&gt;Pod::Checker&lt;/b&gt; and &lt;b&gt;podchecker&lt;/b&gt; and verify that the checks are consistent with &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt;.</source>
          <target state="translated">好奇心が&lt;b&gt;強い&lt;/b&gt; /野心的なユーザーは、&lt;b&gt;Pod :: Checker&lt;/b&gt;と&lt;b&gt;podchecker&lt;/b&gt;で確認したい追加機能を提案し、チェックが&lt;a href=&quot;../perlpod&quot;&gt;perlpodと&lt;/a&gt;一貫していることを確認できます。</target>
        </trans-unit>
        <trans-unit id="c48ab463ed0ddf5261f0effba0a08bda055eaeb3" translate="yes" xml:space="preserve">
          <source>Curly brackets are required on &lt;code&gt;if&lt;/code&gt; 's and &lt;code&gt;while&lt;/code&gt; 's.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; と &lt;code&gt;while&lt;/code&gt; には中括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="25cb75f4de27b7e8de98e7a40cc8ed9bcd201ef1" translate="yes" xml:space="preserve">
          <source>Curly brackets are required on &lt;code&gt;if&lt;/code&gt; s and &lt;code&gt;while&lt;/code&gt; s.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; と &lt;code&gt;while&lt;/code&gt; には中括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="9ba0ffd4b3f7127883810edb9b6f993db6663d0a" translate="yes" xml:space="preserve">
          <source>Current EMX environment does not allow</source>
          <target state="translated">現在のEMX環境では</target>
        </trans-unit>
        <trans-unit id="993eca74c49b7893afb4ab9ac873257ea5c190b4" translate="yes" xml:space="preserve">
          <source>Current EMX environment does not allow DLLs compiled using Unixish &lt;code&gt;a.out&lt;/code&gt; format to export symbols for data (or at least some types of data). This forces &lt;code&gt;omf&lt;/code&gt; -style compile of</source>
          <target state="translated">現在のEMX環境では、Unixish &lt;code&gt;a.out&lt;/code&gt; 形式を使用してコンパイルされたDLLがデータ（または少なくとも一部のタイプのデータ）のシンボルをエクスポートすることはできません。これは &lt;code&gt;omf&lt;/code&gt; スタイルのコンパイルを強制します</target>
        </trans-unit>
        <trans-unit id="68015f6bd2846a758438e4878547c94c08e2b442" translate="yes" xml:space="preserve">
          <source>Current experiments</source>
          <target state="translated">現在の実験</target>
        </trans-unit>
        <trans-unit id="2bb8d55eba9da4a81fde3753ae5baa7eec0d36a4" translate="yes" xml:space="preserve">
          <source>Current line number for the last filehandle accessed.</source>
          <target state="translated">最後にアクセスしたファイルハンドルの現在の行番号。</target>
        </trans-unit>
        <trans-unit id="5550dac4e1e7661323b4986a995e2ca80043241b" translate="yes" xml:space="preserve">
          <source>Current maintainer: Jesse Vincent. &amp;lt;jesse@bestpractical.com&amp;gt;</source>
          <target state="translated">現在のメンテナ：Jesse Vincent。&amp;lt;jesse@bestpractical.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c2eb4542085ed4c82b742e8aee8a24a813f00ba2" translate="yes" xml:space="preserve">
          <source>Current maintainer: Mark Allen &lt;code&gt;&amp;lt;mallen@cpan.org&amp;gt;&lt;/code&gt;</source>
          <target state="translated">現在のメンテナ：Mark Allen &lt;code&gt;&amp;lt;mallen@cpan.org&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c582ebd636905458cf86a650443a01ac6fd3e11" translate="yes" xml:space="preserve">
          <source>Current maintainer: Mark Allen &lt;code&gt;&amp;lt;mallencpan.org&amp;gt;&lt;/code&gt;</source>
          <target state="translated">現在のメンテナ：Mark Allen &lt;code&gt;&amp;lt;mallencpan.org&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="57b3ecd8cd4c7443afc115b419ddb924ddd90e1b" translate="yes" xml:space="preserve">
          <source>Current state of the interpreter.</source>
          <target state="translated">インタプリタの現状。</target>
        </trans-unit>
        <trans-unit id="196ba394fbe2cd700609c257874291b9dd014bf4" translate="yes" xml:space="preserve">
          <source>Currently $dir can only go down one level. &quot;foo&quot; is fine. &quot;foo/bar&quot; is not. &quot;../foo&quot; is right out.</source>
          <target state="translated">現在、$dirは1階層しか下がれません。&quot;foo&quot; は問題ありません。&quot;foo/bar&quot; はダメです。&quot;.../foo&quot; はすぐ外に出てしまいます。</target>
        </trans-unit>
        <trans-unit id="7596cea97372e37b0806dba55a5df461274d6e60" translate="yes" xml:space="preserve">
          <source>Currently (October 2001), that's these three:</source>
          <target state="translated">現在(2001年10月)は、この3つです。</target>
        </trans-unit>
        <trans-unit id="d0628d165c5886578d03829e62f234c1c39d03ea" translate="yes" xml:space="preserve">
          <source>Currently (as of perl version 5.004), use of the hash and array access functions requires the user to be aware of whether they are operating on &quot;normal&quot; hashes and arrays, or on their tied variants. The API may be changed to provide more transparent access to both tied and normal data types in future versions. [/MAYCHANGE]</source>
          <target state="translated">現在(Perlバージョン5.004の時点で)、ハッシュと配列のアクセス関数を使用するには、&quot;通常の &quot;ハッシュと配列のどちらで操作しているのか、あるいはそれらの紐付きデータ型で操作しているのかをユーザが認識している必要があります。将来のバージョンでは、より透過的なアクセスを提供するために、APIが変更される可能性があります。[/MAYCHANGE]</target>
        </trans-unit>
        <trans-unit id="a2eb1a3bc586c516867d29f387fd017886e0b406" translate="yes" xml:space="preserve">
          <source>Currently I don't know of any portable pure perl way to do this. Suggestions welcome.</source>
          <target state="translated">現在、私はこれを行うためのポータブルな純粋なPerlの方法を知りません。提案を歓迎します。</target>
        </trans-unit>
        <trans-unit id="d97947adc89187fe49c51cd883b8269beca4ae8c" translate="yes" xml:space="preserve">
          <source>Currently NAME is restricted to simple identifiers only. In other words, it must match &lt;code&gt;/^[_A-Za-z][_A-Za-z0-9]*\z/&lt;/code&gt; or its Unicode extension (see &lt;a href=&quot;utf8&quot;&gt;utf8&lt;/a&gt;), though it isn't extended by the locale (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;).</source>
          <target state="translated">現在、NAMEは単純な識別子のみに制限されています。つまり、 &lt;code&gt;/^[_A-Za-z][_A-Za-z0-9]*\z/&lt;/code&gt; またはそのUnicode拡張機能（&lt;a href=&quot;utf8&quot;&gt;utf8を&lt;/a&gt;参照）と&lt;a href=&quot;perllocale&quot;&gt;一致する必要が&lt;/a&gt;ありますが、ロケールによって拡張されていません（perllocaleを参照）。）。</target>
        </trans-unit>
        <trans-unit id="834c134ad81c4eaed0abb95e07ecfa3c6f7ccea9" translate="yes" xml:space="preserve">
          <source>Currently all versions of IBM's &quot;xlc&quot;, &quot;xlc_r&quot;, &quot;cc&quot;, &quot;cc_r&quot; or &quot;vac&quot; ANSI/C compiler will work for building Perl if that compiler works on your system.</source>
          <target state="translated">現在のところ、IBM の &quot;xlc&quot;、&quot;xlc_r&quot;、&quot;cc&quot;、&quot;cc_r&quot;、&quot;vac&quot; ANSI/C コンパイラのすべてのバージョンが、あなたのシステム上で動作するならば、Perl をビルドするために動作します。</target>
        </trans-unit>
        <trans-unit id="074b7a0d7926b13bdd6a6c1a7f2bd6fd96a950ef" translate="yes" xml:space="preserve">
          <source>Currently doesn't do anything at all. This flag has been a no-op for many versions of perl, at least as far back as perl5.003_07. It's allowed here for backwards compatibility.</source>
          <target state="translated">現在は何もしません。このフラグは、多くのバージョンのperlでは、少なくともperl5.003_07までは動作しませんでした。ここでは下位互換性のために許可されています。</target>
        </trans-unit>
        <trans-unit id="c6aff6e1789a080263345630866061a6188dd023" translate="yes" xml:space="preserve">
          <source>Currently experimental, strongly object-oriented, built for speed and intended as a toolkit for building micro web apps, custom frameworks or for tieing together existing Plack-compatible web applications with one central dispatcher.</source>
          <target state="translated">現在は実験的で、強くオブジェクト指向で、高速化のために構築されており、マイクロウェブアプリケーションやカスタムフレームワークを構築したり、既存のPlack互換のウェブアプリケーションを一つの中心的なディスパッチャで連携させたりするためのツールキットとして意図されています。</target>
        </trans-unit>
        <trans-unit id="09e5d195957c36cd6b2d43df6986ebc708f4c278" translate="yes" xml:space="preserve">
          <source>Currently installation instructions are at &lt;a href=&quot;http://perlce.sourceforge.net/&quot;&gt;http://perlce.sourceforge.net/&lt;/a&gt;.</source>
          <target state="translated">現在、インストール手順は&lt;a href=&quot;http://perlce.sourceforge.net/&quot;&gt;http://perlce.sourceforge.net/にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5e0d0b77d9ca938b7c7fd7206793cd1d22b949a5" translate="yes" xml:space="preserve">
          <source>Currently internal buffer lengths are limited to 32-bit only.</source>
          <target state="translated">現在、内部バッファの長さは32ビットのみに制限されています。</target>
        </trans-unit>
        <trans-unit id="2589b2340931b7a94577d8448f79f08344610895" translate="yes" xml:space="preserve">
          <source>Currently it is too complicated to parse your command for IO redirections. For capturing STDOUT or STDERR there is a work around however, since you can just inspect your buffers for the contents.</source>
          <target state="translated">現在のところ、IOリダイレクトのためにコマンドを解析するのは複雑すぎます。しかし、STDOUT や STDERR をキャプチャするためには、バッファの内容を検査するだけでよいので、回避策があります。</target>
        </trans-unit>
        <trans-unit id="d5ce11c20e5c9e26183b7df1f1d378e8843b7728" translate="yes" xml:space="preserve">
          <source>Currently loaded filename.</source>
          <target state="translated">現在ロードされているファイル名</target>
        </trans-unit>
        <trans-unit id="5e94b5b9580ddc9978e1586fd290c6a0085eaca0" translate="yes" xml:space="preserve">
          <source>Currently maintained by Jonathan &quot;Duke&quot; Leto &amp;lt;jonathan@leto.net&amp;gt; &lt;a href=&quot;http://leto.net&quot;&gt;http://leto.net&lt;/a&gt;</source>
          <target state="translated">現在、Jonathan &quot;Duke&quot; Leto &amp;lt;jonathan@leto.net&amp;gt; &lt;a href=&quot;http://leto.net&quot;&gt;http://leto.net&lt;/a&gt;によって管理されています</target>
        </trans-unit>
        <trans-unit id="8f84d89a92a777c50292f613277c843d0fca069e" translate="yes" xml:space="preserve">
          <source>Currently maintained by Ken Williams &lt;code&gt;&amp;lt;KWILLIAMS@cpan.org&amp;gt;&lt;/code&gt; .</source>
          <target state="translated">現在、Ken Williams &lt;code&gt;&amp;lt;KWILLIAMS@cpan.org&amp;gt;&lt;/code&gt; によって保守されています。</target>
        </trans-unit>
        <trans-unit id="3d499a420a8ad407cfcc7909e99725791aecb83a" translate="yes" xml:space="preserve">
          <source>Currently maintained by Michael G Schwern &lt;code&gt;schwern@pobox.com&lt;/code&gt;</source>
          <target state="translated">現在、Michael G Schwernによって管理されています &lt;code&gt;schwern@pobox.com&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64518f708c077132fb6c81bb482b7c41112aa09f" translate="yes" xml:space="preserve">
          <source>Currently maintained by Michael G Schwern &lt;code&gt;schwern@pobox.com&lt;/code&gt; .</source>
          <target state="translated">現在、Michael G Schwern &lt;code&gt;schwern@pobox.com&lt;/code&gt; によって保守されています。</target>
        </trans-unit>
        <trans-unit id="ac278ddc5ecea025d9c9b038420a6a20095c0d36" translate="yes" xml:space="preserve">
          <source>Currently maintained by Sullivan Beck (sbeck@cpan.org).</source>
          <target state="translated">現在はサリバンベック(sbeck@cpan.org)がメンテナンスしています。</target>
        </trans-unit>
        <trans-unit id="832ca62474658800234e1409a0265d04df2848bc" translate="yes" xml:space="preserve">
          <source>Currently maintained by the Perl 5 Porters, &amp;lt;perl5-porters@perl.org&amp;gt;.</source>
          <target state="translated">現在、Perl 5ポーター&amp;lt;perl5-porters@perl.org&amp;gt;によって管理されています。</target>
        </trans-unit>
        <trans-unit id="70916c857e67092afc3818c0725979a17bb2bc7e" translate="yes" xml:space="preserve">
          <source>Currently maintained by the Perl Toolchain Gang.</source>
          <target state="translated">現在はPerl Toolchain Gangによってメンテナンスされています。</target>
        </trans-unit>
        <trans-unit id="22b5ae24b9fd013adf87b86fd8614fe4c5e78cae" translate="yes" xml:space="preserve">
          <source>Currently maintained by the perl 5 porters &amp;lt;perl5-porters@perl.org&amp;gt;.</source>
          <target state="translated">現在、perl 5ポーター&amp;lt;perl5-porters@perl.org&amp;gt;によって管理されています。</target>
        </trans-unit>
        <trans-unit id="805cd2c1f1ca0def4cfd6434add453f59f15d8ad" translate="yes" xml:space="preserve">
          <source>Currently only &lt;code&gt;INDENT&lt;/code&gt; , &lt;code&gt;NAME&lt;/code&gt; , &lt;code&gt;DEFAULT_TYPE&lt;/code&gt; , &lt;code&gt;NAMES&lt;/code&gt; , &lt;code&gt;C_FILE&lt;/code&gt; and &lt;code&gt;XS_FILE&lt;/code&gt; are recognised.</source>
          <target state="translated">現在、 &lt;code&gt;INDENT&lt;/code&gt; 、 &lt;code&gt;NAME&lt;/code&gt; 、 &lt;code&gt;DEFAULT_TYPE&lt;/code&gt; 、 &lt;code&gt;NAMES&lt;/code&gt; 、 &lt;code&gt;C_FILE&lt;/code&gt; 、および &lt;code&gt;XS_FILE&lt;/code&gt; のみが認識されます。</target>
        </trans-unit>
        <trans-unit id="7d9f8fb10567a5f5b286e925fe020ed9ddbe898d" translate="yes" xml:space="preserve">
          <source>Currently only emitted when a printf-type format required more arguments than were supplied, but might be used in the future for other cases where we can statically determine that arguments to functions are missing, e.g. for the &lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt; function.</source>
          <target state="translated">現在、printf-type形式が提供されたよりも多くの引数を必要とする場合にのみ発行されますが、将来的には、関数の引数が不足していると静的に判断できる他のケース、たとえば&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;関数で使用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c06671bbb84a6f3c0a5e03cc037107c5b937b959" translate="yes" xml:space="preserve">
          <source>Currently the base class does nothing and returns an empty string.</source>
          <target state="translated">現在のところ、基底クラスは何もせず、空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="1e65fb55b89a16a6ff17064471534fc5b44c3a09" translate="yes" xml:space="preserve">
          <source>Currently the cache manager only keeps track of the build directory ($CPAN::Config-&amp;gt;{build_dir}). It is a simple FIFO mechanism that deletes complete directories below &lt;code&gt;build_dir&lt;/code&gt; as soon as the size of all directories there gets bigger than $CPAN::Config-&amp;gt;{build_cache} (in MB). The contents of this cache may be used for later re-installations that you intend to do manually, but will never be trusted by CPAN itself. This is due to the fact that the user might use these directories for building modules on different architectures.</source>
          <target state="translated">現在、キャッシュマネージャはビルドディレクトリ（$ CPAN :: Config-&amp;gt; {build_dir}）のみを追跡しています。これはシンプルなFIFOメカニズムであり、すべてのディレクトリのサイズが$ CPAN :: Config-&amp;gt; {build_cache}（MB単位）より大きくなるとすぐに、 &lt;code&gt;build_dir&lt;/code&gt; の下の完全なディレクトリを削除します。このキャッシュの内容は、後で手動で行う予定の再インストールに使用できますが、CPAN自体によって信頼されることはありません。これは、ユーザーがこれらのディレクトリを使用して、さまざまなアーキテクチャでモジュールをビルドする可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="85cb1004cde4eafeabb526e7c97d06160b9bc9ea" translate="yes" xml:space="preserve">
          <source>Currently the example could be something like this:</source>
          <target state="translated">現在の例では、次のようなものが考えられます。</target>
        </trans-unit>
        <trans-unit id="9ed938fc9ec074335a5a14ff39713fa96e2a44d4" translate="yes" xml:space="preserve">
          <source>Currently the first argument to define_alias() can be specified in the following ways:</source>
          <target state="translated">現在のところ、define_alias()の第一引数は以下のように指定することができます。</target>
        </trans-unit>
        <trans-unit id="a9bf96de0559faf3b7e1d096d1d8a5e2e4453bbc" translate="yes" xml:space="preserve">
          <source>Currently the following two build types are tested on NetWare:</source>
          <target state="translated">現在、以下の2種類のビルドがNetWare上でテストされています。</target>
        </trans-unit>
        <trans-unit id="0dfd46b204fb5d45e8f29132257a9dee7ed55c16" translate="yes" xml:space="preserve">
          <source>Currently the mantissa is reduced as much as possible, favouring higher exponents over lower ones (e.g. returning 1e7 instead of 10e6 or 10000000e0). This might change in the future, so do not depend on it.</source>
          <target state="translated">現在のところ、仮数は可能な限り削減されており、低い指数よりも高い指数を優先しています(例えば、10e6や10000000e0の代わりに1e7を返すなど)。これは将来的に変更されるかもしれませんので、それに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="cc52fa0221b520eb9cba69f5a8200cdef9bbc7cb" translate="yes" xml:space="preserve">
          <source>Currently the methods aren't as efficient as they could be, for reasons of clarity. This is probably a bad idea.</source>
          <target state="translated">現在の方法は、明確な理由から、効率的ではありません。これはおそらく悪い考えです。</target>
        </trans-unit>
        <trans-unit id="f8b020b4d907e7d336baf4a7bd1d21f0a642b241" translate="yes" xml:space="preserve">
          <source>Currently the only significant values are 'dmake' and 'nmake' for Windows users, instructing MakeMaker to generate a Makefile in the flavour of DMake (&quot;Dennis Vadura's Make&quot;) or Microsoft NMake respectively.</source>
          <target state="translated">現在のところ、Windowsユーザーにとって重要な値は'dmake'と'nmake'だけで、MakeMakerにDMake (&quot;Dennis Vadura's Make&quot;)やMicrosoft NMakeのフレーバーのMakefileを生成するように指示しています。</target>
        </trans-unit>
        <trans-unit id="f00b6778578143fea75a49ef468f9d31966e2d9a" translate="yes" xml:space="preserve">
          <source>Currently the value of &lt;code&gt;DISPLAY&lt;/code&gt; is ignored. It is recommended that it be set to be the hostname of the display, the server and screen in Unix notation. In the future the value of DISPLAY may be honored by Perl instead of using the default display.</source>
          <target state="translated">現在、 &lt;code&gt;DISPLAY&lt;/code&gt; の値は無視されます。ディスプレイ、サーバー、スクリーンのホスト名をUnix表記で設定することをお勧めします。将来的には、デフォルトの表示を使用する代わりに、PerlがDISPLAYの値を受け入れるようになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8768013178cf8fe711f0d308fff8053c79e45b7a" translate="yes" xml:space="preserve">
          <source>Currently there is no way to specify more than one library on the command line. This means the following does not work:</source>
          <target state="translated">現在のところ、コマンドラインで複数のライブラリを指定する方法はありません。つまり、以下のようには動作しません。</target>
        </trans-unit>
        <trans-unit id="a39b8349c59ac646b8af631b5ad977955e371ebf" translate="yes" xml:space="preserve">
          <source>Currently there is only one type of field hash, and only the boolean value of the mode makes a difference, but that may change.</source>
          <target state="translated">現在のところ、フィールドハッシュのタイプは1つだけで、モードのブール値だけが違いをもたらしますが、それは変更されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ae3b9b162a3784fe295b868497fbb629b1ddd426" translate="yes" xml:space="preserve">
          <source>Currently this OS-specific stuff consists of looking in the environment variables &quot;LANG&quot; and &quot;LANGUAGE&quot;; and on MSWin machines (where those variables are typically unused), this also tries using the module Win32::Locale to get a language-tag for whatever language/locale is currently selected in the &quot;Regional Settings&quot; (or &quot;International&quot;?) Control Panel. I welcome further suggestions for making this do the Right Thing under other operating systems that support localization.</source>
          <target state="translated">現在、このOS固有のものは、環境変数 &quot;LANG &quot;と &quot;LANGUAGE &quot;を探すことで構成されています。MSWinマシンでは(これらの変数は通常は使用されていません)、これはまた、モジュールWin32::Localeを使用して、&quot;地域設定&quot;(または &quot;国際&quot;?ローカライズをサポートしている他のオペレーティングシステムでこれを正しいものにするための更なる提案を歓迎します。</target>
        </trans-unit>
        <trans-unit id="1b78daa9cb8c8ba0c96aabebf728d92ea741a97c" translate="yes" xml:space="preserve">
          <source>Currently this always uses mergesort. See sortsv_flags for a more flexible routine.</source>
          <target state="translated">現在のところ、これは常に mergesort を使用しています。より柔軟なルーチンについては sortsv_flags を参照してください。</target>
        </trans-unit>
        <trans-unit id="99139b870fbe31ffb01aeaae72d3575f4248f3e1" translate="yes" xml:space="preserve">
          <source>Currently this class works by just filtering out the non-Pod stuff from a given input file.</source>
          <target state="translated">現在のところ、このクラスは与えられた入力ファイルからPod以外のものをフィルタリングするだけで動作します。</target>
        </trans-unit>
        <trans-unit id="8c05bed42565fb273b3a58a2b778911f3dba48d8" translate="yes" xml:space="preserve">
          <source>Currently this has only been tested on Unix and doesn't contain any of the Windows-specific code from the &lt;code&gt;Module::Build&lt;/code&gt; project. I'll do that next.</source>
          <target state="translated">現在、これはUnixでのみテストされており、 &lt;code&gt;Module::Build&lt;/code&gt; プロジェクトからのWindows固有のコードは含まれていません。次はそれをします。</target>
        </trans-unit>
        <trans-unit id="6c09a661f6643655325273d50b2f4ce06d5609d8" translate="yes" xml:space="preserve">
          <source>Currently this isn't used for anything, but it's provided (with default value of &lt;code&gt;(ref($language) &amp;amp;&amp;amp; $language-&amp;gt;{'encoding'})) or &quot;iso-8859-1&quot;&lt;/code&gt; ) as a sort of suggestion that it may be useful/necessary to associate encodings with your language handles (whether on a per-class or even per-handle basis.)</source>
          <target state="translated">現在、これは何にも使用されていませんが、次のような提案として提供されています（デフォルト値は &lt;code&gt;(ref($language) &amp;amp;&amp;amp; $language-&amp;gt;{'encoding'})) or &quot;iso-8859-1&quot;&lt;/code&gt; ）。エンコーディングを言語ハンドルに関連付けることが有用/必要な場合があります（クラスごと、またはハンドルごとでも）。</target>
        </trans-unit>
        <trans-unit id="2fe9e02e28a1376fbaaa825eb0420d6aa9001bf2" translate="yes" xml:space="preserve">
          <source>Currently this just takes the last bit of &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref($language)&lt;/a&gt;&lt;/code&gt;, turns underscores to dashes, and returns it. So if $language is an object of class Hee::HOO::Haw::en_us, $language-&amp;gt;language_tag() returns &quot;en-us&quot;. (Yes, the usual representation for that language tag is &quot;en-US&quot;, but case is</source>
          <target state="translated">現在、これは &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref($language)&lt;/a&gt;&lt;/code&gt; の最後のビットを取得し、アンダースコアをダッシュ​​に変換して返します。したがって、$ languageがクラスHee :: HOO :: Haw :: en_usのオブジェクトである場合、$ language-&amp;gt; language_tag（）は &quot;en-us&quot;を返します。（はい、その言語タグの通常の表現は「en-US」ですが、大文字と小文字は</target>
        </trans-unit>
        <trans-unit id="79f7485198cd482639db4f4626a9508a51ae8d0f" translate="yes" xml:space="preserve">
          <source>Currently this module understands the following types. h2xs may only know a subset. The sizes of the numeric types are chosen by the &lt;code&gt;Configure&lt;/code&gt; script at compile time.</source>
          <target state="translated">現在、このモジュールは以下のタイプを理解しています。h2xsはサブセットのみを知っている場合があります。数値タイプのサイズは、コンパイル時に &lt;code&gt;Configure&lt;/code&gt; スクリプトによって選択されます。</target>
        </trans-unit>
        <trans-unit id="d2d377b4476a6e188762144f586ad2d608b464a9" translate="yes" xml:space="preserve">
          <source>Currently, &lt;code&gt;given&lt;/code&gt; blocks can't always be used as proper expressions. This may be addressed in a future version of Perl.</source>
          <target state="translated">現在、 &lt;code&gt;given&lt;/code&gt; ブロックは常に適切な式として使用できるとは限りません。これは、Perlの将来のバージョンで対処される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5d26c1593e61e13dda079b542bc00ebe32e1e263" translate="yes" xml:space="preserve">
          <source>Currently, Math::BigInt::new() defaults to 0, while Math::BigInt::new('') results in 'NaN'. This might change in the future, so use always the following explicit forms to get a zero or NaN:</source>
          <target state="translated">現在のところ、Math::BigInt::new()のデフォルトは0で、Math::BigInt::new('')の結果は'NaN'です。これは将来的に変更される可能性があるので、ゼロまたはNaNを取得するには常に以下の明示的な形式を使用してください。</target>
        </trans-unit>
        <trans-unit id="5a3571347f1fb8b0138ff4086aa2cd9a390c3586" translate="yes" xml:space="preserve">
          <source>Currently, Perl deals with UTF-8 strings and non-UTF-8 strings slightly differently. A flag in the SV, &lt;code&gt;SVf_UTF8&lt;/code&gt; , indicates that the string is internally encoded as UTF-8. Without it, the byte value is the codepoint number and vice versa. This flag is only meaningful if the SV is &lt;code&gt;SvPOK&lt;/code&gt; or immediately after stringification via &lt;code&gt;SvPV&lt;/code&gt; or a similar macro. You can check and manipulate this flag with the following macros:</source>
          <target state="translated">現在、PerlはUTF-8文字列と非UTF-8文字列をわずかに異なって扱います。SVのフラグ &lt;code&gt;SVf_UTF8&lt;/code&gt; は、文字列が内部的にUTF-8としてエンコードされていることを示します。それがなければ、バイト値はコードポイント番号であり、逆もまた同様です。このフラグは、SVが &lt;code&gt;SvPOK&lt;/code&gt; である場合、または &lt;code&gt;SvPV&lt;/code&gt; または同様のマクロによる文字列化の直後にのみ意味があります。このフラグは、次のマクロで確認および操作できます。</target>
        </trans-unit>
        <trans-unit id="cf064da20402a373389bd1e8534e66d897ddfb89" translate="yes" xml:space="preserve">
          <source>Currently, an unescaped &quot;~&quot; before a character other than a bracket or a comma is taken to mean just a &quot;~&quot; and that character. I.e., &quot;~X&quot; means the same as &quot;~~X&quot; -- i.e., one literal tilde, and then one literal &quot;X&quot;. However, by using &quot;~X&quot;, you are assuming that no future version of Maketext will use &quot;~X&quot; as a magic escape sequence. In practice this is not a great problem, since first off you can just write &quot;~~X&quot; and not worry about it; second off, I doubt I'll add lots of new magic characters to bracket notation; and third off, you aren't likely to want literal &quot;~&quot; characters in your messages anyway, since it's not a character with wide use in natural language text.</source>
          <target state="translated">現在、大括弧やカンマ以外の文字の前にエスケープされていない&quot;~&quot;は、&quot;~&quot;とその文字だけを意味するものとみなされています。つまり、&quot;~X &quot;は&quot;~~X &quot;と同じ意味です --つまり、一つのリテラルチルダと一つのリテラル &quot;X &quot;を意味します。しかし、&quot;~X &quot;を使うということは、将来のMaketextのどのバージョンでも魔法のエスケープシーケンスとして&quot;~X &quot;を使わないことを想定しているということです。第一に、あなたは &quot;~~X&quot; を書くだけでそれを気にしないことができるので、実際にはこれは大きな問題ではありません。第二に、私は括弧記法に新しい魔法の文字をたくさん追加するとは思えません。</target>
        </trans-unit>
        <trans-unit id="32c5c8dadaaaf31c38a9691666537875247237cb" translate="yes" xml:space="preserve">
          <source>Currently, bracket groups do not nest. That is, you &lt;b&gt;cannot&lt;/b&gt; say:</source>
          <target state="translated">現在、ブラケットグループはネストされていません。つまり、次の&lt;b&gt;ように&lt;/b&gt;言うこと&lt;b&gt;はできませ&lt;/b&gt;ん。</target>
        </trans-unit>
        <trans-unit id="c35cdca66e034e7f9a47d31a205334d612013eef" translate="yes" xml:space="preserve">
          <source>Currently, for BigInts &lt;code&gt;$e&lt;/code&gt; is always 0, except +inf and -inf, where it is &lt;code&gt;+inf&lt;/code&gt; ; and for NaN, where it is &lt;code&gt;NaN&lt;/code&gt; ; and for &lt;code&gt;$x == 0&lt;/code&gt; , where it is &lt;code&gt;1&lt;/code&gt; (to be compatible with Math::BigFloat's internal representation of a zero as &lt;code&gt;0E1&lt;/code&gt; ).</source>
          <target state="translated">現在、BigIntsのために &lt;code&gt;$e&lt;/code&gt; 、それがどこにあるか、+ INFと-INFを除き、常に0である &lt;code&gt;+inf&lt;/code&gt; 。そしてNaNの場合、それは &lt;code&gt;NaN&lt;/code&gt; です。そしてために &lt;code&gt;$x == 0&lt;/code&gt; それは、 &lt;code&gt;1&lt;/code&gt; （ASゼロの数学::ビッグフロートの内部表現と互換性があることが &lt;code&gt;0E1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="beb5d0250d9ace27aad40903e5fff21089b05d9e" translate="yes" xml:space="preserve">
          <source>Currently, on all platforms except MSWin32, all</source>
          <target state="translated">現在、MSWin32を除くすべてのプラットフォームで、すべての</target>
        </trans-unit>
        <trans-unit id="93a247e0eef683aaac7910c01f3f928a9e46d78c" translate="yes" xml:space="preserve">
          <source>Currently, only the &lt;code&gt;access&lt;/code&gt; sub-pragma is implemented. It enables (or disables) the use of access() when available, that is, on most UNIX systems and other POSIX environments. See details below.</source>
          <target state="translated">現在、 &lt;code&gt;access&lt;/code&gt; サブプラグマのみが実装されています。使用可能な場合、つまり、ほとんどのUNIXシステムおよびその他のPOSIX環境で、access（）の使用を有効（または無効）にします。詳細は以下をご覧ください。</target>
        </trans-unit>
        <trans-unit id="12cb6e902a01a88f56d9045c1e314fafc987b2ba" translate="yes" xml:space="preserve">
          <source>Currently, the only significant value for &lt;code&gt;flags&lt;/code&gt; is SVf_UTF8.</source>
          <target state="translated">現在、 &lt;code&gt;flags&lt;/code&gt; 唯一の重要な値はSVf_UTF8です。</target>
        </trans-unit>
        <trans-unit id="c22d9a7fee9cae91b42a0d8e2cfac398a39a9b2b" translate="yes" xml:space="preserve">
          <source>Currently, the only useful value for &lt;code&gt;flags&lt;/code&gt; is SVf_UTF8.</source>
          <target state="translated">現在、 &lt;code&gt;flags&lt;/code&gt; 有用な値はSVf_UTF8 のみです。</target>
        </trans-unit>
        <trans-unit id="2b251ef9a6ee9de77a03ddc9608c4a3c0db1c0a0" translate="yes" xml:space="preserve">
          <source>Currently, the outermost formatting instruction wins, so for example underlined text inside a region of bold text is displayed as simply bold. There may be some better approach possible.</source>
          <target state="translated">現在のところ、書式設定命令は一番外側のものが勝ちますので、例えば太字の領域内の下線付きテキストは単純に太字として表示されます。もっと良い方法があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="3ca8600ba039585f9f853e2c43bcdff7d5ab9e0b" translate="yes" xml:space="preserve">
          <source>Currently, the subroutine can be identified statically if the RV that the &lt;code&gt;rv2cv&lt;/code&gt; is to operate on is provided by a suitable &lt;code&gt;gv&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; op. A &lt;code&gt;gv&lt;/code&gt; op is suitable if the GV's CV slot is populated. A &lt;code&gt;const&lt;/code&gt; op is suitable if the constant value must be an RV pointing to a CV. Details of this process may change in future versions of Perl. If the &lt;code&gt;rv2cv&lt;/code&gt; op has the &lt;code&gt;OPpENTERSUB_AMPER&lt;/code&gt; flag set then no attempt is made to identify the subroutine statically: this flag is used to suppress compile-time magic on a subroutine call, forcing it to use default runtime behaviour.</source>
          <target state="translated">現在、 &lt;code&gt;rv2cv&lt;/code&gt; が操作するRVが適切な &lt;code&gt;gv&lt;/code&gt; または &lt;code&gt;const&lt;/code&gt; op によって提供されている場合、サブルーチンは静的に識別できます。 &lt;code&gt;gv&lt;/code&gt; GVのCVスロットが移入された場合にオペアンプが適しています。 &lt;code&gt;const&lt;/code&gt; の定数値がCVを指すRVでなければならない場合opが適しています。このプロセスの詳細は、Perlの将来のバージョンで変更される可能性があります。 &lt;code&gt;rv2cv&lt;/code&gt; opに &lt;code&gt;OPpENTERSUB_AMPER&lt;/code&gt; フラグが設定されている場合、サブルーチンを静的に識別しようとする試みは行われません。このフラグは、サブルーチン呼び出しのコンパイル時のマジックを抑制し、デフォルトのランタイム動作を使用するように強制します。</target>
        </trans-unit>
        <trans-unit id="1e2d2e7b351cedc7ed2289316efdff5558012869" translate="yes" xml:space="preserve">
          <source>Currently, we only allow opened filehandles or filenames, but not strings. The internals would need some reworking to facilitate stringified archives.</source>
          <target state="translated">現在のところ、オープンされたファイルハンドルかファイル名だけを許可していますが、文字列は許可していません。文字列化されたアーカイブを容易にするために、内部を再構築する必要があるでしょう。</target>
        </trans-unit>
        <trans-unit id="810afe6a34891b144a1f9e0ce40e9fc1217c35e6" translate="yes" xml:space="preserve">
          <source>Currently, we only support this if the filehandle is an IO::Zlib object. Environments, like apache, will present you with an opened filehandle to an uploaded file, which might be a compressed archive.</source>
          <target state="translated">現在のところ、ファイルハンドルが IO::Zlib オブジェクトの場合のみサポートしています。apache のような環境では、アップロードされたファイル (圧縮アーカイブかもしれません)のオープンされたファイルハンドルが表示されます。</target>
        </trans-unit>
        <trans-unit id="261fc98a0206bd66bd4ad6212e54d2bfab7d8db4" translate="yes" xml:space="preserve">
          <source>Currently, whether or not the test suite passed with no 'problems' (such as TODO passed).</source>
          <target state="translated">現在、テストスイートが「問題なし」で合格したかどうか(TODO合格など)。</target>
        </trans-unit>
        <trans-unit id="c505ffc91edd3f9012e8a66a72815302c62cb3ca" translate="yes" xml:space="preserve">
          <source>Currently, you must be running at least perl v5.6.0 in order to run with MEDIUM or HIGH security. This is simply because the safety tests use functions from L</source>
          <target state="translated">現在のところ、MEDIUM または HIGH のセキュリティで実行するには、少なくとも perl v5.6.0 を実行している必要があります。これは、安全性テストが L</target>
        </trans-unit>
        <trans-unit id="19f401a7406fb2ade217c4c2d091602740509bb8" translate="yes" xml:space="preserve">
          <source>Curtis &quot;Ovid&quot; Poe &amp;lt;ovid@cpan.org&amp;gt;</source>
          <target state="translated">Curtis &quot;Ovid&quot; Poe &amp;lt;ovid@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="7afc80af35ce6ee31ebae219a53944bd2652c7da" translate="yes" xml:space="preserve">
          <source>Custom Layers</source>
          <target state="translated">カスタムレイヤー</target>
        </trans-unit>
        <trans-unit id="dbdaeda1e073966b4e479d9fff0e7793b0904106" translate="yes" xml:space="preserve">
          <source>Custom Operators</source>
          <target state="translated">カスタムオペレータ</target>
        </trans-unit>
        <trans-unit id="d0eae33b0c090e3966d3c68512ada19e1528011c" translate="yes" xml:space="preserve">
          <source>Custom formatters can be loaded configured using the &lt;code&gt;formatter_class&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</source>
          <target state="translated">カスタムフォーマッタは、 &lt;code&gt;formatter_class&lt;/code&gt; パラメータを使用して&lt;a href=&quot;#new&quot;&gt;newに&lt;/a&gt;設定してロードできます。</target>
        </trans-unit>
        <trans-unit id="53cff91188bebb2a553103fb8e7b63cd42bccaa2" translate="yes" xml:space="preserve">
          <source>Custom operator support is an experimental feature that allows you to define your own ops. This is primarily to allow the building of interpreters for other languages in the Perl core, but it also allows optimizations through the creation of &quot;macro-ops&quot; (ops which perform the functions of multiple ops which are usually executed together, such as &lt;code&gt;gvsv, gvsv, add&lt;/code&gt; .)</source>
          <target state="translated">カスタムオペレーターサポートは、独自の操作を定義できる実験的な機能です。これは主に、Perlコアで他の言語のインタープリターを構築できるようにするためですが、「マクロ &lt;code&gt;gvsv, gvsv, add&lt;/code&gt; 」（通常一緒に実行される複数の演算の機能を実行する演算、たとえばgvsvなど）を作成して最適化することもできます。 gvsv、追加。）</target>
        </trans-unit>
        <trans-unit id="b8a0f9b4738b676273a2a999093c300569cd6824" translate="yes" xml:space="preserve">
          <source>Customization of the dist targets can be done by specifying a hash reference to the dist attribute of the WriteMakefile call. The following parameters are recognized:</source>
          <target state="translated">distターゲットのカスタマイズは、WriteMakefile呼び出しのdist属性へのハッシュ参照を指定することで行うことができます。以下のパラメータが認識されます。</target>
        </trans-unit>
        <trans-unit id="0b9b392a3be38eacab1a203c181ca6e780bde6d0" translate="yes" xml:space="preserve">
          <source>Customized option parser for Pod::Perldoc</source>
          <target state="translated">Pod::Perldoc用にカスタマイズされたオプションパーサー</target>
        </trans-unit>
        <trans-unit id="d0f3d41e3c41ddc6cbc9c2daec27882d80caea71" translate="yes" xml:space="preserve">
          <source>Cwd</source>
          <target state="translated">Cwd</target>
        </trans-unit>
        <trans-unit id="fd9825bfa4c850e67c2151a6f5292a3e86f0c912" translate="yes" xml:space="preserve">
          <source>Cwd - get pathname of current working directory</source>
          <target state="translated">Cwd-現在の作業ディレクトリのパス名を取得する</target>
        </trans-unit>
        <trans-unit id="160555969f1a8fde234517fab23669eee0ccbd1e" translate="yes" xml:space="preserve">
          <source>Cwd.xs</source>
          <target state="translated">Cwd.xs</target>
        </trans-unit>
        <trans-unit id="73fc7f50fdec5b6f0f95bef5f8e06196f92c8ab5" translate="yes" xml:space="preserve">
          <source>Cygwin = GNU+Cygnus+Windows (Don't leave UNIX without it)</source>
          <target state="translated">Cygwin=GNU+Cygnus+Windows (これを使わずにUNIXを放置してはいけない)</target>
        </trans-unit>
        <trans-unit id="b410b02920a07e0c1b2f5517c0638087253c2758" translate="yes" xml:space="preserve">
          <source>Cygwin Configuration</source>
          <target state="translated">Cygwinの設定</target>
        </trans-unit>
        <trans-unit id="f2fd19eff84130ae501b7f66fc64ed3790d3e356" translate="yes" xml:space="preserve">
          <source>Cygwin does an outstanding job of providing UNIX-like semantics on top of Win32 systems. However, in addition to the items noted above, there are some differences that you should know about. This is a very brief guide to portability, more information can be found in the Cygwin documentation.</source>
          <target state="translated">Cygwinは、Win32システムの上にUNIXライクなセマンティクスを提供するという優れた仕事をしています。しかし、上記の項目に加えて、知っておくべきいくつかの違いがあります。これは移植性についての非常に簡単なガイドで、より多くの情報はCygwinのドキュメントにあります。</target>
        </trans-unit>
        <trans-unit id="39bcb7dc63150f69c7968352d73ab68ec6457826" translate="yes" xml:space="preserve">
          <source>Cygwin does not initialize all original Win32 environment variables. See the bottom of this page &lt;a href=&quot;http://cygwin.com/cygwin-ug-net/setup-env.html&quot;&gt;http://cygwin.com/cygwin-ug-net/setup-env.html&lt;/a&gt; for &quot;Restricted Win32 environment&quot;.</source>
          <target state="translated">Cygwinは、元のすべてのWin32環境変数を初期化するわけではありません。「制限されたWin32環境」については、このページの下部&lt;a href=&quot;http://cygwin.com/cygwin-ug-net/setup-env.html&quot;&gt;http://cygwin.com/cygwin-ug-net/setup-env.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="81c2c7aa1db1394160b27a38c6928b843acda7e8" translate="yes" xml:space="preserve">
          <source>Cygwin is covered by the GNU General Public License (but that shouldn't matter for Perl use). Cygwin contains (in addition to the shell) a comprehensive set of standard Unix toolkit utilities.</source>
          <target state="translated">CygwinはGNU一般公衆利用許諾契約書でカバーされています(しかし、Perlの使用には関係ないはずです)。Cygwinは(シェルに加えて)標準的なUnixツールキットユーティリティの包括的なセットを含んでいます。</target>
        </trans-unit>
        <trans-unit id="8258ca2d192f15ab780ba7a84929a7edb3f631ab" translate="yes" xml:space="preserve">
          <source>Cygwin pathnames are separated by forward (</source>
          <target state="translated">Cygwinのパス名は前方(</target>
        </trans-unit>
        <trans-unit id="9651770d389e8830b4b1e3539f723c1e80eca364" translate="yes" xml:space="preserve">
          <source>Cygwin processes have their own pid, which is different from the underlying windows pid. Most posix compliant Proc functions expect the cygwin pid, but several Win32::Process functions expect the winpid. E.g. &lt;code&gt;$$&lt;/code&gt; is the cygwin pid of</source>
          <target state="translated">Cygwinプロセスには独自のpidがあり、これは基礎となるWindows pidとは異なります。ほとんどのposix準拠のProc関数はcygwin pidを想定していますが、いくつかのWin32 :: Process関数はwinpidを想定しています。たとえば &lt;code&gt;$$&lt;/code&gt; は、のcygwin pidです</target>
        </trans-unit>
        <trans-unit id="05c0c2f636a8edb75c77d41c4c7bfc716236cfce" translate="yes" xml:space="preserve">
          <source>Cygwin uses 64-bit integers for internal size and position calculations, this will be correctly detected and defined by Configure.</source>
          <target state="translated">Cygwinは内部サイズと位置の計算に64ビット整数を使用していますが、これはConfigureによって正しく検出され、定義されます。</target>
        </trans-unit>
        <trans-unit id="d140941c1521d2349d4bd6c64c31475654a7b43c" translate="yes" xml:space="preserve">
          <source>Cylindrical coordinates,</source>
          <target state="translated">円筒形の座標。</target>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="96f0e31b49aae2a6d915ae3b613e4575c8b6a5d9" translate="yes" xml:space="preserve">
          <source>D. INSTALL</source>
          <target state="translated">D.インストール</target>
        </trans-unit>
        <trans-unit id="7f2430aff77c078755160a61817f59ac5a442628" translate="yes" xml:space="preserve">
          <source>D. Wegscheid &amp;lt;wegscd@whirlpool.com&amp;gt; R. Schertler &amp;lt;roderick@argon.org&amp;gt; J. Hietaniemi &amp;lt;jhi@iki.fi&amp;gt; G. Aas &amp;lt;gisle@aas.no&amp;gt;</source>
          <target state="translated">D. Wegscheid &amp;lt;wegscd@whirlpool.com&amp;gt; R. Schertler &amp;lt;roderick@argon.org&amp;gt; J. Hietaniemi &amp;lt;jhi@iki.fi&amp;gt; G. Aas &amp;lt;gisle@aas.no&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a856f8342e4097ec46ec2ae4d0ef67ea993ed17d" translate="yes" xml:space="preserve">
          <source>D&lt;b&gt;1&lt;/b&gt;h</source>
          <target state="translated">D&lt;b&gt;1&lt;/b&gt;h</target>
        </trans-unit>
        <trans-unit id="cbcb89e55acdd88dfeeed3c5a12d75530af183e0" translate="yes" xml:space="preserve">
          <source>DATA STRUCTURES</source>
          <target state="translated">データ構造</target>
        </trans-unit>
        <trans-unit id="8c76abdec41a7652375d00f4bf05256b82c68494" translate="yes" xml:space="preserve">
          <source>DATE</source>
          <target state="translated">DATE</target>
        </trans-unit>
        <trans-unit id="c12b32a0cc17b3f8909c76d7b1bfe6c328500bd4" translate="yes" xml:space="preserve">
          <source>DB</source>
          <target state="translated">DB</target>
        </trans-unit>
        <trans-unit id="d3a3e481c8bad23af4b07c6a711d820269aa05e1" translate="yes" xml:space="preserve">
          <source>DB - programmatic interface to the Perl debugging API</source>
          <target state="translated">DB-Perl デバッグ API へのプログラマティックなインターフェイス</target>
        </trans-unit>
        <trans-unit id="f76a9cbb39dfd2541a72b35e7e8f4653016195c0" translate="yes" xml:space="preserve">
          <source>DBM Comparisons</source>
          <target state="translated">DBM比較</target>
        </trans-unit>
        <trans-unit id="ca5f67a0ba0d8efff1637f1da816838257659ffd" translate="yes" xml:space="preserve">
          <source>DBM FILTERS</source>
          <target state="translated">DBM FILTERS</target>
        </trans-unit>
        <trans-unit id="89d82ce9435d1c0ea4a6bc6721d2f5690a7f92ea" translate="yes" xml:space="preserve">
          <source>DBM Filters are useful for a class of problems where you</source>
          <target state="translated">DBMフィルタは、以下のような問題に有効です。</target>
        </trans-unit>
        <trans-unit id="7578525c0394078f99ffd4a40edc277d75ad744f" translate="yes" xml:space="preserve">
          <source>DBM_Filter</source>
          <target state="translated">DBM_Filter</target>
        </trans-unit>
        <trans-unit id="b38c7d32f616c7556af3364ba66546ed0749f03b" translate="yes" xml:space="preserve">
          <source>DBM_Filter -- Filter DBM keys/values</source>
          <target state="translated">DBM_Filter --DBM のキー/値をフィルタリングする</target>
        </trans-unit>
        <trans-unit id="b6b9b1dec59c3a08e8723935d64f316cd6ef56cc" translate="yes" xml:space="preserve">
          <source>DBM_Filter::compress</source>
          <target state="translated">DBM_Filter::compress</target>
        </trans-unit>
        <trans-unit id="017e1847be264d3b84ccfa3271d40094dd0bf1eb" translate="yes" xml:space="preserve">
          <source>DBM_Filter::compress - filter for DBM_Filter</source>
          <target state="translated">DBM_Filter::compress-DBM_Filter 用フィルタ</target>
        </trans-unit>
        <trans-unit id="e29bd395446d47ab211ec2e1146eefd14e1b20a3" translate="yes" xml:space="preserve">
          <source>DBM_Filter::encode</source>
          <target state="translated">DBM_Filter::encode</target>
        </trans-unit>
        <trans-unit id="f5e031e4b2f19789fcf7c2f3ba685f80663d177c" translate="yes" xml:space="preserve">
          <source>DBM_Filter::encode - filter for DBM_Filter</source>
          <target state="translated">DBM_Filter::encode-DBM_Filter 用フィルタ</target>
        </trans-unit>
        <trans-unit id="fcb2034b0ecd24b1bee4254c842bbb672bdbc7d6" translate="yes" xml:space="preserve">
          <source>DBM_Filter::int32</source>
          <target state="translated">DBM_Filter::int32</target>
        </trans-unit>
        <trans-unit id="5fe5fd365abd08f6af165c5d6a16911995a685a9" translate="yes" xml:space="preserve">
          <source>DBM_Filter::int32 - filter for DBM_Filter</source>
          <target state="translated">DBM_Filter::int32-DBM_Filter 用フィルタ</target>
        </trans-unit>
        <trans-unit id="4a3e906903359c539b73264aaf12312ed4cfcbb3" translate="yes" xml:space="preserve">
          <source>DBM_Filter::null</source>
          <target state="translated">DBM_Filter::null</target>
        </trans-unit>
        <trans-unit id="f2b61c34157f644580714175a9ac63fc9b039644" translate="yes" xml:space="preserve">
          <source>DBM_Filter::null - filter for DBM_Filter</source>
          <target state="translated">DBM_Filter::null-DBM_Filter 用のフィルタ</target>
        </trans-unit>
        <trans-unit id="9bc092e44e5524b9cfa3d26c271d34f1880924e0" translate="yes" xml:space="preserve">
          <source>DBM_Filter::utf8</source>
          <target state="translated">DBM_Filter::utf8</target>
        </trans-unit>
        <trans-unit id="1bfbf4c2c625b28768968c9e40b648dd9c14d44d" translate="yes" xml:space="preserve">
          <source>DBM_Filter::utf8 - filter for DBM_Filter</source>
          <target state="translated">DBM_Filter::utf8-DBM_Filter 用フィルタ</target>
        </trans-unit>
        <trans-unit id="b02f6970eb3456617162054c6756321f766cb936" translate="yes" xml:space="preserve">
          <source>DB_BTREE</source>
          <target state="translated">DB_BTREE</target>
        </trans-unit>
        <trans-unit id="b33927ab202d8fc0904f1f9b9d856b0b54625b77" translate="yes" xml:space="preserve">
          <source>DB_File</source>
          <target state="translated">DB_File</target>
        </trans-unit>
        <trans-unit id="2c972e69463b8f58734f3a05c1368f9d2f81dba9" translate="yes" xml:space="preserve">
          <source>DB_File - Perl5 access to Berkeley DB version 1.x</source>
          <target state="translated">DB_File-Berkeley DB バージョン 1.x への Perl5 アクセス</target>
        </trans-unit>
        <trans-unit id="39dffad4b26fe77aef729449dbd757ed61bcfd3a" translate="yes" xml:space="preserve">
          <source>DB_File tests failing on Tru64</source>
          <target state="translated">Tru64 での DB_File テストの失敗</target>
        </trans-unit>
        <trans-unit id="70c0dec73cd04aa605d8521bd81cda83ad9852d0" translate="yes" xml:space="preserve">
          <source>DB_HASH</source>
          <target state="translated">DB_HASH</target>
        </trans-unit>
        <trans-unit id="a90a8db476a6644718df5c14fa00dae64a074e16" translate="yes" xml:space="preserve">
          <source>DB_RECNO</source>
          <target state="translated">DB_RECNO</target>
        </trans-unit>
        <trans-unit id="1214b29ce37cdd875514a6b9e684feaa105d5701" translate="yes" xml:space="preserve">
          <source>DB_RECNO allows both fixed-length and variable-length flat text files to be manipulated using the same key/value pair interface as in DB_HASH and DB_BTREE. In this case the key will consist of a record (line) number.</source>
          <target state="translated">DB_RECNO は、DB_HASH や DB_BTREE と同じキーと値のペアインタフェースを使用して、固定長と可変長の両方のフラットテキストファイルを操作することができます。この場合、キーはレコード (行)番号で構成されます。</target>
        </trans-unit>
        <trans-unit id="54300d66c5de040df830a07fcc62363319edc6b3" translate="yes" xml:space="preserve">
          <source>DB_RECNO provides an interface to flat text files. Both variable and fixed length records are supported.</source>
          <target state="translated">DB_RECNO はフラットテキストファイルへのインターフェースを提供します。可変長レコードと固定長レコードの両方がサポートされています。</target>
        </trans-unit>
        <trans-unit id="c84dd33284289aa30abfb4901524e660dc3f8fe1" translate="yes" xml:space="preserve">
          <source>DCL$PATH</source>
          <target state="translated">DCL$PATH</target>
        </trans-unit>
        <trans-unit id="0a9147164ebeee67def0458db65d380af3d847bd" translate="yes" xml:space="preserve">
          <source>DDD over gdb</source>
          <target state="translated">gdb上のDDD</target>
        </trans-unit>
        <trans-unit id="bc02c571c975735551b89853409b435a7d2a911b" translate="yes" xml:space="preserve">
          <source>DEBUGGING</source>
          <target state="translated">DEBUGGING</target>
        </trans-unit>
        <trans-unit id="72e25783db89a734a8c44381188ac1bdfc0af08b" translate="yes" xml:space="preserve">
          <source>DEFINE_VERSION: -D line to set the module version when compiling</source>
          <target state="translated">DEFINE_VERSION:-D行でコンパイル時にモジュールのバージョンを設定します。</target>
        </trans-unit>
        <trans-unit id="fb047f1c6b1e76a02beec100d3b58403874139af" translate="yes" xml:space="preserve">
          <source>DEFINITIONS</source>
          <target state="translated">DEFINITIONS</target>
        </trans-unit>
        <trans-unit id="3cc8567954f6ca3e5e003d24429635955d1d02f9" translate="yes" xml:space="preserve">
          <source>DEFUNCT</source>
          <target state="translated">DEFUNCT</target>
        </trans-unit>
        <trans-unit id="83e39656dc7ac7175a510ee6558f6f575c96339a" translate="yes" xml:space="preserve">
          <source>DEPRECATED</source>
          <target state="translated">DEPRECATED</target>
        </trans-unit>
        <trans-unit id="e0dc4b2a8e17072634cdeee1910633cab2fa2010" translate="yes" xml:space="preserve">
          <source>DEPRECATED! It is planned to remove this function from a future release of Perl. Do not use it for new code; remove it from existing code.</source>
          <target state="translated">廃止されました。この関数は Perl の将来のリリースから削除される予定です。新しいコードには使用せず、既存のコードから削除してください。</target>
        </trans-unit>
        <trans-unit id="a157b2a5a436f4b25182b22c822a40b087fde127" translate="yes" xml:space="preserve">
          <source>DEPRECATED!!!</source>
          <target state="translated">DEPRECATED!!!</target>
        </trans-unit>
        <trans-unit id="0ceecbea9d37250860e1b3086c61f32787e7e837" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="translated">DESCRIPTION</target>
        </trans-unit>
        <trans-unit id="e7e49a1a7cfc18f44f90aaf5e4c176c2211c9f16" translate="yes" xml:space="preserve">
          <source>DESIGNING AND WRITING YOUR MODULE</source>
          <target state="translated">モジュールの設計と作成</target>
        </trans-unit>
        <trans-unit id="02f56a7bf01c1a870e819952336349625f50e2b7" translate="yes" xml:space="preserve">
          <source>DESTROY</source>
          <target state="translated">DESTROY</target>
        </trans-unit>
        <trans-unit id="1adeca5b77bafcb12821be20b10405718f410b83" translate="yes" xml:space="preserve">
          <source>DESTRUCT</source>
          <target state="translated">DESTRUCT</target>
        </trans-unit>
        <trans-unit id="9120423983b0359c503c676dadecd6bf8702131f" translate="yes" xml:space="preserve">
          <source>DETAILS</source>
          <target state="translated">DETAILS</target>
        </trans-unit>
        <trans-unit id="f459e7c8f3245e0293226ce8877ab5f73ac59297" translate="yes" xml:space="preserve">
          <source>DG/&lt;code&gt;UX&lt;/code&gt;</source>
          <target state="translated">DG/&lt;code&gt;UX&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7563ce76d34297c6913b33a614a4437ccf7e6bb6" translate="yes" xml:space="preserve">
          <source>DIAGNOSTICS</source>
          <target state="translated">DIAGNOSTICS</target>
        </trans-unit>
        <trans-unit id="d61aaf2b8c8a0d55b1cee7b943d2035b67af0d4d" translate="yes" xml:space="preserve">
          <source>DISPLAYING</source>
          <target state="translated">DISPLAYING</target>
        </trans-unit>
        <trans-unit id="7f70d69b899f50f51b56a174e2446671d41836a8" translate="yes" xml:space="preserve">
          <source>DJGPP is a port of GNU C/C++ compiler and development tools to 32-bit, protected-mode environment on Intel 32-bit CPUs running MS-DOS and compatible operating systems, by DJ Delorie &amp;lt;dj@delorie.com&amp;gt; and friends.</source>
          <target state="translated">DJGPPは、DJ Delorie &amp;lt;dj@delorie.com&amp;gt;およびその仲間による、MS-DOSおよび互換性のあるオペレーティングシステムを実行するIntel 32ビットCPUの32ビットプロテクトモード環境へのGNU C / C ++コンパイラおよび開発ツールのポートです。</target>
        </trans-unit>
        <trans-unit id="c7fcac2a520878c5b29e5384d7123ef0d8af803b" translate="yes" xml:space="preserve">
          <source>DLL forwarder generation</source>
          <target state="translated">DLLフォワーダ生成</target>
        </trans-unit>
        <trans-unit id="961816e97938085c744d70524c7f8b51961bbf33" translate="yes" xml:space="preserve">
          <source>DLL is loaded when</source>
          <target state="translated">DLLが読み込まれるのは</target>
        </trans-unit>
        <trans-unit id="b8fba0e1a3b69795fd7aeeb5df67e417334bbc08" translate="yes" xml:space="preserve">
          <source>DLL name mangling: 5.6.2 and beyond</source>
          <target state="translated">DLL名のマングリング。5.6.2以降</target>
        </trans-unit>
        <trans-unit id="5103efb394e8f4c78963cefb65d442857e85fbb9" translate="yes" xml:space="preserve">
          <source>DLL name mangling: pre 5.6.2</source>
          <target state="translated">DLL名のマングリング:5.6.2 より前のバージョン</target>
        </trans-unit>
        <trans-unit id="4199b473b62a8d487f588ef5f17c8e1e79fdfedc" translate="yes" xml:space="preserve">
          <source>DLLs in the system to be available</source>
          <target state="translated">利用可能なシステム内のDLL</target>
        </trans-unit>
        <trans-unit id="978758ab9cc6f96cf7ec21b1d65444522ce20560" translate="yes" xml:space="preserve">
          <source>DLLs was done due to misunderstanding of the OS/2 dynaloading model. OS/2 (effectively) maintains two different tables of loaded DLL:</source>
          <target state="translated">DLLは、OS/2のdynaloadingモデルを誤解したために行われました。OS/2は(事実上)ロードされたDLLの2つの異なるテーブルを保持しています。</target>
        </trans-unit>
        <trans-unit id="e72095491ba9a045230bfe18eae0af9d9f28e15a" translate="yes" xml:space="preserve">
          <source>DO NOT MIX MULTIPLE ENCODINGS</source>
          <target state="translated">複数の調味料を混合しないでください。</target>
        </trans-unit>
        <trans-unit id="321641aef17a94c7440c8b75a28914642814b302" translate="yes" xml:space="preserve">
          <source>DO NOT PUT TOO MANY SUSPECTS! Don't you try something like this!</source>
          <target state="translated">疑いをかけすぎないように! こんなことをするな!</target>
        </trans-unit>
        <trans-unit id="96cc00d75846a718bd722cef8a33a50a6d0f5535" translate="yes" xml:space="preserve">
          <source>DOCUMENTATION</source>
          <target state="translated">DOCUMENTATION</target>
        </trans-unit>
        <trans-unit id="6ec3afab8faec77e185bbb803869543c5a657284" translate="yes" xml:space="preserve">
          <source>DOCUMENTING YOUR MODULE</source>
          <target state="translated">モジュールを文書化する</target>
        </trans-unit>
        <trans-unit id="2613d94608f3128686c4d00e8f6984910962bf29" translate="yes" xml:space="preserve">
          <source>DOS also treats several filenames as special, such as AUX, PRN, NUL, CON, COM1, LPT1, LPT2, etc. Unfortunately, sometimes these filenames won't even work if you include an explicit directory prefix. It is best to avoid such filenames, if you want your code to be portable to DOS and its derivatives. It's hard to know what these all are, unfortunately.</source>
          <target state="translated">DOS では、AUX、PRN、NUL、CON、COM1、LPT1、LPT2 など、いくつかのファイル名を特別なものとして扱います。残念なことに、これらのファイル名は、明示的なディレクトリのプレフィックスを含んでいても動作しないことがあります。あなたのコードをDOSやその派生品に移植したいのであれば、このようなファイル名は避けた方が良いでしょう。残念ながら、これらがすべて何なのかを知ることは困難です。</target>
        </trans-unit>
        <trans-unit id="5340493a66303fc8d8a5c954e9bf8a43cd32f247" translate="yes" xml:space="preserve">
          <source>DOS and Derivatives</source>
          <target state="translated">DOSとデリバティブ</target>
        </trans-unit>
        <trans-unit id="9aa2dc24c805c53edba7676333ae68552dfd57a4" translate="yes" xml:space="preserve">
          <source>DOS like globbing and then some</source>
          <target state="translated">DOSはグロブのようなもので、あとは</target>
        </trans-unit>
        <trans-unit id="7d8fd5f2c8edcce479637c27bb0e3ab518146c38" translate="yes" xml:space="preserve">
          <source>DOS specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_Unix の DOS 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="473d3acc2af8ba63261a26a1b7f5515a6891c343" translate="yes" xml:space="preserve">
          <source>DOS, OS/2, VMS, VOS, and Windows can work similarly to Unix with &lt;code&gt;/&lt;/code&gt; as path separator, or in their own idiosyncratic ways (such as having several root directories and various &quot;unrooted&quot; device files such NIL: and LPT:).</source>
          <target state="translated">DOS、OS / 2、VMS、VOS、およびWindowsは、パス区切り文字として &lt;code&gt;/&lt;/code&gt; を使用するか、独自の固有の方法（NIL：やLPT：などのさまざまな「ルート化されていない」デバイスファイルなど）で、Unixと同様に機能します。 。</target>
        </trans-unit>
        <trans-unit id="654efd9c9792936a130d6037516309b5bdddee38" translate="yes" xml:space="preserve">
          <source>DPMI is required for RSX.</source>
          <target state="translated">RSXにはDPMIが必要です。</target>
        </trans-unit>
        <trans-unit id="2d2a24951ce705488575783be4472a26b333751c" translate="yes" xml:space="preserve">
          <source>DTrace is a framework for comprehensive system- and application-level tracing. Perl is a DTrace</source>
          <target state="translated">DTrace は、包括的なシステムやアプリケーションレベルのトレースを行うためのフレームワークです。Perl は DTrace</target>
        </trans-unit>
        <trans-unit id="d5bf3f40de5d663351b116d65dea7bcc046dcb12" translate="yes" xml:space="preserve">
          <source>DWIM is an acronym for &amp;ldquo;Do What I Mean&amp;rdquo;, the principle that something should just do what you want it to do without an undue amount of fuss. A bit of code that does &amp;ldquo;dwimming&amp;rdquo; is a &amp;ldquo;dwimmer&amp;rdquo;. Dwimming can require a great deal of behind-the-scenes magic, which (if it doesn&amp;rsquo;t stay properly behind the scenes) is called a &lt;b&gt;dweomer&lt;/b&gt; instead.</source>
          <target state="translated">DWIMは「Do What I Mean」の頭字語であり、過度の手間をかけずに、やりたいことだけを実行できるという原則です。「水泳」を行うコードのビットは「水泳」です。水泳には、舞台裏での多くの魔法が必要になる場合があります。舞台裏で適切に留まらない場合は、代わりに&lt;b&gt;dweomer&lt;/b&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="85028126eeeaacb6fe3db27b148fabc61b38f172" translate="yes" xml:space="preserve">
          <source>Damian Conway</source>
          <target state="translated">ダミアンコンウェイ</target>
        </trans-unit>
        <trans-unit id="84aeaa4ed1041b265c8434cc722f5bbd7d82bf67" translate="yes" xml:space="preserve">
          <source>Damian Conway (damian@conway.org)</source>
          <target state="translated">ダミアン・コンウェイ (damian@conway.org)</target>
        </trans-unit>
        <trans-unit id="56a7a2a736c65870e75794d64c28905d7b7353ac" translate="yes" xml:space="preserve">
          <source>Damian Conway (damian@conway.org). The maintainer of this module is now Rafael Garcia-Suarez (rgarciasuarez@gmail.com).</source>
          <target state="translated">Damian Conway (damian@conway.org)。このモジュールのメンテナは現在 Rafael Garcia-Suarez (rgarciasuarez@gmail.com)です。</target>
        </trans-unit>
        <trans-unit id="d1f605e1f77b8db2ab180142323e96f99783331d" translate="yes" xml:space="preserve">
          <source>Damian Conway's &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Autoformat&quot;&gt;Text::Autoformat&lt;/a&gt; handles all of the thinking for you.</source>
          <target state="translated">Damian Conwayの&lt;a href=&quot;http://search.cpan.org/perldoc/Text::Autoformat&quot;&gt;Text :: Autoformat&lt;/a&gt;は、すべての考え方を処理します。</target>
        </trans-unit>
        <trans-unit id="2db3f6d7414ff15624d9a6080d6aa063705cba8a" translate="yes" xml:space="preserve">
          <source>Dan Sugalski &amp;lt;dan@sidhe.org&amp;lt;gt&amp;gt;</source>
          <target state="translated">Dan Sugalski &amp;lt;dan@sidhe.org &amp;lt;gt&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f5fbfc9cec6cd72e230b1bbe73cbb08d9ccf37da" translate="yes" xml:space="preserve">
          <source>Daniel S. Lewart &amp;lt;</source>
          <target state="translated">ダニエルS.ルワート&amp;lt;</target>
        </trans-unit>
        <trans-unit id="7fd1dfde23d6a5c5d15d0aee8437a3fd73417fd6" translate="yes" xml:space="preserve">
          <source>Daniel S. Sterling has written a script that uses &lt;code&gt;IO::Uncompress::UnZip&lt;/code&gt; to read a zip file and unzip its contents to disk.</source>
          <target state="translated">Daniel S. Sterlingは、 &lt;code&gt;IO::Uncompress::UnZip&lt;/code&gt; を使用してzipファイルを読み取り、その内容をディスクに解凍するスクリプトを作成しました。</target>
        </trans-unit>
        <trans-unit id="8ed6fbf94844a47ecf83411b63cf050c8d28ac5b" translate="yes" xml:space="preserve">
          <source>Data Structures</source>
          <target state="translated">データ構造</target>
        </trans-unit>
        <trans-unit id="5cf272d33425f40ddbde3e44d761e3fc7c061ec7" translate="yes" xml:space="preserve">
          <source>Data Types and Data Type Utilities</source>
          <target state="translated">データ型とデータ型ユーティリティ</target>
        </trans-unit>
        <trans-unit id="6a99f8e09e7fe8334e0578359f60485516d4d7ce" translate="yes" xml:space="preserve">
          <source>Data after the &lt;code&gt;__DATA__&lt;/code&gt; token in a module is read using the FOOBAR::DATA filehandle. &lt;code&gt;__END__&lt;/code&gt; can still be used to denote the end of the &lt;code&gt;__DATA__&lt;/code&gt; section if followed by the token DATA - this is supported by the &lt;b&gt;SelfLoader&lt;/b&gt;. The &lt;code&gt;FOOBAR::DATA&lt;/code&gt; filehandle is left open if an &lt;code&gt;__END__&lt;/code&gt; followed by a DATA is found, with the filehandle positioned at the start of the line after the &lt;code&gt;__END__&lt;/code&gt; token. If no &lt;code&gt;__END__&lt;/code&gt; token is present, or an &lt;code&gt;__END__&lt;/code&gt; token with no DATA token on the same line, then the filehandle is closed.</source>
          <target state="translated">モジュールの &lt;code&gt;__DATA__&lt;/code&gt; トークンの後のデータは、FOOBAR :: DATAファイルハンドルを使用して読み取られます。 &lt;code&gt;__END__&lt;/code&gt; は依然としての終わり示すために使用することができる &lt;code&gt;__DATA__&lt;/code&gt; のトークンデータが続く場合セクションを-これはによってサポートされている&lt;b&gt;のSelfLoader&lt;/b&gt;。 &lt;code&gt;FOOBAR::DATA&lt;/code&gt; 場合はファイルハンドルを開いたままにされる &lt;code&gt;__END__&lt;/code&gt; は、後行の先頭に位置するファイルハンドルと、検出されたデータが続く &lt;code&gt;__END__&lt;/code&gt; のトークン。いかなる場合 &lt;code&gt;__END__&lt;/code&gt; のトークンが存在しない、又は &lt;code&gt;__END__&lt;/code&gt; 同じ行にトークンデータなしでトークン、次にファイルハンドルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="b652ad0a603cd7b47d334614ee31233474c9ab8d" translate="yes" xml:space="preserve">
          <source>Data flows through filters in the same order they appear in the source file. The uudecode filter appeared before the uncompress filter, so the source file will be uudecoded before it's uncompressed.</source>
          <target state="translated">データは、ソースファイルに現れた順にフィルタを通過します。uudecode フィルタは uncompress フィルタの前に現れたので、ソースファイルは解凍される前に uudecode されます。</target>
        </trans-unit>
        <trans-unit id="0f54a276a0206593cde1683f28ef51b63c547eda" translate="yes" xml:space="preserve">
          <source>Data mode (the default if you redirect or pipe output). This prints out your configuration data, without mailing anything. You can use this with &lt;b&gt;-v&lt;/b&gt; to get more complete data.</source>
          <target state="translated">データモード（リダイレクトまたはパイプ出力の場合のデフォルト）。これにより、メールを送信せずに構成データが出力されます。これを&lt;b&gt;-v&lt;/b&gt;と一緒に使用して、より完全なデータを取得できます。</target>
        </trans-unit>
        <trans-unit id="e6afd37625bc0367f512a035f9204374b0b5ded2" translate="yes" xml:space="preserve">
          <source>Data paragraphs are typically used for inlining non-Pod data that is to be used (typically passed through) when rendering the document to a specific format:</source>
          <target state="translated">データパラグラフは通常、文書を特定のフォーマットにレンダリングする際に、Pod以外のデータをインライン化するために使われます。</target>
        </trans-unit>
        <trans-unit id="94e20e5cd2604e57e9a0d23f02d2cd5d929f4af9" translate="yes" xml:space="preserve">
          <source>Data written to this layer should be UTF-8 encoded; data provided by this layer should be considered UTF-8 encoded. Can be set on any layer by &quot;:utf8&quot; dummy layer. Also set on &quot;:encoding&quot; layer.</source>
          <target state="translated">このレイヤに書き込まれるデータは UTF-8 エンコードされたものとし、このレイヤから提供されるデータは UTF-8 エンコードされたものとみなす。ダミーレイヤ「:utf8」により、どのレイヤでも設定可能。また、&quot;:encoding &quot;レイヤーにも設定する。</target>
        </trans-unit>
        <trans-unit id="97f1bb92da1e5e7c46dc020b7ec63efc045c0a68" translate="yes" xml:space="preserve">
          <source>Data: Arrays</source>
          <target state="translated">データ。配列</target>
        </trans-unit>
        <trans-unit id="de5afcac5fbd23280f46d7161af449533e2cceda" translate="yes" xml:space="preserve">
          <source>Data: Dates</source>
          <target state="translated">データ 日付</target>
        </trans-unit>
        <trans-unit id="c411e3f24a5ba1334882780f16f3e9dbf1c659d9" translate="yes" xml:space="preserve">
          <source>Data: Hashes (Associative Arrays)</source>
          <target state="translated">データ。ハッシュ(連想配列</target>
        </trans-unit>
        <trans-unit id="fa7113830ed5a59d6505a9385c9ea0bd8127836a" translate="yes" xml:space="preserve">
          <source>Data: Misc</source>
          <target state="translated">データ その他</target>
        </trans-unit>
        <trans-unit id="3e48ca0ae51772567ede6f2a3afe45cb0267ef60" translate="yes" xml:space="preserve">
          <source>Data: Numbers</source>
          <target state="translated">データ 数字</target>
        </trans-unit>
        <trans-unit id="58c8a967dc7612bd6e8f1483414d85eb62228a36" translate="yes" xml:space="preserve">
          <source>Data: Strings</source>
          <target state="translated">データです。文字列</target>
        </trans-unit>
        <trans-unit id="7d6e21c84e9451a0cec29192edeff8e21b85f25a" translate="yes" xml:space="preserve">
          <source>Data::Dumper</source>
          <target state="translated">Data::Dumper</target>
        </trans-unit>
        <trans-unit id="8c7c47d5705e647c7c4327d92117a5533391f0d0" translate="yes" xml:space="preserve">
          <source>Data::Dumper - stringified perl data structures, suitable for both printing and &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">Data :: Dumper-文字列化されたperlデータ構造。印刷と &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 両方に適しています</target>
        </trans-unit>
        <trans-unit id="ff7ea8e9cb1cf0ef3310359653bd8d014b4e17b6" translate="yes" xml:space="preserve">
          <source>Data::Dumper doesn't restore the UTF8 flag; is it broken?</source>
          <target state="translated">Data::Dumper は UTF8 フラグを復元しません。</target>
        </trans-unit>
        <trans-unit id="ab7ab098392e93c21506df2dbe7e96ac2b061b9d" translate="yes" xml:space="preserve">
          <source>Data::Dumper will catalog all references encountered while dumping the values. Cross-references (in the form of names of substructures in perl syntax) will be inserted at all possible points, preserving any structural interdependencies in the original set of values. Structure traversal is depth-first, and proceeds in order from the first supplied value to the last.</source>
          <target state="translated">Data::Dumperは、値をダンプしている間に遭遇したすべての参照をカタログ化します。元の値のセットの構造的な相互依存性を保持したまま、可能な限りすべてのポイントに相互参照 (Perl構文では部分構造の名前の形で)が挿入されます。構造体の探索は深さ優先で、最初に与えられた値から最後の値へと順に進みます。</target>
        </trans-unit>
        <trans-unit id="5db04e397940af8e76d0eac5bf08574521dd22ae" translate="yes" xml:space="preserve">
          <source>Database Interfaces</source>
          <target state="translated">データベースインターフェース</target>
        </trans-unit>
        <trans-unit id="a109465d898ba0dfa0c491af35be82208576d8f0" translate="yes" xml:space="preserve">
          <source>Database Ties</source>
          <target state="translated">データベース連携</target>
        </trans-unit>
        <trans-unit id="8562930b64d8c57b6dc3907022c61a4e6a5ac83f" translate="yes" xml:space="preserve">
          <source>Datatypes</source>
          <target state="translated">Datatypes</target>
        </trans-unit>
        <trans-unit id="08bd72896a609a3391d219b4992ef11ec132d222" translate="yes" xml:space="preserve">
          <source>Date Calculations</source>
          <target state="translated">日付の計算</target>
        </trans-unit>
        <trans-unit id="b79e7a3976aeb6614f1bdda5b3b2eeb809fac6f4" translate="yes" xml:space="preserve">
          <source>Date Comparisons</source>
          <target state="translated">日付比較</target>
        </trans-unit>
        <trans-unit id="6cd8d0e8ff629adf381174818e2158887210c59a" translate="yes" xml:space="preserve">
          <source>Date Parsing</source>
          <target state="translated">日付の解析</target>
        </trans-unit>
        <trans-unit id="27c49fc3479babc6dc4d9bc2dbc4c3a52288b570" translate="yes" xml:space="preserve">
          <source>Date comparisons are also possible, using the full suite of &quot;&amp;lt;&quot;, &quot;&amp;gt;&quot;, &quot;&amp;lt;=&quot;, &quot;&amp;gt;=&quot;, &quot;&amp;lt;=&amp;gt;&quot;, &quot;==&quot; and &quot;!=&quot;.</source>
          <target state="translated">&quot;&amp;lt;&quot;、 &quot;&amp;gt;&quot;、 &quot;&amp;lt;=&quot;、 &quot;&amp;gt; =&quot;、 &quot;&amp;lt;=&amp;gt;&quot;、 &quot;==&quot;、および &quot;！=&quot;の完全なスイートを使用して、日付の比較も可能です。</target>
        </trans-unit>
        <trans-unit id="0474fa39a613bd7eeec7bea46ccb23c0ca12e724" translate="yes" xml:space="preserve">
          <source>David Fiander and Peter Prymmer with thanks to Dennis Longnecker and William Raffloer for valuable reports, LPAR and PTF feedback. Thanks to Mike MacIsaac and Egon Terwedow for SG24-5944-00. Thanks to Ignasi Roca for pointing out the floating point problems. Thanks to John Goodyear for dynamic loading help.</source>
          <target state="translated">David FianderとPeter Prymmerは、貴重なレポート、LPARとPTFのフィードバックをしてくれたDennis LongneckerとWilliam Raffloerに感謝しています。SG24-5944-00 のための Mike MacIsaac と Egon Terwedow に感謝します。浮動小数点の問題を指摘してくれた Ignasi Roca に感謝します。John Goodyearさんには、ダイナミックロードのお手伝いをしていただきました。</target>
        </trans-unit>
        <trans-unit id="2723c98cfbb72ae38f478d52e32129d9547f0fba" translate="yes" xml:space="preserve">
          <source>David Golden</source>
          <target state="translated">デビッド・ゴールデン</target>
        </trans-unit>
        <trans-unit id="cd5088267e514d749afe6cca6fd8c81585cd5cf6" translate="yes" xml:space="preserve">
          <source>David Golden &amp;lt;dagolden@cpan.org&amp;gt;</source>
          <target state="translated">David Golden &amp;lt;dagolden@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d950594e5e25062fc0607cb94f5625028946e5a7" translate="yes" xml:space="preserve">
          <source>David Golden, &amp;lt;dagolden@cpan.org&amp;gt;</source>
          <target state="translated">David Golden、&amp;lt;dagolden@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8d95407bff3307b97ca4e8eedc2eced84a4438ae" translate="yes" xml:space="preserve">
          <source>David Muir Sharnoff &amp;lt;cpan@dave.sharnoff.org&amp;gt; with help from Tim Pierce and many many others.</source>
          <target state="translated">David Muir Sharnoff &amp;lt;cpan@dave.sharnoff.org&amp;gt;はTim Pierceや他の多くの人の助けを借りています。</target>
        </trans-unit>
        <trans-unit id="e8377f90fb8277814679b9bc2dc6627a930eb98a" translate="yes" xml:space="preserve">
          <source>David P.C. Wollmann, Richard Soderberg, Sean M. Burke, Tom Christiansen, Jim Cromie, and Jeffrey Goff for useful advice.</source>
          <target state="translated">David P.C.Wollmann、Richard Soderberg、Sean M.Burke、Tom Christiansen、Jim Cromie、Jeffrey Goffが有益なアドバイスをしてくれました。</target>
        </trans-unit>
        <trans-unit id="c7b3466055eaf20f2cad818f5843a292b4ca2d80" translate="yes" xml:space="preserve">
          <source>David Steinbrunner</source>
          <target state="translated">デビッド・スタインブルナー</target>
        </trans-unit>
        <trans-unit id="229d59d93e7e712ab429ce8580c0bd67e38e34f6" translate="yes" xml:space="preserve">
          <source>David Sundstrom &amp;lt;</source>
          <target state="translated">デビッド・サンドストロム&amp;lt;</target>
        </trans-unit>
        <trans-unit id="f0503142592629f2769705a0fac2de70daef3980" translate="yes" xml:space="preserve">
          <source>Dealing with Endian-ness</source>
          <target state="translated">エンディアンらしさに対処する</target>
        </trans-unit>
        <trans-unit id="c3570d3bcf3e90fdaa0791aacca802822c577102" translate="yes" xml:space="preserve">
          <source>Deallocate the memory used by all arenas. Note that all the individual SV heads and bodies within the arenas must already have been freed.</source>
          <target state="translated">全てのアリーナで使用されているメモリを解放します。アリーナ内の個々の SV ヘッドとボディは既に解放されている必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b05ceded49f425c214f9e2db173be8c8e1a3a8d6" translate="yes" xml:space="preserve">
          <source>Deallocates a backtrace received from get_c_bracktrace.</source>
          <target state="translated">get_c_bracktrace から受け取ったバックトレースを解放します。</target>
        </trans-unit>
        <trans-unit id="da8e6981129a80511c8976bfcddbe201d3626924" translate="yes" xml:space="preserve">
          <source>Dean Arnold &amp;lt;darnold AT presicient DOT com&amp;gt; - Stack size API</source>
          <target state="translated">Dean Arnold &amp;lt;darnold AT presicient DOT com&amp;gt;-スタックサイズAPI</target>
        </trans-unit>
        <trans-unit id="36ea2a10971530d1f3b41de8bb6af5b551a6ff3c" translate="yes" xml:space="preserve">
          <source>Debian GNU/kFreeBSD systems also used LinuxThreads up until and including the 6.0 release, but after that moved to FreeBSD thread semantics, which are POSIX-like.</source>
          <target state="translated">Debian GNU/kFreeBSD システムも 6.0 リリースまでは LinuxThreads を使用していましたが、その後は POSIX に似た FreeBSD のスレッドセマンティクスに移行しました。</target>
        </trans-unit>
        <trans-unit id="bd604d99e75e45d38bc7ac8fc714cde0097d901f" translate="yes" xml:space="preserve">
          <source>Debug</source>
          <target state="translated">Debug</target>
        </trans-unit>
        <trans-unit id="d7013dc1690e39306f211d819fa32173c56252c9" translate="yes" xml:space="preserve">
          <source>Debug Output</source>
          <target state="translated">デバッグ出力</target>
        </trans-unit>
        <trans-unit id="b05fb520e7c0513f4478767235e0d3c4b22c35e6" translate="yes" xml:space="preserve">
          <source>Debug a given program using threads (experimental).</source>
          <target state="translated">与えられたプログラムをスレッドを使ってデバッグします(実験的)。</target>
        </trans-unit>
        <trans-unit id="5f7d3acbef3ce732ed02816b2d1048d41d127c3b" translate="yes" xml:space="preserve">
          <source>Debug a given program via the &lt;code&gt;Devel::ptkdb&lt;/code&gt; GUI.</source>
          <target state="translated">&lt;code&gt;Devel::ptkdb&lt;/code&gt; GUI を介して特定のプログラムをデバッグします。</target>
        </trans-unit>
        <trans-unit id="bd4cb2194799882c3c66213892a49639bae1936c" translate="yes" xml:space="preserve">
          <source>Debug subroutine enter/exit.</source>
          <target state="translated">デバッグサブルーチンの入退出を行います。</target>
        </trans-unit>
        <trans-unit id="4333709c02ad553298735787840db205447e4bf6" translate="yes" xml:space="preserve">
          <source>Debugger Commands</source>
          <target state="translated">デバッガコマンド</target>
        </trans-unit>
        <trans-unit id="9914c0d0aed65ea8f1d64b044cdff2c3fddecc0d" translate="yes" xml:space="preserve">
          <source>Debugger Customization</source>
          <target state="translated">デバッガのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="99ecabc4479d51c9a08930be819ce0858218cf75" translate="yes" xml:space="preserve">
          <source>Debugger Customization Functions</source>
          <target state="translated">デバッガのカスタマイズ機能</target>
        </trans-unit>
        <trans-unit id="666cf254f85ea5d057a4582c5d8d5fdd8a5b7e41" translate="yes" xml:space="preserve">
          <source>Debugger Input/Output</source>
          <target state="translated">デバッガの入出力</target>
        </trans-unit>
        <trans-unit id="9751ba81f798bbd7760a0c6d24e8d83eb20c30ba" translate="yes" xml:space="preserve">
          <source>Debugger Internal Variables</source>
          <target state="translated">デバッガの内部変数</target>
        </trans-unit>
        <trans-unit id="d026646d6b3410bc5de0b3ffc654c93e730dbd4e" translate="yes" xml:space="preserve">
          <source>Debugger Internals</source>
          <target state="translated">デバッガ内部</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="b77aa217c50f6fe5bfd3f17727cebc255c68a2ca" translate="yes" xml:space="preserve">
          <source>Debugging Compile-Time Statements</source>
          <target state="translated">コンパイルタイム ステートメントのデバッグ</target>
        </trans-unit>
        <trans-unit id="56a3daa806e9216f2f247d92a9789167d765ab05" translate="yes" xml:space="preserve">
          <source>Debugging Memory Usage</source>
          <target state="translated">メモリ使用量のデバッグ</target>
        </trans-unit>
        <trans-unit id="7f9818adf8fc8493412c933de791d9f5c9b959e2" translate="yes" xml:space="preserve">
          <source>Debugging Perl Memory Usage</source>
          <target state="translated">Perl のメモリ使用量をデバッグする</target>
        </trans-unit>
        <trans-unit id="9e08887136b7961fe7c673b82471c4d25acee0d8" translate="yes" xml:space="preserve">
          <source>Debugging Regular Expressions</source>
          <target state="translated">正規表現のデバッグ</target>
        </trans-unit>
        <trans-unit id="a55f46b26d2e609b7ed7dd3dcdfe13f913890ab9" translate="yes" xml:space="preserve">
          <source>Debugging Regular Expressions in perldebug</source>
          <target state="translated">perldebug で正規表現をデバッグする</target>
        </trans-unit>
        <trans-unit id="b148c2d0cd84634d55a9ffc8e11de74f37399218" translate="yes" xml:space="preserve">
          <source>Debugging Utilities</source>
          <target state="translated">デバッグ ユーティリティ</target>
        </trans-unit>
        <trans-unit id="8057c32aee1676af868f8f55325f1ae849dbb6de" translate="yes" xml:space="preserve">
          <source>Debugging this module is more than a bit complex due to interference from the software producing the indices on CPAN, the mirroring process on CPAN, packaging, configuration, synchronicity, and even (gasp!) due to bugs within the CPAN.pm module itself.</source>
          <target state="translated">このモジュールのデバッグは、CPAN上でインデックスを生成するソフトウェアからの干渉、CPAN上でのミラーリングプロセス、パッケージング、設定、同期性、さらには(ガツンと来た!)CPAN.pmモジュール自体のバグによるものなので、少々複雑です。</target>
        </trans-unit>
        <trans-unit id="8c401279896f59c9ac4daaaace09acb4863e72b5" translate="yes" xml:space="preserve">
          <source>December, 2001; by Nicholas Clark: make timestr() recognise the style 'none' and return an empty string. If cmpthese is calling timethese, make it pass the style in. (so that 'none' will suppress output). Make sub new dump its debugging output to STDERR, to be consistent with everything else. All bugs found while writing a regression test.</source>
          <target state="translated">2001年12月;by Nicholas Clark:timestr()はスタイル 'none' を認識して空の文字列を返すようにする。もし cmpthese が timethese を呼び出しているならば、スタイルを渡すようにしてください。(これで 'none' は出力を抑制します)。sub new のデバッグ出力を STDERR にダンプするようにし、他のすべてのものと一貫性を持たせる。リグレッションテストを書いている間に見つかったすべてのバグ。</target>
        </trans-unit>
        <trans-unit id="a39a923b41cc5f61bf60cc9e5e68a22cae934912" translate="yes" xml:space="preserve">
          <source>Decide what system you'll use for lexicon keys. If you insist, you can use opaque IDs (if you're nostalgic for &lt;code&gt;catgets&lt;/code&gt; ), but I have better suggestions in the section &quot;Entries in Each Lexicon&quot;, above. Assuming you opt for meaningful keys that double as values (like &quot;Minimum ([_1]) is larger than maximum ([_2])!\n&quot;), you'll have to settle on what language those should be in. For the sake of argument, I'll call this English, specifically American English, &quot;en-US&quot;.</source>
          <target state="translated">レキシコンキーに使用するシステムを決定します。主張する場合は、不透明なIDを使用できます（ &lt;code&gt;catgets&lt;/code&gt; 懐かしい場合）が、上記の「各レキシコンのエントリ」のセクションでより良い提案をしています。値として2倍になる意味のあるキーを選択した場合（「最小（[_1]）は最大（[_2]）よりも大きい！\ n」のように）、これらのキーの言語を決定する必要があります。議論のために、私はこの英語、特にアメリカ英語を「en-US」と呼びます。</target>
        </trans-unit>
        <trans-unit id="d6f37721bc043c8dd7475e584d1b0bdd4b256c24" translate="yes" xml:space="preserve">
          <source>Declaration</source>
          <target state="translated">Declaration</target>
        </trans-unit>
        <trans-unit id="c2604e0c48edbf848a6d96ba3a8037bd0dc24ff4" translate="yes" xml:space="preserve">
          <source>Declaration and Access of Arrays of Arrays</source>
          <target state="translated">配列の配列の宣言とアクセス</target>
        </trans-unit>
        <trans-unit id="ebfaff41dd116e96392e7550a2b66d9d22027082" translate="yes" xml:space="preserve">
          <source>Declaration of MORE ELABORATE RECORDS</source>
          <target state="translated">MORE ELABORATE RECORDS宣言</target>
        </trans-unit>
        <trans-unit id="5ec1670ea8c424f5ee15a9e695d0c44630da018c" translate="yes" xml:space="preserve">
          <source>Declaration of a HASH OF ARRAYS</source>
          <target state="translated">HASH OF ARRAYSの宣言</target>
        </trans-unit>
        <trans-unit id="b8c8706e060a6811d69b8d2fd72320a3142d6844" translate="yes" xml:space="preserve">
          <source>Declaration of a HASH OF COMPLEX RECORDS</source>
          <target state="translated">複雑なレコードのハッシュの宣言</target>
        </trans-unit>
        <trans-unit id="4ce4e4163cd30ea8c4a041080be1e50e00906890" translate="yes" xml:space="preserve">
          <source>Declaration of a HASH OF HASHES</source>
          <target state="translated">ハッシュオブハッシュの宣言</target>
        </trans-unit>
        <trans-unit id="968cb53513edaef6840cbb9bd46e4ba68cbf91c3" translate="yes" xml:space="preserve">
          <source>Declaration of an ARRAY OF ARRAYS</source>
          <target state="translated">アレイオブアレイズの宣言</target>
        </trans-unit>
        <trans-unit id="43a23bde1fe732a75628839289c49e738219d5a3" translate="yes" xml:space="preserve">
          <source>Declaration of an ARRAY OF HASHES</source>
          <target state="translated">アレイオブハッシュの宣言</target>
        </trans-unit>
        <trans-unit id="b9b846963186dedc9a34aab11fab9a0a092e2d1b" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="translated">Declarations</target>
        </trans-unit>
        <trans-unit id="01b95bbd7c9d60ecf5c5308055fe69e1d280f03c" translate="yes" xml:space="preserve">
          <source>Declare &lt;code&gt;ExtUtils::Typemaps::Basic&lt;/code&gt; as a build-time dependency in &lt;code&gt;Makefile.PL&lt;/code&gt; (use &lt;code&gt;BUILD_REQUIRES&lt;/code&gt; ), or in your &lt;code&gt;Build.PL&lt;/code&gt; (use &lt;code&gt;build_requires&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;Makefile.PL&lt;/code&gt; （ &lt;code&gt;BUILD_REQUIRES&lt;/code&gt; を使用）または &lt;code&gt;Build.PL&lt;/code&gt; （ &lt;code&gt;build_requires&lt;/code&gt; を使用）で、 &lt;code&gt;ExtUtils::Typemaps::Basic&lt;/code&gt; をビルド時の依存関係として宣言します。</target>
        </trans-unit>
        <trans-unit id="1b76a6d1632adb267d07f45f92fbd92ddebb3c0e" translate="yes" xml:space="preserve">
          <source>Declare Just &lt;code&gt;SP&lt;/code&gt; . This is actually identical to &lt;code&gt;dSP&lt;/code&gt; , and declares a local copy of perl's stack pointer, available via the &lt;code&gt;SP&lt;/code&gt; macro. See &lt;code&gt;SP&lt;/code&gt; . (Available for backward source code compatibility with the old (Perl 5.005) thread model.)</source>
          <target state="translated">Just &lt;code&gt;SP&lt;/code&gt; を宣言します。これは実際には &lt;code&gt;dSP&lt;/code&gt; と同一であり、 &lt;code&gt;SP&lt;/code&gt; マクロを介して利用可能なperlのスタックポインタのローカルコピーを宣言します。 &lt;code&gt;SP&lt;/code&gt; を参照してください。（古い（Perl 5.005）スレッドモデルとのソースコードの下位互換性のために利用可能です。）</target>
        </trans-unit>
        <trans-unit id="b246d2c3a34b0309dc705ab2bf6fd78585237723" translate="yes" xml:space="preserve">
          <source>Declare a picture format for use by the &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 関数で使用する画像形式を宣言します。例えば：</target>
        </trans-unit>
        <trans-unit id="1337e532e08b8945e760914191518070a82f311f" translate="yes" xml:space="preserve">
          <source>Declare a picture format for use by the &lt;code&gt;&lt;a href=&quot;write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function. For example:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 関数で使用する画像形式を宣言します。例えば：</target>
        </trans-unit>
        <trans-unit id="79b9fcb83aaabac99dc56e38a306c39d5ceed2f1" translate="yes" xml:space="preserve">
          <source>Declare a stack marker variable, &lt;code&gt;mark&lt;/code&gt; , for the XSUB. See &lt;code&gt;MARK&lt;/code&gt; and &lt;code&gt;dORIGMARK&lt;/code&gt; .</source>
          <target state="translated">XSUBのスタックマーカー変数 &lt;code&gt;mark&lt;/code&gt; を宣言します。 &lt;code&gt;MARK&lt;/code&gt; および &lt;code&gt;dORIGMARK&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2bc325f65b062b55c0a046c697861918ab5ba8a6" translate="yes" xml:space="preserve">
          <source>Declare a typedef named &lt;code&gt;my_cxt_t&lt;/code&gt; that is a structure that contains all the data that needs to be interpreter-local.</source>
          <target state="translated">インタープリターローカルである必要があるすべてのデータを含む構造である &lt;code&gt;my_cxt_t&lt;/code&gt; という名前のtypedefを宣言します。</target>
        </trans-unit>
        <trans-unit id="0f3343311ea82b57cf2a91faf914e7146706bc4b" translate="yes" xml:space="preserve">
          <source>Declare constants</source>
          <target state="translated">定数の宣言</target>
        </trans-unit>
        <trans-unit id="e90d1629cda5e7b6f31494a6b20b0b96a93f8fec" translate="yes" xml:space="preserve">
          <source>Declare local variables for a multicall. See &lt;a href=&quot;perlcall#LIGHTWEIGHT-CALLBACKS&quot;&gt;LIGHTWEIGHT CALLBACKS in perlcall&lt;/a&gt;.</source>
          <target state="translated">マルチコールのローカル変数を宣言します。&lt;a href=&quot;perlcall#LIGHTWEIGHT-CALLBACKS&quot;&gt;perlcallのLIGHTWEIGHT CALLBACKSを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fe8095595a1e11e48a82985239de9e9b7e44058b" translate="yes" xml:space="preserve">
          <source>Declare struct-like datatypes as Perl classes</source>
          <target state="translated">構造体のようなデータ型を Perl クラスとして宣言する</target>
        </trans-unit>
        <trans-unit id="fd95c3fe676cb80336a8b7970197ea750ed934e1" translate="yes" xml:space="preserve">
          <source>Declares a block of tests you expect to fail and $why. Perhaps it's because you haven't fixed a bug or haven't finished a new feature:</source>
          <target state="translated">失敗すると予想されるテストのブロックと $why を宣言します。おそらく、バグを修正していないか、新機能を完成させていないからでしょう。</target>
        </trans-unit>
        <trans-unit id="4b08be3bcb055a5bfcdfe0f7e147c5f7a01a9af4" translate="yes" xml:space="preserve">
          <source>Declares a local copy of perl's stack pointer for the XSUB, available via the &lt;code&gt;SP&lt;/code&gt; macro. See &lt;code&gt;SP&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;SP&lt;/code&gt; マクロを介して利用可能な、XSUBのperlのスタックポインターのローカルコピーを宣言します。 &lt;code&gt;SP&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="775811626d86d0489442dc9b97620d79f2638c9b" translate="yes" xml:space="preserve">
          <source>Declares that no more items will be added to the queue.</source>
          <target state="translated">これ以上のアイテムをキューに追加しないことを宣言します。</target>
        </trans-unit>
        <trans-unit id="a88496a0e111c684a669138708549e2de67d1e28" translate="yes" xml:space="preserve">
          <source>Declares that the stream accepts perl's</source>
          <target state="translated">ストリームがperlの</target>
        </trans-unit>
        <trans-unit id="97a2147f033bc70f2e20dfc8e311b01cc7c8c8f3" translate="yes" xml:space="preserve">
          <source>Declares that this test will run an indeterminate number of tests.</source>
          <target state="translated">このテストが不確定な数のテストを実行することを宣言します。</target>
        </trans-unit>
        <trans-unit id="6da56154a8de563d222245d4af173f8b457c59e3" translate="yes" xml:space="preserve">
          <source>Declares that you are done testing, no more tests will be run after this point.</source>
          <target state="translated">テストを終了したことを宣言し、この時点以降はテストを実行しません。</target>
        </trans-unit>
        <trans-unit id="cd4907e397ad786d964786ed678ccb6ec918a061" translate="yes" xml:space="preserve">
          <source>Declares the BLOCK or the rest of the compilation unit as being in the given namespace. The scope of the package declaration is either the supplied code BLOCK or, in the absence of a BLOCK, from the declaration itself through the end of current scope (the enclosing block, file, or &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;). That is, the forms without a BLOCK are operative through the end of the current scope, just like the &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; operators. All unqualified dynamic identifiers in this scope will be in the given namespace, except where overridden by another &lt;code&gt;&lt;a href=&quot;package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; declaration or when they're one of the special identifiers that qualify into &lt;code&gt;main::&lt;/code&gt; , like &lt;code&gt;STDOUT&lt;/code&gt; , &lt;code&gt;ARGV&lt;/code&gt; , &lt;code&gt;ENV&lt;/code&gt; , and the punctuation variables.</source>
          <target state="translated">BLOCKまたはコンパイルユニットの残りの部分を、指定された名前空間にあるものとして宣言します。パッケージ宣言のスコープは、提供されたコードBLOCKか、BLOCKがない場合は、宣言自体から現在のスコープの終わり（囲んでいるブロック、ファイル、または &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ）までのいずれかです。つまり、BLOCKのないフォームは、 &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 演算子と同様に、現在のスコープの最後まで機能します。このスコープ内のすべての修飾されていない動的識別子は、別の &lt;code&gt;&lt;a href=&quot;package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; 宣言によってオーバーライドされる場合、または &lt;code&gt;STDOUT&lt;/code&gt; 、 &lt;code&gt;ARGV&lt;/code&gt; のように &lt;code&gt;main::&lt;/code&gt; に修飾される特別な識別子の1つである場合を除き、指定された名前空間にあります、 &lt;code&gt;ENV&lt;/code&gt; 、および句読点変数。</target>
        </trans-unit>
        <trans-unit id="f8c0173916c6e4ea3e07071d4b7dde09c327c03c" translate="yes" xml:space="preserve">
          <source>Declares the BLOCK or the rest of the compilation unit as being in the given namespace. The scope of the package declaration is either the supplied code BLOCK or, in the absence of a BLOCK, from the declaration itself through the end of current scope (the enclosing block, file, or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;). That is, the forms without a BLOCK are operative through the end of the current scope, just like the &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; operators. All unqualified dynamic identifiers in this scope will be in the given namespace, except where overridden by another &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; declaration or when they're one of the special identifiers that qualify into &lt;code&gt;main::&lt;/code&gt; , like &lt;code&gt;STDOUT&lt;/code&gt; , &lt;code&gt;ARGV&lt;/code&gt; , &lt;code&gt;ENV&lt;/code&gt; , and the punctuation variables.</source>
          <target state="translated">BLOCKまたはコンパイルユニットの残りの部分を、指定された名前空間にあるものとして宣言します。パッケージ宣言のスコープは、提供されたコードBLOCKか、BLOCKがない場合は、宣言自体から現在のスコープの終わり（囲んでいるブロック、ファイル、または &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ）までのいずれかです。つまり、BLOCKのないフォームは、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 演算子と同様に、現在のスコープの最後まで機能します。このスコープ内のすべての修飾されていない動的識別子は、別の &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; 宣言によってオーバーライドされる場合、または &lt;code&gt;STDOUT&lt;/code&gt; 、 &lt;code&gt;ARGV&lt;/code&gt; のように &lt;code&gt;main::&lt;/code&gt; に修飾される特別な識別子の1つである場合を除き、指定された名前空間にあります、 &lt;code&gt;ENV&lt;/code&gt; 、および句読点変数。</target>
        </trans-unit>
        <trans-unit id="f1da10a5e5d78d8ddd42db2cd6041c8878256f5e" translate="yes" xml:space="preserve">
          <source>Declaring &lt;code&gt;@EXPORT_OK&lt;/code&gt; and Friends</source>
          <target state="translated">&lt;code&gt;@EXPORT_OK&lt;/code&gt; およびフレンズの宣言</target>
        </trans-unit>
        <trans-unit id="bf1e27173b2b61ad7cc8d4e35225eb9ac31e3c57" translate="yes" xml:space="preserve">
          <source>Declaring @EXPORT_OK and Friends</source>
          <target state="translated">宣言@EXPORT_OKとフレンズ</target>
        </trans-unit>
        <trans-unit id="fde084d9565bae036b5f20474e01a929023e39bf" translate="yes" xml:space="preserve">
          <source>Declaring a subroutine allows a subroutine name to be used as if it were a list operator from that point forward in the program. You can declare a subroutine without defining it by saying &lt;code&gt;sub name&lt;/code&gt; , thus:</source>
          <target state="translated">サブルーチンを宣言すると、サブルーチン名を、プログラムのその時点からリスト演算子のように使用できます。 &lt;code&gt;sub name&lt;/code&gt; と言うことで、サブルーチンを定義せずに宣言できます。</target>
        </trans-unit>
        <trans-unit id="df50d3b937b66b95438db0baeefd22f2c1fa73b6" translate="yes" xml:space="preserve">
          <source>Decode</source>
          <target state="translated">Decode</target>
        </trans-unit>
        <trans-unit id="2baf8b86f083c5626552d12ceb5f07d33eee642a" translate="yes" xml:space="preserve">
          <source>Decode a base64 string by calling the decode_base64() function. This function takes a single argument which is the string to decode and returns the decoded data.</source>
          <target state="translated">decode_base64()関数を呼び出してbase64文字列をデコードします。この関数は、デコードする文字列を一つの引数にとり、デコードされたデータを返します。</target>
        </trans-unit>
        <trans-unit id="109d6d8d7f79aeac2b306278d0d11f591a9ace1e" translate="yes" xml:space="preserve">
          <source>Decode everything you receive, encode everything you send out. (If it's text data.)</source>
          <target state="translated">受信したものはすべてデコードして、送信したものはすべてエンコードしてください。(テキストデータであれば)</target>
        </trans-unit>
        <trans-unit id="4b9d36d83c06e37782d740af6424903230486d88" translate="yes" xml:space="preserve">
          <source>Decoding</source>
          <target state="translated">Decoding</target>
        </trans-unit>
        <trans-unit id="7569471cdb884355544f0d363051bcbdd3ab3bd3" translate="yes" xml:space="preserve">
          <source>Decoding can't happen reliably if you don't know how the data was encoded. If you get to choose, it's a good idea to standardize on UTF-8.</source>
          <target state="translated">データがどのようにエンコードされたかわからないと、デコードは確実にはできません。選べるようになったら、UTF-8に標準化するのがいいでしょう。</target>
        </trans-unit>
        <trans-unit id="abcb42a9bd28ce7905619e5495e33ddc378d15e2" translate="yes" xml:space="preserve">
          <source>Decoding does not need slurp mode if every line contains a multiple of four base64 chars:</source>
          <target state="translated">デコードは、すべての行に4つのbase64文字の倍数が含まれていれば、スラープモードを必要としません。</target>
        </trans-unit>
        <trans-unit id="8d2fb28c0e5d9fe827a3bd469e59cbc0c5460a44" translate="yes" xml:space="preserve">
          <source>Decomposition and Composition</source>
          <target state="translated">分解と構成</target>
        </trans-unit>
        <trans-unit id="1b059e79c07fd4e42a0c8736733855e555b987de" translate="yes" xml:space="preserve">
          <source>Decompress the file with &lt;code&gt;gzip -d yourmodule.tar.gz&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;gzip -d yourmodule.tar.gz&lt;/code&gt; でファイルを解凍します</target>
        </trans-unit>
        <trans-unit id="fecfe7ecbf358f7b0d7f78df884a86cc9366776a" translate="yes" xml:space="preserve">
          <source>Decrement OBJ by one.</source>
          <target state="translated">OBJを1つ減らす。</target>
        </trans-unit>
        <trans-unit id="f9e1ce708a313bdfe9eca73b07a0b2fbd7af57f3" translate="yes" xml:space="preserve">
          <source>Decrement an SV's reference count, and if it drops to zero, call &lt;code&gt;sv_clear&lt;/code&gt; to invoke destructors and free up any memory used by the body; finally, deallocate the SV's head itself. Normally called via a wrapper macro &lt;code&gt;SvREFCNT_dec&lt;/code&gt; .</source>
          <target state="translated">SVの参照カウントをデクリメントし、ゼロになったら、 &lt;code&gt;sv_clear&lt;/code&gt; を呼び出してデストラクタを呼び出し、本体が使用していたメモリを解放します。最後に、SVのヘッド自体の割り当てを解除します。通常、ラッパーマクロ &lt;code&gt;SvREFCNT_dec&lt;/code&gt; を介して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3a67ea7e86c28199b5df339f2ac9cbaf49e99821" translate="yes" xml:space="preserve">
          <source>Decrement the refcnt of each remaining SV, possibly triggering a cleanup. This function may have to be called multiple times to free SVs which are in complex self-referential hierarchies.</source>
          <target state="translated">残された各 SV の refcnt を減少させ、クリーンアップを誘発する可能性があります。複雑な自己参照的階層にある SV を解放するために、この関数を何度も呼び出す必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="20e7e93f2b8e3284df557787a48d088c384708e2" translate="yes" xml:space="preserve">
          <source>Decrements the reference count of a &lt;code&gt;refcounted_he&lt;/code&gt; by one. If the reference count reaches zero the structure's memory is freed, which (recursively) causes a reduction of its parent &lt;code&gt;refcounted_he&lt;/code&gt; 's reference count. It is safe to pass a null pointer to this function: no action occurs in this case.</source>
          <target state="translated">&lt;code&gt;refcounted_he&lt;/code&gt; の参照カウントを1つ減らします。参照カウントがゼロに達すると、構造体のメモリが解放され、これにより（再帰的に）親の &lt;code&gt;refcounted_he&lt;/code&gt; の参照カウントが減少します。この関数にnullポインタを渡しても安全です。この場合、アクションは発生しません。</target>
        </trans-unit>
        <trans-unit id="dcec4515414c7f15a726073898aabc532b3d39f1" translate="yes" xml:space="preserve">
          <source>Decrements the reference count of the given SV.</source>
          <target state="translated">与えられた SV の参照カウントをデクリメントします。</target>
        </trans-unit>
        <trans-unit id="fad89dfcee27e9d87d909c911b20e8fe884012e9" translate="yes" xml:space="preserve">
          <source>Deep Cloning</source>
          <target state="translated">ディープクローニング</target>
        </trans-unit>
        <trans-unit id="c84353cad8816e49b138a483d1ebb30bfc16441f" translate="yes" xml:space="preserve">
          <source>Default Makefile Behaviour</source>
          <target state="translated">デフォルトのMakefileの動作</target>
        </trans-unit>
        <trans-unit id="f5a8076e567450c53999f5638b343fac686a825d" translate="yes" xml:space="preserve">
          <source>Default Parameter Values</source>
          <target state="translated">デフォルトのパラメータ値</target>
        </trans-unit>
        <trans-unit id="4753d9b7084053c5089d49a71f2cde5d97a9c631" translate="yes" xml:space="preserve">
          <source>Default Parameters</source>
          <target state="translated">デフォルトのパラメータ</target>
        </trans-unit>
        <trans-unit id="cc0e201c7029269ea6e8c9f6874c0179cc038bae" translate="yes" xml:space="preserve">
          <source>Default Test Directory</source>
          <target state="translated">デフォルトのテストディレクトリ</target>
        </trans-unit>
        <trans-unit id="44ec713d2a53a2de818adaf52eb763f357d09499" translate="yes" xml:space="preserve">
          <source>Default Warnings and Optional Warnings</source>
          <target state="translated">デフォルトの警告とオプションの警告</target>
        </trans-unit>
        <trans-unit id="0566f3b85322f529cf1661115aa7b73ed4d004bc" translate="yes" xml:space="preserve">
          <source>Default destinations</source>
          <target state="translated">デフォルトの目的地</target>
        </trans-unit>
        <trans-unit id="967dd37853ad5171b91867584cc350ce812dd723" translate="yes" xml:space="preserve">
          <source>Default exports</source>
          <target state="translated">デフォルトのエクスポート</target>
        </trans-unit>
        <trans-unit id="47421e2559e43abd036e2b184dadd2357238a719" translate="yes" xml:space="preserve">
          <source>Default is &quot;\034&quot;, the same as SUBSEP in &lt;b&gt;awk&lt;/b&gt;. If your keys contain binary data there might not be any safe value for &lt;code&gt;$;&lt;/code&gt; .</source>
          <target state="translated">デフォルトは「\ 034」で、&lt;b&gt;awkの&lt;/b&gt; SUBSEPと同じです。キーにバイナリデータが含まれている場合、 &lt;code&gt;$;&lt;/code&gt; 安全な値がない可能性があります。。</target>
        </trans-unit>
        <trans-unit id="ffe4ea797d5b8a7f8cfde90ab339db72e2e542a2" translate="yes" xml:space="preserve">
          <source>Default is 0.</source>
          <target state="translated">デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="3614d667188f70abf848a06aa0652a05a7980f2d" translate="yes" xml:space="preserve">
          <source>Default is 0;</source>
          <target state="translated">デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="117a6bf24c7268f690b354be18d70dcb8affc433" translate="yes" xml:space="preserve">
          <source>Default is 1;</source>
          <target state="translated">デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="94d18537fb9880b0b3a9844f6456e7041684d68a" translate="yes" xml:space="preserve">
          <source>Default is 4096.</source>
          <target state="translated">デフォルトは4096です。</target>
        </trans-unit>
        <trans-unit id="6e26841758dcad7e26700059748889a29326c77f" translate="yes" xml:space="preserve">
          <source>Default is &lt;code&gt;File-Fetch@example.com&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;File-Fetch@example.com&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4b21f25856f196d843b44afb04b8ac6eaef661e6" translate="yes" xml:space="preserve">
          <source>Default is &lt;code&gt;File::Fetch/$VERSION&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;File::Fetch/$VERSION&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="da032bd647313ecd583e516886d8ef8538d9001f" translate="yes" xml:space="preserve">
          <source>Default is false, meaning that when you use &lt;code&gt;store&lt;/code&gt; as a template key, &lt;code&gt;check&lt;/code&gt; will put it both in the scalar you supplied, as well as in the hashref it returns.</source>
          <target state="translated">デフォルトはfalseです。これは、 &lt;code&gt;store&lt;/code&gt; をテンプレートキーとして使用 &lt;code&gt;check&lt;/code&gt; と、checkは、指定されたスカラーと返されるhashrefの両方にそれを配置することを意味します。</target>
        </trans-unit>
        <trans-unit id="f23dbfcfc00cfaaa5823861693969bf14d49d57a" translate="yes" xml:space="preserve">
          <source>Default is for debugging mode to be disabled.</source>
          <target state="translated">デフォルトでは、デバッグモードは無効になっています。</target>
        </trans-unit>
        <trans-unit id="d09b4e9a70d326b80a3705a2d07cf6295402aa8f" translate="yes" xml:space="preserve">
          <source>Default is for files to be removed as requested by the caller.</source>
          <target state="translated">デフォルトでは、呼び出し元が要求した通りにファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="9c92cef06212a1842160f64b786f629e6d8ef460" translate="yes" xml:space="preserve">
          <source>Default is for the file to be removed.</source>
          <target state="translated">デフォルトでは、ファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="611ca2ae870bcb7431782f0c4440d0df69e48190" translate="yes" xml:space="preserve">
          <source>Default is to assume that any UID less than or equal to 10 is a root UID.</source>
          <target state="translated">デフォルトでは、10以下のUIDはルートUIDであると仮定しています。</target>
        </trans-unit>
        <trans-unit id="7fca13ec107ea72b752cc1954e7362fa3edfc913" translate="yes" xml:space="preserve">
          <source>Default is: &lt;code&gt; =&amp;gt; &lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt; =&amp;gt; &lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8820a54076d664561edd70760e8e08a8256672de" translate="yes" xml:space="preserve">
          <source>Default value is 0.</source>
          <target state="translated">デフォルト値は0です。</target>
        </trans-unit>
        <trans-unit id="ff65fb164557c4cda7887f6d0b88d9af2694a1c4" translate="yes" xml:space="preserve">
          <source>Default value is 1.</source>
          <target state="translated">デフォルト値は1です。</target>
        </trans-unit>
        <trans-unit id="041ad125ee75e430d661eb85a0aa9a66653995a9" translate="yes" xml:space="preserve">
          <source>Default value to use (instead of &lt;code&gt;croak&lt;/code&gt; ing with &quot;your vendor has not defined...&quot;) to return if the macro isn't defined. Specify a reference to an array with type followed by value(s).</source>
          <target state="translated">マクロが定義されていない場合に返すために使用するデフォルト値（「ベンダーが定義されていません...」で &lt;code&gt;croak&lt;/code&gt; するのではなく）。タイプの後に値が続く配列への参照を指定します。</target>
        </trans-unit>
        <trans-unit id="fe91ba1dc4d3dc98854423373895e4709f7bcaf4" translate="yes" xml:space="preserve">
          <source>Default values defined in the CPAN/Config.pm file can be overridden in a user specific file: CPAN/MyConfig.pm. Such a file is best placed in &lt;code&gt;$HOME/.cpan/CPAN/MyConfig.pm&lt;/code&gt;, because &lt;code&gt;$HOME/.cpan&lt;/code&gt; is added to the search path of the CPAN module before the use() or require() statements. The mkmyconfig command writes this file for you.</source>
          <target state="translated">CPAN / Config.pmファイルで定義されたデフォルト値は、ユーザー固有のファイルCPAN / MyConfig.pmでオーバーライドできます。 &lt;code&gt;$HOME/.cpan&lt;/code&gt; は、use（）またはrequire（）ステートメントの前にCPANモジュールの検索パスに追加されるため、このようなファイルは &lt;code&gt;$HOME/.cpan/CPAN/MyConfig.pm&lt;/code&gt; に配置するのが最適です。mkmyconfigコマンドはこのファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="2390e056e940a5d1d57f0dfd7aeb859feb7ef003" translate="yes" xml:space="preserve">
          <source>Default values for XSUB arguments can be specified by placing an assignment statement in the parameter list. The default value may be a number, a string or the special string &lt;code&gt;NO_INIT&lt;/code&gt; . Defaults should always be used on the right-most parameters only.</source>
          <target state="translated">XSUB引数のデフォルト値は、割り当てステートメントをパラメーターリストに配置することで指定できます。デフォルト値は、数値、文字列、または特殊文字列 &lt;code&gt;NO_INIT&lt;/code&gt; です。デフォルトは、常に右端のパラメーターにのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="ff08b56fbed2f2f2f7b04ba5e78bf45aaa623f3a" translate="yes" xml:space="preserve">
          <source>Defaults and how to override them</source>
          <target state="translated">デフォルトとそれを上書きする方法</target>
        </trans-unit>
        <trans-unit id="e134e0139099634855fa20d262decd51a88d9996" translate="yes" xml:space="preserve">
          <source>Defaults to &quot;$(OBJECT)&quot; and is used in the ld command to specify what files to link/load from (also see dynamic_lib below for how to specify ld flags)</source>
          <target state="translated">デフォルトは &quot;$(OBJECT)&quot; で、どのファイルをリンク/ロードするかを指定するために ld コマンドで使用されます (ld フラグの指定方法については、下記の dynamic_lib も参照してください)。</target>
        </trans-unit>
        <trans-unit id="7061416449de7f47367c9fcf92dab2f1e9008d0c" translate="yes" xml:space="preserve">
          <source>Defaults to &quot;unknown&quot;.</source>
          <target state="translated">デフォルトは &quot;unknown &quot;です。</target>
        </trans-unit>
        <trans-unit id="3afa08668c5c5dc51326fee541b5ff3c6d50395f" translate="yes" xml:space="preserve">
          <source>Defaults to $(DIST_DEFAULT) which in turn defaults to tardist.</source>
          <target state="translated">デフォルトは $(DIST_DEFAULT)で、これは tardist のデフォルトです。</target>
        </trans-unit>
        <trans-unit id="1e15a7e04559718dd148ec2dcf10c3805456f2a3" translate="yes" xml:space="preserve">
          <source>Defaults to $(FIRST_MAKEFILE).old or $(FIRST_MAKEFILE)_old on VMS.</source>
          <target state="translated">デフォルトは、VMSでは$(FIRST_MAKEFILE).oldまたは$(FIRST_MAKEFILE)_oldです。</target>
        </trans-unit>
        <trans-unit id="2f77e97345b6f70484f890ef33fb548347411e97" translate="yes" xml:space="preserve">
          <source>Defaults to $Config{installprefixexp}, falling back to $Config{installprefix}, $Config{prefixexp} or $Config{prefix} should $Config{installprefixexp} not exist.</source>
          <target state="translated">デフォルトは $Config{installprefixexp}で、$Config{installprefix}、$Config{prefixexp}、または $Config{prefix}が存在しない場合は $Config{installprefixexp}にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="0d2a34019b39d0a59222f4965b474dc8e60e223a" translate="yes" xml:space="preserve">
          <source>Defaults to $Config{installprivlib}.</source>
          <target state="translated">デフォルトは $Config{installprivlib}です。</target>
        </trans-unit>
        <trans-unit id="297039d02dfbd310b72f4d214dc03d0177d0f5ba" translate="yes" xml:space="preserve">
          <source>Defaults to $Config{lddlflags}.</source>
          <target state="translated">デフォルトは $Config{lddlflags}です。</target>
        </trans-unit>
        <trans-unit id="1f5b612bc652d3b75be02b22a0c9c551d13e7785" translate="yes" xml:space="preserve">
          <source>Defaults to $Config{ld}.</source>
          <target state="translated">デフォルトは $Config{ld}です。</target>
        </trans-unit>
        <trans-unit id="b736bfe876455ba787df5366a5e321959e9a06ef" translate="yes" xml:space="preserve">
          <source>Defaults to $Config{make}, which may go looking for a Make program in your environment.</source>
          <target state="translated">デフォルトは $Config{make}で、これはあなたの環境で Make プログラムを探しに行くかもしれません。</target>
        </trans-unit>
        <trans-unit id="2a196b84e1a65651cad69ebad41443f48567f9d9" translate="yes" xml:space="preserve">
          <source>Defaults to $Config{siteprefixexp}. Perls prior to 5.6.0 didn't have an explicit siteprefix in the Config. In those cases $Config{installprefix} will be used.</source>
          <target state="translated">デフォルトは $Config{siteprefixexp}です。5.6.0以前のPerlsでは、コンフィグに明示的なサイトプレフィックスがありませんでした。その場合は $Config{installprefix}が使用されます。</target>
        </trans-unit>
        <trans-unit id="e39813b2a929031c5d759deba757efe05e4152c9" translate="yes" xml:space="preserve">
          <source>Defaults to $Config{vendorprefixexp}.</source>
          <target state="translated">既定値は $Config{vendorprefixexp}です。</target>
        </trans-unit>
        <trans-unit id="e546dadcb8267744ab5961a80d3d0249f0af262e" translate="yes" xml:space="preserve">
          <source>Defaults to 'Makefile' or 'Descrip.MMS' on VMS.</source>
          <target state="translated">VMSではデフォルトは'Makefile'または'Descrip.MMS'です。</target>
        </trans-unit>
        <trans-unit id="36a3365955b62edce26a680e752008adf273fb56" translate="yes" xml:space="preserve">
          <source>Defaults to 0.</source>
          <target state="translated">デフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="2178c999f5078fa159c89a3040ee28c0a0ab0555" translate="yes" xml:space="preserve">
          <source>Defaults to 1.</source>
          <target state="translated">デフォルトは 1 です。</target>
        </trans-unit>
        <trans-unit id="42b07f550144816ff7f9ad73156f6af2230242bf" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;-O&lt;/code&gt; . Set it to &lt;code&gt;-g&lt;/code&gt; to turn debugging on. The flag is passed to subdirectory makes.</source>
          <target state="translated">デフォルトは &lt;code&gt;-O&lt;/code&gt; です。 &lt;code&gt;-g&lt;/code&gt; に設定すると、デバッグがオンになります。フラグはサブディレクトリmakeに渡されます。</target>
        </trans-unit>
        <trans-unit id="4fbcc2fc6108b1d2b0294b983b1a9ad99a640450" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;0&lt;/code&gt; , meaning no timeout is set.</source>
          <target state="translated">デフォルトは &lt;code&gt;0&lt;/code&gt; で、タイムアウトが設定されていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d988114015a6a9816c9d51daa92e80b47086fad8" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;0&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="146cfb515515d203c57c9c8aab0bc48f6d370409" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;1&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6371c4ed1bbd778c501d9b308a25089892c98692" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;64&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;64&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3dd3b4ec101beb9f1857e77cfca0e6a41873cc62" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;8&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;8&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f5da3821742eb234c04279ce3cc2f85314c99eb1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;@&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;@&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2a0b8a3adf1fd6fbd992cea8cf36981968d31e21" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;LZMA_PRESET_DEFAULT&lt;/code&gt; (6).</source>
          <target state="translated">デフォルトは &lt;code&gt;LZMA_PRESET_DEFAULT&lt;/code&gt; （6）です。</target>
        </trans-unit>
        <trans-unit id="147274cdbe6f000456b5b99fb65832fa4f82af15" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;MAX_WBITS&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;MAX_WBITS&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="04dcb63c213f6d34c69ca1a67ff471d071e8f496" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7c72a3e89d9401a68060eed25afb0d35d9676747" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;{ &quot;ExtUtils::MakeMaker&quot; =&amp;gt; 0 }&lt;/code&gt; if this attribute is not specified.</source>
          <target state="translated">この属性が指定されていない場合、デフォルトは &lt;code&gt;{ &quot;ExtUtils::MakeMaker&quot; =&amp;gt; 0 }&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fbe6c62dfeedbe39bcaae924b83b87595c0727be" translate="yes" xml:space="preserve">
          <source>Defaults to DISTNAME-VERSION.</source>
          <target state="translated">デフォルトは DISTNAME-VERSION です。</target>
        </trans-unit>
        <trans-unit id="e117bd432f26952da4f40820366fde65f2edc72e" translate="yes" xml:space="preserve">
          <source>Defaults to MAX_MEM_LEVEL.</source>
          <target state="translated">デフォルトは MAX_MEM_LEVEL です。</target>
        </trans-unit>
        <trans-unit id="9671af0548359bae98f06615c832c689de5fb555" translate="yes" xml:space="preserve">
          <source>Defaults to MAX_WBITS.</source>
          <target state="translated">デフォルトは MAX_WBITS です。</target>
        </trans-unit>
        <trans-unit id="658dfec16a6b505da6e2bd38b1f2e25f8f18da74" translate="yes" xml:space="preserve">
          <source>Defaults to NAME below but with :: replaced with -.</source>
          <target state="translated">デフォルトは以下のNAMEになりますが、 ::は-に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="0031bae010e59fe54ba067d872d7762129c8aa52" translate="yes" xml:space="preserve">
          <source>Defaults to STDERR.</source>
          <target state="translated">デフォルトは STDERR です。</target>
        </trans-unit>
        <trans-unit id="5a78e74b3a77143d8c71cfa329a6e542084b340e" translate="yes" xml:space="preserve">
          <source>Defaults to STDOUT.</source>
          <target state="translated">デフォルトは STDOUT です。</target>
        </trans-unit>
        <trans-unit id="a238dcad55848cd42cd0ed2c0201eceef53c02cf" translate="yes" xml:space="preserve">
          <source>Defaults to false, set to true to enable the described behaviour.</source>
          <target state="translated">デフォルトは false で、true に設定すると記述された動作が有効になります。</target>
        </trans-unit>
        <trans-unit id="ecd31712dbbddfd1fe36a725d021309cb2a8b7de" translate="yes" xml:space="preserve">
          <source>Defaults to false, so it will remove null arguments. Set to true to allow them.</source>
          <target state="translated">デフォルトは false で、NULL 引数を削除します。trueに設定すると、それらを許可します。</target>
        </trans-unit>
        <trans-unit id="83771af0d9e990cfd4209b40879c5dd720b86a4b" translate="yes" xml:space="preserve">
          <source>Defaults to false.</source>
          <target state="translated">デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="18d301270448347decdf5cb69be9723a550b7cb5" translate="yes" xml:space="preserve">
          <source>Defaults to on.</source>
          <target state="translated">デフォルトは on です。</target>
        </trans-unit>
        <trans-unit id="2b3470c82dabd8d59a7a8d6175578fc38bf7d623" translate="yes" xml:space="preserve">
          <source>Defaults to true. Turn this off at your own risk.</source>
          <target state="translated">デフォルトはtrueです。自己責任でオフにしてください。</target>
        </trans-unit>
        <trans-unit id="19d3228f23c29d1d70307e4e28b3e13d0ba13b19" translate="yes" xml:space="preserve">
          <source>Deferencing Method Call</source>
          <target state="translated">ディフェレンシングメソッドコール</target>
        </trans-unit>
        <trans-unit id="87a045f3d65fd182c7b238c413050e4d1b888897" translate="yes" xml:space="preserve">
          <source>Deferred Signals (Safe Signals)</source>
          <target state="translated">繰延信号(セーフ信号</target>
        </trans-unit>
        <trans-unit id="f67da11f1ea091fa4522255eade09d8d8a4672ae" translate="yes" xml:space="preserve">
          <source>Deferred Writing</source>
          <target state="translated">遅延書き込み</target>
        </trans-unit>
        <trans-unit id="f16543b2bfaf8c9f85b87e700f4cb4c04d588365" translate="yes" xml:space="preserve">
          <source>Deferred writes are cached in memory up to the limit specified by the &lt;code&gt;dw_size&lt;/code&gt; option (see above). If the deferred-write buffer is full and you try to write still more deferred data, the buffer will be flushed. All buffered data will be written immediately, the buffer will be emptied, and the now-empty space will be used for future deferred writes.</source>
          <target state="translated">遅延書き込みは、 &lt;code&gt;dw_size&lt;/code&gt; オプションで指定された制限（上記を参照）までメモリにキャッシュされます。遅延書き込みバッファがいっぱいで、さらに遅延データを書き込もうとすると、バッファがフラッシュされます。バッファリングされたすべてのデータがすぐに書き込まれ、バッファが空になり、現在空になったスペースが将来の据え置き書き込みに使用されます。</target>
        </trans-unit>
        <trans-unit id="b09e3bbab301107bd10474a2528bb3ad4a99662e" translate="yes" xml:space="preserve">
          <source>Define DL_FUNCS and DL_VARS and write the *.exp files.</source>
          <target state="translated">DL_FUNCSとDL_VARSを定義し、*.expファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="12da81497a7167741d2b29f763f0e078260a1250" translate="yes" xml:space="preserve">
          <source>Define OPTAG as a symbolic name for OPSET. Optag names always start with a colon &lt;code&gt;:&lt;/code&gt; .</source>
          <target state="translated">OPTAGをOPSETのシンボル名として定義します。optag名は常にコロンで始まり &lt;code&gt;:&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b358b3f5282189ce82f741fa330a8ab3125c3533" translate="yes" xml:space="preserve">
          <source>Define TO_UNIX to convert OS2 linefeeds to Unix style.</source>
          <target state="translated">TO_UNIXを定義して、OS2のラインフィードをUnixスタイルに変換します。</target>
        </trans-unit>
        <trans-unit id="25a3e54cd9dd2ac97b6cf9da4fc775b0fd09bf4f" translate="yes" xml:space="preserve">
          <source>Define a command alias, like</source>
          <target state="translated">コマンドのエイリアスを定義します。</target>
        </trans-unit>
        <trans-unit id="5393ccb5285b32c0372bdc2ca13e7ffc258abe0f" translate="yes" xml:space="preserve">
          <source>Define a macro. &lt;code&gt;Net::Netrc&lt;/code&gt; only parses this field to be compatible with</source>
          <target state="translated">マクロを定義します。 &lt;code&gt;Net::Netrc&lt;/code&gt; は、このフィールドとのみ互換性があるように解析します</target>
        </trans-unit>
        <trans-unit id="4f7d921c7430791d35aa71dd9a7604bd56ac3756" translate="yes" xml:space="preserve">
          <source>Define a named capture group. Equivalent to &lt;code&gt;(?&amp;lt;NAME&amp;gt;pattern)&lt;/code&gt;.</source>
          <target state="translated">名前付きキャプチャグループを定義します。 &lt;code&gt;(?&amp;lt;NAME&amp;gt;pattern)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="51cc1c473eb56c40ad07bc0030ce03dcaeba9ef9" translate="yes" xml:space="preserve">
          <source>Define at compile-time your own custom character properties for use in regexes.</source>
          <target state="translated">コンパイル時に、正規表現で使用する独自のカスタム文字プロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="a5e319203d5fc86ef244e3b22f31ca80388261db" translate="yes" xml:space="preserve">
          <source>Define this symbol if you want not-threaded faster perl.</source>
          <target state="translated">スレッド化されない高速なPerlを使いたい場合は、このシンボルを定義します。</target>
        </trans-unit>
        <trans-unit id="47e540fd76e635df75335773557a724d22e221f7" translate="yes" xml:space="preserve">
          <source>Defined Falsehood. (&lt;code&gt;PL_sv_no&lt;/code&gt; ) The value is not needed (and ignored).</source>
          <target state="translated">虚偽の定義。（ &lt;code&gt;PL_sv_no&lt;/code&gt; ）値は不要です（無視されます）。</target>
        </trans-unit>
        <trans-unit id="a264576fd62b5306a0590e9ebcaaeb8b9ebd00c2" translate="yes" xml:space="preserve">
          <source>Defined as a Make macro, it is invoked with file and directory arguments; &lt;code&gt;autosplit&lt;/code&gt; will split the specified file into the specified directory and delete obsolete &lt;code&gt;.al&lt;/code&gt; files, after checking first that the module does use the AutoLoader, and ensuring that the module is not already currently split in its current form (the modtime test).</source>
          <target state="translated">Makeマクロとして定義され、ファイルとディレクトリの引数で呼び出されます。 &lt;code&gt;autosplit&lt;/code&gt; は、指定されたファイルを指定されたディレクトリに分割し、古い &lt;code&gt;.al&lt;/code&gt; ファイルを削除します。最初にモジュールがオートローダーを使用していることを確認し、モジュールが現在の形式で現在分割されていないことを確認します（modtimeテスト）。</target>
        </trans-unit>
        <trans-unit id="0f9705fadf1dfeea4d0b965d304ecf0e1287b32a" translate="yes" xml:space="preserve">
          <source>Defined if $procselfexe is symlink to the absolute pathname of the executing program.</source>
          <target state="translated">procelfexe が実行プログラムの絶対パス名にシンボリックリンクされている場合に定義されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
