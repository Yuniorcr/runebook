<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="2fabb550524d3e9edaaeec56458f89ae111e042a" translate="yes" xml:space="preserve">
          <source>For improved performance, include:</source>
          <target state="translated">パフォーマンスを向上させるためには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="c1b48d4e66bee46bcdb174582c112372d1e36d74" translate="yes" xml:space="preserve">
          <source>For including perl header files this function simply prints:</source>
          <target state="translated">perlのヘッダファイルを含めるために、この関数は単に印刷します。</target>
        </trans-unit>
        <trans-unit id="b8b2246aaa2d68e99fd635ee467d71b09bb4bd64" translate="yes" xml:space="preserve">
          <source>For information on OO programming with Perl, please see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">PerlによるOOプログラミングの詳細については、&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;および&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a44b4f224e3945a9a157e926bd85c54a2b806624" translate="yes" xml:space="preserve">
          <source>For information on compilers on older versions of AIX, see &lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;Compiling Perl 5 on older AIX versions up to 4.3.3&lt;/a&gt;.</source>
          <target state="translated">古いバージョンのAIXでのコンパイラーについては&lt;a href=&quot;#Compiling-Perl-5-on-older-AIX-versions-up-to-4.3.3&quot;&gt;、古いAIXバージョン4.3.3まででのPerl 5のコンパイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e475bfd513c3fa5a177d8f4cb9e523eea02595c6" translate="yes" xml:space="preserve">
          <source>For installation of the Unix emulation, read the appropriate docs.</source>
          <target state="translated">Unix エミュレーションのインストールについては、適切なドキュメントを読んでください。</target>
        </trans-unit>
        <trans-unit id="82185638546b1e3be3173f75a2cb122a36a8e321" translate="yes" xml:space="preserve">
          <source>For instance in</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="23b7041567e33cbc564ac905e83c0e92b5fee08b" translate="yes" xml:space="preserve">
          <source>For instance,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="d9622af028e4033dfcc0d167b46ab4c597968052" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;\p{Uppercase}&lt;/code&gt; matches any single character with the Unicode &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; property, while &lt;code&gt;\p{L}&lt;/code&gt; matches any character with a &lt;code&gt;General_Category&lt;/code&gt; of &lt;code&gt;&quot;L&quot;&lt;/code&gt; (letter) property (see &lt;a href=&quot;#General_Category&quot;&gt;General_Category&lt;/a&gt; below). Brackets are not required for single letter property names, so &lt;code&gt;\p{L}&lt;/code&gt; is equivalent to &lt;code&gt;\pL&lt;/code&gt; .</source>
          <target state="translated">たとえば、 &lt;code&gt;\p{Uppercase}&lt;/code&gt; はUnicodeの &lt;code&gt;&quot;Uppercase&quot;&lt;/code&gt; プロパティを持つ任意の1文字と一致し、 &lt;code&gt;\p{L}&lt;/code&gt; は &lt;code&gt;General_Category&lt;/code&gt; が &lt;code&gt;&quot;L&quot;&lt;/code&gt; （文字）プロパティを持つ任意の文字と一致します（下記の&lt;a href=&quot;#General_Category&quot;&gt;General_Categoryを&lt;/a&gt;参照）。括弧は1文字のプロパティ名には必要ないため、 &lt;code&gt;\p{L}&lt;/code&gt; は &lt;code&gt;\pL&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="7c14488c9703c3faf25c072547bcce9b9c6d026a" translate="yes" xml:space="preserve">
          <source>For instance, here's part of the report from the</source>
          <target state="translated">例えば、以下のような報告書の一部は</target>
        </trans-unit>
        <trans-unit id="7503b0a59ae7cf568e520699d192f582d8728a5a" translate="yes" xml:space="preserve">
          <source>For instance, if B = 10000, the number 1234567890 is represented internally as [3456, 7890, 12].</source>
          <target state="translated">例えば、B=10000 の場合、1234567890 は内部的には [3456,7890,12]と表現されます。</target>
        </trans-unit>
        <trans-unit id="0a5b8d1bb99d582e6babc450d597df94876d661f" translate="yes" xml:space="preserve">
          <source>For instance, if the object $obj represents the hexadecimal number 0xabcde, then &lt;code&gt;_rsft($obj, 2, 16)&lt;/code&gt; returns an object representing the number 0xabc. The &quot;remainer&quot;, 0xde, is discarded and not returned.</source>
          <target state="translated">たとえば、オブジェクト$ objが16進数の0xabcdeを表す場合、 &lt;code&gt;_rsft($obj, 2, 16)&lt;/code&gt; は数値0xabcを表すオブジェクトを返します。「残り」の0xdeは破棄され、返されません。</target>
        </trans-unit>
        <trans-unit id="3ec9b07fa26c1960352cc0e11e6a493987aa28ff" translate="yes" xml:space="preserve">
          <source>For instance, the &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; routine which computes the square root of its argument is only defined for non-negative real numbers and yields a non-negative real number (it is an application from &lt;b&gt;R+&lt;/b&gt; to &lt;b&gt;R+&lt;/b&gt;). If we allow it to return a complex number, then it can be extended to negative real numbers to become an application from &lt;b&gt;R&lt;/b&gt; to &lt;b&gt;C&lt;/b&gt; (the set of complex numbers):</source>
          <target state="translated">例えば、 &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; 引数の平方根を計算ルーチンは、非負実数のために定義され、非負実数を（それからアプリケーションで生じるれる&lt;b&gt;R +&lt;/b&gt;の&lt;b&gt;R +&lt;/b&gt;）。複素数を返すことができる場合は、負の実数に拡張して、&lt;b&gt;R&lt;/b&gt;から&lt;b&gt;C&lt;/b&gt;（複素数のセット）へのアプリケーションにすることができます。</target>
        </trans-unit>
        <trans-unit id="c71534a4a55ea4fd39c101e16a7e78a572754ea2" translate="yes" xml:space="preserve">
          <source>For instance, the MGVTBL structure called &lt;code&gt;vtbl_sv&lt;/code&gt; (which corresponds to an &lt;code&gt;mg_type&lt;/code&gt; of &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; ) contains:</source>
          <target state="translated">たとえば、 &lt;code&gt;vtbl_sv&lt;/code&gt; （ &lt;code&gt;mg_type&lt;/code&gt; の &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; 対応）と呼ばれるMGVTBL構造には、次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="9ed32d78c1e09dbba1a9af89bf4a97865e921d05" translate="yes" xml:space="preserve">
          <source>For instance, to make our report order case-insensitive, we use &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; to lowercase the keys before comparing them:</source>
          <target state="translated">たとえば、レポートの順序で大文字と小文字を区別しないようにするには、比較する前に &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; を使用してキーを小文字にします。</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="7cfc93ae0f30aa1f0666b1f4bcb636c1b64a91aa" translate="yes" xml:space="preserve">
          <source>For integer conversions, specifying a precision implies that the output of the number itself should be zero-padded to this width, where the 0 flag is ignored:</source>
          <target state="translated">整数変換の場合,精度を指定することは,数値自体の出力がこの幅にゼロパディングされるべきであることを意味し,0フラグは無視されます。</target>
        </trans-unit>
        <trans-unit id="ecd617b52663df6a2cd98775b9d0bdd10ec28a70" translate="yes" xml:space="preserve">
          <source>For intrepid programmers, the indispensable textbook is</source>
          <target state="translated">勇敢なプログラマーには欠かせないテキストは</target>
        </trans-unit>
        <trans-unit id="d3c8026914e8193ab94f632a808acbe08f5e1e3d" translate="yes" xml:space="preserve">
          <source>For licensing inquiries, contact the author at:</source>
          <target state="translated">ライセンスに関するお問い合わせは、著者までご連絡ください。</target>
        </trans-unit>
        <trans-unit id="ce2ac808344a2fda3717bca04925f57752ba466c" translate="yes" xml:space="preserve">
          <source>For licensing the easiest way is to use the same licensing as Perl itself:</source>
          <target state="translated">ライセンスについては、Perlと同じライセンスを使用するのが最も簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="22eb832a816ecf29dad84d085c065a38bc3edb22" translate="yes" xml:space="preserve">
          <source>For locales available in your system, consult also</source>
          <target state="translated">お使いのシステムで利用可能なロケールについては</target>
        </trans-unit>
        <trans-unit id="863f28adc13f8c8f63960f8d4f2a4b8a92bd94fd" translate="yes" xml:space="preserve">
          <source>For lookup of</source>
          <target state="translated">のルックアップのために</target>
        </trans-unit>
        <trans-unit id="34229681f9d4faff26200baa4f876a94429acced" translate="yes" xml:space="preserve">
          <source>For low-level access to the formatting mechanism, you may use formline() and access &lt;code&gt;$^A&lt;/code&gt; (the $ACCUMULATOR variable) directly.</source>
          <target state="translated">書式設定メカニズムへの低レベルのアクセスでは、formline（）を使用して &lt;code&gt;$^A&lt;/code&gt; （$ ACCUMULATOR 変数）に直接アクセスできます。</target>
        </trans-unit>
        <trans-unit id="dda78cd120d71d7294ab5327cc0bc80f1754e64b" translate="yes" xml:space="preserve">
          <source>For lower-level direct manipulation of &lt;code&gt;op_sibparent&lt;/code&gt; and &lt;code&gt;op_moresib&lt;/code&gt; , see &lt;code&gt;OpMORESIB_set&lt;/code&gt; , &lt;code&gt;OpLASTSIB_set&lt;/code&gt; , &lt;code&gt;OpMAYBESIB_set&lt;/code&gt; .</source>
          <target state="translated">低レベルの直接操作のため &lt;code&gt;op_sibparent&lt;/code&gt; と &lt;code&gt;op_moresib&lt;/code&gt; 、参照 &lt;code&gt;OpMORESIB_set&lt;/code&gt; 、 &lt;code&gt;OpLASTSIB_set&lt;/code&gt; 、 &lt;code&gt;OpMAYBESIB_set&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="9a2710d99c8e59b0ca1361e7bf2da876fb54697f" translate="yes" xml:space="preserve">
          <source>For maintenance clarity, no functions are exported by default. These functions are available for backwards compatibility only and are best avoided in favor of &lt;code&gt;load_file&lt;/code&gt; .</source>
          <target state="translated">保守を明確にするために、デフォルトでは関数はエクスポートされません。これらの関数は、下位互換性のためにのみ使用可能であり、 &lt;code&gt;load_file&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="66d2d5bbea31d0eff0a07151ddd0f30d9798a0b6" translate="yes" xml:space="preserve">
          <source>For many Perl functions, the CORE package contains real subroutines. This feature is new in Perl 5.16. You can take references to these and make aliases. However, some can only be called as barewords; i.e., you cannot use ampersand syntax (&lt;code&gt;&amp;amp;foo&lt;/code&gt; ) or call them through references. See the &lt;code&gt;shove&lt;/code&gt; example above. These subroutines exist for all keywords except the following:</source>
          <target state="translated">多くのPerl関数の場合、COREパッケージには実際のサブルーチンが含まれています。この機能はPerl 5.16の新機能です。これらを参照してエイリアスを作成できます。ただし、一部はベアワードとしてのみ呼び出すことができます。つまり、アンパサンド構文（ &lt;code&gt;&amp;amp;foo&lt;/code&gt; ）を使用したり、参照を介してそれらを呼び出すことはできません。上記の &lt;code&gt;shove&lt;/code&gt; の例を参照してください。これらのサブルーチンは、以下を除くすべてのキーワードに存在します。</target>
        </trans-unit>
        <trans-unit id="8ef8504526bafcd83f659e5d29383951a3389b63" translate="yes" xml:space="preserve">
          <source>For many common uses of the module, the read cache is a liability. For example, a program that inserts a single record, or that scans the file once, will have a cache hit rate of zero. This suggests a major optimization: The cache should be initially disabled. Here's a hybrid approach: Initially, the cache is disabled, but the cache code maintains statistics about how high the hit rate would be *if* it were enabled. When it sees the hit rate get high enough, it enables itself. The STAT comments in this code are the beginning of an implementation of this.</source>
          <target state="translated">モジュールの多くの一般的な用途では、読み込みキャッシュは負債となります。例えば、単一のレコードを挿入したり、ファイルを一度スキャンしたりするプログラムでは、キャッシュヒット率はゼロになります。これは大規模な最適化を示唆しています。キャッシュは最初は無効にすべきです。ここではハイブリッドアプローチを採用します。最初はキャッシュを無効にしますが、キャッシュコードは有効にした場合のヒット率がどれだけ高いかの統計情報を保持します。ヒット率が十分に高くなると、それ自体を有効にします。このコードのSTATコメントは、これの実装の始まりです。</target>
        </trans-unit>
        <trans-unit id="e0f179826fe2c92a37ede899dfe2a03f1a5c458a" translate="yes" xml:space="preserve">
          <source>For many functions, you can also query &lt;code&gt;%Config&lt;/code&gt; , exported by default from the &lt;code&gt;Config&lt;/code&gt; module. For example, to check whether the platform has the &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, check &lt;code&gt;$Config{d_lstat}&lt;/code&gt; . See &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; for a full description of available variables.</source>
          <target state="translated">多くの関数では、デフォルトで &lt;code&gt;Config&lt;/code&gt; モジュールからエクスポートされた &lt;code&gt;%Config&lt;/code&gt; をクエリすることもできます。たとえば、プラットフォームに &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 呼び出しがあるかどうかを確認するには、 &lt;code&gt;$Config{d_lstat}&lt;/code&gt; 確認します。使用可能な変数の詳細については、&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="efd5a9c50ebfeb1864b8fd6e6ed8e999df584565" translate="yes" xml:space="preserve">
          <source>For many people, Perl serves as a great replacement for shell scripting. For others, it serves as a convenient, high-level replacement for most of what they'd program in low-level languages like C or C++. It's ultimately up to you (and possibly your management) which tasks you'll use Perl for and which you won't.</source>
          <target state="translated">多くの人にとって、Perl はシェルスクリプトの素晴らしい代用となっています。他の人にとっては、Perl は C や C++のような低レベル言語でプログラムするものの大部分を、便利で高レベルの代用品として提供しています。どのタスクに Perl を使い、どのタスクに Perl を使わないかは、最終的にはあなた(とおそらくあなたの管理者)次第です。</target>
        </trans-unit>
        <trans-unit id="9b046ce891b8b5f7d7f37e47256b7841d3461b86" translate="yes" xml:space="preserve">
          <source>For many typemap examples, refer to the core typemap file that can be found in the perl source tree at</source>
          <target state="translated">多くのタイプマップの例については、 perl のソースツリーにある</target>
        </trans-unit>
        <trans-unit id="a0610ac0b02cfa9a7d3209596fa010908429083d" translate="yes" xml:space="preserve">
          <source>For maximum security, endeavour always to avoid ever looking at, touching, or even imputing the existence of the filename. You do not know that that filename is connected to the same file as the handle you have, and attempts to check this can only trigger more race conditions. It's far more secure to use the filehandle alone and dispense with the filename altogether.</source>
          <target state="translated">最大限の安全性を確保するために、ファイル名を見たり、触ったり、あるいはファイル名が存在することさえも避けるように常に努力してください。あなたはファイル名がハンドルと同じファイルに接続されていることを知らず、これを確認しようとしてもレース状態を引き起こすだけです。ファイルハンドルだけを使って、ファイル名を完全に排除する方がはるかに安全です。</target>
        </trans-unit>
        <trans-unit id="220ffe1d077d6e4643b22c57e942ba4049701e75" translate="yes" xml:space="preserve">
          <source>For measuring time in better granularity than one second, use the &lt;a href=&quot;../time/hires&quot;&gt;Time::HiRes&lt;/a&gt; module from Perl 5.8 onwards (or from CPAN before then), or, if you have gettimeofday(2), you may be able to use the &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; interface of Perl. See &lt;a href=&quot;../perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; for details.</source>
          <target state="translated">1秒よりも細かく時間を測定するには、Perl 5.8以降（またはその前にCPANから）の&lt;a href=&quot;../time/hires&quot;&gt;Time :: HiRes&lt;/a&gt;モジュールを使用し &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 。または、gettimeofday（2）がある場合は、Perlのsyscallインターフェイスを使用できる場合があります。。詳細については、&lt;a href=&quot;../perlfaq8&quot;&gt;perlfaq8&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b053fd32cc090c58c85994234835bd9b44b038f0" translate="yes" xml:space="preserve">
          <source>For measuring time in better granularity than one second, use the &lt;a href=&quot;time/hires&quot;&gt;Time::HiRes&lt;/a&gt; module from Perl 5.8 onwards (or from CPAN before then), or, if you have gettimeofday(2), you may be able to use the &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; interface of Perl. See &lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt; for details.</source>
          <target state="translated">1秒よりも細かく時間を測定するには、Perl 5.8以降（またはその前にCPANから）の&lt;a href=&quot;time/hires&quot;&gt;Time :: HiRes&lt;/a&gt;モジュールを使用し &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; 。または、gettimeofday（2）がある場合は、Perlのsyscallインターフェイスを使用できる場合があります。。詳細については、&lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4a7dc3da9f9150a0f4e59b825d03d586115ca6af" translate="yes" xml:space="preserve">
          <source>For modules which ARE classes, and need to handle inherited methods, stubs are needed to ensure that the method inheritance mechanism works properly. You can load the stubs into the module at 'require' time, by adding the statement 'SelfLoader-&amp;gt;load_stubs();' to the module to do this.</source>
          <target state="translated">クラスがAREであり、継承されたメソッドを処理する必要があるモジュールの場合、メソッドの継承メカニズムが適切に機能するようにスタブが必要です。「SelfLoader-&amp;gt; load_stubs（）;」というステートメントを追加することで、「必須」時にモジュールにスタブをロードできます。これを行うには、モジュールに。</target>
        </trans-unit>
        <trans-unit id="25217607f7b7b4f54ca08eb0f1fc36241da39944" translate="yes" xml:space="preserve">
          <source>For modules which are not classes, this section is not relevant. This section is only relevant if you have methods which could be inherited.</source>
          <target state="translated">クラスではないモジュールについては、このセクションは関係ありません。このセクションは継承可能なメソッドを持っている場合にのみ関係します。</target>
        </trans-unit>
        <trans-unit id="29a15f44066dff1f2c0c9c7cbcbbd443cbb90819" translate="yes" xml:space="preserve">
          <source>For modules, get the CGI or LWP modules from CPAN. For textbooks, see the two especially dedicated to web stuff in the question on books. For problems and questions related to the web, like &quot;Why do I get 500 Errors&quot; or &quot;Why doesn't it run from the browser right when it runs fine on the command line&quot;, see the troubleshooting guides and references in &lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt; or in the CGI MetaFAQ:</source>
          <target state="translated">モジュールの場合、CPANからCGIまたはLWPモジュールを取得します。教科書については、本に関する質問で特にウェブ関連の2つを参照してください。「500エラーが発生する理由」や「コマンドラインで正常に実行されたときにブラウザーから実行されないのはなぜですか」など、Webに関連する問題や質問については、&lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt;またはinのトラブルシューティングガイドとリファレンスを参照してください。 CGI MetaFAQ：</target>
        </trans-unit>
        <trans-unit id="c19610a9a975a0cf5248edf9977288237aa0d121" translate="yes" xml:space="preserve">
          <source>For more about scripts versus blocks, see UAX#24 &quot;Unicode Script Property&quot;: &lt;a href=&quot;http://www.unicode.org/reports/tr24&quot;&gt;http://www.unicode.org/reports/tr24&lt;/a&gt;</source>
          <target state="translated">スクリプトとブロックの詳細については、UAX＃24「Unicode Script Property」を&lt;a href=&quot;http://www.unicode.org/reports/tr24&quot;&gt;参照してください&lt;/a&gt;：http : //www.unicode.org/reports/tr24</target>
        </trans-unit>
        <trans-unit id="a0f84e3d4e18aa471a205e575dceae5b441a5a9b" translate="yes" xml:space="preserve">
          <source>For more benchmark results see &lt;a href=&quot;http://bloodgate.com/perl/benchmarks.html&quot;&gt;http://bloodgate.com/perl/benchmarks.html&lt;/a&gt;.</source>
          <target state="translated">その他のベンチマーク結果については、&lt;a href=&quot;http://bloodgate.com/perl/benchmarks.html&quot;&gt;http://bloodgate.com/perl/benchmarks.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a12676c43bab4536e6ed20980a2aaf16b4eccc1" translate="yes" xml:space="preserve">
          <source>For more complex signal handling, you might see the standard POSIX module. Lamentably, this is almost entirely undocumented, but the</source>
          <target state="translated">より複雑な信号処理については、標準の POSIX モジュールを参照してください。残念なことに、これはほとんど文書化されていませんが</target>
        </trans-unit>
        <trans-unit id="be1e0dddb201330ac943f0c7f8b66035ebd2739a" translate="yes" xml:space="preserve">
          <source>For more detail on each item in this checklist, see below.</source>
          <target state="translated">このチェックリストの各項目の詳細は、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="b905a813e9b57da3dea6d150de2f4e3eac205961" translate="yes" xml:space="preserve">
          <source>For more detail on looping constructs (and some that weren't mentioned in this overview) see &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;.</source>
          <target state="translated">ループ構造（およびこの概要で言及されていないもの）の詳細については、&lt;a href=&quot;perlsyn&quot;&gt;perlsynを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9cce3d22b488b424d06498a184d62a8579f8068a" translate="yes" xml:space="preserve">
          <source>For more detailed explanation of the available commands and output formats, see your own local documentation of</source>
          <target state="translated">利用可能なコマンドや出力フォーマットの詳細については、ローカルの</target>
        </trans-unit>
        <trans-unit id="191b44055a5c64626669b9bb810cf968868b2305" translate="yes" xml:space="preserve">
          <source>For more detailed information, see &lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;http://unicode.org/reports/tr15/&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://unicode.org/reports/tr15/&quot;&gt;http://unicode.org/reports/tr15/を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="71e7ea87ff241717fc4e23b38966813c9a86baa7" translate="yes" xml:space="preserve">
          <source>For more details (FAQ), check out the home of DJGPP at:</source>
          <target state="translated">詳細(FAQ)については、DJGPPのホームページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2b7ea18856481cbfb2fbce20aa82b169672d93cb" translate="yes" xml:space="preserve">
          <source>For more details on Unicode properties, see &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;Unicode Character Properties in perlunicode&lt;/a&gt;; for a complete list of possible properties, see &lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;Properties accessible through \p{} and \P{} in perluniprops&lt;/a&gt;, which notes all forms that have &lt;code&gt;/i&lt;/code&gt; differences. It is also possible to define your own properties. This is discussed in &lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;User-Defined Character Properties in perlunicode&lt;/a&gt;.</source>
          <target state="translated">Unicodeプロパティの詳細については、「&lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;perlunicodeのUnicode文字プロパティ&lt;/a&gt;」を参照してください。可能なプロパティの完全なリストについては&lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;、perlunipropsの\ p {}および\ P {}を介してアクセス&lt;/a&gt;可能なプロパティを参照してください。これは、 &lt;code&gt;/i&lt;/code&gt; の違いがあるすべてのフォームを示しています。独自のプロパティを定義することもできます。これについては&lt;a href=&quot;perlunicode#User-Defined-Character-Properties&quot;&gt;、perlunicodeのユーザー定義文字のプロパティで説明してい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2cbbe4fe0a4baf76f7b9458c97576bdbd741475c" translate="yes" xml:space="preserve">
          <source>For more details on regular expression efficiency, see</source>
          <target state="translated">正規表現の効率性の詳細については</target>
        </trans-unit>
        <trans-unit id="ebe9afb005e64603315c0b4b48ed47e449ce83f7" translate="yes" xml:space="preserve">
          <source>For more details on the mechanics of skip and todo tests see &lt;a href=&quot;harness&quot;&gt;Test::Harness&lt;/a&gt;.</source>
          <target state="translated">スキップおよびToDoテストのメカニズムの詳細については、&lt;a href=&quot;harness&quot;&gt;Test :: Harnessを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7baab4b3bb4b02cd4142daf0edbd11721551241c" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlguts&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlgutsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f61d1799248ab35eaa772a394c6295835033e37c" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;code&gt;sources&lt;/code&gt; parameter in &lt;a href=&quot;parser#new&quot;&gt;new in TAP::Parser&lt;/a&gt;, &lt;a href=&quot;parser/source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, and &lt;a href=&quot;parser/iteratorfactory&quot;&gt;TAP::Parser::IteratorFactory&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;parser#new&quot;&gt;TAP :: Parser&lt;/a&gt;、&lt;a href=&quot;parser/source&quot;&gt;TAP :: Parser :: Source&lt;/a&gt;、および&lt;a href=&quot;parser/iteratorfactory&quot;&gt;TAP :: Parser :: IteratorFactoryの&lt;/a&gt;新機能の &lt;code&gt;sources&lt;/code&gt; パラメータを参照してください。</target>
        </trans-unit>
        <trans-unit id="8d792a0910cc22b1db3814d0f9e477cca4ea1652" translate="yes" xml:space="preserve">
          <source>For more details, see the documentation and code of &lt;a href=&quot;base&quot;&gt;base&lt;/a&gt; and &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;base&quot;&gt;base&lt;/a&gt;と&lt;a href=&quot;parent&quot;&gt;parentの&lt;/a&gt;ドキュメントとコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="e28556232fac8aa9e7b56eb26466d9231a13cb3c" translate="yes" xml:space="preserve">
          <source>For more details, see the individual descriptions at &lt;code&gt;$@&lt;/code&gt; , &lt;code&gt;$!&lt;/code&gt; , &lt;code&gt;$^E&lt;/code&gt; , and &lt;code&gt;$?&lt;/code&gt; .</source>
          <target state="translated">詳細については、 &lt;code&gt;$@&lt;/code&gt; 、 &lt;code&gt;$!&lt;/code&gt; の個別の説明を参照してください。、 &lt;code&gt;$^E&lt;/code&gt; 、および &lt;code&gt;$?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6cfca851970ab4784648ba74e553f012851bc695" translate="yes" xml:space="preserve">
          <source>For more information about case mappings see &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21&quot;&gt;http://www.unicode.org/unicode/reports/tr21&lt;/a&gt;</source>
          <target state="translated">ケースマッピングの詳細については、&lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21&quot;&gt;http：//www.unicode.org/unicode/reports/tr21を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a52fba09ce9a3f5f4483e33536b3e5c091d8d89a" translate="yes" xml:space="preserve">
          <source>For more information about case mappings see &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21/&quot;&gt;http://www.unicode.org/unicode/reports/tr21/&lt;/a&gt;</source>
          <target state="translated">ケースマッピングの詳細については、&lt;a href=&quot;http://www.unicode.org/unicode/reports/tr21/&quot;&gt;http：//www.unicode.org/unicode/reports/tr21/を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a7f733567279e64844bd80ab92f020d566ce85e" translate="yes" xml:space="preserve">
          <source>For more information about encodings--for instance, to learn what</source>
          <target state="translated">エンコーディングの詳細については、例えば</target>
        </trans-unit>
        <trans-unit id="2561ce48ee706059d4bfdc21d19fd5f166cfc40f" translate="yes" xml:space="preserve">
          <source>For more information about the portability of these functions, see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; and other available platform-specific documentation.</source>
          <target state="translated">これらの関数の移植性の詳細については、&lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;およびその他の利用可能なプラットフォーム固有のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e0b48a366c382047ff56f3b46da60ad7835f72b7" translate="yes" xml:space="preserve">
          <source>For more information on Pod, check out &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; and &lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;.</source>
          <target state="translated">ポッドの詳細については、&lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;および&lt;a href=&quot;perlpodspec&quot;&gt;perlpodspecを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="7368b700a1d6f50c9c2914d3baee02fbd55cba3c" translate="yes" xml:space="preserve">
          <source>For more information on any of these modules, please see its respective documentation.</source>
          <target state="translated">これらのモジュールの詳細については、それぞれのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="416652247fb1fd02b42bcffea330cb4fb44ecfe8" translate="yes" xml:space="preserve">
          <source>For more information on file locking, see also &lt;a href=&quot;perlopentut#File-Locking&quot;&gt;File Locking in perlopentut&lt;/a&gt; if you have it (new for 5.6).</source>
          <target state="translated">ファイルロックの詳細については&lt;a href=&quot;perlopentut#File-Locking&quot;&gt;、perlopentutでのファイルロック&lt;/a&gt;も参照してください（5.6の新機能）。</target>
        </trans-unit>
        <trans-unit id="099e98950b7e5d3724fc0c2a1b6e16e56fceb5bc" translate="yes" xml:space="preserve">
          <source>For more information on output layers, see the entries for &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, and the &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; module documentation.</source>
          <target state="translated">出力層の詳細については、のエントリを参照 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; して&lt;a href=&quot;open&quot;&gt;開く&lt;/a&gt;に&lt;a href=&quot;perlfunc&quot;&gt;はperlfunc&lt;/a&gt;、と&lt;a href=&quot;perlio&quot;&gt;PerlIOを用&lt;/a&gt;モジュールのドキュメント。</target>
        </trans-unit>
        <trans-unit id="e818032a9be9224ab5cbe363750ba1600bb48228" translate="yes" xml:space="preserve">
          <source>For more information on references and blessings, consult &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">参考文献と祝福の詳細については、&lt;a href=&quot;perlref&quot;&gt;perlrefを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a3875443a1c771cfef5af62913463726b3c0dc4e" translate="yes" xml:space="preserve">
          <source>For more information on the Perl internals, please see the documents listed at &lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;Internals and C Language Interface in perl&lt;/a&gt;.</source>
          <target state="translated">Perlの内部の詳細については&lt;a href=&quot;perl#Internals-and-C-Language-Interface&quot;&gt;、perlの内部およびC言語インターフェイスに&lt;/a&gt;リストされているドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7e1c38bc7063ae4d32b5c046d7a962931ee4b2aa" translate="yes" xml:space="preserve">
          <source>For more information on the matching &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; and substitution &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; operators, see &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;. For information on the &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; operation, see &lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;.</source>
          <target state="translated">一致する &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; および置換 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 演算子の詳細については&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;、perlopのRegexp引用型&lt;/a&gt;演算子を参照してください。詳細については &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 操作、参照&lt;a href=&quot;functions/split&quot;&gt;分割&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d861195f361843be9490e2a15ea16594084c17c5" translate="yes" xml:space="preserve">
          <source>For more information on these options, you can run &lt;code&gt;perldoc perlrun&lt;/code&gt; .</source>
          <target state="translated">これらのオプションの詳細については、 &lt;code&gt;perldoc perlrun&lt;/code&gt; を実行できます。</target>
        </trans-unit>
        <trans-unit id="ae1bf8b301cb7d0e378d5bfae6b8ca1419913f8d" translate="yes" xml:space="preserve">
          <source>For more information on writing subroutines, see &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">サブルーチンの記述に関する詳細は、&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="54bca26b413776465d316ff152cfba7e50928bfd" translate="yes" xml:space="preserve">
          <source>For more information see &quot;man strptime&quot;, which should be on all unix systems.</source>
          <target state="translated">より詳しい情報は &quot;man strptime&quot; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e1baf9669b89021435a3869d8ee27cb001b8531d" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../perlipc&quot;&gt;perlipcを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6a8c608dc66ccc771771da6fa1ec2512b26eb2f6" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlipc&quot;&gt;perlipcを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0f020267b66a1cdd001af710aa00960332272626" translate="yes" xml:space="preserve">
          <source>For more information, consult &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;, &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;, &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;, &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;, and &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;、&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;、&lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;、&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;、および&lt;a href=&quot;perlpod&quot;&gt;perlpodを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="34baaca1017f55f5261393ae901ca335f5962ac3" translate="yes" xml:space="preserve">
          <source>For more information, consult &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; and &lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;および&lt;a href=&quot;perlxstut&quot;&gt;perlxstutを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d20dd1c8dbc4552d5c14d5ca92e5a6e145a49a2" translate="yes" xml:space="preserve">
          <source>For more information, including instructions for other platforms such as Windows and Mac OS, read &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="translated">WindowsやMac OSなどの他のプラットフォームの手順を含む詳細については、&lt;a href=&quot;perlrun&quot;&gt;perlrunを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1f6b2985afc24c6ba2ce53974a41c02581d47c16" translate="yes" xml:space="preserve">
          <source>For more on references see &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; and &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;</source>
          <target state="translated">参照の詳細については、&lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;および&lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="570bd0b65c4a2212785bd93937b2532931fb04d1" translate="yes" xml:space="preserve">
          <source>For more on the implications and differences between character semantics and byte semantics, see &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">文字のセマンティクスとバイトのセマンティクスの意味と違いの詳細については、&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;および&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="db99609d275f010ab9ef2f1e664305363a10f9ac" translate="yes" xml:space="preserve">
          <source>For more on this, see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;および&lt;a href=&quot;perlobj&quot;&gt;perlobjを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="272ef40c7df3b1032622640835458da768522456" translate="yes" xml:space="preserve">
          <source>For more up-to-date information, see &lt;a href=&quot;https://metacpan.org/release/ExtUtils-MakeMaker&quot;&gt;https://metacpan.org/release/ExtUtils-MakeMaker&lt;/a&gt;.</source>
          <target state="translated">最新の情報については、&lt;a href=&quot;https://metacpan.org/release/ExtUtils-MakeMaker&quot;&gt;https：//metacpan.org/release/ExtUtils-MakeMakerを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dc54ba1fbc7345fca3a79ce3cc6b3a13627fa07b" translate="yes" xml:space="preserve">
          <source>For most list operators, the check function expects all the kid ops to be present already, so calling &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; (e.g.) is not appropriate. What you want to do in that case is create an op of type OP_LIST, append more children to it, and then call &lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt;. See &lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt; for more information.</source>
          <target state="translated">ほとんどのリスト演算子では、チェック関数はすべての子演算がすでに存在していることを &lt;code&gt;newLISTOP(OP_JOIN, ...)&lt;/code&gt; ため、newLISTOP（OP_JOIN、...）（eg）を呼び出すことは適切ではありません。その場合に行いたいことは、OP_LISTタイプのopを作成し、それに子を追加してから、&lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt;を呼び出すことです。詳細については、&lt;a href=&quot;#op_convert_list&quot;&gt;op_convert_list&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="641019bad56b8716009f9130458dd08e4eb5dd36" translate="yes" xml:space="preserve">
          <source>For most purposes, access to Unicode properties from the Perl core is through regular expression matches, as described in the next section. For some special purposes, and to access the properties that are not suitable for regular expression matching, all the Unicode character properties that Perl handles are accessible via the standard &lt;a href=&quot;unicode/ucd&quot;&gt;Unicode::UCD&lt;/a&gt; module, as described in the section &lt;a href=&quot;#Properties-accessible-through-Unicode%3a%3aUCD&quot;&gt;Properties accessible through Unicode::UCD&lt;/a&gt;.</source>
          <target state="translated">ほとんどの目的で、PerlコアからのUnicodeプロパティへのアクセスは、次のセクションで説明するように、正規表現の一致を通じて行われます。いくつかの特別な目的のため、および正規表現のマッチングに適さないプロパティにアクセスするために、Perlが処理するすべてのUnicode文字プロパティは、&lt;a href=&quot;unicode/ucd&quot;&gt;Unicode :: UCD&lt;/a&gt;を介して&lt;a href=&quot;#Properties-accessible-through-Unicode%3a%3aUCD&quot;&gt;アクセス可能なプロパティで&lt;/a&gt;説明されているように、標準のUnicode :: UCDモジュールを介してアクセスできます。。</target>
        </trans-unit>
        <trans-unit id="8d5ede1c7a0a1dfb0fe304691530ed6a243c7af0" translate="yes" xml:space="preserve">
          <source>For most use-cases the behavior described above is acceptable (this module and it's predecessor, &lt;code&gt;Compress::Zlib&lt;/code&gt; , have used it for over 10 years without an issue), but in a few very specific use-cases the amount of memory required for &lt;code&gt;$output&lt;/code&gt; can prohibitively large. For example, if the compressed data stream contains the same pattern repeated thousands of times, a relatively small compressed data stream can uncompress into hundreds of megabytes. Remember &lt;code&gt;inflate&lt;/code&gt; will keep allocating memory until</source>
          <target state="translated">ほとんどのユースケースでは上記の動作は許容されます（このモジュールとその前身である &lt;code&gt;Compress::Zlib&lt;/code&gt; は問題なく10年以上使用しています）が、いくつかの非常に特殊なユースケースでは、 &lt;code&gt;$output&lt;/code&gt; は非常に大きくなる可能性があります。たとえば、圧縮データストリームに数千回繰り返される同じパターンが含まれている場合、比較的小さな圧縮データストリームを数百メガバイトに解凍できます。覚えておいてください &lt;code&gt;inflate&lt;/code&gt; までメモリを割り当てていきます</target>
        </trans-unit>
        <trans-unit id="a47940c15fef4c6625772cdc1427a983c441c3c1" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Bzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Compress :: Bzip2オブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="adee5e79d5d3d779e5af1d2aba42639fd752741d" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Deflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Compress :: Deflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="ddb04253a83c249a7e883f277739dcda8e2faecb" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Gzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Compress :: Gzipオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="4db349e7c47820dab5028b29921ade4c7bb32501" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::RawDeflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Compress :: RawDeflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="8861e38ef9ff01891126a94c9ec532f08b55ad77" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Compress::Zip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Compress :: Zipオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="1a5826884fe147f7ccc4745dc4c0dec56e5a8942" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: AnyInflateオブジェクトが破棄されると（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="000b46928e33aec75c1330e3f6828a697055beec" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::AnyUncompress object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、このメソッドは、IO :: Uncompress :: AnyUncompressオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="621ae7f532cdf338357018b0efb4e6b8937e23cb" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Bunzip2 object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: Bunzip2オブジェクトが破棄された場合（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="5ebe07c14944aa0924ad00011dbfa6cf95fcffd3" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Gunzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: Gunzipオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="02829219c19fdbb8502226558182b539540ef773" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Inflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、このメソッドは、IO :: Uncompress :: Inflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄された場合に自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="39bac215cf7e9ee43af43133ee6260672e9eebea" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::RawInflate object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: RawInflateオブジェクトが（明示的に、またはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="a0e9e60d5738504f44dbe5db42b611750817984b" translate="yes" xml:space="preserve">
          <source>For most versions of Perl this method will be automatically invoked if the IO::Uncompress::Unzip object is destroyed (either explicitly or by the variable with the reference to the object going out of scope). The exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In these cases, the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method will be called automatically, but not until global destruction of all live objects when the program is terminating.</source>
          <target state="translated">ほとんどのバージョンのPerlでは、IO :: Uncompress :: Unzipオブジェクトが（明示的にまたはスコープ外のオブジェクトへの参照を持つ変数によって）破棄されると、このメソッドが自動的に呼び出されます。例外は、Perlバージョン5.005から5.00504および5.8.0です。これらの場合、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドは自動的に呼び出されますが、プログラムの終了時にすべてのライブオブジェクトがグローバルに破棄されるまで呼び出されません。</target>
        </trans-unit>
        <trans-unit id="ebd39cf1198af939c9fe739680f896002c72f24d" translate="yes" xml:space="preserve">
          <source>For much more detail on using git with the Perl repository, please see &lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt;.</source>
          <target state="translated">Perlリポジトリでgitを使用する方法の詳細については、&lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dd2242f4fd4838cfce99d23a663a50e2e5c87ecf" translate="yes" xml:space="preserve">
          <source>For multilevel structures, you may wish to use an approach more like this one. It uses the CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt;:</source>
          <target state="translated">マルチレベル構造の場合、このようなアプローチを使用することをお勧めします。CPANモジュール&lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThawを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4aaeeb42eefa8440218480ef685b6c057da2ebd8" translate="yes" xml:space="preserve">
          <source>For native multibyte encodings (either fixed or variable length), the current implementation of the regular expressions may introduce recoding errors for regular expression literals longer than 127 bytes.</source>
          <target state="translated">ネイティブのマルチバイトエンコーディング (固定長または可変長のいずれか)では、現在の正規表現の実装では、127 バイトより長い正規表現リテラルに対して再コーディングエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="db0739f14c22b332e1c9ef31d85863c468a6ec30" translate="yes" xml:space="preserve">
          <source>For natural language processing (so that, for example, apostrophes are included in words), use instead &lt;code&gt;\b{wb}&lt;/code&gt;</source>
          <target state="translated">自然言語処理（たとえば、アポストロフィが単語に含まれる）の場合は、代わりに &lt;code&gt;\b{wb}&lt;/code&gt; 使用します</target>
        </trans-unit>
        <trans-unit id="34e4b4c1e84670ba2445432138762ce8b98922fa" translate="yes" xml:space="preserve">
          <source>For negative numbers in base see also &lt;a href=&quot;#brsft()&quot;&gt;brsft&lt;/a&gt;.</source>
          <target state="translated">ベースの負の数については、&lt;a href=&quot;#brsft()&quot;&gt;brsft&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="11739ff4ce5853fede0de1666a77252b4cca5762" translate="yes" xml:space="preserve">
          <source>For numbers in the range 160 (0x00A0) to 255 (0x00FF), this maps from the character code for a Latin-1 character (like 233 for lowercase e-acute) to the US-ASCII character that best aproximates it (like &quot;e&quot;). You may find this useful if you are rendering POD in a format that you think deals well only with US-ASCII characters.</source>
          <target state="translated">160 (0x00A0)から 255 (0x00FF)の範囲の数値について、これは Latin-1 文字の文字コード (小文字の e-acute の 233 のようなもの)から、それに最も近い US-ASCII 文字 (&quot;e&quot; のようなもの)にマップされます。これは、US-ASCII文字のみを扱うフォーマットでPODをレンダリングする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="0418167b8295aaa112b520d273cbff7734fb4037" translate="yes" xml:space="preserve">
          <source>For numeric conversions, you can specify the size to interpret the number as using &lt;code&gt;l&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; . For integer conversions (&lt;code&gt;d u o x X b i D U O&lt;/code&gt; ), numbers are usually assumed to be whatever the default integer size is on your platform (usually 32 or 64 bits), but you can override this to use instead one of the standard C types, as supported by the compiler used to build Perl:</source>
          <target state="translated">数値変換の場合、サイズを指定して、 &lt;code&gt;l&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、または &lt;code&gt;ll&lt;/code&gt; を使用して数値を解釈できます。整数変換（ &lt;code&gt;d u o x X b i D U O&lt;/code&gt; ）の場合、数値は通常、プラットフォームのデフォルトの整数サイズ（通常32ビットまたは64ビット）であると想定されますが、サポートされているように、これをオーバーライドして、標準Cタイプの代わりに使用できますPerlのビルドに使用されたコンパイラー：</target>
        </trans-unit>
        <trans-unit id="3f073c1258e51f971ca716359b2a89c0272776c0" translate="yes" xml:space="preserve">
          <source>For numeric conversions, you can specify the size to interpret the number as using &lt;code&gt;l&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt; , or &lt;code&gt;ll&lt;/code&gt; . For integer conversions (&lt;code&gt;d u o x X b i D U O&lt;/code&gt; ), numbers are usually assumed to be whatever the default integer size is on your platform (usually 32 or 64 bits), but you can override this to use instead one of the standard C types, as supported by the compiler used to build Perl:</source>
          <target state="translated">数値変換の場合、サイズを指定して、 &lt;code&gt;l&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、または &lt;code&gt;ll&lt;/code&gt; を使用して数値を解釈できます。整数変換（ &lt;code&gt;d u o x X b i D U O&lt;/code&gt; ）の場合、数値は通常、プラットフォームのデフォルトの整数サイズ（通常32ビットまたは64ビット）であると想定されますが、サポートされているように、これをオーバーライドして、標準Cタイプの代わりに使用できますPerlのビルドに使用されたコンパイラー：</target>
        </trans-unit>
        <trans-unit id="59b31b25c9f5d592cd415ce42cd1cd5b58c1c703" translate="yes" xml:space="preserve">
          <source>For objects, a method, &lt;code&gt;CARP_TRACE&lt;/code&gt; , will be called, if it exists. If this method doesn't exist, or it recurses into &lt;code&gt;Carp&lt;/code&gt; , or it otherwise throws an exception, this is skipped, and Carp moves on to the next option, otherwise checking stops and the string returned is used. It is recommended that the object's type is part of the string to make debugging easier.</source>
          <target state="translated">オブジェクトの場合、存在する場合、メソッド &lt;code&gt;CARP_TRACE&lt;/code&gt; が呼び出されます。このメソッドが存在しない場合、または &lt;code&gt;Carp&lt;/code&gt; に再帰する場合、または例外がスローされる場合、これはスキップされ、Carpは次のオプションに進みます。それ以外の場合、チェックは停止し、返された文字列が使用されます。デバッグを容易にするために、オブジェクトのタイプを文字列の一部にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="34e2a99f6a2eb99d86babea525e84b0d07848c0f" translate="yes" xml:space="preserve">
          <source>For old code and interim backwards compatibility, the &lt;code&gt;Thread&lt;/code&gt; module has been reworked to function as a frontend for the new interpreter threads (</source>
          <target state="translated">古いコードと暫定的な下位互換性のために、 &lt;code&gt;Thread&lt;/code&gt; モジュールは新しいインタープリタースレッドのフロントエンドとして機能するように作り直されました（</target>
        </trans-unit>
        <trans-unit id="54678b0f46a42f75ba9339772dde807022e3f850" translate="yes" xml:space="preserve">
          <source>For options that take list or hash values, it is necessary to indicate this by appending an &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; sign after the type:</source>
          <target state="translated">リストまたはハッシュ値を取るオプションの場合、タイプの後に &lt;code&gt;@&lt;/code&gt; または &lt;code&gt;%&lt;/code&gt; 記号を追加してこれを示す必要があります。</target>
        </trans-unit>
        <trans-unit id="ed4fe0865e6bc07b5c076581d59bd74aedec7133" translate="yes" xml:space="preserve">
          <source>For options that take values it must be specified whether the option value is required or not, and what kind of value the option expects.</source>
          <target state="translated">値を取るオプシ ョ ンの場合は、 オプシ ョ ン値が必須か否か、 そしてそのオプシ ョ ンが期待する値の種類を指定する必要があ り ます。</target>
        </trans-unit>
        <trans-unit id="14b3ef641443710b672e456ac43669f979bd2658" translate="yes" xml:space="preserve">
          <source>For ordinary files you can also use the &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">通常のファイルの場合は、 &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 関数も使用できます。</target>
        </trans-unit>
        <trans-unit id="18923d06b00ab1b78a669fe54fca08f48f38928d" translate="yes" xml:space="preserve">
          <source>For other Perl-based conversion options see the &lt;code&gt;Convert::*&lt;/code&gt; modules on CPAN.</source>
          <target state="translated">その他のPerlベースの変換オプションについては、CPANの &lt;code&gt;Convert::*&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="ecf4231003ccccf0ccb3fdcd4e5a986799fbca1f" translate="yes" xml:space="preserve">
          <source>For other filetypes, like &lt;code&gt;chardevs&lt;/code&gt; and &lt;code&gt;blockdevs&lt;/code&gt; we'll warn that the extraction of this particular item didn't work.</source>
          <target state="translated">&lt;code&gt;chardevs&lt;/code&gt; や &lt;code&gt;blockdevs&lt;/code&gt; などの他のファイルタイプの場合、この特定のアイテムの抽出が機能しなかったことを警告します。</target>
        </trans-unit>
        <trans-unit id="a61d39f00af378aaa32b4a9a3dedd635bdcf3408" translate="yes" xml:space="preserve">
          <source>For other locales, starting in Perl 5.16, you can specify</source>
          <target state="translated">その他のロケールについては、Perl 5.16 以降では</target>
        </trans-unit>
        <trans-unit id="55153fcdbe0c92eb8adc0abec175ecdf7f05a3ca" translate="yes" xml:space="preserve">
          <source>For other termination statuses, the severity portion of the subprocess's exit status is used: if the severity was success or informational, these bits are all 0; if the severity was warning, they contain a value of 1; if the severity was error or fatal error, they contain the actual severity bits, which turns out to be a value of 2 for error and 4 for severe_error. Fatal is another term for the severe_error status.</source>
          <target state="translated">重大度が成功または情報的なものであれば、これらのビットはすべて0であり、重大度が警告であれば1の値を含み、重大度がエラーまたは致命的なエラーであれば、これらのビットは実際の重大度ビットを含み、エラーであれば2の値、severeit_errorであれば4の値となる。Fatal は severe_error ステータスの別の用語です。</target>
        </trans-unit>
        <trans-unit id="d9c9ebb36f114d2e29800b2f2a876e7e2d770bfb" translate="yes" xml:space="preserve">
          <source>For our File::MP3 class, we can check to make sure that the path we're given ends with &quot;.mp3&quot;:</source>
          <target state="translated">File::MP3クラスでは、与えられたパスが&quot;.mp3 &quot;で終わることを確認することができます。</target>
        </trans-unit>
        <trans-unit id="90aad3aef5b3704234dd7e152135fa69067f60cd" translate="yes" xml:space="preserve">
          <source>For our example, we want to be able to emit debugging info to help in tracing during development. We keep also one convenience function around internally to help print out warnings; whowasi() returns the function name that calls it.</source>
          <target state="translated">この例では、開発中のトレースに役立つデバッグ情報を出力できるようにしたいと考えています。また、警告を出力するのに役立つ便利な関数を内部に1つ用意しています。</target>
        </trans-unit>
        <trans-unit id="aa18cdabf84f58c0c8a60b20d7ee4d847450d128" translate="yes" xml:space="preserve">
          <source>For our example, we're using a real hash so we'll do just the simple thing, but we'll have to go through the LIST field indirectly.</source>
          <target state="translated">私たちの例では、実際のハッシュを使っているので、単純なことをするだけですが、間接的にLISTフィールドを経由しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a68ea5110cc4475ea5587d223e48012123b172f2" translate="yes" xml:space="preserve">
          <source>For packing floating point numbers you have the choice between the pack codes &lt;code&gt;f&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; , &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; . &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt; pack into (or unpack from) single-precision or double-precision representation as it is provided by your system. If your systems supports it, &lt;code&gt;D&lt;/code&gt; can be used to pack and unpack (&lt;code&gt;long double&lt;/code&gt; ) values, which can offer even more resolution than &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt; . &lt;b&gt;Note that there are different long double formats.&lt;/b&gt;</source>
          <target state="translated">浮動小数点数をパックするには、パックコード &lt;code&gt;f&lt;/code&gt; 、 &lt;code&gt;d&lt;/code&gt; 、 &lt;code&gt;F&lt;/code&gt; 、 &lt;code&gt;D&lt;/code&gt; から選択できます。 &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;d&lt;/code&gt; は、システムで提供される単精度または倍精度表現にパック（またはアンパック）します。システムでサポートされている場合、 &lt;code&gt;D&lt;/code&gt; を使用して値をパックおよびアンパック（ &lt;code&gt;long double&lt;/code&gt; ）することができます。これにより、 &lt;code&gt;f&lt;/code&gt; または &lt;code&gt;d&lt;/code&gt; よりもさらに高い解像度を提供できます。&lt;b&gt;異なるlong doubleフォーマットがあることに注意してください。&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="66df4e6482b9f11564ff3b3f20d96a2cc85b3ceb" translate="yes" xml:space="preserve">
          <source>For parsing or generating CSV, though, using &lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV&quot;&gt;Text::CSV&lt;/a&gt; rather than implementing it yourself is highly recommended; you'll save yourself odd bugs popping up later by just using code which has already been tried and tested in production for years.</source>
          <target state="translated">ただし、CSVを解析または生成する場合は、自分で実装するのではなく、&lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV&quot;&gt;Text :: CSV&lt;/a&gt;を使用することを強くお勧めします。何年もの間、本番環境ですでに試され、テストされているコードを使用するだけで、後で現れる奇妙なバグを保存できます。</target>
        </trans-unit>
        <trans-unit id="6ee0891ac5c639e853c5a4e5edc84af67afe5f45" translate="yes" xml:space="preserve">
          <source>For platforms that do not support the L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef063b83223c50f839dae38551b2b8ac38cb283" translate="yes" xml:space="preserve">
          <source>For portability do not assume that the result of inet_aton() is 32 bits wide, in other words, that it would contain only the IPv4 address in network order.</source>
          <target state="translated">移植性のために、inet_aton()の結果が32ビット幅であると仮定してはいけません、言い換えれば、ネットワーク順にIPv4アドレスだけが含まれることになります。</target>
        </trans-unit>
        <trans-unit id="a2f756b0930efbec9e5ee4bb36d81103dee350c4" translate="yes" xml:space="preserve">
          <source>For portability, when using features that may not be implemented on every machine, test the construct in an eval to see if it fails. If you know what version or patchlevel a particular feature was implemented, you can test &lt;code&gt;$]&lt;/code&gt; (&lt;code&gt;$PERL_VERSION&lt;/code&gt; in &lt;code&gt;English&lt;/code&gt; ) to see if it will be there. The &lt;code&gt;Config&lt;/code&gt; module will also let you interrogate values determined by the &lt;b&gt;Configure&lt;/b&gt; program when Perl was installed.</source>
          <target state="translated">移植性のために、すべてのマシンに実装されていない可能性がある機能を使用する場合は、evalで構成をテストして、失敗するかどうかを確認します。あなたはどのバージョンを知っているか、または特定の機能が実装されたパッチレベルの場合は、テストすることができます &lt;code&gt;$]&lt;/code&gt; （ &lt;code&gt;$PERL_VERSION&lt;/code&gt; で &lt;code&gt;English&lt;/code&gt; それはあるでしょうかどうかを確認するため）。 &lt;code&gt;Config&lt;/code&gt; モジュールはまた、によって決定された値問い合わせるようになる&lt;b&gt;設定]&lt;/b&gt;のPerlをインストールしたときにプログラムを。</target>
        </trans-unit>
        <trans-unit id="2535552b980c53cc7ba860a8dd5bb061008869b5" translate="yes" xml:space="preserve">
          <source>For portably packed integers, either use the formats &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; , and &lt;code&gt;V&lt;/code&gt; or else use the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers described immediately below. See also &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="translated">移植可能なパック整数の場合、フォーマット &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、および &lt;code&gt;V&lt;/code&gt; を使用するか、またはすぐ下に説明する &lt;code&gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;&lt;/code&gt; 修飾子を使用します。&lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f894cb82cd4f998730f7156c0afde9903978c5fb" translate="yes" xml:space="preserve">
          <source>For portably packed integers, either use the formats &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; , and &lt;code&gt;V&lt;/code&gt; or else use the &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers described immediately below. See also &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="translated">移植可能なパック整数の場合、フォーマット &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、および &lt;code&gt;V&lt;/code&gt; を使用するか、またはすぐ下に説明する &lt;code&gt;&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;&lt;/code&gt; 修飾子を使用します。&lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b632d6b9c2c212334172ecdd5444e30d59c76fb4" translate="yes" xml:space="preserve">
          <source>For purposes for forward compatibility, any result which does not match the following grammar is currently referred to as &lt;a href=&quot;result/unknown&quot;&gt;TAP::Parser::Result::Unknown&lt;/a&gt;. It is</source>
          <target state="translated">上位互換性を保つために、次の文法に一致しない結果は、現在&lt;a href=&quot;result/unknown&quot;&gt;TAP :: Parser :: Result :: Unknown&lt;/a&gt;と呼ばれています。です</target>
        </trans-unit>
        <trans-unit id="abd99590407faa93008cdde9678d67dea3d2be33" translate="yes" xml:space="preserve">
          <source>For purposes of Pod processing, there are four types of paragraphs in a Pod block:</source>
          <target state="translated">Pod処理の目的上、Podブロックには4種類の段落があります。</target>
        </trans-unit>
        <trans-unit id="7c27afbc45a634cfd67eaae651454448b0cf48fa" translate="yes" xml:space="preserve">
          <source>For reading RFC 1950 files/buffers, see the companion module &lt;a href=&quot;../uncompress/inflate&quot;&gt;IO::Uncompress::Inflate&lt;/a&gt;.</source>
          <target state="translated">RFC 1950ファイル/バッファーの読み取りについては、関連モジュール&lt;a href=&quot;../uncompress/inflate&quot;&gt;IO :: Uncompress :: Inflateを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a855ff5b11238f17f076a8b7ebdcff40a540c026" translate="yes" xml:space="preserve">
          <source>For reading RFC 1951 files/buffers, see the companion module &lt;a href=&quot;../uncompress/rawinflate&quot;&gt;IO::Uncompress::RawInflate&lt;/a&gt;.</source>
          <target state="translated">RFC 1951ファイル/バッファの読み取りについては、関連モジュール&lt;a href=&quot;../uncompress/rawinflate&quot;&gt;IO :: Uncompress :: RawInflateを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a7c1e04df00546215699a3d4161d10f783f59e5d" translate="yes" xml:space="preserve">
          <source>For reading RFC 1952 files/buffers, see the companion module &lt;a href=&quot;../uncompress/gunzip&quot;&gt;IO::Uncompress::Gunzip&lt;/a&gt;.</source>
          <target state="translated">RFC 1952ファイル/バッファーの読み取りについては、コンパニオンモジュール&lt;a href=&quot;../uncompress/gunzip&quot;&gt;IO :: Uncompress :: Gunzipを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="45f2b20453bc89baeb5e50beb84ad2c8f70cd376" translate="yes" xml:space="preserve">
          <source>For reading bzip2 files/buffers, see the companion module &lt;a href=&quot;../uncompress/bunzip2&quot;&gt;IO::Uncompress::Bunzip2&lt;/a&gt;.</source>
          <target state="translated">bzip2ファイル/バッファーの読み取りについては、コンパニオンモジュール&lt;a href=&quot;../uncompress/bunzip2&quot;&gt;IO :: Uncompress :: Bunzip2を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="187e155fdbfcf5fc691664f658b9590cb0a606e3" translate="yes" xml:space="preserve">
          <source>For reading zip files/buffers, see the companion module &lt;a href=&quot;../uncompress/unzip&quot;&gt;IO::Uncompress::Unzip&lt;/a&gt;.</source>
          <target state="translated">zipファイル/バッファの読み取りについては、関連モジュール&lt;a href=&quot;../uncompress/unzip&quot;&gt;IO :: Uncompress :: Unzipを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6bd2eb9a3cc8fd3a8df073b0ec5e2b4d099b5a11" translate="yes" xml:space="preserve">
          <source>For reference &lt;code&gt;Name_hash&lt;/code&gt; in &lt;a href=&quot;#Example-1&quot;&gt;Example 1&lt;/a&gt; shows the standard implementation of a simple class &lt;code&gt;Name&lt;/code&gt; in the well-known hash based way. It also demonstrates the predictable failure to construct a common subclass &lt;code&gt;NamedFile&lt;/code&gt; of &lt;code&gt;Name&lt;/code&gt; and the class &lt;code&gt;IO::File&lt;/code&gt; (whose objects</source>
          <target state="translated">参考の &lt;code&gt;Name_hash&lt;/code&gt; 、&lt;a href=&quot;#Example-1&quot;&gt;例1の&lt;/a&gt;Name_hashは、よく知られているハッシュベースの方法での単純なクラス &lt;code&gt;Name&lt;/code&gt; の標準実装を示しています。また、 &lt;code&gt;Name&lt;/code&gt; の共通サブクラス &lt;code&gt;NamedFile&lt;/code&gt; とクラス &lt;code&gt;IO::File&lt;/code&gt; （オブジェクトが</target>
        </trans-unit>
        <trans-unit id="c814c526315b7581980ad4c15539a698f43dc88e" translate="yes" xml:space="preserve">
          <source>For reference on how regular expressions are used in matching operations, plus various examples of the same, see discussions of &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;??&lt;/code&gt; in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">マッチング操作での正規表現の使用方法と、そのさまざまな例のリファレンスについては、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;??&lt;/code&gt; の説明を参照してください。中に&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;はperlopでの正規表現の引用様演算子&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fad7e87806bab30783c3c4927bdef95cd0d3e97d" translate="yes" xml:space="preserve">
          <source>For resolving Pod E&amp;lt;...&amp;gt; sequences</source>
          <target state="translated">ポッドE &amp;lt;...&amp;gt;シーケンスを解決するため</target>
        </trans-unit>
        <trans-unit id="6b992296626805bd58c646a7af77319599bf4d43" translate="yes" xml:space="preserve">
          <source>For results that are less &quot;raw&quot; than this function returns, or to get the values for any property, not just the few covered by this function, use the &lt;a href=&quot;#charprop()&quot;&gt;charprop()&lt;/a&gt; function.</source>
          <target state="translated">この関数が返すよりも「生」ではない結果の場合、またはこの関数でカバーされるいくつかだけではなく、任意のプロパティの値を取得するには、&lt;a href=&quot;#charprop()&quot;&gt;charprop（）&lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="5465aa0069dd7e57a3ecfdd26acfc8c3e9bcb5cc" translate="yes" xml:space="preserve">
          <source>For scripts see UTR #24: &lt;a href=&quot;http://www.unicode.org/unicode/reports/tr24/&quot;&gt;http://www.unicode.org/unicode/reports/tr24/&lt;/a&gt;</source>
          <target state="translated">スクリプトについては、UTR＃24を参照してください：&lt;a href=&quot;http://www.unicode.org/unicode/reports/tr24/&quot;&gt;http&lt;/a&gt; : //www.unicode.org/unicode/reports/tr24/</target>
        </trans-unit>
        <trans-unit id="fbe77ef0bb7f245eb32b185bc4ca0da0057fd61e" translate="yes" xml:space="preserve">
          <source>For security reasons, which are probably detailed in your system's documentation for the C library &lt;code&gt;tmpnam()&lt;/code&gt; function, this interface should not be used; instead see &lt;a href=&quot;file/temp&quot;&gt;File::Temp&lt;/a&gt;.</source>
          <target state="translated">セキュリティ上の理由から、おそらくCライブラリの &lt;code&gt;tmpnam()&lt;/code&gt; 関数に関するシステムのドキュメントに詳細が記載されているため、このインターフェイスは使用しないでください。代わりに&lt;a href=&quot;file/temp&quot;&gt;File :: Tempを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="804ad42eea097048c3a5ad09bc9b03cdfa4b060a" translate="yes" xml:space="preserve">
          <source>For sequential data set access try:</source>
          <target state="translated">シーケンシャルなデータセットアクセスのために試してみてください。</target>
        </trans-unit>
        <trans-unit id="ef5bb90320f25f28778d12700a90184c79a71a09" translate="yes" xml:space="preserve">
          <source>For simple names like 'foo', when the normal search fails to find a matching page, a search with the &quot;perl&quot; prefix is tried as well. So &quot;perldoc intro&quot; is enough to find/render &quot;perlintro.pod&quot;.</source>
          <target state="translated">foo' のような単純な名前の場合、通常の検索では一致するページが見つからない場合、&quot;perl&quot; という接頭辞で検索してみます。そのため、&quot;perldoc intro &quot;で &quot;perlintro.pod &quot;を検索/レンダリングすることができます。</target>
        </trans-unit>
        <trans-unit id="556d75ad92e978ff3b11a57397aef51991f4ff7e" translate="yes" xml:space="preserve">
          <source>For simple uses, &lt;a href=&quot;spec/functions&quot;&gt;File::Spec::Functions&lt;/a&gt; provides convenient functional forms of these methods.</source>
          <target state="translated">単純な使用のために、&lt;a href=&quot;spec/functions&quot;&gt;File :: Spec :: Functions&lt;/a&gt;はこれらのメソッドの便利な関数形式を提供します。</target>
        </trans-unit>
        <trans-unit id="9d03e819dd2058b21b6af8f56092068c3f695190" translate="yes" xml:space="preserve">
          <source>For single-byte locales, Perl generally takes the tack to use locale rules on code points that can fit in a single byte, and Unicode rules for those that can't (though this isn't uniformly applied, see the note at the end of this section). This prevents many problems in locales that aren't UTF-8. Suppose the locale is ISO8859-7, Greek. The character at 0xD7 there is a capital Chi. But in the ISO8859-1 locale, Latin1, it is a multiplication sign. The POSIX regular expression character class &lt;code&gt;[[:alpha:]]&lt;/code&gt; will magically match 0xD7 in the Greek locale but not in the Latin one.</source>
          <target state="translated">シングルバイトロケールの場合、Perlは通常、シングルバイトに収まるコードポイントにロケールルールを使用し、収まらないものにはUnicodeルールを使用します（これは均一に適用されませんが、最後の注を参照してください）このセクションの）。これにより、UTF-8以外のロケールでの多くの問題が回避されます。ロケールがギリシャ語のISO8859-7であるとします。0xD7の文字には大文字のChiがあります。しかし、ISO8859-1ロケールのLatin1では、これは乗算記号です。POSIX正規表現文字クラス &lt;code&gt;[[:alpha:]]&lt;/code&gt; は、ギリシャのロケールでは0xD7に魔法のように一致しますが、ラテン語のロケールでは一致しません。</target>
        </trans-unit>
        <trans-unit id="380d5b1307da78e3f0b19da4a2093d734fd7d578" translate="yes" xml:space="preserve">
          <source>For small inputs asin() and acos() may return complex numbers even when real numbers would be enough and correct, this happens because of floating-point inaccuracies. You can see these inaccuracies for example by trying theses:</source>
          <target state="translated">小さな入力の場合、asin()や acos()は実数で十分で正しいのに複素数を返すことがありますが、これは浮動小数点の不正確さが原因です。これらの不正確さは、例えば以下のものを試してみることで確認することができます。</target>
        </trans-unit>
        <trans-unit id="b0bc5ddd0ee51281e4f9659982e9a429afe81e41" translate="yes" xml:space="preserve">
          <source>For small systems, &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny&quot;&gt;Class::Tiny&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Accessor&quot;&gt;Class::Accessor&lt;/a&gt; both provide minimal object systems that take care of basic boilerplate for you.</source>
          <target state="translated">小規模なシステムでは、&lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny&quot;&gt;Class :: Tiny&lt;/a&gt;と&lt;a href=&quot;http://search.cpan.org/perldoc/Class::Accessor&quot;&gt;Class :: Accessorの&lt;/a&gt;両方が、基本的なボイラープレートを処理する最小限のオブジェクトシステムを提供します。</target>
        </trans-unit>
        <trans-unit id="649df46c734150d637b1c77793718377fdc210a4" translate="yes" xml:space="preserve">
          <source>For some applications, the Perl parser mangles constants too much. It is possible to hook into this process via &lt;code&gt;overload::constant()&lt;/code&gt; and &lt;code&gt;overload::remove_constant()&lt;/code&gt; functions.</source>
          <target state="translated">一部のアプリケーションでは、Perlパーサーが定数を過剰に変換します。 &lt;code&gt;overload::constant()&lt;/code&gt; および &lt;code&gt;overload::remove_constant()&lt;/code&gt; 関数を介してこのプロセスにフックすることが可能です。</target>
        </trans-unit>
        <trans-unit id="8c75f56e634e770bcbf3c0f23b36b82ec0fc811d" translate="yes" xml:space="preserve">
          <source>For some combinations of base character and modifiers, there are</source>
          <target state="translated">ベースとなるキャラクターとモディファイアの組み合わせによっては</target>
        </trans-unit>
        <trans-unit id="5b2480bf16f6be7c86b401cccabe7d726d8e24b1" translate="yes" xml:space="preserve">
          <source>For some concrete examples, see the implementation of the first() and reduce() functions of List::Util 1.18. There you will also find a header file that emulates the multicall API on older versions of perl.</source>
          <target state="translated">具体的な例としては、List::Util 1.18 の first()と reduce()関数の実装を参照してください。ここには、古いバージョンの perl のマルチコール API をエミュレートするヘッダファイルもあります。</target>
        </trans-unit>
        <trans-unit id="2c83ee66f318d1a73763c0a4e4314ae7b7e4530e" translate="yes" xml:space="preserve">
          <source>For some dual-life modules, it has not yet been determined if the CPAN version or the blead source is canonical. Until that is done, those modules should be in</source>
          <target state="translated">いくつかのデュアルライフモジュールについては、CPAN バージョンか blead ソースが正規化されているかどうかはまだ決定されていません。それが決定されるまでは、これらのモジュールは</target>
        </trans-unit>
        <trans-unit id="52922f69d414d9ab836b3e1640882c87c88c29f9" translate="yes" xml:space="preserve">
          <source>For some languages this issue may never come up (Danish is rarely expressed as &quot;da-DK&quot;, but instead is just &quot;da&quot;). And for other languages, the whole concept of a &quot;generic&quot; form may verge on being uselessly vague, particularly for interfaces involving voice media in forms of Arabic or Chinese.</source>
          <target state="translated">いくつかの言語では、この問題は出てこないかもしれません(デンマーク語は「da-DK」と表現されることはほとんどなく、代わりに「da」だけです)。また、他の言語では、特にアラビア語や中国語の音声メディアを含むインターフェイスでは、「一般的な」形式の概念は無駄に曖昧なものになりかけています。</target>
        </trans-unit>
        <trans-unit id="8df7b58f3cdc3f5432c07cbb3014a32ed5bbfa9f" translate="yes" xml:space="preserve">
          <source>For some methods, the first parameter can be modified. That includes the possibility that you return a reference to a completely different object instead. Although keeping the reference and just changing its contents is preferred over creating and returning a different reference.</source>
          <target state="translated">いくつかのメソッドでは、最初のパラメータを変更することができます。これには、代わりに全く異なるオブジェクトへの参照を返す可能性も含まれます。しかし、別の参照を作成して返すよりも、参照を保持して内容を変更することの方が好ましいです。</target>
        </trans-unit>
        <trans-unit id="91b1402159268a636b935e75a5ef943d82112546" translate="yes" xml:space="preserve">
          <source>For some reason which I forget, Unix machines like to have PERL_DL_NONLAZY set for tests.</source>
          <target state="translated">なぜか忘れましたが、Unix マシンはテスト用に PERL_DL_NONLAZY を設定するのが好きです。</target>
        </trans-unit>
        <trans-unit id="a7901ef2b61f75100e0830a3d919762868ec72c6" translate="yes" xml:space="preserve">
          <source>For some reason, the Fahrenheit to Celsius conversion fails to return the expected output. This is what it does:</source>
          <target state="translated">何らかの理由で、華氏から摂氏への変換は、期待された出力を返すことができません。これがその結果です。</target>
        </trans-unit>
        <trans-unit id="6836cb564e9866aa0dd506ea484f1257d833a6cb" translate="yes" xml:space="preserve">
          <source>For some reason, this table is incomplete! Several countries are missing from it, and I cannot find them anywhere on the UN site. I no longer use this as a source of data.</source>
          <target state="translated">なぜかこの表は不完全なのです。いくつかの国が欠落していて、国連のサイトのどこにも見当たらない。私はもうこれをデータのソースとして使用していません。</target>
        </trans-unit>
        <trans-unit id="b7a2085644f6e69e810ea72163b3697d3339d4a3" translate="yes" xml:space="preserve">
          <source>For some specific applications, you can use one of the DBM modules. See &lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt;. More generically, you should consult the &lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt; or &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; modules from CPAN. Starting from Perl 5.8, &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt; is part of the standard distribution. Here's one example using &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;'s &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;retrieve&lt;/code&gt; functions:</source>
          <target state="translated">一部の特定のアプリケーションでは、DBMモジュールの1つを使用できます。&lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_Fileを&lt;/a&gt;参照してください。より一般的には、CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/FreezeThaw&quot;&gt;FreezeThaw&lt;/a&gt;または&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;モジュールを参照する必要があります。Perl 5.8以降、&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;は標準ディストリビューションの一部です。&lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;の &lt;code&gt;store&lt;/code&gt; および &lt;code&gt;retrieve&lt;/code&gt; 関数を使用した1つの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="51552d3184ebb138bb755fdbaf9df407078be4d9" translate="yes" xml:space="preserve">
          <source>For special considerations when Perl is embedded in a C program, see &lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;Using embedded Perl with POSIX locales in perlembed&lt;/a&gt;.</source>
          <target state="translated">PerlがCプログラムに埋め込まれている場合の特別な考慮事項については&lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;、perlembedのPOSIXロケールでの埋め込みPerlの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="db2592239bcf5cba780f2c2b2c780b3dad39ed83" translate="yes" xml:space="preserve">
          <source>For state vars, SVs_PADSTALE is overloaded to mean 'not yet initialised', but this internal state is stored in a separate pad entry.</source>
          <target state="translated">状態変数の場合、SVs_PADSTALE は「まだ初期化されていない」という意味でオーバーロードされますが、この内部状態は別のパッドエントリに格納されます。</target>
        </trans-unit>
        <trans-unit id="f0dd4dac3c9b3c360654ba0693c4a0d4f581ae73" translate="yes" xml:space="preserve">
          <source>For streams all in the same encoding, don't use encode/decode; instead set the file encoding when you open the file or immediately after with &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; as described later below.</source>
          <target state="translated">すべて同じエンコーディングのストリームの場合、エンコード/デコードを使用しないでください。代わりに、ファイルを開くとき、または後述するように &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を使用した直後に、ファイルエンコーディングを設定します。</target>
        </trans-unit>
        <trans-unit id="1dfae2e55787ddda9febdb90b2ecaeb6ae6a59fe" translate="yes" xml:space="preserve">
          <source>For streams being handed</source>
          <target state="translated">手渡されたストリームのために</target>
        </trans-unit>
        <trans-unit id="9dedf3c911e70154c6e95a2be8f174842c7bae09" translate="yes" xml:space="preserve">
          <source>For streams coming</source>
          <target state="translated">来るストリームのために</target>
        </trans-unit>
        <trans-unit id="e0011302da40ab3a00fabe609704d25b18704f41" translate="yes" xml:space="preserve">
          <source>For string conversions, specifying a precision truncates the string to fit the specified width:</source>
          <target state="translated">文字列変換の場合、精度を指定すると、指定した幅に合わせて文字列が切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="715b9be15d81e36207f8641c990be0fb81823314" translate="yes" xml:space="preserve">
          <source>For string values, &lt;code&gt;%&lt;/code&gt; returns the sum of the byte values saving you the trouble of a sum loop with &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">文字列値の場合、 &lt;code&gt;%&lt;/code&gt; はバイト値の合計を返し、 &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; を使用した合計ループの問題を回避します。</target>
        </trans-unit>
        <trans-unit id="2c32ad512fb42bb2f5a39ca4f1c4f07aae935ceb" translate="yes" xml:space="preserve">
          <source>For successful testing you may need to turn on the sticky bit for your world readable /tmp directory if you have not already done so (see man chmod).</source>
          <target state="translated">テストを成功させるためには、もしまだそうしていない場合は、世界で読める /tmp ディレクトリのスティッキービットをオンにする必要があるかもしれません (man chmod を参照してください)。</target>
        </trans-unit>
        <trans-unit id="992f6aafd7fd171cd3b566817c93beb472bf462c" translate="yes" xml:space="preserve">
          <source>For such purposes we have &lt;code&gt;use_ok&lt;/code&gt; and &lt;code&gt;require_ok&lt;/code&gt; .</source>
          <target state="translated">そのような目的のために、 &lt;code&gt;use_ok&lt;/code&gt; と &lt;code&gt;require_ok&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="7d0546a793b6579ee297b5975d16d0d21606bafc" translate="yes" xml:space="preserve">
          <source>For systems with no syntax differentiating filenames from directories, assumes that the last file is a path unless $no_file is true or a trailing separator or /. or /.. is present. On Unix this means that $no_file true makes this return ( '', $path, '' ).</source>
          <target state="translated">ファイル名とディレクトリを区別する構文を持たないシステムでは、 $no_file が true であるか、末尾に区切り文字 /.または /...がない限り、最後のファイルがパスであると仮定します。Unix では、これは $no_file が true の場合には('',$path,'')を返すことを意味します。</target>
        </trans-unit>
        <trans-unit id="7b23c14e40a72fd26594732c2e008c8f7079954f" translate="yes" xml:space="preserve">
          <source>For systems with no syntax differentiating filenames from directories, assumes that the last file is a path unless &lt;code&gt;$no_file&lt;/code&gt; is true or a trailing separator or</source>
          <target state="translated">ファイル名とディレクトリを区別する構文がないシステムの場合、 &lt;code&gt;$no_file&lt;/code&gt; がtrueであるか、末尾のセパレータまたは</target>
        </trans-unit>
        <trans-unit id="41699a22da98ee5d514ab051852b7fdbdda93994" translate="yes" xml:space="preserve">
          <source>For tab indents, you'd use a tab character:</source>
          <target state="translated">タブインデントの場合は、タブ文字を使用します。</target>
        </trans-unit>
        <trans-unit id="873e054c44e61faf311e2453c2e600c934773fe0" translate="yes" xml:space="preserve">
          <source>For that use &lt;a href=&quot;http://search.cpan.org/perldoc/Shell::Command&quot;&gt;Shell::Command&lt;/a&gt;.</source>
          <target state="translated">そのためには、&lt;a href=&quot;http://search.cpan.org/perldoc/Shell::Command&quot;&gt;Shell :: Command&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="f8e31e8dfe4611868531ce4559928a6d1882ff0a" translate="yes" xml:space="preserve">
          <source>For the</source>
          <target state="translated">のための</target>
        </trans-unit>
        <trans-unit id="9111ece894932df874025e3e103411a73321fa27" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt; , &lt;code&gt;cot&lt;/code&gt; , &lt;code&gt;asec&lt;/code&gt; , &lt;code&gt;acsc&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , &lt;code&gt;csch&lt;/code&gt; , &lt;code&gt;coth&lt;/code&gt; , &lt;code&gt;asech&lt;/code&gt; , &lt;code&gt;acsch&lt;/code&gt; , the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;tan&lt;/code&gt; , &lt;code&gt;sec&lt;/code&gt; , &lt;code&gt;tanh&lt;/code&gt; , &lt;code&gt;sech&lt;/code&gt; , the argument cannot be</source>
          <target state="translated">ため &lt;code&gt;csc&lt;/code&gt; 、 &lt;code&gt;cot&lt;/code&gt; 、 &lt;code&gt;asec&lt;/code&gt; 、 &lt;code&gt;acsc&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、 &lt;code&gt;csch&lt;/code&gt; 、 &lt;code&gt;coth&lt;/code&gt; 、 &lt;code&gt;asech&lt;/code&gt; 、 &lt;code&gt;acsch&lt;/code&gt; 、引数ができません &lt;code&gt;0&lt;/code&gt; （ゼロ）。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;1&lt;/code&gt; （1）。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;-1&lt;/code&gt; （マイナス1）。以下のために &lt;code&gt;tan&lt;/code&gt; 、 &lt;code&gt;sec&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; 、 &lt;code&gt;sech&lt;/code&gt; 、引数にすることはできません</target>
        </trans-unit>
        <trans-unit id="18728ff4c7a96c743723724ec7c8d3bf1df62e46" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;csc&lt;/code&gt; , &lt;code&gt;cot&lt;/code&gt; , &lt;code&gt;asec&lt;/code&gt; , &lt;code&gt;acsc&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , &lt;code&gt;csch&lt;/code&gt; , &lt;code&gt;coth&lt;/code&gt; , &lt;code&gt;asech&lt;/code&gt; , &lt;code&gt;acsch&lt;/code&gt; , the argument cannot be &lt;code&gt;0&lt;/code&gt; (zero). For the logarithmic functions and the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;1&lt;/code&gt; (one). For the &lt;code&gt;atanh&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-1&lt;/code&gt; (minus one). For the &lt;code&gt;atan&lt;/code&gt; , &lt;code&gt;acot&lt;/code&gt; , the argument cannot be &lt;code&gt;i&lt;/code&gt; (the imaginary unit). For the &lt;code&gt;atan&lt;/code&gt; , &lt;code&gt;acoth&lt;/code&gt; , the argument cannot be &lt;code&gt;-i&lt;/code&gt; (the negative imaginary unit). For the &lt;code&gt;tan&lt;/code&gt; , &lt;code&gt;sec&lt;/code&gt; , &lt;code&gt;tanh&lt;/code&gt; , the argument cannot be</source>
          <target state="translated">ため &lt;code&gt;csc&lt;/code&gt; 、 &lt;code&gt;cot&lt;/code&gt; 、 &lt;code&gt;asec&lt;/code&gt; 、 &lt;code&gt;acsc&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、 &lt;code&gt;csch&lt;/code&gt; 、 &lt;code&gt;coth&lt;/code&gt; 、 &lt;code&gt;asech&lt;/code&gt; 、 &lt;code&gt;acsch&lt;/code&gt; 、引数ができません &lt;code&gt;0&lt;/code&gt; （ゼロ）。対数関数と &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; の場合、引数を &lt;code&gt;1&lt;/code&gt; にすることはできません。 &lt;code&gt;atanh&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数にすることはできません &lt;code&gt;-1&lt;/code&gt; （マイナス1）。ため &lt;code&gt;atan&lt;/code&gt; 、 &lt;code&gt;acot&lt;/code&gt; 、引数ができません &lt;code&gt;i&lt;/code&gt; （虚数単位）。以下のための &lt;code&gt;atan&lt;/code&gt; 、 &lt;code&gt;acoth&lt;/code&gt; 、引数を &lt;code&gt;-i&lt;/code&gt; （負の虚数単位）にすることはできません。以下のために &lt;code&gt;tan&lt;/code&gt; 、 &lt;code&gt;sec&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; 、引数にすることはできません</target>
        </trans-unit>
        <trans-unit id="83159320f2b2918a98eed25d2752aaca30a22922" translate="yes" xml:space="preserve">
          <source>For the DynaLoader developer/porter there is a similar debugging variable added to the C code (see dlutils.c) and enabled if Perl was built with the &lt;b&gt;-DDEBUGGING&lt;/b&gt; flag. This can also be set via the PERL_DL_DEBUG environment variable. Set to 1 for minimal information or higher for more.</source>
          <target state="translated">DynaLoader開発者/移植者のために、Cコードに追加された同様のデバッグ変数（dlutils.cを参照）があり、Perlが&lt;b&gt;-DDEBUGGING&lt;/b&gt;フラグでビルドされた場合に有効になります。これは、PERL_DL_DEBUG環境変数を介して設定することもできます。最小限の情報の場合は1に設定し、詳細の場合は1以上に設定します。</target>
        </trans-unit>
        <trans-unit id="df6005966cffcf3e4fd44657df74e3aab23993c1" translate="yes" xml:space="preserve">
          <source>For the above line, the explanation is</source>
          <target state="translated">上の行の説明では</target>
        </trans-unit>
        <trans-unit id="1b868cb4c593515bd8834adf9737c636cf76ddff" translate="yes" xml:space="preserve">
          <source>For the block property, new-style block names are returned (see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;Old-style versus new-style block names&lt;/a&gt;).</source>
          <target state="translated">blockプロパティについては、新しいスタイルのブロック名が返されます（&lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;古いスタイルと新しいスタイルのブロック名を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2e62a0b0dfb533953b1b1d8670e578cf8cef3f43" translate="yes" xml:space="preserve">
          <source>For the constructs except here-docs, single characters are used as starting and ending delimiters. If the starting delimiter is an opening punctuation (that is &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, or &lt;code&gt;&amp;lt;&lt;/code&gt; ), the ending delimiter is the corresponding closing punctuation (that is &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt;). If the starting delimiter is an unpaired character like &lt;code&gt;/&lt;/code&gt; or a closing punctuation, the ending delimiter is the same as the starting delimiter. Therefore a &lt;code&gt;/&lt;/code&gt; terminates a &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; construct, while a &lt;code&gt;]&lt;/code&gt; terminates both &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq[]&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq]]&lt;/a&gt;&lt;/code&gt; constructs.</source>
          <target state="translated">ヒアドキュメント以外の構成要素の場合、単一の文字が開始および終了の区切り文字として使用されます。開始デリミタが開口句読点である場合（つまり &lt;code&gt;(&lt;/code&gt; 、 &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;{&lt;/code&gt; 、または &lt;code&gt;&amp;lt;&lt;/code&gt; ）、終了区切り文字は、対応する閉鎖句読点である（つまり &lt;code&gt;)&lt;/code&gt; 、 &lt;code&gt;]&lt;/code&gt; 、 &lt;code&gt;}&lt;/code&gt; 、または &lt;code&gt;&amp;gt;&lt;/code&gt; ）。開始区切り文字が &lt;code&gt;/&lt;/code&gt; などの対になっていない文字、または終了句読点の場合、終了区切り文字は開始区切り文字と同じです。したがって、 &lt;code&gt;/&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; 構文を終了し、 &lt;code&gt;]&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq[]&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq]]&lt;/a&gt;&lt;/code&gt; 両方を終了します] 構成。</target>
        </trans-unit>
        <trans-unit id="e4f199a5411adb8b18d5dcd3eca491b6d0afa516" translate="yes" xml:space="preserve">
          <source>For the details of the current situation with calling external programs, see &lt;a href=&quot;http://search.cpan.org/perldoc/Starting%20OS#2-(and-DOS)-programs-under-Perl&quot;&gt;2 (and DOS) programs under Perl in Starting OS&lt;/a&gt;. Set us mention a couple of features:</source>
          <target state="translated">外部プログラムの呼び出しに関する現在の状況の詳細については、「&lt;a href=&quot;http://search.cpan.org/perldoc/Starting%20OS#2-(and-DOS)-programs-under-Perl&quot;&gt;OSの起動」のPerlでの2（およびDOS）プログラムを&lt;/a&gt;参照してください。いくつかの機能について言及します。</target>
        </trans-unit>
        <trans-unit id="f1218216e6666aa08fea7db0711070bf940dc1b0" translate="yes" xml:space="preserve">
          <source>For the example above, this produces the key &quot;13 1 2 3 4 5 6 7&quot;.</source>
          <target state="translated">上の例では、これにより「13 1 2 3 4 5 6 7」というキーが生成されます。</target>
        </trans-unit>
        <trans-unit id="bbb3be8f56df5259eb022c810ec0d5fe6e171757" translate="yes" xml:space="preserve">
          <source>For the full and latest information about Unicode see the latest Unicode standard, or the Unicode Consortium's website &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;</source>
          <target state="translated">Unicodeに関する完全な最新情報については、最新のUnicode標準、またはUnicodeコンソーシアムのWebサイト&lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.orgを参照してください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8668a856ebdec95f7f9bedf605f00147e6a5c893" translate="yes" xml:space="preserve">
          <source>For the inverse cosine operation, you may use the &lt;code&gt;Math::Trig::acos()&lt;/code&gt; function, or use this relation:</source>
          <target state="translated">逆余弦演算では、 &lt;code&gt;Math::Trig::acos()&lt;/code&gt; 関数を使用するか、次の関係を使用できます。</target>
        </trans-unit>
        <trans-unit id="a905ba655e6e826aa1adf29366a4b3be68fc4622" translate="yes" xml:space="preserve">
          <source>For the inverse sine operation, you may use the &lt;code&gt;Math::Trig::asin&lt;/code&gt; function, or use this relation:</source>
          <target state="translated">逆正弦演算では、 &lt;code&gt;Math::Trig::asin&lt;/code&gt; 関数を使用するか、次の関係を使用できます。</target>
        </trans-unit>
        <trans-unit id="6876721cfa8799910e64a479d1896bac8905fc75" translate="yes" xml:space="preserve">
          <source>For the long explanation, see David Goldberg's &quot;What Every Computer Scientist Should Know About Floating-Point Arithmetic&quot; (&lt;a href=&quot;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&quot;&gt;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&lt;/a&gt;).</source>
          <target state="translated">詳しい説明については、David Goldbergの「すべてのコンピューター科学者が浮動小数点演算について知っておくべきこと」（&lt;a href=&quot;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&quot;&gt;http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="ab2b9b857d720a0495db321b12b78ce4f7c0fe32" translate="yes" xml:space="preserve">
          <source>For the most part, everything should just work.</source>
          <target state="translated">ほとんどの場合、すべてがうまくいくはずです。</target>
        </trans-unit>
        <trans-unit id="64bfdda2355e6cc7b725609cd6e4467f4aa79c60" translate="yes" xml:space="preserve">
          <source>For the most part, the &lt;b&gt;Pod::Parser&lt;/b&gt; base class should be able to do most of the input parsing for you and leave you free to worry about how to interpret the commands and translate the result.</source>
          <target state="translated">ほとんどの場合、&lt;b&gt;Pod :: Parser&lt;/b&gt;基本クラスは、入力解析のほとんどを実行でき、コマンドの解釈方法と結果の変換方法を自由に心配できます。</target>
        </trans-unit>
        <trans-unit id="9a0e7967ce42595fba722f8b428604ad3ef68e4c" translate="yes" xml:space="preserve">
          <source>For the pattern of regex operators (&lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;), the quoting from &lt;code&gt;\Q&lt;/code&gt; is applied after interpolation is processed, but before escapes are processed. This allows the pattern to match literally (except for &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; ). For example, the following matches:</source>
          <target state="translated">正規表現演算子（ &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; ）のパターンの場合、 &lt;code&gt;\Q&lt;/code&gt; からの引用は、補間が処理された後、エスケープが処理される前に適用されます。これにより、パターンが文字通り一致します（ &lt;code&gt;$&lt;/code&gt; および &lt;code&gt;@&lt;/code&gt; を除く）。たとえば、次のものが一致します。</target>
        </trans-unit>
        <trans-unit id="3962dca7589f77e8258212e6709cb6dc2b855dcb" translate="yes" xml:space="preserve">
          <source>For the purpose of inheritance every overloaded package behaves as if &lt;code&gt;fallback&lt;/code&gt; is present (possibly undefined). This may create interesting effects if some package is not overloaded, but inherits from two overloaded packages.</source>
          <target state="translated">継承の目的で、すべてのオーバーロードされたパッケージは、 &lt;code&gt;fallback&lt;/code&gt; が存在する（おそらく未定義）かのように動作します。これは、一部のパッケージがオーバーロードされていないが、2つのオーバーロードされたパッケージを継承している場合に興味深い効果を生み出す可能性があります。</target>
        </trans-unit>
        <trans-unit id="82c1e221649c157f620843ea4889acff34e37d34" translate="yes" xml:space="preserve">
          <source>For the purpose of this pragma, interpolation of precompiled regular expressions (i.e., the result of &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;) is</source>
          <target state="translated">このプラグマの目的のために、プリコンパイルされた正規表現（つまり、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 結果）の補間は</target>
        </trans-unit>
        <trans-unit id="ba3e421d172c8c68f6d89fe7339af35a2610b123" translate="yes" xml:space="preserve">
          <source>For the regular expression, /\bPerl\b/, there has to be a word boundary before the &quot;P&quot; and after the &quot;l&quot;. As long as something other than a word character precedes the &quot;P&quot; and succeeds the &quot;l&quot;, the pattern will match. These strings match /\bPerl\b/.</source>
          <target state="translated">正規表現である/\bPerl\b/は、「P」の前と「l」の後に単語の境界がある必要があります。単語の文字以外の何かが、「P」の前にあって、「l」の後に続く限り、パターンは一致する。これらの文字列は、/\bPerl\b/に一致します。</target>
        </trans-unit>
        <trans-unit id="6f420a434584dca0d2af03f0912dee0967b4dc89" translate="yes" xml:space="preserve">
          <source>For the reverse of stringifying, see the &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;emake&lt;/code&gt; .</source>
          <target state="translated">文字 &lt;code&gt;emake&lt;/code&gt; の逆については、 &lt;code&gt;make&lt;/code&gt; とemakeを参照してください。</target>
        </trans-unit>
        <trans-unit id="cb38c53d822d8e08d87924c605322b6766068193" translate="yes" xml:space="preserve">
          <source>For the reverse operation, we'll have to determine the number of items in the buffer before we can let &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; rip it apart:</source>
          <target state="translated">逆の操作については、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; で分解できるようにする前に、バッファー内のアイテム数を決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4dc883c9ac944705d2c3538c7663a30491ff44ec" translate="yes" xml:space="preserve">
          <source>For the reverse, see &lt;a href=&quot;#chr&quot;&gt;chr&lt;/a&gt;. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="translated">逆については、&lt;a href=&quot;#chr&quot;&gt;chrを&lt;/a&gt;参照してください。Unicodeの詳細については、&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="60cbf2eafc92f15723736c9c72868093d76361c9" translate="yes" xml:space="preserve">
          <source>For the reverse, see &lt;a href=&quot;chr&quot;&gt;chr&lt;/a&gt;. See &lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="translated">逆については、&lt;a href=&quot;chr&quot;&gt;chrを&lt;/a&gt;参照してください。Unicodeの詳細については、&lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="467ceafc8b99b23ed78b230316a1d2fd5db20386" translate="yes" xml:space="preserve">
          <source>For the reverse, use &lt;a href=&quot;#ord&quot;&gt;ord&lt;/a&gt;.</source>
          <target state="translated">逆の場合は、&lt;a href=&quot;#ord&quot;&gt;ordを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e6051659642df2e97b5594ae4ac7df1aad97530d" translate="yes" xml:space="preserve">
          <source>For the reverse, use &lt;a href=&quot;ord&quot;&gt;ord&lt;/a&gt;.</source>
          <target state="translated">逆の場合は、&lt;a href=&quot;ord&quot;&gt;ordを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d7f75a65f093671232956735031c2585d37439c1" translate="yes" xml:space="preserve">
          <source>For the rounding mode, see &lt;a href=&quot;#fegetround&quot;&gt;fegetround&lt;/a&gt;.</source>
          <target state="translated">丸めモードについては、&lt;a href=&quot;#fegetround&quot;&gt;fegetroundを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="94a7023212a15791913a95ba1c43764471fafd45" translate="yes" xml:space="preserve">
          <source>For the sake of speed and efficiency, most of the encodings are now supported via a</source>
          <target state="translated">速度と効率のために、現在ではほとんどのエンコーディングが</target>
        </trans-unit>
        <trans-unit id="ad21271dd49f14dc112f37ba2aaf54b53f9fb3d0" translate="yes" xml:space="preserve">
          <source>For the sake of speed for a common case, in the above algorithms backslashes in the command name are not considered as shell metacharacters.</source>
          <target state="translated">一般的なケースでの高速化のため、上記のアルゴリズムでは、コマンド名のバックスラッシュはシェルのメタキャラクタとはみなされません。</target>
        </trans-unit>
        <trans-unit id="13bb8b6279ccfe0d9f624beb9c39acf42987a9f6" translate="yes" xml:space="preserve">
          <source>For the tangent operation, you may use the &lt;code&gt;Math::Trig::tan&lt;/code&gt; function, or use the familiar relation:</source>
          <target state="translated">正接演算には、 &lt;code&gt;Math::Trig::tan&lt;/code&gt; 関数を使用するか、使い慣れた関係を使用します。</target>
        </trans-unit>
        <trans-unit id="2285c9ff17a7e14c88876a7216e0b2f44e88a62a" translate="yes" xml:space="preserve">
          <source>For the time being, any necessary padding must be done by the user. Fortunately, this is a simple operation: if the length of a Base64-encoded digest isn't a multiple of 4, simply append &quot;=&quot; characters to the end of the digest until it is:</source>
          <target state="translated">当面の間、必要なパディングはユーザーが行わなければなりません。幸いなことに、これは簡単な操作です:Base64でエンコードされたダイジェストの長さが4の倍数でない場合、ダイジェストの最後に&quot;=&quot;文字を追加するだけで、4の倍数になるまで続けることができます。</target>
        </trans-unit>
        <trans-unit id="08b2d3f59edd8b61350507d43c91115b5897da2d" translate="yes" xml:space="preserve">
          <source>For the various values of PERLIO see &lt;a href=&quot;perlrun#PERLIO&quot;&gt;PERLIO in perlrun&lt;/a&gt;.</source>
          <target state="translated">PERLIOのさまざまな値については、perlrunのPERLIOを参照&lt;a href=&quot;perlrun#PERLIO&quot;&gt;してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8844b265400f6667c325f1ddff5acf01441d43a0" translate="yes" xml:space="preserve">
          <source>For these purposes &quot;formats&quot; are a kind-of CV; eval&quot;&quot;s are too (except they're not callable at will and are always thrown away after the eval&quot;&quot; is done executing). Require'd files are simply evals without any outer lexical scope.</source>
          <target state="translated">これらの目的のためには、&quot;format &quot;は一種のCVであり、eval&quot;&quot;sも同様です(ただし、それらは自由に呼び出すことができず、eval&quot;&quot;sの実行が終わった後は常に捨てられます)。Require'dファイルは、外部の辞書的スコープを持たない単なるevalです。</target>
        </trans-unit>
        <trans-unit id="ce3d10f5200fd9f35eb39a2e2f3aff9e21a56d2a" translate="yes" xml:space="preserve">
          <source>For this discussion, we'll implement an array whose elements are a fixed size at creation. If you try to create an element larger than the fixed size, you'll take an exception. For example:</source>
          <target state="translated">今回は、要素のサイズが固定されている配列を実装します。固定サイズよりも大きな要素を作成しようとすると、例外が発生します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="5ffd7f12ddaa1b6fb60aa095946c012384bca946" translate="yes" xml:space="preserve">
          <source>For this grouping operator there is no need to describe the ordering, since only whether or not &lt;code&gt;S&lt;/code&gt; can match is important.</source>
          <target state="translated">このグループ化演算子では、 &lt;code&gt;S&lt;/code&gt; が一致できるかどうかのみが重要であるため、順序を記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="cc327a8066a607761f2f00ba1baa6fe5fc670e29" translate="yes" xml:space="preserve">
          <source>For this particular case an INIT: keyword would generate the same C code as the PREINIT: keyword. Another correct, but error-prone example:</source>
          <target state="translated">この特定のケースでは、INIT:キーワードは PREINIT:キーワードと同じ C コードを生成します。もう一つの正しい例ですが、エラーが発生しやすい例です。</target>
        </trans-unit>
        <trans-unit id="145862e7b4274977f12fe15b3504a6befbd27f0c" translate="yes" xml:space="preserve">
          <source>For this reason, Unicode strings need to be converted to UTF-8-encoded bytestrings before they are handed off to &lt;code&gt;add_data()&lt;/code&gt; :</source>
          <target state="translated">このため、Unicode文字列を &lt;code&gt;add_data()&lt;/code&gt; に渡す前に、UTF-8でエンコードされたバイト文字列に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="d2b9d5527f46d12ea221667541772074c58883c4" translate="yes" xml:space="preserve">
          <source>For this reason, the use of &lt;code&gt;END&lt;/code&gt; blocks in threads is &lt;b&gt;strongly&lt;/b&gt; discouraged.</source>
          <target state="translated">このため、使用 &lt;code&gt;END&lt;/code&gt; のスレッドでブロックがされて&lt;b&gt;、強く&lt;/b&gt;がっかり。</target>
        </trans-unit>
        <trans-unit id="6e04b91b7b687e03cffdfdf3a54823d050aa6f6b" translate="yes" xml:space="preserve">
          <source>For this to happen, the class must not be inverted (see &lt;a href=&quot;#Negation&quot;&gt;Negation&lt;/a&gt;) and the character must be explicitly specified, and not be part of a multi-character range (not even as one of its endpoints). (&lt;a href=&quot;#Character-Ranges&quot;&gt;Character Ranges&lt;/a&gt; will be explained shortly.) Therefore,</source>
          <target state="translated">これが発生するためには、クラスが反転されてはならず（&lt;a href=&quot;#Negation&quot;&gt;否定を&lt;/a&gt;参照）、文字は明示的に指定されており、複数文字の範囲の一部ではありません（そのエンドポイントの1つとしても）。（&lt;a href=&quot;#Character-Ranges&quot;&gt;文字範囲&lt;/a&gt;については後で説明します。）したがって、</target>
        </trans-unit>
        <trans-unit id="e5f1c25c243913e44f46f14a2a6685401a32ac3f" translate="yes" xml:space="preserve">
          <source>For those grammatical pedants out there, there's an &lt;code&gt;isn't()&lt;/code&gt; function which is an alias of &lt;code&gt;isnt()&lt;/code&gt; .</source>
          <target state="translated">そこにそれらの文法的pedantsのため、あります &lt;code&gt;isn't()&lt;/code&gt; の別名である機能 &lt;code&gt;isnt()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0194baebcc4ad338a3d27044bda911227e0fa177" translate="yes" xml:space="preserve">
          <source>For those of you who don't like additional global variables being created, &lt;code&gt;getopt()&lt;/code&gt; and &lt;code&gt;getopts()&lt;/code&gt; will also accept a hash reference as an optional second argument. Hash keys will be &lt;code&gt;x&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is the switch name) with key values the value of the argument or &lt;code&gt;1&lt;/code&gt; if no argument is specified.</source>
          <target state="translated">追加のグローバル変数を作成したくない場合は、 &lt;code&gt;getopt()&lt;/code&gt; と &lt;code&gt;getopts()&lt;/code&gt; もオプションの2番目の引数としてハッシュ参照を受け入れます。ハッシュキーは &lt;code&gt;x&lt;/code&gt; （ &lt;code&gt;x&lt;/code&gt; はスイッチ名）で、キーの値は引数の値、引数が指定されていない場合は &lt;code&gt;1&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="9b7b01e9b9a30ca0a332a8ff42ff01fc2ab10b42" translate="yes" xml:space="preserve">
          <source>For those preferring a higher-level interface to socket programming, the IO::Socket module provides an object-oriented approach. If for some reason you lack this module, you can just fetch IO::Socket from CPAN, where you'll also find modules providing easy interfaces to the following systems: DNS, FTP, Ident (RFC 931), NIS and NISPlus, NNTP, Ping, POP3, SMTP, SNMP, SSLeay, Telnet, and Time--to name just a few.</source>
          <target state="translated">ソケットプログラミングへの高レベルなインターフェースを好む人のために、IO::Socketモジュールはオブジェクト指向のアプローチを提供します。何らかの理由でこのモジュールが不足している場合は、CPANからIO::Socketを取得してください。DNS、FTP、Ident (RFC 931)、NIS と NISPlus、NNTP、Ping、POP3、SMTP、SNMP、SSLeay、Telnet、Timeなどです。</target>
        </trans-unit>
        <trans-unit id="e42062d65775a1867386b08263976fa1b5777e72" translate="yes" xml:space="preserve">
          <source>For those times when it is necessary to have platform-specific code, consider keeping the platform-specific code in one place, making porting to other platforms easier. Use the &lt;code&gt;Config&lt;/code&gt; module and the special variable &lt;code&gt;$^O&lt;/code&gt; to differentiate platforms, as described in &lt;a href=&quot;#PLATFORMS&quot;&gt;PLATFORMS&lt;/a&gt;.</source>
          <target state="translated">プラットフォーム固有のコードが必要な場合は、プラットフォーム固有のコードを1か所にまとめ、他のプラットフォームへの移植を容易にすることを検討してください。&lt;a href=&quot;#PLATFORMS&quot;&gt;PLATFORMSで&lt;/a&gt;説明されているように、 &lt;code&gt;Config&lt;/code&gt; モジュールと特殊変数 &lt;code&gt;$^O&lt;/code&gt; を使用してプラットフォームを区別します。</target>
        </trans-unit>
        <trans-unit id="84af40bcdd6cb4fcbd3aceb5a4aa3593a23036aa" translate="yes" xml:space="preserve">
          <source>For those to work, the Pod-processing subclass of Pod::Simple::PullParser has to have defined a $parser-&amp;gt;run method -- so it is advised that all Pod::Simple::PullParser subclasses do so. See the Synopsis above, or the source for Pod::Simple::RTF.</source>
          <target state="translated">それらが機能するためには、Pod :: Simple :: PullParserのPod-processingサブクラスで$ parser-&amp;gt; runメソッドが定義されている必要があります。そのため、すべてのPod :: Simple :: PullParserサブクラスで定義することをお勧めします。上記の概要またはPod :: Simple :: RTFのソースを参照してください。</target>
        </trans-unit>
        <trans-unit id="57708cdc23a61a116a94a02091f20a5743825ee2" translate="yes" xml:space="preserve">
          <source>For those variables that have an &lt;b&gt;awk&lt;/b&gt; version, both long and short English alternatives are provided. For example, the &lt;code&gt;$/&lt;/code&gt; variable can be referred to either $RS or $INPUT_RECORD_SEPARATOR if you are using the English module.</source>
          <target state="translated">&lt;b&gt;awk&lt;/b&gt;バージョンを持つ変数については、英語の長い代替案と短い代替案の両方が提供されています。たとえば、英語モジュールを使用している場合、 &lt;code&gt;$/&lt;/code&gt; 変数は$ RSまたは$ INPUT_RECORD_SEPARATORのいずれかを参照できます。</target>
        </trans-unit>
        <trans-unit id="d9a0a89c68e7b08863ca5af8b26671ca9622ae82" translate="yes" xml:space="preserve">
          <source>For thread safety, modules should not write directly to this array. Instead, use the function &lt;a href=&quot;#wrap_op_checker&quot;&gt;wrap_op_checker&lt;/a&gt;.</source>
          <target state="translated">スレッドセーフのために、モジュールはこの配列に直接書き込むべきではありません。代わりに、関数&lt;a href=&quot;#wrap_op_checker&quot;&gt;wrap_op_checkerを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="5cacce03e577b17c33a4569c50a9b7a97dcf2d96" translate="yes" xml:space="preserve">
          <source>For threaded builds, perl requires the context pointer for the current thread, without &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; , perl will call a function to retrieve the context.</source>
          <target state="translated">スレッドビルドの場合、perlは現在のスレッドのコンテキストポインターを必要とします &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; なしでは、perlはコンテキストを取得する関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5847b93f0e1805fa116eb823dc4911eae257671b" translate="yes" xml:space="preserve">
          <source>For three or more arguments if MODE is &lt;code&gt;|-&lt;/code&gt; , the filename is interpreted as a command to which output is to be piped, and if MODE is &lt;code&gt;-|&lt;/code&gt; , the filename is interpreted as a command that pipes output to us. In the two-argument (and one-argument) form, one should replace dash (&lt;code&gt;-&lt;/code&gt; ) with the command. See &lt;a href=&quot;../perlipc#Using-open()-for-IPC&quot;&gt;Using open() for IPC in perlipc&lt;/a&gt; for more examples of this. (You are not allowed to &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; to a command that pipes both in</source>
          <target state="translated">3つ以上の引数の場合、MODEが &lt;code&gt;|-&lt;/code&gt; の場合、ファイル名は出力がパイプされるコマンドとして解釈され、MODEが &lt;code&gt;-|&lt;/code&gt; の場合 、ファイル名は出力をパイプするコマンドとして解釈されます。2つの引数（および1つの引数）の形式では、ダッシュ（ &lt;code&gt;-&lt;/code&gt; ）をコマンドに置き換える必要があります。この例については&lt;a href=&quot;../perlipc#Using-open()-for-IPC&quot;&gt;、perlipc&lt;/a&gt;でIPCにopen（）を使用するをご覧ください。（両方をパイプするコマンドを &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ことはできません</target>
        </trans-unit>
        <trans-unit id="6dd4431238a703da90497fd4857cf48e6171b713" translate="yes" xml:space="preserve">
          <source>For three or more arguments if MODE is &lt;code&gt;|-&lt;/code&gt;, the filename is interpreted as a command to which output is to be piped, and if MODE is &lt;code&gt;-|&lt;/code&gt;, the filename is interpreted as a command that pipes output to us. In the two-argument (and one-argument) form, one should replace dash (&lt;code&gt;-&lt;/code&gt; ) with the command. See &lt;a href=&quot;perlipc#Using-open()-for-IPC&quot;&gt;Using open() for IPC in perlipc&lt;/a&gt; for more examples of this. (You are not allowed to &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; to a command that pipes both in</source>
          <target state="translated">3つ以上の引数の場合、MODEが &lt;code&gt;|-&lt;/code&gt; の場合、ファイル名は出力がパイプされるコマンドとして解釈され、MODEが &lt;code&gt;-|&lt;/code&gt; の場合、ファイル名は出力をパイプするコマンドとして解釈されます。 2つの引数（および1つの引数）の形式では、ダッシュ（ &lt;code&gt;-&lt;/code&gt; ）をコマンドに置き換える必要があります。この例については&lt;a href=&quot;perlipc#Using-open()-for-IPC&quot;&gt;、perlipc&lt;/a&gt;でIPCにopen（）を使用するをご覧ください。 （両方をパイプするコマンドを &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ことはできません</target>
        </trans-unit>
        <trans-unit id="bf83195223f53cdba1b00e5a9f41ecd342d04331" translate="yes" xml:space="preserve">
          <source>For typed lexicals PadnameTYPE points at the type stash. For &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; lexicals, PadnameOURSTASH points at the stash of the associated global (so that duplicate &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; declarations in the same package can be detected). PadnameGEN is sometimes used to store the generation number during compilation.</source>
          <target state="translated">型付き語彙の場合、PadnameTYPEはstash型を指します。以下のために &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; レキシカル、関連するグローバルのスタッシュのPadnameOURSTASHポイント（つまり、重複して &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 同一パッケージ内の宣言を検出することができます）。PadnameGENは、コンパイル時に世代番号を格納するために使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="91986aaa66a7c1fc5ea1ae9b7846d756f92bfc49" translate="yes" xml:space="preserve">
          <source>For various reasons &lt;code&gt;\K&lt;/code&gt; may be significantly more efficient than the equivalent &lt;code&gt;(?&amp;lt;=...)&lt;/code&gt; construct, and it is especially useful in situations where you want to efficiently remove something following something else in a string. For instance</source>
          <target state="translated">さまざまな理由により、 &lt;code&gt;\K&lt;/code&gt; は同等の &lt;code&gt;(?&amp;lt;=...)&lt;/code&gt; 構成よりもはるかに効率的である可能性があり、文字列内の他の何かに続くものを効率的に削除したい状況で特に役立ちます。例えば</target>
        </trans-unit>
        <trans-unit id="177cf62cd78233abf54102693c9e9acbadd8394b" translate="yes" xml:space="preserve">
          <source>For versions &amp;lt; 5.6.0, the changes are. - no use of 'our' (uses 'use vars' instead) - no 'use warnings'</source>
          <target state="translated">バージョン5.6.0未満の場合、変更は次のとおりです。-'our'の使用なし（代わりに 'use vars'を使用）-'use warnings'なし</target>
        </trans-unit>
        <trans-unit id="60941c7eb5c54adfbab7ac22e457a8c4e15f2100" translate="yes" xml:space="preserve">
          <source>For writing RFC 1950 files/buffers, see the companion module IO::Compress::Deflate.</source>
          <target state="translated">RFC 1950 のファイル/バッファの書き方については、コンパニオンモジュール IO::Compress::Deflate を参照してください。</target>
        </trans-unit>
        <trans-unit id="685182a7768729bc793033bd0e68d3c4f3af5f73" translate="yes" xml:space="preserve">
          <source>For writing RFC 1951 files/buffers, see the companion module IO::Compress::RawDeflate.</source>
          <target state="translated">RFC 1951 のファイル/バッファの書き込みについては、コンパニオンモジュール IO::Compress::RawDeflate を参照してください。</target>
        </trans-unit>
        <trans-unit id="9243b703bb54f6641362690a1ee88fd13adf9954" translate="yes" xml:space="preserve">
          <source>For writing RFC 1952 files/buffers, see the companion module IO::Compress::Gzip.</source>
          <target state="translated">RFC 1952 のファイル/バッファの書き方については、コンパニオンモジュール IO::Compress::Gzip を参照してください。</target>
        </trans-unit>
        <trans-unit id="9bf658d02b726edd2f1c254066ded7736fd6d5a9" translate="yes" xml:space="preserve">
          <source>For writing bzip2 files/buffers, see the companion module IO::Compress::Bzip2.</source>
          <target state="translated">bzip2 ファイル/バッファの書き込みについては、コンパニオンモジュール IO::Compress::Bzip2 を参照してください。</target>
        </trans-unit>
        <trans-unit id="e13d75b855f37f1330f6f4c1ef3a45768526e035" translate="yes" xml:space="preserve">
          <source>For writing zip files/buffers, see the companion module IO::Compress::Zip.</source>
          <target state="translated">zip ファイル/バッファの書き込みについては、コンパニオンモジュール IO::Compress::Zip を参照してください。</target>
        </trans-unit>
        <trans-unit id="535406d475920b171aa234460dc25648f86b16d6" translate="yes" xml:space="preserve">
          <source>For your convenience, Perl has added the &lt;code&gt;Non_Canonical&lt;/code&gt; decomposition type to mean any of the several compatibility decompositions.</source>
          <target state="translated">便宜上、Perlはいくつかの互換性分解のいずれかを意味する &lt;code&gt;Non_Canonical&lt;/code&gt; 分解タイプを追加しています。</target>
        </trans-unit>
        <trans-unit id="53ad46f1c41b22f84b5d3b3f5d59b0ffd2ec8775" translate="yes" xml:space="preserve">
          <source>For your convenience, Perl sets up a few special filehandles that are already open when you run. These include &lt;code&gt;STDIN&lt;/code&gt; , &lt;code&gt;STDOUT&lt;/code&gt; , &lt;code&gt;STDERR&lt;/code&gt; , and &lt;code&gt;ARGV&lt;/code&gt; . Since those are pre-opened, you can use them right away without having to go to the trouble of opening them yourself:</source>
          <target state="translated">便宜上、Perlは実行時にすでに開いているいくつかの特別なファイルハンドルを設定します。これらには、 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; 、 &lt;code&gt;STDERR&lt;/code&gt; 、および &lt;code&gt;ARGV&lt;/code&gt; が含まれます。それらは事前に開かれているので、自分で開く手間をかけずにすぐに使用できます。</target>
        </trans-unit>
        <trans-unit id="30e11a0cc028d202d8463cc9e66bddef5da4b46a" translate="yes" xml:space="preserve">
          <source>For, begin, and end will let you have regions of text/code/data that are not generally interpreted as normal Pod text, but are passed directly to particular formatters, or are otherwise special. A formatter that can use that format will use the region, otherwise it will be completely ignored.</source>
          <target state="translated">For,begin,endを使用すると、一般的には通常のPodテキストとして解釈されないが、特定のフォーマッタに直接渡されたり、その他の特殊なテキスト/コード/データのリージョンを持つことができます。そのフォーマットを使用できるフォーマッタはそのリージョンを使用しますが、そうでない場合は完全に無視されます。</target>
        </trans-unit>
        <trans-unit id="75b520175307f045a1bd5432ec6c11ebe784b1ea" translate="yes" xml:space="preserve">
          <source>Force a title for the page (don't try to determine it from the content). The value of this string should already be &amp;amp;-escaped.</source>
          <target state="translated">ページのタイトルを強制します（コンテンツからそれを決定しようとしないでください）。この文字列の値は、すでにエスケープされているはずです。</target>
        </trans-unit>
        <trans-unit id="000583668b82be86fbb138b24c7dd36579b394a2" translate="yes" xml:space="preserve">
          <source>Force bsd_glob() to return an error when it encounters a directory it cannot open or read. Ordinarily bsd_glob() continues to find matches.</source>
          <target state="translated">bsd_glob()が、開いたり読んだりできないディレクトリに遭遇した場合にエラーを返すようにしました。通常は bsd_glob()はマッチするディレクトリを見つけ続けます。</target>
        </trans-unit>
        <trans-unit id="f44e8f61765329d123a6aeba46d29dc380866fc3" translate="yes" xml:space="preserve">
          <source>Force byte semantics rather than character semantics</source>
          <target state="translated">文字セマンティクスではなく、バイトセマンティクスを強制する</target>
        </trans-unit>
        <trans-unit id="e13bf2b7599ac8779de2f3726115bde91fbbaded" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task it would normally refuse to do. Force takes as arguments a method name to be invoked and any number of additional arguments to pass that method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">通常は拒否するタスクをCPANに強制的に実行させます。Forceは、呼び出されるメソッド名と、そのメソッドを渡すための追加の引数を引数として受け取ります。オブジェクトの内部は必要な変更を取得するため、CPAN.pmはアクションの実行を拒否しません。上記の &lt;code&gt;force&lt;/code&gt; および &lt;code&gt;fforce&lt;/code&gt; プラグマのセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="6824e435b9c0d512ec0dbbda74a3d74da3f722c9" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task that it normally would have refused to do. Force takes as arguments a method name to be called and any number of additional arguments that should be passed to the called method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">CPANに、通常は拒否するタスクを強制的に実行させます。Forceは、呼び出されるメソッド名と、呼び出されたメソッドに渡す必要がある追加の引数を引数として受け取ります。オブジェクトの内部は必要な変更を取得するため、CPAN.pmはアクションの実行を拒否しません。上記の &lt;code&gt;force&lt;/code&gt; および &lt;code&gt;fforce&lt;/code&gt; プラグマのセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="5c9a0d4c05ea685c4b81ce563d38fd33d0aeea12" translate="yes" xml:space="preserve">
          <source>Forces CPAN to perform a task that it normally would have refused to do. Force takes as arguments a method name to be called and any number of additional arguments that should be passed to the called method. The internals of the object get the needed changes so that CPAN.pm does not refuse to take the action. The &lt;code&gt;force&lt;/code&gt; is passed recursively to all contained objects. See also the section above on the &lt;code&gt;force&lt;/code&gt; and the &lt;code&gt;fforce&lt;/code&gt; pragma.</source>
          <target state="translated">CPANに、通常は拒否するタスクを強制的に実行させます。 Forceは、呼び出されるメソッド名と、呼び出されたメソッドに渡す必要がある追加の引数を引数として受け取ります。オブジェクトの内部は必要な変更を取得するため、CPAN.pmはアクションの実行を拒否しません。 &lt;code&gt;force&lt;/code&gt; すべて含まれているオブジェクトに再帰的に渡されます。上記の &lt;code&gt;force&lt;/code&gt; および &lt;code&gt;fforce&lt;/code&gt; プラグマのセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="f116ab22ad8af5d1edf47652c0fde4ebe02b3188" translate="yes" xml:space="preserve">
          <source>Forces EXPR to be interpreted in scalar context and returns the value of EXPR.</source>
          <target state="translated">EXPRを強制的にスカラコンテキストで解釈し、EXPRの値を返します。</target>
        </trans-unit>
        <trans-unit id="500df2d2fe4d1817ceeca100a5e6d863aec7944d" translate="yes" xml:space="preserve">
          <source>Forces a reload of all indices.</source>
          <target state="translated">すべてのインデックスのリロードを強制的に行います。</target>
        </trans-unit>
        <trans-unit id="ec27ff3ecad1733cd6196463fe06ab0d70361cc8" translate="yes" xml:space="preserve">
          <source>Forcing AutoLoader to Load a Function</source>
          <target state="translated">オートローダーに関数を強制的にロードさせる</target>
        </trans-unit>
        <trans-unit id="4a87f71febe991ae2954e6d639d10481ac9e6d2d" translate="yes" xml:space="preserve">
          <source>Forcing Unicode in Perl (Or Unforcing Unicode in Perl)</source>
          <target state="translated">Perl での強制 Unicode (または Perl での強制 Unicode の解除)</target>
        </trans-unit>
        <trans-unit id="fa74775094fcf161164e8e879c58a4b633ace5dd" translate="yes" xml:space="preserve">
          <source>Forcing a Stack Trace</source>
          <target state="translated">スタックトレースの強制</target>
        </trans-unit>
        <trans-unit id="f6c5999fd3e671fe9fe9df464e28ef5ab21206ca" translate="yes" xml:space="preserve">
          <source>Forcing big- or little-endian byte-order on floating-point values for data exchange can work only if all platforms use the same binary representation such as IEEE floating-point. Even if all platforms are using IEEE, there may still be subtle differences. Being able to use &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; on floating-point values can be useful, but also dangerous if you don't know exactly what you're doing. It is not a general way to portably store floating-point values.</source>
          <target state="translated">データ交換のために浮動小数点値にビッグエンディアンまたはリトルエンディアンのバイト順を強制することは、すべてのプラットフォームがIEEE浮動小数点などの同じバイナリ表現を使用する場合にのみ機能します。すべてのプラットフォームがIEEEを使用している場合でも、微妙な違いがある可能性があります。浮動小数点値で &lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; を使用できると便利ですが、何をしているのか正確に知らない場合は危険です。浮動小数点値を移植可能に格納する一般的な方法ではありません。</target>
        </trans-unit>
        <trans-unit id="4fbdd84d18aabd3608a03167cf0b04d250e02a5e" translate="yes" xml:space="preserve">
          <source>Foreach Loops</source>
          <target state="translated">フォアリーチループ</target>
        </trans-unit>
        <trans-unit id="cac22bd0e8a69bd849b7be8d79bbdfbf8b44d9d5" translate="yes" xml:space="preserve">
          <source>Forking</source>
          <target state="translated">Forking</target>
        </trans-unit>
        <trans-unit id="3142b84bb5d35f3314b7947362fd81b2dce6a441" translate="yes" xml:space="preserve">
          <source>Forking pipe open() constructs will be supported in future.</source>
          <target state="translated">Forking pipe open()コンストラクトは将来的にサポートされる予定です。</target>
        </trans-unit>
        <trans-unit id="c82bb36a64035b3b3d413194135e78450e65b2bf" translate="yes" xml:space="preserve">
          <source>Format Pod as RTF</source>
          <target state="translated">PodをRTFとしてフォーマットする</target>
        </trans-unit>
        <trans-unit id="fee1af11bb1eb0f8161a549c43ed448ab786fe6a" translate="yes" xml:space="preserve">
          <source>Format Pod as plaintext</source>
          <target state="translated">Podをプレーンテキストとしてフォーマットする</target>
        </trans-unit>
        <trans-unit id="7740187b3e5d9aaa6412746917f4e8aaed9600e7" translate="yes" xml:space="preserve">
          <source>Format Pod as validating XHTML</source>
          <target state="translated">XHTMLを検証するようにPodをフォーマットする</target>
        </trans-unit>
        <trans-unit id="13163280307f8765d0afe577cafca7728ff8779c" translate="yes" xml:space="preserve">
          <source>Format Variables</source>
          <target state="translated">フォーマット変数</target>
        </trans-unit>
        <trans-unit id="3a1ad455810d4298663c009286d3773850b6eb92" translate="yes" xml:space="preserve">
          <source>Format defined.</source>
          <target state="translated">フォーマットが定義されています。</target>
        </trans-unit>
        <trans-unit id="45682ea5e61958bde7db300ab1675b68475b3238" translate="yes" xml:space="preserve">
          <source>Format the output with ANSI color escape sequences. Using this option requires that Term::ANSIColor be installed on your system.</source>
          <target state="translated">ANSIカラーエスケープシーケンスで出力をフォーマットします。このオプションを使用するには、Term::ANSIColorがシステムにインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="d1b6f323b8fa9a716a3f6f4fbd038ac4ec784196" translate="yes" xml:space="preserve">
          <source>Format the output with overstrike printing. Bold text is rendered as character, backspace, character. Italics and file names are rendered as underscore, backspace, character. Many pagers, such as &lt;b&gt;less&lt;/b&gt;, know how to convert this to bold or underlined text.</source>
          <target state="translated">上書き印刷で出力をフォーマットします。太字のテキストは、文字、バックスペース、文字としてレンダリングされます。イタリックとファイル名は、アンダースコア、バックスペース、文字として表示されます。&lt;b&gt;less&lt;/b&gt;などの多くのポケットベルは、これを太字または下線付きのテキストに変換する方法を知っています。</target>
        </trans-unit>
        <trans-unit id="0070c0e56a4846d0ff72c495dfd2d1f1c3c98911" translate="yes" xml:space="preserve">
          <source>Formats and prints the specified arguments to &lt;code&gt;STDOUT&lt;/code&gt; . See also &lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;.</source>
          <target state="translated">指定した引数をフォーマットして &lt;code&gt;STDOUT&lt;/code&gt; に出力します。&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="a3359bd12a9edc6e1c703375835a3905e7b83f91" translate="yes" xml:space="preserve">
          <source>Formats, like packages and subroutines, are declared rather than executed, so they may occur at any point in your program. (Usually it's best to keep them all together though.) They have their own namespace apart from all the other &quot;types&quot; in Perl. This means that if you have a function named &quot;Foo&quot;, it is not the same thing as having a format named &quot;Foo&quot;. However, the default name for the format associated with a given filehandle is the same as the name of the filehandle. Thus, the default format for STDOUT is named &quot;STDOUT&quot;, and the default format for filehandle TEMP is named &quot;TEMP&quot;. They just look the same. They aren't.</source>
          <target state="translated">パッケージやサブルーチンのようなフォーマットは、実行されるのではなく宣言されます。(通常、これらはすべて一緒にしておくのがベストですが)これらは Perl の他のすべての「型」とは別に、独自の名前空間を持っています。つまり、&quot;Foo &quot;という名前の関数があっても、&quot;Foo &quot;という名前のフォーマットがあるのと同じではないということです。しかし、与えられたファイルハンドルに関連付けられたフォーマットのデフォルト名は、ファイルハンドルの名前と同じです。したがって、STDOUTのデフォルトフォーマットは &quot;STDOUT &quot;と名付けられ、ファイルハンドルTEMPのデフォルトフォーマットは &quot;TEMP &quot;と名付けられます。同じように見えますが、そうではありません。同じではありません。</target>
        </trans-unit>
        <trans-unit id="7065a0ba158c8bf72a9807e17d920ae802c062cf" translate="yes" xml:space="preserve">
          <source>Formatted Printing of IVs, UVs, and NVs</source>
          <target state="translated">IV、UV、NVのフォーマット印刷</target>
        </trans-unit>
        <trans-unit id="7de31570e601ac2cf7d8ef74834052348b7c4a16" translate="yes" xml:space="preserve">
          <source>Formatters may also choose to note errors/warnings as comments, besides or instead of emitting them otherwise (as in messages to STDERR, or &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;ing).</source>
          <target state="translated">フォーマッターは、エラーまたは警告をコメントとして、他に（またはSTDERRへのメッセージや &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; ように）送信する代わりに、コメントとして選択することもできます。</target>
        </trans-unit>
        <trans-unit id="4dc6255b00d803dd218371c361f3f87de9be4719" translate="yes" xml:space="preserve">
          <source>Formatters may also insert additional comments, including: the release date of the Pod formatter program, the contact address for the author(s) of the formatter, the current time, the name of input file, the formatting options in effect, version of Perl used, etc.</source>
          <target state="translated">フォーマッタは、Podフォーマッタプログラムのリリース日、フォーマッタ作成者の連絡先、現在の時刻、入力ファイル名、有効なフォーマットオプション、使用したPerlのバージョンなど、追加のコメントを挿入することもできます。</target>
        </trans-unit>
        <trans-unit id="6d3ccf37c71280b1f96c4a2ec7fbdbe45afef9e1" translate="yes" xml:space="preserve">
          <source>Formatters may choose to ignore the markup for purposes of resolving the link and use only the renderable characters in the section name, as in:</source>
          <target state="translated">フォーマッタは、リンクを解決する目的でマークアップを無視して、セクション名の中でレンダリング可能な文字だけを使用することを選択することができます。</target>
        </trans-unit>
        <trans-unit id="a4aca088317275f96f5f54edc120b828492554a8" translate="yes" xml:space="preserve">
          <source>Formatters may choose to just not support the S format code, especially in cases where the output format simply has no NBSP character/code and no code for &quot;don't break this stuff across lines&quot;.</source>
          <target state="translated">フォーマッタはSフォーマットコードをサポートしないことを選択するかもしれません。特に、出力フォーマットが単純にNBSP文字/コードを持たず、&quot;行をまたいでこれを壊さないでください &quot;というコードを持たない場合には。</target>
        </trans-unit>
        <trans-unit id="699f62e78d3e814aa9e7d06b34b37d145e111b38" translate="yes" xml:space="preserve">
          <source>Formatting Codes</source>
          <target state="translated">書式化コード</target>
        </trans-unit>
        <trans-unit id="ff5d2a34321adb03892b713850bf4a3ad301ed8c" translate="yes" xml:space="preserve">
          <source>Formatting base class</source>
          <target state="translated">基底クラスの書式設定</target>
        </trans-unit>
        <trans-unit id="ff9c8d057ff674339898e634f59656ac3a52e2b6" translate="yes" xml:space="preserve">
          <source>Formatting codes absolutely cannot span paragraphs. If a code is opened in one paragraph, and no closing code is found by the end of that paragraph, the Pod parser must close that formatting code, and should complain (as in &quot;Unterminated I code in the paragraph starting at line 123: 'Time objects are not...'&quot;). So these two paragraphs:</source>
          <target state="translated">組版コードは絶対に段落にまたがってはいけません。もしある段落でコードが開かれていて、その段落の最後までに終了コードが見つからなかった場合、Podパーサはその書式設定コードを閉じなければならず、文句を言わなければなりません(&quot;Unterminated I code in the paragraph started at line 123:'Time objects is not....'のように)。つまり、この2つの段落。</target>
        </trans-unit>
        <trans-unit id="7b18147368e5bdc22767f902bd572f166454ac0e" translate="yes" xml:space="preserve">
          <source>Formerly &quot;ji&quot;. Usually in Hebrew script.</source>
          <target state="translated">以前は「ジ」。通常はヘブライ文字で。</target>
        </trans-unit>
        <trans-unit id="57f396d4904134a67c253fe83cd6c2ee5405024e" translate="yes" xml:space="preserve">
          <source>Formerly, a reference to an array whose initial element happens to hold a reference to a hash. You used to be able to treat a pseudohash reference as either an array reference or a hash reference. Pseduohashes are no longer supported.</source>
          <target state="translated">以前は、初期要素がハッシュへの参照を保持している配列への参照でした。以前は擬似ハッシュ参照を配列参照またはハッシュ参照として扱うことができましたが、現在はサポートされていません。擬似ハッシュはサポートされなくなりました。</target>
        </trans-unit>
        <trans-unit id="966aae1b0b42de1dff8ae5df0d18d67c8938fc59" translate="yes" xml:space="preserve">
          <source>Fortunately, all TAP output is perfect. In the event that it is not, this method will return parser errors. Note that a junk line which the parser does not recognize is &lt;code&gt;not&lt;/code&gt; an error. This allows this parser to handle future versions of TAP. The following are all TAP errors reported by the parser:</source>
          <target state="translated">幸い、すべてのTAP出力は完璧です。そうでない場合、このメソッドはパーサーエラーを返します。パーサーが認識しないジャンクラインはエラーでは &lt;code&gt;not&lt;/code&gt; ことに注意してください。これにより、このパーサーはTAPの将来のバージョンを処理できるようになります。以下は、パーサーによって報告されるすべてのTAPエラーです。</target>
        </trans-unit>
        <trans-unit id="87a70390fb6164a360255317db997a9d16310113" translate="yes" xml:space="preserve">
          <source>Fortunately, all encodings that come with &lt;code&gt;Encode&lt;/code&gt; core are &lt;code&gt;PerlIO&lt;/code&gt; -savvy except for &lt;code&gt;hz&lt;/code&gt; and &lt;code&gt;ISO-2022-kr&lt;/code&gt; . For the gory details, see &lt;a href=&quot;encode/encoding&quot;&gt;Encode::Encoding&lt;/a&gt; and &lt;a href=&quot;encode/perlio&quot;&gt;Encode::PerlIO&lt;/a&gt;.</source>
          <target state="translated">さいわい、 &lt;code&gt;Encode&lt;/code&gt; コアに付属するすべてのエンコーディングは、 &lt;code&gt;hz&lt;/code&gt; と &lt;code&gt;ISO-2022-kr&lt;/code&gt; を除き、 &lt;code&gt;PerlIO&lt;/code&gt; に対応しています。詳細については、&lt;a href=&quot;encode/encoding&quot;&gt;Encode :: Encoding&lt;/a&gt;および&lt;a href=&quot;encode/perlio&quot;&gt;Encode :: PerlIOを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="97fed1654379ec219795384ff23955f1b1779107" translate="yes" xml:space="preserve">
          <source>Fortunately, most web servers for the mainframe will correctly translate the &lt;code&gt;\n&lt;/code&gt; in the following statement to its ASCII equivalent (&lt;code&gt;\r&lt;/code&gt; is the same under both Unix and z/OS):</source>
          <target state="translated">幸い、メインフレームのほとんどのWebサーバーは、次のステートメントの &lt;code&gt;\n&lt;/code&gt; を同等のASCIIに正しく変換します（ &lt;code&gt;\r&lt;/code&gt; はUnixとz / OSの両方で同じです）。</target>
        </trans-unit>
        <trans-unit id="f8866d15529a7057b903143f3bead50cd0b88e71" translate="yes" xml:space="preserve">
          <source>Fortunately, sometimes this kernel &quot;feature&quot; can be disabled. Unfortunately, there are two ways to disable it. The system can simply outlaw scripts with any set-id bit set, which doesn't help much. Alternately, it can simply ignore the set-id bits on scripts.</source>
          <target state="translated">幸いなことに、このカーネルの「機能」を無効にできることがあります。残念ながら、これを無効にするには二つの方法があります。システムは、スクリプトに set-id ビットが設定されているスクリプトを単に禁止することができますが、これはあまり役に立ちません。もう一つの方法は、スクリプトの set-id ビットを無視することです。</target>
        </trans-unit>
        <trans-unit id="43f164c645e50a4c0c3f29fb561f1f66b8762dff" translate="yes" xml:space="preserve">
          <source>Fortunately, you only need to know 10% of what's in the main page to get 90% of the benefit. This page will show you that 10%.</source>
          <target state="translated">幸いなことに、メインページにある10%の内容を知るだけで、90%の利益を得ることができます。このページではその10%を紹介します。</target>
        </trans-unit>
        <trans-unit id="c005499309629c2dd1540384f9d88388c2791d54" translate="yes" xml:space="preserve">
          <source>Forums</source>
          <target state="translated">Forums</target>
        </trans-unit>
        <trans-unit id="7babeb8dda00cbd2717c46859a597a0ac26af8c6" translate="yes" xml:space="preserve">
          <source>Frame Listing Output Examples</source>
          <target state="translated">フレームリスト出力例</target>
        </trans-unit>
        <trans-unit id="e7de308f5cb42aaa93cfde86991651a82d8099b3" translate="yes" xml:space="preserve">
          <source>Framework for localization</source>
          <target state="translated">ローカライゼーションのためのフレームワーク</target>
        </trans-unit>
        <trans-unit id="3b8bd7caa7cebf02d88ee7c7bdba92155a41dbde" translate="yes" xml:space="preserve">
          <source>Framework for parsing Pod</source>
          <target state="translated">Podを解析するためのフレームワーク</target>
        </trans-unit>
        <trans-unit id="53885018ee90a10b7bc48c0249fdec51585e188f" translate="yes" xml:space="preserve">
          <source>Free (as in beer) books</source>
          <target state="translated">無料(ビールのように)本</target>
        </trans-unit>
        <trans-unit id="2045f9df7f3ddf3a7ca6cf0c4237136b9a9c596f" translate="yes" xml:space="preserve">
          <source>Free an op. Only use this when an op is no longer linked to from any optree.</source>
          <target state="translated">オペを自由にする。これは、オプツリーからリンクされていないオプがなくなった場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="eb0e32e0a58271635c4ef7fbb31d2d946383137e" translate="yes" xml:space="preserve">
          <source>Free any magic storage used by the SV. See &lt;code&gt;sv_magic&lt;/code&gt; .</source>
          <target state="translated">SVで使用されている魔法のストレージを解放します。 &lt;code&gt;sv_magic&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e846928fcc144c7bd2db6d810b3f5976c347e3ce" translate="yes" xml:space="preserve">
          <source>Free the SV at offset po in the current pad.</source>
          <target state="translated">現在のパッドのオフセット po で SV を解放します。</target>
        </trans-unit>
        <trans-unit id="7da50e46bbfce92aaf6cbf3942c4d4d8527613b3" translate="yes" xml:space="preserve">
          <source>Free the storage associated with the tied handle referenced by</source>
          <target state="translated">で参照される紐付きハンドルに関連付けられたストレージを解放します。</target>
        </trans-unit>
        <trans-unit id="97f264039513cfe75ea6d652749d14c6132a0656" translate="yes" xml:space="preserve">
          <source>Free the storage associated with the tied scalar referenced by</source>
          <target state="translated">で参照されるタイドスカラに関連付けられたストレージを解放します。</target>
        </trans-unit>
        <trans-unit id="7b25f5206df2f27aaf3f69eecf641cc773e18f45" translate="yes" xml:space="preserve">
          <source>FreeBSD core dumps from readdir_r with ithreads</source>
          <target state="translated">FreeBSD のコアダンプを ithreads で readdir_r から取得します。</target>
        </trans-unit>
        <trans-unit id="fffe09c3013e58f78e37a3579c3723dc99001d0b" translate="yes" xml:space="preserve">
          <source>Freely available locale definitions</source>
          <target state="translated">自由に利用できるロケールの定義</target>
        </trans-unit>
        <trans-unit id="1a3d88c35190d4b2447d53bf45570277fd2a7644" translate="yes" xml:space="preserve">
          <source>Frees the all the elements of a hash, leaving it empty. The XS equivalent of &lt;code&gt;%hash = ()&lt;/code&gt; . See also &lt;a href=&quot;#hv_undef&quot;&gt;hv_undef&lt;/a&gt;.</source>
          <target state="translated">ハッシュのすべての要素を解放し、空のままにします。 &lt;code&gt;%hash = ()&lt;/code&gt; 相当するXS 。&lt;a href=&quot;#hv_undef&quot;&gt;hv_undef&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="6ef04d800d79b6e48aac64a67f720581e376f905" translate="yes" xml:space="preserve">
          <source>Frequently Asked Question (although not necessarily frequently answered, especially if the answer appears in the Perl FAQ shipped standard with Perl).</source>
          <target state="translated">よくある質問 (必ずしも頻繁に回答されているわけではありませんが、特に Perl と一緒に出荷された Perl FAQ に回答が掲載されている場合)。</target>
        </trans-unit>
        <trans-unit id="36c4bb75f29e144b11648c4e613d655770d581ce" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions About MakeMaker</source>
          <target state="translated">MakeMakerについてよくある質問</target>
        </trans-unit>
        <trans-unit id="760b682e1618036dbf7afb1d053c8ac3b71a79ee" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions about IO::Compress</source>
          <target state="translated">IO::Compress に関するよくある質問</target>
        </trans-unit>
        <trans-unit id="af90cef80988974dd76636b3adb5f472768f785d" translate="yes" xml:space="preserve">
          <source>Frequently asked questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="82bcb61f5c6950aaf9895e515089a465e02bfa4c" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;http://www.hp.com/products1/evolution/9000/faqs.html&quot;&gt;http://www.hp.com/products1/evolution/9000/faqs.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.hp.com/products1/evolution/9000/faqs.html&quot;&gt;http://www.hp.com/products1/evolution/9000/faqs.html&lt;/a&gt;から</target>
        </trans-unit>
        <trans-unit id="448f239f3b8eb7ee92d28473b865c15012705b26" translate="yes" xml:space="preserve">
          <source>From C this function will be called with the following statements.</source>
          <target state="translated">C言語からは、この関数は次のような文で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bc39bc50c4c934bc3c2b768db25fc832488e05a0" translate="yes" xml:space="preserve">
          <source>From Greek &amp;sigma;ύ&amp;nu;&amp;tau;&amp;alpha;&amp;xi;&amp;iota;&amp;sigmaf;, &amp;ldquo;with-arrangement&amp;rdquo;. How things (particularly symbols) are put together with each other.</source>
          <target state="translated">ギリシャ語の&amp;sigma;ύ&amp;nu;&amp;tau;&amp;alpha;&amp;xi;&amp;iota;&amp;sigmaf;から、「配置あり」。物事（特に記号）を互いに組み合わせる方法。</target>
        </trans-unit>
        <trans-unit id="42d1e5fd6ff04686a3ddd2292e038e6c2c64eded" translate="yes" xml:space="preserve">
          <source>From Help Consulting, for Windows.</source>
          <target state="translated">ヘルプコンサルティングより、Windows用。</target>
        </trans-unit>
        <trans-unit id="1cd8946f3bf218d8104a97d7a0815f8406dc267b" translate="yes" xml:space="preserve">
          <source>From Swift: someone who eats eggs big end first. Also used of computers that store the most significant &lt;b&gt;byte&lt;/b&gt; of a word at a lower byte address than the least significant byte. Often considered superior to little-endian machines. See also &lt;b&gt;little-endian&lt;/b&gt;.</source>
          <target state="translated">スウィフトから：卵を最初に食べる人。ワードの最上位&lt;b&gt;バイト&lt;/b&gt;を最下位&lt;b&gt;バイト&lt;/b&gt;よりも低いバイトアドレスに格納するコンピューターでも使用されます。多くの場合、リトルエンディアンマシンよりも優れていると考えられています。&lt;b&gt;リトルエンディアン&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="38010d6f3cc7fb3edd4ad08b9ae938ebd7fc3879" translate="yes" xml:space="preserve">
          <source>From Swift: someone who eats eggs little end first. Also used of computers that store the least significant &lt;b&gt;byte&lt;/b&gt; of a word at a lower byte address than the most significant byte. Often considered superior to big-endian machines. See also &lt;b&gt;big-endian&lt;/b&gt;.</source>
          <target state="translated">スウィフトから：卵をほとんど食べない人が最初に終わります。ワードの最下位&lt;b&gt;バイト&lt;/b&gt;を最上位バイトよりも低いバイトアドレスに格納するコンピューターでも使用されます。多くの場合、ビッグエンディアンのマシンよりも優れていると考えられています。&lt;b&gt;ビッグエンディアン&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="326d38f7c69627e156c632c28265510708e39ea4" translate="yes" xml:space="preserve">
          <source>From how far away you can see a variable, looking through one. Perl has two visibility mechanisms. It does &lt;b&gt;dynamic scoping&lt;/b&gt; of &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;&lt;b&gt;variables&lt;/b&gt;, meaning that the rest of the &lt;b&gt;block&lt;/b&gt;, and any &lt;b&gt;subroutines&lt;/b&gt; that are called by the rest of the block, can see the variables that are local to the block. Perl does &lt;b&gt;lexical scoping&lt;/b&gt; of &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variables, meaning that the rest of the block can see the variable, but other subroutines called by the block</source>
          <target state="translated">どれだけ遠くから変数を見ることができ、変数を調べます。Perlには2つの可視性メカニズムがあります。これは、 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; &lt;b&gt;変数の&lt;/b&gt;&lt;b&gt;動的スコープ&lt;/b&gt;を行い&lt;b&gt;ます&lt;/b&gt;。つまり、&lt;b&gt;ブロック&lt;/b&gt;の残りの部分、および&lt;b&gt;ブロック&lt;/b&gt;の残りの部分によって&lt;b&gt;呼び出さ&lt;/b&gt;れるすべての&lt;b&gt;サブルーチン&lt;/b&gt;は、ブロックに対してローカルな変数を参照できます。Perlは &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 変数の&lt;b&gt;字句スコープ&lt;/b&gt;を行います。つまり、ブロックの残りの部分は変数を見ることができますが、ブロックによって呼び出される他のサブルーチンは&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3d95a8fc94b9e55edd8dcfe43899b426ece0c816" translate="yes" xml:space="preserve">
          <source>From the command line, you can use the &lt;code&gt;cpan&lt;/code&gt; command's &lt;code&gt;-l&lt;/code&gt; switch:</source>
          <target state="translated">コマンドラインから、 &lt;code&gt;cpan&lt;/code&gt; コマンドの &lt;code&gt;-l&lt;/code&gt; スイッチを使用できます。</target>
        </trans-unit>
        <trans-unit id="0863cef08a10ff845303e3c15c48a839f8d3f9f0" translate="yes" xml:space="preserve">
          <source>From the command line, you can use the djtar utility provided with DJGPP to unpack and expand these files. For example:</source>
          <target state="translated">コマンドラインから、DJGPP に付属の djtar ユーティリティを使用して、これらのファイルを解凍して展開することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="374969a1bf6cf09ab316c531b85ee98729ec817d" translate="yes" xml:space="preserve">
          <source>From the command line:</source>
          <target state="translated">コマンドラインから</target>
        </trans-unit>
        <trans-unit id="d445d94e4dd2201f89b37cfbbd3453a506d83550" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl array. From the C level this is a pointer to an AV.</source>
          <target state="translated">perl レベルでは perl 配列への参照です。C レベルでは AV へのポインタです。</target>
        </trans-unit>
        <trans-unit id="7f363a7d4784c758d110ec4bcb974b6c5c5684cc" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl array. From the C level this is a pointer to an AV. This is a fixed variant of T_AVREF that decrements the refcount appropriately when returning an AV*. Introduced in perl 5.15.4.</source>
          <target state="translated">perl レベルでは perl 配列への参照です。CレベルではAVへのポインタです。これは、AV*を返すときに refcountを適切にデクリメントするT_AVREFの固定型です。perl 5.15.4で導入されました。</target>
        </trans-unit>
        <trans-unit id="c48843f42734f52f4bf8423d32ddff93043f82f2" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl hash. From the C level this is a pointer to an HV.</source>
          <target state="translated">perl レベルでは perl ハッシュへの参照です。C レベルでは HV へのポインタです。</target>
        </trans-unit>
        <trans-unit id="ea09196132f236e8b94218aff14a881b8e5f0e36" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl hash. From the C level this is a pointer to an HV. This is a fixed variant of T_HVREF that decrements the refcount appropriately when returning an HV*. Introduced in perl 5.15.4.</source>
          <target state="translated">perl レベルでは perl ハッシュへの参照です。CレベルではHVへのポインタです。これは、HV*を返すときに refcountを適切にデクリメントするT_HVREFの修正版です。perl 5.15.4で導入されました。</target>
        </trans-unit>
        <trans-unit id="65032422ec42df48f1031883e99a8b1b19f04fbb" translate="yes" xml:space="preserve">
          <source>From the perl level this is a reference to a perl subroutine (e.g. $sub = sub { 1 };). From the C level this is a pointer to a CV.</source>
          <target state="translated">perlレベルでは,これはperlのサブルーチンへの参照です(例:$sub=sub{1 };).Cレベルでは,これはCVへのポインタです.</target>
        </trans-unit>
        <trans-unit id="5b7e3054d443080121c5abde91b6e93c7323ccbd" translate="yes" xml:space="preserve">
          <source>From the shell, saying</source>
          <target state="translated">貝殻から、と言って</target>
        </trans-unit>
        <trans-unit id="856c187ed12caf89813ef33a23ce9aead8f27ac1" translate="yes" xml:space="preserve">
          <source>From the viewpoint of parsing, lexical variable scope and closures,</source>
          <target state="translated">構文解析の観点から、語彙変数のスコープとクロージャ。</target>
        </trans-unit>
        <trans-unit id="c5f6042fc1cf780179e4cf386ecd882f23297382" translate="yes" xml:space="preserve">
          <source>From then on, you use the &lt;code&gt;maketext&lt;/code&gt; function to access entries in whatever lexicon(s) belong to the language handle you got. So, this:</source>
          <target state="translated">それ以降は、 &lt;code&gt;maketext&lt;/code&gt; 関数を使用して、取得した言語ハンドルに属するレキシコンのエントリにアクセスします。したがって、この：</target>
        </trans-unit>
        <trans-unit id="cb76778ecb1d96c51a66d0bba753022fa7deeffa" translate="yes" xml:space="preserve">
          <source>From there we can get more complex. If the hash values are the same, we can provide a secondary sort on the hash key.</source>
          <target state="translated">そこからさらに複雑になります。ハッシュ値が同じであれば、ハッシュキーの二次ソートを提供することができます。</target>
        </trans-unit>
        <trans-unit id="be6cd2dadd81d9d30843c2caf56c66b7990b6773" translate="yes" xml:space="preserve">
          <source>From this version on the typical SCM (software configuration management) directories are ignored. These are: RCS, CVS, SCCS, .svn, .hg, .git, .sync</source>
          <target state="translated">このバージョンからは、典型的なSCM(ソフトウェア構成管理)ディレクトリは無視されます。これらは以下の通りです。RCS,CVS,SCCS,.svn,.hg,.git,.sync</target>
        </trans-unit>
        <trans-unit id="71c8fee3496d71438c7692e0f92208858f4356f7" translate="yes" xml:space="preserve">
          <source>From this, we can see that the date column stretches from column 1 to column 10 - ten characters wide. The &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;-ese for &quot;character&quot; is &lt;code&gt;A&lt;/code&gt; , and ten of them are &lt;code&gt;A10&lt;/code&gt; . So if we just wanted to extract the dates, we could say this:</source>
          <target state="translated">これから、日付列が列1から列10-10文字幅に伸びていることがわかります。「キャラクター」の &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; -eseは &lt;code&gt;A&lt;/code&gt; で、そのうちの10個は &lt;code&gt;A10&lt;/code&gt; です。したがって、日付を抽出したいだけであれば、次のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="05d91e5e8ffd6992838dcbb57817947850fffcf4" translate="yes" xml:space="preserve">
          <source>From time to time, we may mark language constructs and features which we consider to have been mistakes as &lt;b&gt;discouraged&lt;/b&gt;. Discouraged features aren't currently candidates for removal, but we may later deprecate them if they're found to stand in the way of a significant improvement to the Perl core.</source>
          <target state="translated">時々、間違いであると思われる言語構成や機能を&lt;b&gt;落胆&lt;/b&gt;とマークすることがあります。推奨されない機能は現在削除の候補ではありませんが、Perlコアの大幅な改善の妨げになることが判明した場合は、後で廃止される可能性があります。</target>
        </trans-unit>
        <trans-unit id="593b03925f9977503d5df5613ab598e54813e4e2" translate="yes" xml:space="preserve">
          <source>Full Listing of Core Typemaps</source>
          <target state="translated">コアタイプマップの完全なリスト</target>
        </trans-unit>
        <trans-unit id="d09e10be00d851e0182ce329905088abb2292e7d" translate="yes" xml:space="preserve">
          <source>Full path to the file that contains the module</source>
          <target state="translated">モジュールを含むファイルへのフルパス</target>
        </trans-unit>
        <trans-unit id="fa7054d0e0a5e06ed1cc20f1f072c76f977dd60d" translate="yes" xml:space="preserve">
          <source>Full-Text Searching in Perl</source>
          <target state="translated">Perlでの全文検索</target>
        </trans-unit>
        <trans-unit id="d52b0f8730cd0cb1d50429fd4e409ebd2910fe3a" translate="yes" xml:space="preserve">
          <source>Full-fledged support for I/O layers is now implemented provided Perl is configured to use PerlIO as its IO system (which is now the default).</source>
          <target state="translated">PerlがそのIOシステムとしてPerlIOを使用するように設定されている場合には、I/Oレイヤの本格的なサポートが実装されました(これが現在のデフォルトです)。</target>
        </trans-unit>
        <trans-unit id="950f94e743e045d06f1163691f50c811b3f47b68" translate="yes" xml:space="preserve">
          <source>Fully build and test the Perl distribution. Make sure that no tests are failing with &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;aout_test&lt;/code&gt; targets; fix the bugs in Perl and the Perl test suite detected by these tests. Make sure that &lt;code&gt;all_test&lt;/code&gt; make target runs as clean as possible. Check that</source>
          <target state="translated">Perlディストリビューションを完全にビルドしてテストします。 &lt;code&gt;test&lt;/code&gt; および &lt;code&gt;aout_test&lt;/code&gt; ターゲットで失敗するテストがないことを確認してください。これらのテストで検出されたPerlおよびPerlテストスイートのバグを修正します。 &lt;code&gt;all_test&lt;/code&gt; make targetができるだけクリーンに実行されることを確認してください。それを確認します</target>
        </trans-unit>
        <trans-unit id="f1bfa995d978ef3acade5580113154220abfa2db" translate="yes" xml:space="preserve">
          <source>Fully install Perl, including &lt;code&gt;installcmd&lt;/code&gt; target. Copy the generated DLLs to &lt;code&gt;LIBPATH&lt;/code&gt; ; copy the numbered Perl executables (as in</source>
          <target state="translated">&lt;code&gt;installcmd&lt;/code&gt; ターゲットを含むPerlを完全にインストールします。生成されたDLLを &lt;code&gt;LIBPATH&lt;/code&gt; にコピーします。番号の付いたPerl実行可能ファイルをコピーします（</target>
        </trans-unit>
        <trans-unit id="1ca8ebe0f337f78ac7630965aa7b6d0b1fa91b13" translate="yes" xml:space="preserve">
          <source>Fully qualified name of currently executing subroutine.</source>
          <target state="translated">現在実行中のサブルーチンの完全修飾名。</target>
        </trans-unit>
        <trans-unit id="4e532a9d21737b951917e92fa5d156c715111a5d" translate="yes" xml:space="preserve">
          <source>Fully qualified subroutine names are also supported. For example,</source>
          <target state="translated">完全修飾されたサブルーチン名もサポートされています。例えば</target>
        </trans-unit>
        <trans-unit id="7135f28e774ac1a9fabb4c75a3d1bb1ada58e29b" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;DumpArray()&lt;/code&gt; allows dumping of multiple values (useful when you need to analyze returns of functions).</source>
          <target state="translated">関数 &lt;code&gt;DumpArray()&lt;/code&gt; を使用すると、複数の値をダンプできます（関数の戻り値を分析する必要がある場合に役立ちます）。</target>
        </trans-unit>
        <trans-unit id="5d11bb00bc4644e08a9be122f115fe39fdd04b5f" translate="yes" xml:space="preserve">
          <source>Function Interface</source>
          <target state="translated">機能インタフェース</target>
        </trans-unit>
        <trans-unit id="89ef743a3244fbdb65d0570367a96fdb2440073a" translate="yes" xml:space="preserve">
          <source>Function Templates</source>
          <target state="translated">関数テンプレート</target>
        </trans-unit>
        <trans-unit id="91de2ff9bd67512188b1968893d91c44f301c251" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. E.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; .</source>
          <target state="translated">関数名とメソッド名はすべて小文字であるので最適に機能するようです。たとえば、 &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c032df1ce97ecae06d159792d2c62e3c02159e83" translate="yes" xml:space="preserve">
          <source>Function and method names seem to work best as all lowercase. e.g., &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; .</source>
          <target state="translated">関数名とメソッド名はすべて小文字であるので最適に機能するようです。たとえば、 &lt;code&gt;$obj-&amp;gt;as_string()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7563cdfec9156bd4ab2730b5c15af3243697fb62" translate="yes" xml:space="preserve">
          <source>Function called by &lt;code&gt;do_readline&lt;/code&gt; to spawn a glob (or do the glob inside perl on VMS). This code used to be inline, but now perl uses &lt;code&gt;File::Glob&lt;/code&gt; this glob starter is only used by miniperl during the build process. Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.</source>
          <target state="translated">globを生成するために &lt;code&gt;do_readline&lt;/code&gt; によって呼び出される関数（またはVMSのperl内でglobを実行）。このコードは以前はインラインでしたが、現在perlは &lt;code&gt;File::Glob&lt;/code&gt; 使用しています。このglobスターターは、ビルドプロセス中にminiperlによってのみ使用されます。移動するとpp_hot.cが縮小されます。pp_hot.cを縮小すると、perlの高速化に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9280dd949d70767204a52eb0931da78deffc83d9" translate="yes" xml:space="preserve">
          <source>Function must be called with an already existing SV like</source>
          <target state="translated">のような既存の SV で関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="4c163bb94cadf4c0b267646fb2499c8ab2b33874" translate="yes" xml:space="preserve">
          <source>Function pointer, pointing at a function used to handle extended keywords. The function should be declared as</source>
          <target state="translated">拡張キーワードを扱うために用いられる関数を指す関数ポインタ。この関数は、以下のように宣言されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="280143fbedd7265a424b9acd0af7c98a66e476a6" translate="yes" xml:space="preserve">
          <source>Functional Interface</source>
          <target state="translated">機能的なインタフェース</target>
        </trans-unit>
        <trans-unit id="7def83b37bed0c4a472856ea76a2171ece16649f" translate="yes" xml:space="preserve">
          <source>Functional style</source>
          <target state="translated">機能的なスタイル</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="1c61e24efc6706988ce877b75d28b4c69b714a46" translate="yes" xml:space="preserve">
          <source>Functions Returning &lt;code&gt;B::OP&lt;/code&gt; objects or for walking op trees</source>
          <target state="translated">&lt;code&gt;B::OP&lt;/code&gt; オブジェクトを返す関数、またはopツリーのウォーキング用</target>
        </trans-unit>
        <trans-unit id="32ee6f99309a14456cfb212326be3dca1a77b910" translate="yes" xml:space="preserve">
          <source>Functions Returning &lt;code&gt;B::SV&lt;/code&gt; , &lt;code&gt;B::AV&lt;/code&gt; , &lt;code&gt;B::HV&lt;/code&gt; , and &lt;code&gt;B::CV&lt;/code&gt; objects</source>
          <target state="translated">&lt;code&gt;B::SV&lt;/code&gt; 、 &lt;code&gt;B::AV&lt;/code&gt; 、 &lt;code&gt;B::HV&lt;/code&gt; 、および &lt;code&gt;B::CV&lt;/code&gt; オブジェクトを返す関数</target>
        </trans-unit>
        <trans-unit id="854549ed50f6375d5b5e7597bbf2e5898d7693ff" translate="yes" xml:space="preserve">
          <source>Functions Returning B::OP objects or for walking op trees</source>
          <target state="translated">関数 B::OPオブジェクトを返す、またはOPツリーを歩くための関数</target>
        </trans-unit>
        <trans-unit id="19372f8fa99b3b7135ba966c21643aafea9c2467" translate="yes" xml:space="preserve">
          <source>Functions Returning B::SV, B::AV, B::HV, and B::CV objects</source>
          <target state="translated">関数 B::SV,B::AV,B::HV,B::CV オブジェクトを返します.</target>
        </trans-unit>
        <trans-unit id="d40a33bf3fa3ed923717e0c5ea11d6e647e8b77a" translate="yes" xml:space="preserve">
          <source>Functions and Attributes</source>
          <target state="translated">機能と属性</target>
        </trans-unit>
        <trans-unit id="5348c5a5b62cd5dc86c5b99972e10885f9a1a5b3" translate="yes" xml:space="preserve">
          <source>Functions called in list context are assumed to have failed if they return an empty list, or a list consisting only of a single undef element.</source>
          <target state="translated">リストコンテキストで呼び出された関数が空のリストを返す場合や、単一の undef 要素のみで構成されるリストを返す場合は、失敗したとみなされます。</target>
        </trans-unit>
        <trans-unit id="6c4c388285c500f1aeb8119de16be0528856e0bc" translate="yes" xml:space="preserve">
          <source>Functions for Examining the Symbol Table</source>
          <target state="translated">シンボルテーブルを調べる機能</target>
        </trans-unit>
        <trans-unit id="7759ffd239fd25b45ca1d91bf1c8ce464ea7bb64" translate="yes" xml:space="preserve">
          <source>Functions for dealing with RFC3066-style language tags</source>
          <target state="translated">RFC3066 形式の言語タグを扱うための機能</target>
        </trans-unit>
        <trans-unit id="88e6ab13b92c2e1e7592687e44e6735c69ae3aad" translate="yes" xml:space="preserve">
          <source>Functions to support Perl's traditional &quot;fast&quot; access to the buffer.</source>
          <target state="translated">Perl の伝統的な &quot;高速&quot; アクセスをサポートする関数です。</target>
        </trans-unit>
        <trans-unit id="f616156f7ca62c9f603c623fae3a49e7426583da" translate="yes" xml:space="preserve">
          <source>Functions with a prototype of &lt;code&gt;()&lt;/code&gt; are potential candidates for inlining. If the result after optimization and constant folding is either a constant or a lexically-scoped scalar which has no other references, then it will be used in place of function calls made without &lt;code&gt;&amp;amp;&lt;/code&gt; . Calls made using &lt;code&gt;&amp;amp;&lt;/code&gt; are never inlined. (See</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; のプロトタイプを持つ関数は、インライン化の潜在的な候補です。最適化と定数の折りたたみ後の結果が定数または他の参照のないレキシカルスコープのスカラーの場合、 &lt;code&gt;&amp;amp;&lt;/code&gt; なしで行われた関数呼び出しの代わりに使用されます。 &lt;code&gt;&amp;amp;&lt;/code&gt; を使用して行われた呼び出しはインライン化されません。（見る</target>
        </trans-unit>
        <trans-unit id="052d8ad81d99f33b2eb06e6d194282b8675fb201" translate="yes" xml:space="preserve">
          <source>Fundamentals</source>
          <target state="translated">Fundamentals</target>
        </trans-unit>
        <trans-unit id="a9d8d1b8ae4349b8a01d7c63e451fd799a9b7f8b" translate="yes" xml:space="preserve">
          <source>Funnies Section</source>
          <target state="translated">ファンニーズ部門</target>
        </trans-unit>
        <trans-unit id="04c4c0235c4dcde402f292623ee26bd9ccce865c" translate="yes" xml:space="preserve">
          <source>Further Resources</source>
          <target state="translated">その他のリソース</target>
        </trans-unit>
        <trans-unit id="a4850790bffd17894b4ec0822c491be3c4610fd3" translate="yes" xml:space="preserve">
          <source>Further examples of process-scope changes include &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask()&lt;/a&gt;&lt;/code&gt; and changing uids and gids.</source>
          <target state="translated">プロセススコープの変更のその他の例には、 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask()&lt;/a&gt;&lt;/code&gt; およびuidとgidsの変更が含まれます。</target>
        </trans-unit>
        <trans-unit id="5e8e4bbb1cbc5567f472983c6110b377f52c0cca" translate="yes" xml:space="preserve">
          <source>Further reading can be found using the modules and links below.</source>
          <target state="translated">その他の読み物は、以下のモジュールとリンクを使用して見つけることができます。</target>
        </trans-unit>
        <trans-unit id="ae0759b489099f7e983a5855b98b07fd1e2ddbe3" translate="yes" xml:space="preserve">
          <source>Further, the first element in a range never needs adjustment, as the adjustment would be just adding 0.</source>
          <target state="translated">さらに、範囲の最初の要素は、調整が0を足すだけなので、調整の必要はありません。</target>
        </trans-unit>
        <trans-unit id="33028254f3093deff3764d716f328fa4ad9e5425" translate="yes" xml:space="preserve">
          <source>Further:</source>
          <target state="translated">Further:</target>
        </trans-unit>
        <trans-unit id="a080bfabfc41a91686c46efc096f30ef4fbf522d" translate="yes" xml:space="preserve">
          <source>Furthermore, Perl inspects the operands of logical operators to decide whether to use smartmatching for each one by applying the above test to the operands:</source>
          <target state="translated">さらに、Perlは論理演算子のオペランドを検査して、上記のテストをオペランドに適用することで、それぞれのオペランドに対してスマートマッチングを使用するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="51adfdfc6e30f15b7ff308a0a13705b1d26d399a" translate="yes" xml:space="preserve">
          <source>Furthermore, don't forget the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; in there, as &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $kv (%hash) {}&lt;/code&gt; iterates over the keys and values, and is generally not useful ($kv would be a key, then a value, and so on).</source>
          <target state="translated">また、忘れてはいけない &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; として、そこでの &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $kv (%hash) {}&lt;/code&gt; （$ KVキー、値、などであろう）キーと値を反復処理、及び一般的に有用ではありません。</target>
        </trans-unit>
        <trans-unit id="db93480872e46ff5e0a7c8f5556d4345f41eef53" translate="yes" xml:space="preserve">
          <source>Furthermore, even if you have enabled this feature to be compiled, you need to enable it in runtime with an environment variable: &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt; . It must be an integer higher than zero, telling the desired frame count.</source>
          <target state="translated">さらに、この機能のコンパイルを有効にした場合でも、実行時に環境変数 &lt;code&gt;PERL_C_BACKTRACE_ON_ERROR=10&lt;/code&gt; を使用して有効にする必要があります。必要なフレーム数を示す、ゼロより大きい整数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="79dbf7bed4736677573eda1bcecd5ea72126d919" translate="yes" xml:space="preserve">
          <source>Furthermore, for doing normal I/O you might need these:</source>
          <target state="translated">さらに、通常のI/Oを行うためには、これらが必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="48cc69c08fdaa003e83ba71f62025b569c3f16f4" translate="yes" xml:space="preserve">
          <source>Furthermore, ftp uris only support anonymous connections, so no named user/password pair can be passed along.</source>
          <target state="translated">さらに、ftp uris は匿名接続しかサポートしていないので、名前付きのユーザとパスワードのペアを渡すことはできません。</target>
        </trans-unit>
        <trans-unit id="524b0aff95e7ba2007348850646d7ceb43e068a9" translate="yes" xml:space="preserve">
          <source>Furthermore, remember that this caveat also applies to fork(), which is emulated by threads on Win32.</source>
          <target state="translated">さらに、この注意点は、Win32 のスレッドによってエミュレートされる fork()にも適用されることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="d309a10ab62a5f76770beb2bdc55a4d79f7053a2" translate="yes" xml:space="preserve">
          <source>Furthermore, some evil vendors will claim 1003.1 compliance, but in fact are not so: they will not pass the PCTS (POSIX Compliance Test Suites). For example, one vendor may not define &lt;code&gt;EDEADLK&lt;/code&gt; , or the semantics of the errno values set by &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(2)&lt;/a&gt;&lt;/code&gt; might not be quite right. Perl does not attempt to verify POSIX compliance. That means you can currently successfully say &quot;use POSIX&quot;, and then later in your program you find that your vendor has been lax and there's no usable &lt;code&gt;ICANON&lt;/code&gt; macro after all. This could be construed to be a bug.</source>
          <target state="translated">さらに、一部の悪意のあるベンダーは1003.1準拠を主張しますが、実際にはそうではありません。PCTS（POSIX準拠テストスイート）に合格しません。たとえば、あるベンダーが &lt;code&gt;EDEADLK&lt;/code&gt; を定義していないか、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(2)&lt;/a&gt;&lt;/code&gt; によって設定されたerrno値のセマンティクスが完全に正しくない場合があります。PerlはPOSIX準拠の検証を試みません。つまり、現在は「POSIXを使用する」と正常に言うことができ、その後、プログラムの中でベンダーが &lt;code&gt;ICANON&lt;/code&gt; 、結局使用可能なICANONマクロがないことがわかります。これはバグであると解釈できます。</target>
        </trans-unit>
        <trans-unit id="13d4a69739d0088cb136cc4c16c74a337aabc059" translate="yes" xml:space="preserve">
          <source>Furthermore, special values, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt; , can be used, though they are not concerned with &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; .</source>
          <target state="translated">さらに、 &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; とは関係ありませんが、特別な値 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&quot;prenormalized&quot;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="8a481ff3ccbda516b9f33c8d20b42f50467089ec" translate="yes" xml:space="preserve">
          <source>Furthermore, when called from within the DB package in list context, and with an argument, caller returns more detailed information: it sets the list variable &lt;code&gt;@DB::args&lt;/code&gt; to be the arguments with which the subroutine was invoked.</source>
          <target state="translated">さらに、DBパッケージ内からリストコンテキストで呼び出され、引数を指定すると、呼び出し元はより詳細な情報を返します。リスト変数 &lt;code&gt;@DB::args&lt;/code&gt; を、サブルーチンの呼び出しに使用された引数に設定します。</target>
        </trans-unit>
        <trans-unit id="3f058db7875f38874b1a8c89b542a4bd6a932573" translate="yes" xml:space="preserve">
          <source>Furthermore, you should make sure that during &lt;code&gt;make test&lt;/code&gt; you do not have any GNU tool packages in your path: some toolkits like Unixutils include some tools (&lt;code&gt;type&lt;/code&gt; for instance) which override the Windows ones and makes tests fail. Remove them from your path while testing to avoid these errors.</source>
          <target state="translated">さらに、 &lt;code&gt;make test&lt;/code&gt; 中にパスにGNUツールパッケージが含まれていないことを確認する必要があります。Unixutilsなどの一部のツールキットには、Windows ツールをオーバーライドしてテストを失敗させるツール（ &lt;code&gt;type&lt;/code&gt; など）が含まれています。これらのエラーを回避するには、テスト中にパスから削除してください。</target>
        </trans-unit>
        <trans-unit id="d46735054f3a821c36d8dc0e38be2dc8069424e8" translate="yes" xml:space="preserve">
          <source>Future Plans and PERL_IMPLICIT_SYS</source>
          <target state="translated">今後の予定とPERL_IMPLICIT_SYS</target>
        </trans-unit>
        <trans-unit id="3da52a1809c9844f72a921784eef8acaa0a30f71" translate="yes" xml:space="preserve">
          <source>Future versions of Test::Builder will have a way to turn history off.</source>
          <target state="translated">Test::Builderの将来のバージョンでは、履歴をオフにする方法があります。</target>
        </trans-unit>
        <trans-unit id="51696f9d78549516d07f8c451e43127c08733e4f" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may add additional commands.</source>
          <target state="translated">この仕様の将来のバージョンでは、コマンドが追加される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ca223e70a348b74c3e34848e1279271aecf5c237" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may add additional formatting codes.</source>
          <target state="translated">この仕様の将来のバージョンでは、書式コードを追加することができる。</target>
        </trans-unit>
        <trans-unit id="258ec93021438421e3c2a77885ab95a5bc2085a3" translate="yes" xml:space="preserve">
          <source>Future versions of this specification may specify how Pod can accept other encodings. Presumably treatment of other encodings in Pod parsing would be as in XML parsing: whatever the encoding declared by a particular Pod file, content is to be stored in memory as Unicode characters.</source>
          <target state="translated">この仕様の将来のバージョンでは、Podが他のエンコーディングを受け付ける方法を指定することができます。Podの解析における他のエンコーディングの扱いは、XMLの解析と同様になると思われます。特定のPodファイルで宣言されたエンコーディングが何であれ、コンテンツはUnicode文字としてメモリに格納されます。</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="349a5bc532bd3c593d57694baf4470fa82e87c0e" translate="yes" xml:space="preserve">
          <source>GAMESRVR.DLL</source>
          <target state="translated">GAMESRVR.DLL</target>
        </trans-unit>
        <trans-unit id="8577b47d2b705ad56be34a1a6a9f6472d1ac1001" translate="yes" xml:space="preserve">
          <source>GCC</source>
          <target state="translated">GCC</target>
        </trans-unit>
        <trans-unit id="0ba6cc1e2d0d56ce9630a0f34e6f5f991c2e2104" translate="yes" xml:space="preserve">
          <source>GCC gcov Profiling</source>
          <target state="translated">GCC gcov プロファイリング</target>
        </trans-unit>
        <trans-unit id="3f0f4dcc948d6cb707fe551e6eeba47a39180607" translate="yes" xml:space="preserve">
          <source>GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).</source>
          <target state="translated">5.005でGCC/mingw32のサポートが追加されました(Nick Ing-Simmons)。</target>
        </trans-unit>
        <trans-unit id="33a96db7f69918beb1bb533b8df7e3de1b7deb54" translate="yes" xml:space="preserve">
          <source>GDBM and Threads on HP-UX</source>
          <target state="translated">HP-UX上のGDBMとスレッド</target>
        </trans-unit>
        <trans-unit id="905e76d37d3d8721076484b8d01762ed235eeb6a" translate="yes" xml:space="preserve">
          <source>GDBM is available for Cygwin.</source>
          <target state="translated">CygwinではGDBMが利用できます。</target>
        </trans-unit>
        <trans-unit id="ae00d8f3134d79b137732c9cb7f102d8f0802921" translate="yes" xml:space="preserve">
          <source>GENERAL GUIDELINES</source>
          <target state="translated">一般的なガイドライン</target>
        </trans-unit>
        <trans-unit id="3b652c3125ece0a5e5b4b20d19c89323f6ee9348" translate="yes" xml:space="preserve">
          <source>GETTING HELP</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="cd86c073f225f3fdc6eca764a69478ae8ba27649" translate="yes" xml:space="preserve">
          <source>GETTING THE PERL SOURCE</source>
          <target state="translated">PERLソースの取得</target>
        </trans-unit>
        <trans-unit id="d957a2be14a1b162437963fe1ed8dc23e8a068b0" translate="yes" xml:space="preserve">
          <source>GIT DATA</source>
          <target state="translated">GITデータ</target>
        </trans-unit>
        <trans-unit id="bf98dc1a3b408b3c50c0a64164f6cbb372e44595" translate="yes" xml:space="preserve">
          <source>GLOBAL VARIABLES</source>
          <target state="translated">グローバルバリアブル</target>
        </trans-unit>
        <trans-unit id="f25bdd9f8631b9874b5643e6065c3d9abb3ebbf0" translate="yes" xml:space="preserve">
          <source>GLOSSARY</source>
          <target state="translated">GLOSSARY</target>
        </trans-unit>
        <trans-unit id="edd4b1d28d6fabbd459aa39cee2bc60f4dc2cacf" translate="yes" xml:space="preserve">
          <source>GNU &lt;code&gt;info&lt;/code&gt; files</source>
          <target state="translated">GNU &lt;code&gt;info&lt;/code&gt; ファイル</target>
        </trans-unit>
        <trans-unit id="9d091b9a5e4c37cafcd83a2e7be1ecc3c772330b" translate="yes" xml:space="preserve">
          <source>GNU C Library documentation on syslog, &lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&quot;&gt;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&lt;/a&gt;</source>
          <target state="translated">syslogに関するGNU Cライブラリのドキュメント、&lt;a href=&quot;http://www.gnu.org/software/libc/manual/html_node/Syslog.html&quot;&gt;http：//www.gnu.org/software/libc/manual/html_node/Syslog.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f329865e118f755d9ae2897c3d1036d691b75a09" translate="yes" xml:space="preserve">
          <source>GNU Tar authors have expressed their intention to become completely POSIX-compatible; &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/software/tar/manual/html_node/Formats.html&quot;&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">GNU Tarの作者は、完全にPOSIX互換になる意向を表明しています。 &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/software/tar/manual/html_node/Formats.html&quot;&gt;http://www.gnu.org/software/tar/manual/html_node/Formats.html&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b96a59e926131797b97a5280ca47b763871d9867" translate="yes" xml:space="preserve">
          <source>GNU as and GNU ld</source>
          <target state="translated">GNU asとGNU ld</target>
        </trans-unit>
        <trans-unit id="ffac9623e4fbfd01208662e12093c3420e35fe08" translate="yes" xml:space="preserve">
          <source>GNU info files</source>
          <target state="translated">GNU情報ファイル</target>
        </trans-unit>
        <trans-unit id="a602c9a5bb16737d2d0e6f0af42d0ffbca2fd496" translate="yes" xml:space="preserve">
          <source>GNU make for OS/390, which is recommended for the build of perl (as well as building CPAN modules and extensions), is available from the &lt;a href=&quot;#Tools&quot;&gt;Tools&lt;/a&gt;.</source>
          <target state="translated">Perlのビルド（およびCPANモジュールと拡張機能のビルド）に推奨されるOS / 390用のGNU makeは、&lt;a href=&quot;#Tools&quot;&gt;Tools&lt;/a&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="a9e95dc9b959dea83d9c2c4412bad8dbf6a30b36" translate="yes" xml:space="preserve">
          <source>GNV$UNIX_SHELL</source>
          <target state="translated">GNV$UNIX_SHELL</target>
        </trans-unit>
        <trans-unit id="d7332b9fd2e3b51ce3e0b297993ed332c301d3b1" translate="yes" xml:space="preserve">
          <source>GOODIES</source>
          <target state="translated">GOODIES</target>
        </trans-unit>
        <trans-unit id="5c3f2689267efedfd1b8d32a4de8ae076b08ae19" translate="yes" xml:space="preserve">
          <source>GOTCHAS</source>
          <target state="translated">GOTCHAS</target>
        </trans-unit>
        <trans-unit id="fe0ce1b835b0b5932a5c8ab2b59f416e1e42dc46" translate="yes" xml:space="preserve">
          <source>GOVERNANCE</source>
          <target state="translated">GOVERNANCE</target>
        </trans-unit>
        <trans-unit id="a0dce8feda03c8a60940891df8a100aa6d34a49e" translate="yes" xml:space="preserve">
          <source>GREAT CIRCLE DISTANCES AND DIRECTIONS</source>
          <target state="translated">大円の距離と方向</target>
        </trans-unit>
        <trans-unit id="f33d85ab379fda0c05941052326738c9fe2a1ea5" translate="yes" xml:space="preserve">
          <source>GSM0338 is for GSM handsets. Though it shares alphanumerals with ASCII, control character ranges and other parts are mapped very differently, mainly to store Greek characters. There are also escape sequences (starting with 0x1B) to cover e.g. the Euro sign.</source>
          <target state="translated">GSM0338はGSM携帯電話用です。英数字はASCIIと共有していますが、制御文字範囲やその他の部分は、主にギリシャ文字を格納するために非常に異なってマッピングされています。また、ユーロ記号などをカバーするためのエスケープシーケンス(0x1Bで始まる)もあります。</target>
        </trans-unit>
        <trans-unit id="c0cf065d2bd69adbe2ec92fa3feabfd7bf3b9886" translate="yes" xml:space="preserve">
          <source>GUI editor written in Perl using wxWidgets and Scintilla with lots of smaller features. Aims for a UI based on Perl principles like TIMTOWTDI and &quot;easy things should be easy, hard things should be possible&quot;.</source>
          <target state="translated">wxWidgetsとScintillaを使ってPerlで書かれたGUIエディタ。TIMTOWTDIや &quot;easy things should be easy,hard things should be possible &quot;のようなPerlの原則に基づいたUIを目指しています。</target>
        </trans-unit>
        <trans-unit id="8e8d08c08351d6aca5a776c4b8922b52fb3e13e8" translate="yes" xml:space="preserve">
          <source>GUIs</source>
          <target state="translated">GUIs</target>
        </trans-unit>
        <trans-unit id="65f937109da9f4d01ac30946e434018e19ee2dcd" translate="yes" xml:space="preserve">
          <source>GUTS</source>
          <target state="translated">GUTS</target>
        </trans-unit>
        <trans-unit id="870b564576a2966c189631c03afc2f57fdfb6686" translate="yes" xml:space="preserve">
          <source>GV Functions</source>
          <target state="translated">GV機能</target>
        </trans-unit>
        <trans-unit id="e717e9026bec8b632428e734dfdc5a2ec21c2f4d" translate="yes" xml:space="preserve">
          <source>GV_SUPER indicates that we want to look up the method in the superclasses of the &lt;code&gt;stash&lt;/code&gt; .</source>
          <target state="translated">GV_SUPERは、 &lt;code&gt;stash&lt;/code&gt; のスーパークラスでメソッドを検索することを示します。</target>
        </trans-unit>
        <trans-unit id="93253898f4f199634af1de90ddc5528b941ce169" translate="yes" xml:space="preserve">
          <source>GVs are usually found as values in stashes (symbol table hashes) where Perl stores its global variables.</source>
          <target state="translated">GV は通常、Perl がグローバル変数を格納するスタッシュ (シンボルテーブルハッシュ)の値として発見されます。</target>
        </trans-unit>
        <trans-unit id="da99bf684e2839f1607c7a6984181f3b8083a1e7" translate="yes" xml:space="preserve">
          <source>GZIP INTERFACE</source>
          <target state="translated">GZIPインターフェース</target>
        </trans-unit>
        <trans-unit id="cb13f819c9cca26bbe274d82fa237ae5e6a86319" translate="yes" xml:space="preserve">
          <source>G_ARRAY</source>
          <target state="translated">G_ARRAY</target>
        </trans-unit>
        <trans-unit id="c9afb596821a60db6f147bb13345cb27d6cd8acd" translate="yes" xml:space="preserve">
          <source>G_DISCARD</source>
          <target state="translated">G_DISCARD</target>
        </trans-unit>
        <trans-unit id="7c0c17b4a676352405579500514e68a451e3e0e0" translate="yes" xml:space="preserve">
          <source>G_EVAL</source>
          <target state="translated">G_EVAL</target>
        </trans-unit>
        <trans-unit id="336b3ba483f4b583d3b8e432539a535eec3195ef" translate="yes" xml:space="preserve">
          <source>G_KEEPERR</source>
          <target state="translated">G_KEEPERR</target>
        </trans-unit>
        <trans-unit id="0d759ade2aa36ab678fa55030c3ec31bde1a4c30" translate="yes" xml:space="preserve">
          <source>G_NOARGS</source>
          <target state="translated">G_NOARGS</target>
        </trans-unit>
        <trans-unit id="f4700a48056cc6ff4268baa6339552754ce5bf82" translate="yes" xml:space="preserve">
          <source>G_SCALAR</source>
          <target state="translated">G_SCALAR</target>
        </trans-unit>
        <trans-unit id="ad1ccfc7340540dee07e8608d1a88363df56cc05" translate="yes" xml:space="preserve">
          <source>G_VOID</source>
          <target state="translated">G_VOID</target>
        </trans-unit>
        <trans-unit id="7a9bbda071163c5693883e06db98012930631d19" translate="yes" xml:space="preserve">
          <source>Garbage collection can be confusing when keys are created in a field hash from normal scalars as well as references. Once a reference is</source>
          <target state="translated">ガベージコレクションは、参照だけでなく通常のスカラからもフィールドハッシュでキーが作成されると混乱することがあります。一度参照が</target>
        </trans-unit>
        <trans-unit id="fc30f25cde3aea2004fdaffc34ec529a477f5957" translate="yes" xml:space="preserve">
          <source>Garbage collection in a field hash means that entries will &quot;spontaneously&quot; disappear when the object that created them disappears. That must be borne in mind, especially when looping over a field hash. If anything you do inside the loop could cause an object to go out of scope, a random key may be deleted from the hash you are looping over. That can throw the loop iterator, so it's best to cache a consistent snapshot of the keys and/or values and loop over that. You will still have to check that a cached entry still exists when you get to it.</source>
          <target state="translated">フィールドハッシュでのゴミ収集とは、エントリを作成したオブジェクトが消えるとエントリが &quot;自然に &quot;消えてしまうことを意味します。特にフィールドハッシュの上をループするときには、そのことを念頭に置かなければなりません。ループ内で何かをするとオブジェクトがスコープ外に出てしまう可能性がある場合、ループしているハッシュからランダムキーが削除されてしまうことがあります。これはループイテレータをスローする可能性があるので、キーや値の一貫したスナップショットをキャッシュして、それをループするのがベストです。キャッシュされたエントリに到達したときには、キャッシュされたエントリがまだ存在するかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc5702bf94c050f203b549ef0c85e9b81b70dad0" translate="yes" xml:space="preserve">
          <source>Garbage-Collected Hashes</source>
          <target state="translated">ゴミ収集ハッシュ</target>
        </trans-unit>
        <trans-unit id="2ec6ebf4fdb8455b53f8d6215ef9f6363a9f9d67" translate="yes" xml:space="preserve">
          <source>Gather package and POD information from perl module files</source>
          <target state="translated">perl モジュールファイルからパッケージと POD の情報を収集する</target>
        </trans-unit>
        <trans-unit id="ff0ce44a9b44893e7937aae11d3bb72fdbd54b73" translate="yes" xml:space="preserve">
          <source>Gathered below are notes describing details of Perl 5's behavior on VMS. They are a supplement to the regular Perl 5 documentation, so we have focussed on the ways in which Perl 5 functions differently under VMS than it does under Unix, and on the interactions between Perl and the rest of the operating system. We haven't tried to duplicate complete descriptions of Perl features from the main Perl documentation, which can be found in the</source>
          <target state="translated">以下に、VMS 上での Perl 5 の動作の詳細を記述したメモをまとめました。これらは通常の Perl 5 のドキュメントの補足ですので、VMS での Perl 5 の機能が Unix での機能とは異なることや、Perl とその他のオペレーティングシステムの相互作用に焦点を当てています。Perl の機能の完全な説明を、Perl のメインのドキュメントから複製しようとはしていません。</target>
        </trans-unit>
        <trans-unit id="b4330768b6cbb368cf11bfc2a1aa3b4b4975bf79" translate="yes" xml:space="preserve">
          <source>Gathers meta data about the &lt;a href=&quot;#raw&quot;&gt;raw&lt;/a&gt; source, stashes it in &lt;a href=&quot;#meta&quot;&gt;meta&lt;/a&gt; and returns it as a hashref. This is done so that the &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s don't have to repeat common checks. Currently this includes:</source>
          <target state="translated">&lt;a href=&quot;#raw&quot;&gt;生の&lt;/a&gt;ソースに関するメタデータを収集し、それを&lt;a href=&quot;#meta&quot;&gt;メタ&lt;/a&gt;にスタッシュして、ハッシュリファレンスとして返します。これは、&lt;a href=&quot;sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;が一般的なチェックを繰り返す必要がないようにするためです。現在、これには以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="0a7877a5c7bf9a390ddf2644ce8f01d2dd749296" translate="yes" xml:space="preserve">
          <source>Gee, yet another template code - as if we hadn't plenty. But &lt;code&gt;@&lt;/code&gt; saves our day by enabling us to specify the offset from the beginning of the pack buffer to the next item: This is just the value the &lt;code&gt;offsetof&lt;/code&gt; macro (defined in &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; ) returns when given a &lt;code&gt;struct&lt;/code&gt; type and one of its field names (&quot;member-designator&quot; in C standardese).</source>
          <target state="translated">ああ、もう1つのテンプレートコード-まるで十分ではなかったかのように。しかし、 &lt;code&gt;@&lt;/code&gt; はパックバッファーの先頭から次の項目までのオフセットを指定できるようにすることで1日を節約します。これは、 &lt;code&gt;struct&lt;/code&gt; タイプと次のいずれかが指定されたときに、 &lt;code&gt;offsetof&lt;/code&gt; マクロ（ &lt;code&gt;&amp;lt;stddef.h&amp;gt;&lt;/code&gt; で定義）が返す値にすぎません。そのフィールド名（C標準の &quot;member-designator&quot;）。</target>
        </trans-unit>
        <trans-unit id="7264840e686c65159ebed179560079a997c941c5" translate="yes" xml:space="preserve">
          <source>General 32-bit vs. 64-bit issues.</source>
          <target state="translated">一般的な32ビットと64ビットの問題。</target>
        </trans-unit>
        <trans-unit id="0b01c727a71003b8392c50d5e2ddffdc179cdf34" translate="yes" xml:space="preserve">
          <source>General Notes</source>
          <target state="translated">一般的な注意事項</target>
        </trans-unit>
        <trans-unit id="7bafdc805eb49ade4dcc8f1b7c25df23aa8d76e7" translate="yes" xml:space="preserve">
          <source>General Perl style guide</source>
          <target state="translated">一般的な Perl スタイルガイド</target>
        </trans-unit>
        <trans-unit id="c4a42d220d26c466f9dbb535a2b1b9eda4a1fde7" translate="yes" xml:space="preserve">
          <source>General Thread Utility Routines</source>
          <target state="translated">一般的なスレッドのユーティリティルーチン</target>
        </trans-unit>
        <trans-unit id="faddfc843ac71019b3393df672837907ac7bbcab" translate="yes" xml:space="preserve">
          <source>General Variables</source>
          <target state="translated">一般変数</target>
        </trans-unit>
        <trans-unit id="f183e804ff54f5c70fea1801cabc1af8c1ecfaeb" translate="yes" xml:space="preserve">
          <source>General behaviour in list contexts</source>
          <target state="translated">リストコンテキストでの一般的な振る舞い</target>
        </trans-unit>
        <trans-unit id="c3adf35af62fa854c8d064fa3f4201bca217f3c3" translate="yes" xml:space="preserve">
          <source>General behaviour in scalar and void contexts</source>
          <target state="translated">スカラーとボイドのコンテキストでの一般的な振る舞い</target>
        </trans-unit>
        <trans-unit id="f87d868ae9e6c5e095ed3921aff5b72a01552118" translate="yes" xml:space="preserve">
          <source>General examples:</source>
          <target state="translated">一般的な例。</target>
        </trans-unit>
        <trans-unit id="1fa7d4327fa3fac797d2494a8dbdc1859972a516" translate="yes" xml:space="preserve">
          <source>General explanations on cross-compiling WinCE</source>
          <target state="translated">WinCEのクロスコンパイルに関する一般的な説明</target>
        </trans-unit>
        <trans-unit id="93ab49617e74fefea30381e0a0b013db01a2c54c" translate="yes" xml:space="preserve">
          <source>General tools</source>
          <target state="translated">一般的なツール</target>
        </trans-unit>
        <trans-unit id="bc589851c4083a051730b622221b86c22bbd8a1c" translate="yes" xml:space="preserve">
          <source>Generalized quotes. See &lt;a href=&quot;../perlop#Quote-Like-Operators&quot;&gt;Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">一般化された引用。&lt;a href=&quot;../perlop#Quote-Like-Operators&quot;&gt;perlopのQuote-Like演算子を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c176de14201d5eb9a9b50ccc11298ef3cd109ef6" translate="yes" xml:space="preserve">
          <source>Generalized quotes. See &lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">一般化された引用。&lt;a href=&quot;perlop#Quote-Like-Operators&quot;&gt;perlopのQuote-Like演算子を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad57f21ae3c6ac53ed83e3da2f741a3990c73305" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the &lt;code&gt;YourModule::item_name&lt;/code&gt; (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ) syntax. By convention you can use a leading underscore on names to informally indicate that they are 'internal' and not for public use.</source>
          <target state="translated">一般に、エクスポートされないものには、モジュールの外部から &lt;code&gt;YourModule::item_name&lt;/code&gt; （または &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ）構文を使用してアクセスできます。慣例により、名前に先頭のアンダースコアを使用して、それらが「内部」であり、パブリックに使用されないことを非公式に示すことができます。</target>
        </trans-unit>
        <trans-unit id="80cc2c98f271588e14fc9b40a4be695fc7549ee7" translate="yes" xml:space="preserve">
          <source>Generally anything not exported is still accessible from outside the module using the ModuleName::item_name (or &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; ) syntax. By convention you can use a leading underscore on names to indicate informally that they are 'internal' and not for public use.</source>
          <target state="translated">一般に、エクスポートされないものには、 &lt;code&gt;$blessed_ref-&amp;gt;method&lt;/code&gt; :: item_name（または$ blessed_ref-&amp;gt; method）構文を使用してモジュールの外部からアクセスできます。慣例により、名前に先頭のアンダースコアを使用して、それらが「内部」であり、公に使用するものではないことを非公式に示すことができます。</target>
        </trans-unit>
        <trans-unit id="a1fe2ca53692f111e8f5344d4ee32097c8e139d1" translate="yes" xml:space="preserve">
          <source>Generally one only needs to call the &lt;code&gt;WriteConstants&lt;/code&gt; function, and then</source>
          <target state="translated">通常、 &lt;code&gt;WriteConstants&lt;/code&gt; 関数を呼び出すだけでよく、その後</target>
        </trans-unit>
        <trans-unit id="327b665fa95397f25e3867f7836460cb799d0a0c" translate="yes" xml:space="preserve">
          <source>Generally used in a &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block at the end of a loop to clear variables and reset &lt;code&gt;??&lt;/code&gt; searches so that they work again. The expression is interpreted as a list of single characters (hyphens allowed for ranges). All variables and arrays beginning with one of those letters are reset to their pristine state. If the expression is omitted, one-match searches (&lt;code&gt;?pattern?&lt;/code&gt; ) are reset to match again. Only resets variables or searches in the current package. Always returns 1. Examples:</source>
          <target state="translated">通常、ループの最後の &lt;code&gt;&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロックで変数をクリアしてリセットするために使用されます &lt;code&gt;??&lt;/code&gt; 彼らが再び働くように検索します。式は単一の文字のリストとして解釈されます（範囲にはハイフンを使用できます）。それらの文字のいずれかで始まるすべての変数と配列は、元の状態にリセットされます。式が省略された場合、1回一致の検索（ &lt;code&gt;?pattern?&lt;/code&gt; ）は、再度一致するようにリセットされます。現在のパッケージで変数または検索のみをリセットします。常に1を返します。例：</target>
        </trans-unit>
        <trans-unit id="6ed5d2aaf3ce44a61b56b98845df66b1842be7d7" translate="yes" xml:space="preserve">
          <source>Generally used in a &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block at the end of a loop to clear variables and reset &lt;code&gt;??&lt;/code&gt; searches so that they work again. The expression is interpreted as a list of single characters (hyphens allowed for ranges). All variables and arrays beginning with one of those letters are reset to their pristine state. If the expression is omitted, one-match searches (&lt;code&gt;?pattern?&lt;/code&gt; ) are reset to match again. Only resets variables or searches in the current package. Always returns 1. Examples:</source>
          <target state="translated">通常、ループの最後の &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; ブロックで変数をクリアしてリセットするために使用されます &lt;code&gt;??&lt;/code&gt; 彼らが再び働くように検索します。式は単一の文字のリストとして解釈されます（範囲にはハイフンを使用できます）。それらの文字のいずれかで始まるすべての変数と配列は、元の状態にリセットされます。式が省略された場合、1回一致の検索（ &lt;code&gt;?pattern?&lt;/code&gt; ）は、再度一致するようにリセットされます。現在のパッケージで変数または検索のみをリセットします。常に1を返します。例：</target>
        </trans-unit>
        <trans-unit id="0d7b613cee2366987a969166247d56f35fe8603c" translate="yes" xml:space="preserve">
          <source>Generally, a collection of procedures. In ancient days, referred to a collection of subroutines in a</source>
          <target state="translated">一般的には、プロシージャの集合体。のサブルーチンの集合を指す。</target>
        </trans-unit>
        <trans-unit id="f3328c5ae4397dc3c4222ba39a73bb9ae82f5a28" translate="yes" xml:space="preserve">
          <source>Generally, any &lt;b&gt;token&lt;/b&gt; or &lt;b&gt;metasymbol&lt;/b&gt;. Often used more specifically to mean the sort of name you might find in a &lt;b&gt;symbol table&lt;/b&gt;.</source>
          <target state="translated">一般に、&lt;b&gt;トークン&lt;/b&gt;または&lt;b&gt;メタシンボル&lt;/b&gt;。多くの場合、&lt;b&gt;シンボルテーブルで&lt;/b&gt;見つかるような名前を&lt;b&gt;表す&lt;/b&gt;ために、より具体的に使用され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="b4a6c168526aaa7b030a8b864e61338267716f45" translate="yes" xml:space="preserve">
          <source>Generally, each argument has one leading &quot;:&quot; and one trailing &quot;:&quot; removed (if any). They are then joined together by a &quot;:&quot;. Special treatment applies for arguments denoting updir paths like &quot;::lib:&quot;, see (4), or arguments consisting solely of colons (&quot;colon paths&quot;), see (5).</source>
          <target state="translated">一般的に、それぞれの引数は、先頭の「:」と末尾の「:」が1つずつ取り除かれています(もしあれば)。そして、それらは &quot;:&quot; で結合されます。(::lib:&quot; のようなアップディルパスを示す引数には特別な扱いが適用され、(4)を参照してください。</target>
        </trans-unit>
        <trans-unit id="dbca80a0f1b382deb6a1f5ce103056435b9b61d1" translate="yes" xml:space="preserve">
          <source>Generally, if you want to store an undefined value in an AV or HV, you should not use &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; , but rather create a new undefined value using the &lt;code&gt;newSV&lt;/code&gt; function, for example:</source>
          <target state="translated">一般に、未定義の値をAVまたはHVに保存する場合は、 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; を使用するのではなく、 &lt;code&gt;newSV&lt;/code&gt; 関数を使用して新しい未定義の値を作成する必要があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="a7888dab6e27a5d395183c226ba655dd95d81794" translate="yes" xml:space="preserve">
          <source>Generate C code for XS modules' constants.</source>
          <target state="translated">XSモジュールの定数のためのCコードを生成します。</target>
        </trans-unit>
        <trans-unit id="55b679a0cfa0771f77ea49b9d53b6db25d85485e" translate="yes" xml:space="preserve">
          <source>Generate C/C++ code for the XS initializer function.</source>
          <target state="translated">XS初期化関数のためのC/C++コードを生成します。</target>
        </trans-unit>
        <trans-unit id="6d7a20114b9e2f4adde607a7de6cdc77812cd5c3" translate="yes" xml:space="preserve">
          <source>Generate MYMETA information as a hash either from an existing CPAN Meta file (META.json or META.yml) or from internal data.</source>
          <target state="translated">既存のCPANメタファイル(META.jsonまたはMETA.yml)から、または内部データから、MYMETA情報をハッシュとして生成します。</target>
        </trans-unit>
        <trans-unit id="fad9ff08051acbfd579989fe7d09533be58fc8b2" translate="yes" xml:space="preserve">
          <source>Generate XS code to import C header constants</source>
          <target state="translated">Cヘッダ定数をインポートするためのXSコードの生成</target>
        </trans-unit>
        <trans-unit id="cf1ca662ada637e9d6d3c74e2b646acad00573f4" translate="yes" xml:space="preserve">
          <source>Generate a summary file called</source>
          <target state="translated">というサマリーファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="a58e7b39e158d6f21c17511a146b04839f328ccd" translate="yes" xml:space="preserve">
          <source>Generate an accessor method for each element of structs and unions. The generated methods are named after the element name; will return the current value of the element if called without additional arguments; and will set the element to the supplied value (and return the new value) if called with an additional argument. Embedded structures and unions are returned as a pointer rather than the complete structure, to facilitate chained calls.</source>
          <target state="translated">構造体およびユニオンの各要素に対してアクセサメソッドを生成します。生成されたメソッドは、要素名にちなんで命名されます。追加の引数なしで呼び出された場合は、その要素の現在の値を返し、追加の引数で呼び出された場合は、その要素を指定された値に設定します(そして新しい値を返します)。埋め込まれた構造体と組合は、連結呼び出しを容易にするために、完全な構造体ではなくポインタとして返されます。</target>
        </trans-unit>
        <trans-unit id="37ce6c2156457df8501e4c1fb83210aa39acfaeb" translate="yes" xml:space="preserve">
          <source>Generate an index at the top of the HTML file (default behaviour).</source>
          <target state="translated">HTMLファイルの先頭にインデックスを生成します(デフォルトの動作)。</target>
        </trans-unit>
        <trans-unit id="da1068fe142a5298b63a98d32acd80f4a76500cb" translate="yes" xml:space="preserve">
          <source>Generate an index at the top of the HTML file. This is the default behaviour.</source>
          <target state="translated">HTMLファイルの先頭にインデックスを生成します。これがデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="255b7210c6594b83b698aa3fb4e69e8ff01d426e" translate="yes" xml:space="preserve">
          <source>Generate and return a fresh cop hints hash containing no entries.</source>
          <target state="translated">エントリを含まない新鮮なcop hintsハッシュを生成して返します。</target>
        </trans-unit>
        <trans-unit id="d85a3b5f2926e3396853e594219b817c7146a9d2" translate="yes" xml:space="preserve">
          <source>Generate stubs for a SelfLoading module</source>
          <target state="translated">SelfLoadingモジュールのスタブを生成する</target>
        </trans-unit>
        <trans-unit id="0ba19194216be13c7f866968bcf3a987117cf5e8" translate="yes" xml:space="preserve">
          <source>Generate test reports if CPAN::Reporter is installed (yes/no)?</source>
          <target state="translated">CPAN::Reporterがインストールされている場合、テストレポートを生成しますか?</target>
        </trans-unit>
        <trans-unit id="548e0abe962fe7973873ce7fe29b5c45581f9fb6" translate="yes" xml:space="preserve">
          <source>Generate the Makefile and run make. Change the test number in Mytest.t to &quot;9&quot; and add the following tests:</source>
          <target state="translated">Makefileを生成し、makeを実行します。Mytest.tのテスト番号を &quot;9 &quot;に変更し、以下のテストを追加します。</target>
        </trans-unit>
        <trans-unit id="2e30a1f598292d25659b6f3a250f216bc967e7e7" translate="yes" xml:space="preserve">
          <source>Generate the default target 'all'.</source>
          <target state="translated">デフォルトのターゲット 'all' を生成します。</target>
        </trans-unit>
        <trans-unit id="4d962473f477d6b33e6a92b907153b952636d0f9" translate="yes" xml:space="preserve">
          <source>Generate the metafile target.</source>
          <target state="translated">メタファイルターゲットを生成します。</target>
        </trans-unit>
        <trans-unit id="4db92d1f5198cc69e763847675b8fcf87ee5935e" translate="yes" xml:space="preserve">
          <source>Generate the signature target.</source>
          <target state="translated">署名対象を生成します。</target>
        </trans-unit>
        <trans-unit id="de5fc6d42feef255045834472628eb831eead292" translate="yes" xml:space="preserve">
          <source>Generated internally. Is zero or undefined if name is 7 bit ASCII, &quot;no&quot; if the name is 8 bit (and so should only match if SvUTF8() is false), &quot;yes&quot; if the name is utf8 encoded.</source>
          <target state="translated">内部的に生成される。名前が7ビットASCIIの場合は0か未定義、8ビットの場合は &quot;no&quot;(SvUTF8()がfalseの場合にのみマッチします)、名前がutf8エンコードされている場合は &quot;yes &quot;です。</target>
        </trans-unit>
        <trans-unit id="95fc43dc3dce502b8d3a439f3daa647aaa660090" translate="yes" xml:space="preserve">
          <source>Generates</source>
          <target state="translated">Generates</target>
        </trans-unit>
        <trans-unit id="c167e00e247a5f64156fc2c863e8097c40ce0f9e" translate="yes" xml:space="preserve">
          <source>Generates Foo__Bar.3 style man page names</source>
          <target state="translated">Foo__Bar.3 スタイルの man ページ名を生成します。</target>
        </trans-unit>
        <trans-unit id="43bc892fe6a292ae97df44de7203d863e807362e" translate="yes" xml:space="preserve">
          <source>Generates a .pm file which is backwards compatible with the specified perl version.</source>
          <target state="translated">指定された perl のバージョンと下位互換性のある .pm ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="e7c963d48f673cb2a0857ed31de8d6aa72aa362b" translate="yes" xml:space="preserve">
          <source>Generates a make fragment defining all the macros initialized in init_dist.</source>
          <target state="translated">init_distで初期化されたすべてのマクロを定義するmakeフラグメントを生成します。</target>
        </trans-unit>
        <trans-unit id="17a9c3599652e9b94156636fc524075142b2c6bc" translate="yes" xml:space="preserve">
          <source>Generates a set of @commands which print the $text to a $file.</source>
          <target state="translated">テキストを$ファイルに印刷する@コマンドのセットを生成します。</target>
        </trans-unit>
        <trans-unit id="790a5b36d77c0cf3beb51e493e823c8123ef2b5c" translate="yes" xml:space="preserve">
          <source>Generates and returns a &lt;code&gt;HV *&lt;/code&gt; representing the content of a &lt;code&gt;refcounted_he&lt;/code&gt; chain.</source>
          <target state="translated">&lt;code&gt;refcounted_he&lt;/code&gt; チェーンのコンテンツを表す &lt;code&gt;HV *&lt;/code&gt; を生成して返します。</target>
        </trans-unit>
        <trans-unit id="bcbbd96d2dbbc6700210cc4fb74779eab56f16fe" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of hint entries in the cop</source>
          <target state="translated">cop</target>
        </trans-unit>
        <trans-unit id="1421406c3adcfc5c7625f4edebffbd408bd80ab6" translate="yes" xml:space="preserve">
          <source>Generates and returns a standard Perl hash representing the full set of key/value pairs in the cop hints hash</source>
          <target state="translated">cop hints ハッシュのキーと値のペアの完全なセットを表す標準の Perl ハッシュを生成して返します。</target>
        </trans-unit>
        <trans-unit id="855ea3ad4660369a0d200ca547e9d16bbf1aed26" translate="yes" xml:space="preserve">
          <source>Generates cross reference reports for Perl programs</source>
          <target state="translated">Perlプログラムのクロスリファレンスレポートを生成</target>
        </trans-unit>
        <trans-unit id="e3de133c1c2ce09b6435425a01ca3e82f3c58065" translate="yes" xml:space="preserve">
          <source>Generates one copy of</source>
          <target state="translated">のコピーを1つ生成します。</target>
        </trans-unit>
        <trans-unit id="1d207670d95f5fc2643606a3d629315363ac612b" translate="yes" xml:space="preserve">
          <source>Generates one fewer copies of</source>
          <target state="translated">のコピーを1つ減らして生成します。</target>
        </trans-unit>
        <trans-unit id="28d7a6917a623daf227d101d7b6ed8834cb89f78" translate="yes" xml:space="preserve">
          <source>Generates prototype code for all xsubs. Default is false.</source>
          <target state="translated">すべての xsubs のプロトタイプコードを生成します。デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="2960b94d28c15d7a694d51b3079b6bc63fbdd48f" translate="yes" xml:space="preserve">
          <source>Generates targets to create the specified directories and set its permission to PERM_DIR.</source>
          <target state="translated">指定されたディレクトリを作成し、そのパーミッションをPERM_DIRに設定するターゲットを生成します。</target>
        </trans-unit>
        <trans-unit id="d6e4b3f200d78c6e8a91d9d2272c0f5fb9f6e05c" translate="yes" xml:space="preserve">
          <source>Generates the distmeta target to add META.yml and META.json to the MANIFEST in the distdir.</source>
          <target state="translated">distdir にある MANIFEST に META.yml と META.json を追加するための distmeta ターゲットを生成します。</target>
        </trans-unit>
        <trans-unit id="b310c6f5942ab86898d599d13d2e861f310c17d2" translate="yes" xml:space="preserve">
          <source>Generates the distsignature target to add SIGNATURE to the MANIFEST in the distdir.</source>
          <target state="translated">distdir にある MANIFEST に SIGNATURE を追加するための distsignature ターゲットを生成します。</target>
        </trans-unit>
        <trans-unit id="3730e292a86874c44122818bef743a546bb5f8f3" translate="yes" xml:space="preserve">
          <source>Generates the manifypods target. This target generates man pages from all POD files in MAN1PODS and MAN3PODS.</source>
          <target state="translated">manifypods ターゲットを生成します。このターゲットは、MAN1PODS と MAN3PODS のすべての POD ファイルから man ページを生成します。</target>
        </trans-unit>
        <trans-unit id="91c589b5a085cc257f1fe2c1088920f6a3260335" translate="yes" xml:space="preserve">
          <source>Generates the path name for the controlling terminal.</source>
          <target state="translated">制御端末のパス名を生成します。</target>
        </trans-unit>
        <trans-unit id="aa78442f98d8c0e48e911fd577f2432ab2e641a7" translate="yes" xml:space="preserve">
          <source>Generates the value of</source>
          <target state="translated">の値を生成します。</target>
        </trans-unit>
        <trans-unit id="b08e002657b5f8d224393deee9469ccf8c547be4" translate="yes" xml:space="preserve">
          <source>Generating Combined Tags</source>
          <target state="translated">複合タグの生成</target>
        </trans-unit>
        <trans-unit id="2a21214ce61b2e34bac827b1129511447eeb1d87" translate="yes" xml:space="preserve">
          <source>Generating the Makefile and running &lt;code&gt;make&lt;/code&gt; created a directory called blib (which stands for &quot;build library&quot;) in the current working directory. This directory will contain the shared library that we will build. Once we have tested it, we can install it into its final location.</source>
          <target state="translated">Makefileを生成してmakeを実行 &lt;code&gt;make&lt;/code&gt; と、現在の作業ディレクトリにblib（「ビルドライブラリ」の略）と呼ばれるディレクトリが作成されます。このディレクトリには、ビルドする共有ライブラリが含まれます。テストが完了したら、最終的な場所にインストールできます。</target>
        </trans-unit>
        <trans-unit id="bb265528826c32e783457930a0be091d852e5fb2" translate="yes" xml:space="preserve">
          <source>Generating this fatal compile error is one of the main advantages of using the constants interface, since you'll immediately know if you mistype a color name.</source>
          <target state="translated">この致命的なコンパイルエラーを発生させることは、定数インターフェイスを使う主な利点の一つです。</target>
        </trans-unit>
        <trans-unit id="94d49b2add1a84693cb6f6742d43aadc63779926" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF ARRAYS</source>
          <target state="translated">HASH OF ARRAYSの生成</target>
        </trans-unit>
        <trans-unit id="b10605adc6dd4bbb3891b18fa40d3ef6fd2660e3" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF COMPLEX RECORDS</source>
          <target state="translated">HASH OF COMPLEX RECORDSの生成</target>
        </trans-unit>
        <trans-unit id="c99d686abb8c25c079ecc27374e7ae409f23b172" translate="yes" xml:space="preserve">
          <source>Generation of a HASH OF HASHES</source>
          <target state="translated">ハッシュオブハッシュの生成</target>
        </trans-unit>
        <trans-unit id="a9893d509c65cb98b9af7180a27be528798c38c2" translate="yes" xml:space="preserve">
          <source>Generation of an ARRAY OF ARRAYS</source>
          <target state="translated">ARRAY OF ARRAYSの生成</target>
        </trans-unit>
        <trans-unit id="36fe3d03032c0fb4a7e4a93e553c5c4b5ad3dfa9" translate="yes" xml:space="preserve">
          <source>Generation of an ARRAY OF HASHES</source>
          <target state="translated">アレイオブハッシュの生成</target>
        </trans-unit>
        <trans-unit id="812c1b37318e9ec5939e34ef662accc038427024" translate="yes" xml:space="preserve">
          <source>Generic interface to Perl Compiler backends</source>
          <target state="translated">Perl コンパイラバックエンドへの汎用インターフェース</target>
        </trans-unit>
        <trans-unit id="bc3a1464aaf3caaf7316afc754a4e8005c14f861" translate="yes" xml:space="preserve">
          <source>Get &lt;code&gt;REMOTE_FILE&lt;/code&gt; from the server and store locally. &lt;code&gt;LOCAL_FILE&lt;/code&gt; may be a filename or a filehandle. If not specified, the file will be stored in the current directory with the same leafname as the remote file.</source>
          <target state="translated">サーバーから &lt;code&gt;REMOTE_FILE&lt;/code&gt; を取得し、ローカルに保存します。 &lt;code&gt;LOCAL_FILE&lt;/code&gt; は、ファイル名またはファイルハンドルです。指定しない場合、ファイルはリモートファイルと同じリーフ名で現在のディレクトリに保存されます。</target>
        </trans-unit>
        <trans-unit id="d0dc372b2e257044afda97bb0f77031c7a35e177" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt; , or the current directory in long format.</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; のディレクトリリスト、または現在のディレクトリを長い形式で取得します。</target>
        </trans-unit>
        <trans-unit id="7ec34cee796d547d14608ac7cf6e0f3edbd159c0" translate="yes" xml:space="preserve">
          <source>Get a directory listing of &lt;code&gt;DIR&lt;/code&gt; , or the current directory.</source>
          <target state="translated">&lt;code&gt;DIR&lt;/code&gt; または現在のディレクトリのディレクトリリストを取得します。</target>
        </trans-unit>
        <trans-unit id="374636ae19b296dfea98703295aaecfbdd2c1a97" translate="yes" xml:space="preserve">
          <source>Get a line from the filehandle and store it into the SV, optionally appending to the currently-stored string. If &lt;code&gt;append&lt;/code&gt; is not 0, the line is appended to the SV instead of overwriting it. &lt;code&gt;append&lt;/code&gt; should be set to the byte offset that the appended string should start at in the SV (typically, &lt;code&gt;SvCUR(sv)&lt;/code&gt; is a suitable choice).</source>
          <target state="translated">ファイルハンドルから行を取得してSVに保存し、オプションで現在保存されている文字列に追加します。 &lt;code&gt;append&lt;/code&gt; が0でない場合、その行はSVを上書きする代わりに追加されます。 &lt;code&gt;append&lt;/code&gt; は、追加された文字列がSVで開始するバイトオフセットに設定する必要があります（通常、 &lt;code&gt;SvCUR(sv)&lt;/code&gt; が適切な選択です）。</target>
        </trans-unit>
        <trans-unit id="c598cea0161d91f18f52f5688b3c025ff94ad39c" translate="yes" xml:space="preserve">
          <source>Get a list of all remaining tests.</source>
          <target state="translated">残っているすべてのテストのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="63a593cb77f2c61ac75772edd049eee1d24e24f8" translate="yes" xml:space="preserve">
          <source>Get a list of all the currently enabled pragmas:</source>
          <target state="translated">現在有効になっているすべてのプラグマのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="7b7cd7f6b002e314d08f78b71b5b591a4f70ba81" translate="yes" xml:space="preserve">
          <source>Get a login for the Perl Authors Upload Server (PAUSE) if you don't already have one: &lt;a href=&quot;http://pause.perl.org&quot;&gt;http://pause.perl.org&lt;/a&gt;</source>
          <target state="translated">まだ持っていない場合は、Perl Authors Upload Server（PAUSE）のログインを取得します。http：&lt;a href=&quot;http://pause.perl.org&quot;&gt;//pause.perl.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5bbade2b6657ae3b6cb3e4431498e73906ee530" translate="yes" xml:space="preserve">
          <source>Get a sensible string out of the SV somehow. A private implementation of the &lt;code&gt;SvPV_force&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">どういうわけかSVから賢明な文字列を取得します。複雑なマクロ式に対応できないコンパイラ用の &lt;code&gt;SvPV_force&lt;/code&gt; マクロのプライベート実装。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="64dbc32740e54d691c9e2c5cda1ba05449ef3105" translate="yes" xml:space="preserve">
          <source>Get a sensible string out of the SV somehow. If &lt;code&gt;flags&lt;/code&gt; has &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_get&lt;/code&gt; on &lt;code&gt;sv&lt;/code&gt; if appropriate, else not. &lt;code&gt;sv_pvn_force&lt;/code&gt; and &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; are implemented in terms of this function. You normally want to use the various wrapper macros instead: see &lt;code&gt;SvPV_force&lt;/code&gt; and &lt;code&gt;SvPV_force_nomg&lt;/code&gt;</source>
          <target state="translated">どういうわけかSVから賢明な文字列を取得します。場合は &lt;code&gt;flags&lt;/code&gt; あり &lt;code&gt;SV_GMAGIC&lt;/code&gt; のビットがセットされて、します &lt;code&gt;mg_get&lt;/code&gt; に &lt;code&gt;sv&lt;/code&gt; 適切であれば、他にはありません。 &lt;code&gt;sv_pvn_force&lt;/code&gt; と &lt;code&gt;sv_pvn_force_nomg&lt;/code&gt; は、この関数の観点から実装されています。通常、代わりにさまざまなラッパーマクロを使用します &lt;code&gt;SvPV_force&lt;/code&gt; および &lt;code&gt;SvPV_force_nomg&lt;/code&gt; を参照してください</target>
        </trans-unit>
        <trans-unit id="0e7220eec11b9f4342ece5e624c0e6dd46adeb9c" translate="yes" xml:space="preserve">
          <source>Get a single character</source>
          <target state="translated">1つの文字を取得する</target>
        </trans-unit>
        <trans-unit id="b607b471bd641ae0bad56d53e93561f4a5dcc663" translate="yes" xml:space="preserve">
          <source>Get a single word describing the status of the aggregated tests. Depending on the outcome of the tests returns 'PASS', 'FAIL' or 'NOTESTS'. This token is understood by &lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Reporter&quot;&gt;CPAN::Reporter&lt;/a&gt;.</source>
          <target state="translated">集約されたテストのステータスを説明する1つの単語を取得します。テストの結果に応じて、「PASS」、「FAIL」、または「NOTESTS」を返します。このトークンは&lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Reporter&quot;&gt;CPAN :: Reporter&lt;/a&gt;によって理解されます。</target>
        </trans-unit>
        <trans-unit id="94e908780575d3c7b13c6f58aed85812783fe4af" translate="yes" xml:space="preserve">
          <source>Get all remaining lines from the file. It will croak() if accidentally called in a scalar context.</source>
          <target state="translated">ファイルから残りのすべての行を取得します。スカラーコンテキストで誤って呼ばれた場合は croak()を実行します。</target>
        </trans-unit>
        <trans-unit id="aed3f8067239d43cc5fd9e2c71aefda5e7ddcfa2" translate="yes" xml:space="preserve">
          <source>Get an a list of file handles which can be passed to &lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; to determine the readiness of this parser.</source>
          <target state="translated">このパーサーの準備状況を判断するために &lt;code&gt;&lt;a href=&quot;../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; に渡すことができるファイルハンドルのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="57c71ad46ac7b3fc7bffe5d8abfd2437d2bcda85" translate="yes" xml:space="preserve">
          <source>Get an array of descriptions in the order in which they were added to the aggregator.</source>
          <target state="translated">アグリゲータに追加された順に説明の配列を取得します。</target>
        </trans-unit>
        <trans-unit id="4fd330b00e5fd43c7facb1ce40b15978badf9d49" translate="yes" xml:space="preserve">
          <source>Get current value of extended library search path. If &lt;code&gt;type&lt;/code&gt; is present and positive, works with &lt;code&gt;END_LIBPATH&lt;/code&gt; , if negative, works with &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; , otherwise with &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; .</source>
          <target state="translated">拡張ライブラリ検索パスの現在の値を取得します。 &lt;code&gt;type&lt;/code&gt; が存在し、正の場合は &lt;code&gt;END_LIBPATH&lt;/code&gt; で機能し、負の場合は &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; で機能し、それ以外の場合は &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; で機能します。</target>
        </trans-unit>
        <trans-unit id="00cf4729c08b5fcd57e241d25d2cbdeb99dcc776" translate="yes" xml:space="preserve">
          <source>Get feedback before publishing</source>
          <target state="translated">出版前にフィードバックを得る</target>
        </trans-unit>
        <trans-unit id="7db8371110606460ae544aa3da9ce0f0de1a1f3f" translate="yes" xml:space="preserve">
          <source>Get file status. This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt; . The data returned is identical to the data from Perl's builtin &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">ファイルのステータスを取得します。これは、 &lt;code&gt;POSIX::open&lt;/code&gt; 呼び出すことによって取得されるようなファイル記述子を使用します。返されるデータは、Perlの組み込み &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 関数からのデータと同じです。</target>
        </trans-unit>
        <trans-unit id="fa68e261aa81f581b5a90ba1e9bfd725ef59d405" translate="yes" xml:space="preserve">
          <source>Get name of current operating system.</source>
          <target state="translated">現在のオペレーティングシステムの名前を取得します。</target>
        </trans-unit>
        <trans-unit id="689e6ea9037095052aff1101fdfdc680b6e214b0" translate="yes" xml:space="preserve">
          <source>Get numeric formatting information. Returns a reference to a hash containing the current underlying locale's formatting values. Users of this function should also read &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;, which provides a comprehensive discussion of Perl locale handling, including &lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;a section devoted to this function&lt;/a&gt;.</source>
          <target state="translated">数値のフォーマット情報を取得します。現在の基本的なロケールのフォーマット値を含むハッシュへの参照を返します。この関数のユーザーは、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;も読む必要があります。これは、&lt;a href=&quot;perllocale#The-localeconv-function&quot;&gt;この関数に特化したセクション&lt;/a&gt;を含む、 Perlロケール処理の包括的な説明を提供します。</target>
        </trans-unit>
        <trans-unit id="f1f984cefe527deb4addc8cf500f9c5727ae40d0" translate="yes" xml:space="preserve">
          <source>Get option associated with the socket. Other levels than SOL_SOCKET may be specified here.</source>
          <target state="translated">ソケットに関連付けられたオプションを取得します。ここでは、SOL_SOCKET 以外のレベルを指定することができます。</target>
        </trans-unit>
        <trans-unit id="0d1c28860360a4fa7e9af6746bedcb431787f46a" translate="yes" xml:space="preserve">
          <source>Get or set a pragma. To get the state of a pragma:</source>
          <target state="translated">プラグマを取得または設定します。プラグマの状態を取得します。</target>
        </trans-unit>
        <trans-unit id="77c12013a4f3faabdfd45c20cf7f2e5379d28bb4" translate="yes" xml:space="preserve">
          <source>Get or set the list of extensions that files must have in order to be considered tests. Defaults to ['.t'].</source>
          <target state="translated">テストとみなされるためにファイルが持たなければならない拡張子のリストを取得または設定します。デフォルトは ['.t']です。</target>
        </trans-unit>
        <trans-unit id="b3f02dbc79ab20b0a28ad615d9d491d7daece201" translate="yes" xml:space="preserve">
          <source>Get pathname of current working directory</source>
          <target state="translated">現在の作業ディレクトリのパス名を取得</target>
        </trans-unit>
        <trans-unit id="fe08fded31b445465eb024604de34561803ebc20" translate="yes" xml:space="preserve">
          <source>Get terminal control attributes.</source>
          <target state="translated">ターミナルコントロールの属性を取得します。</target>
        </trans-unit>
        <trans-unit id="a59623bd1c16560f3bf3b733cb7fef045dc9eb39" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;http://search.cpan.org/perldoc/Business::CreditCard&quot;&gt;Business::CreditCard&lt;/a&gt; module from CPAN.</source>
          <target state="translated">CPANから&lt;a href=&quot;http://search.cpan.org/perldoc/Business::CreditCard&quot;&gt;Business :: CreditCard&lt;/a&gt;モジュールを入手してください。</target>
        </trans-unit>
        <trans-unit id="f445ac9afb3e26b0227b0cd9d1470f0c1289598c" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;http://www.cpan.org/modules/by-module/Roman&quot;&gt;http://www.cpan.org/modules/by-module/Roman&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;http://www.cpan.org/modules/by-module/Roman&quot;&gt;http://www.cpan.org/modules/by-module/Roman&lt;/a&gt;モジュールを入手してください。</target>
        </trans-unit>
        <trans-unit id="006addc7b486481a4d34e5ae872451f7b6a5b8f4" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; of a capture variable. There's a special callback for this so that Perl doesn't have to do a FETCH and run &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; on the result, since the length is (in Perl's case) known from an offset stored in &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt; , this is much more efficient:</source>
          <target state="translated">取得 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; キャプチャ変数のを。 &lt;code&gt;rx-&amp;gt;offs&lt;/code&gt; に格納されているオフセットから長さが（Perlの場合）わかっているため、Perlが結果に対してFETCHを実行して &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; を実行する必要がないように、このための特別なコールバックがあります。これははるかに効率的です。</target>
        </trans-unit>
        <trans-unit id="a11deed8b7fb50959590945fa161672220265d44" translate="yes" xml:space="preserve">
          <source>Get the EMX development suite and gzip/tar, from either Hobbes ( &lt;a href=&quot;http://hobbes.nmsu.edu&quot;&gt;http://hobbes.nmsu.edu&lt;/a&gt; ) or Leo ( &lt;a href=&quot;http://www.leo.org&quot;&gt;http://www.leo.org&lt;/a&gt; ), and then follow the instructions for Unix.</source>
          <target state="translated">EMX開発スイートとgzip / tarをHobbes（&lt;a href=&quot;http://hobbes.nmsu.edu&quot;&gt;http://hobbes.nmsu.edu&lt;/a&gt;）またはLeo（&lt;a href=&quot;http://www.leo.org&quot;&gt;http://www.leo.org&lt;/a&gt;）から入手し、Unixの手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="bd4becd7b8dc2161e4cfcda2010cf7c1c881bcda" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator's process.</source>
          <target state="translated">このイテレータのプロセスの終了ステータスを取得します。</target>
        </trans-unit>
        <trans-unit id="84b89fd72831dd053c82f16626d634a48a2598fb" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator. Always returns zero.</source>
          <target state="translated">このイテレータの終了ステータスを取得します。常にゼロを返します。</target>
        </trans-unit>
        <trans-unit id="f3a54d4a203ed01a0cc006bea81ab1571b475a38" translate="yes" xml:space="preserve">
          <source>Get the exit status for this iterator. For an array iterator this will always be zero.</source>
          <target state="translated">このイテレータの終了ステータスを取得します。配列イテレータの場合、これは常にゼロになります。</target>
        </trans-unit>
        <trans-unit id="133e8c41853aab1cbe28dc6fb07183856dc1f08a" translate="yes" xml:space="preserve">
          <source>Get the header and the first &lt;code&gt;NUMLINES&lt;/code&gt; of the body for the message &lt;code&gt;MSGNUM&lt;/code&gt; . Returns a reference to an array which contains the lines of text read from the server.</source>
          <target state="translated">メッセージ &lt;code&gt;MSGNUM&lt;/code&gt; のヘッダーと本文の最初の &lt;code&gt;NUMLINES&lt;/code&gt; を取得します。サーバーから読み取られたテキストの行を含む配列への参照を返します。</target>
        </trans-unit>
        <trans-unit id="a54ca3db20c68a6648a2c8195a312d093894414c" translate="yes" xml:space="preserve">
          <source>Get the login name of the owner of the current process.</source>
          <target state="translated">現在のプロセスの所有者のログイン名を取得します。</target>
        </trans-unit>
        <trans-unit id="e120bfbb1d3603fe717d8918b14899076a8087c1" translate="yes" xml:space="preserve">
          <source>Get the message &lt;code&gt;MSGNUM&lt;/code&gt; from the remote mailbox. If &lt;code&gt;FH&lt;/code&gt; is not given then get returns a reference to an array which contains the lines of text read from the server. If &lt;code&gt;FH&lt;/code&gt; is given then the lines returned from the server are printed to the filehandle &lt;code&gt;FH&lt;/code&gt; .</source>
          <target state="translated">リモートメールボックスからメッセージ &lt;code&gt;MSGNUM&lt;/code&gt; を取得します。 &lt;code&gt;FH&lt;/code&gt; が指定されていない場合、getはサーバーから読み取られたテキストの行を含む配列への参照を返します。場合は &lt;code&gt;FH&lt;/code&gt; が指定され、サーバから返された行は、ファイルハンドルに印刷され &lt;code&gt;FH&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="171a80b6f7c9c9b0de0c2c1387e261c225bb5f1c" translate="yes" xml:space="preserve">
          <source>Get the results of the last test run. Returns a &lt;code&gt;result_class()&lt;/code&gt; instance.</source>
          <target state="translated">最後のテスト実行の結果を取得します。 &lt;code&gt;result_class()&lt;/code&gt; インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="90d44fbd255026683b10ff974054e3d86ff08631" translate="yes" xml:space="preserve">
          <source>Get the shebang line for a script file.</source>
          <target state="translated">スクリプトファイルの shebang 行を取得します。</target>
        </trans-unit>
        <trans-unit id="697c2b6a1d382211fc2dd0bca44da6d75975210e" translate="yes" xml:space="preserve">
          <source>Get the text content of Pod</source>
          <target state="translated">Podのテキストコンテンツを取得する</target>
        </trans-unit>
        <trans-unit id="8a6470e93add70210e01a18515324d36b81b5961" translate="yes" xml:space="preserve">
          <source>Get the value at offset</source>
          <target state="translated">オフセットの値を取得します。</target>
        </trans-unit>
        <trans-unit id="b4b20b8862126ed2accf702e1ec733c901c8db4d" translate="yes" xml:space="preserve">
          <source>Get the value at offset &lt;code&gt;po&lt;/code&gt; in the current pad</source>
          <target state="translated">現在のパッドのオフセット &lt;code&gt;po&lt;/code&gt; の値を取得します</target>
        </trans-unit>
        <trans-unit id="72cc9b87213c59838a0c486fddb38c60d8bcb990" translate="yes" xml:space="preserve">
          <source>Get the value from slot &lt;code&gt;po&lt;/code&gt; in the base (DEPTH=1) pad of a padlist</source>
          <target state="translated">パッドリストのベース（DEPTH = 1）パッドのスロット &lt;code&gt;po&lt;/code&gt; から値を取得します</target>
        </trans-unit>
        <trans-unit id="c15dfba3a3a5eb3e6fb48d7c0b41882c9028755a" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator's process.</source>
          <target state="translated">このイテレータのプロセスの待機状態を取得します。</target>
        </trans-unit>
        <trans-unit id="a8e5109ddd83023961a33c488ce31369f7a956bb" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator. Always returns zero.</source>
          <target state="translated">このイテレータの待機状態を取得します。常にゼロを返します。</target>
        </trans-unit>
        <trans-unit id="dd379b83821718a59329d33da5c3c07390f8df61" translate="yes" xml:space="preserve">
          <source>Get the wait status for this iterator. For an array iterator this will always be zero.</source>
          <target state="translated">このイテレータの待機状態を取得します。配列イテレータの場合、これは常にゼロになります。</target>
        </trans-unit>
        <trans-unit id="3a194d016da71ce2734ee5b70b1ec1fd4e7b2f88" translate="yes" xml:space="preserve">
          <source>Get your book listed</source>
          <target state="translated">あなたの本をリストアップしてください</target>
        </trans-unit>
        <trans-unit id="a862124c43c274d34647a9768c5732fb7edcd167" translate="yes" xml:space="preserve">
          <source>Get/set subroutine or variable attributes</source>
          <target state="translated">サブルーチンまたは変数の属性の取得/設定</target>
        </trans-unit>
        <trans-unit id="d95e69f9c878364f21361c49a01e8572507003e4" translate="yes" xml:space="preserve">
          <source>GetFileContents</source>
          <target state="translated">GetFileContents</target>
        </trans-unit>
        <trans-unit id="0e09541d86291862cd9e2e7048d551c2058e9bb4" translate="yes" xml:space="preserve">
          <source>GetOptions does not return a false result when an option is not supplied</source>
          <target state="translated">GetOptions は、オプションが与えられていない場合に false の結果を返しません。</target>
        </trans-unit>
        <trans-unit id="87d3b5ae9087dfd036d22e3daee54391ea6d78e7" translate="yes" xml:space="preserve">
          <source>GetOptions does not split the command line correctly</source>
          <target state="translated">GetOptionsがコマンドラインを正しく分割しない</target>
        </trans-unit>
        <trans-unit id="46612c2fb2a3f4d1528e0cd7f5288c84da4524f8" translate="yes" xml:space="preserve">
          <source>GetOptions returns true to indicate success. It returns false when the function detected one or more errors during option parsing. These errors are signalled using warn() and can be trapped with &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; .</source>
          <target state="translated">GetOptionsは、成功を示すためにtrueを返します。オプションの解析中に関数が1つ以上のエラーを検出すると、falseを返します。これらのエラーはwarn（）を使用して通知され、 &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; でトラップできます。</target>
        </trans-unit>
        <trans-unit id="6b726fe0f0e4cd3ba3741be1513769194ec024e4" translate="yes" xml:space="preserve">
          <source>GetOptions() will not interpret a leading &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; as option starters if the next argument is a reference. To force &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; as option starters, use &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt; . Confusing? Well, &lt;b&gt;using a starter argument is strongly deprecated&lt;/b&gt; anyway.</source>
          <target state="translated">GetOptions（）は、次の引数が参照の場合、先頭の &lt;code&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/code&gt; をオプションスターターとして解釈しません。 &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; と &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; をオプションのスターターとして強制するには、 &lt;code&gt;&quot;&amp;gt;&amp;lt;&quot;&lt;/code&gt; 使用します。混乱していますか？まあ、&lt;b&gt;スターター引数を使用すると、強く推奨されていません&lt;/b&gt;とにかく。</target>
        </trans-unit>
        <trans-unit id="b9732e721546ff2bc7ea74a9d199d6d228afae46" translate="yes" xml:space="preserve">
          <source>GetOptions() will return a true value if the command line could be processed successfully. Otherwise, it will write error messages using die() and warn(), and return a false result.</source>
          <target state="translated">GetOptions()は、コマンドラインが正常に処理できた場合は真の値を返します。それ以外の場合は、die()と warn()を使用してエラーメッセージを書き、偽の結果を返します。</target>
        </trans-unit>
        <trans-unit id="d3750099056a52cd3d76c09c5969009aae1b2738" translate="yes" xml:space="preserve">
          <source>Getopt::Long</source>
          <target state="translated">Getopt::Long</target>
        </trans-unit>
        <trans-unit id="ee86fdfdf70c8935b9943d5d042784e3c2ea2b52" translate="yes" xml:space="preserve">
          <source>Getopt::Long - Extended processing of command line options</source>
          <target state="translated">Getopt::Long-コマンドラインオプションの拡張処理</target>
        </trans-unit>
        <trans-unit id="9f1cb7796236a18d5a48dd6147f6ef96a3c237e4" translate="yes" xml:space="preserve">
          <source>Getopt::Long can be configured by calling subroutine Getopt::Long::Configure(). This subroutine takes a list of quoted strings, each specifying a configuration option to be enabled, e.g. &lt;code&gt;ignore_case&lt;/code&gt; , or disabled, e.g. &lt;code&gt;no_ignore_case&lt;/code&gt; . Case does not matter. Multiple calls to Configure() are possible.</source>
          <target state="translated">Getopt :: Longは、サブルーチンGetopt :: Long :: Configure（）を呼び出すことで構成できます。このサブルーチンは引用符で囲まれた文字列のリストを受け取り、それぞれが有効にする構成オプションを指定します（例： &lt;code&gt;ignore_case&lt;/code&gt; 、または無効にする、たとえば &lt;code&gt;no_ignore_case&lt;/code&gt; )。大文字小文字は関係ありません。Configure（）への複数の呼び出しが可能です。</target>
        </trans-unit>
        <trans-unit id="7e500819062670bf30da6e44490f24a19a2b2b19" translate="yes" xml:space="preserve">
          <source>Getopt::Long can be used in an object oriented way as well:</source>
          <target state="translated">Getopt::Long はオブジェクト指向でも使用できます。</target>
        </trans-unit>
        <trans-unit id="edc4bf4d0ae35771f0ba93156da87e25f9c34e7d" translate="yes" xml:space="preserve">
          <source>Getopt::Long encourages the use of Pod::Usage to produce help messages. For example:</source>
          <target state="translated">Getopt::Longは、ヘルプメッセージを生成するためにPod::Usageを使用することを推奨しています。例えば</target>
        </trans-unit>
        <trans-unit id="b2e568fc541602443fba9f2e2602a6ef4699382b" translate="yes" xml:space="preserve">
          <source>Getopt::Long is the Perl5 successor of &lt;code&gt;newgetopt.pl&lt;/code&gt; . This was the first Perl module that provided support for handling the new style of command line options, in particular long option names, hence the Perl5 name Getopt::Long. This module also supports single-character options and bundling.</source>
          <target state="translated">Getopt :: Longは、Perl5の &lt;code&gt;newgetopt.pl&lt;/code&gt; の後継です。これは、新しいスタイルのコマンドラインオプション、特に長いオプション名、つまりPerl5名Getopt :: Longの処理をサポートする最初のPerlモジュールでした。このモジュールは、1文字のオプションとバンドリングもサポートします。</target>
        </trans-unit>
        <trans-unit id="baeccd76f672aaa366456df8bb56a2d544addefb" translate="yes" xml:space="preserve">
          <source>Getopt::Long is thread safe when using ithreads as of Perl 5.8. It is</source>
          <target state="translated">Getopt::Long は Perl 5.8 以降のスレッドセーフです。これは</target>
        </trans-unit>
        <trans-unit id="0969a40bae8913a7683a1a070a431edeaeab53a5" translate="yes" xml:space="preserve">
          <source>Getopt::Long supports three styles of bundling. To enable bundling, a call to Getopt::Long::Configure is required.</source>
          <target state="translated">Getopt::Long は、3 つのスタイルのバンドルをサポートしています。バンドルを有効にするには、Getopt::Long::Configure を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="c364d3e4d70b8c945dae76119e75bf89e0b572cc" translate="yes" xml:space="preserve">
          <source>Getopt::Long supports two useful variants of simple options:</source>
          <target state="translated">Getopt::Long は、シンプルなオプションの 2 つの便利なバリエーションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="35548099a37e6129ad92eb2599c19e8e81824308" translate="yes" xml:space="preserve">
          <source>Getopt::Long will provide a help message using module &lt;a href=&quot;../pod/usage&quot;&gt;Pod::Usage&lt;/a&gt;. The message, derived from the SYNOPSIS POD section, will be written to standard output and processing will terminate.</source>
          <target state="translated">Getopt :: Longは、モジュール&lt;a href=&quot;../pod/usage&quot;&gt;Pod :: Usageを使用&lt;/a&gt;してヘルプメッセージを提供します。SYNOPSIS PODセクションから派生したメッセージは標準出力に書き込まれ、処理は終了します。</target>
        </trans-unit>
        <trans-unit id="23debd03657a7e0cf1c9081bd9b34c843df29188" translate="yes" xml:space="preserve">
          <source>Getopt::Long will provide a standard version message that includes the program name, its version (if $main::VERSION is defined), and the versions of Getopt::Long and Perl. The message will be written to standard output and processing will terminate.</source>
          <target state="translated">Getopt::Long は、プログラム名、そのバージョン ($main::VERSION が定義されている場合)、Getopt::Long および Perl のバージョンを含む標準のバージョン・メッセージを提供します。このメッセージは標準出力に書き込まれ、処理は終了します。</target>
        </trans-unit>
        <trans-unit id="231784d11e2ac3af47374629249969cb6df988d0" translate="yes" xml:space="preserve">
          <source>Getopt::Std</source>
          <target state="translated">Getopt::Std</target>
        </trans-unit>
        <trans-unit id="050f7a7a02c0f512f89945ac517880bcdb5ae514" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of concurrent test runs the harness is handling. By default, this value is 1 -- for parallel testing, this should be set higher.</source>
          <target state="translated">ハーネスが処理する同時実行テストの数を取得または設定します。デフォルトでは、この値は1です。並列テストのためには、これを高く設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="daa629c55c1f0a45358dee6010d69ea52181b0b2" translate="yes" xml:space="preserve">
          <source>Gets the &lt;code&gt;mro_isarev&lt;/code&gt; for this class, returned as an arrayref of class names. These are every class that &quot;isa&quot; the given class name, even if the isa relationship is indirect. This is used internally by the MRO code to keep track of method/MRO cache invalidations.</source>
          <target state="translated">このクラスの &lt;code&gt;mro_isarev&lt;/code&gt; を取得し、クラス名のarrayrefとして返します。isa関係が間接的であっても、これらは指定されたクラス名を「ISA」するすべてのクラスです。これは、メソッド/ MROキャッシュの無効化を追跡するためにMROコードによって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="fd14d8ab490abe0a698ffc2511ce53075831cc54" translate="yes" xml:space="preserve">
          <source>Gets/sets the current test number we're on. You usually shouldn't have to set this.</source>
          <target state="translated">現在のテスト番号を取得/設定します。通常、これを設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="3706dd8132de9e8897f7e90d7114484c9d4b2bb9" translate="yes" xml:space="preserve">
          <source>Gets/sets the number of tests we expect this test to run and prints out the appropriate headers.</source>
          <target state="translated">このテストの実行を期待するテストの数を取得/設定し、適切なヘッダを出力します。</target>
        </trans-unit>
        <trans-unit id="f884a4b1be1eb753e1154cd093d629796012ffc9" translate="yes" xml:space="preserve">
          <source>Getter/setter for frontend object. Method just allows to subclass CPAN.pm.</source>
          <target state="translated">フロントエンドオブジェクトのゲッター/セッター。メソッドはCPAN.pmをサブクラス化するだけです。</target>
        </trans-unit>
        <trans-unit id="1acf2787a8aee315df9ae150576ddc4f44be77a7" translate="yes" xml:space="preserve">
          <source>Getter/setter for the &quot;generation&quot; of the test suite run. The first generation is 1 (one) and subsequent generations are 2, 3, etc.</source>
          <target state="translated">テストスイートの実行の「世代」のゲッター/セッター。最初の世代は 1 (1)で、それ以降の世代は 2,3 などです。</target>
        </trans-unit>
        <trans-unit id="df0821c683786b3a185e90a15a8887e90823f964" translate="yes" xml:space="preserve">
          <source>Getter/setter for the instance of the &lt;code&gt;state_class&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;state_class&lt;/code&gt; のインスタンスのゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="9d0a2a42561baa9a96f6b60d628e8035a5add88f" translate="yes" xml:space="preserve">
          <source>Getter/setter for the name of the class used for maintaining state. This class should either subclass from &lt;code&gt;App::Prove::State&lt;/code&gt; or provide an identical interface.</source>
          <target state="translated">状態を維持するために使用されるクラスの名前のゲッター/セッター。このクラスは、 &lt;code&gt;App::Prove::State&lt;/code&gt; からサブクラス化するか、同じインターフェースを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5b0e960fe4e828ae0c4af986bdc86fc8e330536" translate="yes" xml:space="preserve">
          <source>Getter/setter for the name of the class used for tracking test results. This class should either subclass from &lt;code&gt;App::Prove::State::Result&lt;/code&gt; or provide an identical interface.</source>
          <target state="translated">テスト結果の追跡に使用されるクラスの名前のゲッター/セッター。このクラスは、 &lt;code&gt;App::Prove::State::Result&lt;/code&gt; からサブクラス化するか、同一のインターフェースを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="eabe8c9a6205eacd9d12103fd632a371642529ec" translate="yes" xml:space="preserve">
          <source>Getter/setter for the time of the test suite run.</source>
          <target state="translated">テストスイートの実行時間のゲッター/セッター。</target>
        </trans-unit>
        <trans-unit id="6796c34d6d781e2d3a0ac04017b688fdbad6d325" translate="yes" xml:space="preserve">
          <source>Getting Started with Getopt::Long</source>
          <target state="translated">Getopt::Long の使い方</target>
        </trans-unit>
        <trans-unit id="1252190bfc7e0e95dec199e97b41cd19bd2e58b1" translate="yes" xml:space="preserve">
          <source>Getting changes into a maint branch</source>
          <target state="translated">メインブランチへの変更の取得</target>
        </trans-unit>
        <trans-unit id="36235f076eea8a428b643f4a70d6dbb8c2bed724" translate="yes" xml:space="preserve">
          <source>Getting perl source</source>
          <target state="translated">perlのソースを取得する</target>
        </trans-unit>
        <trans-unit id="dfa7f5176d7ce9da792b1bc4befb42509ca613ce" translate="yes" xml:space="preserve">
          <source>Getting the Perl Source for AmigaOS</source>
          <target state="translated">AmigaOS用のPerlソースの取得</target>
        </trans-unit>
        <trans-unit id="ca13f2cfdfff6452c98f50feff43bb9608b60008" translate="yes" xml:space="preserve">
          <source>Getting the fat out of XSUBs</source>
          <target state="translated">XSUBsから脂肪を取り出す</target>
        </trans-unit>
        <trans-unit id="1e5b964707fd03837f1c6270f09aa1a8d502762e" translate="yes" xml:space="preserve">
          <source>Getting this message indicates that the outcome of the match arguably should have been the opposite of what actually happened. If you think that is the case, you may wish to make the &lt;code&gt;non_unicode&lt;/code&gt; warnings category fatal; if you agree with Perl's decision, you may wish to turn off this category.</source>
          <target state="translated">このメッセージを受け取ることは、おそらく試合の結果が実際に起こったこととは正反対だったことを示しています。その場合は、 &lt;code&gt;non_unicode&lt;/code&gt; 警告カテゴリを致命的にすることをお勧めします。Perlの決定に同意する場合は、このカテゴリをオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="c57b1bd007b42e02300f16d8e99034836448a153" translate="yes" xml:space="preserve">
          <source>Getting your patch accepted</source>
          <target state="translated">パッチを受理してもらう</target>
        </trans-unit>
        <trans-unit id="80db569e43bb9df0657e208673f0728aa476a744" translate="yes" xml:space="preserve">
          <source>Gigantic thanks to Jarkko Hietaniemi, for agreeing to put this in the core when I hadn't written it yet, and for generally being helpful, supportive, and competent. (Usually the rule is &quot;choose any one.&quot;) Also big thanks to Abhijit Menon-Sen for all of the same things.</source>
          <target state="translated">私がまだ書いていないときに、これをコアに入れることに同意してくれたJarkko Hietaniemiに、そして、全般的に親切で、サポート的で、有能であったことに、大きな感謝を捧げます。(通常のルールは「どれか一つを選ぶ」です。)また、同様のことをしてくれた Abhijit Menon-Sen にも大きな感謝をします。</target>
        </trans-unit>
        <trans-unit id="c447f4baf429b1b41a12ae13b0f7bf296acd86b4" translate="yes" xml:space="preserve">
          <source>Gisle Aas &amp;lt;gisle@aas.no&amp;gt;</source>
          <target state="translated">Gisle Aas &amp;lt;gisle@aas.no&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e2bf29bf784713e55d54fd683f2ddb22d16ebc1e" translate="yes" xml:space="preserve">
          <source>Gisle Aas made a number of improvements to the documentation for 2.07 and his advice and assistance is also greatly appreciated.</source>
          <target state="translated">Gisle Aas氏は2.07のドキュメントに多くの改善を行い、彼の助言と支援にも大いに感謝しています。</target>
        </trans-unit>
        <trans-unit id="d5205d4410276cc0ebead8a23281418d320e5d50" translate="yes" xml:space="preserve">
          <source>Gisle Aas's &quot;illustrated perlguts&quot;, also known as</source>
          <target state="translated">ジスレ・アースの「イラスト入りペルグート」、通称</target>
        </trans-unit>
        <trans-unit id="8a1336646a79e293474d5da63f8a9e49f7c504c4" translate="yes" xml:space="preserve">
          <source>Give a seed the pseudorandom number generator, see &lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;.</source>
          <target state="translated">シードに疑似乱数ジェネレータを与えます&lt;a href=&quot;functions/srand&quot;&gt;。srandを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ecbf54e25625127b374bd97fb6bf30d58f7f39f4" translate="yes" xml:space="preserve">
          <source>Give examples of use in your documentation</source>
          <target state="translated">ドキュメントでの使用例を示してください。</target>
        </trans-unit>
        <trans-unit id="576b2bd7a5f1aafe83cdf1ff1d6086595bd3253e" translate="yes" xml:space="preserve">
          <source>Give meaningful error messages when a test fails.</source>
          <target state="translated">テストが失敗したときに意味のあるエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="22362db21ca02fd220365037ef3ce1c3ae84669f" translate="yes" xml:space="preserve">
          <source>Give some example uses of the program or function. Don't skimp; users often find this the most useful part of the documentation. The examples are generally given as verbatim paragraphs.</source>
          <target state="translated">プログラムや関数の使用例をいくつか挙げてください。手を抜いてはいけません。ユーザはこれがドキュメントの中で最も有用な部分であることに気づくことが多いです。一般的には、例は逐語的な段落として与えられています。</target>
        </trans-unit>
        <trans-unit id="50b41e662ea9282912cd0935127aa4fdcf1ffa2b" translate="yes" xml:space="preserve">
          <source>Give the module a version/issue/release number.</source>
          <target state="translated">モジュールにバージョン/発行/リリース番号を与えてください。</target>
        </trans-unit>
        <trans-unit id="280f5d0aaefd1eefc611f50ae84a5b211fd8c124" translate="yes" xml:space="preserve">
          <source>Given 'tests' and optional 'rules' as input, returns a new &lt;code&gt;TAP::Parser::Scheduler&lt;/code&gt; object. Each member of &lt;code&gt;@tests&lt;/code&gt; should be either a a test file name, or a two element arrayref, where the first element is a test file name, and the second element is a test description. By default, we'll use the test name as the description.</source>
          <target state="translated">入力として「テスト」とオプションの「ルール」を指定すると、新しい &lt;code&gt;TAP::Parser::Scheduler&lt;/code&gt; オブジェクトを返します。 &lt;code&gt;@tests&lt;/code&gt; の各メンバーは、テストファイル名、または2つの要素のarrayrefである必要があります。最初の要素はテストファイル名で、2番目の要素はテストの説明です。デフォルトでは、説明としてテスト名を使用します。</target>
        </trans-unit>
        <trans-unit id="88ad438932c9bdde0a7a6699aa6fd02d2661a215" translate="yes" xml:space="preserve">
          <source>Given &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;, returns the value &lt;code&gt;x - n*y&lt;/code&gt; , where &lt;code&gt;n&lt;/code&gt; is the integer closest to &lt;code&gt;&lt;a href=&quot;functions/x&quot;&gt;x/y&lt;/a&gt;&lt;/code&gt;. [C99]</source>
          <target state="translated">所与 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; は、値を返し &lt;code&gt;x - n*y&lt;/code&gt; 、ここで &lt;code&gt;n&lt;/code&gt; に最も近い整数であり、 &lt;code&gt;&lt;a href=&quot;functions/x&quot;&gt;x/y&lt;/a&gt;&lt;/code&gt; 。[C99]</target>
        </trans-unit>
        <trans-unit id="4516641ce73c8bc0e4fc5ba5d53992584effc072" translate="yes" xml:space="preserve">
          <source>Given a $parser that's an object of class Pod::Simple::PullParser (or a subclass)...</source>
          <target state="translated">クラスPod::Simple::PullParser(またはサブクラス)のオブジェクトである$parserが与えられると...</target>
        </trans-unit>
        <trans-unit id="8f7ab85a46c82118f02884a07c3492a612ad0bc1" translate="yes" xml:space="preserve">
          <source>Given a &lt;a href=&quot;source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, detects what kind of source it is and returns</source>
          <target state="translated">与えられた&lt;a href=&quot;source&quot;&gt;TAP :: Parserの::出典&lt;/a&gt;、それがソースの種類を検出してリターン</target>
        </trans-unit>
        <trans-unit id="b116ea0f536335d3865a0d04bc8e08d1c2acb6e8" translate="yes" xml:space="preserve">
          <source>Given a &lt;a href=&quot;source&quot;&gt;TAP::Parser::Source&lt;/a&gt;, finds the most suitable &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt; to use to create a &lt;a href=&quot;iterator&quot;&gt;TAP::Parser::Iterator&lt;/a&gt; (see &lt;a href=&quot;#detect_source&quot;&gt;detect_source&lt;/a&gt;). Dies on error.</source>
          <target state="translated">与えられた&lt;a href=&quot;source&quot;&gt;TAP :: Parserの::ソースを&lt;/a&gt;、最も適した見つけた&lt;a href=&quot;sourcehandler&quot;&gt;TAPを:: Parserの:: SourceHandlerを&lt;/a&gt;作成するために使用する&lt;a href=&quot;iterator&quot;&gt;TAP :: Parserの:: Iteratorを&lt;/a&gt;（参照&lt;a href=&quot;#detect_source&quot;&gt;detect_sourceを&lt;/a&gt;）。エラーで死ぬ。</target>
        </trans-unit>
        <trans-unit id="b30c1dfc72170a71448f9b395e9b03e816f03b3d" translate="yes" xml:space="preserve">
          <source>Given a PerlIO * create a 'native' FILE * suitable for passing to code expecting to be compiled and linked with ANSI C</source>
          <target state="translated">PerlIOが与えられたとき、*ANSI Cでコンパイルされ、リンクされることを期待しているコードに渡すのに適した「ネイティブ」ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="34f965aed65d5f567330c1f887c60f3d7277e8d9" translate="yes" xml:space="preserve">
          <source>Given a chunk of memory, link it to the head of the list of arenas, and split it into a list of free SVs.</source>
          <target state="translated">メモリの塊を与えられて、それをアリーナのリストの先頭にリンクして、それを無料のSVのリストに分割します。</target>
        </trans-unit>
        <trans-unit id="ea0db9ec916b80f6d45682cc0643494437b81c63" translate="yes" xml:space="preserve">
          <source>Given a function argument and the corresponding function value, store them into the cache.</source>
          <target state="translated">関数の引数と対応する関数値が与えられると、それらをキャッシュに格納します。</target>
        </trans-unit>
        <trans-unit id="368b29d6322d5568fa6515033d024e6d8d044278" translate="yes" xml:space="preserve">
          <source>Given a function argument, is the corresponding function value in the cache, and if so, is it fresh enough to use?</source>
          <target state="translated">関数の引数が与えられた場合、対応する関数の値はキャッシュにありますか?</target>
        </trans-unit>
        <trans-unit id="f996cfe932df1fdf5f95873d9c8a6b9f9b2d54ff" translate="yes" xml:space="preserve">
          <source>Given a function argument, look up the corresponding function value in the cache and return it.</source>
          <target state="translated">関数の引数が与えられると、キャッシュ内の対応する関数の値を検索して返します。</target>
        </trans-unit>
        <trans-unit id="c3509e606900720895e02d9e89cbafec46d210bc" translate="yes" xml:space="preserve">
          <source>Given a key (&lt;code&gt;$key&lt;/code&gt; ) this method reads the value associated with it from the database. The value read from the database is returned in the &lt;code&gt;$value&lt;/code&gt; parameter.</source>
          <target state="translated">キー（ &lt;code&gt;$key&lt;/code&gt; ）を指定すると、このメソッドはそれに関連付けられた値をデータベースから読み取ります。データベースから読み取られた値は、 &lt;code&gt;$value&lt;/code&gt; パラメーターで返されます。</target>
        </trans-unit>
        <trans-unit id="e7f4f0181b47fc4d73d9cd3bbfb5acee403880eb" translate="yes" xml:space="preserve">
          <source>Given a list of args get the names of tests that should run</source>
          <target state="translated">引数のリストが与えられると、実行すべきテストの名前を取得します。</target>
        </trans-unit>
        <trans-unit id="16258c75193474948085fd76ec96dab72f546f03" translate="yes" xml:space="preserve">
          <source>Given a list of file names, strip out those that refer to a parent directory. (Does not strip symlinks, only '.', '..', and equivalents.)</source>
          <target state="translated">ファイル名のリストが与えられた場合、親ディレクトリを参照しているものを削除します。(シンボリックリンクは削除されず、'.'、'..'および同等のものだけが削除されます)。</target>
        </trans-unit>
        <trans-unit id="3f60dd44db71eb2a881f946f782f7b4489542b29" translate="yes" xml:space="preserve">
          <source>Given a list of scalars or reference variables, writes out their contents in perl syntax. The references can also be objects. The content of each variable is output in a single Perl statement. Handles self-referential structures correctly.</source>
          <target state="translated">スカラまたは参照変数のリストが与えられると、その内容をperl構文で書き出します。参照はオブジェクトにすることもできます。各変数の内容は、1つのPerl文で出力されます。自己参照構造を正しく処理します。</target>
        </trans-unit>
        <trans-unit id="3e530c4f306640476d631e5c36d6a2f051774865" translate="yes" xml:space="preserve">
          <source>Given a name or number that could appear in a &lt;code&gt;E&amp;lt;name_or_num&amp;gt;&lt;/code&gt; sequence, this returns the number of the Unicode character that this stands for. For example, &lt;code&gt;e2char('sol')&lt;/code&gt; , &lt;code&gt;e2char('47')&lt;/code&gt; , &lt;code&gt;e2char('0x2F')&lt;/code&gt; , and &lt;code&gt;e2char('057')&lt;/code&gt; all return 47, because &lt;code&gt;E&amp;lt;sol&amp;gt;&lt;/code&gt; , &lt;code&gt;E&amp;lt;47&amp;gt;&lt;/code&gt; , &lt;code&gt;E&amp;lt;0x2f&amp;gt;&lt;/code&gt; , and &lt;code&gt;E&amp;lt;057&amp;gt;&lt;/code&gt; , all mean &quot;/&quot;, whose Unicode number is 47. If the name has no known value (as with a name of &quot;qacute&quot;) or is syntactically invalid (as with a name of &quot;1/4&quot;), this returns undef.</source>
          <target state="translated">&lt;code&gt;E&amp;lt;name_or_num&amp;gt;&lt;/code&gt; シーケンスに現れる可能性のある名前または番号を指定すると、これは、これが表すUnicode文字の番号を返します。たとえば、 &lt;code&gt;e2char('sol')&lt;/code&gt; 、 &lt;code&gt;e2char('47')&lt;/code&gt; 、 &lt;code&gt;e2char('0x2F')&lt;/code&gt; 、および &lt;code&gt;e2char('057')&lt;/code&gt; すべて47を返します。これは、 &lt;code&gt;E&amp;lt;sol&amp;gt;&lt;/code&gt; 、 &lt;code&gt;E&amp;lt;47&amp;gt;&lt;/code&gt; 、 &lt;code&gt;E&amp;lt;0x2f&amp;gt;&lt;/code&gt; 、および &lt;code&gt;E&amp;lt;057&amp;gt;&lt;/code&gt; はすべて「/」を意味し、Unicode番号は47です。名前に既知の値がない場合（「qacute」の名前など）、または構文的に無効な場合（「1/4」の名前など） &quot;）、これはundefを返します。</target>
        </trans-unit>
        <trans-unit id="2023da106c6aa26bd0acc5076b02991c20277361" translate="yes" xml:space="preserve">
          <source>Given a name or number that could appear in a &lt;code&gt;E&amp;lt;name_or_num&amp;gt;&lt;/code&gt; sequence, this returns the string that it stands for. For example, &lt;code&gt;e2char('sol')&lt;/code&gt; , &lt;code&gt;e2char('47')&lt;/code&gt; , &lt;code&gt;e2char('0x2F')&lt;/code&gt; , and &lt;code&gt;e2char('057')&lt;/code&gt; all return &quot;/&quot;, because &lt;code&gt;E&amp;lt;sol&amp;gt;&lt;/code&gt; , &lt;code&gt;E&amp;lt;47&amp;gt;&lt;/code&gt; , &lt;code&gt;E&amp;lt;0x2f&amp;gt;&lt;/code&gt; , and &lt;code&gt;E&amp;lt;057&amp;gt;&lt;/code&gt; , all mean &quot;/&quot;. If the name has no known value (as with a name of &quot;qacute&quot;) or is syntactically invalid (as with a name of &quot;1/4&quot;), this returns undef.</source>
          <target state="translated">&lt;code&gt;E&amp;lt;name_or_num&amp;gt;&lt;/code&gt; シーケンスに現れる可能性のある名前または番号を指定すると、これはそれが表す文字列を返します。たとえば、 &lt;code&gt;E&amp;lt;47&amp;gt;&lt;/code&gt; &lt;code&gt;e2char('057')&lt;/code&gt; &lt;code&gt;E&amp;lt;sol&amp;gt;&lt;/code&gt; 、E &amp;lt;47&amp;gt;、 &lt;code&gt;E&amp;lt;0x2f&amp;gt;&lt;/code&gt; であるため、 &lt;code&gt;e2char('sol')&lt;/code&gt; 、 &lt;code&gt;e2char('47')&lt;/code&gt; 、 &lt;code&gt;e2char('0x2F')&lt;/code&gt; 、およびe2char（' 057 '）はすべて「/」を返します。0x2f&amp;gt;、および &lt;code&gt;E&amp;lt;057&amp;gt;&lt;/code&gt; はすべて「/」を意味します。名前に既知の値がない場合（「qacute」の名前など）、または構文的に無効な場合（「1/4」の名前など）、これはundefを返します。</target>
        </trans-unit>
        <trans-unit id="68ff8a7e4af810b7a363c9f43756d64a041cba7a" translate="yes" xml:space="preserve">
          <source>Given a packed socket address (such as from getsockname(), getpeername(), or returned by getaddrinfo() in a &lt;code&gt;addr&lt;/code&gt; field), returns the hostname and symbolic service name it represents. $flags may be a bitmask of &lt;code&gt;NI_*&lt;/code&gt; constants, or defaults to 0 if unspecified.</source>
          <target state="translated">パックされたソケットアドレス（getsockname（）、getpeername（）などから、または &lt;code&gt;addr&lt;/code&gt; フィールドのgetaddrinfo（）によって返される）を指定すると、それが表すホスト名とシンボリックサービス名を返します。$ flagsは &lt;code&gt;NI_*&lt;/code&gt; 定数のビットマスクであるか、指定されていない場合のデフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="b3ab833b08cd320284ae184893dbedaee3a8efff" translate="yes" xml:space="preserve">
          <source>Given a pointer to an &lt;code&gt;SV&lt;/code&gt; and an &lt;code&gt;=~&lt;/code&gt; operation (e.g., &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s/bob/robert/g&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr[A-Z][a-z]&lt;/a&gt;&lt;/code&gt;), substitute() modifies the string within the &lt;code&gt;SV&lt;/code&gt; as according to the operation, returning the number of substitutions made.</source>
          <target state="translated">&lt;code&gt;SV&lt;/code&gt; へのポインターと &lt;code&gt;=~&lt;/code&gt; 操作（例： &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s/bob/robert/g&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr[A-Z][a-z]&lt;/a&gt;&lt;/code&gt; ）を指定すると、substitute（）は操作に従って &lt;code&gt;SV&lt;/code&gt; 内の文字列を変更し、行われた置換。</target>
        </trans-unit>
        <trans-unit id="7df1b1c7c83c78e200c9f9cd553763264fc01f76" translate="yes" xml:space="preserve">
          <source>Given a string and a pattern (e.g., &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/clasp/&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;/\b\w*\b/&lt;/code&gt; , which in your C program might appear as &quot;/\\b\\w*\\b/&quot;), match() returns 1 if the string matches the pattern and 0 otherwise.</source>
          <target state="translated">文字列とパターン（たとえば、Cプログラムでは &quot;/ \\ b \\ w * \\ b /&quot;と表示される &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/clasp/&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;/\b\w*\b/&lt;/code&gt; ）を指定すると、match（ ）文字列がパターンに一致する場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="cb2d005ca978881d5ba03242206b93769db89d30" translate="yes" xml:space="preserve">
          <source>Given a template, returns a filehandle to the temporary file and the name of the file.</source>
          <target state="translated">テンプレートが与えられると、一時ファイルのファイルハンドルとファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="f3247eafd3bd6b87dad8bb050e03ecb6550fab7f" translate="yes" xml:space="preserve">
          <source>Given an &lt;code&gt;SV&lt;/code&gt; , a pattern, and a pointer to an empty &lt;code&gt;AV&lt;/code&gt; , matches() evaluates &lt;code&gt;$string =~ $pattern&lt;/code&gt; in a list context, and fills in</source>
          <target state="translated">与えられた &lt;code&gt;SV&lt;/code&gt; 、パターン、そして空へのポインタ &lt;code&gt;AV&lt;/code&gt; を、一致が（）を評価 &lt;code&gt;$string =~ $pattern&lt;/code&gt; リストコンテキストでは、と塗りつぶしで</target>
        </trans-unit>
        <trans-unit id="d73be34ecb8afbc83a1abc326b027cd0e5ff7367" translate="yes" xml:space="preserve">
          <source>Given an expression that specifies an element of a hash, returns true if the specified element in the hash has ever been initialized, even if the corresponding value is undefined.</source>
          <target state="translated">ハッシュの要素を指定する式が与えられた場合、対応する値が未定義であっても、ハッシュ内の指定された要素が初期化されたことがあれば真を返します。</target>
        </trans-unit>
        <trans-unit id="3860c44bdd22a4566d9e655bb9fabca95c5a3818" translate="yes" xml:space="preserve">
          <source>Given an expression that specifies an element or slice of a hash, &lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; deletes the specified elements from that hash so that exists() on that element no longer returns true. Setting a hash element to the undefined value does not remove its key, but deleting it does; see &lt;a href=&quot;exists&quot;&gt;exists&lt;/a&gt;.</source>
          <target state="translated">ハッシュの要素またはスライスを指定する式が指定された場合、 &lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; は指定された要素をそのハッシュから削除して、その要素のexists（）がtrueを返さないようにします。ハッシュ要素を未定義の値に設定しても、そのキーは削除されませんが、削除すると削除されます。&lt;a href=&quot;exists&quot;&gt;存在を&lt;/a&gt;見る。</target>
        </trans-unit>
        <trans-unit id="c148d1ff0a7aebcb28822b3e1311889c861ad3aa" translate="yes" xml:space="preserve">
          <source>Given an expression that specifies an element or slice of a hash, &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; deletes the specified elements from that hash so that exists() on that element no longer returns true. Setting a hash element to the undefined value does not remove its key, but deleting it does; see &lt;a href=&quot;#exists&quot;&gt;exists&lt;/a&gt;.</source>
          <target state="translated">ハッシュの要素またはスライスを指定する式が指定された場合、 &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; は指定された要素をそのハッシュから削除して、その要素のexists（）がtrueを返さないようにします。ハッシュ要素を未定義の値に設定しても、そのキーは削除されませんが、削除すると削除されます。&lt;a href=&quot;#exists&quot;&gt;存在を&lt;/a&gt;見る。</target>
        </trans-unit>
        <trans-unit id="b769dfb6b889a385d12cb35d230597545507bff1" translate="yes" xml:space="preserve">
          <source>Given an expression that specifies the name of a subroutine, returns true if the specified subroutine has ever been declared, even if it is undefined. Mentioning a subroutine name for exists or defined does not count as declaring it. Note that a subroutine that does not exist may still be callable: its package may have an &lt;code&gt;AUTOLOAD&lt;/code&gt; method that makes it spring into existence the first time that it is called; see &lt;a href=&quot;../perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">サブルーチンの名前を指定する式が指定された場合、指定されたサブルーチンが宣言されていれば、未定義であってもtrueを返します。existsまたはdefinedのサブルーチン名に言及しても、宣言とは見なされません。存在しないサブルーチンは引き続き呼び出し可能である可能性があることに注意してください。そのパッケージには、最初に呼び出されたときに存在するようにする &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドが含まれている場合があります。&lt;a href=&quot;../perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1e2f23a5798654b28edd73d121507fc1d6cf61ce" translate="yes" xml:space="preserve">
          <source>Given an expression that specifies the name of a subroutine, returns true if the specified subroutine has ever been declared, even if it is undefined. Mentioning a subroutine name for exists or defined does not count as declaring it. Note that a subroutine that does not exist may still be callable: its package may have an &lt;code&gt;AUTOLOAD&lt;/code&gt; method that makes it spring into existence the first time that it is called; see &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">サブルーチンの名前を指定する式が指定された場合、指定されたサブルーチンが宣言されていれば、未定義であってもtrueを返します。existsまたはdefinedのサブルーチン名に言及しても、宣言とは見なされません。存在しないサブルーチンは引き続き呼び出し可能である可能性があることに注意してください。そのパッケージには、最初に呼び出されたときに存在するようにする &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドが含まれている場合があります。&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ec3e095107124a6ef85e395cac4af42d46355e9a" translate="yes" xml:space="preserve">
          <source>Given an object, return a Perl scalar number (int/float) representing this number.</source>
          <target state="translated">オブジェクトが与えられると、この数値を表すPerlのスカラ数(int/float)を返します。</target>
        </trans-unit>
        <trans-unit id="798afe5be4d4f8caba61172a6204d0e7a4433382" translate="yes" xml:space="preserve">
          <source>Given an open filehandle and the associated filename, make a safe unlink. This is achieved by first checking that the filename and filehandle initially point to the same file and that the number of links to the file is 1 (all fields returned by stat() are compared). Then the filename is unlinked and the filehandle checked once again to verify that the number of links on that file is now 0. This is the closest you can come to making sure that the filename unlinked was the same as the file whose descriptor you hold.</source>
          <target state="translated">開いているファイルハンドルと関連するファイル名が与えられた場合、安全なリンク解除を行います。これは、まず、ファイル名とファイルハンドルが最初に同じファイルを指していることと、そのファイルへのリンクの数が 1 であることを確認することによって達成されます (stat()によって返されるすべてのフィールドが比較されます)。これは、リンクが解除されたファイル名が、あなたが保持しているディスクリプタを持つファイルと同じであることを確認するために、最も近い方法です。</target>
        </trans-unit>
        <trans-unit id="7c8d7de16830e305c76870f7520f278ced8e53b9" translate="yes" xml:space="preserve">
          <source>Given both a hostname and service name, this function attempts to resolve the host name into a list of network addresses, and the service name into a protocol and port number, and then returns a list of address structures suitable to connect() to it.</source>
          <target state="translated">この関数は、ホスト名とサービス名の両方を指定すると、ホスト名をネットワークアドレスのリストに、サービス名をプロトコルとポート番号に解決しようとし、それに connect()するのに適したアドレス構造のリストを返します。</target>
        </trans-unit>
        <trans-unit id="ef7becd595d52be668be1e1f52b6edfa071be390" translate="yes" xml:space="preserve">
          <source>Given just a host name, this function attempts to resolve it to a list of network addresses, and then returns a list of address structures giving these addresses.</source>
          <target state="translated">この関数は、単にホスト名を与えられると、それをネットワーク・アドレスのリストに解決しようとし、これらのアドレスを与えるアドレス構造のリストを返します。</target>
        </trans-unit>
        <trans-unit id="df00cd802473947a22a033a5fee10eaeb326c652" translate="yes" xml:space="preserve">
          <source>Given just a service name, this function attempts to resolve it to a protocol and port number, and then returns a list of address structures that represent it suitable to bind() to. This use should be combined with the &lt;code&gt;AI_PASSIVE&lt;/code&gt; flag; see below.</source>
          <target state="translated">サービス名のみを指定すると、この関数はそれをプロトコルとポート番号に解決しようとし、次にbind（）に適したサービスを表すアドレス構造のリストを返します。この使用は &lt;code&gt;AI_PASSIVE&lt;/code&gt; フラグと組み合わせる必要があります。下記参照。</target>
        </trans-unit>
        <trans-unit id="47c398084bf96dcff46eefda9cdadf3fedccfe90" translate="yes" xml:space="preserve">
          <source>Given neither name, it generates an error.</source>
          <target state="translated">どちらの名前も指定するとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="4946a614ce699917e8a48264ad588e74a71edfe3" translate="yes" xml:space="preserve">
          <source>Given that the file glob is just a cut-down regular expression and that it has already done a lot of the hard work in pattern matching the filenames, wouldn't it be handy to be able to use the patterns in the fileglob to drive the new filename?</source>
          <target state="translated">ファイル・グロブが単なるカットダウン正規表現であり、ファイル名のパターン・マッチングで既に多くのハードワークを行っていることを考えると、ファイル・グロブ内のパターンを使用して新しいファイル名を駆動できると便利ではないでしょうか?</target>
        </trans-unit>
        <trans-unit id="1a0688e5deb209d4898cf79e8c4e93da364593b3" translate="yes" xml:space="preserve">
          <source>Given that we failed to load &lt;code&gt;Compress::Zlib&lt;/code&gt; and that the use of an external</source>
          <target state="translated">&lt;code&gt;Compress::Zlib&lt;/code&gt; 読み込みに失敗し、外部の使用が</target>
        </trans-unit>
        <trans-unit id="25d0946db041e6b8ec000e3934554230eea3d997" translate="yes" xml:space="preserve">
          <source>Given the filename and description of a test as scalars, returns a new &lt;a href=&quot;job&quot;&gt;TAP::Parser::Scheduler::Job&lt;/a&gt; object.</source>
          <target state="translated">テストのファイル名と説明をスカラーとして指定すると、新しい&lt;a href=&quot;job&quot;&gt;TAP :: Parser :: Scheduler :: Job&lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="8321e912ffb7fc1712a163f5114b8b8cfc71ea6c" translate="yes" xml:space="preserve">
          <source>Given the following module, PerlIO::via::Hex :</source>
          <target state="translated">次のようなモジュールがあると、PerlIO::via::Hex .</target>
        </trans-unit>
        <trans-unit id="b1732b671f9a08843781c433880de7a9be2cae19" translate="yes" xml:space="preserve">
          <source>Given the following notations:</source>
          <target state="translated">以下の表記を考えると</target>
        </trans-unit>
        <trans-unit id="d2cba25d77a3267a4c7e81b67be7cfba4a549ed5" translate="yes" xml:space="preserve">
          <source>Given the name of a lexical variable, find its position in the currently-compiling pad.</source>
          <target state="translated">字句変数の名前が与えられると、現在コンパイル中のパッド内のその位置を見つけます。</target>
        </trans-unit>
        <trans-unit id="4e332da4ace4bc5d01c9ceda2ce9f67dcc253135" translate="yes" xml:space="preserve">
          <source>Given the root of an optree, link the tree in execution order using the &lt;code&gt;op_next&lt;/code&gt; pointers and return the first op executed. If this has already been done, it will not be redone, and &lt;code&gt;o-&amp;gt;op_next&lt;/code&gt; will be returned. If &lt;code&gt;o-&amp;gt;op_next&lt;/code&gt; is not already set,</source>
          <target state="translated">optreeのルートを指定すると、 &lt;code&gt;op_next&lt;/code&gt; ポインターを使用してツリーを実行順にリンクし、実行された最初のopを返します。これがすでに行われている場合、それはやり直されず、 &lt;code&gt;o-&amp;gt;op_next&lt;/code&gt; が返されます。 &lt;code&gt;o-&amp;gt;op_next&lt;/code&gt; がまだ設定されていない場合、</target>
        </trans-unit>
        <trans-unit id="084725aa23e7fe3c0d543b97b1c7320210101746" translate="yes" xml:space="preserve">
          <source>Given the sheer volume of Perl documentation, this isn't a trivial undertaking, but if you can point to documentation that suggests the behaviour you're seeing is</source>
          <target state="translated">Perl のドキュメントの膨大な量を考えると、これは些細なことではありませんが、もしあなたが見ている動作を示唆するドキュメントを示すことができれば</target>
        </trans-unit>
        <trans-unit id="a51193d192cf9332f4f5d4257e036cab9b0cff3c" translate="yes" xml:space="preserve">
          <source>Given this as an input string in a scalar context, &lt;code&gt;extract_quotelike&lt;/code&gt; would correctly return the string &quot;&amp;lt;&amp;lt;'EOMSG'\nThis is the message.\nEOMSG&quot;, leaving the string &quot; || die;\nexit;&quot; in the original variable. In other words, the two separate pieces of the here document are successfully extracted and concatenated.</source>
          <target state="translated">これをスカラーコンテキストの入力文字列として指定すると、 &lt;code&gt;extract_quotelike&lt;/code&gt; は文字列「&amp;lt;&amp;lt; 'EOMSG' \ nこれはメッセージです。\ nEOMSG」を返し、文字列「|| die; \ nexit;」を残します。元の変数で。つまり、ヒアドキュメントの2つの別々の部分が正常に抽出され、連結されます。</target>
        </trans-unit>
        <trans-unit id="a8255eb67db18215cafd66b8bf6854ff058e58c2" translate="yes" xml:space="preserve">
          <source>Given two perl versions, this returns a list of pairs describing the changes in core module content between them. The list is suitable for storing in a hash. The keys are library names and the values are hashrefs. Each hashref has an entry for one or both of &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; , giving the versions of the library in each of the left and right perl distributions.</source>
          <target state="translated">2つのperlバージョンが与えられた場合、これは、それらの間のコアモジュールコンテンツの変更を説明するペアのリストを返します。リストはハッシュに格納するのに適しています。キーはライブラリ名であり、値はハッシュ参照です。各hashrefには、 &lt;code&gt;left&lt;/code&gt; および &lt;code&gt;right&lt;/code&gt; の一方または両方のエントリがあり、左右のperlディストリビューションのそれぞれにあるライブラリのバージョンを提供します。</target>
        </trans-unit>
        <trans-unit id="d3e8e0d7ce171e4fc80eeb08f47d5a4cc76a6ae2" translate="yes" xml:space="preserve">
          <source>Given two versions of perl, this prints a human-readable table of all module changes between the two. The output format may change in the future, and is meant for</source>
          <target state="translated">perlの2つのバージョンが与えられた場合、これは2つの間のすべてのモジュールの変更点を人間が読めるように表にして出力します。この出力形式は将来変更されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d8e6036259b26c2d9989b981df7306264ca46f69" translate="yes" xml:space="preserve">
          <source>Gives a description of each test prior to performing it.</source>
          <target state="translated">各テストを実行する前に、各テストの説明を提供します。</target>
        </trans-unit>
        <trans-unit id="95e8be14901e94fb491dfdf5b70ee1b95c0f63d7" translate="yes" xml:space="preserve">
          <source>Gives more detailed information about each test, after it has been performed. Note that any failed tests ought to print out some extra information whether or not -v is thrown.</source>
          <target state="translated">各テストが実行された後に、より詳細な情報を提供します。失敗したテストは、-v が投げられたかどうかに関わらず、余分な情報を表示することに注意してください。</target>
        </trans-unit>
        <trans-unit id="8cd5accb9bbe824d3f2172984bdf0c7f749a0330" translate="yes" xml:space="preserve">
          <source>Gives the information about the Perl DLL or the DLL containing the C function bound to by &lt;code&gt;&amp;amp;xsub&lt;/code&gt; . The meaning of &lt;code&gt;how&lt;/code&gt; is: default (2): full name; 0: handle; 1: module name.</source>
          <target state="translated">Perl DLLまたは &lt;code&gt;&amp;amp;xsub&lt;/code&gt; によってバインドされたC関数を含むDLLに関する情報を提供します。 &lt;code&gt;how&lt;/code&gt; の意味は次のとおりです。デフォルト（2）：フルネーム。0：ハンドル。1：モジュール名。</target>
        </trans-unit>
        <trans-unit id="9ce00937b225bda0f6de7705049c711ca2d0c0b1" translate="yes" xml:space="preserve">
          <source>Gives the string value of &lt;code&gt;arg&lt;/code&gt; as in the absence of stringify overloading. If you are using this to get the address of a reference (useful for checking if two references point to the same thing) then you may be better off using &lt;code&gt;Scalar::Util::refaddr()&lt;/code&gt; , which is faster.</source>
          <target state="translated">stringifyオーバーロードがない場合のように、 &lt;code&gt;arg&lt;/code&gt; の文字列値を指定します。これを使用して参照のアドレスを取得している場合（2つの参照が同じものを指しているかどうかを確認するのに便利です）、 &lt;code&gt;Scalar::Util::refaddr()&lt;/code&gt; を使用する方が高速です。</target>
        </trans-unit>
        <trans-unit id="cfe98f7aeaa456c4237c94f0fd4653d71593c9bc" translate="yes" xml:space="preserve">
          <source>Gives the type of hints used for previous answers. May be one of &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;recommended&lt;/code&gt; or &lt;code&gt;previous&lt;/code&gt; .</source>
          <target state="translated">以前の回答に使用されたヒントのタイプを示します。 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;recommended&lt;/code&gt; または &lt;code&gt;previous&lt;/code&gt; いずれかになります。</target>
        </trans-unit>
        <trans-unit id="d71dccbe06d617b4160092d77a20fffa36b965b4" translate="yes" xml:space="preserve">
          <source>Giving a struct element a class type that is also a struct is how structs are nested. Here, &lt;code&gt;Timeval&lt;/code&gt; represents a time (seconds and microseconds), and &lt;code&gt;Rusage&lt;/code&gt; has two elements, each of which is of type &lt;code&gt;Timeval&lt;/code&gt; .</source>
          <target state="translated">struct要素に、structでもあるクラス型を与えることは、structがネストされる方法です。ここで、 &lt;code&gt;Timeval&lt;/code&gt; は時間（秒およびマイクロ秒）を表し、 &lt;code&gt;Rusage&lt;/code&gt; には2つの要素があり、それぞれ &lt;code&gt;Timeval&lt;/code&gt; 型です。</target>
        </trans-unit>
        <trans-unit id="d166f9da4bac6d857f7dc131be5d65de1b02def6" translate="yes" xml:space="preserve">
          <source>Giving additional meanings to a symbol or construct. Actually, all languages do overloading to one extent or another, since people are good at figuring out things from &lt;b&gt;context&lt;/b&gt;.</source>
          <target state="translated">シンボルまたは構成に追加の意味を与える。実際、人々は&lt;b&gt;文脈&lt;/b&gt;から物事を理解するのが得意なので、すべての言語はある程度まで過負荷になってい&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="e8b8f975ca429de01bb46828d5e9ad364deeb90c" translate="yes" xml:space="preserve">
          <source>Giving an invalid value for &lt;code&gt;$sock_type&lt;/code&gt; will &lt;code&gt;croak&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$sock_type&lt;/code&gt; 無効な値を与えると &lt;code&gt;croak&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="0f57f0ea36677c92cf9afe99cb8959d03cc0961e" translate="yes" xml:space="preserve">
          <source>Giving up control</source>
          <target state="translated">コントロールを放棄する</target>
        </trans-unit>
        <trans-unit id="ac34b82dc93bde9b29a5a3004c3ddbeef7e257a6" translate="yes" xml:space="preserve">
          <source>Glob elements can be extracted through the postfix dereferencing feature:</source>
          <target state="translated">Glob要素は、postfixの参照解除機能を使って抽出することができます。</target>
        </trans-unit>
        <trans-unit id="a2bba5393d5751445bbbac73e8d2d26ee97a6c53" translate="yes" xml:space="preserve">
          <source>Glob-style pattern matching for rules</source>
          <target state="translated">ルールのためのグローバルスタイルのパターンマッチング</target>
        </trans-unit>
        <trans-unit id="f4853985ae8961c644b701f3a4211e427659afca" translate="yes" xml:space="preserve">
          <source>Global Destruction</source>
          <target state="translated">世界的な破壊</target>
        </trans-unit>
        <trans-unit id="d4326c5fc3d6b26143e4368742fe314ae01c47ca" translate="yes" xml:space="preserve">
          <source>Global Overriding</source>
          <target state="translated">グローバルオーバーライド</target>
        </trans-unit>
        <trans-unit id="2ff4e53e2b802e1ec127c83da80fa5fc4b5333fa" translate="yes" xml:space="preserve">
          <source>Global Variables</source>
          <target state="translated">グローバル変数</target>
        </trans-unit>
        <trans-unit id="c74b56bb1057578230abe272aa56e202301adbc0" translate="yes" xml:space="preserve">
          <source>Global destruction.</source>
          <target state="translated">世界的な破壊。</target>
        </trans-unit>
        <trans-unit id="e7f5c9eb53159b83da104e3bda376cd7346692a8" translate="yes" xml:space="preserve">
          <source>Global matching</source>
          <target state="translated">グローバルマッチング</target>
        </trans-unit>
        <trans-unit id="3650821866c81f2ac2894b41d87da9c715e1e8ce" translate="yes" xml:space="preserve">
          <source>Glue to provide EXISTS for AnyDBM_File for Storable use</source>
          <target state="translated">保存可能なAnyDBM_FileにEXISTSを提供するための接着剤</target>
        </trans-unit>
        <trans-unit id="4909b3a46d83dbbf52b8710b4dc26c66ca78944e" translate="yes" xml:space="preserve">
          <source>Glue to provide EXISTS for NDBM_File for Storable use</source>
          <target state="translated">NDBM_FileのEXISTSを保存用に提供するための接着剤</target>
        </trans-unit>
        <trans-unit id="d57f000cec87f12e43b8b27b36323279bd6bf351" translate="yes" xml:space="preserve">
          <source>Glue to provide EXISTS for SDBM_File for Storable use</source>
          <target state="translated">保存可能なSDBM_FileにEXISTSを提供するための接着剤</target>
        </trans-unit>
        <trans-unit id="1ef566e266fcd5938f2e20f4951576b582c8951b" translate="yes" xml:space="preserve">
          <source>Go and write your program. Everywhere in your program where you would say:</source>
          <target state="translated">あなたのプログラムを書いてみてください。あなたのプログラムのどこにでも、あなたが言うであろう。</target>
        </trans-unit>
        <trans-unit id="17a5012f10d8e9cdb0ba165e243a06151fb8f234" translate="yes" xml:space="preserve">
          <source>Go into the newly-created directory and type:</source>
          <target state="translated">新しく作成したディレクトリに移動してタイプします。</target>
        </trans-unit>
        <trans-unit id="29c6ec10417b35abc144d3f4a0729c76abf5e284" translate="yes" xml:space="preserve">
          <source>Going past the 70th column in a verbatim block might be ungracefully wrapped by some formatters.</source>
          <target state="translated">冗長ブロックの70列目を過ぎると、フォーマッタによっては不格好に包まれてしまうかもしれません。</target>
        </trans-unit>
        <trans-unit id="4a647f902e0d765ea12195a96e4829f8b1e8aa9f" translate="yes" xml:space="preserve">
          <source>Good Practices</source>
          <target state="translated">グッドプラクティス</target>
        </trans-unit>
        <trans-unit id="7d80a18b9b9c68e6a7c1c8a8d0dbf303700b7763" translate="yes" xml:space="preserve">
          <source>Good example:</source>
          <target state="translated">良い例だ</target>
        </trans-unit>
        <trans-unit id="4143405b286941b2e4ea2b9f669d260327d04f9b" translate="yes" xml:space="preserve">
          <source>Good for tracking down why things don't work with your particular setup.</source>
          <target state="translated">あなたの特定の設定で動作しない理由を追跡するのに良いです。</target>
        </trans-unit>
        <trans-unit id="f73c69efaf3df1b92a97b27aa347eb13fea306c3" translate="yes" xml:space="preserve">
          <source>Good patches (tight code, complete, correct) stand more chance of going in. Sloppy or incorrect patches might be placed on the back burner until the pumpking has time to fix, or might be discarded altogether without further notice.</source>
          <target state="translated">良いパッチ(コードがしっかりしていて、完全で、正しい)は、より多くのチャンスを与えてくれます。ずさんなパッチや不正確なパッチは、かぼちゃが修正する時間があるまでバックバーナーに置かれるかもしれませんし、それ以上の通知なしに完全に破棄されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="96e99dfa2e51dca66243d416a2cf4eff66499d06" translate="yes" xml:space="preserve">
          <source>Good places to look for pre-existing modules include &lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/&lt;/a&gt; and &lt;a href=&quot;https://metacpan.org&quot;&gt;https://metacpan.org&lt;/a&gt; and asking on &lt;code&gt;module-authors@perl.org&lt;/code&gt; (&lt;a href=&quot;http://lists.perl.org/list/module-authors.html&quot;&gt;http://lists.perl.org/list/module-authors.html&lt;/a&gt;).</source>
          <target state="translated">既存のモジュールを探すのに適した場所には、&lt;a href=&quot;http://search.cpan.org/&quot;&gt;http：&lt;/a&gt; &lt;code&gt;module-authors@perl.org&lt;/code&gt; および&lt;a href=&quot;https://metacpan.org&quot;&gt;https://metacpan.orgが&lt;/a&gt;あり、module- authors @ perl.org（&lt;a href=&quot;http://lists.perl.org/list/module-authors.html&quot;&gt;http://lists.perl.org/list /module-authors.html&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1707029b59612c93d147b82e0c5b435886ce180c" translate="yes" xml:space="preserve">
          <source>Gory details of parsing quoted constructs</source>
          <target state="translated">引用された構文の解析の詳細</target>
        </trans-unit>
        <trans-unit id="23f16c19388eabd103562554c9bfa091b6dac302" translate="yes" xml:space="preserve">
          <source>Got that? As of Perl 5.8.7, &lt;b&gt;&quot;UTF-8&quot;&lt;/b&gt; means UTF-8 in its current sense, which is conservative and strict and security-conscious, whereas &lt;b&gt;&quot;utf8&quot;&lt;/b&gt; means UTF-8 in its former sense, which was liberal and loose and lax. &lt;code&gt;Encode&lt;/code&gt; version 2.10 or later thus groks this subtle but critically important distinction between &lt;code&gt;&quot;UTF-8&quot;&lt;/code&gt; and &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; .</source>
          <target state="translated">わかった？Perl 5.8.7以降では、&lt;b&gt;「UTF-8」&lt;/b&gt;は現在の意味でのUTF-8を意味します。これは保守的で厳格でセキュリティを意識しています。一方、&lt;b&gt;「utf8」&lt;/b&gt;は以前の意味でのUTF-8を意味します。緩い。 &lt;code&gt;Encode&lt;/code&gt; バージョン2.10以降では、このように &lt;code&gt;&quot;UTF-8&quot;&lt;/code&gt; と &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; の間のこの微妙ではあるが非常に重要な区別が増えています。</target>
        </trans-unit>
        <trans-unit id="0b4fc0a0d78b25de463f95089769282373893971" translate="yes" xml:space="preserve">
          <source>Got that? Larry is always right, even when he was wrong. It's rare to see either Rule exercised, but they are often alluded to.</source>
          <target state="translated">分かったか? ラリーは間違っていても常に正しい どちらのルールも行使されているのを見るのは稀だが、よく言及されている。</target>
        </trans-unit>
        <trans-unit id="0a9ffc4a328e6d21b11f3b8312d08e5b413aec49" translate="yes" xml:space="preserve">
          <source>Goto</source>
          <target state="translated">Goto</target>
        </trans-unit>
        <trans-unit id="ca69ac23523fe10118230a18e01d42c76c8abcda" translate="yes" xml:space="preserve">
          <source>Goto celib-palm-3.0\inc\cewin32.h, search for</source>
          <target state="translated">Goto celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h,search for the celib-palm-3.0inc\cewin32.h</target>
        </trans-unit>
        <trans-unit id="5890e910925d55654694f7ac1d42c03b68abbff2" translate="yes" xml:space="preserve">
          <source>Gotta have a plan!</source>
          <target state="translated">計画を立てないと!</target>
        </trans-unit>
        <trans-unit id="df8da02e8026798b67902a6787a5e32f5d1a8e68" translate="yes" xml:space="preserve">
          <source>Gprof Profiling</source>
          <target state="translated">Gprofプロファイリング</target>
        </trans-unit>
        <trans-unit id="3259bccd5547a6fb8f77a4aaea022a14a41cb136" translate="yes" xml:space="preserve">
          <source>Graham Barr &amp;lt;</source>
          <target state="translated">グラハムバー&amp;lt;</target>
        </trans-unit>
        <trans-unit id="42879164d6188855410d722427bd053e05e54ab7" translate="yes" xml:space="preserve">
          <source>Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;</source>
          <target state="translated">グラハムバー&amp;lt;gbarr@pobox.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3732fa7e665009645e9e3e4379dd15edc1deb872" translate="yes" xml:space="preserve">
          <source>Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;, Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;, Marcus Holland-Moritz &amp;lt;mhx@cpan.org&amp;gt;</source>
          <target state="translated">Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;、Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;、Marcus Holland-Moritz &amp;lt;mhx@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="04f7ed11e65f8179b2c21de31c70c0e5a2b54f2f" translate="yes" xml:space="preserve">
          <source>Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;, Marcus Holland-Moritz &amp;lt;mhx@cpan.org&amp;gt;</source>
          <target state="translated">Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;、Marcus Holland-Moritz &amp;lt;mhx@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="7820aa7c6db183e706a7e84c2116e052f42811c0" translate="yes" xml:space="preserve">
          <source>Graham Barr, the original Configure script of libnet.</source>
          <target state="translated">libnetの元祖ConfigureスクリプトであるGraham Barr。</target>
        </trans-unit>
        <trans-unit id="6433e49daadbc911a68d39c3c194d36d03e3dce3" translate="yes" xml:space="preserve">
          <source>Graham Barr. Currently maintained by the Perl Porters. Please report all bugs to &amp;lt;perlbug@perl.org&amp;gt;.</source>
          <target state="translated">グラハム・バー。現在、Perlポーターによって保守されています。すべてのバグを&amp;lt;perlbug@perl.org&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="87a1ea2f5e9ab380ccaeb3b75aeec67585ecc358" translate="yes" xml:space="preserve">
          <source>Graham Barr. atmark() by Lincoln Stein. Currently maintained by the Perl Porters. Please report all bugs to &amp;lt;perlbug@perl.org&amp;gt;.</source>
          <target state="translated">グラハム・バー。リンカーンスタインによるatmark（）。現在、Perlポーターによって保守されています。すべてのバグを&amp;lt;perlbug@perl.org&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="851fd61fa3fb1f5808ef8c8f9dd236974160fdad" translate="yes" xml:space="preserve">
          <source>Graham Knop &amp;lt;haarg@haarg.org&amp;gt;</source>
          <target state="translated">Graham Knop &amp;lt;haarg@haarg.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="dd17342cb47b948d64f169d73cfeec3f8b3e3f31" translate="yes" xml:space="preserve">
          <source>Grammar</source>
          <target state="translated">Grammar</target>
        </trans-unit>
        <trans-unit id="ca8c988917ca583e838e2647bffdc0dd152b9fb8" translate="yes" xml:space="preserve">
          <source>Grammatical note on local()</source>
          <target state="translated">local()の文法的な注意事項</target>
        </trans-unit>
        <trans-unit id="844b43fd71cbef7f18e867fe292f5c5684e1ab12" translate="yes" xml:space="preserve">
          <source>Great care is necessary when defining the command if quoting needs to be done. For instance, you would need to say:</source>
          <target state="translated">クォートする必要がある場合、コマンドを定義する際には細心の注意が必要です。例えば、次のように言う必要があります。</target>
        </trans-unit>
        <trans-unit id="8c5e7d8a89c7b18aac43a9485b1546ac5b284f75" translate="yes" xml:space="preserve">
          <source>Group ID&amp;mdash;in Unix, the numeric group ID that the &lt;b&gt;operating system&lt;/b&gt; uses to identify you and members of your &lt;b&gt;group&lt;/b&gt;.</source>
          <target state="translated">グループID-Unixでは、&lt;b&gt;オペレーティングシステム&lt;/b&gt;がユーザーと&lt;b&gt;グループの&lt;/b&gt;メンバーを識別するために使用する数値のグループID 。</target>
        </trans-unit>
        <trans-unit id="16a718e915556d62f893e87ee82787d36995c7e4" translate="yes" xml:space="preserve">
          <source>Group Perl's functions a la perlfunc.pod</source>
          <target state="translated">perlfunc.podのようにPerlの関数をグループ化する</target>
        </trans-unit>
        <trans-unit id="ba2d2b2b97d3fc7cff00f1012c3e7d17c04c2768" translate="yes" xml:space="preserve">
          <source>Group of languages collectively called &quot;Otom&amp;iacute;&quot;.</source>
          <target state="translated">まとめて「オトミ」と呼ばれる言語のグループ。</target>
        </trans-unit>
        <trans-unit id="cb77c777665eaa5c9fc03cd1712f2d2993483948" translate="yes" xml:space="preserve">
          <source>Group ownwership of directories that already exist will not be changed.</source>
          <target state="translated">既に存在するディレクトリのグループ所有権は変更されません。</target>
        </trans-unit>
        <trans-unit id="fc00408fdf05ce5150089b75b75b23c46962261d" translate="yes" xml:space="preserve">
          <source>Grouping things and hierarchical matching</source>
          <target state="translated">物事のグループ化と階層的なマッチング</target>
        </trans-unit>
        <trans-unit id="fee5f710c9ba7310f55f4c68e3911ad898f334f8" translate="yes" xml:space="preserve">
          <source>Growing Your Own</source>
          <target state="translated">自分自身を成長させる</target>
        </trans-unit>
        <trans-unit id="7864c5c65bb01ac0a14a3115852b7c02219c584f" translate="yes" xml:space="preserve">
          <source>Guaran&amp;iacute;</source>
          <target state="translated">Guaran&amp;iacute;</target>
        </trans-unit>
        <trans-unit id="23ca9988de5733d8c8247a3e4e4982df4f209ed4" translate="yes" xml:space="preserve">
          <source>Guess the name of this package by examining the working directory's name. MakeMaker calls this only if the developer has not supplied a NAME attribute.</source>
          <target state="translated">作業ディレクトリの名前を調べて、このパッケージの名前を推測します。MakeMaker は、開発者が NAME 属性を指定していない場合にのみこれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="07aa51a012723e8368dc093b343c1ff642baa052" translate="yes" xml:space="preserve">
          <source>Guess.U</source>
          <target state="translated">Guess.U</target>
        </trans-unit>
        <trans-unit id="b6684e2eba17124bde1d0355e24c5684aef1bed6" translate="yes" xml:space="preserve">
          <source>Guesses encoding from data</source>
          <target state="translated">データからエンコーディングを推測</target>
        </trans-unit>
        <trans-unit id="73b139c37c0097cfe3599d3082c96b0c2aee8d6a" translate="yes" xml:space="preserve">
          <source>Guidelines for Converting Perl 4 Library Scripts into Modules</source>
          <target state="translated">Perl 4 ライブラリスクリプトをモジュールに変換するためのガイドライン</target>
        </trans-unit>
        <trans-unit id="c758bdbdcf1ca454825428e4f69546fbfdaf18d9" translate="yes" xml:space="preserve">
          <source>Guidelines for Module Creation</source>
          <target state="translated">モジュール作成ガイドライン</target>
        </trans-unit>
        <trans-unit id="5fc6aecec704586c9198ddc6d24910690ea4c4e4" translate="yes" xml:space="preserve">
          <source>Guidelines for Reusing Application Code</source>
          <target state="translated">アプリケーションコード再利用ガイドライン</target>
        </trans-unit>
        <trans-unit id="9f22068b470b55c5659b24a529d486d165efe1e8" translate="yes" xml:space="preserve">
          <source>Gulliver's Travels</source>
          <target state="translated">ガリバーの旅</target>
        </trans-unit>
        <trans-unit id="d3d42475682a0666adb5abe77243023160ef0a45" translate="yes" xml:space="preserve">
          <source>Gunzip/gzip for OS/390 is discussed at:</source>
          <target state="translated">OS/390用のGunzip/gzipについては、こちらを参照してください。</target>
        </trans-unit>
        <trans-unit id="93a0fe097041b93e0be65ee154daffc6b1381bc9" translate="yes" xml:space="preserve">
          <source>Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;</source>
          <target state="translated">グルサミーサラシー&amp;lt;gsar@activestate.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d960951b2cdfc9f9204beae43f12a4a11b295b41" translate="yes" xml:space="preserve">
          <source>Gurusamy Sarathy gsar@activestate.com</source>
          <target state="translated">グルサミー・サラシー gsar@activestate.com</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="58edf605e14f939b5061c16becc3c237b2cf3c47" translate="yes" xml:space="preserve">
          <source>H.Merijn Brand &amp;lt;h.m.brand@xs4all.nl&amp;gt; Jeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;</source>
          <target state="translated">H.Merijn Brand &amp;lt;hmbrand@xs4all.nl&amp;gt; Jeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="47ce9e7227c5c88413414b245a64737d1d7aa032" translate="yes" xml:space="preserve">
          <source>HANDLE-&amp;gt;autoflush( EXPR )</source>
          <target state="translated">ハンドル-&amp;gt; autoflush（EXPR）</target>
        </trans-unit>
        <trans-unit id="e39692187e35b8d86da8462f683967a48317dea2" translate="yes" xml:space="preserve">
          <source>HANDLE-&amp;gt;format_lines_left(EXPR)</source>
          <target state="translated">HANDLE-&amp;gt;format_lines_left(EXPR)</target>
        </trans-unit>
        <trans-unit id="209a918918c25cd99d83f2f0dbbc4f467dc693f1" translate="yes" xml:space="preserve">
          <source>HANDLE-&amp;gt;format_lines_per_page(EXPR)</source>
          <target state="translated">HANDLE-&amp;gt;format_lines_per_page(EXPR)</target>
        </trans-unit>
        <trans-unit id="f1d2f9361bebc33157aeedef49dc5f8e73598847" translate="yes" xml:space="preserve">
          <source>HANDLE-&amp;gt;format_name(EXPR)</source>
          <target state="translated">HANDLE-&amp;gt;format_name(EXPR)</target>
        </trans-unit>
        <trans-unit id="0c9bdf53fa0c2bc01c5c44ec8066b07d741898ab" translate="yes" xml:space="preserve">
          <source>HANDLE-&amp;gt;format_page_number(EXPR)</source>
          <target state="translated">HANDLE-&amp;gt;format_page_number(EXPR)</target>
        </trans-unit>
        <trans-unit id="7462f62c1d1e40bafc8b07b413de84a660ada74e" translate="yes" xml:space="preserve">
          <source>HANDLE-&amp;gt;format_top_name(EXPR)</source>
          <target state="translated">HANDLE-&amp;gt;format_top_name(EXPR)</target>
        </trans-unit>
        <trans-unit id="69f09f09d96a3982a3608cf0a03c946ae72aee61" translate="yes" xml:space="preserve">
          <source>HANDLE-&amp;gt;input_line_number( EXPR )</source>
          <target state="translated">HANDLE-&amp;gt; input_line_number（EXPR）</target>
        </trans-unit>
        <trans-unit id="789c59b41e5418de142d321c95b023de4bdfe79e" translate="yes" xml:space="preserve">
          <source>HASHES OF ARRAYS</source>
          <target state="translated">列のハッシュ</target>
        </trans-unit>
        <trans-unit id="530c7188bb0935938e3b58577815f4334a49e6ef" translate="yes" xml:space="preserve">
          <source>HASHES OF HASHES</source>
          <target state="translated">ハッシュのハッシュ</target>
        </trans-unit>
        <trans-unit id="a880c390a6cf41f70f9a43af2b194442bbe8c615" translate="yes" xml:space="preserve">
          <source>HEY</source>
          <target state="translated">HEY</target>
        </trans-unit>
        <trans-unit id="fc5d4b9117ba9e87388174aee4f4970bdfe8d066" translate="yes" xml:space="preserve">
          <source>HH</source>
          <target state="translated">HH</target>
        </trans-unit>
        <trans-unit id="5b8cce18efcb259ac8ee29e1cd21dcc198081fdb" translate="yes" xml:space="preserve">
          <source>HHHH</source>
          <target state="translated">HHHH</target>
        </trans-unit>
        <trans-unit id="9c2ea135ec1db4f446c806f7895ae6f2c302104a" translate="yes" xml:space="preserve">
          <source>HINTS AND TIPS</source>
          <target state="translated">ヒントとヒント</target>
        </trans-unit>
        <trans-unit id="f6dc58f5e8036353a7ac15516c30ac562e23dc26" translate="yes" xml:space="preserve">
          <source>HISTORY</source>
          <target state="translated">HISTORY</target>
        </trans-unit>
        <trans-unit id="d0e8f9a5a2dbdd8722af6ec7f2972e1375fb801e" translate="yes" xml:space="preserve">
          <source>HMAC-SHA-1/224/256/384/512</source>
          <target state="translated">HMAC-SHA-1/224/256/384/512</target>
        </trans-unit>
        <trans-unit id="a76f8ee2872265eb6fe359928ee6904e71dc9d05" translate="yes" xml:space="preserve">
          <source>HOW IT WORKS</source>
          <target state="translated">仕組み</target>
        </trans-unit>
        <trans-unit id="eab9f433c21086a197b4e1c36ca01d70a2e0dffa" translate="yes" xml:space="preserve">
          <source>HOW TO USE MAKETEXT</source>
          <target state="translated">MAKETEXTの使い方</target>
        </trans-unit>
        <trans-unit id="6ab52b908787e3ae467e585a2243118089d23d99" translate="yes" xml:space="preserve">
          <source>HP Itanium 2 systems are usually referred to with model description &quot;HP Integrity&quot;.</source>
          <target state="translated">HP Itanium 2システムは、通常「HP Integrity」というモデル表記で呼ばれています。</target>
        </trans-unit>
        <trans-unit id="9e3417f4faadcebc07bb9497031485b632cc05e1" translate="yes" xml:space="preserve">
          <source>HP also ships servers with the 128-bit Itanium processor(s). The cx26x0 is told to have Madison 6. As of the date of this document's last update, the following systems contain Itanium or Itanium 2 chips (this is likely to be out of date):</source>
          <target state="translated">HPは128ビットItaniumプロセッサを搭載したサーバーも出荷しています。cx26x0 には Madison 6 が搭載されていると言われています。この文書の最終更新日の時点で、以下のシステムには Itanium または Itanium 2 チップが搭載されています (これは古い可能性があります)。</target>
        </trans-unit>
        <trans-unit id="2d0a2c854fdfe25037f6f2462163a3677a8c0d9a" translate="yes" xml:space="preserve">
          <source>HP has asked the porting centre to move Open Source binaries from /opt to /usr/local, so binaries produced since the start of July 2002 are located in /usr/local.</source>
          <target state="translated">HP は移植センターにオープンソースのバイナリを /opt から /usr/local に移動するように依頼したので、2002 年 7 月の開始以降に生成されたバイナリは /usr/local に置かれています。</target>
        </trans-unit>
        <trans-unit id="a764a39116b67d584d0e922398f34d8a6157ce49" translate="yes" xml:space="preserve">
          <source>HP porting centre tries to keep up with customer demand and release updates from the Open Source community. Having precompiled Perl binaries available is obvious, though &quot;up-to-date&quot; is something relative. At the moment of writing only perl-5.10.1 was available (with 5.16.3 being the latest stable release from the porters point of view).</source>
          <target state="translated">HP 移植センターは、顧客の要望に応え、オープンソースコミュニティからのアップデートをリリースしようとしています。プリコンパイルされた Perl バイナリが利用可能であることは明らかですが、「最新」というのは相対的なものです。この記事を書いている時点では、5.10.1 だけが利用可能です (移植者の観点からは 5.16.3 が最新の安定版リリースです)。</target>
        </trans-unit>
        <trans-unit id="9dbd2af4559edefe4dd19c07c7c19b95825a0430" translate="yes" xml:space="preserve">
          <source>HP's HP9000 Unix systems run on HP's own Precision Architecture (PA-RISC) chip. HP-UX used to run on the Motorola MC68000 family of chips, but any machine with this chip in it is quite obsolete and this document will not attempt to address issues for compiling Perl on the Motorola chipset.</source>
          <target state="translated">HP の HP9000 Unix システムは HP 独自の Precision Architecture (PA-RISC)チップ上で動作します。HP-UX は Motorola MC68000 ファミリーのチップ上で動作していましたが、このチップを搭載しているマシンは、かなり時代遅れのものであり、この文書では Motorola チップセット上で Perl をコンパイルする際の問題には対処しません。</target>
        </trans-unit>
        <trans-unit id="5d006886dc4fd65e0adca5c8c02c5767eb4d1359" translate="yes" xml:space="preserve">
          <source>HP-UX 11 Y2K patch &quot;Y2K-1100 B.11.00.B0125 HP-UX Core OS Year 2000 Patch Bundle&quot; has been reported to break the io/fs test #18 which tests whether utime() can change timestamps. The Y2K patch seems to break utime() so that over NFS the timestamps do not get changed (on local filesystems utime() still works). This has probably been fixed on your system by now.</source>
          <target state="translated">HP-UX 11 Y2K パッチ「Y2K-1100 B.11.00.B0125 HP-UX Core OS Year 2000 Patch Bundle」は、 utime()がタイムスタンプを変更できるかどうかをテストする io/fs テスト #18 を破ることが報告されています。Y2K パッチでは utime()が壊れているようで、NFS 上ではタイムスタンプが変更されません (ローカルファイルシステム上では utime()はまだ動作します)。これはおそらく、あなたのシステムではもう修正されているでしょう。</target>
        </trans-unit>
        <trans-unit id="97187cfde6c75a8b8deebd75a13a60ae1c81f420" translate="yes" xml:space="preserve">
          <source>HP-UX 11i documentation on syslog, &lt;a href=&quot;http://docs.hp.com/en/B2355-60130/syslog.3C.html&quot;&gt;http://docs.hp.com/en/B2355-60130/syslog.3C.html&lt;/a&gt;</source>
          <target state="translated">syslogに関するHP-UX 11iのドキュメント、&lt;a href=&quot;http://docs.hp.com/en/B2355-60130/syslog.3C.html&quot;&gt;http：//docs.hp.com/en/B2355-60130/syslog.3C.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed2a9bb260e4ae72bbe1af113a3b7bdf4f05246c" translate="yes" xml:space="preserve">
          <source>HP-UX Kernel Parameters (maxdsiz) for Compiling Perl</source>
          <target state="translated">Perl をコンパイルするための HP-UX カーネルパラメータ (maxdsiz)</target>
        </trans-unit>
        <trans-unit id="83019d5a780dd0ff3c9db7fabc3a90c74127c6c2" translate="yes" xml:space="preserve">
          <source>HP-UX also runs on the new Itanium processor. This requires the use of a different version of HP-UX (currently 11.23 or 11i v2), and with the exception of a few differences detailed below and in later sections, Perl should compile with no problems.</source>
          <target state="translated">HP-UX は新しい Itanium プロセッサでも動作します。このため、異なるバージョンの HP-UX (現在は 11.23 または 11i v2)を使用する必要がありますが、以下と後のセクションで詳細に説明するいくつかの違いを除いて、Perl は問題なくコンパイルできるはずです。</target>
        </trans-unit>
        <trans-unit id="6054c4b79943ef67e4dcb28eb588b66781f366f6" translate="yes" xml:space="preserve">
          <source>HP-UX supports dynamically loadable libraries (shared libraries). Shared libraries end with the suffix .sl. On Itanium systems, they end with the suffix .so.</source>
          <target state="translated">HP-UX は動的にロード可能なライブラリ (共有ライブラリ)をサポートしています。共有ライブラリの末尾には .sl という接尾辞があります。Itanium システムでは、.so という接尾辞で終わります。</target>
        </trans-unit>
        <trans-unit id="b4319bb42f0da477a0906018447c3096d305eb37" translate="yes" xml:space="preserve">
          <source>HP-UX versions</source>
          <target state="translated">HP-UX版</target>
        </trans-unit>
        <trans-unit id="0c355dad6ecf8b6970623574fcecedac49554b22" translate="yes" xml:space="preserve">
          <source>HP-UX versions before 10.30 require a separate installation of a POSIX threads library package. Two examples are the HP DCE package, available on &quot;HP-UX Hardware Extensions 3.0, Install and Core OS, Release 10.20, April 1999 (B3920-13941)&quot; or the Freely available PTH package, available on H.Merijn's site (&lt;a href=&quot;http://mirrors.develooper.com/hpux/&quot;&gt;http://mirrors.develooper.com/hpux/&lt;/a&gt;). The use of PTH will be unsupported in perl-5.12 and up and is rather buggy in 5.11.x.</source>
          <target state="translated">HP-UXバージョン10.30より前のバージョンでは、POSIXスレッドライブラリパッケージを別途インストールする必要があります。2つの例は、「HP-UX Hardware Extensions 3.0、Install and Core OS、Release 10.20、April 1999（B3920-13941）」で入手可能なHP DCEパッケージ、またはH.Merijnのサイト（&lt;a href=&quot;http://mirrors.develooper.com/hpux/&quot;&gt;http： //mirrors.develooper.com/hpux/&lt;/a&gt;）。PTHの使用はperl-5.12以降ではサポートされず、5.11.xではかなりバグがあります。</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="9386c18987cda4e4b47eab3b2d462dd758250ce8" translate="yes" xml:space="preserve">
          <source>Ha! Try that with your garden variety regexp package...</source>
          <target state="translated">はっ! あなたの庭の品種改良パッケージでそれを試してみてください...</target>
        </trans-unit>
        <trans-unit id="d88e3f220c919ffbf868396a7d774a5334f737c8" translate="yes" xml:space="preserve">
          <source>Hack, hack, hack. Keep in mind that Perl runs on many different platforms, with different operating systems that have different capabilities, different filesystem organizations, and even different character sets. &lt;a href=&quot;perlhacktips&quot;&gt;perlhacktips&lt;/a&gt; gives advice on this.</source>
          <target state="translated">ハック、ハック、ハック。Perlはさまざまなプラットフォーム、さまざまな機能を持つさまざまなオペレーティングシステム、さまざまなファイルシステム構成、さらにはさまざまな文字セットで実行されることに注意してください。&lt;a href=&quot;perlhacktips&quot;&gt;perlhacktips&lt;/a&gt;はこれについて助言します。</target>
        </trans-unit>
        <trans-unit id="aa83b6b9d8de018c03b6e14834f7dbb735668abf" translate="yes" xml:space="preserve">
          <source>Hackathons</source>
          <target state="translated">Hackathons</target>
        </trans-unit>
        <trans-unit id="70b5ad218deb587375e9d9ea493155e8eea890e8" translate="yes" xml:space="preserve">
          <source>Hackathons are a very different kind of gathering where Perl hackers gather to do just that, hack nonstop for an extended (several day) period on a specific project or projects. Information about hackathons can be located in the same place as information about &lt;a href=&quot;#Workshops&quot;&gt;workshops&lt;/a&gt; as well as in &lt;a href=&quot;irc://irc.perl.org/#perl&quot;&gt;irc://irc.perl.org/#perl&lt;/a&gt;.</source>
          <target state="translated">ハッカソンは非常に異なる種類の集まりで、Perlハッカーがそれを行うために集まり、特定のプロジェクト（複数の場合もある）の延長された（数日間）ノンストップでハッキングします。ハッカソンに関する情報は、&lt;a href=&quot;#Workshops&quot;&gt;ワークショップ&lt;/a&gt;に関する情報と同じ場所、および&lt;a href=&quot;irc://irc.perl.org/#perl&quot;&gt;irc：//irc.perl.org/#perlにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d5b2f425b8ec6dc0f52bcfb2fe8c13331b8f6480" translate="yes" xml:space="preserve">
          <source>Hacking Perl to work on earlier Unicode versions (for very serious hackers only)</source>
          <target state="translated">Perl をハックして以前の Unicode バージョンで動作するようにする (非常に深刻なハッカーのためだけに)</target>
        </trans-unit>
        <trans-unit id="c241df4cb37e7ba32f33cd5ab23a83488a78b7ae" translate="yes" xml:space="preserve">
          <source>Hacking tools and documentation</source>
          <target state="translated">ハッキングツールとドキュメント</target>
        </trans-unit>
        <trans-unit id="2cd3bee34e1e2aafe8cc6f8bcda061ef9d49610f" translate="yes" xml:space="preserve">
          <source>Half a &lt;b&gt;byte&lt;/b&gt;, equivalent to one &lt;b&gt;hexadecimal&lt;/b&gt; digit, and worth four &lt;b&gt;bits&lt;/b&gt;.</source>
          <target state="translated">ハーフ&lt;b&gt;バイト&lt;/b&gt; 1つのに相当、&lt;b&gt;進&lt;/b&gt;数字、および価値が4 &lt;b&gt;ビット&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="6d8ab5e201dd91380811a77b55a7a931f3d5eee4" translate="yes" xml:space="preserve">
          <source>Halfway between &lt;code&gt;ok()&lt;/code&gt; and &lt;code&gt;is()&lt;/code&gt; lies &lt;code&gt;cmp_ok()&lt;/code&gt; . This allows you to compare two arguments using any binary perl operator. The test passes if the comparison is true and fails otherwise.</source>
          <target state="translated">間の途中で &lt;code&gt;ok()&lt;/code&gt; と &lt;code&gt;is()&lt;/code&gt; 嘘は &lt;code&gt;cmp_ok()&lt;/code&gt; 。これにより、任意のバイナリperl演算子を使用して2つの引数を比較できます。比較が真の場合、テストに合格し、それ以外の場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="86179df6c35646296ecd922e347bf8fb4cdc3c6c" translate="yes" xml:space="preserve">
          <source>Hand-editing</source>
          <target state="translated">Hand-editing</target>
        </trans-unit>
        <trans-unit id="2243466296e92364f7bf27ac345ae2a71eab76a8" translate="yes" xml:space="preserve">
          <source>Handle is open.</source>
          <target state="translated">ハンドルが開いています。</target>
        </trans-unit>
        <trans-unit id="9bb0ae5137688cc1b8e62808a86d332a61061726" translate="yes" xml:space="preserve">
          <source>Handles compile-time scope entry. Arranges for hints to be restored on block exit and also handles pad sequence numbers to make lexical variables scope right. Returns a savestack index for use with &lt;code&gt;block_end&lt;/code&gt; .</source>
          <target state="translated">コンパイル時のスコープエントリを処理します。ヒントがブロックの終了時に復元されるように調整し、また語彙変数のスコープを正しくするためにパッドのシーケンス番号を処理します。で使用するために、セーブスタックのインデックスを返します &lt;code&gt;block_end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aadca6115d853e86175413031bcfebcbec35442a" translate="yes" xml:space="preserve">
          <source>Handles compile-time scope exit.</source>
          <target state="translated">コンパイル時のスコープの終了を処理します。</target>
        </trans-unit>
        <trans-unit id="a78a213e08f22079d0727d65ee7cd82040828af3" translate="yes" xml:space="preserve">
          <source>Handles that were opened write-only won't work. Handles that were opened read-only will work as long as you don't try to modify the array. Handles must be attached to seekable sources of data---that means no pipes or sockets. If &lt;code&gt;Tie::File&lt;/code&gt; can detect that you supplied a non-seekable handle, the &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call will throw an exception. (On Unix systems, it can detect this.)</source>
          <target state="translated">書き込み専用で開かれたハンドルは機能しません。読み取り専用で開かれたハンドルは、配列を変更しない限り機能します。ハンドルは、シーク可能なデータソースにアタッチする必要があります。つまり、パイプやソケットはありません。 &lt;code&gt;Tie::File&lt;/code&gt; がシークできないハンドルを指定したことを検出できる場合、 &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 呼び出しは例外をスローします。（Unixシステムでは、これを検出できます。）</target>
        </trans-unit>
        <trans-unit id="3dca08a90c7ec673523c972aeb9655cc6ba04e87" translate="yes" xml:space="preserve">
          <source>Handles the installing and uninstalling of perl modules, scripts, man pages, etc...</source>
          <target state="translated">perlモジュール、スクリプト、manページなどのインストール、アンインストールを行います。</target>
        </trans-unit>
        <trans-unit id="caa1714db5e5ddfa607afe3449dc66f6283180d0" translate="yes" xml:space="preserve">
          <source>Handling Duplicate Keys</source>
          <target state="translated">重複したキーの処理</target>
        </trans-unit>
        <trans-unit id="0f01c504507d7832a1cac719e698e1e7e8a378a8" translate="yes" xml:space="preserve">
          <source>Handling Malformed Data</source>
          <target state="translated">誤ったデータの処理</target>
        </trans-unit>
        <trans-unit id="f0f0fc76a1e441991cde68774fcefb6a0861fb18" translate="yes" xml:space="preserve">
          <source>Handling Unicode</source>
          <target state="translated">ユニコードを扱う</target>
        </trans-unit>
        <trans-unit id="5c331b1b1b146d85b0798abcb652f4dbd9cc2a65" translate="yes" xml:space="preserve">
          <source>Handling Unicode is for the most part transparent: just use the strings as usual. Functions like &lt;code&gt;&lt;a href=&quot;functions/index&quot;&gt;index()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; will work on the Unicode characters; regular expressions will work on the Unicode characters (see &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; and &lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt;).</source>
          <target state="translated">Unicodeの処理は大部分が透過的です。通常どおりに文字列を使用してください。 &lt;code&gt;&lt;a href=&quot;functions/index&quot;&gt;index()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; などの関数は、Unicode文字に対して機能します。正規表現はUnicode文字で機能します（&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;および&lt;a href=&quot;perlretut&quot;&gt;perlretutを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="88d69acff614c1d827ede2f260f6a46a48647c42" translate="yes" xml:space="preserve">
          <source>Handling simple options is straightforward:</source>
          <target state="translated">シンプルなオプションの取り扱いは簡単です。</target>
        </trans-unit>
        <trans-unit id="8e71d792bc3c7ca46b9ebe6e4e08dc39ffe6877b" translate="yes" xml:space="preserve">
          <source>Handling the SIGHUP Signal in Daemons</source>
          <target state="translated">デーモンでのSIGHUPシグナルの取り扱い</target>
        </trans-unit>
        <trans-unit id="6e120aed62a343cea2462c78b0c345bd93d57340" translate="yes" xml:space="preserve">
          <source>Handy Values</source>
          <target state="translated">便利な価値観</target>
        </trans-unit>
        <trans-unit id="049503c569a7548e0e0aaf7ff650cdb7e260c634" translate="yes" xml:space="preserve">
          <source>Handy for putting in notes which might be useful for debugging, but don't indicate a problem.</source>
          <target state="translated">デバッグに役立つかもしれないが、問題があることを示していないメモを入れるのに便利です。</target>
        </trans-unit>
        <trans-unit id="57d70b3a1b3e8f06b27f21ad6f5e77255bd44b1f" translate="yes" xml:space="preserve">
          <source>Handy for things like...</source>
          <target state="translated">こんな時に便利...</target>
        </trans-unit>
        <trans-unit id="04a45a64a65bd1462cbe3b6ef2c3619b7fc7d816" translate="yes" xml:space="preserve">
          <source>Handy for this sort of thing:</source>
          <target state="translated">こういう時に便利です。</target>
        </trans-unit>
        <trans-unit id="eb631afbbf9621a14aebc98eacec8ff594f19f3b" translate="yes" xml:space="preserve">
          <source>Handy tip: put &lt;code&gt;set PERLDOC=-ortf&lt;/code&gt; in your</source>
          <target state="translated">&lt;code&gt;set PERLDOC=-ortf&lt;/code&gt; ヒント：セットPERLDOC = -ortfを</target>
        </trans-unit>
        <trans-unit id="951499a6cfa4736aa7a1d36a7019e79078429a7e" translate="yes" xml:space="preserve">
          <source>HangulSyllableType.txt</source>
          <target state="translated">HangulSyllableType.txt</target>
        </trans-unit>
        <trans-unit id="dc5f45cb92e25fd3e9f4ed85dddd70a19341bbf4" translate="yes" xml:space="preserve">
          <source>Hard and symbolic (&quot;soft&quot;) links; linkname should specify target.</source>
          <target state="translated">ハードリンクとシンボリックリンク(「ソフト」);リンク名はターゲットを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="cdae1ec5d05114509a53fe67f0320c6eadea6400" translate="yes" xml:space="preserve">
          <source>Hard links are implemented on Win32 under NTFS only. They are natively supported on Windows 2000 and later. On Windows NT they are implemented using the Windows POSIX subsystem support and the Perl process will need Administrator or Backup Operator privileges to create hard links.</source>
          <target state="translated">ハードリンクは、Win32上ではNTFSのみで実装されています。ハードリンクは Windows 2000 以降でネイティブにサポートされています。Windows NT では、Windows POSIX サブシステムのサポートを使用して実装されており、Perl プロセスはハードリンクを作成するために管理者またはバックアップオペレータの権限が必要です。</target>
        </trans-unit>
        <trans-unit id="7cec0c304aaf210bfe25cbb78814c09191b199ee" translate="yes" xml:space="preserve">
          <source>Hard references are smart--they keep track of reference counts for you, automatically freeing the thing referred to when its reference count goes to zero. (Reference counts for values in self-referential or cyclic data structures may not go to zero without a little help; see &lt;a href=&quot;#Circular-References&quot;&gt;Circular References&lt;/a&gt; for a detailed explanation.) If that thing happens to be an object, the object is destructed. See &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt; for more about objects. (In a sense, everything in Perl is an object, but we usually reserve the word for references to objects that have been officially &quot;blessed&quot; into a class package.)</source>
          <target state="translated">ハード参照はスマートです。参照カウントが追跡され、参照カウントがゼロになると、参照されているものが自動的に解放されます。 （自己参照データ構造または循環データ構造の値の参照カウントは、少しの助けがなければゼロにならない場合があります。詳細な説明については、&lt;a href=&quot;#Circular-References&quot;&gt;循環参照&lt;/a&gt;を参照してください。）そのことが偶然にオブジェクトである場合、オブジェクトは破壊されます。オブジェクトの詳細については、&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;を参照してください。 （ある意味で、Perlのすべてはオブジェクトですが、通常、クラスパッケージに正式に「祝福」されたオブジェクトへの参照のために単語を予約しています。）</target>
        </trans-unit>
        <trans-unit id="66e944742ea0249f6f2a6fd52c3e9e415e65aaeb" translate="yes" xml:space="preserve">
          <source>Harness output delegate for default console output</source>
          <target state="translated">デフォルトのコンソール出力用の出力デリゲートをハーネス化</target>
        </trans-unit>
        <trans-unit id="2dd2c2e596e19cb5f6f12eac61588cccdf06ec03" translate="yes" xml:space="preserve">
          <source>Harness output delegate for file output</source>
          <target state="translated">ファイル出力のための出力デリゲートのハーネス</target>
        </trans-unit>
        <trans-unit id="363bd8bca1592722722a3ac3fe8ee3189add2d7b" translate="yes" xml:space="preserve">
          <source>Harness output delegate for parallel console output</source>
          <target state="translated">並列コンソール出力のための出力デリゲートをハーネス化</target>
        </trans-unit>
        <trans-unit id="ba951792ddfec9b17fd8944b4026a028108c3aa1" translate="yes" xml:space="preserve">
          <source>Has already been</source>
          <target state="translated">すでに</target>
        </trans-unit>
        <trans-unit id="d8861f9d9089d32f3fb836f33024a00d9824a27b" translate="yes" xml:space="preserve">
          <source>Has global effect, persists after the application exits.</source>
          <target state="translated">グローバルな効果を持ち、アプリケーションが終了した後も持続します。</target>
        </trans-unit>
        <trans-unit id="d791fc07c3f03c0d15e5cd282a309f1887be4bb0" translate="yes" xml:space="preserve">
          <source>Has it been done before?</source>
          <target state="translated">前にもやったことがあるのかな?</target>
        </trans-unit>
        <trans-unit id="2929382f580bfdd31a77bfbbda12fefbb2e9c2b6" translate="yes" xml:space="preserve">
          <source>Has the same behavior as the match operator. Also, the left operand of &lt;code&gt;=~&lt;/code&gt; becomes tainted when a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; form that includes &lt;code&gt;LC_CTYPE&lt;/code&gt; is in effect, if modified as a result of a substitution based on a regular expression match involving any of the things mentioned in the previous item, or of case-mapping, such as &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; ,&lt;code&gt;\u&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , or &lt;code&gt;\F&lt;/code&gt; .</source>
          <target state="translated">一致演算子と同じ動作をします。また、 &lt;code&gt;LC_CTYPE&lt;/code&gt; を含む &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; の&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;フォームが有効である場合、前の項目で言及したもののいずれかを含む正規表現の一致に基づく置換の結果として変更された場合、またはケースの場合、 &lt;code&gt;=~&lt;/code&gt; 左のオペランドは汚染されます。など、-mapping &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、または &lt;code&gt;\F&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2e911d125c069efa7d913b344e0f08f8969421a" translate="yes" xml:space="preserve">
          <source>Hash API Extensions</source>
          <target state="translated">ハッシュ API 拡張機能</target>
        </trans-unit>
        <trans-unit id="ffc5f6e94a276eeaf94de20a0e4f426d64a6723d" translate="yes" xml:space="preserve">
          <source>Hash Algorithm - Hash algorithms like the one used in Perl are well known to be vulnerable to collision attacks on their hash function. Such attacks involve constructing a set of keys which collide into the same bucket producing inefficient behavior. Such attacks often depend on discovering the seed of the hash function used to map the keys to buckets. That seed is then used to brute-force a key set which can be used to mount a denial of service attack. In Perl 5.8.1 changes were introduced to harden Perl to such attacks, and then later in Perl 5.18.0 these features were enhanced and additional protections added.</source>
          <target state="translated">ハッシュアルゴリズム-Perl で使用されているようなハッシュアルゴリズムは、ハッシュ関数の衝突攻撃に対して脆弱であることがよく知られています。このような攻撃は、同じバケツに衝突する鍵のセットを構築し、非効率的な動作をさせます。このような攻撃は、鍵をバケットにマッピングするために使用されるハッシュ関数のシードを発見することに依存します。そのシードは、サービス拒否攻撃に使用できる鍵セットをブルートフォースするために使用されます。Perl 5.8.1 では、このような攻撃に対して Perl を強化するための変更が導入され、その後 Perl 5.18.0 ではこれらの機能が強化され、追加の保護機能が追加されました。</target>
        </trans-unit>
        <trans-unit id="f61062d96868959d8bad3f3f9d8706be2a8eb3f6" translate="yes" xml:space="preserve">
          <source>Hash Manipulation Functions</source>
          <target state="translated">ハッシュ操作関数</target>
        </trans-unit>
        <trans-unit id="305905caf9fb73ce326146ab6da346f5a44d3d5e" translate="yes" xml:space="preserve">
          <source>Hash entries are returned in an apparently random order. The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash. Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; may be deleted without changing the order. So long as a given hash is unmodified you may rely on &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; to repeatedly return the same order as each other. See &lt;a href=&quot;../perlsec#Algorithmic-Complexity-Attacks&quot;&gt;Algorithmic Complexity Attacks in perlsec&lt;/a&gt; for details on why hash order is randomized. Aside from the guarantees provided here the exact details of Perl's hash algorithm and the hash traversal order are subject to change in any release of Perl.</source>
          <target state="translated">ハッシュエントリは明らかにランダムな順序で返されます。実際のランダムな順序は、特定のハッシュに固有です。 2つのハッシュでまったく同じ一連の操作を行うと、ハッシュごとに異なる順序になる場合があります。ハッシュへの挿入は、削除と同様に順序を変更する可能性があります。ただし、 &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; つまたは複数の &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; によって返される最新のキーは、順序を変更せずに削除される場合があります。特定のハッシュが変更されていない限り、 &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; に依存して、同じ順序を繰り返し返すことができます。&lt;a href=&quot;../perlsec#Algorithmic-Complexity-Attacks&quot;&gt;perlsecのAlgorithmic Complexity Attacksを&lt;/a&gt;参照してくださいハッシュ順がランダム化される理由の詳細については。ここで提供される保証の他に、Perlのハッシュアルゴリズムとハッシュトラバーサルの順序の正確な詳細は、Perlのすべてのリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="38990845f56b0504f14a42e264d2e90a4529057f" translate="yes" xml:space="preserve">
          <source>Hash entries are returned in an apparently random order. The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash. Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; may be deleted without changing the order. So long as a given hash is unmodified you may rely on &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; to repeatedly return the same order as each other. See &lt;a href=&quot;../perlsec#Algorithmic-Complexity-Attacks&quot;&gt;Algorithmic Complexity Attacks in perlsec&lt;/a&gt; for details on why hash order is randomized. Aside from the guarantees provided here the exact details of Perl's hash algorithm and the hash traversal order are subject to change in any release of Perl. Tied hashes may behave differently to Perl's hashes with respect to changes in order on insertion and deletion of items.</source>
          <target state="translated">ハッシュエントリは明らかにランダムな順序で返されます。実際のランダムな順序は、特定のハッシュに固有です。 2つのハッシュでまったく同じ一連の操作を行うと、ハッシュごとに異なる順序になる場合があります。ハッシュへの挿入は、削除と同様に順序を変更する可能性があります。ただし、 &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; つまたは複数の &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; によって返される最新のキーは、順序を変更せずに削除される場合があります。特定のハッシュが変更されていない限り、 &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; に依存して、同じ順序を繰り返し返すことができます。&lt;a href=&quot;../perlsec#Algorithmic-Complexity-Attacks&quot;&gt;perlsecのAlgorithmic Complexity Attacksを&lt;/a&gt;参照してくださいハッシュ順がランダム化される理由の詳細については。ここで提供される保証の他に、Perlのハッシュアルゴリズムとハッシュトラバーサルの順序の正確な詳細は、Perlのすべてのリリースで変更される可能性があります。タイドハッシュは、アイテムの挿入と削除の順序の変更に関して、Perlのハッシュとは異なる動作をする場合があります。</target>
        </trans-unit>
        <trans-unit id="e9c5186b59e1d86cc131a1fce52452e4e4a1c3b7" translate="yes" xml:space="preserve">
          <source>Hash entries are returned in an apparently random order. The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash. Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; may be deleted without changing the order. So long as a given hash is unmodified you may rely on &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; to repeatedly return the same order as each other. See &lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;Algorithmic Complexity Attacks in perlsec&lt;/a&gt; for details on why hash order is randomized. Aside from the guarantees provided here the exact details of Perl's hash algorithm and the hash traversal order are subject to change in any release of Perl.</source>
          <target state="translated">ハッシュエントリは明らかにランダムな順序で返されます。実際のランダムな順序は、特定のハッシュに固有です。 2つのハッシュでまったく同じ一連の操作を行うと、ハッシュごとに異なる順序になる場合があります。ハッシュへの挿入は、削除と同様に順序を変更する可能性があります。ただし、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; つまたは複数の &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; によって返される最新のキーは、順序を変更せずに削除される場合があります。特定のハッシュが変更されていない限り、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; に依存して、同じ順序を繰り返し返すことができます。&lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;perlsecのAlgorithmic Complexity Attacksを&lt;/a&gt;参照してくださいハッシュ順がランダム化される理由の詳細については。ここで提供される保証の他に、Perlのハッシュアルゴリズムとハッシュトラバーサルの順序の正確な詳細は、Perlのすべてのリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c3ca36bf1a5daf8ef9f034a1d277717a3712e5c2" translate="yes" xml:space="preserve">
          <source>Hash entries are returned in an apparently random order. The actual random order is specific to a given hash; the exact same series of operations on two hashes may result in a different order for each hash. Any insertion into the hash may change the order, as will any deletion, with the exception that the most recent key returned by &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; may be deleted without changing the order. So long as a given hash is unmodified you may rely on &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; to repeatedly return the same order as each other. See &lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;Algorithmic Complexity Attacks in perlsec&lt;/a&gt; for details on why hash order is randomized. Aside from the guarantees provided here the exact details of Perl's hash algorithm and the hash traversal order are subject to change in any release of Perl. Tied hashes may behave differently to Perl's hashes with respect to changes in order on insertion and deletion of items.</source>
          <target state="translated">ハッシュエントリは明らかにランダムな順序で返されます。実際のランダムな順序は、特定のハッシュに固有です。 2つのハッシュでまったく同じ一連の操作を行うと、ハッシュごとに異なる順序になる場合があります。ハッシュへの挿入は、削除と同様に順序を変更する可能性があります。ただし、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; つまたは複数の &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; によって返される最新のキーは、順序を変更せずに削除される場合があります。特定のハッシュが変更されていない限り、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; に依存して、同じ順序を繰り返し返すことができます。&lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;perlsecのAlgorithmic Complexity Attacksを&lt;/a&gt;参照してくださいハッシュ順がランダム化される理由の詳細については。ここで提供される保証の他に、Perlのハッシュアルゴリズムとハッシュトラバーサルの順序の正確な詳細は、Perlのすべてのリリースで変更される可能性があります。タイドハッシュは、アイテムの挿入と削除の順序の変更に関して、Perlのハッシュとは異なる動作をする場合があります。</target>
        </trans-unit>
        <trans-unit id="450c7d18d41b71db86a014ec4874cb370e9139cb" translate="yes" xml:space="preserve">
          <source>Hash keys are &lt;b&gt;never&lt;/b&gt; tainted.</source>
          <target state="translated">ハッシュキーは&lt;b&gt;決して&lt;/b&gt;汚染され&lt;b&gt;ません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="d3bb008d092d1635eab043a4b8199104071bf333" translate="yes" xml:space="preserve">
          <source>Hash keys are strings, so you can't really use a reference as the key. When you try to do that, perl turns the reference into its stringified form (for instance, &lt;code&gt;HASH(0xDEADBEEF)&lt;/code&gt; ). From there you can't get back the reference from the stringified form, at least without doing some extra work on your own.</source>
          <target state="translated">ハッシュキーは文字列であるため、実際に参照をキーとして使用することはできません。それを行おうとすると、perlは参照を文字列化された形式に変換します（たとえば、 &lt;code&gt;HASH(0xDEADBEEF)&lt;/code&gt; ）。そこから、文字列化されたフォームから参照を取得することはできません。少なくとも自分で追加の作業を行うことはできません。</target>
        </trans-unit>
        <trans-unit id="28bd740a5fed92f4652182fc91352eb825ae6b82" translate="yes" xml:space="preserve">
          <source>Hash subscripts are similar, only instead of square brackets curly brackets are used. For example:</source>
          <target state="translated">ハッシュ添え字は似ていますが、角括弧の代わりに中括弧が使用されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0f05d6e4a748b9c8f33a3dd349b88ed9bc020a76" translate="yes" xml:space="preserve">
          <source>Hash values do not spring into existence upon mere reference.</source>
          <target state="translated">ハッシュ値は単なる参照では生まれません。</target>
        </trans-unit>
        <trans-unit id="060e2951a35019d6292c77892149e6ae4655ab4b" translate="yes" xml:space="preserve">
          <source>Hash::Util</source>
          <target state="translated">Hash::Util</target>
        </trans-unit>
        <trans-unit id="6df60ce76a6dd2245295b960eb619bae5a40a333" translate="yes" xml:space="preserve">
          <source>Hash::Util - A selection of general-utility hash subroutines</source>
          <target state="translated">Hash::Util-汎用的なハッシュサブルーチンの選択</target>
        </trans-unit>
        <trans-unit id="fc6dfd7516cd148dfcfbc9b4b53977f84b109b02" translate="yes" xml:space="preserve">
          <source>Hash::Util::FieldHash</source>
          <target state="translated">Hash::Util::FieldHash</target>
        </trans-unit>
        <trans-unit id="2761eb764ac1f31cb8db8bfca9f4810ccd72d904" translate="yes" xml:space="preserve">
          <source>Hash::Util::FieldHash - Support for Inside-Out Classes</source>
          <target state="translated">Hash::Util::FieldHash-インサイドアウトクラスのサポート</target>
        </trans-unit>
        <trans-unit id="5003cfd9a645097d80f1b1984336d3badcf5c150" translate="yes" xml:space="preserve">
          <source>Hashes contain pairs of scalars: the first is the key, the second is the value. The key will be coerced to a string, although the value can be any kind of scalar: string, number, or reference. If a key &lt;code&gt;$key&lt;/code&gt; is present in %hash, &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists($hash{$key})&lt;/a&gt;&lt;/code&gt; will return true. The value for a given key can be &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, in which case &lt;code&gt;$hash{$key}&lt;/code&gt; will be &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; while &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $hash{$key}&lt;/code&gt; will return true. This corresponds to (&lt;code&gt;$key&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) being in the hash.</source>
          <target state="translated">ハッシュにはスカラーのペアが含まれます。最初のキーはキーで、2番目は値です。キーは文字列に強制変換されますが、値は任意の種類のスカラー（文字列、数値、または参照）にすることができます。キー &lt;code&gt;$key&lt;/code&gt; が％hashに &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists($hash{$key})&lt;/a&gt;&lt;/code&gt; 、exists（$ hash {$ key}）はtrueを返します。指定されたキーの値とすることができる &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をその場合、 &lt;code&gt;$hash{$key}&lt;/code&gt; なり &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をながら &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $hash{$key}&lt;/code&gt; trueを返します。これは、ハッシュ内にある（ &lt;code&gt;$key&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; ）に対応します。</target>
        </trans-unit>
        <trans-unit id="a5674cfb04f68937d23325c6f7c4d9203e5e6faf" translate="yes" xml:space="preserve">
          <source>Hashes have no particular internal order, though you can sort the keys and loop through them.</source>
          <target state="translated">ハッシュには特に内部的な順序はありませんが、キーをソートしてループさせることはできます。</target>
        </trans-unit>
        <trans-unit id="11a5b7f57189106155ae1686164009308c7fb48e" translate="yes" xml:space="preserve">
          <source>Hashes were the first Perl data type to be tied (see dbmopen()). A class implementing a tied hash should define the following methods: TIEHASH is the constructor. FETCH and STORE access the key and value pairs. EXISTS reports whether a key is present in the hash, and DELETE deletes one. CLEAR empties the hash by deleting all the key and value pairs. FIRSTKEY and NEXTKEY implement the keys() and each() functions to iterate over all the keys. SCALAR is triggered when the tied hash is evaluated in scalar context. UNTIE is called when &lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; happens, and DESTROY is called when the tied variable is garbage collected.</source>
          <target state="translated">ハッシュは、結び付けられる最初のPerlデータ型でした（dbmopen（）を参照）。 tieハッシュを実装するクラスは、次のメソッドを定義する必要があります。TIEHASHはコンストラクターです。 FETCHとSTOREは、キーと値のペアにアクセスします。 EXISTSはハッシュにキーが存在するかどうかを報告し、DELETEはキーを削除します。 CLEARは、すべてのキーと値のペアを削除してハッシュを空にします。 FIRSTKEYおよびNEXTKEYは、keys（）およびeach（）関数を実装して、すべてのキーを反復処理します。 SCALARは、結合ハッシュがスカラーコンテキストで評価されるときにトリガーされます。 UNTIEがときに呼び出される &lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; 発生し、tieされた変数がガベージコレクトされるときに呼び出されDESTROY。</target>
        </trans-unit>
        <trans-unit id="00ee967aadbfebd86b3235daf9d26b53205682c3" translate="yes" xml:space="preserve">
          <source>Hashing order and checksums</source>
          <target state="translated">ハッシュ順序とチェックサム</target>
        </trans-unit>
        <trans-unit id="3f4d761db68098a751847d9083882bbf309c01a1" translate="yes" xml:space="preserve">
          <source>Hashref of .pm files and *.pl files to be installed. e.g.</source>
          <target state="translated">インストールする .pm ファイルと *.pl ファイルのハッシュリフ。</target>
        </trans-unit>
        <trans-unit id="e654482e1464037d016cd8389b44c8067b3f7edd" translate="yes" xml:space="preserve">
          <source>Hashref of .xs files. MakeMaker will default this. e.g.</source>
          <target state="translated">.xs ファイルのハッシュリフ。MakeMaker はこれをデフォルトにしています。</target>
        </trans-unit>
        <trans-unit id="54306e4b7a73d064c3f0a92d38a328cc3c6fc248" translate="yes" xml:space="preserve">
          <source>Hashref of pod-containing files. MakeMaker will default this to all EXE_FILES files that include POD directives. The files listed here will be converted to man pages and installed as was requested at Configure time.</source>
          <target state="translated">ポッドを含むファイルのハッシュリフ。MakeMaker は、pod ディレクティブを含むすべての EXE_FILES ファイルにデフォルトでこれを適用します。ここに記載されているファイルは、Configure時にリクエストされた通りにmanページに変換されてインストールされます。</target>
        </trans-unit>
        <trans-unit id="e03929c9c89c518c1a46f519dc21b0db453de58a" translate="yes" xml:space="preserve">
          <source>Hashref of symbol names for routines to be made available as universal symbols. Each key/value pair consists of the package name and an array of routine names in that package. Used only under AIX, OS/2, VMS and Win32 at present. The routine names supplied will be expanded in the same way as XSUB names are expanded by the XS() macro. Defaults to</source>
          <target state="translated">ユニバーサル・シンボルとして利用できるようにするルーチンのシンボル名のハッシュリフ。各キー/値のペアは、パッケージ名とそのパッケージ内のルーチン名の配列で構成されています。現在のところ、AIX、OS/2、VMS、Win32 でのみ使用されています。与えられたルーチン名は、XSUB 名が XS()マクロによって展開されるのと同じ方法で展開されます。デフォルトは</target>
        </trans-unit>
        <trans-unit id="0e5b1d03af67cbc5ad483521c6061ce63fe7c5e2" translate="yes" xml:space="preserve">
          <source>Hashref that assigns to *.pm and *.pod files the files into which the manpages are to be written. MakeMaker parses all *.pod and *.pm files for POD directives. Files that contain POD will be the default keys of the MAN3PODS hashref. These will then be converted to man pages during &lt;code&gt;make&lt;/code&gt; and will be installed during &lt;code&gt;make install&lt;/code&gt; .</source>
          <target state="translated">マンページが書き込まれるファイルを* .pmおよび* .podファイルに割り当てるハッシュ参照。MakeMakerはPODディレクティブのすべての* .podおよび* .pmファイルを解析します。PODを含むファイルは、MAN3PODSハッシュリファレンスのデフォルトのキーになります。これらは、 &lt;code&gt;make&lt;/code&gt; 中にmanページに変換され、 &lt;code&gt;make install&lt;/code&gt; 中にインストールされます。</target>
        </trans-unit>
        <trans-unit id="b7c40a20db4b296ec67dfa94b908457cfde4c540" translate="yes" xml:space="preserve">
          <source>Have a .ucm file ready. You can get it from somewhere or you can write your own from scratch or you can grab one from the Encode distribution and customize it. For the UCM format, see the next Chapter. In the example below, I'll call my theoretical encoding myascii, defined in</source>
          <target state="translated">.ucm ファイルを用意してください。どこかから入手することもできますし、自分でゼロから書くこともできますし、Encode ディストリビューションから入手してカスタマイズすることもできます。UCM フォーマットについては、次の章を参照してください。以下の例では、私の理論的なエンコーディングを myascii と呼びます。</target>
        </trans-unit>
        <trans-unit id="7e1aafb3365aa620ad71622b6d9e66ff51332860" translate="yes" xml:space="preserve">
          <source>Have a look at the &lt;code&gt;look&lt;/code&gt; (!) command.</source>
          <target state="translated">見てい &lt;code&gt;look&lt;/code&gt; （！）コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="8d27c15838302800e87f5a9ade00864fd9b117bc" translate="yes" xml:space="preserve">
          <source>Have a look at the CPAN::Site module.</source>
          <target state="translated">CPAN::Siteモジュールを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="2682f428ec2cd20e9cdf6753b7db50d45fa0c287" translate="yes" xml:space="preserve">
          <source>Have you got it right?</source>
          <target state="translated">ちゃんとしたのか?</target>
        </trans-unit>
        <trans-unit id="3d1c0002422cc934d4f43ea061dac2a317b36bcc" translate="yes" xml:space="preserve">
          <source>Have you looked at CPAN (see &lt;a href=&quot;perlfaq2&quot;&gt;perlfaq2&lt;/a&gt;)? The chances are that someone has already written a module that can solve your problem. Have you read the appropriate manpages? Here's a brief index:</source>
          <target state="translated">CPAN（&lt;a href=&quot;perlfaq2&quot;&gt;perlfaq2を&lt;/a&gt;参照）を見たことがありますか？おそらく、誰かがあなたの問題を解決できるモジュールをすでに書いている可能性があります。適切なマンページを読みましたか？ここに簡単なインデックスがあります：</target>
        </trans-unit>
        <trans-unit id="fea81edd1a4ca564780d9031bb647dc99cf58fa7" translate="yes" xml:space="preserve">
          <source>Having 57 modules all called Sort will not make life easy for anyone (though having 23 called Sort::Quick is only marginally better :-). Imagine someone trying to install your module alongside many others. If in any doubt ask for suggestions in comp.lang.perl.misc.</source>
          <target state="translated">57 個のモジュールをすべて Sort と呼ぶことは、誰にとっても生活を楽にすることはできません (Sort::Quick と呼ばれる 23 個のモジュールを持つことは、わずかにマシになるだけですが :-)。誰かがあなたのモジュールを他の多くのモジュールと一緒にインストールしようとすることを想像してみてください。疑問がある場合は comp.lang.perl.misc.</target>
        </trans-unit>
        <trans-unit id="d5c3a74f90c179abbbb2a8aabfd9df58154dbdba" translate="yes" xml:space="preserve">
          <source>Having PERLDOCDEBUG set to a positive integer will make perldoc emit even more descriptive output than the &lt;code&gt;-D&lt;/code&gt; switch does; the higher the number, the more it emits.</source>
          <target state="translated">PERLDOCDEBUGを正の整数に設定すると、perldocは &lt;code&gt;-D&lt;/code&gt; スイッチよりもさらに詳しい説明を出力します。数値が大きいほど、放出量が多くなります。</target>
        </trans-unit>
        <trans-unit id="475dd7f4c80bb5dca06b4bee66ecdd1370715023" translate="yes" xml:space="preserve">
          <source>Having RSX and the latest</source>
          <target state="translated">RSXと最新のものを持つ</target>
        </trans-unit>
        <trans-unit id="831389895e5cb7d92cb0b30b5f20a040e5b28ad0" translate="yes" xml:space="preserve">
          <source>Having a comma after the last element of an enum list</source>
          <target state="translated">列挙リストの最後の要素の後にカンマがあること</target>
        </trans-unit>
        <trans-unit id="eb3a777ac79c8871a640c69bcf5b76d7b538148e" translate="yes" xml:space="preserve">
          <source>Having a meaning. Perl thinks that some of the things people try to do are devoid of meaning; in particular, making use of variables that have never been given a &lt;b&gt;value&lt;/b&gt; and performing certain operations on data that isn&amp;rsquo;t there. For example, if you try to read data past the end of a file, Perl will hand you back an undefined value. See also &lt;b&gt;false&lt;/b&gt; and the &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; entry in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo;.</source>
          <target state="translated">意味がある。Perlは、人々がやろうとしていることのいくつかには意味がないと考えています。特に、&lt;b&gt;値&lt;/b&gt;が与えられていない変数を利用し、そこにないデータに対して特定の操作を実行します。たとえば、ファイルの終わりを超えてデータを読み取ろうとすると、Perlは未定義の値を返します。&lt;b&gt;false&lt;/b&gt;およびCamelの第27章「関数」の &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; エントリも参照してください。</target>
        </trans-unit>
        <trans-unit id="cf9f1d17b3780ae4ae6a7c92cd0343417040db2e" translate="yes" xml:space="preserve">
          <source>Having done your bit, please be prepared to wait, to be told the bug is in your code, or possibly to get no reply at all. The volunteers who maintain Perl are busy folks, so if your problem is an obvious bug in your own code, is difficult to understand or is a duplicate of an existing report, you may not receive a personal reply.</source>
          <target state="translated">あなたの役割を果たした後は、バグがあなたのコードにあると言われるのを待つか、もしかしたら全く返事が来ないかもしれないと覚悟しておいてください。Perl を管理しているボランティアは忙しい人たちですから、もしあなたの問題があなた自身のコードの明らかなバグであったり、理解するのが難しいものであったり、既存の報告と重複しているものであったりする場合には、個人的な返事を受け取れないかもしれません。</target>
        </trans-unit>
        <trans-unit id="61dfbdc92422646f02edc5b064d4a445a5156276" translate="yes" xml:space="preserve">
          <source>Having multiple DBM implementations makes it trivial to copy database formats:</source>
          <target state="translated">複数のDBM実装を持つことで、データベースフォーマットをコピーすることが容易になります。</target>
        </trans-unit>
        <trans-unit id="0a36716594c37d5edd82c337ce9f21f289c12c13" translate="yes" xml:space="preserve">
          <source>Having pseudo-process IDs be negative integers breaks down for the integer &lt;code&gt;-1&lt;/code&gt; because the wait() and waitpid() functions treat this number as being special. The tacit assumption in the current implementation is that the system never allocates a thread ID of &lt;code&gt;1&lt;/code&gt; for user threads. A better representation for pseudo-process IDs will be implemented in future.</source>
          <target state="translated">疑似プロセスIDが負の整数になると、整数 &lt;code&gt;-1&lt;/code&gt; に分解されます。これは、wait（）およびwaitpid（）関数がこの数を特殊なものとして扱うためです。現在の実装における暗黙の仮定は、システムがユーザースレッドに &lt;code&gt;1&lt;/code&gt; のスレッドIDを割り当てないことです。疑似プロセスIDのより適切な表現は、将来実装される予定です。</target>
        </trans-unit>
        <trans-unit id="fff5183df30472b7e88394295e20e9d8990e8e07" translate="yes" xml:space="preserve">
          <source>Having read &lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt; you will probably have already guessed that the error is caused by the extra copy of the tied object stored in &lt;code&gt;$X&lt;/code&gt; . If you haven't, then the problem boils down to the fact that the &lt;b&gt;DB_File&lt;/b&gt; destructor, DESTROY, will not be called until</source>
          <target state="translated">&lt;a href=&quot;perltie&quot;&gt;perltie&lt;/a&gt;を読んだことで、おそらく、エラーは &lt;code&gt;$X&lt;/code&gt; 格納されている関連付けられたオブジェクトの余分なコピーが原因で発生していると推測していることでしょう。そうでない場合、問題は、&lt;b&gt;DB_File&lt;/b&gt;デストラクタであるDESTROYが呼び出されるまで、</target>
        </trans-unit>
        <trans-unit id="893bf15d4ad790d3a646d05f171a2db30641c0d1" translate="yes" xml:space="preserve">
          <source>Having threads support requires all of Perl and all of the XS modules in the Perl installation to be rebuilt; it is not just a question of adding the &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; module (i.e., threaded and non-threaded Perls are binary incompatible).</source>
          <target state="translated">スレッドをサポートするには、すべてのPerlおよびPerlインストール内のすべてのXSモジュールを再構築する必要があります。それは、&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;モジュールを追加するだけの問題ではありません（つまり、スレッドPerlと非スレッドPerlはバイナリ互換ではありません）。</target>
        </trans-unit>
        <trans-unit id="123977c7eddfac195115408ec1d6b6b93c199204" translate="yes" xml:space="preserve">
          <source>Having to do with numbers represented in base 2. That means there&amp;rsquo;s basically two numbers: 0 and 1. Also used to describe a file of &amp;ldquo;nontext&amp;rdquo;, presumably because such a file makes full use of all the binary bits in its bytes. With the advent of &lt;b&gt;Unicode&lt;/b&gt;, this distinction, already suspect, loses even more of its meaning.</source>
          <target state="translated">基数2で表される数値を処理する必要があります。つまり、基本的に2つの数値：0と1があります。「非テキスト」のファイルを記述するためにも使用されます。&lt;b&gt;Unicode&lt;/b&gt;の登場により、この区別はすでに疑われていますが、その意味はさらに失われています。</target>
        </trans-unit>
        <trans-unit id="2a50b726078402c27e07b8c0e368389163cec09c" translate="yes" xml:space="preserve">
          <source>Having to even think about the &lt;code&gt;$^S&lt;/code&gt; variable in your exception handlers is simply wrong. &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; as currently implemented invites grievous and difficult to track down errors. Avoid it and use an &lt;code&gt;END{}&lt;/code&gt; or CORE::GLOBAL::die override instead.</source>
          <target state="translated">例外ハンドラーで &lt;code&gt;$^S&lt;/code&gt; 変数について考える必要さえあるのは、単に間違っています。現在実装されている &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; 、エラーを追跡するのが大変で困難です。それを避け、代わりに &lt;code&gt;END{}&lt;/code&gt; またはCORE :: GLOBAL :: dieオーバーライドを使用してください。</target>
        </trans-unit>
        <trans-unit id="9dd5e433024c5701e895446816548ab95da2bc1b" translate="yes" xml:space="preserve">
          <source>Hawai'ian</source>
          <target state="translated">Hawai'ian</target>
        </trans-unit>
        <trans-unit id="fec5f9830205e3861054b7879046770547986753" translate="yes" xml:space="preserve">
          <source>Head.U</source>
          <target state="translated">Head.U</target>
        </trans-unit>
        <trans-unit id="0c0e898a8ae956ef15e057a684b77851cb08216e" translate="yes" xml:space="preserve">
          <source>Head1 through head4 produce headings, head1 being the highest level. The text in the rest of this paragraph is the content of the heading. For example:</source>
          <target state="translated">Head1からhead4までが見出しを生成し、head1が最高レベルとなります。この段落の残りの部分のテキストは、見出しの内容です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="967ca9215da8ba98cad45c97fab5f98884cce72e" translate="yes" xml:space="preserve">
          <source>Heading Content&quot; command or to a &quot;=item Item Content&quot; command. This specification does not specify what behavior should be in the case of a given document having several things all seeming to produce the same</source>
          <target state="translated">見出しコンテンツ &quot;コマンドや&quot;=item アイテムコンテンツ &quot;コマンドに対応しています。この仕様では、与えられた文書が複数のものを持っていて、すべてが同じ</target>
        </trans-unit>
        <trans-unit id="7a7c06f07a69ec449fd37c3b79a4e6409f1c6971" translate="yes" xml:space="preserve">
          <source>Hearing the word &quot;in&quot; is an</source>
          <target state="translated">で」という言葉を聞くことは</target>
        </trans-unit>
        <trans-unit id="7801d25365100494fe3fa68254035e723fdad847" translate="yes" xml:space="preserve">
          <source>Hebrew; now it doesn't.</source>
          <target state="translated">ヘブライ語、今は違う。</target>
        </trans-unit>
        <trans-unit id="84135281bd9f7278283b58aab96226bf3b6fa87a" translate="yes" xml:space="preserve">
          <source>Heed the moderators.</source>
          <target state="translated">司会者に気をつけろ</target>
        </trans-unit>
        <trans-unit id="a675c00310a9bb5810f1eb379886d21c46bbc50c" translate="yes" xml:space="preserve">
          <source>Help save the world! Share your code in a form that makes it easy to reuse.</source>
          <target state="translated">世界を救うのを手伝ってください! あなたのコードを再利用しやすいフォームで共有しましょう。</target>
        </trans-unit>
        <trans-unit id="72b65259063cf5501bdb369bad55680bb3e05273" translate="yes" xml:space="preserve">
          <source>Help testing test modules built with Test::Builder</source>
          <target state="translated">Test::Builder でビルドされたテストモジュールのテストを支援する</target>
        </trans-unit>
        <trans-unit id="b604e9e00b8aff400d6b282c4559d7681123e27e" translate="yes" xml:space="preserve">
          <source>Helper class for PerlIO layers implemented in perl</source>
          <target state="translated">perl で実装されている PerlIO レイヤーのためのヘルパークラス</target>
        </trans-unit>
        <trans-unit id="4057a75cb8ff5877d986e9f1a93f90da05a4393c" translate="yes" xml:space="preserve">
          <source>Helper for grok_number(), accepts various ways of spelling &quot;infinity&quot; or &quot;not a number&quot;, and returns one of the following flag combinations:</source>
          <target state="translated">grok_number()のヘルパーで、&quot;infinity&quot; や &quot;not a number&quot; といった様々な綴り方を受け付け、以下のフラグの組み合わせのいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="5d886854c3e45c23f2a67ad8886bba6332d21933" translate="yes" xml:space="preserve">
          <source>Helper functions for ExtUtils::Constant</source>
          <target state="translated">ExtUtils::Constant 用のヘルパー関数</target>
        </trans-unit>
        <trans-unit id="537e8e5aa520f3bdee23b191d8b4efb107769f00" translate="yes" xml:space="preserve">
          <source>Helper routine for MM-&amp;gt;fixin(), overridden because there's no such thing as an actual shebang line that will be interpreted by the shell, so we just prepend $Config{startperl} and preserve the shebang line argument for any switches it may contain.</source>
          <target state="translated">MM-&amp;gt; fixin（）のヘルパールーチン。シェルによって解釈される実際のシバン行などがないため、$ Config {startperl}を追加して、含まれる可能性のあるスイッチのシバン行引数を保持します。 。</target>
        </trans-unit>
        <trans-unit id="754ebef25d2322da9a737d155f7bf715f1ba74eb" translate="yes" xml:space="preserve">
          <source>Helper subroutine for subdirs</source>
          <target state="translated">サブディレクトリ用のヘルパーサブルーチン</target>
        </trans-unit>
        <trans-unit id="8a7149426bc5c4ad71c933b4d1d21cfffd9c3bea" translate="yes" xml:space="preserve">
          <source>Helpers for POD parsing and conversion</source>
          <target state="translated">PODのパースと変換のためのヘルパー</target>
        </trans-unit>
        <trans-unit id="a1d186be4c77271bc365d307a5b69f017e030f41" translate="yes" xml:space="preserve">
          <source>Hence the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;unimport&lt;/code&gt; routines are called at &lt;b&gt;compile time&lt;/b&gt; for the user's code.</source>
          <target state="translated">したがって、 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;unimport&lt;/code&gt; インポートのルーチンは、ユーザーのコードの&lt;b&gt;コンパイル時に&lt;/b&gt;呼び出され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="1698c95c1d69a8153fa73a579994fee537ea27f4" translate="yes" xml:space="preserve">
          <source>Hence you derive the following simple function to abstract that. It selects a random integer between the two given integers (inclusive). For example: &lt;code&gt;random_int_between(50,120)&lt;/code&gt; .</source>
          <target state="translated">したがって、それを抽象化する次の単純な関数を導出します。与えられた2つの整数の間の整数をランダムに選択します。例： &lt;code&gt;random_int_between(50,120)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc265d279911dd3bbb1e57f33ddb7cc94242a04f" translate="yes" xml:space="preserve">
          <source>Hence, at this point, the start of the buffer that we allocated lives at &lt;code&gt;SvPVX(sv) - SvIV(sv)&lt;/code&gt; in memory and the PV pointer is pointing into the middle of this allocated storage.</source>
          <target state="translated">したがって、この時点で、割り当てたバッファーの先頭はメモリの &lt;code&gt;SvPVX(sv) - SvIV(sv)&lt;/code&gt; にあり、PVポインターはこの割り当てられたストレージの中央を指しています。</target>
        </trans-unit>
        <trans-unit id="045ed35d9ead65236dd53e0cae88ac0c2f700143" translate="yes" xml:space="preserve">
          <source>Hence, checking &lt;code&gt;SvTYPE(sv) &amp;lt; SVt_PVAV&lt;/code&gt; is the best way to see whether something is a scalar.</source>
          <target state="translated">したがって、 &lt;code&gt;SvTYPE(sv) &amp;lt; SVt_PVAV&lt;/code&gt; チェックすることは、何かがスカラーかどうかを確認する最良の方法です。</target>
        </trans-unit>
        <trans-unit id="cb8da77ebcbcb4587ef2329234538c69cccafa62" translate="yes" xml:space="preserve">
          <source>Hence, on Mac OS, both</source>
          <target state="translated">したがって、Mac OSでは、両方の</target>
        </trans-unit>
        <trans-unit id="28d05e677bb92a81e181eb6f8a5252850baf1f6f" translate="yes" xml:space="preserve">
          <source>Hence, putting it all together:</source>
          <target state="translated">したがって、それをまとめる。</target>
        </trans-unit>
        <trans-unit id="78ae19820d96f656888a032f8938f666eaec4599" translate="yes" xml:space="preserve">
          <source>Hence, the aim of of a call to &lt;code&gt;extract_multiple&lt;/code&gt; in a list context is to split the processed string into as many non-overlapping fields as possible, by repeatedly applying each of the specified extractors to the remainder of the string. Thus &lt;code&gt;extract_multiple&lt;/code&gt; is a generalized form of Perl's &lt;code&gt;&lt;a href=&quot;../functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; subroutine.</source>
          <target state="translated">したがって、リストコンテキストでの &lt;code&gt;extract_multiple&lt;/code&gt; の呼び出しの目的は、指定された各エクストラクターを文字列の残りに繰り返し適用することにより、処理された文字列をできるだけ多くの重複しないフィールドに分割することです。したがって、 &lt;code&gt;extract_multiple&lt;/code&gt; はPerlの &lt;code&gt;&lt;a href=&quot;../functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; サブルーチンの一般化された形式です。</target>
        </trans-unit>
        <trans-unit id="6e76b82b230d1b216ea5fc74faa050d88bd7bb1a" translate="yes" xml:space="preserve">
          <source>Henk P. Penning maintains a site that collects data about CPAN sites:</source>
          <target state="translated">Henk P.Penningは、CPANサイトに関するデータを収集するサイトを管理しています。</target>
        </trans-unit>
        <trans-unit id="7f6138ce4b63e599ea6c8a23a9a9d862a811b01c" translate="yes" xml:space="preserve">
          <source>Henry Gabryjelski &amp;lt;henryg@WPI.EDU&amp;gt; - for the suggestion of creating directories recursively.</source>
          <target state="translated">Henry Gabryjelski &amp;lt;henryg@WPI.EDU&amp;gt;-ディレクトリを再帰的に作成するよう提案。</target>
        </trans-unit>
        <trans-unit id="1f2206fdca717cfb115864c58cfc1242ec1e8f30" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;$ARTICLE&lt;/code&gt; must be a global (package) scalar variable - not one declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ここで &lt;code&gt;$ARTICLE&lt;/code&gt; で宣言されていない1 -グローバル（パッケージ）スカラー変数でなければなりません &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ff0824227f04d195446a9ca4c80c3a2f4841adc" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;$ARTICLE&lt;/code&gt; must be a global (package) scalar variable - not one declared with &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ここで &lt;code&gt;$ARTICLE&lt;/code&gt; で宣言されていない1 -グローバル（パッケージ）スカラー変数でなければなりません &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7adfbace1a84aad46b6dc65bb49ec212586f4854" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;--verbose&lt;/code&gt; and &lt;code&gt;--quiet&lt;/code&gt; control the same variable &lt;code&gt;$verbose&lt;/code&gt; , but with opposite values.</source>
          <target state="translated">ここで &lt;code&gt;--verbose&lt;/code&gt; と &lt;code&gt;--quiet&lt;/code&gt; は同じ変数 &lt;code&gt;$verbose&lt;/code&gt; 制御しますが、値は逆になります。</target>
        </trans-unit>
        <trans-unit id="869e9b788a94b86ab899941e02856974518155a7" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;//g&lt;/code&gt; and &lt;code&gt;\G&lt;/code&gt; create a 'tag team' handoff of the string from one regexp to the other. Regexps with an independent subexpression are much like this, with a handoff of the string to the independent subexpression, and a handoff of the string back to the enclosing regexp.</source>
          <target state="translated">ここで &lt;code&gt;//g&lt;/code&gt; と &lt;code&gt;\G&lt;/code&gt; は、ある正規表現から別の正規表現への文字列の「タグチーム」ハンドオフを作成します。独立した部分式を持つ正規表現はこれによく似ており、独立した部分式への文字列のハンドオフと、囲んでいる正規表現への文字列のハンドオフがあります。</target>
        </trans-unit>
        <trans-unit id="4b495cc26b10b4cfa7edd523e971b1223bc39631" translate="yes" xml:space="preserve">
          <source>Here again Perl works just like the shell in that the &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; clobbers an existing file.</source>
          <target state="translated">ここでも、Perlは &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; が既存のファイルを上書きするという点でシェルと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="0b249e3305de27f4ee7d8f5a9ef3f95983593269" translate="yes" xml:space="preserve">
          <source>Here are Perl's functions (including things that look like functions, like some keywords and named operators) arranged by category. Some functions appear in more than one place.</source>
          <target state="translated">ここでは、Perlの関数(キーワードや名前付き演算子など、関数のように見えるものを含む)をカテゴリ別に並べています。いくつかの関数は複数の場所に表示されます。</target>
        </trans-unit>
        <trans-unit id="86585cb3324adc532f3c4c9a1e007eedd102a2eb" translate="yes" xml:space="preserve">
          <source>Here are a collection of (possibly) useful canned recipes for &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">以下は、 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 用の（おそらく）役立つ缶詰レシピのコレクションです。</target>
        </trans-unit>
        <trans-unit id="213525a9716fa0289377679cccd7e684d87732e5" translate="yes" xml:space="preserve">
          <source>Here are a couple of possibilities:</source>
          <target state="translated">ここにいくつかの可能性があります。</target>
        </trans-unit>
        <trans-unit id="de690581aef8b0c61e87b43058be3d94a077aff4" translate="yes" xml:space="preserve">
          <source>Here are a few examples to demonstrate usage of Perl's benchmarking tools.</source>
          <target state="translated">ここでは、Perl のベンチマークツールの使用法を示すいくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="a8331c63f719d3fa459c3be0fc4500f91a2bc542" translate="yes" xml:space="preserve">
          <source>Here are a few examples which illustrate the key concepts - as such most of them are of little practical use.</source>
          <target state="translated">ここでは、重要なコンセプトを説明するいくつかの例を紹介します-そのような例のほとんどは実用的ではありません。</target>
        </trans-unit>
        <trans-unit id="6d45496eb99d38ab7ab859d9d23312ec9997a265" translate="yes" xml:space="preserve">
          <source>Here are a few hints for creating high-quality patches:</source>
          <target state="translated">高品質なパッチを作成するためのヒントをご紹介します。</target>
        </trans-unit>
        <trans-unit id="ee5bae63f174379946589f4804bf6cb746e57ff8" translate="yes" xml:space="preserve">
          <source>Here are a few notes on the C function</source>
          <target state="translated">ここでは、C関数の注意点をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="4cf9a82c924ee686ad6e561bd6e1b0affa2a2991" translate="yes" xml:space="preserve">
          <source>Here are a few simple examples. First, let's pass in several arrays to a function and have it &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; all of then, returning a new list of all their former last elements:</source>
          <target state="translated">簡単な例をいくつか示します。まず、いくつかの配列を関数に渡して、そのすべてを &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; し、以前のすべての最後の要素の新しいリストを返します。</target>
        </trans-unit>
        <trans-unit id="778c5e77d32e09526eea8078cdc25093f593316e" translate="yes" xml:space="preserve">
          <source>Here are a few ways, all painful, to deal with it:</source>
          <target state="translated">ここでは、それに対処するためのいくつかの方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="4d368f7513a7890d1d9530618552892450a6a185" translate="yes" xml:space="preserve">
          <source>Here are a few words taken from the Berkeley DB FAQ (at</source>
          <target state="translated">以下は、Berkeley DB FAQ (at)から抜粋した言葉です。</target>
        </trans-unit>
        <trans-unit id="3de0d7b44e720bda0c9a25fbb58e38764c2a5fa0" translate="yes" xml:space="preserve">
          <source>Here are examples of &lt;code&gt;//s&lt;/code&gt; and &lt;code&gt;//m&lt;/code&gt; in action:</source>
          <target state="translated">&lt;code&gt;//s&lt;/code&gt; と &lt;code&gt;//m&lt;/code&gt; の動作例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="b13167d0662ec600bc247b1050d48340c5a1f9fa" translate="yes" xml:space="preserve">
          <source>Here are examples of many kinds of file opens. Those using &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; all assume that you've pulled in the constants from &lt;a href=&quot;fcntl&quot;&gt;Fcntl&lt;/a&gt;:</source>
          <target state="translated">以下に、さまざまな種類のファイルを開く例を示します。 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; を使用するものはすべて、&lt;a href=&quot;fcntl&quot;&gt;Fcntl&lt;/a&gt;から定数を取得したと想定しています。</target>
        </trans-unit>
        <trans-unit id="1b269a27d981a83ad06f7f43ed4b5271ebb95e10" translate="yes" xml:space="preserve">
          <source>Here are examples of the constructors and the valid options available for DB_HASH, DB_BTREE and DB_RECNO respectively.</source>
          <target state="translated">ここでは、DB_HASH、DB_BTREE、DB_RECNO で使用できるコンストラクタと有効なオプションの例を示します。</target>
        </trans-unit>
        <trans-unit id="feffd8fe1a5cbaddbff753bfdc84e56b03609303" translate="yes" xml:space="preserve">
          <source>Here are some code samples showing a possible usage of Storable:</source>
          <target state="translated">ここでは、Storable の使用法を示すコードサンプルをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="b97373427a9280cf0da7790f9dd7dc5b0d29339d" translate="yes" xml:space="preserve">
          <source>Here are some concerns to keep in mind when using an endianness modifier:</source>
          <target state="translated">ここでは、エンディアン性修飾子を使用する際に注意すべき点をいくつか挙げておきます。</target>
        </trans-unit>
        <trans-unit id="c18e94a9efc11f05f3d5f2b6edc571204b41c5d4" translate="yes" xml:space="preserve">
          <source>Here are some examples of how that works on an ASCII platform:</source>
          <target state="translated">ここでは、ASCIIプラットフォーム上での動作の例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="ca06cec84a9ef5e9ca766f7b0195777a639a43ed" translate="yes" xml:space="preserve">
          <source>Here are some examples of how to use these:</source>
          <target state="translated">これらの使用例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="84bd37d6cce9f50a387d161b1db1876dd2e66de5" translate="yes" xml:space="preserve">
          <source>Here are some examples of that:</source>
          <target state="translated">その一例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="eb016178c05ee24cc48ff8dddc178e709d61edd0" translate="yes" xml:space="preserve">
          <source>Here are some examples of usage of the &quot;cmd&quot; shell:</source>
          <target state="translated">ここでは、&quot;cmd &quot;シェルの使用例を紹介します。</target>
        </trans-unit>
        <trans-unit id="b17211739968de398ac6cabe7b5c9c6e7b2ffe53" translate="yes" xml:space="preserve">
          <source>Here are some examples that explain the reasons why certain results occur while handling infinity:</source>
          <target state="translated">ここでは、無限大の処理中に特定の結果が発生する理由を説明する例を紹介します。</target>
        </trans-unit>
        <trans-unit id="5a87004d684b1273adb1c5dad1a3b884a901f693" translate="yes" xml:space="preserve">
          <source>Here are some examples that you should be able to type into your command shell:</source>
          <target state="translated">ここでは、コマンドシェルに入力できるようにしておくべき例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="0931022beea83b3afc095873234631b7243eeca4" translate="yes" xml:space="preserve">
          <source>Here are some examples:</source>
          <target state="translated">ここでは、いくつかの例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="1ffece14922bda83136b1a5ca004aee395c4815b" translate="yes" xml:space="preserve">
          <source>Here are some further observations based on experiments: The C runtime breaks arguments at spaces and passes them to programs in argc/argv. Double quotes can be used to prevent arguments with spaces in them from being split up. You can put a double quote in an argument by escaping it with a backslash and enclosing the whole argument within double quotes. The backslash and the pair of double quotes surrounding the argument will be stripped by the C runtime.</source>
          <target state="translated">ここでは、実験に基づいてさらにいくつかの観察をしてみましょう。Cのランタイムはスペースで引数を分割し、argc/argvでプログラムに渡す。二重引用符は、スペースを含む引数が分割されるのを防ぐために使うことができます。二重引用符は、バックスラッシュでエスケープし、引数全体を二重引用符で囲むことで、引数の中に入れることができます。バックスラッシュと引数を囲む二重引用符のペアは、C言語のランタイムによって取り除かれます。</target>
        </trans-unit>
        <trans-unit id="0b595570315b5625b2174cdd7459401aaf7451f5" translate="yes" xml:space="preserve">
          <source>Here are some more examples; be aware that when using an explicit index, the &lt;code&gt;$&lt;/code&gt; may need escaping:</source>
          <target state="translated">ここにいくつかの例があります。明示的なインデックスを使用する場合、 &lt;code&gt;$&lt;/code&gt; はエスケープする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c694403eaca658591930c8c7c2bb34296f84a099" translate="yes" xml:space="preserve">
          <source>Here are some notable values:</source>
          <target state="translated">注目すべき値を紹介します。</target>
        </trans-unit>
        <trans-unit id="cc7e40e86aef57a83594c5dfdd7f8a1c23f71b5f" translate="yes" xml:space="preserve">
          <source>Here are some other examples:</source>
          <target state="translated">他にもいくつかの例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="5552dd4aff82cc5a2b99f42ba7a6d2949d5c6e2e" translate="yes" xml:space="preserve">
          <source>Here are some other functions:</source>
          <target state="translated">他にもいくつかの機能を紹介します。</target>
        </trans-unit>
        <trans-unit id="79024a11d0139db04c2facf9ae0e8d93da4c05aa" translate="yes" xml:space="preserve">
          <source>Here are some other more substantive style issues to think about:</source>
          <target state="translated">ここでは他にも、より実質的なスタイルの問題を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="8de6ff6be7dbb16b2f90d46db02214f1b31982a4" translate="yes" xml:space="preserve">
          <source>Here are some samples of syntactically valid declarations, with annotation as to how they resolve internally into &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attributes&lt;/code&gt; invocations by perl. These examples are primarily useful to see how the &quot;appropriate package&quot; is found for the possible method lookups for package-defined attributes.</source>
          <target state="translated">以下に、構文的に有効な宣言のサンプルをいくつか示します。これらは、内部で解決されてperlによる &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attributes&lt;/code&gt; 呼び出しを&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;する方法に関する注釈が付いています。これらの例は主に、パッケージ定義属性の可能なメソッド検索で「適切なパッケージ」がどのように見つかるかを確認するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3ef6c8462426b25783d9f2c73bd41688e54925d5" translate="yes" xml:space="preserve">
          <source>Here are some variants, most of which don't work:</source>
          <target state="translated">ここにいくつかのバリエーションがありますが、そのほとんどは動作しません。</target>
        </trans-unit>
        <trans-unit id="0361977099d002d67600facecf96ac617d8167ef" translate="yes" xml:space="preserve">
          <source>Here are the current possible types, with short descriptions:</source>
          <target state="translated">ここでは、現在考えられるタイプを簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="67895007dd0c6840199574bcaf648ce79505acd6" translate="yes" xml:space="preserve">
          <source>Here are the methods for the DotFiles tied hash.</source>
          <target state="translated">DotFilesの紐付けハッシュのメソッドを紹介します。</target>
        </trans-unit>
        <trans-unit id="bdd9e497208f79834038783c1e02aab82a664f8b" translate="yes" xml:space="preserve">
          <source>Here are the methods:</source>
          <target state="translated">その方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="308b3fd3c823fd8f4a8be7a1c05819c0bdbe51b4" translate="yes" xml:space="preserve">
          <source>Here are the places where Perl will assume &lt;code&gt;$_&lt;/code&gt; even if you don't use it:</source>
          <target state="translated">Perlが &lt;code&gt;$_&lt;/code&gt; 使用しない場合でも、ここで$ _を想定する場所を以下に示します。</target>
        </trans-unit>
        <trans-unit id="0a9a64ecb96bf415307190a704ba59f675ea62cc" translate="yes" xml:space="preserve">
          <source>Here are the possible keys for the hash:</source>
          <target state="translated">ハッシュのキーは以下の通りです</target>
        </trans-unit>
        <trans-unit id="133a7307c88c0ca94d0fd77ce650ab97042a4831" translate="yes" xml:space="preserve">
          <source>Here are the quote-like operators that apply to pattern matching and related activities.</source>
          <target state="translated">ここでは、パターンマッチングや関連する活動に適用される引用符のような演算子を紹介します。</target>
        </trans-unit>
        <trans-unit id="c59988c08aece7bd08debf7ada77c7366bd57099" translate="yes" xml:space="preserve">
          <source>Here are the rules that are used in &lt;code&gt;catdir()&lt;/code&gt; ; note that we try to be as compatible as possible to Unix:</source>
          <target state="translated">&lt;code&gt;catdir()&lt;/code&gt; で使用されるルールは次のとおりです。Unixと可能な限り互換性があるようにすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4aa7fef747fea48e4e4795cd9eaeefa09930bbdb" translate="yes" xml:space="preserve">
          <source>Here are the short and long forms of the values the &lt;code&gt;General Category&lt;/code&gt; property can have:</source>
          <target state="translated">&lt;code&gt;General Category&lt;/code&gt; プロパティが持つことができる値の短い形式と長い形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="420394a2a2618e29901a0ab672922a30d23423d8" translate="yes" xml:space="preserve">
          <source>Here are the statistics for Perl 5.005_62 on my system:</source>
          <target state="translated">以下は私のシステムでのPerl 5.005_62の統計です。</target>
        </trans-unit>
        <trans-unit id="fd03473c869638bd902e9d6b0f20d91be736706a" translate="yes" xml:space="preserve">
          <source>Here are the suggested ways of modifying your include path, including environment variables, run-time switches, and in-code statements:</source>
          <target state="translated">ここでは、環境変数、ランタイムスイッチ、インコード文を含む、インクルードパスを変更する方法を提案します。</target>
        </trans-unit>
        <trans-unit id="c09b558fc05cb8053f5a3187154e8896a601ad3a" translate="yes" xml:space="preserve">
          <source>Here are the ways that Perl knows that a string should be treated as Unicode:</source>
          <target state="translated">文字列が Unicode として扱われるべきであることを Perl が知っている方法は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4358e9bb262d19ae65de17de5c9b7a341e07eea3" translate="yes" xml:space="preserve">
          <source>Here are what those parameters to the new() constructor mean:</source>
          <target state="translated">ここでは、new()コンストラクタのパラメータの意味を説明します。</target>
        </trans-unit>
        <trans-unit id="d3c80c52da3a7596fb4bd95e7f557fcc03ea2102" translate="yes" xml:space="preserve">
          <source>Here documents are found in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;. Check for these three things:</source>
          <target state="translated">ここでドキュメントは&lt;a href=&quot;perlop&quot;&gt;perlopにあり&lt;/a&gt;ます。次の3つを確認してください。</target>
        </trans-unit>
        <trans-unit id="484c5007fac2b871f4ec1de41d18168107149ae5" translate="yes" xml:space="preserve">
          <source>Here in our DotFiles example, we'll be careful not to let them try to overwrite the file unless they've called the clobber() method on the original object reference returned by tie().</source>
          <target state="translated">ここでの DotFiles の例では、tie()が返す元のオブジェクト参照に対して clobber()メソッドをコールしない限り、ファイルを上書きしようとしないように注意します。</target>
        </trans-unit>
        <trans-unit id="47c02f53e38b9b0fb6a0ae2769d47d0a5b5b6556" translate="yes" xml:space="preserve">
          <source>Here is a DBM Filter that does it:</source>
          <target state="translated">それを行うDBMフィルターがこちらです。</target>
        </trans-unit>
        <trans-unit id="f525e8a25cabfe7d14de3785ff13475d1795d58b" translate="yes" xml:space="preserve">
          <source>Here is a Perl subroutine which prints whatever parameters are passed to it.</source>
          <target state="translated">ここに渡されたパラメータを表示するPerlのサブルーチンがあります。</target>
        </trans-unit>
        <trans-unit id="45cd387e7d7083c724152df763a18216115c4120" translate="yes" xml:space="preserve">
          <source>Here is a Perl subroutine,</source>
          <target state="translated">Perlのサブルーチンです。</target>
        </trans-unit>
        <trans-unit id="badb362bb0ad7ef4caa28ee99b671c9b8a6d2d3a" translate="yes" xml:space="preserve">
          <source>Here is a brief checklist on how to use Maketext to localize applications:</source>
          <target state="translated">ここでは、Maketextを使ってアプリケーションをローカライズする方法を簡単にチェックしてみましょう。</target>
        </trans-unit>
        <trans-unit id="e180555a648403b54c19cc98b95102cc9c7da450" translate="yes" xml:space="preserve">
          <source>Here is a code snippet to tell what &quot;word&quot; characters are in the current locale, in that locale's order:</source>
          <target state="translated">以下は、現在のロケールにある &quot;単語&quot; 文字がどのような文字であるかを、そのロケールの順番で伝えるコードスニペットです。</target>
        </trans-unit>
        <trans-unit id="8cd600b00d9b275c1b848cf418f2f3dc7bc149f6" translate="yes" xml:space="preserve">
          <source>Here is a definition of the interface available:</source>
          <target state="translated">ここでは、利用可能なインターフェースの定義を示します。</target>
        </trans-unit>
        <trans-unit id="4ffd58769a04701c527d60f25ae6cee8c3577aa1" translate="yes" xml:space="preserve">
          <source>Here is a definition of the interface:</source>
          <target state="translated">ここでは、インターフェースの定義を説明します。</target>
        </trans-unit>
        <trans-unit id="86773bb3e419f5d3ec6cdc84464ead386b08f646" translate="yes" xml:space="preserve">
          <source>Here is a filter which a variation of the &lt;code&gt;Joe2Jim&lt;/code&gt; filter. As well as substituting all occurrences of &lt;code&gt;&quot;Joe&quot;&lt;/code&gt; to &lt;code&gt;&quot;Jim&quot;&lt;/code&gt; it keeps a count of the number of substitutions made in the context object.</source>
          <target state="translated">これは、 &lt;code&gt;Joe2Jim&lt;/code&gt; フィルターのバリエーションであるフィルターです。 &lt;code&gt;&quot;Joe&quot;&lt;/code&gt; のすべての出現を &lt;code&gt;&quot;Jim&quot;&lt;/code&gt; に置き換えるだけでなく、コンテキストオブジェクトで行われた置換の数をカウントし続けます。</target>
        </trans-unit>
        <trans-unit id="4d0499c68821327c798829729804b1a0bcda02ab" translate="yes" xml:space="preserve">
          <source>Here is a formula to ensurrogate a Unicode character \x{10000} and above;</source>
          <target state="translated">ここでは、Unicode 文字 \x{10000}以上をアンサロゲートするための式を示します。</target>
        </trans-unit>
        <trans-unit id="5e13ad2f9de57b9ee78127b86f1be789cace5f69" translate="yes" xml:space="preserve">
          <source>Here is a less often used example:</source>
          <target state="translated">あまり使われていない例を紹介します。</target>
        </trans-unit>
        <trans-unit id="b6f9d3fd360afdcd3acc8bec172ad26a0315b6d8" translate="yes" xml:space="preserve">
          <source>Here is a list of the common features of the anonymous sub and the &lt;code&gt;filter()&lt;/code&gt; method.</source>
          <target state="translated">以下は、無名サブルーチンと &lt;code&gt;filter()&lt;/code&gt; メソッドの一般的な機能のリストです。</target>
        </trans-unit>
        <trans-unit id="1832b72be8a1d9f95753e5f4c415597ea4ff02d1" translate="yes" xml:space="preserve">
          <source>Here is a list of the valid options:</source>
          <target state="translated">有効なオプションの一覧です。</target>
        </trans-unit>
        <trans-unit id="8914294fa8d99540ed79b9d165dee16297f1d6a9" translate="yes" xml:space="preserve">
          <source>Here is a longer example of &lt;code&gt;given&lt;/code&gt; :</source>
          <target state="translated">次に、 &lt;code&gt;given&lt;/code&gt; たより長い例を示します。</target>
        </trans-unit>
        <trans-unit id="b951146917555dc2bff07eaf853fe90ebe90da08" translate="yes" xml:space="preserve">
          <source>Here is a more complete description of how &lt;code&gt;carp&lt;/code&gt; and &lt;code&gt;croak&lt;/code&gt; work. What they do is search the call-stack for a function call stack where they have not been told that there shouldn't be an error. If every call is marked safe, they give up and give a full stack backtrace instead. In other words they presume that the first likely looking potential suspect is guilty. Their rules for telling whether a call shouldn't generate errors work as follows:</source>
          <target state="translated">ここでは、 &lt;code&gt;carp&lt;/code&gt; と &lt;code&gt;croak&lt;/code&gt; がどのように機能するかをさらに詳しく説明します。彼らは、エラーが発生してはならないことを知らされていない関数呼び出しスタックを呼び出しスタックから検索します。すべての呼び出しが安全であるとマークされている場合、代わりに中止して完全なスタックバックトレースを提供します。言い換えれば、彼らは、最初に見かけそうな容疑者が有罪であると推定している。呼び出しでエラーが発生しないようにするかどうかを決定するルールは次のように機能します。</target>
        </trans-unit>
        <trans-unit id="e9d5f1ad420c45c5ca7b8cd720763979928a0e80" translate="yes" xml:space="preserve">
          <source>Here is a more complete example that makes use of some of the methods described above. It also makes use of the API interface directly (see &lt;a href=&quot;#THE-API-INTERFACE&quot;&gt;THE API INTERFACE&lt;/a&gt;).</source>
          <target state="translated">上記の方法のいくつかを利用するより完全な例を次に示します。また、（参照の直接APIインターフェイスを使用する&lt;a href=&quot;#THE-API-INTERFACE&quot;&gt;APIインタフェースを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="481b0824c1ad273d7763f1ffdf818909caa88617" translate="yes" xml:space="preserve">
          <source>Here is a possible workaround: create a toplevel</source>
          <target state="translated">ここでは、可能な回避策として、トップレベルを作成します。</target>
        </trans-unit>
        <trans-unit id="aac02f3544d72b59392576f2e2d1edbb502cf904" translate="yes" xml:space="preserve">
          <source>Here is a real example. Netscape 2.0 keeps a record of the locations you visit along with the time you last visited them in a DB_HASH database. This is usually stored in the file</source>
          <target state="translated">これは実際の例です。Netscape 2.0 は、あなたが最後に訪れた場所の記録を、最後に訪れた時間とともに DB_HASH データベースに保存します。これは通常</target>
        </trans-unit>
        <trans-unit id="645c6ed6c5edc9279cd1369bce1c3b76531901ff" translate="yes" xml:space="preserve">
          <source>Here is a sample chunk of code to break up and put back together again some fixed-format input lines, in this case from the output of a normal, Berkeley-style ps:</source>
          <target state="translated">ここでは、いくつかの固定フォーマットの入力行を分割して、再び元に戻すコードのサンプルを示します。</target>
        </trans-unit>
        <trans-unit id="38eab965034c311c9ba1e3fb718a8ef1f540a4a4" translate="yes" xml:space="preserve">
          <source>Here is a script that saves, redirects, and restores &lt;code&gt;STDOUT&lt;/code&gt; and &lt;code&gt;STDERR&lt;/code&gt; using various methods:</source>
          <target state="translated">以下は、さまざまな方法を使用して &lt;code&gt;STDOUT&lt;/code&gt; および &lt;code&gt;STDERR&lt;/code&gt; を保存、リダイレクト、および復元するスクリプトです。</target>
        </trans-unit>
        <trans-unit id="bf170b2ef98b6313890763a8318d77c620c61ec2" translate="yes" xml:space="preserve">
          <source>Here is a script which uses it:</source>
          <target state="translated">それを使ったスクリプトを紹介します。</target>
        </trans-unit>
        <trans-unit id="d109e8133d36be8ec27bcf8a10b412b1b37621e9" translate="yes" xml:space="preserve">
          <source>Here is a short breakdown of perl's operation:</source>
          <target state="translated">以下、perlの動作の簡単な内訳です。</target>
        </trans-unit>
        <trans-unit id="b641d2582f209503d29beece571a8e6d76517863" translate="yes" xml:space="preserve">
          <source>Here is a short example which shows how &lt;code&gt;IO::Select&lt;/code&gt; could be used to write a server which communicates with several sockets while also listening for more connections on a listen socket</source>
          <target state="translated">以下は、 &lt;code&gt;IO::Select&lt;/code&gt; を使用して、複数のソケットと通信しながら、待機ソケットでさらに接続を待機するサーバーを作成する方法を示す短い例です。</target>
        </trans-unit>
        <trans-unit id="f42a88335a66627a85ff6a9bee66b1f0bc358b5d" translate="yes" xml:space="preserve">
          <source>Here is a short, but incomplete summary:</source>
          <target state="translated">以下、短いですが不完全な要約です。</target>
        </trans-unit>
        <trans-unit id="120acde3518e6786e0d2c79e05b71648be345e7b" translate="yes" xml:space="preserve">
          <source>Here is a simple XSUB which illustrates the mechanics of calling both the &lt;code&gt;PrintID&lt;/code&gt; and &lt;code&gt;Display&lt;/code&gt; methods from C.</source>
          <target state="translated">以下は、Cから &lt;code&gt;PrintID&lt;/code&gt; メソッドと &lt;code&gt;Display&lt;/code&gt; メソッドの両方を呼び出すメカニズムを示す簡単なXSUBです。</target>
        </trans-unit>
        <trans-unit id="fe479990bde1cedb7827b08a0b51384331185af7" translate="yes" xml:space="preserve">
          <source>Here is a simple constructor:</source>
          <target state="translated">ここに簡単なコンストラクタがあります。</target>
        </trans-unit>
        <trans-unit id="8cf9fcb79a6528df89e621ddbe45b24482b8eaf2" translate="yes" xml:space="preserve">
          <source>Here is a simple example of how to add a new target to the generated Makefile:</source>
          <target state="translated">ここでは、生成されたMakefileに新しいターゲットを追加する方法の簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="40cda83fc05639dd468f5eab757cfe3f54097a29" translate="yes" xml:space="preserve">
          <source>Here is a simple example of the technique, using the &lt;a href=&quot;hash/util/fieldhash&quot;&gt;Hash::Util::FieldHash&lt;/a&gt; core module. This module was added to the core to support inside-out object implementations.</source>
          <target state="translated">以下は、&lt;a href=&quot;hash/util/fieldhash&quot;&gt;Hash :: Util :: FieldHash&lt;/a&gt;コアモジュールを使用した簡単な手法の例です。このモジュールは、インサイドアウトオブジェクトの実装をサポートするためにコアに追加されました。</target>
        </trans-unit>
        <trans-unit id="126689dd133c61c2158a4c313ed301c9a4876c96" translate="yes" xml:space="preserve">
          <source>Here is a simple example that uses RECNO (if you are using a version of Perl earlier than 5.004_57 this example won't work -- see &lt;a href=&quot;#Extra-RECNO-Methods&quot;&gt;Extra RECNO Methods&lt;/a&gt; for a workaround).</source>
          <target state="translated">以下は、RECNOを使用する簡単な例です（5.004_57より前のバージョンのPerlを使用している場合、この例は機能しません- 回避策については、&lt;a href=&quot;#Extra-RECNO-Methods&quot;&gt;追加のRECNOメソッド&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="319b9d58a92f86f8037b1f0bce75684db1494b7b" translate="yes" xml:space="preserve">
          <source>Here is a skeleton for the</source>
          <target state="translated">のためのスケルトンです。</target>
        </trans-unit>
        <trans-unit id="550484c98d2783ef867d760a633e2f2132a4d47b" translate="yes" xml:space="preserve">
          <source>Here is a snippet of XSUB which defines</source>
          <target state="translated">以下は、XSUB の定義を示すスニペットです。</target>
        </trans-unit>
        <trans-unit id="002abcfd840947931c322494ad132e91e82ebd0f" translate="yes" xml:space="preserve">
          <source>Here is a snippet of code that is loosely based on Tom Christiansen's</source>
          <target state="translated">以下はトム・クリスチャンセンの</target>
        </trans-unit>
        <trans-unit id="45cde31767fc2f9538502554458696cb23085fa9" translate="yes" xml:space="preserve">
          <source>Here is a trivial XSUB which prints the context in which it is currently executing.</source>
          <target state="translated">ここでは、現在実行中のコンテキストを表示する簡単なXSUBがあります。</target>
        </trans-unit>
        <trans-unit id="10eee1483a3720a88b88f2a6e6f0dd7de0f97165" translate="yes" xml:space="preserve">
          <source>Here is a trivial example of using &lt;code&gt;deflate&lt;/code&gt; . It simply reads standard input, deflates it and writes it to standard output.</source>
          <target state="translated">&lt;code&gt;deflate&lt;/code&gt; を使用した簡単な例を次に示します。単に標準入力を読み取り、それをデフレートし、標準出力に書き込みます。</target>
        </trans-unit>
        <trans-unit id="1868baee762e5828998b63475228ea8991afb128" translate="yes" xml:space="preserve">
          <source>Here is a very brief example of a policy module that expires each cache item after ten seconds.</source>
          <target state="translated">ここでは、10 秒後に各キャッシュアイテムを期限切れにするポリシーモジュールの簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="7f88bfdf5db7c3c03b6f8f2495da889972cfe524" translate="yes" xml:space="preserve">
          <source>Here is a very spartan uudecoder that will work on EBCDIC:</source>
          <target state="translated">EBCDIC で動作する非常にスパルタンな uudecoder があります。</target>
        </trans-unit>
        <trans-unit id="d946c977086b5be12c98dcb6ff1ce5c76b228d28" translate="yes" xml:space="preserve">
          <source>Here is an efficient way to delete all files that haven't been modified for at least a week:</source>
          <target state="translated">ここでは、少なくとも1週間は変更されていないすべてのファイルを削除する効率的な方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="70fccfa6b6af36450513847e29399b60a48adeac" translate="yes" xml:space="preserve">
          <source>Here is an example from big5-eten.</source>
          <target state="translated">big5-etenの例です。</target>
        </trans-unit>
        <trans-unit id="e9c9019a4b9d1c2c747c162dad5a190290c7d35f" translate="yes" xml:space="preserve">
          <source>Here is an example of backtracking: Let's say you want to find the word following &quot;foo&quot; in the string &quot;Food is on the foo table.&quot;:</source>
          <target state="translated">バックトラックの例です。例えば、&quot;FOOD is on the foo table.&quot;という文字列の中から、&quot;FOOD &quot;に続く単語を探したいとします。</target>
        </trans-unit>
        <trans-unit id="ea40af6afb8d235271ee69af60576e5fd7626d85" translate="yes" xml:space="preserve">
          <source>Here is an example of how to access the option name and value from within a subroutine:</source>
          <target state="translated">サブルーチン内からオプション名と値にアクセスする方法の例を示します。</target>
        </trans-unit>
        <trans-unit id="205e5e253d5e8d9713777fb82bdd5445436cb1b6" translate="yes" xml:space="preserve">
          <source>Here is an example of how your own code can go broken:</source>
          <target state="translated">ここでは、あなた自身のコードがどのように壊れてしまうかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="748768cc7486ba197e2bf8648f0ea7277ae15d72" translate="yes" xml:space="preserve">
          <source>Here is an example of the script which &quot;calculates&quot; the side of circumscribed octagon using the above package:</source>
          <target state="translated">上記のパッケージを使って、外接八角形の側面を「計算」するスクリプトの例です。</target>
        </trans-unit>
        <trans-unit id="404268aa749a8cb74398fcef4885ddfb5e393936" translate="yes" xml:space="preserve">
          <source>Here is an example of these principles in action:</source>
          <target state="translated">ここでは、これらの原則を実践した例を紹介します。</target>
        </trans-unit>
        <trans-unit id="d36af1892ac909ba4b83e53e087863bb90d56692" translate="yes" xml:space="preserve">
          <source>Here is an example of using &lt;code&gt;NVtime&lt;/code&gt; from C:</source>
          <target state="translated">Cから &lt;code&gt;NVtime&lt;/code&gt; を使用する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="7c9994bdad12e2f359f710fa2f6ef403d1effd52" translate="yes" xml:space="preserve">
          <source>Here is an example of using &lt;code&gt;inflate&lt;/code&gt; .</source>
          <target state="translated">次に、 &lt;code&gt;inflate&lt;/code&gt; の使用例を示します。</target>
        </trans-unit>
        <trans-unit id="a6e2da397e1c17983df2e6041276a4e28620f94d" translate="yes" xml:space="preserve">
          <source>Here is an example of using an optional parameter to override the default buffer size.</source>
          <target state="translated">デフォルトのバッファサイズを上書きするためにオプションのパラメータを使用した例を示します。</target>
        </trans-unit>
        <trans-unit id="8f3c57546ccedafc9770a8f0efa81f37adc91294" translate="yes" xml:space="preserve">
          <source>Here is an example of using the &lt;code&gt;Compress::Raw::Zlib::Deflate&lt;/code&gt; optional parameter list to override the default buffer size and compression level. All other options will take their default values.</source>
          <target state="translated">以下は、 &lt;code&gt;Compress::Raw::Zlib::Deflate&lt;/code&gt; オプションパラメータリストを使用して、デフォルトのバッファサイズと圧縮レベルを上書きする例です。他のすべてのオプションはデフォルト値を取ります。</target>
        </trans-unit>
        <trans-unit id="87545ecf0b6e7815b60232cfb74673f436cd6fe1" translate="yes" xml:space="preserve">
          <source>Here is an example of using the &lt;code&gt;deflateInit&lt;/code&gt; optional parameter list to override the default buffer size and compression level. All other options will take their default values.</source>
          <target state="translated">次に、 &lt;code&gt;deflateInit&lt;/code&gt; オプションパラメータリストを使用して、デフォルトのバッファサイズと圧縮レベルを上書きする例を示します。他のすべてのオプションはデフォルト値を取ります。</target>
        </trans-unit>
        <trans-unit id="09d05a4a26dea0db21fa2d5b84da51786c319d41" translate="yes" xml:space="preserve">
          <source>Here is an example of using the &lt;code&gt;inflateInit&lt;/code&gt; optional parameter to override the default buffer size.</source>
          <target state="translated">以下は、 &lt;code&gt;inflateInit&lt;/code&gt; オプションパラメータを使用してデフォルトのバッファサイズを上書きする例です。</target>
        </trans-unit>
        <trans-unit id="c7cbd7a5ef78ce531e711de3f32a263a9851ff1b" translate="yes" xml:space="preserve">
          <source>Here is an example of using the filter:</source>
          <target state="translated">フィルターの使用例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="e4ff3e36580b38b61c7a227d4955c81060aeb814" translate="yes" xml:space="preserve">
          <source>Here is an example script that uses &lt;code&gt;Filter::sh&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;Filter::sh&lt;/code&gt; を使用するスクリプトの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="012645975f14da1f34bb102f202aaf2953a30bc6" translate="yes" xml:space="preserve">
          <source>Here is an example script which uses the interface. It implements a</source>
          <target state="translated">以下に、このインターフェイスを使用するスクリプトの例を示します。これは</target>
        </trans-unit>
        <trans-unit id="1cbf7c7be1c22fad45e3015eadd538010d85816f" translate="yes" xml:space="preserve">
          <source>Here is an example that makes use of this tie:</source>
          <target state="translated">このネクタイを活用した例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="a8ff5767311ec468cc89661ca51ca82e04f18ab9" translate="yes" xml:space="preserve">
          <source>Here is an example that renames all c files to cpp.</source>
          <target state="translated">ここでは、すべての c ファイルの名前を cpp に変更する例を示します。</target>
        </trans-unit>
        <trans-unit id="80e0e9e4bb3140e634ddeaa722387560a0149a79" translate="yes" xml:space="preserve">
          <source>Here is an example to illustrate how the bits actually fall in place:</source>
          <target state="translated">ここでは、実際にどのようにビットが落ちるのかを説明するための例を示します。</target>
        </trans-unit>
        <trans-unit id="d0e29b3fe9551af38ec63a152fe4f4ef139ee92e" translate="yes" xml:space="preserve">
          <source>Here is an example where a string containing blank-separated words, numbers and single dashes is to be split into its components. Using &lt;code&gt;/\s+/&lt;/code&gt; alone won't work, because spaces are not required between dashes, or a word or a dash. Additional places for a split are established by looking ahead and behind:</source>
          <target state="translated">以下は、空白で区切られた単語、数字、単一のダッシュを含む文字列をそのコンポーネントに分割する例です。 &lt;code&gt;/\s+/&lt;/code&gt; 単独で使用しても機能しません。ダッシュ、または単語やダッシュの間にスペースが必要ないためです。分割のための追加の場所は、前後を見ることによって確立されます。</target>
        </trans-unit>
        <trans-unit id="4b737180e2561bd5a0699f794a8b8783a4667057" translate="yes" xml:space="preserve">
          <source>Here is an example which illustrates the problem from a &lt;b&gt;DB_File&lt;/b&gt; perspective:</source>
          <target state="translated">以下は、&lt;b&gt;DB_Fileの&lt;/b&gt;観点から問題を説明する例です。</target>
        </trans-unit>
        <trans-unit id="f644e6370d9a6fe28106ff279c08d32f76b322b7" translate="yes" xml:space="preserve">
          <source>Here is an extreme example. Consider the Fibonacci sequence, defined by the following function:</source>
          <target state="translated">ここに極端な例があります。以下の関数で定義されるフィボナッチ数列を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="87cc084321780edd34384cbc3149445fe191a094" translate="yes" xml:space="preserve">
          <source>Here is an interesting idea that doesn't involve the Debug filter. Currently Perl subroutines have fairly limited support for formal parameter lists. You can specify the number of parameters and their type, but you still have to manually take them out of the &lt;code&gt;@_&lt;/code&gt; array yourself. Write a source filter that allows you to have a named parameter list. Such a filter would turn this:</source>
          <target state="translated">ここに、Debugフィルターを含まない興味深いアイデアがあります。現在、Perlサブルーチンは、仮パラメーター・リストのサポートをかなり制限しています。パラメータの数とそのタイプを指定できますが、それでも手動で &lt;code&gt;@_&lt;/code&gt; 配列から手動で取り出す必要があります。名前付きパラメーターリストを作成できるソースフィルターを記述します。そのようなフィルターはこれを変えるでしょう：</target>
        </trans-unit>
        <trans-unit id="cdf048c5ea517c38dde03f3aa3ec4c135c3bd31b" translate="yes" xml:space="preserve">
          <source>Here is another real-life example. By default, whenever Perl writes to a DBM database it always writes the key and value as strings. So when you use this:</source>
          <target state="translated">ここにも実例があります。デフォルトでは、PerlはDBMデータベースに書き込むときは常にキーと値を文字列として書き込みます。ですから、これを使うと</target>
        </trans-unit>
        <trans-unit id="25d95fcca3eab15fb28653dc8409bb9ada80176a" translate="yes" xml:space="preserve">
          <source>Here is how &lt;code&gt;Encode&lt;/code&gt; handles the UTF8 flag.</source>
          <target state="translated">&lt;code&gt;Encode&lt;/code&gt; がUTF8フラグを処理する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="89e87986f55aa1d049d1fc43e956c467b865ddf7" translate="yes" xml:space="preserve">
          <source>Here is how to query the database for the &lt;b&gt;de&lt;/b&gt; (Deutsch or German) locale.</source>
          <target state="translated">データベースに&lt;b&gt;de&lt;/b&gt;（DeutschまたはGerman）ロケールを照会する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="b74dc5032afa362c898993b212d8c65907cee21d" translate="yes" xml:space="preserve">
          <source>Here is how to use this module.</source>
          <target state="translated">このモジュールの使い方を紹介します。</target>
        </trans-unit>
        <trans-unit id="e417973919b13f8ed343cc33d50cf8bf18dd96fb" translate="yes" xml:space="preserve">
          <source>Here is how to write your native data out using UTF-8 (or UTF-EBCDIC) and then read it back in.</source>
          <target state="translated">ここでは、UTF-8(またはUTF-EBCDIC)を使ってネイティブデータを書き出し、それを読み返す方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="e23347f9a27415c41076a210002eea6fcec860f7" translate="yes" xml:space="preserve">
          <source>Here is our &lt;code&gt;File&lt;/code&gt; class using &lt;code&gt;Moose&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; を使用した &lt;code&gt;File&lt;/code&gt; クラスは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3cd300984a980fc559dc1a1ab348f5e54e30db5c" translate="yes" xml:space="preserve">
          <source>Here is same snippet of code rewritten using &lt;code&gt;globmap&lt;/code&gt;</source>
          <target state="translated">これは、 &lt;code&gt;globmap&lt;/code&gt; を使用して書き換えられた同じコードスニペットです。</target>
        </trans-unit>
        <trans-unit id="9d1d9e97293f2045a09f6d838c3b2ec8fb4c6f77" translate="yes" xml:space="preserve">
          <source>Here is some explanation of that format:</source>
          <target state="translated">そのフォーマットの説明をします。</target>
        </trans-unit>
        <trans-unit id="f6967e582bf81d06472d4e74fa87d3738c79e15a" translate="yes" xml:space="preserve">
          <source>Here is the Perl subroutine</source>
          <target state="translated">以下はPerlのサブルーチンです。</target>
        </trans-unit>
        <trans-unit id="c14eb5e60796cb8513e72c1a3dc8468ba095c078" translate="yes" xml:space="preserve">
          <source>Here is the answer for the exercise: In the case of str(), we need no explicit recursion since the overloaded &lt;code&gt;.&lt;/code&gt;-operator will fall back to an existing overloaded operator &lt;code&gt;&quot;&quot;&lt;/code&gt; . Overloaded arithmetic operators</source>
          <target state="translated">演習の答えは次のとおりです。str（）の場合、オーバーロードされて &lt;code&gt;.&lt;/code&gt; ため、明示的な再帰は必要ありません。-operatorは、既存のオーバーロードされた演算子 &lt;code&gt;&quot;&quot;&lt;/code&gt; にフォールバックします。オーバーロードされた算術演算子</target>
        </trans-unit>
        <trans-unit id="0490d051b62ee770784e189641a4237c3b3f3c05" translate="yes" xml:space="preserve">
          <source>Here is the complete Debug filter:</source>
          <target state="translated">デバッグフィルタの完成です。</target>
        </trans-unit>
        <trans-unit id="1389bf6f29596689df97762593fe5eec3e652d54" translate="yes" xml:space="preserve">
          <source>Here is the complete list of POP macros available, along with the types they return.</source>
          <target state="translated">ここでは、利用可能なPOPマクロの完全なリストと、それらが返すタイプを示しています。</target>
        </trans-unit>
        <trans-unit id="41758a39c9a7b172d40507117ebc8d6513b795ee" translate="yes" xml:space="preserve">
          <source>Here is the crux of the problem. A side-effect of opening the &lt;b&gt;DB_File&lt;/b&gt; database in step 2 is that an initial block from the database will get read from disk and cached in memory.</source>
          <target state="translated">これが問題の核心です。手順2で&lt;b&gt;DB_File&lt;/b&gt;データベースを開くと、データベースの最初のブロックがディスクから読み込まれ、メモリにキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="c51e4961cb27feed1f60a5e6765893809aef1e36" translate="yes" xml:space="preserve">
          <source>Here is the hooking interface:</source>
          <target state="translated">ここにフッキングのインターフェイスがあります。</target>
        </trans-unit>
        <trans-unit id="a16851851d330cec48f9b8e9d6adc8c31c07b46b" translate="yes" xml:space="preserve">
          <source>Here is the list of options. Some options can be in short format (-f) or long (--from) one.</source>
          <target state="translated">以下にオプションの一覧を示します。いくつかのオプションは短い形式(-f)と長い形式(--from)があります。</target>
        </trans-unit>
        <trans-unit id="59a0c7a2e7021b69e05a0894a3173e1357ec31a3" translate="yes" xml:space="preserve">
          <source>Here is the list of things which may be &quot;broken&quot; on EMX (from EMX docs):</source>
          <target state="translated">EMXで「壊れている」可能性があるもののリストです(EMXのドキュメントより)。</target>
        </trans-unit>
        <trans-unit id="2ff240e57cd35b4f33c424da68af14cbdadb7f0a" translate="yes" xml:space="preserve">
          <source>Here is the module.</source>
          <target state="translated">こちらがモジュールです。</target>
        </trans-unit>
        <trans-unit id="1061d133b7ebfd4153ef09e5ea8f0d70a6682093" translate="yes" xml:space="preserve">
          <source>Here is the output (split into several lines):</source>
          <target state="translated">こちらが出力(数行に分けて)です。</target>
        </trans-unit>
        <trans-unit id="8d77260497f2dd38213b4c5d12c82639b7bb64d8" translate="yes" xml:space="preserve">
          <source>Here is the output from the code above.</source>
          <target state="translated">上のコードの出力は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="afa8a8a3c0bd9e2f5b6e60996a561b236f9c8638" translate="yes" xml:space="preserve">
          <source>Here is the output from the script:</source>
          <target state="translated">以下はスクリプトの出力です。</target>
        </trans-unit>
        <trans-unit id="3165612e15dd81d081ad2ea3bdee303a0e8cef7a" translate="yes" xml:space="preserve">
          <source>Here is the output:</source>
          <target state="translated">こちらが出力です。</target>
        </trans-unit>
        <trans-unit id="bc7f872b555210687127240090558fcc03c8212f" translate="yes" xml:space="preserve">
          <source>Here is the relevant quote from the dbopen man page where it defines the use of the R_CURSOR flag with seq:</source>
          <target state="translated">以下はdbopenのマニュアルページからの引用です。</target>
        </trans-unit>
        <trans-unit id="2219210520e554129a1633cb7206210581ad4e0f" translate="yes" xml:space="preserve">
          <source>Here is the sample C file:</source>
          <target state="translated">サンプルのCファイルです。</target>
        </trans-unit>
        <trans-unit id="4b7d8db184d6d571b8ca9a214519cc03ef4c5e4a" translate="yes" xml:space="preserve">
          <source>Here is the script above rewritten using the &lt;code&gt;seq&lt;/code&gt; API method.</source>
          <target state="translated">上記のスクリプトは、 &lt;code&gt;seq&lt;/code&gt; APIメソッドを使用して書き換えられたものです。</target>
        </trans-unit>
        <trans-unit id="2e67d178bb0da6449165979cec1cd5461e419a26" translate="yes" xml:space="preserve">
          <source>Here is the text of</source>
          <target state="translated">のテキストです。</target>
        </trans-unit>
        <trans-unit id="ff1b450e27d60fd1ad40e7bb902cfa0aa22a3e80" translate="yes" xml:space="preserve">
          <source>Here is what C has that Perl doesn't:</source>
          <target state="translated">PerlにはないC言語の機能を紹介します。</target>
        </trans-unit>
        <trans-unit id="16fc2b68835145e65475f1bb3c3809808bf7eb3b" translate="yes" xml:space="preserve">
          <source>Here is yet another way to print your environment:</source>
          <target state="translated">ここでは、あなたの環境を印刷するためのもう一つの方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="0d8ed8a023e586883874c39ef49b4107598cdc9c" translate="yes" xml:space="preserve">
          <source>Here some simple examples. For the full details of the data structure and the related glob-style pattern matching, see &lt;a href=&quot;parser/scheduler#Rules-data-structure&quot;&gt;Rules data structure in TAP::Parser::Scheduler&lt;/a&gt;.</source>
          <target state="translated">ここにいくつかの簡単な例があります。データ構造と関連するグロブスタイルのパターンマッチングの詳細については、「&lt;a href=&quot;parser/scheduler#Rules-data-structure&quot;&gt;TAP :: Parser :: Schedulerのルールデータ構造&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8ac9540016a9d087f8c1a19391a980dab40c0a80" translate="yes" xml:space="preserve">
          <source>Here the first call caches the list (1,2,3,4,5,6,7). The second call does not really make sense. &lt;code&gt;Memoize&lt;/code&gt; cannot guess what behavior &lt;code&gt;iota&lt;/code&gt; should have in scalar context without actually calling it in scalar context. Normally &lt;code&gt;Memoize&lt;/code&gt;</source>
          <target state="translated">ここで、最初の呼び出しはリスト（1,2,3,4,5,6,7）をキャッシュします。2番目の呼び出しは実際には意味がありません。 &lt;code&gt;Memoize&lt;/code&gt; は、 &lt;code&gt;iota&lt;/code&gt; をスカラーコンテキストで実際に呼び出すことなく、スカラーコンテキストでどのような動作をするかを推測できません。通常は &lt;code&gt;Memoize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9449cd01fe2c1ad3593def47ef2650f44e48880d" translate="yes" xml:space="preserve">
          <source>Here the first line will load &lt;code&gt;Carp&lt;/code&gt;</source>
          <target state="translated">ここで最初の行は &lt;code&gt;Carp&lt;/code&gt; をロードします</target>
        </trans-unit>
        <trans-unit id="5ec7a9d65cd4bf61cf8b315b7aa4990f3fbae6e4" translate="yes" xml:space="preserve">
          <source>Here the generated XS function returns nothing on success, and will die() with a meaningful error message on error.</source>
          <target state="translated">ここで生成されたXS関数は成功時には何も返さず、エラー時には意味のあるエラーメッセージを表示してdie()を返します。</target>
        </trans-unit>
        <trans-unit id="083a79c03137ba3c061edc8bbcb5ea85ceb9fdd1" translate="yes" xml:space="preserve">
          <source>Here the multi-argument form of pipe open() is preferred because the pattern and indeed even the filenames themselves might hold metacharacters.</source>
          <target state="translated">ここでは、パターンや実際にはファイル名自体にもメタキャラクタが含まれている可能性があるため、パイプ open()の複数引数形式が好まれています。</target>
        </trans-unit>
        <trans-unit id="84ce6346e023cfe513980b15261a23a5e8073bce" translate="yes" xml:space="preserve">
          <source>Here the number of bytes chopped off (1) is shown next as the OFFSET. The portion of the string between the &quot;real&quot; and the &quot;fake&quot; beginnings is shown in parentheses, and the values of &lt;code&gt;SvCUR&lt;/code&gt; and &lt;code&gt;SvLEN&lt;/code&gt; reflect the fake beginning, not the real one. (The first character of the string buffer happens to have changed to &quot;\1&quot; here, not &quot;1&quot;, because the current implementation stores the offset count in the string buffer. This is subject to change.)</source>
          <target state="translated">ここでは、切り落とされたバイト数（1）がオフセットとして次に表示されます。 「実」と「偽」の始まりの間の文字列の部分は括弧で示され、 &lt;code&gt;SvCUR&lt;/code&gt; と &lt;code&gt;SvLEN&lt;/code&gt; の値は偽の始まりを反映しており、実際のものではありません。 （現在の実装では文字列バッファにオフセットカウントが格納されているため、文字列バッファの最初の文字が &quot;1&quot;ではなく &quot;\ 1&quot;に変更されています。これは変更される可能性があります。）</target>
        </trans-unit>
        <trans-unit id="02f2e253f1bb4668aac3cfa34c16cf32f5c7d557" translate="yes" xml:space="preserve">
          <source>Here translator() is a subroutine which takes</source>
          <target state="translated">ここでtranslator()は</target>
        </trans-unit>
        <trans-unit id="69ad459c54b1acfe7be7330c75e06154ad271928" translate="yes" xml:space="preserve">
          <source>Here we can see a much more complex program, with various optimisations in play. At regnode 10 we see an example where a character class with only one character in it was turned into an &lt;code&gt;EXACT&lt;/code&gt; node. We can also see where an entire alternation was turned into a &lt;code&gt;TRIE-EXACT&lt;/code&gt; node. As a consequence, some of the regnodes have been marked as optimised away. We can see that the &lt;code&gt;$&lt;/code&gt; symbol has been converted into an &lt;code&gt;EOL&lt;/code&gt; regop, a special piece of code that looks for &lt;code&gt;\n&lt;/code&gt; or the end of the string.</source>
          <target state="translated">ここでは、さまざまな最適化が行われた、はるかに複雑なプログラムを見ることができます。 regnode 10には、1文字だけの文字クラスが &lt;code&gt;EXACT&lt;/code&gt; ノードに変換された例があります。また、交替全体がどこで &lt;code&gt;TRIE-EXACT&lt;/code&gt; ノードになったかを確認することもできます。結果として、一部のregnodeは最適化されたものとしてマークされています。 &lt;code&gt;$&lt;/code&gt; 記号が &lt;code&gt;EOL&lt;/code&gt; regop、 &lt;code&gt;\n&lt;/code&gt; または文字列の末尾を検索する特別なコードに変換されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="9e88298fdbd00bad0c423ba34b385ffbc4d523ec" translate="yes" xml:space="preserve">
          <source>Here we describe the internal form your code is converted to by Perl. Start with a simple example:</source>
          <target state="translated">ここでは、あなたのコードがPerlによって変換される内部フォームについて説明します。簡単な例から始めましょう。</target>
        </trans-unit>
        <trans-unit id="c7a54d30dda627090722af6ca7619feef7f811fd" translate="yes" xml:space="preserve">
          <source>Here we discuss how to build Perl under AmigaOS.</source>
          <target state="translated">ここでは、AmigaOSでPerlをビルドする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="5a948596d25d15dea7b9635c0bba86ef5734411f" translate="yes" xml:space="preserve">
          <source>Here we discuss how to build Perl under OS/2.</source>
          <target state="translated">ここでは、OS/2でPerlをビルドする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="e0ac29b536b198edfced84637724dab1c5327400" translate="yes" xml:space="preserve">
          <source>Here we document the backslash sequences that don't fall in one of the categories above. These are:</source>
          <target state="translated">ここでは、上記のカテゴリのいずれかに該当しないバックスラッシュシーケンスを文書化します。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="78599b796151b0cc81f36fe73ffc3c8ea3b46215" translate="yes" xml:space="preserve">
          <source>Here we list environment variables with are either OS/2- and DOS- and Win*-specific, or are more important under OS/2 than under other OSes.</source>
          <target state="translated">ここでは、OS/2、DOS、Win*固有の環境変数、またはOS/2では他のOSよりも重要な環境変数をリストアップしています。</target>
        </trans-unit>
        <trans-unit id="2d28d2754acd9ac1365a8c90a3604a80ec81bb16" translate="yes" xml:space="preserve">
          <source>Here we list major changes which could make you by surprise.</source>
          <target state="translated">ここでは、あなたを驚かせる可能性のある主な変更点をリストアップします。</target>
        </trans-unit>
        <trans-unit id="ffa194969d86c572c4f360d304be10a58d841a2b" translate="yes" xml:space="preserve">
          <source>Here we suppose that conversion to &lt;code&gt;MyObject&lt;/code&gt; in the INPUT: section and from MyObject when processing RETVAL will modify a global variable &lt;code&gt;global_state&lt;/code&gt; . After these conversions are performed, we restore the old value of &lt;code&gt;global_state&lt;/code&gt; (to avoid memory leaks, for example).</source>
          <target state="translated">ここでは、INPUT：セクションで &lt;code&gt;MyObject&lt;/code&gt; に変換し、RETVALを処理するときにMyObjectから変換すると、グローバル変数 &lt;code&gt;global_state&lt;/code&gt; が変更されると仮定します。これらの変換が実行された後、 &lt;code&gt;global_state&lt;/code&gt; の古い値を復元します（たとえば、メモリリークを回避するため）。</target>
        </trans-unit>
        <trans-unit id="a8ed5c8e65b6eb8ae2e55830259cac345b514bb1" translate="yes" xml:space="preserve">
          <source>Here we'll create some files that will generate a test library. These will include a C source file and a header file. We'll also create a Makefile.PL in this directory. Then we'll make sure that running make at the Mytest2 level will automatically run this Makefile.PL file and the resulting Makefile.</source>
          <target state="translated">ここでは、テストライブラリを生成するファイルを作成します。これらのファイルには、Cのソースファイルとヘッダファイルが含まれます。また、このディレクトリにMakefile.PLを作成します。そして、MakeをMytest2レベルで実行すると、このMakefile.PLファイルとその結果のMakefileが自動的に実行されることを確認します。</target>
        </trans-unit>
        <trans-unit id="930cec360a8de0d300404f1ae97c04e5862e5b86" translate="yes" xml:space="preserve">
          <source>Here we're using the typeglobs to do symbol table aliasing. It's a tad subtle, though, and also won't work if you're using &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variables, because only globals (even in disguise as &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;s) are in the symbol table.</source>
          <target state="translated">ここでは、タイプグロブを使用してシンボルテーブルのエイリアスを作成しています。シンボルテーブルにはグローバル（ &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; s に変装している場合でも）しかないため &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 変数を使用している場合は、少し微妙ですが、機能しません。</target>
        </trans-unit>
        <trans-unit id="5ca4ef30e473f35ac20ca9ad8e996a139eaf86fb" translate="yes" xml:space="preserve">
          <source>Here we've created a reference to an anonymous array of three elements whose final element is itself a reference to another anonymous array of three elements. (The multidimensional syntax described later can be used to access this. For example, after the above, &lt;code&gt;$arrayref-&amp;gt;[2][1]&lt;/code&gt; would have the value &quot;b&quot;.)</source>
          <target state="translated">ここでは、3つの要素の無名配列への参照を作成しました。その最終要素自体が、3つの要素の別の無名配列への参照です。（後で説明する多次元構文を使用してこれにアクセスできます。たとえば、上記の後、 &lt;code&gt;$arrayref-&amp;gt;[2][1]&lt;/code&gt; の値は &quot;b&quot;になります。）</target>
        </trans-unit>
        <trans-unit id="977db011c41d89278867b065d331c7d420016e2c" translate="yes" xml:space="preserve">
          <source>Here you see an example of Perl's system abstraction, which we'll see later: &lt;code&gt;PerlMem_malloc&lt;/code&gt; is either your system's &lt;code&gt;malloc&lt;/code&gt; , or Perl's own &lt;code&gt;malloc&lt;/code&gt; as defined in</source>
          <target state="translated">ここでは、私たちが後でわかりますPerlのシステムの抽象化の例を参照してください。 &lt;code&gt;PerlMem_malloc&lt;/code&gt; はどちらかは、あなたのシステムの &lt;code&gt;malloc&lt;/code&gt; 関数、またはPerlの自身 &lt;code&gt;malloc&lt;/code&gt; で定義されています</target>
        </trans-unit>
        <trans-unit id="afea48b05d5e51f5f1638375ce5b0e27610663a4" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a full program showing how to make use of locale-sensitive sorting, Unicode casing, and managing print widths when some of the characters take up zero or two columns, not just one column each time. When run, the following program produces this nicely aligned output:</source>
          <target state="translated">次の完全なプログラムは、ロケールに依存する並べ替え、Unicode大文字小文字変換、および一部の文字が1列だけでなく0列または2列を占める場合の印刷幅の管理を利用する方法を示しています。実行すると、次のプログラムはこの適切に調整された出力を生成します。</target>
        </trans-unit>
        <trans-unit id="6a19b2363612bc52e7e1f472c3c8e257075049a6" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how to implicitly manage the translation; all encoding and decoding is done automatically, just as with streams that have a particular encoding attached to them:</source>
          <target state="translated">翻訳を暗黙的に管理する方法は次のとおりです。特定のエンコーディングが付加されたストリームと同様に、すべてのエンコーディングとデコーディングは自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="e1c2be9aec08f68310e7254caae4389bbea07c40" translate="yes" xml:space="preserve">
          <source>Here's &lt;code&gt;modrm&lt;/code&gt; , a little utility to cleanly remove an installed module.</source>
          <target state="translated">ここでの &lt;code&gt;modrm&lt;/code&gt; 、きれいにインストールされたモジュールを削除する小さなユーティリティ。</target>
        </trans-unit>
        <trans-unit id="acb297651ed81fb994c8862e1324045de85e7420" translate="yes" xml:space="preserve">
          <source>Here's a UDP program similar to the sample Internet TCP client given earlier. However, instead of checking one host at a time, the UDP version will check many of them asynchronously by simulating a multicast and then using select() to do a timed-out wait for I/O. To do something similar with TCP, you'd have to use a different socket handle for each host.</source>
          <target state="translated">これは、先ほどのサンプルのインターネットTCPクライアントに似たUDPプログラムです。しかし、UDPバージョンでは、一度に一つのホストをチェックするのではなく、マルチキャストをシミュレートし、select()を使ってI/Oのタイムアウト待ちを行うことで、非同期的に多くのホストをチェックします。TCP で同様のことをするには、各ホストごとに異なるソケットハンドルを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="4f4b45b7c3f776b4fbc38fc3bb7e907362d3ca50" translate="yes" xml:space="preserve">
          <source>Here's a brief lead of how to upgrade the compiler to the latest level. Of course this is subject to changes. You can only upgrade versions from ftp-available updates if the first three digit groups are the same (in where you can skip intermediate unlike the patches in the developer snapshots of Perl), or to one version up where the &quot;base&quot; is available. In other words, the AIX compiler patches are cumulative.</source>
          <target state="translated">ここでは、コンパイラを最新のレベルにアップグレードする方法を簡単に紹介します。もちろん、これは変更される可能性があります。最初の3桁の数字のグループが同じ場合(Perlの開発者スナップショットのパッチとは異なり、中間のパッチをスキップすることができる場合)にのみ、ftpで利用可能なアップデートからバージョンをアップグレードするか、「ベース」が利用可能な1つ上のバージョンにアップグレードすることができます。言い換えれば、AIX コンパイラのパッチは累積的なものです。</target>
        </trans-unit>
        <trans-unit id="9083bbfd93bc36a0ba2fe1e425a822a01dff192a" translate="yes" xml:space="preserve">
          <source>Here's a brief recap of the options we covered:</source>
          <target state="translated">ここでは、私たちがカバーしたオプションの簡単な復習をします。</target>
        </trans-unit>
        <trans-unit id="b70c746e9664f4a89ae78b4bc44345a9debc8745" translate="yes" xml:space="preserve">
          <source>Here's a classic non-closure function-generating function:</source>
          <target state="translated">ここに古典的な非閉塞機能生成機能があります。</target>
        </trans-unit>
        <trans-unit id="737671b9935a9677418172be58d93041b2c042de" translate="yes" xml:space="preserve">
          <source>Here's a client that creates a TCP connection to the &quot;daytime&quot; service at port 13 of the host name &quot;localhost&quot; and prints out everything that the server there cares to provide.</source>
          <target state="translated">ここでは、ホスト名 &quot;localhost &quot;のポート13で &quot;daytime &quot;サービスへのTCP接続を作成し、そこのサーバが提供するすべてのものをプリントアウトするクライアントがあります。</target>
        </trans-unit>
        <trans-unit id="b9872b20edef13d184c9e33e7e54f0406f2852dd" translate="yes" xml:space="preserve">
          <source>Here's a diversion: copy &quot;runperl.bat&quot; to &quot;runperl&quot;, and type &quot;runperl&quot;. Explain the observed behavior, or lack thereof. :) Hint: .gnidnats llits er'uoy fi ,&quot;lrepnur&quot; eteled :tniH</source>
          <target state="translated">ここでは陽動があります:&quot;runperl.bat &quot;を &quot;runperl &quot;にコピーして、&quot;runperl &quot;と入力してください。観察された動作を説明してください。:)ヒント:.gnidnats llits er'uoy fi,&quot;lrepnur&quot; eteled :tniH</target>
        </trans-unit>
        <trans-unit id="cf12c485957b201d4ea57553686d7cb0039dde88" translate="yes" xml:space="preserve">
          <source>Here's a list of the backslash sequences that are character classes. They are discussed in more detail below. (For the backslash sequences that aren't character classes, see &lt;a href=&quot;perlrebackslash&quot;&gt;perlrebackslash&lt;/a&gt;.)</source>
          <target state="translated">文字クラスであるバックスラッシュシーケンスのリストを次に示します。これらについては、以下で詳しく説明します。（文字クラスではないバックスラッシュシーケンスについては、&lt;a href=&quot;perlrebackslash&quot;&gt;perlrebackslashを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="5ab128180a319c2d07a98a10caf6a07254c0f651" translate="yes" xml:space="preserve">
          <source>Here's a list of the currently unsupported API, and also the version of Perl below which it is unsupported:</source>
          <target state="translated">現在サポートされていないAPIのリストと、サポートされていないPerlのバージョンを示します。</target>
        </trans-unit>
        <trans-unit id="33b154fc2c3c454de669961df32cf81dfe425d93" translate="yes" xml:space="preserve">
          <source>Here's a little program that generates all permutations of all the words on each line of input. The algorithm embodied in the &lt;code&gt;permute()&lt;/code&gt; function is discussed in Volume 4 (still unpublished) of Knuth's</source>
          <target state="translated">入力の各行にあるすべての単語のすべての順列を生成する小さなプログラムを次に示します。 &lt;code&gt;permute()&lt;/code&gt; 関数に組み込まれたアルゴリズムについては、Knuthの第4巻（未発表）で説明されています。</target>
        </trans-unit>
        <trans-unit id="ac1edab256d838d310d923b4a7442c76a785939d" translate="yes" xml:space="preserve">
          <source>Here's a little program that's somewhat like fmt(1):</source>
          <target state="translated">ここに、fmt(1)に少し似たプログラムがあります。</target>
        </trans-unit>
        <trans-unit id="fd6a03a6db0cc55634b2b495ac28f42a4ed52934" translate="yes" xml:space="preserve">
          <source>Here's a lovely Perlish solution by Larry Rosler. It exploits properties of bitwise xor on ASCII strings.</source>
          <target state="translated">Larry Roslerによる素敵なPerlishのソリューションがあります。これはASCII文字列のビット単位のxorの特性を利用しています。</target>
        </trans-unit>
        <trans-unit id="c5fae574ad1367dcbd0544744e45226bb907e0c9" translate="yes" xml:space="preserve">
          <source>Here's a mailbox appender for BSD systems.</source>
          <target state="translated">BSD システム用のメールボックスアペンダです。</target>
        </trans-unit>
        <trans-unit id="39554d786a12cee063a370b311126f557d404cc0" translate="yes" xml:space="preserve">
          <source>Here's a more complicated example: suppose that you wanted &lt;code&gt;struct netconfig&lt;/code&gt; to be blessed into the class &lt;code&gt;Net::Config&lt;/code&gt; . One way to do this is to use underscores (_) to separate package names, as follows:</source>
          <target state="translated">次に、より複雑な例を示します &lt;code&gt;struct netconfig&lt;/code&gt; をクラス &lt;code&gt;Net::Config&lt;/code&gt; blessしたいとします。これを行う1つの方法は、次のようにアンダースコア（_）を使用してパッケージ名を区切ることです。</target>
        </trans-unit>
        <trans-unit id="ef76926490bf6bc7991a173108bb3e76598bbc43" translate="yes" xml:space="preserve">
          <source>Here's a more extensive illustration using vec():</source>
          <target state="translated">ここでは、vec()を使用した、より広範囲の図を示します。</target>
        </trans-unit>
        <trans-unit id="9b21353c7b746d6125b0bd9ccdf2d5f6e32ae7e7" translate="yes" xml:space="preserve">
          <source>Here's a more sophisticated example of using %Config:</source>
          <target state="translated">ここでは、%Config を使用するより洗練された例を示します。</target>
        </trans-unit>
        <trans-unit id="79fc5a3fa5bc2df2e735e49c28e40c308b498181" translate="yes" xml:space="preserve">
          <source>Here's a much better web-page hit counter:</source>
          <target state="translated">ここでは、はるかに優れたウェブページのヒットカウンターがあります。</target>
        </trans-unit>
        <trans-unit id="d392ab49a010fb0ac59f9f0078cb125cae17692b" translate="yes" xml:space="preserve">
          <source>Here's a partial table of features the different packages offer:</source>
          <target state="translated">ここでは、さまざまなパッケージが提供する機能の一部をご紹介します。</target>
        </trans-unit>
        <trans-unit id="41a14f9ddca1a8bfb40a30abc5c0f1b2c1f62eef" translate="yes" xml:space="preserve">
          <source>Here's a quick mapping for the utilities/modules, and their names for the $BLACKLIST, $METHOD_FAIL and other internal functions.</source>
          <target state="translated">ここでは、ユーティリティ/モジュールと、$BLACKLIST、$METHOD_FAIL、その他の内部関数のためのそれらの名前の簡単なマッピングを示します。</target>
        </trans-unit>
        <trans-unit id="cda00e934fa6376dbf363c4a7973b5685c850503" translate="yes" xml:space="preserve">
          <source>Here's a reservoir-sampling algorithm from the Camel Book:</source>
          <target state="translated">これがキャメルブックのリザーバーサンプリングアルゴリズムです。</target>
        </trans-unit>
        <trans-unit id="9e206bb004fc82d9ef3fcc3d4b1c49d6f3d42ac3" translate="yes" xml:space="preserve">
          <source>Here's a safe backtick or pipe open for read:</source>
          <target state="translated">ここでは安全な裏ワザやパイプを開いて読むことができます。</target>
        </trans-unit>
        <trans-unit id="a7cce3c8a9d58b666d239193afb2494a20bba3a2" translate="yes" xml:space="preserve">
          <source>Here's a sample TCP client using Internet-domain sockets:</source>
          <target state="translated">ここでは、インターネットドメインソケットを使用したTCPクライアントのサンプルを紹介します。</target>
        </trans-unit>
        <trans-unit id="9c9e5f5e52c5d8da22662f4567979deb732ae0a9" translate="yes" xml:space="preserve">
          <source>Here's a sample Unix-domain client:</source>
          <target state="translated">ここにUnixドメインのクライアントのサンプルがあります。</target>
        </trans-unit>
        <trans-unit id="d1aee0a8129cd8627dd813843d4743d6011f0d62" translate="yes" xml:space="preserve">
          <source>Here's a sample plugin, for your reference:</source>
          <target state="translated">参考までにプラグインのサンプルです。</target>
        </trans-unit>
        <trans-unit id="bee38889229a5c9d4ff45e0c3ab7e676e43a251f" translate="yes" xml:space="preserve">
          <source>Here's a sample program,</source>
          <target state="translated">サンプルプログラムをご紹介します。</target>
        </trans-unit>
        <trans-unit id="705113e6af32ce6049ec614b7bd8ea0f06bc826f" translate="yes" xml:space="preserve">
          <source>Here's a sample showing how to create and use a record whose fields are of many different sorts:</source>
          <target state="translated">ここでは、さまざまな種類のフィールドを持つレコードを作成して使用する方法を示すサンプルを示します。</target>
        </trans-unit>
        <trans-unit id="16fbac9b09446fb7fa1607fa6cbcd3cd579323e7" translate="yes" xml:space="preserve">
          <source>Here's a sample:</source>
          <target state="translated">ここにサンプルがあります。</target>
        </trans-unit>
        <trans-unit id="d48d2b1ee87d318b2f88933c600ad433cc38ac05" translate="yes" xml:space="preserve">
          <source>Here's a short bibliography courtesy of J&amp;uuml;rgen Christoffel:</source>
          <target state="translated">これは、ユルゲンクリストッフェルの好意による短い参考文献です。</target>
        </trans-unit>
        <trans-unit id="7b6db8c67bc1492d1475adb966fe40db79852b40" translate="yes" xml:space="preserve">
          <source>Here's a simple client that takes a remote host to fetch a document from, and then a list of files to get from that host. This is a more interesting client than the previous one because it first sends something to the server before fetching the server's response.</source>
          <target state="translated">リモートホストからドキュメントを取得し、そのホストから取得するファイルのリストを取得するシンプルなクライアントです。これは、サーバのレスポンスを取得する前に最初にサーバに何かを送信するので、前のものよりも興味深いクライアントです。</target>
        </trans-unit>
        <trans-unit id="6d6b6f3994774d06d8f1e409ff389cf7bc440169" translate="yes" xml:space="preserve">
          <source>Here's a simple example of a switch based on pattern matching, lined up in a way to make it look more like a switch statement. We'll do a multiway conditional based on the type of reference stored in $whatchamacallit:</source>
          <target state="translated">パターンマッチに基づいたスイッチの簡単な例を、スイッチ文のように見えるように並べてみました。ここでは、$whatchamacallitに格納されている参照の型に基づいた多元的な条件を実行します。</target>
        </trans-unit>
        <trans-unit id="adf661fec1c7ed224422528dd69c23adb6998e67" translate="yes" xml:space="preserve">
          <source>Here's a simple example to illustrate the difference between the two range operators:</source>
          <target state="translated">ここでは、2つの範囲演算子の違いを説明するための簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="24f0b23833358ef065f35cfbec9242ef09ccac71" translate="yes" xml:space="preserve">
          <source>Here's a simple program which converts between Celsius and Fahrenheit, it too has a problem:</source>
          <target state="translated">ここに摂氏と華氏の間で変換する簡単なプログラムがありますが、それはあまりにも問題があります。</target>
        </trans-unit>
        <trans-unit id="0837b2c8d138afbded4f97677c64e44b344b5f56" translate="yes" xml:space="preserve">
          <source>Here's a simple-minded example program that rewrites its command-line parameters as integers correctly formatted in the current locale:</source>
          <target state="translated">コマンドラインのパラメータを、現在のロケールで正しくフォーマットされた整数値に書き換えるシンプルなサンプルプログラムを紹介します。</target>
        </trans-unit>
        <trans-unit id="f4b1ca0d619e6e130110c613ca994de9ad0679d7" translate="yes" xml:space="preserve">
          <source>Here's a small example showing shared memory usage.</source>
          <target state="translated">ここでは、共有メモリの使用量を示す小さな例を示します。</target>
        </trans-unit>
        <trans-unit id="ca0b16455dba662fbcb02846342b83e69dabc681" translate="yes" xml:space="preserve">
          <source>Here's a summary of the possible predicates:</source>
          <target state="translated">可能性のある述語をまとめてみました。</target>
        </trans-unit>
        <trans-unit id="58dc9ec13109b06fde34d79108b2ec3645eaf897" translate="yes" xml:space="preserve">
          <source>Here's a test to make sure that the data contains nothing but &quot;word&quot; characters (alphabetics, numerics, and underscores), a hyphen, an at sign, or a dot.</source>
          <target state="translated">ここでは、データに「単語」文字(アルファベット、数字、アンダースコア)、ハイフン、アットサイン、ドット以外の文字が含まれていないことを確認するためのテストを行います。</target>
        </trans-unit>
        <trans-unit id="759693dd6cb991ad225a2379fc23020ea66b9451" translate="yes" xml:space="preserve">
          <source>Here's a trick for interpolating a subroutine call into a string:</source>
          <target state="translated">サブルーチンの呼び出しを文字列に補間するコツを紹介します。</target>
        </trans-unit>
        <trans-unit id="566b3956738219763456c200fc999f82ae79bed2" translate="yes" xml:space="preserve">
          <source>Here's a truly obscure example:</source>
          <target state="translated">本当にわかりにくい例があります。</target>
        </trans-unit>
        <trans-unit id="673e00298dcf732578c132c6f7ebc33b00f2f5a5" translate="yes" xml:space="preserve">
          <source>Here's a way to do backticks reasonably safely. Notice how the &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; is not called with a string that the shell could expand. This is by far the best way to call something that might be subjected to shell escapes: just never call the shell at all.</source>
          <target state="translated">安全にバックティックを行う方法を次に示します。シェルが展開できる文字列で &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; が呼び出されないことに注意してください。これは、シェルエスケープの対象となる可能性があるものを呼び出すための最善の方法です。シェルをまったく呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="eaaae86ddf2180ef145c4679eb81721d464c8d5e" translate="yes" xml:space="preserve">
          <source>Here's an even simpler example: I wrote a simple ray tracer; the program would look in a certain direction, figure out what it was looking at, and then convert the `color' value (typically a string like `red') of that object to a red, green, and blue pixel value, like this:</source>
          <target state="translated">ここにもっと単純な例があります。プログラムは特定の方向を見て、何を見ているのかを把握し、そのオブジェクトの `color' 値 (通常は `red' のような文字列)を赤、緑、青のピクセル値に変換します。</target>
        </trans-unit>
        <trans-unit id="eb7f2b2a1f46da14792dc92fada7de16651b64e3" translate="yes" xml:space="preserve">
          <source>Here's an example of a module as a blessed scalar:</source>
          <target state="translated">祝福されたスカラーとしてのモジュールの例です。</target>
        </trans-unit>
        <trans-unit id="433e4046c8d4a59acb27a1b8715b8d822849f3f4" translate="yes" xml:space="preserve">
          <source>Here's an example of a semaphore:</source>
          <target state="translated">セマフォの例です。</target>
        </trans-unit>
        <trans-unit id="e5da5564566886484e5f1909e68561f2893fc59f" translate="yes" xml:space="preserve">
          <source>Here's an example of a simple .t file for the fictional Film module.</source>
          <target state="translated">ここでは、架空のFilmモジュール用の簡単な.tファイルの例を示します。</target>
        </trans-unit>
        <trans-unit id="00e3c595287e645175478199893dcfbab0d3f383" translate="yes" xml:space="preserve">
          <source>Here's an example of a somewhat interesting tied hash class: it gives you a hash representing a particular user's dot files. You index into the hash with the name of the file (minus the dot) and you get back that dot file's contents. For example:</source>
          <target state="translated">これは、特定のユーザのドットファイルを表すハッシュを提供します。このハッシュにファイル名(ドットを引いたもの)をインデックス化すると、そのドットファイルの内容が得られます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="44172aa24b9ebcb09c3ac7dacdd0f49ad41ffcca" translate="yes" xml:space="preserve">
          <source>Here's an example of how to copy a binary file:</source>
          <target state="translated">バイナリファイルをコピーする方法の例です。</target>
        </trans-unit>
        <trans-unit id="db4ebf9573581d82c8cc95cd18272cd15b08d992" translate="yes" xml:space="preserve">
          <source>Here's an example of how to pass in a string and a regular expression for it to match against. You construct the pattern with the &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; operator:</source>
          <target state="translated">文字列とそれに一致する正規表現を渡す方法の例を次に示します。 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 演算子を使用してパターンを作成します。</target>
        </trans-unit>
        <trans-unit id="637519bbaa8687d335368b0791bb0e149bbe34ba" translate="yes" xml:space="preserve">
          <source>Here's an example of running that program, which we'll call</source>
          <target state="translated">このプログラムを実行する例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="f582133574110a3518036c490af80a6f46ec43be" translate="yes" xml:space="preserve">
          <source>Here's an example of setting a filehandle named &lt;code&gt;REMOTE&lt;/code&gt; to be non-blocking at the system level. You'll have to negotiate &lt;code&gt;$|&lt;/code&gt; on your own, though.</source>
          <target state="translated">&lt;code&gt;REMOTE&lt;/code&gt; という名前のファイルハンドルをシステムレベルで非ブロッキングに設定する例を次に示します。 &lt;code&gt;$|&lt;/code&gt; 交渉する必要があります 自分で。</target>
        </trans-unit>
        <trans-unit id="5747af8299e3ce8766cc1e6c9250f3bd0c64b9fc" translate="yes" xml:space="preserve">
          <source>Here's an example of using open2():</source>
          <target state="translated">open2()の使用例です。</target>
        </trans-unit>
        <trans-unit id="52ee3997caaa83f241ead3aa88bc5b3a35f1e445" translate="yes" xml:space="preserve">
          <source>Here's an example of using the &lt;code&gt;$ENV{PERLDB_OPTS}&lt;/code&gt; variable:</source>
          <target state="translated">&lt;code&gt;$ENV{PERLDB_OPTS}&lt;/code&gt; 変数の使用例を次に示します。</target>
        </trans-unit>
        <trans-unit id="244af372fc1dc3d578b9e7b6c1576ec36ffa9ff8" translate="yes" xml:space="preserve">
          <source>Here's an example of what a stack backtrace via &lt;code&gt;T&lt;/code&gt; command might look like:</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; コマンドによるスタックバックトレースの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="e488d97af419d58ca23b439a55505523edbe2e65" translate="yes" xml:space="preserve">
          <source>Here's an example of what you need for a simple module:</source>
          <target state="translated">シンプルなモジュールに必要なものの一例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="daccc2549e31545d57fdedfeee9273ddd1b0ff86" translate="yes" xml:space="preserve">
          <source>Here's an example script file:</source>
          <target state="translated">スクリプトファイルの例です。</target>
        </trans-unit>
        <trans-unit id="acda0e1d4c96684fdc356f00d807ddf1f623f6ae" translate="yes" xml:space="preserve">
          <source>Here's an example that looks up nonnumeric uids in the passwd file:</source>
          <target state="translated">ここでは、passwdファイル内の非数値のuidを検索する例を示します。</target>
        </trans-unit>
        <trans-unit id="5c0f7a1e07a375e4333db5cd9cca105a10ea230a" translate="yes" xml:space="preserve">
          <source>Here's an example that makes sure that whoever runs this program knows their password:</source>
          <target state="translated">ここでは、このプログラムを実行する人がパスワードを知っていることを確認するための例を示します。</target>
        </trans-unit>
        <trans-unit id="2ba3dad78e5e2c46821c06eb650b17001a0a2ef6" translate="yes" xml:space="preserve">
          <source>Here's an example to test whether Nagle's algorithm is enabled on a socket:</source>
          <target state="translated">ここではソケット上でNagleのアルゴリズムが有効かどうかをテストする例を示します。</target>
        </trans-unit>
        <trans-unit id="d274e7c0c009a3ac1b895b776347d105b0d85baa" translate="yes" xml:space="preserve">
          <source>Here's an example using a recursive regular expression. The goal is to capture all of the text within angle brackets, including the text in nested angle brackets. This sample text has two &quot;major&quot; groups: a group with one level of nesting and a group with two levels of nesting. There are five total groups in angle brackets:</source>
          <target state="translated">再帰的正規表現を使用した例を示します。目標は、入れ子になっている角括弧内のテキストを含めて、角括弧内のすべてのテキストをキャプチャすることです。このサンプルテキストには、2つの「主要な」グループがあります:1つのレベルの入れ子のグループと2つのレベルの入れ子のグループです。角度括弧内のグループは全部で5つあります。</target>
        </trans-unit>
        <trans-unit id="61f04271f847d0c8988094c50219a148be404036" translate="yes" xml:space="preserve">
          <source>Here's an example.</source>
          <target state="translated">一例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="51e85e4e8113fb3e1f07e1727e78d73f5f0043e6" translate="yes" xml:space="preserve">
          <source>Here's an example:</source>
          <target state="translated">一例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="ea18952ce84912806a08117b90f220eff293cf76" translate="yes" xml:space="preserve">
          <source>Here's another example of using &lt;code&gt;..&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;..&lt;/code&gt; の別の使用例を次に示します。</target>
        </trans-unit>
        <trans-unit id="43b272b51e8dfc98c92e4358c6ca3238363075ae" translate="yes" xml:space="preserve">
          <source>Here's another example. Let's say you'd like to match a number at the end of a string, and you also want to keep the preceding part of the match. So you write this:</source>
          <target state="translated">もう一つの例を紹介します。文字列の最後にある数字をマッチさせ、その前の部分もマッチさせたいとします。そこで、次のように書きます。</target>
        </trans-unit>
        <trans-unit id="6d394fbb45cdbc9850e3f0051e919676f4c5a2f8" translate="yes" xml:space="preserve">
          <source>Here's another interesting wanted function. It will find all symbolic links that don't resolve:</source>
          <target state="translated">ここにもう一つの興味深い機能があります。これは解決しないシンボリックリンクをすべて見つけてくれます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
