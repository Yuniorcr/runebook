<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="5e82b72795636964d66437770c692b7d03ceb23b" translate="yes" xml:space="preserve">
          <source>To assign a specific &lt;b&gt;network address&lt;/b&gt; to a &lt;b&gt;socket&lt;/b&gt;.</source>
          <target state="translated">特定の&lt;b&gt;ネットワークアドレス&lt;/b&gt;を&lt;b&gt;ソケットに&lt;/b&gt;割り当てる。</target>
        </trans-unit>
        <trans-unit id="c2c2805d5269d7141c86f56aaf1c2c2a76a26622" translate="yes" xml:space="preserve">
          <source>To assist you &lt;code&gt;test_test&lt;/code&gt; can colour the background of the debug information to disambiguate the different types of output. The debug output will have its background coloured green and red. The green part represents the text which is the same between the executed and actual output, the red shows which part differs.</source>
          <target state="translated">&lt;code&gt;test_test&lt;/code&gt; を支援するために、デバッグ情報の背景に色を付けて、さまざまなタイプの出力を明確にすることができます。デバッグ出力の背景は緑と赤になります。緑の部分は実行された出力と実際の出力の間で同じであるテキストを表し、赤は異なる部分を示しています。</target>
        </trans-unit>
        <trans-unit id="e8e1cbea5e7824434cdf9fc699c75f29c54b93f0" translate="yes" xml:space="preserve">
          <source>To auto-detect and uncompress an RFC 1950 or RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP_OR_ZLIB&lt;/code&gt; .</source>
          <target state="translated">RFC 1950またはRFC 1952データストリーム（gzipなど）を自動検出して解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;WANT_GZIP_OR_ZLIB&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="0b525fdc47ff53e260dc0931cfbc7865b5eae8d3" translate="yes" xml:space="preserve">
          <source>To avoid ambiguity, when signatures are enabled the special syntax for prototypes is disabled. There is no attempt to guess whether a parenthesised group was intended to be a prototype or a signature. To give a subroutine a prototype under these circumstances, use a &lt;a href=&quot;attributes#Built-in-Attributes&quot;&gt;prototype attribute&lt;/a&gt;. For example,</source>
          <target state="translated">あいまいさを避けるために、署名が有効になっている場合、プロトタイプの特別な構文は無効になっています。括弧で囲まれたグループがプロトタイプまたは署名のどちらであることが意図されていたかを推測する試みはありません。このような状況でサブルーチンにプロトタイプを与えるには、&lt;a href=&quot;attributes#Built-in-Attributes&quot;&gt;プロトタイプ属性を&lt;/a&gt;使用します。例えば、</target>
        </trans-unit>
        <trans-unit id="409b9ee9e716af7051876e4ad525c073a4badea1" translate="yes" xml:space="preserve">
          <source>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious failures, put this sort of thing at the top of your file to signal that your code will work</source>
          <target state="translated">以前のバージョンの Perl を実行しているユーザを混乱させないためには、あなたのコードが動作することを示すために、ファイルの先頭にこのようなことを書いてください。</target>
        </trans-unit>
        <trans-unit id="cdb270b498c0b4af5dad93d34e6e87c778aa6616" translate="yes" xml:space="preserve">
          <source>To avoid confusing would-be users of your code who are running earlier versions of Perl with mysterious syntax errors, put this sort of thing at the top of your file to signal that your code will work</source>
          <target state="translated">以前のバージョンのPerlを実行しているユーザを混乱させないために、あなたのコードが動作することを示すために、ファイルの先頭にこのようなことを書いてください。</target>
        </trans-unit>
        <trans-unit id="010f767fa3f7758e437e81843e72a2beb1516ec0" translate="yes" xml:space="preserve">
          <source>To avoid confusing would-be users of your code with mysterious syntax errors, put something like this at the top of your script:</source>
          <target state="translated">謎の構文エラーでコードのユーザーを混乱させないように、スクリプトの先頭に次のような記述をしてください。</target>
        </trans-unit>
        <trans-unit id="92c9a11d8c00dc701cc8cb47a28dac284fb7ca76" translate="yes" xml:space="preserve">
          <source>To avoid creating a new SV every time &lt;code&gt;SaveSub2&lt;/code&gt; is called, the function first checks to see if it has been called before. If not, then space for a new SV is allocated and the reference to the Perl subroutine &lt;code&gt;name&lt;/code&gt; is copied to the variable &lt;code&gt;keepSub&lt;/code&gt; in one operation using &lt;code&gt;newSVsv&lt;/code&gt; . Thereafter, whenever &lt;code&gt;SaveSub2&lt;/code&gt; is called, the existing SV, &lt;code&gt;keepSub&lt;/code&gt; , is overwritten with the new value using &lt;code&gt;SvSetSV&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;SaveSub2&lt;/code&gt; が呼び出されるたびに新しいSVが作成されるのを回避するために、関数は最初にそれが以前に呼び出されたかどうかを確認します。そうでなければ、新しいSVのためのスペースが割り当てられ、Perlのサブルーチンへの参照 &lt;code&gt;name&lt;/code&gt; 変数にコピーされ &lt;code&gt;keepSub&lt;/code&gt; 使用して一回の操作で &lt;code&gt;newSVsv&lt;/code&gt; を。いつでもその後、 &lt;code&gt;SaveSub2&lt;/code&gt; が呼ばれ、既存のSV、 &lt;code&gt;keepSub&lt;/code&gt; は、使用して、新しい値で上書きされ &lt;code&gt;SvSetSV&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7f1c469efc6b2f6bb3fb09ea0c807689f209337a" translate="yes" xml:space="preserve">
          <source>To avoid memory leaks, all trailing duplicate entries in @INC are removed.</source>
          <target state="translated">メモリリークを避けるために、@INCの末尾の重複エントリはすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="fe0f91423917e2fcf830eb3362231efceaad6437" translate="yes" xml:space="preserve">
          <source>To avoid relying on an object's underlying representation, if the smartmatch's right operand is an object that doesn't overload &lt;code&gt;~~&lt;/code&gt; , it raises the exception &quot;&lt;code&gt;Smartmatching a non-overloaded object
breaks encapsulation&lt;/code&gt; &quot;. That's because one has no business digging around to see whether something is &quot;in&quot; an object. These are all illegal on objects without a &lt;code&gt;~~&lt;/code&gt; overload:</source>
          <target state="translated">オブジェクトの基本的な表現に依存しないようにするには、smartmatchの右のオペランドが &lt;code&gt;~~&lt;/code&gt; をオーバーロードしないオブジェクトである場合、例外「オーバーロードされていないオブジェクトを &lt;code&gt;Smartmatching a non-overloaded object breaks encapsulation&lt;/code&gt; 」が発生します。それは、何かがオブジェクトの「中に」あるかどうかを確認するために掘り下げるビジネスがないためです。これらは &lt;code&gt;~~&lt;/code&gt; オーバーロードのないオブジェクトではすべて無効です：</target>
        </trans-unit>
        <trans-unit id="4c10393ba7ca423ef6dd3c94a2b581675efc33a8" translate="yes" xml:space="preserve">
          <source>To avoid the possibility of miscoordination, Perl now flushes FILEHANDLE before locking or unlocking it.</source>
          <target state="translated">協調性が損なわれる可能性を避けるために、PerlはFILEHANDLEをロックまたはアンロックする前にフラッシュするようになりました。</target>
        </trans-unit>
        <trans-unit id="5d5d75934a6f7e951fd9357cb74cb7683ab1e280" translate="yes" xml:space="preserve">
          <source>To avoid this problem, either put in extra parentheses or use the super low precedence &lt;code&gt;or&lt;/code&gt; operator:</source>
          <target state="translated">この問題を回避するには、括弧を追加するか、超低優先順位 &lt;code&gt;or&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="766d42f164385b7f29a7e92b44d6d78b6d17a595" translate="yes" xml:space="preserve">
          <source>To avoid this problem, when it encounters a here document whilst extracting from a modifiable string, &lt;code&gt;extract_quotelike&lt;/code&gt; silently rearranges the string to an equivalent piece of Perl:</source>
          <target state="translated">この問題を回避するために、変更可能な文字列から抽出中にヒアドキュメントに遭遇すると、 &lt;code&gt;extract_quotelike&lt;/code&gt; は文字列を同等のPerlにサイレントに再配置します。</target>
        </trans-unit>
        <trans-unit id="da9ceee7d2a6a8bd92bf59b8dd4824301848ef6c" translate="yes" xml:space="preserve">
          <source>To avoid this warning and to avoid having different output encodings in a single stream, always specify an encoding explicitly, for example with a PerlIO layer:</source>
          <target state="translated">この警告を回避し、単一のストリーム内で異なる出力エンコーディングを使用しないようにするには、PerlIO レイヤなどで常に明示的にエンコーディングを指定してください。</target>
        </trans-unit>
        <trans-unit id="35af978891563db2721278dcfd7e8de9b9ef61ce" translate="yes" xml:space="preserve">
          <source>To avoid this, whenever a CV and its associated pad is freed, any &lt;code&gt;&amp;amp;&lt;/code&gt; entries in the pad are explicitly removed from the pad, and if the refcount of the pointed-to anon sub is still positive, then that child's &lt;code&gt;CvOUTSIDE&lt;/code&gt; is set to point to its grandparent. This will only occur in the single specific case of a non-closure anon prototype having one or more active references (such as &lt;code&gt;$a&lt;/code&gt; above).</source>
          <target state="translated">これを回避するために、CVとそれに関連付けられたパッドが解放されるたびに、パッド内のすべての &lt;code&gt;&amp;amp;&lt;/code&gt; エントリがパッドから明示的に削除され、ポイントされたanonサブルーチンの &lt;code&gt;CvOUTSIDE&lt;/code&gt; がまだ正の場合、その子のCvOUTSIDEはポイントに設定されますその祖父母に。これは、1つ以上のアクティブな参照（上記の &lt;code&gt;$a&lt;/code&gt; など）を持つ非閉鎖の非プロトタイプの単一の特定のケースでのみ発生します。</target>
        </trans-unit>
        <trans-unit id="892f516de74c75c59b1eb990ddf92d3f52eefdaf" translate="yes" xml:space="preserve">
          <source>To avoid this, you can force the Makefile to be rebuilt whenever you change the module containing the version number by adding this to your WriteMakefile() arguments.</source>
          <target state="translated">これを避けるために、WriteMakefile()の引数にこれを追加することで、バージョン番号を含むモジュールを変更するたびに Makefile を強制的に再構築することができます。</target>
        </trans-unit>
        <trans-unit id="79bc3cfb105613cbe5f2c89b6ab087189a45bded" translate="yes" xml:space="preserve">
          <source>To avoid wasted work when a restart is needed, the sizing pass is abandoned - &lt;code&gt;regatom()&lt;/code&gt; immediately returns NULL, setting the flag &lt;code&gt;RESTART_UTF8&lt;/code&gt; . (This action is encapsulated using the macro &lt;code&gt;REQUIRE_UTF8&lt;/code&gt; .) This restart request is propagated up the call chain in a similar fashion, until it is &quot;caught&quot; in &lt;code&gt;Perl_re_op_compile()&lt;/code&gt; , which marks the pattern as containing Unicode, and restarts the sizing pass. It is also possible for constructions within run-time code blocks to turn out to need Unicode representation., which is signalled by &lt;code&gt;S_compile_runtime_code()&lt;/code&gt; returning false to &lt;code&gt;Perl_re_op_compile()&lt;/code&gt; .</source>
          <target state="translated">再起動が必要なときに無駄な作業を回避するために、サイズ変更パスは放棄されます &lt;code&gt;regatom()&lt;/code&gt; すぐにNULLを返し、フラグ &lt;code&gt;RESTART_UTF8&lt;/code&gt; を設定します。 （このアクションは、マクロ &lt;code&gt;REQUIRE_UTF8&lt;/code&gt; を使用してカプセル化されます。）この再起動要求は、 &lt;code&gt;Perl_re_op_compile()&lt;/code&gt; で「キャッチ」され、パターンにUnicodeが含まれているとマークされ、サイズ変更パスが再起動されるまで、同様の方法で呼び出しチェーンに伝達されます。実行時のコードブロック内の構成は、Unicode表現を必要と判明することも可能です。、によって通知された &lt;code&gt;S_compile_runtime_code()&lt;/code&gt; に偽を返す &lt;code&gt;Perl_re_op_compile()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09e124c75c7cbe80f3e4228168f11f802fe412a9" translate="yes" xml:space="preserve">
          <source>To be able to access the two parameters that were pushed onto the stack after they return from</source>
          <target state="translated">から戻ってきた後にスタックにプッシュされた2つのパラメータにアクセスできるようにする。</target>
        </trans-unit>
        <trans-unit id="6e3a208559e7fc6775f8912d077235f17cca0135" translate="yes" xml:space="preserve">
          <source>To be announced.</source>
          <target state="translated">発表される予定です。</target>
        </trans-unit>
        <trans-unit id="161647c06ada22688c122c82ae94e4258d4b89c7" translate="yes" xml:space="preserve">
          <source>To be announced. Or deleted.</source>
          <target state="translated">発表されること。または削除されること。</target>
        </trans-unit>
        <trans-unit id="1942f94bc444abb1b89482bc04403e0f7a2e9a63" translate="yes" xml:space="preserve">
          <source>To be compatible with .Net regular expressions, &lt;code&gt;\g{name}&lt;/code&gt; may also be written as &lt;code&gt;\k{name}&lt;/code&gt; , &lt;code&gt;\k&amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;\k'name'&lt;/code&gt;.</source>
          <target state="translated">.Net正規表現と互換性を持たせるために、 &lt;code&gt;\g{name}&lt;/code&gt; は &lt;code&gt;\k{name}&lt;/code&gt; 、 &lt;code&gt;\k&amp;lt;name&amp;gt;&lt;/code&gt; または &lt;code&gt;\k'name'&lt;/code&gt; 表記することもできます。</target>
        </trans-unit>
        <trans-unit id="bc3bab69ee4c24015f181f505f714806f55a6a5d" translate="yes" xml:space="preserve">
          <source>To be fully compatible with the Exporter and MakeMaker modules you should store your module's version number in a non-my package variable called $VERSION. This should be a positive floating point number with at least two digits after the decimal (i.e., hundredths, e.g, &lt;code&gt;$VERSION = &quot;0.01&quot;&lt;/code&gt; ). Don't use a &quot;1.3.2&quot; style version. See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt; for details.</source>
          <target state="translated">エクスポーターおよびMakeMakerモジュールと完全に互換性を保つには、モジュールのバージョン番号を$ VERSIONという非myパッケージ変数に保存する必要があります。これは、小数点以下2桁以上の正の浮動小数点数である必要があります（つまり、100分の1、たとえば &lt;code&gt;$VERSION = &quot;0.01&quot;&lt;/code&gt; ）。「1.3.2」スタイルのバージョンは使用しないでください。詳細については、&lt;a href=&quot;exporter&quot;&gt;エクスポーター&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="781abe7cd10e483cb21c7189d334aa3e4eaca732" translate="yes" xml:space="preserve">
          <source>To be more precise, we will say that a regex program is an encoding of a graph. Each node in the graph corresponds to part of the original regex pattern, such as a literal string or a branch, and has a pointer to the nodes representing the next component to be matched. Since &quot;node&quot; and &quot;opcode&quot; already have other meanings in the perl source, we will call the nodes in a regex program &quot;regops&quot;.</source>
          <target state="translated">より正確には、正規表現プログラムはグラフのエンコーディングであると言えます。グラフの各ノードは、リテラル文字列や分岐など、元の正規表現パターンの一部に対応しており、マッチされる次の要素を表すノードへのポインタを持っています。node &quot;と &quot;opcode &quot;はPerlのソースではすでに他の意味を持っているので、正規表現プログラムのノードを &quot;regops &quot;と呼ぶことにします。</target>
        </trans-unit>
        <trans-unit id="a03a7a550b2afe3393fb820749da17491cf98371" translate="yes" xml:space="preserve">
          <source>To be pedantic, the comparison is actually &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR) == &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR)&lt;/code&gt; , but that is only an issue if you use a floating point expression; when implicitly using &lt;code&gt;$.&lt;/code&gt; as described in the previous paragraph, the comparison is &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR) == &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;($.)&lt;/code&gt; which is only an issue when &lt;code&gt;$.&lt;/code&gt; is set to a floating point value and you are not reading from a file. Furthermore, &lt;code&gt;&quot;span&quot; .. &quot;spat&quot;&lt;/code&gt; or &lt;code&gt;2.18 .. 3.14&lt;/code&gt; will not do what you want in scalar context because each of the operands are evaluated using their integer representation.</source>
          <target state="translated">わかりやすく言うと、比較は実際には &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR) == &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR)&lt;/code&gt; ですが、これは、浮動小数点式を使用する場合にのみ問題になります。暗黙的に &lt;code&gt;$.&lt;/code&gt; を使用する場合。前の段落で説明したように、比較は &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;(EXPR) == &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;($.)&lt;/code&gt; であり、 &lt;code&gt;$.&lt;/code&gt; 場合にのみ問題になります。は浮動小数点値に設定されており、ファイルから読み取っていません。さらに、 &lt;code&gt;&quot;span&quot; .. &quot;spat&quot;&lt;/code&gt; または &lt;code&gt;2.18 .. 3.14&lt;/code&gt; は、各オペランドが整数表現を使用して評価されるため、スカラーコンテキストで必要なことを行いません。</target>
        </trans-unit>
        <trans-unit id="ed53a49e46f6db6479ffd9a906bbff37f48f8995" translate="yes" xml:space="preserve">
          <source>To be polite to other functions wrapping your own you usually want to increment &lt;code&gt;$Level&lt;/code&gt; rather than set it to a constant.</source>
          <target state="translated">自分自身をラップする他の関数に礼儀正しくするには、通常、 &lt;code&gt;$Level&lt;/code&gt; 定数に設定するのではなく、インクリメントする必要があります。</target>
        </trans-unit>
        <trans-unit id="377966b7899d2c6cc0617addc0bc388cc67a68ae" translate="yes" xml:space="preserve">
          <source>To be portable each component of a module name should be limited to 11 characters. If it might be used on MS-DOS then try to ensure each is unique in the first 8 characters. Nested modules make this easier.</source>
          <target state="translated">移植性を高めるために、モジュール名の各コンポーネントは11文字に制限されるべきです。MS-DOS で使用する場合は、最初の 8 文字でそれぞれが一意であることを確認してください。入れ子になっているモジュールは、これをより簡単にします。</target>
        </trans-unit>
        <trans-unit id="b076f38e81902902b25d1f17b1608ab8be160484" translate="yes" xml:space="preserve">
          <source>To begin your reading, start with:</source>
          <target state="translated">読書を始めるには、まずは</target>
        </trans-unit>
        <trans-unit id="a61e1eb5d11062cb9036bb12d10d76fe348be7c1" translate="yes" xml:space="preserve">
          <source>To browse existing Perl bugs and patches, you can use the web interface at &lt;a href=&quot;http://rt.perl.org/&quot;&gt;http://rt.perl.org/&lt;/a&gt;.</source>
          <target state="translated">既存のPerlのバグとパッチを閲覧するには、&lt;a href=&quot;http://rt.perl.org/&quot;&gt;http：//rt.perl.org/に&lt;/a&gt;あるWebインターフェースを使用できます。</target>
        </trans-unit>
        <trans-unit id="b19b13b7eebea3b4a95edad33fffc49ec225b2e5" translate="yes" xml:space="preserve">
          <source>To build a non-XS module, you can use the standard module-building instructions distributed with perl modules.</source>
          <target state="translated">XS以外のモジュールをビルドするには、perlモジュールで配布されている標準のモジュールビルド命令を使用します。</target>
        </trans-unit>
        <trans-unit id="6c2705e01ac97996d808db8effeb88881961867f" translate="yes" xml:space="preserve">
          <source>To build an XS module, you must use the standard module-building instructions distributed with perl modules *PLUS* three extra instructions specific to the DJGPP &quot;static link&quot; build environment.</source>
          <target state="translated">XSモジュールをビルドするには、Perlモジュールに付属の標準的なモジュールビルド手順に加えて、DJGPPの &quot;スタティックリンク &quot;ビルド環境に特化した3つの追加手順を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d5c2765f0199128d509d1897ee86d4417f4dd8a3" translate="yes" xml:space="preserve">
          <source>To build extensions other than standard extensions, NetWare Perl has to be installed on Windows along with Windows Perl. The Perl for Windows can be either downloaded from the CPAN site and built using the sources, or the binaries can be directly downloaded from the ActiveState site. Installation can be done by invoking</source>
          <target state="translated">標準の拡張機能以外の拡張機能をビルドするには、Windows用のPerlと一緒にNetWare PerlをWindowsにインストールする必要があります。Windows 用の Perl は、CPAN のサイトからダウンロードしてソースを使用してビルドするか、ActiveState のサイトから直接バイナリをダウンロードすることができます。インストールは</target>
        </trans-unit>
        <trans-unit id="787c86241856156cd077a05b7bdc7004761044c1" translate="yes" xml:space="preserve">
          <source>To build perl from its source code on the Stratus V Series platform you must have OpenVOS Release 17.1.0 or later, GNU Tools Release 3.5 or later, and the C/POSIX Runtime Libraries.</source>
          <target state="translated">Stratus V シリーズプラットフォーム上でソースコードから perl をビルドするには、OpenVOS Release 17.1.0 以降、GNU Tools Release 3.5 以降、および C/POSIX ランタイムライブラリが必要です。</target>
        </trans-unit>
        <trans-unit id="29d9cfbafe7af9c12fb5ae5d7307a03b50f8bc3e" translate="yes" xml:space="preserve">
          <source>To build perl with AddressSanitizer, your Configure invocation should look like:</source>
          <target state="translated">AddressSanitizerを使ってPerlをビルドするには、Configure呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b12975798f70dc1cb8c9fb59b7af2b4445d07d6d" translate="yes" xml:space="preserve">
          <source>To calculate the digest of an n-bit message where</source>
          <target state="translated">n ビットのメッセージのダイジェストを計算する。</target>
        </trans-unit>
        <trans-unit id="0df1e5f84b4694c53717b89d6fb8b89ff7d44718" translate="yes" xml:space="preserve">
          <source>To calculate the distance between London (51.3N 0.5W) and Tokyo (35.7N 139.8E) in kilometers:</source>
          <target state="translated">ロンドン(51.3N 0.5W)と東京(35.7N 139.8E)の間の距離をキロメートルで計算します。</target>
        </trans-unit>
        <trans-unit id="4cea3ec7425389162d89934663cf2df355daf6af" translate="yes" xml:space="preserve">
          <source>To call a function on each element in an array, and collect the results, use:</source>
          <target state="translated">配列の各要素に対して関数を呼び出して結果を収集するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="dbe4aebe356ab30727111304ed5066c2800f1b44" translate="yes" xml:space="preserve">
          <source>To call a function on each element of an array, but ignore the results:</source>
          <target state="translated">配列の各要素に対して関数を呼び出しますが、結果は無視します。</target>
        </trans-unit>
        <trans-unit id="710b700709beaae3a0d7fb3e17148d99cdb1ee11" translate="yes" xml:space="preserve">
          <source>To call a function on each integer in a (small) range, you &lt;b&gt;can&lt;/b&gt; use:</source>
          <target state="translated">（小さい）範囲内の各整数に対して関数を呼び出すには、次&lt;b&gt;を&lt;/b&gt;使用&lt;b&gt;でき&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b0c03ca703f3d70571e4ed1a5f4b95eb2f4f7eac" translate="yes" xml:space="preserve">
          <source>To call individual Perl subroutines, you can use any of the &lt;b&gt;call_*&lt;/b&gt; functions documented in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;. In this example we'll use &lt;code&gt;call_argv&lt;/code&gt; .</source>
          <target state="translated">個々のPerlのサブルーチンを呼び出すには、任意の使用することができます&lt;b&gt;CALL_ *&lt;/b&gt;に文書化機能&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;。この例では、 &lt;code&gt;call_argv&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f49f3d19c459317781abadc37d2ae6f14022eac3" translate="yes" xml:space="preserve">
          <source>To call subroutines:</source>
          <target state="translated">サブルーチンを呼び出すこと。</target>
        </trans-unit>
        <trans-unit id="5abcacc2499f97bcbde0588fdd4401b44cc6c01a" translate="yes" xml:space="preserve">
          <source>To capture a command's STDERR but discard its STDOUT (ordering is important here):</source>
          <target state="translated">コマンドのSTDERRをキャプチャし、STDOUTを破棄するには(ここでは順序が重要です)。</target>
        </trans-unit>
        <trans-unit id="891b8754dd37bb2c3dc54aab3a1185e0fd372170" translate="yes" xml:space="preserve">
          <source>To capture a command's STDERR but discard its STDOUT:</source>
          <target state="translated">コマンドのSTDERRをキャプチャし、STDOUTを破棄する。</target>
        </trans-unit>
        <trans-unit id="7ddfc050c95c3b76b8561d8851899b023835e01c" translate="yes" xml:space="preserve">
          <source>To capture a command's STDOUT but discard its STDERR:</source>
          <target state="translated">コマンドのSTDOUTをキャプチャし、STDERRを破棄する。</target>
        </trans-unit>
        <trans-unit id="459bfbbfb62f196ec5bdfb8f616f754fb8b81d04" translate="yes" xml:space="preserve">
          <source>To capture a program's STDERR, and let its STDOUT go to our own STDERR:</source>
          <target state="translated">プログラムのSTDERRをキャプチャし、そのSTDOUTを自分のSTDERRに移動させる。</target>
        </trans-unit>
        <trans-unit id="5bd52eb04283645c047b422b0b8e0a7d88ad61c6" translate="yes" xml:space="preserve">
          <source>To capture a program's STDERR, but discard its STDOUT:</source>
          <target state="translated">プログラムのSTDERRをキャプチャし、STDOUTを破棄する。</target>
        </trans-unit>
        <trans-unit id="8a448a300769cb48dfafecf642b7105f4ae83d7b" translate="yes" xml:space="preserve">
          <source>To capture a program's STDOUT, but discard its STDERR:</source>
          <target state="translated">プログラムのSTDOUTをキャプチャし、STDERRを破棄する。</target>
        </trans-unit>
        <trans-unit id="48535a0ea84ddf99c0ff0191b2ebc7ac2d2965e6" translate="yes" xml:space="preserve">
          <source>To catch this kind of problem, we can force each variable to be declared before use by pulling in the strict module, by putting 'use strict;' after the first line of the script.</source>
          <target state="translated">この種の問題をキャッチするために、スクリプトの最初の行の後に 'use strict;' を置くことで、strict モジュールを引っ張ってくることで、使用前に各変数を強制的に宣言することができます。</target>
        </trans-unit>
        <trans-unit id="ee4539dea7c8d87e83fb7b99fbcea7146f28bf41" translate="yes" xml:space="preserve">
          <source>To center a whole line of text, do something like this:</source>
          <target state="translated">テキストの行全体を中央に配置するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="cb50b80c4012bf8864c9070a8feaf64a654c0893" translate="yes" xml:space="preserve">
          <source>To change existing lines, insert the code to modify the lines inside the &lt;code&gt;while&lt;/code&gt; loop. In this case, the code finds all lowercased versions of &quot;perl&quot; and uppercases them. The happens for every line, so be sure that you're supposed to do that on every line!</source>
          <target state="translated">既存の行を変更するには、 &lt;code&gt;while&lt;/code&gt; ループ内の行を変更するコードを挿入します。この場合、コードは小文字の「perl」のバージョンをすべて見つけて大文字にします。これはすべての行で発生するので、必ずすべての行で実行するようにしてください。</target>
        </trans-unit>
        <trans-unit id="3014ba02f0b23a5077d149c5a55186e1b0210812" translate="yes" xml:space="preserve">
          <source>To change one of these elements, just assign to it like this:</source>
          <target state="translated">これらの要素を変更するには、このように代入するだけです。</target>
        </trans-unit>
        <trans-unit id="0bc26e290e338fd9cb7ec178f79c71f3fe32327a" translate="yes" xml:space="preserve">
          <source>To change only a particular line, the input line number, &lt;code&gt;$.&lt;/code&gt; , is useful. First read and print the lines up to the one you want to change. Next, read the single line you want to change, change it, and print it. After that, read the rest of the lines and print those:</source>
          <target state="translated">特定の行のみを変更するには、入力行番号 &lt;code&gt;$.&lt;/code&gt; 、便利です。まず、変更したい行まで読み取り、印刷します。次に、変更する1行を読み取り、変更して、印刷します。その後、残りの行を読み、それらを印刷します。</target>
        </trans-unit>
        <trans-unit id="f7b3b581f75dc5b407edfb21187704d85ccc3337" translate="yes" xml:space="preserve">
          <source>To change only the fifth line, you can add a test checking &lt;code&gt;$.&lt;/code&gt; , the input line number, then only perform the operation when the test passes:</source>
          <target state="translated">5行目のみを変更するには、 &lt;code&gt;$.&lt;/code&gt; チェックするテストを追加できます。、入力行番号。テストに合格した場合にのみ操作を実行します。</target>
        </trans-unit>
        <trans-unit id="2ac56000e9557456388facc9434e99b2f25c68f2" translate="yes" xml:space="preserve">
          <source>To change part of a string, you can use the optional fourth argument which is the replacement string.</source>
          <target state="translated">文字列の一部を変更するには、オプションの第4引数である置換文字列を使用することができます。</target>
        </trans-unit>
        <trans-unit id="159bf1e2399227a81a68240fcbc4a8d0c4d4386e" translate="yes" xml:space="preserve">
          <source>To change the configuration you will need to use either the &lt;code&gt;-c&lt;/code&gt; or the &lt;code&gt;-d&lt;/code&gt; options.</source>
          <target state="translated">構成を変更するには、 &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;-d&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="82b774af2b2d757667a119fdffcb3a39066bffc5" translate="yes" xml:space="preserve">
          <source>To change the value of an</source>
          <target state="translated">の値を変更するには</target>
        </trans-unit>
        <trans-unit id="c3243d9e5f9c11b853cdbfbdad7815af406db7ec" translate="yes" xml:space="preserve">
          <source>To check if you've got an object derived from a specific class you have to write:</source>
          <target state="translated">特定のクラスから派生したオブジェクトを持っているかどうかを確認するには、書かなければなりません。</target>
        </trans-unit>
        <trans-unit id="b5f0280c18244571ee821966259aa01905eea140" translate="yes" xml:space="preserve">
          <source>To check that a PerlIO* is valid use PerlIOValid(PerlIO *f). (All this does is really just to check that the pointer is non-NULL and that the pointer behind that is non-NULL.)</source>
          <target state="translated">PerlIO*が有効であることを確認するには、PerlIOValid(PerlIO *f)を使用します。(これはポインタが非NULLであることと、その後ろのポインタが非NULLであることをチェックするだけです)。</target>
        </trans-unit>
        <trans-unit id="6efc33cfc9910a60ea4ef9bf5110b124df74dec6" translate="yes" xml:space="preserve">
          <source>To circumvent this, Perl uses two hacks. They help against</source>
          <target state="translated">これを回避するために、Perlは2つのハックを使用しています。これらは</target>
        </trans-unit>
        <trans-unit id="9b687155f88b0a0c7f0b7a50cd6c0fc2a98e0825" translate="yes" xml:space="preserve">
          <source>To clear the screen, you just have to print the special sequence that tells the terminal to clear the screen. Once you have that sequence, output it when you want to clear the screen.</source>
          <target state="translated">画面をクリアするには、端末に画面をクリアするように指示する特殊なシーケンスを印刷すればよい。そのシーケンスができたら、画面をクリアしたいときに出力してください。</target>
        </trans-unit>
        <trans-unit id="5339fbdb482ebe20149617c58a946c9025ec4bd2" translate="yes" xml:space="preserve">
          <source>To compare two strings case-insensitively, use &lt;a href=&quot;perlapi#foldEQ_utf8&quot;&gt;foldEQ_utf8() &lt;/a&gt; (the strings don't have to have the same UTF-8ness).</source>
          <target state="translated">2つの文字列を大文字と小文字を区別せずに比較するには、&lt;a href=&quot;perlapi#foldEQ_utf8&quot;&gt;foldEQ_utf8（）を&lt;/a&gt;使用します（文字列が同じUTF-8である必要はありません）。</target>
        </trans-unit>
        <trans-unit id="9ef4437f2da5ad50f0107615b5cd7fb7937669db" translate="yes" xml:space="preserve">
          <source>To compile Perl with threads, add -Dusethreads to the arguments of Configure. Verify that the -D_POSIX_C_SOURCE=199506L compiler flag is automatically added to the list of flags. Also make sure that -lpthread is listed before -lc in the list of libraries to link Perl with. The hints provided for HP-UX during Configure will try very hard to get this right for you.</source>
          <target state="translated">スレッドを使ってPerlをコンパイルするには、Configureの引数に-Dusethreadsを追加します。D_POSIX_C_SOURCE=199506Lコンパイラフラグが自動的にフラグのリストに追加されていることを確認してください。また、Perlとリンクするライブラリのリストで、-lpthreadが-lcの前にリストされていることを確認してください。Configure時にHP-UX用に提供されているヒントは、あなたのためにこれを正しくするために非常に努力してくれます。</target>
        </trans-unit>
        <trans-unit id="dca1f2d388460992485bc83958326b4fabbe3a89" translate="yes" xml:space="preserve">
          <source>To compile a 64-bit application on an UltraSparc with a recent Sun Compiler, you need to use the flag &quot;-xarch=v9&quot;. getconf(1) will tell you this, e.g.</source>
          <target state="translated">UltraSparc 上の 64 ビットアプリケーションを最近の Sun Compiler でコンパイルするには、&quot;-xarch=v9&quot; フラグを使う必要があります。</target>
        </trans-unit>
        <trans-unit id="87a608f7610a06343062c0a4f15a78987866b679" translate="yes" xml:space="preserve">
          <source>To compress all files in the directory &quot;/my/home&quot; that match &quot;*.txt&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;内の &quot;*.txt &quot;に一致するファイルをすべて圧縮し、圧縮データを同じディレクトリに保存するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="e79c6c77e53867aede1a00267dc0d36f666b7950" translate="yes" xml:space="preserve">
          <source>To compress an RFC 1950 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to a positive number between 8 and 15.</source>
          <target state="translated">RFC 1950データストリームを圧縮するには、 &lt;code&gt;WindowBits&lt;/code&gt; を8〜15の正の数に設定します。</target>
        </trans-unit>
        <trans-unit id="7421981a167883ab2bc4949efb716b7db4314b6b" translate="yes" xml:space="preserve">
          <source>To compress an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt; .</source>
          <target state="translated">RFC 1951データストリームを圧縮するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="eb0992d170df6f988844c94c5a16d02581fe60f0" translate="yes" xml:space="preserve">
          <source>To compress an RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP&lt;/code&gt; .</source>
          <target state="translated">RFC 1952データストリーム（gzipなど）を圧縮するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;WANT_GZIP&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="6c0a5b03c1713572aa7618df4ce2ea31c5f8ea2a" translate="yes" xml:space="preserve">
          <source>To concatenate</source>
          <target state="translated">連結するには</target>
        </trans-unit>
        <trans-unit id="6e6c0c8d29557c5cf786e08230a13bcf9f5a031b" translate="yes" xml:space="preserve">
          <source>To configure the</source>
          <target state="translated">を設定するには</target>
        </trans-unit>
        <trans-unit id="b8324e82632846a0ff4c29dfcce46aaf6bb8f9fb" translate="yes" xml:space="preserve">
          <source>To connect one filehandle to several output filehandles, you can use the &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Tee&quot;&gt;IO::Tee&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/perldoc/Tie::FileHandle::Multiplex&quot;&gt;Tie::FileHandle::Multiplex&lt;/a&gt; modules.</source>
          <target state="translated">1つのファイルハンドルを複数の出力ファイルハンドルに接続するには、&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Tee&quot;&gt;IO :: Tee&lt;/a&gt;または&lt;a href=&quot;http://search.cpan.org/perldoc/Tie::FileHandle::Multiplex&quot;&gt;Tie :: FileHandle :: Multiplex&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="8d6cbc660d600cd1c4583162826d97d790f4bf63" translate="yes" xml:space="preserve">
          <source>To conserve memory you should have your compiler modules loaded into the Link Pack Area (LPA/ELPA) rather than in a link list or step lib.</source>
          <target state="translated">メモリを節約するには、リンクリストやステップ lib ではなく、リンクパックエリア (LPA/ELPA)にコンパイラーモジュールをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="968a823fad5813dfb21cd46750147776a5611926" translate="yes" xml:space="preserve">
          <source>To considerably speed up the initial CPAN shell startup, it is possible to use Storable to create a cache of metadata. If Storable is not available, the normal index mechanism will be used.</source>
          <target state="translated">初期のCPANシェル起動を大幅に高速化するために、Storableを使用してメタデータのキャッシュを作成することができます。Storableが利用できない場合は、通常のインデックス機構が使用されます。</target>
        </trans-unit>
        <trans-unit id="20a4b2b8d77aba12d02e264b26db5b4fc2052c4a" translate="yes" xml:space="preserve">
          <source>To contact the author, send email to: &lt;code&gt;mjd-perl-tiefile+@plover.com&lt;/code&gt;</source>
          <target state="translated">著者に連絡するには、 &lt;code&gt;mjd-perl-tiefile+@plover.com&lt;/code&gt; メールを送信してください。</target>
        </trans-unit>
        <trans-unit id="d4e7d2faeb717445863f554610fdabbf94c812cb" translate="yes" xml:space="preserve">
          <source>To control what text is used for display, you use &quot;&lt;code&gt;L&amp;lt;text|...&amp;gt;&lt;/code&gt;&quot;, as in:</source>
          <target state="translated">表示に使用するテキストを制御するには、次のように &quot; &lt;code&gt;L&amp;lt;text|...&amp;gt;&lt;/code&gt; &quot;を使用します。</target>
        </trans-unit>
        <trans-unit id="0f2616580d4b758d8bc7475f582ba3ef32958144" translate="yes" xml:space="preserve">
          <source>To convert &lt;code&gt;$Config{perlpath}&lt;/code&gt; to a file pathname, say:</source>
          <target state="translated">&lt;code&gt;$Config{perlpath}&lt;/code&gt; をファイルパス名に変換するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="445d48b4e3ded0561c8b941a914e856d01c116d2" translate="yes" xml:space="preserve">
          <source>To convert &lt;code&gt;$^X&lt;/code&gt; to a file pathname, taking account of the requirements of the various operating system possibilities, say:</source>
          <target state="translated">さまざまなオペレーティングシステムの可能性の要件を考慮して、 &lt;code&gt;$^X&lt;/code&gt; をファイルパス名に変換するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="c00d24e73fce2df83990c0f155f2d36a18a08fc4" translate="yes" xml:space="preserve">
          <source>To convert an octal number, use from_oct();</source>
          <target state="translated">8 進数を変換するには from_oct()を使用します。</target>
        </trans-unit>
        <trans-unit id="7d95d35a7d9c8de57b1e556f0a9920a9c8320986" translate="yes" xml:space="preserve">
          <source>To convert from EBCDIC 037 to ASCII just reverse the order of the tr/// arguments like so:</source>
          <target state="translated">EBCDIC 037 から ASCII に変換するには、次のように tr///引数の順序を逆にするだけです。</target>
        </trans-unit>
        <trans-unit id="e95102da8c741e9ba252adcb490152dec1b8623d" translate="yes" xml:space="preserve">
          <source>To convert from new-style to old-style, follow this recipe:</source>
          <target state="translated">ニュースタイルからオールドスタイルに変換するには、このレシピに従ってください。</target>
        </trans-unit>
        <trans-unit id="9fa39707ee5532360879dd87b7e44a99cff8fee0" translate="yes" xml:space="preserve">
          <source>To copy all your .c file to a backup directory</source>
          <target state="translated">すべての.cファイルをバックアップディレクトリにコピーするには</target>
        </trans-unit>
        <trans-unit id="5ab2f997dcaa14c701c81b93174b6bfe66ee6931" translate="yes" xml:space="preserve">
          <source>To copy the array, use</source>
          <target state="translated">配列をコピーするには</target>
        </trans-unit>
        <trans-unit id="86582412ddc1c4958ec10cc1409f68b2a052f72a" translate="yes" xml:space="preserve">
          <source>To cover such cases, you can redispatch methods via:</source>
          <target state="translated">そのようなケースをカバーするために、経由してメソッドを再送することができます。</target>
        </trans-unit>
        <trans-unit id="816db1c262f755f697320a74d5b828dbd17231a2" translate="yes" xml:space="preserve">
          <source>To create Unicode characters in literals, use the &lt;code&gt;\N{...}&lt;/code&gt; notation in double-quoted strings:</source>
          <target state="translated">リテラルでUnicode文字を作成するには、二重引用符で囲まれた文字列で &lt;code&gt;\N{...}&lt;/code&gt; 表記を使用します。</target>
        </trans-unit>
        <trans-unit id="c36e175a2f7ac1c4707a3b48724437b649be4b2b" translate="yes" xml:space="preserve">
          <source>To create a POD filter for translating POD documentation into some other format, you create a subclass of &lt;b&gt;Pod::Parser&lt;/b&gt; which typically overrides just the base class implementation for the following methods:</source>
          <target state="translated">PODドキュメントを他の形式に変換するPODフィルターを作成するには、通常、次のメソッドの基本クラス実装のみをオーバーライドする&lt;b&gt;Pod :: Parserの&lt;/b&gt;サブクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="3376aadc06d935bc6556cf078e6fff6d6ceed1e6" translate="yes" xml:space="preserve">
          <source>To create a Perl module that implements a PerlIO layer in Perl (as opposed to in C using XS as the interface to Perl), you need to supply some of the following subroutines. It is recommended to create these Perl modules in the PerlIO::via:: namespace, so that they can easily be located on CPAN and use the default namespace feature of the PerlIO::via module itself.</source>
          <target state="translated">PerlIOレイヤをPerlで実装するPerlモジュールをPerlで作成するには、以下のサブルーチンのいくつかを提供する必要があります。これらのPerlモジュールをPerlIO::via::ネームスペースに作成することをお勧めします。これにより、CPAN上に簡単に配置でき、PerlIO::viaモジュール自体のデフォルトのネームスペース機能を使用することができます。</target>
        </trans-unit>
        <trans-unit id="cea82dcc2341d67ceae28cb7f8dd640de30d8fab" translate="yes" xml:space="preserve">
          <source>To create a child &lt;b&gt;process&lt;/b&gt; identical to the parent process at its moment of conception, at least until it gets ideas of its own. A thread with protected memory.</source>
          <target state="translated">少なくとも独自のアイデアが得られるまで、受胎の瞬間に親&lt;b&gt;プロセス&lt;/b&gt;と同一の子&lt;b&gt;プロセス&lt;/b&gt;を作成すること。保護されたメモリを持つスレッド。</target>
        </trans-unit>
        <trans-unit id="973c5f5d0d37e9d577d7def77212ab83a77d00d7" translate="yes" xml:space="preserve">
          <source>To create a complex number, use either:</source>
          <target state="translated">複素数を作成するには、どちらかを使用します。</target>
        </trans-unit>
        <trans-unit id="2ba00f13d11568a68eea0b9363c1c701b94f3530" translate="yes" xml:space="preserve">
          <source>To create a handler, define it as a subroutine with the same name as the desired attribute, and declare the subroutine itself with the attribute &lt;code&gt;:ATTR&lt;/code&gt; . For example:</source>
          <target state="translated">ハンドラーを作成するには、目的の属性と同じ名前のサブルーチンとしてハンドラーを定義し、属性 &lt;code&gt;:ATTR&lt;/code&gt; を使用してサブルーチン自体を宣言します。例えば：</target>
        </trans-unit>
        <trans-unit id="0f301595bc4c387e143da9231296df032806e83c" translate="yes" xml:space="preserve">
          <source>To create a mortal variable, use the functions:</source>
          <target state="translated">モルタル変数を作成するには、関数を使用します。</target>
        </trans-unit>
        <trans-unit id="168d2bd52151b2f88de55aa6a46a9bc34a213502" translate="yes" xml:space="preserve">
          <source>To create a named pipe, use the &lt;code&gt;POSIX::mkfifo()&lt;/code&gt; function.</source>
          <target state="translated">名前付きパイプを作成するには、 &lt;code&gt;POSIX::mkfifo()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="fb4519b518bb57bb6e760a3915cac3cb53c117b7" translate="yes" xml:space="preserve">
          <source>To create a new Perl variable with an undef value which can be accessed from your Perl script, use the following routines, depending on the variable type.</source>
          <target state="translated">Perl スクリプトからアクセス可能な undef 値を持つ新しい Perl 変数を作成するには、変数の種類に応じて以下のルーチンを使用します。</target>
        </trans-unit>
        <trans-unit id="c5e6c240b7113609dabfe56dd41076e1c64fdaed" translate="yes" xml:space="preserve">
          <source>To create a new compartment, use</source>
          <target state="translated">新しいコンパートメントを作成するには</target>
        </trans-unit>
        <trans-unit id="a2f8f5de503a593a35d422a3d1a1da701a2bb15e" translate="yes" xml:space="preserve">
          <source>To create a reference, use either of the following functions:</source>
          <target state="translated">参照を作成するには、以下のいずれかの関数を使用します。</target>
        </trans-unit>
        <trans-unit id="3b14234e60346a5da75e272e4ecdc1bcef627a2f" translate="yes" xml:space="preserve">
          <source>To create a reference, we use the &lt;code&gt;newRV&lt;/code&gt; function. Note that you can cast an AV* or an HV* to type SV* in this case (and many others). This allows you to take references to arrays, hashes and scalars with the same function. Conversely, the &lt;code&gt;SvRV&lt;/code&gt; function always returns an SV*, which may need to be cast to the appropriate type if it is something other than a scalar (check with &lt;code&gt;SvTYPE&lt;/code&gt; ).</source>
          <target state="translated">参照を作成するには、 &lt;code&gt;newRV&lt;/code&gt; 関数を使用します。この場合（および他の多く）、AV *またはHV *をキャストしてSV *を入力できることに注意してください。これにより、同じ関数で配列、ハッシュ、スカラーへの参照を取得できます。逆に、 &lt;code&gt;SvRV&lt;/code&gt; 関数は常にSV *を返します。これは、スカラー以外の場合は適切な型にキャストする必要がある場合があります（ &lt;code&gt;SvTYPE&lt;/code&gt; で確認してください）。</target>
        </trans-unit>
        <trans-unit id="f750d278ece92b690ce083757a8b99d17e4a1cc6" translate="yes" xml:space="preserve">
          <source>To create a shared library, the following steps must be performed:</source>
          <target state="translated">共有ライブラリを作成するには、以下の手順を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3c6eb343e88be36bc92d3d97f3219df475d3ded3" translate="yes" xml:space="preserve">
          <source>To create a zip file, &lt;code&gt;output.zip&lt;/code&gt; , that contains the compressed contents of the files &lt;code&gt;alpha.txt&lt;/code&gt; and &lt;code&gt;beta.txt&lt;/code&gt;</source>
          <target state="translated">ファイル &lt;code&gt;alpha.txt&lt;/code&gt; および &lt;code&gt;beta.txt&lt;/code&gt; の圧縮されたコンテンツを含むzipファイル &lt;code&gt;output.zip&lt;/code&gt; を作成するには</target>
        </trans-unit>
        <trans-unit id="a8a9c4100fca7c9df2f642138fcef0fc96929592" translate="yes" xml:space="preserve">
          <source>To create an HV, you use the following routine:</source>
          <target state="translated">HVを作成するには、以下のルーチンを使用します。</target>
        </trans-unit>
        <trans-unit id="0094ef6c2580e3be5fb982924088c9990a9a669b" translate="yes" xml:space="preserve">
          <source>To create an RFC 1950 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to a positive number.</source>
          <target state="translated">RFC 1950データストリームを作成するには、 &lt;code&gt;WindowBits&lt;/code&gt; を正の数に設定します。</target>
        </trans-unit>
        <trans-unit id="c43fa53c9a4af41c4362a70dd0d3da19011de429" translate="yes" xml:space="preserve">
          <source>To create an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt; .</source>
          <target state="translated">RFC 1951データストリームを作成するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="dbb0b362cb67cdcf254362d24dcd3489205dd8b1" translate="yes" xml:space="preserve">
          <source>To create your own result types you have two options:</source>
          <target state="translated">独自の結果タイプを作成するには、2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="948e86a50124d6c16a2bb795d3ad5dd4ba16fd66" translate="yes" xml:space="preserve">
          <source>To deallocate the memory of a &lt;b&gt;referent&lt;/b&gt; (first triggering its &lt;code&gt;DESTROY&lt;/code&gt; method, if it has one).</source>
          <target state="translated">メモリの割り当てを解除する&lt;b&gt;リファレントを&lt;/b&gt;（最初にトリガ &lt;code&gt;DESTROY&lt;/code&gt; 、それが1つを持っている場合、メソッド）。</target>
        </trans-unit>
        <trans-unit id="684b7eba474ceeeee203e03efc4972ceab5f4011" translate="yes" xml:space="preserve">
          <source>To declare a file-private variable, you still use a lexical variable. A file is also a scope, so a lexical variable defined in the file cannot be seen from any other file.</source>
          <target state="translated">ファイル-プライベート変数を宣言するには、やはり字句変数を使用します。ファイルはスコープでもあるので、そのファイルで定義された字句変数は他のファイルからは見ることができません。</target>
        </trans-unit>
        <trans-unit id="26f359ab42151643a554fcca60e916cbc3b8c6c1" translate="yes" xml:space="preserve">
          <source>To declare multiple parents, you simply need to pass multiple class names to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; parent&lt;/code&gt; :</source>
          <target state="translated">複数の親を宣言するには、複数のクラス名を渡して &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; parent&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;するだけです。</target>
        </trans-unit>
        <trans-unit id="195f600c4f130988d6cb960024f570abb452421b" translate="yes" xml:space="preserve">
          <source>To declare subroutines:</source>
          <target state="translated">サブルーチンを宣言する。</target>
        </trans-unit>
        <trans-unit id="d689355c5c4c25b69703a4f888325a4f315e40d5" translate="yes" xml:space="preserve">
          <source>To decode the string, use the &lt;code&gt;uri_unescape&lt;/code&gt; function:</source>
          <target state="translated">文字列をデコードするには、 &lt;code&gt;uri_unescape&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="c00b1b3082eeba042c1321adab39b3572b77ab5f" translate="yes" xml:space="preserve">
          <source>To define a new encoding, use:</source>
          <target state="translated">新しいエンコーディングを定義するには</target>
        </trans-unit>
        <trans-unit id="90539d229e0f3e1882d607e70d036357967dd42b" translate="yes" xml:space="preserve">
          <source>To define an anonymous subroutine at runtime:</source>
          <target state="translated">実行時に匿名サブルーチンを定義する。</target>
        </trans-unit>
        <trans-unit id="c9cdf944c5644c128ca4890eae1d815775404ea8" translate="yes" xml:space="preserve">
          <source>To define your own variables, simply add them to the hash, or change existing values if you need to. The level and format are passed in as references to scalars, but it is unlikely that they will need to be changed or even used.</source>
          <target state="translated">独自の変数を定義するには、ハッシュに追加するか、必要であれば既存の値を変更するだけです。レベルとフォーマットはスカラへの参照として渡されますが、それらを変更したり使用したりする必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="663c37fcccd4eb9d16f3753290874adfe0a38adc" translate="yes" xml:space="preserve">
          <source>To delete a filter pass &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to it.</source>
          <target state="translated">フィルターを削除するには、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をそれに渡します。</target>
        </trans-unit>
        <trans-unit id="a7282a69c7ceaa80a01f9176cf957edc11cea4de" translate="yes" xml:space="preserve">
          <source>To delete lines, only print the ones that you want.</source>
          <target state="translated">行を削除するには、必要な行だけを印刷します。</target>
        </trans-unit>
        <trans-unit id="c1469f4d29b40fb0b7ab86c2c4e92578f7c6eb9f" translate="yes" xml:space="preserve">
          <source>To determine at runtime if this capability has been compiled in your perl, you can check the value of &lt;code&gt;$Config{usesitecustomize}&lt;/code&gt; .</source>
          <target state="translated">この機能がPerlでコンパイルされているかどうかを実行時に判別するには、 &lt;code&gt;$Config{usesitecustomize}&lt;/code&gt; 値を確認できます。</target>
        </trans-unit>
        <trans-unit id="5ce033ec9e41969bd8c16961760514dcb521d365" translate="yes" xml:space="preserve">
          <source>To determine if a module came with your version of Perl, you can install and use the &lt;a href=&quot;module/corelist&quot;&gt;Module::CoreList&lt;/a&gt; module. It has the information about the modules (with their versions) included with each release of Perl.</source>
          <target state="translated">モジュールがPerlのバージョンに付属しているかどうかを確認するには、&lt;a href=&quot;module/corelist&quot;&gt;Module :: CoreList&lt;/a&gt;モジュールをインストールして使用できます。Perlの各リリースに含まれているモジュール（およびそのバージョン）に関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="a3640814314afd9f7ac9d11a68cf889d6f47fec5" translate="yes" xml:space="preserve">
          <source>To determine if a string is in Unicode, use:</source>
          <target state="translated">文字列が Unicode かどうかを判断するには、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="bca0ec2b6522f981d9c11831a03f1f68a8800f50" translate="yes" xml:space="preserve">
          <source>To determine if an SV is a reference, you can use the following macro:</source>
          <target state="translated">SV が参照であるかどうかを判断するには、以下のマクロを使用します。</target>
        </trans-unit>
        <trans-unit id="c9936c817f7d3f0a431d8c4cc266d4265437482c" translate="yes" xml:space="preserve">
          <source>To determine if you are running under ASCII or EBCDIC, you can use the return value of &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; to test one or more character values. For example:</source>
          <target state="translated">ASCIIとEBCDICのどちらで実行しているかを判別するには、 &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; の戻り値を使用して、1つ以上の文字値をテストできます。例えば：</target>
        </trans-unit>
        <trans-unit id="86e75dff4a5cb692b3db4e186257a30b993c598a" translate="yes" xml:space="preserve">
          <source>To determine whether or not perl was built under an EBCDIC code page you can use the Config module like so:</source>
          <target state="translated">perlがEBCDICコードページの下でビルドされたかどうかを判断するには、次のようにConfigモジュールを使用することができます。</target>
        </trans-unit>
        <trans-unit id="c7ca989a561cc6bb21cb242f3f9a4867fcc2a0a2" translate="yes" xml:space="preserve">
          <source>To determine which category a specific warning has been assigned to see &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;を表示するために特定の警告が割り当てられているカテゴリを特定するには。</target>
        </trans-unit>
        <trans-unit id="d2650be423c3da22a5978107c38e624c70d0e420" translate="yes" xml:space="preserve">
          <source>To die with a simple string message, the &lt;a href=&quot;#croak&quot;&gt;croak&lt;/a&gt; function may be more convenient.</source>
          <target state="translated">単純な文字列メッセージで死ぬには、&lt;a href=&quot;#croak&quot;&gt;クローク&lt;/a&gt;機能の方が便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="347758299b3b52a08c513c37128e636634230c65" translate="yes" xml:space="preserve">
          <source>To disable prototypes:</source>
          <target state="translated">プロトタイプを無効にする。</target>
        </trans-unit>
        <trans-unit id="5d0844b4d1a693267fe5fcf752c200ff27d0a20a" translate="yes" xml:space="preserve">
          <source>To disable scoping:</source>
          <target state="translated">スコーピングを無効にします。</target>
        </trans-unit>
        <trans-unit id="6a2e4cf0ee9b26b39ec068b4b4c9bcaa2ebda9e0" translate="yes" xml:space="preserve">
          <source>To disable this check, set this variable to &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">このチェックを無効にするには、この変数を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="b80cbb6c9445e33c66e64e8bbc664c2dc7cb143d" translate="yes" xml:space="preserve">
          <source>To disable this default safe mode, set these values to something higher than 0. At a level of 1, you get backtraces upon receiving any kind of warning (this is often annoying) or exception (this is often valuable). Unfortunately, the debugger cannot discern fatal exceptions from non-fatal ones. If &lt;code&gt;dieLevel&lt;/code&gt; is even 1, then your non-fatal exceptions are also traced and unceremoniously altered if they came from &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval'ed&lt;/a&gt;&lt;/code&gt; strings or from any kind of &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; within modules you're attempting to load. If &lt;code&gt;dieLevel&lt;/code&gt; is 2, the debugger doesn't care where they came from: It usurps your exception handler and prints out a trace, then modifies all exceptions with its own embellishments. This may perhaps be useful for some tracing purposes, but tends to hopelessly destroy any program that takes its exception handling seriously.</source>
          <target state="translated">このデフォルトのセーフモードを無効にするには、これらの値を0より大きい値に設定します。レベル1で、あらゆる種類の警告（これは多くの場合煩わしいです）または例外（これは多くの場合貴重です）を受信するとバックトレースを取得します。残念ながら、デバッガは致命的でない例外と致命的でないものを区別できません。 &lt;code&gt;dieLevel&lt;/code&gt; が1の場合でも、致命的でない例外はトレースされ、ロードしようとしているモジュール内の &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; された文字列または任意の種類のevalからのものである場合は、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval'ed&lt;/a&gt;&lt;/code&gt; 変更されます。 &lt;code&gt;dieLevel&lt;/code&gt; の場合2の場合、デバッガーはそれらがどこから来たのかを気にしません。例外ハンドラーを奪い、トレースを出力してから、独自の装飾ですべての例外を変更します。これはおそらくトレースの目的には役立つかもしれませんが、例外処理を真剣に受け止めるプログラムを絶望的に破壊する傾向があります。</target>
        </trans-unit>
        <trans-unit id="8d156c08336acd4fd9a2800ec24f479a8112dea4" translate="yes" xml:space="preserve">
          <source>To disable version checking:</source>
          <target state="translated">バージョンチェックを無効にするには</target>
        </trans-unit>
        <trans-unit id="738a71c259ac0a8afb90292476b05521cb3a2b41" translate="yes" xml:space="preserve">
          <source>To disallow the use of, for example, &lt;code&gt;LWP&lt;/code&gt; and &lt;code&gt;Net::FTP&lt;/code&gt; , you could set $File::Fetch::BLACKLIST to:</source>
          <target state="translated">たとえば、 &lt;code&gt;LWP&lt;/code&gt; や &lt;code&gt;Net::FTP&lt;/code&gt; の使用を禁止するには、$ File :: Fetch :: BLACKLISTを次のように設定します。</target>
        </trans-unit>
        <trans-unit id="80dd5fada40953f3424fd8a183a453e068557bb1" translate="yes" xml:space="preserve">
          <source>To discover what type of value the reference refers to, use the following macro and then check the return value.</source>
          <target state="translated">参照が参照している値のタイプを検出するには、以下のマクロを使用して、戻り値を確認します。</target>
        </trans-unit>
        <trans-unit id="8fc94d5f52eb1139b287df828008badfb6c3e089" translate="yes" xml:space="preserve">
          <source>To display and change the libnet configuration run the libnetcfg command.</source>
          <target state="translated">libnetの設定を表示・変更するには、libnetcfgコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="60ed656a96349b78cdba5a83471f5324d8dd1e87" translate="yes" xml:space="preserve">
          <source>To display the results you use the</source>
          <target state="translated">結果を表示するには</target>
        </trans-unit>
        <trans-unit id="ad781551179d37e74d6f0377992b51ea7bdaace0" translate="yes" xml:space="preserve">
          <source>To do it correctly, you can use one of the &lt;code&gt;Date&lt;/code&gt; modules since they work with calendars instead of times. The &lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt; module makes it simple, and give you the same time of day, only the day before, despite daylight saving time changes:</source>
          <target state="translated">それを正しく行うには、 &lt;code&gt;Date&lt;/code&gt; モジュールの1つを使用できます。これらは時間ではなくカレンダーで機能するためです。&lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt;モジュールは、夏時間の変更にもかかわらず、それが簡単になり、そしてあなたの一日の同じ時間、前だけの日を与えます：</target>
        </trans-unit>
        <trans-unit id="f1d6265a7b40372fb699b2b2f27a1df7b8f80a66" translate="yes" xml:space="preserve">
          <source>To do the equivalent of &lt;code&gt;cp -R&lt;/code&gt; (i.e. copy an entire directory tree recursively) in portable Perl, you'll either need to write something yourself or find a good CPAN module such as &lt;a href=&quot;http://search.cpan.org/perldoc/File::Copy::Recursive&quot;&gt;File::Copy::Recursive&lt;/a&gt;.</source>
          <target state="translated">ポータブルPerl で &lt;code&gt;cp -R&lt;/code&gt; （つまり、ディレクトリツリー全体を再帰的にコピーする）と同等のことを行うには、自分で何かを書くか、&lt;a href=&quot;http://search.cpan.org/perldoc/File::Copy::Recursive&quot;&gt;File :: Copy :: Recursive&lt;/a&gt;などの優れたCPANモジュールを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="800198c8e77892b2ea37f8a62c33fb5be9843971" translate="yes" xml:space="preserve">
          <source>To do this we need to produce a program by parsing the text. We then need to execute the program to find the point in the string that matches. And we need to do the whole thing efficiently.</source>
          <target state="translated">これを行うには、テキストを解析してプログラムを作成する必要があります。そして、そのプログラムを実行して、文字列の中から一致するポイントを見つける必要があります。そして、全体を効率的に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="b3b368d6bf057c7196323316138f2bb623cf857e" translate="yes" xml:space="preserve">
          <source>To do this you need to store a copy of the object returned from the tie.</source>
          <target state="translated">そのためには、タイから返されたオブジェクトのコピーを保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="16944f02408f01608a70adc6c00bddd6a6f21c5d" translate="yes" xml:space="preserve">
          <source>To do this, declare the XSUB as</source>
          <target state="translated">これを行うには、XSUB を</target>
        </trans-unit>
        <trans-unit id="9ba25feb906f9144f135e56832aaff07eb5da168" translate="yes" xml:space="preserve">
          <source>To do this, simple invoke the redispatch as:</source>
          <target state="translated">これを行うには、単純に redispatch を as として呼び出します。</target>
        </trans-unit>
        <trans-unit id="2b963497fc0bd80a2ad6cd72e920bb19d3acf535" translate="yes" xml:space="preserve">
          <source>To do this, you can either extend an existing &lt;a href=&quot;http://search.cpan.org/perldoc/TAP::Formatter&quot;&gt;TAP::Formatter&lt;/a&gt;, or write your own. Writing formatters are a bit more involved than writing a</source>
          <target state="translated">これを行うには、既存の&lt;a href=&quot;http://search.cpan.org/perldoc/TAP::Formatter&quot;&gt;TAP :: Formatterを&lt;/a&gt;拡張するか、独自のものを作成します。フォーマッタを書くことは、書くことよりも少し複雑です</target>
        </trans-unit>
        <trans-unit id="4d922248445626035fad600ec3b500e3d07eeccb" translate="yes" xml:space="preserve">
          <source>To do this, you can either extend an existing &lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;, or write your own. It's a pretty simple API, and they can be loaded and configured using the &lt;code&gt;sources&lt;/code&gt; parameter to &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</source>
          <target state="translated">これを行うには、既存の&lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP :: Parser :: SourceHandlerを&lt;/a&gt;拡張するか、独自のものを作成します。これはかなり単純なAPIであり、 &lt;code&gt;sources&lt;/code&gt; パラメーターを使用して&lt;a href=&quot;#new&quot;&gt;newに&lt;/a&gt;ロードおよび構成できます。</target>
        </trans-unit>
        <trans-unit id="c9af8e6fc2b2d44ed39a720480b5eca952598206" translate="yes" xml:space="preserve">
          <source>To do this, you have to parse out each word in the input stream. We'll pretend that by word you mean chunk of alphabetics, hyphens, or apostrophes, rather than the non-whitespace chunk idea of a word given in the previous question:</source>
          <target state="translated">これを行うには、入力ストリームの各単語を解析しなければなりません。単語とは、前の質問で与えられた単語の非空白の塊のアイデアではなく、アルファベット、ハイフン、アポストロフィーの塊を意味していると仮定してみましょう。</target>
        </trans-unit>
        <trans-unit id="a594dc0644909bfef7173f1f8eb29922809128db" translate="yes" xml:space="preserve">
          <source>To do what you meant properly, you must write:</source>
          <target state="translated">きちんと意味することをするためには、書かなければなりません。</target>
        </trans-unit>
        <trans-unit id="d3e2fbf11b8c81738d92b26c858673a8798bed9d" translate="yes" xml:space="preserve">
          <source>To emphasize that you are operating only on ASCII characters, you can append &lt;code&gt;_A&lt;/code&gt; to each of the macros in the ASCII column: &lt;code&gt;isALPHA_A&lt;/code&gt; , &lt;code&gt;isDIGIT_A&lt;/code&gt; , and so on.</source>
          <target state="translated">ASCII文字のみを操作していることを強調するために、ASCII列の各マクロ（ &lt;code&gt;isALPHA_A&lt;/code&gt; 、 &lt;code&gt;isDIGIT_A&lt;/code&gt; など）に &lt;code&gt;_A&lt;/code&gt; を追加できます。</target>
        </trans-unit>
        <trans-unit id="e2f50143516f5760cd1414be18dcb711d9b307dd" translate="yes" xml:space="preserve">
          <source>To enable colouring from the command line, you can use the &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Builder::Tester::Color&quot;&gt;Text::Builder::Tester::Color&lt;/a&gt; module like so:</source>
          <target state="translated">コマンドラインから色付けを有効にするには、&lt;a href=&quot;http://search.cpan.org/perldoc/Text::Builder::Tester::Color&quot;&gt;Text :: Builder :: Tester :: Color&lt;/a&gt;モジュールを次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="b01967f773567b844b2b023b2a86bde4df70fc34" translate="yes" xml:space="preserve">
          <source>To enable prototypes:</source>
          <target state="translated">プロトタイプを可能にするために</target>
        </trans-unit>
        <trans-unit id="5ccde66aca7ada9c8fed76ada1d4a0446a4f8743" translate="yes" xml:space="preserve">
          <source>To enable scoping:</source>
          <target state="translated">スコーピングを有効にする。</target>
        </trans-unit>
        <trans-unit id="1484f429016f98a746a3ab26c198f24bb67adaaa" translate="yes" xml:space="preserve">
          <source>To enable version checking:</source>
          <target state="translated">バージョンチェックを有効にします。</target>
        </trans-unit>
        <trans-unit id="270b403e8cadfb40d1d97c0de3bf7642f9c98fb6" translate="yes" xml:space="preserve">
          <source>To encode a string yourself, use the &lt;a href=&quot;http://search.cpan.org/perldoc/URI::Escape&quot;&gt;URI::Escape&lt;/a&gt; module. The &lt;code&gt;uri_escape&lt;/code&gt; function returns the escaped string:</source>
          <target state="translated">文字列を自分でエンコードするには、&lt;a href=&quot;http://search.cpan.org/perldoc/URI::Escape&quot;&gt;URI :: Escape&lt;/a&gt;モジュールを使用します。 &lt;code&gt;uri_escape&lt;/code&gt; の機能は、エスケープされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="197383dea9cb9c2b7e4139f047ab7802bc1168de" translate="yes" xml:space="preserve">
          <source>To end a Pod block, use a blank line, then a line beginning with &quot;=cut&quot;, and a blank line after it. This lets Perl (and the Pod formatter) know that this is where Perl code is resuming. (The blank line before the &quot;=cut&quot; is not technically necessary, but many older Pod processors require it.)</source>
          <target state="translated">Podブロックを終了させるには、空白行を使用し、&quot;=cut &quot;で始まる行を使用し、その後に空白行を使用します。これにより、Perl (とPodフォーマッタ)は、ここでPerlのコードが再開されることを知ることができます。(「=cut」の前の空白行は技術的には必要ありませんが、多くの古いPodプロセッサでは必要とされています)</target>
        </trans-unit>
        <trans-unit id="0ae4a1a4ec134ed8922ee208a028b2c3245ebe13" translate="yes" xml:space="preserve">
          <source>To enforce scalar context in this particular case, however, you need merely omit the parentheses:</source>
          <target state="translated">しかし、この特定のケースでスカラコンテキストを強制するには、単に括弧を省略する必要があります。</target>
        </trans-unit>
        <trans-unit id="5528aa31607b22ee5ba7b25dc9ad20fd957a80a3" translate="yes" xml:space="preserve">
          <source>To ensure your Perl programs can see these newly installed modules, set your &lt;code&gt;PERL5LIB&lt;/code&gt; environment variable to</source>
          <target state="translated">Perlプログラムがこれらの新しくインストールされたモジュールを &lt;code&gt;PERL5LIB&lt;/code&gt; できるようにするには、PERL5LIB環境変数を次のように設定します。</target>
        </trans-unit>
        <trans-unit id="7aa8a6d9b5359d93562881107c4eb01ac8b79421" translate="yes" xml:space="preserve">
          <source>To escape the special meaning of &lt;code&gt;.&lt;/code&gt;, we use &lt;code&gt;\Q&lt;/code&gt; :</source>
          <target state="translated">の特別な意味をエスケープし &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;\Q&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1f8b13457bc503e2905034bca18967c492e5be31" translate="yes" xml:space="preserve">
          <source>To exchange a command's STDOUT and STDERR in order to capture the STDERR but leave its STDOUT to come out our old STDERR:</source>
          <target state="translated">コマンドのSTDOUTとSTDERRを交換してSTDERRをキャプチャするには、STDOUTを残して古いSTDERRが出てくるようにします。</target>
        </trans-unit>
        <trans-unit id="f19cbea3f43d914ef5dccac2f20ddb20b0a670bb" translate="yes" xml:space="preserve">
          <source>To exchange a command's STDOUT and STDERR in order to capture the STDERR but leave its STDOUT to come out the old STDERR:</source>
          <target state="translated">コマンドのSTDOUTとSTDERRを交換してSTDERRをキャプチャし、そのSTDOUTを残して古いSTDERRが出てくるようにします。</target>
        </trans-unit>
        <trans-unit id="1e299ba0ecd4337d918ed97321e55b553fe7e0a0" translate="yes" xml:space="preserve">
          <source>To exercise the various implementations the script &lt;a href=&quot;#Example-2&quot;&gt;below&lt;/a&gt; can be used.</source>
          <target state="translated">さまざまな実装を実行するには、&lt;a href=&quot;#Example-2&quot;&gt;以下&lt;/a&gt;のスクリプトを使用できます。</target>
        </trans-unit>
        <trans-unit id="746a283f2992b56a8070a48ac33ef2cb2b8ab7fb" translate="yes" xml:space="preserve">
          <source>To explain them each in detail:</source>
          <target state="translated">それぞれを詳しく説明すること。</target>
        </trans-unit>
        <trans-unit id="337ab3fc6e23ee2083bb48006f6530a512cb7265" translate="yes" xml:space="preserve">
          <source>To explicitly turn off a &quot;FATAL&quot; warning you just disable the warning it is associated with. So, for example, to disable the &quot;void&quot; warning in the example above, either of these will do the trick:</source>
          <target state="translated">FATAL &quot;警告を明示的に無効にするには、関連する警告を無効にするだけです。例えば、上の例の &quot;void&quot; 警告を無効にするには、以下のいずれかの方法が有効です。</target>
        </trans-unit>
        <trans-unit id="d8cfaf574ce10955d44800ed1fb485165bb12d03" translate="yes" xml:space="preserve">
          <source>To extract a comma-delimited list of numbers, use</source>
          <target state="translated">カンマで区切られた数値のリストを抽出するには</target>
        </trans-unit>
        <trans-unit id="d086f02213d0494d6662b67a4783c59065f8a170" translate="yes" xml:space="preserve">
          <source>To extract an ASCII tar archive on BS2000 POSIX you need an ASCII filesystem (we used the mountpoint /usr/local/ascii for this). Now you extract the archive in the ASCII filesystem without I/O-conversion:</source>
          <target state="translated">BS2000 POSIX 上で ASCII tar アーカイブを展開するには、ASCII ファイルシステムが必要です (このためにマウントポイント /usr/local/ascii を使用しています)。これで、I/O変換なしでASCIIファイルシステムにアーカイブを展開することができます。</target>
        </trans-unit>
        <trans-unit id="c062b7c2a495ae2a5b72a1379e8b1a41239ea1d2" translate="yes" xml:space="preserve">
          <source>To find how to use this module in detail, see &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">このモジュールの使用方法の詳細については、「&lt;a href=&quot;../encode&quot;&gt;エンコード&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b3930f92a272e8f2e02166feb6d52740dba8a2a7" translate="yes" xml:space="preserve">
          <source>To find out</source>
          <target state="translated">調べるには</target>
        </trans-unit>
        <trans-unit id="8b9ad1d9bf5e88e70343c9bc73bc8f95e823175e" translate="yes" xml:space="preserve">
          <source>To find out how to use this module in detail, see &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">このモジュールの使用方法の詳細については、「&lt;a href=&quot;../encode&quot;&gt;エンコード&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8814e60c44afe937889a748a7dc5d647bd329617" translate="yes" xml:space="preserve">
          <source>To find out in detail which encodings are supported by this package, see &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt;.</source>
          <target state="translated">このパッケージでサポートされているエンコーディングの詳細については、&lt;a href=&quot;encode/supported&quot;&gt;Encode :: Supportedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7957585a16fb8e9f58abff4512426bfd62b9e660" translate="yes" xml:space="preserve">
          <source>To find out where a module's source code is located, use</source>
          <target state="translated">モジュールのソースコードがどこにあるかを調べるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="714fa5ade47f6c038c4e5047b338fbf758e5ccc9" translate="yes" xml:space="preserve">
          <source>To find out whether a given string is a valid non-zero number, it's sometimes enough to test it against both numeric 0 and also lexical &quot;0&quot; (although this will cause noises if warnings are on). That's because strings that aren't numbers count as 0, just as they do in &lt;b&gt;awk&lt;/b&gt;:</source>
          <target state="translated">特定の文字列が有効なゼロ以外の数値であるかどうかを確認するには、数値0と字句「0」の両方に対してテストするだけで十分な場合があります（ただし、警告がオンの場合、これによりノイズが発生します）。これは、&lt;b&gt;awkと&lt;/b&gt;同様に、数値ではない文字列は0としてカウントされるためです。</target>
        </trans-unit>
        <trans-unit id="b365160bfd575c380666252714a7e2191298f003" translate="yes" xml:space="preserve">
          <source>To find out which character encodings your Perl supports, run:</source>
          <target state="translated">お使いのPerlがサポートしている文字エンコーディングを調べるには、実行してください。</target>
        </trans-unit>
        <trans-unit id="8d0d1d4b42258f044bb86db954a57628e8eecd09" translate="yes" xml:space="preserve">
          <source>To find something between two single characters, a pattern like &lt;code&gt;/x([^x]*)x/&lt;/code&gt; will get the intervening bits in $1. For multiple ones, then something more like &lt;code&gt;/alpha(.*?)omega/&lt;/code&gt; would be needed. For nested patterns and/or balanced expressions, see the so-called &lt;a href=&quot;perlre#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)&quot;&gt;(?PARNO)&lt;/a&gt; construct (available since perl 5.10). The CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt; can help to build such regular expressions (see in particular &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common::balanced&quot;&gt;Regexp::Common::balanced&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common::delimited&quot;&gt;Regexp::Common::delimited&lt;/a&gt;).</source>
          <target state="translated">2つの単一の文字の間で何かを見つけるために、 &lt;code&gt;/x([^x]*)x/&lt;/code&gt; ようなパターンは、$ 1に介在するビットを取得します。複数の場合は、 &lt;code&gt;/alpha(.*?)omega/&lt;/code&gt; 。*？）omega /のようなものが必要になります。ネストされたパターンやバランスの取れた式については、いわゆる&lt;a href=&quot;perlre#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)&quot;&gt;（？PARNO）&lt;/a&gt;構成（perl 5.10以降で利用可能）を参照してください。 CPANモジュール&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp :: Common&lt;/a&gt;は、このような正規表現の構築に役立ちます（特に&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common::balanced&quot;&gt;Regexp :: Common :: balanced&lt;/a&gt;および&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common::delimited&quot;&gt;Regexp :: Common :: delimitedを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c8886406693c43465a74828d32fde569bd987324" translate="yes" xml:space="preserve">
          <source>To find the first array element which satisfies a condition, you can use the &lt;code&gt;first()&lt;/code&gt; function in the &lt;a href=&quot;list/util&quot;&gt;List::Util&lt;/a&gt; module, which comes with Perl 5.8. This example finds the first element that contains &quot;Perl&quot;.</source>
          <target state="translated">条件を満たす最初の配列要素を見つけるには、Perl 5.8に付属する&lt;a href=&quot;list/util&quot;&gt;List :: Util&lt;/a&gt;モジュールで &lt;code&gt;first()&lt;/code&gt; 関数を使用できます。この例では、「Perl」を含む最初の要素を検索します。</target>
        </trans-unit>
        <trans-unit id="f1ca27f7c9ffaf0873146b4d5569bf1f7dd85f24" translate="yes" xml:space="preserve">
          <source>To find the package you are currently in, use the special literal &lt;code&gt;__PACKAGE__&lt;/code&gt; , as documented in &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt;. You can only use the special literals as separate tokens, so you can't interpolate them into strings like you can with variables:</source>
          <target state="translated">現在使用しているパッケージを見つけるには、 &lt;code&gt;__PACKAGE__&lt;/code&gt; に記載されている特別なリテラル__PACKAGE__を使用し&lt;a href=&quot;perldata&quot;&gt;ます&lt;/a&gt;。特別なリテラルは個別のトークンとしてのみ使用できるため、変数のように文字列に補間することはできません。</target>
        </trans-unit>
        <trans-unit id="cffcf6d33c52e5caff06e5888e1b1afff8c79cd9" translate="yes" xml:space="preserve">
          <source>To find the synonyms for single-forms, such as &lt;code&gt;\p{Any}&lt;/code&gt; , use &lt;a href=&quot;#prop_aliases()&quot;&gt;prop_aliases()&lt;/a&gt; instead.</source>
          <target state="translated">などの単一形、同義語を見つけるために、 &lt;code&gt;\p{Any}&lt;/code&gt; 、使用&lt;a href=&quot;#prop_aliases()&quot;&gt;prop_aliases（）&lt;/a&gt;を代わりに。</target>
        </trans-unit>
        <trans-unit id="2b4474f5909a02cbe785465728ea131216f023c4" translate="yes" xml:space="preserve">
          <source>To find your local Perl Mongers (or PM as they're commonly abbreviated) group check the international Perl Mongers directory at &lt;a href=&quot;http://www.pm.org/&quot;&gt;http://www.pm.org/&lt;/a&gt;.</source>
          <target state="translated">ローカルのPerl Mongers（または略してPM）グループを見つけるには、&lt;a href=&quot;http://www.pm.org/&quot;&gt;http：&lt;/a&gt; //www.pm.org/にある国際的なPerl Mongersディレクトリを確認してください。</target>
        </trans-unit>
        <trans-unit id="51fa9c8218dc025937f10203b9150ec3a3d4872c" translate="yes" xml:space="preserve">
          <source>To fire up the debugger, type</source>
          <target state="translated">デバッガを起動するには</target>
        </trans-unit>
        <trans-unit id="5061c6729e5e674eb297e87fb65b6e686195258a" translate="yes" xml:space="preserve">
          <source>To fix by applying one, as it were. In the realm of hackerdom, a listing of the differences between two versions of a program as might be applied by the &lt;b&gt;patch&lt;/b&gt;(1) program when you want to fix a bug or upgrade your old version.</source>
          <target state="translated">そのまま適用して修正します。ハッカーダムの領域で、バグを修正したり古いバージョンをアップグレードしたりするときに&lt;b&gt;パッチ&lt;/b&gt;（1）プログラムによって適用される可能性がある、プログラムの2つのバージョンの違いのリスト。</target>
        </trans-unit>
        <trans-unit id="baa8da9e4b55dce6e5a8c524e072f785277c31e7" translate="yes" xml:space="preserve">
          <source>To fix this, some people formed Unicode, Inc. and produced a new character set containing all the characters you can possibly think of and more. There are several ways of representing these characters, and the one Perl uses is called UTF-8. UTF-8 uses a variable number of bytes to represent a character. You can learn more about Unicode and Perl's Unicode model in &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">これを修正するために、Unicode、Inc.を設立し、考えられるすべての文字を含む新しい文字セットを作成した人もいます。これらの文字を表す方法はいくつかあり、Perlが使用する方法の1つはUTF-8と呼ばれます。UTF-8は、可変数のバイトを使用して文字を表します。UnicodeとPerlのUnicodeモデルの詳細については、&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="a4f76f5a03185d9e714674242e64dfcf1b7f20c4" translate="yes" xml:space="preserve">
          <source>To forbid ASCII/non-ASCII matches (like &quot;k&quot; with &lt;code&gt;\N{KELVIN SIGN}&lt;/code&gt; ), specify the &quot;a&quot; twice, for example &lt;code&gt;/aai&lt;/code&gt; or &lt;code&gt;/aia&lt;/code&gt; . (The first occurrence of &quot;a&quot; restricts the &lt;code&gt;\d&lt;/code&gt; , etc., and the second occurrence adds the &lt;code&gt;/i&lt;/code&gt; restrictions.) But, note that code points outside the ASCII range will use Unicode rules for &lt;code&gt;/i&lt;/code&gt; matching, so the modifier doesn't really restrict things to just ASCII; it just forbids the intermixing of ASCII and non-ASCII.</source>
          <target state="translated">ASCII /非ASCIIの一致（ &lt;code&gt;\N{KELVIN SIGN}&lt;/code&gt; した &quot;k&quot;など）を禁止するには、 &quot;a&quot;を2回指定します（例： &lt;code&gt;/aai&lt;/code&gt; または &lt;code&gt;/aia&lt;/code&gt; )。 （ &quot;a&quot;の最初の出現は &lt;code&gt;\d&lt;/code&gt; などを制限し、2番目の出現は &lt;code&gt;/i&lt;/code&gt; 制限を追加します。）ただし、ASCII範囲外のコードポイントは &lt;code&gt;/i&lt;/code&gt; マッチングにUnicodeルールを使用するため、修飾子は実際には、ASCIIだけに制限するわけではありません。 ASCIIと非ASCIIの混在を禁止するだけです。</target>
        </trans-unit>
        <trans-unit id="bc2a4c58af25cd402ee36a19ab3abed7cc44071e" translate="yes" xml:space="preserve">
          <source>To force interpretation as a subroutine call, either put an ampersand before the subroutine name, or qualify the name with its package. Alternatively, you can import the subroutine (or pretend that it's imported with the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; pragma).</source>
          <target state="translated">解釈をサブルーチン呼び出しとして強制するには、サブルーチン名の前にアンパサンドを置くか、名前をそのパッケージで修飾します。あるいは、サブルーチンをインポートすることもできます（または、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; プラグマでインポートされたように見せかけます）。</target>
        </trans-unit>
        <trans-unit id="457433c503b0c64ab575af65985486ef91bd670a" translate="yes" xml:space="preserve">
          <source>To force multiple data values into an SV, you must do two things: use the &lt;code&gt;sv_set*v&lt;/code&gt; routines to add the additional scalar type, then set a flag so that Perl will believe it contains more than one type of data. The four macros to set the flags are:</source>
          <target state="translated">複数のデータ値をSVに強制するには、2つのことを行う必要があります &lt;code&gt;sv_set*v&lt;/code&gt; ルーチンを使用してスカラー型を追加し、Perlが複数の型のデータを含むと信じるようにフラグを設定します。フラグを設定する4つのマクロは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e794c449edc7f65a40ec8153981b15f3f2a9b550" translate="yes" xml:space="preserve">
          <source>To free an SV that you've created, call &lt;code&gt;SvREFCNT_dec(SV*)&lt;/code&gt; . Normally this call is not necessary (see &lt;a href=&quot;#Reference-Counts-and-Mortality&quot;&gt;Reference Counts and Mortality&lt;/a&gt;).</source>
          <target state="translated">作成したSVを解放するには、 &lt;code&gt;SvREFCNT_dec(SV*)&lt;/code&gt; 呼び出します。通常、この呼び出しは必要ありません（参照&lt;a href=&quot;#Reference-Counts-and-Mortality&quot;&gt;カウントと死亡率&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="2d1737256e6e8a51ce74a94d85a078c8dd0ab640" translate="yes" xml:space="preserve">
          <source>To gain access to symbols that are exported from another module. See &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo;.</source>
          <target state="translated">別のモジュールからエクスポートされたシンボルにアクセスするため。ラクダの第27章「関数」の &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="dcb6076af26c9d87b4c92a15d546b5cbbac01e84" translate="yes" xml:space="preserve">
          <source>To generate just the stubs:</source>
          <target state="translated">スタブだけを生成するために</target>
        </trans-unit>
        <trans-unit id="535754fb5bff8ed1b444cf7b15654e6f3c7d7a5c" translate="yes" xml:space="preserve">
          <source>To get a Math::BigFloat you either need to call the operation manually, make sure the operands are already of the proper type or casted to that type via Math::BigFloat-&amp;gt;new():</source>
          <target state="translated">Math :: BigFloatを取得するには、操作を手動で呼び出す必要があります。オペランドがすでに適切な型であるか、Math :: BigFloat-&amp;gt; new（）を介してその型にキャストされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="482a14b92894717900240dda3533f7f04de8b428" translate="yes" xml:space="preserve">
          <source>To get a binary stream an alternate method is to use:</source>
          <target state="translated">バイナリストリームを取得するには、別の方法を使用します。</target>
        </trans-unit>
        <trans-unit id="342926328b3f4e6b863f62ddbfc63ea7184c5807" translate="yes" xml:space="preserve">
          <source>To get a full list of the available sync points:</source>
          <target state="translated">利用可能な同期ポイントの完全なリストを取得するには、以下の手順に従います。</target>
        </trans-unit>
        <trans-unit id="4a7e3e5cefb00444495078948120515244d3f977" translate="yes" xml:space="preserve">
          <source>To get a random number between two values, you can use the &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand()&lt;/a&gt;&lt;/code&gt; built-in to get a random number between 0 and 1. From there, you shift that into the range that you want.</source>
          <target state="translated">2つの値の間の乱数を取得するには、組み込みの &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand()&lt;/a&gt;&lt;/code&gt; を使用して0から1の間の乱数を取得します。そこから、希望する範囲にシフトします。</target>
        </trans-unit>
        <trans-unit id="503a91db6b0ee3a6aaf3799cd04cbf8c2160ee5a" translate="yes" xml:space="preserve">
          <source>To get a real at or caret into the field, do this:</source>
          <target state="translated">本物のアットやキャレットをフィールドに入れるには、これをやりましょう。</target>
        </trans-unit>
        <trans-unit id="6546b16387b88ec0ca99336cb1d0e013e452d98c" translate="yes" xml:space="preserve">
          <source>To get all the output from your error log, and not miss any messages via helpful operating system buffering, insert a line like this, at the start of your script:</source>
          <target state="translated">エラーログからすべての出力を取得し、有用なオペレーティングシステムのバッファリングによってメッセージを見逃さないようにするには、スクリプトの最初に次のような行を挿入します。</target>
        </trans-unit>
        <trans-unit id="2baf587b399a3c62f41dfcb4f6a76fcf67a09c4b" translate="yes" xml:space="preserve">
          <source>To get an &lt;code&gt;HMQ&lt;/code&gt; , the extension should call &lt;code&gt;hmq = perl_hmq_GET(serve)&lt;/code&gt; in C. After this call is performed, &lt;code&gt;hmq&lt;/code&gt; may be accessed as &lt;code&gt;Perl_hmq&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;HMQ&lt;/code&gt; を取得するには、拡張機能はCで &lt;code&gt;hmq = perl_hmq_GET(serve)&lt;/code&gt; を呼び出す必要があります。この呼び出しが実行された後、 &lt;code&gt;hmq&lt;/code&gt; は &lt;code&gt;Perl_hmq&lt;/code&gt; としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f4fbf979e25bdf63e3a72510bfcc0bebacbf8c90" translate="yes" xml:space="preserve">
          <source>To get an unbuffered stream specify an unbuffered layer (e.g. &lt;code&gt;:unix&lt;/code&gt; ) in the open call:</source>
          <target state="translated">バッファーされていないストリームを取得するには、open呼び出しでバッファーされていないレイヤー（例 &lt;code&gt;:unix&lt;/code&gt; ）を指定します。</target>
        </trans-unit>
        <trans-unit id="4f25553ad923c6b2f304e605c8fcb2af6b398a17" translate="yes" xml:space="preserve">
          <source>To get around the error, place the word &lt;code&gt;DB_File&lt;/code&gt; in either single or double quotes, like this:</source>
          <target state="translated">エラーを回避するには、次のように、単語 &lt;code&gt;DB_File&lt;/code&gt; を一重引用符または二重引用符で囲みます。</target>
        </trans-unit>
        <trans-unit id="e7cc39162825d124202c37827aea79596926f995" translate="yes" xml:space="preserve">
          <source>To get around the security problem, I could also pull the values from a hash instead of evaluating variable names. Using a single &lt;code&gt;/e&lt;/code&gt;, I can check the hash to ensure the value exists, and if it doesn't, I can replace the missing value with a marker, in this case &lt;code&gt;???&lt;/code&gt; to signal that I missed something:</source>
          <target state="translated">セキュリティ問題を回避するために、変数名を評価する代わりに、ハッシュから値をプルすることもできます。単一の &lt;code&gt;/e&lt;/code&gt; を使用して、ハッシュをチェックして値が存在することを確認できます。存在しない場合は、不足している値をマーカーで置き換えることができます。この場合は &lt;code&gt;???&lt;/code&gt; 私が何かを逃したことを知らせるために：</target>
        </trans-unit>
        <trans-unit id="7daccee0149b6b5c023c3105df2756ca16d7041c" translate="yes" xml:space="preserve">
          <source>To get around these problems it is necessary to take a full copy of the SV. The code below shows &lt;code&gt;SaveSub2&lt;/code&gt; modified to do that.</source>
          <target state="translated">これらの問題を回避するには、SVの完全なコピーを作成する必要があります。以下のコードは、そのために変更された &lt;code&gt;SaveSub2&lt;/code&gt; を示しています。</target>
        </trans-unit>
        <trans-unit id="e5e782973aff491dec9c851f1733c85508f6c14a" translate="yes" xml:space="preserve">
          <source>To get around this, either upgrade to Perl v5.6.0 or later, do the glob yourself with readdir() and patterns, or use a module like &lt;a href=&quot;file/glob&quot;&gt;File::Glob&lt;/a&gt;, one that doesn't use the shell to do globbing.</source>
          <target state="translated">これを回避するには、Perl v5.6.0以降にアップグレードするか、readdir（）とパターンを使用して自分でグロブを行うか、シェルを使用してグロビングを行わない&lt;a href=&quot;file/glob&quot;&gt;File :: Globの&lt;/a&gt;ようなモジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="f6d7c7ba0c3680f1bdd16d6aa20e16ef63f21df2" translate="yes" xml:space="preserve">
          <source>To get around this, you have to unbuffer the output filehandle, in this case, &lt;code&gt;STDOUT&lt;/code&gt; . You can set the special variable &lt;code&gt;$|&lt;/code&gt; to a true value (mnemonic: making your filehandles &quot;piping hot&quot;):</source>
          <target state="translated">これを回避するには、出力ファイルハンドル（この場合は &lt;code&gt;STDOUT&lt;/code&gt; )のバッファを解除する必要があります。特殊変数 &lt;code&gt;$|&lt;/code&gt; 設定できます 真の値に（ニーモニック：ファイルハンドルを「パイプホット」にする）：</target>
        </trans-unit>
        <trans-unit id="a6f34a68c60751e410691b9ae6ddd9f980469ba3" translate="yes" xml:space="preserve">
          <source>To get at hash elements:</source>
          <target state="translated">ハッシュ要素を取得するために</target>
        </trans-unit>
        <trans-unit id="7f878bb059ecb8cc0e6a947e6d0564b810589ae6" translate="yes" xml:space="preserve">
          <source>To get even more recent perl depots for the whole range of HP-UX, visit H.Merijn Brand's site at &lt;a href=&quot;http://mirrors.develooper.com/hpux/#Perl&quot;&gt;http://mirrors.develooper.com/hpux/#Perl&lt;/a&gt;. Carefully read the notes to see if the available versions suit your needs.</source>
          <target state="translated">HP-UXの全範囲の最新のperlデポを入手するには、H.Merijn Brandのサイト（&lt;a href=&quot;http://mirrors.develooper.com/hpux/#Perl&quot;&gt;http://mirrors.develooper.com/hpux/#Perl）に&lt;/a&gt;アクセスしてください。メモを注意深く読み、利用可能なバージョンがニーズに合っているかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="76a1d18d8c0d8e0ec36c61f2ab6bce082fca6308" translate="yes" xml:space="preserve">
          <source>To get finer test reports, call</source>
          <target state="translated">より詳細なテストレポートを入手するには、次の電話番号に連絡してください。</target>
        </trans-unit>
        <trans-unit id="93d274f25d53139f7087deba04a14a18e5484351" translate="yes" xml:space="preserve">
          <source>To get index entries on &lt;code&gt;STDERR&lt;/code&gt; , turn on the F register, as in:</source>
          <target state="translated">&lt;code&gt;STDERR&lt;/code&gt; のインデックスエントリを取得するには、次のようにFレジスタをオンにします。</target>
        </trans-unit>
        <trans-unit id="8b6b89efcdec932089c6c9c0f91cf90b0d1e52b9" translate="yes" xml:space="preserve">
          <source>To get multiple values from an array:</source>
          <target state="translated">配列から複数の値を取得するには</target>
        </trans-unit>
        <trans-unit id="c67d46d6312179612215d6ef23eb3f6db1321700" translate="yes" xml:space="preserve">
          <source>To get platform independent controls, you can use &lt;code&gt;\N{...}&lt;/code&gt; .</source>
          <target state="translated">プラットフォームに依存しないコントロールを取得するには、 &lt;code&gt;\N{...}&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="a965832b8b2f81c82888b8327d5081a21e8081aa" translate="yes" xml:space="preserve">
          <source>To get some interesting statistics, it is recommended that &lt;code&gt;randomize_urllist&lt;/code&gt; be set; this introduces some amount of randomness into the URL selection.</source>
          <target state="translated">興味深い統計を取得するには、 &lt;code&gt;randomize_urllist&lt;/code&gt; を設定することをお勧めします。これにより、URLの選択にある程度のランダムさが導入されます。</target>
        </trans-unit>
        <trans-unit id="42f32ff5f8a54ed95afefa260a5241934e3c3cb8" translate="yes" xml:space="preserve">
          <source>To get somewhat similar but locale-dependent date strings, set up your locale environment variables appropriately (please see &lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt;) and try for example:</source>
          <target state="translated">多少似ているがロケールに依存する日付文字列を取得するには、ロケール環境変数を適切に設定し（&lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください）、次の例を試してください。</target>
        </trans-unit>
        <trans-unit id="ab2c259ec21b8fdc7591d4aa060782af6913d852" translate="yes" xml:space="preserve">
          <source>To get somewhat similar but locale-dependent date strings, set up your locale environment variables appropriately (please see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;) and try for example:</source>
          <target state="translated">多少似ているがロケールに依存する日付文字列を取得するには、ロケール環境変数を適切に設定し（&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください）、次の例を試してください。</target>
        </trans-unit>
        <trans-unit id="c33d002d66788db30ed6cc7efa61fd7b3021f5f2" translate="yes" xml:space="preserve">
          <source>To get the 25 traditional lowercase Greek letters, including both sigmas, you could use this instead:</source>
          <target state="translated">両方のシグマを含む伝統的なギリシャ語の小文字25文字を取得するには、代わりにこれを使用することができます。</target>
        </trans-unit>
        <trans-unit id="6e85259394ca22644c2c269f73c9d0468d9813a0" translate="yes" xml:space="preserve">
          <source>To get the HAB, the extension should call &lt;code&gt;hab = perl_hab_GET()&lt;/code&gt; in C. After this call is performed, &lt;code&gt;hab&lt;/code&gt; may be accessed as &lt;code&gt;Perl_hab&lt;/code&gt; . There is no need to release the HAB after it is used.</source>
          <target state="translated">HABを取得するには、拡張機能はCで &lt;code&gt;hab = perl_hab_GET()&lt;/code&gt; 呼び出す必要があります。この呼び出しが実行された後、 &lt;code&gt;hab&lt;/code&gt; は &lt;code&gt;Perl_hab&lt;/code&gt; としてアクセスできます。使用後にHABを解放する必要はありません。</target>
        </trans-unit>
        <trans-unit id="35604b07a393cc3fdbf315f40abc25e64114d031" translate="yes" xml:space="preserve">
          <source>To get the IP address, you can use the &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname&lt;/a&gt;&lt;/code&gt; built-in function to turn the name into a number. To turn that number into the dotted octet form (a.b.c.d) that most people expect, use the &lt;code&gt;inet_ntoa&lt;/code&gt; function from the &lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt; module, which also comes with perl.</source>
          <target state="translated">IPアドレスを取得するには、 &lt;code&gt;&lt;a href=&quot;functions/gethostbyname&quot;&gt;gethostbyname&lt;/a&gt;&lt;/code&gt; 組み込み関数を使用して、名前を数値に変換できます。その数値を、ほとんどの人が期待するドット付きオクテット形式（abcd）に &lt;code&gt;inet_ntoa&lt;/code&gt; するには、Perlに付属している&lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt;モジュールのinet_ntoa関数を使用します。</target>
        </trans-unit>
        <trans-unit id="aa0526e650783189d8454499d3396cf899e8f521" translate="yes" xml:space="preserve">
          <source>To get the day of year for any date, use &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;'s &lt;code&gt;mktime&lt;/code&gt; to get a time in epoch seconds for the argument to &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">任意の日付の年の日を取得するには、&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;の &lt;code&gt;mktime&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; への引数のエポック秒単位の時間を取得します。</target>
        </trans-unit>
        <trans-unit id="ffadb121be361a5885303dda8c46c6cf80b68bb1" translate="yes" xml:space="preserve">
          <source>To get the last two digits of the year (e.g., &quot;01&quot; in 2001) do:</source>
          <target state="translated">年の最後の2桁を取得するには(例えば、2001年の「01」)を行います。</target>
        </trans-unit>
        <trans-unit id="22228c8d3b8e275582e9f34035469fcccc1c47a6" translate="yes" xml:space="preserve">
          <source>To get the script to work properly and silence the warning make sure there are no valid references to the tied object</source>
          <target state="translated">スクリプトを正常に動作させて警告を出さないようにするには、関連付けられたオブジェクトへの有効な参照がないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="3d2c84cce621656fbbd6db23ecc45f9cb65b75f8" translate="yes" xml:space="preserve">
          <source>To get the stash pointer for a particular package, use the function:</source>
          <target state="translated">特定のパッケージのスタッシュポインタを取得するには、関数を使用します。</target>
        </trans-unit>
        <trans-unit id="1496f65198c7ac994d7422ae9ced83ce54781e58" translate="yes" xml:space="preserve">
          <source>To get things going, note that GBARR/Scalar-List-Utils-1.18.tar.gz is compatible with ancient perls and that File::Temp is listed as a prerequisite but CPAN has reasonable workarounds if it is missing.</source>
          <target state="translated">物事を進めるために、GBARR/Scalar-List-Utils-1.18.tar.gz は古い Perl と互換性があり、File::Temp は前提条件としてリストアップされていますが、CPAN はこれを欠いている場合の合理的な回避策を用意していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0258f9df35378eac84877d3f62eff75269ae164c" translate="yes" xml:space="preserve">
          <source>To get valgrind and for more information see</source>
          <target state="translated">valgrindの取得と詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="969efaa9efa953c87797414000140cc60d6a47f5" translate="yes" xml:space="preserve">
          <source>To go through all of the keys, use the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; function. This extracts all of the keys of the hash and gives them back to you as a list. You can then get the value through the particular key you're processing:</source>
          <target state="translated">すべてのキーを確認するには、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 関数を使用します。これにより、ハッシュのすべてのキーが抽出され、リストとして返されます。次に、処理している特定のキーを通じて値を取得できます。</target>
        </trans-unit>
        <trans-unit id="da7117148549139674b757cf18ceb49ea4e3b714" translate="yes" xml:space="preserve">
          <source>To hack on the Perl guts, you'll need to read the following things:</source>
          <target state="translated">Perl のガッツをハックするには、以下のことを読む必要があります。</target>
        </trans-unit>
        <trans-unit id="adcd3970934fc11a2c18b9c7c3e26524958accfd" translate="yes" xml:space="preserve">
          <source>To handle this situation, the PPCODE directive is used and the stack is extended using the macro:</source>
          <target state="translated">この状況を処理するために、PPCODE指令を使用し、マクロを使用してスタックを拡張します。</target>
        </trans-unit>
        <trans-unit id="f2c53c3c3d7de6d2315fba06d0366c539cf64b63" translate="yes" xml:space="preserve">
          <source>To have everything installed in your home directory, do the following.</source>
          <target state="translated">すべてをホームディレクトリにインストールするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="ebc28ed79805f971814bf2f23886e1860e904a26" translate="yes" xml:space="preserve">
          <source>To help explain what &lt;code&gt;File::GlobMapper&lt;/code&gt; does, consider what code you would write if you wanted to rename all files in the current directory that ended in &lt;code&gt;.tar.gz&lt;/code&gt; to &lt;code&gt;.tgz&lt;/code&gt;. So say these files are in the current directory</source>
          <target state="translated">&lt;code&gt;File::GlobMapper&lt;/code&gt; 機能を説明するために、現在のディレクトリで &lt;code&gt;.tar.gz&lt;/code&gt; で終わるすべてのファイルの名前を &lt;code&gt;.tgz&lt;/code&gt; に変更する場合は、どのコードを記述するかを検討してください。これらのファイルが現在のディレクトリにあるとしましょう</target>
        </trans-unit>
        <trans-unit id="2009b3db85976237ffec01f5a479f250593bd279" translate="yes" xml:space="preserve">
          <source>To help understand how to write a Perl source filter we need an example to study. Here is a complete source filter that performs rot13 decoding. (Rot13 is a very simple encryption scheme used in Usenet postings to hide the contents of offensive posts. It moves every letter forward thirteen places, so that A becomes N, B becomes O, and Z becomes M.)</source>
          <target state="translated">Perl のソースフィルタの書き方を理解するためには、例が必要です。これは rot13 デコーディングを行う完全なソースフィルタです。(Rot13 はユーズネットの投稿で、攻撃的な投稿の内容を隠すために使われている非常にシンプルな暗号化方式です。これはすべての文字を 13 箇所前進させ、A が N になり、B が O になり、Z が M になるようにしています。)</target>
        </trans-unit>
        <trans-unit id="b67c3276fc328ee702718e80d3624e6e736f9072" translate="yes" xml:space="preserve">
          <source>To help understand why this can be a real problem first consider how a callback is set up in an all C environment. Typically a C API will provide a function to register a callback. This will expect a pointer to a function as one of its parameters. Below is a call to a hypothetical function &lt;code&gt;register_fatal&lt;/code&gt; which registers the C function to get called when a fatal error occurs.</source>
          <target state="translated">これが実際に問題となる理由を理解するには、まず、すべてのC環境でコールバックがどのように設定されているかを検討します。通常、C APIはコールバックを登録する関数を提供します。これは、そのパラメーターの1つとして関数へのポインターを期待します。以下は、致命的なエラーが発生したときに呼び出されるC関数を登録する架空の関数 &lt;code&gt;register_fatal&lt;/code&gt; の呼び出しです。</target>
        </trans-unit>
        <trans-unit id="6caa11e5f28551bc8c9f71be4abd8c87215d7f26" translate="yes" xml:space="preserve">
          <source>To help you convert legacy programs to more modern Perl, the &lt;a href=&quot;pl2pm&quot;&gt;pl2pm&lt;/a&gt; utility will help you convert old-style Perl 4 libraries to new-style Perl5 modules.</source>
          <target state="translated">レガシープログラムをより新しいPerlに変換するために、&lt;a href=&quot;pl2pm&quot;&gt;pl2pm&lt;/a&gt;ユーティリティは、古いスタイルのPerl 4ライブラリを新しいスタイルのPerl5モジュールに変換するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c501d022d8a0fffa65c230084aad7354f866cab9" translate="yes" xml:space="preserve">
          <source>To help you figure out what was undefined, perl will try to tell you the name of the variable (if any) that was undefined. In some cases it cannot do this, so it also tells you what operation you used the undefined value in. Note, however, that perl optimizes your program and the operation displayed in the warning may not necessarily appear literally in your program. For example, &lt;code&gt;&quot;that $foo&quot;&lt;/code&gt; is usually optimized into &lt;code&gt;&quot;that &quot; . $foo&lt;/code&gt; , and the warning will refer to the &lt;code&gt;concatenation (.)&lt;/code&gt; operator, even though there is no &lt;code&gt;.&lt;/code&gt; in your program.</source>
          <target state="translated">何が未定義であるかを理解しやすくするために、perlは未定義の変数（存在する場合）の名前を教えようとします。場合によってはこれを実行できないため、未定義の値をどの操作で使用したかも通知されます。ただし、perlはプログラムを最適化し、警告に表示される操作は必ずしもプログラムに文字通り表示されない場合があります。たとえば、 &lt;code&gt;&quot;that $foo&quot;&lt;/code&gt; は通常、 &lt;code&gt;&quot;that &quot; . $foo&lt;/code&gt; 最適化されます。$ foo、および警告がない場合でも、 &lt;code&gt;concatenation (.)&lt;/code&gt; 演算子を参照し &lt;code&gt;.&lt;/code&gt; あなたのプログラムで。</target>
        </trans-unit>
        <trans-unit id="77d1efff4e4ad59e580cc05099536ea5f027ae77" translate="yes" xml:space="preserve">
          <source>To hide the rough edges under the hood, provide a tie()d interface to the package &lt;code&gt;symbolic&lt;/code&gt; . Add methods</source>
          <target state="translated">ボンネットの下の粗いエッジを非表示にするには、パッケージ &lt;code&gt;symbolic&lt;/code&gt; に tie（）dインターフェースを提供します。メソッドを追加する</target>
        </trans-unit>
        <trans-unit id="bb09986ebdb919a3ce53d54257037e7652baac8f" translate="yes" xml:space="preserve">
          <source>To illustrate the differences between these variables, consider the following Perl expression, which uses a single-quoted string. After execution of this statement, perl may have set all four special error variables:</source>
          <target state="translated">これらの変数の違いを説明するために、単一引用符で囲まれた文字列を使用する次のPerl式を考えてみましょう。この文を実行した後、Perlは4つの特別なエラー変数をすべて設定しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="f0157186b912ecd3453913b9ba18ef7c370be226" translate="yes" xml:space="preserve">
          <source>To illustrate this feature, we'll design a pattern that matches if a string contains a palindrome. (This is a word or a sentence that, while ignoring spaces, interpunctuation and case, reads the same backwards as forwards. We begin by observing that the empty string or a string containing just one word character is a palindrome. Otherwise it must have a word character up front and the same at its end, with another palindrome in between.</source>
          <target state="translated">この機能を説明するために、文字列に回文が含まれている場合にマッチするパターンを設計してみましょう。これは、スペースや区切り記号、大文字小文字を無視して、後ろ向きに読んでも後ろ向きに読んでも同じように読める単語や文のことです。まず、空の文字列や単語1文字だけを含む文字列が回文であることを観察します。そうでない場合は、前に単語の文字があり、最後に同じ文字があり、その間に別の回文がある必要があります。</target>
        </trans-unit>
        <trans-unit id="983dc7293d2e1cce05648cd63638e4f7e22fc331" translate="yes" xml:space="preserve">
          <source>To illustrate unpacking for bit strings, we'll decompose a simple status register (a &quot;-&quot; stands for a &quot;reserved&quot; bit):</source>
          <target state="translated">ビット文字列の展開を説明するために、単純なステータスレジスタ(&quot;-&quot;は &quot;予約済み &quot;ビットを意味します)を分解してみましょう。</target>
        </trans-unit>
        <trans-unit id="0eeac6bf1837c3892fad2067238a40143aea5c3f" translate="yes" xml:space="preserve">
          <source>To illustrate,</source>
          <target state="translated">説明するために。</target>
        </trans-unit>
        <trans-unit id="3f180de5f2359e1c5045cf60151ad16271ecfbd0" translate="yes" xml:space="preserve">
          <source>To implement a copy constructor, add &lt;code&gt;'=' =&amp;gt; \&amp;amp;cpy&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; line, and code (this code assumes that mutators change things one level deep only, so recursive copying is not needed):</source>
          <target state="translated">コピーコンストラクターを実装するには、 &lt;code&gt;'=' =&amp;gt; \&amp;amp;cpy&lt;/code&gt; を追加して、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; 行とコードを&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;します（このコードは、ミューテーターが1レベルだけ変更することを前提としているため、再帰的なコピーは必要ありません）。</target>
        </trans-unit>
        <trans-unit id="8240260917b1a03cdad7c5747565fe071f2719a2" translate="yes" xml:space="preserve">
          <source>To implement most arithmetic operations is easy; one should just use the tables of operations, and change the code which fills %subr to</source>
          <target state="translated">ほとんどの算術演算を実装するのは簡単です。演算のテーブルを使用して、%subr を埋めるコードを</target>
        </trans-unit>
        <trans-unit id="81c4d513cec75ad639c29820e8f6fc040826df1f" translate="yes" xml:space="preserve">
          <source>To import subroutines:</source>
          <target state="translated">サブルーチンをインポートする。</target>
        </trans-unit>
        <trans-unit id="97177a061d7ff62a243885c9bd4e1efe9ede32f2" translate="yes" xml:space="preserve">
          <source>To increase the value of something by 1 (or by some other number, if so specified).</source>
          <target state="translated">何かの値を1だけ増やすこと(指定されている場合は他の数だけ増やすこと)。</target>
        </trans-unit>
        <trans-unit id="72b80e806b1c83aea2a8c7cd737f1e4bbb0943c8" translate="yes" xml:space="preserve">
          <source>To indicate to rather use commandline tools than modules</source>
          <target state="translated">モジュールよりもコマンドラインツールを使うことを示すために</target>
        </trans-unit>
        <trans-unit id="75120c587d6fba4a38cc9dc45cf5606751546e6f" translate="yes" xml:space="preserve">
          <source>To insert a line after one already in the file, use the &lt;code&gt;-n&lt;/code&gt; switch. It's just like &lt;code&gt;-p&lt;/code&gt; except that it doesn't print &lt;code&gt;$_&lt;/code&gt; at the end of the loop, so you have to do that yourself. In this case, print &lt;code&gt;$_&lt;/code&gt; first, then print the line that you want to add.</source>
          <target state="translated">ファイル内で既に1行後に行を挿入するには、 &lt;code&gt;-n&lt;/code&gt; スイッチを使用します。ループの最後に &lt;code&gt;$_&lt;/code&gt; を出力しないことを除いて、それは &lt;code&gt;-p&lt;/code&gt; と同じなので、自分で行う必要があります。この場合、最初に &lt;code&gt;$_&lt;/code&gt; を印刷してから、追加する行を印刷します。</target>
        </trans-unit>
        <trans-unit id="574f86f03c88819ff70bca34830f6be35a8bf5f1" translate="yes" xml:space="preserve">
          <source>To install NetWare Perl onto a NetWare server, first map the Sys volume of a NetWare server to</source>
          <target state="translated">NetWare サーバに NetWare Perl をインストールするには、まず、NetWare サーバの Sys ボリュームを</target>
        </trans-unit>
        <trans-unit id="a7a520bfb7587900e1cbb96bf573db69af079c5b" translate="yes" xml:space="preserve">
          <source>To iterate over the indices of an array, use &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $i (0 .. $#array)
{}&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $v (@array) {}&lt;/code&gt; iterates over the values.</source>
          <target state="translated">配列のインデックスを反復処理するには、 &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $i (0 .. $#array) {}&lt;/code&gt; ます。 &lt;code&gt;&lt;a href=&quot;functions/foreach&quot;&gt;foreach&lt;/a&gt; &lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $v (@array) {}&lt;/code&gt; は値を反復処理します。</target>
        </trans-unit>
        <trans-unit id="8f0a51f73b6311fa2b970169a1f0134f7c61aef8" translate="yes" xml:space="preserve">
          <source>To join a mailing list for announcements about &lt;code&gt;Memoize&lt;/code&gt; , send an empty message to &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; . This mailing list is for announcements only and has extremely low traffic---fewer than two messages per year.</source>
          <target state="translated">&lt;code&gt;Memoize&lt;/code&gt; に関するお知らせのメーリングリストに参加するには、空のメッセージを &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; に送信してください。このメーリングリストはアナウンスのみを目的としており、トラフィックが非常に少なく、1年に2メッセージ未満です。</target>
        </trans-unit>
        <trans-unit id="9c7770af2e023d19bb1b24c66498040c02b4d820" translate="yes" xml:space="preserve">
          <source>To join a very low-traffic mailing list for announcements about &lt;code&gt;Memoize&lt;/code&gt; , send an empty note to &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; .</source>
          <target state="translated">トラフィックが非常に少ないメーリングリストに参加して &lt;code&gt;Memoize&lt;/code&gt; に関するお知らせを受け取るには、空のメモを &lt;code&gt;mjd-perl-memoize-request@plover.com&lt;/code&gt; に送信してください。</target>
        </trans-unit>
        <trans-unit id="30da17ba518ee8896f295021c334b446312ba2d0" translate="yes" xml:space="preserve">
          <source>To just compare two strings for equality/non-equality, you can just use &lt;a href=&quot;perlapi#memEQ&quot;&gt;memEQ() &lt;/a&gt; and &lt;a href=&quot;perlapi#memEQ&quot;&gt;memNE() &lt;/a&gt; as usual, except the strings must be both UTF-8 or not UTF-8 encoded.</source>
          <target state="translated">2つの文字列が等しいかどうかを比較するには、通常どおり&lt;a href=&quot;perlapi#memEQ&quot;&gt;memEQ（）&lt;/a&gt;と&lt;a href=&quot;perlapi#memEQ&quot;&gt;memNE（）&lt;/a&gt;を使用できますが、文字列は両方ともUTF-8でエンコードされているか、UTF-8でエンコードされていない必要があります。</target>
        </trans-unit>
        <trans-unit id="bfd1d911fc5d8c1a13ece46d4a41278866b326f9" translate="yes" xml:space="preserve">
          <source>To keep our namespace nice and unpolluted, edit the .pm file and change the variable &lt;code&gt;@EXPORT&lt;/code&gt; to &lt;code&gt;@EXPORT_OK&lt;/code&gt; . Finally, in the .xs file, edit the #include line to read:</source>
          <target state="translated">名前空間を汚染されていない状態に保つには、.pmファイルを編集し、変数 &lt;code&gt;@EXPORT&lt;/code&gt; を &lt;code&gt;@EXPORT_OK&lt;/code&gt; に変更します。最後に、.xsファイルで、＃include行を編集して以下を読み取ります。</target>
        </trans-unit>
        <trans-unit id="03272788bb4c31073d76ce4d5e5b7d43fa610bff" translate="yes" xml:space="preserve">
          <source>To learn how to install modules you download from CPAN, read &lt;a href=&quot;perlmodinstall&quot;&gt;perlmodinstall&lt;/a&gt;.</source>
          <target state="translated">CPANからダウンロードしたモジュールをインストールする方法については、&lt;a href=&quot;perlmodinstall&quot;&gt;perlmodinstallをお&lt;/a&gt;読みください。</target>
        </trans-unit>
        <trans-unit id="6a06d2306514b40b8ba1c92a7641c86fc2fa15b9" translate="yes" xml:space="preserve">
          <source>To learn how to use a particular module, use &lt;code&gt;perldoc &lt;i&gt;Module::Name&lt;/i&gt;&lt;/code&gt;. Typically you will want to &lt;code&gt;use &lt;i&gt;Module::Name&lt;/i&gt;&lt;/code&gt;, which will then give you access to exported functions or an OO interface to the module.</source>
          <target state="translated">特定のモジュールの使用方法を学ぶには、 &lt;code&gt;perldoc &lt;i&gt;Module::Name&lt;/i&gt;&lt;/code&gt; 使用して&lt;i&gt;ください&lt;/i&gt;。通常は、 &lt;code&gt;use &lt;i&gt;Module::Name&lt;/i&gt;&lt;/code&gt; を使用&lt;i&gt;&lt;/i&gt;します。これにより、エクスポートされた関数またはモジュールへのOOインターフェイスにアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="085a503b5041562d55123a7fc6e92076974024bc" translate="yes" xml:space="preserve">
          <source>To learn more, just type a bogus option, like &lt;b&gt;-\?&lt;/b&gt;, and a long usage message will be provided. There are a fair number of possibilities.</source>
          <target state="translated">詳細については、&lt;b&gt;-\？の&lt;/b&gt;ような偽のオプションを入力して&lt;b&gt;ください。&lt;/b&gt;、長い使用方法のメッセージが表示されます。可能性はかなりあります。</target>
        </trans-unit>
        <trans-unit id="b660f64338ea03a5a1e256309c3e2566abdfdf76" translate="yes" xml:space="preserve">
          <source>To limit the number of decimal places in your numbers, you can use the &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; function. See &lt;a href=&quot;perlop#Floating-point-Arithmetic&quot;&gt;Floating-point Arithmetic in perlop&lt;/a&gt; for more details.</source>
          <target state="translated">数値の小数点以下の桁数を制限するには、 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 関数または &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 関数を使用できます。詳細について&lt;a href=&quot;perlop#Floating-point-Arithmetic&quot;&gt;は、perlopの浮動小数点演算を参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="a08be93803c5f2a1dab3670911ed75d37f74ad6a" translate="yes" xml:space="preserve">
          <source>To load &lt;code&gt;TAP::Harness&lt;/code&gt; plugins, you'll need to use the &lt;code&gt;tap_harness_args&lt;/code&gt; parameter to &lt;code&gt;new&lt;/code&gt; , typically from your &lt;code&gt;Build.PL&lt;/code&gt; . For example:</source>
          <target state="translated">&lt;code&gt;TAP::Harness&lt;/code&gt; プラグインをロードするには、通常は &lt;code&gt;Build.PL&lt;/code&gt; から、 &lt;code&gt;new&lt;/code&gt; に &lt;code&gt;tap_harness_args&lt;/code&gt; パラメーターを使用する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="1281377e392724ce754ea5fba63ddbdb0e3e3b86" translate="yes" xml:space="preserve">
          <source>To load on demand. (Also called &amp;ldquo;lazy&amp;rdquo; loading.) Specifically, to call an &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutine on behalf of an undefined subroutine.</source>
          <target state="translated">オンデマンドでロードする。（「遅延」ロードとも呼ばれます。）特に、未定義のサブルーチンに代わって &lt;code&gt;AUTOLOAD&lt;/code&gt; サブルーチンを呼び出す。</target>
        </trans-unit>
        <trans-unit id="c23756075d8a23d3d03df135a356f7c210c8debd" translate="yes" xml:space="preserve">
          <source>To maintain backward compatibility with version 1.x of this module &lt;code&gt;gzreadline&lt;/code&gt; ignores the &lt;code&gt;$/&lt;/code&gt; variable - it</source>
          <target state="translated">このモジュールのバージョン1.xとの下位互換性を維持するために、 &lt;code&gt;gzreadline&lt;/code&gt; は &lt;code&gt;$/&lt;/code&gt; 変数を無視します-it</target>
        </trans-unit>
        <trans-unit id="abc4743aa98a734da932da278854d69561d0cbfb" translate="yes" xml:space="preserve">
          <source>To make &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; work, we need to implement actual mutators, either directly, or in &lt;code&gt;nomethod&lt;/code&gt; . We continue to do things inside &lt;code&gt;nomethod&lt;/code&gt; , thus add</source>
          <target state="translated">&lt;code&gt;++&lt;/code&gt; と &lt;code&gt;--&lt;/code&gt; を機能させるには、直接または &lt;code&gt;nomethod&lt;/code&gt; で実際のミューテーターを実装する必要があります。 &lt;code&gt;nomethod&lt;/code&gt; 内で引き続き処理を行うため、以下を追加します</target>
        </trans-unit>
        <trans-unit id="91a1c6beb7c38d494fe7c7d801b2befdd4173ffc" translate="yes" xml:space="preserve">
          <source>To make &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; work, there were two changes to</source>
          <target state="translated">&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; を機能させるために、2つの変更がありました</target>
        </trans-unit>
        <trans-unit id="b87c350e6119d6693a7cb04a8612a5e26f6e647d" translate="yes" xml:space="preserve">
          <source>To make a backup of &lt;code&gt;inFile.txt&lt;/code&gt; , give &lt;code&gt;-i&lt;/code&gt; a file extension to add:</source>
          <target state="translated">バックアップ作成するには &lt;code&gt;inFile.txt&lt;/code&gt; を与える &lt;code&gt;-i&lt;/code&gt; 追加するには、ファイルの拡張子を：</target>
        </trans-unit>
        <trans-unit id="8414b77ccfd34c712fab8c626931679fd71f5d22" translate="yes" xml:space="preserve">
          <source>To make a long story short, you can use the special variables &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; , &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; and &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; with AVs and HVs, but you have to make sure you know what you're doing.</source>
          <target state="translated">長い話を簡単に &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; と、AVとHVで特殊変数 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; 、 &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; 、＆PL_sv_noを使用できますが、何をしているのかを確実に把握する必要があります。</target>
        </trans-unit>
        <trans-unit id="5c0463c040e841ec603e099982e8abee57b683e9" translate="yes" xml:space="preserve">
          <source>To make life easier when dealing with duplicate keys, &lt;b&gt;DB_File&lt;/b&gt; comes with a few utility methods.</source>
          <target state="translated">重複キーを処理する際の&lt;b&gt;作業&lt;/b&gt;を簡単にするために、&lt;b&gt;DB_Fileに&lt;/b&gt;はいくつかのユーティリティメソッドが付属しています。</target>
        </trans-unit>
        <trans-unit id="5ae2d3fa0128e67ff0e0a2c8bcd480511ed4d982" translate="yes" xml:space="preserve">
          <source>To make proper use of the</source>
          <target state="translated">を適切に活用するために</target>
        </trans-unit>
        <trans-unit id="c44a199ec9bf1193e7c67a06e66e66c5a73ebf54" translate="yes" xml:space="preserve">
          <source>To make sure we're talking about the same thing when we discuss the removal of features or functionality from the Perl core, we have specific definitions for a few words and phrases.</source>
          <target state="translated">Perl コアからの機能や機能の削除について議論するときに、同じことを話していることを確認するために、いくつかの単語やフレーズの具体的な定義を用意しています。</target>
        </trans-unit>
        <trans-unit id="5942273fcaa449896c9e37c66cd4e802e9c0964a" translate="yes" xml:space="preserve">
          <source>To make symbols from a &lt;b&gt;module&lt;/b&gt; available for &lt;b&gt;import&lt;/b&gt; by other modules.</source>
          <target state="translated">&lt;b&gt;モジュールの&lt;/b&gt;シンボルを他のモジュールで&lt;b&gt;インポート&lt;/b&gt;できるようにする。</target>
        </trans-unit>
        <trans-unit id="dcd61647f554ce66ac28cd2d49ac0cbdb07ed537" translate="yes" xml:space="preserve">
          <source>To make the field hashes kick in, it is easiest to redefine &lt;code&gt;refaddr&lt;/code&gt; as</source>
          <target state="translated">フィールドハッシュを &lt;code&gt;refaddr&lt;/code&gt; するには、refaddrを次のように再定義するのが最も簡単です。</target>
        </trans-unit>
        <trans-unit id="ffcdcbe9b2ae0d61ba055686a39957aa53dc38e5" translate="yes" xml:space="preserve">
          <source>To make the interface more useful for older versions of Perl, a number of methods are supplied with &lt;b&gt;DB_File&lt;/b&gt; to simulate the missing array operations. All these methods are accessed via the object returned from the tie call.</source>
          <target state="translated">古いバージョンのPerlでインターフェースをより便利にするために、不足している配列操作をシミュレートするためのいくつかのメソッドが&lt;b&gt;DB_Fileで&lt;/b&gt;提供されています。これらのメソッドはすべて、tie呼び出しから返されたオブジェクトを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="1e1af3e6c47d65824073836d9be72328a9d2a810" translate="yes" xml:space="preserve">
          <source>To make these calls fail</source>
          <target state="translated">これらの電話を失敗させるために</target>
        </trans-unit>
        <trans-unit id="5100ca13c61421986a8b595f7f48745403cf86c2" translate="yes" xml:space="preserve">
          <source>To make things more complicated, the hash may contain references to the actual destinations, for example:</source>
          <target state="translated">より複雑にするために、ハッシュには、例えば実際の目的地への参照が含まれているかもしれません。</target>
        </trans-unit>
        <trans-unit id="23271da81593c086fb9f97e8eda36eed5fe8ab37" translate="yes" xml:space="preserve">
          <source>To make use of either of the two filter modules above, place the line below in a Perl source file.</source>
          <target state="translated">上記の2つのフィルタモジュールのいずれかを利用するには、Perl のソースファイルに以下の行を入れてください。</target>
        </trans-unit>
        <trans-unit id="546b84e64be1bb2630d4087e9c7e0aa2ec07fbeb" translate="yes" xml:space="preserve">
          <source>To make use of threading, however, one usually wants the threads to share at least some data between themselves. This is done with the &lt;a href=&quot;threads/shared&quot;&gt;threads::shared&lt;/a&gt; module and the &lt;code&gt;:shared&lt;/code&gt; attribute:</source>
          <target state="translated">ただし、スレッドを利用するには、通常、スレッド間で少なくとも一部のデータを共有する必要があります。これは、&lt;a href=&quot;threads/shared&quot;&gt;threads :: shared&lt;/a&gt;モジュールと &lt;code&gt;:shared&lt;/code&gt; 属性で行われます。</target>
        </trans-unit>
        <trans-unit id="482a24cc09ed210b4be1c7fca66ab517d60e1e62" translate="yes" xml:space="preserve">
          <source>To mark FILEHANDLE as UTF-8, use &lt;code&gt;:utf8&lt;/code&gt; or &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; . &lt;code&gt;:utf8&lt;/code&gt; just marks the data as UTF-8 without further checking, while &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; checks the data for actually being valid UTF-8. More details can be found in &lt;a href=&quot;../perlio/encoding&quot;&gt;PerlIO::encoding&lt;/a&gt;.</source>
          <target state="translated">FILEHANDLEをUTF-8としてマークするには、 &lt;code&gt;:utf8&lt;/code&gt; または &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; を使用します。 &lt;code&gt;:utf8&lt;/code&gt; は、データをUTF-8としてマークするだけで、それ以上のチェックは行いません。一方、 &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; は、データが実際に有効なUTF-8かどうかをチェックします。詳細は&lt;a href=&quot;../perlio/encoding&quot;&gt;PerlIO :: encodingにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5274ade94ad24fbd8e1e1d8904bba9bc30f6d6c0" translate="yes" xml:space="preserve">
          <source>To mark FILEHANDLE as UTF-8, use &lt;code&gt;:utf8&lt;/code&gt; or &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; . &lt;code&gt;:utf8&lt;/code&gt; just marks the data as UTF-8 without further checking, while &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; checks the data for actually being valid UTF-8. More details can be found in &lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO::encoding&lt;/a&gt;.</source>
          <target state="translated">FILEHANDLEをUTF-8としてマークするには、 &lt;code&gt;:utf8&lt;/code&gt; または &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; を使用します。 &lt;code&gt;:utf8&lt;/code&gt; は、データをUTF-8としてマークするだけで、それ以上のチェックは行いません。一方、 &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; は、データが実際に有効なUTF-8かどうかをチェックします。詳細は&lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO :: encodingにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b4e2df2dd87486f202e752cbd1bc2453ac926173" translate="yes" xml:space="preserve">
          <source>To minimize the number of sbrk(2)s, malloc() asks for more memory. This field gives the size of the yet unused part, which is sbrk(2)ed, but never touched.</source>
          <target state="translated">sbrk(2)の数を最小化するために、malloc()はより多くのメモリを要求します。このフィールドは、まだ使われていない部分のサイズを与えます。</target>
        </trans-unit>
        <trans-unit id="c7e29496ccd957aa4492216e45f2282e137e2591" translate="yes" xml:space="preserve">
          <source>To obtain this, a reference to a hash must be passed</source>
          <target state="translated">これを得るためには、ハッシュへの参照を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="76c61aa559d88fae477b92a372d192b3b51d4c5b" translate="yes" xml:space="preserve">
          <source>To open a file without blocking, creating if necessary:</source>
          <target state="translated">ブロックせずにファイルを開くには、必要に応じて作成します。</target>
        </trans-unit>
        <trans-unit id="354facfe42bf4e55b171df83905f745324ebd0c9" translate="yes" xml:space="preserve">
          <source>To open file for appending, create if necessary:</source>
          <target state="translated">追加用のファイルを開くには、必要に応じて作成します。</target>
        </trans-unit>
        <trans-unit id="1702818d3f57a9131b4035ed033f063e2b07cebf" translate="yes" xml:space="preserve">
          <source>To open file for appending, file must exist:</source>
          <target state="translated">追加用のファイルを開くには、ファイルが存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="4967760590c67e61373186454a8e4a1135dcb6d9" translate="yes" xml:space="preserve">
          <source>To open file for reading:</source>
          <target state="translated">ファイルを開いて読むことができます。</target>
        </trans-unit>
        <trans-unit id="cee1bc0ab3a065feee926895157fb947a422ff0d" translate="yes" xml:space="preserve">
          <source>To open file for update, create file if necessary:</source>
          <target state="translated">更新用のファイルを開くには、必要に応じてファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="7c8a25c4e2b2e915deaf352a915d4e6583e2f962" translate="yes" xml:space="preserve">
          <source>To open file for update, file must exist:</source>
          <target state="translated">更新用のファイルを開くには、ファイルが存在している必要があります。</target>
        </trans-unit>
        <trans-unit id="b8d1b7a21cb716decbfe05cd44f437ced848a3ac" translate="yes" xml:space="preserve">
          <source>To open file for update, file must not exist:</source>
          <target state="translated">更新用のファイルを開くには、ファイルが存在しない必要があります。</target>
        </trans-unit>
        <trans-unit id="e09916f7ec3e12864e36849354a4ebf1fbb19361" translate="yes" xml:space="preserve">
          <source>To open file for writing, create new file if needed or else truncate old file:</source>
          <target state="translated">書き込み用のファイルを開くには、必要に応じて新しいファイルを作成するか、古いファイルを切り捨てます。</target>
        </trans-unit>
        <trans-unit id="290398a666a114bce8d99caa62b27b49c84e4b59" translate="yes" xml:space="preserve">
          <source>To open file for writing, create new file, file must not exist:</source>
          <target state="translated">書き込み用のファイルを開くには、新規ファイルを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="6007d31a54fba5ebc4520f06ed8627e89a0d4a2c" translate="yes" xml:space="preserve">
          <source>To output UTF-8, use the &lt;code&gt;:encoding&lt;/code&gt; or &lt;code&gt;:utf8&lt;/code&gt; output layer. Prepending</source>
          <target state="translated">UTF-8を出力するには、 &lt;code&gt;:encoding&lt;/code&gt; または &lt;code&gt;:utf8&lt;/code&gt; 出力レイヤーを使用します。追加</target>
        </trans-unit>
        <trans-unit id="3b36e6dcece917ee92e199616190bf7ab5b56187" translate="yes" xml:space="preserve">
          <source>To overcome this limitation, you need to turn on /s matching within the prefix pattern, using the &lt;code&gt;(?s)&lt;/code&gt; directive: '(?s).*?(?=&amp;lt;H1&amp;gt;)'</source>
          <target state="translated">この制限を克服するには、 &lt;code&gt;(?s)&lt;/code&gt; ディレクティブを使用して、プレフィックスパターン内の/ sマッチングをオンにする必要があります： '（？s）。*？（？= &amp;lt;H1&amp;gt;）'</target>
        </trans-unit>
        <trans-unit id="062f2ac749842e1dd1762ff59d78e1eb660fe9b7" translate="yes" xml:space="preserve">
          <source>To override a Perl built-in routine with your own version, you need to import it at compile-time. This can be conveniently achieved with the &lt;code&gt;subs&lt;/code&gt; pragma. This will affect only the package in which you've imported the said subroutine:</source>
          <target state="translated">Perl組み込みルーチンを独自のバージョンでオーバーライドするには、コンパイル時にそれをインポートする必要があります。これは、 &lt;code&gt;subs&lt;/code&gt; プラグマで簡単に実現できます。これは、上記のサブルーチンをインポートしたパッケージにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="1aa3f784c17082d78c7fbfe639d471e8c69f8458" translate="yes" xml:space="preserve">
          <source>To override a built-in globally (that is, in all namespaces), you need to import your function into the &lt;code&gt;CORE::GLOBAL&lt;/code&gt; pseudo-namespace at compile time:</source>
          <target state="translated">組み込みをグローバルに（つまり、すべての名前空間で）オーバーライドするには、コンパイル時に関数を &lt;code&gt;CORE::GLOBAL&lt;/code&gt; 疑似名前空間にインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="605fcd402b7e1fdc810b4ff2c0f6a15f906ca915" translate="yes" xml:space="preserve">
          <source>To pack dates stored as triplets ( day, month, year ) in an array &lt;code&gt;@dates&lt;/code&gt; into a sequence of byte, byte, short integer we can write</source>
          <target state="translated">トリプレット（日、月、年）として配列 &lt;code&gt;@dates&lt;/code&gt; に格納されている日付をバイト、バイト、短整数のシーケンスにパックするには、次のように記述します</target>
        </trans-unit>
        <trans-unit id="1d0cde2eb7df8017d255040c9f5af9796899dd92" translate="yes" xml:space="preserve">
          <source>To parse a string &lt;code&gt;$str&lt;/code&gt; as a floating point number use</source>
          <target state="translated">文字列 &lt;code&gt;$str&lt;/code&gt; を浮動小数点数として解析するには</target>
        </trans-unit>
        <trans-unit id="61571c195afbee84b0b85796b78595db86b7183b" translate="yes" xml:space="preserve">
          <source>To parse a string &lt;code&gt;$str&lt;/code&gt; as a number in some base &lt;code&gt;$base&lt;/code&gt; use</source>
          <target state="translated">文字列 &lt;code&gt;$str&lt;/code&gt; をいくつかのベース &lt;code&gt;$base&lt;/code&gt; 数値として解析するには</target>
        </trans-unit>
        <trans-unit id="8c0b000078df0842ed41dd6cf17b93c225c65646" translate="yes" xml:space="preserve">
          <source>To parse this code, Perl uses a heuristic based on what package names it has seen, what subroutines exist in the current package, what barewords it has previously seen, and other input. Needless to say, heuristics can produce very surprising results!</source>
          <target state="translated">このコードを解析するために、Perlはどのようなパッケージ名を見たか、現在のパッケージにはどのようなサブルーチンが存在するか、以前に見たことがあるベアワードは何か、その他の入力に基づいてヒューリスティックを使用しています。言うまでもなく、ヒューリスティックは非常に驚くべき結果を生み出すことができます。</target>
        </trans-unit>
        <trans-unit id="fbca7774c8df9c1e7fff186e61962bc8047a5ac6" translate="yes" xml:space="preserve">
          <source>To pass an object method into a subroutine, you can do this:</source>
          <target state="translated">オブジェクトメソッドをサブルーチンに渡すには、このようにします。</target>
        </trans-unit>
        <trans-unit id="249caf0f11ba46a1737a888a2cd12f841c024b93" translate="yes" xml:space="preserve">
          <source>To pass supplemental arguments to a program opened with &lt;code&gt; '|-' &lt;/code&gt; or &lt;code&gt; '-|' &lt;/code&gt; append them to the command string as you would system EXPR.</source>
          <target state="translated">&lt;code&gt; '|-' &lt;/code&gt; または &lt;code&gt; '-|' &lt;/code&gt; で開かれたプログラムに補足引数を渡すには システムEXPRと同様に、コマンド文字列にそれらを追加します。</target>
        </trans-unit>
        <trans-unit id="9bb3f23b2e2cd47ffa049a4b5b8e3297a48bd649" translate="yes" xml:space="preserve">
          <source>To prepare distribution you need to do following:</source>
          <target state="translated">配布物を準備するには、以下のような作業が必要です。</target>
        </trans-unit>
        <trans-unit id="47e04bab26a33f27d49843c62d8c3b7400695e70" translate="yes" xml:space="preserve">
          <source>To prepend lines to the beginning, print those lines before you enter the loop that prints the existing lines.</source>
          <target state="translated">行の先頭に行を前置するには、既存の行を印刷するループに入る前にその行を印刷します。</target>
        </trans-unit>
        <trans-unit id="453d8a60ef1b8720b3eb21b0a6becefda886f512" translate="yes" xml:space="preserve">
          <source>To prevent &amp;lt;extract_quotelike&amp;gt; from mucking about with the input in this way (this is the only case where a list-context &lt;code&gt;extract_quotelike&lt;/code&gt; does so), you can pass the input variable as an interpolated literal:</source>
          <target state="translated">&amp;lt;extract_quotelike&amp;gt;がこのように入力を変更しないようにするには（これが、リストコンテキストの &lt;code&gt;extract_quotelike&lt;/code&gt; がそうする唯一のケースです）、入力変数を補間されたリテラルとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="743105860f25b02f06770315902de6783c423895" translate="yes" xml:space="preserve">
          <source>To prevent &lt;code&gt;memoize&lt;/code&gt; from installing the memoized version anywhere, use &lt;code&gt;INSTALL =&amp;gt; &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;memoize&lt;/code&gt; がメモ化されたバージョンをどこにもインストールしないようにするには、 &lt;code&gt;INSTALL =&amp;gt; &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="c9de321857a95078722502ca43a0201a5f6a4b12" translate="yes" xml:space="preserve">
          <source>To prevent any ambiguity,</source>
          <target state="translated">曖昧さを防ぐために</target>
        </trans-unit>
        <trans-unit id="ac0fc603c0e20ee050f6b1167e08040f2086e70a" translate="yes" xml:space="preserve">
          <source>To prevent the contents of a queue from being modified by another thread while it is being examined and/or changed, &lt;a href=&quot;../threads/shared#lock-VARIABLE&quot;&gt;lock&lt;/a&gt; the queue inside a local block:</source>
          <target state="translated">検査中または変更中にキューの内容が別のスレッドによって変更されないようにするには、ローカルブロック内でキューを&lt;a href=&quot;../threads/shared#lock-VARIABLE&quot;&gt;ロック&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="521d225cb8b8267bdc9221af420cb3102374b4c5" translate="yes" xml:space="preserve">
          <source>To prevent this, supply a &lt;code&gt;NORMALIZER&lt;/code&gt; function that turns the program arguments into a string in a way that equivalent arguments turn into the same string. A &lt;code&gt;NORMALIZER&lt;/code&gt; function for &lt;code&gt;f&lt;/code&gt; above might look like this:</source>
          <target state="translated">これを防ぐには、同等の引数が同じ文字列になるようにプログラム引数を文字列に変換する &lt;code&gt;NORMALIZER&lt;/code&gt; 関数を指定します。 &lt;code&gt;NORMALIZER&lt;/code&gt; のための機能 &lt;code&gt;f&lt;/code&gt; このテーストの外観上の：</target>
        </trans-unit>
        <trans-unit id="6fa84f786f1f2e361ba53d7582050f707e69605c" translate="yes" xml:space="preserve">
          <source>To produce a perl binary with a different name than &lt;code&gt;perl&lt;/code&gt; , either say</source>
          <target state="translated">異なる名前でperlのバイナリを生成するには &lt;code&gt;perl&lt;/code&gt; のどちらかと言います、</target>
        </trans-unit>
        <trans-unit id="deeb5ed64d8b8726d03c2a35d8b9a4f9932501dd" translate="yes" xml:space="preserve">
          <source>To prove success on the host machine, run &quot;dumpbin /headers wince-arm-pocket-wce400\perl.exe&quot; from the win32/ folder and look for &quot;machine (ARM)&quot; in the FILE HEADER VALUES and &quot;subsystem (Windows CE GUI)&quot; in the OPTIONAL HEADER VALUES.</source>
          <target state="translated">ホストマシンでの成功を証明するために、win32/フォルダから &quot;dumpbin /headers wince-arm-pocket-wce400-W\perl.exe &quot;を実行し、FILE HEADER VALUESの中にある &quot;machine (ARM)&quot;とOPTIONAL HEADER VALUESの中にある &quot;subystem (Windows CE GUI)&quot;を探します。</target>
        </trans-unit>
        <trans-unit id="e3f95db7629c92dc13df17dee2376ecae6bd28b4" translate="yes" xml:space="preserve">
          <source>To provide a Perl interface to this library we need to be able to map between the &lt;code&gt;fh&lt;/code&gt; parameter and the Perl subroutine we want called. A hash is a convenient mechanism for storing this mapping. The code below shows a possible implementation</source>
          <target state="translated">このライブラリにPerlインターフェースを提供するには、 &lt;code&gt;fh&lt;/code&gt; パラメータと呼び出したいPerlサブルーチンの間をマッピングできる必要があります。ハッシュは、このマッピングを保存するための便利なメカニズムです。以下のコードは可能な実装を示しています</target>
        </trans-unit>
        <trans-unit id="56afd5e1c9ab39b7d24b6a35fc7523124fb4a154" translate="yes" xml:space="preserve">
          <source>To provide an example, let's say the popular &lt;code&gt;Foo::Bar::escape_html&lt;/code&gt; function doesn't deal with Unicode data yet. The wrapper function would convert the argument to raw UTF-8 and convert the result back to Perl's internal representation like so:</source>
          <target state="translated">例を示すために、人気のある &lt;code&gt;Foo::Bar::escape_html&lt;/code&gt; 関数がまだUnicodeデータを処理していないとしましょう。ラッパー関数は、引数を生のUTF-8に変換し、結果を次のようにPerlの内部表現に変換します。</target>
        </trans-unit>
        <trans-unit id="fe539191c8112058d164cdbdc07c4a313e2ceb71" translate="yes" xml:space="preserve">
          <source>To provide backward compatibility with the previous version of Net::Ping, a pingecho() subroutine is available with the same functionality as before. pingecho() uses the tcp protocol. The return values and parameters are the same as described for the ping() method. This subroutine is obsolete and may be removed in a future version of Net::Ping.</source>
          <target state="translated">以前のバージョンの Net::Ping との下位互換性を確保するために、以前と同じ機能を持つ pingecho()サブルーチンが用意されています。戻り値やパラメータは ping()メソッドで説明したものと同じです。このサブルーチンは廃止されたものであり、将来の Net::Ping のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ece610257b3402f7eea4d17dbc76eda55d9cbb02" translate="yes" xml:space="preserve">
          <source>To provide the capability to set/get class-wide settings, it is best instead to provide accessors as subroutines or class methods instead.</source>
          <target state="translated">クラス全体の設定を設定/取得する機能を提供するには、代わりにアクセサをサブルーチンやクラスメソッドとして提供するのがベストです。</target>
        </trans-unit>
        <trans-unit id="b8ad3c75e2a9658073e3c75677575371b7b2154a" translate="yes" xml:space="preserve">
          <source>To put the output from any parse method into a string instead of a file handle, call the output_string() method instead of output_fh().</source>
          <target state="translated">任意のパース・メソッドからの出力をファイル・ハンドルではなく文字列に変換するには、output_fh()の代わりに output_string()メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="8d3d8f79e5bb23da5237f2bc4f067b582af08744" translate="yes" xml:space="preserve">
          <source>To quickly check the type of a &lt;code&gt;Archive::Tar::File&lt;/code&gt; object, you can use the following methods:</source>
          <target state="translated">&lt;code&gt;Archive::Tar::File&lt;/code&gt; オブジェクトのタイプをすばやく確認するには、次のメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="ffb74a402d25037ed756434b89268f8c6c0f487e" translate="yes" xml:space="preserve">
          <source>To quote the bzip2 documentation</source>
          <target state="translated">bzip2 のドキュメントを引用すると</target>
        </trans-unit>
        <trans-unit id="2e030dd198e6e120e9f1df9a82e7575806595a2d" translate="yes" xml:space="preserve">
          <source>To read an entire &lt;b&gt;file&lt;/b&gt; into a &lt;b&gt;string&lt;/b&gt; in one operation.</source>
          <target state="translated">全体読むには&lt;b&gt;、ファイル&lt;/b&gt;に&lt;b&gt;文字列を&lt;/b&gt;一度の操作で。</target>
        </trans-unit>
        <trans-unit id="d6676802f298dda33ea89ee297e7a4c3b7e4e2ac" translate="yes" xml:space="preserve">
          <source>To read both a command's STDOUT and its STDERR separately, it's easiest to redirect them separately to files, and then read from those files when the program is done:</source>
          <target state="translated">コマンドのSTDOUTとSTDERRを別々に読み込むには、それらを別々にファイルにリダイレクトし、プログラムの終了時にそれらのファイルから読み込むのが最も簡単です。</target>
        </trans-unit>
        <trans-unit id="441b0a3f043e9d675f24f50e1a3845049a78b701" translate="yes" xml:space="preserve">
          <source>To read both a command's STDOUT and its STDERR separately, you can redirect them to temp files, let the command run, then read the temp files:</source>
          <target state="translated">コマンドのSTDOUTとSTDERRを別々に読むには、それらを一時ファイルにリダイレクトして、コマンドを実行させてから一時ファイルを読むことができます。</target>
        </trans-unit>
        <trans-unit id="5540d6192acd70f39a8ef597e449669bc8ae5ddb" translate="yes" xml:space="preserve">
          <source>To read from an existing Perl filehandle, &lt;code&gt;$input&lt;/code&gt; , and write the compressed data to a buffer, &lt;code&gt;$buffer&lt;/code&gt; .</source>
          <target state="translated">既存のPerlファイルハンドル &lt;code&gt;$input&lt;/code&gt; から読み取り、圧縮データをバッファー &lt;code&gt;$buffer&lt;/code&gt; 書き込む。</target>
        </trans-unit>
        <trans-unit id="c349b729382da049ab850b286913e925d6fe3968" translate="yes" xml:space="preserve">
          <source>To read from an existing Perl filehandle, &lt;code&gt;$input&lt;/code&gt; , and write the uncompressed data to a buffer, &lt;code&gt;$buffer&lt;/code&gt; .</source>
          <target state="translated">既存のPerlファイルハンドル &lt;code&gt;$input&lt;/code&gt; から読み取り、非圧縮データをバッファー &lt;code&gt;$buffer&lt;/code&gt; 書き込む。</target>
        </trans-unit>
        <trans-unit id="7482ebcf137b958140c12465f2671a82fcf986b9" translate="yes" xml:space="preserve">
          <source>To read the</source>
          <target state="translated">を読むには</target>
        </trans-unit>
        <trans-unit id="87df4beb52a8613330401231fb10bf4839a044e4" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.1950&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.1950&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="5f3af95cfb979c68a078d4244b348eca50284cce" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.1951&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.1951&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="fe87604cf51141fe67b4d7c05185428541881932" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.Compressed&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.Compressed&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="dcd74724ed743479732074df76791b8e4375f0ba" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.bz2&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.bz2&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="d0224a4a1040095275155b56f5f7207fca1c2ad1" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt.gz&lt;/code&gt; and write the uncompressed data to the file &lt;code&gt;file1.txt&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt.gz&lt;/code&gt; の内容を読み取り、非圧縮データをファイル &lt;code&gt;file1.txt&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="62b61bd1daa8a6cb2d7eb96d3ece7209a79b5aec" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.1950&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.1950&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="3e429b7a25235b582c4b383620392f1a750a3bdd" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.1951&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.1951&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="c406d8acaac2a742d676187babe70fbc63a189bd" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.bz2&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.bz2&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="fa350228ff2721777414a685ddb5c4e3af10826c" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.gz&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.gz&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="1253348a31fd66554a6efd5d56c0e22a2ff1b137" translate="yes" xml:space="preserve">
          <source>To read the contents of the file &lt;code&gt;file1.txt&lt;/code&gt; and write the compressed data to the file &lt;code&gt;file1.txt.zip&lt;/code&gt; .</source>
          <target state="translated">ファイル &lt;code&gt;file1.txt&lt;/code&gt; の内容を読み取り、圧縮データをファイル &lt;code&gt;file1.txt.zip&lt;/code&gt; に書き込む。</target>
        </trans-unit>
        <trans-unit id="7cb0378e48901dddc588a6225fe4a4196884f056" translate="yes" xml:space="preserve">
          <source>To really poke around with Perl, you'll probably want to build Perl for debugging, like this:</source>
          <target state="translated">本当にPerlをいじくりまわすには、デバッグ用のPerlを構築した方がいいでしょう。</target>
        </trans-unit>
        <trans-unit id="224b47d42836cf02b0538bc7324878629aa47a30" translate="yes" xml:space="preserve">
          <source>To receive an announcement whenever a new version of this module is released, send a blank email message to &lt;code&gt;mjd-perl-tiefile-subscribe@plover.com&lt;/code&gt; .</source>
          <target state="translated">このモジュールの新しいバージョンがリリースされるたびにお知らせを受け取るには、空のメールメッセージを &lt;code&gt;mjd-perl-tiefile-subscribe@plover.com&lt;/code&gt; に送信してください。</target>
        </trans-unit>
        <trans-unit id="d3e33fd8f77a0950334d95b2b753813796d2bf20" translate="yes" xml:space="preserve">
          <source>To recursively create a directory structure, look at the &lt;code&gt;make_path&lt;/code&gt; function of the &lt;a href=&quot;../file/path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリ構造を再帰的に作成するには、&lt;a href=&quot;../file/path&quot;&gt;File :: Path&lt;/a&gt;モジュールの &lt;code&gt;make_path&lt;/code&gt; 関数を調べます。</target>
        </trans-unit>
        <trans-unit id="d93ce0279ba5e733f28599be83e53944021fc924" translate="yes" xml:space="preserve">
          <source>To recursively create a directory structure, look at the &lt;code&gt;make_path&lt;/code&gt; function of the &lt;a href=&quot;file/path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリ構造を再帰的に作成するには、&lt;a href=&quot;file/path&quot;&gt;File :: Path&lt;/a&gt;モジュールの &lt;code&gt;make_path&lt;/code&gt; 関数を調べます。</target>
        </trans-unit>
        <trans-unit id="b5946d1b5adc8bf79e8d8691892a42663cd834d2" translate="yes" xml:space="preserve">
          <source>To reduce the overhead as much as possible, only one possible location is checked to find the extension DLL (this location is where &lt;code&gt;make install&lt;/code&gt; would put the DLL). If not found, the search for the DLL is transparently delegated to &lt;code&gt;DynaLoader&lt;/code&gt; , which looks for the DLL along the &lt;code&gt;@INC&lt;/code&gt; list.</source>
          <target state="translated">オーバーヘッドをできるだけ減らすために、拡張DLLを見つけるために1つの可能な場所のみがチェックされます（この場所は、 &lt;code&gt;make install&lt;/code&gt; がDLLを配置する場所です）。見つからない場合、DLLの検索は &lt;code&gt;DynaLoader&lt;/code&gt; に透過的に委任され、 &lt;code&gt;@INC&lt;/code&gt; は@INCリストに沿ってDLLを検索します。</target>
        </trans-unit>
        <trans-unit id="98bed95392f2bd5c21b8012e731bec1f2530889e" translate="yes" xml:space="preserve">
          <source>To remove a directory tree recursively (&lt;code&gt;rm -rf&lt;/code&gt; on Unix) look at the &lt;code&gt;rmtree&lt;/code&gt; function of the &lt;a href=&quot;../file/path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリツリーを再帰的に削除するには（UNIXでは &lt;code&gt;rm -rf&lt;/code&gt; ）、&lt;a href=&quot;../file/path&quot;&gt;File :: Path&lt;/a&gt;モジュールの &lt;code&gt;rmtree&lt;/code&gt; 関数を調べます。</target>
        </trans-unit>
        <trans-unit id="4e5b819764f7105a80a7d510f2a867ba675bddec" translate="yes" xml:space="preserve">
          <source>To remove a directory tree recursively (&lt;code&gt;rm -rf&lt;/code&gt; on Unix) look at the &lt;code&gt;rmtree&lt;/code&gt; function of the &lt;a href=&quot;file/path&quot;&gt;File::Path&lt;/a&gt; module.</source>
          <target state="translated">ディレクトリツリーを再帰的に削除するには（UNIXでは &lt;code&gt;rm -rf&lt;/code&gt; ）、&lt;a href=&quot;file/path&quot;&gt;File :: Path&lt;/a&gt;モジュールの &lt;code&gt;rmtree&lt;/code&gt; 関数を調べます。</target>
        </trans-unit>
        <trans-unit id="e56141f1ebe96f14282b26d571378c274b2244ed" translate="yes" xml:space="preserve">
          <source>To remove a tied environment variable from the environment, assign it the undefined value</source>
          <target state="translated">紐付けられた環境変数を環境から削除するには、未定義の値を代入します。</target>
        </trans-unit>
        <trans-unit id="06b0ac63c637336d9c539fb315b8373179470836" translate="yes" xml:space="preserve">
          <source>To remove creation of the tied hash on each access, one may an extra level of indirection which allows a non-circular structure of references:</source>
          <target state="translated">各アクセスでのタイドハッシュの生成を削除するには、参照の非円形構造を可能にする余分なレベルのインダイレクトがあります。</target>
        </trans-unit>
        <trans-unit id="385dafb73da7d1789642356fd78d8d3446310a3d" translate="yes" xml:space="preserve">
          <source>To remove the magic from an SV, call the function sv_unmagic:</source>
          <target state="translated">SV からマジックを削除するには、関数 sv_unmagic を呼び出す。</target>
        </trans-unit>
        <trans-unit id="ee81225f636096e269a365626b3e0c2212110758" translate="yes" xml:space="preserve">
          <source>To report a new bug, visit:</source>
          <target state="translated">新しいバグを報告するには、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="935323786b12419a7345fc07129055605bd12b91" translate="yes" xml:space="preserve">
          <source>To retrieve data stored to disk, use &lt;code&gt;retrieve&lt;/code&gt; with a file name. The objects stored into that file are recreated into memory for you, and a</source>
          <target state="translated">ディスクに保存されているデータを取得 &lt;code&gt;retrieve&lt;/code&gt; は、ファイル名を指定してretrieveを使用します。そのファイルに保存されたオブジェクトがメモリに再作成され、</target>
        </trans-unit>
        <trans-unit id="4f95fbea27e1a9b8ba09786147eb856c1d1f83f4" translate="yes" xml:space="preserve">
          <source>To retrieve the &lt;code&gt;REGEXP&lt;/code&gt; object from the scalar in an XS function use the &lt;code&gt;SvRX&lt;/code&gt; macro, see &lt;a href=&quot;perlapi#REGEXP-Functions&quot;&gt;REGEXP Functions in perlapi&lt;/a&gt;.</source>
          <target state="translated">XS関数のスカラーから &lt;code&gt;REGEXP&lt;/code&gt; オブジェクトを取得するには、 &lt;code&gt;SvRX&lt;/code&gt; マクロを使用します。perlapiの&lt;a href=&quot;perlapi#REGEXP-Functions&quot;&gt;REGEXP関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1231633ff6452d875f890a43a2ae8ede0790e949" translate="yes" xml:space="preserve">
          <source>To return an empty list one must use a PPCODE: block and then not push return values on the stack.</source>
          <target state="translated">空のリストを返すためには、PPCODE:ブロックを使用し、スタックに戻り値をプッシュしないようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="c52a15c8b572dc0999ddd7a3d452b4f9cfbf130a" translate="yes" xml:space="preserve">
          <source>To run Perl on DPMI platforms one needs RSX runtime. This is needed under DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT (see &lt;a href=&quot;#Other-OSes&quot;&gt;Other OSes&lt;/a&gt;). RSX would not work with VCPI only, as EMX would, it requires DMPI.</source>
          <target state="translated">DPMIプラットフォームでPerlを実行するには、RSXランタイムが必要です。これは、DOS-inside-OS / 2、Win0.3 *、Win0.95、WinNTで必要です（&lt;a href=&quot;#Other-OSes&quot;&gt;他のOSを&lt;/a&gt;参照）。RSXはVCPIでのみ機能しません。EMXと同様に、DMPIが必要です。</target>
        </trans-unit>
        <trans-unit id="f4988afc10b11011c01fd1dc8e2d9efa2ca35527" translate="yes" xml:space="preserve">
          <source>To run a &lt;b&gt;program&lt;/b&gt; or &lt;b&gt;subroutine&lt;/b&gt;. (Has nothing to do with the &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; built-in, unless you&amp;rsquo;re trying to run a &lt;b&gt;signal handler&lt;/b&gt;.)</source>
          <target state="translated">&lt;b&gt;プログラム&lt;/b&gt;または&lt;b&gt;サブルーチン&lt;/b&gt;を実行する。（&lt;b&gt;シグナルハンドラー&lt;/b&gt;を実行しようとしない限り、組み込みの &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; とは関係ありません。）&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8cf4ac8bbb41685c2ce7804ccdb1791a6e3ce985" translate="yes" xml:space="preserve">
          <source>To run a Perl program from the Unix command line:</source>
          <target state="translated">Unix のコマンドラインから Perl プログラムを実行するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="69d193d311b7fdb3c43e19bb64a6bebcfed27d39" translate="yes" xml:space="preserve">
          <source>To run this code, &lt;code&gt;perl_run&lt;/code&gt; is called, which does a &lt;code&gt;JMPENV_PUSH&lt;/code&gt; then enters a runops loop. This loop executes the eval and tie ops on line 1, with the eval pushing a &lt;code&gt;CxEVAL&lt;/code&gt; onto the context stack.</source>
          <target state="translated">このコードを実行するには、 &lt;code&gt;perl_run&lt;/code&gt; はどのない、と呼ばれ &lt;code&gt;JMPENV_PUSH&lt;/code&gt; が、その後runopsループに入ります。このループは、evalを実行して1行目で &lt;code&gt;CxEVAL&lt;/code&gt; を結合し、evalがCxEVALをコンテキストスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="46ec5458708076d609a6883cd1bd780e161cc64e" translate="yes" xml:space="preserve">
          <source>To say the least, surrogate pairs were the biggest mistake of the Unicode Consortium. But according to the late Douglas Adams in</source>
          <target state="translated">控えめに言っても、サロゲートペアはユニコードコンソーシアムの最大の過ちでした。しかし、故ダグラス・アダムス氏によると</target>
        </trans-unit>
        <trans-unit id="48af12ca119bf709d476507ec2e3aea7bdcd0d97" translate="yes" xml:space="preserve">
          <source>To search the perlfaq question headings:</source>
          <target state="translated">perlfaqの質問の見出しを検索するには。</target>
        </trans-unit>
        <trans-unit id="518862144f077b9ba7e98c4f411c046f6e96affb" translate="yes" xml:space="preserve">
          <source>To see all about your machine, type</source>
          <target state="translated">お使いのマシンのすべてを表示するには、次のように入力してください。</target>
        </trans-unit>
        <trans-unit id="5d0d28f6946dedb31c299d2d78aa9802594a8195" translate="yes" xml:space="preserve">
          <source>To see how (un)packing works, we'll start with a simple template code where the conversion is in low gear: between the contents of a byte sequence and a string of hexadecimal digits. Let's use &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;, since this is likely to remind you of a dump program, or some desperate last message unfortunate programs are wont to throw at you before they expire into the wild blue yonder. Assuming that the variable &lt;code&gt;$mem&lt;/code&gt; holds a sequence of bytes that we'd like to inspect without assuming anything about its meaning, we can write</source>
          <target state="translated">パッキング（アン）パッキングのしくみを確認するには、バイトシーケンスの内容と16進数の文字列の間の変換が低速である単純なテンプレートコードから始めます。 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用してみましょう。これは、ダンププログラムを思い出させる可能性が高いためです。または、不幸な最後のメッセージで、不幸なプログラムがワイルドブルーオンダーに期限切れになる前にスローすることはありません。変数 &lt;code&gt;$mem&lt;/code&gt; がその意味について何も仮定せずに検査したいバイトのシーケンスを保持していると仮定すると、次のように書くことができます</target>
        </trans-unit>
        <trans-unit id="526ccfeab3729429cc060187cce1bbaba5ac3037" translate="yes" xml:space="preserve">
          <source>To see how this affects &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;, we'll compare these two C structures:</source>
          <target state="translated">これが &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; にどのように影響するかを確認するために、次の2つのC構造体を比較します。</target>
        </trans-unit>
        <trans-unit id="99fa402c0f19d397a266c609792e7a721baa908f" translate="yes" xml:space="preserve">
          <source>To see if a variable contains a reference, use the &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; function. It returns true if its argument is a reference. Actually it's a little better than that: It returns &lt;code&gt;HASH&lt;/code&gt; for hash references and &lt;code&gt;ARRAY&lt;/code&gt; for array references.</source>
          <target state="translated">変数に参照が含まれているかどうかを確認するには、 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 関数を使用します。引数が参照の場合、trueを返します。実際には、それより少し優れています。ハッシュ参照の場合は &lt;code&gt;HASH&lt;/code&gt; を返し、配列参照の場合は &lt;code&gt;ARRAY&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="960bf2c563408fba71fe24086af2e53cbf0767bd" translate="yes" xml:space="preserve">
          <source>To see if your system is affected by this discrepancy check if &lt;code&gt;getconf GNU_LIBPTHREAD_VERSION | &lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt; -q NPTL&lt;/code&gt; returns a false value. NTPL threads preserve the POSIX semantics.</source>
          <target state="translated">システムがこの不一致の影響を受けているかどうかを確認するには、 &lt;code&gt;getconf GNU_LIBPTHREAD_VERSION | &lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt; -q NPTL&lt;/code&gt; はfalse値を返します。NTPLスレッドはPOSIXセマンティクスを保持します。</target>
        </trans-unit>
        <trans-unit id="d211374e5db97da1828e5f0a6f84c0b749ec44e8" translate="yes" xml:space="preserve">
          <source>To see it in action, add a method</source>
          <target state="translated">動作を確認するには、メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="5e8654d4f5f9129c9cab32750ab5566521abf2dc" translate="yes" xml:space="preserve">
          <source>To see what a state description looks like, just run the following:</source>
          <target state="translated">状態の記述がどのようなものかを確認するには、以下を実行するだけです。</target>
        </trans-unit>
        <trans-unit id="1afd16a9742f3bb00f5d52a4bea0944a04f89bb4" translate="yes" xml:space="preserve">
          <source>To see what is installed on your system:</source>
          <target state="translated">お使いのシステムにインストールされているものを確認するには</target>
        </trans-unit>
        <trans-unit id="759c7cca5357567d905de52c1b1b6b667aaa23a6" translate="yes" xml:space="preserve">
          <source>To see what version is included on the DVD (assumed here to be mounted on /cdrom), issue this command:</source>
          <target state="translated">DVD(ここでは/cdromにマウントされていると仮定)にどのバージョンが含まれているかを確認するには、このコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="7ad61eadcf1dbdb7c99f44756b97def548456147" translate="yes" xml:space="preserve">
          <source>To see whether you have non-const data you can use a BSD (or GNU) compatible &lt;code&gt;nm&lt;/code&gt; :</source>
          <target state="translated">非constデータがあるかどうかを確認するには、BSD（またはGNU）互換の &lt;code&gt;nm&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ceecb8953e41093c57b8581763c4bd993092c9bf" translate="yes" xml:space="preserve">
          <source>To see why this is a problem, consider what can happen when two processes, say &quot;A&quot; and &quot;B&quot;, both want to update the same &lt;b&gt;DB_File&lt;/b&gt; database using the locking steps outlined above. Assume process &quot;A&quot; has already opened the database and has a write lock, but it hasn't actually updated the database yet (it has finished step 2, but not started step 3 yet). Now process &quot;B&quot; tries to open the same database - step 1 will succeed, but it will block on step 2 until process &quot;A&quot; releases the lock. The important thing to notice here is that at this point in time both processes will have cached identical initial blocks from the database.</source>
          <target state="translated">これが問題である理由を確認するには、「A」と「B」の2つのプロセスが両方とも、上記のロック手順を使用して同じ&lt;b&gt;DB_File&lt;/b&gt;データベースを更新する場合に何が起こるかを考えて&lt;b&gt;ください&lt;/b&gt;。プロセス &quot;A&quot;がすでにデータベースを開いており、書き込みロックがあるが、実際にはまだデータベースを更新していない（ステップ2は完了しているが、ステップ3はまだ開始していない）とします。ここでプロセス &quot;B&quot;が同じデータベースを開こうとします-ステップ1は成功しますが、プロセス &quot;A&quot;がロックを解放するまで、ステップ2でブロックされます。ここで注意すべき重要な点は、現時点で両方のプロセスがデータベースから同一の初期ブロックをキャッシュしていることです。</target>
        </trans-unit>
        <trans-unit id="887591ebb547202a2fbb02bece1d9984e9bcdec7" translate="yes" xml:space="preserve">
          <source>To see why, notice how you'll still have an issue on half-way-point alternation:</source>
          <target state="translated">その理由を見るためには、中途半端なポイントの交替にまだ問題があることに気づいてください。</target>
        </trans-unit>
        <trans-unit id="0cddf3be7ebfd9389288691711afdcfed8edf9c1" translate="yes" xml:space="preserve">
          <source>To send a &lt;b&gt;datagram&lt;/b&gt; to multiple destinations simultaneously.</source>
          <target state="translated">送信する&lt;b&gt;データグラムを&lt;/b&gt;同時に複数の宛先に。</target>
        </trans-unit>
        <trans-unit id="8617ca70598e41eabf7c915af7a92af825a55fcd" translate="yes" xml:space="preserve">
          <source>To send something to its correct destination. Often used metaphorically to indicate a transfer of programmatic control to a destination selected algorithmically, often by lookup in a table of function &lt;b&gt;references&lt;/b&gt; or, in the case of object &lt;b&gt;methods&lt;/b&gt;, by traversing the inheritance tree looking for the most specific definition for the method.</source>
          <target state="translated">正しい宛先に何かを送るため。多くの場合、比喩的に使用されて、アルゴリズムで選択された宛先へのプログラムによる制御の転送を示します。多くの場合、関数&lt;b&gt;参照の&lt;/b&gt;テーブルを検索するか、オブジェクト&lt;b&gt;メソッド&lt;/b&gt;の場合は、継承ツリーを走査して&lt;b&gt;メソッド&lt;/b&gt;の最も具体的な定義を探します。</target>
        </trans-unit>
        <trans-unit id="67e016f9948cc1473ec98e12bd274f9eaa7682bd" translate="yes" xml:space="preserve">
          <source>To set the state of a pragma:</source>
          <target state="translated">プラグマの状態を設定する。</target>
        </trans-unit>
        <trans-unit id="4d0f638abe1cc26ab6bbeb03cebb08b40820c287" translate="yes" xml:space="preserve">
          <source>To set your private value, call &lt;code&gt;Perl_mro_set_private_data()&lt;/code&gt; :</source>
          <target state="translated">プライベート値を設定するには、 &lt;code&gt;Perl_mro_set_private_data()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="39b42d6c90a6c04419bddc3aa56e776f03e6d4b1" translate="yes" xml:space="preserve">
          <source>To shut off its generation, pass the &lt;code&gt;NO_META&lt;/code&gt; flag to &lt;code&gt;WriteMakefile()&lt;/code&gt; .</source>
          <target state="translated">生成を停止するには、 &lt;code&gt;NO_META&lt;/code&gt; フラグを &lt;code&gt;WriteMakefile()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="57cf8244407c213f6cbced635b585a8f402b31ff" translate="yes" xml:space="preserve">
          <source>To signal the semaphore, replace &lt;code&gt;-1&lt;/code&gt; with &lt;code&gt;1&lt;/code&gt; . See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , and &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; documentation.</source>
          <target state="translated">セマフォに通知するには、 &lt;code&gt;-1&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に置き換えます。&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;、 &lt;code&gt;IPC::SysV&lt;/code&gt; 、および &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="d782cb39a280e66911e6595a3826686b674e633e" translate="yes" xml:space="preserve">
          <source>To signal the semaphore, replace &lt;code&gt;-1&lt;/code&gt; with &lt;code&gt;1&lt;/code&gt; . See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , and &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; documentation.</source>
          <target state="translated">セマフォに通知するには、 &lt;code&gt;-1&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に置き換えます。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;、 &lt;code&gt;IPC::SysV&lt;/code&gt; 、および &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="46e199b8e074ec6e1896ea95f9bad604e453a779" translate="yes" xml:space="preserve">
          <source>To signal to Perl that HMQ is not needed any more, call &lt;code&gt;perl_hmq_UNSET(serve)&lt;/code&gt; . Perl process will automatically morph/unmorph itself into/from a PM process if HMQ is needed/not-needed. Perl will automatically enable/disable &lt;code&gt;WM_QUIT&lt;/code&gt; message during shutdown if the message queue is served/not-served.</source>
          <target state="translated">HMQが不要になったことをPerlに通知するには、 &lt;code&gt;perl_hmq_UNSET(serve)&lt;/code&gt; を呼び出します。Perlプロセスは、HMQが必要/不要な場合、自動的にPMプロセスにモーフィング/アンモーフィングします。メッセージキューが処理される/処理されない場合、Perlはシャットダウン時に &lt;code&gt;WM_QUIT&lt;/code&gt; メッセージを自動的に有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="3868e3b616a54cb1bab8634fd841ed657adc2c50" translate="yes" xml:space="preserve">
          <source>To silently interpret it as the Perl operator, use the &lt;code&gt;CORE::&lt;/code&gt; prefix on the operator (e.g. &lt;code&gt;CORE::log($x)&lt;/code&gt; ) or declare the subroutine to be an object method (see &lt;a href=&quot;perlsub#Subroutine-Attributes&quot;&gt;Subroutine Attributes in perlsub&lt;/a&gt; or &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;).</source>
          <target state="translated">暗黙的にPerl演算子として解釈するには、演算子で &lt;code&gt;CORE::&lt;/code&gt; プレフィックスを使用するか（例： &lt;code&gt;CORE::log($x)&lt;/code&gt; ）、またはサブルーチンをオブジェクトメソッドとして宣言します（&lt;a href=&quot;perlsub#Subroutine-Attributes&quot;&gt;perlsub&lt;/a&gt;または&lt;a href=&quot;attributes&quot;&gt;attributesの&lt;/a&gt;サブルーチン属性を参照）。</target>
        </trans-unit>
        <trans-unit id="ea26257b4903cfdcc4f9b51c3c53cf94dc5f1003" translate="yes" xml:space="preserve">
          <source>To simplify multi-line substitutions, the &quot;.&quot; character never matches a newline unless you use the &lt;code&gt;/s&lt;/code&gt; modifier, which in effect tells Perl to pretend the string is a single line--even if it isn't.</source>
          <target state="translated">複数行の置換を簡略化するために、「。」 &lt;code&gt;/s&lt;/code&gt; 修飾子を使用しない限り、文字が改行と一致することはありません。これは、Perlに文字列が1行であるかのように見せかけます（一致しない場合でも）。</target>
        </trans-unit>
        <trans-unit id="3dcc0c984ac1c1f3aa01cd10ae020a1e23d2e144" translate="yes" xml:space="preserve">
          <source>To skip lines, use the looping controls. The &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; in this example skips comment lines, and the &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; stops all processing once it encounters either &lt;code&gt;__END__&lt;/code&gt; or &lt;code&gt;__DATA__&lt;/code&gt; .</source>
          <target state="translated">行をスキップするには、ループコントロールを使用します。 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; の例スキップコメント行で、そして &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、それはどちらか遭遇した後にすべての処理を停止し &lt;code&gt;__END__&lt;/code&gt; か &lt;code&gt;__DATA__&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cb7cc3fb6917e0db56d0ceef1f6b092afc65ddb" translate="yes" xml:space="preserve">
          <source>To solve this, you must manually use pipe(), fork(), and the form of open() which sets one file descriptor to another, as shown below:</source>
          <target state="translated">これを解決するには、以下に示すように、手動で pipe()、fork()、そしてあるファイル記述子を別のファイル記述子に設定する open()の形式を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="f205d5425879968b7952a3fb61c2ff97a391a194" translate="yes" xml:space="preserve">
          <source>To sort a hash by value, you'll need to use a &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; function. Here's a descending numeric sort of a hash by its values:</source>
          <target state="translated">ハッシュを値で &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; するには、ソート関数を使用する必要があります。以下は、値の降順のハッシュの数値ソートです。</target>
        </trans-unit>
        <trans-unit id="e22346e7b0a650eb196d705609c50726a647e816" translate="yes" xml:space="preserve">
          <source>To sort a hash by value, you'll need to use a &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; function. Here's a descending numeric sort of a hash by its values:</source>
          <target state="translated">ハッシュを値で &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; するには、ソート関数を使用する必要があります。以下は、値の降順のハッシュの数値ソートです。</target>
        </trans-unit>
        <trans-unit id="035b2f73f3e8b156397dc2189e758b10b01a049f" translate="yes" xml:space="preserve">
          <source>To sort a hash, start with the keys. In this example, we give the list of keys to the sort function which then compares them ASCIIbetically (which might be affected by your locale settings). The output list has the keys in ASCIIbetical order. Once we have the keys, we can go through them to create a report which lists the keys in ASCIIbetical order.</source>
          <target state="translated">ハッシュをソートするには、まずキーから始めます。この例では、キーのリストをソート関数に渡し、ASCIIbetical に比較しています (これはロケールの設定の影響を受けるかもしれません)。出力されるリストは、キーがASCIIbetical順に並んでいます。キーを取得したら、キーをASCIIbetical順に並べたレポートを作成することができます。</target>
        </trans-unit>
        <trans-unit id="bd567593644cab945269478fa56978a3d2bc8799" translate="yes" xml:space="preserve">
          <source>To specify a character by Unicode code point, use the form &lt;code&gt;\N{U+&lt;i&gt;code
point&lt;/i&gt;}&lt;/code&gt;, where</source>
          <target state="translated">Unicodeコードポイントで文字を指定するには、 &lt;code&gt;\N{U+&lt;i&gt;code point&lt;/i&gt;}&lt;/code&gt; の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="97bdead994a8b1301604dc655e33bb83cb6a1547" translate="yes" xml:space="preserve">
          <source>To specify a compression level when writing, append a digit between 0 and 9 to the mode string -- 0 means no compression and 9 means maximum compression. If no compression level is specified Z_DEFAULT_COMPRESSION is used.</source>
          <target state="translated">書き込み時の圧縮レベルを指定するには、モード文字列に 0 から 9 までの数字を追加します。圧縮レベルが指定されていない場合は、Z_DEFAULT_COMPRESSION が使用されます。</target>
        </trans-unit>
        <trans-unit id="edce8429b2a3fa7edc3e49d4ca87a0b2294c60e2" translate="yes" xml:space="preserve">
          <source>To specify a particular stack size for any individual thread, call &lt;code&gt;-&amp;gt;create()&lt;/code&gt; with a hash reference as the first argument:</source>
          <target state="translated">個々のスレッドに特定のスタックサイズを指定するには、最初の引数としてハッシュ参照を指定して &lt;code&gt;-&amp;gt;create()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5a3b28c1d56d62a0c685010a78c8616b6f249aaf" translate="yes" xml:space="preserve">
          <source>To specify a real-time timeout, supply the &lt;code&gt;LIFETIME&lt;/code&gt; option with a numeric value. Cached data will expire after this many seconds, and will be looked up afresh when it expires. When a data item is looked up afresh, its lifetime is reset.</source>
          <target state="translated">リアルタイムタイムアウトを指定するには、 &lt;code&gt;LIFETIME&lt;/code&gt; オプションに数値を指定します。キャッシュされたデータは、この数秒後に有効期限が切れ、期限切れになると新たに検索されます。データ項目が新たに検索されると、その存続期間はリセットされます。</target>
        </trans-unit>
        <trans-unit id="75872cec7b7dae2ec30afbe5f15f62f2ed47906e" translate="yes" xml:space="preserve">
          <source>To specify by name, the name of the character or character sequence goes between the curly braces.</source>
          <target state="translated">名前で指定する場合は、中括弧の間に文字または文字列の名前を入れます。</target>
        </trans-unit>
        <trans-unit id="e22be0e52c335b1ce8908cd9371ba0e4b96e3022" translate="yes" xml:space="preserve">
          <source>To specify the compression strategy when writing, append 'f' for filtered data, 'h' for Huffman only compression, or 'R' for run-length encoding. If no strategy is specified Z_DEFAULT_STRATEGY is used.</source>
          <target state="translated">書き込み時の圧縮方式を指定するには、フィルタリングされたデータの場合は 'f'、ハフマン圧縮のみの場合は 'h'、ランレングスエンコーディングの場合は 'R' を追加します。圧縮方式が指定されていない場合は、Z_DEFAULT_STRATEGY が使用されます。</target>
        </trans-unit>
        <trans-unit id="cb8a391550e8914db81270f773f4523451df8b90" translate="yes" xml:space="preserve">
          <source>To speed things up in complex installation scenarios, CPAN.pm keeps track of what it has already done and refuses to do some things a second time. A &lt;code&gt;get&lt;/code&gt; , a &lt;code&gt;make&lt;/code&gt; , and an &lt;code&gt;install&lt;/code&gt; are not repeated. A &lt;code&gt;test&lt;/code&gt; is repeated only if the previous test was unsuccessful. The diagnostic message when CPAN.pm refuses to do something a second time is one of</source>
          <target state="translated">複雑なインストールシナリオで処理を高速化するために、CPAN.pmはすでに実行した処理を追跡し、2度目の処理を拒否します。 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; 、および &lt;code&gt;install&lt;/code&gt; 繰り返されていません。 &lt;code&gt;test&lt;/code&gt; 前のテストが失敗した場合にのみ繰り返されます。CPAN.pmが2度目に何かを拒否したときの診断メッセージは次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="ee745e8e1ccd43545cce5d6e1098128c6d2cb42b" translate="yes" xml:space="preserve">
          <source>To split a string automatically, as the</source>
          <target state="translated">のように文字列を自動的に分割するには</target>
        </trans-unit>
        <trans-unit id="76a587334bce3d780e4ef5607b4eb7989a44b338" translate="yes" xml:space="preserve">
          <source>To start external programs with complicated command lines (like with pipes in between, and/or quoting of arguments), Perl uses an external shell. With EMX port such shell should be named</source>
          <target state="translated">複雑なコマンドライン(間にパイプを入れたり、引数を引用したり)を持つ外部プログラムを起動するために、Perl は外部シェルを使用します。EMX ポートでは、このようなシェルは</target>
        </trans-unit>
        <trans-unit id="4496b7043de2731c625ff5d9cbb9bfec5778dc82" translate="yes" xml:space="preserve">
          <source>To start perl by clicking on a perl source file, you have to make the according entries in HKCR (see</source>
          <target state="translated">perlのソースファイルをクリックしてperlを起動するには、HKCRの中にそれに応じたエントリを作成しなければなりません(</target>
        </trans-unit>
        <trans-unit id="ed415ca8982026bad9b823bf326a650e9d0848ae" translate="yes" xml:space="preserve">
          <source>To subtract a value from a variable, as in &amp;ldquo;decrement &lt;code&gt;$x&lt;/code&gt; &amp;rdquo; (meaning to remove 1 from its value) or &amp;ldquo;decrement &lt;code&gt;$x&lt;/code&gt; by 3&amp;rdquo;.</source>
          <target state="translated">「デクリメント &lt;code&gt;$x&lt;/code&gt; 」（その値から1を削除することを意味する）または「デクリメント &lt;code&gt;$x&lt;/code&gt; を3」のように、変数から値を減算します。</target>
        </trans-unit>
        <trans-unit id="c34bd44153421ecb4ee7a84a5cf2f9e94314d16d" translate="yes" xml:space="preserve">
          <source>To summarise:</source>
          <target state="translated">要約すると</target>
        </trans-unit>
        <trans-unit id="bdefe539f6f30e5536e03e0dcfcbf06113e55e75" translate="yes" xml:space="preserve">
          <source>To summarize, here are a number of possible methods for you to consider for storing the mapping between C and the Perl callback</source>
          <target state="translated">要約すると、C と Perl のコールバックの間のマッピングを保存するために考慮すべきいくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="87770a145a86a8f01c504f30ba378126d36ae639" translate="yes" xml:space="preserve">
          <source>To summarize, here's what to expect and how to handle locales in XS code:</source>
          <target state="translated">要約すると、XSコードでのロケールの扱い方と期待されることは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9eda1d19cb3d66414653545444049318272d3717" translate="yes" xml:space="preserve">
          <source>To summarize, the &lt;code&gt;\o{}&lt;/code&gt; form is always safe to use, and the other form is safe to use for code points through \077 when you use exactly three digits to specify them.</source>
          <target state="translated">要約すると、 &lt;code&gt;\o{}&lt;/code&gt; フォームは常に安全に使用でき、他のフォームは正確に3桁を使用して\ 077までのコードポイントを指定しても安全です。</target>
        </trans-unit>
        <trans-unit id="f40c24735c228769cecae3c743dcd1c13b34fed1" translate="yes" xml:space="preserve">
          <source>To summarize, this modifier provides protection for applications that don't wish to be exposed to all of Unicode. Specifying it twice gives added protection.</source>
          <target state="translated">要約すると、この修飾子は、Unicode のすべてにさらされたくないアプリケーションのための保護を提供します。この修飾子を2回指定すると、さらに保護が強化されます。</target>
        </trans-unit>
        <trans-unit id="8b52f75bf07c40cc3e2dd50eeec591de76cf40c0" translate="yes" xml:space="preserve">
          <source>To support potentially complex type mappings, if a typemap entry used by an XSUB contains a comment like &lt;code&gt;/*scope*/&lt;/code&gt; then scoping will be automatically enabled for that XSUB.</source>
          <target state="translated">潜在的に複雑な型マッピングをサポートするために、XSUBによって使用されるタイプマップエントリに &lt;code&gt;/*scope*/&lt;/code&gt; のようなコメントが含まれている場合、そのXSUBに対してスコープが自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="c8462b0ae01f912ec184e35a1a54c294d3db9c0b" translate="yes" xml:space="preserve">
          <source>To support these systems a dl_expandspec() function can be implemented either in the</source>
          <target state="translated">これらのシステムをサポートするために、 dl_expandspec()関数は</target>
        </trans-unit>
        <trans-unit id="28ae7b79101a8be6ce604e7c61e718194e3e904d" translate="yes" xml:space="preserve">
          <source>To swap pairs of characters in a string (with even length) one could use several techniques. First, let's use &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; to skip forward and back:</source>
          <target state="translated">（偶数の長さの）文字列の文字のペアを交換するには、いくつかの手法を使用できます。最初に、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;X&lt;/code&gt; を使用して前後にスキップします。</target>
        </trans-unit>
        <trans-unit id="52ed4dc484d91fd5d94539987c6af1829eb4d58f" translate="yes" xml:space="preserve">
          <source>To switch back to the default behaviour, use</source>
          <target state="translated">デフォルトの動作に戻すには</target>
        </trans-unit>
        <trans-unit id="9ad4d27e66821295806e39cdf16c87b63c90f1ed" translate="yes" xml:space="preserve">
          <source>To take a closer look at how the engine does optimizations, see the section &lt;a href=&quot;#Pragmas-and-debugging&quot;&gt;Pragmas and debugging&lt;/a&gt; below.</source>
          <target state="translated">エンジンが最適化を行う方法を詳しく見るには、以下の&lt;a href=&quot;#Pragmas-and-debugging&quot;&gt;プラグマとデバッグの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f3651fac40bf38f464aae40f7d0973a874e0f3ea" translate="yes" xml:space="preserve">
          <source>To test that your code is behaving correctly and not modifying COW buffers, on systems that support</source>
          <target state="translated">サポートしているシステムで、コードが正しく動作し、COW バッファを変更していないことをテストするには</target>
        </trans-unit>
        <trans-unit id="8ce0bdd874392ab18a8e9a217e048b7e9971ae31" translate="yes" xml:space="preserve">
          <source>To test whether a variable contains tainted data, and whose use would thus trigger an &quot;Insecure dependency&quot; message, you can use the &lt;code&gt;tainted()&lt;/code&gt; function of the Scalar::Util module, available in your nearby CPAN mirror, and included in Perl starting from the release 5.8.0. Or you may be able to use the following &lt;code&gt;is_tainted()&lt;/code&gt; function.</source>
          <target state="translated">変数に汚染されたデータが含まれているかどうかをテストし、その使用が「安全でない依存関係」メッセージをトリガーするかどうかをテストするには、Scalar :: Utilモジュールの &lt;code&gt;tainted()&lt;/code&gt; 関数を使用できます。リリース5.8.0から。または、次の &lt;code&gt;is_tainted()&lt;/code&gt; 関数を使用できる場合があります。</target>
        </trans-unit>
        <trans-unit id="521a49c8c35183a9a627a2f63a5d516c8a7cf5ba" translate="yes" xml:space="preserve">
          <source>To the Perl program that called fork(), all this is designed to be transparent. The parent returns from the fork() with a pseudo-process ID that can be subsequently used in any process-manipulation functions; the child returns from the fork() with a value of &lt;code&gt;0&lt;/code&gt; to signify that it is the child pseudo-process.</source>
          <target state="translated">fork（）を呼び出したPerlプログラムにとって、これはすべて透過的になるように設計されています。親は、後でプロセス操作関数で使用できる疑似プロセスIDでfork（）から戻ります。子はfork（）から値 &lt;code&gt;0&lt;/code&gt; で戻り、子の疑似プロセスであることを示します。</target>
        </trans-unit>
        <trans-unit id="c7e05b4fcf627d6e6c4197f19ffda73a879c664a" translate="yes" xml:space="preserve">
          <source>To the best of our ability, we will attempt to fix critical issues in the two most recent stable 5.x release series. Fixes for the current release series take precedence over fixes for the previous release series.</source>
          <target state="translated">可能な限り、最新の安定版 5.x リリースシリーズの 2 つの重要な問題の修正を試みます。現在のリリースシリーズの修正は、以前のリリースシリーズの修正よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="51a0f8c69bc4919eb0f20691df0fe50a577785df" translate="yes" xml:space="preserve">
          <source>To the best of our ability, we will provide &quot;critical&quot; security patches / releases for any major version of Perl whose 5.x.0 release was within the past three years. We can only commit to providing these for the most recent .y release in any 5.x.y series.</source>
          <target state="translated">できる限り、5.x.0 が過去 3 年以内にリリースされた Perl のメジャーバージョンに対して、「重要な」セキュリティパッチ/リリースを提供します。私たちは、5.x.y シリーズの中で最も新しい .y リリースに対してのみ、これらを提供することを約束することができます。</target>
        </trans-unit>
        <trans-unit id="6fa12fa0dac95b52f8a74aca03b7455d8e9dea13" translate="yes" xml:space="preserve">
          <source>To throw away the current &lt;b&gt;process&lt;/b&gt;&amp;rsquo;s program and replace it with another, without exiting the process or relinquishing any resources held (apart from the old memory image).</source>
          <target state="translated">現在の&lt;b&gt;プロセス&lt;/b&gt;のプログラムを破棄し、プロセスを終了したり、保持されているリソースを（古いメモリイメージを除いて）放棄したりせずに、別のプログラムに置き換えます。</target>
        </trans-unit>
        <trans-unit id="448a61a17f3cda496b5d3ba49da88ff7c85062ed" translate="yes" xml:space="preserve">
          <source>To transform a bit vector into a string or list of 0's and 1's, use these:</source>
          <target state="translated">ビットベクトルを文字列や0と1のリストに変換するには、これらを使用します。</target>
        </trans-unit>
        <trans-unit id="8d6d675a384b336013b57ff889fd3d31ada57c0a" translate="yes" xml:space="preserve">
          <source>To trim trailing newlines from text lines use &lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp()&lt;/a&gt;&lt;/code&gt;. With default settings that function looks for a trailing &lt;code&gt;\n&lt;/code&gt; character and thus trims in a portable way.</source>
          <target state="translated">テキスト行から末尾の改行を &lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp()&lt;/a&gt;&lt;/code&gt; するには、chomp（）を使用します。デフォルトの設定では、この関数は末尾の &lt;code&gt;\n&lt;/code&gt; 文字を探し、移植可能な方法でトリミングします。</target>
        </trans-unit>
        <trans-unit id="40f27a2565b48c1f61edc1951aa27946b5ec4637" translate="yes" xml:space="preserve">
          <source>To turn a hostname into a human-readable plain IP address use getaddrinfo() to turn the hostname into a list of socket structures, then getnameinfo() on each one to make it a readable IP address again.</source>
          <target state="translated">ホスト名を人間が読めるプレーンな IP アドレスにするには getaddrinfo()を使用してホスト名をソケット構造体のリストに変換し、それぞれのホスト名に対して getnameinfo()を使用して読める IP アドレスにします。</target>
        </trans-unit>
        <trans-unit id="f7838aca863be2066e77c33f9ec760e481423363" translate="yes" xml:space="preserve">
          <source>To turn one string representation into another by mapping each character of the source string to its corresponding character in the result string. Not to be confused with translation: for example, Greek</source>
          <target state="translated">ある文字列表現を、元の文字列の各文字を結果の文字列の対応する文字にマッピングすることで、別の文字列表現に変換すること。翻訳と混同されることはありません。</target>
        </trans-unit>
        <trans-unit id="2796f222a72ab401559f8c49bff573c8aee5f84f" translate="yes" xml:space="preserve">
          <source>To unambiguously refer to the built-in form, precede the built-in name with the special package qualifier &lt;code&gt;CORE::&lt;/code&gt; . For example, saying &lt;code&gt;CORE::open()&lt;/code&gt; always refers to the built-in &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt;, even if the current package has imported some other subroutine called &lt;code&gt;&amp;amp;open()&lt;/code&gt; from elsewhere. Even though it looks like a regular function call, it isn't: the CORE:: prefix in that case is part of Perl's syntax, and works for any keyword, regardless of what is in the CORE package. Taking a reference to it, that is, &lt;code&gt;\&amp;amp;CORE::open&lt;/code&gt; , only works for some keywords. See &lt;a href=&quot;core&quot;&gt;CORE&lt;/a&gt;.</source>
          <target state="translated">組み込みフォームを明確に参照するには、組み込み名の前に特別なパッケージ修飾子 &lt;code&gt;CORE::&lt;/code&gt; ます。たとえば、言って &lt;code&gt;CORE::open()&lt;/code&gt; 常にを指しビルトイン &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 、現在のパッケージと呼ばれるいくつかの他のサブルーチン輸入している場合でも &lt;code&gt;&amp;amp;open()&lt;/code&gt; 別の場所からを。通常の関数呼び出しのように見えますが、そうではありません。その場合のCORE ::プレフィックスはPerlの構文の一部であり、COREパッケージの内容に関係なく、任意のキーワードで機能します。参照、つまり &lt;code&gt;\&amp;amp;CORE::open&lt;/code&gt; を使用すると、一部のキーワードでのみ機能します。&lt;a href=&quot;core&quot;&gt;COREを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="248423c43b116b150a001ee976cc646676062436" translate="yes" xml:space="preserve">
          <source>To uncompress</source>
          <target state="translated">圧縮を解除するには</target>
        </trans-unit>
        <trans-unit id="218af45982210497e46e853ffef0192283629105" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.1950&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;にある &quot;*.txt.1950 &quot;に一致するすべてのファイルを解凍し、圧縮データを同じディレクトリに保存するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="5ddcb357cfd2b7762051e66890c8b84e7d960611" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.1951&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;にある &quot;*.txt.1951 &quot;に一致するファイルをすべて解凍し、圧縮データを同じディレクトリに保存するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0e932ba5dc24bfd784757a246bd08027f46d4625" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.Compressed&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ「/my/home」にある「*.txt.Compressed」に一致するファイルをすべて解凍し、圧縮データを同じディレクトリに保存するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="29a087f9cfa51d4e0c2f6a475a11f449e63412aa" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.bz2&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;にある &quot;*.txt.bz2 &quot;に一致するすべてのファイルを解凍し、圧縮データを同じディレクトリに保存するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="61aa1a4650d4e1d7c6939abfa456f5aeb3345d9a" translate="yes" xml:space="preserve">
          <source>To uncompress all files in the directory &quot;/my/home&quot; that match &quot;*.txt.gz&quot; and store the compressed data in the same directory</source>
          <target state="translated">ディレクトリ&quot;/my/home &quot;にある &quot;*.txt.gz &quot;に一致するすべてのファイルを解凍し、圧縮データを同じディレクトリに保存するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="2754edb3f14d19ed8eebfcca373f83ac4a3282e7" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1950 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to a positive number between 8 and 15.</source>
          <target state="translated">RFC 1950データストリームを解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を8〜15の正の数に設定します。</target>
        </trans-unit>
        <trans-unit id="44083e3f2b591fd2c77505655cdb2c8f0aceb349" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1950 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to a positive number.</source>
          <target state="translated">RFC 1950データストリームを解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を正の数に設定します。</target>
        </trans-unit>
        <trans-unit id="ceb9d1b68954b1740a461cdcd4976b0e567a28d9" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1951 data stream, set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;-MAX_WBITS&lt;/code&gt; .</source>
          <target state="translated">RFC 1951データストリームを解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;-MAX_WBITS&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="42e613bd86be8bd3cb751a2f5e9d0b238c337e5e" translate="yes" xml:space="preserve">
          <source>To uncompress an RFC 1952 data stream (i.e. gzip), set &lt;code&gt;WindowBits&lt;/code&gt; to &lt;code&gt;WANT_GZIP&lt;/code&gt; .</source>
          <target state="translated">RFC 1952データストリーム（gzipなど）を解凍するには、 &lt;code&gt;WindowBits&lt;/code&gt; を &lt;code&gt;WANT_GZIP&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="be309868d7c608c972ac92d2374d84d68bbcff87" translate="yes" xml:space="preserve">
          <source>To understand what kinds of incompatibilities one may expect, and in the rare case that the version of Perl on your machine is older than this document, see the section on &quot;Troubleshooting these Examples&quot; for more information.</source>
          <target state="translated">どのような種類の非互換性が考えられるかを理解するために、また、まれにマシン上のPerlのバージョンがこのドキュメントよりも古い場合には、「これらの例のトラブルシューティング」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6b79315e2daa0488ef5b85ec7b3ded4c1bf9ff5d" translate="yes" xml:space="preserve">
          <source>To understand what the above</source>
          <target state="translated">上記の内容を理解するために</target>
        </trans-unit>
        <trans-unit id="84e6e80a4aa5a302f6ddaa79d242cdcf126f821b" translate="yes" xml:space="preserve">
          <source>To uppercase or lowercase several characters, one might want to use &lt;code&gt;\L&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; , which will lowercase/uppercase all characters following them, until either the end of the pattern or the next occurrence of &lt;code&gt;\E&lt;/code&gt; , whichever comes first. They provide functionality similar to what the functions &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc&lt;/a&gt;&lt;/code&gt; provide.</source>
          <target state="translated">複数の文字を大文字または小文字にするには、 &lt;code&gt;\L&lt;/code&gt; または &lt;code&gt;\U&lt;/code&gt; を使用します。これにより、パターンの終わりまたは &lt;code&gt;\E&lt;/code&gt; 次の出現のいずれか早い方まで、それらに続くすべての文字が小文字/大文字になります。 &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc&lt;/a&gt;&lt;/code&gt; が提供する機能と同様の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="fd3b3ccd26f316b1795adeb89ffff2bedd268ce6" translate="yes" xml:space="preserve">
          <source>To use 'load_remote' or 'autoload_remote', specify at 'use'.</source>
          <target state="translated">load_remote' または 'autoload_remote' を使用する場合は use で指定します。</target>
        </trans-unit>
        <trans-unit id="8a5610b8c5bc5858528e5c0711e8cd5aeeeaeb22" translate="yes" xml:space="preserve">
          <source>To use &lt;b&gt;AutoLoader&lt;/b&gt;, the author of a module has to place the definitions of subroutines to be autoloaded after an &lt;code&gt;__END__&lt;/code&gt; token. (See &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt;.) The &lt;b&gt;AutoSplit&lt;/b&gt; module can then be run manually to extract the definitions into individual files</source>
          <target state="translated">&lt;b&gt;AutoLoader&lt;/b&gt;を使用するには、モジュールの作成者が &lt;code&gt;__END__&lt;/code&gt; トークンの後にオートロードされるサブルーチンの定義を配置する必要があります。（&lt;a href=&quot;perldata&quot;&gt;perldataを&lt;/a&gt;参照してください。）&lt;b&gt;AutoSplit&lt;/b&gt;モジュールを手動で実行して、定義を個々のファイルに抽出できます。</target>
        </trans-unit>
        <trans-unit id="d246c1b4a8c6fc55969eb14bc150616f75299064" translate="yes" xml:space="preserve">
          <source>To use Getopt::Long from a Perl program, you must include the following line in your Perl program:</source>
          <target state="translated">Perl プログラムから Getopt::Long を使用するには、以下の行を Perl プログラムに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="6a708529644756357339b6bd4e7ce1cb0f6dc3ee" translate="yes" xml:space="preserve">
          <source>To use a here-document to assign an array, one line per element, you might use an approach like this:</source>
          <target state="translated">her-documentを使って要素ごとに1行ずつ配列を代入するには、次のようなアプローチを使うとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="d339f8f2813eea011c2650e8b1ed1fdac84e3d1c" translate="yes" xml:space="preserve">
          <source>To use a lexical subroutine from inside the subroutine itself, you must predeclare it. The &lt;code&gt;sub foo {...}&lt;/code&gt; subroutine definition syntax respects any previous &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;;&lt;/code&gt; or &lt;code&gt;state &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;;&lt;/code&gt; declaration.</source>
          <target state="translated">サブルーチン自体の内部から字句サブルーチンを使用するには、それを事前宣言する必要があります。 &lt;code&gt;sub foo {...}&lt;/code&gt; サブルーチン定義の構文点以前の &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;;&lt;/code&gt; または &lt;code&gt;state &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;;&lt;/code&gt; 宣言。</target>
        </trans-unit>
        <trans-unit id="0a6c22616496274a8c0483ef0b81201680edefba" translate="yes" xml:space="preserve">
          <source>To use in your program as a pragma, merely invoke</source>
          <target state="translated">プログラム内でプラグマとして使用するには、単に</target>
        </trans-unit>
        <trans-unit id="c9702d448044d584ba0f08cf12e0416ad038a1b6" translate="yes" xml:space="preserve">
          <source>To use it more practically, you have to give the names of encodings to check (</source>
          <target state="translated">より実用的に使うためには、チェックするエンコーディングの名前を指定しなければなりません (</target>
        </trans-unit>
        <trans-unit id="22588255917f935bc82a9b5e6907a6c5af5e0773" translate="yes" xml:space="preserve">
          <source>To use the OVERLOAD: keyword, create an XS function which takes three input parameters ( or use the c style '...' definition) like this:</source>
          <target state="translated">OVERLOAD:キーワードを使用するには、以下のように3つの入力パラメータ(またはcスタイルの'...'定義を使用)を受け取るXS関数を作成します。</target>
        </trans-unit>
        <trans-unit id="3dc634fc1f1bc1b5d00fde6bff6b384f2eeb3f97" translate="yes" xml:space="preserve">
          <source>To use the Perl you just installed you will need to add a new entry to your PATH environment variable: &lt;code&gt;$INST_TOP\bin&lt;/code&gt; , e.g.</source>
          <target state="translated">インストールしたPerlを使用するには、PATH環境変数に新しいエントリを追加する必要があります。 &lt;code&gt;$INST_TOP\bin&lt;/code&gt; 、たとえば</target>
        </trans-unit>
        <trans-unit id="7bc829cf0e8a5c97f97a31b7c617e9428478c19b" translate="yes" xml:space="preserve">
          <source>To use the forked debugger, you need to have the default display set to an X-11 Server and some environment variables set that Unix expects.</source>
          <target state="translated">フォークされたデバッガを使用するには、デフォルトの表示を X-11 Server に設定し、Unix が期待する環境変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc207fecfdae515e813f72872e49086f5b78c28e" translate="yes" xml:space="preserve">
          <source>To use the module it is necessary to do the following:</source>
          <target state="translated">モジュールを使用するには、以下のようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="dd4bd0185af39ed243608e8976fc475a01dc61d4" translate="yes" xml:space="preserve">
          <source>To use this expiration policy, the user would say</source>
          <target state="translated">この有効期限ポリシーを使用するには、ユーザーは次のように言います。</target>
        </trans-unit>
        <trans-unit id="538ca1c3044001d3cfa088cc4be7d0f4954981d6" translate="yes" xml:space="preserve">
          <source>To use this method you must have the Digest::MD5 or the MD5 module installed, otherwise this method will return</source>
          <target state="translated">このメソッドを使用するには、Digest::MD5 または MD5 モジュールがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="b3ee11508a4f000324b572266622a1fcc5b08715" translate="yes" xml:space="preserve">
          <source>To use this performance boost, set the current directory via</source>
          <target state="translated">このパフォーマンスの向上を利用するには、カレントディレクトリを</target>
        </trans-unit>
        <trans-unit id="38c026c273aff885d8062765e295cb0676868f0f" translate="yes" xml:space="preserve">
          <source>To warn with a simple string message, the &lt;a href=&quot;#warn&quot;&gt;warn&lt;/a&gt; function may be more convenient.</source>
          <target state="translated">単純な文字列メッセージで&lt;a href=&quot;#warn&quot;&gt;警告&lt;/a&gt;するには、関数warnの方が便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="be15e0c4892f05af6b92d2d4a6be1a0a5f9a6dcd" translate="yes" xml:space="preserve">
          <source>To watch the tail of a dynamically growing logfile, (from the command line):</source>
          <target state="translated">動的に成長するログファイルの末尾を見るには、(コマンドラインから)</target>
        </trans-unit>
        <trans-unit id="a70297b48e7206cae4fcb0090dd44f6d0f3207a8" translate="yes" xml:space="preserve">
          <source>To work around this bug, surround the code with a second set of braces. This creates an inner block that defeats the &lt;code&gt;MULTICALL&lt;/code&gt; logic, and does get fresh SVs allocated each time:</source>
          <target state="translated">このバグを回避するには、コードを2組の中括弧で囲みます。これにより、 &lt;code&gt;MULTICALL&lt;/code&gt; ロジックを無効にする内部ブロックが作成され、毎回新しいSVが割り当てられます。</target>
        </trans-unit>
        <trans-unit id="df77a0e9f9993c56d24066721ca0f8c51a0345d4" translate="yes" xml:space="preserve">
          <source>To work around this, set environment variables as part of the</source>
          <target state="translated">これを回避するには、環境変数を</target>
        </trans-unit>
        <trans-unit id="67bc56a45c2b844733bf04f643db3f4d6359ddb1" translate="yes" xml:space="preserve">
          <source>To work with only alphanumeric sequences (including underscores), you might consider</source>
          <target state="translated">英数字のシーケンス(アンダースコアを含む)のみを扱うには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="737fcabd51bb1faacb7059e47b96e0c587be8c5f" translate="yes" xml:space="preserve">
          <source>To write a test for your new (and probably not even done) module, create a new file called</source>
          <target state="translated">新しい (おそらく完成していない)モジュールのテストを書くには、新しい</target>
        </trans-unit>
        <trans-unit id="02bfda7919e7b9ec9d9ea9a01639287be236928c" translate="yes" xml:space="preserve">
          <source>To write platform-independent code, you must use &lt;code&gt;\N{&lt;i&gt;NAME&lt;/i&gt;}&lt;/code&gt; instead, like &lt;code&gt;\N{ESCAPE}&lt;/code&gt; or &lt;code&gt;\N{U+001B}&lt;/code&gt; , see &lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt;.</source>
          <target state="translated">書き込みプラットフォームに依存しないコードに、あなたが使用する必要があります &lt;code&gt;\N{&lt;i&gt;NAME&lt;/i&gt;}&lt;/code&gt; の代わりに、のような &lt;code&gt;\N{ESCAPE}&lt;/code&gt; または &lt;code&gt;\N{U+001B}&lt;/code&gt; 参照してください&lt;a href=&quot;charnames&quot;&gt;charnamesを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32379df686c78a3422056dcfb4c9b1da18747d64" translate="yes" xml:space="preserve">
          <source>To yield a usable Perl variable, characters that are not part of the syntax for variables are translated to underscores. For example, &lt;code&gt;--fpp-struct-&lt;a href=&quot;../functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; will set the variable &lt;code&gt;$opt_fpp_struct_return&lt;/code&gt; . Note that this variable resides in the namespace of the calling program, not necessarily &lt;code&gt;main&lt;/code&gt; . For example:</source>
          <target state="translated">使用可能なPerl変数を生成するために、変数の構文の一部ではない文字は下線に変換されます。たとえば、-- &lt;code&gt;--fpp-struct-&lt;a href=&quot;../functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; は変数 &lt;code&gt;$opt_fpp_struct_return&lt;/code&gt; を設定します。この変数は呼び出しプログラムの名前空間にあり、必ずしも &lt;code&gt;main&lt;/code&gt; ではないことに注意してください。例えば：</target>
        </trans-unit>
        <trans-unit id="33224443be18843a7174975c46578d74787bc749" translate="yes" xml:space="preserve">
          <source>Tobias Brox, tobiasb@tobiasb.funcom.com</source>
          <target state="translated">トビアス・ブロックス、tobiasb@tobiasb.funcom.com</target>
        </trans-unit>
        <trans-unit id="ec7a57e5883d57c428d8e15819e5060eeed56435" translate="yes" xml:space="preserve">
          <source>Together, these categories go a long way towards being able to customize a single program to run in many different locations. But there are deficiencies, so keep reading.</source>
          <target state="translated">これらのカテゴリを合わせると、1つのプログラムをカスタマイズして様々な場所で動作させることができるようになります。しかし、欠点もありますので、読み進めてください。</target>
        </trans-unit>
        <trans-unit id="6f1eb05b47fbf56bdd9586b2ff6beeffab4ce59f" translate="yes" xml:space="preserve">
          <source>Together, these two features are intended to replace the historical &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; function, which has (at least) two bugs in it, that cannot easily be fixed without breaking existing programs:</source>
          <target state="translated">これらの2つの機能は共に、（少なくとも）2つのバグがあり、既存のプログラムを壊さなければ簡単に修正できない、歴史的な &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 関数を置き換えることを目的としています。</target>
        </trans-unit>
        <trans-unit id="5379fd6502d08f80951bb93415834c8443e36cd5" translate="yes" xml:space="preserve">
          <source>Toggle trace mode (see also the &lt;code&gt;AutoTrace&lt;/code&gt; option). Optional argument is the maximum number of levels to trace below the current one; anything deeper than that will be silent.</source>
          <target state="translated">トレースモードを切り替えます（ &lt;code&gt;AutoTrace&lt;/code&gt; オプションも参照してください）。オプションの引数は、現在のレベルの下でトレースするレベルの最大数です。それより深いものは沈黙します。</target>
        </trans-unit>
        <trans-unit id="f422da5828ccca294dcf6d07ee5efb74761f28a1" translate="yes" xml:space="preserve">
          <source>Tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserからのトークン</target>
        </trans-unit>
        <trans-unit id="685cbbd2434336a1c0d592cb5e469ec23061ee59" translate="yes" xml:space="preserve">
          <source>Tom Christiansen</source>
          <target state="translated">トム・クリスチャンセン</target>
        </trans-unit>
        <trans-unit id="8be2aa955349ba9da124a5ab00db7e6f88ee861a" translate="yes" xml:space="preserve">
          <source>Tom Christiansen &amp;lt;</source>
          <target state="translated">トム・クリスチャンセン&amp;lt;</target>
        </trans-unit>
        <trans-unit id="5ca9f204e050f14afeeca056eec19f3529541293" translate="yes" xml:space="preserve">
          <source>Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt; wrote this, with occasional kibbitzing from Larry Wall and Jeffrey Friedl in the background.</source>
          <target state="translated">トム・クリスチャンセン&amp;lt;tchrist@perl.com&amp;gt;がこれを書いており、バックグラウンドには、ラリー・ウォールとジェフリー・フリードルの奇抜な場面があります。</target>
        </trans-unit>
        <trans-unit id="8e134c4a6e79e76b0db622556fcf6a08eb055742" translate="yes" xml:space="preserve">
          <source>Tom Christiansen wrote the original perlfaq then expanded it with the help of Nat Torkington. brian d foy substantially edited and expanded the perlfaq. perlfaq-workers and others have also supplied feedback, patches and corrections over the years.</source>
          <target state="translated">Tom Christiansen氏がオリジナルのperlfaqを書き、Nat Torkington氏の助けを借りて拡張しました。 brian d foy氏は実質的にperlfaqを編集し、拡張しました。</target>
        </trans-unit>
        <trans-unit id="13f0322dc66b8435d53d03e97ab3bdb9a5e08c67" translate="yes" xml:space="preserve">
          <source>Tom Christiansen wrote the original version of this document. brian d foy &lt;code&gt;&amp;lt;bdfoy@cpan.org&amp;gt;&lt;/code&gt; wrote this version. See the individual perlfaq documents for additional copyright information.</source>
          <target state="translated">トム・クリスチャンセンはこの文書のオリジナル版を書きました。brian d foy &lt;code&gt;&amp;lt;bdfoy@cpan.org&amp;gt;&lt;/code&gt; がこのバージョンを作成しました。追加の著作権情報については、個々のperlfaq文書を参照してください。</target>
        </trans-unit>
        <trans-unit id="594631f752605ca51961fa701a3edb58acb263cd" translate="yes" xml:space="preserve">
          <source>Tom Christiansen, &amp;lt;tchrist@perl.com&amp;gt;.</source>
          <target state="translated">Tom Christiansen、&amp;lt;tchrist@perl.com&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="95a03ceecd01437e5e0609dbfa8dc64983a0ce69" translate="yes" xml:space="preserve">
          <source>Tom Christiansen, with occasional vestiges of Larry Wall's original version and suggestions from the Perl Porters.</source>
          <target state="translated">Tom Christiansen、時折ラリー・ウォールのオリジナル版の名残とPerl Portersからの提案があります。</target>
        </trans-unit>
        <trans-unit id="476ccb2f91007a71136d530d51755067de803643" translate="yes" xml:space="preserve">
          <source>Tom Phoenix, &amp;lt;</source>
          <target state="translated">トムフェニックス、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="ba42647932e0b5434947f286f404459ce1a76e83" translate="yes" xml:space="preserve">
          <source>Too few records will be retrieved.</source>
          <target state="translated">レコードが少なすぎると検索されてしまいます。</target>
        </trans-unit>
        <trans-unit id="0f85c6fbc6b17f4b329c823a126de114fb51f097" translate="yes" xml:space="preserve">
          <source>Too many will be retrieved.</source>
          <target state="translated">多すぎると回収されてしまいます。</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="2f4169d30e0802a9d8a3d39c5549f0963dd393e1" translate="yes" xml:space="preserve">
          <source>Tools &amp;amp; SDK</source>
          <target state="translated">ツールとSDK</target>
        </trans-unit>
        <trans-unit id="a00a8f35172e2849241ce00e52e7b7a9a0047d25" translate="yes" xml:space="preserve">
          <source>Top of Form Processing</source>
          <target state="translated">フォーム処理のトップ</target>
        </trans-unit>
        <trans-unit id="ee80479b0fa9a2d2efdf0ff5851a9a2f37c4056d" translate="yes" xml:space="preserve">
          <source>Top of form processing is handled automatically: if there is insufficient room on the current page for the formatted record, the page is advanced by writing a form feed and a special top-of-page format is used to format the new page header before the record is written. By default, the top-of-page format is the name of the filehandle with &quot;_TOP&quot; appended, or &quot;top&quot; in the current package if the former does not exist. This would be a problem with autovivified filehandles, but it may be dynamically set to the format of your choice by assigning the name to the &lt;code&gt;$^&lt;/code&gt; variable while that filehandle is selected. The number of lines remaining on the current page is in variable &lt;code&gt;$-&lt;/code&gt; , which can be set to &lt;code&gt;0&lt;/code&gt; to force a new page.</source>
          <target state="translated">トップフォームの処理は自動的に処理されます。現在のページにフォーマットされたレコードのための十分なスペースがない場合、フォームフィードを書き込むことによってページが進み、特別なトップオブページフォーマットが新しいページヘッダーのフォーマットに使用されます。レコードが書き込まれます。デフォルトでは、ページの先頭の形式は、「_ TOP」が追加されたファイルハンドルの名前、または前者が存在しない場合は現在のパッケージの「top」の名前です。これはautovivifiedファイルハンドルで問題になりますが、そのファイルハンドルが選択されている間に &lt;code&gt;$^&lt;/code&gt; 変数に名前を割り当てることにより、選択したフォーマットに動的に設定できます。現在のページに残っている行数は変数 &lt;code&gt;$-&lt;/code&gt; にあり、 &lt;code&gt;0&lt;/code&gt; に設定して新しいページを強制できます。</target>
        </trans-unit>
        <trans-unit id="9d8d0feb3edb0eff1e9ffe23486e4f54336c8d4e" translate="yes" xml:space="preserve">
          <source>Top-of-form processing is by default handled by a format with the same name as the current filehandle with &quot;_TOP&quot; concatenated to it. It's triggered at the top of each page. See &lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;.</source>
          <target state="translated">Top-of-form処理は、デフォルトで、現在のファイルハンドルと同じ名前の &quot;_TOP&quot;が連結された形式で処理されます。各ページの上部でトリガーされます。&lt;a href=&quot;functions/write&quot;&gt;書き込みを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="855b740deb0e234d1668b8ec10c825eb8a3450f0" translate="yes" xml:space="preserve">
          <source>Total CPU (User + System) of any children processes.</source>
          <target state="translated">任意の子プロセスの総CPU(ユーザー+システム)。</target>
        </trans-unit>
        <trans-unit id="3481164ed61c4f3a7713de67224c54bcab0e71f6" translate="yes" xml:space="preserve">
          <source>Total CPU (User + System) of the main (parent) process.</source>
          <target state="translated">メイン(親)プロセスの総CPU(ユーザー+システム)。</target>
        </trans-unit>
        <trans-unit id="1e2c196e8d42960075bf83565f85bd785a488f4c" translate="yes" xml:space="preserve">
          <source>Total CPU of parent and any children processes.</source>
          <target state="translated">親プロセスと任意の子プロセスの合計CPU。</target>
        </trans-unit>
        <trans-unit id="4b32a7b148f732eb014244c4bbbcbbea6216c149" translate="yes" xml:space="preserve">
          <source>Trace mode (similar to &lt;code&gt;t&lt;/code&gt; command, but can be put into &lt;code&gt;PERLDB_OPTS&lt;/code&gt; ).</source>
          <target state="translated">トレースモード（ &lt;code&gt;t&lt;/code&gt; コマンドに似ていますが、 &lt;code&gt;PERLDB_OPTS&lt;/code&gt; に入れることができます）。</target>
        </trans-unit>
        <trans-unit id="4d8c4db1a294c0162454110ac7c8472297017033" translate="yes" xml:space="preserve">
          <source>Trace through execution of &lt;code&gt;expr&lt;/code&gt; . Optional first argument is the maximum number of levels to trace below the current one; anything deeper than that will be silent. See &lt;a href=&quot;perldebguts#Frame-Listing-Output-Examples&quot;&gt;Frame Listing Output Examples in perldebguts&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;expr&lt;/code&gt; の実行をトレースします。オプションの最初の引数は、現在のレベルの下でトレースするレベルの最大数です。それより深いものは沈黙します。&lt;a href=&quot;perldebguts#Frame-Listing-Output-Examples&quot;&gt;例については、perldebgutsのフレームリスト出力の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="24be5dbb481a63442832782f4da3ef4f0dc024ff" translate="yes" xml:space="preserve">
          <source>Trace variable used when Perl is run in debugging mode, with the &lt;b&gt;-d&lt;/b&gt; switch. This is the C variable which corresponds to Perl's $DB::trace variable. See &lt;code&gt;PL_DBsingle&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;-d&lt;/b&gt;スイッチを指定して、Perlをデバッグモードで実行するときに使用されるトレース変数。これは、Perlの$ DB :: trace変数に対応するC変数です。 &lt;code&gt;PL_DBsingle&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="411aea8f76aef96f5e36c8b291c19e9ceb9466d1" translate="yes" xml:space="preserve">
          <source>Traces changes to Perl's interpreter state. You can internalize this as tracing changes to Perl's &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; variable, especially since the values for &lt;code&gt;NEWPHASE&lt;/code&gt; and &lt;code&gt;OLDPHASE&lt;/code&gt; are the strings that &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; reports.</source>
          <target state="translated">Perlのインタープリター状態の変更をトレースします。これは、特に &lt;code&gt;NEWPHASE&lt;/code&gt; および &lt;code&gt;OLDPHASE&lt;/code&gt; の値が &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; 報告する文字列であるため、Perlの &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; 変数へのトレース変更として内部化できます。</target>
        </trans-unit>
        <trans-unit id="0786ec1507cde8f738cd5528e03a2b67d40c8c91" translate="yes" xml:space="preserve">
          <source>Traces the entry of any subroutine. Note that all of the variables refer to the subroutine that is being invoked; there is currently no way to get ahold of any information about the subroutine's</source>
          <target state="translated">任意のサブルーチンのエントリをトレースします。すべての変数は呼び出されたサブルーチンを参照していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9f47af59eb569759ff1e8a42a52da14fba8b1705" translate="yes" xml:space="preserve">
          <source>Traces the execution of each opcode in the Perl runloop. This probe is fired before the opcode is executed. When the Perl debugger is enabled, the DTrace probe is fired</source>
          <target state="translated">Perl のランループ内の各オペコードの実行をトレースします。このプローブは、オペコードが実行される前に実行されます。Perl デバッガが有効な場合、DTrace プローブが実行されます。</target>
        </trans-unit>
        <trans-unit id="bbb01fbe6bfaaec090a44633982fb31ae18d0d39" translate="yes" xml:space="preserve">
          <source>Traces the exit of any subroutine. Note that all of the variables refer to the subroutine that is returning; there is currently no way to get ahold of any information about the subroutine's</source>
          <target state="translated">任意のサブルーチンの終了を追跡します。すべての変数はリターンするサブルーチンを参照していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="469260e080c9b35d7ee5b388f5235f91978c75b9" translate="yes" xml:space="preserve">
          <source>Traditional form:</source>
          <target state="translated">伝統的な形。</target>
        </trans-unit>
        <trans-unit id="0ad67b0aa9abbb10a0d4b2ca67f1c4ff5d61a0ed" translate="yes" xml:space="preserve">
          <source>Traditionally END blocks have been executed at the end of the perl_run. This causes problems for applications that never call perl_run. Since perl 5.7.2 you can specify &lt;code&gt;PL_exit_flags |= PERL_EXIT_DESTRUCT_END&lt;/code&gt; to get the new behaviour. This also enables the running of END blocks if the perl_parse fails and &lt;code&gt;perl_destruct&lt;/code&gt; will return the exit value.</source>
          <target state="translated">従来、ENDブロックはperl_runの最後に実行されていました。これにより、perl_runを呼び出さないアプリケーションで問題が発生します。perl 5.7.2以降では、 &lt;code&gt;PL_exit_flags |= PERL_EXIT_DESTRUCT_END&lt;/code&gt; を指定して新しい動作を取得できます。これにより、perl_parseが失敗し、 &lt;code&gt;perl_destruct&lt;/code&gt; が終了値を返す場合に、ENDブロックの実行も可能になります。</target>
        </trans-unit>
        <trans-unit id="0f62d4679a2de6656186513ec5b0145dfd0852c8" translate="yes" xml:space="preserve">
          <source>Traditionally in Perl, any use of any of the three variables &lt;code&gt;$`&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; or &lt;code&gt;$'&lt;/code&gt; (or their &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; English&lt;/code&gt; equivalents) anywhere in the code, caused all subsequent successful pattern matches to make a copy of the matched string, in case the code might subsequently access one of those variables. This imposed a considerable performance penalty across the whole program, so generally the use of these variables has been discouraged.</source>
          <target state="translated">従来、Perlでは、コード内の任意の3つの変数 &lt;code&gt;$`&lt;/code&gt; 、 &lt;code&gt;$&amp;amp;&lt;/code&gt; 、 &lt;code&gt;$'&lt;/code&gt; （またはそれらに相当 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; English&lt;/code&gt; ）を使用すると、後続のすべてのパターン一致で一致した文字列のコピーが作成されました。コードはその後、これらの変数の1つにアクセスする可能性があります。これにより、プログラム全体でパフォーマンスが大幅に低下するため、一般にこれらの変数の使用は推奨されていません。</target>
        </trans-unit>
        <trans-unit id="edc1e4ae8cd5bdd4ef52be4cd619be47a1e80306" translate="yes" xml:space="preserve">
          <source>Traditionally the result is a string of 13 bytes: two first bytes of the salt, followed by 11 bytes from the set &lt;code&gt;[./0-9A-Za-z]&lt;/code&gt;, and only the first eight bytes of PLAINTEXT mattered. But alternative hashing schemes (like MD5), higher level security schemes (like C2), and implementations on non-Unix platforms may produce different strings.</source>
          <target state="translated">従来、結果は13バイトの文字列です。ソルトの最初の2バイトに続いて、セット &lt;code&gt;[./0-9A-Za-z]&lt;/code&gt; から11バイトが続き、PLAINTEXTの最初の8バイトだけが重要でした。ただし、代替のハッシュスキーム（MD5など）、より高いレベルのセキュリティスキーム（C2など）、および非UNIXプラットフォームでの実装では、異なる文字列が生成される場合があります。</target>
        </trans-unit>
        <trans-unit id="366ba2d0971221ce62e3e700bb5e4027a597313b" translate="yes" xml:space="preserve">
          <source>Traditionally, Perl has captured the value of the variable at that point and turned the subroutine into a constant eligible for inlining. In those cases where the variable can be modified elsewhere, this breaks the behavior of closures, in which the subroutine captures the variable itself, rather than its value, so future changes to the variable are reflected in the subroutine's return value.</source>
          <target state="translated">伝統的に、Perlはその時点で変数の値を捕捉し、サブルーチンをインライン化の対象となる定数に変えてきました。変数が他の場所で変更できる場合には、これはクロージャの動作を壊します。</target>
        </trans-unit>
        <trans-unit id="77c289ba4e5a8332a82b92e0a687ee8832b65763" translate="yes" xml:space="preserve">
          <source>Traditionally, the Perl function &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; rounds to 0 (see &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;), and so for floating-point-like types one should follow the same semantic.</source>
          <target state="translated">伝統的に、Perl関数 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; は0に丸められます（&lt;a href=&quot;functions/int&quot;&gt;intを&lt;/a&gt;参照）。したがって、浮動小数点のような型の場合、同じセマンティクスに従う必要があります。</target>
        </trans-unit>
        <trans-unit id="b2c93accaaddf881f0426884fd5fb319c6e78ef4" translate="yes" xml:space="preserve">
          <source>Traditionally, the definition of an inside-out class contains a bare block inside which a number of lexical hashes are declared and the basic accessor methods defined, usually through &lt;code&gt;Scalar::Util::refaddr&lt;/code&gt; . Further methods may be defined outside this block. There has to be a DESTROY method and, for thread support, a CLONE method.</source>
          <target state="translated">従来、インサイドアウトクラスの定義には、通常は &lt;code&gt;Scalar::Util::refaddr&lt;/code&gt; によって定義された基本的なアクセサーメソッドが定義された基本ブロックと、その内部でいくつかの字句ハッシュが含まれるベアブロックが含まれています。このブロックの外で、さらにメソッドを定義できます。DESTROYメソッドが必要であり、スレッドをサポートするにはCLONEメソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="56e30fa719825fef87897a9b73f8c643d6e27859" translate="yes" xml:space="preserve">
          <source>Traditionally, typemaps needed to be written to a separate file, conventionally called &lt;code&gt;typemap&lt;/code&gt; in a CPAN distribution. With ExtUtils::ParseXS (the XS compiler) version 3.12 or better which comes with perl 5.16, typemaps can also be embedded directly into XS code using a HERE-doc like syntax:</source>
          <target state="translated">伝統的に、タイプマップは、通常と呼ばれる、別のファイルに書き込まれるために必要な &lt;code&gt;typemap&lt;/code&gt; CPAN配布に。Perl 5.16に付属するExtUtils :: ParseXS（XSコンパイラ）バージョン3.12以降では、HERE-docのような構文を使用して、タイプマップをXSコードに直接埋め込むこともできます。</target>
        </trans-unit>
        <trans-unit id="b116d15c8d0f591aea30acc14d32c8151254d15b" translate="yes" xml:space="preserve">
          <source>Transfer file in ASCII. CRLF translation will be done if required</source>
          <target state="translated">ASCIIでファイルを転送します。必要に応じてCRLF翻訳が行われます</target>
        </trans-unit>
        <trans-unit id="19b93b66a9a164099cf4c3e60d4b5f7a2c5a7780" translate="yes" xml:space="preserve">
          <source>Transfer file in binary mode. No transformation will be done.</source>
          <target state="translated">バイナリモードでファイルを転送します。変換は行われません。</target>
        </trans-unit>
        <trans-unit id="71b54b146f4723aa8db4c8d0ffb0816f4aee31ad" translate="yes" xml:space="preserve">
          <source>Transforms the current application into a PM application and back. The argument true means that a real message loop is going to be served. OS2::MorphPM() returns the PM message queue handle as an integer.</source>
          <target state="translated">現在のアプリケーションをPMアプリケーションに変換して戻します。引数 true は、実際のメッセージループが提供されることを意味します。OS2::MorphPM()は、PMメッセージキューハンドルを整数で返します。</target>
        </trans-unit>
        <trans-unit id="3ab5267ee01682b79d53eef55a6ec4c6169897d2" translate="yes" xml:space="preserve">
          <source>Translate logical name DCL$PATH as a searchlist, rather than trying to &lt;code&gt;&lt;a href=&quot;../../functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; string value of &lt;code&gt;$ENV{'PATH'}&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$ENV{'PATH'}&lt;/code&gt; 文字列値を &lt;code&gt;&lt;a href=&quot;../../functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; するのではなく、論理名DCL $ PATHを検索リストとして変換します。</target>
        </trans-unit>
        <trans-unit id="4df3684f8e1af9f3d36ff43ec1a39944ea62d252" translate="yes" xml:space="preserve">
          <source>Translates a Windows path to the corresponding cygwin path respecting the current mount points. With a second non-null argument returns an absolute path. Double-byte characters will not be translated.</source>
          <target state="translated">Windowsパスを、現在のマウントポイントを尊重して対応するcygwinパスに変換します。2 番目の非 null 引数を指定すると、絶対パスを返します。ダブルバイト文字は変換されません。</target>
        </trans-unit>
        <trans-unit id="43c8972cdf7cbd4964f60ea0553934fab0c0bfe0" translate="yes" xml:space="preserve">
          <source>Translates a Windows pid to the corresponding cygwin pid (if any).</source>
          <target state="translated">Windows の pid を対応する cygwin の pid に変換します (もしあれば)。</target>
        </trans-unit>
        <trans-unit id="582d5dcb01cd3d8be49a7bc9c562cc61d6d3a8c7" translate="yes" xml:space="preserve">
          <source>Translates a cygwin path to the corresponding cygwin path respecting the current mount points. With a second non-null argument returns an absolute path. Double-byte characters will not be translated.</source>
          <target state="translated">cygwinパスを、現在のマウントポイントを尊重して対応するcygwinパスに変換します。2 番目の非 null 引数を指定すると、絶対パスを返します。ダブルバイト文字は変換されません。</target>
        </trans-unit>
        <trans-unit id="d0b7e8b1f9fa64e7df02a610ac8f751cbf79794f" translate="yes" xml:space="preserve">
          <source>Translates a cygwin pid to the corresponding Windows pid (which may or may not be the same).</source>
          <target state="translated">cygwin の pid を対応する Windows の pid に変換します (同じであってもなくても構いません)。</target>
        </trans-unit>
        <trans-unit id="3cb9f5d38a91da3cb24f8ddc9ee0b78bc3316e7d" translate="yes" xml:space="preserve">
          <source>Translates the template as before except that a directory name is specified.</source>
          <target state="translated">ディレクトリ名が指定されていることを除いて、テンプレートを以前のように翻訳します。</target>
        </trans-unit>
        <trans-unit id="0e0c59b2d3a94d773b16fba8c10f9e6b9a4c8d83" translate="yes" xml:space="preserve">
          <source>Translators are available for converting Pod to various formats like plain text, HTML, man pages, and more.</source>
          <target state="translated">Podをプレーンテキスト、HTML、マンページなど様々な形式に変換するための翻訳者が用意されています。</target>
        </trans-unit>
        <trans-unit id="3d02c52d09a4e30f9d862205070306d13e0fd4bf" translate="yes" xml:space="preserve">
          <source>Translators may request clarification of the situation in which a particular phrase is found. For example, in English we are entirely happy saying &quot;</source>
          <target state="translated">翻訳者は、特定のフレーズがどのような状況にあるのかを明確にするように要求することがあります。例えば、英語では、&quot;</target>
        </trans-unit>
        <trans-unit id="7cec7716cf837c5d26e64202c8e48b66fd1ee111" translate="yes" xml:space="preserve">
          <source>Transliterate characters missing in encoding to &amp;amp;#NNN; where NNN is the decimal Unicode code point.</source>
          <target state="translated">＆＃NNN;へのエンコードで欠落している文字を文字変換します ここで、NNNは10進数のUnicodeコードポイントです。</target>
        </trans-unit>
        <trans-unit id="4a944de5b3bc5a013582ea0515548fdc64b85e91" translate="yes" xml:space="preserve">
          <source>Transliterate characters missing in encoding to &amp;amp;#xHHHH; where HHHH is the hexadecimal Unicode code point.</source>
          <target state="translated">＆＃xHHHH;へのエンコードで欠落している文字を文字変換します ここで、HHHHは16進数のUnicodeコードポイントです。</target>
        </trans-unit>
        <trans-unit id="7531ab4c38b927cd6bd26046089b6f931f4b9669" translate="yes" xml:space="preserve">
          <source>Transliterate characters missing in encoding to \x{HHHH} where HHHH is the hexadecimal Unicode code point.</source>
          <target state="translated">エンコーディングで欠落している文字を、HHHHHHが16進数のUnicodeコードポイントである\x{HHHHHH}にトランスリテレートします。</target>
        </trans-unit>
        <trans-unit id="778ddecb6dcc9c5eac19efad6822ed838d8cfd37" translate="yes" xml:space="preserve">
          <source>Transliterates all occurrences of the characters found in the search list with the corresponding character in the replacement list. It returns the number of characters replaced or deleted. If no string is specified via the &lt;code&gt;=~&lt;/code&gt; or &lt;code&gt;!~&lt;/code&gt; operator, the &lt;code&gt;$_&lt;/code&gt; string is transliterated.</source>
          <target state="translated">検索リストで見つかったすべての文字を置換リストの対応する文字で音訳します。置換または削除された文字数を返します。 &lt;code&gt;=~&lt;/code&gt; または &lt;code&gt;!~&lt;/code&gt; 演算子を介して文字列が指定されていない場合、 &lt;code&gt;$_&lt;/code&gt; 文字列が音訳されます。</target>
        </trans-unit>
        <trans-unit id="420a5e0771ab4a0b9e610c4b35eccba70828962b" translate="yes" xml:space="preserve">
          <source>Transparent BigInteger support for Perl</source>
          <target state="translated">Perl の透過的な BigInteger サポート</target>
        </trans-unit>
        <trans-unit id="7267fd5dd0f2d5cad0d4fdfbc6f406231fbc74c7" translate="yes" xml:space="preserve">
          <source>Transparent BigNumber support for Perl</source>
          <target state="translated">Perl での透過的な BigNumber のサポート</target>
        </trans-unit>
        <trans-unit id="d53f15081d775673dd122d267a0fda505ffa50fe" translate="yes" xml:space="preserve">
          <source>Transparent BigNumber/BigRational support for Perl</source>
          <target state="translated">Perl の透過的な BigNumber/BigRational のサポート</target>
        </trans-unit>
        <trans-unit id="1320fa0059bd04032c977af604f63823046e2bca" translate="yes" xml:space="preserve">
          <source>Trappable errors may be trapped using the eval operator. See &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;. In almost all cases, warnings may be selectively disabled or promoted to fatal errors using the &lt;code&gt;warnings&lt;/code&gt; pragma. See &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">トラップ可能なエラーは、eval演算子を使用してトラップできます。&lt;a href=&quot;functions/eval&quot;&gt;evalを&lt;/a&gt;参照してください。ほとんどすべての場合、警告は、 &lt;code&gt;warnings&lt;/code&gt; プラグマを使用して選択的に無効にするか、致命的なエラーに昇格させることができます。&lt;a href=&quot;warnings&quot;&gt;警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7f10d4d7cb6294c3306a64ba2969b74200be2428" translate="yes" xml:space="preserve">
          <source>Traverse a directory tree.</source>
          <target state="translated">ディレクトリツリーをトラバースします。</target>
        </trans-unit>
        <trans-unit id="b2a99160c9547d1ab75aaa55623e70b1b8573818" translate="yes" xml:space="preserve">
          <source>Treat string as multiple lines. That is, change &quot;^&quot; and &quot;$&quot; from matching the start of the string's first line and the end of its last line to matching the start and end of each line within the string.</source>
          <target state="translated">文字列を複数行として扱う。つまり、&quot;^&quot;と&quot;$&quot;は、文字列の最初の行と最後の行の終わりを一致させるのではなく、文字列内の各行の開始と終了を一致させるように変更します。</target>
        </trans-unit>
        <trans-unit id="93fa15e2fd4bd3f0707530f7f374f8fd00c44547" translate="yes" xml:space="preserve">
          <source>Treat string as single line. That is, change &quot;.&quot; to match any character whatsoever, even a newline, which normally it would not match.</source>
          <target state="translated">文字列を一行として扱う。つまり、&quot;.&quot; を変更して、通常はマッチしない改行であっても、どんな文字にもマッチするようにします。</target>
        </trans-unit>
        <trans-unit id="369a3fe575602256c74f237530b2066156aadc25" translate="yes" xml:space="preserve">
          <source>Treats ARRAY as a stack by appending the values of LIST to the end of ARRAY. The length of ARRAY increases by the length of LIST. Has the same effect as</source>
          <target state="translated">ARRAYは、LISTの値をARRAYの末尾に追加してスタックとして扱います。ARRAYの長さはLISTの長さ分だけ長くなります。と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="4c2b22d2044144acb2e177299ffb0546b35d1302" translate="yes" xml:space="preserve">
          <source>Treats the complete zip file/buffer as a single compressed data stream. When reading in multi-stream mode each member of the zip file/buffer will be uncompressed in turn until the end of the file/buffer is encountered.</source>
          <target state="translated">完全な zip ファイル/バッファを単一の圧縮データストリームとして扱います。マルチストリームモードで読み込む場合、zip ファイル/バッファの各メンバは、ファイル/バッファの最後に到達するまで順番に圧縮が解除されます。</target>
        </trans-unit>
        <trans-unit id="9170df3df869288dce7be7560494463cb05b5488" translate="yes" xml:space="preserve">
          <source>Treats the return value of the code block as the condition.</source>
          <target state="translated">コードブロックの戻り値を条件として扱います。</target>
        </trans-unit>
        <trans-unit id="076fbc2c1d84c79c360a6aaf693ed414200277af" translate="yes" xml:space="preserve">
          <source>Treats the string in EXPR as a bit vector made up of elements of width BITS and returns the value of the element specified by OFFSET as an unsigned integer. BITS therefore specifies the number of bits that are reserved for each element in the bit vector. This must be a power of two from 1 to 32 (or 64, if your platform supports that).</source>
          <target state="translated">EXPR内の文字列を幅BITSの要素からなるビットベクトルとして扱い、OFFSETで指定された要素の値を符号なし整数として返します。したがって、BITSは、ビットベクタの各要素に予約されているビット数を指定します。これは、1から32までの2乗(プラットフォームがサポートしている場合は64)でなければなりません。</target>
        </trans-unit>
        <trans-unit id="74c726e22e1ef4f0ff5d0f342fa4b671a8d7e3e6" translate="yes" xml:space="preserve">
          <source>Tree Contents</source>
          <target state="translated">ツリーの内容</target>
        </trans-unit>
        <trans-unit id="bc924ad99a31c83efb674a21a76798fdb63e8535" translate="yes" xml:space="preserve">
          <source>Tries to &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; the given $module or $file. If it loads successfully, the test will pass. Otherwise it fails and displays the load error.</source>
          <target state="translated">指定された$ moduleまたは$ file を &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; しようとします。正常にロードされると、テストに合格します。それ以外の場合は失敗し、ロードエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="82437a05f154f78a4ae190392aa21b46338d0c97" translate="yes" xml:space="preserve">
          <source>Tries to uses &lt;a href=&quot;../../../ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt; &amp;amp; &lt;a href=&quot;../../../io/select&quot;&gt;IO::Select&lt;/a&gt; to communicate with the spawned process if they are available. Falls back onto &lt;code&gt;&lt;a href=&quot;../../../functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../ipc/open3&quot;&gt;IPC :: Open3&lt;/a&gt;＆&lt;a href=&quot;../../../io/select&quot;&gt;IO :: Select&lt;/a&gt;を使用して、生成されたプロセスが使用可能な場合は、それらと通信しようとします。 &lt;code&gt;&lt;a href=&quot;../../../functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="d0328d99f96d6b6cb2e5370be4979de91fb2ea44" translate="yes" xml:space="preserve">
          <source>Triggered by a delete from %^H, records the key to &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; .</source>
          <target state="translated">％^ Hからの削除によって &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; れ、PL_compiling.cop_hints_hashへのキーを記録します。</target>
        </trans-unit>
        <trans-unit id="ce25e5857867e6310e792d455213353087781834" translate="yes" xml:space="preserve">
          <source>Triggered by a store to %^H, records the key/value pair to &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; . It is assumed that hints aren't storing anything that would need a deep copy. Maybe we should warn if we find a reference.</source>
          <target state="translated">ストアによって &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; れて％^ Hになり、キーと値のペアをPL_compiling.cop_hints_hashに記録します。ヒントには、深いコピーが必要なものは何も格納されていないと想定されています。参照を見つけたら警告する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5e62fd5a7239de339d5bd00c0d3006bd6b133b17" translate="yes" xml:space="preserve">
          <source>Triggered by clearing %^H, resets &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; .</source>
          <target state="translated">％^ Hをクリアすることによって &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; 、PL_compiling.cop_hints_hashをリセットします。</target>
        </trans-unit>
        <trans-unit id="b9e4c026492c440bf32166e0789393487d03b254" translate="yes" xml:space="preserve">
          <source>Trigonometric functions</source>
          <target state="translated">三角関数</target>
        </trans-unit>
        <trans-unit id="ce550b5479caa5cd0ed1b0d59ad15c9773c7bcdb" translate="yes" xml:space="preserve">
          <source>Trilogy, &lt;code&gt;In the beginning the
Universe was created. This has made a lot of people very angry and
been widely regarded as a bad move&lt;/code&gt; . Their mistake was not of this magnitude so let's forgive them.</source>
          <target state="translated">三部作、 &lt;code&gt;In the beginning the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move&lt;/code&gt; 。彼らの過ちはそれほど大きなものではなかったので、許してみましょう。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="28e5d7df36d1a6dde25f3c09a31821344957a89c" translate="yes" xml:space="preserve">
          <source>Troubleshooting these Examples</source>
          <target state="translated">これらの例のトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="95a9fcae6cc7c433c5ecb181677d9e65f088ed3c" translate="yes" xml:space="preserve">
          <source>Tru64 5.1 documentation on syslog, &lt;a href=&quot;http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM&quot;&gt;http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM&lt;/a&gt;</source>
          <target state="translated">syslog上のTru64 5.1ドキュメント、&lt;a href=&quot;http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM&quot;&gt;http：//h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9109071ad135094f2373ecd2b94d8dc48e87efa6" translate="yes" xml:space="preserve">
          <source>True if an external</source>
          <target state="translated">外部の</target>
        </trans-unit>
        <trans-unit id="f3a74362a5094d39f2b42a3da4ab4b28a9691928" translate="yes" xml:space="preserve">
          <source>True if on an OS where qx operator (or backticks) can redirect &lt;code&gt;STDERR&lt;/code&gt; onto &lt;code&gt;STDOUT&lt;/code&gt; .</source>
          <target state="translated">qxオペレーター（またはバックティック）が &lt;code&gt;STDERR&lt;/code&gt; を &lt;code&gt;STDOUT&lt;/code&gt; にリダイレクトできるOSの場合はtrue 。</target>
        </trans-unit>
        <trans-unit id="52369ee8420cce3f1adcdcc979064876449bf33b" translate="yes" xml:space="preserve">
          <source>True if the socket is currently positioned at the urgent data mark, false otherwise.</source>
          <target state="translated">ソケットが現在緊急データマークに位置している場合は真、そうでない場合は偽。</target>
        </trans-unit>
        <trans-unit id="263df4a03022b2922b4599d5befe15e4f094944e" translate="yes" xml:space="preserve">
          <source>True if the source has meta data.</source>
          <target state="translated">ソースにメタデータがあれば真。</target>
        </trans-unit>
        <trans-unit id="001c945275af8c53e929fc8bb52b9331e9fa2beb" translate="yes" xml:space="preserve">
          <source>True if this op will be the return value of an lvalue subroutine</source>
          <target state="translated">このオペランドがlvalueサブルーチンの戻り値になる場合は真</target>
        </trans-unit>
        <trans-unit id="a225ab817ea7fa5d168aaeda6fa091c3d9bf26a1" translate="yes" xml:space="preserve">
          <source>True is returned if the file name begins with &lt;code&gt;drive_letter:&lt;/code&gt; , and if not, File::Spec::Unix file_name_is_absolute() is called.</source>
          <target state="translated">ファイル名が &lt;code&gt;drive_letter:&lt;/code&gt; で始まる場合はTrueが返され、そうでない場合はFile :: Spec :: Unix file_name_is_absolute（）が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="714a51854b847f734d4ad3e61a135b245522aeae" translate="yes" xml:space="preserve">
          <source>True while the most recent result was a TODO. Becomes true before the TODO result is returned and stays true until just before the next non- TODO test is returned.</source>
          <target state="translated">直近の結果が TODO である間は真です。TODOの結果が返される前に真になり、次の非TODOテストが返される直前まで真のままです。</target>
        </trans-unit>
        <trans-unit id="1aceee4ee4f49927d115b3fc82be6c512d7c286c" translate="yes" xml:space="preserve">
          <source>True/false results are never tainted.</source>
          <target state="translated">真偽の結果は決して汚されることはありません。</target>
        </trans-unit>
        <trans-unit id="f8dc96e0b59ea3e8174d5b669fb89eb4295305d3" translate="yes" xml:space="preserve">
          <source>Truncate $x to an integer value.</source>
          <target state="translated">x を整数値に切り捨てます。</target>
        </trans-unit>
        <trans-unit id="11625b03167a879105d56ac5232340fe7c1e8727" translate="yes" xml:space="preserve">
          <source>Truncate file suggested by open mode.</source>
          <target state="translated">オープンモードで提案されたファイルを切り詰める。</target>
        </trans-unit>
        <trans-unit id="69983876ff90a7fef773e08a772b817cd9bc808d" translate="yes" xml:space="preserve">
          <source>Truncates the file opened on FILEHANDLE, or named by EXPR, to the specified length. Raises an exception if truncate isn't implemented on your system. Returns true if successful, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error.</source>
          <target state="translated">FILEHANDLEで開かれたファイル、またはEXPRによって名前が付けられたファイルを、指定された長さに切り捨てます。システムに切り捨てが実装されていない場合は、例外が発生します。成功した場合はtrue、エラーの場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e6b7268dfdb3e49fbc8b9714eadb8dee9d853cfb" translate="yes" xml:space="preserve">
          <source>Truncates the file opened on FILEHANDLE, or named by EXPR, to the specified length. Raises an exception if truncate isn't implemented on your system. Returns true if successful, &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error.</source>
          <target state="translated">FILEHANDLEで開かれたファイル、またはEXPRによって名前が付けられたファイルを、指定された長さに切り捨てます。システムに切り捨てが実装されていない場合は、例外が発生します。成功した場合はtrue、エラーの場合は &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2975c0f92fcae4101065548cc1a5e6bfa7744574" translate="yes" xml:space="preserve">
          <source>Truncation to same-or-shorter lengths only. (VOS)</source>
          <target state="translated">同程度の長さまたはそれより短い長さにのみ切り捨てることができます。(VOS)</target>
        </trans-unit>
        <trans-unit id="07fcbd4e35869ee7c3769699235ad97c3caf7ea4" translate="yes" xml:space="preserve">
          <source>Truth and Falsehood</source>
          <target state="translated">真実と虚実</target>
        </trans-unit>
        <trans-unit id="0ea36a88c9652f7de32e4b8cdc539660f9c8bb67" translate="yes" xml:space="preserve">
          <source>Truth. (&lt;code&gt;PL_sv_yes&lt;/code&gt; ) The value is not needed (and ignored).</source>
          <target state="translated">真実。（ &lt;code&gt;PL_sv_yes&lt;/code&gt; ）値は不要です（無視されます）。</target>
        </trans-unit>
        <trans-unit id="820aa128934b824418f5ca61678f5828e0a9f3f1" translate="yes" xml:space="preserve">
          <source>Try 'which ld' and 'which ld' (or try 'ar --version' and 'ld --version', which work only for the GNU tools, and will announce themselves to be such), and adjust your PATH so that you are consistently using either the native tools or the GNU tools. After fixing your PATH, you should do 'make distclean' and start all the way from running the Configure since you may have quite a confused situation.</source>
          <target state="translated">which ld' と 'which ld' を試してみてください (あるいは 'ar --version' と 'ld --version' を試してみてください。これらは GNU ツールでのみ動作し、自分自身がそうであるとアナウンスします)。PATHを修正した後は、'make distclean'をして、Configureを実行しているところから始めてください。</target>
        </trans-unit>
        <trans-unit id="dfec8d0f349c3c42fb9d1815573a589ac82ef522" translate="yes" xml:space="preserve">
          <source>Try and match a closing delimiter bracket. If the bracket was the same species as the last opening bracket, return the substring to that point. If the bracket was mismatched, return an error.</source>
          <target state="translated">閉じた区切り括弧にマッチするかどうか試してみてください。もしブラケットが最後の開始ブラケットと同じ種族であれば、その点までの部分文字列を返します。ブラケットが不一致の場合はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="3534e8ec8243f82da173a0a961f29a6061ccc5a4" translate="yes" xml:space="preserve">
          <source>Try every conceivable way to get hostname</source>
          <target state="translated">ホスト名を取得するために考えられるあらゆる方法を試してみてください。</target>
        </trans-unit>
        <trans-unit id="dfea66ec3b5d472c8a85f9f4143d2c2a2932e7a3" translate="yes" xml:space="preserve">
          <source>Try hard not to exceed 79-columns</source>
          <target state="translated">79カラムを超えないように頑張る</target>
        </trans-unit>
        <trans-unit id="71156f6966e318bbb69b3350da865612c3413590" translate="yes" xml:space="preserve">
          <source>Try keeping around the seekpointer and go there, like this:</source>
          <target state="translated">シークポインターの周りをキープして、こんな感じで行ってみてください。</target>
        </trans-unit>
        <trans-unit id="5ab49ef558819708ac26895c52750c3610705d02" translate="yes" xml:space="preserve">
          <source>Try not to launch headlong into developing your module without spending some time thinking first. A little forethought may save you a vast amount of effort later on.</source>
          <target state="translated">最初に考えることに時間をかけずに、モジュールの開発に飛びつかないようにしてください。少しの先入観が、後になって膨大な労力を節約することになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1a2b567df2700cceb3e59d9f8a3eb3ca3092a77c" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;net/ftp&quot;&gt;Net::FTP&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/TCP::Client&quot;&gt;TCP::Client&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Net::Telnet&quot;&gt;Net::Telnet&lt;/a&gt; modules (available from CPAN). &lt;a href=&quot;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&quot;&gt;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&lt;/a&gt; will also help for emulating the telnet protocol, but &lt;a href=&quot;http://search.cpan.org/perldoc/Net::Telnet&quot;&gt;Net::Telnet&lt;/a&gt; is quite probably easier to use.</source>
          <target state="translated">&lt;a href=&quot;net/ftp&quot;&gt;Net :: FTP&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/TCP::Client&quot;&gt;TCP :: Client&lt;/a&gt;、および&lt;a href=&quot;http://search.cpan.org/perldoc/Net::Telnet&quot;&gt;Net :: Telnet&lt;/a&gt;モジュール（CPANから入手可能）を試してください。&lt;a href=&quot;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&quot;&gt;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&lt;/a&gt;もtelnetプロトコルのエミュレーションに役立ちますが、&lt;a href=&quot;http://search.cpan.org/perldoc/Net::Telnet&quot;&gt;Net :: Telnetの方&lt;/a&gt;がおそらく使いやすいでしょう。</target>
        </trans-unit>
        <trans-unit id="87f2df3af873276d11f18dcdfa6067907516ef82" translate="yes" xml:space="preserve">
          <source>Try the first alternative in the first group 'abd'.</source>
          <target state="translated">最初のグループ「abd」の最初の代替案を試してみてください。</target>
        </trans-unit>
        <trans-unit id="8fdc9fd893f9837a30290ddcdb863de474cd49f7" translate="yes" xml:space="preserve">
          <source>Try the native, UDP socket then UNIX domain socket mechanisms:</source>
          <target state="translated">ネイティブソケット、UDPソケット、UNIXドメインソケットの仕組みを試してみてください。</target>
        </trans-unit>
        <trans-unit id="6a75e271162bdc3d061e3493d3ce114d627fc256" translate="yes" xml:space="preserve">
          <source>Try the resources in &lt;a href=&quot;perlfaq2&quot;&gt;perlfaq2&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlfaq2&quot;&gt;perlfaq2&lt;/a&gt;のリソースを試してください。</target>
        </trans-unit>
        <trans-unit id="aacef041b76d57895de9d7f5cee32482707bd3b3" translate="yes" xml:space="preserve">
          <source>Try to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict;&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict qw(...);&lt;/code&gt; ). Remember that you can add &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; strict qw(...);&lt;/code&gt; to individual blocks of code that need less strictness.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict;&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;みてください。（または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict qw(...);&lt;/code&gt; ）。 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; strict qw(...);&lt;/code&gt; 追加でき&lt;a href=&quot;functions/no&quot;&gt;ない&lt;/a&gt;ことに注意してください。厳密性をあまり必要としないコードの個々のブロックに。</target>
        </trans-unit>
        <trans-unit id="dbe02bedd5bb36eab5b4bbe32b7d4940cf95d2ec" translate="yes" xml:space="preserve">
          <source>Try to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings;&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings qw(...);&lt;/code&gt; ). Remember that you can add &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings qw(...);&lt;/code&gt; to individual blocks of code that need less warnings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings;&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;ください。（または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings qw(...);&lt;/code&gt; ）。 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings qw(...);&lt;/code&gt; を追加でき&lt;a href=&quot;functions/no&quot;&gt;ない&lt;/a&gt;ことに注意してくださいqw（...）; 警告の少ないコードの個々のブロックに。</target>
        </trans-unit>
        <trans-unit id="1a50d23e31ca789a858a654feff08b918836c974" translate="yes" xml:space="preserve">
          <source>Try to color output. See &lt;a href=&quot;../tap/formatter/base#new&quot;&gt;new in TAP::Formatter::Base&lt;/a&gt;.</source>
          <target state="translated">カラー出力してみてください。&lt;a href=&quot;../tap/formatter/base#new&quot;&gt;TAP :: Formatter :: Baseの新機能を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e97a54a5e20ef4c3c124d4963b017c39c1dad7b" translate="yes" xml:space="preserve">
          <source>Try to design the new module to be easy to extend and reuse.</source>
          <target state="translated">新しいモジュールを拡張して再利用しやすいように設計してみてください。</target>
        </trans-unit>
        <trans-unit id="220ea4d529b6fa37d1fa97bbb19f2fed77ce5e5b" translate="yes" xml:space="preserve">
          <source>Try to determine name of extension being built. We begin with the name of the current directory. Since VMS filenames are case-insensitive, however, we look for a</source>
          <target state="translated">構築されている拡張機能の名前を決定してみます。まず、カレントディレクトリの名前から始めます。しかし、VMS のファイル名は大文字小文字を区別しないので、私たちが探すのは</target>
        </trans-unit>
        <trans-unit id="909a91fc6d3b48263691b246eef6c09eb4ec3bfc" translate="yes" xml:space="preserve">
          <source>Try to determine the width of the screen and the bold and underline sequences for the terminal from termcap, and use that information in formatting the output. Output will be wrapped at two columns less than the width of your terminal device. Using this option requires that your system have a termcap file somewhere where Term::Cap can find it and requires that your system support termios. With this option, the output of &lt;b&gt;pod2text&lt;/b&gt; will contain terminal control sequences for your current terminal type.</source>
          <target state="translated">画面の幅と、termcapからの端末の太字および下線シーケンスを判別し、その情報を使用して出力をフォーマットしてください。出力は、端末デバイスの幅よりも2列少ない幅で折り返されます。このオプションを使用するには、Term :: Capが見つけられる場所にtermcapファイルがシステムにあり、システムがtermiosをサポートしている必要があります。このオプションを&lt;b&gt;使用&lt;/b&gt;すると、&lt;b&gt;pod2text&lt;/b&gt;の出力には、現在の端末タイプの端末制御シーケンスが含まれます。</target>
        </trans-unit>
        <trans-unit id="08f15a05901602892a511e670ab4aa0307df4226" translate="yes" xml:space="preserve">
          <source>Try to document your code and use Pod formatting in a consistent way. Here are commonly expected conventions:</source>
          <target state="translated">コードを文書化し、一貫した方法でPodフォーマットを使用するようにしてください。以下に、一般的に想定される規約を示します。</target>
        </trans-unit>
        <trans-unit id="c88c728349f5a2409f402906caa2d933f74c0865" translate="yes" xml:space="preserve">
          <source>Try to match a quote or quotelike operator. If found, call &lt;code&gt;extract_quotelike&lt;/code&gt; to eat it. If &lt;code&gt;extract_quotelike&lt;/code&gt; fails, return the error it returned. Otherwise go back to step 1.</source>
          <target state="translated">引用符またはquotelike演算子と一致するようにしてください。見つかった場合は、 &lt;code&gt;extract_quotelike&lt;/code&gt; を呼び出して食べます。場合 &lt;code&gt;extract_quotelike&lt;/code&gt; が失敗し、それが返されたエラーを返します。それ以外の場合は、手順1に戻ります。</target>
        </trans-unit>
        <trans-unit id="fed009e07cf40a3bfaccb23b101b1df3951ecefd" translate="yes" xml:space="preserve">
          <source>Try to match an opening delimiter bracket. If found, call &lt;code&gt;extract_codeblock&lt;/code&gt; recursively to eat the embedded block. If the recursive call fails, return an error. Otherwise, go back to step 1.</source>
          <target state="translated">開始区切りブラケットと一致するようにしてください。見つかった場合は、 &lt;code&gt;extract_codeblock&lt;/code&gt; を再帰的に呼び出して、埋め込まれたブロックを削除します。再帰呼び出しが失敗した場合は、エラーを返します。それ以外の場合は、手順1に戻ります。</target>
        </trans-unit>
        <trans-unit id="1bf160ae95bc79040defdb4258d5fad8caa20a29" translate="yes" xml:space="preserve">
          <source>Try to obtain the latest version of the Windows SDK. Sometimes these packages contain a particular Windows OS version in their name, but actually work on other OS versions too. For example, the &quot;Windows Server 2003 R2 Platform SDK&quot; also runs on Windows XP SP2 and Windows 2000.</source>
          <target state="translated">Windows SDKの最新バージョンを入手するようにしてください。これらのパッケージには、名前に特定のWindows OSのバージョンが含まれていることがありますが、実際には他のOSのバージョンでも動作することがあります。例えば、「Windows Server 2003 R2 Platform SDK」は、Windows XP SP2やWindows 2000でも動作します。</target>
        </trans-unit>
        <trans-unit id="962ca701cc2570a663505435d963dc55f234f4d9" translate="yes" xml:space="preserve">
          <source>Trying to create a new child with a previous child still active (i.e., &lt;code&gt;finalize&lt;/code&gt; not called) will &lt;code&gt;croak&lt;/code&gt; .</source>
          <target state="translated">以前の子がまだアクティブな状態で新しい子を作成しようとすると（つまり、 &lt;code&gt;finalize&lt;/code&gt; が呼び出されない）、が &lt;code&gt;croak&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e0c592184c4820418323672dd4337df40c4098b0" translate="yes" xml:space="preserve">
          <source>Trying to do too much</source>
          <target state="translated">やりすぎたことをしようとする</target>
        </trans-unit>
        <trans-unit id="44d272c0c6193575553012dfbe62f22573eeb82f" translate="yes" xml:space="preserve">
          <source>Trying to run a test when you have an open child will also &lt;code&gt;croak&lt;/code&gt; and cause the test suite to fail.</source>
          <target state="translated">開いている子があるときにテストを実行しようとすると、 &lt;code&gt;croak&lt;/code&gt; が出てテストスイートが失敗します。</target>
        </trans-unit>
        <trans-unit id="e1251ee8a07b3dea6c343e31961e5913e11f0ce3" translate="yes" xml:space="preserve">
          <source>Tune the internal settings for the deflate object &lt;code&gt;$d&lt;/code&gt; . This option is only available if you are running zlib 1.2.2.3 or better.</source>
          <target state="translated">deflateオブジェクト &lt;code&gt;$d&lt;/code&gt; の内部設定を調整します。このオプションは、zlib 1.2.2.3以降を実行している場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="008eee580921a65a5e935994d388ebe43c6df0cd" translate="yes" xml:space="preserve">
          <source>Tuning the way RESOLVE_SYMLINK will works</source>
          <target state="translated">RESOLVE_SYMLINKの動作方法を調整する</target>
        </trans-unit>
        <trans-unit id="f7db0bf3a9c02aa40e34f07d8431257fcf327327" translate="yes" xml:space="preserve">
          <source>Turn =head1 directives into links pointing to the top of the HTML file.</source>
          <target state="translated">head1ディレクティブをHTMLファイルの先頭を指すリンクに変えます。</target>
        </trans-unit>
        <trans-unit id="33f87dc87ea378d835e56e5bfd248ea1a352c832" translate="yes" xml:space="preserve">
          <source>Turn Pod into XML</source>
          <target state="translated">PodをXMLに変換</target>
        </trans-unit>
        <trans-unit id="8e7cc74dfcc71c13798fc4a8a0bda3cb164ed4c1" translate="yes" xml:space="preserve">
          <source>Turn Pod::Simple events into method calls</source>
          <target state="translated">Pod::Simpleイベントをメソッドコールに変える</target>
        </trans-unit>
        <trans-unit id="87a4a4a475f00352f77a10d3ec1fd9eee936c4ee" translate="yes" xml:space="preserve">
          <source>Turn off Apple tar's tendency to copy resource forks as &quot;._foo&quot; files.</source>
          <target state="translated">Apple tar がリソースフォークを &quot;._foo&quot; ファイルとしてコピーする傾向をオフにします。</target>
        </trans-unit>
        <trans-unit id="48d8224908b27731eb611ee5800a332f08bd6efe" translate="yes" xml:space="preserve">
          <source>Turn on colour in Test::Builder::Tester</source>
          <target state="translated">Test::Builder::Tester で色をオンにする</target>
        </trans-unit>
        <trans-unit id="3aaaf6cc176020f3991943f2032de33eccbdb645" translate="yes" xml:space="preserve">
          <source>Turn on debugging messages.</source>
          <target state="translated">デバッグメッセージをオンにします。</target>
        </trans-unit>
        <trans-unit id="c5afa3624933dbb94708b864157bd75149a4bc45" translate="yes" xml:space="preserve">
          <source>Turn on the UTF-8 status of an SV (the data is not changed, just the flag). Do not use frivolously.</source>
          <target state="translated">SV の UTF-8 状態を ON にする(データは変更せず、フラグだけ)。軽薄に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="9903e627171cb3011421fef7af4a686d6ebc3e08" translate="yes" xml:space="preserve">
          <source>Turn on/off printing of warnings. Repeating &lt;b&gt;-warnings&lt;/b&gt; increases the warning level, i.e. more warnings are printed. Currently increasing to level two causes flagging of unescaped &quot;&amp;lt;,&amp;gt;&quot; characters.</source>
          <target state="translated">警告の印刷をオン/オフにします。&lt;b&gt;-warningsを&lt;/b&gt;繰り返すと、警告レベルが上がります。つまり、より多くの警告が出力されます。現在レベル2に増加すると、エスケープされていない「&amp;lt;、&amp;gt;」文字にフラグが立てられます。</target>
        </trans-unit>
        <trans-unit id="d7dd646019946f4186b2c9415767806d113e6794" translate="yes" xml:space="preserve">
          <source>Turn warnings on/off.</source>
          <target state="translated">警告をオン/オフにします。</target>
        </trans-unit>
        <trans-unit id="4c628137dd54154b5661d62a2c76528177ce2c0e" translate="yes" xml:space="preserve">
          <source>Turning on one of the character set flags with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re&lt;/code&gt; takes precedence over the &lt;code&gt;locale&lt;/code&gt; pragma and the 'unicode_strings' &lt;code&gt;feature&lt;/code&gt; , for regular expressions. Turning off one of these flags when it is active reverts to the behaviour specified by whatever other pragmata are in scope. For example:</source>
          <target state="translated">正規表現の &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re&lt;/code&gt; 、use reを使用していずれかの文字セットフラグをオンにすると、 &lt;code&gt;locale&lt;/code&gt; プラグマおよび「unicode_strings」 &lt;code&gt;feature&lt;/code&gt; よりも優先されます。これらのフラグの1つがアクティブなときにオフにすると、スコープ内にある他のプラグマによって指定された動作に戻ります。例えば：</target>
        </trans-unit>
        <trans-unit id="1dac2f62695f453fd439059f0a117cf373d1f773" translate="yes" xml:space="preserve">
          <source>Turns every &lt;code&gt;head1&lt;/code&gt; heading into a link back to the top of the page. By default, no backlinks are generated.</source>
          <target state="translated">すべての &lt;code&gt;head1&lt;/code&gt; 見出しをページの上部へのリンクに変換します。デフォルトでは、バックリンクは生成されません。</target>
        </trans-unit>
        <trans-unit id="488b4a24fda23c677bfd758dfeda4e2b3e28ea5b" translate="yes" xml:space="preserve">
          <source>Turns on all &quot;extra&quot; debugging options.</source>
          <target state="translated">すべての「追加」デバッグオプションをオンにします。</target>
        </trans-unit>
        <trans-unit id="8a6abc6af101e3e68b329eb351f149732ea8c3d9" translate="yes" xml:space="preserve">
          <source>Turns on all compile related debug options.</source>
          <target state="translated">コンパイル関連のデバッグオプションをすべてオンにします。</target>
        </trans-unit>
        <trans-unit id="377f42734b94211c01fa848b2645c0c159ecedcd" translate="yes" xml:space="preserve">
          <source>Turns on all execute related debug options.</source>
          <target state="translated">実行に関連するすべてのデバッグオプションをオンにします。</target>
        </trans-unit>
        <trans-unit id="cf78d64b4c15f8d89c3f09aea595a015508f3471" translate="yes" xml:space="preserve">
          <source>Turns on autoflush, print ARGS and then restores the autoflush status of the &lt;code&gt;IO::Handle&lt;/code&gt; object. Returns the return value from print.</source>
          <target state="translated">自動フラッシュをオンにして、ARGSを出力してから、 &lt;code&gt;IO::Handle&lt;/code&gt; オブジェクトの自動フラッシュのステータスを復元します。printからの戻り値を返します。</target>
        </trans-unit>
        <trans-unit id="2d1676fcc040bdf1deeab307eee1f9a1faa4d87a" translate="yes" xml:space="preserve">
          <source>Turns on debug output related to the process of parsing the pattern.</source>
          <target state="translated">パターンの解析処理に関連するデバッグ出力をオンにします。</target>
        </trans-unit>
        <trans-unit id="80ae89d796a9f5474c9cf55351133039b045499c" translate="yes" xml:space="preserve">
          <source>Turns on debugging</source>
          <target state="translated">デバッグをオンにする</target>
        </trans-unit>
        <trans-unit id="0b71618ab3c580ced56e12be5afa8ca78d10b841" translate="yes" xml:space="preserve">
          <source>Turns on debugging of the main matching loop.</source>
          <target state="translated">メインのマッチングループのデバッグをオンにします。</target>
        </trans-unit>
        <trans-unit id="0d12b512bcc17c858f7f78847cab2c7f6461efd3" translate="yes" xml:space="preserve">
          <source>Turns on the magical status of an SV. See &lt;code&gt;sv_magic&lt;/code&gt; .</source>
          <target state="translated">SVの魔法のステータスをオンにします。 &lt;code&gt;sv_magic&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5ed69f1e400ca234d376650a653b6521d5c1651" translate="yes" xml:space="preserve">
          <source>Turns the @metadata_pairs into YAML.</source>
          <target state="translated">metadata_pairsをYAMLに変換します。</target>
        </trans-unit>
        <trans-unit id="606c2af8d67a4d7dc7224ecdbb198b95627a3d18" translate="yes" xml:space="preserve">
          <source>Tutorial on making a new module.</source>
          <target state="translated">新しいモジュールを作るためのチュートリアルです。</target>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">Tutorials</target>
        </trans-unit>
        <trans-unit id="4106aa6fe38782986e71b6df351f9eed9adc1100" translate="yes" xml:space="preserve">
          <source>Tutorials, end-user documentation, research papers, FAQs etc are not appropriate in a module's main documentation. If you really want to write these, include them as sub-documents such as &lt;code&gt;My::Module::Tutorial&lt;/code&gt; or &lt;code&gt;My::Module::FAQ&lt;/code&gt; and provide a link in the SEE ALSO section of the main documentation.</source>
          <target state="translated">チュートリアル、エンドユーザー向けドキュメント、研究論文、FAQなどは、モジュールのメインドキュメントには適していません。これらを本当に記述したい場合は、 &lt;code&gt;My::Module::Tutorial&lt;/code&gt; や &lt;code&gt;My::Module::FAQ&lt;/code&gt; などのサブドキュメントとしてそれらを含め、メインドキュメントのSEE ALSOセクションにリンクを提供します。</target>
        </trans-unit>
        <trans-unit id="d4f6fcebc83fe08414440f2690253120c9bf99c3" translate="yes" xml:space="preserve">
          <source>Tweak the style of B::Deparse's output. The letters should follow directly after the 's', with no space or punctuation. The following options are available:</source>
          <target state="translated">B::Deparse の出力のスタイルを微調整する。文字は's'の直後にスペースや句読点を入れずに、's'の直後に続くようにします。以下のオプションが利用可能である。</target>
        </trans-unit>
        <trans-unit id="8b77b783948e5ce8fbd237831d47a3e2aa25c8cf" translate="yes" xml:space="preserve">
          <source>Two additional extensions by Andreas Kaiser, &lt;code&gt;OS2::UPM&lt;/code&gt; , and &lt;code&gt;OS2::FTP&lt;/code&gt; , are included into &lt;code&gt;ILYAZ&lt;/code&gt; directory, mirrored on CPAN. Other OS/2-related extensions are available too.</source>
          <target state="translated">Andreas Kaiserによる2つの追加拡張機能、 &lt;code&gt;OS2::UPM&lt;/code&gt; と &lt;code&gt;OS2::FTP&lt;/code&gt; 、CPANにミラーリングされた &lt;code&gt;ILYAZ&lt;/code&gt; ディレクトリに含まれています。他のOS / 2関連の拡張機能も利用できます。</target>
        </trans-unit>
        <trans-unit id="225de66ed8612f5eaedcbe3517b9b8a030dd1dfb" translate="yes" xml:space="preserve">
          <source>Two additional fields &lt;code&gt;free&lt;/code&gt; , &lt;code&gt;used&lt;/code&gt; contain array references which provide per-bucket count of free and used chunks. Two other fields &lt;code&gt;mem_size&lt;/code&gt; , &lt;code&gt;available_size&lt;/code&gt; contain array references which provide the information about the allocated size and usable size of chunks in each bucket. Again, see &lt;a href=&quot;../perldebguts#Using-%24ENV%7bPERL_DEBUG_MSTATS%7d&quot;&gt;Using $ENV{PERL_DEBUG_MSTATS} in perldebguts&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;used&lt;/code&gt; 2つの追加フィールド &lt;code&gt;free&lt;/code&gt; には、空きチャンクと使用済みチャンクのバケットごとのカウントを提供する配列参照が含まれます。他の2つのフィールド &lt;code&gt;mem_size&lt;/code&gt; と &lt;code&gt;available_size&lt;/code&gt; には、各バケット内のチャンクの割り当てサイズと使用可能なサイズに関する情報を提供する配列参照が含まれています。繰り返しますが、詳細については&lt;a href=&quot;../perldebguts#Using-%24ENV%7bPERL_DEBUG_MSTATS%7d&quot;&gt;perldebgutsでの$ ENV {PERL_DEBUG_MSTATS}の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="959e1dbe5c03b6bf54bd2c7c42f5c06de670abcf" translate="yes" xml:space="preserve">
          <source>Two arrays smartmatch if each element in the first array smartmatches (that is, is &quot;in&quot;) the corresponding element in the second array, recursively.</source>
          <target state="translated">2 つの配列は,1 番目の配列の各要素が,2 番目の配列の対応する要素と再帰的にスマートマッチする(つまり,「中」にある)場合にスマートマッチします.</target>
        </trans-unit>
        <trans-unit id="ef9d289482c44cedd928e08a539e06da234c1ea2" translate="yes" xml:space="preserve">
          <source>Two directories</source>
          <target state="translated">2つのディレクトリ</target>
        </trans-unit>
        <trans-unit id="4932b4ce84c4a3c76d97d8ddc1677ad9583f731a" translate="yes" xml:space="preserve">
          <source>Two exceptions are fseek() and ftell(). 32-bit applications should use fseeko(3C) and ftello(3C). These will get automatically mapped to fseeko64() and ftello64().</source>
          <target state="translated">2 つの例外は fseek()と ftell()です。32 ビットアプリケーションでは fseeko(3C)と ftello(3C)を使用する必要があります。これらは自動的に fseeko64()および ftello64()にマップされます。</target>
        </trans-unit>
        <trans-unit id="59e6099a51676c8b357d47058d648615908e9535" translate="yes" xml:space="preserve">
          <source>Two functions are provided by</source>
          <target state="translated">2つの機能は、以下のように提供されています。</target>
        </trans-unit>
        <trans-unit id="362495d14b1f3b1a8e9077a2b6d2d038307cf755" translate="yes" xml:space="preserve">
          <source>Two functions are provided to perform in-memory compression/uncompression of RFC 1950 data streams. They are called &lt;code&gt;compress&lt;/code&gt; and &lt;code&gt;uncompress&lt;/code&gt; .</source>
          <target state="translated">RFC 1950データストリームのメモリ内圧縮/圧縮解除を実行する2つの関数が提供されています。それらは、 &lt;code&gt;compress&lt;/code&gt; および &lt;code&gt;uncompress&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="a1fae0daa00d9847553b4c2af0e0bfcf15f43ad2" translate="yes" xml:space="preserve">
          <source>Two hexadecimal numbers separated by horizontal whitespace (space or tabular characters) denoting a range of code points to include.</source>
          <target state="translated">含むべきコードポイントの範囲を示す水平方向の空白(スペースまたは表形式の文字)で区切られた2つの16進数。</target>
        </trans-unit>
        <trans-unit id="fc8d21d4a74e99aae1a5fc40b83d3fff90123b23" translate="yes" xml:space="preserve">
          <source>Two nested identical markup commands have been found. Generally this does not make sense.</source>
          <target state="translated">入れ子になった同一のマークアップコマンドが2つ見つかりました。一般的にこれは意味がありません。</target>
        </trans-unit>
        <trans-unit id="5e76b53030582383f7d551a5e77c668c449dbb3b" translate="yes" xml:space="preserve">
          <source>Two of the codes specified by the standard (XTS which is reserved for testing purposes and XXX which is for transactions where no currency is involved) are omitted.</source>
          <target state="translated">規格で規定されているコードのうち、2つのコード(試験用に予約されているXTSと通貨が関係しない取引用のXXX)を省略しています。</target>
        </trans-unit>
        <trans-unit id="a1d006aec19b5d26f771c4cb3b1aa7d14cd4a562" translate="yes" xml:space="preserve">
          <source>Two or more suspects remain</source>
          <target state="translated">二人以上の容疑者が残っている</target>
        </trans-unit>
        <trans-unit id="069f392f8b693bf3f912fa721edb551769786910" translate="yes" xml:space="preserve">
          <source>Two other &quot;encapsulation&quot; macros are the PERL_GLOBAL_STRUCT and PERL_GLOBAL_STRUCT_PRIVATE (the latter turns on the former, and the former turns on MULTIPLICITY.) The PERL_GLOBAL_STRUCT causes all the internal variables of Perl to be wrapped inside a single global struct, struct perl_vars, accessible as (globals) &amp;amp;PL_Vars or PL_VarsPtr or the function Perl_GetVars(). The PERL_GLOBAL_STRUCT_PRIVATE goes one step further, there is still a single struct (allocated in main() either from heap or from stack) but there are no global data symbols pointing to it. In either case the global struct should be initialized as the very first thing in main() using Perl_init_global_struct() and correspondingly tear it down after perl_free() using Perl_free_global_struct(), please see</source>
          <target state="translated">他の2つの「カプセル化」マクロは、PERL_GLOBAL_STRUCTとPERL_GLOBAL_STRUCT_PRIVATEです（後者は前者をオンにし、前者はMULTIPLICITYをオンにします）。 （グローバル）＆PL_VarsまたはPL_VarsPtrまたは関数Perl_GetVars（）。 PERL_GLOBAL_STRUCT_PRIVATEがさらに一歩進んで、単一の構造体（main（）でヒープまたはスタックから割り当てられた）がまだありますが、それを指すグローバルデータシンボルはありません。どちらの場合でも、グローバル構造体は、Perl_init_global_struct（）を使用してmain（）の最初の要素として初期化する必要があり、Perl_free_global_struct（）を使用してperl_free（）の後に対応して破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="9e4d897b2c15b7e4e4ca9fbaec8aab25f6b14e93" translate="yes" xml:space="preserve">
          <source>Two possible uses (besides ignoring the property) come to mind. A singleton class could be implemented this using the generic object. If necessary, an &lt;code&gt;init()&lt;/code&gt; method could die or ignore calls with actual objects (references), so only the generic object will ever exist.</source>
          <target state="translated">（プロパティを無視する以外に）2つの可能な使用法が思い浮かびます。シングルトンクラスは、汎用オブジェクトを使用してこれを実装できます。必要に応じて、 &lt;code&gt;init()&lt;/code&gt; メソッドは実際のオブジェクト（参照）の呼び出しを無効にするか無視することができるため、汎用オブジェクトのみが存在します。</target>
        </trans-unit>
        <trans-unit id="70abff015732d480e204353f739476e826fe7dc6" translate="yes" xml:space="preserve">
          <source>Two potentially non-obvious but traditional &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; semantics are that it waits indefinitely until the lock is granted, and that its locks are &lt;b&gt;merely advisory&lt;/b&gt;. Such discretionary locks are more flexible, but offer fewer guarantees. This means that programs that do not also use &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; may modify files locked with &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;, your port's specific documentation, and your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (But if you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called &quot;features&quot;). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.)</source>
          <target state="translated">2つの潜在的に自明ではないが従来の &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; セマンティクスは、ロックが許可されるまで無期限に待機することと、そのロックは&lt;b&gt;単なる&lt;/b&gt;通知に&lt;b&gt;過ぎないこと&lt;/b&gt;です。そのような任意のロックはより柔軟ですが、保証が少なくなります。つまり、 &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; を使用しないプログラムは、 &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; でロックされたファイルを変更する可能性があります。&lt;a href=&quot;../perlport&quot;&gt;perlportを&lt;/a&gt;参照、ポート固有のドキュメント、詳細についてはシステム固有のローカルマンページをご覧ください。移植可能なプログラムを作成している場合は、従来の動作を想定するのが最善です。 （ただし、そうでない場合は、常に独自のシステムの特異性（「機能」と呼ばれることもあります）を完全に自由に書くことができます。可搬性の問題に対する奴隷の執着は、仕事の遂行を妨げるものであってはなりません。）</target>
        </trans-unit>
        <trans-unit id="3c9f59ec6423987c8c2fe5d0858f160205e3fc59" translate="yes" xml:space="preserve">
          <source>Two potentially non-obvious but traditional &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; semantics are that it waits indefinitely until the lock is granted, and that its locks are &lt;b&gt;merely advisory&lt;/b&gt;. Such discretionary locks are more flexible, but offer fewer guarantees. This means that programs that do not also use &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; may modify files locked with &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;, your port's specific documentation, and your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (But if you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called &quot;features&quot;). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.)</source>
          <target state="translated">2つの潜在的に自明ではないが従来の &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; セマンティクスは、ロックが許可されるまで無期限に待機することと、そのロックは&lt;b&gt;単なる&lt;/b&gt;通知に&lt;b&gt;過ぎないこと&lt;/b&gt;です。そのような任意のロックはより柔軟ですが、保証が少なくなります。つまり、 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; を使用しないプログラムは、 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; でロックされたファイルを変更する可能性があります。&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照、ポート固有のドキュメント、詳細についてはシステム固有のローカルマンページをご覧ください。移植可能なプログラムを作成している場合は、従来の動作を想定するのが最善です。 （ただし、そうでない場合は、常に独自のシステムの特異性（「機能」と呼ばれることもあります）を完全に自由に書くことができます。可搬性の問題に対する奴隷の執着は、仕事の遂行を妨げるものであってはなりません。）</target>
        </trans-unit>
        <trans-unit id="53df84b423920613232d12c96d5eb675ef01a9db" translate="yes" xml:space="preserve">
          <source>Two potentially non-obvious but traditional flock semantics are that it waits indefinitely until the lock is granted, and that its locks are</source>
          <target state="translated">潜在的には自明ではありませんが、伝統的なフロックのセマンティクスとしては、ロックが付与されるまで無期限に待機することと、そのロックが</target>
        </trans-unit>
        <trans-unit id="778a62aee9043b393531476babc83e7e729243c9" translate="yes" xml:space="preserve">
          <source>Two special locales are worth particular mention: &quot;C&quot; and &quot;POSIX&quot;. Currently these are effectively the same locale: the difference is mainly that the first one is defined by the C standard, the second by the POSIX standard. They define the &lt;b&gt;default locale&lt;/b&gt; in which every program starts in the absence of locale information in its environment. (The</source>
          <target state="translated">「C」と「POSIX」という2つの特別なロケールは特に言及する価値があります。現在、これらは事実上同じロケールです。違いは主に、最初のロケールがC標準によって定義され、2番目のロケールがPOSIX標準によって定義されていることです。それらは、すべてのプログラムがその環境にロケール情報がない場合に起動する&lt;b&gt;デフォルトのロケール&lt;/b&gt;を定義し&lt;b&gt;ます&lt;/b&gt;。（</target>
        </trans-unit>
        <trans-unit id="001ed180b265179aa35dbaf576484db20b8f3115" translate="yes" xml:space="preserve">
          <source>Two special marker lines will bracket debugging code, like this:</source>
          <target state="translated">2 本の特別なマーカー線は、以下のようにデバッグコードを括弧で囲みます。</target>
        </trans-unit>
        <trans-unit id="fc4c89a57e0f51cea54d0e2e158fcc3083bc5fa2" translate="yes" xml:space="preserve">
          <source>Two threads both access &lt;code&gt;$x&lt;/code&gt; . Each thread can potentially be interrupted at any point, or be executed in any order. At the end, &lt;code&gt;$x&lt;/code&gt; could be 3 or 4, and both &lt;code&gt;$y&lt;/code&gt; and &lt;code&gt;$z&lt;/code&gt; could be 2 or 3.</source>
          <target state="translated">2つのスレッドが両方とも &lt;code&gt;$x&lt;/code&gt; アクセスします。各スレッドは、任意の時点で潜在的に中断されたり、任意の順序で実行されたりする可能性があります。最後に、 &lt;code&gt;$x&lt;/code&gt; は3または4で、 &lt;code&gt;$y&lt;/code&gt; と &lt;code&gt;$z&lt;/code&gt; は両方とも2または3です。</target>
        </trans-unit>
        <trans-unit id="a040608578e9e9c915007f47fc1e5b14ac218a6c" translate="yes" xml:space="preserve">
          <source>Two ways. One is to build the module normally...</source>
          <target state="translated">二つの方法があります。一つは普通にモジュールを構築する方法...</target>
        </trans-unit>
        <trans-unit id="aed361ca9a7b196027b5db9a2f0828216a331df8" translate="yes" xml:space="preserve">
          <source>Two's complement (bitwise not). This is equivalent to</source>
          <target state="translated">2つの補数(ビット単位ではありません)。に相当します。</target>
        </trans-unit>
        <trans-unit id="639570380139caf69541c926ba46013c3318dc90" translate="yes" xml:space="preserve">
          <source>Two-face References</source>
          <target state="translated">二面性リファレンス</target>
        </trans-unit>
        <trans-unit id="ae90b2c9e3f2f4b661468b3ddaef859dd9bff8a2" translate="yes" xml:space="preserve">
          <source>Two-face Scalars</source>
          <target state="translated">二重顔のスカルプ</target>
        </trans-unit>
        <trans-unit id="47708aacd7aae4d98506843c2ea25848ad8c524c" translate="yes" xml:space="preserve">
          <source>Tying Arrays</source>
          <target state="translated">配列を結ぶ</target>
        </trans-unit>
        <trans-unit id="29fe0e127980eab253dd9684cf8924d1439a9c07" translate="yes" xml:space="preserve">
          <source>Tying Arrays by Casey West &amp;lt;</source>
          <target state="translated">Casey Westによる配列の結合&amp;lt;</target>
        </trans-unit>
        <trans-unit id="1cb864932b4ba6b40040bda147b28500825da685" translate="yes" xml:space="preserve">
          <source>Tying FileHandles</source>
          <target state="translated">FileHandles の紐付け</target>
        </trans-unit>
        <trans-unit id="c44951e9133e5d8875fa8e60d17eb7ca4e5ec846" translate="yes" xml:space="preserve">
          <source>Tying Hashes</source>
          <target state="translated">ハッシュを結びつける</target>
        </trans-unit>
        <trans-unit id="c124692dc36c13d6ea9eefe451091514b3053308" translate="yes" xml:space="preserve">
          <source>Tying Scalars</source>
          <target state="translated">スカラーを結ぶ</target>
        </trans-unit>
        <trans-unit id="dd441f6c670bdd175a4a06606b3ade32864a5013" translate="yes" xml:space="preserve">
          <source>Tying to an already-opened filehandle</source>
          <target state="translated">既に開いているファイルハンドルとの紐付け</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="622fe690390119c9b2836b529615b923c08f64da" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake install&quot; (or &quot;nmake install&quot;). This will put the newly built perl and the libraries under whatever &lt;code&gt;INST_TOP&lt;/code&gt; points to in the Makefile. It will also install the pod documentation under &lt;code&gt;$INST_TOP\$INST_VER\lib\pod&lt;/code&gt; and HTML versions of the same under &lt;code&gt;$INST_TOP\$INST_VER\lib\pod\html&lt;/code&gt; .</source>
          <target state="translated">「dmake install」（または「nmake install」）と入力します。これにより、新しく構築されたperlとライブラリが、Makefile内の &lt;code&gt;INST_TOP&lt;/code&gt; が指す場所に配置されます。また、 &lt;code&gt;$INST_TOP\$INST_VER\lib\pod&lt;/code&gt; ポッドドキュメントをインストールし、 &lt;code&gt;$INST_TOP\$INST_VER\lib\pod\html&lt;/code&gt; 同じHTMLバージョンをインストールします。</target>
        </trans-unit>
        <trans-unit id="48996994efbc36adb9197c655f8807f921339671" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake test&quot; (or &quot;nmake test&quot;). This will run most of the tests from the testsuite (many tests will be skipped).</source>
          <target state="translated">dmake test&quot; (または &quot;nmake test&quot;)と入力してください。これは testsuite からほとんどのテストを実行します (多くのテストはスキップされます)。</target>
        </trans-unit>
        <trans-unit id="e707f55e50471f8dc7a11eb61a45491656e65c20" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake&quot; (or &quot;nmake&quot; if you are using that make).</source>
          <target state="translated">dmake &quot;と入力してください(そのmakeを使用している場合は &quot;nmake &quot;と入力してください)。</target>
        </trans-unit>
        <trans-unit id="817cc5b4f0c413465ec1e98078f923e58ba436f8" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;perl -v&lt;/code&gt; at the command line to find out.</source>
          <target state="translated">入力 &lt;code&gt;perl -v&lt;/code&gt; 見つけるために、コマンドラインで。</target>
        </trans-unit>
        <trans-unit id="470a91ba8a41cc959ff1b12a936c2603408f2a81" translate="yes" xml:space="preserve">
          <source>Type flag for I/O objects. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">I / Oオブジェクトのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="115e0f5825d2a5e2437586f43a3052a4bc413be2" translate="yes" xml:space="preserve">
          <source>Type flag for arrays. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">配列のタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5424ebb415da653ce11cbaa80efe5caaa204e71c" translate="yes" xml:space="preserve">
          <source>Type flag for formats. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">フォーマットのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="11f3d189f9118d5a6a717d6df4d8bfc5dd5c80fb" translate="yes" xml:space="preserve">
          <source>Type flag for hashes. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">ハッシュのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7697ce082ff72de4bd1f6e232aec1e708c3e949b" translate="yes" xml:space="preserve">
          <source>Type flag for regular expressions. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">正規表現のタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8842ec0ce8ceed5f394b670f4b4d43838af8af85" translate="yes" xml:space="preserve">
          <source>Type flag for scalars. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">スカラーのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ba6e0906867866e6b4c76c1aa73ce8fb1ddab2a4" translate="yes" xml:space="preserve">
          <source>Type flag for subroutines. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">サブルーチンのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5d98af6202cdf505f81d6de89907f306acd604bb" translate="yes" xml:space="preserve">
          <source>Type flag for typeglobs. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">タイプグロブのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e47d64cc94d0acfc0cdbf0b2c9dd711351e0f339" translate="yes" xml:space="preserve">
          <source>Type of first matching node.</source>
          <target state="translated">最初にマッチするノードのタイプ。</target>
        </trans-unit>
        <trans-unit id="82be69629fdb03e428153252cb628a3089333b85" translate="yes" xml:space="preserve">
          <source>Type-casting operator.</source>
          <target state="translated">タイプキャスティングのオペレーター。</target>
        </trans-unit>
        <trans-unit id="3c6b62766a1a668fd13ee2f54c72526e46bdd675" translate="yes" xml:space="preserve">
          <source>Type-specific attribute handlers</source>
          <target state="translated">タイプ固有の属性ハンドラ</target>
        </trans-unit>
        <trans-unit id="ee3fb11d05c90c37311491cf33008925b13b487f" translate="yes" xml:space="preserve">
          <source>Type:</source>
          <target state="translated">Type:</target>
        </trans-unit>
        <trans-unit id="dacaa1ce7373acde846ee256ee267058f226c8cb" translate="yes" xml:space="preserve">
          <source>Typed lexicals</source>
          <target state="translated">型付けされた語彙</target>
        </trans-unit>
        <trans-unit id="35c58169317903405f89e446350d7099fc17650c" translate="yes" xml:space="preserve">
          <source>Typeglobs and Filehandles</source>
          <target state="translated">タイプグローブとファイルハンドル</target>
        </trans-unit>
        <trans-unit id="c93af0f29f506026f9bce190608810109efe41de" translate="yes" xml:space="preserve">
          <source>Typeglobs are also a way to create a local filehandle using the local() operator. These last until their block is exited, but may be passed back. For example:</source>
          <target state="translated">タイプグローブは、local()演算子を使ってローカルファイルハンドルを作成する方法でもあります。これらは、そのブロックが終了するまで続きますが、引き渡すこともできます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7c854e2c86ed5ebd580cf024fab8796f99c1a0f9" translate="yes" xml:space="preserve">
          <source>Types of Nodes</source>
          <target state="translated">ノードの種類</target>
        </trans-unit>
        <trans-unit id="54a79ea7d31cf3e80acf5e2ca6b3eef126289136" translate="yes" xml:space="preserve">
          <source>Typical frequently used settings:</source>
          <target state="translated">代表的なよく使う設定。</target>
        </trans-unit>
        <trans-unit id="eeee45f0582f2da790f6df23acb83c5b9ac37e5b" translate="yes" xml:space="preserve">
          <source>Typical usage is just:</source>
          <target state="translated">典型的な使い方はただの</target>
        </trans-unit>
        <trans-unit id="9f433de3a09f2cf5cd13a827c57725457d725e39" translate="yes" xml:space="preserve">
          <source>Typical usage:</source>
          <target state="translated">典型的な使い方。</target>
        </trans-unit>
        <trans-unit id="f0a20c31caa817cfde9a5903c8d1331d2cc5ddae" translate="yes" xml:space="preserve">
          <source>Typical use is to do range checks on &lt;code&gt;uv&lt;/code&gt; before casting:</source>
          <target state="translated">典型的な用途は、キャストする前に &lt;code&gt;uv&lt;/code&gt; 範囲チェックを行うことです：</target>
        </trans-unit>
        <trans-unit id="0f7c555ca8af58d8be6641bce4c54e1f92594d54" translate="yes" xml:space="preserve">
          <source>Typical use of AutoSplit in the perl MakeMaker utility is via the command-line with:</source>
          <target state="translated">perl MakeMaker ユーティリティでの AutoSplit の一般的な使用方法は、コマンドラインからの使用です。</target>
        </trans-unit>
        <trans-unit id="2eb42fd8be2849b836904fd8c0478452015d5021" translate="yes" xml:space="preserve">
          <source>Typically displayed in italics. Example: &quot;&lt;code&gt;F&amp;lt;.cshrc&amp;gt;&lt;/code&gt; &quot;</source>
          <target state="translated">通常、イタリック体で表示されます。例： &quot; &lt;code&gt;F&amp;lt;.cshrc&amp;gt;&lt;/code&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="0b14febd4050c6e9e7fff1ec1a1e04a32b2411b9" translate="yes" xml:space="preserve">
          <source>Typically render into NFD on input and NFC on output. Using NFKC or NFKD functions improves recall on searches, assuming you've already done to the same text to be searched. Note that this is about much more than just pre- combined compatibility glyphs; it also reorders marks according to their canonical combining classes and weeds out singletons.</source>
          <target state="translated">通常、入力ではNFDに、出力ではNFCにレンダリングされます。NFKC または NFKD 関数を使用することで、検索対象の同じテキストに対して既に検索を行っていると仮定して、検索時の想起性を向上させることができます。これは、事前に結合された互換性のあるグリフだけでなく、正規の結合クラスに従ってマークを並べ替えたり、シングルトンを除外したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="b5c564109e8a3afa5be0b031d855d9ae4aa0bbb3" translate="yes" xml:space="preserve">
          <source>Typically this is used to emulate &lt;code&gt;#!&lt;/code&gt; startup on platforms that don't support &lt;code&gt;#!&lt;/code&gt; . It's also convenient when debugging a script that uses &lt;code&gt;#!&lt;/code&gt; , and is thus normally found by the shell's $PATH search mechanism.</source>
          <target state="translated">通常、これは &lt;code&gt;#!&lt;/code&gt; をエミュレートするために使用されます。 &lt;code&gt;#!&lt;/code&gt; をサポートしないプラットフォームでの起動 。 &lt;code&gt;#!&lt;/code&gt; を使用するスクリプトをデバッグするときにも便利です。なので、通常はシェルの$ PATH検索メカニズムによって検出されます。</target>
        </trans-unit>
        <trans-unit id="687058d347f26c3b9dcf0508ed2f5930b5b6fa48" translate="yes" xml:space="preserve">
          <source>Typically used to finish the deflation. Any pending output will be returned via &lt;code&gt;$out&lt;/code&gt; . &lt;code&gt;$status&lt;/code&gt; will have a value &lt;code&gt;Z_OK&lt;/code&gt; if successful.</source>
          <target state="translated">通常、デフレを終わらせるために使用されます。保留中の出力はすべて &lt;code&gt;$out&lt;/code&gt; を介して返されます。成功した場合、 &lt;code&gt;$status&lt;/code&gt; の値は &lt;code&gt;Z_OK&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="01a46f6fee05faa753caaabc6b43de594c708bd4" translate="yes" xml:space="preserve">
          <source>Typically used to finish the deflation. Any pending output will be written to &lt;code&gt;$output&lt;/code&gt; .</source>
          <target state="translated">通常、デフレを終わらせるために使用されます。保留中の出力はすべて &lt;code&gt;$output&lt;/code&gt; 書き込まれます。</target>
        </trans-unit>
        <trans-unit id="6622b7497b5ad854ceef3d9e6b7f39de4b5a746f" translate="yes" xml:space="preserve">
          <source>Typically will call &lt;code&gt;Fill&lt;/code&gt; and manipulate pointers (possibly via the API). &lt;code&gt;PerlIOBuf_read()&lt;/code&gt; may be suitable for derived classes which provide &quot;fast gets&quot; methods.</source>
          <target state="translated">通常は、 &lt;code&gt;Fill&lt;/code&gt; を呼び出してポインタを操作します（APIを使用する場合があります）。 &lt;code&gt;PerlIOBuf_read()&lt;/code&gt; は、「高速取得」メソッドを提供する派生クラスに適している場合があります。</target>
        </trans-unit>
        <trans-unit id="eb1290094db39111daed12026731de41d874265c" translate="yes" xml:space="preserve">
          <source>Typically you only need to set this if you are using nonstandard prefixes and want some or all of them to have the same semantics as '--' does under normal circumstances.</source>
          <target state="translated">通常、非標準の接頭辞を使用していて、通常の状況下では'--'と同じセマンティクスを持つ接頭辞が必要な場合にのみ設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="bbb5689bb894bcd45bb2427b7ffbb2ba5d9ac28a" translate="yes" xml:space="preserve">
          <source>Typically you use the &lt;code&gt;\G&lt;/code&gt; anchor with the &lt;code&gt;c&lt;/code&gt; flag when you want to try a different match if one fails, such as in a tokenizer. Jeffrey Friedl offers this example which works in 5.004 or later.</source>
          <target state="translated">通常、トークナイザーなどで失敗した場合に別の一致を試したい場合は、 &lt;code&gt;\G&lt;/code&gt; アンカーを &lt;code&gt;c&lt;/code&gt; フラグと共に使用します。Jeffrey Friedlは、5.004以降で機能するこの例を提供しています。</target>
        </trans-unit>
        <trans-unit id="291f2d298dd4e6053c773023592956eee5655566" translate="yes" xml:space="preserve">
          <source>Typically, Perl tests are run through this. However, anything which spits out TAP is fine. You can use this argument to specify the name of the program (and optional switches) to run your tests with:</source>
          <target state="translated">通常、Perl のテストはこれを使って実行されます。しかし、TAP を出力するものであれば何でも構いません。この引数を使って、テストを実行するプログラムの名前 (およびオプションのスイッチ)を指定することができます。</target>
        </trans-unit>
        <trans-unit id="bc1a3db1817e4391406ea8e4c10b938d812a2baf" translate="yes" xml:space="preserve">
          <source>Typically, a C compiler allocates 12 bytes to a &lt;code&gt;gappy_t&lt;/code&gt; variable, but requires only 8 bytes for a &lt;code&gt;dense_t&lt;/code&gt; . After investigating this further, we can draw memory maps, showing where the extra 4 bytes are hidden:</source>
          <target state="translated">通常、Cコンパイラーは、12バイトを &lt;code&gt;gappy_t&lt;/code&gt; 変数に割り当てますが、dense_tに必要なのは8バイトのみ &lt;code&gt;dense_t&lt;/code&gt; 。これをさらに調査した後、メモリマップを描画して、余分な4バイトが隠されている場所を示すことができます。</target>
        </trans-unit>
        <trans-unit id="83c91d2712bb90187ca081aa74ad37d202d5e800" translate="yes" xml:space="preserve">
          <source>Typically, however, things are the other way around: the tieable class expects its arguments as a flattened list, so the attribute looks like:</source>
          <target state="translated">タイアブルクラスはその引数をフラット化されたリストとして期待しているので、属性は次のようになります。</target>
        </trans-unit>
        <trans-unit id="a2dcf9e9fce909e6d70f7fd2b928940489e6fad5" translate="yes" xml:space="preserve">
          <source>Typing &quot;buildtype d off&quot; or &quot;buildtype d&quot; at the command prompt causes the buildtype to be set to Debug type with D1 flag set.</source>
          <target state="translated">コマンドプロンプトで &quot;buildtype d off &quot;または &quot;buildtype d &quot;と入力すると、ビルドタイプはD1フラグが設定されたデバッグタイプに設定されます。</target>
        </trans-unit>
        <trans-unit id="b2c7510e598f94047792f2e34322c55a1d654ee0" translate="yes" xml:space="preserve">
          <source>Typing &quot;buildtype d on&quot; at the command prompt causes the buildtype to be set to Debug type with D2 flag set.</source>
          <target state="translated">コマンドプロンプトで &quot;buildtype d on &quot;と入力すると、ビルドタイプがD2フラグが設定されたデバッグタイプになります。</target>
        </trans-unit>
        <trans-unit id="6127511edf886df0417540a81474ffb3800e60b7" translate="yes" xml:space="preserve">
          <source>Typing &quot;buildtype r&quot; at the command prompt sets it to Release Build type.</source>
          <target state="translated">コマンドプロンプトで &quot;buildtype r &quot;と入力すると、リリースビルドタイプに設定されます。</target>
        </trans-unit>
        <trans-unit id="b2c7c0caa10a0cca5ea7d69e54018ae0c0389dd6" translate="yes" xml:space="preserve">
          <source>U</source>
          <target state="translated">U</target>
        </trans-unit>
        <trans-unit id="70ae2f8ea36eac22765cdf44837146969d083d4c" translate="yes" xml:space="preserve">
          <source>U/WIN specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_Unix の U/Win 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="3a333ea8bebfa50b73219f11f7bf0ebbb8c9a863" translate="yes" xml:space="preserve">
          <source>UCA recommends that out-of-range values should not be ignored for security reasons. Say, &lt;code&gt;&quot;pe\x{110000}rl&quot;&lt;/code&gt; should not be equal to &lt;code&gt;&quot;perl&quot;&lt;/code&gt; . However, &lt;code&gt;U+FFFD&lt;/code&gt; is wrongly mapped to a variable collation element in DUCET for Unicode 6.0.0 to 6.2.0, that means out-of-range values will be ignored when &lt;code&gt;variable&lt;/code&gt; isn't &lt;code&gt;Non-ignorable&lt;/code&gt; .</source>
          <target state="translated">UCAは、セキュリティ上の理由から範囲外の値を無視しないことをお勧めします。たとえば、 &lt;code&gt;&quot;pe\x{110000}rl&quot;&lt;/code&gt; は &lt;code&gt;&quot;perl&quot;&lt;/code&gt; と等しくないはずです。ただし、 &lt;code&gt;U+FFFD&lt;/code&gt; は、Unicode 6.0.0から6.2.0のDUCETの変数照合要素に誤ってマップされます。つまり、 &lt;code&gt;variable&lt;/code&gt; が &lt;code&gt;Non-ignorable&lt;/code&gt; できない場合、範囲外の値は無視されます。</target>
        </trans-unit>
        <trans-unit id="206177d23e4d5ec0abfb5c6b0df396d679742e7c" translate="yes" xml:space="preserve">
          <source>UCS-2 is a fixed-length encoding with each character taking 16 bits. It &lt;b&gt;does not&lt;/b&gt; support</source>
          <target state="translated">UCS-2は、各文字が16ビットを取る固定長エンコーディングです。サポートして&lt;b&gt;いません&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="daeba9311089266fcf0acd6d54c9e56ca13a992e" translate="yes" xml:space="preserve">
          <source>UCS-2, UCS-4</source>
          <target state="translated">UCS-2、UCS-4</target>
        </trans-unit>
        <trans-unit id="a392dc8e430c846ca90f8e40c79fda571eef8daf" translate="yes" xml:space="preserve">
          <source>UDP datagrams are</source>
          <target state="translated">UDP データグラムは</target>
        </trans-unit>
        <trans-unit id="0b1ddbe7e9085079ee7967600cb1889fd0b548d1" translate="yes" xml:space="preserve">
          <source>UDP: Message Passing</source>
          <target state="translated">UDP:メッセージパッシング</target>
        </trans-unit>
        <trans-unit id="74ff590c1dac1161eec0fbaa8b7d8b3a98fff4d5" translate="yes" xml:space="preserve">
          <source>UNICODE AND SIDE EFFECTS</source>
          <target state="translated">ユニコードと副作用</target>
        </trans-unit>
        <trans-unit id="0f9d971f52bdd7a74ebeb786ec5143de4c2935d5" translate="yes" xml:space="preserve">
          <source>UNICODE IN OLDER PERLS</source>
          <target state="translated">古いPerlsのユニコード</target>
        </trans-unit>
        <trans-unit id="94c5e5979031dbec3b6f240558b2bfaa36f46791" translate="yes" xml:space="preserve">
          <source>UNIMPLEMENTED</source>
          <target state="translated">UNIMPLEMENTED</target>
        </trans-unit>
        <trans-unit id="9392ee60535a3aa7bb3335f263044b78e27554ed" translate="yes" xml:space="preserve">
          <source>UNISTD</source>
          <target state="translated">UNISTD</target>
        </trans-unit>
        <trans-unit id="c070755890afd262edf57a1cfae99ffc017d2459" translate="yes" xml:space="preserve">
          <source>UNITCHECK</source>
          <target state="translated">UNITCHECK</target>
        </trans-unit>
        <trans-unit id="bc192a928ab3fe78a1c74cfa4d1027b44d52c868" translate="yes" xml:space="preserve">
          <source>UNIVERSAL</source>
          <target state="translated">UNIVERSAL</target>
        </trans-unit>
        <trans-unit id="1feda7e9d1b1a232e025eeb903dd53659f7b069c" translate="yes" xml:space="preserve">
          <source>UNIVERSAL - base class for ALL classes (blessed references)</source>
          <target state="translated">UNIVERSAL-すべてのクラスの基底クラス (祝福された参照)</target>
        </trans-unit>
        <trans-unit id="b23387c60700d885c584c4f2b25855ad58b48b48" translate="yes" xml:space="preserve">
          <source>UNIX and POSIX systems provide an abstract access() operating system call, which should be used to query the read, write, and execute rights. This function hides various distinct approaches in additional operating system specific security features, like Access Control Lists (ACLs)</source>
          <target state="translated">UNIX および POSIX システムは、読み取り、書き込み、および実行の権利を問い合わせるために使用されるべき、抽象的なアクセス()オペレーティングシステムコールを提供します。この関数は、アクセス制御リスト (ACL)のような追加のオペレーティングシステム固有のセキュリティ機能の中に、さまざまな異なるアプローチを隠しています。</target>
        </trans-unit>
        <trans-unit id="fa0c8b9587852cbf0dc08f98bcecbaed53f1e1c0" translate="yes" xml:space="preserve">
          <source>UNIX domain sockets added by Sean Robinson &amp;lt;</source>
          <target state="translated">Sean Robinsonによって追加されたUNIXドメインソケット&amp;lt;</target>
        </trans-unit>
        <trans-unit id="85db2499d39f4696e02fb26511b230add2c1b670" translate="yes" xml:space="preserve">
          <source>UNIX file permissions are based on sets of mode bits for {read,write,execute} for each {user,group,other}. By default Cygwin only tracks the Win32 read-only attribute represented as the UNIX file user write bit (files are always readable, files are executable if they have a</source>
          <target state="translated">UNIXファイルのパーミッションは、各{ユーザ、グループ、その他}の{read,write,execute}のモードビットのセットに基づいています。デフォルトでは、CygwinはUNIXファイルのユーザー書き込みビットとして表されるWin32の読み取り専用属性のみを追跡します(ファイルは常に読み取り可能で、ファイルに</target>
        </trans-unit>
        <trans-unit id="5b8f1af6e17a29d4f20f56ec6d442f59acfc755d" translate="yes" xml:space="preserve">
          <source>UNSUPPORTED</source>
          <target state="translated">UNSUPPORTED</target>
        </trans-unit>
        <trans-unit id="40cccdd49a4b2f7980664d02999aa7b9e3022b50" translate="yes" xml:space="preserve">
          <source>UNTIE by Nick Ing-Simmons &amp;lt;</source>
          <target state="translated">UNTIE by Nick Ing-Simmons &amp;lt;</target>
        </trans-unit>
        <trans-unit id="41304503568dff57766f35c33ebaca45f5e827b2" translate="yes" xml:space="preserve">
          <source>UNTIE this</source>
          <target state="translated">UNTIEこれ</target>
        </trans-unit>
        <trans-unit id="e3bb3273c3d27a35e7a79c09d285ae651319171c" translate="yes" xml:space="preserve">
          <source>UPGRADING</source>
          <target state="translated">UPGRADING</target>
        </trans-unit>
        <trans-unit id="a6b6b187a5dabe1711e09378ba034929cf5397f3" translate="yes" xml:space="preserve">
          <source>UPSTREAM indicates where patches should go. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; implies that this hasn't been discussed for the module at hand. &lt;code&gt;blead&lt;/code&gt; indicates that the copy of the module in the blead sources is to be considered canonical, &lt;code&gt;cpan&lt;/code&gt; means that the module on CPAN is to be patched first. &lt;code&gt;first-come&lt;/code&gt; means that blead can be patched freely if it is in sync with the latest release on CPAN.</source>
          <target state="translated">UPSTREAMは、パッチの配置先を示します。 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; は、これが現在のモジュールで議論されていないことを意味します。 &lt;code&gt;blead&lt;/code&gt; は、bleadソース内のモジュールのコピーが正規と見なさ &lt;code&gt;cpan&lt;/code&gt; ことを示し、cpanは、CPAN上のモジュールが最初にパッチされることを意味します。 &lt;code&gt;first-come&lt;/code&gt; とは、CPANの最新リリースと同期している場合、bleadに自由にパッチを適用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="ba5e5280eb88749f4ed2bd7802c151c1f77cb3d7" translate="yes" xml:space="preserve">
          <source>URL decoding and encoding</source>
          <target state="translated">URL のデコードとエンコーディング</target>
        </trans-unit>
        <trans-unit id="61aff325c59f0125c7432101521fe8aef2d620f8" translate="yes" xml:space="preserve">
          <source>URLS</source>
          <target state="translated">URLS</target>
        </trans-unit>
        <trans-unit id="cf3bfa9a159c5a5ddc20da1eccd6bbddbdc037e4" translate="yes" xml:space="preserve">
          <source>USAGE</source>
          <target state="translated">USAGE</target>
        </trans-unit>
        <trans-unit id="3ca88d77aca2d323542d2e8f12b83151e0846c19" translate="yes" xml:space="preserve">
          <source>USE EXAMPLES</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="045095377d72052bacadc70846f65ba919bc72ee" translate="yes" xml:space="preserve">
          <source>USER METHODS</source>
          <target state="translated">ユーザーメソッド</target>
        </trans-unit>
        <trans-unit id="eff0e1414e1813c02157d57d3f325f32947a8413" translate="yes" xml:space="preserve">
          <source>USE_MULTI &amp;amp; USE_IMP_SYS defined and USE_ITHREADS not defined</source>
          <target state="translated">USE_MULTIおよびUSE_IMP_SYSが定義され、USE_ITHREADSが定義されていません</target>
        </trans-unit>
        <trans-unit id="5e29b7b3b7536de15b46013805cfeb875c7a61d3" translate="yes" xml:space="preserve">
          <source>USE_MULTI, USE_ITHREADS &amp;amp; USE_IMP_SYS defined</source>
          <target state="translated">USE_MULTI、USE_ITHREADSおよびUSE_IMP_SYSが定義されています</target>
        </trans-unit>
        <trans-unit id="227996d58fdfdee97220bd395f44c03336330289" translate="yes" xml:space="preserve">
          <source>USE_PERL_FLOCK</source>
          <target state="translated">USE_PERL_FLOCK</target>
        </trans-unit>
        <trans-unit id="d403f19c30d9dafcf5b6a7bb8666159dacf7697f" translate="yes" xml:space="preserve">
          <source>USING B::Deparse AS A MODULE</source>
          <target state="translated">B::Deparse をモジュールとして使用する</target>
        </trans-unit>
        <trans-unit id="2efa10816450d527d9e56d3271b7e34ea8c81a61" translate="yes" xml:space="preserve">
          <source>USING CONTEXT: THE DEBUG FILTER</source>
          <target state="translated">USING CONTEXT:THE DEBUG FILTER</target>
        </trans-unit>
        <trans-unit id="5dc41a076ce2820059919cbbf35a7c867770cef6" translate="yes" xml:space="preserve">
          <source>USING FILTERS</source>
          <target state="translated">フィルタの使用</target>
        </trans-unit>
        <trans-unit id="3d73074a3cddd39278e855bf130287734b3a28e3" translate="yes" xml:space="preserve">
          <source>USING LOCALES</source>
          <target state="translated">ローカルを使用する</target>
        </trans-unit>
        <trans-unit id="e914e6326e1588417f534e760a668a311b7406cd" translate="yes" xml:space="preserve">
          <source>USING PERL IN OPENVOS</source>
          <target state="translated">openvos で perl を使用する</target>
        </trans-unit>
        <trans-unit id="ac35aec57e40ba482f8f9fa734ce439013d2f6b2" translate="yes" xml:space="preserve">
          <source>USING THE EXTERNAL GZIP</source>
          <target state="translated">外部gzipを使用して</target>
        </trans-unit>
        <trans-unit id="6af50db97d3b4d2d4a30cc3bc98a5ffb4cb39ec7" translate="yes" xml:space="preserve">
          <source>USourceData.txt</source>
          <target state="translated">USourceData.txt</target>
        </trans-unit>
        <trans-unit id="6b28c2250a1cbb7c8f56dfcf0dd9e06201c35f2f" translate="yes" xml:space="preserve">
          <source>UTF stands for &quot;Unicode Transformation Format&quot;. UTF-8 is an encoding of Unicode into a sequence of 8-bit byte chunks, based on ASCII and Latin-1. The length of a sequence required to represent a Unicode code point depends on the ordinal number of that code point, with larger numbers requiring more bytes. UTF-EBCDIC is like UTF-8, but based on EBCDIC. They are enough alike that often, casual usage will conflate the two terms, and use &quot;UTF-8&quot; to mean both the UTF-8 found on ASCII platforms, and the UTF-EBCDIC found on EBCDIC ones.</source>
          <target state="translated">UTFは「Unicode Transformation Format」の略です。UTF-8 は、ASCII と Latin-1 に基づいて Unicode を 8 ビ ッ ト バ イ ト の塊の列にエン コ ーデ ィ ン グ し た も のです。Unicode コードポイントを表現するのに必要なシーケンスの長さは、そのコードポイントの序数に依存し、大きい数字ほど多くのバイトを必要とします。UTF-EBCDICはUTF-8のようなものですが、EBCDICに基づいています。彼らはしばしば、カジュアルな使用法は2つの用語を混同し、ASCIIプラットフォーム上で見つかったUTF-8、およびEBCDICのもので見つかったUTF-EBCDICの両方を意味するために &quot;UTF-8 &quot;を使用することになることを十分に似ています。</target>
        </trans-unit>
        <trans-unit id="c965e907f9d25c517a8e5bd79aea9417a0714217" translate="yes" xml:space="preserve">
          <source>UTF-16 is almost the same as UCS-2 but it supports</source>
          <target state="translated">UTF-16はUCS-2とほぼ同じですが</target>
        </trans-unit>
        <trans-unit id="5222e4ab75ba1ce305284f282ec30a73156a366c" translate="yes" xml:space="preserve">
          <source>UTF-16, UTF-16BE, UTF-16LE, Surrogates, and &lt;code&gt;BOM&lt;/code&gt; 's (Byte Order Marks)</source>
          <target state="translated">UTF-16、UTF-16BE、UTF-16LE、サロゲート、および &lt;code&gt;BOM&lt;/code&gt; （バイトオーダーマーク）</target>
        </trans-unit>
        <trans-unit id="47a1ff59a1e826be6636526f502c21d7b7b97ead" translate="yes" xml:space="preserve">
          <source>UTF-32 (UCS-4) is a fixed-length encoding with each character taking 32 bits. Since it is 32-bit, there is no need for</source>
          <target state="translated">UTF-32 (UCS-4)は、 各文字が 32 ビ ッ ト を取る固定長エン コ ーデ ィ ン グです。32ビットなので</target>
        </trans-unit>
        <trans-unit id="dfd8dce020ef601007001e4289b99a7908444d8a" translate="yes" xml:space="preserve">
          <source>UTF-32, UTF-32BE, UTF-32LE</source>
          <target state="translated">utf-32、utf-32be、utf-32le</target>
        </trans-unit>
        <trans-unit id="20e199acc434517cd4a6e5977a48bae6e5af47a4" translate="yes" xml:space="preserve">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>
        </trans-unit>
        <trans-unit id="4d56cb8e2ad2a50613de9fa7d9d9a0d239c1aca9" translate="yes" xml:space="preserve">
          <source>UTF-7 encoding</source>
          <target state="translated">エッチエフシーセブン符号化方式</target>
        </trans-unit>
        <trans-unit id="ba8308c0cebaf2cef9e02fb7f26e6c4f56ba6ce0" translate="yes" xml:space="preserve">
          <source>UTF-7 was not supported by Encode until version 1.95 because of that. But Unicode::String, a module by Gisle Aas which adds Unicode supports to non-utf8-savvy perl did support UTF-7, the UTF-7 support was added so Encode can supersede Unicode::String 100%.</source>
          <target state="translated">UTF-7はそのためにバージョン1.95までEncodeではサポートされていませんでした。しかし、UTF-7 をサポートしていた Gisle Aas 氏のモジュールである Unicode::String は UTF-7 をサポートしていたので、 Encode は Unicode::String を 100% 置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="663b90c899fa25a111067be0c22ffc64dcf581c2" translate="yes" xml:space="preserve">
          <source>UTF-8</source>
          <target state="translated">UTF-8</target>
        </trans-unit>
        <trans-unit id="e2635de14b396bd81c2a4f587434aea9cfbf99fc" translate="yes" xml:space="preserve">
          <source>UTF-8 and UTF-EBCDIC are two different encodings used to represent Unicode code points as sequences of bytes. Macros with the same names (but different definitions) in</source>
          <target state="translated">UTF-8 と UTF-EBCDIC は、Unicode コ ー ド 点をバ イ ト 列 と し て表現す る ために用い ら れてい る 2 つの異なるエン コ ーデ ィ ン グです。で同じ名前(定義は異なる)のマクロは</target>
        </trans-unit>
        <trans-unit id="8b4fe83acd749a66b827e068556fa7943eee22bb" translate="yes" xml:space="preserve">
          <source>UTF-8 and Unicode FAQ for Unix/Linux</source>
          <target state="translated">Unix/Linux用のUTF-8とUnicode FAQ</target>
        </trans-unit>
        <trans-unit id="79cdcb7150e1254a38f057938e6f4012fc46b08a" translate="yes" xml:space="preserve">
          <source>UTF-8 is a variable-length (1 to 4 bytes), byte-order independent encoding. In most of Perl's documentation, including elsewhere in this document, the term &quot;UTF-8&quot; means also &quot;UTF-EBCDIC&quot;. But in this section, &quot;UTF-8&quot; refers only to the encoding used on ASCII platforms. It is a superset of 7-bit US-ASCII, so anything encoded in ASCII has the identical representation when encoded in UTF-8.</source>
          <target state="translated">UTF-8 は可変長(1~4 バイト)で、バイトオーダーに依存しないエンコーディングです。このドキュメントの他の場所を含め、Perlのドキュメントのほとんどでは、「UTF-8」という用語は「UTF-EBCDIC」をも意味しています。しかし、この節では、「UTF-8」はASCIIプラットフォームで使用されるエンコーディングのみを指します。これは7ビットのUS-ASCIIのスーパーセットなので、ASCIIでエンコードされたものはすべて、UTF-8でエンコードされたときに同じ表現になります。</target>
        </trans-unit>
        <trans-unit id="64b07e44d3986db9cf7499225144a4d1d394db97" translate="yes" xml:space="preserve">
          <source>UTF-8 treats the first 128 codepoints, 0..127, the same as ASCII. They take only one byte per character. All other characters are encoded as two to four bytes using a complex scheme. Fortunately, Perl handles this for us, so we don't have to worry about this.</source>
          <target state="translated">UTF-8 は、最初の 128 コードポイント 0 ~ 127 を ASCII と同じように扱います。こ れ ら は 1 文字につき 1 バ イ ト し か必要 と し ません。他のすべての文字は、複雑なスキームを使用して 2 バイトから 4 バイトにエンコードされます。幸いなことに、Perl はこれを処理してくれるので、これを心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="7443ec4bd05d2044739a43a92206bcfe32f068b2" translate="yes" xml:space="preserve">
          <source>UTF-8 vs. utf8 vs. UTF8</source>
          <target state="translated">UTF-8 vs.utf8 vs.UTF8</target>
        </trans-unit>
        <trans-unit id="21357a91ac9a6238516304ecf3d0973befa29dc1" translate="yes" xml:space="preserve">
          <source>UTF-EBCDIC</source>
          <target state="translated">UTF-EBCDIC</target>
        </trans-unit>
        <trans-unit id="54206a5f5bcbb8b5ddd3ceb665085cec48ec6be8" translate="yes" xml:space="preserve">
          <source>UTF-EBCDIC is defined by &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr16&quot;&gt;Unicode Technical Report #16&lt;/a&gt;. It is defined based on CCSID 1047, not allowing for the differences for other code pages. This allows for easy interchange of text between computers running different code pages, but makes it unusable, without adaptation, for Perl on those other code pages.</source>
          <target state="translated">UTF-EBCDICは、&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr16&quot;&gt;Unicode Technical Report＃16で&lt;/a&gt;定義されています。これはCCSID 1047に基づいて定義されており、他のコードページとの違いを考慮していません。これにより、異なるコードページを実行しているコンピューター間でテキストを簡単に交換できますが、他のコードページのPerlに適応させることなく使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="fae1061497efd49ee6054c0a3d6e1ce19e05e6be" translate="yes" xml:space="preserve">
          <source>UTF-EBCDIC is used on EBCDIC platforms. The largest Unicode code points take 5 bytes to represent (instead of 4 in UTF-8), and Perl extends it to a maximum of 7 bytes to encode pode points up to what can fit in a 32-bit word (instead of 13 bytes and a 64-bit word in UTF-8).</source>
          <target state="translated">UTF-EBCDIC は EBCDIC プラットフォームで使用されます。最大の Unicode コードポイントは 5 バイトで表現され(UTF-8 では 4 バイトではなく)、Perl はそれを最大 7 バイトまで拡張して、32 ビットのワードに収まるものまでのコードポイントをエンコードします(UTF-8 では 13 バイトで 64 ビットのワードではなく)。</target>
        </trans-unit>
        <trans-unit id="32e4aba336279eb247fca6069de55e692fafce3d" translate="yes" xml:space="preserve">
          <source>UTF-X</source>
          <target state="translated">UTF-X</target>
        </trans-unit>
        <trans-unit id="17562b3d061f2f42586076a6b020ba8eb357a3ff" translate="yes" xml:space="preserve">
          <source>UTILITIES</source>
          <target state="translated">UTILITIES</target>
        </trans-unit>
        <trans-unit id="58bc809d31f639453a46636f9c8ab08c8b78bb44" translate="yes" xml:space="preserve">
          <source>UTILITY FUNCTIONS</source>
          <target state="translated">実用関数</target>
        </trans-unit>
        <trans-unit id="994023f4756ccee554f76e83b238ef8441ca987c" translate="yes" xml:space="preserve">
          <source>Ultimate control over what should be done when (actually: each time) an option is encountered on the command line can be achieved by designating a reference to a subroutine (or an anonymous subroutine) as the option destination. When GetOptions() encounters the option, it will call the subroutine with two or three arguments. The first argument is the name of the option. (Actually, it is an object that stringifies to the name of the option.) For a scalar or array destination, the second argument is the value to be stored. For a hash destination, the second argument is the key to the hash, and the third argument the value to be stored. It is up to the subroutine to store the value, or do whatever it thinks is appropriate.</source>
          <target state="translated">コマンドライン上でオプションに遭遇したとき(実際には:毎回)に何をすべきかを究極的に制御するには、オプションの宛先としてサブルーチン(あるいは匿名のサブルーチン)への参照を指定することで達成できます。GetOptions()がオプションに遭遇した場合、2つまたは3つの引数を指定してサブルーチンを呼び出します。最初の引数はオプションの名前です。スカラや配列の場合は、第二引数に格納する値を指定します。ハッシュの場合は、第2引数にハッシュのキー、第3引数に格納する値を指定します。値を格納するかどうかはサブルーチン次第です。</target>
        </trans-unit>
        <trans-unit id="fd11761cf7cb6cb9a563ded422bdfc4417516b2a" translate="yes" xml:space="preserve">
          <source>Unacceptable behavior will result in a public and clearly identified warning. Repeated unacceptable behavior will result in removal from the mailing list and revocation of rights to update rt.perl.org. The first removal is for one month. Subsequent removals will double in length. After six months with no warning, a user's ban length is reset. Removals, like warnings, are public.</source>
          <target state="translated">受け入れられない行為をした場合は、公開された明確な警告が行われます。受け入れられない行動を繰り返すと、メーリングリストからの削除とrt.perl.orgを更新する権利を剥奪されます。最初の削除は1ヶ月間です。それ以降の削除は2倍の期間になります。警告なしで6ヶ月間削除されると、ユーザの禁止期間はリセットされます。警告のような削除は公開されます。</target>
        </trans-unit>
        <trans-unit id="1f8a4652f1c5950bdfb9f442db5f7ff059a9e8ff" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;!&quot;&lt;/code&gt; performs logical negation, that is, &quot;not&quot;. See also &lt;code&gt;not&lt;/code&gt; for a lower precedence version of this.</source>
          <target state="translated">単項 &lt;code&gt;&quot;!&quot;&lt;/code&gt; 論理否定、つまり「否定」を実行します。この優先順位の低いバージョンについては &lt;code&gt;not&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="975143052b1e27f57ec5fcc07f42eb1c0eae9dc3" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;+&quot;&lt;/code&gt; has no effect whatsoever, even on strings. It is useful syntactically for separating a function name from a parenthesized expression that would otherwise be interpreted as the complete list of function arguments. (See examples above under &lt;a href=&quot;#Terms-and-List-Operators-(Leftward)&quot;&gt;Terms and List Operators (Leftward)&lt;/a&gt;.)</source>
          <target state="translated">単項 &lt;code&gt;&quot;+&quot;&lt;/code&gt; は、文字列に対してもまったく影響しません。これは、関数名を括弧で囲まれた式から分離するために構文的に便利です。そうしないと、関数の引数の完全なリストとして解釈されます。 （上記の&lt;a href=&quot;#Terms-and-List-Operators-(Leftward)&quot;&gt;用語とリスト演算子（左）の&lt;/a&gt;例を参照してください。）</target>
        </trans-unit>
        <trans-unit id="cbc2e014fe3be3f69d01617e0a9853fb77867e55" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;-&quot;&lt;/code&gt; performs arithmetic negation if the operand is numeric, including any string that looks like a number. If the operand is an identifier, a string consisting of a minus sign concatenated with the identifier is returned. Otherwise, if the string starts with a plus or minus, a string starting with the opposite sign is returned. One effect of these rules is that &lt;code&gt;-bareword&lt;/code&gt; is equivalent to the string &lt;code&gt;&quot;-bareword&quot;&lt;/code&gt; . If, however, the string begins with a non-alphabetic character (excluding &lt;code&gt;&quot;+&quot;&lt;/code&gt; or &lt;code&gt;&quot;-&quot;&lt;/code&gt; ), Perl will attempt to convert the string to a numeric, and the arithmetic negation is performed. If the string cannot be cleanly converted to a numeric, Perl will give the warning &lt;b&gt;Argument &quot;the string&quot; isn't numeric in negation (-) at ...&lt;/b&gt;.</source>
          <target state="translated">単項 &lt;code&gt;&quot;-&quot;&lt;/code&gt; は、オペランドが数値である場合、算術否定を実行します。オペランドが識別子の場合、識別子と連結されたマイナス記号で構成される文字列が返されます。それ以外の場合、文字列がプラスまたはマイナスで始まると、反対の符号で始まる文字列が返されます。これらのルールの1つの効果は、 &lt;code&gt;-bareword&lt;/code&gt; が文字列 &lt;code&gt;&quot;-bareword&quot;&lt;/code&gt; と同等であることです。ただし、文字列がアルファベット以外の文字（ &lt;code&gt;&quot;+&quot;&lt;/code&gt; または &lt;code&gt;&quot;-&quot;&lt;/code&gt; を除く）で始まる場合、Perlは文字列を数値に変換しようとし、算術否定が実行されます。文字列を数値にきれいに変換できない場合、Perlは警告を出します&lt;b&gt;引数 &quot;the string&quot;は...の否定（-）で数値ではありません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="75765e3d8911e6ac713c74a3a1fc1d709b9ed2ea" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;\&quot;&lt;/code&gt; creates a reference to whatever follows it. See &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt; and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;. Do not confuse this behavior with the behavior of backslash within a string, although both forms do convey the notion of protecting the next thing from interpolation.</source>
          <target state="translated">単項 &lt;code&gt;&quot;\&quot;&lt;/code&gt; は、それに続くものへの参照を作成します。&lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;および&lt;a href=&quot;perlref&quot;&gt;perlrefを&lt;/a&gt;参照してください。この動作と文字列内のバックスラッシュの動作を混同しないでください。どちらの形式も、次のものを補間から保護するという概念を伝えています。</target>
        </trans-unit>
        <trans-unit id="a440a050a6ba4df9312abb517ec0cbc1f89e1767" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;not&quot;&lt;/code&gt; returns the logical negation of the expression to its right. It's the equivalent of &lt;code&gt;&quot;!&quot;&lt;/code&gt; except for the very low precedence.</source>
          <target state="translated">単項 &lt;code&gt;&quot;not&quot;&lt;/code&gt; は、式の論理否定を右側に返します。 &lt;code&gt;&quot;!&quot;&lt;/code&gt; と同じです。優先度が非常に低い場合を除きます。</target>
        </trans-unit>
        <trans-unit id="4dae9b42247425fb7e1e868bc6aec93255104f04" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;~&quot;&lt;/code&gt; performs bitwise negation, that is, 1's complement. For example, &lt;code&gt;0666 &amp;amp; ~027&lt;/code&gt; is 0640. (See also &lt;a href=&quot;#Integer-Arithmetic&quot;&gt;Integer Arithmetic&lt;/a&gt; and &lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;Bitwise String Operators&lt;/a&gt;.) Note that the width of the result is platform-dependent: &lt;code&gt;~0&lt;/code&gt; is 32 bits wide on a 32-bit platform, but 64 bits wide on a 64-bit platform, so if you are expecting a certain bit width, remember to use the &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; operator to mask off the excess bits.</source>
          <target state="translated">単項 &lt;code&gt;&quot;~&quot;&lt;/code&gt; はビット単位の否定、つまり1の補数を実行します。例えば、 &lt;code&gt;0666 &amp;amp; ~027&lt;/code&gt; 0640である（また、ある&lt;a href=&quot;#Integer-Arithmetic&quot;&gt;整数算術&lt;/a&gt;及び&lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;ビット単位ストリング演算子&lt;/a&gt;：。）結果の幅は、プラットフォーム依存であることに留意されたい &lt;code&gt;~0&lt;/code&gt; 32ビットプラットフォーム上で32ビット幅であるが、64ビット幅64ビットプラットフォームでは、特定のビット幅が予想される場合は、 &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; 演算子を使用して余分なビットをマスクしてください。</target>
        </trans-unit>
        <trans-unit id="121bb514c3415be69016271f5f8950c0aed3f161" translate="yes" xml:space="preserve">
          <source>Unbackslashed prototype characters have special meanings. Any unbackslashed &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; eats all remaining arguments, and forces list context. An argument represented by &lt;code&gt;$&lt;/code&gt; forces scalar context. An &lt;code&gt;&amp;amp;&lt;/code&gt; requires an anonymous subroutine, which, if passed as the first argument, does not require the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; keyword or a subsequent comma.</source>
          <target state="translated">バックスラッシュのないプロトタイプ文字には特別な意味があります。バックスラッシュなしの &lt;code&gt;@&lt;/code&gt; または &lt;code&gt;%&lt;/code&gt; は、残りの引数をすべて使用し、リストコンテキストを強制します。 &lt;code&gt;$&lt;/code&gt; で表される引数は、スカラーコンテキストを強制します。 &lt;code&gt;&amp;amp;&lt;/code&gt; 、最初の引数として渡された場合は、必要ありません無名サブルーチン、必要と &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; キーワードまたは後続のカンマを。</target>
        </trans-unit>
        <trans-unit id="825c40d18a2a673a59517a26d2876574d355db3e" translate="yes" xml:space="preserve">
          <source>Uncompress gzip, zip, bzip2 or lzop file/buffer</source>
          <target state="translated">gzip、zip、bzip2、または lzop ファイル/バッファの解凍</target>
        </trans-unit>
        <trans-unit id="aed55ac0a8b1616e77c1e8b5f3fc823c056e7f68" translate="yes" xml:space="preserve">
          <source>Uncompress zlib-based (zip, gzip) file/buffer</source>
          <target state="translated">zlib ベースの (zip,gzip)ファイル/バッファの解凍</target>
        </trans-unit>
        <trans-unit id="5566ebf8e86133343de98e57588751d94f017699" translate="yes" xml:space="preserve">
          <source>Uncompresses &lt;code&gt;$input&lt;/code&gt; and writes the uncompressed data to &lt;code&gt;$output&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$input&lt;/code&gt; を解凍し、解凍したデータを &lt;code&gt;$output&lt;/code&gt; 書き込みます。</target>
        </trans-unit>
        <trans-unit id="3241d8b84b7531f4c85af8e73c024fd4504975c7" translate="yes" xml:space="preserve">
          <source>Uncompresses &lt;code&gt;$source&lt;/code&gt; . If successful it returns the uncompressed data. Otherwise it returns</source>
          <target state="translated">&lt;code&gt;$source&lt;/code&gt; 解凍します。成功すると、非圧縮データが返されます。それ以外の場合は戻ります</target>
        </trans-unit>
        <trans-unit id="ac8d3226186ea01833996c8b65de3f2a8379790e" translate="yes" xml:space="preserve">
          <source>Uncompression</source>
          <target state="translated">Uncompression</target>
        </trans-unit>
        <trans-unit id="4189d548d277ce627b98749a55c3556ffc35219e" translate="yes" xml:space="preserve">
          <source>Unconditionally match a bareword or any other single character, and then go back to step 1.</source>
          <target state="translated">無条件にベアワードやその他の単一の文字にマッチし、ステップ1に戻ります。</target>
        </trans-unit>
        <trans-unit id="577343970a5bf9b7cb8738f42c2797ca4589087a" translate="yes" xml:space="preserve">
          <source>Uncuddled elses and &quot;K&amp;amp;R&quot; style for indenting control constructs</source>
          <target state="translated">抱きしめられたelseと制御構造をインデントするための「K＆R」スタイル</target>
        </trans-unit>
        <trans-unit id="11c11d31d108dd964ce797e5076b1d8839850791" translate="yes" xml:space="preserve">
          <source>Uncuddled elses.</source>
          <target state="translated">他の人たちは寝ていない</target>
        </trans-unit>
        <trans-unit id="5cd9e75daaa9152346601595647eb2d9696e6583" translate="yes" xml:space="preserve">
          <source>Undef if an external</source>
          <target state="translated">外部の場合は未定義</target>
        </trans-unit>
        <trans-unit id="b410752a7d8baa31a708ac9e0618b37a2bdd788d" translate="yes" xml:space="preserve">
          <source>Undefined subroutine &amp;amp;main::GetOptions called</source>
          <target state="translated">未定義のサブルーチン＆main :: GetOptionsが呼び出されました</target>
        </trans-unit>
        <trans-unit id="4be1ae516287ece8c814ce973af8c8cef754916c" translate="yes" xml:space="preserve">
          <source>Undefines the array. Frees the memory used by the av to store its list of scalars. If any destructors are triggered as a result, the av itself may be freed.</source>
          <target state="translated">配列の定義を解除します。スカラーのリストを格納するために av が使用するメモリを解放します。結果としてデストラクタが起動された場合、AV 自体が解放されることがあります。</target>
        </trans-unit>
        <trans-unit id="270b863b48b0c13c0b01735bf826d9b654084021" translate="yes" xml:space="preserve">
          <source>Undefines the collation element as if it were unassigned in the &lt;code&gt;table&lt;/code&gt; . This reduces the size of the table. If an unassigned character appears in the string to be collated, the sort key is made from its codepoint as a single-character collation element, as it is greater than any other assigned collation elements (in the codepoint order among the unassigned characters). But, it'd be better to ignore characters unfamiliar to you and maybe never used.</source>
          <target state="translated">照合要素を &lt;code&gt;table&lt;/code&gt; 割り当て解除されたかのように定義解除します。これにより、テーブルのサイズが小さくなります。照合される文字列に割り当てられていない文字が含まれている場合、並べ替えキーは、他の割り当てられている照合要素よりも大きい（割り当てられていない文字間のコードポイント順）ため、コードポイントから単一文字の照合要素として作成されます。ただし、慣れていない、使用されていない可能性がある文字は無視することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7b61a323c52c38306eb024952539f4f8c5a7ffe3" translate="yes" xml:space="preserve">
          <source>Undefines the hash. The XS equivalent of &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef(%hash)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハッシュを未定義にします。 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef(%hash)&lt;/a&gt;&lt;/code&gt; と同等のXS 。</target>
        </trans-unit>
        <trans-unit id="21918cc87ca44856538ac74361e547848b42b7b4" translate="yes" xml:space="preserve">
          <source>Undefines the value of EXPR, which must be an lvalue. Use only on a scalar value, an array (using &lt;code&gt;@&lt;/code&gt; ), a hash (using &lt;code&gt;%&lt;/code&gt; ), a subroutine (using &lt;code&gt;&amp;amp;&lt;/code&gt; ), or a typeglob (using &lt;code&gt;*&lt;/code&gt; ). Saying &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt; $hash{$key}&lt;/code&gt; will probably not do what you expect on most predefined variables or DBM list values, so don't do that; see &lt;a href=&quot;#delete&quot;&gt;delete&lt;/a&gt;. Always returns the undefined value. You can omit the EXPR, in which case nothing is undefined, but you still get an undefined value that you could, for instance, return from a subroutine, assign to a variable, or pass as a parameter. Examples:</source>
          <target state="translated">左辺値でなければならないEXPRの値を未定義にします。スカラー値、配列（ &lt;code&gt;@&lt;/code&gt; を使用）、ハッシュ（ &lt;code&gt;%&lt;/code&gt; を使用）、サブルーチン（ &lt;code&gt;&amp;amp;&lt;/code&gt; を使用）、または型グロブ（ &lt;code&gt;*&lt;/code&gt; を使用）でのみ使用します。言って &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt; $hash{$key}&lt;/code&gt; 、おそらくあなたがそうすることををしない、ほとんどの定義済みの変数やDBMリスト値に何を期待しないだろう。&lt;a href=&quot;#delete&quot;&gt;削除を&lt;/a&gt;参照してください。常に未定義の値を返します。 EXPRを省略できます。その場合、未定義のものはありませんが、未定義の値を取得できます。たとえば、サブルーチンから返されたり、変数に割り当てたり、パラメーターとして渡すことができます。例：</target>
        </trans-unit>
        <trans-unit id="12772c94a5d6a3598c32da79f4c1c4affc5b608e" translate="yes" xml:space="preserve">
          <source>Undefines the value of EXPR, which must be an lvalue. Use only on a scalar value, an array (using &lt;code&gt;@&lt;/code&gt; ), a hash (using &lt;code&gt;%&lt;/code&gt; ), a subroutine (using &lt;code&gt;&amp;amp;&lt;/code&gt; ), or a typeglob (using &lt;code&gt;*&lt;/code&gt; ). Saying &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt; $hash{$key}&lt;/code&gt; will probably not do what you expect on most predefined variables or DBM list values, so don't do that; see &lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt;. Always returns the undefined value. You can omit the EXPR, in which case nothing is undefined, but you still get an undefined value that you could, for instance, return from a subroutine, assign to a variable, or pass as a parameter. Examples:</source>
          <target state="translated">左辺値でなければならないEXPRの値を未定義にします。スカラー値、配列（ &lt;code&gt;@&lt;/code&gt; を使用）、ハッシュ（ &lt;code&gt;%&lt;/code&gt; を使用）、サブルーチン（ &lt;code&gt;&amp;amp;&lt;/code&gt; を使用）、または型グロブ（ &lt;code&gt;*&lt;/code&gt; を使用）でのみ使用します。言って &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt; $hash{$key}&lt;/code&gt; 、おそらくあなたがそうすることををしない、ほとんどの定義済みの変数やDBMリスト値に何を期待しないだろう。&lt;a href=&quot;delete&quot;&gt;削除を&lt;/a&gt;参照してください。常に未定義の値を返します。 EXPRを省略できます。その場合、未定義のものはありませんが、未定義の値を取得できます。たとえば、サブルーチンから返されたり、変数に割り当てたり、パラメーターとして渡すことができます。例：</target>
        </trans-unit>
        <trans-unit id="8b42ea56822642513e4f112de38357bed9dd6a64" translate="yes" xml:space="preserve">
          <source>Undefining this symbol disables the PerlIO abstraction. PerlIO is now the default; it is not recommended to disable PerlIO.</source>
          <target state="translated">このシンボルを定義しないと、PerlIO の抽象化を無効にします。PerlIO は現在デフォルトです。</target>
        </trans-unit>
        <trans-unit id="14931b1ffe46d4f806d87924392ea8d8ba051a3f" translate="yes" xml:space="preserve">
          <source>Undefining this symbol forces Perl to be compiled statically.</source>
          <target state="translated">このシンボルを定義しないと、Perl は静的にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="55d31ccf7c7a9061158740ae0e4ba2a4be4c51d6" translate="yes" xml:space="preserve">
          <source>Under &quot;Classic&quot; MacOS, a perl program will have the appropriate Creator and Type, so that double-clicking them will invoke the MacPerl application. Under Mac OS X, clickable apps can be made from any &lt;code&gt;#!&lt;/code&gt; script using Wil Sanchez' DropScript utility: &lt;a href=&quot;http://www.wsanchez.net/software/&quot;&gt;http://www.wsanchez.net/software/&lt;/a&gt; .</source>
          <target state="translated">「クラシック」MacOSでは、perlプログラムに適切なクリエーターとタイプがあり、それらをダブルクリックするとMacPerlアプリケーションが呼び出されます。Mac OS Xでは、クリック可能なアプリはどの &lt;code&gt;#!&lt;/code&gt; からでも作成できます。Wil SanchezのDropScriptユーティリティを使用したスクリプト：&lt;a href=&quot;http://www.wsanchez.net/software/&quot;&gt;http&lt;/a&gt; ://www.wsanchez.net/software/ 。</target>
        </trans-unit>
        <trans-unit id="7de147ca0cf42a020c2b34e4934080e8fbf00bba" translate="yes" xml:space="preserve">
          <source>Under &lt;a href=&quot;../test/harness&quot;&gt;Test::Harness&lt;/a&gt;, test number 2 would</source>
          <target state="translated">&lt;a href=&quot;../test/harness&quot;&gt;Test :: Harnessの&lt;/a&gt;下で、テスト番号2は</target>
        </trans-unit>
        <trans-unit id="50510298fcc80cb0b2cfe5fcb98eb1382cb9d484" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; , detection step of discontiguous contractions will be skipped.</source>
          <target state="translated">下の &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; 、不連続収縮の検出ステップはスキップされます。</target>
        </trans-unit>
        <trans-unit id="da1bc7be7a27894ec56a14e00f77fdf88c07658e" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature &quot;array_base&quot;&lt;/code&gt; , &lt;code&gt;$[&lt;/code&gt; no longer has any effect, and always contains 0. Assigning 0 to it is permitted, but any other value will produce an error.</source>
          <target state="translated">下で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature &quot;array_base&quot;&lt;/code&gt; 、 &lt;code&gt;$[&lt;/code&gt; もはや効果がありませんし、常にそれに0が許可されている割り当ては0が含まれていますが、それ以外の値はエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="bacf555aace53131b41a0f7ef63c9e3e7d03589b" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;unicode_strings&lt;/code&gt; starting in Perl 5.12.0, Unicode rules are generally used. See &lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt; for details on how this works in combination with various other pragmas.</source>
          <target state="translated">下に &lt;code&gt;unicode_strings&lt;/code&gt; はPerl 5.12で始まる、Unicodeのルールは一般的に使用されています。参照してください&lt;a href=&quot;functions/lc&quot;&gt;LC&lt;/a&gt;これは、様々な他のプラグマとの組み合わせでどのように機能するかの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="94fe5caf324bcb104f1845ec70df5cb17cd45071" translate="yes" xml:space="preserve">
          <source>Under Cygwin, $^E is the same as $!. When using &lt;a href=&quot;http://search.cpan.org/perldoc/Win32&quot;&gt;Win32 API Functions&lt;/a&gt;, use &lt;code&gt;Win32::GetLastError()&lt;/code&gt; to get the last Windows error.</source>
          <target state="translated">Cygwinでは、$ ^ Eは$！と同じです。使用している場合&lt;a href=&quot;http://search.cpan.org/perldoc/Win32&quot;&gt;のWin32 API関数を&lt;/a&gt;使用する &lt;code&gt;Win32::GetLastError()&lt;/code&gt; 最後のWindowsのエラーを取得します。</target>
        </trans-unit>
        <trans-unit id="08490cc0df2a509f16cddc3cf2a4ae40e649767f" translate="yes" xml:space="preserve">
          <source>Under EBCDIC platforms, &lt;code&gt;e2char($n)&lt;/code&gt; may not always be the same as &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(e2charnum($n))&lt;/a&gt;&lt;/code&gt;, and ditto for &lt;code&gt;$Name2character{$name}&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr($Name2character_number{$name})&lt;/a&gt;&lt;/code&gt;, because the strings are returned as native, and the numbers are returned as Unicode. However, for Perls starting with v5.8, &lt;code&gt;e2char($n)&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(utf8::unicode_to_native(e2charnum($n)))&lt;/a&gt;&lt;/code&gt;, and ditto for &lt;code&gt;$Name2character{$name}&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(utf8::unicode_to_native($Name2character_number{$name}))&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">EBCDICプラットフォームでは、文字列が返されるため、 &lt;code&gt;e2char($n)&lt;/code&gt; は常に &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(e2charnum($n))&lt;/a&gt;&lt;/code&gt; と同じであるとは限らず、 &lt;code&gt;$Name2character{$name}&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr($Name2character_number{$name})&lt;/a&gt;&lt;/code&gt; 同上ネイティブとして、番号はUnicodeとして返されます。ただし、v5.8以降の &lt;code&gt;e2char($n)&lt;/code&gt; 場合、e2char（$ n）は &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(utf8::unicode_to_native(e2charnum($n)))&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;$Name2character{$name}&lt;/code&gt; 、$ Name2character {$ name}と &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(utf8::unicode_to_native($Name2character_number{$name}))&lt;/a&gt;&lt;/code&gt; 場合は同じです。 （$ Name2character_number {$ name}））。</target>
        </trans-unit>
        <trans-unit id="18254acc65d18b7ddbf875f7bfc47db0d75ce39a" translate="yes" xml:space="preserve">
          <source>Under NFS this will use the time of the NFS server, not the time of the local machine. If there is a time synchronization problem, the NFS server and local machine will have different times. The Unix touch(1) command will in fact normally use this form instead of the one shown in the first example.</source>
          <target state="translated">NFS の場合、ローカルマシンの時刻ではなく、NFS サーバーの時刻が使用されます。時刻同期の問題がある場合、NFS サーバとローカルマシンの時刻は異なります。Unix の touch(1)コマンドは、実際には最初の例に示したものではなく、この形式を使用します。</target>
        </trans-unit>
        <trans-unit id="f3924a4fe96e1e85710f171a0842dfde3423eb52" translate="yes" xml:space="preserve">
          <source>Under OS/2, &lt;code&gt;$^E&lt;/code&gt; is set to the error code of the last call to OS/2 API either via CRT, or directly from perl.</source>
          <target state="translated">OS / 2では、 &lt;code&gt;$^E&lt;/code&gt; はCRTを介して、またはperlから直接、OS / 2 APIへの最後の呼び出しのエラーコードに設定されます。</target>
        </trans-unit>
        <trans-unit id="19dcdc34494760727e410f497dbed91a176d6c5e" translate="yes" xml:space="preserve">
          <source>Under Perl 5.10 only, using a string eval when &lt;code&gt;autodie&lt;/code&gt; is in effect can cause the autodie behaviour to leak into the surrounding scope. This can be worked around by using a &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; autodie&lt;/code&gt; at the end of the scope to explicitly remove autodie's effects, or by avoiding the use of string eval.</source>
          <target state="translated">Perl 5.10のみで、 &lt;code&gt;autodie&lt;/code&gt; が有効なときに文字列evalを使用すると、autodieの動作が周囲のスコープにリークする可能性があります。これは、オートダイの効果を明示的に削除するためにスコープの最後に &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; autodie&lt;/code&gt; を使用するか、文字列evalの使用を回避することで回避できます。</target>
        </trans-unit>
        <trans-unit id="1824d549ede70b3449b6bc94fa47857184a96f9f" translate="yes" xml:space="preserve">
          <source>Under Perl 5.18 and later, SvREADONLY only applies to read-only variables, and, under 5.20, copy-on-write scalars can also be read-only, so the above check is incorrect. You just want:</source>
          <target state="translated">Perl 5.18 以降では、SvREADONLY は読み取り専用の変数にのみ適用され、5.20 ではコピーオンライトのスカラも読み取り専用になるので、上記のチェックは正しくありません。欲しいだけです。</target>
        </trans-unit>
        <trans-unit id="8d107d150b9abd6d04d1d29a993fa6ea829d9209" translate="yes" xml:space="preserve">
          <source>Under Perl 5.8 only, &lt;code&gt;autodie&lt;/code&gt;</source>
          <target state="translated">Perl 5.8のみで、 &lt;code&gt;autodie&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e28f5c058f0915564622ac46660d6f84c05ab318" translate="yes" xml:space="preserve">
          <source>Under Perl 5.8, the &lt;code&gt;given/when&lt;/code&gt; structure is not available, so the following structure may be used:</source>
          <target state="translated">Perl 5.8では、 &lt;code&gt;given/when&lt;/code&gt; 構造が使用できないため、次の構造を使用できます。</target>
        </trans-unit>
        <trans-unit id="ef993909ab6a97a91baf7e650bc7ce46f77c2516" translate="yes" xml:space="preserve">
          <source>Under QNX 6.2.0 there are still a few tests which fail. See below and hints/qnx.sh for more information.</source>
          <target state="translated">QNX 6.2.0 では、まだいくつかのテストが失敗しています。詳細については、以下と hints/qnx.sh を参照してください。</target>
        </trans-unit>
        <trans-unit id="66b5ec5cf7fb5924aee8dffa63eba13ccd60d52e" translate="yes" xml:space="preserve">
          <source>Under Unicode rules, there are a few case-insensitive matches that cross the 255/256 boundary. Except for UTF-8 locales in Perls v5.20 and later, these are disallowed under &lt;code&gt;/l&lt;/code&gt; . For example, 0xFF (on ASCII platforms) does not caselessly match the character at 0x178, &lt;code&gt;LATIN
CAPITAL LETTER Y WITH DIAERESIS&lt;/code&gt; , because 0xFF may not be &lt;code&gt;LATIN SMALL
LETTER Y WITH DIAERESIS&lt;/code&gt; in the current locale, and Perl has no way of knowing if that character even exists in the locale, much less what code point it is.</source>
          <target state="translated">Unicodeルールでは、255/256の境界を越える大文字と小文字を区別しない一致がいくつかあります。Perl v5.20以降のUTF-8ロケールを除き、これらは &lt;code&gt;/l&lt;/code&gt; で許可されていません。たとえば、0xFF（ASCIIプラットフォームの場合）は、0x178の文字に大文字と &lt;code&gt;LATIN CAPITAL LETTER Y WITH DIAERESIS&lt;/code&gt; を区別せずに一致しません &lt;code&gt;LATIN SMALL LETTER Y WITH DIAERESIS&lt;/code&gt; は現在のロケールではラテン小文字Y Yダイアレスではない可能性があり、Perlはそのことを知る方法がないためです。文字はロケールにさえ存在しますが、それがどのコードポイントであるかはそれほどではありません。</target>
        </trans-unit>
        <trans-unit id="666da3b151d79c3526ad94c74b4a7b5272bc4ad7" translate="yes" xml:space="preserve">
          <source>Under Unicode rules, these upper-Latin1 characters are interpreted as Unicode code points, which means they have the same semantics as Latin-1 (ISO-8859-1) and C1 controls.</source>
          <target state="translated">Unicode規則の下では、これらの上位Latin1文字はUnicodeコードポイントとして解釈され、Latin-1(ISO-8859-1)やC1コントロールと同じセマンティクスを持っていることを意味します。</target>
        </trans-unit>
        <trans-unit id="15d191765263aacd2b7fcad31e78fb6cf886a85b" translate="yes" xml:space="preserve">
          <source>Under VMS this reflects the actual VMS exit status; i.e. it is the same as &lt;code&gt;$?&lt;/code&gt; when the pragma &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; is in effect.</source>
          <target state="translated">VMSでは、これは実際のVMS終了ステータスを反映します。つまり、 &lt;code&gt;$?&lt;/code&gt; と同じですか？プラグマ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; している場合。</target>
        </trans-unit>
        <trans-unit id="737324e93129014d33d4923a010ebe747aa167f7" translate="yes" xml:space="preserve">
          <source>Under VMS, &lt;code&gt;$^E&lt;/code&gt; provides the VMS status value from the last system error. This is more specific information about the last system error than that provided by &lt;code&gt;$!&lt;/code&gt; . This is particularly important when &lt;code&gt;$!&lt;/code&gt; is set to &lt;b&gt;EVMSERR&lt;/b&gt;.</source>
          <target state="translated">VMSでは、 &lt;code&gt;$^E&lt;/code&gt; は最後のシステムエラーからのVM​​Sステータス値を提供します。これは、 &lt;code&gt;$!&lt;/code&gt; が提供するものよりも、最後のシステムエラーに関するより具体的な情報です。。 &lt;code&gt;$!&lt;/code&gt; 場合、これは特に重要です。&lt;b&gt;EVMSERRに&lt;/b&gt;設定され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="50b3f98ca540bd0c81d34840956f838255c71318" translate="yes" xml:space="preserve">
          <source>Under VMS, if there is no directory information in the $path, then the current default device and directory is used.</source>
          <target state="translated">VMS では、$path にディレクトリ情報がない場合は、現在のデフォルトのデバイスとディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="3aaae4cddb5ecef27b2c450c8cc4b4b174c7016f" translate="yes" xml:space="preserve">
          <source>Under VMS, the pragma &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; makes &lt;code&gt;$?&lt;/code&gt; reflect the actual VMS exit status, instead of the default emulation of POSIX status; see &lt;a href=&quot;perlvms#%24%3f&quot;&gt;$? in perlvms&lt;/a&gt; for details.</source>
          <target state="translated">VMSでは、プラグマ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; を使用して &lt;code&gt;$?&lt;/code&gt; POSIXステータスのデフォルトのエミュレーションではなく、実際のVMS終了ステータスを反映します。参照&lt;a href=&quot;perlvms#%24%3f&quot;&gt;$を？&lt;/a&gt;詳細はperlvmsで。</target>
        </trans-unit>
        <trans-unit id="711e7c0754f84b5e7bda634825aa4039a4a70c54" translate="yes" xml:space="preserve">
          <source>Under Win32's &quot;test&quot; target you may use the TEST_SWITCHES and TEST_FILES environment variables to control the behaviour of</source>
          <target state="translated">Win32 の &quot;test&quot; ターゲットでは、環境変数 TEST_SWITCHES と TEST_FILES を使用して</target>
        </trans-unit>
        <trans-unit id="53c6d0758bf54648c779157ed9111dd650df9efe" translate="yes" xml:space="preserve">
          <source>Under Win32, &lt;code&gt;$^E&lt;/code&gt; always returns the last error information reported by the Win32 call &lt;code&gt;GetLastError()&lt;/code&gt; which describes the last error from within the Win32 API. Most Win32-specific code will report errors via &lt;code&gt;$^E&lt;/code&gt; . ANSI C and Unix-like calls set &lt;code&gt;errno&lt;/code&gt; and so most portable Perl code will report errors via &lt;code&gt;$!&lt;/code&gt; .</source>
          <target state="translated">Win32では、 &lt;code&gt;$^E&lt;/code&gt; 常に、Win32 API内からの最後のエラーを記述する、Win32呼び出し &lt;code&gt;GetLastError()&lt;/code&gt; によって報告された最後のエラー情報を返します。ほとんどのWin32固有のコードは &lt;code&gt;$^E&lt;/code&gt; 介してエラーを報告します。ANSI CおよびUnixライクな呼び出しは &lt;code&gt;errno&lt;/code&gt; を設定するため、ほとんどの移植可能なPerlコードは &lt;code&gt;$!&lt;/code&gt; を介してエラーを報告します。。</target>
        </trans-unit>
        <trans-unit id="445377f279bee790252626a9efe4c710c5fb31ec" translate="yes" xml:space="preserve">
          <source>Under Windows and VMS the option file is named</source>
          <target state="translated">WindowsとVMSでは、オプションファイルの名前は</target>
        </trans-unit>
        <trans-unit id="991af3b0df6455b17cae9de8484aa49771ee9333" translate="yes" xml:space="preserve">
          <source>Under a few operating systems, &lt;code&gt;$^E&lt;/code&gt; may contain a more verbose error indicator, such as in this case, &quot;CDROM tray not closed.&quot; Systems that do not support extended error messages leave &lt;code&gt;$^E&lt;/code&gt; the same as &lt;code&gt;$!&lt;/code&gt; .</source>
          <target state="translated">いくつかのオペレーティングシステムでは、 &lt;code&gt;$^E&lt;/code&gt; 、この場合の「CDROMトレイが閉じていません」などのより詳細なエラーインジケーターが含まれている場合があります。拡張エラーメッセージをサポートしないシステムでは、 &lt;code&gt;$^E&lt;/code&gt; は &lt;code&gt;$!&lt;/code&gt; と同じです！。</target>
        </trans-unit>
        <trans-unit id="b8188d9bfb2c028e78df0c34f466ab12923ca95e" translate="yes" xml:space="preserve">
          <source>Under bignum (or bigint or bigrat), Perl will &quot;upgrade&quot; the numbers appropriately. This means that:</source>
          <target state="translated">bignum(またはbigintやbigrat)の下では、Perlは適切に数値を「アップグレード」します。これは次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="936167913e1d36052a60fe747af5e2acfb71f327" translate="yes" xml:space="preserve">
          <source>Under case-sensitive matching, these both match the same code points as &lt;code&gt;\p{General Category=Titlecase_Letter}&lt;/code&gt; (&lt;code&gt;\p{gc=&lt;a href=&quot;functions/lt&quot;&gt;lt&lt;/a&gt;}&lt;/code&gt; ). The difference is that under &lt;code&gt;/i&lt;/code&gt; caseless matching, these match the same as &lt;code&gt;\p{Cased}&lt;/code&gt; , whereas &lt;code&gt;\p{gc=&lt;a href=&quot;functions/lt&quot;&gt;lt&lt;/a&gt;}&lt;/code&gt; matches &lt;code&gt;\p{Cased_Letter&lt;/code&gt; ).</source>
          <target state="translated">大文字と小文字を区別するマッチングでは、これらは両方とも &lt;code&gt;\p{General Category=Titlecase_Letter}&lt;/code&gt; （ &lt;code&gt;\p{gc=&lt;a href=&quot;functions/lt&quot;&gt;lt&lt;/a&gt;}&lt;/code&gt; ）と同じコードポイントに一致します。違いは、 &lt;code&gt;/i&lt;/code&gt; の &lt;code&gt;\p{Cased_Letter&lt;/code&gt; 一致では、これらは &lt;code&gt;\p{Cased}&lt;/code&gt; と同じように一致するのに対し、 &lt;code&gt;\p{gc=&lt;a href=&quot;functions/lt&quot;&gt;lt&lt;/a&gt;}&lt;/code&gt; \ p {Cased_Letter）と一致することです。</target>
        </trans-unit>
        <trans-unit id="58098e551f5eebaa46d0d3a19d00f14ced3f4d46" translate="yes" xml:space="preserve">
          <source>Under ithreads the optree is read only. If you want to enforce this, to check for write accesses from buggy code, compile with &lt;code&gt;-Accflags=-DPERL_DEBUG_READONLY_OPS&lt;/code&gt; to enable code that allocates op memory via &lt;code&gt;mmap&lt;/code&gt; , and sets it read-only when it is attached to a subroutine. Any write access to an op results in a &lt;code&gt;SIGBUS&lt;/code&gt; and abort.</source>
          <target state="translated">ithreadsでは、optreeは読み取り専用です。これを強制したい場合は、バグのあるコードからの書き込みアクセスをチェックするために、 &lt;code&gt;-Accflags=-DPERL_DEBUG_READONLY_OPS&lt;/code&gt; でコンパイルして、 &lt;code&gt;mmap&lt;/code&gt; を介してopメモリーを割り当てるコードを有効にし、サブルーチンにアタッチされている場合は読み取り専用に設定します。opへの書き込みアクセスは、 &lt;code&gt;SIGBUS&lt;/code&gt; になり、中止されます。</target>
        </trans-unit>
        <trans-unit id="41c5c0dce73b6a45e16e6c80203f13488d40f1dd" translate="yes" xml:space="preserve">
          <source>Under the &quot;switch&quot; feature, Perl gains the experimental keywords &lt;code&gt;given&lt;/code&gt; , &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt; . Starting from Perl 5.16, one can prefix the switch keywords with &lt;code&gt;CORE::&lt;/code&gt; to access the feature without a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature&lt;/code&gt; statement. The keywords &lt;code&gt;given&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; are analogous to &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; in other languages, so the code in the previous section could be rewritten as</source>
          <target state="translated">「スイッチ」機能の下では、Perlは、実験のキーワード獲得 &lt;code&gt;given&lt;/code&gt; 、、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;break&lt;/code&gt; 。 Perl 5.16以降では、switchキーワードの前に &lt;code&gt;CORE::&lt;/code&gt; を付けることができ、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature&lt;/code&gt; featureステートメントを使用せずに機能にアクセスできます。 &lt;code&gt;given&lt;/code&gt; キーワードと &lt;code&gt;when&lt;/code&gt; は他の言語の &lt;code&gt;switch&lt;/code&gt; と &lt;code&gt;case&lt;/code&gt; に類似しているので、前のセクションのコードは次のように書き直すことができます &lt;code&gt;when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3dcedc6c33e9a6ba46a7f82a03dd4b7c259f61b3" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;unicode_eval&lt;/code&gt; feature, Perl's &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; function, when passed a string, will evaluate it as a string of characters, ignoring any &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; declarations. &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; exists to declare the encoding of the script, which only makes sense for a stream of bytes, not a string of characters. Source filters are forbidden, as they also really only make sense on strings of bytes. Any attempt to activate a source filter will result in an error.</source>
          <target state="translated">下に &lt;code&gt;unicode_eval&lt;/code&gt; 機能、Perlの &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; の文字列が渡されたときの機能は、任意の無視して、文字の文字列として評価されます &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; 宣言を。スクリプトのエンコーディングを宣言するには、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;します。これは、文字列ではなく、バイトストリームに対してのみ意味があります。ソースフィルターはバイト文字列でのみ意味があるため、禁止されています。ソースフィルターをアクティブにしようとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3ed7e8de69faa9a39e5b719579b31e326e5e1ba3" translate="yes" xml:space="preserve">
          <source>Under the Mac, it depends which environment you are using. The MacPerl shell, or MPW, is much like Unix shells in its support for several quoting variants, except that it makes free use of the Mac's non-ASCII characters as control characters.</source>
          <target state="translated">Mac では、使用している環境によって異なります。MacPerl シェル (MPW)は、いくつかの引用符のバリエーションをサポートしている点で Unix シェルとよく似ていますが、Mac の非 ASCII 文字を制御文字として自由に利用できる点を除いては、MacPerl シェルの方がはるかに優れています。</target>
        </trans-unit>
        <trans-unit id="57a69bed4d30aeb2c23df15a4942d2f1bc4e9a99" translate="yes" xml:space="preserve">
          <source>Under the current implementation, the &lt;code&gt;foreach&lt;/code&gt; loop can be anywhere within the &lt;code&gt;when&lt;/code&gt; modifier's dynamic scope, but must be within the &lt;code&gt;given&lt;/code&gt; block's lexical scope. This restricted may be relaxed in a future release. See &lt;a href=&quot;#Switch-Statements&quot;&gt;Switch Statements&lt;/a&gt; below.</source>
          <target state="translated">現在の実装では、 &lt;code&gt;foreach&lt;/code&gt; ループは &lt;code&gt;when&lt;/code&gt; 修飾子の動的スコープ内のどこにあってもかまいませんが、 &lt;code&gt;given&lt;/code&gt; ブロックの字句スコープ内にある必要があります。この制限は、将来のリリースで緩和される可能性があります。下記の&lt;a href=&quot;#Switch-Statements&quot;&gt;Switchステートメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e08f959b6899ef90dffb2ee9e0e0a8572c0a7c28" translate="yes" xml:space="preserve">
          <source>Under the hood, Perl filehandles are instances of the &lt;code&gt;IO::Handle&lt;/code&gt; or &lt;code&gt;IO::File&lt;/code&gt; class. Once you have an open filehandle, you can call methods on it. Additionally, you can call methods on the &lt;code&gt;STDIN&lt;/code&gt; , &lt;code&gt;STDOUT&lt;/code&gt; , and &lt;code&gt;STDERR&lt;/code&gt; filehandles.</source>
          <target state="translated">内部的には、Perlファイルハンドルは &lt;code&gt;IO::Handle&lt;/code&gt; または &lt;code&gt;IO::File&lt;/code&gt; クラスのインスタンスです。ファイルハンドルを開いたら、そのファイルのメソッドを呼び出すことができます。さらに、 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; 、および &lt;code&gt;STDERR&lt;/code&gt; ファイルハンドルのメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="27e7e970c4cb85f5a1a451cbbaa7bb6fdbefed11" translate="yes" xml:space="preserve">
          <source>Underlying implementation for the &lt;code&gt;&lt;a href=&quot;functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; Perl function. Note that the perl-level function is vaguely deprecated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; Perl関数の基礎となる実装。perlレベルの関数は漠然と廃止されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3d53a031b5fe95ac3434bee7e57607b8155a1a48" translate="yes" xml:space="preserve">
          <source>Understand References Today</source>
          <target state="translated">今日の参考文献を理解する</target>
        </trans-unit>
        <trans-unit id="d2b515bbbe667df83c6f17f27b425a07b052435e" translate="yes" xml:space="preserve">
          <source>Understand that this removes the case-insensitivity feature of this module.</source>
          <target state="translated">これにより、このモジュールの大文字小文字を区別しない機能が削除されることを理解してください。</target>
        </trans-unit>
        <trans-unit id="5dff374e163235318e5ce8f7742ec1049ed8b995" translate="yes" xml:space="preserve">
          <source>Understanding the Magic of Tied Hashes and Arrays</source>
          <target state="translated">紐付きハッシュと配列のマジックを理解する</target>
        </trans-unit>
        <trans-unit id="4fad51d89f7e0dadc266115be3afc11b52bc9806" translate="yes" xml:space="preserve">
          <source>Undertake to build a new set of Perl images using VMS commands. Since VMS does dynamic loading, it's not necessary to statically link each extension into the Perl image, so this isn't the normal build path. Consequently, it hasn't really been tested, and may well be incomplete.</source>
          <target state="translated">VMS コマンドを使用して Perl イメージの新しいセットをビルドする作業を行います。VMS は動的な読み込みを行うので、各拡張機能を Perl イメージに静的にリンクする必要がないので、これは通常のビルドパスではありません。その結果、これは実際にはテストされておらず、不完全なものになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="58380a9a71bcafd994016d7b4cb1383592a7215e" translate="yes" xml:space="preserve">
          <source>Undo various types of fakery on an SV, where fakery means &quot;more than&quot; a string: if the PV is a shared string, make a private copy; if we're a ref, stop refing; if we're a glob, downgrade to an xpvmg; if we're a copy-on-write scalar, this is the on-write time when we do the copy, and is also used locally; if this is a vstring, drop the vstring magic. If &lt;code&gt;SV_COW_DROP_PV&lt;/code&gt; is set then a copy-on-write scalar drops its PV buffer (if any) and becomes SvPOK_off rather than making a copy. (Used where this scalar is about to be set to some other value.) In addition, the &lt;code&gt;flags&lt;/code&gt; parameter gets passed to &lt;code&gt;sv_unref_flags()&lt;/code&gt; when unreffing. &lt;code&gt;sv_force_normal&lt;/code&gt; calls this function with flags set to 0.</source>
          <target state="translated">SVでさまざまなタイプのフェイクリーを元に戻します。フェイクリーはストリングを「超える」ことを意味します。PVが共有ストリングの場合は、プライベートコピーを作成します。私たちが参照者である場合、参照を停止します。グロブの場合は、xpvmgにダウングレードします。コピーオンライトスカラーの場合、これはコピーを実行するときのオンライト時間であり、ローカルでも使用されます。これがvstringの場合、vstringマジックをドロップします。場合 &lt;code&gt;SV_COW_DROP_PV&lt;/code&gt; はその後、設定されているコピー・オン・ライトスカラーは、そのPVバッファをドロップ（もしあれば）とコピーを作成するのではなく、SvPOK_offになります。 （このスカラーが他の値に設定されるところで使用されます。）さらに、 &lt;code&gt;flags&lt;/code&gt; を &lt;code&gt;sv_unref_flags()&lt;/code&gt; ときに、flagsパラメーターがsv_unref_flags（）に渡されます。 &lt;code&gt;sv_force_normal&lt;/code&gt; は、フラグを0に設定してこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="2c0043167da52b5a8f43ef5ef3ae847c1d205a64" translate="yes" xml:space="preserve">
          <source>Undo various types of fakery on an SV: if the PV is a shared string, make a private copy; if we're a ref, stop refing; if we're a glob, downgrade to an xpvmg. See also &lt;code&gt;sv_force_normal_flags&lt;/code&gt; .</source>
          <target state="translated">SVでさまざまなタイプの偽物を元に戻します。PVが共有文字列の場合は、プライベートコピーを作成します。私たちが参照者である場合、参照を停止します。グロブの場合は、xpvmgにダウングレードしてください。 &lt;code&gt;sv_force_normal_flags&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="f9b219af612756cb93e821fb5ae6c25750a8208b" translate="yes" xml:space="preserve">
          <source>Undocumented functions</source>
          <target state="translated">文章化されていない機能</target>
        </trans-unit>
        <trans-unit id="eed18284023acb946f22279a557b952faac276d4" translate="yes" xml:space="preserve">
          <source>Unfinished Tales</source>
          <target state="translated">未完の物語</target>
        </trans-unit>
        <trans-unit id="4df58040d6486eaa853729500be20c8509618322" translate="yes" xml:space="preserve">
          <source>Unfortunately it is not that difficult somehow manage to break one's Mac OS X Perl rather severely. If all else fails and you want to really, &lt;b&gt;REALLY&lt;/b&gt;, start from scratch and remove even your Apple Perl installation (which has become corrupted somehow), the following instructions should do it. &lt;b&gt;Please think twice before following these instructions: they are much like conducting brain surgery to yourself. Without anesthesia.&lt;/b&gt; We will &lt;b&gt;not&lt;/b&gt; come to fix your system if you do this.</source>
          <target state="translated">残念ながら、なんとかしてMac OS X Perlをかなりひどく壊すことはそれほど難しいことではありません。他のすべてが失敗し、&lt;b&gt;本当に本当に&lt;/b&gt;最初から&lt;b&gt;やり直して&lt;/b&gt;、（何らかの方法で破損した）Apple Perlのインストールさえも削除したい場合は、次の手順で実行できます。&lt;b&gt;これらの指示に従う前によく考えてください：彼らは自分自身に脳手術を行うのに似ています。麻酔なし。&lt;/b&gt;私たちはなり&lt;b&gt;ません&lt;/b&gt;、あなたがこれを行う場合は、あなたのシステムを修正するために来ます。</target>
        </trans-unit>
        <trans-unit id="29de2b4590451aa9259989dd73cca2f011560c79" translate="yes" xml:space="preserve">
          <source>Unfortunately, I can't differentiate any further.</source>
          <target state="translated">残念ながら、これ以上の差別化はできません。</target>
        </trans-unit>
        <trans-unit id="6e14820d498a0bc4a9f36bbc1285250e475a8eba" translate="yes" xml:space="preserve">
          <source>Unfortunately, a note cannot be used with the single argument style of &lt;code&gt;ok()&lt;/code&gt; . That is, if you try &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;note&lt;/i&gt;)&lt;/code&gt;, then &lt;code&gt;Test&lt;/code&gt; will interpret this as &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;arg2&lt;/i&gt;)&lt;/code&gt;, and probably end up testing &lt;code&gt;&lt;i&gt;arg1&lt;/i&gt; eq &lt;i&gt;arg2&lt;/i&gt;&lt;/code&gt; -- and that's not what you want!</source>
          <target state="translated">残念ながら、ノートは &lt;code&gt;ok()&lt;/code&gt; の単一引数スタイルでは使用できません。つまり、 &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;note&lt;/i&gt;)&lt;/code&gt; を試行すると、 &lt;code&gt;Test&lt;/code&gt; はこれを &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;arg2&lt;/i&gt;)&lt;/code&gt; として解釈し、おそらく &lt;code&gt;&lt;i&gt;arg1&lt;/i&gt; eq &lt;i&gt;arg2&lt;/i&gt;&lt;/code&gt; をテストすることになりますが、それは望んでいることではありません！</target>
        </trans-unit>
        <trans-unit id="7f4f5938609da571758adb22fa6ce02f230693d9" translate="yes" xml:space="preserve">
          <source>Unfortunately, interpretation of colors 0 through 7 often depends on whether the emulator supports eight colors or sixteen colors. Emulators that only support eight colors (such as the Linux console) will display colors 0 through 7 with normal brightness and ignore colors 8 through 15, treating them the same as white. Emulators that support 16 colors, such as gnome-terminal, normally display colors 0 through 7 as dim or darker versions and colors 8 through 15 as normal brightness. On such emulators, the &quot;normal&quot; white (color 7) usually is shown as pale grey, requiring bright white (15) to be used to get a real white color. Bright black usually is a dark grey color, although some terminals display it as pure black. Some sixteen-color terminal emulators also treat normal yellow (color 3) as orange or brown, and bright yellow (color 11) as yellow.</source>
          <target state="translated">残念ながら、0 から 7 色の色の解釈は、エミュレータが 8 色をサポートしているか 16 色をサポートしているかに依存します。8 色しかサポートしていないエミュレータ (Linux コンソールなど)は、0 から 7 色を通常の明るさで表示し、8 から 15 色は無視して白と同じように扱います。gnome-terminal のような 16 色をサポートするエミュレータでは、通常、0 から 7 色は薄暗いか暗い色で表示され、8 から 15 色は通常の明るさで表示されます。このようなエミュレータでは、「通常の」白 (7 色)は通常淡い灰色で表示され、本当の白を得るためには明るい白 (15)が必要です。明るい黒は通常は暗い灰色ですが、一部の端末では純粋な黒として表示されます。一部の16色端末エミュレータでは、通常の黄色(色3)をオレンジや茶色、明るい黄色(色11)を黄色として扱うものもあります。</target>
        </trans-unit>
        <trans-unit id="d3f96232328f4faede427c8ce3041998253135ab" translate="yes" xml:space="preserve">
          <source>Unfortunately, it may be that encodings are not &lt;code&gt;PerlIO&lt;/code&gt; -savvy. You can check to see whether your encoding is supported by &lt;code&gt;PerlIO&lt;/code&gt; by invoking the &lt;code&gt;perlio_ok&lt;/code&gt; method on it:</source>
          <target state="translated">残念ながら、エンコーディングが &lt;code&gt;PerlIO&lt;/code&gt; に対応していない可能性があります。エンコーディングが &lt;code&gt;PerlIO&lt;/code&gt; でサポートされているかどうかを確認するには、 &lt;code&gt;perlio_ok&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="fa870b38ba970158ffd4da6159a903c51d8f85af" translate="yes" xml:space="preserve">
          <source>Unfortunately, the original specification of UTF-8 leaves some room for interpretation of how many bytes of encoded output one should generate from one input Unicode character. Strictly speaking, the shortest possible sequence of UTF-8 bytes should be generated, because otherwise there is potential for an input buffer overflow at the receiving end of a UTF-8 connection. Perl always generates the shortest length UTF-8, and with warnings on, Perl will warn about non-shortest length UTF-8 along with other malformations, such as the surrogates, which are not Unicode code points valid for interchange.</source>
          <target state="translated">残念なことに、UTF-8 の元の仕様では、1 つの入力 Unicode キ ャ ラ ク タ から何バ イ ト のエン コ ー ド 出力を生成す る べ き か と い う 解釈の余地を残しています。厳密に言えば、可能な限り最短の UTF-8 バイトのシーケンスが生成されるべきで、そうしないと UTF-8 接続の受信側で入力バッファオーバーフローが発生する可能性があるからです。Perl は常に最短長の UTF-8 を生成し、警告をオンにすると、Perl は最短長でない UTF-8 について、サロゲートのような他の不正形 態とともに警告を発します。</target>
        </trans-unit>
        <trans-unit id="1170c59a72df3e22ea0a090adf0e9824ff8c0b09" translate="yes" xml:space="preserve">
          <source>Unfortunately, there are quite a few deficiencies with the design (and often, the implementations) of locales. Unicode was invented (see &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt; for an introduction to that) in part to address these design deficiencies, and nowadays, there is a series of &quot;UTF-8 locales&quot;, based on Unicode. These are locales whose character set is Unicode, encoded in UTF-8. Starting in v5.20, Perl fully supports UTF-8 locales, except for sorting and string comparisons. (Use &lt;a href=&quot;unicode/collate&quot;&gt;Unicode::Collate&lt;/a&gt; for these.) Perl continues to support the old non UTF-8 locales as well. There are currently no UTF-8 locales for EBCDIC platforms.</source>
          <target state="translated">残念ながら、ロケールの設計（および多くの場合、実装）には多くの欠点があります。 Unicodeは、これらの設計上の欠陥に部分的に対処するために発明され（その&lt;a href=&quot;perlunitut&quot;&gt;概要&lt;/a&gt;についてはperlunitutを参照）、現在、Unicodeに基づく一連の「UTF-8ロケール」があります。これらはUTF-8でエンコードされたUnicodeの文字セットのロケールです。 Perlはv5.20以降、ソートと文字列比較を除き、UTF-8ロケールを完全にサポートしています。 （これらには&lt;a href=&quot;unicode/collate&quot;&gt;Unicode :: Collat​​e&lt;/a&gt;を使用してください。）Perlは引き続き古い非UTF-8ロケールもサポートしています。現在、EBCDICプラットフォーム用のUTF-8ロケールはありません。</target>
        </trans-unit>
        <trans-unit id="c8d518114a049f78aefe7090de8efc32eccefc83" translate="yes" xml:space="preserve">
          <source>Unfortunately, this isn't true. In perl 5.18 and earlier, AVs use &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; as a marker for indicating that an array element has not yet been initialized. Thus, &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $av[0]&lt;/code&gt; would be true for the above Perl code, but false for the array generated by the XS code. In perl 5.20, storing &amp;amp;PL_sv_undef will create a read-only element, because the scalar &amp;amp;PL_sv_undef itself is stored, not a copy.</source>
          <target state="translated">残念ながら、これは真実ではありません。perl 5.18以前では、AVは &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; をマーカーとして使用して、配列要素がまだ初期化されていないことを示しています。したがって、 &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $av[0]&lt;/code&gt; は上記のPerlコードではtrueになりますが、XSコードで生成された配列ではfalseになります。perl 5.20では、スカラー＆PL_sv_undef自体がコピーではなく格納されるため、＆PL_sv_undefを格納すると読み取り専用要素が作成されます。</target>
        </trans-unit>
        <trans-unit id="5a9b09da1b70d953819b14bad175ad6e8c81c049" translate="yes" xml:space="preserve">
          <source>Unfortunately, while this &lt;code&gt;style&lt;/code&gt; variable is used to set defaults for all three directory hierarchies (core, vendor, and site), there is no guarantee that the same style is actually appropriate for all those directories. For example, $prefix might be</source>
          <target state="translated">残念ながら、この &lt;code&gt;style&lt;/code&gt; 変数は3つすべてのディレクトリ階層（コア、ベンダー、サイト）のデフォルトを設定するために使用されますが、同じスタイルが実際にこれらすべてのディレクトリに適切であるという保証はありません。たとえば、$ prefixは</target>
        </trans-unit>
        <trans-unit id="87c5d4faa14910842f5557a05819e468661f127e" translate="yes" xml:space="preserve">
          <source>Unfortunately, while this is true, it's still broken. All the references in @AoA refer to the</source>
          <target state="translated">残念ながら、これは事実であるとはいえ、まだ壊れています。AoAの中のすべての参照は</target>
        </trans-unit>
        <trans-unit id="b3033d12e8c5e48f79875dd4cf162f90c243f353" translate="yes" xml:space="preserve">
          <source>Unfortunately, you may encounter Perl modules that are not</source>
          <target state="translated">残念ながら、Perl のモジュールが</target>
        </trans-unit>
        <trans-unit id="76435dad798e21eb71def4f2d3a46ed9708e4adf" translate="yes" xml:space="preserve">
          <source>Unget a line of text from the server.</source>
          <target state="translated">サーバーからテキストの行を取得します。</target>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="eb802e96fd38e5e550d19f898a4fa941c45d6b21" translate="yes" xml:space="preserve">
          <source>Unicode 7.0 changed the wording so that they are &quot;&lt;b&gt;not recommended&lt;/b&gt; for use in open interchange of Unicode text data&quot;. The 7.0 Standard goes on to say:</source>
          <target state="translated">Unicode 7.0は、「Unicodeテキストデータのオープンインターチェンジでの使用&lt;b&gt;は推奨さ&lt;/b&gt;れ&lt;b&gt;ない&lt;/b&gt;」ように表現を変更しました。 7.0標準はさらに次のように述べています。</target>
        </trans-unit>
        <trans-unit id="8306b01ff9c220d1ce9274f85cf12d457904d299" translate="yes" xml:space="preserve">
          <source>Unicode Character Properties</source>
          <target state="translated">ユニコード文字プロパティ</target>
        </trans-unit>
        <trans-unit id="2a76af7c10ae9a7945dc677634ff7f287d2f0d66" translate="yes" xml:space="preserve">
          <source>Unicode Collation Algorithm</source>
          <target state="translated">ユニコード照合アルゴリズム</target>
        </trans-unit>
        <trans-unit id="8a8a7bf1ba1b9e4c2b07e9ad90fbd26463e5d980" translate="yes" xml:space="preserve">
          <source>Unicode Consortium</source>
          <target state="translated">ユニコードコンソーシアム</target>
        </trans-unit>
        <trans-unit id="b56cce9c1325a6619b09abb29a03b2934dad13be" translate="yes" xml:space="preserve">
          <source>Unicode Encodings</source>
          <target state="translated">ユニコードエンコーディング</target>
        </trans-unit>
        <trans-unit id="20d826b4f354ace01634ff9215d461c1d2de2da2" translate="yes" xml:space="preserve">
          <source>Unicode FAQ</source>
          <target state="translated">ユニコードFAQ</target>
        </trans-unit>
        <trans-unit id="be2c3b070e201b30c780f442801bee53720d3f02" translate="yes" xml:space="preserve">
          <source>Unicode Glossary</source>
          <target state="translated">ユニコード用語集</target>
        </trans-unit>
        <trans-unit id="c37be50216d5f3d38f1ea9b4becfe8758aaff3f3" translate="yes" xml:space="preserve">
          <source>Unicode I/O</source>
          <target state="translated">ユニコード入出力</target>
        </trans-unit>
        <trans-unit id="4f977034e8571e3a210188dcc1d8385457a8e9f6" translate="yes" xml:space="preserve">
          <source>Unicode Normalization Forms</source>
          <target state="translated">ユニコード正規化フォーム</target>
        </trans-unit>
        <trans-unit id="775e22294d31686679c1488c3a4e009b588fb93a" translate="yes" xml:space="preserve">
          <source>Unicode Normalization Forms - UAX #15</source>
          <target state="translated">Unicode正規化フォーム-UAX #15</target>
        </trans-unit>
        <trans-unit id="41086ae1277eac703b49ed9c64da7c4e1e028776" translate="yes" xml:space="preserve">
          <source>Unicode Properties</source>
          <target state="translated">Unicodeプロパティ</target>
        </trans-unit>
        <trans-unit id="ecfb52e522a545f9d54db78a273755a7cf69910d" translate="yes" xml:space="preserve">
          <source>Unicode Recommended Reading List</source>
          <target state="translated">ユニコード推奨リーディングリスト</target>
        </trans-unit>
        <trans-unit id="3dc43797a086d2e60b97e26ddbcd0e763ba2be44" translate="yes" xml:space="preserve">
          <source>Unicode Regular Expression Support Level</source>
          <target state="translated">ユニコード正規表現サポートレベル</target>
        </trans-unit>
        <trans-unit id="47be4025952fbf3894ef86d325a9d331d9d77d10" translate="yes" xml:space="preserve">
          <source>Unicode Support</source>
          <target state="translated">ユニコードサポート</target>
        </trans-unit>
        <trans-unit id="3b3c1f4d1dbf76960cd965f0a9ee21a6e35c74bd" translate="yes" xml:space="preserve">
          <source>Unicode Useful Resources</source>
          <target state="translated">ユニコードの便利なリソース</target>
        </trans-unit>
        <trans-unit id="0bd38e8f5dc5fab318029c6a0f6bf740c02237f9" translate="yes" xml:space="preserve">
          <source>Unicode aims to &lt;b&gt;UNI&lt;/b&gt;-fy the en-&lt;b&gt;CODE&lt;/b&gt;-ings of all the world's character sets into a single Standard. For quite a few of the various coding standards that existed when Unicode was first created, converting from each to Unicode essentially meant adding a constant to each code point in the original standard, and converting back meant just subtracting that same constant. For ASCII and ISO-8859-1, the constant is 0. For ISO-8859-5, (Cyrillic) the constant is 864; for Hebrew (ISO-8859-8), it's 1488; Thai (ISO-8859-11), 3424; and so forth. This made it easy to do the conversions, and facilitated the adoption of Unicode.</source>
          <target state="translated">Unicodeの目的&lt;b&gt;UNIは、&lt;/b&gt;エン-Fy &lt;b&gt;CODEの&lt;/b&gt;単一の標準に世界のすべての文字セットの-ingsを。 Unicodeが最初に作成されたときに存在していたさまざまなコーディング標準のかなりの数について、それぞれをUnicodeに変換することは、元の標準の各コードポイントに定数を追加することを意味し、元に戻すことは、同じ定数を差し引くことを意味しました。 ASCIIおよびISO-8859-1の場合、定数は0です。ISO-8859-5の場合（キリル文字）、定数は864です。ヘブライ語（ISO-8859-8）の場合は1488です。タイ語（ISO-8859-11）、3424;など。これにより、変換が簡単になり、Unicodeの採用が容易になりました。</target>
        </trans-unit>
        <trans-unit id="292b5cfbcdb907b6b9b2852bab43a1e41959e1df" translate="yes" xml:space="preserve">
          <source>Unicode also defines various</source>
          <target state="translated">また、ユニコードは様々な</target>
        </trans-unit>
        <trans-unit id="bfb017bed191925e52b6029168924ebfe8c5d26c" translate="yes" xml:space="preserve">
          <source>Unicode and EBCDIC</source>
          <target state="translated">ユニコードとEBCDIC</target>
        </trans-unit>
        <trans-unit id="e27520c25eb75e7d79e8f990eeb1be4ae1df41df" translate="yes" xml:space="preserve">
          <source>Unicode and ISO/IEC 10646 are coordinated standards that unify almost all other modern character set standards, covering more than 80 writing systems and hundreds of languages, including all commercially-important modern languages. All characters in the largest Chinese, Japanese, and Korean dictionaries are also encoded. The standards will eventually cover almost all characters in more than 250 writing systems and thousands of languages. Unicode 1.0 was released in October 1991, and 6.0 in October 2010.</source>
          <target state="translated">UnicodeとISO/IEC 10646は、他のほとんどすべての現代文字セット規格を統一した協調規格であり、商業的に重要な現代言語を含む80以上の筆記体系と数百以上の言語をカバーしています。最大の中国語、日本語、韓国語辞書のすべての文字も符号化されています。この規格は最終的に、250以上の筆記体系と数千以上の言語のほぼすべての文字をカバーすることになります。Unicode 1.0は1991年10月に、6.0は2010年10月にリリースされました。</target>
        </trans-unit>
        <trans-unit id="35759c0ae04781f6ce2a8261ef308a0d62267332" translate="yes" xml:space="preserve">
          <source>Unicode and Localisation Support</source>
          <target state="translated">ユニコードとローカリゼーションのサポート</target>
        </trans-unit>
        <trans-unit id="c79347889e0d28fc8f7e3b48dc5c985da6b9c2b3" translate="yes" xml:space="preserve">
          <source>Unicode and Multilingual Support in HTML, Fonts, Web Browsers and Other Applications</source>
          <target state="translated">HTML、フォント、Webブラウザおよびその他のアプリケーションにおけるUnicodeおよび多言語サポート</target>
        </trans-unit>
        <trans-unit id="aa0a00bb85a8ade7272b8fa2d081ab3abd746b2c" translate="yes" xml:space="preserve">
          <source>Unicode and UTF</source>
          <target state="translated">ユニコードとエッチエフティーエフ</target>
        </trans-unit>
        <trans-unit id="8e9632880dc5b73eee711bbb8acae51558160af7" translate="yes" xml:space="preserve">
          <source>Unicode and UTF-8</source>
          <target state="translated">ユニコードとUTF-8</target>
        </trans-unit>
        <trans-unit id="814213da4f2b17caa9167081f902458536e3ac5c" translate="yes" xml:space="preserve">
          <source>Unicode casing is very different from ASCII casing.</source>
          <target state="translated">UnicodeのケーシングはASCIIのケーシングとは大きく異なります。</target>
        </trans-unit>
        <trans-unit id="3db087027c1f3fb2dafc91bf1aec8e28ed66555f" translate="yes" xml:space="preserve">
          <source>Unicode character database</source>
          <target state="translated">ユニコード文字データベース</target>
        </trans-unit>
        <trans-unit id="90ce74ac0f978040e744ea5f9ee3a9fc0fdd5b56" translate="yes" xml:space="preserve">
          <source>Unicode character properties that are NOT accepted by Perl</source>
          <target state="translated">Perl が受け付けない Unicode 文字プロパティ</target>
        </trans-unit>
        <trans-unit id="131ad96e9210c062a5a91bbff68adb3c52f574b9" translate="yes" xml:space="preserve">
          <source>Unicode characters are assigned to</source>
          <target state="translated">Unicode文字は</target>
        </trans-unit>
        <trans-unit id="9cd8bdcde375ab8cc6d64998c61f22e2b1db366b" translate="yes" xml:space="preserve">
          <source>Unicode characters have a Unicode name and numeric code point (ordinal) value. Use the &lt;code&gt;\N{}&lt;/code&gt; construct to specify a character by either of these values. Certain sequences of characters also have names.</source>
          <target state="translated">Unicode文字には、Unicode名と数値コードポイント（序数）値があります。 &lt;code&gt;\N{}&lt;/code&gt; 構成を使用して、これらの値のいずれかで文字を指定します。文字の特定のシーケンスにも名前があります。</target>
        </trans-unit>
        <trans-unit id="210080ef48f936087dda80492d9856fe5ec4b9bc" translate="yes" xml:space="preserve">
          <source>Unicode classes</source>
          <target state="translated">ユニコードクラス</target>
        </trans-unit>
        <trans-unit id="0f01459324a40b9e6a3a0e387cbfebfba5b6c62c" translate="yes" xml:space="preserve">
          <source>Unicode code points versus EBCDIC code points</source>
          <target state="translated">Unicode コードポイント対 EBCDIC コードポイント</target>
        </trans-unit>
        <trans-unit id="7625e9ef1dd87171eb4d5354c03dd9be33744a1d" translate="yes" xml:space="preserve">
          <source>Unicode codepoint</source>
          <target state="translated">ユニコードコードポイント</target>
        </trans-unit>
        <trans-unit id="106885fd8f00b6d1d3909f50579c6a1e81f50c34" translate="yes" xml:space="preserve">
          <source>Unicode concept which most often is equal to uppercase, but for certain characters like the German &quot;sharp s&quot; there is a difference.</source>
          <target state="translated">ユニコードの概念で、大文字と同じになることが多いが、ドイツ語の &quot;sharp s &quot;のような特定の文字には違いがある。</target>
        </trans-unit>
        <trans-unit id="d49075f8dbc705f2f67ea7272b64074e286787f2" translate="yes" xml:space="preserve">
          <source>Unicode defines a fourth boundary type, accessible through the &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::LineBreak&quot;&gt;Unicode::LineBreak&lt;/a&gt; module.</source>
          <target state="translated">Unicodeは4番目の境界タイプを定義し、&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::LineBreak&quot;&gt;Unicode :: LineBreak&lt;/a&gt;モジュールを通じてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="07aa50c4f0010de0db76a15f32c4e153b24a7275" translate="yes" xml:space="preserve">
          <source>Unicode defines all its properties in the compound form, so all single-form properties are Perl extensions. Most of these are just synonyms for the Unicode ones, but some are genuine extensions, including several that are in the compound form. And quite a few of these are actually recommended by Unicode (in &lt;a href=&quot;http://www.unicode.org/reports/tr18&quot;&gt;http://www.unicode.org/reports/tr18&lt;/a&gt;).</source>
          <target state="translated">Unicodeはすべてのプロパティを複合形式で定義するため、すべての単一形式プロパティはPerl拡張です。これらのほとんどは、Unicodeの同義語ですが、複合形式になっているものを含め、一部は本物の拡張です。そして、これらのかなりの数が実際にUnicodeによって推奨されています（&lt;a href=&quot;http://www.unicode.org/reports/tr18&quot;&gt;http://www.unicode.org/reports/tr18にあります&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8557c4367cf0c9f30d95a470ee521928d669fb7c" translate="yes" xml:space="preserve">
          <source>Unicode defines characters like &lt;code&gt;LATIN CAPITAL LETTER A&lt;/code&gt; or &lt;code&gt;GREEK
SMALL LETTER ALPHA&lt;/code&gt; and unique numbers for the characters, in this case 0x0041 and 0x03B1, respectively. These unique numbers are called</source>
          <target state="translated">Unicodeは、 &lt;code&gt;LATIN CAPITAL LETTER A&lt;/code&gt; やギリシャ &lt;code&gt;GREEK SMALL LETTER ALPHA&lt;/code&gt; などの文字と、文字の一意の番号（この場合はそれぞれ0x0041および0x03B1）を定義します。これらの一意の番号は</target>
        </trans-unit>
        <trans-unit id="66287c5bc6e75d359bae32c20cfc35103e105bf3" translate="yes" xml:space="preserve">
          <source>Unicode does define several other decimal--and numeric--characters besides the familiar 0 to 9, such as the Arabic and Indic digits. Perl does not support string-to-number conversion for digits other than ASCII &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; (and ASCII &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt; for hexadecimal). To get safe conversions from any Unicode string, use &lt;a href=&quot;unicode/ucd#num()&quot;&gt;num() in Unicode::UCD&lt;/a&gt;.</source>
          <target state="translated">Unicodeは、アラビア数字やインド数字など、一般的な0から9以外のいくつかの10進数文字および数値文字を定義しています。Perlは、ASCII &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;9&lt;/code&gt; （16進数の &lt;code&gt;f&lt;/code&gt; はASCII &lt;code&gt;a&lt;/code&gt; からf）以外の数字の文字列から数値への変換をサポートしていません。Unicode文字列から安全な変換を取得するには&lt;a href=&quot;unicode/ucd#num()&quot;&gt;、Unicode :: UCDでnum（）を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e0b4309884526bd11fe1ab30cc9fc6ed43648809" translate="yes" xml:space="preserve">
          <source>Unicode form that is useful when comparing strings regardless of case, as certain characters have complex one-to-many case mappings. Primarily a variant of lowercase.</source>
          <target state="translated">特定の文字は一対多の大文字と小文字の対応付けが複雑なため、大文字と小文字に関係なく文字列を比較する際に便利な Unicode 形式。主に小文字の変形です。</target>
        </trans-unit>
        <trans-unit id="71079ed61722f43474765527d68998144c7665d4" translate="yes" xml:space="preserve">
          <source>Unicode furnishes the &lt;code&gt;Age&lt;/code&gt; property from which this is derived. The problem with Age is that a strict interpretation of it (which Perl takes) has it matching the precise release a code point's meaning is introduced in. Thus &lt;code&gt;U+0041&lt;/code&gt; would match only 1.1; and &lt;code&gt;U+1EFF&lt;/code&gt; only 5.1. This is not usually what you want.</source>
          <target state="translated">Unicodeは、これの派生元である &lt;code&gt;Age&lt;/code&gt; プロパティを提供します。 Ageの問題は、それを厳密に解釈すると（Perlが採用）、コードポイントの意味が導入された正確なリリースと一致することです。したがって、 &lt;code&gt;U+0041&lt;/code&gt; は1.1にのみ一致します。および &lt;code&gt;U+1EFF&lt;/code&gt; のみ5.1。これは通常、あなたが望むものではありません。</target>
        </trans-unit>
        <trans-unit id="fd3ab6b6f70f7431b1416e0f9107c1af48c38649" translate="yes" xml:space="preserve">
          <source>Unicode has some property-value pairs that currently don't match anything. This happens generally either because they are obsolete, or they exist for symmetry with other forms, but no language has yet been encoded that uses them. In this version of Unicode, the following match zero code points:</source>
          <target state="translated">Unicodeには、現在のところ何も一致しないプロパティと値のペアがいくつかあります。これは一般的に、それらが時代遅れになっているか、あるいは他の形式との対称性のために存在しているが、それらを使用する言語がまだエンコードされていないために起こります。このバージョンの Unicode では、以下のものがゼロのコードポイントにマッチします。</target>
        </trans-unit>
        <trans-unit id="73c49c9d36b230f185c7169c7475e8856ddbd520" translate="yes" xml:space="preserve">
          <source>Unicode in Perl on EBCDIC</source>
          <target state="translated">EBCDIC 上の Perl での Unicode</target>
        </trans-unit>
        <trans-unit id="5a2ff10d38459692f18fa8f0d5e12e0027770ead" translate="yes" xml:space="preserve">
          <source>Unicode is a character set standard which plans to codify all of the writing systems of the world, plus many other symbols.</source>
          <target state="translated">Unicodeは、世界のすべての文字システムに加えて、他の多くの記号をコード化することを計画している文字セットの標準です。</target>
        </trans-unit>
        <trans-unit id="3bb1c5615f2383d427b4613073ef1ec435b5138c" translate="yes" xml:space="preserve">
          <source>Unicode is a character set that can represent most characters in most of the world's languages, providing room for over one million different characters. Unicode 3.1 specifies 94,140 characters: The Basic Latin characters are assigned to the numbers 0 - 127. The Latin-1 Supplement with characters that are used in several European languages is in the next range, up to 255. After some more Latin extensions we find the character sets from languages using non-Roman alphabets, interspersed with a variety of symbol sets such as currency symbols, Zapf Dingbats or Braille. (You might want to visit &lt;a href=&quot;http://www.unicode.org/&quot;&gt;http://www.unicode.org/&lt;/a&gt; for a look at some of them - my personal favourites are Telugu and Kannada.)</source>
          <target state="translated">Unicodeは、世界のほとんどの言語でほとんどの文字を表すことができる文字セットであり、100万以上の異なる文字に対応できます。 Unicode 3.1では94,140文字が指定されています。基本ラテン文字は0〜127の数字に割り当てられています。いくつかのヨーロッパ言語で使用されている文字を含むLatin-1サプリメントは、次の範囲、最大255です。ローマ字以外のアルファベットを使用する言語の文字セット。通貨記号、Zapf Dingbats、点字などのさまざまな記号セットが散在しています。 （&lt;a href=&quot;http://www.unicode.org/&quot;&gt;http://www.unicode.org/にアクセス&lt;/a&gt;して、それらのいくつかを確認することをお勧めします。私の個人的なお気に入りは、テルグ語とカンナダ語です。）</target>
        </trans-unit>
        <trans-unit id="bb4b52a0e0d40f8cd4680e731fa8661db40b7bfb" translate="yes" xml:space="preserve">
          <source>Unicode is a comprehensive standard. It specifies many things outside the scope of Perl, such as how to display sequences of characters. For a full discussion of all aspects of Unicode, see &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;.</source>
          <target state="translated">Unicodeは包括的な標準です。文字のシーケンスを表示する方法など、Perlの範囲外の多くのものを指定します。Unicodeのすべての側面の詳細については、&lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.orgを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="38d8bac67762b71e3e301bd389dd5bf647e3a7f7" translate="yes" xml:space="preserve">
          <source>Unicode is a new and complex technology and one may easily overlook certain security pitfalls. See &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; for an overview and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for details, and &lt;a href=&quot;perlunicode#Security-Implications-of-Unicode&quot;&gt;Security Implications of Unicode in perlunicode&lt;/a&gt; for security implications in particular.</source>
          <target state="translated">Unicodeは新しく複雑な技術であり、特定のセキュリティ上の落とし穴を見落としがちです。参照&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;概要およびため&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを参照してください&lt;/a&gt;詳細については、と&lt;a href=&quot;perlunicode#Security-Implications-of-Unicode&quot;&gt;perlunicodeを参照してくださいでのUnicodeのセキュリティへの影響&lt;/a&gt;、特にセキュリティへの影響について。</target>
        </trans-unit>
        <trans-unit id="2819bd58737a8580070f8ba307d9387529fe1cef" translate="yes" xml:space="preserve">
          <source>Unicode is encoded using several competing encodings, of which UTF-8 is the most used. In a Unicode encoding, multiple subsequent bytes can be used to store a single code point, or simply: character.</source>
          <target state="translated">Unicode は、 い く つかの競合エン コ ーデ ィ ン グ を用いてエン コ ーデ ィ ン グ さ れていますが、 その中でも UTF-8 が最も使われています。Unicode エンコーディングでは、複数の後続のバイトを使って 1 つのコードポイントを格納したり、単に:文字を格納したりすることができます。</target>
        </trans-unit>
        <trans-unit id="5a66fde7942a6271294a3a5979cbe3017c3d5acd" translate="yes" xml:space="preserve">
          <source>Unicode is supported on EBCDIC platforms. See &lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt;.</source>
          <target state="translated">Unicodeは、EBCDICプラットフォームでサポートされています。&lt;a href=&quot;perlebcdic&quot;&gt;perlebcdicを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="989d0062ad097f9dec3fa95782856724eb6165aa" translate="yes" xml:space="preserve">
          <source>Unicode promises that the set of code points that have these two properties will never change, so something that is not quoted in v5.16 will never need to be quoted in any future Perl release. (Not all the code points that match Pattern_Syntax have actually had characters assigned to them; so there is room to grow, but they are quoted whether assigned or not. Perl, of course, would never use an unassigned code point as an actual metacharacter.)</source>
          <target state="translated">Unicode では、これら 2 つのプロパティを持つコードポイントのセットは決して変更されないと約束されていますので、v5.16 で引用されていないものは、将来の Perl リリースで引用される必要はありません。(Pattern_Syntax にマッチする全てのコードポイントに実際に文字が割り当てられているわけではありませんので、増やす余地はありますが、割り当てられているかどうかに関わらず引用されます。Perlはもちろん、未割り当てのコードポイントを実際のメタキャラクタとして使用することはありません。)</target>
        </trans-unit>
        <trans-unit id="fb2ca4e28ea7e22cfa06c89ba6c3b93dca994a19" translate="yes" xml:space="preserve">
          <source>Unicode properties are defined (surprise!) only on Unicode code points. Starting in v5.20, when matching against &lt;code&gt;\p&lt;/code&gt; and &lt;code&gt;\P&lt;/code&gt; , Perl treats non-Unicode code points (those above the legal Unicode maximum of 0x10FFFF) as if they were typical unassigned Unicode code points.</source>
          <target state="translated">Unicodeプロパティは、Unicodeコードポイントでのみ定義されます（驚き！）。v5.20以降、 &lt;code&gt;\p&lt;/code&gt; および &lt;code&gt;\P&lt;/code&gt; と照合する場合、Perlは非Unicodeコードポイント（有効なUnicodeの最大値0x10FFFFを超えるもの）を、典型的な割り当てられていないUnicodeコードポイントであるかのように扱います。</target>
        </trans-unit>
        <trans-unit id="139a9bb1fddefbaa23b5411336f2d45c5af1add3" translate="yes" xml:space="preserve">
          <source>Unicode publishes the names of blocks in two different styles, though the two are equivalent under Unicode's loose matching rules.</source>
          <target state="translated">Unicode はブロックの名前を 2 つの異なるスタイルで公開していますが、この 2 つは Unicode の緩いマッチングルールの下では同等です。</target>
        </trans-unit>
        <trans-unit id="38ecc57a7a45e8fa0530ba908225186656979efa" translate="yes" xml:space="preserve">
          <source>Unicode rules are used for the case change.</source>
          <target state="translated">大文字小文字の変更にはUnicodeルールを使用しています。</target>
        </trans-unit>
        <trans-unit id="7088ba3066aa65d6bcc96771fbb92a42fd96dcd6" translate="yes" xml:space="preserve">
          <source>Unicode support is an extensive requirement. While Perl does not implement the Unicode standard or the accompanying technical reports from cover to cover, Perl does support many Unicode features.</source>
          <target state="translated">Unicode サポートは広範な要件です。Perl は Unicode 標準やそれに付随する技術レポートを隅から隅まで実装しているわけではありませんが、Perl は多くの Unicode 機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="b8b243e5f3e426dd36737b42e29d2ec9970a7c1a" translate="yes" xml:space="preserve">
          <source>Unicode, of course, assigns each of those code points a particular meaning (along with ones above 255). To preserve backward compatibility, Perl only uses the Unicode meanings when there is some indication that Unicode is what is intended; otherwise the non-ASCII code points remain treated as if they are unassigned.</source>
          <target state="translated">もちろん、Unicode はこれらのコードポイントのそれぞれに特定の意味を割り当てます (255 以上のコードポイントと一緒に)。後方互換性を維持するために、Perl は Unicode が意図されたものであることを示す何らかの兆候がある場合にのみ Unicode の意味を使用します。</target>
        </trans-unit>
        <trans-unit id="21276899f4cb4b0159879360c7526c4fe6c28316" translate="yes" xml:space="preserve">
          <source>Unicode/Collate</source>
          <target state="translated">Unicode/Collate</target>
        </trans-unit>
        <trans-unit id="37148638183749a1c0b03d85014634d4e43c64c4" translate="yes" xml:space="preserve">
          <source>Unicode/Collate/Foo.txt</source>
          <target state="translated">Unicode/Collate/Foo.txt</target>
        </trans-unit>
        <trans-unit id="f77e952a14d870cb3ae7b18f391e8c5f3d325575" translate="yes" xml:space="preserve">
          <source>Unicode::Collate</source>
          <target state="translated">Unicode::Collate</target>
        </trans-unit>
        <trans-unit id="3ff519c896603d01c9e76e4f19191f11d112327a" translate="yes" xml:space="preserve">
          <source>Unicode::Collate - Unicode Collation Algorithm</source>
          <target state="translated">Unicode::Collate-Unicode 照合アルゴリズム</target>
        </trans-unit>
        <trans-unit id="72b47eca97eb095d02921b6571fab1a6dfdb0bc0" translate="yes" xml:space="preserve">
          <source>Unicode::Normalize</source>
          <target state="translated">Unicode::Normalize</target>
        </trans-unit>
        <trans-unit id="2e61bd2963848230702b059b3f915c279424ceeb" translate="yes" xml:space="preserve">
          <source>Unicode::Normalize - Unicode Normalization Forms</source>
          <target state="translated">Unicode::Normalize-Unicode正規化フォーム</target>
        </trans-unit>
        <trans-unit id="58e1ebb138145877210bc1aaddb6a695f639333f" translate="yes" xml:space="preserve">
          <source>Unicode::UCD</source>
          <target state="translated">Unicode::UCD</target>
        </trans-unit>
        <trans-unit id="878eb3fe5907f3dbbef3993a9d210c838c3bd0a6" translate="yes" xml:space="preserve">
          <source>Unicode::UCD - Unicode character database</source>
          <target state="translated">Unicode::UCD-Unicode 文字データベース</target>
        </trans-unit>
        <trans-unit id="b0e10771734c32d2d9e8385457afb6c4bd746163" translate="yes" xml:space="preserve">
          <source>Unicode::UCD::UnicodeVersion</source>
          <target state="translated">Unicode::UCD::UnicodeVersion</target>
        </trans-unit>
        <trans-unit id="c884d01b9429a9f7304a835d13687b8ca5872d3c" translate="yes" xml:space="preserve">
          <source>Unified method to both set and get options in the SOL_SOCKET level. If called with one argument then getsockopt is called, otherwise setsockopt is called.</source>
          <target state="translated">SOL_SOCKET レベルのオプションの設定と取得の両方を行う統一されたメソッド。1 つの引数を指定して呼ばれた場合は getsockopt が呼ばれ、そうでない場合は setsockopt が呼ばれます。</target>
        </trans-unit>
        <trans-unit id="238642af65f3add9fa062158d9a8954a0d8cc5fc" translate="yes" xml:space="preserve">
          <source>Unimplemented, but you can use &lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt; and the &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; module to achieve similar things.</source>
          <target state="translated">実装されていませんが、&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;と&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;モジュールを使用して同様のことを実現できます。</target>
        </trans-unit>
        <trans-unit id="c6635fe323dcba6e8b8b2d5cdbb340361ce906ed" translate="yes" xml:space="preserve">
          <source>Universal Binary support</source>
          <target state="translated">ユニバーサルバイナリのサポート</target>
        </trans-unit>
        <trans-unit id="cecc0d8500754b34f5bd7f11dfabb25c3a770aaf" translate="yes" xml:space="preserve">
          <source>Unix</source>
          <target state="translated">Unix</target>
        </trans-unit>
        <trans-unit id="2fb49d2b5adcca8ced12a532099ac9adce5647b1" translate="yes" xml:space="preserve">
          <source>Unix Network Programming, 2nd Edition, Volume 1</source>
          <target state="translated">ユニックスネットワークプログラミング 第2版 第1巻</target>
        </trans-unit>
        <trans-unit id="b4c5506923f63fcc0ec2a3603b475130b23382af" translate="yes" xml:space="preserve">
          <source>Unix Review</source>
          <target state="translated">Unixレビュー</target>
        </trans-unit>
        <trans-unit id="4b39a128140df62988dc25aafca006880dd71ad2" translate="yes" xml:space="preserve">
          <source>Unix has no need of special linker flags.</source>
          <target state="translated">Unixでは特別なリンカフラグは必要ありません。</target>
        </trans-unit>
        <trans-unit id="faa3f11d873bf24fcae352a27226c0c2e88d087f" translate="yes" xml:space="preserve">
          <source>Unix's &lt;code&gt;#!&lt;/code&gt; technique can be simulated on other systems:</source>
          <target state="translated">Unixの &lt;code&gt;#!&lt;/code&gt; テクニックは他のシステムでシミュレートできます：</target>
        </trans-unit>
        <trans-unit id="7f87c004392cd89a556aff5f86328de12b9ca773" translate="yes" xml:space="preserve">
          <source>Unix-Domain TCP Clients and Servers</source>
          <target state="translated">Unix ドメイン TCP クライアントとサーバ</target>
        </trans-unit>
        <trans-unit id="4acfa258fe45e38658aa00a5dfda8b8abeddb8cc" translate="yes" xml:space="preserve">
          <source>Unix-domain sockets on OS/2 live in a pseudo-file-system &lt;code&gt;/sockets/...&lt;/code&gt; . To avoid a failure to create a socket with a name of a different form, &lt;code&gt;&quot;/socket/&quot;&lt;/code&gt; is prepended to the socket name (unless it starts with this already).</source>
          <target state="translated">OS / 2のUnixドメインソケットは、疑似ファイルシステム &lt;code&gt;/sockets/...&lt;/code&gt; にあります。別の形式の名前でソケットを作成できないことを回避するために、 &lt;code&gt;&quot;/socket/&quot;&lt;/code&gt; がソケット名の前に付加されます（これがすでにこれで始まっている場合を除く）。</target>
        </trans-unit>
        <trans-unit id="4f3c45c8b86738464ace2f8005c8fbdecfe76366" translate="yes" xml:space="preserve">
          <source>Unix.U</source>
          <target state="translated">Unix.U</target>
        </trans-unit>
        <trans-unit id="516d733c8bf9db439f1f86408315d55784a8e43c" translate="yes" xml:space="preserve">
          <source>Unknown '=xxxx' commands, unknown 'X&amp;lt;...&amp;gt;' interior-sequences, and unterminated interior sequences.</source>
          <target state="translated">不明な「= xxxx」コマンド、不明な「X &amp;lt;...&amp;gt;」内部シーケンス、および終了していない内部シーケンス。</target>
        </trans-unit>
        <trans-unit id="48c5c163aa1fa71615dee0d3c90ca77bf54723d6" translate="yes" xml:space="preserve">
          <source>Unknown result token.</source>
          <target state="translated">不明な結果トークンです。</target>
        </trans-unit>
        <trans-unit id="4013e411624fa8892f8200feafb69475d2458d0b" translate="yes" xml:space="preserve">
          <source>Unknowns are &lt;code&gt;&quot;-&quot;&lt;/code&gt; . Unknowns can happen unfortunately quite easily: if the platform doesn't support retrieving the information; if the binary is missing the debug information; if the optimizer has transformed the code by for example inlining.</source>
          <target state="translated">不明は &lt;code&gt;&quot;-&quot;&lt;/code&gt; です。未知は、残念ながら非常に簡単に発生する可能性があります。プラットフォームが情報の取得をサポートしていない場合。バイナリにデバッグ情報がない場合。オプティマイザがインライン化などによってコードを変換した場合。</target>
        </trans-unit>
        <trans-unit id="ce906b20ea9a7a0bf0bcbae85c1c9421e3de60b2" translate="yes" xml:space="preserve">
          <source>Unless %hash has already been locked the key/value could be deleted regardless of this setting.</source>
          <target state="translated">hash が既にロックされていない限り、この設定に関係なくキー/値を削除できます。</target>
        </trans-unit>
        <trans-unit id="5c6af5673dc4ae00136df64bec88a6550bf388e5" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;${^UNICODE}&lt;/code&gt; (available starting in v5.8.2) exists and is non-zero, the PerlIO layers of &lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt; are set to &quot;&lt;code&gt;:encoding(&lt;i&gt;ENCNAME&lt;/i&gt;)&lt;/code&gt;&quot;. Therefore,</source>
          <target state="translated">ない限り、 &lt;code&gt;${^UNICODE}&lt;/code&gt; （v5.8.2で入手可能な出発）が存在し、非ゼロである、のPerlIOを層 &lt;code&gt;STDIN&lt;/code&gt; および &lt;code&gt;STDOUT&lt;/code&gt; は「に設定されている &lt;code&gt;:encoding(&lt;i&gt;ENCNAME&lt;/i&gt;)&lt;/code&gt; 」。したがって、</target>
        </trans-unit>
        <trans-unit id="c4a238cf9ea26a0e7ddfda497c5bf0d771bd8656" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-DPERL_MEM_LOG_NOIMPL&lt;/code&gt; is also compiled, the logging functions read $ENV{PERL_MEM_LOG} to determine whether to log the event, and if so how:</source>
          <target state="translated">&lt;code&gt;-DPERL_MEM_LOG_NOIMPL&lt;/code&gt; もコンパイルされていない限り、ロギング関数は$ ENV {PERL_MEM_LOG}を読み取って、イベントをログに記録するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="7183c27cf3fecde6bcc64c00a3a891d43f73c77b" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; is set to &lt;code&gt;T&lt;/code&gt; (and the kernel is after 2000/09/01), such DLLs are considered to be global. When loading a global DLL it is first looked in the table of already-loaded global DLLs. Because of this the fact that one executable loaded a DLL from &lt;code&gt;BEGINLIBPATH&lt;/code&gt; and &lt;code&gt;ENDLIBPATH&lt;/code&gt; , or</source>
          <target state="translated">&lt;code&gt;LIBPATHSTRICT&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; に設定されていない限り（およびカーネルが2000/09/01以降）、そのようなDLLはグローバルであると見なされます。グローバルDLLをロードする場合、最初に、すでにロードされているグローバルDLLのテーブルが検索されます。このため、1つの実行可能ファイルが &lt;code&gt;BEGINLIBPATH&lt;/code&gt; および &lt;code&gt;ENDLIBPATH&lt;/code&gt; からDLLをロードしたという事実、または</target>
        </trans-unit>
        <trans-unit id="025ed2d87cd53899da043f16934d54b56cb767cf" translate="yes" xml:space="preserve">
          <source>Unless ASCII vs. EBCDIC issues are specifically being discussed, references to UTF-8 encoding in this document and elsewhere should be read as meaning UTF-EBCDIC on EBCDIC platforms. See &lt;a href=&quot;perlebcdic#Unicode-and-UTF&quot;&gt;Unicode and UTF in perlebcdic&lt;/a&gt;.</source>
          <target state="translated">ASCIIとEBCDICの問題が特に議論されていない限り、このドキュメントおよび他の場所でのUTF-8エンコーディングへの参照は、EBCDICプラットフォームでのUTF-EBCDICを意味するものとして読む必要があります。&lt;a href=&quot;perlebcdic#Unicode-and-UTF&quot;&gt;perlebcdicのUnicodeおよびUTFを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="763e516abf0169c17797549989072db7b3b436d9" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, functions return 0 on success, or a negative value (usually &lt;code&gt;EOF&lt;/code&gt; which is usually -1) and set &lt;code&gt;errno&lt;/code&gt; on error.</source>
          <target state="translated">特に明記されていない限り、関数は成功すると0、または負の値（通常は &lt;code&gt;EOF&lt;/code&gt; で通常は-1）を &lt;code&gt;errno&lt;/code&gt; 、エラーの場合はerrnoを設定します。</target>
        </trans-unit>
        <trans-unit id="843ebacc41e4317d9c7bf3f947fad475a9e1f11b" translate="yes" xml:space="preserve">
          <source>Unless otherwise notes, all examples below require this standard preamble to work correctly, with the &lt;code&gt;#!&lt;/code&gt; adjusted to work on your system:</source>
          <target state="translated">特に注記がない限り、以下のすべての例では、 &lt;code&gt;#!&lt;/code&gt; を使用してこの標準プリアンブルが正しく機能する必要があります。システムで動作するように調整：</target>
        </trans-unit>
        <trans-unit id="519ecd12b4838877006c606ab377c9933076da06" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated all methods return either a</source>
          <target state="translated">特に指定がない限り、すべてのメソッドは</target>
        </trans-unit>
        <trans-unit id="58c869a304e00ffd24d619f7d44db8d57f44a80c" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated it works just like ExtUtils::MM_Unix</source>
          <target state="translated">特に明記されていない限り、ExtUtils::MM_Unix と同様に動作します。</target>
        </trans-unit>
        <trans-unit id="caa9da45012bfbe0b5378d58f4fff0a9abfa58b5" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated, it works just like ExtUtils::MM_Unix</source>
          <target state="translated">特に指定がない限り、ExtUtils::MM_Unix と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="42e400a7ab19dec964d9377da14546fab4feb3ec" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;anyinflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下の指定がない限り、のためのオプションパラメータ &lt;code&gt;anyinflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; は、で定義されたオブジェクト指向インタフェースを用いたものと同じである&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション&lt;/a&gt;以下のセクション。</target>
        </trans-unit>
        <trans-unit id="47a707f463b0bb3f1b25444c520600dbd6696505" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;anyuncompress&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下の指定がない限り、のためのオプションパラメータ &lt;code&gt;anyuncompress&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; は、で定義されたオブジェクト指向インタフェースを用いたものと同じである&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション&lt;/a&gt;以下のセクション。</target>
        </trans-unit>
        <trans-unit id="d669d839575081392547a5a9cafaedbd09bec28c" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;bunzip2&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;bunzip2&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="5cd0d3bee7135d518d8ccc595535d8b3eccde37f" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;bzip2&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;bzip2&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="2d2f8a94031befaa66720968f47bd4dde9da6fcf" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;deflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;deflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="f180e51799fa543d0272bd825b3d860097f806c2" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;gunzip&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;gunzip&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="43b54de84f56f9f511018d58087cdd33377321ec" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;gzip&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;gzip&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションのパラメーターは、下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクターオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="d8c0791fbf600370c86e6ae040e4b2abd896e9ba" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;inflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;inflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="e65e4b1379d48c357409defc2e3a088bfcc64051" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;rawdeflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;rawdeflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="f9aa434ca385a7cef6abc358c51e5f3189796565" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;rawinflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;rawinflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションのパラメーターは、以下の&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクターオプション&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="e2285dec1544503fb1e6e19eb0aec81e1f5a9726" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;unzip&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;unzip&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="f45874d912d180929ebed6cffec516fc7cf2fb97" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;zip&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下の指定がない限り、のためのオプションパラメータ &lt;code&gt;zip&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; は、で定義されたオブジェクト指向インタフェースを用いたものと同じである&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション&lt;/a&gt;以下のセクション。</target>
        </trans-unit>
        <trans-unit id="871cfac0f7d812719fa8ee355ce0991623ac4e0b" translate="yes" xml:space="preserve">
          <source>Unless specified otherwise all method can be called as class methods, or as object methods. If called as class methods then the &quot;default&quot; object will be used, and if necessary created using the current processes %Config and @INC. See the 'default' option to new() for details.</source>
          <target state="translated">特に指定がない限り、すべてのメソッドはクラス・メソッドとして、またはオブジェクト・メソッドとして呼び出すことができます。クラス・メソッドとして呼び出された場合、&quot;既定の&quot; オブジェクトが使用され、必要に応じて現在のプロセス %Config および @INC を使用して作成されます。詳細は new()の 'default' オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="360b129724fa7c1c8235f3513edf30406e818a7b" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;/r&lt;/code&gt; option is used, the string specified with &lt;code&gt;=~&lt;/code&gt; must be a scalar variable, an array element, a hash element, or an assignment to one of those; in other words, an lvalue.</source>
          <target state="translated">&lt;code&gt;/r&lt;/code&gt; オプションを使用しない限り、 &lt;code&gt;=~&lt;/code&gt; 指定する文字列は、スカラー変数、配列要素、ハッシュ要素、またはこれらのいずれかの割り当てでなければなりません。つまり、左辺値。</target>
        </trans-unit>
        <trans-unit id="9ef73743f2ca77d91834c677a3b2a131dd0854b0" translate="yes" xml:space="preserve">
          <source>Unless the above additional feature is enabled, nothing about the backtrace functionality is visible, except for the Perl/XS level.</source>
          <target state="translated">上記の追加機能を有効にしない限り、Perl/XSレベル以外ではバックトレース機能については何も表示されません。</target>
        </trans-unit>
        <trans-unit id="c2c4cb992d99b0b97748811097f97eea4d2ce81b" translate="yes" xml:space="preserve">
          <source>Unless the operator is an assignment (&lt;code&gt;+=&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; , etc.), repeat step (1) in respect of the second operand.</source>
          <target state="translated">演算子が代入（ &lt;code&gt;+=&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; など）でない限り、2番目のオペランドに関してステップ（1）を繰り返します。</target>
        </trans-unit>
        <trans-unit id="2c6634c0ddc3b2fcdacf253fa92fd7c8403abaf0" translate="yes" xml:space="preserve">
          <source>Unless the pattern or string are encoded in UTF-8, only ASCII characters can match positively.</source>
          <target state="translated">パターンや文字列がUTF-8でエンコードされていない限り、ASCII文字のみが正の意味で一致します。</target>
        </trans-unit>
        <trans-unit id="93f6520e33056598a5ce68e86d15794aa942a8a6" translate="yes" xml:space="preserve">
          <source>Unless they are explicitly specified, the default values for the exit status, verbose level, and output stream to use are determined as follows:</source>
          <target state="translated">明示的に指定しない限り、使用する終了ステータス、冗長レベル、出力ストリームのデフォルト値は以下のように決定されます。</target>
        </trans-unit>
        <trans-unit id="28631a8600ab2d0e4799cb9a021cc0306169b6f9" translate="yes" xml:space="preserve">
          <source>Unless you are accessing the CPAN on your filesystem via a file: URL, CPAN.pm needs to keep the source files it downloads somewhere. Please supply a directory where the downloaded files are to be kept.</source>
          <target state="translated">ファイルを介してファイルシステム上のCPANにアクセスしているのでなければ、CPAN.pmはダウンロードしたソースファイルをどこかに保存しておく必要があります。URL経由でファイルシステム上のCPANにアクセスしていない限り、CPAN.pmはダウンロードしたソースファイルをどこかに保存しておく必要があります。ダウンロードしたファイルが保存されるディレクトリを指定してください。</target>
        </trans-unit>
        <trans-unit id="6b861eac07037b268358d427fce8707b48f9500e" translate="yes" xml:space="preserve">
          <source>Unless you are using the &lt;code&gt;fields&lt;/code&gt; pragma, consider this module discouraged in favor of the lighter-weight &lt;code&gt;parent&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; プラグマを使用している場合を除いて、このモジュールは軽量な &lt;code&gt;parent&lt;/code&gt; を優先することをお勧めしません。</target>
        </trans-unit>
        <trans-unit id="84f0f4d743460958895c1346a2bcc4ae32486815" translate="yes" xml:space="preserve">
          <source>Unless you don't like the possibility of there being part of your Perl scripts embedded in a database file, this is nothing to worry about.</source>
          <target state="translated">データベースファイルにPerlスクリプトの一部が埋め込まれている可能性を嫌わない限り、心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="078c8b3d64fda031c2ca3a111adc19b05790c7fb" translate="yes" xml:space="preserve">
          <source>Unless you have a particular reason to use the two-argument form you should use the three-argument form of open() which does not treat any characters in the filename as special.</source>
          <target state="translated">2 引数形式を使う特別な理由がない限り、ファイル名の中のいかなる文字も特別なものとして扱わない open()の 3 引数形式を使うべきです。</target>
        </trans-unit>
        <trans-unit id="bcd145902080112cd3bd3565e1aa0b2eb6698439" translate="yes" xml:space="preserve">
          <source>Unless you have good reasons for using some other format (for example, a format used within your company), the convention is to name your changelog file &lt;code&gt;Changes&lt;/code&gt; , and to follow the simple format described in &lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Changes::Spec&quot;&gt;CPAN::Changes::Spec&lt;/a&gt;.</source>
          <target state="translated">他の形式（たとえば、社内で使用されている形式）を使用する正当な理由がない限り、規則は、 &lt;code&gt;Changes&lt;/code&gt; ログファイルにChangesという名前を付け、&lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Changes::Spec&quot;&gt;CPAN :: Changes :: Specで&lt;/a&gt;説明されている単純な形式に従うことです。</target>
        </trans-unit>
        <trans-unit id="ba7a1f205e8e2686b0c4b6d39cce725cef83741e" translate="yes" xml:space="preserve">
          <source>Unless you know better, serializing hook should always say:</source>
          <target state="translated">よほどのことがない限り、シリアライズフックは常に言うべきです。</target>
        </trans-unit>
        <trans-unit id="4f5f76f31b82833340ef52081bb4d0e79eab2cc2" translate="yes" xml:space="preserve">
          <source>Unless you know with 100% certainty that quux() is only ever available for the &quot;Foonix&quot; operating system &lt;b&gt;and&lt;/b&gt; that is available &lt;b&gt;and&lt;/b&gt; correctly working for &lt;b&gt;all&lt;/b&gt; past, present, &lt;b&gt;and&lt;/b&gt; future versions of &quot;Foonix&quot;, the above is very wrong. This is more correct (though still not perfect, because the below is a compile-time check):</source>
          <target state="translated">あなたは100％とquux（）が「Foonix」オペレーティングシステムのためにしか利用可能であることを確実に知っている限り&lt;b&gt;と&lt;/b&gt;それが利用可能である&lt;b&gt;と&lt;/b&gt;正しくのために働く&lt;b&gt;すべての&lt;/b&gt;過去、現在、&lt;b&gt;そして&lt;/b&gt;「Foonix」の将来のバージョンでは、上記の非常に間違っています。これはより正確です（ただし、以下はコンパイル時のチェックであるため、まだ完全ではありません）。</target>
        </trans-unit>
        <trans-unit id="93ff79231a3d36c0c3d8ce3114e701a1baebbf25" translate="yes" xml:space="preserve">
          <source>Unless you set this attribute to a false value, Pod::Search will recurse into subdirectories of the search directories.</source>
          <target state="translated">この属性をfalseに設定しない限り、Pod::Searchは検索ディレクトリのサブディレクトリに再帰します。</target>
        </trans-unit>
        <trans-unit id="17c62f898b45d3be500e6c39bec8d493a60a2715" translate="yes" xml:space="preserve">
          <source>Unless you set this attribute to a true value, Pod::Search will apply Perl-specific heuristics to find the correct module PODs quickly. This attribute's default value is false. You won't normally need to set this to true.</source>
          <target state="translated">この属性を真の値に設定しない限り、Pod::SearchはPerl固有のヒューリスティックを適用して、正しいモジュールのPODを素早く見つけます。この属性のデフォルト値はfalseです。通常はこれをtrueに設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="9f9a16887abf4c916f1550cac344cc208f6c0b6b" translate="yes" xml:space="preserve">
          <source>Unless you set this attribute to a true value, Pod::Simple::Search will consider only the first file of a given modulename as it looks thru the specified directories; that is, with this option off, if Pod::Simple::Search has seen a &lt;code&gt;somepathdir/Foo/Bar.pm&lt;/code&gt; already in this search, then it won't bother looking at a &lt;code&gt;somelaterpathdir/Foo/Bar.pm&lt;/code&gt; later on in that search, because that file is merely a &quot;shadow&quot;. But if you turn on &lt;code&gt;$self-&amp;gt;shadows(1)&lt;/code&gt; , then these &quot;shadow&quot; files are inspected too, and are noted in the pathname2podname return hash.</source>
          <target state="translated">この属性をtrue値に設定しない限り、Pod :: Simple :: Searchは、指定されたディレクトリを調べて、指定されたモジュール名の最初のファイルのみを考慮します。ポッド::シンプル::検索が見られた場合、それは、このオプションをオフにして、ある &lt;code&gt;somepathdir/Foo/Bar.pm&lt;/code&gt; すでにこの検索では、それは見て気にしないだろう &lt;code&gt;somelaterpathdir/Foo/Bar.pm&lt;/code&gt; 以降で上その検索は、そのファイルが単に「シャドウ」であるためです。ただし、 &lt;code&gt;$self-&amp;gt;shadows(1)&lt;/code&gt; をオンにすると、これらの「シャドウ」ファイルも検査され、pathname2podname戻りハッシュに記録されます。</target>
        </trans-unit>
        <trans-unit id="fa89971032de2d3d226811c31dc2014b63de305b" translate="yes" xml:space="preserve">
          <source>Unless you want to override the defaults, prefer META_MERGE so as to get the advantage of any future defaults.</source>
          <target state="translated">デフォルトを上書きしたい場合を除いて、将来のデフォルトの利点を得るために、META_MERGEを推奨します。</target>
        </trans-unit>
        <trans-unit id="eb83985aa16dab9a13560a8e8f1159fe638efa8b" translate="yes" xml:space="preserve">
          <source>Unless you want to use its advanced features, this is probably all you need to know to use Exporter.</source>
          <target state="translated">その高度な機能を使いたいのでなければ、Exporterを使うために知っておくべきことはこれだけでしょう。</target>
        </trans-unit>
        <trans-unit id="04c205c66e7bc90d55cfb8afb031ef118a5c83da" translate="yes" xml:space="preserve">
          <source>Unless you&amp;rsquo;ve used &lt;code&gt;/a&lt;/code&gt; or &lt;code&gt;/aa&lt;/code&gt; , &lt;code&gt;\d&lt;/code&gt; matches more than ASCII digits only, but Perl&amp;rsquo;s implicit string-to-number conversion does not current recognize these. Here&amp;rsquo;s how to convert such strings manually.</source>
          <target state="translated">あなたが使用していない限り &lt;code&gt;/a&lt;/code&gt; または &lt;code&gt;/aa&lt;/code&gt; 、 &lt;code&gt;\d&lt;/code&gt; マッチよりだけASCII数字よりますが、Perlの暗黙の文字列から数値への変換は、現在では、これらを認識しません。このような文字列を手動で変換する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5d5045afa1f26fa3558f3707783d1ac5db1ca1f3" translate="yes" xml:space="preserve">
          <source>Unless you're writing a new &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;, a plugin or subclassing &lt;a href=&quot;../parser&quot;&gt;TAP::Parser&lt;/a&gt;, you probably won't need to use this module directly.</source>
          <target state="translated">新しい&lt;a href=&quot;sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;、プラグイン、または&lt;a href=&quot;../parser&quot;&gt;TAP :: Parserの&lt;/a&gt;サブクラスを作成しているのでない限り、おそらくこのモジュールを直接使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="26769d51e7e8546d072ce687409eedaf6bbd7d27" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#charinfo()&quot;&gt;charinfo()&lt;/a&gt;, this does not include the decomposition type. Use the &lt;code&gt;Decomposition_Type&lt;/code&gt; property to get that.</source>
          <target state="translated">&lt;a href=&quot;#charinfo()&quot;&gt;charinfo（）&lt;/a&gt;とは異なり、これには分解タイプは含まれません。それを取得するには、 &lt;code&gt;Decomposition_Type&lt;/code&gt; プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="0f7823a1b5c73e2c047f503abcdbc0ee1982c031" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;integer&quot;&gt;integer&lt;/a&gt;, this pragma creates integer constants that are only limited in their size by the available memory and CPU time.</source>
          <target state="translated">&lt;a href=&quot;integer&quot;&gt;integer&lt;/a&gt;とは異なり、このプラグマは、使用可能なメモリとCPU時間によってサイズが制限される整数定数を作成します。</target>
        </trans-unit>
        <trans-unit id="ed386882eb03009cdfed1d7cc619e0742b192d68" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function will not &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; a module for you; you need to do that explicitly yourself. See &lt;a href=&quot;../db_file&quot;&gt;DB_File&lt;/a&gt; or the</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 関数はモジュールを &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ないか、モジュールを &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; としません。明示的に自分で行う必要があります。参照&lt;a href=&quot;../db_file&quot;&gt;はDB_File&lt;/a&gt;か</target>
        </trans-unit>
        <trans-unit id="e6074edfe48b345d15827a75a36946caff143c7a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function will not &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; a module for you; you need to do that explicitly yourself. See &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; or the</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 関数はモジュールを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ないか、モジュールを &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; としません。明示的に自分で行う必要があります。参照&lt;a href=&quot;db_file&quot;&gt;はDB_File&lt;/a&gt;か</target>
        </trans-unit>
        <trans-unit id="7f221507f852d26a177998f0fca0127e91483ffd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;functions/for&quot;&gt;for...in&lt;/a&gt;&lt;/code&gt;, Perl's &lt;code&gt;for&lt;/code&gt; (also spelled &lt;code&gt;foreach&lt;/code&gt; ) does not allow the left-hand side to be an arbitrary expression. It must be a variable:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/for&quot;&gt;for...in&lt;/a&gt;&lt;/code&gt; とは異なり、Perlの &lt;code&gt;for&lt;/code&gt; （また、 &lt;code&gt;foreach&lt;/code&gt; のスペルも）では、左側を任意の式にすることはできません。変数でなければなりません：</target>
        </trans-unit>
        <trans-unit id="2d1c847135806754dca42b817cb04eaf19cedf87" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; does not do what you probably mean when you pass it an array as your first argument. The array is given scalar context, and instead of using the 0th element of the array as the format, Perl will use the count of elements in the array as the format, which is almost never useful.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; は、最初の引数として配列を渡したときにおそらく意味することを行いません。配列にはスカラーコンテキストが与えられ、配列の0番目の要素をフォーマットとして使用する代わりに、Perlは配列内のエレメントの数をフォーマットとして使用するため、ほとんど役に立ちません。</target>
        </trans-unit>
        <trans-unit id="89ae4f74127125a7e7d48317841dc79dfceae6a6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; does not do what you probably mean when you pass it an array as your first argument. The array is given scalar context, and instead of using the 0th element of the array as the format, Perl will use the count of elements in the array as the format, which is almost never useful.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; は、最初の引数として配列を渡したときにおそらく意味することを行いません。配列にはスカラーコンテキストが与えられ、配列の0番目の要素をフォーマットとして使用する代わりに、Perlは配列内のエレメントの数をフォーマットとして使用するため、ほとんど役に立ちません。</target>
        </trans-unit>
        <trans-unit id="9885543c31cf8cf0906d34d4b26f89726d373169" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;which&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; , this function is platform independent and will also work on, for example, Win32.</source>
          <target state="translated">&lt;code&gt;which&lt;/code&gt; や &lt;code&gt;type&lt;/code&gt; とは異なり、この関数はプラットフォームに依存せず、Win32などでも機能します。</target>
        </trans-unit>
        <trans-unit id="a93ac07922c6fc8a77d40224ee6574380d8e4055" translate="yes" xml:space="preserve">
          <source>Unlike Win32 build, miniperl will not have</source>
          <target state="translated">Win32のビルドとは異なり、miniperlには</target>
        </trans-unit>
        <trans-unit id="a7c35c87e2cd92f458c69ed20a29518c1fc60ceb" translate="yes" xml:space="preserve">
          <source>Unlike constants in some languages, these cannot be overridden on the command line or via environment variables.</source>
          <target state="translated">いくつかの言語の定数とは異なり、コマンドラインや環境変数でオーバーライドすることはできません。</target>
        </trans-unit>
        <trans-unit id="2e9d61b3ed80ed71e7bbbb9d575bf23b5d77fb98" translate="yes" xml:space="preserve">
          <source>Unlike dbmopen(), the tie() function will not &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; a module for you--you need to do that explicitly yourself.</source>
          <target state="translated">dbmopen（）とは異なり、tie（）関数はモジュールを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; しません。明示的に自分で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="ae7d99bfc8b3205da369ad185c97fc4f2004cc75" translate="yes" xml:space="preserve">
          <source>Unlike dynamic variables created by the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; operator, lexical variables declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; are totally hidden from the outside world, including any called subroutines. This is true if it's the same subroutine called from itself or elsewhere--every call gets its own copy.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 演算子によって作成された動的変数とは異なり、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で宣言されたレキシカル変数は、呼び出されたサブルーチンを含め、外部の世界から完全に隠されます。これは、それ自体または他の場所から呼び出された同じサブルーチンの場合に当てはまります。呼び出しごとに独自のコピーが取得されます。</target>
        </trans-unit>
        <trans-unit id="f1d613b9dfee0f458298b76229e47572b9ad09a4" translate="yes" xml:space="preserve">
          <source>Unlike in C and Pascal, in Perl these are all defined in terms of BLOCKs, not statements. This means that the curly brackets are</source>
          <target state="translated">CやPascalとは異なり、Perlではこれらはすべてステートメントではなくブロックで定義されています。つまり、中括弧は</target>
        </trans-unit>
        <trans-unit id="f21336a91710bef15208089eafb11092016626b2" translate="yes" xml:space="preserve">
          <source>Unlike in C, the scalar assignment operator produces a valid lvalue. Modifying an assignment is equivalent to doing the assignment and then modifying the variable that was assigned to. This is useful for modifying a copy of something, like this:</source>
          <target state="translated">C言語とは異なり、スカラ代入演算子は有効なl値を生成します。代入を変更することは、代入を行い、代入された変数を変更することと同じです。これは何かのコピーを修正するときに便利です。</target>
        </trans-unit>
        <trans-unit id="5f827eec6110de095ec9210c18c9cbffc634099b" translate="yes" xml:space="preserve">
          <source>Unlike in earlier versions of Perl, &lt;code&gt;:raw&lt;/code&gt; is</source>
          <target state="translated">以前のバージョンのPerlとは異なり、 &lt;code&gt;:raw&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="33bdaa80be75964fba31840d455d3822e7d396b4" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;&quot;&quot;&lt;/code&gt; ) can be returned. Since &lt;code&gt;catdir()&lt;/code&gt; on Mac OS always appends a trailing colon to distinguish a directory path from a file path, a single trailing colon will be ignored, i.e. there's no empty directory name after it.</source>
          <target state="translated">セパレーターでディレクトリを分割するだけとは異なり、空のディレクトリ名（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）を返すことができます。以来 &lt;code&gt;catdir()&lt;/code&gt; はMac OS上は、常にファイルパスからディレクトリパスを区別するため、末尾のコロンを追加し、単一末尾のコロンはそれの後には空のディレクトリ名がありませんつまり、無視されます。</target>
        </trans-unit>
        <trans-unit id="54463777f2a5a26bb28578fbecd0a237664559d0" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;''&lt;/code&gt; ) can be returned, because these are significant on some OSes.</source>
          <target state="translated">セパレーターでディレクトリを分割するだけではなく、一部のOSでは重要なので、空のディレクトリ名（ &lt;code&gt;''&lt;/code&gt; ）が返されることがあります。</target>
        </trans-unit>
        <trans-unit id="86f74613bf49290364595249fc093a5b0e46c0b1" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;''&lt;/code&gt; ) can be returned, because these are significant on some OSs.</source>
          <target state="translated">セパレーターでディレクトリを分割するだけとは異なり、空のディレクトリ名（ &lt;code&gt;''&lt;/code&gt; ）が返される場合があります。これは、これらのOSが一部のOSで重要であるためです。</target>
        </trans-unit>
        <trans-unit id="f0601a2027041706b4a215c5ba97b0f2d038f55f" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, leading empty and trailing directory entries can be returned, because these are significant on some OSs. So,</source>
          <target state="translated">ただ単にディレクトリをセパレータ上で分割するのとは異なり、先頭の空のディレクトリエントリと末尾のディレクトリエントリを返すことができますが、これはOSによってはこれらが重要なためです。というのも、これらはOSによっては重要なものだからです。</target>
        </trans-unit>
        <trans-unit id="7934f43f05e561c630f325debe8a290638569198" translate="yes" xml:space="preserve">
          <source>Unlike local variables in C or C++, Perl's lexical variables don't necessarily get recycled just because their scope has exited. If something more permanent is still aware of the lexical, it will stick around. So long as something else references a lexical, that lexical won't be freed--which is as it should be. You wouldn't want memory being free until you were done using it, or kept around once you were done. Automatic garbage collection takes care of this for you.</source>
          <target state="translated">C や C++のローカル変数とは異なり、Perl の字句変数はスコープが終了したからといって必ずしもリサイクルされるわけではありません。より永続的な何かがまだその語彙を認識している場合、その語彙はその周りに留まります。何か他のものが字句を参照している限り、その字句は解放されません。あなたはメモリを使い終わるまでメモリが解放されることを望んでいないでしょうし、使い終わった後もメモリが残っていることを望んでいないでしょう。自動ガベージコレクションがこの問題を解決してくれます。</target>
        </trans-unit>
        <trans-unit id="61c2bf5d9fb9c4e4b449918bf685b7cd4c575760" translate="yes" xml:space="preserve">
          <source>Unlike many other languages which support object orientation, Perl does not provide any special syntax for constructing an object. Objects are merely Perl data structures (hashes, arrays, scalars, filehandles, etc.) that have been explicitly associated with a particular class.</source>
          <target state="translated">オブジェクト指向をサポートする他の多くの言語とは異なり、Perl はオブジェクトを構築するための特別な構文を提供しません。オブジェクトとは、特定のクラスに明示的に関連付けられた Perl のデータ構造 (ハッシュ、配列、スカラ、ファイルハンドルなど)に過ぎません。</target>
        </trans-unit>
        <trans-unit id="96a17407e83fd96732a811a270065f8bf99b9560" translate="yes" xml:space="preserve">
          <source>Unlike most encodings which accept various ways to handle errors, Unicode encodings simply croaks.</source>
          <target state="translated">エラーを処理するための様々な方法を受け入れるほとんどのエンコーディングとは異なり、Unicodeエンコーディングは単にうなり声を上げます。</target>
        </trans-unit>
        <trans-unit id="49b673e0d13d9cc508ff95ef6bf45edac94a0386" translate="yes" xml:space="preserve">
          <source>Unlike most locales, which are specific to a language and country pair, Unicode classifies all the characters that are letters</source>
          <target state="translated">言語と国のペアに固有のほとんどのロケールとは異なり、ユニコードは文字であるすべての文字を分類します。</target>
        </trans-unit>
        <trans-unit id="de28345f4c14a0c66a5513ec93329ba001d9ced5" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;dump&quot;&gt;dump&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されるため、 &lt;code&gt;&lt;a href=&quot;dump&quot;&gt;dump&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="c0d9558dea8e06eb18c291c6122258af13477176" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されるため、 &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="9b35f8dffb5619dd71375e3734d385be7cc68976" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="642dec0f5e46307ce9e97ef7e93a9392f0b1f7ab" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; への引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="8e8af66683db3fc2cddaa8cdf32b4f53ebab4445" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="5bec2254ea41ddda3ef06eefb12b88f8ff1170ba" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="46f28e7c4c55184f01ee0fc59018a927acd8437c" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; への引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="fe0bcbfb6300fcbe2507c49b4631d20697de525c" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="3ee3973cea98d2564d41622c65ad1eadc9b20495" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは関数のように見えるルールからも免除されるため、 &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="fd9949db65a27c0400a1254746b3e91b925c452b" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは関数のように見えるルールからも免除されるため、 &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="d21a9fd801c4b5ff299a1a5bef8631136555ebd2" translate="yes" xml:space="preserve">
          <source>Unlike most operators, the smartmatch operator knows to treat &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; specially:</source>
          <target state="translated">ほとんどの演算子とは異なり、smartmatch演算子は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を特別に処理することを知っています。</target>
        </trans-unit>
        <trans-unit id="c52ae364f54ddc8596b506c3503500a0182fc785" translate="yes" xml:space="preserve">
          <source>Unlike most other encodings, the following always croaks on error for any $chk that evaluates to true.</source>
          <target state="translated">他のほとんどのエンコーディングとは異なり、以下のように、真と評価される $chk の場合は常にエラーで鳴きます。</target>
        </trans-unit>
        <trans-unit id="a0be45e558750e70d5ad5d40843ef88fbc85d85e" translate="yes" xml:space="preserve">
          <source>Unlike non-user-defined &lt;code&gt;\p{}&lt;/code&gt; property matches, no warning is ever generated if these properties are matched against a non-Unicode code point (see &lt;a href=&quot;#Beyond-Unicode-code-points&quot;&gt;Beyond Unicode code points&lt;/a&gt; below).</source>
          <target state="translated">ユーザー定義以外の &lt;code&gt;\p{}&lt;/code&gt; プロパティの一致とは異なり、これらのプロパティが非Unicodeコードポイントと一致しても警告は生成されません（以下の&lt;a href=&quot;#Beyond-Unicode-code-points&quot;&gt;Unicodeコードポイントを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="54d85676113e32968ab38ead192e565266d17ce6" translate="yes" xml:space="preserve">
          <source>Unlike other DJGPP packages, which are normal &quot;zip&quot; files, most CPAN module packages are &quot;gzipped tarballs&quot;. Recent versions of WinZip will safely unpack and expand them, *UNLESS* they have zero-length files. It is a known WinZip bug (as of v7.0) that it will not extract zero-length files.</source>
          <target state="translated">他のDJGPPパッケージは通常の &quot;zip &quot;ファイルですが、CPANモジュールパッケージのほとんどは &quot;gzで圧縮されたtarballs &quot;です。最近の WinZip のバージョンでは、安全に解凍して展開することができます。(v7.0 の時点で)WinZip が長さゼロのファイルを展開しないという既知のバグがあります。</target>
        </trans-unit>
        <trans-unit id="83864ffb2b433053a7d93f1893b27cbe33018e20" translate="yes" xml:space="preserve">
          <source>Unlike other encodings where mappings are not one-to-one against Unicode, UTFs are supposed to map 100% against one another. So Encode is more strict on UTFs.</source>
          <target state="translated">マッピングが Unicode に対して一対一ではない他のエンコーディングとは異なり、UTF は互いに 100% マッピングすることになっています。そのため、EncodeはUTFに対してより厳格になっています。</target>
        </trans-unit>
        <trans-unit id="9944da74f109a50432581cc20ef1a61578ffdb1c" translate="yes" xml:space="preserve">
          <source>Unlike other types of quote-like literals, a here document is rarely a contiguous substring. For example, a typical piece of code using here document might look like this:</source>
          <target state="translated">他のタイプの引用符のようなリテラルとは異なり、 here 文書は連続した部分文字列であることはほとんどありません。例えば、here 文書を使った典型的なコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="82bfb2284168959f095690d2be25e5ae6b5a6d2d" translate="yes" xml:space="preserve">
          <source>Unlike pragmas that affect the &lt;code&gt;$^H&lt;/code&gt; hints variable, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; declarations are not BLOCK-scoped. They are thus effective for the entire file in which they appear. You may not rescind such declarations with &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; vars&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$^H&lt;/code&gt; ヒント変数に影響を与えるプラグマとは異なり、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; 宣言はBLOCKスコープではありません。したがって、これらは出現するファイル全体に対して有効です。あなたはこのような宣言を撤回しないことがあり &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; vars&lt;/code&gt; もしくは &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="946dc8e2b9e4dbb1e056eab35da113b4edec1e74" translate="yes" xml:space="preserve">
          <source>Unlike pragmas that affect the &lt;code&gt;$^H&lt;/code&gt; hints variable, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; declarations are not BLOCK-scoped. They are thus effective for the entire package in which they appear. You may not rescind such declarations with &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; vars&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$^H&lt;/code&gt; ヒント変数に影響を与えるプラグマとは異なり、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; 宣言はBLOCKスコープではありません。したがって、それらは出現するパッケージ全体に効果的です。あなたはこのような宣言を撤回しないことがあり &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; vars&lt;/code&gt; もしくは &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a62fc8b32926f79e07e4cd739d192b4db682422d" translate="yes" xml:space="preserve">
          <source>Unlike previous examples, we've now run h2xs on a real include file. This has caused some extra goodies to appear in both the .pm and .xs files.</source>
          <target state="translated">これまでの例とは異なり、実際のインクルードファイル上で h2xs を実行するようになりました。これにより、.pm と .xs の両方のファイルの中にいくつかの特別なものが現れました。</target>
        </trans-unit>
        <trans-unit id="82613342b350d8ac2d5e700389b419d73a2e8511" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;Newx&lt;/code&gt; and &lt;code&gt;Newxc&lt;/code&gt; macros, the &lt;code&gt;Newxz&lt;/code&gt; macro calls &lt;code&gt;memzero&lt;/code&gt; to zero out all the newly allocated memory.</source>
          <target state="translated">異なり &lt;code&gt;Newx&lt;/code&gt; と &lt;code&gt;Newxc&lt;/code&gt; マクロ、 &lt;code&gt;Newxz&lt;/code&gt; マクロ呼び出しは &lt;code&gt;memzero&lt;/code&gt; すべて新しく割り当てられたメモリをゼロにします。</target>
        </trans-unit>
        <trans-unit id="3459d8de61947e832dd8d6cc93a45a157f32fe5d" translate="yes" xml:space="preserve">
          <source>Unlike the GNU programs,</source>
          <target state="translated">GNUプログラムとは異なります。</target>
        </trans-unit>
        <trans-unit id="675122bbd6fe9d02ab821cef4f122f1e2fdb7554" translate="yes" xml:space="preserve">
          <source>Unlike the L</source>
          <target state="translated">Lと違って</target>
        </trans-unit>
        <trans-unit id="00946f20f0f39de3fde945a1c4762c9a2eb54a4d" translate="yes" xml:space="preserve">
          <source>Unlike the old Unix fmt(1) utility, this module correctly accounts for any Unicode combining characters (such as diacriticals) that may occur in each line for both expansion and unexpansion. These are overstrike characters that do not increment the logical position. Make sure you have the appropriate Unicode settings enabled.</source>
          <target state="translated">古い Unix の fmt(1)ユーティリティとは異なり、このモジュールは、展開と非展開の両方で各行で発生する可能性のある Unicode 結合文字 (ダイアクリティカルのような)を正しく考慮しています。これらは論理位置をインクリメントしないオーバーストライク文字です。適切な Unicode 設定が有効になっていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="0625a7948b2143bf8fa5b94abdec3d975bedca11" translate="yes" xml:space="preserve">
          <source>Unlike the old unix utilities, this module correctly accounts for any Unicode combining characters (such as diacriticals) that may occur in each line for both expansion and unexpansion. These are overstrike characters that do not increment the logical position. Make sure you have the appropriate Unicode settings enabled.</source>
          <target state="translated">古い unix ユーティリティとは異なり、このモジュールは、拡張と非拡張の両方で各行で発生する可能性のある Unicode 結合文字 (ダイアクリティカルなど)を正しく考慮しています。これらは論理位置をインクリメントしないオーバーストライク文字です。適切な Unicode 設定が有効になっていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="bbee11f3129dceedbb755c4927925d533e72e81f" translate="yes" xml:space="preserve">
          <source>Unlike the original coding of this example, the returned values are not accessed in reverse order. So &lt;code&gt;ST(0)&lt;/code&gt; refers to the first value returned by the Perl subroutine and &lt;code&gt;ST(count-1)&lt;/code&gt; refers to the last.</source>
          <target state="translated">この例の元のコーディングとは異なり、戻り値には逆の順序でアクセスされません。したがって、 &lt;code&gt;ST(0)&lt;/code&gt; はPerlサブルーチンによって返された最初の値を参照し、 &lt;code&gt;ST(count-1)&lt;/code&gt; は最後の値を参照します。</target>
        </trans-unit>
        <trans-unit id="54921bfadbbc4d5488355e38753c36b606db5127" translate="yes" xml:space="preserve">
          <source>Unlike with &lt;a href=&quot;#croak&quot;&gt;croak&lt;/a&gt;, &lt;code&gt;pat&lt;/code&gt; is not permitted to be null.</source>
          <target state="translated">&lt;a href=&quot;#croak&quot;&gt;croak&lt;/a&gt;とは異なり、 &lt;code&gt;pat&lt;/code&gt; を nullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="8a7070baa0bba9b5c3411b37157873dd12da55ea" translate="yes" xml:space="preserve">
          <source>Unlike with &lt;a href=&quot;#vcroak&quot;&gt;vcroak&lt;/a&gt;, &lt;code&gt;pat&lt;/code&gt; is not permitted to be null.</source>
          <target state="translated">&lt;a href=&quot;#vcroak&quot;&gt;vcroak&lt;/a&gt;とは異なり、 &lt;code&gt;pat&lt;/code&gt; を nullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="e5cefcdd918640639ca1153770063f61e285104d" translate="yes" xml:space="preserve">
          <source>Unlink any temporary files you create.</source>
          <target state="translated">作成した一時ファイルのリンクを解除します。</target>
        </trans-unit>
        <trans-unit id="7f2c338fa9bfcccaac25268ab0ef12e64490b19e" translate="yes" xml:space="preserve">
          <source>Unlock and close the database.</source>
          <target state="translated">データベースのロックを解除して閉じます。</target>
        </trans-unit>
        <trans-unit id="3a1b8bde43d6985240bfa75345e6d99d943394fd" translate="yes" xml:space="preserve">
          <source>Unpack the result with</source>
          <target state="translated">で結果を解凍します。</target>
        </trans-unit>
        <trans-unit id="add77c91d022a17024fa5eba373c6e719da883a1" translate="yes" xml:space="preserve">
          <source>Unpack the result with &lt;code&gt;tar -xof yourmodule.tar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tar -xof yourmodule.tar&lt;/code&gt; で結果を解凍します</target>
        </trans-unit>
        <trans-unit id="ae62392d2b4bc10cbedb53bdaea138dd0c54922e" translate="yes" xml:space="preserve">
          <source>Unpack the source package</source>
          <target state="translated">ソースパッケージの解凍</target>
        </trans-unit>
        <trans-unit id="3ba56861ba0d7e4bf096f38cb19b9bd9d11ad9ab" translate="yes" xml:space="preserve">
          <source>Unpacking CPAN Modules on DOS</source>
          <target state="translated">DOSでのCPANモジュールの解凍</target>
        </trans-unit>
        <trans-unit id="a3e58138dfa89b35eb5a0a67e0ceb78fe71fb3cd" translate="yes" xml:space="preserve">
          <source>Unpacking Perl Distribution on BS2000</source>
          <target state="translated">BS2000でのPerlディストリビューションの解凍</target>
        </trans-unit>
        <trans-unit id="1906a11a734d044847362b51bdd5c4ffec722822" translate="yes" xml:space="preserve">
          <source>Unpacking Perl distribution on OS/390</source>
          <target state="translated">OS/390でのPerlディストリビューションの解凍</target>
        </trans-unit>
        <trans-unit id="1bfe6e7e13df7f1f795bc2c142ba9f8933ba83d0" translate="yes" xml:space="preserve">
          <source>Unpacking a Stack Frame</source>
          <target state="translated">スタックフレームの開梱</target>
        </trans-unit>
        <trans-unit id="13585670fad4d52485b4ecff204569086b8b8bc7" translate="yes" xml:space="preserve">
          <source>Unpacking this message can be done with the same template:</source>
          <target state="translated">このメッセージの解凍は、同じテンプレートで行うことができます。</target>
        </trans-unit>
        <trans-unit id="65ab97485c132c2a06d23b7d99106c078eeca52f" translate="yes" xml:space="preserve">
          <source>Unpacking using the &lt;code&gt;U&lt;/code&gt; template code also works on UTF-8 encoded byte strings.</source>
          <target state="translated">&lt;code&gt;U&lt;/code&gt; テンプレートコードを使用した解凍は、UTF-8でエンコードされたバイト文字列でも機能します。</target>
        </trans-unit>
        <trans-unit id="f5c52c7fb5fb7350d05f5400b468c41971c6a2ea" translate="yes" xml:space="preserve">
          <source>Unsets the IV status of an SV.</source>
          <target state="translated">SV の IV 状態を解除します。</target>
        </trans-unit>
        <trans-unit id="4b35d98112909417a16d4e204369414a7012a63c" translate="yes" xml:space="preserve">
          <source>Unsets the NV status of an SV.</source>
          <target state="translated">SV の NV ステータスを解除します。</target>
        </trans-unit>
        <trans-unit id="8c346401fde7bad98f35f3a033aefb050144d4e1" translate="yes" xml:space="preserve">
          <source>Unsets the NV/IV status of an SV.</source>
          <target state="translated">SV の NV/IV 状態を解除します。</target>
        </trans-unit>
        <trans-unit id="b2fe5f61df3d20003f435b822e60a53db4a67fca" translate="yes" xml:space="preserve">
          <source>Unsets the PV status of an SV.</source>
          <target state="translated">SV の PV 状態を解除します。</target>
        </trans-unit>
        <trans-unit id="2b428943db3814d458253435d21b77a7039ff870" translate="yes" xml:space="preserve">
          <source>Unsets the RV status of an SV.</source>
          <target state="translated">SV の RV 状態を解除します。</target>
        </trans-unit>
        <trans-unit id="167340ebdf7672f2c96a0ab5594ee87b55416719" translate="yes" xml:space="preserve">
          <source>Unsets the RV status of the SV, and decrements the reference count of whatever was being referenced by the RV. This can almost be thought of as a reversal of &lt;code&gt;newSVrv&lt;/code&gt; . The &lt;code&gt;cflags&lt;/code&gt; argument can contain &lt;code&gt;SV_IMMEDIATE_UNREF&lt;/code&gt; to force the reference count to be decremented (otherwise the decrementing is conditional on the reference count being different from one or the reference being a readonly SV). See &lt;code&gt;SvROK_off&lt;/code&gt; .</source>
          <target state="translated">SVのRVステータスを設定解除し、RVによって参照されていたものの参照カウントをデクリメントします。これは、ほとんど &lt;code&gt;newSVrv&lt;/code&gt; の反転と考えることができます。 &lt;code&gt;cflags&lt;/code&gt; 引数を含むことができる &lt;code&gt;SV_IMMEDIATE_UNREF&lt;/code&gt; が参照カウントをデクリメントすることを強制する（そうでなければデクリメントは、参照カウントが1から異なっているか、参照が読み取り専用SVことを条件です）。 &lt;code&gt;SvROK_off&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2213e6f5fdeb83ff58d3c894e858b5a7ff9788f0" translate="yes" xml:space="preserve">
          <source>Unsets the RV status of the SV, and decrements the reference count of whatever was being referenced by the RV. This can almost be thought of as a reversal of &lt;code&gt;newSVrv&lt;/code&gt; . This is &lt;code&gt;sv_unref_flags&lt;/code&gt; with the &lt;code&gt;flag&lt;/code&gt; being zero. See &lt;code&gt;SvROK_off&lt;/code&gt; .</source>
          <target state="translated">SVのRVステータスを設定解除し、RVによって参照されていたものの参照カウントをデクリメントします。これは、ほとんど &lt;code&gt;newSVrv&lt;/code&gt; の反転と考えることができます。これは、 &lt;code&gt;flag&lt;/code&gt; がゼロの &lt;code&gt;sv_unref_flags&lt;/code&gt; です。 &lt;code&gt;SvROK_off&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fcfacd26d54ec31883bc064dd4f33047f4f7aa58" translate="yes" xml:space="preserve">
          <source>Unsets the UTF-8 status of an SV (the data is not changed, just the flag). Do not use frivolously.</source>
          <target state="translated">SV の UTF-8 状態を解除します(データは変更されません。軽薄に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="d458cc7af0595ce52fa475113c58f925209c55f3" translate="yes" xml:space="preserve">
          <source>Unsets the script encoding. The layers of &lt;code&gt;STDIN&lt;/code&gt; , &lt;code&gt;STDOUT&lt;/code&gt; are reset to &quot;&lt;code&gt;:raw&lt;/code&gt; &quot; (the default unprocessed raw stream of bytes).</source>
          <target state="translated">スクリプトエンコーディングの設定を解除します。 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; のレイヤーは&quot; &lt;code&gt;:raw&lt;/code&gt; &quot;（デフォルトの未処理の未加工バイトストリーム）にリセットされます。</target>
        </trans-unit>
        <trans-unit id="f3f886677b52de9f164b2193f280f9e0b4fa4087" translate="yes" xml:space="preserve">
          <source>Unshift the given number of &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; values onto the beginning of the array. The array will grow automatically to accommodate the addition. You must then use &lt;code&gt;av_store&lt;/code&gt; to assign values to these new elements.</source>
          <target state="translated">指定された数の &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 値を配列の先頭にシフトします。配列は、追加に対応するために自動的に拡大します。次に、 &lt;code&gt;av_store&lt;/code&gt; を使用して、これらの新しい要素に値を割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="56c8806e91e8b07e1c8c5b623b330c5fc17f1e53" translate="yes" xml:space="preserve">
          <source>Unshifts an SV onto the beginning of the array, creating the array if necessary. A small internal helper function to remove a commonly duplicated idiom.</source>
          <target state="translated">SV を配列の先頭にアンシフトし、必要に応じて配列を作成します。一般的に重複するイディオムを削除するための小さな内部ヘルパー関数。</target>
        </trans-unit>
        <trans-unit id="ee9dd9a34e19860a5fcf0a7ebd745fb02d06f995" translate="yes" xml:space="preserve">
          <source>Unsigned long integers. This is equivalent to T_UV but explicitly casts the return to type &lt;code&gt;unsigned long&lt;/code&gt; . The default typemap for &lt;code&gt;unsigned long&lt;/code&gt; is T_UV.</source>
          <target state="translated">符号なし長整数。これはT_UVと同じですが、戻り値を &lt;code&gt;unsigned long&lt;/code&gt; 型に明示的にキャストします。 &lt;code&gt;unsigned long&lt;/code&gt; のデフォルトのタイプマップはT_UVです。</target>
        </trans-unit>
        <trans-unit id="ef145f774c9c40a970f92057ceb7090d079d49a8" translate="yes" xml:space="preserve">
          <source>Unsigned short integers. This is equivalent to T_UV but explicitly casts the return to type &lt;code&gt;unsigned short&lt;/code&gt; . The default typemap for &lt;code&gt;unsigned short&lt;/code&gt; is T_UV.</source>
          <target state="translated">符号なし短整数。これはT_UVと同じですが、戻り値を &lt;code&gt;unsigned short&lt;/code&gt; 型に明示的にキャストします。 &lt;code&gt;unsigned short&lt;/code&gt; のデフォルトのタイプマップはT_UVです。</target>
        </trans-unit>
        <trans-unit id="e913109aa138d1120ee92917139364ad0e62c982" translate="yes" xml:space="preserve">
          <source>Unstable CPAN modules</source>
          <target state="translated">不安定なCPANモジュール</target>
        </trans-unit>
        <trans-unit id="36af1ae54977c39ffd1ead9641e29d3a83f91f42" translate="yes" xml:space="preserve">
          <source>Untaint an SV. Use &lt;code&gt;SvTAINTED_off&lt;/code&gt; instead.</source>
          <target state="translated">SVをuntaintします。代わりに &lt;code&gt;SvTAINTED_off&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="bf2cbcc095493f902db2ae40c30ea409c9c066e5" translate="yes" xml:space="preserve">
          <source>Untaints an SV. Be</source>
          <target state="translated">SVを穢す。ビー</target>
        </trans-unit>
        <trans-unit id="dd1c8a6c3311799ae1ea8e9badc636ca33ce5f06" translate="yes" xml:space="preserve">
          <source>Until May 1997, this document was maintained by Jeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;. It is now maintained as part of Perl itself by the Perl 5 Porters &amp;lt;perl5-porters@perl.org&amp;gt;.</source>
          <target state="translated">1997年5月まで、このドキュメントはJeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;によって管理されていました。現在、Perl 5 Porters &amp;lt;perl5-porters@perl.org&amp;gt;によってPerl自体の一部として維持されています。</target>
        </trans-unit>
        <trans-unit id="1831403e65413acb20ccb5893a29f9432e4a4a0c" translate="yes" xml:space="preserve">
          <source>Until May 1997, this document was maintained by Jeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;. It is now maintained as part of Perl itself.</source>
          <target state="translated">1997年5月まで、このドキュメントはJeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;によって管理されていました。現在、Perl自体の一部として維持されています。</target>
        </trans-unit>
        <trans-unit id="9377bbae85c5f3f0ba947e70ca82611c37d8697f" translate="yes" xml:space="preserve">
          <source>Until Unicode 6.1, the 4 control characters U+0080, U+0081, U+0084, and U+0099 did not have names nor aliases. To preserve backwards compatibility, any alias you define for these code points will be returned by this function, in preference to the official name.</source>
          <target state="translated">Unicode 6.1 までは、4 つの制御キ ャ ラ ク タ U+0080、U+0081、U+0084、および U+0099 には名前もエイリアスもありませんでした。後方互換性を維持するために、これらのコードポイントに定義したエイリアスは、正式な名前ではなく、この関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="1eb5a9bdac4b575070ceef54e56442cbab9b46a4" translate="yes" xml:space="preserve">
          <source>Until Unicode 7.0, the noncharacters were &quot;&lt;b&gt;forbidden&lt;/b&gt; for use in open interchange of Unicode text data&quot;, so that code that processed those streams could use these code points as sentinels that could be mixed in with character data, and would always be distinguishable from that data. (Emphasis above and in the next paragraph are added in this document.)</source>
          <target state="translated">Unicode 7.0まで、非文字は「Unicodeテキストデータのオープンインターチェンジでの使用が&lt;b&gt;禁止さ&lt;/b&gt;れていました」ので、これらのストリームを処理するコードは、これらのコードポイントを文字データと混合できるセンチネルとして使用でき、常にそれと区別できました。データ。（この文書では、上記および次の段落の強調が追加されています。）</target>
        </trans-unit>
        <trans-unit id="39e4b4459c9bb0a70e21b5f9e46e887914c2d11b" translate="yes" xml:space="preserve">
          <source>Until version 1.72 of this module, the recommended technique for locking &lt;b&gt;DB_File&lt;/b&gt; databases was to flock the filehandle returned from the &quot;fd&quot; function. Unfortunately this technique has been shown to be fundamentally flawed (Kudos to David Harris for tracking this down). Use it at your own peril!</source>
          <target state="translated">このモジュールのバージョン1.72まで、&lt;b&gt;DB_File&lt;/b&gt;データベースをロックするための推奨手法は、「fd」関数から返されたファイルハンドルをフロックすることでした。残念ながら、この手法には根本的な欠陥があることが示されています（これを追跡するためのDavid Harrisへの称賛）。自分の危険でそれを使用してください！</target>
        </trans-unit>
        <trans-unit id="086839a55d5b993fe1e0e2c06b1920a0c4bb718d" translate="yes" xml:space="preserve">
          <source>Until version 1.88 CPAN.pm never trusted the contents of the build_dir directory between sessions. Since 1.88_58 CPAN.pm has a YAML-based mechanism that makes it possible to share the contents of the build_dir/ directory between different sessions with the same version of perl. People who prefer to test things several days before installing will like this feature because it saves a lot of time.</source>
          <target state="translated">バージョン 1.88 までは、CPAN.pm はセッション間で build_dir ディレクトリの内容を信頼することはありませんでした。1.88_58 以降、CPAN.pm には YAML ベースのメカニズムがあり、同じバージョンの perl で異なるセッション間で build_dir/ディレクトリの内容を共有することが可能になりました。インストールする前に何日かテストするのが好きな人は、この機能を気に入るでしょう。</target>
        </trans-unit>
        <trans-unit id="3e8ce03700f57426d42c01b15a7e4b29915f11c3" translate="yes" xml:space="preserve">
          <source>Unused. Left in for compatibility with Perl 5.10.0.</source>
          <target state="translated">未使用。Perl 5.10.0との互換性のために入れたままになっています。</target>
        </trans-unit>
        <trans-unit id="06342bce5c18e1ce2d5790dec4f3e08db46e5f75" translate="yes" xml:space="preserve">
          <source>Unusually, the overloaded implementation of the smart match operator does not get full control of the smart match behaviour. In particular, in the following code:</source>
          <target state="translated">異常に、スマートマッチ演算子のオーバーロードされた実装では、スマートマッチの動作を完全に制御することができません。特に、以下のコードでは</target>
        </trans-unit>
        <trans-unit id="2e6b69fad267beac964f8da92bb1c2cb8cf51e03" translate="yes" xml:space="preserve">
          <source>Unzipping a complete zip file to disk</source>
          <target state="translated">完全なzipファイルをディスクに解凍する</target>
        </trans-unit>
        <trans-unit id="3706919ae59d2c2aad143453aa2569b724a8dcba" translate="yes" xml:space="preserve">
          <source>Up to 3.14_05, the switch &lt;b&gt;-v&lt;/b&gt; was used to produce verbose messages of &lt;b&gt;perldoc&lt;/b&gt; operation, which is now enabled by &lt;b&gt;-D&lt;/b&gt;.</source>
          <target state="translated">3.14_05までは、スイッチ&lt;b&gt;-v&lt;/b&gt;を使用して&lt;b&gt;perldoc&lt;/b&gt;操作の詳細メッセージを生成していましたが、現在&lt;b&gt;-Dで&lt;/b&gt;有効になっています。</target>
        </trans-unit>
        <trans-unit id="b37c83dafbe144687e4e64f7705c9303ba945d98" translate="yes" xml:space="preserve">
          <source>Up until Perl 5.18, the actual rules of what a valid identifier was were a bit fuzzy. However, in general, anything defined here should work on previous versions of Perl, while the opposite -- edge cases that work in previous versions, but aren't defined here -- probably won't work on newer versions. As an important side note, please note that the following only applies to bareword identifiers as found in Perl source code, not identifiers introduced through symbolic references, which have much fewer restrictions. If working under the effect of the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8;&lt;/code&gt; pragma, the following rules apply:</source>
          <target state="translated">Perl 5.18までは、有効な識別子の実際のルールは少しあいまいでした。ただし、一般的に、ここで定義されたものはすべて以前のバージョンのPerlで動作するはずですが、その逆-以前のバージョンでは動作するがここでは定義されていないエッジケース-おそらく新しいバージョンでは動作しません。重要な副次的な注意として、以下はPerlソースコードにあるベアワード識別子にのみ適用され、制限がはるかに少ないシンボリック参照を通じて導入された識別子には適用されないことに注意してください。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8;&lt;/code&gt; の影響下で作業する場合 utf8; プラグマには、次の規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="700db59a01b3167d63908b9389905b718c997451" translate="yes" xml:space="preserve">
          <source>Update the pad compilation state variables on entry to a new block.</source>
          <target state="translated">新しいブロックへのエントリー時にパッドのコンパイル状態変数を更新します。</target>
        </trans-unit>
        <trans-unit id="8d41ca4ae9515e795255242cbd01a15b9d2f782f" translate="yes" xml:space="preserve">
          <source>Update the running test count during testing.</source>
          <target state="translated">テスト中に実行中のテスト回数を更新します。</target>
        </trans-unit>
        <trans-unit id="ee4df1b22166fed22f195ec39ac5348e1ad4b8f4" translate="yes" xml:space="preserve">
          <source>Updated 12 March 2001 to mention //'SYS1.TCPPARMS(TCPDATA)'.</source>
          <target state="translated">2001 年 3 月 12 日の更新で、 //SYS1.TCPPARMS(TCPDATA)に言及するようになりました。</target>
        </trans-unit>
        <trans-unit id="6a623978ea73cf3eae49fa257cd2b3aa518dc7a5" translate="yes" xml:space="preserve">
          <source>Updated 12 November 2000 for the 5.7.1 release of Perl.</source>
          <target state="translated">Perl の 5.7.1 リリース用に 2000 年 11 月 12 日に更新されました。</target>
        </trans-unit>
        <trans-unit id="dd3c1a655a151c3e2de2f2bcc426466b5deb0bf5" translate="yes" xml:space="preserve">
          <source>Updated 15 January 2001 for the 5.7.1 release of Perl.</source>
          <target state="translated">Perl の 5.7.1 リリースのために 2001 年 1 月 15 日に更新されました。</target>
        </trans-unit>
        <trans-unit id="5b24aab6b7b4ffb7848dd5c01694221d0200543c" translate="yes" xml:space="preserve">
          <source>Updated 24 January 2001 to mention dynamic loading.</source>
          <target state="translated">2001年1月24日に更新され、ダイナミックローディングについて言及しました。</target>
        </trans-unit>
        <trans-unit id="555d5c68c249342b429101141b4e668ed9316de1" translate="yes" xml:space="preserve">
          <source>Updated 28 November 2001 for broken URLs.</source>
          <target state="translated">壊れたURLのために2001年11月28日に更新されました。</target>
        </trans-unit>
        <trans-unit id="e62d7626efdd54a1045fbdd7ab753ad6e883c01e" translate="yes" xml:space="preserve">
          <source>Updated by Kirrily &quot;Skud&quot; Robert, &lt;code&gt;skud@cpan.org&lt;/code&gt;</source>
          <target state="translated">Kirrily &quot;Skud&quot; Robert、 &lt;code&gt;skud@cpan.org&lt;/code&gt; cpan.orgにより更新</target>
        </trans-unit>
        <trans-unit id="8d4259d34b695e49901c9de958534f87265a7f80" translate="yes" xml:space="preserve">
          <source>Updated to be autogenerated from comments in the source by Benjamin Stuhl.</source>
          <target state="translated">Benjamin Stuhl氏によるソースのコメントから自動生成されるように更新。</target>
        </trans-unit>
        <trans-unit id="76fadb0208f83533ce563882faa439aa56b4df27" translate="yes" xml:space="preserve">
          <source>Updates for 5.8.0 by Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt;</source>
          <target state="translated">Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt;による5.8.0の更新</target>
        </trans-unit>
        <trans-unit id="1339cf8af116acbabf9923f4b5f205bd8b4522d5" translate="yes" xml:space="preserve">
          <source>Updates the current digest state by appending bits to it. The return value is the updated object itself.</source>
          <target state="translated">現在のダイジェスト状態にビットを追加して更新します。戻り値は更新されたオブジェクトそのものです。</target>
        </trans-unit>
        <trans-unit id="0f2ec1c28ed80b9544a67d730b3a5ce7a7abddfc" translate="yes" xml:space="preserve">
          <source>Updates to dual-life modules should consist of minimal patches to fix crashing bugs or security issues (as above). Any changes made to dual-life modules for which CPAN is canonical should be coordinated with the upstream author.</source>
          <target state="translated">dual-life モジュールのアップデートは、クラッシュするバグやセキュリティ問題を修正する最小限のパッチで構成されるべきです (上記のように)。CPAN が正規化されている dual-life モジュールに加えられた変更は、上流の作者と調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="6308607dfbe53993e815ce31d09f4ea8e48145b7" translate="yes" xml:space="preserve">
          <source>Updating Apple's Perl</source>
          <target state="translated">アップルのPerlのアップデート</target>
        </trans-unit>
        <trans-unit id="e1215f678a578a0f9348858eb8435faef2c2b2a9" translate="yes" xml:space="preserve">
          <source>Updating perldelta</source>
          <target state="translated">ペルデルタの更新</target>
        </trans-unit>
        <trans-unit id="2c9b320c5f351db0fa6eccf0f443242caa105988" translate="yes" xml:space="preserve">
          <source>Upgrade an SV to a more complex form. Generally adds a new body type to the SV, then copies across as much information as possible from the old body. It croaks if the SV is already in a more complex form than requested. You generally want to use the &lt;code&gt;SvUPGRADE&lt;/code&gt; macro wrapper, which checks the type before calling &lt;code&gt;sv_upgrade&lt;/code&gt; , and hence does not croak. See also &lt;code&gt;svtype&lt;/code&gt; .</source>
          <target state="translated">SVをより複雑なフォームにアップグレードします。通常、新しいボディタイプをSVに追加し、古いボディから可能な限り多くの情報をコピーします。SVがすでに要求されたものより複雑な形式である場合、それは鳴きます。あなたは、一般的に使用したい &lt;code&gt;SvUPGRADE&lt;/code&gt; 呼び出す前にチェックタイプマクロラッパーを、 &lt;code&gt;sv_upgrade&lt;/code&gt; を、ひいてはcroakしていません。 &lt;code&gt;svtype&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="bf9f028e2ed4c8dda78241c1ef169c062efd613f" translate="yes" xml:space="preserve">
          <source>Upgrade existing plain connection to SSL. Any arguments necessary for SSL must be given in &lt;code&gt;new&lt;/code&gt; already.</source>
          <target state="translated">既存のプレーン接続をSSLにアップグレードします。SSLに必要な引数は、すでに &lt;code&gt;new&lt;/code&gt; で指定されている必要があります。</target>
        </trans-unit>
        <trans-unit id="2e297ad00204348f72b48d82b1764d98805e45e0" translate="yes" xml:space="preserve">
          <source>Upgrade existing plain connection to SSL. The SSL arguments have to be given in &lt;code&gt;new&lt;/code&gt; already because they are needed for data connections too.</source>
          <target state="translated">既存のプレーン接続をSSLにアップグレードします。SSL引数はデータ接続にも必要であるため、 &lt;code&gt;new&lt;/code&gt; ですでに指定されている必要があります。</target>
        </trans-unit>
        <trans-unit id="1fee598dc67371af303baa6134f7476c80299023" translate="yes" xml:space="preserve">
          <source>Upgrade existing plain connection to SSL. You can use SSL arguments as documented in &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Socket::SSL&quot;&gt;IO::Socket::SSL&lt;/a&gt;, but it will usually use the right arguments already.</source>
          <target state="translated">既存のプレーン接続をSSLにアップグレードします。&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Socket::SSL&quot;&gt;IO :: Socket :: SSL&lt;/a&gt;に記載されているようにSSL引数を使用できますが、通常はすでに正しい引数を使用しています。</target>
        </trans-unit>
        <trans-unit id="bd48bfd47491f661502b2059f5ddd29245e2ae65" translate="yes" xml:space="preserve">
          <source>Upgrade the input stream to handle UTF8.</source>
          <target state="translated">入力ストリームをUTF8を扱うようにアップグレードします。</target>
        </trans-unit>
        <trans-unit id="abc1ecb08d6b6e94555b0616aae01977c29165a2" translate="yes" xml:space="preserve">
          <source>Upon a successful match, if &lt;code&gt;pe1&lt;/code&gt; is non-NULL, it will be set to point to the beginning of the</source>
          <target state="translated">一致が成功したときに、 &lt;code&gt;pe1&lt;/code&gt; がNULL以外の場合は、pe1の先頭を指すように設定されます。</target>
        </trans-unit>
        <trans-unit id="7931625de6bea30c3520a42f1b48c8c7ccb1cf73" translate="yes" xml:space="preserve">
          <source>Upon the call, the &lt;code&gt;mg_obj&lt;/code&gt; field will hold the hash key to be accessed. Upon return, the &lt;code&gt;SV*&lt;/code&gt; value in &lt;code&gt;mg_obj&lt;/code&gt; will be used in place of the original key in the hash access. The integer index value in the first parameter will be the &lt;code&gt;action&lt;/code&gt; value from &lt;code&gt;hv_fetch_common&lt;/code&gt; , or -1 if the call is from &lt;code&gt;hv_delete_common&lt;/code&gt; .</source>
          <target state="translated">呼び出し時に、 &lt;code&gt;mg_obj&lt;/code&gt; フィールドはアクセスされるハッシュキーを保持します。戻ったとき、 &lt;code&gt;mg_obj&lt;/code&gt; の &lt;code&gt;SV*&lt;/code&gt; 値がハッシュアクセスの元のキーの代わりに使用されます。最初のパラメーターの整数インデックス値は、 &lt;code&gt;hv_fetch_common&lt;/code&gt; からの &lt;code&gt;action&lt;/code&gt; 値、または呼び出しが &lt;code&gt;hv_delete_common&lt;/code&gt; からの場合は-1になります。</target>
        </trans-unit>
        <trans-unit id="fa70849156e04d235d49fdb3686f0245d179ad8d" translate="yes" xml:space="preserve">
          <source>Upon tying a new hash to this package, the developer must specify the size of the keys that will be used, the size of the value fields that the keys will index, and the size of the overall table (in terms of key-value pairs, not size in hard memory).</source>
          <target state="translated">新しいハッシュをこのパッケージに結びつける際に、開発者は使用するキーのサイズ、キーがインデックスを作成する値フィールドのサイズ、テーブル全体のサイズ(ハードメモリ上のサイズではなく、キーと値のペアのサイズ)を指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="187b6d106a78abc992df989626da341b4759f5bf" translate="yes" xml:space="preserve">
          <source>Upper/lower case differences in property names and values are irrelevant; thus &lt;code&gt;\p{Upper}&lt;/code&gt; means the same thing as &lt;code&gt;\p{upper}&lt;/code&gt; or even &lt;code&gt;\p{UpPeR}&lt;/code&gt; . Similarly, you can add or subtract underscores anywhere in the middle of a word, so that these are also equivalent to &lt;code&gt;\p{U_p_p_e_r}&lt;/code&gt; . And white space is irrelevant adjacent to non-word characters, such as the braces and the equals or colon separators, so &lt;code&gt;\p{ Upper }&lt;/code&gt; and &lt;code&gt;\p{ Upper_case : Y }&lt;/code&gt; are equivalent to these as well. In fact, white space and even hyphens can usually be added or deleted anywhere. So even &lt;code&gt;\p{ Up-per case = Yes}&lt;/code&gt; is equivalent. All this is called &quot;loose-matching&quot; by Unicode. The few places where stricter matching is used is in the middle of numbers, and in the Perl extension properties that begin or end with an underscore. Stricter matching cares about white space (except adjacent to non-word characters), hyphens, and non-interior underscores.</source>
          <target state="translated">プロパティ名と値の大文字と小文字の違いは関係ありません。したがって、 &lt;code&gt;\p{Upper}&lt;/code&gt; は &lt;code&gt;\p{upper}&lt;/code&gt; または &lt;code&gt;\p{UpPeR}&lt;/code&gt; と同じことを意味します。同様に、アンダースコアを単語の途中のどこにでも追加または削除できるため、これらも &lt;code&gt;\p{U_p_p_e_r}&lt;/code&gt; と同等になります。また、中括弧や等号やコロンの区切り文字など、単語以外の文字に隣接する空白は関係がないため、 &lt;code&gt;\p{ Upper }&lt;/code&gt; および &lt;code&gt;\p{ Upper_case : Y }&lt;/code&gt; もこれらと同等です。実際、空白文字やハイフンでさえ、通常はどこでも追加または削除できます。したがって、 &lt;code&gt;\p{ Up-per case = Yes}&lt;/code&gt; 同等です。これはすべて、Unicodeでは「ルーズマッチング」と呼ばれています。より厳密なマッチングが使用されるいくつかの場所は、数字の真ん中と、アンダースコアで開始または終了するPerl拡張プロパティです。厳密なマッチングでは、空白（単語以外の文字に隣接するものを除く）、ハイフン、および内部以外のアンダースコアが考慮されます。</target>
        </trans-unit>
        <trans-unit id="46cec56f3412b99de640a0bca5cebcfbc4f533b0" translate="yes" xml:space="preserve">
          <source>Urgh. No wonder. There's a big difference between &quot;a null byte&quot;, character zero, and &quot;a space&quot;, character 32. Perl's put something between the date and the description - but unfortunately, we can't see it!</source>
          <target state="translated">うっ。当たり前だ。文字ゼロの &quot;ヌルバイト &quot;と32文字の &quot;スペース &quot;の間には大きな違いがあります。Perl は日付と記述の間に何かを入れていますが、残念ながらそれを見ることはできません。</target>
        </trans-unit>
        <trans-unit id="da969c82ff05cdc8d49e5dc3d47bc17f0b801a39" translate="yes" xml:space="preserve">
          <source>Urgh. Well, it's a bit better, but - well, would you want to maintain that?</source>
          <target state="translated">ううっ。まあ、少しはマシにはなったけど......まあ、このままでいいのかな?</target>
        </trans-unit>
        <trans-unit id="82706ecdf8b404a3d7af76c38e97c34669646ccc" translate="yes" xml:space="preserve">
          <source>Usage Hints for Perl on OS/390</source>
          <target state="translated">OS/390でのPerlの使い方のヒント</target>
        </trans-unit>
        <trans-unit id="96115201cdc9d452c0fc7c1a0ccadddf5148529a" translate="yes" xml:space="preserve">
          <source>Usage Hints for Perl on Windows</source>
          <target state="translated">WindowsでのPerlの使い方のヒント</target>
        </trans-unit>
        <trans-unit id="73e902d9c6da4a824d1ebe10f64b85e576698ee7" translate="yes" xml:space="preserve">
          <source>Usage is</source>
          <target state="translated">使用法は</target>
        </trans-unit>
        <trans-unit id="b4adcf0ec968acb4f04ec349a0b19258b19ca830" translate="yes" xml:space="preserve">
          <source>Usage messages issued as a result of bad command-line syntax should go to &lt;code&gt;STDERR&lt;/code&gt; . However, usage messages issued due to an explicit request to print usage (like specifying &lt;b&gt;-help&lt;/b&gt; on the command line) should go to &lt;code&gt;STDOUT&lt;/code&gt; , just in case the user wants to pipe the output to a pager (such as &lt;b&gt;more(1)&lt;/b&gt;).</source>
          <target state="translated">不正なコマンドライン構文の結果として発行された使用方法メッセージは、 &lt;code&gt;STDERR&lt;/code&gt; に送信されます。ただし、ユーザーが出力をページャー（&lt;b&gt;more（1）など&lt;/b&gt;）にパイプしたい場合に備えて、（コマンドラインで&lt;b&gt;-help&lt;/b&gt;を指定するなど）使用法を印刷する明示的な要求により発行された使用法メッセージは &lt;code&gt;STDOUT&lt;/code&gt; に送信する必要があります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
