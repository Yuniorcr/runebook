<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="99b9fdd9de86d1d00f397b16abef1b9cafbc97c4" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;variable&lt;/b&gt; in a language like C that contains the exact memory location of some other item. Perl handles pointers internally so you don&amp;rsquo;t have to worry about them. Instead, you just use symbolic pointers in the form of &lt;b&gt;keys&lt;/b&gt; and &lt;b&gt;variable&lt;/b&gt; names, or &lt;b&gt;hard references&lt;/b&gt;, which aren&amp;rsquo;t pointers (but act like pointers and do in fact contain pointers).</source>
          <target state="translated">他のアイテムの正確なメモリ位置を含むCなどの言語の&lt;b&gt;変数&lt;/b&gt;。Perlはポインターを内部で処理するので、心配する必要はありません。代わりに、&lt;b&gt;キー&lt;/b&gt;ではないシンボリックポインターと&lt;b&gt;変数&lt;/b&gt;名、またはポインターではない&lt;b&gt;ハード参照&lt;/b&gt;を使用します（ただし、ポインターのように機能し、実際にはポインターが含まれます）。</target>
        </trans-unit>
        <trans-unit id="51c90d619538801ef4598602775b97c77a42912f" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;variable&lt;/b&gt; prefixed with &lt;code&gt;$&lt;/code&gt; that holds a single value.</source>
          <target state="translated">&lt;b&gt;変数&lt;/b&gt;の接頭辞 &lt;code&gt;$&lt;/code&gt; 単一の値を保持します。</target>
        </trans-unit>
        <trans-unit id="a036ff35f0b4159168ba2281ee65e4b238ac5692" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;variable&lt;/b&gt; subject to &lt;b&gt;lexical scoping&lt;/b&gt;, declared by &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;. Often just called a &amp;ldquo;lexical&amp;rdquo;. (The &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; declaration declares a lexically scoped name for a global variable, which is not itself a lexical variable.)</source>
          <target state="translated">&lt;b&gt;変数&lt;/b&gt;の対象と&lt;b&gt;レキシカルスコープ&lt;/b&gt;で宣言され、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 。多くの場合、単に「字句」と呼ばれます。（ &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 宣言はレキシカル変数そのものではないグローバル変数のためにレキシカルスコープの名前を宣言します。）</target>
        </trans-unit>
        <trans-unit id="d364f02d6990848dc623c28306b3b67cfe16a460" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;verbatim paragraph&lt;/b&gt;. The first line of this paragraph must be a literal space or tab, and this paragraph must not be inside a &quot;=begin</source>
          <target state="translated">&lt;b&gt;逐語段落&lt;/b&gt;。この段落の最初の行はリテラルのスペースまたはタブである必要があり、この段落は &quot;= begin</target>
        </trans-unit>
        <trans-unit id="6c2475be186a7213d2a980a851a800269b2e5a86" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;()&lt;/code&gt; group is a sub-TEMPLATE enclosed in parentheses. A group may take a repeat count either as postfix, or for unpack(), also via the &lt;code&gt;/&lt;/code&gt; template character. Within each repetition of a group, positioning with &lt;code&gt;@&lt;/code&gt; starts over at 0. Therefore, the result of</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; グループは、括弧で囲まれたサブテンプレートです。グループは、postfixとして、またはunpack（）の場合にも、 &lt;code&gt;/&lt;/code&gt; テンプレート文字を使用して、繰り返しカウントを取ることができます。グループの各繰り返し内で、 &lt;code&gt;@&lt;/code&gt; による位置付けは0から始まります。したがって、次の結果</target>
        </trans-unit>
        <trans-unit id="a287ce1841efe5bc899e4207e715388b0c45e263" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;*&lt;/code&gt; allows the subroutine to accept a bareword, constant, scalar expression, typeglob, or a reference to a typeglob in that slot. The value will be available to the subroutine either as a simple scalar, or (in the latter two cases) as a reference to the typeglob. If you wish to always convert such arguments to a typeglob reference, use Symbol::qualify_to_ref() as follows:</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; は、サブルーチンが裸の単語、定数、スカラー式、型グロブ、またはそのスロットの型グロブへの参照を受け入れることを可能にします。値は、単純なスカラーとして、または（後者の2つの場合）タイプグロブへの参照として、サブルーチンで使用できます。このような引数を常にtypeglob参照に変換する場合は、次のようにSymbol :: qualify_to_ref（）を使用します。</target>
        </trans-unit>
        <trans-unit id="61da191aeee246a70549905e1a2b4d958c2fd1c9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;*&lt;/code&gt; for the repeat count uses all characters of the input field. For unpack(), nybbles are converted to a string of hexadecimal digits.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 繰り返し回数については、入力フィールドのすべての文字を使用しています。unpack（）の場合、ニブルは16進数の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="815c847c3d1b9e3c91a01ec8d23807326737a6a0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;*&lt;/code&gt; for the repeat count uses all characters of the input field. On unpacking, bits are converted to a string of &lt;code&gt;0&lt;/code&gt; s and &lt;code&gt;1&lt;/code&gt; s.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 繰り返し回数については、入力フィールドのすべての文字を使用しています。解凍すると、ビットは &lt;code&gt;0&lt;/code&gt; 秒と &lt;code&gt;1&lt;/code&gt; 秒の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="89c65ec9d77b183c5b39e5d9c73a8c71422dfc22" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;--&lt;/code&gt; signals the end of options and disables further option processing. Any arguments after the &lt;code&gt;--&lt;/code&gt; are treated as filenames and arguments.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; オプションと無効さらなるオプション処理の終了を通知します。 &lt;code&gt;--&lt;/code&gt; 後の引数は、ファイル名と引数として扱われます。</target>
        </trans-unit>
        <trans-unit id="bde6ae184752daa5e5b6a5c7417008782a0b714a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; failure may result in the following tests failing:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; 失敗は失敗し、次の試験をもたらし得ます。</target>
        </trans-unit>
        <trans-unit id="290859ef4b0199eb4b067a5c07f38a6730cc7301" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; is simply a modifier on an lvalue expression. When you assign to a &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;ized variable, the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; doesn't change whether its list is viewed as a scalar or an array. So</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 単に左辺値発現に対する修飾子です。 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 化された変数に割り当てる場合、 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; は、そのリストがスカラーと配列のどちらとして表示されても変わりません。そう</target>
        </trans-unit>
        <trans-unit id="1ac670f70b9818c1a06875d85552011a54fbdd94" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; modifies its listed variables to be &quot;local&quot; to the enclosing block, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; FILE&lt;/code&gt; --and to</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 修正は、その記載されている変数「ローカル」で囲んでブロックにするため &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; FILE&lt;/code&gt; する-そして</target>
        </trans-unit>
        <trans-unit id="5e64f0ec46a4ae84b19fc32e43ef29768338a5a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; declares the listed variables to be local (lexically) to the enclosing block, file, or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;. If more than one variable is listed, the list must be placed in parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; リストされた変数を囲むブロック、ファイル、またはに（字句）ローカルであることを宣言します &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; を。複数の変数がリストされている場合は、リストを括弧で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="f1479b4bde8f3dbb0c16d564288196fd25f56ff5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; has both a compile-time and a run-time effect. At compile time, the compiler takes notice of it. The principal usefulness of this is to quiet &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'vars'&lt;/code&gt; , but it is also essential for generation of closures as detailed in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;. Actual initialization is delayed until run time, though, so it gets executed at the appropriate time, such as each time through a loop, for example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; コンパイル時と実行時の効果の両方を持っています。コンパイル時に、コンパイラはそれを認識します。これの主な有用性は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'vars'&lt;/code&gt; を静かに&lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;ことですが、&lt;a href=&quot;perlref&quot;&gt;perlrefで&lt;/a&gt;詳しく説明されているように、クロージャーの生成にも不可欠です。ただし、実際の初期化は実行時まで遅延されるため、たとえばループを通過するたびなど、適切なときに実行されます。</target>
        </trans-unit>
        <trans-unit id="31962f6029a8a1eb17179745d335b5ef4fc0067e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; statement may be used to exit a subroutine, optionally specifying the returned value, which will be evaluated in the appropriate context (list, scalar, or void) depending on the context of the subroutine call. If you specify no return value, the subroutine returns an empty list in list context, the undefined value in scalar context, or nothing in void context. If you return one or more aggregates (arrays and hashes), these will be flattened together into one large indistinguishable list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; ステートメントは、必要に応じてサブルーチン呼び出しのコンテキストに応じて適切なコンテキスト（リスト、スカラー、またはvoid）で評価される戻り値を指定して、サブルーチンを終了するために使用することができます。戻り値を指定しない場合、サブルーチンはリストコンテキストでは空のリスト、スカラーコンテキストでは未定義の値、またはvoidコンテキストでは何も返しません。1つまたは複数の集計（配列とハッシュ）を返す場合、これらは1つの大きな区別できないリストにまとめられます。</target>
        </trans-unit>
        <trans-unit id="0e88bf889822c4c5cba2a75e272c3a1e9aeaadd3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; declares the listed variables to be local (lexically) to the enclosing block, file, or &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;. If more than one variable is listed, the list must be placed in parentheses.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; リストされた変数を囲むブロック、ファイル、またはに（字句）ローカルであることを宣言します &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; を。複数の変数がリストされている場合は、リストを括弧で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="4e47480cd5deac560f9564740a3fdd3588ea30d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;=begin&lt;/code&gt; command was found that is not followed by the formatter specification.</source>
          <target state="translated">A &lt;code&gt;=begin&lt;/code&gt; コマンドは、フォーマッタの指定が続いていないことが判明しました。</target>
        </trans-unit>
        <trans-unit id="5a9827f3a3a35194fce6eb84ce82e990f6ef9b53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;=cut&lt;/code&gt; command was found without a preceding POD paragraph.</source>
          <target state="translated">&lt;code&gt;=cut&lt;/code&gt; コマンドは、先行するPOD段落せず見出されました。</target>
        </trans-unit>
        <trans-unit id="4af95277282f9dbbdb980c39fe078720a20bab01" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;=pod&lt;/code&gt; command was found after a preceding POD paragraph.</source>
          <target state="translated">&lt;code&gt;=pod&lt;/code&gt; コマンドは、先行するPODの段落の後に発見されました。</target>
        </trans-unit>
        <trans-unit id="31f4edd1c949bdbda291e425d6bef6044643ffd6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BEGIN&lt;/code&gt; code block is executed as soon as possible, that is, the moment it is completely defined, even before the rest of the containing file (or string) is parsed. You may have multiple &lt;code&gt;BEGIN&lt;/code&gt; blocks within a file (or eval'ed string); they will execute in order of definition. Because a &lt;code&gt;BEGIN&lt;/code&gt; code block executes immediately, it can pull in definitions of subroutines and such from other files in time to be visible to the rest of the compile and run time. Once a &lt;code&gt;BEGIN&lt;/code&gt; has run, it is immediately undefined and any code it used is returned to Perl's memory pool.</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; コードブロックが含まれているファイル（または文字列）の残りの部分が解析される前であっても、それが完全に定義された瞬間である、できるだけ早くとして実行されます。ファイル（または評価された文字列）内に複数の &lt;code&gt;BEGIN&lt;/code&gt; ブロックを含めることができます。それらは定義順に実行されます。 &lt;code&gt;BEGIN&lt;/code&gt; コードブロックはすぐに実行されるため、他のファイルからサブルーチンなどの定義をすぐに取り込み、コンパイルおよびランタイムの残りの部分から見えるようにすることができます。いったん &lt;code&gt;BEGIN&lt;/code&gt; 実行され、それが即座に定義されていない、それが使用されるすべてのコードはPerlのメモリープールに返されます。</target>
        </trans-unit>
        <trans-unit id="3948c72682ed13a39df444bd90a131ad77b87fa0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;File::Fetch&lt;/code&gt; object has the following accessors</source>
          <target state="translated">&lt;code&gt;File::Fetch&lt;/code&gt; オブジェクトには、次のアクセサを持っています</target>
        </trans-unit>
        <trans-unit id="a0df5f12010c9e2a341950853965986995045017" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MAYBE&lt;/code&gt; string should contain at least one combining character or the like. For example, &lt;code&gt;COMBINING ACUTE ACCENT&lt;/code&gt; has the MAYBE_NFC/MAYBE_NFKC property.</source>
          <target state="translated">A &lt;code&gt;MAYBE&lt;/code&gt; 文字列は、少なくとも一つの結合文字などを含める必要があります。たとえば、 &lt;code&gt;COMBINING ACUTE ACCENT&lt;/code&gt; にはMAYBE_NFC / MAYBE_NFKCプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="d9aa930129748b8e7f36983538600e4ef3003dd2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NUL&lt;/code&gt; character will be written after the end of the string.</source>
          <target state="translated">&lt;code&gt;NUL&lt;/code&gt; の文字は、文字列の終了後に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="14e49abd4463a2df704c3d0c251781f20f08e519" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PerlIOl *&lt;/code&gt; is a pointer to the struct, and the</source>
          <target state="translated">A &lt;code&gt;PerlIOl *&lt;/code&gt; は、構造体へのポインタであり、</target>
        </trans-unit>
        <trans-unit id="e73ed792e4d7284609d9e1372b30eccc321faca0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SelectSaver&lt;/code&gt; object contains a reference to the file handle that was selected when it was created. If its &lt;code&gt;new&lt;/code&gt; method gets an extra parameter, then that parameter is selected; otherwise, the selected file handle remains unchanged.</source>
          <target state="translated">&lt;code&gt;SelectSaver&lt;/code&gt; のオブジェクトは、作成時に選択したファイルハンドルへの参照が含まれています。その場合は &lt;code&gt;new&lt;/code&gt; メソッドが追加のパラメータを取得し、そのパラメータが選択されています。それ以外の場合、選択したファイルハンドルは変更されません。</target>
        </trans-unit>
        <trans-unit id="57c30b7d6b5dae1d9e52bc3dfa57d215caf5d862" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;[&lt;/code&gt; is not special inside a character class, unless it's the start of a POSIX character class (see &lt;a href=&quot;#POSIX-Character-Classes&quot;&gt;POSIX Character Classes&lt;/a&gt; below). It normally does not need escaping.</source>
          <target state="translated">A &lt;code&gt;[&lt;/code&gt; それはPOSIX文字クラスのスタートだ場合を除き、文字クラス内の特別なものではありません（参照&lt;a href=&quot;#POSIX-Character-Classes&quot;&gt;POSIX文字クラスを&lt;/a&gt;下回ります）。通常はエスケープする必要はありません。</target>
        </trans-unit>
        <trans-unit id="6776cbbe11f1658efaaee2f3dd38010bf8c93b32" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;\L&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; indicates a lasting conversion of case, until terminated by &lt;code&gt;\E&lt;/code&gt; or thrown over by another &lt;code&gt;\U&lt;/code&gt; or &lt;code&gt;\L&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;\L&lt;/code&gt; または &lt;code&gt;\U&lt;/code&gt; によって終了されるまで、例持続的な変換を示し &lt;code&gt;\E&lt;/code&gt; または別のものの上に投げ &lt;code&gt;\U&lt;/code&gt; や &lt;code&gt;\L&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="eb525767ec147f71507ec3fe5c0bbfd43e23622a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;\w&lt;/code&gt; matches a single alphanumeric character (an alphabetic character, or a decimal digit); or a connecting punctuation character, such as an underscore (&quot;_&quot;); or a &quot;mark&quot; character (like some sort of accent) that attaches to one of those. It does not match a whole word. To match a whole word, use &lt;code&gt;\w+&lt;/code&gt; . This isn't the same thing as matching an English word, but in the ASCII range it is the same as a string of Perl-identifier characters.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 一致する単一の英数字文字（アルファベット文字、または小数の桁）。または、アンダースコア（ &quot;_&quot;）などの句読文字を接続します。または、それらの1つに接続する「マーク」文字（ある種のアクセントのような）。単語全体とは一致しません。単語全体を照合するには、 &lt;code&gt;\w+&lt;/code&gt; 使用します。これは英語の単語を照合することと同じではありませんが、ASCIIの範囲では、Perl識別文字の文字列と同じです。</target>
        </trans-unit>
        <trans-unit id="387f0590ce374c162a12f59ad2a352b45a0b6a2e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;]&lt;/code&gt; is normally either the end of a POSIX character class (see &lt;a href=&quot;#POSIX-Character-Classes&quot;&gt;POSIX Character Classes&lt;/a&gt; below), or it signals the end of the bracketed character class. If you want to include a &lt;code&gt;]&lt;/code&gt; in the set of characters, you must generally escape it.</source>
          <target state="translated">Aは &lt;code&gt;]&lt;/code&gt; 通常POSIX文字クラスの端（参照のいずれかである&lt;a href=&quot;#POSIX-Character-Classes&quot;&gt;POSIX文字クラスを&lt;/a&gt;下に）、またはそれは括弧文字クラスの終了を知らせます。文字セットに &lt;code&gt;]&lt;/code&gt; を含める場合は、通常、エスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="2a086836899301702e84e6ebfd5a64e6e1514ec1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;clean&lt;/code&gt; command results in a</source>
          <target state="translated">&lt;code&gt;clean&lt;/code&gt; Aでのコマンドの結果</target>
        </trans-unit>
        <trans-unit id="f82e2956ae874578dae0b862a6205fc9ad9a10d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;quiet&lt;/code&gt; parameter tells &lt;code&gt;CBuilder&lt;/code&gt; to not print its &lt;code&gt;&lt;a href=&quot;../functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; commands before executing them:</source>
          <target state="translated">&lt;code&gt;quiet&lt;/code&gt; パラメータが伝え &lt;code&gt;CBuilder&lt;/code&gt; をその印刷されないために &lt;code&gt;&lt;a href=&quot;../functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; コマンドを実行する前に：</target>
        </trans-unit>
        <trans-unit id="537fa0e7c3fc8f4f2ff13df46f07e5efa8b0d873" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;regexp_paren_pair&lt;/code&gt; structure which defines offsets into the string being matched which correspond to the &lt;code&gt;$&amp;amp;&lt;/code&gt; and &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; etc. captures, the &lt;code&gt;regexp_paren_pair&lt;/code&gt; struct is defined as follows:</source>
          <target state="translated">&lt;code&gt;regexp_paren_pair&lt;/code&gt; その対応する整合された文字列へのオフセットを定義する構造 &lt;code&gt;$&amp;amp;&lt;/code&gt; と &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; などのキャプチャは、 &lt;code&gt;regexp_paren_pair&lt;/code&gt; を次のように構造体が定義されます。</target>
        </trans-unit>
        <trans-unit id="9187cecc86ed031f1a1d91cbbf85586329ad9482" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;typedef&lt;/code&gt; will be created for &lt;code&gt;struct netconfig&lt;/code&gt; . The Perl object will be blessed in a class matching the name of the C type, with the tag &lt;code&gt;Ptr&lt;/code&gt; appended, and the name should not have embedded spaces if it will be a Perl package name. The destructor will be placed in a class corresponding to the class of the object and the PREFIX keyword will be used to trim the name to the word DESTROY as Perl will expect.</source>
          <target state="translated">&lt;code&gt;typedef&lt;/code&gt; が作成されます &lt;code&gt;struct netconfig&lt;/code&gt; 。 Perlオブジェクトは、Cタイプの名前と一致するクラスで祝福され、タグ &lt;code&gt;Ptr&lt;/code&gt; が追加されます。Perlパッケージ名になる場合、名前にスペースが埋め込まれていてはいけません。デストラクタはオブジェクトのクラスに対応するクラスに配置され、PREFIXキーワードを使用して、Perlが期待するように名前を単語DESTROYにトリミングします。</target>
        </trans-unit>
        <trans-unit id="91a29e0934f06be58e8f45f6ccaf516ef19ec003" translate="yes" xml:space="preserve">
          <source>A B::HV object representing the stash for 'our' variables.</source>
          <target state="translated">私たちの'変数のための隠し場所を表す B::HV オブジェクト。</target>
        </trans-unit>
        <trans-unit id="f45e12c8a06cbfbc829397737665446dbd9373fc" translate="yes" xml:space="preserve">
          <source>A B::HV object representing the stash for a typed lexical.</source>
          <target state="translated">型付き語彙のための隠し場所を表す B::HV オブジェクト。</target>
        </trans-unit>
        <trans-unit id="42fcd5050adf426bbdb7192c3683fb606974ed22" translate="yes" xml:space="preserve">
          <source>A BLOCK by itself (labeled or not) is semantically equivalent to a loop that executes once. Thus you can use any of the loop control statements in it to leave or restart the block. (Note that this is</source>
          <target state="translated">BLOCKは(ラベルが付いているかどうかに関わらず)それ自体は、意味的には一度だけ実行されるループと同じです。したがって、その中のループ制御文のいずれかを使って、ブロックから離れたり、再開したりすることができます。(ただし、これは</target>
        </trans-unit>
        <trans-unit id="0b3fa7a6472c1947a3e3fb9a265bfaa097653d2a" translate="yes" xml:space="preserve">
          <source>A Build.PL is run by perl in a separate process. Likewise we run './Build' and './Build install' in separate processes. If you have any parameters you want to pass to the calls, please specify them here.</source>
          <target state="translated">Build.PLはperlによって別のプロセスで実行されます。同様に、'./Build'と'./Build install'も別々のプロセスで実行しています。呼び出しに渡したいパラメータがあれば、ここで指定してください。</target>
        </trans-unit>
        <trans-unit id="2b8f77588c05a56fb0aa83c01416be422180616b" translate="yes" xml:space="preserve">
          <source>A C expression for the value of the constant, or a list of C expressions if the type is aggregate. This defaults to the</source>
          <target state="translated">定数の値を表すC式、または型が集約型の場合はC式のリスト。これはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="c9bca895b6521acf14049f748fb255c795b1e71c" translate="yes" xml:space="preserve">
          <source>A CASE: might switch via a parameter of the XSUB, via the &lt;code&gt;ix&lt;/code&gt; ALIAS: variable (see &lt;a href=&quot;#The-ALIAS%3a-Keyword&quot;&gt;The ALIAS: Keyword&lt;/a&gt;), or maybe via the &lt;code&gt;items&lt;/code&gt; variable (see &lt;a href=&quot;#Variable-length-Parameter-Lists&quot;&gt;Variable-length Parameter Lists&lt;/a&gt;). The last CASE: becomes the &lt;b&gt;default&lt;/b&gt; case if it is not associated with a conditional. The following example shows CASE switched via &lt;code&gt;ix&lt;/code&gt; with a function &lt;code&gt;rpcb_gettime()&lt;/code&gt; having an alias &lt;code&gt;x_gettime()&lt;/code&gt; . When the function is called as &lt;code&gt;rpcb_gettime()&lt;/code&gt; its parameters are the usual &lt;code&gt;(char *host, time_t *timep)&lt;/code&gt; , but when the function is called as &lt;code&gt;x_gettime()&lt;/code&gt; its parameters are reversed, &lt;code&gt;(time_t *timep, char *host)&lt;/code&gt; .</source>
          <target state="translated">CASE：XSUBのパラメーター、 &lt;code&gt;ix&lt;/code&gt; ALIAS：変数（&lt;a href=&quot;#The-ALIAS%3a-Keyword&quot;&gt;ALIAS：キーワードを&lt;/a&gt;参照）、または &lt;code&gt;items&lt;/code&gt; 変数（&lt;a href=&quot;#Variable-length-Parameter-Lists&quot;&gt;可変長パラメーターリストを&lt;/a&gt;参照）を介して切り替えます。最後のCASE：条件に関連付けられていない場合は、&lt;b&gt;デフォルトの&lt;/b&gt;ケースになり&lt;b&gt;ます&lt;/b&gt;。次の例は、エイリアス &lt;code&gt;x_gettime()&lt;/code&gt; を持つ関数 &lt;code&gt;rpcb_gettime()&lt;/code&gt; で &lt;code&gt;ix&lt;/code&gt; を介して切り替えられたCASEを示しています。関数が &lt;code&gt;rpcb_gettime()&lt;/code&gt; として呼び出される場合、そのパラメーターは通常 &lt;code&gt;(char *host, time_t *timep)&lt;/code&gt; ですが、関数が &lt;code&gt;x_gettime()&lt;/code&gt; として呼び出される場合、パラメーターは逆になります。 &lt;code&gt;(time_t *timep, char *host)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c55f978db59708209a54d8bfb17d98c3ae019b46" translate="yes" xml:space="preserve">
          <source>A CPAN mirror that includes just the latest versions for each distribution, probably created with &lt;code&gt;CPAN::Mini&lt;/code&gt; . See Camel chapter 19, &amp;ldquo;CPAN&amp;rdquo;.</source>
          <target state="translated">おそらく &lt;code&gt;CPAN::Mini&lt;/code&gt; 作成された、各ディストリビューションの最新バージョンのみを含むCPANミラー。ラクダの第19章「CPAN」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d79fea87c96ec94013ff8e4540cf4e641c3aa0b8" translate="yes" xml:space="preserve">
          <source>A Class is Simply a Package</source>
          <target state="translated">クラスは単にパッケージである</target>
        </trans-unit>
        <trans-unit id="59bd5b6c5b1f4d50bad57e4bae0c86bf7e63ff03" translate="yes" xml:space="preserve">
          <source>A Complete Example</source>
          <target state="translated">完全な例</target>
        </trans-unit>
        <trans-unit id="9f22eaf2aa717bb5924e306e9ab40bd24eefc92a" translate="yes" xml:space="preserve">
          <source>A DBM Filter allows the keys and/or values in a tied hash to be modified by some user-defined code just before it is written to the DBM file and just after it is read back from the DBM file. For example, this snippet of code</source>
          <target state="translated">DBMフィルタは、DBMファイルに書き込まれる直前と、DBMファイルから読み出された直後に、ユーザ定義のコードによってタイドハッシュ内のキーや値を変更することができます。例えば、以下のコードのスニペットは、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="a3dd10dc1183e2df3ed7ea791b7d9b7560ba9d95" translate="yes" xml:space="preserve">
          <source>A DBM Filter is a piece of code that is be used when you</source>
          <target state="translated">DBMフィルタは、以下のようなときに使用されるコードの一部です。</target>
        </trans-unit>
        <trans-unit id="74127e4dc0844d9e1d0d37669c77b5e1d7d7dc1c" translate="yes" xml:space="preserve">
          <source>A GV is a structure which corresponds to to a Perl typeglob, ie *foo. It is a structure that holds a pointer to a scalar, an array, a hash etc, corresponding to $foo, @foo, %foo.</source>
          <target state="translated">GVはPerlのタイプローブ、つまり*fooに対応する構造体です。これは、$foo,@foo,%fooに対応するスカラ、配列、ハッシュなどへのポインタを保持する構造体です。</target>
        </trans-unit>
        <trans-unit id="13db893228041bbd750755e5ceeab1edf73eb3b3" translate="yes" xml:space="preserve">
          <source>A Graeco-Roman word meaning &amp;ldquo;to bring oneself to life&amp;rdquo;. In Perl, storage locations (&lt;b&gt;lvalues&lt;/b&gt;) spontaneously generate themselves as needed, including the creation of any &lt;b&gt;hard reference&lt;/b&gt; values to point to the next level of storage. The assignment &lt;code&gt;$a[5][5][5][5][5] = &quot;quintet&quot;&lt;/code&gt; potentially creates five scalar storage locations, plus four references (in the first four scalar locations) pointing to four new anonymous arrays (to hold the last four scalar locations). But the point of autovivification is that you don&amp;rsquo;t have to worry about it.</source>
          <target state="translated">「自分を生き生きとさせる」という意味のグレコローマン語。Perlでは、ストレージロケーション（&lt;b&gt;lvalues&lt;/b&gt;）は、次のレベルのストレージを指す&lt;b&gt;ハード参照&lt;/b&gt;値の作成を含め、必要に応じて自発的に生成されます。割り当て &lt;code&gt;$a[5][5][5][5][5] = &quot;quintet&quot;&lt;/code&gt; は、5つのスカラーストレージロケーションと、4つの新しい匿名配列（保持するため）を指す4つの参照（最初の4つのスカラーロケーション）を作成する可能性があります最後の4つのスカラー位置）。しかし、autovivificationのポイントは、心配する必要がないことです。</target>
        </trans-unit>
        <trans-unit id="644fba68887f0f6c83a3c9ad6b03efeafe64485f" translate="yes" xml:space="preserve">
          <source>A HV structure represents a Perl hash. It consists mainly of an array of pointers, each of which points to a linked list of HE structures. The array is indexed by the hash function of the key, so each linked list represents all the hash entries with the same hash value. Each HE contains a pointer to the actual value, plus a pointer to a HEK structure which holds the key and hash value.</source>
          <target state="translated">HV 構造体は Perl のハッシュを表します。HV構造体は主にポインタの配列で構成されており、それぞれがHE構造体のリンクリストを指しています。配列はキーのハッシュ関数によってインデックス化されており、各リンクされたリストは同じハッシュ値を持つ全てのハッシュエントリを表します。各HEは、実際の値へのポインタと、鍵とハッシュ値を保持するHEK構造体へのポインタを含みます。</target>
        </trans-unit>
        <trans-unit id="01232ff6c4ca9ea380827b743047b1207b0966c9" translate="yes" xml:space="preserve">
          <source>A Method is Simply a Subroutine</source>
          <target state="translated">メソッドは単なるサブルーチン</target>
        </trans-unit>
        <trans-unit id="4fc1e89e0ebaf9800ac39a369b83b7a80fc77ec4" translate="yes" xml:space="preserve">
          <source>A Note about the Examples</source>
          <target state="translated">事例についての注意点</target>
        </trans-unit>
        <trans-unit id="0d72d9979807c702328842043bb2529c640d1c5d" translate="yes" xml:space="preserve">
          <source>A Notify parameter of 'DELAY' &quot;indicates the sender's willingness to receive delayed DSNs. Delayed DSNs may be issued if delivery of a message has been delayed for an unusual amount of time (as determined by the Message Transfer Agent (MTA) at which the message is delayed), but the final delivery status (whether successful or failure) cannot be determined. The absence of the DELAY keyword in a NOTIFY parameter requests that a &quot;delayed&quot; DSN NOT be issued under any conditions.&quot;</source>
          <target state="translated">Notifyパラメータの「DELAY」は、遅延したDSNの受信を望む送信者の意思を示す。遅延したDSNは、メッセージの配送が(メッセージを遅延させたメッセージ転送エージェント(MTA)に よって決定された)異常な時間遅延したが、最終的な配送ステータス(成功か失敗か)が 決定できない場合に発行されるかもしれない。NOTIFYパラメータにDELAYキーワードがない場合、「遅延した」DSNがいかなる条件でも発行されないこと を要求する。</target>
        </trans-unit>
        <trans-unit id="9dbcef065eab9753a6c0d2e89dd406c9f007951b" translate="yes" xml:space="preserve">
          <source>A Notify parameter of 'SUCCESS' or 'FAILURE' &quot;requests that a DSN be issued on successful delivery or delivery failure, respectively.&quot;</source>
          <target state="translated">SUCCESS &quot;または &quot;FAILURE &quot;のNotifyパラメータは、&quot;配送が成功した場合にDSNを発行することを要求し、配送が失敗した場合にDSNを発行することを要求します。</target>
        </trans-unit>
        <trans-unit id="c3f40c0f83e1e526b0b0b6c66a8b36e802555138" translate="yes" xml:space="preserve">
          <source>A Perl extension to the POSIX character class is the ability to negate it. This is done by prefixing the class name with a caret (&lt;code&gt;^&lt;/code&gt;). Some examples:</source>
          <target state="translated">POSIX文字クラスのPerl拡張は、それを無効にする機能です。これを行うには、クラス名の前にキャレット（ &lt;code&gt;^&lt;/code&gt; ）を付けます。いくつかの例：</target>
        </trans-unit>
        <trans-unit id="0d2d7129fe49ff692643bf989abc3c8db9550c7a" translate="yes" xml:space="preserve">
          <source>A Perl floating point number. Similar to T_IV and T_UV in that the return type is cast to the requested numeric type rather than to a specific type.</source>
          <target state="translated">Perl の浮動小数点数。戻り値の型が特定の型ではなく、要求された数値型にキャストされる点で T_IV や T_UV に似ています。</target>
        </trans-unit>
        <trans-unit id="baf019a8a8ab4371dcf7bafbfc9ccbe01c8c24c2" translate="yes" xml:space="preserve">
          <source>A Perl module that also pulls in &lt;b&gt;compiled&lt;/b&gt; C or C++ code. More generally, any experimental option that can be &lt;b&gt;compiled&lt;/b&gt; into Perl, such as multithreading.</source>
          <target state="translated">&lt;b&gt;コンパイルされた&lt;/b&gt; CまたはC ++コードも取り込むPerlモジュール。より一般的には、マルチスレッドなど、Perlに&lt;b&gt;コンパイル&lt;/b&gt;できる実験的なオプション。</target>
        </trans-unit>
        <trans-unit id="d50862820d3a8aab33b93133b7d33cb935834ef5" translate="yes" xml:space="preserve">
          <source>A Perl pattern that allows the disambiguation of long and short prefixes. Default is &lt;code&gt;--&lt;/code&gt; .</source>
          <target state="translated">長い接頭辞と短い接頭辞の明確化を可能にするPerlパターン。デフォルトは &lt;code&gt;--&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2e904ead9b94d6204fd6b39a939871c992e738f5" translate="yes" xml:space="preserve">
          <source>A Perl pattern that identifies the strings that introduce options. Default is &lt;code&gt;--|-|\+&lt;/code&gt; unless environment variable POSIXLY_CORRECT has been set, in which case it is &lt;code&gt;--|-&lt;/code&gt;.</source>
          <target state="translated">オプションを導入する文字列を識別するPerlパターン。環境変数POSIXLY_CORRECTが設定されていない限り、デフォルトは &lt;code&gt;--|-|\+&lt;/code&gt; で、その場合は &lt;code&gt;--|-&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="45c72c917209e7e654e9e53f35f4bca27fd858cf" translate="yes" xml:space="preserve">
          <source>A Perl program consists of a sequence of declarations and statements which run from the top to the bottom. Loops, subroutines, and other control structures allow you to jump around within the code.</source>
          <target state="translated">Perl プログラムは、上から下に向かって実行される一連の宣言とステートメントで構成されています。ループ、サブルーチン、その他の制御構造により、コード内を飛び回ることができます。</target>
        </trans-unit>
        <trans-unit id="8f1d991ccec8e09953b3e8579dace5ef70ea0563" translate="yes" xml:space="preserve">
          <source>A Perl program executes only once, not once for each input line. You can do an implicit loop with &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt; .</source>
          <target state="translated">Perlプログラムは、各入力行に対して1回ではなく、1回だけ実行されます。 &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;-p&lt;/code&gt; を使用して暗黙的なループを実行できます。</target>
        </trans-unit>
        <trans-unit id="b05351cbee8badd4677882f72f83a69a3c04e972" translate="yes" xml:space="preserve">
          <source>A Perl program to do these tasks takes the basic form of opening a file, printing its lines, then closing the file:</source>
          <target state="translated">これらの作業を行うPerlプログラムは、ファイルを開き、その行を印刷し、ファイルを閉じるという基本的な形をとっています。</target>
        </trans-unit>
        <trans-unit id="9f85dbe5a418fb4bcdecb47b2f0b2cac2a377668" translate="yes" xml:space="preserve">
          <source>A Perl script or program consists of one or more statements. These statements are simply written in the script in a straightforward fashion. There is no need to have a &lt;code&gt;main()&lt;/code&gt; function or anything of that kind.</source>
          <target state="translated">Perlスクリプトまたはプログラムは、1つ以上のステートメントで構成されます。これらのステートメントは、単純な方法でスクリプトに記述されているだけです。 &lt;code&gt;main()&lt;/code&gt; 関数やそのようなものを用意する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ab689318c03ebde720ae51176a11effea3a569dc" translate="yes" xml:space="preserve">
          <source>A Perl user group, taking the form of its name from the New York Perl mongers, the first Perl user group. Find one near you at &lt;a href=&quot;http://www.pm.org&quot;&gt;http://www.pm.org&lt;/a&gt;.</source>
          <target state="translated">最初のPerlユーザーグループであるニューヨークのPerlモンガーからその名前の形式を取ったPerlユーザーグループ。&lt;a href=&quot;http://www.pm.org&quot;&gt;http://www.pm.orgで&lt;/a&gt;お近くのサイトを見つけてください。</target>
        </trans-unit>
        <trans-unit id="eefc3e21c06e6017f8c10a8bb69ea540ab281b02" translate="yes" xml:space="preserve">
          <source>A Pod formatter may also note, in a comment or warning, a list of what unrenderable characters were encountered.</source>
          <target state="translated">Podフォーマッタは、コメントや警告の中で、レンダリング不可能な文字が発生した場合のリストをメモしておくこともできます。</target>
        </trans-unit>
        <trans-unit id="90bcd0d55b890352044335ec7ff338d09cd4b9d1" translate="yes" xml:space="preserve">
          <source>A Pod processor may signal that the above (specifically the &quot;=head1&quot; paragraph) is an error. Note, however, that the following should</source>
          <target state="translated">Podプロセッサは、上記(具体的には&quot;=head1 &quot;段落)がエラーであることをシグナリングすることがあります。ただし、次のことに注意してください。</target>
        </trans-unit>
        <trans-unit id="185a19a7a82d49a0358676fb031bca8138fc5f0d" translate="yes" xml:space="preserve">
          <source>A Rename script</source>
          <target state="translated">A リネームスクリプト</target>
        </trans-unit>
        <trans-unit id="bb0e1d56b4fab0cf7a60aa29b48524e0458e7730" translate="yes" xml:space="preserve">
          <source>A Simple Client</source>
          <target state="translated">シンプルなクライアント</target>
        </trans-unit>
        <trans-unit id="b671ac0d028246c423146116e7e15964cde16b69" translate="yes" xml:space="preserve">
          <source>A Simple Example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="35d2688dd60f4771865d489a975386b1e2e85efc" translate="yes" xml:space="preserve">
          <source>A Social Contract about Artistic Control</source>
          <target state="translated">芸術的統制をめぐる社会契約</target>
        </trans-unit>
        <trans-unit id="ce9f49f53bf8557e68c16a6cb0cab50ed319c852" translate="yes" xml:space="preserve">
          <source>A Solution</source>
          <target state="translated">解決策</target>
        </trans-unit>
        <trans-unit id="33b832366f848ffdd1c9a8efe9f8d3f20e39c539" translate="yes" xml:space="preserve">
          <source>A TAP</source>
          <target state="translated">A TAP</target>
        </trans-unit>
        <trans-unit id="f5889f236a4188d2629daf331b9d72acfd600c43" translate="yes" xml:space="preserve">
          <source>A TAP parser consumes input from a single</source>
          <target state="translated">TAPパーサーは、1つの</target>
        </trans-unit>
        <trans-unit id="7010880f6ae20816985e9d146f66cebdc5b3456f" translate="yes" xml:space="preserve">
          <source>A TAP parser creates &lt;a href=&quot;parser/result&quot;&gt;TAP::Parser::Result&lt;/a&gt;s as it iterates through the input</source>
          <target state="translated">TAPパーサーは、入力を反復処理するときに&lt;a href=&quot;parser/result&quot;&gt;TAP :: Parser :: Resultを&lt;/a&gt;作成します</target>
        </trans-unit>
        <trans-unit id="cbc0d3fb42afd0ba8dd15a85a63c440071f45982" translate="yes" xml:space="preserve">
          <source>A TAP parser uses</source>
          <target state="translated">TAPパーサーは</target>
        </trans-unit>
        <trans-unit id="c7adba530805a495085a55a74870dea40f6e16bc" translate="yes" xml:space="preserve">
          <source>A TAP source &amp;amp; meta data about it</source>
          <target state="translated">TAPソースとそれに関するメタデータ</target>
        </trans-unit>
        <trans-unit id="92ce2bc3533d042b851a960d43bdd7c40fb70ee1" translate="yes" xml:space="preserve">
          <source>A TERM has the highest precedence in Perl. They include variables, quote and quote-like operators, any expression in parentheses, and any function whose arguments are parenthesized. Actually, there aren't really functions in this sense, just list operators and unary operators behaving as functions because you put parentheses around the arguments. These are all documented in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;.</source>
          <target state="translated">TERMはPerlで最高の優先順位を持っています。それらには、変数、引用符および引用符のような演算子、括弧内の式、および引数が括弧で囲まれた関数が含まれます。実際、この意味では実際には関数はありません。引数を括弧で囲んでいるため、関数として動作する演算子と単項演算子をリストするだけです。これらはすべて&lt;a href=&quot;perlfunc&quot;&gt;perlfuncで&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="83c2c3a67955f622ae2a621c93e51552fb8bf822" translate="yes" xml:space="preserve">
          <source>A Thread Pitfall: Deadlocks</source>
          <target state="translated">スレッドの落とし穴。デッドロック</target>
        </trans-unit>
        <trans-unit id="54dda450dbc946f563a52bcd0e2371c672a57c0d" translate="yes" xml:space="preserve">
          <source>A UCM file looks like this.</source>
          <target state="translated">UCMファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="311a8f73aa0632dde20a979ee931fae45488ea90" translate="yes" xml:space="preserve">
          <source>A Unicode</source>
          <target state="translated">ユニコード</target>
        </trans-unit>
        <trans-unit id="636617240302996a8f020159cb2e15c959a81dd5" translate="yes" xml:space="preserve">
          <source>A Unicode boundary (&lt;code&gt;\b{}&lt;/code&gt; ), available starting in v5.22, is a spot between two characters, or before the first character in the string, or after the final character in the string where certain criteria defined by Unicode are met. See &lt;a href=&quot;perlrebackslash#%5cb%7b%7d%2c-%5cb%2c-%5cB%7b%7d%2c-%5cB&quot;&gt;\b{}, \b, \B{}, \B in perlrebackslash&lt;/a&gt; for details.</source>
          <target state="translated">Unicode境界（ &lt;code&gt;\b{}&lt;/code&gt; ）はv5.22以降で使用可能で、2つの文字の間、または文字列の最初の文字の前、またはUnicodeによって定義された特定の基準が満たされる文字列の最後の文字の後のスポットです。詳細については&lt;a href=&quot;perlrebackslash#%5cb%7b%7d%2c-%5cb%2c-%5cB%7b%7d%2c-%5cB&quot;&gt;、perlrebackslashの\ b {}、\ b、\ B {}、\ B&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fd6ccb5c3173a4892e5e2944faba0f70f7b55ac3" translate="yes" xml:space="preserve">
          <source>A Unicode linebreak matches the two-character CRLF grapheme or any of seven vertical whitespace characters. Good for dealing with textfiles coming from different operating systems.</source>
          <target state="translated">Unicode の改行は、2 文字の CRLF グラフィムまたは 7 つの垂直空白文字のいずれかにマッチします。異なるオペレーティングシステムから来たテキストファイルを扱うのに適しています。</target>
        </trans-unit>
        <trans-unit id="d796a3e99a29b5e8798e5ee8787d53dec284ccde" translate="yes" xml:space="preserve">
          <source>A Webget Client</source>
          <target state="translated">Webget クライアント</target>
        </trans-unit>
        <trans-unit id="625ef9e7e1c1fa35b033333425cc32cf0c3ed6bf" translate="yes" xml:space="preserve">
          <source>A backslash sequence is a sequence of characters, the first one of which is a backslash. Perl ascribes special meaning to many such sequences, and some of these are character classes. That is, they match a single character each, provided that the character belongs to the specific set of characters defined by the sequence.</source>
          <target state="translated">バックスラッシュシーケンスとは、最初の 1 つがバックスラッシュである文字のシーケンスのことです。Perl は多くのこのようなシーケンスに特別な意味を与えており、これらの中には文字クラスがあります。つまり、これらの文字は、その文字がシーケンスによって定義された特定の文字の集合に属していることを条件に、それぞれ1つの文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="0a7351fee5999f66ec79553b15a43f5d86c41d6e" translate="yes" xml:space="preserve">
          <source>A backward-compatibility alias for TYPE.</source>
          <target state="translated">TYPEの下位互換性のエイリアス。</target>
        </trans-unit>
        <trans-unit id="f7fb814e1c2c79d0e734419e57ea9495c267d50e" translate="yes" xml:space="preserve">
          <source>A backward-compatible version of &lt;code&gt;GIMME_V&lt;/code&gt; which can only return &lt;code&gt;G_SCALAR&lt;/code&gt; or &lt;code&gt;G_ARRAY&lt;/code&gt; ; in a void context, it returns &lt;code&gt;G_SCALAR&lt;/code&gt; . Deprecated. Use &lt;code&gt;GIMME_V&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;G_SCALAR&lt;/code&gt; または &lt;code&gt;G_ARRAY&lt;/code&gt; のみを返すことができる &lt;code&gt;GIMME_V&lt;/code&gt; の下位互換バージョン。 voidコンテキストでは、 &lt;code&gt;G_SCALAR&lt;/code&gt; を返します。非推奨。代わりに &lt;code&gt;GIMME_V&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="825d3b4cdbdd793ff6bcae81fea3eedc9476aefd" translate="yes" xml:space="preserve">
          <source>A bare declaration like that declares the function to be a list operator, not a unary operator, so you have to be careful to use parentheses (or &lt;code&gt;or&lt;/code&gt; instead of &lt;code&gt;||&lt;/code&gt;.) The &lt;code&gt;||&lt;/code&gt; operator binds too tightly to use after list operators; it becomes part of the last element. You can always use parentheses around the list operators arguments to turn the list operator back into something that behaves more like a function call. Alternatively, you can use the prototype &lt;code&gt;($)&lt;/code&gt; to turn the subroutine into a unary operator:</source>
          <target state="translated">あなたが（または使用の括弧に注意しなければならないので、そのような裸の宣言は、リスト演算子ではなく、単項演算子であることを関数を宣言 &lt;code&gt;or&lt;/code&gt; 代わりに &lt;code&gt;||&lt;/code&gt; 。） &lt;code&gt;||&lt;/code&gt; 演算子は、リスト演算子の後に使用するには結合が強すぎます。最後の要素の一部になります。リスト演算子の引数を括弧で囲んで、リスト演算子を関数呼び出しのように動作させることができます。または、プロトタイプ &lt;code&gt;($)&lt;/code&gt; を使用して、サブルーチンを単項演算子に変えることもできます。</target>
        </trans-unit>
        <trans-unit id="79d7fc67720af71225bb992fc841089461a260dd" translate="yes" xml:space="preserve">
          <source>A bare, single &lt;b&gt;statement&lt;/b&gt;, without any braces, hanging off an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; conditional. C allows them. Perl doesn&amp;rsquo;t.</source>
          <target state="translated">中括弧のない、単一または単一の&lt;b&gt;ステートメント&lt;/b&gt;。条件付きの &lt;code&gt;if&lt;/code&gt; または &lt;code&gt;while&lt;/code&gt; です。Cはそれらを許可します。Perlはそうではありません。</target>
        </trans-unit>
        <trans-unit id="7c021cbe956d43771e93a19ff22791f5da1edc86" translate="yes" xml:space="preserve">
          <source>A basic building block. When you&amp;rsquo;re talking about an &lt;b&gt;array&lt;/b&gt;, it&amp;rsquo;s one of the items that make up the array.</source>
          <target state="translated">基本的なビルディングブロック。あなたが話しているときに&lt;b&gt;、配列&lt;/b&gt;は、配列を構成する項目の一つです。</target>
        </trans-unit>
        <trans-unit id="dc24770c94125e3eea533d29f62a33f6fca11b44" translate="yes" xml:space="preserve">
          <source>A basic example</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="f7282a24ce95eed40d8f1f24671950459bbf71d8" translate="yes" xml:space="preserve">
          <source>A basic non-buffered layer which calls Unix/POSIX &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;lseek()&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt;. No buffering. Even on platforms that distinguish between O_TEXT and O_BINARY this layer is always O_BINARY.</source>
          <target state="translated">Unix / POSIXの &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;lseek()&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; を呼び出す基本的な非バッファレイヤー。バッファリングなし。O_TEXTとO_BINARYを区別​​するプラットフォームでも、このレイヤーは常にO_BINARYです。</target>
        </trans-unit>
        <trans-unit id="3269aa1ef3bfcd123309b115096aa27b3b0a0aa8" translate="yes" xml:space="preserve">
          <source>A bigger, fancier sort of &lt;b&gt;program&lt;/b&gt; with a fancier name so people don&amp;rsquo;t realize they are using a program.</source>
          <target state="translated">大きな、手の込んだソート&lt;b&gt;プログラム&lt;/b&gt;の人々は、彼らがプログラムを使用している気付いていないので、手の込んだ名前を持ちます。</target>
        </trans-unit>
        <trans-unit id="1395a44d1527cd51acf9f72e88e221dc5e7a43dc" translate="yes" xml:space="preserve">
          <source>A binary search such as that provided by &lt;a href=&quot;#search_invlist()&quot;&gt;search_invlist()&lt;/a&gt;, can be used to quickly find a code point in the inversion list, and hence its corresponding mapping.</source>
          <target state="translated">&lt;a href=&quot;#search_invlist()&quot;&gt;search_invlist（）&lt;/a&gt;によって提供されるようなバイナリ検索を使用すると、反転リスト内のコードポイントをすばやく見つけることができるため、対応するマッピングを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="a3982f0643b548a46d27f9bb45d706ffed3877fd" translate="yes" xml:space="preserve">
          <source>A bit of magic: executing Perl code in a regular expression</source>
          <target state="translated">ちょっとした魔法:Perl のコードを正規表現で実行する</target>
        </trans-unit>
        <trans-unit id="a21b7a38b7737dbecfe5abeb569d1f5e67680088" translate="yes" xml:space="preserve">
          <source>A bitfield containing &lt;code&gt;AI_*&lt;/code&gt; constants; see below.</source>
          <target state="translated">&lt;code&gt;AI_*&lt;/code&gt; 定数を含むビットフィールド。下記参照。</target>
        </trans-unit>
        <trans-unit id="5315c3bf863fe0d813794db09004e209616806a3" translate="yes" xml:space="preserve">
          <source>A bolt out of the blue; that is, an event triggered by the &lt;b&gt;operating system&lt;/b&gt;, probably when you&amp;rsquo;re least expecting it.</source>
          <target state="translated">突然のボルト。つまり、&lt;b&gt;オペレーティングシステム&lt;/b&gt;によってトリガーされたイベントです。</target>
        </trans-unit>
        <trans-unit id="37f6985b23fa2a35e2960a3080f908d1bc2f10c9" translate="yes" xml:space="preserve">
          <source>A boolean comparison operator such as &lt;code&gt;$_ &amp;lt; 10&lt;/code&gt; or &lt;code&gt;$x eq &quot;abc&quot;&lt;/code&gt; . The relational operators that this applies to are the six numeric comparisons (&lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; , &lt;code&gt;==&lt;/code&gt; , and &lt;code&gt;!=&lt;/code&gt; ), and the six string comparisons (&lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;gt&lt;/code&gt; , &lt;code&gt;le&lt;/code&gt; , &lt;code&gt;ge&lt;/code&gt; , &lt;code&gt;eq&lt;/code&gt; , and &lt;code&gt;ne&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;$_ &amp;lt; 10&lt;/code&gt; または &lt;code&gt;$x eq &quot;abc&quot;&lt;/code&gt; などのブール比較演算子。これが適用される関係演算子は、6つの数値比較（ &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;=&lt;/code&gt; 、 &lt;code&gt;==&lt;/code&gt; 、および &lt;code&gt;!=&lt;/code&gt; ）、および6つの文字列比較（ &lt;code&gt;lt&lt;/code&gt; 、 &lt;code&gt;gt&lt;/code&gt; 、 &lt;code&gt;le&lt;/code&gt; 、 &lt;code&gt;ge&lt;/code&gt; 、 &lt;code&gt;eq&lt;/code&gt; 、および &lt;code&gt;ne&lt;/code&gt; ）です。 。</target>
        </trans-unit>
        <trans-unit id="5784bf453d1712122e0236fafc88e209e3c6adfe" translate="yes" xml:space="preserve">
          <source>A boolean flag that indicates if this argument was a required argument. If marked as required and not provided, check() will fail.</source>
          <target state="translated">この引数が必須の引数であったかどうかを示すブール値フラグ。必須とマークされていて提供されていない場合、check()は失敗します。</target>
        </trans-unit>
        <trans-unit id="806d4e84607ce29c56416e6b774c66e8a0e936b0" translate="yes" xml:space="preserve">
          <source>A boolean to indicate whether &lt;code&gt;check&lt;/code&gt; should be verbose and warn about what went wrong in a check or not.</source>
          <target state="translated">&lt;code&gt;check&lt;/code&gt; を冗長にするかどうかを示し、チェックで問題が発生したかどうかを警告するブール値。</target>
        </trans-unit>
        <trans-unit id="75de768f80b992cf9735e1b55771968cbd72780f" translate="yes" xml:space="preserve">
          <source>A boolean type. This can be used to pass true and false values to and from C.</source>
          <target state="translated">ブール型です。これを使用して、Cとの間で真や偽の値を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="aaea9ae3f33d9df07a73532337b752e2bd4004dd" translate="yes" xml:space="preserve">
          <source>A boolean value indicating whether or not the module was found to be at least the version you specified. If you did not specify a version, uptodate will always be true if the module was found. If no parsable version was found in the module, uptodate will also be true, since &lt;code&gt;check_install&lt;/code&gt; had no way to verify clearly.</source>
          <target state="translated">モジュールが少なくとも指定したバージョンであることが判明したかどうかを示すブール値。バージョンを指定しなかった場合、モジュールが見つかった場合、uptodateは常にtrueになります。モジュールに解析可能なバージョンが見つからなかった場合、check_installには明確に検証する方法がなかったため、 &lt;code&gt;check_install&lt;/code&gt; もtrueになります。</target>
        </trans-unit>
        <trans-unit id="f4da841a146cb38a789f449f32f4b854b9d0c640" translate="yes" xml:space="preserve">
          <source>A built-in unary operator that you use to determine whether something is &lt;b&gt;true&lt;/b&gt; about a file, such as &lt;code&gt;&amp;ndash;o
$filename&lt;/code&gt; to test whether you&amp;rsquo;re the owner of the file.</source>
          <target state="translated">自分がファイルの所有者であるかどうかをテストする &lt;code&gt;&amp;ndash;o $filename&lt;/code&gt; など、ファイルについて何かが&lt;b&gt;正しい&lt;/b&gt;かどうかを判断するために使用する組み込みの単項演算子。</target>
        </trans-unit>
        <trans-unit id="7359d066cd43a6821cadbf98e46de3780a2f14da" translate="yes" xml:space="preserve">
          <source>A bundle is just a perl module in the namespace Bundle:: that does not define any functions or methods. It usually only contains documentation.</source>
          <target state="translated">バンドルは名前空間Bundle::にあるPerlモジュールで、関数やメソッドを定義していません。通常はドキュメントだけが含まれています。</target>
        </trans-unit>
        <trans-unit id="dcefaccadd4fc0b82966dd6fe0502b4a54a13075" translate="yes" xml:space="preserve">
          <source>A call to &lt;a href=&quot;#DECLARATION_FOR_LC_NUMERIC_MANIPULATION&quot;&gt;DECLARATION_FOR_LC_NUMERIC_MANIPULATION&lt;/a&gt; must have been made to declare at compile time a private variable used by this macro and the two &lt;code&gt;STORE&lt;/code&gt; ones. This macro should be called as a single statement, not an expression, but with an empty argument list, like this:</source>
          <target state="translated">このマクロと2つの &lt;code&gt;STORE&lt;/code&gt; 変数で使用されるプライベート変数をコンパイル時に宣言するには、&lt;a href=&quot;#DECLARATION_FOR_LC_NUMERIC_MANIPULATION&quot;&gt;DECLARATION_FOR_LC_NUMERIC_MANIPULATION&lt;/a&gt;を呼び出す必要があります。このマクロは、式ではなく単一のステートメントとして呼び出す必要がありますが、次のように引数リストを空にして呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="85dcd887c15b971af653f15a54e47c2790e7a16c" translate="yes" xml:space="preserve">
          <source>A call to &lt;a href=&quot;#DECLARATION_FOR_LC_NUMERIC_MANIPULATION&quot;&gt;DECLARATION_FOR_LC_NUMERIC_MANIPULATION&lt;/a&gt; must have been made to declare at compile time a private variable used by this macro. This macro should be called as a single statement, not an expression, but with an empty argument list, like this:</source>
          <target state="translated">このマクロで使用されるプライベート変数をコンパイル時に宣言するには、&lt;a href=&quot;#DECLARATION_FOR_LC_NUMERIC_MANIPULATION&quot;&gt;DECLARATION_FOR_LC_NUMERIC_MANIPULATION&lt;/a&gt;を呼び出す必要があります。このマクロは、式ではなく単一のステートメントとして呼び出す必要がありますが、次のように引数リストを空にして呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="6d081cdfc1719628de161b242cc46c6122417557" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; will cause Perl to exit, and to invoke the command given as an argument to &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; via &lt;code&gt;lib$do_command&lt;/code&gt; . If the argument begins with '@' or '$' (other than as part of a filespec), then it is executed as a DCL command. Otherwise, the first token on the command line is treated as the filespec of an image to run, and an attempt is made to invoke it (using</source>
          <target state="translated">呼び出し &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 出口へのPerlの原因となります、との引数として与えられたコマンドを呼び出すために &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; を介して、 &lt;code&gt;lib$do_command&lt;/code&gt; 。引数が '@'または '$'で始まる場合（ファイル仕様の一部以外）、引数はDCLコマンドとして実行されます。それ以外の場合、コマンドラインの最初のトークンは実行するイメージのファイル指定として扱われ、それを呼び出す試みが行われます（</target>
        </trans-unit>
        <trans-unit id="9b1310b4d6c00ffc23a2f0bae5e7870ed9e6ede4" translate="yes" xml:space="preserve">
          <source>A character class is a way of denoting a set of characters in such a way that one character of the set is matched. It's important to remember that: matching a character class consumes exactly one character in the source string. (The source string is the string the regular expression is matched against.)</source>
          <target state="translated">文字クラスとは、文字の集合を表す方法で、その集合の1文字をマッチさせる方法です。文字クラスのマッチングは、ソース文字列の中の1文字を正確に消費することを覚えておくことが重要です。(ソース文字列とは、正規表現がマッチされる文字列のことです)。</target>
        </trans-unit>
        <trans-unit id="2d7e4b0e3a328dba3c81ba02d01a3c0f782c72a5" translate="yes" xml:space="preserve">
          <source>A character encoding form plus byte serialization. There are Seven character encoding schemes in Unicode: UTF-8, UTF-16, UTF-16BE, UTF-16LE, UTF-32 (UCS-4), UTF-32BE (UCS-4BE) and UTF-32LE (UCS-4LE), and UTF-7.</source>
          <target state="translated">文字符号化形式にバイト列化を加えたもの。Unicodeには7つの文字符号化方式がある。UTF-8、UTF-16、UTF-16BE、UTF-16LE、UTF-32(UCS-4)、UTF-32BE(UCS-4BE)、UTF-32LE(UCS-4LE)、UTF-7。</target>
        </trans-unit>
        <trans-unit id="e2b2859306209b5e788c7205519699be5962c3a1" translate="yes" xml:space="preserve">
          <source>A character entity was found that does not belong to the standard ISO set or the POD specials &lt;code&gt;verbar&lt;/code&gt; and &lt;code&gt;sol&lt;/code&gt; .</source>
          <target state="translated">標準のISOセットまたはPODスペシャル &lt;code&gt;verbar&lt;/code&gt; および &lt;code&gt;sol&lt;/code&gt; に属していない文字エンティティが見つかりました。</target>
        </trans-unit>
        <trans-unit id="6b3facef3525988e61e4c03673d831959bbb24fc" translate="yes" xml:space="preserve">
          <source>A character in the range 0 .. 2**32-1 (or more); what Perl's strings are made of.</source>
          <target state="translated">0 ~ 2**32-1(またはそれ以上)の範囲の文字。</target>
        </trans-unit>
        <trans-unit id="4c66dbdd31c41ff8290d5b9e5b84c42f44091393" translate="yes" xml:space="preserve">
          <source>A character in the range 0..255; a special case of a Perl character.</source>
          <target state="translated">0~255の範囲の文字。Perl文字の特殊なケース。</target>
        </trans-unit>
        <trans-unit id="deb99f697e889e229888732646e1d9a4b2cd77a6" translate="yes" xml:space="preserve">
          <source>A character range may be specified with a hyphen, so &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/A-J/0-9/&lt;/a&gt;&lt;/code&gt; does the same replacement as &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/ACEGIBDFHJ/0246813579/&lt;/a&gt;&lt;/code&gt;. For &lt;b&gt;sed&lt;/b&gt; devotees, &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; is provided as a synonym for &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt;. If the</source>
          <target state="translated">文字範囲はハイフンで指定できるため、 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/A-J/0-9/&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/ACEGIBDFHJ/0246813579/&lt;/a&gt;&lt;/code&gt; と同じ置換を行います。ため&lt;b&gt;のsed&lt;/b&gt;信者、 &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; 同義語として提供される &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 。もし</target>
        </trans-unit>
        <trans-unit id="62e5445beeff56a35c0dc5ca65bde86d53c27ebb" translate="yes" xml:space="preserve">
          <source>A character set comprising all the major character sets of the world, more or less. See &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;.</source>
          <target state="translated">多かれ少なかれ、世界のすべての主要な文字セットで構成される文字セット。&lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.orgを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8c07be0779b2376c619d1a65316d136daa5c26ab" translate="yes" xml:space="preserve">
          <source>A character symbolizing the type of IO Handle.</source>
          <target state="translated">IOハンドルの種類を象徴する文字。</target>
        </trans-unit>
        <trans-unit id="ad2f4627442f7e9e5cdd45c11902cca0d8325c3b" translate="yes" xml:space="preserve">
          <source>A character with the numeric value of zero. It&amp;rsquo;s used by C to terminate strings, but Perl allows strings to contain a null.</source>
          <target state="translated">数値がゼロの文字。文字列を終了するためにCで使用されますが、Perlでは文字列にnullを含めることができます。</target>
        </trans-unit>
        <trans-unit id="a98fe200a320861843965673193461dc42788194" translate="yes" xml:space="preserve">
          <source>A check is made to make sure that the file that is found does contain some pod documentation.</source>
          <target state="translated">見つかったファイルにポッドのドキュメントが含まれていることを確認します。</target>
        </trans-unit>
        <trans-unit id="dff052af6a3279311d539bddc8b2f4ffb4c3bccf" translate="yes" xml:space="preserve">
          <source>A check routine is called when the node is fully constructed except for the execution-order thread. Since at this time there are no back-links to the currently constructed node, one can do most any operation to the top-level node, including freeing it and/or creating new nodes above/below it.</source>
          <target state="translated">チェック・ルーチンは、実行順序スレッドを除いてノードが完全に構築されたときに呼び出されます。この時点では、現在構築されているノードへのバックリンクは存在しないので、最上位ノードを解放したり、その上/下に新しいノードを作成したりするなど、最上位ノードに対するほとんどの操作を行うことができます。</target>
        </trans-unit>
        <trans-unit id="ffb83db9b043670ff139e922da8f6f1ecd3cdb22" translate="yes" xml:space="preserve">
          <source>A class implementing a filehandle should have the following methods:</source>
          <target state="translated">ファイルハンドルを実装するクラスは、以下のメソッドを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="78efc3f39c8e446fbaac2a63562d8cf90bbe3489" translate="yes" xml:space="preserve">
          <source>A class implementing a hash should have the following methods:</source>
          <target state="translated">ハッシュを実装するクラスは、以下のメソッドを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="c29da3bd78457adcea44e08fd7ad308e312eac90" translate="yes" xml:space="preserve">
          <source>A class implementing a scalar should have the following methods:</source>
          <target state="translated">スカラを実装したクラスは、以下のメソッドを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="63533b67267a9fe7a63e719b4e79f437e64bb6e7" translate="yes" xml:space="preserve">
          <source>A class implementing a tied filehandle should define the following methods: TIEHANDLE, at least one of PRINT, PRINTF, WRITE, READLINE, GETC, READ, and possibly CLOSE, UNTIE and DESTROY. The class can also provide: BINMODE, OPEN, EOF, FILENO, SEEK, TELL - if the corresponding perl operators are used on the handle.</source>
          <target state="translated">タイドファイルハンドルを実装するクラスは、以下のメソッドを定義する必要があります。TIEHANDLE、PRINT、PRINTF、WRITE、READLINE、GETC、READ、そして場合によってはCLOSE、UNTIE、DESTROYのうち少なくとも1つです。このクラスはまた、提供することができます。BINMODE、OPEN、EOF、FILENO、SEEK、TELL-対応するperl演算子がハンドルで使用されている場合。</target>
        </trans-unit>
        <trans-unit id="860765a0ff8cee1341ccc04233da280b71701cf8" translate="yes" xml:space="preserve">
          <source>A class implementing a tied ordinary array should define the following methods: TIEARRAY, FETCH, STORE, FETCHSIZE, STORESIZE, CLEAR and perhaps UNTIE and/or DESTROY.</source>
          <target state="translated">紐付き通常配列を実装するクラスは、以下のメソッドを定義しなければなりません。TIEARRAY,FETCH,STORE,FETCHSIZE,STORESIZE,CLEAR、そしておそらくUNTIEおよび/またはDESTROYです。</target>
        </trans-unit>
        <trans-unit id="bf2fe5249c3fde4bdfb3247a51b433da9021cc26" translate="yes" xml:space="preserve">
          <source>A class implementing a tied scalar should define the following methods: TIESCALAR, FETCH, STORE, and possibly UNTIE and/or DESTROY.</source>
          <target state="translated">紐付きスカラを実装したクラスは,以下のメソッドを定義する必要があります.TIESCALARAR,FETCH,STORE,そして場合によってはUNTIEやDESTROYなどのメソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="172ef2f1ff718aa5d74e2eddddd8780306842005" translate="yes" xml:space="preserve">
          <source>A class implementing an ordinary array should have the following methods:</source>
          <target state="translated">通常の配列を実装するクラスは,以下のメソッドを持つ必要があります.</target>
        </trans-unit>
        <trans-unit id="7a3aaef4b6bdc65044d6cee8905b655c826b75aa" translate="yes" xml:space="preserve">
          <source>A class is simply a package. A class provides methods that expect to operate on objects.</source>
          <target state="translated">クラスは単にパッケージです。クラスはオブジェクトを操作することを期待したメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="db991666cef49d40c1a8876d8e678d10cc5c5920" translate="yes" xml:space="preserve">
          <source>A class providing an object based interface to SysV IPC message queues.</source>
          <target state="translated">SysV IPC メッセージキューへのオブジェクトベースのインターフェースを提供するクラスです。</target>
        </trans-unit>
        <trans-unit id="4b371730a083c396c011c1644f5fee33b2fe22c7" translate="yes" xml:space="preserve">
          <source>A class providing an object based interface to SysV IPC semaphores.</source>
          <target state="translated">SysV IPCセマフォへのオブジェクトベースのインターフェースを提供するクラスです。</target>
        </trans-unit>
        <trans-unit id="937b26fb80fdcafceefce4e180073ce7c0d23781" translate="yes" xml:space="preserve">
          <source>A class providing an object based interface to SysV IPC shared memory.</source>
          <target state="translated">SysV IPC共有メモリへのオブジェクトベースのインターフェースを提供するクラスです。</target>
        </trans-unit>
        <trans-unit id="fa2558ecb874a35a0f9b83568f215824db4e665c" translate="yes" xml:space="preserve">
          <source>A cleaner interface.</source>
          <target state="translated">スッキリしたインターフェース。</target>
        </trans-unit>
        <trans-unit id="551df32d5b94297e0a676020a161e26c925fb485" translate="yes" xml:space="preserve">
          <source>A command &quot;=begin</source>
          <target state="translated">コマンド「=begin</target>
        </trans-unit>
        <trans-unit id="4b51cb486fb82b1f8836c9909ccc915ba4671256" translate="yes" xml:space="preserve">
          <source>A command paragraph (also called a &quot;directive&quot;). The first line of this paragraph must match &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=[a-zA-Z]/&lt;/a&gt;&lt;/code&gt;. Command paragraphs are typically one line, as in:</source>
          <target state="translated">コマンド段落（「ディレクティブ」とも呼ばれます）。この段落の最初の行は &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=[a-zA-Z]/&lt;/a&gt;&lt;/code&gt; 一致する必要があります。コマンドの段落は通常、次のように1行です。</target>
        </trans-unit>
        <trans-unit id="a63e70d9d65f24f45184b420c514e63650be0655" translate="yes" xml:space="preserve">
          <source>A command paragraph is used for special treatment of whole chunks of text, usually as headings or parts of lists.</source>
          <target state="translated">コマンドパラグラフは、通常は見出しやリストの一部として、テキスト全体の塊を特別に扱うために使用されます。</target>
        </trans-unit>
        <trans-unit id="d9ff878c605ee9fd388f0b2eb88f5ce5a0c8f433" translate="yes" xml:space="preserve">
          <source>A command such as this can vastly reduce the volume of material to actually sort through in the first place, and should not be too lightly disregarded purely on the basis of its simplicity. The &lt;code&gt;KISS&lt;/code&gt; principle is too often overlooked - the next example uses the simple system &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; utility to demonstrate. Let's take a look at an actual example of sorting the contents of a large file, an apache logfile would do. This one has over a quarter of a million lines, is 50M in size, and a snippet of it looks like this:</source>
          <target state="translated">このようなコマンドは、そもそも実際に並べ替える素材の量を大幅に減らすことができるため、単純さだけに基づいて軽視してはなりません。 &lt;code&gt;KISS&lt;/code&gt; の原則は、あまりにもしばしば見落とされる-次の例では、単純なシステムの使用 &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; を証明するためにユーティリティを。大きなファイルの内容をソートする実際の例を見てみましょう。Apacheログファイルがそうです。これは25万行以上あり、サイズは50Mで、そのスニペットは次のようになります。</target>
        </trans-unit>
        <trans-unit id="950be6f2b3fd35cd65faf61436fcb9557d03c11d" translate="yes" xml:space="preserve">
          <source>A command which has ended up in the middle of a paragraph or other command, such as</source>
          <target state="translated">段落などの途中で終わってしまったコマンドは</target>
        </trans-unit>
        <trans-unit id="dfc138f19fcb5bcbc53f0752d4f1867a8fa0e913" translate="yes" xml:space="preserve">
          <source>A command-line front-end to &lt;code&gt;Module::CoreList&lt;/code&gt; , to query what modules were shipped with given versions of perl.</source>
          <target state="translated">&lt;code&gt;Module::CoreList&lt;/code&gt; のコマンドラインフロントエンド。指定されたバージョンのperlに同梱されているモジュールを照会します。</target>
        </trans-unit>
        <trans-unit id="9cbae24479d2e6391e2d1be21dd08d1626f00360" translate="yes" xml:space="preserve">
          <source>A comment</source>
          <target state="translated">コメント</target>
        </trans-unit>
        <trans-unit id="79414afc2393f5f2f467ceef02de3748e14d7a7a" translate="yes" xml:space="preserve">
          <source>A comment, indicated by putting a '#' in the first column.</source>
          <target state="translated">最初の列に「#」をつけることで表示されるコメント。</target>
        </trans-unit>
        <trans-unit id="ee091682ad4b542f16ac50d991bfff2ba6d1e9a6" translate="yes" xml:space="preserve">
          <source>A comment. The text is ignored. Note that Perl closes the comment as soon as it sees a &lt;code&gt;)&lt;/code&gt;, so there is no way to put a literal &lt;code&gt;)&lt;/code&gt; in the comment. The pattern's closing delimiter must be escaped by a backslash if it appears in the comment.</source>
          <target state="translated">コメント。テキストは無視されます。Perlはすぐにそれを見ているようにコメントを閉じていること注 &lt;code&gt;)&lt;/code&gt; ので、リテラルを置く方法はありません &lt;code&gt;)&lt;/code&gt; コメントで。パターンの終了デリミタがコメントに表示される場合は、バックスラッシュでエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="1efe142409d27cde9607bba9f906e0c889b26956" translate="yes" xml:space="preserve">
          <source>A commit message isn't intended to take the place of comments in your code. Commit messages should describe the change you made, while code comments should describe the current state of the code.</source>
          <target state="translated">コミットメッセージはコード中のコメントの代わりになるものではありません。コミットメッセージは変更した内容を記述し、コードコメントはコードの現在の状態を記述します。</target>
        </trans-unit>
        <trans-unit id="bf7ad1fec29a3549dc58ded16ba4af5fb14c45da" translate="yes" xml:space="preserve">
          <source>A common abuse of this power stems from the ability to make infinite loops using regular expressions, with something as innocuous as:</source>
          <target state="translated">この力のよくある乱用は、正規表現を使って無限ループを作る能力に由来しています。</target>
        </trans-unit>
        <trans-unit id="80ff7af3da26f57aaa8f224ec06b92247a2ede78" translate="yes" xml:space="preserve">
          <source>A common bit of code &lt;b&gt;NOT TO USE&lt;/b&gt; is this:</source>
          <target state="translated">&lt;b&gt;使用しない&lt;/b&gt;コードの一般的なビットはこれです：</target>
        </trans-unit>
        <trans-unit id="bcd3e6faa389885dcad88118cf027340603a19e2" translate="yes" xml:space="preserve">
          <source>A common misconception in socket programming is that &lt;code&gt;\n &lt;a href=&quot;functions/eq&quot;&gt;eq&lt;/a&gt; \012&lt;/code&gt; everywhere. When using protocols such as common Internet protocols, &lt;code&gt;\012&lt;/code&gt; and &lt;code&gt;\015&lt;/code&gt; are called for specifically, and the values of the logical &lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\r&lt;/code&gt; (carriage return) are not reliable.</source>
          <target state="translated">ソケットプログラミングにおける一般的な誤解は、どこでも &lt;code&gt;\n &lt;a href=&quot;functions/eq&quot;&gt;eq&lt;/a&gt; \012&lt;/code&gt; です。一般的なインターネットプロトコルなどのプロトコルを使用する場合、 &lt;code&gt;\012&lt;/code&gt; および &lt;code&gt;\015&lt;/code&gt; が特別に呼び出され、論理 &lt;code&gt;\n&lt;/code&gt; および &lt;code&gt;\r&lt;/code&gt; （復帰）の値は信頼できません。</target>
        </trans-unit>
        <trans-unit id="b9e9593af1f1c680a3827d8f5e0edca15a66c226" translate="yes" xml:space="preserve">
          <source>A common mistake is to try to separate the words with commas or to put comments into a multi-line &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt;-string. For this reason, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma and the &lt;b&gt;-w&lt;/b&gt; switch (that is, the &lt;code&gt;$^W&lt;/code&gt; variable) produces warnings if the</source>
          <target state="translated">よくある間違いは、単語をコンマで区切るか、コメントを複数行の &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt; -stringに入れることです。このため、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマと&lt;b&gt;-w&lt;/b&gt;スイッチ（つまり、 &lt;code&gt;$^W&lt;/code&gt; 変数）は、</target>
        </trans-unit>
        <trans-unit id="aad5d9b3c5a0d882bf3ecc970194923dc4421054" translate="yes" xml:space="preserve">
          <source>A common mistake is to write:</source>
          <target state="translated">よくある間違いは、書くことです。</target>
        </trans-unit>
        <trans-unit id="2a1998491c1e38cb900464f10bbb2d155c01472d" translate="yes" xml:space="preserve">
          <source>A common pitfall is to use &lt;a href=&quot;#precision()&quot;&gt;precision()&lt;/a&gt; when you want to round a result to a certain number of digits:</source>
          <target state="translated">一般的な落とし穴は、結果を特定の桁数に丸めたい場合に&lt;a href=&quot;#precision()&quot;&gt;precision（）&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="008944edbc996e59046c342b9a5abf856d868927" translate="yes" xml:space="preserve">
          <source>A common sight is code which looks something like this:</source>
          <target state="translated">よく見かけるのは、こんな感じのコードです。</target>
        </trans-unit>
        <trans-unit id="7a1613d252216a78f3f6c4f13b80070f584c7ea5" translate="yes" xml:space="preserve">
          <source>A common value you might want would be just &quot;.&quot; for the current directory:</source>
          <target state="translated">一般的な値としては、カレントディレクトリの場合は&quot;.&quot;を指定するとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="0c241c23e5c55b1df65f14fa3926fd6466b90d17" translate="yes" xml:space="preserve">
          <source>A complete list of Perl's error messages and warnings with explanatory text can be found in &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;. You can also use the splain program (distributed with Perl) to explain the error messages:</source>
          <target state="translated">Perlのエラーメッセージと説明テキスト付きの警告の完全なリストは、&lt;a href=&quot;perldiag&quot;&gt;perldiagにあり&lt;/a&gt;ます。（Perlとともに配布されている）splainプログラムを使用して、エラーメッセージを説明することもできます。</target>
        </trans-unit>
        <trans-unit id="2766232819d1e10808eb2c0fa9745fbc9935b0e0" translate="yes" xml:space="preserve">
          <source>A complete list of blocks and their shortcuts is in &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;.</source>
          <target state="translated">ブロックとそのショートカットの完全なリストは、&lt;a href=&quot;perluniprops&quot;&gt;perlunipropsにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1c9c8e1e2ba56e67cb98e64490d656c0331322db" translate="yes" xml:space="preserve">
          <source>A complete list of models at the time the OS was built is in the file /usr/sam/lib/mo/sched.models. The first column corresponds to the last part of the output of the &quot;model&quot; command. The second column is the PA-RISC version and the third column is the exact chip type used. (Start browsing at the bottom to prevent confusion ;-)</source>
          <target state="translated">OSが構築された時点でのモデルの完全なリストは、/usr/sam/lib/mo/sched.modelsというファイルにあります。1列目は &quot;model &quot;コマンドの出力の最後の部分に対応しています。2列目はPA-RISCのバージョン、3列目は使用した正確なチップタイプです。(混乱を避けるために一番下から閲覧を開始してください。)</target>
        </trans-unit>
        <trans-unit id="57f247bd806924e603c825d46c359f392e5225bb" translate="yes" xml:space="preserve">
          <source>A complete list of scripts and their shortcuts is in &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;.</source>
          <target state="translated">スクリプトとそのショートカットの完全なリストは、&lt;a href=&quot;perluniprops&quot;&gt;perlunipropsにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="352eea5d492543a075b98638f01aabee71fa53f5" translate="yes" xml:space="preserve">
          <source>A complete thread tutorial could fill a book (and has, many times), but with what we've covered in this introduction, you should be well on your way to becoming a threaded Perl expert.</source>
          <target state="translated">スレッドの完全なチュートリアルは本一冊分になるかもしれませんが(これまでにも何度もありました)、このイントロダクションでカバーした内容を使えば、あなたはスレッドPerlのエキスパートになるための十分な道のりを歩むことができるはずです。</target>
        </trans-unit>
        <trans-unit id="018d8cf23f3e4a65b253a6e3de9afa4ba28bc385" translate="yes" xml:space="preserve">
          <source>A component of a &lt;b&gt;regular expression&lt;/b&gt; pattern.</source>
          <target state="translated">&lt;b&gt;正規表現&lt;/b&gt;パターンのコンポーネント。</target>
        </trans-unit>
        <trans-unit id="f5c9d218e3a29ce718317121d0020d3ccf6b9e88" translate="yes" xml:space="preserve">
          <source>A component of a &lt;b&gt;regular expression&lt;/b&gt; specifying how many times the foregoing &lt;b&gt;atom&lt;/b&gt; may occur.</source>
          <target state="translated">前述の&lt;b&gt;アトム&lt;/b&gt;が発生する回数を指定する&lt;b&gt;正規表現の&lt;/b&gt;コンポーネント。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ca17448c2b0615d183e89c2b8af18e1466ef0123" translate="yes" xml:space="preserve">
          <source>A component of a &lt;b&gt;regular expression&lt;/b&gt; that must be true for the pattern to match but does not necessarily match any characters itself. Often used specifically to mean a &lt;b&gt;zero-width&lt;/b&gt; assertion.</source>
          <target state="translated">パターンが一致するためにはtrueでなければならないが、必ずしも文字自体とは一致しない&lt;b&gt;正規表現の&lt;/b&gt;コンポーネント。&lt;b&gt;幅&lt;/b&gt;が&lt;b&gt;ゼロの&lt;/b&gt;アサーションを意味するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="e4b110fd2e9cb16d7f0633f61d623ac063cd7727" translate="yes" xml:space="preserve">
          <source>A comprehensive list of Perl-related mailing lists can be found at &lt;a href=&quot;http://lists.perl.org/&quot;&gt;http://lists.perl.org/&lt;/a&gt;</source>
          <target state="translated">Perl関連のメーリングリストの包括的なリストは、&lt;a href=&quot;http://lists.perl.org/&quot;&gt;http：//lists.perl.org/にあります。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6ffdc43a299a7177f53314c9b7e876aeb0c84ac8" translate="yes" xml:space="preserve">
          <source>A consequence of this is that &lt;b&gt;-M&lt;i&gt;MODULE&lt;/i&gt;=number&lt;/b&gt; never does a version check, unless &lt;code&gt;&lt;i&gt;MODULE&lt;/i&gt;::import()&lt;/code&gt; itself is set up to do a version check, which could happen for example if</source>
          <target state="translated">この結果、&lt;b&gt;-M &lt;i&gt;MODULE&lt;/i&gt; = number&lt;/b&gt;はバージョンチェックを実行しません。ただし、 &lt;code&gt;&lt;i&gt;MODULE&lt;/i&gt;::import()&lt;/code&gt; 自体がバージョンチェックを実行するように設定されている場合を除きます。</target>
        </trans-unit>
        <trans-unit id="350e3e899dba4b57e7486366f0fbf9264f9b61f7" translate="yes" xml:space="preserve">
          <source>A constant with a name in the list &lt;code&gt;STDIN STDOUT STDERR ARGV ARGVOUT
ENV INC SIG&lt;/code&gt; is not allowed anywhere but in package &lt;code&gt;main::&lt;/code&gt; , for technical reasons.</source>
          <target state="translated">リストに名前のある定数 &lt;code&gt;STDIN STDOUT STDERR ARGV ARGVOUT ENV INC SIG&lt;/code&gt; は、技術的な理由により、パッケージ &lt;code&gt;main::&lt;/code&gt; 以外では使用できません。</target>
        </trans-unit>
        <trans-unit id="78f90a10d8180ed5dc542d1b277136194356a682" translate="yes" xml:space="preserve">
          <source>A construct that performs something repeatedly, like a roller coaster.</source>
          <target state="translated">ジェットコースターのように、何かを繰り返し実行する構成要素。</target>
        </trans-unit>
        <trans-unit id="98c376c5464a7cbd0f7597422425141a29b3dc1e" translate="yes" xml:space="preserve">
          <source>A construct that sometimes looks like a function but really isn&amp;rsquo;t. Usually reserved for &lt;b&gt;lvalue&lt;/b&gt; modifiers like &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, for &lt;b&gt;context&lt;/b&gt; modifiers like &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt;, and for the pick-your-own-quotes constructs, &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y///&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数のように見えることもありますが、実際はそうではない構成体。通常 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; ような&lt;b&gt;lvalue&lt;/b&gt;修飾子、 &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; のような&lt;b&gt;コンテキスト&lt;/b&gt;修飾子、およびpick-your-own-quotesコンストラクト、 &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y///&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; 。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b8552f673941f3d1978946011be4253061336584" translate="yes" xml:space="preserve">
          <source>A contact email address for the author/maintainer</source>
          <target state="translated">作者/管理人の連絡先メールアドレス</target>
        </trans-unit>
        <trans-unit id="1e9afcf85fc0132156a56c6d8cb4ffccff6b369d" translate="yes" xml:space="preserve">
          <source>A convenience function which combines creating an object and calling &lt;code&gt;isa_ok()&lt;/code&gt; on that object.</source>
          <target state="translated">オブジェクトの作成とそのオブジェクトの &lt;code&gt;isa_ok()&lt;/code&gt; の呼び出しを組み合わせる便利な関数。</target>
        </trans-unit>
        <trans-unit id="53128330b7badc08928ea23290fdacf578eb391d" translate="yes" xml:space="preserve">
          <source>A convenience variable which is typically used with &lt;code&gt;SvPV&lt;/code&gt; when one doesn't care about the length of the string. It is usually more efficient to either declare a local variable and use that instead or to use the &lt;code&gt;SvPV_nolen&lt;/code&gt; macro.</source>
          <target state="translated">文字列の長さを気にしない場合に &lt;code&gt;SvPV&lt;/code&gt; で通常使用される便利な変数。通常、ローカル変数を宣言して代わりに使用するか、 &lt;code&gt;SvPV_nolen&lt;/code&gt; マクロを使用する方が効率的です。</target>
        </trans-unit>
        <trans-unit id="638f854b99669da73bce286ea189e697af8d4b5f" translate="yes" xml:space="preserve">
          <source>A convenient shortcut to operating on even-sized lists of pairs, this function returns a list of ARRAY references, each containing two items from the given list. It is a more efficient version of</source>
          <target state="translated">偶数サイズのペアのリストを操作するのに便利なショートカットで、この関数は、与えられたリストから2つの項目を含むARRAY参照のリストを返します。のより効率的なバージョンです。</target>
        </trans-unit>
        <trans-unit id="1166e931ea27a942799d52c7c1f3e445e7d6efa2" translate="yes" xml:space="preserve">
          <source>A convenient shortcut to operating on even-sized lists of pairs, this function returns a list of the the first values of each of the pairs in the given list. It is a more efficient version of</source>
          <target state="translated">偶数サイズのペアのリストを操作するのに便利なショートカットで、この関数は、与えられたリスト内の各ペアの最初の値のリストを返します。のより効率的なバージョンです。</target>
        </trans-unit>
        <trans-unit id="0dbcf107b79ffefab41fba2fbb5cf9a734cd1746" translate="yes" xml:space="preserve">
          <source>A convenient shortcut to operating on even-sized lists of pairs, this function returns a list of the the second values of each of the pairs in the given list. It is a more efficient version of</source>
          <target state="translated">偶数サイズのペアのリストを操作するのに便利なショートカットで,この関数は,与えられたリスト内の各ペアの2番目の値のリストを返します.のより効率的なバージョンです。</target>
        </trans-unit>
        <trans-unit id="77f68a02d61a77d7eed2d175da1b876e8aceace1" translate="yes" xml:space="preserve">
          <source>A convenient way to set up your tests. Call this and Test::Builder will print the appropriate headers and take the appropriate actions.</source>
          <target state="translated">テストを設定する便利な方法です。これを呼び出すと、Test::Builder が適切なヘッダを表示し、適切なアクションを実行します。</target>
        </trans-unit>
        <trans-unit id="d87e8f492879ce02bf236daf94692483d0fd4b5c" translate="yes" xml:space="preserve">
          <source>A conventional (not inside-out) implementation where an object is a hash that stores the field values, without support by &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; . This implementation doesn't allow arbitrary inheritance.</source>
          <target state="translated">&lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; によるサポートなしで、オブジェクトがフィールド値を格納するハッシュである従来の（裏返しではない）実装。この実装では、任意の継承は許可されていません。</target>
        </trans-unit>
        <trans-unit id="646b8162acfbdd090f426555f4c9a32ee73eeb01" translate="yes" xml:space="preserve">
          <source>A copy of IO::Scalar for Test::Builder</source>
          <target state="translated">Test::Builder用のIO::Scalarのコピー</target>
        </trans-unit>
        <trans-unit id="5a070156d8ac581b1ec13fda608b6d3f5d95a087" translate="yes" xml:space="preserve">
          <source>A copy of a Win* viewer is contained in the &quot;Just add OS/2 Warp&quot; package</source>
          <target state="translated">Win*ビューアのコピーは、&quot;Just add OS/2 Warp&quot; パッケージに含まれています。</target>
        </trans-unit>
        <trans-unit id="6e407ab7758af4150015ce0b8baf63576cf02a27" translate="yes" xml:space="preserve">
          <source>A copyright notice - see below.</source>
          <target state="translated">著作権表示-以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="d687cc7b81ffa630de399555f3a224dda7b56cfa" translate="yes" xml:space="preserve">
          <source>A correct CPAN version number is a floating point number with at least 2 digits after the decimal. You can test whether it conforms to CPAN by using</source>
          <target state="translated">正しいCPANバージョン番号とは、10進数の後に少なくとも2桁の数字を持つ浮動小数点数のことです。CPANに準拠しているかどうかは、以下の方法でテストできます。</target>
        </trans-unit>
        <trans-unit id="8295d6831975ca50ed9530db07dca19a25c715be" translate="yes" xml:space="preserve">
          <source>A count passed to Tpad to modify the padding applied to the output string. If $cnt is zero or one then the resulting string will be cached.</source>
          <target state="translated">出力文字列に適用されるパディングを変更するために Tpad に渡されるカウント。cnt が 0 あるいは 1 の場合は、結果の文字列がキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="3ca2814f3e720b9b1b346f0c76354ef75ff06f2d" translate="yes" xml:space="preserve">
          <source>A crude table of contents for the Perl manpage set is found in &lt;a href=&quot;http://search.cpan.org/perldoc/perltoc&quot;&gt;perltoc&lt;/a&gt;.</source>
          <target state="translated">Perlマンページセットの&lt;a href=&quot;http://search.cpan.org/perldoc/perltoc&quot;&gt;大まかな目次&lt;/a&gt;はperltocにあります。</target>
        </trans-unit>
        <trans-unit id="03adc2f14ebb3d0a7a9ba21528d13d42030133f9" translate="yes" xml:space="preserve">
          <source>A data debugging tool for the XS programmer</source>
          <target state="translated">XSプログラマのためのデータデバッグツール</target>
        </trans-unit>
        <trans-unit id="07e1664c3b50241d29a1670852c2daa101e50db7" translate="yes" xml:space="preserve">
          <source>A data repository. Instead of computing expensive answers several times, compute it once and save the result.</source>
          <target state="translated">データリポジトリです。高価な答えを何度も計算するのではなく、一度計算して結果を保存します。</target>
        </trans-unit>
        <trans-unit id="40b9a92df275c1cef5fb6a4e3d00cf2b3d4203b3" translate="yes" xml:space="preserve">
          <source>A data structure used internally by Perl for implementing associative arrays (hashes) efficiently. See also &lt;b&gt;bucket&lt;/b&gt;.</source>
          <target state="translated">連想配列（ハッシュ）を効率的に実装するためにPerlによって内部的に使用されるデータ構造。&lt;b&gt;バケット&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b6431d472e1b30028a75ba55229126e2e191ae3c" translate="yes" xml:space="preserve">
          <source>A declaration can be put anywhere a statement can, but has no effect on the execution of the primary sequence of statements: declarations all take effect at compile time. All declarations are typically put at the beginning or the end of the script. However, if you're using lexically-scoped private variables created with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our()&lt;/a&gt;&lt;/code&gt;, you'll have to make sure your format or subroutine definition is within the same block scope as the my if you expect to be able to access those private variables.</source>
          <target state="translated">宣言はステートメントのどこにでも置くことができますが、ステートメントの主要シーケンスの実行には影響しません。宣言はすべてコンパイル時に有効になります。すべての宣言は通常、スクリプトの最初または最後に置かれます。ただし、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our()&lt;/a&gt;&lt;/code&gt; で作成されたレキシカルスコープのプライベート変数を使用している場合は、フォーマットまたはサブルーチン定義がmyと同じブロックスコープ内にあることを確認する必要があります。これらのプライベート変数にアクセスできることを期待しています。</target>
        </trans-unit>
        <trans-unit id="753d1d91d799e4e070ffae305c67c5e3d698281a" translate="yes" xml:space="preserve">
          <source>A default hashing algorithm, which will be adequate for most applications, is built into Berkeley DB. If you do need to use your own hashing algorithm it is possible to write your own in Perl and have &lt;b&gt;DB_File&lt;/b&gt; use it instead.</source>
          <target state="translated">ほとんどのアプリケーションに適切なデフォルトのハッシュアルゴリズムがBerkeley DBに組み込まれています。独自のハッシュアルゴリズムを使用する必要がある場合は、Perlで独自のハッシュアルゴリズムを作成し、&lt;b&gt;DB_File&lt;/b&gt;で代わりに使用することができます。</target>
        </trans-unit>
        <trans-unit id="b9828da4e803d376a194bd30931557a328ae046c" translate="yes" xml:space="preserve">
          <source>A default site INSTALL.SKIP may be provided by setting then environment variable EU_INSTALL_SITE_SKIPFILE, this will only be used when there isn't a distribution specific INSTALL.SKIP. If the environment variable EU_INSTALL_IGNORE_SKIP is true then no install file filtering will be performed.</source>
          <target state="translated">デフォルトのINSTALL.SKIPサイトは、環境変数EU_INSTALL_SITE_SKIPFILEを設定することで提供されますが、これはディストリビューション固有のINSTALL.SKIPがない場合にのみ使用されます。環境変数 EU_INSTALL_IGNORE_SKIP が true の場合は、インストールファイルのフィルタリングは行われません。</target>
        </trans-unit>
        <trans-unit id="0e649d4a2c7d23eccbd6705217dd0baed80106ea" translate="yes" xml:space="preserve">
          <source>A deferred action like this:</source>
          <target state="translated">こんな感じで延期されたアクション。</target>
        </trans-unit>
        <trans-unit id="c7b7b32d1f43857ac978062d5529fcaa75b008c1" translate="yes" xml:space="preserve">
          <source>A description of how C types may be transformed to and from Perl types within an &lt;b&gt;extension&lt;/b&gt; module written in &lt;b&gt;XS&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;XSで&lt;/b&gt;記述された&lt;b&gt;拡張&lt;/b&gt;モジュール内で、Cの型がPerlの型との間でどのように変換されるかについての説明。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="152e62c7af6a3030011c43a7ed3a060f156647cc" translate="yes" xml:space="preserve">
          <source>A description of the callable function in each module</source>
          <target state="translated">各モジュールの呼び出し可能な関数の説明</target>
        </trans-unit>
        <trans-unit id="a361777f63c2dac8a5f187498445ea69ff2e5fd2" translate="yes" xml:space="preserve">
          <source>A description of the module/package/extension etc.</source>
          <target state="translated">モジュール/パッケージ/拡張機能などの説明。</target>
        </trans-unit>
        <trans-unit id="2d3ff2a56a13511ba72ba40a6fa6a2c401a75cdb" translate="yes" xml:space="preserve">
          <source>A detailed document on Encode and PerlIO</source>
          <target state="translated">EncodeとPerlIOの詳細ドキュメント</target>
        </trans-unit>
        <trans-unit id="6acb6151fda2f69cbd4a7ea5c8537d8c57875e5a" translate="yes" xml:space="preserve">
          <source>A device you can put things on the top of, and later take them back off in the opposite order in which you put them on. See &lt;b&gt;LIFO&lt;/b&gt;.</source>
          <target state="translated">物を上に置いたり、後で逆の順序で取り外したりできるデバイス。&lt;b&gt;LIFOを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ce6d3879a0b885e4f02b96959f6d870d8f5b1fa8" translate="yes" xml:space="preserve">
          <source>A different approach is to autoload seldom-used Perl code. See the AutoSplit and AutoLoader modules in the standard distribution for that. Or you could locate the bottleneck and think about writing just that part in C, the way we used to take bottlenecks in C code and write them in assembler. Similar to rewriting in C, modules that have critical sections can be written in C (for instance, the PDL module from CPAN).</source>
          <target state="translated">別のアプローチとしては、滅多に使われない Perl のコードをオートロードする方法があります。これについては、標準ディストリビューションの AutoSplit と AutoLoader モジュールを参照してください。あるいは、ボトルネックを見つけて、その部分だけをC言語で書くことを考えることもできます。C で書き換えるのと同じように、クリティカルな部分を持つモジュールは C で書くことができます (例えば、CPAN の PDL モジュールなど)。</target>
        </trans-unit>
        <trans-unit id="fd02787c52da0901c066d4ccff09232fd888e22e" translate="yes" xml:space="preserve">
          <source>A different type of portability issue arises when writing XS code: availability of a C compiler on the end-user's system. C brings with it its own portability issues, and writing XS code will expose you to some of those. Writing purely in Perl is an easier way to achieve portability.</source>
          <target state="translated">XSのコードを書く際には、エンドユーザのシステム上にC言語のコンパイラがあるかどうかという、別のタイプの移植性の問題が発生します。C言語にはそれなりの移植性の問題があり、XSコードを書くことでそのような問題に直面することになります。Perlのみで書くことで、より簡単に移植性を得ることができます。</target>
        </trans-unit>
        <trans-unit id="7549e9114a09a619af3acd4b50c3c4a53ce35871" translate="yes" xml:space="preserve">
          <source>A direct &lt;b&gt;connection&lt;/b&gt; that carries the output of one &lt;b&gt;process&lt;/b&gt; to the input of another without an intermediate temporary file. Once the pipe is set up, the two processes in question can read and write as if they were talking to a normal file, with some caveats.</source>
          <target state="translated">中間一時ファイルなしで、ある&lt;b&gt;プロセス&lt;/b&gt;の出力を別の&lt;b&gt;プロセス&lt;/b&gt;の入力に運ぶ直接&lt;b&gt;接続&lt;/b&gt;。パイプがセットアップされると、問題の2つのプロセスは、通常のファイルと通信しているかのように読み書きできますが、いくつかの注意事項があります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4b845b5f598804539b9d3429d1e0dde292769ef5" translate="yes" xml:space="preserve">
          <source>A distribution of modules to handle locale codes</source>
          <target state="translated">ロケールコードを扱うためのモジュールの配布</target>
        </trans-unit>
        <trans-unit id="3e6b7ccc64e5147f1acc2484c6d3b919c5bc2282" translate="yes" xml:space="preserve">
          <source>A document having more than one &quot;=encoding&quot; line should be considered an error. Pod processors may silently tolerate this if the not-first &quot;=encoding&quot; lines are just duplicates of the first one (e.g., if there's a &quot;=encoding utf8&quot; line, and later on another &quot;=encoding utf8&quot; line). But Pod processors should complain if there are contradictory &quot;=encoding&quot; lines in the same document (e.g., if there is a &quot;=encoding utf8&quot; early in the document and &quot;=encoding big5&quot; later). Pod processors that recognize BOMs may also complain if they see an &quot;=encoding&quot; line that contradicts the BOM (e.g., if a document with a UTF-16LE BOM has an &quot;=encoding shiftjis&quot; line).</source>
          <target state="translated">複数の &quot;=encoding&quot; 行がある文書はエラーとみなされるべきです。Podプロセッサは、最初の行ではない&quot;=encoding &quot;行が最初の行と重複しているだけであれば、これを黙認するかもしれません(例えば、&quot;=encoding utf8 &quot;行があって、その後に別の&quot;=encoding utf8 &quot;行があった場合など)。しかし、Podプロセッサは、同じ文書内に矛盾した&quot;=encoding &quot;行がある場合(例えば、文書の初期に&quot;=encoding utf8 &quot;行があり、後に&quot;=encoding big5 &quot;行がある場合)には文句を言うべきである。BOMを認識するポッドプロセッサは、BOMと矛盾する「=encoding」行を見た場合にも文句を言うかもしれません(例えば、UTF-16LE BOMを持つ文書に「=encoding shiftjis」行があった場合など)。</target>
        </trans-unit>
        <trans-unit id="4df78e410296e2b3f4b712de1ae484fe7cd130b2" translate="yes" xml:space="preserve">
          <source>A document type tag for the file. This option is not set by default.</source>
          <target state="translated">ファイルのドキュメントタイプタグ。このオプションはデフォルトでは設定されていません。</target>
        </trans-unit>
        <trans-unit id="d80c6e485dc27886043d9d72950290e87158018b" translate="yes" xml:space="preserve">
          <source>A domain of names. You needn&amp;rsquo;t worry about whether the names in one such domain have been used in another. See &lt;b&gt;package&lt;/b&gt;.</source>
          <target state="translated">名前のドメイン。そのようなドメインの名前が別のドメインで使用されているかどうかについて心配する必要はありません。&lt;b&gt;パッケージを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7598f11ff5b1103678a9d5639c3dfc75e6d4a5e6" translate="yes" xml:space="preserve">
          <source>A double precision floating point number. This typemap guarantees to return a variable cast to a &lt;code&gt;double&lt;/code&gt; .</source>
          <target state="translated">倍精度浮動小数点数。このタイプマップは、変数キャストを &lt;code&gt;double&lt;/code&gt; に返すことを保証します。</target>
        </trans-unit>
        <trans-unit id="102050331265d60ae1056cdc3a0d24fd9e06376e" translate="yes" xml:space="preserve">
          <source>A double-quoted, interpolated string.</source>
          <target state="translated">二重引用符で囲まれた補間された文字列。</target>
        </trans-unit>
        <trans-unit id="faeb399a5d08eaa739b873af03a2a402dd907834" translate="yes" xml:space="preserve">
          <source>A dummy layer which never exists on the layer stack. Instead when &quot;pushed&quot; it actually pops the stack removing itself, it then calls Binmode function table entry on all the layers in the stack - normally this (via PerlIOBase_binmode) removes any layers which do not have &lt;code&gt;PERLIO_K_RAW&lt;/code&gt; bit set. Layers can modify that behaviour by defining their own Binmode entry.</source>
          <target state="translated">レイヤースタックに決して存在しないダミーレイヤー。代わりに、「プッシュ」すると、スタックがポップされてスタック自体が削除され、スタック内のすべてのレイヤーでBinmode関数テーブルエントリが &lt;code&gt;PERLIO_K_RAW&lt;/code&gt; れます。通常、これは（PerlIOBase_binmodeを介して）PERLIO_K_RAWビットが設定されていないレイヤーを削除します。レイヤーは、独自のBinmodeエントリを定義することにより、その動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="f90a52847d42c09984d572f3b595cda347017f00" translate="yes" xml:space="preserve">
          <source>A failed match or changing the target string resets the position. If you don't want the position reset after failure to match, add the &lt;code&gt;//c&lt;/code&gt; , as in &lt;code&gt;/regex/gc&lt;/code&gt; .</source>
          <target state="translated">一致の失敗またはターゲット文字列の変更により、位置がリセットされます。一致の失敗後に位置をリセットしたくない場合は、 &lt;code&gt;/regex/gc&lt;/code&gt; のように &lt;code&gt;//c&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="d5efee2d4f79d8ba35cf758e77756920ee770903" translate="yes" xml:space="preserve">
          <source>A failed match or changing the target string resets the position. If you don't want the position reset after failure to match, add the &lt;code&gt;//c&lt;/code&gt; , as in &lt;code&gt;/regexp/gc&lt;/code&gt; . The current position in the string is associated with the string, not the regexp. This means that different strings have different positions and their respective positions can be set or read independently.</source>
          <target state="translated">一致の失敗またはターゲット文字列の変更により、位置がリセットされます。一致の失敗後に位置をリセットしたくない場合は、 &lt;code&gt;/regexp/gc&lt;/code&gt; のように &lt;code&gt;//c&lt;/code&gt; を追加します。文字列の現在の位置は、正規表現ではなく文字列に関連付けられています。つまり、文字列ごとに位置が異なり、それぞれの位置を個別に設定または読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="656a7d55b2753fa751b87d85db4a4654a61963c4" translate="yes" xml:space="preserve">
          <source>A fairly common feature in applications is to allow you to define a C function that will be called whenever something nasty occurs. What we would like is to be able to specify a Perl subroutine that will be called instead.</source>
          <target state="translated">アプリケーションでかなり一般的な機能は、何か厄介なことが起きたときに呼び出されるC関数を定義できるようにすることです。私たちが望むのは、代わりに呼び出されるPerlのサブルーチンを指定できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="e27669facce8e75680a82515ceb4a7dde4554488" translate="yes" xml:space="preserve">
          <source>A fancy computer science term meaning &amp;ldquo;to follow a &lt;b&gt;reference&lt;/b&gt; to what it points to&amp;rdquo;. The &amp;ldquo;de&amp;rdquo; part of it refers to the fact that you&amp;rsquo;re taking away one level of &lt;b&gt;indirection&lt;/b&gt;.</source>
          <target state="translated">「それが指しているものへの&lt;b&gt;言及&lt;/b&gt;に従うこと」を意味する、派手なコンピュータサイエンス用語。「de」の部分は、1レベルの&lt;b&gt;間接&lt;/b&gt;参照を取り除いていることを示しています。</target>
        </trans-unit>
        <trans-unit id="8f4dde098cc45c330d3e8fa85a502fc0eae6cde3" translate="yes" xml:space="preserve">
          <source>A fancy kind of interlock that prevents multiple &lt;b&gt;threads&lt;/b&gt; or &lt;b&gt;processes&lt;/b&gt; from using up the same resources simultaneously.</source>
          <target state="translated">複数の&lt;b&gt;スレッド&lt;/b&gt;または&lt;b&gt;プロセス&lt;/b&gt;が同じリソースを同時に使い果たすのを防ぐ、豪華な種類のインターロック。</target>
        </trans-unit>
        <trans-unit id="2f52178a4e9cc243237404e962bb98cf1d11d03e" translate="yes" xml:space="preserve">
          <source>A fancy term for an error. See &lt;b&gt;fatal error&lt;/b&gt;.</source>
          <target state="translated">エラーの派手な用語。&lt;b&gt;致命的なエラーを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d130552cd3247973054cf88d786bc01b68b3a6e5" translate="yes" xml:space="preserve">
          <source>A fatal error will be thrown if the Compress::Zlib module is not available.</source>
          <target state="translated">Compress::Zlib モジュールが利用できない場合、致命的なエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="c1f172aa731045204a1719d56bb2cc8625060274" translate="yes" xml:space="preserve">
          <source>A fatal error will be thrown if:</source>
          <target state="translated">の場合、致命的なエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="206dcfa56d21a53d3ca90835f2da1335f0ce9141" translate="yes" xml:space="preserve">
          <source>A feature of &lt;b&gt;operator overloading&lt;/b&gt; of &lt;b&gt;objects&lt;/b&gt;, whereby the behavior of certain &lt;b&gt;operators&lt;/b&gt; can be reasonably deduced using more fundamental operators. This assumes that the overloaded operators will often have the same relationships as the regular operators. See Camel chapter 13, &amp;ldquo;Overloading&amp;rdquo;.</source>
          <target state="translated">&lt;b&gt;オブジェクト&lt;/b&gt;の&lt;b&gt;演算子のオーバーロード&lt;/b&gt;の機能。これにより、特定の&lt;b&gt;演算子&lt;/b&gt;の動作を、より基本的な演算子を使用して合理的に推定できます。これは、オーバーロードされたオペレーターが通常のオペレーターと同じ関係を持っていることが多いと想定しています。Camelの第13章「オーバーロード」を参照してください。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="96f7456dc10c0f5e5c69de568de641b9d361467e" translate="yes" xml:space="preserve">
          <source>A few dir-vs-file optimizations result in glob importation being 10 times faster than using perlglob.exe, and using perlglob.bat is only twice as slow as perlglob.exe (GSAR 28-MAY-97)</source>
          <target state="translated">いくつかのdir-vs-fileの最適化により、globのインポートはperlglob.exeを使用するよりも10倍速くなり、perlglob.batを使用するとperlglob.exeの2倍しか遅くなりませんでした(GSAR 28-MAY-97)。</target>
        </trans-unit>
        <trans-unit id="29b977997a9e174d5b0509df5c6aa92021e1d1e4" translate="yes" xml:space="preserve">
          <source>A few example globmaps</source>
          <target state="translated">いくつかのグロブマップの例</target>
        </trans-unit>
        <trans-unit id="4079515a56f3376aa599af18d3ce02d4fa762708" translate="yes" xml:space="preserve">
          <source>A few functions are not implemented because they are C specific. If you attempt to call these, they will print a message telling you that they aren't implemented, and suggest using the Perl equivalent, should one exist. For example, trying to access the &lt;code&gt;setjmp()&lt;/code&gt; call will elicit the message &quot;&lt;code&gt;setjmp() is C-specific: &lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {} instead&lt;/code&gt; &quot;.</source>
          <target state="translated">一部の関数はC固有であるため、実装されていません。これらを呼び出そうとすると、実装されていないことを伝えるメッセージが表示され、存在する場合は同等のPerlを使用するよう提案されます。たとえば、 &lt;code&gt;setjmp()&lt;/code&gt; コールにアクセスしようとすると、「 &lt;code&gt;setjmp() is C-specific: &lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {} instead&lt;/code&gt; てください」というメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="dcd9feea0227978a722652bf64b2da3e239d9119" translate="yes" xml:space="preserve">
          <source>A few functions take no arguments at all, and therefore work as neither unary nor list operators. These include such functions as &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/endpwent&quot;&gt;endpwent&lt;/a&gt;&lt;/code&gt;. For example, &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time+86_400&lt;/a&gt;&lt;/code&gt; always means &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;() + 86_400&lt;/code&gt; .</source>
          <target state="translated">いくつかの関数は引数を取らないため、単項演算子としてもリスト演算子としても機能しません。これらには、 &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/endpwent&quot;&gt;endpwent&lt;/a&gt;&lt;/code&gt; などの関数が含まれます。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time+86_400&lt;/a&gt;&lt;/code&gt; は常に &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;() + 86_400&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="18d4ec4509605bbb34d201f389b34f426f595148" translate="yes" xml:space="preserve">
          <source>A few general-purpose tools are shipped with perl, mostly because they came along modules included in the perl distribution.</source>
          <target state="translated">いくつかの汎用ツールはperlに同梱されていますが、そのほとんどはperlのディストリビューションに含まれているモジュールと一緒に来たからです。</target>
        </trans-unit>
        <trans-unit id="6c69ec260ad056301204f0c643b8c2696665eb7e" translate="yes" xml:space="preserve">
          <source>A few methods are provided to do the &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt; Your::Module tests =&amp;gt; 23&lt;/code&gt; part for you.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt; Your::Module tests =&amp;gt; 23&lt;/code&gt; パートを&lt;a href=&quot;../../functions/use&quot;&gt;使用する&lt;/a&gt;ためにいくつかのメソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="aa6d4c905f963b3015f8686516337be08979225b" translate="yes" xml:space="preserve">
          <source>A few more:</source>
          <target state="translated">もう少しだ</target>
        </trans-unit>
        <trans-unit id="6eb9b3626d6aeb9e84350d1131ed3080f1617e37" translate="yes" xml:space="preserve">
          <source>A few of the options need extra discussion here. When used, the C equivalent of the keys &lt;code&gt;hash&lt;/code&gt; , &lt;code&gt;compare&lt;/code&gt; and &lt;code&gt;prefix&lt;/code&gt; store pointers to C functions. In &lt;b&gt;DB_File&lt;/b&gt; these keys are used to store references to Perl subs. Below are templates for each of the subs:</source>
          <target state="translated">オプションのいくつかは、ここで追加の議論が必要です。使用すると、Cのキーに相当するものは、C関数へのストアポインターを &lt;code&gt;hash&lt;/code&gt; 、 &lt;code&gt;compare&lt;/code&gt; 、および &lt;code&gt;prefix&lt;/code&gt; ます。で&lt;b&gt;DB_Fileは&lt;/b&gt;これらのキーは、Perlサブルーチンへの参照を格納するために使用されています。以下は、各サブのテンプレートです。</target>
        </trans-unit>
        <trans-unit id="c283830e9199de7049f4c9e9b8481f0f4f024e4c" translate="yes" xml:space="preserve">
          <source>A few of these variables are considered &quot;read-only&quot;. This means that if you try to assign to this variable, either directly or indirectly through a reference, you'll raise a run-time exception.</source>
          <target state="translated">これらの変数のいくつかは、&quot;読み取り専用 &quot;と考えられています。これは、参照を介して直接または間接的にこの変数に代入しようとすると、ランタイム例外が発生することを意味します。</target>
        </trans-unit>
        <trans-unit id="8090aa705fafbfcbe40caa6a39d4969f2ffa75f0" translate="yes" xml:space="preserve">
          <source>A few points to note about this example:</source>
          <target state="translated">この例について、いくつかの注意点があります。</target>
        </trans-unit>
        <trans-unit id="5940abb3e966e0e3ab0e5074976963a86d9bf337" translate="yes" xml:space="preserve">
          <source>A few special SV heads are not allocated from an arena, but are instead directly created in the interpreter structure, eg PL_sv_undef. The size of arenas can be changed from the default by setting PERL_ARENA_SIZE appropriately at compile time.</source>
          <target state="translated">いくつかの特別な SV ヘッドはアリーナから割り当てられるのではなく、代わりに PL_sv_undef などのインタプリタ構造体で直接作成されます。アリーナのサイズは、コンパイル時にPERL_ARENA_SIZEを適切に設定することで、デフォルトから変更することができます。</target>
        </trans-unit>
        <trans-unit id="99bc1dc13c67f6154f44d88464d4083e5ca5c87d" translate="yes" xml:space="preserve">
          <source>A fifo is convenient when you want to connect a process to an unrelated one. When you open a fifo, the program will block until there's something on the other end.</source>
          <target state="translated">あるプロセスを関係のないプロセスに接続したいときに便利なのが fifo です。fifo を開くと、プログラムは反対側に何かがあるまでブロックされます。</target>
        </trans-unit>
        <trans-unit id="0034cae2f50c204559522cfff1ceebd6deb989fa" translate="yes" xml:space="preserve">
          <source>A file containing certain required definitions that you must include &amp;ldquo;ahead&amp;rdquo; of the rest of your program to do certain obscure operations. A C header file has a</source>
          <target state="translated">特定のあいまいな操作を行うために、プログラムの残りの部分の「前に」含める必要がある特定の必要な定義を含むファイル。ACヘッダーファイルには</target>
        </trans-unit>
        <trans-unit id="731000aad647991373ca7dfb79bf96ee23280bc2" translate="yes" xml:space="preserve">
          <source>A file full of regular expressions to exclude when using 'make manifest' to generate the MANIFEST. These regular expressions are checked against each file path found in the distribution (so you're matching against &quot;t/foo.t&quot; not &quot;foo.t&quot;).</source>
          <target state="translated">make manifest' を使用して MANIFEST を生成する際に除外する正規表現のファイルです。これらの正規表現は、ディストリビューション内の各ファイルパスと照合されます (つまり、&quot;foo.t&quot; ではなく &quot;t/foo.t&quot; と照合していることになります)。</target>
        </trans-unit>
        <trans-unit id="a17865a45ecaf1ad63bbdbb5dd8742ba69a071dc" translate="yes" xml:space="preserve">
          <source>A file in XS format starts with a C language section which goes until the first &lt;code&gt;MODULE =&lt;/code&gt; directive. Other XS directives and XSUB definitions may follow this line. The &quot;language&quot; used in this part of the file is usually referred to as the XS language. &lt;b&gt;xsubpp&lt;/b&gt; recognizes and skips POD (see &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;) in both the C and XS language sections, which allows the XS file to contain embedded documentation.</source>
          <target state="translated">XS形式のファイルは、最初の &lt;code&gt;MODULE =&lt;/code&gt; ディレクティブまで続くC言語セクションで始まります。他のXSディレクティブとXSUB定義がこの行に続く場合があります。ファイルのこの部分で使用される「言語」は、通常、XS言語と呼ばれます。&lt;b&gt;xsubpp&lt;/b&gt;は、C言語セクションとXS言語セクションの両方でPOD（&lt;a href=&quot;perlpod&quot;&gt;perlpodを&lt;/a&gt;参照）を認識してスキップします。これにより、XSファイルに埋め込みドキュメントを含めることができます。</target>
        </trans-unit>
        <trans-unit id="51841b4270c479a7cdbc29c3d5f66446edf393a3" translate="yes" xml:space="preserve">
          <source>A file test, where X is one of the letters listed below. This unary operator takes one argument, either a filename, a filehandle, or a dirhandle, and tests the associated file to see if something is true about it. If the argument is omitted, tests &lt;code&gt;$_&lt;/code&gt; , except for &lt;code&gt;-t&lt;/code&gt; , which tests STDIN. Unless otherwise documented, it returns &lt;code&gt;1&lt;/code&gt; for true and &lt;code&gt;''&lt;/code&gt; for false. If the file doesn't exist or can't be examined, it returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and sets &lt;code&gt;$!&lt;/code&gt; (errno). Despite the funny names, precedence is the same as any other named unary operator. The operator may be any of:</source>
          <target state="translated">ファイルテスト。Xは以下にリストされた文字の1つです。この単項演算子は、ファイル名、ファイルハンドル、またはディレクトリハンドルのいずれか1つの引数を取り、関連するファイルをテストして、それについて何かが真であるかどうかを確認します。引数が省略された場合、STDINをテストする &lt;code&gt;-t&lt;/code&gt; を除いて、 &lt;code&gt;$_&lt;/code&gt; をテストします。特に記載がない限り、trueの場合は &lt;code&gt;1&lt;/code&gt; 、falseの場合は &lt;code&gt;''&lt;/code&gt; を返します。ファイルが存在しないか検査できない場合は、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。（errno）。変な名前にもかかわらず、優先順位は他の名前付き単項演算子と同じです。演算子は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="1c04b0088e704fdeb38d1fecd8838e16e9a29f09" translate="yes" xml:space="preserve">
          <source>A file test, where X is one of the letters listed below. This unary operator takes one argument, either a filename, a filehandle, or a dirhandle, and tests the associated file to see if something is true about it. If the argument is omitted, tests &lt;code&gt;$_&lt;/code&gt; , except for &lt;code&gt;-t&lt;/code&gt; , which tests STDIN. Unless otherwise documented, it returns &lt;code&gt;1&lt;/code&gt; for true and &lt;code&gt;''&lt;/code&gt; for false. If the file doesn't exist or can't be examined, it returns &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and sets &lt;code&gt;$!&lt;/code&gt; (errno). Despite the funny names, precedence is the same as any other named unary operator. The operator may be any of:</source>
          <target state="translated">ファイルテスト。Xは以下にリストされた文字の1つです。この単項演算子は、ファイル名、ファイルハンドル、またはディレクトリハンドルのいずれか1つの引数を取り、関連するファイルをテストして、それについて何かが真であるかどうかを確認します。引数が省略された場合、STDINをテストする &lt;code&gt;-t&lt;/code&gt; を除いて、 &lt;code&gt;$_&lt;/code&gt; をテストします。特に記載がない限り、trueの場合は &lt;code&gt;1&lt;/code&gt; 、falseの場合は &lt;code&gt;''&lt;/code&gt; を返します。ファイルが存在しないか検査できない場合は、 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。（errno）。変な名前にもかかわらず、優先順位は他の名前付き単項演算子と同じです。演算子は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="85304934df21007f1e6dacead79952e515167d3e" translate="yes" xml:space="preserve">
          <source>A file that controls the compilation of a program. Perl programs don&amp;rsquo;t usually need a &lt;b&gt;Makefile&lt;/b&gt; because the Perl compiler has plenty of self-control.</source>
          <target state="translated">プログラムのコンパイルを制御するファイル。Perl コンパイラには十分な自己制御機能があるため、Perlプログラムは通常&lt;b&gt;Makefileを&lt;/b&gt;必要としません。</target>
        </trans-unit>
        <trans-unit id="0ef0646f1946010fd71391d670cdd7f3f2cde9ba" translate="yes" xml:space="preserve">
          <source>A filehandle for catching standard output.</source>
          <target state="translated">標準出力をキャッチするためのファイルハンドル。</target>
        </trans-unit>
        <trans-unit id="dddbea875ae221e63e546196812256d3f13f54a9" translate="yes" xml:space="preserve">
          <source>A filehandle is opened but the file operations are performed &quot;in-memory&quot; on a scalar variable. All the normal file operations can be performed on the handle. The scalar is considered a stream of bytes. Currently fileno($fh) returns -1.</source>
          <target state="translated">ファイルハンドルは開かれますが、ファイル操作はスカラ変数上で「インメモリ」で実行されます。通常のファイル操作はすべてハンドル上で実行できる。スカラーはバイトのストリームとみなされます。現在のところ fileno($fh)は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="2ead9b8d6ddfb62275b7ebf2bc90be0c9e8b9ced" translate="yes" xml:space="preserve">
          <source>A filehandle that should read or write UTF-8</source>
          <target state="translated">UTF-8 を読み書きするファイルハンドル</target>
        </trans-unit>
        <trans-unit id="c2227149e71cd22222d8c43a50c19d04660c6c2c" translate="yes" xml:space="preserve">
          <source>A filehandle to write the C code to. If not given, then</source>
          <target state="translated">C言語のコードを書き込むファイルハンドル。与えられなかった場合は</target>
        </trans-unit>
        <trans-unit id="51118efef78727e7eccbadc9f314bd7f4afcf597" translate="yes" xml:space="preserve">
          <source>A filehandle to write the XS code to. If not given, then</source>
          <target state="translated">XSコードを書き込むファイルハンドル。指定されていない場合は</target>
        </trans-unit>
        <trans-unit id="94e7ed7be4ff1750888b6ea45dc5effd2b37d94d" translate="yes" xml:space="preserve">
          <source>A filehandle, from which the file will be read.</source>
          <target state="translated">ファイルが読み込まれるファイルハンドル。</target>
        </trans-unit>
        <trans-unit id="c34303a3b313a718df7cf274a0efcf1c25994c0c" translate="yes" xml:space="preserve">
          <source>A filetest operator, with exactly 4 exceptions: &lt;code&gt;-s&lt;/code&gt; , &lt;code&gt;-M&lt;/code&gt; , &lt;code&gt;-A&lt;/code&gt; , and &lt;code&gt;-C&lt;/code&gt; , as these return numerical values, not boolean ones. The &lt;code&gt;-z&lt;/code&gt; filetest operator is not included in the exception list.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 、 &lt;code&gt;-M&lt;/code&gt; 、 &lt;code&gt;-A&lt;/code&gt; 、 &lt;code&gt;-C&lt;/code&gt; の 4つの例外を除いて、filetest演算子。ブール値ではなく数値を返します。 &lt;code&gt;-z&lt;/code&gt; ファイルテスト演算子が例外リストに含まれていません。</target>
        </trans-unit>
        <trans-unit id="571b7a68e22aaaa36cb39947748347ab43ae89aa" translate="yes" xml:space="preserve">
          <source>A filter program, in the traditional Unix sense (input from stdin, output to stdout) that is passed on each .pm file during the build (in the pm_to_blib() phase). It is empty by default, meaning no filtering is done.</source>
          <target state="translated">伝統的な Unix の意味でのフィルタプログラム (stdin からの入力、stdout への出力)で、ビルド中に (pm_to_blib()フェーズで)各 .pm ファイルに渡されます。デフォルトでは空で、フィルタリングは行われません。</target>
        </trans-unit>
        <trans-unit id="fb35ae131a8a2012ab4bde2210fbfdcbd7023aa3" translate="yes" xml:space="preserve">
          <source>A fix for Proc::ProcessTable is to edit Makefile to explicitly remove the largefile flags from the ones MakeMaker picks up from Config.pm. This will result in Proc::ProcessTable being built under the correct environment. Everything should then be OK as long as Proc::ProcessTable doesn't try to share off_t's with the rest of perl, or if it does they should be explicitly specified as off64_t.</source>
          <target state="translated">Proc::ProcessTable の修正は、Makefile を編集して、MakeMaker が Config.pm から取得したものから largefile フラグを明示的に削除することです。これにより、Proc::ProcessTable は正しい環境でビルドされるようになります。Proc::ProcessTable が off_t を他の perl と共有しようとしない限り、全てが問題ないはずです。もし共有するならば、明示的に off64_t として指定してください。</target>
        </trans-unit>
        <trans-unit id="a9d22545c3578b64eb5fa290d40cfb8cd3124e35" translate="yes" xml:space="preserve">
          <source>A fix for that problem is scheduled to be released in the following levels of AIX, all of which should be coming out in the 4th quarter of 2009:</source>
          <target state="translated">この問題の修正プログラムは、以下のレベルのAIXでリリースされる予定で、2009年の第4四半期にはすべてリリースされるはずです。</target>
        </trans-unit>
        <trans-unit id="fbcd311c30c802b9eee4a011f2523c74bbb4eeb7" translate="yes" xml:space="preserve">
          <source>A fixed length thing, given as a [pointer, length] pair. If you know the length of a string at compile time you may use this instead of</source>
          <target state="translated">固定長のもので、[pointer,length]のペアとして与えられます。コンパイル時に文字列の長さがわかっている場合は</target>
        </trans-unit>
        <trans-unit id="2dd9070969808d13493b31f8533aee2df5f82471" translate="yes" xml:space="preserve">
          <source>A fixed number of digits before (positive) or after (negative) the decimal point. For example, 123.45 has a precision of -2. 0 means an integer like 123 (or 120). A precision of 2 means two digits to the left of the decimal point are zero, so 123 with P = 1 becomes 120. Note that numbers with zeros before the decimal point may have different precisions, because 1200 can have p = 0, 1 or 2 (depending on what the initial value was). It could also have p &amp;lt; 0, when the digits after the decimal point are zero.</source>
          <target state="translated">小数点の前（正）または後（負）の固定桁数。たとえば、123.45の精度は-2です。0は123（または120）のような整数を意味します。精度2は、小数点の左側の2桁がゼロであることを意味します。したがって、P = 1の123は120になります。1200はp = 0、1または2（初期値に依存）。小数点以下の桁がゼロの場合、p &amp;lt;0になることもあります。</target>
        </trans-unit>
        <trans-unit id="27aa36567c7de687c1256c668f8713e83fe0a789" translate="yes" xml:space="preserve">
          <source>A flag for whether item 3 (if present) is a URL (like &quot;&lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt;&quot; is), in which case there should be no section attribute; a Pod name (like &quot;perldoc&quot; and &quot;Getopt::Std&quot; are); or possibly a man page name (like &quot;crontab(5)&quot; is).</source>
          <target state="translated">アイテム3（存在する場合）がURL（「&lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt;」など）かどうかを示すフラグ。この場合、セクション属性はありません。ポッド名（「perldoc」や「Getopt :: Std」など）。または、おそらく「crontab（5）」のようなマニュアルページ名です。</target>
        </trans-unit>
        <trans-unit id="aa81fd53ffda939e60f21a6a48bc3fd1ecb33421" translate="yes" xml:space="preserve">
          <source>A floating point number potentially has a sign, an integral part, a decimal point, a fractional part, and an exponent. One or more of these parts is optional, so we need to check out the different possibilities. Floating point numbers which are in proper form include 123., 0.345, .34, -1e6, and 25.4E-72. As with integers, the sign out front is completely optional and can be matched by &lt;code&gt;[+-]?&lt;/code&gt;. We can see that if there is no exponent, floating point numbers must have a decimal point, otherwise they are integers. We might be tempted to model these with &lt;code&gt;\d*\.\d*&lt;/code&gt;, but this would also match just a single decimal point, which is not a number. So the three cases of floating point number without exponent are</source>
          <target state="translated">浮動小数点数には、符号、整数部、小数点、小数部、および指数が含まれる可能性があります。これらのパーツの1つ以上はオプションであるため、さまざまな可能性を確認する必要があります。適切な形式の浮動小数点数には、123.、0.345、.34、-1e6、および25.4E-72が含まれます。整数の場合と同様に、サインアウトフロントは完全にオプションであり、 &lt;code&gt;[+-]?&lt;/code&gt; 。指数がない場合、浮動小数点数には小数点が必要です。それ以外の場合、整数です。これらを &lt;code&gt;\d*\.\d*&lt;/code&gt; でモデル化したくなるかもしれませんが、これは、数値ではない単一の小数点にも一致します。したがって、指数のない浮動小数点数の3つのケースは</target>
        </trans-unit>
        <trans-unit id="ff8a1f9e295a3b368fdb0bcb2f6682d3f1a7706d" translate="yes" xml:space="preserve">
          <source>A floating point number. This typemap guarantees to return a variable cast to a &lt;code&gt;float&lt;/code&gt; .</source>
          <target state="translated">浮動小数点数。このタイプマップは、変数キャストを &lt;code&gt;float&lt;/code&gt; に返すことを保証します。</target>
        </trans-unit>
        <trans-unit id="cb62089bcb14b38f0a60a1ce278c6aa2cfaf6aec" translate="yes" xml:space="preserve">
          <source>A flow of data into or out of a process as a steady sequence of bytes or characters, without the appearance of being broken up into packets. This is a kind of &lt;b&gt;interface&lt;/b&gt;&amp;mdash;the underlying &lt;b&gt;implementation&lt;/b&gt; may well break your data up into separate packets for delivery, but this is hidden from you.</source>
          <target state="translated">パケットに分割されているように見えることのない、バイトまたは文字の安定したシーケンスとしてプロセスに出入りするデータのフロー。これは一種の&lt;b&gt;インターフェースです。&lt;/b&gt;基盤となる&lt;b&gt;実装&lt;/b&gt;は、データを個別のパケットに分割して配信&lt;b&gt;する&lt;/b&gt;可能性があり&lt;b&gt;ます&lt;/b&gt;が、これはユーザーには見えません。</target>
        </trans-unit>
        <trans-unit id="f7f93ab55d0cd5dedac331be7a34ca8ef2c56a43" translate="yes" xml:space="preserve">
          <source>A form name &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; accepts will be applied as &lt;code&gt;$normalization_form&lt;/code&gt; . Acceptable names include &lt;code&gt;'NFD'&lt;/code&gt; , &lt;code&gt;'NFC'&lt;/code&gt; , &lt;code&gt;'NFKD'&lt;/code&gt; , and &lt;code&gt;'NFKC'&lt;/code&gt; . See &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; for detail. If omitted, &lt;code&gt;'NFD'&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; 受け入れるフォーム名は、 &lt;code&gt;$normalization_form&lt;/code&gt; として適用されます。許容される名前には、 &lt;code&gt;'NFD'&lt;/code&gt; 、 &lt;code&gt;'NFC'&lt;/code&gt; 、 &lt;code&gt;'NFKD'&lt;/code&gt; 、および &lt;code&gt;'NFKC'&lt;/code&gt; ます。詳細については、 &lt;code&gt;Unicode::Normalize::normalize()&lt;/code&gt; を参照してください。省略した場合、 &lt;code&gt;'NFD'&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="c49b8a933b39ce175d6f4d01ed275b88dda586c3" translate="yes" xml:space="preserve">
          <source>A form of &lt;b&gt;scalar context&lt;/b&gt; in which an &lt;b&gt;expression&lt;/b&gt; is not expected to return any &lt;b&gt;value&lt;/b&gt; at all and is evaluated for its &lt;b&gt;side effects&lt;/b&gt; alone.</source>
          <target state="translated">形態&lt;b&gt;スカラコンテキスト&lt;/b&gt;た&lt;b&gt;発現は&lt;/b&gt;任意返すことが期待されていない&lt;b&gt;値を&lt;/b&gt;、すべてで、そのために評価された&lt;b&gt;副作用&lt;/b&gt;のみ。</target>
        </trans-unit>
        <trans-unit id="95b8b92c738006a6a5118bef738de47b796e9ea2" translate="yes" xml:space="preserve">
          <source>A formal grammar would look similar to the following:</source>
          <target state="translated">フォーマルな文法は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8f6424f6bb5e3764fd5434bcd18cd75bdd7582fd" translate="yes" xml:space="preserve">
          <source>A format name of &quot;comment&quot; is common for just making notes (presumably to yourself) that won't appear in any formatted version of the Pod document:</source>
          <target state="translated">&quot;comment &quot;というフォーマット名は、Podドキュメントのどのフォーマット版にも表示されないような(おそらく自分自身に対して)メモをするだけの場合によく使われます。</target>
        </trans-unit>
        <trans-unit id="d26b5fa96c287794c375f977fd86d1fe4bad1833" translate="yes" xml:space="preserve">
          <source>A formatting code starts with a capital letter (just US-ASCII [A-Z]) followed by a &quot;&amp;lt;&quot;, any number of characters, and ending with the first matching &quot;&amp;gt;&quot;. Examples:</source>
          <target state="translated">書式設定コードは大文字（US-ASCII [AZ]のみ）で始まり、その後に &quot;&amp;lt;&quot;、任意の数の文字が続き、最初に一致する &quot;&amp;gt;&quot;で終わります。例：</target>
        </trans-unit>
        <trans-unit id="e1ebaf29b6e50a9147fa41854529f9f91464bbca" translate="yes" xml:space="preserve">
          <source>A formatting code starts with a capital letter (just US-ASCII [A-Z]) followed by two or more &quot;&amp;lt;&quot;'s, one or more whitespace characters, any number of characters, one or more whitespace characters, and ending with the first matching sequence of two or more &quot;&amp;gt;&quot;'s, where the number of &quot;&amp;gt;&quot;'s equals the number of &quot;&amp;lt;&quot;'s in the opening of this formatting code. Examples:</source>
          <target state="translated">書式設定コードは大文字（US-ASCII [AZ]のみ）で始まり、2つ以上の「&amp;lt;」、1つ以上の空白文字、任意の数の文字、1つ以上の空白文字が続き、最初の文字で終わります2つ以上の &quot;&amp;gt;&quot;の一致するシーケンス。ここで、 &quot;&amp;gt;&quot;の数は、このフォーマットコードの最初の &quot;&amp;lt;&quot;の数と同じです。例：</target>
        </trans-unit>
        <trans-unit id="ee13838be926e942481224190d1b48d665a53c86" translate="yes" xml:space="preserve">
          <source>A free perl5-based PERL.NLM for Novell Netware is available in precompiled binary and source code form from &lt;a href=&quot;http://www.novell.com/&quot;&gt;http://www.novell.com/&lt;/a&gt; as well as from CPAN.</source>
          <target state="translated">Novell Netware用の無料のperl5ベースのPERL.NLMは、&lt;a href=&quot;http://www.novell.com/&quot;&gt;http：&lt;/a&gt; //www.novell.com/およびCPAN から、コンパイル済みのバイナリおよびソースコード形式で入手できます。</target>
        </trans-unit>
        <trans-unit id="601ccb979c895092a89a9db855c8bb290abdfbb7" translate="yes" xml:space="preserve">
          <source>A from scratch implementation of buffering for PerlIO. Provides fast access to the buffer for &lt;code&gt;sv_gets&lt;/code&gt; which implements perl's readline/&amp;lt;&amp;gt; and in general attempts to minimize data copying.</source>
          <target state="translated">PerlIOのバッファリングのゼロからの実装。perlのreadline / &amp;lt;&amp;gt;を実装する &lt;code&gt;sv_gets&lt;/code&gt; のバッファーへの高速アクセスを提供し、一般にデータのコピーを最小限に抑えようとします。</target>
        </trans-unit>
        <trans-unit id="0f062561102eb36fb52de67c711e92bb30c79c71" translate="yes" xml:space="preserve">
          <source>A full commandline to run via &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt;. During execution, the environment variable PERL is set to $^X (but with an absolute path). If &lt;code&gt;commandline&lt;/code&gt; is specified, &lt;code&gt;args&lt;/code&gt; is not used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; を介して実行する完全なコマンドライン。実行中、環境変数PERLは$ ^ Xに設定されます（ただし絶対パスが使用されます）。 &lt;code&gt;commandline&lt;/code&gt; が指定されている場合、 &lt;code&gt;args&lt;/code&gt; は使用されません。</target>
        </trans-unit>
        <trans-unit id="14cec31abd2e629547d353d78977abf26c0ffa5f" translate="yes" xml:space="preserve">
          <source>A full set of HTML documentation is installed, so you should be able to use it if you have a web browser installed on your system.</source>
          <target state="translated">HTMLドキュメントのフルセットがインストールされているので、システムにWebブラウザがインストールされていれば利用できるはずです。</target>
        </trans-unit>
        <trans-unit id="6a2c1a54fe4430e99127181c7879f97150ac83b4" translate="yes" xml:space="preserve">
          <source>A fully qualified filename such as</source>
          <target state="translated">のような完全に修飾されたファイル名</target>
        </trans-unit>
        <trans-unit id="66350a7ced5e0598bbaa01d95aa21c1aa8b64d66" translate="yes" xml:space="preserve">
          <source>A function named &lt;code&gt;new&lt;/code&gt; must not be explicitly defined in a class created by &lt;code&gt;struct&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; という名前の関数は、 &lt;code&gt;struct&lt;/code&gt; によって作成されたクラスで明示的に定義してはなりません。</target>
        </trans-unit>
        <trans-unit id="2945149f02dd35ba51bde27d2145bb414391b9dd" translate="yes" xml:space="preserve">
          <source>A function returning a single scalar with &lt;code&gt;#define&lt;/code&gt; definitions for the constants used internally between the generated C and XS functions.</source>
          <target state="translated">生成されたC関数とXS関数の間で内部的に使用される定数の &lt;code&gt;#define&lt;/code&gt; 定義を持つ単一のスカラーを返す関数。</target>
        </trans-unit>
        <trans-unit id="b69855856bd43ed93ca10429f84d959193788fea" translate="yes" xml:space="preserve">
          <source>A function that needs a filehandle of its own must use &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; on a complete typeglob. This can be used to create new symbol table entries:</source>
          <target state="translated">独自のファイルハンドルを必要とする関数は、完全なタイプグロブで &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; を使用する必要があります。これを使用して、新しいシンボルテーブルエントリを作成できます。</target>
        </trans-unit>
        <trans-unit id="074e275ec83817fc8f7919a77c7d1bc574268f70" translate="yes" xml:space="preserve">
          <source>A function that returns a &lt;b&gt;list&lt;/b&gt; of C subroutine definitions that return the value and type of constants when passed the name by the XS wrapper.</source>
          <target state="translated">XSラッパーによって名前が渡されたときに定数の値とタイプを返すCサブルーチン定義の&lt;b&gt;リスト&lt;/b&gt;を返す関数。</target>
        </trans-unit>
        <trans-unit id="16f5ca42729ef594d519db59b85f9698b43a3153" translate="yes" xml:space="preserve">
          <source>A function to generate perl code for Makefile.PL that will regenerate the constant subroutines. Parameters are named as passed to &lt;code&gt;WriteConstants&lt;/code&gt; , with the addition of &lt;code&gt;INDENT&lt;/code&gt; to specify the number of leading spaces (default 2).</source>
          <target state="translated">定数サブルーチンを再生成するMakefile.PLのperlコードを生成する関数。パラメータは &lt;code&gt;WriteConstants&lt;/code&gt; に渡されるように名前が付けられ、先行スペースの数を指定する &lt;code&gt;INDENT&lt;/code&gt; が追加されます（デフォルトは2）。</target>
        </trans-unit>
        <trans-unit id="6f1112f59bf733c8ebebfbb190c9c3efe0aeac9b" translate="yes" xml:space="preserve">
          <source>A function to generate the AUTOLOAD subroutine for the module</source>
          <target state="translated">モジュールのAUTOLOADサブルーチンを生成する関数</target>
        </trans-unit>
        <trans-unit id="b0a02614782733bf06479ea297bf790f7927505f" translate="yes" xml:space="preserve">
          <source>A function to generate the XS code to implement the perl subroutine</source>
          <target state="translated">Perlサブルーチンを実装するためのXSコードを生成する関数</target>
        </trans-unit>
        <trans-unit id="94d15a8aa6cbd7f8b0a2a414f5a5f7d2b35f7284" translate="yes" xml:space="preserve">
          <source>A function which returns a 7 bit ASCII correctly \ escaped version of the string passed suitable for C's &quot;&quot; or ''. It will die if passed Unicode characters.</source>
          <target state="translated">Cの&quot;&quot;や''に適した7ビットASCIIを正しくエスケープしたものを返す関数。Unicode文字が渡された場合は終了します。</target>
        </trans-unit>
        <trans-unit id="c45b17fcb375003bf4d5bd87967dc1245beb7fd4" translate="yes" xml:space="preserve">
          <source>A function which returns a 7 bit ASCII correctly \ escaped version of the string passed suitable for a perl &quot;&quot; string.</source>
          <target state="translated">perlの&quot;&quot;文字列に適した7ビットASCIIを正しくエスケープしたものを返す関数です。</target>
        </trans-unit>
        <trans-unit id="5e16a22c3d8b0f460cffd4d274f2db99a8a3ae51" translate="yes" xml:space="preserve">
          <source>A fundamental feature of regular expression matching involves the notion called</source>
          <target state="translated">正規表現マッチングの基本的な機能には</target>
        </trans-unit>
        <trans-unit id="2100c9b6a5bc83c2e9c2b9fd7c9dc09b08c1aad2" translate="yes" xml:space="preserve">
          <source>A general function for editing the structure of an existing chain of op_sibling nodes. By analogy with the perl-level splice() function, allows you to delete zero or more sequential nodes, replacing them with zero or more different nodes. Performs the necessary op_first/op_last housekeeping on the parent node and op_sibling manipulation on the children. The last deleted node will be marked as as the last node by updating the op_sibling/op_sibparent or op_moresib field as appropriate.</source>
          <target state="translated">op_sibling ノードの既存の連鎖構造を編集するための一般的な関数です。perlレベルのsplice()関数と類似しており、0個以上の連続したノードを削除して、0個以上の異なるノードに置き換えることができます。親ノードに対して必要な op_first/op_last ハウスキーピングを行い、子ノードに対して op_sibling 操作を行います。最後に削除されたノードは、適切な op_sibling/op_sibparent または op_moresib フィールドを更新することで、最後のノードとしてマークされます。</target>
        </trans-unit>
        <trans-unit id="16b0d3e317f9f7b5ddb72b16cb53e05b583e9133" translate="yes" xml:space="preserve">
          <source>A general solution to the serialization problem would require another level of registry, one that associates</source>
          <target state="translated">シリアライズ問題に対する一般的な解決策としては、別のレベルのレジストリが必要になるでしょう。</target>
        </trans-unit>
        <trans-unit id="ed526677b5c541991128da9f35ea30909114035f" translate="yes" xml:space="preserve">
          <source>A generic &lt;b&gt;object&lt;/b&gt; type; that is, a &lt;b&gt;class&lt;/b&gt; from which other, more specific classes are derived genetically by &lt;b&gt;inheritance&lt;/b&gt;. Also called a &amp;ldquo;superclass&amp;rdquo; by people who respect their ancestors.</source>
          <target state="translated">汎用&lt;b&gt;オブジェクト&lt;/b&gt;タイプ。すなわち、&lt;b&gt;クラス&lt;/b&gt;の他の、より具体的なクラスはによって遺伝的に誘導される&lt;b&gt;遺伝&lt;/b&gt;。祖先を尊重する人々から「スーパークラス」とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="0a9918e5dda4793cf3ecc366ce8266f117c17195" translate="yes" xml:space="preserve">
          <source>A generic file fetching mechanism</source>
          <target state="translated">汎用的なファイルフェッチ機構</target>
        </trans-unit>
        <trans-unit id="a625d1d6246943bf40d50608e758f2319151f17b" translate="yes" xml:space="preserve">
          <source>A generic input parsing/checking mechanism.</source>
          <target state="translated">汎用的な入力解析/チェック機構。</target>
        </trans-unit>
        <trans-unit id="af15d07731a55a9ecedf87f6009285e2acc4ef80" translate="yes" xml:space="preserve">
          <source>A git GUI shell extension for Windows such as TortoiseGit will cause the build and later &lt;code&gt;make test&lt;/code&gt; to run much slower since every file is checked for its git status as soon as it is created and/or modified. TortoiseGit doesn't cause any test failures or build problems unlike the antivirus software described above, but it does cause similar slowness. It is suggested to use Task Manager to look for background processes which use high CPU amounts during the building process.</source>
          <target state="translated">TortoiseGitなどのWindows用のgit GUIシェル拡張を使用すると、すべてのファイルが作成または変更された直後にgitステータスがチェックされるため、ビルドとその後の &lt;code&gt;make test&lt;/code&gt; 実行が非常に遅くなります。TortoiseGitは、上記のアンチウイルスソフトウェアとは異なり、テストの失敗やビルドの問題を引き起こしませんが、同様の速度低下を引き起こします。タスクマネージャーを使用して、ビルドプロセス中に大量のCPUを使用するバックグラウンドプロセスを探すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ca6613321ff6c370136985bf48b668224b2f6734" translate="yes" xml:space="preserve">
          <source>A gizmo that transforms some number of input values to some number of output values, often built into a language with a special syntax or symbol. A given operator may have specific expectations about what &lt;b&gt;types&lt;/b&gt; of data you give as its arguments (&lt;b&gt;operands&lt;/b&gt;) and what type of data you want back from it.</source>
          <target state="translated">いくつかの入力値をいくつかの出力値に変換するギズモ。多くの場合、特別な構文またはシンボルを使用して言語に組み込まれています。与えられた演算子は、引数（&lt;b&gt;オペランド&lt;/b&gt;）としてどの&lt;b&gt;タイプ&lt;/b&gt;のデータを指定するか、またどのタイプのデータをそこから戻したいかについて特定の期待を持っている場合があります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b0da5e61aa8557d6b28694e8c5217513361c3a66" translate="yes" xml:space="preserve">
          <source>A glossary of terms (technical and otherwise) used in the Perl documentation, derived from the Glossary of</source>
          <target state="translated">Perl ドキュメントで使用されている用語 (技術的なものとそうでないもの)の用語集。</target>
        </trans-unit>
        <trans-unit id="b29b7f7af6cfd5aa471dc4da158609e558212777" translate="yes" xml:space="preserve">
          <source>A glyph used in magic. Or, for Perl, the symbol in front of a variable name, such as &lt;code&gt;$&lt;/code&gt; , &lt;code&gt;@&lt;/code&gt; , and &lt;code&gt;%&lt;/code&gt; .</source>
          <target state="translated">魔法で使用されるグリフ。または、Perlの場合、 &lt;code&gt;$&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; などの変数名の前のシンボル。</target>
        </trans-unit>
        <trans-unit id="010767009a82e3c3f2315997ed16da6d8fa110ca" translate="yes" xml:space="preserve">
          <source>A good book on OO on Perl is the &quot;Object-Oriented Perl&quot; by Damian Conway from Manning Publications, or &quot;Intermediate Perl&quot; by Randal Schwartz, brian d foy, and Tom Phoenix from O'Reilly Media.</source>
          <target state="translated">Perl の OO に関する良い本としては、Manning Publications の Damian Conway による &quot;Object-Oriented Perl&quot; や、O'Reilly Media の Randal Schwartz,brian d foy,Tom Phoenix による &quot;Intermediate Perl&quot; などがあります。</target>
        </trans-unit>
        <trans-unit id="b82c3e9cadf17adecf1d24dc6cb64a89ca8103d6" translate="yes" xml:space="preserve">
          <source>A good place to start is &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;, and you can use &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt; for reference.</source>
          <target state="translated">開始するのに適した場所は&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;であり、参照には&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="878d4536576dbff5139c196eb475074b04b81dfd" translate="yes" xml:space="preserve">
          <source>A good test case has most of these attributes: short, simple code; few dependencies on external commands, modules, or libraries; no platform-dependent code (unless it's a platform-specific bug); clear, simple documentation.</source>
          <target state="translated">優れたテストケースは、これらの属性のほとんどを持っています:短くてシンプルなコード、外部コマンド、モジュール、ライブラリへの依存度が低い、プラットフォームに依存するコードがない(プラットフォーム固有のバグでない限り)、明確でシンプルなドキュメント。</target>
        </trans-unit>
        <trans-unit id="819fe6a0aff125bab30e82da5634d29a9188e255" translate="yes" xml:space="preserve">
          <source>A good test case is almost always a good candidate to be included in Perl's test suite. If you have the time, consider writing your test case so that it can be easily included into the standard test suite.</source>
          <target state="translated">良いテストケースは、ほとんどの場合、Perl のテストスイートに含まれる良い候補です。時間があれば、標準のテストスイートに簡単に組み込めるようにテストケースを書くことを検討してみてください。</target>
        </trans-unit>
        <trans-unit id="6800c5039fcfc25d3805f20efcfc998a8922a07e" translate="yes" xml:space="preserve">
          <source>A grab bag of methods to generate specific macros and commands.</source>
          <target state="translated">特定のマクロやコマンドを生成するためのメソッドを集めた袋です。</target>
        </trans-unit>
        <trans-unit id="52f74d52da3fd8ec9d4b9513d833d3c381a80abc" translate="yes" xml:space="preserve">
          <source>A grammar for the Test Anything Protocol.</source>
          <target state="translated">テストなんでもプロトコルの文法。</target>
        </trans-unit>
        <trans-unit id="4068f0366f48575a0048eca3205a24ad39495e7b" translate="yes" xml:space="preserve">
          <source>A grammar form might be something like this:</source>
          <target state="translated">文法の形はこんな感じかもしれません。</target>
        </trans-unit>
        <trans-unit id="19193405de37cb91769fc940baebbd6ae904906a" translate="yes" xml:space="preserve">
          <source>A graphene is an allotrope of carbon arranged in a hexagonal crystal lattice one atom thick. A &lt;b&gt;grapheme&lt;/b&gt;, or more fully, a</source>
          <target state="translated">グラフェンは、1つの原子の厚さの六角形の結晶格子に配置された炭素の同素体です。&lt;b&gt;書記素&lt;/b&gt;、または、より完全に、A</target>
        </trans-unit>
        <trans-unit id="07663ed8c039244f1bbba8bbd0f2248a550eeeb7" translate="yes" xml:space="preserve">
          <source>A graphical representation of complex numbers is possible in a plane (also called the</source>
          <target state="translated">複素数のグラフィカルな表現は、平面上で可能です(</target>
        </trans-unit>
        <trans-unit id="b2a17fedc722e35cf530893f218ec96ab466a1ef" translate="yes" xml:space="preserve">
          <source>A great circle is section of a circle that contains the circle diameter: the shortest distance between two (non-antipodal) points on the spherical surface goes along the great circle connecting those two points.</source>
          <target state="translated">大円とは、円の直径を含む円の断面のことで、球面上の2つの(反蹠ではない)点間の最短距離は、それらの2つの点を結ぶ大円に沿って進みます。</target>
        </trans-unit>
        <trans-unit id="cf830d0f970841c8b5873e5f5dc448f292f1330c" translate="yes" xml:space="preserve">
          <source>A group of related modules on &lt;b&gt;CPAN&lt;/b&gt;. (Also sometimes refers to a group of command-line switches grouped into one &lt;b&gt;switch cluster&lt;/b&gt;.)</source>
          <target state="translated">&lt;b&gt;CPAN&lt;/b&gt;の関連モジュールのグループ。 （1つの&lt;b&gt;スイッチクラスタに&lt;/b&gt;グループ化されたコマンドラインスイッチのグループを指すこともあり&lt;b&gt;ます&lt;/b&gt;。）</target>
        </trans-unit>
        <trans-unit id="d92a635a2c1e502bba680458b972125c4a0be466" translate="yes" xml:space="preserve">
          <source>A group that is required to bundle a set of alternatives may or may not be useful as a capturing group. If it isn't, it just creates a superfluous addition to the set of available capture group values, inside as well as outside the regexp. Non-capturing groupings, denoted by &lt;code&gt;(?:regexp)&lt;/code&gt;, still allow the regexp to be treated as a single unit, but don't establish a capturing group at the same time. Both capturing and non-capturing groupings are allowed to co-exist in the same regexp. Because there is no extraction, non-capturing groupings are faster than capturing groupings. Non-capturing groupings are also handy for choosing exactly which parts of a regexp are to be extracted to matching variables:</source>
          <target state="translated">代替のセットをバンドルするために必要なグループは、キャプチャグループとして役立つ場合とそうでない場合があります。そうでない場合は、正規表現の内部と外部の両方で、使用可能なキャプチャグループ値のセットに余分な追加が作成されるだけです。 &lt;code&gt;(?:regexp)&lt;/code&gt; で示される非キャプチャグループでは、正規表現を単一のユニットとして扱うことができますが、同時にキャプチャグループを確立することはできません。キャプチャグループと非キャプチャグループの両方を同じ正規表現で共存させることができます。抽出がないため、非キャプチャグループはキャプチャグループよりも高速です。非キャプチャグループは、正規表現のどの部分を一致する変数に抽出するかを正確に選択するのにも便利です。</target>
        </trans-unit>
        <trans-unit id="e98254b9797c79a405fb849ceb15e69b1be1e9de" translate="yes" xml:space="preserve">
          <source>A handful of characters have a dedicated</source>
          <target state="translated">一握りのキャラには専用の</target>
        </trans-unit>
        <trans-unit id="f93caa5208bfa6818a90d520fb7ad0e15665c128" translate="yes" xml:space="preserve">
          <source>A handler for an attributes with an all-lowercase name was declared. An attribute with an all-lowercase name might have a meaning to Perl itself some day, even though most don't yet. Use a mixed-case attribute name, instead.</source>
          <target state="translated">オール小文字の名前を持つ属性のハンドラが宣言されました。オール小文字の名前を持つ属性は、Perl自身にもいつかは意味を持つかもしれませんが、ほとんどはまだそうではありません。代わりに、大文字小文字の混在した属性名を使用してください。</target>
        </trans-unit>
        <trans-unit id="c3e6d55f9badd1667902eb5523efa20bcbd3e70c" translate="yes" xml:space="preserve">
          <source>A handler for attributes of the specified name</source>
          <target state="translated">指定された名前の属性のハンドラ</target>
        </trans-unit>
        <trans-unit id="49edbe08e4bfabb8ba065c602451240e8c0f2a33" translate="yes" xml:space="preserve">
          <source>A handy tag name for a</source>
          <target state="translated">手軽なタグ名として</target>
        </trans-unit>
        <trans-unit id="3aa757aa90e3b991f02cc566dd247ec484d84771" translate="yes" xml:space="preserve">
          <source>A hash &lt;code&gt;%DB::sub&lt;/code&gt; is maintained, whose keys are subroutine names and whose values have the form &lt;code&gt;filename:startline-endline&lt;/code&gt; . &lt;code&gt;filename&lt;/code&gt; has the form &lt;code&gt;(&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 34)&lt;/code&gt; for subroutines defined inside &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">ハッシュ &lt;code&gt;%DB::sub&lt;/code&gt; が維持されます。そのキーはサブルーチン名であり、その値の形式は &lt;code&gt;filename:startline-endline&lt;/code&gt; です。 &lt;code&gt;filename&lt;/code&gt; 形式は &lt;code&gt;(&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 34)&lt;/code&gt; 内で定義されたサブルーチンの &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="44b55c7f5cfe4830cdb1fa796511bc1073b11348" translate="yes" xml:space="preserve">
          <source>A hash can be initialized using a literal list holding pairs of items to be interpreted as a key and a value:</source>
          <target state="translated">ハッシュは、キーと値として解釈される項目のペアを保持するリテラルリストを使用して初期化することができます。</target>
        </trans-unit>
        <trans-unit id="8a814541e8cdf1052da6ce7b4056b3b5847f1f69" translate="yes" xml:space="preserve">
          <source>A hash is an ideal mechanism to store the mapping between C and Perl.</source>
          <target state="translated">ハッシュは、CとPerlの間のマッピングを格納するための理想的なメカニズムです。</target>
        </trans-unit>
        <trans-unit id="70381f72f3a7fd8e9863739e409cd4fabcba3c1e" translate="yes" xml:space="preserve">
          <source>A hash of array references in list context. Each entry of the hash has the fully qualified method name as its key and a reference to an array containing the method's list-context return values as its value.</source>
          <target state="translated">リストコンテキストでの配列参照のハッシュ。ハッシュの各エントリは、完全修飾されたメソッド名をキーとし、メソッドのリストコンテキストの戻り値を含む配列への参照を値とします。</target>
        </trans-unit>
        <trans-unit id="5ea60218a99582e9bc2b801ff2d5e8c50e9c5afa" translate="yes" xml:space="preserve">
          <source>A hash of hashes keyed on perl version and on module name. If a module is defined it indicates that that module is deprecated in that perl version and is scheduled for removal from core at some future point.</source>
          <target state="translated">perl のバージョンとモジュール名をキーにしたハッシュのハッシュ。モジュールが定義されている場合、そのモジュールはそのperlバージョンでは非推奨であり、将来的にコアから削除される予定であることを示します。</target>
        </trans-unit>
        <trans-unit id="3ce60ae7ced566f5220eb260ad49e428425ac3a8" translate="yes" xml:space="preserve">
          <source>A hash of hashes that is keyed on perl version as indicated in $]. The second level hash is module =&amp;gt; version pairs.</source>
          <target state="translated">$]で示されているようにperlバージョンでキーが付けられたハッシュのハッシュ。第2レベルのハッシュは、モジュール=&amp;gt;バージョンのペアです。</target>
        </trans-unit>
        <trans-unit id="5c605211961bb9e43df625e92f911448dae2ef07" translate="yes" xml:space="preserve">
          <source>A hash of modules that are needed to build your module but not run it.</source>
          <target state="translated">モジュールのビルドには必要だが実行には必要ないモジュールのハッシュ。</target>
        </trans-unit>
        <trans-unit id="e6392db0e8aa8a4e0a54f37942aac32926d2e82c" translate="yes" xml:space="preserve">
          <source>A hash of modules that are needed to run your module. The keys are the module names ie. Test::More, and the minimum version is the value. If the required version number is 0 any version will do.</source>
          <target state="translated">モジュールの実行に必要なモジュールのハッシュ。キーはモジュール名、例えば Test::More、最小バージョンは値です。必要なバージョン番号が 0 の場合は、どのバージョンでも実行できます。</target>
        </trans-unit>
        <trans-unit id="922e915de9e8740eca506cd44d1ed8c10a9b1671" translate="yes" xml:space="preserve">
          <source>A hash of modules that are needed to test your module but not run or build it.</source>
          <target state="translated">モジュールのテストに必要なモジュールのハッシュ。</target>
        </trans-unit>
        <trans-unit id="cd4d1c09ebac99b02cf9a7c9fa8cd90d4f94f599" translate="yes" xml:space="preserve">
          <source>A hash of modules that are required to run Makefile.PL itself, but not to run your distribution.</source>
          <target state="translated">Makefile.PL 自体を実行するために必要なモジュールのハッシュですが、ディストリビューションを実行するためには必要ありません。</target>
        </trans-unit>
        <trans-unit id="f704787fb624926417400f97106f18daa25dcf15" translate="yes" xml:space="preserve">
          <source>A hash of the POSIX realtime signal handlers. It is an extension of the standard &lt;code&gt;%SIG&lt;/code&gt; , the &lt;code&gt;$POSIX::SIGRT{SIGRTMIN}&lt;/code&gt; is roughly equivalent to &lt;code&gt;$SIG{SIGRTMIN}&lt;/code&gt; , but the right POSIX moves (see below) are made with the &lt;code&gt;POSIX::SigSet&lt;/code&gt; and &lt;code&gt;POSIX::sigaction&lt;/code&gt; instead of accessing the &lt;code&gt;%SIG&lt;/code&gt; .</source>
          <target state="translated">POSIXリアルタイムシグナルハンドラーのハッシュ。これは標準の &lt;code&gt;%SIG&lt;/code&gt; の拡張であり、 &lt;code&gt;$POSIX::SIGRT{SIGRTMIN}&lt;/code&gt; は &lt;code&gt;$SIG{SIGRTMIN}&lt;/code&gt; とほぼ同等ですが、 &lt;code&gt;POSIX::SigSet&lt;/code&gt; と &lt;code&gt;POSIX::sigaction&lt;/code&gt; 正しいPOSIX移動（以下を参照）が行われます。 &lt;code&gt;%SIG&lt;/code&gt; にアクセスする代わりにsigaction。</target>
        </trans-unit>
        <trans-unit id="60ab26088a220041ec5c97911d9e6f565f5cbd7a" translate="yes" xml:space="preserve">
          <source>A hash or array element can be true only if it's defined and defined only if it exists, but the reverse doesn't necessarily hold true.</source>
          <target state="translated">ハッシュや配列の要素は、定義されていて存在している場合にのみ真になりますが、逆は必ずしも真ではありません。</target>
        </trans-unit>
        <trans-unit id="0bf79c7c035d7be8a20888854f2234466da28ff7" translate="yes" xml:space="preserve">
          <source>A hash reference containing various parsing options (see below)</source>
          <target state="translated">様々な解析オプションを含むハッシュ参照 (以下を参照)</target>
        </trans-unit>
        <trans-unit id="71468d46c3d10b4d4aab17a5abca352e48601869" translate="yes" xml:space="preserve">
          <source>A hash represents a set of key/value pairs:</source>
          <target state="translated">ハッシュは、キーと値のペアの集合を表します。</target>
        </trans-unit>
        <trans-unit id="10f78a1f223b35e25505609f4916f6f91875834d" translate="yes" xml:space="preserve">
          <source>A hash that contains information on the appropriate bug tracker for each core module.</source>
          <target state="translated">各コアモジュールの適切なバグトラッカーの情報を含むハッシュ。</target>
        </trans-unit>
        <trans-unit id="567327a8b7280b6715ced030a81d31782682314b" translate="yes" xml:space="preserve">
          <source>A hash that contains information on where patches should be directed for each core module.</source>
          <target state="translated">各コアモジュールのパッチをどこに向けるべきかの情報を含むハッシュ。</target>
        </trans-unit>
        <trans-unit id="9f6e2604d963e87b1664555e25f241bb06bae1e9" translate="yes" xml:space="preserve">
          <source>A hash that maps from each Pod filespec to its pod-name (like &quot;/whatever/plib/Stuff/Thing.pm&quot; =&amp;gt; &quot;Stuff::Thing&quot;)</source>
          <target state="translated">各ポッドファイル仕様からそのポッド名にマップするハッシュ（ &quot;/whatever/plib/Stuff/Thing.pm&quot; =&amp;gt; &quot;Stuff :: Thing&quot;など）</target>
        </trans-unit>
        <trans-unit id="215fe982a4e5c65f0b82e82b7b97c0bfc5c0deef" translate="yes" xml:space="preserve">
          <source>A hash that maps from each pod-name to the filespec (like &quot;Stuff::Thing&quot; =&amp;gt; &quot;/whatever/plib/Stuff/Thing.pm&quot;)</source>
          <target state="translated">各ポッド名からファイル指定にマップするハッシュ（ &quot;Stuff :: Thing&quot; =&amp;gt; &quot;/whatever/plib/Stuff/Thing.pm&quot;など）</target>
        </trans-unit>
        <trans-unit id="bb3108415359d307ae0dd29af4dd93824067960c" translate="yes" xml:space="preserve">
          <source>A hashref of items to add to the CPAN Meta file (</source>
          <target state="translated">CPAN メタファイルに追加する項目のハッシュリフ (</target>
        </trans-unit>
        <trans-unit id="039b44468fab1aa4f939b768b655c31c005e5690" translate="yes" xml:space="preserve">
          <source>A hashref with one or more of the keys &lt;code&gt;distribution&lt;/code&gt; , &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;perl&lt;/code&gt; , &lt;code&gt;perlconfig&lt;/code&gt; , and &lt;code&gt;env&lt;/code&gt; that specify whether a document is targeted at a specific CPAN distribution or installation. Keys prefixed with &lt;code&gt;not_&lt;/code&gt; negates the corresponding match.</source>
          <target state="translated">ドキュメントが特定のCPAN配布またはインストールを対象とするかどうかを指定する、キー &lt;code&gt;distribution&lt;/code&gt; 、 &lt;code&gt;module&lt;/code&gt; 、 &lt;code&gt;perl&lt;/code&gt; 、 &lt;code&gt;perlconfig&lt;/code&gt; 、および &lt;code&gt;env&lt;/code&gt; の 1つ以上を含むhashref。 &lt;code&gt;not_&lt;/code&gt; で始まるキーは、対応する一致を否定します。</target>
        </trans-unit>
        <trans-unit id="8c60ca8fe75e29a9dfda50be5b6bb79ab9c86c02" translate="yes" xml:space="preserve">
          <source>A heading (&lt;code&gt;=head1&lt;/code&gt; or &lt;code&gt;=head2&lt;/code&gt; ) without any text? That ain't no heading!</source>
          <target state="translated">テキストのない見出し（ &lt;code&gt;=head1&lt;/code&gt; または &lt;code&gt;=head2&lt;/code&gt; ）？それは見出しではありません！</target>
        </trans-unit>
        <trans-unit id="f9832f7772423825e7be09c103f042abd3956ccc" translate="yes" xml:space="preserve">
          <source>A hex dump of &lt;code&gt;$berbuf&lt;/code&gt; , with spaces inserted at the right places, shows 01 8100 8101 81807F. Since the last byte is always less than 128, &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; knows where to stop.</source>
          <target state="translated">&lt;code&gt;$berbuf&lt;/code&gt; 16進ダンプで、適切な場所にスペースが挿入されていると、01 8100 8101 81807Fと表示されます。最後のバイトは常に128未満であるため、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; は停止する場所を認識しています。</target>
        </trans-unit>
        <trans-unit id="38e7070b1f249f379f9a778af2f10d3b11497505" translate="yes" xml:space="preserve">
          <source>A hierarchy of &quot;categories&quot; have been defined to allow groups of warnings to be enabled/disabled in isolation.</source>
          <target state="translated">警告のグループを個別に有効化/無効化できるように、「カテゴリ」の階層が定義されています。</target>
        </trans-unit>
        <trans-unit id="536684f67238bfdb66acbda52de51ea79291a12f" translate="yes" xml:space="preserve">
          <source>A is the root class, B is a subclass of A, C is a subclass of B, and D is another subclass of A.</source>
          <target state="translated">Aはルートクラス、BはAのサブクラス、CはBのサブクラス、DはAの別のサブクラスです。</target>
        </trans-unit>
        <trans-unit id="8f3e40034aa0308d28f4dfc54288a8825f6cfd1e" translate="yes" xml:space="preserve">
          <source>A kind of &lt;b&gt;overloading&lt;/b&gt; that you can do on built-in &lt;b&gt;operators&lt;/b&gt; to make them work on &lt;b&gt;objects&lt;/b&gt; as if the objects were ordinary scalar values, but with the actual semantics supplied by the object class. This is set up with the overload &lt;b&gt;pragma&lt;/b&gt;&amp;mdash;see Camel chapter 13, &amp;ldquo;Overloading&amp;rdquo;.</source>
          <target state="translated">一種の&lt;b&gt;オーバーロードを&lt;/b&gt;使用すると、上の組み込みのないことを&lt;b&gt;オペレータ&lt;/b&gt;にそれらを動作させるために&lt;b&gt;、オブジェクトを&lt;/b&gt;オブジェクトはなく、オブジェクトのクラスによって提供される実際のセマンティクスと、通常のスカラー値であるかのように。これは、overload &lt;b&gt;プラグマで&lt;/b&gt;設定されます&amp;mdash;Camelの第13章「Overloading」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e9cfe5685ea0ecd4847a06232a077cb874b35be7" translate="yes" xml:space="preserve">
          <source>A kind of action that an &lt;b&gt;object&lt;/b&gt; can take if you tell it to. See Camel chapter 12, &amp;ldquo;Objects&amp;rdquo;.</source>
          <target state="translated">指示した場合に&lt;b&gt;オブジェクト&lt;/b&gt;が実行できる一種のアクション。ラクダの第12章「オブジェクト」を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfe222b0c92a8225eafa0e0da38f08258e2a6e75" translate="yes" xml:space="preserve">
          <source>A kind of key or name attached to a loop (or roller coaster) so that loop control statements can talk about which loop they want to control.</source>
          <target state="translated">ループ制御文がどのループを制御したいかを話すことができるように、ループ(またはジェットコースター)に付けられたキーや名前のようなもの。</target>
        </trans-unit>
        <trans-unit id="e7d72d06babc67750c6b28a2b28bed949fa33a88" translate="yes" xml:space="preserve">
          <source>A kinder, gentler tutorial on object-oriented programming in Perl can be found in &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;. You should also check out &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for some style guides on constructing both modules and classes.</source>
          <target state="translated">Perlでのオブジェクト指向プログラミングに関するより親切で穏やかなチュートリアルが&lt;a href=&quot;perlootut&quot;&gt;perlootutにあり&lt;/a&gt;ます。また、モジュールとクラスの両方を構築する&lt;a href=&quot;perlmodlib&quot;&gt;際&lt;/a&gt;のいくつかのスタイルガイドについては、perlmodlibを確認してください。</target>
        </trans-unit>
        <trans-unit id="b68c5f288b44308b58cb523d3e60b493b484f9c4" translate="yes" xml:space="preserve">
          <source>A language beloved by many for its inside-out &lt;b&gt;type&lt;/b&gt; definitions, inscrutable &lt;b&gt;precedence&lt;/b&gt; rules, and heavy &lt;b&gt;overloading&lt;/b&gt; of the function-call mechanism. (Well, actually, people first switched to C because they found lowercase identifiers easier to read than upper.) Perl is written in C, so it&amp;rsquo;s not surprising that Perl borrowed a few ideas from it.</source>
          <target state="translated">裏返しの&lt;b&gt;型&lt;/b&gt;定義、不可解な&lt;b&gt;優先&lt;/b&gt;ルール、関数呼び出しメカニズムの&lt;b&gt;過負荷&lt;/b&gt;のために多くの人に愛されている言語。（まあ、実際には、小文字の識別子が大文字よりも読みやすいので、人々は最初にCに切り替えました。）PerlはCで書かれているので、Perlがそこからいくつかのアイデアを借りたのは当然です。</target>
        </trans-unit>
        <trans-unit id="7a70c2d1db9e3781c948c3f568d555da43db83b2" translate="yes" xml:space="preserve">
          <source>A language class is a class containing a lexicon of phrases as class data, and possibly also some methods that are of use in interpreting phrases in the lexicon, or otherwise dealing with text in that language.</source>
          <target state="translated">言語クラスとは、クラスデータとしてのフレーズのレキシコンと、レキシコン内のフレーズを解釈したり、その言語のテキストを扱ったりするためのメソッドを含むクラスのことです。</target>
        </trans-unit>
        <trans-unit id="c64c47113f6df7e33ad198a5fed1bb8f3af6d13f" translate="yes" xml:space="preserve">
          <source>A language handle is a flyweight object -- i.e., it doesn't (necessarily) carry any data of interest, other than just being a member of whatever class it belongs to.</source>
          <target state="translated">言語ハンドルはフライウェイトオブジェクトです --つまり、それは(必ずしも)興味のあるデータを持ちません。</target>
        </trans-unit>
        <trans-unit id="c3a083f1f9c38b9c0d77465662a942c4c5d48d8d" translate="yes" xml:space="preserve">
          <source>A language handle is implemented as a blessed hash. Subclasses of yours can store whatever data you want in the hash. Currently the only hash entry used by any crucial Maketext method is &quot;fail&quot;, so feel free to use anything else as you like.</source>
          <target state="translated">言語ハンドルは祝福されたハッシュとして実装されます。あなたのサブクラスは、あなたが望むデータをハッシュに格納することができます。現在、重要なMaketextメソッドで使用されるハッシュエントリは &quot;fail &quot;だけです。</target>
        </trans-unit>
        <trans-unit id="9fb1cb589c473c75eb212d9b744da125c770bad8" translate="yes" xml:space="preserve">
          <source>A language such as Perl that is good at hooking things together that weren&amp;rsquo;t intended to be hooked together.</source>
          <target state="translated">一緒に接続することを意図していないものを一緒に接続するのに優れたPerlなどの言語。</target>
        </trans-unit>
        <trans-unit id="7ea3dfebe2530a429cde54a5f0bc78f862792455" translate="yes" xml:space="preserve">
          <source>A large scalar that you know can only contain ASCII</source>
          <target state="translated">ASCIIしか入れられないことがわかっている大きなスカラ</target>
        </trans-unit>
        <trans-unit id="8078fbdb7cd614c0fbe18240c94f727ccdf4ed5e" translate="yes" xml:space="preserve">
          <source>A layer can be added that does &quot;\n&quot; to CRLF translation. This layer can be used on any platform, not just those that normally do such things.</source>
          <target state="translated">CRLFへの翻訳を行うレイヤーを追加することができます。このレイヤーは、通常のプラットフォームだけでなく、どのようなプラットフォームでも使用できます。</target>
        </trans-unit>
        <trans-unit id="c418f05188c75b7cf5ccc4221979555d292c85f1" translate="yes" xml:space="preserve">
          <source>A layer contains a &quot;vtable&quot;, the table of I/O operations (at C level a table of function pointers), and status flags. The functions in the vtable implement operations like &quot;open&quot;, &quot;read&quot;, and &quot;write&quot;.</source>
          <target state="translated">レイヤーには、&quot;vtable&quot;、I/O操作のテーブル(Cレベルでは関数ポインタのテーブル)、ステータスフラグが含まれます。vtableに含まれる関数は、&quot;open&quot;、&quot;read&quot;、&quot;write &quot;などの操作を実装している。</target>
        </trans-unit>
        <trans-unit id="4f0330995dfa2fce16816cd443c9581a48699cf3" translate="yes" xml:space="preserve">
          <source>A layer derived using &quot;perlio&quot; as a base class. It provides Win32-like &quot;\n&quot; to CR,LF translation. Can either be applied above &quot;perlio&quot; or serve as the buffer layer itself. &quot;crlf&quot; over &quot;unix&quot; is the default if system distinguishes between &lt;code&gt;O_TEXT&lt;/code&gt; and &lt;code&gt;O_BINARY&lt;/code&gt; opens. (At some point &quot;unix&quot; will be replaced by a &quot;native&quot; Win32 IO layer on that platform, as Win32's read/write layer has various drawbacks.) The &quot;crlf&quot; layer is a reasonable model for a layer which transforms data in some way.</source>
          <target state="translated">「perlio」を基本クラスとして使用して派生したレイヤー。Win32のような「\ n」からCR、LFへの変換を提供します。「perlio」の上に適用するか、バッファ層自体として機能することができます。システムが &lt;code&gt;O_TEXT&lt;/code&gt; と &lt;code&gt;O_BINARY&lt;/code&gt; のオープンを区別する場合、 &quot;unix&quot;上の &quot;crlf&quot;がデフォルトです。（Win32の読み取り/書き込みレイヤーにはさまざまな欠点があるため、ある時点で、「unix」はそのプラットフォームの「ネイティブ」Win32 IOレイヤーに置き換えられます。）「crlf」レイヤーは、一部のデータを変換するレイヤーの適切なモデルです。仕方。</target>
        </trans-unit>
        <trans-unit id="c575f3b4bff37dcf26ab538523523b73298b17f9" translate="yes" xml:space="preserve">
          <source>A layer does not have to implement all the functions, but the whole table has to be present. Unimplemented slots can be NULL (which will result in an error when called) or can be filled in with stubs to &quot;inherit&quot; behaviour from a &quot;base class&quot;. This &quot;inheritance&quot; is fixed for all instances of the layer, but as the layer chooses which stubs to populate the table, limited &quot;multiple inheritance&quot; is possible.</source>
          <target state="translated">レイヤーはすべての関数を実装する必要はありませんが、テーブル全体が存在していなければなりません。実装されていないスロットは NULL (これは呼び出されたときにエラーになります)にすることもできますし、スタブで埋めて &quot;基底クラス &quot;から動作を &quot;継承 &quot;することもできます。この &quot;継承 &quot;はレイヤーのすべてのインスタンスに対して固定されていますが、テーブルを埋めるスタブを選択するのはレイヤーなので、限定的な &quot;複数継承 &quot;が可能です。</target>
        </trans-unit>
        <trans-unit id="7f64a4152a5af0c9ac4baa66afb914d700fb3ea6" translate="yes" xml:space="preserve">
          <source>A layer that implements &quot;reading&quot; of files by using</source>
          <target state="translated">を使用してファイルの「読み込み」を実装したレイヤーです。</target>
        </trans-unit>
        <trans-unit id="29bee167ef354a3d46f2326d367f6d5e9ab52d50" translate="yes" xml:space="preserve">
          <source>A layer that implements DOS/Windows like CRLF line endings. On read converts pairs of CR,LF to a single &quot;\n&quot; newline character. On write converts each &quot;\n&quot; to a CR,LF pair. Note that this layer will silently refuse to be pushed on top of itself.</source>
          <target state="translated">DOS/WindowsのCRLFのような行末を実装するレイヤです。読み込み時には、CR,LFのペアを1つの改行文字「\n」に変換します。書き込み時には、各&quot;\n &quot;をCR,LFのペアに変換します。このレイヤは、それ自体の上に押されることを静かに拒否することに注意してください。</target>
        </trans-unit>
        <trans-unit id="a9b39500363434cc0ff0f52b520ce130f3b3a554" translate="yes" xml:space="preserve">
          <source>A layer which does CRLF to &lt;code&gt;&quot;\n&quot;&lt;/code&gt; translation distinguishing &quot;text&quot; and &quot;binary&quot; files in the manner of MS-DOS and similar operating systems. (It currently does</source>
          <target state="translated">MS-DOSおよび同様のオペレーティングシステムの方法で「テキスト」ファイルと「バイナリ」ファイルを区別するCRLFから &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 変換を行うレイヤー。（現在は</target>
        </trans-unit>
        <trans-unit id="d99ca2d73d6bc9954c1f5d38358ae63b3448d053" translate="yes" xml:space="preserve">
          <source>A layer which implements &quot;reading&quot; of files by using &lt;code&gt;mmap()&lt;/code&gt; to make a (whole) file appear in the process's address space, and then using that as PerlIO's &quot;buffer&quot;. This</source>
          <target state="translated">&lt;code&gt;mmap()&lt;/code&gt; を使用して（全体の）ファイルをプロセスのアドレス空間に表示し、それをPerlIOの「バッファー」として使用することにより、ファイルの「読み取り」を実装するレイヤー。この</target>
        </trans-unit>
        <trans-unit id="fd687d324576d9173f6d5752bc85ac325e3d235f" translate="yes" xml:space="preserve">
          <source>A layer which provides the PerlIO API via the layer scheme, but implements it by calling system's stdio. This is (currently) the default if system's stdio provides sufficient access to allow perl's &quot;fast gets&quot; access and which do not distinguish between &lt;code&gt;O_TEXT&lt;/code&gt; and &lt;code&gt;O_BINARY&lt;/code&gt; .</source>
          <target state="translated">レイヤースキームを介してPerlIO APIを提供しますが、システムのstdioを呼び出すことによってそれを実装するレイヤー。システムのstdioがperlの「高速取得」アクセスを可能にするのに十分なアクセスを提供し、 &lt;code&gt;O_TEXT&lt;/code&gt; と &lt;code&gt;O_BINARY&lt;/code&gt; を区別しない場合、これは（現在）デフォルトです。</target>
        </trans-unit>
        <trans-unit id="1841e889a880ebb77b0a2697210c6744f8df031b" translate="yes" xml:space="preserve">
          <source>A leading ! indicates that matching names should be deleted from the list of names to import. If the first specification is a deletion it is treated as though preceded by :DEFAULT. If you just want to import extra names in addition to the default set you will still need to include :DEFAULT explicitly.</source>
          <target state="translated">先頭の ! は、一致する名前をインポートする名前のリストから削除することを示します。最初の指定が削除である場合は、 :DEFAULT が先行しているかのように扱われます。デフォルトのセットに加えて追加の名前をインポートしたい場合は、 :DEFAULT を明示的に含める必要があります。</target>
        </trans-unit>
        <trans-unit id="f747bcc2647296135613b88a3e62cca47b6c1dc6" translate="yes" xml:space="preserve">
          <source>A leading colon removes the &quot;name=&quot; part of the response, this allows you to map to the name you need. (mnemonic: empty label)</source>
          <target state="translated">先頭のコロンはレスポンスの &quot;name=&quot; 部分を削除します。(ニーモニック:空のラベル)</target>
        </trans-unit>
        <trans-unit id="96fa00367bcfdb4784c34a4a3babbe9475afc22d" translate="yes" xml:space="preserve">
          <source>A legally formed name for most anything in which a computer program might be interested. Many languages (including Perl) allow identifiers to start with an alphabetic character, and then contain alphabetics and digits. Perl also allows connector punctuation like the underscore character wherever it allows alphabetics. (Perl also has more complicated names, like &lt;b&gt;qualified&lt;/b&gt; names.)</source>
          <target state="translated">コンピュータプログラムが関心を持つ可能性のあるほとんどすべての正式に形成された名前。多くの言語（Perlを含む）では、識別子をアルファベット文字で始め、その後にアルファベットと数字を含めることができます。また、Perlでは、アルファベットを使用できる場所であればどこでも、アンダースコア文字のようなコネクタの句読点を使用できます。（Perlには、&lt;b&gt;修飾&lt;/b&gt;名など、より複雑な名前もあります。）</target>
        </trans-unit>
        <trans-unit id="69d4d84a09fc968a07bdda5a53812534fa74783b" translate="yes" xml:space="preserve">
          <source>A library only needs to deal with unsigned big integers. Testing of input parameter validity is done by the caller, so there is no need to worry about underflow (e.g., in &lt;code&gt;_sub()&lt;/code&gt; and &lt;code&gt;_dec()&lt;/code&gt; ) nor about division by zero (e.g., in &lt;code&gt;_div()&lt;/code&gt; ) or similar cases.</source>
          <target state="translated">ライブラリは、符号なしビッグ整数のみを処理する必要があります。入力パラメーターの有効性のテストは呼び出し元によって行われるため、アンダーフロー（ &lt;code&gt;_sub()&lt;/code&gt; や &lt;code&gt;_dec()&lt;/code&gt; など）やゼロによる除算（ &lt;code&gt;_div()&lt;/code&gt; など）や同様のケースを心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="0b89fa4e541f30b4e921956619e05676831d4d1c" translate="yes" xml:space="preserve">
          <source>A line number may be prefixed by a single letter:</source>
          <target state="translated">行番号の先頭には、1文字を付けることができます。</target>
        </trans-unit>
        <trans-unit id="2d89336c3df3636aebec0ee20d5e9be98d7da075" translate="yes" xml:space="preserve">
          <source>A line-oriented form of quoting is based on the shell &quot;here-document&quot; syntax. Following a &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; you specify a string to terminate the quoted material, and all lines following the current line down to the terminating string are the value of the item.</source>
          <target state="translated">行指向の引用形式は、シェルの「ヒアドキュメント」構文に基づいています。 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; に続いて、引用された資料を終了する文字列を指定します。現在の行から終了文字列までのすべての行は、アイテムの値です。</target>
        </trans-unit>
        <trans-unit id="75e8b52d2267761231a600214a302dc93a9097e4" translate="yes" xml:space="preserve">
          <source>A list introduced by &lt;code&gt;=over&lt;/code&gt; starts with a text or verbatim paragraph, but continues with &lt;code&gt;=item&lt;/code&gt; s. Move the non-item paragraph out of the &lt;code&gt;=over&lt;/code&gt; /&lt;code&gt;=back&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;=over&lt;/code&gt; で導入されたリストは、テキストまたは逐語的段落で始まりますが、 &lt;code&gt;=item&lt;/code&gt; で続きます。非アイテム段落を &lt;code&gt;=over&lt;/code&gt; / &lt;code&gt;=back&lt;/code&gt; ブロックの外に移動します。</target>
        </trans-unit>
        <trans-unit id="9aee76ae2469acd57d2557387480876b03411474" translate="yes" xml:space="preserve">
          <source>A list is a fixed collection of scalars. An array is a variable that holds a variable collection of scalars. An array can supply its collection for list operations, so list operations also work on arrays:</source>
          <target state="translated">リストはスカラーの固定集合です。配列はスカラの可変コレクションを保持する変数です。配列はそのコレクションをリスト操作のために供給することができるので、リスト操作は配列に対しても動作します。</target>
        </trans-unit>
        <trans-unit id="b201394353dbcc6ef2561ba6cd863dea90b88222" translate="yes" xml:space="preserve">
          <source>A list of additional libraries or other shared objects which can be used to resolve any undefined symbols that might be generated by a later call to load_file().</source>
          <target state="translated">後で load_file()を呼び出すことで生成されるかもしれない未定義のシンボルを解決するために使用できる追加のライブラリやその他の共有オブジェクトのリスト。</target>
        </trans-unit>
        <trans-unit id="e216fd26bc604e567680be656aeb4002407fb587" translate="yes" xml:space="preserve">
          <source>A list of all the INSTALL* variables without the INSTALL prefix. Useful for iteration or building related variable sets.</source>
          <target state="translated">INSTALL接頭辞を除いたすべてのINSTALL*変数のリスト。反復や関連する変数セットの構築に便利です。</target>
        </trans-unit>
        <trans-unit id="94957d0f7514017339244da4cc1607583b5fc84e" translate="yes" xml:space="preserve">
          <source>A list of directories in which to look for Perl library files before looking in the standard library and the current directory. Any architecture-specific and version-specific directories, such as</source>
          <target state="translated">標準ライブラリとカレントディレクトリを探す前に、Perl ライブラリファイルを探すためのディレクトリのリスト。標準ライブラリとカレントディレクトリを探す前に、Perl ライブラリファイルを探すディレクトリのリスト。</target>
        </trans-unit>
        <trans-unit id="7103902d7143d091cfd2b7d907958a451f56b4e9" translate="yes" xml:space="preserve">
          <source>A list of directories in which to look for Perl library files before looking in the standard library and the current directory. If PERL5LIB is defined, PERLLIB is not used.</source>
          <target state="translated">標準ライブラリとカレントディレクトリを探す前に、Perl ライブラリファイルを探すディレクトリのリスト。PERL5LIBが定義されている場合、PERLLIBは使用されません。</target>
        </trans-unit>
        <trans-unit id="f3cc07c6f57898b2ef6aaadd57be04cf61845061" translate="yes" xml:space="preserve">
          <source>A list of directory paths. If the input file does not exist, then it will be searched for in the given directory list (in the order the directories appear in the list). It defaults to the list of directories implied by &lt;code&gt;$ENV{PATH}&lt;/code&gt; . The list may be specified either by a reference to an array, or by a string of directory paths which use the same path separator as &lt;code&gt;$ENV{PATH}&lt;/code&gt; on your system (e.g., &lt;code&gt;:&lt;/code&gt; for Unix, &lt;code&gt;;&lt;/code&gt; for MSWin32 and DOS).</source>
          <target state="translated">ディレクトリパスのリスト。入力ファイルが存在しない場合は、指定されたディレクトリリストで（ディレクトリがリストに表示される順序で）検索されます。デフォルトでは、 &lt;code&gt;$ENV{PATH}&lt;/code&gt; によって暗示されるディレクトリのリストになります。リストには、配列を参照することによって、または同じパス区切り文字を使用するディレクトリー・パスの文字列のいずれかによって指定することができる &lt;code&gt;$ENV{PATH}&lt;/code&gt; システム上（例えば、 &lt;code&gt;:&lt;/code&gt; Unix用、 &lt;code&gt;;&lt;/code&gt; MSWIN32およびDOSのため）。</target>
        </trans-unit>
        <trans-unit id="337601b93965c28568bbedd0632699f2eefded6b" translate="yes" xml:space="preserve">
          <source>A list of files in the distribution, one file per line. The MANIFEST always uses Unix filepath conventions even if you're not on Unix. This means</source>
          <target state="translated">ディストリビューション内のファイルのリストで、1行に1つのファイルです。MANIFESTは、たとえUnixを使っていなくても、常にUnixのファイルパスの規約を使います。これは</target>
        </trans-unit>
        <trans-unit id="0555d0b38c03024b415a75a77593c5880fa79206" translate="yes" xml:space="preserve">
          <source>A list of one or more symbol names that are in the library/object file to be dynamically loaded. This is only required on some platforms.</source>
          <target state="translated">動的に読み込まれるライブラリ/オブジェクトファイルにある1つ以上のシンボル名のリスト。これは一部のプラットフォームでのみ必要です。</target>
        </trans-unit>
        <trans-unit id="681b6abf464391de8dd3a7916ae06f2d521a9817" translate="yes" xml:space="preserve">
          <source>A list of pads. The first one contains the names.</source>
          <target state="translated">パッドのリストです。最初のものには名前が入っています。</target>
        </trans-unit>
        <trans-unit id="02f9cb55d32eb52f68051c89a619f41d785a1129" translate="yes" xml:space="preserve">
          <source>A list of possible choices from which you may select only one, as in, &amp;ldquo;Would you like door A, B, or C?&amp;rdquo; Alternatives in regular expressions are separated with a single vertical bar: &lt;code&gt;|&lt;/code&gt;. Alternatives in normal Perl expressions are separated with a double vertical bar: &lt;code&gt;||&lt;/code&gt;. Logical alternatives in &lt;b&gt;Boolean&lt;/b&gt; expressions are separated with either &lt;code&gt;||&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt; .</source>
          <target state="translated">「ドアA、B、またはCをご希望ですか？」のように、1つだけ選択できる可能な選択肢のリスト。正規表現の選択肢は、1つの縦棒で区切られます： &lt;code&gt;|&lt;/code&gt; 。通常のPerlの式で代替は、二重縦線で区切られています。 &lt;code&gt;||&lt;/code&gt; 。&lt;b&gt;ブール&lt;/b&gt;式の論理的な選択肢は、 &lt;code&gt;||&lt;/code&gt; のいずれかで区切られます。または &lt;code&gt;or&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="346e1107e8ac97822d23a43881fe3f608701a635" translate="yes" xml:space="preserve">
          <source>A list of signal names supported by the current platform can be found in &lt;code&gt;$Config{sig_name}&lt;/code&gt; , which is provided by the &lt;code&gt;Config&lt;/code&gt; module. See &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt; for more details.</source>
          <target state="translated">現在のプラットフォームでサポートされている信号名のリストは、 &lt;code&gt;Config&lt;/code&gt; モジュールによって提供される &lt;code&gt;$Config{sig_name}&lt;/code&gt; にあります。詳細については、&lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9eb54a7b38bb34c8e5e028a36e767398adf41e8" translate="yes" xml:space="preserve">
          <source>A list of signal names supported by the current platform can be found in &lt;code&gt;$Config{sig_name}&lt;/code&gt; , which is provided by the &lt;code&gt;Config&lt;/code&gt; module. See &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; for more details.</source>
          <target state="translated">現在のプラットフォームでサポートされている信号名のリストは、 &lt;code&gt;Config&lt;/code&gt; モジュールによって提供される &lt;code&gt;$Config{sig_name}&lt;/code&gt; にあります。詳細については、&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d6a6ca6e50a55d219bc744f957b355e8b7592c8a" translate="yes" xml:space="preserve">
          <source>A list of the built-in functions in Perl can be found in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;.</source>
          <target state="translated">Perlの組み込み関数のリストは&lt;a href=&quot;perlfunc&quot;&gt;perlfuncにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="35384fe66627b2cc2fb84aa2b93b3f9464bdd2e5" translate="yes" xml:space="preserve">
          <source>A list started with e.g. a bullet-like &lt;code&gt;=item&lt;/code&gt; and continued with a numbered one. This is obviously inconsistent. For most translators the type of the</source>
          <target state="translated">リストは、たとえば弾丸のような &lt;code&gt;=item&lt;/code&gt; で始まり、番号付きのリストで続きました。これは明らかに矛盾しています。ほとんどの翻訳者にとって、</target>
        </trans-unit>
        <trans-unit id="aa018bd7e5de867ce0e0e74c715e38d76832212f" translate="yes" xml:space="preserve">
          <source>A list value may also be subscripted like a normal array. You must put the list in parentheses to avoid ambiguity. For example:</source>
          <target state="translated">リスト値は、通常の配列のように添え字にすることもできます。曖昧さを避けるために、リストを括弧で囲む必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6d0412d7581939fe7cd594904f6d1f6283358f69" translate="yes" xml:space="preserve">
          <source>A list-type op is usually constructed one kid at a time via &lt;code&gt;newLISTOP&lt;/code&gt; , &lt;code&gt;op_prepend_elem&lt;/code&gt; and &lt;code&gt;op_append_elem&lt;/code&gt; . Then finally it is passed to &lt;code&gt;op_convert_list&lt;/code&gt; to make it the right type.</source>
          <target state="translated">リストタイプのopは、通常、 &lt;code&gt;op_prepend_elem&lt;/code&gt; 、op_prepend_elem、および &lt;code&gt;op_append_elem&lt;/code&gt; を介して &lt;code&gt;newLISTOP&lt;/code&gt; に1 つの子として構築されます。次に、それは &lt;code&gt;op_convert_list&lt;/code&gt; に渡されて正しいタイプになります。</target>
        </trans-unit>
        <trans-unit id="9f682c29d99c6edee87a4e2c8b480a19c081d9f4" translate="yes" xml:space="preserve">
          <source>A literal of the form &lt;code&gt;v1.20.300.4000&lt;/code&gt; is parsed as a string composed of characters with the specified ordinals. This form, known as v-strings, provides an alternative, more readable way to construct strings, rather than use the somewhat less readable interpolation form &lt;code&gt;&quot;\x{1}\x{14}\x{12c}\x{fa0}&quot;&lt;/code&gt; . This is useful for representing Unicode strings, and for comparing version &quot;numbers&quot; using the string comparison operators, &lt;code&gt;cmp&lt;/code&gt; , &lt;code&gt;gt&lt;/code&gt; , &lt;code&gt;lt&lt;/code&gt; etc. If there are two or more dots in the literal, the leading &lt;code&gt;v&lt;/code&gt; may be omitted.</source>
          <target state="translated">&lt;code&gt;v1.20.300.4000&lt;/code&gt; 形式のリテラルは、指定された序数を持つ文字で構成される文字列として解析されます。この形式はv-stringsと呼ばれ、やや読み &lt;code&gt;&quot;\x{1}\x{14}\x{12c}\x{fa0}&quot;&lt;/code&gt; 補間形式&quot;\ x {1} \ x {14} \ x {12c} \ x {fa0}を使用するのではなく、文字列を構築するための代替のより読みやすい方法を提供します&quot;。これは、Unicode文字列を表す場合、および文字列比較演算子 &lt;code&gt;cmp&lt;/code&gt; 、 &lt;code&gt;gt&lt;/code&gt; 、 &lt;code&gt;lt&lt;/code&gt; などを使用してバージョン「番号」を比較する場合に便利です。リテラルに2つ以上のドットがある場合、先頭の &lt;code&gt;v&lt;/code&gt; を省略できます。</target>
        </trans-unit>
        <trans-unit id="59f7e21c905ecc7463ec1c2d73cca6ccc870ec21" translate="yes" xml:space="preserve">
          <source>A little bit less simple options</source>
          <target state="translated">シンプルなオプションを少し減らして</target>
        </trans-unit>
        <trans-unit id="1cd2ad667ca8cebc07144e83ae02050c5a406af0" translate="yes" xml:space="preserve">
          <source>A little builtin syntactic sugar means you can also say &lt;b&gt;-m&lt;i&gt;MODULE&lt;/i&gt;=foo,bar&lt;/b&gt; or &lt;b&gt;-M&lt;i&gt;MODULE&lt;/i&gt;=foo,bar&lt;/b&gt; as a shortcut for &lt;b&gt;'-M&lt;i&gt;MODULE&lt;/i&gt; qw(foo bar)'&lt;/b&gt;. This avoids the need to use quotes when importing symbols. The actual code generated by &lt;b&gt;-M&lt;i&gt;MODULE&lt;/i&gt;=foo,bar&lt;/b&gt; is &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; module &lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;(/,/,q{foo,bar})&lt;/code&gt; . Note that the &lt;code&gt;=&lt;/code&gt; form removes the distinction between &lt;b&gt;-m&lt;/b&gt; and &lt;b&gt;-M&lt;/b&gt;; that is, &lt;b&gt;-m&lt;i&gt;MODULE&lt;/i&gt;=foo,bar&lt;/b&gt; is the same as &lt;b&gt;-M&lt;i&gt;MODULE&lt;/i&gt;=foo,bar&lt;/b&gt;.</source>
          <target state="translated">少し組み込みの構文糖は、&lt;b&gt;'-M &lt;/b&gt;&lt;b&gt;&lt;i&gt;MODULE&lt;/i&gt;&lt;/b&gt;&lt;b&gt; qw（foo bar）'の&lt;/b&gt;ショートカットとして&lt;b&gt;-m &lt;i&gt;MODULE&lt;/i&gt; = foo、bar&lt;/b&gt;または&lt;b&gt;-M &lt;i&gt;MODULE&lt;/i&gt; = foo、bar&lt;/b&gt;と言うこともできることを意味します。これにより、シンボルをインポートするときに引用符を使用する必要がなくなります。&lt;b&gt;-M &lt;/b&gt;&lt;b&gt;&lt;i&gt;MODULE&lt;/i&gt;&lt;/b&gt;&lt;b&gt; = foo、bar&lt;/b&gt;によって生成される実際のコードは &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; module &lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;(/,/,q{foo,bar})&lt;/code&gt; モジュール&lt;a href=&quot;functions/split&quot;&gt;分割&lt;/a&gt;（/、/、q {foo、bar}）を使用します。 &lt;code&gt;=&lt;/code&gt; 形式は&lt;b&gt;-m&lt;/b&gt;と&lt;b&gt;-Mの&lt;/b&gt;違いを取り除くことに注意してください。つまり、&lt;b&gt;-m &lt;/b&gt;&lt;b&gt;&lt;i&gt;MODULE&lt;/i&gt;&lt;/b&gt;&lt;b&gt; = foo、bar&lt;/b&gt;は&lt;b&gt;-M &lt;/b&gt;&lt;b&gt;&lt;i&gt;MODULE&lt;/i&gt;&lt;/b&gt;&lt;b&gt; = foo、bar&lt;/b&gt;と同じです。&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="b161330532dd0ec0afc3fa6fafbca99d0e5e09ac" translate="yes" xml:space="preserve">
          <source>A little funky, because VOS's notion of ownership is a little funky (VOS).</source>
          <target state="translated">VOSの所有権という概念がちょっとファンキーだから(VOS</target>
        </trans-unit>
        <trans-unit id="fe38aea6f56711cc8a09262301b75b1d00f515d0" translate="yes" xml:space="preserve">
          <source>A little interface to ExtUtils::Installed to examine installed modules, validate your packlists and even create a tarball from an installed module.</source>
          <target state="translated">ExtUtils::Installed の小さなインターフェースで、インストールされたモジュールを調べたり、パックリストを検証したり、インストールされたモジュールから tarball を作成したりすることができます。</target>
        </trans-unit>
        <trans-unit id="fab5a9063d3279beff24f900f22a1e9be454b440" translate="yes" xml:space="preserve">
          <source>A little-known feature of &lt;a href=&quot;../test/harness&quot;&gt;Test::Harness&lt;/a&gt; is that it supported TODO lists in the plan:</source>
          <target state="translated">&lt;a href=&quot;../test/harness&quot;&gt;Test :: Harnessの&lt;/a&gt;あまり知られていない機能は、プランのTODOリストをサポートしていたことです。</target>
        </trans-unit>
        <trans-unit id="18dd594cfef1216511213db962d79c422701e3a6" translate="yes" xml:space="preserve">
          <source>A local modifies the listed variables to be local to the enclosing block, file, or eval. If more than one value is listed, the list must be placed in parentheses. See &lt;a href=&quot;../perlsub#Temporary-Values-via-local()&quot;&gt;Temporary Values via local() in perlsub&lt;/a&gt; for details, including issues with tied arrays and hashes.</source>
          <target state="translated">ローカルは、リストされた変数を、それを囲むブロック、ファイル、またはevalに対してローカルになるように変更します。複数の値がリストされている場合は、リストを括弧で囲む必要があります。&lt;a href=&quot;../perlsub#Temporary-Values-via-local()&quot;&gt;結合さ&lt;/a&gt;れた配列とハッシュの問題を含む詳細については、perlsubのlocal（）による一時値を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9869654ca036fa59fd44e2a08b434b738df4df1" translate="yes" xml:space="preserve">
          <source>A local modifies the listed variables to be local to the enclosing block, file, or eval. If more than one value is listed, the list must be placed in parentheses. See &lt;a href=&quot;perlsub#Temporary-Values-via-local()&quot;&gt;Temporary Values via local() in perlsub&lt;/a&gt; for details, including issues with tied arrays and hashes.</source>
          <target state="translated">ローカルは、リストされた変数を、それを囲むブロック、ファイル、またはevalに対してローカルになるように変更します。複数の値がリストされている場合は、リストを括弧で囲む必要があります。&lt;a href=&quot;perlsub#Temporary-Values-via-local()&quot;&gt;結合さ&lt;/a&gt;れた配列とハッシュの問題を含む詳細については、perlsubのlocal（）による一時値を参照してください。</target>
        </trans-unit>
        <trans-unit id="851216238693688504d3297975d3a9648a0c15ac" translate="yes" xml:space="preserve">
          <source>A locale is a set of data that describes various aspects of how various communities in the world categorize their world. These categories are broken down into the following types (some of which include a brief note here):</source>
          <target state="translated">ロケールとは、世界の様々なコミュニティが自分たちの世界をどのように分類しているかについて、様々な側面から記述したデータの集合である。これらの分類は、以下のようなタイプに分かれています(そのうちのいくつかは、ここで簡単な注意事項を含みます)。</target>
        </trans-unit>
        <trans-unit id="13e5d1d67a5e143b58f5105851151e51a7ee96cb" translate="yes" xml:space="preserve">
          <source>A location in a &lt;b&gt;hash table&lt;/b&gt; containing (potentially) multiple entries whose keys &amp;ldquo;hash&amp;rdquo; to the same hash value according to its hash function. (As internal policy, you don&amp;rsquo;t have to worry about it unless you&amp;rsquo;re into internals, or policy.)</source>
          <target state="translated">ハッシュ関数に基づいて、キーが同じハッシュ値に「ハッシュ」される複数のエントリを（場合によっては）含む&lt;b&gt;ハッシュテーブル&lt;/b&gt;内の場所。（内部ポリシーとして、内部またはポリシーに興味がなければ、心配する必要はありません。）</target>
        </trans-unit>
        <trans-unit id="62c12399ed6b551ce7f2dd44832d843392fa0233" translate="yes" xml:space="preserve">
          <source>A lock can either be used to guard the data contained within the variable being locked, or it can be used to guard something else, like a section of code. In this latter case, the variable in question does not hold any useful data, and exists only for the purpose of being locked. In this respect, the variable behaves like the mutexes and basic semaphores of traditional thread libraries.</source>
          <target state="translated">ロックは、ロックされている変数に含まれるデータを保護するために使用することもできますし、コードのセクションのような他の何かを保護するために使用することもできます。後者の場合、問題の変数は有用なデータを保持しておらず、ロックされる目的のためだけに存在しています。この点では、変数は従来のスレッドライブラリのミューテックスや基本セマフォのように振る舞います。</target>
        </trans-unit>
        <trans-unit id="e53273bd96405d6a9351857fe0d8e6743bfe42f3" translate="yes" xml:space="preserve">
          <source>A log of changes you've made to this module. The layout is free-form. Here's an example:</source>
          <target state="translated">このモジュールに行った変更のログです。レイアウトは自由形式です。ここに例を示します。</target>
        </trans-unit>
        <trans-unit id="e77a6f13193bcd6e24d605469f11ccf9737a2eb7" translate="yes" xml:space="preserve">
          <source>A lone dash on the command line will now be a legal option, and using it will set variable &lt;code&gt;$stdio&lt;/code&gt; .</source>
          <target state="translated">コマンドラインでのダッシュ1つだけが有効なオプションになり、これを使用すると変数 &lt;code&gt;$stdio&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="2ebb7eb8448d50869adcfaf8c37d6e3e449e059f" translate="yes" xml:space="preserve">
          <source>A lot of Git tools (Gitweb, GitHub, git log --pretty=oneline, ...) will only display the first line (cut off at 50 characters) when presenting commit summaries.</source>
          <target state="translated">多くの Git ツール (Gitweb,GitHub,git log --pretty=oneline,....)は、コミットサマリーを表示する際に、最初の行 (50文字でカットされている)だけを表示します。</target>
        </trans-unit>
        <trans-unit id="02a8d66dfb847fc32e205ee4aa1e54636c91fd8e" translate="yes" xml:space="preserve">
          <source>A lot of opcodes (this is an elementary operation in the internal perl stack machine) put an SV* on the stack. However, as an optimization the corresponding SV is (usually) not recreated each time. The opcodes reuse specially assigned SVs (</source>
          <target state="translated">多くのオペコード(これはPerl内部のスタックマシンでの初歩的な操作です)はSV*をスタック上に配置します。しかし、最適化のため、対応する SV は (通常は)毎回再作成されません。opcodes は特別に割り当てられた SV (</target>
        </trans-unit>
        <trans-unit id="afe9679193e46dcbc5b397149b0a40382533461a" translate="yes" xml:space="preserve">
          <source>A lot of the behaviour of &lt;code&gt;check()&lt;/code&gt; can be altered by setting package variables. See the section on &lt;code&gt;Global Variables&lt;/code&gt; for details on this.</source>
          <target state="translated">&lt;code&gt;check()&lt;/code&gt; の動作の多くは、パッケージ変数を設定することで変更できます。詳細については、 &lt;code&gt;Global Variables&lt;/code&gt; のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fc40634e762614784aeafebfe726c582b35ad008" translate="yes" xml:space="preserve">
          <source>A lot of the methods in this package are accessors to the various fields in the tar header:</source>
          <target state="translated">本パッケージのメソッドの多くは、tar ヘッダの様々なフィールドへのアクセサです。</target>
        </trans-unit>
        <trans-unit id="565ddf2f41fdaae2f6c398d4a9fce10061d3fdb0" translate="yes" xml:space="preserve">
          <source>A map to the empty string means that there is no alias defined for the code point.</source>
          <target state="translated">空の文字列へのマップは、コードポイントにエイリアスが定義されていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="962035547fe5a8c87c148cca16aad0a4071407ed" translate="yes" xml:space="preserve">
          <source>A mask of those &lt;b&gt;permission bits&lt;/b&gt; that should be forced off when creating files or directories, in order to establish a policy of whom you&amp;rsquo;ll ordinarily deny access to. See the &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">通常はアクセスを拒否するポリシーを確立するために、ファイルまたはディレクトリを作成するときに強制的にオフにする必要がある&lt;b&gt;許可ビットの&lt;/b&gt;マスク。 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfb92546e7ee6f466e3b9ad9b8c6c91db11b1f74" translate="yes" xml:space="preserve">
          <source>A meaningless value will currently be returned if the input is not an unsigned integer.</source>
          <target state="translated">入力が符号なし整数でない場合は、現在のところ無意味な値が返されます。</target>
        </trans-unit>
        <trans-unit id="46b7f4ae99fce16ec6771e2703c08b126f8c5237" translate="yes" xml:space="preserve">
          <source>A mechanism by which some high-level agent such as a user can pass its preferences down to its future offspring (child &lt;b&gt;processes&lt;/b&gt;, grandchild processes, great-grandchild processes, and so on). Each environment variable is a &lt;b&gt;key&lt;/b&gt;/&lt;b&gt;value&lt;/b&gt; pair, like one entry in a &lt;b&gt;hash&lt;/b&gt;.</source>
          <target state="translated">ユーザーなどの一部の高レベルエージェントが、その設定を将来の子孫に継承できるメカニズム（子&lt;b&gt;プロセス&lt;/b&gt;、孫プロセス、ひ孫プロセスなど）。各環境変数はある&lt;b&gt;キー&lt;/b&gt; / &lt;b&gt;値の&lt;/b&gt;内の1つのエントリのように、ペア&lt;b&gt;のハッシュ&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="2a69447aeea5209e44940fc7462f35a5d6ac88b2" translate="yes" xml:space="preserve">
          <source>A mechanism in Perl that lets you store up the output of each Perl &lt;b&gt;command&lt;/b&gt; and then flush it out as a single request to the &lt;b&gt;operating system&lt;/b&gt;. It&amp;rsquo;s enabled by setting the &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; ) variable to a true value. It&amp;rsquo;s used when you don&amp;rsquo;t want data sitting around, not going where it&amp;rsquo;s supposed to, which may happen because the default on a &lt;b&gt;file&lt;/b&gt; or &lt;b&gt;pipe&lt;/b&gt; is to use &lt;b&gt;block buffering&lt;/b&gt;.</source>
          <target state="translated">各Perl &lt;b&gt;コマンドの&lt;/b&gt;出力を保存し、&lt;b&gt;オペレーティングシステム&lt;/b&gt;への単一の要求としてフラッシュできるようにするPerlのメカニズム。 &lt;code&gt;$|&lt;/code&gt; 設定すると有効になります （ &lt;code&gt;$AUTOFLUSH&lt;/code&gt; ）変数をtrue値に。これは、&lt;b&gt;ファイル&lt;/b&gt;または&lt;b&gt;パイプの&lt;/b&gt;デフォルトが&lt;b&gt;ブロックバッファリング&lt;/b&gt;を使用するために発生する可能性のある、想定された場所にデータが移動しないようにする場合に使用され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="51120e7f8481f25cf88f8c7a272aee4be9724200" translate="yes" xml:space="preserve">
          <source>A memory address (pointer). Typically associated with a &lt;code&gt;void *&lt;/code&gt; type.</source>
          <target state="translated">メモリアドレス（ポインタ）。通常、 &lt;code&gt;void *&lt;/code&gt; タイプに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="3a89278430a1f2647d19e07faa6dcd5ce49e8cc5" translate="yes" xml:space="preserve">
          <source>A message of the form:</source>
          <target state="translated">形のメッセージ。</target>
        </trans-unit>
        <trans-unit id="f4fff5e041e8ffd1750d8230d717d49c7140db99" translate="yes" xml:space="preserve">
          <source>A message printed to the &lt;code&gt;STDERR&lt;/code&gt; stream to the effect that something might be wrong but isn&amp;rsquo;t worth blowing up over. See &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo; and the &lt;code&gt;warnings&lt;/code&gt; pragma in Camel chapter 28, &amp;ldquo;Pragmantic Modules&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;STDERR&lt;/code&gt; ストリームに出力されたメッセージで、何かが間違っている可能性がありますが、説明する価値はありません。Camelの第27章「関数」の &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; と、Camelの第28章「プラグマティックモジュール」の &lt;code&gt;warnings&lt;/code&gt; プラグマを参照してください。</target>
        </trans-unit>
        <trans-unit id="6a6e29399630661da9d8d4454f316b8b579ac7c9" translate="yes" xml:space="preserve">
          <source>A message to print prior to &lt;code&gt;@args&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;@args&lt;/code&gt; の前に出力するメッセージ。</target>
        </trans-unit>
        <trans-unit id="cd1e82245324d77d7c4b1f38686539fbc87f4207" translate="yes" xml:space="preserve">
          <source>A metacharacter can be matched by putting a backslash before it:</source>
          <target state="translated">メタ文字の前にバックスラッシュを付けることで、メタ文字をマッチさせることができます。</target>
        </trans-unit>
        <trans-unit id="fb23d39b57fee733dc53600af45c98c9b288bdde" translate="yes" xml:space="preserve">
          <source>A method is simply a subroutine that expects a reference to an object (or a package name, for class methods) as the first argument.</source>
          <target state="translated">メソッドは、第一引数としてオブジェクトへの参照(クラスメソッドの場合はパッケージ名)を期待するサブルーチンです。</target>
        </trans-unit>
        <trans-unit id="8b793382672991d71fa4d5891acf893cacd7e306" translate="yes" xml:space="preserve">
          <source>A method of making input and output efficient by passing one &lt;b&gt;block&lt;/b&gt; at a time. By default, Perl does block buffering to disk files. See &lt;b&gt;buffer&lt;/b&gt; and &lt;b&gt;command buffering&lt;/b&gt;.</source>
          <target state="translated">一度に1つの&lt;b&gt;ブロック&lt;/b&gt;を渡すことにより、入出力を効率化する方法。デフォルトでは、Perlはディスクファイルへのバッファリングをブロックします。&lt;b&gt;バッファ&lt;/b&gt;および&lt;b&gt;コマンドバッファリングを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="caf2b56be7a3ef3288ab77eb65ba11acb464aa6d" translate="yes" xml:space="preserve">
          <source>A method of storing numbers in &amp;ldquo;scientific notation&amp;rdquo;, such that the precision of the number is independent of its magnitude (the decimal point &amp;ldquo;floats&amp;rdquo;). Perl does its numeric work with floating-point numbers (sometimes called &amp;ldquo;floats&amp;rdquo;) when it can&amp;rsquo;t get away with using &lt;b&gt;integers&lt;/b&gt;. Floating-point numbers are mere approximations of real numbers.</source>
          <target state="translated">数値を「科学的表記」で格納する方法。数値の精度はその大きさ（小数点は「浮動小数点数」）に依存しません。Perlは、&lt;b&gt;整数の&lt;/b&gt;使用を&lt;b&gt;回避&lt;/b&gt;できない場合、浮動小数点数（「float」と呼ばれることもあります）で数値処理を行い&lt;b&gt;ます&lt;/b&gt;。浮動小数点数は、実数の単なる近似値です。</target>
        </trans-unit>
        <trans-unit id="944278d690e3fc7e64864c32faa75a96c4fa698a" translate="yes" xml:space="preserve">
          <source>A method returning a scalar containing definitions needed, typically for a C header file.</source>
          <target state="translated">通常はCヘッダファイルに必要な定義を含むスカラーを返すメソッド。</target>
        </trans-unit>
        <trans-unit id="b261259b0ea34efe663b89fa4a355d967119ff59" translate="yes" xml:space="preserve">
          <source>A method to return a suitable &lt;code&gt;#ifdef&lt;/code&gt; clause.</source>
          <target state="translated">適切な &lt;code&gt;#ifdef&lt;/code&gt; 句を返すメソッド。</target>
        </trans-unit>
        <trans-unit id="e298259952faa9b6dc589a73a54938eb75e8b9ca" translate="yes" xml:space="preserve">
          <source>A method to return a suitable C &lt;code&gt;if&lt;/code&gt; statement to check whether</source>
          <target state="translated">適切かどうかをチェックする適切なC &lt;code&gt;if&lt;/code&gt; ステートメントを返すメソッド</target>
        </trans-unit>
        <trans-unit id="b8d289dec370b10085acc876037d4a80d75d741c" translate="yes" xml:space="preserve">
          <source>A method to return a suitable assignment clause. If</source>
          <target state="translated">適切な代入節を返すメソッド。もし</target>
        </trans-unit>
        <trans-unit id="b7330449bff2c39517a4e897b762ab9507a795d4" translate="yes" xml:space="preserve">
          <source>A minimal required perl version, if present, will look like this:</source>
          <target state="translated">最小限必要な perl のバージョンがあれば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e9a3539678256349db8d3cedb932d5bd4be41d3e" translate="yes" xml:space="preserve">
          <source>A misnamed feature&amp;mdash;it should be called, &amp;ldquo;expecting your mother to pick up after you&amp;rdquo;. Strictly speaking, Perl doesn&amp;rsquo;t do this, but it relies on a reference-counting mechanism to keep things tidy. However, we rarely speak strictly and will often refer to the reference-counting scheme as a form of garbage collection. (If it&amp;rsquo;s any comfort, when your interpreter exits, a &amp;ldquo;real&amp;rdquo; garbage collector runs to make sure everything is cleaned up if you&amp;rsquo;ve been messy with circular references and such.)</source>
          <target state="translated">誤った名前の機能-「母親があなたの後に迎えに来ることを期待する」と呼ばれるべきです。厳密に言えば、Perlはこれを行いませんが、整然と保つために参照カウントメカニズムに依存しています。ただし、厳密に話すことはめったになく、参照カウントスキームをガベージコレクションの形式と呼ぶことがよくあります。 （快適であれば、インタープリターが終了すると、「実際の」ガベージコレクターが実行され、循環参照などで乱雑になっている場合は、すべてがクリーンアップされます。）</target>
        </trans-unit>
        <trans-unit id="b76b41563e694ef10941bc1da1406e4e19d640cf" translate="yes" xml:space="preserve">
          <source>A modifier available specifically to search and replace is the &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///e&lt;/a&gt;&lt;/code&gt; evaluation modifier. &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///e&lt;/a&gt;&lt;/code&gt; treats the replacement text as Perl code, rather than a double-quoted string. The value that the code returns is substituted for the matched substring. &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///e&lt;/a&gt;&lt;/code&gt; is useful if you need to do a bit of computation in the process of replacing text. This example counts character frequencies in a line:</source>
          <target state="translated">特に検索と置換に使用できる修飾子は、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///e&lt;/a&gt;&lt;/code&gt; 評価修飾子です。 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///e&lt;/a&gt;&lt;/code&gt; は、置換テキストを二重引用符付き文字列ではなく、Perlコードとして扱います。コードが返す値は、一致した部分文字列に置き換えられます。 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///e&lt;/a&gt;&lt;/code&gt; は、テキストを置き換えるプロセスで少し計算を行う必要がある場合に役立ちます。この例では、1行の文字頻度をカウントします。</target>
        </trans-unit>
        <trans-unit id="68d67d7e195f6e0fb6e2bd79bf9224c3c8d1e2fd" translate="yes" xml:space="preserve">
          <source>A module for loading must be quoted.</source>
          <target state="translated">読み込み用のモジュールは引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="8d98e6118bd0f23607596b779080678b5a48db1b" translate="yes" xml:space="preserve">
          <source>A module is a file that (by convention) provides a class of the same name (sans the .pm), plus an import method in that class that can be called to fetch exported symbols. This module may implement some of its methods by loading dynamic C or C++ objects, but that should be totally transparent to the user of the module. Likewise, the module might set up an AUTOLOAD function to slurp in subroutine definitions on demand, but this is also transparent. Only the</source>
          <target state="translated">モジュールとは、(慣習的に)同じ名前のクラス(.pm を省略したもの)と、エクスポートされたシンボルを取得するために呼び出されるインポートメソッドを提供するファイルのことです。このモジュールは動的な C や C++オブジェクトをロードすることでいくつかのメソッドを実装するかもしれませんが、それはモジュールのユーザにとっては完全に透過的なものでなければなりません。同様に、必要に応じてサブルーチン定義を読み込むためにAUTOLOAD関数を設定するかもしれませんが、これも透過的です。だけが透過的です。</target>
        </trans-unit>
        <trans-unit id="22a73f9dccbade36d652d965f87a8dc414d1002a" translate="yes" xml:space="preserve">
          <source>A module is just a set of related functions in a library file, i.e., a Perl package with the same name as the file. It is specifically designed to be reusable by other modules or programs. It may do this by providing a mechanism for exporting some of its symbols into the symbol table of any package using it, or it may function as a class definition and make its semantics available implicitly through method calls on the class and its objects, without explicitly exporting anything. Or it can do a little of both.</source>
          <target state="translated">モジュールとは、ライブラリファイル内の関連する関数のセット、つまりファイルと同じ名前のPerlパッケージのことです。モジュールは、他のモジュールやプログラムで再利用できるように特別に設計されています。また、クラス定義として機能し、明示的に何もエクスポートせずに、クラスとそのオブジェクトのメソッド呼び出しを通して暗黙的にそのセマンティクスを利用できるようにすることもできます。あるいは、その両方を少しだけ行うこともできます。</target>
        </trans-unit>
        <trans-unit id="e2c608d01740d058ca105f502acc61136af2e317" translate="yes" xml:space="preserve">
          <source>A module that breaks a program text into a sequence of &lt;b&gt;tokens&lt;/b&gt; for later analysis by a parser.</source>
          <target state="translated">パーサーによる後の分析のために、プログラムのテキストを一連の&lt;b&gt;トークン&lt;/b&gt;に分割するモジュール。</target>
        </trans-unit>
        <trans-unit id="a247d01be7fadaf27f2b9413690f6e9d188b0db4" translate="yes" xml:space="preserve">
          <source>A module that helps you test testing modules that are built with &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../builder&quot;&gt;Test :: Builderで作成&lt;/a&gt;されたテストモジュールのテストに役立つモジュール。</target>
        </trans-unit>
        <trans-unit id="3605e1a22b2192fa5aa9baada403491f3d035bb2" translate="yes" xml:space="preserve">
          <source>A module that implements DOS-like globbing with a few enhancements. It is largely compatible with perlglob.exe (the M$ setargv.obj version) in all but one respect--it understands wildcards in directory components.</source>
          <target state="translated">DOS ライクなグロブを実装したモジュールで、いくつかの機能強化が施されています。perlglob.exe (M$ setargv.obj バージョン)との互換性がありますが、一つの点以外はほとんど互換性があります --ディレクトリコンポーネントのワイルドカードを理解します。</target>
        </trans-unit>
        <trans-unit id="28b02d8f461ab26400c63c168a94b3b2407585a9" translate="yes" xml:space="preserve">
          <source>A module's code has to be warning and strict-clean, since you can't guarantee the conditions that it'll be used under. Besides, you wouldn't want to distribute code that wasn't warning or strict-clean anyway, right?</source>
          <target state="translated">モジュールのコードは警告や厳密なクリーンさが求められます。それに、警告や厳密にクリーンでないコードを配布したいとは思わないでしょう?</target>
        </trans-unit>
        <trans-unit id="c91f5a59bb26aa2af0fbaed73706b37f93fe9a63" translate="yes" xml:space="preserve">
          <source>A more complete and flexible interface for reading/writing gzip files/buffers is included with the module &lt;code&gt;IO-Compress-Zlib&lt;/code&gt; . See &lt;a href=&quot;../io/compress/gzip&quot;&gt;IO::Compress::Gzip&lt;/a&gt; and &lt;a href=&quot;../io/uncompress/gunzip&quot;&gt;IO::Uncompress::Gunzip&lt;/a&gt; for more details.</source>
          <target state="translated">gzipファイル/バッファを読み書きするためのより完全で柔軟なインターフェイスは、モジュール &lt;code&gt;IO-Compress-Zlib&lt;/code&gt; に含まれています。参照&lt;a href=&quot;../io/compress/gzip&quot;&gt;IO ::圧縮:: Gzipで&lt;/a&gt;と&lt;a href=&quot;../io/uncompress/gunzip&quot;&gt;IO ::解凍:: Gunzipの&lt;/a&gt;詳細について。</target>
        </trans-unit>
        <trans-unit id="a47893a0d4c8d8763c8f1003ea95b492858375e4" translate="yes" xml:space="preserve">
          <source>A more complete example of this is the Shell module on CPAN, which can treat undefined subroutine calls as calls to external programs.</source>
          <target state="translated">より完全な例としては、CPANのShellモジュールがあり、未定義のサブルーチン呼び出しを外部プログラムの呼び出しとして扱うことができます。</target>
        </trans-unit>
        <trans-unit id="548a58ac3a8a4f644d16e2322da948be053c0188" translate="yes" xml:space="preserve">
          <source>A more dangerous version of getcwd(), but potentially faster.</source>
          <target state="translated">getcwd()のより危険なバージョンですが、潜在的にはより高速です。</target>
        </trans-unit>
        <trans-unit id="9c501a7097bf538c4d236187aed836b438d78d12" translate="yes" xml:space="preserve">
          <source>A more dangerous, but potentially faster version of abs_path.</source>
          <target state="translated">abs_path のより危険な、しかし潜在的に高速なバージョン。</target>
        </trans-unit>
        <trans-unit id="ac7a13ddb80b2e7ad5a52fa1664ac4bd3c5aef4e" translate="yes" xml:space="preserve">
          <source>A more direct work around is to change the filehandles used by &lt;a href=&quot;builder&quot;&gt;Test::Builder&lt;/a&gt;.</source>
          <target state="translated">より直接的な回避策は、&lt;a href=&quot;builder&quot;&gt;Test :: Builderが&lt;/a&gt;使用するファイルハンドルを変更することです。</target>
        </trans-unit>
        <trans-unit id="3f085d06d504bc04c8c1f364c54e3b2d32d488c0" translate="yes" xml:space="preserve">
          <source>A more elegant (and safer) interface is needed.</source>
          <target state="translated">よりエレガントで安全なインターフェースが必要です。</target>
        </trans-unit>
        <trans-unit id="d906501834bb08ebb1263e2b0973fc289f4c913f" translate="yes" xml:space="preserve">
          <source>A more general approach is to intervene manually, as with an example for the DB_File module, which requires SleepyCat's libdb.sl:</source>
          <target state="translated">より一般的なアプローチは、DB_Fileモジュールの例のように手動で介入することです。</target>
        </trans-unit>
        <trans-unit id="a0a3703fe588fb0e60a0c01fcfb0d140fe8770a1" translate="yes" xml:space="preserve">
          <source>A more readable, and perhaps more &quot;plain&quot; way is to use an alternate set of delimiters that doesn't require a single &quot;&amp;gt;&quot; to be escaped. Doubled angle brackets (&quot;&amp;lt;&amp;lt;&quot; and &quot;&amp;gt;&amp;gt;&quot;) may be used</source>
          <target state="translated">より読みやすく、おそらくより「わかりやすい」方法は、単一の「&amp;gt;」をエスケープする必要のない区切り文字の代替セットを使用することです。二重山かっこ（ &quot;&amp;lt;&amp;lt;&quot;および &quot;&amp;gt;&amp;gt;&quot;）を使用できます</target>
        </trans-unit>
        <trans-unit id="4f3108171bdddd798db1e9b26d8d770fd7116c20" translate="yes" xml:space="preserve">
          <source>A morpheme in a programming language, the smallest unit of text with semantic significance.</source>
          <target state="translated">プログラミング言語における形態素で、意味的な意味を持つテキストの最小単位。</target>
        </trans-unit>
        <trans-unit id="2790cfc68a916af917f3cc04e172e9586561a9c1" translate="yes" xml:space="preserve">
          <source>A naive, but often sufficient heuristic on ASCII platforms, for testing the first highbit byte-sequence in a BOM-less file (whether in code or in Pod!), to see whether that sequence is valid as UTF-8 (RFC 2279) is to check whether that the first byte in the sequence is in the range 0xC2 - 0xFD</source>
          <target state="translated">素朴ですが、ASCIIプラットフォーム上では、BOMレスファイル(コードでもPodでも!)の最初のハイビットバイトシーケンスをテストして、そのシーケンスがUTF-8として有効かどうかを確認するために、しばしば十分なヒューリスティックがあります(RFC2279)。</target>
        </trans-unit>
        <trans-unit id="826c2733de66381609264a147718bd8a6dee2df5" translate="yes" xml:space="preserve">
          <source>A name for a concrete set of behaviors. A role is a way to add behavior to a class without inheritance.</source>
          <target state="translated">具体的な振る舞いの集合の名前です。ロールは、継承なしでクラスにビヘイビアを追加する方法です。</target>
        </trans-unit>
        <trans-unit id="6cc90f6ad3d71e4b26203e2d58a28aac467dba0f" translate="yes" xml:space="preserve">
          <source>A name that represents a particular instance of opening a directory to read it, until you close it. See the &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">ディレクトリを閉じるまで、ディレクトリを開いて読み取る特定のインスタンスを表す名前。 &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="57d4f638a5f1b060674c6232dbb757e9b9e2d99e" translate="yes" xml:space="preserve">
          <source>A name you give to a &lt;b&gt;statement&lt;/b&gt; so that you can talk about that statement elsewhere in the program.</source>
          <target state="translated">プログラムの他の場所でそのステートメントについて話すことができるように、&lt;b&gt;ステートメントに&lt;/b&gt;付けた名前。</target>
        </trans-unit>
        <trans-unit id="9e963f1a0b66c9a6c01f8278ff2607d7847c7265" translate="yes" xml:space="preserve">
          <source>A named array in scalar context is quite different from what would at first glance appear to be a list in scalar context. You can't get a list like &lt;code&gt;(1,2,3)&lt;/code&gt; into being in scalar context, because the compiler knows the context at compile time. It would generate the scalar comma operator there, not the list construction version of the comma. That means it was never a list to start with.</source>
          <target state="translated">スカラーコンテキストの名前付き配列は、一見するとスカラーコンテキストのリストのように見えるものとはかなり異なります。コンパイラーはコンパイル時にコンテキストを認識しているため、 &lt;code&gt;(1,2,3)&lt;/code&gt; のようなリストをスカラーコンテキストに入れることはできません。そこでは、コンマのリスト構築バージョンではなく、スカラーコンマ演算子が生成されます。つまり、それが最初からリストになることはありませんでした。</target>
        </trans-unit>
        <trans-unit id="75daf7108ed110da5eff87e476f0ddf2290f10b8" translate="yes" xml:space="preserve">
          <source>A named capture group. Identical in every respect to normal capturing parentheses &lt;code&gt;()&lt;/code&gt; but for the additional fact that the group can be referred to by name in various regular expression constructs (like &lt;code&gt;\g{NAME}&lt;/code&gt; ) and can be accessed by name after a successful match via &lt;code&gt;%+&lt;/code&gt; or &lt;code&gt;%-&lt;/code&gt; . See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for more details on the &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%-&lt;/code&gt; hashes.</source>
          <target state="translated">名前付きキャプチャグループ。通常のキャプチャ括弧 &lt;code&gt;()&lt;/code&gt; とすべての点で同じですが、グループはさまざまな正規表現構成（ &lt;code&gt;\g{NAME}&lt;/code&gt; ）で名前で参照でき、 &lt;code&gt;%+&lt;/code&gt; で一致した後に名前でアクセスできるまたは &lt;code&gt;%-&lt;/code&gt; 。参照&lt;a href=&quot;perlvar&quot;&gt;はperlvar&lt;/a&gt;の詳細については、 &lt;code&gt;%+&lt;/code&gt; と &lt;code&gt;%-&lt;/code&gt; ハッシュ。</target>
        </trans-unit>
        <trans-unit id="184923b65ef8ae0c8a3e87da3ade2989c9cad4ca" translate="yes" xml:space="preserve">
          <source>A named collection of data, usually stored on disk in a &lt;b&gt;directory&lt;/b&gt; in a &lt;b&gt;filesystem&lt;/b&gt;. Roughly like a document, if you&amp;rsquo;re into office metaphors. In modern filesystems, you can actually give a file more than one name. Some files have special properties, like directories and devices.</source>
          <target state="translated">名前付きのデータのコレクション。通常は、ディスク上の&lt;b&gt;ファイルシステムの&lt;/b&gt;&lt;b&gt;ディレクトリ&lt;/b&gt;に格納され&lt;b&gt;ます&lt;/b&gt;。おおまかに言えば、ドキュメントのように、オフィスの比喩に興味があるなら。最近のファイルシステムでは、実際にはファイルに複数の名前を付けることができます。一部のファイルには、ディレクトリやデバイスなどの特別なプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="6a9ab3c01eb064a3661e1bb7b921e5b073d19ecd" translate="yes" xml:space="preserve">
          <source>A named or otherwise accessible piece of program that can be invoked from elsewhere in the program in order to accomplish some subgoal of the program. A subroutine is often parameterized to accomplish different but related things depending on its input &lt;b&gt;arguments&lt;/b&gt;. If the subroutine returns a meaningful &lt;b&gt;value&lt;/b&gt;, it is also called a &lt;b&gt;function&lt;/b&gt;.</source>
          <target state="translated">プログラムのいくつかのサブゴールを達成するためにプログラムの他の場所から呼び出すことができる、名前が付けられた、または他の方法でアクセス可能なプログラム。サブルーチンは、入力&lt;b&gt;引数に&lt;/b&gt;応じて異なるが関連することを実行するようにパラメーター化されることがよくあります。サブルーチンが意味のある&lt;b&gt;値を&lt;/b&gt;返す&lt;b&gt;場合&lt;/b&gt;、それは&lt;b&gt;関数&lt;/b&gt;とも呼ばれ&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="fd84ea80f8d7433a1aa60b125a9e6b4dc8885ca9" translate="yes" xml:space="preserve">
          <source>A named pipe (often referred to as a FIFO) is an old Unix IPC mechanism for processes communicating on the same machine. It works just like regular anonymous pipes, except that the processes rendezvous using a filename and need not be related.</source>
          <target state="translated">名前付きパイプ (FIFO と呼ばれることが多い)は、同じマシン上で通信するプロセスのための古い Unix IPC メカニズムです。これは通常の匿名パイプと同じように動作しますが、プロセスがファイル名を使ってランデブーすることと、関連性を持たせる必要がないことを除いては、通常の匿名パイプと同じように動作します。</target>
        </trans-unit>
        <trans-unit id="e0d06a3ea39fd5acfb66f824c51baebd59e34891" translate="yes" xml:space="preserve">
          <source>A named storage location that can hold any of various kinds of &lt;b&gt;value&lt;/b&gt;, as your program sees fit.</source>
          <target state="translated">プログラムが適切と考えるように、さまざまな種類の&lt;b&gt;値を&lt;/b&gt;保持できる名前付きストレージの場所。</target>
        </trans-unit>
        <trans-unit id="092b494909d87658298161632e734b7420bfadba" translate="yes" xml:space="preserve">
          <source>A negatable option is specified with an exclamation mark &lt;code&gt;!&lt;/code&gt; after the option name:</source>
          <target state="translated">否定可能なオプションが感嘆符で指定されています &lt;code&gt;!&lt;/code&gt; オプション名の後：</target>
        </trans-unit>
        <trans-unit id="99e2aec2990f88ba3867f8f52b0dfe7ccc80feb8" translate="yes" xml:space="preserve">
          <source>A negated expression, whether &lt;code&gt;!(EXPR)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/not&quot;&gt;not(EXPR)&lt;/a&gt;&lt;/code&gt;, or a logical exclusive-or, &lt;code&gt;(EXPR1) &lt;a href=&quot;functions/xor&quot;&gt;xor&lt;/a&gt; (EXPR2)&lt;/code&gt; . The bitwise versions (&lt;code&gt;~&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;) are not included.</source>
          <target state="translated">否定表現、か &lt;code&gt;!(EXPR)&lt;/code&gt; か &lt;code&gt;&lt;a href=&quot;functions/not&quot;&gt;not(EXPR)&lt;/a&gt;&lt;/code&gt; 、または論理的な排他的論理和、 &lt;code&gt;(EXPR1) &lt;a href=&quot;functions/xor&quot;&gt;xor&lt;/a&gt; (EXPR2)&lt;/code&gt; 。ビット単位のバージョン（ &lt;code&gt;~&lt;/code&gt; および &lt;code&gt;^&lt;/code&gt; ）は含まれていません。</target>
        </trans-unit>
        <trans-unit id="854efffaefa787b0da74283032eac82589c1370b" translate="yes" xml:space="preserve">
          <source>A negative signal name is the same as a negative signal number, killing process groups instead of processes. For example, &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt; '-KILL', $pgrp&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt; -9, $pgrp&lt;/code&gt; will send &lt;code&gt;SIGKILL&lt;/code&gt; to the entire process group specified. That means you usually want to use positive not negative signals.</source>
          <target state="translated">負のシグナル名は負のシグナル番号と同じで、プロセスではなくプロセスグループを強制終了します。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt; '-KILL', $pgrp&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt; -9, $pgrp&lt;/code&gt; は、指定されたプロセスグループ全体に &lt;code&gt;SIGKILL&lt;/code&gt; を送信します。つまり、通常は負の信号ではなく正の信号を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="489423251916154fc8d55b14cad49fcf24beefc2" translate="yes" xml:space="preserve">
          <source>A negative signal name is the same as a negative signal number, killing process groups instead of processes. For example, &lt;code&gt;&lt;a href=&quot;kill&quot;&gt;kill&lt;/a&gt; '-KILL', $pgrp&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;kill&quot;&gt;kill&lt;/a&gt; -9, $pgrp&lt;/code&gt; will send &lt;code&gt;SIGKILL&lt;/code&gt; to the entire process group specified. That means you usually want to use positive not negative signals.</source>
          <target state="translated">負のシグナル名は負のシグナル番号と同じで、プロセスではなくプロセスグループを強制終了します。たとえば、 &lt;code&gt;&lt;a href=&quot;kill&quot;&gt;kill&lt;/a&gt; '-KILL', $pgrp&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;kill&quot;&gt;kill&lt;/a&gt; -9, $pgrp&lt;/code&gt; は、指定されたプロセスグループ全体に &lt;code&gt;SIGKILL&lt;/code&gt; を送信します。つまり、通常は負の信号ではなく正の信号を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ea7af62eb6dd0992f67ddc428ca2b71250ece618" translate="yes" xml:space="preserve">
          <source>A nested code block was found that started with a delimiter that was specified as being only to be used as an outermost bracket.</source>
          <target state="translated">一番外側の括弧としてのみ使用されるように指定された区切り文字で始まる入れ子になったコードブロックが見つかりました。</target>
        </trans-unit>
        <trans-unit id="adfb1c2f0e03b3f5c0a88fd5a3243fdba91d6307" translate="yes" xml:space="preserve">
          <source>A new Net::POP3 object must be created with the</source>
          <target state="translated">新しい Net::POP3 オブジェクトは</target>
        </trans-unit>
        <trans-unit id="a6942aa9b1458599174d5fd62309534ead314562" translate="yes" xml:space="preserve">
          <source>A new Net::SMTP object must be created with the</source>
          <target state="translated">新しい Net::SMTP オブジェクトは</target>
        </trans-unit>
        <trans-unit id="a156df59890d9311b601d33944f7c60f5c525f91" translate="yes" xml:space="preserve">
          <source>A new dumper is created by a call</source>
          <target state="translated">を呼び出すことで新しいダンパが作成されます。</target>
        </trans-unit>
        <trans-unit id="ce307d445764b039e813c87b536bf4d7ae071734" translate="yes" xml:space="preserve">
          <source>A new executable loads an extension compiled for the old executable when an old perl executable is running. In this case the extension will not pick up the forwarder - with fatal results.</source>
          <target state="translated">新しい実行ファイルは、古い perl 実行ファイルが実行されているときに、古い実行ファイル用にコンパイルされた拡張モジュールをロードします。この場合、拡張モジュールはフォワーダを拾いません-致命的な結果になります。</target>
        </trans-unit>
        <trans-unit id="ebbd18c3575dd80f81d435a80fe2d3c8ed42ba76" translate="yes" xml:space="preserve">
          <source>A new feature that allows the declaration of &lt;b&gt;variables&lt;/b&gt; and &lt;b&gt;subroutines&lt;/b&gt; with modifiers, as in &lt;code&gt;sub foo : locked
method&lt;/code&gt; . Also another name for an &lt;b&gt;instance variable&lt;/b&gt; of an &lt;b&gt;object&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;sub foo : locked method&lt;/code&gt; ように、修飾子を使用して&lt;b&gt;変数&lt;/b&gt;と&lt;b&gt;サブルーチン&lt;/b&gt;を宣言できる新しい機能：lockedメソッド。また、&lt;b&gt;オブジェクトの&lt;/b&gt;&lt;b&gt;インスタンス変数の&lt;/b&gt;別名。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e164afa95fb2ed837b476e0b8fef0b485a678f9f" translate="yes" xml:space="preserve">
          <source>A new version of the output file is always created, which inherits the structure and RMS attributes of the input file, except for owner and protections (and possibly timestamps; see below). All data from the input file is copied to the output file; if either of the first two parameters to &lt;code&gt;rmscopy&lt;/code&gt; is a file handle, its position is unchanged. (Note that this means a file handle pointing to the output file will be associated with an old version of that file after &lt;code&gt;rmscopy&lt;/code&gt; returns, not the newly created version.)</source>
          <target state="translated">所有者と保護（および場合によってはタイムスタンプ。以下を参照）を除いて、入力ファイルの構造とRMS属性を継承する出力ファイルの新しいバージョンが常に作成されます。入力ファイルのすべてのデータが出力ファイルにコピーされます。 &lt;code&gt;rmscopy&lt;/code&gt; の最初の2つのパラメーターのいずれかがファイルハンドルである場合、その位置は変更されません。 （これは、出力ファイルを指すファイルハンドルが、新しく作成されたバージョンではなく、 &lt;code&gt;rmscopy&lt;/code&gt; が返された後、そのファイルの古いバージョンに関連付けられることを意味します。）</target>
        </trans-unit>
        <trans-unit id="c0eacc7ea97ca14f2375b6edf715d33122368ca7" translate="yes" xml:space="preserve">
          <source>A nice general-purpose fixer-upper function for indented here documents follows. It expects to be called with a here document as its argument. It looks to see whether each line begins with a common substring, and if so, strips that substring off. Otherwise, it takes the amount of leading whitespace found on the first line and removes that much off each subsequent line.</source>
          <target state="translated">インデントされた here 文書のための汎用的なフィクサーアップ関数を以下に示します。この関数は here ドキュメントを引数にして呼ばれることを期待しています。これは、各行が共通の部分文字列で始まっているかどうかを調べ、もしそうであれば、その部分文字列を削除します。そうでなければ、最初の行で見つかった先頭の空白の量を取り、 それ以降の各行からその量を削除します。</target>
        </trans-unit>
        <trans-unit id="0198bb3fbec60180f4c0bac09f0a4bb94105a46c" translate="yes" xml:space="preserve">
          <source>A nickname for something, which behaves in all ways as though you&amp;rsquo;d used the original name instead of the nickname. Temporary aliases are implicitly created in the loop variable for &lt;code&gt;foreach&lt;/code&gt; loops, in the &lt;code&gt;$_&lt;/code&gt; variable for &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; operators, in &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; during &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;&amp;rsquo;s comparison function, and in each element of &lt;code&gt;@_&lt;/code&gt; for the &lt;b&gt;actual arguments&lt;/b&gt; of a subroutine call. Permanent aliases are explicitly created in &lt;b&gt;packages&lt;/b&gt; by &lt;b&gt;importing&lt;/b&gt; symbols or by assignment to &lt;b&gt;typeglobs&lt;/b&gt;. Lexically scoped aliases for package variables are explicitly created by the &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; declaration.</source>
          <target state="translated">何かのニックネーム。ニックネームの代わりに元の名前を使用した場合と同じように動作します。一時的なエイリアスが暗黙のためのループ変数で作成された &lt;code&gt;foreach&lt;/code&gt; の中に、ループ &lt;code&gt;$_&lt;/code&gt; のための可変 &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; の事業者に &lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; の間に &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; の比較機能、およびそれぞれの要素に &lt;code&gt;@_&lt;/code&gt; のための&lt;b&gt;実引数&lt;/b&gt; Aのサブルーチン呼び出し。恒久的なエイリアスは、シンボルを&lt;b&gt;インポート&lt;/b&gt;するか、&lt;b&gt;タイプグロブに&lt;/b&gt;割り当てることにより、&lt;b&gt;パッケージに&lt;/b&gt;明示的に作成され&lt;b&gt;ます&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;。パッケージ変数の字句スコープのエイリアスは &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 宣言によって明示的に作成されます。</target>
        </trans-unit>
        <trans-unit id="c1173dc0bd47411653c3329572e8d27b49fadacc" translate="yes" xml:space="preserve">
          <source>A no-op job.</source>
          <target state="translated">禁断の仕事。</target>
        </trans-unit>
        <trans-unit id="fb1ec4028a0ac13b58d2706d78d6f0e42a16b590" translate="yes" xml:space="preserve">
          <source>A no-op job. Returned by &lt;code&gt;TAP::Parser::Scheduler&lt;/code&gt; as an instruction to the harness to spin (keep executing tests) while the scheduler can't return a real job.</source>
          <target state="translated">何もしない仕事。 &lt;code&gt;TAP::Parser::Scheduler&lt;/code&gt; により、スケジューラーが実際のジョブを返すことができない間、スピン（テストの実行を継続）するためのハーネスへの命令として返されます。</target>
        </trans-unit>
        <trans-unit id="3187ac42757f3c2b53340569d4306b0db3207981" translate="yes" xml:space="preserve">
          <source>A non-optional prefix was specified but wasn't found at the start of the text.</source>
          <target state="translated">オプション以外の接頭辞が指定されていましたが、テキストの先頭には見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="f9ce11826e25a9f2a78731b7ee2ed1865f372e1a" translate="yes" xml:space="preserve">
          <source>A not so obvious caveat with this (see [RT #79908]) is that the variable will be immediately inlined, and will stop behaving like a normal lexical variable, e.g. this will print &lt;code&gt;79907&lt;/code&gt; , not &lt;code&gt;79908&lt;/code&gt; :</source>
          <target state="translated">これに関するそれほど明白な警告（[RT＃79908]を参照）は、変数がすぐにインライン化され、通常の字句変数のように動作を停止することです。たとえば、これは &lt;code&gt;79907&lt;/code&gt; ではなく &lt;code&gt;79908&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="33aa5e0c48db29d1cb8a94c57d888257eb0656f5" translate="yes" xml:space="preserve">
          <source>A notable and rather unavoidable problem with this method: &quot;x-mingo-tom&quot; has an &quot;x&quot; because the whole tag isn't an IANA-registered tag -- but super_languages('x-mingo-tom') is ('x-mingo') -- which isn't really right, since 'i-mingo' is registered. But this module has no way of knowing that. (But note that same_language_tag('x-mingo', 'i-mingo') is TRUE.)</source>
          <target state="translated">この方法の顕著で避けられない問題があります.&quot;x-mingo-tom &quot;に &quot;x &quot;が付いているのは、タグ全体がIANA登録されたタグではないからです --しかし、super_languages('x-mingo-tom')は('x-mingo')です --'i-mingo'は登録されているので、これは本当は正しくありません。しかし、このモジュールにはそれを知る術がありません。(ただし、 same_language_tag('x-mingo','i-mingo')は TRUE であることに注意してください)。</target>
        </trans-unit>
        <trans-unit id="11f822ddf21914cec4db6b8a6e4ef4d83bd0921c" translate="yes" xml:space="preserve">
          <source>A note about prefixes</source>
          <target state="translated">接頭辞についての注意点</target>
        </trans-unit>
        <trans-unit id="0a3c02a71990e114ae348bdc123412980dc80cfc" translate="yes" xml:space="preserve">
          <source>A note on freshness</source>
          <target state="translated">鮮度についての注意事項</target>
        </trans-unit>
        <trans-unit id="b0e5798976260679942afb564efdac5fe47bc36f" translate="yes" xml:space="preserve">
          <source>A note: to save time, 'regular expression' is often abbreviated as regexp or regex. Regexp is a more natural abbreviation than regex, but is harder to pronounce. The Perl pod documentation is evenly split on regexp vs regex; in Perl, there is more than one way to abbreviate it. We'll use regexp in this tutorial.</source>
          <target state="translated">注意:時間を節約するために、「正規表現」はしばしばregexpまたはregexと略されます。Regexp は regex よりも自然な省略形ですが、発音が難しいです。Perl のポッドのドキュメントでは、regexp と regex の間で均等に分かれています。このチュートリアルでは regexp を使います。</target>
        </trans-unit>
        <trans-unit id="7a28dfd2dad981af662c7cb062386ed614bc87a3" translate="yes" xml:space="preserve">
          <source>A notional &amp;ldquo;baton&amp;rdquo; handed around the Perl community indicating who is the lead integrator in some arena of development.</source>
          <target state="translated">Perlコミュニティーを取り巻く概念的な「バトン」は、開発のある領域でリードインテグレーターが誰であるかを示しています。</target>
        </trans-unit>
        <trans-unit id="ab0d25629a9f27d8e2343a6d3ae7ea4be0af2ea6" translate="yes" xml:space="preserve">
          <source>A number in base 16, &amp;ldquo;hex&amp;rdquo; for short. The digits for 10 through 15 are customarily represented by the letters &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;f&lt;/code&gt; . Hexadecimal constants in Perl start with &lt;code&gt;0x&lt;/code&gt; . See also the &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt; function in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo;.</source>
          <target state="translated">基数16の数値、略して「16進数」。通常、10から15の数字は &lt;code&gt;a&lt;/code&gt; から &lt;code&gt;f&lt;/code&gt; の文字で表されます。Perlの16進定数は &lt;code&gt;0x&lt;/code&gt; で始まります。Camelの第27章「関数」の &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt; 関数も参照してください。</target>
        </trans-unit>
        <trans-unit id="a2e5df9d465cc20aefe1124101a063a27122315b" translate="yes" xml:space="preserve">
          <source>A number in base 8. Only the digits 0 through 7 are allowed. Octal constants in Perl start with 0, as in 013. See also the &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">基数8の数値。0〜7の数字のみが許可されます。Perlの8進定数は、013も参照のように、0で始まる &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="a69cd7220ef5a1c647fe095901d92bd9cd440d40" translate="yes" xml:space="preserve">
          <source>A number of backslash sequences have to do with changing the character, or characters following them. &lt;code&gt;\l&lt;/code&gt; will lowercase the character following it, while &lt;code&gt;\u&lt;/code&gt; will uppercase (or, more accurately, titlecase) the character following it. They provide functionality similar to the functions &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">バックスラッシュシーケンスの多くは、文字またはそれに続く文字の変更に関係しています。 &lt;code&gt;\l&lt;/code&gt; はそれに続く文字を小文字にし、 &lt;code&gt;\u&lt;/code&gt; はそれに続く文字を大文字（より正確にはタイトルケース）にします。これらは、関数 &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst&lt;/a&gt;&lt;/code&gt; と同様の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="459b7ae43dc0118e5f951dff6050b593d0645ae4" translate="yes" xml:space="preserve">
          <source>A number of canned filers are provided with this module. They cover a number of the main areas that filters are needed when interfacing with DBM files. They also act as templates for your own filters.</source>
          <target state="translated">このモジュールには、多くの定型フィルタが用意されています。これらは、DBMファイルとのインターフェースでフィルタが必要とされる主な領域の多くをカバーしています。また、独自のフィルタのテンプレートとしても機能します。</target>
        </trans-unit>
        <trans-unit id="f165970578836ece242fb56057dfca4b475f795a" translate="yes" xml:space="preserve">
          <source>A number of functions are supplied in</source>
          <target state="translated">には多くの機能が提供されています。</target>
        </trans-unit>
        <trans-unit id="6be56084a39af168e51355bee3d9a2b6a1443404" translate="yes" xml:space="preserve">
          <source>A number of symbolic constants are required by some methods in &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; . None are imported by default.</source>
          <target state="translated">&lt;code&gt;IO::Compress::Deflate&lt;/code&gt; 一部のメソッドでは、いくつかの記号定数が必要です。デフォルトでは何もインポートされません。</target>
        </trans-unit>
        <trans-unit id="f171c4c952b5198d03d74dd09582818a3af3ac23" translate="yes" xml:space="preserve">
          <source>A number of symbolic constants are required by some methods in &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; . None are imported by default.</source>
          <target state="translated">&lt;code&gt;IO::Compress::Gzip&lt;/code&gt; 一部のメソッドでは、いくつかの記号定数が必要です。デフォルトでは何もインポートされません。</target>
        </trans-unit>
        <trans-unit id="8444a37c81d8d0b0573487ab107c561cc0dcc2fd" translate="yes" xml:space="preserve">
          <source>A number of symbolic constants are required by some methods in &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; . None are imported by default.</source>
          <target state="translated">&lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; 一部のメソッドでは、いくつかの記号定数が必要です。デフォルトでは何もインポートされません。</target>
        </trans-unit>
        <trans-unit id="2b8207ded75c4eb74b9b2506733acf10f3db4dee" translate="yes" xml:space="preserve">
          <source>A number of symbolic constants are required by some methods in &lt;code&gt;IO::Compress::Zip&lt;/code&gt; . None are imported by default.</source>
          <target state="translated">&lt;code&gt;IO::Compress::Zip&lt;/code&gt; 一部のメソッドでは、いくつかの記号定数が必要です。デフォルトでは何もインポートされません。</target>
        </trans-unit>
        <trans-unit id="13520cd60b01e1d5b0a654b3de30cd8d691bfd72" translate="yes" xml:space="preserve">
          <source>A number of the perl self-tests fails for various reasons; generally these are minor and due to subtle differences between common POSIX-based environments and the OpenVOS POSIX environment. Ensure that you conduct sufficient testing of your code to guarantee that it works properly in the OpenVOS environment.</source>
          <target state="translated">一般的に、これらは軽微なものであり、一般的なPOSIXベースの環境とOpenVOS POSIX環境との間の微妙な違いによるものです。OpenVOS 環境で正しく動作することを保証するために、コードのテストを十分に行ってください。</target>
        </trans-unit>
        <trans-unit id="6938035226ed22bf21a82d2591890e65b71e1814" translate="yes" xml:space="preserve">
          <source>A number or quoted &lt;b&gt;string&lt;/b&gt;&amp;mdash;an actual &lt;b&gt;value&lt;/b&gt; in the text of your program, as opposed to a &lt;b&gt;variable&lt;/b&gt;.</source>
          <target state="translated">数値または引用符付き&lt;b&gt;文字列&lt;/b&gt; &amp;mdash; &lt;b&gt;変数で&lt;/b&gt;はなく、プログラムのテキスト内の実際の&lt;b&gt;値&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="817e0a226397234bf07db9517946a4f73aedf564" translate="yes" xml:space="preserve">
          <source>A number with no fractional (decimal) part. A counting number, like 1, 2, 3, and so on, but including 0 and the negatives.</source>
          <target state="translated">分数(小数)の部分を持たない数。1,2,3,などのような数え方をする数で、0 と負の部分を含む。</target>
        </trans-unit>
        <trans-unit id="c7326b507f702c91b1651bab340f7fd9d1233ba7" translate="yes" xml:space="preserve">
          <source>A numeric value corresponding to the desired exit status</source>
          <target state="translated">希望する終了ステータスに対応する数値</target>
        </trans-unit>
        <trans-unit id="516dd9f40fab20fab164bbcf97c01e41beccb620" translate="yes" xml:space="preserve">
          <source>A numeric value corresponding to the desired exit status.</source>
          <target state="translated">希望する終了ステータスに対応する数値。</target>
        </trans-unit>
        <trans-unit id="f65805b27975bd2ea9ebc728a7ffd9aba1dc2684" translate="yes" xml:space="preserve">
          <source>A one- or two-character abbreviation for the OP's name.</source>
          <target state="translated">OPの名前の1文字または2文字の略称。</target>
        </trans-unit>
        <trans-unit id="3834679d6aeef19dae7b1ac9263711aa538649cc" translate="yes" xml:space="preserve">
          <source>A opposite problem occurs if you extract a UTF8-encoded file from a tarball. Using &lt;code&gt;get_content()&lt;/code&gt; on the &lt;code&gt;Archive::Tar::File&lt;/code&gt; object will return its content as a bytestring, not as a Unicode string.</source>
          <target state="translated">tarballからUTF8でエンコードされたファイルを抽出すると、反対の問題が発生します。使用 &lt;code&gt;get_content()&lt;/code&gt; に &lt;code&gt;Archive::Tar::File&lt;/code&gt; オブジェクトはないUnicode文字列として、バイト文字列としてその内容を返します。</target>
        </trans-unit>
        <trans-unit id="7d591c8e0c3b224f857fbffdd8e1cd395cd343c4" translate="yes" xml:space="preserve">
          <source>A package statement affects dynamic variables only, including those you've used &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; on, but</source>
          <target state="translated">packageステートメントは、 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; で使用したものを含む動的変数のみに影響しますが、</target>
        </trans-unit>
        <trans-unit id="fb0a21b3a9fa52dc9e4b76474cd2a329094bf2cb" translate="yes" xml:space="preserve">
          <source>A package statement affects dynamic variables only, including those you've used &lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; on, but</source>
          <target state="translated">packageステートメントは、 &lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; で使用したものを含む動的変数のみに影響しますが、</target>
        </trans-unit>
        <trans-unit id="17811bc7788393455d0445378861485836290fe5" translate="yes" xml:space="preserve">
          <source>A packet of data, such as a &lt;b&gt;UDP&lt;/b&gt; message, that (from the viewpoint of the programs involved) can be sent independently over the network. (In fact, all packets are sent independently at the &lt;b&gt;IP&lt;/b&gt; level, but &lt;b&gt;stream&lt;/b&gt; protocols such as &lt;b&gt;TCP&lt;/b&gt; hide this from your program.)</source>
          <target state="translated">&lt;b&gt;UDP&lt;/b&gt;メッセージなどのデータのパケット（関係するプログラムの観点から）は、ネットワークを介して個別に送信できます。（実際、すべてのパケットは&lt;b&gt;IP&lt;/b&gt;レベルで個別に送信されますが、&lt;b&gt;TCP&lt;/b&gt;などの&lt;b&gt;ストリーム&lt;/b&gt;プロトコルはこれをプログラムから隠します。）&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a8fade7e7e6957062a1ff55f1cde07bb98b07451" translate="yes" xml:space="preserve">
          <source>A parenthesized &lt;b&gt;subpattern&lt;/b&gt; used to group parts of a &lt;b&gt;regular expression&lt;/b&gt; into a single &lt;b&gt;atom&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;正規表現の&lt;/b&gt;一部を単一の&lt;b&gt;アトム&lt;/b&gt;にグループ化&lt;b&gt;する&lt;/b&gt;ために使用される括弧で囲まれた&lt;b&gt;サブパターン&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d31a105759b488881233b964b8bc299b268f919f" translate="yes" xml:space="preserve">
          <source>A particular 8-bit extension to ASCII that includes grave and acute accented Latin characters. Languages that can employ ISO 8859-1 include all the languages covered by ASCII as well as Afrikaans, Albanian, Basque, Catalan, Danish, Faroese, Finnish, Norwegian, Portuguese, Spanish, and Swedish. Dutch is covered albeit without the ij ligature. French is covered too but without the oe ligature. German can use ISO 8859-1 but must do so without German-style quotation marks. This set is based on Western European extensions to ASCII and is commonly encountered in world wide web work. In IBM character code set identification terminology, ISO 8859-1 is also known as CCSID 819 (or sometimes 0819 or even 00819).</source>
          <target state="translated">ASCII の 8 ビット拡張で、グレイブ文字とアクセント付きラテン文字が含まれています。ISO 8859-1 を使用できる言語には、ASCII でカバーされているすべての言語のほか、アフリカーンス語、アルバニア語、バスク語、カタロニア語、デンマーク語、フェロー語、フィンランド語、ノルウェー語、ポルトガル語、スペイン語、スウェーデン語が含まれています。オランダ語は ij の合字がないにもかかわらずカバーされています。フランス語もカバーされていますが、OE の合字はありません。ドイツ語は ISO 8859-1 を使用できますが、ドイツ語風の引用符を使用しないでください。このセットは、西欧のASCIIの拡張子に基づいており、ワールドワイドウェブの作業でよく見られます。IBMの文字コードセット識別用語では、ISO 8859-1はCCSID 819としても知られています(0819や00819と呼ばれることもあります)。</target>
        </trans-unit>
        <trans-unit id="e0e8dc4da39b64602467413f10af7327c1334e77" translate="yes" xml:space="preserve">
          <source>A past developer of this module once said that it was no longer being actively developed. However, rumors of its demise were greatly exaggerated. Feedback and suggestions are quite welcome.</source>
          <target state="translated">このモジュールの過去の開発者は、「もう積極的な開発は行われていない」と言っていたことがありました。しかし、このモジュールの終焉の噂は非常に誇張されたものでした。フィードバックや提案を歓迎します。</target>
        </trans-unit>
        <trans-unit id="8c54ff10ac1e2c9e724650394df49761e14faa10" translate="yes" xml:space="preserve">
          <source>A patch is likely to be rejected if it closes off future avenues of development. For instance, a patch that placed a true and final interpretation on prototypes is likely to be rejected because there are still options for the future of prototypes that haven't been addressed.</source>
          <target state="translated">パッチが将来の開発の道を閉ざしてしまうと、そのパッチは却下される可能性が高いです。例えば、プロトタイプに真の最終的な解釈を適用したパッチは却下される可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="8b84380ed4a63c4a53b35f4fed5c94c1acb30451" translate="yes" xml:space="preserve">
          <source>A pattern that contains one or more variables to be interpolated before parsing the pattern as a &lt;b&gt;regular expression&lt;/b&gt;, and that therefore cannot be analyzed at compile time, but must be reanalyzed each time the pattern match operator is evaluated. Runtime patterns are useful but expensive.</source>
          <target state="translated">&lt;b&gt;正規表現&lt;/b&gt;としてパターンを解析する前に補間される1つ以上の変数を含み、コンパイル時に分析できないが、パターン一致演算子が評価されるたびに再分析する必要があるパターン。実行時パターンは便利ですが高価です。</target>
        </trans-unit>
        <trans-unit id="e54b749fa56abf529dd225e42a12bbcecb4cb20e" translate="yes" xml:space="preserve">
          <source>A pattern that is compiled with the &lt;code&gt;/u&lt;/code&gt; or &lt;code&gt;/a&lt;/code&gt; modifiers is treated as Unicode (though there are some restrictions with &lt;code&gt;/a&lt;/code&gt; ). Under the &lt;code&gt;/d&lt;/code&gt; and &lt;code&gt;/l&lt;/code&gt; modifiers, there are several other indications for Unicode; see &lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;Character set modifiers in perlre&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;/u&lt;/code&gt; または &lt;code&gt;/a&lt;/code&gt; 修飾子を使用してコンパイルされたパターンは、Unicodeとして扱われます（ &lt;code&gt;/a&lt;/code&gt; にはいくつかの制限があります）。 &lt;code&gt;/d&lt;/code&gt; および &lt;code&gt;/l&lt;/code&gt; 修飾子の下には、Unicodeの他のいくつかの表示があります。&lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;perlreの文字セット修飾子を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ac81362ffb97f570e29dfbe7c502b0eb97a9aae0" translate="yes" xml:space="preserve">
          <source>A person with permissions to index a &lt;b&gt;namespace&lt;/b&gt; in &lt;b&gt;PAUSE&lt;/b&gt;. Anyone can upload any namespace, but only primary and co-maintainers get their contributions indexed.</source>
          <target state="translated">&lt;b&gt;PAUSEで&lt;/b&gt;&lt;b&gt;名前空間&lt;/b&gt;にインデックスを作成する権限を持つ人。誰でも任意の名前空間をアップロードできますが、プライマリと共同メンテナのみが投稿のインデックスを取得します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="bdf584f5364a06bf31c21ab092ad59923872f304" translate="yes" xml:space="preserve">
          <source>A pidgin-like lingo spoken among &amp;rsquo;droids when they don&amp;rsquo;t wish to reveal their orientation (see &lt;b&gt;endian&lt;/b&gt;). Named after some similar languages spoken (for similar reasons) between compilers and interpreters in the late 20ᵗʰ century. These languages are characterized by representing everything as a nonarchitecture-dependent sequence of bytes.</source>
          <target state="translated">ドロイドが方向を明らかにしたくないときに、ドロイドの間で話されるピジンのような用語（&lt;b&gt;エンディアンを&lt;/b&gt;参照）。20世紀後半にコンパイラとインタプリタの間で（同様の理由で）話されたいくつかの類似した言語にちなんで名付けられました。これらの言語は、アーキテクチャに依存しないバイトのシーケンスとしてすべてを表すことを特徴としています。</target>
        </trans-unit>
        <trans-unit id="d44cad0ebf83404ba135e65877b0a7348740b15c" translate="yes" xml:space="preserve">
          <source>A piece of &lt;b&gt;memory&lt;/b&gt; accessible by two different &lt;b&gt;processes&lt;/b&gt; who otherwise would not see each other&amp;rsquo;s memory.</source>
          <target state="translated">一枚の&lt;b&gt;メモリ&lt;/b&gt;二つの異なるからアクセス&lt;b&gt;プロセス&lt;/b&gt;そうでない場合は、お互いのメモリを参照しないでしょう。</target>
        </trans-unit>
        <trans-unit id="ae75b42221a978d2300d9bbb31da21cdb6583f30" translate="yes" xml:space="preserve">
          <source>A piece of data supplied to a &lt;b&gt;program&lt;/b&gt;, &lt;b&gt;subroutine&lt;/b&gt;, &lt;b&gt;function&lt;/b&gt;, or &lt;b&gt;method&lt;/b&gt; to tell it what it&amp;rsquo;s supposed to do. Also called a &amp;ldquo;parameter&amp;rdquo;.</source>
          <target state="translated">&lt;b&gt;プログラム&lt;/b&gt;、&lt;b&gt;サブルーチン&lt;/b&gt;、&lt;b&gt;関数&lt;/b&gt;、または&lt;b&gt;メソッド&lt;/b&gt;に提供されるデータの一部。「パラメータ」とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="94f70c32cf9b02415f8a7273bc9818046dbf12f7" translate="yes" xml:space="preserve">
          <source>A piece of data worth eight &lt;b&gt;bits&lt;/b&gt; in most places.</source>
          <target state="translated">ほとんどの場所で8 &lt;b&gt;ビット&lt;/b&gt;に相当するデータ。</target>
        </trans-unit>
        <trans-unit id="b577f26c3053457a977acc838db8d07639cc6ac7" translate="yes" xml:space="preserve">
          <source>A pitfall when fallback is TRUE and Perl resorts to a built-in implementation of an operator is that some operators have more than one semantic, for example &lt;code&gt;|&lt;/code&gt;:</source>
          <target state="translated">フォールバックがTRUEで、Perlがオペレーターの組み込み実装に頼っている場合の落とし穴は、一部のオペレーターには複数のセマンティクスがあることです &lt;code&gt;|&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="d50a84892f70340bd3a9931b241841288e99df2a" translate="yes" xml:space="preserve">
          <source>A plain &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; autodie&lt;/code&gt; implies &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; autodie qw(:default)&lt;/code&gt; . Note that &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; are not enabled by default. &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; requires the optional &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::System::Simple&quot;&gt;IPC::System::Simple&lt;/a&gt; module to be installed, and enabling &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; will invalidate their exotic forms. See &lt;a href=&quot;#BUGS&quot;&gt;BUGS&lt;/a&gt; below for more details.</source>
          <target state="translated">単純な &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; autodie&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; autodie qw(:default)&lt;/code&gt; 意味します。なお、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; がデフォルトで有効になっていません。 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 、オプションが必要です&lt;a href=&quot;http://search.cpan.org/perldoc/IPC::System::Simple&quot;&gt;IPC ::システム:: Simpleは&lt;/a&gt;、インストールするモジュールを、および有効化 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 彼らのエキゾチックなフォームが無効になります。詳細については、以下の&lt;a href=&quot;#BUGS&quot;&gt;バグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b5112ffa79f8fbea8b85cd379c0dac6621cfbb1b" translate="yes" xml:space="preserve">
          <source>A port of SysV IPC is available for Cygwin.</source>
          <target state="translated">Cygwin用にSysV IPCのポートが用意されています。</target>
        </trans-unit>
        <trans-unit id="608e0fee3c4504f82197f6257599cc064afc0c33" translate="yes" xml:space="preserve">
          <source>A port of dmake for Windows is available from:</source>
          <target state="translated">Windows用のdmakeの移植版は以下から入手可能です。</target>
        </trans-unit>
        <trans-unit id="107ead699a34a6b92016575e257f6bfde51b2d06" translate="yes" xml:space="preserve">
          <source>A portion of a &lt;b&gt;string&lt;/b&gt;, starting at a certain &lt;b&gt;character&lt;/b&gt; position (&lt;b&gt;offset&lt;/b&gt;) and proceeding for a certain number of characters.</source>
          <target state="translated">&lt;b&gt;文字列&lt;/b&gt;の一部で、特定の&lt;b&gt;文字&lt;/b&gt;位置（&lt;b&gt;offset&lt;/b&gt;）から始まり、特定の&lt;b&gt;文字数&lt;/b&gt;&lt;b&gt;だけ続き&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2df08b2dab9ca8b1fdefb915b96c623e0200cba0" translate="yes" xml:space="preserve">
          <source>A positional parameter is made optional by giving a default value, separated from the parameter name by &lt;code&gt;=&lt;/code&gt; :</source>
          <target state="translated">定位置パラメーターは、デフォルト値を指定することによってオプションになり、パラメーター名と &lt;code&gt;=&lt;/code&gt; で区切られます。</target>
        </trans-unit>
        <trans-unit id="b85d6bf4f6c4fdd5d60e077f21d5dcceb61dc47f" translate="yes" xml:space="preserve">
          <source>A possibly-threaded program using a possibly-threaded module might have code like this:</source>
          <target state="translated">possibly-thread モジュールを使用した possibly-thread プログラムは、次のようなコードになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6b3a72b5c10540ed557a8982bdee312dd7a07842" translate="yes" xml:space="preserve">
          <source>A powerful tool for optimizing such beasts is what is known as an &quot;independent group&quot;, which does not backtrack (see &lt;a href=&quot;#(%3f%3epattern)&quot;&gt;(?&amp;gt;pattern)&lt;/a&gt;). Note also that zero-length look-ahead/look-behind assertions will not backtrack to make the tail match, since they are in &quot;logical&quot; context: only whether they match is considered relevant. For an example where side-effects of look-ahead</source>
          <target state="translated">このような獣を最適化するための強力なツールは、「独立グループ」として知られているもので、後戻りしません（&lt;a href=&quot;#(%3f%3epattern)&quot;&gt;（？&amp;gt;パターン）を&lt;/a&gt;参照）。また、長さがゼロの先読み/後読みアサーションは「論理的」なコンテキストにあるため、後方一致してバックマッチを行わないことに注意してください。一致するかどうかのみが関連すると見なされます。先読みの副作用がある例</target>
        </trans-unit>
        <trans-unit id="f8090f10d3e078e45a1b56ad19ca0993e67735bf" translate="yes" xml:space="preserve">
          <source>A pragma is a module which influences some aspect of the compile time or run time behaviour of Perl, such as &lt;code&gt;strict&lt;/code&gt; or &lt;code&gt;warnings&lt;/code&gt; . With Perl 5.10 you are no longer limited to the built in pragmata; you can now create user pragmata that modify the behaviour of user functions within a lexical scope.</source>
          <target state="translated">プラグマは、 &lt;code&gt;strict&lt;/code&gt; や &lt;code&gt;warnings&lt;/code&gt; など、Perlのコンパイル時または実行時の動作のいくつかの側面に影響を与えるモジュールです。Perl 5.10では、組み込みプラグマタに限定されなくなりました。これで、字句スコープ内のユーザー関数の動作を変更するユーザープラグマを作成できます。</target>
        </trans-unit>
        <trans-unit id="3adf63746ff6644ce7bf5f35f924e0b644796838" translate="yes" xml:space="preserve">
          <source>A precomputed hash value for the MRO's name, or 0.</source>
          <target state="translated">MRO の名前に対する事前に計算されたハッシュ値、または 0。</target>
        </trans-unit>
        <trans-unit id="fef186fd41bd258794b7d0075ad4e261c2b3c05f" translate="yes" xml:space="preserve">
          <source>A predefined &lt;b&gt;character class&lt;/b&gt; matchable by the &lt;code&gt;\p&lt;/code&gt; or &lt;code&gt;\P&lt;/code&gt;&lt;b&gt;metasymbol&lt;/b&gt;. &lt;b&gt;Unicode&lt;/b&gt; defines hundreds of standard properties for every possible codepoint, and Perl defines a few of its own, too.</source>
          <target state="translated">&lt;code&gt;\p&lt;/code&gt; または &lt;code&gt;\P&lt;/code&gt; &lt;b&gt;メタシンボルに&lt;/b&gt;一致する定義済みの&lt;b&gt;文字クラス&lt;/b&gt;。&lt;b&gt;Unicode&lt;/b&gt;は可能なコードポイントごとに数百の標準プロパティを定義し、Perlは独自のプロパティもいくつか定義しています。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="753111eab29b1d3a3d48d9bfe5c8e1db8a75f990" translate="yes" xml:space="preserve">
          <source>A private implementation of the &lt;code&gt;SvIVx&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">複雑なマクロ式に対応できないコンパイラ用の &lt;code&gt;SvIVx&lt;/code&gt; マクロのプライベート実装。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="194c1f16db6963ad188c9a67ab4a97692452c7d0" translate="yes" xml:space="preserve">
          <source>A private implementation of the &lt;code&gt;SvNVx&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">複雑なマクロ式に対応できないコンパイラ用の &lt;code&gt;SvNVx&lt;/code&gt; マクロのプライベート実装。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="45f81efd0665fe345ae1ff71f7dc78b1d8a8b9cf" translate="yes" xml:space="preserve">
          <source>A private implementation of the &lt;code&gt;SvPV&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">複雑なマクロ式に対応できないコンパイラ用の &lt;code&gt;SvPV&lt;/code&gt; マクロのプライベート実装。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="28ff9ef13649ddfcf7cbf759240331fcc05c09ec" translate="yes" xml:space="preserve">
          <source>A private implementation of the &lt;code&gt;SvPVbyte&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">複雑なマクロ式に対応できないコンパイラ用の &lt;code&gt;SvPVbyte&lt;/code&gt; マクロのプライベート実装。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="4c48a8487b346d5dd9b069a77af5f464c4aaa911" translate="yes" xml:space="preserve">
          <source>A private implementation of the &lt;code&gt;SvPVutf8&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">複雑なマクロ式に対応できないコンパイラ用の &lt;code&gt;SvPVutf8&lt;/code&gt; マクロのプライベート実装。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="ccefc2a8adb4ddac3b369c74930a6dbb95e32f5b" translate="yes" xml:space="preserve">
          <source>A private implementation of the &lt;code&gt;SvUVx&lt;/code&gt; macro for compilers which can't cope with complex macro expressions. Always use the macro instead.</source>
          <target state="translated">複雑なマクロ式に対応できないコンパイラ用の &lt;code&gt;SvUVx&lt;/code&gt; マクロのプライベート実装。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="daa3f361ccd92e0c8c69a72e7a450ec455f808bd" translate="yes" xml:space="preserve">
          <source>A process that has died (exited) but whose parent has not yet received proper notification of its demise by virtue of having called &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt;. If you &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt;, you must clean up after your child processes when they exit; otherwise, the process table will fill up and your system administrator will Not Be Happy with you.</source>
          <target state="translated">終了した（終了した）が、その親が &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; を呼び出したためにその終了の適切な通知をまだ受け取っていないプロセス。 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; する場合、子プロセスが終了した後、子プロセスをクリーンアップする必要があります。そうしないと、プロセステーブルがいっぱいになり、システム管理者が満足できなくなります。</target>
        </trans-unit>
        <trans-unit id="8efafe66eae216a82a4ad38f05565ca385de1f6b" translate="yes" xml:space="preserve">
          <source>A process that usually starts when the system boots and shuts down when the system is shut down is called a daemon (Disk And Execution MONitor). If a daemon process has a configuration file which is modified after the process has been started, there should be a way to tell that process to reread its configuration file without stopping the process. Many daemons provide this mechanism using a &lt;code&gt;SIGHUP&lt;/code&gt; signal handler. When you want to tell the daemon to reread the file, simply send it the &lt;code&gt;SIGHUP&lt;/code&gt; signal.</source>
          <target state="translated">通常、システムの起動時に開始し、システムのシャットダウン時にシャットダウンするプロセスは、デーモン（ディスクおよび実行モニター）と呼ばれます。デーモンプロセスに、プロセスの開始後に変更された構成ファイルがある場合、そのプロセスに、プロセスを停止せずに構成ファイルを再度読み取るよう指示する方法が必要です。多くのデーモンは、 &lt;code&gt;SIGHUP&lt;/code&gt; シグナルハンドラーを使用してこのメ​​カニズムを提供します。デーモンにファイルの再読み込みを指示する場合は、 &lt;code&gt;SIGHUP&lt;/code&gt; シグナルを送信するだけです。</target>
        </trans-unit>
        <trans-unit id="2cb736d823d351c183302791cfaf0e9b2bb8195b" translate="yes" xml:space="preserve">
          <source>A program designed to take a &lt;b&gt;stream&lt;/b&gt; of input and transform it into a stream of output.</source>
          <target state="translated">入力の&lt;b&gt;ストリーム&lt;/b&gt;を受け取り、それを出力のストリームに変換するように設計されたプログラム。</target>
        </trans-unit>
        <trans-unit id="0e57854f673e33842a3f502762fb9daa3a8e1f70" translate="yes" xml:space="preserve">
          <source>A program or subroutine that runs some other program or subroutine for you, modifying some of its input or output to better suit your purposes.</source>
          <target state="translated">他のプログラムやサブルーチンを実行するプログラムやサブルーチンで、目的に合わせて入力や出力の一部を変更して実行するプログラムやサブルーチン。</target>
        </trans-unit>
        <trans-unit id="d4949b399696681050e02e3aa6d195b375c7c318" translate="yes" xml:space="preserve">
          <source>A program technique that lets you evaluate an &lt;b&gt;expression&lt;/b&gt; and then, based on the value of the expression, do a multiway branch to the appropriate piece of code for that value. Also called a &amp;ldquo;case structure&amp;rdquo;, named after the similar Pascal construct. Most switch statements in Perl are spelled &lt;code&gt;given&lt;/code&gt; . See &amp;ldquo;The &lt;code&gt;given&lt;/code&gt; statement&amp;rdquo; in Camel chapter 4, &amp;ldquo;Statements and Declarations&amp;rdquo;.</source>
          <target state="translated">&lt;b&gt;式&lt;/b&gt;を評価し、&lt;b&gt;式&lt;/b&gt;の値に基づいて、その値に対応する適切なコードに多方向分岐するプログラム手法。「ケース構造」とも呼ばれ、同様のPascal構造にちなんで名付けられました。Perlのほとんどのswitchステートメントは、スペルが &lt;code&gt;given&lt;/code&gt; ます。ラクダの第4章「ステートメントと宣言」の「 &lt;code&gt;given&lt;/code&gt; ステートメント」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5911c3911da879ac96181b5190227b6bb058fcf1" translate="yes" xml:space="preserve">
          <source>A program that lets you step through the &lt;b&gt;execution&lt;/b&gt; of your program, stopping or printing things out here and there to see whether anything has gone wrong, and, if so, what. The &amp;ldquo;symbolic&amp;rdquo; part just means that you can talk to the debugger using the same symbols with which your program is written.</source>
          <target state="translated">プログラムの&lt;b&gt;実行&lt;/b&gt;を段階的に&lt;b&gt;実行し&lt;/b&gt;、問題をあちこちで停止または印刷して、問題が発生していないかどうかを確認します。「シンボリック」の部分は、プログラムが記述されているのと同じシンボルを使用してデバッガーと通信できることを意味します。</target>
        </trans-unit>
        <trans-unit id="8959e21bc141d47a80e97a7ffb793dfa86254ad0" translate="yes" xml:space="preserve">
          <source>A property named 'var' is assumed to exist for the opcodes, and is interpolated into the rendering.</source>
          <target state="translated">opcodes には 'var' という名前のプロパティが存在すると仮定され、レンダリングに補間されます。</target>
        </trans-unit>
        <trans-unit id="7afee4b0974cba3382e7bb4183222667ce915680" translate="yes" xml:space="preserve">
          <source>A property of certain characters. Originally, typesetter stored capital letters in the upper of two cases and small letters in the lower one. Unicode recognizes three cases: &lt;b&gt;lowercase&lt;/b&gt; (&lt;b&gt;character property&lt;/b&gt;&lt;code&gt;\p{lower}&lt;/code&gt; ), &lt;b&gt;titlecase&lt;/b&gt; (&lt;code&gt;\p{title}&lt;/code&gt; ), and &lt;b&gt;uppercase&lt;/b&gt; (&lt;code&gt;\p{upper}&lt;/code&gt; ). A fourth casemapping called &lt;b&gt;foldcase&lt;/b&gt; is not itself a distinct case, but it is used internally to implement &lt;b&gt;casefolding&lt;/b&gt;. Not all letters have case, and some nonletters have case.</source>
          <target state="translated">特定の文字のプロパティ。元々、タイプセッターは大文字を2つ大文字に、小文字を小文字に保存していました。 Unicodeは、&lt;b&gt;小文字&lt;/b&gt;（&lt;b&gt;文字プロパティ&lt;/b&gt; &lt;code&gt;\p{lower}&lt;/code&gt; ）、 &lt;code&gt;\p{title}&lt;/code&gt; &lt;b&gt;ケース&lt;/b&gt;（\ p {title}）、&lt;b&gt;大文字&lt;/b&gt;（ &lt;code&gt;\p{upper}&lt;/code&gt; ）の3つのケースを認識し&lt;b&gt;ます&lt;/b&gt;。呼ばれる第四のcaseマッピング&lt;b&gt;foldcaseは&lt;/b&gt;異なる場合、それ自体ではなく、実現するために内部的に使用され&lt;b&gt;casefoldingを&lt;/b&gt;。すべての文字が大文字であるわけではなく、一部の非文字は大文字である。</target>
        </trans-unit>
        <trans-unit id="992dca0adb9b646b76591cb61fee4cdfffebc9ec" translate="yes" xml:space="preserve">
          <source>A pseudo layer that removes the top-most layer. Gives perl code a way to manipulate the layer stack. Note that &lt;code&gt;:&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; only works on real layers and will not undo the effects of pseudo layers like &lt;code&gt;:utf8&lt;/code&gt; . An example of a possible use might be:</source>
          <target state="translated">最上位のレイヤーを削除する疑似レイヤー。perlコードにレイヤースタックを操作する方法を提供します。なお &lt;code&gt;:&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 唯一の本当の層で動作などの擬似層の影響取り消しません &lt;code&gt;:utf8&lt;/code&gt; 。考えられる使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ff419cc31e5dd99b3e00b537155bcea526bbe610" translate="yes" xml:space="preserve">
          <source>A pseudolayer that enables a flag in the layer below to tell Perl that output should be in utf8 and that input should be regarded as already in valid utf8 form. &lt;b&gt;WARNING: It does not check for validity and as such should be handled with extreme caution for input, because security violations can occur with non-shortest UTF-8 encodings, etc.&lt;/b&gt; Generally &lt;code&gt;:encoding(utf8)&lt;/code&gt; is the best option when reading UTF-8 encoded data.</source>
          <target state="translated">下の層のフラグを有効にして、出力をutf8にして、入力をすでに有効なutf8形式であると見なすようにPerlに指示する疑似層。&lt;b&gt;警告：妥当性のチェックは行わないため、最短以外のUTF-8エンコーディングなどでセキュリティ違反が発生する可能性があるため、入力には細心の注意を払って処理する必要があります。&lt;/b&gt;一般に&lt;b&gt;、&lt;/b&gt; UTF-を読み取るときは &lt;code&gt;:encoding(utf8)&lt;/code&gt; が最適なオプションです8エンコードデータ。</target>
        </trans-unit>
        <trans-unit id="c46a1417af942e441ec740293a77160106782547" translate="yes" xml:space="preserve">
          <source>A pseudolayer that manipulates other layers. Applying the &lt;code&gt;:raw&lt;/code&gt; layer is equivalent to calling &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode($fh)&lt;/a&gt;&lt;/code&gt;. It makes the stream pass each byte as-is without translation. In particular, both CRLF translation and intuiting &lt;code&gt;:utf8&lt;/code&gt; from the locale are disabled.</source>
          <target state="translated">他のレイヤーを操作する疑似レイヤー。 &lt;code&gt;:raw&lt;/code&gt; レイヤーを適用することは、 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode($fh)&lt;/a&gt;&lt;/code&gt; を呼び出すことと同じです。これにより、ストリームは各バイトを変換せずにそのまま渡します。特に、CRLF変換とロケールからの &lt;code&gt;:utf8&lt;/code&gt; の組み込みの両方が無効になっています。</target>
        </trans-unit>
        <trans-unit id="fefe2bbba2d7bf83c98ed3d05237098307bf7f4b" translate="yes" xml:space="preserve">
          <source>A pseudolayer that turns the &lt;code&gt;:utf8&lt;/code&gt; flag</source>
          <target state="translated">&lt;code&gt;:utf8&lt;/code&gt; フラグをオンにする疑似レイヤー</target>
        </trans-unit>
        <trans-unit id="ecc09e716a2c2d18e2be806f7183c30c2f3b51c2" translate="yes" xml:space="preserve">
          <source>A psychoactive drug, popular in the &amp;rsquo;80s, probably developed at UC Berkeley or thereabouts. Similar in many ways to the prescription-only medication called &amp;ldquo;System V&amp;rdquo;, but infinitely more useful. (Or, at least, more fun.) The full chemical name is &amp;ldquo;Berkeley Standard Distribution&amp;rdquo;.</source>
          <target state="translated">80年代に人気の向精神薬は、おそらくカリフォルニア大学バークレー校またはその近辺で開発されました。多くの点で「システムV」と呼ばれる処方のみの薬物療法に似ていますが、はるかに有用です。（または、少なくとももっと楽しい。）完全な化学名は「Berkeley Standard Distribution」です。</target>
        </trans-unit>
        <trans-unit id="b62f9f104139d9b8c4e453ea5b9cd7a8ac0140f4" translate="yes" xml:space="preserve">
          <source>A public function (i.e. part of the internal API, but not necessarily sanctioned for use in extensions) begins like this:</source>
          <target state="translated">パブリック関数 (つまり内部 API の一部ですが、必ずしも拡張機能での使用が許可されているわけではありません)はこのように始まります。</target>
        </trans-unit>
        <trans-unit id="1fcfaef1b89a51f30ffb896e8c738cde9ef6077c" translate="yes" xml:space="preserve">
          <source>A pull-parser interface to parsing Pod</source>
          <target state="translated">Podを解析するためのプルパーサーインターフェース</target>
        </trans-unit>
        <trans-unit id="ce01020c3704b898a0c0774b915a9978c7a43b90" translate="yes" xml:space="preserve">
          <source>A question mark was chosen for this and for the minimal-matching construct because 1) question marks are rare in older regular expressions, and 2) whenever you see one, you should stop and &quot;question&quot; exactly what is going on. That's psychology....</source>
          <target state="translated">疑問符が選ばれたのは、1)疑問符は古い正規表現ではまれであり、2)疑問符を見るたびに、立ち止まって何が起こっているのかを正確に「疑問に思う」べきだからです。それが心理学なのですが...。</target>
        </trans-unit>
        <trans-unit id="7af52ef72c21fce506c2fc73241d0f35d841b4ef" translate="yes" xml:space="preserve">
          <source>A queue is a special thread-safe object that lets you put data in one end and take it out the other without having to worry about synchronization issues. They're pretty straightforward, and look like this:</source>
          <target state="translated">キューは、データを一方の端に置き、同期化の問題を心配することなく他方の端からデータを取り出すことを可能にする、特別なスレッドセーフオブジェクトです。これらは非常に単純で、次のようなものです。</target>
        </trans-unit>
        <trans-unit id="ce5a6f66f06330588b1d9e78cc960a0c4ce6fd02" translate="yes" xml:space="preserve">
          <source>A quick and dirty fix involves a little bit of code, but this may be all you need to figure out the problem.</source>
          <target state="translated">素早くダーティな修正には少しのコードが含まれていますが、問題を把握するのに必要なのはこれだけかもしれません。</target>
        </trans-unit>
        <trans-unit id="a1f4c66121a13dbcd4a35fcb46d7559bf401584e" translate="yes" xml:space="preserve">
          <source>A quick fix to the offending line (insert the missing parentheses) in the actual program and we're finished.</source>
          <target state="translated">実際のプログラムの中で、問題のある行(カッコの欠落している部分を挿入する)を簡単に修正して終了です。</target>
        </trans-unit>
        <trans-unit id="caf25dde2a598596295bb7a94644c4b4622cf06c" translate="yes" xml:space="preserve">
          <source>A quick flag check to see whether an sv should be passed to sv_force_normal to be &quot;downgraded&quot; before SvIVX or SvPVX can be modified directly.</source>
          <target state="translated">SvIVX や SvPVX を直接変更する前に sv_force_normal に sv を渡して &quot;ダウングレード&quot; する必要があるかどうかを確認するための簡単なフラグチェックを行います。</target>
        </trans-unit>
        <trans-unit id="5714e693202d7afa5eda5b56d0aae30074e97131" translate="yes" xml:space="preserve">
          <source>A quick note on terms</source>
          <target state="translated">用語の簡単な説明</target>
        </trans-unit>
        <trans-unit id="1d94544d51208195a231709cf1963af0c4de7162" translate="yes" xml:space="preserve">
          <source>A race condition exists when the result of several interrelated events depends on the ordering of those events, but that order cannot be guaranteed due to nondeterministic timing effects. If two or more programs, or parts of the same program, try to go through the same series of events, one might interrupt the work of the other. This is a good way to find an &lt;b&gt;exploit&lt;/b&gt;.</source>
          <target state="translated">いくつかの相互に関連するイベントの結果がそれらのイベントの順序に依存する場合、競合状態が存在しますが、非決定的なタイミングの影響により、その順序は保証されません。2つ以上のプログラム、または同じプログラムの一部である場合、同じ一連のイベントを実行しようとすると、一方が他方の作業を中断する可能性があります。これは&lt;b&gt;エクスプロイト&lt;/b&gt;を見つけるための良い方法です。</target>
        </trans-unit>
        <trans-unit id="b4fd04892bbded81531e522d3212286340ec1840" translate="yes" xml:space="preserve">
          <source>A read-write accessor will allow the caller to set the value as well as get it:</source>
          <target state="translated">読み書きアクセサは、呼び出し元が値を設定したり取得したりすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="caaace35cefc12e27812e75c68a502f8caf0f7cf" translate="yes" xml:space="preserve">
          <source>A recent net or commercial release of Cygwin is required.</source>
          <target state="translated">Cygwinの最近のネットや商用リリースが必要です。</target>
        </trans-unit>
        <trans-unit id="279e88205b97d17edeab01fe3aebcdc1b843db2f" translate="yes" xml:space="preserve">
          <source>A recent version of perl for the Amiga can be found at the Geek Gadgets section of the Aminet:</source>
          <target state="translated">Amiga用のperlの最近のバージョンは、AminetのGeek Gadgetsセクションで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="091b3fb1a508c2d701cd7e6f7c6e6e5c3add3716" translate="yes" xml:space="preserve">
          <source>A recipe book for programming with CPAN.pm</source>
          <target state="translated">CPAN.pmを使ったプログラミングのレシピ本</target>
        </trans-unit>
        <trans-unit id="2d7c582850510d1397c7e76f17b16cc5d91e6066" translate="yes" xml:space="preserve">
          <source>A recreational vehicle, not to be confused with vehicular recreation. RV also means an internal Reference Value of the type a &lt;b&gt;scalar&lt;/b&gt; can hold. See also &lt;b&gt;IV&lt;/b&gt; and &lt;b&gt;NV&lt;/b&gt; if you&amp;rsquo;re not confused yet.</source>
          <target state="translated">車両のレクリエーションと混同しないでください。RVは、&lt;b&gt;スカラー&lt;/b&gt;が保持できるタイプの内部参照値も意味します。まだ混乱していない場合は、&lt;b&gt;IV&lt;/b&gt;と&lt;b&gt;NV&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ad0a627886d7457b4c1bf3b7879c79721531858f" translate="yes" xml:space="preserve">
          <source>A reference can be blessed into a package with the following function:</source>
          <target state="translated">リファレンスは、以下の関数でパッケージに祝福することができます。</target>
        </trans-unit>
        <trans-unit id="b9d8f8326d44e724663f7d05cf4610dd9fa3fff9" translate="yes" xml:space="preserve">
          <source>A reference can be created by using a special syntax, lovingly known as the *foo{THING} syntax. *foo{THING} returns a reference to the THING slot in *foo (which is the symbol table entry which holds everything known as foo).</source>
          <target state="translated">参照は、特別な構文である *foo{THING}構文を使用して作成することができます。*foo{THING}は *foo の THING スロットへの参照を返します (これは foo として知られているすべてのものを保持するシンボルテーブルエントリです)。</target>
        </trans-unit>
        <trans-unit id="aa895f94ce4272825894257bb4b5f46a12e2a648" translate="yes" xml:space="preserve">
          <source>A reference is a scalar value and can refer to any other Perl data type. So by storing a reference as the value of an array or hash element, you can easily create lists and hashes within lists and hashes. The following example shows a 2 level hash of hash structure using anonymous hash references.</source>
          <target state="translated">参照はスカラー値であり、他のPerlのデータ型を参照することができます。そのため、参照を配列やハッシュ要素の値として格納することで、リストやハッシュの中にリストやハッシュを簡単に作成することができます。次の例は、匿名ハッシュ参照を使用した2レベルのハッシュ構造のハッシュを示しています。</target>
        </trans-unit>
        <trans-unit id="31756567f0b0edb207ae4b6d556e511492c04f15" translate="yes" xml:space="preserve">
          <source>A reference is a scalar value that</source>
          <target state="translated">リファレンスは</target>
        </trans-unit>
        <trans-unit id="9246f92f3034b3a452a0afe45331277281745beb" translate="yes" xml:space="preserve">
          <source>A reference that doesn&amp;rsquo;t get counted normally. When all the normal references to data disappear, the data disappears. These are useful for circular references that would never disappear otherwise.</source>
          <target state="translated">通常はカウントされない参照。データへの通常の参照がすべて消えると、データは消えます。これらは、他の方法では決して消えない循環参照に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5bbf68c2e549802b044298b09b378b5fd28092c9" translate="yes" xml:space="preserve">
          <source>A reference to a filehandle, or the pathname of a file from which the invoking script's pod documentation should be read. It defaults to the file indicated by &lt;code&gt;$0&lt;/code&gt; (&lt;code&gt;$PROGRAM_NAME&lt;/code&gt; for users of</source>
          <target state="translated">ファイルハンドルへの参照、または呼び出し元スクリプトのポッドドキュメントを読み取るファイルのパス名。デフォルトでは、 &lt;code&gt;$0&lt;/code&gt; （ &lt;code&gt;$PROGRAM_NAME&lt;/code&gt; のユーザーは</target>
        </trans-unit>
        <trans-unit id="f5b22d93dc114d0a0d964dd5bfa61e077311cb6a" translate="yes" xml:space="preserve">
          <source>A reference to a filehandle, or the pathname of a file to which the usage message should be written. The default is &lt;code&gt;\*STDERR&lt;/code&gt; unless the exit value is less than 2 (in which case the default is &lt;code&gt;\*STDOUT&lt;/code&gt; ).</source>
          <target state="translated">ファイルハンドルへの参照、または使用法のメッセージが書き込まれるファイルのパス名。終了値が2未満でない限り、デフォルトは &lt;code&gt;\*STDERR&lt;/code&gt; です（この場合、デフォルトは &lt;code&gt;\*STDOUT&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="1be21fde0d5a369b6626dd71f37562d95b7a892a" translate="yes" xml:space="preserve">
          <source>A reference to a hash</source>
          <target state="translated">ハッシュへの参照</target>
        </trans-unit>
        <trans-unit id="caf281724b21daca5b76b0ce26ffdceb6ed5b592" translate="yes" xml:space="preserve">
          <source>A reference to a hash of rules that control which tests may be executed in parallel. If no rules are declared and &lt;a href=&quot;../cpan/meta/yaml&quot;&gt;CPAN::Meta::YAML&lt;/a&gt; is available, &lt;code&gt;TAP::Harness&lt;/code&gt; attempts to load rules from a YAML file specified by the &lt;code&gt;rulesfile&lt;/code&gt; parameter. If no rules file exists, the default is for all tests to be eligible to be run in parallel.</source>
          <target state="translated">並行して実行できるテストを制御するルールのハッシュへの参照。ルールが宣言されておらず、&lt;a href=&quot;../cpan/meta/yaml&quot;&gt;CPAN :: Meta :: YAML&lt;/a&gt;が使用可能な場合、 &lt;code&gt;TAP::Harness&lt;/code&gt; は、 &lt;code&gt;rulesfile&lt;/code&gt; パラメーターで指定されたYAMLファイルからルールをロードしようとします。ルールファイルが存在しない場合、デフォルトでは、すべてのテストを並行して実行できます。</target>
        </trans-unit>
        <trans-unit id="cd42c7f4f6784f49153b357722a869874cd7cab5" translate="yes" xml:space="preserve">
          <source>A reference to a hash of scalar values in scalar context. Each entry of the hash has the fully qualified method name as its key and the method's scalar-context return values as its value.</source>
          <target state="translated">スカラコンテキストのスカラ値のハッシュへの参照。ハッシュの各エントリは、完全修飾されたメソッド名をキーとし、メソッドのスカラコンテキストの戻り値を値とします。</target>
        </trans-unit>
        <trans-unit id="c3a87c12004d018bcf7a69155be997af1914286c" translate="yes" xml:space="preserve">
          <source>A reference to a hash.</source>
          <target state="translated">ハッシュへの参照。</target>
        </trans-unit>
        <trans-unit id="9c7f4017cfb229c284c5327072ab9da27410d7df" translate="yes" xml:space="preserve">
          <source>A reference to a list of netmask strings in the form &lt;code&gt;&quot;134.99.4.0/24&quot;&lt;/code&gt; . These are used by the &lt;code&gt;requires_firewall&lt;/code&gt; function to determine if a given host is inside or outside your firewall.</source>
          <target state="translated">&lt;code&gt;&quot;134.99.4.0/24&quot;&lt;/code&gt; の形式のネットマスク文字列のリストへの参照。これらは、 &lt;code&gt;requires_firewall&lt;/code&gt; 関数によって使用され、特定のホストがファイアウォールの内側にあるか外側にあるかを判別します。</target>
        </trans-unit>
        <trans-unit id="30ea49a873c1ff374f329e97efef0ff346dccc25" translate="yes" xml:space="preserve">
          <source>A reference to a list of subroutine references and/or qr// objects and/or literal strings and/or hash references, specifying the extractors to be used to split the string. If this argument is omitted (or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) the list:</source>
          <target state="translated">文字列を分割するために使用されるエクストラクタを指定する、サブルーチン参照および/またはqr //オブジェクトおよび/またはリテラル文字列および/またはハッシュ参照のリストへの参照。この引数を省略した場合（または &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合）、リストは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c0f47fcb868f1bdb2ed44c13b2967f53238fb92e" translate="yes" xml:space="preserve">
          <source>A reference to a list of tests which are allowed to fail. See &lt;a href=&quot;#TODO-TESTS&quot;&gt;TODO TESTS&lt;/a&gt;.</source>
          <target state="translated">失敗が許可されているテストのリストへの参照。&lt;a href=&quot;#TODO-TESTS&quot;&gt;TODO TESTSを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a16beaf14f9ebf81709ac7687142e7324bffbcbc" translate="yes" xml:space="preserve">
          <source>A reference to a scalar, containing any initial source code to prepend to the file or generator output.</source>
          <target state="translated">スカラへの参照で、ファイルまたはジェネレータ出力に前置するための初期ソースコードを含む。</target>
        </trans-unit>
        <trans-unit id="ca57032a4acbb0f04dd265f2403ba03843451cb5" translate="yes" xml:space="preserve">
          <source>A reference to a simple scalar</source>
          <target state="translated">単純なスカラーへの参照</target>
        </trans-unit>
        <trans-unit id="2f7717bc46f8882825267f8fb5ae31ad534d8604" translate="yes" xml:space="preserve">
          <source>A reference to a subroutine</source>
          <target state="translated">サブルーチンへの参照</target>
        </trans-unit>
        <trans-unit id="b60540604d1e514c1059c3b516595d77c9c95f5f" translate="yes" xml:space="preserve">
          <source>A reference to a subroutine. If there is no filehandle (previous item), then this subroutine is expected to generate one line of source code per call, writing the line into &lt;code&gt;$_&lt;/code&gt; and returning 1, then finally at end of file returning 0. If there is a filehandle, then the subroutine will be called to act as a simple source filter, with the line as read in &lt;code&gt;$_&lt;/code&gt; . Again, return 1 for each valid line, and 0 after all lines have been returned.</source>
          <target state="translated">サブルーチンへの参照。ファイルハンドル（前の項目）がない場合、このサブルーチンは呼び出しごとに1行のソースコードを生成し、その行を &lt;code&gt;$_&lt;/code&gt; 書き込んで1を返し、最後にファイルの終わりで0を返します。ファイルハンドルがある場合、次に、サブルーチンが呼び出されて、単純なソースフィルターとして機能し、行は &lt;code&gt;$_&lt;/code&gt; 読み取られます。この場合も、有効な行ごとに1を返し、すべての行が返された後で0を返します。</target>
        </trans-unit>
        <trans-unit id="69d2c7af1b1feb58183b6cd3ab9665d62ba3318e" translate="yes" xml:space="preserve">
          <source>A reference to an &lt;code&gt;@INC&lt;/code&gt; style array of arguments to be passed to each test program.</source>
          <target state="translated">各テストプログラムに渡される引数の &lt;code&gt;@INC&lt;/code&gt; スタイル配列への参照。</target>
        </trans-unit>
        <trans-unit id="c036eaf04cdd3c79b7e1454ebb2a945c2a1cd7fe" translate="yes" xml:space="preserve">
          <source>A reference to an SV which holds a C pointer</source>
          <target state="translated">C ポインタを保持する SV への参照</target>
        </trans-unit>
        <trans-unit id="23549f2151bb51628d2f58bbcf1156a64c3296ce" translate="yes" xml:space="preserve">
          <source>A reference to an anonymous array can be created using square brackets:</source>
          <target state="translated">匿名配列への参照は、角括弧を使用して作成することができます。</target>
        </trans-unit>
        <trans-unit id="227fa37704dcf65c895f6b48accf114132dd71b4" translate="yes" xml:space="preserve">
          <source>A reference to an anonymous hash can be created using curly brackets:</source>
          <target state="translated">匿名ハッシュへの参照は、中括弧を使って作成することができます。</target>
        </trans-unit>
        <trans-unit id="75f71bb1e5a64ddcdb9e050cbea388199a1108b3" translate="yes" xml:space="preserve">
          <source>A reference to an anonymous subroutine can be created by using &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; without a subname:</source>
          <target state="translated">匿名サブルーチンへの参照は、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; なしでsubを使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="8b1d9fe90cb9aed401ad78a9cb46511d34021ee8" translate="yes" xml:space="preserve">
          <source>A reference to an array</source>
          <target state="translated">配列への参照</target>
        </trans-unit>
        <trans-unit id="e31779df8d209b3542cc04e2be4c9b32f5d08f2c" translate="yes" xml:space="preserve">
          <source>A reference to an array of sections specifications (as described in &lt;a href=&quot;#SECTION-SPECIFICATIONS&quot;&gt;SECTION SPECIFICATIONS&lt;/a&gt;) which indicate the desired set of POD sections and subsections to be selected from input. If no section specifications are given, then all sections of the PODs are used.</source>
          <target state="translated">入力から選択されるPODセクションとサブセクションの必要なセットを示す&lt;a href=&quot;#SECTION-SPECIFICATIONS&quot;&gt;セクション仕様の&lt;/a&gt;配列への参照（SECTION SPECIFICATIONSで説明）。セクション仕様が指定されていない場合、PODのすべてのセクションが使用されます。</target>
        </trans-unit>
        <trans-unit id="c89226f4c3258d3bce7e696eba292fd5daa132bc" translate="yes" xml:space="preserve">
          <source>A reference to the object for a virtual method or the name of the class for a static method</source>
          <target state="translated">仮想メソッドのオブジェクトへの参照、または静的メソッドのクラス名</target>
        </trans-unit>
        <trans-unit id="21f30d908543711c9f728d7de0ea1261250a9055" translate="yes" xml:space="preserve">
          <source>A regression in AIX 7 causes a failure in make test in Time::Piece during daylight savings time. APAR IV16514 provides the fix for this. A quick test to see if it's required, assuming it is currently daylight savings in Eastern Time, would be to run &lt;code&gt; TZ=EST5 date +%Z &lt;/code&gt; . This will come back with &lt;code&gt;EST&lt;/code&gt; normally, but nothing if you have the problem.</source>
          <target state="translated">AIX 7のリグレッションにより、夏時間のTime :: Pieceでのmake testが失敗します。APAR IV16514はこれに対する修正を提供します。現在東部標準時の夏時間であると仮定して、それが必要かどうかを確認する簡単なテストは、 &lt;code&gt; TZ=EST5 date +%Z &lt;/code&gt; を実行することです。これは通常 &lt;code&gt;EST&lt;/code&gt; で戻りますが、問題が発生した場合は何も起こりません。</target>
        </trans-unit>
        <trans-unit id="0fc4dbf2e586369f7ce889ec848c85dffcc1c599" translate="yes" xml:space="preserve">
          <source>A regular expression engine is a program that takes a set of constraints specified in a mini-language, and then applies those constraints to a target string, and determines whether or not the string satisfies the constraints. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; for a full definition of the language.</source>
          <target state="translated">正規表現エンジンは、ミニ言語で指定された一連の制約を取得し、それらの制約をターゲット文字列に適用し、文字列が制約を満たすかどうかを決定するプログラムです。言語の完全な定義については&lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="898d96d1a86448c10c01fff6d7c680ca19e7f093" translate="yes" xml:space="preserve">
          <source>A regular expression match in the form of &lt;code&gt;/REGEX/&lt;/code&gt; , &lt;code&gt;$foo =~ /REGEX/&lt;/code&gt; , or &lt;code&gt;$foo =~ EXPR&lt;/code&gt; . Also, a negated regular expression match in the form &lt;code&gt;!/REGEX/&lt;/code&gt; , &lt;code&gt;$foo !~ /REGEX/&lt;/code&gt; , or &lt;code&gt;$foo !~ EXPR&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;/REGEX/&lt;/code&gt; 、 &lt;code&gt;$foo =~ /REGEX/&lt;/code&gt; 、または &lt;code&gt;$foo =~ EXPR&lt;/code&gt; 〜EXPRの形式の正規表現一致。また、否定された正規表現は &lt;code&gt;!/REGEX/&lt;/code&gt; 、 &lt;code&gt;$foo !~ /REGEX/&lt;/code&gt; 、または &lt;code&gt;$foo !~ EXPR&lt;/code&gt; 〜EXPRの形式で一致します。</target>
        </trans-unit>
        <trans-unit id="6b61a0c27a77da1e69f8478b8fd9175ff4c338f9" translate="yes" xml:space="preserve">
          <source>A regular expression that otherwise would compile using &lt;code&gt;/d&lt;/code&gt; rules, and which uses this construct will instead use &lt;code&gt;/u&lt;/code&gt; . Thus this construct tells Perl that you don't want &lt;code&gt;/d&lt;/code&gt; rules for the entire regular expression containing it.</source>
          <target state="translated">&lt;code&gt;/d&lt;/code&gt; ルールを使用してコンパイルし、この構成を使用する正規表現は、代わりに &lt;code&gt;/u&lt;/code&gt; を使用します。したがって、この構成はPerlに、それを含む正規表現全体に対して &lt;code&gt;/d&lt;/code&gt; ルールを必要としないことを伝えます。</target>
        </trans-unit>
        <trans-unit id="8052f2558ed14ca1695f0756ea843781532061f7" translate="yes" xml:space="preserve">
          <source>A related issue is thread-safety. When a new thread is created, the Perl interpreter is cloned, which implies that all reference addresses in use will be replaced with new ones. Thus, if a class tries to access a field of a cloned object its (cloned) data will still be stored under the now invalid reference address of the original in the parent thread. A general &lt;code&gt;CLONE&lt;/code&gt; method must be provided to re-establish the association.</source>
          <target state="translated">関連する問題はスレッドセーフです。新しいスレッドが作成されると、Perlインタープリターが複製されます。これは、使用中のすべての参照アドレスが新しいアドレスに置き換えられることを意味します。したがって、クラスが複製されたオブジェクトのフィールドにアクセスしようとした場合、その（複製された）データは、親スレッドの元の無効な参照アドレスの下に保存されます。関連付けを再確立するには、一般的な &lt;code&gt;CLONE&lt;/code&gt; メソッドを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5a4d830992a6346407400c2bf4e88b4a6e3e575" translate="yes" xml:space="preserve">
          <source>A related issue is use with perl's malloc. Perl's malloc uses &lt;code&gt;sbrk()&lt;/code&gt; to get memory, and &lt;code&gt;sbrk()&lt;/code&gt; is limited to the first allocation so in this case something like:</source>
          <target state="translated">関連する問題は、perlのmallocでの使用です。Perlのmallocは &lt;code&gt;sbrk()&lt;/code&gt; を使用してメモリを取得します &lt;code&gt;sbrk()&lt;/code&gt; は最初の割り当てに制限されるため、この場合は次のようになります。</target>
        </trans-unit>
        <trans-unit id="773c247356b687b3912aff9a0cf7c1a25f2fade5" translate="yes" xml:space="preserve">
          <source>A related strategy that's less open to forgery is to give them a PIN (personal ID number). Record the address and PIN (best that it be a random one) for later processing. In the mail you send, include a link to your site with the PIN included. If the mail bounces, you know it's not valid. If they don't click on the link, either they forged the address or (assuming they got the message) following through wasn't important so you don't need to worry about it.</source>
          <target state="translated">偽造の可能性が低い関連戦略は、PIN(個人ID番号)を渡すことです。後で処理できるように、住所と暗証番号を記録しておきましょう(ランダムなものがベストです)。送信するメールには、PINを含むあなたのサイトへのリンクを記載します。メールがバウンスされた場合、あなたはそれが有効ではないことを知っています。彼らはリンクをクリックしない場合、彼らはアドレスを偽造したか、(彼らはメッセージを受け取ったと仮定して)フォロースルーは重要ではなかったので、あなたはそれを心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1b0e6d749250f42dda0dbf4bdf376cdb3adb5626" translate="yes" xml:space="preserve">
          <source>A relationship between two &lt;b&gt;objects&lt;/b&gt; in which one object is considered to be a more specific version of the other, generic object: &amp;ldquo;A camel is a mammal.&amp;rdquo; Since the generic object really only exists in a Platonic sense, we usually add a little abstraction to the notion of objects and think of the relationship as being between a generic &lt;b&gt;base class&lt;/b&gt; and a specific &lt;b&gt;derived class&lt;/b&gt;. Oddly enough, Platonic classes don&amp;rsquo;t always have Platonic relationships&amp;mdash;see &lt;b&gt;inheritance&lt;/b&gt;.</source>
          <target state="translated">1つのオブジェクトが他の一般的なオブジェクトのより具体的なバージョンであると見なされる2つの&lt;b&gt;オブジェクト&lt;/b&gt;間の関係：「ラクダは哺乳類です。」ジェネリックオブジェクトは実際にはプラトニックな意味でのみ存在するため、通常、オブジェクトの概念に少し抽象化を加え、その関係をジェネリック&lt;b&gt;ベースクラス&lt;/b&gt;と特定の&lt;b&gt;派生クラスの&lt;/b&gt;間にあると考えます。奇妙なことに、プラトニッククラスは常にプラトニック関係を持っているわけではありません。&lt;b&gt;継承を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9cc57b74bcbf78eacbd6b02d09950f83d1e82c98" translate="yes" xml:space="preserve">
          <source>A relatively new conference franchise with a large Perl portion is the Open Source Developers Conference or OSDC. First held in Australia it has recently also spread to Israel and France. More information can be found at: &lt;a href=&quot;http://www.osdc.com.au/&quot;&gt;http://www.osdc.com.au/&lt;/a&gt; for Australia, &lt;a href=&quot;http://www.osdc.org.il&quot;&gt;http://www.osdc.org.il&lt;/a&gt; for Israel, and &lt;a href=&quot;http://www.osdc.fr/&quot;&gt;http://www.osdc.fr/&lt;/a&gt; for France.</source>
          <target state="translated">Perl部分が比較的多い比較的新しい会議フランチャイズは、オープンソース開発者会議またはOSDCです。オーストラリアで最初に開催され、最近ではイスラエルとフランスにも広がっています。：より詳細な情報はで見つけることができる&lt;a href=&quot;http://www.osdc.com.au/&quot;&gt;http://www.osdc.com.au/&lt;/a&gt;オーストラリアのために、&lt;a href=&quot;http://www.osdc.org.il&quot;&gt;http://www.osdc.org.il&lt;/a&gt;イスラエルのために、そして&lt;a href=&quot;http://www.osdc.fr/&quot;&gt;http://www.osdc.fr/&lt;/a&gt;フランスのために。</target>
        </trans-unit>
        <trans-unit id="125bb83bd0e2557d465d8cae2a201d255865cfc8" translate="yes" xml:space="preserve">
          <source>A relatively recent addition to socket functions, may not be implemented even in Unix platforms.</source>
          <target state="translated">比較的最近追加されたソケット関数で、Unixプラットフォームでも実装されていない可能性があります。</target>
        </trans-unit>
        <trans-unit id="0fb2c7925dc01622384910beb32c259581a32e6c" translate="yes" xml:space="preserve">
          <source>A remark that doesn&amp;rsquo;t affect the meaning of the program. In Perl, a comment is introduced by a &lt;code&gt;#&lt;/code&gt; character and continues to the end of the line.</source>
          <target state="translated">プログラムの意味に影響を与えない発言。Perlでは、コメントは &lt;code&gt;#&lt;/code&gt; 文字で始まり、行の終わりまで続きます。</target>
        </trans-unit>
        <trans-unit id="05ceaec7b64c7ce9cdeec60b39e51b96ddb09fbd" translate="yes" xml:space="preserve">
          <source>A repeat count after &lt;code&gt;u&lt;/code&gt; sets the number of bytes to put into an uuencoded line, which is the maximum of 45 by default, but could be set to some (smaller) integer multiple of three. &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; simply ignores the repeat count.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; の後の繰り返し回数は、uuencodeされた行に入れるバイト数を設定します。これはデフォルトで最大45ですが、3の（小さい）整数倍に設定することもできます。 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; は単に繰り返し回数を無視します。</target>
        </trans-unit>
        <trans-unit id="3a53eb20270176512fa5bd8bf4b4f1be0776d385" translate="yes" xml:space="preserve">
          <source>A return code of 1 means that the requested key was not in the database.</source>
          <target state="translated">リターンコードが1の場合は、要求されたキーがデータベースに存在しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="ed4d8a6dc7b98d70bce7c0cb5069c17fe03ce939" translate="yes" xml:space="preserve">
          <source>A rudimentary command-line completion is also available, including lexical variables in the current scope if the &lt;code&gt;PadWalker&lt;/code&gt; module is installed.</source>
          <target state="translated">&lt;code&gt;PadWalker&lt;/code&gt; モジュールがインストールされている場合、現在のスコープ内の字句変数を含む、基本的なコマンドライン補完も利用できます。</target>
        </trans-unit>
        <trans-unit id="195465d41845715cc8feeb944d84d82eca7db90c" translate="yes" xml:space="preserve">
          <source>A safe filename for the package.</source>
          <target state="translated">パッケージの安全なファイル名。</target>
        </trans-unit>
        <trans-unit id="e965283a692e93e5f3c352fa50ba572d5ad94533" translate="yes" xml:space="preserve">
          <source>A sample Configure invocation looks something like this:</source>
          <target state="translated">Configure 呼び出しのサンプルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c38c9f9afa364c973ff5615c1cc8f4fc08593cdb" translate="yes" xml:space="preserve">
          <source>A sanitized VERSION with . replaced by _. For places where . has special meaning (some filesystems, RCS labels, etc...)</source>
          <target state="translated">を_に置き換えたサニタイズされた VERSION。.が特別な意味を持つ場所(ファイルシステム、RCSラベルなど)では</target>
        </trans-unit>
        <trans-unit id="854d2d0c342e6a9cd9c52af8350f79c5b69ee115" translate="yes" xml:space="preserve">
          <source>A sanity check is done to ensure that the versions of the</source>
          <target state="translated">のバージョンを確認するためにサニティチェックが行われます。</target>
        </trans-unit>
        <trans-unit id="52b0650d241bfe8b8773b0c925166a2b232578a5" translate="yes" xml:space="preserve">
          <source>A sanity check that what Perl thinks the architecture is and what Config thinks the architecture is are the same. If they're not it will return false and show a diagnostic message.</source>
          <target state="translated">Perl が考えているアーキテクチャと Config が考えているアーキテクチャが同じであるかどうかをチェックします。そうでない場合は false を返し、診断メッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="13eb257f5c15cd87da91e7109e5621a0b92dd55a" translate="yes" xml:space="preserve">
          <source>A scalar represents a single value:</source>
          <target state="translated">スカラは1つの値を表します。</target>
        </trans-unit>
        <trans-unit id="63bf2744d770c46d6894e17a03796eb6868d8317" translate="yes" xml:space="preserve">
          <source>A scalar that is going to be passed to some extension</source>
          <target state="translated">拡張子に渡されるスカラ</target>
        </trans-unit>
        <trans-unit id="b892a705ca325c138b52905f099e8858ffbdfac0" translate="yes" xml:space="preserve">
          <source>A scalar value is interpreted as FALSE in the Boolean sense if it is undefined, the null string or the number 0 (or its string equivalent, &quot;0&quot;), and TRUE if it is anything else. The Boolean context is just a special kind of scalar context where no conversion to a string or a number is ever performed.</source>
          <target state="translated">スカラ値は、未定義、ヌル文字列、数値 0 (またはその文字列に相当する &quot;0&quot;)の場合はブール値の意味で FALSE と解釈され、それ以外の場合は TRUE となります。ブール値のコンテキストは、文字列や数値への変換が行われない特殊なスカラコンテキストです。</target>
        </trans-unit>
        <trans-unit id="ecf273fc6dfd9742bd76d45138d207f0b0c7c11c" translate="yes" xml:space="preserve">
          <source>A scalar we got back from an extension</source>
          <target state="translated">拡張子から戻ってきたスカラー</target>
        </trans-unit>
        <trans-unit id="7153eab5e3c20636ca530d5dc26c52e39ac43559" translate="yes" xml:space="preserve">
          <source>A scratchpad keeps SVs which are lexicals for the current unit and are targets for opcodes. A previous version of this document stated that one can deduce that an SV lives on a scratchpad by looking on its flags: lexicals have &lt;code&gt;SVs_PADMY&lt;/code&gt; set, and</source>
          <target state="translated">スクラッチパッドは、現在のユニットの語彙であり、オペコードのターゲットであるSVを保持します。このドキュメントの以前のバージョンでは、SVがフラグを確認することでSVがスクラッチパッド上にあると推測できると述べていました。字句には &lt;code&gt;SVs_PADMY&lt;/code&gt; が設定されており、</target>
        </trans-unit>
        <trans-unit id="9b4b51a187f878ac1e93c009ee393256c5f3fed7" translate="yes" xml:space="preserve">
          <source>A script called &quot;runperl.bat&quot; is available that can be copied to any filename (along with the .bat suffix). For example, if you call it &quot;foo.bat&quot;, it will run the file &quot;foo&quot; when it is executed. Since you can run batch files on Windows platforms simply by typing the name (without the extension), this effectively runs the file &quot;foo&quot;, when you type either &quot;foo&quot; or &quot;foo.bat&quot;. With this method, &quot;foo.bat&quot; can even be in a different location than the file &quot;foo&quot;, as long as &quot;foo&quot; is available somewhere on the PATH. If your scripts are on a filesystem that allows symbolic links, you can even avoid copying &quot;runperl.bat&quot;.</source>
          <target state="translated">runperl.bat &quot;と呼ばれるスクリプトが利用可能で、任意のファイル名にコピーすることができます(.batの接尾辞と共に)。例えば、&quot;foo.bat &quot;と呼ぶと、実行時に &quot;foo &quot;というファイルを実行します。Windows プラットフォームでは、ファイル名を (拡張子なしで)入力するだけでバッチファイルを実行できるので、&quot;foo&quot; か &quot;foo.bat&quot; のどちらかを入力すると、事実上 &quot;foo&quot; というファイルが実行されることになります。この方法では、&quot;foo&quot; が PATH のどこかにあれば、&quot;foo.bat&quot; は &quot;foo&quot; とは別の場所にあっても構いません。スクリプトがシンボリックリンクを許可しているファイルシステム上にある場合、&quot;runperl.bat&quot; のコピーを避けることができます。</target>
        </trans-unit>
        <trans-unit id="6e410531e148f9094643156d14e90843980c3dfe" translate="yes" xml:space="preserve">
          <source>A script that emulates the standard unix archive (aka library) utility. Under Watcom 10.6, ar is linked to wlib and provides the expected interface. With Watcom 9.5, a cover function is required. This one is fairly crude but has proved adequate for compiling perl.</source>
          <target state="translated">標準の unix アーカイブ (別名ライブラリ)ユーティリティをエミュレートするスクリプトです。Watcom 10.6 では、ar は wlib にリンクされており、期待されるインターフェイスを提供します。Watcom 9.5 では、カバー関数が必要です。これはかなり粗雑なものですが、perl のコンパイルには十分であることが証明されています。</target>
        </trans-unit>
        <trans-unit id="e8eda0c28ba2fe483ef84daa3f54b909c119dec0" translate="yes" xml:space="preserve">
          <source>A script that provides C preprocessing functionality. Configure can generate a similar cover, but it doesn't handle all the command-line options that perl throws at it. This might be reasonably placed in /usr/local/bin.</source>
          <target state="translated">C の前処理機能を提供するスクリプトです。Configure は同様のカバーを生成することができますが、 perl が投げるコマンドラインオプションをすべて扱うことはできません。これは /usr/local/bin に置くのが妥当かもしれません。</target>
        </trans-unit>
        <trans-unit id="f63efe767441f9b6cae7b2dee9e50e81364ad873" translate="yes" xml:space="preserve">
          <source>A searchable archive of the list is available at &lt;a href=&quot;http://markmail.org/search/?q=perl5-porters&quot;&gt;http://markmail.org/search/?q=perl5-porters&lt;/a&gt;. There is also an archive at &lt;a href=&quot;http://archive.develooper.com/perl5-porters@perl.org/&quot;&gt;http://archive.develooper.com/perl5-porters@perl.org/&lt;/a&gt;.</source>
          <target state="translated">リストの検索可能なアーカイブは、&lt;a href=&quot;http://markmail.org/search/?q=perl5-porters&quot;&gt;http://markmail.org/search/?q=perl5-porters&lt;/a&gt;で入手できます。&lt;a href=&quot;http://archive.develooper.com/perl5-porters@perl.org/&quot;&gt;http://archive.develooper.com/perl5-porters@perl.org/に&lt;/a&gt;もアーカイブがあります。</target>
        </trans-unit>
        <trans-unit id="1598e0f0cd8f36f911067e3fef88a3cdc16b3aed" translate="yes" xml:space="preserve">
          <source>A section is started by the named heading or item. For example, &lt;code&gt;L&amp;lt;perlvar/$.&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;perlvar/&quot;$.&quot;&amp;gt;&lt;/code&gt; both link to the section started by &quot;&lt;code&gt;=item $.&lt;/code&gt; &quot; in perlvar. And &lt;code&gt;L&amp;lt;perlsyn/For Loops&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;perlsyn/&quot;For Loops&quot;&amp;gt;&lt;/code&gt; both link to the section started by &quot;&lt;code&gt;=head2 For Loops&lt;/code&gt; &quot; in perlsyn.</source>
          <target state="translated">セクションは、名前付きの見出しまたはアイテムによって開始されます。たとえば、 &lt;code&gt;L&amp;lt;perlvar/$.&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;perlvar/&quot;$.&quot;&amp;gt;&lt;/code&gt; どちらも、perlvarの「 &lt;code&gt;=item $.&lt;/code&gt; 」で始まるセクションにリンクしています。また、 &lt;code&gt;L&amp;lt;perlsyn/For Loops&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;perlsyn/&quot;For Loops&quot;&amp;gt;&lt;/code&gt; 両方とも、perlsynの「 &lt;code&gt;=head2 For Loops&lt;/code&gt; 」で始まるセクションにリンクしています。</target>
        </trans-unit>
        <trans-unit id="2bd968f32a9ca757550679bcb38ba91ae56c38c6" translate="yes" xml:space="preserve">
          <source>A selection of any number of &lt;b&gt;elements&lt;/b&gt; from a &lt;b&gt;list&lt;/b&gt;, &lt;b&gt;array&lt;/b&gt;, or &lt;b&gt;hash&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;リスト&lt;/b&gt;、&lt;b&gt;配列&lt;/b&gt;、または&lt;b&gt;ハッシュ&lt;/b&gt;から任意の数の&lt;b&gt;要素を&lt;/b&gt;選択したもの。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c8bb7e9a293c6c000ed25150f0f4d86b8b09ae48" translate="yes" xml:space="preserve">
          <source>A selection of general-utility hash subroutines</source>
          <target state="translated">汎用ハッシュサブルーチンの選択</target>
        </trans-unit>
        <trans-unit id="7f015133979033409d91eedccc2323e573bc6368" translate="yes" xml:space="preserve">
          <source>A selection of general-utility list subroutines</source>
          <target state="translated">一般的なユーティリティリストのサブルーチンの選択</target>
        </trans-unit>
        <trans-unit id="28d3d211918b04ba8766082d56a39fef4fdf3700" translate="yes" xml:space="preserve">
          <source>A selection of general-utility scalar subroutines</source>
          <target state="translated">汎用スカラーサブルーチンの選択</target>
        </trans-unit>
        <trans-unit id="6c2a22b80753e149c4a3e936da6e37252cc4db3f" translate="yes" xml:space="preserve">
          <source>A selection of utility subroutines for subs and CODE references</source>
          <target state="translated">サブおよびCODE参照のためのユーティリティーサブルーチンの選択</target>
        </trans-unit>
        <trans-unit id="047fc7c9d2dc1ac28d49429eb7bc7a3322abc4af" translate="yes" xml:space="preserve">
          <source>A semicolon (&lt;code&gt;;&lt;/code&gt; ) separates mandatory arguments from optional arguments. It is redundant before &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; , which gobble up everything else.</source>
          <target state="translated">セミコロン（ &lt;code&gt;;&lt;/code&gt; ）は、必須の引数とオプションの引数を区切ります。 &lt;code&gt;@&lt;/code&gt; または &lt;code&gt;%&lt;/code&gt; の前に冗長であり、他のすべてを混乱させます。</target>
        </trans-unit>
        <trans-unit id="f511bb1ccbd67c6c6ca9d2e6f48560176d03c2b5" translate="yes" xml:space="preserve">
          <source>A sequence of &lt;b&gt;bits&lt;/b&gt; that is actually being thought of as a sequence of bits, for once.</source>
          <target state="translated">一連の&lt;b&gt;ビット&lt;/b&gt;実際に一度のために、ビットのシーケンスとして考えられています。</target>
        </trans-unit>
        <trans-unit id="cae9f6dde987a755ec3121175496d8328940bd06" translate="yes" xml:space="preserve">
          <source>A sequence of characters such as &amp;ldquo;He said !@#*&amp;amp;%@#*?!&amp;rdquo;. A string does not have to be entirely printable.</source>
          <target state="translated">「彼が言った！@＃*＆％@＃* ?!」のような一連の文字。文字列は完全に印刷可能である必要はありません。</target>
        </trans-unit>
        <trans-unit id="fec7ee11f629dd8914f5fb3939fa45a8d0ac8f26" translate="yes" xml:space="preserve">
          <source>A sequence, such as &lt;code&gt;=head1&lt;/code&gt; , that denotes the start of a &lt;b&gt;pod&lt;/b&gt; section.</source>
          <target state="translated">&lt;b&gt;ポッド&lt;/b&gt;セクションの開始を示す &lt;code&gt;=head1&lt;/code&gt; などのシーケンス。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="615050343b7872b60001479c7e1e5357ce76b3e7" translate="yes" xml:space="preserve">
          <source>A series of &lt;b&gt;processes&lt;/b&gt; all in a row, linked by &lt;b&gt;pipes&lt;/b&gt;, where each passes its output stream to the next.</source>
          <target state="translated">一連の&lt;b&gt;プロセスは&lt;/b&gt;すべて&lt;b&gt;パイプ&lt;/b&gt;でリンクされ、それぞれが出力ストリームを次の&lt;b&gt;プロセスに&lt;/b&gt;渡します。</target>
        </trans-unit>
        <trans-unit id="5e7b6708245b79eaeed5d38bcac016afddbd6e09" translate="yes" xml:space="preserve">
          <source>A series of characters matches that series of characters in the target string, so the pattern &lt;code&gt;blurfl&lt;/code&gt; would match &quot;blurfl&quot; in the target string.</source>
          <target state="translated">一連の文字はターゲット文字列のその一連の文字と一致するため、 &lt;code&gt;blurfl&lt;/code&gt; パターンはターゲット文字列の「blurfl」と一致します。</target>
        </trans-unit>
        <trans-unit id="cb6d59d3792163250639b9090bf480c17ab2f55e" translate="yes" xml:space="preserve">
          <source>A set of &lt;b&gt;directories&lt;/b&gt; and &lt;b&gt;files&lt;/b&gt; residing on a partition of the disk. Sometimes known as a &amp;ldquo;partition&amp;rdquo;. You can change the file&amp;rsquo;s name or even move a file around from directory to directory within a filesystem without actually moving the file itself, at least under Unix.</source>
          <target state="translated">ディスクのパーティションにある&lt;b&gt;ディレクトリ&lt;/b&gt;と&lt;b&gt;ファイルの&lt;/b&gt;セット。「パーティション」と呼ばれることもあります。少なくともUnixでは、ファイル自体を実際に移動せずに、ファイル名を変更したり、ファイルシステム内のディレクトリからディレクトリにファイルを移動したりできます。</target>
        </trans-unit>
        <trans-unit id="a5ce6ae6f62d942a0f2702d5475445785e80396f" translate="yes" xml:space="preserve">
          <source>A set of criteria used to validate a particular piece of data if it has to adhere to particular rules.</source>
          <target state="translated">特定のルールを遵守しなければならない場合に、データの特定の部分を検証するために使用される基準のセット。</target>
        </trans-unit>
        <trans-unit id="abcc0ff1d11111cc38f19c5047e331b6ce4f3ede" translate="yes" xml:space="preserve">
          <source>A set of distribution prerequisites by phase and type</source>
          <target state="translated">フェーズとタイプ別の分布前提条件のセット</target>
        </trans-unit>
        <trans-unit id="2054435ebeb82c104e8cc6baf030893f06d8bca6" translate="yes" xml:space="preserve">
          <source>A set of macros makes accessing the fields easier and more consistent. These include &lt;code&gt;OP()&lt;/code&gt; , which is used to determine the type of a &lt;code&gt;regnode&lt;/code&gt; -like structure; &lt;code&gt;NEXT_OFF()&lt;/code&gt; , which is the offset to the next node (more on this later); &lt;code&gt;ARG()&lt;/code&gt; , &lt;code&gt;ARG1()&lt;/code&gt; , &lt;code&gt;ARG2()&lt;/code&gt; , &lt;code&gt;ARG_SET()&lt;/code&gt; , and equivalents for reading and setting the arguments; and &lt;code&gt;STR_LEN()&lt;/code&gt; , &lt;code&gt;STRING()&lt;/code&gt; and &lt;code&gt;OPERAND()&lt;/code&gt; for manipulating strings and regop bearing types.</source>
          <target state="translated">一連のマクロにより、フィールドへのアクセスがより簡単で一貫性のあるものになります。これらには、 &lt;code&gt;regnode&lt;/code&gt; のような構造のタイプを決定するために使用される &lt;code&gt;OP()&lt;/code&gt; が含まれます。 &lt;code&gt;NEXT_OFF()&lt;/code&gt; は、次のノードへのオフセットです（これについては後で詳しく説明します）。 &lt;code&gt;ARG()&lt;/code&gt; 、 &lt;code&gt;ARG1()&lt;/code&gt; 、 &lt;code&gt;ARG2()&lt;/code&gt; 、 &lt;code&gt;ARG_SET()&lt;/code&gt; 、および引数の読み取りと設定に相当するもの。そして &lt;code&gt;STR_LEN()&lt;/code&gt; 、 &lt;code&gt;STRING()&lt;/code&gt; および &lt;code&gt;OPERAND()&lt;/code&gt; 文字列とregopベアリングタイプを操作します。</target>
        </trans-unit>
        <trans-unit id="5b89ed012267a41a30013b79a6117c49ce7fdacf" translate="yes" xml:space="preserve">
          <source>A set of possible values, together with all the operations that know how to deal with those values. For example, a numeric data type has a certain set of numbers that you can work with, as well as various mathematical operations that you can do on the numbers, but would make little sense on, say, a string such as &lt;code&gt;&quot;Kilroy&quot;&lt;/code&gt; . Strings have their own operations, such as &lt;b&gt;concatenation&lt;/b&gt;. Compound types made of a number of smaller pieces generally have operations to compose and decompose them, and perhaps to rearrange them. &lt;b&gt;Objects&lt;/b&gt; that model things in the real world often have operations that correspond to real activities. For instance, if you model an elevator, your elevator object might have an &lt;code&gt;open_door&lt;/code&gt;&lt;b&gt;method&lt;/b&gt;.</source>
          <target state="translated">可能な値のセットと、それらの値の処理方法を知っているすべての操作。たとえば、数値データ型には、操作できる数値のセットと、数値に対して実行できるさまざまな数学演算がありますが、たとえば &lt;code&gt;&quot;Kilroy&quot;&lt;/code&gt; などの文字列ではほとんど意味がありません。文字&lt;b&gt;列には&lt;/b&gt;、&lt;b&gt;連結&lt;/b&gt;などの独自の操作があり&lt;b&gt;ます&lt;/b&gt;。多数の小さなピースで構成される複合タイプには、一般に、それらを構成および分解する操作があり、おそらくそれらを再配置する操作があります。現実世界の物事をモデル化する&lt;b&gt;オブジェクトに&lt;/b&gt;は、多くの場合、実際のアクティビティに対応する操作があります。たとえば、エレベーターをモデル化する場合、エレベーターオブジェクトには &lt;code&gt;open_door&lt;/code&gt; &lt;b&gt;メソッド&lt;/b&gt;が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="af57cf3203f1cd3e2de0a1965dff9d274c21ca2b" translate="yes" xml:space="preserve">
          <source>A set of related data values in a &lt;b&gt;file&lt;/b&gt; or &lt;b&gt;stream&lt;/b&gt;, often associated with a unique &lt;b&gt;key&lt;/b&gt; field. In Unix, often commensurate with a &lt;b&gt;line&lt;/b&gt;, or a blank-line&amp;ndash;terminated set of lines (a &amp;ldquo;paragraph&amp;rdquo;). Each line of the</source>
          <target state="translated">&lt;b&gt;ファイル&lt;/b&gt;または&lt;b&gt;ストリーム&lt;/b&gt;内の関連するデータ値のセット。多くの場合、一意の&lt;b&gt;キー&lt;/b&gt;フィールドに関連付けられています。Unixでは、多くの場合、&lt;b&gt;行&lt;/b&gt;、または空白行で終了する行のセット（「段落」）に見合っています。の各行</target>
        </trans-unit>
        <trans-unit id="1e3ce769bdcb624305623c0e39fad86b6550d415" translate="yes" xml:space="preserve">
          <source>A set of users of which you are a member. In some operating systems (like Unix), you can give certain file access permissions to other members of your group.</source>
          <target state="translated">あなたがメンバーであるユーザーのセット。いくつかのオペレーティングシステム(Unixなど)では、あなたのグループの他のメンバーに特定のファイルアクセス許可を与えることができます。</target>
        </trans-unit>
        <trans-unit id="a3f080c404572d6a66e864a2fec8d37666d88fa5" translate="yes" xml:space="preserve">
          <source>A set of version requirements for a CPAN dist</source>
          <target state="translated">CPAN distのバージョン要件のセット</target>
        </trans-unit>
        <trans-unit id="a023ae4922155fc45ad5e15036082f2112e5376d" translate="yes" xml:space="preserve">
          <source>A seven-bit safe (non-eight-bit) encoding, which is useful if the transport or storage is not eight-bit safe. Defined by RFC 2152.</source>
          <target state="translated">7ビット安全な(8ビット以外の)エンコーディングで、トランスポートやストレージが8ビット安全でない場合に有用である。RFC 2152で定義されている。</target>
        </trans-unit>
        <trans-unit id="a600cb53b0fe3c2106640728c33066b8be46fd29" translate="yes" xml:space="preserve">
          <source>A short description of the function of the op.</source>
          <target state="translated">opの機能を簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="d96648e3b3628e3e472e306b3dd3028622349739" translate="yes" xml:space="preserve">
          <source>A short description of your module, what it does, why someone would use it and its limitations. CPAN automatically pulls your README file out of the archive and makes it available to CPAN users, it is the first thing they will read to decide if your module is right for them.</source>
          <target state="translated">モジュールの簡単な説明、それが何をするのか、誰かが使用する理由、制限事項。CPANは、アーカイブから自動的にあなたのREADMEファイルを取り出し、CPANユーザーが利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="7054451d8531a19f5986333d608566f0e421b059" translate="yes" xml:space="preserve">
          <source>A short name for your op. This will be included in some error messages, and will also be returned as &lt;code&gt;$op-&amp;gt;name&lt;/code&gt; by the &lt;a href=&quot;b&quot;&gt;B&lt;/a&gt; module, so it will appear in the output of module like &lt;a href=&quot;b/concise&quot;&gt;B::Concise&lt;/a&gt;.</source>
          <target state="translated">オペレーションの短い名前。これは一部のエラーメッセージに含まれ、&lt;a href=&quot;b&quot;&gt;B&lt;/a&gt;モジュールによって &lt;code&gt;$op-&amp;gt;name&lt;/code&gt; として返されるため、&lt;a href=&quot;b/concise&quot;&gt;B :: Conciseの&lt;/a&gt;ようなモジュールの出力に表示されます。</target>
        </trans-unit>
        <trans-unit id="659172f97956f35000461e8175c3ae20d404aec4" translate="yes" xml:space="preserve">
          <source>A short usage summary for programs and functions. This section is mandatory for section 3 pages. For Perl module documentation, it's usually convenient to have the contents of this section be a verbatim block showing some (brief) examples of typical ways the module is used.</source>
          <target state="translated">プログラムや機能の簡単な使い方まとめ。このセクションはセクション3のページでは必須です。Perl モジュールのドキュメントでは、通常、このセクションの内容を、モジュールの典型的な使用方法の(簡単な)例を示す冗長なブロックにしておくと便利です。</target>
        </trans-unit>
        <trans-unit id="ecd576fa5b368299ace3b5dd153caef33335850b" translate="yes" xml:space="preserve">
          <source>A shortcut for $token-&amp;gt;tagname(...)</source>
          <target state="translated">$ token-&amp;gt; tagname（...）のショートカット</target>
        </trans-unit>
        <trans-unit id="889d9060f1528398717f26dcafe44f09ac88a287" translate="yes" xml:space="preserve">
          <source>A shortcut to return Math::BigInt-&amp;gt;binf(). Useful because Perl does not always handle bareword &lt;code&gt;inf&lt;/code&gt; properly.</source>
          <target state="translated">Math :: BigInt-&amp;gt; binf（）を返すショートカット。Perlは常にベアワード &lt;code&gt;inf&lt;/code&gt; を適切に処理するとは限らないので便利です。</target>
        </trans-unit>
        <trans-unit id="c597d44b686300cfd664e15765135328081ac79a" translate="yes" xml:space="preserve">
          <source>A shortcut to return Math::BigInt-&amp;gt;bnan(). Useful because Perl does not always handle bareword &lt;code&gt;NaN&lt;/code&gt; properly.</source>
          <target state="translated">Math :: BigInt-&amp;gt; bnan（）を返すショートカット。Perlは常にベアワード &lt;code&gt;NaN&lt;/code&gt; を適切に処理するとは限らないため、便利です。</target>
        </trans-unit>
        <trans-unit id="4c2bf7bb028dd860429a797ea74f61d6f6006cc5" translate="yes" xml:space="preserve">
          <source>A side effect of this representation is that you can use &lt;code&gt;eq&lt;/code&gt; to see if two references refer to the same thing. (But you should usually use &lt;code&gt;==&lt;/code&gt; instead because it's much faster.)</source>
          <target state="translated">この表現の副作用は、 &lt;code&gt;eq&lt;/code&gt; を使用して、2つの参照が同じものを参照しているかどうかを確認できることです。（ただし、はるかに高速であるため、代わりに &lt;code&gt;==&lt;/code&gt; を使用する必要があります。）</target>
        </trans-unit>
        <trans-unit id="521c212b6a17d7bb672fae4188d350c73713a7f4" translate="yes" xml:space="preserve">
          <source>A sigil followed by a single character matching the &lt;code&gt;\p{POSIX_Punct}&lt;/code&gt; property, like &lt;code&gt;$!&lt;/code&gt; or &lt;code&gt;%+&lt;/code&gt; , except the character &lt;code&gt;&quot;{&quot;&lt;/code&gt; doesn't work.</source>
          <target state="translated">&lt;code&gt;$!&lt;/code&gt; のような &lt;code&gt;\p{POSIX_Punct}&lt;/code&gt; プロパティに一致する単一の文字が続くシジルまたは &lt;code&gt;%+&lt;/code&gt; 。ただし、文字 &lt;code&gt;&quot;{&quot;&lt;/code&gt; は機能しません。</target>
        </trans-unit>
        <trans-unit id="2cc8d7ea546cfbfc32e7048bc99953161b5c5af3" translate="yes" xml:space="preserve">
          <source>A sigil, followed by either a caret and a single POSIX uppercase letter, like &lt;code&gt;$^V&lt;/code&gt; or &lt;code&gt;$^W&lt;/code&gt; , or a sigil followed by a literal non-space, non-&lt;code&gt;NUL&lt;/code&gt; control character matching the &lt;code&gt;\p{POSIX_Cntrl}&lt;/code&gt; property. Due to a historical oddity, if not running under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; , the 128 characters in the &lt;code&gt;[0x80-0xff]&lt;/code&gt; range are considered to be controls, and may also be used in length-one variables. However, the use of non-graphical characters is deprecated as of v5.22, and support for them will be removed in a future version of perl. ASCII space characters and &lt;code&gt;NUL&lt;/code&gt; already aren't allowed, so this means that a single-character variable name with that name being any other C0 control &lt;code&gt;[0x01-0x1F]&lt;/code&gt; , or &lt;code&gt;DEL&lt;/code&gt; will generate a deprecated warning. Already, under &lt;code&gt;&quot;use
utf8&quot;&lt;/code&gt; , non-ASCII characters must match &lt;code&gt;Perl_XIDS&lt;/code&gt; . As of v5.22, when not under &lt;code&gt;&quot;use utf8&quot;&lt;/code&gt; C1 controls &lt;code&gt;[0x80-0x9F]&lt;/code&gt; , NO BREAK SPACE, and SOFT HYPHEN (&lt;code&gt;SHY&lt;/code&gt; )) generate a deprecated warning.</source>
          <target state="translated">&lt;code&gt;$^V&lt;/code&gt; や &lt;code&gt;$^W&lt;/code&gt; ようなキャレットと単一のPOSIX大文字が続く &lt;code&gt;\p{POSIX_Cntrl}&lt;/code&gt; 、または\ p {POSIX_Cntrl}プロパティに一致するリテラル非スペース、非 &lt;code&gt;NUL&lt;/code&gt; 制御文字が続くシジル。歴史的な奇妙さのため、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; で実行されていない場合、 &lt;code&gt;[0x80-0xff]&lt;/code&gt; 範囲の128文字はコントロールと見なされ、長さ1の変数でも使用される可能性があります。ただし、非グラフィック文字の使用はv5.22で非推奨になり、サポートは将来のバージョンのperlで削除される予定です。 ASCIIスペース文字と &lt;code&gt;NUL&lt;/code&gt; 既に許可されていないため、これは、その名前が他のC0コントロール &lt;code&gt;[0x01-0x1F]&lt;/code&gt; である単一文字の変数名であるか、 &lt;code&gt;DEL&lt;/code&gt; が非推奨の警告を生成することを意味します。すでに、下の &lt;code&gt;&quot;use utf8&quot;&lt;/code&gt; 、非ASCII文字が一致しなければなりません &lt;code&gt;Perl_XIDS&lt;/code&gt; を。v5.22以降、 &lt;code&gt;&quot;use utf8&quot;&lt;/code&gt; 下にない場合、C1コントロール &lt;code&gt;[0x80-0x9F]&lt;/code&gt; 、NO BREAK SPACE、およびSOFT HYPHEN（ &lt;code&gt;SHY&lt;/code&gt; ））は非推奨の警告を生成します。</target>
        </trans-unit>
        <trans-unit id="25c7b41e2f3083fca5663c24cdf9d0f7721da4bb" translate="yes" xml:space="preserve">
          <source>A sigil, followed solely by digits matching &lt;code&gt;\p{POSIX_Digit}&lt;/code&gt; , like &lt;code&gt;$0&lt;/code&gt; , &lt;code&gt;$1&lt;/code&gt; , or &lt;code&gt;$10000&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$0&lt;/code&gt; 、 &lt;code&gt;$1&lt;/code&gt; 、または &lt;code&gt;$10000&lt;/code&gt; ような &lt;code&gt;\p{POSIX_Digit}&lt;/code&gt; 一致する数字が後に続くシジル。</target>
        </trans-unit>
        <trans-unit id="c803de64703554f9c3355b0bb0b711df0025cdae" translate="yes" xml:space="preserve">
          <source>A sign of 'NaN' is used to represent the result when input arguments are not numbers or as a result of 0/0. '+inf' and '-inf' represent plus respectively minus infinity. You will get '+inf' when dividing a positive number by 0, and '-inf' when dividing any negative number by 0.</source>
          <target state="translated">NaN' の符号は、入力引数が数値でない場合や 0/0 の結果を表すのに使われます。正の数を0で割ると'+inf'、負の数を0で割ると'-inf'となります。</target>
        </trans-unit>
        <trans-unit id="acfa2fff17c2c760f059166beff68ca97cf27024" translate="yes" xml:space="preserve">
          <source>A signature may be entirely empty, in which case all it does is check that the caller passed no arguments:</source>
          <target state="translated">シグネチャは完全に空の場合もありますが、その場合は呼び出し元が引数を渡さなかったかどうかをチェックするだけです。</target>
        </trans-unit>
        <trans-unit id="a3b7bfaadf566cb42bb060b59ab39877bdce37fb" translate="yes" xml:space="preserve">
          <source>A signed integer. This is cast to the required integer type when passed to C and converted to an IV when passed back to Perl.</source>
          <target state="translated">符号付き整数。これはCに渡されると必要な整数型にキャストされ、Perlに戻されるとIVに変換されます。</target>
        </trans-unit>
        <trans-unit id="1575087c19c9eb3e9ca21e23f5fecff11363ecdb" translate="yes" xml:space="preserve">
          <source>A signed integer. This typemap converts the Perl value to a native integer type (the &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; type on the current platform). When returning the value to perl it is processed in the same way as for T_IV.</source>
          <target state="translated">符号付き整数。このタイプマップは、Perl値をネイティブ整数型（現在のプラットフォームの &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; 型）に変換します。値をperlに返すとき、T_IVと同じ方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="9a6e260265e056207c62a15cda251b7b04ab7de2" translate="yes" xml:space="preserve">
          <source>A significant number of the bug reports we get turn out to be documented features in Perl. Make sure the issue you've run into isn't intentional by glancing through the documentation that comes with the Perl distribution.</source>
          <target state="translated">私たちが受け取ったバグレポートのかなりの数は、Perl の文書化された機能であることが判明しています。あなたが遭遇した問題が、Perl ディストリビューションに付属のドキュメントに目を通すことで、意図的なものではないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="80837079263cda7d0c48b62c5a2b8e0aa29ed989" translate="yes" xml:space="preserve">
          <source>A similar but more subtle problem is illustrated with this code:</source>
          <target state="translated">似たような、しかしより微妙な問題をこのコードで説明します。</target>
        </trans-unit>
        <trans-unit id="81ab11bae0fce0f2612a231d95d1eecf127ccce2" translate="yes" xml:space="preserve">
          <source>A similar effect applies to</source>
          <target state="translated">同様の効果が適用されます。</target>
        </trans-unit>
        <trans-unit id="a23425aa80f51fe5db313d5664fb7ac8f4d286d0" translate="yes" xml:space="preserve">
          <source>A similar strategy would work for wildcard expansion via &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, although you can use &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">代わりに &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; を使用することもできますが、同様の戦略が &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; を介したワイルドカード拡張に有効です。</target>
        </trans-unit>
        <trans-unit id="eb1349e3e7bc2ad99052d135eb76b4bea7da2dc2" translate="yes" xml:space="preserve">
          <source>A similar task is to find words consisting of two identical parts:</source>
          <target state="translated">似たような課題として、二つの同一の部分で構成される単語を探します。</target>
        </trans-unit>
        <trans-unit id="ee2213ceffd8c1f2a6f17c3aee8ab7cdf3d4092c" translate="yes" xml:space="preserve">
          <source>A similar trick involves the</source>
          <target state="translated">似たようなトリックには</target>
        </trans-unit>
        <trans-unit id="8848997a2920d88084bbf780cebe39466ec879ee" translate="yes" xml:space="preserve">
          <source>A simple API to convert seconds to other date values</source>
          <target state="translated">秒を他の日付値に変換するためのシンプルな API</target>
        </trans-unit>
        <trans-unit id="c123404763bd10d42cf8e7c2eaf59ecc97ce202f" translate="yes" xml:space="preserve">
          <source>A simple boolean indicating if the command executed without errors or not.</source>
          <target state="translated">コマンドがエラーなく実行されたかどうかを示す単純なブール値。</target>
        </trans-unit>
        <trans-unit id="5bd4089058361e948e8b28ab1128c297a0f82d9e" translate="yes" xml:space="preserve">
          <source>A simple call to &lt;code&gt;isnt()&lt;/code&gt; usually does not provide a strong test but there are cases when you cannot say much more about a value than that it is different from some other value:</source>
          <target state="translated">&lt;code&gt;isnt()&lt;/code&gt; への単純な呼び出しは通常強力なテストを提供しませんが、他の値とは異なるというよりも、値について多くのことを言うことができない場合があります。</target>
        </trans-unit>
        <trans-unit id="4fbcc760723f31ac561f9cef482138111eb6931b" translate="yes" xml:space="preserve">
          <source>A simple checking routine, which will return true if &lt;code&gt;Archive::Tar&lt;/code&gt; is able to uncompress compressed archives on the fly with &lt;code&gt;IO::Zlib&lt;/code&gt; and &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; or false if not both are installed.</source>
          <target state="translated">&lt;code&gt;Archive::Tar&lt;/code&gt; が &lt;code&gt;IO::Zlib&lt;/code&gt; と &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; 使用して圧縮アーカイブをその場で解凍できる場合はtrueを返し、両方がインストールされていない場合はfalse を返す単純なチェックルーチン。</target>
        </trans-unit>
        <trans-unit id="afc5b3faec4a3f9f01b28a9e7d12132d66ab6e1d" translate="yes" xml:space="preserve">
          <source>A simple listing of all the files in your distribution.</source>
          <target state="translated">ディストリビューション内のすべてのファイルのシンプルなリストです。</target>
        </trans-unit>
        <trans-unit id="372959c464065982896bbbe2c2818eb6cad5f8a5" translate="yes" xml:space="preserve">
          <source>A simple mapping of the op type number to its type (like 'COP' or 'BINOP').</source>
          <target state="translated">op型番号とその型との単純なマッピング('COP'や'BINOP'のようなもの)。</target>
        </trans-unit>
        <trans-unit id="d472680931a17874166dba160d7f69e6352eb56b" translate="yes" xml:space="preserve">
          <source>A simple read-only accessor simply gets the value of a single attribute:</source>
          <target state="translated">単純な読み取り専用のアクセサは、単に単一の属性の値を取得します。</target>
        </trans-unit>
        <trans-unit id="681ff201b3498a43f7a62245e78650fd37d86b77" translate="yes" xml:space="preserve">
          <source>A simple scalar number</source>
          <target state="translated">単純なスカラー数</target>
        </trans-unit>
        <trans-unit id="1b93dcb8f21d326777ddc52bfa4bdd011dd04c4a" translate="yes" xml:space="preserve">
          <source>A simple scalar string</source>
          <target state="translated">単純なスカラー文字列</target>
        </trans-unit>
        <trans-unit id="5776d9f23e070178afac4296b05b65fd1f748404" translate="yes" xml:space="preserve">
          <source>A simple scalar with an extra reference</source>
          <target state="translated">単純なスカラーに参照を追加したもの</target>
        </trans-unit>
        <trans-unit id="f593aa1a652c40c9b2c700bcf9bdc1dacfbe433a" translate="yes" xml:space="preserve">
          <source>A simple summary of the tests so far. True for pass, false for fail. This is a logical pass/fail, so todos are passes.</source>
          <target state="translated">これまでのテストの簡単なまとめ。合格は真、不合格は偽。これは論理的な合否なので、TODOSは合格です。</target>
        </trans-unit>
        <trans-unit id="e9ed86741cb6e707485ef431b1b242bee25c8fe1" translate="yes" xml:space="preserve">
          <source>A simple, singular value; a number, &lt;b&gt;string&lt;/b&gt;, or &lt;b&gt;reference&lt;/b&gt;.</source>
          <target state="translated">単純な特異値。数値、&lt;b&gt;文字列&lt;/b&gt;、または&lt;b&gt;参照&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="5a7d12449647b7d47425008bd7d9de56b3bffa22" translate="yes" xml:space="preserve">
          <source>A single character that represents the end of a line, with the ASCII value of 012 octal under Unix (but 015 on a Mac), and represented by &lt;code&gt;\n&lt;/code&gt; in Perl strings. For Windows machines writing text files, and for certain physical devices like terminals, the single newline gets automatically translated by your C library into a line feed and a carriage return, but normally, no translation is done.</source>
          <target state="translated">行の終わりを表す単一の文字。Unixでは8進数の012（ASCII値）（Macでは015）で、Perl文字列では &lt;code&gt;\n&lt;/code&gt; で表されます。テキストファイルを書き込むWindowsマシン、および端末などの特定の物理デバイスでは、単一の改行はCライブラリによってラインフィードとキャリッジリターンに自動的に変換されますが、通常は変換されません。</target>
        </trans-unit>
        <trans-unit id="2a1618c928b45217b1ecfab89b72e2f9c62e981a" translate="yes" xml:space="preserve">
          <source>A single entity with various interpretations, like an elephant. To a computer scientist, it&amp;rsquo;s a grammar for a little language in which some strings are legal and others aren&amp;rsquo;t. To normal people, it&amp;rsquo;s a pattern you can use to find what you&amp;rsquo;re looking for when it varies from case to case. Perl&amp;rsquo;s regular expressions are far from regular in the theoretical sense, but in regular use they work quite well. Here&amp;rsquo;s a regular expression: &lt;code&gt;/Oh s.*t./&lt;/code&gt; . This will match strings like &amp;ldquo;&lt;code&gt;Oh &lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt; can you see by the dawn's early light&lt;/code&gt; &amp;rdquo; and &amp;ldquo;&lt;code&gt;Oh sit!&lt;/code&gt; &amp;rdquo;. See Camel chapter 5, &amp;ldquo;Pattern Matching&amp;rdquo;.</source>
          <target state="translated">象のようなさまざまな解釈を持つ単一のエンティティ。コンピュータサイエンティストにとって、これは、一部の文字列が合法で、他の文字列が合法ではない、小さな言語の文法です。普通の人にとって、それはあなたが探しているものを見つけるのに使用できるパターンです。 Perlの正規表現は、理論的には正規表現とはほど遠いですが、通常の使用では非常によく機能します。正規表現は次のとおりです： &lt;code&gt;/Oh s.*t./&lt;/code&gt; 。これは「のような文字列に一致します。 &lt;code&gt;Oh &lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt; can you see by the dawn's early light&lt;/code&gt; 「と」 &lt;code&gt;Oh sit!&lt;/code&gt; 」。ラクダの第5章「パターンマッチング」を参照してください。</target>
        </trans-unit>
        <trans-unit id="829152f3dcb1ed16bfc3e8ca36bfa63ebf05d7eb" translate="yes" xml:space="preserve">
          <source>A single hexadecimal number denoting a code point to include.</source>
          <target state="translated">インクルードするコードポイントを示す1つの16進数。</target>
        </trans-unit>
        <trans-unit id="27a4bf6aaf65d7e6150de844a569f0f9a5f667a4" translate="yes" xml:space="preserve">
          <source>A single piece of numeric or string data that is part of a longer &lt;b&gt;string&lt;/b&gt;, &lt;b&gt;record&lt;/b&gt;, or &lt;b&gt;line&lt;/b&gt;. Variable-width fields are usually split up by &lt;b&gt;separators&lt;/b&gt; (so use &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; to extract the fields), while fixed-width fields are usually at fixed positions (so use &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;). &lt;b&gt;Instance variables&lt;/b&gt; are also known as &amp;ldquo;fields&amp;rdquo;.</source>
          <target state="translated">長いの一部であり、数値や文字列データの一片&lt;b&gt;の文字列&lt;/b&gt;、&lt;b&gt;記録&lt;/b&gt;、または&lt;b&gt;ライン&lt;/b&gt;。可変幅フィールドは通常&lt;b&gt;セパレーターで&lt;/b&gt;分割されます（したがって、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; を使用してフィールドを抽出します）。一方、固定幅フィールドは通常固定位置にあります（したがって &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用します）。&lt;b&gt;インスタンス変数&lt;/b&gt;は「フィールド」とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="3ff4db73bde7c1d7cfd3e2062dd1951912b9e366" translate="yes" xml:space="preserve">
          <source>A single symbol abbreviating the class of the OP.</source>
          <target state="translated">OPのクラスを略した1つの記号。</target>
        </trans-unit>
        <trans-unit id="ed641668fea177eedad336e7089851d18b828e16" translate="yes" xml:space="preserve">
          <source>A single testing job.</source>
          <target state="translated">単発のテスト業務。</target>
        </trans-unit>
        <trans-unit id="41bf4051bfbbef3d6c2986f2065087b05c2359b5" translate="yes" xml:space="preserve">
          <source>A single-quoted, literal string. A backslash represents a backslash unless followed by the delimiter or another backslash, in which case the delimiter or backslash is interpolated.</source>
          <target state="translated">単一引用符で囲まれたリテラル文字列。バックスラッシュは、デリミタや別のバックスラッシュが続いていない限りバックスラッシュを表します。</target>
        </trans-unit>
        <trans-unit id="8add36465a616cf6d47e4a5aef01fb690927c1f3" translate="yes" xml:space="preserve">
          <source>A slice accesses several elements of a list, an array, or a hash simultaneously using a list of subscripts. It's more convenient than writing out the individual elements as a list of separate scalar values.</source>
          <target state="translated">スライスは、添え字のリストを使用して、リスト、配列、またはハッシュの複数の要素に同時にアクセスします。個々の要素を別々のスカラ値のリストとして書き出すよりも便利です。</target>
        </trans-unit>
        <trans-unit id="7f8a4967d94ac75566470d147a5f123047048bbb" translate="yes" xml:space="preserve">
          <source>A slight modification also removes C++ comments, possibly spanning multiple lines using a continuation character:</source>
          <target state="translated">わずかな修正では、C++のコメントも削除され、連続文字を使用して複数行にまたがっている可能性があります。</target>
        </trans-unit>
        <trans-unit id="e99cb7094afcbc76a76c4efa1f4eefdffe5bff51" translate="yes" xml:space="preserve">
          <source>A slightly larger piece of code will provide something on which a profiler can produce more extensive reporting statistics. This example uses the simplistic &lt;code&gt;wordmatch&lt;/code&gt; program which parses a given input file and spews out a short report on the contents.</source>
          <target state="translated">少し大きいコードは、プロファイラーがより広範なレポート統計を生成できるものを提供します。この例では、特定の入力ファイルを解析し、内容に関する短いレポートを出力する単純な &lt;code&gt;wordmatch&lt;/code&gt; プログラムを使用しています。</target>
        </trans-unit>
        <trans-unit id="03934c7f98da92e385e9ea42d12c3ed3bec3632f" translate="yes" xml:space="preserve">
          <source>A slurpy hash parameter may be nameless just like other kinds of parameter. It still insists that the number of arguments available to it be even, even though they're not being put into a variable.</source>
          <target state="translated">スラスラとしたハッシュパラメータは、他の種類のパラメータと同じように名前がない場合があります。変数に入れられていないにもかかわらず、引数の数が偶数であることを主張します。</target>
        </trans-unit>
        <trans-unit id="30988eefa9eacb81270153c8608fad35b31b7f98" translate="yes" xml:space="preserve">
          <source>A slurpy parameter may instead be a hash, in which case the arguments available to it are interpreted as alternating keys and values. There must be as many keys as values: if there is an odd argument then an exception will be thrown. Keys will be stringified, and if there are duplicates then the later instance takes precedence over the earlier, as with standard hash construction.</source>
          <target state="translated">スラーピーパラメータは、代わりにハッシュにすることもできます。その場合、利用可能な引数は交互にキーと値として解釈されます。キーの数と値の数は同じくらいでなければなりません。奇数の引数がある場合は例外がスローされます。キーは文字列化され、重複がある場合は、標準的なハッシュの構築と同様に、後のインスタンスが前のインスタンスよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="76d8ab783e8ae2210ac2fb7506feb3637ad91b4b" translate="yes" xml:space="preserve">
          <source>A slurpy parameter, either array or hash, must be the last thing in the signature. It may follow mandatory and optional positional parameters; it may also be the only thing in the signature. Slurpy parameters cannot have default values: if no arguments are supplied for them then you get an empty array or empty hash.</source>
          <target state="translated">スラーピーパラメータは、配列またはハッシュのいずれかで、シグネチャの最後のものでなければなりません。スラーピーパラメータは、必須またはオプションの位置パラメータの後に続くこともあります。スラーピーパラメータはデフォルト値を持つことはできません。引数が与えられなかった場合は、空の配列か空のハッシュになります。</target>
        </trans-unit>
        <trans-unit id="c7ed55a78ba712132c2ae6c86e583e8efc503821" translate="yes" xml:space="preserve">
          <source>A small example demonstrating SysV message queues:</source>
          <target state="translated">SysVのメッセージキューを示す小さな例です。</target>
        </trans-unit>
        <trans-unit id="b0014acccc6b5556fca51e530830260283cc77d0" translate="yes" xml:space="preserve">
          <source>A small script which yields the problem will probably be of help. It would also be useful if this script was run with the extra options &lt;code&gt;Debug =&lt;/code&gt; 1&amp;gt; passed to the constructor, and the output sent with the bug report. If you cannot include a small script then please include a Debug trace from a run of your program which does yield the problem.</source>
          <target state="translated">問題を引き起こす小さなスクリプトはおそらく助けになるでしょう。このスクリプトが、コンストラクターに渡された追加のオプション &lt;code&gt;Debug =&lt;/code&gt; 1&amp;gt;で実行され、出力がバグレポートとともに送信された場合にも役立ちます。小さなスクリプトを含めることができない場合は、問題が発生するプログラムの実行からのデバッグトレースを含めてください。</target>
        </trans-unit>
        <trans-unit id="c165dd6d48bb6848a9c96904378fd915f9518c69" translate="yes" xml:space="preserve">
          <source>A small, simple, correct HTTP/1.1 client</source>
          <target state="translated">小さくてシンプルで正しいHTTP/1.1クライアント</target>
        </trans-unit>
        <trans-unit id="27545b929364aeeb83be800c720a5090d4d35630" translate="yes" xml:space="preserve">
          <source>A smart match that uses an explicit &lt;code&gt;~~&lt;/code&gt; operator, such as &lt;code&gt;EXPR ~~ EXPR&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;EXPR ~~ EXPR&lt;/code&gt; などの明示的な &lt;code&gt;~~&lt;/code&gt; 演算子を使用するスマートマッチ。</target>
        </trans-unit>
        <trans-unit id="5ee7049b5826d72a2f103072d053d50784d7d0da" translate="yes" xml:space="preserve">
          <source>A sneaky &lt;code&gt;LC_COLLATE&lt;/code&gt; locale could result in the names of students with &quot;D&quot; grades appearing ahead of those with &quot;A&quot;s.</source>
          <target state="translated">卑劣な &lt;code&gt;LC_COLLATE&lt;/code&gt; ロケールでは、「D」の成績を持つ生徒の名前が「A」の生徒の名前の前に表示される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5bd3117b0bc435a9ddefeeeda5fe0b0754edfcc4" translate="yes" xml:space="preserve">
          <source>A solution to this is to use a library which uses pseudottys to make your program behave more reasonably. This way you don't have to have control over the source code of the program you're using. The &lt;code&gt;Expect&lt;/code&gt; module from CPAN also addresses this kind of thing. This module requires two other modules from CPAN, &lt;code&gt;IO::Pty&lt;/code&gt; and &lt;code&gt;IO::Stty&lt;/code&gt; . It sets up a pseudo terminal to interact with programs that insist on talking to the terminal device driver. If your system is supported, this may be your best bet.</source>
          <target state="translated">これに対する解決策は、疑似端末を使用するライブラリを使用して、プログラムをより合理的に動作させることです。これにより、使用しているプログラムのソースコードを制御する必要がなくなります。CPAN の &lt;code&gt;Expect&lt;/code&gt; モジュールもこの種の問題に対処しています。このモジュールには、CPANの他の2つのモジュール、 &lt;code&gt;IO::Pty&lt;/code&gt; および &lt;code&gt;IO::Stty&lt;/code&gt; です。端末デバイスドライバーとの通信を要求するプログラムと対話する疑似端末を設定します。お使いのシステムがサポートされている場合、これが最善の策である可能性があります。</target>
        </trans-unit>
        <trans-unit id="0b80c1598a0b057abd1403fd2b9a7dc757cff1ce" translate="yes" xml:space="preserve">
          <source>A source filter is a special kind of Perl module that intercepts and modifies a source stream before it reaches the parser. A source filter changes our diagram like this:</source>
          <target state="translated">ソースフィルタは、パーサに到達する前にソースストリームをインターセプトして修正する Perl モジュールの特別な種類です。ソース フィルタは、このように図を変更します。</target>
        </trans-unit>
        <trans-unit id="8b0be58db42e648ec049b8d1ddee43ac5d107082" translate="yes" xml:space="preserve">
          <source>A space (or colon) separated list of PerlIO layers. If perl is built to use PerlIO system for IO (the default) these layers affect Perl's IO.</source>
          <target state="translated">スペース(またはコロン)で区切られたPerlIOレイヤーのリスト。PerlがIOにPerlIOシステムを使用するように作られている場合(デフォルト)、これらのレイヤはPerlのIOに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="0badf9ed68d3af0c4f3cd1c0a7af9f9020afc01b" translate="yes" xml:space="preserve">
          <source>A special &lt;b&gt;method&lt;/b&gt; that is called when an &lt;b&gt;object&lt;/b&gt; is thinking about &lt;b&gt;destroying&lt;/b&gt; itself. A Perl program&amp;rsquo;s &lt;code&gt;DESTROY&lt;/code&gt; method doesn&amp;rsquo;t do the actual destruction; Perl just &lt;b&gt;triggers&lt;/b&gt; the method in case the &lt;b&gt;class&lt;/b&gt; wants to do any associated cleanup.</source>
          <target state="translated">&lt;b&gt;オブジェクト&lt;/b&gt;が自分自身&lt;b&gt;を破壊する&lt;/b&gt;ことを考えているときに呼び出される特別な&lt;b&gt;メソッド&lt;/b&gt;。Perlプログラムの &lt;code&gt;DESTROY&lt;/code&gt; メソッドは実際の破棄を行いません。&lt;b&gt;クラス&lt;/b&gt;が関連するクリーンアップを実行したい場合、Perl はメソッドを&lt;b&gt;トリガー&lt;/b&gt;するだけです。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ef35c437c5c84fa1b46b5dc38d46f6fde11ec243" translate="yes" xml:space="preserve">
          <source>A special case is if the expression is a subroutine reference (in either &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {...}&lt;/code&gt; syntax or &lt;code&gt;\&amp;amp;foo&lt;/code&gt; syntax). In that case, it is executed and its value (true or false) determines if the test passes or fails. For example,</source>
          <target state="translated">特殊なケースは、式がサブルーチン参照（ &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {...}&lt;/code&gt; 構文または &lt;code&gt;\&amp;amp;foo&lt;/code&gt; 構文のいずれか）の場合です。その場合、それは実行され、その値（trueまたはfalse）はテストが成功するか失敗するかを決定します。例えば、</target>
        </trans-unit>
        <trans-unit id="4d4bdb3b56feee845f988c80b59a2de393b4d25c" translate="yes" xml:space="preserve">
          <source>A special entry &lt;code&gt;GetOptionsFromString&lt;/code&gt; can be used to parse options from an arbitrary string.</source>
          <target state="translated">特別なエントリ &lt;code&gt;GetOptionsFromString&lt;/code&gt; を使用して、任意の文字列からオプションを解析できます。</target>
        </trans-unit>
        <trans-unit id="f5f25c2de52c4c00b53b25ba03c614f087fa031c" translate="yes" xml:space="preserve">
          <source>A special file that contains other files. Some &lt;b&gt;operating systems&lt;/b&gt; call these &amp;ldquo;folders&amp;rdquo;, &amp;ldquo;drawers&amp;rdquo;, &amp;ldquo;catalogues&amp;rdquo;, or &amp;ldquo;catalogs&amp;rdquo;.</source>
          <target state="translated">他のファイルを含む特別なファイル。一部の&lt;b&gt;オペレーティングシステムで&lt;/b&gt;は、これらを「フォルダー」、「引き出し」、「カタログ」、または「カタログ」と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="9d4dee1bf51d9988b7b651c7e34b5ae56c3d23f3" translate="yes" xml:space="preserve">
          <source>A special form is the &lt;code&gt;(DEFINE)&lt;/code&gt; predicate, which never executes its yes-pattern directly, and does not allow a no-pattern. This allows one to define subpatterns which will be executed only by the recursion mechanism. This way, you can define a set of regular expression rules that can be bundled into any pattern you choose.</source>
          <target state="translated">特別な形式は &lt;code&gt;(DEFINE)&lt;/code&gt; 述語であり、yesパターンを直接実行することはなく、no-patternは許可されません。これにより、再帰メカニズムによってのみ実行されるサブパターンを定義できます。このようにして、選択した任意のパターンにバンドルできる一連の正規表現ルールを定義できます。</target>
        </trans-unit>
        <trans-unit id="098ae82dbb47389fd0f04911d56700422f9e1bbd" translate="yes" xml:space="preserve">
          <source>A special internal spot in which Perl keeps the information about the last &lt;b&gt;file&lt;/b&gt; on which you requested information.</source>
          <target state="translated">Perlが情報を要求した最後の&lt;b&gt;ファイル&lt;/b&gt;に関する情報を保持する特別な内部スポット。</target>
        </trans-unit>
        <trans-unit id="79eddc4100fb4306d07fc838a90fb71a102a9485" translate="yes" xml:space="preserve">
          <source>A special kind of &lt;b&gt;module&lt;/b&gt; that does &lt;b&gt;preprocessing&lt;/b&gt; on your script just before it gets to the &lt;b&gt;tokener&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;tokenerに到達&lt;/b&gt;する直前にスクリプトで前&lt;b&gt;処理&lt;/b&gt;を行う特別な種類の&lt;b&gt;モジュール&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0c845e10d2c5e7d853c713ce339e272a56f03f5c" translate="yes" xml:space="preserve">
          <source>A special kind of &lt;b&gt;scalar context&lt;/b&gt; used in conditionals to decide whether the &lt;b&gt;scalar value&lt;/b&gt; returned by an expression is &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt;. Does not evaluate as either a string or a number. See &lt;b&gt;context&lt;/b&gt;.</source>
          <target state="translated">式によって返される&lt;b&gt;スカラー値&lt;/b&gt;が&lt;b&gt;true&lt;/b&gt;か&lt;b&gt;false&lt;/b&gt;かを決定するために条件式&lt;b&gt;で&lt;/b&gt;使用される特別な種類の&lt;b&gt;スカラーコンテキスト&lt;/b&gt;。文字列または数値として評価されません。&lt;b&gt;コンテキストを&lt;/b&gt;参照してください。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="89b7b57b006b340679bccefff3860259f11cee5d" translate="yes" xml:space="preserve">
          <source>A special note about fetching files from an ftp uri:</source>
          <target state="translated">ftp uri からのファイルの取得についての特別な注意事項。</target>
        </trans-unit>
        <trans-unit id="2a568b09a052a4fda0da31a9dd45e8de43daae28" translate="yes" xml:space="preserve">
          <source>A special option 'name' &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; can be used to designate a subroutine to handle non-option arguments. When GetOptions() encounters an argument that does not look like an option, it will immediately call this subroutine and passes it one parameter: the argument name. Well, actually it is an object that stringifies to the argument name.</source>
          <target state="translated">特別なオプション 'name' &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; を使用して、オプション以外の引数を処理するサブルーチンを指定できます。GetOptions（）は、オプションのように見えない引数を検出すると、すぐにこのサブルーチンを呼び出し、1つのパラメーター（引数名）を渡します。まあ、実際には引数名に文字列化するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="9bb864d2ebf5f6403ee2f29fbe30d0ca7cb3bbfc" translate="yes" xml:space="preserve">
          <source>A special program that runs on the bare machine and hides the gory details of managing &lt;b&gt;processes&lt;/b&gt; and &lt;b&gt;devices&lt;/b&gt;. Usually used in a looser sense to indicate a particular culture of programming. The loose sense can be used at varying levels of specificity. At one extreme, you might say that all versions of Unix and Unix-lookalikes are the same operating system (upsetting many people, especially lawyers and other advocates). At the other extreme, you could say this particular version of this particular vendor&amp;rsquo;s operating system is different from any other version of this or any other vendor&amp;rsquo;s operating system. Perl is much more portable across operating systems than many other languages. See also &lt;b&gt;architecture&lt;/b&gt; and &lt;b&gt;platform&lt;/b&gt;.</source>
          <target state="translated">ベアマシンで実行され、&lt;b&gt;プロセス&lt;/b&gt;と&lt;b&gt;デバイス&lt;/b&gt;の管理の残酷な詳細を隠す特別なプログラム。通常、プログラミングの特定の文化を示すために、より緩い意味で使用されます。緩やかな感覚は、特異性のさまざまなレベルで使用できます。極端な場合、UnixとUnixに似たバージョンはすべて同じオペレーティングシステムであると言うかもしれません（多くの人々、特に弁護士や他の支持者を混乱させます）。逆に言えば、この特定のベンダーのオペレーティングシステムのこの特定のバージョンは、他のどのバージョンのこのベンダーまたは他のベンダーのオペレーティングシステムとも異なると言えます。 Perlは、他の多くの言語よりもオペレーティングシステム間ではるかに移植性があります。&lt;b&gt;アーキテクチャ&lt;/b&gt;と&lt;b&gt;プラットフォーム&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b03867324ba36517f3a9d0e823f68ebcc5db216b" translate="yes" xml:space="preserve">
          <source>A special programming gizmo that keeps track of where you are in something that you&amp;rsquo;re trying to iterate over. The &lt;code&gt;foreach&lt;/code&gt; loop in Perl contains an iterator; so does a hash, allowing you to &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; through it.</source>
          <target state="translated">反復しようとしている何かのどこにいるかを追跡する特別なプログラミングギズモ。Perl の &lt;code&gt;foreach&lt;/code&gt; ループには反復子が含まれています。これにあなたをできるように、ハッシュを行い &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; それを通して。</target>
        </trans-unit>
        <trans-unit id="cb2ae230ab87141b90e09da012ca49eb173d1f62" translate="yes" xml:space="preserve">
          <source>A special thanks to Damian Conway, who didn't only suggest important changes, but also took the time to count the number of listed features and make a Perl 6 version to show that Perl will stay Perl.</source>
          <target state="translated">重要な変更点を提案してくれただけでなく、リストアップされた機能の数を数えたり、Perl が Perl のままであることを示すために Perl 6 のバージョンを作ったりするのに時間を割いてくれた Damian Conway に特別な感謝の意を表します。</target>
        </trans-unit>
        <trans-unit id="dbd3a98639e4de23b8ab5b1ce7e392825e327157" translate="yes" xml:space="preserve">
          <source>A special token that compiles to the current line number.</source>
          <target state="translated">現在の行番号にコンパイルする特別なトークン。</target>
        </trans-unit>
        <trans-unit id="f8db7e23c364c11a426f9d30c1e28cd4da6326e7" translate="yes" xml:space="preserve">
          <source>A special token that returns a reference to the current subroutine, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; outside of a subroutine.</source>
          <target state="translated">現在のサブルーチンへの参照、またはサブルーチン外の &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返す特別なトークン。</target>
        </trans-unit>
        <trans-unit id="d6eea162b97cdf5937cc80c12d97f68b73850c69" translate="yes" xml:space="preserve">
          <source>A special token that returns a reference to the current subroutine, or &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; outside of a subroutine.</source>
          <target state="translated">現在のサブルーチンへの参照、またはサブルーチン外の &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返す特別なトークン。</target>
        </trans-unit>
        <trans-unit id="2c26f3ebdbb02dd6bf3cbae9d5ef0c2e36ca2b14" translate="yes" xml:space="preserve">
          <source>A special token that returns the name of the file in which it occurs.</source>
          <target state="translated">それが発生したファイルの名前を返す特別なトークン。</target>
        </trans-unit>
        <trans-unit id="48496bf275cb62c80b11546a66125c1e011d6e73" translate="yes" xml:space="preserve">
          <source>A special token that returns the name of the package in which it occurs.</source>
          <target state="translated">それが発生したパッケージの名前を返す特別なトークン。</target>
        </trans-unit>
        <trans-unit id="07395fd97ce6a28d8015ab2eaad3eae19ab86b6e" translate="yes" xml:space="preserve">
          <source>A specialised variant of &lt;code&gt;croak()&lt;/code&gt; for emitting the usage message for xsubs</source>
          <target state="translated">xsubsの使用状況メッセージを出力するための &lt;code&gt;croak()&lt;/code&gt; の特殊なバリアント</target>
        </trans-unit>
        <trans-unit id="89a1130f5dbd32f8addbfbf8cc52dc9647058465" translate="yes" xml:space="preserve">
          <source>A specialised version of &lt;a href=&quot;#newHVhv&quot;&gt;newHVhv&lt;/a&gt; for copying &lt;code&gt;%^H&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;%^H&lt;/code&gt; をコピーするための特別なバージョンの&lt;a href=&quot;#newHVhv&quot;&gt;newHVhv&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e58efa1c2b3f0ec95f611bcd359aa9037253ccf" translate="yes" xml:space="preserve">
          <source>A specification of how many spaces and digits and things to put somewhere so that whatever you&amp;rsquo;re printing comes out nice and pretty.</source>
          <target state="translated">印刷するものが何でもきれいに表示されるように、スペースと桁数、およびどこに配置するかについての仕様。</target>
        </trans-unit>
        <trans-unit id="ece2ff0c58aaa5372289e45e695e7991badd8557" translate="yes" xml:space="preserve">
          <source>A spoonerism of &amp;ldquo;creeping featurism&amp;rdquo;, noting the biological urge to add just one more feature to a program.</source>
          <target state="translated">プログラムに機能を1つだけ追加したいという生物学的衝動に注目した、「忍び寄る特技」のスプーネリズム。</target>
        </trans-unit>
        <trans-unit id="d575cbf3544d0e35868eb03520f7ba9dff410b04" translate="yes" xml:space="preserve">
          <source>A spot in your program where you&amp;rsquo;ve told the debugger to stop &lt;b&gt;execution&lt;/b&gt; so you can poke around and see whether anything is wrong yet.</source>
          <target state="translated">デバッガーに&lt;b&gt;実行&lt;/b&gt;を停止するように指示したプログラム内の場所。これにより、何かを調べて、まだ問題がないかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="c8d0045954f55c0ef11ccdf21fdc1fefc0f23ff1" translate="yes" xml:space="preserve">
          <source>A square-bracketed list of characters used in a &lt;b&gt;regular expression&lt;/b&gt; to indicate that any character of the set may occur at a given point. Loosely, any predefined set of characters so used.</source>
          <target state="translated">セットの任意の文字が特定のポイントで発生する可能性があることを示すために、&lt;b&gt;正規表現で&lt;/b&gt;使用される角括弧で囲まれた文字のリスト。大まかに言って、そのように使用される事前定義された文字のセット。</target>
        </trans-unit>
        <trans-unit id="a4537030d9c45923983b601a7f64bbae6c4af141" translate="yes" xml:space="preserve">
          <source>A stable sort means that for records that compare equal, the original input ordering is preserved. Mergesort is stable, quicksort is not. Stability will matter only if elements that compare equal can be distinguished in some other way. That means that simple numerical and lexical sorts do not profit from stability, since equal elements are indistinguishable. However, with a comparison such as</source>
          <target state="translated">安定したソートとは、等しく比較されるレコードに対して、元の入力順序が保持されることを意味します。マージソートは安定していますが、クイックソートは安定していません。安定性が問題になるのは、等しく比較される要素が他の方法で区別できる場合のみです。つまり、単純な数値ソートやレキシカルソートでは、等しい要素は区別できないので、安定性の恩恵を受けられません。しかし</target>
        </trans-unit>
        <trans-unit id="0bc56d9c1394b0fa0321168c0b37750c90b88391" translate="yes" xml:space="preserve">
          <source>A standalone &lt;code&gt;=end&lt;/code&gt; command was found.</source>
          <target state="translated">スタンドアロンの &lt;code&gt;=end&lt;/code&gt; コマンドが見つかりました。</target>
        </trans-unit>
        <trans-unit id="90d81dc6a3e1d8ac5702b6911f4d25957cbc4616" translate="yes" xml:space="preserve">
          <source>A standard C library for doing &lt;b&gt;buffered&lt;/b&gt; input and output to the &lt;b&gt;operating system&lt;/b&gt;. (The &amp;ldquo;standard&amp;rdquo; of standard I/O is at most marginally related to the &amp;ldquo;standard&amp;rdquo; of standard input and output.) In general, Perl relies on whatever implementation of standard I/O a given operating system supplies, so the buffering characteristics of a Perl program on one machine may not exactly match those on another machine. Normally this only influences efficiency, not semantics. If your standard I/O package is doing block buffering and you want it to &lt;b&gt;flush&lt;/b&gt; the buffer more often, just set the &lt;code&gt;$|&lt;/code&gt; variable to a true value.</source>
          <target state="translated">&lt;b&gt;オペレーティングシステム&lt;/b&gt;への入力と出力の&lt;b&gt;バッファリング&lt;/b&gt;を行うための標準Cライブラリ。 （標準I / Oの「標準」は、せいぜい標準入出力の「標準」にわずかに関連しています。）一般に、Perlは、特定のオペレーティングシステムが提供する標準I / Oの実装に依存しているため、バッファリング特性1つのマシン上のPerlプログラムの数は、別のマシン上のものと正確に一致しない場合があります。通常、これはセマンティクスではなく効率にのみ影響します。標準I / Oパッケージがブロックバッファリングを行っており、より頻繁にバッファーを&lt;b&gt;フラッシュ&lt;/b&gt;する場合は、 &lt;code&gt;$|&lt;/code&gt; 設定するだけです。変数を真の値に。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ffe116dcbea9e5d21815e3d329637659dd6eec04" translate="yes" xml:space="preserve">
          <source>A standard module whose practical hints and suggestions are received (and possibly ignored) at compile time. Pragmas are named in all lowercase.</source>
          <target state="translated">コンパイル時に実用的なヒントや提案を受け取る (そして無視される可能性もある)標準モジュール。プラグマの名前はすべて小文字で付けられます。</target>
        </trans-unit>
        <trans-unit id="3042ccfccce8001b84bc5b8d8019cf025a6017d9" translate="yes" xml:space="preserve">
          <source>A standard, bundled release of a system of software. The default usage implies source code is included. If that is not the case, it will be called a &amp;ldquo;binary-only&amp;rdquo; distribution.</source>
          <target state="translated">ソフトウェアのシステムの標準のバンドルされたリリース。デフォルトの使用法は、ソースコードが含まれていることを意味します。そうでない場合は、「バイナリのみ」のディストリビューションと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c6647b8f10e57534f902ddf1aa4bccf61236fd6c" translate="yes" xml:space="preserve">
          <source>A statement sequence may contain declarations of lexically-scoped variables, but apart from declaring a variable name, the declaration acts like an ordinary statement, and is elaborated within the sequence of statements as if it were an ordinary statement. That means it actually has both compile-time and run-time effects.</source>
          <target state="translated">文のシーケンスには、辞書的にスコープされた変数の宣言が含まれているかもしれませんが、変数名の宣言とは別に、宣言は通常の文のように動作し、通常の文であるかのように文のシーケンスの中で展開されます。つまり、コンパイル時と実行時の両方の効果があるということです。</target>
        </trans-unit>
        <trans-unit id="fa46e467d8cdc232f6a66d28e35057665324ee9f" translate="yes" xml:space="preserve">
          <source>A string (char *).</source>
          <target state="translated">文字列 (char *)。</target>
        </trans-unit>
        <trans-unit id="75e5df3441233543315a78a7205a2debb8ad739c" translate="yes" xml:space="preserve">
          <source>A string &lt;a href=&quot;functions/eval&quot;&gt;eval EXPR&lt;/a&gt; parses its expression as standard Perl. It is therefore expecting the decimal point to be a dot. If &lt;code&gt;LC_NUMERIC&lt;/code&gt; is set to have this be a comma instead, the parsing will be confused, perhaps silently.</source>
          <target state="translated">文字列&lt;a href=&quot;functions/eval&quot;&gt;eval EXPR&lt;/a&gt;は、その式を標準Perlとして解析します。したがって、小数点はドットであると想定しています。 &lt;code&gt;LC_NUMERIC&lt;/code&gt; がカンマになるように設定されている場合、解析がおそらくサイレントで混乱します。</target>
        </trans-unit>
        <trans-unit id="b9568afdc53a4a7f1711d767a18a8d9f968593e6" translate="yes" xml:space="preserve">
          <source>A string beginning with &lt;code&gt;CLISYM_&lt;/code&gt; tells Perl to consult the CLI's symbol tables, using</source>
          <target state="translated">&lt;code&gt;CLISYM_&lt;/code&gt; で始まる文字列は、次のコマンドを使用して、CLIのシンボルテーブルを参照するようPerlに指示します。</target>
        </trans-unit>
        <trans-unit id="afb88c9d62f1cca49157633840f22b59a116a8ab" translate="yes" xml:space="preserve">
          <source>A string containing all characters that should be encoded as HTML entities, specified using the regular expression character class syntax (what you find within brackets in regular expressions). This value will be passed as the second argument to the &lt;code&gt;encode_entities&lt;/code&gt; function of &lt;a href=&quot;http://search.cpan.org/perldoc/HTML::Entities&quot;&gt;HTML::Entities&lt;/a&gt;. If &lt;a href=&quot;http://search.cpan.org/perldoc/HTML::Entities&quot;&gt;HTML::Entities&lt;/a&gt; is not installed, then any characters other than &lt;code&gt;&amp;amp;&amp;lt;&lt;/code&gt; &quot;'&amp;gt; will be encoded numerically.</source>
          <target state="translated">HTMLエンティティとしてエンコードする必要のあるすべての文字を含む文字列。正規表現の文字クラス構文を使用して指定します（正規表現の括弧内にあるもの）。この値は、&lt;a href=&quot;http://search.cpan.org/perldoc/HTML::Entities&quot;&gt;HTML :: Entitiesの&lt;/a&gt; &lt;code&gt;encode_entities&lt;/code&gt; 関数の2番目の引数として渡されます。&lt;a href=&quot;http://search.cpan.org/perldoc/HTML::Entities&quot;&gt;HTML :: Entities&lt;/a&gt;がインストールされていない場合、 &lt;code&gt;&amp;amp;&amp;lt;&lt;/code&gt; &quot;'&amp;gt; 以外の文字は数値でエンコードされます。</target>
        </trans-unit>
        <trans-unit id="2c6988b512688bb605e69e65500198db5054baa8" translate="yes" xml:space="preserve">
          <source>A string containing the text of a message to print</source>
          <target state="translated">印刷するメッセージのテキストを含む文字列</target>
        </trans-unit>
        <trans-unit id="bf5bf16fd07f45d581debfd5241308f05f5b876d" translate="yes" xml:space="preserve">
          <source>A string corresponding to the desired output file (or &quot;&amp;gt;&amp;amp;STDOUT&quot; or &quot;&amp;gt;&amp;amp;STDERR&quot;), or a filehandle to write on. The default is to use standard output.</source>
          <target state="translated">目的の出力ファイル（または &quot;&amp;gt;＆STDOUT&quot;または &quot;&amp;gt;＆STDERR&quot;）に対応する文字列、または書き込むファイルハンドル。デフォルトでは、標準出力を使用します。</target>
        </trans-unit>
        <trans-unit id="e81c48705eb13d4df1f22c2acd8523f46384c993" translate="yes" xml:space="preserve">
          <source>A string enclosed by backticks (grave accents) first undergoes double-quote interpolation. It is then interpreted as an external command, and the output of that command is the value of the backtick string, like in a shell. In scalar context, a single string consisting of all output is returned. In list context, a list of values is returned, one per line of output. (You can set &lt;code&gt;$/&lt;/code&gt; to use a different line terminator.) The command is executed each time the pseudo-literal is evaluated. The status value of the command is returned in &lt;code&gt;$?&lt;/code&gt; (see &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for the interpretation of &lt;code&gt;$?&lt;/code&gt; ). Unlike in &lt;b&gt;csh&lt;/b&gt;, no translation is done on the return data--newlines remain newlines. Unlike in any of the shells, single quotes do not hide variable names in the command from interpretation. To pass a literal dollar-sign through to the shell you need to hide it with a backslash. The generalized form of backticks is &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt;. (Because backticks always undergo shell expansion as well, see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt; for security concerns.)</source>
          <target state="translated">バッククォート（グレーブアクセント）で囲まれた文字列は、最初に二重引用符の補間を受けます。次に、それは外部コマンドとして解釈され、そのコマンドの出力は、シェルのようにバックティック文字列の値になります。スカラーコンテキストでは、すべての出力で構成される単一の文字列が返されます。リストのコンテキストでは、出力の行ごとに1つの値のリストが返されます。 （ &lt;code&gt;$/&lt;/code&gt; を設定して、別の行末記号を使用できます。）コマンドは、疑似リテラルが評価されるたびに実行されます。コマンドのステータス値は &lt;code&gt;$?&lt;/code&gt; に返されます。（ &lt;code&gt;$?&lt;/code&gt; の解釈については&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照してください）。&lt;b&gt;csh&lt;/b&gt;とは異なり&lt;b&gt;&lt;/b&gt;、戻りデータの変換は行われません。改行は改行のままです。他のシェルとは異なり、単一引用符はコマンドの変数名を解釈から隠しません。シェルに文字通りのドル記号を渡すには、バックスラッシュで隠す必要があります。バックティックの一般化された形式は &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt; です。（バック&lt;a href=&quot;perlsec&quot;&gt;ティック&lt;/a&gt;は常にシェル拡張も受けるため、セキュリティ上の懸念についてはperlsecを参照してください。）</target>
        </trans-unit>
        <trans-unit id="8188c86cb7ff03c08e73a3bf26c2466b54d74c0a" translate="yes" xml:space="preserve">
          <source>A string encoded in UTF-EBCDIC may be longer (but never shorter) than one encoded in UTF-8. Perl extends UTF-8 so that it can encode code points above the Unicode maximum of U+10FFFF. It extends UTF-EBCDIC as well, but due to the inherent limitations in UTF-EBCDIC, the maximum code point expressible is U+7FFF_FFFF, even if the word size is more than 32 bits.</source>
          <target state="translated">UTF-EBCDIC でエンコードされた文字列は、UTF-8 でエンコードされた文字列よりも長いかもしれません (しかし、決して短くはありません)。Perl は UTF-8 を拡張して、Unicode の最大値 U+10FFFF より上のコードポイントをエンコードできるようにしています。UTF-EBCDICも同様に拡張していますが、UTF-EBCDICに固有の制限があるため、ワードサイズが32ビットを超えても表現可能な最大コードポイントはU+7FFF_FFFFとなります。</target>
        </trans-unit>
        <trans-unit id="f4917965ca44eb0c4faae94a841c4f89027d6938" translate="yes" xml:space="preserve">
          <source>A string of alternative option starter characters may be passed as the first argument (or the first argument after a leading hash reference argument).</source>
          <target state="translated">代替オプションのスタータ文字の文字列を第一引数として渡すことができます (あるいは、先頭のハッシュ参照引数の後の第一引数として渡すこともできます)。</target>
        </trans-unit>
        <trans-unit id="46c47b9481cf147721b670360f462acc06f6b68e" translate="yes" xml:space="preserve">
          <source>A string of portable printable characters. This is the base64 encoded representation of the digest with any trailing padding removed. The string will be about 30% longer than the binary version. &lt;a href=&quot;mime/base64&quot;&gt;MIME::Base64&lt;/a&gt; tells you more about this encoding.</source>
          <target state="translated">ポータブルで印刷可能な文字の文字列。これは、末尾のパディングが削除された、ダイジェストのbase64エンコード表現です。文字列は、バイナリバージョンよりも約30％長くなります。&lt;a href=&quot;mime/base64&quot;&gt;MIME :: Base64&lt;/a&gt;は、このエンコーディングについて詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="5b5f076887ce0597a3fa01a1ea06dacb7c8fe5ad" translate="yes" xml:space="preserve">
          <source>A string representing a selection list for sections to be printed when -verbose is set to 99, e.g. &lt;code&gt;&quot;NAME|SYNOPSIS|DESCRIPTION|VERSION&quot;&lt;/code&gt; .</source>
          <target state="translated">-verboseが99に設定されている場合に印刷されるセクションの選択リストを表す文字列（例： &lt;code&gt;&quot;NAME|SYNOPSIS|DESCRIPTION|VERSION&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="308056f61edbce292af89589357f11ee44fd726d" translate="yes" xml:space="preserve">
          <source>A string specifying a pattern to be matched as a prefix (which is to be skipped). If omitted, optional whitespace is skipped.</source>
          <target state="translated">接頭辞としてマッチさせたいパターンを指定した文字列 (省略する)。省略した場合は、オプションの空白はスキップされます。</target>
        </trans-unit>
        <trans-unit id="e9bc4f6bfc82a7d474c7f1ed6bc1a706c74a685f" translate="yes" xml:space="preserve">
          <source>A string specifying a pattern to be matched as the opening tag. If the pattern string is omitted (or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) then a pattern that matches any standard XML tag is used.</source>
          <target state="translated">開始タグとして照合するパターンを指定する文字列。パターン文字列が省略されている（または &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; である）場合、標準のXMLタグに一致するパターンが使用されます。</target>
        </trans-unit>
        <trans-unit id="048410179c1d880e31b42e6134fee925ec940ae9" translate="yes" xml:space="preserve">
          <source>A string specifying a pattern to be matched at the closing tag. If the pattern string is omitted (or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) then the closing tag is constructed by inserting a &lt;code&gt;/&lt;/code&gt; after any leading bracket characters in the actual opening tag that was matched (</source>
          <target state="translated">終了タグで照合するパターンを指定する文字列。パターン文字列が省略されている（または &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; である）場合、終了タグは、一致した実際の開始タグ内の先行ブラケット文字の後に &lt;code&gt;/&lt;/code&gt; を挿入することによって構築されます（</target>
        </trans-unit>
        <trans-unit id="4ddc15672e491fc997c3e75cb530fdf3735fbd3c" translate="yes" xml:space="preserve">
          <source>A string that can suppress Perl's warning about failed locale settings at startup. Failure can occur if the locale support in the operating system is lacking (broken) in some way--or if you mistyped the name of a locale when you set up your environment. If this environment variable is absent, or has a value other than &quot;0&quot; or &quot;&quot;, Perl will complain about locale setting failures.</source>
          <target state="translated">起動時のロケール設定の失敗に関するPerlの警告を抑制するための文字列。失敗は、オペレーティングシステムのロケールサポートが何らかの形で不足している (壊れている)場合や、環境設定時にロケール名を間違えた場合に起こります。この環境変数が存在しない場合や、&quot;0 &quot;や&quot;&quot;以外の値を持っている場合、Perl はロケール設定の失敗を訴えます。</target>
        </trans-unit>
        <trans-unit id="a2db67434e3c04d01083072b7b914ae53b6902d9" translate="yes" xml:space="preserve">
          <source>A string to be processed (&lt;code&gt;$_&lt;/code&gt; if the string is omitted or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">処理する文字列（文字列が省略されている場合、または &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合は &lt;code&gt;$_&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6e51f4c9fde9edecc0936ad5478d06f35a15c4b1" translate="yes" xml:space="preserve">
          <source>A string which is (possibly) interpolated and then executed as a system command with</source>
          <target state="translated">(おそらく)補間された文字列で、システムコマンドとして</target>
        </trans-unit>
        <trans-unit id="f332e2ab827e7ad888e10e40f020c6f2638261a6" translate="yes" xml:space="preserve">
          <source>A subclass for in-memory extracted file from Archive::Tar</source>
          <target state="translated">Archive::Tar のメモリ内展開ファイルのサブクラス</target>
        </trans-unit>
        <trans-unit id="abd458b754cc911d966797f7f9e904a5bf421ea9" translate="yes" xml:space="preserve">
          <source>A subclass of Pod::Simple::PullParser should define a &lt;code&gt;run&lt;/code&gt; method that calls &lt;code&gt;$token = $parser-&amp;gt;get_token&lt;/code&gt; to pull tokens.</source>
          <target state="translated">Pod :: Simple :: PullParserのサブクラスは、 &lt;code&gt;$token = $parser-&amp;gt;get_token&lt;/code&gt; をプルするために$ token = $ parser-&amp;gt; get_tokenを呼び出す &lt;code&gt;run&lt;/code&gt; メソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="6da5549484c85ec07cefefac0b04929e1e4b68b4" translate="yes" xml:space="preserve">
          <source>A subdirectory</source>
          <target state="translated">サブディレクトリ</target>
        </trans-unit>
        <trans-unit id="f3c131323abddd429496c2a4e94519d28ee7cce1" translate="yes" xml:space="preserve">
          <source>A subform of &quot;Eskimo&quot;.</source>
          <target state="translated">エスキモー」のサブフォーム。</target>
        </trans-unit>
        <trans-unit id="2185f5ee89fe302e7bad5c0ce031b9136fe1881e" translate="yes" xml:space="preserve">
          <source>A subpattern &lt;b&gt;assertion&lt;/b&gt; matching the &lt;b&gt;null string&lt;/b&gt; between &lt;b&gt;characters&lt;/b&gt;.</source>
          <target state="translated">サブパターン&lt;b&gt;アサーション&lt;/b&gt;一致する&lt;b&gt;ヌル文字列&lt;/b&gt;間の&lt;b&gt;文字を&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="dcb76fdf91425256508047ecf8357fd1c432b0b3" translate="yes" xml:space="preserve">
          <source>A subroutine declaration or definition may have a list of attributes associated with it. If such an attribute list is present, it is broken up at space or colon boundaries and treated as though a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attributes&lt;/code&gt; had been seen. See &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; for details about what attributes are currently supported. Unlike the limitation with the obsolescent &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attrs&lt;/code&gt; , the &lt;code&gt;sub : ATTRLIST&lt;/code&gt; syntax works to associate the attributes with a pre-declaration, and not just with a subroutine definition.</source>
          <target state="translated">サブルーチンの宣言または定義には、属性のリストが関連付けられている場合があります。そのような属性リストが存在する場合、それはスペースまたはコロンの境界で分割され、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attributes&lt;/code&gt; が見られたかのように扱われます。参照は&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;の属性は、現在サポートされているかについての詳細は。旧式の制限とは異なり、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attrs&lt;/code&gt; 、 &lt;code&gt;sub : ATTRLIST&lt;/code&gt; 構文は、事前に宣言した属性を関連付けるだけではなく、サブルーチンの定義として動作します。</target>
        </trans-unit>
        <trans-unit id="d523fe66bca5199af0174d9a0e394a363dbbca6f" translate="yes" xml:space="preserve">
          <source>A subroutine may be called using an explicit &lt;code&gt;&amp;amp;&lt;/code&gt; prefix. The &lt;code&gt;&amp;amp;&lt;/code&gt; is optional in modern Perl, as are parentheses if the subroutine has been predeclared. The &lt;code&gt;&amp;amp;&lt;/code&gt; is</source>
          <target state="translated">サブルーチンは、明示的な &lt;code&gt;&amp;amp;&lt;/code&gt; 接頭辞を使用して呼び出すことができます。 &lt;code&gt;&amp;amp;&lt;/code&gt; 最近のPerlでオプションである、として、サブルーチンがあらかじめ宣言されている場合は、括弧です。 &lt;code&gt;&amp;amp;&lt;/code&gt; IS</target>
        </trans-unit>
        <trans-unit id="472af3789d6b7cf851a695ddbea3171cb9f6d23e" translate="yes" xml:space="preserve">
          <source>A subroutine reference to be run at the end of the test script, if any of the tests fail. See &lt;a href=&quot;#ONFAIL&quot;&gt;ONFAIL&lt;/a&gt;.</source>
          <target state="translated">いずれかのテストが失敗した場合に、テストスクリプトの最後に実行されるサブルーチン参照。&lt;a href=&quot;#ONFAIL&quot;&gt;ONFAILを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3a8138bb418c6dab14df47bdb5b98c794bb069d9" translate="yes" xml:space="preserve">
          <source>A subroutine stub (or forward declaration) looks like</source>
          <target state="translated">サブルーチンのスタブ(または前方宣言)は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5c6644152e307dff88d95b419866126c49ada182" translate="yes" xml:space="preserve">
          <source>A substitution can do this for you. For a single line, you want to replace all the leading or trailing whitespace with nothing. You can do that with a pair of substitutions:</source>
          <target state="translated">置換でこれを行うことができます。1行の場合、先頭または末尾の空白をすべて何もないものに置き換えたいとします。これは一対の置換で行うことができます。</target>
        </trans-unit>
        <trans-unit id="c348ffb20315d847f6359bc6cf9c39166e27bc60" translate="yes" xml:space="preserve">
          <source>A substring &lt;b&gt;captured&lt;/b&gt; by a subpattern within unadorned parentheses in a &lt;b&gt;regex&lt;/b&gt;. Backslashed decimal numbers (&lt;code&gt;\1&lt;/code&gt; , &lt;code&gt;\2&lt;/code&gt; , etc.) later in the same pattern refer back to the corresponding subpattern in the current match. Outside the pattern, the numbered variables (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , etc.) continue to refer to these same values, as long as the pattern was the last successful match of the current &lt;b&gt;dynamic scope&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;正規表現&lt;/b&gt;内の修飾&lt;b&gt;さ&lt;/b&gt;れていない括弧内のサブパターンによって&lt;b&gt;キャプチャさ&lt;/b&gt;れた部分文字列。後で同じパターンのバックスラッシュ付き10進数（ &lt;code&gt;\1&lt;/code&gt; 、 &lt;code&gt;\2&lt;/code&gt; など）は、現在の一致の対応するサブパターンを参照します。パターンの外では、番号付き変数（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; など）は、パターンが現在の&lt;b&gt;動的スコープ&lt;/b&gt;で最後に成功した一致である限り、これらの同じ値を参照し続け&lt;b&gt;ます&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="315d0303e3aef241562f12b55669ceb9dfe96eb1" translate="yes" xml:space="preserve">
          <source>A subtest may call &lt;code&gt;skip_all&lt;/code&gt; . No tests will be run, but the subtest is considered a skip.</source>
          <target state="translated">サブテストは &lt;code&gt;skip_all&lt;/code&gt; を呼び出すことができます。テストは実行されませんが、サブテストはスキップと見なされます。</target>
        </trans-unit>
        <trans-unit id="37458279bba72a238643fe5627f2676bd36cfdcd" translate="yes" xml:space="preserve">
          <source>A subtest of the</source>
          <target state="translated">のサブテスト</target>
        </trans-unit>
        <trans-unit id="ddbd7203825cf4784baaa474ee9dd57475c72727" translate="yes" xml:space="preserve">
          <source>A subtlety of the parsing process means that a regex like &lt;code&gt;/foo/&lt;/code&gt; is originally parsed into an alternation with a single branch. It is only afterwards that the optimiser converts single branch alternations into the simpler form.</source>
          <target state="translated">解析プロセスの微妙さは、 &lt;code&gt;/foo/&lt;/code&gt; ような正規表現が最初に単一の分岐を持つ代替に解析されることを意味します。その後、オプティマイザが単一の分岐の交互をより単純な形式に変換します。</target>
        </trans-unit>
        <trans-unit id="ca8ecc01810919d80818935b434bfbed09194445" translate="yes" xml:space="preserve">
          <source>A sufficiently complicated module using XS would have both Perl code (defined in</source>
          <target state="translated">XSを使用した十分に複雑なモジュールは、Perlのコード(</target>
        </trans-unit>
        <trans-unit id="ec7ba027499434cb4ad8ba5cfec6aea4c41ca3a7" translate="yes" xml:space="preserve">
          <source>A superset of stdio's &lt;code&gt;ungetc()&lt;/code&gt; . Should arrange for future reads to see the bytes in &lt;code&gt;vbuf&lt;/code&gt; . If there is no obviously better implementation then &lt;code&gt;PerlIOBase_unread()&lt;/code&gt; provides the function by pushing a &quot;fake&quot; &quot;pending&quot; layer above the calling layer.</source>
          <target state="translated">stdioの &lt;code&gt;ungetc()&lt;/code&gt; のスーパーセット。今後の読み取りで &lt;code&gt;vbuf&lt;/code&gt; のバイトを確認できるように準備する必要があります。明らかにより良い実装がない場合、 &lt;code&gt;PerlIOBase_unread()&lt;/code&gt; は、「偽の」「保留中の」層を呼び出し側の層の上にプッシュすることによって機能を提供します。</target>
        </trans-unit>
        <trans-unit id="c626abd78031b8aca6600ea0c2440d7fd00d78cd" translate="yes" xml:space="preserve">
          <source>A synonym for abs_path().</source>
          <target state="translated">abs_path()の同義語。</target>
        </trans-unit>
        <trans-unit id="e1b37e0c283299b17772ecb39d63c354cb1c21a5" translate="yes" xml:space="preserve">
          <source>A synopsis of the common uses of the module</source>
          <target state="translated">モジュールの一般的な使用法の概要</target>
        </trans-unit>
        <trans-unit id="cbedc357c1a8c0f556eb0ada80454f902c9b0495" translate="yes" xml:space="preserve">
          <source>A syntactic construct consisting of a sequence of Perl &lt;b&gt;statements&lt;/b&gt; that is delimited by braces. The &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; statements are defined in terms of</source>
          <target state="translated">中括弧で区切られた一連のPerl &lt;b&gt;ステートメント&lt;/b&gt;で構成される構文構造。 &lt;code&gt;if&lt;/code&gt; と &lt;code&gt;while&lt;/code&gt; 文はで定義されています</target>
        </trans-unit>
        <trans-unit id="ad7124750e36065dd8c98d176b7da5958dc7cdde" translate="yes" xml:space="preserve">
          <source>A syntactic construct representing a comma- separated list of expressions, evaluated to produce a &lt;b&gt;list value&lt;/b&gt;. Each &lt;b&gt;expression&lt;/b&gt; in a</source>
          <target state="translated">コンマで区切られた式のリストを表す構文構造。評価されて&lt;b&gt;リスト値&lt;/b&gt;を生成し&lt;b&gt;ます&lt;/b&gt;。それぞれ&lt;b&gt;の式&lt;/b&gt; Aで</target>
        </trans-unit>
        <trans-unit id="7291be1f4b56b7d225866ff464ea491e8b919184" translate="yes" xml:space="preserve">
          <source>A system that algorithmically writes code for you in a high-level language. See also &lt;b&gt;code generator&lt;/b&gt;.</source>
          <target state="translated">高水準言語でアルゴリズムに従ってコードを作成するシステム。&lt;b&gt;コードジェネレータ&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="87ef544f16a30a02ca093ea233165dcf6ff6a52e" translate="yes" xml:space="preserve">
          <source>A system that writes code for you in a low-level language, such as code to implement the backend of a compiler. See &lt;b&gt;program generator&lt;/b&gt;.</source>
          <target state="translated">コンパイラーのバックエンドを実装するコードなど、低レベル言語でコードを作成するシステム。&lt;b&gt;プログラムジェネレータを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="57d745713dbf91df8c6f9ba2a699dab6d83ae07a" translate="yes" xml:space="preserve">
          <source>A template may be specified either with a leading template or with a TEMPLATE argument.</source>
          <target state="translated">テンプレートは、先頭のテンプレートを指定するか、TEMPLATE引数を指定するかのいずれかで指定することができます。</target>
        </trans-unit>
        <trans-unit id="becc5a1b25927d1909dc38d940b77e72a5cc23a0" translate="yes" xml:space="preserve">
          <source>A template used in &lt;b&gt;pattern matching&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;パターンマッチングで&lt;/b&gt;使用されるテンプレート。</target>
        </trans-unit>
        <trans-unit id="460ed5b4079db2b66835c9fa0b74f3db75b6b725" translate="yes" xml:space="preserve">
          <source>A temporary failure occurred during name resolution. The operation may be successful if it is retried later.</source>
          <target state="translated">名前解決中に一時的な障害が発生しました。後で再試行すれば、この操作は成功する可能性があります。</target>
        </trans-unit>
        <trans-unit id="36377f90ac483d31142c52a673f24ea229719c46" translate="yes" xml:space="preserve">
          <source>A temporary holding location for data. Data that are &lt;b&gt;Block buffering&lt;/b&gt; means that the data is passed on to its destination whenever the buffer is full. &lt;b&gt;Line buffering&lt;/b&gt; means that it&amp;rsquo;s passed on whenever a complete line is received. &lt;b&gt;Command buffering&lt;/b&gt; means that it&amp;rsquo;s passed every time you do a &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; command (or equivalent). If your output is unbuffered, the system processes it one byte at a time without the use of a holding area. This can be rather inefficient.</source>
          <target state="translated">データの一時的な保持場所。データがされている&lt;b&gt;ブロックがバッファリングする&lt;/b&gt;バッファがいっぱいになったときに、データがその宛先に渡されることを意味します。&lt;b&gt;行バッファリングと&lt;/b&gt;は、完全な行が受信されるたびに渡されることを意味します。&lt;b&gt;コマンドバッファリング&lt;/b&gt;とは、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; コマンド（または同等のコマンド）を実行するたびに渡されることを意味します。出力がバッファリングされていない場合、システムは保持領域を使用せずに一度に1バイトずつ処理します。これはかなり非効率的です。</target>
        </trans-unit>
        <trans-unit id="f18ef7078604acdbaf428768e9818f7cd824fdb3" translate="yes" xml:space="preserve">
          <source>A temporary value scheduled to die when the current statement finishes.</source>
          <target state="translated">現在のステートメントが終了したときに終了するようにスケジュールされた一時的な値。</target>
        </trans-unit>
        <trans-unit id="be309ca808fdd70439ad47732767ff0fa5bc7488" translate="yes" xml:space="preserve">
          <source>A text &lt;b&gt;file&lt;/b&gt; that is a program intended to be &lt;b&gt;executed&lt;/b&gt; directly rather than &lt;b&gt;compiled&lt;/b&gt; to another form of file before &lt;b&gt;execution&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;実行&lt;/b&gt;前に別の形式のファイルに&lt;b&gt;コンパイル&lt;/b&gt;するのではなく、直接&lt;b&gt;実行&lt;/b&gt;することを目的としたプログラムであるテキスト&lt;b&gt;ファイル&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="69f7603a0e21614f40b6c5bdc945d53c623ea439" translate="yes" xml:space="preserve">
          <source>A third argument is also passed to the handler, which contains a copy of the raw binary contents of the &lt;code&gt;siginfo&lt;/code&gt; structure: if a system has some non-POSIX fields, this third argument is where to &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; them from.</source>
          <target state="translated">3番目の引数もハンドラーに渡されます。これには、 &lt;code&gt;siginfo&lt;/code&gt; 構造のバイナリの生の内容のコピーが含まれます。システムにPOSIX以外のフィールドがある場合、この3番目の引数はそれらを &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; する場所です。</target>
        </trans-unit>
        <trans-unit id="6401a363806a46dc3a276adc43e53feeed2b394c" translate="yes" xml:space="preserve">
          <source>A third style of bundling allows only values to be bundled with options. It can be enabled with:</source>
          <target state="translated">3 番目のバンドルのスタイルでは、値のみをオプションにバンドルすることができます。で有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="ec67162265d799cee7ba073ea5ae61361a099a71" translate="yes" xml:space="preserve">
          <source>A thread is a flow of control through a program with a single execution point.</source>
          <target state="translated">スレッドとは、単一の実行ポイントを持つプログラムを制御する流れのことです。</target>
        </trans-unit>
        <trans-unit id="e05fa4d94d725ab6d1467a08643ac53ed8a48ab5" translate="yes" xml:space="preserve">
          <source>A thread terminated in some manner other than just returning from its entry point function, or by using &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; . For example, the thread may have terminated because of an error, or by using &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">エントリポイント関数から単に戻る以外の方法で、または &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; を使用してスレッドが終了しました。たとえば、エラーが原因で、または &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; を使用してスレッドが終了した可能性があります。</target>
        </trans-unit>
        <trans-unit id="d5f8dc4f0e564ede193fccb0795b819fd8f8f455" translate="yes" xml:space="preserve">
          <source>A tied hash can have any semantics at all. It is typically tied to an on-disk database, so that cached values are stored in the database and retrieved from it again when needed, and the disk file typically persists after your program has exited. See &lt;code&gt;perltie&lt;/code&gt; for more complete details about &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">tieされたハッシュは、すべてのセマンティクスを持つことができます。通常、これはディスク上のデータベースに関連付けられているため、キャッシュされた値はデータベースに格納され、必要に応じてデータベースから再度取得されます。また、ディスクファイルは通常、プログラムの終了後も保持されます。 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; の詳細については、 &lt;code&gt;perltie&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="88fb398954c23d545a218b6f24145de7bcc79c9d" translate="yes" xml:space="preserve">
          <source>A token in a programming language, such as a number or &lt;b&gt;string&lt;/b&gt;, that gives you an actual &lt;b&gt;value&lt;/b&gt; instead of merely representing possible values as a &lt;b&gt;variable&lt;/b&gt; does.</source>
          <target state="translated">&lt;b&gt;変数の&lt;/b&gt;ように単に可能な値を表すのではなく、実際の&lt;b&gt;値&lt;/b&gt;を提供する数値や&lt;b&gt;文字列&lt;/b&gt;などのプログラミング言語のトークン。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="49a82ac17323d56d44189291d63111e25b7240b2" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;anyinflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」の解凍を実行するために、トップレベルの関数 &lt;code&gt;anyinflate&lt;/code&gt; が提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="87c7fedbb8115b85609fa9659aa296d9a84a6510" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;anyuncompress&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位の関数 &lt;code&gt;anyuncompress&lt;/code&gt; は、バッファやファイル間で「ワンショット」の圧縮解除を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e389addc6410d492c7bd5a5e3cf1e11884bdfd29" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;bunzip2&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位の関数 &lt;code&gt;bunzip2&lt;/code&gt; は、バッファーやファイル間で「ワンショット」の解凍を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fb0024f5a7eefa6e10161c1ed9db11d9ebbc931e" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;bzip2&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、トップレベルの関数 &lt;code&gt;bzip2&lt;/code&gt; が提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="565743b74071fd71d3b79fbb653796a00d3b13c8" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;deflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、トップレベルの関数 &lt;code&gt;deflate&lt;/code&gt; が提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9810b58473f41aaf89cef15b62322dda3e22aea6" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;gunzip&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位関数の &lt;code&gt;gunzip&lt;/code&gt; は、バッファやファイル間で「ワンショット」の解凍を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e6e391619962954b4fb420d746dbc210bda397a8" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;gzip&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位関数の &lt;code&gt;gzip&lt;/code&gt; は、バッファーやファイル間で「ワンショット」圧縮を実行するために提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="cb09dcc8a8a7122c93016ac58ef7ca78f87815eb" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;inflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">トップレベルの関数 &lt;code&gt;inflate&lt;/code&gt; は、バッファやファイル間で「ワンショット」の圧縮解除を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e6ff8dd50fc057dd45574766e64ed1ef729e4475" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;rawdeflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、トップレベルの関数 &lt;code&gt;rawdeflate&lt;/code&gt; が提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="da007ab4cef02cbdbebe645067fd56f8debb93a1" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;rawinflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">トップレベルの関数 &lt;code&gt;rawinflate&lt;/code&gt; は、バッファーやファイル間で「ワンショット」の解凍を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="522a8c4c8a64b09e73f7b19d33d186f1963c38ba" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;unzip&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位の関数 &lt;code&gt;unzip&lt;/code&gt; は、バッファやファイル間で「ワンショット」の解凍を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="cf0562aa58382ee4296c753a78a1efd86d792dc1" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;zip&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、トップレベルの関数 &lt;code&gt;zip&lt;/code&gt; が提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8b8620967b93bad58d8aa8f79801bf38881ee8c9" translate="yes" xml:space="preserve">
          <source>A totally different approach is to create a hash of function references.</source>
          <target state="translated">全く異なるアプローチは、関数参照のハッシュを作成することです。</target>
        </trans-unit>
        <trans-unit id="980ba3b61619e7f53950a6b31a7df9b45b72edfd" translate="yes" xml:space="preserve">
          <source>A trailing colon is added automatically to the resulting path, to denote a directory.</source>
          <target state="translated">結果のパスには、ディレクトリを示すために、末尾のコロンが自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="7b8da94bbc0623b636921b1bb640e93b774abc6e" translate="yes" xml:space="preserve">
          <source>A translation-concealed rooted logical name that contains Perl and the logical device for the @INC path on VMS only. Other logical names that affect Perl on VMS include PERLSHR, PERL_ENV_TABLES, and SYS$TIMEZONE_DIFFERENTIAL, but are optional and discussed further in &lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt; and in</source>
          <target state="translated">PerlとVMS上の@INCパスの論理デバイスのみを含む、変換が隠されたルート論理名。VMS上のPerlに影響を与えるその他の論理名には、PERLSHR、PERL_ENV_TABLES、およびSYS $ TIMEZONE_DIFFERENTIALが含まれますが、オプションであり、&lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt;および</target>
        </trans-unit>
        <trans-unit id="2dde805e9629b528928f950f1faf5f6602f0b7c5" translate="yes" xml:space="preserve">
          <source>A trivial application of this mechanism is to implement options that are related to each other. For example:</source>
          <target state="translated">このメカニズムの些細なアプリケーションは、互いに関連するオプションを実装することです。例えば</target>
        </trans-unit>
        <trans-unit id="a063d28faa82402e5b2d3d1ed31d0f1ad9c9dea3" translate="yes" xml:space="preserve">
          <source>A tutorial about writing really basic tests</source>
          <target state="translated">本当に基本的なテストの書き方についてのチュートリアル</target>
        </trans-unit>
        <trans-unit id="e89f1de21c226b59a1d42d1a18c10afa08b69645" translate="yes" xml:space="preserve">
          <source>A twice as long string of lowercase hexadecimal digits.</source>
          <target state="translated">小文字の16進数の2倍の長さの文字列。</target>
        </trans-unit>
        <trans-unit id="d607f495a88ea6528e8578b9888418a4ffea3288" translate="yes" xml:space="preserve">
          <source>A type definition in the C and C++ languages.</source>
          <target state="translated">C言語およびC++言語での型定義。</target>
        </trans-unit>
        <trans-unit id="b268ce7d38ddd4cca20a237c3776e2eb1ce567ea" translate="yes" xml:space="preserve">
          <source>A typeglob may be dereferenced the same way a reference can, because the dereference syntax always indicates the type of reference desired. So &lt;code&gt;${*foo}&lt;/code&gt; and &lt;code&gt;${\$foo}&lt;/code&gt; both indicate the same scalar variable.</source>
          <target state="translated">逆参照構文は常に必要な参照のタイプを示すため、型グロブは参照と同じ方法で逆参照することができます。したがって、 &lt;code&gt;${*foo}&lt;/code&gt; と &lt;code&gt;${\$foo}&lt;/code&gt; どちらも同じスカラー変数を示します。</target>
        </trans-unit>
        <trans-unit id="0bd7e8fb31d877d634438bee94398cae29fcf8b9" translate="yes" xml:space="preserve">
          <source>A typical %Lexicon entry is meant to signify a phrase, taking some number (0 or more) of parameters. An entry is meant to be accessed by via a string</source>
          <target state="translated">典型的な %Lexicon エントリは、いくつかの数 (0 またはそれ以上)のパラメータを取り、フレーズを示すことを意味します。エントリは、文字列</target>
        </trans-unit>
        <trans-unit id="8cc65df0ae9490ead8aa8320483d71f0467ec4f8" translate="yes" xml:space="preserve">
          <source>A typical example is:</source>
          <target state="translated">典型的な例としては</target>
        </trans-unit>
        <trans-unit id="c800528a6e2ea28289c5fcbc08ec77553e110ecf" translate="yes" xml:space="preserve">
          <source>A typical invocation of &lt;a href=&quot;h2xs&quot;&gt;h2xs&lt;/a&gt; for a pure Perl module is:</source>
          <target state="translated">純粋なPerlモジュールの典型的な&lt;a href=&quot;h2xs&quot;&gt;h2xsの&lt;/a&gt;呼び出しは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="74d9b7c164412a45025b12444007449586d960a8" translate="yes" xml:space="preserve">
          <source>A typical module using &lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt; starts like this:</source>
          <target state="translated">&lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt;を使用する一般的なモジュールは次のように始まります。</target>
        </trans-unit>
        <trans-unit id="42c5cd07f5670bfc29c548d8b58ba2ec35dd0a0d" translate="yes" xml:space="preserve">
          <source>A typical one is the version number of your OS specific module. (ie. MM_Unix_VERSION or MM_VMS_VERSION).</source>
          <target state="translated">典型的なものは、OS固有のモジュールのバージョン番号です(例えば MM_Unix_VERSION や MM_VMS_VERSION)。(例えば MM_Unix_VERSION や MM_VMS_VERSION)。</target>
        </trans-unit>
        <trans-unit id="11ed3b2a4b5cffbd69ae6d23ab2fd650fceaafba" translate="yes" xml:space="preserve">
          <source>A typical use of &lt;code&gt;gen_delimited_pat&lt;/code&gt; would be to build special purpose tags for &lt;code&gt;extract_tagged&lt;/code&gt; . For example, to properly ignore &quot;empty&quot; XML elements (which might contain quoted strings):</source>
          <target state="translated">&lt;code&gt;gen_delimited_pat&lt;/code&gt; 一般的な用途は、 &lt;code&gt;extract_tagged&lt;/code&gt; の特別な目的のタグを作成することです。たとえば、「空の」XML要素（引用符で囲まれた文字列を含む場合がある）を適切に無視するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="5f737b1553f7b6183bb539125409a9e3f04fb617" translate="yes" xml:space="preserve">
          <source>A typical use of the returned seed is for a test program which has too many combinations to test comprehensively in the time available to it each run. It can test a random subset each time, and should there be a failure, log the seed used for that run so that it can later be used to reproduce the same results.</source>
          <target state="translated">返されたシードの典型的な使用法は、テストプログラムを実行するたびに利用可能な時間内に総合的にテストするにはあまりにも多くの組み合わせを持つテストプログラムのためのものです。毎回ランダムなサブセットをテストすることができ、失敗があった場合には、後で同じ結果を再現するために使用できるように、その実行に使用されたシードをログに記録します。</target>
        </trans-unit>
        <trans-unit id="51560cf43fd833f1ac94f4446b3a3eeb2bb8e520" translate="yes" xml:space="preserve">
          <source>A typical use would be in the destructors of a class hierarchy, as illustrated in the synopsis above. Each class in the hierarchy has a DESTROY method that performs some class-specific action and then redispatches the call up the hierarchy. As a result, when an object of class D is destroyed, the destructors of</source>
          <target state="translated">典型的な使用法は、上記のシノプシスで説明したように、クラス階層のデストラクタにあるでしょう。階層内の各クラスは DESTROY メソッドを持っており、クラス固有のアクションを実行し、階層の呼び出しをリディスパッチします。その結果、クラスDのオブジェクトが破壊されると</target>
        </trans-unit>
        <trans-unit id="7966b50132f33654989f9cc4d535a23f71af99df" translate="yes" xml:space="preserve">
          <source>A typical way to define a collation element table without any file of table:</source>
          <target state="translated">テーブルのファイルを持たずに照合要素のテーブルを定義する典型的な方法です。</target>
        </trans-unit>
        <trans-unit id="ef22865cf4abb8e03f585fab66316610e54ceffa" translate="yes" xml:space="preserve">
          <source>A useful construct you might consider using is:</source>
          <target state="translated">あなたが使用することを検討するかもしれない有用な構成は、です。</target>
        </trans-unit>
        <trans-unit id="c66028a80a3f2cbd725150b289e7fb5dace10a6d" translate="yes" xml:space="preserve">
          <source>A useful idiom for &lt;code&gt;lex&lt;/code&gt; -like scanners is &lt;code&gt;/\G.../gc&lt;/code&gt; . You can combine several regexps like this to process a string part-by-part, doing different actions depending on which regexp matched. Each regexp tries to match where the previous one leaves off.</source>
          <target state="translated">&lt;code&gt;lex&lt;/code&gt; のようなスキャナーに役立つイディオムは &lt;code&gt;/\G.../gc&lt;/code&gt; です。このような複数の正規表現を組み合わせて、文字列を部分ごとに処理し、一致する正規表現に応じて異なるアクションを実行できます。各正規表現は、前の正規表現が終了したところと一致しようとします。</target>
        </trans-unit>
        <trans-unit id="6c232601ef6ab32c7a06536b5534313e59c1adfb" translate="yes" xml:space="preserve">
          <source>A useful variation of the above is the target &lt;code&gt;testdb&lt;/code&gt; . It runs the test under the Perl debugger (see &lt;a href=&quot;../perldebug&quot;&gt;perldebug&lt;/a&gt;). If the file</source>
          <target state="translated">上記の便利なバリエーションは、ターゲット &lt;code&gt;testdb&lt;/code&gt; です。Perlデバッガーの下でテストを実行します（&lt;a href=&quot;../perldebug&quot;&gt;perldebugを&lt;/a&gt;参照）。ファイル</target>
        </trans-unit>
        <trans-unit id="260c8a8479b809c6dd9a69c354f54517ffc43b32" translate="yes" xml:space="preserve">
          <source>A user ID. Often used in the context of &lt;b&gt;file&lt;/b&gt; or &lt;b&gt;process&lt;/b&gt; ownership.</source>
          <target state="translated">ユーザーID。多くの場合、&lt;b&gt;ファイル&lt;/b&gt;または&lt;b&gt;プロセスの&lt;/b&gt;所有権のコンテキストで使用され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="c3c861709ec338f51d30ce5477159ff491c5825e" translate="yes" xml:space="preserve">
          <source>A user of Perl does not normally need to know nor care how Perl happens to encode its internal strings, but it becomes relevant when outputting Unicode strings to a stream without a PerlIO layer (one with the &quot;default&quot; encoding). In such a case, the raw bytes used internally (the native character set or UTF-8, as appropriate for each string) will be used, and a &quot;Wide character&quot; warning will be issued if those strings contain a character beyond 0x00FF.</source>
          <target state="translated">Perl のユーザは通常、Perl が内部文字列をどのようにエンコードするかを知る必要も気にする必要もありませんが、PerlIO レイヤ(「デフォルト」のエンコーディングを持つもの)のないストリームに Unicode 文字列を出力する場合には、それが重要になります。そのような場合、内部的に使用される生のバイト(ネイティブ文字セットまたは UTF-8、各文字列に適したもの)が使用され、それらの文字列に 0x00FF を超える文字が含まれている場合には「ワイド文字」警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="58e51e01dfdc97593c823ef9c32c82bf5b645a0e" translate="yes" xml:space="preserve">
          <source>A user-defined &lt;b&gt;type&lt;/b&gt;, implemented in Perl via a &lt;b&gt;package&lt;/b&gt; that provides (either directly or by inheritance) &lt;b&gt;methods&lt;/b&gt; (that is, &lt;b&gt;subroutines&lt;/b&gt;) to handle &lt;b&gt;instances&lt;/b&gt; of the class (its &lt;b&gt;objects&lt;/b&gt;). See also &lt;b&gt;inheritance&lt;/b&gt;.</source>
          <target state="translated">クラス（その&lt;b&gt;オブジェクト&lt;/b&gt;）の&lt;b&gt;インスタンス&lt;/b&gt;を処理&lt;b&gt;するメソッド&lt;/b&gt;（つまり、&lt;b&gt;サブルーチン&lt;/b&gt;）を（直接または継承によって）提供する&lt;b&gt;パッケージ&lt;/b&gt;を介してPerlで実装されたユーザー定義&lt;b&gt;型&lt;/b&gt;。&lt;b&gt;継承&lt;/b&gt;も参照してください。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="049b62081eecdd58978da0961ea176048425ca09" translate="yes" xml:space="preserve">
          <source>A user-defined subroutine call or a method invocation.</source>
          <target state="translated">ユーザー定義のサブルーチン呼び出しまたはメソッド呼び出し。</target>
        </trans-unit>
        <trans-unit id="0655aa7eaac426bb455567c21c49258161952382" translate="yes" xml:space="preserve">
          <source>A utility function that returns the line number that the function was called on. You can pass it an offset which will be added to the result. This is very useful for working out the correct text of diagnostic functions that contain line numbers.</source>
          <target state="translated">関数が呼び出された行番号を返すユーティリティ関数です。結果に加算されるオフセットを渡すことができます。これは、行番号を含む診断関数の正しいテキストを調べるのに非常に便利です。</target>
        </trans-unit>
        <trans-unit id="62abf9744bbb54e44124db26e468de26dab74a60" translate="yes" xml:space="preserve">
          <source>A value indicating whether unmatched substrings (see below) within the text should be skipped or returned as fields. If the value is true, such substrings are skipped. Otherwise, they are returned.</source>
          <target state="translated">テキスト内のマッチしない部分文字列(下記参照)をスキップするか、フィールドとして返すかを示す値。この値が真の場合、そのような部分文字列はスキップされます。そうでなければ、それらは返されます。</target>
        </trans-unit>
        <trans-unit id="9cb7aeb0b53152f8df982c234ecceb419398cf71" translate="yes" xml:space="preserve">
          <source>A value that happens to be a &lt;b&gt;scalar&lt;/b&gt; as opposed to a &lt;b&gt;list&lt;/b&gt;.</source>
          <target state="translated">たまたま&lt;b&gt;リストで&lt;/b&gt;はなく&lt;b&gt;スカラー&lt;/b&gt;である値。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6cfc7b273de973b6dc0aacfe92aeb280b49228f1" translate="yes" xml:space="preserve">
          <source>A value that is either &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;true&lt;/b&gt;または&lt;b&gt;falseの&lt;/b&gt;いずれかの値。</target>
        </trans-unit>
        <trans-unit id="a8f81a2763e41d6e30e66f64538647929ee6a4a5" translate="yes" xml:space="preserve">
          <source>A variable whose value is the name of another variable or subroutine. By &lt;b&gt;dereferencing&lt;/b&gt; the first variable, you can get at the second one. Symbolic references are illegal under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict &quot;refs&quot;&lt;/code&gt; .</source>
          <target state="translated">値が別の変数またはサブルーチンの名前である変数。&lt;b&gt;逆参照&lt;/b&gt;最初の変数を、あなたは、第1に取得することができます。シンボリック参照は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict &quot;refs&quot;&lt;/code&gt; 下では違法です。</target>
        </trans-unit>
        <trans-unit id="ca6ffd45b1cb28ce9dd386af1f375ee5391518d5" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;save_item&lt;/code&gt; which takes multiple arguments via an array &lt;code&gt;sarg&lt;/code&gt; of &lt;code&gt;SV*&lt;/code&gt; of length &lt;code&gt;maxsarg&lt;/code&gt; .</source>
          <target state="translated">バリアント &lt;code&gt;save_item&lt;/code&gt; 配列を介して複数の引数を取る &lt;code&gt;sarg&lt;/code&gt; の &lt;code&gt;SV*&lt;/code&gt; 長さの &lt;code&gt;maxsarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ccb1828da7b95bb5a049529fa23b72700a0cdfc" translate="yes" xml:space="preserve">
          <source>A venerable Stream EDitor from which Perl derives some of its ideas.</source>
          <target state="translated">Perl のアイデアの一部を派生させた由緒ある Stream EDitor。</target>
        </trans-unit>
        <trans-unit id="695b604bb0917e749e0123615e9c577cb0315edf" translate="yes" xml:space="preserve">
          <source>A venerable typesetting language from which Perl derives the name of its &lt;code&gt;$%&lt;/code&gt; variable and which is secretly used in the production of Camel books.</source>
          <target state="translated">Perlが &lt;code&gt;$%&lt;/code&gt; 変数の名前を派生し、キャメルの本の制作で密かに使用されている由緒ある組版言語。</target>
        </trans-unit>
        <trans-unit id="c02ac9d5e79aa52379337adc725d78150bf24188" translate="yes" xml:space="preserve">
          <source>A verbatim paragraph is distinguished by having its first character be a space or a tab. (And commonly, all its lines begin with spaces and/or tabs.) It should be reproduced exactly, with tabs assumed to be on 8-column boundaries. There are no special formatting codes, so you can't italicize or anything like that. A \ means \, and nothing else.</source>
          <target state="translated">冗長段落は、その最初の文字がスペースかタブであることで区別される。(そして一般的には、すべての行がスペースやタブで始まることが多いです。)タブは8カラムの境界線上にあると仮定して、正確に再現しなければなりません。特別な書式コードはありませんので、イタリック体にするとか、そんなことはできません。A \ は、他の何もないことを意味します。</target>
        </trans-unit>
        <trans-unit id="b4ee89b787aaa148bf4a7c02399965cde2c89e83" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;SvPV&lt;/code&gt; which guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once. Only use this if &lt;code&gt;sv&lt;/code&gt; is an expression with side effects, otherwise use the more efficient &lt;code&gt;SvPV&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; を一度だけ評価することを保証する &lt;code&gt;SvPV&lt;/code&gt; のバージョン。これは、 &lt;code&gt;sv&lt;/code&gt; が副作用のある式である場合にのみ使用します。それ以外の場合は、より効率的な &lt;code&gt;SvPV&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="800c2c1c70843eecf0d954a2a74fcb4ffc03b783" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepv()&lt;/code&gt; /&lt;code&gt;savepvn()&lt;/code&gt; which gets the string to duplicate from the passed in SV using &lt;code&gt;SvPV()&lt;/code&gt;</source>
          <target state="translated">バージョン &lt;code&gt;savepv()&lt;/code&gt; / &lt;code&gt;savepvn()&lt;/code&gt; 使用してSVに渡さから重複する文字列を取得 &lt;code&gt;SvPV()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89a4a2fa99f32dbf2c67191e1f912497d7b97772" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepv()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads.</source>
          <target state="translated">スレッド間で共有されるメモリ内の重複文字列を割り当てる &lt;code&gt;savepv()&lt;/code&gt; のバージョン。</target>
        </trans-unit>
        <trans-unit id="5d7f6a9127b04f3a28923aa726cf029e923caeca" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepvn()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads. (With the specific difference that a NULL pointer is not acceptable)</source>
          <target state="translated">スレッド間で共有されるメモリ内の重複文字列を割り当てる &lt;code&gt;savepvn()&lt;/code&gt; のバージョン。（NULLポインターは受け入れられないという特定の違いがあります）</target>
        </trans-unit>
        <trans-unit id="d9a7ac8d6bb6f23e5af260b2b68521de71f4974c" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepvs()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads.</source>
          <target state="translated">スレッド間で共有されるメモリ内の重複文字列を割り当てる &lt;code&gt;savepvs()&lt;/code&gt; のバージョン。</target>
        </trans-unit>
        <trans-unit id="f84e0230ffdad6c151bf74824e07538ecfccd8ed" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savesharedpv()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads.</source>
          <target state="translated">スレッド間で共有されるメモリ内の重複文字列を割り当てる &lt;code&gt;savesharedpv()&lt;/code&gt; のバージョン。</target>
        </trans-unit>
        <trans-unit id="8ab5e633d2c66281cffd9c60de281036938368fe" translate="yes" xml:space="preserve">
          <source>A very complete generic buffering layer which provides the whole of PerlIO API. It is also intended to be used as a &quot;base class&quot; for other layers. (For example its &lt;code&gt;Read()&lt;/code&gt; method is implemented in terms of the &lt;code&gt;Get_cnt()&lt;/code&gt; /&lt;code&gt;Get_ptr()&lt;/code&gt; /&lt;code&gt;Set_ptrcnt()&lt;/code&gt; methods).</source>
          <target state="translated">PerlIO API全体を提供する非常に完全な汎用バッファリング層。また、他のレイヤーの「基本クラス」として使用することも目的としています。 （たとえば、その &lt;code&gt;Read()&lt;/code&gt; メソッドは、 &lt;code&gt;Get_cnt()&lt;/code&gt; / &lt;code&gt;Get_ptr()&lt;/code&gt; / &lt;code&gt;Set_ptrcnt()&lt;/code&gt; メソッドの観点から実装されています）。</target>
        </trans-unit>
        <trans-unit id="cff43b9c47bd071d2d320e539e7c2ec5b836b1af" translate="yes" xml:space="preserve">
          <source>A very large and constantly evolving language with several alternative and largely incompatible syntaxes, in which anyone can define anything any way they choose, and usually do. Speakers of this language think it&amp;rsquo;s easy to learn because it&amp;rsquo;s so easily twisted to one&amp;rsquo;s own ends, but dialectical differences make tribal intercommunication nearly impossible, and travelers are often reduced to a pidgin-like subset of the language. To be universally understood, a Unix shell programmer must spend years of study in the art. Many have abandoned this discipline and now communicate via an Esperanto-like language called Perl.</source>
          <target state="translated">非常に大規模で常に進化する言語であり、いくつかの代替構文とほぼ互換性のない構文を使用します。この構文では、だれでも、選択した方法で何でも定義でき、通常はそうです。この言語の話者は、自分の目的に合わせて簡単にねじれるので、習得は簡単だと考えていますが、弁証法の違いにより、部族間の相互コミュニケーションはほとんど不可能になり、旅行者はしばしば、ピジンのような言語のサブセットに削減されます。普遍的に理解されるためには、Unixシェルプログラマーは、この分野で長年の研究を費やさなければなりません。多くの人がこの分野を放棄し、今ではPerlと呼ばれるエスペラントのような言語を介して通信しています。</target>
        </trans-unit>
        <trans-unit id="b75485a79ff1cabe11e71e2c78ee68045837b121" translate="yes" xml:space="preserve">
          <source>A very thin wrapper around Config.pm so MakeMaker is easier to test.</source>
          <target state="translated">Config.pm の非常に薄いラッパーで、MakeMaker のテストを容易にします。</target>
        </trans-unit>
        <trans-unit id="3816dce510c914716ac16326960ce66f1b1eab28" translate="yes" xml:space="preserve">
          <source>A void* pointing to an engine-defined data structure. The Perl engine uses the &lt;code&gt;regexp_internal&lt;/code&gt; structure (see &lt;a href=&quot;perlreguts#Base-Structures&quot;&gt;Base Structures in perlreguts&lt;/a&gt;) but a custom engine should use something else.</source>
          <target state="translated">エンジン定義のデータ構造を指すvoid *。Perlエンジンは &lt;code&gt;regexp_internal&lt;/code&gt; 構造（perlregutsの&lt;a href=&quot;perlreguts#Base-Structures&quot;&gt;基本構造を参照&lt;/a&gt;）を使用しますが、カスタムエンジンは他のものを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="199fcb36f761477b8bc11025866dc8da66f59cd6" translate="yes" xml:space="preserve">
          <source>A walled off area that&amp;rsquo;s not supposed to affect beyond its walls. You let kids play in the sandbox instead of running in the road. See Camel chapter 20, &amp;ldquo;Security&amp;rdquo;.</source>
          <target state="translated">壁を越えて影響を与えることは想定されていない壁に囲まれた領域。子供たちが道路を走るのではなく、サンドボックスで遊ぶことができます。Camelの第20章「セキュリティ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="52bce4e77f028ccf4be5e2732e6cc0cda9d45ce4" translate="yes" xml:space="preserve">
          <source>A warning is issued if an attempt is made to register an operator not found above.</source>
          <target state="translated">上記の見つからない演算子を登録しようとすると警告が発せられます。</target>
        </trans-unit>
        <trans-unit id="a18ef0b74f65545d966263b3d3c2472e8453a59c" translate="yes" xml:space="preserve">
          <source>A warning is printed if more than one POD file with the same POD name is found, e.g.</source>
          <target state="translated">同じPOD名のPODファイルが2つ以上見つかると警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="700f87e210bceec8357a7b2e426634dd3d25de48" translate="yes" xml:space="preserve">
          <source>A well-defined sequence of steps, explained clearly enough that even a computer could do them.</source>
          <target state="translated">コンピュータでもできるほど明確に説明された一連の手順。</target>
        </trans-unit>
        <trans-unit id="69583ba800841309993f3cd8027c2138231fdd98" translate="yes" xml:space="preserve">
          <source>A whiz-bang hardware gizmo (like a disk or tape drive or a modem or a joystick or a mouse) attached to your computer, which the &lt;b&gt;operating system&lt;/b&gt; tries to make look like a &lt;b&gt;file&lt;/b&gt; (or a bunch of files). Under Unix, these fake files tend to live in the</source>
          <target state="translated">コンピューターに接続されたハードディスクギズモ（ディスクまたはテープドライブ、モデム、ジョイスティック、マウスなど）。&lt;b&gt;オペレーティングシステム&lt;/b&gt;が&lt;b&gt;ファイル&lt;/b&gt;（または&lt;b&gt;ファイル&lt;/b&gt;の束）のように見せかけます。Unixでは、これらの偽のファイルは、</target>
        </trans-unit>
        <trans-unit id="90dbb683e595bd8a442976ee525366f34cadb549" translate="yes" xml:space="preserve">
          <source>A word boundary (&lt;code&gt;\b&lt;/code&gt; ) is a spot between two characters that has a &lt;code&gt;\w&lt;/code&gt; on one side of it and a &lt;code&gt;\W&lt;/code&gt; on the other side of it (in either order), counting the imaginary characters off the beginning and end of the string as matching a &lt;code&gt;\W&lt;/code&gt; . (Within character classes &lt;code&gt;\b&lt;/code&gt; represents backspace rather than a word boundary, just as it normally does in any double-quoted string.) The &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\Z&lt;/code&gt; are just like &quot;^&quot; and &quot;$&quot;, except that they won't match multiple times when the &lt;code&gt;/m&lt;/code&gt; modifier is used, while &quot;^&quot; and &quot;$&quot; will match at every internal line boundary. To match the actual end of the string and not ignore an optional trailing newline, use &lt;code&gt;\z&lt;/code&gt; .</source>
          <target state="translated">単語の境界（ &lt;code&gt;\b&lt;/code&gt; ）は2つの文字間のスポットです &lt;code&gt;\w&lt;/code&gt; それとの一方の側の &lt;code&gt;\W&lt;/code&gt; （いずれかの順序で）それの反対側には、の始まりと終わりをオフ架空の文字を数え、 &lt;code&gt;\W&lt;/code&gt; 一致する文字列。 （文字クラス内では、 &lt;code&gt;\b&lt;/code&gt; は、通常、二重引用符で囲まれた文字列と同様に、単語の境界ではなくバックスペースを表します。） &lt;code&gt;\A&lt;/code&gt; と &lt;code&gt;\Z&lt;/code&gt; は、 &quot;^&quot;と &quot;$&quot;に似ていますが、 &lt;code&gt;/m&lt;/code&gt; 修飾子が使用されている場合は複数回一致しますが、「^」と「$」はすべての内部行境界で一致します。文字列の実際の終わりに一致し、オプションの末尾の改行を無視しないようにするには、使用する &lt;code&gt;\z&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9f5130c323d4b84b2e0887ec7513db659cf437f" translate="yes" xml:space="preserve">
          <source>A word on terminology: I shall use the term</source>
          <target state="translated">用語について一言。私はこの用語を使用します。</target>
        </trans-unit>
        <trans-unit id="b1c5343ffbdad1e7ce4b8c849341bcb5442f07e1" translate="yes" xml:space="preserve">
          <source>A word sufficiently ambiguous to be deemed illegal under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'subs'&lt;/code&gt; . In the absence of that stricture, a bareword is treated as if quotes were around it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'subs'&lt;/code&gt; 下で違法と見なされるほどあいまいな単語。その制限がない場合、引用符がその周りにあるかのように、裸語が扱われます。</target>
        </trans-unit>
        <trans-unit id="310f40f7f3f90c12a6b195eedcb48c5f8026ea77" translate="yes" xml:space="preserve">
          <source>A word that has no other interpretation in the grammar will be treated as if it were a quoted string. These are known as &quot;barewords&quot;. As with filehandles and labels, a bareword that consists entirely of lowercase letters risks conflict with future reserved words, and if you use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; switch, Perl will warn you about any such words. Perl limits barewords (like identifiers) to about 250 characters. Future versions of Perl are likely to eliminate these arbitrary limitations.</source>
          <target state="translated">文法で他の解釈がない単語は、引用符で囲まれた文字列であるかのように扱われます。これらは「ベアワード」として知られています。ファイルハンドルやラベルと同じく、小文字だけからなる裸の単語は将来の予約語とぶつかる危険、あなたが使用している場合 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマや&lt;b&gt;-w&lt;/b&gt;スイッチを、Perlはそのような言葉について警告します。Perlは、ベアワード（識別子など）を約250文字に制限しています。Perlの将来のバージョンでは、これらの恣意的な制限がなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="41517852ad5f31fc26a5aada0fdb82adad0543c7" translate="yes" xml:space="preserve">
          <source>A word with a specific, built-in meaning to a &lt;b&gt;compiler&lt;/b&gt;, such as &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;. In many languages (not Perl), it&amp;rsquo;s illegal to use reserved words to name anything else. (Which is why they&amp;rsquo;re reserved, after all.) In Perl, you just can&amp;rsquo;t use them to name &lt;b&gt;labels&lt;/b&gt; or &lt;b&gt;filehandles&lt;/b&gt;. Also called &amp;ldquo;keywords&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; など、&lt;b&gt;コンパイラー&lt;/b&gt;に固有の組み込みの意味を持つ単語。多くの言語（Perlではない）では、予約語を使用して他の名前を付けることは違法です。（結局のところ、それらが予約されている理由です。）Perlでは、&lt;b&gt;ラベル&lt;/b&gt;や&lt;b&gt;ファイルハンドル&lt;/b&gt;に名前を&lt;b&gt;付ける&lt;/b&gt;ためにそれらを使用することはできません。「キーワード」とも呼ばれます。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="435e32d3ce964aedd25193932afab04e1daf13f7" translate="yes" xml:space="preserve">
          <source>A work-around is the following:</source>
          <target state="translated">回避策としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="07daf0448b91b826afed53a20124ecc976475c82" translate="yes" xml:space="preserve">
          <source>A workaround for this is to call the constants once in a &lt;code&gt;BEGIN&lt;/code&gt; block:</source>
          <target state="translated">これの回避策は、 &lt;code&gt;BEGIN&lt;/code&gt; ブロックで定数を1回呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="c5d091eede565087a31db8b62e48d4dd20b23599" translate="yes" xml:space="preserve">
          <source>A working knowledge of XSUB programming is incredibly useful for core hacking; XSUBs use techniques drawn from the PP code, the portion of the guts that actually executes a Perl program. It's a lot gentler to learn those techniques from simple examples and explanation than from the core itself.</source>
          <target state="translated">XSUBは、Perlプログラムを実際に実行するガットの部分であるPPコードから引き出されたテクニックを使用します。XSUB は PP コードから引き出された技術を使用していますが、これは Perl プログラムを実際に実行するガットの部分です。</target>
        </trans-unit>
        <trans-unit id="ecdab41b6d91aa8f615325452505a14f3756b711" translate="yes" xml:space="preserve">
          <source>A wrapper around ExtUtils::Install::uninstall(). Warns that uninstallation is deprecated and doesn't actually perform the uninstallation.</source>
          <target state="translated">ExtUtils::Install::uninstall()のラッパーです。アンインストールが非推奨であることを警告し、実際にはアンインストールを実行しません。</target>
        </trans-unit>
        <trans-unit id="7b1bd466739a9d9dd8c4b1931d422a782c699350" translate="yes" xml:space="preserve">
          <source>A wrapper for &lt;a href=&quot;http://search.cpan.org/perldoc/DBI&quot;&gt;DBI&lt;/a&gt;&lt;code&gt;fetchrow_array&lt;/code&gt; and &lt;code&gt;fetchrow_hashref&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/DBI&quot;&gt;DBI &lt;/a&gt; &lt;code&gt;fetchrow_array&lt;/code&gt; および &lt;code&gt;fetchrow_hashref&lt;/code&gt; のラッパー</target>
        </trans-unit>
        <trans-unit id="1d7f5dea12f6359a6636612f15ad99428ef6c1b4" translate="yes" xml:space="preserve">
          <source>A wrapper for the combination of &lt;code&gt;normalize()&lt;/code&gt; and &lt;code&gt;splitOnLastStarter()&lt;/code&gt; . Note that &lt;code&gt;$unprocessed&lt;/code&gt; will be modified as a side-effect.</source>
          <target state="translated">&lt;code&gt;normalize()&lt;/code&gt; と &lt;code&gt;splitOnLastStarter()&lt;/code&gt; の組み合わせのラッパー。 &lt;code&gt;$unprocessed&lt;/code&gt; は副作用として変更されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9a971835f0cc905c4c81e0e15a1789f5da379aa1" translate="yes" xml:space="preserve">
          <source>A wrapper of pack_sockaddr_in() or unpack_sockaddr_in(). In list context, unpacks its argument and returns a list consisting of the port and IP address. In scalar context, packs its port and IP address arguments as a &lt;code&gt;sockaddr_in&lt;/code&gt; and returns it.</source>
          <target state="translated">pack_sockaddr_in（）またはunpack_sockaddr_in（）のラッパー。リストコンテキストでは、引数をアンパックし、ポートとIPアドレスで構成されるリストを返します。スカラーコンテキストでは、ポートとIPアドレスの引数を &lt;code&gt;sockaddr_in&lt;/code&gt; としてパックし、それを返します。</target>
        </trans-unit>
        <trans-unit id="7da94d0b3d719c597383180b871afe1e809e7e59" translate="yes" xml:space="preserve">
          <source>A wrapper of pack_sockaddr_in6() or unpack_sockaddr_in6(). In list context, unpacks its argument according to unpack_sockaddr_in6(). In scalar context, packs its arguments according to pack_sockaddr_in6().</source>
          <target state="translated">pack_sockaddr_in6()または unpack_sockaddr_in6()のラッパー。リストコンテキストでは、その引数を unpack_sockaddr_in6()に従って展開します。スカラコンテキストでは、引数を pack_sockaddr_in6()に従ってパックします。</target>
        </trans-unit>
        <trans-unit id="53a1600cfdb74295cdddc3a0923b5ac6c8e36129" translate="yes" xml:space="preserve">
          <source>A wrapper of pack_sockaddr_un() or unpack_sockaddr_un(). In a list context, unpacks its argument and returns a list consisting of the pathname. In a scalar context, packs its pathname as a &lt;code&gt;sockaddr_un&lt;/code&gt; and returns it.</source>
          <target state="translated">pack_sockaddr_un（）またはunpack_sockaddr_un（）のラッパー。リストコンテキストでは、引数をアンパックし、パス名で構成されるリストを返します。スカラーコンテキストでは、パス名を &lt;code&gt;sockaddr_un&lt;/code&gt; としてパックし、それを返します。</target>
        </trans-unit>
        <trans-unit id="7fe6b1e666d9c00f78d39c2310ecc107997b967e" translate="yes" xml:space="preserve">
          <source>A zero is represented and returned as &lt;code&gt;0E1&lt;/code&gt; , &lt;b&gt;not&lt;/b&gt;&lt;code&gt;0E0&lt;/code&gt; (after Knuth).</source>
          <target state="translated">ゼロは &lt;code&gt;0E1&lt;/code&gt; では&lt;b&gt;なく&lt;/b&gt; &lt;code&gt;0E0&lt;/code&gt; として表され、返されます（Knuthの後）。</target>
        </trans-unit>
        <trans-unit id="779899a127457434de92416389106f3b75e672b1" translate="yes" xml:space="preserve">
          <source>A zero return value of &amp;amp;Time::HiRes::d_hires_stat means that Time::HiRes::stat is a no-op passthrough for CORE::stat() (and likewise for lstat), and therefore the timestamps will stay integers. The same thing will happen if the filesystem does not do subsecond timestamps, even if the &amp;amp;Time::HiRes::d_hires_stat is non-zero.</source>
          <target state="translated">＆Time :: HiRes :: d_hires_statのゼロの戻り値は、Time :: HiRes :: statがCORE :: stat（）のno-opパススルーであることを意味し（したがって、lstatの場合も同様）、タイムスタンプは整数のままです。＆Time :: HiRes :: d_hires_statがゼロ以外であっても、ファイルシステムが1秒未満のタイムスタンプを行わない場合、同じことが起こります。</target>
        </trans-unit>
        <trans-unit id="8e38756e4b48f666771b0184686ead868d8da345" translate="yes" xml:space="preserve">
          <source>A zero-width negative look-ahead assertion. For example &lt;code&gt;/foo(?!bar)/&lt;/code&gt; matches any occurrence of &quot;foo&quot; that isn't followed by &quot;bar&quot;. Note however that look-ahead and look-behind are NOT the same thing. You cannot use this for look-behind.</source>
          <target state="translated">ゼロ幅の否定先読みアサーション。たとえば、 &lt;code&gt;/foo(?!bar)/&lt;/code&gt; は、「bar」が後に続かない「foo」の出現に一致します。ただし、先読みと後読みは同じものではないことに注意してください。これを後読みに使用することはできません。</target>
        </trans-unit>
        <trans-unit id="d3ff01c027bf2326d7c975449071a13cc0fdc9c3" translate="yes" xml:space="preserve">
          <source>A zero-width negative look-behind assertion. For example &lt;code&gt;/(?&amp;lt;!bar)foo/&lt;/code&gt; matches any occurrence of &quot;foo&quot; that does not follow &quot;bar&quot;. Works only for fixed-width look-behind.</source>
          <target state="translated">ゼロ幅の否定後読みアサーション。たとえば、 &lt;code&gt;/(?&amp;lt;!bar)foo/&lt;/code&gt; は、「bar」の後に続かない「foo」の出現に一致します。固定幅の後読みに対してのみ機能します。</target>
        </trans-unit>
        <trans-unit id="31c71ae629ab72f59da90b044b041a0f3f38fe68" translate="yes" xml:space="preserve">
          <source>A zero-width positive look-ahead assertion. For example, &lt;code&gt;/\w+(?=\t)/&lt;/code&gt; matches a word followed by a tab, without including the tab in &lt;code&gt;$&amp;amp;&lt;/code&gt; .</source>
          <target state="translated">ゼロ幅の肯定先読みアサーション。たとえば、 &lt;code&gt;/\w+(?=\t)/&lt;/code&gt; は &lt;code&gt;$&amp;amp;&lt;/code&gt; にタブを含めずに、単語の後にタブが続く単語に一致します。</target>
        </trans-unit>
        <trans-unit id="65fa5c05e8082d01af830ede3afa1f43dd6607a8" translate="yes" xml:space="preserve">
          <source>A zero-width positive look-behind assertion. For example, &lt;code&gt;/(?&amp;lt;=\t)\w+/&lt;/code&gt; matches a word that follows a tab, without including the tab in &lt;code&gt;$&amp;amp;&lt;/code&gt; . Works only for fixed-width look-behind.</source>
          <target state="translated">ゼロ幅のポジティブ後読みアサーション。たとえば、 &lt;code&gt;/(?&amp;lt;=\t)\w+/&lt;/code&gt; は、タブを &lt;code&gt;$&amp;amp;&lt;/code&gt; に含めずに、タブに続く単語に一致します。固定幅の後読みに対してのみ機能します。</target>
        </trans-unit>
        <trans-unit id="34bdd106971288a6d920c5cf05705981d574d0c4" translate="yes" xml:space="preserve">
          <source>A. DECOMPRESS</source>
          <target state="translated">A.デコプレス</target>
        </trans-unit>
        <trans-unit id="1ff759f92b74a05e1658516dbd8457b5a3483f7c" translate="yes" xml:space="preserve">
          <source>ABBREVIATIONS</source>
          <target state="translated">ABBREVIATIONS</target>
        </trans-unit>
        <trans-unit id="673a41f0cf51b17cfeaeef5b1ad0748f98430d4f" translate="yes" xml:space="preserve">
          <source>ABOUT EXTENDING POD</source>
          <target state="translated">エクステンディングポッドについて</target>
        </trans-unit>
        <trans-unit id="dd2cb5069032eb76d119d2ed0164eb2a9e7c70ab" translate="yes" xml:space="preserve">
          <source>ABOUT LANGUAGE TAGS</source>
          <target state="translated">言語タグについて</target>
        </trans-unit>
        <trans-unit id="848db58438feb5d786eb1289cbafc6268e9d9307" translate="yes" xml:space="preserve">
          <source>ABOUT LOWERCASING</source>
          <target state="translated">ローワーキャッシングについて</target>
        </trans-unit>
        <trans-unit id="0bdf7f8075cb4fb7b28aefb1a128e561b3a0c204" translate="yes" xml:space="preserve">
          <source>ABOUT UNICODE PLAINTEXT LANGUAGE TAGS</source>
          <target state="translated">UNICODE PLAINTEXT LANGUAGE TAGSについて</target>
        </trans-unit>
        <trans-unit id="e29c6cbd184a79deb8c1a9f477b3e3ad1f42e851" translate="yes" xml:space="preserve">
          <source>ABSTRACT</source>
          <target state="translated">ABSTRACT</target>
        </trans-unit>
        <trans-unit id="8e85cf5fbe6cfb533ae13301a76848fd25437a12" translate="yes" xml:space="preserve">
          <source>ACCESS</source>
          <target state="translated">ACCESS</target>
        </trans-unit>
        <trans-unit id="5250769dfb1b93d9576c113491830191c4db1d11" translate="yes" xml:space="preserve">
          <source>ACCESSING ZIP FILES</source>
          <target state="translated">ZIP ファイルへのアクセス</target>
        </trans-unit>
        <trans-unit id="fcc3d0a1b75c8feef5b7b1c653cf0ea340c392c6" translate="yes" xml:space="preserve">
          <source>ACCESSOR METHODS</source>
          <target state="translated">ACCESSOR METHODS</target>
        </trans-unit>
        <trans-unit id="60a7c20aebd64a886444bdd90a1b11f97a4a1e06" translate="yes" xml:space="preserve">
          <source>ACCESSORS</source>
          <target state="translated">ACCESSORS</target>
        </trans-unit>
        <trans-unit id="0ba6c220aaa591706073278a9ad280fa2fd653a4" translate="yes" xml:space="preserve">
          <source>ACCURACY and PRECISION</source>
          <target state="translated">正確さと正確さ</target>
        </trans-unit>
        <trans-unit id="2cdc7ae734b454aa9217c09256c5559e6d697319" translate="yes" xml:space="preserve">
          <source>ACKNOWLEDGEMENTS</source>
          <target state="translated">ACKNOWLEDGEMENTS</target>
        </trans-unit>
        <trans-unit id="923060090571fbfd68775d7a6ad521d2f148ca46" translate="yes" xml:space="preserve">
          <source>ACKNOWLEDGMENTS</source>
          <target state="translated">ACKNOWLEDGMENTS</target>
        </trans-unit>
        <trans-unit id="44d15b33e9bdfa8cf1ced5727e4a50f9110eab0b" translate="yes" xml:space="preserve">
          <source>ADDITIONAL FUNCTIONS</source>
          <target state="translated">追加機能</target>
        </trans-unit>
        <trans-unit id="377c8694e808f226461dfc561f7463499e97731b" translate="yes" xml:space="preserve">
          <source>ADDITIONAL LIBRARIES</source>
          <target state="translated">追加ライブラリー</target>
        </trans-unit>
        <trans-unit id="97b832ba91bb860f61c453123e346196e469e726" translate="yes" xml:space="preserve">
          <source>ADDR should be &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; unless you really know what you're doing.</source>
          <target state="translated">ADDRは、何をしているのか本当に理解していない限り、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; にする必要があります。</target>
        </trans-unit>
        <trans-unit id="55ecbd212eaf4944bfe6cc43f71cd52a01caf60b" translate="yes" xml:space="preserve">
          <source>ADDRESSES</source>
          <target state="translated">ADDRESSES</target>
        </trans-unit>
        <trans-unit id="64ec98c40972fdf68514c8da070992ffcab12ce8" translate="yes" xml:space="preserve">
          <source>ADVANCED METHODS</source>
          <target state="translated">高度な方法</target>
        </trans-unit>
        <trans-unit id="afb2b77214c93a1bf72d1a922cac35289d58c3c4" translate="yes" xml:space="preserve">
          <source>ADVISORY LOCKING</source>
          <target state="translated">アドバイスロック</target>
        </trans-unit>
        <trans-unit id="97e745db372f952a45b14d78a0e017557b75da5f" translate="yes" xml:space="preserve">
          <source>AFS users</source>
          <target state="translated">エーエフエスユーザー</target>
        </trans-unit>
        <trans-unit id="aedfd73052985c2f41211e623add2af653060807" translate="yes" xml:space="preserve">
          <source>AFTER</source>
          <target state="translated">AFTER</target>
        </trans-unit>
        <trans-unit id="496da957ccecd43014881eeb7de2e7be00a8b83f" translate="yes" xml:space="preserve">
          <source>AF_INET, AF_INET6, AF_UNIX, ...</source>
          <target state="translated">AF_INET,AF_INET6,AF_UNIX,...</target>
        </trans-unit>
        <trans-unit id="8270308dd6281a640520a3b86d9717dc1578cb66" translate="yes" xml:space="preserve">
          <source>AIX 4.2 and extensions using C++ with statics</source>
          <target state="translated">AIX 4.2 と C++を使用したスタティックな拡張機能</target>
        </trans-unit>
        <trans-unit id="cc22d23e0b7ef1b2efab2cb46a1e42c8fa854e52" translate="yes" xml:space="preserve">
          <source>AIX 5L 5.3 documentation on syslog, &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp?topic=/com.ibm.aix.basetechref/doc/basetrf2/syslog.htm&quot;&gt;http://publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp?topic=/com.ibm.aix.basetechref/doc/basetrf2/syslog.htm&lt;/a&gt;</source>
          <target state="translated">syslog上のAIX 5L 5.3のドキュメント、&lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp?topic=/com.ibm.aix.basetechref/doc/basetrf2/syslog.htm&quot;&gt;http：//publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp？topic = / com.ibm.aix.basetechref / doc / basetrf2 / syslog.htm&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bbc183716848102da5675f12c481c22f2bbe872f" translate="yes" xml:space="preserve">
          <source>AIX specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_Unix の AIX 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="b844fff26ef204487899d430c3a31df1b5cc17d0" translate="yes" xml:space="preserve">
          <source>AIX supports dynamically loadable objects as well as shared libraries. Shared libraries by convention end with the suffix .a, which is a bit misleading, as an archive can contain static as well as dynamic members. For Perl dynamically loaded objects we use the .so suffix also used on many other platforms.</source>
          <target state="translated">AIX は共有ライブラリだけでなく、動的にロード可能なオブジェクトもサポートしています。共有ライブラリの末尾には.aという接尾辞がついていますが、これは少し誤解を招きやすいです。Perl の動的にロードされたオブジェクトには、他の多くのプラットフォームで使用されている .so という接尾辞を使用しています。</target>
        </trans-unit>
        <trans-unit id="c930119fca1aaac13c47275f88a8f54f317dcf6d" translate="yes" xml:space="preserve">
          <source>ALIASES</source>
          <target state="translated">ALIASES</target>
        </trans-unit>
        <trans-unit id="6b42874e3cd20771d93096ec5ce36307a1f2ba14" translate="yes" xml:space="preserve">
          <source>ALL</source>
          <target state="translated">ALL</target>
        </trans-unit>
        <trans-unit id="212ac4dd3c12194a505f91dc67c3c92083d6b847" translate="yes" xml:space="preserve">
          <source>ALTERNATIVES</source>
          <target state="translated">ALTERNATIVES</target>
        </trans-unit>
        <trans-unit id="a4406ec237fefa2186cbfcb898374ca2b35f123f" translate="yes" xml:space="preserve">
          <source>ANCHORS</source>
          <target state="translated">ANCHORS</target>
        </trans-unit>
        <trans-unit id="c2f934cb8cab6c1b3af0d4f2fdd824eabafb6bf4" translate="yes" xml:space="preserve">
          <source>AND</source>
          <target state="translated">AND</target>
        </trans-unit>
        <trans-unit id="f00aef29ec0d70fa98911d7d5c3619473dc02a1d" translate="yes" xml:space="preserve">
          <source>ANOTHER STEP SIDEWAYS</source>
          <target state="translated">ANOTHER STEP SIDEWAYS</target>
        </trans-unit>
        <trans-unit id="dc8b5a685a1f3dfa4a578835317ceecf19e71828" translate="yes" xml:space="preserve">
          <source>ANSI C prototypes</source>
          <target state="translated">ANSI Cプロトタイプ</target>
        </trans-unit>
        <trans-unit id="dfbdf15f452a4b9784443e1ff8b670a57ee46040" translate="yes" xml:space="preserve">
          <source>API CHANGES</source>
          <target state="translated">API変更</target>
        </trans-unit>
        <trans-unit id="4f15dd61e10f028874d8ba2639996e9123298e0e" translate="yes" xml:space="preserve">
          <source>API Listing originally by Dean Roehrich &amp;lt;roehrich@cray.com&amp;gt;.</source>
          <target state="translated">Dean Roehrich &amp;lt;roehrich@cray.com&amp;gt;によるAPIリスト。</target>
        </trans-unit>
        <trans-unit id="df325db8b77f500b6cdf947d62422aad373e0aea" translate="yes" xml:space="preserve">
          <source>API Methods</source>
          <target state="translated">APIメソッド</target>
        </trans-unit>
        <trans-unit id="8454ac15101bc16638e3fcbf0a95ef8d316e2b31" translate="yes" xml:space="preserve">
          <source>API documentation corrected and extended by Peter John Acklam, &amp;lt;pjacklam@online.no&amp;gt;</source>
          <target state="translated">Peter John Acklam &amp;lt;pjacklam@online.no&amp;gt;によって修正および拡張されたAPIドキュメント</target>
        </trans-unit>
        <trans-unit id="277a0cf94bbf499b3b1ef2e01755b635f3035e77" translate="yes" xml:space="preserve">
          <source>API optional methods</source>
          <target state="translated">APIオプションメソッド</target>
        </trans-unit>
        <trans-unit id="9062babed18f073234a690694e7bfa973c074eed" translate="yes" xml:space="preserve">
          <source>API should be understandable by the average programmer</source>
          <target state="translated">APIは一般的なプログラマーが理解できるようにする必要がある</target>
        </trans-unit>
        <trans-unit id="0dd3839d0c79b29685b54d3a4a1e4fbc6f050c94" translate="yes" xml:space="preserve">
          <source>API version</source>
          <target state="translated">APIバージョン</target>
        </trans-unit>
        <trans-unit id="a7438834ae98ed5eab86e235ece4b52b96a7675f" translate="yes" xml:space="preserve">
          <source>API version 1</source>
          <target state="translated">APIバージョン1</target>
        </trans-unit>
        <trans-unit id="a0960ab95be5d294c9ff103e037a981d112d54d9" translate="yes" xml:space="preserve">
          <source>API version 2</source>
          <target state="translated">APIバージョン2</target>
        </trans-unit>
        <trans-unit id="f6db2b825c2703e26c1c6b659f77956e578c5caf" translate="yes" xml:space="preserve">
          <source>ARGS</source>
          <target state="translated">ARGS</target>
        </trans-unit>
        <trans-unit id="253fb8ce8cc421dd2ece69eec435a50b11f94cfb" translate="yes" xml:space="preserve">
          <source>ARGUMENTS</source>
          <target state="translated">ARGUMENTS</target>
        </trans-unit>
        <trans-unit id="3669288cabd0e6c21385584c21cb897733b8578f" translate="yes" xml:space="preserve">
          <source>ARGV</source>
          <target state="translated">ARGV</target>
        </trans-unit>
        <trans-unit id="58f29c4a3f70f6c5783cb6f812b7570e0f5a35fa" translate="yes" xml:space="preserve">
          <source>ARGVOUT</source>
          <target state="translated">ARGVOUT</target>
        </trans-unit>
        <trans-unit id="939f4f9b79e0d63ec8eb10a421a9e30ccdc8ba12" translate="yes" xml:space="preserve">
          <source>ARRAYS OF ARRAYS</source>
          <target state="translated">ARRAYS OF ARRAYS</target>
        </trans-unit>
        <trans-unit id="a25c873f10f6ead60f25f2f80304660b76114969" translate="yes" xml:space="preserve">
          <source>ARRAYS OF HASHES</source>
          <target state="translated">ハッシュの列</target>
        </trans-unit>
        <trans-unit id="54523fd188916df915063049c7391f98e0ecb17d" translate="yes" xml:space="preserve">
          <source>AS/400 Perl information at &lt;a href=&quot;http://as400.rochester.ibm.com/&quot;&gt;http://as400.rochester.ibm.com/&lt;/a&gt; as well as on CPAN in the</source>
          <target state="translated">AS / 400 Perl情報（&lt;a href=&quot;http://as400.rochester.ibm.com/&quot;&gt;http://as400.rochester.ibm.com/&lt;/a&gt;およびCPANにあります）</target>
        </trans-unit>
        <trans-unit id="94090230b1f8c256f7ac5dc5a70bd3b20ee4ff15" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>
        </trans-unit>
        <trans-unit id="095009cc6353c09fd2d522eaac28b52d2906738f" translate="yes" xml:space="preserve">
          <source>ASCII Rules versus Unicode Rules</source>
          <target state="translated">ASCII規則対Unicode規則</target>
        </trans-unit>
        <trans-unit id="05b06e21b242818c80ba48f1806ad24f7869b69b" translate="yes" xml:space="preserve">
          <source>ASCII is a 7 bit encoding, but bytes have 8 bits in them. The 128 extra characters have different meanings depending on the locale. Absent a locale, currently these extra characters are generally considered to be unassigned, and this has presented some problems. This has being changed starting in 5.12 so that these characters can be considered to be Latin-1 (ISO-8859-1).</source>
          <target state="translated">ASCIIは7ビットのエンコーディングですが、バイトは8ビットです。128の余分な文字は、ロケールによって意味が異なります。ロケールがない場合、現在のところこれらの余分な文字は一般的に未割り当てとみなされており、これがいくつかの問題を引き起こしていました。これは5.12から変更され、これらの文字はLatin-1 (ISO-8859-1)とみなされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d77e7b08ca6fa993505fba8c81b3ac5f801abc6f" translate="yes" xml:space="preserve">
          <source>ASCII rules are used for the case change. The lowercase of any character outside the ASCII range is the character itself.</source>
          <target state="translated">大文字小文字の変更にはASCIIルールを使用します。ASCIIの範囲外の文字の小文字は、その文字そのものです。</target>
        </trans-unit>
        <trans-unit id="ece7d85b8cf901827daa3241607fc8b13d846059" translate="yes" xml:space="preserve">
          <source>ATTRIBUTION</source>
          <target state="translated">ATTRIBUTION</target>
        </trans-unit>
        <trans-unit id="8b61f8355a2ccf4ace40fd469d2de5233617a66b" translate="yes" xml:space="preserve">
          <source>AUTHOR</source>
          <target state="translated">AUTHOR</target>
        </trans-unit>
        <trans-unit id="57dab403a72cbeaee26142a3b342afaf3f988255" translate="yes" xml:space="preserve">
          <source>AUTHOR AND COPYRIGHT</source>
          <target state="translated">著者と著作権</target>
        </trans-unit>
        <trans-unit id="612f07ef18eeaf3398b36342703c907f1f498930" translate="yes" xml:space="preserve">
          <source>AUTHOR and COPYRIGHT</source>
          <target state="translated">著者と著作権</target>
        </trans-unit>
        <trans-unit id="d5195f9e1e4e9d40c97901347bc70f8c519bf1be" translate="yes" xml:space="preserve">
          <source>AUTHOR, COPYRIGHT AND LICENSE</source>
          <target state="translated">著者、著作権およびライセンス</target>
        </trans-unit>
        <trans-unit id="41d9cfc9cdf402f68e3f8ff8a8e41c4254e5f24e" translate="yes" xml:space="preserve">
          <source>AUTHOR, COPYRIGHT, AND LICENSE</source>
          <target state="translated">著者、著作権、ライセンス</target>
        </trans-unit>
        <trans-unit id="dad57a4c245a8007c90257aef0514c8b6a0f600c" translate="yes" xml:space="preserve">
          <source>AUTHORS</source>
          <target state="translated">AUTHORS</target>
        </trans-unit>
        <trans-unit id="10ca6d2dbfbe263ce3d2447e713540dbee649dd1" translate="yes" xml:space="preserve">
          <source>AUTHORS &amp;amp; ACKNOWLEDGEMENTS</source>
          <target state="translated">著者と謝辞</target>
        </trans-unit>
        <trans-unit id="85e022793224f31daf1d3314f296447a1c347850" translate="yes" xml:space="preserve">
          <source>AUTHORS / CONTRIBUTORS</source>
          <target state="translated">著者・協力者</target>
        </trans-unit>
        <trans-unit id="14d07abb959cf3e3fd8f53cf02fd844e461b3f7b" translate="yes" xml:space="preserve">
          <source>AUTHORS AND CONTRIBUTORS</source>
          <target state="translated">著者と協力者</target>
        </trans-unit>
        <trans-unit id="a7c000e8a87845b58cc629ac11fab313f86076cc" translate="yes" xml:space="preserve">
          <source>AUTO LEXICONS</source>
          <target state="translated">オートレキシコン</target>
        </trans-unit>
        <trans-unit id="ba657d4270e0ee84198dc3f12f7f53cb0c332d2f" translate="yes" xml:space="preserve">
          <source>AUTOLOAD</source>
          <target state="translated">AUTOLOAD</target>
        </trans-unit>
        <trans-unit id="43af5166b3e71bcdd670318e774158ceaf10a942" translate="yes" xml:space="preserve">
          <source>AUTOLOADER</source>
          <target state="translated">AUTOLOADER</target>
        </trans-unit>
        <trans-unit id="886a23f1067d5ffd81046b592349f27bd44a8216" translate="yes" xml:space="preserve">
          <source>AUTOLOADed Constants</source>
          <target state="translated">AUTOLOADされた定数</target>
        </trans-unit>
        <trans-unit id="68570adadeeae5fdaad94d20b4200b8cf0e0c4f0" translate="yes" xml:space="preserve">
          <source>AVAILABILITY</source>
          <target state="translated">AVAILABILITY</target>
        </trans-unit>
        <trans-unit id="9669bc4871af0ed7e9d16166bb30c227929eda52" translate="yes" xml:space="preserve">
          <source>AVAILABLE FEATURES</source>
          <target state="translated">利用可能な機能</target>
        </trans-unit>
        <trans-unit id="302ba7dc5c280998e54c1d7ee821e9c0c27afd54" translate="yes" xml:space="preserve">
          <source>AVs and HVs are more complicated, but SVs are by far the most common variable type being thrown around. Having seen something of how we manipulate these, let's go on and look at how the op tree is constructed.</source>
          <target state="translated">AV や HV はもっと複雑ですが、SV は最も一般的な変数型です。これらをどのように操作するかを見てきましたが、次に op ツリーがどのように構築されているかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="97658a3aca1866999e545fb8e0d412280826a4d3" translate="yes" xml:space="preserve">
          <source>AVs, HVs and undefined values</source>
          <target state="translated">AV、HV、未定義値</target>
        </trans-unit>
        <trans-unit id="1ca83b983f42527b4fed4dd004cb7ec8d4f4a6f6" translate="yes" xml:space="preserve">
          <source>Abandon the tmp in the current pad at offset po and replace with a new one.</source>
          <target state="translated">現在のパッドの tmp をオフセット po で破棄し、新しい tmp に置き換えます。</target>
        </trans-unit>
        <trans-unit id="57c67b6004d41befa99fa526f57a6625af549efe" translate="yes" xml:space="preserve">
          <source>Abbrev - create an abbreviation table from a list</source>
          <target state="translated">Abbrev-リストから略語表を作成する</target>
        </trans-unit>
        <trans-unit id="953787278f84160153e00df3d74bff332f0acc7b" translate="yes" xml:space="preserve">
          <source>Abigail &amp;lt;abigail@foad.org&amp;gt;, Charles Bailey &amp;lt;bailey@newman.upenn.edu&amp;gt;, Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;, Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt;, Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt;, Thomas Dorner &amp;lt;Thomas.Dorner@start.de&amp;gt;, Andy Dougherty &amp;lt;doughera@lafayette.edu&amp;gt;, Dominic Dunlop &amp;lt;domo@computer.org&amp;gt;, Neale Ferguson &amp;lt;neale@vma.tabnsw.com.au&amp;gt;, David J. Fiander &amp;lt;davidf@mks.com&amp;gt;, Paul Green &amp;lt;Paul.Green@stratus.com&amp;gt;, M.J.T. Guy &amp;lt;mjtg@cam.ac.uk&amp;gt;, Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;, Luther Huffman &amp;lt;lutherh@stratcom.com&amp;gt;, Nick Ing-Simmons &amp;lt;nick@ing-simmons.net&amp;gt;, Andreas J. K&amp;ouml;nig &amp;lt;a.koenig@mind.de&amp;gt;, Markus Laker &amp;lt;mlaker@contax.co.uk&amp;gt;, Andrew M. Langmead &amp;lt;aml@world.std.com&amp;gt;, Larry Moore &amp;lt;ljmoore@freespace.net&amp;gt;, Paul Moore &amp;lt;Paul.Moore@uk.origin-it.com&amp;gt;, Chris Nandor &amp;lt;pudge@pobox.com&amp;gt;, Matthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;, Philip Newton &amp;lt;pne@cpan.org&amp;gt;, Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt;, Tom Phoenix &amp;lt;rootbeer@teleport.com&amp;gt;, Andr&amp;eacute; Pirard &amp;lt;A.Pirard@ulg.ac.be&amp;gt;, Peter Prymmer &amp;lt;pvhp@forte.com&amp;gt;, Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;, Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;, Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;, Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;, Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;, Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;, John Malmberg &amp;lt;wb8tyw@qsl.net&amp;gt;</source>
          <target state="translated">Abigail &amp;lt;abigail@foad.org&amp;gt;、Charles Bailey &amp;lt;bailey@newman.upenn.edu&amp;gt;、Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;、Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt;、Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt; 、Thomas Dorner &amp;lt;Thomas.Dorner@start.de&amp;gt;、Andy Dougherty &amp;lt;doughera@lafayette.edu&amp;gt;、Dominic Dunlop &amp;lt;domo@computer.org&amp;gt;、Neale Ferguson &amp;lt;neale@vma.tabnsw.com.au&amp;gt;、David J. Fiander &amp;lt;davidf@mks.com&amp;gt;、Paul Green &amp;lt;Paul.Green@stratus.com&amp;gt;、MJT Guy &amp;lt;mjtg@cam.ac.uk&amp;gt;、Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;、Luther Huffman &amp;lt;lutherh @ stratcom。 com&amp;gt;、Nick Ing-Simmons &amp;lt;nick@ing-simmons.net&amp;gt;、Andreas J.K&amp;ouml;nig&amp;lt;a.koenig@mind.de&amp;gt;、Markus Laker &amp;lt;mlaker@contax.co.uk&amp;gt;、Andrew M. Langmead &amp;lt;aml @ world.std.com&amp;gt;、Larry Moore &amp;lt;ljmoore@freespace.net&amp;gt;、Paul Moore &amp;lt;Paul.Moore@uk.origin-it.com&amp;gt;、Chris Nandor &amp;lt;pudge@pobox.com&amp;gt;、Matthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;、Philip Newton &amp;lt;pne@cpan.org&amp;gt;、Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt;、Tom Phoenix &amp;lt;rootbeer@teleport.com&amp;gt;、 Andr&amp;eacute;Pirard &amp;lt;A.Pirard@ulg.ac.be&amp;gt;、Peter Prymmer &amp;lt;pvhp@forte.com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;、Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、 Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;、John Malmberg &amp;lt;wb8tyw @ qsl。ネット&amp;gt;com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;、Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com &amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;、John Malmberg &amp;lt;wb8tyw@qsl.net&amp;gt;com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;、Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com &amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;、John Malmberg &amp;lt;wb8tyw@qsl.net&amp;gt;</target>
        </trans-unit>
        <trans-unit id="272ef4d46b3c0dabd3e502b3dc11c532d79932f2" translate="yes" xml:space="preserve">
          <source>Able to serve as an &lt;b&gt;lvalue&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;左辺値&lt;/b&gt;として機能できます。</target>
        </trans-unit>
        <trans-unit id="a3f9c8141ea275b67bac5cb6c2da96e6b983db25" translate="yes" xml:space="preserve">
          <source>Abort the current data transfer.</source>
          <target state="translated">現在のデータ転送を中止します。</target>
        </trans-unit>
        <trans-unit id="f7989aafbbb3a9f050ae7d85ebd582349680eb97" translate="yes" xml:space="preserve">
          <source>About =over...=back Regions</source>
          <target state="translated">について =over...=back 地域</target>
        </trans-unit>
        <trans-unit id="5766587271d36ba046e7fb9efb21f9b7e662efb7" translate="yes" xml:space="preserve">
          <source>About Compiler Versions of Irix</source>
          <target state="translated">Irixのコンパイラバージョンについて</target>
        </trans-unit>
        <trans-unit id="bcf14899785f94972e5296a53e65daa2fad1f95c" translate="yes" xml:space="preserve">
          <source>About Data Paragraphs and &quot;=begin/=end&quot; Regions</source>
          <target state="translated">データ段落と&quot;=begin/=end &quot;地域について</target>
        </trans-unit>
        <trans-unit id="f134fee2fd6f61ab2515d5dfb15b7bc4b2f583f5" translate="yes" xml:space="preserve">
          <source>About L&amp;lt;...&amp;gt; Codes</source>
          <target state="translated">L &amp;lt;...&amp;gt;コードについて</target>
        </trans-unit>
        <trans-unit id="027e45f66497afa47c6fd09d682b0e1e7a6cedb2" translate="yes" xml:space="preserve">
          <source>Above the optimizer section is the list of</source>
          <target state="translated">オプティマイザーセクションの上には</target>
        </trans-unit>
        <trans-unit id="6d3fc598c606132c619a12609173fe6e49201e22" translate="yes" xml:space="preserve">
          <source>Absolute referencing</source>
          <target state="translated">絶対参照</target>
        </trans-unit>
        <trans-unit id="d79da395b5d7a09c6439a5f2660d8c568186ab7e" translate="yes" xml:space="preserve">
          <source>Abstract</source>
          <target state="translated">Abstract</target>
        </trans-unit>
        <trans-unit id="fd1c863c80384ee83334b3b3ad71ce0af37947bc" translate="yes" xml:space="preserve">
          <source>Abstract base class for harness output delegate</source>
          <target state="translated">ハーネス出力デリゲートのための抽象基底クラス</target>
        </trans-unit>
        <trans-unit id="becdf5f42e43b7273698e72d5f4213f7c0a68cc4" translate="yes" xml:space="preserve">
          <source>Accepted before Perl 5.20.0. The Socket library is now primarily maintained on CPAN, rather than in the perl core.</source>
          <target state="translated">Perl 5.20.0 より前に受け入れられました。Socket ライブラリは、Perl コアではなく、主に CPAN でメンテナンスされるようになりました。</target>
        </trans-unit>
        <trans-unit id="4dd1bc893614ac8f9bec65c912481578e5103c07" translate="yes" xml:space="preserve">
          <source>Accepted features</source>
          <target state="translated">受け入れられた機能</target>
        </trans-unit>
        <trans-unit id="56a28ff20a71c3e8ac9c196f290eef557747b624" translate="yes" xml:space="preserve">
          <source>Accepted in Perl 5.20.0</source>
          <target state="translated">Perl 5.20.0 で受け入れ</target>
        </trans-unit>
        <trans-unit id="1576bf43d8822dbdd55b1f1ab39311d28be28187" translate="yes" xml:space="preserve">
          <source>Accepted in Perl 5.22.0</source>
          <target state="translated">Perl 5.22.0 で受け入れ</target>
        </trans-unit>
        <trans-unit id="675dec52d56b1b7035fe24d4e72f28a346a787af" translate="yes" xml:space="preserve">
          <source>Accepted in Perl 5.8.0</source>
          <target state="translated">Perl 5.8.0 で受け入れ</target>
        </trans-unit>
        <trans-unit id="90c2a9a8eb85f455955167b397c89e9d89539a74" translate="yes" xml:space="preserve">
          <source>Accepted in Perl 5.8.1</source>
          <target state="translated">Perl 5.8.1 で受け入れ</target>
        </trans-unit>
        <trans-unit id="ad21c5596b645ba9637173674a45823b09fa37af" translate="yes" xml:space="preserve">
          <source>Accepts a hashref with the following key/value pairs:</source>
          <target state="translated">以下のキーと値のペアを持つハッシュリフを受け取ります。</target>
        </trans-unit>
        <trans-unit id="3cab88715458f5eb0aafb0a8b41682d6e4711e8a" translate="yes" xml:space="preserve">
          <source>Accepts a scalar value or array ref of scalar values indicating which paths to allowed libraries should be included if Perl tests are executed. Naturally, this only makes sense in the context of tests written in Perl.</source>
          <target state="translated">Perl テストが実行された場合に、許可されたライブラリへのパスが含まれるべきであることを示すスカラー値またはスカラー値の配列 ref を受け取ります。当然ながら、これは Perl で書かれたテストのコンテキストでのみ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="fd709042dcc776319515489b90b122d3454c0825" translate="yes" xml:space="preserve">
          <source>Accepts a scalar value or array ref of scalar values indicating which switches should be included if Perl tests are executed. Naturally, this only makes sense in the context of tests written in Perl.</source>
          <target state="translated">Perl テストが実行された場合に、どのスイッチが含まれるべきかを示すスカラー値またはスカラー値の配列 ref を受け取ります。当然ながら、これは Perl で書かれたテストのコンテキストでのみ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="410a58b5c50383c8e3e3efac6ca6d02323a2e404" translate="yes" xml:space="preserve">
          <source>Accepts a version object and returns the normalized floating point representation. Call like:</source>
          <target state="translated">バージョンオブジェクトを受け取り、正規化された浮動小数点表現を返します。のように呼び出します。</target>
        </trans-unit>
        <trans-unit id="6925cd73aca9469cc1ca4115afb36b07a4f628be" translate="yes" xml:space="preserve">
          <source>Accepts a version object and returns the normalized string representation. Call like:</source>
          <target state="translated">バージョンオブジェクトを受け取り、正規化された文字列表現を返します。のように呼び出します。</target>
        </trans-unit>
        <trans-unit id="2dc796d2ce674a48fb65979328ffb56b5f53f1a2" translate="yes" xml:space="preserve">
          <source>Accepts an array of &lt;code&gt;@tests&lt;/code&gt; to be run. This should generally be the names of test files, but this is not required. Each element in &lt;code&gt;@tests&lt;/code&gt; will be passed to &lt;code&gt;TAP::Parser::new()&lt;/code&gt; as a &lt;code&gt;source&lt;/code&gt; . See &lt;a href=&quot;parser&quot;&gt;TAP::Parser&lt;/a&gt; for more information.</source>
          <target state="translated">実行する &lt;code&gt;@tests&lt;/code&gt; の配列を受け入れます。通常、これはテストファイルの名前ですが、必須ではありません。 &lt;code&gt;@tests&lt;/code&gt; の各要素は、 &lt;code&gt;source&lt;/code&gt; として &lt;code&gt;TAP::Parser::new()&lt;/code&gt; 渡されます。詳細については、&lt;a href=&quot;parser&quot;&gt;TAP :: Parser&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2eb4b3520f8d8fe3fca980121310995272cd8962" translate="yes" xml:space="preserve">
          <source>Accepts an incoming socket connect, just as accept(2) does. Returns the packed address if it succeeded, false otherwise. See the example in &lt;a href=&quot;../perlipc#Sockets%3a-Client%2fServer-Communication&quot;&gt;Sockets: Client/Server Communication in perlipc&lt;/a&gt;.</source>
          <target state="translated">accept（2）と同様に、着信ソケット接続を受け入れます。成功した場合はパックされたアドレスを返し、そうでない場合はfalseを返します。&lt;a href=&quot;../perlipc#Sockets%3a-Client%2fServer-Communication&quot;&gt;ソケット&lt;/a&gt;の例：perlipcのクライアント/サーバー通信を参照してください。</target>
        </trans-unit>
        <trans-unit id="9fa11f18dc906995a6c93c465d60382e345c0a77" translate="yes" xml:space="preserve">
          <source>Accepts an incoming socket connect, just as accept(2) does. Returns the packed address if it succeeded, false otherwise. See the example in &lt;a href=&quot;perlipc#Sockets%3a-Client%2fServer-Communication&quot;&gt;Sockets: Client/Server Communication in perlipc&lt;/a&gt;.</source>
          <target state="translated">accept（2）と同様に、着信ソケット接続を受け入れます。成功した場合はパックされたアドレスを返し、そうでない場合はfalseを返します。&lt;a href=&quot;perlipc#Sockets%3a-Client%2fServer-Communication&quot;&gt;ソケット&lt;/a&gt;の例：perlipcのクライアント/サーバー通信を参照してください。</target>
        </trans-unit>
        <trans-unit id="37a976454ef0a6eae01758cd57c59bf29e52a50c" translate="yes" xml:space="preserve">
          <source>Accepts targets for &lt;code&gt;=begin/=for/=end&lt;/code&gt; sections of the POD.</source>
          <target state="translated">PODの &lt;code&gt;=begin/=for/=end&lt;/code&gt; セクションのターゲットを受け入れます。</target>
        </trans-unit>
        <trans-unit id="cede5a1af37a1d62c15ab2a9566e9d886f5d7670" translate="yes" xml:space="preserve">
          <source>Accepts targets for &lt;code&gt;=begin/=for/=end&lt;/code&gt; sections that should be parsed as POD. For details, see &lt;a href=&quot;../perlpodspec#About-Data-Paragraphs&quot;&gt;About Data Paragraphs in perlpodspec&lt;/a&gt;.</source>
          <target state="translated">PODとして解析する必要がある &lt;code&gt;=begin/=for/=end&lt;/code&gt; セクションのターゲットを受け入れます。詳細については、「&lt;a href=&quot;../perlpodspec#About-Data-Paragraphs&quot;&gt;Perlpodspecのデータパラグラフについて&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7e56694c4d8d029e1bdf7a642cc8826a85758929" translate="yes" xml:space="preserve">
          <source>Access Perl configuration information</source>
          <target state="translated">Perl の設定情報にアクセスする</target>
        </trans-unit>
        <trans-unit id="8347e5dd48478a10f6aa983449d4b21d1a1af03b" translate="yes" xml:space="preserve">
          <source>Access and Printing</source>
          <target state="translated">アクセスと印刷</target>
        </trans-unit>
        <trans-unit id="6e5e899f8f49475c30613c0d5e03d1268e31be2c" translate="yes" xml:space="preserve">
          <source>Access and Printing of a HASH OF ARRAYS</source>
          <target state="translated">ハッシュオブアレーズのアクセスと印刷</target>
        </trans-unit>
        <trans-unit id="0a3d910a71354dc1a13d0c6e24e7384a561b0108" translate="yes" xml:space="preserve">
          <source>Access and Printing of a HASH OF HASHES</source>
          <target state="translated">ハッシュオブハッシュのアクセスと印刷</target>
        </trans-unit>
        <trans-unit id="7eae78c7526db834fa9958c243fe41a5cb62ea03" translate="yes" xml:space="preserve">
          <source>Access and Printing of an ARRAY OF ARRAYS</source>
          <target state="translated">array of arrraysのアクセスと印刷</target>
        </trans-unit>
        <trans-unit id="5c93728a9e35642c958c51c0f97be500a59df202" translate="yes" xml:space="preserve">
          <source>Access and Printing of an ARRAY OF HASHES</source>
          <target state="translated">アレイオブハッシュのアクセスと印刷</target>
        </trans-unit>
        <trans-unit id="f42ea96011d2554db1787fd6d4c92a4571864cb4" translate="yes" xml:space="preserve">
          <source>Access methods correspond to the underlying C macros for field access, usually with the leading &quot;class indication&quot; prefix removed (Sv, Av, Hv, ...). The leading prefix is only left in cases where its removal would cause a clash in method name. For example, &lt;code&gt;GvREFCNT&lt;/code&gt; stays as-is since its abbreviation would clash with the &quot;superclass&quot; method &lt;code&gt;REFCNT&lt;/code&gt; (corresponding to the C function &lt;code&gt;SvREFCNT&lt;/code&gt; ).</source>
          <target state="translated">アクセスメソッドは、フィールドアクセスの基本的なCマクロに対応し、通常は先頭の「クラス表示」プレフィックスが削除されています（Sv、Av、Hvなど）。先頭のプレフィックスは、その削除によってメソッド名の衝突が発生する場合にのみ残されます。たとえば、 &lt;code&gt;GvREFCNT&lt;/code&gt; は、「スーパークラス」メソッド &lt;code&gt;REFCNT&lt;/code&gt; （C関数 &lt;code&gt;SvREFCNT&lt;/code&gt; に対応）と競合するため、そのままです。</target>
        </trans-unit>
        <trans-unit id="add7e6bb00f6c276fc0702f5d9311fd702f4d0cd" translate="yes" xml:space="preserve">
          <source>Access methods correspond to the underlying C structure field names, with the leading &quot;class indication&quot; prefix (&lt;code&gt;&quot;op_&quot;&lt;/code&gt; ) removed.</source>
          <target state="translated">アクセスメソッドは、基礎となるC構造体フィールド名に対応し、先頭の「クラス表示」プレフィックス（ &lt;code&gt;&quot;op_&quot;&lt;/code&gt; ）が削除されています。</target>
        </trans-unit>
        <trans-unit id="9396a41f14cddbeb41d4b7aa1b84d15e3d72d6c2" translate="yes" xml:space="preserve">
          <source>Access permissions are mapped onto VOS access-control list changes. (VOS)</source>
          <target state="translated">アクセス許可は、VOSのアクセス制御リストの変更にマッピングされます。(VOS)</target>
        </trans-unit>
        <trans-unit id="cf06121dd11c83b8ba81397ecad6cc2b95e65336" translate="yes" xml:space="preserve">
          <source>Access the SV at offset po in the saved current pad in the given context block structure (can be used as an lvalue).</source>
          <target state="translated">指定されたコンテキストブロック構造体に保存されている現在のパッドのオフセット po にある SV にアクセスします(lvalue として使用できます)。</target>
        </trans-unit>
        <trans-unit id="2cb44963f6bed203bb471252102ea353cd9644e0" translate="yes" xml:space="preserve">
          <source>Access the lines of a disk file via a Perl array</source>
          <target state="translated">Perl の配列を使ってディスクファイルの行にアクセスする</target>
        </trans-unit>
        <trans-unit id="dfa61e115e0e8ce23ca07250a4a3499d896cdbc1" translate="yes" xml:space="preserve">
          <source>Access to Unicode character names and named character sequences; also define character names</source>
          <target state="translated">Unicode 文字名と名前付き文字列へのアクセス;文字名の定義も可能</target>
        </trans-unit>
        <trans-unit id="3f2a46103156b0b5a62f34c4352c1666092f35bc" translate="yes" xml:space="preserve">
          <source>Access to lexicals that change over time--like those in the &lt;code&gt;for&lt;/code&gt; loop above, basically aliases to elements from the surrounding lexical scopes-- only works with anonymous subs, not with named subroutines. Generally said, named subroutines do not nest properly and should only be declared in the main package scope.</source>
          <target state="translated">時間の経過とともに変化するレキシカルへのアクセス（上記の &lt;code&gt;for&lt;/code&gt; ループのように、基本的には周囲のレキシカルスコープからの要素へのエイリアス）は、匿名サブルーチンでのみ機能し、名前付きサブルーチンでは機能しません。一般的に言って、名前付きサブルーチンは適切にネストせず、メインパッケージスコープでのみ宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="7bc448fbe13d49ff8ac45ad2ec5aee25fed2364d" translate="yes" xml:space="preserve">
          <source>Accessing .tar.Z files</source>
          <target state="translated">.tar.Zファイルへのアクセス</target>
        </trans-unit>
        <trans-unit id="c5656ffc833d5bac0703673d7cf0135c7d41a0d7" translate="yes" xml:space="preserve">
          <source>Accessing Formatting Internals</source>
          <target state="translated">書式設定の内部へのアクセス</target>
        </trans-unit>
        <trans-unit id="1370d87d951a33ab05354cde2d7a32967a2dbeb2" translate="yes" xml:space="preserve">
          <source>Accessing documentation</source>
          <target state="translated">ドキュメントへのアクセス</target>
        </trans-unit>
        <trans-unit id="e54a40f7d6dbbb802431fdba39190e9b3cbe3ecd" translate="yes" xml:space="preserve">
          <source>Accessing socket options</source>
          <target state="translated">ソケットオプションへのアクセス</target>
        </trans-unit>
        <trans-unit id="ee8cacdba63cbccd984c19db609590e2c60f68e6" translate="yes" xml:space="preserve">
          <source>Accessor functions are available for all existing object hash keys and should be used instead of directly accessing the internal hash keys. The reason for this is that Math::BigInt itself has a pluggable interface which permits it to support different storage methods.</source>
          <target state="translated">アクセサ関数は、既存のすべてのオブジェクトのハッシュキーに対して利用可能であり、内部のハッシュキーに直接アクセスするのではなく、使用すべきです。その理由は、Math::BigInt 自体が異なるストレージメソッドをサポートすることを可能にするプラグ可能なインターフェースを持っているからです。</target>
        </trans-unit>
        <trans-unit id="f5b0e226ed894764db92e76b6c1f1203c0b805bb" translate="yes" xml:space="preserve">
          <source>Accessors</source>
          <target state="translated">Accessors</target>
        </trans-unit>
        <trans-unit id="4bc2c6535b52b04314dc544d8a82eac93deb00cf" translate="yes" xml:space="preserve">
          <source>Accuracy A</source>
          <target state="translated">精度A</target>
        </trans-unit>
        <trans-unit id="938afbd35a75ae9b5871a66f02d0250f1479aaac" translate="yes" xml:space="preserve">
          <source>Accuracy vs. Precision</source>
          <target state="translated">精度と精度</target>
        </trans-unit>
        <trans-unit id="3e804ac1bc11e330fa5eacd1be133ab843f79bee" translate="yes" xml:space="preserve">
          <source>Accustomed &lt;b&gt;awk&lt;/b&gt; users should take special note of the following:</source>
          <target state="translated">慣れている&lt;b&gt;awk&lt;/b&gt;ユーザーは、次のことに特に注意してください。</target>
        </trans-unit>
        <trans-unit id="b0ebcfe59f276beb7f6238d812ac61ce48d3d9c0" translate="yes" xml:space="preserve">
          <source>Acknowledgements</source>
          <target state="translated">Acknowledgements</target>
        </trans-unit>
        <trans-unit id="5d9540ff93a75d47409d6a0aa37491da117ecdf8" translate="yes" xml:space="preserve">
          <source>Acknowledgments</source>
          <target state="translated">Acknowledgments</target>
        </trans-unit>
        <trans-unit id="708327daa641b57f7797d675f864c6465f65ebf5" translate="yes" xml:space="preserve">
          <source>Acorn RISC OS</source>
          <target state="translated">どんぐりRISCOS</target>
        </trans-unit>
        <trans-unit id="8661bdb9b88159cdbca0d1b472228de45e5e9630" translate="yes" xml:space="preserve">
          <source>Actions in current file (keys are line numbers). The values are strings that have the sprintf(3) format &lt;code&gt;(&quot;%s\000%s&quot;, breakcondition, actioncode)&lt;/code&gt; .</source>
          <target state="translated">現在のファイル内のアクション（キーは行番号です）。値は、sprintf（3）形式 &lt;code&gt;(&quot;%s\000%s&quot;, breakcondition, actioncode)&lt;/code&gt; 文字列です。</target>
        </trans-unit>
        <trans-unit id="74456291abea501ae7538be3d3218d24479cf1b8" translate="yes" xml:space="preserve">
          <source>Actions, watch variables, stack traces etc.: on the TODO list.</source>
          <target state="translated">アクション、ウォッチ変数、スタックトレースなど:TODOリストにある。</target>
        </trans-unit>
        <trans-unit id="0e67e479302a0fbdd5f8f5323bb053fb5c4640b0" translate="yes" xml:space="preserve">
          <source>ActiveState's cross-platform (as of October 2004, that's Windows, Linux, and Solaris), multi-language IDE has Perl support, including a regular expression debugger and remote debugging.</source>
          <target state="translated">ActiveState のクロスプラットフォーム (2004 年 10 月現在、Windows、Linux、Solaris)、多言語 IDE は Perl をサポートしており、正規表現デバッガやリモートデバッグなどの機能を備えています。</target>
        </trans-unit>
        <trans-unit id="3c54dc62dfe34bf8e3127c0ce1e38a91208c3d94" translate="yes" xml:space="preserve">
          <source>Acts like &lt;code&gt;FB_PERLQQ&lt;/code&gt; but U+</source>
          <target state="translated">&lt;code&gt;FB_PERLQQ&lt;/code&gt; のように機能しますが、U +</target>
        </trans-unit>
        <trans-unit id="548322587aa8642fc346684844907ab3ffec74e4" translate="yes" xml:space="preserve">
          <source>Actual math is done by using the class defined with &lt;code&gt;with =&amp;gt; Class;&lt;/code&gt; (which defaults to BigInts) to represent the mantissa and exponent.</source>
          <target state="translated">実際の計算は &lt;code&gt;with =&amp;gt; Class;&lt;/code&gt; 定義されたクラスを使用して行われます。（デフォルトはBigInts）、仮数と指数を表します。</target>
        </trans-unit>
        <trans-unit id="defa153aecf01309cb026d878c1991031baa4a07" translate="yes" xml:space="preserve">
          <source>Actually &lt;code&gt;Term::ReadLine&lt;/code&gt; can use some other package, that will support a richer set of commands.</source>
          <target state="translated">実際、 &lt;code&gt;Term::ReadLine&lt;/code&gt; は他のパッケージを使用でき、より豊富なコマンドセットをサポートします。</target>
        </trans-unit>
        <trans-unit id="3803c01d8a976c5bf1f723681cc4bf39bad12043" translate="yes" xml:space="preserve">
          <source>Actually Perl will not</source>
          <target state="translated">実際にはPerlは</target>
        </trans-unit>
        <trans-unit id="795eded018f6ab011486134b18f32e5ab2a7c100" translate="yes" xml:space="preserve">
          <source>Actually performs the output check testing the tests, comparing the data (with &lt;code&gt;eq&lt;/code&gt; ) that we have captured from &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt; against what was declared with &lt;code&gt;test_out&lt;/code&gt; and &lt;code&gt;test_err&lt;/code&gt; .</source>
          <target state="translated">実際にテストをテストする出力チェックを実行し、&lt;a href=&quot;../builder&quot;&gt;Test :: Builder&lt;/a&gt;からキャプチャしたデータ（ &lt;code&gt;eq&lt;/code&gt; を使用）を &lt;code&gt;test_out&lt;/code&gt; および &lt;code&gt;test_err&lt;/code&gt; で宣言されたものと比較します。</target>
        </trans-unit>
        <trans-unit id="5e55c0ee05ca269c1127b8a0393a10c58d229a08" translate="yes" xml:space="preserve">
          <source>Actually, on Mac OS, the &lt;code&gt;getcwd()&lt;/code&gt; , &lt;code&gt;fastgetcwd()&lt;/code&gt; and &lt;code&gt;fastcwd()&lt;/code&gt; functions are all aliases for the &lt;code&gt;cwd()&lt;/code&gt; function, which, on Mac OS, calls `pwd`. Likewise, the &lt;code&gt;abs_path()&lt;/code&gt; function is an alias for &lt;code&gt;fast_abs_path()&lt;/code&gt; .</source>
          <target state="translated">実際には、Mac OSの上、 &lt;code&gt;getcwd()&lt;/code&gt; 、 &lt;code&gt;fastgetcwd()&lt;/code&gt; と &lt;code&gt;fastcwd()&lt;/code&gt; 関数は、のために、すべての別名である &lt;code&gt;cwd()&lt;/code&gt; 、Mac OSでは、 `pwd`は呼び出す関数、。同様に、 &lt;code&gt;abs_path()&lt;/code&gt; 関数は &lt;code&gt;fast_abs_path()&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="db3073222c40a74ba3591ee6ba65b3b3cd91207d" translate="yes" xml:space="preserve">
          <source>Actually, the log output of</source>
          <target state="translated">実際には、ログ出力の</target>
        </trans-unit>
        <trans-unit id="af7244e5a9d564e8f0d5e7e9d10e38f4ccd63f70" translate="yes" xml:space="preserve">
          <source>Actually, they don't. All C operators that Perl copies have the same precedence in Perl as they do in C. The problem is with operators that C doesn't have, especially functions that give a list context to everything on their right, eg. print, chmod, exec, and so on. Such functions are called &quot;list operators&quot; and appear as such in the precedence table in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">実際にはそうではありません。PerlがコピーするすべてのC演算子は、PerlでもCと同じ優先順位を持っています。問題は、Cにない演算子、特に右側のすべてにリストコンテキストを与える関数にあります。print、chmod、execなど。このような関数は「リスト演算子」と呼ばれ、&lt;a href=&quot;perlop&quot;&gt;perlopの&lt;/a&gt;優先順位表にそのように表示されます。</target>
        </trans-unit>
        <trans-unit id="07d8d521acda78914bf8936bc58119c26500077c" translate="yes" xml:space="preserve">
          <source>Actually, this was generated by a particular set of options. You can control the formatting of each column, whether you prefer wide or fat, hex or decimal, leading zeroes or whatever.</source>
          <target state="translated">実は、これは特定のオプションのセットによって生成されたものです。各列の書式設定を制御できます、幅広か太いか、16進数か10進数か、先頭のゼロか何かを好むかどうかなどです。</target>
        </trans-unit>
        <trans-unit id="860c250cdfa0ae37812255641a707082591aa037" translate="yes" xml:space="preserve">
          <source>Adam Kennedy &amp;lt;adamk@cpan.org&amp;gt;</source>
          <target state="translated">Adam Kennedy &amp;lt;adamk@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1a5c118dabaa69a69c89ab79443c5334f9b230a2" translate="yes" xml:space="preserve">
          <source>Adam Kennedy wrote &lt;a href=&quot;http://search.cpan.org/perldoc/YAML::Tiny&quot;&gt;YAML::Tiny&lt;/a&gt; which provided the template and many of the YAML matching regular expressions for this module.</source>
          <target state="translated">Adam Kennedyが作成した&lt;a href=&quot;http://search.cpan.org/perldoc/YAML::Tiny&quot;&gt;YAML :: Tiny&lt;/a&gt;は、このモジュールのテンプレートと多くのYAMLマッチング正規表現を提供しました。</target>
        </trans-unit>
        <trans-unit id="bac28a1890b03ac016be9f9de8d1c17394eeee83" translate="yes" xml:space="preserve">
          <source>Add '#line' declarations to the output based on the line and file locations of the original code.</source>
          <target state="translated">元のコードの行とファイルの位置に基づいて、出力に「#line」宣言を追加します。</target>
        </trans-unit>
        <trans-unit id="c4e7cfdfcf41d796fe22ef22535d39bf89e10e73" translate="yes" xml:space="preserve">
          <source>Add (if argument specified) and retrieve the hyperlinks (as defined by &lt;code&gt;L&amp;lt;&amp;gt;&lt;/code&gt; ) of the current POD. They consist of a 2-item array: line number and &lt;code&gt;Pod::Hyperlink&lt;/code&gt; object.</source>
          <target state="translated">現在のPODの（引数が指定されている場合）追加し、（ &lt;code&gt;L&amp;lt;&amp;gt;&lt;/code&gt; 定義されている）ハイパーリンクを取得します。これらは、2項目の配列（行番号と &lt;code&gt;Pod::Hyperlink&lt;/code&gt; オブジェクト）で構成されています。</target>
        </trans-unit>
        <trans-unit id="593bc3c347e611284226398e8eb5446a2cdf167c" translate="yes" xml:space="preserve">
          <source>Add (if argument specified) and retrieve the index entries (as defined by &lt;code&gt;X&amp;lt;&amp;gt;&lt;/code&gt; ) of the current POD. They consist of plain text, each piece of whitespace is collapsed to a single blank.</source>
          <target state="translated">（引数が指定されている場合）追加し、現在のPODの（ &lt;code&gt;X&amp;lt;&amp;gt;&lt;/code&gt; 定義されている）インデックスエントリを取得します。それらはプレーンテキストで構成され、空白の各部分は1つの空白に折りたたまれます。</target>
        </trans-unit>
        <trans-unit id="7205abf0d37c1a800710d7689075b8b7e0097f10" translate="yes" xml:space="preserve">
          <source>Add (if argument specified) and retrieve the nodes (as defined by &lt;code&gt;=headX&lt;/code&gt; and &lt;code&gt;=item&lt;/code&gt; ) of the current POD. The nodes are returned in the order of their occurrence. They consist of plain text, each piece of whitespace is collapsed to a single blank.</source>
          <target state="translated">（引数が指定されている場合）追加し、現在のPOD のノード（ &lt;code&gt;=headX&lt;/code&gt; および &lt;code&gt;=item&lt;/code&gt; で定義されている）を取得します。ノードは発生順に返されます。それらはプレーンテキストで構成され、空白の各部分は1つの空白に折りたたまれます。</target>
        </trans-unit>
        <trans-unit id="874122d1d027ce488479a1cec7aca152094478e4" translate="yes" xml:space="preserve">
          <source>Add .USESHELL target for dmake.</source>
          <target state="translated">dmakeに.USESHELLターゲットを追加しました。</target>
        </trans-unit>
        <trans-unit id="d7fd295b806f9c0832ab6e0fa24fc58d699dd9d2" translate="yes" xml:space="preserve">
          <source>Add .err files corresponding to each .c file.</source>
          <target state="translated">各.cファイルに対応する.errファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="c4281d681d2b8d4904dd68ad15e4dae704a1bf89" translate="yes" xml:space="preserve">
          <source>Add Collate Transform magic to an SV if it doesn't already have it. If the flags contain SV_GMAGIC, it handles get-magic.</source>
          <target state="translated">Collate Transformマジックがまだない場合、SVにCollate Transformマジックを追加します。フラグに SV_GMAGIC が含まれている場合は、get-magic を処理します。</target>
        </trans-unit>
        <trans-unit id="047c96ad9c325d237f1a6a46bb8af3410dff2f9a" translate="yes" xml:space="preserve">
          <source>Add MAXLINELENGTH for dmake before all the constants are output.</source>
          <target state="translated">すべての定数が出力される前に、dmakeにMAXLINELENGTHを追加します。</target>
        </trans-unit>
        <trans-unit id="94f0a7f38a5195aa6f33946dfa8058f9d2a857a9" translate="yes" xml:space="preserve">
          <source>Add MM_Unix_VERSION.</source>
          <target state="translated">MM_Unix_VERSIONを追加しました。</target>
        </trans-unit>
        <trans-unit id="eca289eb94f4122a1cb7f5b2bdff3d6769040fa8" translate="yes" xml:space="preserve">
          <source>Add MM_Win32_VERSION.</source>
          <target state="translated">MM_Win32_VERSIONを追加しました。</target>
        </trans-unit>
        <trans-unit id="8460c3bd39da428c04164ab6f8557a6dee2cb9dc" translate="yes" xml:space="preserve">
          <source>Add Netware macros initialized above to the Makefile.</source>
          <target state="translated">上記で初期化したNetwareマクロをMakefileに追加します。</target>
        </trans-unit>
        <trans-unit id="b10d0c59d7d5f8f07519cfec5e7d10053270677d" translate="yes" xml:space="preserve">
          <source>Add Netware macros.</source>
          <target state="translated">ネットウェアのマクロを追加します。</target>
        </trans-unit>
        <trans-unit id="7a597e48edd2e108c64afde5e11638f77279428f" translate="yes" xml:space="preserve">
          <source>Add PERL_VMS, MM_VMS_REVISION and MM_VMS_VERSION.</source>
          <target state="translated">PERL_VMS、MM_VMS_REVISION、MM_VMS_VERSIONを追加。</target>
        </trans-unit>
        <trans-unit id="fb8b21b933335774c30773ac556f87eff4a5d7e6" translate="yes" xml:space="preserve">
          <source>Add a TAP::Parser to the multiplexer. &lt;code&gt;$stash&lt;/code&gt; is an optional opaque reference that will be returned from &lt;code&gt;&lt;a href=&quot;../../functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; along with the parser and the next result.</source>
          <target state="translated">マルチプレクサにTAP :: Parserを追加します。 &lt;code&gt;$stash&lt;/code&gt; は、パーサーおよび次の結果とともに &lt;code&gt;&lt;a href=&quot;../../functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; から返されるオプションの不透明な参照です。</target>
        </trans-unit>
        <trans-unit id="9047e2284dc63577e7faf2c89a8809b765789014" translate="yes" xml:space="preserve">
          <source>Add a filter to filter stack for the database, &lt;code&gt;$db&lt;/code&gt; . The three formats vary only in whether they apply to the DBM key, the DBM value or both.</source>
          <target state="translated">フィルターを追加して、データベース &lt;code&gt;$db&lt;/code&gt; スタックをフィルターします。3つの形式は、DBMキー、DBM値、またはその両方に適用されるかどうかのみが異なります。</target>
        </trans-unit>
        <trans-unit id="8ccc393bac52be3d964bfe9d752d1239af48b643" translate="yes" xml:space="preserve">
          <source>Add a global watch-expression. Whenever a watched global changes the debugger will stop and display the old and new values.</source>
          <target state="translated">グローバルウォッチ式を追加します。ウォッチされたグローバルが変更されるたびに、デバッガは停止し、古い値と新しい値を表示します。</target>
        </trans-unit>
        <trans-unit id="53d906e02ac64f82dea46944febfd026f128fa47" translate="yes" xml:space="preserve">
          <source>Add a new item to the cache. Without arguments, this method returns a list of all cache elements.</source>
          <target state="translated">新しいアイテムをキャッシュに追加します。引数を指定しない場合、このメソッドはすべてのキャッシュ要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a7863f951963cec6a01e64fc9352ec7f1fe9c51d" translate="yes" xml:space="preserve">
          <source>Add a node (or a list of nodes) to the document's node list. Note that the order is kept, i.e. start with the first node and end with the last. If no argument is given, the current list of nodes is returned in the same order the nodes have been added. A node can be any scalar, but usually is a pair of node string and unique id for the &lt;code&gt;find_node&lt;/code&gt; method to work correctly.</source>
          <target state="translated">ノード（またはノードのリスト）をドキュメントのノードリストに追加します。順序が維持されることに注意してください。つまり、最初のノードから始まり、最後のノードで終わります。引数を指定しない場合、ノードの現在のリストは、ノードが追加されたのと同じ順序で返されます。ノードは任意のスカラーにすることができますが、通常は、 &lt;code&gt;find_node&lt;/code&gt; メソッドが正しく機能するためのノード文字列と一意のIDのペアです。</target>
        </trans-unit>
        <trans-unit id="db481968c59a6adf87aa66b0a382f55c4cfeb499" translate="yes" xml:space="preserve">
          <source>Add a pretty-printer method to the module</source>
          <target state="translated">モジュールに pretty-printer メソッドを追加する</target>
        </trans-unit>
        <trans-unit id="b48e494719a297be81c5a3a9a30374bc318e93d9" translate="yes" xml:space="preserve">
          <source>Add a signal to a SigSet object.</source>
          <target state="translated">シグナルをSigSetオブジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="70b454679f6454970d507782ded710647bf0cf50" translate="yes" xml:space="preserve">
          <source>Add additional meta tags here, or blocks of inline CSS or JavaScript (wrapped in the appropriate tags).</source>
          <target state="translated">ここに追加のメタタグを追加するか、インラインのCSSやJavaScriptのブロックを追加します(適切なタグでラップされています)。</target>
        </trans-unit>
        <trans-unit id="97aac284feaa85ca8cb91bcc63adaf65d2ec487a" translate="yes" xml:space="preserve">
          <source>Add an action (Perl command) to happen before every debugger prompt. A multi-line command may be entered by backwhacking the newlines.</source>
          <target state="translated">すべてのデバッガプロンプトの前にアクション (Perl コマンド)を追加します。複数行のコマンドは、改行をバックワックすることで入力することができます。</target>
        </trans-unit>
        <trans-unit id="8abdf94b4d37de8dda8c5f5f2c3f6875f8d6cc2b" translate="yes" xml:space="preserve">
          <source>Add an action (debugger command) to happen before every debugger prompt. A multi-line command may be entered, if you can guess how: see above.</source>
          <target state="translated">すべてのデバッガプロンプトの前にアクション (デバッガコマンド)を追加します。複数行のコマンドを入力することができます。</target>
        </trans-unit>
        <trans-unit id="f54d96a7a4eeff516086a73ed0f2969f141d74af" translate="yes" xml:space="preserve">
          <source>Add an index entry (or a list of them) to the document's index list. Note that the order is kept, i.e. start with the first node and end with the last. If no argument is given, the current list of index entries is returned in the same order the entries have been added. An index entry can be any scalar, but usually is a pair of string and unique id.</source>
          <target state="translated">ドキュメントのインデックスリストにインデックス項目(またはそのリスト)を追加します。つまり、最初のノードから始まり、最後のノードで終わるという順序が保たれることに注意してください。引数を指定しなかった場合は、現在のインデックスエントリのリストが、エントリが追加されたのと同じ順番で返されます。インデックスエントリは任意のスカラ値を指定できますが、通常は文字列と一意のidのペアです。</target>
        </trans-unit>
        <trans-unit id="590b7a309d0f6d30b6eb1e4e5ab86b934b9e4cae" translate="yes" xml:space="preserve">
          <source>Add blib/* directories to @INC</source>
          <target state="translated">INCにblib/*ディレクトリを追加</target>
        </trans-unit>
        <trans-unit id="169a520f5b682ca9f865299c14fd2b5069cb099b" translate="yes" xml:space="preserve">
          <source>Add comments to the code explaining what you are testing for.</source>
          <target state="translated">何のためにテストしているのかを説明するために、コードにコメントを追加します。</target>
        </trans-unit>
        <trans-unit id="de73e94e79dc3842d720fa32f69c99c36f54b7ec" translate="yes" xml:space="preserve">
          <source>Add data to hash when needed</source>
          <target state="translated">必要に応じてハッシュにデータを追加</target>
        </trans-unit>
        <trans-unit id="72d8179b381afab6c39843333e65697de042456c" translate="yes" xml:space="preserve">
          <source>Add the following to the end of Mytest.xs:</source>
          <target state="translated">Mytest.xsの最後に以下を追加します。</target>
        </trans-unit>
        <trans-unit id="9f9a937939c6d51d4a74436ba1cd4f9a4a86f81c" translate="yes" xml:space="preserve">
          <source>Add the list of handles to the &lt;code&gt;IO::Select&lt;/code&gt; object. It is these values that will be returned when an event occurs. &lt;code&gt;IO::Select&lt;/code&gt; keeps these values in a cache which is indexed by the &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; of the handle, so if more than one handle with the same &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; is specified then only the last one is cached.</source>
          <target state="translated">ハンドルのリストを &lt;code&gt;IO::Select&lt;/code&gt; オブジェクトに追加します。イベントが発生したときに返されるのはこれらの値です。 &lt;code&gt;IO::Select&lt;/code&gt; は、これらの値を、ハンドルの &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; によってインデックスが付けられたキャッシュに保持するため、同じ &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; を持つ複数のハンドルが指定されている場合、最後のハンドルのみがキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="19f0b9a66897495c95aa10ee537c78ed856fd477" translate="yes" xml:space="preserve">
          <source>Add to your standard heading the following line:</source>
          <target state="translated">標準の見出しに次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="08fc6af7d08fe5cff7ab3490908c8640f386f6f4" translate="yes" xml:space="preserve">
          <source>AddSubtract</source>
          <target state="translated">AddSubtract</target>
        </trans-unit>
        <trans-unit id="0a13f7aff584c83ebd1f9e84aae7b2d05d441e1f" translate="yes" xml:space="preserve">
          <source>Added &lt;code&gt;gztell&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gztell&lt;/code&gt; を追加しました。</target>
        </trans-unit>
        <trans-unit id="1095a22478b4b66c2ae56250f944a8bfc247cdff" translate="yes" xml:space="preserve">
          <source>Added in perl 5.18.0, this flag indicates that a regular expression might perform an operation that would interfere with inplace substitution. For instance it might contain lookbehind, or assign to non-magical variables (such as $REGMARK and $REGERROR) during matching. &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; will skip certain optimisations when this is set.</source>
          <target state="translated">perl 5.18.0で追加されたこのフラグは、正規表現がインプレース置換を妨げる操作を実行する可能性があることを示します。たとえば、照合の際に後読みが含まれていたり、マジック以外の変数（$ REGMARKや$ REGERRORなど）に割り当てられている場合があります。これが設定されている場合、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; は特定の最適化をスキップします。</target>
        </trans-unit>
        <trans-unit id="b1d56423c29f7196bca0ef1618ba2dd3e888861c" translate="yes" xml:space="preserve">
          <source>Added in perl 5.22, this method returns the B::REGEXP associated with the op. While PMOPs do not actually have &lt;code&gt;pmregexp&lt;/code&gt; fields under threaded builds, this method returns the regexp under threads nonetheless, for convenience.</source>
          <target state="translated">perl 5.22で追加されたこのメソッドは、オペレーションに関連付けられたB :: REGEXPを返します。PMOPは、スレッド化されたビルドでは実際には &lt;code&gt;pmregexp&lt;/code&gt; フィールドを持ちませんが、このメソッドは、便宜上、スレッドで正規表現を返します。</target>
        </trans-unit>
        <trans-unit id="2ba88f457f4acc695f5bcc5b53d0aed8e9a2a045" translate="yes" xml:space="preserve">
          <source>Adder</source>
          <target state="translated">Adder</target>
        </trans-unit>
        <trans-unit id="6d548b5512a4a3be1ad17c320cc40231db228d55" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;\W*&lt;/code&gt; at either end to eliminate what is to be ignored, we already have the full pattern:</source>
          <target state="translated">無視されるものを排除するためにどちらかの端に &lt;code&gt;\W*&lt;/code&gt; を追加すると、すでに完全なパターンがあります。</target>
        </trans-unit>
        <trans-unit id="75c6e513c1fb807d0884fb4286f8d06fe79494da" translate="yes" xml:space="preserve">
          <source>Adding a Copyright Notice.</source>
          <target state="translated">著作権表示を追加します。</target>
        </trans-unit>
        <trans-unit id="303fa6167f30afc58e107870ab55bef298f595d5" translate="yes" xml:space="preserve">
          <source>Adding a Perl interpreter to your C program</source>
          <target state="translated">C プログラムに Perl インタプリタを追加する</target>
        </trans-unit>
        <trans-unit id="3494708836bea1e13cb2fb34de6c0bb041485662" translate="yes" xml:space="preserve">
          <source>Adding a colon &quot;:&quot; or empty string &quot;&quot; to a path at</source>
          <target state="translated">でのパスにコロン &quot;:&quot; または空文字列 &quot;&quot; を追加します。</target>
        </trans-unit>
        <trans-unit id="a53e4c0ef202bbd1f27920e920bc75f378ee45c9" translate="yes" xml:space="preserve">
          <source>Adding directories to @INC</source>
          <target state="translated">ディレクトリを@INCに追加する</target>
        </trans-unit>
        <trans-unit id="b8ef134eb6c634200333aedff61c4a77cc1d0006" translate="yes" xml:space="preserve">
          <source>Adding new core tests</source>
          <target state="translated">新しいコアテストの追加</target>
        </trans-unit>
        <trans-unit id="b80f8c556c16b44d25bfbabc5e3f14bb1ae5d40d" translate="yes" xml:space="preserve">
          <source>Adding non-comment stuff after #endif or #else</source>
          <target state="translated">endifや#elseの後にコメント以外のものを追加する</target>
        </trans-unit>
        <trans-unit id="65ffd7a09837afed5bf94ab1e1f31e15cc6844fb" translate="yes" xml:space="preserve">
          <source>Adding, deprecating, or removing core features</source>
          <target state="translated">コア機能の追加、非推奨、または削除</target>
        </trans-unit>
        <trans-unit id="dd881a1fe5170572b503d70ad2a1b006df408296" translate="yes" xml:space="preserve">
          <source>Adding, deprecating, removing, or upgrading core or dual-life modules</source>
          <target state="translated">コアまたはデュアルライフモジュールの追加、非推奨、削除、またはアップグレード</target>
        </trans-unit>
        <trans-unit id="aa19c6fc6789672e5ea06b36cec0c6ea7c8038fa" translate="yes" xml:space="preserve">
          <source>Adding, removing, or significantly changing documentation in the</source>
          <target state="translated">のドキュメントの追加、削除、または大幅な変更。</target>
        </trans-unit>
        <trans-unit id="1d418e4d86845beab5da12aea1ba94a51ff3bc29" translate="yes" xml:space="preserve">
          <source>Addition of &lt;code&gt;gzseek&lt;/code&gt; to provide a restricted &lt;code&gt;&lt;a href=&quot;../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">制限された &lt;code&gt;&lt;a href=&quot;../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; インターフェイスを提供するための &lt;code&gt;gzseek&lt;/code&gt; の追加。</target>
        </trans-unit>
        <trans-unit id="21cbac17404588ed0f4a75e1ba94b2723810229c" translate="yes" xml:space="preserve">
          <source>Additional allowable exit values can be supplied as an optional first argument to autodying &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">追加の許容終了値は、自動染色 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; オプションの最初の引数として指定できます。</target>
        </trans-unit>
        <trans-unit id="95fcc23a5989c1d4707ef062b9c48e30e43e8eea" translate="yes" xml:space="preserve">
          <source>Additional arbitrary HTML tags for the header of the document. The default value is just a content type header tag:</source>
          <target state="translated">文書のヘッダのための追加の任意の HTML タグ。デフォルト値はコンテンツタイプのヘッダータグだけです。</target>
        </trans-unit>
        <trans-unit id="93ccf6b3b0fed7eda8c1cf492ae71f85cc3c2416" translate="yes" xml:space="preserve">
          <source>Additional behaviors can be added to your &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; method by overriding &lt;code&gt;import_extra()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;import_extra()&lt;/code&gt; をオーバーライドすることにより、追加の動作を &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; メソッドに追加できます。</target>
        </trans-unit>
        <trans-unit id="b69974bf6d56e57936d88d6a5f708b80a863eea6" translate="yes" xml:space="preserve">
          <source>Additional code by Yves Orton.</source>
          <target state="translated">イヴ・オルトンの追加コード</target>
        </trans-unit>
        <trans-unit id="07c4a7582a6b085c26b5bc77e2d781374f6214f8" translate="yes" xml:space="preserve">
          <source>Additional context-dependent optimizations are performed at this time. Since at this moment the compile tree contains back-references (via &quot;thread&quot; pointers), nodes cannot be free()d now. To allow optimized-away nodes at this stage, such nodes are null()ified instead of free()ing (i.e. their type is changed to OP_NULL).</source>
          <target state="translated">この時点で、追加のコンテキスト依存の最適化が実行されます。この時点では、コンパイルツリーには (「スレッド」ポインタを介した)後方参照が含まれているため、ノードを free()d することはできません。この段階で最適化された離脱ノードを許可するために、そのようなノードは free()ing の代わりに null()ified されます (つまり、ノードの型は OP_NULL に変更されます)。</target>
        </trans-unit>
        <trans-unit id="31fd46d11c3bbe73ad92eebf33f7553ded695d16" translate="yes" xml:space="preserve">
          <source>Additional contributions by The Perl 5 Porters.</source>
          <target state="translated">The Perl 5 Portersによる追加の貢献。</target>
        </trans-unit>
        <trans-unit id="65d277fbf8e91201355e93559429e2b46f057ea7" translate="yes" xml:space="preserve">
          <source>Additional flags to specify to C preprocessor when scanning header for function declarations. Writes these options in the generated</source>
          <target state="translated">関数宣言のためにヘッダをスキャンする際に、Cプリプロセッサに指定する追加のフラグ。これらのオプションを生成された</target>
        </trans-unit>
        <trans-unit id="8fab7fe5b84df4c38b3df13c3aab585166d6f79c" translate="yes" xml:space="preserve">
          <source>Additional flags:</source>
          <target state="translated">旗を追加しました。</target>
        </trans-unit>
        <trans-unit id="224b8dd98beb03b9721f84cf4768d8e500e8a1d7" translate="yes" xml:space="preserve">
          <source>Additional functions not exported by default:</source>
          <target state="translated">デフォルトではエクスポートされない追加機能</target>
        </trans-unit>
        <trans-unit id="c00e0d54188b0a52cda35b7ee1e5c81c6e17488d" translate="yes" xml:space="preserve">
          <source>Additional linker arguments to be considered.</source>
          <target state="translated">考慮すべき追加のリンカー引数。</target>
        </trans-unit>
        <trans-unit id="c75d2357555d61500cb561ea756aab492ce04979" translate="yes" xml:space="preserve">
          <source>Additional lowercase attributes</source>
          <target state="translated">小文字属性の追加</target>
        </trans-unit>
        <trans-unit id="62669130426d053245d54e15329b7bbb244bddc3" translate="yes" xml:space="preserve">
          <source>Additional methods that are provided are:</source>
          <target state="translated">提供される追加のメソッドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c9f0c499a9f295c841e5042dc5fcae68b2718736" translate="yes" xml:space="preserve">
          <source>Additional modules:</source>
          <target state="translated">モジュールを追加しました。</target>
        </trans-unit>
        <trans-unit id="5cb0cfaa4bee3834bdbab722883416b06bf0e1b8" translate="yes" xml:space="preserve">
          <source>Additional option files may be specified with the &lt;code&gt;--rc&lt;/code&gt; option. Default option file processing is disabled by the &lt;code&gt;--norc&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--rc&lt;/code&gt; オプションで追加のオプションファイルを指定できます。 &lt;code&gt;--norc&lt;/code&gt; オプションにより、デフォルトのオプションファイル処理は無効になります。</target>
        </trans-unit>
        <trans-unit id="a9910904f4a1f818c8f8c0fa7217add5b79e193c" translate="yes" xml:space="preserve">
          <source>Additional supported functions</source>
          <target state="translated">追加サポート機能</target>
        </trans-unit>
        <trans-unit id="62f57b1281983cef6c2785663a1426c055f3a73b" translate="yes" xml:space="preserve">
          <source>Additional thanks to: Edward Avis / Mattia Barbon / Tom Christiansen / Gerrit Haase / Gurusamy Sarathy / Jarkko Hietaniemi (again) / Nikola Knezevic / John Kominetz / Nick Ing-Simmons / Tassilo von Parseval / H. Dieter Pearcey / Slaven Rezic / Eric Roode / Peter Scott / Peter Somu / Autrijus Tang (again) / Tels (again) / Juerd Waalboer / Todd Rinaldo</source>
          <target state="translated">追加の感謝の意を表します。Edward Avis/Mattia Barbon/Tom Christiansen/Gerrit Haase/Gurusamy Sarathy/Jarkko Hietaniemi (再び)/Nikola Knezevic/John Kominetz/Nick Ing-Simmons/Tassilo von Parseval/H.Dieter Pearcey/Slaven Rezic/Eric Roode/Peter Scott/Peter Somu/Autrijus Tang (再び)/Tels (再び)/Juerd Waalboer/Todd Rinaldo</target>
        </trans-unit>
        <trans-unit id="0faa935c5b1efc0ef2a1c52135455cd6a03aa947" translate="yes" xml:space="preserve">
          <source>Additionally &lt;a href=&quot;#weaken&quot;&gt;weaken&lt;/a&gt; and &lt;a href=&quot;#isweak&quot;&gt;isweak&lt;/a&gt; which are</source>
          <target state="translated">さらに、&lt;a href=&quot;#weaken&quot;&gt;弱く&lt;/a&gt;、&lt;a href=&quot;#isweak&quot;&gt;弱い&lt;/a&gt;です</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
