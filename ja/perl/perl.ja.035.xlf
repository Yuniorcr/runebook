<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="fd4f487a995fc117ee3f859541e8cb6d7b1f0e03" translate="yes" xml:space="preserve">
          <source>Push an SV onto the end of the array, creating the array if necessary. A small internal helper function to remove a commonly duplicated idiom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b343c728ee2d1e80e5d3bfd57c4ca6151b8a3b56" translate="yes" xml:space="preserve">
          <source>Push an SV onto the stack and mortalizes the SV. The stack must have room for this element. Does not use &lt;code&gt;TARG&lt;/code&gt; . See also &lt;code&gt;PUSHs&lt;/code&gt; and &lt;code&gt;mXPUSHs&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5312b573b0539c30e0048cb9b278d19e1907b13" translate="yes" xml:space="preserve">
          <source>Push an SV onto the stack, extending the stack if necessary and mortalizes the SV. Does not use &lt;code&gt;TARG&lt;/code&gt; . See also &lt;code&gt;XPUSHs&lt;/code&gt; and &lt;code&gt;mPUSHs&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bca75cd1625b95babebf1b4bb8d0ca93544cbe6" translate="yes" xml:space="preserve">
          <source>Push an SV onto the stack, extending the stack if necessary. Does not handle 'set' magic. Does not use &lt;code&gt;TARG&lt;/code&gt; . See also &lt;code&gt;XPUSHmortal&lt;/code&gt; , &lt;code&gt;PUSHs&lt;/code&gt; and &lt;code&gt;PUSHmortal&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824e75a21802eb656ab26e370eb8bc67c5ffb828" translate="yes" xml:space="preserve">
          <source>Push an SV onto the stack. The stack must have room for this element. Does not handle 'set' magic. Does not use &lt;code&gt;TARG&lt;/code&gt; . See also &lt;code&gt;PUSHmortal&lt;/code&gt; , &lt;code&gt;XPUSHs&lt;/code&gt; and &lt;code&gt;XPUSHmortal&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6dc36faa3e9d71d279164e8a1bebbda0173b52" translate="yes" xml:space="preserve">
          <source>Push an integer onto the stack, extending the stack if necessary. Does not use &lt;code&gt;TARG&lt;/code&gt; . See also &lt;code&gt;XPUSHi&lt;/code&gt; , &lt;code&gt;mPUSHi&lt;/code&gt; and &lt;code&gt;PUSHi&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88647ad486844ab79cd57c5f883ba3b63d0d33c3" translate="yes" xml:space="preserve">
          <source>Push an integer onto the stack, extending the stack if necessary. Handles 'set' magic. Uses &lt;code&gt;TARG&lt;/code&gt; , so &lt;code&gt;dTARGET&lt;/code&gt; or &lt;code&gt;dXSTARG&lt;/code&gt; should be called to declare it. Do not call multiple &lt;code&gt;TARG&lt;/code&gt; -oriented macros to return lists from XSUB's - see &lt;code&gt;mXPUSHi&lt;/code&gt; instead. See also &lt;code&gt;PUSHi&lt;/code&gt; and &lt;code&gt;mPUSHi&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68712d908f28865c0c0fdea7d6b33cd088c74252" translate="yes" xml:space="preserve">
          <source>Push an integer onto the stack. The stack must have room for this element. Does not use &lt;code&gt;TARG&lt;/code&gt; . See also &lt;code&gt;PUSHi&lt;/code&gt; , &lt;code&gt;mXPUSHi&lt;/code&gt; and &lt;code&gt;XPUSHi&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa57788c5592676cc0034ebc6edf40f41590038" translate="yes" xml:space="preserve">
          <source>Push an integer onto the stack. The stack must have room for this element. Handles 'set' magic. Uses &lt;code&gt;TARG&lt;/code&gt; , so &lt;code&gt;dTARGET&lt;/code&gt; or &lt;code&gt;dXSTARG&lt;/code&gt; should be called to declare it. Do not call multiple &lt;code&gt;TARG&lt;/code&gt; -oriented macros to return lists from XSUB's - see &lt;code&gt;mPUSHi&lt;/code&gt; instead. See also &lt;code&gt;XPUSHi&lt;/code&gt; and &lt;code&gt;mXPUSHi&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8504827aba00612364edada9d7d5d6f00e686e9f" translate="yes" xml:space="preserve">
          <source>Push an unsigned integer onto the stack, extending the stack if necessary. Does not use &lt;code&gt;TARG&lt;/code&gt; . See also &lt;code&gt;XPUSHu&lt;/code&gt; , &lt;code&gt;mPUSHu&lt;/code&gt; and &lt;code&gt;PUSHu&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a877c4f095d8e369d65c6c9f26769538191ceb6a" translate="yes" xml:space="preserve">
          <source>Push an unsigned integer onto the stack, extending the stack if necessary. Handles 'set' magic. Uses &lt;code&gt;TARG&lt;/code&gt; , so &lt;code&gt;dTARGET&lt;/code&gt; or &lt;code&gt;dXSTARG&lt;/code&gt; should be called to declare it. Do not call multiple &lt;code&gt;TARG&lt;/code&gt; -oriented macros to return lists from XSUB's - see &lt;code&gt;mXPUSHu&lt;/code&gt; instead. See also &lt;code&gt;PUSHu&lt;/code&gt; and &lt;code&gt;mPUSHu&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5198e2166eb928f9d3653b92f6feb785e942a5" translate="yes" xml:space="preserve">
          <source>Push an unsigned integer onto the stack. The stack must have room for this element. Does not use &lt;code&gt;TARG&lt;/code&gt; . See also &lt;code&gt;PUSHu&lt;/code&gt; , &lt;code&gt;mXPUSHu&lt;/code&gt; and &lt;code&gt;XPUSHu&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613f8f689dc3e62438ff571be557fb9cb05e44a4" translate="yes" xml:space="preserve">
          <source>Push an unsigned integer onto the stack. The stack must have room for this element. Handles 'set' magic. Uses &lt;code&gt;TARG&lt;/code&gt; , so &lt;code&gt;dTARGET&lt;/code&gt; or &lt;code&gt;dXSTARG&lt;/code&gt; should be called to declare it. Do not call multiple &lt;code&gt;TARG&lt;/code&gt; -oriented macros to return lists from XSUB's - see &lt;code&gt;mPUSHu&lt;/code&gt; instead. See also &lt;code&gt;XPUSHu&lt;/code&gt; and &lt;code&gt;mXPUSHu&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18581b2c0e575f64a8c4dfe4233bd04ffb3c85d9" translate="yes" xml:space="preserve">
          <source>Push the current state of the stack pointer onto the mark stack. This is so that when we've finished adding items to the argument stack, Perl knows how many things we've added recently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9eb04bba7369fac67bb272487aea83de30e396" translate="yes" xml:space="preserve">
          <source>Pushes a character with the given ordinal value back onto the given handle's input stream. Only one character of pushback per handle is guaranteed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a106600342c596f57fb0e1a9b6c18c52f7dcd966" translate="yes" xml:space="preserve">
          <source>Pushes an SV onto the end of the array. The array will grow automatically to accommodate the addition. This takes ownership of one reference count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccf168fe998779643f2545e93fe3eb3325a7626" translate="yes" xml:space="preserve">
          <source>Pushes the elements of &lt;code&gt;list&lt;/code&gt; to the end of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a67421c65ebcbec6ecf93fc8121206f9a6219cd" translate="yes" xml:space="preserve">
          <source>Pushes the elements of &lt;code&gt;list&lt;/code&gt; to the start of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434a3543d1b51e838730a1e98071665a5312262b" translate="yes" xml:space="preserve">
          <source>Pushing multiple values in a hash option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd768e4fe7bd6bb51e495079370749b0bfeabc8" translate="yes" xml:space="preserve">
          <source>Put</source>
          <target state="translated">Put</target>
        </trans-unit>
        <trans-unit id="d1bc442ba313a7f986c75035df11c1f76cbd7483" translate="yes" xml:space="preserve">
          <source>Put 'hints' in the .ph files which will help in locating problems with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69babd8dd4a14457309b07c58ef1458d1787046" translate="yes" xml:space="preserve">
          <source>Put &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale;&lt;/code&gt; in your script. The \w character class is taken from the current locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47739ad806e984d84c33acd817d5e256d5c4587a" translate="yes" xml:space="preserve">
          <source>Put Pod::Simple into trace/debug mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493df581b024ed00be76e886a1aae031377cfaee" translate="yes" xml:space="preserve">
          <source>Put a file on the remote server. &lt;code&gt;LOCAL_FILE&lt;/code&gt; may be a name or a filehandle. If &lt;code&gt;LOCAL_FILE&lt;/code&gt; is a filehandle then &lt;code&gt;REMOTE_FILE&lt;/code&gt; must be specified. If &lt;code&gt;REMOTE_FILE&lt;/code&gt; is not specified then the file will be stored in the current directory with the same leafname as &lt;code&gt;LOCAL_FILE&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd4b6437b681f5228767353df5b194b9775df90" translate="yes" xml:space="preserve">
          <source>Put an asterisk &lt;code&gt;*&lt;/code&gt; before the &lt;code&gt;v&lt;/code&gt; to override the string to use to separate the numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14f55f6fdcb5da01d44dd7ed243c1db7e277d01" translate="yes" xml:space="preserve">
          <source>Put site-specific architecture-dependent files into one of the following directories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa7153c9aa3d5d40471d6b1b2c0b52e0c1b025d" translate="yes" xml:space="preserve">
          <source>Put that in your</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d814d0c7034933ffea79f71cd116536449e7fb" translate="yes" xml:space="preserve">
          <source>Put the resulting &lt;b&gt;.ph&lt;/b&gt; files beneath &lt;b&gt;destination_dir&lt;/b&gt;, instead of beneath the default Perl library location (&lt;code&gt;$Config{'installsitearch'}&lt;/code&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e6c0e0dc40286e99d3fc85cf70570e01de66ee" translate="yes" xml:space="preserve">
          <source>Put this code in a separate file to be run in more than one process. Call the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ff5dc8b3b8ee10ac653e6d6e0aa7e9f1322412" translate="yes" xml:space="preserve">
          <source>Put this code in a separate file to be run in more than one process. Call this file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2c16ad1dd4ceb42756fb3731b8a42274bc8054" translate="yes" xml:space="preserve">
          <source>Put this in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3984468ef6d986678e93740602be8433d764ca26" translate="yes" xml:space="preserve">
          <source>Put together, a grammar to match a basic identifier becomes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81b3040dcaf2eeda56068119211b063246e32f5" translate="yes" xml:space="preserve">
          <source>Puts a C function into the chain of check functions for a specified op type. This is the preferred way to manipulate the &lt;a href=&quot;#PL_check&quot;&gt;PL_check&lt;/a&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77f4ddf35623d313f60eab18e7956a5f55b5242" translate="yes" xml:space="preserve">
          <source>Puts the targets necessary for 'make dist' together into one make fragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d94544ade0f2950579f15818313dfb90a811531" translate="yes" xml:space="preserve">
          <source>Putting a C value on Perl stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c0fee583fe73ce38904eadb090b95782b9afc1" translate="yes" xml:space="preserve">
          <source>Putting a fancy &lt;b&gt;data structure&lt;/b&gt; into linear order so that it can be stored as a &lt;b&gt;string&lt;/b&gt; in a disk file or database, or sent through a &lt;b&gt;pipe&lt;/b&gt;. Also called marshalling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebbf4b51e58300b77d8060b5d5709fd9450e224" translate="yes" xml:space="preserve">
          <source>Putting all the parts together, we get a regexp that matches numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9848562f434be6cca42f48ae11db504a53636d" translate="yes" xml:space="preserve">
          <source>Putting it all together, you have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ce8d29cdd017042415616b75b34f884b476435" translate="yes" xml:space="preserve">
          <source>Python 2.3 MRO related links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3156e00d3c2588c639e0d3cf6821258b05761c7" translate="yes" xml:space="preserve">
          <source>Q</source>
          <target state="translated">Q</target>
        </trans-unit>
        <trans-unit id="b7b445f989c7a304e6e26500eee0e35e636e184c" translate="yes" xml:space="preserve">
          <source>Q and A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908d9b09fc523e58d49da45f3501c5e3ad0a3b94" translate="yes" xml:space="preserve">
          <source>Q and A (or FAQ)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1785f5e41e8062b156fa579adb0413cfb85e23" translate="yes" xml:space="preserve">
          <source>QNX auxiliary files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf27a6f1f7cbc27550b7c2ba303e89cb36e8e14" translate="yes" xml:space="preserve">
          <source>QNX specific subclass of ExtUtils::MM_Unix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d507c7120c3d5b527b26a3fb978cdf1ac44faf" translate="yes" xml:space="preserve">
          <source>QUANTIFIERS</source>
          <target state="translated">QUANTIFIERS</target>
        </trans-unit>
        <trans-unit id="9decc00e3d065b650a870ccca4c5e0654258f0b8" translate="yes" xml:space="preserve">
          <source>QUEUE CREATION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41017e2c9792619e0fd0ffe76075b745bc93b06d" translate="yes" xml:space="preserve">
          <source>QUICK CHECKLIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a500376a8fe35f15c46f906227d1a82650ca2b3c" translate="yes" xml:space="preserve">
          <source>QUICK OVERVIEW</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aad6cae9d9ca0517324f333e5937179f5104dbc" translate="yes" xml:space="preserve">
          <source>QUICK START GUIDE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4dc74dd982660ab83c02728a67c70b0e21df160" translate="yes" xml:space="preserve">
          <source>Qualification applies only to symbol names (strings). References are left unchanged under the assumption that they are glob references, which are qualified by their nature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45166c7ba50383e7b4bfb3006de5b43bce7b9e2" translate="yes" xml:space="preserve">
          <source>Quantifier follows nothing in regex; marked by &amp;lt;-- HERE in m/(?i)+ &amp;lt;-- HERE /</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6078532ab203b30b0c8e32bb799fd87d65f55236" translate="yes" xml:space="preserve">
          <source>Quantifiers</source>
          <target state="translated">Quantifiers</target>
        </trans-unit>
        <trans-unit id="829f1fa0b9ca1bfbdf96c60ba3b43a6dd4a86313" translate="yes" xml:space="preserve">
          <source>Quantifiers are greedy by default and match the &lt;b&gt;longest&lt;/b&gt; leftmost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e4a0b3ec967fedffed9c96cbabb3d643636072" translate="yes" xml:space="preserve">
          <source>Quantifiers can be used to specify how many of the previous thing you want to match on, where &quot;thing&quot; means either a literal character, one of the metacharacters listed above, or a group of characters or metacharacters in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf8e30d84d95e2be133e931e5890cc3b6507fac" translate="yes" xml:space="preserve">
          <source>Queries or adds to the internal table of already encountered references. You must use &lt;code&gt;Reset&lt;/code&gt; to explicitly clear the table if needed. Such references are not dumped; instead, their names are inserted wherever they are encountered subsequently. This is useful especially for properly dumping subroutine references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8acae1546ffca641266d1ea873cf1eb072da5bd" translate="yes" xml:space="preserve">
          <source>Queries or replaces the internal array of user supplied names for the values that will be dumped. When called without arguments, returns the names. When called with an array of replacement names, returns the object itself. If the number of replacement names exceeds the number of values to be named, the excess names will not be used. If the number of replacement names falls short of the number of values to be named, the list of replacement names will be exhausted and remaining values will not be renamed. When called with any other type of argument, dies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83faf5aa5b94da12a4877cf033f633d81c2d8f0f" translate="yes" xml:space="preserve">
          <source>Queries or replaces the internal array of values that will be dumped. When called without arguments, returns the values as a list. When called with a reference to an array of replacement values, returns the object itself. When called with any other type of argument, dies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5bf8c7bc573767cc25100f7b66c5ffcfebc291" translate="yes" xml:space="preserve">
          <source>Queries the option named OPTNAME associated with SOCKET at a given LEVEL. Options may exist at multiple protocol levels depending on the socket type, but at least the uppermost socket level SOL_SOCKET (defined in the &lt;code&gt;Socket&lt;/code&gt; module) will exist. To query options at another level the protocol number of the appropriate protocol controlling the option should be supplied. For example, to indicate that an option is to be interpreted by the TCP protocol, LEVEL should be set to the protocol number of TCP, which you can get using &lt;code&gt;&lt;a href=&quot;functions/getprotobyname&quot;&gt;getprotobyname&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54784f5a723388f9bef25d885ee8470caa2dcfd6" translate="yes" xml:space="preserve">
          <source>Queries the option named OPTNAME associated with SOCKET at a given LEVEL. Options may exist at multiple protocol levels depending on the socket type, but at least the uppermost socket level SOL_SOCKET (defined in the &lt;code&gt;Socket&lt;/code&gt; module) will exist. To query options at another level the protocol number of the appropriate protocol controlling the option should be supplied. For example, to indicate that an option is to be interpreted by the TCP protocol, LEVEL should be set to the protocol number of TCP, which you can get using &lt;code&gt;&lt;a href=&quot;getprotobyname&quot;&gt;getprotobyname&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ce437d64f5ded5d2e1a936b1bee65897d9e9e3" translate="yes" xml:space="preserve">
          <source>Query locale information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff0621a85b75d3f9b0bce73acd70ea9b7db4b3c" translate="yes" xml:space="preserve">
          <source>Query, download and build perl modules from CPAN sites</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c87d5f3328b7d4c3f7fd3f209b9b98dd39e0104" translate="yes" xml:space="preserve">
          <source>Querying the layers of filehandles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab73d69ba359e14fb19fa0dc0701d52b9c7d7ee1" translate="yes" xml:space="preserve">
          <source>Questions With Answers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d4d2bb4bfe6fa0f2303afcf56e54256bae7acb" translate="yes" xml:space="preserve">
          <source>Questions or discussion about POD and Pod::Simple should be sent to the pod-people@perl.org mail list. Send an empty email to pod-people-subscribe@perl.org to subscribe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbcc3a96b399b2a6b4ea7037ef3c410c2e98989" translate="yes" xml:space="preserve">
          <source>Queues created by &lt;a href=&quot;queue&quot;&gt;Thread::Queue&lt;/a&gt; can be used in both threaded and non-threaded applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82dcd86a2d0fdd9674d5180af12a2c81e22b15c2" translate="yes" xml:space="preserve">
          <source>Queues: Passing Data Around</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911283fe22324c9b4dbb9d98fa5ce51d04af8b5f" translate="yes" xml:space="preserve">
          <source>Quick Check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2b679e22dfa3101d1ba7bf2ec43c351c8ef687" translate="yes" xml:space="preserve">
          <source>Quick Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d8515e5495635935ae41fcaff947601379b8c7" translate="yes" xml:space="preserve">
          <source>Quick commands for handling typemaps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490efc6e3853d704426e2197c066d80aa96aeb58" translate="yes" xml:space="preserve">
          <source>Quick cycle of developers release may break the OS/2 build time to time, looking into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7994ebd90d60dd15b911eb3a9daf502e60683411" translate="yes" xml:space="preserve">
          <source>Quit and close the connection to the remote POP3 server. Any messages marked as deleted will be deleted from the remote mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ba20e3026462af76a067e043daf2ecc8d444ff" translate="yes" xml:space="preserve">
          <source>Quit the remote server and close the socket connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1be35f7e41fc0e73dfaa10a8ca1c7fe5bd8ed0" translate="yes" xml:space="preserve">
          <source>Quit. (&quot;quit&quot; doesn't work for this, unless you've made an alias) This is the only supported way to exit the debugger, though typing &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; twice might work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f4964b91e9849afca9359e00981ce1ba0c07f9" translate="yes" xml:space="preserve">
          <source>Quotations are taken from writings of J.R.R. Tolkien pertaining to his Legendarium, almost always from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a0090e1373d2c389fb1b8448a5ea356c875f06" translate="yes" xml:space="preserve">
          <source>Quote and Quote-like Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97af8d62d18823e045a526635c4c59c15b6c1c41" translate="yes" xml:space="preserve">
          <source>Quote, don't escape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d0f80e917312a7bee3d680b3a00ddf182f6146" translate="yes" xml:space="preserve">
          <source>Quote-Like Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a1279b6935c9782ab3606a3d82d28493446688" translate="yes" xml:space="preserve">
          <source>Quoted-Printable encoding and decoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e26eec4abf3af9d0fe512a58ece61ef23ba7c0" translate="yes" xml:space="preserve">
          <source>Quotes an item to become safe against spaces in shell interpolation. An item is enclosed in double quotes if:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b284dd175a44a8a9dddaf84217e26829062b72d" translate="yes" xml:space="preserve">
          <source>Quotes macro literal value suitable for being used on a command line so that when expanded by make, will be received by command as given to this method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8a67ea92998f4331c08d3d68c3f23ba931af7d" translate="yes" xml:space="preserve">
          <source>Quoting characters that have the other 3 properties is done to enhance the readability of the regular expression and not because they actually need to be quoted for regular expression purposes (characters with the White_Space property are likely to be indistinguishable on the page or screen from those with the Pattern_White_Space property; and the other two properties contain non-printing characters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f374f604fe8ce3a7bacd1735dcfc8594696a7c1" translate="yes" xml:space="preserve">
          <source>Quoting metacharacters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="45297e8f2e4a57d399e54f4d5e56a33edf6b4546" translate="yes" xml:space="preserve">
          <source>RADIAL COORDINATE CONVERSIONS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e27356ef629022720d868ab0c0e3394775b6c1" translate="yes" xml:space="preserve">
          <source>README</source>
          <target state="translated">README</target>
        </trans-unit>
        <trans-unit id="26170ec3dc64f8b7fd572cb5f04130dc738bac40" translate="yes" xml:space="preserve">
          <source>README and other Additional Files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533ffdbfecaff72ef5b73243babdff48010c62e3" translate="yes" xml:space="preserve">
          <source>README, INSTALL, release notes, changelogs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470d8527a3d01cd4a3fa0aa7c03769a6948b44d1" translate="yes" xml:space="preserve">
          <source>README.amiga</source>
          <target state="translated">README.amiga</target>
        </trans-unit>
        <trans-unit id="bd5f281c6e53763c512b64a62b1dbc5e3498f53d" translate="yes" xml:space="preserve">
          <source>README.cygwin</source>
          <target state="translated">README.cygwin</target>
        </trans-unit>
        <trans-unit id="60cd92e33be1c1434cc8683be9e91fdb03ffbe8d" translate="yes" xml:space="preserve">
          <source>README.dos</source>
          <target state="translated">README.dos</target>
        </trans-unit>
        <trans-unit id="922bfc9ad896762e1f22202551026c11023937f3" translate="yes" xml:space="preserve">
          <source>README.os2</source>
          <target state="translated">README.os2</target>
        </trans-unit>
        <trans-unit id="b0c3afe965a614f26f700a578dd90289b911ca42" translate="yes" xml:space="preserve">
          <source>README.perl</source>
          <target state="translated">README.perl</target>
        </trans-unit>
        <trans-unit id="31876ad7c4fa164eaa1a9292560713f19237c9c2" translate="yes" xml:space="preserve">
          <source>README.plan9</source>
          <target state="translated">README.plan9</target>
        </trans-unit>
        <trans-unit id="6b3e64ef3c5318ac15169a07784569d9f4e12561" translate="yes" xml:space="preserve">
          <source>README.vms</source>
          <target state="translated">README.vms</target>
        </trans-unit>
        <trans-unit id="db69da694a77bb707c14a29a590fb116537bf27c" translate="yes" xml:space="preserve">
          <source>README.vos</source>
          <target state="translated">README.vos</target>
        </trans-unit>
        <trans-unit id="41c68db7205269a6d1d13c4ce257a527520c44f3" translate="yes" xml:space="preserve">
          <source>README_vms</source>
          <target state="translated">README_vms</target>
        </trans-unit>
        <trans-unit id="eb1962cbc26755fee15d4db8b14b86dda178492f" translate="yes" xml:space="preserve">
          <source>READONLY LEXICONS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9227274777f845910cc80f878804555a988622c1" translate="yes" xml:space="preserve">
          <source>REALLY</source>
          <target state="translated">REALLY</target>
        </trans-unit>
        <trans-unit id="8447f2362022482a81d1cf6ed91fac3a8d3dd564" translate="yes" xml:space="preserve">
          <source>RECOMMENDED SUBROUTINE/METHOD OVERRIDES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4730753022e62db3135b00e0df88859d25187e8" translate="yes" xml:space="preserve">
          <source>REFERENCES</source>
          <target state="translated">REFERENCES</target>
        </trans-unit>
        <trans-unit id="992d441e1d5a432b866f670478b3060e05a3c28e" translate="yes" xml:space="preserve">
          <source>REGEXP Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14e18379b628e870f6f6fd151b87b951e254cfd" translate="yes" xml:space="preserve">
          <source>REGISTRY</source>
          <target state="translated">REGISTRY</target>
        </trans-unit>
        <trans-unit id="9d38a5cfeee787c359c7fd682499c0d9ef995e51" translate="yes" xml:space="preserve">
          <source>REGULAR EXPRESSION DIFFERENCES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e59f903969a9f7836cb496c8ed4243a5e1f9f3b" translate="yes" xml:space="preserve">
          <source>REGULAR EXPRESSIONS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c29e02d995cad9b8885a946bb3c7595f553f5cb" translate="yes" xml:space="preserve">
          <source>RELEASE CONSIDERATIONS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd03acb9188bb0e265cc49975a06589f80338e36" translate="yes" xml:space="preserve">
          <source>RELIC SUPPORT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da675baaaaccfefe8840cfac4dbaa63fca633fd5" translate="yes" xml:space="preserve">
          <source>REPLACEMENT</source>
          <target state="translated">REPLACEMENT</target>
        </trans-unit>
        <trans-unit id="7a45c85de3ea0dcc5d2b7a5ee8dde0f92121b9d1" translate="yes" xml:space="preserve">
          <source>REPLACEMENTLIST</source>
          <target state="translated">REPLACEMENTLIST</target>
        </trans-unit>
        <trans-unit id="ba425109137803e3e683ec8acbacf662eb955f0b" translate="yes" xml:space="preserve">
          <source>REPLACING</source>
          <target state="translated">REPLACING</target>
        </trans-unit>
        <trans-unit id="fa95d2a9ab9e8fba299d2cca664ea01713832e35" translate="yes" xml:space="preserve">
          <source>REPORTING BUGS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24635e62e8ddd92f4cc5da2504b648ac5429a3fd" translate="yes" xml:space="preserve">
          <source>REPOSITORY</source>
          <target state="translated">REPOSITORY</target>
        </trans-unit>
        <trans-unit id="654940d635d2437b881bdb8207c502ab1ddc4cc7" translate="yes" xml:space="preserve">
          <source>REQUIRED MODULES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f121318efb144a8b6001419391a5b20c6c3f189" translate="yes" xml:space="preserve">
          <source>REQUIREMENTS</source>
          <target state="translated">REQUIREMENTS</target>
        </trans-unit>
        <trans-unit id="d4abe5aceb44522d22d765689b2e66a4d13b95b1" translate="yes" xml:space="preserve">
          <source>REQUIRES</source>
          <target state="translated">REQUIRES</target>
        </trans-unit>
        <trans-unit id="84a1adbee1321bc20135c0d8dc5a30d33e63abca" translate="yes" xml:space="preserve">
          <source>RESOURCES</source>
          <target state="translated">RESOURCES</target>
        </trans-unit>
        <trans-unit id="18c30fdfe09a62b00ef42fca3ca524381be1daae" translate="yes" xml:space="preserve">
          <source>RESTRICTIONS</source>
          <target state="translated">RESTRICTIONS</target>
        </trans-unit>
        <trans-unit id="3f16f13a6e4e56262a53083e00fe054e7f080605" translate="yes" xml:space="preserve">
          <source>RESULTS</source>
          <target state="translated">RESULTS</target>
        </trans-unit>
        <trans-unit id="dad39ba788d6c9557da1d5f8eca6a0c122f53cc6" translate="yes" xml:space="preserve">
          <source>RETURN</source>
          <target state="translated">RETURN</target>
        </trans-unit>
        <trans-unit id="a3cfa01beb76631f6551ac88fe216890eda21375" translate="yes" xml:space="preserve">
          <source>RETURN VALUE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db226ae6a2200c9de52d48b59300653cddbcd5c" translate="yes" xml:space="preserve">
          <source>REVISION</source>
          <target state="translated">REVISION</target>
        </trans-unit>
        <trans-unit id="2883ce0cefe517af5eaa69e7f4cac285cbe4b2a6" translate="yes" xml:space="preserve">
          <source>REVISION HISTORY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38db668f060e18560a74ae3771e265dfe3889471" translate="yes" xml:space="preserve">
          <source>RFC 1321</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6fc20dacd7531202f028b2a5f35f72a25e23ad" translate="yes" xml:space="preserve">
          <source>RFC 2047, &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2047.html&quot;&gt;http://www.faqs.org/rfcs/rfc2047.html&lt;/a&gt; and many other locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6129b443adb8eb4ab8117c73a7ec03cac31938" translate="yes" xml:space="preserve">
          <source>RFC 2277,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2e6cca0447e13526ac21e21f0f5ede40828910" translate="yes" xml:space="preserve">
          <source>RFC 2781 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2152.txt&quot;&gt;http://www.ietf.org/rfc/rfc2152.txt&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8f0184cbd20d399e4fafa72684d0a3bc66aa63" translate="yes" xml:space="preserve">
          <source>RFC 2781 &lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;http://www.ietf.org/rfc/rfc2781.txt&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7991d40b82d0c4a446272f5d53049fc02d0908" translate="yes" xml:space="preserve">
          <source>RFC 3066,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945ba2e2f75806caad55592ebe29a1b3ebf6f309" translate="yes" xml:space="preserve">
          <source>RFC 3164 - The BSD syslog Protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a8129d80ee0812edff3359c57630a4510d47b2" translate="yes" xml:space="preserve">
          <source>RFC 3195 - Reliable Delivery for syslog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63a110e3985b9f7489a8dd961b8827b5aaff064" translate="yes" xml:space="preserve">
          <source>RFCs</source>
          <target state="translated">RFCs</target>
        </trans-unit>
        <trans-unit id="3b3e632ab723286b647cad0535870ece0660f6d3" translate="yes" xml:space="preserve">
          <source>RISC OS perl can emulate Unix filenames with &lt;code&gt;/&lt;/code&gt; as path separator, or go native and use &lt;code&gt;.&lt;/code&gt; for path separator and &lt;code&gt;:&lt;/code&gt; to signal filesystems and disk names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4054eb80e50d0195d33685c2f02f4383c18ad22b" translate="yes" xml:space="preserve">
          <source>RISKS</source>
          <target state="translated">RISKS</target>
        </trans-unit>
        <trans-unit id="e9293cd4021d2be8e0346d4819a5adbfc3a7de03" translate="yes" xml:space="preserve">
          <source>ROADMAP</source>
          <target state="translated">ROADMAP</target>
        </trans-unit>
        <trans-unit id="670ec780e0a50ca50c215927161baaa7b818b213" translate="yes" xml:space="preserve">
          <source>ROUTINES</source>
          <target state="translated">ROUTINES</target>
        </trans-unit>
        <trans-unit id="6771a11eec6289a48258037c9914e3b00de3f1aa" translate="yes" xml:space="preserve">
          <source>RSA Data Security, Inc. makes no representations concerning either the merchantability of this software or the suitability of this software for any particular purpose. It is provided &quot;as is&quot; without express or implied warranty of any kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84b5482f8ea9657c275606b7d97ddc22b265005" translate="yes" xml:space="preserve">
          <source>RSX (see &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;) for these commands to work, and you may need a port of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a688848d40f14304b5c2aa4866907e65d56982" translate="yes" xml:space="preserve">
          <source>RSYNC Mirrors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5511eae951bd620a04e76a09544cf2f828d716d6" translate="yes" xml:space="preserve">
          <source>RT #95409</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad173e04d8ecca3dab1c425136333c79954a3f23" translate="yes" xml:space="preserve">
          <source>RUN</source>
          <target state="translated">RUN</target>
        </trans-unit>
        <trans-unit id="8cac8d655edc79a094b3e30b1c55e024f2c6e794" translate="yes" xml:space="preserve">
          <source>RUN CONFIGURE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13f5492647cca89dd8a96d290c5eafb261ca74d" translate="yes" xml:space="preserve">
          <source>RUNTIME ISSUES FOR PERL ON SOLARIS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4c370e208c216b8f67b45a9afe337259faf5a2" translate="yes" xml:space="preserve">
          <source>R_CURSOR is the only valid flag at present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dcabf4bc9d4bc26e8365f7cbcd0b89fe9f1cae" translate="yes" xml:space="preserve">
          <source>R_RECNOSYNC is the only valid flag at present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0142508fcc1a59990a5e718d13aae5a93f357a6f" translate="yes" xml:space="preserve">
          <source>Race conditions are caused by unsynchronized access to shared data. Without explicit synchronization, there's no way to be sure that nothing has happened to the shared data between the time you access it and the time you update it. Even this simple code fragment has the possibility of error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b85f3b7cd0929657b9bd9be9a4a78ee21defd6c" translate="yes" xml:space="preserve">
          <source>Radical rewrites of large chunks of the Perl interpreter have the potential to introduce new bugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5fa4743a2b3554b929168cb16beddcc9abba29" translate="yes" xml:space="preserve">
          <source>Rafa&amp;euml;l Garcia-Suarez, Bart Lateur, Max Maischein, Anno Siegel, Michael Schwern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14d9c3308f836cd95d5d2ae0777a6058e1bed73" translate="yes" xml:space="preserve">
          <source>Rainer Tammer &amp;lt;tammer@tammer.net&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0023298eb104a37087c2d3cbae94ab43a267b787" translate="yes" xml:space="preserve">
          <source>Raise an exception using &lt;code&gt;confess&lt;/code&gt; from &lt;a href=&quot;../carp&quot;&gt;Carp&lt;/a&gt;, eg:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb06e0cd5423ee186d2232bd87bcb32b63e7f3b" translate="yes" xml:space="preserve">
          <source>Raise an exception using &lt;code&gt;croak&lt;/code&gt; from &lt;a href=&quot;../carp&quot;&gt;Carp&lt;/a&gt;, eg:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54a401d07b29f2d86e60a3408b97357c9c95496" translate="yes" xml:space="preserve">
          <source>Randal L. Schwartz writes about profiling in &quot;Speeding up Your Perl Programs&quot; for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecb3c514c687cc0abeadea10afb2b02d82b5aca" translate="yes" xml:space="preserve">
          <source>Randomize parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639e3ac9bf3c15f412dffa9f6f9c04017303eefc" translate="yes" xml:space="preserve">
          <source>Range Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bac9d8e3ab0b378aaa92fe98e4aacdcbc341e48" translate="yes" xml:space="preserve">
          <source>Ranges containing &lt;code&gt;\N{...}&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y///&lt;/a&gt;&lt;/code&gt;) transliteration operators are treated differently than the equivalent ranges in regular expression pattersn. They should, but don't, cause the values in the ranges to all be treated as Unicode code points, and not native ones. (&lt;a href=&quot;perlre#Version-8-Regular-Expressions&quot;&gt;Version 8 Regular Expressions in perlre&lt;/a&gt; gives details as to how it should work.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac184a00f5d5e81e131d86e9b47ba228f878d6f" translate="yes" xml:space="preserve">
          <source>Ranges that map to &lt;code&gt;$default&lt;/code&gt; , &lt;code&gt;&quot;0&quot;&lt;/code&gt; , behave somewhat differently. For these, each code point maps to itself. So, in the first line in the example, &lt;code&gt;&lt;a href=&quot;../functions/ord&quot;&gt;ord(uc(chr(0)))&lt;/a&gt;&lt;/code&gt; is 0, &lt;code&gt;&lt;a href=&quot;../functions/ord&quot;&gt;ord(uc(chr(1)))&lt;/a&gt;&lt;/code&gt; is 1, .. &lt;code&gt;&lt;a href=&quot;../functions/ord&quot;&gt;ord(uc(chr(96)))&lt;/a&gt;&lt;/code&gt; is 96.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac838b75fa9d93172982fdbee6a0fdb28f19017" translate="yes" xml:space="preserve">
          <source>Raphael_Manfredi!at!pobox.com</source>
          <target state="translated">Raphael_Manfredi!at!pobox.com</target>
        </trans-unit>
        <trans-unit id="54712c3ed00d8ce0c2e3a6b85abbea1e379bb426" translate="yes" xml:space="preserve">
          <source>Rather like Getopt::Std's getopts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960b861936010943ac07ac480ae7d8624a71e2d4" translate="yes" xml:space="preserve">
          <source>Rather than calling the specified processor on each individual piece of code (i.e. on the bits between quotelikes), the &lt;code&gt;'code...'&lt;/code&gt; partial filters operate on the entire source code, but with the quotelike bits (and, in the case of &lt;code&gt;'code_no_comments'&lt;/code&gt; , the comments) &quot;blanked out&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8782cdf0f3b4bc2f2a2c02de3c7d4fefe8fe5e7" translate="yes" xml:space="preserve">
          <source>Rather than causing Perl to abort and dump core, the &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; operator invokes the VMS debugger. If you continue to execute the Perl program under the debugger, control will be transferred to the label specified as the argument to &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;, or, if no label was specified, back to the beginning of the program. All other state of the program (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3447d08dbbb43de106eae02bb7588c613a64d47" translate="yes" xml:space="preserve">
          <source>Rather than iterating through the array, &lt;code&gt;@h&lt;/code&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba567eee2b9c54359919e71a72ac93305e4e900" translate="yes" xml:space="preserve">
          <source>Rather than returning a &lt;code&gt;Pod::ParseTree&lt;/code&gt; , pass the parse-tree as an argument to the referenced subroutine (or named method of the parser object) and return the result instead of the parse-tree object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ad00b67279483cb2f1a049ab8ad14f7abfff12" translate="yes" xml:space="preserve">
          <source>Rather than storing a sentinel at the end of a data item (or a list of items), we could precede the data with a count. Again, we pack keys and values of a hash, preceding each with an unsigned short length count, and up front we store the number of pairs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b323fa99aea3713aacf8ae1a80086b503b9a2ebf" translate="yes" xml:space="preserve">
          <source>Rather than this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f10661814f8bcbc7d422331f86ee1432e30684" translate="yes" xml:space="preserve">
          <source>Rather than trying to match the input against the keywords, we match the combined set of keywords against the input. The pattern matching operation &lt;code&gt;$kwds =~ /\b($cmd\w*)/g&lt;/code&gt; does several things at the same time. It makes sure that the given command begins where a keyword begins (&lt;code&gt;\b&lt;/code&gt; ). It tolerates abbreviations due to the added &lt;code&gt;\w*&lt;/code&gt; . It tells us the number of matches (&lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt; @matches&lt;/code&gt; ) and all the keywords that were actually matched. You could hardly ask for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cb94b52a420b753d7056cb4d301d163b5f24a9" translate="yes" xml:space="preserve">
          <source>Raw output. Instead of producing a human-readable report, outputs a line in machine-readable form for each definition/use of a variable/sub/format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caadded21212ee777b82941fc97c8e21f9d9eb4f" translate="yes" xml:space="preserve">
          <source>Raw tar header -- not useful for most users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647d68a92bffee01f0ecfc9cfacfb204335146b1" translate="yes" xml:space="preserve">
          <source>Re-enable an entry in this BHK structure, by setting the appropriate flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ce193ee0e134e6a49d173985b5d921f2b5ce47" translate="yes" xml:space="preserve">
          <source>Reachability doesn't necessarily mean that the remote host is actually functioning beyond its ability to echo packets. tcp is slightly better at indicating the health of a system than icmp because it uses more of the networking stack to respond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852b438f91ad9eb2cdd84419a675a216d543c687" translate="yes" xml:space="preserve">
          <source>Read</source>
          <target state="translated">Read</target>
        </trans-unit>
        <trans-unit id="bb510d523e3559f1dd31a12b9ab3443e6d1eb043" translate="yes" xml:space="preserve">
          <source>Read &amp;amp; Write to the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdce8d24a2a2e7b37555fd2756a9d51eacebc665" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; to help you decide which of &lt;code&gt;/s&lt;/code&gt; and &lt;code&gt;/m&lt;/code&gt; (or both) you might want to use: &lt;code&gt;/s&lt;/code&gt; allows dot to include newline, and &lt;code&gt;/m&lt;/code&gt; allows caret and dollar to match next to a newline, not just at the end of the string. You do need to make sure that you've actually got a multiline string in there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ec605136e3a8392d3b3c34e52fe32d6a841de5" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt;, &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;, &lt;a href=&quot;h2xs&quot;&gt;h2xs&lt;/a&gt;, &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;, and &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115c8291258f382229f6753be5b1c82468c882c2" translate="yes" xml:space="preserve">
          <source>Read &lt;code&gt;SIZE&lt;/code&gt; bytes from the shared memory segment at &lt;code&gt;POS&lt;/code&gt; . Returns the string read, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if there was an error. The return value becomes tainted. See &lt;a href=&quot;../functions/shmread&quot;&gt;shmread&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a25663c537f022e0f372f2cbbe12e60f624c4ef" translate="yes" xml:space="preserve">
          <source>Read &lt;code&gt;SIZE&lt;/code&gt; bytes of data from the server and place it into &lt;code&gt;BUFFER&lt;/code&gt; , also performing any &amp;lt;CRLF&amp;gt; translation necessary. &lt;code&gt;TIMEOUT&lt;/code&gt; is optional, if not given, the timeout value from the command connection will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd1cac37334c28f94a5a1f13002c1b9c161efeb" translate="yes" xml:space="preserve">
          <source>Read RFC 1950 files/buffers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c474aa41d748aeded351b2b82635d904b9da7ca" translate="yes" xml:space="preserve">
          <source>Read RFC 1951 files/buffers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9674cc4cd21ee5a1adf68bfae1b32a2e0b35087c" translate="yes" xml:space="preserve">
          <source>Read RFC 1952 files/buffers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276580730ef1defd3b269e41373718655fc1f8b1" translate="yes" xml:space="preserve">
          <source>Read YAMLish data from iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3401450e1edb9cded52db8b9f6b72e38b73e0be8" translate="yes" xml:space="preserve">
          <source>Read YAMLish from a &lt;a href=&quot;../iterator&quot;&gt;TAP::Parser::Iterator&lt;/a&gt; and return the data structure it represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941b148e1edab00bee2330ed7ac82ddf4e74edf3" translate="yes" xml:space="preserve">
          <source>Read a message from the queue. Returns the type of the message read. See &lt;a href=&quot;../functions/msgrcv&quot;&gt;msgrcv&lt;/a&gt;. The BUF becomes tainted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2328757ae1c800d4e10ae414e17971850a69f5" translate="yes" xml:space="preserve">
          <source>Read a single character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07c6817a15867b0dc47cde38731ba9873326685" translate="yes" xml:space="preserve">
          <source>Read a single line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553549240039452847251f6622903ab2d2337784" translate="yes" xml:space="preserve">
          <source>Read about &lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; and &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; and &lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; and &lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f501e785d8f60607eb8fd29020b8ae54ebe01044" translate="yes" xml:space="preserve">
          <source>Read about back-quotes and about &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007c6ee7681668b24b579a3ecbbdba86f7191bbe" translate="yes" xml:space="preserve">
          <source>Read access via Git</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6736eaa1ab69e3d90ab95af13fafa160ed47c93" translate="yes" xml:space="preserve">
          <source>Read access via rsync</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e2b2049458202a1fc5f7c18fb55aa58bb1e225" translate="yes" xml:space="preserve">
          <source>Read access via the web</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2c8ec09bc65616d8ed5815b01859080def7101" translate="yes" xml:space="preserve">
          <source>Read and execute debugger commands from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ebc21a3cf3bbcb1e390623db3b54ac9cad53d9" translate="yes" xml:space="preserve">
          <source>Read and match distroprefs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de275b3a330a676e1b3a19bf0483a26f7bea910" translate="yes" xml:space="preserve">
          <source>Read and write a subset of YAML for CPAN Meta files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3dae8f537b10a514d29cfd0d4064e961135e516" translate="yes" xml:space="preserve">
          <source>Read bzip2 files/buffers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f496354721b34074a6d09386d4dfd90a7648131" translate="yes" xml:space="preserve">
          <source>Read data from the remote server until a line consisting of a single '.'. Any lines starting with '..' will have one of the '.'s removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cff263782110131a866571e46995cb57864bc1" translate="yes" xml:space="preserve">
          <source>Read from a file. This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt; . If the buffer &lt;code&gt;$buf&lt;/code&gt; is not large enough for the read then Perl will extend it to make room for the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cc7e8fd48d963fa396269e4c2ab7dfc690c7a1" translate="yes" xml:space="preserve">
          <source>Read on...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a567871f2319ef4608911cbaae63388beacceb" translate="yes" xml:space="preserve">
          <source>Read some bytes from the file. Returns the number of bytes actually read, 0 on end-of-file, undef on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da6ecf1c98213777d74b19843e6892f664218a5" translate="yes" xml:space="preserve">
          <source>Read the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445df6f2b2a25f8116b39a5d89fac539c3d48c64" translate="yes" xml:space="preserve">
          <source>Read the FAQs and documentation specific to the port of perl to your operating system (eg, &lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt;, &lt;a href=&quot;perlplan9&quot;&gt;perlplan9&lt;/a&gt;, ...). These should contain more detailed information on the vagaries of your perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f312a281ee3fabbb4644cfca212e21dc23d819" translate="yes" xml:space="preserve">
          <source>Read the given tar file into memory. The first argument can either be the name of a file or a reference to an already open filehandle (or an IO::Zlib object if it's compressed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b74d7333cb35735ec7d211619b3f8a0c7fbd713" translate="yes" xml:space="preserve">
          <source>Read zip files/buffers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5283d26eb840638e1f550dc557572ba6542f3d4" translate="yes" xml:space="preserve">
          <source>Read-Only Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5683a14e485b7046ea3107db40da5d887aa290ef" translate="yes" xml:space="preserve">
          <source>Read-only access to the data in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc983681241a5008bf0f2decf61749fdd356f1d" translate="yes" xml:space="preserve">
          <source>Read-only optrees</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbcc1694c685273c78534f0d3e2cd46541b02c0d" translate="yes" xml:space="preserve">
          <source>Read/Write/Modify Perl/XS typemap files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aee42c0aa7d8176e37f9692354e87f3f5b4679f" translate="yes" xml:space="preserve">
          <source>Readers have been known to skip important parts of &lt;a href=&quot;../perlguts&quot;&gt;perlguts&lt;/a&gt;, causing much frustration for all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecba0bec4829317939306f304d19e964a7a84e1d" translate="yes" xml:space="preserve">
          <source>Reading &lt;code&gt;Devel::Peek&lt;/code&gt; output takes a bit of practise, so let's go through it line by line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720629d599316203605d35ccc57d80ad0c87c1df" translate="yes" xml:space="preserve">
          <source>Reading an input line does not split it for you. You get to split it to an array yourself. And the split() operator has different arguments than &lt;b&gt;awk&lt;/b&gt;'s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca2d568455adb5d39f1f5a67763764982820867" translate="yes" xml:space="preserve">
          <source>Reading from &lt;code&gt;STDIN&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43278435f6048011353ab3e1550aec2934094377" translate="yes" xml:space="preserve">
          <source>Reading from STDIN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3daaeaef0f24df245aaa3148b442905754f46bb" translate="yes" xml:space="preserve">
          <source>Reading in a file that you know happens to be encoded in one of the Unicode or legacy encodings does not magically turn the data into Unicode in Perl's eyes. To do that, specify the appropriate layer when opening files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4846fec17a47b45717c157bbd8a0f9bd1ad2e3c9" translate="yes" xml:space="preserve">
          <source>Reading in the whole file at one time is called slurping. It can be useful but it may be a memory hog. Most text file processing can be done a line at a time with Perl's looping constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3765f01b49c43d45e4334a57b6fc21c7972c3951" translate="yes" xml:space="preserve">
          <source>Readline Support / History in the Debugger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd63187370525346d69be8508f8b50f415e9e87c" translate="yes" xml:space="preserve">
          <source>Reads &lt;code&gt;$size&lt;/code&gt; bytes from the compressed file into &lt;code&gt;$buffer&lt;/code&gt; . If &lt;code&gt;$size&lt;/code&gt; is not specified, it will default to 4096. If the scalar &lt;code&gt;$buffer&lt;/code&gt; is not large enough, it will be extended automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206a7f5e7297aa5bd7492bad4e008ac4bc46e49d" translate="yes" xml:space="preserve">
          <source>Reads SIZE bytes from a memory segment at ADDR starting at position POS. VAR must be a variable that will hold the data read. Returns true if successful, or false if there is an error. memread() taints the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799d4c2bbc52577dcbc3f454b2dcc4d5b936f889" translate="yes" xml:space="preserve">
          <source>Reads a block of compressed data (the size of the compressed block is determined by the &lt;code&gt;Buffer&lt;/code&gt; option in the constructor), uncompresses it and writes any uncompressed data into &lt;code&gt;$buffer&lt;/code&gt; . If the &lt;code&gt;Append&lt;/code&gt; parameter is set in the constructor, the uncompressed data will be appended to the &lt;code&gt;$buffer&lt;/code&gt; parameter. Otherwise &lt;code&gt;$buffer&lt;/code&gt; will be overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18e9d62cd14286629fc6e76754c10fff378cc5e" translate="yes" xml:space="preserve">
          <source>Reads a single line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ee44c28be29184ce4a73c61b1ec7edf4671344" translate="yes" xml:space="preserve">
          <source>Reads are permitted i.e. opened &quot;r&quot; or &quot;w+&quot; (or even &quot;a+&quot; - ick).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f0afdf9d8c38585692746943b6766dbe732c8a" translate="yes" xml:space="preserve">
          <source>Reads from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2dc0c11f98a08996cb17f6c2572663d3f74f26f" translate="yes" xml:space="preserve">
          <source>Reads from the filehandle whose typeglob is contained in EXPR (or from &lt;code&gt;*ARGV&lt;/code&gt; if EXPR is not provided). In scalar context, each call reads and returns the next line until end-of-file is reached, whereupon the subsequent call returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. In list context, reads until end-of-file is reached and returns a list of lines. Note that the notion of &quot;line&quot; used here is whatever you may have defined with &lt;code&gt;$/&lt;/code&gt; or &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; ). See &lt;a href=&quot;perlvar#%24%2f&quot;&gt;$/ in perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4d819b245f8997ea46d716718b7b5137afee52" translate="yes" xml:space="preserve">
          <source>Reads from the filehandle whose typeglob is contained in EXPR (or from &lt;code&gt;*ARGV&lt;/code&gt; if EXPR is not provided). In scalar context, each call reads and returns the next line until end-of-file is reached, whereupon the subsequent call returns &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. In list context, reads until end-of-file is reached and returns a list of lines. Note that the notion of &quot;line&quot; used here is whatever you may have defined with &lt;code&gt;$/&lt;/code&gt; or &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; ). See &lt;a href=&quot;../perlvar#%24%2f&quot;&gt;$/ in perlvar&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5686d4cf607b2427e345e3a17783aa2d6f48772a" translate="yes" xml:space="preserve">
          <source>Reads in the next chunk of text to be lexed, appending it to &lt;a href=&quot;#PL_parser-%3elinestr&quot;&gt;PL_parser-&amp;gt;linestr&lt;/a&gt;. This should be called when lexing code has looked to the end of the current chunk and wants to know more. It is usual, but not necessary, for lexing to have consumed the entirety of the current chunk at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e502d5f8379d8469e98c1ca45f22f6d653d22e2" translate="yes" xml:space="preserve">
          <source>Reads into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3577c9b285cf2945e65a6e8c5f9d480cfc5c7d" translate="yes" xml:space="preserve">
          <source>Reads optional spaces, in Perl style, in the text currently being lexed. The spaces may include ordinary whitespace characters and Perl-style comments. &lt;code&gt;#line&lt;/code&gt; directives are processed if encountered. &lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt;bufptr&lt;/a&gt; is moved past the spaces, so that it points at a non-space character (or the end of the input text).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8320a729c06e516aca0a96e512d594788146ecaf" translate="yes" xml:space="preserve">
          <source>Reads or writes the System V shared memory segment ID starting at position POS for size SIZE by attaching to it, copying in/out, and detaching from it. When reading, VAR must be a variable that will hold the data read. When writing, if STRING is too long, only SIZE bytes are used; if STRING is too short, nulls are written to fill out SIZE bytes. Return true if successful, false on error. shmread() taints the variable. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , and the &lt;code&gt;IPC::Shareable&lt;/code&gt; module from CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f125d7e184df479fec94e499e44324e6ceb7098a" translate="yes" xml:space="preserve">
          <source>Reads or writes the System V shared memory segment ID starting at position POS for size SIZE by attaching to it, copying in/out, and detaching from it. When reading, VAR must be a variable that will hold the data read. When writing, if STRING is too long, only SIZE bytes are used; if STRING is too short, nulls are written to fill out SIZE bytes. Return true if successful, false on error. shmread() taints the variable. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , and the &lt;code&gt;IPC::Shareable&lt;/code&gt; module from CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3932830db44982eec2ae215d9491c4fc84e2b9" translate="yes" xml:space="preserve">
          <source>Reads the YAML stream from a file instead of a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f50fa24a3e4fd3d77314b2073891ffb95299e6" translate="yes" xml:space="preserve">
          <source>Reads the contents of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ef207c7fee9445bbf063cb6e3bc97ad3d05a6b" translate="yes" xml:space="preserve">
          <source>Reads the contents of &lt;code&gt;$input&lt;/code&gt; , compresses it and writes the compressed data to &lt;code&gt;$output&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69012285115dba7938e88e4e1d96760f57b6f1cd" translate="yes" xml:space="preserve">
          <source>Reads the next (Unicode) character in the text currently being lexed. Returns the codepoint (unsigned integer value) of the character read, and moves &lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt;bufptr&lt;/a&gt; past the character, or returns -1 if lexing has reached the end of the input text. To non-destructively examine the next character, use &lt;a href=&quot;#lex_peek_unichar&quot;&gt;lex_peek_unichar&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c6ed682ed41c74c87caf67fe452fd0fd42fdad" translate="yes" xml:space="preserve">
          <source>Reads the next line from the compressed file into &lt;code&gt;$line&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f7c17840218f6790c690d1641eb71144f6c802" translate="yes" xml:space="preserve">
          <source>Real elapsed time &quot;wallclock seconds&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec77234378ed55865902c265252eec7cd62f206" translate="yes" xml:space="preserve">
          <source>Real number. For example &lt;code&gt;3.14&lt;/code&gt; , &lt;code&gt;-6.23E24&lt;/code&gt; and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f20337385d20643255669a22fe71db0ac20c35" translate="yes" xml:space="preserve">
          <source>Real numbers (floats and doubles) are in native machine format only. Due to the multiplicity of floating-point formats and the lack of a standard &quot;network&quot; representation for them, no facility for interchange has been made. This means that packed floating-point data written on one machine may not be readable on another, even if both use IEEE floating-point arithmetic (because the endianness of the memory representation is not part of the IEEE spec). See also &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511f764d325082297dba12502ae4d85c90f1ad3d" translate="yes" xml:space="preserve">
          <source>Real numbers (floats and doubles) are in native machine format only. Due to the multiplicity of floating-point formats and the lack of a standard &quot;network&quot; representation for them, no facility for interchange has been made. This means that packed floating-point data written on one machine may not be readable on another, even if both use IEEE floating-point arithmetic (because the endianness of the memory representation is not part of the IEEE spec). See also &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345756ac5d37feff0f0546c1865e36b9fef67964" translate="yes" xml:space="preserve">
          <source>Real-valued asin and acos</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabe4e85411c8ef34282f94190186b8b9fc58c2f" translate="yes" xml:space="preserve">
          <source>Reallocates the lexer buffer (&lt;a href=&quot;#PL_parser-%3elinestr&quot;&gt;PL_parser-&amp;gt;linestr&lt;/a&gt;) to accommodate at least</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6938dd783f19a2f3db9807cf29082d79ed6cb489" translate="yes" xml:space="preserve">
          <source>Reallocation</source>
          <target state="translated">Reallocation</target>
        </trans-unit>
        <trans-unit id="4190f114778ebce2a04705901ceb6f8314011d5a" translate="yes" xml:space="preserve">
          <source>Really</source>
          <target state="translated">Really</target>
        </trans-unit>
        <trans-unit id="66af3b687388d0a216b97c12ae6eef0ac4e6badc" translate="yes" xml:space="preserve">
          <source>Really means this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811ca5b8b081194af2cb6112878b04c438c79ce4" translate="yes" xml:space="preserve">
          <source>Really really odious function to implement. Returns absolute name of file which would have &lt;code&gt;name&lt;/code&gt; if CWD were &lt;code&gt;dir&lt;/code&gt; . &lt;code&gt;Dir&lt;/code&gt; defaults to the current dir.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1549347e4087fcd87d6c01881ced2f24ad2286" translate="yes" xml:space="preserve">
          <source>Rearranged slightly by Elizabeth Mattijsen &amp;lt;liz@dijkmat.nl&amp;lt;gt&amp;gt; to put less emphasis on yield().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5705151cccd0f7888f60304194ae2c9cd9a3ff" translate="yes" xml:space="preserve">
          <source>Reasonable effort was made to make this module efficient. Nevertheless, changing the size of a record in the middle of a large file will always be fairly slow, because everything after the new record must be moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3679c3f6c1d56464e9b8199c035d6cb387d84b7" translate="yes" xml:space="preserve">
          <source>Recall that the usual method of determining the type of scalar you have is to use &lt;code&gt;Sv*OK&lt;/code&gt; macros. Because a scalar can be both a number and a string, usually these macros will always return TRUE and calling the &lt;code&gt;Sv*V&lt;/code&gt; macros will do the appropriate conversion of string to integer/double or integer/double to string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec663ccb44dacf5122cda8bcd99fadf939083b21" translate="yes" xml:space="preserve">
          <source>Recall that which of &lt;code&gt;yes-pattern&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no-pattern&lt;/a&gt;&lt;/code&gt; actually matches is already determined. The ordering of the matches is the same as for the chosen subexpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa982fd4e6e1dcbe436dae28b9ec1d7a59a9b35" translate="yes" xml:space="preserve">
          <source>Receives a message on a socket. Attempts to receive LENGTH characters of data into variable SCALAR from the specified SOCKET filehandle. SCALAR will be grown or shrunk to the length actually read. Takes the same flags as the system call of the same name. Returns the address of the sender if SOCKET's protocol supports this; returns an empty string otherwise. If there's an error, returns the undefined value. This call is actually implemented in terms of recvfrom(2) system call. See &lt;a href=&quot;../perlipc#UDP%3a-Message-Passing&quot;&gt;UDP: Message Passing in perlipc&lt;/a&gt; for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25c6e85b1574838eeb148ca7e9557ca09fab6e8" translate="yes" xml:space="preserve">
          <source>Receives a message on a socket. Attempts to receive LENGTH characters of data into variable SCALAR from the specified SOCKET filehandle. SCALAR will be grown or shrunk to the length actually read. Takes the same flags as the system call of the same name. Returns the address of the sender if SOCKET's protocol supports this; returns an empty string otherwise. If there's an error, returns the undefined value. This call is actually implemented in terms of recvfrom(2) system call. See &lt;a href=&quot;perlipc#UDP%3a-Message-Passing&quot;&gt;UDP: Message Passing in perlipc&lt;/a&gt; for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0fdbf19a5aad7a7c626acf2e170a45e9945622" translate="yes" xml:space="preserve">
          <source>Recent additions and current maintenance by Paul Evans, &amp;lt;leonerd@leonerd.org.uk&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34eaa50bdc006fd02951d60039d068fbfe490ffb" translate="yes" xml:space="preserve">
          <source>Recent changes in this release, especially incompatibilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce746d3f125725bd67a16fc76426e418eb2553c2" translate="yes" xml:space="preserve">
          <source>Recent perl test suite is quite memory hungry. In addition to the comments above on memory limitations it is also worth checking for _CEE_RUNOPTS in your environment. Perl now has (in miniperlmain.c) a C #pragma to set CEE run options, but the environment variable wins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd809045ecd1f6fec2192a41771410596322bb48" translate="yes" xml:space="preserve">
          <source>Recent versions of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895baf2f2b923b6b05ff0ce7fe4004e464717b54" translate="yes" xml:space="preserve">
          <source>Recent versions of Emacs come with a start file for making &lt;b&gt;emacs&lt;/b&gt; act like a syntax-directed editor that understands (some of) Perl's syntax. See &lt;a href=&quot;perlfaq3&quot;&gt;perlfaq3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e20a3b8b070519bf410698695bcd5424fa0a92" translate="yes" xml:space="preserve">
          <source>Recent versions of MakeMaker will only install man pages on Unix-like operating systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d40e56ce8bbf7d9e92f3015c908f2c59ec4661" translate="yes" xml:space="preserve">
          <source>Recently someone mentioned to me that the Memoize module made his program run slower instead of faster. It turned out that he was memoizing the following function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7f4c997bb15ee0fbad757704fc3f421c86dab0" translate="yes" xml:space="preserve">
          <source>Recently, the plan has been to release a new version of Perl roughly every April, but getting the release right is more important than sticking rigidly to a calendar date, so the release date is somewhat flexible. The historical release dates can be viewed at &lt;a href=&quot;http://www.cpan.org/src/README.html&quot;&gt;http://www.cpan.org/src/README.html&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eddef3b133a821ffbd00447eb75db2f14179551" translate="yes" xml:space="preserve">
          <source>Recipes for using Locale::Maketext</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df930bc1bb6845ff74e797986a213fc6ce80656c" translate="yes" xml:space="preserve">
          <source>Recognise (or not) a number. The type of the number is returned (0 if unrecognised), otherwise it is a bit-ORed combination of IS_NUMBER_IN_UV, IS_NUMBER_GREATER_THAN_UV_MAX, IS_NUMBER_NOT_INT, IS_NUMBER_NEG, IS_NUMBER_INFINITY, IS_NUMBER_NAN (defined in perl.h).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f945d6ce4d07d534f69be50ec9c9e2fe4d3f0a" translate="yes" xml:space="preserve">
          <source>Recognized options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a67cdef15b0f52eba76cf8612a8ed9d2d8a77f" translate="yes" xml:space="preserve">
          <source>Recommended Options AIX 5.1/5.2/5.3/6.1 and 7.1 (32-bit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d64f9e3ff3dcc4eefb2197e40d43309ca7e6a3" translate="yes" xml:space="preserve">
          <source>Recommended Options AIX 5.1/5.2/5.3/6.1 and 7.1 (64-bit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31d2b6abba1e2f8179abfdd96b832d8bddf377a" translate="yes" xml:space="preserve">
          <source>Recommended Options AIX 5.1/5.2/5.3/6.1 and 7.1 (threaded/32-bit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49f6af3c553991267db33b3d58f14d3e0aa9ee3" translate="yes" xml:space="preserve">
          <source>Recommended Options AIX 5.1/5.2/5.3/6.1 and 7.1 (threaded/64-bit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b95470925487b65a9afb790a266994f3a7ddad" translate="yes" xml:space="preserve">
          <source>Recommended Use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f182056a2720c2953d88f0e5cd69ae2848c028f4" translate="yes" xml:space="preserve">
          <source>Record locking with fcntl()? Then the module might support an undo log and get real transactions. What a tour de force that would be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e619d50396ad4502ee425b4e5f3f5650d0bbc5" translate="yes" xml:space="preserve">
          <source>Records read from the tied array do not have the record separator string on the end; this is to allow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9b3804e9ca9a33e54f8c3271667fff796fffbf" translate="yes" xml:space="preserve">
          <source>Records read in from the file are cached, to avoid having to re-read them repeatedly. If you read the same record twice, the first time it will be stored in memory, and the second time it will be fetched from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b78cb40d570e3f60ca3b4da5f634f6d92a8fb93" translate="yes" xml:space="preserve">
          <source>Recurse into subdirectories specified in podpath (default behaviour).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a3445b075ca5a8f04946e660b954c88e2059b2" translate="yes" xml:space="preserve">
          <source>Recurse to a named subpattern. Identical to &lt;code&gt;(?&lt;i&gt;PARNO&lt;/i&gt;)&lt;/code&gt; except that the parenthesis to recurse to is determined by name. If multiple parentheses have the same name, then it recurses to the leftmost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1975a7def41720ec9c94792bc4fc65a7c012e4" translate="yes" xml:space="preserve">
          <source>Recursion</source>
          <target state="translated">Recursion</target>
        </trans-unit>
        <trans-unit id="246ee04b92279ada2c0b85fda5857fb7391b5be9" translate="yes" xml:space="preserve">
          <source>Recursive patterns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f3d9dfa25161f3fe4649ab6fce65682b6e58a7" translate="yes" xml:space="preserve">
          <source>Recursive search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97820f2ec75d21b98b64fe84aa408e0ba63fd922" translate="yes" xml:space="preserve">
          <source>Recursive subpattern. Treat the contents of a given capture buffer in the current pattern as an independent subpattern and attempt to match it at the current position in the string. Information about capture state from the caller for things like backreferences is available to the subpattern, but capture buffers set by the subpattern are not visible to the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f516457f12f560502881547f1fc2790272897352" translate="yes" xml:space="preserve">
          <source>Recursively runs the &lt;code&gt;clean&lt;/code&gt; method on all items contained in the bundle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9c50c69ca21ecd2a0997b67c05e3cb6d8e1a38" translate="yes" xml:space="preserve">
          <source>Recursively runs the &lt;code&gt;get&lt;/code&gt; method on all items contained in the bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5a98448c254c7fce0f1fe10cc12f05a5008e72" translate="yes" xml:space="preserve">
          <source>Recursively runs the &lt;code&gt;install&lt;/code&gt; method on all items contained in the bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d569a98c2caf9322c96ff9458f79ae70190174a" translate="yes" xml:space="preserve">
          <source>Recursively runs the &lt;code&gt;make&lt;/code&gt; method on all items contained in the bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a4dc899fe7c2753be17aee552394719cd44ec2" translate="yes" xml:space="preserve">
          <source>Recursively runs the &lt;code&gt;readme&lt;/code&gt; method on all items contained in the bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e62e1ec8c6026586ce9a911ace00bab6074bea8" translate="yes" xml:space="preserve">
          <source>Recursively runs the &lt;code&gt;test&lt;/code&gt; method on all items contained in the bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d7296135bfeab6ee6d5a820ce1e8dc27ad1624" translate="yes" xml:space="preserve">
          <source>RedHatism for &lt;code&gt;PREREQ_PRINT&lt;/code&gt; . The output format is different, though:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff05cca01ccf8ffdeed27cada2b61209b9002a1b" translate="yes" xml:space="preserve">
          <source>Redeclaration of &quot;sendpath&quot; with a different storage class specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77aad5fb24921ef76ac8f3e500ed93fddae8f2a" translate="yes" xml:space="preserve">
          <source>Redirection</source>
          <target state="translated">Redirection</target>
        </trans-unit>
        <trans-unit id="c973a7f5a8278a6641ee3f8e956a635bbcd7ebfa" translate="yes" xml:space="preserve">
          <source>Redo a previous command (defaults to the previous command).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b58a997692ccbb4a9f3f4fa304e4fe3018df980" translate="yes" xml:space="preserve">
          <source>Redo last command that started with pattern. See &lt;code&gt;o recallCommand&lt;/code&gt; , too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4bb08e2752cb1397dda0f71ef9cf4a2939b7a5e" translate="yes" xml:space="preserve">
          <source>Redo number'th previous command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ffb4e2ba37698b18269edd6a43127d0871bbd89" translate="yes" xml:space="preserve">
          <source>Reduce the number to the shortest form. This routine is called automatically whenever it is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501beaa6a05572fe80fbb3fbd41c4a5535a6ef36" translate="yes" xml:space="preserve">
          <source>Reduced to a standard form to facilitate comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00e8d287f10014aba639a418b99c2272caeffd5" translate="yes" xml:space="preserve">
          <source>Reduces &lt;code&gt;@list&lt;/code&gt; by calling &lt;code&gt;BLOCK&lt;/code&gt; in a scalar context multiple times, setting &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; each time. The first call will be with &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; set to the first two elements of the list, subsequent calls will be done by setting &lt;code&gt;$a&lt;/code&gt; to the result of the previous call and &lt;code&gt;$b&lt;/code&gt; to the next element in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb09f24d1bc63bc502ea1307f407f20e427bdf6" translate="yes" xml:space="preserve">
          <source>Reenable a member of the XOP which has been disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01849f5926530cff0486291b0913ad6097a74e9" translate="yes" xml:space="preserve">
          <source>Reenables overloading in the current lexical scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39fb607bec457bbec70d0b4d2e6890866daaa98" translate="yes" xml:space="preserve">
          <source>Reenables overloading only for specific ops in the current lexical scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49241d1a0c34625fcb3a1e12e5c0773fb1c8acdc" translate="yes" xml:space="preserve">
          <source>Ref to array of *.c file names. Initialised from a directory scan and the values portion of the XS attribute hash. This is not currently used by MakeMaker but may be handy in Makefile.PLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f81efa83fe1fc38e8187073f2e0f52f064e535b" translate="yes" xml:space="preserve">
          <source>Ref to array of *.h file names. Similar to C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8fd40f71bcbcbe2653e07a1c5b85da1cb0996a" translate="yes" xml:space="preserve">
          <source>Ref to array of executable files. The files will be copied to the INST_SCRIPT directory. Make realclean will delete them from there again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5aae7a215c3c723e9edaabfefe238e519090018" translate="yes" xml:space="preserve">
          <source>Ref to array of subdirectories containing Makefile.PLs e.g. ['sdbm'] in ext/SDBM_File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3246e33411973b519919af08976977fb427aefe" translate="yes" xml:space="preserve">
          <source>Ref to array of subdirectories containing library files. Defaults to [ 'lib', $(BASEEXT) ]. The directories will be scanned and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8aa887f63e79a2bb90542b3f76da6c5f5bbc259" translate="yes" xml:space="preserve">
          <source>Ref to array of typemap file names. Use this when the typemaps are in some directory other than the current directory or when they are not named &lt;b&gt;typemap&lt;/b&gt;. The last typemap in the list takes precedence. A typemap in the current directory has highest precedence, even if it isn't listed in TYPEMAPS. The default system typemap has lowest precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daea75a6a04da98b5df7c9f5a64eefec91ec11f6" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemap&lt;/a&gt; for details on writing typemaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a36238bcb820ac10d7fd2ebcaada73b3581fba1" translate="yes" xml:space="preserve">
          <source>Refer to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b040ece9e8bbd30990175a9f5306428cd1d82bf" translate="yes" xml:space="preserve">
          <source>Refer to the LWP::UserAgent manpage for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9432d6c3a3648b15dc0cea89b8e3582be2f2c693" translate="yes" xml:space="preserve">
          <source>Refer to the documentation in zlib.h for instructions on how to fly &lt;code&gt;deflateTune&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272eaac3a581c717e2c1bd7c98e040f99bd3050b" translate="yes" xml:space="preserve">
          <source>Reference Counts and Mortality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc196b03aa468ab5cdd3b85dfb4b8e2460c2497" translate="yes" xml:space="preserve">
          <source>Reference Manual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6ba86e068ebcbb24f4c6f6a21a664050593544" translate="yes" xml:space="preserve">
          <source>Reference to an array of search directories. These are searched in order before looking in &lt;code&gt;@INC&lt;/code&gt; (if &lt;b&gt;-inc&lt;/b&gt;). Current directory is used if none are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="a0dc93bc9a996d0e87ee1869448bc7db3c222320" translate="yes" xml:space="preserve">
          <source>References are a special type of scalar that point to other data types (including other references).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50974befcb2bfc7d0ac736bc11229b81ee3eaf79" translate="yes" xml:space="preserve">
          <source>References are also used to support object-oriented programming. In perl's OO lexicon, an object is simply a reference that has been blessed into a package (or class). Once blessed, the programmer may now use the reference to access the various methods in the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f023cf599a124b750291900889f7d314ec9caf2" translate="yes" xml:space="preserve">
          <source>References are documented in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; and &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;. Examples of complex data structures are given in &lt;a href=&quot;perldsc&quot;&gt;perldsc&lt;/a&gt; and &lt;a href=&quot;perllol&quot;&gt;perllol&lt;/a&gt;. Examples of structures and object-oriented classes are in &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92593a68da730f578acc31005d526d5997c8f515" translate="yes" xml:space="preserve">
          <source>References are easy to use in Perl. There is just one overriding principle: in general, Perl does no implicit referencing or dereferencing. When a scalar is holding a reference, it always behaves as a simple scalar. It doesn't magically start being an array or hash or subroutine; you have to tell it explicitly to do so, by dereferencing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1768d90c9296a75485266d150073e447cb77523f" translate="yes" xml:space="preserve">
          <source>References are often returned by special subroutines called constructors. Perl objects are just references to a special type of object that happens to know which package it's associated with. Constructors are just special subroutines that know how to create that association. They do so by starting with an ordinary reference, and it remains an ordinary reference even while it's also being an object. Constructors are often named &lt;code&gt;new()&lt;/code&gt; . You</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3bfc78ea450f4a47c9b2b5d8626d9e79a01328" translate="yes" xml:space="preserve">
          <source>References can be created in several ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b0a1db4852d1281bb8500fdd9246c477d9a5c6" translate="yes" xml:space="preserve">
          <source>References in Perl are like names for arrays and hashes. They're Perl's private, internal names, so you can be sure they're unambiguous. Unlike &quot;Barack Obama&quot;, a reference only refers to one thing, and you always know what it refers to. If you have a reference to an array, you can recover the entire array from it. If you have a reference to a hash, you can recover the entire hash. But the reference is still an easy, compact scalar value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbfdecb2d2391d9c8e96eacd3749584f501d4a2" translate="yes" xml:space="preserve">
          <source>References of the appropriate type can spring into existence if you dereference them in a context that assumes they exist. Because we haven't talked about dereferencing yet, we can't show you any examples yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeef9819bba63f30920ae81ea30d63fa3edcd4c4" translate="yes" xml:space="preserve">
          <source>References to other programs or functions are normally in the form of man page references so that cross-referencing tools can provide the user with links and the like. It's possible to overdo this, though, so be careful not to clutter your documentation with too much markup. References to other programs that are not given as man page references should be enclosed in B&amp;lt;&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09c42c7f2b995dd79a331f98e9794ecbbde7748" translate="yes" xml:space="preserve">
          <source>Referencing</source>
          <target state="translated">Referencing</target>
        </trans-unit>
        <trans-unit id="f870d7a74093b8fc74dfb143b0624f7654233dcd" translate="yes" xml:space="preserve">
          <source>Refetch the stack pointer. Used after a callback. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0571dd6ea81c78a99a9749cc8a5e39a6b2c57a92" translate="yes" xml:space="preserve">
          <source>Reflect the functionality of the module, not the implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280f134f03fe31eaa265a45b3d43b18db4aca4fa" translate="yes" xml:space="preserve">
          <source>Reflects certain Unicode settings of Perl. See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; documentation for the &lt;code&gt;-C&lt;/code&gt; switch for more information about the possible values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514989ce439f0131fd7d7ae03128f36f34fefe59" translate="yes" xml:space="preserve">
          <source>Reflects if taint mode is on or off. 1 for on (the program was run with &lt;b&gt;-T&lt;/b&gt;), 0 for off, -1 when only taint warnings are enabled (i.e. with &lt;b&gt;-t&lt;/b&gt; or &lt;b&gt;-TU&lt;/b&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6312ec67c8b0215a01635346ff23ce68e5ec5799" translate="yes" xml:space="preserve">
          <source>Regarding aesthetics of code lay out, about the only thing Larry cares strongly about is that the closing curly bracket of a multi-line BLOCK should line up with the keyword that started the construct. Beyond that, he has other preferences that aren't so strong:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2790589b45378975738284e2ca51f4e9c6e7a880" translate="yes" xml:space="preserve">
          <source>Regarding precedence, the filetest operators, like &lt;code&gt;-f&lt;/code&gt; , &lt;code&gt;-M&lt;/code&gt; , etc. are treated like named unary operators, but they don't follow this functional parenthesis rule. That means, for example, that &lt;code&gt;-f($file).&quot;.bak&quot;&lt;/code&gt; is equivalent to &lt;code&gt;-f &quot;$file.bak&quot;&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06476efc9400736e9db491e3b8f7668fdea23d10" translate="yes" xml:space="preserve">
          <source>Regardless of calling context, calling &lt;code&gt;survey&lt;/code&gt; saves its results in its &lt;code&gt;name2path&lt;/code&gt; and &lt;code&gt;path2name&lt;/code&gt; attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2078f0558afa439d00e67d405247b9ba4edc0b" translate="yes" xml:space="preserve">
          <source>Regardless of the machine architecture on which it runs, the example above should print the following table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cd324f16f0c0c9cdd19f6acf5633153c13722a" translate="yes" xml:space="preserve">
          <source>Regardless of the package in which it is declared, if a lexical variable is ascribed an attribute, the handler that is invoked is the one belonging to the package to which it is typed. For example, the following declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b769c472f18cb9e8ca1c53a6014fda42b17a5a44" translate="yes" xml:space="preserve">
          <source>Regex examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d215aa4b8eb14ea4cfa03d5ffdb7cdb3f3dbaea8" translate="yes" xml:space="preserve">
          <source>Regex options may be placed on the end (&lt;code&gt;'/expected/i'&lt;/code&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d956a551e67ebad4724cd69086824a44b7bd001d" translate="yes" xml:space="preserve">
          <source>Regexes are treated mostly as double-quoted strings, so variable substitution works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfae4e7b72fa21099236ad796e16fa7db3a6c71a" translate="yes" xml:space="preserve">
          <source>Regexes must match a part of the string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338cff56c80a479d055611c7247bcf9a164e1505" translate="yes" xml:space="preserve">
          <source>Regexp Quote-Like Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c193fd7834dd4e2f2d0c3df7459dd9b6d0cff66" translate="yes" xml:space="preserve">
          <source>Regexp-like quote. See &lt;a href=&quot;../perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca599ed3fe6de770a51caf60b0f6908ce450eaf" translate="yes" xml:space="preserve">
          <source>Regexp-like quote. See &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d463a4b21b2664cb244b9f40e3a444f1afd09cd" translate="yes" xml:space="preserve">
          <source>Register a closure to be called when this job is destroyed. The callback will be passed the &lt;code&gt;TAP::Parser::Scheduler::Job&lt;/code&gt; object as it's only argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32768c69ecf0dff5e646d0bfd71db75d2879eebb" translate="yes" xml:space="preserve">
          <source>Register a custom op. See &lt;a href=&quot;perlguts#Custom-Operators&quot;&gt;Custom Operators in perlguts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5424e4e93ac098b5e8beea3526819cfd99f58b1" translate="yes" xml:space="preserve">
          <source>Register a set of hooks to be called when the Perl lexical scope changes at compile time. See &lt;a href=&quot;perlguts#Compile-time-scope-hooks&quot;&gt;Compile-time scope hooks in perlguts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9ad37004c27557ab53b912f7280b8fb9962ace" translate="yes" xml:space="preserve">
          <source>Registered CPAN sites</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7877ae3d518e5a3ac907b1ca5135e66d3b9d8241" translate="yes" xml:space="preserve">
          <source>Registers a custom mro plugin. See &lt;a href=&quot;perlmroapi&quot;&gt;perlmroapi&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7129f516a29ae1b88f95a70e0ada41004cf9e1d" translate="yes" xml:space="preserve">
          <source>Registers a new &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt; with this factory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2077a060ced5f4acb1e56596b98c0e4478aa005" translate="yes" xml:space="preserve">
          <source>Registers call-backs to wait for user input (i.e., during &lt;code&gt;&lt;a href=&quot;../functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; method). This supersedes tkRunning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27b06aab15f95234c4446552363f21ecaed6e8c" translate="yes" xml:space="preserve">
          <source>Registry also implies thread support. When a new thread is created, all references are replaced with new ones, including all objects. If a hash uses the reference address of an object as a key, that connection would be broken. With a registered object, its id will be updated in all hashes registered with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bacb90045e51515a8cca4133e12bf8882319e99" translate="yes" xml:space="preserve">
          <source>Regops</source>
          <target state="translated">Regops</target>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbc4a31dd22babd111133268afa4401e34123ac" translate="yes" xml:space="preserve">
          <source>Regular expression checks for safe file names or mail addresses using &lt;code&gt;\w&lt;/code&gt; may be spoofed by an &lt;code&gt;LC_CTYPE&lt;/code&gt; locale that claims that characters such as &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;|&quot;&lt;/code&gt; are alphanumeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f653e70d0a5f34832e6fd555fea8d484a6091ad7" translate="yes" xml:space="preserve">
          <source>Regular expression look-ahead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6656538264030cf82789e744d1ce709e6f5c78ee" translate="yes" xml:space="preserve">
          <source>Regular expression modifiers are usually written in documentation as e.g., &quot;the &lt;code&gt;/x&lt;/code&gt; modifier&quot;, even though the delimiter in question might not really be a slash. The modifiers &lt;code&gt;/imsxadlup&lt;/code&gt; may also be embedded within the regular expression itself using the &lt;code&gt;(?...)&lt;/code&gt; construct, see &lt;a href=&quot;#Extended-Patterns&quot;&gt;Extended Patterns&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b9b0569784ec03684164534290764251f5a4a5" translate="yes" xml:space="preserve">
          <source>Regular expression pattern matching may surprise you if you're not accustomed to Unicode. Starting in Perl 5.14, several pattern modifiers are available to control this, called the character set modifiers. Details are given in &lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;Character set modifiers in perlre&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6506eb05d7e28ac20c066a5dc5a473a5b60331" translate="yes" xml:space="preserve">
          <source>Regular expression patterns can be compiled using &lt;a href=&quot;perlop#qr%2fSTRING%2fmsixpodualn&quot;&gt;qr//&lt;/a&gt; with actual matching deferred to later. Again, it is whether or not the compilation was done within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; that determines the match behavior, not if the matches are done within such a scope or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3172c4ae8fee97c04bb506eac2e6f47443f5a679" translate="yes" xml:space="preserve">
          <source>Regular expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58710b0061794045424cb99635316dd1d5bcaa15" translate="yes" xml:space="preserve">
          <source>Regular expressions - Perl's regular expression engine is so called NFA (Non-deterministic Finite Automaton), which among other things means that it can rather easily consume large amounts of both time and space if the regular expression may match in several ways. Careful crafting of the regular expressions can help but quite often there really isn't much one can do (the book &quot;Mastering Regular Expressions&quot; is required reading, see &lt;a href=&quot;perlfaq2&quot;&gt;perlfaq2&lt;/a&gt;). Running out of space manifests itself by Perl running out of memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be374f79f7a6dda7b312225eccc1af30acb48497" translate="yes" xml:space="preserve">
          <source>Regular expressions also play a big role in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e793789416bdeebd608abb2fbd64ea7f19b94580" translate="yes" xml:space="preserve">
          <source>Regular expressions have the undeserved reputation of being abstract and difficult to understand. Regular expressions are constructed using simple concepts like conditionals and loops and are no more difficult to understand than the corresponding &lt;code&gt;if&lt;/code&gt; conditionals and &lt;code&gt;while&lt;/code&gt; loops in the Perl language itself. In fact, the main challenge in learning regular expressions is just getting used to the terse notation used to express these concepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c932d258fd79007d480838ca74a010e59fd68d2" translate="yes" xml:space="preserve">
          <source>Regular expressions match whole characters. For example, &lt;code&gt;&quot;.&quot;&lt;/code&gt; matches a whole character instead of only a single byte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79155533f0f2c06638d1868af933b0e25966e2d" translate="yes" xml:space="preserve">
          <source>Regular expressions provide a terse and powerful programming language. As with most other power tools, power comes together with the ability to wreak havoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632284d6d44cd285a0879407d2b79c59fd92e9cc" translate="yes" xml:space="preserve">
          <source>Regular file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2c6bd7eee60827022c13e6cc38e892107043fd" translate="yes" xml:space="preserve">
          <source>Regular variables and functions are quite easy to pass: just pass in a reference to an existing or anonymous variable or function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6331fbf9d7d8d43382e44e21b406e367129ecf9" translate="yes" xml:space="preserve">
          <source>Reinitialize the connection, flushing all I/O and account information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df1d5b7df0c57f96ce32609e0558ca2f232e641" translate="yes" xml:space="preserve">
          <source>Reinitializes the Test::Builder singleton to its original state. Mostly useful for tests run in persistent environments where the same test might be run multiple times in the same process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207e12a4b3002c04d19de8b0142ced7d247caee9" translate="yes" xml:space="preserve">
          <source>Reinventing the wheel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717630b2cad6e540d8db910a43ea8b5ec4baa4f7" translate="yes" xml:space="preserve">
          <source>Related to this, you probably should not use the &lt;code&gt;-r&lt;/code&gt; option of Configure in AIX, because that affects of how the &lt;code&gt;nm&lt;/code&gt; tool is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354032ada697719ccb58ca87cd221831508c42b3" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad91c52a0a60eb223f0b73047b8954c0e909fcea" translate="yes" xml:space="preserve">
          <source>Relative backreferences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9025d894508169e5e903de46adc4c6ac9d714912" translate="yes" xml:space="preserve">
          <source>Relative referencing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41f56cea1ac933d25c57aebc6522e2b6c58eb87" translate="yes" xml:space="preserve">
          <source>Release</source>
          <target state="translated">Release</target>
        </trans-unit>
        <trans-unit id="8ebf1f02960a88683ce31dd07c926d87fc656eab" translate="yes" xml:space="preserve">
          <source>Release 5.005 grandfathered old global symbol names by providing preprocessor macros for extension source compatibility. As of release 5.6, these preprocessor definitions are not available by default. The POLLUTE flag specifies that the old names should still be defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656417ddc071609de63ac9a1f4d853854b5a0fdc" translate="yes" xml:space="preserve">
          <source>Release considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac91889aeb38f3b3b4a4db4a0e6d3642a61874e" translate="yes" xml:space="preserve">
          <source>Release notes or changelogs should be produced for each release of your software describing user-visible changes to your module, in terms relevant to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba1c61f378b869ee5ff1bf4815e10dba0616c84" translate="yes" xml:space="preserve">
          <source>Releases a Perl interpreter. See &lt;a href=&quot;perlembed&quot;&gt;perlembed&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7b5a45a9634bcc78901f710b5c0f2b2c340dd7" translate="yes" xml:space="preserve">
          <source>Releases a mutual exclusion lock on sv if a suitable module has been loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15aaabc3fc05a859dc53c1dbd9485280dc3c8707" translate="yes" xml:space="preserve">
          <source>Relevant only if Perl is compiled with the &lt;code&gt;malloc&lt;/code&gt; included with the Perl distribution; that is, if &lt;code&gt;perl -V:d_mymalloc&lt;/code&gt; is &quot;define&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943874c75240886ef86a43aa1a27aa553887e60b" translate="yes" xml:space="preserve">
          <source>Relevant only if your Perl executable was built with &lt;b&gt;-DDEBUGGING&lt;/b&gt;, this controls the behaviour of global destruction of objects and other references. See &lt;a href=&quot;perlhacktips#PERL_DESTRUCT_LEVEL&quot;&gt;PERL_DESTRUCT_LEVEL in perlhacktips&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9212a457c3732633841ee386978ed99e344f1331" translate="yes" xml:space="preserve">
          <source>Relies on being called from within CPAN.pm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc501c27012ecb7ab368ca72ce5b915779f3eaba" translate="yes" xml:space="preserve">
          <source>Reloads all indices if they have not been read for more than &lt;code&gt;$CPAN::Config-&amp;gt;{index_expire}&lt;/code&gt; days.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0fbd5e977146b9d49a1bb9513dae2c00d4cab0" translate="yes" xml:space="preserve">
          <source>Remember not to encode a full URI, you need to escape each component separately and then join them together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a11550a2b50920bc08b8bae13e607c48b5110ac" translate="yes" xml:space="preserve">
          <source>Remember not to use &lt;code&gt;=&lt;/code&gt; when you need &lt;code&gt;=~&lt;/code&gt; ; these two constructs are quite different:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fc2e258765c2443b977ec7fde73394c2ad46f9" translate="yes" xml:space="preserve">
          <source>Remember that &quot;my&quot;, &quot;our&quot;, &quot;local&quot; and &quot;state&quot; bind tighter than comma.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eaeae41b9d2cba51fd4b49832eb6ea43d3d9e3e" translate="yes" xml:space="preserve">
          <source>Remember that &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt;'s diag function will not add newlines to the end of output and test_diag will. So to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca827509fa317de9b151f205a99c10ad34bc2a42" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;$^N&lt;/code&gt; is set to whatever was matched by the last completed capture group. This prints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a6bc5b994852a181e7009e78d2e536abe58494" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int()&lt;/a&gt;&lt;/code&gt; merely truncates toward 0. For rounding to a certain number of digits, &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf()&lt;/a&gt;&lt;/code&gt; is usually the easiest route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3286289db77afd9191ea9bf57cb305d2f1b7b35" translate="yes" xml:space="preserve">
          <source>Remember that &lt;code&gt;hv_store&lt;/code&gt; and &lt;code&gt;hv_fetch&lt;/code&gt; return &lt;code&gt;SV**&lt;/code&gt; 's and not just &lt;code&gt;SV*&lt;/code&gt; . To access the scalar value, you must first dereference the return value. However, you should check to make sure that the return value is not NULL before dereferencing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd12c8c58071e3d0f8ec874ed5f0be457402b8c4" translate="yes" xml:space="preserve">
          <source>Remember that Perl distinguishes between a key not existing in the hash, and the key existing in the hash but having a corresponding value of &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. The two possibilities can be tested with the &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined()&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32d78dc03b8840549601d8279db2304a336e903" translate="yes" xml:space="preserve">
          <source>Remember that a umask is a number, usually given in octal; it is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d7a726ced16e5e5bdec26b5e8725ff4effd3af" translate="yes" xml:space="preserve">
          <source>Remember that both map and grep expect a LIST argument, so doing this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf98bc15c6d2e6d5b3119e11999c1516475b1b22" translate="yes" xml:space="preserve">
          <source>Remember that it has to be &lt;code&gt;patcopy+1&lt;/code&gt; because the first character of the string is the &lt;code&gt;U&lt;/code&gt; which has been swallowed into &lt;code&gt;datumtype!&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc569ae6eac2ea65834accd6b0d6887e151184a" translate="yes" xml:space="preserve">
          <source>Remember that lines consisting entirely of whitespace will disappear, since the first part of the alternation can match the entire string and replace it with nothing. If you need to keep embedded blank lines, you have to do a little more work. Instead of matching any whitespace (since that includes a newline), just match the other whitespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e76ea83298c76444ca3d7987b1205c255f1a2be" translate="yes" xml:space="preserve">
          <source>Remember that many operations behave differently in a list context than they do in a scalar one. See &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646cf6fab482d7d4b5340740e234cef55c79a20a" translate="yes" xml:space="preserve">
          <source>Remember that most patterns (using //) will need to be anchored with a leading ^, e.g., &lt;code&gt;/^EXIT/&lt;/code&gt; rather than &lt;code&gt;/EXIT/&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5c399fc5d7626984daea5c2fe086f26307e484" translate="yes" xml:space="preserve">
          <source>Remember that the entry in the hash will still be there even if the referenced variable goes out of scope, and that it is entirely possible for Perl to subsequently allocate a different variable at the same address. This will mean a new variable might accidentally be associated with the value for an old.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf591952a26d00c380cfecee655ada8011d7bc35" translate="yes" xml:space="preserve">
          <source>Remember that unless you are working on a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6358d39d1e6eaeb38857ebca766827c7301190a1" translate="yes" xml:space="preserve">
          <source>Remember that you don't have to do this for an &lt;code&gt;SV *&lt;/code&gt; . The reference documentation for all core typemaps can be found in &lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemap&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555123372304909e0ad37527dea82816796217cb" translate="yes" xml:space="preserve">
          <source>Remember the following important rule: There is &lt;b&gt;no rule&lt;/b&gt; that relates the behavior of an expression in list context to its behavior in scalar context, or vice versa. It might do two totally different things. Each operator and function decides which sort of value would be most appropriate to return in scalar context. Some operators return the length of the list that would have been returned in list context. Some operators return the first value in the list. Some operators return the last value in the list. Some operators return a count of successful operations. In general, they do what you want, unless you want consistency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e3bd79be5e16cdbfb3336b03f971bf4d0bdbdd" translate="yes" xml:space="preserve">
          <source>Remember these important facts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3be81bb1bc46e2fb0131edbb793025f77c5a69" translate="yes" xml:space="preserve">
          <source>Remember to ask your translators about numeral formatting in their language, so that you can override the &lt;code&gt;numf&lt;/code&gt; method as appropriate. Typical variables in number formatting are: what to use as a decimal point (comma? period?); what to use as a thousands separator (space? nonbreaking space? comma? period? small middot? prime? apostrophe?); and even whether the so-called &quot;thousands separator&quot; is actually for every third digit -- I've heard reports of two hundred thousand being expressible as &quot;2,00,000&quot; for some Indian (Subcontinental) languages, besides the less surprising &quot;200 000&quot;, &quot;200.000&quot;, &quot;200,000&quot;, and &quot;200'000&quot;. Also, using a set of numeral glyphs other than the usual ASCII &quot;0&quot;-&quot;9&quot; might be appreciated, as via &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr/0-9/\x{0966}-\x{096F}/&lt;/a&gt;&lt;/code&gt; for getting digits in Devanagari script (for Hindi, Konkani, others).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2114f10064a04bb74059d053450f0147cd1c5a" translate="yes" xml:space="preserve">
          <source>Remember to check the modules that came with your distribution, and CPAN as well--someone may already have written a module to do it. On Windows, try &lt;a href=&quot;http://search.cpan.org/perldoc/Win32::API&quot;&gt;Win32::API&lt;/a&gt;. On Macs, try &lt;a href=&quot;http://search.cpan.org/perldoc/Mac::Carbon&quot;&gt;Mac::Carbon&lt;/a&gt;. If no module has an interface to the C function, you can inline a bit of C in your Perl source with &lt;a href=&quot;http://search.cpan.org/perldoc/Inline::C&quot;&gt;Inline::C&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e578e97ce330a4635b211fac80fcb964a9a0c638" translate="yes" xml:space="preserve">
          <source>Remember to free the previous PV buffer. There are many things to check. Beware that the existing pointer may be involved in copy-on-write or other mischief, so do &lt;code&gt;SvOOK_off(sv)&lt;/code&gt; and use &lt;code&gt;sv_force_normal&lt;/code&gt; or &lt;code&gt;SvPV_force&lt;/code&gt; (or check the SvIsCOW flag) first to make sure this modification is safe. Then finally, if it is not a COW, call &lt;code&gt;SvPV_free&lt;/code&gt; to free the previous PV buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbdda7d015901994cff299901620d94df0e7929" translate="yes" xml:space="preserve">
          <source>Remember to keep in mind verb agreement (or adjectives too, in other languages), as in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea14aadc90613c4067d4c78691b62504dd496234" translate="yes" xml:space="preserve">
          <source>Remember to use a hefty wad of stack (I use 2000000)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288c61995661b35931506b0caae197170c722414" translate="yes" xml:space="preserve">
          <source>Remember we're in our tiny program with a problem, we should have a look at where we are, and what our data looks like. First of all let's view some code at our present position (the first line of code in this case), via '&lt;b&gt;v&lt;/b&gt;':</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ef210dc6df90e5b38374c442963d215fab9ab2" translate="yes" xml:space="preserve">
          <source>Remember, the returned item is not removed from the queue, so manipulating a &lt;code&gt;peek&lt;/code&gt; ed at reference affects the item on the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff4183fe49a6a6309b98413d71a4c51c83971ba" translate="yes" xml:space="preserve">
          <source>Remember: if you want your subclass to be automatically used by the parser, you'll have to register it with &lt;a href=&quot;resultfactory#register_type&quot;&gt;register_type in TAP::Parser::ResultFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027c26e9ae112bc7c5d4192494b974ff4b801557" translate="yes" xml:space="preserve">
          <source>Remember: the value of &lt;code&gt;$/&lt;/code&gt; is a string, not a regex. &lt;b&gt;awk&lt;/b&gt; has to be better for something. :-)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2304aa6585251451562aa451f542cd4915e4816b" translate="yes" xml:space="preserve">
          <source>Remind the translators to consider the case where N is 0: &quot;0 files found&quot; isn't exactly natural-sounding in any language, but it may be unacceptable in many -- or it may condition special kinds of agreement (similar to English &quot;I didN'T find ANY files&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1a02136a4770873ad1351ec44089fc6396abba" translate="yes" xml:space="preserve">
          <source>Remove IO from the list of file descriptors for the next poll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4205c2e4e5f0753c53b4cd2157f83e877d79608" translate="yes" xml:space="preserve">
          <source>Remove a signal from the SigSet object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d773b7155edc83b83cb81a8d5e214998acde808" translate="yes" xml:space="preserve">
          <source>Remove all the given handles from the object. This method also works by the &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; of the handles. So the exact handles that were added need not be passed, just handles that have an equivalent &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5b86c026a0888d3d21b8af5552020cd0cfcac1" translate="yes" xml:space="preserve">
          <source>Remove and destroy the message queue from the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aaf7cd9a2aecb8b071738d93a877aedd07453f1" translate="yes" xml:space="preserve">
          <source>Remove and destroy the semaphore set from the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08922679889ead1233ce9875bead229564568322" translate="yes" xml:space="preserve">
          <source>Remove any magic of type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e6d1c7c8255afa8c848bcdf81bba7435f9b1e6" translate="yes" xml:space="preserve">
          <source>Remove any string offset. You should normally use the &lt;code&gt;SvOOK_off&lt;/code&gt; macro wrapper instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca26333c9cffa9dcdd1f9ac9077e465bdac01657" translate="yes" xml:space="preserve">
          <source>Remove last element of the array and return it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd74f70e82f716fe737ebdd68a369175399ee5d4" translate="yes" xml:space="preserve">
          <source>Remove last element of the array and return it. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7ce8cb1e76d7785d81a4336476884c3f8f3434" translate="yes" xml:space="preserve">
          <source>Remove the directory with the name &lt;code&gt;DIR&lt;/code&gt; . If &lt;code&gt;RECURSE&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b3903b90ed14c4b645d49c69219c3c2b4eabbd" translate="yes" xml:space="preserve">
          <source>Remove the first element of the array (shifting other elements down) and return it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7915d09356edb2d08ee58387fa2807f4d9125c2f" translate="yes" xml:space="preserve">
          <source>Remove the first element of the array (shifting other elements down) and return it. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6da8ce6c3a71d84dabc65f4953446b1ad5eaa7" translate="yes" xml:space="preserve">
          <source>Remove the shared memory segment from the system or mark it as removed as long as any processes are still attached to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2b8c36a992cb782bf9b719ffcacdc1994f25af" translate="yes" xml:space="preserve">
          <source>Removed features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca09374fc77d4a9c28f5008d23302798f76def3f" translate="yes" xml:space="preserve">
          <source>Removed in Perl 5.10</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7feda984d74007c898a3562e8d4b8c724e3687d4" translate="yes" xml:space="preserve">
          <source>Removed in Perl 5.8.8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c003ba205d8c4fe73191a070ec08a0106b9f815" translate="yes" xml:space="preserve">
          <source>Removed in Perl 5.9.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5063928e2ec4eb91ad2be24363b0ef7098c167e" translate="yes" xml:space="preserve">
          <source>Removed in Perl 5.9.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db90acb7ef3a6dde761f4676e88df84e20802090" translate="yes" xml:space="preserve">
          <source>Removed in Perl v5.10.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ffd3d68bce71e440bc44944ce7cd567641fc53d" translate="yes" xml:space="preserve">
          <source>Removed in: 5.11.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7606a447a1adad6fd32090f792adebaa6d61391c" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;@codes&lt;/code&gt; as valid codes for the parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb1eea9e121152498b29c0887262ecf49f84161" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;@directives&lt;/code&gt; as valid directives for the parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7dce2ee5720ded6ace47211f4127a78a8bc823" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;@targets&lt;/code&gt; as valid targets for the parse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e457c2afa95057438297f0c2f7a08b01f2bed1" translate="yes" xml:space="preserve">
          <source>Removes a given test from results. This is a no-op if the test name is not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6170266d9cf1abd067a88e768b95c547bffbe239" translate="yes" xml:space="preserve">
          <source>Removes a name from a stash's internal list of effective names. If this is the name returned by &lt;code&gt;HvENAME&lt;/code&gt; , then another name in the list will take its place (&lt;code&gt;HvENAME&lt;/code&gt; will use it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809993536a04c0412f321f50161f58b0d57e7cfc" translate="yes" xml:space="preserve">
          <source>Removes all key/value pairs with key &lt;code&gt;$key&lt;/code&gt; from the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881ae4af57d8a01c05348ec9fb6a313da72be1db" translate="yes" xml:space="preserve">
          <source>Removes all magic of type &lt;code&gt;type&lt;/code&gt; from an SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d57ef147df287f0950a79a758b1f234220edab5" translate="yes" xml:space="preserve">
          <source>Removes all magic of type &lt;code&gt;type&lt;/code&gt; with the specified &lt;code&gt;vtbl&lt;/code&gt; from an SV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb20ac267a12dd5bf7ea9c2de38f7f76336ee66" translate="yes" xml:space="preserve">
          <source>Removes and returns the first element of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57dd5066c021b71185b5e0fb65bafc28180f3c03" translate="yes" xml:space="preserve">
          <source>Removes and returns the last element of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d90152ed1c0eca472fdee0bd8ef8961b38208a" translate="yes" xml:space="preserve">
          <source>Removes and returns the specified number of items (defaults to 1) from the specified index position in the queue (0 is the head of the queue). When called with no arguments, &lt;code&gt;extract&lt;/code&gt; operates the same as &lt;code&gt;dequeue_nb&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f380bd3157b8fd25954da97a5468fe271c2abeb" translate="yes" xml:space="preserve">
          <source>Removes any entries with names matching any of the given filenames from the in-memory archive. Returns a list of &lt;code&gt;Archive::Tar::File&lt;/code&gt; objects that remain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46574b8be47fb344cd76c91139f93a27d5320b33" translate="yes" xml:space="preserve">
          <source>Removes files (even if readonly)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a08e1d7b6e614e50d42b649760f9cfc8ea485c" translate="yes" xml:space="preserve">
          <source>Removes files and directories - recursively (even if readonly)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f180c566519c24cd55bbd6c9be1a8802527bbf" translate="yes" xml:space="preserve">
          <source>Removes one SV from the end of the array, reducing its size by one and returning the SV (transferring control of one reference count) to the caller. Returns &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; if the array is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776a73e7b3694675ac208e6c27b3b30e60b64342" translate="yes" xml:space="preserve">
          <source>Removes one SV from the start of the array, reducing its size by one and returning the SV (transferring control of one reference count) to the caller. Returns &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; if the array is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735d1cbf14be45e8708ade1447bb133c3aac27be" translate="yes" xml:space="preserve">
          <source>Removes redundant portions of file specifications and returns results in native syntax unless Unix filename reporting has been enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343f1c2f52c3d8dcf7da53d9d80db009530f49dd" translate="yes" xml:space="preserve">
          <source>Removes the elements designated by OFFSET and LENGTH from an array, and replaces them with the elements of LIST, if any. In list context, returns the elements removed from the array. In scalar context, returns the last element removed, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no elements are removed. The array grows or shrinks as necessary. If OFFSET is negative then it starts that far from the end of the array. If LENGTH is omitted, removes everything from OFFSET onward. If LENGTH is negative, removes the elements from OFFSET onward except for -LENGTH elements at the end of the array. If both OFFSET and LENGTH are omitted, removes everything. If OFFSET is past the end of the array and a LENGTH was provided, Perl issues a warning, and splices at the end of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5f1083ce2b66e546ddef1a96560cdca11f2193" translate="yes" xml:space="preserve">
          <source>Removes the elements designated by OFFSET and LENGTH from an array, and replaces them with the elements of LIST, if any. In list context, returns the elements removed from the array. In scalar context, returns the last element removed, or &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no elements are removed. The array grows or shrinks as necessary. If OFFSET is negative then it starts that far from the end of the array. If LENGTH is omitted, removes everything from OFFSET onward. If LENGTH is negative, removes the elements from OFFSET onward except for -LENGTH elements at the end of the array. If both OFFSET and LENGTH are omitted, removes everything. If OFFSET is past the end of the array and a LENGTH was provided, Perl issues a warning, and splices at the end of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4d21ffe02b9208cd41895cba1b6ac56478169b" translate="yes" xml:space="preserve">
          <source>Removes the files listed in a $packlist_file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c8fa888188962e0f82082eb5ec899f29cb7f2f" translate="yes" xml:space="preserve">
          <source>Removes the last filter that was applied to the DBM file associated with &lt;code&gt;$db&lt;/code&gt; , if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958639ea0aa2c2aa0215e5881cb6e9eecf4443b5" translate="yes" xml:space="preserve">
          <source>Removes the requested number of items (default is 1) from the head of the queue, and returns them. If the queue contains fewer than the requested number of items, then it immediately (i.e., non-blocking) returns whatever items there are on the queue. If the queue is empty, then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec50374edbc42fbde5226187a161063372e5a25" translate="yes" xml:space="preserve">
          <source>Removes the requested number of items (default is 1) from the head of the queue, and returns them. If the queue contains fewer than the requested number of items, then the thread will be blocked until the requisite number of items are available (i.e., until other threads &amp;lt;enqueue&amp;gt; more items).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df6cfbdfddf1fac82ca5fddb9891f3ddb2098dd" translate="yes" xml:space="preserve">
          <source>Removes the requested number of items (default is 1) from the head of the queue, and returns them. If the queue contains fewer than the requested number of items, then the thread will be blocked until the requisite number of items are available, or until the timeout is reached. If the timeout is reached, it returns whatever items there are on the queue, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the queue is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f94e09734e307d7590468dedfa423f230c227f4" translate="yes" xml:space="preserve">
          <source>Removes the restriction on the %hash's keyset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f548f5216a2bff8836328b3856ebee4fa508c8" translate="yes" xml:space="preserve">
          <source>Removing things is a much more dangerous proposition than creating things. As such, there are certain conditions that &lt;code&gt;remove_tree&lt;/code&gt; may encounter that are so dangerous that the only sane action left is to kill the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80beee49629b23b85284ecc1862bdfaca20ee299" translate="yes" xml:space="preserve">
          <source>Rename a file on the remote FTP server from &lt;code&gt;OLDNAME&lt;/code&gt; to &lt;code&gt;NEWNAME&lt;/code&gt; . This is done by sending the RNFR and RNTO commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3012ff7da46214e954150145eb0f38e1b162b8" translate="yes" xml:space="preserve">
          <source>Rename the current file to $new_name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2143b98f30e20a57eafd5e99d8e4626187d94b19" translate="yes" xml:space="preserve">
          <source>Rename the file of the in-memory archive to $new_name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3190f9fa89e7c1a578490836d655b0eef2259cde" translate="yes" xml:space="preserve">
          <source>Renamed to &lt;code&gt;Class::Struct&lt;/code&gt; and modified by Jim Miner, 1997-04-02.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746933bbfadd0d015fb0f5cef0f99f8789b8c3b4" translate="yes" xml:space="preserve">
          <source>Render Pod with ANSI color escapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d353704fc90d73163b33a1077fefe42f84d9a425" translate="yes" xml:space="preserve">
          <source>Render Pod with terminal escapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a06e164621da6212cb23a64e613b86284d9b8a" translate="yes" xml:space="preserve">
          <source>Renderings usually include a banner line identifying the function name or stringified subref. This suppresses the printing of the banner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2465d0a6e5df0d7a39af6d7760dce88c9cf728d8" translate="yes" xml:space="preserve">
          <source>Renders code in a typewriter font, or gives some other indication that this represents program text (&quot;&lt;code&gt;C&amp;lt;gmtime($^T)&amp;gt;&lt;/code&gt; &quot;) or some other form of computerese (&quot;&lt;code&gt;C&amp;lt;drwxr-xr-x&amp;gt;&lt;/code&gt; &quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8802423802e5328366ef6d324218b46f675df5" translate="yes" xml:space="preserve">
          <source>Renders only bar() from foo.pl. To see main, drop the ',bar'. To see both, add ',-main'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7ffe27769737b77fe22a1b19e1f80904630a03" translate="yes" xml:space="preserve">
          <source>Reopen STDIN, STDOUT, and STDERR so they're not connected to the old tty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50403581fa8d364c53f5c65182aae61f98504ad4" translate="yes" xml:space="preserve">
          <source>Reopens file and restores pointer; if function fails, underlying filehandle may be closed, or pointer may be in a different position. (VMS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d932850e50913dc3862aecc2a74417d65c0b852" translate="yes" xml:space="preserve">
          <source>Repeat Step (2) in respect of the second operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb07dc7ea8229d420ce2ac387c7ea0a202d45562" translate="yes" xml:space="preserve">
          <source>Repeat last &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08efeab209d66736e16ea6a2dfdea9bdfe05db92" translate="yes" xml:space="preserve">
          <source>Repeated Patterns Matching a Zero-length Substring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde43df7c92f017fb14d13de3aae28a8813ac4fe" translate="yes" xml:space="preserve">
          <source>Repeating Format Lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43149858d5d5f79dfa2faccd2ca041cee85da454" translate="yes" xml:space="preserve">
          <source>Repeating a character in a character class has no effect; it's considered to be in the set only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85fe8562748724d58fdb6dc77267e0147ad4210" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;5.22.0&lt;/code&gt; with your respective version of Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18962e5ac47b68c698be2cba09a95de209f42f3c" translate="yes" xml:space="preserve">
          <source>Replace functions with equivalents which succeed or die</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c92ec8d2541924e350a8c75b34361906527bb30" translate="yes" xml:space="preserve">
          <source>Replace functions with ones that succeed or die with lexical scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c07f10b4913cc3e1911ba0677449ebf74f893b6" translate="yes" xml:space="preserve">
          <source>Replace the current content of the file with the new content. This only affects the in-memory archive, not the on-disk version until you write it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf1e4e8bdb2fe628a8abd000e1f839c770063f2" translate="yes" xml:space="preserve">
          <source>Replacing &lt;a href=&quot;#precision()&quot;&gt;precision()&lt;/a&gt; with &lt;a href=&quot;#accuracy()&quot;&gt;accuracy()&lt;/a&gt; is probably not what you want, either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c3d01a224d7079c4a6658a1f97bf7007d32ca6" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;quotewords('\s+', 0, q{this   is...})&lt;/code&gt; with &lt;code&gt;shellwords(q{this   is...})&lt;/code&gt; is a simpler way to accomplish the same thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3db867fce0e13de8877d0bea95da44c88a5728a" translate="yes" xml:space="preserve">
          <source>Report &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; &amp;amp;subroutine&lt;/code&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6dfbcd24681e5daa1341fd47a225dd5d1dd5cd" translate="yes" xml:space="preserve">
          <source>Report successful build on this system to perl porters. Forces &lt;b&gt;-S&lt;/b&gt; and &lt;b&gt;-C&lt;/b&gt;. Forces and supplies values for &lt;b&gt;-s&lt;/b&gt; and &lt;b&gt;-b&lt;/b&gt;. Only prompts for a return address if it cannot guess it (for use with &lt;b&gt;make&lt;/b&gt;). Honors return address specified with &lt;b&gt;-r&lt;/b&gt;. You can use this with &lt;b&gt;-v&lt;/b&gt; to get more complete data. Only makes a report if this system is less than 60 days old.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046a0ac0fa082001e63886b95b1ea0a1b3dc1186" translate="yes" xml:space="preserve">
          <source>Report unsuccessful build on this system. Forces &lt;b&gt;-C&lt;/b&gt;. Forces and supplies a value for &lt;b&gt;-s&lt;/b&gt;, then requires you to edit the report and say what went wrong. Alternatively, a prepared report may be supplied using &lt;b&gt;-f&lt;/b&gt;. Only prompts for a return address if it cannot guess it (for use with &lt;b&gt;make&lt;/b&gt;). Honors return address specified with &lt;b&gt;-r&lt;/b&gt;. You can use this with &lt;b&gt;-v&lt;/b&gt; to get more complete data. Only makes a report if this system is less than 60 days old.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea266d59d6bb66aa6058e452a22d24952cd32375" translate="yes" xml:space="preserve">
          <source>Reporting Warnings from a Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdffdcb8b2df49b8674c54cfb9fc8b8d0483959" translate="yes" xml:space="preserve">
          <source>Reports on the SV's length in bytes, calling length magic if available, but does not set the UTF8 flag on the sv. It will fall back to 'get' magic if there is no 'length' magic, but with no indication as to whether it called 'get' magic. It assumes the sv is a PVMG or higher. Use sv_len() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0cd51690b308d83c8c2a5a9e2a3a4a64f9b99c" translate="yes" xml:space="preserve">
          <source>Reports the name of a directory only AFTER all its entries have been reported. Entry point &lt;code&gt;finddepth()&lt;/code&gt; is a shortcut for specifying &lt;code&gt;{ bydepth =&amp;gt; 1 }&lt;/code&gt; in the first argument of &lt;code&gt;find()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3875b10d66f76adea8b68994e05e1f77fbfd96" translate="yes" xml:space="preserve">
          <source>Reports whether or not a given result has passed. Anything which is &lt;b&gt;not&lt;/b&gt; a test result returns true. This is merely provided as a convenient shortcut which allows you to do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5162ff86f407ffbb175a07ee29f628d9cf194242" translate="yes" xml:space="preserve">
          <source>Reports whether or not a given result has passed. Anything which is &lt;b&gt;not&lt;/b&gt; a test result returns true. This is merely provided as a convenient shortcut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df62cf802fb1309bc3020785649077d1b279257f" translate="yes" xml:space="preserve">
          <source>Repository available at &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/ExtUtils-MakeMaker&quot;&gt;https://github.com/Perl-Toolchain-Gang/ExtUtils-MakeMaker&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae96cfe64a1056e26aed0b66585fcf6f95903fc4" translate="yes" xml:space="preserve">
          <source>Represent &quot;section&quot; attributes of L codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cad6326d95f5c394a2a0ece052b89d37477f9a5" translate="yes" xml:space="preserve">
          <source>Represents a single test 'job'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8100db6b0c279e38c95d1ae67d91b656c907fd" translate="yes" xml:space="preserve">
          <source>Request For Comment, which despite the timid connotations is the name of a series of important standards documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7883267dffd6a71ad1378c3d92086cbab7d043" translate="yes" xml:space="preserve">
          <source>Request a queue run for the DOMAIN given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a73e37efc9cbef432a388c9fbf6879bd9ac341" translate="yes" xml:space="preserve">
          <source>Request help text (a short summary of commands that are understood by this implementation) from the server. Returns the text or undef upon failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1612b368042a2309ea4276ed98c83bd230e51f" translate="yes" xml:space="preserve">
          <source>Request help text from the server. Returns the text or undef upon failure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4100a502a9c8519f4e6dbb571077788846b32bb" translate="yes" xml:space="preserve">
          <source>Request less of something</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcdf3ecd72e075dd35b1b9f6a5a6a70bbfea05a" translate="yes" xml:space="preserve">
          <source>Request remote server status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d352bc8e04baba583b9f5e42d86f03d7102ebd" translate="yes" xml:space="preserve">
          <source>Request remote server system identification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5945a68b281549f7a7e833e39905826baf9a2a3" translate="yes" xml:space="preserve">
          <source>Request the server to expand the given address Returns an array which contains the text read from the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c10131bb29894d768d5b1a8f80ebec41f9e1827" translate="yes" xml:space="preserve">
          <source>Requesting a particular byte ordering may be necessary when you work with binary data coming from some specific architecture whereas your program could run on a totally different system. As an example, assume you have 24 bytes containing a stack frame as it happens on an Intel 8086:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae9a1066366d922cf90824c30342dd984d71dc4" translate="yes" xml:space="preserve">
          <source>Requesting an unknown identifier is a fatal error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdde830ee962731505722af98db043d4e2b3e60" translate="yes" xml:space="preserve">
          <source>Requests that a human-readable string representation of the numeric address be returned directly, rather than performing a name resolve operation that may convert it into a hostname. This will also avoid potentially-blocking network IO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34dc163da627f35458c83c8246ac1cb61e2f2f2b" translate="yes" xml:space="preserve">
          <source>Requests that the port number be returned directly as a number representation rather than performing a name resolve operation that may convert it into a service name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa99d77de6103db99e699a2ff8298f2936928b5" translate="yes" xml:space="preserve">
          <source>Require that at least version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22fcedf182377afe7d9937912389585bf898ccac" translate="yes" xml:space="preserve">
          <source>Required Software for Compiling Perl on QNX4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b070a841a6544f8652efff9a9903ca945164a11a" translate="yes" xml:space="preserve">
          <source>Requires a MODULE name as an argument, returns the perl version when that module first appeared in core as ordered by perl version number or undef ( in scalar context ) or an empty list ( in list context ) if that module is not in core.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cebc1b242bdc66e2f3ffebb8b55b2acf5d50d89" translate="yes" xml:space="preserve">
          <source>Requires a MODULE name as an argument, returns the perl version when that module first appeared in core as ordered by release date or undef ( in scalar context ) or an empty list ( in list context ) if that module is not in core.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728771158c1bbd5031639e2b1c1d32b18089fed7" translate="yes" xml:space="preserve">
          <source>Requiring end-user programmers to change just a few language constructs, even language constructs which no well-educated developer would ever intentionally use is tantamount to saying &quot;you should not upgrade to a new release of Perl unless you have 100% test coverage and can do a full manual audit of your codebase.&quot; If we were to have tools capable of reliably upgrading Perl source code from one version of Perl to another, this concern could be significantly mitigated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a9cad2d4b28b35c347301315fac8cb2ab7f4ff" translate="yes" xml:space="preserve">
          <source>Requiring this simple adjustment allows the returned arrays to be significantly smaller than otherwise, up to a factor of 10, speeding up searching through them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7aaacc976d0136a0413180e35231597c9fc38df" translate="yes" xml:space="preserve">
          <source>Reset back to the default value &lt;code&gt;1&lt;/code&gt; when you are finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36172a6b379cf46ef3ee9780179fcadb80e672d8" translate="yes" xml:space="preserve">
          <source>Reset the status of the remote POP3 server. This includes resetting the status of all messages to not be deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4151da3198bcfc1a5da89032ab14cc889a12317e" translate="yes" xml:space="preserve">
          <source>Reset the status of the server. This may be called after a message has been initiated, but before any data has been sent, to cancel the sending of the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02dc3ed31f4b7eb772495a9ee888a245d069745b" translate="yes" xml:space="preserve">
          <source>Resets all the output filehandles back to their defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df728e7bf105ac7f581a9dd0e636eb42c3068620" translate="yes" xml:space="preserve">
          <source>Resetting &lt;code&gt;&quot;A-Z&quot;&lt;/code&gt; is not recommended because you'll wipe out your &lt;code&gt;@ARGV&lt;/code&gt; and &lt;code&gt;@INC&lt;/code&gt; arrays and your &lt;code&gt;%ENV&lt;/code&gt; hash. Resets only package variables; lexical variables are unaffected, but they clean themselves up on scope exit anyway, so you'll probably want to use them instead. See &lt;a href=&quot;#my&quot;&gt;my&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f162e60a9bad148199eb54adf329825dd227d7" translate="yes" xml:space="preserve">
          <source>Resetting &lt;code&gt;&quot;A-Z&quot;&lt;/code&gt; is not recommended because you'll wipe out your &lt;code&gt;@ARGV&lt;/code&gt; and &lt;code&gt;@INC&lt;/code&gt; arrays and your &lt;code&gt;%ENV&lt;/code&gt; hash. Resets only package variables; lexical variables are unaffected, but they clean themselves up on scope exit anyway, so you'll probably want to use them instead. See &lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7f958cc028becfb4b2bec9c474bd2d5e8b6095" translate="yes" xml:space="preserve">
          <source>Resolve</source>
          <target state="translated">Resolve</target>
        </trans-unit>
        <trans-unit id="76f899686a2e586116d54bb4545f857f59fe7fe9" translate="yes" xml:space="preserve">
          <source>Resolves a POD link target (typically a module or POD file name) and section name to a URL. The resulting link will be returned for the above examples as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe8cda39bfcaf85efe77cca4bd558244a35eb77" translate="yes" xml:space="preserve">
          <source>Resolves a man page link target and numeric section to a URL. The resulting link will be returned for the above examples as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f335f62fb1319094ed8c85a104148776a182ed6" translate="yes" xml:space="preserve">
          <source>Resolving hostnames into IP addresses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817f6d32d45791e684f36eedfcfbf9aabc013c92" translate="yes" xml:space="preserve">
          <source>Resource limits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35aa9ad49c5f86755dbf02133b7dfb7ed2b55215" translate="yes" xml:space="preserve">
          <source>Respects current &lt;code&gt;LC_CTYPE&lt;/code&gt; locale for code points &amp;lt; 256; and uses Unicode rules for the remaining code points (this last can only happen if the UTF8 flag is also set). See &lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9857e06bf03652fa8f40c743891977f44df6226" translate="yes" xml:space="preserve">
          <source>Respects current &lt;code&gt;LC_CTYPE&lt;/code&gt; locale for code points &amp;lt; 256; and uses Unicode rules for the remaining code points (this last can only happen if the UTF8 flag is also set). See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb5035288ee0c0593db52c81b02f88d18586fd6" translate="yes" xml:space="preserve">
          <source>Restart the debugger by &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt;ing a new session. We try to maintain your history across this, but internal settings and command-line options may be lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a793362ef3ca43722345085de3438d880f6a16" translate="yes" xml:space="preserve">
          <source>Restore the old pad saved into the local variable opad by PAD_SAVE_LOCAL()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1729fcc9821f2a0d1acba3f1a183f1116342c4" translate="yes" xml:space="preserve">
          <source>Restoring original @INC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d11c1b413768fba80561ed7ba82544986011373" translate="yes" xml:space="preserve">
          <source>Restrict to only generating addresses for this protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad27d2b05e664f67f8116bdd57edeef1987e5429" translate="yes" xml:space="preserve">
          <source>Restrict to only generating addresses in this address family</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b0370fc27402e85db8bdba7a00eab25a9ff0bd" translate="yes" xml:space="preserve">
          <source>Restrict to only generating addresses of this socket type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16e1f0c25289d1e2f2b5219ef38e386a9adf34e" translate="yes" xml:space="preserve">
          <source>Restrict unsafe constructs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091038df15e856c37352b0be1f97c0135c975070" translate="yes" xml:space="preserve">
          <source>Restrict unsafe operations when compiling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc4fcb6b9bae373de137f9cf069e3fd7447d402" translate="yes" xml:space="preserve">
          <source>Restricted hashes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8617d55e624bcba9c7b74950b1041e1199647dc0" translate="yes" xml:space="preserve">
          <source>Restrictions of Perl on OpenVOS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a968126c8536966642d8125340baafc91d326de" translate="yes" xml:space="preserve">
          <source>Restricts the given %hash's set of keys to @keys. If @keys is not given it restricts it to its current keyset. No more keys can be added. delete() and exists() will still work, but will not alter the set of allowed keys. &lt;b&gt;Note&lt;/b&gt;: the current implementation prevents the hash from being bless()ed while it is in a locked state. Any attempt to do so will raise an exception. Of course you can still bless() the hash before you call lock_keys() so this shouldn't be a problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ee06cbf0d3a077c8ec64125db655ac2b8a4f75" translate="yes" xml:space="preserve">
          <source>Result types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="396addc43726f471d8b20eaa47f9efcfd781e187" translate="yes" xml:space="preserve">
          <source>Resulting in the program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612e12d29278b5519294bc25cdaddffec6d0f1c6" translate="yes" xml:space="preserve">
          <source>Results</source>
          <target state="translated">Results</target>
        </trans-unit>
        <trans-unit id="2efc1923ac09640c75b64277892d583e2361bb83" translate="yes" xml:space="preserve">
          <source>Results are never tainted because otherwise even output from print, for example &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print(1/7)&lt;/a&gt;&lt;/code&gt;, should be tainted if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80229b8449770c6d400ff29bbd402430674d8e49" translate="yes" xml:space="preserve">
          <source>Results are never tainted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910730d509932b84b34b414ac4c857477d1d0180" translate="yes" xml:space="preserve">
          <source>Results are tainted if a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; form that includes &lt;code&gt;LC_CTYPE&lt;/code&gt; is in effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c3a225733e64bea8efa2629e852e0f9eb54d2b" translate="yes" xml:space="preserve">
          <source>Retains '::' in type names so that C++ hierarchical types can be mapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a67d8823304f8234e82df960c20ebaacbf345a" translate="yes" xml:space="preserve">
          <source>Retains &lt;code&gt;::&lt;/code&gt; in type names so that C++ hierarchical types can be mapped. Default is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ae391f88a9b63319b85f5152615ab3754281a5" translate="yes" xml:space="preserve">
          <source>Rethink your design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d864f634d34c4155822d46f8d91b346abeaaef02" translate="yes" xml:space="preserve">
          <source>Rethrows a previously caught exception. See &lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;Exception Handling in perlguts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6bd37434498e4371fd88a4bfb1729adc9d5c9a" translate="yes" xml:space="preserve">
          <source>Retired langfam codes for the Locale::Codes::LangFam module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8f8f9dc55113068c79456626250be0fa9383d3" translate="yes" xml:space="preserve">
          <source>Retrieval of PM messages until window creation/destruction. If &lt;code&gt;force&lt;/code&gt; is false, will not dispatch messages if a real message loop is known to be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9059c27f17082052b07415cc0c473e3351c1bf" translate="yes" xml:space="preserve">
          <source>Retrieve a value from the &lt;code&gt;c_cc&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object. The &lt;code&gt;c_cc&lt;/code&gt; field is an array so an index must be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd60623ab1f0fead77ed722c84110186b35b3d9" translate="yes" xml:space="preserve">
          <source>Retrieve one line, delimited by CRLF, from the remote server. Returns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120622bbd6d958d0f9c367331115c5b3f99cbcf7" translate="yes" xml:space="preserve">
          <source>Retrieve the &lt;code&gt;c_cflag&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a43df9223bf1d671907cb79ad24e65e7a8da945" translate="yes" xml:space="preserve">
          <source>Retrieve the &lt;code&gt;c_iflag&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e27d54476a270ba05b730aea326a39f970e8caa" translate="yes" xml:space="preserve">
          <source>Retrieve the &lt;code&gt;c_lflag&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4743799470ee7b920cd9fd1a21024d975f2d4a" translate="yes" xml:space="preserve">
          <source>Retrieve the &lt;code&gt;c_oflag&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc4792ca5a24eb7ba3c253287755e63991cec8e" translate="yes" xml:space="preserve">
          <source>Retrieve the datum in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4511f642a0428b9e7d0d6d89734a7f32ac28109c" translate="yes" xml:space="preserve">
          <source>Retrieve the first name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df345846bd0c2d69e12b4a91aaf669983d7377b1" translate="yes" xml:space="preserve">
          <source>Retrieve the full name, the first and last name joined by a blank.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95d03de659d7e5c70bd3aa6dbca967eb0f4d19b" translate="yes" xml:space="preserve">
          <source>Retrieve the header, a blank line, then the body (text) of the specified article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc385b4aceaf92215d1828a2e2ea727868f48f2f" translate="yes" xml:space="preserve">
          <source>Retrieve the input baud rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601de4f2ebd867a526f1ea2777ad7a4bbeea163a" translate="yes" xml:space="preserve">
          <source>Retrieve the last name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b2d69c57387d7f84b4fed900b418d5c512cf9b" translate="yes" xml:space="preserve">
          <source>Retrieve the output baud rate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153bc75c411348eec881e255f76be1e64881b5cc" translate="yes" xml:space="preserve">
          <source>Retrieve the value of the tied scalar referenced by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ee038fcaef73a536de77451717f2391e453473" translate="yes" xml:space="preserve">
          <source>Retrieves the function that will be used to fix up a call to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eec387679e71e59c66232709943e141d44d4414" translate="yes" xml:space="preserve">
          <source>Retrieves the time conversion information from the &lt;code&gt;tzname&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da4b9355ca37de19201e461cad40244a9893d34" translate="yes" xml:space="preserve">
          <source>Retrieves the value of a configurable limit on a file or directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652c07db1d8a422e8f5d2293abd7abb4ee1fd964" translate="yes" xml:space="preserve">
          <source>Retrieves the value of a configurable limit on a file or directory. This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02559c3356326a3b1e599326bdaca8e1cd1d0bf" translate="yes" xml:space="preserve">
          <source>Retrieves values of system configurable variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908262fdee5fbef995f0f45380b61275d7e304ec" translate="yes" xml:space="preserve">
          <source>Retrieving the backtrace from Perl level (using for example an XS extension) would be much less exciting than one would hope: normally you would see &lt;code&gt;runops&lt;/code&gt; , &lt;code&gt;entersub&lt;/code&gt; , and not much else. This API is intended to be called &lt;b&gt;from within&lt;/b&gt; the Perl implementation, not from Perl level execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f096b221f9534bcad007f2b5a32b490950b5b5" translate="yes" xml:space="preserve">
          <source>Return</source>
          <target state="translated">Return</target>
        </trans-unit>
        <trans-unit id="147311f53adc905469208b823e582ec70f5da4cf" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; from an XSUB immediately. Uses &lt;code&gt;XST_mNO&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5551daa758eb4f1962ff204e60ac6d510f876260" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; from an XSUB immediately. Uses &lt;code&gt;XST_mUNDEF&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465dad58ecf69fa630bc3f710cfd58d97befa558" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; from an XSUB immediately. Uses &lt;code&gt;XST_mYES&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d434075170c323a77b75fb6a1dc64742b45bd22e" translate="yes" xml:space="preserve">
          <source>Return API version as a Perl scalar, 1 for Math::BigInt v1.70, 2 for Math::BigInt v1.83.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b3f6da169bd793afaccd7c1d1ff1d877478bfb" translate="yes" xml:space="preserve">
          <source>Return Nth root of the object, truncated to int. N is &amp;gt;= 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7ade6a89266f0ce63300ffcdf5e3d44430e5cf" translate="yes" xml:space="preserve">
          <source>Return OBJ1 modulo OBJ2, i.e., the remainder after dividing OBJ1 by OBJ2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d3149d101eee963ecad6da777888bf7deda306" translate="yes" xml:space="preserve">
          <source>Return OBJ1 to the power of OBJ2. By convention, 0**0 = 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b7728606fe5548394ca030c9925c7c360c2129" translate="yes" xml:space="preserve">
          <source>Return TRUE if that warnings category has been set to FATAL in the first scope where the object is used. Otherwise returns FALSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8471d332e30c305b7ffd23da02013a440c0b038" translate="yes" xml:space="preserve">
          <source>Return TRUE if that warnings category is enabled in the calling module. Otherwise returns FALSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427a27c6e94dc4cf9cfd1ee6dba724c6e8763ad0" translate="yes" xml:space="preserve">
          <source>Return TRUE if that warnings category is enabled in the first scope where the object is used. Otherwise returns FALSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94f996bfa47e593985fe4ec41527489b9731a07" translate="yes" xml:space="preserve">
          <source>Return TRUE if the name is safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96be94a39b4300e1884dd9adc1a2936e7fc2bdc2" translate="yes" xml:space="preserve">
          <source>Return TRUE if the warnings category &lt;code&gt;$category&lt;/code&gt; has been set to FATAL in the calling module. Otherwise returns FALSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b108b1cc9affb1337971003aad75911571c79e7b" translate="yes" xml:space="preserve">
          <source>Return TRUE if the warnings category with the same name as the current package has been set to FATAL in the calling module. Otherwise returns FALSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2702ef79f51a7a603a764187ab2c97d87823ae2a" translate="yes" xml:space="preserve">
          <source>Return TRUE if the warnings category, &lt;code&gt;$category&lt;/code&gt; , is enabled in the calling module. Otherwise returns FALSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8731f1ccd97a2ffba2dcddfde967debf1a72e1" translate="yes" xml:space="preserve">
          <source>Return a SV containing a string that must appear in the pattern. Used by &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; for optimising matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef680f28e15ead0c97150a82245301402d6d3189" translate="yes" xml:space="preserve">
          <source>Return a copy of a string from an XSUB immediately. Uses &lt;code&gt;XST_mPV&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8a70dab10ae99b42cd2b1f2b638d4aa167541d" translate="yes" xml:space="preserve">
          <source>Return a double from an XSUB immediately. Uses &lt;code&gt;XST_mNV&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e233ff228d377735118fccb83e09d6507766800e" translate="yes" xml:space="preserve">
          <source>Return a formatted report of the information returned by bucket_stats(). An example report looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2b0669279235775947aa2a2e43aa996d55f461" translate="yes" xml:space="preserve">
          <source>Return a formatted string about the elapsed (wall-clock) time and about the consumed CPU time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a08fc2a49d16208a3da942556b8e6789f09ae3" translate="yes" xml:space="preserve">
          <source>Return a human readable representation of the scheduling tree. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d29859d693280c46e84547c235fda5f109149f7" translate="yes" xml:space="preserve">
          <source>Return a key based on PATH and ID, which can be used as a key for &lt;code&gt;&lt;a href=&quot;../functions/msgget&quot;&gt;msgget&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/semget&quot;&gt;semget&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/shmget&quot;&gt;shmget&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;http://search.cpan.org/perldoc/ftok&quot;&gt;ftok&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf5b38903b48414eabe89f5d73486c7f125e1c6" translate="yes" xml:space="preserve">
          <source>Return a list consisting of (signed) numerator and (unsigned) denominator as BigInts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451b1d3213ee97d37f98d9e2159d9222ada4e531" translate="yes" xml:space="preserve">
          <source>Return a list of filehandles that may be used upstream in a select() call to signal that this Iterator is ready. Iterators that are not handle based should return an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a2d1db010ca6f9905f00e7243c5c3558754b8a" translate="yes" xml:space="preserve">
          <source>Return a list of filehandles that may be used upstream in a select() call to signal that this Iterator is ready. Iterators that are not handle-based should return an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32067e232db5b4a2fbf7e768b9545020f7badd2e" translate="yes" xml:space="preserve">
          <source>Return a list of login, password and account information for the netrc entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb492aaa479310c3cdf2aa3bd7e3c5fbe533f80a" translate="yes" xml:space="preserve">
          <source>Return a list of symbol names which remain undefined after load_file(). Returns &lt;code&gt;()&lt;/code&gt; if not known. Don't worry if your platform does not provide a mechanism for this. Most do not need it and hence do not provide it, they just return an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26152553b41eeb36a45b1fbc384250df3b61d1f3" translate="yes" xml:space="preserve">
          <source>Return a member of the XOP structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241e1964cd5a05e9777847785a74cc4814336a34" translate="yes" xml:space="preserve">
          <source>Return a non-zero integer if the sign bit on an NV is set, and 0 if it is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891cdbd9e57376291645fa15156771d6e6a9b800" translate="yes" xml:space="preserve">
          <source>Return a pointer to the UTF-8-encoded representation of the SV, and set *lp to its length. May cause the SV to be upgraded to UTF-8 as a side-effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3adaee605a1fad16113ef88e9f64319c503dfa" translate="yes" xml:space="preserve">
          <source>Return a pointer to the UTF-8-encoded representation of the SV. May cause the SV to be upgraded to UTF-8 as a side-effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b7b069ee4d507ec79e42a1161a1c581d1bcaad" translate="yes" xml:space="preserve">
          <source>Return a pointer to the byte-encoded representation of the SV, and set *lp to its length. May cause the SV to be downgraded from UTF-8 as a side-effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d05795d61474062c0a14f8e1c7b4e50543a85a" translate="yes" xml:space="preserve">
          <source>Return a pointer to the byte-encoded representation of the SV. May cause the SV to be downgraded from UTF-8 as a side-effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2c1e0979757933a6bf33adef1b53f07b2683a8" translate="yes" xml:space="preserve">
          <source>Return a real-valued arcus cosine if the input is between [-1, 1], &lt;b&gt;inclusive&lt;/b&gt; the endpoints. For inputs greater than one, zero is returned. For inputs less than minus one, pi is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a96ea8a4c2eeacd78081e85ee39ee9c99c7759b" translate="yes" xml:space="preserve">
          <source>Return a real-valued arcus sine if the input is between [-1, 1], &lt;b&gt;inclusive&lt;/b&gt; the endpoints. For inputs greater than one, pi/2 is returned. For inputs less than minus one, -pi/2 is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf6e57474a1d775479b89f8208b393f0a75e6df" translate="yes" xml:space="preserve">
          <source>Return a reference to a hash of the capabilities of the server. APOP is added as a pseudo capability. Note that I've been unable to find a list of the standard capability values, and some appear to be multi-word and some are not. We make an attempt at intelligently parsing them, but it may not be correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fd404f895e96834df66cd6d02d6a132e5d931b" translate="yes" xml:space="preserve">
          <source>Return a reference to a new Pod::Checker object that inherits from Pod::Parser and is used for calling the required methods later. The following options are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44be791192716cc11f6cf8790fe7a9aa91d55565" translate="yes" xml:space="preserve">
          <source>Return a result from the next available parser. Returns a list containing the parser from which the result came, the stash that corresponds with that parser and the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a0e0e3adf015ddaa0b315c9b035e774d2c4a4b" translate="yes" xml:space="preserve">
          <source>Return a set of basic information about a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ef823680735fd50aee393df3d6a0a47495877c" translate="yes" xml:space="preserve">
          <source>Return a short description of the provided OP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe505b614a002a8797b055ea858ee27a1314b27" translate="yes" xml:space="preserve">
          <source>Return a string representing the object. The returned string should have no leading zeros, i.e., it should match &lt;code&gt;^(0|[1-9]\d*)$&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad02dc2af39b43751576df209b0fc28331051482" translate="yes" xml:space="preserve">
          <source>Return a string representing this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d93510e48540756be01ae3bf688bac63f2f0ba" translate="yes" xml:space="preserve">
          <source>Return a true copy of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce44eeede98380084e686046d4f4c26cb13be4" translate="yes" xml:space="preserve">
          <source>Return a true value if OBJ is an even integer, and a false value otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a89d549d64c9589ce257226bcc136decec05091" translate="yes" xml:space="preserve">
          <source>Return a true value if the object is OK, and a false value otherwise. This is a check routine to test the internal state of the object for corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b56ea11fa7e09fd08e43c32263ce9d2f9c32994" translate="yes" xml:space="preserve">
          <source>Return an SV with the numeric value of the source SV, doing any necessary reference or overload conversion. The caller is expected to have handled get-magic already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ea6ef7047a1702f443e01459bc3f879a9ce1bd" translate="yes" xml:space="preserve">
          <source>Return an absolute file specification from a relative one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9949eba6aeab405ed78bd6939d900df50ed3361c" translate="yes" xml:space="preserve">
          <source>Return an array of all registered handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e82163b9eb16d68b95807d1026a6e53a268ba0" translate="yes" xml:space="preserve">
          <source>Return an array of handles that are ready for reading. &lt;code&gt;TIMEOUT&lt;/code&gt; is the maximum amount of time to wait before returning an empty list, in seconds, possibly fractional. If &lt;code&gt;TIMEOUT&lt;/code&gt; is not given and any handles are registered then the call will block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56f2614a481fefe74274d254bd95335c5759694" translate="yes" xml:space="preserve">
          <source>Return an empty list from an XSUB immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158ae144c3e0a50b0764b0f6030b134afc94223e" translate="yes" xml:space="preserve">
          <source>Return an entry from the BHK structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6b2b84ace3e3e1bd4262e9a939baea254bec61" translate="yes" xml:space="preserve">
          <source>Return an integer from an XSUB immediately. Uses &lt;code&gt;XST_mIV&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26d41edbd3ecefa03ca709a9475c24b1fb205ad" translate="yes" xml:space="preserve">
          <source>Return an integer from an XSUB immediately. Uses &lt;code&gt;XST_mUV&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29da77810c46bf5bf9d644169ef5a8f2a609a982" translate="yes" xml:space="preserve">
          <source>Return an object given a string representing a binary number. The input has a '0b' prefix and matches the regular expression &lt;code&gt;^0[bB](0|1[01]*)$&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1a519206f28688ca4edd290761e39b7d94833d" translate="yes" xml:space="preserve">
          <source>Return an object given a string representing a hexadecimal number. The input has a '0x' prefix and matches the regular expression &lt;code&gt;^0x(0|[1-9a-fA-F][\da-fA-F]*)$&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17a9d7a7bb03786cbbf9b8ebda2c95d3e3444c9" translate="yes" xml:space="preserve">
          <source>Return an object given a string representing an octal number. The input has a '0' prefix and matches the regular expression &lt;code&gt;^0[1-7]*$&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e43911ac9c36690a2f4ab465817a65fde7ace6" translate="yes" xml:space="preserve">
          <source>Return an object representing the number 10**N where N &amp;gt;= 0 is a Perl scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc772c25af18a23490f3229752980abefde5db66" translate="yes" xml:space="preserve">
          <source>Return an object representing the number one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a575fca380d4750e44b2dcf0a1f730c23eb1eaf7" translate="yes" xml:space="preserve">
          <source>Return an object representing the number ten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb46871cf3e82de90a50f6e47e66fb291adad01" translate="yes" xml:space="preserve">
          <source>Return an object representing the number two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188180beefc0cddc09d88d3d827fbf9ea081c539" translate="yes" xml:space="preserve">
          <source>Return an object representing the number zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11aecfff98a8afc40b049f542a98ed2aa2e77f95" translate="yes" xml:space="preserve">
          <source>Return an undefined value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549deb9cfd17d09d388b32e8d8879d7c6170d75b" translate="yes" xml:space="preserve">
          <source>Return array reference of the four-element list of CPU seconds, as with &lt;a href=&quot;../functions/times&quot;&gt;times&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bda627656d52a5da7d72fbd0b32449c8c04ddc" translate="yes" xml:space="preserve">
          <source>Return as seconds the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8050ecfa06653b6203153732192a0001e197bc04" translate="yes" xml:space="preserve">
          <source>Return as seconds the current value of the POSIX high resolution timer specified by &lt;code&gt;$which&lt;/code&gt; . All implementations that support POSIX high resolution timers are supposed to support at least the &lt;code&gt;$which&lt;/code&gt; value of &lt;code&gt;CLOCK_REALTIME&lt;/code&gt; , which is supposed to return results close to the results of &lt;code&gt;gettimeofday&lt;/code&gt; , or the number of seconds since 00:00:00:00 January 1, 1970 Greenwich Mean Time (GMT). Do not assume that CLOCK_REALTIME is zero, it might be one, or something else. Another potentially useful (but not available everywhere) value is &lt;code&gt;CLOCK_MONOTONIC&lt;/code&gt; , which guarantees a monotonically increasing time value (unlike time() or gettimeofday(), which can be adjusted). See your system documentation for other possibly supported values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c21fc7af48808f69e496945f4fd4e94e21bce3" translate="yes" xml:space="preserve">
          <source>Return as seconds the resolution of the POSIX high resolution timer specified by &lt;code&gt;$which&lt;/code&gt; . All implementations that support POSIX high resolution timers are supposed to support at least the &lt;code&gt;$which&lt;/code&gt; value of &lt;code&gt;CLOCK_REALTIME&lt;/code&gt; , see &lt;a href=&quot;#clock_gettime&quot;&gt;clock_gettime&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78a36f42fa7d49ff1c33db2428ad62e574418ef" translate="yes" xml:space="preserve">
          <source>Return bitwise and. If necessary, the smallest number is padded with leading zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6e9a575d0b87f630e4d14061b502a84e725686" translate="yes" xml:space="preserve">
          <source>Return bitwise exclusive or. If necessary, the smallest number is padded with leading zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9385ddc48eab9b9c50d7efb48023e971e690c6ce" translate="yes" xml:space="preserve">
          <source>Return bitwise or. If necessary, the smallest number is padded with leading zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b18a0a6537a1cc8c8b6fbdbdcf12df94a2b726" translate="yes" xml:space="preserve">
          <source>Return count of readable bytes in the buffer. Zero or negative return means no more bytes available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4463fd2ee470a2b5cf9a4c7280fd1a57085d7b" translate="yes" xml:space="preserve">
          <source>Return encoding of the document, even if the encoding is not correctly handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595fc3f7abd6ea0a21e0731028ef13f68f86a25f" translate="yes" xml:space="preserve">
          <source>Return end-of-file indicator. &lt;code&gt;PerlIOBase_eof()&lt;/code&gt; is normally sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989d4eb1544f5cecb97e15d2c7344839e09b6a8c" translate="yes" xml:space="preserve">
          <source>Return error indicator. &lt;code&gt;PerlIOBase_error()&lt;/code&gt; is normally sufficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa68d98b35d49654c48b4d7a8996ea73d2e3793" translate="yes" xml:space="preserve">
          <source>Return factorial of object (1*2*3*4*...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e2cbf875d6114c68a0b4ee75daf0f4c94ed406" translate="yes" xml:space="preserve">
          <source>Return from XSUB, indicating number of items on the stack. This is usually handled by &lt;code&gt;xsubpp&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2850550de8af43dfe162fa88bbc2b95920fcb5" translate="yes" xml:space="preserve">
          <source>Return integer log of OBJ to base BASE. This method has two output arguments, the OBJECT and a STATUS. The STATUS is Perl scalar; it is 1 if OBJ is the exact result, 0 if the result was truncted to give OBJ, and undef if it is unknown whether OBJ is the exact result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401944e8dca9d9309515015e83a9c3e7f09964dc" translate="yes" xml:space="preserve">
          <source>Return modular exponentiation, (OBJ1 ** OBJ2) % OBJ3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9909dafd1e851072a366e9a8cf14e8e203c382" translate="yes" xml:space="preserve">
          <source>Return modular multiplicative inverse, i.e., return OBJ3 so that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dea4b36ca573d9394db3d77e929d7e71b77ae61" translate="yes" xml:space="preserve">
          <source>Return name and handle of a temporary file safely</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd83c943899faf6221cdf045d4f14b83d1a38b0f" translate="yes" xml:space="preserve">
          <source>Return pointer to next readable byte in buffer, accessing via the pointer (dereferencing) is only safe if PerlIO_get_cnt() has returned a positive value. Only positive offsets up to value returned by PerlIO_get_cnt() are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9400c2a972aac8273d7b5993703cef3de364c28" translate="yes" xml:space="preserve">
          <source>Return position in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee013a6d785765733c1c186770c521fa7ad326e" translate="yes" xml:space="preserve">
          <source>Return source code for the body of a subroutine (a block, optionally preceded by a prototype in parens), given a reference to the sub. Because a subroutine can have no names, or more than one name, this method doesn't return a complete subroutine definition -- if you want to eval the result, you should prepend &quot;sub subname &quot;, or &quot;sub &quot; for an anonymous function constructor. Unless the sub was defined in the main:: package, the code will include a package declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20da61fd12905e90a6c28f5d9d067763e08eb16e" translate="yes" xml:space="preserve">
          <source>Return the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13ef84886aa367ccced45d35b02a74b0ce63d0f" translate="yes" xml:space="preserve">
          <source>Return the 'command' being used for opening a file for reading using an external</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4d88fb935d3655575a6cebe057c4b6b6e8de61" translate="yes" xml:space="preserve">
          <source>Return the 'command' being used for opening a file for writing using an external</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b25acaa88f87529f093504b66f0466d2bb94e73" translate="yes" xml:space="preserve">
          <source>Return the (faked) CV corresponding to the main part of the Perl program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fde1b84d2cd929e5f496f865362e84cf14b7c26" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;&lt;a href=&quot;../../functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; status for this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6f2a254417828fe1c66669b6e2e1f924bfacb1" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;&lt;a href=&quot;../../functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; status for this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f12e24aeabb29661a5f55adb61e41e418c1cbb" translate="yes" xml:space="preserve">
          <source>Return the AV from the GV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e67ba21f72e62248790c4cbcdcfff08f463285" translate="yes" xml:space="preserve">
          <source>Return the BHK's flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86808e34dfc460432ef7a0048092ddc2c2f3d18" translate="yes" xml:space="preserve">
          <source>Return the CV from the GV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db501e6a91d32269fe522aabe42b37024f7d29ba" translate="yes" xml:space="preserve">
          <source>Return the HV from the GV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09fd6b73251c98f0c6383f15ac2a7a38492e083" translate="yes" xml:space="preserve">
          <source>Return the N'ths digit from X when X is an integer value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4e7fc79bf87d528da99d7549eb69b6a49628fc" translate="yes" xml:space="preserve">
          <source>Return the Nth digit as a Perl scalar. N is a Perl scalar, where zero refers to the rightmost (least significant) digit, and negative values count from the left (most significant digit). If $obj represents the number 123, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95294de0a9d18d8d78c72fe0c4f06b8b579c020d" translate="yes" xml:space="preserve">
          <source>Return the PP function name (e.g. &quot;pp_add&quot;) of op number OPNUM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a39fd6c03ec1a2a83e8aab91a60f356bb07415" translate="yes" xml:space="preserve">
          <source>Return the SV from the GV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727e15a3c8b6127eecea72f3f105819ff2ffa4e4" translate="yes" xml:space="preserve">
          <source>Return the UTF-8 pointer &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; displaced by &lt;code&gt;off&lt;/code&gt; characters, either forward or backward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d968f68b024aece647e8680c726bc7db9edd52c" translate="yes" xml:space="preserve">
          <source>Return the XOP structure for a given custom op. This macro should be considered internal to OP_NAME and the other access macros: use them instead. This macro does call a function. Prior to 5.19.6, this was implemented as a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634135ecd1da66792d8f094c18bc9346662586a8" translate="yes" xml:space="preserve">
          <source>Return the XOP's flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30487e1855ef653ab46905c98d480b77228f2aab" translate="yes" xml:space="preserve">
          <source>Return the account information for the netrc entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b881b828bff901023c8e000918699ba5dbd0191" translate="yes" xml:space="preserve">
          <source>Return the address of the symbol $symbol or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if not found. If the target system has separate functions to search for symbols of different types then dl_find_symbol() should search for function symbols first and then other types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188e4da3acea0de525e548ebfc63a6dd15038a3f" translate="yes" xml:space="preserve">
          <source>Return the address part of the sockaddr structure for the socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292e0b9e2c15c4128537706efd8468986e9f767c" translate="yes" xml:space="preserve">
          <source>Return the address part of the sockaddr structure for the socket in a text form xx.xx.xx.xx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417769e36400c4340bd0f0b1764bbffbfb180d51" translate="yes" xml:space="preserve">
          <source>Return the address part of the sockaddr structure for the socket on the peer host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58670ef25d3d2e51912a0db902386a1f7c4b2ddb" translate="yes" xml:space="preserve">
          <source>Return the address part of the sockaddr structure for the socket on the peer host in a text form xx.xx.xx.xx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce16968fe75861ae9734d1aaba4d7f185dc04169" translate="yes" xml:space="preserve">
          <source>Return the approximate number of decimal digits of the object. The output is one Perl scalar. This estimate must be greater than or equal to what &lt;code&gt;_len()&lt;/code&gt; returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837eb954405e12531332f24b523ef7f8a237f99e" translate="yes" xml:space="preserve">
          <source>Return the binary digest for the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76859202fcb0e9ac7e5ba6622f8f634407cadd3a" translate="yes" xml:space="preserve">
          <source>Return the binary digest for the message. The returned string will be 16 bytes long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3446d9a703719a4a80fdf1e47f4551c84d9a32" translate="yes" xml:space="preserve">
          <source>Return the binary string representation of the number. The string must have a '0b' prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9398b13cea50287ad888ffe06e99baabafe083b5" translate="yes" xml:space="preserve">
          <source>Return the binomial coefficient OBJ1 over OBJ1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9039484dd443692be46208d331c0b51159f8498e" translate="yes" xml:space="preserve">
          <source>Return the bit string suitable as argument to the core select() call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f95075e02c5a8968b5fc02a316855e3f107893" translate="yes" xml:space="preserve">
          <source>Return the class of the provided OP: that is, which of the *OP structures it uses. For core ops this currently gets the information out of PL_opargs, which does not always accurately reflect the type used. For custom ops the type is returned from the registration, and it is up to the registree to ensure it is accurate. The value returned will be one of the OA_* constants from op.h.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd22a89d0c0732056821d3e2652ff7471889395" translate="yes" xml:space="preserve">
          <source>Return the class that numbers are upgraded to, is in fact returning &lt;code&gt;$Math::BigInt::upgrade&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8cf3decb17230525b612d2ce53fb4008a0ff26" translate="yes" xml:space="preserve">
          <source>Return the content of the named file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df96bc69b3ecead78ca02d2e506c37ff6e94c5b4" translate="yes" xml:space="preserve">
          <source>Return the current position in the stream, as a numeric offset. Not yet supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e690559d4145f70cc5d3e5e11e25676e89322515" translate="yes" xml:space="preserve">
          <source>Return the current position in the string, as an opaque object. Not yet supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7dca073919e493549e6e64d4f75ec4eba58456" translate="yes" xml:space="preserve">
          <source>Return the current read pointer relative to this layer's buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6785250f6235af7b741f8a0b71cd239d72b24f42" translate="yes" xml:space="preserve">
          <source>Return the current time using Time::HiRes if available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf7b904f166347e463e02724517b44d0a199a33" translate="yes" xml:space="preserve">
          <source>Return the description of a given custom op. This was once used by the OP_DESC macro, but is no longer: it has only been kept for compatibility, and should not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c624b8d833a8785007a3024ede7440f3302ebcf8" translate="yes" xml:space="preserve">
          <source>Return the encoding corresponding to &lt;code&gt;=encoding&lt;/code&gt; , but only if the encoding was recognized and handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8a1fa7c8359855ac34f947f892a45599c7b805" translate="yes" xml:space="preserve">
          <source>Return the exponent of $x as BigInt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b123a2f9a5fbb5a8e843bffc94657f572853d43b" translate="yes" xml:space="preserve">
          <source>Return the file pointer. May be based on layers cached concept of position to avoid overhead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b8e0a203de9a2f8b0238606074a15dbdb144b6" translate="yes" xml:space="preserve">
          <source>Return the filename and filehandle as before except that the file is automatically removed when the program exits (dependent on $KEEP_ALL). Default is for the file to be removed if a file handle is requested and to be kept if the filename is requested. In a scalar context (where no filename is returned) the file is always deleted either (depending on the operating system) on exit or when it is closed (unless $KEEP_ALL is true when the temp file is created).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ffe224e48ba96441026249d004d9eab1c64a92" translate="yes" xml:space="preserve">
          <source>Return the first key in the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3e931346eddc9e8b89e84c987ef41ee29ac911" translate="yes" xml:space="preserve">
          <source>Return the flags for the current compiling pad name at offset &lt;code&gt;po&lt;/code&gt; . Assumes a valid slot entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9c7b858ab6d79b29bc27e59d4583e4db63e5ff" translate="yes" xml:space="preserve">
          <source>Return the greatest common divisor of OBJ1 and OBJ2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f5555affd43554d24ba89d3257ccbb070f4798" translate="yes" xml:space="preserve">
          <source>Return the hexadecimal string representation of the number. The string must have a '0x' prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78300a10673d49aac2c7d2638118529a8fd24084" translate="yes" xml:space="preserve">
          <source>Return the integer value of an SV, doing any necessary string conversion. If flags includes SV_GMAGIC, does an mg_get() first. Normally used via the &lt;code&gt;SvIV(sv)&lt;/code&gt; and &lt;code&gt;SvIVx(sv)&lt;/code&gt; macros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ac31cc084af9a481fcfed39a383ae11d974451" translate="yes" xml:space="preserve">
          <source>Return the integral and fractional parts of a floating-point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c524f4cda2007c3b8d1ad04c8509f204d1ef649e" translate="yes" xml:space="preserve">
          <source>Return the internal debugger pointer to the line last executed, and print out that line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e078f55f1b0d95f9f0a40a5c03e2d9dd58e152f" translate="yes" xml:space="preserve">
          <source>Return the length of $x in digits for integer values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ee3e3af109da20881554fc6a69449e5822abcf" translate="yes" xml:space="preserve">
          <source>Return the length of the UTF-8 char encoded string &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; in characters. Stops at &lt;code&gt;e&lt;/code&gt; (inclusive). If &lt;code&gt;e &amp;lt; s&lt;/code&gt; or if the scan would end up past &lt;code&gt;e&lt;/code&gt; , croaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98197ef5c464a180db80d4a1b70572835f76fe4" translate="yes" xml:space="preserve">
          <source>Return the login id for the netrc entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7abdbea3f8d8b5305d72c400a8a2fb4c507eeec1" translate="yes" xml:space="preserve">
          <source>Return the mantissa and exponent of a floating-point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e7ccc84edd95ffadc7b3008a78f1aa229500a2" translate="yes" xml:space="preserve">
          <source>Return the maximum POSIX realtime signal number available, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no POSIX realtime signals are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d206901a611b7a41b98e11262c76eb9f221e16d5" translate="yes" xml:space="preserve">
          <source>Return the minimum POSIX realtime signal number available, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no POSIX realtime signals are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1636b01070f7a21a940b683cbf1b65b8f03329c2" translate="yes" xml:space="preserve">
          <source>Return the name for a given custom op. This was once used by the OP_NAME macro, but is no longer: it has only been kept for compatibility, and should not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4a9e25a270f75917473bbf152107544b56c883" translate="yes" xml:space="preserve">
          <source>Return the name of a temporary file in the specified directory using a prefix. The file is guaranteed not to exist at the time the function was called, but such guarantees are good for one clock tick only. Always use the proper form of C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba16b2b97049c4a659a40c354387eb93cbeb5af" translate="yes" xml:space="preserve">
          <source>Return the name of the current compiling pad name at offset &lt;code&gt;po&lt;/code&gt; . Assumes a valid slot entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a033252f0cddc65cf92a783d450048bfe503245e" translate="yes" xml:space="preserve">
          <source>Return the name of the provided OP. For core ops this looks up the name from the op_type; for custom ops from the op_ppaddr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf700f08ee3f022ac28c6d6ad550913448dc57f" translate="yes" xml:space="preserve">
          <source>Return the name of the temporary directory associated with this object (if the object was created using the &quot;newdir&quot; constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43849324c1a533bb5838dd6a99118c7f4bb297c" translate="yes" xml:space="preserve">
          <source>Return the name of the temporary file associated with this object (if the object was created using the &quot;new&quot; constructor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02162d8694654f1de91669f0a540d00b7e0ea019" translate="yes" xml:space="preserve">
          <source>Return the next available job as &lt;a href=&quot;scheduler/job&quot;&gt;TAP::Parser::Scheduler::Job&lt;/a&gt; object or &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if none are available. Returns a &lt;a href=&quot;scheduler/spinner&quot;&gt;TAP::Parser::Scheduler::Spinner&lt;/a&gt; if the scheduler still has pending jobs but none are available to run right now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b08468342f9e7382ad73acce7a48a0ae2c5d49c4" translate="yes" xml:space="preserve">
          <source>Return the next character from the file, or undef if none remain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feda6626aed77511c6b3df7b02b5d54f5d9359f6" translate="yes" xml:space="preserve">
          <source>Return the next key in the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efe519efe01a23e51434ba5d2dca6b1f2bbfa18" translate="yes" xml:space="preserve">
          <source>Return the next line from the file, or undef on end of string. Can safely be called in an array context. Currently ignores $/ ($INPUT_RECORD_SEPARATOR or $RS when &lt;a href=&quot;../english&quot;&gt;English&lt;/a&gt; is in use) and treats lines as delimited by &quot;\n&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2510580b82e526e2c44344deb3c0f42c5dcd23" translate="yes" xml:space="preserve">
          <source>Return the num value of an SV, doing any necessary string or integer conversion. If flags includes SV_GMAGIC, does an mg_get() first. Normally used via the &lt;code&gt;SvNV(sv)&lt;/code&gt; and &lt;code&gt;SvNVx(sv)&lt;/code&gt; macros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a997a1ffdb6dd3ce7910823fc3237fe33197cb4a" translate="yes" xml:space="preserve">
          <source>Return the number of bytes left to be read in the current buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc25533fdf214ffc53e04458cec2a628e4850dd6" translate="yes" xml:space="preserve">
          <source>Return the number of bytes that last &lt;code&gt;Fill()&lt;/code&gt; put in the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3415ff5c3118088729d890b8e343a722f1c7ca32" translate="yes" xml:space="preserve">
          <source>Return the number of trailing decimal zeros. The output is a Perl scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d6332789548408c852117d2287bf3496bf502b" translate="yes" xml:space="preserve">
          <source>Return the octal string representation of the number. The string must have a '0x' prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af150d92ccff6cf47986722b93faa80a783bef2" translate="yes" xml:space="preserve">
          <source>Return the parsed YAML data for this result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6936f656b1022b3d515521882aee4f8e6b40cc55" translate="yes" xml:space="preserve">
          <source>Return the password for the netrc entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee6509326cfe062105e077d56cad48771864d0d" translate="yes" xml:space="preserve">
          <source>Return the port number for the socket on the peer host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae0c64b302636d3436b0efcbbac0c778918a8b2" translate="yes" xml:space="preserve">
          <source>Return the port number that the socket is using on the local host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ae67650c145a18aadf88178cd2eaf271f56d73" translate="yes" xml:space="preserve">
          <source>Return the positive square root of EXPR. If EXPR is omitted, uses &lt;code&gt;$_&lt;/code&gt; . Works only for non-negative operands unless you've loaded the &lt;code&gt;Math::Complex&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ca398524ee97aed064f109c0014774b8467f09" translate="yes" xml:space="preserve">
          <source>Return the raw YAMLish source from the most recent &lt;code&gt;&lt;a href=&quot;../../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1a7ced0f81af093a8f41863ef2c71d5d568215" translate="yes" xml:space="preserve">
          <source>Return the remaining time in the interval timer specified by &lt;code&gt;$which&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c943ca1e7b87d7eb64817e23809542799e98fe" translate="yes" xml:space="preserve">
          <source>Return the sever's connection banner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9f81c15dc0ff4925fd465d43570e1f6c64719d" translate="yes" xml:space="preserve">
          <source>Return the sign, of $x, meaning either &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;-inf&lt;/code&gt; , &lt;code&gt;+inf&lt;/code&gt; or NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68dac6ce8097ce942d0b9d9018e95b0ed056421" translate="yes" xml:space="preserve">
          <source>Return the signed bitwise and.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92027d6c5195925ff1e04f4b468405bed61a4ad7" translate="yes" xml:space="preserve">
          <source>Return the signed bitwise exclusive or.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aaddf7d04671db3e0e27536bf4bdbd8fdc46681" translate="yes" xml:space="preserve">
          <source>Return the signed bitwise or.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcefa87799574af1010b6f5a87a9651f3b44f50" translate="yes" xml:space="preserve">
          <source>Return the signed mantissa of $x as BigInt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f626cb13b8df3915be47a73eb5046f1db65dc55" translate="yes" xml:space="preserve">
          <source>Return the square root of the object, truncated to integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c947b24354fbf3d8637c5d76e520b817c15cb81e" translate="yes" xml:space="preserve">
          <source>Return the stash associated with an &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; variable. Assumes the slot entry is a valid &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; lexical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3642aef1d3ef36347beebbb348941672ea0fe04e" translate="yes" xml:space="preserve">
          <source>Return the status value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad259b3229b3f03ad7a05da79959b9bdfcb98992" translate="yes" xml:space="preserve">
          <source>Return the type (stash) of the current compiling pad name at offset &lt;code&gt;po&lt;/code&gt; . Must be a valid name. Returns null if not typed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1fd917f067439cdaa992595eba43fee3a95d2d" translate="yes" xml:space="preserve">
          <source>Return the unsigned integer value of an SV, doing any necessary string conversion. If flags includes SV_GMAGIC, does an mg_get() first. Normally used via the &lt;code&gt;SvUV(sv)&lt;/code&gt; and &lt;code&gt;SvUVx(sv)&lt;/code&gt; macros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9accb2f2600a64c2a60c9adc4585784021b20200" translate="yes" xml:space="preserve">
          <source>Return to the Mytest directory and add the following code to the end of Mytest.xs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e157ca958c0aa92419c19fe9f34acb7d3e3a49" translate="yes" xml:space="preserve">
          <source>Return true if $x has a denominator of 1 (e.g. no fraction parts), otherwise false. Please note that '-inf', 'inf' and 'NaN' aren't integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5085efd71ecbbc4c4f0d5c30df6dcd9453540b" translate="yes" xml:space="preserve">
          <source>Return true if $x is even, otherwise false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a98829c6119b41b7da46ad43316dccea81b06d6" translate="yes" xml:space="preserve">
          <source>Return true if $x is exactly one, otherwise false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163f49b8f3bbe71386313ef1a2133dfbdc4d8126" translate="yes" xml:space="preserve">
          <source>Return true if $x is exactly zero, otherwise false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d892363c3a52bfb8993dc9d140a02c83af3833" translate="yes" xml:space="preserve">
          <source>Return true if $x is negative (smaller than zero), otherwise false. Please note that '-inf' is also negative, while 'NaN' and '+inf' aren't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f25e6b0d7a878983f2344572ab5eda7cad6429" translate="yes" xml:space="preserve">
          <source>Return true if $x is odd, otherwise false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c48544c3d0d53ce836775f04289df45ce6bdab" translate="yes" xml:space="preserve">
          <source>Return true if $x is positive (greater than or equal to zero), otherwise false. Please note that '+inf' is also positive, while 'NaN' and '-inf' aren't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6297003ef0b9ffe9635e65ad2f17339612fa0b" translate="yes" xml:space="preserve">
          <source>Return true if &lt;code&gt;$var&lt;/code&gt; is tainted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c512c943e1db417a0823b6edf8178852e9cfaa" translate="yes" xml:space="preserve">
          <source>Return true if all the tests passed and no parse errors were detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730216ef2c3fed22da3e5fd25b9641b48475824e" translate="yes" xml:space="preserve">
          <source>Return true if the time returned by get_time is high resolution (i.e. if Time::HiRes is available).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232f3db04c4faa620bfbfc11fd3689a472ef9881" translate="yes" xml:space="preserve">
          <source>Return value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ab1cc2f5a6f7fa7cf3334ca9e0156816d4a68e" translate="yes" xml:space="preserve">
          <source>Return value: path to the written file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa37c23df8c6e1a5476cb9bfe9992c9d3632c327" translate="yes" xml:space="preserve">
          <source>Return values (especially for device and inode) may be bogus. (Win32)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee45f810b0d5a87b3109e7a98dc00ce2ad95d67" translate="yes" xml:space="preserve">
          <source>Return values and Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b4a13548e07b2bc054b98557e39378fb1b5195" translate="yes" xml:space="preserve">
          <source>Return values are always objects, strings, Perl scalars, or true/false for comparison routines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b10bedc7cb1c3e14966d1a3819d76dfc9e6417" translate="yes" xml:space="preserve">
          <source>Return your results in the most generic form possible and allow the user to choose how to use them. The most generic form possible is usually a Perl data structure which can then be used to generate a text report, HTML, XML, a database query, or whatever else your users require.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b4b2f7afdfb729ac6e2e26257ac6ce6b48a054" translate="yes" xml:space="preserve">
          <source>Returned Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0028982d694bb71d734c691957ac561c5d4e9c" translate="yes" xml:space="preserve">
          <source>Returned value: A LIST &lt;code&gt;($serialized, $ref1, $ref2, ...)&lt;/code&gt; where $serialized is the serialized form to be used, and the optional $ref1, $ref2, etc... are extra references that you wish to let the Storable engine serialize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1c2ea608cbde5f032e96aa31f665bfe3cb479f" translate="yes" xml:space="preserve">
          <source>Returned value: none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8433c4af8bada7af974e6de0632146d31d37a1fc" translate="yes" xml:space="preserve">
          <source>Returned value: object of type &lt;code&gt;class&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2826cc60681effcff36990251137b663bfeb2b44" translate="yes" xml:space="preserve">
          <source>Returning Data from Perl via the Parameter List</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bd8e1f4409ce51cb32918ef08262dbb9855b2f" translate="yes" xml:space="preserve">
          <source>Returning SVs, AVs and HVs through RETVAL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da972aed07dfd92c54f5758d5b006f1b7bd67ff" translate="yes" xml:space="preserve">
          <source>Returning Undef And Empty Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbd7e11b07ff21c3115805bbbee9f1ad48a03e0" translate="yes" xml:space="preserve">
          <source>Returning a List in a Scalar Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d881f622789472ae5074294a445f1a5e10a46db" translate="yes" xml:space="preserve">
          <source>Returning a List of Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f8e7e7825fe920d32a8e36d5ca8d5824e35776" translate="yes" xml:space="preserve">
          <source>Returning a Scalar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e0a3e67d16c3e259eea9ef950eb9bffb32921e" translate="yes" xml:space="preserve">
          <source>Returning a list in a scalar context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f076044dab2ccb151f04e64c4086ddafdf56c6db" translate="yes" xml:space="preserve">
          <source>Returning a list of values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9369ecc429137365ab52f2e23b2dc4784efa0c0" translate="yes" xml:space="preserve">
          <source>Returning closures from threads should not be relied upon. Depending on the Perl version and the application code, results may range from success, to (apparently harmless) warnings of leaked scalar, or all the way up to crashing of the Perl interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fee7775bbde8a5444661735c97423ac83b2588" translate="yes" xml:space="preserve">
          <source>Returning objects from threads does not work. Depending on the classes involved, you may be able to work around this by returning a serialized version of the object (e.g., using &lt;a href=&quot;data/dumper&quot;&gt;Data::Dumper&lt;/a&gt; or &lt;a href=&quot;storable&quot;&gt;Storable&lt;/a&gt;), and then reconstituting it in the joining thread. If you're using Perl 5.10.0 or later, and if the class supports &lt;a href=&quot;threads/shared#OBJECTS&quot;&gt;shared objects&lt;/a&gt;, you can pass them via &lt;a href=&quot;thread/queue&quot;&gt;shared queues&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="528b3e4ac6c75972df264473be40759653e505fc" translate="yes" xml:space="preserve">
          <source>Returns $x as a BigInt (truncated towards zero). In BigInt this is the same as &lt;code&gt;copy()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3c5a8af51d00f168a13f7248c2c891045778f0" translate="yes" xml:space="preserve">
          <source>Returns -1 on error, which is considered to include the case where the layer cannot provide such a file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888c6b88522c271b9f85a8ccab52efe3a52513f1" translate="yes" xml:space="preserve">
          <source>Returns -1 on failure to get the file pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57c4c00b98ef849f0e779ee1e73c2774ca69841" translate="yes" xml:space="preserve">
          <source>Returns 0 on end-of-file, 1 if not end-of-file, -1 on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f02febc55ff88806274778fa60fd3b2c4df15e" translate="yes" xml:space="preserve">
          <source>Returns 0 on success and failure. If &lt;code&gt;Popped()&lt;/code&gt; returns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba44f8d92ad300a7e94db16c55bfdd6ecdd4afb0" translate="yes" xml:space="preserve">
          <source>Returns 0 on success, -1 on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b5a5e25f5f4134ba8459b6bef0a63190538c27" translate="yes" xml:space="preserve">
          <source>Returns 0 on success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8046efb8fc3682fd19fe7808d60a87a9e5c745c" translate="yes" xml:space="preserve">
          <source>Returns 0 on success. On failure returns -1 and should set errno.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f81b7083f8b1af584f696d11723cadb45e8924" translate="yes" xml:space="preserve">
          <source>Returns 1 (when &lt;code&gt;$a&lt;/code&gt; is greater than &lt;code&gt;$b&lt;/code&gt; ) or 0 (when &lt;code&gt;$a&lt;/code&gt; is equal to &lt;code&gt;$b&lt;/code&gt; ) or -1 (when &lt;code&gt;$a&lt;/code&gt; is less than &lt;code&gt;$b&lt;/code&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb16034d876707df8f96272a5dff4e89d28412d5" translate="yes" xml:space="preserve">
          <source>Returns 1 if a new stream was found, 0 if none was found, and -1 if an error was encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0102da941d55e0eb75291f811c83ed21853e46ba" translate="yes" xml:space="preserve">
          <source>Returns 1 if all the modules contained in the distribution are up-to-date. Relies on containsmods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ee0b0c392190122ec7ba8d9d8a47a433cb8fa9" translate="yes" xml:space="preserve">
          <source>Returns 1 if the bundle itself and all its members are up-to-date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4757e4d71f85ab2279932983f16fd6cf23839fc" translate="yes" xml:space="preserve">
          <source>Returns 1 if the module is installed and up-to-date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405c713afd3e87c236988bdf5227a773db888110" translate="yes" xml:space="preserve">
          <source>Returns 1 if the next read on FILEHANDLE will return end of file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1242f6c30157c63339a787c7ddbc442bf5b7836" translate="yes" xml:space="preserve">
          <source>Returns 1 if there is an error (usually when &lt;code&gt;PERLIO_F_ERROR&lt;/code&gt; is set), 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4230f25ecb39ed98585d80e80f90d64f3e38024" translate="yes" xml:space="preserve">
          <source>Returns 1 if this distribution file seems to be a perl distribution. Normally this is derived from the file name only, but the index from CPAN can contain a hint to achieve a return value of true for other filenames too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e104bab9cb8759f62e14ccebe1f50ead99ecb96" translate="yes" xml:space="preserve">
          <source>Returns 1 on success, 0 on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ceb615341b2778f45facc3ac91c64f1dcd7626" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;#config&quot;&gt;config&lt;/a&gt; for the $class given. Class names may be fully qualified or abbreviated, eg:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ff4197b5764d632b5b57d44604a402c3417883" translate="yes" xml:space="preserve">
          <source>Returns &lt;a href=&quot;../parser&quot;&gt;TAP::Parser&lt;/a&gt; grammar object that will parse the TAP stream from the specified iterator. Both &lt;code&gt;iterator&lt;/code&gt; and &lt;code&gt;parser&lt;/code&gt; are required arguments. If &lt;code&gt;version&lt;/code&gt; is not set it defaults to &lt;code&gt;12&lt;/code&gt; (see &lt;a href=&quot;#set_version&quot;&gt;set_version&lt;/a&gt; for more details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c991a0d06fdf084bc9de4bde379609419ebafebd" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;$fh&lt;/code&gt; itself if &lt;code&gt;$fh&lt;/code&gt; may be used as a filehandle and is open, or is is a tied handle. Otherwise &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bac7dcd1796b1dda62e6c1d9092908641c82ca" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;1&lt;/code&gt; for success; on error, returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the first argument is not a valid filehandle, or returns &lt;code&gt;0&lt;/code&gt; and sets &lt;code&gt;$!&lt;/code&gt; for any other failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade90323fde26274914df6d59126343322076239" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;1&lt;/code&gt; for success; on error, returns &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the first argument is not a valid filehandle, or returns &lt;code&gt;0&lt;/code&gt; and sets &lt;code&gt;$!&lt;/code&gt; for any other failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fba5f4b2a8a65724290b52d186de9858fa6db2c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;1&lt;/code&gt; upon success, &lt;code&gt;0&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136cf3a05dcde424fd7cd5db77033d53cc62479d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../../../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the program has never failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c843475d97734dc686bf6af10cb54c997e3ca80" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;../../../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the program has never passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168d3eac2c65ee157bac98482d92871d6026d13e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if it was not called yet, otherwise bit 1 is set if on the previous call do_harderror was enabled, bit 2 is set if on previous call do_exception was enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b2691d1600db97fed049bb755ceb8ab99064f6" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if it was not called yet, otherwise return false if errors were not requested to be written to a hard drive, or the drive letter if this was requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627f39ba23bdb2924ba3451ee791b5899ecfb9e5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0201821892ab945e07f6a5ef79660efddb739cd7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure. Note: do not use &lt;code&gt;access()&lt;/code&gt; for security purposes. Between the &lt;code&gt;access()&lt;/code&gt; call and the operation you are preparing for the permissions might change: a classic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55152abc1dc2e6224fe3924787bee88e509b5731" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure. The &lt;code&gt;$mode&lt;/code&gt; is similar to the mode of &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir()&lt;/a&gt;&lt;/code&gt;, see &lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;, though for &lt;code&gt;mkfifo&lt;/code&gt; you &lt;b&gt;must&lt;/b&gt; specify the &lt;code&gt;$mode&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0cd76033a138179245b5e46e05e3b7122e17aa" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure. The &lt;code&gt;signal&lt;/code&gt; must be a number (like &lt;code&gt;SIGHUP&lt;/code&gt; ), not a string (like &lt;code&gt;&quot;SIGHUP&quot;&lt;/code&gt; ), though Perl does try hard to understand you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b498767cb3177d1dfc4a86d61b4be055b2dcfcc2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; or a reference to the method that implements &lt;code&gt;op&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b31fd014d364bd8f9aff893cccb0d2a3396dcb5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;BZ_OK&lt;/code&gt; if the uncompression was successful, but the end of the compressed data stream has not been reached. Returns &lt;code&gt;BZ_STREAM_END&lt;/code&gt; on successful uncompression and the end of the compression stream has been reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cee1dc76991a1ae94bb57e19977e67445c285f0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;BZ_RUN_OK&lt;/code&gt; on success and a &lt;code&gt;bzip2&lt;/code&gt; error code on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cc0a3e341e51f71c2e900bee437aaf7e78b43a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;BZ_STREAM_END&lt;/code&gt; on success and a &lt;code&gt;bzip2&lt;/code&gt; error code on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298af90e00483dcc786cec14907c140555481e3d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;LOCAL_FILE&lt;/code&gt; , or the generated local file name if &lt;code&gt;LOCAL_FILE&lt;/code&gt; is not given. If an error was encountered undef is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b971bb70c1f8924bdec539cc9599d29222d1d2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NULL&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f167a2967a820d84c44fba64003e7df81c5006" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;REMOTE_FILE&lt;/code&gt; , or the generated remote filename if &lt;code&gt;REMOTE_FILE&lt;/code&gt; is not given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8469c11a7495a34575028d0cada4d0c590d322" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Z_OK&lt;/code&gt; if successful and &lt;code&gt;Z_STREAM_END&lt;/code&gt; if the end of the compressed data has been successfully reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f59376906d764bd6babf5587091cb994788c043" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Z_OK&lt;/code&gt; if successful and &lt;code&gt;Z_STREAM_END&lt;/code&gt; if the end of the compressed data has been successfully reached. If not successful, &lt;code&gt;$out&lt;/code&gt; will be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96ce4239a30d936bcce62812ba50c744b76b905" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;Z_OK&lt;/code&gt; if successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafeafb2bd7c17d7b50be85ae47dd3d48969d3d8" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;expr&lt;/code&gt; , sets $^E from WinGetLastError() if &lt;code&gt;expr&lt;/code&gt; is false, and die()s if &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; and $^E are true. The message to die is the concatenated strings &lt;code&gt;name1&lt;/code&gt; and &lt;code&gt;name2&lt;/code&gt; , separated by &lt;code&gt;&quot;: &quot;&lt;/code&gt; from the contents of $^E.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa35bf1c09a2c6ee81db488828bca0efa036827d" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;expr&lt;/code&gt; , sets $^E from WinGetLastError() if &lt;code&gt;expr&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec258314cd4c89e4c47daf34be20cf66b5d74187" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;x * 2**y&lt;/code&gt; [C99].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d4745f47a74fcad081bf6ee100570bea174bb4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;x&lt;/code&gt; but with the sign of &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; [C99].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e87db4f05bd1544a961889bb18a4ae3bef71b6a" translate="yes" xml:space="preserve">
          <source>Returns EXPR on success for convenience. You may neglect the return value and manipulate EXPR as the filehandle directly if you prefer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1617e19a5623494da8a4feec58e0db0d72c53d05" translate="yes" xml:space="preserve">
          <source>Returns Euler's number &lt;code&gt;e&lt;/code&gt; , aka exp(1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850c587f24c6ccb55ebb1e6b233f6f1952faffd8" translate="yes" xml:space="preserve">
          <source>Returns Euler's number &lt;code&gt;e&lt;/code&gt; , aka exp(1). Note that under bigint, this is truncated to an integer, and hence simple '2'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f19dca119e616910757674455d0bfea072343f" translate="yes" xml:space="preserve">
          <source>Returns Euler's number &lt;code&gt;e&lt;/code&gt; raised to the appropriate power, to the wanted accuracy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9f007c83aac949ac30fe49286841418b2898ad" translate="yes" xml:space="preserve">
          <source>Returns PI to the wanted accuracy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c520053627c64fa3c2459265f3c98c69401d9f5f" translate="yes" xml:space="preserve">
          <source>Returns PI to the wanted accuracy. Note that under bigint, this is truncated to an integer, and hence simple '3'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327682c084c70fda486bfb3be771a0413c3229c3" translate="yes" xml:space="preserve">
          <source>Returns PI truncated to an integer, with the argument being ignored. This means under BigInt this always returns &lt;code&gt;3&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da410a89af5164a0c8741909120b0e113c9a907" translate="yes" xml:space="preserve">
          <source>Returns PI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf4afe04118d7851c0aac8680ab511af39c9cb4" translate="yes" xml:space="preserve">
          <source>Returns PI. Note that under bigint, this is truncated to an integer, and hence simple '3'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c96d003c572d583a1138a19c98afcc3bdf85be8" translate="yes" xml:space="preserve">
          <source>Returns PID on success, -1 on error. The FLAGS argument is ignored in all cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9207286e99fede61c8f119ac35db00d5ebabfdb9" translate="yes" xml:space="preserve">
          <source>Returns TRUE if the remote server supports the given command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4c3e721557b5c97a46d6c7f452fa703131e69f" translate="yes" xml:space="preserve">
          <source>Returns TRUE if the terminator was found, else returns FALSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86dd86eb01ddd05d19d1e07bf5b9874c6c8147fb" translate="yes" xml:space="preserve">
          <source>Returns TRUE if there are any filters applied to the DBM associated with &lt;code&gt;$db&lt;/code&gt; . Otherwise returns FALSE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a9ef16bb3602636a0c4bd0e8ea4e677a26c1f7" translate="yes" xml:space="preserve">
          <source>Returns a $command line which just runs a single test without Test::Harness. No checks are done on the results, they're just printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5829af1348c8ee2d3665fe45c3621cf88b170dca" translate="yes" xml:space="preserve">
          <source>Returns a $command line which runs the given set of $tests with Test::Harness and the given $perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289c211dd90a016eae30bb66441a63ab247f6da9" translate="yes" xml:space="preserve">
          <source>Returns a 13-element list giving the status info for a file, either the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR. If EXPR is omitted, it stats &lt;code&gt;$_&lt;/code&gt; (not &lt;code&gt;_&lt;/code&gt; !). Returns the empty list if &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; fails. Typically used as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec72fef3a1a2c2a6ed8b2ae5861981436db00c7" translate="yes" xml:space="preserve">
          <source>Returns a 13-element list giving the status info for a file, either the file opened via FILEHANDLE or DIRHANDLE, or named by EXPR. If EXPR is omitted, it stats &lt;code&gt;$_&lt;/code&gt; (not &lt;code&gt;_&lt;/code&gt; !). Returns the empty list if &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; fails. Typically used as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078c2738638e39a25c2582868baa02e701ab1516" translate="yes" xml:space="preserve">
          <source>Returns a 32 bit integer representing the hash value of the string passed in. This value is only reliable for the lifetime of the process. It may be different depending on invocation, environment variables, perl version, architectures, and build options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e62e0afcdc57c3924bdd7b1920314479b475d8e" translate="yes" xml:space="preserve">
          <source>Returns a 44 character description of this module. Only available for modules listed in The Module List (CPAN/modules/00modlist.long.html or 00modlist.long.txt.gz)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e390c51112c15ffbe5db64a2c3bcd38009f02ae9" translate="yes" xml:space="preserve">
          <source>Returns a &lt;a href=&quot;parser/aggregator&quot;&gt;TAP::Parser::Aggregator&lt;/a&gt; containing the test results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a424a5b675f3ec7726f5e9df584409c954569b1f" translate="yes" xml:space="preserve">
          <source>Returns a B::PADLIST object under Perl 5.18 or higher, or a B::AV in earlier versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a87a96948366f5ea0c054b9ad57a438c86d7b6" translate="yes" xml:space="preserve">
          <source>Returns a Benchmark object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71b4c05ed137f2d3e8d6342391043a58f5a5b03" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value telling whether EXPR has a value other than the undefined value &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. If EXPR is not present, &lt;code&gt;$_&lt;/code&gt; is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0836f5ca4f174fe06136c589e27a3f9ed4bde956" translate="yes" xml:space="preserve">
          <source>Returns a Boolean value telling whether EXPR has a value other than the undefined value &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. If EXPR is not present, &lt;code&gt;$_&lt;/code&gt; is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab2656aa87969cc9dc5ce3c20e33dc2c8b93e83" translate="yes" xml:space="preserve">
          <source>Returns a Digest::SHA object representing the SHA state contained in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f6546706550d09611771d933ff33e3dea07df0" translate="yes" xml:space="preserve">
          <source>Returns a Digest::SHA object that results from calling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63524d4a4118ca3217432bfc25b7c379525fb60" translate="yes" xml:space="preserve">
          <source>Returns a Perl value which may be used instead of the corresponding regular expression, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if its argument is not recognised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f67979a4434475a7e25e72d10c05204dab5944" translate="yes" xml:space="preserve">
          <source>Returns a SV a dump of |depth| frames of the call stack, skipping the |skip| innermost ones. depth of 20 is usually enough.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b38c54c50762d0d3766b9c69ecfd82a584d3bb7" translate="yes" xml:space="preserve">
          <source>Returns a SV describing what the SV passed in is a reference to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6768357aea5c7d88a47d38f0e6a279e8cf943bc" translate="yes" xml:space="preserve">
          <source>Returns a Test::Builder object representing the current state of the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b725a6e91e3175c5f263c7a33b2dd952f62bd6a" translate="yes" xml:space="preserve">
          <source>Returns a U32 indicating whether the pointer to the string buffer is offset. This hack is used internally to speed up removal of characters from the beginning of a SvPV. When SvOOK is true, then the start of the allocated string buffer is actually &lt;code&gt;SvOOK_offset()&lt;/code&gt; bytes before SvPVX. This offset used to be stored in SvIVX, but is now stored within the spare part of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc093229f26a252e76d58b28c1e3335fc644b9e" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating the UTF-8 status of an SV. If things are set-up properly, this indicates whether or not the SV contains UTF-8 encoded data. You should use this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb51edcd90ab824e684efc4efb16d677a578ca29" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV contains a character string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5231fcdd123cafb5389cb102ea28e6b610241a3" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV contains a character string. Checks the &lt;b&gt;private&lt;/b&gt; setting. Use &lt;code&gt;SvPOK&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd2b6e3d5583cc0154203cda60cf1640fa9722d" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV contains a double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ecaa4936290bb692aef7d62b280c98eca97624" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV contains a double. Checks the &lt;b&gt;private&lt;/b&gt; setting. Use &lt;code&gt;SvNOK&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4405c32c509ff06f034a5c5b10bb25707c59fb" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV contains a number, integer or double.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5e936ea4eeca57a5da99afcf9f16adcf4ede7c" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV contains a number, integer or double. Checks the &lt;b&gt;private&lt;/b&gt; setting. Use &lt;code&gt;SvNIOK&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6a61eafc42cc19e0184cc99c2044eff3febadc" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV contains an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd8f0a8bc1fc17c47a9a228bdaa77321017185e" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV contains an integer. Checks the &lt;b&gt;private&lt;/b&gt; setting. Use &lt;code&gt;SvIOK&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2499712c178f4d22d2edb40ec424e1b89f24f911" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the SV is Copy-On-Write (either shared hash key scalars, or full Copy On Write scalars if 5.9.0 is configured for COW).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8da2b4b2fa02649f81a16d557e3278d57dad57" translate="yes" xml:space="preserve">
          <source>Returns a U32 value indicating whether the value is defined. This is only meaningful for scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db7cf06b30a633c79d72700fa34db8ab8260cb5" translate="yes" xml:space="preserve">
          <source>Returns a blessed object reference which the user can then use to send the control strings to the terminal using &lt;b&gt;Tputs&lt;/b&gt; and &lt;b&gt;Tgoto&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a15a12352318889d6990a965effdfa78241deb" translate="yes" xml:space="preserve">
          <source>Returns a bool giving whether or not the PV in &lt;code&gt;sv&lt;/code&gt; is to be treated as being encoded in UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668940e83ff2919758ac366d8681b177e2201df1" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether Perl would evaluate the SV as true or false. See SvOK() for a defined/undefined test. Does not handle 'get' magic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd02b6c22910061fceaedd5fa468528ac5b1dd09" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether Perl would evaluate the SV as true or false. See SvOK() for a defined/undefined test. Handles 'get' magic unless the scalar is already SvPOK, SvIOK or SvNOK (the public, not the private flags).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f02d0a25d86de18bb57f5e03b59dde94b0fed79" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether or not this module can actually generate colored output. This will be false if it could not load the modules needed for the current platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace1e66ae096c5c691e93ff90dfb3e10f7d8bdc2" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV (or the one it references) is a REGEXP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d480e6ec9e136a87d7eef30e55c4b80326f8e39f" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV contains a signed integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e14793b0a0f0860cac0b1fb7213102642df0e87" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV contains a v-string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23b2152485aef3ea2aa81e1117405592429acf1" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV contains an integer that must be interpreted as unsigned. A non-negative integer whose value is within the range of both an IV and a UV may be be flagged as either SvUOK or SVIOK.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263c966945712aface24be38355efccc0bf91800" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV is Copy-On-Write shared hash key scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89f32874b6d95f19296b47af499fd6f09ad4b4c" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV is an RV pointing to a blessed object. If the SV is not an RV, or if the object is not blessed, then this will return false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af59aa44656303bd511d51fde294882427039f5" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV is blessed into the specified class. This does not check for subtypes; use &lt;code&gt;sv_derived_from&lt;/code&gt; to verify an inheritance relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865393ef44edd13c13e1aec1f18c188fdd309444" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV is derived from the specified class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b80301adae3b0f6838e222f02e0e77c5bb14dcf" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the SV performs a specific, named role. The SV can be a Perl object or the name of a Perl class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbf91f5e759ae1bbefa87328b78d816e0160f0f" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character can be the first character of an identifier. This is very close to, but not quite the same as the official Unicode property &lt;code&gt;XID_Start&lt;/code&gt; . The difference is that this returns true only if the input character also matches &lt;a href=&quot;#isWORDCHAR&quot;&gt;isWORDCHAR&lt;/a&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isIDFIRST_A&lt;/code&gt; , &lt;code&gt;isIDFIRST_L1&lt;/code&gt; , &lt;code&gt;isIDFIRST_uni&lt;/code&gt; , &lt;code&gt;isIDFIRST_utf8&lt;/code&gt; , &lt;code&gt;isIDFIRST_LC&lt;/code&gt; , &lt;code&gt;isIDFIRST_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isIDFIRST_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40ef581f93d7f5544352568ae56e4d7279b6037" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character can be the second or succeeding character of an identifier. This is very close to, but not quite the same as the official Unicode property &lt;code&gt;XID_Continue&lt;/code&gt; . The difference is that this returns true only if the input character also matches &lt;a href=&quot;#isWORDCHAR&quot;&gt;isWORDCHAR&lt;/a&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isIDCONT_A&lt;/code&gt; , &lt;code&gt;isIDCONT_L1&lt;/code&gt; , &lt;code&gt;isIDCONT_uni&lt;/code&gt; , &lt;code&gt;isIDCONT_utf8&lt;/code&gt; , &lt;code&gt;isIDCONT_LC&lt;/code&gt; , &lt;code&gt;isIDCONT_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isIDCONT_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce017fc967cd4b42d5b0d83e9ea0bfc787abd7a8" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a character considered to be a blank, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:blank:]]/&lt;/a&gt;&lt;/code&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isBLANK_A&lt;/code&gt; , &lt;code&gt;isBLANK_L1&lt;/code&gt; , &lt;code&gt;isBLANK_uni&lt;/code&gt; , &lt;code&gt;isBLANK_utf8&lt;/code&gt; , &lt;code&gt;isBLANK_LC&lt;/code&gt; , &lt;code&gt;isBLANK_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isBLANK_LC_utf8&lt;/code&gt; . Note, however, that some platforms do not have the C library routine &lt;code&gt;isblank()&lt;/code&gt; . In these cases, the variants whose names contain &lt;code&gt;LC&lt;/code&gt; are the same as the corresponding ones without.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9852ba5728743e1ad6def01123109823a1eede3f" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a character that is a word character, analogous to what &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\w/&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:word:]]/&lt;/a&gt;&lt;/code&gt; match in a regular expression. A word character is an alphabetic character, a decimal digit, a connecting punctuation character (such as an underscore), or a &quot;mark&quot; character that attaches to one of those (like some sort of accent). &lt;code&gt;isALNUM()&lt;/code&gt; is a synonym provided for backward compatibility, even though a word character includes more than the standard C language meaning of alphanumeric. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isWORDCHAR_A&lt;/code&gt; , &lt;code&gt;isWORDCHAR_L1&lt;/code&gt; , &lt;code&gt;isWORDCHAR_uni&lt;/code&gt; , and &lt;code&gt;isWORDCHAR_utf8&lt;/code&gt; . &lt;code&gt;isWORDCHAR_LC&lt;/code&gt; , &lt;code&gt;isWORDCHAR_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isWORDCHAR_LC_utf8&lt;/code&gt; are also as described there, but additionally include the platform's native underscore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9275c448cc5ba27683786a2d8a8c811d79a675f" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a control character, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:cntrl:]]/&lt;/a&gt;&lt;/code&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isCNTRL_A&lt;/code&gt; , &lt;code&gt;isCNTRL_L1&lt;/code&gt; , &lt;code&gt;isCNTRL_uni&lt;/code&gt; , &lt;code&gt;isCNTRL_utf8&lt;/code&gt; , &lt;code&gt;isCNTRL_LC&lt;/code&gt; , &lt;code&gt;isCNTRL_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isCNTRL_LC_utf8&lt;/code&gt; On EBCDIC platforms, you almost always want to use the &lt;code&gt;isCNTRL_L1&lt;/code&gt; variant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5f9a2f004ec36fee23916c2d965d58a9667a24" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a digit, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:digit:]]/&lt;/a&gt;&lt;/code&gt;. Variants &lt;code&gt;isDIGIT_A&lt;/code&gt; and &lt;code&gt;isDIGIT_L1&lt;/code&gt; are identical to &lt;code&gt;isDIGIT&lt;/code&gt; . See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isDIGIT_uni&lt;/code&gt; , &lt;code&gt;isDIGIT_utf8&lt;/code&gt; , &lt;code&gt;isDIGIT_LC&lt;/code&gt; , &lt;code&gt;isDIGIT_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isDIGIT_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5aa05558f472c759c35c257a0ac246e6bf09367" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a either an alphabetic character or decimal digit, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:alnum:]]/&lt;/a&gt;&lt;/code&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isALPHANUMERIC_A&lt;/code&gt; , &lt;code&gt;isALPHANUMERIC_L1&lt;/code&gt; , &lt;code&gt;isALPHANUMERIC_uni&lt;/code&gt; , &lt;code&gt;isALPHANUMERIC_utf8&lt;/code&gt; , &lt;code&gt;isALPHANUMERIC_LC&lt;/code&gt; , &lt;code&gt;isALPHANUMERIC_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isALPHANUMERIC_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3d7d9d640e85535389698d9f2fb18931bac074" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a graphic character, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:graph:]]/&lt;/a&gt;&lt;/code&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isGRAPH_A&lt;/code&gt; , &lt;code&gt;isGRAPH_L1&lt;/code&gt; , &lt;code&gt;isGRAPH_uni&lt;/code&gt; , &lt;code&gt;isGRAPH_utf8&lt;/code&gt; , &lt;code&gt;isGRAPH_LC&lt;/code&gt; , &lt;code&gt;isGRAPH_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isGRAPH_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a521e0f9cf14d0eb9b9b50db942ae249b71fc1" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a hexadecimal digit. In the ASCII range these are &lt;code&gt;[0-9A-Fa-f]&lt;/code&gt; . Variants &lt;code&gt;isXDIGIT_A()&lt;/code&gt; and &lt;code&gt;isXDIGIT_L1()&lt;/code&gt; are identical to &lt;code&gt;isXDIGIT()&lt;/code&gt; . See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isXDIGIT_uni&lt;/code&gt; , &lt;code&gt;isXDIGIT_utf8&lt;/code&gt; , &lt;code&gt;isXDIGIT_LC&lt;/code&gt; , &lt;code&gt;isXDIGIT_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isXDIGIT_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff52e3b4ced8da14cf21ac0cf2d8d3b48eac969" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a lowercase character, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:lower:]]/&lt;/a&gt;&lt;/code&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isLOWER_A&lt;/code&gt; , &lt;code&gt;isLOWER_L1&lt;/code&gt; , &lt;code&gt;isLOWER_uni&lt;/code&gt; , &lt;code&gt;isLOWER_utf8&lt;/code&gt; , &lt;code&gt;isLOWER_LC&lt;/code&gt; , &lt;code&gt;isLOWER_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isLOWER_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41725a26249b072e3854b61782196d712beaccdb" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a printable character, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:print:]]/&lt;/a&gt;&lt;/code&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isPRINT_A&lt;/code&gt; , &lt;code&gt;isPRINT_L1&lt;/code&gt; , &lt;code&gt;isPRINT_uni&lt;/code&gt; , &lt;code&gt;isPRINT_utf8&lt;/code&gt; , &lt;code&gt;isPRINT_LC&lt;/code&gt; , &lt;code&gt;isPRINT_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isPRINT_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7793d22c7e9533fb9416bac2c7ec1172e04deac2" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a punctuation character, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:punct:]]/&lt;/a&gt;&lt;/code&gt;. Note that the definition of what is punctuation isn't as straightforward as one might desire. See &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt; for details. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isPUNCT_A&lt;/code&gt; , &lt;code&gt;isPUNCT_L1&lt;/code&gt; , &lt;code&gt;isPUNCT_uni&lt;/code&gt; , &lt;code&gt;isPUNCT_utf8&lt;/code&gt; , &lt;code&gt;isPUNCT_LC&lt;/code&gt; , &lt;code&gt;isPUNCT_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isPUNCT_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a715a3af988d8bb6cff21868fdb558f44c0512" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is a whitespace character. This is analogous to what &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\s/&lt;/a&gt;&lt;/code&gt; matches in a regular expression. Starting in Perl 5.18 this also matches what &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:space:]]/&lt;/a&gt;&lt;/code&gt; does. Prior to 5.18, only the locale forms of this macro (the ones with &lt;code&gt;LC&lt;/code&gt; in their names) matched precisely what &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:space:]]/&lt;/a&gt;&lt;/code&gt; does. In those releases, the only difference, in the non-locale variants, was that &lt;code&gt;isSPACE()&lt;/code&gt; did not match a vertical tab. (See &lt;a href=&quot;#isPSXSPC&quot;&gt;isPSXSPC&lt;/a&gt; for a macro that matches a vertical tab in all releases.) See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isSPACE_A&lt;/code&gt; , &lt;code&gt;isSPACE_L1&lt;/code&gt; , &lt;code&gt;isSPACE_uni&lt;/code&gt; , &lt;code&gt;isSPACE_utf8&lt;/code&gt; , &lt;code&gt;isSPACE_LC&lt;/code&gt; , &lt;code&gt;isSPACE_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isSPACE_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb03db284d9ba50542ef6a78c24086a8ed7602c8" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is an alphabetic character, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:alpha:]]/&lt;/a&gt;&lt;/code&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isALPHA_A&lt;/code&gt; , &lt;code&gt;isALPHA_L1&lt;/code&gt; , &lt;code&gt;isALPHA_uni&lt;/code&gt; , &lt;code&gt;isALPHA_utf8&lt;/code&gt; , &lt;code&gt;isALPHA_LC&lt;/code&gt; , &lt;code&gt;isALPHA_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isALPHA_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7aba7401f9e1c72d74964e907a9b2716eb9e27" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is an octal digit, [0-7]. The only two variants are &lt;code&gt;isOCTAL_A&lt;/code&gt; and &lt;code&gt;isOCTAL_L1&lt;/code&gt; ; each is identical to &lt;code&gt;isOCTAL&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15efb9db5798b3f62af85957e91796c0081a1fd0" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is an uppercase character, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:upper:]]/&lt;/a&gt;&lt;/code&gt;. See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isUPPER_A&lt;/code&gt; , &lt;code&gt;isUPPER_L1&lt;/code&gt; , &lt;code&gt;isUPPER_uni&lt;/code&gt; , &lt;code&gt;isUPPER_utf8&lt;/code&gt; , &lt;code&gt;isUPPER_LC&lt;/code&gt; , &lt;code&gt;isUPPER_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isUPPER_LC_utf8&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa3ee935b94e5b52cd32b7dfbaa4cfea1f8f549" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified character is one of the 128 characters in the ASCII character set, analogous to &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/[[:ascii:]]/&lt;/a&gt;&lt;/code&gt;. On non-ASCII platforms, it returns TRUE iff this character corresponds to an ASCII character. Variants &lt;code&gt;isASCII_A()&lt;/code&gt; and &lt;code&gt;isASCII_L1()&lt;/code&gt; are identical to &lt;code&gt;isASCII()&lt;/code&gt; . See the &lt;a href=&quot;#Character-classification&quot;&gt;top of this section&lt;/a&gt; for an explanation of variants &lt;code&gt;isASCII_uni&lt;/code&gt; , &lt;code&gt;isASCII_utf8&lt;/code&gt; , &lt;code&gt;isASCII_LC&lt;/code&gt; , &lt;code&gt;isASCII_LC_uvchr&lt;/code&gt; , and &lt;code&gt;isASCII_LC_utf8&lt;/code&gt; . Note, however, that some platforms do not have the C library routine &lt;code&gt;isascii()&lt;/code&gt; . In these cases, the variants whose names contain &lt;code&gt;LC&lt;/code&gt; are the same as the corresponding ones without.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cd19feb336d757e24d1ca5d00decdbb0f34399" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified filehandle is connected to a tty. Similar to the &lt;code&gt;-t&lt;/code&gt; operator, see &lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c03e1b106b9bca9aa586777ddd8acce73f8bb4" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified hash key exists. &lt;code&gt;hash&lt;/code&gt; can be a valid precomputed hash value, or 0 to ask for it to be computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121353f5b2eaa9a3d9bda681a610cdc561cf253a" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the specified hash key exists. The absolute value of &lt;code&gt;klen&lt;/code&gt; is the length of the key. If &lt;code&gt;klen&lt;/code&gt; is negative the key is assumed to be in UTF-8-encoded Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5313e3d6173b21fb5006ca3813abfeade7dee5" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the strings in the two SVs are identical. Is UTF-8 and 'use bytes' aware and coerces its args to strings if necessary. If the flags include SV_GMAGIC, it handles get-magic, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d62dc3ef5c0ce2f33205fd37c1d90629e10e6b" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating whether the strings in the two SVs are identical. Is UTF-8 and 'use bytes' aware, handles get magic, and will coerce its args to strings if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17bf5c8034ffaf1b55c10e89659d3e8e5d24b49" translate="yes" xml:space="preserve">
          <source>Returns a boolean status indicating whether or not the given classname is either &lt;code&gt;UNIVERSAL&lt;/code&gt; itself, or one of &lt;code&gt;UNIVERSAL&lt;/code&gt; 's parents by &lt;code&gt;@ISA&lt;/code&gt; inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7bf100c650c225813f8d3ca45243f2ec361a683" translate="yes" xml:space="preserve">
          <source>Returns a boolean to indicate whether the current object has content. Some special files like directories and so on never will have any content. This method is mainly to make sure you don't get warnings for using uninitialized values when looking at an object's content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9137f275a766c2cceed1614358dbf481ba99d8d3" translate="yes" xml:space="preserve">
          <source>Returns a boolean value indicating whether or not the number of tests planned matches the number of tests run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97bd77a512fc1c3afe80bad2a24a1469187ca39" translate="yes" xml:space="preserve">
          <source>Returns a boolean value indicating whether or not the test passed, regardless of its TODO status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1c38bb380ee78790b9faaa0b57977e6a6be36c" translate="yes" xml:space="preserve">
          <source>Returns a boolean value indicating whether or not the test passed. Remember that for TODO tests, the test always passes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8be11f56eba06f6215a295d4aa9e09ffe0119a" translate="yes" xml:space="preserve">
          <source>Returns a boolean value indicating whether or not this test had a SKIP directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bf1f2ad9c933e98e212df8ca85bdd535baa36e" translate="yes" xml:space="preserve">
          <source>Returns a boolean value indicating whether or not this test had a TODO directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bb62946ab90d79896ef8fbc93554e612f01341" translate="yes" xml:space="preserve">
          <source>Returns a boolean value indicating whether or not this test has a SKIP directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd95ff22315220944c5d8adc000e9bb0dc47442d" translate="yes" xml:space="preserve">
          <source>Returns a boolean value indicating whether or not this test has a TODO directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfd0dae46cb0c91d7931cd887d4fc847c2ab010" translate="yes" xml:space="preserve">
          <source>Returns a byte count if successful (which may be zero or positive), returns negative value and sets &lt;code&gt;errno&lt;/code&gt; on error. Depending on implementation &lt;code&gt;errno&lt;/code&gt; may be &lt;code&gt;EINTR&lt;/code&gt; if operation was interrupted by a signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92724b847f300275a1d7f6ab34f2957570785e5" translate="yes" xml:space="preserve">
          <source>Returns a code reference which, when passed an appropriate line of TAP, returns the lexed token corresponding to that line. As a result, the basic TAP parsing loop looks similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250bd801628d1959cff347377739bc0fdd695949" translate="yes" xml:space="preserve">
          <source>Returns a copy of the denominator (the part under the line) as positive BigInt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1459dc1c58bb1dc9cdeee402445d3db69db0dae5" translate="yes" xml:space="preserve">
          <source>Returns a copy of the numerator (the part above the line) as signed BigInt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4886a637f8ba359a81c9933464803da25761aebb" translate="yes" xml:space="preserve">
          <source>Returns a copy of the object as BigFloat, preserving the accuracy as wanted, or the default of 40 digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c279b2e2c51eeca1b17bd33cccb475f3122b3f" translate="yes" xml:space="preserve">
          <source>Returns a copy of the object as BigInt, truncated to an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8c2cac3d66912d28da94207b4929099540c29c" translate="yes" xml:space="preserve">
          <source>Returns a definition for the POD2MAN macro. This is a program which emulates the pod2man utility. You can add more switches to the command by simply appending them on the macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18a469fd6bb6b4730a0fff4118015820804b932" translate="yes" xml:space="preserve">
          <source>Returns a double-quote-surrounded escaped version of STR which can be used as a string in C source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e8b3aa73f7ca4af9783bcbc4977b12160a8928" translate="yes" xml:space="preserve">
          <source>Returns a double-quote-surrounded escaped version of STR which can be used as a string in Perl source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5796d852e1c910eaeb916456a16d42f7d5ee74" translate="yes" xml:space="preserve">
          <source>Returns a duplicate copy of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f325e9280bdd4d13a1ce4341473e4dd889e86d" translate="yes" xml:space="preserve">
          <source>Returns a filehandle tied to the Net::Cmd object. After issuing a command, you may read from this filehandle using read() or &amp;lt;&amp;gt;. The filehandle will return EOF when the final dot is encountered. Similarly, you may write to the filehandle in order to send data to the server after issuing a command that expects data to be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fd9d2bb57f2077c4e81989e929cd22950c29ea" translate="yes" xml:space="preserve">
          <source>Returns a floating seconds since the epoch. This function can be imported, resulting in a nice drop-in replacement for the &lt;code&gt;&lt;a href=&quot;../functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; provided with core Perl; see the &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50f7f4e52b9476b89b80acc01d637ac37ef1468" translate="yes" xml:space="preserve">
          <source>Returns a formatted string representing the runtime returned by &lt;code&gt;elapsed()&lt;/code&gt; . This lets the caller not worry about Benchmark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b709134b8ac971f48b0ba6587adbc0b2b8bbb287" translate="yes" xml:space="preserve">
          <source>Returns a four-element list giving the user and system times in seconds for this process and any exited children of this process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6d3dc8137b45cacf9a75e5dbf0aa4a2398a11e" translate="yes" xml:space="preserve">
          <source>Returns a hash containing the configuration, e.g. the version number, lib loaded etc. The following hash keys are currently filled in with the appropriate information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fdca20296d88fa1aaff95eb9fde2fd34cb1994" translate="yes" xml:space="preserve">
          <source>Returns a hash reference of Benchmark objects, keyed by name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac63bfb3a3e6dd843b2aa85018c53e943ead17c" translate="yes" xml:space="preserve">
          <source>Returns a hash reference. The keys of the hash are the letters &lt;code&gt;D&lt;/code&gt; , &lt;code&gt;S&lt;/code&gt; , &lt;code&gt;L&lt;/code&gt; , &lt;code&gt;I&lt;/code&gt; , and &amp;lt;P&amp;gt;, for development status, support level, language, interface and public licence respectively. The data for the DSLIP status are collected by pause.perl.org when authors register their namespaces. The values of the 5 hash elements are one-character words whose meaning is described in the table below. There are also 5 hash elements &lt;code&gt;DV&lt;/code&gt; , &lt;code&gt;SV&lt;/code&gt; , &lt;code&gt;LV&lt;/code&gt; , &lt;code&gt;IV&lt;/code&gt; , and &amp;lt;PV&amp;gt; that carry a more verbose value of the 5 status variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846a8a177f18ddd7d4c5cb69da067db90cb82d60" translate="yes" xml:space="preserve">
          <source>Returns a hash with system information. The keys of the hash are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9d6b1f96735fb6f907afc948d242c14dd6acc6" translate="yes" xml:space="preserve">
          <source>Returns a hashref of raw results, suitable for serialization by YAML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc298e6a1a0d274c33e8d9fb51b688f54c4bb11" translate="yes" xml:space="preserve">
          <source>Returns a hashref of raw test data, suitable for serialization by YAML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22d7d194b2c4d665ff1b7f0d98a24fc7cedbe6b" translate="yes" xml:space="preserve">
          <source>Returns a letter without colon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e96317825f6b3e1a7e1022ae8e0f3fc84ab7665" translate="yes" xml:space="preserve">
          <source>Returns a list of &lt;code&gt;Archive::Tar::File&lt;/code&gt; objects that were just added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0db60e6b0c64c93b70980380d4f32ebfe27a873" translate="yes" xml:space="preserve">
          <source>Returns a list of C pre-processor options used when compiling this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4eb4f62d9548cdeb8a87f9c752ec6862adb849" translate="yes" xml:space="preserve">
          <source>Returns a list of IDs of modules contained in a distribution file. Works only for distributions listed in the 02packages.details.txt.gz file. This typically means that just most recent version of a distribution is covered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f87b3d7a940704d24d36bcd5aed3d9ee92ebf3" translate="yes" xml:space="preserve">
          <source>Returns a list of OS specific files to be removed in the clean target in addition to the usual set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf2c278ede2265c40d35666697e630e8eb496d1" translate="yes" xml:space="preserve">
          <source>Returns a list of all non-joined, non-detached Thread objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019d68cae9b1b3e9c9596ada9e8cb4855e2ca21b" translate="yes" xml:space="preserve">
          <source>Returns a list of all of the named buffers defined in the last successful match. If $all is true, then it returns all names defined, if not it returns only names which were involved in the match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a35d54f37dbc604d69e6d60af4c2972bfa7619" translate="yes" xml:space="preserve">
          <source>Returns a list of canonical names of available encodings that have already been loaded. To get a list of all available encodings including those that have not yet been loaded, say:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9b1cde71bc5301e223d37824894c6945d8edb5" translate="yes" xml:space="preserve">
          <source>Returns a list of filenames extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c721de55976f935f544f746ba999346e964fcbb9" translate="yes" xml:space="preserve">
          <source>Returns a list of handles. If EVENT_MASK is not given then a list of all handles known will be returned. If EVENT_MASK is given then a list of handles will be returned which had one of the events specified by EVENT_MASK happen during the last call ti &lt;code&gt;poll&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aef388befca27309e982d59247b0ec6b235feea" translate="yes" xml:space="preserve">
          <source>Returns a list of language tags that are superordinate tags to $lang1 -- it gets this by removing subtags from the end of $lang1 until nothing (or just &quot;i&quot; or &quot;x&quot;) is left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a76a46cf0b37621effdd5e8c02449fa5ac9589" translate="yes" xml:space="preserve">
          <source>Returns a list of objects' IDs contained in a bundle. The associated objects may be bundles, modules or distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1e002e4535ccd8fdc133ab209134bc583eae51" translate="yes" xml:space="preserve">
          <source>Returns a list of operator names corresponding to those operators in the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c4008542bffc7b89b12635d94be15a4aaba4b3" translate="yes" xml:space="preserve">
          <source>Returns a list of pragmas each of which is a + or - followed by the pragma name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230f74d4607a7f27209056bc9bc6af781aa28fef" translate="yes" xml:space="preserve">
          <source>Returns a list of statistics about a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe144bb7531ce29e46cc8ada3f153adf6f969d24" translate="yes" xml:space="preserve">
          <source>Returns a list of the header files that should be used as dependencies for XS code, for this version of Perl on this platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b73efcaddb141a1af7d7aedf65f19131b01a60" translate="yes" xml:space="preserve">
          <source>Returns a list of the names of all the files in the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c807f09f86b09b3cceb4ae58c501a57774d751c3" translate="yes" xml:space="preserve">
          <source>Returns a list of the names of all the files in the archive. The first argument can either be the name of the tar file to list or a reference to an open file handle (e.g. a GLOB reference).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7a5fa8705763a28c56a13969e98db8aac5dbd0" translate="yes" xml:space="preserve">
          <source>Returns a list of the names of locally applied patches, equivalent to what is shown by &lt;code&gt;perl -V&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc99f0f9cafceff5505406bb1667be25637eab4" translate="yes" xml:space="preserve">
          <source>Returns a list of the original</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d5fd8b815f817b4b90a294c1839a12e02dc791" translate="yes" xml:space="preserve">
          <source>Returns a list of two elements. These are the number of new messages and the total number of messages for &lt;code&gt;USER&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f323d9ef4b0b4a03a48dce624ecba3555edd294" translate="yes" xml:space="preserve">
          <source>Returns a list of two elements. These are the number of undeleted elements and the size of the mbox in octets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af87a9cb1a81e8481bc874715c237016cdd28a2" translate="yes" xml:space="preserve">
          <source>Returns a list of two values, &lt;code&gt;$total&lt;/code&gt; and &lt;code&gt;$failed&lt;/code&gt; , describing the results. &lt;code&gt;$total&lt;/code&gt; is a hash ref summary of all the tests run. Its keys and values are this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f12e9332ca79ed6d064f0bd6bc7ec7686b0040" translate="yes" xml:space="preserve">
          <source>Returns a list of whatever looks like formally valid language tags in $whatever. Not very smart, so don't get too creative with what you want to feed it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e99dff8673f03d3aefdd0b2849d5ba7ad37d1e" translate="yes" xml:space="preserve">
          <source>Returns a lowercased version of EXPR. This is the internal function implementing the &lt;code&gt;\L&lt;/code&gt; escape in double-quoted strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b906e1deb1923677776464c5259e09182656e3a8" translate="yes" xml:space="preserve">
          <source>Returns a make fragment containing any targets which have special meaning to make. For example, .SUFFIXES and .PHONY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779fd366b6948f93004ca0affd4a6084facb9568" translate="yes" xml:space="preserve">
          <source>Returns a make fragment containing definitions for the macros init_others() initializes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1f520e917d7a6a8c26e510f87711bcfe7275b8" translate="yes" xml:space="preserve">
          <source>Returns a make fragment defining all the macros initialized in init_platform() rather than put them in constants().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637299bb9b2eaf7440b62525d3ed61fd92685553" translate="yes" xml:space="preserve">
          <source>Returns a make fragment with the makemakerdeflt_target specified. This target is the first target in the Makefile, is the default target and simply points off to 'all' just in case any make variant gets confused or something gets snuck in before the real 'all' target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd09a98375c7f928e5683f491e4c838949c93b26" translate="yes" xml:space="preserve">
          <source>Returns a method name, or else a reference to the user-supplied subroutine used to print error messages. Returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the &lt;b&gt;carp&lt;/b&gt; builtin is used to issue error messages (this is the default behavior).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc41b8f81ab3f9aa00c8a62749dd8467621f1c1b" translate="yes" xml:space="preserve">
          <source>Returns a multi-line description of the author</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3507dae02d9454030cfcf0029240323de623cd2b" translate="yes" xml:space="preserve">
          <source>Returns a multi-line description of the bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e02721bd8079e7f34a2b14848f3ccaad2e4d16" translate="yes" xml:space="preserve">
          <source>Returns a multi-line description of the distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b4aa253f5016f004528200073a13e30db1494e" translate="yes" xml:space="preserve">
          <source>Returns a multi-line description of the module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0ad788a356f40c6dcc75e2209325890cc57d20" translate="yes" xml:space="preserve">
          <source>Returns a name for a temporary file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4edb06f1dfcea66f8530475e32f9627e006e80" translate="yes" xml:space="preserve">
          <source>Returns a native FILE * used by a stdio layer. If there is none, it will create one with PerlIO_exportFILE. In either case the FILE * should be considered as belonging to PerlIO subsystem and should only be closed by calling &lt;code&gt;PerlIO_close()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e0bc5662a23a4eb7b1063629206afa37cacad3" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;App::Prove::State::Result&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072af55c29b21f22fb0dbaadf0bed86846b7e6d7" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;ExtUtils::CBuilder&lt;/code&gt; object. A &lt;code&gt;config&lt;/code&gt; parameter lets you override &lt;code&gt;Config.pm&lt;/code&gt; settings for all operations performed by the object, as in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547c5e3b401dfbfcf933d775ab30e8a7428a8060" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;TAP::Parser::Aggregator&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0e8d9ef34307eb0fef33472e682fd06e8ae96c" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;TAP::Parser::Multiplexer&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afba8de307940439e9161479c20bd85449a00193" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;TAP::Parser::Source&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945ed838143cbab9b40f4992e5e493932dca66f7" translate="yes" xml:space="preserve">
          <source>Returns a new &lt;code&gt;TAP::Parser&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7358c499f3395e1846c123b20835372d326ebe81" translate="yes" xml:space="preserve">
          <source>Returns a new Archive::Tar::File object from a raw 512-byte tar archive chunk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76931e1bf6e2f2e4f5e180a279c71e682a915e13" translate="yes" xml:space="preserve">
          <source>Returns a new Archive::Tar::File object from an existing file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ac76734b482c19ca14f4b13dfa032dc8275fff" translate="yes" xml:space="preserve">
          <source>Returns a new Archive::Tar::File object from data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf6dfd01efe542672ac1b4f915c19832cfc58b4" translate="yes" xml:space="preserve">
          <source>Returns a new Digest::SHA object. Allowed values for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79209b046ca6d87244e096a4d7a1a827b30b1488" translate="yes" xml:space="preserve">
          <source>Returns a new Tar object. If given any arguments, &lt;code&gt;new()&lt;/code&gt; calls the &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; method automatically, passing on the arguments provided to the &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399306dc24ce0e24c63672215dc8bc35cef0eba2" translate="yes" xml:space="preserve">
          <source>Returns a new instance of &lt;code&gt;Test::Builder&lt;/code&gt; . Any output from this child will be indented four spaces more than the parent's indentation. When done, the &lt;code&gt;finalize&lt;/code&gt; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3379b03088fb9664fb4a626b54d04b8ede428d66" translate="yes" xml:space="preserve">
          <source>Returns a new version object based on the passed in SV:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8345487700ba01fc47e18199b150a6447736d3e" translate="yes" xml:space="preserve">
          <source>Returns a new, empty XS parser/compiler object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18975b555ce52ec7fd6cf355697113cb2d39403" translate="yes" xml:space="preserve">
          <source>Returns a newly created &lt;code&gt;Data::Dumper&lt;/code&gt; object. The first argument is an anonymous array of values to be dumped. The optional second argument is an anonymous array of names for the values. The names need not have a leading &lt;code&gt;$&lt;/code&gt; sign, and must be comprised of alphanumeric characters. You can begin a name with a &lt;code&gt;*&lt;/code&gt; to specify that the dereferenced type must be dumped instead of the reference itself, for ARRAY and HASH references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce97ca87f8cdcc859ac4cd9c5dff374e29abae6a" translate="yes" xml:space="preserve">
          <source>Returns a non-empty string if EXPR is a reference, the empty string otherwise. If EXPR is not specified, &lt;code&gt;$_&lt;/code&gt; will be used. The value returned depends on the type of thing the reference is a reference to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3001190420830f205689a15705d11072560910d" translate="yes" xml:space="preserve">
          <source>Returns a normalized string representation of &lt;code&gt;$x&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765e5ff450d6ae85c48fb752c475ad2344b2cec4" translate="yes" xml:space="preserve">
          <source>Returns a numeric value for a Unix-like file descriptor. Returns -1 if there isn't one. Optional. Default is fileno($fh).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85bb5b249f888f02c33e8bcae92e0d34d8747a2" translate="yes" xml:space="preserve">
          <source>Returns a one-line description of the author</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085619845cce2764231d5f073b28a019b850c6be" translate="yes" xml:space="preserve">
          <source>Returns a one-line description of the bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f290bc48da4a7f28b295116bf32ff3707ae6f6" translate="yes" xml:space="preserve">
          <source>Returns a one-line description of the distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e16f9806bf88053e899830890b09a474cdee19" translate="yes" xml:space="preserve">
          <source>Returns a one-line description of the module in four columns: The first column contains the word &lt;code&gt;Module&lt;/code&gt; , the second column consists of one character: an equals sign if this module is already installed and up-to-date, a less-than sign if this module is installed but can be upgraded, and a space if the module is not installed. The third column is the name of the module and the fourth column gives maintainer or distribution information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab97353a9a564a635e7bfd6c1c9333885951735" translate="yes" xml:space="preserve">
          <source>Returns a packed representation of the bucket array associated with a hash. Each element of the array is either an integer K, in which case it represents K empty buckets, or a reference to another array which contains the keys that are in that bucket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b2dad34c9af9b9e48afae62db216306d4b693d" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the escaped text as held by dsv.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45854f7b6cfbeb20b8e009a15ca9a490094c4ee3" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the next character after the parsed version string, as well as upgrading the passed in SV to an RV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca5459937679b6b48f08d353b33b366ffeba6a9" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the physical string in the SV. The SV must contain a string. Prior to 5.9.3 it is not safe to execute this macro unless the SV's type &amp;gt;= SVt_PV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751b690c1de8da5a67e95f434e3bb02c1f97da75" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the prettified text as held by dsv.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f6a7041767c74944f16c3dd82443358606f5aa" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the spot just after the last character in the string which is in the SV, where there is usually a trailing &lt;code&gt;NUL&lt;/code&gt; character (even though Perl scalars do not strictly require it). See &lt;code&gt;SvCUR&lt;/code&gt; . Access the character as *(SvEND(sv)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcee1691ca884c9e72f762e9e662369b4236b3e" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the stash for a specified package. See &lt;code&gt;gv_stashpvn&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e282b84489a62c496fa8f05e9f39ee4b0e980a0" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the stash for a specified package. The &lt;code&gt;namelen&lt;/code&gt; parameter indicates the length of the &lt;code&gt;name&lt;/code&gt; , in bytes. &lt;code&gt;flags&lt;/code&gt; is passed to &lt;code&gt;gv_fetchpvn_flags()&lt;/code&gt; , so if set to &lt;code&gt;GV_ADD&lt;/code&gt; then the package will be created if it does not already exist. If the package does not exist and &lt;code&gt;flags&lt;/code&gt; is 0 (or any other setting that does not create packages) then NULL is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2df4b092ba2f395387ccc2b641cceca25e59ce9" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the stash for a specified package. Uses &lt;code&gt;strlen&lt;/code&gt; to determine the length of &lt;code&gt;name&lt;/code&gt; , then calls &lt;code&gt;gv_stashpvn()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbcc3b472c525493f720cd9e6594185078b9d5d" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the string in the SV, or a stringified form of the SV if the SV does not contain a string. The SV may cache the stringified version becoming &lt;code&gt;SvPOK&lt;/code&gt; . Handles 'get' magic. The &lt;code&gt;len&lt;/code&gt; variable will be set to the length of the string (this is a macro, so don't use &lt;code&gt;&amp;amp;len&lt;/code&gt; ). See also &lt;code&gt;SvPVx&lt;/code&gt; for a version which guarantees to evaluate sv only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cdf7cb07a9c099c40d2da202c258ffd257cb7b" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the string value of an SV, and sets *lp to its length. If flags includes SV_GMAGIC, does an mg_get() first. Coerces sv to a string if necessary. Normally invoked via the &lt;code&gt;SvPV_flags&lt;/code&gt; macro. &lt;code&gt;sv_2pv()&lt;/code&gt; and &lt;code&gt;sv_2pv_nomg&lt;/code&gt; usually end up here too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccf75c310175c6a4488b8e04da79109516ce3e9" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the upgraded SV. Set the boolean qv if you want to force this SV to be interpreted as an &quot;extended&quot; version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9806bfe88ab20e21133de039751096c2b5db2cc" translate="yes" xml:space="preserve">
          <source>Returns a pre-compiled regular expression which will match a chunk of TAP corresponding to the token type. For example (not that you should really pay attention to this, &lt;code&gt;$grammar-&amp;gt;syntax_for('comment')&lt;/code&gt; will return &lt;code&gt;&lt;a href=&quot;../../functions/qr&quot;&gt;qr/^#(.*)/&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d799d803f81669100d9de58e2fdb734bd9aa0e" translate="yes" xml:space="preserve">
          <source>Returns a random fractional number greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than the value of EXPR. (EXPR should be positive.) If EXPR is omitted, the value &lt;code&gt;1&lt;/code&gt; is used. Currently EXPR with the value &lt;code&gt;0&lt;/code&gt; is also special-cased as &lt;code&gt;1&lt;/code&gt; (this was undocumented before Perl 5.8.0 and is subject to change in future versions of Perl). Automatically calls &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt; unless &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt; has already been called. See also &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf508d90600b43529e14c953f5a97c8d6689b38f" translate="yes" xml:space="preserve">
          <source>Returns a random fractional number greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than the value of EXPR. (EXPR should be positive.) If EXPR is omitted, the value &lt;code&gt;1&lt;/code&gt; is used. Currently EXPR with the value &lt;code&gt;0&lt;/code&gt; is also special-cased as &lt;code&gt;1&lt;/code&gt; (this was undocumented before Perl 5.8.0 and is subject to change in future versions of Perl). Automatically calls &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt; unless &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt; has already been called. See also &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615f1be3cb3c2f4b6b37c0d2b02695dba53f7f48" translate="yes" xml:space="preserve">
          <source>Returns a reference to %hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4928b52facdef33a297a37259697ab23569e3b20" translate="yes" xml:space="preserve">
          <source>Returns a reference to a HASH where the keys are the message numbers and the values are the References: lines from the articles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe95d10b42d51f9703da93feb20ddb89337d57f" translate="yes" xml:space="preserve">
          <source>Returns a reference to a hash where the keys are all the group names which match &lt;code&gt;PATTERN&lt;/code&gt; , or all of the groups if no pattern is specified, and each value contains the description text for the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bd4c7f883c9af6844ec55948d66de1eb64f6e3" translate="yes" xml:space="preserve">
          <source>Returns a reference to a hash where the keys are all the group names which match &lt;code&gt;PATTERN&lt;/code&gt; and each value is the description text for the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb7e4208f1f422785ac5e8fe96d8f9097ffac62" translate="yes" xml:space="preserve">
          <source>Returns a reference to a hash where the keys are all the possible distribution names and the values are the distribution descriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ec26a19426ec79ed0673c2ccdaab5bd48995f2" translate="yes" xml:space="preserve">
          <source>Returns a reference to a hash where the keys are the group names and each value is a reference to an array containing the time the groups was created and an identifier, possibly an Email address, of the creator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17453cf382e7663b26c4fee31095feb280394c5f" translate="yes" xml:space="preserve">
          <source>Returns a reference to a hash with keys being features present in current implementation. Several optional features are used in the minimal interface: &lt;code&gt;appname&lt;/code&gt; should be present if the first argument to &lt;code&gt;new&lt;/code&gt; is recognized, and &lt;code&gt;minline&lt;/code&gt; should be present if &lt;code&gt;MinLine&lt;/code&gt; method is not dummy. &lt;code&gt;autohistory&lt;/code&gt; should be present if lines are put into history automatically (maybe subject to &lt;code&gt;MinLine&lt;/code&gt; ), and &lt;code&gt;addhistory&lt;/code&gt; if &lt;code&gt;addhistory&lt;/code&gt; method is not dummy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e83ba134feb058a413f52ca605c72031800912" translate="yes" xml:space="preserve">
          <source>Returns a reference to a list containing the lines, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73a5311ceb7c81983f36e1603ef6e15eb22357e" translate="yes" xml:space="preserve">
          <source>Returns a reference to a list of all the active messages in &lt;code&gt;GROUP&lt;/code&gt; , or the current group if &lt;code&gt;GROUP&lt;/code&gt; is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3486db5bdeee77ac7492cb70ea10c73309efb0a7" translate="yes" xml:space="preserve">
          <source>Returns a reference to a list which contains a list of groups which are recommended for a new user to subscribe to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dfc9d6cb31fa87eb63c1c47373e4ad007e6281" translate="yes" xml:space="preserve">
          <source>Returns a reference to a list which contains the message-ids of all news posted after &lt;code&gt;SINCE&lt;/code&gt; , that are in a groups which matched &lt;code&gt;GROUPS&lt;/code&gt; and a distribution which matches &lt;code&gt;DISTRIBUTIONS&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178c756c0070fffc4153009701333a87d6109001" translate="yes" xml:space="preserve">
          <source>Returns a reference to an ARRAY of rows, each row is an ARRAY of cells from the above chart, including labels. This:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5ebe7eaaeb5e8db14fd11d03baf357b487217a" translate="yes" xml:space="preserve">
          <source>Returns a reference to an anonymous subroutine that, when executed, will call CODEREF with the Safe compartment 'in effect'. In other words, with the package namespace adjusted and the opmask enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afcce74b3b895c14382df3096068d0a37bf36e4" translate="yes" xml:space="preserve">
          <source>Returns a reference to an array where each element, itself an array reference, consists of the three fields of a line of the distrib.pats list maintained by some NNTP servers, namely: a weight, a wildmat and a value which the client may use to construct a Distribution header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f750b931900c32df3fa44962cae51f18d580a5" translate="yes" xml:space="preserve">
          <source>Returns a reference to an array which contain the names of the fields returned by &lt;code&gt;xover&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec689a3e517335306f46c2053a044ceacb52aff" translate="yes" xml:space="preserve">
          <source>Returns a reference to the %hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6600e08a5af2621b51163cee09e33d4a7b83fec5" translate="yes" xml:space="preserve">
          <source>Returns a reference to the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c469df7eb03b91df007168353935c392b20a6a" translate="yes" xml:space="preserve">
          <source>Returns a reference to the object underlying VARIABLE (the same value that was originally returned by the &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call that bound the variable to a package.) Returns the undefined value if VARIABLE isn't tied to a package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd036a2315a701fec7424b8505f28e3ef7e0a98" translate="yes" xml:space="preserve">
          <source>Returns a reference to the object underlying VARIABLE (the same value that was originally returned by the &lt;code&gt;&lt;a href=&quot;tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call that bound the variable to a package.) Returns the undefined value if VARIABLE isn't tied to a package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4a9958db2d459ae3e80355de054fcda823a5cd" translate="yes" xml:space="preserve">
          <source>Returns a reference to the regular scalar corresponding to this B::SV object. In other words, this method is the inverse operation to the svref_2object() subroutine. This scalar and other data it points at should be considered read-only: modifying them is neither safe nor guaranteed to have a sensible effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f364b844a4f88bbd2f6745f581b2d05dbe89db" translate="yes" xml:space="preserve">
          <source>Returns a scalar that has the value &lt;code&gt;$num&lt;/code&gt; in a numeric context and the value &lt;code&gt;$string&lt;/code&gt; in a string context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a823e074342aa3b692686bda146fd73abdf993f1" translate="yes" xml:space="preserve">
          <source>Returns a sort key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00388bdb182045c1d860e7a7441d0b87c26ecc13" translate="yes" xml:space="preserve">
          <source>Returns a splice of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4933eba0add60e415478da1c68e0c12dbfe3402" translate="yes" xml:space="preserve">
          <source>Returns a string containing a portable, human-readable representation of the current SHA state.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
