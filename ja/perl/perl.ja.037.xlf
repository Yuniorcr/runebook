<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="10a3726f3632f6869d052300b4a97061a0f2783d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../pod/usage&quot;&gt;Pod::Usage&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../pod/usage&quot;&gt;Pod :: Usage&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d290c4d73a4c9a30883498ca11623a61519662b9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../spec&quot;&gt;File::Spec&lt;/a&gt; and &lt;a href=&quot;unix&quot;&gt;File::Spec::Unix&lt;/a&gt;. This package overrides the implementation of these methods, not the semantics.</source>
          <target state="translated">&lt;a href=&quot;../spec&quot;&gt;File :: Spec&lt;/a&gt;および&lt;a href=&quot;unix&quot;&gt;File :: Spec :: Unixを&lt;/a&gt;参照してください。このパッケージは、セマンティクスではなく、これらのメソッドの実装をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="a6b10fbdc874b5a4a77103b24979b9c350436caa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../tap/parser&quot;&gt;TAP::Parser&lt;/a&gt;, &lt;a href=&quot;../tap/harness&quot;&gt;TAP::Harness&lt;/a&gt; for the main documentation for this distribution.</source>
          <target state="translated">このディストリビューションの主要なドキュメントについては、&lt;a href=&quot;../tap/parser&quot;&gt;TAP :: Parser&lt;/a&gt;、&lt;a href=&quot;../tap/harness&quot;&gt;TAP :: Harness&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c447f42578e43ae3e6605205bdde05967a7faf96" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../warnings&quot;&gt;warnings&lt;/a&gt; for more information about lexical warnings.</source>
          <target state="translated">字句警告の詳細については、&lt;a href=&quot;../warnings&quot;&gt;警告&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="44b382b16fffe92577f19c159253d88a0e5a86e3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../warnings&quot;&gt;warnings&lt;/a&gt; for more information on this module's usage.</source>
          <target state="translated">このモジュールの使用法の詳細については、&lt;a href=&quot;../warnings&quot;&gt;警告&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="30eb3c4ed6fdf895cda2c46d24fb41f9287a7fb0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;autodie/exception&quot;&gt;autodie::exception&lt;/a&gt; for further information on interrogating exceptions.</source>
          <target state="translated">&lt;a href=&quot;autodie/exception&quot;&gt;例外の問い合わせの&lt;/a&gt;詳細については、autodie :: exceptionを参照してください。</target>
        </trans-unit>
        <trans-unit id="bb8954af7fb5ccdc28f9968184aa62f0cd0dd631" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;base&quot;&gt;TAP::Formatter::Base&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;base&quot;&gt;TAP :: Formatter :: Baseを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="c3c2614a4bf281c7ef55cc34f337c1d619fa1884" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;bigint&quot;&gt;Math::BigInt&lt;/a&gt; for more details than you ever wanted to know about using a different low-level library.</source>
          <target state="translated">異なる低レベルのライブラリを使用することについて、あなたが知りたくなかった詳細については、&lt;a href=&quot;bigint&quot;&gt;Math :: BigInt&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ce4247dde2e63b0f8b6a60cd50088d3656354822" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; or &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; for some interesting tie() implementations. A good starting point for many tie() implementations is with one of the modules &lt;a href=&quot;tie/scalar&quot;&gt;Tie::Scalar&lt;/a&gt;, &lt;a href=&quot;tie/array&quot;&gt;Tie::Array&lt;/a&gt;, &lt;a href=&quot;tie/hash&quot;&gt;Tie::Hash&lt;/a&gt;, or &lt;a href=&quot;tie/handle&quot;&gt;Tie::Handle&lt;/a&gt;.</source>
          <target state="translated">興味深いtie（）の実装については、&lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt;または&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を参照してください。多くのtie（）実装の良い出発点は、モジュール&lt;a href=&quot;tie/scalar&quot;&gt;Tie :: Scalar&lt;/a&gt;、&lt;a href=&quot;tie/array&quot;&gt;Tie :: Array&lt;/a&gt;、&lt;a href=&quot;tie/hash&quot;&gt;Tie :: Hash&lt;/a&gt;、または&lt;a href=&quot;tie/handle&quot;&gt;Tie :: Handleの&lt;/a&gt;いずれかです。</target>
        </trans-unit>
        <trans-unit id="0c9bd4f48f3f6ae98b30c07f5d71cc57a272c1d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt;. Requires symbolic links.</source>
          <target state="translated">&lt;a href=&quot;db_file&quot;&gt;DB_Fileを&lt;/a&gt;参照してください。シンボリックリンクが必要です。</target>
        </trans-unit>
        <trans-unit id="4296f20f12dfc0132d56a792670dce7e38a57723" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;encode&quot;&gt;エンコードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a67af7c8913351d114f65a7936594b2d41f06da" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;encode/alias&quot;&gt;Encode::Alias&lt;/a&gt; for details.</source>
          <target state="translated">詳細は&lt;a href=&quot;encode/alias&quot;&gt;Encode :: Alias&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8517af08323f5f094acafe117a103b971b6890a6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;encode/encoding&quot;&gt;Encode::Encoding&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;encode/encoding&quot;&gt;Encode :: Encoding&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2043e4cc4b14000fecd0ef098d0ed8991642e3a7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;encoding&quot;&gt;encoding&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;encoding&quot;&gt;エンコーディングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ab13f06779fa0e51f4b4f1ab1ab086b89de4b8b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;expire&quot;&gt;Memoize::Expire&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;expire&quot;&gt;Memoize :: Expireを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5f5a809c446d4dccbb74031c3ad04c52cccf00c0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;faq#Apache%3a%3aGZip-Revisited&quot;&gt;IO::Compress::FAQ&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;faq#Apache%3a%3aGZip-Revisited&quot;&gt;IO :: Compress :: FAQを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="11726ce061a925f71cc1ea30a25c1dc96572d5a2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;faq#Compressed-files-and-Net%3a%3aFTP&quot;&gt;IO::Compress::FAQ&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;faq#Compressed-files-and-Net%3a%3aFTP&quot;&gt;IO :: Compress :: FAQを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="b4bbce97bf5c8d683b28b867daee7323eefafa16" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;, &lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;, &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;, and &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; for additional information.</source>
          <target state="translated">詳細について&lt;a href=&quot;functions/die&quot;&gt;は&lt;/a&gt;、die、&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;、&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;、および&lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="da7361a43bb9b0019562a0b989d95d7ab39d2deb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;. Note also that the loop control statements described later will</source>
          <target state="translated">&lt;a href=&quot;functions/do&quot;&gt;doを&lt;/a&gt;参照してください。後で説明するループ制御ステートメントは、</target>
        </trans-unit>
        <trans-unit id="40183fcc1ae5b8277c08c3330164903ddccf2ec4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="db782e508dd1270856c14c5063a050794cf72b17" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions/print&quot;&gt;printを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bfb55bb6b51a2ed413b15caf26a9050829c0f423" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions/printf&quot;&gt;printfを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="89b99f617beb3c9ebbaa01979b8eb5328c56f3b0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt; for the exact definition of characters that are quoted by &lt;code&gt;\Q&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; 引用される文字の正確な定義については&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cfd34654a6d253af136f4d30dc3e3d3012379d65" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;functions/say&quot;&gt;言う&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="80ac004d25eee837fc4957cc10b52c48abd10e0f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt; and &lt;a href=&quot;functions/sysseek&quot;&gt;sysseek&lt;/a&gt; about the SEEK_* constants.</source>
          <target state="translated">SEEK_ *定数については、&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;および&lt;a href=&quot;functions/sysseek&quot;&gt;sysseekを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3b0b5bdfe60761c96a19b4890ab4c2a8bb2151e3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt; about the S_I* constants.</source>
          <target state="translated">S_I *定数については、&lt;a href=&quot;functions/stat&quot;&gt;statを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3c60c634f7df4c71aad5b44e31e08941bfd64020" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;, &lt;a href=&quot;perldbmfilter&quot;&gt;perldbmfilter&lt;/a&gt;, &lt;a href=&quot;fcntl&quot;&gt;Fcntl&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;、&lt;a href=&quot;perldbmfilter&quot;&gt;perldbmfilter&lt;/a&gt;、&lt;a href=&quot;fcntl&quot;&gt;Fcntlを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="f2bcd07d2431ac860252ec173305db3f690b09ce" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt; for information on how to manipulate individual bits in a bit vector.</source>
          <target state="translated">ビットベクトルの個々のビットを操作する方法については、&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5e5faab760890d79b2e8bc315d24e6c65c65fe07" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://cygwin.com/faq/faq-nochunks.html#faq.using.fixing-fork-failures&quot;&gt;http://cygwin.com/faq/faq-nochunks.html#faq.using.fixing-fork-failures&lt;/a&gt; It helps if not too many DLLs are loaded in memory so the available address space is larger, e.g. stopping the MS Internet Explorer might help.</source>
          <target state="translated">&lt;a href=&quot;http://cygwin.com/faq/faq-nochunks.html#faq.using.fixing-fork-failures&quot;&gt;http://cygwin.com/faq/faq-nochunks.html#faq.using.fixing-fork-failuresを&lt;/a&gt;参照してください。メモリに読み込まれるDLLが多すぎない場合は、使用可能なアドレス空間が大きくなるため、たとえばMSインターネットの停止などに役立ちます。 Explorerが役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="945e0c7eadb84d3f07c95ef0218c299b85e26b64" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://developer.blackberry.com/native/documentation/cascades/getting_started/setting_up.html&quot;&gt;http://developer.blackberry.com/native/documentation/cascades/getting_started/setting_up.html&lt;/a&gt; for instructions to set up your device prior to attempting anything else.</source>
          <target state="translated">他のことを試みる前にデバイスをセットアップする手順については、&lt;a href=&quot;http://developer.blackberry.com/native/documentation/cascades/getting_started/setting_up.html&quot;&gt;http：//developer.blackberry.com/native/documentation/cascades/getting_started/setting_up.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="12695444c245fc3e26b3c842dfd1ab394b22bd66" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://search.cpan.org/dist/PGPLOT&quot;&gt;http://search.cpan.org/dist/PGPLOT&lt;/a&gt; for the code.</source>
          <target state="translated">コードについては、&lt;a href=&quot;http://search.cpan.org/dist/PGPLOT&quot;&gt;http：//search.cpan.org/dist/PGPLOT&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2468367eb8d553c9e424fb8393624c4bd2fffd92" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Deflate&quot;&gt;IO::Deflate&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Inflate&quot;&gt;IO::Inflate&lt;/a&gt; included with this distribution for an alternative interface for reading/writing RFC 1950 files/buffers.</source>
          <target state="translated">RFC 1950ファイル/バッファーの読み取り/書き込みの代替インターフェースについては、この配布に含まれて&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Deflate&quot;&gt;いるIO :: Deflate&lt;/a&gt;および&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Inflate&quot;&gt;IO :: Inflateを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7b2f03bb8037ab899f4bb184a9045b3b297eddea" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2fports%2f&quot;&gt;CPAN Ports&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2fports%2f&quot;&gt;CPANポートを&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="8e4c2383d84186885975bc1ea266c546fbcbe6d7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.alanwood.net/unicode/&quot;&gt;http://www.alanwood.net/unicode/&lt;/a&gt; and &lt;a href=&quot;http://www.cl.cam.ac.uk/~mgk25/unicode.html&quot;&gt;http://www.cl.cam.ac.uk/~mgk25/unicode.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.alanwood.net/unicode/&quot;&gt;http://www.alanwood.net/unicode/&lt;/a&gt;および&lt;a href=&quot;http://www.cl.cam.ac.uk/~mgk25/unicode.html&quot;&gt;http://www.cl.cam.ac.uk/~mgk25/unicode.html&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="99ce21958aa0db22b5723ac337d2286f8c5e33a3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.cs.rice.edu/~scrosby/hash/&quot;&gt;http://www.cs.rice.edu/~scrosby/hash/&lt;/a&gt; for more information, and any computer science textbook on algorithmic complexity.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.cs.rice.edu/~scrosby/hash/&quot;&gt;http：//www.cs.rice.edu/~scrosby/hash/&lt;/a&gt;、およびアルゴリズムの複雑さに関するコンピュータサイエンスのテキストを参照してください。</target>
        </trans-unit>
        <trans-unit id="ce02b3b9db93f433f63696e3d1917e7f9836187b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.perl.com/perl/misc/Artistic.html&quot;&gt;http://www.perl.com/perl/misc/Artistic.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.perl.com/perl/misc/Artistic.html&quot;&gt;http://www.perl.com/perl/misc/Artistic.htmlを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="cc52ab8ff41c4d0c988b0b199b0c86093ae8fd01" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlhist.html&quot;&gt;perlhist&lt;/a&gt; for a history of Perl revisions.</source>
          <target state="translated">Perlリビジョンの履歴については&lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlhist.html&quot;&gt;perlhist&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0931c0ab9141f229a0c6af999f002972965c4586" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;i18n/langinfo&quot;&gt;I18N::Langinfo&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;i18n/langinfo&quot;&gt;I18N :: Langinfo&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ea88ee3cb91b0285e8521da3ad715c02458ef952" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ipc/open2&quot;&gt;IPC::Open2&lt;/a&gt;, &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt;, and &lt;a href=&quot;perlipc#Bidirectional-Communication-with-Another-Process&quot;&gt;Bidirectional Communication with Another Process in perlipc&lt;/a&gt; for examples of such things.</source>
          <target state="translated">そのような例については、&lt;a href=&quot;ipc/open2&quot;&gt;IPC :: Open2&lt;/a&gt;、&lt;a href=&quot;ipc/open3&quot;&gt;IPC :: Open3&lt;/a&gt;、およびperlipcの&lt;a href=&quot;perlipc#Bidirectional-Communication-with-Another-Process&quot;&gt;別のプロセス&lt;/a&gt;との双方向通信を参照してください。</target>
        </trans-unit>
        <trans-unit id="eb7c82adcc75b32ae9e253fb64a0d32eb6b79e18" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;makemaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; for patching and contact information.</source>
          <target state="translated">パッチと連絡先情報については、&lt;a href=&quot;makemaker&quot;&gt;ExtUtils :: MakeMaker&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ca559ae70940dd6aa2f3e8deb924f98b53d6a27" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;makemaker/tutorial&quot;&gt;ExtUtils::MakeMaker::Tutorial&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;makemaker/tutorial&quot;&gt;ExtUtils :: MakeMaker :: Tutorialを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7a7ca226b3ffe2ea5d0f1d6a0d50f654317a3960" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;mm_unix&quot;&gt;ExtUtils::MM_Unix&lt;/a&gt; for &lt;a href=&quot;mm_any&quot;&gt;ExtUtils::MM_Any&lt;/a&gt; for documentation on the methods overridden here.</source>
          <target state="translated">参照&lt;a href=&quot;mm_unix&quot;&gt;のExtUtils :: MM_Unix&lt;/a&gt;のため&lt;a href=&quot;mm_any&quot;&gt;のExtUtils :: MM_Anyを&lt;/a&gt;ここで上書きする方法に関するドキュメントのために。</target>
        </trans-unit>
        <trans-unit id="8fb95d1acac93c5f08cddc5497b853220bb3ab6e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;module/corelist&quot;&gt;Module::CoreList&lt;/a&gt; for one.</source>
          <target state="translated">&lt;a href=&quot;module/corelist&quot;&gt;Module :: CoreList&lt;/a&gt;を見てください。</target>
        </trans-unit>
        <trans-unit id="afe93e58af18b14c3b068b54d5ad18108232c97f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;open3&quot;&gt;IPC::Open3&lt;/a&gt; for an alternative that handles STDERR as well. This function is really just a wrapper around open3().</source>
          <target state="translated">STDERRも処理する別の方法については、&lt;a href=&quot;open3&quot;&gt;IPC :: Open3&lt;/a&gt;を参照してください。この関数は、実際にはopen3（）のラッパーにすぎません。</target>
        </trans-unit>
        <trans-unit id="7fad32865e66fae2d9c012b4a69e272f754e4ebe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt; for more examples and notes.</source>
          <target state="translated">その他の例と注意事項については、&lt;a href=&quot;pack&quot;&gt;パック&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="01c329e88ceb1777b6d32a7cc55b6911aa2a7bec" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;parser&quot;&gt;Pod::Parser&lt;/a&gt;, &lt;a href=&quot;select&quot;&gt;Pod::Select&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;parser&quot;&gt;Pod :: Parser&lt;/a&gt;、&lt;a href=&quot;select&quot;&gt;Pod :: Selectを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="4cd20a4a0f216e0c7f6fa18c97df852db257f281" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;parser/iteratorfactory&quot;&gt;TAP::Parser::IteratorFactory&lt;/a&gt;, &lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt; and subclasses for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;parser/iteratorfactory&quot;&gt;TAP :: Parser :: IteratorFactory&lt;/a&gt;、&lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;、およびサブクラスを参照してください。</target>
        </trans-unit>
        <trans-unit id="fc836e4fa8490d1237ffacc6441c56c6507773e2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;PL_keyword_plugin in perlapi&lt;/a&gt; for the mechanism.</source>
          <target state="translated">メカニズムについては&lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;、perlapiのPL_keyword_pluginを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="537dd0698345523cc865f14852d1db2c03bb7c70" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlapi#svtype&quot;&gt;svtype in perlapi&lt;/a&gt; for more details.</source>
          <target state="translated">詳細&lt;a href=&quot;perlapi#svtype&quot;&gt;については、perlapiのsvtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1acf9d127e57a859c95eb32236787ede1adcc482" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perldebguts#Debugger-Internals&quot;&gt;Debugger Internals in perldebguts&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perldebguts#Debugger-Internals&quot;&gt;、perldebgutsのデバッガーの内部&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ef90f2eaa033cc70947d426569b755d35159524" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt; for details and variations.</source>
          <target state="translated">参照&lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;詳細とバリエーションのために。</target>
        </trans-unit>
        <trans-unit id="2ab48d58dafe2080846717e88408c47a657578ac" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perldebug#Configurable-Options&quot;&gt;Configurable Options in perldebug&lt;/a&gt; for a description of options parsed by &lt;code&gt;DB::parse_options(string)&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;DB::parse_options(string)&lt;/code&gt; によって解析されるオプションの説明については&lt;a href=&quot;perldebug#Configurable-Options&quot;&gt;、perldebugの構成可能なオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="507fce40ea81e1d2b2136e58ea87bdcdbec4dcf6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt; for details about error messages.</source>
          <target state="translated">参照&lt;a href=&quot;perldiag&quot;&gt;はperldiag&lt;/a&gt;エラーメッセージの詳細については。</target>
        </trans-unit>
        <trans-unit id="fc3cede9685eccbaf724f0cc2e01b5e840d93d61" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt; for explanations of all Perl's diagnostics. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
diagnostics&lt;/code&gt; pragma automatically turns Perl's normally terse warnings and errors into these longer forms.</source>
          <target state="translated">Perlのすべての診断の説明については、&lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;を参照してください。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; diagnostics&lt;/code&gt; プラグマは、自動的にこれらの長い形式にPerlの通常の簡潔な警告とエラーになります。</target>
        </trans-unit>
        <trans-unit id="96d5159d1cbd73f127422735b4b7f257183ca119" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlfork&quot;&gt;perlfork&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perlfork&quot;&gt;perlfork&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="99a8c6ca7ea639ec9ceaca35f003ab62962b4710" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; for many details and examples.</source>
          <target state="translated">多くの詳細と例については、&lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ebb59b17bbac7855100933a8e5aee451474a1653" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for complete descriptions of each of the following supported &lt;code&gt;FileHandle&lt;/code&gt; methods, which are just front ends for the corresponding built-in functions:</source>
          <target state="translated">対応する組み込み関数のフロントエンドにすぎない、以下のサポートされている &lt;code&gt;FileHandle&lt;/code&gt; メソッドの詳細については、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="24f1df6d0c2aa9bd5f9f7bae780034b85ed98920" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt; for detailed information about Perl's Git repository.</source>
          <target state="translated">PerlのGitリポジトリの詳細については、&lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="856a30771ae6f035504c5ee6c944c0c181d73b8a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;How multiple interpreters and concurrency are supported in perlguts&lt;/a&gt; for further discussion about context.</source>
          <target state="translated">コンテキストの詳細について&lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;は、perlguts&lt;/a&gt;で複数のインタープリターと並行処理がどのようにサポートされるかを参照してください。</target>
        </trans-unit>
        <trans-unit id="018cb5a7e283b5d6dcfd2da2d70718c9c3a039f4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlguts#Localizing-changes&quot;&gt;Localizing changes in perlguts&lt;/a&gt; for how to use the save stack.</source>
          <target state="translated">保存スタックの使用方法について&lt;a href=&quot;perlguts#Localizing-changes&quot;&gt;は、perlguts&lt;/a&gt;での変更のローカライズを参照してください。</target>
        </trans-unit>
        <trans-unit id="8daeddf17b7ab12abdff68d06e4e96aa92ce25bc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlguts#Understanding-the-Magic-of-Tied-Hashes-and-Arrays&quot;&gt;Understanding the Magic of Tied Hashes and Arrays in perlguts&lt;/a&gt; for more information on how to use this function on tied arrays.</source>
          <target state="translated">&lt;a href=&quot;perlguts#Understanding-the-Magic-of-Tied-Hashes-and-Arrays&quot;&gt;結合配列で&lt;/a&gt;この関数を使用する方法の詳細については、perlgutsの結合ハッシュと配列の魔法についてを参照してください。</target>
        </trans-unit>
        <trans-unit id="0afe304992d62dbdef57f985c4d7a8fa8c29cf6b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlguts#Understanding-the-Magic-of-Tied-Hashes-and-Arrays&quot;&gt;Understanding the Magic of Tied Hashes and Arrays in perlguts&lt;/a&gt; for more information on how to use this function on tied hashes.</source>
          <target state="translated">&lt;a href=&quot;perlguts#Understanding-the-Magic-of-Tied-Hashes-and-Arrays&quot;&gt;結合&lt;/a&gt;ハッシュでこの関数を使用する方法の詳細については、perlgutsの結合ハッシュと配列の魔法についてを参照してください。</target>
        </trans-unit>
        <trans-unit id="23816187840d5b58e8ce23aa1d1f945499e59413" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlguts#Unicode-Support&quot;&gt;Unicode Support in perlguts&lt;/a&gt; for an introduction to Unicode at the XS level, and &lt;a href=&quot;perlapi#Unicode-Support&quot;&gt;Unicode Support in perlapi&lt;/a&gt; for the API details.</source>
          <target state="translated">参照&lt;a href=&quot;perlguts#Unicode-Support&quot;&gt;はperlgutsでUnicodeのサポートを&lt;/a&gt; XSレベルでのUnicodeへの導入のために、と&lt;a href=&quot;perlapi#Unicode-Support&quot;&gt;はperlapiでUnicodeのサポート&lt;/a&gt; APIの詳細について。</target>
        </trans-unit>
        <trans-unit id="9826310e53066a41827e95ae082ef5e101adb996" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlguts#XSUBs-and-the-Argument-Stack&quot;&gt;XSUBs and the Argument Stack in perlguts&lt;/a&gt; for details on how the XPUSH macros work.</source>
          <target state="translated">参照&lt;a href=&quot;perlguts#XSUBs-and-the-Argument-Stack&quot;&gt;はperlguts内のXSUBと引数スタック&lt;/a&gt;どのようXPUSHマクロの作業の詳細については、を。</target>
        </trans-unit>
        <trans-unit id="fda0e3817b220a865963f0c4dad0e4830032feaf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlhack&quot;&gt;perlhack&lt;/a&gt; for an explanation of Perl development, including the &lt;a href=&quot;perlhack#SUPER-QUICK-PATCH-GUIDE&quot;&gt;Super Quick Patch Guide&lt;/a&gt; for making and submitting a small patch.</source>
          <target state="translated">小さなパッチを作成して送信するための&lt;a href=&quot;perlhack#SUPER-QUICK-PATCH-GUIDE&quot;&gt;Super Quick Patch Guide&lt;/a&gt;を含む、Perl開発の説明については、&lt;a href=&quot;perlhack&quot;&gt;perlhack&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2898d2e4a5f89f77754a8e61409566e6f2be9654" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlhack&quot;&gt;perlhack&lt;/a&gt; for details on how to submit this patch.</source>
          <target state="translated">参照&lt;a href=&quot;perlhack&quot;&gt;はperlhack&lt;/a&gt;このパッチを提出する方法の詳細については。</target>
        </trans-unit>
        <trans-unit id="ee1671ee83deb45f1ba85aeb36ac184cf85218eb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlhpux#nss_delete-core-dump-from-op%2fpwent-or-op%2fgrent&quot;&gt;nss_delete core dump from op/pwent or op/grent in perlhpux&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlhpux#nss_delete-core-dump-from-op%2fpwent-or-op%2fgrent&quot;&gt;perlhpuxのop / pwentまたはop / grentからのnss_deleteコアダンプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c8405e2fe730d81b8f5c9bd5d83e543241916750" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlinterp&quot;&gt;perlinterp&lt;/a&gt; for more details on the files that make up the Perl interpreter, as well as details on how it works.</source>
          <target state="translated">参照&lt;a href=&quot;perlinterp&quot;&gt;perlinterpを&lt;/a&gt;よりPerlインタープリタを構成するファイルの詳細だけでなく、それがどのように動作するかの詳細については。</target>
        </trans-unit>
        <trans-unit id="9abeb4449ef2604d5e96502e4503f28ae32dd249" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; for the &lt;code&gt;:utf8&lt;/code&gt; layer, &lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO::encoding&lt;/a&gt; and &lt;a href=&quot;encode/perlio&quot;&gt;Encode::PerlIO&lt;/a&gt; for the &lt;code&gt;:encoding()&lt;/code&gt; layer, and &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt; for many encodings supported by the &lt;code&gt;Encode&lt;/code&gt; module.</source>
          <target state="translated">参照&lt;a href=&quot;perlio&quot;&gt;PerlIOを&lt;/a&gt;用 &lt;code&gt;:utf8&lt;/code&gt; 層、&lt;a href=&quot;perlio/encoding&quot;&gt;PerlIOを::エンコード&lt;/a&gt;および&lt;a href=&quot;encode/perlio&quot;&gt;エンコード:: PerlIOを&lt;/a&gt;用 &lt;code&gt;:encoding()&lt;/code&gt; 層、および&lt;a href=&quot;encode/supported&quot;&gt;エンコード::サポートを&lt;/a&gt;でサポートされている多くのエンコーディングのために &lt;code&gt;Encode&lt;/code&gt; モジュール。</target>
        </trans-unit>
        <trans-unit id="3fa171ec2c92cf5c9eaa78b53a24c1f2c996c988" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlio/via&quot;&gt;PerlIO::via&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlio/via&quot;&gt;PerlIO :: via&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7feec36eccfe24a9f8a7490c2b31f01ace9585f8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perliol&quot;&gt;perliol&lt;/a&gt; for detailed info on PerlIO.</source>
          <target state="translated">PerlIOの詳細については、&lt;a href=&quot;perliol&quot;&gt;perliol&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d7fd1c83582e8199c35bed1061ad6e5667788b6f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perliol&quot;&gt;perliol&lt;/a&gt; for more information on the Perl IO abstraction layer. Perl must have been built with &lt;code&gt;-Duseperlio&lt;/code&gt; .</source>
          <target state="translated">Perl IO抽象化レイヤーの詳細については、&lt;a href=&quot;perliol&quot;&gt;perliol&lt;/a&gt;を参照してください。Perlは &lt;code&gt;-Duseperlio&lt;/code&gt; を使用してビルドされている必要があります。</target>
        </trans-unit>
        <trans-unit id="b3c00cb07b2b80671a11dd5dc8ccc4445d7a1964" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for an example of socketpair use. Perl 5.8 and later will emulate socketpair using IP sockets to localhost if your system implements sockets but not socketpair.</source>
          <target state="translated">socketpairの使用例については、&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。システムがソケットを実装するがソケットペアを実装しない場合、Perl 5.8以降はlocalhostへのIPソケットを使用してソケットペアをエミュレートします。</target>
        </trans-unit>
        <trans-unit id="de48b95e37613b5f75eaa879c8a2561ec7993e4d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;Safe Pipe Opens in perlipc&lt;/a&gt; for more examples of this.</source>
          <target state="translated">この例については&lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;、perlipc&lt;/a&gt;での安全なパイプのオープンをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2ec51ff1a9c16a2a5c094bd7e3d3e4d9afc76551" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; for more details.</source>
          <target state="translated">詳細について&lt;a href=&quot;perlipc#Signals&quot;&gt;は、perlipcの信号を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c30bde8dacb2d8eb0fb67145aba7ca1921b53523" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; for other examples of code to do this. Zombies are not an issue with &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;(&quot;prog &amp;amp;&quot;)&lt;/code&gt; .</source>
          <target state="translated">これを行うコードの他の例については&lt;a href=&quot;perlipc#Signals&quot;&gt;、perlipcの信号を&lt;/a&gt;参照してください。ゾンビは &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;(&quot;prog &amp;amp;&quot;)&lt;/code&gt; 問題ではありません。</target>
        </trans-unit>
        <trans-unit id="1569e04ff3547cc6071c23ed540183d9dff460a6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for details.</source>
          <target state="translated">詳細は&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f5ede378ffc0a712bf0fa5426e3fc697fc7cac1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for information on locales. The L10N files are in</source>
          <target state="translated">ロケールについては&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください。L10Nファイルは</target>
        </trans-unit>
        <trans-unit id="c8bf9c5c77cbc62b1d02711bc7615d4c76744ce0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for more detailed information on how Perl supports locales.</source>
          <target state="translated">Perlがロケールをサポートする方法の詳細については、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ac645e018e12e374a0abdd122f552472ebe60927" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perllocale#Unicode-and-UTF-8&quot;&gt;Unicode and UTF-8 in perllocale&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;perllocale#Unicode-and-UTF-8&quot;&gt;perllocaleのUnicodeとUTF-8を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="251639eb084694b07f94fed6ff3488fc99fd4a64" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for more information.</source>
          <target state="translated">詳細は&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba3a8f253da47d638d7046ba2322a3afb976f0d3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;BEGIN, UNITCHECK, CHECK, INIT and END in perlmod&lt;/a&gt; about the special triggered code blocks, &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; , &lt;code&gt;INIT&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; .</source>
          <target state="translated">参照&lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;はperlmodで、UNITCHECK、CHECK、INITとENDをBEGIN&lt;/a&gt;、特別なトリガされたコードブロックについては &lt;code&gt;BEGIN&lt;/code&gt; 、 &lt;code&gt;UNITCHECK&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、 &lt;code&gt;INIT&lt;/code&gt; と &lt;code&gt;END&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48920c0784fa7847466f7fc8f760b78486c8bd0e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmod#Making-your-module-threadsafe&quot;&gt;Making your module threadsafe in perlmod&lt;/a&gt; when creating modules that may be used in threaded applications, especially if those modules use non-Perl data, or XS code.</source>
          <target state="translated">スレッド化されたアプリケーションで使用される可能性のあるモジュールを作成する場合、特にそれらのモジュールが非PerlデータまたはXSコードを使用する場合は、モジュールを&lt;a href=&quot;perlmod#Making-your-module-threadsafe&quot;&gt;perlmodでスレッドセーフにするを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2dbec0bf12a50070137a3b7b8cef3b5cd4178658" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmod#Packages&quot;&gt;Packages in perlmod&lt;/a&gt; for more information about packages, modules, and classes. See &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt; for other scoping issues.</source>
          <target state="translated">パッケージ、モジュール、クラスの詳細について&lt;a href=&quot;perlmod#Packages&quot;&gt;は、perlmodのパッケージを&lt;/a&gt;参照してください。その他のスコープの問題については&lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c314b6a45d86fe3727f9c31efb044a2e44ccbf8c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmod#Perl-Modules&quot;&gt;Perl Modules in perlmod&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlmod#Perl-Modules&quot;&gt;perlmodのPerlモジュールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="06c2074fd797e7147bc8190fe65185f9c82cba22" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for a list of standard modules and pragmas. See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for the &lt;code&gt;-M&lt;/code&gt; and &lt;code&gt;-m&lt;/code&gt; command-line options to Perl that give &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; functionality from the command-line.</source>
          <target state="translated">標準モジュールとプラグマのリストについては、&lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt;を参照してください。コマンドラインから機能を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ようにする Perl の &lt;code&gt;-M&lt;/code&gt; および &lt;code&gt;-m&lt;/code&gt; コマンドラインオプションについては、&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b6df179cd0b52b85173df251cbf179f4ebcee9a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for general style issues related to building Perl modules and classes, as well as descriptions of the standard library and CPAN, &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt; for how Perl's standard import/export mechanism works, &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt; for in-depth information on creating classes, &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt; for a hard-core reference document on objects, &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt; for an explanation of functions and scoping, and &lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt; and &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt; for more information on writing extension modules.</source>
          <target state="translated">Perlモジュールとクラスの構築に関連する一般的なスタイルの問題については&lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt;、標準ライブラリとCPANの説明、Perlの標準インポート/エクスポートメカニズムの動作については&lt;a href=&quot;exporter&quot;&gt;エクスポーター&lt;/a&gt;、クラスの作成に関する詳細情報については&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;と&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;、クラスの作成については&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;を参照してください。オブジェクトに関するハードコアリファレンスドキュメント、関数とスコープの説明については&lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;、拡張モジュールの&lt;a href=&quot;perlguts&quot;&gt;記述&lt;/a&gt;の詳細については&lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt;とperlguts。</target>
        </trans-unit>
        <trans-unit id="9a67f36c355c94afa5f2194abf5d2edb2e81009d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmodlib#Pragmatic-Modules&quot;&gt;Pragmatic Modules in perlmodlib&lt;/a&gt; and &lt;a href=&quot;strict#strict-subs&quot;&gt;strict subs in strict&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlmodlib#Pragmatic-Modules&quot;&gt;perlmodlibのプラグマティックモジュール&lt;/a&gt;および&lt;a href=&quot;strict#strict-subs&quot;&gt;strictのstrict subsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9da8e13c45415ffe502ec4f548998fe2b55c8623" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmodlib#Pragmatic-Modules&quot;&gt;Pragmatic Modules in perlmodlib&lt;/a&gt;, &lt;a href=&quot;perlop#Integer-Arithmetic&quot;&gt;Integer Arithmetic in perlop&lt;/a&gt;</source>
          <target state="translated">参照&lt;a href=&quot;perlmodlib#Pragmatic-Modules&quot;&gt;はperlmodlibに実用モジュールを&lt;/a&gt;、&lt;a href=&quot;perlop#Integer-Arithmetic&quot;&gt;整数算術はperlopに&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="62976d8a73c6c4cbfdf369b6880fc6ac9c73f3b0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlmodlib#Pragmatic-Modules&quot;&gt;Pragmatic Modules in perlmodlib&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlmodlib#Pragmatic-Modules&quot;&gt;perlmodlibのプラグマティックモジュールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="563e259b553a2d0543c74163b5549c690239d3e1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; for more details on unary operators and the comma operator.</source>
          <target state="translated">単項演算子とコンマ演算子の詳細については、&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e56170f575bd7555ba5a7ac522a6168d3e660440" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlop#Bitwise-String-Operators&quot;&gt;Bitwise String Operators in perlop&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perlop#Bitwise-String-Operators&quot;&gt;、perlopのビット単位の文字列演算子&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0daac143e24931678e410c1147c16bad218f0bdf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt; for a kinder, gentler explanation of opening files.</source>
          <target state="translated">ファイルを開くことについてのより親切で優しい説明については、&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1dd9474682f3f28a797a9e84ffa970a5bc4b9ecc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt; to learn about the uses of the O_* constants with sysopen().</source>
          <target state="translated">sysopen（）でのO_ *定数の使用については、&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f19e2229a02aef738f8ea7f0705a7c74e50cdbe1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlpacktut&quot;&gt;perlpacktut&lt;/a&gt; for an introduction to this function.</source>
          <target state="translated">この関数の&lt;a href=&quot;perlpacktut&quot;&gt;概要&lt;/a&gt;についてはperlpacktutを参照してください。</target>
        </trans-unit>
        <trans-unit id="0285eafffc012e2606f0adde1cbfc987985c7680" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; for more information about the pod format.</source>
          <target state="translated">ポッド形式の詳細については、&lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d34c6a98d24a87a7c24f60e7bcaa7dfda004973e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;Formatting Codes in perlpod&lt;/a&gt;, and several points in &lt;a href=&quot;#Notes-on-Implementing-Pod-Processors&quot;&gt;Notes on Implementing Pod Processors&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;perlpod&lt;/a&gt;でのコードのフォーマット、および&lt;a href=&quot;#Notes-on-Implementing-Pod-Processors&quot;&gt;ポッドプロセッサの実装に関する注意の&lt;/a&gt;いくつかのポイントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0b4ce36dc97a65c73b2e6189ec760aafbcbf4066" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; for additional information on valid syntax for</source>
          <target state="translated">の有効な構文の詳細については、&lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="f8b3213fac417f18926d75a4a003d38c5e1c238b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlre#(%3f%5b-%5d)&quot;&gt;(?[ ]) in perlre&lt;/a&gt;. If you don't want to use an experimental feature, you can use one of the following:</source>
          <target state="translated">&lt;a href=&quot;perlre#(%3f%5b-%5d)&quot;&gt;perlreの（？[]）を&lt;/a&gt;参照してください。試験運用機能を使用したくない場合は、次のいずれかを使用できます。</target>
        </trans-unit>
        <trans-unit id="1463c792e5b0f58dcb85fd04f04951c9b87eb661" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlre#n&quot;&gt;n in perlre&lt;/a&gt; for more information.</source>
          <target state="translated">詳細&lt;a href=&quot;perlre#n&quot;&gt;については、perlreのnを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6c3716991c5281411a2fbc0a40a0c4b755db9afa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlrebackslash#Misc&quot;&gt;Misc in perlrebackslash&lt;/a&gt; for details.</source>
          <target state="translated">詳細&lt;a href=&quot;perlrebackslash#Misc&quot;&gt;は、perlrebackslashのその他&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ddc98254c656473d6aaa3815176dcb32a9a66139" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;Backslash sequences in perlrecharclass&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;、perlrecharclassのバックスラッシュシーケンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a82392c75c07f9f8b49b790483d506827f344fa8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;Bracketed Character Classes in perlrecharclass&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;、perlrecharclassのブラケット文字クラス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="23d8e0736ea0023293ece7bbd3c8ea37f080ff55" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlrecharclass#Extended-Bracketed-Character-Classes&quot;&gt;Extended Bracketed Character Classes in perlrecharclass&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perlrecharclass#Extended-Bracketed-Character-Classes&quot;&gt;、perlrecharclassの拡張ブラケット文字クラス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d8b2f908e662577514076a06d71fc832dbf4d519" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlrecharclass#Extended-Bracketed-Character-Classes&quot;&gt;Extended Bracketed Character Classes in perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlrecharclass#Extended-Bracketed-Character-Classes&quot;&gt;perlrecharclassの拡張ブラケット文字クラスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b06ce23f66b1a9b680964a359a19520b20adccb3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;、perlrecharclassのPOSIX文字クラス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f57adcb45e08033573c3f56d2477bcd8f9d261de" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlref#Assigning-to-References&quot;&gt;Assigning to References in perlref&lt;/a&gt; for details.</source>
          <target state="translated">詳細&lt;a href=&quot;perlref#Assigning-to-References&quot;&gt;は、perlrefの&lt;/a&gt;参照への割り当てを参照してください。</target>
        </trans-unit>
        <trans-unit id="8e6e625bd7b12488354f5742899a0cebc0d1a2d5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlref#Function-Templates&quot;&gt;Function Templates in perlref&lt;/a&gt; for more about manipulating functions by name in this way.</source>
          <target state="translated">このように名前で関数を操作する方法の詳細について&lt;a href=&quot;perlref#Function-Templates&quot;&gt;は、perlrefの関数テンプレートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="67f9bc227802927aafe326cae82167361c057e62" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlref#Function-Templates&quot;&gt;Function Templates in perlref&lt;/a&gt; for more about references and closures. See &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; if you'd like to learn about calling C subroutines from Perl. See &lt;a href=&quot;perlembed&quot;&gt;perlembed&lt;/a&gt; if you'd like to learn about calling Perl subroutines from C. See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; to learn about bundling up your functions in separate files. See &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; to learn what library modules come standard on your system. See &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; to learn how to make object method calls.</source>
          <target state="translated">参照とクロージャの詳細について&lt;a href=&quot;perlref#Function-Templates&quot;&gt;は、perlrefの関数テンプレートを&lt;/a&gt;参照してください。PerlからCサブルーチンを呼び出す方法については、&lt;a href=&quot;perlxs&quot;&gt;perlxsを&lt;/a&gt;参照してください。参照してください&lt;a href=&quot;perlembed&quot;&gt;perlembed&lt;/a&gt;あなたはC.を参照してくださいからのPerlのサブルーチンを呼び出すことに関して知りたい場合は&lt;a href=&quot;perlmod&quot;&gt;perlmodを&lt;/a&gt;別々のファイルにあなたの機能を束ねについて学ぶために。システムに標準で付属しているライブラリモジュールについては、&lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt;を参照してください。オブジェクトメソッドの呼び出しを行う方法については、&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a2c4441f9c059045721d8856b0625292d24d5b3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlrun&quot;&gt;perlrunを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="05a32756b04d398c3c77dcd7261586f5d74c0150" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;Algorithmic Complexity Attacks in perlsec&lt;/a&gt; and &lt;a href=&quot;#PERL_HASH_SEED&quot;&gt;PERL_HASH_SEED&lt;/a&gt; and &lt;a href=&quot;#PERL_HASH_SEED_DEBUG&quot;&gt;PERL_HASH_SEED_DEBUG&lt;/a&gt; for more information. You can get and set the key traversal mask for a specific hash by using the &lt;code&gt;hash_traversal_mask()&lt;/code&gt; function from &lt;a href=&quot;hash/util&quot;&gt;Hash::Util&lt;/a&gt;.</source>
          <target state="translated">詳細について&lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;は、perlsecのアルゴリズム的複雑度攻撃、PERL_HASH_SEED&lt;/a&gt;および&lt;a href=&quot;#PERL_HASH_SEED&quot;&gt;PERL_HASH_SEED_DEBUG&lt;/a&gt;を&lt;a href=&quot;#PERL_HASH_SEED_DEBUG&quot;&gt;参照&lt;/a&gt;してください。&lt;a href=&quot;hash/util&quot;&gt;Hash :: Utilの&lt;/a&gt; &lt;code&gt;hash_traversal_mask()&lt;/code&gt; 関数を使用して、特定のハッシュのキートラバーサルマスクを取得および設定できます。</target>
        </trans-unit>
        <trans-unit id="bc83066c109af1f74bc6e736ae6976fb535c3a68" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;Algorithmic Complexity Attacks in perlsec&lt;/a&gt;, &lt;a href=&quot;#PERL_PERTURB_KEYS&quot;&gt;PERL_PERTURB_KEYS&lt;/a&gt;, and &lt;a href=&quot;#PERL_HASH_SEED_DEBUG&quot;&gt;PERL_HASH_SEED_DEBUG&lt;/a&gt; for more information.</source>
          <target state="translated">詳細について&lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;は、perlsec&lt;/a&gt;、&lt;a href=&quot;#PERL_PERTURB_KEYS&quot;&gt;PERL_PERTURB_KEYS&lt;/a&gt;、および&lt;a href=&quot;#PERL_HASH_SEED_DEBUG&quot;&gt;PERL_HASH_SEED_DEBUGの&lt;/a&gt;アルゴリズム的複雑度攻撃を参照してください。</target>
        </trans-unit>
        <trans-unit id="7578b1f97324785fc4944af282d89e98f8efd38c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt; and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; for details about subroutines and references; see &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;attribute/handlers&quot;&gt;Attribute::Handlers&lt;/a&gt; for more information about attributes.</source>
          <target state="translated">参照&lt;a href=&quot;perlsub&quot;&gt;はperlsub&lt;/a&gt;と&lt;a href=&quot;perlref&quot;&gt;perlrefを&lt;/a&gt;サブルーチンと参照の詳細については、&lt;a href=&quot;attributes&quot;&gt;属性の&lt;/a&gt;詳細については、attributesおよび&lt;a href=&quot;attribute/handlers&quot;&gt;Attribute :: Handlers&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fbff563dc59a3b875542ce0184005c83684591e8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt; for examples of using these as indirect filehandles in functions.</source>
          <target state="translated">これらを関数の間接ファイルハンドルとして使用する例については、&lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="11900e927e19141a3c018aa0869d632e04dd84ec" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt; for other scoping issues related to my() and local(), and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; regarding closures.</source>
          <target state="translated">my（）およびlocal（）に関連する他のスコープの問題については&lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;を参照してください。&lt;a href=&quot;perlref&quot;&gt;また&lt;/a&gt;、クロージャに関するperlrefを参照してください。</target>
        </trans-unit>
        <trans-unit id="9825e954666eb7c1bfeda7e6a661634f25dc5c34" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c88488f2e512f35271305383f908466cf8057f33" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsub#Persistent-Private-Variables&quot;&gt;Persistent Private Variables in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perlsub#Persistent-Private-Variables&quot;&gt;、perlsubの永続的なプライベート変数&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a320e9fd6f29231c75d7198e851a4c7383e39db8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsub#Persistent-Private-Variables&quot;&gt;Persistent Private Variables in perlsub&lt;/a&gt; for more information. The discussion of closures in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; may help you even though we did not use anonymous subroutines in this answer. See &lt;a href=&quot;perlsub#Persistent-Private-Variables&quot;&gt;Persistent Private Variables in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">詳細&lt;a href=&quot;perlsub#Persistent-Private-Variables&quot;&gt;は、perlsubの永続的なプライベート変数を&lt;/a&gt;参照してください。この回答では無名サブルーチンを使用していませんが、&lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;でのクロージャーの説明が役立つ場合があります。詳細については&lt;a href=&quot;perlsub#Persistent-Private-Variables&quot;&gt;、perlsubの永続的なプライベート変数&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5902f43c66efafac0892acaf6b04042096839dc0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; and &lt;a href=&quot;perlsub#Temporary-Values-via-local()&quot;&gt;Temporary Values via local() in perlsub&lt;/a&gt; for excruciating details.</source>
          <target state="translated">詳細について&lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;は、perlsubのmy（）によるプライベート変数&lt;/a&gt;およびperlsubの&lt;a href=&quot;perlsub#Temporary-Values-via-local()&quot;&gt;local（）による一時値を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fca40b43307292de3ffd6cd7918940ab49650e50" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsub#Signatures&quot;&gt;Signatures in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">詳細について&lt;a href=&quot;perlsub#Signatures&quot;&gt;は、perlsubの署名&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f454fad7196b37cd19f741a5805c180c5619ba68" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt; for other examples in this style.</source>
          <target state="translated">このスタイルの他の例については、&lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ca5e0e6381ecee516815ca12d328b85e216e2e52" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt; for details.</source>
          <target state="translated">詳細については&lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;、perlsynのSwitchステートメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="580fba8485f5c5a1625260f46bfa7d3fe92e342b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more about Unicode.</source>
          <target state="translated">Unicodeの詳細については、&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6bfd96ba5ce0763e2daff8d02efe4e68dcdfc7be" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlunicode#Beyond-Unicode-code-points&quot;&gt;Beyond Unicode code points in perlunicode&lt;/a&gt; for more information.</source>
          <target state="translated">詳しく&lt;a href=&quot;perlunicode#Beyond-Unicode-code-points&quot;&gt;は、perlunicodeのBeyond Unicode code pointsを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="4e340a20d7e0f22a460b9c2169b23aa2e358a35a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perluniintro#Unicode-and-EBCDIC&quot;&gt;Unicode and EBCDIC in perluniintro&lt;/a&gt; and &lt;a href=&quot;#CONVERSIONS&quot;&gt;CONVERSIONS&lt;/a&gt; for other options.</source>
          <target state="translated">その他のオプションについて&lt;a href=&quot;perluniintro#Unicode-and-EBCDIC&quot;&gt;は、perluniintroのUnicodeとEBCDIC&lt;/a&gt;および&lt;a href=&quot;#CONVERSIONS&quot;&gt;CONVERSIONS&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d42789cfdaacbb5c92c9515872baf49bf8c2e8fa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for a complete list of these.</source>
          <target state="translated">これらの完全なリストについては、&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e0604ead8033077a764aa6344677fdfceddb2d21" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for a description of Perl's built-in variables and a discussion of legal variable names. See &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;, &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;, and &lt;a href=&quot;perlmod#Symbol-Tables&quot;&gt;Symbol Tables in perlmod&lt;/a&gt; for more discussion on typeglobs and the &lt;code&gt;*foo{THING}&lt;/code&gt; syntax.</source>
          <target state="translated">Perlの組み込み変数の説明と有効な変数名の説明については、&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照してください。型グロブと &lt;code&gt;*foo{THING}&lt;/code&gt; 構文の詳細については、&lt;a href=&quot;perlref&quot;&gt;perlmodのperlref&lt;/a&gt;、&lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;、および&lt;a href=&quot;perlmod#Symbol-Tables&quot;&gt;シンボルテーブルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="814867dbf4101593902d2d34050b5fa67499d1a5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for complete descriptions of each of the following supported &lt;code&gt;FileHandle&lt;/code&gt; methods:</source>
          <target state="translated">以下のサポートされている &lt;code&gt;FileHandle&lt;/code&gt; メソッドの詳細については、&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="98e3e1631bf77453f6eed4d5fbc7596b58ccbf6b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for details on setting &lt;code&gt;%SIG&lt;/code&gt; entries and for more examples. See the Carp module for other kinds of warnings using its carp() and cluck() functions.</source>
          <target state="translated">参照&lt;a href=&quot;perlvar&quot;&gt;はperlvar&lt;/a&gt;の設定の詳細については、 &lt;code&gt;%SIG&lt;/code&gt; エントリをし、より多くの例のために。carp（）およびcluck（）関数を使用した他の種類の警告については、Carpモジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="c566c9fdb8fd38a28ebc9a39b4d0c1b84510579e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; and &lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt; for additional details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;および&lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e5be4ec63877dd46a323d6acef0aca557f1f53ce" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt; for a tutorial on the whole extension creation process.</source>
          <target state="translated">拡張機能の作成プロセス全体のチュートリアルについては、&lt;a href=&quot;perlxstut&quot;&gt;perlxstut&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e651b6ac791a176d6926f404d81718d149a809d0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;pod/html&quot;&gt;Pod::Html&lt;/a&gt; for a list of known bugs in the translator.</source>
          <target state="translated">トランスレータの既知のバグのリストについては、&lt;a href=&quot;pod/html&quot;&gt;Pod :: Html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="607e168a654f06346ceee0e0923bb2430ed2cf7c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;re#'strict'-mode&quot;&gt;'strict' in re&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;re#'strict'-mode&quot;&gt;reの「strict」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1bb5b43713359435a05f7058014a413c0c96e506" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;re#'strict'-mode&quot;&gt;'strict' mode in re&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;re#'strict'-mode&quot;&gt;reの「strict」モードを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="563dde6d6a958ec86edd1335087ed33faccb2cc7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;seek&quot;&gt;seek&lt;/a&gt; for some details about mixing reading and writing.</source>
          <target state="translated">読み書きの混合についての詳細は&lt;a href=&quot;seek&quot;&gt;seek&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b0421444fdb3fc6676183669854331211545c5d1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;selfloader&quot;&gt;SelfLoader&lt;/a&gt; for more description of __DATA__, and an example of its use. Note that you cannot read from the DATA filehandle in a BEGIN block: the BEGIN block is executed as soon as it is seen (during compilation), at which point the corresponding __DATA__ (or __END__) token has not yet been seen.</source>
          <target state="translated">&lt;a href=&quot;selfloader&quot;&gt;__DATA__の&lt;/a&gt;詳細とその使用例については、SelfLoaderを参照してください。BEGINブロックのDATAファイルハンドルから読み取ることはできないことに注意してください。BEGINブロックは、（コンパイル中に）表示されるとすぐに実行されます。この時点では、対応する__DATA__（または__END__）トークンはまだ表示されていません。</target>
        </trans-unit>
        <trans-unit id="8a5a8b8f53959db4074a0bb8ac96dd364eb59fa5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;simple&quot;&gt;Pod::Simple&lt;/a&gt; for more specific details on the methods available to all derived parsers.</source>
          <target state="translated">参照&lt;a href=&quot;simple&quot;&gt;ポッド:: Simpleは&lt;/a&gt;、すべての派生パーサに利用可能な方法のより具体的な内容について。</target>
        </trans-unit>
        <trans-unit id="b67db36788f09e724759b4da084a895bc2435f7f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;tap/parser/iteratorfactory&quot;&gt;TAP::Parser::IteratorFactory&lt;/a&gt; for more details on how configuration is passed to</source>
          <target state="translated">参照してください&lt;a href=&quot;tap/parser/iteratorfactory&quot;&gt;TAP :: Parserの:: IteratorFactoryを&lt;/a&gt;設定が渡される方法の詳細は、</target>
        </trans-unit>
        <trans-unit id="2781a80c865d3f858dcd034db3d104567e0b8582" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;utf8&quot;&gt;utf8&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;utf8&quot;&gt;utf8を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="aaecbb2712f6e07f3bb4d72df95b2c397d541543" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;argument&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;引数を&lt;/b&gt;参照して&lt;b&gt;ください&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="5527b76a89c84a3ca14083852a888ee89dc297d3" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;base class&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;基本クラスを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0748adf6a78e7ea444a29edad6885bee003090b4" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;data structure&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;データ構造を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="19d3657a7c4d7865035e86e5b6971f8109ca7410" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;data type&lt;/b&gt; and &lt;b&gt;class&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;データ型&lt;/b&gt;と&lt;b&gt;クラスを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="536c823324eb912b5c6244acf9b1ad5b55274a15" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;derived class&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;派生クラスを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9bbb63a1d46d83899c7bf380b014546dfe04fc11" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;exception&lt;/b&gt; or &lt;b&gt;fatal error&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;例外&lt;/b&gt;または&lt;b&gt;致命的なエラーを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4e8461f566a09044dc7768e7650ed2d914866938" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;file descriptor&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;ファイル記述子を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="728a43e22381fb172962b9311e37123518029976" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;hash&lt;/b&gt;. Please. The term associative array is the old Perl 4 term for a &lt;b&gt;hash&lt;/b&gt;. Some languages call it a dictionary.</source>
          <target state="translated">&lt;b&gt;ハッシュを&lt;/b&gt;参照してください。お願いします。連想配列という用語は、&lt;b&gt;ハッシュの&lt;/b&gt;古いPerl 4用語です。一部の言語はそれを辞書と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="ecfad27e5c20c1c422bfd033e340d7a94a46d5ea" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;instance variable&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;インスタンス変数を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="09cf9adb87abb2fdc9b722f9671176f116f6eaf1" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;little-endian&lt;/b&gt; and &lt;b&gt;big-endian&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;リトルエンディアン&lt;/b&gt;と&lt;b&gt;ビッグ&lt;/b&gt;&lt;b&gt;エンディアン&lt;/b&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="53169c0ed3cca9fd3ac35d9b2a576b71c93fbd4d" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;metasymbol&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;metasymbolを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="04b090ce5f4f9a586fd7338c912c87f5ab48ad3b" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;method resolution order&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;メソッド解決順序を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2a67ffa745980843ec4798ce242765953fac1072" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;pattern matching&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;パターンマッチングを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e03f83556afaaee2a7459215684ee750fab69deb" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;regular expression&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;正規表現を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b4e93b3654f60d19d5e6df12edadaceca1d7c9fc" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;reserved words&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;予約語を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b70d2dbf5552822e8a4e9a8bbd769b42f344b20e" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;script&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;スクリプトを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0062ca63f61155baeb3b58435240563ecef43a39" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;standard I/O&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;標準I / Oを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c97fe936681e308451898325cb155ebbd3fa3a38" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;standard error&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;標準エラーを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9f1e232666e3d5326b83af45670f2d972b518acd" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;standard input&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;標準入力を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8dd3a4c4d799c613a92fca0b60748ad19fcb74ad" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;standard output&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;標準出力を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81e346e31ae7bb88fdefcf9e8b772c0b3efeafd9" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;statement modifier&lt;/b&gt;, &lt;b&gt;regular expression&lt;/b&gt;, and &lt;b&gt;lvalue&lt;/b&gt;, not necessarily in that order.</source>
          <target state="translated">&lt;b&gt;ステートメント修飾子&lt;/b&gt;、&lt;b&gt;正規表現&lt;/b&gt;、および&lt;b&gt;左辺値を&lt;/b&gt;参照してください。必ずしもこの順序であるとは限りません。</target>
        </trans-unit>
        <trans-unit id="63abefbc8f300d9b01a8f5c13b84488e6c55d52c" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;status&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;ステータスを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee6f005aebce1d17193e47a0853321211fba4131" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;symbolic reference&lt;/b&gt;.</source>
          <target state="translated">参照&lt;b&gt;シンボリック参照を&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="8e0f31d0091da46dadf21ed976d401fbdc1b241b" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;syntax tree&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;構文ツリーを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9942ef8b2e1b0f40e37e415bcc45da2076b094f7" translate="yes" xml:space="preserve">
          <source>See &lt;b&gt;working directory&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;作業ディレクトリを&lt;/b&gt;参照し&lt;b&gt;て&lt;/b&gt;ください。</target>
        </trans-unit>
        <trans-unit id="d1c3bf77896ec5e7bf92d411728c3f92460b476f" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;Archive::Tar-&amp;gt;extract_file&lt;/code&gt; for details.</source>
          <target state="translated">詳細は &lt;code&gt;Archive::Tar-&amp;gt;extract_file&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bb6744ea1b330755a03c5caecbc6012f2c2ed506" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;Archive::Tar::File&lt;/code&gt; for details about supported properties.</source>
          <target state="translated">参照 &lt;code&gt;Archive::Tar::File&lt;/code&gt; サポートされているプロパティの詳細については。</target>
        </trans-unit>
        <trans-unit id="c0bd1dd87bd8e70e1edbf4cd67e8662d9ca94804" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;auto_help&lt;/code&gt; in section &lt;a href=&quot;#Configuring-Getopt%3a%3aLong&quot;&gt;Configuring Getopt::Long&lt;/a&gt;.</source>
          <target state="translated">セクション&lt;a href=&quot;#Configuring-Getopt%3a%3aLong&quot;&gt;Getopt :: Longの&lt;/a&gt; &lt;code&gt;auto_help&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="da665e8e9ea4c05dfda727ea78d6fabfcaffdccc" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;sv_magicext&lt;/code&gt; (which &lt;code&gt;sv_magic&lt;/code&gt; now calls) for a description of the handling of the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;namlen&lt;/code&gt; arguments.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;namlen&lt;/code&gt; 引数の処理の説明については、 &lt;code&gt;sv_magicext&lt;/code&gt; （ &lt;code&gt;sv_magic&lt;/code&gt; が呼び出す）を参照してください。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="40a9fc383ece7f1e65fcc691dcc88ac639270dec" translate="yes" xml:space="preserve">
          <source>See Example 3 below for an example of initialization.</source>
          <target state="translated">初期化の例は後述の例3を参照してください。</target>
        </trans-unit>
        <trans-unit id="a14749ce187bd20bd7da6610b8411db7cdd8a684" translate="yes" xml:space="preserve">
          <source>See ExtUtils::MM_Unix for a documentation of the methods provided there.</source>
          <target state="translated">ExtUtils::MM_Unix で提供されているメソッドのドキュメントは ExtUtils::MM_Unix を参照してください。</target>
        </trans-unit>
        <trans-unit id="23675ee7e59903f4fcc6bbbc8585eec695f2738c" translate="yes" xml:space="preserve">
          <source>See ExtUtils::MM_Unix for a documentation of the methods provided there. This package overrides the implementation of these methods, not the semantics.</source>
          <target state="translated">ExtUtils::MM_Unix で提供されているメソッドのドキュメントは ExtUtils::MM_Unix を参照してください。本パッケージは、これらのメソッドの実装をオーバーライドしますが、セマンティクスはオーバーライドしません。</target>
        </trans-unit>
        <trans-unit id="6e7f4022de93636a70f2034ffffc634b0c5eaaf5" translate="yes" xml:space="preserve">
          <source>See File::Spec::Unix for a documentation of the methods provided there. This package overrides the implementation of these methods, not the semantics.</source>
          <target state="translated">そこで提供されているメソッドのドキュメントは File::Spec::Unix を参照してください。本パッケージはこれらのメソッドの実装をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="040029afc0c435d1070fedbcbc1dbe6449072649" translate="yes" xml:space="preserve">
          <source>See L&amp;lt;:file&amp;gt; and L&amp;lt;:mktemp&amp;gt;, L&amp;lt;:tempfile&amp;gt; for different implementations of temporary file handling.</source>
          <target state="translated">一時ファイル処理のさまざまな実装については、L &amp;lt;：file&amp;gt;およびL &amp;lt;：mktemp&amp;gt;、L &amp;lt;：tempfile&amp;gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="602796314f08763ea9cbfdfcf8d45237b3a6d56c" translate="yes" xml:space="preserve">
          <source>See L&amp;lt;:spec&amp;gt; for information on the choice of temporary directory for a particular operating system.</source>
          <target state="translated">特定のオペレーティングシステムの一時ディレクトリの選択については、L &amp;lt;：spec&amp;gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="78e55777cc6a58da6b4816d5f2fab7c78a0fce98" translate="yes" xml:space="preserve">
          <source>See L&amp;lt;:tempdir&amp;gt; for an alternative object-oriented wrapper for the C</source>
          <target state="translated">Cの代替オブジェクト指向ラッパーについては、L &amp;lt;：tempdir&amp;gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="3616670bb678e824ef72b8f884f7cd63c250a2a2" translate="yes" xml:space="preserve">
          <source>See Locale::Codes for full author history.</source>
          <target state="translated">作者の全履歴はLocale::Codesを参照してください。</target>
        </trans-unit>
        <trans-unit id="2a6abbf3a02e8d7e6adbbf788540ae8a9bb2c9c3" translate="yes" xml:space="preserve">
          <source>See Math::BigInt's bfround() function for details.</source>
          <target state="translated">詳細は Math::BigInt の bfround()関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="2d1d8acbdeab97d7d379916d75cd769f1b13fed7" translate="yes" xml:space="preserve">
          <source>See Memoize::Expire, which is a plug-in module that adds expiration functionality to Memoize. If you don't like the kinds of policies that Memoize::Expire implements, it is easy to write your own plug-in module to implement whatever policy you desire. Memoize comes with several examples. An expiration manager that implements a LRU policy is available on CPAN as Memoize::ExpireLRU.</source>
          <target state="translated">Memoize::Expireは、Memoizeに期限切れ機能を追加するプラグインモジュールである。Memoize::Expireが実装しているポリシーの種類が気に入らない場合は、自分でプラグインモジュールを書いて好きなポリシーを実装するのが簡単です。Memoizeにはいくつかの例がある。LRUポリシーを実装した期限切れマネージャがCPANでMemoize::ExpireLRUとして公開されている。</target>
        </trans-unit>
        <trans-unit id="ea80271894db188740b7c5f477686f8cf867460a" translate="yes" xml:space="preserve">
          <source>See ODBM_File/Makefile.PL for an example, where an array is needed. If you specify a scalar as in</source>
          <target state="translated">配列が必要な場合の例はODBM_File/Makefile.PLを参照してください。のようにスカラを指定した場合は</target>
        </trans-unit>
        <trans-unit id="284a29f8c15b61f241963444d7589f9d02c61896" translate="yes" xml:space="preserve">
          <source>See Server error.</source>
          <target state="translated">サーバーエラーを参照してください。</target>
        </trans-unit>
        <trans-unit id="432cb254f15763b7805bdd86025f5f8cf43aec8f" translate="yes" xml:space="preserve">
          <source>See above.</source>
          <target state="translated">上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="2de5674c9b950736ceb1f267b92b6764d97d28bd" translate="yes" xml:space="preserve">
          <source>See above. This should be set using the &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt; quoting operator. The default is set to &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr|^([-+@\w./]+)$|&lt;/a&gt;&lt;/code&gt;. Note that the parentheses are vital.</source>
          <target state="translated">上記を参照。これは、 &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt; 引用演算子を使用して設定する必要があります。デフォルトは &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr|^([-+@\w./]+)$|&lt;/a&gt;&lt;/code&gt; 設定されています 。括弧は重要です。</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="ab8a382e25be0097477fc99486e44a4eaa18498e" translate="yes" xml:space="preserve">
          <source>See also &quot;How can I make my Perl program take less memory?&quot;</source>
          <target state="translated">また、&quot;Perl プログラムのメモリ使用量を減らすにはどうすればいいですか?&quot;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b03b87df29ccf9a96c0a6c18592a5afe15402ced" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#%5cb%7b%7d%2c-%5cb%2c-%5cB%7b%7d%2c-%5cB&quot;&gt;\b{gcb} &lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#%5cb%7b%7d%2c-%5cb%2c-%5cB%7b%7d%2c-%5cB&quot;&gt;\ b {gcb}&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f192185570d73f9e4777f3d0179ed00539012a0a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)&quot;&gt;(?PARNO)&lt;/a&gt; for a different, more efficient way to accomplish the same task.</source>
          <target state="translated">同じタスクを実行する別のより効率的な方法については、&lt;a href=&quot;#(%3fPARNO)-(%3f-PARNO)-(%3f%2bPARNO)-(%3fR)-(%3f0)&quot;&gt;（？PARNO）&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3589a77158a5b9f87ba699d99d29f15928e730c7" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Blocks-versus-Scripts&quot;&gt;Blocks versus Scripts&lt;/a&gt;.</source>
          <target state="translated">「&lt;a href=&quot;#Blocks-versus-Scripts&quot;&gt;ブロックとスクリプト&lt;/a&gt;」も参照してください。</target>
        </trans-unit>
        <trans-unit id="b15ef7343c7f7652cb677f6cccc299824145c621" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Character-classification&quot;&gt;Character classification&lt;/a&gt;, and &lt;a href=&quot;#Character-case-changing&quot;&gt;Character case changing&lt;/a&gt;. Various functions outside this section also work specially with Unicode. Search for the string &quot;utf8&quot; in this document.</source>
          <target state="translated">「&lt;a href=&quot;#Character-classification&quot;&gt;文字分類&lt;/a&gt;」および「&lt;a href=&quot;#Character-case-changing&quot;&gt;大文字&lt;/a&gt;と小文字の変更」も参照してください。このセクション外のさまざまな関数もUnicodeで特別に機能します。このドキュメントで文字列「utf8」を検索します。</target>
        </trans-unit>
        <trans-unit id="858e5e57ae8e49908c96c28676e440fe9ce3fd13" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Quote-and-Quote-like-Operators&quot;&gt;Quote and Quote-like Operators&lt;/a&gt; toward the end of this section, as well as &lt;a href=&quot;#I%2fO-Operators&quot;&gt;I/O Operators&lt;/a&gt;.</source>
          <target state="translated">このセクションの終わりの方にある&lt;a href=&quot;#Quote-and-Quote-like-Operators&quot;&gt;引用および引用のような演算子、および&lt;/a&gt;&lt;a href=&quot;#I%2fO-Operators&quot;&gt;I / O演算子&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="94f252cf62959c5890d7b67aa4440dd5b5e285d2" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Terms-and-List-Operators-(Leftward)&quot;&gt;Terms and List Operators (Leftward)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Terms-and-List-Operators-(Leftward)&quot;&gt;用語とリスト演算子（左）&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="caba875660075eb3804e76fe4c78379b91129b4a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;The Unicode Bug&lt;/a&gt; above.</source>
          <target state="translated">上記&lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;のUnicodeバグ&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="dd6b64b3f2c71c02bbc70fd00e0624e4797d9ee9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#Thread-Safety-of-System-Libraries&quot;&gt;Thread-Safety of System Libraries&lt;/a&gt;.</source>
          <target state="translated">「&lt;a href=&quot;#Thread-Safety-of-System-Libraries&quot;&gt;システムライブラリのスレッドセーフ性&lt;/a&gt;」も参照してください。</target>
        </trans-unit>
        <trans-unit id="a2d9a4c0bef03df823525ad84d4e474cab9c19ee" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#blog()&quot;&gt;blog()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#blog()&quot;&gt;blog（）&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="c8d8a6f47fddbd2872f4758e889e1633aab774d1" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#ceil&quot;&gt;ceil&lt;/a&gt;, &lt;a href=&quot;#floor&quot;&gt;floor&lt;/a&gt;, &lt;a href=&quot;#lround&quot;&gt;lround&lt;/a&gt;, &lt;a href=&quot;#modf&quot;&gt;modf&lt;/a&gt;, and &lt;a href=&quot;#trunc&quot;&gt;trunc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ceil&quot;&gt;ceil&lt;/a&gt;、&lt;a href=&quot;#floor&quot;&gt;floor&lt;/a&gt;、&lt;a href=&quot;#lround&quot;&gt;lround&lt;/a&gt;、&lt;a href=&quot;#modf&quot;&gt;modf&lt;/a&gt;、および&lt;a href=&quot;#trunc&quot;&gt;trunc&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f693a972498a768d082bf320dd3eb9faf82a6061" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#ceil&quot;&gt;ceil&lt;/a&gt;, &lt;a href=&quot;#floor&quot;&gt;floor&lt;/a&gt;, &lt;a href=&quot;#trunc&quot;&gt;trunc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ceil&quot;&gt;ceil&lt;/a&gt;、&lt;a href=&quot;#floor&quot;&gt;floor&lt;/a&gt;、&lt;a href=&quot;#trunc&quot;&gt;trunc&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="cb862acd06c511fb848997aab8e77fbcc22f96bc" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#ceil&quot;&gt;ceil&lt;/a&gt;, &lt;a href=&quot;#floor&quot;&gt;floor&lt;/a&gt;, and &lt;a href=&quot;#round&quot;&gt;round&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ceil&quot;&gt;ceil&lt;/a&gt;、&lt;a href=&quot;#floor&quot;&gt;floor&lt;/a&gt;、および&lt;a href=&quot;#round&quot;&gt;round&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0a76930ab35a96cb3b3d7d6e8056b8db22e34985" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#chomp&quot;&gt;chomp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#chomp&quot;&gt;chomp&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b055a1e11c207e13b94aaaa8cf42ef6651307f63" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#continue&quot;&gt;continue&lt;/a&gt; for an illustration of how &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; work.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; がどのように機能するかを示す図については、&lt;a href=&quot;#continue&quot;&gt;続行&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="664f70b05592b396f0b7230a57571ee6981c3850" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#exp&quot;&gt;exp&lt;/a&gt; for the inverse operation.</source>
          <target state="translated">逆演算については&lt;a href=&quot;#exp&quot;&gt;exp&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e92bbb120353deeb65851ba7bc977367be7e23d3" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#expm1&quot;&gt;expm1&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#expm1&quot;&gt;expm1&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e20907c7f1f3f18a1cd9dfba23f841b9521b3a02" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#frexp&quot;&gt;frexp&lt;/a&gt; and &lt;a href=&quot;#ldexp&quot;&gt;ldexp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#frexp&quot;&gt;frexp&lt;/a&gt;と&lt;a href=&quot;#ldexp&quot;&gt;ldexp&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e6334ba605210bd171886129dc560240dcd264e3" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#hv_clear&quot;&gt;hv_clear&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#hv_clear&quot;&gt;hv_clear&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="5bb3270aa61a8e9a219e8fca2933e276729a3e5c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#ilogb&quot;&gt;ilogb&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ilogb&quot;&gt;ilogb&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="2038a390f40558644402d2dbfb075919fc5f4845" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#is_invariant_string&quot;&gt;is_invariant_string&lt;/a&gt;(), &lt;a href=&quot;#is_utf8_string_loclen&quot;&gt;is_utf8_string_loclen&lt;/a&gt;(), and &lt;a href=&quot;#is_utf8_string_loc&quot;&gt;is_utf8_string_loc&lt;/a&gt;().</source>
          <target state="translated">参照してください&lt;a href=&quot;#is_invariant_string&quot;&gt;is_invariant_string&lt;/a&gt;、）（&lt;a href=&quot;#is_utf8_string_loclen&quot;&gt;is_utf8_string_loclen&lt;/a&gt;）（、および&lt;a href=&quot;#is_utf8_string_loc&quot;&gt;is_utf8_string_loc&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="c075f84322d3bd478ca12430aff16457c9603d4a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;(), &lt;a href=&quot;#is_utf8_string_loclen&quot;&gt;is_utf8_string_loclen&lt;/a&gt;(), and &lt;a href=&quot;#is_utf8_string_loc&quot;&gt;is_utf8_string_loc&lt;/a&gt;().</source>
          <target state="translated">参照してください&lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;、）（&lt;a href=&quot;#is_utf8_string_loclen&quot;&gt;is_utf8_string_loclen&lt;/a&gt;）（、および&lt;a href=&quot;#is_utf8_string_loc&quot;&gt;is_utf8_string_loc&lt;/a&gt;（）。</target>
        </trans-unit>
        <trans-unit id="24661fc71daa651c7fde8e4cf4ce2981eec9de00" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#is_utf8_string_loc&quot;&gt;is_utf8_string_loc&lt;/a&gt;() and &lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;().</source>
          <target state="translated">&lt;a href=&quot;#is_utf8_string_loc&quot;&gt;is_utf8_string_loc&lt;/a&gt;（）および&lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;（）もご覧ください。</target>
        </trans-unit>
        <trans-unit id="5cbaff39e6d415017199632a470e616f1e19f95d" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#is_utf8_string_loclen&quot;&gt;is_utf8_string_loclen&lt;/a&gt;() and &lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;().</source>
          <target state="translated">&lt;a href=&quot;#is_utf8_string_loclen&quot;&gt;is_utf8_string_loclen&lt;/a&gt;（）および&lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;（）もご覧ください。</target>
        </trans-unit>
        <trans-unit id="aabcb07e7cfaf293af50a5d1698777df63583972" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#isfinite&quot;&gt;isfinite&lt;/a&gt;, and &lt;a href=&quot;#fpclassify&quot;&gt;fpclassify&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#isfinite&quot;&gt;isfinite&lt;/a&gt;と&lt;a href=&quot;#fpclassify&quot;&gt;fpclassify&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="21ff70d398c113b1b482cbd7e58305182ff055a7" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#isinf&quot;&gt;isinf&lt;/a&gt;, &lt;a href=&quot;#isnan&quot;&gt;isnan&lt;/a&gt;, and &lt;a href=&quot;#fpclassify&quot;&gt;fpclassify&lt;/a&gt;.</source>
          <target state="translated">参照してください&lt;a href=&quot;#isinf&quot;&gt;ISINF&lt;/a&gt;、&lt;a href=&quot;#isnan&quot;&gt;ISNAN&lt;/a&gt;、および&lt;a href=&quot;#fpclassify&quot;&gt;fpclassify&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="da3a984fbdfda9a3758e450455f51828721a28fe" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#isnan&quot;&gt;isnan&lt;/a&gt;, &lt;a href=&quot;#isfinite&quot;&gt;isfinite&lt;/a&gt;, and &lt;a href=&quot;#fpclassify&quot;&gt;fpclassify&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#isnan&quot;&gt;isnan&lt;/a&gt;、&lt;a href=&quot;#isfinite&quot;&gt;isfinite&lt;/a&gt;、および&lt;a href=&quot;#fpclassify&quot;&gt;fpclassify&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f3660bcf22e0b3e27c20131126f3d0f9b9f0117e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#isnan&quot;&gt;isnan&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#isnan&quot;&gt;isnan&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="fb0a3e67b2320719a59317a8928b603e22a5e53f" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#lgamma&quot;&gt;lgamma&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#lgamma&quot;&gt;lgamma&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="705ca1f6cc7a7ee05d9dd10cfeea8147d99b89ab" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#log1p&quot;&gt;log1p&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#log1p&quot;&gt;log1p&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0693f6ef561145706cf85f2965bdaf8ea0de2bf8" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#logb&quot;&gt;logb&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#logb&quot;&gt;logb&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="03a0072e3404bbfe332c09386a0be28693d5e3ba" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#make_grammar&quot;&gt;make_grammar&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#make_grammar&quot;&gt;make_grammar&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="868b7ec0221306550a570fdbaba5284f790eaad1" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#make_result&quot;&gt;make_result&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#make_result&quot;&gt;make_result&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f8c182711f3cc11ba7c9987efcb02d0c1bd0d91a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#map&quot;&gt;map&lt;/a&gt; for a list composed of the results of the BLOCK or EXPR.</source>
          <target state="translated">BLOCKまたはEXPRの結果で構成されるリストについては、&lt;a href=&quot;#map&quot;&gt;map&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="2181084db3035408ebef2c2fd15e9ebf15a821b4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#nan&quot;&gt;nan&lt;/a&gt;, &lt;a href=&quot;#isinf&quot;&gt;isinf&lt;/a&gt;, and &lt;a href=&quot;#fpclassify&quot;&gt;fpclassify&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#nan&quot;&gt;nan&lt;/a&gt;、&lt;a href=&quot;#isinf&quot;&gt;isinf&lt;/a&gt;、&lt;a href=&quot;#fpclassify&quot;&gt;fpclassify&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0970e55eff62d0613ebe03421267140e37ea9590" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#quadmath_format_needed&quot;&gt;quadmath_format_needed&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#quadmath_format_needed&quot;&gt;quadmath_format_needed&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="94885f895c488377fc0b3782a6d2a63d8c4108e6" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#remquo&quot;&gt;remquo&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#remquo&quot;&gt;remquo&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="a263e61a865bd6bffc4dc3c7a6fc2aa207c34712" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#round&quot;&gt;round&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#round&quot;&gt;ラウンド&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="eef0472f324b1b1a285224044fbfa565222f82b1" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#signbit&quot;&gt;signbit&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#signbit&quot;&gt;signbit&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="18edb8be670e43eac3e6249c3e9b7347fbd22037" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#sv_uni_display&quot;&gt;sv_uni_display&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sv_uni_display&quot;&gt;sv_uni_display&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="88e872ff667d7d8dfeeb1ebbffe71abe41dea5af" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#tgamma&quot;&gt;tgamma&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tgamma&quot;&gt;tgamma&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9dc5b5b29119e9974a1e2c360e8b1ca50d736fc7" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#undef&quot;&gt;undef&lt;/a&gt;, &lt;a href=&quot;#exists&quot;&gt;exists&lt;/a&gt;, &lt;a href=&quot;#ref&quot;&gt;ref&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#undef&quot;&gt;undef&lt;/a&gt;、&lt;a href=&quot;#exists&quot;&gt;exists&lt;/a&gt;、&lt;a href=&quot;#ref&quot;&gt;ref&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="dac47d91c6d79ac62a9f6e623a74c1ef65cc5a25" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt; for a more general description of the pros and cons of the various dbm approaches, as well as &lt;a href=&quot;../db_file&quot;&gt;DB_File&lt;/a&gt; for a particularly rich implementation.</source>
          <target state="translated">参照してください&lt;a href=&quot;../anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt;様々なDBMアプローチの長所と短所のより一般的な説明については、同様&lt;a href=&quot;../db_file&quot;&gt;のDB_File&lt;/a&gt;特に豊富な実装のために。</target>
        </trans-unit>
        <trans-unit id="312ddfc0e7683843cb0df77946503b368ac080f4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../db_file&quot;&gt;DB_File&lt;/a&gt; for other flock() examples.</source>
          <target state="translated">他のflock（）の例については、&lt;a href=&quot;../db_file&quot;&gt;DB_File&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e86acc20fd91f9ea01f8172e1c0f9a68f1048788" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../perlref&quot;&gt;perlref&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b508429b9263acf9e838c10a4f1fe24132296566" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt; for a more general description of the pros and cons of the various dbm approaches, as well as &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; for a particularly rich implementation.</source>
          <target state="translated">参照してください&lt;a href=&quot;anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt;様々なDBMアプローチの長所と短所のより一般的な説明については、同様&lt;a href=&quot;db_file&quot;&gt;のDB_File&lt;/a&gt;特に豊富な実装のために。</target>
        </trans-unit>
        <trans-unit id="feb5ce40c9730fd7587808e9f860ec02bd3be1ad" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;attributes&quot;&gt;attributes.pm&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;attributes&quot;&gt;attributes.pm&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3922359b5e2cc94ef6004dee14189087b9538adb" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;chomp&quot;&gt;chomp&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;chomp&quot;&gt;chomp&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="c51b1811fb584bf70eaf14342f6a310ceb94f036" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt; for an illustration of how &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; work.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; がどのように機能するかを示す図については、&lt;a href=&quot;continue&quot;&gt;続行&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1d9f2093b0fbde7d0467eedd84ba92736ecc192e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; for other flock() examples.</source>
          <target state="translated">他のflock（）の例については、&lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="72eab4295e6e160fa298c78fb9aff9f0809dd59e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;Handling Malformed Data in Encode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;Encodeでの不正な形式のデータの処理&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="2e637f559901257cbf0080e5c7378783b591aaaa" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;exp&quot;&gt;exp&lt;/a&gt; for the inverse operation.</source>
          <target state="translated">逆演算については&lt;a href=&quot;exp&quot;&gt;exp&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="32afb89976b8082427e91c7ba7b68f177d9957da" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;fatal#DIAGNOSTICS&quot;&gt;DIAGNOSTICS in Fatal&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;fatal#DIAGNOSTICS&quot;&gt;FatalのDIAGNOSTICS&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="61443df97502e07ec91115ca890b81aba6194b6f" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="dbb958f9cb413fdbaacbf4efae0496e3ec667177" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions/pipe&quot;&gt;パイプ&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ab6d2210c32c0fa16336844238db7c8e0eb5830d" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt; and its &lt;code&gt;O_CREAT&lt;/code&gt; flag.</source>
          <target state="translated">&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;とその &lt;code&gt;O_CREAT&lt;/code&gt; フラグも参照してください。</target>
        </trans-unit>
        <trans-unit id="a7e197eb6c34bd082986ddcd3f81baad30986106" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0b2d92b440215a9afbc0f46be4ef2ecc3855f446" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="8cadfdea7910f878665cf246af7e50bb1ef44226" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f28ff989c5f5390057e474ea8b343abfa0401399" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;http://code.google.com/p/address-sanitizer/wiki/AddressSanitizer&quot;&gt;http://code.google.com/p/address-sanitizer/wiki/AddressSanitizer&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://code.google.com/p/address-sanitizer/wiki/AddressSanitizer&quot;&gt;http://code.google.com/p/address-sanitizer/wiki/AddressSanitizer&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="82106c45b9e3ca378d3051a24f5f6c2b255decb4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;http://search.cpan.org/perldoc/Data::Dump::Streamer&quot;&gt;Data::Dump::Streamer&lt;/a&gt;, which combines B::Deparse and &lt;a href=&quot;http://search.cpan.org/perldoc/PadWalker&quot;&gt;PadWalker&lt;/a&gt; to serialize closures properly.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Data::Dump::Streamer&quot;&gt;Data :: Dump :: Streamer&lt;/a&gt;も参照してください。これは、B :: Deparseと&lt;a href=&quot;http://search.cpan.org/perldoc/PadWalker&quot;&gt;PadWalker&lt;/a&gt;を組み合わせて、クロージャーを適切にシリアル化します。</target>
        </trans-unit>
        <trans-unit id="38b013a98a32f2ee2957ec73990271963411af4d" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/&quot;&gt;http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/&lt;/a&gt; .</source>
          <target state="translated">&lt;a href=&quot;http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/&quot;&gt;http://www.cpan.org/modules/by-category/15_World_Wide_Web_HTML_HTTP_CGI/&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1aca38a03e337aedcb772fb6525dd0b1d2f3fdf4" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;i18n/langinfo&quot;&gt;I18N::Langinfo&lt;/a&gt; and &lt;code&gt;ABDAY_1&lt;/code&gt; ..&lt;code&gt;ABDAY_7&lt;/code&gt; , &lt;code&gt;DAY_1&lt;/code&gt; ..&lt;code&gt;DAY_7&lt;/code&gt; , &lt;code&gt;ABMON_1&lt;/code&gt; ..&lt;code&gt;ABMON_12&lt;/code&gt; , and &lt;code&gt;ABMON_1&lt;/code&gt; ..&lt;code&gt;ABMON_12&lt;/code&gt; .</source>
          <target state="translated">&lt;a href=&quot;i18n/langinfo&quot;&gt;I18N :: Langinfo&lt;/a&gt;および &lt;code&gt;ABDAY_1&lt;/code&gt; .. &lt;code&gt;ABDAY_7&lt;/code&gt; 、 &lt;code&gt;DAY_1&lt;/code&gt; .. &lt;code&gt;DAY_7&lt;/code&gt; 、 &lt;code&gt;ABMON_1&lt;/code&gt; .. &lt;code&gt;ABMON_12&lt;/code&gt; 、および &lt;code&gt;ABMON_1&lt;/code&gt; .. &lt;code&gt;ABMON_12&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="da50321fcfa4a145f69966ce9e58c833dd8a31ed" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;i18n/langinfo&quot;&gt;I18N::Langinfo&lt;/a&gt; and &lt;code&gt;CRNCYSTR&lt;/code&gt; .</source>
          <target state="translated">&lt;a href=&quot;i18n/langinfo&quot;&gt;I18N :: Langinfo&lt;/a&gt;および &lt;code&gt;CRNCYSTR&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b829e89e45a680e36a1fea3315c1376f162c2031" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;i18n/langinfo&quot;&gt;I18N::Langinfo&lt;/a&gt; and &lt;code&gt;RADIXCHAR&lt;/code&gt; .</source>
          <target state="translated">&lt;a href=&quot;i18n/langinfo&quot;&gt;I18N :: Langinfo&lt;/a&gt;および &lt;code&gt;RADIXCHAR&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="0dcec256f7af2ce9577bceedca06f5f648fc32ea" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;map&quot;&gt;map&lt;/a&gt; for a list composed of the results of the BLOCK or EXPR.</source>
          <target state="translated">BLOCKまたはEXPRの結果で構成されるリストについては、&lt;a href=&quot;map&quot;&gt;map&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ba5e022d3743e074d09494fd4057f576c9532ddc" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;, &lt;a href=&quot;perldebtut&quot;&gt;perldebtut&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;、&lt;a href=&quot;perldebtut&quot;&gt;perldebtut&lt;/a&gt;も参照してください</target>
        </trans-unit>
        <trans-unit id="d3900b49761f7cfc17e9f59b2833dbd67b3d9bdb" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perldsc&quot;&gt;perldsc&lt;/a&gt; and &lt;a href=&quot;perllol&quot;&gt;perllol&lt;/a&gt; for how to use references to create complex data structures, and &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt; and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt; for how to use them to create objects.</source>
          <target state="translated">参照してください&lt;a href=&quot;perldsc&quot;&gt;perldsc&lt;/a&gt;と&lt;a href=&quot;perllol&quot;&gt;perllol&lt;/a&gt;複雑なデータ構造を作成するために、参照を使用する方法について、および&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;と&lt;a href=&quot;perlobj&quot;&gt;perlobjを&lt;/a&gt;、オブジェクトを作成するためにそれらを使用する方法について。</target>
        </trans-unit>
        <trans-unit id="4a939c6bfd06b3f233cb5194d56a9df0427e718a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlfork&quot;&gt;perlfork&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;perlfork&quot;&gt;perlfork&lt;/a&gt;も参照してください</target>
        </trans-unit>
        <trans-unit id="038a0c9cb52f615684f065959a94bfe216d7fc71" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlmodlib#Pragmatic-Modules&quot;&gt;Pragmatic Modules in perlmodlib&lt;/a&gt; and &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlmodlib#Pragmatic-Modules&quot;&gt;perlmodlib&lt;/a&gt;および&lt;a href=&quot;perldiag&quot;&gt;perldiagの&lt;/a&gt;プラグマティックモジュールも参照してください。</target>
        </trans-unit>
        <trans-unit id="54a2e97103596d963fe29f14a4036177ce51b589" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;, a tutorial that covers class creation, and &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;、クラス作成をカバーするチュートリアル、および&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="09b8181c3f9ece672518ba89da5dd2ed05d947f9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f84300de0c00b2cea1c19289305e37ca7e3cef56" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlport#Newlines&quot;&gt;Newlines in perlport&lt;/a&gt;. Also see &lt;a href=&quot;#%24.&quot;&gt;$.&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlport#Newlines&quot;&gt;perlportの改行&lt;/a&gt;も参照してください。&lt;a href=&quot;#%24.&quot;&gt;$&lt;/a&gt;も参照してください。。</target>
        </trans-unit>
        <trans-unit id="049bfdb2960ee0bd10a6891d989bd1f10ba1feda" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;も参照してください</target>
        </trans-unit>
        <trans-unit id="84c3eedc28e0411704fb9ad3cbda7f1a7281102c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="10f03e3c6d8716cd8d154f5d4f40c95fd2e87f9f" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;も参照してください</target>
        </trans-unit>
        <trans-unit id="e0ef6aadcbffe5c23ec9a5346fa2be14f2cf695d" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;も参照してください</target>
        </trans-unit>
        <trans-unit id="c300a2208a59c3e92860c0fe316027e85641a6bd" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;perlxs#Thread-aware-system-interfaces&quot;&gt;Thread-aware system interfaces in perlxs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlxs#Thread-aware-system-interfaces&quot;&gt;perlxsのスレッド対応システムインターフェイス&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3f250914d937ad2e085cf64d128cbfa1691f6586" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;socket&quot;&gt;ソケット&lt;/a&gt;も参照</target>
        </trans-unit>
        <trans-unit id="bc26e7328351b379ed5d17eb2dfaaeffbbb9413b" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;, &lt;a href=&quot;exists&quot;&gt;exists&lt;/a&gt;, &lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;、&lt;a href=&quot;exists&quot;&gt;exists&lt;/a&gt;、&lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9d3fc828754e6528837615c426ddc7bef3997af8" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;warnings&quot;&gt;警告&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9d31731dd5d45a94f24c01a2e4721ffa55ed2062" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;$Module::Load::Conditional::DEPRECATED&lt;/code&gt; , which affects the outcome of this value.</source>
          <target state="translated">この値の結果に影響を与える &lt;code&gt;$Module::Load::Conditional::DEPRECATED&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="cd6010ba4ac41e571c685c864d5dfddc74518ef8" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;$]&lt;/code&gt; for a decimal representation of the Perl version.</source>
          <target state="translated">Perlバージョンの10進表記については、 &lt;code&gt;$]&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="7f3cadc97a35414c53b5b4ced055817f6f902bce" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;(?&amp;gt;pattern)&lt;/code&gt; and possessive quantifiers for other ways to control backtracking. In some cases, the use of &lt;code&gt;(*PRUNE)&lt;/code&gt; can be replaced with a &lt;code&gt;(?&amp;gt;pattern)&lt;/code&gt; with no functional difference; however, &lt;code&gt;(*PRUNE)&lt;/code&gt; can be used to handle cases that cannot be expressed using a &lt;code&gt;(?&amp;gt;pattern)&lt;/code&gt; alone.</source>
          <target state="translated">バックトラッキングを制御する他の方法については、 &lt;code&gt;(?&amp;gt;pattern)&lt;/code&gt; および所有格指定子も参照してください。場合によっては、 &lt;code&gt;(*PRUNE)&lt;/code&gt; の使用を &lt;code&gt;(?&amp;gt;pattern)&lt;/code&gt; で置き換えることができ、機能的な違いはありません。ただし、 &lt;code&gt;(*PRUNE)&lt;/code&gt; は、 &lt;code&gt;(?&amp;gt;pattern)&lt;/code&gt; だけでは表現できないケースを処理するために使用できます。</target>
        </trans-unit>
        <trans-unit id="d9225ba080018d7c5c1a1d008a8d53f734ca8a25" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;. If EXPR is omitted, exits with &lt;code&gt;0&lt;/code&gt; status. The only universally recognized values for EXPR are &lt;code&gt;0&lt;/code&gt; for success and &lt;code&gt;1&lt;/code&gt; for error; other values are subject to interpretation depending on the environment in which the Perl program is running. For example, exiting 69 (EX_UNAVAILABLE) from a</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; も参照してください。EXPRを省略すると、ステータス &lt;code&gt;0&lt;/code&gt; で終了します。EXPRの普遍的に認識される唯一の値は、成功の場合は &lt;code&gt;0&lt;/code&gt; 、エラーの場合は &lt;code&gt;1&lt;/code&gt; です。その他の値は、Perlプログラムが実行されている環境に応じて解釈されます。たとえば、69（EX_UNAVAILABLE）を</target>
        </trans-unit>
        <trans-unit id="3cea1c25b3337bcf63df8e46046184cbf81519a6" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="1359ca66e378f741dfbd245fa252e05e3072e4f4" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;. If EXPR is omitted, exits with &lt;code&gt;0&lt;/code&gt; status. The only universally recognized values for EXPR are &lt;code&gt;0&lt;/code&gt; for success and &lt;code&gt;1&lt;/code&gt; for error; other values are subject to interpretation depending on the environment in which the Perl program is running. For example, exiting 69 (EX_UNAVAILABLE) from a</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; も参照してください。EXPRを省略すると、ステータス &lt;code&gt;0&lt;/code&gt; で終了します。EXPRの普遍的に認識される唯一の値は、成功の場合は &lt;code&gt;0&lt;/code&gt; 、エラーの場合は &lt;code&gt;1&lt;/code&gt; です。その他の値は、Perlプログラムが実行されている環境に応じて解釈されます。たとえば、69（EX_UNAVAILABLE）を</target>
        </trans-unit>
        <trans-unit id="2f24bea2ac99cea2d4c8a36087486d58737a2abb" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="3fd8aa3be1dbf4a33c6a1909a8b78b0c57536b93" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="a744e171fb1158e9d1732277124eef8eb6736bf9" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="2d4f0c2bfcaf936a86dc92ecec864ad87bddc74a" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; do the same thing to the left end of an array that &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; do to the right end.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; も参照してください。 &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; は配列の左端に対して同じことを行い、 &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; は右端に行います。</target>
        </trans-unit>
        <trans-unit id="caf8ab2e34d97a666cef57f465212286aca5ce76" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="bc3ccde61e06a276638618c5a81572f42f73aeac" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="e3effdc9e9719c17049bd0a15fb9f730b482944c" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;&lt;a href=&quot;unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; do the same thing to the left end of an array that &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; do to the right end.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; も参照してください。 &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; は配列の左端に対して同じことを行い、 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; は右端に行います。</target>
        </trans-unit>
        <trans-unit id="42bb17c4fce277f1b63b388f77acdc054e99f8a2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;Apache::DProf&lt;/code&gt; which hooks &lt;code&gt;Devel::DProf&lt;/code&gt; into &lt;code&gt;mod_perl&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Devel::DProf&lt;/code&gt; を &lt;code&gt;mod_perl&lt;/code&gt; にフックする &lt;code&gt;Apache::DProf&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="30c9df84a4f8d5bb6552f0fb2e215aa7a50280fb" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;Apache::SmallProf&lt;/code&gt; which hooks &lt;code&gt;Devel::SmallProf&lt;/code&gt; into &lt;code&gt;mod_perl&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Devel::SmallProf&lt;/code&gt; を &lt;code&gt;mod_perl&lt;/code&gt; にフックする &lt;code&gt;Apache::SmallProf&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="e33fce8ff6adc655e93cc1158e62614ab91d8bb7" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;Devel::Apache::Profiler&lt;/code&gt; which hooks &lt;code&gt;Devel::Profiler&lt;/code&gt; into &lt;code&gt;mod_perl&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Devel::Profiler&lt;/code&gt; を &lt;code&gt;mod_perl&lt;/code&gt; にフックする &lt;code&gt;Devel::Apache::Profiler&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="84d36c0ff87030ed272d248a2736c8a3f6cbf3ec" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;Devel::NYTProf::Apache&lt;/code&gt; which hooks &lt;code&gt;Devel::NYTProf&lt;/code&gt; into &lt;code&gt;mod_perl&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;Devel::NYTProf&lt;/code&gt; を &lt;code&gt;mod_perl&lt;/code&gt; にフックする &lt;code&gt;Devel::NYTProf::Apache&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="86286084c63771dd6bdd5d93863fb70cc79b36c2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;PL_sv_yes&lt;/code&gt; and &lt;code&gt;PL_sv_no&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;PL_sv_yes&lt;/code&gt; および &lt;code&gt;PL_sv_no&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="09945a80e8e04b2b27fe5027ac1bd4e5e6a9a0b2" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;blog()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;blog()&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="1ed855d062748c44f50e0c12d79b5b208e551776" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;identical&lt;/code&gt; .</source>
          <target state="translated">「 &lt;code&gt;identical&lt;/code&gt; 」も参照してください。</target>
        </trans-unit>
        <trans-unit id="86a6e1ff669076c3ac3f923bcd4119157edfdd71" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;permute&lt;/code&gt; , which is the opposite of &lt;code&gt;require_order&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;require_order&lt;/code&gt; の逆である &lt;code&gt;permute&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="bdd58dd0c357fd171783417cceab2dc185356f3d" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;sv_magicext&lt;/code&gt; in &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for a more flexible way to add magic to an SV.</source>
          <target state="translated">SVに魔法を追加するより柔軟な方法については、&lt;a href=&quot;perlapi&quot;&gt;perlapiの&lt;/a&gt; &lt;code&gt;sv_magicext&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="1bafaa0d36c187ba60d6845649051a45f6ee6b67" translate="yes" xml:space="preserve">
          <source>See also Perl_sv_add_backref(), Perl_sv_del_backref(), Perl_sv_kill_backrefs()</source>
          <target state="translated">Perl_sv_add_backref()、Perl_sv_del_backref()、Perl_sv_kill_backrefs()も参照してください。</target>
        </trans-unit>
        <trans-unit id="b8ee0d43bbd6314b08a48b2c13e478e9ccbe9925" translate="yes" xml:space="preserve">
          <source>See also bucket_info() and bucket_array().</source>
          <target state="translated">bucket_info()および bucket_array()も参照してください。</target>
        </trans-unit>
        <trans-unit id="8cd9527fbd94acf64a5c84812edc3701f61dd923" translate="yes" xml:space="preserve">
          <source>See also bucket_stats() and bucket_array().</source>
          <target state="translated">bucket_stats()および bucket_array()も参照してください。</target>
        </trans-unit>
        <trans-unit id="bd153b57031966245c6990a8d9df7c3a12fdc1dc" translate="yes" xml:space="preserve">
          <source>See also discussion of list operators in &lt;a href=&quot;#Terms-and-List-Operators-(Leftward)&quot;&gt;Terms and List Operators (Leftward)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Terms-and-List-Operators-(Leftward)&quot;&gt;用語とリスト演算子（左）&lt;/a&gt;のリスト演算子の説明も参照してください。</target>
        </trans-unit>
        <trans-unit id="303e32a7e050a24a88278e7a410b579432fbbbdf" translate="yes" xml:space="preserve">
          <source>See also exit(), warn(), and the Carp module.</source>
          <target state="translated">exit()、warn()、Carp モジュールも参照してください。</target>
        </trans-unit>
        <trans-unit id="34b1d500b949544057d7d0d41fbe556d19d872ff" translate="yes" xml:space="preserve">
          <source>See also getaddrinfo() for a more powerful and flexible function to look up socket addresses given hostnames or textual addresses.</source>
          <target state="translated">ホスト名やテキストアドレスを指定してソケットアドレスを検索するためのより強力で柔軟な関数については getaddrinfo()も参照してください。</target>
        </trans-unit>
        <trans-unit id="51611c0d549c4f13d08aadfaa7eb73986d77f3f8" translate="yes" xml:space="preserve">
          <source>See also getnameinfo() for a more powerful and flexible function to turn socket addresses into human-readable textual representations.</source>
          <target state="translated">ソケットアドレスを人間が読めるテキスト表現に変換するためのより強力で柔軟な関数については getnameinfo()も参照してください。</target>
        </trans-unit>
        <trans-unit id="3c9541f70af426eada4963661a5e76927d14033d" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt; section.</source>
          <target state="translated">&lt;a href=&quot;#EXAMPLES&quot;&gt;例の&lt;/a&gt;セクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="950888a5c439afc133bbbbcf76c9f289c65a4df0" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;#POSIX-FLAGS&quot;&gt;POSIX FLAGS&lt;/a&gt; below, which can be exported individually.</source>
          <target state="translated">個別にエクスポートできる以下の&lt;a href=&quot;#POSIX-FLAGS&quot;&gt;POSIX FLAGS&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b2bbb3cbeb9546d32423b56f3b6e8cad08e47d09" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;http://search.cpan.org/perldoc/DBIx::Profile&quot;&gt;DBIx::Profile&lt;/a&gt; which will profile database queries running under the &lt;code&gt;DBIx::*&lt;/code&gt; namespace.</source>
          <target state="translated">&lt;code&gt;DBIx::*&lt;/code&gt; 名前空間で実行されているデータベースクエリをプロファイルする&lt;a href=&quot;http://search.cpan.org/perldoc/DBIx::Profile&quot;&gt;DBIx :: Profile&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1361dd7d2c2bd52b263e3b68649b6fc568d06fee" translate="yes" xml:space="preserve">
          <source>See also the OS390::Stdio module on CPAN.</source>
          <target state="translated">CPANのOS390::Stdioモジュールも参照してください。</target>
        </trans-unit>
        <trans-unit id="a0a5320be18b6d51495d235fe86650b56ae37fee" translate="yes" xml:space="preserve">
          <source>See also the POSIX module's &lt;code&gt;pause&lt;/code&gt; function.</source>
          <target state="translated">POSIXモジュールの &lt;code&gt;pause&lt;/code&gt; 機能も参照してください。</target>
        </trans-unit>
        <trans-unit id="bcf22177096541c608e12df64316f788e1b9f418" translate="yes" xml:space="preserve">
          <source>See also the documentation for overload.pm regarding &lt;code&gt;=&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; に関するoverload.pmのドキュメントもご覧ください。</target>
        </trans-unit>
        <trans-unit id="24aad35d071d1f6e5724bdc66e64add6114641cb" translate="yes" xml:space="preserve">
          <source>See also the documentation for the Test and Test::Harness modules, for more environment variables that affect testing.</source>
          <target state="translated">テストに影響を与える環境変数については、Test や Test::Harness モジュールのドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="eb3ef9318d2ff536c37c7f919b9b535ff3c0da0d" translate="yes" xml:space="preserve">
          <source>See also the documentation of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; VERSION&lt;/code&gt; for a convenient way to fail if the running Perl interpreter is too old.</source>
          <target state="translated">またのドキュメントを参照してください &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; し、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; VERSION&lt;/code&gt; 実行しているPerlインタプリタが古すぎる場合に終了する便利な方法のために。</target>
        </trans-unit>
        <trans-unit id="6a7acbe251726a5c6c893ef946218c6a477bfbb6" translate="yes" xml:space="preserve">
          <source>See also the effects of the &lt;code&gt;-C&lt;/code&gt; switch and its cousin, the &lt;code&gt;PERL_UNICODE&lt;/code&gt; environment variable, in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;PERL_UNICODE&lt;/code&gt; &lt;code&gt;-C&lt;/code&gt; スイッチとその従兄弟であるPERL_UNICODE環境変数の影響も参照して&lt;a href=&quot;perlrun&quot;&gt;ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="12dd0ec3281d19f4664ce0084bbb14814b4a8af0" translate="yes" xml:space="preserve">
          <source>See also the question later in &lt;a href=&quot;perlfaq4&quot;&gt;perlfaq4&lt;/a&gt; on sorting hashes.</source>
          <target state="translated">ハッシュのソートについては、後で&lt;a href=&quot;perlfaq4&quot;&gt;perlfaq4&lt;/a&gt;にある質問も参照してください。</target>
        </trans-unit>
        <trans-unit id="c0dbd0cacf774e5e56ef712e004e689ecf38404f" translate="yes" xml:space="preserve">
          <source>See also the script &lt;code&gt;pfind&lt;/code&gt; on CPAN for a nice application of this module.</source>
          <target state="translated">このモジュールのすばらしいアプリケーションについては、CPAN のスクリプト &lt;code&gt;pfind&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="34e3cbd59762152cba621f3c14b64923435705a7" translate="yes" xml:space="preserve">
          <source>See also the section about &lt;a href=&quot;#Infinity-and-Not-a-Number&quot;&gt;Infinity and Not a Number&lt;/a&gt; for problems in comparing NaNs.</source>
          <target state="translated">NaNを比較する際の問題については、&lt;a href=&quot;#Infinity-and-Not-a-Number&quot;&gt;InfinityとNot a Number&lt;/a&gt;に関するセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="8fb61b8f7581126c42cfbb281a9efdf2f8c172ab" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#Rounding&quot;&gt;Rounding&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;#Rounding&quot;&gt;丸め&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9fffb7d4e9c0633d7fa04d7123f0865b0d619df2" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;encode/encoding&quot;&gt;Encode::Encoding&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;encode/encoding&quot;&gt;Encode :: Encoding&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a8e3d5311d7d86ca2b21b6b0c86aeb3b642adadb" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;perlop#Bitwise-String-Operators&quot;&gt;Bitwise String Operators in perlop&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;perlop#Bitwise-String-Operators&quot;&gt;perlopのビット単位の文字列演算子&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f33bd2fb971b9e485ec30974e79d41960f0f0eaa" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;perlrecharclass#Extended-Bracketed-Character-Classes&quot;&gt;Extended Bracketed Character Classes in perlrecharclass&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;perlrecharclass#Extended-Bracketed-Character-Classes&quot;&gt;perlrecharclassの拡張ブラケット文字クラス&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ff63f1036be059a709c795a2c9e17166be1b529c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;perlref#Assigning-to-References&quot;&gt;Assigning to References in perlref&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;perlref#Assigning-to-References&quot;&gt;perlrefの参照への割り当て&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="294c7b81d556a38e8f63c019326342cbea7a1f46" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;perlsub#Constant-Functions&quot;&gt;Constant Functions in perlsub&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;perlsub#Constant-Functions&quot;&gt;perlsubの定数関数&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="399b88ea69898133db71e6d96568e2fa890a8253" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;perlsub#Lexical-Subroutines&quot;&gt;Lexical Subroutines in perlsub&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;perlsub#Lexical-Subroutines&quot;&gt;perlsubの字句サブルーチン&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="04083ff70a9e05cd8adfcd185f1ca1596107ee24" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt; and &lt;code&gt;&quot;extract_codeblock&quot;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt; と &lt;code&gt;&quot;extract_codeblock&quot;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="d54aa0d2b835810f29436bc75eb77b3333657eae" translate="yes" xml:space="preserve">
          <source>See attribute &lt;code&gt;depend&lt;/code&gt; below.</source>
          <target state="translated">以下の属性に &lt;code&gt;depend&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="e209530cb731d2c6ed80fd9e56ee0996a9dfdecf" translate="yes" xml:space="preserve">
          <source>See below and hints/qnx.sh for more information.</source>
          <target state="translated">詳細は以下とヒント/qnx.shを参照してください。</target>
        </trans-unit>
        <trans-unit id="5e94ffa964eb8148a5b7b44e3218f55c7b6a5f7a" translate="yes" xml:space="preserve">
          <source>See below for more description of the switches.</source>
          <target state="translated">スイッチの詳細は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="a8c5ac01636644c6c2c7a306c349b1544c648097" translate="yes" xml:space="preserve">
          <source>See comment on fork in &lt;a href=&quot;#Miscellaneous&quot;&gt;Miscellaneous&lt;/a&gt; below.</source>
          <target state="translated">以下の&lt;a href=&quot;#Miscellaneous&quot;&gt;その他の&lt;/a&gt;フォークに関するコメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b09836a76dfa7e890b82a509295f12ae70b14260" translate="yes" xml:space="preserve">
          <source>See cop.h: je_mustcatch, when set at any runlevel to TRUE, means eval ops must establish a local jmpenv to handle exception traps.</source>
          <target state="translated">cop.h を参照してください:je_mustcatch は、任意のランレベルで TRUE に設定されている場合、 eval ops は例外トラップを処理するためにローカル jmpenv を確立しなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="2b761641535ca282b73de8042196ecbd1e908438" translate="yes" xml:space="preserve">
          <source>See documentation of &lt;code&gt;subtest&lt;/code&gt; in Test::More.</source>
          <target state="translated">Test :: Moreの &lt;code&gt;subtest&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8e5b968746ee31a1cfd2e25034fe29fe133c880b" translate="yes" xml:space="preserve">
          <source>See either &lt;b&gt;instance variable&lt;/b&gt; or &lt;b&gt;character property&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;インスタンス変数&lt;/b&gt;または&lt;b&gt;文字プロパティを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c93485a9bf7ab70246c2bb25b81b685338032bee" translate="yes" xml:space="preserve">
          <source>See either &lt;b&gt;switches&lt;/b&gt; or &lt;b&gt;regular expression modifiers&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;スイッチ&lt;/b&gt;または&lt;b&gt;正規表現修飾子を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bca27e73c5af96160e310f88f005bfd242ca416d" translate="yes" xml:space="preserve">
          <source>See examples in &lt;a href=&quot;#The-NO_OUTPUT-Keyword&quot;&gt;The NO_OUTPUT Keyword&lt;/a&gt; and &lt;a href=&quot;#Returning-Undef-And-Empty-Lists&quot;&gt;Returning Undef And Empty Lists&lt;/a&gt;.</source>
          <target state="translated">「&lt;a href=&quot;#The-NO_OUTPUT-Keyword&quot;&gt;NO_OUTPUTキーワード&lt;/a&gt;と&lt;a href=&quot;#Returning-Undef-And-Empty-Lists&quot;&gt;Returning &lt;/a&gt;Undef And Empty Lists」の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="ceb23395b7ff892f97e42af84489440c4a02a6b7" translate="yes" xml:space="preserve">
          <source>See for example the limitations in Switch, which uses source filters, and thus is does not work inside a string eval, the presence of regexes with embedded newlines that are specified with raw /.../ delimiters and don't have a modifier //x are indistinguishable from code chunks beginning with the division operator /. As a workaround you must use m/.../ or m?...? for such patterns. Also, the presence of regexes specified with raw ?...? delimiters may cause mysterious errors. The workaround is to use m?...? instead. See &lt;a href=&quot;http://search.cpan.org/perldoc?Switch#LIMITATIONS&quot;&gt;http://search.cpan.org/perldoc?Switch#LIMITATIONS&lt;/a&gt;</source>
          <target state="translated">たとえば、ソースフィルターを使用し、文字列eval内では機能しないSwitchの制限、生の/.../区切り文字で指定され、修飾子/がない、改行が埋め込まれた正規表現の存在を参照してください。 / xは、除算演算子/で始まるコードチャンクと区別できません。回避策として、m /.../またはm？...？を使用する必要があります。そのようなパターンのために。また、生で指定された正規表現の存在？...？区切り文字は不可解なエラーを引き起こす可能性があります。回避策は、mを使用することですか？...？代わりに。&lt;a href=&quot;http://search.cpan.org/perldoc?Switch#LIMITATIONS&quot;&gt;http://search.cpan.org/perldoc?Switch#LIMITATIONSを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="c2924f082858dd71261929cfa3aa3fdf58f5e82c" translate="yes" xml:space="preserve">
          <source>See for the full list of hardware/OS support and expected end-of-life &lt;a href=&quot;http://www.hp.com/go/hpuxservermatrix&quot;&gt;http://www.hp.com/go/hpuxservermatrix&lt;/a&gt;</source>
          <target state="translated">ハードウェア/ OSサポートの完全なリストと予想されるサポート終了日については、&lt;a href=&quot;http://www.hp.com/go/hpuxservermatrix&quot;&gt;http：//www.hp.com/go/hpuxservermatrixを参照してください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9cac07c3a5031bc58ed0d4641c1e831bf299803" translate="yes" xml:space="preserve">
          <source>See how much easier this is? It's cleaner, safer, and faster. It's cleaner because it's less noisy. It's safer because if code gets added between the inner and outer loops later on, the new code won't be accidentally executed. The &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; explicitly iterates the other loop rather than merely terminating the inner one. And it's faster because Perl executes a &lt;code&gt;foreach&lt;/code&gt; statement more rapidly than it would the equivalent &lt;code&gt;for&lt;/code&gt; loop.</source>
          <target state="translated">これがどれほど簡単かわかりますか？よりクリーンで、より安全で、より高速です。ノイズが少ないので、クリーンです。後で内部ループと外部ループの間にコードが追加されても、新しいコードが誤って実行されることがないため、安全です。 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 明示的に、単に内側の終端ではなく、他のループを反復します。また、Perlは &lt;code&gt;foreach&lt;/code&gt; ステートメントを同等の &lt;code&gt;for&lt;/code&gt; ループよりも速く実行するため、より高速です。</target>
        </trans-unit>
        <trans-unit id="fff03238825b47d71884937869bfce10a8b5c0e3" translate="yes" xml:space="preserve">
          <source>See https://metacpan.org/release/ExtUtils-MakeMaker.</source>
          <target state="translated">https://metacpan.org/release/ExtUtils-MakeMaker を参照してください。</target>
        </trans-unit>
        <trans-unit id="88733ada1546a673c0dbee91911afa2ab1e52139" translate="yes" xml:space="preserve">
          <source>See if the web framework you are using has an authentication system and if that fits your needs.</source>
          <target state="translated">使用しているWebフレームワークが認証システムを持っているかどうか、そしてそれがあなたのニーズに合っているかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="e2f42e5fd2aaa4c6aa831bc277c3b494ee196f99" translate="yes" xml:space="preserve">
          <source>See passwd(5) and getpwent(3) for details.</source>
          <target state="translated">詳細は passwd(5)と getpwent(3)を参照してください。</target>
        </trans-unit>
        <trans-unit id="075e3f5e18c179398bc43c4ab7f0926aeb85cca7" translate="yes" xml:space="preserve">
          <source>See previous FAQ item.</source>
          <target state="translated">以前のFAQの項目を参照してください。</target>
        </trans-unit>
        <trans-unit id="acc2c52c24a5f8259e0f2ce1e052d9cf22c641ab" translate="yes" xml:space="preserve">
          <source>See the</source>
          <target state="translated">を参照してください。</target>
        </trans-unit>
        <trans-unit id="e3f3a8cb36b9b33d47d443f8468d020d9ca6511b" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section for more details.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="43abd257abdf69c73d5be5761204cdfb28133096" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#HOW-IT-WORKS&quot;&gt;HOW IT WORKS&lt;/a&gt; section below to see how &lt;code&gt;IPC::Cmd&lt;/code&gt; decides what modules or function calls to use when issuing a command.</source>
          <target state="translated">参照してください。&lt;a href=&quot;#HOW-IT-WORKS&quot;&gt;それがどのように動作するか&lt;/a&gt;どのように確認するには、以下のセクションを &lt;code&gt;IPC::Cmd&lt;/code&gt; コマンドを発行する際に、モジュールや関数呼び出しを使用するかを決定します。</target>
        </trans-unit>
        <trans-unit id="dd05f1a1763e3ac883d61441090452812cc7eb8c" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD::Resource&lt;/a&gt; and your systems documentation for the gory details.</source>
          <target state="translated">残酷な詳細については、&lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD :: Resource&lt;/a&gt;とシステムのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="40b878a314357dca797baa2a8cee58f135011aad" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://search.cpan.org/perldoc/local::lib&quot;&gt;local::lib&lt;/a&gt; documentation for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://search.cpan.org/perldoc/local::lib&quot;&gt;local :: libの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="25e71bd547060c51814b7b6becb838b195fce0a3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;opcode&quot;&gt;Opcode&lt;/a&gt; module for information about opcodes, optags, opmasks and important information about safety.</source>
          <target state="translated">opcode、optags、opmasksに関する情報、および安全性に関する重要な情報については、&lt;a href=&quot;opcode&quot;&gt;Opcode&lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="d12dff4667632c72fccecf6522c62e799bd934d4" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; function, of which &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; is the opposite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 関数を参照してください。その逆はあり &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1a694b2c9c4e7154192a15cf9fc1aa34b89f6f9" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; function, of which &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; is the opposite.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 関数を参照してください。その逆はあり &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b249700609418ebf44cd57258a74d127f00ece2c" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; section to see how to change this preference.</source>
          <target state="translated">この設定を変更する方法については、「 &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2b239b93bdb113b7db924e9e6e1c8679cc3b9771" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;HOW IT WORKS&lt;/code&gt; section further down for details.</source>
          <target state="translated">詳細については、下の「 &lt;code&gt;HOW IT WORKS&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a9f9e5a0d99ec9e84fec92a948a2b98903855c8f" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;Memoize.pm&lt;/code&gt; Page at &lt;a href=&quot;http://perl.plover.com/Memoize/&quot;&gt;http://perl.plover.com/Memoize/&lt;/a&gt; for news and upgrades. Near this page, at &lt;a href=&quot;http://perl.plover.com/MiniMemoize/&quot;&gt;http://perl.plover.com/MiniMemoize/&lt;/a&gt; there is an article about memoization and about the internals of Memoize that appeared in The Perl Journal, issue #13. (This article is also included in the Memoize distribution as `article.html'.)</source>
          <target state="translated">ニュースとアップグレードについては、&lt;a href=&quot;http://perl.plover.com/Memoize/&quot;&gt;http：&lt;/a&gt; &lt;code&gt;Memoize.pm&lt;/code&gt; ページを参照してください。このページの近くの&lt;a href=&quot;http://perl.plover.com/MiniMemoize/&quot;&gt;http://perl.plover.com/MiniMemoize/&lt;/a&gt;には、メモ化に関する記事と、The Perl Journalの第13号に掲載されたMemoizeの内部に関する記事があります。（この記事はMemoizeディストリビューションにも `article.html 'として含まれています。）</target>
        </trans-unit>
        <trans-unit id="4bba6998f19fbd03af482ef65b9510cbaa5fae00" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;README&lt;/code&gt; in the &lt;code&gt;examples&lt;/code&gt; directory of this distribution.</source>
          <target state="translated">このディストリビューションの &lt;code&gt;examples&lt;/code&gt; ディレクトリにある &lt;code&gt;README&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bf3a9502c15d00637d12054d98327f56167519da" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;allow()&lt;/code&gt; function for details.</source>
          <target state="translated">詳細については、 &lt;code&gt;allow()&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="74d7550b08cbab72120e12fa13822ee435ab10ff" translate="yes" xml:space="preserve">
          <source>See the &lt;code&gt;autoload&lt;/code&gt; function and the &lt;code&gt;autoload_remote&lt;/code&gt; function from &lt;a href=&quot;../load&quot;&gt;Module::Load&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../load&quot;&gt;Module :: Load&lt;/a&gt;の &lt;code&gt;autoload&lt;/code&gt; 関数と &lt;code&gt;autoload_remote&lt;/code&gt; 関数をご覧ください。</target>
        </trans-unit>
        <trans-unit id="1e423604a1b60cbb6339c26afc8a58724c582f8f" translate="yes" xml:space="preserve">
          <source>See the CPAN FAQ at &lt;a href=&quot;http://www.cpan.org/misc/cpan-faq.html&quot;&gt;http://www.cpan.org/misc/cpan-faq.html&lt;/a&gt; for answers to the most frequently asked questions about CPAN.</source>
          <target state="translated">CPANに関する最もよくある質問への回答については、&lt;a href=&quot;http://www.cpan.org/misc/cpan-faq.html&quot;&gt;http：&lt;/a&gt; //www.cpan.org/misc/cpan-faq.htmlのCPAN FAQを参照してください。</target>
        </trans-unit>
        <trans-unit id="607b3a7869f52b5842876abd8b4f375d4245815f" translate="yes" xml:space="preserve">
          <source>See the CPAN::Reporter documentation for additional details and configuration settings. If your firewall blocks outgoing traffic, you may need to configure CPAN::Reporter before sending reports.</source>
          <target state="translated">詳細および構成設定については、CPAN::Reporterのドキュメントを参照してください。ファイアウォールが発信トラフィックをブロックしている場合は、レポートを送信する前にCPAN::Reporterを設定する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7aba5ca9b45599787560bfb2afd7a0e9cf3c9f34" translate="yes" xml:space="preserve">
          <source>See the Changes file.</source>
          <target state="translated">変更ファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="1c8c02a8fa1ad32731232c8c310d53fc47ee543e" translate="yes" xml:space="preserve">
          <source>See the INSTALL file for general information regarding 64-bit compiles. In general, the defaults should be fine for most people.</source>
          <target state="translated">64 ビットコンパイルに関する一般的な情報は INSTALL ファイルを参照してください。一般的には、ほとんどの人はデフォルトのままで問題ないはずです。</target>
        </trans-unit>
        <trans-unit id="9ba403735f1b0853cf6c42f682cd71f9040fc277" translate="yes" xml:space="preserve">
          <source>See the INSTALL file for general information regarding Configure. Only Solaris-specific issues are discussed here. Usually, the defaults should be fine.</source>
          <target state="translated">Configure の一般的な情報については、「INSTALL ファイル」を参照してください。ここでは、Solaris 固有の問題のみを取り上げます。通常は、デフォルトで問題ないはずです。</target>
        </trans-unit>
        <trans-unit id="faa04af1eab5ace0a18b7ea38f2f5d8491391afd" translate="yes" xml:space="preserve">
          <source>See the Net::POP3 and Net::SMTP modules for examples of this.</source>
          <target state="translated">この例については、Net::POP3 および Net::SMTP モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="00f6b4f37ceaafbb02fe1c9b33be7ac70154b89e" translate="yes" xml:space="preserve">
          <source>See the Symbol module for a way to create anonymous symbol table entries.</source>
          <target state="translated">匿名のシンボルテーブルエントリを作成する方法については、シンボルモジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="1c93fd5ae730337ac1cf24d8d9d41ea44b6db206" translate="yes" xml:space="preserve">
          <source>See the YAML and Data::Dumper files that come with the &lt;code&gt;CPAN.pm&lt;/code&gt; distribution in the &lt;code&gt;distroprefs/&lt;/code&gt; directory for examples.</source>
          <target state="translated">例については、 &lt;code&gt;distroprefs/&lt;/code&gt; ディレクトリにある &lt;code&gt;CPAN.pm&lt;/code&gt; ディストリビューションに付属のYAMLおよびData :: Dumperファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="7de8bb3c2dde975b8a0f3c38ce1f6bdae6932300" translate="yes" xml:space="preserve">
          <source>See the answer to the previous question.</source>
          <target state="translated">前の質問の回答を参照してください。</target>
        </trans-unit>
        <trans-unit id="239f1061c9f649d13d28c85c2cc34e6f36fc310a" translate="yes" xml:space="preserve">
          <source>See the appropriate</source>
          <target state="translated">適切なものを参照してください。</target>
        </trans-unit>
        <trans-unit id="838accd091e073a4e4a620e7a6475dfe1cb73c48" translate="yes" xml:space="preserve">
          <source>See the authors list in</source>
          <target state="translated">の著者一覧を参照してください。</target>
        </trans-unit>
        <trans-unit id="44e0b1268a441d58c97c9174c3132c41e9df0b15" translate="yes" xml:space="preserve">
          <source>See the brief discussion in &lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;Formatting Codes in perlpod&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;perlpodでのコードのフォーマット&lt;/a&gt;の簡単な説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="291a0ebbbec03b08710f5ad3e40715d6cafecaea" translate="yes" xml:space="preserve">
          <source>See the comments at the top of &lt;code&gt;embed.fnc&lt;/code&gt; for others.</source>
          <target state="translated">他の &lt;code&gt;embed.fnc&lt;/code&gt; については、embed.fncの上部にあるコメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8c1c5dd902524760ea293fd54aa24dc28de5008d" translate="yes" xml:space="preserve">
          <source>See the discussion of &lt;code&gt;&lt;a href=&quot;#pack()&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; above.</source>
          <target state="translated">上記の &lt;code&gt;&lt;a href=&quot;#pack()&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="34b50de2cb94e2f5733b571c3907a9372a967f36" translate="yes" xml:space="preserve">
          <source>See the discussion of &lt;code&gt;&lt;a href=&quot;#printf()&quot;&gt;printf()&lt;/a&gt;&lt;/code&gt; above. An example of the use of sprintf would be:</source>
          <target state="translated">上記の &lt;code&gt;&lt;a href=&quot;#printf()&quot;&gt;printf()&lt;/a&gt;&lt;/code&gt; の説明を参照してください。sprintfの使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e4df8ddf2842e84ed3cc6225530d69e4aa2b505d" translate="yes" xml:space="preserve">
          <source>See the documentation about the copy constructor and &lt;code&gt;=&lt;/code&gt; in overload, as well as the documentation in BigInt for further details.</source>
          <target state="translated">詳細については、コピーコンストラクターとオーバーロードの &lt;code&gt;=&lt;/code&gt; に関するドキュメント、およびBigIntのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3a5795626bd886fc84b5b3161c91f427201f7acc" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Autoformat&quot;&gt;Text::Autoformat&lt;/a&gt; to appreciate its many capabilities.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Text::Autoformat&quot;&gt;Text :: Autoformatの&lt;/a&gt;ドキュメントを参照して、その多くの機能を評価してください。</target>
        </trans-unit>
        <trans-unit id="c25e441faf735f723987df3964a8c84deff8b0a3" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlfunc&quot;&gt;perlfuncの&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9af3ab1ea4081603ca7ba1db505f142d92a5d411" translate="yes" xml:space="preserve">
          <source>See the documentation for either of those commands to see what else you can do.</source>
          <target state="translated">他に何ができるかについては、これらのコマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="413a3d22d49065def44419ce8b97e5b6502bcdf5" translate="yes" xml:space="preserve">
          <source>See the documentation for flow-control keywords in &lt;a href=&quot;../perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../perlsyn#Compound-Statements&quot;&gt;perlsynの複合ステートメントの&lt;/a&gt;フロー制御キーワードのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="97571b9edce8f08599cc2aae5c1b1a942d44701b" translate="yes" xml:space="preserve">
          <source>See the documentation for flow-control keywords in &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;perlsynの複合ステートメントの&lt;/a&gt;フロー制御キーワードのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="73e4b041d28a8fef241cdecb379b15f3b0c87aba" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; VERSION&lt;/code&gt; for a convenient way to fail if the running Perl interpreter is too old.</source>
          <target state="translated">ドキュメントを参照してください &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; し、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; VERSION&lt;/code&gt; 実行しているPerlインタプリタが古すぎる場合に終了する便利な方法のために。</target>
        </trans-unit>
        <trans-unit id="9a9856c7ed82189e0c58b57cf7ab0022fab179c2" translate="yes" xml:space="preserve">
          <source>See the entry for &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; するエントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="579c02009e5d33672d2b3bf1f32a8aea43b4c283" translate="yes" xml:space="preserve">
          <source>See the entry on &lt;code&gt;backticks&lt;/code&gt; above.</source>
          <target state="translated">上記の &lt;code&gt;backticks&lt;/code&gt; のエントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="8cdcfdb1e496ac40c473ef1643148795b19bf7d5" translate="yes" xml:space="preserve">
          <source>See the example at &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="5c6243aa712e4e987437456b02e7925a1f94d2b3" translate="yes" xml:space="preserve">
          <source>See the example at &lt;code&gt;&lt;a href=&quot;readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="394ea296d9fea402ea28f14c1f9fbece6086398e" translate="yes" xml:space="preserve">
          <source>See the example in &lt;a href=&quot;packlist&quot;&gt;ExtUtils::Packlist&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;packlist&quot;&gt;ExtUtils :: Packlistの&lt;/a&gt;例を参照してください。</target>
        </trans-unit>
        <trans-unit id="6142ee968e835bf0e6a4b4bc0768ee08a0e5da77" translate="yes" xml:space="preserve">
          <source>See the file</source>
          <target state="translated">ファイルを見る</target>
        </trans-unit>
        <trans-unit id="10dad421044f18b7af163a82ed9974550acc8db7" translate="yes" xml:space="preserve">
          <source>See the file pod/perlport.pod for more information about the OpenVOS port of Perl.</source>
          <target state="translated">Perl の OpenVOS 移植版についての詳細は pod/perlport.pod を参照してください。</target>
        </trans-unit>
        <trans-unit id="8853d25a4754f2571518c761e9e5c75905dbead7" translate="yes" xml:space="preserve">
          <source>See the filters at the end of this documents for examples of using context information using both</source>
          <target state="translated">両方を使ったコンテキスト情報の使用例については、このドキュメントの最後にあるフィルタを参照してください。</target>
        </trans-unit>
        <trans-unit id="afde646d9a8a44c9d93270380997df97dcfabba6" translate="yes" xml:space="preserve">
          <source>See the following pages for more information:</source>
          <target state="translated">詳しくは以下のページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="feed0aa953e0b86b29a7e0e2e208f79a66c19281" translate="yes" xml:space="preserve">
          <source>See the header files and the C code in the supplied OS/2-related modules for the details on usage of these functions.</source>
          <target state="translated">これらの関数の使い方の詳細については、付属のOS/2関連モジュールのヘッダファイルとCコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="cad24f9fdd0b59fb39db9be5afe5f8508c3a09ce" translate="yes" xml:space="preserve">
          <source>See the individual methods/properties for details.</source>
          <target state="translated">詳細は各メソッド/プロパティを参照してください。</target>
        </trans-unit>
        <trans-unit id="e6fee35f7690a0f0b6ecb1890246b8a2510a2ec3" translate="yes" xml:space="preserve">
          <source>See the module &lt;a href=&quot;http://search.cpan.org/perldoc/Compress::Bzip2&quot;&gt;Compress::Bzip2&lt;/a&gt;</source>
          <target state="translated">モジュール&lt;a href=&quot;http://search.cpan.org/perldoc/Compress::Bzip2&quot;&gt;Compress :: Bzip2を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="49a35fd32da3daa48c9fe6c8672989822d967a15" translate="yes" xml:space="preserve">
          <source>See the module &lt;a href=&quot;http://search.cpan.org/perldoc/String::Approx&quot;&gt;String::Approx&lt;/a&gt; available from CPAN.</source>
          <target state="translated">CPANから入手可能な&lt;a href=&quot;http://search.cpan.org/perldoc/String::Approx&quot;&gt;String :: Approx&lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="0422f47d6a927439d2983f60fd547b2b2ad5672e" translate="yes" xml:space="preserve">
          <source>See the modules under the Solaris:: and Sun::Solaris namespaces on CPAN, see &lt;a href=&quot;http://www.cpan.org/modules/by-module/Solaris/&quot;&gt;http://www.cpan.org/modules/by-module/Solaris/&lt;/a&gt; and &lt;a href=&quot;http://www.cpan.org/modules/by-module/Sun/&quot;&gt;http://www.cpan.org/modules/by-module/Sun/&lt;/a&gt;.</source>
          <target state="translated">CPANのSolaris ::およびSun :: Solaris名前空間にあるモジュールを参照して&lt;a href=&quot;http://www.cpan.org/modules/by-module/Solaris/&quot;&gt;ください。http：&lt;/a&gt; //www.cpan.org/modules/by-module/Solaris/ および&lt;a href=&quot;http://www.cpan.org/modules/by-module/Sun/&quot;&gt;http://www.cpan.org/modules/byを&lt;/a&gt;参照してください。 -module / Sun /。</target>
        </trans-unit>
        <trans-unit id="6bb41c596a1759330b9cb513876ca708593201a0" translate="yes" xml:space="preserve">
          <source>See the note on &lt;code&gt;MAPPING&lt;/code&gt; below.</source>
          <target state="translated">以下の &lt;code&gt;MAPPING&lt;/code&gt; に関する注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="68f4783a31000cc0f3cc312dced3acc380009fdc" translate="yes" xml:space="preserve">
          <source>See the respective low-level library documentation for further details.</source>
          <target state="translated">詳細については、それぞれの低レベルライブラリのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="612405692ced11f2d636b784df0fd90038603316" translate="yes" xml:space="preserve">
          <source>See the respective math library module documentation for further details.</source>
          <target state="translated">詳細については、各数学ライブラリモジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c03cfde13d1c8612778c8b7cda8a4e02a8a5d6ea" translate="yes" xml:space="preserve">
          <source>See the section</source>
          <target state="translated">セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b55c21a2a29981505e847c69ae7d241753cd7552" translate="yes" xml:space="preserve">
          <source>See the section titled &quot;Compliance&quot; in RFC 1952 for a definition of the values used for the fields in the gzip header.</source>
          <target state="translated">gzipヘッダのフィールドに使われる値の定義については、 RFC 1952の「Compliance」というタイトルのセクションを参照のこと。</target>
        </trans-unit>
        <trans-unit id="9122e68aefefe819f538fe0c0dfb8e87eb5e7b86" translate="yes" xml:space="preserve">
          <source>See the source for Pod::Simple::RTF for an example of a formatter that uses Pod::Simple::PullParser.</source>
          <target state="translated">Pod::Simple::PullParserを使用したフォーマッタの例については、Pod::Simple::RTFのソースを参照してください。</target>
        </trans-unit>
        <trans-unit id="d787e04a99446f8085850e40f2ba5ba07770a2cd" translate="yes" xml:space="preserve">
          <source>See the source for Pod::Simple::Text for an example of using this class.</source>
          <target state="translated">このクラスの使用例については、Pod::Simple::Textのソースを参照してください。</target>
        </trans-unit>
        <trans-unit id="3c2d503a731fb8b122b64577756341a2fe8a9f91" translate="yes" xml:space="preserve">
          <source>See the source for details.</source>
          <target state="translated">詳細はソースを参照してください。</target>
        </trans-unit>
        <trans-unit id="408481221a85a1107cf74e093de1b4644532b226" translate="yes" xml:space="preserve">
          <source>See these manpages, some of which are CPAN modules: &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;, &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;, &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;, &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;, &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;, &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt;, &lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt;, &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt;, &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt;, &lt;a href=&quot;dbm_filter&quot;&gt;DBM_Filter&lt;/a&gt;, &lt;a href=&quot;dbm_filter/utf8&quot;&gt;DBM_Filter::utf8&lt;/a&gt;, &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Encode::Locale&quot;&gt;Encode::Locale&lt;/a&gt;, &lt;a href=&quot;unicode/ucd&quot;&gt;Unicode::UCD&lt;/a&gt;, &lt;a href=&quot;unicode/normalize&quot;&gt;Unicode::Normalize&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::GCString&quot;&gt;Unicode::GCString&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::LineBreak&quot;&gt;Unicode::LineBreak&lt;/a&gt;, &lt;a href=&quot;unicode/collate&quot;&gt;Unicode::Collate&lt;/a&gt;, &lt;a href=&quot;unicode/collate/locale&quot;&gt;Unicode::Collate::Locale&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Unihan&quot;&gt;Unicode::Unihan&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::CaseFold&quot;&gt;Unicode::CaseFold&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Tussle&quot;&gt;Unicode::Tussle&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Lingua::JA::Romanize::Japanese&quot;&gt;Lingua::JA::Romanize::Japanese&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Lingua::ZH::Romanize::Pinyin&quot;&gt;Lingua::ZH::Romanize::Pinyin&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Lingua::KO::Romanize::Hangul&quot;&gt;Lingua::KO::Romanize::Hangul&lt;/a&gt;.</source>
          <target state="translated">：CPANモジュールですそのうちのいくつかは、これらのmanページを参照してください&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを参照してください&lt;/a&gt;、&lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;、&lt;a href=&quot;perlre&quot;&gt;はperlre&lt;/a&gt;、&lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;、&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;、&lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt;、&lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt;、&lt;a href=&quot;perlio&quot;&gt;PerlIOを&lt;/a&gt;、&lt;a href=&quot;db_file&quot;&gt;DB_Fileは&lt;/a&gt;、&lt;a href=&quot;dbm_filter&quot;&gt;DBM_Filter&lt;/a&gt;、&lt;a href=&quot;dbm_filter/utf8&quot;&gt;DBM_Filter :: UTF8&lt;/a&gt;、&lt;a href=&quot;encode&quot;&gt;エンコード&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Encode::Locale&quot;&gt;エンコード::ロケール&lt;/a&gt;、&lt;a href=&quot;unicode/ucd&quot;&gt;ユニコード:: UCD&lt;/a&gt;、&lt;a href=&quot;unicode/normalize&quot;&gt;Unicodeを： ：Normalize&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::GCString&quot;&gt;Unicode :: GCString&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::LineBreak&quot;&gt;Unicode :: LineBreak&lt;/a&gt;、&lt;a href=&quot;unicode/collate&quot;&gt;Unicode :: Collat​​e&lt;/a&gt;、&lt;a href=&quot;unicode/collate/locale&quot;&gt;Unicode :: Collat​​e :: Locale&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Unihan&quot;&gt;ユニコード:: Unihan&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::CaseFold&quot;&gt;ユニコード::引数casefold&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Tussle&quot;&gt;ユニコード::取っ組み合い&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Lingua::JA::Romanize::Japanese&quot;&gt;リンガ:: JA :: Romanize ::日本&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Lingua::ZH::Romanize::Pinyin&quot;&gt;リンガ:: ZH :: Romanize ::ピンイン&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Lingua::KO::Romanize::Hangul&quot;&gt;リンガ:: KO :: Romanize ::ハングル&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="30650f0df9a1acd0b0652292e24337b060a25b76" translate="yes" xml:space="preserve">
          <source>See your</source>
          <target state="translated">あなたの</target>
        </trans-unit>
        <trans-unit id="e46d7c35a12113e9e7669e54efe39266a3357c57" translate="yes" xml:space="preserve">
          <source>See your native chmod(2) and stat(2) documentation for more details about the &lt;code&gt;S_*&lt;/code&gt; constants. To get status info for a symbolic link instead of the target file behind the link, use the &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;S_*&lt;/code&gt; 定数の詳細については、ネイティブのchmod（2）およびstat（2）のドキュメントを参照してください。リンクの背後にあるターゲットファイルの代わりにシンボリックリンクのステータス情報を取得するには、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="9970744d5ba8330d81e88cb8dc9f142d55054d8d" translate="yes" xml:space="preserve">
          <source>See your native chmod(2) and stat(2) documentation for more details about the &lt;code&gt;S_*&lt;/code&gt; constants. To get status info for a symbolic link instead of the target file behind the link, use the &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;S_*&lt;/code&gt; 定数の詳細については、ネイティブのchmod（2）およびstat（2）のドキュメントを参照してください。リンクの背後にあるターゲットファイルの代わりにシンボリックリンクのステータス情報を取得するには、 &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="3be2ec8135463b21af282b57ee1ce24fe06e37d5" translate="yes" xml:space="preserve">
          <source>See, the whole entry is gone!</source>
          <target state="translated">ほら、エントリーが全部無くなった!?</target>
        </trans-unit>
        <trans-unit id="1555af10085ff0ea32cf7ff9252f6ff3cf4d9e99" translate="yes" xml:space="preserve">
          <source>Seek the IO::File to position POS, relative to WHENCE:</source>
          <target state="translated">IO::FileをWHENCEからの相対的なPOSの位置にシークします。</target>
        </trans-unit>
        <trans-unit id="1d086939b65b06d9d3a44991f14621044cf912f1" translate="yes" xml:space="preserve">
          <source>Seek to a given position in the stream. Not yet supported.</source>
          <target state="translated">ストリーム内の指定された位置にシークします。まだサポートされていません。</target>
        </trans-unit>
        <trans-unit id="1dea335f8b8af18f43df2ccadf7446de12d02c86" translate="yes" xml:space="preserve">
          <source>Seeks to the beginning of the file.</source>
          <target state="translated">ファイルの先頭を探します。</target>
        </trans-unit>
        <trans-unit id="62c1916dc6ff314613f1d9b5bd5205d1a7f41ea9" translate="yes" xml:space="preserve">
          <source>Segfault in make</source>
          <target state="translated">メークのセグフォールト</target>
        </trans-unit>
        <trans-unit id="04fce5d13d8be20647c8f188f4020b39414daee7" translate="yes" xml:space="preserve">
          <source>Select a name for the module.</source>
          <target state="translated">モジュールの名前を選択します。</target>
        </trans-unit>
        <trans-unit id="b1457cb228bb4f3a070abfd3120fa19370b966d8" translate="yes" xml:space="preserve">
          <source>Select the UDP socket mechanism:</source>
          <target state="translated">UDP ソケットメカニズムを選択します。</target>
        </trans-unit>
        <trans-unit id="265fd1b21508be2f8973560ec771ad89f03bc658" translate="yes" xml:space="preserve">
          <source>Select the riscos hint file. The default answers for the rest of the questions are usually sufficient.</source>
          <target state="translated">riscosのヒントファイルを選択します。残りの問題のデフォルトの解答で通常は十分です。</target>
        </trans-unit>
        <trans-unit id="c1fac0c731922ce2c4368448cad241941c2fbd27" translate="yes" xml:space="preserve">
          <source>Select what to export.</source>
          <target state="translated">エクスポートするものを選択します。</target>
        </trans-unit>
        <trans-unit id="81bbdb3cd17072c5ce722e1560232e797f8c121a" translate="yes" xml:space="preserve">
          <source>SelectSaver</source>
          <target state="translated">SelectSaver</target>
        </trans-unit>
        <trans-unit id="229070ca5374c2a9cb038771a48f86c718c9d853" translate="yes" xml:space="preserve">
          <source>SelectSaver - save and restore selected file handle</source>
          <target state="translated">SelectSaver-選択したファイルハンドルの保存と復元</target>
        </trans-unit>
        <trans-unit id="5c943420278d1c8954b1c5773786bea97f613852" translate="yes" xml:space="preserve">
          <source>Selecting What to Export</source>
          <target state="translated">エクスポートするものを選択する</target>
        </trans-unit>
        <trans-unit id="b17c7a1c4a92c96c8491e85a0462c238e3896397" translate="yes" xml:space="preserve">
          <source>Selective install</source>
          <target state="translated">選択的インストール</target>
        </trans-unit>
        <trans-unit id="84aa6bd605893b309ed096501a015b4639a428b5" translate="yes" xml:space="preserve">
          <source>Selects which scheme is to be used for conversion. Available schemes are as follows:</source>
          <target state="translated">変換に使用するスキームを選択します。利用可能なスキームは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="add69b113685f74f15320b557f83862e13c1544e" translate="yes" xml:space="preserve">
          <source>Self explanatory.</source>
          <target state="translated">自己説明です。</target>
        </trans-unit>
        <trans-unit id="54e1d154f8f2875647f17eba14956a859053e7ab" translate="yes" xml:space="preserve">
          <source>SelfLoader</source>
          <target state="translated">SelfLoader</target>
        </trans-unit>
        <trans-unit id="d8cab5e5bb875b977b911e8babfcf26bd70b64fd" translate="yes" xml:space="preserve">
          <source>SelfLoader - load functions only on demand</source>
          <target state="translated">SelfLoader-オンデマンドで機能をロード</target>
        </trans-unit>
        <trans-unit id="e773e20132ac6e7474cba68c63018cfb17743647" translate="yes" xml:space="preserve">
          <source>SelfLoader and AutoLoader</source>
          <target state="translated">セルフローダーとオートローダー</target>
        </trans-unit>
        <trans-unit id="f310694fd37172c1158ec0f92581c2541456029e" translate="yes" xml:space="preserve">
          <source>SelfLoader autoloading</source>
          <target state="translated">セルフローダーのオートローディング</target>
        </trans-unit>
        <trans-unit id="f3e306caeca3c8bc4157585e84e5dc7d26a4f2b5" translate="yes" xml:space="preserve">
          <source>Semaphores are a kind of generic locking mechanism. In their most basic form, they behave very much like lockable scalars, except that they can't hold data, and that they must be explicitly unlocked. In their advanced form, they act like a kind of counter, and can allow multiple threads to have the</source>
          <target state="translated">セマフォは一般的なロック機構の一種です。最も基本的な形では、データを保持できないことと、明示的にロックを解除しなければならないことを除けば、ロック可能なスカラーと非常によく似た振る舞いをします。高度な形式では、セマフォは一種のカウンタのように振る舞い、複数のスレッドで</target>
        </trans-unit>
        <trans-unit id="8699ad0a8f54bbc917e3bb45de5d78b0cf17084b" translate="yes" xml:space="preserve">
          <source>Semaphores created by &lt;a href=&quot;semaphore&quot;&gt;Thread::Semaphore&lt;/a&gt; can be used in both threaded and non-threaded applications. This allows you to write modules and packages that potentially make use of semaphores, and that will function in either environment.</source>
          <target state="translated">&lt;a href=&quot;semaphore&quot;&gt;Thread :: Semaphore&lt;/a&gt;によって作成されたセマフォは、スレッド化されたアプリケーションとスレッド化されていないアプリケーションの両方で使用できます。これにより、セマフォを使用する可能性があり、どちらの環境でも機能するモジュールとパッケージを作成できます。</target>
        </trans-unit>
        <trans-unit id="3c22a014e16e0edc6a027ed2ae5d6eec415fc366" translate="yes" xml:space="preserve">
          <source>Semaphores don't limit their values to zero and one, so they can be used to control access to some resource that there may be more than one of (e.g., filehandles). Increment and decrement amounts aren't fixed at one either, so threads can reserve or return multiple resources at once.</source>
          <target state="translated">セマフォはその値を0と1に限定しないので、複数存在する可能性のあるリソース(例えばファイルハンドル)へのアクセスを制御するために使用することができます。インクリメントやデクリメントの量は1に固定されていないので、スレッドは一度に複数のリソースを予約したり返したりすることができます。</target>
        </trans-unit>
        <trans-unit id="d20dc8c89f291c0d4e65def7764a4fc1152824c3" translate="yes" xml:space="preserve">
          <source>Semaphores have two methods, &lt;code&gt;down()&lt;/code&gt; and &lt;code&gt;up()&lt;/code&gt; : &lt;code&gt;down()&lt;/code&gt; decrements the resource count, while &lt;code&gt;up()&lt;/code&gt; increments it. Calls to &lt;code&gt;down()&lt;/code&gt; will block if the semaphore's current count would decrement below zero. This program gives a quick demonstration:</source>
          <target state="translated">セマフォは、2つのメソッドを持って、 &lt;code&gt;down()&lt;/code&gt; および &lt;code&gt;up()&lt;/code&gt; ： &lt;code&gt;down()&lt;/code&gt; しばらく、資源数をデクリメント &lt;code&gt;up()&lt;/code&gt; それが増加します。 &lt;code&gt;down()&lt;/code&gt; の呼び出しは、セマフォの現在のカウントが0未満に減少する場合にブロックします。このプログラムは簡単なデモンストレーションを提供します：</target>
        </trans-unit>
        <trans-unit id="796b9a2e2e39d11dbfa1741282a431155e4bbeba" translate="yes" xml:space="preserve">
          <source>Semaphores provide a mechanism to regulate access to resources. Unlike locks, semaphores aren't tied to particular scalars, and so may be used to control access to anything you care to use them for.</source>
          <target state="translated">セマフォはリソースへのアクセスを制御するメカニズムを提供します。ロックとは異なり、セマフォは特定のスカラーに縛られていないので、セマフォを使って何でもアクセスを制御することができます。</target>
        </trans-unit>
        <trans-unit id="356e03859529b6fe855b8990f468b4b738134047" translate="yes" xml:space="preserve">
          <source>Semaphores with counters greater than one are also useful for establishing quotas. Say, for example, that you have a number of threads that can do I/O at once. You don't want all the threads reading or writing at once though, since that can potentially swamp your I/O channels, or deplete your process's quota of filehandles. You can use a semaphore initialized to the number of concurrent I/O requests (or open files) that you want at any one time, and have your threads quietly block and unblock themselves.</source>
          <target state="translated">1よりも大きなカウンタを持つセマフォは、クォータを確立するのにも便利です。例えば、一度にI/Oを行うことができるスレッドがいくつかあるとします。しかし、すべてのスレッドを一度に読み書きしたいわけではありません。一度に必要な同時I/Oリクエスト(またはオープンファイル)の数に初期化されたセマフォを使用して、スレッドを静かにブロックしたり、ブロックを解除したりすることができます。</target>
        </trans-unit>
        <trans-unit id="d787d045573b4c994cdbd4823b535d6dabe2c620" translate="yes" xml:space="preserve">
          <source>Semaphores: Synchronizing Data Access</source>
          <target state="translated">セマフォ データアクセスの同期化</target>
        </trans-unit>
        <trans-unit id="a05ee7033ccef1b142b6235829e01c52062ee7b7" translate="yes" xml:space="preserve">
          <source>Semi-list for executables.</source>
          <target state="translated">実行可能ファイルのセミリスト。</target>
        </trans-unit>
        <trans-unit id="630d774f800ee1cd20d1064679a19e8edab879c3" translate="yes" xml:space="preserve">
          <source>Semicolon omitted in &quot;short&quot; one-line BLOCK.</source>
          <target state="translated">short」1行BLOCKでセミコロン省略。</target>
        </trans-unit>
        <trans-unit id="ce25bcbf0fddbfafcbbf78d8ff1922c5ddee8929" translate="yes" xml:space="preserve">
          <source>Semicolons are required after all simple statements in Perl (except at the end of a block). Newline is not a statement delimiter.</source>
          <target state="translated">セミコロンはPerlのすべての単純な文の後に必要です(ブロックの最後を除く)。改行は文の区切り文字ではありません。</target>
        </trans-unit>
        <trans-unit id="da89265fe8629af6dc7f2d520015f68ac5895b1b" translate="yes" xml:space="preserve">
          <source>Send a &lt;code&gt;PORT&lt;/code&gt; (IPv4) or &lt;code&gt;EPRT&lt;/code&gt; (IPv6) command to the server. If &lt;code&gt;PORT&lt;/code&gt; is specified then it is sent to the server. If not, then a listen socket is created and the correct information sent to the server.</source>
          <target state="translated">送信 &lt;code&gt;PORT&lt;/code&gt; （IPv4）のか、 &lt;code&gt;EPRT&lt;/code&gt; サーバに（IPv6）のコマンドを使用します。場合 &lt;code&gt;PORT&lt;/code&gt; が指定されている、それがサーバーに送信されます。そうでない場合は、待機ソケットが作成され、正しい情報がサーバーに送信されます。</target>
        </trans-unit>
        <trans-unit id="52080e6741be66508f4cfdc06a392762420be982" translate="yes" xml:space="preserve">
          <source>Send a SITE command to the remote server and wait for a response.</source>
          <target state="translated">リモートサーバにSITEコマンドを送信し、応答を待ちます。</target>
        </trans-unit>
        <trans-unit id="bbe6336423849caa2042b02152be321aae6b5054" translate="yes" xml:space="preserve">
          <source>Send a command to the command server. All arguments are first joined with a space character and CRLF is appended, this string is then sent to the command server.</source>
          <target state="translated">コマンドをコマンドサーバーに送信します。すべての引数は最初にスペース文字で結合され、CRLFが付加され、この文字列がコマンドサーバに送信されます。</target>
        </trans-unit>
        <trans-unit id="13c260a730e1509d61e6de1590f9e61836ad529f" translate="yes" xml:space="preserve">
          <source>Send a command, that Net::FTP does not directly support, to the remote server and wait for a response.</source>
          <target state="translated">Net::FTP が直接サポートしていないコマンドをリモートサーバに送信し、応答を待ちます。</target>
        </trans-unit>
        <trans-unit id="06c1dceebd9dfcae281255787fb6713160305097" translate="yes" xml:space="preserve">
          <source>Send a request to the server to delete &lt;code&gt;FILENAME&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;FILENAME&lt;/code&gt; を削除するリクエストをサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="f6d5a327a2f39dffcf23330396f1cf4deb1c5ff5" translate="yes" xml:space="preserve">
          <source>Send a thank-you note instead of a bug report.</source>
          <target state="translated">バグ報告の代わりにお礼の手紙を送りましょう。</target>
        </trans-unit>
        <trans-unit id="1bf932ad3989c17c94151811580a197344612caa" translate="yes" xml:space="preserve">
          <source>Send an &lt;code&gt;NLST&lt;/code&gt; command to the server, with an optional parameter.</source>
          <target state="translated">オプションのパラメーターを指定して、 &lt;code&gt;NLST&lt;/code&gt; コマンドをサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="6b3bf632e8ef2f9feae566ac2e7c3497f279404b" translate="yes" xml:space="preserve">
          <source>Send both the USER and PASS commands. If &lt;code&gt;PASS&lt;/code&gt; is not given the &lt;code&gt;Net::POP3&lt;/code&gt; uses &lt;code&gt;Net::Netrc&lt;/code&gt; to lookup the password using the host and username. If the username is not specified then the current user name will be used.</source>
          <target state="translated">USERコマンドとPASSコマンドの両方を送信します。 &lt;code&gt;PASS&lt;/code&gt; が指定されていない場合、 &lt;code&gt;Net::POP3&lt;/code&gt; は &lt;code&gt;Net::Netrc&lt;/code&gt; を使用して、ホストとユーザー名を使用してパスワードを検索します。ユーザー名が指定されていない場合は、現在のユーザー名が使用されます。</target>
        </trans-unit>
        <trans-unit id="0fb10510d35b8d68dbce68dcecc3a46a06267b1b" translate="yes" xml:space="preserve">
          <source>Send bug reports via &lt;a href=&quot;http://rt.cpan.org/&quot;&gt;http://rt.cpan.org/&lt;/a&gt;. Please send your generated Makefile along with your report.</source>
          <target state="translated">&lt;a href=&quot;http://rt.cpan.org/&quot;&gt;http://rt.cpan.org/&lt;/a&gt;からバグレポートを送信します。作成したMakefileをレポートと一緒に送信してください。</target>
        </trans-unit>
        <trans-unit id="7ac564802d486774a9892c6aff1b1c0a2f8cafee" translate="yes" xml:space="preserve">
          <source>Send data to the remote server without performing any conversions. &lt;code&gt;DATA&lt;/code&gt; is a scalar.</source>
          <target state="translated">変換を実行せずにデータをリモートサーバーに送信します。 &lt;code&gt;DATA&lt;/code&gt; はスカラーです。</target>
        </trans-unit>
        <trans-unit id="57e97cdb6dd06bb0868e8cb9640a99325aaa18ea" translate="yes" xml:space="preserve">
          <source>Send data to the remote server, converting LF to CRLF. Any line starting with a '.' will be prefixed with another '.'. &lt;code&gt;DATA&lt;/code&gt; may be an array or a reference to an array.</source>
          <target state="translated">データをリモートサーバーに送信し、LFをCRLFに変換します。「。」で始まる行 別の '。'が前に付けられます。 &lt;code&gt;DATA&lt;/code&gt; は、配列または配列への参照です。</target>
        </trans-unit>
        <trans-unit id="cd25761fcb28fefeb75b3177743c9ba470230188" translate="yes" xml:space="preserve">
          <source>Send error messages about invalid POD to standard error instead of appending a POD ERRORS section to the generated *roff output. This is equivalent to setting &lt;code&gt;errors&lt;/code&gt; to &lt;code&gt;stderr&lt;/code&gt; if &lt;code&gt;errors&lt;/code&gt; is not already set. It is supported for backward compatibility.</source>
          <target state="translated">生成された* roff出力にPOD ERRORSセクションを追加する代わりに、無効なPODに関するエラーメッセージを標準エラーに送信します。これは、 &lt;code&gt;errors&lt;/code&gt; がまだ設定されていない場合にエラーを &lt;code&gt;stderr&lt;/code&gt; に設定 &lt;code&gt;errors&lt;/code&gt; ことと同じです。下位互換性のためにサポートされています。</target>
        </trans-unit>
        <trans-unit id="83176277760067307722b45efeb2403c4d726af3" translate="yes" xml:space="preserve">
          <source>Send error messages about invalid POD to standard error instead of appending a POD ERRORS section to the generated output. This is equivalent to setting &lt;code&gt;errors&lt;/code&gt; to &lt;code&gt;stderr&lt;/code&gt; if &lt;code&gt;errors&lt;/code&gt; is not already set. It is supported for backward compatibility.</source>
          <target state="translated">生成された出力にPOD ERRORSセクションを追加する代わりに、無効なPODに関するエラーメッセージを標準エラーに送信します。これは、 &lt;code&gt;errors&lt;/code&gt; がまだ設定されていない場合にエラーを &lt;code&gt;stderr&lt;/code&gt; に設定 &lt;code&gt;errors&lt;/code&gt; ことと同じです。下位互換性のためにサポートされています。</target>
        </trans-unit>
        <trans-unit id="175242b5e5a3a51babac9f6fd0141ab1ff1d3b80" translate="yes" xml:space="preserve">
          <source>Send messages to a remote host using the TCP socket mechanism:</source>
          <target state="translated">TCP ソケットメカニズムを使用して、リモートホストにメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="4b352aef54374a51117ddaee7478eb1aed5c0620" translate="yes" xml:space="preserve">
          <source>Send messages using the TCP socket mechanism on a custom port:</source>
          <target state="translated">カスタムポートでTCPソケットメカニズムを使用してメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="95879d49e234e123b226b1861b81ec39f64c5abc" translate="yes" xml:space="preserve">
          <source>Send patches and ideas to &lt;code&gt;makemaker@perl.org&lt;/code&gt; .</source>
          <target state="translated">パッチとアイデアを &lt;code&gt;makemaker@perl.org&lt;/code&gt; に送信してください。</target>
        </trans-unit>
        <trans-unit id="2c91135e737ed31a349e0756df108a779ae22af2" translate="yes" xml:space="preserve">
          <source>Send the PASS command. Returns the number of messages in the mailbox.</source>
          <target state="translated">PASS コマンドを送信します。メールボックス内のメッセージ数を返します。</target>
        </trans-unit>
        <trans-unit id="a5a5c4bc54dbfee7d7df6b13afe8690b267ed309" translate="yes" xml:space="preserve">
          <source>Send the QUIT command to the remote FTP server and close the socket connection.</source>
          <target state="translated">リモートFTPサーバにQUITコマンドを送信し、ソケット接続を終了します。</target>
        </trans-unit>
        <trans-unit id="6ec736fe911616cab9d412d30eff7201ebe79ae5" translate="yes" xml:space="preserve">
          <source>Send the QUIT command to the remote SMTP server and close the socket connection.</source>
          <target state="translated">リモートSMTPサーバにQUITコマンドを送信し、ソケット接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="8bd48cd01789052a1aae4608930df1802a9a35fb" translate="yes" xml:space="preserve">
          <source>Send the USER command.</source>
          <target state="translated">USERコマンドを送信します。</target>
        </trans-unit>
        <trans-unit id="a5a01f9b9fd642efa2608d22bc54a63404559f83" translate="yes" xml:space="preserve">
          <source>Send the appropriate command to the server MAIL, SEND, SOML or SAML. &lt;code&gt;ADDRESS&lt;/code&gt; is the address of the sender. This initiates the sending of a message. The method &lt;code&gt;recipient&lt;/code&gt; should be called for each address that the message is to be sent to.</source>
          <target state="translated">適切なコマンドをサーバーのMAIL、SEND、SOML、またはSAMLに送信します。 &lt;code&gt;ADDRESS&lt;/code&gt; は送信者のアドレスです。これにより、メッセージの送信が開始されます。メソッドの &lt;code&gt;recipient&lt;/code&gt; は、メッセージの送信先のアドレスごとに呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ab136dc2c0bcc386b29481c5eb4c91db18355fa1" translate="yes" xml:space="preserve">
          <source>Send without asking for confirmation.</source>
          <target state="translated">確認を求めずに送信する。</target>
        </trans-unit>
        <trans-unit id="76680f33d63f4baf96426d9b02d94c58ab1ea9ad" translate="yes" xml:space="preserve">
          <source>Sending a signal to a negative process ID means that you send the signal to the entire Unix process group. This code sends a hang-up signal to all processes in the current process group, and also sets $SIG{HUP} to &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; so it doesn't kill itself:</source>
          <target state="translated">負のプロセスIDにシグナルを送信するということは、シグナルをUnixプロセスグループ全体に送信することを意味します。このコードは、現在のプロセスグループ内のすべてのプロセスにハングアップシグナルを送信し、$ SIG {HUP}を &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; に設定して、自分自身を殺さないようにします。</target>
        </trans-unit>
        <trans-unit id="9a654ee6f8d01c324fc62fd6a540d937cf4a0a44" translate="yes" xml:space="preserve">
          <source>Sending a signal to a terminated/finished thread is ignored.</source>
          <target state="translated">終了/終了したスレッドへの信号の送信は無視されます。</target>
        </trans-unit>
        <trans-unit id="1da6243eb6698a2e9c5ba8aed1445bba73f250b4" translate="yes" xml:space="preserve">
          <source>Sends a message on a socket. Attempts to send the scalar MSG to the SOCKET filehandle. Takes the same flags as the system call of the same name. On unconnected sockets, you must specify a destination to</source>
          <target state="translated">ソケットにメッセージを送信する。スカラーMSGをSOCKETファイルハンドルに送信しようとする。同名のシステムコールと同じフラグを取る。接続されていないソケットでは、送信先を指定して</target>
        </trans-unit>
        <trans-unit id="771e146572af3680e3f5745ae30f4777037832e1" translate="yes" xml:space="preserve">
          <source>Sends a signal to a list of processes. Returns the number of arguments that were successfully used to signal (which is not necessarily the same as the number of processes actually killed, e.g. where a process group is killed).</source>
          <target state="translated">プロセスのリストにシグナルを送信します。シグナルに正常に使用された引数の数を返します (これは、プロセスグループが殺された場合など、実際に殺されたプロセスの数と必ずしも同じではありません)。</target>
        </trans-unit>
        <trans-unit id="e0bff1132f5af9057b37aaabd1421549847a04df" translate="yes" xml:space="preserve">
          <source>Sends the specified signal to the current process. See also &lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt; and the &lt;code&gt;$$&lt;/code&gt; in &lt;a href=&quot;perlvar#%24PID&quot;&gt;$PID in perlvar&lt;/a&gt;.</source>
          <target state="translated">指定されたシグナルを現在のプロセスに送信します。参照して&lt;a href=&quot;functions/kill&quot;&gt;殺す&lt;/a&gt;と &lt;code&gt;$$&lt;/code&gt; で&lt;a href=&quot;perlvar#%24PID&quot;&gt;はperlvarで$ PID&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="15f74f69cd66e334277cea94fbbb2c2fdda68097" translate="yes" xml:space="preserve">
          <source>Sends the specified signal to the thread. Signal names and (positive) signal numbers are the same as those supported by &lt;a href=&quot;functions/kill&quot;&gt;kill SIGNAL, LIST&lt;/a&gt;. For example, 'SIGTERM', 'TERM' and (depending on the OS) 15 are all valid arguments to &lt;code&gt;-&amp;gt;kill()&lt;/code&gt; .</source>
          <target state="translated">指定されたシグナルをスレッドに送信します。シグナル名と（正の）シグナル番号は、&lt;a href=&quot;functions/kill&quot;&gt;kill SIGNAL、LISTで&lt;/a&gt;サポートされているものと同じです。たとえば、 'SIGTERM'、 'TERM'および（OSによって異なります）15はすべて &lt;code&gt;-&amp;gt;kill()&lt;/code&gt; の有効な引数です。</target>
        </trans-unit>
        <trans-unit id="a449a6b7439f2abf27299f47fccad5c63b9cd342" translate="yes" xml:space="preserve">
          <source>Separate functionality from output</source>
          <target state="translated">出力と機能を分離</target>
        </trans-unit>
        <trans-unit id="d02cc80e6bf2d5cc54bd43f2d3b385d1316c539b" translate="yes" xml:space="preserve">
          <source>Separated from BigInt and shaped API with the help of John Peacock.</source>
          <target state="translated">BigIntから分離し、John Peacockの助けを借りてAPIを整形。</target>
        </trans-unit>
        <trans-unit id="88aee4aceed86d713a450288b36a045eaad93f77" translate="yes" xml:space="preserve">
          <source>Separating the loading of Filter::Simple:</source>
          <target state="translated">Filter::Simpleの読み込みを分離する。</target>
        </trans-unit>
        <trans-unit id="96c4b99bf2dac21233a650fb9e4225f35f064f66" translate="yes" xml:space="preserve">
          <source>Separators accepted are \ and /.</source>
          <target state="translated">認められた分離器は、「\」と「/」です。</target>
        </trans-unit>
        <trans-unit id="853cedcb493818fb7dd7ff54631eefab9d7c736c" translate="yes" xml:space="preserve">
          <source>September 8th, 1994; by Tim Bunce.</source>
          <target state="translated">1994年9月8日、ティム・バンセ著。</target>
        </trans-unit>
        <trans-unit id="f9dd9bb04503c5d3dd3e8ab5f681af6d1c56048b" translate="yes" xml:space="preserve">
          <source>September, 1999; by Barrie Slaymaker: math fixes and accuracy and efficiency tweaks. Added cmpthese(). A result is now returned from timethese(). Exposed countit() (was runfor()).</source>
          <target state="translated">1999 年 9 月;Barrie Slaymaker による数学の修正と精度と効率の微調整。cmpthese()を追加。timethese()から結果が返されるようになりました。countit()を公開しました (以前は runfor()でした)。</target>
        </trans-unit>
        <trans-unit id="a1a0fbeb2a4b06770650abeca286ce50260e6d9c" translate="yes" xml:space="preserve">
          <source>September, 2002; by Jarkko Hietaniemi: add ':hireswallclock' special tag.</source>
          <target state="translated">2002年9月;by Jarkko Hietaniemi:':hireswallclock' 特別タグを追加。</target>
        </trans-unit>
        <trans-unit id="88ae5be2d6d888bb16dff39911d6e3067f36196d" translate="yes" xml:space="preserve">
          <source>Sequence numbers representing the scope within which a lexical is visible. Meaningless if PADNAMEt_OUTER is set.</source>
          <target state="translated">レキシカルが見える範囲を表すシーケンス番号。PADNAMEt_OUTERが設定されている場合は無意味。</target>
        </trans-unit>
        <trans-unit id="544f380bfe8a0f67f6564420a0e87cb049e06041" translate="yes" xml:space="preserve">
          <source>Serialization of CODE references and deserialization in a safe compartment:</source>
          <target state="translated">CODE参照のシリアライズと安全なコンパートメントでの脱シリアライズ。</target>
        </trans-unit>
        <trans-unit id="8a2b4a973c93275f52c99996b779e6d6d379919c" translate="yes" xml:space="preserve">
          <source>Seriously, you can't if they are Unix password files--the Unix password system employs one-way encryption. It's more like hashing than encryption. The best you can do is check whether something else hashes to the same string. You can't turn a hash back into the original string. Programs like Crack can forcibly (and intelligently) try to guess passwords, but don't (can't) guarantee quick success.</source>
          <target state="translated">真面目な話、それがUnixのパスワードファイルなら無理です。Unixのパスワードシステムは一方通行の暗号化を採用しています。Unix のパスワードシステムは一方通行の暗号化を採用しています。 暗号化というよりもハッシュ化のようなものです。あなたができる最善の方法は、他の何かが同じ文字列をハッシュしていないかどうかを チェックすることです。ハッシュを元の文字列に戻すことはできません。Crack のようなプログラムは強制的に (そして知的に)パスワードを推測しようとすることができますが、迅速な成功を保証することはできません (できません)。</target>
        </trans-unit>
        <trans-unit id="4f13fa1c7820625cf04d4c7f1c83dd6398d904f3" translate="yes" xml:space="preserve">
          <source>Server and Daemon Utilities</source>
          <target state="translated">サーバーとデーモンのユーティリティ</target>
        </trans-unit>
        <trans-unit id="ab921e03df699faf948bd826b1cb601ef928435c" translate="yes" xml:space="preserve">
          <source>Set $x to the next bigger integer value (e.g. truncate the number to integer and then increment it by one).</source>
          <target state="translated">x を次の大きな整数値に設定します (例:数値を整数に切り捨ててから 1 つ増やす)。</target>
        </trans-unit>
        <trans-unit id="fb5e64e9563743dd7dba5cbafd5756a884f0ce62" translate="yes" xml:space="preserve">
          <source>Set $x to the remainder of the division of $x by $y.</source>
          <target state="translated">xを$yで割った余りに$xをセットします。</target>
        </trans-unit>
        <trans-unit id="f0f87e0ec5d1b57769b831155b30feea6695fe68" translate="yes" xml:space="preserve">
          <source>Set (if argument specified) and retrieve the canonical name of POD as found in the &lt;code&gt;=head1 NAME&lt;/code&gt; section.</source>
          <target state="translated">（引数が指定されている場合）設定し、 &lt;code&gt;=head1 NAME&lt;/code&gt; セクションにあるPODの正規名を取得します。</target>
        </trans-unit>
        <trans-unit id="6f913eab1f09444d6746c0c8ee0da1d3118faf54" translate="yes" xml:space="preserve">
          <source>Set (if argument specified) and retrieve the number of errors found.</source>
          <target state="translated">設定(引数が指定されている場合)して、見つかったエラーの数を取得します。</target>
        </trans-unit>
        <trans-unit id="555abf19864aa59ef436a0bb073b4b9696ad43e3" translate="yes" xml:space="preserve">
          <source>Set (if argument specified) and retrieve the number of warnings found.</source>
          <target state="translated">設定(引数が指定されている場合)して、見つかった警告の数を取得します。</target>
        </trans-unit>
        <trans-unit id="c8c804eb9b30a04c998d826d31522b856640bf5a" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;PERL_SH_DIR&lt;/code&gt; (see &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;) if you move</source>
          <target state="translated">セット &lt;code&gt;PERL_SH_DIR&lt;/code&gt; （参照&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIRを&lt;/a&gt;）あなたが移動した場合</target>
        </trans-unit>
        <trans-unit id="d82cba9bbef0466d60c9badd40cd24deeb77bc34" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at first line of subroutine after it is compiled.</source>
          <target state="translated">コンパイル後のサブルーチンの1行目にブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="8000c21d5f6a0e70714e65dc08afbb6d1aa48fad" translate="yes" xml:space="preserve">
          <source>Set a breakpoint before the first executed line of the</source>
          <target state="translated">の最初の実行行の前にブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="cea53470d6bac6053a0de5a61d3cc4e2c70616d9" translate="yes" xml:space="preserve">
          <source>Set a breakpoint before the first line of the named subroutine.</source>
          <target state="translated">指定したサブルーチンの最初の行の前にブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="5638a132c6c8ee5427997acfb725cf55f691b9cf" translate="yes" xml:space="preserve">
          <source>Set a breakpoint before the given line in a (possibly different) file. If a condition is specified, it's evaluated each time the statement is reached: a breakpoint is taken only if the condition is true. Breakpoints may only be set on lines that begin an executable statement. Conditions don't use &lt;code&gt;if&lt;/code&gt; :</source>
          <target state="translated">（場合によっては異なる）ファイル内の指定された行の前にブレークポイントを設定します。条件が指定されている場合、ステートメントに到達するたびに評価されます。条件がtrueの場合にのみブレークポイントが取得されます。ブレークポイントは、実行可能ステートメントを開始する行にのみ設定できます。次の &lt;code&gt;if&lt;/code&gt; 条件は使用されません。</target>
        </trans-unit>
        <trans-unit id="fe3cd72abb20a5167109bc8fe1d44e573a5fe7d3" translate="yes" xml:space="preserve">
          <source>Set a breakpoint before the given line. If a condition is specified, it's evaluated each time the statement is reached: a breakpoint is taken only if the condition is true. Breakpoints may only be set on lines that begin an executable statement. Conditions don't use &lt;code&gt;if&lt;/code&gt; :</source>
          <target state="translated">指定された行の前にブレークポイントを設定します。条件が指定されている場合、ステートメントに到達するたびに評価されます。条件がtrueの場合にのみブレークポイントが取得されます。ブレークポイントは、実行可能ステートメントを開始する行にのみ設定できます。次の &lt;code&gt;if&lt;/code&gt; 条件は使用されません。</target>
        </trans-unit>
        <trans-unit id="ff0e698d1dcc0f8a798426c3c9fbf8e2d66e67f7" translate="yes" xml:space="preserve">
          <source>Set a default title for the page if no title can be determined from the content. The value of this string should already be &amp;amp;-escaped.</source>
          <target state="translated">コンテンツからタイトルを決定できない場合は、ページのデフォルトのタイトルを設定します。この文字列の値は、すでにエスケープされているはずです。</target>
        </trans-unit>
        <trans-unit id="f2616e97365cb7f6b0e4603f26d96fcf376c23f0" translate="yes" xml:space="preserve">
          <source>Set a member of the XOP structure.</source>
          <target state="translated">XOP構造体のメンバを設定します。</target>
        </trans-unit>
        <trans-unit id="dc9f75b0aa359534af415de26967ce708c0fc394" translate="yes" xml:space="preserve">
          <source>Set a string identifying the user's account.</source>
          <target state="translated">ユーザーのアカウントを識別する文字列を設定します。</target>
        </trans-unit>
        <trans-unit id="fe86334e2d278dfbdcc3fb8bdb35ba9ec2e9c5fc" translate="yes" xml:space="preserve">
          <source>Set a value in the &lt;code&gt;c_cc&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object. The &lt;code&gt;c_cc&lt;/code&gt; field is an array so an index must be specified.</source>
          <target state="translated">&lt;code&gt;termios&lt;/code&gt; オブジェクトの &lt;code&gt;c_cc&lt;/code&gt; フィールドに値を設定します。 &lt;code&gt;c_cc&lt;/code&gt; インデックスを指定する必要がありますので、フィールドは配列です。</target>
        </trans-unit>
        <trans-unit id="d5be582c93072a29a50a70d51245fdd965d5a20c" translate="yes" xml:space="preserve">
          <source>Set an action (Perl command) to happen after the prompt when you've just given a command to return to executing the script. A multi-line command may be entered by backslashing the newlines (we bet you couldn't have guessed this by now).</source>
          <target state="translated">プロンプトの後にスクリプトの実行に戻るためのコマンドを入力したときのアクション(Perlコマンド)を設定します。複数行のコマンドは、バックスラッシュで改行することで入力することができます (これは今までに想像できなかったでしょう)。</target>
        </trans-unit>
        <trans-unit id="0fc012651b8b4c32b0fb08830c02802ae741b971" translate="yes" xml:space="preserve">
          <source>Set an action (Perl command) to happen before every debugger prompt. A multi-line command may be entered by backslashing the newlines.</source>
          <target state="translated">すべてのデバッガ・プロンプトの前に発生するアクション (Perl コマンド)を設定します。複数行のコマンドは、バックスラッシュで改行して入力することができます。</target>
        </trans-unit>
        <trans-unit id="eadb053e8ef1742f83d58cfc846967936fb3e20e" translate="yes" xml:space="preserve">
          <source>Set an action (debugger command) to happen before every debugger prompt. A multi-line command may be entered in the customary fashion.</source>
          <target state="translated">すべてのデバッガ・プロンプトの前に発生するアクション (デバッガ・コマンド)を設定します。複数行のコマンドを慣習的な方法で入力することができます。</target>
        </trans-unit>
        <trans-unit id="ffa1676f766d51de518d327212cbb03953035c46" translate="yes" xml:space="preserve">
          <source>Set an action to be done before the line is executed. If</source>
          <target state="translated">行が実行される前に行うアクションを設定します。もし</target>
        </trans-unit>
        <trans-unit id="8ff28a72a57699005a808bb50fea4029f88ce5a2" translate="yes" xml:space="preserve">
          <source>Set an entry in the BHK structure, and set the flags to indicate it is valid.</source>
          <target state="translated">BHK 構造体のエントリを設定し、それが有効であることを示すフラグを設定します。</target>
        </trans-unit>
        <trans-unit id="1f7f888f25e207f269d2077b56bacc68bd53447f" translate="yes" xml:space="preserve">
          <source>Set and/or get the current group. If &lt;code&gt;GROUP&lt;/code&gt; is not given then information is returned on the current group.</source>
          <target state="translated">現在のグループを設定または取得します。 &lt;code&gt;GROUP&lt;/code&gt; が指定されていない場合、現在のグループに関する情報が返されます。</target>
        </trans-unit>
        <trans-unit id="f8abe979d3cfc9431b63ee219fc5e8fd8f6d7c81" translate="yes" xml:space="preserve">
          <source>Set arguments that have not been provided to the default</source>
          <target state="translated">デフォルトの</target>
        </trans-unit>
        <trans-unit id="258050c4ed0fa2eef9213ce0f50db3368b280502" translate="yes" xml:space="preserve">
          <source>Set attributes immediately for stdout.</source>
          <target state="translated">stdoutに直ちに属性を設定します。</target>
        </trans-unit>
        <trans-unit id="b1478e96d18bd7e3396a6676029248e5b136b9cf" translate="yes" xml:space="preserve">
          <source>Set current value of extended library search path. If &lt;code&gt;type&lt;/code&gt; is present and positive, works with &amp;lt;END_LIBPATH&amp;gt;, if negative, works with &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; , otherwise with &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; .</source>
          <target state="translated">拡張ライブラリ検索パスの現在の値を設定します。 &lt;code&gt;type&lt;/code&gt; が存在し、正の場合は&amp;lt;END_LIBPATH&amp;gt;で機能し、負の場合は &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; で機能し、それ以外の場合は &lt;code&gt;BEGIN_LIBPATH&lt;/code&gt; で機能します。</target>
        </trans-unit>
        <trans-unit id="ee9c6ef001c20cf084c8558f1d4444e36b18509a" translate="yes" xml:space="preserve">
          <source>Set default PerlIO layers for input and output</source>
          <target state="translated">入力と出力にデフォルトのPerlIOレイヤーを設定</target>
        </trans-unit>
        <trans-unit id="68053c6dea9587ed3e9809ad25350441927ee7ba" translate="yes" xml:space="preserve">
          <source>Set each listed Boolean option to the value &lt;code&gt;1&lt;/code&gt; .</source>
          <target state="translated">リストされている各ブール型オプションを値 &lt;code&gt;1&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="34bbdb6a82240469f9ad8d2d9feb42cd1e0de42e" translate="yes" xml:space="preserve">
          <source>Set if the pattern contain eval-groups, such as &lt;code&gt;(?{ code })&lt;/code&gt; and &lt;code&gt;(??{ code })&lt;/code&gt; .</source>
          <target state="translated">パターンに &lt;code&gt;(?{ code })&lt;/code&gt; や &lt;code&gt;(??{ code })&lt;/code&gt; などの評価グループが含まれる場合に設定します。</target>
        </trans-unit>
        <trans-unit id="4442299e6a1006852000da4e91e1acbc38c80ee5" translate="yes" xml:space="preserve">
          <source>Set if the pattern contains &lt;code&gt;\G&lt;/code&gt; .</source>
          <target state="translated">パターンに &lt;code&gt;\G&lt;/code&gt; が含まれる場合に設定します。</target>
        </trans-unit>
        <trans-unit id="94ab3854ad150bd5fe7143364537bedb55064afe" translate="yes" xml:space="preserve">
          <source>Set if the pattern starts with &lt;code&gt;.*&lt;/code&gt;.</source>
          <target state="translated">パターンが &lt;code&gt;.*&lt;/code&gt; 始まる場合に設定します。</target>
        </trans-unit>
        <trans-unit id="6c9248d9fa918c2b6a94ddbb8ca8fd246b8cd2bb" translate="yes" xml:space="preserve">
          <source>Set if the pattern starts with a repeated char (as in &lt;code&gt;x+y&lt;/code&gt;).</source>
          <target state="translated">パターンが繰り返し文字で始まる場合に設定します（ &lt;code&gt;x+y&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="29d790ebdfd1bdd7a590e9a372101f1d05e0ec63" translate="yes" xml:space="preserve">
          <source>Set indexing base via $[</source>
          <target state="translated">でインデキシングのベースを設定します。</target>
        </trans-unit>
        <trans-unit id="feb8723b424b50d3d7b7cf0abd922f64fdbc635a" translate="yes" xml:space="preserve">
          <source>Set it to some true value if you want to have an index (in reality a table of contents) to be added at the top of the generated HTML.</source>
          <target state="translated">生成されたHTMLの先頭にインデックス(実際には目次)を追加したい場合は、これを真の値に設定します。</target>
        </trans-unit>
        <trans-unit id="2f4f3702d185e94f169ddb1f3074292ed4bb6358" translate="yes" xml:space="preserve">
          <source>Set only when MakeMaker is building the extensions of the Perl core distribution.</source>
          <target state="translated">MakeMaker が Perl コア ディストリビューションの拡張機能をビルドしているときにのみ設定します。</target>
        </trans-unit>
        <trans-unit id="0fe4658257dfb05b84f9d2ef686b5a25924965a2" translate="yes" xml:space="preserve">
          <source>Set option associated with the socket. Other levels than SOL_SOCKET may be specified here.</source>
          <target state="translated">ソケットに関連するオプションを設定する。ここでは、SOL_SOCKET 以外のレベルを指定することができます。</target>
        </trans-unit>
        <trans-unit id="92c4066c2c61e06e1e7118ec6fe43c7175fa5f23" translate="yes" xml:space="preserve">
          <source>Set or get if data connections will be initiated in passive mode.</source>
          <target state="translated">データ接続がパッシブモードで開始されるかどうかを設定または取得します。</target>
        </trans-unit>
        <trans-unit id="35a8ec7624c7f4f035d4a1cc226b27c2481a9ecc" translate="yes" xml:space="preserve">
          <source>Set or get if files will be transferred in ASCII or binary mode.</source>
          <target state="translated">ファイルをASCIIまたはバイナリモードで転送するかどうかを設定または取得します。</target>
        </trans-unit>
        <trans-unit id="dbbd4131f1d194712698d60b9476bf9f798c1e2f" translate="yes" xml:space="preserve">
          <source>Set or get the global or local accuracy, aka how many significant digits the results have. If you set a global accuracy, then this also applies to new()!</source>
          <target state="translated">グローバル精度またはローカル精度、つまり結果の有効桁数を設定または取得します。グローバル精度を設定した場合、これは new()にも適用されます!</target>
        </trans-unit>
        <trans-unit id="146f3942958232e0d21f7bac38c73f20923da62a" translate="yes" xml:space="preserve">
          <source>Set or get the timeout value (in seconds) associated with this socket. If called without any arguments then the current setting is returned. If called with an argument the current setting is changed and the previous value returned.</source>
          <target state="translated">このソケットに関連付けられたタイムアウト値(秒単位)を設定または取得します。引数なしで呼び出された場合、現在の設定が返されます。引数を指定して呼び出された場合は、現在の設定が変更され、以前の値が返されます。</target>
        </trans-unit>
        <trans-unit id="f36a4dcb58387042602a6a6c89f7257c7b935b4d" translate="yes" xml:space="preserve">
          <source>Set pointer into buffer, and a count of bytes still in the buffer. Should be used only to set pointer to within range implied by previous calls to &lt;code&gt;PerlIO_get_ptr&lt;/code&gt; and &lt;code&gt;PerlIO_get_cnt&lt;/code&gt; . The two values</source>
          <target state="translated">ポインタをバッファに設定し、バッファ内にまだ残っているバイト数。以前の &lt;code&gt;PerlIO_get_ptr&lt;/code&gt; および &lt;code&gt;PerlIO_get_cnt&lt;/code&gt; の呼び出しで暗黙的に示された範囲内にポインターを設定するためにのみ使用する必要があります。2つの値</target>
        </trans-unit>
        <trans-unit id="98c15be8ce82513edc5e20f2395cd31ae3ced533" translate="yes" xml:space="preserve">
          <source>Set terminal control attributes.</source>
          <target state="translated">端末の制御属性を設定します。</target>
        </trans-unit>
        <trans-unit id="ef1a5f874fc09882b0eaad885d1eb2cce0c7dc80" translate="yes" xml:space="preserve">
          <source>Set the &quot;current article pointer&quot; to the next article in the current newsgroup.</source>
          <target state="translated">現在のニュースグループの次の記事への「現在の記事ポインタ」を設定します。</target>
        </trans-unit>
        <trans-unit id="fe9c6a4b2ad9119af782f9f176b76dfe491a13d8" translate="yes" xml:space="preserve">
          <source>Set the &quot;current article pointer&quot; to the previous article in the current newsgroup.</source>
          <target state="translated">現在のニュースグループの前の記事への「現在の記事ポインタ」を設定します。</target>
        </trans-unit>
        <trans-unit id="129e44c75987d754522e8294400ec8bed47c8f13" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;N&lt;/code&gt; th value in the semaphore set to &lt;code&gt;VALUE&lt;/code&gt;</source>
          <target state="translated">設定する &lt;code&gt;N&lt;/code&gt; セマフォセットで番目の値をに &lt;code&gt;VALUE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="81b3ed905236c4848d2eb7b4d90c6ed8a3b1eb81" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;PATH&lt;/code&gt; environment variable so that Configure finds the Cygwin versions of programs. Any not-needed Windows directories should be removed or moved to the end of your &lt;code&gt;PATH&lt;/code&gt; .</source>
          <target state="translated">ConfigureがプログラムのCygwinバージョンを見つけるように、 &lt;code&gt;PATH&lt;/code&gt; 環境変数を設定します。不要なWindowsディレクトリは削除するか、 &lt;code&gt;PATH&lt;/code&gt; の最後に移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a41a3429b4626ac1e2009837021aebb8ffeb644" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;c_cflag&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;termios&lt;/code&gt; オブジェクトの &lt;code&gt;c_cflag&lt;/code&gt; フィールドを設定します。</target>
        </trans-unit>
        <trans-unit id="a71485df0cc15865bf7b8bbc260b24c2e05c6b7f" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;c_iflag&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;termios&lt;/code&gt; オブジェクトの &lt;code&gt;c_iflag&lt;/code&gt; フィールドを設定します。</target>
        </trans-unit>
        <trans-unit id="1cc6d1351ad8ad398fce9a19c23db043fe922565" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;c_lflag&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;termios&lt;/code&gt; オブジェクトの &lt;code&gt;c_lflag&lt;/code&gt; フィールドを設定します。</target>
        </trans-unit>
        <trans-unit id="94ed32b52e68bacc0adccd70e78108c281792310" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;c_oflag&lt;/code&gt; field of a &lt;code&gt;termios&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;termios&lt;/code&gt; オブジェクトの &lt;code&gt;c_oflag&lt;/code&gt; フィールドを設定します。</target>
        </trans-unit>
        <trans-unit id="a978b282606d77f44b327d2e45a326d453456b0d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;inhibit_exit&lt;/code&gt; option to 0 if you want to be able to step off the end the script. You may also need to set $finished to 0 if you want to step through global destruction.</source>
          <target state="translated">スクリプトの終了をステップオフできるようにするには、 &lt;code&gt;inhibit_exit&lt;/code&gt; オプションを0に設定します。グローバルな破棄を実行する場合は、$ finishedを0に設定する必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="b7bcca13877bb147437c0598c8adc18a322e3186" translate="yes" xml:space="preserve">
          <source>Set the HTML output at the beginning and end of each file. The default header includes a title, a doctype tag (if &lt;code&gt;html_doctype&lt;/code&gt; is set), a content tag (customized by &lt;code&gt;html_header_tags&lt;/code&gt; ), a tag for a CSS file (if &lt;code&gt;html_css&lt;/code&gt; is set), and a tag for a Javascript file (if &lt;code&gt;html_javascript&lt;/code&gt; is set). The default footer simply closes the &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; tags.</source>
          <target state="translated">各ファイルの最初と最後にHTML出力を設定します。デフォルトのヘッダーには、タイトル、doctypeタグ（ &lt;code&gt;html_doctype&lt;/code&gt; が設定されている場合）、コンテンツタグ（ &lt;code&gt;html_header_tags&lt;/code&gt; によってカスタマイズされている）、CSSファイルのタグ（ &lt;code&gt;html_css&lt;/code&gt; が設定されている場合）、およびJavaScriptファイルのタグ（ &lt;code&gt;html_javascript&lt;/code&gt; がセットする）。デフォルトのフッターは、 &lt;code&gt;html&lt;/code&gt; タグと &lt;code&gt;body&lt;/code&gt; タグを閉じるだけです。</target>
        </trans-unit>
        <trans-unit id="98d4465bdeabff8b8498033ad82d521aff2d3640" translate="yes" xml:space="preserve">
          <source>Set the actual length of the string which is in the SV. See &lt;code&gt;SvIV_set&lt;/code&gt; .</source>
          <target state="translated">SVにある文字列の実際の長さを設定します。 &lt;code&gt;SvIV_set&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ab84d69f945e09c1eb7749df157a9890899786e6" translate="yes" xml:space="preserve">
          <source>Set the byte offset at which to begin the next data transfer. Net::FTP simply records this value and uses it when during the next data transfer. For this reason this method will not return an error, but setting it may cause a subsequent data transfer to fail.</source>
          <target state="translated">次のデータ転送を開始するバイトオフセットを設定します。Net::FTPはこの値を単純に記録し、次のデータ転送時に使用します。このため、このメソッドはエラーを返しませんが、この値を設定すると次のデータ転送に失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8cd0fd4cead65fd572452c84cd76a61272305db0" translate="yes" xml:space="preserve">
          <source>Set the centered footer. By default, this is the version of Perl you run &lt;b&gt;pod2man&lt;/b&gt; under. Note that some system an macro sets assume that the centered footer will be a modification date and will prepend something like &quot;Last modified: &quot;; if this is the case, you may want to set &lt;b&gt;--release&lt;/b&gt; to the last modified date and &lt;b&gt;--date&lt;/b&gt; to the version number.</source>
          <target state="translated">中央揃えのフッターを設定します。デフォルトでは、これは&lt;b&gt;pod2man&lt;/b&gt;を実行しているPerlのバージョンです。マクロが設定する一部のシステムでは、中央に配置されたフッターが変更日であり、「最終変更日：」のようなものが先頭に追加されることを前提としています。このような場合は、設定したい場合があり&lt;b&gt;--release&lt;/b&gt;最終更新日時とに&lt;b&gt;--date&lt;/b&gt;バージョン番号。</target>
        </trans-unit>
        <trans-unit id="321a1673ea9882b874d1a1aad6d11dc8a438079b" translate="yes" xml:space="preserve">
          <source>Set the centered footer. By default, this is the version of Perl you run Pod::Man under. Note that some system an macro sets assume that the centered footer will be a modification date and will prepend something like &quot;Last modified: &quot;; if this is the case, you may want to set &lt;code&gt;release&lt;/code&gt; to the last modified date and &lt;code&gt;date&lt;/code&gt; to the version number.</source>
          <target state="translated">中央揃えのフッターを設定します。デフォルトでは、これはPod :: Manを実行するPerlのバージョンです。マクロが設定する一部のシステムでは、中央に配置されたフッターが変更日であり、「最終変更日：」のようなものが先頭に追加されることを前提としています。この場合、 &lt;code&gt;release&lt;/code&gt; を最終変更日に &lt;code&gt;date&lt;/code&gt; し、日付をバージョン番号に設定することができます。</target>
        </trans-unit>
        <trans-unit id="8214f55b990464e2e8c22afb79c6512b0ec251c3" translate="yes" xml:space="preserve">
          <source>Set the content type:</source>
          <target state="translated">コンテンツの種類を設定します。</target>
        </trans-unit>
        <trans-unit id="960ca764a887ff7187a7bb8509e838d035f503ac" translate="yes" xml:space="preserve">
          <source>Set the content-type in the HTML head: (defaults to ISO-8859-1)</source>
          <target state="translated">HTMLヘッドのcontent-typeを設定します。(デフォルトはISO-8859-1)</target>
        </trans-unit>
        <trans-unit id="b9c66cace097e648754e60eb3adba5a65c7e471d" translate="yes" xml:space="preserve">
          <source>Set the current length of the string which is in the SV. See &lt;code&gt;SvCUR&lt;/code&gt; and &lt;code&gt;SvIV_set&lt;/code&gt; .</source>
          <target state="translated">SVにある文字列の現在の長さを設定します。 &lt;code&gt;SvCUR&lt;/code&gt; および &lt;code&gt;SvIV_set&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b1cc357837a67efdc931d9a2ed4913fd6bd1879b" translate="yes" xml:space="preserve">
          <source>Set the current pad to be pad &lt;code&gt;n&lt;/code&gt; in the padlist, saving the previous current pad. NB currently this macro expands to a string too long for some compilers, so it's best to replace it with</source>
          <target state="translated">現在のパッドをパッドリストのパッド &lt;code&gt;n&lt;/code&gt; に設定し、前の現在のパッドを保存します。NB現在、このマクロは一部のコンパイラーには長すぎる文字列に展開されるため、次のように置き換えるのが最善です。</target>
        </trans-unit>
        <trans-unit id="1a38250e5b2747407cd2b8722d0b8d14c28da5b4" translate="yes" xml:space="preserve">
          <source>Set the current position, using the opaque value returned by &lt;code&gt;getpos()&lt;/code&gt; . Not yet supported.</source>
          <target state="translated">&lt;code&gt;getpos()&lt;/code&gt; によって返された不透明な値を使用して、現在の位置を設定します。まだサポートされていません。</target>
        </trans-unit>
        <trans-unit id="69382d453505c7bf8a7a7a038d3e295dc3fd2b8c" translate="yes" xml:space="preserve">
          <source>Set the default header to indicate that this page is part of the standard Perl release, if &lt;b&gt;--center&lt;/b&gt; is not also given.</source>
          <target state="translated">&lt;b&gt;--center&lt;/b&gt;も指定されていない場合、デフォルトのヘッダーを設定して、このページが標準のPerlリリースの一部であることを示します。</target>
        </trans-unit>
        <trans-unit id="10c12ebce94e713af1ea1defa218a79b08cdce52" translate="yes" xml:space="preserve">
          <source>Set the directive associated with this token. Used internally to fake TODO tests.</source>
          <target state="translated">このトークンに関連付けられたディレクティブを設定します。TODO テストを偽装するために内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="0a16e5af625314bf88ad6b2bec36a4b8e1aa9a05" translate="yes" xml:space="preserve">
          <source>Set the error handling style. &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; says to throw an exception on any POD formatting error. &lt;code&gt;stderr&lt;/code&gt; says to report errors on standard error, but not to throw an exception. &lt;code&gt;pod&lt;/code&gt; says to include a POD ERRORS section in the resulting documentation summarizing the errors. &lt;code&gt;none&lt;/code&gt; ignores POD errors entirely, as much as possible.</source>
          <target state="translated">エラー処理スタイルを設定します。 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; は、PODフォーマットエラーで例外をスローするように指示します。 &lt;code&gt;stderr&lt;/code&gt; は標準エラーでエラーを報告するが、例外をスローしないように言います。 &lt;code&gt;pod&lt;/code&gt; は、エラーを要約した結果のドキュメントにPOD ERRORSセクションを含めるように言っています。可能な限り、PODエラーを完全に無視する &lt;code&gt;none&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="c374003f8061a0f37ba1c8b709954cff45ff4c26" translate="yes" xml:space="preserve">
          <source>Set the formatter_class of the harness being run. Since the &lt;code&gt;HARNESS_OPTIONS&lt;/code&gt; is seperated by &lt;code&gt;:&lt;/code&gt; , we use &lt;code&gt;-&lt;/code&gt; instead.</source>
          <target state="translated">実行するハーネスのformatter_classを設定します。 &lt;code&gt;HARNESS_OPTIONS&lt;/code&gt; は &lt;code&gt;:&lt;/code&gt; で区切られているため、代わりに &lt;code&gt;-&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4cd2954ce82dcc6c55f66520ddbd7db9e25038d3" translate="yes" xml:space="preserve">
          <source>Set the highest index in the array to the given number, equivalent to Perl's &lt;code&gt;$#array = $fill;&lt;/code&gt; .</source>
          <target state="translated">配列の最高のインデックスを、Perlの &lt;code&gt;$#array = $fill;&lt;/code&gt; に相当する指定された数に設定します。。</target>
        </trans-unit>
        <trans-unit id="1c9b7103cb01ab810deebdec7c8ba3708db9493b" translate="yes" xml:space="preserve">
          <source>Set the input baud rate.</source>
          <target state="translated">入力ボーレートを設定します。</target>
        </trans-unit>
        <trans-unit id="1e1a3bc8ac2300a6771401476bf158aa1fb9f610" translate="yes" xml:space="preserve">
          <source>Set the left-hand footer string to this value. By default, the modification date of the input file will be used, or the current date if input comes from &lt;code&gt;STDIN&lt;/code&gt; .</source>
          <target state="translated">左側のフッター文字列をこの値に設定します。デフォルトでは、入力ファイルの変更日、または入力が &lt;code&gt;STDIN&lt;/code&gt; からのものである場合は現在の日付が使用されます。</target>
        </trans-unit>
        <trans-unit id="64ca0bc6de4e6864f3583e031971a4ee1d5448cd" translate="yes" xml:space="preserve">
          <source>Set the level of debug information for this object. If &lt;code&gt;VALUE&lt;/code&gt; is not given then the current state is returned. Otherwise the state is changed to &lt;code&gt;VALUE&lt;/code&gt; and the previous state returned.</source>
          <target state="translated">このオブジェクトのデバッグ情報のレベルを設定します。 &lt;code&gt;VALUE&lt;/code&gt; が指定されていない場合は、現在の状態が返されます。それ以外の場合、状態は &lt;code&gt;VALUE&lt;/code&gt; に変更され、前の状態が返されます。</target>
        </trans-unit>
        <trans-unit id="bf87375566591ae1cf3a120294b92ff86451dd36" translate="yes" xml:space="preserve">
          <source>Set the maximum level. Any higher levels than the specified one are ignored.</source>
          <target state="translated">最大レベルを設定します。指定したレベルよりも高いレベルは無視されます。</target>
        </trans-unit>
        <trans-unit id="0d455f6e6aab5e848eef75fedff2472f333772e8" translate="yes" xml:space="preserve">
          <source>Set the name of the manual page to</source>
          <target state="translated">マニュアルページの名前を</target>
        </trans-unit>
        <trans-unit id="13972b9081123782e32921714d08237e9346628e" translate="yes" xml:space="preserve">
          <source>Set the name of the manual page. Without this option, the manual name is set to the uppercased base name of the file being converted unless the manual section is 3, in which case the path is parsed to see if it is a Perl module path. If it is, a path like &lt;code&gt;.../lib/Pod/Man.pm&lt;/code&gt; is converted into a name like &lt;code&gt;Pod::Man&lt;/code&gt; . This option, if given, overrides any automatic determination of the name.</source>
          <target state="translated">マニュアルページの名前を設定します。このオプションを使用しない場合、手動セクションが3でない限り、手動名は変換されるファイルの大文字のベース名に設定されます。この場合、パスは解析され、Perlモジュールパスかどうかが確認されます。もしそうなら、 &lt;code&gt;.../lib/Pod/Man.pm&lt;/code&gt; のようなパスは &lt;code&gt;Pod::Man&lt;/code&gt; ような名前に変換されます。このオプションを指定すると、名前の自動決定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="1b12474a7382b60b419fef4621bdea9e461e96f3" translate="yes" xml:space="preserve">
          <source>Set the number of spaces to indent regular text, and the default indentation for &lt;code&gt;=over&lt;/code&gt; blocks. Defaults to 4 spaces if this option isn't given.</source>
          <target state="translated">通常のテキストをインデントするスペースの数、および &lt;code&gt;=over&lt;/code&gt; ブロックのデフォルトのインデントを設定します。このオプションを指定しない場合、デフォルトで4つのスペースが使用されます。</target>
        </trans-unit>
        <trans-unit id="4a08b4fd33e2048d6c4f1c28a1a6b7bdb127bd20" translate="yes" xml:space="preserve">
          <source>Set the number to its absolute value, e.g. change the sign from '-' to '+' and from '-inf' to '+inf', respectively. Does nothing for NaN or positive numbers.</source>
          <target state="translated">符号を'-'から'+'に、'-inf'から'+inf'に変更するなど、数値の絶対値を設定します。NaNや正の数に対しては何もしません。</target>
        </trans-unit>
        <trans-unit id="e91c823eccd0419f2e6a1e13e049de31dd5cf5fc" translate="yes" xml:space="preserve">
          <source>Set the output baud rate.</source>
          <target state="translated">出力ボーレートを設定します。</target>
        </trans-unit>
        <trans-unit id="a4ef2a5ea1c9bb7c5562bc2b2f016d8973a6e1be" translate="yes" xml:space="preserve">
          <source>Set the output color.</source>
          <target state="translated">出力色を設定します。</target>
        </trans-unit>
        <trans-unit id="a4732b9a88448b89c53f22f559150640e50bd14c" translate="yes" xml:space="preserve">
          <source>Set the section for the &lt;code&gt;.TH&lt;/code&gt; macro. The standard section numbering convention is to use 1 for user commands, 2 for system calls, 3 for functions, 4 for devices, 5 for file formats, 6 for games, 7 for miscellaneous information, and 8 for administrator commands. There is a lot of variation here, however; some systems (like Solaris) use 4 for file formats, 5 for miscellaneous information, and 7 for devices. Still others use 1m instead of 8, or some mix of both. About the only section numbers that are reliably consistent are 1, 2, and 3.</source>
          <target state="translated">&lt;code&gt;.TH&lt;/code&gt; マクロのセクションを設定します。標準のセクション番号付け規則では、ユーザーコマンドに1、システムコールに2、関数に3、デバイスに4、ファイル形式に5、ゲームに6、その他の情報に7、管理者コマンドに8を使用します。ただし、ここには多くのバリエーションがあります。一部のシステム（Solarisなど）では、ファイル形式に4、その他の情報に5、デバイスに7を使用しています。さらに、8の代わりに1mを使用するものや、両方を組み合わせたものもあります。確実に一貫している唯一のセクション番号については、1、2、および3です。</target>
        </trans-unit>
        <trans-unit id="ff6b57adeb605260c9317d8175c37bce0585fd3f" translate="yes" xml:space="preserve">
          <source>Set the slot at offset &lt;code&gt;po&lt;/code&gt; in the current pad to &lt;code&gt;sv&lt;/code&gt;</source>
          <target state="translated">現在のパッドのオフセット &lt;code&gt;po&lt;/code&gt; にあるスロットを &lt;code&gt;sv&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="b4cb27ad4c5eee83092ab663d58aaca30cd70f3d" translate="yes" xml:space="preserve">
          <source>Set the string that is included before the opening &amp;lt;html&amp;gt; tag:</source>
          <target state="translated">開始&amp;lt;html&amp;gt;タグの前に含まれる文字列を設定します。</target>
        </trans-unit>
        <trans-unit id="30905183a403c70c69c00e9a32fe1eda8d3eeb11" translate="yes" xml:space="preserve">
          <source>Set the value at offset</source>
          <target state="translated">オフセット時の値を設定します。</target>
        </trans-unit>
        <trans-unit id="a829cba7c061fa542b2731502551149a89454ffc" translate="yes" xml:space="preserve">
          <source>Set the value of a numbered capture variable. &lt;code&gt;value&lt;/code&gt; is the scalar that is to be used as the new value. It's up to the engine to make sure this is used as the new value (or reject it).</source>
          <target state="translated">番号付きのキャプチャ変数の値を設定します。 &lt;code&gt;value&lt;/code&gt; は、新しい値として使用されるスカラーです。これが新しい値として使用されることを確認する（または拒否する）のはエンジンの責任です。</target>
        </trans-unit>
        <trans-unit id="d40cca8b0068b8cf59958fcbe3fe13fb1458d0b1" translate="yes" xml:space="preserve">
          <source>Set the value of one or more options. If the value has internal whitespace, it should be quoted. For example, you could set &lt;code&gt;o
pager=&quot;less -MQeicsNfr&quot;&lt;/code&gt; to call &lt;b&gt;less&lt;/b&gt; with those specific options. You may use either single or double quotes, but if you do, you must escape any embedded instances of same sort of quote you began with, as well as any escaping any escapes that immediately precede that quote but which are not meant to escape the quote itself. In other words, you follow single-quoting rules irrespective of the quote; eg: &lt;code&gt;o option='this isn\'t bad'&lt;/code&gt; or &lt;code&gt;o option=&quot;She said, \&quot;Isn't
it?\&quot;&quot;&lt;/code&gt; .</source>
          <target state="translated">1つ以上のオプションの値を設定します。値に内部空白がある場合は、引用符で囲む必要があります。たとえば、 &lt;code&gt;o pager=&quot;less -MQeicsNfr&quot;&lt;/code&gt; を設定して、これらの特定のオプションで&lt;b&gt;less&lt;/b&gt;を呼び出すことができます。一重引用符または二重引用符のいずれかを使用できますが、使用する場合は、開始したのと同じ種類の引用の埋め込みインスタンスをエスケープする必要があります。また、引用符の直前にあるエスケープをエスケープする必要があります自体。つまり、引用符に関係なく、単一引用符の規則に従います。例えば： &lt;code&gt;o option='this isn\'t bad'&lt;/code&gt; または &lt;code&gt;o option=&quot;She said, \&quot;Isn't it?\&quot;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2cc136251cb32fcfbe3d04221687aa62a0883948" translate="yes" xml:space="preserve">
          <source>Set the value of the IV pointer in sv to val. It is possible to perform the same function of this macro with an lvalue assignment to &lt;code&gt;SvIVX&lt;/code&gt; . With future Perls, however, it will be more efficient to use &lt;code&gt;SvIV_set&lt;/code&gt; instead of the lvalue assignment to &lt;code&gt;SvIVX&lt;/code&gt; .</source>
          <target state="translated">svのIVポインターの値をvalに設定します。 &lt;code&gt;SvIVX&lt;/code&gt; に左辺値を割り当てれば、このマクロと同じ機能を実行できます。ただし、将来の &lt;code&gt;SvIV_set&lt;/code&gt; では、SvIVXへの左辺値の割り当ての代わりにSvIV_setを使用する方が効率的 &lt;code&gt;SvIVX&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22e4c903a5d72261424a11bc3757c9f4a37a76ba" translate="yes" xml:space="preserve">
          <source>Set the value of the MAGIC pointer in sv to val. See &lt;code&gt;SvIV_set&lt;/code&gt; .</source>
          <target state="translated">svのMAGICポインターの値をvalに設定します。 &lt;code&gt;SvIV_set&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="1a494211327b600de30ab8718fb411a59a7f58c6" translate="yes" xml:space="preserve">
          <source>Set the value of the NV pointer in sv to val. See &lt;code&gt;SvIV_set&lt;/code&gt; .</source>
          <target state="translated">svのNVポインターの値をvalに設定します。 &lt;code&gt;SvIV_set&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8d9c377a0b2e06b10d8641151ba6301894489521" translate="yes" xml:space="preserve">
          <source>Set the value of the PV pointer in &lt;code&gt;sv&lt;/code&gt; to the Perl allocated &lt;code&gt;NUL&lt;/code&gt; -terminated string &lt;code&gt;val&lt;/code&gt; . See also &lt;code&gt;SvIV_set&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; のPVポインタの値を、Perlが割り当てた &lt;code&gt;NUL&lt;/code&gt; で終了する文字列 &lt;code&gt;val&lt;/code&gt; に設定します。 &lt;code&gt;SvIV_set&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="974caccd437c55b24a3029576f3d67323db7a99d" translate="yes" xml:space="preserve">
          <source>Set the value of the RV pointer in sv to val. See &lt;code&gt;SvIV_set&lt;/code&gt; .</source>
          <target state="translated">svのRVポインターの値をvalに設定します。 &lt;code&gt;SvIV_set&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a4945f80a4ef90380ec198942123c4c53398424" translate="yes" xml:space="preserve">
          <source>Set the value of the STASH pointer in sv to val. See &lt;code&gt;SvIV_set&lt;/code&gt; .</source>
          <target state="translated">svのSTASHポインターの値をvalに設定します。 &lt;code&gt;SvIV_set&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="61e2b8af95b67e74054b4785448a38bdfa4d841a" translate="yes" xml:space="preserve">
          <source>Set the value of the UV pointer in sv to val. See &lt;code&gt;SvIV_set&lt;/code&gt; .</source>
          <target state="translated">svのUVポインターの値をvalに設定します。 &lt;code&gt;SvIV_set&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ee3c9044a521bf001f33a0b0f5dc534176c74d5f" translate="yes" xml:space="preserve">
          <source>Set the value that will be embedded in the opening tags of F, C tags and verbatim text. F maps to &amp;lt;em&amp;gt;, C maps to &amp;lt;code&amp;gt;, Verbatim text maps to &amp;lt;pre&amp;gt; (Computerese defaults to &quot;&quot;)</source>
          <target state="translated">F、Cタグの開始タグ、および逐語的テキストに埋め込まれる値を設定します。Fは&amp;lt;em&amp;gt;に、Cは&amp;lt;code&amp;gt;に、Verbatimテキストは&amp;lt;pre&amp;gt;にマップされます（コンピューターのデフォルトは &quot;&quot;です）。</target>
        </trans-unit>
        <trans-unit id="eb7a062a0b6ba69d7136129c02cfec08998ab139" translate="yes" xml:space="preserve">
          <source>Set the verbosity level.</source>
          <target state="translated">冗長度のレベルを設定します。</target>
        </trans-unit>
        <trans-unit id="d5df7fc87263e18096be39ec6768717dbc7ae7d2" translate="yes" xml:space="preserve">
          <source>Set the verbosity level:</source>
          <target state="translated">冗長度のレベルを設定します。</target>
        </trans-unit>
        <trans-unit id="194f7ae4760084100ac6e9d46a1742704127659d" translate="yes" xml:space="preserve">
          <source>Set this value to true if you don't want the formatter to try putting a hidden code on all Perl symbols (as best as it can notice them) that labels them as being not in English, and so not worth spellchecking.</source>
          <target state="translated">フォーマッタがすべての Perl のシンボルに (それに気づくことができる限り)英語ではないのでスペルチェックをする価値がないとラベルを貼るような隠しコードをつけたくない場合は、この値を true に設定してください。</target>
        </trans-unit>
        <trans-unit id="6fd106288bdb4ff77709d6356213cdc720c68b6d" translate="yes" xml:space="preserve">
          <source>Set this variable to &lt;code&gt;0&lt;/code&gt; if you do not want any warnings printed. Personally I recommend against doing this, but people asked for the option. Also, be advised that this is of course not threadsafe.</source>
          <target state="translated">警告を出力したくない場合は、この変数を &lt;code&gt;0&lt;/code&gt; に設定します。個人的にはこれを行わないことをお勧めしますが、人々はオプションを求めました。また、これはもちろんスレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="30679c688aa273db6ac778240eaadb8fcf96dea6" translate="yes" xml:space="preserve">
          <source>Set this variable to &lt;code&gt;1&lt;/code&gt; to always get the &lt;code&gt;Carp::longmess&lt;/code&gt; output of the warnings, instead of the regular &lt;code&gt;carp&lt;/code&gt; . This is the same message you would get by doing:</source>
          <target state="translated">この変数を &lt;code&gt;1&lt;/code&gt; に設定すると、通常の &lt;code&gt;carp&lt;/code&gt; ではなく、警告の &lt;code&gt;Carp::longmess&lt;/code&gt; 出力が常に取得されます。これは、次のようにして得られるメッセージと同じです。</target>
        </trans-unit>
        <trans-unit id="ccf2a66ca30e8eff3f9eec8d1c8f7819471b7948" translate="yes" xml:space="preserve">
          <source>Set this variable to &lt;code&gt;1&lt;/code&gt; to make &lt;code&gt;Archive::Tar&lt;/code&gt; effectively make a copy of the file when extracting. Default is &lt;code&gt;0&lt;/code&gt; , which means the symlink stays intact. Of course, you will have to pack the file linked to as well.</source>
          <target state="translated">この変数を &lt;code&gt;1&lt;/code&gt; に設定すると、 &lt;code&gt;Archive::Tar&lt;/code&gt; は、抽出時にファイルのコピーを効率的に作成します。デフォルトは &lt;code&gt;0&lt;/code&gt; です。これは、シンボリックリンクがそのまま残ることを意味します。もちろん、リンクされたファイルもパックする必要があります。</target>
        </trans-unit>
        <trans-unit id="383aacff95eb6a78e74e64bda42dfd0cbc4da0e9" translate="yes" xml:space="preserve">
          <source>Set to 1 and the md5sum of files will be returned (instead of file data) my $iter = Archive::Tar-&amp;gt;iter( $file, 1, {md5 =&amp;gt; 1} ); while( my $f = $iter-&amp;gt;() ) { print $f-&amp;gt;data . &quot;\t&quot; . $f-&amp;gt;full_path . $/; }</source>
          <target state="translated">1に設定すると、（ファイルデータの代わりに）ファイルのmd5sumが返されますmy $ iter = Archive :: Tar-&amp;gt; iter（$ file、1、{md5 =&amp;gt; 1}）; while（my $ f = $ iter-&amp;gt;（））{print $ f-&amp;gt; data。&quot;\ t&quot;。$ f-&amp;gt; full_path。$ /; }</target>
        </trans-unit>
        <trans-unit id="0e0a386d8dc4c1874b46a680e437e74ee0ffba92" translate="yes" xml:space="preserve">
          <source>Set to 1 to allow the use of non-IFS compatible LSPs (Layered Service Providers). Perl normally searches for an IFS-compatible LSP because this is required for its emulation of Windows sockets as real filehandles. However, this may cause problems if you have a firewall such as</source>
          <target state="translated">1 に設定すると、IFS 互換でない LSP (Layered Service Providers)の使用を許可します。Perlは通常、IFS互換のLSPを検索しますが、これはWindowsソケットを実際のファイルハンドルとしてエミュレートするために必要なためです。しかし、これは、以下のようなファイアウォールを使用している場合に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="987c16056188115f9ec16c909bb6308c3ba73d79" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;&quot;1&quot;&lt;/code&gt; to have Perl resolve</source>
          <target state="translated">Perlで解決するには、 &lt;code&gt;&quot;1&quot;&lt;/code&gt; に設定します</target>
        </trans-unit>
        <trans-unit id="cc83033c6d49c4dc40d2c5e241cb0a6ce60549f1" translate="yes" xml:space="preserve">
          <source>Set to a true value to normalize the TAP that is emitted in verbose modes.</source>
          <target state="translated">真の値を設定すると、冗長モードで発せられるTAPが正規化されます。</target>
        </trans-unit>
        <trans-unit id="546342f8d8f12d542539c974b91270e85e9f6de4" translate="yes" xml:space="preserve">
          <source>Set to false to silence warnings. Inspect the output of the &lt;code&gt;error()&lt;/code&gt; method manually to see what went wrong.</source>
          <target state="translated">警告を止めるにはfalseに設定します。 &lt;code&gt;error()&lt;/code&gt; メソッドの出力を手動で検査して、問題の原因を確認してください。</target>
        </trans-unit>
        <trans-unit id="834dbdc33e6a642f5eddbc75564f9d8b610489f4" translate="yes" xml:space="preserve">
          <source>Set up a module that does a &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Filter::Simple&lt;/code&gt; and then calls &lt;code&gt;FILTER { ... }&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Filter::Simple&lt;/code&gt; を&lt;a href=&quot;../functions/use&quot;&gt;使用&lt;/a&gt;して &lt;code&gt;FILTER { ... }&lt;/code&gt; 呼び出すモジュールを設定します。</target>
        </trans-unit>
        <trans-unit id="73a34667fa5cc5eb569d7c1aef07a1af8859d495" translate="yes" xml:space="preserve">
          <source>Set up a module that does a &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Filter::Util::Call&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Filter::Util::Call&lt;/code&gt; &lt;a href=&quot;../functions/use&quot;&gt;使用&lt;/a&gt;するモジュールを設定します。</target>
        </trans-unit>
        <trans-unit id="5e688569ed0e829b38315a3e8fcf014d5ccc4ea2" translate="yes" xml:space="preserve">
          <source>Set up necessary local variables for exception handling. See &lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;Exception Handling in perlguts&lt;/a&gt;.</source>
          <target state="translated">例外処理に必要なローカル変数を設定します。&lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;perlgutsでの例外処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3e4838c0ccda6d92839ab4417c66fdd6b838d3e4" translate="yes" xml:space="preserve">
          <source>Set what type of data channel protection the client and server will be using. Only &lt;code&gt;LEVEL&lt;/code&gt; s &quot;C&quot; (clear) and &quot;P&quot; (private) are supported.</source>
          <target state="translated">クライアントとサーバーが使用するデータチャネル保護のタイプを設定します。のみ &lt;code&gt;LEVEL&lt;/code&gt; の&quot;C&quot;（クリア）と&quot;P&quot;（プライベート）がサポートされています。</target>
        </trans-unit>
        <trans-unit id="0f18d395c62f798a17ecac938a24ac02d508300b" translate="yes" xml:space="preserve">
          <source>Set whether or not the connect behavior should enforce remote service availability as well as reachability. Normally, if the remote server reported ECONNREFUSED, it must have been reachable because of the status packet that it reported. With this option enabled, the full three-way tcp handshake must have been established successfully before it will claim it is reachable. NOTE: It still does nothing more than connect and disconnect. It does not speak any protocol (i.e., HTTP or FTP) to ensure the remote server is sane in any way. The remote server CPU could be grinding to a halt and unresponsive to any clients connecting, but if the kernel throws the ACK packet, it is considered alive anyway. To really determine if the server is responding well would be application specific and is beyond the scope of Net::Ping. For udp protocol, enabling this option demands that the remote server replies with the same udp data that it was sent as defined by the udp echo service.</source>
          <target state="translated">接続動作が、到達可能性と同様にリモートサービスの可用性を強制するかどうかを設定します。通常、リモートサーバが ECONNREFUSED を報告した場合、報告したステータスパケットのために到達可能でなければなりません。このオプションを有効にすると、完全な 3 者間 TCP ハンドシェイクが正常に確立されてからでないと到達可能であると主張します。注意:まだ接続と切断以上のことは何もしません。リモートサーバが正常であることを確認するためのプロトコル (HTTP や FTP など)は一切話しません。リモートサーバの CPU は停止しているかもしれませんし、接続しているクライアントに反応しないかもしれませんが、カーネルが ACK パケットを投げれば、いずれにしても生きているとみなされます。サーバが正常に応答しているかどうかを本当に判断するには、アプリケーション固有の問題であり、 Net::Ping の範囲を超えています。udp プロトコルの場合、このオプションを有効にすると、リモートサーバは udp echo サービスで定義されているように、送信されたのと同じ udp データで応答するように要求されます。</target>
        </trans-unit>
        <trans-unit id="a07a8228695d929da97229f651f30da0684bf45b" translate="yes" xml:space="preserve">
          <source>Set/get the class for downgrade/upgrade operations. Thuis is used for instance by &lt;a href=&quot;../bignum&quot;&gt;bignum&lt;/a&gt;. The defaults are '', thus the following operation will create a BigInt, not a BigFloat:</source>
          <target state="translated">ダウングレード/アップグレード操作のクラスを設定/取得します。Thuisは、たとえば&lt;a href=&quot;../bignum&quot;&gt;bignum&lt;/a&gt;によって使用されます。デフォルトは ''なので、次の操作ではBigFloatではなくBigIntが作成されます。</target>
        </trans-unit>
        <trans-unit id="691f046ca0340609c296b4c74a67356c9723a876" translate="yes" xml:space="preserve">
          <source>Set/get the current round mode.</source>
          <target state="translated">現在のラウンドモードを設定/取得します。</target>
        </trans-unit>
        <trans-unit id="37d56e2c5033e2c05ba27dafc68fc7e7f70db64b" translate="yes" xml:space="preserve">
          <source>Set/get the number of digits for the default precision in divide operations.</source>
          <target state="translated">除算演算のデフォルト精度の桁数を設定/取得します。</target>
        </trans-unit>
        <trans-unit id="18b8ca3f3f3965e8a4d0e32c6680ecb26c5b068b" translate="yes" xml:space="preserve">
          <source>Set/retrieve the POD document name (e.g. &quot;Pod::Parser&quot;).</source>
          <target state="translated">POD文書名(例:&quot;Pod::Parser&quot;)を設定/取得します。</target>
        </trans-unit>
        <trans-unit id="87ce229873ff022aa8725cfc84a33e2e54210869" translate="yes" xml:space="preserve">
          <source>Set/retrieve the POD file name.</source>
          <target state="translated">PODファイル名を設定/取得します。</target>
        </trans-unit>
        <trans-unit id="5515910de1d3463cece3939b2b845d2ea822ab16" translate="yes" xml:space="preserve">
          <source>Set/retrieve the POD file storage path.</source>
          <target state="translated">PODファイルの保存パスを設定/取得します。</target>
        </trans-unit>
        <trans-unit id="54c04c07b3166e5540744836415a0e65a4cf9f82" translate="yes" xml:space="preserve">
          <source>Set/retrieve the POD short description as found in the &lt;code&gt;=head1 NAME&lt;/code&gt; section.</source>
          <target state="translated">&lt;code&gt;=head1 NAME&lt;/code&gt; セクションにあるPODの短い説明を設定/取得します。</target>
        </trans-unit>
        <trans-unit id="f0459ef370f13af05319975f24455e8cb8659f84" translate="yes" xml:space="preserve">
          <source>Set/retrieve the textual value of the link. This string contains special markers &lt;code&gt;P&amp;lt;&amp;gt;&lt;/code&gt; and &lt;code&gt;Q&amp;lt;&amp;gt;&lt;/code&gt; that should be expanded by the translator's interior sequence expansion engine to the formatter-specific code to highlight/activate the hyperlink. The details have to be implemented in the translator.</source>
          <target state="translated">リンクのテキスト値を設定/取得します。この文字列には、トランスレータの内部シーケンス展開エンジンによってハイパーリンクを強調表示/アクティブ化するためのフォーマッタ固有のコードに展開される特別なマーカー &lt;code&gt;P&amp;lt;&amp;gt;&lt;/code&gt; および &lt;code&gt;Q&amp;lt;&amp;gt;&lt;/code&gt; が含まれています。詳細はトランスレータで実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="419764a46761f0fffa0aea35a7f43cfa71691b84" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;Perl_rc&lt;/code&gt; to &lt;code&gt;rc&lt;/code&gt; , and sets $^E to the corresponding value.</source>
          <target state="translated">セット &lt;code&gt;Perl_rc&lt;/code&gt; に &lt;code&gt;rc&lt;/code&gt; 、および対応する値に設定し$ ^ E。</target>
        </trans-unit>
        <trans-unit id="63d789ee5142a732c194f4cb7f568e6b7dd23323" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;Perl_rc&lt;/code&gt; to the return value of WinGetLastError(), and sets $^E to the corresponding value.</source>
          <target state="translated">セット &lt;code&gt;Perl_rc&lt;/code&gt; 対応する値にWinGetLastErrorの戻り値に（）、およびセット$ ^ E。</target>
        </trans-unit>
        <trans-unit id="de7e955a511acb169ac3ac70a054207750d70232" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;Perl_rc&lt;/code&gt; to the return value of WinGetLastError().</source>
          <target state="translated">&lt;code&gt;Perl_rc&lt;/code&gt; をWinGetLastError（）の戻り値に設定します。</target>
        </trans-unit>
        <trans-unit id="fa98fad37059e0f6a0224425b5d152583e99f44d" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;compactDump&lt;/code&gt; and &lt;code&gt;veryCompact&lt;/code&gt; options simultaneously.</source>
          <target state="translated">設定 &lt;code&gt;compactDump&lt;/code&gt; と &lt;code&gt;veryCompact&lt;/code&gt; 同時にオプションを。</target>
        </trans-unit>
        <trans-unit id="d1ec724f2d81ce2a30fc1934fd14acd2f79f0c80" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;compactDump&lt;/code&gt; option. If the value is 1, sets to a reasonable big number.</source>
          <target state="translated">&lt;code&gt;compactDump&lt;/code&gt; オプションを設定します。値が1の場合、妥当な大きな数に設定します。</target>
        </trans-unit>
        <trans-unit id="bf62caf04c459720678a2165a622ec33f206a57f" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;tick&lt;/code&gt; and &lt;code&gt;unctrl&lt;/code&gt; options to suitable values for printout with the given quote char. Possible values are &lt;code&gt;auto&lt;/code&gt; , &lt;code&gt;'&lt;/code&gt; and &lt;code&gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tick&lt;/code&gt; および &lt;code&gt;unctrl&lt;/code&gt; オプションを、指定された引用文字での印刷に適した値に設定します。可能な値は &lt;code&gt;auto&lt;/code&gt; 、 &lt;code&gt;'&lt;/code&gt; および &lt;code&gt;&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5f2eb3a09d485c46a23ddef7fa09e4c2212f3e2c" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;unctrl&lt;/code&gt; option with checking for an invalid argument. Possible values are &lt;code&gt;unctrl&lt;/code&gt; and &lt;code&gt;quote&lt;/code&gt; .</source>
          <target state="translated">無効な引数をチェックして &lt;code&gt;unctrl&lt;/code&gt; オプションを設定します。可能な値は &lt;code&gt;unctrl&lt;/code&gt; と &lt;code&gt;quote&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="45e333dd26438c1a1300c286b84cba0c915c5552" translate="yes" xml:space="preserve">
          <source>Sets DEV_NULL to nothing because I don't know how to do it on VMS.</source>
          <target state="translated">VMSでのやり方がわからないので、DEV_NULLを何も設定しないようにします。</target>
        </trans-unit>
        <trans-unit id="8a3a24fcacbf3045f6de9c146889add9f9588b1b" translate="yes" xml:space="preserve">
          <source>Sets FILEHANDLE's position, just like the &lt;code&gt;fseek&lt;/code&gt; call of &lt;code&gt;stdio&lt;/code&gt; . FILEHANDLE may be an expression whose value gives the name of the filehandle. The values for WHENCE are &lt;code&gt;0&lt;/code&gt; to set the new position</source>
          <target state="translated">&lt;code&gt;stdio&lt;/code&gt; の &lt;code&gt;fseek&lt;/code&gt; 呼び出しと同様に、FILEHANDLEの位置を設定します。FILEHANDLEは、その値がファイルハンドルの名前を与える式にすることができます。WHENCEの値は &lt;code&gt;0&lt;/code&gt; で、新しい位置を設定します</target>
        </trans-unit>
        <trans-unit id="3cce28c93400f831accb05f30b475b61e877d939" translate="yes" xml:space="preserve">
          <source>Sets FILEHANDLE's system position in bytes using lseek(2). FILEHANDLE may be an expression whose value gives the name of the filehandle. The values for WHENCE are &lt;code&gt;0&lt;/code&gt; to set the new position to POSITION; &lt;code&gt;1&lt;/code&gt; to set the it to the current position plus POSITION; and &lt;code&gt;2&lt;/code&gt; to set it to EOF plus POSITION, typically negative.</source>
          <target state="translated">lseek（2）を使用して、FILEHANDLEのシステム位置をバイト単位で設定します。FILEHANDLEは、その値がファイルハンドルの名前を与える式にすることができます。WHENCEの値は &lt;code&gt;0&lt;/code&gt; で、新しい位置をPOSITIONに設定します。 &lt;code&gt;1&lt;/code&gt; を現在の位置とPOSITIONに設定するには、及び &lt;code&gt;2&lt;/code&gt; は、 EOFプラスPOSITION、一般的に負に設定します。</target>
        </trans-unit>
        <trans-unit id="bb1b911e2c7e353c665b4c26821503bb0c47fef5" translate="yes" xml:space="preserve">
          <source>Sets PERL_SKIP_TTY_TEST to true before running normal test.</source>
          <target state="translated">通常のテストを実行する前にPERL_SKIP_TTY_TESTをtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="0418ff3145cb972dc7d9a0b1a71a1ef6cf8cba37" translate="yes" xml:space="preserve">
          <source>Sets PL_defoutgv, the default file handle for output, to the passed in typeglob. As PL_defoutgv &quot;owns&quot; a reference on its typeglob, the reference count of the passed in typeglob is increased by one, and the reference count of the typeglob that PL_defoutgv points to is decreased by one.</source>
          <target state="translated">出力のためのデフォルトのファイルハンドルである PL_defoutgv を、渡された typeglob に設定します。PL_defoutgv がその typeglob 上の参照を &quot;所有&quot; しているので、渡された typeglob の参照カウントは 1 つ増え、PL_defoutgv が指す typeglob の参照カウントは 1 つ減ります。</target>
        </trans-unit>
        <trans-unit id="a32ecc2237c7ab3fc00a5757f0738e34dae88a22" translate="yes" xml:space="preserve">
          <source>Sets UNIX like permissions 'mode' on all the files. e.g. 0666</source>
          <target state="translated">すべてのファイルに UNIX ライクなパーミッション「モード」を設定します。</target>
        </trans-unit>
        <trans-unit id="38d605da2e9eb3427c6a2a3cdec1e9c177ee521f" translate="yes" xml:space="preserve">
          <source>Sets a breakpoint before the first statement executed after the specified subroutine is compiled.</source>
          <target state="translated">指定されたサブルーチンがコンパイルされた後に最初に実行されるステートメントの前にブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="ebf27016895d9056071f474212eb987eed42917c" translate="yes" xml:space="preserve">
          <source>Sets a new default per-thread stack size, and returns the previous setting.</source>
          <target state="translated">新しいデフォルトのスレッドごとのスタックサイズを設定し、以前の設定を返します。</target>
        </trans-unit>
        <trans-unit id="2c55e7129849ec0fb7e59b5665f0386b97faf02a" translate="yes" xml:space="preserve">
          <source>Sets all values in the semaphore set to those given on the &lt;code&gt;VALUES&lt;/code&gt; list. &lt;code&gt;VALUES&lt;/code&gt; must contain the correct number of values.</source>
          <target state="translated">セマフォセットのすべての値を &lt;code&gt;VALUES&lt;/code&gt; リストで指定された値に設定します。 &lt;code&gt;VALUES&lt;/code&gt; には、正しい数の値が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="836b026ce35e78f78f71560f079ca22225c6fe9a" translate="yes" xml:space="preserve">
          <source>Sets and returns the random number seed for the &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; 演算子の乱数シードを設定して返します。</target>
        </trans-unit>
        <trans-unit id="4e983d1284c4a007e72e6fbd7d1a4c9631581eec" translate="yes" xml:space="preserve">
          <source>Sets and returns the random number seed for the &lt;code&gt;&lt;a href=&quot;rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; 演算子の乱数シードを設定して返します。</target>
        </trans-unit>
        <trans-unit id="618d6fee27357361ed90e8b7f4220edca50b6a1a" translate="yes" xml:space="preserve">
          <source>Sets breakpoint on current line</source>
          <target state="translated">現在の行のブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="2cc89d204452a8656dcaf4c4306e33ee025f58fe" translate="yes" xml:space="preserve">
          <source>Sets file position in FILEHANDLE to be first line greater than or equal (stringwise) to</source>
          <target state="translated">FILEHANDLE 内のファイル位置を、文字列方向に見た場合の 1 行目の位置に設定します。</target>
        </trans-unit>
        <trans-unit id="b0fc60baba67f86b5e1c8062d116af997854f9df" translate="yes" xml:space="preserve">
          <source>Sets modified time of destination to that of source.</source>
          <target state="translated">宛先の変更時刻を送信元の時刻に設定します。</target>
        </trans-unit>
        <trans-unit id="644b7fcbb973cd9c06effd39831ad990dfaef35a" translate="yes" xml:space="preserve">
          <source>Sets or returns an alternative text specified in the link.</source>
          <target state="translated">リンクで指定された代替テキストを設定または返します。</target>
        </trans-unit>
        <trans-unit id="1c22fdeace66367c0da67c7386d2f4f5e2c3a1f1" translate="yes" xml:space="preserve">
          <source>Sets the MRO of the given class to the &lt;code&gt;$type&lt;/code&gt; argument (either &lt;code&gt;c3&lt;/code&gt; or &lt;code&gt;dfs&lt;/code&gt; ).</source>
          <target state="translated">指定されたクラスのMROを &lt;code&gt;$type&lt;/code&gt; 引数（ &lt;code&gt;c3&lt;/code&gt; または &lt;code&gt;dfs&lt;/code&gt; ）に設定します。</target>
        </trans-unit>
        <trans-unit id="fde4a46e40fb48045c09644691e377f0ba99e8f1" translate="yes" xml:space="preserve">
          <source>Sets the MTIME field in the gzip header to $number.</source>
          <target state="translated">gzipヘッダのMTIMEフィールドを$numberに設定します。</target>
        </trans-unit>
        <trans-unit id="d43065cf70ac0a8eb19c630d78e3d81648e2753b" translate="yes" xml:space="preserve">
          <source>Sets the XFL byte in the gzip header to &lt;code&gt;$value&lt;/code&gt; .</source>
          <target state="translated">gzipヘッダーのXFLバイトを &lt;code&gt;$value&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="e028d291d4fde41fe0a3fdd9a42628da1f89b203" translate="yes" xml:space="preserve">
          <source>Sets the base URL for the HTML files. When cross-references are made, the HTML root is prepended to the URL.</source>
          <target state="translated">HTMLファイルのベースURLを設定します。相互参照を行う場合は、URLの前にHTMLのルートが付加されます。</target>
        </trans-unit>
        <trans-unit id="5264f30df0b2d9d3f6c49b4d8c0750b7451ab2df" translate="yes" xml:space="preserve">
          <source>Sets the centered page header to</source>
          <target state="translated">ページヘッダーを中央揃えにして</target>
        </trans-unit>
        <trans-unit id="636257c1cd11b9ecb3439e7f89cb2f6bb499ffb2" translate="yes" xml:space="preserve">
          <source>Sets the centered page header to use instead of &quot;User Contributed Perl Documentation&quot;.</source>
          <target state="translated">User Contributed Perl Documentation &quot;の代わりに使用するページヘッダーを中央に設定します。</target>
        </trans-unit>
        <trans-unit id="7c65fa2c8bdd4ae594981736a5e8e9ff7d7aa453" translate="yes" xml:space="preserve">
          <source>Sets the config variable KEY to VALUE. The empty string can be specified as usual in shells, with &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;&quot;&quot;&lt;/code&gt;</source>
          <target state="translated">構成変数KEYをVALUEに設定します。空の文字列は、シェルでは通常どおり &lt;code&gt;''&lt;/code&gt; または &lt;code&gt;&quot;&quot;&lt;/code&gt; を使用して指定できます。</target>
        </trans-unit>
        <trans-unit id="12fa70009ccfd49c6a19a03ced68f6ca52304c2e" translate="yes" xml:space="preserve">
          <source>Sets the current &lt;code&gt;cutting&lt;/code&gt; state to the given value and returns the result.</source>
          <target state="translated">現在の &lt;code&gt;cutting&lt;/code&gt; 状態を指定された値に設定し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="9c6107fe87d551884ecb7deee2ee53b3ef11fce7" translate="yes" xml:space="preserve">
          <source>Sets the current position for the &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; routine on DIRHANDLE. POS must be a value returned by &lt;code&gt;&lt;a href=&quot;functions/telldir&quot;&gt;telldir&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;functions/seekdir&quot;&gt;seekdir&lt;/a&gt;&lt;/code&gt; also has the same caveats about possible directory compaction as the corresponding system library routine.</source>
          <target state="translated">DIRHANDLE の &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; ルーチンの現在位置を設定します。POSは &lt;code&gt;&lt;a href=&quot;functions/telldir&quot;&gt;telldir&lt;/a&gt;&lt;/code&gt; が返す値でなければなりません。 &lt;code&gt;&lt;a href=&quot;functions/seekdir&quot;&gt;seekdir&lt;/a&gt;&lt;/code&gt; には、対応するシステムライブラリルーチンと同じように、ディレクトリの圧縮についても同じ注意事項があります。</target>
        </trans-unit>
        <trans-unit id="9e3ecdb54a0f348732126e86e4c3fec0047045ef" translate="yes" xml:space="preserve">
          <source>Sets the current position for the &lt;code&gt;&lt;a href=&quot;readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; routine on DIRHANDLE. POS must be a value returned by &lt;code&gt;&lt;a href=&quot;telldir&quot;&gt;telldir&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;seekdir&quot;&gt;seekdir&lt;/a&gt;&lt;/code&gt; also has the same caveats about possible directory compaction as the corresponding system library routine.</source>
          <target state="translated">DIRHANDLE の &lt;code&gt;&lt;a href=&quot;readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; ルーチンの現在位置を設定します。POSは &lt;code&gt;&lt;a href=&quot;telldir&quot;&gt;telldir&lt;/a&gt;&lt;/code&gt; が返す値でなければなりません。 &lt;code&gt;&lt;a href=&quot;seekdir&quot;&gt;seekdir&lt;/a&gt;&lt;/code&gt; には、対応するシステムライブラリルーチンと同じように、ディレクトリの圧縮についても同じ注意事項があります。</target>
        </trans-unit>
        <trans-unit id="30be77264aa234a4268b758bb5e6c9d2e1a0feb9" translate="yes" xml:space="preserve">
          <source>Sets the current position to the beginning of the directory for the &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; routine on DIRHANDLE.</source>
          <target state="translated">DIRHANDLEの &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; ルーチンの現在の位置をディレクトリの先頭に設定します。</target>
        </trans-unit>
        <trans-unit id="be5280cc0cd78c81604e4b1cafeaedf7e270c73b" translate="yes" xml:space="preserve">
          <source>Sets the current position to the beginning of the directory for the &lt;code&gt;&lt;a href=&quot;readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; routine on DIRHANDLE.</source>
          <target state="translated">DIRHANDLEの &lt;code&gt;&lt;a href=&quot;readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; ルーチンの現在の位置をディレクトリの先頭に設定します。</target>
        </trans-unit>
        <trans-unit id="8641202e53c20978a82abe0aaed8f374c2ee88ed" translate="yes" xml:space="preserve">
          <source>Sets the current priority for a process, a process group, or a user. (See setpriority(2).) Raises an exception when used on a machine that doesn't implement setpriority(2).</source>
          <target state="translated">プロセス、プロセスグループ、またはユーザーの現在の優先度を設定します。(setpriority(2)を参照)。setpriority(2)を実装していないマシンで使用された場合、例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="de415dc26fe0167b813d8b41becb203c77bcf037" translate="yes" xml:space="preserve">
          <source>Sets the current process group for the specified PID, &lt;code&gt;0&lt;/code&gt; for the current process. Raises an exception when used on a machine that doesn't implement POSIX setpgid(2) or BSD setpgrp(2). If the arguments are omitted, it defaults to &lt;code&gt;0,0&lt;/code&gt; . Note that the BSD 4.2 version of &lt;code&gt;&lt;a href=&quot;functions/setpgrp&quot;&gt;setpgrp&lt;/a&gt;&lt;/code&gt; does not accept any arguments, so only &lt;code&gt;&lt;a href=&quot;functions/setpgrp&quot;&gt;setpgrp(0,0)&lt;/a&gt;&lt;/code&gt; is portable. See also &lt;code&gt;POSIX::setsid()&lt;/code&gt; .</source>
          <target state="translated">指定したPIDの現在のプロセスグループを設定します。現在のプロセスには &lt;code&gt;0&lt;/code&gt; を設定します。POSIX setpgid（2）またはBSD setpgrp（2）を実装していないマシンで使用すると、例外が発生します。引数を省略すると、デフォルトで &lt;code&gt;0,0&lt;/code&gt; になります。BSD 4.2バージョンの &lt;code&gt;&lt;a href=&quot;functions/setpgrp&quot;&gt;setpgrp&lt;/a&gt;&lt;/code&gt; は引数を受け入れないため、移植可能なのは &lt;code&gt;&lt;a href=&quot;functions/setpgrp&quot;&gt;setpgrp(0,0)&lt;/a&gt;&lt;/code&gt; のみであることに注意してください。 &lt;code&gt;POSIX::setsid()&lt;/code&gt; もご覧ください。</target>
        </trans-unit>
        <trans-unit id="241ef80b4a2a966bef7fdabf75b36a0a852743fd" translate="yes" xml:space="preserve">
          <source>Sets the current process group for the specified PID, &lt;code&gt;0&lt;/code&gt; for the current process. Raises an exception when used on a machine that doesn't implement POSIX setpgid(2) or BSD setpgrp(2). If the arguments are omitted, it defaults to &lt;code&gt;0,0&lt;/code&gt; . Note that the BSD 4.2 version of &lt;code&gt;&lt;a href=&quot;setpgrp&quot;&gt;setpgrp&lt;/a&gt;&lt;/code&gt; does not accept any arguments, so only &lt;code&gt;&lt;a href=&quot;setpgrp&quot;&gt;setpgrp(0,0)&lt;/a&gt;&lt;/code&gt; is portable. See also &lt;code&gt;POSIX::setsid()&lt;/code&gt; .</source>
          <target state="translated">指定したPIDの現在のプロセスグループを設定します。現在のプロセスには &lt;code&gt;0&lt;/code&gt; を設定します。POSIX setpgid（2）またはBSD setpgrp（2）を実装していないマシンで使用すると、例外が発生します。引数を省略すると、デフォルトで &lt;code&gt;0,0&lt;/code&gt; になります。BSD 4.2バージョンの &lt;code&gt;&lt;a href=&quot;setpgrp&quot;&gt;setpgrp&lt;/a&gt;&lt;/code&gt; は引数を受け入れないため、移植可能なのは &lt;code&gt;&lt;a href=&quot;setpgrp&quot;&gt;setpgrp(0,0)&lt;/a&gt;&lt;/code&gt; のみであることに注意してください。 &lt;code&gt;POSIX::setsid()&lt;/code&gt; もご覧ください。</target>
        </trans-unit>
        <trans-unit id="f75284aa5b437fc82cf79d56b0ff94804625a6c5" translate="yes" xml:space="preserve">
          <source>Sets the directory to which all cross references in the resulting HTML file will be relative. Not passing this causes all links to be absolute since this is the value that tells Pod::Html the root of the documentation tree.</source>
          <target state="translated">生成されるHTMLファイル内のすべてのクロスリファレンスを相対化するディレクトリを設定します。これを渡さないと、すべてのリンクが絶対的なものになります。これは Pod::Html にドキュメントツリーのルートを伝える値なので、これを渡さないと、すべてのリンクが絶対的なものになります。</target>
        </trans-unit>
        <trans-unit id="a3ab1b7e6bbd6a8e94f997553f1dc4e778b5287a" translate="yes" xml:space="preserve">
          <source>Sets the directory to which all cross references in the resulting html file will be relative. Not passing this causes all links to be absolute since this is the value that tells Pod::Html the root of the documentation tree.</source>
          <target state="translated">生成されるhtmlファイル内のすべてのクロスリファレンスを相対化するディレクトリを設定します。これを渡さないと、すべてのリンクが絶対的なものになります。これは Pod::Html にドキュメントツリーのルートを伝えるための値です。</target>
        </trans-unit>
        <trans-unit id="88c79ef3e6324c22574d5016c69c76a2e1bc9009" translate="yes" xml:space="preserve">
          <source>Sets the floating point rounding mode, see &lt;a href=&quot;#fegetround&quot;&gt;fegetround&lt;/a&gt;.</source>
          <target state="translated">浮動小数点丸めモードを設定します&lt;a href=&quot;#fegetround&quot;&gt;。fegetroundを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="46227126063f2ea245a077112e75b448294c804c" translate="yes" xml:space="preserve">
          <source>Sets the function that will be used to fix up a call to</source>
          <target state="translated">への呼び出しを修正するために使用される関数を設定します。</target>
        </trans-unit>
        <trans-unit id="3ca97d8d4ea19ed97199f2a27770c7e465fe2399" translate="yes" xml:space="preserve">
          <source>Sets the generation number of the name at offset &lt;code&gt;po&lt;/code&gt; in the current ling pad (lvalue) to &lt;code&gt;gen&lt;/code&gt; . Note that &lt;code&gt;SvUV_set&lt;/code&gt; is hijacked for this purpose.</source>
          <target state="translated">現在のリングパッド（左辺値）のオフセット &lt;code&gt;po&lt;/code&gt; にある名前の世代番号を &lt;code&gt;gen&lt;/code&gt; に設定します。 &lt;code&gt;SvUV_set&lt;/code&gt; はこの目的でハイジャックされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f344c852d3e03fd145a036b4917130abaa308bdd" translate="yes" xml:space="preserve">
          <source>Sets the initial size for the deflation buffer. If the buffer has to be reallocated to increase the size, it will grow in increments of &lt;code&gt;Bufsize&lt;/code&gt; .</source>
          <target state="translated">デフレバッファの初期サイズを設定します。サイズを増やすためにバッファを再割り当てする必要がある場合、バッファは &lt;code&gt;Bufsize&lt;/code&gt; の増分で増加します。</target>
        </trans-unit>
        <trans-unit id="fe9376b4142de714d0978819d6ad38a5e8dbbabf" translate="yes" xml:space="preserve">
          <source>Sets the initial size for the inflation buffer. If the buffer has to be reallocated to increase the size, it will grow in increments of &lt;code&gt;Bufsize&lt;/code&gt; .</source>
          <target state="translated">インフレバッファの初期サイズを設定します。サイズを増やすためにバッファを再割り当てする必要がある場合、バッファは &lt;code&gt;Bufsize&lt;/code&gt; の増分で増加します。</target>
        </trans-unit>
        <trans-unit id="b91bb4c078fc7d0a126636b0334a9745decc8767" translate="yes" xml:space="preserve">
          <source>Sets the initial size for the output buffer used by the &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; and &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; methods. If the buffer has to be reallocated to increase the size, it will grow in increments of &lt;code&gt;Bufsize&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; および &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; メソッドで使用される出力バッファーの初期サイズを設定します。サイズを増やすためにバッファを再割り当てする必要がある場合、バッファは &lt;code&gt;Bufsize&lt;/code&gt; の増分で増加します。</target>
        </trans-unit>
        <trans-unit id="f66e2b7f1166adb8a82f61d0398a2b4c8f9f144a" translate="yes" xml:space="preserve">
          <source>Sets the initial size for the output buffer used by the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method. If the output buffer in this method has to be reallocated to increase the size, it will grow in increments of &lt;code&gt;Bufsize&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; メソッドで使用される出力バッファーの初期サイズを設定します。このメソッドの出力バッファーをサイズを増やすために再割り当てする必要がある場合は、 &lt;code&gt;Bufsize&lt;/code&gt; の増分で増加します。</target>
        </trans-unit>
        <trans-unit id="f44beb7ce8c6cb2ef09cc7354d148af06cfd3d64" translate="yes" xml:space="preserve">
          <source>Sets the key to a given &lt;code&gt;SV*&lt;/code&gt; , taking care to set the appropriate flags to indicate the presence of an &lt;code&gt;SV*&lt;/code&gt; key, and returns the same &lt;code&gt;SV*&lt;/code&gt; .</source>
          <target state="translated">適切なフラグを設定して &lt;code&gt;SV*&lt;/code&gt; キーの存在を示すように注意しながら、キーを指定された &lt;code&gt;SV*&lt;/code&gt; に設定し、同じ &lt;code&gt;SV*&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="15e89128170b4ceee0bf4ce373fab73b9a97c332" translate="yes" xml:space="preserve">
          <source>Sets the last modified time field in the zip header to $number.</source>
          <target state="translated">zip ヘッダの最終更新時刻フィールドを $number に設定します。</target>
        </trans-unit>
        <trans-unit id="38b389d97514c7bb25db24ba526bedb9f8b2216d" translate="yes" xml:space="preserve">
          <source>Sets the left-hand footer. By default, the modification date of the input file will be used, or the current date if stat() can't find that file (the case if the input is from &lt;code&gt;STDIN&lt;/code&gt; ), and the date will be formatted as &lt;code&gt;YYYY-MM-DD&lt;/code&gt; .</source>
          <target state="translated">左側のフッターを設定します。デフォルトでは、入力ファイルの変更日、またはstat（）がそのファイルを見つけられない場合は現在の日付（入力が &lt;code&gt;STDIN&lt;/code&gt; からの場合）が使用され、日付は &lt;code&gt;YYYY-MM-DD&lt;/code&gt; 形式になります。DD。</target>
        </trans-unit>
        <trans-unit id="d105f6277e2009539c1ac8e150df2092a6d8f644" translate="yes" xml:space="preserve">
          <source>Sets the log mask for the current process to &lt;code&gt;$mask_priority&lt;/code&gt; and returns the old mask. If the mask argument is 0, the current log mask is not modified. See &lt;a href=&quot;#Levels&quot;&gt;Levels&lt;/a&gt; for the list of available levels. You can use the &lt;code&gt;LOG_UPTO()&lt;/code&gt; function to allow all levels up to a given priority (but it only accept the numeric macros as arguments).</source>
          <target state="translated">現在のプロセスのログマスクを &lt;code&gt;$mask_priority&lt;/code&gt; 設定し、古いマスクを返します。マスク引数が0の場合、現在のログマスクは変更されません。使用可能なレベルのリストについては、&lt;a href=&quot;#Levels&quot;&gt;レベル&lt;/a&gt;を参照してください。あなたは使用することができます &lt;code&gt;LOG_UPTO()&lt;/code&gt; 指定した優先度にすべてのレベルをアップできるようにする機能を（それが唯一の引数として数値のマクロを受け入れます）。</target>
        </trans-unit>
        <trans-unit id="82edfdb50dedbcc054fea4a76a2bd3b980946f83" translate="yes" xml:space="preserve">
          <source>Sets the maximum time the command is allowed to run before aborting, using the built-in &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; call. If the timeout is triggered, the &lt;code&gt;errorcode&lt;/code&gt; in the return value will be set to an object of the &lt;code&gt;IPC::Cmd::TimeOut&lt;/code&gt; class. See the &lt;a href=&quot;#error-message&quot;&gt;error message&lt;/a&gt; section below for details.</source>
          <target state="translated">組み込みの &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; 呼び出しを使用して、コマンドが中止される前に実行できる最大時間を設定します。タイムアウトがトリガーされると、戻り値の &lt;code&gt;errorcode&lt;/code&gt; は &lt;code&gt;IPC::Cmd::TimeOut&lt;/code&gt; クラスのオブジェクトに設定されます。詳細については、以下の&lt;a href=&quot;#error-message&quot;&gt;エラーメッセージの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="682fa9cf99d050c0fba7523085ad62faa4146524" translate="yes" xml:space="preserve">
          <source>Sets the prototype of the function given by the &lt;code&gt;$code&lt;/code&gt; reference, or deletes it if &lt;code&gt;$prototype&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. Returns the &lt;code&gt;$code&lt;/code&gt; reference itself.</source>
          <target state="translated">&lt;code&gt;$code&lt;/code&gt; 参照で指定された関数のプロトタイプを設定するか、 &lt;code&gt;$prototype&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合は削除します。 &lt;code&gt;$code&lt;/code&gt; 参照自体を返します。</target>
        </trans-unit>
        <trans-unit id="7d70a908eb9214fc5d1f6c0a57f83628d66e50e0" translate="yes" xml:space="preserve">
          <source>Sets the quote marks used to surround C&amp;lt;&amp;gt; text to</source>
          <target state="translated">C &amp;lt;&amp;gt;テキストを囲むために使用される引用符を</target>
        </trans-unit>
        <trans-unit id="444c29bfbf96689f054e0998ba5d7d599a625105" translate="yes" xml:space="preserve">
          <source>Sets the quote marks used to surround C&amp;lt;&amp;gt; text. If the value is a single character, it is used as both the left and right quote; if it is two characters, the first character is used as the left quote and the second as the right quoted; and if it is four characters, the first two are used as the left quote and the second two as the right quote.</source>
          <target state="translated">C &amp;lt;&amp;gt;テキストを囲むために使用される引用符を設定します。値が1文字の場合は、左と右の両方の引用符として使用されます。2文字の場合、最初の文字は左引用符として使用され、2番目の文字は右引用符として使用されます。4文字の場合、最初の2つは左の引用符として使用され、2番目の2つは右の引用符として使用されます。</target>
        </trans-unit>
        <trans-unit id="3a0b233eb34eea305c7c4099287c812f67d2ec7d" translate="yes" xml:space="preserve">
          <source>Sets the real group identifier and the effective group identifier for this process. Similar to assigning a value to the Perl's builtin &lt;code&gt;$)&lt;/code&gt; variable, see &lt;a href=&quot;perlvar#%24EGID&quot;&gt;$EGID in perlvar&lt;/a&gt;, except that the latter will change only the real user identifier, and that the setgid() uses only a single numeric argument, as opposed to a space-separated list of numbers.</source>
          <target state="translated">このプロセスの実際のグループ識別子と有効なグループ識別子を設定します。Perlの組み込み &lt;code&gt;$)&lt;/code&gt; 変数に値を割り当てるのと同様に&lt;a href=&quot;perlvar#%24EGID&quot;&gt;、perlvarの$ EGIDを&lt;/a&gt;参照してください。後者は、実際のユーザーIDのみを変更し、setgid（）はスペースではなく単一の数値引数のみを使用します。数字の区切りリスト。</target>
        </trans-unit>
        <trans-unit id="6446262a06e2d17b931d62f0fce95ea62dd1b18f" translate="yes" xml:space="preserve">
          <source>Sets the real user identifier and the effective user identifier for this process. Similar to assigning a value to the Perl's builtin &lt;code&gt;$&amp;lt;&lt;/code&gt; variable, see &lt;a href=&quot;perlvar#%24UID&quot;&gt;$UID in perlvar&lt;/a&gt;, except that the latter will change only the real user identifier.</source>
          <target state="translated">このプロセスの実際のユーザー識別子と実効ユーザー識別子を設定します。Perlの組み込み &lt;code&gt;$&amp;lt;&lt;/code&gt; 変数に値を割り当てるのと同様に&lt;a href=&quot;perlvar#%24UID&quot;&gt;、perlvarの$ UIDを&lt;/a&gt;参照してください。ただし、後者は実際のユーザー識別子のみを変更します。</target>
        </trans-unit>
        <trans-unit id="02d01eed0c48fc1293b8f18b0caad609bb3115cc" translate="yes" xml:space="preserve">
          <source>Sets the sibling of o to the non-zero value sib. See also &lt;code&gt;OpLASTSIB_set&lt;/code&gt; and &lt;code&gt;OpMAYBESIB_set&lt;/code&gt; . For a higher-level interface, see &lt;code&gt;op_sibling_splice&lt;/code&gt; .</source>
          <target state="translated">oの兄弟をゼロ以外の値の兄弟に設定します。 &lt;code&gt;OpLASTSIB_set&lt;/code&gt; および &lt;code&gt;OpMAYBESIB_set&lt;/code&gt; も参照してください。より上位のインターフェースについては、 &lt;code&gt;op_sibling_splice&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6d86afb1e7c7263c10b89aacd368ee2602cae29a" translate="yes" xml:space="preserve">
          <source>Sets the socket option requested. Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. Use integer constants provided by the &lt;code&gt;Socket&lt;/code&gt; module for LEVEL and OPNAME. Values for LEVEL can also be obtained from getprotobyname. OPTVAL might either be a packed string or an integer. An integer OPTVAL is shorthand for pack(&quot;i&quot;, OPTVAL).</source>
          <target state="translated">要求されたソケットオプションを設定します。エラー時に &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。LEVELおよびOPNAMEには、 &lt;code&gt;Socket&lt;/code&gt; モジュールによって提供される整数定数を使用します。LEVELの値は、getprotobynameから取得することもできます。OPTVALは、パックされた文字列または整数のいずれかです。整数OPTVALはpack（ &quot;i&quot;、OPTVAL）の省略形です。</target>
        </trans-unit>
        <trans-unit id="476b473e54c30f55552f8a4f709ce3c08424127a" translate="yes" xml:space="preserve">
          <source>Sets the socket option requested. Returns &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. Use integer constants provided by the &lt;code&gt;Socket&lt;/code&gt; module for LEVEL and OPNAME. Values for LEVEL can also be obtained from getprotobyname. OPTVAL might either be a packed string or an integer. An integer OPTVAL is shorthand for pack(&quot;i&quot;, OPTVAL).</source>
          <target state="translated">要求されたソケットオプションを設定します。エラー時に &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。LEVELおよびOPNAMEには、 &lt;code&gt;Socket&lt;/code&gt; モジュールによって提供される整数定数を使用します。LEVELの値は、getprotobynameから取得することもできます。OPTVALは、パックされた文字列または整数のいずれかです。整数OPTVALはpack（ &quot;i&quot;、OPTVAL）の省略形です。</target>
        </trans-unit>
        <trans-unit id="93bb929591d0528a35cd2069a37354aa3d054448" translate="yes" xml:space="preserve">
          <source>Sets the socket type and options to be used for the next call to &lt;code&gt;openlog()&lt;/code&gt; or &lt;code&gt;syslog()&lt;/code&gt; . Returns true on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;openlog()&lt;/code&gt; または &lt;code&gt;syslog()&lt;/code&gt; への次の呼び出しで使用されるソケットのタイプとオプションを設定します。成功した場合はtrue、失敗した場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b86e212af2f126faa3544cc569f9b087e3aee0ca" translate="yes" xml:space="preserve">
          <source>Sets the source address from which pings will be sent. This must be the address of one of the interfaces on the local host. $local_addr may be specified as a hostname or as a text IP address such as &quot;192.168.1.1&quot;.</source>
          <target state="translated">ping を送信する送信元アドレスを設定します。これは、ローカルホスト上のインターフェイスのいずれかのアドレスでなければなりません。local_addr は、ホスト名または &quot;192.168.1.1&quot; のようなテキスト IP アドレスとして指定できます。</target>
        </trans-unit>
        <trans-unit id="92ce4dae9146598ac7553e913aebeb64b00cf916" translate="yes" xml:space="preserve">
          <source>Sets the status code to 580 and the response text to 'Unsupported command'. Returns zero.</source>
          <target state="translated">ステータスコードを 580 に、応答テキストを「サポートされていないコマンド」に設定します。ゼロを返します。</target>
        </trans-unit>
        <trans-unit id="9936295e045b1c4d6375ecd1e9facebf69d817b6" translate="yes" xml:space="preserve">
          <source>Sets the total number of items in the tied array associated with object</source>
          <target state="translated">オブジェクトに関連付けられたタイド配列のアイテムの総数を設定します。</target>
        </trans-unit>
        <trans-unit id="40249eaa342f002e4c8097a609cf593eebb47890" translate="yes" xml:space="preserve">
          <source>Sets the umask for the process to EXPR and returns the previous value. If EXPR is omitted, merely returns the current umask.</source>
          <target state="translated">プロセスの umask を EXPR に設定し、前の値を返します。EXPR が省略された場合は、単に現在の umask を返します。</target>
        </trans-unit>
        <trans-unit id="96a8396b70ef80374f00155bbbbd208815e4f883" translate="yes" xml:space="preserve">
          <source>Sets the value of the</source>
          <target state="translated">の値を設定します。</target>
        </trans-unit>
        <trans-unit id="da35a68431a43130ea5825a62bfd2765d5c19d3d" translate="yes" xml:space="preserve">
          <source>Sets up any variable needed by the &lt;code&gt;UNDERBAR&lt;/code&gt; macro. It used to define &lt;code&gt;padoff_du&lt;/code&gt; , but it is currently a noop. However, it is strongly advised to still use it for ensuring past and future compatibility.</source>
          <target state="translated">&lt;code&gt;UNDERBAR&lt;/code&gt; マクロで必要な変数を設定します。以前は &lt;code&gt;padoff_du&lt;/code&gt; を定義していましたが、現在は何もしていません。ただし、過去と将来の互換性を確保するために引き続き使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="d3979a66aaf6a4132bfe358718ac0f220a93191b" translate="yes" xml:space="preserve">
          <source>Sets up macros having to do with XS code. Currently just INST_STATIC, INST_DYNAMIC and INST_BOOT.</source>
          <target state="translated">XSコードに関連するマクロを設定します。現在は INST_STATIC,INST_DYNAMIC,INST_BOOT だけです。</target>
        </trans-unit>
        <trans-unit id="d872b0d7d162b74be74e6f23f9ddcaccb891eda0" translate="yes" xml:space="preserve">
          <source>Sets up stack and mark pointers for an XSUB, calling dSP and dMARK. Sets up the &lt;code&gt;ax&lt;/code&gt; and &lt;code&gt;items&lt;/code&gt; variables by calling &lt;code&gt;dAX&lt;/code&gt; and &lt;code&gt;dITEMS&lt;/code&gt; . This is usually handled automatically by &lt;code&gt;xsubpp&lt;/code&gt; .</source>
          <target state="translated">XSUBのスタックポインターとマークポインターをセットアップし、dSPとdMARKを呼び出します。 &lt;code&gt;dAX&lt;/code&gt; と &lt;code&gt;dITEMS&lt;/code&gt; を呼び出して、 &lt;code&gt;ax&lt;/code&gt; 変数と &lt;code&gt;items&lt;/code&gt; 変数を設定します。これは通常、 &lt;code&gt;xsubpp&lt;/code&gt; によって自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="50c1d31f3b0a1748548fed8579f46b56c74b7d28" translate="yes" xml:space="preserve">
          <source>Sets up the &lt;code&gt;ax&lt;/code&gt; variable and stack marker variable &lt;code&gt;mark&lt;/code&gt; . This is usually handled automatically by &lt;code&gt;xsubpp&lt;/code&gt; by calling &lt;code&gt;dXSARGS&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;ax&lt;/code&gt; 変数とスタックマーカー変数 &lt;code&gt;mark&lt;/code&gt; を設定します。これは通常、 &lt;code&gt;dXSARGS&lt;/code&gt; を呼び出すことにより、 &lt;code&gt;xsubpp&lt;/code&gt; によって自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="336d4ca0113d319afd8c3b15eb7125c19977386b" translate="yes" xml:space="preserve">
          <source>Sets up the &lt;code&gt;ax&lt;/code&gt; variable. This is usually handled automatically by &lt;code&gt;xsubpp&lt;/code&gt; by calling &lt;code&gt;dXSARGS&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;ax&lt;/code&gt; 変数を設定します。これは通常、 &lt;code&gt;dXSARGS&lt;/code&gt; を呼び出すことにより、 &lt;code&gt;xsubpp&lt;/code&gt; によって自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="769232c787891f58bc6352e4ad486992f3752ce0" translate="yes" xml:space="preserve">
          <source>Sets up the &lt;code&gt;items&lt;/code&gt; variable. This is usually handled automatically by &lt;code&gt;xsubpp&lt;/code&gt; by calling &lt;code&gt;dXSARGS&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;items&lt;/code&gt; 変数を設定します。これは通常、 &lt;code&gt;dXSARGS&lt;/code&gt; を呼び出すことにより、 &lt;code&gt;xsubpp&lt;/code&gt; によって自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="82914d021c66bde36ac95fca91c293751209673a" translate="yes" xml:space="preserve">
          <source>Sets up the &lt;code&gt;ix&lt;/code&gt; variable for an XSUB which has aliases. This is usually handled automatically by &lt;code&gt;xsubpp&lt;/code&gt; .</source>
          <target state="translated">エイリアスを持つXSUBの &lt;code&gt;ix&lt;/code&gt; 変数を設定します。これは通常、 &lt;code&gt;xsubpp&lt;/code&gt; によって自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="70f73bf30c084eaafe7cce604897dbd04c3dc416" translate="yes" xml:space="preserve">
          <source>Setting $!</source>
          <target state="translated">設定$!</target>
        </trans-unit>
        <trans-unit id="751f2128bdd975d372eba41571f3151993f0658a" translate="yes" xml:space="preserve">
          <source>Setting $ENV{TZ} in Threads on Win32</source>
          <target state="translated">Win32のスレッドで$ENV{TZ}を設定する</target>
        </trans-unit>
        <trans-unit id="7f4ae0b32e0a64452b967cad0f6223cbd4944c43" translate="yes" xml:space="preserve">
          <source>Setting &lt;a href=&quot;http://search.cpan.org/perldoc/%24Test::Builder::Level&quot;&gt;$Test::Builder::Level&lt;/a&gt; overrides. This is typically useful localized:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/%24Test::Builder::Level&quot;&gt;$ Test :: Builder :: Level&lt;/a&gt;オーバーライドの設定。これは通常、ローカライズに役立ちます。</target>
        </trans-unit>
        <trans-unit id="794ce9ed7ea02215107551f7430c3152412d539f" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;$/&lt;/code&gt; to a reference to an integer, scalar containing an integer, or scalar that's convertible to an integer will attempt to read records instead of lines, with the maximum record size being the referenced integer number of characters. So this:</source>
          <target state="translated">&lt;code&gt;$/&lt;/code&gt; を整数、整数を含むスカラー、または整数に変換可能なスカラーへの参照に設定すると、行の代わりにレコードが読み取られます。最大レコードサイズは、参照される整数の文字数です。したがって、この：</target>
        </trans-unit>
        <trans-unit id="17ddd91296b80d48f63b97d11f86bf92fa707898" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;$Storable::canonical&lt;/code&gt; may not yield frozen strings that compare equal due to possible stringification of numbers. When the string version of a scalar exists, it is the form stored; therefore, if you happen to use your numbers as strings between two freezing operations on the same data structures, you will get different results.</source>
          <target state="translated">&lt;code&gt;$Storable::canonical&lt;/code&gt; 設定すると、数値が文字列化される可能性があるため、同等に比較される凍結文字列が生成されない場合があります。スカラーの文字列バージョンが存在する場合、それは格納されたフォームです。したがって、同じデータ構造で2つのフリーズ操作の間に数値として文字列を使用した場合、結果は異なります。</target>
        </trans-unit>
        <trans-unit id="24a709bc63116d6d03dcd3b4fd0b3541521b8558" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;$|&lt;/code&gt; for an I/O stream causes data to be flushed all the way to disk on each write (</source>
          <target state="translated">&lt;code&gt;$|&lt;/code&gt; 設定しています I / Oストリームの場合、データは書き込みごとにディスクにフラッシュされます（</target>
        </trans-unit>
        <trans-unit id="7bdb73ae2acf769ed4bd9afac1e469320505fda3" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; also resets the</source>
          <target state="translated">設定 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; はまたリセットされます</target>
        </trans-unit>
        <trans-unit id="ce72a4be942d96b86ceb3742d54f6473d82ec88a" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;&lt;a href=&quot;pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; also resets the</source>
          <target state="translated">設定 &lt;code&gt;&lt;a href=&quot;pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; はまたリセットされます</target>
        </trans-unit>
        <trans-unit id="81e935f5e5ab31635e7b03bba630b9938eecfc87" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;PL_perl_destruct_level&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; makes everything squeaky clean:</source>
          <target state="translated">&lt;code&gt;PL_perl_destruct_level&lt;/code&gt; を &lt;code&gt;1&lt;/code&gt; に設定すると、すべてがきしむクリーンになります。</target>
        </trans-unit>
        <trans-unit id="50fa85492558cd44d6b9f1afbdff70a2e4108f54" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;STDIN&lt;/code&gt; and/or &lt;code&gt;STDOUT&lt;/code&gt; individually</source>
          <target state="translated">&lt;code&gt;STDIN&lt;/code&gt; または &lt;code&gt;STDOUT&lt;/code&gt; 、あるいはその両方を個別に設定する</target>
        </trans-unit>
        <trans-unit id="4f9eb8079771b6da74df870a0a1370a3cb9be87d" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;complain_stderr&lt;/code&gt; also sets &lt;code&gt;no_errata_section&lt;/code&gt; .</source>
          <target state="translated">設定 &lt;code&gt;complain_stderr&lt;/code&gt; はまた、設定 &lt;code&gt;no_errata_section&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="10362b055af0308648ca63d33ff10a0c0f9934a6" translate="yes" xml:space="preserve">
          <source>Setting STDIN and/or STDOUT individually</source>
          <target state="translated">STDIN、STDOUTを個別に設定する</target>
        </trans-unit>
        <trans-unit id="7dde8cccfbe3175df65836547f417ec4e979d0f3" translate="yes" xml:space="preserve">
          <source>Setting Up Perl on Windows</source>
          <target state="translated">WindowsでPerlを設定する</target>
        </trans-unit>
        <trans-unit id="2f1417ccd3a0143c9a40476570cd8fb02ccad4ed" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;%SIGRT&lt;/code&gt; elements is equivalent to calling this:</source>
          <target state="translated">&lt;code&gt;%SIGRT&lt;/code&gt; 要素を設定することは、これを呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="82ec05020c3a0391ac46c3f2c9e7e9c6639db3b3" translate="yes" xml:space="preserve">
          <source>Setting the exec bit on some locations (generally</source>
          <target state="translated">いくつかの場所にexecビットを設定する(一般的には</target>
        </trans-unit>
        <trans-unit id="7b1515ddab2e35849ea7ad601162395461e45ef5" translate="yes" xml:space="preserve">
          <source>Setting the memory limit to 0 will inhibit caching; records will be fetched from disk every time you examine them.</source>
          <target state="translated">メモリ制限を 0 に設定すると、キャッシングが禁止されます。</target>
        </trans-unit>
        <trans-unit id="f70563603bae0022751c2fbafcf703970f2af6b4" translate="yes" xml:space="preserve">
          <source>Setting this adds perl command line switches to each test file run.</source>
          <target state="translated">これを設定すると、テストファイルを実行するたびにPerlのコマンドラインスイッチが追加されます。</target>
        </trans-unit>
        <trans-unit id="3a36ae3404b81240dcc4f244db3b5d9e9fe68945" translate="yes" xml:space="preserve">
          <source>Setting this appropriately is useful if you want to use the RTF to spellcheck, and/or if you want it to hyphenate right.</source>
          <target state="translated">これを適切に設定しておくと、RTFを使ってスペルチェックをしたい場合や、ハイフネーションを正しくしたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="eb28c99d71e509270976d6187ac7708f64d8198f" translate="yes" xml:space="preserve">
          <source>Setting this attribute (to a value that's a regexp) means that you want to limit the results just to items whose podnames match the given regexp. Normally this option is not needed, and the more efficient &lt;code&gt;limit_glob&lt;/code&gt; attribute is used instead.</source>
          <target state="translated">この属性を（正規表現である値に）設定すると、指定された正規表現に一致するポッド名を持つアイテムのみに結果を制限することになります。通常、このオプションは必要ありません。代わりに、より効率的な &lt;code&gt;limit_glob&lt;/code&gt; 属性が使用されます。</target>
        </trans-unit>
        <trans-unit id="978f31a63d0a75abda9032068834ce25f6f936c4" translate="yes" xml:space="preserve">
          <source>Setting this attribute to a string value means that the searches should begin in the specified subdirectory name (like &quot;Pod&quot; or &quot;File::Find&quot;, also expressible as &quot;File/Find&quot;). For example, the search option &lt;code&gt;$search-&amp;gt;limit_glob(&quot;File::Find::R*&quot;)&lt;/code&gt; is the same as the combination of the search options &lt;code&gt;$search-&amp;gt;limit_re(&quot;^File::Find::R&quot;) -&amp;gt; dir_prefix(&quot;File::Find&quot;)&lt;/code&gt; .</source>
          <target state="translated">この属性を文字列値に設定すると、指定したサブディレクトリ名（ &quot;Pod&quot;や &quot;File :: Find&quot;のように、 &quot;File / Find&quot;とも表現できます）から検索が開始されます。たとえば、検索オプション &lt;code&gt;$search-&amp;gt;limit_glob(&quot;File::Find::R*&quot;)&lt;/code&gt; は、検索オプション &lt;code&gt;$search-&amp;gt;limit_re(&quot;^File::Find::R&quot;) -&amp;gt; dir_prefix(&quot;File::Find&quot;)&lt;/code&gt; の組み合わせと同じです。-&amp;gt; dir_prefix（ &quot;File :: Find&quot;）。</target>
        </trans-unit>
        <trans-unit id="428f294c336f76408adb1fa256045589284c8f18" translate="yes" xml:space="preserve">
          <source>Setting this environment variable to 1 means that Perl will simply use the first suitable LSP enumerated in the catalog, which keeps</source>
          <target state="translated">この環境変数を1に設定すると、Perlは単にカタログに列挙された最初の適切なLSPを使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="4c601f26f0773d007fbfc9c3dd2bd190b39a86e1" translate="yes" xml:space="preserve">
          <source>Setting this to a true value will cause the test to ignore if the output sent by the test to the error stream does not match that declared with &lt;code&gt;test_err&lt;/code&gt; .</source>
          <target state="translated">これをtrue値に設定すると、テストによってエラーストリームに送信された出力が &lt;code&gt;test_err&lt;/code&gt; で宣言された出力と一致しない場合、テストは無視されます。</target>
        </trans-unit>
        <trans-unit id="dc6a7f1ac441089e81cf334470f68a0350c3eeb4" translate="yes" xml:space="preserve">
          <source>Setting this to a true value will cause the test to ignore if the output sent by the test to the output stream does not match that declared with &lt;code&gt;test_out&lt;/code&gt; .</source>
          <target state="translated">これをtrue値に設定すると、テストによって出力ストリームに送信された出力が &lt;code&gt;test_out&lt;/code&gt; で宣言されたものと一致しない場合、テストは無視されます。</target>
        </trans-unit>
        <trans-unit id="a18b09e20cf39c98db8028c26245168d90e6eceb" translate="yes" xml:space="preserve">
          <source>Setting this to true will make the harness display the number of milliseconds each test took. You can also use</source>
          <target state="translated">これをtrueに設定すると、ハーネスは各テストにかかったミリ秒数を表示します。また</target>
        </trans-unit>
        <trans-unit id="83b02bd49b46e2f5bcb31f889abff75ab229e8cf" translate="yes" xml:space="preserve">
          <source>Setting this variable includes the tests in</source>
          <target state="translated">この変数を設定すると</target>
        </trans-unit>
        <trans-unit id="748c80296dffa5e7f806097b537391f16d71d73d" translate="yes" xml:space="preserve">
          <source>Setting this variable runs all the Net::Ping modules tests, otherwise some tests that interact with the outside world are skipped. See &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perl58delta.html&quot;&gt;perl58delta&lt;/a&gt;.</source>
          <target state="translated">この変数を設定すると、すべてのNet :: Pingモジュールテストが実行されます。それ以外の場合、外界と相互作用する一部のテストはスキップされます。&lt;a href=&quot;https://perldoc.perl.org/5.26.0/perl58delta.html&quot;&gt;perl58deltaを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7593ed09c7d1c65b5b02df3383bcc07c6f89e435" translate="yes" xml:space="preserve">
          <source>Setting this variable skips the vrexx.t tests for OS2::REXX.</source>
          <target state="translated">この変数を設定すると、OS2::REXX の vrexx.t テストをスキップします。</target>
        </trans-unit>
        <trans-unit id="34781ef166af178f4a16f210ffda5361e9f8fee9" translate="yes" xml:space="preserve">
          <source>Setting this variable to any other value than &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is deprecated due to fundamental defects in its design and implementation. It is planned to remove it from a future Perl version. Its purpose was to allow your non-ASCII Perl scripts to not have to be written in UTF-8; this was useful before editors that worked on UTF-8 encoded text were common, but that was long ago. It causes problems, such as affecting the operation of other modules that aren't expecting it, causing general mayhem. Its use can lead to segfaults.</source>
          <target state="translated">この変数を &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 以外の値に設定することは、その設計と実装に根本的な欠陥があるため非推奨です。将来のPerlバージョンから削除する予定です。その目的は、非ASCIIのPerlスクリプトをUTF-8で作成する必要がないようにすることでした。これは、UTF-8でエンコードされたテキストを扱うエディターが一般的になる前は便利でしたが、それはずっと前のことでした。それはそれを期待していない他のモジュールの動作に影響を与える、一般的な騒乱を引き起こすなどの問題を引き起こします。これを使用すると、セグメンテーション違反が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a486a54881ca4944733417c8d453b816b797adac" translate="yes" xml:space="preserve">
          <source>Setting up a cross-compilation environment</source>
          <target state="translated">クロスコンパイル環境の設定</target>
        </trans-unit>
        <trans-unit id="6edda08937ce5437ef2f9deb1364a59b1289c766" translate="yes" xml:space="preserve">
          <source>Setting up a signal handler will need to be carefully considered and controlled. What mask is in effect when a signal handler gets called? If a user can get an imported function to get an exception and call the user's signal handler, does that user's restricted mask get re-instated before the handler is called? Does an imported handler get called with its original mask or the user's one?</source>
          <target state="translated">シグナルハンドラの設定は慎重に検討し、制御する必要があります。シグナルハンドラが呼び出されたとき、どのようなマスクが有効になるか?ユーザーがインポートされた関数で例外が発生し、そのユーザーのシグナルハンドラを呼び出すことができた場合、そのユーザーの制限されたマスクは、そのハンドラが呼び出される前に再設定されますか? インポートされたハンドラは元のマスクで呼び出されるのか、ユーザのマスクで呼び出されるのか?</target>
        </trans-unit>
        <trans-unit id="8a164660ff7c0aea058ea9a4d65db581e8d4cbe7" translate="yes" xml:space="preserve">
          <source>Setting up tests</source>
          <target state="translated">テストの設定</target>
        </trans-unit>
        <trans-unit id="13bf8ac5cbad88170c30283bc7715ae8986fb23c" translate="yes" xml:space="preserve">
          <source>Setuid scripts have additional constraints that can produce error messages such as &quot;Insecure dependency&quot;. See &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;.</source>
          <target state="translated">Setuidスクリプトには、「安全でない依存関係」などのエラーメッセージを生成する可能性がある追加の制約があります。&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="7542e5edaf78a7e51c593cd897bf4d6df150673c" translate="yes" xml:space="preserve">
          <source>Setup and utilities for Perl on OS/390</source>
          <target state="translated">OS/390でのPerlのセットアップとユーティリティ</target>
        </trans-unit>
        <trans-unit id="e42bc033db0c04c8f20ac694388fa4c4bbcb2050" translate="yes" xml:space="preserve">
          <source>Several &quot;Eskimo&quot; languages.</source>
          <target state="translated">いくつかの「エスキモー語」。</target>
        </trans-unit>
        <trans-unit id="a5a086e14a1c43e8380db16eefaab3f189882d72" translate="yes" xml:space="preserve">
          <source>Several CPAN modules may be able to help, including &lt;a href=&quot;ipc/open2&quot;&gt;IPC::Open2&lt;/a&gt; or &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC::Run&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Parallel::Jobs&quot;&gt;Parallel::Jobs&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Parallel::ForkManager&quot;&gt;Parallel::ForkManager&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/POE&quot;&gt;POE&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Proc::Background&quot;&gt;Proc::Background&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Process&quot;&gt;Win32::Process&lt;/a&gt;. There are many other modules you might use, so check those namespaces for other options too.</source>
          <target state="translated">&lt;a href=&quot;ipc/open2&quot;&gt;IPC :: Open2&lt;/a&gt;または&lt;a href=&quot;ipc/open3&quot;&gt;IPC :: Open3&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC :: Run&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Parallel::Jobs&quot;&gt;Parallel :: Jobs&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Parallel::ForkManager&quot;&gt;Parallel :: ForkManager&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/POE&quot;&gt;POE&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Proc::Background&quot;&gt;Proc :: Background&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Process&quot;&gt;Win32 :: Process&lt;/a&gt;など、いくつかのCPANモジュールが役立つ場合があります。使用する可能性のある他の多くのモジュールがあるため、他のオプションについてもそれらの名前空間を確認してください。</target>
        </trans-unit>
        <trans-unit id="72ba89d4b4f03b960d7a7c1b62fec8c497398f12" translate="yes" xml:space="preserve">
          <source>Several Perl functions and modules depend on the existence of some optional libraries. Configure will find them if they are installed in one of the directories listed as being used for library searches. Pre-built packages for most of these are available from the Cygwin installer.</source>
          <target state="translated">Perl のいくつかの関数やモジュールは、いくつかのオプションのライブラリの存在に依存しています。Configure は、ライブラリ検索に使用されるディレクトリにインストールされていれば、それらを検索します。これらの大部分のビルド済みパッケージは、Cygwin インストーラから入手できます。</target>
        </trans-unit>
        <trans-unit id="b507fbc9e6ee713770906faa20b03579b86f6852" translate="yes" xml:space="preserve">
          <source>Several Unix/Linux related magazines frequently include articles on Perl.</source>
          <target state="translated">いくつかの Unix/Linux 関連の雑誌には、Perl に関する記事が頻繁に掲載されています。</target>
        </trans-unit>
        <trans-unit id="36833c191e11bf7ea7ef7228e804dddd43eea89d" translate="yes" xml:space="preserve">
          <source>Several cleanups prompted by lack of compatible perlglob.exe under Borland (GSAR 27-MAY-97)</source>
          <target state="translated">ボーランドのperlglob.exeに互換性がないため、いくつかのクリーンアップを実行しました (GSAR 27-MAY-97)。</target>
        </trans-unit>
        <trans-unit id="db13e38fcdff385659bc07b56eda3f3ec8420c2f" translate="yes" xml:space="preserve">
          <source>Several configuration variables can be used to control the kind of output generated when using the procedural interface. These variables are usually &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;ized in a block so that other parts of the code are not affected by the change.</source>
          <target state="translated">いくつかの構成変数を使用して、手続き型インターフェースの使用時に生成される出力の種類を制御できます。これらの変数は通常、ブロック内で &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 化されているため、コードの他の部分は変更の影響を受けません。</target>
        </trans-unit>
        <trans-unit id="025ea220ceeecd1a101f60931a1651e8d46a3ae1" translate="yes" xml:space="preserve">
          <source>Several constructs above specify a character by a number. That number gives the character's position in the character set encoding (indexed from 0). This is called synonymously its ordinal, code position, or code point. Perl works on platforms that have a native encoding currently of either ASCII/Latin1 or EBCDIC, each of which allow specification of 256 characters. In general, if the number is 255 (0xFF, 0377) or below, Perl interprets this in the platform's native encoding. If the number is 256 (0x100, 0400) or above, Perl interprets it as a Unicode code point and the result is the corresponding Unicode character. For example &lt;code&gt;\x{50}&lt;/code&gt; and &lt;code&gt;\o{120}&lt;/code&gt; both are the number 80 in decimal, which is less than 256, so the number is interpreted in the native character set encoding. In ASCII the character in the 80th position (indexed from 0) is the letter &lt;code&gt;&quot;P&quot;&lt;/code&gt; , and in EBCDIC it is the ampersand symbol &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; . &lt;code&gt;\x{100}&lt;/code&gt; and &lt;code&gt;\o{400}&lt;/code&gt; are both 256 in decimal, so the number is interpreted as a Unicode code point no matter what the native encoding is. The name of the character in the 256th position (indexed by 0) in Unicode is &lt;code&gt;LATIN CAPITAL LETTER A WITH MACRON&lt;/code&gt; .</source>
          <target state="translated">上記のいくつかの構成では、数字で文字を指定しています。その数は、文字セットエンコーディング（0からインデックス付け）での文字の位置を示します。これは、その序数、コード位置、またはコードポイントと同義語で呼ばれます。 Perlは、現在ASCII / Latin1またはEBCDICのいずれかのネイティブエンコーディングを持つプラットフォームで動作します。各エンコーディングでは256文字を指定できます。一般に、数値が255（0xFF、0377）以下の場合、Perlはこれをプラットフォームのネイティブエンコーディングで解釈します。数値が256（0x100、0400）以上の場合、PerlはそれをUnicodeコードポイントとして解釈し、結果は対応するUnicode文字になります。たとえば、 &lt;code&gt;\x{50}&lt;/code&gt; および &lt;code&gt;\o{120}&lt;/code&gt; どちらも10進数で80であり、256未満なので、ネイティブキャラクタセットエンコーディングで解釈されます。 ASCIIでは、80番目の位置（0から始まる）の文字は文字 &lt;code&gt;&quot;P&quot;&lt;/code&gt; であり、EBCDICではアンパサンド記号 &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; です。 &lt;code&gt;\x{100}&lt;/code&gt; と &lt;code&gt;\o{400}&lt;/code&gt; はどちらも10進数で256であるため、ネイティブエンコーディングが何であっても、数値はUnicodeコードポイントとして解釈されます。 Unicodeの256番目の位置（0でインデックス付けされる）の文字の名前は、 &lt;code&gt;LATIN CAPITAL LETTER A WITH MACRON&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dbb881b9834838039d809c3bb093fb3ca4e17bb6" translate="yes" xml:space="preserve">
          <source>Several modules can handle this sort of parsing--&lt;a href=&quot;text/balanced&quot;&gt;Text::Balanced&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV&quot;&gt;Text::CSV&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV_XS&quot;&gt;Text::CSV_XS&lt;/a&gt;, and &lt;a href=&quot;text/parsewords&quot;&gt;Text::ParseWords&lt;/a&gt;, among others.</source>
          <target state="translated">いくつかのモジュールは、この種の解析を処理できます-Text &lt;a href=&quot;text/balanced&quot;&gt;:: Balanced&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV&quot;&gt;Text :: CSV&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Text::CSV_XS&quot;&gt;Text :: CSV_XS&lt;/a&gt;、および&lt;a href=&quot;text/parsewords&quot;&gt;Text :: ParseWords&lt;/a&gt;など。</target>
        </trans-unit>
        <trans-unit id="ec37cc7162eb28d20005e06a7dec3c5b338debaf" translate="yes" xml:space="preserve">
          <source>Several modules let you calculate with unlimited or fixed precision (bound only by memory and CPU time). There are also some non-standard modules that provide faster implementations via external C libraries.</source>
          <target state="translated">いくつかのモジュールでは、無制限または固定の精度で計算することができます(メモリとCPU時間のみに制限されます)。また、外部の C ライブラリを介してより高速な実装を提供する非標準モジュールもあります。</target>
        </trans-unit>
        <trans-unit id="67c147f88fedb964246268fefad75f6aa72aeeaf" translate="yes" xml:space="preserve">
          <source>Several other minor changes</source>
          <target state="translated">他にもいくつかのマイナーチェンジがあります。</target>
        </trans-unit>
        <trans-unit id="cbd707922dc7f0ac0b710570868c333b9e909d87" translate="yes" xml:space="preserve">
          <source>Several parameters correspond to &lt;code&gt;ExtUtils::Mksymlists::Mksymlists()&lt;/code&gt; options, as follows:</source>
          <target state="translated">以下のように、いくつかのパラメーターは &lt;code&gt;ExtUtils::Mksymlists::Mksymlists()&lt;/code&gt; オプションに対応しています。</target>
        </trans-unit>
        <trans-unit id="51ce731fa04ac92371342430f3071e509e7a9526" translate="yes" xml:space="preserve">
          <source>Several required files will still be missing:</source>
          <target state="translated">いくつかの必要なファイルはまだ不足しています。</target>
        </trans-unit>
        <trans-unit id="12bb0a278c9f044c640d0d62fedbff6f2aff8b1d" translate="yes" xml:space="preserve">
          <source>Several special variables also refer back to portions of the previous match. &lt;code&gt;$+&lt;/code&gt; returns whatever the last bracket match matched. &lt;code&gt;$&amp;amp;&lt;/code&gt; returns the entire matched string. (At one point &lt;code&gt;$0&lt;/code&gt; did also, but now it returns the name of the program.) &lt;code&gt;$`&lt;/code&gt; returns everything before the matched string. &lt;code&gt;$'&lt;/code&gt; returns everything after the matched string. And &lt;code&gt;$^N&lt;/code&gt; contains whatever was matched by the most-recently closed group (submatch). &lt;code&gt;$^N&lt;/code&gt; can be used in extended patterns (see below), for example to assign a submatch to a variable.</source>
          <target state="translated">いくつかの特殊変数は、以前の一致の一部を参照します。 &lt;code&gt;$+&lt;/code&gt; は、最後に一致したブラケットが一致したものを返します。 &lt;code&gt;$&amp;amp;&lt;/code&gt; は一致した文字列全体を返します。 （ある時点で &lt;code&gt;$0&lt;/code&gt; も実行されましたが、現在はプログラムの名前を返します。） &lt;code&gt;$`&lt;/code&gt; は、一致した文字列の前のすべてを返します。 &lt;code&gt;$'&lt;/code&gt; は、一致した文字列の後のすべてを返します。また、 &lt;code&gt;$^N&lt;/code&gt; は、最近閉じたグループ（サブマッチ）が一致したものすべてが含まれます。 &lt;code&gt;$^N&lt;/code&gt; は、拡張パターン（以下を参照）で使用できます。たとえば、変数にサブマッチを割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="353c61ff546c0748767d65edffd80e2d9a48d8cb" translate="yes" xml:space="preserve">
          <source>Several styles of output are possible, all controlled by setting the &lt;code&gt;Indent&lt;/code&gt; flag. See &lt;a href=&quot;#Configuration-Variables-or-Methods&quot;&gt;Configuration Variables or Methods&lt;/a&gt; below for details.</source>
          <target state="translated">いくつかのスタイルの出力が可能で、すべて &lt;code&gt;Indent&lt;/code&gt; フラグを設定することによって制御されます。詳細については、以下の&lt;a href=&quot;#Configuration-Variables-or-Methods&quot;&gt;構成変数またはメソッドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3fa635b974cdf4d0bafcdf7021b5b41371ca982" translate="yes" xml:space="preserve">
          <source>Several tools needed to build perl are located in /usr/ccs/bin/: ar, as, ld, and make. Make sure that /usr/ccs/bin/ is in your PATH.</source>
          <target state="translated">perl をビルドするために必要なツールは /usr/ccs/bin/にあります。/usr/ccs/bin/がPATHにあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e75716eac93d8afc288ec94b4c657ebfcf948efd" translate="yes" xml:space="preserve">
          <source>Severe warnings are always enabled, unless they are explicitly disabled with the &lt;code&gt;warnings&lt;/code&gt; pragma or the &lt;b&gt;-X&lt;/b&gt; switch.</source>
          <target state="translated">重大な警告は、 &lt;code&gt;warnings&lt;/code&gt; プラグマまたは&lt;b&gt;-X&lt;/b&gt;スイッチで明示的に無効にしない限り、常に有効です。</target>
        </trans-unit>
        <trans-unit id="e7dd772b3854a8bc3b300bf85e9a40b9bf25a50f" translate="yes" xml:space="preserve">
          <source>Shall we always set the FTP_PASSIVE environment variable when dealing with ftp download (yes/no)?</source>
          <target state="translated">ftpダウンロードを扱う際には、常にFTP_PASSIVE環境変数を設定しなければならないのでしょうか(yes/no)?</target>
        </trans-unit>
        <trans-unit id="b8bf62db0a202cfe8b527778be027079163e0d35" translate="yes" xml:space="preserve">
          <source>Share what you did with the other people. Relax. Enjoy fruits of your work.</source>
          <target state="translated">自分がしたことを他の人と共有しましょう。リラックスして 仕事の成果を楽しむ。</target>
        </trans-unit>
        <trans-unit id="df3c637adb69abac13b29419d0cfa8b766ae4adc" translate="yes" xml:space="preserve">
          <source>Shared And Unshared Data</source>
          <target state="translated">共有データと非共有データ</target>
        </trans-unit>
        <trans-unit id="2ad8427c8c9758999d3e74a7bdd5fb7162a57750" translate="yes" xml:space="preserve">
          <source>Shared libraries created on a platform using a particular PA-RISC version are not usable on platforms using an earlier PA-RISC version by default. However, this backwards compatibility may be enabled using the same +DAportable compiler flag (with the same PA-RISC 1.0 caveat mentioned above).</source>
          <target state="translated">特定のPA-RISCバージョンを使用しているプラットフォームで作成された共有ライブラリは、デフォルトでは以前のPA-RISCバージョンを使用しているプラットフォームでは使用できません。しかし、この後方互換性は、同じ+DAportableコンパイラフラグを使用して有効にすることができます(上述のPA-RISC 1.0と同じ注意点があります)。</target>
        </trans-unit>
        <trans-unit id="193a001ab941319380e15850d6f5c791732088df" translate="yes" xml:space="preserve">
          <source>Shared libraries created on an Itanium platform cannot be loaded on a PA-RISC platform. Shared libraries created on a PA-RISC platform can only be loaded on an Itanium platform if it is a PA-RISC executable that is attempting to load the PA-RISC library. A PA-RISC shared library cannot be loaded into an Itanium executable nor vice-versa.</source>
          <target state="translated">Itaniumプラットフォーム上で作成された共有ライブラリは、PA-RISCプラットフォーム上ではロードできません。PA-RISCプラットフォーム上で作成された共有ライブラリは、そのPA-RISCライブラリをロードしようとしているのがPA-RISC実行ファイルである場合にのみ、Itaniumプラットフォーム上にロードすることができます。PA-RISC共有ライブラリをItanium実行ファイルにロードすることはできません。</target>
        </trans-unit>
        <trans-unit id="6953ee78fc5edeec2d6a50098821da893b0458f7" translate="yes" xml:space="preserve">
          <source>Shared references among objects will not stay shared: if we're serializing the list of object [A, C] where both object A and C refer to the SAME object B, and if there is a serializing hook in A that says freeze(B), then when deserializing, we'll get [A', C'] where A' refers to B', but C' refers to D, a deep clone of B'. The topology was not preserved.</source>
          <target state="translated">オブジェクト間で共有された参照は共有されたままではありません:オブジェクトAとCの両方がSAMEのオブジェクトBを参照しているオブジェクト[A,C]のリストをシリアライズしていて、Aにfreeze(B)というシリアライズフックがある場合、デシリアライズすると、A'はB'を参照していますが、C'はB'の深いクローンであるDを参照している[A',C']が得られてしまいます。トポロジーは保存されていませんでした。</target>
        </trans-unit>
        <trans-unit id="f728eba8dfb3236f1667f74466840c95e5a7b8ee" translate="yes" xml:space="preserve">
          <source>Shared variables can only store scalars, refs of shared variables, or refs of shared data (discussed in next section):</source>
          <target state="translated">共有変数は、スカラー、共有変数のref、または共有データのrefのみを格納することができます(次のセクションで説明します)。</target>
        </trans-unit>
        <trans-unit id="001c163e34c30bd422c6c0b180836b52f1afdb17" translate="yes" xml:space="preserve">
          <source>Sharing Databases With C Applications</source>
          <target state="translated">Cアプリケーションでのデータベースの共有</target>
        </trans-unit>
        <trans-unit id="bd8715c47f235864c2ceb04d785a7b7ec14fa56b" translate="yes" xml:space="preserve">
          <source>Sharing typemaps Between CPAN Distributions</source>
          <target state="translated">CPAN ディストリビューション間でのタイプマップの共有</target>
        </trans-unit>
        <trans-unit id="0a07afc00eaa14a561ef50fb9dc88822e22b041a" translate="yes" xml:space="preserve">
          <source>Sharp shell programmers should take note of the following:</source>
          <target state="translated">シャープシェルのプログラマーは以下の点に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="6aa79f294b4ff3f2bd0e6980c0d9d3429325e3b2" translate="yes" xml:space="preserve">
          <source>Shawn M Moore &lt;code&gt;sartak@gmail.com&lt;/code&gt;</source>
          <target state="translated">Shawn M Moore &lt;code&gt;sartak@gmail.com&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46f2fc676064cd202c006928e29b43973667f22c" translate="yes" xml:space="preserve">
          <source>Shell Traps</source>
          <target state="translated">シェルトラップ</target>
        </trans-unit>
        <trans-unit id="05e1aa29dff23edb2a5976ffe3e3f5926084ec96" translate="yes" xml:space="preserve">
          <source>Shell escapes newlines in $text.</source>
          <target state="translated">シェルは$textで改行をエスケープします。</target>
        </trans-unit>
        <trans-unit id="411430d5faea18a48223083d430d03ec02723be9" translate="yes" xml:space="preserve">
          <source>Shell mode</source>
          <target state="translated">シェルモード</target>
        </trans-unit>
        <trans-unit id="ae8110256e73e2d29bfd2b0361c6084818dcf5fb" translate="yes" xml:space="preserve">
          <source>Shell variables from the</source>
          <target state="translated">からのシェル変数</target>
        </trans-unit>
        <trans-unit id="a5efec93b7817b727267bf3e97356065022021aa" translate="yes" xml:space="preserve">
          <source>Shell::Command which is these same functions but take arguments normally.</source>
          <target state="translated">Shell::Commandはこれらの関数と同じですが、通常は引数を取ります。</target>
        </trans-unit>
        <trans-unit id="5597033de9e3a9ee3ab28b086225929f8384f842" translate="yes" xml:space="preserve">
          <source>Shells (especially &lt;b&gt;csh&lt;/b&gt;) do several levels of substitution on each command line. Perl does substitution in only certain constructs such as double quotes, backticks, angle brackets, and search patterns.</source>
          <target state="translated">シェル（特に&lt;b&gt;csh&lt;/b&gt;）は、各コマンドラインでいくつかのレベルの置換を行います。Perlは、二重引用符、バッククォート、山かっこ、検索パターンなどの特定の構成体でのみ置換を行います。</target>
        </trans-unit>
        <trans-unit id="c3085316e59739c3d0881dec21da7ebe8e1387d1" translate="yes" xml:space="preserve">
          <source>Shells interpret scripts a little bit at a time. Perl compiles the entire program before executing it (except for &lt;code&gt;BEGIN&lt;/code&gt; blocks, which execute at compile time).</source>
          <target state="translated">シェルはスクリプトを少しずつ解釈します。Perlは、プログラム全体を実行前にコンパイルします（コンパイル時に実行される &lt;code&gt;BEGIN&lt;/code&gt; ブロックを除く）。</target>
        </trans-unit>
        <trans-unit id="d740f71b4c0205327f8285c81beee6b58843073b" translate="yes" xml:space="preserve">
          <source>Shift Operators</source>
          <target state="translated">シフトオペレーター</target>
        </trans-unit>
        <trans-unit id="53ffaf0e7e7ca17703b35ea2272d3800a2b8789e" translate="yes" xml:space="preserve">
          <source>Shift object N digits right in base B and return the resulting object. This is equivalent to performing integer division by B**N and discarding the remainder, except that it might be much faster, depending on how the number is represented internally.</source>
          <target state="translated">オブジェクトを B 基底で N 桁右にシフトし、結果のオブジェクトを返します。これは、整数を B**N で除算して残りを破棄するのと同等ですが、内部的にどのように数値が表現されているかによっては、より高速になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="816ba91c6c549fed8497fc4ed9fd5be93db7467c" translate="yes" xml:space="preserve">
          <source>Shift the object N digits left in base B. This is equivalent to multiplying by B**N, except that it might be much faster, depending on how the number is represented internally.</source>
          <target state="translated">これは、内部的にどのように数値が表現されるかによって、より高速になる可能性があることを除けば、B**N を乗算するのと同等です。</target>
        </trans-unit>
        <trans-unit id="2bbd5485928f42790ecd61230b448ed394726e75" translate="yes" xml:space="preserve">
          <source>Shifts $x right by $y in base $n. Default is base 2, used are usually 10 and 2, but others work, too.</source>
          <target state="translated">xを$nを基準にして$yを右にシフトします。デフォルトは基底 2 で、通常は 10 と 2 を使用しますが、他のものも使用できます。</target>
        </trans-unit>
        <trans-unit id="cab6779d1c4d586e5a686816d2490a5a885e59ca" translate="yes" xml:space="preserve">
          <source>Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down. If there are no elements in the array, returns the undefined value. If ARRAY is omitted, shifts the &lt;code&gt;@_&lt;/code&gt; array within the lexical scope of subroutines and formats, and the &lt;code&gt;@ARGV&lt;/code&gt; array outside a subroutine and also within the lexical scopes established by the &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; STRING&lt;/code&gt; , &lt;code&gt;BEGIN {}&lt;/code&gt; , &lt;code&gt;INIT {}&lt;/code&gt; , &lt;code&gt;CHECK {}&lt;/code&gt; , &lt;code&gt;UNITCHECK {}&lt;/code&gt; , and &lt;code&gt;END {}&lt;/code&gt; constructs.</source>
          <target state="translated">配列の最初の値をシフトして返し、配列を1だけ短くしてすべて下に移動します。配列に要素がない場合、未定義の値を返します。ARRAYが省略された場合、シフト &lt;code&gt;@_&lt;/code&gt; サブルーチンやフォーマットの字句範囲内の配列、及び &lt;code&gt;@ARGV&lt;/code&gt; の字句スコープによって確立サブルーチン外部また以内アレイ &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; STRING&lt;/code&gt; 、 &lt;code&gt;BEGIN {}&lt;/code&gt; 、 &lt;code&gt;INIT {}&lt;/code&gt; 、 &lt;code&gt;CHECK {}&lt;/code&gt; 、 &lt;code&gt;UNITCHECK {}&lt;/code&gt; 、および &lt;code&gt;END {}&lt;/code&gt; 構文。</target>
        </trans-unit>
        <trans-unit id="ceb6ece5170a4ff335501d527cf25219b25ce8af" translate="yes" xml:space="preserve">
          <source>Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down. If there are no elements in the array, returns the undefined value. If ARRAY is omitted, shifts the &lt;code&gt;@_&lt;/code&gt; array within the lexical scope of subroutines and formats, and the &lt;code&gt;@ARGV&lt;/code&gt; array outside a subroutine and also within the lexical scopes established by the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; STRING&lt;/code&gt; , &lt;code&gt;BEGIN {}&lt;/code&gt; , &lt;code&gt;INIT {}&lt;/code&gt; , &lt;code&gt;CHECK {}&lt;/code&gt; , &lt;code&gt;UNITCHECK {}&lt;/code&gt; , and &lt;code&gt;END {}&lt;/code&gt; constructs.</source>
          <target state="translated">配列の最初の値をシフトして返し、配列を1だけ短くしてすべて下に移動します。配列に要素がない場合、未定義の値を返します。ARRAYが省略された場合、シフト &lt;code&gt;@_&lt;/code&gt; サブルーチンやフォーマットの字句範囲内の配列、及び &lt;code&gt;@ARGV&lt;/code&gt; の字句スコープによって確立サブルーチン外部また以内アレイ &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; STRING&lt;/code&gt; 、 &lt;code&gt;BEGIN {}&lt;/code&gt; 、 &lt;code&gt;INIT {}&lt;/code&gt; 、 &lt;code&gt;CHECK {}&lt;/code&gt; 、 &lt;code&gt;UNITCHECK {}&lt;/code&gt; 、および &lt;code&gt;END {}&lt;/code&gt; 構文。</target>
        </trans-unit>
        <trans-unit id="e560762a5e85f4245145df0a3d5f14955ebfbe7e" translate="yes" xml:space="preserve">
          <source>Short for &amp;ldquo;an instance of a class&amp;rdquo;, meaning an &lt;b&gt;object&lt;/b&gt; of that &lt;b&gt;class&lt;/b&gt;.</source>
          <target state="translated">「クラスのインスタンス」の略で、その&lt;b&gt;クラスの&lt;/b&gt;&lt;b&gt;オブジェクト&lt;/b&gt;を意味し&lt;b&gt;ます&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="bf0f9ba179007d01df18b67571c95890eacf53a2" translate="yes" xml:space="preserve">
          <source>Short for &amp;ldquo;array value&amp;rdquo;, which refers to one of Perl&amp;rsquo;s internal data types that holds an &lt;b&gt;array&lt;/b&gt;. The &lt;code&gt;AV&lt;/code&gt; type is a subclass of &lt;b&gt;SV&lt;/b&gt;.</source>
          <target state="translated">「配列値」の略で、&lt;b&gt;配列&lt;/b&gt;を保持するPerlの内部データ型の1つを指します。 &lt;code&gt;AV&lt;/code&gt; のタイプのサブクラスである&lt;b&gt;SV&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="daa4e28096f49e40bca183e69c8dbf8fb7d81587" translate="yes" xml:space="preserve">
          <source>Short for &amp;ldquo;scalar value&amp;rdquo;. But within the Perl interpreter, every &lt;b&gt;referent&lt;/b&gt; is treated as a member of a class derived from SV, in an object-oriented sort of way. Every &lt;b&gt;value&lt;/b&gt; inside Perl is passed around as a C language &lt;code&gt;SV*&lt;/code&gt; pointer. The SV &lt;b&gt;struct&lt;/b&gt; knows its own &amp;ldquo;referent type&amp;rdquo;, and the code is smart enough (we hope) not to try to call a &lt;b&gt;hash&lt;/b&gt; function on a &lt;b&gt;subroutine&lt;/b&gt;.</source>
          <target state="translated">「スカラー値」の略。しかし、Perlインタープリター内では、すべての&lt;b&gt;指示対象&lt;/b&gt;は、オブジェクト指向の方法で、SVから派生したクラスのメンバーとして扱われます。Perl内のすべての&lt;b&gt;値&lt;/b&gt;は、C言語の &lt;code&gt;SV*&lt;/code&gt; ポインターとして渡されます。SV &lt;b&gt;構造体は&lt;/b&gt;それ自体の「リファレントタイプ」を知っており、コードは&lt;b&gt;サブルーチンで&lt;/b&gt;&lt;b&gt;ハッシュ&lt;/b&gt;関数を呼び出さないように十分にスマートです（希望します）。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5d19c4596f6bfea39cf19abcb0120dd79077a176" translate="yes" xml:space="preserve">
          <source>Short for &lt;b&gt;scratchpad&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;スクラッチパッドの&lt;/b&gt;略。</target>
        </trans-unit>
        <trans-unit id="11be5993935a64f6ec9ea9395f4cafbeb6afecc6" translate="yes" xml:space="preserve">
          <source>Short for Nevada, no part of which will ever be confused with civilization. NV also means an internal floating- point Numeric Value of the type a &lt;b&gt;scalar&lt;/b&gt; can hold, not to be confused with an &lt;b&gt;IV&lt;/b&gt;.</source>
          <target state="translated">ネバダの略で、文明と混同されることはありません。NV は、&lt;b&gt;IV&lt;/b&gt;と混同しないように、&lt;b&gt;スカラー&lt;/b&gt;が保持できるタイプの内部浮動小数点数値も意味します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="753c68d3ba41db74e4df8914f2ce920431708ec4" translate="yes" xml:space="preserve">
          <source>Short for Transmission Control Protocol. A protocol wrapped around the Internet Protocol to make an unreliable packet transmission mechanism appear to the application program to be a reliable &lt;b&gt;stream&lt;/b&gt; of bytes. (Usually.)</source>
          <target state="translated">Transmission Control Protocolの略。信頼性の低いパケット送信メカニズムをアプリケーションプログラムから信頼性の高いバイト&lt;b&gt;ストリーム&lt;/b&gt;のように見せるために、インターネットプロトコルにラップされたプロトコル。（通常。）</target>
        </trans-unit>
        <trans-unit id="dc5ee68c69bf44299748c4c256b80c120fb271e9" translate="yes" xml:space="preserve">
          <source>Short for a &amp;ldquo;hash value&amp;rdquo; typedef, which holds Perl&amp;rsquo;s internal representation of a hash. The &lt;code&gt;HV&lt;/code&gt; type is a subclass of &lt;b&gt;SV&lt;/b&gt;.</source>
          <target state="translated">Perlのハッシュの内部表現を保持する「ハッシュ値」typedefの短縮形。 &lt;code&gt;HV&lt;/code&gt; のタイプはのサブクラスである&lt;b&gt;SV&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="641d12dc5680debd9252f30257e835d77f2b58b5" translate="yes" xml:space="preserve">
          <source>Short for a &amp;ldquo;terminal&amp;rdquo;&amp;mdash;that is, a leaf node of a &lt;b&gt;syntax tree&lt;/b&gt;. A thing that functions grammatically as an &lt;b&gt;operand&lt;/b&gt; for the operators in an expression.</source>
          <target state="translated">「ターミナル」、つまり&lt;b&gt;構文ツリーの&lt;/b&gt;リーフノードの略。式の演算子の&lt;b&gt;オペランド&lt;/b&gt;として文法的に機能するもの。</target>
        </trans-unit>
        <trans-unit id="2a34ff2be32b26b7b9b0b3b4f346552a9899d102" translate="yes" xml:space="preserve">
          <source>Short for one member of &lt;b&gt;Perl mongers&lt;/b&gt;, a purveyor of Perl.</source>
          <target state="translated">&lt;b&gt;Perl&lt;/b&gt;の提供者である&lt;b&gt;Perl mongersの&lt;/b&gt; 1人のメンバーの略。</target>
        </trans-unit>
        <trans-unit id="215e423928369d110ed59f1768219b3b38101a83" translate="yes" xml:space="preserve">
          <source>Short integers. This is equivalent to T_IV but explicitly casts the return to type &lt;code&gt;short&lt;/code&gt; . The default typemap for &lt;code&gt;short&lt;/code&gt; is T_IV.</source>
          <target state="translated">短整数。これはT_IVと同じですが、戻り値を &lt;code&gt;short&lt;/code&gt; 型に明示的にキャストします。 &lt;code&gt;short&lt;/code&gt; のデフォルトのタイプマップはT_IVです。</target>
        </trans-unit>
        <trans-unit id="e173f44ce033e23615a07008598ed98e0724ec82" translate="yes" xml:space="preserve">
          <source>Short of loading the file into a database or pre-indexing the lines in the file, there are a couple of things that you can do.</source>
          <target state="translated">ファイルをデータベースにロードしたり、ファイル内の行を事前にインデックス化したりする以外にも、いくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="342f19ffca54484d831bc22d60422377cb72128f" translate="yes" xml:space="preserve">
          <source>Short summary: You need to create a package that defines four methods:</source>
          <target state="translated">簡単なまとめ:4つのメソッドを定義したパッケージを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="c1b21662873145e63208c0c220c63eecf3382545" translate="yes" xml:space="preserve">
          <source>Short tests may produce negative figures because perl can appear to take longer to execute the empty loop than a short test; try:</source>
          <target state="translated">短いテストでは負の数字が出ることがありますが、これはperlが短いテストよりも空のループを実行するのに時間がかかるように見えるからです。</target>
        </trans-unit>
        <trans-unit id="3c291d239a5572586d5800f8940e243040b2c7b5" translate="yes" xml:space="preserve">
          <source>Shortcomings of Perl under AmigaOS</source>
          <target state="translated">AmigaOSでのPerlの欠点</target>
        </trans-unit>
        <trans-unit id="fa78e77c849e3197f1c80d2dbbfe4db374f3b001" translate="yes" xml:space="preserve">
          <source>Shortcomings of Perl under DOS</source>
          <target state="translated">DOS版Perlの欠点</target>
        </trans-unit>
        <trans-unit id="a84b9d9cc1ba4235d4b9a38a4443bc225f0a9d86" translate="yes" xml:space="preserve">
          <source>Should I do anything special if I call perl from multiple threads?</source>
          <target state="translated">複数のスレッドからperlを呼び出す場合は、何か特別なことをした方がいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="41623a0ef32a13c7058b74719f5d1256441b7302" translate="yes" xml:space="preserve">
          <source>Should I use a web framework?</source>
          <target state="translated">Webフレームワークを使うべきか?</target>
        </trans-unit>
        <trans-unit id="706821549d14c573be320aadd1615ad49253a11a" translate="yes" xml:space="preserve">
          <source>Should a user have the need for compiling Perl in the LP64 environment, use the -Duse64bitall flag to Configure. This will force Perl to be compiled in a pure LP64 environment (with the +DD64 flag for HP C-ANSI-C, with no additional options for GNU gcc 64-bit on PA-RISC, and with -mlp64 for GNU gcc on Itanium). If you want to compile Perl using gcc, you will have to get a version of the compiler that supports 64-bit operations.)</source>
          <target state="translated">PerlをLP64環境でコンパイルする必要がある場合、Configureに-Duse64bitallフラグを使用してください。これにより、Perlは強制的に純粋なLP64環境でコンパイルされます(HP C-ANSI-Cでは+DD64フラグ、PA-RISCではGNU gcc 64-bit用の追加オプションなし、ItaniumではGNU gcc用の-mlp64)。gccを使ってPerlをコンパイルしたい場合は、64ビット操作をサポートするコンパイラのバージョンを取得する必要があります)。</target>
        </trans-unit>
        <trans-unit id="efca6f20e60abb6462f2115cc6f4f778b3e904aa" translate="yes" xml:space="preserve">
          <source>Should an &lt;code&gt;ok()&lt;/code&gt; fail, it will produce some diagnostics:</source>
          <target state="translated">万一 &lt;code&gt;ok()&lt;/code&gt; が失敗、それはいくつかの診断を生成します。</target>
        </trans-unit>
        <trans-unit id="7aa2401927f1002b79d1cf0dcfbafc98b85b5c42" translate="yes" xml:space="preserve">
          <source>Should be used if the perl library is moved from the default location in preference to &lt;code&gt;PERL(5)LIB&lt;/code&gt;, since this would not leave wrong entries in @INC. For example, if the compiled version of perl looks for @INC in</source>
          <target state="translated">@INCに間違ったエントリを残さないため、 &lt;code&gt;PERL(5)LIB&lt;/code&gt; ライブラリがデフォルトの場所からPERL（5）LIBに優先して移動される場合に使用する必要があります。たとえば、コンパイルされたバージョンのperlが@INCを探す場合</target>
        </trans-unit>
        <trans-unit id="56e9538fa48dc5397d7704d11be1b316f1409e45" translate="yes" xml:space="preserve">
          <source>Should make stream's state consistent with layers below. That is, any buffered write data should be written, and file position of lower layers adjusted for data read from below but not actually consumed. (Should perhaps &lt;code&gt;Unread()&lt;/code&gt; such data to the lower layer.)</source>
          <target state="translated">ストリームの状態を下のレイヤーと一致させる必要があります。つまり、バッファリングされた書き込みデータが書き込まれ、下位層のファイル位置が下から読み取られたデータ用に調整されますが、実際には消費されません。（おそらくこのようなデータを下位層に &lt;code&gt;Unread()&lt;/code&gt; する必要があります。）</target>
        </trans-unit>
        <trans-unit id="1c3d2c3d146bd37267ff2248c2cd5e844253f599" translate="yes" xml:space="preserve">
          <source>Should not be set with newer Perls, since this may hide some</source>
          <target state="translated">新しいPerlでは設定すべきではありません。</target>
        </trans-unit>
        <trans-unit id="ed8ff1c4976aa7b4301ba319829b15d5951b2c6e" translate="yes" xml:space="preserve">
          <source>Should probably be built into the core, and needs to stop pandering to DOS habits. Needs a dose of optimization too.</source>
          <target state="translated">おそらくコアに組み込まれるべきで、DOS の習慣に迎合するのをやめる必要があります。最適化も必要です。</target>
        </trans-unit>
        <trans-unit id="fbde5e966385ab1512ea67e3f35d08dd24d83ceb" translate="yes" xml:space="preserve">
          <source>Should return 0 on success, -1 on error. Optional.</source>
          <target state="translated">成功した場合は 0、エラーの場合は -1 を返す必要があります。オプション。</target>
        </trans-unit>
        <trans-unit id="f8c399f86acf033efef1e2751ef404b5ddaa2865" translate="yes" xml:space="preserve">
          <source>Should return 0 on success, -1 on error. Optional. Default is to fail, but that is likely to be changed in future.</source>
          <target state="translated">成功した場合は 0、エラーの場合は -1 を返す必要があります。オプション。デフォルトは失敗しますが、将来的には変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="246758221cfd3e60868d6718c892fa1bb87177ab" translate="yes" xml:space="preserve">
          <source>Should return a string to be placed in the buffer. Optional. If not provided, must provide READ or reject handles open for reading in PUSHED.</source>
          <target state="translated">バッファに配置する文字列を返す必要があります。省略可能。用意されていない場合は、PUSHEDでの読み込みのためのREADハンドルまたはリジェクトハンドルを用意しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d3cbfd0fcf4f24975313de4df8de49164d7ee2fd" translate="yes" xml:space="preserve">
          <source>Should return an object or the class, or -1 on failure. (Compare TIEHANDLE.) The arguments are an optional mode string (&quot;r&quot;, &quot;w&quot;, &quot;w+&quot;, ...) and a filehandle for the PerlIO layer below. Mandatory.</source>
          <target state="translated">オブジェクトかクラスを返すか、失敗した場合は -1 を返す必要があります(TIEHANDLE を比較してください)。引数はオプションのモード文字列 (&quot;r&quot;,&quot;w&quot;,&quot;w+&quot;,....)と、以下の PerlIO レイヤーのファイルハンドルです。必須。</target>
        </trans-unit>
        <trans-unit id="5642f34ce9dcd1c3ffa2dfc0c58640c6cb31044d" translate="yes" xml:space="preserve">
          <source>Should the $prefix fail to match</source>
          <target state="translated">もし $prefix が一致しなかった場合は</target>
        </trans-unit>
        <trans-unit id="1690346ded0caeaa5dcdd766cbbfd423effb3884" translate="yes" xml:space="preserve">
          <source>Should yield no problems with AIX 5.1 / 5.2 / 5.3 / 6.1 / 7.1.</source>
          <target state="translated">AIX 5.1/5.2/5.3/6.1/7.1で問題がないはずです。</target>
        </trans-unit>
        <trans-unit id="377f03a2a4c9b170d5d73c84fdd0fa6c29b00142" translate="yes" xml:space="preserve">
          <source>Should yield no problems.</source>
          <target state="translated">何の問題もないはずです。</target>
        </trans-unit>
        <trans-unit id="0b16df946245605727ff1e16d4791f2bf174400d" translate="yes" xml:space="preserve">
          <source>Should you wish to build a statically-linked executable on a system which can dynamically load libraries, you may, in all the following examples, where the command &quot;&lt;code&gt;make&lt;/code&gt; &quot; with no arguments is executed, run the command &quot;&lt;code&gt;make perl&lt;/code&gt; &quot; instead.</source>
          <target state="translated">ライブラリを動的にロードできるシステムで静的にリンクされた実行可能ファイルを構築したい場合、以下のすべての例で、引数なしでコマンド「 &lt;code&gt;make&lt;/code&gt; 」が実行される場合は、代わりにコマンド「 &lt;code&gt;make perl&lt;/code&gt; 」を実行できます。</target>
        </trans-unit>
        <trans-unit id="4ad198af5ed254b36c0129bab30cb66de4af9306" translate="yes" xml:space="preserve">
          <source>Show all individual modules that have a $VERSION of zero?</source>
          <target state="translated">ゼロの $VERSION を持つ個々のモジュールをすべて表示しますか?</target>
        </trans-unit>
        <trans-unit id="5886e6a19b112ccca7d7e5c6a420d33f7dc320f4" translate="yes" xml:space="preserve">
          <source>Show all individual modules that have no $VERSION?</source>
          <target state="translated">VERSION がない個々のモジュールをすべて表示しますか?</target>
        </trans-unit>
        <trans-unit id="432657faf9897211c68f4ccc299c680506ae0f85" translate="yes" xml:space="preserve">
          <source>Show lexical variables used in functions or files</source>
          <target state="translated">関数やファイルで使用される語彙変数を表示する</target>
        </trans-unit>
        <trans-unit id="15563729135e9ba264fbcba30a709d66c8a1dd93" translate="yes" xml:space="preserve">
          <source>Show test comments (this is a no-op if &lt;code&gt;verbose&lt;/code&gt; is selected).</source>
          <target state="translated">テストコメントを表示します（ &lt;code&gt;verbose&lt;/code&gt; が選択されている場合、これは何もしません）。</target>
        </trans-unit>
        <trans-unit id="453672f22864e2ecabd52010a0251f21457a02b2" translate="yes" xml:space="preserve">
          <source>Show test failures (this is a no-op if &lt;code&gt;verbose&lt;/code&gt; is selected).</source>
          <target state="translated">テストの失敗を表示します（ &lt;code&gt;verbose&lt;/code&gt; が選択されている場合、これは何もしません）。</target>
        </trans-unit>
        <trans-unit id="e3deb58d49160799c00454338107f604ea794ed5" translate="yes" xml:space="preserve">
          <source>Show usage.</source>
          <target state="translated">使用法を表示します。</target>
        </trans-unit>
        <trans-unit id="66970db782112b1077801cd655daa3c67c2cdecf" translate="yes" xml:space="preserve">
          <source>Shows if the given module is primarily maintained in perl core or on CPAN and bug tracker URL.</source>
          <target state="translated">指定されたモジュールが主に perl core でメンテナンスされているか、CPAN とバグトラッカーの URL でメンテナンスされているかを表示します。</target>
        </trans-unit>
        <trans-unit id="ac75e459283e311c2d85839794c7648cec7df9c2" translate="yes" xml:space="preserve">
          <source>Shuts down a Perl interpreter. See &lt;a href=&quot;perlembed&quot;&gt;perlembed&lt;/a&gt;.</source>
          <target state="translated">Perlインタープリターをシャットダウンします。&lt;a href=&quot;perlembed&quot;&gt;perlembedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="90e62e13ea37ff3f7a2ddce5609c724fd7e64daf" translate="yes" xml:space="preserve">
          <source>Shuts down a socket connection in the manner indicated by HOW, which has the same interpretation as in the syscall of the same name.</source>
          <target state="translated">HOW で指定された方法でソケット接続をシャットダウンしますが、これは同名のシステムコールと同じ解釈になります。</target>
        </trans-unit>
        <trans-unit id="8b3d8d665a765918b70a3f5f0378d51df00b92dd" translate="yes" xml:space="preserve">
          <source>Sign</source>
          <target state="translated">Sign</target>
        </trans-unit>
        <trans-unit id="76e3a47c3cea2b4bc39210e8f1a7a4f458325f46" translate="yes" xml:space="preserve">
          <source>Signal flag. Will be set to a true value if a signal was caught. Clients may check for this flag to abort time-consuming operations.</source>
          <target state="translated">シグナルフラグ。シグナルがキャッチされた場合、真の値に設定されます。クライアントはこのフラグをチェックして、時間のかかる操作を中止することができます。</target>
        </trans-unit>
        <trans-unit id="47e8409eab6e54647df4cb7cecc41ee28c30a02b" translate="yes" xml:space="preserve">
          <source>Signal handlers deal with signal names, not numbers. Use &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt; -l&lt;/code&gt; to find their names on your system.</source>
          <target state="translated">シグナルハンドラは、番号ではなくシグナル名を扱います。 &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt; -l&lt;/code&gt; を使用して、システムでそれらの名前を検索します。</target>
        </trans-unit>
        <trans-unit id="a89722759e06611996072c09d8d893f78366be03" translate="yes" xml:space="preserve">
          <source>Signal handlers need to be set up in the threads for the signals they are expected to act upon. Here's an example for</source>
          <target state="translated">シグナルハンドラは、それらが動作することが期待されるシグナルに対してスレッド内で設定する必要があります。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="4c81c67cfc40c99d8beeb124cd5a299ed53f7fa3" translate="yes" xml:space="preserve">
          <source>Signal handling is also used for timeouts in Unix. While safely protected within an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; block, you set a signal handler to trap alarm signals and then schedule to have one delivered to you in some number of seconds. Then try your blocking operation, clearing the alarm when it's done but not before you've exited your &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; block. If it goes off, you'll use die() to jump out of the block.</source>
          <target state="translated">シグナル処理は、Unixのタイムアウトにも使用されます。 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; ブロック内で安全に保護しながら、アラームシグナルをトラップするようにシグナルハンドラーを設定し、数秒後にシグナルハンドラーが配信されるようにスケジュールします。次に、ブロック操作を試してください。アラームをクリアしますが、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; ブロックを終了する前ではありません。オフになった場合は、die（）を使用してブロックからジャンプします。</target>
        </trans-unit>
        <trans-unit id="c9cd055a7cd87b137130bb8b93c1c2e53904764f" translate="yes" xml:space="preserve">
          <source>Signal handling may not behave as on Unix platforms (where it doesn't exactly &quot;behave&quot;, either :). For instance, calling &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; from signal handlers will cause an exception, since most implementations of &lt;code&gt;signal()&lt;/code&gt; on Windows are severely crippled. Thus, signals may work only for simple things like setting a flag variable in the handler. Using signals under this port should currently be considered unsupported.</source>
          <target state="translated">シグナル処理は、Unixプラットフォームのように動作しない場合があります（正確に「動作」しない場合も同様です）。たとえば、Windows での &lt;code&gt;signal()&lt;/code&gt; のほとんどの実装はひどく機能していないため、シグナルハンドラから &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; を呼び出すと例外が発生します。したがって、シグナルは、ハンドラーでフラグ変数を設定するような単純な場合にのみ機能します。このポートでの信号の使用は、現在サポートされていないと見なされます。</target>
        </trans-unit>
        <trans-unit id="2e6c417fd537a17b001daa7dbea3a3b50cef51ef" translate="yes" xml:space="preserve">
          <source>Signal number zero may fail because you lack permission to send the signal when directed at a process whose real or saved UID is not identical to the real or effective UID of the sending process, even though the process is alive. You may be able to determine the cause of failure using &lt;code&gt;$!&lt;/code&gt; or &lt;code&gt;%!&lt;/code&gt; .</source>
          <target state="translated">プロセスが生きていても、実際のUIDまたは保存されたUIDが送信プロセスの実際のUIDまたは実効UIDと一致しないプロセスに信号を送ると、シグナルを送信する権限がないため、シグナル番号0が失敗することがあります。 &lt;code&gt;$!&lt;/code&gt; を使用して、失敗の原因を特定できる場合があります。または &lt;code&gt;%!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="fec07adfbf089fdf5b54412a5f3085422a9dd0ae" translate="yes" xml:space="preserve">
          <source>Signals are</source>
          <target state="translated">シグナルは</target>
        </trans-unit>
        <trans-unit id="43861fb85280c34c4b0e58573e896842254a1d10" translate="yes" xml:space="preserve">
          <source>Signals in Plan 9 Perl</source>
          <target state="translated">プラン9 Perlでのシグナル</target>
        </trans-unit>
        <trans-unit id="e4cf0392296064579858651f856889aadbc2805e" translate="yes" xml:space="preserve">
          <source>Signatures</source>
          <target state="translated">Signatures</target>
        </trans-unit>
        <trans-unit id="d9d7c542958055b1904998cdb447122ec36a75ab" translate="yes" xml:space="preserve">
          <source>Signed bitwise operators.</source>
          <target state="translated">符号付きビット演算子。</target>
        </trans-unit>
        <trans-unit id="2622f509b356185fe6a42f6313ddbc8e57057af2" translate="yes" xml:space="preserve">
          <source>Significant performance improvements</source>
          <target state="translated">パフォーマンスの大幅な改善</target>
        </trans-unit>
        <trans-unit id="ae6207f79c10c58b3e0ef4c08bbf6c86acc82fd9" translate="yes" xml:space="preserve">
          <source>Signum function. Set the number to -1, 0, or 1, depending on whether the number is negative, zero, or positive, respectively. Does not modify NaNs.</source>
          <target state="translated">シグナム関数。マイナス、ゼロ、プラスのいずれかに応じて、それぞれ-1、0、1のいずれかに設定します。NaN を変更しません。</target>
        </trans-unit>
        <trans-unit id="31506097adfa948440134c0119e5a52038393445" translate="yes" xml:space="preserve">
          <source>Silberschatz, Abraham, and Peter B. Galvin. Operating System Concepts, 4th ed. Addison-Wesley, 1995, ISBN 0-201-59292-4</source>
          <target state="translated">シルバーシャッツ、エイブラハム、ピーター・B・ガルビン。オペレーティングシステムの概念、第4版。アディソンウェズリー、1995年、ISBN 0-201-59292-4</target>
        </trans-unit>
        <trans-unit id="8c4b469b48eb970781d347cff775a6eb6ed07b9c" translate="yes" xml:space="preserve">
          <source>Similar problems can occur when storing &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; in HVs:</source>
          <target state="translated">&lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; をHV に保存するときに、同様の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0939c3fe5c0d5d2bff40d1b5db20a06321bba976" translate="yes" xml:space="preserve">
          <source>Similar to</source>
          <target state="translated">に似ています。</target>
        </trans-unit>
        <trans-unit id="ca29a7deeeb800f3b647ae8e447ace2495bd48e6" translate="yes" xml:space="preserve">
          <source>Similar to &quot;CHECK&quot;, but for &lt;code&gt;INIT&lt;/code&gt; -blocks, not &lt;code&gt;CHECK&lt;/code&gt; blocks.</source>
          <target state="translated">「CHECK」に似ていますが、 &lt;code&gt;INIT&lt;/code&gt; ブロックではなく、 &lt;code&gt;CHECK&lt;/code&gt; ブロックです。</target>
        </trans-unit>
        <trans-unit id="a02dc2c9e4fd99225658784381bc57431376c4f2" translate="yes" xml:space="preserve">
          <source>Similar to $io-&amp;gt;seek, but sets the IO::File's position using the system call lseek(2) directly, so will confuse most perl IO operators except sysread and syswrite (see &lt;a href=&quot;../perlfunc&quot;&gt;perlfunc&lt;/a&gt; for full details)</source>
          <target state="translated">$ io-&amp;gt; seekに似ていますが、システムコールlseek（2）を使用してIO :: Fileの位置を直接設定するため、sysreadとsyswriteを除くほとんどのperl IOオペレーターを混同します（詳細については&lt;a href=&quot;../perlfunc&quot;&gt;perlfunc&lt;/a&gt;を参照）</target>
        </trans-unit>
        <trans-unit id="aeabee18f75813e1d32d468eb7ba172bf546eaed" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#any&quot;&gt;any&lt;/a&gt; and &lt;a href=&quot;#all&quot;&gt;all&lt;/a&gt;, but with the return sense inverted. &lt;code&gt;none&lt;/code&gt; returns true only if no value in the &lt;code&gt;@list&lt;/code&gt; causes the &lt;code&gt;BLOCK&lt;/code&gt; to return true, and &lt;code&gt;notall&lt;/code&gt; returns true only if not all of the values do.</source>
          <target state="translated">&lt;a href=&quot;#any&quot;&gt;any&lt;/a&gt; and &lt;a href=&quot;#all&quot;&gt;allに&lt;/a&gt;似ていますが、戻り方向が逆になっています。 &lt;code&gt;none&lt;/code&gt; は、 &lt;code&gt;@list&lt;/code&gt; 値がないために &lt;code&gt;BLOCK&lt;/code&gt; がtrueを返す場合にのみtrueを返し、 &lt;code&gt;notall&lt;/code&gt; は、すべての値がそうでない場合にのみtrueを返します。</target>
        </trans-unit>
        <trans-unit id="e0b3d2d208d62b5b40ff53db1e72a57e69459f20" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#any&quot;&gt;any&lt;/a&gt;, except that it requires all elements of the &lt;code&gt;@list&lt;/code&gt; to make the &lt;code&gt;BLOCK&lt;/code&gt; return true. If any element returns false, then it returns false. If the &lt;code&gt;BLOCK&lt;/code&gt; never returns false or the &lt;code&gt;@list&lt;/code&gt; was empty then it returns true.</source>
          <target state="translated">同様に&lt;a href=&quot;#any&quot;&gt;すべての&lt;/a&gt;、それはすべての要素が必要ですことを除いて &lt;code&gt;@list&lt;/code&gt; を作るために &lt;code&gt;BLOCK&lt;/code&gt; リターンが真。いずれかの要素がfalseを返す場合、falseを返します。場合 &lt;code&gt;BLOCK&lt;/code&gt; は falseを返すことはありませんか &lt;code&gt;@list&lt;/code&gt; は空だった、それはtrueを返します。</target>
        </trans-unit>
        <trans-unit id="b9665cd00110ac2a060c12898dd3b9d89a35f309" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#max&quot;&gt;max&lt;/a&gt; but returns the entry in the list with the lowest numerical value. If the list is empty then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;a href=&quot;#max&quot;&gt;maxに&lt;/a&gt;似ていますが、数値が最小のリストのエントリを返します。リストが空の場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="1acc3d00496e9a8972d2b21602c04ac03da5cacb" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#max&quot;&gt;max&lt;/a&gt;, but treats all the entries in the list as strings and returns the highest string as defined by the &lt;code&gt;gt&lt;/code&gt; operator. If the list is empty then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;a href=&quot;#max&quot;&gt;max&lt;/a&gt;に似ていますが、リスト内のすべてのエントリを文字列として扱い、 &lt;code&gt;gt&lt;/code&gt; 演算子で定義されている最上位の文字列を返します。リストが空の場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="5a68b93abd1f3ba4015d6e167facf857ecad51b4" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#min&quot;&gt;min&lt;/a&gt;, but treats all the entries in the list as strings and returns the lowest string as defined by the &lt;code&gt;lt&lt;/code&gt; operator. If the list is empty then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;a href=&quot;#min&quot;&gt;min&lt;/a&gt;に似ていますが、リスト内のすべてのエントリを文字列として扱い、 &lt;code&gt;lt&lt;/code&gt; 演算子で定義されている最小の文字列を返します。リストが空の場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="720744a95bf0e839c040c184fab6270aac42881d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#sum&quot;&gt;sum&lt;/a&gt;, except this returns 0 when given an empty list, rather than &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sum&quot;&gt;sum&lt;/a&gt;に似ていますが、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; ではなく空のリストを指定すると0を返します。</target>
        </trans-unit>
        <trans-unit id="de0c5d81a8f59f78025d72fb656f559ed47e0b02" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;%+&lt;/code&gt; , this variable allows access to the named capture groups in the last successful match in the currently active dynamic scope. To each capture group name found in the regular expression, it associates a reference to an array containing the list of values captured by all buffers with that name (should there be several of them), in the order where they appear.</source>
          <target state="translated">&lt;code&gt;%+&lt;/code&gt; と同様に、この変数を使用すると、現在アクティブな動的スコープで最後に成功した一致の名前付きキャプチャグループにアクセスできます。正規表現で見つかった各キャプチャグループ名に対して、すべてのバッファーによってキャプチャされた値のリストを含む配列への参照を、その名前（複数ある場合）と、それらが出現する順序で関連付けます。</target>
        </trans-unit>
        <trans-unit id="e85d1cf5a45c378c11b14a61c254003e40f86d06" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;(??{ code })&lt;/code&gt; except that it does not involve executing any code or potentially compiling a returned pattern string; instead it treats the part of the current pattern contained within a specified capture group as an independent pattern that must match at the current position. Also different is the treatment of capture buffers, unlike &lt;code&gt;(??{ code })&lt;/code&gt; recursive patterns have access to their callers match state, so one can use backreferences safely.</source>
          <target state="translated">&lt;code&gt;(??{ code })&lt;/code&gt; 似ていますが、コードの実行や、返されたパターン文字列のコンパイルの可能性はありません。代わりに、指定されたキャプチャグループに含まれる現在のパターンの一部を、現在の位置で一致する必要のある独立したパターンとして扱います。また、 &lt;code&gt;(??{ code })&lt;/code&gt; 再帰パターンが呼び出し元の一致状態にアクセスできるのとは異なり、キャプチャバッファーの扱いが異なるため、後方参照を安全に使用できます。</target>
        </trans-unit>
        <trans-unit id="7b5e1028f59af1e35880841b72d98eb83a4ac03c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;(R1)&lt;/code&gt; , this predicate checks to see if we're executing directly inside of the leftmost group with a given name (this is the same logic used by &lt;code&gt;(?&amp;amp;NAME)&lt;/code&gt; to disambiguate). It does not check the full stack, but only the name of the innermost active recursion.</source>
          <target state="translated">&lt;code&gt;(R1)&lt;/code&gt; と同様に、この述語は、指定された名前で左端のグループ内で直接実行されているかどうかを確認します（これは &lt;code&gt;(?&amp;amp;NAME)&lt;/code&gt; が明確にするために使用するのと同じロジックです）。完全なスタックはチェックせず、最も内側のアクティブな再帰の名前のみをチェックします。</target>
        </trans-unit>
        <trans-unit id="d819c8539b4d29d94e8d4689944b0f7272e6c433" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;../functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; in that it evaluates &lt;code&gt;BLOCK&lt;/code&gt; setting &lt;code&gt;$_&lt;/code&gt; to each element of &lt;code&gt;@list&lt;/code&gt; in turn. &lt;code&gt;any&lt;/code&gt; returns true if any element makes the &lt;code&gt;BLOCK&lt;/code&gt; return a true value. If &lt;code&gt;BLOCK&lt;/code&gt; never returns true or &lt;code&gt;@list&lt;/code&gt; was empty then it returns false.</source>
          <target state="translated">同様に &lt;code&gt;&lt;a href=&quot;../functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; することが評価されていることで &lt;code&gt;BLOCK&lt;/code&gt; を設定 &lt;code&gt;$_&lt;/code&gt; それぞれの要素に &lt;code&gt;@list&lt;/code&gt; ターンインチ &lt;code&gt;any&lt;/code&gt; かの要素が &lt;code&gt;BLOCK&lt;/code&gt; を true値に戻す場合、anyはtrueを返します。場合は &lt;code&gt;BLOCK&lt;/code&gt; trueを返すことはありませんか &lt;code&gt;@list&lt;/code&gt; は空だった、それは偽を返します。</target>
        </trans-unit>
        <trans-unit id="309f2e4aced8f70bc86983e34f644c5eeda43d60" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&lt;a href=&quot;../functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; in that it evaluates &lt;code&gt;BLOCK&lt;/code&gt; setting &lt;code&gt;$_&lt;/code&gt; to each element of &lt;code&gt;@list&lt;/code&gt; in turn. &lt;code&gt;first&lt;/code&gt; returns the first element where the result from &lt;code&gt;BLOCK&lt;/code&gt; is a true value. If &lt;code&gt;BLOCK&lt;/code&gt; never returns true or &lt;code&gt;@list&lt;/code&gt; was empty then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">同様に &lt;code&gt;&lt;a href=&quot;../functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; することが評価されていることで &lt;code&gt;BLOCK&lt;/code&gt; を設定 &lt;code&gt;$_&lt;/code&gt; それぞれの要素に &lt;code&gt;@list&lt;/code&gt; ターンインチ &lt;code&gt;first&lt;/code&gt; リターンからの結果の最初の要素 &lt;code&gt;BLOCK&lt;/code&gt; 真の値です。場合は &lt;code&gt;BLOCK&lt;/code&gt; trueを返すことはありませんか &lt;code&gt;@list&lt;/code&gt; は空だった、その後 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="1e075f217be25d05567036ad66b6856b5e68b562" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;@+&lt;/code&gt; , the &lt;code&gt;%+&lt;/code&gt; hash allows access to the named capture buffers, should they exist, in the last successful match in the currently active dynamic scope.</source>
          <target state="translated">&lt;code&gt;@+&lt;/code&gt; と同様に、 &lt;code&gt;%+&lt;/code&gt; ハッシュを使用すると、現在アクティブな動的スコープで最後に成功した一致で、名前付きキャプチャバッファーにアクセスできます（存在する場合）。</target>
        </trans-unit>
        <trans-unit id="a8d5383c2abb4219427283869f7f92149d2a972c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;Open&lt;/code&gt; , returns PerlIO* on success, &lt;code&gt;NULL&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;Open&lt;/code&gt; と同様に、成功した場合はPerlIO *を &lt;code&gt;NULL&lt;/code&gt; 、失敗した場合はNULLを返します。</target>
        </trans-unit>
        <trans-unit id="9b9b990cdb77a226953210e003d5b8ec28f7e6d4" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;eq_array()&lt;/code&gt; , except the order of the elements is &lt;b&gt;not&lt;/b&gt; important. This is a deep check, but the irrelevancy of order only applies to the top level.</source>
          <target state="translated">&lt;code&gt;eq_array()&lt;/code&gt; に似ていますが、要素の順序は重要ではあり&lt;b&gt;ません&lt;/b&gt;。これは詳細なチェックですが、順序の無関係性は最上位にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="799cf1cf4afc49012909146223bfe3d0985a8027" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;htmlify()&lt;/code&gt; , but turns non-alphanumerics into underscores. Note that &lt;code&gt;anchorify()&lt;/code&gt; is not exported by default.</source>
          <target state="translated">&lt;code&gt;htmlify()&lt;/code&gt; に似ていますが、非英数字をアンダースコアに変換します。 &lt;code&gt;anchorify()&lt;/code&gt; はデフォルトではエクスポートされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e12c5c9a9a0658e780b40222b20b1585f58ad997" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;is()&lt;/code&gt; , except that if $got and $expected are references, it does a deep comparison walking each data structure to see if they are equivalent. If the two structures are different, it will display the place where they start differing.</source>
          <target state="translated">&lt;code&gt;is()&lt;/code&gt; に似ていますが、$ gotと$ expectedが参照である場合は、各データ構造を詳細に比較して、同等かどうかを確認します。2つの構造が異なる場合は、構造が異なる場所が表示されます。</target>
        </trans-unit>
        <trans-unit id="78a60ea110d9d9e2f388b25322faf3b4d38a6a8c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;list&lt;/code&gt; but only active groups that match the pattern are returned. &lt;code&gt;PATTERN&lt;/code&gt; can be a group pattern.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 似ていますが、パターンに一致するアクティブなグループのみが返されます。 &lt;code&gt;PATTERN&lt;/code&gt; はグループパターンにすることができます。</target>
        </trans-unit>
        <trans-unit id="8394e4ee5f103a1c48fa6ce025d057e64f7170cc" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;lock_keys()&lt;/code&gt; , with the difference being that the optional key list specifies keys that may or may not be already in the hash. Essentially this is an easier way to say</source>
          <target state="translated">&lt;code&gt;lock_keys()&lt;/code&gt; に似ていますが、オプションのキーリストは、ハッシュにすでに存在するかどうかに関係なく、キーを指定する点が異なります。基本的に、これは簡単な言い方です</target>
        </trans-unit>
        <trans-unit id="ffb0fd1c6610a16c5e7d118e0a5ba89092c8069d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;newUNOP&lt;/code&gt; , but creates an UNOP_AUX struct instead, with op_aux initialised to aux</source>
          <target state="translated">&lt;code&gt;newUNOP&lt;/code&gt; に似ていますが、代わりにop_auxがauxに初期化されたUNOP_AUX構造体を作成します</target>
        </trans-unit>
        <trans-unit id="cc376b4266acbbeb8358039fda2afe78067b9523" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;ok()&lt;/code&gt; , &lt;code&gt;is()&lt;/code&gt; and &lt;code&gt;isnt()&lt;/code&gt; compare their two arguments with &lt;code&gt;eq&lt;/code&gt; and &lt;code&gt;ne&lt;/code&gt; respectively and use the result of that to determine if the test succeeded or failed. So these:</source>
          <target state="translated">&lt;code&gt;ok()&lt;/code&gt; と同様に、 &lt;code&gt;is()&lt;/code&gt; および &lt;code&gt;isnt()&lt;/code&gt; は、2つの引数をそれぞれ &lt;code&gt;eq&lt;/code&gt; および &lt;code&gt;ne&lt;/code&gt; と比較し、その結果を使用して、テストが成功したか失敗したかを判断します。したがって、これら：</target>
        </trans-unit>
        <trans-unit id="2d613f276bedf9458ff8ce32e8990c5576137f0b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;ok()&lt;/code&gt; , &lt;code&gt;like()&lt;/code&gt; matches $got against the regex &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/expected/&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ok()&lt;/code&gt; と同様に、 &lt;code&gt;like()&lt;/code&gt; は $ gotを正規表現 &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/expected/&lt;/a&gt;&lt;/code&gt; と照合します。</target>
        </trans-unit>
        <trans-unit id="050d8bfd9d6dd81a6f8789b0e8d9cd7b8f6780b4" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;save_scalar&lt;/code&gt; , but localize &lt;code&gt;@gv&lt;/code&gt; and &lt;code&gt;%gv&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;save_scalar&lt;/code&gt; に似ていますが、 &lt;code&gt;@gv&lt;/code&gt; &lt;code&gt;%gv&lt;/code&gt; と％gvをローカライズします。</target>
        </trans-unit>
        <trans-unit id="07501a6bba290a81025a9cc58f969fd7da78b384" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;save_scalar&lt;/code&gt; , but will reinstate an &lt;code&gt;SV *&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;save_scalar&lt;/code&gt; に似ていますが、 &lt;code&gt;SV *&lt;/code&gt; を復元します。</target>
        </trans-unit>
        <trans-unit id="d1390e677f6a0ebeb104aa1d188d2523b30d8bc4" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;save_svref&lt;/code&gt; , but localize &lt;code&gt;AV *&lt;/code&gt; and &lt;code&gt;HV *&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;save_svref&lt;/code&gt; に似ていますが、 &lt;code&gt;AV *&lt;/code&gt; および &lt;code&gt;HV *&lt;/code&gt; をローカライズします。</target>
        </trans-unit>
        <trans-unit id="7cf1c2a19f0b0ee74a54bd214a8ec4d84f8e3cf9" translate="yes" xml:space="preserve">
          <source>Similar to C</source>
          <target state="translated">Cに似ている</target>
        </trans-unit>
        <trans-unit id="a64ea60affb2a9690ec81f413108d64202543e9b" translate="yes" xml:space="preserve">
          <source>Similar to T_PTR except that the pointer is stored in a scalar and the reference to that scalar is returned to the caller. This can be used to hide the actual pointer value from the programmer since it is usually not required directly from within perl.</source>
          <target state="translated">ポインタがスカラに格納され、そのスカラへの参照が呼び出し元に返される点を除けば、T_PTRと似ています。これは、実際のポインタの値をプログラマーから隠すために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4ed1b14b67aa9193491a3dd6d65f8409d185456b" translate="yes" xml:space="preserve">
          <source>Similar to T_PTROBJ in that the pointer is blessed into a scalar object. The difference is that when the object is passed back into XS it must be of the correct type (inheritance is not supported) while T_PTROBJ supports inheritance.</source>
          <target state="translated">T_PTROBJと似ていますが、ポインタがスカラーオブジェクトに変換されます。T_PTROBJが継承をサポートしているのに対し、XSにオブジェクトを戻す際には正しい型でなければなりません(継承はサポートされていません)。</target>
        </trans-unit>
        <trans-unit id="98345bece5539f546d5a8e96d6aece125a75354c" translate="yes" xml:space="preserve">
          <source>Similar to T_PTRREF except that the reference is blessed into a class. This allows the pointer to be used as an object. Most commonly used to deal with C structs. The typemap checks that the perl object passed into the XS routine is of the correct class (or part of a subclass).</source>
          <target state="translated">参照がクラスに祝福されることを除いて、T_PTRREFと似ています。これにより、ポインタをオブジェクトとして使用することができます。最も一般的にはC言語の構造体を扱うのに使われます。タイプマップは、XSルーチンに渡されたperlオブジェクトが正しいクラス(またはサブクラスの一部)であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="a0e3f786e5320b6b926d5843480fabad22b49df4" translate="yes" xml:space="preserve">
          <source>Similar to T_PTRREF, except the pointer stored in the referenced scalar is dereferenced and copied to the output variable. This means that T_REFREF is to T_PTRREF as T_OPAQUE is to T_OPAQUEPTR. All clear?</source>
          <target state="translated">T_PTRREFと似ていますが、参照されたスカラに格納されているポインタが参照解除され、出力変数にコピーされることを除いては、T_PTRREFと似ています。これは、T_OPAQUEがT_OPAQUEPTRにあるように、T_REFREFはT_PTRREFにあることを意味します。これでいいですか?</target>
        </trans-unit>
        <trans-unit id="316a66a038c9003e3588353dd7b06b4570041574" translate="yes" xml:space="preserve">
          <source>Similar to key/value hash slices (and also introduced in Perl 5.20), the % array slice syntax returns a list of index/value pairs:</source>
          <target state="translated">キー/値のハッシュ・スライス (Perl 5.20 で導入された)と同様に、% 配列スライス構文は、インデックス/値のペアのリストを返します。</target>
        </trans-unit>
        <trans-unit id="fcdb3335ff45dd421a45fea8e6567734b9ec0cac" translate="yes" xml:space="preserve">
          <source>Similar to mkstemp(), except that an extra argument can be supplied with a suffix to be appended to the template.</source>
          <target state="translated">mkstemp()と似ていますが、追加の引数にテンプレートに追加するサフィックスを与えることができます。</target>
        </trans-unit>
        <trans-unit id="4cf9bfb3c81fe1275534c974c84d67c5db310bda" translate="yes" xml:space="preserve">
          <source>Similar to perl's &lt;code&gt;&lt;a href=&quot;../functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; keyword, but interprets the given list as an even-sized list of pairs. It invokes the &lt;code&gt;BLOCK&lt;/code&gt; multiple times, in scalar context, with &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; set to successive pairs of values from the &lt;code&gt;@kvlist&lt;/code&gt; .</source>
          <target state="translated">perlの &lt;code&gt;&lt;a href=&quot;../functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; キーワードに似ていますが、指定されたリストを偶数サイズのペアのリストとして解釈します。 &lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; が &lt;code&gt;@kvlist&lt;/code&gt; からの値の連続するペアに設定された状態で、スカラーコンテキストで &lt;code&gt;BLOCK&lt;/code&gt; を複数回呼び出します。</target>
        </trans-unit>
        <trans-unit id="20605e6412e378f2426dfa2ecf790a73c30912ee" translate="yes" xml:space="preserve">
          <source>Similar to perl's &lt;code&gt;&lt;a href=&quot;../functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; keyword, but interprets the given list as an even-sized list of pairs. It invokes the &lt;code&gt;BLOCK&lt;/code&gt; multiple times, in list context, with &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; set to successive pairs of values from the &lt;code&gt;@kvlist&lt;/code&gt; .</source>
          <target state="translated">perlの &lt;code&gt;&lt;a href=&quot;../functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; キーワードに似ていますが、指定されたリストを偶数サイズのペアのリストとして解釈します。 &lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; が &lt;code&gt;@kvlist&lt;/code&gt; からの値の連続するペアに設定された状態で、リストコンテキストで &lt;code&gt;BLOCK&lt;/code&gt; を複数回呼び出します。</target>
        </trans-unit>
        <trans-unit id="d4e0979e74abc467bf78f9a39fbc983727e9baaf" translate="yes" xml:space="preserve">
          <source>Similar to strings, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m''&lt;/a&gt;&lt;/code&gt; acts like apostrophes on a regexp; all other &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; delimiters act like quotes. If the regexp evaluates to the empty string, the regexp in the</source>
          <target state="translated">文字列と同様に、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m''&lt;/a&gt;&lt;/code&gt; は正規表現ではアポストロフィのように機能します。他のすべての &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 区切り文字は引用符のように機能します。正規表現が空の文字列に評価される場合、</target>
        </trans-unit>
        <trans-unit id="b7ef33d2521670adf2f6b3cf61cae1999ab3778c" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;a href=&quot;#first&quot;&gt;first&lt;/a&gt; function, but interprets the given list as an even-sized list of pairs. It invokes the &lt;code&gt;BLOCK&lt;/code&gt; multiple times, in scalar context, with &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; set to successive pairs of values from the &lt;code&gt;@kvlist&lt;/code&gt; .</source>
          <target state="translated">&lt;a href=&quot;#first&quot;&gt;最初の&lt;/a&gt;関数に似ていますが、指定されたリストを偶数サイズのペアのリストとして解釈します。 &lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; が &lt;code&gt;@kvlist&lt;/code&gt; からの値の連続するペアに設定された状態で、スカラーコンテキストで &lt;code&gt;BLOCK&lt;/code&gt; を複数回呼び出します。</target>
        </trans-unit>
        <trans-unit id="0747626402d2dd7f7c45b97cc24e9304db46b6d7" translate="yes" xml:space="preserve">
          <source>Similar to the above, a sigil, followed by bareword text in brackets, where the first character is either a caret followed by an uppercase letter, like &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; or a non-&lt;code&gt;NUL&lt;/code&gt; , non-space literal control like &lt;code&gt;${\7LOBAL_PHASE}&lt;/code&gt; . Like the above, when not under &lt;code&gt;&quot;use utf8&quot;&lt;/code&gt; , the characters in &lt;code&gt;[0x80-0xFF]&lt;/code&gt; are considered controls, but as of v5.22, the use of any that are non-graphical are deprecated, and as of v5.20 the use of any ASCII-range literal control is deprecated. Support for these will be removed in a future version of perl.</source>
          <target state="translated">上記と同様に、シギル、その後にかっこ内の裸語テキストが続きます。最初の文字は、キャレットの後に &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; ような大文字が続くか、 &lt;code&gt;${\7LOBAL_PHASE}&lt;/code&gt; ような非 &lt;code&gt;NUL&lt;/code&gt; の非スペースリテラルコントロールです。7LOBAL_PHASE}。上記と同様に、 &lt;code&gt;&quot;use utf8&quot;&lt;/code&gt; 下にない場合、 &lt;code&gt;[0x80-0xFF]&lt;/code&gt; の文字はコントロールと見なされますが、v5.22以降では、非グラフィカルな文字の使用は非推奨になり、v5.20以降ではASCII範囲のリテラルコントロールの使用は非推奨です。これらのサポートは、将来のバージョンのperlで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="3f2112c220c2b71523b70f673d7ec4dcde3c15e0" translate="yes" xml:space="preserve">
          <source>Similarly &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'Debug'&lt;/code&gt; produces debugging output, the difference being that it allows the fine tuning of what debugging output will be emitted. Options are divided into three groups, those related to compilation, those related to execution and those related to special purposes. The options are as follows:</source>
          <target state="translated">同様に &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'Debug'&lt;/code&gt; を使用すると、デバッグ出力が生成されます。違いは、出力されるデバッグ出力を微調整できることです。オプションは、コンパイルに関連するもの、実行に関連するもの、特別な目的に関連するものの3つのグループに分類されます。オプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="84d106c3869ea4929caecddf63406cc3cb977903" translate="yes" xml:space="preserve">
          <source>Similarly all warnings are disabled in a block by either of these:</source>
          <target state="translated">同様に、これらのいずれかによってブロック内のすべての警告が無効化されます。</target>
        </trans-unit>
        <trans-unit id="55dea1c41dc940323d881fe12ebce9ec69c591cf" translate="yes" xml:space="preserve">
          <source>Similarly if you opened that handle &lt;code&gt;FH&lt;/code&gt; with regular &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, you may use:</source>
          <target state="translated">同様に、 &lt;code&gt;FH&lt;/code&gt; ハンドルを通常の &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; で開いた場合、以下を使用できます。</target>
        </trans-unit>
        <trans-unit id="53be67a31768325e220272f535bb98f85e3fcddf" translate="yes" xml:space="preserve">
          <source>Similarly one could take the output of the third numbers column from recipe 2 to obtain a &lt;code&gt;$cp_1047&lt;/code&gt; table. The fourth numbers column of the output from recipe 2 could provide a &lt;code&gt;$cp_posix_bc&lt;/code&gt; table suitable for transcoding as well.</source>
          <target state="translated">同様に、レシピ2から3番目の数値列の出力を取得して、 &lt;code&gt;$cp_1047&lt;/code&gt; テーブルを取得できます。レシピ2の出力の4番目の数値列は、トランスコーディングにも適した &lt;code&gt;$cp_posix_bc&lt;/code&gt; テーブルを提供します。</target>
        </trans-unit>
        <trans-unit id="d0f4815a422eaba46c3d84f219793b24d2375a6b" translate="yes" xml:space="preserve">
          <source>Similarly the NULL needs to be taken into account when you are considering the length of existing keys/values.</source>
          <target state="translated">同様に、既存のキー/値の長さを考慮する際にはNULLを考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="cc4fb6a726563143c1c04086d201d673d7729dd3" translate="yes" xml:space="preserve">
          <source>Similarly,</source>
          <target state="translated">Similarly,</target>
        </trans-unit>
        <trans-unit id="90864fd67d3db4c105028d84006c631220f52597" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;$href-&amp;gt;{'red'}&lt;/code&gt; is part of the hash referred to by the scalar variable &lt;code&gt;$href&lt;/code&gt; , perhaps even one with no name. &lt;code&gt;$href{'red'}&lt;/code&gt; is part of the deceptively named &lt;code&gt;%href&lt;/code&gt; hash. It's easy to forget to leave out the &lt;code&gt;-&amp;gt;&lt;/code&gt; , and if you do, you'll get bizarre results when your program gets array and hash elements out of totally unexpected hashes and arrays that weren't the ones you wanted to use.</source>
          <target state="translated">同様に、 &lt;code&gt;$href-&amp;gt;{'red'}&lt;/code&gt; は、スカラー変数 &lt;code&gt;$href&lt;/code&gt; によって参照されるハッシュの一部であり、おそらく名前のないものです。 &lt;code&gt;$href{'red'}&lt;/code&gt; は、一見して名前が付けられた &lt;code&gt;%href&lt;/code&gt; ハッシュの一部です。 &lt;code&gt;-&amp;gt;&lt;/code&gt; を省略することは忘れがちですが、省略した場合、プログラムが想定外のハッシュや配列から、意図したものではなかった配列やハッシュ要素を取得したときに、奇妙な結果が得られます。</target>
        </trans-unit>
        <trans-unit id="4d9f2629494d34ddc3413b1763638df2e3855408" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;-&amp;gt;autodefer(1)&lt;/code&gt; re-enables autodeferment, and &lt;code&gt;-&amp;gt;autodefer()&lt;/code&gt; recovers the current value of the autodefer setting.</source>
          <target state="translated">同様に、 &lt;code&gt;-&amp;gt;autodefer(1)&lt;/code&gt; はautodefermentを再度有効にし、 &lt;code&gt;-&amp;gt;autodefer()&lt;/code&gt; はautodefer設定の現在の値を回復します。</target>
        </trans-unit>
        <trans-unit id="ed0a74921b522c90d239c941839d98f9f544df9e" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;.=&lt;/code&gt; and &lt;code&gt;x=&lt;/code&gt; operators lose their mathemagical properties if the string conversion substitution is applied.</source>
          <target state="translated">同様に、文字列変換置換が適用されると、 &lt;code&gt;.=&lt;/code&gt; および &lt;code&gt;x=&lt;/code&gt; 演算子は数学的なプロパティを失います。</target>
        </trans-unit>
        <trans-unit id="98381cd292cecc23499c5a97dc7663476a411916" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; magic can be used much like tie() to call a C function any time a scalar's value is used or changed. The &lt;code&gt;MAGIC&lt;/code&gt; 's &lt;code&gt;mg_ptr&lt;/code&gt; field points to a &lt;code&gt;ufuncs&lt;/code&gt; structure:</source>
          <target state="translated">同様に、 &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; マジックはC関数スカラーの値が使用されるか、または変更されるたびに呼び出すために）多くのタイ（同様に使用することができます。 &lt;code&gt;MAGIC&lt;/code&gt; さん &lt;code&gt;mg_ptr&lt;/code&gt; に視野点 &lt;code&gt;ufuncs&lt;/code&gt; の構造：</target>
        </trans-unit>
        <trans-unit id="e1434bb43847966624ccbd7c82a8d888d8931593" translate="yes" xml:space="preserve">
          <source>Similarly, Perl's built-in &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; function treats a reference to a blessed object specially. If you call &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref($thing)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;$thing&lt;/code&gt; holds a reference to an object, it will return the name of the class that the object has been blessed into.</source>
          <target state="translated">同様に、Perlの組み込み &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 関数は、祝福されたオブジェクトへの参照を特別に扱います。 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref($thing)&lt;/a&gt;&lt;/code&gt; を呼び出し、 &lt;code&gt;$thing&lt;/code&gt; がオブジェクトへの参照を保持している場合、オブジェクトがblessされたクラスの名前を返します。</target>
        </trans-unit>
        <trans-unit id="ed57441510534192d07967fc62d33e33379b4e80" translate="yes" xml:space="preserve">
          <source>Similarly, a list assignment in list context produces the list of lvalues assigned to, and a list assignment in scalar context returns the number of elements produced by the expression on the right hand side of the assignment.</source>
          <target state="translated">同様に、リストコンテキストでのリスト代入は、代入されたl値のリストを生成し、スカラコンテキストでのリスト代入は、代入の右側の式によって生成された要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="105351b9ff1ce0c3b0da126c3158372b6f241c09" translate="yes" xml:space="preserve">
          <source>Similarly, a value assigned to &lt;code&gt;$)&lt;/code&gt; must also be a space-separated list of numbers. The first number sets the effective gid, and the rest (if any) are passed to &lt;code&gt;setgroups()&lt;/code&gt; . To get the effect of an empty list for &lt;code&gt;setgroups()&lt;/code&gt; , just repeat the new effective gid; that is, to force an effective gid of 5 and an effectively empty &lt;code&gt;setgroups()&lt;/code&gt; list, say &lt;code&gt; $) = &quot;5 5&quot; &lt;/code&gt; .</source>
          <target state="translated">同様に、 &lt;code&gt;$)&lt;/code&gt; に割り当てられる値も、スペースで区切られた数値のリストでなければなりません。最初の数は有効なgidを設定し、残りは（もしあれば） &lt;code&gt;setgroups()&lt;/code&gt; に渡されます。 &lt;code&gt;setgroups()&lt;/code&gt; の空のリストの効果を取得するには、新しい有効なgidを繰り返します。つまり、有効なgidを5に、効果的に空の &lt;code&gt;setgroups()&lt;/code&gt; リストを強制するには、 &lt;code&gt; $) = &quot;5 5&quot; &lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f830d9f2bf12f89de4edd3497ea1af8e153890fe" translate="yes" xml:space="preserve">
          <source>Similarly, an expression that returns a reference to a scalar can be dereferenced via &lt;code&gt;${...}&lt;/code&gt; . Thus, the above expression may be written as:</source>
          <target state="translated">同様に、スカラーへの参照を返す式は、 &lt;code&gt;${...}&lt;/code&gt; 介して逆参照できます。したがって、上記の式は次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="d1370fc5b87a4deef9433fab962c63dda2bb0891" translate="yes" xml:space="preserve">
          <source>Similarly, autogeneration for keys &lt;code&gt;'+='&lt;/code&gt; and &lt;code&gt;'++'&lt;/code&gt; is analogous to &lt;code&gt;'-='&lt;/code&gt; and &lt;code&gt;'--'&lt;/code&gt; above:</source>
          <target state="translated">同様に、キー &lt;code&gt;'+='&lt;/code&gt; および &lt;code&gt;'++'&lt;/code&gt; 自動生成は、上記の &lt;code&gt;'-='&lt;/code&gt; および &lt;code&gt;'--'&lt;/code&gt; 類似しています。</target>
        </trans-unit>
        <trans-unit id="22f4fe3ff0b7318ce2f9a1f22a4a30c916f48517" translate="yes" xml:space="preserve">
          <source>Similarly, because of all the subscripting that is done using single words, the same rule applies to any bareword that is used for subscripting a hash. So now, instead of writing</source>
          <target state="translated">同様に、すべての添え字は単一語を使用して行われるため、ハッシュの添え字に使用されるすべての裸語にも同じルールが適用されます。したがって、次のように記述する代わりに</target>
        </trans-unit>
        <trans-unit id="1ef17c2e729b74afc14b925795781df60a813811" translate="yes" xml:space="preserve">
          <source>Similarly, decimal strings can represent only those numbers which have a finite decimal expansion. Being strings, and thus of arbitrary length, there is no practical limit for the exponent or number of decimal digits for these numbers. (But realize that what we are discussing the rules for just the</source>
          <target state="translated">同様に、10進数の文字列は、有限の10進数展開を持つ数だけを表すことができます。文字列であり、したがって任意の長さであるため、これらの数の指数や小数点以下の桁数には実用的な制限はありません。(しかし、私たちが議論しているのは、単に</target>
        </trans-unit>
        <trans-unit id="d345f5b26d91c2f90c4bf682659d17c36e269cb0" translate="yes" xml:space="preserve">
          <source>Similarly, for repeated &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/()/g&lt;/a&gt;&lt;/code&gt; the second-best match is the match at the position one notch further in the string.</source>
          <target state="translated">同様に、繰り返される &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/()/g&lt;/a&gt;&lt;/code&gt; 、2番目に一致するのは、文字列の1ノッチ先の位置での一致です。</target>
        </trans-unit>
        <trans-unit id="dee2c36ef0fdac4abda9dcad28ab4aed983df538" translate="yes" xml:space="preserve">
          <source>Similarly, functions that return text data--such as a function that fetches a web page--should sometimes translate newlines before returning the data, if they've not yet been translated to the local newline representation. A single line of code will often suffice:</source>
          <target state="translated">同様に、テキストデータを返す関数(例えばウェブページを取得する関数など)は、データを返す前に改行を翻訳しなければならないことがありますが、もし改行がまだローカルの改行表現に翻訳されていない場合は、翻訳しなければなりません。多くの場合、一行のコードで十分です。</target>
        </trans-unit>
        <trans-unit id="6397152c0c35f4b75972d06222dcea4b97f1756f" translate="yes" xml:space="preserve">
          <source>Similarly, if the &lt;code&gt;compress&lt;/code&gt; program is available, you can use this to write a &lt;code&gt;.tar.Z&lt;/code&gt; file</source>
          <target state="translated">同様に、 &lt;code&gt;compress&lt;/code&gt; プログラムが利用可能な場合、これを使用して &lt;code&gt;.tar.Z&lt;/code&gt; ファイルを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="5e75a2bb501471358d82a9998e95b65710f45b03" translate="yes" xml:space="preserve">
          <source>Similarly, if you need the threads object, but your thread will not be returning a value (i.e.,</source>
          <target state="translated">同様に、スレッドオブジェクトが必要だが、スレッドが値を返さない場合 (すなわち</target>
        </trans-unit>
        <trans-unit id="5871ebe0fa13ed14449c1f6ca87d126616162345" translate="yes" xml:space="preserve">
          <source>Similarly, in the failure branch we could use &lt;code&gt;PUSHs&lt;/code&gt;</source>
          <target state="translated">同様に、失敗ブランチでは &lt;code&gt;PUSHs&lt;/code&gt; を使用できます</target>
        </trans-unit>
        <trans-unit id="9077bdc5741605a4137fa6215e60fd225b8f3e44" translate="yes" xml:space="preserve">
          <source>Similarly, it would be better to use &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; instead of,</source>
          <target state="translated">同様に、代わりに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; を使用&lt;a href=&quot;functions/use&quot;&gt;する&lt;/a&gt;方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="c46d4cfe15f7f292996d268d497a4ca8dd6bd83c" translate="yes" xml:space="preserve">
          <source>Similarly, just because an operator lets you assume default arguments doesn't mean that you have to make use of the defaults. The defaults are there for lazy systems programmers writing one-shot programs. If you want your program to be readable, consider supplying the argument.</source>
          <target state="translated">同様に、演算子がデフォルトの引数を仮定できるからといって、デフォルトを利用しなければならないという意味ではありません。デフォルトは、単発のプログラムを書く怠惰なシステムプログラマのためのものです。プログラムを読めるようにしたいのであれば、引数を与えることを検討してください。</target>
        </trans-unit>
        <trans-unit id="aab81862aa9c1688c2206840c0db77adfc7697fb" translate="yes" xml:space="preserve">
          <source>Similarly, mixing signals and threads may be problematic. Implementations are platform-dependent, and even the POSIX semantics may not be what you expect (and Perl doesn't even give you the full POSIX API). For example, there is no way to guarantee that a signal sent to a multi-threaded Perl application will get intercepted by any particular thread. (However, a recently added feature does provide the capability to send signals between threads. See &lt;a href=&quot;threads#THREAD-SIGNALLING&quot;&gt;THREAD SIGNALLING in threads&lt;/a&gt; for more details.)</source>
          <target state="translated">同様に、信号とスレッドを混在させると問題が発生する可能性があります。実装はプラットフォームに依存しており、POSIXのセマンティクスでさえ期待どおりではない場合があります（Perlでは完全なPOSIX APIも提供されません）。たとえば、マルチスレッドのPerlアプリケーションに送信された信号が特定のスレッドによってインターセプトされることを保証する方法はありません。（ただし、最近追加された機能は、スレッド間で信号を送信する機能を提供しません。を参照してください&lt;a href=&quot;threads#THREAD-SIGNALLING&quot;&gt;スレッドでTHREADシグナリングを&lt;/a&gt;詳細については。）</target>
        </trans-unit>
        <trans-unit id="2fa030e076fa248a433f0f83ee4a1aceaeee249f" translate="yes" xml:space="preserve">
          <source>Similarly, the parameter &lt;code&gt;inc_override&lt;/code&gt; may be a reference to an array which is used in place of the default module search paths from &lt;code&gt;@INC&lt;/code&gt; .</source>
          <target state="translated">同様に、パラメーター &lt;code&gt;inc_override&lt;/code&gt; は、 &lt;code&gt;@INC&lt;/code&gt; からのデフォルトのモジュール検索パスの代わりに使用される配列への参照である場合があります。</target>
        </trans-unit>
        <trans-unit id="1497da8abe3ed6eca13bd6302e3d281ea65007d7" translate="yes" xml:space="preserve">
          <source>Similarly, the resultant filespec will contain the file version only if one was present in the input filespec.</source>
          <target state="translated">同様に、結果として得られるファイルスペックには、入力ファイルスペックにファイルバージョンが存在する場合にのみ、ファイルバージョンが含まれます。</target>
        </trans-unit>
        <trans-unit id="0dacead88183b1e9c6304a4ceec665b6c24796d7" translate="yes" xml:space="preserve">
          <source>Similarly, they can be used in regular expression literals</source>
          <target state="translated">同様に、それらは正規表現リテラルで使用することができます。</target>
        </trans-unit>
        <trans-unit id="395326d4967b38aae5eb742109108213c899c254" translate="yes" xml:space="preserve">
          <source>Similarly, this is invalid:</source>
          <target state="translated">同様に、これも無効です。</target>
        </trans-unit>
        <trans-unit id="6c8f54b856913d21b69f361a1a90203715ac01de" translate="yes" xml:space="preserve">
          <source>Similarly, this recipe can be used for properties that do require adjustments:</source>
          <target state="translated">同様に、このレシピは、調整が必要なプロパティに使用することができます。</target>
        </trans-unit>
        <trans-unit id="e4b2e4fdd23d41dfea9d8225a12a424a715230bb" translate="yes" xml:space="preserve">
          <source>Similarly, this:</source>
          <target state="translated">同様に、これも。</target>
        </trans-unit>
        <trans-unit id="d1bdda2be136926ef9a893301ff91d18747c507f" translate="yes" xml:space="preserve">
          <source>Similarly, to copy an anonymous hash, you can use</source>
          <target state="translated">同様に、匿名ハッシュをコピーするには</target>
        </trans-unit>
        <trans-unit id="7850beac28db723d025cfad11fb93ce97e2ced9b" translate="yes" xml:space="preserve">
          <source>Similarly, using &lt;code&gt;$^W&lt;/code&gt; to either disable or enable blocks of code is fundamentally flawed. For a start, say you want to disable warnings in a block of code. You might expect this to be enough to do the trick:</source>
          <target state="translated">同様に、コードのブロックを無効または有効にするために &lt;code&gt;$^W&lt;/code&gt; を使用することには、根本的な欠陥があります。まず、コードブロックで警告を無効にしたいとします。あなたはこれがトリックを行うのに十分であると期待するかもしれません：</target>
        </trans-unit>
        <trans-unit id="2664530a7df4eabf1ac2e9d54c9f06c6deee6b41" translate="yes" xml:space="preserve">
          <source>Similarly, with this code</source>
          <target state="translated">同様に、このコードでは</target>
        </trans-unit>
        <trans-unit id="b0293d771b0de8656e1c85bf1faad486bf545599" translate="yes" xml:space="preserve">
          <source>Similarly, you may use these I/O layers on output streams to automatically convert Unicode to the specified encoding when it is written to the stream. For example, the following snippet copies the contents of the file &quot;text.jis&quot; (encoded as ISO-2022-JP, aka JIS) to the file &quot;text.utf8&quot;, encoded as UTF-8:</source>
          <target state="translated">同様に、出力ストリーム上のこれらの I/O レイヤを使用して、ストリームに書き込まれたときに Unicode を指定されたエンコーディングに自動的に変換することもできます。例えば、以下のスニペットは、ファイル「text.jis」(ISO-2022-JP、別名JISとしてエンコードされています)の内容を、ファイル「text.utf8」(UTF-8としてエンコードされています)にコピーしています。</target>
        </trans-unit>
        <trans-unit id="a9548affa7e4acbe2593b885978a8755658bc00f" translate="yes" xml:space="preserve">
          <source>Similary to</source>
          <target state="translated">に似ています。</target>
        </trans-unit>
        <trans-unit id="d038c3b0b4f25db2b86d3e73c906bad029553a54" translate="yes" xml:space="preserve">
          <source>Simon Cozens &amp;lt;simon AT brecon DOT co DOT uk&amp;gt; - Being there to answer zillions of annoying questions</source>
          <target state="translated">Simon Cozens &amp;lt;simon AT brecon DOT co DOT uk&amp;gt;-何十億もの迷惑な質問に答えるためにそこにいる</target>
        </trans-unit>
        <trans-unit id="db6a8ce8a7b56a60b15a1e81509c2149cf995dfb" translate="yes" xml:space="preserve">
          <source>Simon Cozens and Wolfgang Laun.</source>
          <target state="translated">シモン・コーゼンスとウォルフガング・ラウン</target>
        </trans-unit>
        <trans-unit id="911ebed02457e684e0b32e14a35ae78fa21f67e0" translate="yes" xml:space="preserve">
          <source>Simon Cozens, &lt;code&gt;simon@cpan.org&lt;/code&gt;</source>
          <target state="translated">Simon Cozens、 &lt;code&gt;simon@cpan.org&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c339f709f7b43634c7fbcb9cbd9eccd0f9cc3ac2" translate="yes" xml:space="preserve">
          <source>Simple Mail Transfer Protocol Client</source>
          <target state="translated">簡易メール転送プロトコルクライアント</target>
        </trans-unit>
        <trans-unit id="83f59937d173df040577971290f0e1cacd671a9c" translate="yes" xml:space="preserve">
          <source>Simple Statements</source>
          <target state="translated">シンプルなステートメント</target>
        </trans-unit>
        <trans-unit id="fd89bedbaeb791041cff4fe148dbfde653b95d00" translate="yes" xml:space="preserve">
          <source>Simple assignment is not overloadable (the &lt;code&gt;'='&lt;/code&gt; key is used for the &lt;a href=&quot;#Copy-Constructor&quot;&gt;Copy Constructor&lt;/a&gt;). Perl does have a way to make assignments to an object do whatever you want, but this involves using tie(), not overload - see &lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt; and the &lt;a href=&quot;#COOKBOOK&quot;&gt;COOKBOOK&lt;/a&gt; examples below.</source>
          <target state="translated">単純な割り当てはオーバーロード可能ではありません（ &lt;code&gt;'='&lt;/code&gt; キーは&lt;a href=&quot;#Copy-Constructor&quot;&gt;コピーコンストラクターに&lt;/a&gt;使用されます）。Perlはオブジェクトへの割り当ては、あなたがやりたいようにする方法を持っているが、これは過負荷ではない、（）ネクタイを使用することを含む-を参照して&lt;a href=&quot;functions/tie&quot;&gt;ネクタイ&lt;/a&gt;や&lt;a href=&quot;#COOKBOOK&quot;&gt;クックブック&lt;/a&gt;以下の例を。</target>
        </trans-unit>
        <trans-unit id="94eac8882772ef72bea55863ece1200dedf301b7" translate="yes" xml:space="preserve">
          <source>Simple enough. Now compile and run:</source>
          <target state="translated">十分に簡単です。今すぐコンパイルして実行してください。</target>
        </trans-unit>
        <trans-unit id="764eff41a5149cfadde2c6b72cdd2e21368ca43b" translate="yes" xml:space="preserve">
          <source>Simple examples to open a file for reading:</source>
          <target state="translated">ファイルを開いて読むための簡単な例</target>
        </trans-unit>
        <trans-unit id="8bbdbbffdc1d0c057f0470ba8573e7773f1d085a" translate="yes" xml:space="preserve">
          <source>Simple interface to Locale::Maketext::Lexicon</source>
          <target state="translated">Locale::Maketext::Lexiconへのシンプルなインターフェイス</target>
        </trans-unit>
        <trans-unit id="d1a65de4566d838633c7cfe8d2f3954d6165e02e" translate="yes" xml:space="preserve">
          <source>Simple methods for simple tasks</source>
          <target state="translated">簡単な作業のためのシンプルな方法</target>
        </trans-unit>
        <trans-unit id="107deb5b12e566d319794bc7ce2d8bcc70c508d0" translate="yes" xml:space="preserve">
          <source>Simple options</source>
          <target state="translated">シンプルなオプション</target>
        </trans-unit>
        <trans-unit id="b3c11d00394d5efd68e3089882ea99ef88db2b49" translate="yes" xml:space="preserve">
          <source>Simple subroutine to insert the macros defined by the macro attribute into the Makefile.</source>
          <target state="translated">マクロ属性で定義されたマクロをMakefileに挿入するシンプルなサブルーチンです。</target>
        </trans-unit>
        <trans-unit id="4f78d32b59c097fb10ad26d36f2e74fdbebe4e64" translate="yes" xml:space="preserve">
          <source>Simple word matching</source>
          <target state="translated">簡単な単語のマッチング</target>
        </trans-unit>
        <trans-unit id="f7b02d0f94f21913ddb8d295324658b8720d69e0" translate="yes" xml:space="preserve">
          <source>Simple, eh?</source>
          <target state="translated">簡単だろ?</target>
        </trans-unit>
        <trans-unit id="4ee1790ba48c5c5f5aec6b6de12f218c366e78db" translate="yes" xml:space="preserve">
          <source>Simple... Now look:</source>
          <target state="translated">単純な...見てください</target>
        </trans-unit>
        <trans-unit id="6c9330b7a2ff965f7db6cafb9f575b4d58374515" translate="yes" xml:space="preserve">
          <source>Simpler definition of attribute handlers</source>
          <target state="translated">よりシンプルな属性ハンドラの定義</target>
        </trans-unit>
        <trans-unit id="50c361747016ee3aff5355a6c96f0c2b139551ef" translate="yes" xml:space="preserve">
          <source>Simplest way to do it automatically is to use your version control system's revision number (you are using version control, right?).</source>
          <target state="translated">自動的に行う最も単純な方法は、バージョン管理システムのリビジョン番号を使用することです(バージョン管理を使用していますよね?</target>
        </trans-unit>
        <trans-unit id="68be18029150583164f9438753e32a72fd3e4c87" translate="yes" xml:space="preserve">
          <source>Simplified source filtering</source>
          <target state="translated">簡素化されたソースフィルタリング</target>
        </trans-unit>
        <trans-unit id="66f7f6fe24549ec54694a312ab799bde4d89b2f3" translate="yes" xml:space="preserve">
          <source>Simply not portable. Get your lvalue to be of the right type, or maybe use temporary variables, or dirty tricks with unions.</source>
          <target state="translated">単純にポータブルではありません。lvalue が正しい型になるようにしたり、一時的な変数を使ったり、ユニオンを使った汚いトリックを使ったりします。</target>
        </trans-unit>
        <trans-unit id="20084b93a5f754ce0ccd01de74eb0172d18babfc" translate="yes" xml:space="preserve">
          <source>Simply put:</source>
          <target state="translated">簡単に言うと</target>
        </trans-unit>
        <trans-unit id="991f810db6d12637f2fd5bbddcb5e86f7ab43bb2" translate="yes" xml:space="preserve">
          <source>Simply put: for each extension linked with your Perl executable (determined during its initial configuration on your computer or when adding a new extension), a Perl subroutine is created to incorporate the extension's routines. Normally, that subroutine is named</source>
          <target state="translated">簡単に言えば、Perlの実行ファイルにリンクされた各拡張子(コンピュータの初期設定時や新しい拡張子の追加時に決定されます)に対して、拡張子のルーチンを組み込むためのPerlのサブルーチンが作成されます。通常、そのサブルーチンの名前は</target>
        </trans-unit>
        <trans-unit id="86b802f817d8db47f98e358e0df4e43c122569da" translate="yes" xml:space="preserve">
          <source>Simply run</source>
          <target state="translated">単純に実行</target>
        </trans-unit>
        <trans-unit id="14c3e2e53d9dfb6b8072093e8b927f77f6a76d42" translate="yes" xml:space="preserve">
          <source>Simply says that we're Unix.</source>
          <target state="translated">単純にUnixだと言っているだけです。</target>
        </trans-unit>
        <trans-unit id="22a4ed66c623d273a571652cc9ae1a89577a837f" translate="yes" xml:space="preserve">
          <source>Since</source>
          <target state="translated">Since</target>
        </trans-unit>
        <trans-unit id="60dbe9f3bc2001b2c722387a7d49aaabb3da33d1" translate="yes" xml:space="preserve">
          <source>Since # can be used for comments, # must be escaped.</source>
          <target state="translated">コメントには#を使用できるので、#はエスケープしなければなりません。</target>
        </trans-unit>
        <trans-unit id="af160de91abb536123124eac1ecabfc37de02e74" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; does a &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; it may affect a &lt;code&gt;SIGCHLD&lt;/code&gt; handler. See &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for details.</source>
          <target state="translated">以来 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; ない &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; して &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; それが影響する可能性が &lt;code&gt;SIGCHLD&lt;/code&gt; のハンドラを。詳細については、&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aba59b2cf00e40d21bac4c0a192544510ddcbae0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; will also call the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method, the actual value for &lt;code&gt;MODULE&lt;/code&gt; must be a bareword. That is, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; cannot load files by name, although &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; can:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドも呼び出すので、 &lt;code&gt;MODULE&lt;/code&gt; の実際の値はベアワードでなければなりません。つまり、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; は名前でファイルをロードできませんが、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; は次のことができます。</target>
        </trans-unit>
        <trans-unit id="73d2921b742823e6f578c98791a72739f4a21337" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; does a &lt;code&gt;&lt;a href=&quot;fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; it may affect a &lt;code&gt;SIGCHLD&lt;/code&gt; handler. See &lt;a href=&quot;../perlipc&quot;&gt;perlipc&lt;/a&gt; for details.</source>
          <target state="translated">以来 &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; ない &lt;code&gt;&lt;a href=&quot;fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; して &lt;code&gt;&lt;a href=&quot;wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; それが影響する可能性が &lt;code&gt;SIGCHLD&lt;/code&gt; のハンドラを。詳細については、&lt;a href=&quot;../perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="53cc6266d93eb2a78be0857ad5ecd43af7e2b644" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Archive::Tar&lt;/code&gt; doesn't change the current directory internally while it is extracting the items in a tarball, all calls to &lt;code&gt;Cwd::cwd()&lt;/code&gt; can be avoided if we can guarantee that the current directory doesn't get changed externally.</source>
          <target state="translated">以来 &lt;code&gt;Archive::Tar&lt;/code&gt; それがtarballに項目を抽出している間に、内部でカレントディレクトリを変更しない場合には、すべてのコール &lt;code&gt;Cwd::cwd()&lt;/code&gt; 私たちは、現在のディレクトリが外部から変更されないことを保証できる場合に回避することができます。</target>
        </trans-unit>
        <trans-unit id="8c3c7a53144e6a3302e2a2f9e7b6229b194fa174" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGQUIT&lt;/code&gt; are ignored during the execution of &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, if you expect your program to terminate on receipt of these signals you will need to arrange to do so yourself based on the return value.</source>
          <target state="translated">以来 &lt;code&gt;SIGINT&lt;/code&gt; と &lt;code&gt;SIGQUIT&lt;/code&gt; は、実行中に無視される &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 、あなたのプログラムは、これらの信号の受信時に終了することが予想される場合には、戻り値に基づいて自分自身そうするように配置する必要があるでしょう。</target>
        </trans-unit>
        <trans-unit id="e4f45d5c1543b43feed600201b8df9285b671829" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGQUIT&lt;/code&gt; are ignored during the execution of &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, if you expect your program to terminate on receipt of these signals you will need to arrange to do so yourself based on the return value.</source>
          <target state="translated">以来 &lt;code&gt;SIGINT&lt;/code&gt; と &lt;code&gt;SIGQUIT&lt;/code&gt; は、実行中に無視される &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 、あなたのプログラムは、これらの信号の受信時に終了することが予想される場合には、戻り値に基づいて自分自身そうするように配置する必要があるでしょう。</target>
        </trans-unit>
        <trans-unit id="c78eaa920d9b2c6c4c17bb6231c81108ebdc9ea7" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;XSRETURN_*&lt;/code&gt; macros can be used with CODE blocks as well, one can rewrite this example as:</source>
          <target state="translated">以来 &lt;code&gt;XSRETURN_*&lt;/code&gt; マクロは、同様のコードブロックを使用することができ、一つは、この例を書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="4ae1fb90f2e2a999e504c7cb0f71e0777fa542ca" translate="yes" xml:space="preserve">
          <source>Since CPAN.pm version 1.88_51 modules declared as &lt;code&gt;build_requires&lt;/code&gt; by a distribution are treated differently depending on the config variable &lt;code&gt;build_requires_install_policy&lt;/code&gt; . By setting &lt;code&gt;build_requires_install_policy&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;, such a module is not installed. It is only built and tested, and then kept in the list of tested but uninstalled modules. As such, it is available during the build of the dependent module by integrating the path to the &lt;code&gt;blib/arch&lt;/code&gt; and &lt;code&gt;blib/lib&lt;/code&gt; directories in the environment variable PERL5LIB. If &lt;code&gt;build_requires_install_policy&lt;/code&gt; is set ti &lt;code&gt;yes&lt;/code&gt; , then both modules declared as &lt;code&gt;requires&lt;/code&gt; and those declared as &lt;code&gt;build_requires&lt;/code&gt; are treated alike. By setting to &lt;code&gt;ask/yes&lt;/code&gt; or &lt;code&gt;ask/&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; , CPAN.pm asks the user and sets the default accordingly.</source>
          <target state="translated">CPAN.pmバージョン1.88_51以降、ディストリビューションによって &lt;code&gt;build_requires&lt;/code&gt; として宣言されたモジュールは、設定変数 &lt;code&gt;build_requires_install_policy&lt;/code&gt; に応じて異なる方法で処理されます。 &lt;code&gt;build_requires_install_policy&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; に設定すると、そのようなモジュールはインストールされません。ビルドおよびテストのみが行われ、テスト済みでアンインストールされたモジュールのリストに保持されます。そのため、依存モジュールのビルド中に、環境変数PERL5LIB の &lt;code&gt;blib/arch&lt;/code&gt; および &lt;code&gt;blib/lib&lt;/code&gt; ディレクトリへのパスを統合することで利用できます。 &lt;code&gt;build_requires_install_policy&lt;/code&gt; がti &lt;code&gt;yes&lt;/code&gt; に設定されている場合、両方のモジュールがrequireとして宣言されてい &lt;code&gt;requires&lt;/code&gt; また、 &lt;code&gt;build_requires&lt;/code&gt; として宣言されたものも同様に扱われます。 &lt;code&gt;ask/yes&lt;/code&gt; または「 &lt;code&gt;ask/&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 」に設定すると、CPAN.pmはユーザーに質問し、それに応じてデフォルトを設定します。</target>
        </trans-unit>
        <trans-unit id="92bd94b93ba7aa98da9b694cc55416c0183aa164" translate="yes" xml:space="preserve">
          <source>Since DLLs may be loaded at run time, to have the same mechanism for DLLs one needs to have the address range of</source>
          <target state="translated">DLLは実行時にロードされる可能性があるので、DLLのための同じメカニズムを持つためには、アドレス範囲が</target>
        </trans-unit>
        <trans-unit id="b8d7eab0940cbd19c7e5c0a0410f1af9f2b70a97" translate="yes" xml:space="preserve">
          <source>Since Emacs version 19 patchlevel 22 or so, there have been both a perl-mode.el and support for the Perl debugger built in. These should come with the standard Emacs 19 distribution.</source>
          <target state="translated">Emacs 19のパッチレベル22くらいから、Perl-mode.elとPerlデバッガが組み込まれています。これらは標準の Emacs 19 ディストリビューションに付属しているはずです。</target>
        </trans-unit>
        <trans-unit id="ae992899a872766d28cfb8b692b2e7f7ecf24212" translate="yes" xml:space="preserve">
          <source>Since File::Spec is object oriented, subroutines should not be called directly, as in:</source>
          <target state="translated">File::Specはオブジェクト指向なので、サブルーチンを直接呼び出すべきではありません。</target>
        </trans-unit>
        <trans-unit id="58330cb00aafa72e888d41a23aef159c39b70e0c" translate="yes" xml:space="preserve">
          <source>Since INPUT sections allow declaration of C variables which do not appear in the parameter list of a subroutine, this may be shortened to:</source>
          <target state="translated">INPUTセクションでは、サブルーチンのパラメータリストに現れないC変数の宣言が可能なので、これは短縮されているかもしれません。</target>
        </trans-unit>
        <trans-unit id="45546e69c804ad74560b03b1bfa0ada21545dbab" translate="yes" xml:space="preserve">
          <source>Since Math::BigInt and BigFloat also overload the normal math operations, the following line will still work:</source>
          <target state="translated">Math::BigIntやBigFloatも通常の数学演算をオーバーロードしているので、以下の行はまだ動作します。</target>
        </trans-unit>
        <trans-unit id="bfdb84eddf5f43124818a551b78d4d19bef89ac6" translate="yes" xml:space="preserve">
          <source>Since OS/2 port of perl uses a remarkable EMX environment, it can run (and build extensions, and - possibly - be built itself) under any environment which can run EMX. The current list is DOS, DOS-inside-OS/2, Win0.3*, Win0.95 and WinNT. Out of many perl flavors, only one works, see &lt;a href=&quot;#perl_.exe&quot;&gt;perl_.exe&lt;/a&gt;.</source>
          <target state="translated">perlのOS / 2ポートは注目に値するEMX環境を使用しているため、EMXを実行できる任意の環境で実行できます（拡張機能をビルドし、場合によっては自分でビルドできます）。現在のリストは、DOS、DOS-inside-OS / 2、Win0.3 *、Win0.95、WinNTです。多くのperlフレーバーのうち、1つだけが機能します&lt;a href=&quot;#perl_.exe&quot;&gt;。perl_.exeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6084ebce66f9d95008fbd76add0c4721f5880c4b" translate="yes" xml:space="preserve">
          <source>Since PERL_SYS_INIT3() may change &lt;code&gt;env&lt;/code&gt; , it may be more appropriate to provide &lt;code&gt;env&lt;/code&gt; as an argument to perl_parse().</source>
          <target state="translated">PERL_SYS_INIT3（）は &lt;code&gt;env&lt;/code&gt; を変更する可能性があるため、perl_parse（）の引数として &lt;code&gt;env&lt;/code&gt; を提供する方が適切な場合があります。</target>
        </trans-unit>
        <trans-unit id="908c64d54ba36fa8efadd65bbb91e193ec071dc5" translate="yes" xml:space="preserve">
          <source>Since Perl 5.004, however, this situation is a special case and Perl creates the hash key only when you make the assignment:</source>
          <target state="translated">しかし、Perl 5.004以降は、このような状況は特殊なケースであり、Perlは代入を行ったときにのみハッシュキーを生成します。</target>
        </trans-unit>
        <trans-unit id="a9ff67b0f4d57746c4f60694c82d05a6c7b9009b" translate="yes" xml:space="preserve">
          <source>Since Perl 5.16.0, the &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; token is available under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'current_sub'&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.16.0&lt;/code&gt; . It will evaluate to a reference to the currently-running sub, which allows for recursive calls without knowing your subroutine's name.</source>
          <target state="translated">Perl 5.16.0以降、 &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; トークンは &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'current_sub'&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.16.0&lt;/code&gt; を使用します。これは、現在実行中のサブルーチンへの参照に評価され、サブルーチンの名前を知らなくても再帰呼び出しが可能になります。</target>
        </trans-unit>
        <trans-unit id="1fd1865b1bb90979ee802c45310e91e7b7152674" translate="yes" xml:space="preserve">
          <source>Since Perl 5.6.1 the special variables @- and @+ can functionally replace $`, $&amp;amp; and $'. These arrays contain pointers to the beginning and end of each match (see perlvar for the full story), so they give you essentially the same information, but without the risk of excessive string copying.</source>
          <target state="translated">Perl 5.6.1以降、特殊変数@-および@ +は$ `、$＆および$ 'を機能的に置き換えることができます。これらの配列には、各一致の最初と最後へのポインターが含まれているため（詳細についてはperlvarを参照）、基本的に同じ情報が得られますが、文字列が過度にコピーされるリスクはありません。</target>
        </trans-unit>
        <trans-unit id="0c3b5811fc581b714a97d98184d154d442e77a68" translate="yes" xml:space="preserve">
          <source>Since Perl 5.8, thread programming has been available using a model called</source>
          <target state="translated">Perl 5.8 以降、スレッドプログラミングは</target>
        </trans-unit>
        <trans-unit id="8b1528960c7f653f3987ab48deb0e1d4226f3c72" translate="yes" xml:space="preserve">
          <source>Since Perl 5.8.0 a file handle referring to a string can be created by calling open with a reference to that string instead of the filename. This file handle can then be used to read from or write to the string:</source>
          <target state="translated">Perl 5.8.0 以降では、ファイル名の代わりにその文字列を参照して open を呼び出すことで、文字列を参照するファイルハンドルを作成することができます。このファイルハンドルは、文字列からの読み書きに使用することができます。</target>
        </trans-unit>
        <trans-unit id="bd9a4f3a496c7e0b6fbb6d2a333860ae199a0774" translate="yes" xml:space="preserve">
          <source>Since Perl 5.8.0, if the first two elements of the list are &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the utime(2) syscall from your C library is called with a null second argument. On most systems, this will set the file's access and modification times to the current time (i.e., equivalent to the example above) and will work even on files you don't own provided you have write permission:</source>
          <target state="translated">Perl 5.8.0以降、リストの最初の2つの要素が &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合、Cライブラリからのutime（2）syscallは2番目の引数がnullで呼び出されます。ほとんどのシステムでは、これによりファイルのアクセス時刻と変更時刻が現在の時刻に設定され（つまり、上記の例と同等）、書き込み権限がある場合は、所有していないファイルでも機能します。</target>
        </trans-unit>
        <trans-unit id="82732a952fbe092bd928ea5f2a3dfaabc967f5cd" translate="yes" xml:space="preserve">
          <source>Since Perl 5.8.0, if the first two elements of the list are &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the utime(2) syscall from your C library is called with a null second argument. On most systems, this will set the file's access and modification times to the current time (i.e., equivalent to the example above) and will work even on files you don't own provided you have write permission:</source>
          <target state="translated">Perl 5.8.0以降、リストの最初の2つの要素が &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合、Cライブラリからのutime（2）syscallは2番目の引数がnullで呼び出されます。ほとんどのシステムでは、これによりファイルのアクセス時刻と変更時刻が現在の時刻に設定され（つまり、上記の例と同等）、書き込み権限がある場合は、所有していないファイルでも機能します。</target>
        </trans-unit>
        <trans-unit id="e51f3522d03a5b3a232bf4033ea382564508f931" translate="yes" xml:space="preserve">
          <source>Since Perl 5.8.0, signals have been made safer in Perl by postponing their handling until the interpreter is in a</source>
          <target state="translated">Perl 5.8.0 以降、Perl ではシグナルの処理をインタープリタが</target>
        </trans-unit>
        <trans-unit id="f2d46e3f9d2d01548c43a50c625a8e637b891700" translate="yes" xml:space="preserve">
          <source>Since Perl 5.8.0, you can also use the list form of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; for pipes. This is preferred when you wish to avoid having the shell interpret metacharacters that may be in your command string.</source>
          <target state="translated">Perl 5.8.0以降では、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; for pipesのリスト形式も使用できます。これは、コマンド文字列に含まれる可能性のあるメタ文字をシェルに解釈させたくない場合に適しています。</target>
        </trans-unit>
        <trans-unit id="3480b6dbc008fbf05d437030616ffbd60db1a205" translate="yes" xml:space="preserve">
          <source>Since Perl 5.9.5</source>
          <target state="translated">Perl 5.9.5以降</target>
        </trans-unit>
        <trans-unit id="83749785256b2bd98e45a0b0907ae739a924facc" translate="yes" xml:space="preserve">
          <source>Since Perl doesn't currently do anything with the &lt;code&gt;LC_MONETARY&lt;/code&gt; category, specifying &lt;code&gt;:monetary&lt;/code&gt; does effectively nothing. Some systems have other categories, such as &lt;code&gt;LC_PAPER_SIZE&lt;/code&gt; , but Perl also doesn't know anything about them, and there is no way to specify them in this pragma's arguments.</source>
          <target state="translated">Perlは現在 &lt;code&gt;LC_MONETARY&lt;/code&gt; カテゴリーで何もしないので、 &lt;code&gt;:monetary&lt;/code&gt; を指定しても実質的に何もしません。一部のシステムには &lt;code&gt;LC_PAPER_SIZE&lt;/code&gt; などの他のカテゴリがありますが、Perlもそれらについて何も認識せず、このプラグマの引数でそれらを指定する方法がありません。</target>
        </trans-unit>
        <trans-unit id="7873f3b494192ca12067337abef4df445eb77998" translate="yes" xml:space="preserve">
          <source>Since Perl may compile the pattern at the moment of execution of the &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr()&lt;/a&gt;&lt;/code&gt; operator, using &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr()&lt;/a&gt;&lt;/code&gt; may have speed advantages in some situations, notably if the result of &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr()&lt;/a&gt;&lt;/code&gt; is used standalone:</source>
          <target state="translated">Perlは実行の瞬間にパターンをコンパイルすることができるので、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr()&lt;/a&gt;&lt;/code&gt; 使用して、オペレータ &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr()&lt;/a&gt;&lt;/code&gt; 、いくつかの状況では、速度の利点を有していてもよく、特に、結果場合 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr()&lt;/a&gt;&lt;/code&gt; 使用スタンドアロンです。</target>
        </trans-unit>
        <trans-unit id="a306c8d466811a3ef5f554b084c63b5f925fc7a3" translate="yes" xml:space="preserve">
          <source>Since Perl processes the &lt;code&gt;#!&lt;/code&gt; -line (cf. &lt;a href=&quot;perlrun#DESCRIPTION&quot;&gt;DESCRIPTION in perlrun&lt;/a&gt;, &lt;a href=&quot;perlrun#Command-Switches&quot;&gt;Command Switches in perlrun&lt;/a&gt;, &lt;a href=&quot;perldiag#No-Perl-script-found-in-input&quot;&gt;No Perl script found in input in perldiag&lt;/a&gt;), it should know when a program</source>
          <target state="translated">Perlは &lt;code&gt;#!&lt;/code&gt; -line（参照のこと&lt;a href=&quot;perlrun#DESCRIPTION&quot;&gt;はperlrunで説明&lt;/a&gt;、&lt;a href=&quot;perlrun#Command-Switches&quot;&gt;コマンドはperlrunにスイッチ&lt;/a&gt;、&lt;a href=&quot;perldiag#No-Perl-script-found-in-input&quot;&gt;ノーのPerlスクリプトははperldiagに入力で見つかった&lt;/a&gt;）、それはときにプログラム知っておくべき</target>
        </trans-unit>
        <trans-unit id="8b7890be1aa1eaa7cb9334a73bda7962f1d481f1" translate="yes" xml:space="preserve">
          <source>Since Perl recognizes a Unicode Byte Order Mark at the start of files as signaling that the file is Unicode encoded as in UTF-16 (whether big-endian or little-endian) or UTF-8, Pod parsers should do the same. Otherwise, the character encoding should be understood as being UTF-8 if the first highbit byte sequence in the file seems valid as a UTF-8 sequence, or otherwise as CP-1252 (earlier versions of this specification used Latin-1 instead of CP-1252).</source>
          <target state="translated">Perlはファイルの先頭にあるUnicodeバイトオーダーマークを、ファイルがUTF-16(ビッグエンディアンでもリトルエンディアンでも)またはUTF-8でUnicodeエンコードされていることを示すものとして認識していますので、Podパーサも同じようにしなければなりません。それ以外の場合は、ファイル内の最初のハイビットバイト列がUTF-8列として有効であると思われる場合はUTF-8、そうでない場合はCP-1252(この仕様の以前のバージョンではCP-1252の代わりにLatin-1を使用していました)として、文字エンコーディングはUTF-8であると理解すべきです。</target>
        </trans-unit>
        <trans-unit id="6b73dcb8330d72308d60b51669745466fec012ac" translate="yes" xml:space="preserve">
          <source>Since Perl v5.22.0, calls to this function are optimized out on ASCII platforms, so there is no performance hit in using it there.</source>
          <target state="translated">Perl v5.22.0 以降、この関数の呼び出しは ASCII プラットフォーム上で最適化されているため、そこで使用してもパフォーマンスの低下はありません。</target>
        </trans-unit>
        <trans-unit id="9077183204414786a18b0b5b41280a8b58d8fe93" translate="yes" xml:space="preserve">
          <source>Since Perl v5.6.0, Perl variable names may be alphanumeric strings that begin with a caret (or a control character, but this form is deprecated). These variables must be written in the form &lt;code&gt;${^Foo}&lt;/code&gt; ; the braces are not optional. &lt;code&gt;${^Foo}&lt;/code&gt; denotes the scalar variable whose name is a control-&lt;code&gt;F&lt;/code&gt; followed by two &lt;code&gt;o&lt;/code&gt; 's. These variables are reserved for future special uses by Perl, except for the ones that begin with &lt;code&gt;^_&lt;/code&gt; (control-underscore or caret-underscore). No control-character name that begins with &lt;code&gt;^_&lt;/code&gt; will acquire a special meaning in any future version of Perl; such names may therefore be used safely in programs. &lt;code&gt;$^_&lt;/code&gt; itself, however,</source>
          <target state="translated">Perl v5.6.0以降、Perl変数名は、キャレット（または制御文字）で始まる英数字の文字列になる場合がありますが、この形式は非推奨です。これらの変数は &lt;code&gt;${^Foo}&lt;/code&gt; 形式で記述する必要があります。中括弧はオプションではありません。 &lt;code&gt;${^Foo}&lt;/code&gt; は、名前がcontrol &lt;code&gt;F&lt;/code&gt; 後に2つの &lt;code&gt;o&lt;/code&gt; が続くスカラー変数を示します。これらの変数は、 &lt;code&gt;^_&lt;/code&gt; で始まる変数（control-underscoreまたはcaret-underscore）を除いて、Perlによる将来の特別な使用のために予約されています。 &lt;code&gt;^_&lt;/code&gt; で始まる制御文字名は、将来のバージョンのPerlで特別な意味を持つことはありません。したがって、このような名前はプログラムで安全に使用できます。ただし、 &lt;code&gt;$^_&lt;/code&gt; 自体</target>
        </trans-unit>
        <trans-unit id="33f810cef075561e9d829f100d7d5982e746f4f2" translate="yes" xml:space="preserve">
          <source>Since PodParser-1.24 the &lt;b&gt;Pod::Checker&lt;/b&gt; module uses only the &lt;b&gt;poderror&lt;/b&gt; method to print errors and warnings. The summary output (e.g. &quot;Pod syntax OK&quot;) has been dropped from the module and has been included in &lt;b&gt;podchecker&lt;/b&gt; (the script). This allows users of &lt;b&gt;Pod::Checker&lt;/b&gt; to control completely the output behavior. Users of &lt;b&gt;podchecker&lt;/b&gt; (the script) get the well-known behavior.</source>
          <target state="translated">PodParser-1.24以降、&lt;b&gt;Pod :: Checker&lt;/b&gt;モジュールは&lt;b&gt;poderror&lt;/b&gt;メソッドのみを使用してエラーと警告を出力します。要約出力（たとえば、「Pod syntax OK」）はモジュールから削除され、&lt;b&gt;podchecker&lt;/b&gt;（スクリプト）に含まれています。これにより、&lt;b&gt;Pod :: Checkerの&lt;/b&gt;ユーザーは出力動作を完全に制御できます。&lt;b&gt;ポッドチェッカー&lt;/b&gt;（スクリプト）のユーザーは、よく知られた動作をします。</target>
        </trans-unit>
        <trans-unit id="c62ae1b79550d7e8d8b071446dadbd144fa9a44a" translate="yes" xml:space="preserve">
          <source>Since Storable version 2.05, CODE references may be serialized with the help of &lt;a href=&quot;b/deparse&quot;&gt;B::Deparse&lt;/a&gt;. To enable this feature, set &lt;code&gt;$Storable::Deparse&lt;/code&gt; to a true value. To enable deserialization, &lt;code&gt;$Storable::Eval&lt;/code&gt; should be set to a true value. Be aware that deserialization is done through &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, which is dangerous if the Storable file contains malicious data. You can set &lt;code&gt;$Storable::Eval&lt;/code&gt; to a subroutine reference which would be used instead of &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;. See below for an example using a &lt;a href=&quot;safe&quot;&gt;Safe&lt;/a&gt; compartment for deserialization of CODE references.</source>
          <target state="translated">Storableバージョン2.05以降、CODE参照は&lt;a href=&quot;b/deparse&quot;&gt;B :: Deparse&lt;/a&gt;を使用してシリアル化される場合があります。この機能を有効にするには、 &lt;code&gt;$Storable::Deparse&lt;/code&gt; をtrue値に設定します。逆シリアル化を有効にするには、 &lt;code&gt;$Storable::Eval&lt;/code&gt; をtrue値に設定する必要があります。逆シリアル化は &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; を介して行われることに注意してください。これは、Storableファイルに悪意のあるデータが含まれている場合は危険です。 &lt;code&gt;$Storable::Eval&lt;/code&gt; を、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; の代わりに使用されるサブルーチン参照に設定できます。CODE参照の逆シリアル化に&lt;a href=&quot;safe&quot;&gt;セーフ&lt;/a&gt;コンパートメントを使用する例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="f0441a16b2e74d4d0e51c5a02d816d3fcef92571" translate="yes" xml:space="preserve">
          <source>Since UTF-7 is a 7-bit (re)encoded version of UTF-16BE, It is not part of Unicode's Character Encoding Scheme. It is separately implemented in Encode::Unicode::UTF7. For details see &lt;a href=&quot;unicode/utf7&quot;&gt;Encode::Unicode::UTF7&lt;/a&gt;.</source>
          <target state="translated">UTF-7はUTF-16BEの7ビット（再）エンコードバージョンであるため、Unicodeの文字エンコードスキームの一部ではありません。Encode :: Unicode :: UTF7で個別に実装されています。詳細については、&lt;a href=&quot;unicode/utf7&quot;&gt;Encode :: Unicode :: UTF7を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2162d18e9f113918db80108542b383e4720b61a0" translate="yes" xml:space="preserve">
          <source>Since Unicode rules are not defined on these code points, if a Unicode-defined operation is done on them, Perl uses what we believe are sensible rules, while generally warning, using the &lt;code&gt;&quot;non_unicode&quot;&lt;/code&gt; category. For example, &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc(&quot;\x{11_0000}&quot;)&lt;/a&gt;&lt;/code&gt; will generate such a warning, returning the input parameter as its result, since Perl defines the uppercase of every non-Unicode code point to be the code point itself. (All the case changing operations, not just uppercasing, work this way.)</source>
          <target state="translated">Unicodeルールはこれらのコードポイントで定義されていないため、Unicode定義の操作がそれらに対して行われる場合、Perlは一般に警告しながら、 &lt;code&gt;&quot;non_unicode&quot;&lt;/code&gt; カテゴリを使用して、賢明なルールであると私たちが信じるものを使用します。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc(&quot;\x{11_0000}&quot;)&lt;/a&gt;&lt;/code&gt; はそのような警告を生成し、Perlはすべての非Unicodeコードポイントの大文字をコードポイント自体として定義するため、その結果として入力パラメーターを返します。（大文字変換だけでなく、すべての大文字小文字変換操作がこのように機能します。）</target>
        </trans-unit>
        <trans-unit id="7285a56d9c4d213c9ad280d3cdcf143edd27d7d8" translate="yes" xml:space="preserve">
          <source>Since VMS keeps track of files according to a different scheme than Unix, it's not really possible to represent the file's ID in the &lt;code&gt;st_dev&lt;/code&gt; and &lt;code&gt;st_ino&lt;/code&gt; fields of a &lt;code&gt;struct &lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; . Perl tries its best, though, and the values it uses are pretty unlikely to be the same for two different files. We can't guarantee this, though, so caveat scriptor.</source>
          <target state="translated">VMSはUnixとは異なるスキームに従ってファイルを追跡しているため、 &lt;code&gt;struct &lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;functions/stat&quot;&gt;statの&lt;/a&gt; &lt;code&gt;st_dev&lt;/code&gt; および &lt;code&gt;st_ino&lt;/code&gt; フィールドでファイルのIDを表すことは実際には不可能です。ただし、Perlは最善を尽くします。Perlが使用する値は、2つの異なるファイルで同じになることはほとんどありません。ただし、これを保証することはできませんので、注意してください。</target>
        </trans-unit>
        <trans-unit id="5c5a9b6174ae871df152be709da101732e21f32c" translate="yes" xml:space="preserve">
          <source>Since Windows has nothing as simple as an executable bit, we check the file extension.</source>
          <target state="translated">Windowsには実行ビットのような単純なものはないので、ファイルの拡張子を確認します。</target>
        </trans-unit>
        <trans-unit id="fd9730169823a0770803a5925e2496af06ca17b1" translate="yes" xml:space="preserve">
          <source>Since a TODO test does not need a reason, this function can return an empty string even when inside a TODO block. Use &lt;code&gt;$Test-&amp;gt;in_todo&lt;/code&gt; to determine if you are currently inside a TODO block.</source>
          <target state="translated">TODOテストは理由を必要としないため、この関数はTODOブロック内にある場合でも空の文字列を返す可能性があります。 &lt;code&gt;$Test-&amp;gt;in_todo&lt;/code&gt; を使用して、現在TODOブロック内にいるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="9ae46893bafbcba3b5e81c0b6866dc9c42e9443c" translate="yes" xml:space="preserve">
          <source>Since a wide character does not fit into a byte, the Digest::SHA routines croak if they encounter one. Whereas if a Unicode string contains no wide characters, the module accepts it quite happily. The following code illustrates the two cases:</source>
          <target state="translated">ワイド文字はバイトに収まらないので、ダイジェスト::SHA ルーチンは、ワイド文字に遭遇すると悲鳴を上げます。一方、Unicode 文字列にワイド文字が含まれていない場合、モジュールは喜んでそれを受け入れます。以下のコードは、この2つのケースを示しています。</target>
        </trans-unit>
        <trans-unit id="cf5ecd8beadbfc6894afc9b33f8c568a935ac82c" translate="yes" xml:space="preserve">
          <source>Since all &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; directives are executed at compile-time, the only way to change overloading during run-time is to</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ディレクティブはコンパイル時に実行されるため、実行時にオーバーロードを変更する唯一の方法は、</target>
        </trans-unit>
        <trans-unit id="121e9d461e86db932f5cbbcefdf834cbc71c32ee" translate="yes" xml:space="preserve">
          <source>Since all numbers are not objects, you can use all functions that are part of the BigInt or BigFloat API. It is wise to use only the bxxx() notation, and not the fxxx() notation, though. This makes you independent on the fact that the underlying object might morph into a different class than BigFloat.</source>
          <target state="translated">すべての数値はオブジェクトではないので、BigInt または BigFloat API の一部であるすべての関数を使用できます。ただし、fxxx()記法ではなく bxxx()記法のみを使用するのが賢明です。これにより、基礎となるオブジェクトが BigFloat とは異なるクラスに変形する可能性があるという事実から独立しています。</target>
        </trans-unit>
        <trans-unit id="a8ab3cbd0a89b8927ddf254335c455bf7a9e0853" translate="yes" xml:space="preserve">
          <source>Since all numbers are now objects, you can use all functions that are part of the BigInt API. You can only use the bxxx() notation, and not the fxxx() notation, though.</source>
          <target state="translated">すべての数値がオブジェクトになったので、BigInt API の一部であるすべての関数を使用できます。ただし、使用できるのは bxxx()記法のみで、fxxx()記法は使用できません。</target>
        </trans-unit>
        <trans-unit id="4e2f7ef257d55f0fed05e16ea09bffefc9e8b92c" translate="yes" xml:space="preserve">
          <source>Since all numbers are now objects, you can use all functions that are part of the BigInt or BigFloat API. It is wise to use only the bxxx() notation, and not the fxxx() notation, though. This makes it possible that the underlying object might morph into a different class than BigFloat.</source>
          <target state="translated">すべての数値がオブジェクトになったので、BigInt または BigFloat API の一部であるすべての関数を使用できます。ただし、fxxx()記法ではなく bxxx()記法のみを使用するのが賢明です。これにより、基礎となるオブジェクトが BigFloat とは異なるクラスに変化する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6baa6e390f30e8a9126d448dab3ed477bfa1776f" translate="yes" xml:space="preserve">
          <source>Since an expression &lt;code&gt;&quot;ab$cd,,&quot;&lt;/code&gt; is just a shortcut for &lt;code&gt;'ab' . $cd . ',,'&lt;/code&gt; , it is expected that overloaded constant strings are equipped with reasonable overloaded catenation operator, otherwise absurd results will result. Similarly, negative numbers are considered as negations of positive constants.</source>
          <target state="translated">&lt;code&gt;&quot;ab$cd,,&quot;&lt;/code&gt; という表現は &lt;code&gt;'ab' . $cd . ',,'&lt;/code&gt; 単なるショートカットです。$ cd。',,'、オーバーロードされた定数文字列には、合理的なオーバーロードされた連結演算子が装備されていると予想されます。そうでない場合、不合理な結果が生じます。同様に、負の数は正の定数の否定と見なされます。</target>
        </trans-unit>
        <trans-unit id="6ad22ba0685e5d4fac9ab43140e5e8b95922e320" translate="yes" xml:space="preserve">
          <source>Since any scalar can be passed as a pattern, it's possible to implement an engine that does something with an array (&lt;code&gt;&quot;ook&quot; =~ [ qw/ eek
hlagh / ]&lt;/code&gt; ) or with the non-stringified form of a compiled regular expression (&lt;code&gt;&quot;ook&quot; =~ qr/eek/&lt;/code&gt; ). Perl's own engine will always stringify everything using the snippet above, but that doesn't mean other engines have to.</source>
          <target state="translated">任意のスカラーをパターンとして渡すことができるため、配列（ &lt;code&gt;&quot;ook&quot; =~ [ qw/ eek hlagh / ]&lt;/code&gt; ）または文字列化されていない形式のコンパイル済み正規表現（ &lt;code&gt;&quot;ook&quot; =~ qr/eek/&lt;/code&gt; を使用して何かを実行するエンジンを実装できます。 ook &quot;=〜qr / eek /）。Perl自身のエンジンは常に上記のスニペットを使用してすべてを文字列化しますが、それは他のエンジンがそうする必要があることを意味しません。</target>
        </trans-unit>
        <trans-unit id="641d084a3985af991bd9e2608e23022b03d9ab2f" translate="yes" xml:space="preserve">
          <source>Since blessed objects are actually stored as RV's, it is useful to use the typemap features to preprocess parameters and extract the actual SV stored within the blessed RV. See the sample for T_PTROBJ_SPECIAL below.</source>
          <target state="translated">blessedオブジェクトは実際にはRVとして格納されているので、タイプマップ機能を使ってパラメータを前処理し、bessed RV内に格納されている実際のSVを抽出すると便利です。以下の T_PTROBJ_SPECIAL のサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="8c4a595ff52b120e783068a746cfa5bbb3e02fd1" translate="yes" xml:space="preserve">
          <source>Since changing a slice changes the original array or hash that it's slicing, a &lt;code&gt;foreach&lt;/code&gt; construct will alter some--or even all--of the values of the array or hash.</source>
          <target state="translated">スライスを変更すると、スライスする元の配列またはハッシュが変更されるため、 &lt;code&gt;foreach&lt;/code&gt; 構文は、配列またはハッシュの値の一部またはすべてを変更します。</target>
        </trans-unit>
        <trans-unit id="fe77918163189e19fb5ee32ad02fe79f3b55c3d3" translate="yes" xml:space="preserve">
          <source>Since code that runs both with and without threads is usually pretty messy, it's best to isolate the thread-specific code in its own module. In our example above, that's what &lt;code&gt;MyMod_threaded&lt;/code&gt; is, and it's only imported if we're running on a threaded Perl.</source>
          <target state="translated">スレッドありとスレッドなしの両方で実行されるコードは通常かなり面倒なので、スレッド固有のコードを独自のモジュールに分離するのが最善です。上記の例では、これが &lt;code&gt;MyMod_threaded&lt;/code&gt; であり、スレッド化されたPerlで実行している場合にのみインポートされます。</target>
        </trans-unit>
        <trans-unit id="7cbe078e4c38d00728f285597cf545219cabca7e" translate="yes" xml:space="preserve">
          <source>Since cygwin-1.7 pathnames are UTF-8 encoded.</source>
          <target state="translated">cygwin-1.7のパス名はUTF-8でエンコードされているので。</target>
        </trans-unit>
        <trans-unit id="266d3a18d9d36b211495f4b1c929d7f21c8d9c1c" translate="yes" xml:space="preserve">
          <source>Since cygwin-1.7 textmounts are deprecated and strongly discouraged.</source>
          <target state="translated">cygwin-1.7以降、テキストマウントは非推奨であり、強く推奨されていません。</target>
        </trans-unit>
        <trans-unit id="d1be23ed029f3a9d2b3315834beff1a066fe092b" translate="yes" xml:space="preserve">
          <source>Since environment variables are normally in all uppercase, no additional special formatting is generally needed; they're glaring enough as it is.</source>
          <target state="translated">環境変数は通常すべて大文字で書かれているので、一般的には特別な書式設定は必要ありません。</target>
        </trans-unit>
        <trans-unit id="af76bf7b4202770a0de3b09fc13dec72dab7c4f4" translate="yes" xml:space="preserve">
          <source>Since evaluation of the translation function (see &lt;a href=&quot;#CUSTOM-TRANSLATORS&quot;&gt;CUSTOM TRANSLATORS&lt;/a&gt;) happens in the middle of compilation (of a string literal), the translation function should not do any &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;s or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;s. This restriction should be lifted (but is low priority) in a future version of Perl.</source>
          <target state="translated">翻訳関数（&lt;a href=&quot;#CUSTOM-TRANSLATORS&quot;&gt;CUSTOM TRANSLATORSを&lt;/a&gt;参照）の評価は（文字列リテラルの）コンパイルの途中で行われるため、翻訳関数は &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; やsを &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; ません。この制限は、Perlの将来のバージョンで解除する必要があります（ただし、優先度は低くなります）。</target>
        </trans-unit>
        <trans-unit id="e702e67c36d5f56f32c4ca887c029adc55bb2d25" translate="yes" xml:space="preserve">
          <source>Since file associations don't work everywhere, and there are reportedly bugs with file associations where it does work, the old method of wrapping the perl script to make it look like a regular batch file to the OS, may be used. The install process makes available the &quot;pl2bat.bat&quot; script which can be used to wrap perl scripts into batch files. For example:</source>
          <target state="translated">ファイルの関連付けはどこでも動作するわけではなく、動作する場所ではファイルの関連付けにバグがあると報告されていますので、Perl スクリプトをラップして OS に通常のバッチファイルのように見せる昔からの方法を使うことができます。インストールプロセスでは &quot;pl2bat.bat&quot; スクリプトが利用可能になり、これを使って perl スクリプトをバッチファイルにラップすることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="23fd0e0c0c88af650bd14da915c09ac6e76b1837" translate="yes" xml:space="preserve">
          <source>Since hash keys are strings, the default normalizer will not distinguish between &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and the empty string. It also won't work when the function's arguments are references. For example, consider a function &lt;code&gt;g&lt;/code&gt; which gets two arguments: A number, and a reference to an array of numbers:</source>
          <target state="translated">ハッシュキーは文字列なので、デフォルトのノーマライザは &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; と空の文字列を区別しません。また、関数の引数が参照の場合も機能しません。たとえば、2つの引数を取得する関数 &lt;code&gt;g&lt;/code&gt; について考えてみましょう。数値と、数値の配列への参照です。</target>
        </trans-unit>
        <trans-unit id="fa1b02458a611387371114bfc83a2b6bef610aa1" translate="yes" xml:space="preserve">
          <source>Since in this example only the hostname was used, the redundant conversion of the port number into a service name may be omitted by passing the &lt;code&gt;NIx_NOSERV&lt;/code&gt; flag.</source>
          <target state="translated">この例ではホスト名のみが使用されているため、 &lt;code&gt;NIx_NOSERV&lt;/code&gt; フラグを渡すことで、ポート番号からサービス名への冗長な変換を省略できます。</target>
        </trans-unit>
        <trans-unit id="43ba5f496d72ffff6bead4e713df055d0751d289" translate="yes" xml:space="preserve">
          <source>Since it is an actual &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; (not a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;),</source>
          <target state="translated">これは実際に &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; あるため（必須ではありません）、</target>
        </trans-unit>
        <trans-unit id="0d7acf7de7efee5f314675d9545729adcf4f4695" translate="yes" xml:space="preserve">
          <source>Since it is only at the compilation stage that the operator mask applies, controlled access to potentially unsafe operations can be achieved by having a handle to a wrapper subroutine (written outside the compartment) placed into the compartment. For example,</source>
          <target state="translated">オペレータマスクが適用されるのはコンパイルの段階だけなので、安全でない可能性のある操作への制御されたアクセスは、(コンパートメントの外側に書かれた)ラッパーサブルーチンのハンドルをコンパートメントの中に配置することで実現できます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="194e3b48a27a3bdaa4b431c05b89584d736f7041" translate="yes" xml:space="preserve">
          <source>Since it's a common mistake to use &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, Perl warns you if &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; is called in void context and if there is a following statement that isn't &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; (if &lt;code&gt;-w&lt;/code&gt; is set--but you always do that, right?). If you</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; ではなく &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; を使用するのはよくある間違いであるため、 &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; がvoidコンテキストで呼び出され、次のステートメントが &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; でない場合（ &lt;code&gt;-w&lt;/code&gt; が設定されている場合）、Perlは警告しますが、常にそうですか？）もし、あんたが</target>
        </trans-unit>
        <trans-unit id="84dfc8fed05280b5766bcde26ffe3ad58754f68f" translate="yes" xml:space="preserve">
          <source>Since it's a common mistake to use &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, Perl warns you if &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; is called in void context and if there is a following statement that isn't &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; (if &lt;code&gt;-w&lt;/code&gt; is set--but you always do that, right?). If you</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; ではなく &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; を使用するのはよくある間違いであるため、 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; がvoidコンテキストで呼び出され、次のステートメントが &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; でない場合（ &lt;code&gt;-w&lt;/code&gt; が設定されている場合）、Perlは警告しますが、常にそうですか？）もし、あんたが</target>
        </trans-unit>
        <trans-unit id="738084392e8e6e74486d375f063b4666c3458a7c" translate="yes" xml:space="preserve">
          <source>Since just passing an SV to an XS function and copying the data of the SV is not enough to copy the UTF8 flags, even less right is just passing a &lt;code&gt;char *&lt;/code&gt; to an XS function.</source>
          <target state="translated">SVをXS関数に渡してSVのデータをコピーするだけではUTF8フラグをコピーするのに十分ではないので、 &lt;code&gt;char *&lt;/code&gt; をXS関数に渡すだけでは不十分です。</target>
        </trans-unit>
        <trans-unit id="b9469e3eb840b801f9d7d7208ec99b06d836b6ea" translate="yes" xml:space="preserve">
          <source>Since kernel threading can interrupt a thread at any time, they will uncover some of the implicit locking assumptions you may make in your program. For example, something as simple as &lt;code&gt;$x = $x + 2&lt;/code&gt; can behave unpredictably with kernel threads if &lt;code&gt;$x&lt;/code&gt; is visible to other threads, as another thread may have changed &lt;code&gt;$x&lt;/code&gt; between the time it was fetched on the right hand side and the time the new value is stored.</source>
          <target state="translated">カーネルスレッドはいつでもスレッドに割り込むことができるため、プログラムで行う可能性のある暗黙のロックの仮定の一部が明らかになります。以下のような簡単な例としては、何か &lt;code&gt;$x = $x + 2&lt;/code&gt; あれば、カーネルスレッドと予期しない動作することができる &lt;code&gt;$x&lt;/code&gt; 別のスレッドが変更されていてもよいように、他のスレッドに見える &lt;code&gt;$x&lt;/code&gt; それが右側にフェッチされた時刻との間新しい値が保存される時間。</target>
        </trans-unit>
        <trans-unit id="c3c7d09052cf4af0cf4ad320357c5a1a11966392" translate="yes" xml:space="preserve">
          <source>Since numbers are actually objects, you can call all the usual methods from BigInt/BigFloat on them. This even works to some extent on expressions:</source>
          <target state="translated">数字は実際にはオブジェクトなので、BigInt/BigFloatの通常のメソッドをすべて呼び出すことができます。これは式に対してもある程度機能します。</target>
        </trans-unit>
        <trans-unit id="ae2a46b8ade0fb9460587cc2799fe61eb4a8fb37" translate="yes" xml:space="preserve">
          <source>Since perl 5.17.1</source>
          <target state="translated">perl 5.17.1以降</target>
        </trans-unit>
        <trans-unit id="3f51453ac56d21d59ae3e879a25ac51097e95502" translate="yes" xml:space="preserve">
          <source>Since perl does not (yet?) support constant objects, these constants are in seconds only, so you cannot, for example, do this: &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt; ONE_WEEK-&amp;gt;minutes;&lt;/code&gt;</source>
          <target state="translated">（？まだ）perlがないので、あなたが、たとえば、これを行うことはできませんので、サポート定数オブジェクト、これらの定数は、わずか数秒である： &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt; ONE_WEEK-&amp;gt;minutes;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6206d48617efe1643080f044370ee3db2757b71" translate="yes" xml:space="preserve">
          <source>Since release 1.77, CPAN.pm has been able to verify cryptographically signed module distributions using Module::Signature. The CPAN modules can be signed by their authors, thus giving more security. The simple unsigned MD5 checksums that were used before by CPAN protect mainly against accidental file corruption.</source>
          <target state="translated">リリース 1.77 以降、CPAN.pm は Module::Signature を使って暗号的に署名されたモジュール配布物を検証できるようになりました。CPAN モジュールはその作者によって署名されることができるので、より多くのセキュリティが得られます。CPAN が以前に使用していた単純な符号なし MD5 チェックサムは、主に偶発的なファイル破損から保護します。</target>
        </trans-unit>
        <trans-unit id="f410d2ff83f136d497487286db5d2eccb910e974" translate="yes" xml:space="preserve">
          <source>Since some operations can be automatically generated from others, there is a minimal set of operations that need to be overloaded in order to have the complete set of overloaded operations at one's disposal. Of course, the autogenerated operations may not do exactly what the user expects. The minimal set is:</source>
          <target state="translated">いくつかの操作は他の操作から自動的に生成されることがあるので、自分の自由にオーバーロードされた操作の完全なセットを持つために、オーバーロードされる必要がある操作の最小限のセットがあります。もちろん、自動生成された操作は、ユーザが期待している通りに動作しないこともあります。最小限のセットとは</target>
        </trans-unit>
        <trans-unit id="9e13ee98073f6b6ff77b6bcc87f449d4c9298e6d" translate="yes" xml:space="preserve">
          <source>Since static extensions are incorporated directly into</source>
          <target state="translated">静的拡張機能は</target>
        </trans-unit>
        <trans-unit id="a88aba659efeb2d72344fd5945ed041580ceab14" translate="yes" xml:space="preserve">
          <source>Since storage is performed recursively, you might want to stuff references to objects that share a lot of common data into a single array or hash table, and then store that object. That way, when you retrieve back the whole thing, the objects will continue to share what they originally shared.</source>
          <target state="translated">ストレージは再帰的に実行されるので、多くの共通データを共有するオブジェクトへの参照を単一の配列やハッシュテーブルに詰め込んで、そのオブジェクトを格納したいと思うかもしれません。そうすれば、全体を取り出すときに、オブジェクトは元々共有していたものを共有し続けることができます。</target>
        </trans-unit>
        <trans-unit id="e4b31e0831fe480c7543658e6a5c02d003d2e334" translate="yes" xml:space="preserve">
          <source>Since subroutines implementing assignment operators are not required to modify their operands (see &lt;a href=&quot;#Overloadable-Operations&quot;&gt;Overloadable Operations&lt;/a&gt; above), we do not need anything special to make &lt;code&gt;+=&lt;/code&gt; and friends work, besides adding these operators to %subr and defining a copy constructor (needed since Perl has no way to know that the implementation of &lt;code&gt;'+='&lt;/code&gt; does not mutate the argument - see &lt;a href=&quot;#Copy-Constructor&quot;&gt;Copy Constructor&lt;/a&gt;).</source>
          <target state="translated">代入演算子を実装するサブルーチンはオペランドを変更する必要がないため（上記の&lt;a href=&quot;#Overloadable-Operations&quot;&gt;オーバーロード可能な&lt;/a&gt;演算を参照）、これらの演算子を％subrに追加してコピーコンストラクターを定義する（Perlが必要なため）以外に、 &lt;code&gt;+=&lt;/code&gt; やフレンドを機能させるために特別なことは必要ありません。 &lt;code&gt;'+='&lt;/code&gt; の実装が引数を変更しないことを知る方法はありません- &lt;a href=&quot;#Copy-Constructor&quot;&gt;コピーコンストラクターを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="24efb6846ccb0dd586c9a2d632cd24665dcacdba" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; method treats the &lt;code&gt;$VERSION&lt;/code&gt; number as a simple numeric value it will regard version 1.10 as lower than 1.9. For this reason it is strongly recommended that you use numbers with at least two decimal places, e.g., 1.09.</source>
          <target state="translated">以来 &lt;code&gt;UNIVERSAL::VERSION&lt;/code&gt; メソッドの扱い &lt;code&gt;$VERSION&lt;/code&gt; 簡単な数値として数それはより低い1.9とバージョン1.10を考えてます。このため、1.09など、少なくとも小数点以下2桁の数値を使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="9984a40959f39d46f91cc9c90e354da67e76965d" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;ops&lt;/code&gt; pragma currently has an irreversible global effect, it is only of significant practical use with the &lt;code&gt;-M&lt;/code&gt; option on the command line.</source>
          <target state="translated">以来 &lt;code&gt;ops&lt;/code&gt; プラグマは、現在、不可逆的なグローバルな効果を持っている、それだけで大きな実用的である &lt;code&gt;-M&lt;/code&gt; コマンドラインでオプション。</target>
        </trans-unit>
        <trans-unit id="926a29507017e24c08c49eb96c57773fd03c95dd" translate="yes" xml:space="preserve">
          <source>Since the MD5 algorithm is byte oriented you might only add bits as multiples of 8, so you probably want to just use add() instead. The add_bits() method is provided for compatibility with other digest implementations. See &lt;a href=&quot;../digest&quot;&gt;Digest&lt;/a&gt; for description of the arguments that add_bits() take.</source>
          <target state="translated">MD5アルゴリズムはバイト指向であるため、ビットを8の倍数としてのみ追加する可能性があるため、代わりに単にadd（）を使用することをお勧めします。add_bits（）メソッドは、他のダイジェスト実装との互換性のために提供されています。add_bits（）が取る引数の説明については、&lt;a href=&quot;../digest&quot;&gt;ダイジェスト&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fcf00ba41dfb6029d72bbfa314d984c685681962" translate="yes" xml:space="preserve">
          <source>Since the MD5 algorithm is only defined for strings of bytes, it can not be used on strings that contains chars with ordinal number above 255 (Unicode strings). The MD5 functions and methods will croak if you try to feed them such input data:</source>
          <target state="translated">MD5 アルゴリズムはバイトの文字列に対してのみ定義されているので、255 以上の序数を持つ文字を含む文字列 (Unicode 文字列)には使用できません。このような入力データを与えようとすると、MD5 の関数やメソッドは動作を停止します。</target>
        </trans-unit>
        <trans-unit id="4504893c7038fe54de5cf229bf7abc99b79c512f" translate="yes" xml:space="preserve">
          <source>Since the Perl extension DLLs are always loaded with the full path, there is no need to mangle their names in a version-specific ways: their directory already reflects the corresponding version of perl, and @INC takes into account binary compatibility with older version. Starting from &lt;code&gt;5.6.2&lt;/code&gt; the name mangling scheme is fixed to be the same as for Perl 5.005_53 (same as in a popular binary release). Thus new Perls will be able to</source>
          <target state="translated">Perl拡張DLLは常にフルパスでロードされるため、バージョン固有の方法で名前を変更する必要はありません。それらのディレクトリはすでに対応するバージョンのperlを反映しており、@ INCは古いバージョンとのバイナリ互換性を考慮しています。始まる &lt;code&gt;5.6.2&lt;/code&gt; 名前の符号化方式が固定されているPerlの5.005_53（人気のバイナリリリースと同じ）の場合と同じであることを。したがって、新しいPerlは</target>
        </trans-unit>
        <trans-unit id="b3bc7c77475d3cf936d8648a172f314719ec1f56" translate="yes" xml:space="preserve">
          <source>Since the first character of $x matched the regex, &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; prepended an empty initial element to the list.</source>
          <target state="translated">$ xの最初の文字が正規表現に一致したため、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; は空の初期要素をリストの先頭に追加しました。</target>
        </trans-unit>
        <trans-unit id="2334de3a289af7777d7979b79868746517ddea3f" translate="yes" xml:space="preserve">
          <source>Since the first character of $x matched the regexp, &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; prepended an empty initial element to the list.</source>
          <target state="translated">$ xの最初の文字が正規表現に一致したため、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; は空の初期要素をリストの先頭に追加しました。</target>
        </trans-unit>
        <trans-unit id="c9108eba2d411db85e70e8df1569d830e2a5d25c" translate="yes" xml:space="preserve">
          <source>Since the fork() emulation runs code in multiple threads, extensions calling into non-thread-safe libraries may not work reliably when calling fork(). As Perl's threading support gradually becomes more widely adopted even on platforms with a native fork(), such extensions are expected to be fixed for thread-safety.</source>
          <target state="translated">fork()エミュレーションは複数のスレッドでコードを実行するため、スレッドセーフではないライブラリを呼び出す拡張機能は、fork()を呼び出す際に確実に動作しない可能性があります。ネイティブの fork()があるプラットフォームでも Perl のスレッド化サポートが徐々に広く採用されるようになると、スレッドセーフのためにこのような拡張機能が修正されることが期待されています。</target>
        </trans-unit>
        <trans-unit id="b5c6d6292298eef29abac825fb611cdb8dbc410b" translate="yes" xml:space="preserve">
          <source>Since the logging doesn't use PerlIO, all SV allocations are logged and no extra SV allocations are introduced by enabling the logging. If compiled with &lt;code&gt;-DDEBUG_LEAKING_SCALARS&lt;/code&gt; , the serial number for each SV allocation is also logged.</source>
          <target state="translated">ロギングはPerlIOを使用しないため、すべてのSV割り当てがログに記録され、ロギングを有効にすることで追加のSV割り当ては導入されません。 &lt;code&gt;-DDEBUG_LEAKING_SCALARS&lt;/code&gt; を指定してコンパイルした場合、各SV割り当てのシリアル番号もログに記録されます。</target>
        </trans-unit>
        <trans-unit id="3279571aa6d0a69a5a2abdeb30f262cc44dbbdae" translate="yes" xml:space="preserve">
          <source>Since the match operator &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, the substitution operator &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;, and the regular expression quoting operator &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; are double-quotish constructs, you can interpolate variables into the pattern. See the answer to &quot;How can I quote a variable to use in a regex?&quot; for more details.</source>
          <target state="translated">一致演算子 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、置換演算子 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 、および正規表現引用演算子 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; は二重引用符構造なので、変数をパターンに補間できます。「正規表現で使用する変数をどのように引用できるか」の回答を参照してください。詳細については。</target>
        </trans-unit>
        <trans-unit id="84b10458d44f04e31c63c483bc8240735b5e37c7" translate="yes" xml:space="preserve">
          <source>Since the null filehandle uses the two argument form of &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; it interprets special characters, so if you have a script like this:</source>
          <target state="translated">nullファイルハンドルは&lt;a href=&quot;functions/open&quot;&gt;openの&lt;/a&gt; 2つの引数形式を使用するため、特殊文字を解釈するので、次のようなスクリプトがあるとします。</target>
        </trans-unit>
        <trans-unit id="cd81accbd1bb6c167fba1a41e5f2407058ac7a87" translate="yes" xml:space="preserve">
          <source>Since the object is also a hash, you can treat it as one, using it to store data associated with the object. Typically, code inside the class can treat the hash as an accessible data structure, while code outside the class should always treat the object as opaque. This is called &lt;b&gt;encapsulation&lt;/b&gt;. Encapsulation means that the user of an object does not have to know how it is implemented. The user simply calls documented methods on the object.</source>
          <target state="translated">オブジェクトはハッシュでもあるため、オブジェクトに関連付けられたデータを格納するためにそれを使用して、1つのオブジェクトとして扱うことができます。通常、クラス内のコードはハッシュをアクセス可能なデータ構造として扱うことができますが、クラス外のコードは常にオブジェクトを不透明として扱う必要があります。これは&lt;b&gt;カプセル化&lt;/b&gt;と呼ばれ&lt;b&gt;ます&lt;/b&gt;。カプセル化とは、オブジェクトのユーザーが、オブジェクトの実装方法を知る必要がないことを意味します。ユーザーはオブジェクトのドキュメント化されたメソッドを呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="db12f27020b74e90b153b0c7282afabc69308986" translate="yes" xml:space="preserve">
          <source>Since the original &lt;code&gt;big5&lt;/code&gt; encoding (1984) is not supported anywhere (glibc and DOS-based systems uses &lt;code&gt;big5&lt;/code&gt; to mean &lt;code&gt;big5-eten&lt;/code&gt; ; Microsoft uses &lt;code&gt;big5&lt;/code&gt; to mean &lt;code&gt;cp950&lt;/code&gt; ), a conscious decision was made to alias &lt;code&gt;big5&lt;/code&gt; to &lt;code&gt;big5-eten&lt;/code&gt; , which is the de facto superset of the original big5.</source>
          <target state="translated">オリジナルため &lt;code&gt;big5&lt;/code&gt; エンコーディング（1984）は、どこにもサポートされていない（のglibcとDOSベースのシステムの用途の &lt;code&gt;big5&lt;/code&gt; に平均 &lt;code&gt;big5-eten&lt;/code&gt; ; Microsoftが使用 &lt;code&gt;big5&lt;/code&gt; 意味するために &lt;code&gt;cp950&lt;/code&gt; ）意識的な決定がエイリアスに作られた、 &lt;code&gt;big5&lt;/code&gt; に &lt;code&gt;big5-eten&lt;/code&gt; 、ありますオリジナルのbig5の事実上のスーパーセット。</target>
        </trans-unit>
        <trans-unit id="e096824f5ca19792394259581d18c44d0fb48327" translate="yes" xml:space="preserve">
          <source>Since the path separators are different on some operating systems ('/' on Unix, ':' on MacPerl, etc...) we recommend you use the File::Spec modules wherever portability is a concern.</source>
          <target state="translated">オペレーティングシステムによってはパスセパレータが異なるため ('/'はUnixで、':'はMacPerlで、など)、移植性が気になる場合はFile::Specモジュールを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="afc1d2d6e3b782b2dd5e1481aef1464f9b2e04bc" translate="yes" xml:space="preserve">
          <source>Since the scope wasn't lexical, other modules' use of &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="translated">スコープ以来の字句、他のモジュールの使用はなかった &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="b0b947b7b4bc7b90e1cd94b89023d67ed8fe406b" translate="yes" xml:space="preserve">
          <source>Since the symbols listed within &lt;code&gt;%EXPORT_TAGS&lt;/code&gt; must also appear in either &lt;code&gt;@EXPORT&lt;/code&gt; or &lt;code&gt;@EXPORT_OK&lt;/code&gt; , two utility functions are provided which allow you to easily add tagged sets of symbols to &lt;code&gt;@EXPORT&lt;/code&gt; or &lt;code&gt;@EXPORT_OK&lt;/code&gt; :</source>
          <target state="translated">内にリストシンボル以来 &lt;code&gt;%EXPORT_TAGS&lt;/code&gt; またいずれかに表示される必要があります &lt;code&gt;@EXPORT&lt;/code&gt; または &lt;code&gt;@EXPORT_OK&lt;/code&gt; 、2つのユーティリティ関数を使用すると、簡単にシンボルのタグ付きセットを追加することができますが提供される &lt;code&gt;@EXPORT&lt;/code&gt; または &lt;code&gt;@EXPORT_OK&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1a1ad4491daa19cab8cfcffcbf76d31fdb6dedaa" translate="yes" xml:space="preserve">
          <source>Since the text to insert should be different in &lt;code&gt;bytes&lt;/code&gt; mode and out of it, the function should check the current state of &lt;code&gt;bytes&lt;/code&gt; -flag as in:</source>
          <target state="translated">挿入するテキストは &lt;code&gt;bytes&lt;/code&gt; モードとそれ以外では異なるため、関数は次のように &lt;code&gt;bytes&lt;/code&gt; -flagの現在の状態を確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="50530d766e72e0b6fff4d2cca6e94d3aad2090a6" translate="yes" xml:space="preserve">
          <source>Since there are relatively few objects in a picture, there are only a few colors, which get looked up over and over again. Memoizing &lt;code&gt;ColorToRGB&lt;/code&gt; sped up the program by several percent.</source>
          <target state="translated">画像に含まれるオブジェクトは比較的少ないため、何度も何度も調べられる色は数個しかありません。ColorToRGBを &lt;code&gt;ColorToRGB&lt;/code&gt; すると、プログラムが数パーセント高速化しました。</target>
        </trans-unit>
        <trans-unit id="b29f8659dcd90c4211c87b64479756be9287fa54" translate="yes" xml:space="preserve">
          <source>Since there is a bijection between a point in the 2D plane and a complex number (i.e. the mapping is unique and reciprocal), a complex number can also be uniquely identified with polar coordinates:</source>
          <target state="translated">2次元平面上の点と複素数との間にはバイjectionが存在する(すなわち、マッピングは一意で逆数である)ので、複素数もまた、極座標で一意に識別することができる。</target>
        </trans-unit>
        <trans-unit id="3716c24306b4924201a3a983711259349f4d7b7c" translate="yes" xml:space="preserve">
          <source>Since these functions are different for most operating systems, each set of OS specific routines is available in a separate module, including:</source>
          <target state="translated">これらの機能はほとんどのオペレーティングシステムで異なるため、OS固有のルーチンの各セットは、以下のような別のモジュールで利用可能です。</target>
        </trans-unit>
        <trans-unit id="c3d20e57f802de1056f71e94f07efcc76036480f" translate="yes" xml:space="preserve">
          <source>Since things like &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt(2)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;1 / 3&lt;/code&gt; must presented with a limited accuracy lest a operation consumes all resources, each operation produces no more than the requested number of digits.</source>
          <target state="translated">ようなもの以来 &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt(2)&lt;/a&gt;&lt;/code&gt; 又は &lt;code&gt;1 / 3&lt;/code&gt; 操作LEST限られた精度で呈示する必要がある各操作は、数字の要求された数を超えない生成、すべてのリソースを消費しません。</target>
        </trans-unit>
        <trans-unit id="b1a21b989b9d575d7d2eef7cf2bea0c2bc7b6c1e" translate="yes" xml:space="preserve">
          <source>Since this document was first written, the convention has become more and more to use hexadecimal notation for code points. To do this with the recipes and to also sort is a multi-step process, so here, for convenience, is the table from above, re-sorted to be in Code Page 1047 order, and using hex notation.</source>
          <target state="translated">この文書が最初に書かれて以来、コードポイントには16進数表記を使うことが多くなってきました。レシピでこれを行い、またソートすることは多段階のプロセスですので、ここでは便宜上、上の表をコードページ1047の順序になるように再ソートし、16進表記を使用しています。</target>
        </trans-unit>
        <trans-unit id="ef4f428bd8f59049b7e023a3a37d2ecfa135c01b" translate="yes" xml:space="preserve">
          <source>Since this is 0.something release, any future releases are almost guaranteed to be binary incompatible. As a sign of this the Symbian symbol exports are kept unfrozen and the .def files fully rebuilt every time.</source>
          <target state="translated">これは 0.something のリリースなので、将来のリリースはバイナリ互換性がないことがほとんど保証されています。その証として、Symbian のシンボルのエクスポートは凍結されておらず、.def ファイルは毎回完全に再構築されています。</target>
        </trans-unit>
        <trans-unit id="a29b3865557e1b6dfb498bcdde9cd5a7a83c05b9" translate="yes" xml:space="preserve">
          <source>Since this module is most often used only indirectly from extension &lt;code&gt;Makefile.PL&lt;/code&gt; files, here is an example &lt;code&gt;Makefile.PL&lt;/code&gt; entry to add a library to the build process for an extension:</source>
          <target state="translated">このモジュールは、拡張 &lt;code&gt;Makefile.PL&lt;/code&gt; ファイルから間接的にのみ使用されることが多いので、拡張のビルドプロセスにライブラリを追加する &lt;code&gt;Makefile.PL&lt;/code&gt; エントリの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="01f476f0532c2e2f8ff2160a3485f37336e92c5d" translate="yes" xml:space="preserve">
          <source>Since this module refers to perl core's Unicode database in the directory</source>
          <target state="translated">このモジュールは、ディレクトリ内の perl core の Unicode データベースを参照しています。</target>
        </trans-unit>
        <trans-unit id="e87fdde57834ef3e5b68a023cf000c8017fe6842" translate="yes" xml:space="preserve">
          <source>Since this procedure may take quite a long time to complete, it makes sense to &quot;freeze&quot; your CPAN configuration by disabling periodic updates of the local copy of CPAN index: set &lt;code&gt;index_expire&lt;/code&gt; to some big value (I use 365), then save the settings</source>
          <target state="translated">この手順は完了するまでにかなり長い時間がかかる可能性があるため、CPANインデックスのローカルコピーの定期的な更新を無効にしてCPAN構成を「フリーズ」することは理にかなっています &lt;code&gt;index_expire&lt;/code&gt; をいくつかの大きな値に設定し（365を使用）、設定を保存します</target>
        </trans-unit>
        <trans-unit id="db30ab250873c1062c4781e4e7b7fad867ddcab0" translate="yes" xml:space="preserve">
          <source>Since this will lead to issues as described above.</source>
          <target state="translated">上記のような問題が発生することになりますので</target>
        </trans-unit>
        <trans-unit id="5b8353c61df27001cdfae1689cea0393e824247d" translate="yes" xml:space="preserve">
          <source>Since threads are also subroutines, they can return values. To wait for a thread to exit and extract any values it might return, you can use the &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join()&lt;/a&gt;&lt;/code&gt; method:</source>
          <target state="translated">スレッドもサブルーチンなので、値を返すことができます。スレッドが終了するのを待ち、スレッドが返す可能性のある値を抽出するには、 &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join()&lt;/a&gt;&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="865359543cead83315159b60389211a49302275e" translate="yes" xml:space="preserve">
          <source>Since to call certain OS/2 API one needs to have a correctly initialized &lt;code&gt;Win&lt;/code&gt; subsystem, OS/2-specific extensions may require getting &lt;code&gt;HAB&lt;/code&gt; s and &lt;code&gt;HMQ&lt;/code&gt; s. If an extension would do it on its own, another extension could fail to initialize.</source>
          <target state="translated">特定のOS / 2 APIを呼び出すには、正しく初期化された &lt;code&gt;Win&lt;/code&gt; サブシステムが必要になるため、OS / 2固有の拡張機能では、 &lt;code&gt;HAB&lt;/code&gt; と &lt;code&gt;HMQ&lt;/code&gt; を取得する必要があります。拡張機能が独自に行う場合、別の拡張機能が初期化に失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="993c2506a3b501e251a227378341211573ee7139" translate="yes" xml:space="preserve">
          <source>Since v5.6.0, Perl's CORE::glob() is implemented in terms of bsd_glob(). Note that they don't share the same prototype--CORE::glob() only accepts a single argument. Due to historical reasons, CORE::glob() will also split its argument on whitespace, treating it as multiple patterns, whereas bsd_glob() considers them as one pattern. But see &lt;code&gt;:bsd_glob&lt;/code&gt; under &lt;a href=&quot;#EXPORTS&quot;&gt;EXPORTS&lt;/a&gt;, below.</source>
          <target state="translated">v5.6.0以降、PerlのCORE :: glob（）はbsd_glob（）の観点から実装されています。これらは同じプロトタイプを共有しないことに注意してください。CORE:: glob（）は単一の引数のみを受け入れます。歴史的な理由により、CORE :: glob（）は引数を空白で分割し、複数のパターンとして扱いますが、bsd_glob（）はそれらを1つのパターンと見なします。しかし参照 &lt;code&gt;:bsd_glob&lt;/code&gt; の下で&lt;a href=&quot;#EXPORTS&quot;&gt;輸出を&lt;/a&gt;、以下。</target>
        </trans-unit>
        <trans-unit id="4ad68534057bbff035849577fdc9d02265e92498" translate="yes" xml:space="preserve">
          <source>Since valgrind adds significant overhead, tests will take much longer to run. The valgrind tests support being run in parallel to help with this:</source>
          <target state="translated">valgrindはかなりのオーバーヘッドを追加するので、テストを実行するのに時間がかかります。valgrind のテストは、これを助けるために並行して実行することをサポートしています。</target>
        </trans-unit>
        <trans-unit id="cddab41a34bae01a0c375cc55e93affd1f3991b2" translate="yes" xml:space="preserve">
          <source>Since version 1.26.</source>
          <target state="translated">バージョン1.26から。</target>
        </trans-unit>
        <trans-unit id="6b04b338e1bf6330ffba84da282f69c260eb86f1" translate="yes" xml:space="preserve">
          <source>Since version 1.29.</source>
          <target state="translated">バージョン1.29から。</target>
        </trans-unit>
        <trans-unit id="90fa8ea868e9b39ffa1222c302c6573df472b992" translate="yes" xml:space="preserve">
          <source>Since version 1.30.</source>
          <target state="translated">バージョン1.30から。</target>
        </trans-unit>
        <trans-unit id="b46b7661e42d1c9773df584f5695782bec0ddb2f" translate="yes" xml:space="preserve">
          <source>Since version 1.33.</source>
          <target state="translated">バージョン1.33から。</target>
        </trans-unit>
        <trans-unit id="4b40436a29419119d4b78bb2f402e947b823a0e2" translate="yes" xml:space="preserve">
          <source>Since version 1.35.</source>
          <target state="translated">バージョン1.35から。</target>
        </trans-unit>
        <trans-unit id="3a2c4273e02619f5ed86c67adac94047a5ca0b70" translate="yes" xml:space="preserve">
          <source>Since version 1.36.</source>
          <target state="translated">バージョン1.36から。</target>
        </trans-unit>
        <trans-unit id="2498504f50455260e9635ae498353ef8c9decaca" translate="yes" xml:space="preserve">
          <source>Since version 5.8 Perl uses the PerlIO I/O library. This enables you to use different encodings per IO channel. For example you may use</source>
          <target state="translated">バージョン 5.8 以降、Perl は PerlIO I/O ライブラリを使用しています。これにより、IO チャンネルごとに異なるエンコーディングを使用することができます。例えば、以下のように</target>
        </trans-unit>
        <trans-unit id="656ca296455da01a08e031bd90f196ae0bd4a55c" translate="yes" xml:space="preserve">
          <source>Since version 5.8 Perl uses the new PerlIO on BS2000. This enables you using different encodings per IO channel. For example you may use</source>
          <target state="translated">バージョン5.8以降、PerlはBS2000で新しいPerlIOを使用しています。これにより、IOチャンネルごとに異なるエンコーディングを使用することができます。例えば</target>
        </trans-unit>
        <trans-unit id="5792847b18d8585cbe32d073b79aab824b6fbb3d" translate="yes" xml:space="preserve">
          <source>Since version 5.8.0, hashes can be</source>
          <target state="translated">バージョン5.8.0以降、ハッシュは</target>
        </trans-unit>
        <trans-unit id="3045986b0102a2064e1410bb295874d9fe22b31d" translate="yes" xml:space="preserve">
          <source>Since version &lt;code&gt;1.39&lt;/code&gt; these ARRAY references are blessed objects, recognising the two methods &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; . The following code is equivalent:</source>
          <target state="translated">バージョン &lt;code&gt;1.39&lt;/code&gt; 以降、これらのARRAY参照はblessオブジェクトであり、2つのメソッド &lt;code&gt;key&lt;/code&gt; および &lt;code&gt;value&lt;/code&gt; を認識します。次のコードは同等です。</target>
        </trans-unit>
        <trans-unit id="4da1ba2b2bc63ba7f5a165684b362132feb79be8" translate="yes" xml:space="preserve">
          <source>Since version v1.33, Math::BigInt and Math::BigFloat have full support for accuracy and precision based rounding, both automatically after every operation, as well as manually.</source>
          <target state="translated">バージョン v1.33 以降、Math::BigInt と Math::BigFloat は、精度と精度に基づく丸めを完全にサポートしており、すべての操作の後に自動的に丸められるだけでなく、手動でも丸められるようになりました。</target>
        </trans-unit>
        <trans-unit id="75e1e7b33ae8faf22bfba9121d2d99d1efb7768e" translate="yes" xml:space="preserve">
          <source>Since we didn't define a &lt;code&gt;save()&lt;/code&gt; method in the &lt;code&gt;File::MP3&lt;/code&gt; class, Perl will look at the &lt;code&gt;File::MP3&lt;/code&gt; class's parent classes to find the &lt;code&gt;save()&lt;/code&gt; method. If Perl cannot find a &lt;code&gt;save()&lt;/code&gt; method anywhere in the inheritance hierarchy, it will die.</source>
          <target state="translated">&lt;code&gt;File::MP3&lt;/code&gt; クラスで &lt;code&gt;save()&lt;/code&gt; メソッドを定義していないので、Perlは &lt;code&gt;File::MP3&lt;/code&gt; クラスの親クラスを調べて、 &lt;code&gt;save()&lt;/code&gt; メソッドを見つけます。Perlが継承階層のどこにも &lt;code&gt;save()&lt;/code&gt; メソッドを見つけられない場合、それは死にます。</target>
        </trans-unit>
        <trans-unit id="3e236441f92cccda5b2d49a5d2e52d11313518e5" translate="yes" xml:space="preserve">
          <source>Since we don't have an NV for &lt;code&gt;$b&lt;/code&gt; , we'll have to use &lt;code&gt;sv_2nv&lt;/code&gt; to convert it. If we step again, we'll find ourselves there:</source>
          <target state="translated">&lt;code&gt;$b&lt;/code&gt; NVがないため、 &lt;code&gt;sv_2nv&lt;/code&gt; を使用して変換する必要があります。もう一度足を踏み入れると、そこにいることがわかります。</target>
        </trans-unit>
        <trans-unit id="3708f0927e1925f92bdee0634ab63e7742c6b549" translate="yes" xml:space="preserve">
          <source>Since we don't know if &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; works, or even subroutines, use ad hoc tests for these three. Step carefully to avoid using the feature being tested. Tests in</source>
          <target state="translated">作業が &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; かどうか、あるいはサブルーチンさえもわからないので、これら3つにはアドホックテストを使用します。テスト中の機能を使用しないように注意してください。テスト</target>
        </trans-unit>
        <trans-unit id="b3f9ededf0cd07d09b1ffd3609acb21770a40353" translate="yes" xml:space="preserve">
          <source>Since we feed a list of ten 2-digit hexadecimal strings to &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;, the pack template should contain ten pack codes. If this is run on a computer with ASCII character coding, it will print &lt;code&gt;0123456789&lt;/code&gt; .</source>
          <target state="translated">10個の2桁の16進数文字列のリストを &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; にフィードするため、packテンプレートには10​​個のパックコードを含める必要があります。これがASCII文字コードのコンピューターで実行されると、 &lt;code&gt;0123456789&lt;/code&gt; が出力されます。</target>
        </trans-unit>
        <trans-unit id="c1a3bb738728020d7b3d2bd56167deba0672548c" translate="yes" xml:space="preserve">
          <source>Since we said earlier:</source>
          <target state="translated">さっき言ったように</target>
        </trans-unit>
        <trans-unit id="78829eafb6296e19175ed55a3097f673b5dc1d5f" translate="yes" xml:space="preserve">
          <source>Since you can assign to a list of variables, you can also assign to an array or hash slice.</source>
          <target state="translated">変数のリストに代入できるので、配列やハッシュスライスに代入することもできます。</target>
        </trans-unit>
        <trans-unit id="35b796faff1e6866bc3d8ff9ecdff8f636cea4f9" translate="yes" xml:space="preserve">
          <source>Since you only run one test per program &lt;code&gt;new&lt;/code&gt; always returns the same Test::Builder object. No matter how many times you call &lt;code&gt;new()&lt;/code&gt; , you're getting the same object. This is called a singleton. This is done so that multiple modules share such global information as the test counter and where test output is going.</source>
          <target state="translated">プログラムごとに1つのテストしか実行しないため、 &lt;code&gt;new&lt;/code&gt; は常に同じTest :: Builderオブジェクトを返します。 &lt;code&gt;new()&lt;/code&gt; を何度呼び出しても、同じオブジェクトを取得しています。これはシングルトンと呼ばれます。これは、複数のモジュールがテストカウンターやテスト出力の送信先などのグローバル情報を共有するために行われます。</target>
        </trans-unit>
        <trans-unit id="5df43da3b7bd5966cc2c20737e50dc599284dd8e" translate="yes" xml:space="preserve">
          <source>Since you want to be a good programmer, you probably want to use a lexical filehandle, even though formats are designed to work with bareword filehandles since the default format names take the filehandle name. However, you can control this with some Perl special per-filehandle variables: &lt;code&gt;$^&lt;/code&gt; , which names the top-of-page format, and &lt;code&gt;$~&lt;/code&gt; which shows the line format. You have to change the default filehandle to set these variables:</source>
          <target state="translated">優れたプログラマーになりたいので、デフォルトのフォーマット名はファイルハンドル名をとるので、フォーマットはベアワードファイルハンドルで機能するように設計されていますが、レキシカルファイルハンドルを使用する必要があります。ただし、Perlのファイルハンドルごとの特別な変数を使用して、これを制御できます。 &lt;code&gt;$^&lt;/code&gt; はページの先頭の形式を示し、 &lt;code&gt;$~&lt;/code&gt; は行の形式を示します。これらの変数を設定するには、デフォルトのファイルハンドルを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="31ee6b56ac231ef340b4b0ce7a9b1c774baa56bb" translate="yes" xml:space="preserve">
          <source>Since you're assigning to a scalar, the righthand side is in scalar context. The comma operator (yes, it's an operator!) in scalar context evaluates its lefthand side, throws away the result, and evaluates it's righthand side and returns the result. In effect, that list-lookalike assigns to &lt;code&gt;$scalar&lt;/code&gt; it's rightmost value. Many people mess this up because they choose a list-lookalike whose last element is also the count they expect:</source>
          <target state="translated">スカラーに割り当てるので、右側はスカラーコンテキストになります。スカラーコンテキストのコンマ演算子（はい、これは演算子です！）は、左側を評価し、結果を破棄し、右側を評価して結果を返します。実際には、そのリストのように、 &lt;code&gt;$scalar&lt;/code&gt; に右端の値を割り当てます。多くの人々は、最後の要素が期待する数でもあるリストのようなものを選択するので、これを台無しにします：</target>
        </trans-unit>
        <trans-unit id="b227b1e063b8171583fca32f48c11de71e845c84" translate="yes" xml:space="preserve">
          <source>Single 8-bit characters.</source>
          <target state="translated">シングル8ビット文字。</target>
        </trans-unit>
        <trans-unit id="62539aaf022cade9262a4b6494d3943b6956e5a8" translate="yes" xml:space="preserve">
          <source>Single Byte Encodings</source>
          <target state="translated">シングルバイトエンコーディング</target>
        </trans-unit>
        <trans-unit id="6a8a4e28358318025ab4a8b973931c58f9de9358" translate="yes" xml:space="preserve">
          <source>Single quotes indicate the text is to be treated literally with no interpolation of its content. This is similar to single quoted strings except that backslashes have no special meaning, with &lt;code&gt;\\&lt;/code&gt; being treated as two backslashes and not one as they would in every other quoting construct.</source>
          <target state="translated">一重引用符は、テキストがその内容を補間せずに文字どおりに処理されることを示します。これは、バックスラッシュが特別な意味を持たないことを除いて、単一引用符付き文字列に似ています。 &lt;code&gt;\\&lt;/code&gt; は、他のすべての引用構文でのように1つではなく2つのバックスラッシュとして扱われます。</target>
        </trans-unit>
        <trans-unit id="2988b7ce72e4ef43941b210b5d2de77bb3a0210b" translate="yes" xml:space="preserve">
          <source>Single space after keywords that are followed by parens, no space between function name and following paren</source>
          <target state="translated">キーワードの後にパーレンが続くキーワードの後にはシングルスペース、関数名と後続のパーレンの間にはスペースはありません。</target>
        </trans-unit>
        <trans-unit id="998773a99793919677d4844303decc2eb2f960f3" translate="yes" xml:space="preserve">
          <source>Single step. Executes until the beginning of another statement, descending into subroutine calls. If an expression is supplied that includes function calls, it too will be single-stepped.</source>
          <target state="translated">シングルステップ。別の文が始まるまで実行され、サブルーチンの呼び出しに発展します。関数呼び出しを含む式が与えられた場合、それもシングルステップになります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
