<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="5d40086458e1b194df3ff27c332046fe8de9903b" translate="yes" xml:space="preserve">
          <source>The user name that owns the file</source>
          <target state="translated">ファイルを所有するユーザー名</target>
        </trans-unit>
        <trans-unit id="9ab82377d9d8e711c9e229f8137ce74619a6f296" translate="yes" xml:space="preserve">
          <source>The user time is the amount of time the entire process spent on behalf of the user on this system executing this program.</source>
          <target state="translated">ユーザ時間とは、このシステム上でこのプログラムを実行しているユーザに代わってプロセス全体が費やした時間である。</target>
        </trans-unit>
        <trans-unit id="244da933c00a6b886bfc62a46ed8d2ddfb906e87" translate="yes" xml:space="preserve">
          <source>The user who wants the memoization cache to be expired according to your policy will say so by writing</source>
          <target state="translated">あなたのポリシーにしたがって、メモ化キャッシュを期限切れにしたいユーザーは、次のように書いて、その旨を伝えます。</target>
        </trans-unit>
        <trans-unit id="bb2fd16359343bc75d33118c9751a1ecbc3d3037" translate="yes" xml:space="preserve">
          <source>The usual arithmetic (+,-,+=,-=) is also available on the objects.</source>
          <target state="translated">通常の算術(+,-,+=,-=)は、オブジェクト上でも可能です。</target>
        </trans-unit>
        <trans-unit id="c7334043434491bfd6d25a23b05fb6d156604749" translate="yes" xml:space="preserve">
          <source>The usual calling signature is</source>
          <target state="translated">いつものコールサインは</target>
        </trans-unit>
        <trans-unit id="72046882a8fdaf30c0521d766b5cf67d3d264433" translate="yes" xml:space="preserve">
          <source>The usual idiom is:</source>
          <target state="translated">いつもの慣用句は</target>
        </trans-unit>
        <trans-unit id="7ac11eaf69a957a9aa5638ad8debab406436e005" translate="yes" xml:space="preserve">
          <source>The usual method for terminating a thread is to &lt;a href=&quot;functions/return&quot;&gt;return EXPR&lt;/a&gt; from the entry point function with the appropriate return value(s).</source>
          <target state="translated">スレッドを終了する通常の方法は、エントリポイント関数から適切な戻り値で&lt;a href=&quot;functions/return&quot;&gt;EXPR&lt;/a&gt;を返すことです。</target>
        </trans-unit>
        <trans-unit id="189fd1d4b573f9b0c1b1794439c343e0650165ef" translate="yes" xml:space="preserve">
          <source>The usual shell redirection symbols &lt;code&gt; | &lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; are recognized by the cpan shell &lt;b&gt;only when surrounded by whitespace&lt;/b&gt;. So piping to pager or redirecting output into a file works somewhat as in a normal shell, with the stipulation that you must type extra spaces.</source>
          <target state="translated">通常のシェルリダイレクトシンボル &lt;code&gt; | &lt;/code&gt; および &lt;code&gt;&amp;gt;&lt;/code&gt; は&lt;b&gt;、空白で囲まれている場合にのみ&lt;/b&gt; cpanシェルによって認識さ&lt;b&gt;れます&lt;/b&gt;。そのため、ページャーへのパイプやファイルへの出力のリダイレクトは、通常のシェルと同様に機能し、余分なスペースを入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5284fa656dfbed57ca832128b9046307b6a8989" translate="yes" xml:space="preserve">
          <source>The usual warnings if it can't read or write the files involved.</source>
          <target state="translated">関係するファイルを読み書きできない場合は、通常の警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="9c1efd4c7ee39f810e92b8d45a9ddf28889531e0" translate="yes" xml:space="preserve">
          <source>The usual warnings if it cannot read or write the files involved.</source>
          <target state="translated">関係するファイルを読み書きできない場合は、通常の警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="22c79ee036d08be39b9326c3b9dab69e6aa2a162" translate="yes" xml:space="preserve">
          <source>The usually available constants are</source>
          <target state="translated">通常利用可能な定数は</target>
        </trans-unit>
        <trans-unit id="2efc4102646dfcf9e84b807940c146f94356608b" translate="yes" xml:space="preserve">
          <source>The util.c:1716 is the source code file and line number.</source>
          <target state="translated">util.c:1716はソースコードファイルと行番号です。</target>
        </trans-unit>
        <trans-unit id="e3d163a1d052b62f7d060607d4bf6b7f91f9aa60" translate="yes" xml:space="preserve">
          <source>The v-strings are portable only up to v2147483647 (0x7FFF_FFFF), that's how far EBCDIC, or more precisely UTF-EBCDIC will go.</source>
          <target state="translated">v文字列はv2147483647 (0x7FFF_FFFF)までしか移植できませんが、これはEBCDIC、より正確にはUTF-EBCDICがどこまで行けるかということです。</target>
        </trans-unit>
        <trans-unit id="84e2770182dc038d9b47afe7e9b08eec9556b081" translate="yes" xml:space="preserve">
          <source>The v5.16 release also supports a &lt;code&gt;:loose&lt;/code&gt; import for loose matching of character names, which works just like loose matching of property names: that is, it disregards case, whitespace, and underscores:</source>
          <target state="translated">v5.16リリースでは、文字名の緩やかなマッチングのための &lt;code&gt;:loose&lt;/code&gt; インポートもサポートされています。これは、プロパティ名の緩やかなマッチングと同様に機能します。つまり、大文字と小文字、空白、アンダースコアは無視されます。</target>
        </trans-unit>
        <trans-unit id="b193f0ebc1769a16dcfcc639a8401c8c00cf9c0e" translate="yes" xml:space="preserve">
          <source>The valgrind tool can be used to find out both memory leaks and illegal heap memory accesses. As of version 3.3.0, Valgrind only supports Linux on x86, x86-64 and PowerPC and Darwin (OS X) on x86 and x86-64). The special &quot;test.valgrind&quot; target can be used to run the tests under valgrind. Found errors and memory leaks are logged in files named</source>
          <target state="translated">valgrindツールは、メモリリークと不正なヒープメモリアクセスの両方を見つけるために使用することができます。バージョン3.3.0現在、valgrindはx86,x86-64のLinuxとx86,x86-64のPowerPCとDarwin(OS X)のみをサポートしています)。特別な &quot;test.valgrind &quot;ターゲットを使用してvalgrindの下でテストを実行することができます。見つかったエラーとメモリリークは</target>
        </trans-unit>
        <trans-unit id="aa3e07c88c6113557baab8df17b4983a954a8994" translate="yes" xml:space="preserve">
          <source>The value assigned to the key &lt;code&gt;'fallback'&lt;/code&gt; tells Perl how hard it should try to find an alternative way to implement a missing operator.</source>
          <target state="translated">キー &lt;code&gt;'fallback'&lt;/code&gt; 割り当てられた値は、欠落している演算子を実装する別の方法を見つけるのがどれほど難しいかをPerlに伝えます。</target>
        </trans-unit>
        <trans-unit id="6f766eba2f1a65e15d6582321bc30fe9d0e0e26a" translate="yes" xml:space="preserve">
          <source>The value associated with &lt;code&gt;env&lt;/code&gt; is itself a hashref that is matched against corresponding values in the &lt;code&gt;%ENV&lt;/code&gt; hash. Keys prefixed with &lt;code&gt;not_&lt;/code&gt; negates the corresponding match.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; に関連付けられた値自体は、 &lt;code&gt;%ENV&lt;/code&gt; ハッシュ内の対応する値と照合されるハッシュ参照です。 &lt;code&gt;not_&lt;/code&gt; で始まるキーは、対応する一致を否定します。</target>
        </trans-unit>
        <trans-unit id="aa731dffe1d7c5a02c15e427c4d55ad58928d794" translate="yes" xml:space="preserve">
          <source>The value associated with &lt;code&gt;perlconfig&lt;/code&gt; is itself a hashref that is matched against corresponding values in the &lt;code&gt;%Config::Config&lt;/code&gt; hash living in the &lt;code&gt;Config.pm&lt;/code&gt; module. Keys prefixed with &lt;code&gt;not_&lt;/code&gt; negates the corresponding match.</source>
          <target state="translated">&lt;code&gt;perlconfig&lt;/code&gt; に関連付けられた値自体は、 &lt;code&gt;Config.pm&lt;/code&gt; モジュールにある &lt;code&gt;%Config::Config&lt;/code&gt; ハッシュの対応する値と照合されるハッシュ参照です。 &lt;code&gt;not_&lt;/code&gt; で始まるキーは、対応する一致を否定します。</target>
        </trans-unit>
        <trans-unit id="86d758b44cf7d343d2636c283000a90f2b95ec68" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;$offset&lt;/code&gt; in Unix will be &lt;code&gt;0&lt;/code&gt; , but in Mac OS Classic will be some large number. &lt;code&gt;$offset&lt;/code&gt; can then be added to a Unix time value to get what should be the proper value on any system.</source>
          <target state="translated">Unixの &lt;code&gt;$offset&lt;/code&gt; の値は &lt;code&gt;0&lt;/code&gt; になりますが、Mac OS Classicの場合はかなり大きな値になります。次に、 &lt;code&gt;$offset&lt;/code&gt; をUnix時間値に追加して、どのシステムでも適切な値を取得できます。</target>
        </trans-unit>
        <trans-unit id="6a050ff582b3cdf570af43e605e700a8d71acf02" translate="yes" xml:space="preserve">
          <source>The value in each entry of the hash is what you are referring to when you use the &lt;code&gt;*name&lt;/code&gt; typeglob notation.</source>
          <target state="translated">ハッシュの各エントリの値は、 &lt;code&gt;*name&lt;/code&gt; タイプグロブ表記を使用するときに参照しているものです。</target>
        </trans-unit>
        <trans-unit id="0f707479820ff9d25dbdd6e993639c9a31b93e20" translate="yes" xml:space="preserve">
          <source>The value is identical to &lt;code&gt;$Config{'osname'}&lt;/code&gt; . See also &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; and the &lt;b&gt;-V&lt;/b&gt; command-line switch documented in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="translated">値は &lt;code&gt;$Config{'osname'}&lt;/code&gt; と同じです。&lt;a href=&quot;perlrun&quot;&gt;perlrunに&lt;/a&gt;記載されている&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;および&lt;b&gt;-V&lt;/b&gt;コマンドラインスイッチも参照してください。</target>
        </trans-unit>
        <trans-unit id="70b8122c0413fdd3eed692b348862e9493d569f3" translate="yes" xml:space="preserve">
          <source>The value of $side is</source>
          <target state="translated">サイドの値は</target>
        </trans-unit>
        <trans-unit id="9f3e350bc3160e2ef2f10c200798865cfdef3abe" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$Config{sitelib}&lt;/code&gt; is also determined in C code and not read from &lt;code&gt;Config.pm&lt;/code&gt; , which is not loaded.</source>
          <target state="translated">&lt;code&gt;$Config{sitelib}&lt;/code&gt; の値もCコードで決定され、ロードされていない &lt;code&gt;Config.pm&lt;/code&gt; から読み取られません。</target>
        </trans-unit>
        <trans-unit id="5ec5b14ed87db6c409cf2d38c4b2eab23f206eae" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$^O&lt;/code&gt; on OpenVMS is &quot;VMS&quot;. To determine the architecture that you are running on refer to &lt;code&gt;$Config{'archname'}&lt;/code&gt; .</source>
          <target state="translated">OpenVMS での &lt;code&gt;$^O&lt;/code&gt; の値は &quot;VMS&quot;です。実行しているアーキテクチャーを判別するには、 &lt;code&gt;$Config{'archname'}&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0a38163b3b1097c345c4ed53de76d7f29841da7e" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$^O&lt;/code&gt; on VOS is &quot;vos&quot;. To determine the architecture that you are running on without resorting to loading all of &lt;code&gt;%Config&lt;/code&gt; you can examine the content of the &lt;code&gt;@INC&lt;/code&gt; array like so:</source>
          <target state="translated">VOS での &lt;code&gt;$^O&lt;/code&gt; の値は &quot;vos&quot;です。すべての &lt;code&gt;%Config&lt;/code&gt; をロードせずに実行しているアーキテクチャを特定するには、 &lt;code&gt;@INC&lt;/code&gt; ように@INC配列の内容を調べます。</target>
        </trans-unit>
        <trans-unit id="0b11ba94deca518a1e2cfb4f0d2fd72a2e75493b" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;$_&lt;/code&gt; when the sub returns will be stored in the filename header field.</source>
          <target state="translated">サブルーチンが戻るときの &lt;code&gt;$_&lt;/code&gt; の値は、ファイル名ヘッダーフィールドに格納されます。</target>
        </trans-unit>
        <trans-unit id="e887b08023c56383b67ea2dd8816e1569e2d83d2" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;flags&lt;/code&gt; determines the behavior when &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; does not point to a well-formed UTF-8 character. If &lt;code&gt;flags&lt;/code&gt; is 0, when a malformation is found, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set so that (&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ) is the next possible position in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; that could begin a non-malformed character. Also, if UTF-8 warnings haven't been lexically disabled, a warning is raised.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; の値は、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が整形式のUTF-8文字を指していない場合の動作を決定します。場合は &lt;code&gt;flags&lt;/code&gt; 0である奇形が発見された場合、ゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; をするように設定されている（ &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）の次の可能な位置で &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 非不正な文字を始めることができます。また、UTF-8警告が字句的に無効にされていない場合、警告が発生します。</target>
        </trans-unit>
        <trans-unit id="6c4b4f2983d220858913f6137ac2e8d4d0fdf8f5" translate="yes" xml:space="preserve">
          <source>The value of a character (&lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt;) is the corresponding Unicode code point.</source>
          <target state="translated">文字（ &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt; ）の値は、対応するUnicodeコードポイントです。</target>
        </trans-unit>
        <trans-unit id="4e567ba2156b576b88f1e773ff7f64942df23743" translate="yes" xml:space="preserve">
          <source>The value of an attribute may itself be another object. For example, instead of returning its last mod time as a number, the &lt;code&gt;File&lt;/code&gt; class could return a &lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt; object representing that value.</source>
          <target state="translated">属性の値自体が別のオブジェクトである場合があります。たとえば、最後のmod時間を数値として返す代わりに、 &lt;code&gt;File&lt;/code&gt; クラスはその値を表す&lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt;オブジェクトを返すことができます。</target>
        </trans-unit>
        <trans-unit id="4be98eb05f5630113ca4199a823f81cc002596a7" translate="yes" xml:space="preserve">
          <source>The value of any Unicode (not including Perl extensions) character property mentioned above for any single code point is available through &lt;a href=&quot;unicode/ucd#charprop()&quot;&gt;charprop() in Unicode::UCD&lt;/a&gt;. &lt;a href=&quot;unicode/ucd#charprops_all()&quot;&gt;charprops_all() in Unicode::UCD&lt;/a&gt; returns the values of all the Unicode properties for a given code point.</source>
          <target state="translated">単一のコードポイントに対する上記のUnicode（Perl拡張を含まない）文字プロパティの値は&lt;a href=&quot;unicode/ucd#charprop()&quot;&gt;、Unicode :: UCDのcharprop（）を&lt;/a&gt;介して取得できます。&lt;a href=&quot;unicode/ucd#charprops_all()&quot;&gt;Unicode :: UCDのcharprops_all（）は&lt;/a&gt;、指定されたコードポイントのすべてのUnicodeプロパティの値を返します。</target>
        </trans-unit>
        <trans-unit id="81fc623a108af3428235cbe74b6771e41c797430" translate="yes" xml:space="preserve">
          <source>The value of revision comes from the</source>
          <target state="translated">改訂の価値は</target>
        </trans-unit>
        <trans-unit id="96cb89717e8339762098eca6a52dfe1d75c52296" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;flags&lt;/code&gt; hint to getaddrinfo(), or the $flags parameter to getnameinfo() contains unrecognised flags.</source>
          <target state="translated">getaddrinfo（）への &lt;code&gt;flags&lt;/code&gt; ヒントまたはgetnameinfo（）への$ flagsパラメータの値には、認識されないフラグが含まれています。</target>
        </trans-unit>
        <trans-unit id="de2c00bdfe45ec53f217b88f118a8da5474d909d" translate="yes" xml:space="preserve">
          <source>The value of the ADLER32 field read must match the adler32 value of the uncompressed data actually contained in the file.</source>
          <target state="translated">読み込んだADLER32フィールドの値は、ファイルに実際に含まれている非圧縮データのADLER32値と一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="932cb4d9b33ea8ac456d8558a4c42d4644723cbc" translate="yes" xml:space="preserve">
          <source>The value of the CRC32 field read must match the crc32 value of the uncompressed data actually contained in the gzip file.</source>
          <target state="translated">読み込んだCRC32フィールドの値は、実際にgzipファイルに含まれる非圧縮データのcrc32値と一致しなければならない。</target>
        </trans-unit>
        <trans-unit id="7e9f5de9a38d28729524674757f04e1cb2068248" translate="yes" xml:space="preserve">
          <source>The value of the ISIZE fields read must match the length of the uncompressed data actually read from the file.</source>
          <target state="translated">読み込んだISIZEフィールドの値は、ファイルから実際に読み込んだ非圧縮データの長さと一致していなければなりません。</target>
        </trans-unit>
        <trans-unit id="6975eb5b4fde16e6c94a6652320983d4f157fb4c" translate="yes" xml:space="preserve">
          <source>The value of the OP's SV, if it has one, in a short human-readable format.</source>
          <target state="translated">OPのSVがあれば、その値を人間が読めるような短いフォーマットで表示しています。</target>
        </trans-unit>
        <trans-unit id="335bddece83d92e99066c5c702486489e5db8aca" translate="yes" xml:space="preserve">
          <source>The value of the function is not being passed back as the function's return value, but by changing the value of the variable that was passed into the function. You might have guessed that when you saw that the return value of round is of type &quot;void&quot;.</source>
          <target state="translated">関数の戻り値として渡されているのではなく、関数に渡された変数の値を変更することで、関数の値を返しているのです。roundの戻り値の型が「void」であることを見て察したかもしれません。</target>
        </trans-unit>
        <trans-unit id="332bfecdbc3324ed6709a244ef3af16edb8104ba" translate="yes" xml:space="preserve">
          <source>The value of the last evaluated expression of the &lt;code&gt;given&lt;/code&gt; block if no condition is true.</source>
          <target state="translated">条件が真でない場合に、 &lt;code&gt;given&lt;/code&gt; ブロックの最後に評価された式の値。</target>
        </trans-unit>
        <trans-unit id="77cf8495b50e92c33dbdf25b33ef15173c2d3541" translate="yes" xml:space="preserve">
          <source>The value of the last evaluated expression of the successful &lt;code&gt;when&lt;/code&gt; /&lt;code&gt;default&lt;/code&gt; clause, if there happens to be one.</source>
          <target state="translated">成功した &lt;code&gt;when&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; 句の最後に評価された式の値（存在する場合）。</target>
        </trans-unit>
        <trans-unit id="e9dbf107286e577746464279a9f4d776045ba7e1" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; may be compared against the encrypted password from the UAF returned by the &lt;code&gt;getpw*&lt;/code&gt; functions, in order to authenticate users. If you're going to do this, remember that the encrypted password in the UAF was generated using uppercase username and password strings; you'll have to upcase the arguments to &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; to insure that you'll get the proper value:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; によって返される値は、ユーザーを認証するために、 &lt;code&gt;getpw*&lt;/code&gt; 関数によって返されるUAFからの暗号化されたパスワードと比較されます。これを行う場合、UAFの暗号化されたパスワードは、大文字のユーザー名とパスワードの文字列を使用して生成されたことに注意してください。適切な値が得られるようにするには、 &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;&lt;/code&gt; の引数を大文字にする必要があります。</target>
        </trans-unit>
        <trans-unit id="750d57c2b28689ee366bb45cb08dd596ede16734" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt; may be affected after the call, and the filehandle may be flushed. (Win32)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt; によって返された値は、呼び出し後に影響を受ける可能性があり、ファイルハンドルがフラッシュされる可能性があります。（Win32）</target>
        </trans-unit>
        <trans-unit id="b9eb02fecf7e78b1a88f2675d747749b95555376" translate="yes" xml:space="preserve">
          <source>The value returned by &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; is the offset in seconds from 01-JAN-1970 00:00:00 (just like the CRTL's times() routine), in order to make life easier for code coming in from the POSIX/Unix world.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; によって返される値は、01-JAN-1970 00:00:00からの秒単位のオフセットです（CRTLのtimes（）ルーチンと同様）。POSIX/ Unixの世界からのコードを簡単に利用できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="dce33a69a270de7fcb08010c8a7a1e528d7b525f" translate="yes" xml:space="preserve">
          <source>The value returned by DELETE becomes the return value of the call to delete(). If you want to emulate the normal behavior of delete(), you should return whatever FETCH would have returned for this key. In this example, we have chosen instead to return a value which tells the caller whether the file was successfully deleted.</source>
          <target state="translated">DELETE で返された値が delete()の呼び出しの戻り値となります。delete()の通常の動作をエミュレートしたい場合は、このキーに対して FETCH が返すであろう値を返すべきです。この例では、ファイルが正常に削除されたかどうかをコール元に伝える値を返すことにしました。</target>
        </trans-unit>
        <trans-unit id="6bc17f7cca700d462e95542bbd03b318a3e0be44" translate="yes" xml:space="preserve">
          <source>The value returned by the</source>
          <target state="translated">が返す値は</target>
        </trans-unit>
        <trans-unit id="b1bca5853c9e5fa5adb4f19b1edc9ad3fc182540" translate="yes" xml:space="preserve">
          <source>The value returned from the</source>
          <target state="translated">から返される値は</target>
        </trans-unit>
        <trans-unit id="90d9e575a1b77ab1385aca4b943feac671ed7f01" translate="yes" xml:space="preserve">
          <source>The value returned is the new-style (see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;Old-style versus new-style block names&lt;/a&gt;).</source>
          <target state="translated">返される値は新しいスタイルです（&lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;古いスタイルと新しいスタイルのブロック名を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c04520f682b85fb43c817253d00adbc0066c3e0a" translate="yes" xml:space="preserve">
          <source>The value returned is the scalar itself, if the argument is a scalar, or a reference, if the argument is a hash, array or subroutine.</source>
          <target state="translated">返される値は、引数がスカラであればスカラそのもの、引数がハッシュ、配列、サブルーチンであれば参照です。</target>
        </trans-unit>
        <trans-unit id="942e5b04dedd3b9d9ca5012565213fea51195584" translate="yes" xml:space="preserve">
          <source>The value returned should correspond to the new text to use in its place If the empty string is returned or an undefined value is returned, then the given &lt;code&gt;$text&lt;/code&gt; is ignored (not processed).</source>
          <target state="translated">返される値は、その場所で使用する新しいテキストに対応する必要があります。空の文字列が返されるか、未定義の値が返される場合、指定された &lt;code&gt;$text&lt;/code&gt; は無視されます（処理されません）。</target>
        </trans-unit>
        <trans-unit id="8dccf8bfa93428dffce75a953ae318dc76ebcb1f" translate="yes" xml:space="preserve">
          <source>The value returned should correspond to the new text to use in its place. If the empty string or an undefined value is returned then no further processing will be performed for this line.</source>
          <target state="translated">返 さ れた値は、 その場所で使用す る 新 し いテ キ ス ト に対応 し てい る 必要があ り ます。空の文字列や未定義の値が返された場合は、この行に対してそれ以上の処理は行われません。</target>
        </trans-unit>
        <trans-unit id="55279d7373f25daebc72a715903f6a4795228bf8" translate="yes" xml:space="preserve">
          <source>The value returned will be true if the &lt;code&gt;$paragraph&lt;/code&gt; and the rest of the text in the same section as &lt;code&gt;$paragraph&lt;/code&gt; should be selected (included) for processing; otherwise a false value is returned.</source>
          <target state="translated">場合、戻り値はtrueになります &lt;code&gt;$paragraph&lt;/code&gt; と同じセクション内のテキストの残り &lt;code&gt;$paragraph&lt;/code&gt; 処理のために選択した（同梱）されなければなりません。それ以外の場合は、偽の値が返されます。</target>
        </trans-unit>
        <trans-unit id="10aaf64078984131d35f43803e32214eb7af6f36" translate="yes" xml:space="preserve">
          <source>The value should be a code reference. It is invoked just before leaving the currently processed directory. It is called in void context with no arguments. The name of the current directory is in &lt;code&gt;$File::Find::dir&lt;/code&gt; . This hook is handy for summarizing a directory, such as calculating its disk usage. When</source>
          <target state="translated">値はコード参照でなければなりません。現在処理されているディレクトリを離れる直前に呼び出されます。引数なしでvoidコンテキストで呼び出されます。現在のディレクトリの名前は &lt;code&gt;$File::Find::dir&lt;/code&gt; ます。このフックは、ディスク使用量の計算など、ディレクトリを要約するのに便利です。いつ</target>
        </trans-unit>
        <trans-unit id="ddbdffc9717f2bba2ebf5303cd71401d0bf2a249" translate="yes" xml:space="preserve">
          <source>The value should be a code reference. This code reference is described in &lt;a href=&quot;#The-wanted-function&quot;&gt;The wanted function&lt;/a&gt; below. The &lt;code&gt;&amp;amp;wanted&lt;/code&gt; subroutine is mandatory.</source>
          <target state="translated">値はコード参照でなければなりません。このコード参照は、以下の&lt;a href=&quot;#The-wanted-function&quot;&gt;「必要な関数」で&lt;/a&gt;説明されています。 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; サブルーチンは必須です。</target>
        </trans-unit>
        <trans-unit id="444cd91bd48610204aa4348a8cd314eec59c4347" translate="yes" xml:space="preserve">
          <source>The value should be a code reference. This code reference is used to preprocess the current directory. The name of the currently processed directory is in &lt;code&gt;$File::Find::dir&lt;/code&gt; . Your preprocessing function is called after &lt;code&gt;&lt;a href=&quot;../functions/readdir&quot;&gt;readdir()&lt;/a&gt;&lt;/code&gt;, but before the loop that calls the &lt;code&gt;wanted()&lt;/code&gt; function. It is called with a list of strings (actually file/directory names) and is expected to return a list of strings. The code can be used to sort the file/directory names alphabetically, numerically, or to filter out directory entries based on their name alone. When</source>
          <target state="translated">値はコード参照でなければなりません。このコード参照は、現在のディレクトリを前処理するために使用されます。現在処理されているディレクトリの名前は &lt;code&gt;$File::Find::dir&lt;/code&gt; ます。前処理関数は &lt;code&gt;&lt;a href=&quot;../functions/readdir&quot;&gt;readdir()&lt;/a&gt;&lt;/code&gt; の後で、 &lt;code&gt;wanted()&lt;/code&gt; 関数を呼び出すループの前に呼び出されます。文字列のリスト（実際にはファイル/ディレクトリ名）で呼び出され、文字列のリストを返すことが期待されています。このコードを使用して、ファイル/ディレクトリの名前をアルファベット順、数値順に並べ替えたり、名前のみに基づいてディレクトリエントリを除外したりできます。いつ</target>
        </trans-unit>
        <trans-unit id="4b8d0d31a50d605febd9456f0c05a144d0e549cc" translate="yes" xml:space="preserve">
          <source>The value should be the complete TAP output.</source>
          <target state="translated">値は完全なTAP出力でなければなりません。</target>
        </trans-unit>
        <trans-unit id="977d1c1fec14dab01803e1202ad5b70915c99932" translate="yes" xml:space="preserve">
          <source>The value supplied with &lt;code&gt;-Comment&lt;/code&gt; option can contain any character except NULL.</source>
          <target state="translated">&lt;code&gt;-Comment&lt;/code&gt; オプションで提供される値には、NULL以外の任意の文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="5a33beea90e0c4b3cd6d3aa1b159094d2037e800" translate="yes" xml:space="preserve">
          <source>The value supplied with &lt;code&gt;-Name&lt;/code&gt; option can contain any character except NULL.</source>
          <target state="translated">&lt;code&gt;-Name&lt;/code&gt; オプションで指定する値には、NULL以外の任意の文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="f1aeb63cc4cb0e101586c3105fecbdbf9caca8c2" translate="yes" xml:space="preserve">
          <source>The value supplied with the &lt;code&gt;Comment&lt;/code&gt; option can only contain ISO 8859-1 characters plus line-feed.</source>
          <target state="translated">&lt;code&gt;Comment&lt;/code&gt; オプションで提供される値には、ISO 8859-1文字と改行のみを含めることができます。</target>
        </trans-unit>
        <trans-unit id="56d224f65d33c0660d7f4661847cc1e8f860019d" translate="yes" xml:space="preserve">
          <source>The value supplied with the &lt;code&gt;Name&lt;/code&gt; option can only contain ISO 8859-1 characters.</source>
          <target state="translated">[ &lt;code&gt;Name&lt;/code&gt; ]オプションで指定する値には、ISO 8859-1文字のみを含めることができます。</target>
        </trans-unit>
        <trans-unit id="5341e40485577e6df05a609244175f85c79fb195" translate="yes" xml:space="preserve">
          <source>The values are specified on the following format line in the same order as the picture fields. The expressions providing the values must be separated by commas. They are all evaluated in a list context before the line is processed, so a single list expression could produce multiple list elements. The expressions may be spread out to more than one line if enclosed in braces. If so, the opening brace must be the first token on the first line. If an expression evaluates to a number with a decimal part, and if the corresponding picture specifies that the decimal part should appear in the output (that is, any picture except multiple &quot;#&quot; characters &lt;b&gt;without&lt;/b&gt; an embedded &quot;.&quot;), the character used for the decimal point is determined by the current LC_NUMERIC locale if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect. This means that, if, for example, the run-time environment happens to specify a German locale, &quot;,&quot; will be used instead of the default &quot;.&quot;. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;#WARNINGS&quot;&gt;WARNINGS&lt;/a&gt; for more information.</source>
          <target state="translated">値は、画像フィールドと同じ順序で次のフォーマット行に指定されます。値を提供する式は、コンマで区切る必要があります。それらはすべて、行が処理される前にリストコンテキストで評価されるため、単一のリスト式で複数のリスト要素を生成できます。中括弧で囲まれている場合、式は複数の行に分割されることがあります。その場合、左中括弧は最初の行の最初のトークンでなければなりません。式が小数部を含む数値に評価され、対応する画像が小数部を出力に表示するように指定している場合（つまり、「。」が埋め込まれてい&lt;b&gt;ない&lt;/b&gt;複数の「＃」文字&lt;b&gt;を&lt;/b&gt;除く画像）、使用されている文字小数点の場合 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; ロケールを使用する場合、現在のLC_NUMERICロケールによって決定されます有効です。つまり、たとえば、ランタイム環境でドイツ語のロケールが指定された場合、デフォルトの「。」の代わりに「、」が使用されます。詳細については、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;と&lt;a href=&quot;#WARNINGS&quot;&gt;警告&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bcd5bfa6286ea39c4bd9487ae2b5176bb3be48be" translate="yes" xml:space="preserve">
          <source>The values of &lt;code&gt;$^O&lt;/code&gt; on some of these platforms includes:</source>
          <target state="translated">これらのプラットフォームの一部での &lt;code&gt;$^O&lt;/code&gt; の値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="540bf16e20569214e1b31e52cdcbc4ee480d311c" translate="yes" xml:space="preserve">
          <source>The values pushed onto the return stack of the XSUB are actually mortal SV's. They are made mortal so that once the values are copied by the calling program, the SV's that held the returned values can be deallocated. If they were not mortal, then they would continue to exist after the XSUB routine returned, but would not be accessible. This is a memory leak.</source>
          <target state="translated">XSUB のリターンスタックにプッシュされた値は、実際には致命的な SV です。呼び出し元のプログラムによって値がコピーされると、返された値を保持していた SV が解放されるように、これらの値は死すべき状態になっています。もしそれらが死滅していなければ、XSUB ルーチンが返された後も存在し続けますが、アクセスはできません。これはメモリリークです。</target>
        </trans-unit>
        <trans-unit id="e474878aa7db7e96c4629326d93b845326ef064e" translate="yes" xml:space="preserve">
          <source>The values stored in config.sh may be either single-quoted or double-quoted. Double-quoted strings are handy for those cases where you need to include escape sequences in the strings. To avoid runtime variable interpolation, any &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; characters are replaced by &lt;code&gt;\$&lt;/code&gt; and &lt;code&gt;\@&lt;/code&gt; , respectively. This isn't foolproof, of course, so don't embed &lt;code&gt;\$&lt;/code&gt; or &lt;code&gt;\@&lt;/code&gt; in double-quoted strings unless you're willing to deal with the consequences. (The slashes will end up escaped and the &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;@&lt;/code&gt; will trigger variable interpolation)</source>
          <target state="translated">config.shに格納されている値は、単一引用符または二重引用符のどちらかです。二重引用符で囲まれた文字列は、文字列にエスケープシーケンスを含める必要がある場合に便利です。ランタイム変数の補間を回避するために、 &lt;code&gt;$&lt;/code&gt; および &lt;code&gt;@&lt;/code&gt; 文字はそれぞれ &lt;code&gt;\$&lt;/code&gt; および &lt;code&gt;\@&lt;/code&gt; に置き換えられます。もちろん、これは絶対に確実なことではないので、結果に対処する用意がない限り、二重引用符で囲まれた文字列に &lt;code&gt;\$&lt;/code&gt; または &lt;code&gt;\@&lt;/code&gt; 埋め込まないでください。 （スラッシュはエスケープされ、 &lt;code&gt;$&lt;/code&gt; または &lt;code&gt;@&lt;/code&gt; は変数補間をトリガーします）</target>
        </trans-unit>
        <trans-unit id="c23b5412a89e9982acfd046a606aac6df7b125a8" translate="yes" xml:space="preserve">
          <source>The values stored in the hashes above are mostly the direct equivalent of their C counterpart. Like their C counterparts, all are set to a default values - that means you don't have to set</source>
          <target state="translated">上記のハッシュに格納されている値は、ほとんどがC言語の対応するものと直接等価です。それらの C の対応するものと同様に、すべての値はデフォルト値に設定されています。</target>
        </trans-unit>
        <trans-unit id="9e6700989ab1dbf25d28d4fd1b763593cc3c720f" translate="yes" xml:space="preserve">
          <source>The values supplied with the &lt;code&gt;-Name&lt;/code&gt; and &lt;code&gt;-Comment&lt;/code&gt; options can contain multiple embedded nulls. The string written to the gzip header will consist of the characters up to, but not including, the first embedded NULL.</source>
          <target state="translated">&lt;code&gt;-Name&lt;/code&gt; および &lt;code&gt;-Comment&lt;/code&gt; オプションで提供される値には、複数のヌルを埋め込むことができます。gzipヘッダーに書き込まれる文字列は、最初の埋め込まれたNULLまでの文字で構成されます。</target>
        </trans-unit>
        <trans-unit id="f4d39e5aa9ce36eff93868e0e7af4d9b6a02d8ec" translate="yes" xml:space="preserve">
          <source>The values supplied with the &lt;code&gt;-Name&lt;/code&gt; and &lt;code&gt;-Comment&lt;/code&gt; options cannot contain multiple embedded nulls.</source>
          <target state="translated">&lt;code&gt;-Name&lt;/code&gt; および &lt;code&gt;-Comment&lt;/code&gt; オプションで提供される値には、複数のヌルを埋め込むことはできません。</target>
        </trans-unit>
        <trans-unit id="6344a1b12727e711425a7cd0809233875bc47e54" translate="yes" xml:space="preserve">
          <source>The values to be compared are always passed by reference and should not be modified.</source>
          <target state="translated">比較される値は常に参照で渡され、変更されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="0a3bdf6ba268c4d17126cd579eaa00987525d1a3" translate="yes" xml:space="preserve">
          <source>The variable $ref may have referred to the subroutine &lt;code&gt;fred&lt;/code&gt; whenever the call to &lt;code&gt;SaveSub1&lt;/code&gt; was made but by the time &lt;code&gt;CallSavedSub1&lt;/code&gt; gets called it now holds the number &lt;code&gt;47&lt;/code&gt; . Because we saved only a pointer to the original SV in &lt;code&gt;SaveSub1&lt;/code&gt; , any changes to $ref will be tracked by the pointer &lt;code&gt;rememberSub&lt;/code&gt; . This means that whenever &lt;code&gt;CallSavedSub1&lt;/code&gt; gets called, it will attempt to execute the code which is referenced by the SV* &lt;code&gt;rememberSub&lt;/code&gt; . In this case though, it now refers to the integer &lt;code&gt;47&lt;/code&gt; , so expect Perl to complain loudly.</source>
          <target state="translated">変数$ refは、 &lt;code&gt;SaveSub1&lt;/code&gt; への呼び出しが行われたときはいつでもサブルーチン &lt;code&gt;fred&lt;/code&gt; を参照している可能性がありますが、 &lt;code&gt;CallSavedSub1&lt;/code&gt; が呼び出されるまでに &lt;code&gt;47&lt;/code&gt; を保持します。 &lt;code&gt;SaveSub1&lt;/code&gt; では元のSVへのポインターのみを保存したため、$ refへの変更はポインター &lt;code&gt;rememberSub&lt;/code&gt; によって追跡されます。これは、 &lt;code&gt;CallSavedSub1&lt;/code&gt; が呼び出されるたびに、SV * &lt;code&gt;rememberSub&lt;/code&gt; によって参照されるコードを実行しようとすることを意味します。ただし、この場合は、整数 &lt;code&gt;47&lt;/code&gt; を参照するようになっているので、Perlが大きな不満を言うはずです。</target>
        </trans-unit>
        <trans-unit id="ad1d8279ad869db1c2929300f40e329172cf94dc" translate="yes" xml:space="preserve">
          <source>The variable contains the symbols defined by the C compiler alone. The symbols defined by cpp or by cc when it calls cpp are not in this list, see cppsymbols and cppccsymbols. The list is a space-separated list of symbol=value tokens.</source>
          <target state="translated">この変数には、Cコンパイラだけで定義されたシンボルが含まれています。cpp または cc が cpp を呼び出したときに cpp によって定義されたシンボルはこのリストにはありません。このリストは、シンボル=値のトークンをスペースで区切ってリスト化したものです。</target>
        </trans-unit>
        <trans-unit id="501db733d2ef38c039a965292ca77f71bc56d687" translate="yes" xml:space="preserve">
          <source>The variable contains the symbols defined by the C compiler when it calls cpp. The symbols defined by the cc alone or cpp alone are not in this list, see ccsymbols and cppsymbols. The list is a space-separated list of symbol=value tokens.</source>
          <target state="translated">この変数には、Cコンパイラがcppを呼び出すときに定義されるシンボルが含まれています。cc単独またはcpp単独で定義されたシンボルはこのリストには含まれていません、ccsymbolsおよびcppsymbolsを参照してください。このリストは、シンボル=値のトークンをスペースで区切ってリスト化したものです。</target>
        </trans-unit>
        <trans-unit id="00b4b60fa439030036a66d7ff80e60844c78536a" translate="yes" xml:space="preserve">
          <source>The variable contains the symbols defined by the C preprocessor alone. The symbols defined by cc or by cc when it calls cpp are not in this list, see ccsymbols and cppccsymbols. The list is a space-separated list of symbol=value tokens.</source>
          <target state="translated">この変数には、Cプリプロセッサだけで定義されたシンボルが含まれています。cc または cc が cpp を呼び出すときに cc によって定義されたシンボルは、このリストには含まれていません。このリストは、シンボル=値のトークンをスペースで区切ってリスト化したものです。</target>
        </trans-unit>
        <trans-unit id="83d3f8e3698f4e666192e80e4c4c129382375649" translate="yes" xml:space="preserve">
          <source>The variables &lt;code&gt;$@&lt;/code&gt; , &lt;code&gt;$!&lt;/code&gt; , &lt;code&gt;$^E&lt;/code&gt; , and &lt;code&gt;$?&lt;/code&gt; contain information about different types of error conditions that may appear during execution of a Perl program. The variables are shown ordered by the &quot;distance&quot; between the subsystem which reported the error and the Perl process. They correspond to errors detected by the Perl interpreter, C library, operating system, or an external program, respectively.</source>
          <target state="translated">変数 &lt;code&gt;$@&lt;/code&gt; 、 &lt;code&gt;$!&lt;/code&gt; 、 &lt;code&gt;$^E&lt;/code&gt; 、および &lt;code&gt;$?&lt;/code&gt; Perlプログラムの実行中に発生する可能性のあるさまざまなタイプのエラー条件に関する情報が含まれています。変数は、エラーを報告したサブシステムとPerlプロセスの間の「距離」の順に表示されます。これらはそれぞれ、Perlインタープリター、Cライブラリ、オペレーティングシステム、または外部プログラムによって検出されたエラーに対応しています。</target>
        </trans-unit>
        <trans-unit id="d61a4e2ec2fd6a9d823c4ff48f24791a3afc0a43" translate="yes" xml:space="preserve">
          <source>The variables are thousands of characters long and you know that they don't change, and you need to wring out the last little bit of speed by having Perl skip testing for that. (There is a maintenance penalty for doing this, as mentioning &lt;code&gt;/o&lt;/code&gt; constitutes a promise that you won't change the variables in the pattern. If you do change them, Perl won't even notice.)</source>
          <target state="translated">変数は何千文字もの長さであり、それらは変更されないことがわかっているため、Perlにテストをスキップさせることで、最後のわずかな速度を絞る必要があります。（ &lt;code&gt;/o&lt;/code&gt; に言及することは、パターン内の変数を変更しないという約束を構成するため、これを行うと保守ペナルティがあります。それらを変更しても、Perlは気付かないでしょう。）</target>
        </trans-unit>
        <trans-unit id="11544c219d80b67a63dc9e0a8e442712e549045b" translate="yes" xml:space="preserve">
          <source>The variables&amp;mdash;such as &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; , and &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%&amp;ndash; &lt;/code&gt; &amp;mdash;that hold the text remembered in a pattern match. See Camel chapter 5, &amp;ldquo;Pattern Matching&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;$1&lt;/code&gt; と &lt;code&gt;$2&lt;/code&gt; 、 &lt;code&gt;%+&lt;/code&gt; と &lt;code&gt;%&amp;ndash; &lt;/code&gt; などの変数は、パターンマッチで記憶されたテキストを保持します。ラクダの第5章「パターンマッチング」を参照してください。</target>
        </trans-unit>
        <trans-unit id="50b54417d53e0d1cfe584f4211726c367ffae98a" translate="yes" xml:space="preserve">
          <source>The variant of OS2::_control87() with default values good for handling exception mask: if no &lt;code&gt;mask&lt;/code&gt; , uses exception mask part of &lt;code&gt;new&lt;/code&gt; only. If no &lt;code&gt;new&lt;/code&gt; , disables all the floating point exceptions.</source>
          <target state="translated">例外マスクを処理するためのデフォルト値の良いとOS2 :: _ control87（）の変種は：いいえ場合は &lt;code&gt;mask&lt;/code&gt; の例外マスク一部使用する &lt;code&gt;new&lt;/code&gt; だけを。 &lt;code&gt;new&lt;/code&gt; がない場合、すべての浮動小数点例外を無効にします。</target>
        </trans-unit>
        <trans-unit id="307e90e437dd1da42b4c1389ea6c9b26886479f7" translate="yes" xml:space="preserve">
          <source>The various &lt;code&gt;extract_...&lt;/code&gt; subroutines may be used to extract a delimited substring, possibly after skipping a specified prefix string. By default, that prefix is optional whitespace (&lt;code&gt;/\s*/&lt;/code&gt; ), but you can change it to whatever you wish (see below).</source>
          <target state="translated">さまざまな &lt;code&gt;extract_...&lt;/code&gt; サブルーチンを使用して、区切られた部分文字列を抽出できます。指定された接頭辞文字列をスキップした後などです。デフォルトでは、そのプレフィックスはオプションの空白（ &lt;code&gt;/\s*/&lt;/code&gt; ）ですが、好きなように変更できます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="fc16009f09e3803367ecc5c2f24dcc5baf8339c5" translate="yes" xml:space="preserve">
          <source>The various MSWin32 Perl's can distinguish the OS they are running on via the value of the fifth element of the list returned from &lt;code&gt;Win32::GetOSVersion()&lt;/code&gt; . For example:</source>
          <target state="translated">さまざまなMSWin32 Perlは、 &lt;code&gt;Win32::GetOSVersion()&lt;/code&gt; から返されたリストの5番目の要素の値によって、実行中のOSを区別できます。例えば：</target>
        </trans-unit>
        <trans-unit id="b5f8a6767121d40d53463b6246a6dc21454cdfba" translate="yes" xml:space="preserve">
          <source>The various named unary operators are treated as functions with one argument, with optional parentheses.</source>
          <target state="translated">様々な名前のついた単項演算子は、オプションの括弧をつけて、1つの引数を持つ関数として扱われます。</target>
        </trans-unit>
        <trans-unit id="8d7dece5f96deb4f2078174f4b6a63435a6090e8" translate="yes" xml:space="preserve">
          <source>The various options that can be specified are:</source>
          <target state="translated">指定できるオプションは様々です。</target>
        </trans-unit>
        <trans-unit id="8f2d3209693f371a4dffdf7b8f3fc9b9432bc2c1" translate="yes" xml:space="preserve">
          <source>The various types of data aggregate form a natural hierarchy that facilitates the use of inheritance and polymorphism.</source>
          <target state="translated">様々なタイプのデータの集合体は、継承と多型の使用を容易にする自然な階層を形成しています。</target>
        </trans-unit>
        <trans-unit id="7dcabdd4901aed0767d31bd0d04d8aa2ce24975f" translate="yes" xml:space="preserve">
          <source>The vast majority of problems that are reported in this area boil down to the fact that C strings are NULL terminated, whilst Perl strings are not. See &lt;a href=&quot;#DBM-FILTERS&quot;&gt;DBM FILTERS&lt;/a&gt; for a generic way to work around this problem.</source>
          <target state="translated">この領域で報告される問題の大部分は、Perl文字列ではなく、C文字列がNULLで終了しているという事実に要約されます。この問題を回避する一般的な方法については、&lt;a href=&quot;#DBM-FILTERS&quot;&gt;DBMフィルター&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6c55d44dd5a799dd5be32ea5b3f1cae585e95693" translate="yes" xml:space="preserve">
          <source>The vast majority of the code was written by Kenneth Albanowski &lt;code&gt;&amp;lt;kjahds@kjahds.com&amp;gt;&lt;/code&gt; , Andy Dougherty &lt;code&gt;&amp;lt;doughera@lafayette.edu&amp;gt;&lt;/code&gt; , Andreas K&amp;ouml;nig &lt;code&gt;&amp;lt;A.Koenig@franz.ww.TU-Berlin.DE&amp;gt;&lt;/code&gt; , Tim Bunce &lt;code&gt;&amp;lt;Tim.Bunce@ig.co.uk&amp;gt;&lt;/code&gt; . VMS support by Charles Bailey &lt;code&gt;&amp;lt;bailey@newman.upenn.edu&amp;gt;&lt;/code&gt; . OS/2 support by Ilya Zakharevich &lt;code&gt;&amp;lt;ilya@math.ohio-state.edu&amp;gt;&lt;/code&gt; . Mac support by Paul Schinder &lt;code&gt;&amp;lt;schinder@pobox.com&amp;gt;&lt;/code&gt; , and Thomas Wegner &lt;code&gt;&amp;lt;wegner_thomas@yahoo.com&amp;gt;&lt;/code&gt; . abs2rel() and rel2abs() written by Shigio Yamaguchi &lt;code&gt;&amp;lt;shigio@tamacom.com&amp;gt;&lt;/code&gt; , modified by Barrie Slaymaker &lt;code&gt;&amp;lt;barries@slaysys.com&amp;gt;&lt;/code&gt; . splitpath(), splitdir(), catpath() and catdir() by Barrie Slaymaker.</source>
          <target state="translated">コードの大部分は、Kenneth Albanowski &lt;code&gt;&amp;lt;kjahds@kjahds.com&amp;gt;&lt;/code&gt; 、Andy Dougherty &lt;code&gt;&amp;lt;doughera@lafayette.edu&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;A.Koenig@franz.ww.TU-Berlin.DE&amp;gt;&lt;/code&gt; 、Tim Bunce &lt;code&gt;&amp;lt;Tim.Bunce@ig.co.uk&amp;gt;&lt;/code&gt; 。 Charles Bailey &lt;code&gt;&amp;lt;bailey@newman.upenn.edu&amp;gt;&lt;/code&gt; によるVMSサポート。 Ilya Zakharevich &lt;code&gt;&amp;lt;ilya@math.ohio-state.edu&amp;gt;&lt;/code&gt; によるOS / 2サポート。 Paul Schinder &lt;code&gt;&amp;lt;schinder@pobox.com&amp;gt;&lt;/code&gt; とThomas Wegner &lt;code&gt;&amp;lt;wegner_thomas@yahoo.com&amp;gt;&lt;/code&gt; によるMacサポート。山口 &lt;code&gt;&amp;lt;shigio@tamacom.com&amp;gt;&lt;/code&gt; によって書かれたabs2rel（）とrel2abs（）、Barrie Slaymaker &lt;code&gt;&amp;lt;barries@slaysys.com&amp;gt;&lt;/code&gt; によって修正。splitpath（）、splitdir（）、catpath（）およびcatdir（）（Barrie Slaymaker作）。</target>
        </trans-unit>
        <trans-unit id="d0a3f9b4fdc58bce9dc91ad1590ca608ffcca3cf" translate="yes" xml:space="preserve">
          <source>The veil of abstraction separating the &lt;b&gt;interface&lt;/b&gt; from the &lt;b&gt;implementation&lt;/b&gt; (whether enforced or not), which mandates that all access to an &lt;b&gt;object&lt;/b&gt;&amp;rsquo;s state be through &lt;b&gt;methods&lt;/b&gt; alone.</source>
          <target state="translated">&lt;b&gt;オブジェクト&lt;/b&gt;の状態へのすべてのアクセスは&lt;b&gt;メソッド&lt;/b&gt;のみを介して行うことを要求する、&lt;b&gt;実装&lt;/b&gt;から&lt;b&gt;インターフェース&lt;/b&gt;を分離する抽象化のベール。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="20efbe7543ae8d526c7c1a14310569f9dadb6162" translate="yes" xml:space="preserve">
          <source>The version identifier for an XS module. This is usually handled automatically by &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; . See &lt;code&gt;XS_VERSION_BOOTCHECK&lt;/code&gt; .</source>
          <target state="translated">XSモジュールのバージョン識別子。これは通常 &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; によって自動的に処理されます。 &lt;code&gt;XS_VERSION_BOOTCHECK&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4ddac7f13e9a2dc240c79129edea2cf74e24b8cc" translate="yes" xml:space="preserve">
          <source>The version number of the installed module - this will be &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the module had no (or unparsable) version number, or if the variable &lt;code&gt;$Module::Load::Conditional::FIND_VERSION&lt;/code&gt; was set to true. (See the &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; section below for details)</source>
          <target state="translated">インストールされているモジュールのバージョン番号-モジュールにバージョン番号がない（または解析できない）場合、または変数 &lt;code&gt;$Module::Load::Conditional::FIND_VERSION&lt;/code&gt; がtrueに設定されている場合、これは &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; になります。（詳細については、以下の「 &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; セクションを参照してください）</target>
        </trans-unit>
        <trans-unit id="c7a46a8ab62276eba4b76cf2918d64eaf428fd45" translate="yes" xml:space="preserve">
          <source>The version of PA-RISC at the time of this document's last update is 2.0, which is also the last there will be. HP PA-RISC systems are usually referred to with model description &quot;HP 9000&quot;. The last CPU in this series is the PA-8900. Support for PA-RISC architectured machines officially ends as shown in the following table:</source>
          <target state="translated">本ドキュメントの最終更新時のPA-RISCのバージョンは2.0であり、これが最後の更新となります。HPのPA-RISCシステムは、通常、「HP 9000」というモデル表記で呼ばれています。このシリーズの最後のCPUはPA-8900です。PA-RISCアーキテクチャーマシンのサポートは、以下の表のように正式に終了します。</target>
        </trans-unit>
        <trans-unit id="d9cdcafc4749e48949c53b1e0f4aeffeae610286" translate="yes" xml:space="preserve">
          <source>The version of ext() which is executed under VMS differs from the Unix-OS/2 version in several respects:</source>
          <target state="translated">VMS で実行される ext()のバージョンは、いくつかの点で Unix-OS/2 のバージョンとは異なります。</target>
        </trans-unit>
        <trans-unit id="fa000c815a6c1f4aa9d1d3cce6270062ea44f5d2" translate="yes" xml:space="preserve">
          <source>The version of ext() which is executed under Win32 differs from the Unix-OS/2 version in several respects:</source>
          <target state="translated">Win32 で実行される ext()のバージョンは、いくつかの点で Unix-OS/2 のバージョンとは異なります。</target>
        </trans-unit>
        <trans-unit id="04c1fecbb3d585e94f9621773c665e2e2cd3f97d" translate="yes" xml:space="preserve">
          <source>The version of perl that you are using does not implement Vstrings, to use &lt;a href=&quot;#isvstring&quot;&gt;isvstring&lt;/a&gt; you will need to use a newer release of perl.</source>
          <target state="translated">あなたが使用し、Vstringsを実装していない使用しているバージョンのPerl &lt;a href=&quot;#isvstring&quot;&gt;isvstring&lt;/a&gt;あなたはperlのの新しいリリースを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f8f3dd17d141437206c98482882771da9fd578da" translate="yes" xml:space="preserve">
          <source>The version of perl that you are using does not implement weak references, to use &lt;a href=&quot;#isweak&quot;&gt;isweak&lt;/a&gt; or &lt;a href=&quot;#weaken&quot;&gt;weaken&lt;/a&gt; you will need to use a newer release of perl.</source>
          <target state="translated">あなたは弱い参照を実装していない使用していることのperlのバージョンは、使用する&lt;a href=&quot;#isweak&quot;&gt;isweak&lt;/a&gt;または&lt;a href=&quot;#weaken&quot;&gt;弱める&lt;/a&gt;あなたはperlのの新しいリリースを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="64bb3d6c21bf2a657e7026f0eee7644697eafb33" translate="yes" xml:space="preserve">
          <source>The version of the module distributed with Perl should, whenever possible, be the latest version of the module as distributed by the author (the latest non-beta version in the case of public Perl releases), although the pumpkin holder may hold off on upgrading the version of the module distributed with Perl to the latest version until the latest version has had sufficient testing.</source>
          <target state="translated">Perl で配布されるモジュールのバージョンは、可能な限り、作者が配布したモジュールの最新バージョン (Perl の公開リリースの場合は、最新の非ベータバージョン)であるべきですが、パンプキンホルダーは、最新バージョンが十分にテストされるまで、Perl で配布されるモジュールのバージョンを最新バージョンにアップグレードするのを延期してもかまいません。</target>
        </trans-unit>
        <trans-unit id="b21f22d5179989f705ed9d6a2a79b769acbc417d" translate="yes" xml:space="preserve">
          <source>The version of the module in the Perl core should still be considered the work of the original author. All patches, bug reports, and so forth should be fed back to them. Their development directions should be respected whenever possible.</source>
          <target state="translated">Perl コアのモジュールのバージョンは、オリジナルの作者の作品とみなされるべきです。すべてのパッチやバグレポートなどは原著者にフィードバックされるべきです。可能な限り、彼らの開発の方向性を尊重してください。</target>
        </trans-unit>
        <trans-unit id="92d384762292f03ed396ad91a060564bf7d9627e" translate="yes" xml:space="preserve">
          <source>The version this module needs to be -- this is optional</source>
          <target state="translated">このモジュールが必要とするバージョン --これはオプションです。</target>
        </trans-unit>
        <trans-unit id="7c293dc4ef8b29552aa12216990ef31577ac2eeb" translate="yes" xml:space="preserve">
          <source>The versions of as and ld supplied with Solaris work fine for building perl. There is normally no need to install the GNU versions to compile perl.</source>
          <target state="translated">Solaris に付属している as と ld のバージョンは、perl のビルドには問題なく動作します。通常、perlをコンパイルするためにGNUのバージョンをインストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="991e6e65f67b3a36b7e485bd86d8f440ac42e72f" translate="yes" xml:space="preserve">
          <source>The very end of the document:</source>
          <target state="translated">文書の最後の最後まで。</target>
        </trans-unit>
        <trans-unit id="c59ec45ae7f53d6bfeaac3f5d1524ea40228db75" translate="yes" xml:space="preserve">
          <source>The very first thing you should do is look into getting the Term::ReadKey extension from CPAN. As we mentioned earlier, it now even has limited support for non-portable (read: not open systems, closed, proprietary, not POSIX, not Unix, etc.) systems.</source>
          <target state="translated">最初にやるべきことは、CPANからTerm::ReadKeyエクステンションを入手することです。先に述べたように、現在では、移植性のない(オープンシステムではない、クローズド、プロプライエタリ、POSIXではない、Unixではない、など)システムにも限定的に対応しています。</target>
        </trans-unit>
        <trans-unit id="a54a90d3a077b2809332364bbb3b822680082301" translate="yes" xml:space="preserve">
          <source>The volume portion is always returned with a trailing &quot;:&quot;. The directory portion is always returned with a leading (to denote a relative path) and a trailing &quot;:&quot; (to denote a directory). The file portion is always returned</source>
          <target state="translated">ボリュームの部分は常に最後の&quot;:&quot;で返されます。ディレクトリ部分は常に先頭に(相対パスを表すため)、末尾に「:」(ディレクトリを表すため)を付けて返されます。ファイル部分は常に</target>
        </trans-unit>
        <trans-unit id="1ec332efc336ec299c7acc49f0d1e2fc497986e3" translate="yes" xml:space="preserve">
          <source>The wanted function</source>
          <target state="translated">欲しい機能</target>
        </trans-unit>
        <trans-unit id="6125dd5f3b647dbf86db0b504a3821e5fb95de7e" translate="yes" xml:space="preserve">
          <source>The wanted function takes no arguments but rather does its work through a collection of variables.</source>
          <target state="translated">欲しい関数は引数を取りませんが、変数のコレクションを通して動作します。</target>
        </trans-unit>
        <trans-unit id="badd12b3cb878c5659d7f27917ce9ac00752a63d" translate="yes" xml:space="preserve">
          <source>The warning is considered severe enough not to be affected by the &lt;b&gt;-w&lt;/b&gt; switch (or its absence) because previously compiled invocations of the function will still be using the old value of the function. If you need to be able to redefine the subroutine, you need to ensure that it isn't inlined, either by dropping the &lt;code&gt;()&lt;/code&gt; prototype (which changes calling semantics, so beware) or by thwarting the inlining mechanism in some other way, e.g. by adding an explicit &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;, as mentioned above:</source>
          <target state="translated">以前にコンパイルされた関数の呼び出しでは引き続き関数の古い値が使用されるため、警告は&lt;b&gt;-w&lt;/b&gt;スイッチ（またはその欠如）の影響を受けないほど深刻と見なされます。サブルーチンを再定義できるようにする必要がある場合は、 &lt;code&gt;()&lt;/code&gt; プロトタイプ（呼び出しのセマンティクスを変更するので注意してください）を削除するか、他の方法でインライン化メカニズムを阻止することによって、インライン化されないようにする必要があります。上記のように、明示的な &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="228748e063ab0367333a5d358a372ffaa2776b68" translate="yes" xml:space="preserve">
          <source>The way I see this being used is like basically this:</source>
          <target state="translated">私が見ている使い方は、基本的にはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="bf8410bbe832531f3fd9213bd8f3ba1287e55dc6" translate="yes" xml:space="preserve">
          <source>The way Perl builds up these op trees in the parsing process can be unravelled by examining</source>
          <target state="translated">Perl が解析プロセスでこれらの op ツリーをどのように構築するかは</target>
        </trans-unit>
        <trans-unit id="b9a4e5fa4cbdb6cec50f6eac70c4ad531843cef7" translate="yes" xml:space="preserve">
          <source>The way Test::More handles this is with a named block. Basically, a block of tests which can be skipped over or made todo. It's best if I just show you...</source>
          <target state="translated">Test::Moreがこれを処理する方法は、名前付きブロックを使うことです。基本的には、テストをスキップしたり、Todoにしたりできるテストのブロックです。お見せするのが一番いいのですが...</target>
        </trans-unit>
        <trans-unit id="3a44ce079c4bba6650cbd971c39500928ccb7c22" translate="yes" xml:space="preserve">
          <source>The way a program responds to an error. The exception-handling mechanism in Perl is the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">プログラムがエラーに応答する方法。Perlの例外処理メカニズムは &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 演算子です。</target>
        </trans-unit>
        <trans-unit id="39341ae7c243431172aa717f037dcb000913133f" translate="yes" xml:space="preserve">
          <source>The way it resolves which actual method to call is:</source>
          <target state="translated">実際にどのメソッドを呼び出すかを解決する方法です。</target>
        </trans-unit>
        <trans-unit id="2ecf3674cf5632aa049fa7e267f9fbd82a5b7877" translate="yes" xml:space="preserve">
          <source>The way it works is that when the &lt;code&gt;@{...}&lt;/code&gt; is seen in the double-quoted string, it's evaluated as a block. The block creates a reference to an anonymous array containing the results of the call to &lt;code&gt;mysub(1,2,3)&lt;/code&gt; . So the whole block returns a reference to an array, which is then dereferenced by &lt;code&gt;@{...}&lt;/code&gt; and stuck into the double-quoted string. This chicanery is also useful for arbitrary expressions:</source>
          <target state="translated">それが機能する方法は、二重引用符で囲まれた文字列で &lt;code&gt;@{...}&lt;/code&gt; が見つかると、ブロックとして評価されるということです。ブロックは、 &lt;code&gt;mysub(1,2,3)&lt;/code&gt; への呼び出しの結果を含む無名配列への参照を作成します。したがって、ブロック全体が配列への参照を返します。配列は &lt;code&gt;@{...}&lt;/code&gt; によって逆参照され、二重引用符で囲まれた文字列にスタックされます。このシカナリーは、任意の式にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="464aa10ca9c1c0eb18ad0b5fbb41c9f2af8f5587" translate="yes" xml:space="preserve">
          <source>The way this trick works is that the character with the code point &lt;code&gt;U+FFFE&lt;/code&gt; is not supposed to be in input streams, so the sequence of bytes &lt;code&gt;0xFF 0xFE&lt;/code&gt; is unambiguously &quot;&lt;code&gt;BOM&lt;/code&gt; , represented in little-endian format&quot; and cannot be &lt;code&gt;U+FFFE&lt;/code&gt; , represented in big-endian format&quot;.</source>
          <target state="translated">このトリックが機能する方法は、コードポイント &lt;code&gt;U+FFFE&lt;/code&gt; の文字が入力ストリームにあると想定されていないため、バイトのシーケンス &lt;code&gt;0xFF 0xFE&lt;/code&gt; は明確に「 &lt;code&gt;BOM&lt;/code&gt; 、リトルエンディアン形式で表されている」であり、 &lt;code&gt;U+FFFE&lt;/code&gt; にすることはできません、ビッグエンディアン形式で表されます。」</target>
        </trans-unit>
        <trans-unit id="5898f48e7b39c1a379ea1247c549323ccbb46061" translate="yes" xml:space="preserve">
          <source>The way to get around this problem is to use the Berkeley DB API method called &lt;code&gt;seq&lt;/code&gt; . This method allows sequential access to key/value pairs. See &lt;a href=&quot;#THE-API-INTERFACE&quot;&gt;THE API INTERFACE&lt;/a&gt; for details of both the &lt;code&gt;seq&lt;/code&gt; method and the API in general.</source>
          <target state="translated">この問題を回避する方法は、 &lt;code&gt;seq&lt;/code&gt; と呼ばれるBerkeley DB APIメソッドを使用することです。この方法では、キーと値のペアに順次アクセスできます。参照&lt;a href=&quot;#THE-API-INTERFACE&quot;&gt;APIインタフェース&lt;/a&gt;の両方の詳細については &lt;code&gt;seq&lt;/code&gt; 方法および一般的なAPIを。</target>
        </trans-unit>
        <trans-unit id="cd500d8c20565e5f312bdd0b6574f8c8052649e9" translate="yes" xml:space="preserve">
          <source>The way to use this class is to make a new object of this class, set any options, and then call one of the search options (probably &lt;code&gt;survey&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt; ). The sections below discuss the syntaxes for doing all that.</source>
          <target state="translated">このクラスを使用する方法は、このクラスの新しいオブジェクトを作成し、オプションを設定してから、検索オプションの1つを呼び出すことです（おそらく &lt;code&gt;survey&lt;/code&gt; または &lt;code&gt;find&lt;/code&gt; ）。以下のセクションでは、これらすべてを行うための構文について説明します。</target>
        </trans-unit>
        <trans-unit id="5268c05807fff3d270f4531a0cd21a77634cf686" translate="yes" xml:space="preserve">
          <source>The web server handling the HTTP service is assumed to be at its standard port, number 80. If the server you're trying to connect to is at a different port, like 1080 or 8080, you should specify it as the named-parameter pair, &lt;code&gt;PeerPort =&amp;gt; 8080&lt;/code&gt; . The &lt;code&gt;autoflush&lt;/code&gt; method is used on the socket because otherwise the system would buffer up the output we sent it. (If you're on a prehistoric Mac, you'll also need to change every &lt;code&gt;&quot;\n&quot;&lt;/code&gt; in your code that sends data over the network to be a &lt;code&gt;&quot;\015\012&quot;&lt;/code&gt; instead.)</source>
          <target state="translated">HTTPサービスを処理するWebサーバーは、その標準ポート、80番にあると想定されます。接続しようとしているサーバーが1080や8080などの別のポートにある場合は、名前付きパラメーターのペアとして指定する必要があります、 &lt;code&gt;PeerPort =&amp;gt; 8080&lt;/code&gt; 。 &lt;code&gt;autoflush&lt;/code&gt; そうでない場合は、システムが、我々はそれを送った出力をバッファリングしてしまうための方法は、ソケットで使用されています。（先史時代のMacを使用している場合は、ネットワーク経由でデータを送信するコード内のすべての &lt;code&gt;&quot;\n&quot;&lt;/code&gt; を &lt;code&gt;&quot;\015\012&quot;&lt;/code&gt; に変更する必要もあります。）</target>
        </trans-unit>
        <trans-unit id="b22573d6d6dbb31578b3c4fa9e8a17816a358dfc" translate="yes" xml:space="preserve">
          <source>The well known Unicode Byte Order Marks are as follows: if the file begins with the two literal byte values 0xFE 0xFF, this is the BOM for big-endian UTF-16. If the file begins with the two literal byte value 0xFF 0xFE, this is the BOM for little-endian UTF-16. On an ASCII platform, if the file begins with the three literal byte values 0xEF 0xBB 0xBF, this is the BOM for UTF-8. A mechanism portable to EBCDIC platforms is to:</source>
          <target state="translated">よく知られている Unicode バ イ ト 順序マークは以下の と お り です:フ ァ イ ルが 2 つの リ テ ラ ルバ イ ト 値 0xFE 0xFF で始ま る 場合、 こ れは ビ ッ グエンデ ィ ア ン UTF-16 の BOM です。フ ァ イ ルが 2 つの リ テ ラ ルバ イ ト 値 0xFF 0xFE で始ま る と き は、 こ れは リ ト ルエンデ ィ ア ン UTF-16 の BOM です。ASCII プ ラ ッ ト フ ォームでは、 フ ァ イ ルが 3 つの リ テ ラ ルバ イ ト 値 0xEF 0xBB 0xBF で始ま る と き は、 こ れが UTF-8 の BOM と な り ます。EBCDIC プ ラ ッ ト フ ォームへの移植可能な機構は以下のとおりです。</target>
        </trans-unit>
        <trans-unit id="c25fe7dd72c3069b0e017baa01097278ab17f62e" translate="yes" xml:space="preserve">
          <source>The while loop from line 14 to line 26 grabs a scalar off the input queue and checks against the prime this thread is responsible for. Line 15 checks to see if there's a remainder when we divide the number to be checked by our prime. If there is one, the number must not be evenly divisible by our prime, so we need to either pass it on to the next thread if we've created one (line 17) or create a new thread if we haven't.</source>
          <target state="translated">14 行目から 26 行目までの while ループは、入力キューからスカラを取得し、このスレッドが担当する素数と照合します。15 行目は、チェックする数値を素数で割ったときに余剰があるかどうかをチェックしています。もし余剰がある場合は、その数値は素数で割り切れていないはずなので、もし次のスレッドを作成していればそれを次のスレッドに渡す (17 行目)か、作成していなければ新しいスレッドを作成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a997f7e1957d2b943d666798431c61228059e247" translate="yes" xml:space="preserve">
          <source>The whole Unicode standard &lt;a href=&quot;http://www.unicode.org/unicode/uni2book/u2.html&quot;&gt;http://www.unicode.org/unicode/uni2book/u2.html&lt;/a&gt;</source>
          <target state="translated">Unicode標準全体&lt;a href=&quot;http://www.unicode.org/unicode/uni2book/u2.html&quot;&gt;http://www.unicode.org/unicode/uni2book/u2.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="52ed5e8abe2195d94e62a75cf32bf369a78b18af" translate="yes" xml:space="preserve">
          <source>The whole idea of the &quot;standard C API to start applications&quot; is that the forms &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;&quot;foo&quot;&lt;/code&gt; of program arguments are completely interchangeable.</source>
          <target state="translated">「アプリケーションを起動するための標準C API」の全体的な考え方は、プログラム引数の形式 &lt;code&gt;foo&lt;/code&gt; および &lt;code&gt;&quot;foo&quot;&lt;/code&gt; は完全に交換可能であるということです。</target>
        </trans-unit>
        <trans-unit id="0fe54c442e0898f0c65d2e7e96e6d557275adef9" translate="yes" xml:space="preserve">
          <source>The whole scheme for interpreting two-digit years can be considered a bug.</source>
          <target state="translated">2桁の年を解釈するスキーム全体がバグと考えられます。</target>
        </trans-unit>
        <trans-unit id="d301a149055986dea057eaf7f10ce99a292fd767" translate="yes" xml:space="preserve">
          <source>The width of the left margin in spaces. Defaults to 0. This is the margin for all text, including headings, not the amount by which regular text is indented; for the latter, see &lt;b&gt;-i&lt;/b&gt; option.</source>
          <target state="translated">スペースの左マージンの幅。デフォルトは0です。これは、見出しを含むすべてのテキストのマージンであり、通常のテキストがインデントされる量ではありません。後者については、&lt;b&gt;-i&lt;/b&gt;オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="00b688a33a04cf250468fb3feaca19bab2ec26fc" translate="yes" xml:space="preserve">
          <source>The width of the left margin in spaces. Defaults to 0. This is the margin for all text, including headings, not the amount by which regular text is indented; for the latter, see the</source>
          <target state="translated">左マージンの幅をスペースで表します。デフォルトは0です。 これは見出しを含むすべてのテキストのマージンであり、通常のテキストがインデントされる量ではありません。</target>
        </trans-unit>
        <trans-unit id="9f8ba2c52e40b69413c01ffc592fe399547fc20f" translate="yes" xml:space="preserve">
          <source>The word returned by the &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; function when you apply it to a reference to a subroutine. See also &lt;b&gt;CV&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 関数をサブルーチンへの参照に適用したときにref関数によって返される単語。&lt;b&gt;CV&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="28be5b370df296bc57d076e1c2849a0ebee70013" translate="yes" xml:space="preserve">
          <source>The work isn't over until the paperwork is done, and you're going to need to put in some time writing some documentation for your module. &lt;code&gt;module-starter&lt;/code&gt; or &lt;code&gt;h2xs&lt;/code&gt; will provide a stub for you to fill in; if you're not sure about the format, look at &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; for an introduction. Provide a good synopsis of how your module is used in code, a description, and then notes on the syntax and function of the individual subroutines or methods. Use Perl comments for developer notes and POD for end-user notes.</source>
          <target state="translated">事務処理が完了するまで作業は終わりません。モジュールのドキュメントを書く必要があるでしょう。 &lt;code&gt;module-starter&lt;/code&gt; または &lt;code&gt;h2xs&lt;/code&gt; は、記入するスタブを提供します。形式がわからない場合は、&lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;で概要を確認してください。モジュールがコード内でどのように使用されているかの概要、説明、および個々のサブルーチンやメソッドの構文と機能についてのメモを提供します。開発者向けのメモにはPerlコメントを、エンドユーザー向けのメモにはPODを使用します。</target>
        </trans-unit>
        <trans-unit id="1436e107c02b49fba4e33d8aaae3115ec601983a" translate="yes" xml:space="preserve">
          <source>The work of the interpreter has two main stages: compiling the code into the internal representation, or bytecode, and then executing it. &lt;a href=&quot;perlguts#Compiled-code&quot;&gt;Compiled code in perlguts&lt;/a&gt; explains exactly how the compilation stage happens.</source>
          <target state="translated">インタープリターの作業には2つの主要な段階があります。コードを内部表現（バイトコード）にコンパイルして実行します。&lt;a href=&quot;perlguts#Compiled-code&quot;&gt;perlgutsのコンパイル済みコードは&lt;/a&gt;、コンパイル段階がどのように行われるかを正確に説明しています。</target>
        </trans-unit>
        <trans-unit id="8b1397bff51f75db954e0f3e3e1b665db01ca7e8" translate="yes" xml:space="preserve">
          <source>The world's languages are written in many different scripts. This sentence (unless you're reading it in translation) is written in Latin, while Russian is written in Cyrillic, and Greek is written in, well, Greek; Japanese mainly in Hiragana or Katakana. There are many more.</source>
          <target state="translated">世界の言語はいろいろな文字で書かれています。この文章(翻訳で読んでいるのでなければ)はラテン語で書かれていますが、ロシア語はキリル文字で書かれていますし、ギリシャ語は、まあ、ギリシャ語で書かれていますし、日本語は主にひらがなやカタカナで書かれています。他にもたくさんあります。</target>
        </trans-unit>
        <trans-unit id="85da59eaf7698f05d48c68376bdd4ba3b6dce3bd" translate="yes" xml:space="preserve">
          <source>The worst patches make use of system-specific features. It's highly unlikely that non-portable additions to the Perl language will be accepted.</source>
          <target state="translated">最悪のパッチはシステム固有の機能を利用しています。Perl 言語への移植性のない追加が受け入れられる可能性は非常に低いです。</target>
        </trans-unit>
        <trans-unit id="2affe5ea5db32cf7d355e39106992f04132aac2d" translate="yes" xml:space="preserve">
          <source>The write filehandle will have autoflush turned on.</source>
          <target state="translated">書き込みファイルハンドルはオートフラッシュがオンになります。</target>
        </trans-unit>
        <trans-unit id="f34726284c86402203e3588790fd3c449c8531b5" translate="yes" xml:space="preserve">
          <source>The yacc coming with BS2000 POSIX didn't work for us. So we had to use bison. We had to make a few changes to perl in order to use the pure (reentrant) parser of bison. We used version 1.25, but we had to add a few changes due to EBCDIC. See below for more details concerning yacc.</source>
          <target state="translated">BS2000 POSIXに付属しているYaccが使えませんでした。そこで、私たちは bison を使わなければなりませんでした。bisonの純粋な(リエントラントな)パーサを使うために、perlにいくつかの変更を加えなければなりませんでした。バージョン1.25を使用しましたが、EBCDICのためにいくつかの変更を加えなければなりませんでした。yaccに関する詳細は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="0aff817087165151aec8e0b6db814baaf554f377" translate="yes" xml:space="preserve">
          <source>The z/OS Unix Tools and Toys list may prove helpful and contains links to ports of much of the software helpful for building Perl. &lt;a href=&quot;http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html&quot;&gt;http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html&lt;/a&gt;</source>
          <target state="translated">z / OS Unix Tools and Toysのリストは役立つ場合があり、Perlの構築に役立つソフトウェアの多くのポートへのリンクが含まれています。&lt;a href=&quot;http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html&quot;&gt;http://www.ibm.com/servers/eserver/zseries/zos/unix/bpxa1toy.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f215722614928e4a382d634f12d1b784a861305a" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;$reg&lt;/code&gt; can be used as a regexp:</source>
          <target state="translated">次に、 &lt;code&gt;$reg&lt;/code&gt; を正規表現として使用できます。</target>
        </trans-unit>
        <trans-unit id="de5ca28d4aa169910f5c4821c56dad5137cddc68" translate="yes" xml:space="preserve">
          <source>Then again, you could always use parentheses.</source>
          <target state="translated">それからまた、いつでも括弧を使うことができます。</target>
        </trans-unit>
        <trans-unit id="8f720f0ca68279a1e213df21b730afd59a9417d5" translate="yes" xml:space="preserve">
          <source>Then along comes Unicode which has room for over a million characters (and Perl allows for even more). This means that a character may require more than a single byte to represent it, and so the two terms are no longer equivalent. What matter are the characters as whole entities, and not usually the bytes that comprise them. That's what the term &quot;Character Semantics&quot; in the title of this section refers to.</source>
          <target state="translated">その後、100万文字以上の文字を扱えるUnicodeが登場します(Perlではさらに多くの文字を扱えるようになっています)。これは、文字を表現するためには1バイト以上の文字が必要になる可能性があることを意味し、2つの用語はもはや等価ではありません。重要なのは、全体としての文字であり、通常は文字を構成するバイトではありません。このセクションのタイトルにある「文字セマンティクス」という用語は、このことを指しています。</target>
        </trans-unit>
        <trans-unit id="48ff6c17f5c4132eb7b4e146224751484821d774" translate="yes" xml:space="preserve">
          <source>Then compile:</source>
          <target state="translated">そしてコンパイルします。</target>
        </trans-unit>
        <trans-unit id="894eab3b8839b7526298878f8b7e43bb55872aae" translate="yes" xml:space="preserve">
          <source>Then copy setargv.obj to %PlatformSDKDir%\lib</source>
          <target state="translated">次に setargv.obj を %PlatformSDKDir%にコピーします。</target>
        </trans-unit>
        <trans-unit id="939d22a5767f7f1b738027999de54521a98a4c28" translate="yes" xml:space="preserve">
          <source>Then delete every .bundle file found anywhere in the folders:</source>
          <target state="translated">次に、フォルダ内のどこかにある.bundleファイルをすべて削除します。</target>
        </trans-unit>
        <trans-unit id="072381135845bbd0f86b6799cfa84f6d7fbff38f" translate="yes" xml:space="preserve">
          <source>Then go on to declare and use your variables in functions without any qualifications. See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt; and the &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for details on mechanics and style issues in module creation.</source>
          <target state="translated">次に、修飾を行わずに関数で変数を宣言して使用します。参照してください&lt;a href=&quot;exporter&quot;&gt;輸出業者&lt;/a&gt;と&lt;a href=&quot;perlmodlib&quot;&gt;はperlmodlib&lt;/a&gt;モジュールの作成に関する仕組みやスタイルに関する詳細について。</target>
        </trans-unit>
        <trans-unit id="5bcffa804562972342cabda61bf0a405b76b432e" translate="yes" xml:space="preserve">
          <source>Then move the files (probably just the</source>
          <target state="translated">それからファイルを移動します(おそらく</target>
        </trans-unit>
        <trans-unit id="16764d0cdf61fb44dac45d466795c94ebcc324fb" translate="yes" xml:space="preserve">
          <source>Then override the &lt;code&gt;start_for&lt;/code&gt; method in the subclass to check for when &quot;$flags-&amp;gt;{'target'}&quot; is equal to 'foo' and set a flag that marks that you're in a foo block (maybe &quot;$self-&amp;gt;{'in_foo'} = 1&quot;). Then override the &lt;code&gt;handle_text&lt;/code&gt; method to check for the flag, and pass $text to your custom subroutine to construct the HTML output for 'foo' elements, something like:</source>
          <target state="translated">次に、サブクラスの &lt;code&gt;start_for&lt;/code&gt; メソッドをオーバーライドして、「$ flags- &amp;gt; {'target'}」が「foo」に等しいかどうかを確認し、fooブロックにいることを示すフラグを設定します（「$ self-&amp;gt; {'in_foo'} = 1 &quot;）。次に、 &lt;code&gt;handle_text&lt;/code&gt; メソッドをオーバーライドしてフラグを確認し、$ textをカスタムサブルーチンに渡して、 'foo'要素のHTML出力を作成します。</target>
        </trans-unit>
        <trans-unit id="5906927423d13fecbc7d429a1e04d7524ab55ae4" translate="yes" xml:space="preserve">
          <source>Then run the following script (or something like it):</source>
          <target state="translated">そして、以下のスクリプト(もしくはそのようなもの)を実行します。</target>
        </trans-unit>
        <trans-unit id="dc813daf18229cd1ceaa147ef073875823c78936" translate="yes" xml:space="preserve">
          <source>Then that text and all remaining text up through and including a line beginning with &lt;code&gt;=cut&lt;/code&gt; will be ignored. The format of the intervening text is described in &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;.</source>
          <target state="translated">次に、そのテキストと、 &lt;code&gt;=cut&lt;/code&gt; で始まる行までの残りのすべてのテキストは無視されます。介在するテキストのフォーマットは&lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="8606c2212e120ef5c1865576f0176c5b8ada5faa" translate="yes" xml:space="preserve">
          <source>Then the assignment with the indirection on the left-hand-side would use the existing reference that was already there:</source>
          <target state="translated">そうすると、左側のインダイレクトを使った代入は、すでにあった既存の参照を使うことになります。</target>
        </trans-unit>
        <trans-unit id="8207f190aea8ef5aad0fa43cccb20c94bdffd926" translate="yes" xml:space="preserve">
          <source>Then the handler makes absolutely no attempt to interpret the data it receives and simply passes it as a string:</source>
          <target state="translated">この場合、ハンドラは受信したデータを解釈しようとは一切せず、単に文字列として渡します。</target>
        </trans-unit>
        <trans-unit id="724e763cfec8edb999475aec0cbf98b0b938163f" translate="yes" xml:space="preserve">
          <source>Then the match is executed and the remaining lines describe the process:</source>
          <target state="translated">その後、マッチが実行され、残りの行で処理を説明します。</target>
        </trans-unit>
        <trans-unit id="581e9b63d178af7824ad52db20f4431ce7a1a3ec" translate="yes" xml:space="preserve">
          <source>Then use any of those as you would a normal filehandle. Anywhere that Perl is expecting a filehandle, an indirect filehandle may be used instead. An indirect filehandle is just a scalar variable that contains a filehandle. Functions like &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt;, or the &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; diamond operator will accept either a named filehandle or a scalar variable containing one:</source>
          <target state="translated">次に、通常のファイルハンドルと同じようにそれらを使用します。 Perlがファイルハンドルを期待しているところならどこでも、代わりに間接ファイルハンドルを使用できます。間接ファイルハンドルは、ファイルハンドルを含む単なるスカラー変数です。 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; ダイヤモンド演算子のような関数は、名前付きファイルハンドルまたはそれを含むスカラー変数のいずれかを受け入れます。</target>
        </trans-unit>
        <trans-unit id="be01a69ef7dc497f6d53fec0422df0742cb41c46" translate="yes" xml:space="preserve">
          <source>Then use it like:</source>
          <target state="translated">ならば、このように使いましょう。</target>
        </trans-unit>
        <trans-unit id="3068081feb5a0d3d89b7875b7ddf972f866ffeca" translate="yes" xml:space="preserve">
          <source>Then when you call $lh-&amp;gt;maketext(</source>
          <target state="translated">次に、$ lh-&amp;gt; maketext（</target>
        </trans-unit>
        <trans-unit id="4174f8d83f029a8fa078cc1b0e4b602d5427b4d7" translate="yes" xml:space="preserve">
          <source>Then you can progress through any remaining notable Unicode characters in the range 0x2000-0x204D (consult the character tables at www.unicode.org), and whatever else strikes your fancy. For example, in</source>
          <target state="translated">それから、0x2000-0x204D の範囲にある残りの注目すべき Unicode キ ャ ラ ク タ (www.unicode.org の文字表を参照して く ださい)や、 他にも気になるものがあれば何で も 進んでいけます。例えば</target>
        </trans-unit>
        <trans-unit id="84a1243ca0e6b4d4a37040b980b310d461ab4076" translate="yes" xml:space="preserve">
          <source>Then you can use &lt;code&gt;FH&lt;/code&gt; as the filehandle, in &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt; FH&lt;/code&gt; and &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; and so on. Note that it's a global variable, so this form is not recommended in new code.</source>
          <target state="translated">次に、 &lt;code&gt;FH&lt;/code&gt; をファイルハンドルとして使用し、 &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt; FH&lt;/code&gt; と &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; を&lt;a href=&quot;close&quot;&gt;閉じる&lt;/a&gt;ことができます。これはグローバル変数であるため、このコードは新しいコードでは推奨されていません。</target>
        </trans-unit>
        <trans-unit id="c81a39d78bb4e09ef8b273b017dac3466493479a" translate="yes" xml:space="preserve">
          <source>Then you can use &lt;code&gt;FH&lt;/code&gt; as the filehandle, in &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt; FH&lt;/code&gt; and &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; and so on. Note that it's a global variable, so this form is not recommended in new code.</source>
          <target state="translated">次に、 &lt;code&gt;FH&lt;/code&gt; をファイルハンドルとして使用し、 &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt; FH&lt;/code&gt; と &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; を&lt;a href=&quot;functions/close&quot;&gt;閉じる&lt;/a&gt;ことができます。これはグローバル変数であるため、このコードは新しいコードでは推奨されていません。</target>
        </trans-unit>
        <trans-unit id="aceabb34e67cf540951bd4247eacd0dbbabee283" translate="yes" xml:space="preserve">
          <source>Then you'll need to know how to manipulate the Perl stack. That's described in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">次に、Perlスタックを操作する方法を知る必要があります。これは&lt;a href=&quot;perlcall&quot;&gt;perlcallで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="a9e623e714cffb21ba3a72f8e67c6ce57fe9270e" translate="yes" xml:space="preserve">
          <source>Then you'll need to pass the &lt;code&gt;nocase&lt;/code&gt; option in order to recognize &quot;Name&quot;:</source>
          <target state="translated">次に、「名前」を認識するために &lt;code&gt;nocase&lt;/code&gt; オプションを渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="5eea4f63f47d5b222c66289e4dec5701bc66810a" translate="yes" xml:space="preserve">
          <source>Then you've just supplied an automatic &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; in front of their argument, which can be more than a bit surprising. The old &lt;code&gt;@foo&lt;/code&gt; which used to hold one thing doesn't get passed in. Instead, &lt;code&gt;func()&lt;/code&gt; now gets passed in a &lt;code&gt;1&lt;/code&gt; ; that is, the number of elements in &lt;code&gt;@foo&lt;/code&gt; . And the &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; gets called in scalar context so it starts scribbling on your &lt;code&gt;@_&lt;/code&gt; parameter list. Ouch!</source>
          <target state="translated">次に、それらの引数の前に自動 &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; を指定しましたが、これは少し驚くべきことです。1つのものを保持するために使用されていた古い &lt;code&gt;@foo&lt;/code&gt; は渡されません。代わりに、 &lt;code&gt;func()&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; に渡されます。つまり、 &lt;code&gt;@foo&lt;/code&gt; の要素数です。また、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; はスカラーコンテキストで呼び出されるため、 &lt;code&gt;@_&lt;/code&gt; パラメーターリストで落書きが開始されます。痛い！</target>
        </trans-unit>
        <trans-unit id="ee85b5d75e24b7f6cf7782bfc085bcfc0c87d6f5" translate="yes" xml:space="preserve">
          <source>Then, it determines the class and method name of the context it was invoked from.</source>
          <target state="translated">そして、呼び出されたコンテキストのクラス名とメソッド名を決定します。</target>
        </trans-unit>
        <trans-unit id="4d80e1f2d5ca1daef620a79f94100cd3a43dcad2" translate="yes" xml:space="preserve">
          <source>There appears to be a bug in the floating point implementation on BS2000 POSIX systems such that calling int() on the product of a number and a small magnitude number is not the same as calling int() on the quotient of that number and a large magnitude number. For example, in the following Perl code:</source>
          <target state="translated">BS2000 POSIX システムでの浮動小数点の実装にバグがあるようで、数値と小さい等級の数値の積で int()を呼び出すと、その数値の商と大きい等級の数値の商で int()を呼び出すのと同じではありません。例えば、以下のPerlのコードでは</target>
        </trans-unit>
        <trans-unit id="bb6e61aa6502fa98f73e845b088e443cab1a90e3" translate="yes" xml:space="preserve">
          <source>There appears to be a bug in the floating point implementation on S/390 systems such that calling int() on the product of a number and a small magnitude number is not the same as calling int() on the quotient of that number and a large magnitude number. For example, in the following Perl code:</source>
          <target state="translated">S/390 システムでの浮動小数点の実装にバグがあるようで、数値と小さい等級の数値の積で int()を呼び出すと、その数値の商と大きい等級の数値の商で int()を呼び出すのと同じではありません。例えば、以下のPerlのコードでは</target>
        </trans-unit>
        <trans-unit id="de1cfe28fcf075678633050ad3a49243fab1a122" translate="yes" xml:space="preserve">
          <source>There are 3 kinds of items that may be populated; special patterns, #vars, and literal text, which is copied verbatim. (Yes, it's a set of s///g steps.)</source>
          <target state="translated">ポップアップされる可能性のある項目は、特殊パターン、#vars、リテラルテキストの3種類で、これを逐語的にコピーしたものです。(そう、s///gのステップがセットになっているのです)。</target>
        </trans-unit>
        <trans-unit id="6e9231df83ad3f347c0bf53efa7fd0781ae7adef" translate="yes" xml:space="preserve">
          <source>There are &lt;code&gt;lint&lt;/code&gt; and &amp;lt;splint&amp;gt; targets in Makefile, but you may have to diddle with the flags (see above).</source>
          <target state="translated">Makefileには &lt;code&gt;lint&lt;/code&gt; と&amp;lt;splint&amp;gt;のターゲットがありますが、フラグを上手く操作しなければならない場合があります（上記を参照）。</target>
        </trans-unit>
        <trans-unit id="fe9ce8188c03cc1c80382377cc03bbf3d1eefe6b" translate="yes" xml:space="preserve">
          <source>There are DECC feature logical names AND ODS-5 volume attributes that also control what values are returned for the date fields.</source>
          <target state="translated">DECC 機能の論理名と ODS-5 ボリューム属性があり、日付フィールドに返される値も制御します。</target>
        </trans-unit>
        <trans-unit id="153a01ed3dca851e07404e7b116e0f624fedd9d4" translate="yes" xml:space="preserve">
          <source>There are a couple of exceptions to the above rule. &lt;code&gt;\N{U+&lt;i&gt;hex number&lt;/i&gt;}&lt;/code&gt; is always interpreted as a Unicode code point, so that &lt;code&gt;\N{U+0050}&lt;/code&gt; is &lt;code&gt;&quot;P&quot;&lt;/code&gt; even on EBCDIC platforms. And if &lt;code&gt;&lt;a href=&quot;encoding&quot;&gt;use encoding&lt;/a&gt;&lt;/code&gt; is in effect, the number is considered to be in that encoding, and is translated from that into the platform's native encoding if there is a corresponding native character; otherwise to Unicode.</source>
          <target state="translated">上記のルールにはいくつかの例外があります。 &lt;code&gt;\N{U+&lt;i&gt;hex number&lt;/i&gt;}&lt;/code&gt; は常にUnicodeコードポイントとして解釈されるため、EBCDICプラットフォームでも &lt;code&gt;\N{U+0050}&lt;/code&gt; は &lt;code&gt;&quot;P&quot;&lt;/code&gt; なります。そして、 &lt;code&gt;&lt;a href=&quot;encoding&quot;&gt;use encoding&lt;/a&gt;&lt;/code&gt; が有効な場合、数値はそのエンコーディングにあると見なされ、対応するネイティブ文字がある場合は、そのエンコーディングからプラットフォームのネイティブエンコーディングに変換されます。それ以外の場合はUnicode。</target>
        </trans-unit>
        <trans-unit id="4e415da7b1ad793f82f6c66993b6dabfb03be0ae" translate="yes" xml:space="preserve">
          <source>There are a couple of macros to do very basic exception handling in XS modules. You have to define &lt;code&gt;NO_XSLOCKS&lt;/code&gt; before including</source>
          <target state="translated">XSモジュールで非常に基本的な例外処理を行うマクロがいくつかあります。 &lt;code&gt;NO_XSLOCKS&lt;/code&gt; 前にNO_XSLOCKSを定義する必要があります</target>
        </trans-unit>
        <trans-unit id="b559285d4827f1039158fa6a1c7be09bcea8695c" translate="yes" xml:space="preserve">
          <source>There are a couple of other symbols that you're likely to encounter that aren't really type specifiers:</source>
          <target state="translated">他にも、実際には型指定子ではない記号がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="cd28f27e3e26acb88f426d59ef73cb49b8748e10" translate="yes" xml:space="preserve">
          <source>There are a couple of special arrays too, such as &lt;code&gt;@ARGV&lt;/code&gt; (the command line arguments to your script) and &lt;code&gt;@_&lt;/code&gt; (the arguments passed to a subroutine). These are documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@ARGV&lt;/code&gt; （スクリプトへのコマンドライン引数）や &lt;code&gt;@_&lt;/code&gt; （サブルーチンに渡される引数）など、いくつかの特別な配列もあります。これらは&lt;a href=&quot;perlvar&quot;&gt;perlvarに&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="d71c568688cddeb0974cf4c64aacf00c4a7ae0fc" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note about this analysis. First, the third alternative in the second group 'de' also allows a match, but we stopped before we got to it - at a given character position, leftmost wins. Second, we were able to get a match at the first character position of the string 'a'. If there were no matches at the first position, Perl would move to the second character position 'b' and attempt the match all over again. Only when all possible paths at all possible character positions have been exhausted does Perl give up and declare &lt;code&gt;$string =~ /(abd|abc)(df|d|de)/;&lt;/code&gt; to be false.</source>
          <target state="translated">この分析について注意すべき点がいくつかあります。まず、2番目のグループ「de」の3番目の選択肢も一致を許可しますが、到達する前に停止しました-特定のキャラクターの位置で、左端が勝利します。次に、文字列「a」の最初の文字位置で一致を取得できました。最初の位置に一致がなかった場合、Perlは2番目の文字位置「b」に移動して、もう一度最初から一致を試みます。すべての可能な文字位置ですべての可能なパスが使い果たされた場合にのみ、Perlはあきらめて &lt;code&gt;$string =~ /(abd|abc)(df|d|de)/;&lt;/code&gt; を宣言します。偽りである。</target>
        </trans-unit>
        <trans-unit id="39aecaa3926975713f4a2a65afbfb40347095ccc" translate="yes" xml:space="preserve">
          <source>There are a couple of ways that you can process an entire hash. You can get a list of keys, then go through each key, or grab a one key-value pair at a time.</source>
          <target state="translated">ハッシュ全体を処理する方法はいくつかあります。キーのリストを取得して、それぞれのキーを通過させることもできますし、一度に一つのキーと値のペアを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="af13ea056584d18f28105e6dfb4305dd6e1f93f8" translate="yes" xml:space="preserve">
          <source>There are a few basic principles which define object oriented Perl:</source>
          <target state="translated">オブジェクト指向Perlを定義するいくつかの基本的な原則があります。</target>
        </trans-unit>
        <trans-unit id="6ad0df8b5bb1240ec34f94939aa27ca4c87aa9d3" translate="yes" xml:space="preserve">
          <source>There are a few exceptions though: &lt;code&gt;x&lt;/code&gt; can be either string repetition or list repetition, depending on the type of the left operand, and &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; can be either string or numeric bit operations.</source>
          <target state="translated">：そこいくつかの例外はあるものの &lt;code&gt;x&lt;/code&gt; 、左のオペランドのタイプに応じて、いずれかの文字列の繰り返しやリスト反復することができ、そして &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; 、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;~&lt;/code&gt; は、文字列または数値のビット演算のいずれかです。</target>
        </trans-unit>
        <trans-unit id="5a7bb479453f1e1c0fcfea035067e079420f6246" translate="yes" xml:space="preserve">
          <source>There are a few more things you might want to know about matching operators. The global modifier &lt;code&gt;//g&lt;/code&gt; allows the matching operator to match within a string as many times as possible. In scalar context, successive matches against a string will have &lt;code&gt;//g&lt;/code&gt; jump from match to match, keeping track of position in the string as it goes along. You can get or set the position with the &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; function. For example,</source>
          <target state="translated">一致する演算子について知りたいことがいくつかあります。グローバル修飾子 &lt;code&gt;//g&lt;/code&gt; を使用すると、一致する演算子を文字列内でできるだけ多く一致させることができます。スカラーコンテキストでは、文字列に対して連続して一致すると、文字列内の位置を追跡しながら &lt;code&gt;//g&lt;/code&gt; が一致から一致までジャンプします。 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; 関数で位置を取得または設定できます。例えば、</target>
        </trans-unit>
        <trans-unit id="4300a240e517c8a51298a8d027c6fc76723dcec0" translate="yes" xml:space="preserve">
          <source>There are a few point to bear in mind if you want to change the ordering in a BTREE database:</source>
          <target state="translated">BTREEデータベースで順序を変更したい場合は、いくつかの注意点があります。</target>
        </trans-unit>
        <trans-unit id="7b1086e8333561d2682eac30f860ad2422dfc42d" translate="yes" xml:space="preserve">
          <source>There are a few things to bear in mind when creating your own &lt;code&gt;ResultFactory&lt;/code&gt; :</source>
          <target state="translated">独自の &lt;code&gt;ResultFactory&lt;/code&gt; を作成するときは、いくつかの点に注意してください。</target>
        </trans-unit>
        <trans-unit id="378f2e66966b2788636abfdbe2bc87b5abb48ea4" translate="yes" xml:space="preserve">
          <source>There are a few things you need to know, however:</source>
          <target state="translated">しかし、知っておいてほしいことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="9cbfb29c30b87800b111898e71e11f4933f270fc" translate="yes" xml:space="preserve">
          <source>There are a lot of modules on CPAN, and it's easy to miss one that's similar to what you're planning on contributing. Have a good plough through the &lt;a href=&quot;http://search.cpan.org&quot;&gt;http://search.cpan.org&lt;/a&gt; and make sure you're not the one reinventing the wheel!</source>
          <target state="translated">CPANにはたくさんのモジュールがあり、貢献しようとしているものに似ているものを見逃しがちです。良い鋤を持って&lt;a href=&quot;http://search.cpan.org&quot;&gt;http://search.cpan.org&lt;/a&gt;し、あなたが車輪の再発明1じゃない作ります！</target>
        </trans-unit>
        <trans-unit id="8202fc94e9abdf77b0bbe8e0da596aca565bfbf9" translate="yes" xml:space="preserve">
          <source>There are a number of &quot;magic&quot; scalars with names that look like punctuation or line noise. These special variables are used for all kinds of purposes, and are documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;. The only one you need to know about for now is &lt;code&gt;$_&lt;/code&gt; which is the &quot;default variable&quot;. It's used as the default argument to a number of functions in Perl, and it's set implicitly by certain looping constructs.</source>
          <target state="translated">句読点やラインノイズのような名前の「魔法の」スカラーがいくつかあります。これらの特殊変数はあらゆる目的で使用され、&lt;a href=&quot;perlvar&quot;&gt;perlvarに&lt;/a&gt;文書化されています。現時点で知っておく必要があるのは、「デフォルト変数」である &lt;code&gt;$_&lt;/code&gt; です。これは、Perlの多くの関数のデフォルト引数として使用され、特定のループ構造によって暗黙的に設定されます。</target>
        </trans-unit>
        <trans-unit id="6fc3a0395d03ea21a961b5ccde55199ca19344c6" translate="yes" xml:space="preserve">
          <source>There are a number of Unicode characters that match multiple characters under &lt;code&gt;/i&lt;/code&gt;. For example, &lt;code&gt;LATIN SMALL LIGATURE FI&lt;/code&gt; should match the sequence &lt;code&gt;fi&lt;/code&gt; . Perl is not currently able to do this when the multiple characters are in the pattern and are split between groupings, or when one or more are quantified. Thus</source>
          <target state="translated">&lt;code&gt;/i&lt;/code&gt; の下の複数の文字に一致するUnicode文字がいくつかあります。たとえば、 &lt;code&gt;LATIN SMALL LIGATURE FI&lt;/code&gt; はシーケンス &lt;code&gt;fi&lt;/code&gt; と一致する必要があります。Perlは現在、複数の文字がパターン内にあり、グループ間で分割されている場合、または1つ以上が数量化されている場合、これを行うことができません。したがって</target>
        </trans-unit>
        <trans-unit id="3dd2d0257d19015791fc17037d18a20e756ba477" translate="yes" xml:space="preserve">
          <source>There are a number of escape sequences and character classes that we haven't covered yet.</source>
          <target state="translated">まだ取り上げていないエスケープシーケンスやキャラクタークラスがたくさんあります。</target>
        </trans-unit>
        <trans-unit id="58e8ff088e1d138c7e62589f4caba0154e035619" translate="yes" xml:space="preserve">
          <source>There are a number of flags that can be found at the end of regular expression constructs that are</source>
          <target state="translated">正規表現の構築物の最後には、以下のようなフラグがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="9135b7f56d303db71c9d18be0e91860f32c7ff91" translate="yes" xml:space="preserve">
          <source>There are a number of issues with regard to case-insensitive matching in Unicode rules. See &lt;code&gt;i&lt;/code&gt; under &lt;a href=&quot;#Modifiers&quot;&gt;Modifiers&lt;/a&gt; above.</source>
          <target state="translated">Unicodeルールの大文字と小文字を区別しないマッチングに関しては、いくつかの問題があります。上記の&lt;a href=&quot;#Modifiers&quot;&gt;修飾子の&lt;/a&gt;下の &lt;code&gt;i&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="022096dd663fb452b1d41c016ae62776dae4f673" translate="yes" xml:space="preserve">
          <source>There are a number of limits on the size of the data that you can store in the NDBM file. The most important is that the length of a key, plus the length of its associated value, may not exceed 1008 bytes.</source>
          <target state="translated">NDBMファイルに格納できるデータのサイズにはいくつかの制限がある。最も重要なのは、キーの長さに関連する値の長さを加えた長さが1008バイトを超えてはならないということである。</target>
        </trans-unit>
        <trans-unit id="72d53d5198c98896d8e7795e9a89c4a433023428" translate="yes" xml:space="preserve">
          <source>There are a number of limits on the size of the data that you can store in the SDBM file. The most important is that the length of a key, plus the length of its associated value, may not exceed 1008 bytes.</source>
          <target state="translated">SDBMファイルに格納できるデータのサイズにはいくつかの制限がある。最も重要なのは、キーの長さに関連する値の長さを加えた長さが1008バイトを超えてはならないということである。</target>
        </trans-unit>
        <trans-unit id="52efe033e2beba5914060b25e959b1d5bcc3adec" translate="yes" xml:space="preserve">
          <source>There are a number of modules which let you write GUIs in Perl. Most GUI toolkits have a perl interface: an incomplete list follows.</source>
          <target state="translated">PerlでGUIを書くためのモジュールがいくつかあります。ほとんどの GUI ツールキットは perl インターフェースを持っています。</target>
        </trans-unit>
        <trans-unit id="7c6653dd731ed3a59a2ee9aba20887a251e28fb4" translate="yes" xml:space="preserve">
          <source>There are a number of new concepts introduced here, described below:</source>
          <target state="translated">ここで紹介する新しい概念は、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="5042e54e451264a1c914a632ba72877f3d1fb724" translate="yes" xml:space="preserve">
          <source>There are a number of other limitations with the &lt;code&gt;Merge&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;Merge&lt;/code&gt; オプションには、他にもいくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="7b02972f75c4a57c97baf269f0fc3720b5f2bc53" translate="yes" xml:space="preserve">
          <source>There are a number of reasons that you might prefer &lt;code&gt;Tie::File&lt;/code&gt; . A list is available at &lt;code&gt;&lt;a href=&quot;http://perl.plover.com/TieFile/why-not-DB_File&quot;&gt;http://perl.plover.com/TieFile/why-not-DB_File&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Tie::File&lt;/code&gt; を選択する理由はいくつかあります。リストは &lt;code&gt;&lt;a href=&quot;http://perl.plover.com/TieFile/why-not-DB_File&quot;&gt;http://perl.plover.com/TieFile/why-not-DB_File&lt;/a&gt;&lt;/code&gt; で入手できます。</target>
        </trans-unit>
        <trans-unit id="fc49fd5fe581b9df69b9289066f92c4c1dfec1b9" translate="yes" xml:space="preserve">
          <source>There are a number of security issues with the full Unicode list of word characters. See &lt;a href=&quot;http://unicode.org/reports/tr36&quot;&gt;http://unicode.org/reports/tr36&lt;/a&gt;.</source>
          <target state="translated">単語文字の完全なUnicodeリストには、多くのセキュリティ問題があります。&lt;a href=&quot;http://unicode.org/reports/tr36&quot;&gt;http://unicode.org/reports/tr36を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="34fde0bc8e68f7eb8a6a5b8c75bef1c718f91f74" translate="yes" xml:space="preserve">
          <source>There are a number of ways to handle this sort of problem. The best way is to always have all threads acquire locks in the exact same order. If, for example, you lock variables &lt;code&gt;$x&lt;/code&gt; , &lt;code&gt;$y&lt;/code&gt; , and &lt;code&gt;$z&lt;/code&gt; , always lock &lt;code&gt;$x&lt;/code&gt; before &lt;code&gt;$y&lt;/code&gt; , and &lt;code&gt;$y&lt;/code&gt; before &lt;code&gt;$z&lt;/code&gt; . It's also best to hold on to locks for as short a period of time to minimize the risks of deadlock.</source>
          <target state="translated">この種の問題を処理する方法はいくつかあります。最善の方法は、常にすべてのスレッドがまったく同じ順序でロックを取得するようにすることです。たとえば、あなたが変数ロック、場合 &lt;code&gt;$x&lt;/code&gt; 、 &lt;code&gt;$y&lt;/code&gt; 、および &lt;code&gt;$z&lt;/code&gt; 、常にロック &lt;code&gt;$x&lt;/code&gt; 前に、 &lt;code&gt;$y&lt;/code&gt; 、および &lt;code&gt;$y&lt;/code&gt; 前に &lt;code&gt;$z&lt;/code&gt; 。また、デッドロックのリスクを最小限に抑えるために、ロックを短時間保持することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f32c15283e2f4c6b7705b70493695500588d21f8" translate="yes" xml:space="preserve">
          <source>There are a number of ways to hide the source to your Perl programs, with varying levels of &quot;security&quot;.</source>
          <target state="translated">Perl プログラムのソースを隠す方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="47ea19cfdb1d50b8922388e83c50c4e47a818ebc" translate="yes" xml:space="preserve">
          <source>There are a number of ways, with varying efficiency. If you want a count of a certain single character (X) within a string, you can use the &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; function like so:</source>
          <target state="translated">効率はさまざまですが、いくつかの方法があります。文字列内の特定の1文字（X）の数が必要な場合は、次のように &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; 関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="7bba5f24a6f4653ec9fc5a0573f80d18dac8d06b" translate="yes" xml:space="preserve">
          <source>There are a set of utilities which help you in developing Perl programs, and in particular, extending Perl with C.</source>
          <target state="translated">Perlプログラムの開発、特にC言語でのPerlの拡張に役立つユーティリティのセットがあります。</target>
        </trans-unit>
        <trans-unit id="6b1252989edb8e8176f3bcfc5773893823daccc4" translate="yes" xml:space="preserve">
          <source>There are a significant number of test failures in the CPAN modules shipped with Perl v5.22. These are only in modules not primarily maintained by Perl 5 porters. Some of these are failures in the tests only: they don't realize that it is proper to get different results on EBCDIC platforms. And some of the failures are real bugs. If you compile and do a &lt;code&gt;make test&lt;/code&gt; on Perl, all tests on the &lt;code&gt;/cpan&lt;/code&gt; directory are skipped.</source>
          <target state="translated">Perl v5.22に同梱されているCPANモジュールには、かなりの数のテストエラーがあります。これらは、Perl 5ポーターによって主に保守されていないモジュールにのみ存在します。これらの一部は、テストのみの失敗です。EBCDICプラットフォームで異なる結果を得ることが適切であることを彼らは認識していません。そして、失敗のいくつかは本当のバグです。Perlでコンパイルして &lt;code&gt;make test&lt;/code&gt; を行う場合、 &lt;code&gt;/cpan&lt;/code&gt; ディレクトリのすべてのテストはスキップされます。</target>
        </trans-unit>
        <trans-unit id="9a68ba03d821b0f9ca941d8a7348ffd6b9675672" translate="yes" xml:space="preserve">
          <source>There are a variety of ways of transforming data with an intra character set mapping that serve a variety of purposes. Sorting was discussed in the previous section and a few of the other more popular mapping techniques are discussed next.</source>
          <target state="translated">文字セット内マッピングを使用してデータを変換する方法には、さまざまな目的を果たすさまざまな方法があります。ソートについては前のセクションで説明し、他のより一般的なマッピング技術のいくつかについては次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="8c243ce02550d420fdebc8e85f18f50ac8e89a64" translate="yes" xml:space="preserve">
          <source>There are actually two varieties of null strings (sometimes referred to as &quot;empty&quot; strings), a defined one and an undefined one. The defined version is just a string of length zero, such as &lt;code&gt;&quot;&quot;&lt;/code&gt; . The undefined version is the value that indicates that there is no real value for something, such as when there was an error, or at end of file, or when you refer to an uninitialized variable or element of an array or hash. Although in early versions of Perl, an undefined scalar could become defined when first used in a place expecting a defined value, this no longer happens except for rare cases of autovivification as explained in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;. You can use the defined() operator to determine whether a scalar value is defined (this has no meaning on arrays or hashes), and the undef() operator to produce an undefined value.</source>
          <target state="translated">実際には、ヌル文字列（「空の」文字列と呼ばれることもあります）には、定義されたものと未定義のものの2種類があります。定義されたバージョンは、 &lt;code&gt;&quot;&quot;&lt;/code&gt; など、長さがゼロの文字列です。未定義バージョンは、エラーが発生したとき、ファイルの終わりにあるとき、または初期化されていない変数または配列やハッシュの要素を参照するときなど、何かに実際の値がないことを示す値です。 Perlの初期バージョンでは、定義された値を期待する場所で最初に使用されたときに未定義のスカラーが定義される可能性がありましたが、&lt;a href=&quot;perlref&quot;&gt;perlrefで&lt;/a&gt;説明されているautovivificationのまれなケースを除いて、これは発生しなくなりました。defined（）演算子を使用してスカラー値が定義されているかどうかを判別できます（これは配列やハッシュでは意味がありません）。undef（）演算子を使用して未定義の値を生成できます。</target>
        </trans-unit>
        <trans-unit id="547f74aebc059a529676c6646c9bed2946a0409e" translate="yes" xml:space="preserve">
          <source>There are additional macros whose values may be bitwise OR'ed with the &lt;code&gt;GV_ADD&lt;/code&gt; argument to enable certain extra features. Those bits are:</source>
          <target state="translated">特定の追加機能を有効にするために、値が &lt;code&gt;GV_ADD&lt;/code&gt; 引数とビット単位でORされる追加のマクロがあります。それらのビットは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="51046d0ad7a7252d1ce87aabe4027ffe3663a57e" translate="yes" xml:space="preserve">
          <source>There are also &lt;code&gt;Win32::IsWinNT()&lt;/code&gt; and &lt;code&gt;Win32::IsWin95()&lt;/code&gt; ; try &lt;code&gt;perldoc Win32&lt;/code&gt; , and as of libwin32 0.19 (not part of the core Perl distribution) &lt;code&gt;Win32::GetOSName()&lt;/code&gt; . The very portable &lt;code&gt;POSIX::uname()&lt;/code&gt; will work too:</source>
          <target state="translated">あります &lt;code&gt;Win32::IsWinNT()&lt;/code&gt; と &lt;code&gt;Win32::IsWin95()&lt;/code&gt; ; してみてください &lt;code&gt;perldoc Win32&lt;/code&gt; 、とlibwin32 0.19（Perlのコアディストリビューションの一部ではない）のよう &lt;code&gt;Win32::GetOSName()&lt;/code&gt; 。移植性の高い &lt;code&gt;POSIX::uname()&lt;/code&gt; も機能します。</target>
        </trans-unit>
        <trans-unit id="68cc104cb95d94223dc9fddad7fb75cbcb044f6c" translate="yes" xml:space="preserve">
          <source>There are also endless possibilities to use</source>
          <target state="translated">を使用する可能性も無限大です。</target>
        </trans-unit>
        <trans-unit id="323189fd57b85b2e190ea90f3e9bb682b3b9f2e0" translate="yes" xml:space="preserve">
          <source>There are also plenty of Perl related newsgroups located under &lt;code&gt;comp.lang.perl.*&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;comp.lang.perl.*&lt;/code&gt; 下にあるPerl関連のニュースグループもたくさんあります。</target>
        </trans-unit>
        <trans-unit id="527d1ab1f5f5398fbabcd044390ef4e42b5f0b60" translate="yes" xml:space="preserve">
          <source>There are also some commercial products that may work for you, although you have to buy a license for them.</source>
          <target state="translated">また、市販品でもライセンスを購入する必要がありますが、効果がありそうなものもあります。</target>
        </trans-unit>
        <trans-unit id="54ce59232e232d36fa4b243d9439f11e909759d7" translate="yes" xml:space="preserve">
          <source>There are also some commonly used modules for the task. &lt;a href=&quot;scalar/util&quot;&gt;Scalar::Util&lt;/a&gt; (distributed with 5.8) provides access to perl's internal function &lt;code&gt;looks_like_number&lt;/code&gt; for determining whether a variable looks like a number. &lt;a href=&quot;http://search.cpan.org/perldoc/Data::Types&quot;&gt;Data::Types&lt;/a&gt; exports functions that validate data types using both the above and other regular expressions. Thirdly, there is &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt; which has regular expressions to match various types of numbers. Those three modules are available from the CPAN.</source>
          <target state="translated">タスクに一般的に使用されるいくつかのモジュールもあります。&lt;a href=&quot;scalar/util&quot;&gt;Scalar :: Util&lt;/a&gt;（5.8で配布）は、変数が数値のように見えるかどうかを判断するためのperlの内部関数 &lt;code&gt;looks_like_number&lt;/code&gt; へのアクセスを提供します。&lt;a href=&quot;http://search.cpan.org/perldoc/Data::Types&quot;&gt;Data :: Types&lt;/a&gt;は、上記と他の正規表現の両方を使用してデータ型を検証する関数をエクスポートします。第三に、さまざまなタイプの数値に一致する正規表現を持つ&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp :: Common&lt;/a&gt;があります。これら3つのモジュールはCPANから入手できます。</target>
        </trans-unit>
        <trans-unit id="b1ee19a63035c233ed5685ff1e3a13cd9e4a26d4" translate="yes" xml:space="preserve">
          <source>There are also some other op types: a &lt;code&gt;PMOP&lt;/code&gt; holds a regular expression, and has no children, and a &lt;code&gt;LOOP&lt;/code&gt; may or may not have children. If the &lt;code&gt;op_children&lt;/code&gt; field is non-zero, it behaves like a &lt;code&gt;LISTOP&lt;/code&gt; . To complicate matters, if a &lt;code&gt;UNOP&lt;/code&gt; is actually a &lt;code&gt;null&lt;/code&gt; op after optimization (see &lt;a href=&quot;#Compile-pass-2%3a-context-propagation&quot;&gt;Compile pass 2: context propagation&lt;/a&gt;) it will still have children in accordance with its former type.</source>
          <target state="translated">他のいくつかのオペの種類があります： &lt;code&gt;PMOP&lt;/code&gt; は、正規表現を保持し、子を持たない、と &lt;code&gt;LOOP&lt;/code&gt; はや子供を持っていない可能性があります。 &lt;code&gt;op_children&lt;/code&gt; フィールドがゼロ以外の場合は、LISTOPのように動作し &lt;code&gt;LISTOP&lt;/code&gt; 。問題を複雑にするのは、 &lt;code&gt;UNOP&lt;/code&gt; が最適化後に実際に &lt;code&gt;null&lt;/code&gt; 演算である場合（&lt;a href=&quot;#Compile-pass-2%3a-context-propagation&quot;&gt;コンパイルパス2：コンテキストの伝播を&lt;/a&gt;参照）、元の型に従って子がまだ存在することです。</target>
        </trans-unit>
        <trans-unit id="d74afa3e57d8bf587dddccd05e8aa225e3034ba7" translate="yes" xml:space="preserve">
          <source>There are also some tricks that you can play with &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline&lt;/a&gt;&lt;/code&gt; and the accumulator variable &lt;code&gt;$^A&lt;/code&gt; , but you lose a lot of the value of formats since &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline&lt;/a&gt;&lt;/code&gt; won't handle paging and so on. You end up reimplementing formats when you use them.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline&lt;/a&gt;&lt;/code&gt; とアキュムレータ変数 &lt;code&gt;$^A&lt;/code&gt; で遊ぶことができるいくつかのトリックがありますが、 &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline&lt;/a&gt;&lt;/code&gt; はページングなどを処理しないため、フォーマットの多くの価値を失います。フォーマットを使用すると、最終的にはフォーマットを再実装することになります。</target>
        </trans-unit>
        <trans-unit id="8a607b0a4fc3c7e1671b30a3b355e931c22fa4ed" translate="yes" xml:space="preserve">
          <source>There are also the two values &lt;code&gt;PL_sv_yes&lt;/code&gt; and &lt;code&gt;PL_sv_no&lt;/code&gt; , which contain boolean TRUE and FALSE values, respectively. Like &lt;code&gt;PL_sv_undef&lt;/code&gt; , their addresses can be used whenever an &lt;code&gt;SV*&lt;/code&gt; is needed.</source>
          <target state="translated">&lt;code&gt;PL_sv_yes&lt;/code&gt; と &lt;code&gt;PL_sv_no&lt;/code&gt; の 2つの値もあり、それぞれブール値のTRUEとFALSEの値が含まれています。 &lt;code&gt;PL_sv_undef&lt;/code&gt; と同様に、 &lt;code&gt;SV*&lt;/code&gt; が必要なときはいつでもそれらのアドレスを使用できます。</target>
        </trans-unit>
        <trans-unit id="2a9975f54ba4b1444b192c3d8bfd7d71c13ebdbb" translate="yes" xml:space="preserve">
          <source>There are also versions of the functions with &quot;_hex&quot; or &quot;_base64&quot; appended to the name, which returns the digest in the indicated form.</source>
          <target state="translated">また、関数名に&quot;_hex &quot;や&quot;_base64 &quot;を付加したバージョンもあり、これは指定された形式でダイジェストを返す。</target>
        </trans-unit>
        <trans-unit id="a5a4f4a9450ec80ee122e2031504c8884d21e28d" translate="yes" xml:space="preserve">
          <source>There are at least two instance variables stored in a hash reference, {data} and {encoding}.</source>
          <target state="translated">ハッシュ参照には、{data}と{encoding}の少なくとも2つのインスタンス変数が格納されています。</target>
        </trans-unit>
        <trans-unit id="68682d3f996c5d0d4c5e2cf0ab83889b2edb3594" translate="yes" xml:space="preserve">
          <source>There are cases when you will not know beforehand how many tests your script is going to run. In this case, you can declare your tests at the end.</source>
          <target state="translated">スクリプトを実行するテストの数が事前にわからない場合もあるでしょう。この場合は、最後にテストを宣言することができます。</target>
        </trans-unit>
        <trans-unit id="13a4d162b9b64ac9d632dbabef83e1cc311a2290" translate="yes" xml:space="preserve">
          <source>There are certain application spaces which are already very, very well served by CPAN. One example is templating systems, another is date and time modules, and there are many more. While it is a rite of passage to write your own version of these things, please consider carefully whether the Perl world really needs you to publish it.</source>
          <target state="translated">CPANがすでに非常によく機能しているアプリケーション領域があります。一つの例はテンプレートシステムであり、もう一つは日付と時刻のモジュールであり、他にも多くのものがあります。これらのものの独自のバージョンを書くことは通過儀礼ですが、Perlの世界がそれを公開することを本当に必要としているかどうかを注意深く検討してください。</target>
        </trans-unit>
        <trans-unit id="f399d82ea760be3c44c0c12193de98d98ca6c0b6" translate="yes" xml:space="preserve">
          <source>There are corresponding one-letter commands &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; for each of the four categories and another, &lt;code&gt;i&lt;/code&gt; for any of the mentioned four. Each of the four entities is implemented as a class with slightly differing methods for displaying an object.</source>
          <target state="translated">4つのカテゴリのそれぞれに対応する1文字のコマンド &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;d&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; があり、別のコマンドには、前述の4つのいずれかに &lt;code&gt;i&lt;/code&gt; があります。4つのエンティティはそれぞれ、オブジェクトを表示するためのメソッドがわずかに異なるクラスとして実装されます。</target>
        </trans-unit>
        <trans-unit id="61165542c376ce1515ee946fb54e0b62bf506b50" translate="yes" xml:space="preserve">
          <source>There are currently three implementations:</source>
          <target state="translated">現在、3つの実装があります。</target>
        </trans-unit>
        <trans-unit id="7082baef78129948a9aee04418c7c10c1b4d4a87" translate="yes" xml:space="preserve">
          <source>There are different classes in the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Folder&quot;&gt;Email::Folder&lt;/a&gt; namespace for supporting various mailbox types. Note that these modules are generally rather limited and only support &lt;b&gt;reading&lt;/b&gt; rather than writing.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Email::Folder&quot;&gt;Email :: Folder&lt;/a&gt;名前空間には、さまざまなメールボックスタイプをサポートするためのさまざまなクラスがあります。これらのモジュールは一般にかなり制限されており、書き込みではなく&lt;b&gt;読み取り&lt;/b&gt;のみをサポートする&lt;b&gt;ことに&lt;/b&gt;注意してください。</target>
        </trans-unit>
        <trans-unit id="ed85d6fa9e5690e5659a7fcf3cc7c90a6a9abc89" translate="yes" xml:space="preserve">
          <source>There are exceptions to the above rules for dereference operations (which, if Step 1 fails, always fall back to the normal, built-in implementations - see Dereferencing), and for &lt;code&gt;~~&lt;/code&gt; (which has its own set of rules - see &lt;code&gt;Matching&lt;/code&gt; under &lt;a href=&quot;#Overloadable-Operations&quot;&gt;Overloadable Operations&lt;/a&gt; above).</source>
          <target state="translated">、およびのための-そこに間接参照操作のための上記のルールの例外（間接参照を参照してください。ステップ1が失敗した場合、常に正常に戻って落ち、組み込みの実装）です &lt;code&gt;~~&lt;/code&gt; ルールの独自のセットを持っています（ -を参照 &lt;code&gt;Matching&lt;/code&gt; の下に上記の&lt;a href=&quot;#Overloadable-Operations&quot;&gt;オーバーロード可能な操作&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="129afe5f5ce43c82f8dd2611661b6c6fae2152e8" translate="yes" xml:space="preserve">
          <source>There are exceptions to the simple scalar maps. Some properties have some elements in their map list that are themselves lists of scalars; and some special strings are returned that are not to be interpreted as-is. Element [2] (placed into &lt;code&gt;$format&lt;/code&gt; in the example above) of the returned four element list tells you if the map has any of these special elements or not, as follows:</source>
          <target state="translated">単純なスカラーマップには例外があります。一部のプロパティは、それら自体がスカラーのリストであるマップリストにいくつかの要素があります。そのまま解釈されない特別な文字列が返されます。次のように、返された4つの要素リストの要素[2]（上記の例では &lt;code&gt;$format&lt;/code&gt; に配置）は、マップにこれらの特別な要素があるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="03da32e2f08e4c55ca723ef0de464a8b0fc8a37a" translate="yes" xml:space="preserve">
          <source>There are five pattern matching operations other than a strict one-to-one match between the pattern and the source to be checked for a match.</source>
          <target state="translated">パターンの照合操作は、パターンと照合元の間で厳密な一対一の照合以外に、5つの操作があります。</target>
        </trans-unit>
        <trans-unit id="caaaee4619b1124c4cd083d4f94b5aeee43dd52b" translate="yes" xml:space="preserve">
          <source>There are four arguments:</source>
          <target state="translated">議論は4つあります。</target>
        </trans-unit>
        <trans-unit id="c30d8b75df6d6d560de84db459ba9ddeaac5bfd4" translate="yes" xml:space="preserve">
          <source>There are four methods associated with DBM Filters. All work identically, and each is used to install (or uninstall) a single DBM Filter. Each expects a single parameter, namely a reference to a sub. The only difference between them is the place that the filter is installed.</source>
          <target state="translated">DBM フィルタには 4 つの方法があります。どれも同じように動作し、それぞれが単一の DBM フィルタをインストール (またはアンインストール)するために使用されます。それぞれのメソッドは単一のパラメータ、すなわちサブへの参照を必要とします。両者の唯一の違いは、フィルタがインストールされる場所です。</target>
        </trans-unit>
        <trans-unit id="2b4786fe13177802911e40046450c4aa8a6b7442" translate="yes" xml:space="preserve">
          <source>There are four routines that can be used to call a Perl subroutine from within a C program. These four are:</source>
          <target state="translated">Cプログラムの中からPerlのサブルーチンを呼び出すのに使えるルーチンが4つあります。これらの4つは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0b4c3b4907f361ea335c94a68bf5900b38774c4c" translate="yes" xml:space="preserve">
          <source>There are just two ways to make a reference, and just two ways to use it once you have it.</source>
          <target state="translated">参考にする方法と、一度手に入れたら使う方法の2つがあるだけです。</target>
        </trans-unit>
        <trans-unit id="451300c3402db478bc017d97504bbf1dc7589d4f" translate="yes" xml:space="preserve">
          <source>There are literally dozens of other OO-related modules on CPAN besides those covered here, and you're likely to run across one or more of them if you work with other people's code.</source>
          <target state="translated">CPANには、ここで取り上げた以外にも文字通り数十種類のOO関連モジュールがあり、他人のコードを使って作業をしていると、それらのうちの1つ以上に遭遇する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6c77d5c24285fecf2b82ebf41d5dec81876d45b0" translate="yes" xml:space="preserve">
          <source>There are lots more commands and options, but the above will do it.</source>
          <target state="translated">他にもコマンドやオプションはたくさんありますが、上記のようにします。</target>
        </trans-unit>
        <trans-unit id="837d89ccfb96f196a244bf30256b711d40a975e1" translate="yes" xml:space="preserve">
          <source>There are many Perl &lt;a href=&quot;http://search.cpan.org/perldoc/lists.perl.org&quot;&gt;mailing lists&lt;/a&gt; for various topics, specifically the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2flists.perl.org%2flist%2fbeginners.html&quot;&gt;beginners list&lt;/a&gt; may be of use.</source>
          <target state="translated">さまざまなトピックについて多くのPerl &lt;a href=&quot;http://search.cpan.org/perldoc/lists.perl.org&quot;&gt;メーリングリスト&lt;/a&gt;があり、特に&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2flists.perl.org%2flist%2fbeginners.html&quot;&gt;初心者リスト&lt;/a&gt;が役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="9bec5519f33a4e7bdc4a53a2313d4e1bcfcd1067" translate="yes" xml:space="preserve">
          <source>There are many books on Perl and Perl-related. A few of these are good, some are OK, but many aren't worth your money. There is a list of these books, some with extensive reviews, at &lt;a href=&quot;http://books.perl.org/&quot;&gt;http://books.perl.org/&lt;/a&gt; . We list some of the books here, and while listing a book implies our endorsement, don't think that not including a book means anything.</source>
          <target state="translated">PerlとPerl関連の本はたくさんあります。これらのいくつかは良いです、いくつかは大丈夫ですが、多くはあなたのお金の価値がありません。これらの書籍のリストは、&lt;a href=&quot;http://books.perl.org/&quot;&gt;http：//books.perl.org/にあり&lt;/a&gt;ます。ここにいくつかの本をリストします。本をリストすることは私たちの推奨を意味しますが、本を含まないことは何かを意味するとは思わないでください。</target>
        </trans-unit>
        <trans-unit id="c4e51ecd675e07ca3b7be0664408ec108e37de71" translate="yes" xml:space="preserve">
          <source>There are many different ftp firewall products available. But unfortunately there is no standard for how to traverse a firewall. The list below shows the sequence of commands that Net::FTP will use</source>
          <target state="translated">ftp ファイアウォールには様々な製品があります。しかし、残念ながらファイアウォールを通過する方法の標準はありません。以下のリストは、Net::FTP が使用するコマンドの順序を示しています。</target>
        </trans-unit>
        <trans-unit id="ccca22cadfc5874b657dd6b896d963adc193de41" translate="yes" xml:space="preserve">
          <source>There are many good &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perl.org%2fbooks%2flibrary.html&quot;&gt;books on Perl&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perl.org%2fbooks%2flibrary.html&quot;&gt;Perlに関する&lt;/a&gt;優れた本はたくさんあります。</target>
        </trans-unit>
        <trans-unit id="18c010c4c2e46af9e1a3df8426bb24c3742b96b7" translate="yes" xml:space="preserve">
          <source>There are many more properties than the very basic ones described here. A complete list is in &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;.</source>
          <target state="translated">ここで説明する非常に基本的なプロパティよりも多くのプロパティがあります。完全なリストは&lt;a href=&quot;perluniprops&quot;&gt;perlunipropsにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9a8e433d3ac89e153ddbae16288b146a2a506dab" translate="yes" xml:space="preserve">
          <source>There are many other functions available since FileHandle is descended from IO::File, IO::Seekable, and IO::Handle. Please see those respective pages for documentation on more functions.</source>
          <target state="translated">FileHandle は IO::File,IO::Seekable,IO::Handle の子孫であるため、利用可能な他の多くの関数があります。より多くの関数のドキュメントについては、それぞれのページを参照してください。</target>
        </trans-unit>
        <trans-unit id="19b014b8d66d3b187e540a67f34591fd12721782" translate="yes" xml:space="preserve">
          <source>There are many reasons, but the major one is cross-platform compatibility.</source>
          <target state="translated">理由はいろいろありますが、大きなものはクロスプラットフォーム対応です。</target>
        </trans-unit>
        <trans-unit id="4f22a618b10f083a38eaf97d7560bbf775ba04c7" translate="yes" xml:space="preserve">
          <source>There are many ways to ensure that values are what you expect or want to accept. Besides the specific examples that we cover in the perlfaq, you can also look at the modules with &quot;Assert&quot; and &quot;Validate&quot; in their names, along with other modules such as &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt;.</source>
          <target state="translated">値が期待どおりまたは受け入れたいものであることを確認するには、多くの方法があります。perlfaqで取り上げている特定の例に加えて、名前に「Assert」と「Validate」が含まれているモジュール、および&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp :: Common&lt;/a&gt;などの他のモジュールも確認できます。</target>
        </trans-unit>
        <trans-unit id="c508352f954b14145337f34025470ea842ef7b40" translate="yes" xml:space="preserve">
          <source>There are many ways to get multiline data into a string. If you want it to happen automatically while reading input, you'll want to set $/ (probably to '' for paragraphs or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; for the whole file) to allow you to read more than one line at a time.</source>
          <target state="translated">複数行のデータを文字列に変換する方法はたくさんあります。入力の読み取り中に自動的に実行する場合は、$ /を設定して（段落の場合は ''に、ファイル全体の場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; ）、一度に複数の行を読み取れるようにします。</target>
        </trans-unit>
        <trans-unit id="3dc3f3b5eae147e801f5f43fb6a8fbac0ae189bf" translate="yes" xml:space="preserve">
          <source>There are many, many Unicode character properties. For the full list see &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;. Most of them have synonyms with shorter names, also listed there. Some synonyms are a single character. For these, you can drop the braces. For instance, &lt;code&gt;\pM&lt;/code&gt; is the same thing as &lt;code&gt;\p{Mark}&lt;/code&gt; , meaning things like accent marks.</source>
          <target state="translated">多くのUnicode文字プロパティがあります。完全なリストについては、&lt;a href=&quot;perluniprops&quot;&gt;perlunipropsを&lt;/a&gt;参照してください。それらのほとんどには、短い名前の同義語があり、そこにもリストされています。一部の同義語は単一の文字です。これらの場合、ブレースをドロップできます。たとえば、 &lt;code&gt;\pM&lt;/code&gt; は &lt;code&gt;\p{Mark}&lt;/code&gt; と同じで、アクセント記号などを意味します。</target>
        </trans-unit>
        <trans-unit id="1a61fc5e0ce0e0ef09d3d9c85a06d1ddbe46e285" translate="yes" xml:space="preserve">
          <source>There are many, many code points, but computers work with bytes, and a byte has room for only 256 values. Unicode has many more characters than that, so you need a method to make these accessible.</source>
          <target state="translated">コードポイントはたくさん、たくさんありますが、コンピュータはバイトで動作し、1バイトには256個の値しか入る余地がありません。Unicodeにはそれよりも多くの文字がありますので、これらの文字にアクセスできるようにする方法が必要です。</target>
        </trans-unit>
        <trans-unit id="88acdd96ec6d6927c08fab60ea3227280069d628" translate="yes" xml:space="preserve">
          <source>There are many, many sources for Solaris information. A few of the important ones for perl:</source>
          <target state="translated">Solaris の情報源はたくさんあります。perlにとって重要なものをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="c8f4eee710987379a0f55c604a3354e69d7b2875" translate="yes" xml:space="preserve">
          <source>There are modules to help you through the process of writing a module: &lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::ModuleMaker&quot;&gt;ExtUtils::ModuleMaker&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Module::Install&quot;&gt;Module::Install&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/PAR&quot;&gt;PAR&lt;/a&gt;</source>
          <target state="translated">モジュールの作成プロセスを支援するモジュールがあります：&lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::ModuleMaker&quot;&gt;ExtUtils :: ModuleMaker&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Module::Install&quot;&gt;Module :: Install&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/PAR&quot;&gt;PAR&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="61d4491371efc2ca44fd016e5d9139fc5fa773fa" translate="yes" xml:space="preserve">
          <source>There are no loops of references.</source>
          <target state="translated">参照のループはありません。</target>
        </trans-unit>
        <trans-unit id="476c776008d55428fe7585fbd0c3dce927c522c4" translate="yes" xml:space="preserve">
          <source>There are no unique methods for unknown results.</source>
          <target state="translated">未知の結果に対して、独自の方法はありません。</target>
        </trans-unit>
        <trans-unit id="b571d2027807fc8b9e77b0de9129097419041bc0" translate="yes" xml:space="preserve">
          <source>There are non-obvious Unicode rules under &lt;code&gt;/i&lt;/code&gt; that can match variably, but which you might not think could. For example, the substring &lt;code&gt;&quot;ss&quot;&lt;/code&gt; can match the single character LATIN SMALL LETTER SHARP S. There are other sequences of ASCII characters that can match single ligature characters, such as LATIN SMALL LIGATURE FFI matching &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/ffi/i&lt;/a&gt;&lt;/code&gt;. Starting in Perl v5.16, if you only care about ASCII matches, adding the &lt;code&gt;/aa&lt;/code&gt; modifier to the regex will exclude all these non-obvious matches, thus getting rid of this message. You can also say &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re qw(/aa)&lt;/code&gt; to apply &lt;code&gt;/aa&lt;/code&gt; to all regular expressions compiled within its scope. See &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;/i&lt;/code&gt; の下には明白に異なるUnicodeルールがあり、さまざまに一致する可能性がありますが、そうは思わないかもしれません。たとえば、部分文字列 &lt;code&gt;&quot;ss&quot;&lt;/code&gt; は、単一文字のラテン小文字LのSに一致 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/ffi/i&lt;/a&gt;&lt;/code&gt; 一致するラテン小文字LFIのように、単一の合字文字に一致できるASCII文字のシーケンスは他にもあります。 Perl v5.16以降では、ASCIIの一致のみを考慮する場合、 &lt;code&gt;/aa&lt;/code&gt; 修飾子を正規表現に追加すると、これらの明白でない一致がすべて除外されるため、このメッセージが表示されなくなります。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re qw(/aa)&lt;/code&gt; と言って、スコープ内でコンパイルされたすべての正規表現に &lt;code&gt;/aa&lt;/code&gt; を適用することもできます。&lt;a href=&quot;re&quot;&gt;reを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e5ad264a4513834556a80639fe98434e6bc7fc63" translate="yes" xml:space="preserve">
          <source>There are now two nested loops in the code: the outer loop for reading the compressed data from STDIN, as before; and the inner loop to carry out the uncompression.</source>
          <target state="translated">コードには、以前と同様に STDIN から圧縮されたデータを読み込むための外側のループと、圧縮を解除するための内側のループの 2 つの入れ子になったループがあります。</target>
        </trans-unit>
        <trans-unit id="a69e0c87595733580f5c73f14c1fdeb5543877d6" translate="yes" xml:space="preserve">
          <source>There are only a few attributes currently handled by Perl itself (or directly by this module, depending on how you look at it.) However, package-specific attributes are allowed by an extension mechanism. (See &lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;Package-specific Attribute Handling&lt;/a&gt; below.)</source>
          <target state="translated">現在、Perl自体によって（または、見方によっては、このモジュールによって直接）処理される属性はわずかです。ただし、パッケージ固有の属性は、拡張メカニズムによって許可されます。（以下の&lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;パッケージ固有の属性処理を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="108ccf06b73794e0f286d42a6259562039de6c36" translate="yes" xml:space="preserve">
          <source>There are other documents which might contain the information that you're looking for:</source>
          <target state="translated">他にも、探している情報が入っているかもしれない書類があります。</target>
        </trans-unit>
        <trans-unit id="ffadbd86efea8ed0c7e9318ac1bd6a93e63feaa1" translate="yes" xml:space="preserve">
          <source>There are other minor differences, particularly regarding &lt;code&gt;&lt;a href=&quot;../functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;, but in general, the correspondence is extremely close.</source>
          <target state="translated">特に &lt;code&gt;&lt;a href=&quot;../functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; に関しては、他にも小さな違いがありますが、一般に、対応は非常に密接です。</target>
        </trans-unit>
        <trans-unit id="e7bb3958077e624c5300c166b4aa5d1f00cfb6ff" translate="yes" xml:space="preserve">
          <source>There are other runtime options as well. You can use &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">他の実行時オプションもあります。 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; を使用できます：</target>
        </trans-unit>
        <trans-unit id="fae6e762f25c5a7d9726dbb80f1e49251722d367" translate="yes" xml:space="preserve">
          <source>There are platforms where longs are 64 bits, and platforms where ints are 64 bits, and while we are out to shock you, even platforms where shorts are 64 bits. This is all legal according to the C standard. (In other words, &quot;long long&quot; is not a portable way to specify 64 bits, and &quot;long long&quot; is not even guaranteed to be any wider than &quot;long&quot;.)</source>
          <target state="translated">ロングが64ビットのプラットフォームと イントが64ビットのプラットフォームがあります あなたにショックを与えようとしている間に ショートが64ビットのプラットフォームさえあります これはC規格によれば、すべて合法です。(言い換えれば、&quot;long long &quot;は64ビットを指定するためのポータブルな方法ではないし、&quot;long long &quot;は &quot;long &quot;よりも幅が広くなることすら保証されていない)。</target>
        </trans-unit>
        <trans-unit id="a1d48b6e5e54bf5c7c0f9c8f92bbb4b843c99efe" translate="yes" xml:space="preserve">
          <source>There are probably many more bugs on non-ASCII platforms (EBCDIC).</source>
          <target state="translated">非ASCIIプラットフォーム(EBCDIC)では、おそらくもっと多くのバグがあると思われます。</target>
        </trans-unit>
        <trans-unit id="6034cbb411ab9fcf9d496b60426633cf7c795bb5" translate="yes" xml:space="preserve">
          <source>There are quite a few systems out there that do worse!</source>
          <target state="translated">もっと悪いことをするシステムはかなりの数があります。</target>
        </trans-unit>
        <trans-unit id="1d2d754395a1d1b23e17d21c745bf8aafd6b351f" translate="yes" xml:space="preserve">
          <source>There are rare cases where this package-based resolution can be a problem. If you copy a subroutine from one package to another, &lt;code&gt;SUPER&lt;/code&gt; resolution will be done based on the original package.</source>
          <target state="translated">このパッケージベースの解決が問題になることがあるまれなケースがあります。あるパッケージから別のパッケージにサブルーチンをコピーすると、元のパッケージに基づいて &lt;code&gt;SUPER&lt;/code&gt; 解決が行われます。</target>
        </trans-unit>
        <trans-unit id="af62a9f4883bfebec9e4b48e9587f48259af1d0b" translate="yes" xml:space="preserve">
          <source>There are really two tracks of perl development: a maintenance version and an experimental version. The maintenance versions are stable, and have an even number as the minor release (i.e. perl5.18.x, where 18 is the minor release). The experimental versions may include features that don't make it into the stable versions, and have an odd number as the minor release (i.e. perl5.19.x, where 19 is the minor release).</source>
          <target state="translated">perlの開発には、保守版と実験版の2つのトラックがあります。保守版は安定版で、マイナーリリースとして偶数の番号が付けられています(例:perl5.18.x、18はマイナーリリースです)。実験的なバージョンは安定版にはない機能が含まれている可能性があり、マイナーリリースとして奇数の番号が付けられています (例:perl5.19.x,ここでは19がマイナーリリースです)。</target>
        </trans-unit>
        <trans-unit id="b1bf8726c4584d2c3d7eed2a3217ca6397579941" translate="yes" xml:space="preserve">
          <source>There are several I/O operators you should know about.</source>
          <target state="translated">知っておくべきI/Oオペレータがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="2fda79a606c9c0725617e5e789142491b7fdc787" translate="yes" xml:space="preserve">
          <source>There are several ambiguous cases where a conversion routine cannot determine whether an input filename is in Unix format or in VMS format, since now both VMS and Unix file specifications may have characters in them that could be mistaken for syntax delimiters of the other type. So some pathnames simply cannot be used in a mode that allows either type of pathname to be present. Perl will tend to assume that an ambiguous filename is in Unix format.</source>
          <target state="translated">変換ルーチンが入力ファイル名がUnix形式かVMS形式かを判断できない曖昧なケースがいくつかあります。そのため、パス名の中には、どちらかのタイプのパス名が存在することを許すモードでは使えないものもあります。Perl は曖昧なファイル名が Unix フォーマットであると仮定する傾向があります。</target>
        </trans-unit>
        <trans-unit id="dc2d6ce8616f44441a994dbb2d806ba6e4997805" translate="yes" xml:space="preserve">
          <source>There are several different code sets you can use for identifying countries. A code set may be specified using either a name, or a constant that is automatically exported by this module.</source>
          <target state="translated">国を識別するために使用できるコードセットはいくつかあります。コードセットは名前か、このモジュールによって自動的にエクスポートされる定数を使って指定することができます。</target>
        </trans-unit>
        <trans-unit id="74b369e9ecdad508287761106812f2205698bcfc" translate="yes" xml:space="preserve">
          <source>There are several different code sets you can use for identifying currencies. A code set may be specified using either a name, or a constant that is automatically exported by this module.</source>
          <target state="translated">通貨を識別するために使用できるコードセットはいくつかあります。コードセットを指定するには、名前を指定するか、このモジュールで自動的にエクスポートされる定数を使用します。</target>
        </trans-unit>
        <trans-unit id="c5df10a209c7b9d0bd6df6a76c15e47c845b73fd" translate="yes" xml:space="preserve">
          <source>There are several different code sets you can use for identifying languages. A code set may be specified using either a name, or a constant that is automatically exported by this module.</source>
          <target state="translated">言語を識別するために使用できるコードセットはいくつかあります。コードセットは名前か、このモジュールによって自動的にエクスポートされる定数を使って指定することができます。</target>
        </trans-unit>
        <trans-unit id="357e0be22039446c2158a4027e1ee33566fa847b" translate="yes" xml:space="preserve">
          <source>There are several different code sets you can use for identifying scripts. A code set may be specified using either a name, or a constant that is automatically exported by this module.</source>
          <target state="translated">スクリプトを識別するために使用できるコードセットはいくつかあります。コードセットは名前か、このモジュールによって自動的にエクスポートされる定数を使って指定することができます。</target>
        </trans-unit>
        <trans-unit id="c871d77268a0e9a3faf86ba66c7adbf672f7193a" translate="yes" xml:space="preserve">
          <source>There are several escape sequences that convert characters or strings between upper and lower case, and they are also available within patterns. &lt;code&gt;\l&lt;/code&gt; and &lt;code&gt;\u&lt;/code&gt; convert the next character to lower or upper case, respectively:</source>
          <target state="translated">文字または文字列を大文字と小文字の間で変換するエスケープシーケンスがいくつかあり、それらはパターン内でも使用できます。 &lt;code&gt;\l&lt;/code&gt; および &lt;code&gt;\u&lt;/code&gt; は、次の文字をそれぞれ小文字または大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="8dd1b15a1dbfd18df05cd02be13096a5a0b828cf" translate="yes" xml:space="preserve">
          <source>There are several functions available to specify characters and code points portably in tests. The always-preloaded functions &lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; and its inverse &lt;code&gt;utf8::native_to_unicode()&lt;/code&gt; take code points and translate appropriately. The file</source>
          <target state="translated">テストで移植性のある文字とコードポイントを指定するために使用できるいくつかの関数があります。常にプリロードされている関数 &lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; とその逆の &lt;code&gt;utf8::native_to_unicode()&lt;/code&gt; はコードポイントを取り、適切に変換します。ファイル</target>
        </trans-unit>
        <trans-unit id="324d2fa183413ecef672812d1ff51b1b76337a11" translate="yes" xml:space="preserve">
          <source>There are several great resources for locating workshops: the &lt;a href=&quot;#Websites&quot;&gt;websites&lt;/a&gt; mentioned above, the &lt;a href=&quot;#Calendar-of-Perl-Events&quot;&gt;calendar&lt;/a&gt; mentioned below, and the YAPC Europe website, &lt;a href=&quot;http://www.yapceurope.org/&quot;&gt;http://www.yapceurope.org/&lt;/a&gt;, which is probably the best resource for European Perl events.</source>
          <target state="translated">ワークショップを探すには、いくつかの優れたリソースがあります。上記の&lt;a href=&quot;#Websites&quot;&gt;Webサイト&lt;/a&gt;、下記の&lt;a href=&quot;#Calendar-of-Perl-Events&quot;&gt;カレンダー&lt;/a&gt;、およびYAPCヨーロッパのWebサイト&lt;a href=&quot;http://www.yapceurope.org/&quot;&gt;http://www.yapceurope.org/です&lt;/a&gt;。これは、おそらくヨーロッパのPerlイベントに最適なリソースです。</target>
        </trans-unit>
        <trans-unit id="70817f22a3f6a9efb5f508894682105db2aa6387" translate="yes" xml:space="preserve">
          <source>There are several of these, which are equivalents, using the &lt;code&gt;\p{}&lt;/code&gt; notation, for Posix classes and are described in &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">これらのいくつかは、Posixクラスの &lt;code&gt;\p{}&lt;/code&gt; 表記を使用して同等であり、&lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;perlrecharclassのPOSIX文字クラスで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="1f83d1183ceda85cce3fcdc239963f72e745557e" translate="yes" xml:space="preserve">
          <source>There are several of these, which are the standard Posix classes extended to the full Unicode range. They are described in &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">これらのいくつかは、Unicodeの全範囲に拡張された標準のPosixクラスです。それらは&lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;perlrecharclassのPOSIX文字クラスで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="e3db56f779a367ad8451b62021cf957e6240bc01" translate="yes" xml:space="preserve">
          <source>There are several types of character class tests that Perl implements. The only ones described here are those that directly correspond to C library functions that operate on 8-bit characters, but there are equivalents that operate on wide characters, and UTF-8 encoded strings. All are more fully described in &lt;a href=&quot;perlapi#Character-classification&quot;&gt;Character classification in perlapi&lt;/a&gt; and &lt;a href=&quot;perlapi#Character-case-changing&quot;&gt;Character case changing in perlapi&lt;/a&gt;.</source>
          <target state="translated">Perlが実装する文字クラステストにはいくつかのタイプがあります。ここで説明するものは、8ビット文字を操作するCライブラリ関数に直接対応するものだけですが、ワイド文字とUTF-8エンコード文字列を操作する同等のものがあります。すべてについては&lt;a href=&quot;perlapi#Character-classification&quot;&gt;、ペルラピ&lt;/a&gt;での文字分類とペルラピでの&lt;a href=&quot;perlapi#Character-case-changing&quot;&gt;文字の大文字小文字の変更で&lt;/a&gt;詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="f2e0a93aaf35e3ad5cd5182c4904a3f139cb368f" translate="yes" xml:space="preserve">
          <source>There are several ways to call the debugger:</source>
          <target state="translated">デバッガを呼び出す方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="e8db18a3a166163bfb23804a9a1202e4ece1bc54" translate="yes" xml:space="preserve">
          <source>There are several ways to wrap your Perl scripts in DCL</source>
          <target state="translated">Perl スクリプトを DCL でラップする方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="9d4463c6ded942fe4cd0ec81ef54653fbdb5493c" translate="yes" xml:space="preserve">
          <source>There are some bugs in the &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&quot;U0&quot;&lt;/code&gt; template</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&quot;U0&quot;&lt;/code&gt; テンプレートにいくつかのバグがあります</target>
        </trans-unit>
        <trans-unit id="5363960c51ded4425aac0c5e8d1bf8c47e9bafcf" translate="yes" xml:space="preserve">
          <source>There are some cases where Perl can't immediately tell the difference between an expression and a statement. For instance, the syntax for a block and an anonymous hash reference constructor look the same unless there's something in the braces to give Perl a hint. The ellipsis is a syntax error if Perl doesn't guess that the &lt;code&gt;{ ... }&lt;/code&gt; is a block. In that case, it doesn't think the &lt;code&gt;...&lt;/code&gt; is an ellipsis because it's expecting an expression instead of a statement:</source>
          <target state="translated">Perlが式とステートメントの違いをすぐに判断できない場合があります。たとえば、ブロックと匿名ハッシュ参照コンストラクタの構文は、Perlにヒントを与えるための括弧がない限り、同じように見えます。 Perlが &lt;code&gt;{ ... }&lt;/code&gt; がブロックであると推測しない場合、省略記号は構文エラーです。その場合、ステートメントではなく式を想定しているため、 &lt;code&gt;...&lt;/code&gt; は省略記号であるとは見なされません。</target>
        </trans-unit>
        <trans-unit id="83d390e2b6c3127ccfec700a0a95db3ede4e9652" translate="yes" xml:space="preserve">
          <source>There are some caveats with the use of runtime statements like &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; Exporter&lt;/code&gt; and the assignment to package variables, which can be very subtle for the unaware programmer. This may happen for instance with mutually recursive modules, which are affected by the time the relevant constructions are executed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; Exporter&lt;/code&gt; やパッケージ変数への割り当てなどのランタイムステートメントの使用にはいくつかの注意事項があります。これは、知らないプログラマにとっては非常に微妙です。これは、たとえば、相互に再帰的なモジュールで発生する可能性があり、関連する構造が実行される時間によって影響を受けます。</target>
        </trans-unit>
        <trans-unit id="9d05d692911a48f923ff823586f7db33a368c559" translate="yes" xml:space="preserve">
          <source>There are some convenience functions available that can help with the destruction of xVs. These functions introduce the concept of &quot;mortality&quot;. An xV that is mortal has had its reference count marked to be decremented, but not actually decremented, until &quot;a short time later&quot;. Generally the term &quot;short time later&quot; means a single Perl statement, such as a call to an XSUB function. The actual determinant for when mortal xVs have their reference count decremented depends on two macros, SAVETMPS and FREETMPS. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; and &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; for more details on these macros.</source>
          <target state="translated">xVの破棄に役立つ便利な関数がいくつかあります。これらの関数は、「死亡率」の概念を導入します。致命的であるxVの参照カウントは減らされるようにマークされていますが、実際には減らされていませんが、「しばらくしてから」になります。一般に、「短時間後」という用語は、XSUB関数の呼び出しなどの単一のPerlステートメントを意味します。致命的なxVの参照カウントが減らされる実際の決定要因は、SAVETMPSとFREETMPSの2つのマクロによって異なります。参照&lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;と&lt;a href=&quot;perlxs&quot;&gt;perlxsを&lt;/a&gt;これらのマクロの詳細については。</target>
        </trans-unit>
        <trans-unit id="34b9699f0d3b28a88deb2c4c365035a0647ae160" translate="yes" xml:space="preserve">
          <source>There are some difficulties in using the tied hash interface if you want to manipulate a BTREE database with duplicate keys. Consider this code:</source>
          <target state="translated">重複したキーを持つ BTREE データベースを操作したい場合には、タイドハッシュインターフェイスを使用することにはいくつかの困難があります。以下のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="c652dbfd06883d908b23bc1bfea111a0463399a9" translate="yes" xml:space="preserve">
          <source>There are some drawbacks to this approach. One is that any extension which calls any file-manipulating C function will need to be recompiled (just follow the usual &quot;perl Makefile.PL; make; make test; make install&quot; procedure).</source>
          <target state="translated">この方法にはいくつかの欠点があります。一つは、ファイルを操作する C 関数を呼び出す拡張モジュールは、再コンパイルが必要になることです (通常の &quot;perl Makefile.PL;make;make;make test;make install&quot; の手順に従ってください)。</target>
        </trans-unit>
        <trans-unit id="0b359481d6fbdc6a6a4b31621c42bd37e3d7940e" translate="yes" xml:space="preserve">
          <source>There are some obvious disadvantages with this technique.</source>
          <target state="translated">この手法には明らかなデメリットがあります。</target>
        </trans-unit>
        <trans-unit id="5ca89f8811d4cbda81105708f26c4da2bc407dd8" translate="yes" xml:space="preserve">
          <source>There are some optional options you can pass to &lt;code&gt;memoize&lt;/code&gt; to change the way it behaves a little. To supply options, invoke &lt;code&gt;memoize&lt;/code&gt; like this:</source>
          <target state="translated">少し動作を変更するために &lt;code&gt;memoize&lt;/code&gt; するために渡すことができるオプションのオプションがいくつかあります。オプションを提供するには、 &lt;code&gt;memoize&lt;/code&gt; ようにmemoizeを呼び出します。</target>
        </trans-unit>
        <trans-unit id="362784bb7e407303367ae06c7f4d21b101719adc" translate="yes" xml:space="preserve">
          <source>There are some shortcuts for oneliners; see &lt;a href=&quot;perlrun#-C-%5bnumber%2flist%5d&quot;&gt;-C&lt;/a&gt; in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;.</source>
          <target state="translated">ワンライナーにはいくつかのショートカットがあります。&lt;a href=&quot;perlrun&quot;&gt;perlrunの&lt;/a&gt;&lt;a href=&quot;perlrun#-C-%5bnumber%2flist%5d&quot;&gt;-C&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="eb6709b6148bb02040a39a95e98f282835dfc33f" translate="yes" xml:space="preserve">
          <source>There are some warnings with respect to malformed hyperlinks:</source>
          <target state="translated">不正なハイパーリンクに関していくつかの警告があります。</target>
        </trans-unit>
        <trans-unit id="ce8df6ad608907441859c0c720df59bd6834bb9d" translate="yes" xml:space="preserve">
          <source>There are still many places where Unicode (in some encoding or another) could be given as arguments or received as results, or both in Perl, but it is not, in spite of Perl having extensive ways to input and output in Unicode, and a few other &quot;entry points&quot; like the &lt;code&gt;@ARGV&lt;/code&gt; array (which can sometimes be interpreted as UTF-8).</source>
          <target state="translated">Unicodeを引数として与えたり、結果として受け取ったり、Perlで受け取ることができる場所はまだたくさんありますが、PerlがUnicodeで入出力するための広範な方法を持っているにもかかわらず、そうではありません。 &lt;code&gt;@ARGV&lt;/code&gt; 配列（UTF-8として解釈される場合がある）のような他のいくつかの「エントリポイント」。</target>
        </trans-unit>
        <trans-unit id="59db2905dffb1315acaf3a1dc211ceadeec4d5cb" translate="yes" xml:space="preserve">
          <source>There are three Command Line flags that can be used to control when warnings are (or aren't) produced:</source>
          <target state="translated">3 つのコマンドラインフラグがあり、警告を出す (または出さない)タイミングを制御するために使用できます。</target>
        </trans-unit>
        <trans-unit id="10489a4543147a152f672e9c6f67f2c24de29afb" translate="yes" xml:space="preserve">
          <source>There are three basic ways of running external commands:</source>
          <target state="translated">外部コマンドの基本的な実行方法は3つあります。</target>
        </trans-unit>
        <trans-unit id="ee1484d5257f2915d554120f4ce6bfb497ce1d27" translate="yes" xml:space="preserve">
          <source>There are three basic ways that you can structure a threaded program. Which model you choose depends on what you need your program to do. For many non-trivial threaded programs, you'll need to choose different models for different pieces of your program.</source>
          <target state="translated">スレッド型プログラムを構成するには、3つの基本的な方法があります。どのモデルを選択するかは、プログラムが何をする必要があるかによって異なります。多くの非自明なスレッド型プログラムでは、プログラムのピースごとに異なるモデルを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="7fc3fd61896b5d12698d6fdcfdceea06c9dc86a3" translate="yes" xml:space="preserve">
          <source>There are three distinct concepts of &quot;next&quot; in the regex engine, and it is important to keep them clear.</source>
          <target state="translated">正規表現エンジンには、&quot;next &quot;という3つの明確な概念があり、それらを明確にしておくことが重要です。</target>
        </trans-unit>
        <trans-unit id="95aff53d816fd931550c2a4895fd2449f30b17c2" translate="yes" xml:space="preserve">
          <source>There are three popular ways to avoid this overhead. One solution involves running the Apache HTTP server (available from &lt;a href=&quot;http://www.apache.org/&quot;&gt;http://www.apache.org/&lt;/a&gt; ) with either of the mod_perl or mod_fastcgi plugin modules.</source>
          <target state="translated">このオーバーヘッドを回避するには、3つの一般的な方法があります。1つの解決策は、Apache HTTPサーバー（&lt;a href=&quot;http://www.apache.org/&quot;&gt;http://www.apache.org/&lt;/a&gt;から入手可能）をmod_perlまたはmod_fastcgiプラグインモジュールのいずれかで実行することです。</target>
        </trans-unit>
        <trans-unit id="99df9d7a05fef99c9f9af3d138353a09ea2aa37e" translate="yes" xml:space="preserve">
          <source>There are three types of character classes in Perl regular expressions: the dot, backslash sequences, and the form enclosed in square brackets. Keep in mind, though, that often the term &quot;character class&quot; is used to mean just the bracketed form. Certainly, most Perl documentation does that.</source>
          <target state="translated">Perl の正規表現には、ドット、バックスラッシュ、角括弧で囲まれた形の 3 種類の文字クラスがあります。しかし、しばしば「文字クラス」という用語は、括弧で囲まれた形だけを意味するために使われることがあることに注意してください。確かに、ほとんどのPerlのドキュメントではそのようになっています。</target>
        </trans-unit>
        <trans-unit id="a78a1c3edbdc828e2c5469275355a4d4c1a4e525" translate="yes" xml:space="preserve">
          <source>There are three ways to do this. First, the easy but inefficient way, which is also the default, in order to maintain source compatibility with extensions: whenever</source>
          <target state="translated">これには3つの方法があります。まず、簡単ではありますが非効率的な方法で、これはデフォルトでもあります。</target>
        </trans-unit>
        <trans-unit id="7d88ffa178365fa0703151483456030669a9d8af" translate="yes" xml:space="preserve">
          <source>There are three ways to write a test in the core: &lt;a href=&quot;test/more&quot;&gt;Test::More&lt;/a&gt;,</source>
          <target state="translated">コアでテストを書く方法は3つあります：&lt;a href=&quot;test/more&quot;&gt;Test :: More&lt;/a&gt;、</target>
        </trans-unit>
        <trans-unit id="1233ca5594cc5aa5bc69145748e72c13824fb763" translate="yes" xml:space="preserve">
          <source>There are three ways to write your own source filter. You can write it in C, use an external program as a filter, or write the filter in Perl. I won't cover the first two in any great detail, so I'll get them out of the way first. Writing the filter in Perl is most convenient, so I'll devote the most space to it.</source>
          <target state="translated">自作のソースフィルタを書くには3つの方法があります。C で書く方法、外部プログラムをフィルタとして使う方法、Perl で書く方法です。前者の二つについては詳しくは触れませんので、先に説明しておきます。Perl で書くのが一番便利なので、ここでは割愛します。</target>
        </trans-unit>
        <trans-unit id="4d1ca307ab6382d572650b48515269fd5ebc805c" translate="yes" xml:space="preserve">
          <source>There are times when you may find it useful to have a thread explicitly give up the CPU to another thread. You may be doing something processor-intensive and want to make sure that the user-interface thread gets called frequently. Regardless, there are times that you might want a thread to give up the processor.</source>
          <target state="translated">スレッドが明示的に他のスレッドにCPUを譲ることが便利な場合もあるでしょう。例えば、プロセッサ集約的な処理を行っていて、ユーザーインターフェースのスレッドが頻繁に呼び出されるようにしたい場合などです。いずれにしても、スレッドがプロセッサを放棄したい場合もあるでしょう。</target>
        </trans-unit>
        <trans-unit id="aabf4548dd9ce503cb7793127ff7d0d6ca4a9258" translate="yes" xml:space="preserve">
          <source>There are two basic modes of operation (plus turning if off):</source>
          <target state="translated">基本的な動作モードは2つあります(プラスオフの場合はターン)。</target>
        </trans-unit>
        <trans-unit id="53b9f0a36cbfc725453b6b4804987d2d7a53bc2c" translate="yes" xml:space="preserve">
          <source>There are two callbacks, &lt;code&gt;named_buff&lt;/code&gt; is called in all the cases the FETCH, STORE, DELETE, CLEAR, EXISTS and SCALAR &lt;a href=&quot;tie/hash&quot;&gt;Tie::Hash&lt;/a&gt; callbacks would be on changes to &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%-&lt;/code&gt; and &lt;code&gt;named_buff_iter&lt;/code&gt; in the same cases as FIRSTKEY and NEXTKEY.</source>
          <target state="translated">2つのコールバックがあり、 &lt;code&gt;named_buff&lt;/code&gt; は、FETCH、STORE、DELETE、CLEAR、EXISTSおよびSCALAR &lt;a href=&quot;tie/hash&quot;&gt;Tie :: Hash&lt;/a&gt;コールバックがFIRSTKEYおよびNEXTKEYと同じケースで &lt;code&gt;%+&lt;/code&gt; および &lt;code&gt;%-&lt;/code&gt; と &lt;code&gt;named_buff_iter&lt;/code&gt; への変更のすべてのケースで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="85a26ce9bc0772a2a092df698289266d1f10ecae" translate="yes" xml:space="preserve">
          <source>There are two cases, multi-byte and single-byte locales. First multi-byte:</source>
          <target state="translated">ロケールには、マルチバイトとシングルバイトの2つのケースがあります。まずマルチバイト。</target>
        </trans-unit>
        <trans-unit id="3f6e50ca71fb9ef8a58634080d592b643d6be431" translate="yes" xml:space="preserve">
          <source>There are two cases:</source>
          <target state="translated">2つのケースがあります。</target>
        </trans-unit>
        <trans-unit id="c07255028b3b5bd9a90385fc5c125ed8062cb54e" translate="yes" xml:space="preserve">
          <source>There are two commonly used techniques of profiling executables:</source>
          <target state="translated">実行ファイルのプロファイリングには、一般的に使用されている2つのテクニックがあります。</target>
        </trans-unit>
        <trans-unit id="4918f14b7918995ede690de784e45ce5b334a99c" translate="yes" xml:space="preserve">
          <source>There are two distinctive features of the dyna-linking model of OS/2: first, all the references to external functions are resolved at the compile time; second, there is no runtime fixup of the DLLs after they are loaded into memory. The first feature is an enormous advantage over other models: it avoids conflicts when several DLLs used by an application export entries with the same name. In such cases &quot;other&quot; models of dyna-linking just choose between these two entry points using some random criterion - with predictable disasters as results. But it is the second feature which requires the build of</source>
          <target state="translated">第一に、外部関数への参照がすべてコンパイル時に解決されること、第二に、メモリにロードされた後のDLLの実行時の修正がないことです。最初の機能は、他のモデルに比べて非常に大きな利点があります:アプリケーションが使用するいくつかのDLLが同じ名前のエントリをエクスポートするときの競合を回避します。このような場合、ダイナリンクの「他の」モデルは、ランダムな基準を使用して、これら2つのエントリーポイントの間で選択するだけです。しかし、これは</target>
        </trans-unit>
        <trans-unit id="b851bdf3c81b8784e2dddc6e20b8e6c18978a571" translate="yes" xml:space="preserve">
          <source>There are two exit points from the inner uncompression loop.</source>
          <target state="translated">内側の非圧縮ループからの出口は2箇所あります。</target>
        </trans-unit>
        <trans-unit id="108b59b47c97316f062b5266aff655788506a06e" translate="yes" xml:space="preserve">
          <source>There are two forms of octal escapes. Each is used to specify a character by its code point specified in octal notation.</source>
          <target state="translated">八進数エスケープには2つの形式があります。それぞれ、8進数表記で指定されたコードポイントで文字を指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="172fa4a9b4de533e56c4707adea17699b11d4a1b" translate="yes" xml:space="preserve">
          <source>There are two important points to remember:</source>
          <target state="translated">重要なポイントは2つあります。</target>
        </trans-unit>
        <trans-unit id="ef6d3355d6294c0400eecec7ab06563e8c2ddc8b" translate="yes" xml:space="preserve">
          <source>There are two keys with a special meaning in the hash: &quot;read&quot; and &quot;write&quot;. These contain packlist files. After the copying is done, install() will write the list of target files to $from_to{write}. If $from_to{read} is given the contents of this file will be merged into the written file. The read and the written file may be identical, but on AFS it is quite likely that people are installing to a different directory than the one where the files later appear.</source>
          <target state="translated">ハッシュには特別な意味を持つ2つのキーがあります。&quot;read&quot; と &quot;write&quot; です。これらにはパックリストファイルが含まれています。コピーが行われた後、install()は対象のファイルのリストを $from_to{write}に書き込みます。from_to{read}を指定すると、このファイルの内容が書き込まれたファイルにマージされます。読み込んだファイルと書き込んだファイルは同じかもしれませんが、AFS では、後にファイルが表示されるディレクトリとは別のディレクトリにインストールしている可能性が高いでしょう。</target>
        </trans-unit>
        <trans-unit id="f06480546f8f7593dd6ae9d9e44d7bf0995b966a" translate="yes" xml:space="preserve">
          <source>There are two new display parameters.</source>
          <target state="translated">新たに2つの表示パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="3c86f1c0ffd1daa198d3368c1af9e850c8735019" translate="yes" xml:space="preserve">
          <source>There are two operands, but no operator giving how you want to combine them.</source>
          <target state="translated">2つのオペランドがありますが、それらをどのように組み合わせるかを指定する演算子はありません。</target>
        </trans-unit>
        <trans-unit id="24dc61084886e44e27660b4a97166077845b5c95" translate="yes" xml:space="preserve">
          <source>There are two package separators in Perl: A double colon (&lt;code&gt;::&lt;/code&gt; ) and a single quote (&lt;code&gt;'&lt;/code&gt;). Normal identifiers can start or end with a double colon, and can contain several parts delimited by double colons. Single quotes have similar rules, but with the exception that they are not legal at the end of an identifier: That is, &lt;code&gt;$'foo&lt;/code&gt; and &lt;code&gt;$foo'bar&lt;/code&gt; are legal, but &lt;code&gt;$foo'bar'&lt;/code&gt; is not.</source>
          <target state="translated">Perlには2つのパッケージ区切り文字があります。二重コロン（ &lt;code&gt;::&lt;/code&gt; :）と単一引用符（ &lt;code&gt;'&lt;/code&gt; ）です。通常の識別子は、ダブルコロンで開始または終了でき、ダブルコロンで区切られた複数の部分を含むことができます。単一引用符も同様のルールを持っていますが、識別子の末尾では無効であるという例外があります。つまり、 &lt;code&gt;$'foo&lt;/code&gt; と &lt;code&gt;$foo'bar&lt;/code&gt; は有効ですが、 &lt;code&gt;$foo'bar'&lt;/code&gt; は無効です。</target>
        </trans-unit>
        <trans-unit id="75895a5372bf6c78e51cf652a3ae78bb3d9b2367" translate="yes" xml:space="preserve">
          <source>There are two principal conventions (it is useful to call them &lt;code&gt;Dos*&lt;/code&gt; and &lt;code&gt;Win*&lt;/code&gt; - though this part of the function signature is not always determined by the name of the API) of reporting the error conditions of OS/2 API. Most of &lt;code&gt;Dos*&lt;/code&gt; APIs report the error code as the result of the call (so 0 means success, and there are many types of errors). Most of &lt;code&gt;Win*&lt;/code&gt; API report success/fail via the result being &lt;code&gt;TRUE&lt;/code&gt; /&lt;code&gt;FALSE&lt;/code&gt; ; to find the reason for the failure one should call WinGetLastError() API.</source>
          <target state="translated">OS / 2 APIのエラー状態を報告するには、2つの主要な規則があります（ &lt;code&gt;Dos*&lt;/code&gt; や &lt;code&gt;Win*&lt;/code&gt; *と呼ぶと便利です。ただし、関数シグネチャのこの部分は常にAPIの名前で決まるわけではありません）。ほとんどの &lt;code&gt;Dos*&lt;/code&gt; APIは、呼び出しの結果としてエラーコードを報告します（0は成功を意味し、多くの種類のエラーがあります）。 &lt;code&gt;Win*&lt;/code&gt; APIのほとんどは、結果が &lt;code&gt;TRUE&lt;/code&gt; / &lt;code&gt;FALSE&lt;/code&gt; であることを介して成功/失敗を報告します。失敗の理由を見つけるには、WinGetLastError（）APIを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="87b7ddfa19fa0f3f3b716199a0f4db35df4687cb" translate="yes" xml:space="preserve">
          <source>There are two steps to running the test suite:</source>
          <target state="translated">テストスイートを実行するには、2つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="5595b4165f441d44d1cb7724594811d46925edfc" translate="yes" xml:space="preserve">
          <source>There are two structures used to store a compiled regular expression. One, the &lt;code&gt;regexp&lt;/code&gt; structure described in &lt;a href=&quot;perlreapi&quot;&gt;perlreapi&lt;/a&gt; is populated by the engine currently being. used and some of its fields read by perl to implement things such as the stringification of &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンパイルされた正規表現を格納するために使用される2つの構造があります。1つは、&lt;a href=&quot;perlreapi&quot;&gt;perlreapiに&lt;/a&gt;記述されている &lt;code&gt;regexp&lt;/code&gt; 構造が、現在存在しているエンジンによって入力されます。 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 文字列化などを実装するためにperlが使用するフィールドとその一部が読み込まれます。</target>
        </trans-unit>
        <trans-unit id="fc2fe23c780ba1b117d60c962e46037021ac3aa2" translate="yes" xml:space="preserve">
          <source>There are two syntaxes for formatting codes:</source>
          <target state="translated">コードの書式設定には2つの構文があります。</target>
        </trans-unit>
        <trans-unit id="7371ec3e37b63adab8d04f7c4222af55c486c054" translate="yes" xml:space="preserve">
          <source>There are two that I can think off.</source>
          <target state="translated">思い当たることが2つあります。</target>
        </trans-unit>
        <trans-unit id="6d886c39930696ad6e408c59f68366994aaac004" translate="yes" xml:space="preserve">
          <source>There are two ways to build persistent private variables in Perl 5.10. First, you can simply use the &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; feature. Or, you can use closures, if you want to stay compatible with releases older than 5.10.</source>
          <target state="translated">Perl 5.10で永続的なプライベート変数を構築するには2つの方法があります。まず、単純に &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 機能を使用できます。または、5.10より前のリリースとの互換性を維持したい場合は、クロージャーを使用できます。</target>
        </trans-unit>
        <trans-unit id="6c7079fb330c8f6fcf4a67d7d60f1f7e8ba9c961" translate="yes" xml:space="preserve">
          <source>There are two ways to create and load an AV. The first method creates an empty AV:</source>
          <target state="translated">AV を作成して読み込むには 2 つの方法があります。1つ目の方法は空のAVを作成します。</target>
        </trans-unit>
        <trans-unit id="48bc33b0558cf40893cd4b6a9aee4a0aeea211f9" translate="yes" xml:space="preserve">
          <source>There are two ways to enable debugging output for regular expressions.</source>
          <target state="translated">正規表現のデバッグ出力を有効にするには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="ad6ac5b22382be34f18ee4c2a153755024871b3a" translate="yes" xml:space="preserve">
          <source>There are two ways to load the &lt;code&gt;feature&lt;/code&gt; pragma implicitly:</source>
          <target state="translated">&lt;code&gt;feature&lt;/code&gt; プラグマを暗黙的にロードするには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="f214eee3e697782835e9e4f8a448217e9a53a985" translate="yes" xml:space="preserve">
          <source>There are two ways to use Cocoa from Perl. Apple's PerlObjCBridge module, included with Mac OS X, can be used by standalone scripts to access Foundation (i.e. non-GUI) classes and objects.</source>
          <target state="translated">Perl から Cocoa を使用するには 2 つの方法があります。Mac OS X に含まれる Apple の PerlObjCBridge モジュールは、スタンドアロンスクリプトで Foundation (すなわち非 GUI)クラスやオブジェクトにアクセスするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="409a8226f327930f82376970d0a5dd5d41e49fa0" translate="yes" xml:space="preserve">
          <source>There are undoubtedly serious bugs lurking somewhere in code this funky :-) Bug reports and other feedback are most welcome.</source>
          <target state="translated">このファンキーなコードのどこかに深刻なバグが潜んでいることは間違いありません。)バグ報告やその他のフィードバックは大歓迎です。</target>
        </trans-unit>
        <trans-unit id="85be9b959b2e4ac88632b966dc97bb4a96c09ffb" translate="yes" xml:space="preserve">
          <source>There are undoubtedly serious bugs lurking somewhere in this code, if only because parts of it give the impression of understanding a great deal more about Perl than they really do.</source>
          <target state="translated">このコードのどこかに深刻なバグが潜んでいるのは間違いありません。</target>
        </trans-unit>
        <trans-unit id="04b3f04345fdb786670dce0b2cea7b0b8304663e" translate="yes" xml:space="preserve">
          <source>There are useful variations on this theme. The sense of the match can be reversed by using the &lt;code&gt;!~&lt;/code&gt; operator:</source>
          <target state="translated">このテーマには便利なバリエーションがあります。 &lt;code&gt;!~&lt;/code&gt; 演算子を使用して、一致の意味を逆にすることができます。</target>
        </trans-unit>
        <trans-unit id="ae9efcf4d71ac56a124108c21d7833f5bea0582a" translate="yes" xml:space="preserve">
          <source>There are usually several synonyms for each possible value. Use &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; to access those.</source>
          <target state="translated">通常、可能な値ごとにいくつかの同義語があります。それらにアクセスするには、&lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases（）&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="defaf951c93d8c59c8e8c2838dbcdfdd9abafeeb" translate="yes" xml:space="preserve">
          <source>There are usually three or four interval timers (signals) available: the &lt;code&gt;$which&lt;/code&gt; can be &lt;code&gt;ITIMER_REAL&lt;/code&gt; , &lt;code&gt;ITIMER_VIRTUAL&lt;/code&gt; , &lt;code&gt;ITIMER_PROF&lt;/code&gt; , or &lt;code&gt;ITIMER_REALPROF&lt;/code&gt; . Note that which ones are available depends: true UNIX platforms usually have the first three, but only Solaris seems to have &lt;code&gt;ITIMER_REALPROF&lt;/code&gt; (which is used to profile multithreaded programs). Win32 unfortunately does not have interval timers.</source>
          <target state="translated">：使用可能な3つのまたは4つのインターバルタイマー（信号）は通常あります &lt;code&gt;$which&lt;/code&gt; することができ &lt;code&gt;ITIMER_REAL&lt;/code&gt; を、 &lt;code&gt;ITIMER_VIRTUAL&lt;/code&gt; 、 &lt;code&gt;ITIMER_PROF&lt;/code&gt; 、または &lt;code&gt;ITIMER_REALPROF&lt;/code&gt; が。どちらが利用可能であるかは異なります。真のUNIXプラットフォームには通常最初の3つがありますが、Solarisだけが &lt;code&gt;ITIMER_REALPROF&lt;/code&gt; （マルチスレッドプログラムのプロファイルに使用される）を持っているようです。Win32には残念ながらインターバルタイマーがありません。</target>
        </trans-unit>
        <trans-unit id="0d22a105cc916ea14dd34be71dc22f4c1bb3fd7e" translate="yes" xml:space="preserve">
          <source>There are various aspects of the pattern that can be used to facilitate optimisations along these lines:</source>
          <target state="translated">パターンには、これらのラインに沿った最適化を容易にするために使用できる様々な側面があります。</target>
        </trans-unit>
        <trans-unit id="e3cedfe60646d2e7422ff8b2a7a07f8c037537db" translate="yes" xml:space="preserve">
          <source>There are various other failures, that as of SunOS 4.1.4 and gcc 3.2.2 look a lot like gcc bugs. Many of the failures happen in the Encode tests, where for example when the test expects &quot;0&quot; you get &quot;&amp;amp;#48;&quot; which should after a little squinting look very odd indeed. Another example is earlier in</source>
          <target state="translated">その他にもさまざまな障害があり、SunOS 4.1.4およびgcc 3.2.2の時点では、gccのバグによく似ています。失敗の多くは、エンコードテストで発生します。たとえば、テストで「0」が予期される場合、「＆＃48;」が返されます。少し目を細めると、非常に奇妙に見えるはずです。別の例は、</target>
        </trans-unit>
        <trans-unit id="e93c51ec114e78593d3350d4739a1d10d41d678a" translate="yes" xml:space="preserve">
          <source>There are various other synonyms that can be used besides the names listed in the table. For example, &lt;code&gt;\p{PosixAlpha}&lt;/code&gt; can be written as &lt;code&gt;\p{Alpha}&lt;/code&gt; . All are listed in &lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;Properties accessible through \p{} and \P{} in perluniprops&lt;/a&gt;.</source>
          <target state="translated">表にリストされている名前以外にも、使用できるさまざまな同義語があります。たとえば、 &lt;code&gt;\p{PosixAlpha}&lt;/code&gt; は &lt;code&gt;\p{Alpha}&lt;/code&gt; と書くことができます。すべては&lt;a href=&quot;perluniprops#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;、perlunipropsの\ p {}および\ P {}を介してアクセス可能なプロパティに&lt;/a&gt;リストされています。</target>
        </trans-unit>
        <trans-unit id="20fb423bc3be57a7bce8d37147a935d047431e3f" translate="yes" xml:space="preserve">
          <source>There are various special make targets that can be used to test Perl slightly differently than the standard &quot;test&quot; target. Not all them are expected to give a 100% success rate. Many of them have several aliases, and many of them are not available on certain operating systems.</source>
          <target state="translated">標準の &quot;test &quot;ターゲットとは少し違った方法で Perl をテストするための様々な特別な make ターゲットがあります。すべてのターゲットが 100% の成功率を期待できるわけではありません。これらのターゲットの多くは複数のエイリアスを持っており、特定のオペレーティングシステムでは利用できないものもあります。</target>
        </trans-unit>
        <trans-unit id="7a37b656849e5abe23739ebb1083bad00e7235fc" translate="yes" xml:space="preserve">
          <source>There are various syntaxes, listed below. In the syntaxes given, &lt;code&gt;text&lt;/code&gt; , &lt;code&gt;name&lt;/code&gt; , and &lt;code&gt;section&lt;/code&gt; cannot contain the characters '/' and '|'; and any '&amp;lt;' or '&amp;gt;' should be matched.</source>
          <target state="translated">以下に示すように、さまざまな構文があります。指定された構文では、 &lt;code&gt;text&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、および &lt;code&gt;section&lt;/code&gt; に文字「/」および「|」を含めることはできません。また、「&amp;lt;」または「&amp;gt;」はすべて一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="d37ed54ad4b4e800cd45604ce3c3818f96427db4" translate="yes" xml:space="preserve">
          <source>There are various things to note:</source>
          <target state="translated">注意すべき点はいろいろあります。</target>
        </trans-unit>
        <trans-unit id="b76fc3582c89676c08603c7aa65b9cc5c9b6bcec" translate="yes" xml:space="preserve">
          <source>There are various ways in which the private and public flags may differ. For example, in perl 5.16 and earlier a tied SV may have a valid underlying value in the IV slot (so SvIOKp is true), but the data should be accessed via the FETCH routine rather than directly, so SvIOK is false. (In perl 5.18 onwards, tied scalars use the flags the same way as untied scalars.) Another is when numeric conversion has occurred and precision has been lost: only the private flag is set on 'lossy' values. So when an NV is converted to an IV with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.</source>
          <target state="translated">プライベートフラグとパブリックフラグの違いには様々な方法があります。例えば、Perl 5.16以前のバージョンでは、紐付けられたSVはIVスロットに有効な値を持っているかもしれませんが(SvIOKpは真です)、そのデータは直接ではなくFETCHルーチンを介してアクセスされなければならないので、SvIOKは偽になります。(Perl 5.18以降では、紐付きスカラは紐なしスカラと同じようにフラグを使用します)。もう一つは、数値変換が行われて精度が失われた場合です。つまり,NVが損失を伴うIVに変換された場合,SvIOKp,SvNOKp,SvNOKが設定されますが,SvIOKは設定されません.</target>
        </trans-unit>
        <trans-unit id="bf9b799d87e5a86957d5b5b84b03a08b714f7c53" translate="yes" xml:space="preserve">
          <source>There are web archives of the mailing list at:</source>
          <target state="translated">メーリングリストのウェブアーカイブがあります。</target>
        </trans-unit>
        <trans-unit id="35625b0405457bfbc71b97ae568ca975b4ffb8db" translate="yes" xml:space="preserve">
          <source>There aren't currently any real UTF-8 locales, even though some locale names contain the string &quot;UTF-8&quot;.</source>
          <target state="translated">ロケール名の中には &quot;UTF-8&quot; という文字列が含まれているものもありますが、実際の UTF-8 ロケールは現在のところ存在しません。</target>
        </trans-unit>
        <trans-unit id="afc581d54ed5726e14da03dd8d1af5cdf478d3d5" translate="yes" xml:space="preserve">
          <source>There can be whitespace between the operator and the quoting characters, except when &lt;code&gt;#&lt;/code&gt; is being used as the quoting character. &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q#foo#&lt;/a&gt;&lt;/code&gt; is parsed as the string &lt;code&gt;foo&lt;/code&gt; , while &lt;code&gt;q #foo#&lt;/code&gt; is the operator &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; followed by a comment. Its argument will be taken from the next line. This allows you to write:</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; が引用文字として使用されている場合を除き、演算子と引用文字の間に空白があってもかまいません。 &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q#foo#&lt;/a&gt;&lt;/code&gt; 文字列として解析され &lt;code&gt;foo&lt;/code&gt; ながら、 &lt;code&gt;q #foo#&lt;/code&gt; オペレータである &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; コメントが続きます。その引数は次の行から取得されます。これはあなたが書くことを可能にします：</target>
        </trans-unit>
        <trans-unit id="7f8e18aa50aec43fc98b47477339b319d9bf73e8" translate="yes" xml:space="preserve">
          <source>There does not need to be whitespace at the start of the &quot;&lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; input&lt;/code&gt; &quot; line, but it is useful for improving readability. Placing a semi-colon at the end of that line is also optional. Any amount and kind of whitespace may be placed between the &quot;&lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt;&quot; and &quot;&lt;code&gt;input&lt;/code&gt; &quot;.</source>
          <target state="translated">「 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; input&lt;/code&gt; 」行の先頭に空白を置く必要はありませんが、読みやすさを向上させるのに役立ちます。その行の最後にセミコロンを配置することもオプションです。「 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; 」と「 &lt;code&gt;input&lt;/code&gt; 」の間には、任意の量および種類の空白を配置できます。</target>
        </trans-unit>
        <trans-unit id="674ce7b791aca3a84e36e5ed443e53056266d194" translate="yes" xml:space="preserve">
          <source>There exists a port of Perl to the ILE environment. This port, however, is based quite an old release of Perl, Perl 5.00502 (August 1998). (As of July 2002 the latest release of Perl is 5.8.0, and even 5.6.1 has been out since April 2001.) If you need to run Perl on ILE, though, you may need this older port: &lt;a href=&quot;http://www.cpan.org/ports/#os400&quot;&gt;http://www.cpan.org/ports/#os400&lt;/a&gt; Note that any Perl release later than 5.00502 has not been ported to ILE.</source>
          <target state="translated">PerlのILE環境への移植が存在します。ただし、この移植は、Perlのかなり古いリリースであるPerl 5.00502（1998年8月）に基づいています。（2002年7月の時点で、Perlの最新リリースは5.8.0で、2001年4月以降は5.6.1もリリースされています。）ただし、ILEでPerlを実行する必要がある場合は、この古いポートが必要になる場合があります&lt;a href=&quot;http://www.cpan.org/ports/#os400&quot;&gt;。http：// www.cpan.org/ports/#os400 5.00502&lt;/a&gt;以降のPerlリリースはILEに移植されていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="10164fd98639a8c3044721a3ed9b1556ef825187" translate="yes" xml:space="preserve">
          <source>There is a &quot;hints&quot; file for BS2000 called hints.posix-bc (because posix-bc is the OS name given by `uname`) that specifies the correct values for most things. The major problem is (of course) the EBCDIC character set. We have german EBCDIC version.</source>
          <target state="translated">BS2000用の「ヒント」ファイルとしてhints.posix-BCというファイルがあります(posix-BCは`uname`で与えられたOS名なので)。大きな問題は (もちろん)EBCDIC 文字セットです。ドイツ語のEBCDIC版があります。</target>
        </trans-unit>
        <trans-unit id="5374f2f6990509e72c419ef45603ab27e3bc80da" translate="yes" xml:space="preserve">
          <source>There is a $diagnostics::DEBUG variable you may set if you're desperately curious what sorts of things are being intercepted.</source>
          <target state="translated">どのような種類のものが傍受されているのか必死に興味がある場合に設定することができる $diagnostics::DEBUG 変数があります。</target>
        </trans-unit>
        <trans-unit id="6a13bc3171b7f184b15ada467454c70823010717" translate="yes" xml:space="preserve">
          <source>There is a CPAN module, &lt;code&gt;&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Casing&quot;&gt;Unicode::Casing&lt;/a&gt;&lt;/code&gt;, which allows you to define your own mappings to be used in &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; (or their double-quoted string inlined versions such as &lt;code&gt;\U&lt;/code&gt; ). (Prior to Perl 5.16, this functionality was partially provided in the Perl core, but suffered from a number of insurmountable drawbacks, so the CPAN module was written instead.)</source>
          <target state="translated">CPANモジュール、 &lt;code&gt;&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Casing&quot;&gt;Unicode::Casing&lt;/a&gt;&lt;/code&gt; があります。これにより、 &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lcfirst&quot;&gt;lcfirst()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/uc&quot;&gt;uc()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/ucfirst&quot;&gt;ucfirst()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; （または二重引用符で囲まれた文字列のインラインバージョン）で使用する独自のマッピングを定義できます &lt;code&gt;\U&lt;/code&gt; など）。（Perl 5.16以前は、この機能はPerlコアで部分的に提供されていましたが、克服できない多くの欠点があったため、代わりにCPANモジュールが作成されました。）</target>
        </trans-unit>
        <trans-unit id="c5d3a875427fdf261fbe25e4b0c804d418f70748" translate="yes" xml:space="preserve">
          <source>There is a Clone module available on CPAN which implements deep cloning natively, i.e. without freezing to memory and thawing the result. It is aimed to replace Storable's dclone() some day. However, it does not currently support Storable hooks to redefine the way deep cloning is performed.</source>
          <target state="translated">CPAN上で利用可能なCloneモジュールがあります。これはディープクローニングをネイティブに実装しています。これはStorableのdclone()をいつか置き換えることを目指しています。しかし、現在のところ、ディープクローニングの実行方法を再定義するための Storable フックはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="d1abe7c402c9589925c2fd5cdd3fc7738d6e503b" translate="yes" xml:space="preserve">
          <source>There is a Perl interface to TrollTech's Qt toolkit, but it does not appear to be maintained.</source>
          <target state="translated">TrollTechのQtツールキットへのPerlインターフェイスがありますが、メンテナンスされていないようです。</target>
        </trans-unit>
        <trans-unit id="2368d7b8dd55271d773f21a14ae9eb87cfb16560" translate="yes" xml:space="preserve">
          <source>There is a bug in perl5.6.0 with UV's that are &amp;gt;= 1&amp;lt;&amp;lt;31. This will show up as tests 8 and 9 of dualvar.t failing</source>
          <target state="translated">perl5.6.0には、UVが&amp;gt; = 1 &amp;lt;&amp;lt; 31のバグがあります。これは、dualvar.tのテスト8および9が失敗すると表示されます</target>
        </trans-unit>
        <trans-unit id="74ad132a2446bd3d40e9bf990b8f1b1aa2a313b3" translate="yes" xml:space="preserve">
          <source>There is a central directory for the Perl community: &lt;a href=&quot;http://perl.org&quot;&gt;http://perl.org&lt;/a&gt; maintained by the Perl Foundation (&lt;a href=&quot;http://www.perlfoundation.org/&quot;&gt;http://www.perlfoundation.org/&lt;/a&gt;), which tracks and provides services for a variety of other community sites.</source>
          <target state="translated">Perlコミュニティの中央ディレクトリがあり&lt;a href=&quot;http://www.perlfoundation.org/&quot;&gt;ます。http&lt;/a&gt;：&lt;a href=&quot;http://perl.org&quot;&gt;//perl.org&lt;/a&gt;はPerl Foundationによって管理されており（http://www.perlfoundation.org/）、他のさまざまなコミュニティサイトのサービスを追跡および提供します。</target>
        </trans-unit>
        <trans-unit id="b14e35e5c9ac344a8ff5825a4050f6c40c0d0c03" translate="yes" xml:space="preserve">
          <source>There is a class method in &lt;code&gt;PerlIO::Layer&lt;/code&gt;&lt;code&gt;find&lt;/code&gt; which is implemented as XS code. It is called by &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; to validate the layers:</source>
          <target state="translated">&lt;code&gt;PerlIO::Layer&lt;/code&gt; &lt;code&gt;find&lt;/code&gt; には、XSコードとして実装されるクラスメソッドがあります。レイヤーを検証するために &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="130b2ceadd9a5f49d4085944a7e2f2612f7d6b00" translate="yes" xml:space="preserve">
          <source>There is a facility called &quot;file extension associations&quot;. This can be manipulated via the two commands &quot;assoc&quot; and &quot;ftype&quot; that come standard with Windows. Type &quot;ftype /?&quot; for a complete example of how to set this up for perl scripts (Say what? You thought Windows wasn't perl-ready? :).</source>
          <target state="translated">ファイル拡張子の関連付け」という機能があります。これは、Windowsに標準装備されている &quot;assoc &quot;と &quot;ftype &quot;という2つのコマンドで操作することができます。これをperlスクリプトに設定する方法の完全な例は、&quot;ftype /? &quot;と入力してください(Windowsがperlに対応していないと思っていたのか?)</target>
        </trans-unit>
        <trans-unit id="56c8b0f7b0876f90abc844b5aa213cd2600b5f4e" translate="yes" xml:space="preserve">
          <source>There is a fairly obvious gotcha included with the line directive: Debuggers and profilers will only show the last source line to appear at a particular line number in a given file. Care should be taken not to cause line number collisions in code you'd like to debug later.</source>
          <target state="translated">line ディレクティブには、かなり明白な誤魔化しがあります。デバッガやプロファイラは、与えられたファイルの特定の行番号に現れる最後のソース行のみを表示します。後でデバッグしたいコードで行番号の衝突を起こさないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="bb9de8709414ce3be99387c65eb446322517dbc7" translate="yes" xml:space="preserve">
          <source>There is a full version history in the Changes file, and the Test::More versions included as core can be found using &lt;a href=&quot;../module/corelist&quot;&gt;Module::CoreList&lt;/a&gt;:</source>
          <target state="translated">Changesファイルには完全なバージョン履歴があり、コアとして含まれているTest :: Moreバージョンは&lt;a href=&quot;../module/corelist&quot;&gt;Module :: CoreList&lt;/a&gt;を使用して見つけることができます。</target>
        </trans-unit>
        <trans-unit id="8d8d363093d476f461ae875eb02ff5a19f7dc579" translate="yes" xml:space="preserve">
          <source>There is a functional programming API available for programmers to query information.</source>
          <target state="translated">プログラマが情報を照会するために利用できる機能的なプログラミングAPIがあります。</target>
        </trans-unit>
        <trans-unit id="2afd310e60a2687221eb36caee1877ab18ed5e49" translate="yes" xml:space="preserve">
          <source>There is a further complication with non-closure anonymous subs (i.e. those that do not refer to any lexicals outside that sub). In this case, the anonymous prototype is shared rather than being cloned. This has the consequence that the parent may be freed while there are still active children, eg</source>
          <target state="translated">非閉鎖匿名サブ(すなわち、そのサブの外のいかなる語彙をも参照しないサブ)には、さらに複雑な問題があります。この場合、匿名プロトタイプはクローンされるのではなく共有されます。これは、アクティブな子がまだ存在する間に親が解放される可能性があるという結果をもたらします。</target>
        </trans-unit>
        <trans-unit id="f36a7b0d4fbbd5ecb9f7c10c28ff43dbc8a0e2c1" translate="yes" xml:space="preserve">
          <source>There is a large collection of locale definitions at:</source>
          <target state="translated">ロケール定義の大規模なコレクションがあります。</target>
        </trans-unit>
        <trans-unit id="164a3c40b19ffea76d12a9ba083e8f9f3b80b6e7" translate="yes" xml:space="preserve">
          <source>There is a large memory overhead for each record offset and for each cache entry: about 310 bytes per cached data record, and about 21 bytes per offset table entry.</source>
          <target state="translated">各レコードオフセットと各キャッシュエントリのために大きなメモリオーバーヘッドがあり、キャッシュされたデータレコードあたり約310バイト、オフセットテーブルエントリあたり約21バイトです。</target>
        </trans-unit>
        <trans-unit id="6d613e26c7817a472a293f57a0848d067f1f9f1e" translate="yes" xml:space="preserve">
          <source>There is a lint variant called &lt;code&gt;splint&lt;/code&gt; (Secure Programming Lint) available from &lt;a href=&quot;http://www.splint.org/&quot;&gt;http://www.splint.org/&lt;/a&gt; that should compile on any Unix-like platform.</source>
          <target state="translated">Unixライクなプラットフォームでコンパイルできる、&lt;a href=&quot;http://www.splint.org/&quot;&gt;http：//www.splint.org/&lt;/a&gt;から入手可能な &lt;code&gt;splint&lt;/code&gt; （Secure Programming Lint）と呼ばれるlintバリアントがあります。</target>
        </trans-unit>
        <trans-unit id="50d5366c81be8e75e037c5167a3d288dd1f93227" translate="yes" xml:space="preserve">
          <source>There is a list &lt;code&gt;=item&lt;/code&gt; right above the flagged line that has no text contents. You probably want to delete empty items.</source>
          <target state="translated">フラグが設定された行のすぐ上に、テキストコンテンツのないリスト &lt;code&gt;=item&lt;/code&gt; があります。おそらく空のアイテムを削除したいでしょう。</target>
        </trans-unit>
        <trans-unit id="e52de09f7d095fa1c4329ee2a9ca8823bc2d60ff" translate="yes" xml:space="preserve">
          <source>There is a partial workaround (which can be made complete with newer OS/2 kernels): create a forwarder DLL with the same name as the DLL of the older version of Perl, which forwards the entry points to the newer Perl's DLL. Make this DLL accessible on (say) the &lt;code&gt;BEGINLIBPATH&lt;/code&gt; of the new Perl executable. When the new executable accesses old Perl's extension DLLs, they would request the old Perl's DLL by name, get the forwarder instead, so effectively will link with the currently running (new) Perl DLL.</source>
          <target state="translated">部分的な回避策があります（新しいOS / 2カーネルで完全にすることができます）：古いバージョンのPerlのDLLと同じ名前のフォワーダーDLLを作成し、エントリーポイントを新しいPerlのDLLに転送します。このDLLを（たとえば）新しいPerl実行可能ファイルの &lt;code&gt;BEGINLIBPATH&lt;/code&gt; でアクセスできるようにします。新しい実行可能ファイルが古いPerlの拡張DLLにアクセスすると、古いPerlのDLLを名前で要求し、代わりにフォワーダーを取得するため、現在実行中の（新しい）Perl DLLと効果的にリンクします。</target>
        </trans-unit>
        <trans-unit id="57ca9ff3bac6a75872d6256fe67ed0855ac24ebb" translate="yes" xml:space="preserve">
          <source>There is a potential syntactic ambiguity between signatures and prototypes (see &lt;a href=&quot;#Prototypes&quot;&gt;Prototypes&lt;/a&gt;), because both start with an opening parenthesis and both can appear in some of the same places, such as just after the name in a subroutine declaration. For historical reasons, when signatures are not enabled, any opening parenthesis in such a context will trigger very forgiving prototype parsing. Most signatures will be interpreted as prototypes in those circumstances, but won't be valid prototypes. (A valid prototype cannot contain any alphabetic character.) This will lead to somewhat confusing error messages.</source>
          <target state="translated">署名とプロトタイプ（&lt;a href=&quot;#Prototypes&quot;&gt;プロトタイプを&lt;/a&gt;参照）の間には、構文のあいまいさがある可能性があります。これは、どちらも開き括弧で始まり、サブルーチン宣言の名前の直後など、同じ場所に現れる可能性があるためです。歴史的な理由により、署名が有効になっていない場合、そのようなコンテキストでの左括弧は、非常に寛容なプロトタイプ解析をトリガーします。これらの状況では、ほとんどの署名がプロトタイプとして解釈されますが、有効なプロトタイプにはなりません。 （有効なプロトタイプにアルファベット文字を含めることはできません。）これにより、やや混乱するエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="d27354b37f9e6840bfd23c6a2efc0450a836df2f" translate="yes" xml:space="preserve">
          <source>There is a relationship between roles and classes, as each class implies the existence of a role of the same name. There is also a relationship between inheritance and roles, in that a subclass that inherits from an ancestor class implicitly performs any roles its parent performs. Thus you can use &lt;code&gt;DOES&lt;/code&gt; in place of &lt;code&gt;isa&lt;/code&gt; safely, as it will return true in all places where &lt;code&gt;isa&lt;/code&gt; will return true (provided that any overridden &lt;code&gt;DOES&lt;/code&gt;</source>
          <target state="translated">各クラスは同じ名前のロールの存在を暗示するため、ロールとクラスの間には関係があります。継承とロールの間にも関係があり、祖先クラスから継承したサブクラスは、親が実行するすべてのロールを暗黙的に実行します。したがって、 &lt;code&gt;isa&lt;/code&gt; がtrueを返すすべての場所でtrueを返すため、 &lt;code&gt;isa&lt;/code&gt; の代わりに &lt;code&gt;DOES&lt;/code&gt; を安全に使用できます（オーバーライドされた &lt;code&gt;DOES&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d92cff32e2893123d7b11efd15dfbc88dd3973f8" translate="yes" xml:space="preserve">
          <source>There is a rich ecosystem of &lt;code&gt;Moose&lt;/code&gt; extensions on CPAN under the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org%2fsearch%3fquery%3dMooseX%26mode%3ddist&quot;&gt;MooseX&lt;/a&gt; namespace. In addition, many modules on CPAN already use &lt;code&gt;Moose&lt;/code&gt; , providing you with lots of examples to learn from.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org%2fsearch%3fquery%3dMooseX%26mode%3ddist&quot;&gt;MooseX&lt;/a&gt;名前空間の下のCPANには、 &lt;code&gt;Moose&lt;/code&gt; 拡張機能の豊富なエコシステムがあります。さらに、CPANの多くのモジュールはすでに &lt;code&gt;Moose&lt;/code&gt; を使用しているため、多くの例を学ぶことができます。</target>
        </trans-unit>
        <trans-unit id="0db652ab14c5e9efe4a7bcfa81f503ee955d3fa8" translate="yes" xml:space="preserve">
          <source>There is a section detected in the page name of L&amp;lt;...&amp;gt;, e.g. &lt;code&gt;L&amp;lt;passwd(2)&amp;gt;&lt;/code&gt; . POD hyperlinks may point to POD documents only. Please write &lt;code&gt;C&amp;lt;passwd(2)&amp;gt;&lt;/code&gt; instead. Some formatters are able to expand this to appropriate code. For links to (builtin) functions, please say &lt;code&gt;L&amp;lt;perlfunc/mkdir&amp;gt;&lt;/code&gt; , without ().</source>
          <target state="translated">L &amp;lt;...&amp;gt;のページ名でセクションが検出されました &lt;code&gt;L&amp;lt;passwd(2)&amp;gt;&lt;/code&gt; 例：L &amp;lt;passwd（2）&amp;gt;）。 PODハイパーリンクは、PODドキュメントのみを指す場合があります。代わりに &lt;code&gt;C&amp;lt;passwd(2)&amp;gt;&lt;/code&gt; 記述してください。一部のフォーマッタは、これを適切なコードに拡張できます。 （組み込み）関数へのリンクについては、（）なしで &lt;code&gt;L&amp;lt;perlfunc/mkdir&amp;gt;&lt;/code&gt; と言ってください。</target>
        </trans-unit>
        <trans-unit id="00c1ae760ee79d8ac4a3185792db70643cfa006e" translate="yes" xml:space="preserve">
          <source>There is a single stash called &lt;code&gt;PL_defstash&lt;/code&gt; that holds the items that exist in the &lt;code&gt;main&lt;/code&gt; package. To get at the items in other packages, append the string &quot;::&quot; to the package name. The items in the &lt;code&gt;Foo&lt;/code&gt; package are in the stash &lt;code&gt;Foo::&lt;/code&gt; in PL_defstash. The items in the &lt;code&gt;Bar::Baz&lt;/code&gt; package are in the stash &lt;code&gt;Baz::&lt;/code&gt; in &lt;code&gt;Bar::&lt;/code&gt; 's stash.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; パッケージに存在するアイテムを保持する &lt;code&gt;PL_defstash&lt;/code&gt; と呼ばれる単一のスタッシュがあります。他のパッケージのアイテムを取得するには、文字列 &quot;::&quot;をパッケージ名に追加します。 &lt;code&gt;Foo&lt;/code&gt; パッケージのアイテムは、PL_defstashのstash &lt;code&gt;Foo::&lt;/code&gt; にあります。 &lt;code&gt;Bar::Baz&lt;/code&gt; パッケージのアイテムは、stash &lt;code&gt;Baz::&lt;/code&gt; in in &lt;code&gt;Bar::&lt;/code&gt; のstashにあります。</target>
        </trans-unit>
        <trans-unit id="410d21275559c0b069f15cf1ae78b078a451978c" translate="yes" xml:space="preserve">
          <source>There is a special form of this construct, called &lt;code&gt;\K&lt;/code&gt; (available since Perl 5.10.0), which causes the regex engine to &quot;keep&quot; everything it had matched prior to the &lt;code&gt;\K&lt;/code&gt; and not include it in &lt;code&gt;$&amp;amp;&lt;/code&gt; . This effectively provides variable-length look-behind. The use of &lt;code&gt;\K&lt;/code&gt; inside of another look-around assertion is allowed, but the behaviour is currently not well defined.</source>
          <target state="translated">この構成体には、 &lt;code&gt;\K&lt;/code&gt; （Perl 5.10.0以降で使用可能）と呼ばれる特別な形式があります。これにより、正規表現エンジンは &lt;code&gt;\K&lt;/code&gt; 前に一致したすべてのものを「保持」し、 &lt;code&gt;$&amp;amp;&lt;/code&gt; に含めません。これは事実上、可変長の後読みを提供します。別のルックアラウンドアサーション内での &lt;code&gt;\K&lt;/code&gt; の使用は許可されていますが、動作は現在十分に定義されていません。</target>
        </trans-unit>
        <trans-unit id="0599747d66099e132ad6b9e84b12be8636f0ae4e" translate="yes" xml:space="preserve">
          <source>There is a syntax error in the /usr/include/sys/socket.h header file that IBM supplies with USS V2R7, V2R8, and possibly V2R9. The problem with the header file is that near the definition of the SO_REUSEPORT constant there is a spurious extra '/' character outside of a comment like so:</source>
          <target state="translated">IBMがUSS V2R7、V2R8、場合によってはV2R9と一緒に提供している/usr/include/sys/socket.hヘッダファイルに構文エラーがあります。このヘッダーファイルの問題は、SO_REUSEPORT定数の定義の近くに、次のようなコメントの外側に不正な余分な'/'文字があることです。</target>
        </trans-unit>
        <trans-unit id="b527eadae01dab13ed85ec63c9837bc3c0c67bda" translate="yes" xml:space="preserve">
          <source>There is a tradeoff between taking full advantage of one particular type of computer and taking advantage of a full range of them. Naturally, as you broaden your range and become more diverse, the common factors drop, and you are left with an increasingly smaller area of common ground in which you can operate to accomplish a particular task. Thus, when you begin attacking a problem, it is important to consider under which part of the tradeoff curve you want to operate. Specifically, you must decide whether it is important that the task that you are coding has the full generality of being portable, or whether to just get the job done right now. This is the hardest choice to be made. The rest is easy, because Perl provides many choices, whichever way you want to approach your problem.</source>
          <target state="translated">1つの特定のタイプのコンピュータをフルに活用することと、それらのコンピュータをフルに活用することの間には、トレードオフがあります。当然のことながら、範囲を広げて多様化すればするほど、共通の要素は減少し、特定のタスクを達成するために操作できる共通の領域はますます狭くなります。したがって、問題に取り組み始める際には、トレードオフ曲線のどの部分で活動したいかを検討することが重要です。具体的には、コーディングしているタスクがポータブルであるという完全な汎用性を持っていることが重要なのか、それとも今すぐにでも仕事を終わらせることが重要なのかを判断しなければなりません。これが一番難しい選択です。Perl は多くの選択肢を提供しているので、あとは簡単です。</target>
        </trans-unit>
        <trans-unit id="8ea25b9abfe4373f567bc9679e7275e7fb164486" translate="yes" xml:space="preserve">
          <source>There is a utility called &lt;a href=&quot;../corelist&quot;&gt;corelist&lt;/a&gt; provided with this module which is a convenient way of querying from the command-line.</source>
          <target state="translated">このモジュールには、コマンドラインからクエリを実行するのに便利な&lt;a href=&quot;../corelist&quot;&gt;corelist&lt;/a&gt;というユーティリティがあります。</target>
        </trans-unit>
        <trans-unit id="82aef8cfd5e32e2a307fc10353cb3d2e49f98a7d" translate="yes" xml:space="preserve">
          <source>There is a variable &lt;code&gt;$File::Find::fullname&lt;/code&gt; which holds the absolute pathname of the file with all symbolic links resolved. If the link is a dangling symbolic link, then fullname will be set to &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">すべてのシンボリックリンクが解決されたファイルの絶対パス名を保持する変数 &lt;code&gt;$File::Find::fullname&lt;/code&gt; あります。リンクがぶら下がっているシンボリックリンクの場合、fullnameは &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="3b9ea31c4237da29f14d09c3e17b0abf6058f6c2" translate="yes" xml:space="preserve">
          <source>There is a way to achieve a similar task from C via Perl API: create a</source>
          <target state="translated">Perl APIを使ってC言語から同様のタスクを実現する方法があります。</target>
        </trans-unit>
        <trans-unit id="186d9ac4ec1df84f73c4528af239edb0b67d87e7" translate="yes" xml:space="preserve">
          <source>There is a way to completely hide any modifiable globals (they are all moved to heap), the compilation setting &lt;code&gt;-DPERL_GLOBAL_STRUCT_PRIVATE&lt;/code&gt; . It is not normally used, but can be used for testing, read more about it in &lt;a href=&quot;perlguts#Background-and-PERL_IMPLICIT_CONTEXT&quot;&gt;Background and PERL_IMPLICIT_CONTEXT in perlguts&lt;/a&gt;.</source>
          <target state="translated">変更可能なグローバル（それらはすべてヒープに移動されます）を完全に非表示にする方法があります。コンパイル設定 &lt;code&gt;-DPERL_GLOBAL_STRUCT_PRIVATE&lt;/code&gt; です。通常は使用されませんが、テストに使用できます。詳細については、&lt;a href=&quot;perlguts#Background-and-PERL_IMPLICIT_CONTEXT&quot;&gt;バックグラウンドで、PERL_IMPLICIT_CONTEXTはperlgutsでご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="887ba5df14249dda0cf87b4c4aa3777b9fca5f36" translate="yes" xml:space="preserve">
          <source>There is a way to tell perl to do complete cleanup: set the environment variable PERL_DESTRUCT_LEVEL to a non-zero value. The t/TEST wrapper does set this to 2, and this is what you need to do too, if you don't want to see the &quot;global leaks&quot;: For example, for running under valgrind</source>
          <target state="translated">環境変数PERL_DESTRUCT_LEVELに0以外の値を設定してください。t/TEST ラッパーはこれを 2 に設定していますが、&quot;グローバルリーク &quot;を見たくないのであれば、これも必要なことです。例えば、valgrindで実行する場合</target>
        </trans-unit>
        <trans-unit id="691cdea86f4db4ba9a2ac59e7fc6b55f031421ad" translate="yes" xml:space="preserve">
          <source>There is absolutely no excuse for not documenting your extension. Documentation belongs in the .pm file. This file will be fed to pod2man, and the embedded documentation will be converted to the manpage format, then placed in the blib directory. It will be copied to Perl's manpage directory when the extension is installed.</source>
          <target state="translated">あなたの拡張子を文書化しないことには絶対に言い訳はできません。ドキュメントは .pm ファイルにあります。このファイルは pod2man に送られ、埋め込まれたドキュメントは manpage 形式に変換されて blib ディレクトリに置かれます。このファイルは、拡張機能がインストールされたときに Perl の manpage ディレクトリにコピーされます。</target>
        </trans-unit>
        <trans-unit id="d8cca778f6ffeefe438e516146882fedcff922a7" translate="yes" xml:space="preserve">
          <source>There is also &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bigrat;&lt;/code&gt; which gives you big rationals:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bigrat;&lt;/code&gt; もあります。これはあなたに大きな合理性を与えます：</target>
        </trans-unit>
        <trans-unit id="43bcf99a2a57a573a071e20e50556250aa32095b" translate="yes" xml:space="preserve">
          <source>There is also a function to add magic to an &lt;code&gt;HV&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;HV&lt;/code&gt; に魔法を追加する関数もあります：</target>
        </trans-unit>
        <trans-unit id="8f310316f81fc52692e5ac947e6e74f350603233" translate="yes" xml:space="preserve">
          <source>There is also a larger form of a char class structure used to represent POSIX char classes under &lt;code&gt;/l&lt;/code&gt; matching, called &lt;code&gt;regnode_charclass_posixl&lt;/code&gt; which has an additional 32-bit bitmap indicating which POSIX char classes have been included.</source>
          <target state="translated">&lt;code&gt;/l&lt;/code&gt; マッチングでPOSIX charクラスを表すために使用されるcharクラス構造のより大きな形式もあります。これは &lt;code&gt;regnode_charclass_posixl&lt;/code&gt; と呼ばれ、どのPOSIX charクラスが含まれているかを示す追加の32ビットビットマップがあります。</target>
        </trans-unit>
        <trans-unit id="8c1a33cdb5c1f767d6b5b045c29afd70795ca96e" translate="yes" xml:space="preserve">
          <source>There is also a toyedit Text widget based editor written in Perl that is distributed with the Tk module on CPAN. The ptkdb ( &lt;a href=&quot;http://ptkdb.sourceforge.net/&quot;&gt;http://ptkdb.sourceforge.net/&lt;/a&gt; ) is a Perl/Tk-based debugger that acts as a development environment of sorts. Perl Composer ( &lt;a href=&quot;http://perlcomposer.sourceforge.net/&quot;&gt;http://perlcomposer.sourceforge.net/&lt;/a&gt; ) is an IDE for Perl/Tk GUI creation.</source>
          <target state="translated">CPANのTkモジュールと一緒に配布されるPerlで書かれたtoyedit Textウィジェットベースのエディターもあります。ptkdb（&lt;a href=&quot;http://ptkdb.sourceforge.net/&quot;&gt;http://ptkdb.sourceforge.net/&lt;/a&gt;）は、一種の開発環境として機能するPerl / Tkベースのデバッガーです。Perl Composer（&lt;a href=&quot;http://perlcomposer.sourceforge.net/&quot;&gt;http://perlcomposer.sourceforge.net/&lt;/a&gt;）は、Perl / Tk GUI作成用のIDEです。</target>
        </trans-unit>
        <trans-unit id="ace8b22bc48d6e6e8b62fe08966c97467280b304" translate="yes" xml:space="preserve">
          <source>There is an edge case when using &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next::method&lt;/a&gt;&lt;/code&gt; from within a subroutine which was created in a different module than the one it is called from. It sounds complicated, but it really isn't. Here is an example which will not work correctly:</source>
          <target state="translated">呼び出されたモジュールとは異なるモジュールで作成されたサブルーチン内から &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next::method&lt;/a&gt;&lt;/code&gt; を使用する場合は、例外的なケースがあります。複雑に聞こえますが、実際はそうではありません。以下は正しく動作しない例です：</target>
        </trans-unit>
        <trans-unit id="407ad0e2a6f54d3dcabda775887575e4b7a50908" translate="yes" xml:space="preserve">
          <source>There is another directory ($CPAN::Config-&amp;gt;{keep_source_where}) where the original distribution files are kept. This directory is not covered by the cache manager and must be controlled by the user. If you choose to have the same directory as build_dir and as keep_source_where directory, then your sources will be deleted with the same fifo mechanism.</source>
          <target state="translated">元の配布ファイルが保持される別のディレクトリ（$ CPAN :: Config-&amp;gt; {keep_source_where}）があります。このディレクトリはキャッシュマネージャーの対象ではないため、ユーザーが制御する必要があります。build_dirおよびkeep_source_whereディレクトリと同じディレクトリを選択した場合、ソースは同じfifoメカニズムで削除されます。</target>
        </trans-unit>
        <trans-unit id="58cdb83a1e784fb0e74fd64a5af55da9c7c710fa" translate="yes" xml:space="preserve">
          <source>There is another method which can be used, namely letting Perl do it for you automatically whenever it regains control after the callback has terminated. This is done by simply not using the</source>
          <target state="translated">もう一つの方法として、コールバックが終了した後に Perl が制御を回復したときに、自動的に Perl にそれを行わせる方法があります。これは</target>
        </trans-unit>
        <trans-unit id="259d1525b7b40afbda3635dfb60885ec2065cd0c" translate="yes" xml:space="preserve">
          <source>There is another way to trade clarity for compactness: INPUT sections allow declaration of C variables which do not appear in the parameter list of a subroutine. Thus the above code for mutate() can be rewritten as</source>
          <target state="translated">明快さとコンパクトさを両立させるもう一つの方法があります。INPUTセクションでは、サブルーチンのパラメータリストに現れないC変数を宣言することができます。したがって、上記のmutate()のコードは次のように書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="6993af1c1a90a2fde20c8f99658cf4ef71df4e8c" translate="yes" xml:space="preserve">
          <source>There is currently no way to turn off the guesswork that tries to format unmarked text appropriately, and sometimes it isn't wanted (particularly when using POD to document something other than Perl). Most of the work toward fixing this has now been done, however, and all that's still needed is a user interface.</source>
          <target state="translated">現在のところ、無印のテキストを適切にフォーマットしようとする推測作業をオフにする方法はありませんし、時にはそれが望まれていないこともあります(特にPODを使ってPerl以外のものを文書化する場合)。しかし、これを修正するための作業のほとんどは現在行われており、まだ必要なのはユーザインタフェースだけです。</target>
        </trans-unit>
        <trans-unit id="923e1f4510dc236d985b28a823797fd535b1836b" translate="yes" xml:space="preserve">
          <source>There is no</source>
          <target state="translated">はありません。</target>
        </trans-unit>
        <trans-unit id="4ac6b5cad845dedcdb84c876c16dd65a46ac7fff" translate="yes" xml:space="preserve">
          <source>There is no 2GB limit on process size.</source>
          <target state="translated">プロセスサイズに2GBの制限はありません。</target>
        </trans-unit>
        <trans-unit id="4389ed97cd408884e879872fd75e0815bd058c0d" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;*.bs&lt;/code&gt; file supplied with the extension. Instead, there may be a &lt;code&gt;*_BS&lt;/code&gt; file which has code for the special cases, like posix for berkeley db on the NeXT.</source>
          <target state="translated">拡張子が付いた &lt;code&gt;*.bs&lt;/code&gt; ファイルはありません。代わりに、NeXTのberkeley dbのposixなど、特別な場合のコードを含む &lt;code&gt;*_BS&lt;/code&gt; ファイルが存在する場合があります。</target>
        </trans-unit>
        <trans-unit id="e0b489252bb15e6f1ecbef798ed7f66f86847082" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;systell&lt;/code&gt; function. Use &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek&lt;/a&gt;(FH, 0, 1)&lt;/code&gt; for that.</source>
          <target state="translated">&lt;code&gt;systell&lt;/code&gt; 機能はありません。そのために &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek&lt;/a&gt;(FH, 0, 1)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="6ea7c815b6a5bfae1bac221a98896771b7bb3184" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;systell&lt;/code&gt; function. Use &lt;code&gt;&lt;a href=&quot;sysseek&quot;&gt;sysseek&lt;/a&gt;(FH, 0, 1)&lt;/code&gt; for that.</source>
          <target state="translated">&lt;code&gt;systell&lt;/code&gt; 機能はありません。そのために &lt;code&gt;&lt;a href=&quot;sysseek&quot;&gt;sysseek&lt;/a&gt;(FH, 0, 1)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="76a2f2ea0128a2c9f814d14705cbf22fee6bb330" translate="yes" xml:space="preserve">
          <source>There is no BNF, but you can paw your way through the yacc grammar in perly.y in the source distribution if you're particularly brave. The grammar relies on very smart tokenizing code, so be prepared to venture into toke.c as well.</source>
          <target state="translated">BNF はありませんが、特に勇気があれば、ソース・ディストリビューションの perly.y の yacc 文法をこつこつと読み進めていくことができます。文法は非常にスマートなトークン化コードに依存しているので、toke.c にも冒険する準備をしておいてください。</target>
        </trans-unit>
        <trans-unit id="32ad1aee364e105dad5b41374df7e156cb6a43e2" translate="yes" xml:space="preserve">
          <source>There is no advantage to putting subroutines which will _always_ be called after the &lt;code&gt;__DATA__&lt;/code&gt; token.</source>
          <target state="translated">&lt;code&gt;__DATA__&lt;/code&gt; トークンの後に_always_が呼び出されるサブルーチンを配置する利点はありません。</target>
        </trans-unit>
        <trans-unit id="e91dc6d303227194ff188b9dc751fb889211ca0d" translate="yes" xml:space="preserve">
          <source>There is no builtin &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; function. It is just an ordinary method (subroutine) defined (or inherited) by modules that wish to export names to another module. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; function calls the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method for the package used. See also &lt;a href=&quot;#use&quot;&gt;use&lt;/a&gt;, &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;, and &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;.</source>
          <target state="translated">組み込みの &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 機能はありません。これは、名前を別のモジュールにエクスポートしたいモジュールによって定義（または継承）された通常のメソッド（サブルーチン）にすぎません。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 関数は、呼び出しを &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 使用されるパッケージのための方法を。&lt;a href=&quot;#use&quot;&gt;use&lt;/a&gt;、&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;、および&lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="fe76bcf1a7a27510fd944eef657a41eda4d72a44" translate="yes" xml:space="preserve">
          <source>There is no builtin &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; function. It is just an ordinary method (subroutine) defined (or inherited) by modules that wish to export names to another module. The &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; function calls the &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method for the package used. See also &lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;, &lt;a href=&quot;../perlmod&quot;&gt;perlmod&lt;/a&gt;, and &lt;a href=&quot;../exporter&quot;&gt;Exporter&lt;/a&gt;.</source>
          <target state="translated">組み込みの &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 機能はありません。これは、名前を別のモジュールにエクスポートしたいモジュールによって定義（または継承）された通常のメソッド（サブルーチン）にすぎません。 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 関数は、呼び出しを &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 使用されるパッケージのための方法を。&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;、&lt;a href=&quot;../perlmod&quot;&gt;perlmod&lt;/a&gt;、および&lt;a href=&quot;../exporter&quot;&gt;Exporter&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="05fb5ccde6fe684391b3c4f8ff40b801e9c52e40" translate="yes" xml:space="preserve">
          <source>There is no builtin way to say &quot;float this to the right hand side of the page, however wide it is.&quot; You have to specify where it goes. The truly desperate can generate their own format on the fly, based on the current number of columns, and then eval() it:</source>
          <target state="translated">これをページの右側にフロートさせる」という組み込みの方法はありません。どこに配置するかを指定しなければなりません。本当に必死な人は、現在のカラム数に基づいて独自のフォーマットをその場で生成し、それを eval()することができます。</target>
        </trans-unit>
        <trans-unit id="5ec86a2b5c6a22a41774d9be82dd0c618a3c5c45" translate="yes" xml:space="preserve">
          <source>There is no check to assert that the filehandle passed from Perl to C was created with the right &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; mode.</source>
          <target state="translated">PerlからCに渡されたファイルハンドルが正しい &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; モードで作成されたことを確認するチェックはありません。</target>
        </trans-unit>
        <trans-unit id="4297cc5a425f7dacf2e1ca88cce095827acd4bc7" translate="yes" xml:space="preserve">
          <source>There is no data immediately after the compressed data stream.</source>
          <target state="translated">圧縮されたデータストリームの直後にはデータがありません。</target>
        </trans-unit>
        <trans-unit id="784e961111d5a1435645faa2fd65cc0510bda63f" translate="yes" xml:space="preserve">
          <source>There is no decrypt function. This function isn't all that useful for cryptography (for that, look for</source>
          <target state="translated">復号化機能はありません。この関数は暗号化にはそれほど有用ではありません (それについては</target>
        </trans-unit>
        <trans-unit id="7d50acdbf96ea291176f3a2d7e886b2944e1f2b9" translate="yes" xml:space="preserve">
          <source>There is no description given for most non-Perl defined properties (See &lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt; for that).</source>
          <target state="translated">Perlで定義されていないほとんどのプロパティの説明はありません（その詳細については、&lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http：//www.unicode.org/reports/tr44/&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="efbf1382c6e11055de15bc7597f5ea124690d870" translate="yes" xml:space="preserve">
          <source>There is no double interpolation in Perl, so the &lt;code&gt;$100&lt;/code&gt; is left as is.</source>
          <target state="translated">Perlには二重補間がないため、 &lt;code&gt;$100&lt;/code&gt; はそのままです。</target>
        </trans-unit>
        <trans-unit id="455b851bfe4dcf94993aa6ab9485d19207a20655" translate="yes" xml:space="preserve">
          <source>There is no easy way to provide this functionality in &lt;code&gt;Archive::Tar&lt;/code&gt; , because a tarball can contain many files, and each of which could be encoded in a different way.</source>
          <target state="translated">&lt;code&gt;Archive::Tar&lt;/code&gt; でこの機能を提供する簡単な方法はありません。tarballには多くのファイルを含めることができ、それぞれが異なる方法でエンコードされている可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="27f49800696d7a52910d2aa32267a02c4e742caa" translate="yes" xml:space="preserve">
          <source>There is no equivalent operator to force an expression to be interpolated in list context because in practice, this is never needed. If you really wanted to do so, however, you could use the construction &lt;code&gt;@{[ (some expression) ]}&lt;/code&gt; , but usually a simple &lt;code&gt;(some expression)&lt;/code&gt; suffices.</source>
          <target state="translated">リストコンテキストで式を強制的に補間するための同等の演算子はありません。これは、実際には必要ないためです。ただし、本当にそうしたい場合は、 &lt;code&gt;@{[ (some expression) ]}&lt;/code&gt; 構文を使用できますが、通常は単純な &lt;code&gt;(some expression)&lt;/code&gt; で十分です。</target>
        </trans-unit>
        <trans-unit id="6da385daea49ac6d957f9692c325e916978ed205" translate="yes" xml:space="preserve">
          <source>There is no equivalent to &lt;code&gt;fgets&lt;/code&gt; ; one should use &lt;code&gt;sv_gets&lt;/code&gt; instead:</source>
          <target state="translated">&lt;code&gt;fgets&lt;/code&gt; に相当するものはありません。代わりに &lt;code&gt;sv_gets&lt;/code&gt; を使用する必要があります：</target>
        </trans-unit>
        <trans-unit id="56b2b22bb272d9529f5a7b2eeb648640b188c1f1" translate="yes" xml:space="preserve">
          <source>There is no firewall</source>
          <target state="translated">ファイアウォールがない</target>
        </trans-unit>
        <trans-unit id="121835ac892ea37b942952f42c3ffe4014099c6d" translate="yes" xml:space="preserve">
          <source>There is no general solution to all of this. It is a mess.</source>
          <target state="translated">このすべてに一般的な解決策はありません。混乱しているのです。</target>
        </trans-unit>
        <trans-unit id="87f0999d25c4eb3604c738b2e0116726668320dd" translate="yes" xml:space="preserve">
          <source>There is no general solution to all of this. It's just a mess.</source>
          <target state="translated">このすべてに一般的な解決策はありません。ごちゃごちゃしているだけです。</target>
        </trans-unit>
        <trans-unit id="e2b8fcbb171cbccbd111cd2bd311ab6e6fcd1a58" translate="yes" xml:space="preserve">
          <source>There is no low precedence operator for defined-OR.</source>
          <target state="translated">defined-ORには優先順位の低い演算子はありません。</target>
        </trans-unit>
        <trans-unit id="a8da251185c2a49373fb6cf76b3c29c18692d780" translate="yes" xml:space="preserve">
          <source>There is no need to inherit from the &lt;b&gt;SelfLoader&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;SelfLoader&lt;/b&gt;から継承する必要はありません。</target>
        </trans-unit>
        <trans-unit id="0d3cd63858e09b2c6b6ec38df40d5828e10651d9" translate="yes" xml:space="preserve">
          <source>There is no one DBM module available on all platforms. &lt;code&gt;SDBM_File&lt;/code&gt; and the others are generally available on all Unix and DOSish ports, but not in MacPerl, where only &lt;code&gt;NDBM_File&lt;/code&gt; and &lt;code&gt;DB_File&lt;/code&gt; are available.</source>
          <target state="translated">すべてのプラットフォームで使用できるDBMモジュールは1つではありません。 &lt;code&gt;SDBM_File&lt;/code&gt; などは、すべてのUnixおよびDOSishポートで一般的に使用できますが、 &lt;code&gt;NDBM_File&lt;/code&gt; および &lt;code&gt;DB_File&lt;/code&gt; のみが使用可能なMacPerlでは使用できません。</target>
        </trans-unit>
        <trans-unit id="fb47afbc2311aee90586d3371f78c62b2ed90edb" translate="yes" xml:space="preserve">
          <source>There is no quantifier &lt;code&gt;{,n}&lt;/code&gt; . That's interpreted as a literal string.</source>
          <target state="translated">数量詞 &lt;code&gt;{,n}&lt;/code&gt; はありません。これはリテラル文字列として解釈されます。</target>
        </trans-unit>
        <trans-unit id="378d1a5bc456220dab02d99326a34c6e9f3d48c2" translate="yes" xml:space="preserve">
          <source>There is no reason you should not use Perl as a language to glue Unix tools together, or to prototype a Macintosh application, or to manage the Windows registry. If it makes no sense to aim for portability for one reason or another in a given program, then don't bother.</source>
          <target state="translated">Unixのツールを接着したり、Macintoshのアプリケーションをプロトタイプ化したり、Windowsのレジストリを管理したりするための言語としてPerlを使わない理由はありません。与えられたプログラムの中で、何らかの理由で移植性を目指すことに意味がないのであれば、気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="860dd139f43df25bd42c1af5b8706f2806229649" translate="yes" xml:space="preserve">
          <source>There is no requirement to convert anything.</source>
          <target state="translated">何も変換する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5d190eab008c4161478c644351172b878f4f965a" translate="yes" xml:space="preserve">
          <source>There is no set_layers(), nor does get_layers() return a tied array mirroring the stack, or anything fancy like that. This is not accidental or unintentional. The PerlIO layer stack is a bit more complicated than just a stack (see for example the behaviour of &lt;code&gt;:raw&lt;/code&gt; ). You are supposed to use open() and binmode() to manipulate the stack.</source>
          <target state="translated">set_layers（）はなく、get_layers（）はスタックをミラーリングした結合配列、またはそのような特別なものを返しません。これは偶発的または意図的ではありません。PerlIOレイヤースタックは、単なるスタックよりも少し複雑です（たとえば &lt;code&gt;:raw&lt;/code&gt; の動作を参照）。スタックを操作するには、open（）およびbinmode（）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fcb140242be9c5687c6a498b3df2879f2625b5b6" translate="yes" xml:space="preserve">
          <source>There is no shell to process metacharacters, and the native standard is to pass a command line terminated by &quot;\n&quot; &quot;\r&quot; or &quot;\0&quot; to the spawned program. Redirection such as &lt;code&gt;&amp;gt; foo&lt;/code&gt; is performed (if at all) by the run time library of the spawned program. &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">メタ文字を処理するシェルはなく、ネイティブ標準は、「\ n」、「\ r」、または「\ 0」で終了するコマンドラインを生成されたプログラムに渡すことです。 &lt;code&gt;&amp;gt; foo&lt;/code&gt; などのリダイレクトは、生成されたプログラムのランタイムライブラリによって実行されます（実行される場合）。 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="deba5b88e82775e19650d3712106c375f59f7e30" translate="yes" xml:space="preserve">
          <source>There is no significant speed gain between compile time and run time class creation, there is just a new, more standard order of events.</source>
          <target state="translated">コンパイル時間とランタイムのクラス作成の間に大きな速度の向上はなく、単に新しい、より標準的なイベントの順序があるだけです。</target>
        </trans-unit>
        <trans-unit id="6b7801d1cfdd5c48abee3f679e368ab10b3ad8dc" translate="yes" xml:space="preserve">
          <source>There is no simple answer to this question. Perl frameworks can run everything from basic file servers and small scale intranets to massive multinational multilingual websites that are the core to international businesses.</source>
          <target state="translated">この質問に対する単純な答えはありません。Perlフレームワークは、基本的なファイルサーバと小規模のイントラネットから、国際的なビジネスの中心である大規模な多国籍多言語ウェブサイトまで、すべてを実行することができます。</target>
        </trans-unit>
        <trans-unit id="557d02393de130217c50453e6a017ae2fadcbc8e" translate="yes" xml:space="preserve">
          <source>There is no simple solution to this because of printf()'s limited intelligence, but for many types the right format is available as with either 'f' or '_f' suffix, for example:</source>
          <target state="translated">printf()の知能が限られているため、これに対する単純な解決策はありませんが、多くの型では、例えば 'f' や '_f' のような接尾辞をつけることで正しいフォーマットが利用できます。</target>
        </trans-unit>
        <trans-unit id="8ceb0317aba48e3a3b6cabda91010f77ae7a54b9" translate="yes" xml:space="preserve">
          <source>There is no simple way to access WPS objects. The only way I know is via &lt;code&gt;OS2::REXX&lt;/code&gt; and &lt;code&gt;SOM&lt;/code&gt; extensions (see &lt;a href=&quot;http://search.cpan.org/perldoc/OS2::REXX&quot;&gt;OS2::REXX&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/SOM&quot;&gt;SOM&lt;/a&gt;). However, we do not have access to convenience methods of Object-REXX. (Is it possible at all? I know of no Object-REXX API.) The &lt;code&gt;SOM&lt;/code&gt; extension (currently in alpha-text) may eventually remove this shortcoming; however, due to the fact that DII is not supported by the &lt;code&gt;SOM&lt;/code&gt; module, using &lt;code&gt;SOM&lt;/code&gt; is not as convenient as one would like it.</source>
          <target state="translated">WPSオブジェクトにアクセスする簡単な方法はありません。私が知る唯一の方法は、 &lt;code&gt;OS2::REXX&lt;/code&gt; および &lt;code&gt;SOM&lt;/code&gt; 拡張機能を使用することです（&lt;a href=&quot;http://search.cpan.org/perldoc/OS2::REXX&quot;&gt;OS2 :: REXX&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/SOM&quot;&gt;SOMを&lt;/a&gt;参照）。ただし、Object-REXXの便利なメソッドにはアクセスできません。（それはまったく可能ですか？Object-REXX APIがないことを知っています。） &lt;code&gt;SOM&lt;/code&gt; 拡張（現在はアルファテキスト）は、最終的にこの欠点を取り除く可能性があります。しかし、DIIはでサポートされていないという事実による &lt;code&gt;SOM&lt;/code&gt; の使用、モジュール &lt;code&gt;SOM&lt;/code&gt; は 1がそれを希望ほど便利ではありません。</target>
        </trans-unit>
        <trans-unit id="06843bf4e2da3a9df3bd916b78c90fe1d32c0462" translate="yes" xml:space="preserve">
          <source>There is no special class syntax in Perl, but a package may act as a class if it provides subroutines to act as methods. Such a package may also derive some of its methods from another class (package) by listing the other package name(s) in its global @ISA array (which must be a package global, not a lexical).</source>
          <target state="translated">Perlには特別なクラス構文はありませんが、メソッドとして動作するサブルーチンを提供している場合、パッケージはクラスとして動作することができます。そのようなパッケージは、他のクラス(パッケージ)からメソッドの一部を派生させることもできますが、他のパッケージ名をグローバルな@ISA配列(辞書的なものではなく、パッケージのグローバルなものでなければなりません)に列挙することで、そのメソッドを派生させることができます。</target>
        </trans-unit>
        <trans-unit id="f83d3f75f9b7673dc85f27f3287a09a764999d4c" translate="yes" xml:space="preserve">
          <source>There is no specific mailing list for Perl on VOS. You can contact the Stratus Technologies Customer Assistance Center (CAC) for your region, or you can use the contact information located in the distribution files on the Stratus Anonymous FTP site.</source>
          <target state="translated">VOS 上には、Perl 用の特定のメーリングリストはありません。お住まいの地域の Stratus Technologies Customer Assistance Center (CAC)に連絡するか、Stratus Anonymous FTP サイトの配布ファイルにある連絡先情報を利用することができます。</target>
        </trans-unit>
        <trans-unit id="100c2da519836111bd839e12cb2fd3dec223d870" translate="yes" xml:space="preserve">
          <source>There is no specification of the formatter after the &lt;code&gt;=for&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;=for&lt;/code&gt; コマンドの後のフォーマッターの指定はありません。</target>
        </trans-unit>
        <trans-unit id="670b965fe2aed5c0a5a49c42acbad90f9fc925e9" translate="yes" xml:space="preserve">
          <source>There is no such thing as a network representation for reals, so if you want to send your real numbers across computer boundaries, you'd better stick to text representation, possibly using the hexadecimal float format (avoiding the decimal conversion loss), unless you're absolutely sure what's on the other end of the line. For the even more adventuresome, you can use the byte-order modifiers from the previous section also on floating point codes.</source>
          <target state="translated">実数のネットワーク表現は存在しませんので、コンピュータの境界線を越えて実数を送信したい場合は、テキスト表現にこだわる方が良いでしょう。さらに冒険的な方には、浮動小数点コードの前のセクションで紹介したバイト順の修飾子を使用することができます。</target>
        </trans-unit>
        <trans-unit id="485f9819a36f9757672adb9a54833a7d985d4ad2" translate="yes" xml:space="preserve">
          <source>There is no support at present for tied @ISA. There is a potential conflict between magic entries needed to notice setting of @ISA, and those needed to implement 'tie'.</source>
          <target state="translated">現在のところ、@ISAの紐付けには対応していません。ISAの設定を通知するために必要なマジックエントリと、'tie'を実装するために必要なマジックエントリとの間には、競合が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f0d4e44dc9af068a1f923f5eebfb3439b41ed99d" translate="yes" xml:space="preserve">
          <source>There is no support for dynamically linked libraries in QNX4.</source>
          <target state="translated">QNX4 では、動的にリンクされたライブラリはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="73a30aae9994d5aba957137545368eea0ce0f5eb" translate="yes" xml:space="preserve">
          <source>There is no syseof() function, which is ok, since eof() doesn't work well on device files (like ttys) anyway. Use sysread() and check for a return value for 0 to decide whether you're done.</source>
          <target state="translated">syseof()関数はありませんが、eof()はいずれにせよデバイスファイル (tys のような)ではうまく動作しないので、これは問題ありません。sysread()を使用して、0 の戻り値をチェックして終了かどうかを判断してください。</target>
        </trans-unit>
        <trans-unit id="8fc13de7d6614c5dd033dd321c9bbd82b325da63" translate="yes" xml:space="preserve">
          <source>There is no technical reason why a Berkeley DB database cannot be shared by both a Perl and a C application.</source>
          <target state="translated">バークレーDBデータベースがPerlとCアプリケーションの両方で共有できない技術的な理由はありません。</target>
        </trans-unit>
        <trans-unit id="79f7328788708da5a0cdbfe8c102e73defe278fc" translate="yes" xml:space="preserve">
          <source>There is no way to reliably detect the encoding automatically, so if people keep sending you data without charset indication, you may have to educate them.</source>
          <target state="translated">自動的にエンコードを確実に検出する方法はないので、文字コード表示なしでデータを送り続ける人がいたら、教育しないといけないかもしれません。</target>
        </trans-unit>
        <trans-unit id="9d4ba678fc087cfe3ed3657d1daba5422cdd5616" translate="yes" xml:space="preserve">
          <source>There is nothing special about Memoize::Expire. It is just an example. If you don't like the policy that it implements, you are free to write your own expiration policy module that implements whatever policy you desire. Here is how to do that. Let us suppose that your module will be named MyExpirePolicy.</source>
          <target state="translated">Memoize::Expireについては特に何もありません。ただの一例に過ぎません。もしそれが実装しているポリシーが気に入らないのであれば、好きなポリシーを実装した独自の期限切れポリシーモジュールを書くのは自由です。ここではその方法を説明します。あなたのモジュールがMyExpirePolicyという名前になるとしましょう。</target>
        </trans-unit>
        <trans-unit id="6fcd6f426861d4a9d172b0ea1e309235434fe63e" translate="yes" xml:space="preserve">
          <source>There is now a &lt;code&gt;bsstr()&lt;/code&gt; method to get the string in scientific notation aka &lt;code&gt;1e+2&lt;/code&gt; instead of &lt;code&gt;100&lt;/code&gt; . Be advised that overloaded 'eq' always uses bstr() for comparison, but Perl will represent some numbers as 100 and others as 1e+308. If in doubt, convert both arguments to Math::BigInt before comparing them as strings:</source>
          <target state="translated">&lt;code&gt;100&lt;/code&gt; の代わりに &lt;code&gt;1e+2&lt;/code&gt; とも呼ばれる科学表記で文字列を取得する &lt;code&gt;bsstr()&lt;/code&gt; メソッドが追加されました。オーバーロードされた 'eq'は比較のために常にbstr（）を使用しますが、Perlはいくつかの数値を100として表し、他の数値を1e + 308として表すことに注意してください。疑問がある場合は、両方の引数を文字列として比較する前に、Math :: BigIntに変換します。</target>
        </trans-unit>
        <trans-unit id="22f759aa48f981bff2eecdd8034d0137dd1c154a" translate="yes" xml:space="preserve">
          <source>There is of course lots more to find out about, this has just scratched the surface. The best way to learn more is to use perldoc to find out more about the language, to read the on-line help (&lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt; is probably the next place to go), and of course, experiment.</source>
          <target state="translated">もちろん、もっと多くのことを知る必要がありますが、これは表面をなぞっただけです。詳細については、perldocを使用して言語の詳細を調べ、オンラインヘルプを読んで（おそらく&lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;が次に進むべき場所です）、そしてもちろん実験するのが最善の方法です。</target>
        </trans-unit>
        <trans-unit id="2f1fdaa6644f76210c716aac51df03a67575812a" translate="yes" xml:space="preserve">
          <source>There is often a matter of opinion and taste, and there isn't any one answer that fits everyone. In general, you want to use either the current stable release, or the stable release immediately prior to that one. Currently, those are perl5.18.x and perl5.16.x, respectively.</source>
          <target state="translated">多くの場合、意見や好みの問題があり、すべての人に当てはまる答えがあるわけではありません。一般的には、現在の安定版リリースか、その直前の安定版リリースのどちらかを使いたいと思います。現在は、それぞれ perl5.18.x と perl5.16.x です。</target>
        </trans-unit>
        <trans-unit id="5e0ec9ff71273582227d757a4501aa81fcc373f2" translate="yes" xml:space="preserve">
          <source>There is one caveat with INSTALL_BASE, though, since it acts differently from the PREFIX and LIB settings that older versions of &lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; advocated. INSTALL_BASE does not support installing modules for multiple versions of Perl or different architectures under the same directory. You should consider whether you really want that and, if you do, use the older PREFIX and LIB settings. See the &lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::Makemaker&quot;&gt;ExtUtils::Makemaker&lt;/a&gt; documentation for more details.</source>
          <target state="translated">ただし、INSTALL_BASEには注意が必要です。これは、&lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils :: MakeMakerの&lt;/a&gt;古いバージョンが推奨していたPREFIXおよびLIBの設定とは異なる動作をするためです。 INSTALL_BASEは、Perlの複数のバージョンまたは異なるアーキテクチャのモジュールを同じディレクトリにインストールすることをサポートしていません。それが本当に必要かどうかを検討し、必要な場合は古いPREFIXおよびLIB設定を使用してください。詳細については、&lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::Makemaker&quot;&gt;ExtUtils :: Makemakerの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="97b4745ddf35dec712ea27023babefb7e0f47466" translate="yes" xml:space="preserve">
          <source>There is one exception to all this. &lt;code&gt;\p{All}&lt;/code&gt; looks like a Unicode property, but it is a Perl extension that is defined to be true for all possible code points, Unicode or not, so no warning is ever generated when matching this against a non-Unicode code point. (Prior to v5.20, it was an exact synonym for &lt;code&gt;\p{Any}&lt;/code&gt; , matching code points &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;0x10FFFF&lt;/code&gt; .)</source>
          <target state="translated">これには1つの例外があります。 &lt;code&gt;\p{All}&lt;/code&gt; はUnicodeプロパティのように見えますが、Unicodeであるかどうかにかかわらず、すべての可能なコードポイントに対してtrueと定義されているPerl拡張なので、これを非Unicodeコードポイントと照合しても警告は生成されません。（v5.20以前では、これは &lt;code&gt;\p{Any}&lt;/code&gt; 正確な同義語であり、コードポイント &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;0x10FFFF&lt;/code&gt; に一致していました。）</target>
        </trans-unit>
        <trans-unit id="74416e05e81083925dbb5ceee8b9f9eabc0d1420" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule:</source>
          <target state="translated">このルールには一つの例外があります。</target>
        </trans-unit>
        <trans-unit id="aa93104b268b1c94a90858506e09be1c5b4335fe" translate="yes" xml:space="preserve">
          <source>There is one exception, and that is base 2 with negative $x:</source>
          <target state="translated">1つの例外があり、それは負の$xを持つベース2です。</target>
        </trans-unit>
        <trans-unit id="cfa0a4472a2d7ed2b714a912f015cd1d6e2a650e" translate="yes" xml:space="preserve">
          <source>There is one exception. If you use an alphanumeric character as the delimiter of your pattern (which you probably shouldn't do for readability reasons), you have to escape the delimiter if you want to match it. Perl won't warn then. See also &lt;a href=&quot;perlop#Gory-details-of-parsing-quoted-constructs&quot;&gt;Gory details of parsing quoted constructs in perlop&lt;/a&gt;.</source>
          <target state="translated">例外が1つあります。英数字をパターンの区切り文字として使用する場合（読みやすさの理由でこれを行うべきではない可能性があります）、区切り文字を一致させるには、エスケープする必要があります。Perlはそのとき警告しません。&lt;a href=&quot;perlop#Gory-details-of-parsing-quoted-constructs&quot;&gt;perlopで引用された構文の解析に関するGoryの詳細&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="6afd3e4f300e1185505b80a57213e90e8f05b7f4" translate="yes" xml:space="preserve">
          <source>There is one minor difference: if variables are declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; in the initialization section of the &lt;code&gt;for&lt;/code&gt; , the lexical scope of those variables is exactly the &lt;code&gt;for&lt;/code&gt; loop (the body of the loop and the control sections).</source>
          <target state="translated">小さな違いが1つあります。変数が &lt;code&gt;for&lt;/code&gt; の初期化セクションで &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で宣言されている場合、それらの変数の字句スコープは &lt;code&gt;for&lt;/code&gt; ループ（ループの本体と制御セクション）とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="83ea2627da96768f4457b4c193dca3613fbaa7aa" translate="yes" xml:space="preserve">
          <source>There is one small difference between &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bigint&lt;/code&gt; : the former will not affect assignments to variables and the return value of some functions. &lt;code&gt;bigint&lt;/code&gt; truncates these results to integer too:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bigint&lt;/code&gt; の間には小さな違いが1つあります。前者は変数への割り当てや一部の関数の戻り値には影響しません。 &lt;code&gt;bigint&lt;/code&gt; もこれらの結果を整数に切り捨てます。</target>
        </trans-unit>
        <trans-unit id="b84dd6a42f4605e651baa6c6eefa2a08f75e64c2" translate="yes" xml:space="preserve">
          <source>There is one subtle difference between the following statements:</source>
          <target state="translated">次の発言には微妙な違いがあります。</target>
        </trans-unit>
        <trans-unit id="577b4723acc7dc122f5a6c392fd693ead8ac6f77" translate="yes" xml:space="preserve">
          <source>There is one unary operator:</source>
          <target state="translated">単項演算子が1つあります。</target>
        </trans-unit>
        <trans-unit id="d67d211508568f3ee020a0acfadaaf645e5efa24" translate="yes" xml:space="preserve">
          <source>There is only a single &lt;code&gt;%^H&lt;/code&gt; , but arbitrarily many modules that want to use its scoping semantics. To avoid stepping on each other's toes, they need to be sure to use different keys in the hash. It is therefore conventional for a module to use only keys that begin with the module's name (the name of its main package) and a &quot;/&quot; character. After this module-identifying prefix, the rest of the key is entirely up to the module: it may include any characters whatsoever. For example, a module &lt;code&gt;Foo::Bar&lt;/code&gt; should use keys such as &lt;code&gt;Foo::Bar/baz&lt;/code&gt; and &lt;code&gt;Foo::Bar/$%/_!&lt;/code&gt; . Modules following this convention all play nicely with each other.</source>
          <target state="translated">&lt;code&gt;%^H&lt;/code&gt; は1つしかありませんが、スコープセマンティクスを使用する必要のある多くのモジュールがあります。お互いのつま先を踏まないようにするには、ハッシュで異なるキーを使用する必要があります。したがって、モジュールがモジュールの名前（メインパッケージの名前）と「/」文字で始まるキーのみを使用するのが一般的です。このモジュールを識別する接頭辞の後、キーの残りの部分は完全にモジュールに依存します。任意の文字を含めることができます。たとえば、モジュール &lt;code&gt;Foo::Bar&lt;/code&gt; は &lt;code&gt;Foo::Bar/baz&lt;/code&gt; や &lt;code&gt;Foo::Bar/$%/_!&lt;/code&gt; などのキーを使用する必要があります。。この規則に従うモジュールはすべて、互いにうまく機能します。</target>
        </trans-unit>
        <trans-unit id="22c0c34478d863fe370e8b15b9734da447a63b38" translate="yes" xml:space="preserve">
          <source>There is outline support for co-existence of PerlIO with stdio. Obviously if PerlIO is implemented in terms of stdio there is no problem. However in other cases then mechanisms must exist to create a FILE * which can be passed to library code which is going to use stdio calls.</source>
          <target state="translated">PerlIOとstdioの共存については、概要のサポートがあります。PerlIOがstdioの観点から実装されている場合は問題ありません。しかし、それ以外の場合には、stdio 呼び出しを使用するライブラリコードに渡すことができる FILE*を作成するメカニズムが存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a0392addc7a656cb8a34b007fdd104d3df93294e" translate="yes" xml:space="preserve">
          <source>There is some debate as to whether to say &quot;regexp&quot; or &quot;regex&quot;. In this document we will use the term &quot;regex&quot; unless there is a special reason not to, in which case we will explain why.</source>
          <target state="translated">regexp &quot;と言うべきか &quot;regex &quot;と言うべきかについては、いくつかの議論があります。このドキュメントでは、特別な理由がない限り &quot;regex&quot; という用語を使います。</target>
        </trans-unit>
        <trans-unit id="6f838e3edb2d3e6da973960ec694558ee6ce5470" translate="yes" xml:space="preserve">
          <source>There is some problem with the way &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; &amp;amp;f&lt;/code&gt; works under threaded Perl, perhaps because of the lexical scoping of &lt;code&gt;@_&lt;/code&gt; . This is a bug in Perl, and until it is resolved, memoized functions will see a slightly different &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; and will perform a little more slowly on threaded perls than unthreaded perls.</source>
          <target state="translated">&lt;code&gt;@_&lt;/code&gt; の字句スコープのせいで、スレッド化されたPerlの下で &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; &amp;amp;f&lt;/code&gt; 機能する方法に問題があります。これはPerlのバグであり、解決されるまで、メモ化された関数はわずかに異なる &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; を参照し、スレッド化されたperlでスレッド化されていないperlよりも少しゆっくり実行します。</target>
        </trans-unit>
        <trans-unit id="25c4c8715915dd906a17ab857892228134a49607" translate="yes" xml:space="preserve">
          <source>There is some whitespace on a seemingly empty line. POD is very sensitive to such things, so this is flagged. &lt;b&gt;vi&lt;/b&gt; users switch on the &lt;b&gt;list&lt;/b&gt; option to avoid this problem.</source>
          <target state="translated">空のように見える行に空白があります。PODはそのようなことに非常に敏感であるため、フラグが立てられています。&lt;b&gt;vi&lt;/b&gt;ユーザーは、この問題を回避するために&lt;b&gt;リスト&lt;/b&gt;オプションをオンにします。</target>
        </trans-unit>
        <trans-unit id="c71483f882bf4da31c0c8d8f1949a4bc637c87a4" translate="yes" xml:space="preserve">
          <source>There is still a big part of the API not supported by</source>
          <target state="translated">がサポートしていない API の大きな部分がまだ存在します。</target>
        </trans-unit>
        <trans-unit id="808a7cbe8640b29d30d1f97308938be9ff6d1171" translate="yes" xml:space="preserve">
          <source>There is still a small theoretical chance that a signal will interrupt the system-level &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; operation before completion. There is also a possibility that some STDIO implementations may call multiple system level &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt;s even if the buffer was empty to start. There may be some systems where this probability is reduced to zero, and this is not a concern when using &lt;code&gt;:perlio&lt;/code&gt; instead of your system's STDIO.</source>
          <target state="translated">信号が完了前にシステムレベルの &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; 操作を中断する可能性はまだわずかです。また、一部のSTDIO実装では、開始時にバッファが空であったとしても、複数のシステムレベルの &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; を呼び出す可能性があります。この確率がゼロになるシステムもあるかもしれませんが、これはシステムのSTDIOの代わりに &lt;code&gt;:perlio&lt;/code&gt; を使用する場合には問題になりません。</target>
        </trans-unit>
        <trans-unit id="96312d6625c318df54bef83c86f5b35fb95ca06e" translate="yes" xml:space="preserve">
          <source>There is the &quot;next regnode&quot; from a given regnode, a value which is rarely useful except that sometimes it matches up in terms of value with one of the others, and that sometimes the code assumes this to always be so.</source>
          <target state="translated">与えられたノードからの &quot;次のノード &quot;があります。この値は、値の面で他のノードと一致することがあり、コードが常にそうであると仮定していることがありますが、ほとんど有用ではありません。</target>
        </trans-unit>
        <trans-unit id="7b46535959966668b5c0eb95890256b8fd5dc3c4" translate="yes" xml:space="preserve">
          <source>There is the &quot;next regop&quot; from a given regop/regnode. This is the regop physically located after the current one, as determined by the size of the current regop. This is often useful, such as when dumping the structure we use this order to traverse. Sometimes the code assumes that the &quot;next regnode&quot; is the same as the &quot;next regop&quot;, or in other words assumes that the sizeof a given regop type is always going to be one regnode large.</source>
          <target state="translated">与えられたレゴップ/レゴノードから「次のレゴップ」があります。これは、現在のregopのサイズによって決定されるように、物理的に現在のregopの後に位置するregopです。これは、この順序を使ってトラバースする構造体をダンプするときなどに便利です。時々、コードは &quot;次のregnode &quot;が &quot;次のregop &quot;と同じであると仮定していたり、言い換えれば、与えられたregopタイプのサイズが常に1つのregnode大きくなると仮定しています。</target>
        </trans-unit>
        <trans-unit id="e671500d0c7786e7f8681f40410ba60c12dae4fc" translate="yes" xml:space="preserve">
          <source>There is the &quot;regnext&quot; from a given regop. This is the regop which is reached by jumping forward by the value of &lt;code&gt;NEXT_OFF()&lt;/code&gt; , or in a few cases for longer jumps by the &lt;code&gt;arg1&lt;/code&gt; field of the &lt;code&gt;regnode_1&lt;/code&gt; structure. The subroutine &lt;code&gt;regnext()&lt;/code&gt; handles this transparently. This is the logical successor of the node, which in some cases, like that of the &lt;code&gt;BRANCH&lt;/code&gt; regop, has special meaning.</source>
          <target state="translated">与えられたレゴップからの「regnext」があります。これは、NEXT_OFF &lt;code&gt;NEXT_OFF()&lt;/code&gt; 値によって前方にジャンプすることで到達する &lt;code&gt;regnode_1&lt;/code&gt; です。まれに、regnode_1構造体の &lt;code&gt;arg1&lt;/code&gt; フィールドによってジャンプが長くなる場合もあります。サブルーチン &lt;code&gt;regnext()&lt;/code&gt; はこれを透過的に処理します。これはノードの論理的な後続ノードであり、 &lt;code&gt;BRANCH&lt;/code&gt; regop のノードのように、特別な意味を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="d7e93b59e1cec82fb52bcc021241febda0271114" translate="yes" xml:space="preserve">
          <source>There is unfortunately no way to know whether the current emulator supports more than eight colors, which makes the choice of colors difficult. The most conservative choice is to use only the regular colors, which are at least displayed on all emulators. However, they will appear dark in sixteen-color terminal emulators, including most common emulators in UNIX X environments. If you know the display is one of those emulators, you may wish to use the bright variants instead. Even better, offer the user a way to configure the colors for a given application to fit their terminal emulator.</source>
          <target state="translated">現在のエミュレータが8色以上の色をサポートしているかどうかを知る方法は残念ながらありません。最も保守的な選択は、少なくともすべてのエミュレータで表示される通常の色だけを使うことです。しかし、UNIX X 環境で最も一般的なエミュレータを含む、16 色の端末エミュレータでは暗く表示されます。ディスプレイがそれらのエミュレータの一つであることがわかっているならば、代わりに明るい色を使いたいと思うかもしれません。さらに良いのは、ユーザが自分の端末エミュレータに合わせて、あるアプリケーションの色を設定できるようにする方法を提供することです。</target>
        </trans-unit>
        <trans-unit id="695fd95569c58aad4ef775aef68eb765f2b01d11" translate="yes" xml:space="preserve">
          <source>There is whitespace at the beginning or the end of the contents of L&amp;lt;...&amp;gt;.</source>
          <target state="translated">L &amp;lt;...&amp;gt;の内容の最初または最後に空白があります。</target>
        </trans-unit>
        <trans-unit id="95a3b67169b42d8576a9c6b1e3142c83d233d818" translate="yes" xml:space="preserve">
          <source>There is/was a minor twist which makes this scheme fragile: what to do with DLLs loaded from</source>
          <target state="translated">このスキームを脆弱にするちょっとしたひねりがあります。</target>
        </trans-unit>
        <trans-unit id="3224e59e3b76dce8e510a893a97e615a7718acdb" translate="yes" xml:space="preserve">
          <source>There may be a few system-dependent issues of concern to EBCDIC Perl programmers.</source>
          <target state="translated">EBCDIC Perlプログラマにとって、システムに依存した問題がいくつかあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="74512965a00a9ef27998a0f76a590e7ca4e44a5a" translate="yes" xml:space="preserve">
          <source>There may be a slight performance decrease in the filetest operations when the filetest pragma is in effect, because checking bits is very cheap.</source>
          <target state="translated">filetest pragmaが有効な場合、ビットチェックは非常に安価なので、filetest操作では若干のパフォーマンス低下があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e5aefd712f7c17e18d56a8092421c803470327d8" translate="yes" xml:space="preserve">
          <source>There may be several other functions that have undefined behavior so this list shouldn't be considered complete.</source>
          <target state="translated">他にも未定義の動作をする関数がいくつかあるかもしれないので、このリストは完全なものとは考えられません。</target>
        </trans-unit>
        <trans-unit id="8f2ee1e9e100e424daf008c17d87249cb596b7da" translate="yes" xml:space="preserve">
          <source>There might be padding bytes between the fields to align the fields - the bytes can be anything</source>
          <target state="translated">フィールドを整列させるためにフィールド間にパディングバイトがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="8da2d0d0ae5db5c30555083a00bfa8e94e394bba" translate="yes" xml:space="preserve">
          <source>There seem to be various problems in this long double implementation. If Configure detects this brokenness, it will disable the long double support. This can be overriden with explicit &lt;code&gt;-Duselongdouble&lt;/code&gt; (or &lt;code&gt;-Dusemorebits&lt;/code&gt; , which enables both long doubles and 64 bit integers). If you decide to enable long doubles, for most of the broken things Perl has implemented workarounds, but the handling of the special values infinity and NaN remains badly broken: for example infinity plus zero results in NaN.</source>
          <target state="translated">この長い二重の実装にはさまざまな問題があるようです。Configureがこの問題を検出すると、long doubleのサポートが無効になります。これは、明示的な &lt;code&gt;-Duselongdouble&lt;/code&gt; （または &lt;code&gt;-Dusemorebits&lt;/code&gt; 、これはlong doubleと64ビット整数の両方を有効にする）でオーバーライドできます。長いdoubleを有効にすることにした場合、壊れたもののほとんどに対してPerlは回避策を実装しましたが、特別な値の無限大とNaNの処理はひどく壊れたままです。たとえば、無限大とゼロはNaNになります。</target>
        </trans-unit>
        <trans-unit id="0335b463034771ce67a8d72b65b51f2c22f06a51" translate="yes" xml:space="preserve">
          <source>There seems to be a broken system header file in HP-UX 11.00 that breaks perl building in 32bit mode with GNU gcc-4.x causing this error. The same file for HP-UX 11.11 (even though the file is older) does not show this failure, and has the correct definition, so the best fix is to patch the header to match:</source>
          <target state="translated">HP-UX 11.00には、壊れたシステムヘッダファイルがあるようで、GNU gcc-4.xで32bitモードでperlをビルドすると、このエラーの原因となります。HP-UX 11.11用の同じファイル(ファイルが古いにもかかわらず)では、このエラーは表示されず、正しい定義を持っているので、最善の修正はヘッダを一致するようにパッチを当てることです。</target>
        </trans-unit>
        <trans-unit id="06ff19d7cd54ce39cc7fc4ec7d77ca64eb5bbd76" translate="yes" xml:space="preserve">
          <source>There should be a second &lt;code&gt;&quot;:&quot;&lt;/code&gt; , like this:</source>
          <target state="translated">次のように、2番目の &lt;code&gt;&quot;:&quot;&lt;/code&gt; があるはずです。</target>
        </trans-unit>
        <trans-unit id="f721ea1c84751a36c3521319fb047aa7a307e4e5" translate="yes" xml:space="preserve">
          <source>There should be an operator before the &lt;code&gt;&quot;(&quot;&lt;/code&gt; , as there's no indication as to how the digits are to be combined with the characters in the Lao and Thai scripts.</source>
          <target state="translated">ラオス文字とタイ語の文字で数字と文字をどのように組み合わせるかについての指示がないため、 &lt;code&gt;&quot;(&quot;&lt;/code&gt; 前に演算子が必要です。</target>
        </trans-unit>
        <trans-unit id="b4b586b7cb9ac2ab75263a6f83deec69bb4720e3" translate="yes" xml:space="preserve">
          <source>There should be no test failures.</source>
          <target state="translated">テストの失敗はないはずです。</target>
        </trans-unit>
        <trans-unit id="6e7e045068e59967e564a49c6f93bb7b24be5931" translate="yes" xml:space="preserve">
          <source>There we're using the %USER_VARS hash instead of symbolic references. Sometimes this comes up in reading strings from the user with variable references and wanting to expand them to the values of your perl program's variables. This is also a bad idea because it conflates the program-addressable namespace and the user-addressable one. Instead of reading a string and expanding it to the actual contents of your program's own variables:</source>
          <target state="translated">ここでは、シンボリック参照の代わりに %USER_VARS ハッシュを使用しています。時々、これは変数参照でユーザから文字列を読み取って、それをperlプログラムの変数の値に展開したいときに出てきます。これはまた、プログラムでアドレス指定可能な名前空間とユーザでアドレス指定可能な名前空間を混同してしまうので、良くない考えです。文字列を読み込んで、それをプログラム自身の変数の実際の内容に展開するのではなく。</target>
        </trans-unit>
        <trans-unit id="42ff6f078c663dbcc013a189f161b1005798db67" translate="yes" xml:space="preserve">
          <source>There were at least two consecutive &lt;code&gt;=begin&lt;/code&gt; commands without the corresponding &lt;code&gt;=end&lt;/code&gt; . Only one &lt;code&gt;=begin&lt;/code&gt; may be active at a time.</source>
          <target state="translated">少なくとも2つの連続する &lt;code&gt;=begin&lt;/code&gt; コマンドがあり、対応する &lt;code&gt;=end&lt;/code&gt; がありませんでした。一度にアクティブにできる &lt;code&gt;=begin&lt;/code&gt; は1つだけです。</target>
        </trans-unit>
        <trans-unit id="f453a9d5941f2f68e4cfdb1b1ca5576cad8a3040" translate="yes" xml:space="preserve">
          <source>There were race conditions 1.x implementations of File::Path's &lt;code&gt;rmtree&lt;/code&gt; function (although sometimes patched depending on the OS distribution or platform). The 2.0 version contains code to avoid the problem mentioned in CVE-2002-0435.</source>
          <target state="translated">File :: Pathの &lt;code&gt;rmtree&lt;/code&gt; 関数の1.x実装の競合状態がありました（ただし、OSディストリビューションまたはプラットフォームによってはパッチが適用される場合があります）。2.0バージョンには、CVE-2002-0435で言及されている問題を回避するためのコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="78c41744f80fbb19ebe5f5b692cb01709180e04c" translate="yes" xml:space="preserve">
          <source>There were two things you could do, knowing this: be paranoid or be pragmatic. The paranoid approach was to do as little as possible in your signal handler. Set an existing integer variable that already has a value, and return. This doesn't help you if you're in a slow system call, which will just restart. That means you have to &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; to longjmp(3) out of the handler. Even this is a little cavalier for the true paranoiac, who avoids &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; in a handler because the system</source>
          <target state="translated">これを知ってできることは2つありました。偏執的であるか、実用的であるかです。偏執的なアプローチは、シグナルハンドラーでできる限り少ないことを行うことでした。すでに値を持つ既存の整変数を設定して戻ります。再起動するだけの遅いシステムコールの場合、これは役に立ちません。つまり、ハンドラーからlongjmp（3）で &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 必要があります。でも、これは避け、真の偏執狂のために少し無頓着であり、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; システムためのハンドラでは、</target>
        </trans-unit>
        <trans-unit id="73d8966c11e67db894b509268c4964e23520f68e" translate="yes" xml:space="preserve">
          <source>There will be less network overhead (and some efficiency in your program) if you specify either the udp or the icmp protocol. The tcp protocol will generate 2.5 times or more traffic for each ping than either udp or icmp. If many hosts are pinged frequently, you may wish to implement a small wait (e.g. 25ms or more) between each ping to avoid flooding your network with packets.</source>
          <target state="translated">udp または icmp プロトコルのどちらかを指定した方が、ネットワークのオーバーヘッドが少なくなります (プログラムの効率も上がります)。tcp プロトコルは udp や icmp の 2.5 倍以上のトラフィックを ping 毎に生成します。多くのホストが頻繁に ping される場合は、ネットワークにパケットが溢れないように、各 ping 間に少しの待ち時間 (例:25ms 以上)を設けるとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="6b418e4f885e0ed1944b1a75c443618ba49e064f" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s More Than One Way To Do It, the Perl Motto. The notion that there can be more than one valid path to solving a programming problem in context. (This doesn&amp;rsquo;t mean that more ways are always better or that all possible paths are equally desirable&amp;mdash;just that there need not be One True Way.)</source>
          <target state="translated">Perlのモットーは、それを行う方法が1つではありません。状況に応じてプログラミングの問題を解決するには、複数の有効なパスが存在する可能性があるという考え。（これは、より多くの方法が常に優れていること、またはすべての可能なパスが等しく望ましいことを意味するのではなく、1つの真の方法である必要はありません。）</target>
        </trans-unit>
        <trans-unit id="f28bb8331230709c36ed738881be6c54310d8343" translate="yes" xml:space="preserve">
          <source>There's More Than One Way to Do It</source>
          <target state="translated">ひとりではできないことがある</target>
        </trans-unit>
        <trans-unit id="2d73bf3d5d8029a31c5c535e944915e019e3d9d2" translate="yes" xml:space="preserve">
          <source>There's a corresponding &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; declaration that unimports meanings imported by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, i.e., it calls &lt;code&gt;unimport Module LIST&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;. It behaves just as &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; does with VERSION, an omitted or empty LIST, or no unimport method being found.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; によってインポートされた意味をunimports する、対応する &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 宣言があります。つまり、 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; ではなく &lt;code&gt;unimport Module LIST&lt;/code&gt; を呼び出します。これは、 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; がVERSION、省略または空のリスト、またはunimportメソッドが見つからない場合と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="899206f410877415c07b1eae00900c686b6ba014" translate="yes" xml:space="preserve">
          <source>There's a corresponding &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; declaration that unimports meanings imported by &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, i.e., it calls &lt;code&gt;unimport Module LIST&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;. It behaves just as &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; does with VERSION, an omitted or empty LIST, or no unimport method being found.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; によってインポートされた意味をunimports する、対応する &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 宣言があります。つまり、 &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; ではなく &lt;code&gt;unimport Module LIST&lt;/code&gt; を呼び出します。これは、 &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; がVERSION、省略または空のリスト、またはunimportメソッドが見つからない場合と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="5182f679e917b06933e3121044c80451fb98d666" translate="yes" xml:space="preserve">
          <source>There's a couple of useful ones to know about straight away. You wouldn't think we're using any libraries at all at the moment, but '&lt;b&gt;M&lt;/b&gt;' will show which modules are currently loaded, and their version number, while '&lt;b&gt;m&lt;/b&gt;' will show the methods, and '&lt;b&gt;S&lt;/b&gt;' shows all subroutines (by pattern) as shown below. '&lt;b&gt;V&lt;/b&gt;' and '&lt;b&gt;X&lt;/b&gt;' show variables in the program by package scope and can be constrained by pattern.</source>
          <target state="translated">すぐに知っておくと便利なものがいくつかあります。現時点でライブラリを使用しているとは思わないかもしれませんが、「&lt;b&gt;M&lt;/b&gt;」は現在ロードされているモジュールとそのバージョン番号を示し、「&lt;b&gt;m&lt;/b&gt;」はメソッドを示し、「&lt;b&gt;S&lt;/b&gt;」はすべてのサブルーチンを示します（パターン別）以下のようになります。 ' &lt;b&gt;V&lt;/b&gt; 'と ' &lt;b&gt;X&lt;/b&gt; 'はプログラム内の変数をパッケージスコープ別に示し、パターンで制約できます。</target>
        </trans-unit>
        <trans-unit id="18ae2cf96b3321649a9e67b52ce3c6b5c29a8066" translate="yes" xml:space="preserve">
          <source>There's a lot more to networking than this, but this should get you started.</source>
          <target state="translated">ネットワーキングにはこれ以外にもたくさんのことがありますが、これはあなたが始められるようにするためのものです。</target>
        </trans-unit>
        <trans-unit id="7dfd5539590f938c8db0768ae08c09cb62cf9574" translate="yes" xml:space="preserve">
          <source>There's a lot to know about character sets, and text encodings. It's probably best to spend a full day learning all this, but the basics can be learned in minutes.</source>
          <target state="translated">文字セットやテキストエンコーディングについて知っておくべきことはたくさんあります。これらすべてを丸一日かけて学ぶのがベストでしょうが、基本的なことは数分で習得できます。</target>
        </trans-unit>
        <trans-unit id="99ae85d03f4b582c99ff96216db7d59e44f17f54" translate="yes" xml:space="preserve">
          <source>There's a problem with &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt;: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end. You can avoid this problem by using &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt; に問題があります。作成したパイプの読み取り側のファイル番号を返しますが、もう一方のファイル番号を取得する方法はありません。代わりに &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; を使用することで、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="66cd02292a787335ff912b7d35685e3ae9e8fbc4" translate="yes" xml:space="preserve">
          <source>There's a problem with &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt;: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end. You can avoid this problem by using &lt;code&gt;&lt;a href=&quot;pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt; に問題があります。作成したパイプの読み取り側のファイル番号を返しますが、もう一方のファイル番号を取得する方法はありません。代わりに &lt;code&gt;&lt;a href=&quot;pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; を使用することで、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="e41e3a2378d95f98d33fb21414c6067f31a384cf" translate="yes" xml:space="preserve">
          <source>There's a slight complication under the hood of &lt;code&gt;Memoize&lt;/code&gt; : There are actually</source>
          <target state="translated">&lt;code&gt;Memoize&lt;/code&gt; のフードの下には少し複雑な問題があります。実際には</target>
        </trans-unit>
        <trans-unit id="5de903209b03670bb7672de0c3e9635cd117f5ca" translate="yes" xml:space="preserve">
          <source>There's a subtle trap lurking in the offing: Adding another field after the Short Message (in variable &lt;code&gt;$sm&lt;/code&gt; ) is all right when packing, but this cannot be unpacked naively:</source>
          <target state="translated">ちょっとした罠が潜んでいます：ショートメッセージ（変数 &lt;code&gt;$sm&lt;/code&gt; ）の後に別のフィールドを追加しても、パッキング時に問題はありませんが、単純にアンパックすることはできません。</target>
        </trans-unit>
        <trans-unit id="5136f0522d5206778ac4f88d48f4c827076f1a46" translate="yes" xml:space="preserve">
          <source>There's a wiki dedicated to the Test Anything Protocol:</source>
          <target state="translated">なんでもテストプロトコル専用のwikiがあるよ</target>
        </trans-unit>
        <trans-unit id="3b112374a474f8a64038b7df632984baece37394" translate="yes" xml:space="preserve">
          <source>There's also</source>
          <target state="translated">もあります。</target>
        </trans-unit>
        <trans-unit id="58a726895b66eba4d8724a2292f078a4d2648322" translate="yes" xml:space="preserve">
          <source>There's also a &lt;a href=&quot;http://search.cpan.org/perldoc/File::Tail&quot;&gt;File::Tail&lt;/a&gt; module from CPAN.</source>
          <target state="translated">CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/File::Tail&quot;&gt;File :: Tail&lt;/a&gt;モジュールもあります。</target>
        </trans-unit>
        <trans-unit id="035e86078ae3280a54d8fc426b353c9ce230b2ad" translate="yes" xml:space="preserve">
          <source>There's also a negated version of it:</source>
          <target state="translated">否定されているバージョンもあります。</target>
        </trans-unit>
        <trans-unit id="194f92c1842e4ee102fc7a284b9e315ab368c04c" translate="yes" xml:space="preserve">
          <source>There's also a negated version, for the same reason we have &lt;code&gt;unless&lt;/code&gt; :</source>
          <target state="translated">同じ理由で、以下の &lt;code&gt;unless&lt;/code&gt; 、否定バージョンもあります。</target>
        </trans-unit>
        <trans-unit id="ce23f5592e874ac51b717997ee3d4abcaf17d1eb" translate="yes" xml:space="preserve">
          <source>There's an &lt;code&gt;unmemoize&lt;/code&gt; function that you can import if you want to. Why would you want to? Here's an example: Suppose you have your cache tied to a DBM file, and you want to make sure that the cache is written out to disk if someone interrupts the program. If the program exits normally, this will happen anyway, but if someone types control-C or something then the program will terminate immediately without synchronizing the database. So what you can do instead is</source>
          <target state="translated">あります &lt;code&gt;unmemoize&lt;/code&gt; あなたがしたい場合は、インポートすることができ、その関数は。なぜあなたはしたいですか？次に例を示します。キャッシュがDBMファイルに関連付けられていて、誰かがプログラムに割り込んだ場合にキャッシュがディスクに書き込まれるようにしたいとします。プログラムが正常に終了する場合、これはとにかく起こりますが、誰かがcontrol-Cまたは何かを入力すると、データベースを同期せずにプログラムはすぐに終了します。代わりにできることは</target>
        </trans-unit>
        <trans-unit id="08ec3c4ec2591dd761c5a485e08fcf45d215a5be" translate="yes" xml:space="preserve">
          <source>There's an effort going on to document the internal functions and automatically produce reference manuals from them -- &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; is one such manual which details all the functions which are available to XS writers. &lt;a href=&quot;perlintern&quot;&gt;perlintern&lt;/a&gt; is the autogenerated manual for the functions which are not part of the API and are supposedly for internal use only.</source>
          <target state="translated">内部関数を文書化し、それらからリファレンスマニュアルを自動的に作成する取り組みが行われています&lt;a href=&quot;perlapi&quot;&gt;。perlapi&lt;/a&gt;は、XSライターが利用できるすべての関数を詳しく説明するマニュアルの1つです。&lt;a href=&quot;perlintern&quot;&gt;perlintern&lt;/a&gt;は、APIの一部ではない関数の自動生成マニュアルであり、内部使用のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="b109c22c8125d5fbc051e5882994774c0628f7aa" translate="yes" xml:space="preserve">
          <source>There's an example of this in &lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;). First, you put the terminal into &quot;no echo&quot; mode, then just read the password normally. You may do this with an old-style &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl()&lt;/a&gt;&lt;/code&gt; function, POSIX terminal control (see &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; or its documentation the Camel Book), or a call to the &lt;b&gt;stty&lt;/b&gt; program, with varying degrees of portability.</source>
          <target state="translated">これの例は&lt;a href=&quot;functions/crypt&quot;&gt;cryptにあります&lt;/a&gt;）。まず、端末を「エコーなし」モードにしてから、通常どおりパスワードを読み取ります。これは、旧式の &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl()&lt;/a&gt;&lt;/code&gt; 関数、POSIX端末制御（&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;またはそのドキュメント、Camel Bookを参照）、または移植性の程度が異なる&lt;b&gt;stty&lt;/b&gt;プログラムの呼び出しで行うことができます。</target>
        </trans-unit>
        <trans-unit id="1ee734c8b4d4a5b72b07450e993a31efdfcc81d2" translate="yes" xml:space="preserve">
          <source>There's an extraordinary number of people out there who don't appear to know anything about using the perl debugger, though they use the language every day. This is for them.</source>
          <target state="translated">毎日のようにperlデバッガを使っているのに、perlデバッガの使い方を何も知らないように見える人が異常に多いです。これは彼らのためのものです。</target>
        </trans-unit>
        <trans-unit id="36e675dcb566e351efbc0e3f85ec7104c90a083d" translate="yes" xml:space="preserve">
          <source>There's currently only one class that has a stable interface - CPAN::Shell. All commands that are available in the CPAN shell are methods of the class CPAN::Shell. The arguments on the commandline are passed as arguments to the method.</source>
          <target state="translated">現在、安定したインターフェイスを持つクラスは1つだけです-CPAN::Shell。CPAN シェルで利用できるすべてのコマンドは、クラス CPAN::Shell のメソッドです。コマンドライン上の引数は、メソッドの引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="f60d62cdc295d6cbdfb5f2a35e55c4e958719c10" translate="yes" xml:space="preserve">
          <source>There's even less need to distinguish between EBCDIC code pages, but to do so try looking at one or more of the characters that differ between them.</source>
          <target state="translated">EBCDICコードのページを区別する必要性はさらに少なくなりましたが、そのためには、1つまたは複数の異なる文字を見てみてください。</target>
        </trans-unit>
        <trans-unit id="241fd51f25450a5ab0b7ec2c19699d2410027de0" translate="yes" xml:space="preserve">
          <source>There's no builtin way to do this, but &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; has a couple of techniques to make it possible for the intrepid hacker.</source>
          <target state="translated">これを行う組み込みの方法はありませんが、&lt;a href=&quot;perlform&quot;&gt;perlformに&lt;/a&gt;は、勇敢なハッカーがこれを可能にするためのいくつかのテクニックがあります。</target>
        </trans-unit>
        <trans-unit id="5ace2a9bc7f6a90948438c072e0ce5f8cdc2b9bc" translate="yes" xml:space="preserve">
          <source>There's no feedback from this, but you can see what breakpoints are set by using the list 'L' command:</source>
          <target state="translated">これによるフィードバックはありませんが、リスト'L'コマンドでどのようなブレークポイントが設定されているかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="f521ff0638ee964aa0ea31d64e9248f45119c41c" translate="yes" xml:space="preserve">
          <source>There's no solution for this problem other than making the custom engine understand a construct like &lt;code&gt;(?:)&lt;/code&gt;.</source>
          <target state="translated">カスタムエンジンに &lt;code&gt;(?:)&lt;/code&gt; のような構造を理解させる以外に、この問題の解決策はありません。</target>
        </trans-unit>
        <trans-unit id="f42438ddafc8a1bac998273822622081c6567570" translate="yes" xml:space="preserve">
          <source>There's no strong security layer in CPAN.pm. CPAN.pm helps you to install foreign, unmasked, unsigned code on your machine. We compare to a checksum that comes from the net just as the distribution file itself. But we try to make it easy to add security on demand:</source>
          <target state="translated">CPAN.pmには強力なセキュリティ層がありません。CPAN.pmは、あなたのマシンに外国の、マスクされていない、署名されていないコードをインストールするのに役立ちます。私たちは、配布ファイル自体と同じようにネットから来るチェックサムと比較します。しかし、必要に応じて簡単にセキュリティを追加できるようにしています。</target>
        </trans-unit>
        <trans-unit id="794fc83a38998696363c5b95bfbda5c120c0de13" translate="yes" xml:space="preserve">
          <source>There's no way to tell if a &lt;code&gt;char *&lt;/code&gt; or &lt;code&gt;U8 *&lt;/code&gt; string is UTF-8 or not. But you can tell if an SV is to be treated as UTF-8 by calling &lt;code&gt;DO_UTF8&lt;/code&gt; on it, after stringifying it with &lt;code&gt;SvPV&lt;/code&gt; or a similar macro. And, you can tell if SV is actually UTF-8 (even if it is not to be treated as such) by looking at its &lt;code&gt;SvUTF8&lt;/code&gt; flag (again after stringifying it). Don't forget to set the flag if something should be UTF-8. Treat the flag as part of the PV, even though it's not -- if you pass on the PV to somewhere, pass on the flag too.</source>
          <target state="translated">&lt;code&gt;char *&lt;/code&gt; または &lt;code&gt;U8 *&lt;/code&gt; 文字列がUTF-8かどうかを判別する方法はありません。ただし、 &lt;code&gt;SvPV&lt;/code&gt; または同様のマクロで文字列化した後、 &lt;code&gt;DO_UTF8&lt;/code&gt; を呼び出して、SVをUTF-8として扱うかどうかを判断できます。また、 &lt;code&gt;SvUTF8&lt;/code&gt; フラグを（文字列化した後）確認することで、SVが実際にUTF-8であるかどうか（そのように扱わない場合でも）を確認できます。 UTF-8にする必要がある場合は、フラグを設定することを忘れないでください。フラグをPVの一部として扱いますが、そうではありません。PVをどこかに転送する場合は、フラグも渡します。</target>
        </trans-unit>
        <trans-unit id="dcc25cfc8a3ec732d1d2283e554b506992b75eb5" translate="yes" xml:space="preserve">
          <source>There's not a single way to run code in the background so you don't have to wait for it to finish before your program moves on to other tasks. Process management depends on your particular operating system, and many of the techniques are covered in &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="translated">バックグラウンドでコードを実行する単一の方法はないため、プログラムが他のタスクに進む前に、コードが完了するのを待つ必要はありません。プロセス管理は特定のオペレーティングシステムに依存し、多くの手法は&lt;a href=&quot;perlipc&quot;&gt;perlipcで&lt;/a&gt;カバーされています。</target>
        </trans-unit>
        <trans-unit id="d2aa5e3dbb927bd52349be7be623e623e64f5bf0" translate="yes" xml:space="preserve">
          <source>There's now some new C code that's been added to the .xs file. The purpose of the &lt;code&gt;constant&lt;/code&gt; routine is to make the values that are #define'd in the header file accessible by the Perl script (by calling either &lt;code&gt;TESTVAL&lt;/code&gt; or &lt;code&gt;&amp;amp;Mytest2::TESTVAL&lt;/code&gt; ). There's also some XS code to allow calls to the &lt;code&gt;constant&lt;/code&gt; routine.</source>
          <target state="translated">.xsファイルに追加された新しいCコードがいくつかあります。 &lt;code&gt;constant&lt;/code&gt; ルーチンの目的は、ヘッダーファイルで#defineされた値をPerlスクリプトで（ &lt;code&gt;TESTVAL&lt;/code&gt; または &lt;code&gt;&amp;amp;Mytest2::TESTVAL&lt;/code&gt; ）アクセスできるようにすることです。 &lt;code&gt;constant&lt;/code&gt; ルーチンへの呼び出しを可能にするいくつかのXSコードもあります。</target>
        </trans-unit>
        <trans-unit id="e3ac8386164e4284b824a87f18c211196212c066" translate="yes" xml:space="preserve">
          <source>There's one fine point I skipped. Line 5 is unnecessary, and we can get rid of it.</source>
          <target state="translated">1点だけ細かいところを飛ばしてしまいました。5行目は不要なので省略します。</target>
        </trans-unit>
        <trans-unit id="f039a4fa9d9f10c8752271acf6c5252496665e47" translate="yes" xml:space="preserve">
          <source>There's one more item to add to this list. Do &lt;b&gt;not&lt;/b&gt; export variable names. Just because &lt;code&gt;Exporter&lt;/code&gt; lets you do that, it does not mean you should.</source>
          <target state="translated">このリストに追加するアイテムがもう1つあります。変数名&lt;b&gt;は&lt;/b&gt;エクスポートし&lt;b&gt;ないで&lt;/b&gt;ください。 &lt;code&gt;Exporter&lt;/code&gt; でそれができるからといって、そうする必要があるわけではありません。</target>
        </trans-unit>
        <trans-unit id="23be60d3d8e40781087cd39d472decaae39f70d3" translate="yes" xml:space="preserve">
          <source>There, &quot;=shazbot&quot; will be parsed as a Pod command &quot;shazbot&quot;, not as a data paragraph &quot;=shazbot\n&quot;. However, you can express a data paragraph consisting of &quot;=shazbot\n&quot; using this code:</source>
          <target state="translated">ここでは、&quot;=shazbot &quot;は、データパラグラフ&quot;=shazbotn &quot;ではなく、Podコマンド &quot;shazbot &quot;として解析されます。しかし、このコードを使えば、&quot;=shazbot\n &quot;からなるデータパラグラフを表現することができます。</target>
        </trans-unit>
        <trans-unit id="d934ecae0b30d1837eb15a99e36faf1a189e093b" translate="yes" xml:space="preserve">
          <source>There, the &quot;=begin html&quot;...&quot;=end html&quot; region is nested inside the larger &quot;=begin :biblio&quot;...&quot;=end :biblio&quot; region. Note that the content of the &quot;=begin html&quot;...&quot;=end html&quot; region is data paragraph(s), because the immediately containing region's identifier (&quot;html&quot;)</source>
          <target state="translated">そこでは、&quot;=begin html&quot;...&quot;=end html &quot;領域は、より大きな&quot;=begin :biblio&quot;...&quot;=end :biblio &quot;領域の中に入れ子になっています。なお、&quot;=begin html&quot;...&quot;=end html &quot;領域の内容はデータパラグラフである。</target>
        </trans-unit>
        <trans-unit id="4c11e16e3b4c4d1c6c6291b739425f3d103ebc32" translate="yes" xml:space="preserve">
          <source>Therefor, we recommend to only use &lt;code&gt;lynx&lt;/code&gt; as a last resort. This is why it is at the back of our list of methods to try as well.</source>
          <target state="translated">したがって、最後の手段として &lt;code&gt;lynx&lt;/code&gt; のみを使用することをお勧めします。これが、試行するメソッドのリストの最後にある理由です。</target>
        </trans-unit>
        <trans-unit id="22f5648477726ba3de08027c1e14282ca2d62678" translate="yes" xml:space="preserve">
          <source>Therefore it is best to avoid &lt;code&gt;$Carp::CarpLevel&lt;/code&gt; . Instead use &lt;code&gt;@CARP_NOT&lt;/code&gt; , &lt;code&gt;%Carp::Internal&lt;/code&gt; and &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; .</source>
          <target state="translated">したがって、 &lt;code&gt;$Carp::CarpLevel&lt;/code&gt; を使用しないことをお勧めします。代わりに、 &lt;code&gt;@CARP_NOT&lt;/code&gt; 、 &lt;code&gt;%Carp::Internal&lt;/code&gt; および &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6d0e80030071251142bc856e7654aae9ae473e69" translate="yes" xml:space="preserve">
          <source>Therefore we can use the &lt;code&gt;O_FILES&lt;/code&gt; variable to tell MakeMaker to use these objects into the shared library.</source>
          <target state="translated">したがって、 &lt;code&gt;O_FILES&lt;/code&gt; 変数を使用して、これらのオブジェクトを共有ライブラリで使用するようMakeMakerに指示できます。</target>
        </trans-unit>
        <trans-unit id="bc549460f9ec0f5ba049505f7c5226ae9e2f8140" translate="yes" xml:space="preserve">
          <source>Therefore, if you make changes to $ENV{TZ} from inside a thread other than the main thread then those changes will not be seen by strftime if you subsequently call that with the %Z formatting code. You must change $ENV{TZ} in the main thread to have the desired effect in this case (and you must also call _tzset() in the main thread to register the environment change).</source>
          <target state="translated">したがって、メイン・スレッド以外のスレッドの内部から $ENV{TZ}に変更を加えた場合、その後に %Z の書式設定コードを使用してそのスレッドを呼び出しても、その変更は strftime には表示されません。この場合は、メインスレッド内で $ENV{TZ}を変更する必要があります (また、メインスレッド内で _tzset()を呼び出して環境の変更を登録する必要があります)。</target>
        </trans-unit>
        <trans-unit id="a9f8fba915c890e8c346b81a259121ea682217ff" translate="yes" xml:space="preserve">
          <source>Therefore, if you want your scripts to be able to run on all versions of Perl, you should call &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; explicitly and not rely on automatic closing.</source>
          <target state="translated">したがって、スクリプトをすべてのバージョンのPerlで実行できるようにする場合は、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; を明示的に呼び出し、自動クローズに依存しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="b60bd02288d8270eaef5b4fd58dd4835333cea91" translate="yes" xml:space="preserve">
          <source>Therefore, populate such variables &lt;b&gt;after&lt;/b&gt; declaring them as shared. (Scalar and scalar refs are not affected by this problem.)</source>
          <target state="translated">したがって、そのような変数は、共有されていると宣言して&lt;b&gt;から&lt;/b&gt;入力してください。（スカラーおよびスカラー参照は、この問題の影響を受けません。）</target>
        </trans-unit>
        <trans-unit id="fd4c5f1975f02e1f013464b5926b49a349d976cd" translate="yes" xml:space="preserve">
          <source>Therefore, recursion should normally be avoided, but is nonetheless supported.</source>
          <target state="translated">したがって、再帰は通常は避けるべきですが、それにもかかわらずサポートされています。</target>
        </trans-unit>
        <trans-unit id="db068f38c67a6942c06b6242bd31cfce066e66c2" translate="yes" xml:space="preserve">
          <source>Therefore, when both -f and -t are omitted, &lt;b&gt;piconv&lt;/b&gt; just acts like &lt;b&gt;cat&lt;/b&gt;.</source>
          <target state="translated">したがって、-fと-tの両方を省略した場合、&lt;b&gt;piconvは&lt;/b&gt;単に&lt;b&gt;catの&lt;/b&gt;ように動作します。</target>
        </trans-unit>
        <trans-unit id="2f61899aa2182fe38363f4a728d368f7dbd80080" translate="yes" xml:space="preserve">
          <source>Therefore, when serializing hooks are involved,</source>
          <target state="translated">そのため、フックのシリアライズが絡んでくると</target>
        </trans-unit>
        <trans-unit id="c563bb79b9bbcc9436e0f964c49bd1fc0638d285" translate="yes" xml:space="preserve">
          <source>These #vars represent opcode properties that you may want as part of your rendering. The '#' is intended as a private sigil; a #var's value is interpolated into the style-line, much like &quot;read $this&quot;.</source>
          <target state="translated">これらの #var は、レンダリングの一部として必要なオペコードのプロパティを表しています。'#' はプライベートなシグルとして意図されています;#var の値は &quot;read $this&quot; のようにスタイルラインに補間されます。</target>
        </trans-unit>
        <trans-unit id="8f188e4230a9960392a0f6434bcd9cdb687b2105" translate="yes" xml:space="preserve">
          <source>These actually run the tests, analogous to the functions in Test::More.</source>
          <target state="translated">これらは実際にテストを実行するもので、Test::More の関数に似ています。</target>
        </trans-unit>
        <trans-unit id="47b609b8bdbe47393836decca9fbf56107eb37fe" translate="yes" xml:space="preserve">
          <source>These all match a single codepoint with the given property. Use &lt;code&gt;\P&lt;/code&gt; in place of &lt;code&gt;\p&lt;/code&gt; to match one codepoint lacking that property.</source>
          <target state="translated">これらはすべて、特定のプロパティを持つ単一のコードポイントに一致します。 &lt;code&gt;\p&lt;/code&gt; 代わりに &lt;code&gt;\P&lt;/code&gt; を使用して、そのプロパティがない1つのコードポイントに一致させます。</target>
        </trans-unit>
        <trans-unit id="14b0e821748bdb374700b2c0b377f04dafebe4c2" translate="yes" xml:space="preserve">
          <source>These all might have problems handling infinity right.</source>
          <target state="translated">これらはすべて、無限大の権利の処理に問題があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f193401280223b6d90ef40113a3483800172634b" translate="yes" xml:space="preserve">
          <source>These are Locale::Maketext's assumptions about the class hierarchy formed by all your language classes:</source>
          <target state="translated">これらは、すべての言語クラスによって形成されるクラス階層に関するLocale::Maketextの仮定です。</target>
        </trans-unit>
        <trans-unit id="7d93f149b189abdf70833601535a585584795222" translate="yes" xml:space="preserve">
          <source>These are Perl bindings for the Gtk toolkit ( &lt;a href=&quot;http://www.gtk.org&quot;&gt;http://www.gtk.org&lt;/a&gt; ). The interface changed significantly between versions 1 and 2 so they have separate Perl modules. It runs under Unix, Win32 and Mac OS X (currently it requires an X server on Mac OS, but a 'native' port is underway), and the widgets look the same on every platform: i.e., they don't match the native widgets. As with Wx, the Perl bindings follow the C API closely, and the documentation requires you to read the C documentation to understand it.</source>
          <target state="translated">これらは、Gtkツールキット（&lt;a href=&quot;http://www.gtk.org&quot;&gt;http://www.gtk.org&lt;/a&gt;）用のPerlバインディングです。バージョン1と2の間でインターフェースが大幅に変更されたため、Perlモジュールが別々になっています。Unix、Win32、Mac OS X（現在、Mac OSではXサーバーが必要ですが、「ネイティブ」ポートが進行中です）で実行され、ウィジェットはすべてのプラットフォームで同じに見えます。つまり、ウィジェットはネイティブと一致しませんウィジェット。Wxの場合と同様に、PerlバインディングはC APIに厳密に従っており、ドキュメントではそれを理解するためにCドキュメントを読む必要があります。</target>
        </trans-unit>
        <trans-unit id="06cca08d46609adb849cad691c3d195ff57274e9" translate="yes" xml:space="preserve">
          <source>These are a few notes describing features peculiar to Plan 9 Perl. As such, it is not intended to be a replacement for the rest of the Perl 5 documentation (which is both copious and excellent). If you have any questions to which you can't find answers in these man pages, contact Luther Huffman at lutherh@stratcom.com and we'll try to answer them.</source>
          <target state="translated">これらは Plan 9 Perl に特有の機能を記述したいくつかのメモです。このように、Perl 5 の残りのドキュメント (豊富で優れたものです)の代わりになることを意図したものではありません。これらのマニュアル・ページに答えが見つからない質問がある場合は、Luther Huffman(lutherh@stratcom.com)に連絡してください。</target>
        </trans-unit>
        <trans-unit id="035e487505e2bd7d2a574e14eebe3b30a69fa1a9" translate="yes" xml:space="preserve">
          <source>These are a hotchpotch of opcodes still waiting to be considered</source>
          <target state="translated">これらは、まだ考慮されるのを待っているオペコードのホットポットです。</target>
        </trans-unit>
        <trans-unit id="ab597ea19704a4092bef6ea8610d0145fc3acd27" translate="yes" xml:space="preserve">
          <source>These are all &quot;getters&quot; which return the data set for these attributes during object construction.</source>
          <target state="translated">これらはすべて、オブジェクトの構築中にこれらの属性のデータセットを返す「ゲッター」です。</target>
        </trans-unit>
        <trans-unit id="c6ad141ea95625d5f83dc60a511981417685e463" translate="yes" xml:space="preserve">
          <source>These are also the typical steps involved in writing a computer program. This makes perfect sense, because regular expressions are essentially programs written in a little computer language that specifies patterns.</source>
          <target state="translated">これらは、コンピュータプログラムを書く際の典型的なステップでもあります。なぜなら、正規表現は基本的にパターンを指定する小さなコンピュータ言語で書かれたプログラムだからです。</target>
        </trans-unit>
        <trans-unit id="c614a56da53c8268e03927a0382855aa589c9ffe" translate="yes" xml:space="preserve">
          <source>These are alternate syntaxes for &lt;code&gt;decode('utf8', ...)&lt;/code&gt; and &lt;code&gt;encode('utf8',
...)&lt;/code&gt; .</source>
          <target state="translated">これらは、 &lt;code&gt;decode('utf8', ...)&lt;/code&gt; および &lt;code&gt;encode('utf8', ...)&lt;/code&gt; 代替構文です。</target>
        </trans-unit>
        <trans-unit id="a504c2130962ba4555e63c517df7cfb6c3415a56" translate="yes" xml:space="preserve">
          <source>These are based on what command.com does on Win98. They may be wrong for other Windows shells, I don't know.</source>
          <target state="translated">これらは、command.com が Win98 で行うことをベースにしています。他のWindowsシェルでは間違っているかもしれませんが、私は知りません。</target>
        </trans-unit>
        <trans-unit id="2c07d55f7a2a925e22fec82104bd39d3cabc4301" translate="yes" xml:space="preserve">
          <source>These are called mid-endian, middle-endian, mixed-endian, or just weird.</source>
          <target state="translated">これらをミッドエンディアン、ミドルエンディアン、ミックスエンディアン、ただの変人と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="3a9105b34a20a7fdd4e6d997e3a1e1ad31f3f321" translate="yes" xml:space="preserve">
          <source>These are covered in the following section.</source>
          <target state="translated">これらについては、次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="543fcf9df34b75f159b226a9706c32a67f612f3d" translate="yes" xml:space="preserve">
          <source>These are effectively no-ops.</source>
          <target state="translated">これらは事実上のノーオペです。</target>
        </trans-unit>
        <trans-unit id="f6dbfbbee534ca87c61eabe600b034f42390dde5" translate="yes" xml:space="preserve">
          <source>These are equivalent</source>
          <target state="translated">これらは等価です。</target>
        </trans-unit>
        <trans-unit id="2c34193d065093cc77699a0d9ca713a7565b5a4e" translate="yes" xml:space="preserve">
          <source>These are fetched from one or more mirrored CPAN (Comprehensive Perl Archive Network) sites and unpacked in a dedicated directory.</source>
          <target state="translated">これらは、1つ以上のミラーリングされたCPAN (Comprehensive Perl Archive Network)サイトから取得され、専用のディレクトリに展開されます。</target>
        </trans-unit>
        <trans-unit id="1218c4eafb2ac24b7f5a6bfc47e38d53cda6dbb8" translate="yes" xml:space="preserve">
          <source>These are fprintf()/vfprintf() equivalents.</source>
          <target state="translated">これらは fprintf()/vfprintf()と同等のものです。</target>
        </trans-unit>
        <trans-unit id="c9080846b04ed2aaef61ea34f53f7101d2c5f347" translate="yes" xml:space="preserve">
          <source>These are functions for searching through directory trees doing work on each file found similar to the Unix</source>
          <target state="translated">これらの機能は、ディレクトリツリーを検索するための機能で、Unix の</target>
        </trans-unit>
        <trans-unit id="82d3c39fd0ecabf1c8dc2de9284d7be1c98f1d46" translate="yes" xml:space="preserve">
          <source>These are general guidelines for how to write POD documentation for Perl scripts and modules, based on general guidelines for writing good UNIX man pages. All of these guidelines are, of course, optional, but following them will make your documentation more consistent with other documentation on the system.</source>
          <target state="translated">これらは、優れた UNIX man ページを書くための一般的なガイドラインに基づいた、Perl スクリプトやモジュールのための POD ドキュメンテーションの書き方の一般的なガイドラインです。もちろん、これらのガイドラインはすべて任意ですが、これらのガイドラインに従うことで、システム上の他のドキュメントとの整合性を高めることができます。</target>
        </trans-unit>
        <trans-unit id="dad0e81d2d1dfbeb7b354f138de6b73ae95d9158" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl from source. This version of Perl requires the dynamic linking support that is found in OpenVOS Release 17.1 and thus is not supported on OpenVOS Release 17.0 or earlier releases.</source>
          <target state="translated">これらは、ソースから Perl をビルドするための手順です。このバージョンのPerlは、OpenVOS Release 17.1で見られる動的リンクのサポートを必要とするため、OpenVOS Release 17.0以前のリリースではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c8591b5e35cdacaa99ac7aebf4d9655f41e44d08" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl under DOS (or w??), using DJGPP v2.03 or later. Under w95 long filenames are supported.</source>
          <target state="translated">DJGPP v2.03 以降を使用して、DOS (または w?)上で Perl をビルドするための手順です。w95以下では長いファイル名がサポートされています。</target>
        </trans-unit>
        <trans-unit id="1ebba6a1db0c9a0e274e92574c949eaf7a4b8fb7" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl under Windows 2000 and later.</source>
          <target state="translated">Windows 2000以降でPerlを構築するための手順です。</target>
        </trans-unit>
        <trans-unit id="56039c5fbea93b2739212ecaf27c30cc3edfb9c5" translate="yes" xml:space="preserve">
          <source>These are intended to be services performed by the clients of this API.</source>
          <target state="translated">これらは、このAPIのクライアントによって実行されるサービスを意図しています。</target>
        </trans-unit>
        <trans-unit id="6d5e58ad94dd8e12f40343c4fe00cb855a20e455" translate="yes" xml:space="preserve">
          <source>These are just the most common definitions of &lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\r&lt;/code&gt; in Perl. There may well be others. For example, on an EBCDIC implementation such as z/OS (OS/390) or OS/400 (using the ILE, the PASE is ASCII-based) the above material is similar to &quot;Unix&quot; but the code numbers change:</source>
          <target state="translated">これらは、Perl での &lt;code&gt;\n&lt;/code&gt; と &lt;code&gt;\r&lt;/code&gt; の最も一般的な定義です。他にもあるかもしれません。たとえば、z / OS（OS / 390）またはOS / 400（ILEを使用し、PASEはASCIIベース）などのEBCDIC実装では、上記の内容は「Unix」に似ていますが、コード番号が変更されています。</target>
        </trans-unit>
        <trans-unit id="e2a1ebead9f267c39fe9da94bb4791dac090d0bc" translate="yes" xml:space="preserve">
          <source>These are low-level functions to extract and use capabilities from a terminal capability (termcap) database.</source>
          <target state="translated">これらは、ターミナルケイパビリティ(termcap)データベースからケイパビリティを抽出して使用するための低レベルの関数です。</target>
        </trans-unit>
        <trans-unit id="6e1b104453fcd9be9aa03bca5a6390babe809d8b" translate="yes" xml:space="preserve">
          <source>These are methods that you may find it handy to use, generally from %Lexicon routines of yours (whether expressed as Bracket Notation or not).</source>
          <target state="translated">これらのメソッドは、一般的にはあなたの %Lexicon ルーチン (ブラケット記法で表現されているかどうかにかかわらず)から使用すると便利だと思われるメソッドです。</target>
        </trans-unit>
        <trans-unit id="9a95859137ef50d66689fe259453639b6dce722a" translate="yes" xml:space="preserve">
          <source>These are methods which are used in the course of writing a test but are not themselves tests.</source>
          <target state="translated">これらはテストを書く過程で使用されるメソッドですが、それ自体はテストではありません。</target>
        </trans-unit>
        <trans-unit id="14859e3783966bf81d1767be73584f0ff1e6b683" translate="yes" xml:space="preserve">
          <source>These are methods which help writing cross-platform code.</source>
          <target state="translated">これらは、クロスプラットフォームのコードを書くのに役立つメソッドです。</target>
        </trans-unit>
        <trans-unit id="10fcdff63f0636b8e542860baaf4e1184f58638e" translate="yes" xml:space="preserve">
          <source>These are methods which produce make targets.</source>
          <target state="translated">メークターゲットを生成する方法です。</target>
        </trans-unit>
        <trans-unit id="5242bfa15c97f14acba2cd2d00dbeca39084930f" translate="yes" xml:space="preserve">
          <source>These are most easily explained from the bottom up.</source>
          <target state="translated">これらは、最も簡単に底辺から説明することができます。</target>
        </trans-unit>
        <trans-unit id="eff3d42df745b107b6d797477e3d4e7f8d24cab3" translate="yes" xml:space="preserve">
          <source>These are not the very basics, though. It is assumed that you already know the difference between bytes and characters, and realise (and accept!) that there are many different character sets and encodings, and that your program has to be explicit about them. Recommended reading is &quot;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)&quot; by Joel Spolsky, at &lt;a href=&quot;http://joelonsoftware.com/articles/Unicode.html&quot;&gt;http://joelonsoftware.com/articles/Unicode.html&lt;/a&gt;.</source>
          <target state="translated">ただし、これらは基本的なものではありません。あなたはすでにバイトと文字の違いを知っており、多くの異なる文字セットとエンコーディングがあり、プログラムがそれらについて明示的でなければならないことを理解（そして受け入れ！）すると仮定しています。推奨される読み物は、&lt;a href=&quot;http://joelonsoftware.com/articles/Unicode.html&quot;&gt;http：&lt;/a&gt; //joelonsoftware.com/articles/Unicode.htmlにあるJoel Spolskyによる「Unicodeと文字セットについて絶対に確実に知っておく必要のある絶対的な最小値（言い訳なし！）」です。</target>
        </trans-unit>
        <trans-unit id="3cbc1741b6d34271e2ec1a26ca7d6418baa0ebb4" translate="yes" xml:space="preserve">
          <source>These are only present when &lt;code&gt;netorder&lt;/code&gt; is FALSE. These are the sizes of various C datatypes of the perl that created this image. These must match the current perl for the image to be readable by Storable.</source>
          <target state="translated">これらは &lt;code&gt;netorder&lt;/code&gt; がFALSEの場合にのみ存在します。これらは、このイメージを作成したperlのさまざまなCデータ型のサイズです。Storableでイメージを読み取るには、これらが現在のperlと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="920887e803f6cf14e09050db36f20df3c6ead9d1" translate="yes" xml:space="preserve">
          <source>These are only supported if your system has &amp;lt;</source>
          <target state="translated">これらは、システムに&amp;lt;</target>
        </trans-unit>
        <trans-unit id="140e31bd5bffd898fd2913825a2d2d23dcf95138" translate="yes" xml:space="preserve">
          <source>These are pairwise exclusive, i.e. compact or loose, vt or ascii.</source>
          <target state="translated">これらはペアワイズエクスクルーシブ、すなわち、コンパクトまたはルーズ、vtまたはアスキーです。</target>
        </trans-unit>
        <trans-unit id="ee44bfea63f0502e44e3769d9962bf8126742be7" translate="yes" xml:space="preserve">
          <source>These are passed in to your plugin's &lt;code&gt;load()&lt;/code&gt; class method (if it has one), along with a reference to the &lt;code&gt;App::Prove&lt;/code&gt; object that is invoking your plugin:</source>
          <target state="translated">これらは、プラグインの &lt;code&gt;load()&lt;/code&gt; クラスメソッド（存在する場合）に、プラグインを呼び出している &lt;code&gt;App::Prove&lt;/code&gt; オブジェクトへの参照とともに渡されます。</target>
        </trans-unit>
        <trans-unit id="87db38161fab9301a6c38e350a75487ce9dba0c7" translate="yes" xml:space="preserve">
          <source>These are readline issues and can only be fixed by studying readline configuration on your architecture and adjusting the referenced file accordingly. Please make a backup of the &lt;code&gt;/etc/inputrc&lt;/code&gt; or &lt;code&gt;~/.inputrc&lt;/code&gt; and edit them. Quite often harmless changes like uppercasing or lowercasing some arguments solves the problem.</source>
          <target state="translated">これらはreadlineの問題であり、アーキテクチャーのreadline構成を調査し、それに応じて参照ファイルを調整することによってのみ修正できます。 &lt;code&gt;/etc/inputrc&lt;/code&gt; または &lt;code&gt;~/.inputrc&lt;/code&gt; バックアップを作成して編集してください。一部の引数を大文字または小文字にするなど、かなり無害な変更で問題が解決することがよくあります。</target>
        </trans-unit>
        <trans-unit id="b38ff2c237d2189cfc8068063c988ad558800625" translate="yes" xml:space="preserve">
          <source>These are scripts which will check the source things like ANSI C violations, POD encoding issues, etc.</source>
          <target state="translated">これらは、ANSI C の違反や POD のエンコーディングの問題などのソースをチェックするスクリプトです。</target>
        </trans-unit>
        <trans-unit id="08a1e3d5222d26c7ad00377b2f49dd3e19a69282" translate="yes" xml:space="preserve">
          <source>These are shortcuts for &lt;code&gt;$token-&amp;gt;tag() eq &lt;i&gt;somestring&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">これらは &lt;code&gt;$token-&amp;gt;tag() eq &lt;i&gt;somestring&lt;/i&gt;&lt;/code&gt; &lt;i&gt;somestringの&lt;/i&gt;ショートカットです&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="34937e959a1c366f5128e5b9fde3a8ddb4bd5e6f" translate="yes" xml:space="preserve">
          <source>These are similar to article(), body() and head(), but rather than returning the requested data directly, they return a tied filehandle from which to read the article.</source>
          <target state="translated">これらは article()、body()、head()に似ていますが、要求されたデータを直接返すのではなく、記事を読むための紐付きファイルハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="992979db9b32df20ed312f9df292c8122981c5bf" translate="yes" xml:space="preserve">
          <source>These are the files in the Perl release that contain references to Cygwin. These very brief notes attempt to explain the reason for all conditional code. Hopefully, keeping this up to date will allow the Cygwin port to be kept as clean as possible.</source>
          <target state="translated">これらは、Cygwinへの参照を含むPerlリリースのファイルです。これらの非常に簡単なメモは、すべての条件付きコードの理由を説明しようとしています。うまくいけば、これを最新の状態に保つことで、Cygwinの移植版を可能な限りクリーンな状態に保つことができます。</target>
        </trans-unit>
        <trans-unit id="75ac46c3e2da8e520c552d106b13b25422f4ae84" translate="yes" xml:space="preserve">
          <source>These are the functions that are available, they may either be called as functions or class methods:</source>
          <target state="translated">これらは利用可能な関数で、関数として呼ばれることもあれば、クラスメソッドとして呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="da1f03a776fe8bedafea0b23935ca2ad13f5c2fe" translate="yes" xml:space="preserve">
          <source>These are the hash data structures that are available:</source>
          <target state="translated">これらが利用可能なハッシュデータ構造体です。</target>
        </trans-unit>
        <trans-unit id="321abf696e1ac3f1c7e8ae4631a3e0352eed8069" translate="yes" xml:space="preserve">
          <source>These are the same as color('attribute') and can be used if you prefer typing:</source>
          <target state="translated">これらはcolor('attribute')と同じで、タイピングを好む場合に使用することができます。</target>
        </trans-unit>
        <trans-unit id="4187810dcd65ec8ff13d408cac42774a760ce9e6" translate="yes" xml:space="preserve">
          <source>These are the signals which a program might normally expect to encounter and which by default cause it to terminate. They are HUP, INT, PIPE and TERM.</source>
          <target state="translated">これらは、プログラムが通常遭遇するであろうシグナルであり、デフォルトではプログラムを終了させるシグナルです。HUP、INT、PIPE、TERM です。</target>
        </trans-unit>
        <trans-unit id="50c4067312fedca516066cb81563c6787bf50478" translate="yes" xml:space="preserve">
          <source>These are the signals which were trapped by default by the old &lt;b&gt;sigtrap&lt;/b&gt; interface, they are ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT, SEGV, SYS, TERM, and TRAP. If no signals or signals lists are passed to &lt;b&gt;sigtrap&lt;/b&gt;, this list is used.</source>
          <target state="translated">これらは、古い&lt;b&gt;sigtrap&lt;/b&gt;インターフェイスによってデフォルトでトラップされた信号であり、ABRT、BUS、EMT、FPE、ILL、PIPE、QUIT、SEGV、SYS、TERM、およびTRAPです。シグナルまたはシグナルリストが&lt;b&gt;sigtrap&lt;/b&gt;に渡されない場合、このリストが使用されます。</target>
        </trans-unit>
        <trans-unit id="cea91aaa564fccd3f4852969e3ebc12f20249663" translate="yes" xml:space="preserve">
          <source>These are the six methods that are exported as default.</source>
          <target state="translated">以上がデフォルトでエクスポートされる6つのメソッドです。</target>
        </trans-unit>
        <trans-unit id="107044185540681260f831f30270844d122d9842" translate="yes" xml:space="preserve">
          <source>These are the things that you can put in the parameters to plan:</source>
          <target state="translated">これらは計画を立てるためのパラメータに入れるものです。</target>
        </trans-unit>
        <trans-unit id="cae5aa495786f78d7786c67162eeac298ded8720" translate="yes" xml:space="preserve">
          <source>These are to do with constructing a language handle:</source>
          <target state="translated">これらは、言語ハンドルを構築するためのものです。</target>
        </trans-unit>
        <trans-unit id="25e9dcb05d530b0eaaf353a6122269805fd5136a" translate="yes" xml:space="preserve">
          <source>These are useful shortcuts to save on the typing.</source>
          <target state="translated">これらは、タイピングの手間を省くための便利なショートカットです。</target>
        </trans-unit>
        <trans-unit id="20957167192887677e71195c4861c8a5596fbdd0" translate="yes" xml:space="preserve">
          <source>These are valid only on ASCII platforms. Starting in Perl v5.22, simply changing the octal constants to equivalent &lt;code&gt;\N{U+...}&lt;/code&gt; values makes them portable:</source>
          <target state="translated">これらはASCIIプラットフォームでのみ有効です。Perl v5.22以降では、8進定数を同等の &lt;code&gt;\N{U+...}&lt;/code&gt; 値に変更するだけで移植可能になります。</target>
        </trans-unit>
        <trans-unit id="a8c3820acf49b8050b73972a9c61ce1cf6f1d9df" translate="yes" xml:space="preserve">
          <source>These are versions of the macros which take an explicit interpreter as an argument.</source>
          <target state="translated">これらは、引数として明示的なインタプリタを取るマクロのバージョンです。</target>
        </trans-unit>
        <trans-unit id="b056cc5f487123530dc637016a4d1c22c28e035c" translate="yes" xml:space="preserve">
          <source>These are:</source>
          <target state="translated">これらは</target>
        </trans-unit>
        <trans-unit id="16d16f3cffc4ac9689654ee5a738c8ecadd74b82" translate="yes" xml:space="preserve">
          <source>These can all be disabled with</source>
          <target state="translated">これらはすべて</target>
        </trans-unit>
        <trans-unit id="e41fb2d0ecca05f4e2a4a44f51aab35f28ed5c33" translate="yes" xml:space="preserve">
          <source>These can be combined into a single regexp with a three-way alternation:</source>
          <target state="translated">これらは三者交替で一つの正規表現にまとめることができます。</target>
        </trans-unit>
        <trans-unit id="70b66993a553be0939fc1c087fcb0c54c5cdbbb0" translate="yes" xml:space="preserve">
          <source>These cases below violate the &quot;remainder has the sign of the second of the two arguments&quot;, since they wouldn't match up otherwise.</source>
          <target state="translated">以下のケースは、そうでなければ一致しないので、「残りは2つの論証のうち2番目の論証の符号を持つ」に違反しています。</target>
        </trans-unit>
        <trans-unit id="1fd6f63888a958514d8ebfc5074b3f479f8a49f9" translate="yes" xml:space="preserve">
          <source>These classes correspond in the obvious way to the underlying C structures of similar names. The inheritance hierarchy mimics the underlying C &quot;inheritance&quot;:</source>
          <target state="translated">これらのクラスは、類似した名前の C 言語の構造体に対応しています。継承階層は、基礎となるCの「継承」を模倣しています。</target>
        </trans-unit>
        <trans-unit id="5f11a03556aad53a0a7bc63133f793375ad1dc66" translate="yes" xml:space="preserve">
          <source>These code blocks can be prefixed with &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; to give the appearance of a subroutine (although this is not considered good style). One should note that these code blocks don't really exist as named subroutines (despite their appearance). The thing that gives this away is the fact that you can have &lt;b&gt;more than one&lt;/b&gt; of these code blocks in a program, and they will get &lt;b&gt;all&lt;/b&gt; executed at the appropriate moment. So you can't execute any of these code blocks by name.</source>
          <target state="translated">これらのコードブロックの前に &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; を付けて、サブルーチンの外観を与えることができます（ただし、これは良いスタイルとは見なされません）。これらのコードブロックは実際には名前付きサブルーチンとしては存在しないことに注意してください（それらの外観にもかかわらず）。これを実現するのは、プログラム内にこれらのコードブロックを&lt;b&gt;複数&lt;/b&gt;持つことができ、適切なときに&lt;b&gt;すべて&lt;/b&gt;実行されるという事実です。したがって、これらのコードブロックを名前で実行することはできません。</target>
        </trans-unit>
        <trans-unit id="97b3b7dd37ba8a222332eb2984faedc72082d594" translate="yes" xml:space="preserve">
          <source>These commands take any number of arguments and investigate what is necessary to perform the action. Argument processing is as follows:</source>
          <target state="translated">これらのコマンドは任意の数の引数を取り、アクションを実行するために必要なものを調べます。引数の処理は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1935b5d017d485fb4c9165c42281556d84b0d309" translate="yes" xml:space="preserve">
          <source>These compile phase keywords are documented in &lt;a href=&quot;../perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;BEGIN, UNITCHECK, CHECK, INIT and END in perlmod&lt;/a&gt;.</source>
          <target state="translated">これらのコンパイルフェーズキーワードは&lt;a href=&quot;../perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;、perlmodのBEGIN、UNITCHECK、CHECK、INIT、およびENDで説明されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d7f96e99d050cd5ba24ce3555c69d5626ea1ddfe" translate="yes" xml:space="preserve">
          <source>These compile phase keywords are documented in &lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;BEGIN, UNITCHECK, CHECK, INIT and END in perlmod&lt;/a&gt;.</source>
          <target state="translated">これらのコンパイルフェーズキーワードは&lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;、perlmodのBEGIN、UNITCHECK、CHECK、INIT、およびENDで説明されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="97251eb9b01071889514a18b4c3f732daa85a7b2" translate="yes" xml:space="preserve">
          <source>These constants are not imported by &lt;code&gt;IO::Compress::Zip&lt;/code&gt; by default.</source>
          <target state="translated">これらの定数は、デフォルトでは &lt;code&gt;IO::Compress::Zip&lt;/code&gt; によってインポートされません。</target>
        </trans-unit>
        <trans-unit id="4a9cdeb250fa9e2cb61227f4240cb75a90c2a763" translate="yes" xml:space="preserve">
          <source>These constants can also be used with fully qualified names, eg. &lt;code&gt;SDBM_File::PAGFEXT&lt;/code&gt; .</source>
          <target state="translated">これらの定数は、完全修飾名でも使用できます。 &lt;code&gt;SDBM_File::PAGFEXT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b24ced089c50142be624d4fe7279d5e7e8267bf6" translate="yes" xml:space="preserve">
          <source>These conversions are governed by the following general rules:</source>
          <target state="translated">これらの変換は、以下の一般的なルールに準拠しています。</target>
        </trans-unit>
        <trans-unit id="8ebb9f4990eefbf7af18e7f37f2d673045cd0b59" translate="yes" xml:space="preserve">
          <source>These conversions are invoked according to context as necessary. For example, the subroutine for &lt;code&gt;'&quot;&quot;'&lt;/code&gt; (stringify) may be used where the overloaded object is passed as an argument to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, and that for &lt;code&gt;'bool'&lt;/code&gt; where it is tested in the condition of a flow control statement (like &lt;code&gt;while&lt;/code&gt; ) or the ternary &lt;code&gt;?:&lt;/code&gt; operation.</source>
          <target state="translated">これらの変換は、必要に応じてコンテキストに応じて呼び出されます。たとえば、オーバーロードされたオブジェクトが &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; の引数として渡される場合は &lt;code&gt;'&quot;&quot;'&lt;/code&gt; （stringify）のサブルーチンを使用し、フロー制御ステートメントの条件（ &lt;code&gt;while&lt;/code&gt; のように）でテストされる &lt;code&gt;'bool'&lt;/code&gt; 場合はそれを使用できます。または三項 &lt;code&gt;?:&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="a40ed2255002784d89744404c25a8dfb75189849" translate="yes" xml:space="preserve">
          <source>These correspond (loosely) to fgetpos() and fsetpos(). Rather than stdio's Fpos_t they expect a &quot;Perl Scalar Value&quot; to be passed. What is stored there should be considered opaque. The layout of the data may vary from handle to handle. When not using stdio or if platform does not have the stdio calls then they are implemented in terms of PerlIO_tell() and PerlIO_seek().</source>
          <target state="translated">これらは fgetpos()と fsetpos()に(ゆるく)対応しています。stdioのFpos_tではなく、&quot;Perl Scalar Value &quot;が渡されることを期待しています。そこに格納されているものは不透明と考えるべきです。データのレイアウトはハンドルによって異なるかもしれません。stdio を使用しない場合や、プラットフォームが stdio 呼び出しを持っていない場合、それらは PerlIO_tell()と PerlIO_seek()の観点から実装されています。</target>
        </trans-unit>
        <trans-unit id="3ab9bc2795a0ea30e5174b44302c5f3390695af2" translate="yes" xml:space="preserve">
          <source>These correspond functionally to fread() and fwrite() but the arguments and return values are different. The PerlIO_read() and PerlIO_write() signatures have been modeled on the more sane low level read() and write() functions instead: The &quot;file&quot; argument is passed first, there is only one &quot;count&quot;, and the return value can distinguish between error and &lt;code&gt;EOF&lt;/code&gt; .</source>
          <target state="translated">これらは機能的にfread（）およびfwrite（）に対応していますが、引数と戻り値は異なります。代わりに、PerlIO_read（）およびPerlIO_write（）シグネチャは、よりまともな低レベルのread（）およびwrite（）関数に基づいてモデル化されています。「file」引数が最初に渡され、「count」が1つだけあり、戻り値はエラーと &lt;code&gt;EOF&lt;/code&gt; を区別します。</target>
        </trans-unit>
        <trans-unit id="6faed5a4522cd8b94dc864e27b779abb63c4ce78" translate="yes" xml:space="preserve">
          <source>These correspond to fopen()/fdopen() and the arguments are the same. Return &lt;code&gt;NULL&lt;/code&gt; and set &lt;code&gt;errno&lt;/code&gt; if there is an error. There may be an implementation limit on the number of open handles, which may be lower than the limit on the number of open files - &lt;code&gt;errno&lt;/code&gt; may not be set when &lt;code&gt;NULL&lt;/code&gt; is returned if this limit is exceeded.</source>
          <target state="translated">これらはfopen（）/ fdopen（）に対応し、引数は同じです。リターン &lt;code&gt;NULL&lt;/code&gt; とセット &lt;code&gt;errno&lt;/code&gt; にエラーが発生した場合。開いているハンドルの数には実装上の制限があり、開いているファイルの数の制限よりも低い場合があり &lt;code&gt;NULL&lt;/code&gt; 。この制限を超えると、NULLが返されたときに &lt;code&gt;errno&lt;/code&gt; が設定されない場合があります。</target>
        </trans-unit>
        <trans-unit id="85c39d61ce18e7b09b1791e93aa8066eeef62084" translate="yes" xml:space="preserve">
          <source>These correspond to fputs() and fputc(). Note that arguments have been revised to have &quot;file&quot; first.</source>
          <target state="translated">これらは fputs()と fputc()に対応しています。引数が最初に &quot;file &quot;を持つように修正されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8e90caae28ef06f86a5a7c45f8c354bdfbb310ff" translate="yes" xml:space="preserve">
          <source>These defaults may change once perlio has been better tested and tuned.</source>
          <target state="translated">これらのデフォルト値は、perlioのテストと調整が完了した後に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="4b42ed96c36dd8480d16597a1b739ba48b433615" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=perl. Defaults to $Config{installman*dir}.</source>
          <target state="translated">これらのディレクトリは、INSTALLDIRS=perl の場合、'make install' 時に man ページを取得します。デフォルトは $Config{installman*dir}です。</target>
        </trans-unit>
        <trans-unit id="80d2a82fca268aa8c538c7ef08b93ac2b88facef" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=site (default). Defaults to $(SITEPREFIX)/man/man$(MAN*EXT).</source>
          <target state="translated">これらのディレクトリは、INSTALLDIRS=site (デフォルト)の場合、'make install' 時に man ページを取得します。デフォルトは $(SITEPREFIX)/man/man$(MAN*EXT)です。</target>
        </trans-unit>
        <trans-unit id="68e3f1b03dd4e2ce3d50494f40f9bb4bc33a9ff9" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=vendor. Defaults to $(VENDORPREFIX)/man/man$(MAN*EXT).</source>
          <target state="translated">これらのディレクトリは、INSTALLDIRS=vendor の場合、'make install' 時に man ページを取得します。デフォルトは $(VENDORPREFIX)/man/man$(MAN*EXT)です。</target>
        </trans-unit>
        <trans-unit id="40c3a72856e79ae11ef7788be093b884c47b09d5" translate="yes" xml:space="preserve">
          <source>These examples are realized in the code below, which could be copied to a file</source>
          <target state="translated">これらの例は以下のコードで実現されています。</target>
        </trans-unit>
        <trans-unit id="ea1d8aa8b62f74ea36ff39b0b63b9774953aaca0" translate="yes" xml:space="preserve">
          <source>These examples of attempts to use an ellipsis are syntax errors:</source>
          <target state="translated">省略記号を使用しようとしたこれらの例は、構文エラーです。</target>
        </trans-unit>
        <trans-unit id="ad269ea05e73affc724a0326dc3ecea88836b454" translate="yes" xml:space="preserve">
          <source>These examples often reflect the style and preference of the author of that piece of the documentation, and may be briefer than a corresponding line of code in a real program. Except where otherwise noted, you should assume that &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; statements appear earlier in the &quot;program&quot;, and that any variables used have already been declared, even if those declarations have been omitted to make the example easier to read.</source>
          <target state="translated">これらの例は、多くの場合、そのドキュメントの作成者のスタイルと好みを反映しており、実際のプログラムの対応するコード行よりも短い場合があります。特に明記されている場合を除き、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; ステートメントは「プログラム」の前半にあり、使用されている変数はすでに宣言されていると想定してください。</target>
        </trans-unit>
        <trans-unit id="da4181b23484c1b0366a0256854a440c5eed9952" translate="yes" xml:space="preserve">
          <source>These examples show how to make references to variables with names. Sometimes you want to make an array or a hash that doesn't have a name. This is analogous to the way you like to be able to use the string &lt;code&gt;&quot;\n&quot;&lt;/code&gt; or the number 80 without having to store it in a named variable first.</source>
          <target state="translated">これらの例は、名前を持つ変数への参照を作成する方法を示しています。名前のない配列またはハッシュを作成したい場合があります。これは、文字列 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; または数値80を、最初に名前付き変数に格納する必要なく使用できるようにする方法に似ています。</target>
        </trans-unit>
        <trans-unit id="7900d790c497c44a25852d75caed60efb96bb183" translate="yes" xml:space="preserve">
          <source>These features are no longer considered experimental and their functionality has disappeared. It's your own fault if you wrote production programs using these features after we explicitly told you not to (see &lt;a href=&quot;perlpolicy&quot;&gt;perlpolicy&lt;/a&gt;).</source>
          <target state="translated">これらの機能は実験的なものとは見なされなくなり、その機能はなくなりました。これらの機能を使用して、明示的に&lt;a href=&quot;perlpolicy&quot;&gt;禁止&lt;/a&gt;するように指示した後で（perlpolicyを参照）プロダクションプログラムを作成したのは、あなた自身の責任です。</target>
        </trans-unit>
        <trans-unit id="ecdbc29b6059151fd36541ed2cea90e388fc6071" translate="yes" xml:space="preserve">
          <source>These features were so wildly successful and played so well with others that we decided to remove their experimental status and admit them as full, stable features in the world of Perl, lavishing all the benefits and luxuries thereof. They are also awarded +5 Stability and +3 Charisma.</source>
          <target state="translated">これらの機能は非常に大成功を収め、他の機能との相性も良かったので、私たちは実験的な状態を取り除き、Perl の世界で完全に安定した機能として認めることにし、そのすべての利点と贅沢を与えることにしました。また、+5 安定性と+3 カリスマ性も付与されています。</target>
        </trans-unit>
        <trans-unit id="436079f5f30dfc97a1a6d7f8ea9906fefeca2983" translate="yes" xml:space="preserve">
          <source>These fields are used to keep track of how many paren groups could be matched in the pattern, which was the last open paren to be entered, and which was the last close paren to be entered.</source>
          <target state="translated">これらのフィールドは、パターン内でマッチしたペアレングループの数、最後に入力されたオープンペアレンがどれであったか、最後に入力されたクローズペアレンがどれであったかを追跡するために使用されます。</target>
        </trans-unit>
        <trans-unit id="4c8e2d7aa479f62270f36bb981c83130e3ea21ce" translate="yes" xml:space="preserve">
          <source>These files contain information on who maintains which modules. Run &lt;code&gt;perl Porting/Maintainers -M Module::Name&lt;/code&gt; to find out more information about a dual-life module.</source>
          <target state="translated">これらのファイルには、誰がどのモジュールを保守しているかに関する情報が含まれています。 &lt;code&gt;perl Porting/Maintainers -M Module::Name&lt;/code&gt; を実行して、デュアルライフモジュールの詳細を確認します。</target>
        </trans-unit>
        <trans-unit id="7c3add026b4eccbc256b7dbac98ef5e6ce0ff8a8" translate="yes" xml:space="preserve">
          <source>These flags can be set during compilation to enable optimizations in the &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">これらのフラグは、コンパイル中に設定して、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 演算子の最適化を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="5ad448cfc75702b92a6132746a47d8bee944a550" translate="yes" xml:space="preserve">
          <source>These flow-control keywords are documented in &lt;a href=&quot;../perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">これらのフロー制御キーワードは&lt;a href=&quot;../perlsyn#Compound-Statements&quot;&gt;、perlsynの複合ステートメントに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4f149ae07a8478e188c52361aad3ec711ed1026a" translate="yes" xml:space="preserve">
          <source>These flow-control keywords are documented in &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">これらのフロー制御キーワードは&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;、perlsynの複合ステートメントに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="309e08bc8a3175c38d05ead911b510e18b559b99" translate="yes" xml:space="preserve">
          <source>These flow-control keywords related to the experimental switch feature are documented in &lt;a href=&quot;../perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">試験的なスイッチ機能に関連するこれらのフロー制御キーワードは&lt;a href=&quot;../perlsyn#Switch-Statements&quot;&gt;、perlsynのスイッチステートメントに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a272370ad05edf250f2041efdee62784d465ad39" translate="yes" xml:space="preserve">
          <source>These flow-control keywords related to the experimental switch feature are documented in &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">試験的なスイッチ機能に関連するこれらのフロー制御キーワードは&lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;、perlsynのスイッチステートメントに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc4036739b5240858c0bf581399bd57e7b5e9c9e" translate="yes" xml:space="preserve">
          <source>These forms may be assigned to, and cause the right-hand side to be evaluated in scalar context:</source>
          <target state="translated">これらのフォームは、割り当てられ、右辺がスカラーコンテキストで評価される原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b6a87abeab3fa4b07145fb59b22ed97519f70773" translate="yes" xml:space="preserve">
          <source>These free versions of Visual C++ 2008-2013 Professional contain the same compilers and linkers that ship with the full versions, and also contain everything necessary to build Perl, rather than requiring a separate download of the Windows SDK like previous versions did.</source>
          <target state="translated">Visual C++2008-2013 Professional のこれらの無料版には、フルバージョンと同じコンパイラとリンカが含まれており、以前のバージョンのように Windows SDK の個別ダウンロードを必要とするのではなく、Perl のビルドに必要なものがすべて含まれています。</target>
        </trans-unit>
        <trans-unit id="efdfa79cbeb17377a5124b29f2fd31a6e8d98c48" translate="yes" xml:space="preserve">
          <source>These functions allow checksums to be merged. Refer to the</source>
          <target state="translated">これらの関数により、チェックサムをマージすることができます。この関数を使用して、チェックサムをマージするには</target>
        </trans-unit>
        <trans-unit id="ba57dd2ab74f37811d43a497242362420e4296f0" translate="yes" xml:space="preserve">
          <source>These functions are exported only on request. They each take a single argument and return the absolute pathname for it. If no argument is given they'll use the current working directory.</source>
          <target state="translated">これらの関数はリクエストがあった場合にのみエクスポートされます。それぞれ一つの引数を取り、その絶対パス名を返します。引数が与えられていない場合は、現在の作業ディレクトリを使用します。</target>
        </trans-unit>
        <trans-unit id="11a75a016614f3f6a49b489f2532217d2dc9b130" translate="yes" xml:space="preserve">
          <source>These functions are interface of character data used internally. If you want only to get Unicode normalization forms, you don't need call them yourself.</source>
          <target state="translated">これらの関数は、内部で使用される文字データのインターフェースです。Unicode正規化フォームだけを取得したい場合は、自分で呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="a5805d5b7ed6958150825f5cb6f923e00d36788d" translate="yes" xml:space="preserve">
          <source>These functions are provided for backwards compatibility with common tempfile generation C library functions.</source>
          <target state="translated">これらの関数は、一般的なtempfile生成Cライブラリ関数との下位互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="4c85d18231511b3dd1840594c64b0cd5dd02c4fd" translate="yes" xml:space="preserve">
          <source>These functions are related to the method resolution order of perl classes</source>
          <target state="translated">これらの関数は、Perlクラスのメソッド解決順序に関連しています。</target>
        </trans-unit>
        <trans-unit id="565eacfa6d391bb1e8f9b310d413202832f4d770" translate="yes" xml:space="preserve">
          <source>These functions are used by the filter to obtain either a line or block from the next filter in the chain or the actual source file if there aren't any other filters.</source>
          <target state="translated">これらの関数はフィルタが連鎖している次のフィルタ、 あるいは他にフィルタがない場合は実際のソースファイルから行やブロックを取得するのに使われます。</target>
        </trans-unit>
        <trans-unit id="b40856071384296779ffb96483ca0013c6d7f3df" translate="yes" xml:space="preserve">
          <source>These functions are usually used inside an &lt;code&gt;ok()&lt;/code&gt; .</source>
          <target state="translated">これらの関数は通常、 &lt;code&gt;ok()&lt;/code&gt; 内で使用されます。</target>
        </trans-unit>
        <trans-unit id="ad9ddd863a33c4087b2128f800b2bb735b670e0b" translate="yes" xml:space="preserve">
          <source>These functions control the global state of the package.</source>
          <target state="translated">これらの関数は、パッケージのグローバルな状態を制御します。</target>
        </trans-unit>
        <trans-unit id="524d44a200305a1bdc5134c684c7bc58ebf331b8" translate="yes" xml:space="preserve">
          <source>These functions grant &lt;code&gt;&quot;SUPER&quot;&lt;/code&gt; token as a prefix of the method name. Note that if you want to keep the returned glob for a long time, you need to check for it being &quot;AUTOLOAD&quot;, since at the later time the call may load a different subroutine due to $AUTOLOAD changing its value. Use the glob created as a side effect to do this.</source>
          <target state="translated">これらの関数は、メソッド名の接頭辞として &lt;code&gt;&quot;SUPER&quot;&lt;/code&gt; トークンを付与します。返されたグロブを長期間保持する場合は、「AUTOLOAD」であることを確認する必要があることに注意してください。後で、$ AUTOLOADが値を変更するため、呼び出しで別のサブルーチンがロードされる場合があるためです。これを行うには、副作用として作成されたグロブを使用します。</target>
        </trans-unit>
        <trans-unit id="e3b1137b52cacd1fbff911e830d8d14363d490cb" translate="yes" xml:space="preserve">
          <source>These functions have the same side-effects as &lt;code&gt;gv_fetchmeth&lt;/code&gt; with &lt;code&gt;level==0&lt;/code&gt; . The warning against passing the GV returned by &lt;code&gt;gv_fetchmeth&lt;/code&gt; to &lt;code&gt;call_sv&lt;/code&gt; applies equally to these functions.</source>
          <target state="translated">これらの関数には、 &lt;code&gt;level==0&lt;/code&gt; を &lt;code&gt;gv_fetchmeth&lt;/code&gt; したgv_fetchmethと同じ副作用があります。GVを渡すことに対する警告がで返さ &lt;code&gt;gv_fetchmeth&lt;/code&gt; に &lt;code&gt;call_sv&lt;/code&gt; これらの関数にも同様に適用されます。</target>
        </trans-unit>
        <trans-unit id="98d4aef8dd151e8462fbb3063b8efcb68e0d87b2" translate="yes" xml:space="preserve">
          <source>These functions provide convenient and thread-safe means of manipulating hook variables.</source>
          <target state="translated">これらの関数は、便利でスレッドセーフなフック変数の操作手段を提供します。</target>
        </trans-unit>
        <trans-unit id="f738338a9dbfbee4b5a909220a80f41318a9f381" translate="yes" xml:space="preserve">
          <source>These functions simply print $Config{ccflags} and $Config{ccdlflags}</source>
          <target state="translated">これらの関数は、単に $Config{ccflags}と $Config{ccdlflags}を表示します。</target>
        </trans-unit>
        <trans-unit id="6cd020ca0f66b00dde6a2341717a3dae0fc7c828" translate="yes" xml:space="preserve">
          <source>These functions take a hash as an argument. The recognized keys of this hash are:</source>
          <target state="translated">これらの関数はハッシュを引数にとります。このハッシュの認識されるキーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d6359c7691ac9172680cb301b6768d6c5620c165" translate="yes" xml:space="preserve">
          <source>These functions take an input numeric code point in one encoding and return what its equivalent value is in the other.</source>
          <target state="translated">これらの関数は、一方のエンコーディングで入力された数値コードポイントを受け取り、他方のエンコーディングではその等価値を返します。</target>
        </trans-unit>
        <trans-unit id="7ebb5ef7a942f7d31cebfd11f8de6228de926c64" translate="yes" xml:space="preserve">
          <source>These hooks are also permitted to set the %INC entry corresponding to the files they have loaded. See &lt;a href=&quot;../perlvar#%25INC&quot;&gt;%INC in perlvar&lt;/a&gt;.</source>
          <target state="translated">これらのフックは、ロードしたファイルに対応する％INCエントリを設定することもできます。&lt;a href=&quot;../perlvar#%25INC&quot;&gt;perlvarの％INCを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dcbca2e2db6c0375d3253e7898e5f5abc5deaab1" translate="yes" xml:space="preserve">
          <source>These hooks are also permitted to set the %INC entry corresponding to the files they have loaded. See &lt;a href=&quot;perlvar#%25INC&quot;&gt;%INC in perlvar&lt;/a&gt;.</source>
          <target state="translated">これらのフックは、ロードしたファイルに対応する％INCエントリを設定することもできます。&lt;a href=&quot;perlvar#%25INC&quot;&gt;perlvarの％INCを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2ab8134e6c8ea614a58bbf4cba85fe875f47ac40" translate="yes" xml:space="preserve">
          <source>These interfaces are only available in Perl 5.9.5 and higher. See &lt;a href=&quot;http://search.cpan.org/perldoc/MRO::Compat&quot;&gt;MRO::Compat&lt;/a&gt; on CPAN for a mostly forwards compatible implementation for older Perls.</source>
          <target state="translated">これらのインターフェースは、Perl 5.9.5以降でのみ使用できます。古いPerlのほとんど互換性のある実装については、CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/MRO::Compat&quot;&gt;MRO :: Compat&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="800024eb93ec8e2e1c9e19ed6e58201379d4f5ea" translate="yes" xml:space="preserve">
          <source>These items are the primitives used to perform indenting, and to select text from amongst alternatives.</source>
          <target state="translated">これらの項目は、インデントを実行したり、代替案の中からテキス ト を選択したりするために用いられるプリミティブです。</target>
        </trans-unit>
        <trans-unit id="3dfe7afbcdb97590e1c6c0085eefd647c7035d88" translate="yes" xml:space="preserve">
          <source>These keys will be populated before any exceptions are thrown should there be an error.</source>
          <target state="translated">これらのキーは、エラーが発生した場合に例外がスローされる前に入力されます。</target>
        </trans-unit>
        <trans-unit id="a901d1a803d1f1e84cb86c073bdbaefe49dcbe0f" translate="yes" xml:space="preserve">
          <source>These keywords are documented in &lt;a href=&quot;../perldata#Special-Literals&quot;&gt;Special Literals in perldata&lt;/a&gt;.</source>
          <target state="translated">これらのキーワードは&lt;a href=&quot;../perldata#Special-Literals&quot;&gt;、perldataの特別なリテラルに記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1500951fb5f2dd9eeebd6c439509f1ad3f36d4ce" translate="yes" xml:space="preserve">
          <source>These keywords are documented in &lt;a href=&quot;perldata#Special-Literals&quot;&gt;Special Literals in perldata&lt;/a&gt;.</source>
          <target state="translated">これらのキーワードは&lt;a href=&quot;perldata#Special-Literals&quot;&gt;、perldataの特別なリテラルに記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="017f89666b16c462ff4b71931d55ca635d0ecaed" translate="yes" xml:space="preserve">
          <source>These last two are only valid for pad name SVs. They only existed in the B::NV class before Perl 5.22. In 5.22 they were moved to the B::PADNAME class.</source>
          <target state="translated">これらの最後の 2 つは、パッド名 SV に対してのみ有効です。これらはPerl 5.22以前のB::NVクラスにのみ存在していました。5.22では、これらはB::PADNAMEクラスに移動されました。</target>
        </trans-unit>
        <trans-unit id="ee3476aee9a9c9d8b18c6d57ac8c385c0348f0d4" translate="yes" xml:space="preserve">
          <source>These look just like character names but return multiple codepoints. Notice the &lt;code&gt;%vx&lt;/code&gt; vector-print functionality in &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらは文字名のように見えますが、複数のコードポイントを返します。 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;%vx&lt;/code&gt; vector-print機能に注意してください。</target>
        </trans-unit>
        <trans-unit id="e76a83f91dda3c78158f07c2bcf605e73e782739" translate="yes" xml:space="preserve">
          <source>These loop ops are not included in :base_core because they can easily be used to implement a resource attack (e.g., consume all available CPU time).</source>
          <target state="translated">これらのループ演算は、リソース攻撃の実装に容易に使用できるため、 :base_core には含まれていません (例:利用可能な CPU 時間をすべて消費する)。</target>
        </trans-unit>
        <trans-unit id="a843eb74986a4e9f839472d2d8d150ea39980b05" translate="yes" xml:space="preserve">
          <source>These macros arrange things to restore the value of integer variable &lt;code&gt;i&lt;/code&gt; at the end of enclosing</source>
          <target state="translated">これらのマクロは、囲みの最後に整数変数 &lt;code&gt;i&lt;/code&gt; の値を復元するように配置します</target>
        </trans-unit>
        <trans-unit id="f7a2a9aebcff3586f69f55801776cb23fd4e90a9" translate="yes" xml:space="preserve">
          <source>These macros arrange things to restore the value of pointers &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; must be a pointer of a type which survives conversion to &lt;code&gt;SV*&lt;/code&gt; and back, &lt;code&gt;p&lt;/code&gt; should be able to survive conversion to &lt;code&gt;char*&lt;/code&gt; and back.</source>
          <target state="translated">これらのマクロは、ポインター &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;p&lt;/code&gt; の値を復元するように配置します。 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;SV*&lt;/code&gt; への変換およびそれ以降の変換に耐えるタイプのポインターでなければなりません &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;char*&lt;/code&gt; への変換およびそれ以降の変換に耐えることができます。</target>
        </trans-unit>
        <trans-unit id="593dfba1d3d328349b77f1588cf82c2aaffa0443" translate="yes" xml:space="preserve">
          <source>These may not necessarily cause trouble, but indicate mediocre style.</source>
          <target state="translated">これらは必ずしもトラブルの原因になるとは限りませんが、平凡なスタイルを示しています。</target>
        </trans-unit>
        <trans-unit id="e22b64582fc85ac43b9e96c24337a10a450121a5" translate="yes" xml:space="preserve">
          <source>These memory related ops are not included in :base_core because they can easily be used to implement a resource attack (e.g., consume all available memory).</source>
          <target state="translated">これらのメモリ関連の操作は :base_core には含まれていません。 なぜなら、リソース攻撃を実装するのに簡単に使用できるからです (例えば、利用可能なすべてのメモリを消費する)。</target>
        </trans-unit>
        <trans-unit id="77c1bb576863e90102788a1b3ffe564db0c5c144" translate="yes" xml:space="preserve">
          <source>These messages are classified as follows (listed in increasing order of desperation):</source>
          <target state="translated">これらのメッセージは以下のように分類されています(自暴自棄になっているものが多い順に並んでいます)。</target>
        </trans-unit>
        <trans-unit id="b0bb74426f2aa2733dbc5c5a86f08523cab5f25f" translate="yes" xml:space="preserve">
          <source>These messages may safely be ignored. (Note that for a SunOS4 system, you must use -B/bin/ instead.)</source>
          <target state="translated">これらのメッセージは無視しても問題ありません。(SunOS4 システムでは、代わりに -B/bin/を使用しなければならないことに注意してください)。</target>
        </trans-unit>
        <trans-unit id="5b9f0b892cf28755d89fe7944f868ad5bf940e68" translate="yes" xml:space="preserve">
          <source>These methods all apply to the Ptr type for the structure; additionally two methods are constructed for the structure type itself, &lt;code&gt;_to_ptr&lt;/code&gt; which returns a Ptr type pointing to the same structure, and a &lt;code&gt;new&lt;/code&gt; method to construct and return a new structure, initialised to zeroes.</source>
          <target state="translated">これらのメソッドはすべて、構造のPtrタイプに適用されます。さらに二つの方法は、構造タイプ自体のために構成されている &lt;code&gt;_to_ptr&lt;/code&gt; 同じ構造にのPTR式ポインティングを返し、 &lt;code&gt;new&lt;/code&gt; 構築するための方法及びゼロに初期設定新しい構造を返します。</target>
        </trans-unit>
        <trans-unit id="833ac724c3c333f81488114a18e12c4a9e975d1a" translate="yes" xml:space="preserve">
          <source>These methods all test the BigInt for being one specific value and return true or false depending on the input. These are faster than doing something like:</source>
          <target state="translated">これらのメソッドはすべて、BigIntが特定の値であるかどうかをテストし、入力に応じて真か偽を返します。これらのメソッドは、以下のようなことをするよりも高速です。</target>
        </trans-unit>
        <trans-unit id="92da9e899f4e8b0a6a719a6370a299d62ec6b1c8" translate="yes" xml:space="preserve">
          <source>These methods are for setting up tests and declaring how many there are. You usually only want to call one of these methods.</source>
          <target state="translated">これらのメソッドはテストを設定し、テストの数を宣言するためのものです。通常はこれらのメソッドのうちの1つだけを呼び出すことになります。</target>
        </trans-unit>
        <trans-unit id="9725043aadb2020c60801a841d8cbbe42a310c40" translate="yes" xml:space="preserve">
          <source>These methods are not intended to be called by the user, but used or over-ridden by a sub-class of &lt;code&gt;Net::Cmd&lt;/code&gt;</source>
          <target state="translated">これらのメソッドは、ユーザーが呼び出すことを意図したものではなく、 &lt;code&gt;Net::Cmd&lt;/code&gt; サブクラスによって使用またはオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="c96be7d81aefe7494626f31fbf2d601d47ed4e3e" translate="yes" xml:space="preserve">
          <source>These methods are only testing the sign, and not the value.</source>
          <target state="translated">これらの方法は符号をテストしているだけで、値をテストしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="f55156f755c79786d47317ca2de0a12228b5b4b7" translate="yes" xml:space="preserve">
          <source>These methods are useful when writing your own test methods.</source>
          <target state="translated">これらの方法は、自分でテスト方法を書くときに便利です。</target>
        </trans-unit>
        <trans-unit id="1371312bc20ca6b06acc065c53943c266c38f79b" translate="yes" xml:space="preserve">
          <source>These methods control where Test::Builder will print its output. They take either an open &lt;code&gt;$filehandle&lt;/code&gt; , a &lt;code&gt;$filename&lt;/code&gt; to open and write to or a &lt;code&gt;$scalar&lt;/code&gt; reference to append to. It will always return a &lt;code&gt;$filehandle&lt;/code&gt; .</source>
          <target state="translated">これらのメソッドは、Test :: Builderが出力を印刷する場所を制御します。それらは、開いている &lt;code&gt;$filehandle&lt;/code&gt; 、開いて書き込む &lt;code&gt;$filename&lt;/code&gt; 、または追加する &lt;code&gt;$scalar&lt;/code&gt; 参照のいずれかを取ります。常に &lt;code&gt;$filehandle&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="4dabfc6c3e23d636029050966dc499c5c862fee9" translate="yes" xml:space="preserve">
          <source>These methods get the values of similarly named fields within the OP data structure. See top of &lt;code&gt;op.h&lt;/code&gt; for more info.</source>
          <target state="translated">これらのメソッドは、OPデータ構造内の同様の名前のフィールドの値を取得します。詳細については、 &lt;code&gt;op.h&lt;/code&gt; の上部を参照してください。</target>
        </trans-unit>
        <trans-unit id="eac0ba268e5d0e742f5c1a8121218a2683f22449" translate="yes" xml:space="preserve">
          <source>These methods guarantee fast individual tests but require a re-organization of the original list or array. They only pay off if you have to test multiple values against the same array.</source>
          <target state="translated">これらのメソッドは、個々のテストを高速に行うことを保証しますが、元のリストや配列を再編成する必要があります。これらのメソッドは、同じ配列に対して複数の値をテストしなければならない場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="7cb3b559e380c719f80028fb428c3eb720e12704" translate="yes" xml:space="preserve">
          <source>These methods install a transparent filter on the I/O stream that converts data from the specified encoding when it is read in from the stream. The result is always Unicode.</source>
          <target state="translated">これらのメソッドは、I/O ストリームに透過フィルタをインストールし、ストリームからデータを読み込んだときに指定したエンコーディングからデータを変換します。結果は常に Unicode です。</target>
        </trans-unit>
        <trans-unit id="2d0828193002db36233bc401e0a0e9c0dbb462a1" translate="yes" xml:space="preserve">
          <source>These methods provide a user interface to the &lt;code&gt;Net::Cmd&lt;/code&gt; object.</source>
          <target state="translated">これらのメソッドは、 &lt;code&gt;Net::Cmd&lt;/code&gt; オブジェクトへのユーザーインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="ff435d938391d9561763fbcab2d9f747b7f84a93" translate="yes" xml:space="preserve">
          <source>These methods set the size (in half-points, like 52 for 26-point) that these heading levels will appear as.</source>
          <target state="translated">これらのメソッドは、これらの見出しレベルが表示されるサイズ(26ポイントの場合は52のように半ポイントで)を設定します。</target>
        </trans-unit>
        <trans-unit id="abcc7bd5fdde6b4a0c109a19d7071ed04915f8b9" translate="yes" xml:space="preserve">
          <source>These methods use commands that are not part of the RFC977 documentation. Some servers may not support all of them.</source>
          <target state="translated">これらのメソッドはRFC977のドキュメントに含まれていないコマンドを使用します。サーバによっては、これらすべてをサポートしていない場合があります。</target>
        </trans-unit>
        <trans-unit id="31ccd9bd046a9504a4b8ad4115c9067507a8e143" translate="yes" xml:space="preserve">
          <source>These modes are all actually set via a bitmask. Here is how the &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; constants are laid out. You can import the &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; constants via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallbacks)&lt;/code&gt; , and you can import the generic bitmask constants via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallback_all)&lt;/code&gt; .</source>
          <target state="translated">これらのモードはすべて、実際にはビットマスクを介して設定されます。以下は、 &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; 定数のレイアウト方法です。あなたは、インポートすることができ &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; の経由定数を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallbacks)&lt;/code&gt; 、あなたは経由して、一般的なビットマスク定数をインポートすることができ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallback_all)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d789a994adbfeec56de6cff1edba3230c60ae5bf" translate="yes" xml:space="preserve">
          <source>These modifiers are restored at the end of the enclosing group. For example,</source>
          <target state="translated">これらの修飾子は、囲むグループの最後に復元されます。例えば</target>
        </trans-unit>
        <trans-unit id="4b50f0d55e6d3bcc6eb1ad193029b6cf71ad0ceb" translate="yes" xml:space="preserve">
          <source>These modifiers do not carry over into named subpatterns called in the enclosing group. In other words, a pattern such as &lt;code&gt;((?i)(?&amp;amp;NAME))&lt;/code&gt; does not change the case-sensitivity of the &quot;NAME&quot; pattern.</source>
          <target state="translated">これらの修飾子は、包含グループで呼び出された名前付きサブパターンには引き継がれません。つまり、 &lt;code&gt;((?i)(?&amp;amp;NAME))&lt;/code&gt; のようなパターンは、「NAME」パターンの大文字と小文字の区別を変更しません。</target>
        </trans-unit>
        <trans-unit id="f5fbd761faf543e63a6416a5e28a730d54795855" translate="yes" xml:space="preserve">
          <source>These modifiers, all new in 5.14, affect which character-set rules (Unicode, etc.) are used, as described below in &lt;a href=&quot;#Character-set-modifiers&quot;&gt;Character set modifiers&lt;/a&gt;.</source>
          <target state="translated">これらの修飾子はすべて5.14の新機能であり、以下の「&lt;a href=&quot;#Character-set-modifiers&quot;&gt;文字セット修飾子」&lt;/a&gt;で説明するように、使用される文字セットルール（Unicodeなど）に影響します。</target>
        </trans-unit>
        <trans-unit id="bb9708d2ade8d02334095230804c31cb6c6f062f" translate="yes" xml:space="preserve">
          <source>These names are case-insensitive. By default (if specification is omitted), 'shifted' is adopted.</source>
          <target state="translated">これらの名前は大文字小文字を区別しません。デフォルトでは(指定を省略した場合)'shifted'が採用されます。</target>
        </trans-unit>
        <trans-unit id="a2a7bae57c0b7e47324c6368dda30c35ad91dca7" translate="yes" xml:space="preserve">
          <source>These notices must be retained in any copies of any part of this documentation and/or software.</source>
          <target state="translated">これらの通知は、このドキュメントおよび/またはソフトウェアのいかなる部分のコピーでも保持されなければなりません。</target>
        </trans-unit>
        <trans-unit id="efbc4f1ae4d272c0d4681905f6fb23798e4783eb" translate="yes" xml:space="preserve">
          <source>These numbers was achieved Apr 2004 with ActivePerl-5.8.3 running under Linux on a P4 2.8 GHz CPU. The last 5 entries differ by being pure perl implementations of the algorithms, which explains why they are so slow.</source>
          <target state="translated">この数字は2004年4月にP4 2.8GHzのCPUでLinuxでActivePerl-5.8.3を実行して達成したものです。最後の 5 つのエントリは、アルゴリズムを純粋な perl で実装したものであるという点で異なっていますが、それがなぜ遅いのかを説明しています。</target>
        </trans-unit>
        <trans-unit id="b16394db34a86c1309e6f32038763254bbfec1e7" translate="yes" xml:space="preserve">
          <source>These operators are documented in &lt;a href=&quot;../perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">これらの演算子は&lt;a href=&quot;../perlop&quot;&gt;perlopに&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="902ffcf3ea51513d56fbec3ce0266f1b87291429" translate="yes" xml:space="preserve">
          <source>These operators are documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">これらの演算子は&lt;a href=&quot;perlop&quot;&gt;perlopに&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="23835ab35bd3941ef690822a20797ba91ee28d2e" translate="yes" xml:space="preserve">
          <source>These operators are exempt from the &quot;looks like a function rule&quot; described above. That is, an opening parenthesis after the operator does not affect how much of the following code constitutes the argument. Put the opening parentheses before the operator to separate it from code that follows (this applies only to operators with higher precedence than unary operators, of course):</source>
          <target state="translated">これらの演算子は、上述の「関数のように見える」ルールの対象外となります。つまり、演算子の後に括弧があっても、それに続くコードがどれだけ引数を構成しているかには影響しません。演算子の前に開括弧を入れて、それを後続のコードから分離してください (もちろん、これは単項演算子よりも優先順位の高い演算子にのみ適用されます)。</target>
        </trans-unit>
        <trans-unit id="6b54b9bb627d1cf1404f3b5dab668ec8269f4aa6" translate="yes" xml:space="preserve">
          <source>These operators obtain the information described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, if you have the privileges necessary to retrieve the named user's UAF information via &lt;code&gt;sys$getuai&lt;/code&gt; . If not, then only the &lt;code&gt;$name&lt;/code&gt; , &lt;code&gt;$uid&lt;/code&gt; , and &lt;code&gt;$gid&lt;/code&gt; items are returned. The &lt;code&gt;$dir&lt;/code&gt; item contains the login directory in VMS syntax, while the &lt;code&gt;$comment&lt;/code&gt; item contains the login directory in Unix syntax. The &lt;code&gt;$gcos&lt;/code&gt; item contains the owner field from the UAF record. The &lt;code&gt;$quota&lt;/code&gt; item is not used.</source>
          <target state="translated">指定されたユーザーのUAF情報を &lt;code&gt;sys$getuai&lt;/code&gt; 経由で取得するために必要な特権を持っている場合、これらのオペレーターは&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;で説明されている情報を取得します。そうでない場合は、 &lt;code&gt;$name&lt;/code&gt; 、 &lt;code&gt;$uid&lt;/code&gt; 、および &lt;code&gt;$gid&lt;/code&gt; アイテムのみが返されます。 &lt;code&gt;$dir&lt;/code&gt; ながらアイテムは、VMSの構文でログインディレクトリが含まれている &lt;code&gt;$comment&lt;/code&gt; 項目はUNIXの構文でログインディレクトリが含まれています。 &lt;code&gt;$gcos&lt;/code&gt; 項目は、UAFレコードから所有者フィールドが含まれています。 &lt;code&gt;$quota&lt;/code&gt; 項目は使用されません。</target>
        </trans-unit>
        <trans-unit id="e7e657656c9789c3619d255f79ac9b3a6c835215" translate="yes" xml:space="preserve">
          <source>These ops are not included in :base_core because of the risk of them being used to generate floating point exceptions (which would have to be caught using a $SIG{FPE} handler).</source>
          <target state="translated">これらの操作は浮動小数点例外の生成に使用されるリスクがあるため、 :base_core には含まれていません (これは $SIG{FPE}ハンドラを使用して捕捉する必要があります)。</target>
        </trans-unit>
        <trans-unit id="d5ea0da5f8ce978d8d492f686d44331bb4fc3946" translate="yes" xml:space="preserve">
          <source>These ops are not included in :base_core because they have an effect beyond the scope of the compartment.</source>
          <target state="translated">これらの操作はコンパートメントの範囲を超えた効果を持つため、 :base_core には含まれていません。</target>
        </trans-unit>
        <trans-unit id="dc4dfb8577c0955249e95ba26e17b894dbf4b7a2" translate="yes" xml:space="preserve">
          <source>These ops are related to multi-threading.</source>
          <target state="translated">これらの操作はマルチスレッドに関連しています。</target>
        </trans-unit>
        <trans-unit id="2901e27ec7bca28af121ed51d6417c782431820f" translate="yes" xml:space="preserve">
          <source>These ops enable</source>
          <target state="translated">これらのOPSは、以下のことを可能にします。</target>
        </trans-unit>
        <trans-unit id="e55c6aacfd2933ba2a5d8d99593dbebe1787988f" translate="yes" xml:space="preserve">
          <source>These options affect which handler will be used for subsequently installed signals.</source>
          <target state="translated">これらのオプションは、その後にインストールされるシグナルに使用されるハンドラに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="29c586cad3979b967f1d8c83a031669d4e85f7d5" translate="yes" xml:space="preserve">
          <source>These options control the 'vertical display' of opcodes. The display 'order' is also called 'mode' elsewhere in this document.</source>
          <target state="translated">これらのオプションは、オペコードの「垂直表示」を制御する。表示の「順序」は、このドキュメントの他の部分では「モード」とも呼ばれています。</target>
        </trans-unit>
        <trans-unit id="b5693ca212dce09ab36fc48e6272f7336e49446b" translate="yes" xml:space="preserve">
          <source>These options select the line-style (or just style) used to render each opcode, and dictates what info is actually printed into each line.</source>
          <target state="translated">これらのオプションは、各オペコードのレンダリングに使用されるラインスタイル (または単にスタイル)を選択し、各行に実際にどのような情報が印刷されるかを決定します。</target>
        </trans-unit>
        <trans-unit id="822ae20d8832a94dbc806795384f0c1cb46d5024" translate="yes" xml:space="preserve">
          <source>These packages can all be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="translated">これらのパッケージはすべて、ダウンロードセンター（&lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en）&lt;/a&gt;で検索してダウンロードできます。（これらのパッケージへの正確なリンクを提供することは、リンクが頻繁に変化し続けるため、無意味なタスクであることが証明されています。）</target>
        </trans-unit>
        <trans-unit id="e00985d023d49949f9c18d4b6917b5fcc1fe8b04" translate="yes" xml:space="preserve">
          <source>These packages can be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="translated">これらのパッケージは、ダウンロードセンター（&lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en）&lt;/a&gt;で検索してダウンロードできます。（これらのパッケージへの正確なリンクを提供することは、リンクが頻繁に変化し続けるため、無意味なタスクであることが証明されています。）</target>
        </trans-unit>
        <trans-unit id="ee6b901a4b16ea8fd5c1a17b0f5f523262d0ae63" translate="yes" xml:space="preserve">
          <source>These packages can both be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="translated">これらのパッケージはどちらも、ダウンロードセンター（&lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en）&lt;/a&gt;で検索してダウンロードできます。（これらのパッケージへの正確なリンクを提供することは、リンクが頻繁に変化し続けるため、無意味なタスクであることが証明されています。）</target>
        </trans-unit>
        <trans-unit id="b0b087e3db9d0ec8ccf2941b80cf3aaf473d4556" translate="yes" xml:space="preserve">
          <source>These perl routines currently (as of Perl v.5.8.6) cannot handle passed inf.</source>
          <target state="translated">これらの perl ルーチンは現在 (Perl v.5.8.6 以降)、渡された inf を扱うことができません。</target>
        </trans-unit>
        <trans-unit id="5ee158f8c062eca4d28a3ec2d9f8d880c70ecea2" translate="yes" xml:space="preserve">
          <source>These possessive quantifiers represent a special case of a more general concept, the</source>
          <target state="translated">これらの所有量詞は、より一般的な概念である</target>
        </trans-unit>
        <trans-unit id="bfd6c7d2c77daf624f0f4dda10d349c1b00557da" translate="yes" xml:space="preserve">
          <source>These properties are &lt;code&gt;\b&lt;/code&gt; (without braces), &lt;code&gt;\B&lt;/code&gt; (without braces), &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\S&lt;/code&gt; , &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;\W&lt;/code&gt; , and all the Posix character classes</source>
          <target state="translated">これらのプロパティは、 &lt;code&gt;\b&lt;/code&gt; （中括弧なし）、 &lt;code&gt;\B&lt;/code&gt; （中括弧なし）、 &lt;code&gt;\s&lt;/code&gt; 、 &lt;code&gt;\S&lt;/code&gt; 、 &lt;code&gt;\w&lt;/code&gt; 、 &lt;code&gt;\W&lt;/code&gt; 、およびすべてのPosix文字クラスです。</target>
        </trans-unit>
        <trans-unit id="49d4c7299af6c451da747abf6a31ed43bc6d224c" translate="yes" xml:space="preserve">
          <source>These quantifiers will try to match as much of the string as possible, while still allowing the regex to match. So we have</source>
          <target state="translated">これらの量詞は、可能な限り文字列をマッチさせようとしますが、正規表現はマッチさせることができます。つまり、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="26153a279914ed6ae972bab9be5035c10687695d" translate="yes" xml:space="preserve">
          <source>These results are &quot;meta&quot; information about the total results of an individual test program.</source>
          <target state="translated">これらの結果は、個々のテストプログラムの合計結果に関する「メタ」情報です。</target>
        </trans-unit>
        <trans-unit id="2bea10980ed9e4e8701806a5267309dec8b36b3d" translate="yes" xml:space="preserve">
          <source>These results refer to individual tests which are run.</source>
          <target state="translated">これらの結果は、実行される個々のテストを参照しています。</target>
        </trans-unit>
        <trans-unit id="f99e408a46643ae41ce4a2a5b658c331ee2d8a0f" translate="yes" xml:space="preserve">
          <source>These routines all create system-specific portability problems. As noted elsewhere, Perl is at the mercy of your C libraries for much of its system behavior. It's probably safest to assume broken SysV semantics for signals and to stick with simple TCP and UDP socket operations; e.g., don't try to pass open file descriptors over a local UDP datagram socket if you want your code to stand a chance of being portable.</source>
          <target state="translated">これらのルーチンはすべて、システム固有の移植性の問題を引き起こします。別のところで述べたように、Perl はシステムの動作の多くを C ライブラリに依存しています。シグナルのために壊れた SysV のセマンティクスを想定し、単純な TCP と UDP ソケット操作に固執するのが最も安全でしょう。</target>
        </trans-unit>
        <trans-unit id="7accb91a83a147e188cfdb7ea0bdeddeb0f7f3a7" translate="yes" xml:space="preserve">
          <source>These routines allow you to parse file paths into their directory, filename and suffix.</source>
          <target state="translated">これらのルーチンを使用すると、ファイルパスをディレクトリ、ファイル名、サフィックスにパースすることができます。</target>
        </trans-unit>
        <trans-unit id="b2c49f2650fd89670405ec1fbc536b94e9ae8bdf" translate="yes" xml:space="preserve">
          <source>These routines are all documented in the Locale::Codes::API man page.</source>
          <target state="translated">これらのルーチンはすべてLocale::Codes::APIのマニュアルページに記載されています。</target>
        </trans-unit>
        <trans-unit id="5bd965d62212a6eeb3c7fb76c8f854332dc29f76" translate="yes" xml:space="preserve">
          <source>These routines are quite efficient and yet are always guaranteed to agree with &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt;. We manage this by caching the start times of any months we've seen before. If we know the start time of the month, we can always calculate any time within the month. The start times are calculated using a mathematical formula. Unlike other algorithms that do multiple calls to &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらのルーチンは非常に効率的ですが、 &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt; と常に一致することが保証されています。これまでに見た月の開始時間をキャッシュすることでこれを管理します。月の開始時刻がわかっている場合は、その月のいつでも計算できます。開始時間は数式を使用して計算されます。 &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt; を複数回呼び出す他のアルゴリズムとは異なります。</target>
        </trans-unit>
        <trans-unit id="e296b7f9a5e96b639ca1839fa4442d3f45e92709" translate="yes" xml:space="preserve">
          <source>These routines are the same as their counterparts in the system C library. In list context, the return values from the various get routines are as follows:</source>
          <target state="translated">これらのルーチンは、システムCライブラリの対応するものと同じです。リストコンテキストでは、様々な get ルーチンからの戻り値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="cc1ea3e493711677c93d92be2ec1c6ec9a5ee909" translate="yes" xml:space="preserve">
          <source>These routines used to be called &lt;code&gt;perl_call_sv&lt;/code&gt; , etc., before Perl v5.6.0, but those names are now deprecated; macros of the same name are provided for compatibility.</source>
          <target state="translated">これらのルーチンは、Perl v5.6.0より前は &lt;code&gt;perl_call_sv&lt;/code&gt; などと呼ばれていましたが、これらの名前は非推奨になりました。同じ名前のマクロが互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="1fb1fb969b6c77a6565b33ce0e7b7cbfccc95cfb" translate="yes" xml:space="preserve">
          <source>These rules are complicated, but the goal is for them to do what you want (even if you don't quite understand why they are doing it). For example:</source>
          <target state="translated">これらのルールは複雑ですが、目的は自分のやりたいことをやってもらうことです(なぜそれをやっているのか全く理解していなくても)。例えば</target>
        </trans-unit>
        <trans-unit id="1c39d28608973eadb707da3830a9f4611c69ff29" translate="yes" xml:space="preserve">
          <source>These select Unicode rules. That means that in double-quotish strings, the string is always converted to UTF-8 to force a Unicode interpretation (you can &lt;code&gt;utf8::downgrade()&lt;/code&gt; afterwards to convert back to non-UTF8, if possible). In regular expression patterns, the conversion isn't done, but if the character set modifier would otherwise be &lt;code&gt;/d&lt;/code&gt;, it is changed to &lt;code&gt;/u&lt;/code&gt; .</source>
          <target state="translated">これらはUnicodeルールを選択します。つまり、二重引用符の文字列では、文字列は常にUTF-8に変換され、Unicode解釈が強制されます &lt;code&gt;utf8::downgrade()&lt;/code&gt; 後でutf8 :: downgrade（）を実行して、可能であれば非UTF8に戻すことができます）。正規表現パターンでは変換は行われませんが、文字セット修飾子が &lt;code&gt;/d&lt;/code&gt; である場合は &lt;code&gt;/u&lt;/code&gt; に変更されます。</target>
        </trans-unit>
        <trans-unit id="c33be304d6b7f8ebe4e43f5c0dfa6aefb4009eb4" translate="yes" xml:space="preserve">
          <source>These sets of one-liners are equivalent:</source>
          <target state="translated">これらのワンライナーのセットは等価です。</target>
        </trans-unit>
        <trans-unit id="52c95446c9ca7d3ffaa7ed7da6e1f21bf02cdc2e" translate="yes" xml:space="preserve">
          <source>These settings can be overridden globally too:</source>
          <target state="translated">これらの設定はグローバルにもオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="cbc91f3641f463359dfc31290abbc3a64d30454a" translate="yes" xml:space="preserve">
          <source>These should be familiar operations, with the exception of &lt;code&gt;av_unshift&lt;/code&gt; . This routine adds &lt;code&gt;num&lt;/code&gt; elements at the front of the array with the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value. You must then use &lt;code&gt;av_store&lt;/code&gt; (described below) to assign values to these new elements.</source>
          <target state="translated">これらは、 &lt;code&gt;av_unshift&lt;/code&gt; を除いて、おなじみの操作でなければなりません。このルーチンは、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 値を持つ配列の前に &lt;code&gt;num&lt;/code&gt; 個の要素を追加します。次に、 &lt;code&gt;av_store&lt;/code&gt; （以下で説明）を使用して、これらの新しい要素に値を割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="8f249c892c517536f796cbacefae284ca0ae8032" translate="yes" xml:space="preserve">
          <source>These should give you an overall feel for how modules are laid out and written.</source>
          <target state="translated">これらは、モジュールがどのようにレイアウトされ、どのように書かれているかの全体的な感覚を提供してくれるはずです。</target>
        </trans-unit>
        <trans-unit id="9a888f57551ca71c1272e83f90d05d460b30fbf3" translate="yes" xml:space="preserve">
          <source>These signal to a formatter that if it is to hyphenate &quot;sigaction&quot; or &quot;manuscript&quot;, then it should be done as &quot;sig-</source>
          <target state="translated">これらは,もし &quot;sigaction &quot;や &quot;manuscript &quot;をハイフン化する場合は,&quot;sig-&quot;とするべきであることをフォーマッタに合図している.</target>
        </trans-unit>
        <trans-unit id="a76776d9b84dd64fcd8c2f12ffb416173943a78e" translate="yes" xml:space="preserve">
          <source>These signals usually indicate a serious problem with the Perl interpreter or with your script. They are ABRT, BUS, EMT, FPE, ILL, QUIT, SEGV, SYS and TRAP.</source>
          <target state="translated">これらのシグナルは通常、Perl インタプリタやスクリプトに重大な問題があることを示しています。ABRT,BUS,EMT,FPE,ILL,QUIT,SEGV,SYS,TRAP です。</target>
        </trans-unit>
        <trans-unit id="7ee071669b1efa68f9a3156de49d5e707921d24a" translate="yes" xml:space="preserve">
          <source>These solutions can have far-reaching effects on your system and on the way you write your CGI programs, so investigate them with care.</source>
          <target state="translated">これらのソリューションは、システムやCGIプログラムの書き方に大きな影響を与える可能性がありますので、注意して調査してください。</target>
        </trans-unit>
        <trans-unit id="af1c9d3db11663506b814ed4474ccb898e81f0dd" translate="yes" xml:space="preserve">
          <source>These special patterns are generally of the form &lt;code&gt;(*VERB:ARG)&lt;/code&gt;. Unless otherwise stated the ARG argument is optional; in some cases, it is forbidden.</source>
          <target state="translated">これらの特別なパターンは、通常 &lt;code&gt;(*VERB:ARG)&lt;/code&gt; の形式です。特に明記しない限り、ARG引数はオプションです。いくつかのケースでは、それは禁止されています。</target>
        </trans-unit>
        <trans-unit id="ae6fd84e089df12e602215034c3af5ac8fb7e11a" translate="yes" xml:space="preserve">
          <source>These special variables, like the &lt;code&gt;%+&lt;/code&gt; hash and the numbered match variables (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; , etc.) are dynamically scoped until the end of the enclosing block or until the next successful match, whichever comes first. (See &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;%+&lt;/code&gt; ハッシュや番号付き一致変数（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、 &lt;code&gt;$3&lt;/code&gt; など）のようなこれらの特殊変数は、囲んでいるブロックの終わりまで、または次の一致が成功するまでのいずれか早い方まで動的にスコープされます。（&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;perlsynの複合文を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="ba4f20c17b5b03a6a3deb3a04503955765039642" translate="yes" xml:space="preserve">
          <source>These strengths make it especially popular with web developers and system administrators. Mathematicians, geneticists, journalists, managers and many other people also use Perl.</source>
          <target state="translated">これらの強みから、Web開発者やシステム管理者に特に人気があります。数学者、遺伝学者、ジャーナリスト、管理者、その他多くの人々もPerlを使用しています。</target>
        </trans-unit>
        <trans-unit id="a952f4bd002dc5bdafb796a94c6eaa4765c9b45b" translate="yes" xml:space="preserve">
          <source>These strings do not match /\Bam\B/</source>
          <target state="translated">これらの文字列は、/\Bam\B/と一致しません。</target>
        </trans-unit>
        <trans-unit id="2125a4453223ddc6316d0fee4d859469467def9f" translate="yes" xml:space="preserve">
          <source>These strings do not match /\b'\b/.</source>
          <target state="translated">これらの文字列は、/\b'\b/と一致しません。</target>
        </trans-unit>
        <trans-unit id="8aa64b62307f4ac9360d6b96b7d4a2888dc9ba0f" translate="yes" xml:space="preserve">
          <source>These strings do not match /\bPerl\b/.</source>
          <target state="translated">これらの文字列は、/\bPerl\b/と一致しません。</target>
        </trans-unit>
        <trans-unit id="1ece96fea144561ec8d240482b56438a3b8cd021" translate="yes" xml:space="preserve">
          <source>These subroutines are only visible within the block in which they are declared, and only after that declaration:</source>
          <target state="translated">これらのサブルーチンは宣言されたブロック内でのみ表示され、その宣言後にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="5002f9badee48e82e2e716cfadae24bcbea4d597" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Level&lt;/code&gt; option in the constructor.</source>
          <target state="translated">これらの記号定数は、コンストラクターの &lt;code&gt;Level&lt;/code&gt; オプションで使用されます。</target>
        </trans-unit>
        <trans-unit id="de652943440f246885efed6bc50624dc94d59ab4" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Method&lt;/code&gt; option in the constructor.</source>
          <target state="translated">これらの記号定数は、コンストラクターの[ &lt;code&gt;Method&lt;/code&gt; ]オプションで使用されます。</target>
        </trans-unit>
        <trans-unit id="4ec9419fff6178cfe016f55595d7a90364f97f63" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Strategy&lt;/code&gt; option in the constructor.</source>
          <target state="translated">これらの記号定数は、コンストラクターの &lt;code&gt;Strategy&lt;/code&gt; オプションによって使用されます。</target>
        </trans-unit>
        <trans-unit id="09599ebf73a41d7f3fd327344d88fceb70681aab" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;flush&lt;/code&gt; method.</source>
          <target state="translated">これらの記号定数は、 &lt;code&gt;flush&lt;/code&gt; メソッドで使用されます。</target>
        </trans-unit>
        <trans-unit id="430e03746fb928435d7aa08e0e3eea945da77d4a" translate="yes" xml:space="preserve">
          <source>These symbols appear before the op-name, and indicate the B:: namespace that represents the ops in your Perl code.</source>
          <target state="translated">これらのシンボルは op-name の前に表示され、Perl コードの中で ops を表す B::名前空間を示しています。</target>
        </trans-unit>
        <trans-unit id="2dbd7a997bbaaa84741a5e1fbd14e323c239d540" translate="yes" xml:space="preserve">
          <source>These terms are your choice of any of (1) the Perl Artistic Licence, or (2) version 2 of the GNU General Public License as published by the Free Software Foundation, or (3) any later version of the GNU General Public License.</source>
          <target state="translated">これらの条件は、(1)Perl Artistic Licence、(2)Free Software Foundationによって発行されたGNU General Public Licenseのバージョン2、または(3)GNU General Public Licenseのそれ以降のバージョンのいずれかを選択することになります。</target>
        </trans-unit>
        <trans-unit id="5c298e17caacd4174da139fecae9a62cf22ed5cc" translate="yes" xml:space="preserve">
          <source>These tests are expected to succeed. Usually, most or all of your tests are in this category. If a normal test doesn't succeed, then that means that something is</source>
          <target state="translated">これらのテストは成功することが期待されています。通常、ほとんどまたはすべてのテストがこのカテゴリに属します。通常のテストが成功しない場合、それは何かが</target>
        </trans-unit>
        <trans-unit id="07325952f04a521e228140b025365f61c44af25f" translate="yes" xml:space="preserve">
          <source>These three macros are used to change a memory buffer size or to free a piece of memory no longer needed. The arguments to &lt;code&gt;Renew&lt;/code&gt; and &lt;code&gt;Renewc&lt;/code&gt; match those of &lt;code&gt;New&lt;/code&gt; and &lt;code&gt;Newc&lt;/code&gt; with the exception of not needing the &quot;magic cookie&quot; argument.</source>
          <target state="translated">これらの3つのマクロは、メモリバッファーサイズを変更したり、不要になったメモリを解放するために使用されます。引数はする &lt;code&gt;Renew&lt;/code&gt; と &lt;code&gt;Renewc&lt;/code&gt; はのものと一致する &lt;code&gt;New&lt;/code&gt; と &lt;code&gt;Newc&lt;/code&gt; を「マジッククッキー」引数を必要としないを除いて。</target>
        </trans-unit>
        <trans-unit id="3b6ba4dd1926405bd4af1077435f09d7c0a86a11" translate="yes" xml:space="preserve">
          <source>These three macros are used to move, copy, or zero out previously allocated memory. The &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; arguments point to the source and destination starting points. Perl will move, copy, or zero out &lt;code&gt;number&lt;/code&gt; instances of the size of the &lt;code&gt;type&lt;/code&gt; data structure (using the &lt;code&gt;sizeof&lt;/code&gt; function).</source>
          <target state="translated">これらの3つのマクロは、以前に割り当てられたメモリを移動、コピー、または消去するために使用されます。 &lt;code&gt;source&lt;/code&gt; と &lt;code&gt;dest&lt;/code&gt; 引数は、送信元と宛先の開始点を指します。Perlは、移動、コピー、またはアウトゼロであろう &lt;code&gt;number&lt;/code&gt; のサイズのインスタンス &lt;code&gt;type&lt;/code&gt; （使用データ構造 &lt;code&gt;sizeof&lt;/code&gt; 機能）。</target>
        </trans-unit>
        <trans-unit id="335c760b89ccd866bd4e5cd7ec4e5ef4c599cbd4" translate="yes" xml:space="preserve">
          <source>These two export tags globally modify the default flags that bsd_glob() and, except on VMS, Perl's built-in &lt;code&gt;&lt;a href=&quot;../functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; operator use. &lt;code&gt;GLOB_NOCASE&lt;/code&gt; is turned on or off, respectively.</source>
          <target state="translated">これら2つのエクスポートタグは、bsd_glob（）およびVMSを除いて、Perlの組み込み &lt;code&gt;&lt;a href=&quot;../functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 演算子が使用するデフォルトフラグをグローバルに変更します。 &lt;code&gt;GLOB_NOCASE&lt;/code&gt; はそれぞれオンまたはオフになります。</target>
        </trans-unit>
        <trans-unit id="9660fc7e9efd93a7abe465c81de57e11a5045a23" translate="yes" xml:space="preserve">
          <source>These two features are available starting with Perl 5.16.</source>
          <target state="translated">これら2つの機能はPerl 5.16から利用可能です。</target>
        </trans-unit>
        <trans-unit id="fa5480402538907c3c246c95ce18885b4ae5225b" translate="yes" xml:space="preserve">
          <source>These two handles are held in the array part of the GLOB until either &lt;code&gt;reader&lt;/code&gt; or &lt;code&gt;writer&lt;/code&gt; is called.</source>
          <target state="translated">これら2つのハンドルは、 &lt;code&gt;reader&lt;/code&gt; または &lt;code&gt;writer&lt;/code&gt; が呼び出されるまで、GLOBの配列部分に保持されます。</target>
        </trans-unit>
        <trans-unit id="b0f87921e5dc8828d5a6d9ea360bbab6bf450027" translate="yes" xml:space="preserve">
          <source>These two lower level macros are defined, but must only be used when dealing with keys that are not &lt;code&gt;SV*&lt;/code&gt; s:</source>
          <target state="translated">次の2つの下位レベルマクロが定義されていますが、 &lt;code&gt;SV*&lt;/code&gt; ではないキーを処理する場合にのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4ca39330e5c20e1239e2de6584e211ecc882f376" translate="yes" xml:space="preserve">
          <source>These two methods are discussed in the section &quot;Controlling Lookup Failure&quot;.</source>
          <target state="translated">これら2つの方法については、「ルックアップ失敗の制御」の項で説明しています。</target>
        </trans-unit>
        <trans-unit id="0b5a74bc9d562e1d07daa7fdb3ddf9da715c3433" translate="yes" xml:space="preserve">
          <source>These two methods return the pad names, using B::SPECIAL objects for null pointers and B::PADNAME objects otherwise.</source>
          <target state="translated">これら2つのメソッドは、NULLポインタにはB::SPECIALオブジェクトを使用し、それ以外の場合はB::PADNAMEオブジェクトを使用してパッド名を返します。</target>
        </trans-unit>
        <trans-unit id="74ded97cfff6de6cbb1491c5e4159e3babfbcd36" translate="yes" xml:space="preserve">
          <source>These two parameters are used to specify the ambient pragmas in the format used by the special variables $^H and ${^WARNING_BITS}.</source>
          <target state="translated">この2つのパラメータは、特殊変数$^Hと${^WARNING_BITS}が使用する形式のアンビエントプラ グマを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="668c2e486db55d10e5d748ec32a4297d24e80364" translate="yes" xml:space="preserve">
          <source>These two values for</source>
          <target state="translated">のこの2つの値は</target>
        </trans-unit>
        <trans-unit id="fded399d428f7e457d56603aa714f9152134fea1" translate="yes" xml:space="preserve">
          <source>These utilities help manage extra Perl modules that don't come with the perl distribution.</source>
          <target state="translated">これらのユーティリティは、Perl ディストリビューションに付属していない Perl モジュールを管理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="25a3a72bd29e8059a94921c647bd6ce419cc4377" translate="yes" xml:space="preserve">
          <source>These values will not change for the duration of the tied hash</source>
          <target state="translated">これらの値は、タイドハッシュの期間中は変更されません。</target>
        </trans-unit>
        <trans-unit id="32b1d023c49a0c39aa9dd2f2164ec0cee979dc1b" translate="yes" xml:space="preserve">
          <source>These variables are global to an entire process. They are shared between all interpreters and all threads in a process.</source>
          <target state="translated">これらの変数はプロセス全体に対してグローバルです。これらの変数は、プロセス内のすべてのインタプリタとすべてのスレッドの間で共有されます。</target>
        </trans-unit>
        <trans-unit id="53f5ad69f1f855f312a7f31903221b231e10b532" translate="yes" xml:space="preserve">
          <source>These variables are read-only and dynamically-scoped, unless we note otherwise.</source>
          <target state="translated">これらの変数は、特に注意しない限り、読み取り専用で動的にスコープされます。</target>
        </trans-unit>
        <trans-unit id="2a1de91c215bb3911b0f9767ad8cb63c7c66902f" translate="yes" xml:space="preserve">
          <source>These variables are read-only and dynamically-scoped.</source>
          <target state="translated">これらの変数は読み取り専用で、動的にスコープされます。</target>
        </trans-unit>
        <trans-unit id="c7b31baa2b679d0f632af8871cff4bfcc11fe664" translate="yes" xml:space="preserve">
          <source>These variables are used not only to represent Perl-space variables, but also any constants in the code, as well as some structures completely internal to Perl. The symbol table, for instance, is an ordinary Perl hash. Your code is represented by an SV as it's read into the parser; any program files you call are opened via ordinary Perl filehandles, and so on.</source>
          <target state="translated">これらの変数は Perl 空間変数だけでなく、コード内のあらゆる定数や Perl の内部構造体を表すためにも使用されます。例えば、シンボルテーブルは通常の Perl のハッシュです。あなたのコードは、パーサに読み込まれる際に SV で表現され、呼び出したプログラム・ファイルは通常の Perl ファイルハンドルで開かれます。</target>
        </trans-unit>
        <trans-unit id="82a728707d8b23d45f027d3109e809864b998b05" translate="yes" xml:space="preserve">
          <source>These variables determine the default state of the object created by calling the &lt;code&gt;new&lt;/code&gt; method, but cannot be used to alter the state of the object thereafter. The equivalent method names should be used instead to query or set the internal state of the object.</source>
          <target state="translated">これらの変数は、 &lt;code&gt;new&lt;/code&gt; メソッドの呼び出しによって作成されたオブジェクトのデフォルトの状態を決定しますが、その後のオブジェクトの状態の変更には使用できません。オブジェクトの内部状態を照会または設定するには、代わりに同等のメソッド名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="21d06b0dd7e2966bcc2949ad21cc8cf11e259059" translate="yes" xml:space="preserve">
          <source>These variables provide information about the current interpreter state.</source>
          <target state="translated">これらの変数は、現在のインタプリタの状態に関する情報を提供します。</target>
        </trans-unit>
        <trans-unit id="3ee1fe032de721a344cba89480c67e716abbee89" translate="yes" xml:space="preserve">
          <source>These various prefixes correspond to the fopen(3) modes of &lt;code&gt;r&lt;/code&gt; , &lt;code&gt;r+&lt;/code&gt; , &lt;code&gt;w&lt;/code&gt; , &lt;code&gt;w+&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; , and &lt;code&gt;a+&lt;/code&gt; .</source>
          <target state="translated">これらのさまざまなプレフィックスは、 &lt;code&gt;r&lt;/code&gt; 、 &lt;code&gt;r+&lt;/code&gt; 、 &lt;code&gt;w&lt;/code&gt; 、 &lt;code&gt;w+&lt;/code&gt; 、 &lt;code&gt;a&lt;/code&gt; 、および &lt;code&gt;a+&lt;/code&gt; のfopen（3）モードに対応しています。</target>
        </trans-unit>
        <trans-unit id="ab874a84fee8b167d507adabcea364962ee19104" translate="yes" xml:space="preserve">
          <source>These vars take 3 forms:</source>
          <target state="translated">これらの変数には3つの形式があります。</target>
        </trans-unit>
        <trans-unit id="b607e9f6b449fd1b8f047ca8c774e440f540bc1c" translate="yes" xml:space="preserve">
          <source>These were was released in Test::More 0.82, and first shipped with Perl in 5.10.1 as part of Test::More 0.92.</source>
          <target state="translated">これらはTest::More 0.82でリリースされ、5.10.1でTest::More 0.92の一部としてPerlと一緒に出荷されました。</target>
        </trans-unit>
        <trans-unit id="dbff7e2745b850ca42a72fcb2a24d874bb4460d2" translate="yes" xml:space="preserve">
          <source>These will take care of 64-bit integers and long doubles. For example:</source>
          <target state="translated">これらは64ビット整数と長い倍数を処理します。例えば</target>
        </trans-unit>
        <trans-unit id="ac19dfbee94adc36e2c9732558c6cd8eefc750a8" translate="yes" xml:space="preserve">
          <source>These will tell you if you truly have an integer, double, or string pointer stored in your SV. The &quot;p&quot; stands for private.</source>
          <target state="translated">これらは、SV に格納されているポインタが本当に整数、二重、文字列のいずれかであるかどうかを教えてくれます。p」はprivateの略です。</target>
        </trans-unit>
        <trans-unit id="01c10ede2ffed1b0b1b81928ac4993a2913e0a5d" translate="yes" xml:space="preserve">
          <source>These work as in normal strings.</source>
          <target state="translated">これらは通常の文字列と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="38675552ee022f79a520bb1f28a37d1e98aa3227" translate="yes" xml:space="preserve">
          <source>They all return true if the test passed, false if the test failed.</source>
          <target state="translated">これらはすべて、テストが合格した場合はtrueを返し、失敗した場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="8c3cf570334019dd16b6da35836503ad0b730443" translate="yes" xml:space="preserve">
          <source>They also return and accept whole hash entries (&lt;code&gt;HE*&lt;/code&gt; ), making their use more efficient (since the hash number for a particular string doesn't have to be recomputed every time). See &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for detailed descriptions.</source>
          <target state="translated">また、ハッシュエントリ全体（ &lt;code&gt;HE*&lt;/code&gt; ）を返し、受け入れて、より効率的に使用します（特定の文字列のハッシュ番号を毎回再計算する必要がないため）。詳細については&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a25c349a57769dbafa1bf807ae04ad1d22921bb7" translate="yes" xml:space="preserve">
          <source>They are not exported and must be addressed using the full package name.</source>
          <target state="translated">これらはエクスポートされず、完全なパッケージ名を使用してアドレスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="82e0433b7d59191ca9d6b5b4f7f2c32e84b80d15" translate="yes" xml:space="preserve">
          <source>They are suspected to be compiler errors (at least the shuffle.t failure is known from some IRIX 6 setups) and math library errors (the Trig.t failure), but since IRIX 5 is long since end-of-lifed, further fixes for the IRIX are unlikely. If you can get gcc for 5.3, you could try that, too, since gcc in IRIX 6 is a known workaround for at least the shuffle.t and sort.t failures.</source>
          <target state="translated">これらはコンパイラのエラー(少なくとも shuffle.t の失敗は IRIX 6 のいくつかのセットアップで確認されています)と数学ライブラリのエラー(Trig.t の失敗)が疑われていますが、IRIX 5 は既に寿命を迎えているので、IRIX のための更なる修正は期待できません。IRIX 6 の gcc は少なくとも shuffle.t と sort.t の失敗の回避策として知られているので、5.3 用の gcc を入手できれば、それも試すことができます。</target>
        </trans-unit>
        <trans-unit id="69688ab534f08d7044475644301b479b2c0aa07a" translate="yes" xml:space="preserve">
          <source>They are type specifiers, as detailed in &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt;:</source>
          <target state="translated">これらは、&lt;a href=&quot;perldata&quot;&gt;perldataで&lt;/a&gt;詳しく説明されているように、型指定子です。</target>
        </trans-unit>
        <trans-unit id="e0af70f00dfa3e42a5613047a29fed35339f3d84" translate="yes" xml:space="preserve">
          <source>They come in handy when you want to print or find the size of data.</source>
          <target state="translated">印刷したいときや、データの大きさを探したいときに便利です。</target>
        </trans-unit>
        <trans-unit id="af45a4b37483f2a06205c7d3d09277fb7f496321" translate="yes" xml:space="preserve">
          <source>They differ in how they behave if they have the same key as the default metadata. META_ADD will override the default value with its own. META_MERGE will merge its value with the default.</source>
          <target state="translated">これらは、デフォルトのメタデータと同じキーを持っている場合の挙動が異なります。META_ADDは、デフォルト値を独自の値で上書きします。META_MERGE は、その値をデフォルト値にマージします。</target>
        </trans-unit>
        <trans-unit id="38d5f7d4e163392c98f5f93a608be715596d63d6" translate="yes" xml:space="preserve">
          <source>They exist principally so that you can write code like:</source>
          <target state="translated">彼らは主に、あなたがコードを書くことができるように存在しています。</target>
        </trans-unit>
        <trans-unit id="7317b86bbf49f550672235cb05f34f1bf614569a" translate="yes" xml:space="preserve">
          <source>They may be deprecated in future versions.</source>
          <target state="translated">これらは将来のバージョンでは非推奨となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9d9f866ec06430c109794c0b11daa6f4be4c1816" translate="yes" xml:space="preserve">
          <source>They may be expecting something completely different.</source>
          <target state="translated">全く違うものを期待しているのかもしれません。</target>
        </trans-unit>
        <trans-unit id="330c7e5216d53f5b33c24e5c7f8fd3d4ead54c44" translate="yes" xml:space="preserve">
          <source>They seem to be caused by broken system header files, and also other open source projects are seeing them. The following HP-UX patches should make the warnings go away:</source>
          <target state="translated">これらの警告は、壊れたシステムヘッダファイルが原因のようで、他のオープンソースプロジェクトでも見られています。以下の HP-UX パッチで警告が消えるはずです。</target>
        </trans-unit>
        <trans-unit id="b797d5622b1d1393375da6062407cd69c0ce1eae" translate="yes" xml:space="preserve">
          <source>They work somewhat like compiler directives (pragmata) in that they tend to affect the compilation of your program, and thus will usually work well only when used within a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. Most of these are lexically scoped, so an inner BLOCK may countermand them by saying:</source>
          <target state="translated">それらは、プログラムのコンパイルに影響を与える傾向があるという点で、コンパイラ指令（プラグマ）のように機能します。したがって、通常、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 内で使用した場合、または &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 内で使用した場合にのみ適切に機能します。これらのほとんどはレキシカルにスコープされているので、内側のBLOCKは次のようにしてそれらを打ち消すことができます：</target>
        </trans-unit>
        <trans-unit id="6abf5248bc6675a47a3988cb21c2af942a4be9d1" translate="yes" xml:space="preserve">
          <source>They works like the same name operators as theirs.</source>
          <target state="translated">彼らは彼らと同じ名前の演算子のように動作します。</target>
        </trans-unit>
        <trans-unit id="dd7133f0a4178555cc80821515a5b2265342ef9d" translate="yes" xml:space="preserve">
          <source>They're opcode specific, and occur less often than the public ones, so they're represented by short mnemonics instead of single-chars; see B::Op_private and</source>
          <target state="translated">これらはオペコード固有のもので、公開されているものよりも発生頻度が低いため、1文字ではなく短いニーモニックで表現されています;B::Op_private および</target>
        </trans-unit>
        <trans-unit id="c1537a4a381e27d6bdd2214d8f21c4c16bc119e0" translate="yes" xml:space="preserve">
          <source>Things that are broken or just don't work quite right.</source>
          <target state="translated">壊れていたり、うまく機能しないもの。</target>
        </trans-unit>
        <trans-unit id="731699b64ef1b2479598864f867653535a2b0bbe" translate="yes" xml:space="preserve">
          <source>Things that make Perl easier to learn: Unix experience, almost any kind of programming experience, an understanding of regular expressions, and the ability to understand other people's code. If there's something you need to do, then it's probably already been done, and a working example is usually available for free. Don't forget Perl modules, either. They're discussed in Part 3 of this FAQ, along with &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f&quot;&gt;CPAN&lt;/a&gt;, which is discussed in Part 2.</source>
          <target state="translated">Perlを学びやすくするもの：Unixの経験、ほとんどすべての種類のプログラミングの経験、正規表現の理解、他の人のコードを理解する能力。あなたがやらなければならないことがあるなら、それはおそらくすでに行われており、実用的な例は通常無料で利用できます。Perlモジュールも忘れないでください。これらは、このFAQのパート3で説明されています&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f&quot;&gt;。CPAN&lt;/a&gt;はパート2で説明されています。</target>
        </trans-unit>
        <trans-unit id="d9717c58dca00ca4e0fdd51bb342bee53c9f4f98" translate="yes" xml:space="preserve">
          <source>Things that need to be done to improve this document.</source>
          <target state="translated">この文書を改善するために必要なこと</target>
        </trans-unit>
        <trans-unit id="8bbe6bf4aeb5dea432e939ae88abe2437f8000be" translate="yes" xml:space="preserve">
          <source>Things to take special care with, sometimes called WARNINGS.</source>
          <target state="translated">特に気をつけるべきことは、「警告」と呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="f330d2b9426f91894c132eec7839a297e7c3f2bb" translate="yes" xml:space="preserve">
          <source>Think about reusability. Why waste brainpower on a one-shot when you might want to do something like it again? Consider generalizing your code. Consider writing a module or object class. Consider making your code run cleanly with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; (or &lt;b&gt;-w&lt;/b&gt;) in effect. Consider giving away your code. Consider changing your whole world view. Consider... oh, never mind.</source>
          <target state="translated">再利用性について考えてください。もう一度同じようなことをしたいと思うかもしれないのに、なぜワンショットで頭脳を無駄にするのですか？コードを一般化することを検討してください。モジュールまたはオブジェクトクラスの作成を検討してください。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; してコードをクリーンに実行し、警告（または&lt;b&gt;-w&lt;/b&gt;）を有効にすることを検討してください。コードを配布することを検討してください。全世界観を変えることを検討してください。考えてみてください&amp;hellip;ああ、気にしないでください。</target>
        </trans-unit>
        <trans-unit id="369cf00ca2016a53c53652dbdfad94b27946d096" translate="yes" xml:space="preserve">
          <source>Think carefully about whether OO is appropriate for your module. Gratuitous object orientation results in complex APIs which are difficult for the average module user to understand or use.</source>
          <target state="translated">OO がモジュールに適しているかどうかを慎重に考えてください。オブジェクトの方向性を重視すると、平均的なモジュールのユーザーが理解したり使用したりするのが困難な複雑なAPIになってしまいます。</target>
        </trans-unit>
        <trans-unit id="d05ca6e0d80ee8bcc4977d0ae97da44f7a9ad4e9" translate="yes" xml:space="preserve">
          <source>Think of these macros as working a bit like &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; in Perl to limit the scope of local variables.</source>
          <target state="translated">これらのマクロは、ローカル変数のスコープを制限するために、Perlでの &lt;code&gt;{&lt;/code&gt; および &lt;code&gt;}&lt;/code&gt; のように機能すると考えてください。</target>
        </trans-unit>
        <trans-unit id="b798a2f7f99599171fc59b43924703f9a2be020d" translate="yes" xml:space="preserve">
          <source>Thinking of mixing &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; and threads? Please lie down and wait until the feeling passes. Be aware that the semantics of &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; vary between platforms. For example, some Unix systems copy all the current threads into the child process, while others only copy the thread that called &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;. You have been warned!</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; とスレッドを混在させることを考えていますか？横になった気分になるまでお待ちください。 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; のセマンティクスはプラットフォームによって異なることに注意してください。たとえば、一部のUnixシステムは現在のすべてのスレッドを子プロセスにコピーしますが、他のシステムは &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; を呼び出したスレッドのみをコピーします。警告されました！</target>
        </trans-unit>
        <trans-unit id="7971e6a051104074fdae0f02322417b6eb5695a2" translate="yes" xml:space="preserve">
          <source>This</source>
          <target state="translated">This</target>
        </trans-unit>
        <trans-unit id="3b8ab74e7f407ff0613b1e22c57e79a02a3a70ca" translate="yes" xml:space="preserve">
          <source>This 'cheat sheet' is a handy reference, meant for beginning Perl programmers. Not everything is mentioned, but 195 features may already be overwhelming.</source>
          <target state="translated">この「チートシート」は、Perl プログラマの初心者のための便利なリファレンスです。すべてが記載されているわけではありませんが、195の機能はすでに圧倒されているかもしれません。</target>
        </trans-unit>
        <trans-unit id="449deebd32ed5eaf74d8aec8711aa290af1210b0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; is somewhat like &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; found in C, in that it is the opposite of read. The wrapper for the perl &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function is called &lt;code&gt;format_write&lt;/code&gt; . However, whilst the C &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function returns the number of bytes written, this &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function simply returns true if successful (like &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;). A more C-like &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; (see above).</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; は、Cで見られる &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 似ていますが、読み取りの反対です。perl &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 関数のラッパーは &lt;code&gt;format_write&lt;/code&gt; と呼ばれます。ただし、Cの &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 関数は書き込まれたバイト数を返しますが、この &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 関数は（ &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; のように）成功した場合は単にtrueを返します。よりC風の &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; です（上記を参照）。</target>
        </trans-unit>
        <trans-unit id="809a4dea69e66cbb56a6927382a1c7747ff2b245" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;POSIX::SigAction&lt;/code&gt; object is intended for use with the &lt;code&gt;POSIX::sigaction()&lt;/code&gt; function.</source>
          <target state="translated">この &lt;code&gt;POSIX::SigAction&lt;/code&gt; オブジェクトは、 &lt;code&gt;POSIX::sigaction()&lt;/code&gt; 関数で使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="8a5e4636d7ee396c2538c58facc6d68cb4eb415b" translate="yes" xml:space="preserve">
          <source>This CPAN module lets you create application-level DTrace probes written in Perl.</source>
          <target state="translated">この CPAN モジュールを使用すると、Perl で書かれたアプリケーションレベルの DTrace プローブを作成することができます。</target>
        </trans-unit>
        <trans-unit id="511e2864753cd52a1ebcc75d7881ce1d9fb8ec6b" translate="yes" xml:space="preserve">
          <source>This DBM filter allows you to choose the character encoding will be store in the DBM file. The usage is</source>
          <target state="translated">このDBMフィルタは、DBMファイルに格納する文字エンコーディングを選択することができます。使用法は</target>
        </trans-unit>
        <trans-unit id="8d6cf7bbaf015be1842a3503d362b5db206d9719" translate="yes" xml:space="preserve">
          <source>This DBM filter is used when interoperating with a C/C++ application that uses a C int as either the key and/or value in the DBM file.</source>
          <target state="translated">この DBM フィルタは、DBM ファイルのキーおよび/または値として C int を使用する C/C++アプリケーションと相互運用する際に使用されます。</target>
        </trans-unit>
        <trans-unit id="b9afd96c4f0113b4f4a0ca24ef6b7ce1c1eceace" translate="yes" xml:space="preserve">
          <source>This DBM filter will compress all data before it is written to the database and uncompressed it on reading.</source>
          <target state="translated">このDBMフィルタは、データベースに書き込まれる前の全てのデータを圧縮し、読み込み時に圧縮を解除します。</target>
        </trans-unit>
        <trans-unit id="b3c940c7a493363dfcc2ec46854ae2f8bf461ebc" translate="yes" xml:space="preserve">
          <source>This Filter will ensure that all data written to the DBM will be encoded in UTF-8.</source>
          <target state="translated">このフィルタは、DBM に書き込まれたすべてのデータが UTF-8 でエンコードされるようにします。</target>
        </trans-unit>
        <trans-unit id="fc3e8623db78291ea4659afa55c27a0af1b2fdc1" translate="yes" xml:space="preserve">
          <source>This IPv4-only function is provided largely for legacy reasons. Newly-written code should use getaddrinfo() or inet_pton() instead for IPv6 support.</source>
          <target state="translated">この IPv4 専用の関数は、主にレガシーな理由から提供されています。新しく書かれたコードでは、IPv6 サポートのために代わりに getaddrinfo()または inet_pton()を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a1b8940a7dbf27c2770dc1f730a7a76eb668b365" translate="yes" xml:space="preserve">
          <source>This IPv4-only function is provided largely for legacy reasons. Newly-written code should use getnameinfo() or inet_ntop() instead for IPv6 support.</source>
          <target state="translated">この IPv4 専用の関数は、主にレガシーな理由から提供されています。新しく書かれたコードでは、IPv6 サポートの代わりに getnameinfo()や inet_ntop()を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="722a81c183f099f4bcdf928fea77c08691faed91" translate="yes" xml:space="preserve">
          <source>This MGVTBL structure is set at compile-time in</source>
          <target state="translated">このMGVTBL構造体は、コンパイル時に</target>
        </trans-unit>
        <trans-unit id="d239471597c0b244a6c849bc4b21df8bfaf5b7db" translate="yes" xml:space="preserve">
          <source>This PerlIO layer opens a filehandle with a transparent encoding filter.</source>
          <target state="translated">このPerlIOレイヤは、透過的なエンコーディングフィルタでファイルハンドルを開きます。</target>
        </trans-unit>
        <trans-unit id="a75ec57aa7be5f3e457676aa78fd87835feef6b5" translate="yes" xml:space="preserve">
          <source>This README was written by Sherm Pendley &amp;lt;sherm@dot-app.org&amp;gt;, and subsequently updated by Dominic Dunlop &amp;lt;domo@computer.org&amp;gt; and Breno G. de Oliveira &amp;lt;garu@cpan.org&amp;gt;. The &quot;Starting From Scratch&quot; recipe was contributed by John Montbriand &amp;lt;montbriand@apple.com&amp;gt;.</source>
          <target state="translated">このREADMEは、Sherm Pendley &amp;lt;sherm@dot-app.org&amp;gt;によって作成され、その後Dominic Dunlop &amp;lt;domo@computer.org&amp;gt;およびBreno G. de Oliveira &amp;lt;garu@cpan.org&amp;gt;によって更新されました。&quot;ゼロから始める&quot;レシピはJohn Montbriand &amp;lt;montbriand@apple.com&amp;gt;によって提供されました。</target>
        </trans-unit>
        <trans-unit id="ebd95c4f5ef4e4618995d165e48685abb75f4895" translate="yes" xml:space="preserve">
          <source>This TODO</source>
          <target state="translated">このTODO</target>
        </trans-unit>
        <trans-unit id="65401762a1d1713b0f2418936baae5413a27fffb" translate="yes" xml:space="preserve">
          <source>This UTF8 flag is not visible in Perl scripts, exactly for the same reason you cannot (or rather, you</source>
          <target state="translated">この UTF8 フラグは Perl スクリプトでは表示されません。</target>
        </trans-unit>
        <trans-unit id="4052f785cdabbfe61b3039b9711ade7bde52e516" translate="yes" xml:space="preserve">
          <source>This a copy of the $md5 object. It is useful when you do not want to destroy the digests state, but need an intermediate value of the digest, e.g. when calculating digests iteratively on a continuous data stream. Example:</source>
          <target state="translated">これは $md5 オブジェクトのコピーです。ダイジェストの状態を破棄したくないが、ダイジェストの中間値が必要な場合、例えば連続的なデータストリームで反復的にダイジェストを計算する場合などに便利です。例えば、連続したデータストリームで反復的にダイジェストを計算する場合などです。</target>
        </trans-unit>
        <trans-unit id="80e3860a781a3958ead624c7605f67461e6feac0" translate="yes" xml:space="preserve">
          <source>This action at a distance can be confusing, so you should be careful with your use of weaken. You should weaken the reference in the variable that will go out of scope</source>
          <target state="translated">この距離でのアクションは混乱を招く可能性があるので、weakenの使い方には注意が必要です。範囲外になる変数の中の参照を弱める必要があります</target>
        </trans-unit>
        <trans-unit id="31854231243bab283e1b65fbafa450794c35d551" translate="yes" xml:space="preserve">
          <source>This affects the &quot;udp&quot;, &quot;tcp&quot;, and &quot;syn&quot; protocols.</source>
          <target state="translated">これは、&quot;udp&quot;、&quot;tcp&quot;、&quot;syn&quot; プロトコルに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="873bbf87a172d66b10ad3b61904a0d639ca9b860" translate="yes" xml:space="preserve">
          <source>This allows Math::BigInt to correctly retrieve package globals from the subclass, like &lt;code&gt;$SubClass::precision&lt;/code&gt; . See t/Math/BigInt/Subclass.pm or t/Math/BigFloat/SubClass.pm completely functional subclass examples.</source>
          <target state="translated">これにより、Math :: BigIntは、 &lt;code&gt;$SubClass::precision&lt;/code&gt; ように、サブクラスからパッケージグローバルを正しく取得できます。t / Math / BigInt / Subclass.pmまたはt / Math / BigFloat / SubClass.pmの完全に機能するサブクラスの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d5501a126d7bcccb962537b6328418e9a9cd85d" translate="yes" xml:space="preserve">
          <source>This allows a user to setup a directory tree for some software with directories &lt;code&gt;&amp;lt;root&amp;gt;/bin&lt;/code&gt; and &lt;code&gt;&amp;lt;root&amp;gt;/lib&lt;/code&gt; , and then the above example will allow the use of modules in the lib directory without knowing where the software tree is installed.</source>
          <target state="translated">これにより、ユーザーはディレクトリ &lt;code&gt;&amp;lt;root&amp;gt;/bin&lt;/code&gt; および &lt;code&gt;&amp;lt;root&amp;gt;/lib&lt;/code&gt; を使用して一部のソフトウェアのディレクトリツリーを設定できます。上記の例では、ソフトウェアツリーがインストールされている場所を知らなくても、libディレクトリのモジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="f2d1ac05408a326c089b0ec60746ba54464b2076" translate="yes" xml:space="preserve">
          <source>This allows for a more traditional use of sockatmark() as a procedural socket function. If your system does not support sockatmark(), the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; declaration will fail at compile time.</source>
          <target state="translated">これにより、手続き型ソケット関数として、sockatmark（）のより伝統的な使用が可能になります。システムがsockatmark（）をサポートしていない場合、 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 宣言はコンパイル時に失敗します。</target>
        </trans-unit>
        <trans-unit id="5c4bf55b527390af875f220a6a455b96b2cc2be5" translate="yes" xml:space="preserve">
          <source>This allows one to specify the</source>
          <target state="translated">これにより</target>
        </trans-unit>
        <trans-unit id="dd0d07d0d3a6167b29dae996bfd8a33bb4d04031" translate="yes" xml:space="preserve">
          <source>This allows the ability to provide an extra pointer (called the &quot;host&quot; environment) for all the system calls. This makes it possible for all the system stuff to maintain their own state, broken down into seven C structures. These are thin wrappers around the usual system calls (see</source>
          <target state="translated">これにより、すべてのシステムコールに余分なポインタ(ホスト環境と呼ばれる)を提供することができるようになります。これにより、7つのC言語の構造体に分解されたシステムのすべてのものが、それ自身の状態を維持することが可能になります。これらは通常のシステムコールの薄いラッパーです (</target>
        </trans-unit>
        <trans-unit id="f2d9de12c87f7e2eb33ce435c5af882982d468fe" translate="yes" xml:space="preserve">
          <source>This allows the engine to dupe its private data but also if necessary modify the final structure if it really must.</source>
          <target state="translated">これにより、エンジンはプライベートデータを複製することができますが、本当に必要であれば最終的な構造を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="afb3f86b59b2eab9a83b014b190ee8244b9d77c6" translate="yes" xml:space="preserve">
          <source>This allows the programmer to look at the execution stack and variables to find out the cause of the exception. As the debugger is being invoked as the Perl interpreter is about to do a fatal exit, continuing the execution in debug mode is usually not practical.</source>
          <target state="translated">これにより、プログラマは実行スタックや変数を見て例外の原因を見つけることができます。Perl インタプリタが致命的な終了をしようとしているときにデバッガが起動されているので、デバッグモードで実行を続けることは通常実用的ではありません。</target>
        </trans-unit>
        <trans-unit id="1baefaa51fc7ed599ce445dad500d37cb72bf43c" translate="yes" xml:space="preserve">
          <source>This allows you to add a prefix to the backup file, instead of (or in addition to) a suffix:</source>
          <target state="translated">これにより、バックアップファイルに接尾辞の代わりに(または接尾辞に加えて)接頭辞を追加することができます。</target>
        </trans-unit>
        <trans-unit id="3e47154414d862007ad5f643f15fef0b3978ca2c" translate="yes" xml:space="preserve">
          <source>This allows you to intermix your source code and your documentation text freely, as in</source>
          <target state="translated">これにより、以下のようにソースコードとドキュメントのテキストを自由に混在させることができます。</target>
        </trans-unit>
        <trans-unit id="56e637a731a56d0d223f91be743e436a188835e3" translate="yes" xml:space="preserve">
          <source>This allows you to pass a reference to a scalar, in which the data will be stored:</source>
          <target state="translated">これにより、データが格納されるスカラへの参照を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="ae11cd12869687833116af8fabb9e16d79564d09" translate="yes" xml:space="preserve">
          <source>This allows you to specify &lt;code&gt;constants&lt;/code&gt; in your template. ie, they keys that are not allowed to be altered by the user. It pretty much allows you to keep all your &lt;code&gt;configurable&lt;/code&gt; data in one place; the &lt;code&gt;Params::Check&lt;/code&gt; template.</source>
          <target state="translated">これにより、テンプレートで &lt;code&gt;constants&lt;/code&gt; を指定できます。つまり、ユーザーが変更することを許可されていないキーです。ほとんどの場合、 &lt;code&gt;configurable&lt;/code&gt; すべてのデータを1か所に保持できます。 &lt;code&gt;Params::Check&lt;/code&gt; テンプレート。</target>
        </trans-unit>
        <trans-unit id="ec9cd2ea84115168b54e6b0797c0f572af954da0" translate="yes" xml:space="preserve">
          <source>This almost definitely doesn't do what you expect:</source>
          <target state="translated">これはほぼ間違いなく期待通りにはなりません。</target>
        </trans-unit>
        <trans-unit id="5ba2015dbd8b7d90bb6da319e60421ccbe89f224" translate="yes" xml:space="preserve">
          <source>This also applies to integers that look like floating point constants:</source>
          <target state="translated">これは、浮動小数点定数のように見える整数にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="636185aa1476a4214e4b7454bccd1f721aa5d7e5" translate="yes" xml:space="preserve">
          <source>This also behaves similarly, but assigns to a lexical variable instead of to &lt;code&gt;$_&lt;/code&gt; :</source>
          <target state="translated">これも同様に動作しますが、 &lt;code&gt;$_&lt;/code&gt; ではなくレキシカル変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="77df2183cb5ed8fa6c016243494c2444f23d3c09" translate="yes" xml:space="preserve">
          <source>This also has a special use with XS AUTOLOAD subs. See &lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;Autoloading with XSUBs in perlguts&lt;/a&gt;.</source>
          <target state="translated">これには、XS AUTOLOADサブでの特別な使用法もあります。&lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;perlgutsでのXSUBによる自動ロードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3d548e6c0ea6757b5bd736b5e0dc177ac6e6019" translate="yes" xml:space="preserve">
          <source>This also has implications for the use of the SUPER:: qualifier (see &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;).</source>
          <target state="translated">これは、SUPER ::修飾子の使用にも影響します（&lt;a href=&quot;perlobj&quot;&gt;perlobjを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f8da07f35c437fa97e844be13f7f26224b7e80d0" translate="yes" xml:space="preserve">
          <source>This also means it is a bad idea to check for some specific package, since the actual contents of $x might be something unexpected. Due to the transparent way of bignum &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; should not be necessary, anyway.</source>
          <target state="translated">これは、$ xの実際の内容が予期しないものになる可能性があるため、特定のパッケージをチェックすることは悪い考えであることも意味します。とにかく、bignumの透過的な方法により、 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="9f046ba2ed5c45f32bb7d779ddd434216adcb9e9" translate="yes" xml:space="preserve">
          <source>This also means that a first argument hash reference now becomes the second argument:</source>
          <target state="translated">これはまた、第1引数のハッシュ参照が第2引数になることを意味します。</target>
        </trans-unit>
        <trans-unit id="53e0f20ff4a10e2905e391319be8b9814ea5ca78" translate="yes" xml:space="preserve">
          <source>This also returns the file format version. If the version is &quot;2.7&quot; then major would be 2 and minor would be 7. The minor element is missing for when major is less than 2.</source>
          <target state="translated">これはファイル形式のバージョンも返します。バージョンが &quot;2.7 &quot;であれば、メジャーは2、マイナーは7となります。メジャーが2未満の場合は、マイナー要素が欠落しています。</target>
        </trans-unit>
        <trans-unit id="61c52be3ac150c6eed66b2a1ead6f0d851e682d3" translate="yes" xml:space="preserve">
          <source>This also works for other subclasses, like Math::String.</source>
          <target state="translated">これは Math::String のような他のサブクラスでも動作します。</target>
        </trans-unit>
        <trans-unit id="8468a87cfa0204ff52a567b1eaf4b66d1ee547eb" translate="yes" xml:space="preserve">
          <source>This always means your main memory, not your disk. Clouding the issue is the fact that your machine may implement &lt;b&gt;virtual&lt;/b&gt; memory; that is, it will pretend that it has more memory than it really does, and it&amp;rsquo;ll use disk space to hold inactive bits. This can make it seem like you have a little more memory than you really do, but it&amp;rsquo;s not a substitute for real memory. The best thing that can be said about virtual memory is that it lets your performance degrade gradually rather than suddenly when you run out of real memory. But your program can die when you run out of virtual memory, too&amp;mdash;if you haven&amp;rsquo;t thrashed your disk to death first.</source>
          <target state="translated">これは、常にディスクではなくメインメモリを意味します。問題を曇らせるのは、マシンが&lt;b&gt;仮想&lt;/b&gt;メモリを実装している可能性があるという事実です。つまり、実際よりも多くのメモリがあるように見せかけ、ディスクスペースを使用して非アクティブなビットを保持します。これにより、実際よりも少し多くのメモリがあるように見えますが、実際のメモリの代わりにはなりません。仮想メモリについて言えることは、実際のメモリが不足したときに、突然ではなく徐々にパフォーマンスが低下することです。しかし、仮想メモリが不足すると、プログラムが停止する可能性もあります。最初にディスクをスラッシュしていない場合です。</target>
        </trans-unit>
        <trans-unit id="165f78228b9bb880f61927fda978ad6714cce456" translate="yes" xml:space="preserve">
          <source>This anomaly stems from Perl's attempt to not disturb older programs that didn't use Unicode, along with Perl's desire to add Unicode support seamlessly. But the result turned out to not be seamless. (By the way, you can choose to be warned when things like this happen. See &lt;code&gt;&lt;a href=&quot;encoding/warnings&quot;&gt;encoding::warnings&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">この異常は、Unicodeのサポートをシームレスに追加したいというPerlの要望とともに、Unicodeを使用しなかった古いプログラムを妨害しないというPerlの試みに起因しています。しかし、結果はシームレスではありませんでした。（ちなみに、このようなことが起こったときに警告するように選択することができます &lt;code&gt;&lt;a href=&quot;encoding/warnings&quot;&gt;encoding::warnings&lt;/a&gt;&lt;/code&gt; 参照してください。）</target>
        </trans-unit>
        <trans-unit id="8c246570729105a65f6bd289985b0b62d1e1f94f" translate="yes" xml:space="preserve">
          <source>This appeared in perl 5.10.0. Anything matched left of &lt;code&gt;\K&lt;/code&gt; is not included in &lt;code&gt;$&amp;amp;&lt;/code&gt; , and will not be replaced if the pattern is used in a substitution. This lets you write &lt;code&gt;s/PAT1 \K PAT2/REPL/x&lt;/code&gt; instead of &lt;code&gt;s/(PAT1) PAT2/${1}REPL/x&lt;/code&gt; or &lt;code&gt;s/(?&amp;lt;=PAT1) PAT2/REPL/x&lt;/code&gt; .</source>
          <target state="translated">これはperl 5.10.0で登場しました。 &lt;code&gt;\K&lt;/code&gt; 左側に一致するものはすべて &lt;code&gt;$&amp;amp;&lt;/code&gt; に含まれず、パターンが置換で使用されている場合は置き換えられません。これにより、 &lt;code&gt;s/(PAT1) PAT2/${1}REPL/x&lt;/code&gt; または &lt;code&gt;s/(?&amp;lt;=PAT1) PAT2/REPL/x&lt;/code&gt; 代わりに &lt;code&gt;s/PAT1 \K PAT2/REPL/x&lt;/code&gt; を書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="a9e79001ab117c0cf333336e9232ddbb9a00de3d" translate="yes" xml:space="preserve">
          <source>This applies equally to method names, parameter names, and anything else which is visible to the user (and most things that aren't!)</source>
          <target state="translated">これは、メソッド名、パラメータ名、その他ユーザーから見えるものにも同じように適用されます(ほとんどのものはそうではありません!)。</target>
        </trans-unit>
        <trans-unit id="70dd8476567c22ea231857d01ff4db7f81b73be8" translate="yes" xml:space="preserve">
          <source>This applies only to lexical variables, by the way. Dynamic variables continue to work as they have always worked. Closure is not something that most Perl programmers need trouble themselves about to begin with.</source>
          <target state="translated">ところで、これは語彙変数にのみ適用されます。動的変数は、これまでと同じように動作します。クロージャーは、ほとんどのPerlプログラマが最初から問題にするようなものではありません。</target>
        </trans-unit>
        <trans-unit id="4e13602141364999d0474f62de688119ccaf7274" translate="yes" xml:space="preserve">
          <source>This applies to the perlio system only. For versions before 5.7, &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; is equivalent to &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; .</source>
          <target state="translated">これはperlioシステムにのみ適用されます。5.7以前のバージョンでは、 &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; と等価である &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88ab6b9c73082204ae0542a65f9bf2f5c23ef207" translate="yes" xml:space="preserve">
          <source>This approach also works for comparing hashes. Here we'll demonstrate two different answers:</source>
          <target state="translated">このアプローチはハッシュの比較にも有効です。ここでは2つの異なる答えを示します。</target>
        </trans-unit>
        <trans-unit id="684f52e2ad132a8d50a850505a18c8cf67adca2e" translate="yes" xml:space="preserve">
          <source>This approach makes it comparatively easy to write code preprocessors without worrying about the form or contents of strings, regexes, etc.</source>
          <target state="translated">このアプローチにより、文字列や正規表現などの形式や内容を気にすることなく、比較的簡単にコードプリプロセッサを書くことができます。</target>
        </trans-unit>
        <trans-unit id="21941c4a2190129983b70fab8729b6e9162dfa7f" translate="yes" xml:space="preserve">
          <source>This approach of treating &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; like object methods calls doesn't work for the diamond operator. That's because it's a real operator, not just a function with a comma-less argument. Assuming you've been storing typeglobs in your structure as we did above, you can use the built-in function named &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; to read a record just as &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; does. Given the initialization shown above for @fd, this would work, but only because readline() requires a typeglob. It doesn't work with objects or strings, which might be a bug we haven't fixed yet.</source>
          <target state="translated">オブジェクトメソッドの呼び出しのように &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; を処理するこのアプローチは、diamondオペレーターでは機能しません。これは、これが実際の演算子であり、単なるコンマのない引数を持つ関数ではないためです。上記のように構造体にタイプグロブを格納していると仮定すると、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; と同じように、 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; という名前の組み込み関数を使用してレコードを読み取ることができます。上記の@fdの初期化を考えると、これは機能しますが、readline（）がタイプグロブを必要とするためです。オブジェクトまたは文字列では動作しません。これは、まだ修正されていないバグの可能性があります。</target>
        </trans-unit>
        <trans-unit id="f95f50481ff3516b07bb9d7865830ab6c1ff5648" translate="yes" xml:space="preserve">
          <source>This array holds the offsets of the beginnings of the last successful submatches in the currently active dynamic scope. &lt;code&gt;$-[0]&lt;/code&gt; is the offset into the string of the beginning of the entire match. The</source>
          <target state="translated">この配列は、現在アクティブな動的スコープで最後に成功したサブマッチの開始のオフセットを保持します。 &lt;code&gt;$-[0]&lt;/code&gt; は、一致全体の先頭の文字列へのオフセットです。の</target>
        </trans-unit>
        <trans-unit id="e96381bdcc284e80585b7b54b1e289040c1f9efb" translate="yes" xml:space="preserve">
          <source>This array holds the offsets of the ends of the last successful submatches in the currently active dynamic scope. &lt;code&gt;$+[0]&lt;/code&gt; is the offset into the string of the end of the entire match. This is the same value as what the &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; function returns when called on the variable that was matched against. The</source>
          <target state="translated">この配列は、現在アクティブな動的スコープで最後に成功したサブマッチの終了のオフセットを保持します。 &lt;code&gt;$+[0]&lt;/code&gt; は、一致全体の最後の文字列へのオフセットです。これは、照合された変数に対して呼び出されたときに &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; 関数が返すものと同じ値です。の</target>
        </trans-unit>
        <trans-unit id="de9df0444460b118bc16cc7a6647d43831c503da" translate="yes" xml:space="preserve">
          <source>This array of function pointers is a convenient place to hook into the compilation process. An XS module can put its own custom check function in place of any of the standard ones, to influence the compilation of a particular type of op. However, a custom check function must never fully replace a standard check function (or even a custom check function from another module). A module modifying checking must instead &lt;b&gt;wrap&lt;/b&gt; the preexisting check function. A custom check function must be selective about when to apply its custom behaviour. In the usual case where it decides not to do anything special with an op, it must chain the preexisting op function. Check functions are thus linked in a chain, with the core's base checker at the end.</source>
          <target state="translated">この関数ポインタの配列は、コンパイルプロセスにフックするのに便利な場所です。 XSモジュールは、標準の関数の代わりに独自のカスタムチェック関数を配置して、特定のタイプのopのコンパイルに影響を与えることができます。ただし、カスタムチェック関数は、標準チェック関数（または別のモジュールのカスタムチェック関数）を完全に置き換えることはできません。チェックを変更するモジュールは、代わりに既存のチェック関数を&lt;b&gt;ラップ&lt;/b&gt;する必要があります。カスタムチェック関数は、そのカスタム動作をいつ適用するかについて選択的でなければなりません。 opで特別なことをしないと決定する通常のケースでは、既存のop関数をチェーンする必要があります。したがって、チェック関数はチェーンにリンクされ、コアのベースチェッカーが最後に配置されます。</target>
        </trans-unit>
        <trans-unit id="b8dc273368b99545f08bf93846a0eeb46f2d8f07" translate="yes" xml:space="preserve">
          <source>This article is about a little-known feature of Perl called</source>
          <target state="translated">この記事では、あまり知られていないPerlの機能である</target>
        </trans-unit>
        <trans-unit id="31e9f3bedf523d7ebb982ebf37f1569db684a386" translate="yes" xml:space="preserve">
          <source>This article originally appeared in</source>
          <target state="translated">この記事は元々</target>
        </trans-unit>
        <trans-unit id="290ae5b40be8703f5e688eadedc6451a7fcb95b4" translate="yes" xml:space="preserve">
          <source>This article originally appeared in The Perl Journal #11, and is copyright 1998 The Perl Journal. It appears courtesy of Jon Orwant and The Perl Journal. This document may be distributed under the same terms as Perl itself.</source>
          <target state="translated">この記事は The Perl Journal #11 に掲載されたもので、著作権は 1998 年の The Perl Journal にあります。Jon Orwant と The Perl Journal の提供です。この文書は Perl 自体と同じ条件で配布されています。</target>
        </trans-unit>
        <trans-unit id="f5ced083e00b961f0ed9ea00cb4d87f96f2e0533" translate="yes" xml:space="preserve">
          <source>This assertion may be used as the condition in a</source>
          <target state="translated">このアサーションは</target>
        </trans-unit>
        <trans-unit id="0000b51c42222ffe097e200394d62769ca419cbc" translate="yes" xml:space="preserve">
          <source>This assumes that we saw the locale &quot;en_US.ISO8859-1&quot; using the commands discussed above. We decided to try that instead of the above faulty locale &quot;En_US&quot;--and in Cshish shells (&lt;b&gt;csh&lt;/b&gt;, &lt;b&gt;tcsh&lt;/b&gt;)</source>
          <target state="translated">これは、上記のコマンドを使用してロケール「en_US.ISO8859-1」を見たことを前提としています。上記の障害のあるロケール「En_US」の代わりに、Cshishシェル（&lt;b&gt;csh&lt;/b&gt;、&lt;b&gt;tcsh&lt;/b&gt;）で試してみることにしました。</target>
        </trans-unit>
        <trans-unit id="c0dee2f933f09058dd9bf3765b7f846ec57f52d7" translate="yes" xml:space="preserve">
          <source>This attribute is not a search parameter, but is used to report the result of &lt;code&gt;survey&lt;/code&gt; method, as discussed in the next section.</source>
          <target state="translated">この属性は検索パラメーターではありませんが、次のセクションで説明するように、 &lt;code&gt;survey&lt;/code&gt; 方法の結果を報告するために使用されます。</target>
        </trans-unit>
        <trans-unit id="9c687ced37405f8cf67c894463cfe3d86f5b0e65" translate="yes" xml:space="preserve">
          <source>This attribute is used to specify names to be imported into the extension. It is currently only used by OS/2 and Win32.</source>
          <target state="translated">この属性は、拡張機能にインポートする名前を指定するために使用されます。現在のところOS/2とWin32でのみ使用されています。</target>
        </trans-unit>
        <trans-unit id="a3e8362900ead72447d5c4ebf2182285972d3847" translate="yes" xml:space="preserve">
          <source>This attribute is used to specify names to be imported into the extension. Takes a hash ref.</source>
          <target state="translated">この属性は、拡張モジュールにインポートする名前を指定するために使用されます。ハッシュ参照を取ります。</target>
        </trans-unit>
        <trans-unit id="767e4d21fb47d7f73037ece0977c12a97d29d46d" translate="yes" xml:space="preserve">
          <source>This attribute may be most useful when specified as a string on the command line: perl Makefile.PL EXCLUDE_EXT='Socket Safe'</source>
          <target state="translated">この属性は、コマンドラインで文字列として指定されている場合に最も便利です:perl Makefile.PL EXCLUDE_EXT='Socket Safe'</target>
        </trans-unit>
        <trans-unit id="79f89eca0caacc11c08af6c151f34570659a105e" translate="yes" xml:space="preserve">
          <source>This attribute may be most useful when specified as a string on the command line: perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'</source>
          <target state="translated">この属性は、コマンドラインで文字列として指定すると最も便利です:perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'</target>
        </trans-unit>
        <trans-unit id="f063de8522828eff3b84027f3f1f4329111a6d6f" translate="yes" xml:space="preserve">
          <source>This attribute means that every time this search sees a matching Pod file, it should call this callback routine. The routine is called with two parameters: the current file's filespec, and its pod name. (For example: &lt;code&gt;(&quot;/etc/perljunk/File/Crunk.pm&quot;, &quot;File::Crunk&quot;)&lt;/code&gt; would be in &lt;code&gt;@_&lt;/code&gt; .)</source>
          <target state="translated">この属性は、この検索で​​一致するポッドファイルが見つかるたびに、このコールバックルーチンを呼び出す必要があることを意味します。このルーチンは、現在のファイルのファイル指定とそのポッド名の2つのパラメーターで呼び出されます。（例：（ &lt;code&gt;(&quot;/etc/perljunk/File/Crunk.pm&quot;, &quot;File::Crunk&quot;)&lt;/code&gt; は &lt;code&gt;@_&lt;/code&gt; にあります。）</target>
        </trans-unit>
        <trans-unit id="d1d55a165f99ccc6289583795c82aceb24ceabae" translate="yes" xml:space="preserve">
          <source>This attribute's default value is false, meaning that no callback is called.</source>
          <target state="translated">この属性のデフォルト値は false で、コールバックが呼び出されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="bcee703f93ae24f2cb5be27baf6a28edef44800c" translate="yes" xml:space="preserve">
          <source>This attribute's default value is false; and normally you won't need to turn it on.</source>
          <target state="translated">この属性のデフォルト値は false で、通常はこの属性をオンにする必要はありません。</target>
        </trans-unit>
        <trans-unit id="56b03f0333e5f7d53de3d13aaa7c296581e96eb6" translate="yes" xml:space="preserve">
          <source>This attribute, if set to a nonzero positive value, will make searches output (via &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt;) notes about what they're doing as they do it. This option may be useful for debugging a pod-related module. This attribute's default value is zero, meaning that no &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; messages are produced. (Setting verbose to 1 turns on some messages, and setting it to 2 turns on even more messages, i.e., makes the following search(es) even more verbose than 1 would make them.)</source>
          <target state="translated">この属性は、ゼロ以外の正の値に設定されている場合、検索時に（ &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; を介して）検索の出力を作成します。このオプションは、ポッド関連モジュールのデバッグに役立つ場合があります。この属性のデフォルト値はゼロです。つまり、 &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; メッセージは生成されません。 （verboseを1に設定すると、一部のメッセージがオンになり、2に設定すると、さらに多くのメッセージがオンになります。つまり、次の検索では、1よりも詳細な検索が行われます。）</target>
        </trans-unit>
        <trans-unit id="9a5ab376fb5b92c88b226665b3b3189f69774bb5" translate="yes" xml:space="preserve">
          <source>This attribute, if set to a true value, means that searches should implicitly add perl's</source>
          <target state="translated">この属性は、真の値に設定されている場合、検索は暗黙のうちにPerlの</target>
        </trans-unit>
        <trans-unit id="b39a84ee1b444ad72be8b273ce2aa43be2362f55" translate="yes" xml:space="preserve">
          <source>This behavior can be overridden by supplying your own set of files to search. PL_FILES accepts a hash ref, the key being the file to run and the value is passed in as the first argument when the PL file is run.</source>
          <target state="translated">この動作は、検索するファイルの独自のセットを指定することで上書きすることができます。PL_FILES はハッシュ値を受け取ります。キーは実行するファイルで、PL ファイルを実行する際の第一引数として値が渡されます。</target>
        </trans-unit>
        <trans-unit id="31de598976c4af9df58fa731498e0e725fcefe91" translate="yes" xml:space="preserve">
          <source>This behavior is convenient, because we usually want to ignore newlines when we count and match characters in a line. Sometimes, however, we want to keep track of newlines. We might even want &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; to anchor at the beginning and end of lines within the string, rather than just the beginning and end of the string. Perl allows us to choose between ignoring and paying attention to newlines by using the &lt;code&gt;//s&lt;/code&gt; and &lt;code&gt;//m&lt;/code&gt; modifiers. &lt;code&gt;//s&lt;/code&gt; and &lt;code&gt;//m&lt;/code&gt; stand for single line and multi-line and they determine whether a string is to be treated as one continuous string, or as a set of lines. The two modifiers affect two aspects of how the regexp is interpreted: 1) how the &lt;code&gt;'.'&lt;/code&gt; character class is defined, and 2) where the anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; are able to match. Here are the four possible combinations:</source>
          <target state="translated">この動作は便利です。通常、1行の文字を数えて一致させるときは改行を無視したいからです。ただし、改行を追跡したい場合もあります。私たちもお勧めします &lt;code&gt;^&lt;/code&gt; と &lt;code&gt;$&lt;/code&gt; いうだけで文字列の先頭と末尾よりも、文字列内の行の最初と最後にアンカーに。 Perlでは、 &lt;code&gt;//s&lt;/code&gt; および &lt;code&gt;//m&lt;/code&gt; 修飾子を使用して、改行を無視するか、改行に注意を払うかを選択できます。 &lt;code&gt;//s&lt;/code&gt; と &lt;code&gt;//m&lt;/code&gt; は単一行と複数行を表し、文字列を1つの連続文字列として処理するか、一連の行として処理するかを決定します。 2つの修飾子は、正規表現の解釈方法の2つの側面に影響します。1） &lt;code&gt;'.'&lt;/code&gt; 文字クラスが定義されており、2）アンカー &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; が一致できる場所。考えられる4つの組み合わせは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3d6ebadd3063ef053971debc9b4e78f1e936126e" translate="yes" xml:space="preserve">
          <source>This behavior is more &quot;Do what I mean&quot; than in earlier Perls for most applications. But it catches fewer issues for code that needs to be strictly Unicode compliant. Therefore there is an additional mode of operation available to accommodate such code. This mode is enabled if a regular expression pattern is compiled within the lexical scope where the &lt;code&gt;&quot;non_unicode&quot;&lt;/code&gt; warning class has been made fatal, say by:</source>
          <target state="translated">この動作は、ほとんどのアプリケーションで、以前のPerlよりも「私が何をするか」を上回っています。ただし、Unicodeに厳密に準拠する必要のあるコードでは、問題の検出数は少なくなります。したがって、そのようなコードに対応するために利用可能な追加の操作モードがあります。このモードは、 &lt;code&gt;&quot;non_unicode&quot;&lt;/code&gt; 警告クラスが致命的になっているレキシカルスコープ内で正規表現パターンがコンパイルされた場合に有効になります。</target>
        </trans-unit>
        <trans-unit id="092eaaecfde2fe8092e286b99e012b8ea81cec11" translate="yes" xml:space="preserve">
          <source>This behavior of &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; is to be compatible with POSIX behavior and not traditional VMS behavior.</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 動作は、従来のVMSの動作ではなく、POSIXの動作と互換性があります。</target>
        </trans-unit>
        <trans-unit id="353b3ac3017572fed965aadb9e085377b2c9e20d" translate="yes" xml:space="preserve">
          <source>This behavior provides the semantic of lexical scoping, and is used in, for instance, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; pragma.</source>
          <target state="translated">この動作は、字句スコープのセマンティクスを提供し、たとえば &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; プラグマで使用されます。</target>
        </trans-unit>
        <trans-unit id="902d9db5da6a9d0d90bec88dd7435e3d3036822b" translate="yes" xml:space="preserve">
          <source>This behaviour is identical to that of the actual compiler.</source>
          <target state="translated">この動作は実際のコンパイラと同じです。</target>
        </trans-unit>
        <trans-unit id="fd9ffc9da0934423cf7a8b2a8167c734225e00ac" translate="yes" xml:space="preserve">
          <source>This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a hash. HASH is the name of the hash. (Unlike normal &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, the first argument is</source>
          <target state="translated">これは、dbm（3）、ndbm（3）、sdbm（3）、gdbm（3）、またはBerkeley DBファイルをハッシュにバインドします。HASHはハッシュの名前です。（通常の &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; とは異なり、最初の引数は</target>
        </trans-unit>
        <trans-unit id="2616a24dba48e4df35dec143fa3cabdfd81fd386" translate="yes" xml:space="preserve">
          <source>This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a hash. HASH is the name of the hash. (Unlike normal &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, the first argument is</source>
          <target state="translated">これは、dbm（3）、ndbm（3）、sdbm（3）、gdbm（3）、またはBerkeley DBファイルをハッシュにバインドします。HASHはハッシュの名前です。（通常の &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; とは異なり、最初の引数は</target>
        </trans-unit>
        <trans-unit id="a6324526e82c2b2028f79347525bf2bc78810ebd" translate="yes" xml:space="preserve">
          <source>This block modifies all the &lt;code&gt;.c&lt;/code&gt; files in the current directory, leaving a backup of the original data from each file in a new &lt;code&gt;.c.orig&lt;/code&gt; file.</source>
          <target state="translated">このブロックは、現在のディレクトリにあるすべての &lt;code&gt;.c&lt;/code&gt; ファイルを変更し、各ファイルの元のデータのバックアップを新しい &lt;code&gt;.c.orig&lt;/code&gt; ファイルに残します。</target>
        </trans-unit>
        <trans-unit id="ba453fd403a510bef4a413f0d9ec2dc3165244e0" translate="yes" xml:space="preserve">
          <source>This boilerplate uses the low-overhead &lt;code&gt;XSLoader&lt;/code&gt; if present; if used with an antique Perl which has no &lt;code&gt;XSLoader&lt;/code&gt; , it falls back to using &lt;code&gt;DynaLoader&lt;/code&gt; .</source>
          <target state="translated">このボイラープレートは、低オーバーヘッドの &lt;code&gt;XSLoader&lt;/code&gt; を使用します（存在する場合）。 &lt;code&gt;XSLoader&lt;/code&gt; のない旧式の Perlで使用すると、DynaLoaderを使用するように &lt;code&gt;DynaLoader&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="090e5f02457ce14eed85483c0b931f07be2bd405" translate="yes" xml:space="preserve">
          <source>This bug only affects closures that are generated by the block but used afterwards. Lexical variables that are only used during the lifetime of the block's execution will take their individual values for each invocation, as normal.</source>
          <target state="translated">このバグは、ブロックによって生成された後に使用されるクロージャにのみ影響します。ブロックの実行期間中にのみ使用される語彙変数は、通常通り、呼び出しごとに個別の値を取ります。</target>
        </trans-unit>
        <trans-unit id="3fb23a96de018295d436dfc71b478c2f496e60be" translate="yes" xml:space="preserve">
          <source>This bug was fixed in Perl 5.18, but may still trip you up if you are using older versions:</source>
          <target state="translated">このバグはPerl 5.18で修正されましたが、古いバージョンを使用している場合は、まだあなたを悩ませるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ca44502c3ed83912a6b5db8a967d8fd6b852bc6b" translate="yes" xml:space="preserve">
          <source>This bug will be rectified in future by using method lookup only for methods' &lt;code&gt;AUTOLOAD&lt;/code&gt; s. However, there is a significant base of existing code that may be using the old behavior. So, as an interim step, Perl currently issues an optional warning when non-methods use inherited &lt;code&gt;AUTOLOAD&lt;/code&gt; s.</source>
          <target state="translated">このバグは、メソッドの &lt;code&gt;AUTOLOAD&lt;/code&gt; に対してのみメソッドルックアップを使用することにより、将来的に修正される予定です。ただし、古い動作を使用している可能性がある既存のコードの重要なベースがあります。そのため、暫定的なステップとして、Perlは現在、メソッド以外が継承された &lt;code&gt;AUTOLOAD&lt;/code&gt; を使用するときにオプションの警告を発行しています。</target>
        </trans-unit>
        <trans-unit id="3151c00be9f916508bc5bf705b67d1e4b35d8229" translate="yes" xml:space="preserve">
          <source>This call extracts the next single substring that is a valid Perl quotelike operator (and removes it from $text):</source>
          <target state="translated">このコールは、Perl の有効なクオテル演算子である次の単一の部分文字列を抽出します (そして、それを $text から削除します)。</target>
        </trans-unit>
        <trans-unit id="ced21c2bd0a49aeaa42731431a2edf3632b44a97" translate="yes" xml:space="preserve">
          <source>This call will allow &lt;code&gt;--l&lt;/code&gt; and &lt;code&gt;--L&lt;/code&gt; for the length option, but requires a least &lt;code&gt;--hea&lt;/code&gt; and &lt;code&gt;--hei&lt;/code&gt; for the head and height options.</source>
          <target state="translated">この呼び出しは許可します &lt;code&gt;--l&lt;/code&gt; と &lt;code&gt;--L&lt;/code&gt; lengthオプションのために、しかし少なくとも必要で &lt;code&gt;--hea&lt;/code&gt; と &lt;code&gt;--hei&lt;/code&gt; ヘッドと高さのオプションのために。</target>
        </trans-unit>
        <trans-unit id="cc74026b11403dd05d9d70bf8ec94212f671778f" translate="yes" xml:space="preserve">
          <source>This callback is where Perl untaints its own capture variables under taint mode (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;). See the &lt;code&gt;Perl_reg_numbered_buff_fetch&lt;/code&gt; function in</source>
          <target state="translated">このコールバックは、汚染モードの下でPerlが独自のキャプチャ変数をuntaintingする場所です（&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照）。 &lt;code&gt;Perl_reg_numbered_buff_fetch&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="34608b82ee2af981743bfaea1702ca89b064619d" translate="yes" xml:space="preserve">
          <source>This callback will always be invoked and this will happen for each result after one of the above callbacks is invoked. For example, if &lt;a href=&quot;../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; is loaded, you could use the following to color your test output:</source>
          <target state="translated">このコールバックは常に呼び出され、これは上記のコールバックの1つが呼び出された後、結果ごとに発生します。たとえば、&lt;a href=&quot;../term/ansicolor&quot;&gt;Term :: ANSIColor&lt;/a&gt;がロードされている場合、次のコードを使用してテスト出力に色を付けることができます。</target>
        </trans-unit>
        <trans-unit id="a84240a7c3c6fb058597f6d953d7900c399c1c57" translate="yes" xml:space="preserve">
          <source>This calls &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; with the SV_GMAGIC flag. See &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; .</source>
          <target state="translated">これは、SV_GMAGICフラグを &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; してsv_collxfrm_flagsを呼び出します。 &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="86657828dc4b39c2a031e8feb96e30aa836f7063" translate="yes" xml:space="preserve">
          <source>This calls the select(2) syscall with the bit masks specified, which can be constructed using &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, along these lines:</source>
          <target state="translated">これは、次の行に沿って &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; を使用して構築できるビットマスクを指定してselect（2）syscallを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6030aab04889f87b188edddb787660db9b1b144a" translate="yes" xml:space="preserve">
          <source>This calls the select(2) syscall with the bit masks specified, which can be constructed using &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, along these lines:</source>
          <target state="translated">これは、次の行に沿って &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; を使用して構築できるビットマスクを指定してselect（2）syscallを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9bc12c1e6a592155ae29365e5d2b2a31283e6dd9" translate="yes" xml:space="preserve">
          <source>This can also be a problem with intermediate subprocesses in more complicated code, which will call waitpid() on all open filehandles during global destruction--in no predictable order.</source>
          <target state="translated">これは、より複雑なコードの中の中間サブプロセスでも問題になる可能性があり、グローバルな破壊中にすべての開いているファイルハンドルに対して waitpid()を呼び出すことになります。</target>
        </trans-unit>
        <trans-unit id="62869b1f9b57cb9d79e8730408b0c95ddf4b16ac" translate="yes" xml:space="preserve">
          <source>This can also be called with a null first argument to indicate that &lt;code&gt;oldstash&lt;/code&gt; has been deleted.</source>
          <target state="translated">これをnullの最初の引数で &lt;code&gt;oldstash&lt;/code&gt; て、oldstashが削除されたことを示すこともできます。</target>
        </trans-unit>
        <trans-unit id="d43bae30188acac82d7e357353fabe7bc6c40a81" translate="yes" xml:space="preserve">
          <source>This can be accomplished by adding a repeat specifier to the option specification. Repeat specifiers are very similar to the &lt;code&gt;{...}&lt;/code&gt; repeat specifiers that can be used with regular expression patterns. For example, the above command line would be handled as follows:</source>
          <target state="translated">これは、オプション指定に繰り返し指定子を追加することで実現できます。繰り返し指定子は、正規表現パターンで使用できる &lt;code&gt;{...}&lt;/code&gt; 繰り返し指定子とよく似ています。たとえば、上記のコマンドラインは次のように処理されます。</target>
        </trans-unit>
        <trans-unit id="372e8345a480f344b8fa12b55e0c07a688e7200f" translate="yes" xml:space="preserve">
          <source>This can be accomplished with a destination routine:</source>
          <target state="translated">これは、デスティネーション・ルーチンで実現できます。</target>
        </trans-unit>
        <trans-unit id="c3e3779b19d94c38ed3503cfda1db4bf067d5a3d" translate="yes" xml:space="preserve">
          <source>This can be conveniently combined with precalculation of keys as given above.</source>
          <target state="translated">これは、上記のようなキーの事前計算と便利に組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="dee9c9bfb944617270087476daa04080c698fb3a" translate="yes" xml:space="preserve">
          <source>This can be used to change the</source>
          <target state="translated">これを使用して</target>
        </trans-unit>
        <trans-unit id="d06a37a2d3a4148b6ee21e32af3a875ef2d651aa" translate="yes" xml:space="preserve">
          <source>This can be used to determine which branch of a pattern was matched without using a separate capture group for each branch, which in turn can result in a performance improvement, as perl cannot optimize &lt;code&gt;/(?:(x)|(y)|(z))/&lt;/code&gt; as efficiently as something like &lt;code&gt;/(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/&lt;/code&gt; .</source>
          <target state="translated">これは、各ブランチに個別のキャプチャグループを使用せずにパターンのどのブランチが一致したかを判断するために使用でき、perlは &lt;code&gt;/(?:(x)|(y)|(z))/&lt;/code&gt; &lt;code&gt;/(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/&lt;/code&gt; と同じくらい効率的です。</target>
        </trans-unit>
        <trans-unit id="c6b6a0827f222037bfd74f5afc449218b3d32dc4" translate="yes" xml:space="preserve">
          <source>This can be used to provide overridable configuration defaults:</source>
          <target state="translated">これは、オーバーライド可能な設定のデフォルトを提供するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="7302fe67fb868f202093521caa858978f0b6a28c" translate="yes" xml:space="preserve">
          <source>This can be used to see the effect of/bugs in the various layers e.g.</source>
          <target state="translated">これは、様々なレイヤーの効果/バグを確認するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="20e14da8dfc2bfdf2f71fc590d8fe2a63e1000ea" translate="yes" xml:space="preserve">
          <source>This can be used to store bytes in the string component of the SV. Here the representation of the data is irrelevant to perl and the bytes themselves are just stored in the SV. It is assumed that the C variable is a pointer (the bytes are copied from that memory location). If the pointer is pointing to something that is represented by 8 bytes then those 8 bytes are stored in the SV (and length() will report a value of 8). This entry is similar to T_OPAQUE.</source>
          <target state="translated">これはSVの文字列コンポーネントにバイトを格納するために使用することができます。ここでは、データの表現はperlとは無関係で、バイト自体はSVに格納されているだけです。C変数はポインタであると仮定しています(バイトはそのメモリの場所からコピーされます)。ポインタが8バイトで表される何かを指している場合、その8バイトはSVに格納されます(そして、length()は8の値を報告します)。このエントリは T_OPAQUE と似ています。</target>
        </trans-unit>
        <trans-unit id="0410f2327d86bdf0fdae05f37687269ec62b9fe1" translate="yes" xml:space="preserve">
          <source>This can be used to store data from non-pointer types in the string part of an SV. It is similar to T_OPAQUEPTR except that the typemap retrieves the pointer directly rather than assuming it is being supplied. For example, if an integer is imported into Perl using T_OPAQUE rather than T_IV the underlying bytes representing the integer will be stored in the SV but the actual integer value will not be available. i.e. The data is opaque to perl.</source>
          <target state="translated">これは、SVの文字列部分にポインタではない型のデータを格納するために使用することができます。これは T_OPAQUEPTR と似ていますが、タイプマップがポインタを供給されていると仮定するのではなく、直接ポインタを取得する点が異なります。例えば、整数が T_IV ではなく T_OPAQUE を使用して Perl にインポートされた場合、その整数を表すバイトは SV に格納されますが、実際の整数値は利用できません。</target>
        </trans-unit>
        <trans-unit id="89bc9efe11bbc18be53fe6f2369d301f92011919" translate="yes" xml:space="preserve">
          <source>This can be useful when carrying out batch operations on multiple files that have both an input filename and output filename and the output file can be derived from the input filename. Examples of operations where this can be useful include, file renaming, file copying and file compression.</source>
          <target state="translated">これは、入力ファイル名と出力ファイル名の両方を持ち、出力ファイルが入力ファイル名から派生することができる複数のファイルでバッチ操作を実行するときに便利です。これが役に立つ操作の例としては、ファイルのリネーム、ファイルのコピー、ファイルの圧縮などがあります。</target>
        </trans-unit>
        <trans-unit id="7ee5530e46592bdd5b18c5d4e4adf9c1e149be67" translate="yes" xml:space="preserve">
          <source>This can easily be demonstrated by using a module, such as the Socket module, which uses eval &quot;...&quot; as part of an AUTOLOAD function. You can 'use' the module outside the compartment and share an (autoloaded) function with the compartment. If an autoload is triggered by code in the compartment, or by any code anywhere that is called by any means from the compartment, then the eval in the Socket module's AUTOLOAD function happens in the namespace of the compartment. Any variables created or used by the eval'd code are now under the control of the code in the compartment.</source>
          <target state="translated">これは、Socketモジュールのように、AUTOLOAD関数の一部としてeval &quot;...&quot;を使用するモジュールを使用することで簡単に示すことができます。コンパートメントの外でモジュールを「使用」して、コンパートメントと(オートロードされた)関数を共有することができます。オートロードがコンパートメント内のコード、またはコンパートメントから何らかの手段で呼び出される任意の場所のコードによってトリガされた場合、SocketモジュールのAUTOLOAD関数内のevalはコンパートメントの名前空間で発生します。eval'dコードによって作成された、または使用された変数は、コンパートメント内のコードの制御下にあります。</target>
        </trans-unit>
        <trans-unit id="33eb1b5384e732b374fa6a2eb81b539c4ef372da" translate="yes" xml:space="preserve">
          <source>This can give a serious performance boost to your threaded program, since more than one thread will be executing at the same time. As a tradeoff, though, any of those nagging synchronization issues that might not have shown with basic kernel threads will appear with a vengeance.</source>
          <target state="translated">これにより、複数のスレッドが同時に実行されるため、スレッド化されたプログラムのパフォーマンスを大幅に向上させることができます。しかし、トレードオフとして、基本的なカーネルスレッドでは表示されなかったかもしれない厄介な同期化の問題が、復讐心を持って現れるでしょう。</target>
        </trans-unit>
        <trans-unit id="56f625d37a903c20859d631591a0773b6d672cf7" translate="yes" xml:space="preserve">
          <source>This can lead to some ambiguities. When &lt;code&gt;\N&lt;/code&gt; is not followed immediately by a left brace, Perl assumes the &lt;code&gt;[^\n]&lt;/code&gt; meaning. Also, if the braces form a valid quantifier such as &lt;code&gt;\N{3}&lt;/code&gt; or &lt;code&gt;\N{5,}&lt;/code&gt; , Perl assumes that this means to match the given quantity of non-newlines (in these examples, 3; and 5 or more, respectively). In all other case, where there is a &lt;code&gt;\N{&lt;/code&gt; and a matching &lt;code&gt;}&lt;/code&gt;, Perl assumes that a character name is desired.</source>
          <target state="translated">これにより、あいまいさが生じる可能性があります。 &lt;code&gt;\N&lt;/code&gt; 直後に左中括弧がない場合、Perlは &lt;code&gt;[^\n]&lt;/code&gt; 意味を想定します。また、中括弧が &lt;code&gt;\N{3}&lt;/code&gt; や &lt;code&gt;\N{5,}&lt;/code&gt; などの有効な量指定子を形成する場合、Perlはこれが非改行の指定された数量（これらの例では3;および5以上）に一致することを意味すると想定しますそれぞれ）。 &lt;code&gt;\N{&lt;/code&gt; と対応する &lt;code&gt;}&lt;/code&gt; が存在するその他すべての場合、Perlは文字名が必要であると想定します。</target>
        </trans-unit>
        <trans-unit id="959b6fc0ff47607dd43aa724268206e3f29dd78b" translate="yes" xml:space="preserve">
          <source>This can lead to unexpected results. For example, a string's semantics can suddenly change if a code point above 255 is appended to it, which changes the rules from ASCII to Unicode. As an example, consider the following program and its output:</source>
          <target state="translated">これは予期せぬ結果をもたらす可能性があります。例えば、文字列に255以上のコードポイントが追加されると、文字列のセマンティクスが突然変更されることがあります。例として、以下のプログラムとその出力を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="85608589698ca117deecc9b9804cdf91bb5ea3e0" translate="yes" xml:space="preserve">
          <source>This can result from a bug in emx sprintf which was fixed in 0.9d fix 03.</source>
          <target state="translated">これは emx の sprintf のバグに起因する可能性があり、0.9d fix 03 で修正されました。</target>
        </trans-unit>
        <trans-unit id="a0068e1ff0325fa89c18995ccdfd4bec0d4d0e1c" translate="yes" xml:space="preserve">
          <source>This can set either by hints files or by Configure. If using a (non-gcc) vendor cc, this variable may contain a version for the compiler.</source>
          <target state="translated">これはヒントファイルか Configure で設定できます。(gcc 以外の)ベンダー cc を使用している場合、この変数にはコンパイラのバージョンが含まれているかもしれません。</target>
        </trans-unit>
        <trans-unit id="b497dc3b646a186b11a326e1c1c02e389336f453" translate="yes" xml:space="preserve">
          <source>This can set either by hints files or by Configure. If using gcc, this is gcc, and if not, usually equal to cc, unimpressive, no? Some platforms, however, make good use of this by storing the flavor of the C compiler being used here. For example if using the Sun WorkShop suite, ccname will be &lt;code&gt;workshop&lt;/code&gt; .</source>
          <target state="translated">これは、ヒントファイルまたは構成によって設定できます。gccを使用している場合、これはgccであり、そうでない場合、通常はccと同じですが、印象的ではありませんか？ただし、一部のプラットフォームでは、ここで使用されているCコンパイラのフレーバーを格納することで、これをうまく利用しています。Sun WorkShopスイートを使用している場合たとえば、ccnameになります &lt;code&gt;workshop&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="268887449daa89d9e6e6591c09f61433e4f65428" translate="yes" xml:space="preserve">
          <source>This causes Attribute::Handlers to define the &lt;code&gt;Roo&lt;/code&gt; attribute in the package that imports the Tie::Me::Kangaroo:Down::Sport module.</source>
          <target state="translated">これにより、Attribute :: Handlers は、Tie :: Me :: Kangaroo：Down :: Sportモジュールをインポートするパッケージで &lt;code&gt;Roo&lt;/code&gt; 属性を定義します。</target>
        </trans-unit>
        <trans-unit id="102ace81a524208492f6e027d89b5645163151f6" translate="yes" xml:space="preserve">
          <source>This causes perl to load your module but does not import any symbols.</source>
          <target state="translated">これにより、Perl はモジュールをロードしますが、シンボルはインポートされません。</target>
        </trans-unit>
        <trans-unit id="c30feda4a3a3684c859a87888367dce95a5f76b5" translate="yes" xml:space="preserve">
          <source>This causes the redispatcher to only visit each distinct &lt;code&gt;method&lt;/code&gt; method once. That is, to skip any classes in the hierarchy that it has already visited during redispatch. So, for example, if the previous example were rewritten:</source>
          <target state="translated">これにより、再ディスパッチャはそれぞれの個別の &lt;code&gt;method&lt;/code&gt; メソッドに1回だけアクセスします。つまり、再ディスパッチ中にすでにアクセスした階層内のクラスをスキップします。したがって、たとえば、前の例が書き直された場合：</target>
        </trans-unit>
        <trans-unit id="582cc40cbf8b3547920ee86c914be4717f134b16" translate="yes" xml:space="preserve">
          <source>This change was made because it was found that various commercial tools like editors, or for things like source code control, had been written so that they would not handle program files that used these code points, effectively precluding their use almost entirely! And that was never the intent. They've always been meant to be usable within an application, or cooperating set of applications, at will.</source>
          <target state="translated">この変更が行われたのは、エディタやソースコード管理のようなもののための様々な商用ツールが、これらのコードポイントを使用するプログラムファイルを扱わないように書かれていることが判明したためで、事実上、ほとんど完全に使用できなくなってしまったのです。そして、それは決して意図したものではありませんでした。これらのツールは常に、アプリケーション内で、あるいはアプリケーションの協力関係の中で、自由に使えるようにすることを意図していました。</target>
        </trans-unit>
        <trans-unit id="c679de889cc139bb514d15d08372653b38479f14" translate="yes" xml:space="preserve">
          <source>This changes the sentence to &quot;this is a SUcCess case.&quot;</source>
          <target state="translated">これは、&quot;this is a SUcCess case &quot;に文章を変更しています。</target>
        </trans-unit>
        <trans-unit id="806d9541617fb633252bc021124ba56dfb002ae1" translate="yes" xml:space="preserve">
          <source>This changes the string that this token holds. You probably won't need to do this.</source>
          <target state="translated">これは、このトークンが保持する文字列を変更します。おそらくこれを行う必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="1b4ce31991e674e8d238b692a9312c922759283b" translate="yes" xml:space="preserve">
          <source>This changes the tagname for this end-token object. You probably won't need to do this.</source>
          <target state="translated">これは、このエンドトークンオブジェクトのtagnameを変更します。おそらくこれを行う必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="05c1f4e6ea1fd867b5212d7916e4ce924dd15d97" translate="yes" xml:space="preserve">
          <source>This changes the tagname for this start-token object. You probably won't need to do this.</source>
          <target state="translated">これは、この start-token オブジェクトの tagname を変更します。おそらくこれを行う必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="642eb07575d1344323a97b06a777777ad1321fc4" translate="yes" xml:space="preserve">
          <source>This chart is sorted from slowest to fastest, and shows the percent speed difference between each pair of tests.</source>
          <target state="translated">このチャートは、遅いものから速いものへと並べ替えられており、各ペアのテストの速度差の割合を示しています。</target>
        </trans-unit>
        <trans-unit id="7da28c0924cf2fc297ae57e942274584c8adbeb4" translate="yes" xml:space="preserve">
          <source>This checks that every file listed in the .packlist actually exists. If an argument which evaluates to true is given, any missing files will be removed from the internal hash. The return value is a list of the missing files, which will be empty if they all exist.</source>
          <target state="translated">これは、.packlist にリストされているすべてのファイルが実際に存在するかどうかをチェックします。true と評価される引数が与えられた場合、欠落しているファイルは内部ハッシュから削除されます。返り値は欠落しているファイルのリストで、全てのファイルが存在する場合は空になります。</target>
        </trans-unit>
        <trans-unit id="f55eba663917d253b044988b2b6ee903ef6a93dc" translate="yes" xml:space="preserve">
          <source>This class (which is very small -- read the source) overrides Pod::Simple's _handle_element_start, _handle_text, and _handle_element_end methods so that parser events are turned into method calls. (Otherwise, this is a subclass of &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt; and inherits all its methods.)</source>
          <target state="translated">このクラス（非常に小さい-ソースを読み取ります）は、Pod :: Simpleの_handle_element_start、_handle_text、および_handle_element_endメソッドをオーバーライドして、パーサーイベントがメソッド呼び出しに変換されるようにします。（それ以外の場合、これは&lt;a href=&quot;../simple&quot;&gt;Pod :: Simpleの&lt;/a&gt;サブクラスであり、そのすべてのメソッドを継承します。）</target>
        </trans-unit>
        <trans-unit id="494e46870d49e2dc3a5f9a64f75952ec99423e9a" translate="yes" xml:space="preserve">
          <source>This class defines several methods for setting (and, occasionally, reading) the contents of an object. With two exceptions (discussed at the end of this section), these attributes are just for controlling the way searches are carried out.</source>
          <target state="translated">このクラスは、オブジェクトの内容を設定する(ときには読み込む)ためのいくつかのメソッドを定義しています。2つの例外 (このセクションの最後で説明します)を除いて、これらの属性は検索の実行方法を制御するためだけのものです。</target>
        </trans-unit>
        <trans-unit id="1d32aad8f8251ef1db7bcc4b8f3feb324d9d1213" translate="yes" xml:space="preserve">
          <source>This class is NOT a subclass of Pod::Simple::HTML (nor of bad old Pod::Html) -- although it uses Pod::Simple::HTML for doing the conversion of each document.</source>
          <target state="translated">このクラスはPod::Simple::HTMLのサブクラスではありません(古いPod::Htmlのサブクラスでもありません)--各ドキュメントの変換にPod::Simple::HTMLを使用していますが。</target>
        </trans-unit>
        <trans-unit id="b711767b4a974da1a1509d38f153220b0d62949c" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as RTF, good for viewing/printing in MSWord, WordPad/write.exe, TextEdit, etc.</source>
          <target state="translated">このクラスはPodをRTFに変換するフォーマッタで、MSWord、WordPad/write.exe、TextEditなどでの表示や印刷に適しています。</target>
        </trans-unit>
        <trans-unit id="138981ec5228a60a4f53dbf829b51f5efd9f8a75" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as XHTML validating HTML.</source>
          <target state="translated">このクラスは、Podを受け取り、それをXHTMLで検証するHTMLとしてレンダリングするフォーマッタです。</target>
        </trans-unit>
        <trans-unit id="3d4c24315ad07b2a992c0858db0b7be768d0cc0b" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as wrapped plaintext.</source>
          <target state="translated">このクラスは Pod を受け取り、それをラップされた平文としてレンダリングするフォーマッタです。</target>
        </trans-unit>
        <trans-unit id="62abaee97c33098880e266351ef2fc532bf53875" translate="yes" xml:space="preserve">
          <source>This class is an internal interface only.</source>
          <target state="translated">このクラスは内部インターフェースのみです。</target>
        </trans-unit>
        <trans-unit id="5e43c4bd22a6b18d8bc78626e236eaa142e2b822" translate="yes" xml:space="preserve">
          <source>This class is for checking the syntactic validity of Pod. It works by basically acting like a simple-minded version of &lt;a href=&quot;text&quot;&gt;Pod::Simple::Text&lt;/a&gt; that formats only the &quot;Pod Errors&quot; section (if Pod::Simple even generates one for the given document).</source>
          <target state="translated">このクラスは、ポッドの構文の妥当性をチェックするためのものです。基本的には、「Pod &lt;a href=&quot;text&quot;&gt;:: Simple :: Text&lt;/a&gt;」の単純なバージョンのように機能し、「Podエラー」セクションのみをフォーマットします（Pod :: Simpleが指定されたドキュメントに対しても生成する場合）。</target>
        </trans-unit>
        <trans-unit id="9b791e36572b7d483165e52086de0aff10cad7ba" translate="yes" xml:space="preserve">
          <source>This class is for dumping, as text, the events gotten from parsing a Pod document. This class is of interest to people writing Pod formatters based on Pod::Simple. It is useful for seeing exactly what events you get out of some Pod that you feed in.</source>
          <target state="translated">このクラスは、Pod文書を解析して得られたイベントをテキストとしてダンプします。このクラスは、Pod::SimpleをベースにしたPodフォーマッタを書いている人に興味を持ってもらえるでしょう。フィードインしたPodからどのようなイベントを取得したかを正確に確認するのに便利です。</target>
        </trans-unit>
        <trans-unit id="a18cdad26fb8d235532c57fb43aa60327d80a50a" translate="yes" xml:space="preserve">
          <source>This class is for making an HTML rendering of a Pod document.</source>
          <target state="translated">PodドキュメントのHTMLレンダリングを作成するためのクラスです。</target>
        </trans-unit>
        <trans-unit id="fd75675624091c3742f49bbeb8bbfb0c06a37c0a" translate="yes" xml:space="preserve">
          <source>This class is for using Pod::Simple to build a Pod processor -- but one that uses an interface based on a stream of token objects, instead of based on events.</source>
          <target state="translated">このクラスは Pod::Simple を使って Pod プロセッサを構築するためのクラスです。</target>
        </trans-unit>
        <trans-unit id="44761047bfaa4c6cc438e77b4bb92131ad714c01" translate="yes" xml:space="preserve">
          <source>This class is inspired by XML::Parser's &quot;Tree&quot; parsing-style, although it doesn't use exactly the same LoL format.</source>
          <target state="translated">このクラスは XML::Parser の &quot;Tree&quot; パーシングスタイルにインスパイアされています。</target>
        </trans-unit>
        <trans-unit id="a9698adab813e0c4fae21452c7598015f3935b3d" translate="yes" xml:space="preserve">
          <source>This class is not of interest to general users.</source>
          <target state="translated">このクラスは一般ユーザーには興味のないクラスです。</target>
        </trans-unit>
        <trans-unit id="2f2f6048d2f61aa8645bcc5ebd42e19fc8c8aea4" translate="yes" xml:space="preserve">
          <source>This class is of interest to people writing Pod formatters based on Pod::Simple.</source>
          <target state="translated">このクラスは、Pod::SimpleをベースにPodフォーマッタを書く人が興味を持つクラスです。</target>
        </trans-unit>
        <trans-unit id="f63f889f338653b4ee33eb44dc0ee1133ee852ae" translate="yes" xml:space="preserve">
          <source>This class is of interest to people writing a Pod processor/formatter.</source>
          <target state="translated">このクラスは、Podプロセッサ/フォーマッターを書いている人に興味を持ってもらえると思います。</target>
        </trans-unit>
        <trans-unit id="6dca4f8907e7dbb28751ea149d9af37422c91f32" translate="yes" xml:space="preserve">
          <source>This class is that parses Pod and dumps just the text content. It is mainly meant for use by the Pod::Simple test suite, but you may find some other use for it.</source>
          <target state="translated">このクラスはPodを解析してテキストの内容だけをダンプします。これは主にPod::Simpleテストスイートでの使用を意図していますが、他の用途が見つかるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5a51d38f10e103a9903a5853a79eae683ff646eb" translate="yes" xml:space="preserve">
          <source>This class is the workhorse of the &lt;a href=&quot;../../parser&quot;&gt;TAP::Parser&lt;/a&gt; system. Most TAP lines will be test lines and if &lt;code&gt;$result-&amp;gt;is_test&lt;/code&gt; , then you have a bunch of methods at your disposal.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;../../parser&quot;&gt;TAP :: Parser&lt;/a&gt;システムの主力です。ほとんどのTAP行はテスト行であり、 &lt;code&gt;$result-&amp;gt;is_test&lt;/code&gt; 場合、自由に使えるメソッドがたくさんあります。</target>
        </trans-unit>
        <trans-unit id="6f581c5cd9d5c7598c0dcb3ca6436c9bd821c2c4" translate="yes" xml:space="preserve">
          <source>This class might turn out to be a temporary solution, but MM won't go away.</source>
          <target state="translated">このクラスは一時的な解決策になるかもしれませんが、MMはなくならないでしょう。</target>
        </trans-unit>
        <trans-unit id="24195eb4cea8857a411b60273a35c873f422dbe0" translate="yes" xml:space="preserve">
          <source>This class provides the one constructor, called &lt;code&gt;new&lt;/code&gt; . It takes no parameters:</source>
          <target state="translated">このクラスは &lt;code&gt;new&lt;/code&gt; と呼ばれる1つのコンストラクターを提供します。パラメータは必要ありません。</target>
        </trans-unit>
        <trans-unit id="f30e23715125a3d5360cef7bf3e4022849622110" translate="yes" xml:space="preserve">
          <source>This class takes Pod and parses it, returning a parse tree made just of arrayrefs, and hashrefs, and strings.</source>
          <target state="translated">このクラスはPodを取得して解析し、arrayrefs、ハッシュレフ、文字列だけで構成された解析ツリーを返します。</target>
        </trans-unit>
        <trans-unit id="9dbee182dfa76d92a94c69cd0858c1622ac2f770" translate="yes" xml:space="preserve">
          <source>This client is more complicated than the two we've done so far, but if you're on a system that supports the powerful &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; call, the solution isn't that rough. Once you've made the connection to whatever service you'd like to chat with, call &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; to clone your process. Each of these two identical process has a very simple job to do: the parent copies everything from the socket to standard output, while the child simultaneously copies everything from standard input to the socket. To accomplish the same thing using just one process would be</source>
          <target state="translated">このクライアントは、これまでに行った2つよりも複雑ですが、強力な &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; 呼び出しをサポートするシステムを使用している場合、ソリューションはそれほど大雑把ではありません。チャットしたいサービスに接続したら、 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; を呼び出してプロセスのクローンを作成します。これら2つの同一のプロセスはそれぞれ非常に単純な作業を行います。親はすべてをソケットから標準出力にコピーし、子は同時にすべてを標準入力からソケットにコピーします。 1つのプロセスだけを使用して同じことを達成するには</target>
        </trans-unit>
        <trans-unit id="ceec53b2ebb7603eb9ee71d9bde01119b83707cb" translate="yes" xml:space="preserve">
          <source>This clones the repository and makes a local copy in the</source>
          <target state="translated">これはリポジトリをクローンし、ローカルコピーを</target>
        </trans-unit>
        <trans-unit id="5330da17cfc7cfcf64aab224d5b574c934e7ac2c" translate="yes" xml:space="preserve">
          <source>This code heavily adapted from an early version of perl5db.pl attributable to Larry Wall and the Perl Porters.</source>
          <target state="translated">このコードは、Larry Wall と Perl Porters に帰属する perl5db.pl の初期バージョンから大幅に改作されています。</target>
        </trans-unit>
        <trans-unit id="11c4fc183eca8652881b1cb5b12c6ea249b79ebe" translate="yes" xml:space="preserve">
          <source>This code is intended for development only, and may not be portable even to all Unix variants. Also, it is an 80% solution, in that it isn't able to make all ops read only. Specifically it does not apply to op slabs belonging to &lt;code&gt;BEGIN&lt;/code&gt; blocks.</source>
          <target state="translated">このコードは開発のみを目的としており、すべてのUnixバリアントに移植できるとは限りません。また、すべての操作を読み取り専用にすることができないという点で、80％のソリューションです。特に、 &lt;code&gt;BEGIN&lt;/code&gt; ブロックに属するop slabには適用されません。</target>
        </trans-unit>
        <trans-unit id="443071b2d9d382ee44392d30a6c9cc6944390654" translate="yes" xml:space="preserve">
          <source>This code is unusual in that most formatters completely discard this code and its content. Other formatters will render it with invisible codes that can be used in building an index of the current document.</source>
          <target state="translated">このコードは、ほとんどのフォーマッタがこのコードとその内容を完全に破棄するという点で珍しいコードです。他のフォーマッタは、現在の文書のインデックスを作成する際に使用できる不可視のコードでこのコードをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="ed77ac1105bfebc895982f70abdb5f07d0f61471" translate="yes" xml:space="preserve">
          <source>This code is unusual is that it should have no content. That is, a processor may complain if it sees &lt;code&gt;Z&amp;lt;potatoes&amp;gt;&lt;/code&gt; . Whether or not it complains, the</source>
          <target state="translated">このコードは異常であり、コンテンツが含まれていないはずです。つまり、プロセッサは &lt;code&gt;Z&amp;lt;potatoes&amp;gt;&lt;/code&gt; すると文句を言う可能性があります。それが不平を言うかどうかにかかわらず、</target>
        </trans-unit>
        <trans-unit id="9f748555f0c218e80f371f8622c90719bdf4c3e1" translate="yes" xml:space="preserve">
          <source>This code resides primarily in</source>
          <target state="translated">このコードは主に</target>
        </trans-unit>
        <trans-unit id="b4ca79218fad07abe234bb2cecfbf2b9daaa8186" translate="yes" xml:space="preserve">
          <source>This code tries to return a new SV (which contains the value 42) if it should return a real value, or undef otherwise. Instead it has returned a NULL pointer which, somewhere down the line, will cause a segmentation violation, bus error, or just weird results. Change the zero to &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; in the first line and all will be well.</source>
          <target state="translated">このコードは、実際の値を返す必要がある場合は新しいSV（値42を含む）を返し、そうでない場合はundefを返そうとします。代わりに、行のどこかで、セグメンテーション違反、バスエラー、または奇妙な結果を引き起こすNULLポインターを返しました。最初の行でゼロを &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; に変更すると、すべて正常になります。</target>
        </trans-unit>
        <trans-unit id="6b0496da28a3ec6a32260558d3028edcf275c0a4" translate="yes" xml:space="preserve">
          <source>This combination of options may also be specified thus</source>
          <target state="translated">このオプションの組み合わせは、次のように指定することもできます。</target>
        </trans-unit>
        <trans-unit id="738a4e0887c40771b0a61f4f0df6d45e56b8d5cf" translate="yes" xml:space="preserve">
          <source>This combination performs the work of the legacy functions gethostbyname() and inet_ntoa().</source>
          <target state="translated">この組み合わせは、レガシー関数 gethostbyname()および inet_ntoa()の作業を実行します。</target>
        </trans-unit>
        <trans-unit id="d728ee6330c55e20ceb083fe7c0710810e2932ca" translate="yes" xml:space="preserve">
          <source>This command indicates that an item in a list begins here. Formatting codes are processed. The semantics of the (optional) text in the remainder of this paragraph are explained in the &lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;About =over...=back Regions&lt;/a&gt; section, further below. Examples:</source>
          <target state="translated">このコマンドは、リスト内の項目がここから始まることを示しています。書式設定コードが処理されます。この段落の残りの部分の（オプションの）テキストのセマンティクスについては、以下の「&lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;= over ... = backリージョンについて」&lt;/a&gt;セクションで説明しています。例：</target>
        </trans-unit>
        <trans-unit id="4a355ff290cc8d5e2710e8069a06d654602bb061" translate="yes" xml:space="preserve">
          <source>This command indicates that the text in the remainder of the paragraph is a heading. That text may contain formatting codes. Examples:</source>
          <target state="translated">このコマンドは、段落の残りの部分のテキストが見出しであることを示します。そのテキストには書式コードが含まれている場合があります。例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="c6da60e4854fba0e9da1ba094a38fc435654e60e" translate="yes" xml:space="preserve">
          <source>This command indicates that this is the end of the region begun by the most recent &quot;=over&quot; command. It permits no text after the &quot;=back&quot; command.</source>
          <target state="translated">このコマンドは、直近の &quot;=over&quot; コマンドで始まった領域の終了を示す。back&quot; コマンドの後にはテキストを書くことはできません。</target>
        </trans-unit>
        <trans-unit id="19be29c945bbd16c098b73b780bb343e863492ff" translate="yes" xml:space="preserve">
          <source>This command indicates that this is the start of a list/indent region. If there is any text following the &quot;=over&quot;, it must consist of only a nonzero positive numeral. The semantics of this numeral is explained in the &lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;About =over...=back Regions&lt;/a&gt; section, further below. Formatting codes are not expanded. Examples:</source>
          <target state="translated">このコマンドは、これがリスト/インデント領域の始まりであることを示しています。「= over」の後にテキストがある場合は、ゼロ以外の正の数字のみで構成する必要があります。この数値の意味は、以下の「&lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;= over ... = backリージョンについて」&lt;/a&gt;セクションで説明されています。書式コードは拡張されません。例：</target>
        </trans-unit>
        <trans-unit id="7ff4d3408bd7bdb5ab335d1f0aa8564e21d93c8d" translate="yes" xml:space="preserve">
          <source>This command indicates that this line is the end of this previously started Pod block. If there is any text after &quot;=cut&quot; on the line, it must be ignored. Examples:</source>
          <target state="translated">このコマンドは、この行がこの前に開始されたPodブロックの終わりであることを示します。行内に&quot;=cut &quot;の後にテキストがある場合は、それを無視しなければなりません。例としては、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3f41d49fdd2a10822f19964c9959582847611ffe" translate="yes" xml:space="preserve">
          <source>This command indicates that this paragraph begins a Pod block. (If we are already in the middle of a Pod block, this command has no effect at all.) If there is any text in this command paragraph after &quot;=pod&quot;, it must be ignored. Examples:</source>
          <target state="translated">このコマンドは、この段落がPodブロックを開始することを示します。(すでにPodブロックの途中にある場合、このコマンドは全く効果がありません)。このコマンドの段落の中に&quot;=pod &quot;の後にテキストがある場合は無視しなければなりません。例としては、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8a99ea1513aed41e6edc9e12797ae7dfeaac42f6" translate="yes" xml:space="preserve">
          <source>This command is used for declaring the encoding of a document. Most users won't need this; but if your encoding isn't US-ASCII, then put a &lt;code&gt;=encoding &lt;i&gt;encodingname&lt;/i&gt;&lt;/code&gt; command very early in the document so that pod formatters will know how to decode the document. For</source>
          <target state="translated">このコマンドは、ドキュメントのエンコーディングを宣言するために使用されます。ほとんどのユーザーはこれを必要としません。ただし、エンコーディングがUS-ASCIIでない場合は、文書の非常に早い段階で &lt;code&gt;=encoding &lt;i&gt;encodingname&lt;/i&gt;&lt;/code&gt; コマンドを挿入して、ポッドフォーマッターが文書のデコード方法を認識できるようにします。ために</target>
        </trans-unit>
        <trans-unit id="cc900c104077e4a6a7ca5f06e5d70661d00910f9" translate="yes" xml:space="preserve">
          <source>This command, which should occur early in the document (at least before any non-US-ASCII data!), declares that this document is encoded in the encoding</source>
          <target state="translated">このコマンドは、文書の早い段階で(少なくとも非US-ASCIIデータの前に)発生すべきであり、この文書がエンコーディングでエンコードされていることを宣言します。</target>
        </trans-unit>
        <trans-unit id="a044d113549cfc62bab49938c5d884a6268cf948" translate="yes" xml:space="preserve">
          <source>This commands provides a statistical overview over recent download activities. The data for this is collected in the YAML file &lt;code&gt;FTPstats.yml&lt;/code&gt; in your &lt;code&gt;cpan_home&lt;/code&gt; directory. If no YAML module is configured or YAML not installed, no stats are provided.</source>
          <target state="translated">このコマンドは、最近のダウンロードアクティビティに関する統計的な概要を提供します。これに関するデータは、 &lt;code&gt;cpan_home&lt;/code&gt; ディレクトリのYAMLファイル &lt;code&gt;FTPstats.yml&lt;/code&gt; に収集されます。YAMLモジュールが構成されていないか、YAMLがインストールされていない場合、統計は提供されません。</target>
        </trans-unit>
        <trans-unit id="8ea20acdc8121360e07a3ca6ca2abb72ed9a4374" translate="yes" xml:space="preserve">
          <source>This compiler backend prints the internal OPs of a Perl program's syntax tree in one of several space-efficient text formats suitable for debugging the inner workings of perl or other compiler backends. It can print OPs in the order they appear in the OP tree, in the order they will execute, or in a text approximation to their tree structure, and the format of the information displayed is customizable. Its function is similar to that of perl's &lt;b&gt;-Dx&lt;/b&gt; debugging flag or the &lt;b&gt;B::Terse&lt;/b&gt; module, but it is more sophisticated and flexible.</source>
          <target state="translated">このコンパイラバックエンドは、Perlプログラムの構文ツリーの内部OPを、perlまたは他のコンパイラバックエンドの内部動作のデバッグに適したスペース効率の高いテキスト形式の1つで出力します。OPツリーに表示される順序、実行される順序、またはツリー構造に近似したテキストでOPを印刷でき、表示される情報の形式はカスタマイズ可能です。その機能は、perlの&lt;b&gt;-Dx&lt;/b&gt;デバッグフラグまたは&lt;b&gt;B :: &lt;/b&gt;&lt;b&gt;Terse&lt;/b&gt;モジュールの機能に似ていますが、より高度で柔軟です。</target>
        </trans-unit>
        <trans-unit id="49048e5c36c04df148e3cdcc3f896c82e8922e40" translate="yes" xml:space="preserve">
          <source>This compiler is typically run by the makefiles created by &lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; or by &lt;a href=&quot;http://search.cpan.org/perldoc/Module::Build&quot;&gt;Module::Build&lt;/a&gt; or other Perl module build tools.</source>
          <target state="translated">このコンパイラーは、通常、&lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils :: MakeMaker&lt;/a&gt;によって作成されたmakefileによって、または&lt;a href=&quot;http://search.cpan.org/perldoc/Module::Build&quot;&gt;Module :: Build&lt;/a&gt;または他のPerlモジュールビルドツールによって実行されます。</target>
        </trans-unit>
        <trans-unit id="811fc2387a18f3ccb2c99535bb74afa37f5a7e14" translate="yes" xml:space="preserve">
          <source>This condition is called a deadlock, and it occurs whenever two or more threads are trying to get locks on resources that the others own. Each thread will block, waiting for the other to release a lock on a resource. That never happens, though, since the thread with the resource is itself waiting for a lock to be released.</source>
          <target state="translated">この状態はデッドロックと呼ばれ、2 つ以上のスレッドが他のスレッドが所有するリソースのロックを取得しようとしているときに発生します。各スレッドはブロックして、他のスレッドがリソースのロックを解放するのを待ちます。しかし、リソースを持っているスレッド自身がロックが解放されるのを待っているので、そうなることはありません。</target>
        </trans-unit>
        <trans-unit id="faa53aa7f128fff59cd7dcb34623ce5e613b1979" translate="yes" xml:space="preserve">
          <source>This conditionally defines &lt;code&gt;HAS_BUILTIN_CHOOSE_EXPR&lt;/code&gt; , which indicates that the compiler supports __builtin_choose_expr(x,y,z). This built-in function is analogous to the &lt;code&gt;x?y:z&lt;/code&gt; operator in C, except that the expression returned has its type unaltered by promotion rules. Also, the built-in function does not evaluate the expression that was not chosen.</source>
          <target state="translated">これは条件付きで &lt;code&gt;HAS_BUILTIN_CHOOSE_EXPR&lt;/code&gt; を定義します。これは、コンパイラが__builtin_choose_expr（x、y、z）をサポートすることを示します。この組み込み関数は、C の &lt;code&gt;x?y:z&lt;/code&gt; 演算子に似ていますが、返される式の型がプロモーションルールによって変更されない点が異なります。また、組み込み関数は、選択されなかった式を評価しません。</target>
        </trans-unit>
        <trans-unit id="8177d32c94f6808dc1bba5e1e003e2e654d1454a" translate="yes" xml:space="preserve">
          <source>This conditionally defines &lt;code&gt;HAS_BUILTIN_EXPECT&lt;/code&gt; , which indicates that the compiler supports __builtin_expect(exp,c). You may use __builtin_expect to provide the compiler with branch prediction information.</source>
          <target state="translated">これは条件付きで &lt;code&gt;HAS_BUILTIN_EXPECT&lt;/code&gt; を定義します。これは、コンパイラが__builtin_expect（exp、c）をサポートすることを示します。__builtin_expectを使用して、コンパイラに分岐予測情報を提供できます。</target>
        </trans-unit>
        <trans-unit id="3e85ff206a230f535cdc1e1b660d9e31b004675c" translate="yes" xml:space="preserve">
          <source>This construct cannot be used within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (or the &lt;code&gt;/l&lt;/code&gt; regex modifier).</source>
          <target state="translated">この構成は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; の範囲（または &lt;code&gt;/l&lt;/code&gt; 正規表現修飾子）内では使用できません。</target>
        </trans-unit>
        <trans-unit id="f8fed69726a17c92a263e748b2d7fa3336a3e37f" translate="yes" xml:space="preserve">
          <source>This construct is useful when you want to capture one of a number of alternative matches.</source>
          <target state="translated">この構文は、複数の代替マッチのうちの1つをキャプチャしたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="89cfaa9b31ac24d949cb1a2ef0db748a527694e4" translate="yes" xml:space="preserve">
          <source>This construction is</source>
          <target state="translated">この工事は</target>
        </trans-unit>
        <trans-unit id="78c7683a763192abf9645014c7b058753006e735" translate="yes" xml:space="preserve">
          <source>This constructor lets its parent class do the actual object construction.</source>
          <target state="translated">このコンストラクタは、実際のオブジェクトの作成を親クラスに行わせます。</target>
        </trans-unit>
        <trans-unit id="4bf27879428ff426e547cd9ab897b5c2de43f4ae" translate="yes" xml:space="preserve">
          <source>This constructs a language handle. You usually &lt;b&gt;don't&lt;/b&gt; call this directly, but instead let &lt;code&gt;get_handle&lt;/code&gt; find a language class to &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; and to then call -&amp;gt;new on.</source>
          <target state="translated">言語ハンドルを構築します。通常、これを直接呼び出すことは&lt;b&gt;ありません&lt;/b&gt;が、代わりに &lt;code&gt;get_handle&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; する言語クラスを検索させ、次に-&amp;gt; new onを呼び出します。</target>
        </trans-unit>
        <trans-unit id="3edc7f7dd753392a74ab3c329050e0ec08dcdba9" translate="yes" xml:space="preserve">
          <source>This controls how verbose to be during batch conversion, as far as notes to STDOUT (or whatever is &lt;code&gt;&lt;a href=&quot;../../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt;'d) about how the conversion is going. If 0, no progress information is printed. If 1 (the default value), some progress information is printed. Higher values print more information.</source>
          <target state="translated">これは、変換がどのように行われるかについてのSTDOUT（または &lt;code&gt;&lt;a href=&quot;../../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; もの）へのメモに関する限り、バッチ変換中の冗長度を制御します。0の場合、進捗情報は出力されません。1（デフォルト値）の場合、いくつかの進行情報が出力されます。値を大きくすると、より多くの情報が印刷されます。</target>
        </trans-unit>
        <trans-unit id="ff7a4f63a01fbc1cdd9d161f843ad25c0052f17f" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; checks if a dual-life core module has been deprecated. If this is set to true &lt;code&gt;check_install&lt;/code&gt; will return false to &lt;code&gt;uptodate&lt;/code&gt; , if a dual-life module is found to be loaded from &lt;code&gt;$Config{privlibexp}&lt;/code&gt;</source>
          <target state="translated">これは、 &lt;code&gt;Module::Load::Conditional&lt;/code&gt; がデュアルライフコアモジュールが廃止されたかどうかをチェックするかどうかを制御します。これがtrueに設定されている場合、デュアルライフモジュールが &lt;code&gt;$Config{privlibexp}&lt;/code&gt; からロードされていることが検出されると、 &lt;code&gt;check_install&lt;/code&gt; はfalseを &lt;code&gt;uptodate&lt;/code&gt; に返します。</target>
        </trans-unit>
        <trans-unit id="8b4114328d4769af34ebf3741b18df472503df04" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; checks your &lt;code&gt;%INC&lt;/code&gt; hash to see if a module is available. By default, only &lt;code&gt;@INC&lt;/code&gt; is scanned to see if a module is physically on your filesystem, or available via an &lt;code&gt;@INC-hook&lt;/code&gt; . Setting this variable to &lt;code&gt;true&lt;/code&gt; will trust any entries in &lt;code&gt;%INC&lt;/code&gt; and return them for you.</source>
          <target state="translated">これは、 &lt;code&gt;Module::Load::Conditional&lt;/code&gt; が &lt;code&gt;%INC&lt;/code&gt; ハッシュをチェックしてモジュールが使用可能かどうかを確認するかどうかを制御します。デフォルトでは、唯一の &lt;code&gt;@INC&lt;/code&gt; は、モジュールがファイルシステム上に物理的であるかどうかを確認するためにスキャンされ、またはを介して利用可能 &lt;code&gt;@INC-hook&lt;/code&gt; 。この変数を &lt;code&gt;true&lt;/code&gt; に設定すると、 &lt;code&gt;%INC&lt;/code&gt; のすべてのエントリが信頼され、返されます。</target>
        </trans-unit>
        <trans-unit id="9c4381fad7d89f422c37ccba3ee1b2f92eba8443" translate="yes" xml:space="preserve">
          <source>This controls whether IPC::Cmd will print any output from the commands to the screen or not. The default is 0.</source>
          <target state="translated">これは、IPC::Cmdがコマンドからの出力を画面に表示するかどうかを制御します。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="c156076360b54f8a8977c57dc77de47486be1ac3" translate="yes" xml:space="preserve">
          <source>This controls whether Module::Load::Conditional will issue warnings and explanations as to why certain things may have failed. If you set it to 0, Module::Load::Conditional will not output any warnings. The default is 0;</source>
          <target state="translated">これは、Module::Load::Conditional が、ある特定のことが失敗した理由について警告や説明を出力するかどうかを制御します。0 に設定すると、Module::Load::Conditional は警告を出力しません。デフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="b49fb12849ceb3c435af21ba21b9e8d24214fd70" translate="yes" xml:space="preserve">
          <source>This controls whether Module::Load::Conditional will try to parse (and eval) the version from the module you're trying to load.</source>
          <target state="translated">これは、Module::Load::Conditionalがロードしようとしているモジュールのバージョンを解析(およびeval)しようとするかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="d9aae25fb78fe9990ffb44145098a21f55aa720e" translate="yes" xml:space="preserve">
          <source>This controls whether Params::Check will issue warnings and explanations as to why certain things may have failed. If you set it to 0, Params::Check will not output any warnings.</source>
          <target state="translated">これは、Params::Check が警告や失敗した理由の説明を出力するかどうかを制御します。0 に設定した場合、Params::Check は警告を出力しません。</target>
        </trans-unit>
        <trans-unit id="8aa3d4d74657a46a0b2bcece8a25683b9b4d5103" translate="yes" xml:space="preserve">
          <source>This controls whether all output of a command should also be printed to STDOUT/STDERR or should only be trapped in buffers (NOTE: buffers require &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC::Run&lt;/a&gt; to be installed, or your system able to work with &lt;a href=&quot;open3&quot;&gt;IPC::Open3&lt;/a&gt;).</source>
          <target state="translated">これは、コマンドのすべての出力をSTDOUT / STDERRにも出力するか、バッファーにのみトラップするかを制御します（注：バッファーには&lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC :: Run&lt;/a&gt;をインストールする必要があります。または、システムで&lt;a href=&quot;open3&quot;&gt;IPC :: Open3&lt;/a&gt;を使用できます）。</target>
        </trans-unit>
        <trans-unit id="732d2e4b2658c0a2ec91db3c054e26236d0390f1" translate="yes" xml:space="preserve">
          <source>This controls whether imports the functions of a loaded modules to the caller package. The default is no importing any functions.</source>
          <target state="translated">これは、ロードされたモジュールの関数を呼び出し元のパッケージにインポートするかどうかを制御します。デフォルトでは、関数をインポートしないようになっています。</target>
        </trans-unit>
        <trans-unit id="eb78f49655da0a3543996010fb5198aba12c2274" translate="yes" xml:space="preserve">
          <source>This controls whether or not each HTML page is liable to have a little table of contents at the top (which we call an &quot;index&quot; for historical reasons). This is true by default.</source>
          <target state="translated">これは、各HTMLページが上部に小さな目次を持つ傾向があるかどうかを制御します(歴史的な理由から「インデックス」と呼んでいます)。これはデフォルトではtrueになっています。</target>
        </trans-unit>
        <trans-unit id="d18f8fcaf7759aa328d11a1f1e92e835b3d9557f" translate="yes" xml:space="preserve">
          <source>This controls whether warnings should be printed if a module failed to load. The default is to use the value of $Module::Load::Conditional::VERBOSE.</source>
          <target state="translated">これは、モジュールのロードに失敗した場合に警告を表示するかどうかを制御します。デフォルトでは、$Module::Load::Conditional::VERBOSE の値を使用します。</target>
        </trans-unit>
        <trans-unit id="4ff7f0c70685518180af334112b2fe58a44a4fdd" translate="yes" xml:space="preserve">
          <source>This copyright does not prohibit distribution of any version of Perl containing this extension under the terms of the GNU or Artistic licenses.</source>
          <target state="translated">この著作権は、この拡張子を含むPerlのどのバージョンの配布も、GNUライセンスまたはArtisticライセンスの条件の下で禁止するものではありません。</target>
        </trans-unit>
        <trans-unit id="e07ca9a36ef5f49f5e95795b2568b38574fd37e2" translate="yes" xml:space="preserve">
          <source>This corresponds to clearerr(), i.e., clears 'error' and (usually) 'eof' flags for the &quot;stream&quot;. Does not return a value.</source>
          <target state="translated">これは clearerr()に相当し、つまり、&quot;ストリーム&quot; の 'error' と (通常は)'eof' フラグをクリアします。値は返さない。</target>
        </trans-unit>
        <trans-unit id="a832f3c37512b00bc489449027088839617ff5af" translate="yes" xml:space="preserve">
          <source>This corresponds to feof(). Returns a true/false indication of whether the handle is at end of file. For terminal devices this may or may not be &quot;sticky&quot; depending on the implementation. The flag is cleared by PerlIO_seek(), or PerlIO_rewind().</source>
          <target state="translated">これは feof()に対応します。ハンドルがファイルの最後にあるかどうかの真偽を返します。端末デバイスの場合、これは実装によっては &quot;スティッキー &quot;になるかならないかの違いがあります。このフラグは、PerlIO_seek()またはPerlIO_rewind()によってクリアされます。</target>
        </trans-unit>
        <trans-unit id="baeb66e5af4f3d77be2f1ed10348f03a4ed016a5" translate="yes" xml:space="preserve">
          <source>This corresponds to ferror(). Returns a true/false indication of whether there has been an IO error on the handle.</source>
          <target state="translated">これは ferror()に対応しています。ハンドルに IO エラーがあったかどうかの真偽を返します。</target>
        </trans-unit>
        <trans-unit id="bb12a0ca3665432e7ae210e2f30b098e3c60f423" translate="yes" xml:space="preserve">
          <source>This corresponds to fflush(). Sends any buffered write data to the underlying file. If called with &lt;code&gt;NULL&lt;/code&gt; this may flush all open streams (or core dump with some USE_STDIO implementations). Calling on a handle open for read only, or on which last operation was a read of some kind may lead to undefined behaviour on some USE_STDIO implementations. The USE_PERLIO (layers) implementation tries to behave better: it flushes all open streams when passed &lt;code&gt;NULL&lt;/code&gt; , and attempts to retain data on read streams either in the buffer or by seeking the handle to the current logical position.</source>
          <target state="translated">これはfflush（）に対応します。バッファリングされた書き込みデータを基になるファイルに送信します。 &lt;code&gt;NULL&lt;/code&gt; を指定して呼び出すと、開いているすべてのストリーム（または一部のUSE_STDIO実装でのコアダンプ）がフラッシュされる可能性があります。読み取り専用で開いているハンドル、または最後の操作が何らかの読み取りであったハンドルを呼び出すと、一部のUSE_STDIO実装で未定義の動作が発生する可能性があります。 USE_PERLIO（レイヤー）実装は、より良い動作を試み &lt;code&gt;NULL&lt;/code&gt; 。NULLが渡されると、開いているすべてのストリームをフラッシュし、読み取りストリームのデータをバッファーに保持するか、現在の論理位置へのハンドルをシークします。</target>
        </trans-unit>
        <trans-unit id="9e414890b7f22b1b4083f4007de6555d9d071db1" translate="yes" xml:space="preserve">
          <source>This corresponds to fileno(), note that on some platforms, the meaning of &quot;fileno&quot; may not match Unix. Returns -1 if the handle has no open descriptor associated with it.</source>
          <target state="translated">これは fileno()に対応していますが、プラットフォームによっては &quot;fileno&quot; の意味が Unix と一致しない場合があることに注意してください。ハンドルに関連するオープンディスクリプタがない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="5f4554adde4cea2591eaa99c7438bd7a745a0b3f" translate="yes" xml:space="preserve">
          <source>This corresponds to fseek(). Sends buffered write data to the underlying file, or discards any buffered read data, then positions the file descriptor as specified by &lt;b&gt;offset&lt;/b&gt; and &lt;b&gt;whence&lt;/b&gt; (sic). This is the correct thing to do when switching between read and write on the same handle (see issues with PerlIO_flush() above). Offset is of type &lt;code&gt;Off_t&lt;/code&gt; which is a perl Configure value which may not be same as stdio's &lt;code&gt;off_t&lt;/code&gt; .</source>
          <target state="translated">これはfseek（）に対応します。バッファリングされた書き込みデータを基本ファイルに送信するか、バッファリングされた読み取りデータを破棄して&lt;b&gt;から&lt;/b&gt;、&lt;b&gt;offset&lt;/b&gt;と&lt;b&gt;whence&lt;/b&gt;（sic）で指定された&lt;b&gt;とおりに&lt;/b&gt;ファイル記述子を配置します。これは、同じハンドルで読み取りと書き込みを切り替えるときに行う正しいことです（上記のPerlIO_flush（）の問題を参照）。オフセットは、Perl構成値である &lt;code&gt;Off_t&lt;/code&gt; タイプであり、stdioの &lt;code&gt;off_t&lt;/code&gt; とは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="dd9bee6b04c387fd0085a9f7aa8ff48a5f034283" translate="yes" xml:space="preserve">
          <source>This corresponds to ftell(). Returns the current file position, or (Off_t) -1 on error. May just return value system &quot;knows&quot; without making a system call or checking the underlying file descriptor (so use on shared file descriptors is not safe without a PerlIO_seek()). Return value is of type &lt;code&gt;Off_t&lt;/code&gt; which is a perl Configure value which may not be same as stdio's &lt;code&gt;off_t&lt;/code&gt; .</source>
          <target state="translated">これはftell（）に対応します。現在のファイル位置、またはエラー時に（Off_t）-1を返します。システムコールを実行したり、基礎となるファイル記述子をチェックしたりせずに、システムが「知っている」値を返す場合があります（したがって、共有ファイル記述子での使用は、PerlIO_seek（）なしでは安全ではありません）。戻り値は、Perl構成値である &lt;code&gt;Off_t&lt;/code&gt; 型であり、stdioの &lt;code&gt;off_t&lt;/code&gt; とは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="a3583e8644f865d149cd4eb31d670f437a6e26eb" translate="yes" xml:space="preserve">
          <source>This corresponds to getc(). Despite the c in the name only byte range 0..0xFF is supported. Returns the character read or -1 (&lt;code&gt;EOF&lt;/code&gt; ) on error.</source>
          <target state="translated">これはgetc（）に対応します。名前のcにもかかわらず、バイト範囲0..0xFFのみがサポートされています。読み込まれた文字、またはエラー時に-1（ &lt;code&gt;EOF&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="e1cbd65b62177115f422eaf8fe4754328fbc6b9b" translate="yes" xml:space="preserve">
          <source>This corresponds to rewind(). It is usually defined as being</source>
          <target state="translated">rewind()に相当します。通常は次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="93c7ee35566034261e1234fcee65abc1e334abb8" translate="yes" xml:space="preserve">
          <source>This corresponds to setlinebuf(). Does not return a value. What constitutes a &quot;line&quot; is implementation dependent but usually means that writing &quot;\n&quot; flushes the buffer. What happens with things like &quot;this\nthat&quot; is uncertain. (Perl core uses it</source>
          <target state="translated">これは setlinebuf()に対応しています。値を返さない。何が &quot;line &quot;を構成するかは、実装に依存するが、通常は、&quot;\n &quot;を書くとバッファがフラッシュされることを意味する。this\nthat&quot; のようなものがどうなるかは不明です。(Perlコアはこれを使用しています。</target>
        </trans-unit>
        <trans-unit id="c130282a86007cfef5f589b0d598e97fc7e10899" translate="yes" xml:space="preserve">
          <source>This corresponds to tmpfile(), i.e., returns an anonymous PerlIO or NULL on error. The system will attempt to automatically delete the file when closed. On Unix the file is usually &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;-ed just after it is created so it does not matter how it gets closed. On other systems the file may only be deleted if closed via PerlIO_close() and/or the program exits via &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt;. Depending on the implementation there may be &quot;race conditions&quot; which allow other processes access to the file, though in general it will be safer in this regard than ad. hoc. schemes.</source>
          <target state="translated">これはtmpfile（）に対応します。つまり、エラーの場合、匿名のPerlIOまたはNULLを返します。システムは、閉じたときにファイルを自動的に削除しようとします。 Unixでは、ファイルは通常、作成直後に &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; されるため、どのように閉じるかは関係ありません。他のシステムでは、ファイルはPerlIO_close（）を介して閉じられた場合やプログラムがexitを介して &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; 場合にのみ削除されます。実装によっては、他のプロセスがファイルにアクセスできるようにする「競合状態」が存在する可能性がありますが、一般に、この点ではadよりも安全です。ホック。スキーム。</target>
        </trans-unit>
        <trans-unit id="327b626f972edcc8578bc2302697191125c0290f" translate="yes" xml:space="preserve">
          <source>This corresponds to ungetc(). Note that arguments have been revised to have &quot;file&quot; first. Arranges that next read operation will return the byte &lt;b&gt;c&lt;/b&gt;. Despite the implied &quot;character&quot; in the name only values in the range 0..0xFF are defined. Returns the byte &lt;b&gt;c&lt;/b&gt; on success or -1 (&lt;code&gt;EOF&lt;/code&gt; ) on error. The number of bytes that can be &quot;pushed back&quot; may vary, only 1 character is certain, and then only if it is the last character that was read from the handle.</source>
          <target state="translated">これはungetc（）に対応します。引数は最初に「ファイル」を持つように修正されていることに注意してください。次の読み取り操作でバイト&lt;b&gt;c&lt;/b&gt;が返されるようにします。名前に暗黙の「文字」があるにもかかわらず、0..0xFFの範囲の値のみが定義されています。成功した場合はバイト&lt;b&gt;c&lt;/b&gt;を、エラーの場合は-1（ &lt;code&gt;EOF&lt;/code&gt; ）を返します。「プッシュバック」できるバイト数は変わる可能性があり、1文字だけが確実であり、それがハンドルから読み取られた最後の文字である場合に限られます。</target>
        </trans-unit>
        <trans-unit id="d8f57342ffddc378f45e967d08a4b40a9028441d" translate="yes" xml:space="preserve">
          <source>This could, of course, be more legibly written with the &lt;code&gt;/x&lt;/code&gt; modifier, adding whitespace and comments. Here it is expanded, courtesy of Fred Curtis.</source>
          <target state="translated">もちろん、これは &lt;code&gt;/x&lt;/code&gt; 修飾子を使用してより読みやすく記述でき、空白とコメントを追加します。ここでは、フレッド・カーティスの厚意により拡大されています。</target>
        </trans-unit>
        <trans-unit id="ac65bf824b65194ff0a99fd92e3e036111f8e8a9" translate="yes" xml:space="preserve">
          <source>This counterintuitive behavior has been fixed in perl v5.8.1.</source>
          <target state="translated">この不可解な動作は perl v5.8.1 で修正されています。</target>
        </trans-unit>
        <trans-unit id="4d26884badcfad89a2f88ee752f4bee54862ec7a" translate="yes" xml:space="preserve">
          <source>This creates a handler for the attribute &lt;code&gt;:Loud&lt;/code&gt; in the class LoudDecl. Thereafter, any subroutine declared with a &lt;code&gt;:Loud&lt;/code&gt; attribute in the class LoudDecl:</source>
          <target state="translated">これにより、クラスLoudDeclに属性 &lt;code&gt;:Loud&lt;/code&gt; のハンドラーが作成されます。その後、クラスLoudDeclの： &lt;code&gt;:Loud&lt;/code&gt; 属性で宣言されたサブルーチン：</target>
        </trans-unit>
        <trans-unit id="87fa03371108789e3d1ff265f81c30f8fb7e2b16" translate="yes" xml:space="preserve">
          <source>This creates a new thread (&lt;code&gt;$thr2&lt;/code&gt; ) that inherits the stack size from an existing thread (&lt;code&gt;$thr1&lt;/code&gt; ). This is shorthand for the following:</source>
          <target state="translated">これにより、既存のスレッド（ &lt;code&gt;$thr1&lt;/code&gt; ）からスタックサイズを継承する新しいスレッド（ &lt;code&gt;$thr2&lt;/code&gt; ）が作成されます。これは以下の略記です。</target>
        </trans-unit>
        <trans-unit id="0ee76e6a741e92139c43f1e221ed11b509991786" translate="yes" xml:space="preserve">
          <source>This database type allows arbitrary key/value pairs to be stored in data files. This is equivalent to the functionality provided by other hashing packages like DBM, NDBM, ODBM, GDBM, and SDBM. Remember though, the files created using DB_HASH are not compatible with any of the other packages mentioned.</source>
          <target state="translated">このデータベースタイプでは、任意のキーと値のペアをデータファイルに格納することができます。これは、DBM,NDBM,ODBM,GDBM,SDBM のような他のハッシュパッケージが提供する機能と同等です。ただし、DB_HASH を使用して作成されたファイルは、他のどのパッケージとも互換性がないことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="3807b81d9c773a6c5335f9e71e920114a654bcff" translate="yes" xml:space="preserve">
          <source>This debugger prints a number which increments for each statement encountered and waits for you to hit a newline before continuing to the next statement.</source>
          <target state="translated">このデバッガーは、各ステートメントが遭遇したときにインクリメントされた数値を表示し、次のステートメントに進む前に改行を押すのを待ちます。</target>
        </trans-unit>
        <trans-unit id="67c09da3f20ea7878643178c10aa0a6e33cc924b" translate="yes" xml:space="preserve">
          <source>This declares a block of tests that might be skipped, $how_many tests there are, $why and under what $condition to skip them. An example is the easiest way to illustrate:</source>
          <target state="translated">これは、スキップする可能性のあるテストのブロック、$how_many テストがあるか、$why と $conditioned の下でスキップするかどうかを宣言します。例は、最も簡単に説明する方法です。</target>
        </trans-unit>
        <trans-unit id="44521e30f7e690cd5dc65c30814c4cee699cd60e" translate="yes" xml:space="preserve">
          <source>This decomposition may be an intermediate one whose components are also decomposable. Use &lt;a href=&quot;normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; to get the final decomposition in one step.</source>
          <target state="translated">この分解は、その成分も分解可能な中間の分解である可能性があります。&lt;a href=&quot;normalize&quot;&gt;Unicode :: Normalize&lt;/a&gt;を使用して、1つのステップで最終的な分解を取得します。</target>
        </trans-unit>
        <trans-unit id="97bd528541645ff3d464e572f5a4805e2ee9bc4c" translate="yes" xml:space="preserve">
          <source>This default can be overridden on a per-number basis by calling the &lt;code&gt;display_format&lt;/code&gt; method instead. As before, not supplying any argument returns the current display style for this number. Otherwise whatever you specify will be the new display style for</source>
          <target state="translated">このデフォルトは、代わりに &lt;code&gt;display_format&lt;/code&gt; メソッドを呼び出すことにより、数値ごとにオーバーライドできます。前と同様に、引数を指定しないと、この数値の現在の表示スタイルが返されます。それ以外の場合は、指定したものが新しい表示スタイルになります</target>
        </trans-unit>
        <trans-unit id="b13fed4037708b058149d6d54239c3578805f852" translate="yes" xml:space="preserve">
          <source>This demonstrates how &lt;code&gt;SUPER&lt;/code&gt; is resolved. Even though the object is blessed into the &lt;code&gt;C&lt;/code&gt; class, the &lt;code&gt;speak()&lt;/code&gt; method in the &lt;code&gt;B&lt;/code&gt; class can still call &lt;code&gt;SUPER::speak()&lt;/code&gt; and expect it to correctly look in the parent class of &lt;code&gt;B&lt;/code&gt; (i.e the class the method call is in), not in the parent class of &lt;code&gt;C&lt;/code&gt; (i.e. the class the object belongs to).</source>
          <target state="translated">これは、 &lt;code&gt;SUPER&lt;/code&gt; がどのように解決されるかを示しています。オブジェクトがに恵まれているにもかかわらず、 &lt;code&gt;C&lt;/code&gt; のクラス、 &lt;code&gt;speak()&lt;/code&gt; でメソッド &lt;code&gt;B&lt;/code&gt; のクラスはまだ呼び出すことができます &lt;code&gt;SUPER::speak()&lt;/code&gt; して、正しくの親クラスで見ることを期待 &lt;code&gt;B&lt;/code&gt; （つまりクラスメソッドの呼び出しが入っています）、 &lt;code&gt;C&lt;/code&gt; の親クラス（つまり、オブジェクトが属するクラス）にはありません。</target>
        </trans-unit>
        <trans-unit id="5a18b47e8bc86d748a4aab67a43edef686b92a3f" translate="yes" xml:space="preserve">
          <source>This depends on the tied hash's implementation of EXISTS(). For example, there isn't the concept of undef with hashes that are tied to DBM* files. It also means that exists() and defined() do the same thing with a DBM* file, and what they end up doing is not what they do with ordinary hashes.</source>
          <target state="translated">これは、紐付けられたハッシュの EXISTS()の実装に依存します。例えば、DBM*ファイルに紐付けられたハッシュには undef という概念はありません。また、exists()とdefined()はDBM*ファイルと同じことをしていることを意味し、それらが最終的に行うことは通常のハッシュで行うこととは異なります。</target>
        </trans-unit>
        <trans-unit id="9d4bc0de5af18f612ccd2a5cae826c99487fcbf8" translate="yes" xml:space="preserve">
          <source>This depends on which operating system your program is running on. In the case of Unix, the serial ports will be accessible through files in &lt;code&gt;/dev&lt;/code&gt; ; on other systems, device names will doubtless differ. Several problem areas common to all device interaction are the following:</source>
          <target state="translated">これは、プログラムが実行されているオペレーティングシステムによって異なります。Unixの場合、シリアルポートは &lt;code&gt;/dev&lt;/code&gt; 内のファイルを介してアクセスできます。他のシステムでは、デバイス名は間違いなく異なります。すべてのデバイスの相互作用に共通するいくつかの問題領域は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d5829cc9fcaba21dee6f9d7f5a98f9ac945f1487" translate="yes" xml:space="preserve">
          <source>This description is not updated often (since 5.6.1?), see</source>
          <target state="translated">この記述は頻繁に更新されていません(5.6.1以降?</target>
        </trans-unit>
        <trans-unit id="20322d80a32c4020d9ededc57d341d0284daf471" translate="yes" xml:space="preserve">
          <source>This directive is supported with ANSI-type function declarations only.</source>
          <target state="translated">このディレクティブは ANSI 型の関数宣言でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="a18a04a1fb981c46cc90618271edcb18e99ed305" translate="yes" xml:space="preserve">
          <source>This directory contains dual-life modules where the CPAN module is canonical. Do not patch these modules directly! Changes to these modules should be submitted to the maintainer of the CPAN module. Once those changes are applied and released, the new version of the module will be incorporated into the core.</source>
          <target state="translated">このディレクトリには、CPAN モジュールが正規化されている dual-life モジュールが含まれています。これらのモジュールに直接パッチを当てないでください。これらのモジュールへの変更は、CPAN モジュールのメンテナに提出してください。これらの変更が適用されリリースされると、モジュールの新バージョンがコアに組み込まれます。</target>
        </trans-unit>
        <trans-unit id="8f5f151207fd145f47cd0f164782d7d714aa8988" translate="yes" xml:space="preserve">
          <source>This directory contains pure-Perl modules which are only released as part of the core. This directory contains</source>
          <target state="translated">このディレクトリには、コアの一部としてのみリリースされる純粋な Perl モジュールが含まれます。このディレクトリには</target>
        </trans-unit>
        <trans-unit id="ff88cb5fa00bc50f7151a1d4596e477618c8bcec" translate="yes" xml:space="preserve">
          <source>This directory is for dual-life modules where the blead source is canonical. Note that some modules in this directory may not yet have been released separately on CPAN. Modules under</source>
          <target state="translated">このディレクトリは、ブリードソースがカノニカルなデュアルライフモジュールのためのものです。このディレクトリにあるモジュールの中には、まだCPANで個別にリリースされていないものがあることに注意してください。以下のモジュール</target>
        </trans-unit>
        <trans-unit id="62002fdbbc82dfdecab897397921252b1a422691" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;BOOKSHELF&lt;/code&gt; .</source>
          <target state="translated">このディレクトリは &lt;code&gt;BOOKSHELF&lt;/code&gt; にある方が適切です。</target>
        </trans-unit>
        <trans-unit id="333fd828a086a8d956340a5925aba972db5faa95" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;MANPATH&lt;/code&gt; . You need to have a working</source>
          <target state="translated">このディレクトリは &lt;code&gt;MANPATH&lt;/code&gt; 上にある方がよいでしょう。あなたは働く必要があります</target>
        </trans-unit>
        <trans-unit id="7a7d8abb15dd5ddcab335f051e15e631ee76c9a7" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;MANPATH&lt;/code&gt; . You need to have a working man to access these files.</source>
          <target state="translated">このディレクトリは &lt;code&gt;MANPATH&lt;/code&gt; 上にある方がよいでしょう。これらのファイルにアクセスするには、働く人が必要です。</target>
        </trans-unit>
        <trans-unit id="170ad9fea04adcf28e5b84faabd5cf2954a187d9" translate="yes" xml:space="preserve">
          <source>This disables &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;Magic Autogeneration&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;#Magic-Autogeneration&quot;&gt;マジックの自動生成が&lt;/a&gt;無効になります。</target>
        </trans-unit>
        <trans-unit id="3b3a0993d47177782fe70afdd82bfb741c3d7395" translate="yes" xml:space="preserve">
          <source>This disables the poetry optimization, generating a compile-time error if you try to use a bareword identifier that's not a subroutine, unless it is a simple identifier (no colons) and that it appears in curly braces or on the left hand side of the &lt;code&gt;=&amp;gt;&lt;/code&gt; symbol.</source>
          <target state="translated">これにより、詩の最適化が無効になり、単純な識別子（コロンなし）でなく中括弧または左側に表示されない限り、サブルーチンではないベアワード識別子を使用しようとすると、コンパイル時エラーが生成されます。 &lt;code&gt;=&amp;gt;&lt;/code&gt; 記号。</target>
        </trans-unit>
        <trans-unit id="34ff219b627159fe6cfa93920427dc7e601e7134" translate="yes" xml:space="preserve">
          <source>This document aims to provide an overview of the vast perl community, which is far too large and diverse to provide a detailed listing. If any specific niche has been forgotten, it is not meant as an insult but an omission for the sake of brevity.</source>
          <target state="translated">この文書は広大な perl コミュニティの概要を提供することを目的としています。特定のニッチが忘れ去られていたとしても、それは侮辱ではなく、簡潔さのために省略したものです。</target>
        </trans-unit>
        <trans-unit id="1ba7340d966579fbb753302864000cf7b2972014" translate="yes" xml:space="preserve">
          <source>This document assumes that the executable named &quot;perl&quot; is Perl version 5. Some systems may have installed Perl version 5 as &quot;perl5&quot;.</source>
          <target state="translated">このドキュメントでは、&quot;perl &quot;という名前の実行ファイルがPerlバージョン5であることを前提としています。システムによってはPerlバージョン5を &quot;perl5 &quot;としてインストールしている場合があります。</target>
        </trans-unit>
        <trans-unit id="3a2742d9b73b97368bfc5521e9515184f408ef85" translate="yes" xml:space="preserve">
          <source>This document assumes that you already understand the basics of Perl syntax, variable types, operators, and subroutine calls. If you don't understand these concepts yet, please read &lt;a href=&quot;perlintro&quot;&gt;perlintro&lt;/a&gt; first. You should also read the &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;, &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;, and &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt; documents.</source>
          <target state="translated">このドキュメントは、Perl構文、変数の型、演算子、およびサブルーチン呼び出しの基本をすでに理解していることを前提としています。これらの概念をまだ理解していない場合は、最初に&lt;a href=&quot;perlintro&quot;&gt;perlintro&lt;/a&gt;を読んでください。また、&lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;、&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;、および&lt;a href=&quot;perlsub&quot;&gt;perlsubの&lt;/a&gt;ドキュメントもお読みください。</target>
        </trans-unit>
        <trans-unit id="8f596bd16fedee538f262d0de64e96d996439fb3" translate="yes" xml:space="preserve">
          <source>This document attempts to describe how to use the Perl API, as well as to provide some info on the basic workings of the Perl core. It is far from complete and probably contains many errors. Please refer any questions or comments to the author below.</source>
          <target state="translated">このドキュメントは、Perl API の使い方や Perl コアの基本的な動作についての情報を提供することを目的としています。完全なものではなく、多くのエラーが含まれている可能性があります。質問やコメントがあれば、以下の作者までご連絡ください。</target>
        </trans-unit>
        <trans-unit id="7e01fbc0bc773f9d24734cb30bab33bda7d5f6af" translate="yes" xml:space="preserve">
          <source>This document attempts to describe the Perl Community's &quot;best practice&quot; for writing Perl modules. It extends the recommendations found in &lt;a href=&quot;perlstyle&quot;&gt;perlstyle&lt;/a&gt; , which should be considered required reading before reading this document.</source>
          <target state="translated">このドキュメントでは、Perlモジュールを作成するためのPerlコミュニティの「ベストプラクティス」について説明します。これは&lt;a href=&quot;perlstyle&quot;&gt;perlstyle&lt;/a&gt;にある推奨事項を拡張したものであり、このドキュメントを読む前に必ず読んでおく必要があると考えるべきです。</target>
        </trans-unit>
        <trans-unit id="bab11f45369409b96d7bf2180484dc0f685d2683" translate="yes" xml:space="preserve">
          <source>This document briefly describes Perl under Mac OS X.</source>
          <target state="translated">このドキュメントでは、Mac OS XでのPerlについて簡単に説明しています。</target>
        </trans-unit>
        <trans-unit id="083d82552ef9adb2b16dbbdc73ee6cb2d3adb7be" translate="yes" xml:space="preserve">
          <source>This document codifies the support and maintenance commitments that the Perl community should expect from Perl's developers:</source>
          <target state="translated">この文書は、Perl コミュニティが Perl の開発者に期待すべきサポートとメンテナンスの約束を成文化したものです。</target>
        </trans-unit>
        <trans-unit id="ee4356257bf892096131087eff39fae084e3b0fb" translate="yes" xml:space="preserve">
          <source>This document covers features supported by &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; (also known as &lt;code&gt;xsubpp&lt;/code&gt; ) 3.13_01.</source>
          <target state="translated">このドキュメントでは、 &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; （別名 &lt;code&gt;xsubpp&lt;/code&gt; ）3.13_01でサポートされている機能について説明します。</target>
        </trans-unit>
        <trans-unit id="5d19d436c676e82c5de62fa2d93b31ad146ee5c7" translate="yes" xml:space="preserve">
          <source>This document defines a standard generic interface to the dynamic linking mechanisms available on many platforms. Its primary purpose is to implement automatic dynamic loading of Perl modules.</source>
          <target state="translated">この文書は、多くのプラットフォームで利用可能な動的リンク機構への標準的な汎用インターフェースを定義しています。その主な目的は、Perl モジュールの自動動的ロードを実装することです。</target>
        </trans-unit>
        <trans-unit id="f9a30c0ae237ad22360e4681ed6256da44062757" translate="yes" xml:space="preserve">
          <source>This document describes Thread::Queue version 3.05</source>
          <target state="translated">この文書では、Thread::Queue バージョン 3.05 について説明します。</target>
        </trans-unit>
        <trans-unit id="c32625e21916315b56d3d555dca5fa14529f5283" translate="yes" xml:space="preserve">
          <source>This document describes Thread::Semaphore version 2.12</source>
          <target state="translated">この文書では Thread::Semaphore バージョン 2.12 について説明します。</target>
        </trans-unit>
        <trans-unit id="0a25c4c9828d0f58970f77b7ac6aa566b68c27f1" translate="yes" xml:space="preserve">
          <source>This document describes all backslash and escape sequences. After explaining the role of the backslash, it lists all the sequences that have a special meaning in Perl regular expressions (in alphabetical order), then describes each of them.</source>
          <target state="translated">この文書では、すべてのバックスラッシュとエスケープシーケンスについて説明します。バックスラッシュの役割を説明した後、Perl の正規表現で特別な意味を持つすべてのシーケンスを (アルファベット順に)リストアップし、それぞれについて説明しています。</target>
        </trans-unit>
        <trans-unit id="76ff3a8588f27b8cdd8cc7d51db810e080d05732" translate="yes" xml:space="preserve">
          <source>This document describes all of Perl's object-oriented (OO) features from the ground up. If you're just looking to write some object-oriented code of your own, you are probably better served by using one of the object systems from CPAN described in &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;.</source>
          <target state="translated">このドキュメントでは、Perlのオブジェクト指向（OO）機能のすべてをゼロから説明します。独自のオブジェクト指向コードを作成するだけの場合は、&lt;a href=&quot;perlootut&quot;&gt;perlootutで&lt;/a&gt;説明されているCPANのオブジェクトシステムのいずれかを使用するほうがよいでしょう。</target>
        </trans-unit>
        <trans-unit id="50f134817136be6999dd57e5d22bbefe3d37d2f5" translate="yes" xml:space="preserve">
          <source>This document describes how Perl internally handles numeric values.</source>
          <target state="translated">このドキュメントでは、Perlが内部的にどのように数値を処理するかについて説明します。</target>
        </trans-unit>
        <trans-unit id="8453dae2d904ec94b51a4ae275d589cad1fe0302" translate="yes" xml:space="preserve">
          <source>This document describes the behavior and implementation of the PerlIO abstraction described in &lt;a href=&quot;perlapio&quot;&gt;perlapio&lt;/a&gt; when &lt;code&gt;USE_PERLIO&lt;/code&gt; is defined.</source>
          <target state="translated">この文書では、行動とで説明したPerlIOを抽象化の実装について説明し&lt;a href=&quot;perlapio&quot;&gt;perlapio&lt;/a&gt;とき &lt;code&gt;USE_PERLIO&lt;/code&gt; が定義されています。</target>
        </trans-unit>
        <trans-unit id="a866d5af85544e7e4f21ddcd952a6d5892f7ea0f" translate="yes" xml:space="preserve">
          <source>This document describes the layout of the Perl source tree. If you're hacking on the Perl core, this will help you find what you're looking for.</source>
          <target state="translated">このドキュメントでは、Perl のソースツリーのレイアウトについて説明します。Perl のコアをハックしている場合、これは探しているものを見つけるのに役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="327aacce5b60fcb7f0492805932fe1dec841e5bb" translate="yes" xml:space="preserve">
          <source>This document describes threads version 2.01</source>
          <target state="translated">このドキュメントでは、スレッドのバージョン 2.01 について説明します。</target>
        </trans-unit>
        <trans-unit id="469ac48c0f559cb018049645e8c6431b0895b43b" translate="yes" xml:space="preserve">
          <source>This document describes threads::shared version 1.48</source>
          <target state="translated">このドキュメントでは threads::shared バージョン 1.48 について説明します。</target>
        </trans-unit>
        <trans-unit id="645bafb8d9dd20a3e1fad46cb6f3fa997de6c937" translate="yes" xml:space="preserve">
          <source>This document describes various features of FreeBSD that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">この文書では、Perl バージョン 5 (以下、Perl と略します)のコンパイルや実行に影響を与える FreeBSD の様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="321b1b1331ddd1b908bf07373d4048f86b3fa9c7" translate="yes" xml:space="preserve">
          <source>This document describes various features of HP's (formerly Compaq's, formerly Digital's) Unix operating system (Tru64) that will affect how Perl version 5 (hereafter just Perl) is configured, compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、単に Perl)の構成、コンパイル、および/または実行方法に影響を与える HP (旧 Compaq 社、旧 Digital 社)の Unix オペレーティング・システム (Tru64)のさまざまな機能について説明します。</target>
        </trans-unit>
        <trans-unit id="d268ac5a2d19120ce76c77eb58b90ecc6824f4a2" translate="yes" xml:space="preserve">
          <source>This document describes various features of HP's Unix operating system (HP-UX) that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、Perl)のコンパイルや実行方法に影響を与える HP の Unix オペレーティングシステム (HP-UX)の様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="2eba298a6bc6800370faf3fd81957d6c988953ae" translate="yes" xml:space="preserve">
          <source>This document describes various features of IBM's OS/400 operating system that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、Perl と略す)のコンパイルや実行方法に影響を与える IBM の OS/400 オペレーティングシステムの様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="1043854dc3d305d1c7397cad00b2c0693b02060a" translate="yes" xml:space="preserve">
          <source>This document describes various features of IBM's UNIX operating system AIX that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">この文書では、IBM の UNIX オペレーティングシステム AIX のさまざまな機能について説明します。</target>
        </trans-unit>
        <trans-unit id="0e732732feb0181fd46f9c9188d35cc9910b00cf" translate="yes" xml:space="preserve">
          <source>This document describes various features of Irix that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perlバージョン5(以下、Perl)のコンパイルや実行方法に影響を与えるIrixの様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="180f34cce99d47d99da56406605f0fb9ba8ddd90" translate="yes" xml:space="preserve">
          <source>This document describes various features of Linux that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、Perl と略す)のコンパイルや実行に影響を与える Linux の様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="cd165af2963c8b766b7c027487cbd05b923f2018" translate="yes" xml:space="preserve">
          <source>This document describes various features of OpenBSD that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、単に Perl)のコンパイルや実行方法に影響を与える OpenBSD の様々な機能について説明しています。</target>
        </trans-unit>
        <trans-unit id="bc5bdb1f6483dddcfcf934a3487da7243a97f3cc" translate="yes" xml:space="preserve">
          <source>This document describes various features of Sun's Solaris operating system that will affect how Perl version 5 (hereafter just perl) is compiled and/or runs. Some issues relating to the older SunOS 4.x are also discussed, though they may be out of date.</source>
          <target state="translated">この文書では、Perl バージョン 5 (以下、単に perl)のコンパイルや実行方法に影響を与える Sun の Solaris オペレーティングシステムのさまざまな機能について説明します。古い SunOS 4.x に関連するいくつかの問題についても、古いかもしれませんが議論されています。</target>
        </trans-unit>
        <trans-unit id="757712086ab3b4685f19333593ba82a0d48290a1" translate="yes" xml:space="preserve">
          <source>This document describes various features of the Symbian operating system that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、単に Perl)のコンパイルや実行の仕方に影響を与える Symbian オペレーティングシステムの様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="a4d121d0bfe8a3c1aa6015bd2c8760d53592dff9" translate="yes" xml:space="preserve">
          <source>This document describes version 0.18 of Locale::Maketext::Simple, released Septermber 8, 2006.</source>
          <target state="translated">この文書では、2006年9月8日にリリースされたLocale::Maketext::Simpleのバージョン0.18について説明します。</target>
        </trans-unit>
        <trans-unit id="5e0659e04f3d9f2056b337b0739a67684597732b" translate="yes" xml:space="preserve">
          <source>This document describes version 0.97 of Attribute::Handlers.</source>
          <target state="translated">このドキュメントでは、Attribute::Handlers のバージョン 0.97 について説明します。</target>
        </trans-unit>
        <trans-unit id="00291624b11a3514d125571e1eabaca275507a74" translate="yes" xml:space="preserve">
          <source>This document describes version 2.09 of File::Path, released 2013-01-17.</source>
          <target state="translated">このドキュメントでは、File::Path のバージョン 2.09 (2013-01-17 リリース)について説明します。</target>
        </trans-unit>
        <trans-unit id="e958fa3bffae7851375960acacad749b89480be8" translate="yes" xml:space="preserve">
          <source>This document differs from &lt;a href=&quot;perlnewmod&quot;&gt;perlnewmod&lt;/a&gt; in that it is a style guide rather than a tutorial on creating CPAN modules. It provides a checklist against which modules can be compared to determine whether they conform to best practice, without necessarily describing in detail how to achieve this.</source>
          <target state="translated">このドキュメントは、CPANモジュールの作成に関するチュートリアルではなく、スタイルガイドであるという点で&lt;a href=&quot;perlnewmod&quot;&gt;perlnewmod&lt;/a&gt;とは異なります。これは、どのようにモジュールを比較して、ベストプラクティスに準拠しているかを判断するためのチェックリストを提供します。</target>
        </trans-unit>
        <trans-unit id="1c365d03a0d07def2d5f697a7dff266e86bfcaee" translate="yes" xml:space="preserve">
          <source>This document explains how Perl development works. It includes details about the Perl 5 Porters email list, the Perl repository, the Perlbug bug tracker, patch guidelines, and commentary on Perl development philosophy.</source>
          <target state="translated">このドキュメントでは、Perl の開発がどのように行われているかを説明しています。Perl 5 Porters メールリスト、Perl リポジトリ、Perlbug バグトラッカー、パッチガイドライン、Perl 開発哲学の解説などの詳細が含まれています。</target>
        </trans-unit>
        <trans-unit id="448289ec7a46caaf1d68d5b7cd3ab508bea55402" translate="yes" xml:space="preserve">
          <source>This document gives a condensed list of the features available in the POSIX module. Consult your operating system's manpages for general information on most features. Consult &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for functions which are noted as being identical to Perl's builtin functions.</source>
          <target state="translated">このドキュメントは、POSIXモジュールで利用可能な機能の要約リストを提供します。ほとんどの機能に関する一般的な情報については、オペレーティングシステムのマンページを参照してください。ご相談&lt;a href=&quot;perlfunc&quot;&gt;はperlfunc&lt;/a&gt; Perlの組み込み機能と同一であるとして注目されている機能のために。</target>
        </trans-unit>
        <trans-unit id="2fce74951001e7bfa538197dd8bb5ec9f0e07bc5" translate="yes" xml:space="preserve">
          <source>This document gives a general idea of Unicode and how to use Unicode in Perl. See &lt;a href=&quot;#Further-Resources&quot;&gt;Further Resources&lt;/a&gt; for references to more in-depth treatments of Unicode.</source>
          <target state="translated">このドキュメントでは、Unicodeの一般的な考え方と、UnicodeをPerlで使用する方法について説明します。Unicodeのより詳細な処理への参照については、&lt;a href=&quot;#Further-Resources&quot;&gt;その他のリソース&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a55afa937d8de565fbacea117f04c55c4f3d03c" translate="yes" xml:space="preserve">
          <source>This document gives instructions for building Perl for RISC OS. It is complicated by the need to cross compile. There is a binary version of perl available from &lt;a href=&quot;http://www.cp15.org/perl/&quot;&gt;http://www.cp15.org/perl/&lt;/a&gt; which you may wish to use instead of trying to compile it yourself.</source>
          <target state="translated">このドキュメントでは、RISC OS用のPerlを構築する手順について説明します。クロスコンパイルする必要があるため、複雑です。&lt;a href=&quot;http://www.cp15.org/perl/&quot;&gt;http://www.cp15.org/perl/&lt;/a&gt;から入手できるperlのバイナリバージョンがあり、自分でコンパイルする代わりに使用できます。</target>
        </trans-unit>
        <trans-unit id="15f232a362787f4ceadbadf19dad93be195a4a8a" translate="yes" xml:space="preserve">
          <source>This document gives you some suggestions about how to go about writing Perl modules, preparing them for distribution, and making them available via CPAN.</source>
          <target state="translated">このドキュメントでは、Perl モジュールの書き方、配布の準備、CPAN を通じて利用できるようにする方法について、いくつかの提案を提供しています。</target>
        </trans-unit>
        <trans-unit id="132f8081c1f83d30c54e1dd1f8a6c29026e0459f" translate="yes" xml:space="preserve">
          <source>This document has provided several way to go about identifying hot-spots, and checking whether any modifications have improved the runtime of the code.</source>
          <target state="translated">このドキュメントでは、ホットスポットを特定し、変更がコードの実行時間を改善したかどうかをチェックするためのいくつかの方法を提供しています。</target>
        </trans-unit>
        <trans-unit id="2f9e9ade072c3d9b2906bfd078f37006fde1b348" translate="yes" xml:space="preserve">
          <source>This document is an attempt to shine some light on the guts of the regex engine and how it works. The regex engine represents a significant chunk of the perl codebase, but is relatively poorly understood. This document is a meagre attempt at addressing this situation. It is derived from the author's experience, comments in the source code, other papers on the regex engine, feedback on the perl5-porters mail list, and no doubt other places as well.</source>
          <target state="translated">このドキュメントは、regex エンジンの根幹とそれがどのように動作するのかに光を当てる試みです。regex エンジンは perl のコードベースのかなりの部分を占めていますが、 比較的よく理解されていません。このドキュメントは、この状況に対処するためのささやかな試みです。著者の経験、ソースコードのコメント、regex エンジンに関する他の論文、perl5-porters メーリングリストのフィードバック、そして間違いなく他の場所から得たものです。</target>
        </trans-unit>
        <trans-unit id="e2f799b102440b11497f30f8301310792802f29f" translate="yes" xml:space="preserve">
          <source>This document is authored and maintained by Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;.</source>
          <target state="translated">このドキュメントは、Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;によって作成および管理されています。</target>
        </trans-unit>
        <trans-unit id="deb0c7f47e4494d30a1aab35b9ec321b01a2ec44" translate="yes" xml:space="preserve">
          <source>This document is available under the same terms as Perl itself. Code examples in all the perlfaq documents are in the public domain. Use them as you see fit (and at your own risk with no warranty from anyone).</source>
          <target state="translated">このドキュメントはPerl自体と同じ条件で利用可能です。すべての perlfaq ドキュメントのコード例はパブリックドメインにあります。お好きなように使ってください(誰からも保証されていないので、自己責任で)。</target>
        </trans-unit>
        <trans-unit id="931cd9f92a3e4b725c73c5f241d6c52b01e63f35" translate="yes" xml:space="preserve">
          <source>This document is detailed notes on the Pod markup language. Most people will only have to read &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; to know how to write in Pod, but this document may answer some incidental questions to do with parsing and rendering Pod.</source>
          <target state="translated">このドキュメントは、ポッドマークアップ言語に関する詳細なメモです。ほとんどの人は、ポッドでの記述方法を知るために&lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;を読むだけで済みますが、このドキュメントでは、ポッドの解析とレンダリングに関する付随的な質問に回答する場合があります。</target>
        </trans-unit>
        <trans-unit id="bf5499e713f269332b5a031b1d5ec104878d26d5" translate="yes" xml:space="preserve">
          <source>This document is intended to give you a quick overview of the Perl programming language, along with pointers to further documentation. It is intended as a &quot;bootstrap&quot; guide for those who are new to the language, and provides just enough information for you to be able to read other peoples' Perl and understand roughly what it's doing, or write your own simple scripts.</source>
          <target state="translated">この文書は、Perl プログラミング言語の簡単な概要と、さらなる文書へのポインタを提供することを意図しています。また、他の人の Perl を読んで何をしているのかを大まかに理解したり、自分で簡単なスクリプトを書いたりできるようになるための十分な情報を提供しています。</target>
        </trans-unit>
        <trans-unit id="04d450fbf5761325924f000d871533277846798f" translate="yes" xml:space="preserve">
          <source>This document is maintained by Jan Dubois.</source>
          <target state="translated">この文書はJan Duboisによって管理されています。</target>
        </trans-unit>
        <trans-unit id="6ad1ca1a9c1e0e6df1be4b460cdb832dc533d65a" translate="yes" xml:space="preserve">
          <source>This document is meant to be a detailed but understandable treatment of the many different sorts of data structures you might want to develop. It should also serve as a cookbook of examples. That way, when you need to create one of these complex data structures, you can just pinch, pilfer, or purloin a drop-in example from here.</source>
          <target state="translated">この文書は、あなたが開発したいと思うかもしれない様々な種類のデータ構造について、詳細に、しかし理解しやすいように説明することを意図しています。また、例題のクックブックとしての役割も果たします。そうすれば、これらの複雑なデータ構造を作成する必要があるときに、ここからドロップインの例をつまんだり、盗み取ったり、盗み出したりすることができます。</target>
        </trans-unit>
        <trans-unit id="9bf997dd7f7e98ee160d1fffa9d041813ac9f4bb" translate="yes" xml:space="preserve">
          <source>This document is meant to help you to find out what constitutes portable Perl code. That way once you make a decision to write portably, you know where the lines are drawn, and you can stay within them.</source>
          <target state="translated">この文書は、何が移植性のある Perl コードを構成するのかを知るのに役立つことを目的としています。そうすれば、移植性のあるコードを書くことを決めたときに、どこに線が引かれているかを知ることができ、その線の範囲内に留まることができるようになります。</target>
        </trans-unit>
        <trans-unit id="9d9f3d95216c84aa89657f351bb6eefc71ea99a0" translate="yes" xml:space="preserve">
          <source>This document is provided in the hope that it will be useful, but without any warranty; without even the implied warranty of accuracy, authoritativeness, completeness, merchantability, or fitness for a particular purpose.</source>
          <target state="translated">この文書は、有用なものであることを期待して提供されていますが、正確性、権威性、完全性、商品性、特定の目的への適合性についての暗黙の保証もなく、いかなる保証もありません。</target>
        </trans-unit>
        <trans-unit id="c3a1d5c913f755b58160ddd4ac8b4f8158d38b0a" translate="yes" xml:space="preserve">
          <source>This document is the master document which records all written policies about how the Perl 5 Porters collectively develop and maintain the Perl core.</source>
          <target state="translated">この文書は、Perl 5 移植担当者がどのようにして Perl コアをまとめて開発し、維持するかについて書かれたすべてのポリシーを記録したマスター文書です。</target>
        </trans-unit>
        <trans-unit id="6445b4e91fdc1237d3a1bc4a31d98919bdef331e" translate="yes" xml:space="preserve">
          <source>This document lists the current and past experimental features in the perl core. Although all of these are documented with their appropriate topics, this succinct listing gives you an overview and basic facts about their status.</source>
          <target state="translated">この文書では、Perl コアの現在および過去の実験的な機能をリストアップしています。これらはすべて適切なトピックで文書化されていますが、 この簡潔なリストでは、それらの状態についての概要と基本的な事実を知ることができます。</target>
        </trans-unit>
        <trans-unit id="e04379014fdbc8385dc766fdec2dc2ab609657d0" translate="yes" xml:space="preserve">
          <source>This document may be distributed under the same terms as Perl itself.</source>
          <target state="translated">この文書は Perl 自体と同じ条件で配布されることがあります。</target>
        </trans-unit>
        <trans-unit id="68809e455146d4d0b2eb575625c0befbf01b3e91" translate="yes" xml:space="preserve">
          <source>This document may be incomplete in some respects.</source>
          <target state="translated">この文書は、一部不完全な点があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d40e2bd179554762718d2c8f40e4558baafd8315" translate="yes" xml:space="preserve">
          <source>This document merely lists all available properties and does not attempt to explain what each property really means. There is a brief description of each Perl extension; see &lt;a href=&quot;perlunicode#Other-Properties&quot;&gt;Other Properties in perlunicode&lt;/a&gt; for more information on these. There is some detail about Blocks, Scripts, General_Category, and Bidi_Class in &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;, but to find out about the intricacies of the official Unicode properties, refer to the Unicode standard. A good starting place is &lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt;.</source>
          <target state="translated">このドキュメントは、利用可能なすべてのプロパティを一覧表示するだけで、各プロパティが実際に何を意味するかを説明するものではありません。各Perl拡張の簡単な説明があります。これらの詳細について&lt;a href=&quot;perlunicode#Other-Properties&quot;&gt;は、perlunicodeの他のプロパティを&lt;/a&gt;参照してください。そこでのブロック、スクリプト、General_Category、およびBidi_Classに関するいくつかの詳細で&lt;a href=&quot;perlunicode&quot;&gt;はperlunicodeは&lt;/a&gt;、しかし、Unicode標準を参照して、公式のUnicodeプロパティの複雑さを知るために。良い出発点は&lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="69e6772a5d46653631303f536faddc78ecd15c3a" translate="yes" xml:space="preserve">
          <source>This document mostly explains the</source>
          <target state="translated">この文書では、ほとんどの場合、以下のように説明されています。</target>
        </trans-unit>
        <trans-unit id="a7ddd5955e611e8402df676dc922c52fe96687d9" translate="yes" xml:space="preserve">
          <source>This document needs a rewrite that separates the tutorial content from the reference content.</source>
          <target state="translated">このドキュメントでは、チュートリアルの内容とリファレンスの内容を分離するように書き直す必要があります。</target>
        </trans-unit>
        <trans-unit id="c5434f0b9e2b7cf484cc38556a1c3be222c03edd" translate="yes" xml:space="preserve">
          <source>This document provides a general overview of the capabilities and limitations of the fork() emulation. Note that the issues discussed here are not applicable to platforms where a real fork() is available and Perl has been configured to use it.</source>
          <target state="translated">このドキュメントでは、fork()エミュレーションの機能と制限についての一般的な概要を説明します。ここで議論されている問題は、実際の fork()が利用可能で、Perl がそれを使用するように設定されているプラットフォームには適用されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="93c5711ad21bddf8f27384e848494d1a512f01be" translate="yes" xml:space="preserve">
          <source>This document provides a reference for Perl's object orientation features. If you're looking for an introduction to object-oriented programming in Perl, please see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;.</source>
          <target state="translated">このドキュメントは、Perlのオブジェクト指向機能のリファレンスを提供します。Perlでのオブジェクト指向プログラミングの紹介を探している場合は、&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="46a94276417126d2ba57635546eac62791e072d3" translate="yes" xml:space="preserve">
          <source>This document provides an introduction to object-oriented programming in Perl. It begins with a brief overview of the concepts behind object oriented design. Then it introduces several different OO systems from &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org&quot;&gt;CPAN&lt;/a&gt; which build on top of what Perl provides.</source>
          <target state="translated">このドキュメントでは、Perlでのオブジェクト指向プログラミングの概要を説明します。まず、オブジェクト指向設計の背後にある概念の概要について説明します。次に、Perlが提供するものの上に構築された&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org&quot;&gt;CPANの&lt;/a&gt;いくつかの異なるOOシステムを紹介します。</target>
        </trans-unit>
        <trans-unit id="6876a82e12e5ab947f419b2c224d987985e1ad19" translate="yes" xml:space="preserve">
          <source>This document provides an overview of how the Perl interpreter works at the level of C code, along with pointers to the relevant C source code files.</source>
          <target state="translated">このドキュメントでは、Perl インタプリタが C コードレベルでどのように動作するかの概要と、関連する C ソースコードファイルへのポインタを提供します。</target>
        </trans-unit>
        <trans-unit id="98ef42b4ebd0391f6b1eb2c007891c9540cce7bb" translate="yes" xml:space="preserve">
          <source>This document provides information about the portion of the Unicode database that deals with character properties, that is the portion that is defined on single code points. (&lt;a href=&quot;#Other-information-in-the-Unicode-data-base&quot;&gt;Other information in the Unicode data base&lt;/a&gt; below briefly mentions other data that Unicode provides.)</source>
          <target state="translated">このドキュメントでは、Unicodeデータベースの文字プロパティを処理する部分、つまり単一のコードポイントで定義される部分についての情報を提供します。（以下&lt;a href=&quot;#Other-information-in-the-Unicode-data-base&quot;&gt;のUnicodeデータベースのその他の情報では&lt;/a&gt;、Unicodeが提供するその他のデータについて簡単に説明しています。）</target>
        </trans-unit>
        <trans-unit id="b2a79746685de57fddf566ba23eb18f1694b69ba" translate="yes" xml:space="preserve">
          <source>This document serves as both a specification for anyone wishing to implement the DynaLoader for a new platform and as a guide for anyone wishing to use the DynaLoader directly in an application.</source>
          <target state="translated">このドキュメントは、新しいプラットフォームにDynaLoaderを実装したい人のための仕様書であり、アプリケーションでDynaLoaderを直接使いたい人のためのガイド書でもあります。</target>
        </trans-unit>
        <trans-unit id="4c2fd7fb88b1605d6c1c01cd882956329e66498d" translate="yes" xml:space="preserve">
          <source>This document takes you through a simple patch example.</source>
          <target state="translated">このドキュメントでは、簡単なパッチの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="482b84044bf12cbb74ce5534dc67232a2bb4bcd3" translate="yes" xml:space="preserve">
          <source>This document varies from difficult to understand to completely and utterly opaque. The wandering prose riddled with jargon is hard to fathom in several places.</source>
          <target state="translated">この文書は、理解しにくいものから、完全に不透明なものまで様々である。専門用語が散りばめられた流浪の散文は、いくつかの場所で理解するのが難しい。</target>
        </trans-unit>
        <trans-unit id="e494f5a4ef902fd5cb4de9dfa1a90e73e0fc46e2" translate="yes" xml:space="preserve">
          <source>This document walks through the creation of a small patch to Perl's C code. If you're just getting started with Perl core hacking, this will help you understand how it works.</source>
          <target state="translated">このドキュメントでは、Perl の C コードへの小さなパッチの作成について説明します。Perl のコアハッキングを始めたばかりの方には、これがどのように動作するのかを理解するのに役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="6e368b4b82da174b5c34f4ad74472953966358bf" translate="yes" xml:space="preserve">
          <source>This document was created in February, 2011, and the last major revision was in February, 2013.</source>
          <target state="translated">この文書は2011年2月に作成され、最後の大幅な改訂は2013年2月に行われました。</target>
        </trans-unit>
        <trans-unit id="e89c4ac20e63934f15f4f06f3bdf35dc35e9054b" translate="yes" xml:space="preserve">
          <source>This document was originally written by David Fiander for the 5.005 release of Perl.</source>
          <target state="translated">このドキュメントは元々、Perl の 5.005 リリースのために David Fiander によって書かれたものです。</target>
        </trans-unit>
        <trans-unit id="44116b950aea8406dc1d009e3e7e8df16d0f1901" translate="yes" xml:space="preserve">
          <source>This document was originally written by Nathan Torkington, and is maintained by the perl5-porters mailing list.</source>
          <target state="translated">このドキュメントは Nathan Torkington によって書かれたもので、 perl5-porters メーリングリストで管理されています。</target>
        </trans-unit>
        <trans-unit id="cb57f1783ae5d9d11a07aa4ee9a4142c141dd869" translate="yes" xml:space="preserve">
          <source>This document was originally written by Thomas Dorner for the 5.005 release of Perl.</source>
          <target state="translated">このドキュメントは、Perl の 5.005 リリースのために Thomas Dorner によって書かれたものです。</target>
        </trans-unit>
        <trans-unit id="8245e0ace1fc709b9c52b2d684fbab4d872b4b6b" translate="yes" xml:space="preserve">
          <source>This document was podified for the 5.005_03 release of Perl 11 March 1999.</source>
          <target state="translated">この文書は、1999年3月11日のPerlの5.005_03リリース用にポッド化されました。</target>
        </trans-unit>
        <trans-unit id="01c73c6cbc6ea7a7507692f73f286583700f23f4" translate="yes" xml:space="preserve">
          <source>This document was podified for the 5.6 release of perl 11 July 2000.</source>
          <target state="translated">この文書は、2000年7月11日のperl 5.6リリース用にポッド化されました。</target>
        </trans-unit>
        <trans-unit id="e3d3763f0de441b0bf953c53b8f14562b8c6d91b" translate="yes" xml:space="preserve">
          <source>This document was revised 09-October-1996 for Perl 5.003_7.</source>
          <target state="translated">この文書は、Perl 5.003_7用に1996年10月9日に改訂されました。</target>
        </trans-unit>
        <trans-unit id="1ae9aedfb6e910ab590ab6a48004a6cd92829aac" translate="yes" xml:space="preserve">
          <source>This document will help you Configure, build, test and install Perl on BS2000 in the POSIX subsystem.</source>
          <target state="translated">このドキュメントは、POSIXサブシステムのBS2000にPerlを設定、構築、テスト、インストールするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ecb2db0bdd80184dad93c70d1f7773c61d926757" translate="yes" xml:space="preserve">
          <source>This document will help you Configure, build, test and install Perl on OS/390 (aka z/OS) Unix System Services.</source>
          <target state="translated">このドキュメントでは、OS/390 (別名 z/OS)の Unix システムサービス上で Perl を設定、ビルド、テスト、インストールする方法を説明します。</target>
        </trans-unit>
        <trans-unit id="b14dd21b17eb4778756f16a28286f3080a5b52fc" translate="yes" xml:space="preserve">
          <source>This document will help you configure, make, test and install Perl on Cygwin. This document also describes features of Cygwin that will affect how Perl behaves at runtime.</source>
          <target state="translated">このドキュメントは、Cygwin上でPerlを設定、作成、テスト、インストールするのに役立ちます。このドキュメントでは、実行時のPerlの動作に影響を与えるCygwinの機能についても説明しています。</target>
        </trans-unit>
        <trans-unit id="4b25a8a1d43deec5996faad1ce1066a1b7f65307" translate="yes" xml:space="preserve">
          <source>This document will help you learn the best way to go about hacking on the Perl core C code. It covers common problems, debugging, profiling, and more.</source>
          <target state="translated">このドキュメントは、Perl のコア C コードをハッキングするための最良の方法を学ぶのに役立ちます。一般的な問題、デバッグ、プロファイリングなどをカバーしています。</target>
        </trans-unit>
        <trans-unit id="7b1ceac6a2e862b1ba010e29c7ba5c554256d9b3" translate="yes" xml:space="preserve">
          <source>This documentation describes version 0.08.</source>
          <target state="translated">このドキュメントでは、バージョン 0.08 について説明します。</target>
        </trans-unit>
        <trans-unit id="bb13bb5cc25da0a84b0ee6fe56550c8fa997e8a4" translate="yes" xml:space="preserve">
          <source>This documentation is for people who want to download CPAN modules and install them on their own computer.</source>
          <target state="translated">このドキュメントは、CPANモジュールをダウンロードして自分のコンピュータにインストールしたい人のためのものです。</target>
        </trans-unit>
        <trans-unit id="f9807e2f281735ce8b4db75a087a60d39d5eaabb" translate="yes" xml:space="preserve">
          <source>This documentation is free software; you may redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">このドキュメントはフリーソフトウェアです。</target>
        </trans-unit>
        <trans-unit id="4e1e03b9948de51dc9fc37899fb9224e953fca3a" translate="yes" xml:space="preserve">
          <source>This documentation is free; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">このドキュメントはフリーです。Perl 自体と同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="cceba8951b48c0df6a7d7a78ae98404b2be1a5f6" translate="yes" xml:space="preserve">
          <source>This documentation is maintained as part of the podlators distribution. The current version is always available from its web site at &amp;lt;&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;&amp;gt;.</source>
          <target state="translated">このドキュメントは、ポッドレーターディストリビューションの一部として維持されます。現在のバージョンは、常に&amp;lt; &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt; &amp;gt;のWebサイトから入手できます。</target>
        </trans-unit>
        <trans-unit id="ee59b544a64dcf3a8c36474bf7a745c77abd72ed" translate="yes" xml:space="preserve">
          <source>This documentation provided by Tels &amp;lt;nospam-abuse@bloodgate.com&amp;gt; 2007.</source>
          <target state="translated">このドキュメントはTels &amp;lt;nospam-abuse@bloodgate.com&amp;gt; 2007によって提供されました。</target>
        </trans-unit>
        <trans-unit id="d579dc02247e710bddf4fd80263160b958f95883" translate="yes" xml:space="preserve">
          <source>This does a &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; check on the argument provided. The &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; of the argument must be the same as the &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; of the default value for this check to pass.</source>
          <target state="translated">これは、指定された引数に対して &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; チェックを行います。 &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 引数のは同じでなければなりません &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; を渡すには、このチェックのデフォルト値の。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
