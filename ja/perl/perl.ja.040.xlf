<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="bda6d4349e03cdc3822accb764cf2332f0d166cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct()&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;struct()&lt;/code&gt; 関数</target>
        </trans-unit>
        <trans-unit id="7a95e760c73406947e7da7714b03782e42d5fa06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct&lt;/code&gt; function has three forms of parameter-list.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 関数は、パラメータ・リストの3つの形式があります。</target>
        </trans-unit>
        <trans-unit id="ca2248434d315d7f4555ab09ed558fffeb25af18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv&lt;/code&gt; argument is a pointer to the SV that is to acquire a new magical feature.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 引数は、新しい魔法の機能を取得することであるSVへのポインタです。</target>
        </trans-unit>
        <trans-unit id="9d1732cdeea04b3b5302655756ff012b4b97e760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv&lt;/code&gt; argument must be a reference value. The &lt;code&gt;stash&lt;/code&gt; argument specifies which class the reference will belong to. See &lt;a href=&quot;#Stashes-and-Globs&quot;&gt;Stashes and Globs&lt;/a&gt; for information on converting class names into stashes.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 引数は参照値でなければなりません。 &lt;code&gt;stash&lt;/code&gt; 参照が所属するクラスの引数を指定します。クラス名をスタッシュに変換する方法については、&lt;a href=&quot;#Stashes-and-Globs&quot;&gt;スタッシュとグロブ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5aa9fb7196f50b878b4d2185150e32ef86a1a0ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv_cat*()&lt;/code&gt; functions are not generic enough to operate on values that have &quot;magic&quot;. See &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tables&lt;/a&gt; later in this document.</source>
          <target state="translated">&lt;code&gt;sv_cat*()&lt;/code&gt; 関数は、「魔法」を持っている値を操作するための汎用的な十分ではありません。このドキュメントで後述する&lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tablesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="451bffe03c920b337c26d3f6c5c7b3d0a90a952c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv_set*()&lt;/code&gt; functions are not generic enough to operate on values that have &quot;magic&quot;. See &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tables&lt;/a&gt; later in this document.</source>
          <target state="translated">&lt;code&gt;sv_set*()&lt;/code&gt; 関数は、「魔法」を持っている値を操作するための汎用的な十分ではありません。このドキュメントで後述する&lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tablesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="264e3c8ac2fdd944cc02ae92713944fc8cf6494f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;taint&lt;/code&gt; pragma causes any substrings from a match with a tainted variable to be tainted as well. This is not normally the case, as regexps are often used to extract the safe bits from a tainted variable. Use &lt;code&gt;taint&lt;/code&gt; when you are not extracting safe bits, but are performing some other processing. Both &lt;code&gt;taint&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; pragmas are lexically scoped, which means they are in effect only until the end of the block enclosing the pragmas.</source>
          <target state="translated">&lt;code&gt;taint&lt;/code&gt; プラグマは、汚染された変数との一致からの任意のサブストリングがうまくとして汚染させます。正規表現は汚染された変数から安全なビットを抽出するためによく使用されるため、これは通常は当てはまりません。安全なビットを抽出していないが、他の処理を実行している場合は、 &lt;code&gt;taint&lt;/code&gt; 使用します。 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; プラグマとevalプラグマは両方とも &lt;code&gt;taint&lt;/code&gt; にスコープされます。つまり、プラグマを囲むブロックの終わりまでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="0e22b53957ab545ec5f1fe43f2463dbb75fb5bef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test_diag&lt;/code&gt; function prepends comment hashes and spacing to the start and newlines to the end of the expected output passed to it and adds it to the list of expected error output. So, instead of writing</source>
          <target state="translated">&lt;code&gt;test_diag&lt;/code&gt; の関数は、渡された期待される出力の最後にコメントハッシュと先頭に間隔と改行を付加し、予想されるエラー出力のリストに追加します。だから、書く代わりに</target>
        </trans-unit>
        <trans-unit id="9a044497bbeccf899d123e744ac60158148d66b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thing&lt;/code&gt; argument can be any of an &lt;code&gt;SV*&lt;/code&gt; , &lt;code&gt;AV*&lt;/code&gt; , or &lt;code&gt;HV*&lt;/code&gt; . The functions are identical except that &lt;code&gt;newRV_inc&lt;/code&gt; increments the reference count of the &lt;code&gt;thing&lt;/code&gt; , while &lt;code&gt;newRV_noinc&lt;/code&gt; does not. For historical reasons, &lt;code&gt;newRV&lt;/code&gt; is a synonym for &lt;code&gt;newRV_inc&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;thing&lt;/code&gt; 引数には、のいずれかとすることができる &lt;code&gt;SV*&lt;/code&gt; 、 &lt;code&gt;AV*&lt;/code&gt; 、または &lt;code&gt;HV*&lt;/code&gt; 。機能があることを除いて同一である &lt;code&gt;newRV_inc&lt;/code&gt; はの参照カウントをインクリメント &lt;code&gt;thing&lt;/code&gt; ながら、 &lt;code&gt;newRV_noinc&lt;/code&gt; はありません。歴史的な理由から、 &lt;code&gt;newRV&lt;/code&gt; は &lt;code&gt;newRV_inc&lt;/code&gt; の同義語です。</target>
        </trans-unit>
        <trans-unit id="764690cb5a9a1e69711deb7f1d4bd7570cd33533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;threads-&amp;gt;self()&lt;/code&gt; class method provides your program with a way to get an object representing the thread it's currently in. You can use this object in the same way as the ones returned from thread creation.</source>
          <target state="translated">&lt;code&gt;threads-&amp;gt;self()&lt;/code&gt; クラスメソッドは、それが現在のスレッドを表すオブジェクトを取得する方法と、あなたのプログラムを提供しています。あなたは、スレッドの作成から返されるものと同じように、このオブジェクトを使用することができます。</target>
        </trans-unit>
        <trans-unit id="5cb77a0f1c56daabcc9daa1cb20e1afceca163c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tid&lt;/code&gt; method returns the tid of a thread. The tid is a monotonically increasing integer assigned when a thread is created. The main thread of a program will have a tid of zero, while subsequent threads will have tids assigned starting with one.</source>
          <target state="translated">&lt;code&gt;tid&lt;/code&gt; 方法は、スレッドのTIDを返します。tidは、スレッドの作成時に割り当てられる単調に増加する整数です。プログラムのメインスレッドのtidは0ですが、後続のスレッドのtidは1から始まります。</target>
        </trans-unit>
        <trans-unit id="62cae6d3e02f73d7641c7861d0693bc4b08d5c81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timelocal()&lt;/code&gt; and &lt;code&gt;timegm()&lt;/code&gt; functions perform range checking on the input $sec, $min, $hour, $mday, and $mon values by default.</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; と &lt;code&gt;timegm()&lt;/code&gt; 関数は、デフォルトで入力された$秒、$分、$時間、$ MDAY、および$月値に範囲チェックを行います。</target>
        </trans-unit>
        <trans-unit id="3444ad2f99e605827ac849ba41549cb93537c5ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timelocal()&lt;/code&gt; function is implemented using the same cache. We just assume that we're translating a GMT time, and then fudge it when we're done for the timezone and daylight savings arguments. Note that the timezone is evaluated for each date because countries occasionally change their official timezones. Assuming that &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; corrects for these changes, this routine will also be correct.</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; 関数は、同じキャッシュを使用して実装されています。私たちはGMT時刻を変換していると仮定し、タイムゾーンと夏時間の引数の処理が終わったらそれをあやします。国によっては公式のタイムゾーンが変更される場合があるため、タイムゾーンは日付ごとに評価されることに注意してください。 &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; がこれらの変更を修正すると想定すると、このルーチンも修正されます。</target>
        </trans-unit>
        <trans-unit id="7969d03acba8ec22322bc524970a2e67bf531eeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument should be equal to the &lt;code&gt;how&lt;/code&gt; value when the &lt;code&gt;SV&lt;/code&gt; was initially made magical.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数はに等しくなければならない &lt;code&gt;how&lt;/code&gt; 時に値 &lt;code&gt;SV&lt;/code&gt; が最初に魔法を行いました。</target>
        </trans-unit>
        <trans-unit id="e605c3e8404b3b1569b2a8f6ee2a28bb09c8e25f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; template to &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; will render EBCDIC data in EBCDIC characters equivalent to their ASCII counterparts. For example, the following will print &quot;Yes indeed\n&quot; on either an ASCII or EBCDIC computer:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;u&lt;/code&gt; テンプレートは、EBCDICデータを、対応するASCIIと同等のEBCDIC文字でレンダリングします。たとえば、次の例では、ASCIIまたはEBCDICコンピュータで「はい\ n」と出力されます。</target>
        </trans-unit>
        <trans-unit id="6a1909f52d28496be25968c9641232bd70a050cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;up&lt;/code&gt; method increases the semaphore's count by the number specified (which must be an integer &amp;gt;= 1), or by one if no number is specified.</source>
          <target state="translated">&lt;code&gt;up&lt;/code&gt; 方法は、数が指定されていない場合、または1つによって（整数&amp;gt; = 1でなければならない）指定された数によってセマフォの数を増加させます。</target>
        </trans-unit>
        <trans-unit id="3bfafbe930277e35ea02604239f7cd015c3326fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;upgrade&lt;/code&gt; command first runs an &lt;code&gt;r&lt;/code&gt; command with the given arguments and then installs the newest versions of all modules that were listed by that.</source>
          <target state="translated">&lt;code&gt;upgrade&lt;/code&gt; コマンドは、最初の実行 &lt;code&gt;r&lt;/code&gt; 指定された引数を指定してコマンドをし、そのことにより、リストされたすべてのモジュールの最新バージョンをインストールします。</target>
        </trans-unit>
        <trans-unit id="ed2a8ecd68dda5352fc1303d01e5cd582863eba1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;urllist&lt;/code&gt; parameter of the configuration table contains a list of URLs used for downloading. If the list contains any &lt;code&gt;file&lt;/code&gt; URLs, CPAN always tries there first. This feature is disabled for index files. So the recommendation for the owner of a CD-ROM with CPAN contents is: include your local, possibly outdated CD-ROM as a &lt;code&gt;file&lt;/code&gt; URL at the end of urllist, e.g.</source>
          <target state="translated">設定テーブルの &lt;code&gt;urllist&lt;/code&gt; パラメータには、ダウンロードに使用されるURLのリストが含まれています。リストに &lt;code&gt;file&lt;/code&gt; URL が含まれている場合、CPANは常に最初にそのURLを試みます。この機能は、インデックスファイルでは無効です。したがって、CPANの内容を含むCD-ROMの所有者に対する推奨は、次のとおりです。urllistの最後に、ローカルの、おそらく古いCD-ROMを &lt;code&gt;file&lt;/code&gt; URL として含めます。</target>
        </trans-unit>
        <trans-unit id="468aa2690cfac4f39947fa49f9490387f38518f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; and &lt;code&gt;utf8::upgrade()&lt;/code&gt; aren't needed if the argument is above 0xFF, so the above could have been written as</source>
          <target state="translated">&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; と &lt;code&gt;utf8::upgrade()&lt;/code&gt; の引数が0xFF以上であれば、上記のように書かれていることができるように、必要とされていません</target>
        </trans-unit>
        <trans-unit id="0a270d12703e96872d5ec49cc2bfa5c1ab0eb455" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; pragma (see &lt;a href=&quot;perlmod#vars&quot;&gt;vars in perlmod&lt;/a&gt;) may be used in such situations as an alternative to explicitly qualifying all globals with the package namespace. Variables pre-declared with this pragma will be visible to any autoloaded routines (but will not be invisible outside the package, unfortunately).</source>
          <target state="translated">&lt;code&gt;vars&lt;/code&gt; はプラグマは、（参照&lt;a href=&quot;perlmod#vars&quot;&gt;perlmodを中VARSを&lt;/a&gt;）明示的にパッケージの名前空間とすべてのグローバルを適格に代わるものとして、このような状況で使用することができます。このプラグマで事前に宣言された変数は、オートロードされたルーチンから見えるようになります（残念ながら、パッケージの外では見えなくなります）。</target>
        </trans-unit>
        <trans-unit id="8a981f510b5bc1a31c1fe6f83ee184b884a41beb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbose&lt;/code&gt; and &lt;code&gt;inc&lt;/code&gt; attributes influence the behavior of this search; notably, &lt;code&gt;inc&lt;/code&gt; , if true, adds @INC</source>
          <target state="translated">&lt;code&gt;verbose&lt;/code&gt; および &lt;code&gt;inc&lt;/code&gt; の属性は、この検索の動作に影響を与えます。特に、 &lt;code&gt;inc&lt;/code&gt; がtrueの場合、@ INCが追加されます</target>
        </trans-unit>
        <trans-unit id="42e9db15fd405837558fc69a3922cf4c07b0d66c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; return type for this function tells the &lt;b&gt;xsubpp&lt;/b&gt; compiler that the RETVAL variable is not needed or used and that it should not be created. In most scenarios the void return type should be used with the PPCODE: directive.</source>
          <target state="translated">この関数の &lt;code&gt;void&lt;/code&gt; 戻り型は、RETVAL変数が不要または使用されておらず、作成されるべきではないことを&lt;b&gt;xsubpp&lt;/b&gt;コンパイラーに通知します。ほとんどのシナリオでは、PPCODE：ディレクティブでvoid戻り型を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0803129a0bffe56a31c42b951ef5b3d0fb1885a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wanted()&lt;/code&gt; function does whatever verifications you want on each file and directory. Note that despite its name, the &lt;code&gt;wanted()&lt;/code&gt; function is a generic callback function, and does &lt;b&gt;not&lt;/b&gt; tell File::Find if a file is &quot;wanted&quot; or not. In fact, its return value is ignored.</source>
          <target state="translated">&lt;code&gt;wanted()&lt;/code&gt; 関数は、各ファイルおよびディレクトリ上の好きな検証ません。その名前にもかかわらず、 &lt;code&gt;wanted()&lt;/code&gt; 関数は一般的なコールバック関数であり、ファイルが「必要」かどうかをFile :: Findに通知し&lt;b&gt;ない&lt;/b&gt;ことに注意してください。実際、その戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="31b1fe49028e0123810b9a17034fff70bf1be6cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;warnings&lt;/code&gt; pragma gives control over which warnings are enabled in which parts of a Perl program. It's a more flexible alternative for both the command line flag &lt;b&gt;-w&lt;/b&gt; and the equivalent Perl variable, &lt;code&gt;$^W&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; プラグマは、警告はPerlプログラムのどの部分で有効になっている、その上に制御できます。これは、コマンドラインフラグ&lt;b&gt;-w&lt;/b&gt;と同等のPerl変数 &lt;code&gt;$^W&lt;/code&gt; 両方に対して、より柔軟な代替手段です。</target>
        </trans-unit>
        <trans-unit id="4d599e8a7252be8237239500a33b9cae49be5da2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;warnings&lt;/code&gt; pragma provides a number of functions that are useful for module authors. These are used when you want to report a module-specific warning to a calling module has enabled warnings via the &lt;code&gt;warnings&lt;/code&gt; pragma.</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; プラグマはモジュールの作者に役立つ多くの機能を提供します。これらは、モジュール固有の警告を呼び出しモジュールに報告したい場合に使用され、warning プラグマを介して &lt;code&gt;warnings&lt;/code&gt; 有効にします。</target>
        </trans-unit>
        <trans-unit id="eaaf2c2b19accccb92902e0f89453388a8136ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;when&lt;/code&gt; modifier is an experimental feature that first appeared in Perl 5.14. To use it, you should include a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.14&lt;/code&gt; declaration. (Technically, it requires only the &lt;code&gt;switch&lt;/code&gt; feature, but that aspect of it was not available before 5.14.) Operative only from within a &lt;code&gt;foreach&lt;/code&gt; loop or a &lt;code&gt;given&lt;/code&gt; block, it executes the statement only if the smartmatch &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; is true. If the statement executes, it is followed by a &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; from inside a &lt;code&gt;foreach&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; from inside a &lt;code&gt;given&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; 修飾子は最初のPerl 5.14に登場した実験的な機能です。これを使用するには、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.14&lt;/code&gt; 宣言を含める必要があります。 （技術的には、 &lt;code&gt;switch&lt;/code&gt; 機能のみが必要ですが、5.14より前のバージョンでは使用できませんでした。） &lt;code&gt;foreach&lt;/code&gt; ループまたは &lt;code&gt;given&lt;/code&gt; ブロック内からのみ操作可能で、smartmatch &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; がtrueの場合にのみステートメントを実行します。ステートメントが実行されると、 &lt;code&gt;foreach&lt;/code&gt; 内からの &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; と、 &lt;code&gt;given&lt;/code&gt; 内からの &lt;code&gt;break&lt;/code&gt; が続きます。</target>
        </trans-unit>
        <trans-unit id="e19be3044d8f18bead09bab3403090b34e1156d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt; modifiers have the usual &quot;&lt;code&gt;while&lt;/code&gt; loop&quot; semantics (conditional evaluated first), except when applied to a &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;-BLOCK (or to the Perl4 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;-SUBROUTINE statement), in which case the block executes once before the conditional is evaluated.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; と &lt;code&gt;until&lt;/code&gt; 改質剤は、通常、「持って &lt;code&gt;while&lt;/code&gt; に適用される場合を除いて、ループ」セマンティクス（条件が最初に評価する） &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; -ブロック（またはのPerl4には &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; -SUBROUTINE文）、ケースのブロック実行条件が評価される前に一度。</target>
        </trans-unit>
        <trans-unit id="3d5b06f931731acb22dad061fcd52f2783c874b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; statement executes the block as long as the expression is &lt;a href=&quot;#Truth-and-Falsehood&quot;&gt;true&lt;/a&gt;. The &lt;code&gt;until&lt;/code&gt; statement executes the block as long as the expression is false. The LABEL is optional, and if present, consists of an identifier followed by a colon. The LABEL identifies the loop for the loop control statements &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;. If the LABEL is omitted, the loop control statement refers to the innermost enclosing loop. This may include dynamically looking back your call-stack at run time to find the LABEL. Such desperate behavior triggers a warning if you use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; flag.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; 文は長い式があるとして、ブロックを実行し&lt;a href=&quot;#Truth-and-Falsehood&quot;&gt;、真&lt;/a&gt;。 &lt;code&gt;until&lt;/code&gt; 文は、長い式が偽であるとして、ブロックを実行します。 LABELはオプションであり、存在する場合は、識別子の後にコロンが続きます。 LABELは、ループ制御ステートメント &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; のループを識別します。 LABELが省略されている場合、ループ制御ステートメントは最も内側の囲みループを参照します。これには、実行時にコールスタックを動的に調べて、LABELを見つけることが含まれます。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマまたは&lt;b&gt;-w&lt;/b&gt;フラグを使用すると、このような絶望的な動作により警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="42f557fbb89c75fd2ab740d93d25721ccbf0fda2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; function allows another thread to take control of the CPU. The exact results are implementation-dependent.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 関数は、別のスレッドがCPUの制御を取ることができます。正確な結果は実装に依存します。</target>
        </trans-unit>
        <trans-unit id="246e63b2eb0074027eaf6b6fe6bf0995cbbb987b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators return the last value evaluated (unlike C's &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, which return 0 or 1). Thus, a reasonably portable way to find out the home directory might be:</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt; 、 &lt;code&gt;//&lt;/code&gt; および &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 演算子は、最後に評価された値を返します（0または1を返すCの &lt;code&gt;||&lt;/code&gt; および &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; とは異なります）。したがって、ホームディレクトリを見つけるための合理的に移植可能な方法は次のようになります。</target>
        </trans-unit>
        <trans-unit id="11f57b3d94eabb5c19fb9360ab6afe8316dfa0a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~~&lt;/code&gt; operator compares its operands &quot;polymorphically&quot;, determining how to compare them according to their actual types (numeric, string, array, hash, etc.) Like the equality operators with which it shares the same precedence, &lt;code&gt;~~&lt;/code&gt; returns 1 for true and &lt;code&gt;&quot;&quot;&lt;/code&gt; for false. It is often best read aloud as &quot;in&quot;, &quot;inside of&quot;, or &quot;is contained in&quot;, because the left operand is often looked for</source>
          <target state="translated">&lt;code&gt;~~&lt;/code&gt; 演算子は、同じ優先度を共有する等価演算子と同様に実際のタイプ（数値、文字列、配列、ハッシュ、等）に応じてそれらを比較する方法を決定する、「多形」は、そのオペランドを比較 &lt;code&gt;~~&lt;/code&gt; ためのリターン1 trueおよびfalseの場合は &lt;code&gt;&quot;&quot;&lt;/code&gt; 。多くの場合、左のオペランドが検索されるため、「in」、「inside of」、または「is contains in」と読み上げるのが最適です。</target>
        </trans-unit>
        <trans-unit id="ef321bd7088ac81817f2231db61c1174692aaac0" translate="yes" xml:space="preserve">
          <source>The ADLER32 checksum field must be present.</source>
          <target state="translated">ADLER32 チェックサムフィールドが存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="9c4519701849f27da68be727b95e63207f2a9abf" translate="yes" xml:space="preserve">
          <source>The AIX tar does not fill all unused space in the tar archive with 0x00. This sometimes leads to warning messages from &lt;code&gt;Archive::Tar&lt;/code&gt; .</source>
          <target state="translated">AIX tarは、tarアーカイブ内のすべての未使用スペースを0x00で埋めるわけではありません。これにより、 &lt;code&gt;Archive::Tar&lt;/code&gt; からの警告メッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="b5549afa573e8454744ea43299cd8d8505147fcd" translate="yes" xml:space="preserve">
          <source>The ALIAS: Keyword</source>
          <target state="translated">ザ・アライアス:キーワード</target>
        </trans-unit>
        <trans-unit id="2ce9242faeeab07eef2f7afd701bea6933de8059" translate="yes" xml:space="preserve">
          <source>The ALIAS: keyword allows an XSUB to have two or more unique Perl names and to know which of those names was used when it was invoked. The Perl names may be fully-qualified with package names. Each alias is given an index. The compiler will setup a variable called &lt;code&gt;ix&lt;/code&gt; which contain the index of the alias which was used. When the XSUB is called with its declared name &lt;code&gt;ix&lt;/code&gt; will be 0.</source>
          <target state="translated">ALIAS：キーワードを使用すると、XSUBが2つ以上の固有のPerl名を持ち、それらが呼び出されたときに使用された名前を知ることができます。Perl名はパッケージ名で完全に修飾されている場合があります。各エイリアスにはインデックスが与えられます。コンパイラーは、使用されたエイリアスのインデックスを含む &lt;code&gt;ix&lt;/code&gt; と呼ばれる変数をセットアップします。XSUBが宣言された名前で呼び出されると、 &lt;code&gt;ix&lt;/code&gt; は0になります。</target>
        </trans-unit>
        <trans-unit id="15fd0430aabb02304def7c36146cf671599d3942" translate="yes" xml:space="preserve">
          <source>The API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="9ed04c99d7b2c6a9ba47b9e4b73c73bb3ccc347c" translate="yes" xml:space="preserve">
          <source>The API was changed in the 2.0 branch. For a time, &lt;code&gt;mkpath&lt;/code&gt; and &lt;code&gt;rmtree&lt;/code&gt; tried, unsuccessfully, to deal with the two different calling mechanisms. This approach was considered a failure.</source>
          <target state="translated">APIは2.0ブランチで変更されました。しばらくの間、 &lt;code&gt;mkpath&lt;/code&gt; と &lt;code&gt;rmtree&lt;/code&gt; は、2つの異なる呼び出しメカニズムを処理しようとしましたが、失敗しました。このアプローチは失敗と見なされました。</target>
        </trans-unit>
        <trans-unit id="009ead0f6ffd2c056d27d3bfda98818a54d2faea" translate="yes" xml:space="preserve">
          <source>The ASCII region (0x00-0x7f) is preserved for all encodings, even though this conflicts with mappings by the Unicode Consortium.</source>
          <target state="translated">ASCII 領域 (0x00-0x7f)は、Unicode コンソーシアムによるマッピングと競合しますが、すべてのエンコーディングで保持されます。</target>
        </trans-unit>
        <trans-unit id="b3c4e287eeab5aae5482e7df8b6e409cada7c372" translate="yes" xml:space="preserve">
          <source>The ASCII/Latin-1/Unicode character with that number. A leading &quot;0x&quot; means that</source>
          <target state="translated">その番号を持つASCII/Latin-1/Unicode文字。先頭の「0x」は</target>
        </trans-unit>
        <trans-unit id="e2afefe4f37ea14f731718bb07a4d6306f1639c5" translate="yes" xml:space="preserve">
          <source>The AUTOLOAD method, discussed in &lt;a href=&quot;perlsub#Autoloading&quot;&gt;Autoloading in perlsub&lt;/a&gt; lets you capture calls to undefined functions and methods.</source>
          <target state="translated">&lt;a href=&quot;perlsub#Autoloading&quot;&gt;perlsubのオートロードで&lt;/a&gt;説明されているAUTOLOADメソッドを使用すると、未定義の関数やメソッドへの呼び出しをキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="31231455a0cef5b5794db63f07a47d2f6efab12c" translate="yes" xml:space="preserve">
          <source>The ActiveState Pages, &lt;a href=&quot;http://www.activestate.com/&quot;&gt;http://www.activestate.com/&lt;/a&gt;</source>
          <target state="translated">ActiveState Pages、&lt;a href=&quot;http://www.activestate.com/&quot;&gt;http：&lt;/a&gt; //www.activestate.com/</target>
        </trans-unit>
        <trans-unit id="fbbc6fc0e5dd1ef33879bfc672f5e3e8813e4f97" translate="yes" xml:space="preserve">
          <source>The Adventures of Tom Bombadil</source>
          <target state="translated">トム・ボンバディルの冒険</target>
        </trans-unit>
        <trans-unit id="e2e0a5aea5199e87efc4db9939033262cf1e73b8" translate="yes" xml:space="preserve">
          <source>The Alignment Pit</source>
          <target state="translated">アライメントピット</target>
        </trans-unit>
        <trans-unit id="68a751b9c456def01d238b0c06471f4927931bb2" translate="yes" xml:space="preserve">
          <source>The American Standard Code for Information Interchange (ASCII or US-ASCII) is a set of integers running from 0 to 127 (decimal) that have standardized interpretations by the computers which use ASCII. For example, 65 means the letter &quot;A&quot;. The range 0..127 can be covered by setting the bits in a 7-bit binary digit, hence the set is sometimes referred to as &quot;7-bit ASCII&quot;. ASCII was described by the American National Standards Institute document ANSI X3.4-1986. It was also described by ISO 646:1991 (with localization for currency symbols). The full ASCII set is given in the table &lt;a href=&quot;#recipe-3&quot;&gt;below&lt;/a&gt; as the first 128 elements. Languages that can be written adequately with the characters in ASCII include English, Hawaiian, Indonesian, Swahili and some Native American languages.</source>
          <target state="translated">情報交換のためのアメリカ標準コード（ASCIIまたはUS-ASCII）は、ASCIIを使用するコンピューターによる標準化された解釈を持つ0から127（10進数）までの整数のセットです。たとえば、65は文字「A」を意味します。範囲0..127は、ビットを7ビットの2進数で設定することでカバーできます。したがって、このセットは「7ビットASCII」と呼ばれることもあります。 ASCIIは、米国規格協会の文書ANSI X3.4-1986で説明されています。 ISO 646：1991（通貨記号のローカライズあり）でも説明されています。完全なASCIIセットは、最初の128要素として&lt;a href=&quot;#recipe-3&quot;&gt;以下&lt;/a&gt;の表に示されています。 ASCIIの文字で適切に記述できる言語には、英語、ハワイ語、インドネシア語、スワヒリ語、および一部のネイティブアメリカン言語があります。</target>
        </trans-unit>
        <trans-unit id="f3ff218a8809c68d0eb083f2cf66b8207142d4f0" translate="yes" xml:space="preserve">
          <source>The American Standard Code for Information Interchange (a 7-bit character set adequate only for poorly representing English text). Often used loosely to describe the lowest 128 values of the various ISO-8859-X character sets, a bunch of mutually incompatible 8-bit codes best described as half ASCII. See also &lt;b&gt;Unicode&lt;/b&gt;.</source>
          <target state="translated">情報交換のためのアメリカ標準コード（英語のテキストの表現が不十分な場合にのみ適切な7ビット文字セット）。多くの場合、さまざまなISO-8859-X文字セットの最小128値を表すために緩く使用されます。相互に互換性のない一連の8ビットコードは、ハーフASCIIとして最もよく記述されます。&lt;b&gt;Unicode&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="fd1c7da39d90054f5c4c81dc1a1fa13bcbbe82e7" translate="yes" xml:space="preserve">
          <source>The Anatomy of an XSUB</source>
          <target state="translated">XSUBの解剖学</target>
        </trans-unit>
        <trans-unit id="0746d95bfde5c5ba18bf27b5d1463ad01ffdafa1" translate="yes" xml:space="preserve">
          <source>The Argument Stack</source>
          <target state="translated">引数スタック</target>
        </trans-unit>
        <trans-unit id="59f8369b68ee932dd97b5ec57202b3f3969c4a83" translate="yes" xml:space="preserve">
          <source>The Arrow Operator</source>
          <target state="translated">アローオペレーター</target>
        </trans-unit>
        <trans-unit id="e40e5d487b331e1f7f4c2477322a84662ea1dcde" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming</source>
          <target state="translated">コンピュータ・プログラミングの技術</target>
        </trans-unit>
        <trans-unit id="e6a71a9e8ae70e8f61fd0c5d80d8189dbf3cf681" translate="yes" xml:space="preserve">
          <source>The AutoSplit and &lt;b&gt;AutoLoader&lt;/b&gt; modules automate the creation of forward declarations. The AutoSplit module creates an 'index' file containing forward declarations of all the AutoSplit subroutines. When the AutoLoader module is 'use'd it loads these declarations into its callers package.</source>
          <target state="translated">自動splitと&lt;b&gt;オートローダー&lt;/b&gt;モジュールは、前方宣言の作成を自動化します。AutoSplitモジュールは、すべてのAutoSplitサブルーチンの前方宣言を含む「インデックス」ファイルを作成します。AutoLoaderモジュールが「使用」されると、これらの宣言がその呼び出し元パッケージにロードされます。</target>
        </trans-unit>
        <trans-unit id="547ca45f60093a7fb15745aaa1976d8399cc0918" translate="yes" xml:space="preserve">
          <source>The B-determined class of the OP, in all caps.</source>
          <target state="translated">オールキャップでOPのB判定クラス。</target>
        </trans-unit>
        <trans-unit id="fad9fed447a0e7963d894765232a4acc4b663de9" translate="yes" xml:space="preserve">
          <source>The B::Xref module is used to generate a cross reference listing of all definitions and uses of variables, subroutines and formats in a Perl program. It is implemented as a backend for the Perl compiler.</source>
          <target state="translated">B::Xrefモジュールは、Perlプログラム内の変数、サブルーチン、フォーマットのすべての定義と用途のクロスリファレンスリストを生成するために使用されます。これはPerlコンパイラのバックエンドとして実装されています。</target>
        </trans-unit>
        <trans-unit id="8026a52e63f99adbefc0e084618e1f479fd95572" translate="yes" xml:space="preserve">
          <source>The BITS mode (&quot;0&quot;) interprets the contents of</source>
          <target state="translated">BITSモード(&quot;0&quot;)は</target>
        </trans-unit>
        <trans-unit id="ba88dd1d9005852348725927325ddcf383a69f7c" translate="yes" xml:space="preserve">
          <source>The BLOCK construct can be used to emulate case structures.</source>
          <target state="translated">BLOCK構文は、ケース構造をエミュレートするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="6dfef44d3b22aafe27912b6966e2a486d9c0c14d" translate="yes" xml:space="preserve">
          <source>The BOOT: Keyword</source>
          <target state="translated">BOOT(ブーツ)とは キーワード</target>
        </trans-unit>
        <trans-unit id="d4a87a13d39a77a50a617134650c09dd8bdc8e3b" translate="yes" xml:space="preserve">
          <source>The BOOT: keyword is used to add code to the extension's bootstrap function. The bootstrap function is generated by the &lt;b&gt;xsubpp&lt;/b&gt; compiler and normally holds the statements necessary to register any XSUBs with Perl. With the BOOT: keyword the programmer can tell the compiler to add extra statements to the bootstrap function.</source>
          <target state="translated">BOOT：キーワードは、拡張機能のブートストラップ関数にコードを追加するために使用されます。ブートストラップ関数は、&lt;b&gt;xsubpp&lt;/b&gt;コンパイラーによって生成され、通常、すべてのXSUBをPerlに登録するために必要なステートメントを保持します。BOOT：キーワードを使用すると、プログラマーはコンパイラーに追加のステートメントをブートストラップ関数に追加するように指示できます。</target>
        </trans-unit>
        <trans-unit id="ad4a573da9545ff1a8eab5e0d4f5f08622036178" translate="yes" xml:space="preserve">
          <source>The BTREE file type optionally allows a single key to be associated with an arbitrary number of values. This option is enabled by setting the flags element of &lt;code&gt;$DB_BTREE&lt;/code&gt; to R_DUP when creating the database.</source>
          <target state="translated">BTREEファイルタイプでは、オプションで単一のキーを任意の数の値に関連付けることができます。このオプションを有効にするには、データベースの作成時に &lt;code&gt;$DB_BTREE&lt;/code&gt; フラグ要素をR_DUPに設定します。</target>
        </trans-unit>
        <trans-unit id="4a8451f6eedb6a6056c8ac828a203a8cf8bdc79c" translate="yes" xml:space="preserve">
          <source>The BTREE interface has a feature which allows partial keys to be matched. This functionality is</source>
          <target state="translated">BTREE インターフェースには、部分的なキーのマッチングを可能にする機能があります。この機能は</target>
        </trans-unit>
        <trans-unit id="19350bba9c33f125fd021dceab5ff7633dce372c" translate="yes" xml:space="preserve">
          <source>The BUILD and INSTALL steps are identical to those for Unix. Some modules generate Makefiles that work better with GNU make, which is available from &lt;a href=&quot;http://www.mks.com/s390/gnu/&quot;&gt;http://www.mks.com/s390/gnu/&lt;/a&gt;</source>
          <target state="translated">BUILDおよびINSTALLの手順は、Unixの手順と同じです。一部のモジュールは&lt;a href=&quot;http://www.mks.com/s390/gnu/&quot;&gt;http://www.mks.com/s390/gnu/&lt;/a&gt;から入手できるGNU makeでより適切に機能するMakefileを生成します</target>
        </trans-unit>
        <trans-unit id="06987733f8223bbe1dde5201da803a816622002c" translate="yes" xml:space="preserve">
          <source>The Basic Principle</source>
          <target state="translated">基本原理</target>
        </trans-unit>
        <trans-unit id="afdc8705dda034aabf31fc65386bddfb61c3e95b" translate="yes" xml:space="preserve">
          <source>The Benchmark module encapsulates a number of routines to help you figure out how long it takes to execute some code.</source>
          <target state="translated">Benchmarkモジュールは、いくつかのコードを実行するのにどれくらいの時間がかかるかを把握するのに役立つように、多くのルーチンをカプセル化しています。</target>
        </trans-unit>
        <trans-unit id="869885b765935f032e1e45165248683c4d860661" translate="yes" xml:space="preserve">
          <source>The Berkeley DB 4.1.25 has been tested with Tru64 V5.1A and found to work. The latest Berkeley DB can be found from &lt;a href=&quot;http://www.sleepycat.com&quot;&gt;http://www.sleepycat.com&lt;/a&gt;.</source>
          <target state="translated">Berkeley DB 4.1.25はTru64 V5.1Aでテストされ、動作することが確認されています。最新のBerkeley DBは&lt;a href=&quot;http://www.sleepycat.com&quot;&gt;http://www.sleepycat.com&lt;/a&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="1425da38b0881b20e7239aedd72aa0c3d5db10c1" translate="yes" xml:space="preserve">
          <source>The Bessel function of the first kind of the order zero.</source>
          <target state="translated">次数0の第1種のベッセル関数。</target>
        </trans-unit>
        <trans-unit id="95802efdaca31b27a14913bfe1089183b4ec8875" translate="yes" xml:space="preserve">
          <source>The C API for the backtrace is as follows:</source>
          <target state="translated">バックトレースのC APIは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="89f382052ffa523340ba739809ce6ebbf65c53dd" translate="yes" xml:space="preserve">
          <source>The C array of a padlist, containing the pads. Only subscript it with numbers &amp;gt;= 1, as the 0th entry is not guaranteed to remain usable.</source>
          <target state="translated">パッドを含むパッドリストのC配列。0番目のエントリが使用可能であることが保証されていないため、1以上の番号を添え字にしてください。</target>
        </trans-unit>
        <trans-unit id="9d9a695f29b97a18f6840062c9b13365fc424c17" translate="yes" xml:space="preserve">
          <source>The C array of pad entries.</source>
          <target state="translated">パッドエントリの C 配列です。</target>
        </trans-unit>
        <trans-unit id="82cdebaae9f3b94b2c40ce92be9ab7f40abcb4e4" translate="yes" xml:space="preserve">
          <source>The C array of pad names.</source>
          <target state="translated">パッド名のC配列。</target>
        </trans-unit>
        <trans-unit id="66ccfe4f23602b2282c83a4407f8d3eb55b4ce47" translate="yes" xml:space="preserve">
          <source>The C code asks for:</source>
          <target state="translated">Cコードが求めています。</target>
        </trans-unit>
        <trans-unit id="1755acfd3f32daf3e3ba7fab9fbb3582e6e7bc1c" translate="yes" xml:space="preserve">
          <source>The C function required to call</source>
          <target state="translated">を呼び出すのに必要なC関数</target>
        </trans-unit>
        <trans-unit id="593e19336c2ea1e5b6f3c47a320c97c9b260fd7c" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;, wrapped if necessary, to ensure that it will return the length of the string written to the buffer. Only rare pre-ANSI systems need the wrapper function - usually this is a direct call to &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Cライブラリ &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; は、必要に応じてラップされ、バッファに書き込まれた文字列の長さを確実に返すようにします。まれなANSI以前のシステムでのみラッパー関数が必要です。通常、これは &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; への直接の呼び出しです。</target>
        </trans-unit>
        <trans-unit id="9f593f0f7e2f42e16decd49842d3eba832ba134e" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;snprintf&lt;/code&gt; functionality, if available and standards-compliant (uses &lt;code&gt;vsnprintf&lt;/code&gt; , actually). However, if the &lt;code&gt;vsnprintf&lt;/code&gt; is not available, will unfortunately use the unsafe &lt;code&gt;vsprintf&lt;/code&gt; which can overrun the buffer (there is an overrun check, but that may be too late). Consider using &lt;code&gt;sv_vcatpvf&lt;/code&gt; instead, or getting &lt;code&gt;vsnprintf&lt;/code&gt; .</source>
          <target state="translated">Cライブラリの &lt;code&gt;snprintf&lt;/code&gt; 機能（利用可能で標準に準拠している場合）（実際には &lt;code&gt;vsnprintf&lt;/code&gt; を使用）。ただし、 &lt;code&gt;vsnprintf&lt;/code&gt; が使用できない場合、残念ながら、バッファーをオーバーランする可能 &lt;code&gt;vsprintf&lt;/code&gt; ある安全でないvsprintfを使用します（オーバーランチェックがありますが、それでは遅すぎる場合があります）。代わりに &lt;code&gt;sv_vcatpvf&lt;/code&gt; を使用するか、 &lt;code&gt;vsnprintf&lt;/code&gt; を取得することを検討してください。</target>
        </trans-unit>
        <trans-unit id="661ddafc70911db04cf396a10417bb22f9c9013f" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;strlcat&lt;/code&gt; if available, or a Perl implementation of it. This operates on C &lt;code&gt;NUL&lt;/code&gt; -terminated strings.</source>
          <target state="translated">Cライブラリ &lt;code&gt;strlcat&lt;/code&gt; (利用可能な場合）、またはそのPerl実装。これは、C &lt;code&gt;NUL&lt;/code&gt; で終了する文字列で動作します。</target>
        </trans-unit>
        <trans-unit id="8f1fcfbd88c7e47c13102ec9e5c6df21938df7a0" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;strlcpy&lt;/code&gt; if available, or a Perl implementation of it. This operates on C &lt;code&gt;NUL&lt;/code&gt; -terminated strings.</source>
          <target state="translated">Cライブラリ &lt;code&gt;strlcpy&lt;/code&gt; (利用可能な場合）、またはPerl実装。これは、C &lt;code&gt;NUL&lt;/code&gt; で終了する文字列で動作します。</target>
        </trans-unit>
        <trans-unit id="6e368fd4b911113fa139d4b324c13f128de90489" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;vsnprintf&lt;/code&gt; if available and standards-compliant. However, if if the &lt;code&gt;vsnprintf&lt;/code&gt; is not available, will unfortunately use the unsafe &lt;code&gt;vsprintf&lt;/code&gt; which can overrun the buffer (there is an overrun check, but that may be too late). Consider using &lt;code&gt;sv_vcatpvf&lt;/code&gt; instead, or getting &lt;code&gt;vsnprintf&lt;/code&gt; .</source>
          <target state="translated">Cライブラリ &lt;code&gt;vsnprintf&lt;/code&gt; が利用可能で、標準に準拠している場合。ただし、 &lt;code&gt;vsnprintf&lt;/code&gt; が使用できない場合、残念ながら、バッファーをオーバーランする可能性がある安全でない &lt;code&gt;vsprintf&lt;/code&gt; を使用します（オーバーランチェックがありますが、それでは遅すぎる場合があります）。代わりに &lt;code&gt;sv_vcatpvf&lt;/code&gt; を使用するか、 &lt;code&gt;vsnprintf&lt;/code&gt; を取得することを検討してください。</target>
        </trans-unit>
        <trans-unit id="5183e1e6aa36fa93c903a6e7e44a0cb72c213922" translate="yes" xml:space="preserve">
          <source>The C library routines listed in the table below return values based on the current locale. Use the entries in the final column for that functionality. The other two columns always assume a POSIX (or C) locale. The entries in the ASCII column are only meaningful for ASCII inputs, returning FALSE for anything else. Use these only when you &lt;b&gt;know&lt;/b&gt; that is what you want. The entries in the Latin1 column assume that the non-ASCII 8-bit characters are as Unicode defines, them, the same as ISO-8859-1, often called Latin 1.</source>
          <target state="translated">以下の表にリストされているCライブラリルーチンは、現在のロケールに基づいて値を返します。その機能の最後の列のエントリを使用します。他の2つの列は、常にPOSIX（またはC）ロケールを想定しています。ASCII列のエントリはASCII入力に対してのみ意味があり、それ以外の場合はFALSEを返します。あなたはこれらのときにのみ使用してください&lt;b&gt;知っている&lt;/b&gt;それはあなたが望むものです。Latin1列のエントリは、ASCII以外の8ビット文字がUnicodeで定義されているとおりであり、ISO-8859-1と同じで、Latin 1と呼ばれることを前提としています。</target>
        </trans-unit>
        <trans-unit id="a28b4e51a54be7620c06b31ca4a6442c8879a612" translate="yes" xml:space="preserve">
          <source>The C pre-processor macro to use in the &lt;code&gt;#ifdef&lt;/code&gt; . This defaults to the</source>
          <target state="translated">&lt;code&gt;#ifdef&lt;/code&gt; で使用するCプリプロセッサマクロ。これはデフォルトで</target>
        </trans-unit>
        <trans-unit id="e289a8cac4c6625ed2e896b05f021cd0b663f2cc" translate="yes" xml:space="preserve">
          <source>The C signature of the corresponding function should be</source>
          <target state="translated">対応する関数のCシグネチャは</target>
        </trans-unit>
        <trans-unit id="434fa80b2289a7e8297f9f4dbd629257d6d523b1" translate="yes" xml:space="preserve">
          <source>The C source code and header files mostly live in the root of the source tree. There are a few platform-specific directories which contain C code. In addition, some of the modules shipped with Perl include C or XS code.</source>
          <target state="translated">C のソースコードとヘッダファイルは、ほとんどがソースツリーのルートにあります。C のコードを含むいくつかのプラットフォーム固有のディレクトリがあります。さらに、Perl に同梱されているモジュールの中には、C や XS のコードが含まれているものもあります。</target>
        </trans-unit>
        <trans-unit id="128905b571f66231b1c910d09a2688b981aad8fb" translate="yes" xml:space="preserve">
          <source>The C standard defines the &lt;code&gt;LC_MONETARY&lt;/code&gt; category, but not a function that is affected by its contents. (Those with experience of standards committees will recognize that the working group decided to punt on the issue.) Consequently, Perl essentially takes no notice of it. If you really want to use &lt;code&gt;LC_MONETARY&lt;/code&gt; , you can query its contents--see &lt;a href=&quot;#The-localeconv-function&quot;&gt;The localeconv function&lt;/a&gt;--and use the information that it returns in your application's own formatting of currency amounts. However, you may well find that the information, voluminous and complex though it may be, still does not quite meet your requirements: currency formatting is a hard nut to crack.</source>
          <target state="translated">C標準は &lt;code&gt;LC_MONETARY&lt;/code&gt; カテゴリーを定義していますが、その内容によって影響を受ける関数は定義していません。 （標準化委員会の経験を持つ人々は、ワーキンググループがこの問題をパントすることを決定したことを認めるでしょう。）その結果、Perlは基本的にそれに気づきません。 &lt;code&gt;LC_MONETARY&lt;/code&gt; を本当に使用したい場合は、その内容を照会して&lt;a href=&quot;#The-localeconv-function&quot;&gt;（localeconv関数を&lt;/a&gt;参照）、それが返す情報をアプリケーション独自の通貨の形式で使用できます。ただし、膨大で複雑な情報であっても、要件を十分に満たしていない場合があります。通貨の書式設定は、簡単に解読できません。</target>
        </trans-unit>
        <trans-unit id="9998f45e4c7233897bbe30273f117556d7539b74" translate="yes" xml:space="preserve">
          <source>The C structures used by Perl's internals to hold SV and OP information (PVIV, AV, HV, ..., OP, SVOP, UNOP, ...) are modelled on a class hierarchy and the &lt;code&gt;B&lt;/code&gt; module gives access to them via a true object hierarchy. Structure fields which point to other objects (whether types of SV or types of OP) are represented by the &lt;code&gt;B&lt;/code&gt; module as Perl objects of the appropriate class.</source>
          <target state="translated">Perlの内部でSVおよびOP情報（PVIV、AV、HV、...、OP、SVOP、UNOPなど）を保持するために使用されるC構造は、クラス階層でモデル化されており、 &lt;code&gt;B&lt;/code&gt; モジュールは、真のオブジェクト階層。他のオブジェクト（SVのタイプでもOPのタイプでも）を指す構造体フィールドは、適切なクラスのPerlオブジェクトとして &lt;code&gt;B&lt;/code&gt; モジュールによって表されます。</target>
        </trans-unit>
        <trans-unit id="e52cd1f128c9fdf3705990415e2a1725ce8c0daa" translate="yes" xml:space="preserve">
          <source>The C style for loop is rarely needed in Perl since Perl provides the more friendly list scanning &lt;code&gt;foreach&lt;/code&gt; loop.</source>
          <target state="translated">Perlは &lt;code&gt;foreach&lt;/code&gt; ループをスキャンするよりフレンドリーなリストを提供するため、CスタイルのforループがPerlで必要になることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="41766adf1b20a48cee72fe6667e88ebc85cdc6f9" translate="yes" xml:space="preserve">
          <source>The C variable which corresponds to Perl's $^W warning variable.</source>
          <target state="translated">Perlの$^W警告変数に対応するC変数。</target>
        </trans-unit>
        <trans-unit id="dfa119354e27d0075a95b6198dbb34324da3f2fb" translate="yes" xml:space="preserve">
          <source>The C-level function pointer is returned in</source>
          <target state="translated">Cレベル関数ポインタは</target>
        </trans-unit>
        <trans-unit id="230e53618d509a745420dd7ed8f916298cb8a1f6" translate="yes" xml:space="preserve">
          <source>The C-level function pointer is supplied in</source>
          <target state="translated">Cレベル関数ポインタは</target>
        </trans-unit>
        <trans-unit id="1e1b0aeffa7ba38a3388c23b72c5a0f47c58d0b1" translate="yes" xml:space="preserve">
          <source>The C3 MRO</source>
          <target state="translated">C3 MRO</target>
        </trans-unit>
        <trans-unit id="0890f76e297e8a69278390e1b8b2216c138a276e" translate="yes" xml:space="preserve">
          <source>The C3 order also lets you call methods in sibling classes with the &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; pseudo-class. See the &lt;a href=&quot;mro&quot;&gt;mro&lt;/a&gt; documentation for more details on this feature.</source>
          <target state="translated">C3の順序では、兄弟クラスのメソッドを &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 疑似クラスで呼び出すこともできます。この機能の詳細については、&lt;a href=&quot;mro&quot;&gt;mroの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d0ff2a087cbd21d4354452514069e5aa62203f63" translate="yes" xml:space="preserve">
          <source>The CASE: Keyword</source>
          <target state="translated">CASE:キーワード</target>
        </trans-unit>
        <trans-unit id="c34759e310ffd05ba41a3c6d9e4717368401e66b" translate="yes" xml:space="preserve">
          <source>The CASE: keyword allows an XSUB to have multiple distinct parts with each part acting as a virtual XSUB. CASE: is greedy and if it is used then all other XS keywords must be contained within a CASE:. This means nothing may precede the first CASE: in the XSUB and anything following the last CASE: is included in that case.</source>
          <target state="translated">CASE:キーワードを使用すると、XSUB は複数の異なる部分を持つことができ、それぞれの部分が仮想XSUBとして動作します。CASE:は欲張りなので、もしCASE:が使われた場合、他の全てのXSキーワードはCASE:の中に含まれなければなりません。これは、XSUBの最初のCASE:より前には何も入っていないことを意味し、最後のCASE:より後のものはそのケースに含まれます。</target>
        </trans-unit>
        <trans-unit id="fae674d05cdd7c7c93ed58176b2c5091862f5184" translate="yes" xml:space="preserve">
          <source>The CLEANUP: Keyword</source>
          <target state="translated">ザ・クリーンアップ:キーワード</target>
        </trans-unit>
        <trans-unit id="241f3ed896c795a2f153c574bd096719fc549cce" translate="yes" xml:space="preserve">
          <source>The CODE: Keyword</source>
          <target state="translated">コーデのこと。キーワード</target>
        </trans-unit>
        <trans-unit id="75462a30b7eda0a1256e9e78d46c9b66a39ca496" translate="yes" xml:space="preserve">
          <source>The CODEHASHREF is a reference to a hash containing names as keys and either a string to eval or a code reference for each value. For each (KEY, VALUE) pair in the CODEHASHREF, this routine will call</source>
          <target state="translated">CODEHASHREFは、名前をキーとして含むハッシュへの参照であり、evalするための文字列か、各値のコード参照です。CODEHASHREF の各 (KEY,VALUE)ペアに対して、このルーチンは</target>
        </trans-unit>
        <trans-unit id="2d375a6aa9b8906ba2ffceffe206a677c43a7349" translate="yes" xml:space="preserve">
          <source>The COP's hint flags, rendered with abbreviated names if possible. An empty string if this is not a COP. Here are the symbols used:</source>
          <target state="translated">COPのヒントフラグ。可能であれば省略された名前で表示されます。COPでない場合は空文字列。使用されるシンボルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="1edd5ccb6f317807268c4d710f3579aef8a9d833" translate="yes" xml:space="preserve">
          <source>The COUNT can be zero or negative, see timethis().</source>
          <target state="translated">COUNT は、0 または負の値を指定することができます。</target>
        </trans-unit>
        <trans-unit id="d7abd867e28669bc36a83d10cc2868dd307bb204" translate="yes" xml:space="preserve">
          <source>The COUNT can be zero or negative: this means the</source>
          <target state="translated">COUNTはゼロまたは負の値をとることができます。</target>
        </trans-unit>
        <trans-unit id="7180933318067029f5e634690ac1d29792da70f9" translate="yes" xml:space="preserve">
          <source>The CPAN indexes are usually rebuilt once or twice per hour, but the typical CPAN mirror mirrors only once or twice per day. Depending on the quality of your mirror and your desire to be on the bleeding edge, you may want to set the following value to more or less than one day (which is the default). It determines after how many days CPAN.pm downloads new indexes.</source>
          <target state="translated">CPAN インデックスは通常、1 時間に 1 回または 2 回再構築されますが、一般的な CPAN ミラーは 1 日に 1 回または 2 回しかミラーしません。ミラーの質や、最先端を行きたいかどうかによっては、以下の値を1日以上、または1日未満に設定したい場合があります (これがデフォルトです)。これは CPAN.pm が新しいインデックスを何日後にダウンロードするかを決定します。</target>
        </trans-unit>
        <trans-unit id="377d91db5cfe6b5bd06da1ed353fc316766187b9" translate="yes" xml:space="preserve">
          <source>The CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Term::ExtendedColor&quot;&gt;Term::ExtendedColor&lt;/a&gt; provides a different and more comprehensive interface for 256-color emulators that may be more convenient. The CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Console::ANSI&quot;&gt;Win32::Console::ANSI&lt;/a&gt; provides ANSI color (and other escape sequence) support in the Win32 Console environment.</source>
          <target state="translated">CPANモジュールの&lt;a href=&quot;http://search.cpan.org/perldoc/Term::ExtendedColor&quot;&gt;Term :: ExtendedColor&lt;/a&gt;は、より便利な256色エミュレーター向けに、異なる、より包括的なインターフェースを提供します。CPANモジュール&lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Console::ANSI&quot;&gt;Win32 :: Console :: ANSI&lt;/a&gt;は、Win32コンソール環境でANSIカラー（およびその他のエスケープシーケンス）サポートを提供します。</target>
        </trans-unit>
        <trans-unit id="d6b4425af9b4e8fb2b471139f3e26220141f7951" translate="yes" xml:space="preserve">
          <source>The CPAN module also supports named and versioned</source>
          <target state="translated">CPANモジュールは、名前付きおよびバージョン付きの</target>
        </trans-unit>
        <trans-unit id="0c026574d1a86a555bc568a8cb4ff270316b96bc" translate="yes" xml:space="preserve">
          <source>The CPAN module automates or at least simplifies the make and install of perl modules and extensions. It includes some primitive searching capabilities and knows how to use LWP, HTTP::Tiny, Net::FTP and certain external download clients to fetch distributions from the net.</source>
          <target state="translated">CPAN モジュールは、Perl モジュールと拡張機能の作成とインストールを自動化するか、少なくとも簡単にします。いくつかのプリミティブな検索機能を含み、LWP、HTTP::Tiny、Net::FTP、そしてネットからディストリビューションを取得するための特定の外部ダウンロードクライアントの使用方法を知っています。</target>
        </trans-unit>
        <trans-unit id="4e178ebb5191d2f8095d21912890034971c23f17" translate="yes" xml:space="preserve">
          <source>The CPAN module can detect when a module which you are trying to build depends on prerequisites. If this happens, it can build the prerequisites for you automatically ('follow'), ask you for confirmation ('ask'), or just ignore them ('ignore'). Choosing 'follow' also sets PERL_AUTOINSTALL and PERL_EXTUTILS_AUTOINSTALL for &quot;--defaultdeps&quot; if not already set.</source>
          <target state="translated">CPAN モジュールは、構築しようとしているモジュールが前提条件に依存していることを検出することができます。このような場合、自動的に前提条件を構築したり(「follow」)、確認を求めたり(「ask」)、無視したり(「ignore」)することができます。followを選択すると、PERL_AUTOINSTALLとPERL_EXTUTILS_AUTOINSTALLがまだ設定されていなければ、&quot;--defaultdeps &quot;にも設定されます。</target>
        </trans-unit>
        <trans-unit id="6c6573c37a2e4b0e2c1f6ecf5ee527de52c79b5e" translate="yes" xml:space="preserve">
          <source>The CPAN program is trying to depend on as little as possible so the user can use it in hostile environment. It works better the more goodies the environment provides. For example if you try in the CPAN shell</source>
          <target state="translated">CPANプログラムは、できるだけ依存しないようにしているので、敵対的な環境でも利用できるようになっています。環境が整っていればいるほど、より良く動作します。例えば、CPANシェルで以下のようにしてみてください。</target>
        </trans-unit>
        <trans-unit id="85d1aee245c3b6a287276d71fb8b02358e6086ca" translate="yes" xml:space="preserve">
          <source>The CPAN testers ( &lt;a href=&quot;http://testers.cpan.org/&quot;&gt;http://testers.cpan.org/&lt;/a&gt; ) are a group of volunteers who test CPAN modules on a variety of platforms.</source>
          <target state="translated">CPANテスター（&lt;a href=&quot;http://testers.cpan.org/&quot;&gt;http://testers.cpan.org/&lt;/a&gt;）は、さまざまなプラットフォームでCPANモジュールをテストするボランティアのグループです。</target>
        </trans-unit>
        <trans-unit id="e02636a6cb280626a26310497466ab4002dc994b" translate="yes" xml:space="preserve">
          <source>The CRC32 and ISIZE trailer fields must be present.</source>
          <target state="translated">CRC32とISIZEのトレーラーフィールドが存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="9feb874c73b191dd9599e9b2017419a0da4abb3d" translate="yes" xml:space="preserve">
          <source>The C_ARGS: Keyword</source>
          <target state="translated">C_ARGSです。キーワード</target>
        </trans-unit>
        <trans-unit id="701e155d0ecdee0723938fe9c7bf1396f627436a" translate="yes" xml:space="preserve">
          <source>The C_ARGS: keyword allows creating of XSUBS which have different calling sequence from Perl than from C, without a need to write CODE: or PPCODE: section. The contents of the C_ARGS: paragraph is put as the argument to the called C function without any change.</source>
          <target state="translated">C_ARGS:キーワードを使うと、CODE:や PPCODE:セクションを書かなくても、Perl とは異なる呼び出し順序を持つ XSUBS を作成することができます。C_ARGS:パラグラフの内容はそのままC関数の引数になります。</target>
        </trans-unit>
        <trans-unit id="8dd34313e432c589bd3beca248664e04fa335c40" translate="yes" xml:space="preserve">
          <source>The Carp module first appeared in Larry Wall's perl 5.000 distribution. Since then it has been modified by several of the perl 5 porters. Andrew Main (Zefram) &amp;lt;zefram@fysh.org&amp;gt; divested Carp into an independent distribution.</source>
          <target state="translated">Carpモジュールは、Larry Wallのperl 5.000ディストリビューションで最初に登場しました。それ以来、いくつかのperl 5ポーターによって変更されています。Andrew Main（Zefram）&amp;lt;zefram@fysh.org&amp;gt;は、Carpを独立したディストリビューションに売却しました。</target>
        </trans-unit>
        <trans-unit id="73aa54f605c75d537db25ae13f844b387570066b" translate="yes" xml:space="preserve">
          <source>The Carp routines are useful in your own modules because they act like &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt;, but with a message which is more likely to be useful to a user of your module. In the case of &lt;code&gt;cluck()&lt;/code&gt; and &lt;code&gt;confess()&lt;/code&gt; , that context is a summary of every call in the call-stack; &lt;code&gt;longmess()&lt;/code&gt; returns the contents of the error message.</source>
          <target state="translated">Carpルーチンは、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; のように動作するため、独自のモジュールで役立ちますが、モジュールのユーザーにとって役立つ可能性が高いメッセージが含まれます。以下の場合 &lt;code&gt;cluck()&lt;/code&gt; と &lt;code&gt;confess()&lt;/code&gt; 、そのコンテキストは、コールスタック内のすべての呼の要約です。 &lt;code&gt;longmess()&lt;/code&gt; はエラーメッセージの内容を返します。</target>
        </trans-unit>
        <trans-unit id="0a9dcee0d40bd7f4aac08fafa5945185600a2589" translate="yes" xml:space="preserve">
          <source>The Carp routines don't handle exception objects currently. If called with a first argument that is a reference, they simply call die() or warn(), as appropriate.</source>
          <target state="translated">Carp ルーチンは現在のところ例外オブジェクトを扱いません。第一引数に参照を指定して呼ばれた場合は、適切な場合には単に die()や warn()を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f74ecb659d2dae844024a2a7edc2eb73241a6948" translate="yes" xml:space="preserve">
          <source>The Color Stack</source>
          <target state="translated">カラースタック</target>
        </trans-unit>
        <trans-unit id="0e751c2cd8e75382ca856116ff4097eafeafab18" translate="yes" xml:space="preserve">
          <source>The Comprehensive Perl Archive Network (CPAN) offers a wealth of extensions, some of which require a C compiler to build. Look in &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt; for more information on CPAN.</source>
          <target state="translated">Comprehensive Perl Archive Network（CPAN）は豊富な拡張機能を提供しますが、その一部はビルドにCコンパイラが必要です。CPANの詳細については、&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http：&lt;/a&gt; //www.cpan.org/を参照してください。</target>
        </trans-unit>
        <trans-unit id="2a3290ed25612a4eaac36507c34578ae080df3b2" translate="yes" xml:space="preserve">
          <source>The Comprehensive Perl Archive Network. (See the Camel Preface and Camel chapter 19, &amp;ldquo;CPAN&amp;rdquo; for details.)</source>
          <target state="translated">包括的なPerlアーカイブネットワーク。（詳細については、ラクダの序文とラクダの第19章「CPAN」を参照してください。）</target>
        </trans-unit>
        <trans-unit id="fbde9b6a7a92989c5e72924e954088639a082096" translate="yes" xml:space="preserve">
          <source>The Config module contains all the information that was available to the &lt;code&gt;Configure&lt;/code&gt; program at Perl build time (over 900 values).</source>
          <target state="translated">Configモジュールには、Perlのビルド時に &lt;code&gt;Configure&lt;/code&gt; プログラムで利用できたすべての情報（900を超える値）が含まれています。</target>
        </trans-unit>
        <trans-unit id="f82ec628dc6b60e59ddc0aa4e8da2f644e35b47f" translate="yes" xml:space="preserve">
          <source>The Config module is installed into the architecture and version specific library directory ($Config{installarchlib}) and it checks the perl version number when loaded.</source>
          <target state="translated">Configモジュールはアーキテクチャとバージョン固有のライブラリディレクトリ($Config{installarchlib})にインストールされ、読み込まれたときにperlのバージョン番号をチェックします。</target>
        </trans-unit>
        <trans-unit id="cfdfb921abaaac3f8f467a1db7786aa8a018327d" translate="yes" xml:space="preserve">
          <source>The Config::Extensions module provides a hash &lt;code&gt;%Extensions&lt;/code&gt; containing all the core extensions that were enabled for this perl. The hash is keyed by extension name, with each entry having one of 3 possible values:</source>
          <target state="translated">Config :: Extensionsモジュールは、このperlで有効にされたすべてのコア拡張を含むハッシュ &lt;code&gt;%Extensions&lt;/code&gt; を提供します。ハッシュは拡張名でキー付けされ、各エントリには次の3つの値のいずれかがあります。</target>
        </trans-unit>
        <trans-unit id="93bfc257b83bc0f3f1d509f0feed1135175ce382" translate="yes" xml:space="preserve">
          <source>The Conformance Test for the UCA is available under &lt;a href=&quot;http://www.unicode.org/Public/UCA/&quot;&gt;http://www.unicode.org/Public/UCA/&lt;/a&gt;.</source>
          <target state="translated">UCAの適合性テストは、&lt;a href=&quot;http://www.unicode.org/Public/UCA/&quot;&gt;http：//www.unicode.org/Public/UCA/&lt;/a&gt;で入手できます。</target>
        </trans-unit>
        <trans-unit id="a9099e439d69987253b372d83d6abc9bc4c12963" translate="yes" xml:space="preserve">
          <source>The Curses module from CPAN provides a dynamically loadable object module interface to a curses library. A small demo can be found at the directory &lt;a href=&quot;http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz&quot;&gt;http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz&lt;/a&gt; ; this program repeats a command and updates the screen as needed, rendering &lt;b&gt;rep ps axu&lt;/b&gt; similar to &lt;b&gt;top&lt;/b&gt;.</source>
          <target state="translated">CPANのCursesモジュールは、cursesライブラリへの動的にロード可能なオブジェクトモジュールインターフェイスを提供します。小さなデモは&lt;a href=&quot;http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz&quot;&gt;http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz&lt;/a&gt;ディレクトリにあります。このプログラムはコマンドを繰り返し、必要に応じて画面を更新し、&lt;b&gt;rep ps axu&lt;/b&gt;を&lt;b&gt;top&lt;/b&gt;と同様にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="e14abdffc22e514738def0dbe442a1a41dfd62a8" translate="yes" xml:space="preserve">
          <source>The CvDEPTH'th entry of a PADLIST is a PAD (an AV) which is the stack frame at that depth of recursion into the CV. The 0th slot of a frame AV is an AV which is @_. Other entries are storage for variables and op targets.</source>
          <target state="translated">PADLIST の CvDEPTH 番目のエントリは,PAD(AV)であり,これは CV への再帰のその深さのスタックフレームです.フレームAVの0番目のスロットは,@_であるAVです.その他のエントリは,変数とオペターゲットのストレージです.</target>
        </trans-unit>
        <trans-unit id="4c8b698edc086f6d5f09074b59ab49b539df94b8" translate="yes" xml:space="preserve">
          <source>The Cygwin &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot()&lt;/a&gt;&lt;/code&gt; implementation has holes (it can not restrict file access by native Win32 programs).</source>
          <target state="translated">Cygwin &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot()&lt;/a&gt;&lt;/code&gt; 実装には穴があります（ネイティブのWin32プログラムによるファイルアクセスを制限できません）。</target>
        </trans-unit>
        <trans-unit id="24d81b19eab85eca5ef9e9f2cae5a86c87573ad6" translate="yes" xml:space="preserve">
          <source>The Cygwin &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink()&lt;/a&gt;&lt;/code&gt; functions make the</source>
          <target state="translated">Cygwin &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink()&lt;/a&gt;&lt;/code&gt; 関数は、</target>
        </trans-unit>
        <trans-unit id="ba192629e74cc31eca240e3c966c286bb927abba" translate="yes" xml:space="preserve">
          <source>The Cygwin environment for Win32;</source>
          <target state="translated">Win32用のCygwin環境です。</target>
        </trans-unit>
        <trans-unit id="1c285b2bd2bfb42d86890b2e5f1ea0881773f57b" translate="yes" xml:space="preserve">
          <source>The Cygwin tools are ports of the popular GNU development tools for Win32 platforms. They run thanks to the Cygwin library which provides the UNIX system calls and environment these programs expect. More information about this project can be found at:</source>
          <target state="translated">Cygwinツールは、人気のあるGNU開発ツールをWin32プラットフォーム用に移植したものです。これらのツールは、これらのプログラムが期待するUNIXシステムコールと環境を提供するCygwinライブラリのおかげで動作します。このプロジェクトについての詳細な情報は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="b1c1f15ff329b2e8194094e815d08360dc942cc0" translate="yes" xml:space="preserve">
          <source>The DB_BTREE format is useful when you want to store data in a given order. By default the keys will be stored in lexical order, but as you will see from the example shown in the next section, it is very easy to define your own sorting function.</source>
          <target state="translated">DB_BTREE 形式は、データを指定した順序で保存したい場合に便利です。デフォルトではキーは辞書順に格納されますが、次のセクションで示す例を見ればわかるように、独自のソート関数を定義するのは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="da84dd6e821316467ab753b852b3c6f56039e638" translate="yes" xml:space="preserve">
          <source>The DB_File interface was written by Paul Marquess &amp;lt;pmqs@cpan.org&amp;gt;.</source>
          <target state="translated">DB_Fileインターフェースは、Paul Marquess &amp;lt;pmqs@cpan.org&amp;gt;によって作成されました。</target>
        </trans-unit>
        <trans-unit id="bc4b830fc8435dde71447902321a40e9b54b9e85" translate="yes" xml:space="preserve">
          <source>The DB_File tests (db-btree.t, db-hash.t, db-recno.t) may fail you have installed a newer version of Berkeley DB into the system and the -I and -L compiler and linker flags introduce version conflicts with the DB 1.85 headers and libraries that came with the Tru64. For example, mixing a DB v2 library with the DB v1 headers is a bad idea. Watch out for Configure options -Dlocincpth and -Dloclibpth, and check your /usr/local/include and /usr/local/lib since they are included by default.</source>
          <target state="translated">DB_File テスト (db-btree.t,db-hash.t,db-recno.t)が失敗する可能性があります。バークレー DB の新しいバージョンがシステムにインストールされていて、-I および -L コンパイラとリンカフラグが Tru64 に付属の DB 1.85 ヘッダやライブラリとバージョンが競合している場合です。例えば、DB v2 ライブラリと DB v1 ヘッダを混ぜるのはよくありません。Configure オプションの -Dlocincpth と -Dloclibpth に注意し、/usr/local/include と /usr/local/lib はデフォルトでインクルードされているので確認してください。</target>
        </trans-unit>
        <trans-unit id="4aa7475384871e821eca8486a731a00b705b7453" translate="yes" xml:space="preserve">
          <source>The DB_HASH file format is probably the most commonly used of the three file formats that &lt;b&gt;DB_File&lt;/b&gt; supports. It is also very straightforward to use.</source>
          <target state="translated">DB_HASHファイル形式は、&lt;b&gt;DB_Fileが&lt;/b&gt;サポートする3つのファイル形式のうち、おそらく最も一般的に使用されています。また、使用方法も非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="093622558089c2ef694fcbf575b62744b7d5e02e" translate="yes" xml:space="preserve">
          <source>The DEBUGGING define exposes more code to the compiler, therefore more ways for things to go wrong. You should try it.</source>
          <target state="translated">DEBUGGING定義はコンパイラに多くのコードを公開しています。試してみてください。</target>
        </trans-unit>
        <trans-unit id="cd3218b27f646c5b1da0c16a7d86f78d988008e7" translate="yes" xml:space="preserve">
          <source>The DECC$FILENAME_UNIX_REPORT logical name controls how Perl interprets filenames to the extent that Perl uses the CRTL internally for many purposes, and attempts to follow CRTL conventions for reporting filenames. The DECC$FILENAME_UNIX_ONLY feature differs in that it expects all filenames passed to the C run-time to be already in Unix format. This feature is not yet supported in Perl since Perl uses traditional OpenVMS file specifications internally and in the test harness, and it is not yet clear whether this mode will be useful or useable. The feature logical name DECC$POSIX_COMPLIANT_PATHNAMES is new with the RMS Symbolic Link SDK and included with OpenVMS v8.3, but is not yet supported in Perl.</source>
          <target state="translated">DECC$FILENAME_UNIX_REPORT 論理名は、Perl が多くの目的のために内部的に CRTL を使用し、ファイル名を報告するために CRTL の規約に従おうとする範囲で、Perl がファイル名をどのように解釈するかを制御します。DECC$FILENAME_UNIX_ONLY 機能は、C ランタイムに渡される全てのファイル名が既に Unix フォーマットであることを期待する点で異なります。Perl は内部的にもテストハーネスの中でも伝統的な OpenVMS ファイル仕様を使用しているため、この機能は Perl ではまだサポートされていません。DECC$POSIX_COMPLIANT_PATHNAMES という論理名は、RMS Symbolic Link SDK で新しくなり、OpenVMS v8.3 に含まれていますが、Perl ではまだサポートされていません。</target>
        </trans-unit>
        <trans-unit id="9d134d51441969270625bd1289ca90b131d940f8" translate="yes" xml:space="preserve">
          <source>The DOS FAT filesystem can accommodate only &quot;8.3&quot; style filenames. Under the &quot;case-insensitive, but case-preserving&quot; HPFS (OS/2) and NTFS (NT) filesystems you may have to be careful about case returned with functions like &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; or used with functions like &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">DOS FATファイルシステムは、「8.3」スタイルのファイル名のみに対応できます。「大文字と小文字を区別しないが大文字と小文字を区別する」HPFS（OS / 2）およびNTFS（NT）ファイルシステムでは、 &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; などの関数で返される、または &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt; などの関数で使用される大文字と小文字に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="37eace57ea45e399a72f8107235f1e100b1ee8bb" translate="yes" xml:space="preserve">
          <source>The DynaLoader is designed to be a very simple high-level interface that is sufficiently general to cover the requirements of SunOS, HP-UX, Linux, VMS and other platforms.</source>
          <target state="translated">DynaLoaderは、SunOS、HP-UX、Linux、VMSなどのプラットフォームの要件を十分にカバーする、非常にシンプルで高レベルなインターフェースとして設計されています。</target>
        </trans-unit>
        <trans-unit id="f912c465834fcee4d486c53fdce3a5c5359e646e" translate="yes" xml:space="preserve">
          <source>The EBCDIC code page in use on Siemens' BS2000 system is distinct from 1047 and 0037. It is identified below as the POSIX-BC set. Like 0037 and 1047, it is the same as ISO 8859-1 in 20 code point values.</source>
          <target state="translated">シーメンスのBS2000システムで使用されているEBCDICコードページは、1047および0037とは区別されています。以下ではPOSIX-BCセットとして識別されます。0037や1047と同様に、20のコードポイント値でISO 8859-1と同じです。</target>
        </trans-unit>
        <trans-unit id="79364f1341ebeff610668d7a68e618ee03998d55" translate="yes" xml:space="preserve">
          <source>The EBCDIC controls provide three possible line terminator characters, CR (0x0D), LF (0x25), and NL (0x15). On ASCII platforms, the symbols &quot;NL&quot; and &quot;LF&quot; refer to the same character, but in strict EBCDIC terminology they are different ones. The EBCDIC NL is mapped to the C1 control called &quot;NEL&quot; (&quot;Next Line&quot;; here's a case where the mapping makes quite a bit of sense, and hence isn't just arbitrary). On some EBCDIC platforms, this NL or NEL is the typical line terminator. This is true of z/OS and BS2000. In these platforms, the C compilers will swap the LF and NEL code points, so that &lt;code&gt;&quot;\n&quot;&lt;/code&gt; is 0x15, and refers to NL. Perl does that too; you can see it in the code chart &lt;a href=&quot;#recipe-3&quot;&gt;below&lt;/a&gt;. This makes things generally &quot;just work&quot; without you even having to be aware that there is a swap.</source>
          <target state="translated">EBCDICコントロールは、CR（0x0D）、LF（0x25）、およびNL（0x15）の3つの可能な行終端文字を提供します。 ASCIIプラットフォームでは、記号「NL」と「LF」は同じ文字を指しますが、厳密なEBCDIC用語では、それらは異なります。 EBCDIC NLは、「NEL」（「次の行」）と呼ばれるC1コントロールにマップされます。ここでは、マッピングがかなり意味をなすため、マッピングが任意ではありません。一部のEBCDICプラットフォームでは、このNLまたはNELが一般的な回線ターミネーターです。これは、z / OSおよびBS2000に当てはまります。これらのプラットフォームでは、CコンパイラはLFとNELのコードポイントを交換するため、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; は0x15であり、NLを参照します。 Perlもそれを行います。&lt;a href=&quot;#recipe-3&quot;&gt;以下&lt;/a&gt;のコードチャートで確認できます。これにより、一般に「うまくいく」ようになりますスワップがあることを意識する必要さえありません。</target>
        </trans-unit>
        <trans-unit id="ebf0849b9c64cecc2853f7671dcdaa67dfb5bd40" translate="yes" xml:space="preserve">
          <source>The EMX environment for DOS, OS/2, etc. emx@iaehv.nl, &lt;a href=&quot;ftp://hobbes.nmsu.edu/pub/os2/dev/emx/&quot;&gt;ftp://hobbes.nmsu.edu/pub/os2/dev/emx/&lt;/a&gt; Also &lt;a href=&quot;perlos2&quot;&gt;perlos2&lt;/a&gt;.</source>
          <target state="translated">DOS、OS / 2などのEMX環境。emx @ iaehv.nl、&lt;a href=&quot;ftp://hobbes.nmsu.edu/pub/os2/dev/emx/&quot;&gt;ftp：//hobbes.nmsu.edu/pub/os2/dev/emx/&lt;/a&gt;また&lt;a href=&quot;perlos2&quot;&gt;perlos2&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="256f82d42fe9ffdaee741a9745d27494e5988357" translate="yes" xml:space="preserve">
          <source>The EXPORT_XSUB_SYMBOLS: Keyword</source>
          <target state="translated">EXPORT_XSUB_SYMBOLS。キーワード</target>
        </trans-unit>
        <trans-unit id="dc2d72754e20f4d7576339fd0b632f9904767606" translate="yes" xml:space="preserve">
          <source>The EXPORT_XSUB_SYMBOLS: keyword is likely something you will never need. In perl versions earlier than 5.16.0, this keyword does nothing. Starting with 5.16, XSUB symbols are no longer exported by default. That is, they are &lt;code&gt;static&lt;/code&gt; functions. If you include</source>
          <target state="translated">EXPORT_XSUB_SYMBOLS：キーワードは、おそらく決して必要ないものです。5.16.0より前のバージョンのperlでは、このキーワードは何もしません。5.16以降、XSUBシンボルはデフォルトではエクスポートされなくなりました。つまり、 &lt;code&gt;static&lt;/code&gt; 関数です。含める場合</target>
        </trans-unit>
        <trans-unit id="617a336bda8dcf8d5dea55c8c402db880f815331" translate="yes" xml:space="preserve">
          <source>The EXPR can be arbitrarily complicated provided its final operation is an element or slice of an aggregate:</source>
          <target state="translated">EXPRは、その最終的な操作が集合体の要素またはスライスであれば、任意に複雑にすることができます。</target>
        </trans-unit>
        <trans-unit id="c1575f71c727dbc3cc08a704b1c6455476c26b21" translate="yes" xml:space="preserve">
          <source>The EXTEND() macro is used to make room on the argument stack for 2 return values. The PPCODE: directive causes the &lt;b&gt;xsubpp&lt;/b&gt; compiler to create a stack pointer available as &lt;code&gt;SP&lt;/code&gt; , and it is this pointer which is being used in the EXTEND() macro. The values are then pushed onto the stack with the PUSHs() macro.</source>
          <target state="translated">EXTEND（）マクロは、引数スタックに2つの戻り値のためのスペースを作るために使用されます。PPCODE：ディレクティブにより、&lt;b&gt;xsubpp&lt;/b&gt;コンパイラーは &lt;code&gt;SP&lt;/code&gt; として使用可能なスタックポインターを作成します。これはEXTEND（）マクロで使用されているのはこのポインターです。次に、値はPUSHs（）マクロを使用してスタックにプッシュされます。</target>
        </trans-unit>
        <trans-unit id="24d94044d20d73e1e217702a7997adf3573359ef" translate="yes" xml:space="preserve">
          <source>The Eclipse Perl Integration Project integrates Perl editing/debugging with Eclipse.</source>
          <target state="translated">Eclipse Perl Integration Projectは、Perlの編集/デバッグをEclipseに統合するプロジェクトです。</target>
        </trans-unit>
        <trans-unit id="089e76f353c6f78abb99ad80ce2ae65f3d8d4946" translate="yes" xml:space="preserve">
          <source>The Eighth, and Final Rule of Sys::Syslog is:</source>
          <target state="translated">Sys::Syslogの第8回、そして最終ルールは</target>
        </trans-unit>
        <trans-unit id="45e6da0d5cb898ad01f0a9bae1837646548ecfe3" translate="yes" xml:space="preserve">
          <source>The Ellipsis Statement</source>
          <target state="translated">省略記号のステートメント</target>
        </trans-unit>
        <trans-unit id="e36201c57b08755e4246cc5ce75f450c34e846b3" translate="yes" xml:space="preserve">
          <source>The Encode module is not available.</source>
          <target state="translated">Encodeモジュールは利用できません。</target>
        </trans-unit>
        <trans-unit id="a85df1c32e44ae493b3d9d47f5ce746d47a72805" translate="yes" xml:space="preserve">
          <source>The Encode package comes with</source>
          <target state="translated">Encodeパッケージには以下のものが付属しています。</target>
        </trans-unit>
        <trans-unit id="1795442e49f2b33213fac82a59f9aa602577ec9d" translate="yes" xml:space="preserve">
          <source>The End Of Cargo Cult Programming</source>
          <target state="translated">カーゴカルトプログラミングの終焉</target>
        </trans-unit>
        <trans-unit id="8b81b46699720b949c812be3aaed26b804f52e55" translate="yes" xml:space="preserve">
          <source>The English module, loaded via</source>
          <target state="translated">を介してロードされた英語モジュール</target>
        </trans-unit>
        <trans-unit id="f6ae3dbecbd56f2fb799d619d775a492c5918b30" translate="yes" xml:space="preserve">
          <source>The English name $EXCEPTIONS_BEING_CAUGHT is slightly misleading, because the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value does not indicate whether exceptions are being caught, since compilation of the main program does not catch exceptions.</source>
          <target state="translated">メインプログラムのコンパイルは例外をキャッチしないため、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 値は例外がキャッチされているかどうかを示さないため、英語名$ EXCEPTIONS_BEING_CAUGHTは少し誤解を招く可能性があります。</target>
        </trans-unit>
        <trans-unit id="a563900434d5f24e6b403136d7617e396332a2c1" translate="yes" xml:space="preserve">
          <source>The Execution of this file takes 2 parameters as input. The first being the NetWare SDK path, second being the path for CodeWarrior Compiler &amp;amp; tools. Execution of this file sets these paths and also sets the build type to Release by default.</source>
          <target state="translated">このファイルの実行は、入力として2つのパラメーターを取ります。1つはNetWare SDKパス、2つ目はCodeWarriorコンパイラとツールのパスです。このファイルを実行すると、これらのパスが設定され、ビルドタイプもデフォルトでリリースに設定されます。</target>
        </trans-unit>
        <trans-unit id="f147b2a13785e77381665ed5dff1c497a9b6d450" translate="yes" xml:space="preserve">
          <source>The Exporter module implements an &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method which allows a module to export functions and variables to its users' namespaces. Many modules use Exporter rather than implementing their own &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method because Exporter provides a highly flexible interface, with an implementation optimised for the common case.</source>
          <target state="translated">エクスポーターモジュールは、モジュールが関数と変数をユーザーの名前空間にエクスポートできるようにする &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドを実装します。多くのモジュールは、独自の &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドを実装するのではなく、エクスポーターを使用します。エクスポーターは、非常に柔軟なインターフェースを提供し、実装は一般的なケースに最適化されています。</target>
        </trans-unit>
        <trans-unit id="f4abee164dbbeb51e77682498dd2aaadf957faf7" translate="yes" xml:space="preserve">
          <source>The Exporter module will convert an attempt to import a number from a module into a call to &lt;code&gt;$module_name-&amp;gt;VERSION($value)&lt;/code&gt; . This can be used to validate that the version of the module being used is greater than or equal to the required version.</source>
          <target state="translated">エクスポーターモジュールは、モジュールから数値をインポートする試みを &lt;code&gt;$module_name-&amp;gt;VERSION($value)&lt;/code&gt; への呼び出しに変換します。これは、使用されているモジュールのバージョンが必要なバージョン以上であることを検証するために使用できます。</target>
        </trans-unit>
        <trans-unit id="7c52e8ff54cbaf19ce5405ab1f4fcb23fdb70082" translate="yes" xml:space="preserve">
          <source>The Extended Binary Coded Decimal Interchange Code refers to a large collection of single- and multi-byte coded character sets that are quite different from ASCII and ISO 8859-1, and are all slightly different from each other; they typically run on host computers. The EBCDIC encodings derive from 8-bit byte extensions of Hollerith punched card encodings, which long predate ASCII. The layout on the cards was such that high bits were set for the upper and lower case alphabetic characters &lt;code&gt;[a-z]&lt;/code&gt; and &lt;code&gt;[A-Z]&lt;/code&gt; , but there were gaps within each Latin alphabet range, visible in the table &lt;a href=&quot;#recipe-3&quot;&gt;below&lt;/a&gt;. These gaps can cause complications.</source>
          <target state="translated">Extended Binary Coded Decimal Interchange Codeは、ASCIIやISO 8859-1とはかなり異なり、すべてがわずかに異なるシングルおよびマルチバイトコード化文字セットの大規模なコレクションを指します。通常、これらはホストコンピューターで実行されます。 EBCDICエンコーディングは、ASCIIよりも以前から存在していたホレリスパンチカードエンコーディングの8ビットバイト拡張から派生しています。カードのレイアウトでは、大文字と小文字のアルファベット &lt;code&gt;[a-z]&lt;/code&gt; と &lt;code&gt;[A-Z]&lt;/code&gt; ハイビットが設定されていましたが、&lt;a href=&quot;#recipe-3&quot;&gt;下&lt;/a&gt;の表に示すように、各ラテンアルファベットの範囲内にギャップがありました。これらのギャップは合併症を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="6f06c8685e10bb2298b3fbb853d3946ef5600f7b" translate="yes" xml:space="preserve">
          <source>The Extended Time field (ID &quot;UT&quot;), set using the &lt;code&gt;exTime&lt;/code&gt; option, and the Unix2 extra field (ID &quot;Ux), set using the &lt;code&gt;exUnix2&lt;/code&gt; option, are examples of extra fields.</source>
          <target state="translated">長時間使用してフィールド（ID「UT」）、セット &lt;code&gt;exTime&lt;/code&gt; のオプションを、そしてUnix2余分なフィールド（ID「UX）、使用してセット &lt;code&gt;exUnix2&lt;/code&gt; のオプションは、余分なフィールドの例です。</target>
        </trans-unit>
        <trans-unit id="fcb46fea1b1fd4aac6612092ac926ea662164c18" translate="yes" xml:space="preserve">
          <source>The FALLBACK: Keyword</source>
          <target state="translated">The FALLBACK:キーワード</target>
        </trans-unit>
        <trans-unit id="81e67da9b589fcad262531decfe34d5e04ad538d" translate="yes" xml:space="preserve">
          <source>The FTP protocol allows files to be sent to or fetched from the server. Each transfer involves a &lt;b&gt;local file&lt;/b&gt; (on the client) and a &lt;b&gt;remote file&lt;/b&gt; (on the server). In this module, the same file name will be used for both local and remote if only one is specified. This means that transferring remote file &lt;code&gt;/path/to/file&lt;/code&gt; will try to put that file in &lt;code&gt;/path/to/file&lt;/code&gt; locally, unless you specify a local file name.</source>
          <target state="translated">FTPプロトコルを使用すると、サーバーにファイルを送信したり、サーバーからファイルをフェッチしたりできます。各転送には、&lt;b&gt;ローカルファイル&lt;/b&gt;（クライアント上）と&lt;b&gt;リモートファイル&lt;/b&gt;（サーバー上）が含まれます。このモジュールでは、1つだけが指定されている場合、ローカルとリモートの両方に同じファイル名が使用されます。つまり、ローカルファイル名を指定しない限り、リモートファイル &lt;code&gt;/path/to/file&lt;/code&gt; を転送すると、そのファイルは &lt;code&gt;/path/to/file&lt;/code&gt; にローカルに配置されます。</target>
        </trans-unit>
        <trans-unit id="19ca5c1f27cf809b055786ff82f78ffa209098e1" translate="yes" xml:space="preserve">
          <source>The Field @* for Variable-Width Multi-Line Text</source>
          <target state="translated">可変幅の複数行テキスト用のフィールド @*です。</target>
        </trans-unit>
        <trans-unit id="e40af0a7d64eded8997f1df4aaf651855caff401" translate="yes" xml:space="preserve">
          <source>The Field ^* for Variable-Width One-line-at-a-time Text</source>
          <target state="translated">可変幅一行単位のテキスト用のフィールド ^*です。</target>
        </trans-unit>
        <trans-unit id="051fa4e84ae2fee9062644631a452abe1ffe1819" translate="yes" xml:space="preserve">
          <source>The Fifth Rule of Sys::Syslog is:</source>
          <target state="translated">Sys::Syslogの第5のルールは</target>
        </trans-unit>
        <trans-unit id="916ba58ad633c9294928c7ea005c39a240dcf055" translate="yes" xml:space="preserve">
          <source>The File::Compare::compare function compares the contents of two sources, each of which can be a file or a file handle. It is exported from File::Compare by default.</source>
          <target state="translated">File::Compare::compare 関数は、2 つのソースの内容を比較します。デフォルトでは File::Compare からエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="ca8ebdce3138f1ac959e2447b9991cb0fe638baf" translate="yes" xml:space="preserve">
          <source>The File::Copy module provides two basic functions, &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;move&lt;/code&gt; , which are useful for getting the contents of a file from one place to another.</source>
          <target state="translated">File :: Copyモジュールは、ファイルの内容をある場所から別の場所に取得するのに役立つ、 &lt;code&gt;copy&lt;/code&gt; と &lt;code&gt;move&lt;/code&gt; の 2つの基本機能を提供します。</target>
        </trans-unit>
        <trans-unit id="09b1bcb4dc016e97cb98e50f74998315b3fcc200" translate="yes" xml:space="preserve">
          <source>The File::Temp has been a standard module since Perl 5.6.1. If you don't have a modern enough Perl installed, use the &lt;code&gt;new_tmpfile&lt;/code&gt; class method from the IO::File module to get a filehandle opened for reading and writing. Use it if you don't need to know the file's name:</source>
          <target state="translated">File :: Tempは、Perl 5.6.1以降の標準モジュールです。最新のPerlが十分にインストールされていない場合は、IO :: Fileモジュールの &lt;code&gt;new_tmpfile&lt;/code&gt; クラスメソッドを使用して、ファイルハンドルを読み取りおよび書き込み用に開きます。ファイルの名前を知る必要がない場合に使用します。</target>
        </trans-unit>
        <trans-unit id="b913943216bac4cfd103b39436c3d12211246595" translate="yes" xml:space="preserve">
          <source>The Filter</source>
          <target state="translated">フィルター</target>
        </trans-unit>
        <trans-unit id="43340f79f355f6131007a53845317a0044b9a6f5" translate="yes" xml:space="preserve">
          <source>The Filter::Simple module exports into the package that calls &lt;code&gt;FILTER&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;s it directly) -- such as package &quot;BANG&quot; in the above example -- two automagically constructed subroutines -- &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;unimport&lt;/code&gt; -- which take care of all the nasty details.</source>
          <target state="translated">呼び出しパッケージにフィルタ::単純モジュール輸出 &lt;code&gt;FILTER&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 直接S） -そのようなパッケージとして「BANG」上記の例では- 2つの自動的に構築サブルーチン- &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;unimport&lt;/code&gt; -すべての世話をします厄介な詳細。</target>
        </trans-unit>
        <trans-unit id="6e7c10894c7b8df4a2736098e84057abd21e37b8" translate="yes" xml:space="preserve">
          <source>The Filter::Simple module provides a simplified interface to Filter::Util::Call; one that is sufficient for most common cases.</source>
          <target state="translated">Filter::Simple モジュールは Filter::Util::Call のシンプルなインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="bddf2be2229684864beadb4258752319125e5d27" translate="yes" xml:space="preserve">
          <source>The First Rule of Sys::Syslog is:</source>
          <target state="translated">Sys::Syslogの第一のルールは</target>
        </trans-unit>
        <trans-unit id="c785438975752290d77a3cbc9b618a56d2ef340f" translate="yes" xml:space="preserve">
          <source>The Fourth Rule of Sys::Syslog is:</source>
          <target state="translated">Sys::Syslogの第四のルールは</target>
        </trans-unit>
        <trans-unit id="9fc0887978d7a0f1367b4c9ada979ec50584ea98" translate="yes" xml:space="preserve">
          <source>The FreeBSD extensions to the POSIX standard are the following flags:</source>
          <target state="translated">FreeBSD の POSIX 標準への拡張は、以下のフラグです。</target>
        </trans-unit>
        <trans-unit id="ab3e557141760f9299f04ad34f2deeabfcc7fef0" translate="yes" xml:space="preserve">
          <source>The FreeMiNT port uses GNU dld for loadable module capabilities. So ensure you have that library installed when building perl.</source>
          <target state="translated">FreeMiNTの移植版は、ロード可能なモジュール機能にGNU dldを使用しています。そのため、Perlをビルドする際には、そのライブラリがインストールされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="f0fd999d74111938e315c20e741e008d3fd7c5c7" translate="yes" xml:space="preserve">
          <source>The GNU C Compiler</source>
          <target state="translated">GNU Cコンパイラ</target>
        </trans-unit>
        <trans-unit id="d9d4765228818a588c101c574dcfb1a870a89ab7" translate="yes" xml:space="preserve">
          <source>The GV returned from &lt;code&gt;gv_fetchmeth&lt;/code&gt; may be a method cache entry, which is not visible to Perl code. So when calling &lt;code&gt;call_sv&lt;/code&gt; , you should not use the GV directly; instead, you should use the method's CV, which can be obtained from the GV with the &lt;code&gt;GvCV&lt;/code&gt; macro.</source>
          <target state="translated">&lt;code&gt;gv_fetchmeth&lt;/code&gt; から返されたGVは、Perlコードからは見えないメソッドキャッシュエントリである可能性があります。したがって、 &lt;code&gt;call_sv&lt;/code&gt; を呼び出すときは、GVを直接使用しないでください。代わりに、 &lt;code&gt;GvCV&lt;/code&gt; マクロを使用してGVから取得できるメソッドのCVを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b49130058618570dadbdb5fe7db0bf1f3977aebe" translate="yes" xml:space="preserve">
          <source>The GV which was last used for a filehandle input operation. (&lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; )</source>
          <target state="translated">ファイルハンドル入力操作に最後に使用されたGV。（ &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f9210879f69c79f8b2c57a2c424d2e90c56d2548" translate="yes" xml:space="preserve">
          <source>The G_KEEPERR flag is meant to be used in conjunction with G_EVAL in</source>
          <target state="translated">G_KEEPERR フラグは、次のような場合に G_EVAL と組み合わせて使用されます。</target>
        </trans-unit>
        <trans-unit id="270052086120a712d1ce772352a3feccf55ed3d1" translate="yes" xml:space="preserve">
          <source>The G_KEEPERR flag was introduced in Perl version 5.002.</source>
          <target state="translated">G_KEEPERR フラグは Perl バージョン 5.002 で導入されました。</target>
        </trans-unit>
        <trans-unit id="c166e1d44ca297aba655d34fc5c35cdba6de63b6" translate="yes" xml:space="preserve">
          <source>The Gamma function [C99].</source>
          <target state="translated">ガンマ関数[C99]。</target>
        </trans-unit>
        <trans-unit id="c28a373a90d22851cb6b0c5d6429010695515e8d" translate="yes" xml:space="preserve">
          <source>The Generic Object</source>
          <target state="translated">汎用オブジェクト</target>
        </trans-unit>
        <trans-unit id="be19e055acdc9d4cfa79691a16d99bc6afcec772" translate="yes" xml:space="preserve">
          <source>The Getopt::Long module implements an extended getopt function called GetOptions(). It parses the command line from &lt;code&gt;@ARGV&lt;/code&gt; , recognizing and removing specified options and their possible values.</source>
          <target state="translated">Getopt :: Longモジュールは、GetOptions（）と呼ばれる拡張getopt関数を実装します。 &lt;code&gt;@ARGV&lt;/code&gt; からコマンドラインを解析し、指定されたオプションとそれらの可能な値を認識して削除します。</target>
        </trans-unit>
        <trans-unit id="2070520f96de2fb3aff1e83e6888cb8e89e845b4" translate="yes" xml:space="preserve">
          <source>The Gods Must Be Crazy</source>
          <target state="translated">神々は気が狂っているに違いない</target>
        </trans-unit>
        <trans-unit id="95a2e8168d41f50bb6b37295098c965f76153807" translate="yes" xml:space="preserve">
          <source>The Guide</source>
          <target state="translated">ガイド</target>
        </trans-unit>
        <trans-unit id="5298e135f008dcbe68c1cb6c5368e25d31e290a3" translate="yes" xml:space="preserve">
          <source>The HP ANSI C Compiler</source>
          <target state="translated">HP ANSI C コンパイラ</target>
        </trans-unit>
        <trans-unit id="cbc8f650d8669a3292691821f3fcd62a7f570f6f" translate="yes" xml:space="preserve">
          <source>The HP porting centres are limited in what systems they are allowed to port to and they usually choose the two most recent OS versions available.</source>
          <target state="translated">HPの移植センターは、彼らが移植することが許可されているシステムに制限されており、彼らは通常、利用可能な2つの最新のOSのバージョンを選択します。</target>
        </trans-unit>
        <trans-unit id="f122712cd3f618cf66f5c1f12ee353af13431595" translate="yes" xml:space="preserve">
          <source>The HTML/XML character reference modes are about the same. In place of &lt;code&gt;\x{&lt;i&gt;HHHH&lt;/i&gt;}&lt;/code&gt;, HTML uses &lt;code&gt;&amp;amp;#&lt;i&gt;NNN&lt;/i&gt;;&lt;/code&gt; where</source>
          <target state="translated">HTML / XML文字参照モードはほぼ同じです。 &lt;code&gt;\x{&lt;i&gt;HHHH&lt;/i&gt;}&lt;/code&gt; 代わりに、HTMLは &lt;code&gt;&amp;amp;#&lt;i&gt;NNN&lt;/i&gt;;&lt;/code&gt; 使用します。どこ</target>
        </trans-unit>
        <trans-unit id="36100c08868e01dc8cc43e522dca19e6917bba7c" translate="yes" xml:space="preserve">
          <source>The Hitchhiker's Guide to the Galaxy</source>
          <target state="translated">ヒッチハイカーズ・ガイド・トゥ・ザ・ギャラクシー</target>
        </trans-unit>
        <trans-unit id="e1c3679460c98c3b3c6c4ab57a10e09b7a1778d9" translate="yes" xml:space="preserve">
          <source>The Hobbit</source>
          <target state="translated">ホビット</target>
        </trans-unit>
        <trans-unit id="ff076bcca2d7f3f3bc21f192dd45509aa2d50344" translate="yes" xml:space="preserve">
          <source>The I/O layers can also be specified more flexibly with the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma. See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;, or look at the following example.</source>
          <target state="translated">I / Oレイヤーは、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; プラグマを使用してより柔軟に指定することもできます。&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照するか、次の例を見てください。</target>
        </trans-unit>
        <trans-unit id="9bb410ea518f5686bb8957c03ada154b43330468" translate="yes" xml:space="preserve">
          <source>The IANA is responsible for delegating management of the top level country domains. The country domains are the two-letter (lowercase) codes from ISO 3166 with a few other additions.</source>
          <target state="translated">IANAは、トップレベルの国別ドメインの管理を委任する責任がある。国別ドメインは、ISO 3166の2文字(小文字)コードに他のいくつかの追加を加えたものである。</target>
        </trans-unit>
        <trans-unit id="494453dbfde6185be2550cd595666629ce3cd776" translate="yes" xml:space="preserve">
          <source>The IANA language subtag registry.</source>
          <target state="translated">IANA言語サブタグレジストリ。</target>
        </trans-unit>
        <trans-unit id="14ed0108ca9064725768107f673bb9f9f4c35fe4" translate="yes" xml:space="preserve">
          <source>The IBM ANSI C Compiler</source>
          <target state="translated">IBM ANSI C コンパイラ</target>
        </trans-unit>
        <trans-unit id="02dd8ba3a34ffd809cf07605a9d86d87105f9946" translate="yes" xml:space="preserve">
          <source>The IBM APAR number for this problem is IZ50240 (Reported component ID: 5765G0300 / AIX 5.3). It is possible to get an ifix for that problem. If you need an ifix please contact your local IBM AIX support.</source>
          <target state="translated">この問題のIBM APAR番号はIZ50240(報告されたコンポーネントID:5765G0300/AIX 5.3)です。この問題のifixを入手することは可能です。ifixが必要な場合は、お近くのIBM AIXサポートにお問い合わせください。</target>
        </trans-unit>
        <trans-unit id="a6c290ab208815021765007f305a8fc14c88a6b4" translate="yes" xml:space="preserve">
          <source>The IBM's compiler patch levels 5.0.0.0 and 5.0.1.0 have compiler optimization bugs that affect compiling perl.c and regcomp.c, respectively. If Perl's configuration detects those compiler patch levels, optimization is turned off for the said source code files. Upgrading to at least 5.0.2.0 is recommended.</source>
          <target state="translated">IBM のコンパイラパッチレベル 5.0.0.0 と 5.0.1.0 には、コンパイラ最適化のバグがあり、それぞれ perl.c と regcomp.c のコンパイルに影響を与えます。Perl の設定がこれらのパッチレベルを検出した場合、そのソースコードファイルの最適化はオフになります。少なくとも 5.0.0.2.0 にアップグレードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9495fe8f41686bc61a5fe351f28585160b7d92af" translate="yes" xml:space="preserve">
          <source>The ID header in an &lt;code&gt;ExtraField&lt;/code&gt; sub-field can consist of any two bytes.</source>
          <target state="translated">&lt;code&gt;ExtraField&lt;/code&gt; サブフィールドのIDヘッダーは、任意の2バイトで構成できます。</target>
        </trans-unit>
        <trans-unit id="e1d154173604900e6d649a0362f6607140bc599a" translate="yes" xml:space="preserve">
          <source>The IDs of all objects available within a program are strings that can be expanded to the corresponding real objects with the &lt;code&gt;CPAN::Shell-&amp;gt;expand(&quot;Module&quot;,@things)&lt;/code&gt; method. Expand returns a list of CPAN::Module objects according to the &lt;code&gt;@things&lt;/code&gt; arguments given. In scalar context, it returns only the first element of the list.</source>
          <target state="translated">プログラム内で使用可能なすべてのオブジェクトのIDは、 &lt;code&gt;CPAN::Shell-&amp;gt;expand(&quot;Module&quot;,@things)&lt;/code&gt; メソッドを使用して対応する実際のオブジェクトに展開できる文字列です。Expandは、指定された &lt;code&gt;@things&lt;/code&gt; 引数に従ってCPAN :: Moduleオブジェクトのリストを返します。スカラーコンテキストでは、リストの最初の要素のみを返します。</target>
        </trans-unit>
        <trans-unit id="10ac6c437c9901ca659c989f66f60ed9a2a13418" translate="yes" xml:space="preserve">
          <source>The IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT Keywords</source>
          <target state="translated">IN/OUTLIST/IN_OUTLIST/OUT/OUT/IN_OUTキーワード</target>
        </trans-unit>
        <trans-unit id="348998c68227b2675b00049ded155d9a2e0cebf4" translate="yes" xml:space="preserve">
          <source>The INCLUDE: Keyword</source>
          <target state="translated">INCLUDE(インクルード)です。キーワード</target>
        </trans-unit>
        <trans-unit id="2fd635a1ef0c21453ce812dc91933d7964a41662" translate="yes" xml:space="preserve">
          <source>The INCLUDE_COMMAND: Keyword</source>
          <target state="translated">INCLUDE_COMMAND:キーワード</target>
        </trans-unit>
        <trans-unit id="edaf758a314e34d83c79323397c8453ba48d6649" translate="yes" xml:space="preserve">
          <source>The INIT: Keyword</source>
          <target state="translated">INIT:キーワード</target>
        </trans-unit>
        <trans-unit id="c2a1ae034dc0e7090561071ada28079423ed98bf" translate="yes" xml:space="preserve">
          <source>The INIT: directive contains code that will be placed immediately after the argument stack is decoded. C does not allow variable declarations at arbitrary locations inside a function, so this is usually the best way to declare local variables needed by the XSUB. (Alternatively, one could put the whole &lt;code&gt;PPCODE:&lt;/code&gt; section into braces, and put these declarations on top.)</source>
          <target state="translated">INIT：ディレクティブには、引数スタックがデコードされた直後に配置されるコードが含まれています。Cでは関数内の任意の場所での変数宣言を許可していないため、これは通常、XSUBが必要とするローカル変数を宣言する最良の方法です。（あるいは、 &lt;code&gt;PPCODE:&lt;/code&gt; セクション全体を中括弧に入れ、これらの宣言を上に置くこともできます。）</target>
        </trans-unit>
        <trans-unit id="08f7558037e95071c749920f4074890a9d7217ea" translate="yes" xml:space="preserve">
          <source>The INIT: keyword allows initialization to be inserted into the XSUB before the compiler generates the call to the C function. Unlike the CODE: keyword above, this keyword does not affect the way the compiler handles RETVAL.</source>
          <target state="translated">INIT:キーワードを使用すると、コンパイラが C 関数の呼び出しを生成する前に XSUB に初期化を挿入することができます。上のCODE:キーワードとは異なり、このキーワードはコンパイラが RETVAL を処理する方法には影響しません。</target>
        </trans-unit>
        <trans-unit id="05bebe82f53ea5f020b6b0d4fe1069dcc8a1edbb" translate="yes" xml:space="preserve">
          <source>The INPUT and OUTPUT sections substitute underscores for double-colons on the fly, giving the desired effect. This example demonstrates some of the power and versatility of the typemap facility.</source>
          <target state="translated">INPUTセクションとOUTPUTセクションでは、ダブルコロンの代わりにアンダースコアをその場で代用し、目的の効果を得ることができます。この例では、タイプマップ機能のパワーと汎用性の一部を示しています。</target>
        </trans-unit>
        <trans-unit id="970adbac5d031ff3f8daeef101bb8b55901dc870" translate="yes" xml:space="preserve">
          <source>The INPUT: Keyword</source>
          <target state="translated">INPUTです。キーワード</target>
        </trans-unit>
        <trans-unit id="21ee92ef918e68068f302b993af8bd2d49672033" translate="yes" xml:space="preserve">
          <source>The INSTALL file in the perl top-level has much information that is only relevant to people building Perl on Unix-like systems. In particular, you can safely ignore any information that talks about &quot;Configure&quot;.</source>
          <target state="translated">perlトップレベルのINSTALLファイルには、Unixライクなシステム上でPerlを構築する人にのみ関連する情報が多く含まれています。特に、&quot;Configure &quot;に関する情報は無視しても大丈夫です。</target>
        </trans-unit>
        <trans-unit id="0adfc9336795bed66f7e1ae7c7424119e43e300c" translate="yes" xml:space="preserve">
          <source>The INSTALL... macros in turn default to their %Config ($Config{installprivlib}, $Config{installarchlib}, etc.) counterparts.</source>
          <target state="translated">INSTALL...マクロのデフォルトは、%Config ($Config{installprivlib},$Config{installarchlib}など)に対応しています。</target>
        </trans-unit>
        <trans-unit id="9023b649b609edcd17550081d28e4a80cf681ce5" translate="yes" xml:space="preserve">
          <source>The INTERFACE: Keyword</source>
          <target state="translated">インターフェイス:キーワード</target>
        </trans-unit>
        <trans-unit id="e1fc34a9a712c8a8848d549ec748ba68c13f33e7" translate="yes" xml:space="preserve">
          <source>The INTERFACE_MACRO: Keyword</source>
          <target state="translated">INTERFACE_MACRO:キーワード</target>
        </trans-unit>
        <trans-unit id="1dc68d829f3e7afebf9178286cb38cc376f6ec35" translate="yes" xml:space="preserve">
          <source>The IO::Pty and Expect modules from CPAN can help with this, as they provide a real tty (well, a pseudo-tty, actually), which gets you back to line buffering in the invoked command again.</source>
          <target state="translated">CPAN の IO::Pty モジュールと Expect モジュールがこれを助けてくれます。</target>
        </trans-unit>
        <trans-unit id="99807f53289794deab86efdaf9d7a76fb60defb6" translate="yes" xml:space="preserve">
          <source>The IO::Socket(3) manpage describes the object library, and the Socket(3) manpage describes the low-level interface to sockets. Besides the obvious functions in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, you should also check out the</source>
          <target state="translated">IO :: Socket（3）マンページはオブジェクトライブラリについて説明し、Socket（3）マンページはソケットへの低レベルのインターフェイスについて説明します。&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;の明白な関数に加えて、あなたもチェックする必要があります</target>
        </trans-unit>
        <trans-unit id="dd19329497c4746f419d864be77ab0a23a7089f7" translate="yes" xml:space="preserve">
          <source>The ISO 4217 data.</source>
          <target state="translated">ISO 4217の日付です。</target>
        </trans-unit>
        <trans-unit id="9aedc742ca6fb2dc7b951347169405aefc47d178" translate="yes" xml:space="preserve">
          <source>The ISO 8601 standard defines the date format to be YYYY-MM-DD, and the time format to be hh:mm:ss (24 hour clock), and if combined, they should be concatenated with date first and with a capital 'T' in front of the time.</source>
          <target state="translated">ISO 8601規格では、日付形式はYYYY-MM-DD、時刻形式はhh:mm:ss(24時間時計)と定義されており、これらを組み合わせる場合は、日付を先頭に、時刻の前に大文字の「T」を付けて連結する。</target>
        </trans-unit>
        <trans-unit id="b1897fe9f53f26e8ee1d177c372171adf09aeabb" translate="yes" xml:space="preserve">
          <source>The ISO 8859-</source>
          <target state="translated">ISO 8859-は</target>
        </trans-unit>
        <trans-unit id="be3a3d5a87727d649fad4e25cef60372ccbe4e20" translate="yes" xml:space="preserve">
          <source>The IVdf will expand to whatever is the correct format for the IVs.</source>
          <target state="translated">IVdfは、IVの正しいフォーマットであれば何にでも展開します。</target>
        </trans-unit>
        <trans-unit id="2438b4ecbe3dbd078f85fcd76de3ac8517dfbe33" translate="yes" xml:space="preserve">
          <source>The Inside-out Technique</source>
          <target state="translated">インサイドアウトのテクニック</target>
        </trans-unit>
        <trans-unit id="bfd4ccd468ad208229b8e304f3f53a782dd6a87c" translate="yes" xml:space="preserve">
          <source>The Intent</source>
          <target state="translated">意図</target>
        </trans-unit>
        <trans-unit id="94771cb0c8e4f1f0a6f837c00d85c8dc460252be" translate="yes" xml:space="preserve">
          <source>The Internet line terminator is &quot;\015\012&quot;. Under ASCII variants of Unix, that could usually be written as &quot;\r\n&quot;, but under other systems, &quot;\r\n&quot; might at times be &quot;\015\015\012&quot;, &quot;\012\012\015&quot;, or something completely different. The standards specify writing &quot;\015\012&quot; to be conformant (be strict in what you provide), but they also recommend accepting a lone &quot;\012&quot; on input (be lenient in what you require). We haven't always been very good about that in the code in this manpage, but unless you're on a Mac from way back in its pre-Unix dark ages, you'll probably be ok.</source>
          <target state="translated">The Internet line terminator is &quot;015\\012&quot;。UnixのASCII変種の下では、それは、通常、「\r\n」として書くことができたが、他のシステムの下では、「\r\n」は、時折、「\\r\015012012」、「\r\r\012012015」、または、全く異なる何かであるかもしれない。標準は、準拠するために「\015012」を書くことを指定している(Be strict in what you provide)が、彼らはまた、入力上の単独の「\012」を受け入れることを推奨している(Be lenient in what you require)。私たちは、このページのコードの中では、常にそのことについて非常に良いことをしてきたわけではありませんでしたが、あなたがUnix以前の暗黒時代からMacを使っていない限り、おそらく大丈夫でしょう。</target>
        </trans-unit>
        <trans-unit id="501b92baa8d232237960cf668a9120aec4afdddd" translate="yes" xml:space="preserve">
          <source>The Keyed-Hash Message Authentication Code (HMAC):</source>
          <target state="translated">鍵付きハッシュメッセージ認証コード(HMAC)。</target>
        </trans-unit>
        <trans-unit id="d65b2222a8c282dae9b3cd28518dc29329740227" translate="yes" xml:space="preserve">
          <source>The LAYER parameter of the binmode() function is described as &quot;DISCIPLINE&quot; in &quot;Programming Perl, 3rd Edition&quot;. However, since the publishing of this book, by many known as &quot;Camel III&quot;, the consensus of the naming of this functionality has moved from &quot;discipline&quot; to &quot;layer&quot;. All documentation of this version of Perl therefore refers to &quot;layers&quot; rather than to &quot;disciplines&quot;. Now back to the regularly scheduled documentation...</source>
          <target state="translated">binmode()関数のLAYERパラメータは、&quot;Programming Perl,3rd Edition &quot;では &quot;DISCIPLINE &quot;と記述されています。しかし、この本が出版されて以来、&quot;Camel III &quot;と呼ばれる多くの人々によって、この機能の名前のコンセンサスは、&quot;discipline &quot;から &quot;layer &quot;へと移行しました。したがって、このバージョンのPerlのすべてのドキュメントは、「規律」ではなく「レイヤー」を参照しています。それでは、定期的に予定されているドキュメントに戻りましょう。</target>
        </trans-unit>
        <trans-unit id="c5a27ef16f958a529f7db36014226c11d0b2a269" translate="yes" xml:space="preserve">
          <source>The LENGTH must be less than or equal to the buffer size.</source>
          <target state="translated">LENGTHはバッファサイズ以下でなければなりません。</target>
        </trans-unit>
        <trans-unit id="ea2784880355655cd5260296b326df11e2887853" translate="yes" xml:space="preserve">
          <source>The LLP64 data model is different from the LP64 data model that is the norm on 64-bit Unix platforms. In the former, &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; are both 32-bit data types, while pointers are 64 bits wide. In addition, there is a separate 64-bit wide integral type, &lt;code&gt;__int64&lt;/code&gt; . In contrast, the LP64 data model that is pervasive on Unix platforms provides &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; as the 32-bit type, while both the &lt;code&gt;long&lt;/code&gt; type and pointers are of 64-bit precision. Note that both models provide for 64-bits of addressability.</source>
          <target state="translated">LLP64データモデルは、64ビットUnixプラットフォームの標準であるLP64データモデルとは異なります。前者では、 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;long&lt;/code&gt; はどちらも32ビットのデータ型ですが、ポインターは64ビット幅です。さらに、別の64ビット幅の整数型 &lt;code&gt;__int64&lt;/code&gt; があります。対照的に、Unixプラットフォームで普及しているLP64データモデルは、32ビット型として &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; を提供しますが、 &lt;code&gt;long&lt;/code&gt; 型とポインターはどちらも64ビット精度です。どちらのモデルも64ビットのアドレス可能性を提供することに注意してください。</target>
        </trans-unit>
        <trans-unit id="89a865b15f025e4125f9521e0cbb444b319a7463" translate="yes" xml:space="preserve">
          <source>The Layout</source>
          <target state="translated">レイアウト</target>
        </trans-unit>
        <trans-unit id="3892e7769cde3def977297b2fd107c985947cfbb" translate="yes" xml:space="preserve">
          <source>The Lays of Beleriand</source>
          <target state="translated">ベレリアンドのレイ</target>
        </trans-unit>
        <trans-unit id="b0afa09df1fad56be5d5842b1eca124439a7ca1c" translate="yes" xml:space="preserve">
          <source>The LimitOutput option.</source>
          <target state="translated">LimitOutputオプション。</target>
        </trans-unit>
        <trans-unit id="7609c4332cdddf67282a426dcc844b81450f8724" translate="yes" xml:space="preserve">
          <source>The Locale-Codes distribution.</source>
          <target state="translated">ロケールコードの配布です。</target>
        </trans-unit>
        <trans-unit id="4371d0e1d710e94eadf09e06051f14e2003db5e7" translate="yes" xml:space="preserve">
          <source>The Locale/Maketext.pm source. Observe that the module is much shorter than its documentation!</source>
          <target state="translated">Locale/Maketext.pm のソースです。このモジュールはドキュメントよりもずっと短いことに注意してください!</target>
        </trans-unit>
        <trans-unit id="38bb5321e46a281dda4ae130db97eaa961627a32" translate="yes" xml:space="preserve">
          <source>The Lord of the Rings</source>
          <target state="translated">指輪物語</target>
        </trans-unit>
        <trans-unit id="65d1f880f060efd8bb95b4c1ef3aa2f9bbc16903" translate="yes" xml:space="preserve">
          <source>The MANIFEST file contains the names of all the files just created in the Mytest directory.</source>
          <target state="translated">MANIFEST ファイルには、Mytest ディレクトリに作成されたすべてのファイルの名前が含まれています。</target>
        </trans-unit>
        <trans-unit id="cc342c2add9e7769b6276801f43191956bbbeb6e" translate="yes" xml:space="preserve">
          <source>The MD5 algorithm is defined in RFC 1321. This implementation is derived from the reference C code in RFC 1321 which is covered by the following copyright statement:</source>
          <target state="translated">MD5アルゴリズムはRFC 1321で定義されている。この実装はRFC 1321の参照Cコードから派生したものであり、以下の著作権文でカバーされています。</target>
        </trans-unit>
        <trans-unit id="a517aaaef144e51dda68ffaef4baabb6659f9741" translate="yes" xml:space="preserve">
          <source>The MODULE Keyword</source>
          <target state="translated">MODULEキーワード</target>
        </trans-unit>
        <trans-unit id="d640b9c0318e742980f68cffc45a40affd82cb5f" translate="yes" xml:space="preserve">
          <source>The MODULE keyword is used to start the XS code and to specify the package of the functions which are being defined. All text preceding the first MODULE keyword is considered C code and is passed through to the output with POD stripped, but otherwise untouched. Every XS module will have a bootstrap function which is used to hook the XSUBs into Perl. The package name of this bootstrap function will match the value of the last MODULE statement in the XS source files. The value of MODULE should always remain constant within the same XS file, though this is not required.</source>
          <target state="translated">MODULEキーワードはXSのコードを開始し、定義されている関数のパッケージを指定するために使用されます。最初の MODULE キーワードより前のテキストはすべて C コードとみなされ、POD が取り除かれた状態で出力に渡されますが、それ以外の場合は手を加えません。すべてのXSモジュールには、XSUBをPerlに接続するためのブートストラップ関数があります。このブートストラップ関数のパッケージ名は、XS ソースファイルの最後の MODULE 文の値と一致します。MODULE の値は、同じ XS ファイル内では常に一定でなければなりませんが、これは必須ではありません。</target>
        </trans-unit>
        <trans-unit id="eb4b2ce583f381cfbe7f078522f5b75cf8b0acdd" translate="yes" xml:space="preserve">
          <source>The MY_CXT_INIT macro initializes storage for the &lt;code&gt;my_cxt_t&lt;/code&gt; struct.</source>
          <target state="translated">MY_CXT_INITマクロは、 &lt;code&gt;my_cxt_t&lt;/code&gt; 構造体のストレージを初期化します。</target>
        </trans-unit>
        <trans-unit id="2dd4eb6a77854464c830f76b78c6ac15e92b669d" translate="yes" xml:space="preserve">
          <source>The Makefile to be produced may be altered by adding arguments of the form &lt;code&gt;KEY=VALUE&lt;/code&gt; . E.g.</source>
          <target state="translated">生成されるMakefileは、 &lt;code&gt;KEY=VALUE&lt;/code&gt; という形式の引数を追加することによって変更できます。例えば</target>
        </trans-unit>
        <trans-unit id="ad78ec4ae3b5a4c78156cf44036606a40c32aaf5" translate="yes" xml:space="preserve">
          <source>The Mantra</source>
          <target state="translated">マントラ</target>
        </trans-unit>
        <trans-unit id="1b194ffb2833786ebe5362ee6e09704940be3454" translate="yes" xml:space="preserve">
          <source>The Memoize man page.</source>
          <target state="translated">メモリーズマンのページです。</target>
        </trans-unit>
        <trans-unit id="8b07a539021a149c75372ae5a8d60bcacade8512" translate="yes" xml:space="preserve">
          <source>The Microsoft Visual C++ compilers are also now being given away free. They are available as &quot;Visual C++ Toolkit 2003&quot; or &quot;Visual C++ 2005-2013 Express Edition&quot; (and also as part of the &quot;.NET Framework SDK&quot;) and are the same compilers that ship with &quot;Visual C++ .NET 2003 Professional&quot; or &quot;Visual C++ 2005-2013 Professional&quot; respectively.</source>
          <target state="translated">マイクロソフトの Visual C++コンパイラも無料で配布されています。Visual C++Toolkit 2003」または「Visual C++2005-2013 Express Edition」(また「.NET Framework SDK」の一部として)として提供されており、それぞれ「Visual C++.NET 2003 Professional」または「Visual C++2005-2013 Professional」に同梱されているのと同じコンパイラです。</target>
        </trans-unit>
        <trans-unit id="b6efbee1ed83675ffebd32144ba8248768436ab5" translate="yes" xml:space="preserve">
          <source>The NAME section (&lt;code&gt;=head1 NAME&lt;/code&gt; ) should consist of a single paragraph with the script/module name, followed by a dash `-' and a very short description of what the thing is good for.</source>
          <target state="translated">NAMEセクション（ &lt;code&gt;=head1 NAME&lt;/code&gt; ）は、スクリプト/モジュール名を1つの段落で構成し、その後にダッシュ `-'と、それが何に適しているかについての非常に短い説明が続きます。</target>
        </trans-unit>
        <trans-unit id="552a987af386f5239d1d91c8f3cd7d6b46b27cbb" translate="yes" xml:space="preserve">
          <source>The NAME section should be recognized specially and index entries emitted for everything in that section. This would have to be deferred until the next section, since extraneous things in NAME tends to confuse various man page processors. Currently, no index entries are emitted for anything in NAME.</source>
          <target state="translated">NAME セクションは特別に認識され、そのセクション内のすべてのものに対してインデックスエントリが発行されるべきです。これは次のセクションまで延期されなければならないでしょう。 NAME に含まれる余計なものは様々な man ページプロセッサを混乱させる傾向があるからです。現在のところ、NAME の中の何に対してもインデックスエントリは生成されません。</target>
        </trans-unit>
        <trans-unit id="eede37533894539b6f0e561b631aee0b3870de35" translate="yes" xml:space="preserve">
          <source>The NEVER keyword must appear by itself if used within the Notify option and &quot;requests that a DSN not be returned to the sender under any conditions.&quot;</source>
          <target state="translated">NEVER キーワードは、Notify オプション内で使用され、&quot;いかなる条件でも送信者に DSN を返さないように要求する &quot;場合は、それ自体が出現する必要があります。</target>
        </trans-unit>
        <trans-unit id="1dccb0bb054644651ad0c69767bda009b1d0637b" translate="yes" xml:space="preserve">
          <source>The NO_INIT Keyword</source>
          <target state="translated">NO_INIT キーワード</target>
        </trans-unit>
        <trans-unit id="23729fabcc944859639583f78edb8c8ef05b2818" translate="yes" xml:space="preserve">
          <source>The NO_INIT keyword is used to indicate that a function parameter is being used only as an output value. The &lt;b&gt;xsubpp&lt;/b&gt; compiler will normally generate code to read the values of all function parameters from the argument stack and assign them to C variables upon entry to the function. NO_INIT will tell the compiler that some parameters will be used for output rather than for input and that they will be handled before the function terminates.</source>
          <target state="translated">NO_INITキーワードは、関数パラメーターが出力値としてのみ使用されていることを示すために使用されます。&lt;b&gt;xsubppの&lt;/b&gt;コンパイラは通常、引数スタックからすべての関数パラメータの値を読み、関数へのエントリ時にC変数に割り当てるコードを生成します。NO_INITは、一部のパラメーターが入力ではなく出力に使用され、関数が終了する前に処理されることをコンパイラーに通知します。</target>
        </trans-unit>
        <trans-unit id="8fd6dba18911a57231232a7c939d805f823c76e7" translate="yes" xml:space="preserve">
          <source>The NO_OUTPUT Keyword</source>
          <target state="translated">NO_OUTPUT キーワード</target>
        </trans-unit>
        <trans-unit id="03379df3fc9b65eb904066ecff904227f6ca6017" translate="yes" xml:space="preserve">
          <source>The NO_OUTPUT can be placed as the first token of the XSUB. This keyword indicates that while the C subroutine we provide an interface to has a non-&lt;code&gt;void&lt;/code&gt; return type, the return value of this C subroutine should not be returned from the generated Perl subroutine.</source>
          <target state="translated">NO_OUTPUTは、XSUBの最初のトークンとして配置できます。このキーワードは、インターフェースを提供するCサブルーチンに &lt;code&gt;void&lt;/code&gt; 以外の戻り値の型がある一方で、このCサブルーチンの戻り値は、生成されたPerlサブルーチンから返されるべきではないことを示しています。</target>
        </trans-unit>
        <trans-unit id="904e01c3e307ff335e43430a3d4bc1ddd9643078" translate="yes" xml:space="preserve">
          <source>The Name_Alias property is also of this form. But each scalar consists of two components: 1) the name, and 2) the type of alias this is. They are separated by a colon and a space. In Unicode 6.1, there are several alias types:</source>
          <target state="translated">Name_Aliasプロパティもこの形式です。しかし、それぞれのスカラーは2つの要素で構成されています。1)名前と、2)これはエイリアスの種類です。これらはコロンとスペースで区切られています。Unicode 6.1では、いくつかのエイリアスタイプがあります。</target>
        </trans-unit>
        <trans-unit id="b8335e651ec579d0644f75bd5c6369bb3697cc7b" translate="yes" xml:space="preserve">
          <source>The Nestable version works by looking for hash references being stored and converting them to tied hashes so that they too can have references as keys. This will happen without warning whenever you store a reference to one of your own hashes in the tied hash.</source>
          <target state="translated">ネスタブルバージョンは、保存されているハッシュ参照を探して、それらをタイドハッシュに変換して、それらも参照をキーとして持つことができるようにします。これは、あなた自身のハッシュへの参照をタイドハッシュに保存する際に、警告なしに起こります。</target>
        </trans-unit>
        <trans-unit id="1aaccf615c02a846abe966f8242837a674850c5a" translate="yes" xml:space="preserve">
          <source>The Net::FTP class is a subclass of Net::Cmd and IO::Socket::INET.</source>
          <target state="translated">Net::FTPクラスは、Net::CmdとIO::Socket::INETのサブクラスです。</target>
        </trans-unit>
        <trans-unit id="01eaa0b5dde8380e0c7a54964e805d8bfcf3acc6" translate="yes" xml:space="preserve">
          <source>The Net::NNTP class is a subclass of Net::Cmd and IO::Socket::INET.</source>
          <target state="translated">Net::NNTP クラスは、Net::Cmd と IO::Socket::INET のサブクラスです。</target>
        </trans-unit>
        <trans-unit id="da23b39231b794a7054fda91fbd214625459379e" translate="yes" xml:space="preserve">
          <source>The Net::POP3 class is a subclass of Net::Cmd and IO::Socket::INET.</source>
          <target state="translated">Net::POP3 クラスは、Net::Cmd と IO::Socket::INET のサブクラスです。</target>
        </trans-unit>
        <trans-unit id="8d68199e14c6e60b44de999602d0fae86539eba2" translate="yes" xml:space="preserve">
          <source>The Net::SMTP class is a subclass of Net::Cmd and IO::Socket::INET.</source>
          <target state="translated">Net::SMTP クラスは、Net::Cmd と IO::Socket::INET のサブクラスです。</target>
        </trans-unit>
        <trans-unit id="64f60cb8e2581437bfdc17a813e7b06233279924" translate="yes" xml:space="preserve">
          <source>The OP's flags, abbreviated as a series of symbols.</source>
          <target state="translated">OPのフラグ、略して記号の羅列。</target>
        </trans-unit>
        <trans-unit id="895a69280490efde337cd0fd19af585a8e383312" translate="yes" xml:space="preserve">
          <source>The OP's name, in all caps.</source>
          <target state="translated">OPの名前、オールキャップで。</target>
        </trans-unit>
        <trans-unit id="02eabb0cd331fbbf23966749354f0c2df6db1d07" translate="yes" xml:space="preserve">
          <source>The OP's name.</source>
          <target state="translated">OPの名前。</target>
        </trans-unit>
        <trans-unit id="2e25dacc5e61c7fb0d63f53483335a706cbf1613" translate="yes" xml:space="preserve">
          <source>The OP's private flags, rendered with abbreviated names if possible.</source>
          <target state="translated">OPのプライベートフラグは、可能であれば略称でレンダリングしています。</target>
        </trans-unit>
        <trans-unit id="59e423cd50aec687154fc4dc506adc4e55e686ff" translate="yes" xml:space="preserve">
          <source>The OP-specific information of the OP (such as the SV for an SVOP, the non-local exit pointers for a LOOP, etc.) enclosed in parentheses.</source>
          <target state="translated">括弧で囲んだOP固有の情報(SVOPのSV、LOOPの非ローカル終了ポインタなど)。</target>
        </trans-unit>
        <trans-unit id="0f586844a0e8ae4292abb29dd5184b53fc4b9536" translate="yes" xml:space="preserve">
          <source>The OS/390 and z/OS C run-time libraries provide &lt;code&gt;_atoe()&lt;/code&gt; and &lt;code&gt;_etoa()&lt;/code&gt; functions.</source>
          <target state="translated">OS / 390およびz / OS Cランタイムライブラリは、 &lt;code&gt;_atoe()&lt;/code&gt; および &lt;code&gt;_etoa()&lt;/code&gt; 関数を提供します。</target>
        </trans-unit>
        <trans-unit id="efc93b2b68cdc27d26189d3924b12fba2216cd16" translate="yes" xml:space="preserve">
          <source>The OUTPUT: Keyword</source>
          <target state="translated">OUTPUTです。キーワード</target>
        </trans-unit>
        <trans-unit id="6558e5f212b7172c05e18d1a7261588a3081027f" translate="yes" xml:space="preserve">
          <source>The OUTPUT: keyword can also be used to indicate that function parameters are output variables. This may be necessary when a parameter has been modified within the function and the programmer would like the update to be seen by Perl.</source>
          <target state="translated">OUTPUT:キーワードは、関数のパラメータが出力変数であることを示すために使用することもできます。これは、関数内でパラメータが変更されていて、プログラマがその更新をPerlに見てもらいたい場合に必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="73a9f4665d98e2b1d4598fa0b47867a5d82b1767" translate="yes" xml:space="preserve">
          <source>The OUTPUT: keyword indicates that certain function parameters should be updated (new values made visible to Perl) when the XSUB terminates or that certain values should be returned to the calling Perl function. For simple functions which have no CODE: or PPCODE: section, such as the sin() function above, the RETVAL variable is automatically designated as an output value. For more complex functions the &lt;b&gt;xsubpp&lt;/b&gt; compiler will need help to determine which variables are output variables.</source>
          <target state="translated">OUTPUT：キーワードは、XSUBの終了時に特定の関数パラメーターを更新する必要がある（Perlに新しい値が表示されるようにする）か、特定の値を呼び出し側のPerl関数に返す必要があることを示します。上記のsin（）関数など、CODE：またはPPCODE：セクションがない単純な関数の場合、RETVAL変数は出力値として自動的に指定されます。より複雑な関数の場合、&lt;b&gt;xsubpp&lt;/b&gt;コンパイラーは、どの変数が出力変数であるかを判別する助けを必要とします。</target>
        </trans-unit>
        <trans-unit id="4cc5401f4b3edfb0209daaa58ea92639a885ffb3" translate="yes" xml:space="preserve">
          <source>The OUTPUT: keyword will also allow an output parameter to be mapped to a matching piece of code rather than to a typemap.</source>
          <target state="translated">キーワード OUTPUT:は、出力パラメータをタイプマップではなく、一致するコードにマップすることもできます。</target>
        </trans-unit>
        <trans-unit id="9ee72e50bec09b405c45fd6861c78e461f0c9260" translate="yes" xml:space="preserve">
          <source>The OVERLOAD: Keyword</source>
          <target state="translated">OVEROLOAD(オーバーロード)。キーワード</target>
        </trans-unit>
        <trans-unit id="7288e63116c84272f399850db852020e0cc73247" translate="yes" xml:space="preserve">
          <source>The Opcode module allow you to define an</source>
          <target state="translated">Opcodeモジュールは</target>
        </trans-unit>
        <trans-unit id="959cf82efacd7e02d3ef8885dabccff7457e7125" translate="yes" xml:space="preserve">
          <source>The Opcode module is not usually used directly. See the ops pragma and Safe modules for more typical uses.</source>
          <target state="translated">Opcode モジュールは通常、直接使用されることはありません。より典型的な使用法については、ops pragma と Safe モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="fc2df1bcfc1883b7877806492c6187e99dd073c7" translate="yes" xml:space="preserve">
          <source>The Opcode package contains functions for manipulating operator names tags and sets. All are available for export by the package.</source>
          <target state="translated">Opcodeパッケージには、演算子名タグやセットを操作するための関数が含まれています。すべての関数は、パッケージによってエクスポートすることができます。</target>
        </trans-unit>
        <trans-unit id="d8d0c8d509c42bd9d64cbd39302a78c4a8138b0f" translate="yes" xml:space="preserve">
          <source>The Output File Glob is a normal string, with 2 glob-like features.</source>
          <target state="translated">出力ファイルのGlobは通常の文字列で、2つのGlobのような機能を持っています。</target>
        </trans-unit>
        <trans-unit id="84f8f10721f91385f97d9092c39e5e78fd029d2f" translate="yes" xml:space="preserve">
          <source>The PACKAGE Keyword</source>
          <target state="translated">PACKAGE キーワード</target>
        </trans-unit>
        <trans-unit id="865d0a1c65f77bfae0d9586920617d375bc6acfd" translate="yes" xml:space="preserve">
          <source>The PADLIST has a C array where pads are stored.</source>
          <target state="translated">PADLISTにはパッドが格納されているC配列があります。</target>
        </trans-unit>
        <trans-unit id="14a42650858d4f29fe76f5f506d61c2fcd72c3a0" translate="yes" xml:space="preserve">
          <source>The PASE environment is a runtime environment for OS/400 that can run executables built for PowerPC AIX in OS/400; see &lt;a href=&quot;perlos400&quot;&gt;perlos400&lt;/a&gt;. PASE is ASCII-based, not EBCDIC-based as the ILE.</source>
          <target state="translated">PASE環境は、OS / 400のPowerPC AIX用にビルドされた実行可能ファイルを実行できるOS / 400のランタイム環境です。&lt;a href=&quot;perlos400&quot;&gt;perlos400を&lt;/a&gt;参照してください。PASEはASCIIベースであり、ILEのようなEBCDICベースではありません。</target>
        </trans-unit>
        <trans-unit id="1f72b8482ed4bc7cb03eba7f8d7c5860c8cba587" translate="yes" xml:space="preserve">
          <source>The PATH isn't the only environment variable which can cause problems. Because some shells may use the variables IFS, CDPATH, ENV, and BASH_ENV, Perl checks that those are either empty or untainted when starting subprocesses. You may wish to add something like this to your setid and taint-checking scripts.</source>
          <target state="translated">PATHだけが問題を引き起こす環境変数ではありません。いくつかのシェルは IFS,CDPATH,ENV,BASH_ENV という変数を使うかもしれないので、Perl はサブプロセスを起動するときにこれらが空か汚染されていないかをチェックします。このようなものを setid と汚染チェックスクリプトに追加するとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="74d39bcf239c4e87e009e146ae36fe8545147ee4" translate="yes" xml:space="preserve">
          <source>The PATHEXT env variable will be used to get a list of extensions that might indicate a command, otherwise .com, .exe, .bat and .cmd will be used by default.</source>
          <target state="translated">PATHEXT env変数は、コマンドを示す可能性のある拡張子のリストを取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="7243f6ac7c83fe20c93feefd9b08218632215bc2" translate="yes" xml:space="preserve">
          <source>The PATTERN need not be constant; an expression may be used to specify a pattern that varies at runtime.</source>
          <target state="translated">PATTERNは定数である必要はありません;式は実行時に変化するパターンを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="692a1dbebc7770986f39cc91bf3402c713778957" translate="yes" xml:space="preserve">
          <source>The PERL5DB environment variable is only used when Perl is started with a bare &lt;b&gt;-d&lt;/b&gt; switch.</source>
          <target state="translated">PERL5DB環境変数は、Perlが&lt;b&gt;-d&lt;/b&gt;スイッチを使用して起動された場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="1eee98df1ea759ea4940bac25b454fb3fd49fcab" translate="yes" xml:space="preserve">
          <source>The PERL5LIB and PERLLIB logical names work as documented in &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;, except that the element separator is '|' instead of ':'. The directory specifications may use either VMS or Unix syntax.</source>
          <target state="translated">PERL5LIBおよびPERLLIBの論理名は、要素の区切り文字が '|'であることを除いて、&lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;に記載されているとおりに機能します。の代わりに '：'。ディレクトリの仕様では、VMSまたはUnixの構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="368f8cf4322638139da678fdc3327c77e1a054e7" translate="yes" xml:space="preserve">
          <source>The PERLIO environment variable is completely ignored when Perl is run in taint mode.</source>
          <target state="translated">Perl が taint モードで実行されている場合、PERLIO 環境変数は完全に無視されます。</target>
        </trans-unit>
        <trans-unit id="054efbf018fd73b713cd0bc442abab0d7792d243" translate="yes" xml:space="preserve">
          <source>The PERLLIB environment variable is completely ignored when Perl is run in taint mode.</source>
          <target state="translated">Perl が taint モードで実行されている場合、PERLLIB 環境変数は完全に無視されます。</target>
        </trans-unit>
        <trans-unit id="d86bdeabcf0cc9f48a3238fc1e1e9701f94852a2" translate="yes" xml:space="preserve">
          <source>The PERL_MAGIC_uvar interface for hashes</source>
          <target state="translated">ハッシュ用のPERL_MAGIC_uvarインターフェース</target>
        </trans-unit>
        <trans-unit id="fb91b23c022ab8bc327b326b9c283bc9250f0c0a" translate="yes" xml:space="preserve">
          <source>The PERL_VMS_EXCEPTION_DEBUG being defined as &quot;ENABLE&quot; will cause the VMS debugger to be invoked if a fatal exception that is not otherwise handled is raised. The purpose of this is to allow debugging of internal Perl problems that would cause such a condition.</source>
          <target state="translated">PERL_VMS_EXCEPTION_DEBUG が &quot;ENABLE&quot; として定義されていると、他では処理されない致命的な例外が発生した場合に VMS デバッガが起動されます。これは、そのような状態を引き起こす Perl 内部の問題をデバッグできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="7e2373bae9a9b5526191c72b5feebb5b501ede90" translate="yes" xml:space="preserve">
          <source>The POD file has some &lt;code&gt;=item&lt;/code&gt; and/or &lt;code&gt;=head&lt;/code&gt; commands that have the same text. Potential hyperlinks to such a text cannot be unique then. This warning is printed only with warning level greater than one.</source>
          <target state="translated">PODファイルには、同じテキストを含むいくつかの &lt;code&gt;=item&lt;/code&gt; および/または &lt;code&gt;=head&lt;/code&gt; コマンドがあります。そのようなテキストへの潜在的なハイパーリンクはその時ユニークであることができません。この警告は、1より大きい警告レベルでのみ出力されます。</target>
        </trans-unit>
        <trans-unit id="6a2061d2e11b2e67b0037b468d2ff510b08d969a" translate="yes" xml:space="preserve">
          <source>The POD names of files are the plain basenames with any Perl-like extension (.pm, .pl, .pod) stripped, and path separators replaced by &lt;code&gt;::&lt;/code&gt; 's.</source>
          <target state="translated">ファイルのPOD名は、Perlのような拡張子（.pm、.pl、.pod）が取り除かれたプレーンベース名であり、パス区切り文字が &lt;code&gt;::&lt;/code&gt; に置き換えられています。</target>
        </trans-unit>
        <trans-unit id="d3f7ef3aaed3b96c670ec2c717b4d27aac5d999a" translate="yes" xml:space="preserve">
          <source>The POSIX class matches according to the locale, except:</source>
          <target state="translated">POSIXクラスはロケールに応じてマッチします。</target>
        </trans-unit>
        <trans-unit id="d05b25c0d51d4520f59dbd5e7b83c675d81a2280" translate="yes" xml:space="preserve">
          <source>The POSIX class matches the same as its Full-range counterpart.</source>
          <target state="translated">POSIX クラスは、フルレンジ対応のものと同じものにマッチします。</target>
        </trans-unit>
        <trans-unit id="a91522989698e72a81436ce9d52c71f12180a429" translate="yes" xml:space="preserve">
          <source>The POSIX class matches the same as the ASCII range counterpart.</source>
          <target state="translated">POSIXクラスは、ASCII範囲の対応するものと同じものにマッチします。</target>
        </trans-unit>
        <trans-unit id="45eac6affb7dfd81e7b1ef63dd7e0a2e6da662a9" translate="yes" xml:space="preserve">
          <source>The POSIX class matches the same as the Full-range counterpart.</source>
          <target state="translated">POSIXクラスは、フルレンジ対応のものと同じものにマッチします。</target>
        </trans-unit>
        <trans-unit id="dc901c76cdcb97dea7310ea8ea924293bb5949f6" translate="yes" xml:space="preserve">
          <source>The POSIX defined flags for bsd_glob() are:</source>
          <target state="translated">bsd_glob()の POSIX 定義フラグは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="0fced43544b15278205eeaf1ce05bf21af49dca0" translate="yes" xml:space="preserve">
          <source>The POSIX module (part of the standard perl distribution) implements &lt;code&gt;ceil()&lt;/code&gt; , &lt;code&gt;floor()&lt;/code&gt; , and other mathematical and trigonometric functions. The &lt;code&gt;&lt;a href=&quot;math/complex&quot;&gt;Math::Complex&lt;/a&gt;&lt;/code&gt; module (part of the standard perl distribution) defines mathematical functions that work on both the reals and the imaginary numbers. &lt;code&gt;Math::Complex&lt;/code&gt; is not as efficient as POSIX, but POSIX can't work with complex numbers.</source>
          <target state="translated">POSIXモジュール（標準のperlディストリビューションの一部 &lt;code&gt;ceil()&lt;/code&gt; 、ceil（）、 &lt;code&gt;floor()&lt;/code&gt; 、およびその他の数学および三角関数を実装します。 &lt;code&gt;&lt;a href=&quot;math/complex&quot;&gt;Math::Complex&lt;/a&gt;&lt;/code&gt; モジュール（標準Perl配布の一部）は実数と虚数の両方で動作することを数学的関数を定義します。 &lt;code&gt;Math::Complex&lt;/code&gt; はPOSIXほど効率的ではありませんが、POSIXは複素数を処理できません。</target>
        </trans-unit>
        <trans-unit id="58a76e828b7178504f0efaab58e9fc7ae8c408e4" translate="yes" xml:space="preserve">
          <source>The POSIX module permits you to access all (or nearly all) the standard POSIX 1003.1 identifiers. Many of these identifiers have been given Perl-ish interfaces.</source>
          <target state="translated">POSIX モジュールでは、標準の POSIX 1003.1 識別子のすべて (あるいはほぼすべて)にアクセスすることができます。これらの識別子の多くは、Perl 風のインターフェイスが与えられています。</target>
        </trans-unit>
        <trans-unit id="bb00001e36c555e321a2c3180d9872e8c4493925" translate="yes" xml:space="preserve">
          <source>The POSIX provided &lt;code&gt;GLOB_APPEND&lt;/code&gt; , &lt;code&gt;GLOB_DOOFFS&lt;/code&gt; , and the FreeBSD extensions &lt;code&gt;GLOB_ALTDIRFUNC&lt;/code&gt; , and &lt;code&gt;GLOB_MAGCHAR&lt;/code&gt; flags have not been implemented in the Perl version because they involve more complex interaction with the underlying C structures.</source>
          <target state="translated">POSIXが提供する &lt;code&gt;GLOB_APPEND&lt;/code&gt; 、 &lt;code&gt;GLOB_DOOFFS&lt;/code&gt; 、およびFreeBSDの拡張機能である &lt;code&gt;GLOB_ALTDIRFUNC&lt;/code&gt; と &lt;code&gt;GLOB_MAGCHAR&lt;/code&gt; フラグは、基礎となるC構造とのより複雑な相互作用を伴うため、Perlバージョンには実装されていません。</target>
        </trans-unit>
        <trans-unit id="a0d47d53c93142215e84e50218c868cd954904f3" translate="yes" xml:space="preserve">
          <source>The POSIX::strftime() approach has the benefit of being, in theory, independent of the current locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for details.</source>
          <target state="translated">POSIX :: strftime（）アプローチには、理論的には現在のロケールに依存しないという利点があります。詳細は&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f4be5af1b8c4f7ec96a716021937a3c9561f2d5c" translate="yes" xml:space="preserve">
          <source>The POSTCALL: Keyword</source>
          <target state="translated">POSTCALL:キーワード</target>
        </trans-unit>
        <trans-unit id="58e421a82995ac1225598edc3f8a16b394004724" translate="yes" xml:space="preserve">
          <source>The POSTCALL: block does not make a lot of sense when the C subroutine call is supplied by user by providing either CODE: or PPCODE: section.</source>
          <target state="translated">POSTCALL:ブロックは、CODE:または PPCODE:セクションのいずれかを提供することで、ユーザから C サブルーチンコールが提供された場合には、あまり意味がありません。</target>
        </trans-unit>
        <trans-unit id="b336bc59359478eb80f69f21fc081230df6f7578" translate="yes" xml:space="preserve">
          <source>The PPCODE: Keyword</source>
          <target state="translated">PPCODEのこと。キーワード</target>
        </trans-unit>
        <trans-unit id="cfd48109a24f72ee93cb2960e4b31f2a2958e886" translate="yes" xml:space="preserve">
          <source>The PPCODE: keyword is an alternate form of the CODE: keyword and is used to tell the &lt;b&gt;xsubpp&lt;/b&gt; compiler that the programmer is supplying the code to control the argument stack for the XSUBs return values. Occasionally one will want an XSUB to return a list of values rather than a single value. In these cases one must use PPCODE: and then explicitly push the list of values on the stack. The PPCODE: and CODE: keywords should not be used together within the same XSUB.</source>
          <target state="translated">PPCODE：キーワードはCODE：キーワードの代替形式であり、プログラマーがXSUBs戻り値の引数スタックを制御するコードを提供していることを&lt;b&gt;xsubpp&lt;/b&gt;コンパイラーに通知するために使用されます。XSUBが単一の値ではなく値のリストを返すようにしたい場合があります。これらの場合、PPCODE：を使用してから、スタックに値のリストを明示的にプッシュする必要があります。PPCODE：およびCODE：キーワードは、同じXSUB内で一緒に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6f7f4e638293474e32a1342be9b48c14f4f2f5af" translate="yes" xml:space="preserve">
          <source>The PREFIX Keyword</source>
          <target state="translated">PREFIXキーワード</target>
        </trans-unit>
        <trans-unit id="52a603903d899ccd2bb20a31b53d728d154bd0a6" translate="yes" xml:space="preserve">
          <source>The PREFIX keyword designates prefixes which should be removed from the Perl function names. If the C function is &lt;code&gt;rpcb_gettime()&lt;/code&gt; and the PREFIX value is &lt;code&gt;rpcb_&lt;/code&gt; then Perl will see this function as &lt;code&gt;gettime()&lt;/code&gt; .</source>
          <target state="translated">PREFIXキーワードは、Perl関数名から削除する必要があるプレフィックスを指定します。C関数が &lt;code&gt;rpcb_gettime()&lt;/code&gt; で、PREFIX値が &lt;code&gt;rpcb_&lt;/code&gt; の場合、Perlはこの関数を &lt;code&gt;gettime()&lt;/code&gt; と認識します。</target>
        </trans-unit>
        <trans-unit id="88877bb4605c88019ee2001796614ad12f854190" translate="yes" xml:space="preserve">
          <source>The PREINIT: Keyword</source>
          <target state="translated">ザ・プリーニット:キーワード</target>
        </trans-unit>
        <trans-unit id="81434e6a015b3cc52c205c8d0096aa1b8047f180" translate="yes" xml:space="preserve">
          <source>The PREINIT: keyword allows extra variables to be declared immediately before or after the declarations of the parameters from the INPUT: section are emitted.</source>
          <target state="translated">PREINIT:キーワードを使用すると、INPUT:セクションからのパラメータの宣言の直前または直後に、追加の変数を宣言できます。</target>
        </trans-unit>
        <trans-unit id="fe7bb955840f60bbf203155b0452f242dc963bed" translate="yes" xml:space="preserve">
          <source>The PROTOTYPE: Keyword</source>
          <target state="translated">PROTOTYPE。キーワード</target>
        </trans-unit>
        <trans-unit id="88332a599c2ebe7acc31d1e6540ad41d11fdae24" translate="yes" xml:space="preserve">
          <source>The PROTOTYPES: Keyword</source>
          <target state="translated">PROTOTYPES(プロトタイプス)。キーワード</target>
        </trans-unit>
        <trans-unit id="4762c608488c900a25e5c9ce4a388703783fff72" translate="yes" xml:space="preserve">
          <source>The PROTOTYPES: keyword corresponds to &lt;b&gt;xsubpp&lt;/b&gt;'s &lt;code&gt;-prototypes&lt;/code&gt; and &lt;code&gt;-noprototypes&lt;/code&gt; options. This keyword overrides the command line options. Prototypes are enabled by default. When prototypes are enabled XSUBs will be given Perl prototypes. This keyword may be used multiple times in an XS module to enable and disable prototypes for different parts of the module.</source>
          <target state="translated">PROTOTYPES：キーワードは、&lt;b&gt;xsubpp&lt;/b&gt;の &lt;code&gt;-prototypes&lt;/code&gt; および &lt;code&gt;-noprototypes&lt;/code&gt; オプションに対応します。このキーワードは、コマンドラインオプションを上書きします。プロトタイプはデフォルトで有効になっています。プロトタイプを有効にすると、XSUBにPerlプロトタイプが与えられます。このキーワードは、XSモジュールで複数回使用して、モジュールのさまざまな部分のプロトタイプを有効または無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="32ef6835ed63a718cf287a36ed5a59d894d8bfe4" translate="yes" xml:space="preserve">
          <source>The PV of the sv is returned.</source>
          <target state="translated">svのPVを返します。</target>
        </trans-unit>
        <trans-unit id="cbea6ce0d8ba0f98747339e84eb8596aa1948b13" translate="yes" xml:space="preserve">
          <source>The Perl 5 core includes mechanisms to help porters make backwards incompatible changes more compatible such as the &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt; and &lt;a href=&quot;deprecate&quot;&gt;deprecate&lt;/a&gt; modules. Please use them when appropriate.</source>
          <target state="translated">Perl 5コアには、ポーターが&lt;a href=&quot;feature&quot;&gt;機能&lt;/a&gt;や&lt;a href=&quot;deprecate&quot;&gt;非推奨の&lt;/a&gt;モジュールなど、下位互換性のない変更をより互換性のあるものにするためのメカニズムが含まれています。適宜ご利用ください。</target>
        </trans-unit>
        <trans-unit id="bab276840135536c5b050850ebb3b382c1feec45" translate="yes" xml:space="preserve">
          <source>The Perl 5 smartmatch and &lt;code&gt;given&lt;/code&gt; /&lt;code&gt;when&lt;/code&gt; constructs are not compatible with their Perl 6 analogues. The most visible difference and least important difference is that, in Perl 5, parentheses are required around the argument to &lt;code&gt;given()&lt;/code&gt; and &lt;code&gt;when()&lt;/code&gt; (except when this last one is used as a statement modifier). Parentheses in Perl 6 are always optional in a control construct such as &lt;code&gt;if()&lt;/code&gt; , &lt;code&gt;while()&lt;/code&gt; , or &lt;code&gt;when()&lt;/code&gt; ; they can't be made optional in Perl 5 without a great deal of potential confusion, because Perl 5 would parse the expression</source>
          <target state="translated">Perl 5のスマートマッチと &lt;code&gt;given&lt;/code&gt; / &lt;code&gt;when&lt;/code&gt; 構造は、Perl 6のアナログと互換性がありません。最も明白な違いと最も重要でない違いは、Perl 5では、 &lt;code&gt;given()&lt;/code&gt; および &lt;code&gt;when()&lt;/code&gt; への引数の前後に括弧が必要なことです（この最後の引数がステートメント修飾子として使用される場合を除く）。Perl 6の括弧は、 &lt;code&gt;if()&lt;/code&gt; 、 &lt;code&gt;while()&lt;/code&gt; 、 &lt;code&gt;when()&lt;/code&gt; などの制御構造では常にオプションです。Perl 5は式を解析するため、混乱を招く可能性がない限り、Perl 5でオプションにすることはできません。</target>
        </trans-unit>
        <trans-unit id="5d32638db8a1c22afb3b560c2715ac8287958e39" translate="yes" xml:space="preserve">
          <source>The Perl 5 source code is available at &amp;lt;&lt;a href=&quot;http://perl5.git.perl.org/perl.git&quot;&gt;http://perl5.git.perl.org/perl.git&lt;/a&gt;&amp;gt; and ExtUtils-CBuilder may be found in the</source>
          <target state="translated">Perl 5のソースコードは&amp;lt; &lt;a href=&quot;http://perl5.git.perl.org/perl.git&quot;&gt;http://perl5.git.perl.org/perl.git&lt;/a&gt; &amp;gt;にあり、ExtUtils-CBuilderは</target>
        </trans-unit>
        <trans-unit id="afeaca8df1b6424181f3a66ccbb3b6382d64c41b" translate="yes" xml:space="preserve">
          <source>The Perl API changes over time. New functions are added or the interfaces of existing functions are changed. The &lt;code&gt;Devel::PPPort&lt;/code&gt; module tries to provide compatibility code for some of these changes, so XS writers don't have to code it themselves when supporting multiple versions of Perl.</source>
          <target state="translated">Perl APIは時間とともに変化します。新しい関数が追加されるか、既存の関数のインターフェースが変更されます。 &lt;code&gt;Devel::PPPort&lt;/code&gt; モジュールは、Perlの複数のバージョンをサポートする場合XSライターはコードそれ自身に必要はありませんので、これらの変化のいくつかの互換性コードを提供しようとします。</target>
        </trans-unit>
        <trans-unit id="b3ddaaeb977cd171a0809e4c9d46db7115a9f674" translate="yes" xml:space="preserve">
          <source>The Perl Archive Toolkit ( &lt;a href=&quot;http://par.perl.org/&quot;&gt;http://par.perl.org/&lt;/a&gt; ) is Perl's analog to Java's JAR. It's freely available and on CPAN ( &lt;a href=&quot;http://search.cpan.org/dist/PAR/&quot;&gt;http://search.cpan.org/dist/PAR/&lt;/a&gt; ).</source>
          <target state="translated">Perl Archive Toolkit（&lt;a href=&quot;http://par.perl.org/&quot;&gt;http://par.perl.org/&lt;/a&gt;）は、JavaのJARに対するPerlの類似物です。自由に入手でき、CPAN（&lt;a href=&quot;http://search.cpan.org/dist/PAR/&quot;&gt;http://search.cpan.org/dist/PAR/&lt;/a&gt;）で入手できます。</target>
        </trans-unit>
        <trans-unit id="f01c36b942223cd02d483b2f8710a5fcbe7b3f1a" translate="yes" xml:space="preserve">
          <source>The Perl Authors Upload SErver (&lt;a href=&quot;http://pause.perl.org&quot;&gt;http://pause.perl.org&lt;/a&gt;), the gateway for &lt;b&gt;modules&lt;/b&gt; on their way to &lt;b&gt;CPAN&lt;/b&gt;.</source>
          <target state="translated">Perl作成者は、&lt;b&gt;CPANに&lt;/b&gt;向かう&lt;b&gt;モジュール&lt;/b&gt;のゲートウェイであるSErver（&lt;a href=&quot;http://pause.perl.org&quot;&gt;http://pause.perl.org&lt;/a&gt;）をアップロードし&lt;b&gt;ます&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b633506d32991c982d57371e8ff5e8e620c6651c" translate="yes" xml:space="preserve">
          <source>The Perl Compiler Backend</source>
          <target state="translated">Perl コンパイラのバックエンド</target>
        </trans-unit>
        <trans-unit id="528f579664ac974a57416a02a9f4d6f1fb344d5b" translate="yes" xml:space="preserve">
          <source>The Perl DLL is installed in \System\Libs\. The Perl libraries and extension DLLs are installed in \System\Libs\Perl\X.Y.Z\. The PerlApp is installed in \System\Apps\, and the SIS also installs a couple of demo scripts in \Perl\ (C:\Mydocs\Perl\ on Nokia 7710).</source>
          <target state="translated">Perl DLLがインストールされています。Perlのライブラリと拡張DLLは、「\System\Libs\PerlX.Y.Z.」にインストールされている。PerlAppは、「Gentlemen」にインストールされているし、SISも「Gentlemen」にデモスクリプトを2〜3本インストールしている。</target>
        </trans-unit>
        <trans-unit id="b0d4827468980c5df0784a8af4ce7848ecde4b66" translate="yes" xml:space="preserve">
          <source>The Perl Debugger</source>
          <target state="translated">Perl デバッガ</target>
        </trans-unit>
        <trans-unit id="003a86b939921d18b908afadb31a1624a5c158e1" translate="yes" xml:space="preserve">
          <source>The Perl Dev Kit ( &lt;a href=&quot;http://www.activestate.com/Products/Perl_Dev_Kit/&quot;&gt;http://www.activestate.com/Products/Perl_Dev_Kit/&lt;/a&gt; ) from ActiveState can &quot;Turn your Perl programs into ready-to-run executables for HP-UX, Linux, Solaris and Windows.&quot;</source>
          <target state="translated">ActiveState のPerl Dev Kit（&lt;a href=&quot;http://www.activestate.com/Products/Perl_Dev_Kit/&quot;&gt;http://www.activestate.com/Products/Perl_Dev_Kit/&lt;/a&gt;）は、「PerlプログラムをHP-UX、Linux、Solaris、およびWindows用の実行可能な実行可能ファイルに変える」ことができます。</target>
        </trans-unit>
        <trans-unit id="1c56af5a226a11b5977e777d4fb79e3fb6c794f9" translate="yes" xml:space="preserve">
          <source>The Perl Forked Debugger</source>
          <target state="translated">Perl フォークドデバッガ</target>
        </trans-unit>
        <trans-unit id="076abbe7cec0580634f13cf92571ce869da1bf79" translate="yes" xml:space="preserve">
          <source>The Perl Foundation is an advocacy organization for the Perl language which maintains the web site &lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt; as a general advocacy site for the Perl language. It uses the domain to provide general support services to the Perl community, including the hosting of mailing lists, web sites, and other services. There are also many other sub-domains for special topics like learning Perl and jobs in Perl, such as:</source>
          <target state="translated">Perl Foundationは、Webサイト&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;をPerl言語の一般的な擁護サイトとして維持しているPerl言語の擁護団体です。このドメインを使用して、メーリングリスト、Webサイト、およびその他のサービスのホスティングなど、Perlコミュニティに一般的なサポートサービスを提供します。また、Perlの学習やPerlでのジョブなど、次のような特別なトピックのためのサブドメインも多数あります。</target>
        </trans-unit>
        <trans-unit id="d177a21aa5a9fba680e844771ded5bc126e66e5c" translate="yes" xml:space="preserve">
          <source>The Perl Journal</source>
          <target state="translated">Perl ジャーナル</target>
        </trans-unit>
        <trans-unit id="b540cf823fa7d059f14c61e7a0646ec955faa0d9" translate="yes" xml:space="preserve">
          <source>The Perl Profiler</source>
          <target state="translated">Perl プロファイラ</target>
        </trans-unit>
        <trans-unit id="b016030ffb60704d0c5d1297b6257d8c67a0ebea" translate="yes" xml:space="preserve">
          <source>The Perl Review, &lt;a href=&quot;http://www.theperlreview.com&quot;&gt;http://www.theperlreview.com&lt;/a&gt; maintains a website and Google calendar (&lt;a href=&quot;http://www.theperlreview.com/community_calendar&quot;&gt;http://www.theperlreview.com/community_calendar&lt;/a&gt;) for tracking workshops, hackathons, Perl Mongers meetings, and other events. Views of this calendar are at &lt;a href=&quot;http://www.perl.org/events.html&quot;&gt;http://www.perl.org/events.html&lt;/a&gt; and &lt;a href=&quot;http://www.yapc.org&quot;&gt;http://www.yapc.org&lt;/a&gt;.</source>
          <target state="translated">Perlレビュー、&lt;a href=&quot;http://www.theperlreview.com&quot;&gt;http：&lt;/a&gt; //www.theperlreview.comは、ワークショップ、ハッカソン、Perl Mongers会議、およびその他のイベントを追跡するためのWebサイトとGoogleカレンダー（&lt;a href=&quot;http://www.theperlreview.com/community_calendar&quot;&gt;http://www.theperlreview.com/community_calendar&lt;/a&gt;）を維持しています。このカレンダーのビューは&lt;a href=&quot;http://www.perl.org/events.html&quot;&gt;http://www.perl.org/events.html&lt;/a&gt;と&lt;a href=&quot;http://www.yapc.org&quot;&gt;http://www.yapc.orgに&lt;/a&gt;あります。</target>
        </trans-unit>
        <trans-unit id="6955a584a390227f3bb9df6a8ce1cb0fe482186c" translate="yes" xml:space="preserve">
          <source>The Perl argument stack is used to store the values which are sent as parameters to the XSUB and to store the XSUB's return value(s). In reality all Perl functions (including non-XSUB ones) keep their values on this stack all the same time, each limited to its own range of positions on the stack. In this document the first position on that stack which belongs to the active function will be referred to as position 0 for that function.</source>
          <target state="translated">Perl の引数スタックは、XSUB にパラメータとして送られた値と、XSUB の戻り値を格納するために使用されます。実際には、すべてのPerl関数(XSUB以外のものも含む)は常にこのスタックに値を保持していますが、それぞれの関数はスタック上の位置の範囲に制限されています。このドキュメントでは、アクティブな関数に属するスタック上の最初の位置を、その関数の位置 0 と呼びます。</target>
        </trans-unit>
        <trans-unit id="1afd605920f29e13092c6aa9a01dbc8ba4878de1" translate="yes" xml:space="preserve">
          <source>The Perl build system starts with the</source>
          <target state="translated">Perl のビルドシステムは</target>
        </trans-unit>
        <trans-unit id="337328dc6570faaca13781601b8dac575ac43697" translate="yes" xml:space="preserve">
          <source>The Perl community has a rather large IRC presence. For starters, it has its own IRC network, &lt;a href=&quot;irc://irc.perl.org&quot;&gt;irc://irc.perl.org&lt;/a&gt;. General (not help-oriented) chat can be found at &lt;a href=&quot;irc://irc.perl.org/#perl&quot;&gt;irc://irc.perl.org/#perl&lt;/a&gt;. Many other more specific chats are also hosted on the network. Information about irc.perl.org is located on the network's website: &lt;a href=&quot;http://www.irc.perl.org&quot;&gt;http://www.irc.perl.org&lt;/a&gt;. For a more help-oriented #perl, check out &lt;a href=&quot;irc://irc.freenode.net/#perl&quot;&gt;irc://irc.freenode.net/#perl&lt;/a&gt;. Perl 6 development also has a presence in &lt;a href=&quot;irc://irc.freenode.net/#perl6&quot;&gt;irc://irc.freenode.net/#perl6&lt;/a&gt;. Most Perl-related channels will be kind enough to point you in the right direction if you ask nicely.</source>
          <target state="translated">Perlコミュニティには、かなり大きなIRCプレゼンスがあります。まず、独自のIRCネットワーク&lt;a href=&quot;irc://irc.perl.org&quot;&gt;irc：//irc.perl.orgがあり&lt;/a&gt;ます。一般的な（ヘルプ指向ではない）チャットは、&lt;a href=&quot;irc://irc.perl.org/#perl&quot;&gt;irc：//irc.perl.org/#perlにあり&lt;/a&gt;ます。他の多くのより具体的なチャットもネットワーク上でホストされています。 irc.perl.orgに関する情報は、ネットワークのWebサイト&lt;a href=&quot;http://www.irc.perl.org&quot;&gt;http://www.irc.perl.orgにあります&lt;/a&gt;。よりヘルプ指向の#perlについては、&lt;a href=&quot;irc://irc.freenode.net/#perl&quot;&gt;irc：//irc.freenode.net/#perlを&lt;/a&gt;チェックしてください。 Perl 6開発は&lt;a href=&quot;irc://irc.freenode.net/#perl6&quot;&gt;irc：//irc.freenode.net/#perl6に&lt;/a&gt;も存在します。ほとんどのPerl関連のチャネルは、適切に尋ねれば、正しい方向を示すのに十分親切です。</target>
        </trans-unit>
        <trans-unit id="1e71a9470b64a2480ea7c8c2886a8ca9bc8c982c" translate="yes" xml:space="preserve">
          <source>The Perl community is as diverse as Perl, and there is a large amount of evidence that the Perl users apply TMTOWTDI to all endeavors, not just programming. From websites, to IRC, to mailing lists, there is more than one way to get involved in the community.</source>
          <target state="translated">Perl のコミュニティは Perl と同様に多様であり、Perl のユーザがプログラミングだけでなく、すべての活動に TMTOWTDI を適用していることを示す多くの証拠があります。ウェブサイト、IRC、メーリングリストなど、コミュニティに参加する方法は1つだけではありません。</target>
        </trans-unit>
        <trans-unit id="75fca85980fcb62b1837d386b956468cb5d6629f" translate="yes" xml:space="preserve">
          <source>The Perl community is geared toward supporting the most recent releases, so you'll have an easier time finding help for those.</source>
          <target state="translated">Perl コミュニティは、最新のリリースをサポートすることを目的としているので、それらのヘルプを見つけるのがより簡単になります。</target>
        </trans-unit>
        <trans-unit id="660fe5fd6a64acb9219ffd0837bb1e282e990fa7" translate="yes" xml:space="preserve">
          <source>The Perl core has an extensive test suite. If you add new tests (or new modules with tests), you may need to update the</source>
          <target state="translated">Perl コアには大規模なテストスイートがあります。新しいテスト (あるいは新しいテスト付きモジュール)を追加する場合は</target>
        </trans-unit>
        <trans-unit id="8f13ce29b0232702f230a3b4d47d029f48d1ff8a" translate="yes" xml:space="preserve">
          <source>The Perl core uses a handful of keys in &lt;code&gt;%^H&lt;/code&gt; which do not follow this convention, because they predate it. Keys that follow the convention won't conflict with the core's historical keys.</source>
          <target state="translated">Perlコアは &lt;code&gt;%^H&lt;/code&gt; で少数のキーを使用しますが、これらのキーはそれよりも古いため、この規則には従いません。規約に従うキーは、コアの歴史的なキーと競合しません。</target>
        </trans-unit>
        <trans-unit id="40fdaea2f094775674cd40eee5e41200dd9b0a76" translate="yes" xml:space="preserve">
          <source>The Perl development team are called Perl 5 Porters, and their organization is described at &lt;a href=&quot;http://perldoc.perl.org/perlpolicy.html&quot;&gt;http://perldoc.perl.org/perlpolicy.html&lt;/a&gt;. The organizational rules really just boil down to one: Larry is always right, even when he was wrong.</source>
          <target state="translated">Perl開発チームはPerl 5ポーターと呼ばれ、その編成は&lt;a href=&quot;http://perldoc.perl.org/perlpolicy.html&quot;&gt;http://perldoc.perl.org/perlpolicy.htmlに&lt;/a&gt;記載されています。組織のルールは実際には1つに要約されます。ラリーは、間違っていたとしても、常に正しいです。</target>
        </trans-unit>
        <trans-unit id="85f7977946f345bcbaa5f5a8afb688bfb2d58512" translate="yes" xml:space="preserve">
          <source>The Perl development team occasionally make changes to the internal core of the language, but all possible efforts are made toward backward compatibility.</source>
          <target state="translated">Perl の開発チームは時折、言語の内部コアに変更を加えますが、可能な限りの努力は後方互換性を目指しています。</target>
        </trans-unit>
        <trans-unit id="bef6ea773b29bc42d6bc39580b413ba88c9c2941" translate="yes" xml:space="preserve">
          <source>The Perl engine/interpreter and the host are orthogonal entities. There could be one or more interpreters in a process, and one or more &quot;hosts&quot;, with free association between them.</source>
          <target state="translated">Perl のエンジン/インタプリタとホストは直交する存在です。プロセスの中には 1 つ以上のインタプリタと 1 つ以上の「ホスト」があり、それらの間には自由な関連付けがあります。</target>
        </trans-unit>
        <trans-unit id="be2ab355cd62828f3bbc09e8a520aa45842fe8c2" translate="yes" xml:space="preserve">
          <source>The Perl equivalent for this is &lt;code&gt;$#myarray&lt;/code&gt; .</source>
          <target state="translated">これに相当するPerlは &lt;code&gt;$#myarray&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3bbb1426c72d3038d784b1de2b64c8aea8f60fd1" translate="yes" xml:space="preserve">
          <source>The Perl executables can be easily rebuilt at any moment. Moreover, one can use the</source>
          <target state="translated">Perl の実行ファイルはいつでも簡単に再構築することができます。さらに</target>
        </trans-unit>
        <trans-unit id="d136d03bdd5714dfcd154602e7c27ff31ede4518" translate="yes" xml:space="preserve">
          <source>The Perl forked debugger places the debugger commands and output in a separate X-11 terminal window so that commands and output from multiple processes are not mixed together.</source>
          <target state="translated">Perl フォークドデバッガは、複数のプロセスからのコマンドと出力が混在しないように、デバッガのコマンドと出力を別の X-11 ターミナルウィンドウに配置します。</target>
        </trans-unit>
        <trans-unit id="fa02d08b07357f1b109729d24eaf520757219ddc" translate="yes" xml:space="preserve">
          <source>The Perl functions for dealing with sockets have the same names as the corresponding system calls in C, but their arguments tend to differ for two reasons. First, Perl filehandles work differently than C file descriptors. Second, Perl already knows the length of its strings, so you don't need to pass that information.</source>
          <target state="translated">ソケットを扱うPerlの関数は、C言語の対応するシステムコールと同じ名前を持っていますが、その引数は2つの理由で異なる傾向があります。第一に、Perl のファイルハンドルは C のファイルディスクリプタとは異なる動作をします。第二に、Perl は文字列の長さを既に知っているので、その情報を渡す必要がありません。</target>
        </trans-unit>
        <trans-unit id="92147dd8f1d29e8ce474756b4726d9b1d8e42e16" translate="yes" xml:space="preserve">
          <source>The Perl interface was written by Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;, and is released under the artistic license. Further modifications were made by Greg Bacon &amp;lt;gbacon@cs.uah.edu&amp;gt;, Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;, and Thomas Wegner &amp;lt;wegner_thomas@yahoo.com&amp;gt;. The C glob code has the following copyright:</source>
          <target state="translated">PerlインターフェースはNathan Torkington &amp;lt;gnat@frii.com&amp;gt;によって作成され、芸術的ライセンスの下でリリースされています。Greg Bacon &amp;lt;gbacon@cs.uah.edu&amp;gt;、Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、およびThomas Wegner &amp;lt;wegner_thomas@yahoo.com&amp;gt;がさらに変更を加えました。C globコードには次の著作権があります。</target>
        </trans-unit>
        <trans-unit id="99bc4ac3d59eed09e1d0f94b3a3f01535d2fc89d" translate="yes" xml:space="preserve">
          <source>The Perl interpreter can be regarded as a closed box: it has an API for feeding it code or otherwise making it do things, but it also has functions for its own use. This smells a lot like an object, and there are ways for you to build Perl so that you can have multiple interpreters, with one interpreter represented either as a C structure, or inside a thread-specific structure. These structures contain all the context, the state of that interpreter.</source>
          <target state="translated">Perl のインタプリタは閉じた箱のようなものと考えることができます。これはオブジェクトに似ていますが、Perl を構築して複数のインタプリタを持つことができるようにする方法があります。これらの構造体には、すべてのコンテキスト、そのインタプリタの状態が含まれています。</target>
        </trans-unit>
        <trans-unit id="4ec97d45bb2f6ea56e5a238f738362154db298f5" translate="yes" xml:space="preserve">
          <source>The Perl logo is a trademark of the Perl Foundation.</source>
          <target state="translated">PerlのロゴはPerl Foundationの商標です。</target>
        </trans-unit>
        <trans-unit id="6b8a4b8bd5fc4d36250e80003bd49d95bed77a10" translate="yes" xml:space="preserve">
          <source>The Perl model for function call and return values is simple: all functions are passed as parameters one single flat list of scalars, and all functions likewise return to their caller one single flat list of scalars. Any arrays or hashes in these call and return lists will collapse, losing their identities--but you may always use pass-by-reference instead to avoid this. Both call and return lists may contain as many or as few scalar elements as you'd like. (Often a function without an explicit return statement is called a subroutine, but there's really no difference from Perl's perspective.)</source>
          <target state="translated">関数の呼び出しと戻り値のPerlのモデルは単純です。すべての関数はパラメータとしてスカラの単一のフラットなリストを渡し、すべての関数は同様にスカラの単一のフラットなリストを呼び出し元に返します。これらの呼び出しリストと戻り値リストに含まれる配列やハッシュはすべて崩れてしまい、同一性を失ってしまいます。呼び出しリストと戻り値リストの両方には、スカラ要素をいくつでも、あるいはいくつでも含めることができます。(明示的なreturn文を持たない関数はサブルーチンと呼ばれることがよくありますが、Perlの観点からは違いはありません)</target>
        </trans-unit>
        <trans-unit id="b9ee0cf4ab63cf1be081346d4784ae92aedc21e4" translate="yes" xml:space="preserve">
          <source>The Perl motto is &quot;There's more than one way to do it.&quot; Divining how many more is left as an exercise to the reader.</source>
          <target state="translated">Perlのモットーは &quot;方法は一つではない &quot;です。あと何個あるのかは読者の課題として残されています。</target>
        </trans-unit>
        <trans-unit id="b25f4bf878cf14a357970d887adcbf624e87e118" translate="yes" xml:space="preserve">
          <source>The Perl parser will expand $variable and @variable references in regular expressions unless the delimiter is a single quote. Remember, too, that the right-hand side of a &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; substitution is considered a double-quoted string (see &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; for more details). Remember also that any regex special characters will be acted on unless you precede the substitution with \Q. Here's an example:</source>
          <target state="translated">Perlパーサーは、区切り文字が単一引用符でない限り、正規表現で$ variableおよび@variable参照を展開します。また、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 置換の右側は、二重引用符で囲まれた文字列と見なされることも覚えておいてください（詳細については、&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;を参照してください）。また、置換の前に\ Qを付けない限り、すべての正規表現の特殊文字が影響を受けることにも注意してください。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="0bc52b1056fd349e5d759d3b05d91376e2d9a16e" translate="yes" xml:space="preserve">
          <source>The Perl port has been done for the most part using the Symbian standard POSIX-ish STDLIB library. It is a reasonably complete library, but certain corners of such emulation libraries that tend to be left unimplemented on non-UNIX platforms have been left unimplemented also this time: fork(), signals(), user/group ids, select() working for sockets, non-blocking sockets, and so forth. See the file</source>
          <target state="translated">Perlの移植は、大部分がSymbian標準のPOSIX的なSTDLIBライブラリを使って行われています。それなりに完成されたライブラリですが、非UNIXプラットフォームでは実装されずに放置されがちなエミュレーションライブラリのある種のコーナーは、今回も実装されずに放置されています。ファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="b67868d8a32ed03bc87b830fb6a6b1a5f3f79a34" translate="yes" xml:space="preserve">
          <source>The Perl regular expression &lt;code&gt;\p{}&lt;/code&gt; and &lt;code&gt;\P{}&lt;/code&gt; constructs give access to most of the Unicode character properties. The table below shows all these constructs, both single and compound forms.</source>
          <target state="translated">Perl正規表現の &lt;code&gt;\p{}&lt;/code&gt; および &lt;code&gt;\P{}&lt;/code&gt; 構成は、ほとんどのUnicode文字プロパティへのアクセスを提供します。以下の表は、これらのすべての構成体（単一のフォームと複合フォームの両方）を示しています。</target>
        </trans-unit>
        <trans-unit id="f0e8425fc37fe67a70d8b01bf266a53e0f530848" translate="yes" xml:space="preserve">
          <source>The Perl source tree is big. Here's some of the thing you'll find in it:</source>
          <target state="translated">Perl のソースツリーは大きいです。その中にあるものをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="6a0d4acb6c550a60d6a38a5a63678cce3e904bee" translate="yes" xml:space="preserve">
          <source>The Perl subroutine,</source>
          <target state="translated">Perlのサブルーチンです。</target>
        </trans-unit>
        <trans-unit id="df3a691d5cbb91293ddf18af01bb5af5f01bbb73" translate="yes" xml:space="preserve">
          <source>The Perl syntax error message from the last &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; operator. If &lt;code&gt;$@&lt;/code&gt; is the null string, the last &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; parsed and executed correctly (although the operations you invoked may have failed in the normal fashion).</source>
          <target state="translated">最後の &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; 演算子からのPerl構文エラーメッセージ。場合は &lt;code&gt;$@&lt;/code&gt; ヌル文字列で、最後 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; （あなたが呼び出される操作は通常の方法で失敗しているかもしれないが）正しく解析および実行。</target>
        </trans-unit>
        <trans-unit id="968a791625fe0d4ef7287cb8aaab8e329d603dbe" translate="yes" xml:space="preserve">
          <source>The Perl test suite may still report some errors on the Hurd. The &quot;lib/anydbm&quot; and &quot;pragma/warnings&quot; tests will almost certainly fail. Both failures are not really specific to the Hurd, as indicated by the test suite output.</source>
          <target state="translated">Perl のテストスイートは、Hurd 上でまだいくつかのエラーを報告するかもしれません。lib/anydbm&quot; および &quot;pragma/warnings&quot; テストはほぼ確実に失敗します。どちらの失敗も、テストスイートの出力に示されているように、Hurd に特有のものではありません。</target>
        </trans-unit>
        <trans-unit id="f6abf53e543be5d8676f05668af9e144a63af4c4" translate="yes" xml:space="preserve">
          <source>The Perl variables that are available for interpolation into typemaps are the following:</source>
          <target state="translated">タイプマップへの補間に利用できるPerl変数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6bcd8c322dd20c222b91b35688318973e6596a5a" translate="yes" xml:space="preserve">
          <source>The Perl warning &quot;Wide character in ...&quot; is caused by such a character. With no specified encoding layer, Perl tries to fit things into a single byte. When it can't, it emits this warning (if warnings are enabled), and uses UTF-8 encoded data instead.</source>
          <target state="translated">このような文字が原因でPerlの警告「...のワイド文字」が発生します。エンコーディング層が指定されていない場合、Perl は 1 バイトに収まろうとします。それができない場合、Perl はこの警告を発し(警告が有効になっている場合)、代わりに UTF-8 でエンコードされたデータを使用します。</target>
        </trans-unit>
        <trans-unit id="4d7feb5052b0fb54136f812ed2c2ffa2175dab42" translate="yes" xml:space="preserve">
          <source>The Perl-QA list attempted to ensure backwards compatibility with &lt;a href=&quot;../test/harness&quot;&gt;Test::Harness&lt;/a&gt;. However, there are some minor differences.</source>
          <target state="translated">Perl-QAリストは、&lt;a href=&quot;../test/harness&quot;&gt;Test :: Harness&lt;/a&gt;との後方互換性を確保しようとしました。ただし、いくつかの小さな違いがあります。</target>
        </trans-unit>
        <trans-unit id="a9ec1c232da33c6ab26241322f9069a9704be0af" translate="yes" xml:space="preserve">
          <source>The PerlApp also is started when the &quot;Perl recognizer&quot; (also included and installed) detects a Perl file being activated through the GUI, and offers either to install it under \Perl (if the Perl file is in the inbox of the messaging application) or to run it (if the Perl file is under \Perl).</source>
          <target state="translated">PerlAppは、「Perl recognizer」(Perl recognizerも含まれており、インストールされています)が、GUIで起動されているPerlファイルを検出し、それを「\Perl」の下にインストールするか(Perlファイルがメッセージングアプリケーションの受信トレイにある場合)、実行するか(Perlファイルが「\Perl」の下にある場合)を提案して起動します。</target>
        </trans-unit>
        <trans-unit id="c6111a686e0ef0ac50573a59b08dc1b8aeb3287a" translate="yes" xml:space="preserve">
          <source>The PerlApp application demonstrates how to embed Perl interpreters to a Symbian application. The &quot;Time&quot; menu item runs the following Perl code: &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; &quot;Running in &quot;, $^O, &quot;\n&quot;, &lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt; &lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; , the &quot;Oneliner&quot; allows one to type in Perl code, and the &quot;Run&quot; opens a file chooser for selecting a Perl file to run.</source>
          <target state="translated">PerlAppアプリケーションは、PerlインタープリターをSymbianアプリケーションに埋め込む方法を示しています。 &quot;Time&quot;メニュー項目は次のPerlコードを &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; &quot;Running in &quot;, $^O, &quot;\n&quot;, &lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt; &lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; ます：&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; &quot;Running in&quot;、$ ^ O、 &quot;\ n&quot;、&lt;a href=&quot;functions/scalar&quot;&gt;scalar &lt;/a&gt; &lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;、 &quot;Oneliner&quot; can one type in Perl code、and the &quot;Run&quot; opens a file実行するPerlファイルを選択するためのチューザー。</target>
        </trans-unit>
        <trans-unit id="b43fd89b2979a98b7d902f7d0334218ba2ca529e" translate="yes" xml:space="preserve">
          <source>The PerlIO abstraction was introduced in perl5.003_02 but languished as just an abstraction until perl5.7.0. However during that time a number of perl extensions switched to using it, so the API is mostly fixed to maintain (source) compatibility.</source>
          <target state="translated">PerlIO の抽象化は perl5.003_02 で導入されましたが、Perl5.7.0 までは単なる抽象化として放置されていました。しかし、その間に多くのPerlの拡張機能がPerlIOを使用するように切り替えたため、APIはほとんどが(ソースの)互換性を維持するために固定されています。</target>
        </trans-unit>
        <trans-unit id="43641046aefdabfa554afe6cf89fa8594b9147ac" translate="yes" xml:space="preserve">
          <source>The PerlIO is set to textmode. Use PerlIO_binmode if this is not the desired mode.</source>
          <target state="translated">PerlIO は textmode に設定されています。これが希望するモードでない場合は、PerlIO_binmodeを使用してください。</target>
        </trans-unit>
        <trans-unit id="df2a9946f78c97c4cb0379505dfaf42cfc784763" translate="yes" xml:space="preserve">
          <source>The PerlIO::via module allows you to develop PerlIO layers in Perl, without having to go into the nitty gritty of programming C with XS as the interface to Perl.</source>
          <target state="translated">PerlIO::viaモジュールを使用すると、PerlへのインターフェースとしてXSを使用してC言語をプログラミングする必要がなく、PerlでPerlIOレイヤを開発することができます。</target>
        </trans-unit>
        <trans-unit id="69b9d42402dbac92bb5f313095f98e57d920e008" translate="yes" xml:space="preserve">
          <source>The Pod format is not necessarily sufficient for writing a book. Pod is just meant to be an idiot-proof common source for nroff, HTML, TeX, and other markup languages, as used for online documentation. Translators exist for &lt;b&gt;pod2text&lt;/b&gt;, &lt;b&gt;pod2html&lt;/b&gt;, &lt;b&gt;pod2man&lt;/b&gt; (that's for nroff(1) and troff(1)), &lt;b&gt;pod2latex&lt;/b&gt;, and &lt;b&gt;pod2fm&lt;/b&gt;. Various others are available in CPAN.</source>
          <target state="translated">ポッド形式は、本を書くために必ずしも十分ではありません。ポッドは、オンラインドキュメントで使用されているように、nroff、HTML、TeX、およびその他のマークアップ言語のばかばかしい共通ソースであることを意図しています。翻訳者のために存在&lt;b&gt;pod2text&lt;/b&gt;、&lt;b&gt;pod2html&lt;/b&gt;、&lt;b&gt;pod2man&lt;/b&gt;、（nroffの（1）とのtroff（1）のためです）&lt;b&gt;pod2latex&lt;/b&gt;、及び&lt;b&gt;pod2fm&lt;/b&gt;。 CPANでは他にもさまざまなものが利用できます。</target>
        </trans-unit>
        <trans-unit id="5181d340ea28e7004e1fc926376f0269c6a7af0c" translate="yes" xml:space="preserve">
          <source>The Pod parser normally expects to read octets and to convert those octets to characters based on the &lt;code&gt;=encoding&lt;/code&gt; declaration in the Pod source. Set this option to a true value to indicate that the Pod source is already a Perl character stream. This tells the parser to ignore any &lt;code&gt;=encoding&lt;/code&gt; command and to skip all the code paths involving decoding octets.</source>
          <target state="translated">ポッドパーサーは通常、オクテットを読み取り、それらのオクテットをポッドソースの &lt;code&gt;=encoding&lt;/code&gt; 宣言に基づいて文字に変換することを期待しています。このオプションをtrue値に設定して、ポッドソースがすでにPerl文字ストリームであることを示します。これは、パーサーに &lt;code&gt;=encoding&lt;/code&gt; コマンドを無視し、オクテットのデコードに関連するすべてのコードパスをスキップするように指示します。</target>
        </trans-unit>
        <trans-unit id="d54e40195036f1a1a1b5551f96370345ff64638a" translate="yes" xml:space="preserve">
          <source>The Pod::Simple parser expects to read &lt;b&gt;octets&lt;/b&gt;. The parser will decode the octets into Perl's internal character string representation using the value of the &lt;code&gt;=encoding&lt;/code&gt; declaration in the POD source.</source>
          <target state="translated">Pod :: Simpleパーサーは、&lt;b&gt;オクテットの&lt;/b&gt;読み取りを想定しています。パーサーは、PODソースの &lt;code&gt;=encoding&lt;/code&gt; 宣言の値を使用して、オクテットをPerlの内部文字列表現にデコードします。</target>
        </trans-unit>
        <trans-unit id="a52e0eb3298b4fa461fa923215cc1e681ac40256" translate="yes" xml:space="preserve">
          <source>The Pod::Usage distribution comes with a script pod2usage which offers a command line interface to the functionality of Pod::Usage. See &lt;a href=&quot;../pod2usage&quot;&gt;pod2usage&lt;/a&gt;.</source>
          <target state="translated">Pod :: Usageディストリビューションには、Pod :: Usageの機能へのコマンドラインインターフェースを提供するスクリプトpod2usageが付属しています。&lt;a href=&quot;../pod2usage&quot;&gt;pod2usageを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="27cf4d4fc397867d0e2a99e5b7bffdeae843c96c" translate="yes" xml:space="preserve">
          <source>The Portable Operating System Interface specification.</source>
          <target state="translated">ポータブル・オペレーティング・システム・インターフェースの仕様。</target>
        </trans-unit>
        <trans-unit id="355c15d3884285cbe9de6e8c0623457a61fdc6ca" translate="yes" xml:space="preserve">
          <source>The Problem</source>
          <target state="translated">問題点</target>
        </trans-unit>
        <trans-unit id="cca8ca027231a86237a6c4dda51f169cc4d16c32" translate="yes" xml:space="preserve">
          <source>The Pugs prototype Perl 6 Object Model uses C3</source>
          <target state="translated">Pugs のプロトタイプ Perl 6 オブジェクトモデルは C3 を使用しています。</target>
        </trans-unit>
        <trans-unit id="77d5d72ac418e20fd29b7eec3b6c8de1afc54920" translate="yes" xml:space="preserve">
          <source>The REGEXP struct is defined in</source>
          <target state="translated">REGEXP 構造体は</target>
        </trans-unit>
        <trans-unit id="2ad89d37eadf28843f6bcc04fe292798559736be" translate="yes" xml:space="preserve">
          <source>The REGEXP structure</source>
          <target state="translated">REGEXPの構造</target>
        </trans-unit>
        <trans-unit id="8da65302c118d1898dddaf19bb76877bb8166258" translate="yes" xml:space="preserve">
          <source>The REGEXP structure contains all the data that Perl needs to be aware of to properly work with the regular expression. It includes data about optimisations that Perl can use to determine if the regex engine should really be used, and various other control info that is needed to properly execute patterns in various contexts, such as if the pattern anchored in some way, or what flags were used during the compile, or if the program contains special constructs that Perl needs to be aware of.</source>
          <target state="translated">REGEXP構造体には、Perlが正規表現を適切に動作させるために必要なすべてのデータが含まれています。これには、正規表現エンジンが本当に使用されるべきかどうかを判断するためにPerlが使用できる最適化に関するデータや、パターンが何らかの方法で固定されているかどうか、コンパイル時にどのようなフラグが使用されているかどうか、プログラムにPerlが注意する必要がある特別な構造が含まれているかどうかなど、様々なコンテキストでパターンを適切に実行するために必要な他の様々な制御情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="1d6f38948819f825c1778442bfb0bf54fd236038" translate="yes" xml:space="preserve">
          <source>The REQUIRE: Keyword</source>
          <target state="translated">REQUIRE:キーワード</target>
        </trans-unit>
        <trans-unit id="eb7911fb319180325559ab93300e4a8e754d4918" translate="yes" xml:space="preserve">
          <source>The REQUIRE: keyword is used to indicate the minimum version of the &lt;b&gt;xsubpp&lt;/b&gt; compiler needed to compile the XS module. An XS module which contains the following statement will compile with only &lt;b&gt;xsubpp&lt;/b&gt; version 1.922 or greater:</source>
          <target state="translated">REQUIRE：キーワードは、XSモジュールのコンパイルに必要な&lt;b&gt;xsubpp&lt;/b&gt;コンパイラの最小バージョンを示すために使用されます。次のステートメントを含むXSモジュールは、&lt;b&gt;xsubpp&lt;/b&gt;バージョン1.922以降のみでコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="325d9dc6bcb33887233fc6bb3fee83c1db779aa6" translate="yes" xml:space="preserve">
          <source>The RETVAL Variable</source>
          <target state="translated">RETVAL変数</target>
        </trans-unit>
        <trans-unit id="2c001438878b5f3376fc8700b6556da0eb7ce7c1" translate="yes" xml:space="preserve">
          <source>The RETVAL variable is a special C variable that is declared automatically for you. The C type of RETVAL matches the return type of the C library function. The &lt;b&gt;xsubpp&lt;/b&gt; compiler will declare this variable in each XSUB with non-&lt;code&gt;void&lt;/code&gt; return type. By default the generated C function will use RETVAL to hold the return value of the C library function being called. In simple cases the value of RETVAL will be placed in ST(0) of the argument stack where it can be received by Perl as the return value of the XSUB.</source>
          <target state="translated">RETVAL変数は、自動的に宣言される特別なC変数です。RETVALのCタイプは、Cライブラリー関数の戻りタイプと一致します。&lt;b&gt;xsubppの&lt;/b&gt;コンパイラは、非と各XSUBにこの変数を宣言します &lt;code&gt;void&lt;/code&gt; の戻り値の型。デフォルトでは、生成されたC関数はRETVALを使用して、呼び出されているCライブラリ関数の戻り値を保持します。単純なケースでは、RETVALの値は引数スタックのST（0）に配置され、XSUBの戻り値としてPerlで受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="b5719fca838ea2f703064b736671d8a5c53c2b7c" translate="yes" xml:space="preserve">
          <source>The Ram is a cookbook with hundreds of examples of using Perl to accomplish specific tasks:</source>
          <target state="translated">The Ramは、Perlを使って特定のタスクを達成するための何百もの例が掲載された料理本です。</target>
        </trans-unit>
        <trans-unit id="bda5eb8009d503d3f7d7ac84a0313722c46a6dc4" translate="yes" xml:space="preserve">
          <source>The Rest</source>
          <target state="translated">残りの部分</target>
        </trans-unit>
        <trans-unit id="c06052540c4d2319036f128e767c17cbef7e664e" translate="yes" xml:space="preserve">
          <source>The Role of the typemap File in Your Distribution</source>
          <target state="translated">配信におけるタイプマップファイルの役割</target>
        </trans-unit>
        <trans-unit id="5afe900033efd0b8bef5b765a85f46485e313663" translate="yes" xml:space="preserve">
          <source>The SCOPE: Keyword</source>
          <target state="translated">SCOPE(スコープ)。キーワード</target>
        </trans-unit>
        <trans-unit id="3f77c1166b9eee5ec219ef962a60436e0a2f2130" translate="yes" xml:space="preserve">
          <source>The SCOPE: keyword allows scoping to be enabled for a particular XSUB. If enabled, the XSUB will invoke ENTER and LEAVE automatically.</source>
          <target state="translated">SCOPE:キーワードは、特定の XSUB に対してスコーピングを有効にすることを可能にします。有効にすると、XSUBは自動的にENTERとLEAVEを呼び出します。</target>
        </trans-unit>
        <trans-unit id="3f3c8dbe377ba2fb462f83142477acc2c9fed9b5" translate="yes" xml:space="preserve">
          <source>The SEEK_* constants can be imported from the &lt;code&gt;Fcntl&lt;/code&gt; module if you don't wish to use the numbers &lt;code&gt;0&lt;/code&gt;&lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; in your code.</source>
          <target state="translated">コードで &lt;code&gt;0&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; または &lt;code&gt;2&lt;/code&gt; の数字を使用したくない場合は、SECN_ *定数を &lt;code&gt;Fcntl&lt;/code&gt; モジュールからインポートできます。</target>
        </trans-unit>
        <trans-unit id="6874e0e71dff8b677770e211cb23f7a0bc03af61" translate="yes" xml:space="preserve">
          <source>The STDIN filehandle used by the command is inherited from Perl's STDIN. For example:</source>
          <target state="translated">コマンドで使用される STDIN ファイルハンドルは Perl の STDIN を継承しています。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c9698c556df2cef5c4ee4e944157366d894bd711" translate="yes" xml:space="preserve">
          <source>The SV arena serves the secondary purpose of allowing still-live SVs to be located and destroyed during final cleanup.</source>
          <target state="translated">SVアリーナは、まだ生きているSVを配置し、最終的なクリーンアップ中に破壊することを可能にするための第二の目的を果たしています。</target>
        </trans-unit>
        <trans-unit id="82e45de5e22cb3332054cbfb0b3a963e2aa8939b" translate="yes" xml:space="preserve">
          <source>The SV returned has a refcount of 1.</source>
          <target state="translated">返されたSVは1のリカウントを持っています。</target>
        </trans-unit>
        <trans-unit id="3397a37f03fe6e25c10e0df218712221b41b076a" translate="yes" xml:space="preserve">
          <source>The SV* corresponding to the $_ variable. Works even if there is a lexical $_ in scope.</source>
          <target state="translated">変数 $_に対応する SV*。スコープ内に辞書的な $_があっても動作します。</target>
        </trans-unit>
        <trans-unit id="166ec7ce6ae952f37ed9ee7074b722386bfc06c5" translate="yes" xml:space="preserve">
          <source>The SYS:/temp is preferred in Novell NetWare and the C:\system\temp for Symbian (the File::Spec::Win32 is used also for those platforms).</source>
          <target state="translated">Novell NetWareではSYS:/tempが好まれ、SymbianではC:\systemtempが好まれます(これらのプラットフォームではFile::Spec::Win32も使用されます)。</target>
        </trans-unit>
        <trans-unit id="c305a702522737f58ad2f086c3a8baae101bf7fa" translate="yes" xml:space="preserve">
          <source>The Safe extension module allows the creation of compartments in which perl code can be evaluated. Each compartment has</source>
          <target state="translated">Safe 拡張モジュールを使用すると、Perl コードを評価できるコンパートメントを作成することができます。各コンパートメントには</target>
        </trans-unit>
        <trans-unit id="f3ebdf6626009aca2f7b1117ac99eeb3a50e8a0f" translate="yes" xml:space="preserve">
          <source>The Second Rule of Sys::Syslog is:</source>
          <target state="translated">Sys::Syslogの第二のルールは</target>
        </trans-unit>
        <trans-unit id="59ce582565e3aa2e433ddd5ed3ee6bdecbd67e3d" translate="yes" xml:space="preserve">
          <source>The Secure Hash Standard (Draft FIPS PUB 180-4) can be found at:</source>
          <target state="translated">セキュアハッシュ標準(ドラフトFIPS PUB 180-4)は、以下に記載されています。</target>
        </trans-unit>
        <trans-unit id="a0cf9a0044474cf0b7a47510d7ab73b298c8894f" translate="yes" xml:space="preserve">
          <source>The SelfLoader can load stubs automatically at module initialization with the statement 'SelfLoader-&amp;gt;load_stubs()';, but you may wish to avoid having the stub loading overhead associated with your initialization (though note that the SelfLoader::load_stubs method will be called sooner or later - at latest when the first sub is being autoloaded). In this case, you can put the sub stubs before the __DATA__ token. This can be done manually, but this module allows automatic generation of the stubs.</source>
          <target state="translated">SelfLoaderは、モジュールの初期化時にステートメント 'SelfLoader-&amp;gt; load_stubs（）'を使用してスタブを自動的にロードできますが、初期化に関連するスタブロードのオーバーヘッドを避けたい場合があります（SelfLoader :: load_stubsメソッドが呼び出されることに注意してください）遅かれ早かれ-遅くとも最初のサブがオートロードされているとき）。この場合、__ DATA__トークンの前にサブスタブを置くことができます。これは手動で行うことができますが、このモジュールではスタブを自動生成できます。</target>
        </trans-unit>
        <trans-unit id="c273113828f1c56d85466a94fe42bd54d051b33a" translate="yes" xml:space="preserve">
          <source>The Seventh Rule of Sys::Syslog is:</source>
          <target state="translated">Sys::Syslogの第7のルールは</target>
        </trans-unit>
        <trans-unit id="48b5fdd7473bc512821401bfc6bdb55846607392" translate="yes" xml:space="preserve">
          <source>The Silmarillion</source>
          <target state="translated">シルマリオン</target>
        </trans-unit>
        <trans-unit id="3d872a2e6f315517170676af6926b6bd336f2e79" translate="yes" xml:space="preserve">
          <source>The Sixth Rule of Sys::Syslog is:</source>
          <target state="translated">Sys::Syslogの第6のルールは</target>
        </trans-unit>
        <trans-unit id="2615af73b1e9a8107739890b278d6bb8e8c58b89" translate="yes" xml:space="preserve">
          <source>The Socket library makes this slightly easier:</source>
          <target state="translated">ソケットライブラリを使うと、これが少しだけ簡単になります。</target>
        </trans-unit>
        <trans-unit id="0346baceabdf020f1948aaad1950b71c29c8313d" translate="yes" xml:space="preserve">
          <source>The Solaris FAQ is available at &lt;a href=&quot;http://www.science.uva.nl/pub/solaris/solaris2.html&quot;&gt;http://www.science.uva.nl/pub/solaris/solaris2.html&lt;/a&gt;.</source>
          <target state="translated">Solaris FAQは&lt;a href=&quot;http://www.science.uva.nl/pub/solaris/solaris2.html&quot;&gt;http://www.science.uva.nl/pub/solaris/solaris2.htmlから&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="c6524b148594d89baefb15f79bab2c7c15e79227" translate="yes" xml:space="preserve">
          <source>The Solution</source>
          <target state="translated">解決策</target>
        </trans-unit>
        <trans-unit id="f8bdb1b7f6851c01f4e6dd6b9335a25cbb9f32fe" translate="yes" xml:space="preserve">
          <source>The Source Filters distribution is available on CPAN, in</source>
          <target state="translated">ソースフィルターの配布は、CPANでは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c95deb069230cbfe43ae345e5dcb1b877dd184d4" translate="yes" xml:space="preserve">
          <source>The Storable engine can also store data into a Perl scalar instead, to later retrieve them. This is mainly used to freeze a complex structure in some safe compact memory place (where it can possibly be sent to another process via some IPC, since freezing the structure also serializes it in effect). Later on, and maybe somewhere else, you can thaw the Perl scalar out and recreate the original complex structure in memory.</source>
          <target state="translated">Storableエンジンは、データをPerlのスカラーに保存して、後からデータを取得することもできます。これは主に、複雑な構造体を安全なコンパクトなメモリ上でフリーズさせるために使用されます(IPCを介して別のプロセスに送信することができます。)後で、あるいはどこか他の場所で、Perl のスカラーを解凍して、メモリ内の元の複雑な構造体を再作成することができます。</target>
        </trans-unit>
        <trans-unit id="b46a98161104ffbf830836edabb2204067559b45" translate="yes" xml:space="preserve">
          <source>The Storable package brings persistence to your Perl data structures containing SCALAR, ARRAY, HASH or REF objects, i.e. anything that can be conveniently stored to disk and retrieved at a later time.</source>
          <target state="translated">Storable パッケージは、SCALAR,ARRAY,HASH,REF オブジェクトを含む Perl のデータ構造に永続性をもたらします。</target>
        </trans-unit>
        <trans-unit id="1c31479831ac23c24002214051aef3521fbb967b" translate="yes" xml:space="preserve">
          <source>The Sun Managers' FAQ is available at &lt;a href=&quot;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&quot;&gt;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&lt;/a&gt;</source>
          <target state="translated">Sun ManagerのFAQは、&lt;a href=&quot;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&quot;&gt;ftp：//ftp.cs.toronto.edu/pub/jdd/sunmanagers/faqから&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="6e4005ffb38cdcce66cf2552b3af0aed0d38d327" translate="yes" xml:space="preserve">
          <source>The Symbian port is licensed under the same terms as Perl itself.</source>
          <target state="translated">Symbian 移植版は Perl 自体と同じ条件でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="2d3f94b6eeafe888e9cb15f1090b03b3cc5b3e69" translate="yes" xml:space="preserve">
          <source>The Syntax of Variable Names</source>
          <target state="translated">変数名の構文</target>
        </trans-unit>
        <trans-unit id="0dcb2ce1d39ebcd7787f9ace607f3511d6d60bc4" translate="yes" xml:space="preserve">
          <source>The SysV IPC code above was written long ago, and it's definitely clunky looking. For a more modern look, see the IPC::SysV module.</source>
          <target state="translated">上のSysV IPCコードはかなり前に書かれたもので、見た目は確かに不格好です。より現代的な見た目にするには、IPC::SysV モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="81ef1999f4ab1d77c16c0134c1c911b0b6e377cd" translate="yes" xml:space="preserve">
          <source>The TEMPLATE has the same format as in the &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; function. Here's a subroutine that does substring:</source>
          <target state="translated">TEMPLATEは、 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 関数と同じ形式です。次に、部分文字列を実行するサブルーチンを示します。</target>
        </trans-unit>
        <trans-unit id="14ab3be603ef17e174d5422d8fa9db4cbcd8a394" translate="yes" xml:space="preserve">
          <source>The TEMPLATE has the same format as in the &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; function. Here's a subroutine that does substring:</source>
          <target state="translated">TEMPLATEは、 &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 関数と同じ形式です。次に、部分文字列を実行するサブルーチンを示します。</target>
        </trans-unit>
        <trans-unit id="c84fad0e6672900e0ccb385df9c5a53aa073119f" translate="yes" xml:space="preserve">
          <source>The TEMPLATE is a sequence of characters that give the order and type of values, as follows:</source>
          <target state="translated">TEMPLATEは、以下のように、値の順序と種類を与える文字列です。</target>
        </trans-unit>
        <trans-unit id="aa18d821da8b238046aafed6e970f790f7308b97" translate="yes" xml:space="preserve">
          <source>The TTY to use for debugging I/O.</source>
          <target state="translated">デバッグI/Oに使用するTTYです。</target>
        </trans-unit>
        <trans-unit id="28ac83583a93c3bbe04e5be7ac1ae0bf8d97eb60" translate="yes" xml:space="preserve">
          <source>The TYPEMAP file</source>
          <target state="translated">TYPEMAPファイル</target>
        </trans-unit>
        <trans-unit id="10a06ea76a05d039fe9de3770c4f7ea4ca5db2f3" translate="yes" xml:space="preserve">
          <source>The TYPEMAP: Keyword</source>
          <target state="translated">TYPEMAPです。キーワード</target>
        </trans-unit>
        <trans-unit id="a995c45f782f6eac7b2e49619c36fb98f70351d5" translate="yes" xml:space="preserve">
          <source>The T_SYSRET typemap is used to process return values from system calls. It is only meaningful when passing values from C to perl (there is no concept of passing a system return value from Perl to C).</source>
          <target state="translated">T_SYSRET型マップは、システムコールからの戻り値を処理するために使用されます。Cからperlに値を渡す場合にのみ意味があります(PerlからCにシステムの戻り値を渡すという概念はありません)。</target>
        </trans-unit>
        <trans-unit id="c00d492559cf23114ccf6a4416bb2a3622dd118a" translate="yes" xml:space="preserve">
          <source>The Tale of the Children of Hurin</source>
          <target state="translated">フーリンの子供たちの物語</target>
        </trans-unit>
        <trans-unit id="dc20618b36ece0cca578d0aaf6a793d399b51768" translate="yes" xml:space="preserve">
          <source>The Tamil digits (U+0BE6 - U+0BEF) can also legally be used in old-style Tamil numbers in which they would appear no more than one in a row, separated by characters that mean &quot;times 10&quot;, &quot;times 100&quot;, etc. (See &lt;a href=&quot;http://www.unicode.org/notes/tn21&quot;&gt;http://www.unicode.org/notes/tn21&lt;/a&gt;.)</source>
          <target state="translated">タミル語の数字（U + 0BE6-U + 0BEF）は、「10倍」、「100倍」を意味する文字で区切られた、連続して1つ以下で表示される古いスタイルのタミル語でも合法的に使用できます。 、など（&lt;a href=&quot;http://www.unicode.org/notes/tn21&quot;&gt;http://www.unicode.org/notes/tn21を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="47ba114bf39e8b27a93263e54d8b1d42bd44b898" translate="yes" xml:space="preserve">
          <source>The Term::ReadKey module from CPAN may be easier to use. Recent versions include also support for non-portable systems as well.</source>
          <target state="translated">CPANのTerm::ReadKeyモジュールの方が使いやすいかもしれません。最近のバージョンでは、非携帯システムにも対応しています。</target>
        </trans-unit>
        <trans-unit id="35a1f7393254a3b1337f16135889cbf5d4ddbd76" translate="yes" xml:space="preserve">
          <source>The Third Rule of Sys::Syslog is:</source>
          <target state="translated">Sys::Syslogの第三のルールは</target>
        </trans-unit>
        <trans-unit id="93fb358185964087944f1d6c1078da04b430b4f0" translate="yes" xml:space="preserve">
          <source>The Tree subsubsection in XML::Parser</source>
          <target state="translated">XML::Parserのツリーサブセクション</target>
        </trans-unit>
        <trans-unit id="8dd1d72b0140a01ec4804e7eb5bb38229499e0d2" translate="yes" xml:space="preserve">
          <source>The U/WIN environment for Win32, &lt;a href=&quot;http://www.research.att.com/sw/tools/uwin/&quot;&gt;http://www.research.att.com/sw/tools/uwin/&lt;/a&gt;</source>
          <target state="translated">Win32のU / WIN環境、&lt;a href=&quot;http://www.research.att.com/sw/tools/uwin/&quot;&gt;http：//www.research.att.com/sw/tools/uwin/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="769648b0d99f3965f04ad4c0ff49f028dec18b56" translate="yes" xml:space="preserve">
          <source>The UNICODE_WARN_NONCHAR and UNICODE_DISALLOW_NONCHAR flags affect how the function handles a Unicode non-character. And likewise, the UNICODE_WARN_SUPER and UNICODE_DISALLOW_SUPER flags affect the handling of code points that are above the Unicode maximum of 0x10FFFF. Code points above 0x7FFF_FFFF (which are even less portable) can be warned and/or disallowed even if other above-Unicode code points are accepted, by the UNICODE_WARN_FE_FF and UNICODE_DISALLOW_FE_FF flags.</source>
          <target state="translated">UNICODE_WARN_NONCHAR および UNICODE_DISALLOW_NONCHAR フラグは、関数が Unicode 非文字をどのように処理するかに影響します。同様に、UNICODE_WARN_SUPER および UNICODE_DISALLOW_SUPER フラグは、Unicode の最大値 0x10FFFF を超えるコードポイントの処理に影響を与えます。0x7FFF_FFFF より上のコード点(これはさらに移植性が低い)は、UNICODE_WARN_FE_FF ・ UNICODE_DISALLOW_FE_FF フラグによって、他の上記 Unicode コード点が受け入れられていても警告されたり禁止されたりすることができます。</target>
        </trans-unit>
        <trans-unit id="b1a9962a264046baa6e654280499186de4c8dcb8" translate="yes" xml:space="preserve">
          <source>The UNIVERSAL Class</source>
          <target state="translated">ユニバーサルクラス</target>
        </trans-unit>
        <trans-unit id="626ffdf925f7f1a1535b1e7a24ab5f1836995ec2" translate="yes" xml:space="preserve">
          <source>The URL or relative path of a CSS file to include. This option is not set by default.</source>
          <target state="translated">インクルードするCSSファイルのURLまたは相対パス。このオプションはデフォルトでは設定されていません。</target>
        </trans-unit>
        <trans-unit id="40bee207a472a4fd5b0841568ca70dbba8442ce0" translate="yes" xml:space="preserve">
          <source>The URL or relative path of a JavaScript file to pull in. This option is not set by default.</source>
          <target state="translated">プルインするJavaScriptファイルのURLまたは相対パス。このオプションはデフォルトでは設定されていません。</target>
        </trans-unit>
        <trans-unit id="da88ae39f79698f8a366077011136f1217b89d12" translate="yes" xml:space="preserve">
          <source>The USE_PERLIO implementation is described in &lt;a href=&quot;perliol&quot;&gt;perliol&lt;/a&gt;.</source>
          <target state="translated">USE_PERLIOの実装はperliolで説明されてい&lt;a href=&quot;perliol&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5daf05eaea510ba5b0017fb9c306e9890c51ff94" translate="yes" xml:space="preserve">
          <source>The UTF-32 family is pretty much like the UTF-16 family, except that the units are 32-bit, and therefore the surrogate scheme is not needed. UTF-32 is a fixed-width encoding. The &lt;code&gt;BOM&lt;/code&gt; signatures are &lt;code&gt;0x00 0x00 0xFE 0xFF&lt;/code&gt; for BE and &lt;code&gt;0xFF 0xFE 0x00 0x00&lt;/code&gt; for LE.</source>
          <target state="translated">UTF-32ファミリーは、単位が32ビットであることを除いて、UTF-16ファミリーとほとんど同じです。そのため、サロゲート方式は必要ありません。UTF-32は固定幅エンコーディングです。 &lt;code&gt;BOM&lt;/code&gt; のシグネチャは &lt;code&gt;0x00 0x00 0xFE 0xFF&lt;/code&gt; BEおよび &lt;code&gt;0xFF 0xFE 0x00 0x00&lt;/code&gt; LEのために。</target>
        </trans-unit>
        <trans-unit id="1dd8debe441de21cb20cb60141841b3943f5b160" translate="yes" xml:space="preserve">
          <source>The UTF8 flag</source>
          <target state="translated">UTF8 フラグ</target>
        </trans-unit>
        <trans-unit id="e84247eff9f0cf26586d5f7b3851d2932bd10a42" translate="yes" xml:space="preserve">
          <source>The UTF8 flag, also called SvUTF8, is an internal flag that indicates that the current internal representation is UTF-8. Without the flag, it is assumed to be ISO-8859-1. Perl converts between these automatically. (Actually Perl usually assumes the representation is ASCII; see &lt;a href=&quot;#Why-do-regex-character-classes-sometimes-match-only-in-the-ASCII-range%3f&quot;&gt;Why do regex character classes sometimes match only in the ASCII range?&lt;/a&gt; above.)</source>
          <target state="translated">UTF8フラグはSvUTF8とも呼ばれ、現在の内部表現がUTF-8であることを示す内部フラグです。フラグがない場合は、ISO-8859-1と見なされます。Perlはこれらの間を自動的に変換します。（実際には、Perlは通常、表現がASCIIであると想定しています。上記の&lt;a href=&quot;#Why-do-regex-character-classes-sometimes-match-only-in-the-ASCII-range%3f&quot;&gt;「正規表現文字クラスがASCII範囲でのみ一致することがあるの&lt;/a&gt;はなぜですか？」を参照してください。）</target>
        </trans-unit>
        <trans-unit id="0c156f969a0dd40349df4b801ec75724f31841f0" translate="yes" xml:space="preserve">
          <source>The UTF8_CHECK_ONLY flag overrides the behavior when a non-allowed (by other flags) malformation is found. If this flag is set, the routine assumes that the caller will raise a warning, and this function will silently just set &lt;code&gt;retlen&lt;/code&gt; to &lt;code&gt;-1&lt;/code&gt; (cast to &lt;code&gt;STRLEN&lt;/code&gt; ) and return zero.</source>
          <target state="translated">UTF8_CHECK_ONLYフラグは、許可されていない（他のフラグによる）奇形が見つかった場合の動作をオーバーライドします。このフラグが設定されている場合は、ルーチンは、呼び出し側が警告を発生することを前提としており、この機能は黙っだけ設定されます &lt;code&gt;retlen&lt;/code&gt; に &lt;code&gt;-1&lt;/code&gt; （へのキャスト &lt;code&gt;STRLEN&lt;/code&gt; ）とゼロを返します。</target>
        </trans-unit>
        <trans-unit id="fe051c2554d575b5ef8dd3483cd37e0f3f831882" translate="yes" xml:space="preserve">
          <source>The Unicode &lt;code&gt;Script&lt;/code&gt; and &lt;code&gt;Script_Extensions&lt;/code&gt; properties give what script a given character is in. Either property can be specified with the compound form like &lt;code&gt;\p{Script=Hebrew}&lt;/code&gt; (short: &lt;code&gt;\p{sc=hebr}&lt;/code&gt; ), or &lt;code&gt;\p{Script_Extensions=Javanese}&lt;/code&gt; (short: &lt;code&gt;\p{scx=java}&lt;/code&gt; ). In addition, Perl furnishes shortcuts for all &lt;code&gt;Script&lt;/code&gt; property names. You can omit everything up through the equals (or colon), and simply write &lt;code&gt;\p{Latin}&lt;/code&gt; or &lt;code&gt;\P{Cyrillic}&lt;/code&gt; . (This is not true for &lt;code&gt;Script_Extensions&lt;/code&gt; , which is required to be written in the compound form.)</source>
          <target state="translated">Unicode &lt;code&gt;Script&lt;/code&gt; プロパティと &lt;code&gt;Script_Extensions&lt;/code&gt; プロパティは、特定の文字が含まれているスクリプトを示します。どちらのプロパティも、 &lt;code&gt;\p{Script=Hebrew}&lt;/code&gt; （省略形： &lt;code&gt;\p{sc=hebr}&lt;/code&gt; ）または &lt;code&gt;\p{Script_Extensions=Javanese}&lt;/code&gt; ような複合形式で指定できます。Javanese}（省略形： &lt;code&gt;\p{scx=java}&lt;/code&gt; ）。さらに、Perlはすべての &lt;code&gt;Script&lt;/code&gt; プロパティ名のショートカットを提供します。等号（またはコロン）までをすべて省略して、単に &lt;code&gt;\p{Latin}&lt;/code&gt; または &lt;code&gt;\P{Cyrillic}&lt;/code&gt; と書くことができます。 （これは、複合形式で記述する必要がある &lt;code&gt;Script_Extensions&lt;/code&gt; には当てはまりません。）</target>
        </trans-unit>
        <trans-unit id="68ace88196ee8ab90b1eb6e05c27ca6293cc1949" translate="yes" xml:space="preserve">
          <source>The Unicode &lt;code&gt;\p{Script}&lt;/code&gt; property is used to categorize every Unicode character into the language script it is written in. For example, English, French, and a bunch of other European languages are written in the Latin script. But there is also the Greek script, the Thai script, the Katakana script, etc. You can test whether a character is in a particular script with, for example &lt;code&gt;\p{Latin}&lt;/code&gt; , &lt;code&gt;\p{Greek}&lt;/code&gt; , or &lt;code&gt;\p{Katakana}&lt;/code&gt; . To test if it isn't in the Balinese script, you would use &lt;code&gt;\P{Balinese}&lt;/code&gt; .</source>
          <target state="translated">Unicode &lt;code&gt;\p{Script}&lt;/code&gt; プロパティは、すべてのUnicode文字をそれが記述されている言語スクリプトに分類するために使用されます。たとえば、英語、フランス語、およびその他のヨーロッパ言語の多くは、ラテン文字で記述されます。しかし、ギリシャ文字、タイ文字、カタカナ文字などもあります。たとえば、 &lt;code&gt;\p{Latin}&lt;/code&gt; 、 &lt;code&gt;\p{Greek}&lt;/code&gt; 、 &lt;code&gt;\p{Katakana}&lt;/code&gt; などを使用して、文字が特定の文字であるかどうかをテストできます。}。バリ語のスクリプトに含まれていないかどうかをテストするには、 &lt;code&gt;\P{Balinese}&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="c137959e417f1d80c5a78f30067a032e5b5cba1e" translate="yes" xml:space="preserve">
          <source>The Unicode CLDR project extracts the POSIX portion of many of its locales, available at</source>
          <target state="translated">Unicode CLDR プロジェクトは多くのロケールの POSIX 部分を抽出しています。</target>
        </trans-unit>
        <trans-unit id="d486f8bf02133ca434524335056eb02772644059" translate="yes" xml:space="preserve">
          <source>The Unicode Character Map</source>
          <target state="translated">ユニコード文字マップ</target>
        </trans-unit>
        <trans-unit id="c5ce90a3e4de6a4acbbf53c0744b1a0991c6efd2" translate="yes" xml:space="preserve">
          <source>The Unicode Consortium has a list of articles and books, some of which give a much more in depth treatment of Unicode: &lt;a href=&quot;http://unicode.org/resources/readinglist.html&quot;&gt;http://unicode.org/resources/readinglist.html&lt;/a&gt;</source>
          <target state="translated">Unicodeコンソーシアムには記事と本のリストがあり、そのうちのいくつかはUnicodeのより深い扱いを提供します：&lt;a href=&quot;http://unicode.org/resources/readinglist.html&quot;&gt;http&lt;/a&gt; : //unicode.org/resources/readinglist.html</target>
        </trans-unit>
        <trans-unit id="6f47c9f664ce4e52a0db000d2410941371e77032" translate="yes" xml:space="preserve">
          <source>The Unicode Standard, Version 6.1</source>
          <target state="translated">ユニコード標準、バージョン6.1</target>
        </trans-unit>
        <trans-unit id="ceaf176fe24089b589f5a8df64bfcb78329c82a1" translate="yes" xml:space="preserve">
          <source>The Unicode character sets associates characters with integers. Encoding these numbers in an equal number of bytes would more than double the requirements for storing texts written in Latin alphabets. The UTF-8 encoding avoids this by storing the most common (from a western point of view) characters in a single byte while encoding the rarer ones in three or more bytes.</source>
          <target state="translated">Unicode 文字セットは、文字を整数に関連付けます。こ れ ら の数値を同数のバ イ ト 数でエン コ ーデ ィ ン グす る と 、 ラ テ ン グ ア ル フ ァ ベ ッ ト で書かれたテ キ ス ト を格納す る ための要件が 2 倍以上にな る こ と にな り ます。UTF-8 エン コ ーデ ィ ン グは、最も一般的な (西洋的な観点から見て)キ ャ ラ ク タ を 1 バ イ ト 内に格納する一方で、稀なキ ャ ラ ク タ を 3 バ イ ト 以上にエン コ ーデ ィ ン グす る こ と に よ っ て こ れを回避 し ます。</target>
        </trans-unit>
        <trans-unit id="b01639a1272db3c72594d5482698c9a198da2486" translate="yes" xml:space="preserve">
          <source>The Unicode code points are just abstract numbers. To input and output these abstract numbers, the numbers must be</source>
          <target state="translated">Unicode コードポイントは単なる抽象的な数値です。これらの抽象的な数値を入力して出力するには、その数値は</target>
        </trans-unit>
        <trans-unit id="fee82003cf69ee996e6b6206be19d9eb1e9b4ae7" translate="yes" xml:space="preserve">
          <source>The Unicode data base is delivered in two different formats. The XML version is valid for more modern Unicode releases. The other version is a collection of files. The two are intended to give equivalent information. Perl uses the older form; this allows you to recompile Perl to use early Unicode releases.</source>
          <target state="translated">Unicode デー タ ベース は 2 種類の形式で提供 さ れます。XMLバージョンは、より最新のUnicodeリリースで有効です。もう一つのバージョンはファイルの集合体です。この 2 つは同等の情報を提供することを目的としています。Perl は古い形式を使用します。これにより、Perl を再コンパイルして初期の Unicode リリースを使用することができます。</target>
        </trans-unit>
        <trans-unit id="0af64faddaa46b640051dd4c06cacd9bdf1c61ba" translate="yes" xml:space="preserve">
          <source>The Unicode name for each of the control characters (such as LINE FEED) is the empty string. However almost all had names assigned by other standards, such as the ASCII Standard, or were in common use. &lt;code&gt;viacode&lt;/code&gt; returns these names as the &quot;best&quot; ones available. Unicode 6.1 has created Name_Aliases for each of them, including alternate names, like NEW LINE. &lt;code&gt;viacode&lt;/code&gt; uses the original name, &quot;LINE FEED&quot; in preference to the alternate. Similarly the name returned for U+FEFF is &quot;ZERO WIDTH NO-BREAK SPACE&quot;, not &quot;BYTE ORDER MARK&quot;.</source>
          <target state="translated">各制御文字（LINE FEEDなど）のUnicode名は空の文字列です。ただし、ほとんどすべての名前がASCII標準などの他の標準によって割り当てられているか、一般的に使用されていました。 &lt;code&gt;viacode&lt;/code&gt; は、これらの名前を利用可能な「最良の」名前として返します。 Unicode 6.1は、NEW LINEなどの代替名を含め、それぞれにName_Aliasesを作成しました。 &lt;code&gt;viacode&lt;/code&gt; は元の名前である「LINE FEED」を代替に優先して使用します。同様に、U + FEFFに対して返される名前は、「BYTE ORDER MARK」ではなく「ZERO WIDTH NO-BREAK SPACE」です。</target>
        </trans-unit>
        <trans-unit id="1ac858cb298c00054e86b0d115cb91b95f10f3cf" translate="yes" xml:space="preserve">
          <source>The Unicode standard prefers using hexadecimal notation because that more clearly shows the division of Unicode into blocks of 256 characters. Hexadecimal is also simply shorter than decimal. You can use decimal notation, too, but learning to use hexadecimal just makes life easier with the Unicode standard. The &lt;code&gt;U+HHHH&lt;/code&gt; notation uses hexadecimal, for example.</source>
          <target state="translated">Unicode標準では、Unicodeの256文字のブロックへの分割がより明確に示されているため、16進表記の使用を推奨しています。16進数も10進数よりも短いだけです。10進表記も使用できますが、16進表記を使用することを学ぶと、Unicode標準でより簡単になります。 &lt;code&gt;U+HHHH&lt;/code&gt; の表記は、例えば16進数を使用します。</target>
        </trans-unit>
        <trans-unit id="e6fd7f938d86967a9161a418271cce0d06cd2600" translate="yes" xml:space="preserve">
          <source>The Unicode standard prefers using hexadecimal notation for the code points. If numbers like &lt;code&gt;0x0041&lt;/code&gt; are unfamiliar to you, take a peek at a later section, &lt;a href=&quot;#Hexadecimal-Notation&quot;&gt;Hexadecimal Notation&lt;/a&gt;. The Unicode standard uses the notation &lt;code&gt;U+0041 LATIN CAPITAL LETTER A&lt;/code&gt;, to give the hexadecimal code point and the normative name of the character.</source>
          <target state="translated">Unicode標準では、コードポイントに16進表記を使用することを推奨しています。 &lt;code&gt;0x0041&lt;/code&gt; のような数字がよくわからない場合は、後のセクション「&lt;a href=&quot;#Hexadecimal-Notation&quot;&gt;16進表記」を参照してください&lt;/a&gt;。Unicode標準では、表記 &lt;code&gt;U+0041 LATIN CAPITAL LETTER A&lt;/code&gt; を使用して、16進コードポイントと文字の標準名を指定します。</target>
        </trans-unit>
        <trans-unit id="c02514a64c1d2f4e4fce35a40ef0864ea99b3007" translate="yes" xml:space="preserve">
          <source>The Unicode::Collate module for perl was written by SADAHIRO Tomoyuki, &amp;lt;SADAHIRO@cpan.org&amp;gt;. This module is Copyright(C) 2001-2014, SADAHIRO Tomoyuki. Japan. All rights reserved.</source>
          <target state="translated">perl用のUnicode :: Collat​​eモジュールは、SADAHIRO Tomoyuki、&amp;lt;SADAHIRO@cpan.org&amp;gt;によって作成されました。このモジュールはCopyright（C）2001-2014、Sadahiro Hiromoyukiです。日本。全著作権所有。</target>
        </trans-unit>
        <trans-unit id="473e3f8c820ceadead01839cdf7e14621c8d192f" translate="yes" xml:space="preserve">
          <source>The Unicode::UCD module offers a series of functions that provide a simple interface to the Unicode Character Database.</source>
          <target state="translated">Unicode::UCDモジュールは、Unicode文字データベースへのシンプルなインターフェースを提供する一連の関数を提供します。</target>
        </trans-unit>
        <trans-unit id="26e3ce0808d98a59d29700d316741aae764f2a61" translate="yes" xml:space="preserve">
          <source>The Unix System V IPC (&lt;code&gt;msg*(), sem*(), shm*()&lt;/code&gt; ) is not available even on all Unix platforms.</source>
          <target state="translated">Unix System V IPC（ &lt;code&gt;msg*(), sem*(), shm*()&lt;/code&gt; ）は、すべてのUnixプラットフォームでも使用できません。</target>
        </trans-unit>
        <trans-unit id="fae3b6a0c7efbf25175bd611a319e0fb66e5613e" translate="yes" xml:space="preserve">
          <source>The Unix column assumes that you are not accessing a serial line (like a tty) in canonical mode. If you are, then CR on input becomes &quot;\n&quot;, and &quot;\n&quot; on output becomes CRLF.</source>
          <target state="translated">Unix の列は、カノニカル・モードでシリアル・ライン(tty のような)にアクセスしていないことを前提としています。アクセスしている場合、入力のCRは&quot;\n &quot;になり、出力の&quot;\n &quot;はCRLFになる。</target>
        </trans-unit>
        <trans-unit id="dd39418cfe05cee0fae6b087e55e6c5b32837941" translate="yes" xml:space="preserve">
          <source>The Unix emulation library's translation of filenames to native assumes that this sort of translation is required, and it allows a user-defined list of known suffixes that it will transpose in this fashion. This may seem transparent, but consider that with these rules</source>
          <target state="translated">Unixエミュレーションライブラリのファイル名のネイティブへの変換は、この種の変換が必要であることを前提としており、この方法で変換する既知のサフィックスのユーザー定義リストを許可しています。これは透明に見えるかもしれませんが、以下のルールを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="fb551ea7181334bc4b0216d63d17835797e645a3" translate="yes" xml:space="preserve">
          <source>The Unix permission &lt;code&gt;rwxr-x---&lt;/code&gt; is represented as three sets of three bits, or three octal digits: &lt;code&gt;0750&lt;/code&gt; (the leading 0 indicates octal and isn't one of the digits). The &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; value is such a number representing disabled permissions bits. The permission (or &quot;mode&quot;) values you pass &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; are modified by your umask, so even if you tell &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; to create a file with permissions &lt;code&gt;0777&lt;/code&gt; , if your umask is &lt;code&gt;0022&lt;/code&gt; , then the file will actually be created with permissions &lt;code&gt;0755&lt;/code&gt; . If your &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; were &lt;code&gt;0027&lt;/code&gt; (group can't write; others can't read, write, or execute), then passing &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;&lt;code&gt;0666&lt;/code&gt; would create a file with mode &lt;code&gt;0640&lt;/code&gt; (because &lt;code&gt;0666 &amp;amp;~ 027&lt;/code&gt; is &lt;code&gt;0640&lt;/code&gt; ).</source>
          <target state="translated">Unixパーミッション &lt;code&gt;rwxr-x---&lt;/code&gt; は、3ビットの3つのセット、または3つの8進数字 &lt;code&gt;0750&lt;/code&gt; として表されます（先頭の0は8進を示し、数字の1つではありません）。 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; の値は無効なアクセス許可ビットを表すような数です。 &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; に渡すアクセス許可（または「モード」）の値はumaskによって変更されるため、 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; にアクセス許可 &lt;code&gt;0777&lt;/code&gt; のファイルを作成するように指示しても、umaskが &lt;code&gt;0022&lt;/code&gt; の場合、ファイルは実際にはアクセス許可 &lt;code&gt;0755&lt;/code&gt; で作成されます。あなたの &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;0027&lt;/code&gt; だった場合（グループは書き込みできません。他のユーザーは読み取り、書き込み、または実行できません）、次に &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; &lt;code&gt;0666&lt;/code&gt; を渡すと、モード &lt;code&gt;0640&lt;/code&gt; のファイルが作成されます（ &lt;code&gt;0666 &amp;amp;~ 027&lt;/code&gt; &lt;code&gt;0640&lt;/code&gt; は0640であるため）。</target>
        </trans-unit>
        <trans-unit id="96615142b96c010257cd138eceafdbdb1fcfb3bc" translate="yes" xml:space="preserve">
          <source>The Unix permission &lt;code&gt;rwxr-x---&lt;/code&gt; is represented as three sets of three bits, or three octal digits: &lt;code&gt;0750&lt;/code&gt; (the leading 0 indicates octal and isn't one of the digits). The &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; value is such a number representing disabled permissions bits. The permission (or &quot;mode&quot;) values you pass &lt;code&gt;&lt;a href=&quot;mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; are modified by your umask, so even if you tell &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; to create a file with permissions &lt;code&gt;0777&lt;/code&gt; , if your umask is &lt;code&gt;0022&lt;/code&gt; , then the file will actually be created with permissions &lt;code&gt;0755&lt;/code&gt; . If your &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; were &lt;code&gt;0027&lt;/code&gt; (group can't write; others can't read, write, or execute), then passing &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;&lt;code&gt;0666&lt;/code&gt; would create a file with mode &lt;code&gt;0640&lt;/code&gt; (because &lt;code&gt;0666 &amp;amp;~ 027&lt;/code&gt; is &lt;code&gt;0640&lt;/code&gt; ).</source>
          <target state="translated">Unixパーミッション &lt;code&gt;rwxr-x---&lt;/code&gt; は、3ビットの3つのセット、または3つの8進数字 &lt;code&gt;0750&lt;/code&gt; として表されます（先頭の0は8進を示し、数字の1つではありません）。 &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; の値は無効なアクセス許可ビットを表すような数です。 &lt;code&gt;&lt;a href=&quot;mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; に渡すアクセス許可（または「モード」）の値はumaskによって変更されるため、 &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; にアクセス許可 &lt;code&gt;0777&lt;/code&gt; のファイルを作成するように指示しても、umaskが &lt;code&gt;0022&lt;/code&gt; の場合、ファイルは実際にはアクセス許可 &lt;code&gt;0755&lt;/code&gt; で作成されます。あなたの &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;0027&lt;/code&gt; だった場合（グループは書き込みできません。他のユーザーは読み取り、書き込み、または実行できません）、次に &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; &lt;code&gt;0666&lt;/code&gt; を渡すと、モード &lt;code&gt;0640&lt;/code&gt; のファイルが作成されます（ &lt;code&gt;0666 &amp;amp;~ 027&lt;/code&gt; &lt;code&gt;0640&lt;/code&gt; は0640であるため）。</target>
        </trans-unit>
        <trans-unit id="d68f3b12b3008b73f340d97bbe8121b4ae3d9886" translate="yes" xml:space="preserve">
          <source>The Unix program that displays online documentation (manual pages) for you.</source>
          <target state="translated">オンラインドキュメント(マニュアルページ)を表示するUnixプログラム。</target>
        </trans-unit>
        <trans-unit id="025899dcfc40460b6af9f2e480800fa184584302" translate="yes" xml:space="preserve">
          <source>The VERSIONCHECK: Keyword</source>
          <target state="translated">VERSIONCHECK:キーワード</target>
        </trans-unit>
        <trans-unit id="191f8a3a602b994bc056ffe04831bd5feed30108" translate="yes" xml:space="preserve">
          <source>The VERSIONCHECK: keyword corresponds to &lt;b&gt;xsubpp&lt;/b&gt;'s &lt;code&gt;-versioncheck&lt;/code&gt; and &lt;code&gt;-noversioncheck&lt;/code&gt; options. This keyword overrides the command line options. Version checking is enabled by default. When version checking is enabled the XS module will attempt to verify that its version matches the version of the PM module.</source>
          <target state="translated">VERSIONCHECK：キーワードは、&lt;b&gt;xsubpp&lt;/b&gt;の &lt;code&gt;-versioncheck&lt;/code&gt; および &lt;code&gt;-noversioncheck&lt;/code&gt; オプションに対応します。このキーワードは、コマンドラインオプションを上書きします。バージョンチェックはデフォルトで有効になっています。バージョンチェックを有効にすると、XSモジュールは、そのバージョンがPMモジュールのバージョンと一致することを確認しようとします。</target>
        </trans-unit>
        <trans-unit id="04e7acc0343752ab985314abfd05d75387072015" translate="yes" xml:space="preserve">
          <source>The VMS operating system has two filesystems, designated by their on-disk structure (ODS) level: ODS-2 and its successor ODS-5. The initial port of Perl to VMS pre-dates ODS-5, but all current testing and development assumes ODS-5 and its capabilities, including case preservation, extended characters in filespecs, and names up to 8192 bytes long.</source>
          <target state="translated">VMS オペレーティングシステムには 2 つのファイルシステムがあり、それらのオンディスク構造 (ODS)レベルで指定されています。ODS-2とその後継のODS-5です。Perl の VMS への最初の移植は ODS-5 よりも前に行われましたが、現在のすべてのテストと開発は ODS-5 とその機能(大文字小文字の保存、ファイルスペック内の拡張文字、最大 8192 バイトの名前など)を前提としています。</target>
        </trans-unit>
        <trans-unit id="b30b00a3df196d84b7a24a918a3d0aa60756c262" translate="yes" xml:space="preserve">
          <source>The VOS mailing list.</source>
          <target state="translated">VOSのメーリングリスト。</target>
        </trans-unit>
        <trans-unit id="1e59303fe7c8cd36efc35383c5bbb06ef61bf43f" translate="yes" xml:space="preserve">
          <source>The Win95/NT installation, when using the ActiveState installer for Perl, will modify the Registry to associate the</source>
          <target state="translated">Win95/NT のインストールでは、Perl 用の ActiveState インストーラを使用している場合、レジストリを変更して</target>
        </trans-unit>
        <trans-unit id="f858558f020a34e7480b07972a3c08c5fd6984b6" translate="yes" xml:space="preserve">
          <source>The Win95/NT installation, when using the ActiveState port of Perl, will modify the Registry to associate the &lt;code&gt;.pl&lt;/code&gt; extension with the perl interpreter. If you install another port, perhaps even building your own Win95/NT Perl from the standard sources by using a Windows port of gcc (e.g., with cygwin or mingw32), then you'll have to modify the Registry yourself. In addition to associating &lt;code&gt;.pl&lt;/code&gt; with the interpreter, NT people can use: &lt;code&gt;SET PATHEXT=%PATHEXT%;.PL&lt;/code&gt; to let them run the program &lt;code&gt;install-linux.pl&lt;/code&gt; merely by typing &lt;code&gt;install-linux&lt;/code&gt; .</source>
          <target state="translated">Win95 / NTインストールは、PerlのActiveStateポートを使用する場合、レジストリを変更して &lt;code&gt;.pl&lt;/code&gt; 拡張子をperlインタープリターに関連付けます。別のポートをインストールする場合、おそらくgccのWindowsポートを使用して（たとえば、cygwinまたはmingw32を使用して）標準ソースから独自のWin95 / NT Perlを構築する場合でも、レジストリを自分で変更する必要があります。NTの人々は、 &lt;code&gt;.pl&lt;/code&gt; をインタープリターに関連付けるだけでなく、 &lt;code&gt;SET PATHEXT=%PATHEXT%;.PL&lt;/code&gt; を使用して、 &lt;code&gt;install-linux&lt;/code&gt; と入力するだけでプログラム &lt;code&gt;install-linux.pl&lt;/code&gt; を実行できます。</target>
        </trans-unit>
        <trans-unit id="beb45e4cde225026f4e16a740e28e45e50f2309b" translate="yes" xml:space="preserve">
          <source>The Windows SDK can be downloaded from &lt;a href=&quot;http://www.microsoft.com/&quot;&gt;http://www.microsoft.com/&lt;/a&gt;. The MinGW64 compiler is available at &lt;a href=&quot;http://sourceforge.net/projects/mingw-w64&quot;&gt;http://sourceforge.net/projects/mingw-w64&lt;/a&gt;. The latter is actually a cross-compiler targeting Win64. There's also a trimmed down compiler (no java, or gfortran) suitable for building perl available at: &lt;a href=&quot;http://strawberryperl.com/package/kmx/64_gcctoolchain/&quot;&gt;http://strawberryperl.com/package/kmx/64_gcctoolchain/&lt;/a&gt;</source>
          <target state="translated">Windows SDKは&lt;a href=&quot;http://www.microsoft.com/&quot;&gt;http://www.microsoft.com/&lt;/a&gt;からダウンロードできます。MinGW64コンパイラは&lt;a href=&quot;http://sourceforge.net/projects/mingw-w64&quot;&gt;http://sourceforge.net/projects/mingw-w64から&lt;/a&gt;入手できます。後者は実際には、Win64を対象とするクロスコンパイラです。また、perlのビルドに適したトリムダウンされたコンパイラー（javaまたはgfortranなし）も用意されています&lt;a href=&quot;http://strawberryperl.com/package/kmx/64_gcctoolchain/&quot;&gt;。http&lt;/a&gt;：//strawberryperl.com/package/kmx/64_gcctoolchain/</target>
        </trans-unit>
        <trans-unit id="c1dd1e762380b02f42ad88590f07ac599a582c23" translate="yes" xml:space="preserve">
          <source>The Windows documentation describes the shell parsing rules here: &lt;a href=&quot;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true&quot;&gt;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true&lt;/a&gt; and the C runtime parsing rules here: &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx&lt;/a&gt;.</source>
          <target state="translated">Windowsのドキュメントでは、シェルの解析ルールについてここで説明してい&lt;a href=&quot;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true&quot;&gt;ます。http&lt;/a&gt;：//www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx？mfr = trueおよびCランタイムの解析ルールについてはこちら：&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx&quot;&gt;http&lt;/a&gt; : //msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx。</target>
        </trans-unit>
        <trans-unit id="0944600f567f37796a44d203cb305a8c3dc31877" translate="yes" xml:space="preserve">
          <source>The World Factbook maintained by the CIA is a potential source of the data. Unfortunately, it adds/preserves non-standard codes, so it is no longer used as a source of data.</source>
          <target state="translated">CIAによって維持されている世界ファクトブックは、データの潜在的なソースです。残念ながら、それは非標準的なコードを追加/保存するので、もはやデータのソースとしては使用されません。</target>
        </trans-unit>
        <trans-unit id="91e3c6e2754b93eaf46a2a00de960a8c0e2e11b1" translate="yes" xml:space="preserve">
          <source>The XL C for AIX is integrated in the XL C/C++ for AIX compiler and therefore also supported.</source>
          <target state="translated">XL C for AIXは、XL C/C++for AIXコンパイラに統合されているため、サポートもされています。</target>
        </trans-unit>
        <trans-unit id="26b303e7615c750693be69ec473b2f4dff6fc26e" translate="yes" xml:space="preserve">
          <source>The XPUSH* macros will automatically extend the return stack to prevent it from being overrun. You push values onto the stack in the order you want them seen by the calling program.</source>
          <target state="translated">XPUSH*マクロは、リターン・スタックがオーバーランしないように自動的に拡張します。呼び出し元のプログラムが見たい順に値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="a60c05b1221aad4f1b3aa2c5d4dc4eb83e2bb2ba" translate="yes" xml:space="preserve">
          <source>The XROVER command returns reference information for the article(s) specified.</source>
          <target state="translated">XROVERコマンドは、指定された記事の参照情報を返します。</target>
        </trans-unit>
        <trans-unit id="11313e63e9f00be77c380f5038dabb62b6e1dd06" translate="yes" xml:space="preserve">
          <source>The XS code, with ellipsis, follows.</source>
          <target state="translated">省略記号のついたXSコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f7fa3ea30854edb41afcb9fc07a8de31e1d1857c" translate="yes" xml:space="preserve">
          <source>The XS compiler is called &lt;b&gt;xsubpp&lt;/b&gt;. This compiler creates the constructs necessary to let an XSUB manipulate Perl values, and creates the glue necessary to let Perl call the XSUB. The compiler uses &lt;b&gt;typemaps&lt;/b&gt; to determine how to map C function parameters and output values to Perl values and back. The default typemap (which comes with Perl) handles many common C types. A supplementary typemap may also be needed to handle any special structures and types for the library being linked. For more information on typemaps, see &lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemap&lt;/a&gt;.</source>
          <target state="translated">XSコンパイラは&lt;b&gt;xsubpp&lt;/b&gt;と呼ばれます。このコンパイラーは、XSUBにPerlの値を操作させるために必要な構成を作成し、PerlがXSUBを呼び出すために必要な接着剤を作成します。コンパイラーは&lt;b&gt;タイプマップ&lt;/b&gt;を使用&lt;b&gt;して&lt;/b&gt;、C関数パラメーターと出力値をPerl値にマップする方法と、その逆の方法を決定します。デフォルトのタイプマップ（Perlに付属）は、多くの一般的なCタイプを処理します。リンクされるライブラリの特別な構造とタイプを処理するために、補足のタイプマップも必要になる場合があります。タイプマップの詳細については、&lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemapを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f7b25a71b5ed14cc6ac2648af9eea46c98febfb6" translate="yes" xml:space="preserve">
          <source>The XS implementation uses code from metamail. Copyright 1991 Bell Communications Research, Inc. (Bellcore)</source>
          <target state="translated">XSの実装では、metamailのコードを使用しています。Copyright 1991 Bell Communications Research,Inc.(ベルコア)</target>
        </trans-unit>
        <trans-unit id="d9806f72759923810498b1550dc8fe607f007c38" translate="yes" xml:space="preserve">
          <source>The XS language allows one to describe the mapping between how the C routine is used, and how the corresponding Perl routine is used. It also allows creation of Perl routines which are directly translated to C code and which are not related to a pre-existing C function. In cases when the C interface coincides with the Perl interface, the XSUB declaration is almost identical to a declaration of a C function (in K&amp;amp;R style). In such circumstances, there is another tool called &lt;code&gt;h2xs&lt;/code&gt; that is able to translate an entire C header file into a corresponding XS file that will provide glue to the functions/macros described in the header file.</source>
          <target state="translated">XS言語では、Cルーチンの使用方法と対応するPerlルーチンの使用方法の間のマッピングを記述できます。また、Cコードに直接変換され、既存のC関数に関連しないPerlルーチンを作成することもできます。 CインターフェースがPerlインターフェースと一致する場合、XSUB宣言は（K＆Rスタイルの）C関数の宣言とほとんど同じです。そのような状況では、Cヘッダーファイル全体を対応するXSファイルに変換できる &lt;code&gt;h2xs&lt;/code&gt; と呼ばれる別のツールがあり、ヘッダーファイルに記述されている関数/マクロに接着剤を提供します。</target>
        </trans-unit>
        <trans-unit id="5ec313ae92b11ca169ff5d7233881fd7bd18d45a" translate="yes" xml:space="preserve">
          <source>The XS module can use INCLUDE: to pull that file into it.</source>
          <target state="translated">XSモジュールでは、INCLUDE:を使ってそのファイルを引き出すことができます。</target>
        </trans-unit>
        <trans-unit id="218e35287369aa01c3e7fcdd8962b5804ec13123" translate="yes" xml:space="preserve">
          <source>The XSUB follows.</source>
          <target state="translated">XSUBが続く。</target>
        </trans-unit>
        <trans-unit id="8e74c8817464edf988ad4bdeab912f47c5f34e75" translate="yes" xml:space="preserve">
          <source>The XSUB mechanism is a simple way for Perl programs to access C subroutines. An XSUB routine will have a stack that contains the arguments from the Perl program, and a way to map from the Perl data structures to a C equivalent.</source>
          <target state="translated">XSUBメカニズムは、PerlプログラムがCのサブルーチンにアクセスするための簡単な方法です。XSUBルーチンは、Perlプログラムからの引数を含むスタックと、Perlのデータ構造からCの等価なものにマッピングする方法を持っています。</target>
        </trans-unit>
        <trans-unit id="5d59b445869847df575ae1068c63533e2dbc9b4f" translate="yes" xml:space="preserve">
          <source>The XSUB will look like the code which follows. A CODE: block is used to call the real rpcb_gettime() function with the parameters in the correct order for that function.</source>
          <target state="translated">XSUBは以下のコードのようになります。CODE:ブロックは、実際の rpcb_gettime()関数を、その関数の正しい順序でパラメータを指定して呼び出すために使用されます。</target>
        </trans-unit>
        <trans-unit id="4912ec37b73cb1d3321d6d839b0519b8e1f0ad32" translate="yes" xml:space="preserve">
          <source>The XSUB's parameters are usually evaluated immediately after entering the XSUB. The INPUT: keyword can be used to force those parameters to be evaluated a little later. The INPUT: keyword can be used multiple times within an XSUB and can be used to list one or more input variables. This keyword is used with the PREINIT: keyword.</source>
          <target state="translated">XSUBのパラメータは通常、XSUBに入った直後に評価されます。INPUT:キーワードを使用すると、これらのパラメータを少し後に評価するように強制することができます。INPUT:キーワードは、XSUB内で複数回使用することができ、1つまたは複数の入力変数をリストアップするために使用することができます。このキーワードは、PREINIT:キーワードと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="889ae69f0e646c6957d38054ac7106368e38cd84" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's equivalent of &lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;. The returned &lt;code&gt;PERL_CONTEXT&lt;/code&gt; structure can be interrogated to find all the information returned to Perl by &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt;. Note that XSUBs don't get a stack frame, so &lt;code&gt;caller_cx(0, NULL)&lt;/code&gt; will return information for the immediately-surrounding Perl code.</source>
          <target state="translated">XSUB-writerの同等の&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;。返された &lt;code&gt;PERL_CONTEXT&lt;/code&gt; 構造体は、 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; からPerlに返されたすべての情報を見つけるために問い合わせることができます。XSUBはスタックフレームを取得しないので、 &lt;code&gt;caller_cx(0, NULL)&lt;/code&gt; はすぐ周囲のPerlコードの情報を返します。</target>
        </trans-unit>
        <trans-unit id="cf42b7fd9e4e74da90d9e8ca347b2091c98166db" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's equivalent to Perl's &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt;. Returns &lt;code&gt;G_VOID&lt;/code&gt; , &lt;code&gt;G_SCALAR&lt;/code&gt; or &lt;code&gt;G_ARRAY&lt;/code&gt; for void, scalar or list context, respectively. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; for a usage example.</source>
          <target state="translated">XSUBライターのPerlの &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt; に相当するもの。void、スカラー、またはリストコンテキストに対して、それぞれ &lt;code&gt;G_VOID&lt;/code&gt; 、 &lt;code&gt;G_SCALAR&lt;/code&gt; または &lt;code&gt;G_ARRAY&lt;/code&gt; を返します。使用例については&lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="75d69996de0f1c3559d54da444421bb8a65343e9" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;free&lt;/code&gt; function.</source>
          <target state="translated">C &lt;code&gt;free&lt;/code&gt; 関数へのXSUBライターのインターフェース。</target>
        </trans-unit>
        <trans-unit id="407a1fe0a1b35df310a191803c348a1466dc758e" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;malloc&lt;/code&gt; function, with cast. See also &lt;code&gt;Newx&lt;/code&gt; .</source>
          <target state="translated">キャスト付きのC &lt;code&gt;malloc&lt;/code&gt; 関数へのXSUBライターのインターフェース。 &lt;code&gt;Newx&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="03573c77e22afa37657d3ab695d4f1f77625b4b6" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;malloc&lt;/code&gt; function.</source>
          <target state="translated">C &lt;code&gt;malloc&lt;/code&gt; 関数へのXSUBライターのインターフェイス。</target>
        </trans-unit>
        <trans-unit id="bb6fbdec07f505cf20563b49cda07ec35e3c5893" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;malloc&lt;/code&gt; function. The allocated memory is zeroed with &lt;code&gt;memzero&lt;/code&gt; . See also &lt;code&gt;Newx&lt;/code&gt; .</source>
          <target state="translated">C &lt;code&gt;malloc&lt;/code&gt; 関数へのXSUBライターのインターフェイス。割り当てられたメモリは &lt;code&gt;memzero&lt;/code&gt; でゼロ化されます。 &lt;code&gt;Newx&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="012775e63d169c2ca0d945eee45190f976576a44" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;memcpy&lt;/code&gt; function. The &lt;code&gt;src&lt;/code&gt; is the source, &lt;code&gt;dest&lt;/code&gt; is the destination, &lt;code&gt;nitems&lt;/code&gt; is the number of items, and &lt;code&gt;type&lt;/code&gt; is the type. May fail on overlapping copies. See also &lt;code&gt;Move&lt;/code&gt; .</source>
          <target state="translated">C &lt;code&gt;memcpy&lt;/code&gt; 関数へのXSUBライターのインターフェース。 &lt;code&gt;src&lt;/code&gt; がソースであり、 &lt;code&gt;dest&lt;/code&gt; が宛先である、 &lt;code&gt;nitems&lt;/code&gt; アイテムの数、 &lt;code&gt;type&lt;/code&gt; タイプです。重複するコピーで失敗する場合があります。 &lt;code&gt;Move&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="45005a2398999be54551083e5df9a69f712a0c93" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;memmove&lt;/code&gt; function. The &lt;code&gt;src&lt;/code&gt; is the source, &lt;code&gt;dest&lt;/code&gt; is the destination, &lt;code&gt;nitems&lt;/code&gt; is the number of items, and &lt;code&gt;type&lt;/code&gt; is the type. Can do overlapping moves. See also &lt;code&gt;Copy&lt;/code&gt; .</source>
          <target state="translated">C &lt;code&gt;memmove&lt;/code&gt; 関数へのXSUBライターのインターフェース。 &lt;code&gt;src&lt;/code&gt; がソースであり、 &lt;code&gt;dest&lt;/code&gt; が宛先である、 &lt;code&gt;nitems&lt;/code&gt; アイテムの数、 &lt;code&gt;type&lt;/code&gt; タイプです。重なる動きができます。 &lt;code&gt;Copy&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="6a4b16e416d5be5fce93e4644cc50a90934125a5" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;memzero&lt;/code&gt; function. The &lt;code&gt;dest&lt;/code&gt; is the destination, &lt;code&gt;nitems&lt;/code&gt; is the number of items, and &lt;code&gt;type&lt;/code&gt; is the type.</source>
          <target state="translated">C &lt;code&gt;memzero&lt;/code&gt; 関数へのXSUBライターのインターフェース。 &lt;code&gt;dest&lt;/code&gt; 、先の &lt;code&gt;nitems&lt;/code&gt; アイテムの数、 &lt;code&gt;type&lt;/code&gt; タイプです。</target>
        </trans-unit>
        <trans-unit id="37176570a3748e41537c9ad870ca5c052d9042c5" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;realloc&lt;/code&gt; function, with cast.</source>
          <target state="translated">キャストを使用した、Cの &lt;code&gt;realloc&lt;/code&gt; 関数へのXSUBライターのインターフェイス。</target>
        </trans-unit>
        <trans-unit id="c8ea9501eaec9d4dc35b91e9053fafc1e103de32" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;realloc&lt;/code&gt; function.</source>
          <target state="translated">XSUB-writerのC &lt;code&gt;realloc&lt;/code&gt; 関数へのインターフェース。</target>
        </trans-unit>
        <trans-unit id="b5f612b4df0e6a83ff9d89b145ebd6884b1f570e" translate="yes" xml:space="preserve">
          <source>The XSUBPP Program</source>
          <target state="translated">XSUBPPプログラム</target>
        </trans-unit>
        <trans-unit id="1e85e39271c3e660414eb16aa8d858f60416c1a5" translate="yes" xml:space="preserve">
          <source>The XSUBs for the blue() and set_blue() methods are defined with the class name but the parameter for the object (THIS, or &quot;self&quot;) is implicit and is not listed.</source>
          <target state="translated">blue()メソッドと set_blue()メソッドの XSUB はクラス名で定義されていますが、オブジェクトのパラメータ (THIS,または &quot;self&quot;)は暗黙的なものであり、リストにはありません。</target>
        </trans-unit>
        <trans-unit id="f515a1ddc8e361ef2e2c6d0f98a0db815d43b99f" translate="yes" xml:space="preserve">
          <source>The YAML files themselves must have the &lt;code&gt;.yml&lt;/code&gt; extension; all other files are ignored (for two exceptions see</source>
          <target state="translated">YAMLファイル自体には &lt;code&gt;.yml&lt;/code&gt; 拡張子が必要です。他のすべてのファイルは無視されます（2つの例外については、</target>
        </trans-unit>
        <trans-unit id="d674c081d1720c0407789140462f1119f634eb87" translate="yes" xml:space="preserve">
          <source>The Zxxx, Zyyy, and Zzzz codes are not used.</source>
          <target state="translated">Zxxx、Zyy、Zzzzのコードは使用しません。</target>
        </trans-unit>
        <trans-unit id="eb61dbdf150df0568557c97e9633ab5164b764f0" translate="yes" xml:space="preserve">
          <source>The __DATA__ token</source>
          <target state="translated">__DATA__トークン</target>
        </trans-unit>
        <trans-unit id="463e37f3f7783165c25668e9edcd6bb8f407a3e5" translate="yes" xml:space="preserve">
          <source>The _splain_ Program</source>
          <target state="translated">説明プログラム</target>
        </trans-unit>
        <trans-unit id="14c9176f141fa52e2e9b370433e3e5dfafe8e555" translate="yes" xml:space="preserve">
          <source>The ability of an independent subexpression to prevent backtracking can be quite useful. Suppose we want to match a non-empty string enclosed in parentheses up to two levels deep. Then the following regexp matches:</source>
          <target state="translated">バックトラックを防ぐための独立した副式の機能は、非常に便利です。括弧で囲まれた空ではない文字列を2レベルまでの深さまでマッチさせたいとします。そうすると、以下の正規表現がマッチします。</target>
        </trans-unit>
        <trans-unit id="d9ff4522b539fedb72c69d4e7d1a591065047a06" translate="yes" xml:space="preserve">
          <source>The ability to create &quot;canned&quot; filters. These allow commonly used filters to be packaged into a stand-alone module.</source>
          <target state="translated">定型」フィルターを作成する機能。これにより、一般的に使用されているフィルターをスタンドアロンのモジュールにパッケージ化することができます。</target>
        </trans-unit>
        <trans-unit id="76b03d5ecb823d555d353e5848c41c73876ec792" translate="yes" xml:space="preserve">
          <source>The ability to easily apply multiple filters to a single DBM file.</source>
          <target state="translated">1つのDBMファイルに複数のフィルターを簡単に適用できる機能。</target>
        </trans-unit>
        <trans-unit id="2a644c13f043d9a916e16c6cb02fd3b3d632a99e" translate="yes" xml:space="preserve">
          <source>The ability to put additional declarations before the typemap entries are processed is very handy in the cases when typemap conversions manipulate some global state:</source>
          <target state="translated">タイプマップのエントリが処理される前に追加の宣言を置く機能は、タイプマップの変換がグローバルな状態を操作する場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="bca0d0a62c6e09e5d5a84f9c8ee968851fbd9ea7" translate="yes" xml:space="preserve">
          <source>The ability to specify a different outermost delimiter bracket is useful in some circumstances. For example, in the Parse::RecDescent module, parser actions which are to be performed only on a successful parse are specified using a &lt;code&gt;&amp;lt;defer:...&amp;gt;&lt;/code&gt; directive. For example:</source>
          <target state="translated">別の最も外側の区切りブラケットを指定する機能は、状況によっては役立ちます。たとえば、Parse :: RecDescentモジュールでは、正常な解析でのみ実行されるパーサーアクションは、 &lt;code&gt;&amp;lt;defer:...&amp;gt;&lt;/code&gt; ディレクティブを使用して指定されます。例えば：</target>
        </trans-unit>
        <trans-unit id="7bc890528d2492bad24f35a51d7d007c56cdbd51" translate="yes" xml:space="preserve">
          <source>The above attempts to show how the layer scheme works in a simple case. The application's &lt;code&gt;PerlIO *&lt;/code&gt; points to an entry in the table(s) representing open (allocated) handles. For example the first three slots in the table correspond to &lt;code&gt;stdin&lt;/code&gt; ,&lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; . The table in turn points to the current &quot;top&quot; layer for the handle - in this case an instance of the generic buffering layer &quot;perlio&quot;. That layer in turn points to the next layer down - in this case the low-level &quot;unix&quot; layer.</source>
          <target state="translated">上記は、レイヤースキームが単純なケースでどのように機能するかを示すためのものです。アプリケーションの &lt;code&gt;PerlIO *&lt;/code&gt; は、開いている（割り当てられた）ハンドルを表すテーブル内のエントリを指します。たとえば、表の最初の3つのスロットは、 &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、および &lt;code&gt;stderr&lt;/code&gt; に対応しています。テーブルは、ハンドルの現在の「最上位」レイヤーを指します。この場合、一般的なバッファリングレイヤー「perlio」のインスタンスです。その層は、次に下の層を指します-この場合、低レベルの「UNIX」層。</target>
        </trans-unit>
        <trans-unit id="abf94dbab29db68325894cd60a65f3c2a1fc56fa" translate="yes" xml:space="preserve">
          <source>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</source>
          <target state="translated">上記の著作権表示および本許諾表示は、本ソフトウェアのすべての複製物または実質的な部分に含まれるものとします。</target>
        </trans-unit>
        <trans-unit id="267b118ff06011e806ac608fae00f2938fa2a609" translate="yes" xml:space="preserve">
          <source>The above example works only if &lt;code&gt;&quot;s&quot;&lt;/code&gt; is &lt;code&gt;NUL&lt;/code&gt; -terminated; otherwise you have to pass its length to &lt;code&gt;newSVpv&lt;/code&gt; .</source>
          <target state="translated">上記の例は、 &lt;code&gt;&quot;s&quot;&lt;/code&gt; が &lt;code&gt;NUL&lt;/code&gt; で終了する場合にのみ機能します。それ以外の場合は、その長さを &lt;code&gt;newSVpv&lt;/code&gt; に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="a24a47b6e29ea30653b134f5da5c978447aa0575" translate="yes" xml:space="preserve">
          <source>The above example would print out the message:</source>
          <target state="translated">上記の例では、メッセージを印刷しています。</target>
        </trans-unit>
        <trans-unit id="f4ebb52f7b218814c788462297b6da7a43f52650" translate="yes" xml:space="preserve">
          <source>The above four are optional except in other formatting codes, notably &lt;code&gt;L&amp;lt;...&amp;gt;&lt;/code&gt; , and when preceded by a capital letter.</source>
          <target state="translated">上記の4つは、他のフォーマットコード（特に &lt;code&gt;L&amp;lt;...&amp;gt;&lt;/code&gt; ）と大文字が前に付いている場合を除いて、オプションです。</target>
        </trans-unit>
        <trans-unit id="dd54f214af2e16fd555100563837da248db5495d" translate="yes" xml:space="preserve">
          <source>The above is a somewhat simplified view of what really happens. Since Perl allows more flexible calling conventions than C, XSUBs may do much more in practice, such as checking input parameters for validity, throwing exceptions (or returning undef/empty list) if the return value from the C function indicates failure, calling different C functions based on numbers and types of the arguments, providing an object-oriented interface, etc.</source>
          <target state="translated">上記は、実際に何が起こっているのかをやや単純化したものです。PerlではC言語よりも柔軟な呼び出し規約が可能なので、XSUBは入力パラメータの有効性をチェックしたり、C言語の関数の戻り値が失敗を示した場合に例外を投げたり(あるいはundef/emptyリストを返したり)、引数の数や型に基づいて異なるC言語の関数を呼び出したり、オブジェクト指向のインターフェースを提供したりと、実際にはより多くのことを行うことができるでしょう。</target>
        </trans-unit>
        <trans-unit id="754ca936a964e1d5816b54783f4e5f1ce663020d" translate="yes" xml:space="preserve">
          <source>The above is roughly equivalent to a &quot;stdio&quot; buffered stream, but with much more flexibility:</source>
          <target state="translated">上記は &quot;stdio&quot; バッファ付きストリームとほぼ同等ですが、より柔軟性があります。</target>
        </trans-unit>
        <trans-unit id="7fcad7cfc523d43a196084786f96b8329cc3ac60" translate="yes" xml:space="preserve">
          <source>The above module is very primitive. It does not implement mutator methods (&lt;code&gt;++&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; and so on), does not do deep copying (not required without mutators!), and implements only those arithmetic operations which are used in the example.</source>
          <target state="translated">上記のモジュールは非常に原始的です。ミューテーターメソッド（ &lt;code&gt;++&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; など）を実装せず、ディープコピーを実行せず（ミューテーターなしでは必要ありません！）、例で使用されている算術演算のみを実装します。</target>
        </trans-unit>
        <trans-unit id="281ac3a4234dba5767807b1f7ef90bcb868fb84e" translate="yes" xml:space="preserve">
          <source>The above recipes describe the ordering of matches</source>
          <target state="translated">上記のレシピでは、マッチの順序を記述しています。</target>
        </trans-unit>
        <trans-unit id="abb826d1f92a77f8ee5fb15c131983e89da595f3" translate="yes" xml:space="preserve">
          <source>The above search for &quot;interpreter&quot; is recursive: if</source>
          <target state="translated">上記の &quot;interpreter &quot;の検索は再帰的です。</target>
        </trans-unit>
        <trans-unit id="b606cf43c801f260cbdfb890db240a19d58a3f8e" translate="yes" xml:space="preserve">
          <source>The above subroutine may be called with either one or two arguments. The default value expression is evaluated when the subroutine is called, so it may provide different default values for different calls. It is only evaluated if the argument was actually omitted from the call. For example,</source>
          <target state="translated">上記のサブルーチンは、1つまたは2つの引数を指定して呼び出すことができます。デフォルト値式は、サブルーチンが呼び出されたときに評価されるので、異なる呼び出しに対して異なるデフォルト値を提供することができます。この式は、引数が実際に呼び出しから省略された場合にのみ評価されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="54c21b6df45da0f9df4499ebff5512482a22c709" translate="yes" xml:space="preserve">
          <source>The above test passes two values to &lt;code&gt;ok(arg1, arg2)&lt;/code&gt; -- the first a coderef, and the second is the number 4. Before &lt;code&gt;ok&lt;/code&gt; compares them, it calls the coderef, and uses its return value as the real value of this parameter. Assuming that &lt;code&gt;$bytecount&lt;/code&gt; returns 4, &lt;code&gt;ok&lt;/code&gt; ends up testing &lt;code&gt;4 eq 4&lt;/code&gt; . Since that's true, this test passes.</source>
          <target state="translated">上記試験は、に2つの値を渡し &lt;code&gt;ok(arg1, arg2)&lt;/code&gt; -最初のAコードリファレンス、及び前第二番号4である &lt;code&gt;ok&lt;/code&gt; 、それらを比較し、それがコードリファレンスを呼び出し、このパラメータの実際の値として、その戻り値を使用し。 &lt;code&gt;$bytecount&lt;/code&gt; が4を返すとすると、 &lt;code&gt;ok&lt;/code&gt; は &lt;code&gt;4 eq 4&lt;/code&gt; をテストします。これは事実なので、このテストは合格です。</target>
        </trans-unit>
        <trans-unit id="b1ef6a2bf455cf77affd01d5de26884f122aeca1" translate="yes" xml:space="preserve">
          <source>The above variables have all been localized and may be changed without affecting data outside of the wanted function.</source>
          <target state="translated">上記の変数はすべてローカライズされており、目的の関数以外のデータに影響を与えることなく変更することができます。</target>
        </trans-unit>
        <trans-unit id="ae51a1ce20f245092ecaad634de2dfa1ff5d3441" translate="yes" xml:space="preserve">
          <source>The above won't happen every time competing process update the same &lt;b&gt;DB_File&lt;/b&gt; database, but it does illustrate why the technique should not be used.</source>
          <target state="translated">上記は、競合するプロセスが同じ&lt;b&gt;DB_File&lt;/b&gt;データベースを更新するたびに発生するわけではありませんが、この手法を使用してはならない理由を示しています。</target>
        </trans-unit>
        <trans-unit id="3f1ad066d4a66bd948f60c33d21673c18f0eb993" translate="yes" xml:space="preserve">
          <source>The accessor method provided by &lt;code&gt;struct&lt;/code&gt; for an element depends on the declared type of the element.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; が要素に提供するアクセサメソッドは、要素の宣言された型によって異なります。</target>
        </trans-unit>
        <trans-unit id="2cc7abc6dcf89e4b9609885153970267df830f15" translate="yes" xml:space="preserve">
          <source>The accessor methods assume that the actual storage for the data in the tied hash is in the hash referenced by &lt;code&gt;(&lt;a href=&quot;../functions/tied&quot;&gt;tied&lt;/a&gt;(%tiedhash))-&amp;gt;[0]&lt;/code&gt; . Thus overwritten &lt;code&gt;TIEHASH&lt;/code&gt; method should return an array reference with the first element being a hash reference, and the remaining methods should operate on the hash &lt;code&gt;%{ $_[0]-&amp;gt;[0] }&lt;/code&gt; :</source>
          <target state="translated">アクセサーメソッドは、tieされたハッシュのデータの実際のストレージが、 &lt;code&gt;(&lt;a href=&quot;../functions/tied&quot;&gt;tied&lt;/a&gt;(%tiedhash))-&amp;gt;[0]&lt;/code&gt; によって参照されるハッシュにあると想定します。したがって、上書きされた &lt;code&gt;TIEHASH&lt;/code&gt; メソッドは、最初の要素がハッシュ参照である配列参照を返し、残りのメソッドはハッシュ &lt;code&gt;%{ $_[0]-&amp;gt;[0] }&lt;/code&gt; を操作する必要があります。</target>
        </trans-unit>
        <trans-unit id="225d5409f9e31ec1fd3549dba0dd919b3904ec0c" translate="yes" xml:space="preserve">
          <source>The accessor methods assume that the actual storage for the data in the tied hash is in the hash referenced by &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt;. Thus overwritten &lt;code&gt;TIEHASH&lt;/code&gt; method should return a hash reference, and the remaining methods should operate on the hash referenced by the first argument:</source>
          <target state="translated">アクセサーメソッドは、tieされたハッシュ内のデータの実際のストレージは、 &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt; によって参照されるハッシュ内にあると想定しています。したがって、上書きされた &lt;code&gt;TIEHASH&lt;/code&gt; メソッドはハッシュ参照を返し、残りのメソッドは最初の引数で参照されるハッシュを操作する必要があります。</target>
        </trans-unit>
        <trans-unit id="2198a837e059e4191004ad59c18436a206b5087a" translate="yes" xml:space="preserve">
          <source>The accessor's argument, if any, is assigned to the element.</source>
          <target state="translated">アクセサの引数があれば、その要素に代入されます。</target>
        </trans-unit>
        <trans-unit id="0a55122025df9d01179435aa1526880dbd188b0d" translate="yes" xml:space="preserve">
          <source>The accessor's argument, if any, is assigned to the element. The accessor will &lt;code&gt;croak&lt;/code&gt; if this is not an appropriate object reference.</source>
          <target state="translated">アクセサーの引数がある場合は、要素に割り当てられます。これが適切なオブジェクト参照でない場合、アクセサーは &lt;code&gt;croak&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bc291805bbdf71f35da9613fd10fc72effdd81d3" translate="yes" xml:space="preserve">
          <source>The act of calling up a deity, daemon, program, method, subroutine, or function to get it to do what you think it&amp;rsquo;s supposed to do. We usually &amp;ldquo;call&amp;rdquo; subroutines but &amp;ldquo;invoke&amp;rdquo; methods, since it sounds cooler.</source>
          <target state="translated">神、デーモン、プログラム、メソッド、サブルーチン、または関数を呼び出して、想定されていることを実行させる行為。通常はサブルーチンを「呼び出し」ますが、メソッドは「呼び出し」ます。</target>
        </trans-unit>
        <trans-unit id="0aae7e6b56823ac18d0d863614b52f8ccee20556" translate="yes" xml:space="preserve">
          <source>The act of emptying a &lt;b&gt;buffer&lt;/b&gt;, often before it&amp;rsquo;s full.</source>
          <target state="translated">&lt;b&gt;バッファ&lt;/b&gt;がいっぱいになる前に、&lt;b&gt;バッファ&lt;/b&gt;を空にする動作。</target>
        </trans-unit>
        <trans-unit id="da4cbb2e16fc1345262c617dbbfacc0e9a82482b" translate="yes" xml:space="preserve">
          <source>The action begins in</source>
          <target state="translated">でアクションが始まります。</target>
        </trans-unit>
        <trans-unit id="c50575ea6cd15b6f99786b019f7fd7d151291681" translate="yes" xml:space="preserve">
          <source>The actual &lt;code&gt;SvUTF8&lt;/code&gt; flag of the &lt;a href=&quot;#PL_parser-%3elinestr&quot;&gt;PL_parser-&amp;gt;linestr&lt;/a&gt; scalar is significant, but not the whole story regarding the input character encoding. Normally, when a file is being read, the scalar contains octets and its &lt;code&gt;SvUTF8&lt;/code&gt; flag is off, but the octets should be interpreted as UTF-8 if the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; pragma is in effect. During a string eval, however, the scalar may have the &lt;code&gt;SvUTF8&lt;/code&gt; flag on, and in this case its octets should be interpreted as UTF-8 unless the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; pragma is in effect. This logic may change in the future; use this function instead of implementing the logic yourself.</source>
          <target state="translated">&lt;a href=&quot;#PL_parser-%3elinestr&quot;&gt;PL_parser-&amp;gt; linestr&lt;/a&gt;スカラーの実際の &lt;code&gt;SvUTF8&lt;/code&gt; フラグは重要ですが、入力文字エンコーディングに関するすべての話ではありません。通常、ファイルが読み取られるとき、スカラーにはオクテットが含まれ、その &lt;code&gt;SvUTF8&lt;/code&gt; フラグはオフですが、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; utf8プラグマが有効な場合、オクテットはUTF-8として解釈されます。ただし、文字列評価中は、スカラーで &lt;code&gt;SvUTF8&lt;/code&gt; フラグがオンになっている可能性があり、この場合、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; bytesプラグマが有効になっていない限り、そのオクテットはUTF-8として解釈されます。このロジックは将来変更される可能性があります。ロジックを自分で実装する代わりに、この関数を使用します。</target>
        </trans-unit>
        <trans-unit id="7dd5fba3f25088e2897b2cb955245840fd943e5f" translate="yes" xml:space="preserve">
          <source>The actual difference between PPCODE: and CODE: sections is in the initialization of &lt;code&gt;SP&lt;/code&gt; macro (which stands for the</source>
          <target state="translated">PPCODE：セクションとCODE：セクションの実際の違いは、 &lt;code&gt;SP&lt;/code&gt; マクロの初期化にあります（これは、</target>
        </trans-unit>
        <trans-unit id="c8adbcba0e7f4d6240d43127016adb7bebb0e850" translate="yes" xml:space="preserve">
          <source>The actual functions called are known as PP code, and they're spread between four files:</source>
          <target state="translated">実際に呼び出される関数はPPコードと呼ばれ、4つのファイルの間に分散されています。</target>
        </trans-unit>
        <trans-unit id="9fed5c7ec6f1ab01c643aa93a8adb0f82c40adfa" translate="yes" xml:space="preserve">
          <source>The actual numbers are stored as unsigned big integers (with separate sign).</source>
          <target state="translated">実際の数値は、符号なしのビッグ整数として格納されます。</target>
        </trans-unit>
        <trans-unit id="7371146aaafc3d93e00f035ea0ab638040fbcf08" translate="yes" xml:space="preserve">
          <source>The actual permissions set depend on the value of the &lt;code&gt;CYGWIN&lt;/code&gt; in the SYSTEM environment settings. (Cygwin)</source>
          <target state="translated">実際に設定される権限は、SYSTEM環境設定の &lt;code&gt;CYGWIN&lt;/code&gt; の値によって異なります。（シグウィン）</target>
        </trans-unit>
        <trans-unit id="6f09daaa018160f529d356d689ea131810985b7e" translate="yes" xml:space="preserve">
          <source>The actual sizes (in bytes) of native shorts, ints, longs, and long longs on the platform where Perl was built are also available from the command line:</source>
          <target state="translated">Perl がビルドされたプラットフォーム上のネイティブショート、イント、ロング、ロングロングの実際のサイズ(バイト数)は、コマンドラインからも入手できます。</target>
        </trans-unit>
        <trans-unit id="b9688cf79c9a25cc4e9f2e8b4c5ac878b783210d" translate="yes" xml:space="preserve">
          <source>The actual values on the argument stack are pointers to the values passed in. When an argument is listed as being an OUTPUT value, its corresponding value on the stack (i.e., ST(0) if it was the first argument) is changed. You can verify this by looking at the C code generated for Example 3. The code for the round() XSUB routine contains lines that look like this:</source>
          <target state="translated">引数スタック上の実際の値は、渡された値へのポインタです。引数が OUTPUT 値としてリストアップされると、スタック上の対応する値(最初の引数の場合は ST(0))が変更されます。これは、例 3 で生成された C 言語のコードを見れば確認できます。round()XSUB ルーチンのコードには、以下のような行が含まれています。</target>
        </trans-unit>
        <trans-unit id="9efd0030f2fab9c72c68391b18e8706f0e577dc3" translate="yes" xml:space="preserve">
          <source>The add_bits() method is an alternative to add() that allow partial bytes to be appended to the message. Most users should just ignore this method as partial bytes is very unlikely to be of any practical use.</source>
          <target state="translated">add_bits()メソッドは、add()の代わりにメッセージに部分的なバイトを追加することができます。部分的なバイトは実用的な使用法ではないので、ほとんどのユーザはこのメソッドを無視すべきです。</target>
        </trans-unit>
        <trans-unit id="4385ce0c6decd2654eecaf2223aa22c33620d447" translate="yes" xml:space="preserve">
          <source>The addfile() method will croak() if it fails reading data for some reason. If it croaks it is unpredictable what the state of the $ctx object will be in. The addfile() method might have been able to read the file partially before it failed. It is probably wise to discard or reset the $ctx object if this occurs.</source>
          <target state="translated">addfile()メソッドは、何らかの理由でデータの読み込みに失敗すると croak()します。クロークした場合、$ctx オブジェクトの状態がどうなるかは予測できません。addfile()メソッドは、失敗する前にファイルを部分的に読み込むことができたかもしれません。このような場合は、$ctx オブジェクトを破棄するかリセットするのが賢明でしょう。</target>
        </trans-unit>
        <trans-unit id="29515a29b800fb1b3a5d264f9d3d2a8c7827591b" translate="yes" xml:space="preserve">
          <source>The addfile() method will croak() if it fails reading data for some reason. If it croaks it is unpredictable what the state of the $md5 object will be in. The addfile() method might have been able to read the file partially before it failed. It is probably wise to discard or reset the $md5 object if this occurs.</source>
          <target state="translated">addfile()メソッドは、何らかの理由でデータの読み込みに失敗すると croak()します。クロークした場合、$md5 オブジェクトの状態がどうなるかは予測できません。addfile()メソッドは、失敗する前にファイルを部分的に読み込むことができたかもしれません。これが発生した場合は、$md5 オブジェクトを破棄するかリセットするのが賢明でしょう。</target>
        </trans-unit>
        <trans-unit id="bad770ef214b3ea483bf0a738f9ad60704fafe4f" translate="yes" xml:space="preserve">
          <source>The addition of threads has changed Perl's internals substantially. There are implications for people who write modules with XS code or external libraries. However, since Perl data is not shared among threads by default, Perl modules stand a high chance of being thread-safe or can be made thread-safe easily. Modules that are not tagged as thread-safe should be tested or code reviewed before being used in production code.</source>
          <target state="translated">スレッドが追加されたことで、Perl の内部は大きく変わりました。XSのコードや外部ライブラリを使ってモジュールを書く人にとっては意味があります。しかし、Perl のデータはデフォルトではスレッド間で共有されていないので、Perl のモジュールはスレッドセーフである可能性が高いか、簡単にスレッドセーフにすることができます。スレッドセーフとタグ付けされていないモジュールは、プロダクションコードで使用する前にテストするか、コードをレビューする必要があります。</target>
        </trans-unit>
        <trans-unit id="9fb5062c416df742306ccabb4b5f706bc8df9b28" translate="yes" xml:space="preserve">
          <source>The additional state of being</source>
          <target state="translated">追加された状態の</target>
        </trans-unit>
        <trans-unit id="e003249c8de3365551eedf50a46a7442176acc5e" translate="yes" xml:space="preserve">
          <source>The address family (e.g. &lt;code&gt;AF_INET&lt;/code&gt; )</source>
          <target state="translated">アドレスファミリ（例： &lt;code&gt;AF_INET&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f126536906b38b811e2283014aef5b17fb2a2bb1" translate="yes" xml:space="preserve">
          <source>The address in a packed string (such as would be returned by pack_sockaddr_in())</source>
          <target state="translated">パックされた文字列のアドレス (pack_sockaddr_in()が返すような)</target>
        </trans-unit>
        <trans-unit id="9ca884174256cffd8e2121d14b1b2f9600471f92" translate="yes" xml:space="preserve">
          <source>The address of the OP's SV, if it has an SV, in hexadecimal.</source>
          <target state="translated">OPのSVがある場合は、そのSVのアドレスを16進数で指定します。</target>
        </trans-unit>
        <trans-unit id="452ef6486bc83e321d333ed85c0a567a4e8c1783" translate="yes" xml:space="preserve">
          <source>The address of the OP's first child, in hexadecimal.</source>
          <target state="translated">OPの最初の子のアドレスを16進数で指定します。</target>
        </trans-unit>
        <trans-unit id="2838690d17f05c70e3e67bc06eecc94e3f275b6e" translate="yes" xml:space="preserve">
          <source>The address of the OP's last child, in hexadecimal.</source>
          <target state="translated">OPの最後の子のアドレスを16進数で指定します。</target>
        </trans-unit>
        <trans-unit id="e332f1e7f698853a5727152a76eca59b2c2b494a" translate="yes" xml:space="preserve">
          <source>The address of the OP's next OP, in hexadecimal.</source>
          <target state="translated">OPの次のOPのアドレスを16進数で指定します。</target>
        </trans-unit>
        <trans-unit id="1290cc2c32604c72580d6a56eb9a2ca86ec89ccf" translate="yes" xml:space="preserve">
          <source>The address of the OP's next youngest sibling, in hexadecimal.</source>
          <target state="translated">OPの次の末っ子の住所を16進数で。</target>
        </trans-unit>
        <trans-unit id="b68836e0a8059af6d65948c4349c2eade8a16af3" translate="yes" xml:space="preserve">
          <source>The address of the OP, in hexadecimal.</source>
          <target state="translated">OPのアドレスを16進数で表示します。</target>
        </trans-unit>
        <trans-unit id="09ebb8cc7d0fd73db86fd8a64bea18fe0c098b0c" translate="yes" xml:space="preserve">
          <source>The address tables of DLLs are patched only once, when they are loaded. The addresses of the entry points into DLLs are guaranteed to be the same for all the programs which use the same DLL. This removes the runtime fixup - once DLL is loaded, its code is read-only.</source>
          <target state="translated">DLLのアドレステーブルは、ロードされたときに一度だけパッチが適用されます。DLLへのエントリーポイントのアドレスは、同じDLLを使用するすべてのプログラムで同じであることが保証されています。これにより、ランタイムの修正が不要になります-DLLがロードされると、そのコードは読み取り専用になります。</target>
        </trans-unit>
        <trans-unit id="c74bfa2ec2baf330be7b8d46296fdd61de05ff99" translate="yes" xml:space="preserve">
          <source>The advantage of this approach comparing to ALIAS: keyword is that there is no need to code a switch statement, each Perl function (which shares the same XSUB) knows which C function it should call. Additionally, one can attach an extra function remainder() at runtime by using</source>
          <target state="translated">ALIAS:キーワードと比較して、このアプローチの利点は、スイッチ文を記述する必要がないことです。さらに、実行時に</target>
        </trans-unit>
        <trans-unit id="1ba0a293372a8086f2c3cb8bd66f4ad49631031c" translate="yes" xml:space="preserve">
          <source>The advantage of this technique is that you have complete control over the implementation of your filter. The big disadvantage is the increased complexity required to write the filter - not only do you need to understand the source filter hooks, but you also need a reasonable knowledge of Perl guts. One of the few times it is worth going to this trouble is when writing a source scrambler. The &lt;code&gt;decrypt&lt;/code&gt; filter (which unscrambles the source before Perl parses it) included with the source filter distribution is an example of a C source filter (see Decryption Filters, below).</source>
          <target state="translated">この手法の利点は、フィルターの実装を完全に制御できることです。大きな欠点は、フィルターを作成するために必要な複雑さが増すことです。ソースフィルターフックを理解する必要があるだけでなく、Perlガットに関する合理的な知識も必要です。この問題に行く価値のある数少ない時間の1つは、ソーススクランブラーを作成するときです。 &lt;code&gt;decrypt&lt;/code&gt; ソースフィルタ配布に含まれ（Perlがそれを解析する前にソースをスクランブル解除）フィルタ（以下、復号フィルタを参照）Cソース・フィルタの一例です。</target>
        </trans-unit>
        <trans-unit id="072e0efbeb225d357c21442cc8c46a3dcf93b381" translate="yes" xml:space="preserve">
          <source>The advantage of using the above macros is that you don't have to setup an extra function for &lt;code&gt;call_*&lt;/code&gt; , and that using these macros is faster than using &lt;code&gt;call_*&lt;/code&gt; .</source>
          <target state="translated">上記のマクロを使用する利点は、 &lt;code&gt;call_*&lt;/code&gt; に追加の関数を設定する必要がないこと、およびこれらのマクロを使用する方が &lt;code&gt;call_*&lt;/code&gt; を使用するよりも高速であることです。</target>
        </trans-unit>
        <trans-unit id="53174719bc4a34362607e16e39670825ed959235" translate="yes" xml:space="preserve">
          <source>The agent on whose behalf a &lt;b&gt;method&lt;/b&gt; is invoked. In a &lt;b&gt;class&lt;/b&gt; method, the invocant is a package name. In an &lt;b&gt;instance&lt;/b&gt; method, the invocant is an object reference.</source>
          <target state="translated">代理で&lt;b&gt;メソッド&lt;/b&gt;が呼び出されるエージェント。では&lt;b&gt;、クラス&lt;/b&gt;メソッド、インボカントはパッケージ名です。で&lt;b&gt;インスタンス&lt;/b&gt;メソッド、インボカントは、オブジェクト参照です。</target>
        </trans-unit>
        <trans-unit id="3e3cbe3ecc5eb1d553a5d35837bcb40ffd7eda37" translate="yes" xml:space="preserve">
          <source>The aim of the implementation is to provide the PerlIO API in a flexible and platform neutral manner. It is also a trial of an &quot;Object Oriented C, with vtables&quot; approach which may be applied to Perl 6.</source>
          <target state="translated">この実装の目的は、柔軟でプラットフォームニュートラルな方法で PerlIO API を提供することです。また、Perl 6 に適用可能な &quot;Object Oriented C,with vtables &quot;アプローチの試みでもあります。</target>
        </trans-unit>
        <trans-unit id="eca34d276a1e0da5bdcd3481f3be5f1fa01ec807" translate="yes" xml:space="preserve">
          <source>The aim of this stage is to take the Perl source, and turn it into an op tree. We'll see what one of those looks like later. Strictly speaking, there's three things going on here.</source>
          <target state="translated">このステージの目的は、Perl のソースを op ツリーに変換することです。そのうちの一つがどのように見えるかは後で見てみましょう。厳密に言えば、ここでは3つのことが行われています。</target>
        </trans-unit>
        <trans-unit id="1c84b06bf15cbe5bd96e34833737cbd3f8f36b72" translate="yes" xml:space="preserve">
          <source>The alarm() test failure is caused by system() apparently blocking alarm(). That is probably a libc bug, and given that SunOS 4.x has been end-of-lifed years ago, don't hold your breath for a fix. In addition to that, don't try anything too Unicode-y, especially with Encode, and you should be fine in SunOS 4.x.</source>
          <target state="translated">alarm()テストの失敗は、system()が明らかに alarm()をブロックしていることが原因です。これはおそらく libc のバグであり、SunOS 4.x が何年も前に寿命を終えていることを考えると、修正を期待してはいけません。それに加えて、特に Encode を使って、あまりにも Unicode 的なことはしないでください。</target>
        </trans-unit>
        <trans-unit id="ac23951d81146a4c25773847fcd1353c10dfdb5b" translate="yes" xml:space="preserve">
          <source>The alias_code function is deprecated and will be removed in the December 2014 release.</source>
          <target state="translated">alias_code関数は非推奨であり、2014年12月のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="f5829e682c777d3809510d4e74d665806fe75e9a" translate="yes" xml:space="preserve">
          <source>The alias_code function is preserved for backwards compatibility, but the following two are identical:</source>
          <target state="translated">alias_code関数は下位互換性のために保存されていますが、以下の2つは同じです。</target>
        </trans-unit>
        <trans-unit id="70cc56ad5f5fa00e1dcd91a0319ec7c86448a5ca" translate="yes" xml:space="preserve">
          <source>The alloc command allows you to give the ftp server a hint about the size of the file about to be transferred using the ALLO ftp command. Some storage systems use this to make intelligent decisions about how to store the file. The &lt;code&gt;SIZE&lt;/code&gt; argument represents the size of the file in bytes. The &lt;code&gt;RECORD_SIZE&lt;/code&gt; argument indicates a maximum record or page size for files sent with a record or page structure.</source>
          <target state="translated">allocコマンドを使用すると、ALLO ftpコマンドを使用して転送されるファイルのサイズに関するヒントをFTPサーバーに与えることができます。一部のストレージシステムはこれを使用して、ファイルの保存方法についてインテリジェントな決定を行います。 &lt;code&gt;SIZE&lt;/code&gt; の引数は、ファイルのサイズ（バイト単位）を表します。 &lt;code&gt;RECORD_SIZE&lt;/code&gt; の引数は、レコードまたはページ構造で送られたファイルの最大レコードまたはページサイズを示しています。</target>
        </trans-unit>
        <trans-unit id="b33892c53e0bb40f7871a5fed62579159a0f62e4" translate="yes" xml:space="preserve">
          <source>The alternative &lt;code&gt;STORABLE_attach&lt;/code&gt; method provides a solution for these shared objects. Instead of &lt;code&gt;STORABLE_freeze&lt;/code&gt; --&amp;gt; &lt;code&gt;STORABLE_thaw&lt;/code&gt; , you implement &lt;code&gt;STORABLE_freeze&lt;/code&gt; --&amp;gt; &lt;code&gt;STORABLE_attach&lt;/code&gt; instead.</source>
          <target state="translated">代替の &lt;code&gt;STORABLE_attach&lt;/code&gt; メソッドは、これらの共有オブジェクトのソリューションを提供します。代わりの &lt;code&gt;STORABLE_freeze&lt;/code&gt; - &amp;gt; &lt;code&gt;STORABLE_thaw&lt;/code&gt; は、あなたが実装 &lt;code&gt;STORABLE_freeze&lt;/code&gt; &amp;gt; - &lt;code&gt;STORABLE_attach&lt;/code&gt; が代わりに。</target>
        </trans-unit>
        <trans-unit id="402e3151897f6beaece02f0ebb7344497fe45587" translate="yes" xml:space="preserve">
          <source>The alternative is to put the stubs in before the &lt;code&gt;__DATA__&lt;/code&gt; token BEFORE releasing the module, and for this purpose the &lt;code&gt;Devel::SelfStubber&lt;/code&gt; module is available. However this does require the extra step of ensuring that the stubs are in the module. If this is done I strongly recommend that this is done BEFORE releasing the module - it should NOT be done at install time in general.</source>
          <target state="translated">別の方法は、モジュールを解放する前に &lt;code&gt;__DATA__&lt;/code&gt; トークンの前にスタブを配置することです。この目的のために、 &lt;code&gt;Devel::SelfStubber&lt;/code&gt; モジュールを使用できます。ただし、これには、スタブがモジュール内にあることを確認する追加の手順が必要です。これを行う場合は、モジュールをリリースする前に行うことを強くお勧めします。通常、インストール時に行うべきではありません。</target>
        </trans-unit>
        <trans-unit id="6f8e08a6bd15bdf7cb57a249a2eb325f0bdb259e" translate="yes" xml:space="preserve">
          <source>The amount of sbrk(2)ed memory needed to keep buckets aligned.</source>
          <target state="translated">バケットを整列させるために必要な sbrk(2)ed メモリの量。</target>
        </trans-unit>
        <trans-unit id="24d94fd90247d993fe24e78a68e00db6f524e13c" translate="yes" xml:space="preserve">
          <source>The anger you feel when the computer is being lazy. This makes you write programs that don&amp;rsquo;t just react to your needs, but actually anticipate them. Or at least that pretend to. Hence, the second great virtue of a programmer. See also &lt;b&gt;laziness&lt;/b&gt; and &lt;b&gt;hubris&lt;/b&gt;.</source>
          <target state="translated">コンピューターが怠惰なときに感じる怒り。これにより、ニーズに対応するだけでなく、実際にそれらを予測するプログラムを作成できます。または、少なくともそのふりをします。したがって、プログラマーの2番目の美徳です。&lt;b&gt;怠惰&lt;/b&gt;と&lt;b&gt;傲慢&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="2d396c6c924a9cda1b9caf0839be7530a8ba7f62" translate="yes" xml:space="preserve">
          <source>The anonymous subroutine returned by add_function_generator() isn't technically a closure because it refers to no lexicals outside its own scope. Using a closure gives you a</source>
          <target state="translated">add_function_generator()が返す匿名のサブルーチンは、技術的にはクロージャではありません。クロージャを使用すると</target>
        </trans-unit>
        <trans-unit id="7c26228772d7852b95995c9f2def9a6401f105ab" translate="yes" xml:space="preserve">
          <source>The answer is &lt;b&gt;recursion&lt;/b&gt;, and maybe &lt;b&gt;threads&lt;/b&gt;. Both these can create several execution pointers going into the same subroutine. For the subroutine-child not write over the temporaries for the subroutine-parent (lifespan of which covers the call to the child), the parent and the child should have different scratchpads. (</source>
          <target state="translated">答えは&lt;b&gt;再帰&lt;/b&gt;、そしておそらく&lt;b&gt;スレッド&lt;/b&gt;です。これらは両方とも、同じサブルーチンに入るいくつかの実行ポインタを作成できます。subroutine-childが、subroutine-parent（その寿命が子への呼び出しをカバーする）の一時ファイルを上書きしない場合、親と子には異なるスクラッチパッドが必要です。（</target>
        </trans-unit>
        <trans-unit id="352a5795d3c7f4b3f3c9dafd2990d2244d787ba4" translate="yes" xml:space="preserve">
          <source>The answer is that our regexp works well until we get past the last real match. Then the regexp will fail to match a synchronized &lt;code&gt;TGA&lt;/code&gt; and start stepping ahead one character position at a time, not what we want. The solution is to use &lt;code&gt;\G&lt;/code&gt; to anchor the match to the codon alignment:</source>
          <target state="translated">答えは、最後の実際のマッチを通過するまで、正規表現がうまく機能するということです。次に、正規表現は同期された &lt;code&gt;TGA&lt;/code&gt; に一致せず、一度に1文字ずつ先に進みます。解決策は、 &lt;code&gt;\G&lt;/code&gt; を使用して一致をコドンの配置にアンカーすることです。</target>
        </trans-unit>
        <trans-unit id="08cdc226d03f36a2e4fc74ff822641ef90ed1cc6" translate="yes" xml:space="preserve">
          <source>The answer lies in the optimizations the regex engine makes. In the first case, all the engine sees are plain old characters (aside from the &lt;code&gt;?{}&lt;/code&gt; construct). It's smart enough to realize that the string 'ddd' doesn't occur in our target string before actually running the pattern through. But in the second case, we've tricked it into thinking that our pattern is more complicated. It takes a look, sees our character class, and decides that it will have to actually run the pattern to determine whether or not it matches, and in the process of running it hits the print statement before it discovers that we don't have a match.</source>
          <target state="translated">答えは、正規表現エンジンが行う最適化にあります。最初のケースでは、エンジンが見るすべてのものが（ &lt;code&gt;?{}&lt;/code&gt; 構成を除いて）普通の古い文字です。実際にパターンを実行する前に、ターゲット文字列で文字列「ddd」が発生しないことを理解するのに十分スマートです。しかし、2番目のケースでは、パターンがより複雑であると考えるように騙しました。見て、文字クラスを確認し、実際にパターンを実行して一致するかどうかを判断する必要があると判断し、実行の過程でprintステートメントにヒットしてから、一致。</target>
        </trans-unit>
        <trans-unit id="a5831b08e8cef23b3074e1a04c2a596b4fb392c8" translate="yes" xml:space="preserve">
          <source>The answer to requirement 2) is that a regexp (mostly) uses Unicode characters. The &quot;mostly&quot; is for messy backward compatibility reasons, but starting in Perl 5.14, any regex compiled in the scope of a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; (which is automatically turned on within the scope of a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; or higher) will turn that &quot;mostly&quot; into &quot;always&quot;. If you want to handle Unicode properly, you should ensure that &lt;code&gt;'unicode_strings'&lt;/code&gt; is turned on. Internally, this is encoded to bytes using either UTF-8 or a native 8 bit encoding, depending on the history of the string, but conceptually it is a sequence of characters, not bytes. See &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt; for a tutorial about that.</source>
          <target state="translated">要件2）への答えは、正規表現が（主に）Unicode文字を使用することです。 「大部分」は厄介な下位互換性の理由によるものですが、Perl 5.14以降では、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; の範囲でコンパイルされた正規表現（ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; 以降の範囲内で自動的にオンになります）によって、「 「ほとんど」から「常に」へ。 Unicodeを適切に処理する場合は、 &lt;code&gt;'unicode_strings'&lt;/code&gt; がオンになっていることを確認する必要があります。内部的には、これは文字列の履歴に応じて、UTF-8またはネイティブ8ビットエンコーディングを使用してバイトにエンコードされますが、概念的にはバイトではなく文字のシーケンスです。そのチュートリアルについては&lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ab2461c5e3f0cff2ecb68a3151a2d92b8a70b40b" translate="yes" xml:space="preserve">
          <source>The answers may be off by few percentages because of the irregular (slightly aspherical) form of the Earth. The errors are at worst about 0.55%, but generally below 0.3%.</source>
          <target state="translated">答えは、地球の形が不規則(やや非球面)なため、数パーセントずれている場合があります。誤差は最悪でも0.55%程度ですが、一般的には0.3%以下です。</target>
        </trans-unit>
        <trans-unit id="d59be2ed12ab2165af09c3bf2c28e33ef82222db" translate="yes" xml:space="preserve">
          <source>The appended output looks like:</source>
          <target state="translated">追記された出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0bd30cce9c74d0ed491dced5ecc139a5a1ba48e4" translate="yes" xml:space="preserve">
          <source>The appropriate string for the capability will be returned.</source>
          <target state="translated">ケイパビリティに適切な文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="3156ec770160eccf0b831e893b19fba7da139602" translate="yes" xml:space="preserve">
          <source>The arcus (also known as the inverse) functions of the sine, cosine, and tangent</source>
          <target state="translated">サイン、コサイン、タンジェントのアーカス(逆関数としても知られている)関数</target>
        </trans-unit>
        <trans-unit id="ef155b03ef2bd4353f5f3ae9ce3143e92ce08f0b" translate="yes" xml:space="preserve">
          <source>The arcus cofunctions of the sine, cosine, and tangent (acosec/acsc and acotan/acot are aliases). Note that atan2(0, 0) is not well-defined.</source>
          <target state="translated">正弦、余弦、正接のアーカス共関数(acosec/acsc と acotan/acot はエイリアス)。atan2(0,0)はよく定義されていないことに注意してください.</target>
        </trans-unit>
        <trans-unit id="d90394bf6d1003afd92e57075638d8ec96a8f149" translate="yes" xml:space="preserve">
          <source>The area (also known as the inverse) functions of the hyperbolic sine, cosine, and tangent</source>
          <target state="translated">双曲線のサイン、コサイン、タンジェントの面積(逆関数とも呼ばれる)関数</target>
        </trans-unit>
        <trans-unit id="96b07ebcfe3eb3364fc6d5a9b44430b864f7f185" translate="yes" xml:space="preserve">
          <source>The area cofunctions of the hyperbolic sine, cosine, and tangent (acsch/acosech and acoth/acotanh are aliases)</source>
          <target state="translated">双曲線サイン、余弦、接線の面積共関数(acsch/acosech、acoth/acotanhはエイリアスです)。</target>
        </trans-unit>
        <trans-unit id="5ccdfb64dc7931913963c31e04d78b0a9af3ae93" translate="yes" xml:space="preserve">
          <source>The area in which a particular invocation of a particular file or subroutine keeps some of its temporary values, including any lexically scoped variables.</source>
          <target state="translated">特定のファイルやサブルーチンの特定の呼び出しが、辞書的にスコープされた変数を含む一時的な値の一部を保持する領域。</target>
        </trans-unit>
        <trans-unit id="d10c9af72d3c8216f90487b0cb07489720300b93" translate="yes" xml:space="preserve">
          <source>The arg variable is initially set by taking the value from ST(0), then is stored back into ST(0) at the end of the routine.</source>
          <target state="translated">arg 変数は、ST(0)から値を取ることで初期設定され、ルーチンの終了時に ST(0)に格納されます。</target>
        </trans-unit>
        <trans-unit id="4d814bb4a725af841ef1489f2dfafba121655945" translate="yes" xml:space="preserve">
          <source>The argument &lt;code&gt;level&lt;/code&gt; should be either 0 or -1. If &lt;code&gt;level==0&lt;/code&gt; , as a side-effect creates a glob with the given &lt;code&gt;name&lt;/code&gt; in the given &lt;code&gt;stash&lt;/code&gt; which in the case of success contains an alias for the subroutine, and sets up caching info for this glob.</source>
          <target state="translated">引数 &lt;code&gt;level&lt;/code&gt; は0または-1のいずれかである必要があります。 &lt;code&gt;level==0&lt;/code&gt; 場合、副作用として、指定された &lt;code&gt;stash&lt;/code&gt; に指定された &lt;code&gt;name&lt;/code&gt; グロブが作成され、成功した場合はサブルーチンのエイリアスが含まれ、このグロブのキャッシュ情報が設定されます。</target>
        </trans-unit>
        <trans-unit id="46a90c11604ca06c6858b07026656614cf325b22" translate="yes" xml:space="preserve">
          <source>The argument after &lt;code&gt;'autotie'&lt;/code&gt; is a reference to a hash in which each key is the name of an attribute to be created, and each value is the class to which variables ascribed that attribute should be tied.</source>
          <target state="translated">&lt;code&gt;'autotie'&lt;/code&gt; の後の引数は、各キーが作成される属性の名前であるハッシュへの参照であり、各値は、その属性に関連付けられている変数が関連付けられるクラスです。</target>
        </trans-unit>
        <trans-unit id="de7c9584c8050b2d0fdb24caf50ee070b0a90073" translate="yes" xml:space="preserve">
          <source>The argument specification can be</source>
          <target state="translated">引数の指定は</target>
        </trans-unit>
        <trans-unit id="e56eb85000cd23825e22500ebb61377895023bf6" translate="yes" xml:space="preserve">
          <source>The argument specification is optional. If omitted, the option is considered boolean, a value of 1 will be assigned when the option is used on the command line.</source>
          <target state="translated">引数の指定はオプションです。省略された場合、このオプションはブール値とみなされ、コマンドラインで使用された場合には1が代入されます。</target>
        </trans-unit>
        <trans-unit id="f70b3fa6aabdcb387bd854a30ff21340870477da" translate="yes" xml:space="preserve">
          <source>The argument to &lt;code&gt;LIST_CACHE&lt;/code&gt; or &lt;code&gt;SCALAR_CACHE&lt;/code&gt; must either be one of the following four strings:</source>
          <target state="translated">&lt;code&gt;LIST_CACHE&lt;/code&gt; または &lt;code&gt;SCALAR_CACHE&lt;/code&gt; の引数は、次の4つの文字列のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="c5464d59534d6182be5453dd048427e6d0c50353" translate="yes" xml:space="preserve">
          <source>The arguments &lt;code&gt;$heading1&lt;/code&gt; , &lt;code&gt;$heading2&lt;/code&gt; , etc. are the heading titles of the corresponding sections, subsections, etc. to try and match. If &lt;code&gt;$headingN&lt;/code&gt; is omitted then it defaults to the current corresponding section heading title in the input.</source>
          <target state="translated">引数 &lt;code&gt;$heading1&lt;/code&gt; 、 &lt;code&gt;$heading2&lt;/code&gt; などは、対応するセクション、サブセクションなどの見出しタイトルです。場合は &lt;code&gt;$headingN&lt;/code&gt; 入力の現在の対応するセクションの見出しのタイトルに、それデフォルトは省略されています。</target>
        </trans-unit>
        <trans-unit id="0c2d811d7e533f13a02dc5ccb0c9cf2822f648ef" translate="yes" xml:space="preserve">
          <source>The arguments after the</source>
          <target state="translated">の後の引数は</target>
        </trans-unit>
        <trans-unit id="c3ee6db939d4bf6fb2dbd132ec653ceddc879c3d" translate="yes" xml:space="preserve">
          <source>The arguments and expected behaviour of these methods are described in &lt;a href=&quot;../digest&quot;&gt;Digest&lt;/a&gt;.</source>
          <target state="translated">これらのメソッドの引数と予想される動作は、&lt;a href=&quot;../digest&quot;&gt;Digestで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="b5c76d2b203709556f900b75ce0e52a9ac994219" translate="yes" xml:space="preserve">
          <source>The arguments are available via @ARGV, not $1, $2, etc.</source>
          <target state="translated">引数は、$1や$2などではなく、@ARGV経由で取得できます。</target>
        </trans-unit>
        <trans-unit id="6cb92f325e1877b21a75fa1acba0a791fd4726a3" translate="yes" xml:space="preserve">
          <source>The arguments of &lt;code&gt;sv_setpvf&lt;/code&gt; are processed like &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;, and the formatted output becomes the value.</source>
          <target state="translated">&lt;code&gt;sv_setpvf&lt;/code&gt; の引数は &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; のように処理され、フォーマットされた出力が値になります。</target>
        </trans-unit>
        <trans-unit id="839631a833c7558b199549ece29ff396d5371aa7" translate="yes" xml:space="preserve">
          <source>The arguments passed to the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement which invokes &lt;b&gt;sigtrap&lt;/b&gt; are processed in order. When a signal name or the name of one of &lt;b&gt;sigtrap&lt;/b&gt;'s signal lists is encountered a handler is immediately installed, when an option is encountered it affects subsequently installed handlers.</source>
          <target state="translated">渡された引数 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 呼び出し文で&lt;b&gt;SIGTRAPは&lt;/b&gt;順番に処理されます。シグナル名または&lt;b&gt;sigtrap&lt;/b&gt;のシグナルリストのいずれかの名前が検出されると、ハンドラーが直ちにインストールされます。オプションが検出されると、その後にインストールされるハンドラーに影響します。</target>
        </trans-unit>
        <trans-unit id="a181ad8a8d3a3252da75be7994d668c484c4410f" translate="yes" xml:space="preserve">
          <source>The arguments should be a hashref with</source>
          <target state="translated">引数は</target>
        </trans-unit>
        <trans-unit id="01c93f64cbaa573f1e972a244178e4f2a83875d0" translate="yes" xml:space="preserve">
          <source>The arguments themselves are any values following the &lt;code&gt;flags&lt;/code&gt; argument.</source>
          <target state="translated">引数自体は、 &lt;code&gt;flags&lt;/code&gt; 引数に続く任意の値です。</target>
        </trans-unit>
        <trans-unit id="380902efca5b9b3a75f7c59abab4db85bec7e897" translate="yes" xml:space="preserve">
          <source>The arguments to &lt;code&gt;given&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; are in scalar context, and &lt;code&gt;given&lt;/code&gt; assigns the &lt;code&gt;$_&lt;/code&gt; variable its topic value.</source>
          <target state="translated">&lt;code&gt;given&lt;/code&gt; と &lt;code&gt;when&lt;/code&gt; の引数はスカラーコンテキストであり、 &lt;code&gt;given&lt;/code&gt; は &lt;code&gt;$_&lt;/code&gt; 変数にトピック値を割り当てます。</target>
        </trans-unit>
        <trans-unit id="bee53666a69514e40c684814c2f3de57ce34649e" translate="yes" xml:space="preserve">
          <source>The arguments to layers are by default returned in parentheses after the name of the layer, and certain layers (like &lt;code&gt;utf8&lt;/code&gt; ) are not real layers but instead flags on real layers; to get all of these returned separately, use the optional &lt;code&gt;details&lt;/code&gt; argument:</source>
          <target state="translated">レイヤーへの引数は、デフォルトではレイヤー名の後に括弧で返され、特定のレイヤー（ &lt;code&gt;utf8&lt;/code&gt; など）は実際のレイヤーではなく、実際のレイヤーのフラグです。これらすべてを個別に返すには、オプションの &lt;code&gt;details&lt;/code&gt; 引数を使用します。</target>
        </trans-unit>
        <trans-unit id="6e693a7b71ba349ddefc634c4aa1cd90dc56ea7f" translate="yes" xml:space="preserve">
          <source>The arithmetics with pure imaginary numbers works just like you would expect it with real numbers... you just have to remember that</source>
          <target state="translated">純粋な虚数を使った算術は、実数を使った場合と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="27b0340458e5b6bada543e551d3178c4f1de6919" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;@ARGV&lt;/code&gt; contains the command-line arguments intended for the script. &lt;code&gt;$#ARGV&lt;/code&gt; is generally the number of arguments minus one, because &lt;code&gt;$ARGV[0]&lt;/code&gt; is the first argument,</source>
          <target state="translated">配列 &lt;code&gt;@ARGV&lt;/code&gt; には、スクリプト用のコマンドライン引数が含まれています。 &lt;code&gt;$#ARGV&lt;/code&gt; &lt;code&gt;$ARGV[0]&lt;/code&gt; が最初の引数であるため、$＃ARGVは通常、引数の数から1を引いたものです。</target>
        </trans-unit>
        <trans-unit id="5e6fff9bfd20cc94284be277039aa46feebe2516" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;@F&lt;/code&gt; contains the fields of each line read in when autosplit mode is turned on. See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for the &lt;b&gt;-a&lt;/b&gt; switch. This array is package-specific, and must be declared or given a full package name if not in package main when running under &lt;code&gt;strict 'vars'&lt;/code&gt; .</source>
          <target state="translated">配列 &lt;code&gt;@F&lt;/code&gt; には、自動分割モードがオンのときに読み込まれた各行のフィールドが含まれています。&lt;b&gt;-a&lt;/b&gt;スイッチについては&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;を参照してください。この配列はパッケージ固有であり、 &lt;code&gt;strict 'vars'&lt;/code&gt; 実行する場合、パッケージmainにない場合は、完全なパッケージ名を宣言または指定する必要があります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c8441a1e4197d6b374d0c52606833f2a1d2d3753" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;@INC&lt;/code&gt; contains the list of places that the &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; EXPR&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; constructs look for their library files. It initially consists of the arguments to any &lt;b&gt;-I&lt;/b&gt; command-line switches, followed by the default Perl library, probably</source>
          <target state="translated">配列 &lt;code&gt;@INC&lt;/code&gt; には、 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; EXPR&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 構文がライブラリファイルを探す場所のリストが含まれています。最初は、任意の&lt;b&gt;-I&lt;/b&gt;コマンドラインスイッチへの引数で構成され、その後にデフォルトのPerlライブラリが続きます。</target>
        </trans-unit>
        <trans-unit id="a14a26b2dd6454634cc1107915a7a3aee19dc784" translate="yes" xml:space="preserve">
          <source>The array indices start with 0. A negative subscript retrieves its value from the end. In our example, &lt;code&gt;$myarray[-1]&lt;/code&gt; would have been 5000, and &lt;code&gt;$myarray[-2]&lt;/code&gt; would have been 500.</source>
          <target state="translated">配列のインデックスは0から始まります。負の添え字はその値を最後から取得します。この例では、 &lt;code&gt;$myarray[-1]&lt;/code&gt; は5000、 &lt;code&gt;$myarray[-2]&lt;/code&gt; は500になります。</target>
        </trans-unit>
        <trans-unit id="5870f5124d5a86e2473fbde56d4d16aa6bdafbce" translate="yes" xml:space="preserve">
          <source>The array returned by the &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt; operator is divided up according to the same rules the CRTL &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; routine. Therefore, the &quot;system time&quot; elements will always be 0, since there is no difference between &quot;user time&quot; and &quot;system&quot; time under VMS, and the time accumulated by a subprocess may or may not appear separately in the &quot;child time&quot; field, depending on whether &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; keeps track of subprocesses separately. Note especially that the VAXCRTL (at least) keeps track only of subprocesses spawned using &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt;; it will not accumulate the times of subprocesses spawned via pipes, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt;, or backticks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt; 演算子によって返される配列は、CRTL &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; ルーチンと同じ規則に従って分割されます。したがって、「システム時間」要素は常に0になります。これは、VMSの「ユーザー時間」と「システム」時間の間に違いがなく、サブプロセスによって累積された時間が「子時間」に個別に表示される場合と表示されない場合があるためです。 &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; がサブプロセスを個別に追跡するかどうかに応じて、フィールド。特にVAXCRTLは（少なくとも） &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; を使用して生成されたサブプロセスのみを追跡することに注意してください。パイプ、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; 、またはバックティックを介して生成されたサブプロセスの時間を累積しません。</target>
        </trans-unit>
        <trans-unit id="3e203923e4bb3b1b85d85c3be6cf6dca987c9241" translate="yes" xml:space="preserve">
          <source>The arrays &lt;code&gt;@EXPORT&lt;/code&gt; and &lt;code&gt;@EXPORT_OK&lt;/code&gt; in a module hold lists of symbols that are going to be exported into the users name space by default, or which they can request to be exported, respectively. The symbols can represent functions, scalars, arrays, hashes, or typeglobs. The symbols must be given by full name with the exception that the ampersand in front of a function is optional, e.g.</source>
          <target state="translated">モジュールの配列 &lt;code&gt;@EXPORT&lt;/code&gt; および &lt;code&gt;@EXPORT_OK&lt;/code&gt; は、デフォルトでユーザーの名前空間にエクスポートされるシンボルのリスト、またはユーザーがエクスポートを要求できるシンボルのリストをそれぞれ保持します。シンボルは、関数、スカラー、配列、ハッシュ、またはタイプグロブを表すことができます。シンボルは、関数の前のアンパサンドがオプションであることを除いて、フルネームで指定する必要があります。例：</target>
        </trans-unit>
        <trans-unit id="6be6541bf2f3c9c38b314f884349aae8de53fdfb" translate="yes" xml:space="preserve">
          <source>The arrays completely specify the mappings for all possible code points. The final element in an inversion map returned by this function will always be for the range that consists of all the code points that aren't legal Unicode, but that are expressible on the platform. (That is, it starts with code point 0x110000, the first code point above the legal Unicode maximum, and extends to infinity.) The value for that range will be the same that any typical unassigned code point has for the specified property. (Certain unassigned code points are not &quot;typical&quot;; for example the non-character code points, or those in blocks that are to be written right-to-left. The above-Unicode range's value is not based on these atypical code points.) It could be argued that, instead of treating these as unassigned Unicode code points, the value for this range should be &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. If you wish, you can change the returned arrays accordingly.</source>
          <target state="translated">配列は、可能なすべてのコードポイントのマッピングを完全に指定します。この関数によって返される反転マップの最後の要素は、常に、正当なUnicodeではないが、プラットフォームで表現可能なすべてのコードポイントで構成される範囲に対応します。 （つまり、コードポイント0x110000から始まり、有効なUnicodeの最大値を超える最初のコードポイントであり、無限に拡張されます。）その範囲の値は、指定されたプロパティに対して割り当てられていない一般的なコードポイントと同じです。 （特定の割り当てられていないコードポイントは「典型的」ではありません。たとえば、非文字コードポイントや、右から左に書き込まれるブロック内のコードポイントです。上記のUnicode範囲の値は、これらの非典型的なコードポイントに基づいていません。 ）これらを未割り当てのUnicodeコードポイントとして扱うのではなく、この範囲の値は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。必要に応じて、返される配列を適宜変更できます。</target>
        </trans-unit>
        <trans-unit id="215f34a814c5d96aebb0e5a01677224428736e62" translate="yes" xml:space="preserve">
          <source>The arrays.h/arrays.c code in the &lt;a href=&quot;http://search.cpan.org/perldoc/PGPLOT&quot;&gt;PGPLOT&lt;/a&gt; module on CPAN does just this. If you're doing a lot of float or double processing, consider using the &lt;a href=&quot;http://search.cpan.org/perldoc/PDL&quot;&gt;PDL&lt;/a&gt; module from CPAN instead--it makes number-crunching easy.</source>
          <target state="translated">CPAN の&lt;a href=&quot;http://search.cpan.org/perldoc/PGPLOT&quot;&gt;PGPLOT&lt;/a&gt;モジュールのarray.h / arrays.cコードは、まさにこれを行います。floatまたはdouble処理を大量に実行している場合は、代わりにCPAN の&lt;a href=&quot;http://search.cpan.org/perldoc/PDL&quot;&gt;PDL&lt;/a&gt;モジュールを使用することを検討してください。これにより、数値の計算が簡単になります。</target>
        </trans-unit>
        <trans-unit id="7c674ebc98c67a6b78e8bff2084920a9483e6761" translate="yes" xml:space="preserve">
          <source>The arrow points to the sequence number of the next op; they're not displayed in -exec mode, for obvious reasons.</source>
          <target state="translated">矢印は次のオペランドのシーケンス番号を指しています。</target>
        </trans-unit>
        <trans-unit id="d3369ef5421624f50c9461a4385bdfc6e73878c8" translate="yes" xml:space="preserve">
          <source>The art of defining something (at least partly) in terms of itself, which is a naughty no-no in dictionaries but often works out okay in computer programs if you&amp;rsquo;re careful not to recurse forever (which is like an infinite loop with more spectacular failure modes).</source>
          <target state="translated">それ自体で何かを（少なくとも部分的に）定義する技術。これは辞書ではいたずらですが、永遠に再帰しないように気を付ければ（多くの場合無限ループのようです）、コンピュータプログラムでは大丈夫です。壮観な故障モード）。</target>
        </trans-unit>
        <trans-unit id="44c6ad6b4370d28f2449d941c6198878c199473e" translate="yes" xml:space="preserve">
          <source>The article &quot;Constants in Perl&quot;, in</source>
          <target state="translated">Perlでの定数」という記事は</target>
        </trans-unit>
        <trans-unit id="f1506bf3257cec0583c1b75ddabb2245f7506472" translate="yes" xml:space="preserve">
          <source>The assignment to &lt;code&gt;$^R&lt;/code&gt; above is properly localized, so the old value of &lt;code&gt;$^R&lt;/code&gt; is restored if the assertion is backtracked; compare &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;.</source>
          <target state="translated">上記の &lt;code&gt;$^R&lt;/code&gt; への割り当ては適切にローカライズされているため、アサーションがバックトラックされると、 &lt;code&gt;$^R&lt;/code&gt; 古い値が復元されます。&lt;a href=&quot;#Backtracking&quot;&gt;バックトラッキング&lt;/a&gt;と比較してください。</target>
        </trans-unit>
        <trans-unit id="afaa9c220de769e54d663ab2c9c6d4f430c692cd" translate="yes" xml:space="preserve">
          <source>The assignment variants of these operators (&lt;code&gt;&amp;amp;= |= ^= &amp;amp;.= |.= ^.=&lt;/code&gt; ) behave likewise under the feature.</source>
          <target state="translated">これらの演算子の代入バリアント（ &lt;code&gt;&amp;amp;= |= ^= &amp;amp;.= |.= ^.=&lt;/code&gt; ）は、機能の下でも同様に動作します。</target>
        </trans-unit>
        <trans-unit id="71ba6eda663c17eb85a62c08062fb7adfc8e5822" translate="yes" xml:space="preserve">
          <source>The association between the filter object and the source stream is made with the &lt;code&gt;filter_add()&lt;/code&gt; function. This takes a filter object as a parameter (&lt;code&gt;$ref&lt;/code&gt; in this case) and installs it in the source stream.</source>
          <target state="translated">フィルターオブジェクトとソースストリーム間の関連付けは、 &lt;code&gt;filter_add()&lt;/code&gt; 関数を使用して行われます。これは、フィルターオブジェクトをパラメーター（この場合は &lt;code&gt;$ref&lt;/code&gt; ）として受け取り、ソースストリームにインストールします。</target>
        </trans-unit>
        <trans-unit id="12a98cd04a6eb830d540ea5356e8449610414ff4" translate="yes" xml:space="preserve">
          <source>The atmark() functionality is also exportable as sockatmark() function:</source>
          <target state="translated">atmark()機能は sockatmark()関数としてエクスポートすることも可能です。</target>
        </trans-unit>
        <trans-unit id="30252fd845cfc7120c5fe1c8c4bfc41149abe5bb" translate="yes" xml:space="preserve">
          <source>The atmark() implementation: Copyright 2001, Lincoln Stein &amp;lt;lstein@cshl.org&amp;gt;. This module is distributed under the same terms as Perl itself. Feel free to use, modify and redistribute it as long as you retain the correct attribution.</source>
          <target state="translated">atmark（）の実装：Copyright 2001、Lincoln Stein &amp;lt;lstein@cshl.org&amp;gt;。このモジュールは、Perl自体と同じ条件で配布されます。正しい帰属を保持している限り、自由に使用、変更、再配布してください。</target>
        </trans-unit>
        <trans-unit id="82c21f7a3ae183ec4d3047341406ff01ae50460f" translate="yes" xml:space="preserve">
          <source>The attribute list is passed as a list of constant strings to the code which associates them with the subroutine. In particular, the second example of valid syntax above currently looks like this in terms of how it's parsed and invoked:</source>
          <target state="translated">属性リストは定数文字列のリストとして渡され、それらをサブルーチンに関連付けるコードに渡されます。特に、上の有効な構文の2番目の例は、現在のところ、解析と呼び出しの方法から見てこのようになっています。</target>
        </trans-unit>
        <trans-unit id="b657a6989977956f6b98ac68863da82534e8cebe" translate="yes" xml:space="preserve">
          <source>The attributes must be valid as simple identifier names (without any punctuation other than the '_' character). They may have a parameter list appended, which is only checked for whether its parentheses ('(',')') nest properly.</source>
          <target state="translated">属性は、単純な識別子名として有効でなければなりません('_' 以外の句読点はありません)。これらの属性にはパラメータリストを追加することができ、その括弧('(',')')が適切に入れ子になっているかどうかだけがチェックされます。</target>
        </trans-unit>
        <trans-unit id="6773066d674b1f4d653955ef73a085c07f393513" translate="yes" xml:space="preserve">
          <source>The author is particularly grateful to</source>
          <target state="translated">著者は特に次のように感謝しています。</target>
        </trans-unit>
        <trans-unit id="a93ac8e5cbb3f89224036c2390524cda7879089a" translate="yes" xml:space="preserve">
          <source>The author that PAUSE allows to assign &lt;b&gt;co-maintainer&lt;/b&gt; permissions to a &lt;b&gt;namespace&lt;/b&gt;. A primary maintainer can give up this distinction by assigning it to another PAUSE author. See Camel chapter 19, &amp;ldquo;CPAN&amp;rdquo;.</source>
          <target state="translated">PAUSEが&lt;b&gt;共同メンテナ&lt;/b&gt;権限を&lt;b&gt;ネームスペース&lt;/b&gt;に割り当てることを許可する作者。主なメンテナは、別のPAUSE作成者に割り当てることで、この区別をあきらめることができます。ラクダの第19章「CPAN」を参照してください。</target>
        </trans-unit>
        <trans-unit id="08620722332423b72a0cf9f7ae67e151d08d71e3" translate="yes" xml:space="preserve">
          <source>The author would like to thank Jeff Pinyan, Andrew Johnson, Peter Haworth, Ronald J Kimball, and Joe Smith for all their helpful comments.</source>
          <target state="translated">筆者は、Jeff Pinyan、Andrew Johnson、Peter Haworth、Ronald J Kimball、Joe Smithの有益なコメントに感謝したい。</target>
        </trans-unit>
        <trans-unit id="7842e70d44fa0066b01f00b794f28e99cc120d48" translate="yes" xml:space="preserve">
          <source>The author would like to thank Mark-Jason Dominus, Tom Christiansen, Ilya Zakharevich, Brad Hughes, and Mike Giroux for all their helpful comments.</source>
          <target state="translated">筆者は、マーク・ジェイソン・ドミニス、トム・クリスチャンセン、イリヤ・ザクハレビッチ、ブラッド・ヒューズ、マイク・ジルーの有益なコメントに感謝の意を表したいと思います。</target>
        </trans-unit>
        <trans-unit id="d5ab428bb4c4aa590bf7abb081e2b965dbe912a0" translate="yes" xml:space="preserve">
          <source>The author's book</source>
          <target state="translated">著者の本</target>
        </trans-unit>
        <trans-unit id="c9e7cff5bfc96623d1a90b00467d7f7914fdeb06" translate="yes" xml:space="preserve">
          <source>The authors make &lt;b&gt;no warranty&lt;/b&gt;, implied or otherwise, about the suitability of this software for safety or security purposes.</source>
          <target state="translated">作者は、このソフトウェアの安全性またはセキュリティ目的への適合性について、黙示またはそれ以外の&lt;b&gt;保証&lt;/b&gt;をし&lt;b&gt;ません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="9dd8067e06812735b51136d8d5ba18979e5deef6" translate="yes" xml:space="preserve">
          <source>The authors shall not in any case be liable for special, incidental, consequential, indirect or other similar damages arising from the use of this software.</source>
          <target state="translated">本ソフトウェアの使用に起因する特別損害、付随的損害、結果的損害、間接的損害、その他類似の損害については、いかなる場合においても著者は責任を負わないものとします。</target>
        </trans-unit>
        <trans-unit id="bac4f3e7625a4b29694017ee1288427918dba79c" translate="yes" xml:space="preserve">
          <source>The auto-decrement operator is not magical.</source>
          <target state="translated">自動減算演算子は魔法ではありません。</target>
        </trans-unit>
        <trans-unit id="c93a7c7b52c97bf0962eebd109f5c679236979ad" translate="yes" xml:space="preserve">
          <source>The auto-increment operator has a little extra builtin magic to it. If you increment a variable that is numeric, or that has ever been used in a numeric context, you get a normal increment. If, however, the variable has been used in only string contexts since it was set, and has a value that is not the empty string and matches the pattern &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; , the increment is done as a string, preserving each character within its range, with carry:</source>
          <target state="translated">自動インクリメント演算子には、少し余分な組み込みの魔法があります。数値の変数、または数値コンテキストで使用された変数をインクリメントすると、通常のインクリメントが得られます。ただし、変数が設定されてから文字列コンテキストでのみ使用されており、空の文字列ではなく、パターン &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; 一致する値を持っている場合/、インクリメントは文字列として行われ、キャリーを使用して範囲内の各文字を保持します。</target>
        </trans-unit>
        <trans-unit id="2fa846bc3447cd43bb267eb92f634f66df9d2ff7" translate="yes" xml:space="preserve">
          <source>The autodie pragma &lt;b&gt;&amp;lt;does not check calls to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;&lt;/b&gt;&amp;gt;.</source>
          <target state="translated">autodieプラグマは&lt;b&gt;&amp;lt; &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; の&lt;/b&gt;&lt;b&gt;呼び出しをチェックしません&lt;/b&gt; &amp;gt;。</target>
        </trans-unit>
        <trans-unit id="6a915a44546183301bc1ab2da7f5d31390cf86d3" translate="yes" xml:space="preserve">
          <source>The autodocumentation system was originally added to the Perl core by Benjamin Stuhl. Documentation is by whoever was kind enough to document their functions.</source>
          <target state="translated">autodocumentation システムは、元々 Benjamin Stuhl によって Perl コアに追加されたものです。ドキュメンテーションは、親切に機能を文書化してくれた人によって行われます。</target>
        </trans-unit>
        <trans-unit id="3c574214b5c14cf6b803beb9ac59c1988cd63384" translate="yes" xml:space="preserve">
          <source>The automatic and manual perl installation leave precompiled paths inside perl executables. While these paths are overwriteable (see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt;, &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;), some people may prefer binary editing of paths inside the executables/DLLs.</source>
          <target state="translated">自動および手動のperlインストールでは、perl実行可能ファイル内にプリコンパイルされたパスが残ります。これらのパスは上書き可能ですが（&lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt;、&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIRを&lt;/a&gt;参照）、実行可能ファイル/ DLL内のパスのバイナリ編集を好む人もいます。</target>
        </trans-unit>
        <trans-unit id="ff6dd9cd9205a8a816f4c19d3aaf08bb26c3152c" translate="yes" xml:space="preserve">
          <source>The available binary operators are:</source>
          <target state="translated">利用可能なバイナリ演算子は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="68bb2a0daa0abd0313002b533bf42c71219aad2d" translate="yes" xml:space="preserve">
          <source>The available diagnostics are:</source>
          <target state="translated">利用可能な診断は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d8dc3fd07c3386d7e5ad61722c90a54b40f250e5" translate="yes" xml:space="preserve">
          <source>The available fields in the structure are:</source>
          <target state="translated">構造体で利用可能なフィールドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="191f1bb9111a3757ed2ccf45e0e506ae45f1cb2d" translate="yes" xml:space="preserve">
          <source>The available locales depend on your operating system; try whether &lt;code&gt;locale -a&lt;/code&gt; shows them or man pages for &quot;locale&quot; or &quot;nlsinfo&quot; or the direct approach &lt;code&gt;ls /usr/lib/nls/loc&lt;/code&gt; or &lt;code&gt;ls /usr/lib/nls&lt;/code&gt; or &lt;code&gt;ls /usr/lib/locale&lt;/code&gt; . Not all the locales that your vendor supports are necessarily installed: please consult your operating system's documentation and possibly your local system administration. The locale names are probably something like &lt;code&gt;xx_XX.(ISO)?8859-N&lt;/code&gt; or &lt;code&gt;xx_XX.(ISO)?8859N&lt;/code&gt;, for example &lt;code&gt;fr_CH.ISO8859-1&lt;/code&gt; is the Swiss (CH) variant of French (fr), ISO Latin (8859) 1 (-1) which is the Western European character set.</source>
          <target state="translated">利用可能なロケールは、オペレーティングシステムによって異なります。しようとするかどうか &lt;code&gt;locale -a&lt;/code&gt; &quot;ロケール&quot;または&quot;nlsinfo&quot;または直接的なアプローチのためのショーそれらまたはmanページ &lt;code&gt;ls /usr/lib/nls/loc&lt;/code&gt; または &lt;code&gt;ls /usr/lib/nls&lt;/code&gt; または &lt;code&gt;ls /usr/lib/locale&lt;/code&gt; 。ベンダーがサポートするすべてのロケールがインストールされている必要はありません。オペレーティングシステムのドキュメントを参照し、ローカルシステムの管理を参照してください。ロケール名はおそらく &lt;code&gt;xx_XX.(ISO)?8859-N&lt;/code&gt; または &lt;code&gt;xx_XX.(ISO)?8859N&lt;/code&gt; ようになります。たとえば、 &lt;code&gt;fr_CH.ISO8859-1&lt;/code&gt; はフランス語（fr）、ISOラテン語（8859）のスイス（CH）バリアントです。 1（-1）は西ヨーロッパの文字セットです。</target>
        </trans-unit>
        <trans-unit id="7b104fea0c3b585be7abd9fdcae3632fd9df0849" translate="yes" xml:space="preserve">
          <source>The available mechanisms are:</source>
          <target state="translated">利用可能なメカニズムは</target>
        </trans-unit>
        <trans-unit id="54ed46c150718473d8504c434e30cd577b337e90" translate="yes" xml:space="preserve">
          <source>The available options are:</source>
          <target state="translated">利用可能なオプションは</target>
        </trans-unit>
        <trans-unit id="456a0ea0217776b650b3498424ef7ee39f3e2d1e" translate="yes" xml:space="preserve">
          <source>The backend for the &lt;code&gt;SvPVbytex_force&lt;/code&gt; macro. Always use the macro instead.</source>
          <target state="translated">&lt;code&gt;SvPVbytex_force&lt;/code&gt; マクロのバックエンド。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="6595fe0b01dc35e2c9393282a00929c691d16bd4" translate="yes" xml:space="preserve">
          <source>The backend for the &lt;code&gt;SvPVutf8x_force&lt;/code&gt; macro. Always use the macro instead.</source>
          <target state="translated">&lt;code&gt;SvPVutf8x_force&lt;/code&gt; マクロのバックエンド。代わりに常にマクロを使用してください。</target>
        </trans-unit>
        <trans-unit id="77f66884acce6cf3a3939cb28b0a48cb55b42d47" translate="yes" xml:space="preserve">
          <source>The backslash</source>
          <target state="translated">バックスラッシュ</target>
        </trans-unit>
        <trans-unit id="d905ecd546099386ec13c3559da83e50955fb3c5" translate="yes" xml:space="preserve">
          <source>The backslash character &lt;code&gt;'\'&lt;/code&gt; is a metacharacter itself and needs to be backslashed:</source>
          <target state="translated">バックスラッシュ文字 &lt;code&gt;'\'&lt;/code&gt; はそれ自体がメタ文字であり、バックスラッシュを付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="3991be487f455d5a6205c52bea36150b4cf4f97a" translate="yes" xml:space="preserve">
          <source>The backslash sequence can mean either ASCII- or Full-range Unicode, depending on various factors as described in &lt;a href=&quot;perlre#Which-character-set-modifier-is-in-effect%3f&quot;&gt;Which character set modifier is in effect? in perlre&lt;/a&gt;.</source>
          <target state="translated">バックスラッシュシーケンスは、&lt;a href=&quot;perlre#Which-character-set-modifier-is-in-effect%3f&quot;&gt;どの文字セット修飾子が有効になっているかで&lt;/a&gt;説明されているさまざまな要因に応じて、ASCIIまたはフルレンジのUnicodeを意味します。perlreで。</target>
        </trans-unit>
        <trans-unit id="f6d38a5acb41572fd3f6bf7b206aa3e31dca4b0b" translate="yes" xml:space="preserve">
          <source>The backtick operator does no translation of the return value, unlike &lt;b&gt;csh&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;csh&lt;/b&gt;とは異なり、バックティック演算子は戻り値の変換を行いません。</target>
        </trans-unit>
        <trans-unit id="ee45daa9d8b6e8559dda882c9eead013ce496d22" translate="yes" xml:space="preserve">
          <source>The backtick operator does variable interpolation without regard to the presence of single quotes in the command.</source>
          <target state="translated">backtick演算子は、コマンド内の単一引用符の存在を無視して変数補間を行います。</target>
        </trans-unit>
        <trans-unit id="8cd2b3706bb4ede8bd356d31a0615f4df40a7834" translate="yes" xml:space="preserve">
          <source>The backtrace returns the stack trace of the C call frames, with the symbol names (function names), the object names (like &quot;perl&quot;), and if it can, also the source code locations (&lt;a href=&quot;file:line&quot;&gt;file:line&lt;/a&gt;).</source>
          <target state="translated">バックトレースは、C呼び出しフレームのスタックトレースを、シンボル名（関数名）、オブジェクト名（「perl」など）とともに返します。可能な場合は、ソースコードの場所（&lt;a href=&quot;file:line&quot;&gt;file：line&lt;/a&gt;）も返します。</target>
        </trans-unit>
        <trans-unit id="8bed32736e1b2815ccd999741f9407d4d43d0e8b" translate="yes" xml:space="preserve">
          <source>The base class implementation of the &lt;b&gt;interior_sequence()&lt;/b&gt; method simply returns the raw text of the interior sequence (as it occurred in the input) to the caller.</source>
          <target state="translated">&lt;b&gt;interior_sequence（）&lt;/b&gt;メソッドの基本クラス実装は、&lt;b&gt;（&lt;/b&gt;入力で発生した）内部シーケンスの生のテキストを呼び出し元に返すだけです。</target>
        </trans-unit>
        <trans-unit id="c9ddcb47643cb89116a0a922b50075bea2f25a0e" translate="yes" xml:space="preserve">
          <source>The base class implementation of this method returns the given text.</source>
          <target state="translated">このメソッドのベースクラスの実装は、与えられたテキストを返します。</target>
        </trans-unit>
        <trans-unit id="3f5a827dc5c599719e7ecb28e524afa3505acc67" translate="yes" xml:space="preserve">
          <source>The base class implementation of this method simply prints the text block as it occurred in the input stream).</source>
          <target state="translated">このメソッドのベースクラスの実装は、単に入力ストリームで発生したテキストブロックを印刷します)。</target>
        </trans-unit>
        <trans-unit id="df7aaeb92a14b1f8eaf4aa28b1e80496ba8b43fa" translate="yes" xml:space="preserve">
          <source>The base class implementation of this method simply prints the textblock (unmodified) to the output filehandle.</source>
          <target state="translated">このメソッドのベースクラスの実装は、単にテキストブロック(変更されていない)を出力ファイルハンドルに印刷します。</target>
        </trans-unit>
        <trans-unit id="303eecbc86fd9c0b4febc57eac0a317dd40331d4" translate="yes" xml:space="preserve">
          <source>The base class implementation of this method simply treats the raw POD command as normal block of paragraph text (invoking the &lt;b&gt;textblock()&lt;/b&gt; method with the command paragraph).</source>
          <target state="translated">このメソッドの基本クラス実装は、生のPODコマンドを通常の段落テキストのブロックとして扱います（コマンド段落で&lt;b&gt;textblock（）&lt;/b&gt;メソッドを呼び出す）。</target>
        </trans-unit>
        <trans-unit id="b322d5503c2a18a0550bcf3559879c8738ef1a3f" translate="yes" xml:space="preserve">
          <source>The base class' &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method is &lt;b&gt;not&lt;/b&gt; called.</source>
          <target state="translated">基本クラスの &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドは呼び出され&lt;b&gt;ません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="869b6928181db8fd7439173a04a65a2b691f1a82" translate="yes" xml:space="preserve">
          <source>The base function, e.g., &lt;code&gt;isALPHA()&lt;/code&gt; , takes an octet (either a &lt;code&gt;char&lt;/code&gt; or a &lt;code&gt;U8&lt;/code&gt; ) as input and returns a boolean as to whether or not the character represented by that octet is (or on non-ASCII platforms, corresponds to) an ASCII character in the named class based on platform, Unicode, and Perl rules. If the input is a number that doesn't fit in an octet, FALSE is returned.</source>
          <target state="translated">&lt;code&gt;isALPHA()&lt;/code&gt; などの基本関数は、オクテット（ &lt;code&gt;char&lt;/code&gt; または &lt;code&gt;U8&lt;/code&gt; のいずれか）を入力として受け取り、そのオクテットで表される文字が（または非ASCIIプラットフォームでは、対応する）かどうかに関するブール値を返します。プラットフォーム、Unicode、およびPerlのルールに基づく名前付きクラスのASCII文字。入力がオクテットに収まらない数値の場合、FALSEが返されます。</target>
        </trans-unit>
        <trans-unit id="b4a446b2fbdd7a1f128f546637cc4e95f828763e" translate="yes" xml:space="preserve">
          <source>The base port of Perl to Symbian only implements the basic POSIX-like functionality; it does not implement any further Symbian or Series 60, Series 80, or UIQ bindings for Perl.</source>
          <target state="translated">Symbian への Perl のベースポートは、基本的な POSIX ライクな機能のみを実装しています。</target>
        </trans-unit>
        <trans-unit id="7b0c0715021b7093caa628303290fd7be9406317" translate="yes" xml:space="preserve">
          <source>The base revision level of this package, from the</source>
          <target state="translated">このパッケージの基本リビジョンレベルは</target>
        </trans-unit>
        <trans-unit id="1f81368d64cf4514ffa26dd1724286707ec25460" translate="yes" xml:space="preserve">
          <source>The base should be zero or between 2 and 36, inclusive. When the base is zero or omitted &lt;code&gt;strtol&lt;/code&gt; will use the string itself to determine the base: a leading &quot;0x&quot; or &quot;0X&quot; means hexadecimal; a leading &quot;0&quot; means octal; any other leading characters mean decimal. Thus, &quot;1234&quot; is parsed as a decimal number, &quot;01234&quot; as an octal number, and &quot;0x1234&quot; as a hexadecimal number.</source>
          <target state="translated">基数はゼロまたは2と36の間でなければなりません。基数がゼロまたは省略されている場合、 &lt;code&gt;strtol&lt;/code&gt; は文字列自体を使用して基数を決定します。先頭の「0x」または「0X」は16進数を意味します。先頭の「0」は8進数を意味します。他の先行文字はすべて10進数を意味します。したがって、「1234」は10進数、「01234」は8進数、「0x1234」は16進数として解析されます。</target>
        </trans-unit>
        <trans-unit id="d0bf4e2fa899dc153c411be4c5898369064784f4" translate="yes" xml:space="preserve">
          <source>The base structure of a regop is defined in</source>
          <target state="translated">regopの基本構造は、次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="29446f6b360bcce933609abf092817cd60b4c651" translate="yes" xml:space="preserve">
          <source>The base64 encoded string returned is not padded to be a multiple of 4 bytes long. If you want interoperability with other base64 encoded md5 digests you might want to append the string &quot;==&quot; to the result.</source>
          <target state="translated">返されるbase64エンコードされた文字列は、4バイトの倍数になるようにパディングされていません。他のbase64エンコードされたmd5ダイジェストとの相互運用性を確保したい場合は、結果に&quot;==&quot;という文字列を追加した方が良いかもしれません。</target>
        </trans-unit>
        <trans-unit id="d8ffce64bc52685123cf17779b3bc30ab4b06b36" translate="yes" xml:space="preserve">
          <source>The basic &lt;code&gt;quant&lt;/code&gt; method that Locale::Maketext provides should be good for many languages. For some languages, it might be useful to modify it (or its constituent &lt;code&gt;numerate&lt;/code&gt; method) to take a plural form in the two-argument call to &lt;code&gt;quant&lt;/code&gt; (as in &quot;[quant,_1,files]&quot;) if it's all-around easier to infer the singular form from the plural, than to infer the plural form from the singular.</source>
          <target state="translated">Locale :: Maketextが提供する基本的な &lt;code&gt;quant&lt;/code&gt; メソッドは、多くの言語に適しています。一部の言語では、それ（またはその構成要素である &lt;code&gt;numerate&lt;/code&gt; メソッド）を変更して、 &lt;code&gt;quant&lt;/code&gt; への2つの引数の呼び出しで複数形を取ると便利です（ &quot;[quant、_1、files]&quot;のように）。単数形から複数形を推測するよりも、複数形から単数形を推測する。</target>
        </trans-unit>
        <trans-unit id="bd8f1357516762bbb931d125e3d2a8b11599ee5f" translate="yes" xml:space="preserve">
          <source>The basic IPC facilities of Perl are built out of the good old Unix signals, named pipes, pipe opens, the Berkeley socket routines, and SysV IPC calls. Each is used in slightly different situations.</source>
          <target state="translated">Perl の基本的な IPC 機能は、古き良き Unix シグナル、名前付きパイプ、パイプオープン、バークレーソケットルーチン、SysV IPC 呼び出しから構築されています。それぞれのIPCは微妙に異なる状況で使用されます。</target>
        </trans-unit>
        <trans-unit id="9eaaba65a1dac8dd5fd38c2dd581e65245159383" translate="yes" xml:space="preserve">
          <source>The basic building block of Perl strings has always been a &quot;character&quot;. The changes basically come down to that the implementation no longer thinks that a character is always just a single byte.</source>
          <target state="translated">Perl の文字列の基本的な構成要素は常に「文字」です。この変更は、基本的には、実装では文字は常に1バイトであるとは考えなくなったことに起因しています。</target>
        </trans-unit>
        <trans-unit id="bf944598ad68a6908fe4ecd014a8a61a7b06d00e" translate="yes" xml:space="preserve">
          <source>The basic data structure is a PerlIOl:</source>
          <target state="translated">基本的なデータ構造はPerlIOlです。</target>
        </trans-unit>
        <trans-unit id="b5815b577f436fdec50339dbc9340f9c6b027e08" translate="yes" xml:space="preserve">
          <source>The basic design of Locale::Maketext is object-oriented, and Locale::Maketext is an abstract base class, from which you derive a &quot;project class&quot;. The project class (with a name like &quot;TkBocciBall::Localize&quot;, which you then use in your module) is in turn the base class for all the &quot;language classes&quot; for your project (with names &quot;TkBocciBall::Localize::it&quot;, &quot;TkBocciBall::Localize::en&quot;, &quot;TkBocciBall::Localize::fr&quot;, etc.).</source>
          <target state="translated">Locale::Maketext の基本設計はオブジェクト指向であり、Locale::Maketext は抽象的な基底クラスであり、そこから「プロジェクトクラス」を導き出します。このプロジェクトクラス(&quot;TkBocciBall::Localize&quot; のような名前のクラスで、モジュール内で使用します)は、プロジェクトのすべての &quot;言語クラス&quot;(&quot;TkBocciBall::Localize::it&quot;、&quot;TkBocciBall::Localize::en&quot;、&quot;TkBocciBall::Localize::fr&quot; などの名前のクラス)の基底クラスとなります。</target>
        </trans-unit>
        <trans-unit id="7d3d2515e50dae3561d665210b7c755d11c489ee" translate="yes" xml:space="preserve">
          <source>The basic design of Math::BigInt allows simple subclasses with very little work, as long as a few simple rules are followed:</source>
          <target state="translated">Math::BigInt の基本的なデザインは、いくつかの簡単なルールさえ守れば、ほとんど作業をせずにシンプルなサブクラスを作ることができます。</target>
        </trans-unit>
        <trans-unit id="1933c32469836b92b1e6ed87797ae53de2e4a98a" translate="yes" xml:space="preserve">
          <source>The basic files in a module look something like this.</source>
          <target state="translated">モジュール内の基本ファイルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="341f2c68b6960d075517d469051ae07bb1f926b7" translate="yes" xml:space="preserve">
          <source>The basic idea of inserting, changing, or deleting a line from a text file involves reading and printing the file to the point you want to make the change, making the change, then reading and printing the rest of the file. Perl doesn't provide random access to lines (especially since the record input separator, &lt;code&gt;$/&lt;/code&gt; , is mutable), although modules such as &lt;a href=&quot;tie/file&quot;&gt;Tie::File&lt;/a&gt; can fake it.</source>
          <target state="translated">テキストファイルから行を挿入、変更、または削除する基本的な考え方は、変更を加えたいポイントまでファイルを読み取って印刷し、変更を加えてから、残りのファイルを読み取って印刷することです。Perlは行へのランダムアクセスを提供しません（特に、レコード入力区切り文字 &lt;code&gt;$/&lt;/code&gt; は変更可能であるため）。ただし、&lt;a href=&quot;tie/file&quot;&gt;Tie :: File&lt;/a&gt;などのモジュールはそれを偽造することができます。</target>
        </trans-unit>
        <trans-unit id="99456abf05b5371483583dbfe86305dc116a350f" translate="yes" xml:space="preserve">
          <source>The basic purpose of this module is to print out either &quot;ok #&quot; or &quot;not ok #&quot; depending on if a given test succeeded or failed. Everything else is just gravy.</source>
          <target state="translated">このモジュールの基本的な目的は、与えられたテストが成功したか失敗したかに応じて、&quot;OK #&quot; または &quot;OK #ではない #&quot; のどちらかを出力することです。それ以外のものはただの情報源です。</target>
        </trans-unit>
        <trans-unit id="64db8342329369b417d189ab1b4fe97232b396bf" translate="yes" xml:space="preserve">
          <source>The basic structure of this routine is to try to find the start- and/or end-points of where the pattern could match, and to ensure that the string is long enough to match the pattern. It tries to use more efficient methods over less efficient methods and may involve considerable cross-checking of constraints to find the place in the string that matches. For instance it may try to determine that a given fixed string must be not only present but a certain number of chars before the end of the string, or whatever.</source>
          <target state="translated">このルーチンの基本的な構造は、パターンが一致する可能性のある場所の開始点および/または終了点を見つけようとし、文字列がパターンに一致するのに十分な長さであることを保証することです。これは、効率の悪い方法よりも効率の良い方法を使用しようとし、文字列の中で一致する場所を見つけるために、制約のかなりのクロスチェックを必要とすることがあります。例えば、与えられた固定文字列が存在するだけでなく、文字列の終わりの前に一定の数の文字が存在しなければならないことを決定しようとするかもしれません。</target>
        </trans-unit>
        <trans-unit id="80dbc79bfdbd83bc8576245228c2b94ef265f584" translate="yes" xml:space="preserve">
          <source>The basic unit of Perl testing is the ok. For each thing you want to test your program will print out an &quot;ok&quot; or &quot;not ok&quot; to indicate pass or fail. You do this with the &lt;code&gt;ok()&lt;/code&gt; function (see below).</source>
          <target state="translated">Perlテストの基本単位は問題ありません。プログラムをテストしたいものごとに、プログラムが合格または不合格を示す「ok」または「not ok」を出力します。これを行うには、 &lt;code&gt;ok()&lt;/code&gt; 関数を使用します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="9d2230b748e4308cffef19ddef65b44d6210c473" translate="yes" xml:space="preserve">
          <source>The behavior implied by the &lt;b&gt;use warnings&lt;/b&gt; pragma is not mandatory.</source>
          <target state="translated">&lt;b&gt;use warnings&lt;/b&gt;プラグマが意味する動作は必須ではありません。</target>
        </trans-unit>
        <trans-unit id="b5f143aadeaa7a8e64e344e87d8748a02f3060a4" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if LENGTH is greater than the length of the file.</source>
          <target state="translated">LENGTHがファイルの長さよりも大きい場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="2f1c51d0082c9a007ed014e64f75cf7ba3d7eb5f" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; on a directory handle depends on the operating system. On a system with dirfd(3) or similar, &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; on a directory handle returns the underlying file descriptor associated with the handle; on systems with no such support, it returns the undefined value, and sets &lt;code&gt;$!&lt;/code&gt; (errno).</source>
          <target state="translated">ディレクトリハンドルに対する &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; の動作は、オペレーティングシステムによって異なります。dirfd（3）または類似のシステムでは、ディレクトリハンドルの &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; は、ハンドルに関連付けられた基礎となるファイル記述子を返します。そのようなサポートのないシステムでは、未定義の値を返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。（errno）。</target>
        </trans-unit>
        <trans-unit id="ac7e84891cea0201bfbd9008ae17bfca2f62f2a2" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; within a regex code block (such as &lt;code&gt;/(?{...})/&lt;/code&gt; ) is subject to change.</source>
          <target state="translated">正規表現コードブロック（ &lt;code&gt;/(?{...})/&lt;/code&gt; など）内の &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; の動作は変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="57f854aca9536e1cea9a0904019b31bc3e9f0356" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; on a directory handle depends on the operating system. On a system with dirfd(3) or similar, &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; on a directory handle returns the underlying file descriptor associated with the handle; on systems with no such support, it returns the undefined value, and sets &lt;code&gt;$!&lt;/code&gt; (errno).</source>
          <target state="translated">ディレクトリハンドルに対する &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; の動作は、オペレーティングシステムによって異なります。dirfd（3）または類似のシステムでは、ディレクトリハンドルの &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; は、ハンドルに関連付けられた基礎となるファイル記述子を返します。そのようなサポートのないシステムでは、未定義の値を返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。（errno）。</target>
        </trans-unit>
        <trans-unit id="00c21c5f299927d5b3bf2172e0cf7aff5e3373e8" translate="yes" xml:space="preserve">
          <source>The behavior of PREFIX is complicated and depends closely on how your Perl is configured. The resulting installation locations will vary from machine to machine and even different installations of Perl on the same machine. Because of this, its difficult to document where prefix will place your modules.</source>
          <target state="translated">PREFIXの動作は複雑で、Perlの設定方法に密接に依存します。結果としてのインストール場所はマシンによって異なりますし、同じマシンにPerlをインストールしている場合でも、異なるマシンにインストールされている場合があります。このため、prefix がモジュールをどこに配置するかを文書化するのは困難です。</target>
        </trans-unit>
        <trans-unit id="93dc5bd5efb782736e0942603b0c8fa1c754b397" translate="yes" xml:space="preserve">
          <source>The behavior of a smartmatch depends on what type of things its arguments are, as determined by the following table. The first row of the table whose types apply determines the smartmatch behavior. Because what actually happens is mostly determined by the type of the second operand, the table is sorted on the right operand instead of on the left.</source>
          <target state="translated">スマートマッチの動作は、その引数がどのようなタイプのものであるかに依存します。型が適用されるテーブルの最初の行が、スマートマッチの動作を決定します。実際に何が起こるかは、2 番目のオペランドの型によって決定されることがほとんどなので、テーブルは左ではなく右のオペランドでソートされます。</target>
        </trans-unit>
        <trans-unit id="f414c994d5bce7014330ec5990bba640279929f3" translate="yes" xml:space="preserve">
          <source>The behavior of binary arithmetic operators depends on whether they're used on numbers or strings. The operators treat a string as a series of bits and work with that (the string &lt;code&gt;&quot;3&quot;&lt;/code&gt; is the bit pattern &lt;code&gt;00110011&lt;/code&gt; ). The operators work with the binary form of a number (the number &lt;code&gt;3&lt;/code&gt; is treated as the bit pattern &lt;code&gt;00000011&lt;/code&gt; ).</source>
          <target state="translated">2項算術演算子の動作は、それらが数値と文字列のどちらで使用されているかによって異なります。演算子は文字列を一連のビットとして扱い、それを処理します（文字列 &lt;code&gt;&quot;3&quot;&lt;/code&gt; はビットパターン &lt;code&gt;00110011&lt;/code&gt; です）。演算子は、数値のバイナリ形式で機能します（数値 &lt;code&gt;3&lt;/code&gt; はビットパターン &lt;code&gt;00000011&lt;/code&gt; として扱われます）。</target>
        </trans-unit>
        <trans-unit id="31eed332c2e58a5c0964723f7df67ca11212685a" translate="yes" xml:space="preserve">
          <source>The behavior of kill when a</source>
          <target state="translated">殺すときの行動</target>
        </trans-unit>
        <trans-unit id="d59b4319820011355ea137761a33247562041027" translate="yes" xml:space="preserve">
          <source>The behavior of local() on non-existent members of composite types is subject to change in future.</source>
          <target state="translated">複合型の存在しないメンバに対する local()の挙動は、今後変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7ad390bfcc2f23a71fab54461bd3359a98aa3f6d" translate="yes" xml:space="preserve">
          <source>The behavior of these operators is problematic (and subject to change) if either or both of the strings are encoded in UTF-8 (see &lt;a href=&quot;perlunicode#Byte-and-Character-Semantics&quot;&gt;Byte and Character Semantics in perlunicode&lt;/a&gt;.</source>
          <target state="translated">これらの演算子の動作は、文字列のいずれかまたは両方がUTF-8でエンコードされている場合（および変更される可能性があります）（&lt;a href=&quot;perlunicode#Byte-and-Character-Semantics&quot;&gt;perlunicodeのByte and Character Semanticsを参照）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a64f313f128b7624f16c0e92b9e3e3d919ea21bc" translate="yes" xml:space="preserve">
          <source>The behavior of tied arrays is not precisely the same as for regular arrays. For example:</source>
          <target state="translated">紐付き配列の動作は,通常の配列と正確には同じではありません.例えば</target>
        </trans-unit>
        <trans-unit id="e661f036702b62721315aa1d02abc1020897293c" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;code&gt;%-&lt;/code&gt; is implemented via the &lt;a href=&quot;tie/hash/namedcapture&quot;&gt;Tie::Hash::NamedCapture&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;%-&lt;/code&gt; の動作は、&lt;a href=&quot;tie/hash/namedcapture&quot;&gt;Tie :: Hash :: NamedCapture&lt;/a&gt;モジュールを介して実装されます。</target>
        </trans-unit>
        <trans-unit id="9f2f442d7e61435532ac3ebe398b46e4cb8b23b2" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;code&gt;&lt;a href=&quot;__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; within a regex code block (such as &lt;code&gt;/(?{...})/&lt;/code&gt; ) is subject to change.</source>
          <target state="translated">正規表現コードブロック（ &lt;code&gt;/(?{...})/&lt;/code&gt; など）内の &lt;code&gt;&lt;a href=&quot;__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; の動作は変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ecf97494e2dabd3d3c4d6cda259bfc77c61ec233" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; within a regex code block (such as &lt;code&gt;/(?{...})/&lt;/code&gt; ) is subject to change.</source>
          <target state="translated">正規表現コードブロック（ &lt;code&gt;/(?{...})/&lt;/code&gt; など）内の &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; の動作は変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="893a97392f7263bab5a8304f6d49e881ca91ba83" translate="yes" xml:space="preserve">
          <source>The behaviour of File::Fetch can be altered by changing the following global variables:</source>
          <target state="translated">File::Fetchの動作は、以下のグローバル変数を変更することで変更することができます。</target>
        </trans-unit>
        <trans-unit id="9225f0f55c56aed5c676f19da54d01c0121ae5ab" translate="yes" xml:space="preserve">
          <source>The behaviour of IPC::Cmd can be altered by changing the following global variables:</source>
          <target state="translated">IPC::Cmdの動作は、以下のグローバル変数を変更することで変更することができます。</target>
        </trans-unit>
        <trans-unit id="d64ba516b01f1b6dc31324edef30defa2d23432c" translate="yes" xml:space="preserve">
          <source>The behaviour of Module::Load::Conditional can be altered by changing the following global variables:</source>
          <target state="translated">Module::Load::Conditionalの動作は、以下のグローバル変数を変更することで変更することができます。</target>
        </trans-unit>
        <trans-unit id="47460fd55663b585106f39954f79fa9625db07e7" translate="yes" xml:space="preserve">
          <source>The behaviour of Params::Check can be altered by changing the following global variables:</source>
          <target state="translated">Params::Check の動作は、以下のグローバル変数を変更することで変更することができます。</target>
        </trans-unit>
        <trans-unit id="deb69a58f590c98de917558022e0254d1d774946" translate="yes" xml:space="preserve">
          <source>The behaviour of the function depends on the arguments:</source>
          <target state="translated">関数の動作は引数に依存します。</target>
        </trans-unit>
        <trans-unit id="6ec80595e1c021e2b98071cdf1e5337bff9c960f" translate="yes" xml:space="preserve">
          <source>The behaviour of this option is dependent on the type of &lt;code&gt;$output&lt;/code&gt; .</source>
          <target state="translated">このオプションの動作は、 &lt;code&gt;$output&lt;/code&gt; タイプによって異なります。</target>
        </trans-unit>
        <trans-unit id="db32480c737ba8d1007a7ce0c4ddf37612954128" translate="yes" xml:space="preserve">
          <source>The behaviour of this option is dependent on the type of output data stream.</source>
          <target state="translated">こ のオプシ ョ ンの動作は、 出力デー タ ス ト リ ームの種類に依存 し ます。</target>
        </trans-unit>
        <trans-unit id="ae8ebb83ae7fe5dc9eabc5af8c2815aedcfc7b2d" translate="yes" xml:space="preserve">
          <source>The belief that &amp;ldquo;small is beautiful&amp;rdquo;. Paradoxically, if you say something in a small language, it turns out big, and if you say it in a big language, it turns out small. Go figure.</source>
          <target state="translated">「小さなものは美しい」という信念。逆説的に言えば、小さな言語で何かを言うとそれは大きくなり、大きな言語でそれを言うとそれは小さくなります。図を行きます。</target>
        </trans-unit>
        <trans-unit id="5dcff025d12c2edfa9fc4a567fa29e7990ea6873" translate="yes" xml:space="preserve">
          <source>The benefit of using &lt;code&gt;-Mlib=/foo&lt;/code&gt; over &lt;code&gt;-I/foo&lt;/code&gt; , is that the former will automagically remove any duplicated directories, while the latter will not.</source>
          <target state="translated">使用することの利点 &lt;code&gt;-Mlib=/foo&lt;/code&gt; かけ &lt;code&gt;-I/foo&lt;/code&gt; が、前者は自動的に後者であろうがない、任意の重複ディレクトリを削除することです。</target>
        </trans-unit>
        <trans-unit id="18900f73de54d7de200d866c09a29fdcc8cd53a3" translate="yes" xml:space="preserve">
          <source>The best algorithm depends on many things. On average, mergesort does fewer comparisons than quicksort, so it may be better when complicated comparison routines are used. Mergesort also takes advantage of pre-existing order, so it would be favored for using &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; to merge several sorted arrays. On the other hand, quicksort is often faster for small arrays, and on arrays of a few distinct values, repeated many times. You can force the choice of algorithm with this pragma, but this feels heavy-handed, so the subpragmas beginning with a &lt;code&gt;_&lt;/code&gt; may not persist beyond Perl 5.8. The default algorithm is mergesort, which will be stable even if you do not explicitly demand it. But the stability of the default sort is a side-effect that could change in later versions. If stability is important, be sure to say so with a</source>
          <target state="translated">最良のアルゴリズムは多くのことに依存します。平均すると、mergesortはクイックソートよりも比較が少ないため、複雑な比較ルーチンを使用する方が良い場合があります。 Mergesortはまた、既存の順序を利用するため、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; を使用して複数のソートされた配列をマージするのに適しています。一方、クイックソートは、小さな配列の場合や、少数の異なる値の配列の場合、何度も繰り返されると高速になることがよくあります。このプラグマを使用してアルゴリズムの選択を強制できますが、これは強引な感じがするため、 &lt;code&gt;_&lt;/code&gt; で始まるサブプラグマPerl 5.8以降では持続しない場合があります。デフォルトのアルゴリズムはmergesortであり、明示的に要求しなくても安定します。ただし、デフォルトのソートの安定性は、後のバージョンで変更される可能性がある副作用です。安定性が重要な場合は、必ず</target>
        </trans-unit>
        <trans-unit id="25c86820424aca2962f29e4f76c6234dbf83f89d" translate="yes" xml:space="preserve">
          <source>The best comments explain</source>
          <target state="translated">最高のコメントが説明してくれます。</target>
        </trans-unit>
        <trans-unit id="97fb423abf47c78c911e5c1b325aae0069b921b4" translate="yes" xml:space="preserve">
          <source>The best way to avoid this oddity is to use this pragma RIGHT AFTER other modules are loaded. i.e.</source>
          <target state="translated">この奇妙な現象を避ける最善の方法は、他のモジュールがロードされた直後にこのプラグマを使用することです。</target>
        </trans-unit>
        <trans-unit id="7c4c0bd8f72ca6e9c0f331a5d5955e9a813aecd9" translate="yes" xml:space="preserve">
          <source>The best way to do this is to come up with a better algorithm. This can often make a dramatic difference. Jon Bentley's book</source>
          <target state="translated">最良の方法は、より良いアルゴリズムを思いつくことです。これによって劇的な違いが生まれることがよくあります。ジョン・ベントレーの本</target>
        </trans-unit>
        <trans-unit id="98421bf65e01fd86f5f0e0be25fe15a961951223" translate="yes" xml:space="preserve">
          <source>The best way to know for sure, and pick up many helpful suggestions, is to ask someone who knows. Comp.lang.perl.misc is read by just about all the people who develop modules and it's the best place to ask.</source>
          <target state="translated">確実に知るための最良の方法は、知っている人に聞くことです。Comp.lang.perl.misc はモジュールを開発しているすべての人が読んでいるので、ここが質問するのに最適な場所です。</target>
        </trans-unit>
        <trans-unit id="f32d03eab0e341d80074007f2d5b494b8f3cdcfe" translate="yes" xml:space="preserve">
          <source>The best way to prevent this issue is to use waitpid(), as in the following example:</source>
          <target state="translated">この問題を防ぐ最善の方法は、次の例のように waitpid()を使用することです。</target>
        </trans-unit>
        <trans-unit id="832c6230c64f67a2bd05effe72650dfa3f10cba9" translate="yes" xml:space="preserve">
          <source>The best way to unlock a file is to discard the object and untie the array. It is probably unsafe to unlock the file without also untying it, because if you do, changes may remain unwritten inside the object. That is why there is no shortcut for unlocking. If you really want to unlock the file prematurely, you know what to do; if you don't know what to do, then don't do it.</source>
          <target state="translated">ファイルのロックを解除する最良の方法は、オブジェクトを破棄して配列を解くことです。ファイルも解かずにロックを解除するのはおそらく安全ではないでしょう、そうするとオブジェクトの中に変更が書き込まれずに残ってしまう可能性があるからです。だからこそ、ロック解除の近道がないのです。どうしても早期にロックを解除したいのであれば、どうすればいいのかを知っていて、どうすればいいのかわからないのであれば、やらないようにしましょう。</target>
        </trans-unit>
        <trans-unit id="7b82cd1f6eaec920a028950cb809a9a88e952b55" translate="yes" xml:space="preserve">
          <source>The big advantage of this form is that it makes it much easier to write patterns with references that can be interpolated in larger patterns, even if the larger pattern also contains capture groups.</source>
          <target state="translated">本実施形態の大きな利点は、より大きなパターンにもキャプチャグループが含まれている場合でも、より大きなパターンに補間可能な参照を用いてパターンを書くことが格段に容易になることである。</target>
        </trans-unit>
        <trans-unit id="d54be9133193e99a54a3311620e4e293b6619ef3" translate="yes" xml:space="preserve">
          <source>The big difference between the two types of filter is that the</source>
          <target state="translated">2種類のフィルターの大きな違いは</target>
        </trans-unit>
        <trans-unit id="f4cd1959ad69d1f5686957182fd610eaea766644" translate="yes" xml:space="preserve">
          <source>The big difference between this filter and the previous example is the use of context data in the filter object. The filter object is based on a hash reference, and is used to keep various pieces of context information between calls to the filter function. All but two of the hash fields are used for error reporting. The first of those two, Enabled, is used by the filter to determine whether the debugging code should be given to the Perl parser. The second, InTraceBlock, is true when the filter has encountered a &lt;code&gt;DEBUG_BEGIN&lt;/code&gt; line, but has not yet encountered the following &lt;code&gt;DEBUG_END&lt;/code&gt; line.</source>
          <target state="translated">このフィルターと前の例の大きな違いは、フィルターオブジェクトでのコンテキストデータの使用です。フィルターオブジェクトはハッシュ参照に基づいており、フィルター関数の呼び出し間でさまざまなコンテキスト情報を保持するために使用されます。 2つを除くすべてのハッシュフィールドがエラー報告に使用されます。これら2つのうちの最初のEnabledはフィルターによって使用され、Perlパーサーにデバッグコードを渡すかどうかを決定します。 2番目のInTraceBlockは、フィルターが &lt;code&gt;DEBUG_BEGIN&lt;/code&gt; 行を検出したが、次の &lt;code&gt;DEBUG_END&lt;/code&gt; 行をまだ検出していない場合にtrueになります。</target>
        </trans-unit>
        <trans-unit id="52b096e99c9cb93102a3127548a39ec46a5e6a20" translate="yes" xml:space="preserve">
          <source>The big problem with this approach is that if you don't have control over source code being run in the child process, you can't control what it does with pipe buffering. Thus you can't just open a pipe to &lt;code&gt;cat -v&lt;/code&gt; and continually read and write a line from it.</source>
          <target state="translated">このアプローチの大きな問題は、子プロセスで実行されるソースコードを制御できない場合、パイプバッファリングで何を行うかを制御できないことです。したがって、単に &lt;code&gt;cat -v&lt;/code&gt; へのパイプを開いて、そこから継続的に行を読み書きすることはできません。</target>
        </trans-unit>
        <trans-unit id="6486f0bee06ebbaca6cfa5b06fc46e3b4ab031bf" translate="yes" xml:space="preserve">
          <source>The biggest difference between Perl</source>
          <target state="translated">Perlとの最大の違いは</target>
        </trans-unit>
        <trans-unit id="10223441fe4732f3b2ec434dced2b599c8ca3725" translate="yes" xml:space="preserve">
          <source>The biggest difference is that the first construction would reinstate the initial value of $var, irrespective of how control exits the block: &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, etc. It is a little bit more efficient as well.</source>
          <target state="translated">最大の違いは、最初の構築では、制御がブロックを終了する方法（ &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; など）に関係なく、$ varの初期値が復元されることです。これも少し効率的です。</target>
        </trans-unit>
        <trans-unit id="3dfc4089faf0bdc2fe8184811a388d88572e3199" translate="yes" xml:space="preserve">
          <source>The biggest trap of all is forgetting to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; or use the &lt;b&gt;-w&lt;/b&gt; switch; see &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; and &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;. The second biggest trap is not making your entire program runnable under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; . The third biggest trap is not reading the list of changes in this version of Perl; see &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perldelta.html&quot;&gt;perldelta&lt;/a&gt;.</source>
          <target state="translated">すべての最大のトラップは、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;か、&lt;b&gt;-w&lt;/b&gt;スイッチを使用するのを忘れることです。&lt;a href=&quot;warnings&quot;&gt;警告&lt;/a&gt;と&lt;a href=&quot;perlrun&quot;&gt;perlrunを&lt;/a&gt;参照してください。2番目に大きなトラップは、プログラム全体を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; で実行可能にすることではありません。3番目に大きな罠は、このバージョンのPerlの変更点のリストを読んでいないことです。&lt;a href=&quot;https://perldoc.perl.org/5.26.0/perldelta.html&quot;&gt;perldeltaを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="86312f7a492ad492d886bde4c3d6e414b56f1879" translate="yes" xml:space="preserve">
          <source>The binary can be installed into the directory where perl normally resides on your machine with</source>
          <target state="translated">バイナリは、Perlが通常マシン上に存在するディレクトリに</target>
        </trans-unit>
        <trans-unit id="153cbfaf81971e19f89aca8f0baea516f2171a06" translate="yes" xml:space="preserve">
          <source>The binary number may optionally be prefixed with &quot;0b&quot; or &quot;b&quot; unless &lt;code&gt;PERL_SCAN_DISALLOW_PREFIX&lt;/code&gt; is set in</source>
          <target state="translated">2進数には、 &lt;code&gt;PERL_SCAN_DISALLOW_PREFIX&lt;/code&gt; が設定されていない限り、オプションで「0b」または「b」をプレフィックスとして付けることができます。</target>
        </trans-unit>
        <trans-unit id="5cc1bf2dab8b81eb0899313841a54927fbe7de16" translate="yes" xml:space="preserve">
          <source>The binary operators &lt;code&gt;+&lt;/code&gt;&lt;code&gt;-&lt;/code&gt;&lt;code&gt;*&lt;/code&gt;&lt;code&gt;/&lt;/code&gt;&lt;code&gt;%&lt;/code&gt;&lt;code&gt;==&lt;/code&gt;&lt;code&gt;!=&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt; and the unary operators &lt;code&gt;-&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; will attempt to convert arguments to integers. If both conversions are possible without loss of precision, and the operation can be performed without loss of precision then the integer result is used. Otherwise arguments are converted to floating point format and the floating point result is used. The caching of conversions (as described above) means that the integer conversion does not throw away fractional parts on floating point numbers.</source>
          <target state="translated">バイナリ演算子は &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;%&lt;/code&gt; &lt;code&gt;==&lt;/code&gt; &lt;code&gt;!=&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;=&lt;/code&gt; &lt;code&gt;&amp;lt;=&lt;/code&gt; と単項演算子 &lt;code&gt;-&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;--&lt;/code&gt; 整数の引数を変換しようとします。精度を失うことなく両方の変換が可能で、精度を失うことなく演算を実行できる場合は、整数の結果が使用されます。それ以外の場合、引数は浮動小数点形式に変換され、浮動小数点の結果が使用されます。 （上記のように）変換のキャッシングは、整数変換が浮動小数点数の小数部分を捨てないことを意味します。</target>
        </trans-unit>
        <trans-unit id="1bc82db291b733618e76b84e58f74ac2a34e10aa" translate="yes" xml:space="preserve">
          <source>The bit complement operator &lt;code&gt;~&lt;/code&gt; may produce surprising results if used on strings containing characters with ordinal values above 255. In such a case, the results are consistent with the internal encoding of the characters, but not with much else. So don't do that. Similarly for &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt;: you will be operating on the internally-encoded bit patterns of the Unicode characters, not on the code point values, which is very probably not what you want.</source>
          <target state="translated">ビット補数演算子 &lt;code&gt;~&lt;/code&gt; は、255を超える序数値を持つ文字を含む文字列で使用すると、驚くべき結果を生成する可能性があります。そのような場合、結果は文字の内部エンコードと一致しますが、他の多くの文字とは一致しません。だからそれをしないでください。同様に &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; の場合：コードポイント値ではなく、内部的にエンコードされたUnicode文字のビットパターンを操作します。これは、おそらく望んでいることではありません。</target>
        </trans-unit>
        <trans-unit id="d35eca1d1b5259b3fe2499ebc8287ac008c74743" translate="yes" xml:space="preserve">
          <source>The bit of magic mentioned in the section title occurs when the regexp backtracks in the process of searching for a match. If the regexp backtracks over a code expression and if the variables used within are localized using &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;, the changes in the variables produced by the code expression are undone! Thus, if we wanted to count how many times a character got matched inside a group, we could use, e.g.,</source>
          <target state="translated">セクションのタイトルに記載されているちょっとした魔法は、正規表現が一致を検索する過程で後戻りするときに発生します。正規表現がコード式を逆戻りし、その中で使用されている変数が &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; を使用してローカライズされている場合、コード式によって生成された変数の変更は元に戻されます！したがって、グループ内で文字が一致した回数を数えたい場合は、たとえば、</target>
        </trans-unit>
        <trans-unit id="37e1e5bfe9f52e71b4a679c89e1ebe8060bbbb9c" translate="yes" xml:space="preserve">
          <source>The bit string operators, &lt;code&gt;&amp;amp; | ^ ~&lt;/code&gt; and (starting in v5.22) &lt;code&gt;&amp;amp;. |. ^.  ~.&lt;/code&gt; can operate on characters that don't fit into a byte. However, the current behavior is likely to change. You should not use these operators on strings that are encoded in UTF-8. If you're not sure about the encoding of a string, downgrade it before using any of these operators; you can use &lt;a href=&quot;utf8#Utility-functions&quot;&gt;utf8::utf8_downgrade() &lt;/a&gt;.</source>
          <target state="translated">ビット文字列演算子 &lt;code&gt;&amp;amp; | ^ ~&lt;/code&gt; および（v5.22以降） &lt;code&gt;&amp;amp;. |. ^. ~.&lt;/code&gt; バイトに収まらない文字を操作できます。ただし、現在の動作は変更される可能性があります。これらの演算子は、UTF-8でエンコードされた文字列には使用しないでください。文字列のエンコーディングが不明な場合は、これらの演算子を使用する前にダウングレードしてください。&lt;a href=&quot;utf8#Utility-functions&quot;&gt;utf8 :: utf8_downgrade（）を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="798f07dedaf152fa64ff8f36aa832d747a59dede" translate="yes" xml:space="preserve">
          <source>The bitmask</source>
          <target state="translated">ビットマスク</target>
        </trans-unit>
        <trans-unit id="7f65bb852dcddd2ea289cb9a819f8b8574f5d891" translate="yes" xml:space="preserve">
          <source>The bitwise operators such as &amp;amp; ^ | may return different results when operating on string or character data in a Perl program running on an EBCDIC platform than when run on an ASCII platform. Here is an example adapted from the one in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;:</source>
          <target state="translated">＆^などのビット演算子| EBCDICプラットフォームで実行されているPerlプログラムで文字列または文字データを操作すると、ASCIIプラットフォームで実行された場合とは異なる結果を返す場合があります。以下は、&lt;a href=&quot;perlop&quot;&gt;perlopの&lt;/a&gt;例から改作した例です。</target>
        </trans-unit>
        <trans-unit id="6f959154b03d16bc90e316f48db81d6452186e11" translate="yes" xml:space="preserve">
          <source>The bless() operator may be used to associate the object a reference points to with a package functioning as an object class. See &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">bless（）演算子は、参照が指すオブジェクトを、オブジェクトクラスとして機能するパッケージに関連付けるために使用できます。&lt;a href=&quot;perlobj&quot;&gt;perlobjを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="62c6e0f6d8c3596c1d5e718f86c80115574f39a3" translate="yes" xml:space="preserve">
          <source>The blibdirs.ts target is deprecated. Depend on blibdirs instead.</source>
          <target state="translated">blibdirs.ts ターゲットは非推奨です。代わりに blibdirs に依存してください。</target>
        </trans-unit>
        <trans-unit id="a0e8f481ec3e68f2eee488cdec2641a9ee4fc58d" translate="yes" xml:space="preserve">
          <source>The body of an object is never examined by an inside-out class, only its reference address is used. This allows for the body of an actual object to be</source>
          <target state="translated">オブジェクトのボディはインサイドアウトクラスによって検査されることはなく、参照アドレスだけが使用されます。これにより、実際のオブジェクトのボディは</target>
        </trans-unit>
        <trans-unit id="5f03e7d3d4bcb5b96cdb3a0cb31e708fb5a607fe" translate="yes" xml:space="preserve">
          <source>The bond between a magical variable and its implementation class. See the &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo; and Camel chapter 14, &amp;ldquo;Tied Variables&amp;rdquo;.</source>
          <target state="translated">魔法の変数とその実装クラスの間の結合。Camelの第27章「関数」およびCamelの第14章「 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 変数」のtie関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="3d1559aa0f7fe592165823ac05e1383677536c15" translate="yes" xml:space="preserve">
          <source>The boss thread does relatively little work. While tasks aren't necessarily performed faster than with any other method, it tends to have the best user-response times.</source>
          <target state="translated">ボススレッドは比較的小さな作業を行います。タスクは他の方法よりも必ずしも速く実行されるわけではありませんが、ユーザーの反応が最も良い傾向にあります。</target>
        </trans-unit>
        <trans-unit id="4d643dd67e77ce12596be6c04808856092685be2" translate="yes" xml:space="preserve">
          <source>The boss/worker model usually has one</source>
          <target state="translated">ボス/ワーカーモデルは通常1台</target>
        </trans-unit>
        <trans-unit id="7cb25d97420dee45b6ff8e8d1d3ce98bc5f8cf9f" translate="yes" xml:space="preserve">
          <source>The bottom line is that Perl has always practiced &quot;Character Semantics&quot;, but with the advent of Unicode, that is now different than &quot;Byte Semantics&quot;.</source>
          <target state="translated">要するに、Perlは常に「文字セマンティクス」を実践してきましたが、Unicodeの登場により、それは「バイトセマンティクス」とは異なるものになりました。</target>
        </trans-unit>
        <trans-unit id="b78f42ecd2e198ccb02cbf24e0cb3e2f279a41cb" translate="yes" xml:space="preserve">
          <source>The bottom line is that using &lt;code&gt;/o&lt;/code&gt; is almost never a good idea.</source>
          <target state="translated">&lt;code&gt;/o&lt;/code&gt; 、/ oを使用することはほとんど決して良い考えではありません。</target>
        </trans-unit>
        <trans-unit id="d9acf6e820cb60c3e92eccf3aa1b7d56933e4bb1" translate="yes" xml:space="preserve">
          <source>The bracketing construct &lt;code&gt;( ... )&lt;/code&gt; creates capture groups (also referred to as capture buffers). To refer to the current contents of a group later on, within the same pattern, use &lt;code&gt;\g1&lt;/code&gt; (or &lt;code&gt;\g{1}&lt;/code&gt; ) for the first, &lt;code&gt;\g2&lt;/code&gt; (or &lt;code&gt;\g{2}&lt;/code&gt; ) for the second, and so on. This is called a</source>
          <target state="translated">ブラケット構造 &lt;code&gt;( ... )&lt;/code&gt; は、キャプチャグループ（キャプチャバッファーとも呼ばれます）を作成します。同じパターン内で後でグループの現在の内容を参照するには、最初のグループに &lt;code&gt;\g1&lt;/code&gt; （または &lt;code&gt;\g{1}&lt;/code&gt; ）、2番目に &lt;code&gt;\g2&lt;/code&gt; （または &lt;code&gt;\g{2}&lt;/code&gt; ）を使用します。これは</target>
        </trans-unit>
        <trans-unit id="e36070a31e90d55267b22c4c53ba4bb76bc4e98b" translate="yes" xml:space="preserve">
          <source>The btree format allows arbitrary key/value pairs to be stored in a sorted, balanced binary tree.</source>
          <target state="translated">btree形式では、任意のキー/値のペアを、ソートされたバランスのとれたバイナリツリーに格納することができます。</target>
        </trans-unit>
        <trans-unit id="3d23a8ab70ee632140bebef4fc4a9cc18111b1ba" translate="yes" xml:space="preserve">
          <source>The bucket usage information provided by &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(%hash)&lt;/a&gt;&lt;/code&gt; is not available. What this means is that using %tied_hash in boolean context doesn't work right (currently this always tests false, regardless of whether the hash is empty or hash elements).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(%hash)&lt;/a&gt;&lt;/code&gt; によって提供されるバケットの使用情報は利用できません。これが意味することは、ブールコンテキストで％tied_hashを使用しても正しく機能しないことです（現在、これはハッシュが空であるかハッシュ要素であるかに関係なく、常にfalseをテストします）。</target>
        </trans-unit>
        <trans-unit id="ca05fef836743ccb209a85580910e15958fde72d" translate="yes" xml:space="preserve">
          <source>The buffer for this layer currently holds data written to it but not sent to next layer.</source>
          <target state="translated">このレイヤのバッファは現在、書き込まれたデータを保持していますが、次のレイヤには送信されていません。</target>
        </trans-unit>
        <trans-unit id="7906bb96b8244bc39b3b8a2c3c66a3c0af5824fe" translate="yes" xml:space="preserve">
          <source>The buffer for this layer currently holds unconsumed data read from layer below.</source>
          <target state="translated">このレイヤのバッファは、現在、下のレイヤから読み出された消費されないデータを保持しています。</target>
        </trans-unit>
        <trans-unit id="6ea453ad94b47d04a0aaf4ba8a7c5a8d66aac757" translate="yes" xml:space="preserve">
          <source>The buffer for this layer should be filled (for read) from layer below. When you &quot;subclass&quot; PerlIOBuf layer, you want to use its</source>
          <target state="translated">このレイヤのバッファは、下のレイヤから読み込まれます。PerlIOBuf レイヤを「サブクラス化」する場合、そのレイヤの</target>
        </trans-unit>
        <trans-unit id="0b0da711f6da8dbe92866cc34757189eaf594fa5" translate="yes" xml:space="preserve">
          <source>The buffer parameters can either be a scalar or a scalar reference.</source>
          <target state="translated">バッファパラメータにはスカラまたはスカラ参照を指定することができます。</target>
        </trans-unit>
        <trans-unit id="3180fcf8985754e2c180a612db1e7626b0444c64" translate="yes" xml:space="preserve">
          <source>The buffer size parameter is ignored. If either argument to &lt;code&gt;copy&lt;/code&gt; is a handle to an opened file, then data is copied using Perl operators, and no effort is made to preserve file attributes or record structure.</source>
          <target state="translated">バッファサイズパラメータは無視されます。 &lt;code&gt;copy&lt;/code&gt; する引数のいずれかが開いているファイルのハンドルである場合、データはPerl演算子を使用してコピーされ、ファイル属性またはレコード構造を保持するための努力は行われません。</target>
        </trans-unit>
        <trans-unit id="3a3e5d3d24ac3da5ee8782f3b635bd002510477d" translate="yes" xml:space="preserve">
          <source>The build procedure is completely standard:</source>
          <target state="translated">ビルドの手順は完全に標準的なものです。</target>
        </trans-unit>
        <trans-unit id="eb86001bb0f7c51ab8f75bc125c6599630a9618e" translate="yes" xml:space="preserve">
          <source>The build process is dependent on the location of the NetWare SDK. Once the Tools &amp;amp; SDK are installed, the build environment has to be setup. The following batch files setup the environment.</source>
          <target state="translated">ビルドプロセスは、NetWare SDKの場所によって異なります。Tools＆SDKをインストールしたら、ビルド環境をセットアップする必要があります。次のバッチファイルは、環境をセットアップします。</target>
        </trans-unit>
        <trans-unit id="66dc024a88d2f72023e3d27090cc749788a83502" translate="yes" xml:space="preserve">
          <source>The build requires CodeWarrior compiler and linker. In addition, the &quot;NetWare SDK&quot;, &quot;NLM &amp;amp; NetWare Libraries for C&quot; and &quot;NetWare Server Protocol Libraries for C&quot;, all available at &lt;a href=&quot;http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit&quot;&gt;http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit&lt;/a&gt;, are required. Microsoft Visual C++ version 4.2 or later is also required.</source>
          <target state="translated">ビルドには、CodeWarriorコンパイラとリンカーが必要です。さらに、「NetWare SDK」、「NLM＆NetWare Libraries for C」、および「NetWare Server Protocol Libraries for C」はすべて&lt;a href=&quot;http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit&quot;&gt;http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit&lt;/a&gt;で入手できます。必要です。Microsoft Visual C ++バージョン4.2以降も必要です。</target>
        </trans-unit>
        <trans-unit id="2ba6778f7060ad4df8f24bbc1bdc4f90be4ddf10" translate="yes" xml:space="preserve">
          <source>The build system that Perl uses is called metaconfig. This system is maintained separately from the Perl core.</source>
          <target state="translated">Perl が使用するビルドシステムは metaconfig と呼ばれています。このシステムはPerlコアとは別に管理されています。</target>
        </trans-unit>
        <trans-unit id="942228e32ca9b0927fd55428e4055983f76b4ec4" translate="yes" xml:space="preserve">
          <source>The built-ins &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; can also be overridden, but due to special magic, their original syntax is preserved, and you don't have to define a prototype for their replacements. (You can't override the &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; syntax, though).</source>
          <target state="translated">組み込みの &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; もオーバーライドできますが、特別な魔法のために、元の構文が保持されており、置き換え用のプロトタイプを定義する必要はありません。（ただし、 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; 構文をオーバーライドすることはできません）。</target>
        </trans-unit>
        <trans-unit id="296da44de5630b90165936266a71322d333ad173" translate="yes" xml:space="preserve">
          <source>The bulk of the &lt;code&gt;B&lt;/code&gt; module is the methods for accessing fields of these structures.</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; モジュールの大部分は、これらの構造のフィールドにアクセスするためのメソッドです。</target>
        </trans-unit>
        <trans-unit id="8b0e07205f847f3c71cfbfff3ef8429008605c63" translate="yes" xml:space="preserve">
          <source>The bulk of the work is done by the &lt;code&gt;check_num()&lt;/code&gt; subroutine, which takes a reference to its input queue and a prime number that it's responsible for. After pulling in the input queue and the prime that the subroutine is checking (line 11), we create a new queue (line 13) and reserve a scalar for the thread that we're likely to create later (line 12).</source>
          <target state="translated">作業の大部分は &lt;code&gt;check_num()&lt;/code&gt; サブルーチンによって実行されます。このサブルーチンは、入力キューへの参照と、それが担当する素数を受け取ります。入力キューと、サブルーチンがチェックしている素数（11行目）をプルした後、新しいキューを作成し（13行目）、後で作成する可能性のあるスレッド（12行目）のスカラーを予約します。</target>
        </trans-unit>
        <trans-unit id="791442532861b4bafb692d53705783ee9bec0932" translate="yes" xml:space="preserve">
          <source>The byteorder on the platform where Perl was built is also available via &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">Perlが構築されたプラットフォームのバイトオーダーは、&lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;からも利用できます。</target>
        </trans-unit>
        <trans-unit id="2a22ccaf7c6bd804cab616f223b89fb4c998d9e8" translate="yes" xml:space="preserve">
          <source>The byteorder on the platform where Perl was built is also available via &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">Perlが構築されたプラットフォームのバイトオーダーは、&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;からも利用できます。</target>
        </trans-unit>
        <trans-unit id="95b43b81c5e8935337a225eeb872942eb25c3b63" translate="yes" xml:space="preserve">
          <source>The cache itself consumes about 310 bytes per cached record, so if your file has many short records, you may want to decrease the cache memory limit, or else the cache overhead may exceed the size of the cached data.</source>
          <target state="translated">キャッシュ自体はキャッシュされたレコードあたり約310バイトを消費するので、短いレコードが多いファイルの場合は、キャッシュのメモリ制限を減らすか、キャッシュのオーバーヘッドがキャッシュされたデータのサイズを超えてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="64eab8d82090d9e1801adf3ce396bf3e93f4b8ee" translate="yes" xml:space="preserve">
          <source>The call graph looks like this:</source>
          <target state="translated">コールグラフはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="438b1deafb199f6d78cd53708e2c5819899363df" translate="yes" xml:space="preserve">
          <source>The call is implemented in terms of either Perl's or your system's native fread(3) library function. To get a true read(2) system call, see &lt;a href=&quot;#sysread-FILEHANDLE%2cSCALAR%2cLENGTH%2cOFFSET&quot;&gt;sysread&lt;/a&gt;.</source>
          <target state="translated">呼び出しは、Perlまたはシステムのネイティブfread（3）ライブラリ関数のいずれかで実装されます。真のread（2）システムコールを取得するには、&lt;a href=&quot;#sysread-FILEHANDLE%2cSCALAR%2cLENGTH%2cOFFSET&quot;&gt;sysreadを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="743d372bad1a8cad2381aca07cbb441a9da8196f" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;XSLoader::load()&lt;/code&gt; (or &lt;code&gt;bootstrap()&lt;/code&gt; ) calls the module's bootstrap code. For modules build by</source>
          <target state="translated">呼び出し &lt;code&gt;XSLoader::load()&lt;/code&gt; （または &lt;code&gt;bootstrap()&lt;/code&gt; ）モジュールのブートストラップコードを呼び出します。によって構築されたモジュールの場合</target>
        </trans-unit>
        <trans-unit id="3ec6acbf7a32681ee91fb2a933c9fbfbb9c3da0d" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;from_to()&lt;/code&gt; changes the bytes in &lt;code&gt;$data&lt;/code&gt; , but nothing material about the nature of the string has changed as far as Perl is concerned. Both before and after the call, the string &lt;code&gt;$data&lt;/code&gt; contains just a bunch of 8-bit bytes. As far as Perl is concerned, the encoding of the string remains as &quot;system-native 8-bit bytes&quot;.</source>
          <target state="translated">&lt;code&gt;from_to()&lt;/code&gt; への呼び出しは &lt;code&gt;$data&lt;/code&gt; のバイトを変更しますが、Perlに関する限り、文字列の性質に関する資料は何も変更されていません。呼び出しの前と後の両方で、文字列 &lt;code&gt;$data&lt;/code&gt; には8ビットバイトの束のみが含まれています。Perlに関する限り、文字列のエンコーディングは「システム固有の8ビットバイト」のままです。</target>
        </trans-unit>
        <trans-unit id="ad70e5f54776fc0924c4e470d4ee9b439b4f2953" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;warnings::register&lt;/code&gt; will create a new warnings category called &quot;MyMod::Abc&quot;, i.e. the new category name matches the current package name. The &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; function in the module will display a warning message if it gets given a relative path as a parameter. This warnings will only be displayed if the code that uses &lt;code&gt;MyMod::Abc&lt;/code&gt; has actually enabled them with the &lt;code&gt;warnings&lt;/code&gt; pragma like below.</source>
          <target state="translated">&lt;code&gt;warnings::register&lt;/code&gt; を呼び出すと、「MyMod :: Abc」という新しい警告カテゴリが作成されます。つまり、新しいカテゴリ名は現在のパッケージ名と一致します。モジュール内の &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 関数は、相対パスがパラメーターとして与えられると警告メッセージを表示します。この警告は、 &lt;code&gt;MyMod::Abc&lt;/code&gt; を使用するコードが以下のような &lt;code&gt;warnings&lt;/code&gt; プラグマで実際に有効にした場合にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="de39aad93d96a8313ed651448e2dc806dfea3c70" translate="yes" xml:space="preserve">
          <source>The call to GetOptions() parses the command line arguments that are present in &lt;code&gt;@ARGV&lt;/code&gt; and sets the option variable to the value &lt;code&gt;1&lt;/code&gt; if the option did occur on the command line. Otherwise, the option variable is not touched. Setting the option value to true is often called</source>
          <target state="translated">GETOPTIONSの呼び出しは（）内に存在しているコマンドライン引数解析し &lt;code&gt;@ARGV&lt;/code&gt; をし、値にオプションの変数を設定し、 &lt;code&gt;1&lt;/code&gt; オプションは、コマンドラインで発生しなかった場合。それ以外の場合、オプション変数は変更されません。オプション値をtrueに設定すると、しばしば呼び出されます</target>
        </trans-unit>
        <trans-unit id="171eeffe94ffcbbb77d480c5aae1700315d244fd" translate="yes" xml:space="preserve">
          <source>The call to the program that is able to compile perlmain.c. Defaults to $(CC).</source>
          <target state="translated">perlmain.cをコンパイルできるプログラムの呼び出しです。</target>
        </trans-unit>
        <trans-unit id="acb2e8bffbae50387da55c62d3573564cf939bc2" translate="yes" xml:space="preserve">
          <source>The call to this method is currently made</source>
          <target state="translated">このメソッドの呼び出しは現在</target>
        </trans-unit>
        <trans-unit id="af59be20c7eb663137f8b78548e36aec5ac0b8fe" translate="yes" xml:space="preserve">
          <source>The callback methods &lt;code&gt;start_code&lt;/code&gt; and &lt;code&gt;end_code&lt;/code&gt; emits the &lt;code&gt;code&lt;/code&gt; tags before and after &lt;code&gt;handle_code&lt;/code&gt; is invoked, so you might want to override these together with &lt;code&gt;handle_code&lt;/code&gt; if this wrapping isn't suitable.</source>
          <target state="translated">コールバックメソッド &lt;code&gt;start_code&lt;/code&gt; および &lt;code&gt;end_code&lt;/code&gt; は、 &lt;code&gt;handle_code&lt;/code&gt; が呼び出される前後に &lt;code&gt;code&lt;/code&gt; タグを発行するため、このラッピングが適切でない場合は、これらを &lt;code&gt;handle_code&lt;/code&gt; と一緒にオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="6e4b93d3f2cc24bc6cb3f704f926b3838cfb6c18" translate="yes" xml:space="preserve">
          <source>The callback routine's return value is not used for anything.</source>
          <target state="translated">コールバックルーチンの戻り値は何にも使われません。</target>
        </trans-unit>
        <trans-unit id="df4f95aac52b872cdb00cff71137de388b659b49" translate="yes" xml:space="preserve">
          <source>The callbacks are called for each opcode visited by Concise, in the same order as they are added. Each subroutine is passed five parameters.</source>
          <target state="translated">コールバックは、Conciseが訪問した各オペコードに対して、追加された順に呼び出されます。各サブルーチンには5つのパラメータが渡されます。</target>
        </trans-unit>
        <trans-unit id="cf3ef404c2544a6e1a747fcdf0563fa6c44b7664" translate="yes" xml:space="preserve">
          <source>The caller is responsible for incrementing the reference count of the array returned if it wants to keep the structure. Hence, if you have created a temporary value that you keep no pointer to, &lt;code&gt;sv_2mortal()&lt;/code&gt; to ensure that it is disposed of correctly. If you have cached your return value, then return a pointer to it without changing the reference count.</source>
          <target state="translated">呼び出し元は、構造を保持したい場合に返される配列の参照カウントをインクリメントする必要があります。したがって、ポインタを保持しない一時的な値を作成した場合は、 &lt;code&gt;sv_2mortal()&lt;/code&gt; を使用して、値が正しく破棄されるようにします。戻り値をキャッシュしている場合は、参照カウントを変更せずに、その戻り値へのポインターを返します。</target>
        </trans-unit>
        <trans-unit id="261ce3b0bcf399d133cb40e0b62c874dd44f485a" translate="yes" xml:space="preserve">
          <source>The calling context of the function (scalar or list context) is propagated to the normalizer. This means that if the memoized function will treat its arguments differently in list context than it would in scalar context, you can have the normalizer function select its behavior based on the results of &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt;. Even if called in a list context, a normalizer should still return a single string.</source>
          <target state="translated">関数の呼び出しコンテキスト（スカラーまたはリストコンテキスト）がノーマライザに伝達されます。これは、メモ化された関数が引数をリストコンテキストでスカラーコンテキストとは異なる方法で処理する場合、 &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt; の結果に基づいてノーマライザ関数にその動作を選択させることができることを意味します。リストコンテキストで呼び出された場合でも、ノーマライザは単一の文字列を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8bf2965af27484a7764a15d3bbb805341a4c18b1" translate="yes" xml:space="preserve">
          <source>The canonical list of operator names is the contents of the array PL_op_name defined and initialised in file</source>
          <target state="translated">演算子名の正規リストは、ファイル</target>
        </trans-unit>
        <trans-unit id="c754480a0b53533e23d99a04ff3b99e5ce4e8f9f" translate="yes" xml:space="preserve">
          <source>The canonical name for the host if the &lt;code&gt;AI_CANONNAME&lt;/code&gt; flag was provided, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; otherwise. This field will only be present on the first returned address.</source>
          <target state="translated">&lt;code&gt;AI_CANONNAME&lt;/code&gt; フラグが指定されている場合はホストの正規名、そうでない場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。このフィールドは、最初に返された住所にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="2ddb3e29fbb2261125aa3969a5b44d4db9de4c6e" translate="yes" xml:space="preserve">
          <source>The canonical name of a delegate distribution to install instead. Useful when a new version, although it tests OK itself, breaks something else or a developer release or a fork is already uploaded that is better than the last released version.</source>
          <target state="translated">代わりにインストールするデリゲート配布物の正式な名前です。新しいバージョンが、それ自体は問題なくテストできますが、何か他のものを壊してしまったり、開発者のリリースやフォークがすでにアップロードされていて、最後にリリースされたバージョンよりも優れていたりする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="69da2adf0aadd37547ac813fb993aa6ad1179ac5" translate="yes" xml:space="preserve">
          <source>The canonical name of a given encoding does not necessarily agree with IANA Character Set Registry, commonly seen as &lt;code&gt;Content-Type:
text/plain; charset=&lt;i&gt;WHATEVER&lt;/i&gt;&lt;/code&gt;. For most cases, the canonical name works, but sometimes it does not, most notably with &quot;utf-8-strict&quot;.</source>
          <target state="translated">特定のエンコーディングの正規名は、一般的に &lt;code&gt;Content-Type: text/plain; charset=&lt;i&gt;WHATEVER&lt;/i&gt;&lt;/code&gt; として見られるIANA文字セットレジストリと必ずしも一致しません。charset = &lt;i&gt;WHATEVER&lt;/i&gt;。ほとんどの場合、正規名は機能しますが、機能しない場合もあります。特に「utf-8-strict」では機能しません。</target>
        </trans-unit>
        <trans-unit id="7959d4667d41c3277e70505dbf41353d2303db33" translate="yes" xml:space="preserve">
          <source>The capability whose string is to be output.</source>
          <target state="translated">文字列が出力される能力。</target>
        </trans-unit>
        <trans-unit id="a744fed76bc528e01936c6092d667062609b77e5" translate="yes" xml:space="preserve">
          <source>The caret allows for simpler stringification of compiled regular expressions. These look like</source>
          <target state="translated">キャレットを使うことで、コンパイルされた正規表現の文字列化をよりシンプルにすることができます。これらは次のようになります。</target>
        </trans-unit>
        <trans-unit id="743958808118b71ad904b9a5f8eed52c69df8dc0" translate="yes" xml:space="preserve">
          <source>The caret tells Perl that this cluster doesn't inherit the flags of any surrounding pattern, but uses the system defaults (&lt;code&gt;d-imsx&lt;/code&gt; ), modified by any flags specified.</source>
          <target state="translated">キャレットは、このクラスターが周囲のパターンのフラグを継承しないことをPerlに &lt;code&gt;d-imsx&lt;/code&gt; ますが、指定されたフラグによって変更されたシステムデフォルト（d-imsx）を使用します。</target>
        </trans-unit>
        <trans-unit id="d4cdf247822c1c118e5e2a91cdbbd856905f935f" translate="yes" xml:space="preserve">
          <source>The case used for capitals that are followed by lowercase characters instead of by more capitals. Sometimes called sentence case or headline case. English doesn&amp;rsquo;t use Unicode titlecase, but casing rules for English titles are more complicated than simply capitalizing each word&amp;rsquo;s first character.</source>
          <target state="translated">より多くの大文字が続く代わりに小文字が後に続く大文字に使用される大文字小文字。判決事件や見出し事件と呼ばれることもあります。英語はUnicodeのタイトルケースを使用しませんが、英語のタイトルの大文字と小文字の規則は、単に各単語の最初の文字を大文字にするよりも複雑です。</target>
        </trans-unit>
        <trans-unit id="d711d105fb7ff9ba5105330930cd96c20b047fd3" translate="yes" xml:space="preserve">
          <source>The casemap used in Unicode when comparing or matching without regard to case. Comparing lower-, title-, or uppercase are all unreliable due to Unicode&amp;rsquo;s complex, one-to-many case mappings. Foldcase is a &lt;b&gt;lowercase&lt;/b&gt; variant (using a partially decomposed &lt;b&gt;normalization&lt;/b&gt; form for certain codepoints) created specifically to resolve this.</source>
          <target state="translated">大文字小文字を区別せずに比較または照合するときにUnicodeで使用されるケースマップ。Unicodeの複雑な1対多の大文字と小文字のマッピングにより、小文字、タイトル、大文字の比較はすべて信頼できません。Foldcaseは、これを解決するために特別に作成された&lt;b&gt;小文字の&lt;/b&gt;バリアント（特定のコードポイントに対して部分的に分解された&lt;b&gt;正規化&lt;/b&gt;形式を使用）です。</target>
        </trans-unit>
        <trans-unit id="f16ecea32ddc45aef48d30c6428e765b0124d50c" translate="yes" xml:space="preserve">
          <source>The cases when the shell is used are:</source>
          <target state="translated">シェルを使用する場合です。</target>
        </trans-unit>
        <trans-unit id="90158421e0d058f44be7171e42f898369c12eafb" translate="yes" xml:space="preserve">
          <source>The categories are currently:</source>
          <target state="translated">カテゴリーは現在のところ</target>
        </trans-unit>
        <trans-unit id="998a96285bef3fbf35e88e13ee25ef0e94c840c0" translate="yes" xml:space="preserve">
          <source>The character following &lt;code&gt;\c&lt;/code&gt; is mapped to some other character as shown in the table:</source>
          <target state="translated">&lt;code&gt;\c&lt;/code&gt; 続く文字は、表に示すように他の文字にマップされます。</target>
        </trans-unit>
        <trans-unit id="0182edc494649671b24bec81ea32f4948632cbbf" translate="yes" xml:space="preserve">
          <source>The character set /adul flags cancel each other out. So, in this example,</source>
          <target state="translated">キャラクタセット/adulフラグは互いに打ち消し合っています。だから、この例では</target>
        </trans-unit>
        <trans-unit id="9d4fb2a2ad59e5fb5f2e1ac776d2184744805bf9" translate="yes" xml:space="preserve">
          <source>The character set rules are determined by an enum that is contained in this field. This is still experimental and subject to change, but the current interface returns the rules by use of the in-line function &lt;code&gt;get_regex_charset(const U32 flags)&lt;/code&gt; . The only currently documented value returned from it is REGEX_LOCALE_CHARSET, which is set if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect. If present in &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; will use the locale dependent definition of whitespace when RXf_SKIPWHITE or RXf_WHITE is in effect. ASCII whitespace is defined as per &lt;a href=&quot;perlapi#isSPACE&quot;&gt;isSPACE&lt;/a&gt;, and by the internal macros &lt;code&gt;is_utf8_space&lt;/code&gt; under UTF-8, and &lt;code&gt;isSPACE_LC&lt;/code&gt; under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
locale&lt;/code&gt; .</source>
          <target state="translated">文字セット規則は、このフィールドに含まれる列挙型によって決定されます。これはまだ実験 &lt;code&gt;get_regex_charset(const U32 flags)&lt;/code&gt; であり、変更される可能性がありますが、現在のインターフェースはインライン関数get_regex_charset（const U32 flags）を使用してルールを返します。現在ドキュメント化されている唯一の戻り値はREGEX_LOCALE_CHARSETです。これは、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;が有効な場合に設定されます。中に存在する場合 &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; RXf_SKIPWHITEまたはRXf_WHITEが有効になっているときに、空白のロケール依存の定義を使用します。あたりとして定義されている空白ASCII &lt;a href=&quot;perlapi#isSPACE&quot;&gt;isSPACE&lt;/a&gt;、および内部マクロによって &lt;code&gt;is_utf8_space&lt;/code&gt; UTF-8の下で、及び &lt;code&gt;isSPACE_LC&lt;/code&gt; の下で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a9c5d866ba1d6358a34fce2d9ed9c3acf7a55d6" translate="yes" xml:space="preserve">
          <source>The character set to declare in the Content-Type meta tag created by default for &lt;code&gt;html_header_tags&lt;/code&gt; . Note that this option will be ignored if the value of &lt;code&gt;html_header_tags&lt;/code&gt; is changed. Defaults to &quot;ISO-8859-1&quot;.</source>
          <target state="translated">&lt;code&gt;html_header_tags&lt;/code&gt; に対してデフォルトで作成されるContent-Typeメタタグで宣言する文字セット。 &lt;code&gt;html_header_tags&lt;/code&gt; の値が変更された場合、このオプションは無視されることに注意してください。デフォルトは「ISO-8859-1」です。</target>
        </trans-unit>
        <trans-unit id="71daab686bee256e6d597c2f8159505d9e02d07d" translate="yes" xml:space="preserve">
          <source>The characters &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; are special in the L&amp;lt;...&amp;gt; context. Although the hyperlink parser does its best to determine which &quot;/&quot; is text and which is a delimiter in case of doubt, one ought to escape these literal characters like this:</source>
          <target state="translated">キャラクター &lt;code&gt;|&lt;/code&gt; および &lt;code&gt;/&lt;/code&gt; は、L &amp;lt;...&amp;gt;コンテキストでは特別です。ハイパーリンクパーサーは、どの &quot;/&quot;がテキストであり、どちらが区切り文字であるかを判断するために最善を尽くしますが、これらのリテラル文字は次のようにエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="9e5d809d420604eb5bdc15b23bb82aec938490ad" translate="yes" xml:space="preserve">
          <source>The characters used to recall a command or spawn a shell. By default, both are set to &lt;code&gt;!&lt;/code&gt; , which is unfortunate.</source>
          <target state="translated">コマンドの呼び出しやシェルの起動に使用される文字。デフォルトでは、両方とも &lt;code&gt;!&lt;/code&gt; に設定されています。、これは残念です。</target>
        </trans-unit>
        <trans-unit id="ffd9954b7982718c7437be17e29fbfd3df1a4fe1" translate="yes" xml:space="preserve">
          <source>The check routine returns the node which should be inserted into the tree (if the top-level node was not modified, check routine returns its argument).</source>
          <target state="translated">チェック・ルーチンは、ツリーに挿入されるべきノードを返します(トップ・レベル・ノードが変更されていない場合、チェック・ルーチンはその引数を返します)。</target>
        </trans-unit>
        <trans-unit id="47475762ffe9e435213b5064a86af730e143c18a" translate="yes" xml:space="preserve">
          <source>The chunk of memory which is pointed to by &lt;code&gt;p&lt;/code&gt; is Safefree()ed at the end of</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; が指すメモリのチャンクは、最後にSafefree（）されます。</target>
        </trans-unit>
        <trans-unit id="16a3c0a4c50db86e628588170d93fcb36250d2c0" translate="yes" xml:space="preserve">
          <source>The class created by &lt;code&gt;struct&lt;/code&gt; must not be a subclass of another class other than &lt;code&gt;UNIVERSAL&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; によって作成されたクラスは、 &lt;code&gt;UNIVERSAL&lt;/code&gt; 以外の別のクラスのサブクラスであってはなりません。</target>
        </trans-unit>
        <trans-unit id="232a87cc5cdc58df0837defb5b9c5d4aee8a3bd8" translate="yes" xml:space="preserve">
          <source>The class method &lt;code&gt;less-&amp;gt;of( NAME )&lt;/code&gt; returns a boolean to tell you whether your user requested less of something.</source>
          <target state="translated">クラスメソッド &lt;code&gt;less-&amp;gt;of( NAME )&lt;/code&gt; はブール値を返し、ユーザーが要求した値が少ないかどうかを通知します。</target>
        </trans-unit>
        <trans-unit id="94cc64c25f30949cf122aa35d8a463e7d89e7056" translate="yes" xml:space="preserve">
          <source>The class method is invoked by the command &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt; @array, classname&lt;/code&gt; . Associates an array instance with the specified class. &lt;code&gt;LIST&lt;/code&gt; would represent additional arguments (along the lines of &lt;a href=&quot;../anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt; and compatriots) needed to complete the association. The method should return an object of a class which provides the methods below.</source>
          <target state="translated">クラスメソッドは、コマンド &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt; @array, classname&lt;/code&gt; によって呼び出されます。配列インスタンスを指定されたクラスに関連付けます。 &lt;code&gt;LIST&lt;/code&gt; は、関連付けを完了するために必要な追加の引数（&lt;a href=&quot;../anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt;およびcompatriotsの行に沿った）を表します。このメソッドは、以下のメソッドを提供するクラスのオブジェクトを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="d36e86369efaf1df03cb1d3f2a6ee7366375ea68" translate="yes" xml:space="preserve">
          <source>The class methods invoked for modifying and fetching are these:</source>
          <target state="translated">修正やフェッチのために呼び出されるクラスメソッドは、これらです。</target>
        </trans-unit>
        <trans-unit id="16f1f45dc986b853b9f9c28d5e7c510f2818ec6c" translate="yes" xml:space="preserve">
          <source>The class of the OP's SV, if it has one, in all caps (e.g., 'IV').</source>
          <target state="translated">OP の SV のクラス(SV がある場合はすべて大文字で)。</target>
        </trans-unit>
        <trans-unit id="1a1cd2e1aca2f382b8e61ec8f61c8bcfacf6a4ed" translate="yes" xml:space="preserve">
          <source>The classic example of where callbacks are used is when writing an event driven program, such as for an X11 application. In this case you register functions to be called whenever specific events occur, e.g., a mouse button is pressed, the cursor moves into a window or a menu item is selected.</source>
          <target state="translated">コールバックを使用する典型的な例は、X11アプリケーションのようなイベント駆動型のプログラムを書くときです。この場合、マウスボタンが押されたとき、カーソルがウィンドウに移動したとき、メニュー項目が選択されたときなど、特定のイベントが発生したときに呼び出される関数を登録します。</target>
        </trans-unit>
        <trans-unit id="99430da67a315f54b20e2f72a5fd52a7326fcd42" translate="yes" xml:space="preserve">
          <source>The clobber method is simply:</source>
          <target state="translated">クロッバー法は簡単です。</target>
        </trans-unit>
        <trans-unit id="d62999c9944be1bb3aba520e7d0e62efb63cb438" translate="yes" xml:space="preserve">
          <source>The clone method creates a copy of the digest state object and returns a reference to the copy.</source>
          <target state="translated">clone メソッドは、ダイジェスト状態オブジェクトのコピーを作成し、そのコピーへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="32e3ee7a8f238c3dc42124d9afe27b0f78dc70db" translate="yes" xml:space="preserve">
          <source>The code</source>
          <target state="translated">コード</target>
        </trans-unit>
        <trans-unit id="563ad7ecb10abdc47d619f7b3d0884f86cf94b31" translate="yes" xml:space="preserve">
          <source>The code above can be rearranged to get around the problem, like this:</source>
          <target state="translated">上記のコードは、このように並べ替えることで問題を回避することができます。</target>
        </trans-unit>
        <trans-unit id="ecf14a60f040b746943a04d158c46f884d48943b" translate="yes" xml:space="preserve">
          <source>The code above uses DB_File, but again it will work with any of the DBM modules.</source>
          <target state="translated">上記のコードでは DB_File を使用していますが、DBM モジュールのいずれでも動作します。</target>
        </trans-unit>
        <trans-unit id="6d3c51612c2ccbd720904d0ac0d50a474014ffdd" translate="yes" xml:space="preserve">
          <source>The code above uses SDBM_File, but it will work with any of the DBM modules.</source>
          <target state="translated">上記のコードでは SDBM_File を使用していますが、どの DBM モジュールでも動作します。</target>
        </trans-unit>
        <trans-unit id="d0ef4aba54c8ec4419ef4523d1390067d9ff6620" translate="yes" xml:space="preserve">
          <source>The code below can be used to traverse a zip file, one compressed data stream at a time.</source>
          <target state="translated">以下のコードを使用して、zip ファイルを一度に 1 つの圧縮データストリームでたどることができます。</target>
        </trans-unit>
        <trans-unit id="d29217257764218057a5c39c6d3e329014141e5b" translate="yes" xml:space="preserve">
          <source>The code below for</source>
          <target state="translated">以下のコードは</target>
        </trans-unit>
        <trans-unit id="1d78d26d7e9f445a9bc052e60af207768e7330c6" translate="yes" xml:space="preserve">
          <source>The code below is the example given in the section</source>
          <target state="translated">以下のコードは、セクションで説明した例です。</target>
        </trans-unit>
        <trans-unit id="6e196e9f225b5138a983bdb659d302d31a1c384a" translate="yes" xml:space="preserve">
          <source>The code below makes use of both modules, but it only enables warnings from &lt;code&gt;Derived&lt;/code&gt; .</source>
          <target state="translated">以下のコードは両方のモジュールを使用しますが、 &lt;code&gt;Derived&lt;/code&gt; からの警告のみを有効にします。</target>
        </trans-unit>
        <trans-unit id="4b70175bee574db6d4bbb54ae246e1319c020349" translate="yes" xml:space="preserve">
          <source>The code block introduces a new scope from the perspective of lexical variable declarations, but &lt;b&gt;not&lt;/b&gt; from the perspective of &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; and similar localizing behaviours. So later code blocks within the same pattern will still see the values which were localized in earlier blocks. These accumulated localizations are undone either at the end of a successful match, or if the assertion is backtracked (compare &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;). For example,</source>
          <target state="translated">コードブロックは、レキシカル変数宣言の観点から新しいスコープを導入しますが、 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; および類似のローカライズ動作の観点からは導入し&lt;b&gt;ません&lt;/b&gt;。したがって、同じパターン内の後のコードブロックには、前のブロックでローカライズされた値が引き続き表示されます。これらの蓄積されたローカリゼーションは、一致が成功した場合、またはアサーションがバックトラックされた場合（&lt;a href=&quot;#Backtracking&quot;&gt;バックトラック&lt;/a&gt;と比較）に元に戻されます。例えば、</target>
        </trans-unit>
        <trans-unit id="e98d3c5b00844f7eee566f69a2fd1ffcc0553db1" translate="yes" xml:space="preserve">
          <source>The code can only see the compartment's namespace (as returned by the &lt;b&gt;root&lt;/b&gt; method). The compartment's root package appears to be the &lt;code&gt;main::&lt;/code&gt; package to the code inside the compartment.</source>
          <target state="translated">コードはコンパートメントの名前空間のみを見ることができます（&lt;b&gt;ルート&lt;/b&gt;メソッドによって返される）。コンパートメントのルートパッケージは、コンパートメント内のコードの &lt;code&gt;main::&lt;/code&gt; パッケージのようです。</target>
        </trans-unit>
        <trans-unit id="7cc1bb98d53bdcc3465bf9409e43dfe68967ea92" translate="yes" xml:space="preserve">
          <source>The code in the enclosing block has warnings enabled, but the inner block has them disabled. In this case that means the assignment to the scalar &lt;code&gt;$c&lt;/code&gt; will trip the &lt;code&gt;&quot;Scalar value @a[0] better written as $a[0]&quot;&lt;/code&gt; warning, but the assignment to the scalar &lt;code&gt;$b&lt;/code&gt; will not.</source>
          <target state="translated">外側のブロックのコードでは警告が有効になっていますが、内側のブロックでは無効になっています。この場合、スカラー &lt;code&gt;$c&lt;/code&gt; への割り当ては、 &lt;code&gt;&quot;Scalar value @a[0] better written as $a[0]&quot;&lt;/code&gt; 警告を発しますが、スカラー &lt;code&gt;$b&lt;/code&gt; への割り当てはトリップしません。</target>
        </trans-unit>
        <trans-unit id="3bbef419a6073b40632618263de6b83e9a3b2f8c" translate="yes" xml:space="preserve">
          <source>The code involved in &lt;code&gt;study_chunk()&lt;/code&gt; is extremely cryptic. Be careful. :-)</source>
          <target state="translated">&lt;code&gt;study_chunk()&lt;/code&gt; に含まれるコードは非常に不可解です。注意してください。:-)</target>
        </trans-unit>
        <trans-unit id="fa55939059730530d1f6070150cdfbb84afaa7d4" translate="yes" xml:space="preserve">
          <source>The code is executed</source>
          <target state="translated">コードが実行される</target>
        </trans-unit>
        <trans-unit id="8fe7ae8735b35c106099f4a767ac8bec4145c55c" translate="yes" xml:space="preserve">
          <source>The code is executed in the package &lt;code&gt;DB&lt;/code&gt; . Note that</source>
          <target state="translated">コードはパッケージ &lt;code&gt;DB&lt;/code&gt; で実行されます。ご了承ください</target>
        </trans-unit>
        <trans-unit id="5bdd192de0a16314fb946ed4a5f124bbba34ce51" translate="yes" xml:space="preserve">
          <source>The code is hosted on Github: https://github.com/jonathanstowe/Term-Cap please feel free to fork, submit patches etc, etc there.</source>
          <target state="translated">コードはGithubでホストされています:https://github.com/jonathanstowe/Term-Cap フォークやパッチの提出などはそこで自由に行ってください。</target>
        </trans-unit>
        <trans-unit id="6188bbd338f5f4453ec5eefb9a596ee762c4a047" translate="yes" xml:space="preserve">
          <source>The code is not optimized for speed, especially because we use &lt;code&gt;Math::Complex&lt;/code&gt; and thus go quite near complex numbers while doing the computations even when the arguments are not. This, however, cannot be completely avoided if we want things like &lt;code&gt;asin(2)&lt;/code&gt; to give an answer instead of giving a fatal runtime error.</source>
          <target state="translated">特に、 &lt;code&gt;Math::Complex&lt;/code&gt; を使用しているため、コードが速度に対して最適化されておらず、引数がそうでない場合でも、計算中に複素数にかなり近づきます。ただし、 &lt;code&gt;asin(2)&lt;/code&gt; などで致命的なランタイムエラーを返すのではなく、答えを出したい場合、これを完全に回避することはできません。</target>
        </trans-unit>
        <trans-unit id="eeb45ce8e4c72e0b27d2dd4e6b03aed6d8283a3c" translate="yes" xml:space="preserve">
          <source>The code isn't pretty as I mentioned -- I never thought it would be a 1000- line program when I started, or I might not have begun. :-) But I would have been less cavalier in how the parts of the program communicated with each other, etc. It might also have helped if I didn't have to divine the makeup of the stabs on the fly, and then account for micro differences between my compiler and gcc.</source>
          <target state="translated">コードは、私が言ったようにきれいなものではありません --私が始めたときには、まさか1000行のプログラムになるとは思ってもいませんでした。:-)しかし、プログラムの各部分がどのように相互に通信するかなどについては、私はあまり気を使わなかったでしょう。また、スタブの構成をその場で判断して、コンパイラとgccの間の微小な違いを考慮しなくてもよかったかもしれません。</target>
        </trans-unit>
        <trans-unit id="9e137833ea36c6bb446c1454de0e7f32827ac2db" translate="yes" xml:space="preserve">
          <source>The code reference associated with &lt;code&gt;Store&lt;/code&gt; will be called before any key/value is written to the database and the code reference associated with &lt;code&gt;Fetch&lt;/code&gt; will be called after any key/value is read from the database.</source>
          <target state="translated">&lt;code&gt;Store&lt;/code&gt; に関連付けられたコード参照は、キー/値がデータベースに書き込まれる前に呼び出され、 &lt;code&gt;Fetch&lt;/code&gt; に関連付けられたコード参照は、キー/値がデータベースから読み取られた後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9112803a8d3c96a68465b0bcde1920f2e7e6a455" translate="yes" xml:space="preserve">
          <source>The code to be parsed comes from</source>
          <target state="translated">解析されるコードは</target>
        </trans-unit>
        <trans-unit id="ab517e2a8ba12a27ab2bbd36c075257a2d62e599" translate="yes" xml:space="preserve">
          <source>The code:</source>
          <target state="translated">コードだ</target>
        </trans-unit>
        <trans-unit id="43bd0609e5f4f6c76dfb80ec0b3769b0a1ce5867" translate="yes" xml:space="preserve">
          <source>The codes generated by this module are standard terminal control codes, complying with ECMA-048 and ISO 6429 (generally referred to as &quot;ANSI color&quot; for the color codes). The non-color control codes (bold, dark, italic, underline, and reverse) are part of the earlier ANSI X3.64 standard for control sequences for video terminals and peripherals.</source>
          <target state="translated">このモジュールによって生成されるコードは、ECMA-048 と ISO 6429 に準拠した標準的な端末制御コードです (カラーコードについては一般的に「ANSI カラー」と呼ばれています)。カラー以外の制御コード(太字、暗字、斜体、下線、反転)は、ビデオターミナルと周辺機器の制御シーケンスのための以前のANSI X3.64規格の一部です。</target>
        </trans-unit>
        <trans-unit id="6fab56ccb009185913550effa31ed3b9edd378e9" translate="yes" xml:space="preserve">
          <source>The codesets currently supported are:</source>
          <target state="translated">現在サポートされているコードセットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="71e94bac38239334b6900c0a017267aa1a8ae397" translate="yes" xml:space="preserve">
          <source>The cofunctions of the hyperbolic sine, cosine, and tangent (cosech/csch and cotanh/coth are aliases)</source>
          <target state="translated">双曲のサイン、余弦、接線の共関数(cosech/csch、cotanh/cothはエイリアス)。</target>
        </trans-unit>
        <trans-unit id="28a5561373d2289312316102a3c2581ebe7698d3" translate="yes" xml:space="preserve">
          <source>The cofunctions of the sine, cosine, and tangent (cosec/csc and cotan/cot are aliases)</source>
          <target state="translated">正弦、余弦、正接の共関数(cosec/csc、cotan/cotはエイリアスです)。</target>
        </trans-unit>
        <trans-unit id="4a1e9fabea4570a18aadb2a0be8b117d7c1d1876" translate="yes" xml:space="preserve">
          <source>The collective set of &lt;b&gt;environment variables&lt;/b&gt; your &lt;b&gt;process&lt;/b&gt; inherits from its parent. Accessed via &lt;code&gt;%ENV&lt;/code&gt; .</source>
          <target state="translated">集合的なセット&lt;b&gt;の環境変数は、&lt;/b&gt;あなたの&lt;b&gt;プロセスの&lt;/b&gt;親から継承。 &lt;code&gt;%ENV&lt;/code&gt; を介してアクセスします。</target>
        </trans-unit>
        <trans-unit id="54dbe0de410d1fee14f151bad669e4e7f64514b7" translate="yes" xml:space="preserve">
          <source>The color function doesn't work unless &lt;a href=&quot;../../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; is compatible with your terminal.</source>
          <target state="translated">&lt;a href=&quot;../../term/ansicolor&quot;&gt;Term :: ANSIColor&lt;/a&gt;が端末と互換性がない限り、カラー関数は機能しません。</target>
        </trans-unit>
        <trans-unit id="d494da03d1029e001559e320101aec67b6081a14" translate="yes" xml:space="preserve">
          <source>The color stack, including the &lt;code&gt;:pushpop&lt;/code&gt; import tag, PUSHCOLOR, POPCOLOR, LOCALCOLOR, and the $Term::ANSIColor::AUTOLOCAL variable, was added in Term::ANSIColor 2.00, included in Perl 5.10.1.</source>
          <target state="translated">&lt;code&gt;:pushpop&lt;/code&gt; インポートタグ、PUSHCOLOR、POPCOLOR、LOCALCOLOR、および$ Term :: ANSIColor :: AUTOLOCAL変数を含むカラースタックは、Perl 5.10.1に含まれるTerm :: ANSIColor 2.00に追加されました。</target>
        </trans-unit>
        <trans-unit id="99f186121577072655b8ffd874560fdf2ec9538e" translate="yes" xml:space="preserve">
          <source>The column at which to wrap text on the right-hand side. Defaults to 76, unless &lt;b&gt;-t&lt;/b&gt; is given, in which case it's two columns less than the width of your terminal device.</source>
          <target state="translated">右側でテキストを折り返す列。&lt;b&gt;-t&lt;/b&gt;が指定されていない限り、デフォルトは76です。この場合、端末デバイスの幅よりも2列小さくなります。</target>
        </trans-unit>
        <trans-unit id="dc0da64614756f754ff954c33b5269fabc02fce0" translate="yes" xml:space="preserve">
          <source>The column at which to wrap text on the right-hand side. Defaults to 76.</source>
          <target state="translated">右側のテキストを折り返す列。デフォルトは76です。</target>
        </trans-unit>
        <trans-unit id="e8623930908f634360f3d6d3225f352295877e28" translate="yes" xml:space="preserve">
          <source>The combination of &lt;code&gt;//g&lt;/code&gt; and &lt;code&gt;\G&lt;/code&gt; allows us to process the string a bit at a time and use arbitrary Perl logic to decide what to do next. Currently, the &lt;code&gt;\G&lt;/code&gt; anchor is only fully supported when used to anchor to the start of the pattern.</source>
          <target state="translated">&lt;code&gt;//g&lt;/code&gt; と &lt;code&gt;\G&lt;/code&gt; の組み合わせにより、一度に少しずつ文字列を処理し、任意のPerlロジックを使用して次に何をするかを決定できます。現在、 &lt;code&gt;\G&lt;/code&gt; アンカーは、パターンの先頭にアンカーするために使用する場合にのみ完全にサポートされています。</target>
        </trans-unit>
        <trans-unit id="970e7f15d0c6ab9e35629ba58fe853786b66b02c" translate="yes" xml:space="preserve">
          <source>The combination of multiple command- line switches (</source>
          <target state="translated">複数のコマンドラインスイッチの組み合わせ(</target>
        </trans-unit>
        <trans-unit id="e655e997e08648320978a6ff86ae273d24047f81" translate="yes" xml:space="preserve">
          <source>The combined effect of 3 &amp;amp; 4 is that it will allow code which uses the &lt;code&gt;warnings&lt;/code&gt; pragma to control the warning behavior of $^W-type code (using a &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $^W=0&lt;/code&gt; ) if it really wants to, but not vice-versa.</source>
          <target state="translated">3と4を組み合わせると、 &lt;code&gt;warnings&lt;/code&gt; プラグマを使用して$ ^ Wタイプのコードの警告動作を制御することができます（ &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $^W=0&lt;/code&gt; ）。その逆。</target>
        </trans-unit>
        <trans-unit id="c5195e2f756a78470c45dda1ae8fbd38d00cbe08" translate="yes" xml:space="preserve">
          <source>The command &quot;=for</source>
          <target state="translated">コマンド「=for</target>
        </trans-unit>
        <trans-unit id="3d8aeb4458c1560b0d5ab2e46d755733e3bb6324" translate="yes" xml:space="preserve">
          <source>The command does not start.</source>
          <target state="translated">コマンドが起動しません。</target>
        </trans-unit>
        <trans-unit id="7e6f4f93a21a7f88a65ff2221b6911802d75f842" translate="yes" xml:space="preserve">
          <source>The command is killed by a signal.</source>
          <target state="translated">コマンドは信号で強制終了します。</target>
        </trans-unit>
        <trans-unit id="914be5b158c3cc5be779f3d3fed5d23185a3c4a4" translate="yes" xml:space="preserve">
          <source>The command line interface is tightly integrated with an &lt;b&gt;emacs&lt;/b&gt; extension and there's a &lt;b&gt;vi&lt;/b&gt; interface too.</source>
          <target state="translated">コマンドラインインターフェイスは&lt;b&gt;emacs&lt;/b&gt;拡張と緊密に統合されており、&lt;b&gt;vi&lt;/b&gt;インターフェイスもあります。</target>
        </trans-unit>
        <trans-unit id="f789ad4d35bca82f26a9236e86bce7a57e057b98" translate="yes" xml:space="preserve">
          <source>The command line is not split by GetOptions, but by the command line interpreter (CLI). On Unix, this is the shell. On Windows, it is COMMAND.COM or CMD.EXE. Other operating systems have other CLIs.</source>
          <target state="translated">コマンドラインはGetOptionsではなく、コマンドラインインタプリタ(CLI)で分割されています。Unixでは、これはシェルです。Windowsでは、command.comまたはcmd.exeです。他のオペレーティングシステムには他のCLIがあります。</target>
        </trans-unit>
        <trans-unit id="a12dc653b968ec55d9bfea4484d747acafd8c027" translate="yes" xml:space="preserve">
          <source>The command returns a non-zero exit value (but see below).</source>
          <target state="translated">このコマンドはゼロではない終了値を返します(ただし、以下を参照)。</target>
        </trans-unit>
        <trans-unit id="ccf7fbf7b3dd60fe57ca23a7e47b3c4eeb05e932" translate="yes" xml:space="preserve">
          <source>The command used to load the debugger code. The default is:</source>
          <target state="translated">デバッガーコードをロードするために使用するコマンド。デフォルトは</target>
        </trans-unit>
        <trans-unit id="35175a977556088d11ca4a7b0e7332f1ce787324" translate="yes" xml:space="preserve">
          <source>The command's STDOUT and STDERR (and possibly STDIN, depending on your shell) will be the same as the parent's. You won't need to catch SIGCHLD because of the double-fork taking place; see below for details.</source>
          <target state="translated">コマンドの STDOUT と STDERR (シェルによっては STDIN もあります)は親コマンドと同じになります。ダブルフォークが行われているので、SIGCHLD をキャッチする必要はありません;詳細は以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="75337684a9346d140506f8cf5d632c3a6fe46276" translate="yes" xml:space="preserve">
          <source>The command-line mentioned in the SYNOPSIS section corresponds to the Perl code</source>
          <target state="translated">SYNOPSIS セクションで言及されているコマンドラインは Perl コードに対応しています。</target>
        </trans-unit>
        <trans-unit id="ea72136c38b086284678c74c52f83815bf874db4" translate="yes" xml:space="preserve">
          <source>The commands &lt;code&gt;=pod&lt;/code&gt; and &lt;code&gt;=cut&lt;/code&gt; do not take any arguments.</source>
          <target state="translated">コマンド &lt;code&gt;=pod&lt;/code&gt; および &lt;code&gt;=cut&lt;/code&gt; は引数を取りません。</target>
        </trans-unit>
        <trans-unit id="f1e3cdc1d66a6ddbc94785be80a34d0a817fb94d" translate="yes" xml:space="preserve">
          <source>The commands available in the shell interface are methods in the package CPAN::Shell. If you enter the shell command, your input is split by the Text::ParseWords::shellwords() routine, which acts like most shells do. The first word is interpreted as the method to be invoked, and the rest of the words are treated as the method's arguments. Continuation lines are supported by ending a line with a literal backslash.</source>
          <target state="translated">シェルインターフェイスで利用できるコマンドは、CPAN::Shellパッケージのメソッドである。シェルコマンドを入力すると、入力は Text::ParseWords::shellwords()ルーチンによって分割されます。最初の単語は呼び出されるメソッドとして解釈され、残りの単語はメソッドの引数として扱われる。継続行は、リテラルのバックスラッシュで行を終えることでサポートされています。</target>
        </trans-unit>
        <trans-unit id="50c172c64b8304a2667bbd4145cf67a46b69892f" translate="yes" xml:space="preserve">
          <source>The commit message should include a description of the problem that the patch corrects or new functionality that the patch adds.</source>
          <target state="translated">コミットメッセージには、パッチが修正した問題やパッチが追加した新機能の説明を含めるべきです。</target>
        </trans-unit>
        <trans-unit id="a48a6b9a39f2c1e8f05ac68afbc7708f295daa69" translate="yes" xml:space="preserve">
          <source>The common (and original) usage of B::Concise was for command-line renderings of simple code, as given in EXAMPLE. But you can also use &lt;b&gt;B::Concise&lt;/b&gt; from your code, and call compile() directly, and repeatedly. By doing so, you can avoid the compile-time only operation of O.pm, and even use the debugger to step through B::Concise::compile() itself.</source>
          <target state="translated">B :: Conciseの一般的な（および元の）使用法は、例に示すように、単純なコードのコマンドラインレンダリング用でした。ただし、コードから&lt;b&gt;B :: Concise&lt;/b&gt;を使用して、直接compile（）を繰り返し呼び出すこともできます。そうすることで、O.pmのコンパイル時のみの操作を回避でき、デバッガを使用してB :: Concise :: compile（）自体をステップ実行することもできます。</target>
        </trans-unit>
        <trans-unit id="092b88432af421400f5d15e398af7e25459b6caf" translate="yes" xml:space="preserve">
          <source>The comparison function is required to behave. If it returns inconsistent results (sometimes saying &lt;code&gt;$x[1]&lt;/code&gt; is less than &lt;code&gt;$x[2]&lt;/code&gt; and sometimes saying the opposite, for example) the results are not well-defined.</source>
          <target state="translated">動作するには比較関数が必要です。一貫性のない結果が返される場合（ &lt;code&gt;$x[1]&lt;/code&gt; が &lt;code&gt;$x[2]&lt;/code&gt; より小さいこともあり、逆の場合もあるなど）、結果は明確に定義されていません。</target>
        </trans-unit>
        <trans-unit id="edfa309c58fb1bf1eba2e1c0e1a54aa1aefcb60b" translate="yes" xml:space="preserve">
          <source>The compilation of a subroutine can be affected by a few compiler directives, &lt;b&gt;pragmas&lt;/b&gt;. These are:</source>
          <target state="translated">サブルーチンのコンパイルは、いくつかのコンパイラ指令である&lt;b&gt;プラグマの&lt;/b&gt;影響を受ける可能性があり&lt;b&gt;ます&lt;/b&gt;。これらは：</target>
        </trans-unit>
        <trans-unit id="ecde94171862ef8b275c6d67c44a792fcd8d5efd" translate="yes" xml:space="preserve">
          <source>The compile tree is executed in a runops function. There are two runops functions, in</source>
          <target state="translated">コンパイルツリーはrunops関数で実行されます。には2つのrunops関数があります。</target>
        </trans-unit>
        <trans-unit id="79a77bf1e2569d28ea6eda34147b4768d49e28ad" translate="yes" xml:space="preserve">
          <source>The compiler will search for typemap files called</source>
          <target state="translated">コンパイラは</target>
        </trans-unit>
        <trans-unit id="111471390604961ec6523ced1b372373b53d8003" translate="yes" xml:space="preserve">
          <source>The compiler would immediately flag that as an error</source>
          <target state="translated">コンパイラはすぐにエラーとしてフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="89f4eed42cf9fec88c7f54948d286e3b27120ba8" translate="yes" xml:space="preserve">
          <source>The complementary error function [C99].</source>
          <target state="translated">相補誤差関数[C99]。</target>
        </trans-unit>
        <trans-unit id="ed6f778f02ef1fa177aa048ce5ee5aeaef666a7f" translate="yes" xml:space="preserve">
          <source>The complete Perl documentation is available with the Perl distribution. If you have Perl installed locally, you probably have the documentation installed as well: type &lt;code&gt;perldoc perl&lt;/code&gt; in a terminal or &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fperldoc.perl.org%2fperl.html&quot;&gt;view online&lt;/a&gt;.</source>
          <target state="translated">Perlの完全なドキュメントは、Perlディストリビューションで入手できます。Perlがローカルにインストールされている場合は、おそらくドキュメントもインストールされてい&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fperldoc.perl.org%2fperl.html&quot;&gt;ます&lt;/a&gt;。ターミナルで &lt;code&gt;perldoc perl&lt;/code&gt; と入力するか、オンラインで表示します。</target>
        </trans-unit>
        <trans-unit id="068df1cb71064dd3af102dcffe784783c3c8d76f" translate="yes" xml:space="preserve">
          <source>The complete array will be walked to ensure that it only contains valid filenames before any data is compressed.</source>
          <target state="translated">完全な配列は、データが圧縮される前に有効なファイル名のみが含まれるようにウォークされます。</target>
        </trans-unit>
        <trans-unit id="3bc7e120c73e8eddc193ee78a2c4c1f364b17641" translate="yes" xml:space="preserve">
          <source>The complete array will be walked to ensure that it only contains valid filenames before any data is uncompressed.</source>
          <target state="translated">完全な配列は、データが解凍される前に有効なファイル名のみを含むようにウォークされます。</target>
        </trans-unit>
        <trans-unit id="98b6ca723bf0fecfbf2258563e5ac721bc8076d0" translate="yes" xml:space="preserve">
          <source>The complete list of keys that can be specified in the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; directive are given, separated by spaces, in the values of the hash &lt;code&gt;%overload::ops&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; ディレクティブで指定できるキーの完全なリストは、スペースで区切られて、ハッシュ &lt;code&gt;%overload::ops&lt;/code&gt; 値で示されます。</target>
        </trans-unit>
        <trans-unit id="52c281d1dec7eebd9b6bf4d9cf26bf4311a392cc" translate="yes" xml:space="preserve">
          <source>The complete table can be found in the Sun Managers' FAQ &lt;a href=&quot;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&quot;&gt;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&lt;/a&gt; under &quot;9.1) Which Sun models run which versions of SunOS?&quot;.</source>
          <target state="translated">完全な表は、Sun ManagerのFAQ &lt;a href=&quot;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&quot;&gt;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&lt;/a&gt;の「9.1）どのSunモデルがどのバージョンのSunOSを実行しているか」にあります。</target>
        </trans-unit>
        <trans-unit id="243520c31a219c7d1aad4ef85de5d88764701e20" translate="yes" xml:space="preserve">
          <source>The completion character &amp;lt;tab&amp;gt; cannot be changed.</source>
          <target state="translated">補完文字&amp;lt;tab&amp;gt;は変更できません。</target>
        </trans-unit>
        <trans-unit id="57f8fbb5c61dbf32a6295f7091431384e77ad0b9" translate="yes" xml:space="preserve">
          <source>The complicated syntaxes of this code are discussed at length in &lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;Formatting Codes in perlpod&lt;/a&gt;, and implementation details are discussed below, in &lt;a href=&quot;#About-L%3c...%3e-Codes&quot;&gt;About L&amp;lt;...&amp;gt; Codes&lt;/a&gt;. Parsing the contents of L&amp;lt;content&amp;gt; is tricky. Notably, the content has to be checked for whether it looks like a URL, or whether it has to be split on literal &quot;|&quot; and/or &quot;/&quot; (in the right order!), and so on,</source>
          <target state="translated">このコードの複雑な構文については&lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;、perlpodのフォーマットコードで&lt;/a&gt;詳しく説明します。実装の詳細については、&lt;a href=&quot;#About-L%3c...%3e-Codes&quot;&gt;About L &amp;lt;...&amp;gt;コードで説明し&lt;/a&gt;ます。L &amp;lt;content&amp;gt;のコンテンツの解析は注意が必要です。特に、コンテンツがURLのように見えるかどうか、またはリテラル「|」で分割する必要があるかどうかを確認する必要があります および/または「/」（正しい順序で！）、など</target>
        </trans-unit>
        <trans-unit id="3e080e954af33f166a94bcfa488743e85b7e060c" translate="yes" xml:space="preserve">
          <source>The compound way of writing these is like &lt;code&gt;\p{General_Category=Number}&lt;/code&gt; (short: &lt;code&gt;\p{gc:n}&lt;/code&gt; ). But Perl furnishes shortcuts in which everything up through the equal or colon separator is omitted. So you can instead just write &lt;code&gt;\pN&lt;/code&gt; .</source>
          <target state="translated">これらの複合的な書き方は、 &lt;code&gt;\p{General_Category=Number}&lt;/code&gt; （省略形： &lt;code&gt;\p{gc:n}&lt;/code&gt; ）のようなものです。しかし、Perlは、等号またはコロン区切り文字までのすべてが省略されるショートカットを提供します。したがって、代わりに単に &lt;code&gt;\pN&lt;/code&gt; と書くことができます。</target>
        </trans-unit>
        <trans-unit id="c4be8f3e8beb322b0e55f10e2929087827e8f380" translate="yes" xml:space="preserve">
          <source>The computer on which a program or other data resides.</source>
          <target state="translated">プログラムなどのデータが保存されているコンピュータ。</target>
        </trans-unit>
        <trans-unit id="cfcbad8d7cd3118bc2c84750149f972c9d76bac3" translate="yes" xml:space="preserve">
          <source>The concatenation operator is &quot;.&quot;, not the null string. (Using the null string would render &lt;code&gt;/pat/ /pat/&lt;/code&gt; unparsable, because the third slash would be interpreted as a division operator--the tokenizer is in fact slightly context sensitive for operators like &quot;/&quot;, &quot;?&quot;, and &quot;&amp;gt;&quot;. And in fact, &quot;.&quot; itself can be the beginning of a number.)</source>
          <target state="translated">連結演算子は「。」であり、null文字列ではありません。（3番目のスラッシュは除算演算子として解釈されるため、ヌル文字列を使用すると &lt;code&gt;/pat/ /pat/&lt;/code&gt; 解析不可能になります-トークナイザーは実際には「/」、「？」、および &quot;&amp;gt;などの演算子に対してわずかに状況依存です「実際には、「。」自体が数字の始まりになり得ます。）</target>
        </trans-unit>
        <trans-unit id="7397c296c9007588d87f382f9ceff5394823ef48" translate="yes" xml:space="preserve">
          <source>The concise style uses symbols to convey maximum info with minimal clutter (like hex addresses). With just a little practice, you can start to see the flowers, not just the branches, in the trees.</source>
          <target state="translated">簡潔なスタイルは、最小限の乱雑さ(16進数のアドレスのような)で最大の情報を伝えるためにシンボルを使用しています。少しの練習で、木の枝だけでなく、花を見始めることができます。</target>
        </trans-unit>
        <trans-unit id="d9749679dc3561ae81ba863d8e80238321089767" translate="yes" xml:space="preserve">
          <source>The concrete formatter must implement</source>
          <target state="translated">具象フォーマッタは</target>
        </trans-unit>
        <trans-unit id="ec6253a94addb83f76f25a71c4752860278fa23c" translate="yes" xml:space="preserve">
          <source>The conditions can be any Perl expression. See the list of operators in the next section for information on comparison and boolean logic operators, which are commonly used in conditional statements.</source>
          <target state="translated">条件は任意の Perl 式を使用できます。条件文で一般的に使用される比較演算子およびブール論理演算子については、次のセクションの演算子リストを参照してください。</target>
        </trans-unit>
        <trans-unit id="543b88d3ab70df9ad92d2d1112ca25224746b1f5" translate="yes" xml:space="preserve">
          <source>The configuration data is held globally in a file in the perl installation tree, but a user may override any of these values by providing their own. This can be done by having a &lt;code&gt;.libnetrc&lt;/code&gt; file in their home directory. This file should return a reference to a HASH containing the keys described below. For example</source>
          <target state="translated">設定データはperlインストールツリーのファイルにグローバルに保持されますが、ユーザーは独自の値を提供することでこれらの値を上書きできます。これは、ホームディレクトリに &lt;code&gt;.libnetrc&lt;/code&gt; ファイルを置くことで実行できます。このファイルは、以下で説明するキーを含むHASHへの参照を返す必要があります。例えば</target>
        </trans-unit>
        <trans-unit id="9a78f97fbb5cf4075595c0b03128bde7af0266c1" translate="yes" xml:space="preserve">
          <source>The configuration dialog can be started any time later again by issuing the command &lt;code&gt; o conf init &lt;/code&gt; in the CPAN shell. A subset of the configuration dialog can be run by issuing &lt;code&gt;o conf init WORD&lt;/code&gt; where WORD is any valid config variable or a regular expression.</source>
          <target state="translated">構成ダイアログは、CPANシェルでコマンド &lt;code&gt; o conf init &lt;/code&gt; を発行することにより、いつでも再び開始できます。構成ダイアログのサブセットは、 &lt;code&gt;o conf init WORD&lt;/code&gt; を発行して実行できます。WORDは、有効な構成変数または正規表現です。</target>
        </trans-unit>
        <trans-unit id="b4c7562be2672acce7fe43e87808c7f47379f387" translate="yes" xml:space="preserve">
          <source>The configuration parameter check_sigs is there to turn signature checking on or off.</source>
          <target state="translated">設定パラメータ check_sigs は、署名チェックのオン/オフを切り替えるためのものです。</target>
        </trans-unit>
        <trans-unit id="92e8c71c043d1ee5895cf5c5a239168a7f0a8975" translate="yes" xml:space="preserve">
          <source>The confusion arises because people incorrectly assume that the sigil denotes the variable type.</source>
          <target state="translated">この混乱は、人々がシグルが変数の型を示すと誤って思い込んでいるために起こります。</target>
        </trans-unit>
        <trans-unit id="72def2ab61e0c7e7dccd965b3f9393136d20aa03" translate="yes" xml:space="preserve">
          <source>The constant &lt;code&gt;pi&lt;/code&gt; and some handy multiples of it (pi2, pi4, and pip2 (pi/2) and pip4 (pi/4)) are also available if separately exported:</source>
          <target state="translated">定数 &lt;code&gt;pi&lt;/code&gt; とその便利な倍数（pi2、pi4、pip2（pi / 2）およびpip4（pi / 4））は、個別にエクスポートした場合にも使用できます。</target>
        </trans-unit>
        <trans-unit id="c81821f9e03375c52f91dde5667119328458dcfd" translate="yes" xml:space="preserve">
          <source>The constant function &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; returns a comparable number that represents the highest file version number that this version of Storable fully supports (but see discussion of &lt;code&gt;$Storable::accept_future_minor&lt;/code&gt; above). The constant &lt;code&gt;Storable::BIN_WRITE_VERSION_NV&lt;/code&gt; function returns what file version is written and might be less than &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; in some configurations.</source>
          <target state="translated">定数関数 &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; は、このバージョンのStorableが完全にサポートしている最も高いファイルバージョン番号を表す比較可能な番号を返します（ただし、上記の &lt;code&gt;$Storable::accept_future_minor&lt;/code&gt; 説明を参照してください）。定数 &lt;code&gt;Storable::BIN_WRITE_VERSION_NV&lt;/code&gt; 関数は、書き込まれたファイルのバージョンを返し、構成 &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; はStorable :: BIN_VERSION_NVよりも小さい場合があります。</target>
        </trans-unit>
        <trans-unit id="9018d00ba0cf85500f9049cabc293077c6a815d2" translate="yes" xml:space="preserve">
          <source>The construct</source>
          <target state="translated">コンストラクト</target>
        </trans-unit>
        <trans-unit id="8226460345430ec3df47c2bd35c2d238766995a6" translate="yes" xml:space="preserve">
          <source>The construct &lt;code&gt;\$v{timep}=@{[$v{timep}=$arg]}&lt;/code&gt; used in the above example has a two-fold purpose: first, when this line is processed by &lt;b&gt;xsubpp&lt;/b&gt;, the Perl snippet &lt;code&gt;$v{timep}=$arg&lt;/code&gt; is evaluated. Second, the text of the evaluated snippet is output into the generated C file (inside a C comment)! During the processing of &lt;code&gt;char *host&lt;/code&gt; line, &lt;code&gt;$arg&lt;/code&gt; will evaluate to &lt;code&gt;ST(0)&lt;/code&gt; , and &lt;code&gt;$v{timep}&lt;/code&gt; will evaluate to &lt;code&gt;ST(1)&lt;/code&gt; .</source>
          <target state="translated">構築物 &lt;code&gt;\$v{timep}=@{[$v{timep}=$arg]}&lt;/code&gt; 上記の例で使用されるが、二重の目的を有している。この線はによって処理されたときに第一、&lt;b&gt;にxsubpp&lt;/b&gt;、Perlはスニペット &lt;code&gt;$v{timep}=$arg&lt;/code&gt; が評価されます。次に、評価されたスニペットのテキストが生成されたCファイル（Cコメント内）に出力されます。 &lt;code&gt;char *host&lt;/code&gt; 行の処理中に、 &lt;code&gt;$arg&lt;/code&gt; は &lt;code&gt;ST(0)&lt;/code&gt; に評価され、 &lt;code&gt;$v{timep}&lt;/code&gt; は &lt;code&gt;ST(1)&lt;/code&gt; に評価されます。</target>
        </trans-unit>
        <trans-unit id="b59007854896f819ee065a798da86e7867bce96e" translate="yes" xml:space="preserve">
          <source>The constructor &lt;code&gt;new&lt;/code&gt; creates and returns an empty &lt;code&gt;TAP::Parser::YAMLish::Reader&lt;/code&gt; object.</source>
          <target state="translated">コンストラクタ &lt;code&gt;new&lt;/code&gt; は、空の &lt;code&gt;TAP::Parser::YAMLish::Reader&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="1bad8668cdf1d431ad701326f6748ece18b79658" translate="yes" xml:space="preserve">
          <source>The constructor &lt;code&gt;new&lt;/code&gt; creates and returns an empty &lt;code&gt;TAP::Parser::YAMLish::Writer&lt;/code&gt; object.</source>
          <target state="translated">コンストラクタ &lt;code&gt;new&lt;/code&gt; は、空の &lt;code&gt;TAP::Parser::YAMLish::Writer&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="4c2fcf35a44aabf097cd59f3a3854953c70e5fcd" translate="yes" xml:space="preserve">
          <source>The constructor can also accept additional parameters that define the object. Let's write a real constructor for the &lt;code&gt;File&lt;/code&gt; class we used earlier:</source>
          <target state="translated">コンストラクターは、オブジェクトを定義する追加のパラメーターも受け入れることができます。前に使用した &lt;code&gt;File&lt;/code&gt; クラスの実際のコンストラクターを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="3a88176407788666ff0021721dd4e56b3400cf3f" translate="yes" xml:space="preserve">
          <source>The constructor creates a new object and optionally initialises it with a set of handles.</source>
          <target state="translated">コンストラクタは、新しいオブジェクトを作成し、オプションでハンドルのセットで初期化します。</target>
        </trans-unit>
        <trans-unit id="26002f2b8ad63b7adc28307355437aa48afa5d7b" translate="yes" xml:space="preserve">
          <source>The constructor for a &lt;code&gt;Net::Netrc&lt;/code&gt; object is not called new as it does not really create a new object. But instead is called &lt;code&gt;lookup&lt;/code&gt; as this is essentially what it does.</source>
          <target state="translated">&lt;code&gt;Net::Netrc&lt;/code&gt; オブジェクトのコンストラクターは、実際には新しいオブジェクトを作成しないため、newとは呼ばれません。ただし、これは本質的に &lt;code&gt;lookup&lt;/code&gt; と呼ばれるため、代わりにルックアップと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="5e4047980f5ac3eb3127d3d68b5f254e9299a0fd" translate="yes" xml:space="preserve">
          <source>The constructor for all the singletons used to represent modules, distributions, authors, and bundles. If the object already exists, this method returns the object; otherwise, it calls the constructor.</source>
          <target state="translated">モジュール、ディストリビューション、作者、バンドルを表現するために使用されるすべてのシングルトンのコンストラクタ。オブジェクトが既に存在する場合、このメソッドはそのオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a54cf785d15de998f3ac18ade864f218319b1ee1" translate="yes" xml:space="preserve">
          <source>The constructor of a generated class can be passed a list of</source>
          <target state="translated">生成されたクラスのコンストラクタには</target>
        </trans-unit>
        <trans-unit id="bb7df7aab984a9c0e691c8f805de279350cf56e0" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;Digest::MD5&lt;/code&gt; object which encapsulate the state of the MD5 message-digest algorithm.</source>
          <target state="translated">コンストラクターは、MD5メッセージダイジェストアルゴリズムの状態をカプセル化する新しい &lt;code&gt;Digest::MD5&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="2e6b2441df01bfc969fd7dfde15484f966dcaf52" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Color&lt;/code&gt; object. If &lt;a href=&quot;../../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; is not installed, returns undef.</source>
          <target state="translated">コンストラクターは新しい &lt;code&gt;TAP::Formatter::Color&lt;/code&gt; オブジェクトを返します。&lt;a href=&quot;../../term/ansicolor&quot;&gt;Term :: ANSIColor&lt;/a&gt;がインストールされていない場合は、undefを返します。</target>
        </trans-unit>
        <trans-unit id="972195b07373ba2fa384173c37fb399dc7626fb1" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Console::Session&lt;/code&gt; object.</source>
          <target state="translated">コンストラクターは新しい &lt;code&gt;TAP::Formatter::Console::Session&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="64d08d3b354e3667ab5da2f82eaec44dd6d25ea5" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; object. If a &lt;a href=&quot;../harness&quot;&gt;TAP::Harness&lt;/a&gt; is created with no &lt;code&gt;formatter&lt;/code&gt; a &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; is automatically created. If any of the following options were given to TAP::Harness-&amp;gt;new they well be passed to this constructor which accepts an optional hashref whose allowed keys are:</source>
          <target state="translated">コンストラクターは新しい &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; オブジェクトを返します。場合&lt;a href=&quot;../harness&quot;&gt;TAP ::ハーネスは&lt;/a&gt;一切使用して作成されていない &lt;code&gt;formatter&lt;/code&gt; &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; 自動的に作成されます。次のオプションのいずれかがTAP :: Harness-&amp;gt; newに指定されている場合、これらのオプションは、許可されたキーが含まれるオプションのハッシュ参照を受け入れるこのコンストラクタに渡されます。</target>
        </trans-unit>
        <trans-unit id="cdf8ec5d8f9e8688b8b1e013d18928a0b5fdbbeb" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Harness&lt;/code&gt; object. It accepts an optional hashref whose allowed keys are:</source>
          <target state="translated">コンストラクターは新しい &lt;code&gt;TAP::Harness&lt;/code&gt; オブジェクトを返します。許可されるキーが次のオプションのハッシュ参照を受け入れます。</target>
        </trans-unit>
        <trans-unit id="093c7ac00d4bfb4c1a8deee532d1b8ad2334e8c0" translate="yes" xml:space="preserve">
          <source>The constructor returns some object that encapsulate the state of the message-digest algorithm. You can add data to the object and finally ask for the digest. The &quot;XXX&quot; should of course be replaced by the proper name of the digest algorithm you want to use.</source>
          <target state="translated">コンストラクタは、メッセージダイジェストアルゴリズムの状態をカプセル化したオブジェクトを返します。このオブジェクトにデータを追加して、最後にダイジェストを求めることができます。もちろん、&quot;XXX &quot;は使用したいダイジェストアルゴリズムの適切な名前に置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="f4ebdab724a22632fec3a1d054882b1bc817c7d6" translate="yes" xml:space="preserve">
          <source>The content of the here doc is treated just as it would be if the string were embedded in backticks. Thus the content is interpolated as though it were double quoted and then executed via the shell, with the results of the execution returned.</source>
          <target state="translated">here doc の内容は、文字列が backticks に埋め込まれている場合と同じように扱われます。したがって、内容はあたかもダブルクォートされたかのように補間され、シェル経由で実行され、実行結果が返されます。</target>
        </trans-unit>
        <trans-unit id="6af50a9986dd8fc345d5bd2a482a8608eafdf212" translate="yes" xml:space="preserve">
          <source>The content of the text chunk in the buffer is commonly exactly one complete line of input, up to and including a newline terminator, but there are situations where it is otherwise. The octets of the buffer may be intended to be interpreted as either UTF-8 or Latin-1. The function &lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt; tells you which. Do not use the &lt;code&gt;SvUTF8&lt;/code&gt; flag on this scalar, which may disagree with it.</source>
          <target state="translated">バッファ内のテキストチャンクの内容は、通常、改行ターミネータまでの完全な1行の入力ですが、それ以外の場合もあります。バッファのオクテットは、UTF-8またはLatin-1として解釈されるように意図されている場合があります。関数&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;はどちらかを示します。このスカラーで &lt;code&gt;SvUTF8&lt;/code&gt; フラグを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="3c50b9c6cd39ffa60fa752e0357613216ec7e1d3" translate="yes" xml:space="preserve">
          <source>The contents of &lt;code&gt;$/&lt;/code&gt; are used to determine what constitutes a line terminator.</source>
          <target state="translated">&lt;code&gt;$/&lt;/code&gt; の内容は、行末記号を構成するものを決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="18d18ed7c7a8db27a58a80fd58640cc3bbfe1bce" translate="yes" xml:space="preserve">
          <source>The contents of the Comment header field, if present. If no comment is present, the value will be undef. Note this is different from a zero length comment, which will return an empty string.</source>
          <target state="translated">Commentヘッダーフィールドの内容(存在する場合)。コメントが存在しない場合、値は undef となります。これは、空の文字列を返すゼロ長のコメントとは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f67589a8aeaaf0494de7c02234d42e486e771e87" translate="yes" xml:space="preserve">
          <source>The contents of the Name header field, if present. If no name is present, the value will be undef. Note this is different from a zero length name, which will return an empty string.</source>
          <target state="translated">Nameヘッダーフィールドの内容(存在する場合)。名前が存在しない場合、値は undef となります。これは、空の文字列を返すゼロ長の名前とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9456b1413183ce2a7cacbf69ac958ec33df9e078" translate="yes" xml:space="preserve">
          <source>The contents of the above &quot;=begin :yetanotherformat&quot; ... &quot;=end :yetanotherformat&quot; region</source>
          <target state="translated">上記の&quot;=begin :yetanotherformat &quot;の内容 ...&quot;=end :yetanotherformat&quot; リージョン</target>
        </trans-unit>
        <trans-unit id="7bdc8b3d3c8ea3698e851bea6c870ef22be74842" translate="yes" xml:space="preserve">
          <source>The contents of the string are split into arguments using a call to &lt;code&gt;Text::ParseWords::shellwords&lt;/code&gt; . As with &lt;code&gt;GetOptionsFromArray&lt;/code&gt; , the global &lt;code&gt;@ARGV&lt;/code&gt; is not touched.</source>
          <target state="translated">文字列の内容は、 &lt;code&gt;Text::ParseWords::shellwords&lt;/code&gt; 呼び出しを使用して引数に分割されます。 &lt;code&gt;GetOptionsFromArray&lt;/code&gt; と同様に、グローバル &lt;code&gt;@ARGV&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="ee0a191734836657a10b5b7b1f37002c95e61a13" translate="yes" xml:space="preserve">
          <source>The contents of the string changes, but not the nature of the string. Perl doesn't know any more after the call than before that the contents of the string indicates the affirmative.</source>
          <target state="translated">文字列の内容は変わりますが、文字列の性質は変わりません。文字列の内容が肯定を示していることは、呼び出し前よりも呼び出し後の方がPerlにはわかりません。</target>
        </trans-unit>
        <trans-unit id="fa23695f3fe9b71ce5ed23d56ccd05be2c1e1b36" translate="yes" xml:space="preserve">
          <source>The contents should be an integer; different bits of it are used for different pragmatic flags. Here's an example:</source>
          <target state="translated">その内容は整数でなければなりません。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="29b067c45824f7dfd004988f65509a605101a269" translate="yes" xml:space="preserve">
          <source>The context (void, scalar or list) for the return value(s) for &lt;code&gt;-&amp;gt;join()&lt;/code&gt; is determined at the time of thread creation.</source>
          <target state="translated">&lt;code&gt;-&amp;gt;join()&lt;/code&gt; の戻り値のコンテキスト（ボイド、スカラー、またはリスト）は、スレッドの作成時に決定されます。</target>
        </trans-unit>
        <trans-unit id="cafef0e58c037c46bb556fc0f1a1471183c9edb3" translate="yes" xml:space="preserve">
          <source>The context type may also be used as the</source>
          <target state="translated">コンテキスト型は</target>
        </trans-unit>
        <trans-unit id="cd3e46d3e11cb302e5746c299ddd22b0f06326e3" translate="yes" xml:space="preserve">
          <source>The context-free version of Perl_warner is called Perl_warner_nocontext, and does not take the extra argument. Instead it does dTHX; to get the context from thread-local storage. We &lt;code&gt;#define warner Perl_warner_nocontext&lt;/code&gt; so that extensions get source compatibility at the expense of performance. (Passing an arg is cheaper than grabbing it from thread-local storage.)</source>
          <target state="translated">Perl_warnerのコンテキストフリーバージョンはPerl_warner_nocontextと呼ばれ、追加の引数を取りません。代わりに、dTHXを行います。スレッドローカルストレージからコンテキストを取得します。拡張機能がパフォーマンスを犠牲にしてソースの互換性を取得できるように、 &lt;code&gt;#define warner Perl_warner_nocontext&lt;/code&gt; を定義します。（argを渡す方が、スレッドローカルストレージから取得するよりも安価です。）</target>
        </trans-unit>
        <trans-unit id="a306525389293789c4d3b564d2695ad27f640911" translate="yes" xml:space="preserve">
          <source>The conversion from Perl to C is left as an exercise to the reader, but the prototype would be:</source>
          <target state="translated">PerlからCへの変換は、読者には演習として残していますが、プロトタイプはそうなるでしょう。</target>
        </trans-unit>
        <trans-unit id="5dab7a329fdfbc3426218724b9a43e87edffc6ee" translate="yes" xml:space="preserve">
          <source>The copy constructor is called only before a call to a function declared to implement a mutator, for example, if &lt;code&gt;++$b;&lt;/code&gt; in the code above is effected via a method declared for key &lt;code&gt;'++'&lt;/code&gt; (or 'nomethod', passed &lt;code&gt;'++'&lt;/code&gt; as the fourth argument) or, by autogeneration, &lt;code&gt;'+='&lt;/code&gt; . It is not called if the increment operation is effected by a call to the method for &lt;code&gt;'+'&lt;/code&gt; since, in the equivalent code,</source>
          <target state="translated">コピーコンストラクターは、たとえば &lt;code&gt;++$b;&lt;/code&gt; 場合など、ミューテーターを実装するように宣言された関数の呼び出しの前にのみ呼び出されます。上記のコードでは、キー &lt;code&gt;'++'&lt;/code&gt; （または 'nomethod'、4番目の引数として &lt;code&gt;'++'&lt;/code&gt; が渡された）に対して宣言されたメソッド、または自動生成によって &lt;code&gt;'+='&lt;/code&gt; が影響を受けます。同等のコードでは、 &lt;code&gt;'+'&lt;/code&gt; メソッドの呼び出しによってインクリメント操作が影響を受ける場合は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="ed73a5b2044d7fb703c52c07bf589cfde908abd5" translate="yes" xml:space="preserve">
          <source>The copy constructor is not called if Perl determines that it is unnecessary because there is no other reference to the data being modified.</source>
          <target state="translated">コピーコンストラクタは、変更されるデータへの参照が他にないため、Perl が不要と判断した場合には呼び出されません。</target>
        </trans-unit>
        <trans-unit id="dd210b745dfa94e566cd092061cca3c4c3e619ac" translate="yes" xml:space="preserve">
          <source>The core &lt;a href=&quot;devel/peek&quot;&gt;Devel::Peek&lt;/a&gt; module lets us examine SVs from a Perl program. Let's see, for instance, how Perl treats the constant &lt;code&gt;&quot;hello&quot;&lt;/code&gt; .</source>
          <target state="translated">コア&lt;a href=&quot;devel/peek&quot;&gt;Devel :: Peek&lt;/a&gt;モジュールを使用すると、PerlプログラムからSVを調べることができます。たとえば、Perlが定数 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; を処理する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="216872d0879be12be32ab51a2f74dd9e0b301e2c" translate="yes" xml:space="preserve">
          <source>The core development team (known as the Perl Porters) are a group of highly altruistic individuals committed to producing better software for free than you could hope to purchase for money. You may snoop on pending developments via the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.nntp.perl.org%2fgroup%2fperl.perl5.porters%2f&quot;&gt;archives&lt;/a&gt; or read the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fdev.perl.org%2fperl5%2fdocs%2fp5p-faq.html&quot;&gt;faq&lt;/a&gt;, or you can subscribe to the mailing list by sending perl5-porters-subscribe@perl.org a subscription request (an empty message with no subject is fine).</source>
          <target state="translated">コア開発チーム（Perl Portersとして知られています）は、お金で購入したいと思っているよりも優れたソフトウェアを無料で作成することに熱心な、非常に利他的な個人のグループです。あなたは経由して、保留中の開発をスヌーピングも&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.nntp.perl.org%2fgroup%2fperl.perl5.porters%2f&quot;&gt;アーカイブ&lt;/a&gt;または読み取り&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fdev.perl.org%2fperl5%2fdocs%2fp5p-faq.html&quot;&gt;よくある質問を&lt;/a&gt;、またはあなたがperl5-porters-subscribe@perl.orgサブスクリプション要求（件名なしで空のメッセージで結構です）を送信することにより、メーリングリストを購読することができます。</target>
        </trans-unit>
        <trans-unit id="0cd6f3115d2d6dbe91a070c10c729356bd227008" translate="yes" xml:space="preserve">
          <source>The core distribution can now run its regression tests in parallel on Unix-like platforms. Instead of running &lt;code&gt;make test&lt;/code&gt; , set &lt;code&gt;TEST_JOBS&lt;/code&gt; in your environment to the number of tests to run in parallel, and run &lt;code&gt;make test_harness&lt;/code&gt; . On a Bourne-like shell, this can be done as</source>
          <target state="translated">コアディストリビューションは、Unixのようなプラットフォームで並行して回帰テストを実行できます。 &lt;code&gt;make test&lt;/code&gt; を実行する代わりに、環境内の &lt;code&gt;TEST_JOBS&lt;/code&gt; を並行して実行するテストの数に設定し、 &lt;code&gt;make test_harness&lt;/code&gt; を実行します。ボーンのようなシェルでは、これは次のように行うことができます</target>
        </trans-unit>
        <trans-unit id="e662bc8801eef788dff3d6316ec77e7ad811db79" translate="yes" xml:space="preserve">
          <source>The core uses the same testing style as the rest of Perl, a simple &quot;ok/not ok&quot; run through Test::Harness, but there are a few special considerations.</source>
          <target state="translated">コアはPerlの他の部分と同じテストスタイルを使用しており、Test::Harnessを通して単純な &quot;OK/NG &quot;を実行しますが、いくつかの特別な考慮事項があります。</target>
        </trans-unit>
        <trans-unit id="a3ac8ff08d630fcfeea5350e81e0c2b799df3c84" translate="yes" xml:space="preserve">
          <source>The corpse of a &lt;b&gt;process&lt;/b&gt;, in the form of a file left in the &lt;b&gt;working directory&lt;/b&gt; of the process, usually as a result of certain kinds of fatal errors.</source>
          <target state="translated">通常、特定の種類の致命的なエラーの結果として、プロセスの&lt;b&gt;作業ディレクトリ&lt;/b&gt;に残されたファイルの形での&lt;b&gt;プロセス&lt;/b&gt;の死体。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ad72ec528dbf7e40ea844e46e3a129f3b3eadb6f" translate="yes" xml:space="preserve">
          <source>The correct code is &lt;code&gt;MAN3PODS =&amp;gt; { }&lt;/code&gt; .</source>
          <target state="translated">正しいコードは &lt;code&gt;MAN3PODS =&amp;gt; { }&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7eb7322d9e711d10a989215f61754b35fdcb57a5" translate="yes" xml:space="preserve">
          <source>The correct procedure, then, is to use &lt;code&gt;newRV_noinc&lt;/code&gt; instead of &lt;code&gt;newRV_inc&lt;/code&gt; . Then, if and when the last reference is destroyed, the reference count of the SV will go to zero and it will be destroyed, stopping any memory leak.</source>
          <target state="translated">したがって、正しい手順は、 &lt;code&gt;newRV_inc&lt;/code&gt; の代わりに &lt;code&gt;newRV_noinc&lt;/code&gt; を使用することです。次に、最後の参照が破棄されると、SVの参照カウントがゼロになり、破棄され、メモリリークが停止します。</target>
        </trans-unit>
        <trans-unit id="e90480b056b891e1197a3bfca2f65f9341469925" translate="yes" xml:space="preserve">
          <source>The correspondence between OPs and</source>
          <target state="translated">OPの対応と</target>
        </trans-unit>
        <trans-unit id="3e632bae0f91b7fe9b42695b7f4eb9541547d7ab" translate="yes" xml:space="preserve">
          <source>The corresponding bright foreground color attributes (colors 8 to 15) are:</source>
          <target state="translated">対応する明るい前景色の属性(色8〜15)は</target>
        </trans-unit>
        <trans-unit id="15d3a8f91abd0b678be46a5c74457eb9c1a22a59" translate="yes" xml:space="preserve">
          <source>The corresponding command to get the current value of &lt;code&gt;$version&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;$version&lt;/code&gt; 現在の値を取得するための対応するコマンドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="05b1215b3085d02b291dbd96e47ab01de8dfb44a" translate="yes" xml:space="preserve">
          <source>The corresponding values are interpreted as regular expressions. The &lt;code&gt;distribution&lt;/code&gt; related one will be matched against the canonical distribution name, e.g. &quot;AUTHOR/Foo-Bar-3.14.tar.gz&quot;.</source>
          <target state="translated">対応する値は正規表現として解釈されます。 &lt;code&gt;distribution&lt;/code&gt; 関連する1つは、標準的なディストリビューション名、例えば「AUTHOR /フー・バー-3.14.tar.gz」と照合されます。</target>
        </trans-unit>
        <trans-unit id="128893376b086988df0b6fe82266dcff7ded3c2c" translate="yes" xml:space="preserve">
          <source>The corresponding values are references to functions which take three arguments: the first one is the</source>
          <target state="translated">対応する値は、3つの引数を取る関数への参照です。</target>
        </trans-unit>
        <trans-unit id="6d3c7b629f0ebabb7666a1418d689e5fcefefd4a" translate="yes" xml:space="preserve">
          <source>The count of the saved lines in the history (assuming &lt;code&gt;HistFile&lt;/code&gt; above).</source>
          <target state="translated">履歴に保存された行の数（上記の &lt;code&gt;HistFile&lt;/code&gt; を想定）。</target>
        </trans-unit>
        <trans-unit id="8a76e9ed23620e2d0138b893f98a44b589dac036" translate="yes" xml:space="preserve">
          <source>The cpd tool detects cut-and-paste coding. If one instance of the cut-and-pasted code changes, all the other spots should probably be changed, too. Therefore such code should probably be turned into a subroutine or a macro.</source>
          <target state="translated">cpd ツールは、カットアンドペーストされたコードを検出します。カットアンドペーストされたコードの1つのインスタンスが変更された場合、他のすべてのスポットも変更されるはずです。そのため、そのようなコードはサブルーチンやマクロにしておくべきでしょう。</target>
        </trans-unit>
        <trans-unit id="4315b91912980da8ee0d1d0ed73982372319566a" translate="yes" xml:space="preserve">
          <source>The critical thing when considering performance is to remember there is no such thing as a &lt;code&gt;Golden Bullet&lt;/code&gt; , which is why there are no rules, only guidelines.</source>
          <target state="translated">パフォーマンスを検討する際の重要なことは、 &lt;code&gt;Golden Bullet&lt;/code&gt; などは存在しないことです。そのため、ルールはなく、ガイドラインのみです。</target>
        </trans-unit>
        <trans-unit id="2b2f6d378553efd3b9ab7bab3a4069e081f7b24e" translate="yes" xml:space="preserve">
          <source>The crucial thing to understand about the Windows environment is that the command line you type in is processed twice before Perl sees it. First, your command shell (usually CMD.EXE) preprocesses the command line, to handle redirection, environment variable expansion, and location of the executable to run. Then, the perl executable splits the remaining command line into individual arguments, using the C runtime library upon which Perl was built.</source>
          <target state="translated">Windows 環境について理解しておくべき重要なことは、入力されたコマンドラインは Perl がそれを見る前に 2 回処理されるということです。最初に、コマンドシェル(通常は CMD.EXE)がコマンドラインを前処理し、リダイレクション、環境変数の展開、実行可能な実行ファイルの場所を処理します。次に、Perl の実行ファイルは、Perl がビルドされた C ランタイムライブラリを使用して、残りのコマンドラインを個々の引数に分割します。</target>
        </trans-unit>
        <trans-unit id="1bc259f8a74780b8f0344bb67ea81414fbf6762f" translate="yes" xml:space="preserve">
          <source>The crypt package distributed with Cygwin is a Linux compatible 56-bit DES crypt port by Corinna Vinschen.</source>
          <target state="translated">Cygwinで配布されているcryptパッケージは、Corinna VinschenによるLinux互換の56ビットDES暗号ポートです。</target>
        </trans-unit>
        <trans-unit id="831281b1eb1b6cf65cdf498d326c123b4d2ac980" translate="yes" xml:space="preserve">
          <source>The csh_glob() function can also be exported, but you should not use it directly unless you really know what you are doing. It splits the pattern into words and feeds each one to bsd_glob(). Perl's own glob() function uses this internally.</source>
          <target state="translated">csh_glob()関数はエクスポートすることもできますが、本当に何をしているのかわからない限り、直接使うべきではありません。これはパターンを単語に分割し、それぞれを bsd_glob()に送ります。Perl 自身の glob()関数はこれを内部的に使用しています。</target>
        </trans-unit>
        <trans-unit id="bb0c5fc2762311ff2f0c2ca9c51463e63c575d45" translate="yes" xml:space="preserve">
          <source>The ctime() function provides a way of getting at the scalar sense of the original CORE::localtime() function.</source>
          <target state="translated">ctime()関数は、オリジナルの CORE::localtime()関数のスカラーセンスを取得する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="cc603efa123dedf5ee9218533c5f2218c02b0847" translate="yes" xml:space="preserve">
          <source>The cube root [C99].</source>
          <target state="translated">立方根[C99]。</target>
        </trans-unit>
        <trans-unit id="64523d7c78b273edb939e95b2a44e78339d21a0e" translate="yes" xml:space="preserve">
          <source>The current format name is stored in the variable &lt;code&gt;$~&lt;/code&gt; (&lt;code&gt;$FORMAT_NAME&lt;/code&gt; ), and the current top of form format name is in &lt;code&gt;$^&lt;/code&gt; (&lt;code&gt;$FORMAT_TOP_NAME&lt;/code&gt; ). The current output page number is stored in &lt;code&gt;$%&lt;/code&gt; (&lt;code&gt;$FORMAT_PAGE_NUMBER&lt;/code&gt; ), and the number of lines on the page is in &lt;code&gt;$=&lt;/code&gt; (&lt;code&gt;$FORMAT_LINES_PER_PAGE&lt;/code&gt; ). Whether to autoflush output on this handle is stored in &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$OUTPUT_AUTOFLUSH&lt;/code&gt; ). The string output before each top of page (except the first) is stored in &lt;code&gt;$^L&lt;/code&gt; (&lt;code&gt;$FORMAT_FORMFEED&lt;/code&gt; ). These variables are set on a per-filehandle basis, so you'll need to select() into a different one to affect them:</source>
          <target state="translated">現在のフォーマット名は変数 &lt;code&gt;$~&lt;/code&gt; （ &lt;code&gt;$FORMAT_NAME&lt;/code&gt; ）に格納され、現在のフォームフォーマット名の先頭は &lt;code&gt;$^&lt;/code&gt; （ &lt;code&gt;$FORMAT_TOP_NAME&lt;/code&gt; ）にあります。現在の出力ページ番号は &lt;code&gt;$%&lt;/code&gt; （ &lt;code&gt;$FORMAT_PAGE_NUMBER&lt;/code&gt; ）に格納され、ページの行数は &lt;code&gt;$=&lt;/code&gt; （ &lt;code&gt;$FORMAT_LINES_PER_PAGE&lt;/code&gt; ）に格納されます。このハンドルの出力を自動フラッシュするかどうかは &lt;code&gt;$|&lt;/code&gt; 保存されます （ &lt;code&gt;$OUTPUT_AUTOFLUSH&lt;/code&gt; ）。ページの先頭（最初を除く）の前に出力される文字列は、 &lt;code&gt;$^L&lt;/code&gt; （ &lt;code&gt;$FORMAT_FORMFEED&lt;/code&gt; ）。これらの変数はファイルハンドルごとに設定されるため、select（）を別の変数に変更して、それらに影響を与える必要があります。</target>
        </trans-unit>
        <trans-unit id="bbbf873260d45973f075c0f7d16575580f2c6333" translate="yes" xml:space="preserve">
          <source>The current hierarchy is:</source>
          <target state="translated">現在の階層は</target>
        </trans-unit>
        <trans-unit id="824b38e0c77c472868114a17d1e97b269bb0ba11" translate="yes" xml:space="preserve">
          <source>The current implementation does not allow specification of the required version of the module.</source>
          <target state="translated">現在の実装では、モジュールの必要なバージョンを指定することはできません。</target>
        </trans-unit>
        <trans-unit id="282bec354d0f4d4b762dd47ad0eb5b6ecfd1f6ce" translate="yes" xml:space="preserve">
          <source>The current input line is normally in $_, not $0. It generally does not have the newline stripped. ($0 is the name of the program executed.) See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">現在の入力行は通常$ _ではなく$ _にあります。通常、改行は削除されません。（$ 0は実行されるプログラムの名前です。）&lt;a href=&quot;perlvar&quot;&gt;perlvarを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="18f618cc025364ce800e5f345611b3c1497a1ed6" translate="yes" xml:space="preserve">
          <source>The current kinds of Magic Virtual Tables are:</source>
          <target state="translated">現在のマジックバーチャルテーブルの種類は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5c4fde69768c885a1c05aaf0e69e2380f88e2b66" translate="yes" xml:space="preserve">
          <source>The current leading implementation of Perl 6, Rakudo, released a &quot;useful, usable, 'early adopter'&quot; distribution of Perl 6 (called Rakudo Star) in July of 2010. Please see &lt;a href=&quot;http://rakudo.org/&quot;&gt;http://rakudo.org/&lt;/a&gt; for more information.</source>
          <target state="translated">Perl 6の現在主要な実装であるRakudoは、2010年7月にPerl 6（Rakudo Starと呼ばれる）の「便利で使用可能な「早期導入者」」ディストリビューションをリリースしました。詳細については、&lt;a href=&quot;http://rakudo.org/&quot;&gt;http：//rakudo.org/&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="22d3f495bb4240a9d3bab6ec75da601351d12c2b" translate="yes" xml:space="preserve">
          <source>The current locale is exposed to XS code except possibly &lt;code&gt;LC_NUMERIC&lt;/code&gt; (explained in the next paragraph). There have not been reports of problems with the other categories. Perl initializes things on start-up so that the current locale is the one which is indicated by the user's environment in effect at that time. See &lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;ENVIRONMENT in perllocale&lt;/a&gt;.</source>
          <target state="translated">現在のロケールは、 &lt;code&gt;LC_NUMERIC&lt;/code&gt; を除いてXSコードに公開されています（次の段落で説明）。他のカテゴリに関する問題の報告はありません。Perlは起動時に物事を初期化して、現在のロケールがその時点で有効なユーザーの環境によって示されるロケールになるようにします。&lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;perllocaleのENVIRONMENTを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="061c069ca3fcc48e2c1a6a5055f7be81ca6838c7" translate="yes" xml:space="preserve">
          <source>The current locale is set at execution time by &lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale()&lt;/a&gt; described below. If that function hasn't yet been called in the course of the program's execution, the current locale is that which was determined by the &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt; in effect at the start of the program. If there is no valid environment, the current locale is whatever the system default has been set to. On POSIX systems, it is likely, but not necessarily, the &quot;C&quot; locale. On Windows, the default is set via the computer's &lt;code&gt;Control Panel-&amp;gt;Regional &lt;a href=&quot;functions/and&quot;&gt;and&lt;/a&gt; Language Options&lt;/code&gt; (or its current equivalent).</source>
          <target state="translated">現在のロケールは、実行時に以下で説明する&lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale（）&lt;/a&gt;によって設定されます。プログラムの実行中にその関数がまだ呼び出されていない場合、現在のロケールは、プログラムの開始時に有効な&lt;a href=&quot;#ENVIRONMENT&quot;&gt;環境&lt;/a&gt;によって決定されたロケールです。有効な環境がない場合、現在のロケールはシ​​ステムのデフォルトに設定されているものです。 POSIXシステムでは、「C」ロケールである可能性がありますが、必ずしもそうではありません。 Windowsでは、デフォルトはコンピュータの[ &lt;code&gt;Control Panel-&amp;gt;Regional &lt;a href=&quot;functions/and&quot;&gt;and&lt;/a&gt; Language Options&lt;/code&gt; （または現在の同等オプション）で設定されます。</target>
        </trans-unit>
        <trans-unit id="b7f42f27fb52f98cb07c551fabc648053a689c30" translate="yes" xml:space="preserve">
          <source>The current locale is used when going outside of Perl with operations like &lt;a href=&quot;functions/system&quot;&gt;system LIST&lt;/a&gt; or &lt;a href=&quot;perlop#qx%2fSTRING%2f&quot;&gt;qx//&lt;/a&gt;, if those operations are locale-sensitive.</source>
          <target state="translated">現在のロケールは、&lt;a href=&quot;functions/system&quot;&gt;システムのLIST&lt;/a&gt;や&lt;a href=&quot;perlop#qx%2fSTRING%2f&quot;&gt;qx //&lt;/a&gt;などの操作でPerlの外に出るときに使用されます（これらの操作がロケールに依存する場合）。</target>
        </trans-unit>
        <trans-unit id="ea51628874f50840c20248e49e31ecc39bc8aab0" translate="yes" xml:space="preserve">
          <source>The current major release of Perl is Perl 5, first released in 1994. It can run scripts from the previous major release, Perl 4 (March 1991), but has significant differences.</source>
          <target state="translated">現在のPerlのメジャーリリースはPerl 5で、1994年に最初にリリースされました。前のメジャーリリースである Perl 4 (1991年3月)からのスクリプトを実行することができますが、大きな違いがあります。</target>
        </trans-unit>
        <trans-unit id="1ad75b57a59621fb77288b117b229032ac9f513f" translate="yes" xml:space="preserve">
          <source>The current naming convention is:</source>
          <target state="translated">現在の命名規則は</target>
        </trans-unit>
        <trans-unit id="b2e2b3b69c2218e4d8359acb1335a4024632d82a" translate="yes" xml:space="preserve">
          <source>The current offset on the Perl internal stack (cf. &lt;code&gt;SP&lt;/code&gt; ) is restored at the end of</source>
          <target state="translated">Perl内部スタック（ &lt;code&gt;SP&lt;/code&gt; を参照）の現在のオフセットは、</target>
        </trans-unit>
        <trans-unit id="c030186501458b34adb46e2d42aa7b81f218a056" translate="yes" xml:space="preserve">
          <source>The current page length (printable lines) of the currently selected output channel. The default is 60.</source>
          <target state="translated">現在選択されている出力チャンネルの現在のページ長(印刷可能な行数)。デフォルトは60です。</target>
        </trans-unit>
        <trans-unit id="3d4eb19bb10369473283d32cc7dd71a86ff46c90" translate="yes" xml:space="preserve">
          <source>The current page number of the currently selected output channel.</source>
          <target state="translated">現在選択されている出力チャンネルの現在のページ番号。</target>
        </trans-unit>
        <trans-unit id="770296232bd3d822ead8ffe492b7e0e282b9f95e" translate="yes" xml:space="preserve">
          <source>The current phase of the perl interpreter.</source>
          <target state="translated">perlインタプリタの現在のフェーズ。</target>
        </trans-unit>
        <trans-unit id="a2857cd700aaf0537f04949257bdb10786ea5148" translate="yes" xml:space="preserve">
          <source>The current set of characters after which a string may be broken to fill continuation fields (starting with &lt;code&gt;^&lt;/code&gt;) in a format. The default is &quot; \n-&quot;, to break on a space, newline, or a hyphen.</source>
          <target state="translated">形式の継続フィールド（ &lt;code&gt;^&lt;/code&gt; で始まる）を埋めるために文字列が壊れる可能性がある現在の文字セット。デフォルトは「\ n-」で、スペース、改行、またはハイフンで区切ります。</target>
        </trans-unit>
        <trans-unit id="981300e195cac4e7353f833304330d8ac58b67a9" translate="yes" xml:space="preserve">
          <source>The current set of warning checks enabled by the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma. It has the same scoping as the &lt;code&gt;$^H&lt;/code&gt; and &lt;code&gt;%^H&lt;/code&gt; variables. The exact values are considered internal to the &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; pragma and may change between versions of Perl.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマによって有効にされた現在の警告チェックのセット。 &lt;code&gt;$^H&lt;/code&gt; および &lt;code&gt;%^H&lt;/code&gt; 変数と同じスコープを持っています。正確な値は、&lt;a href=&quot;warnings&quot;&gt;警告&lt;/a&gt;プラグマの内部と見なされ、Perlのバージョン間で異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="e48b124af22e055d2f998460eddfa2b05c504d05" translate="yes" xml:space="preserve">
          <source>The current setting for a particular CV can be retrieved by &lt;a href=&quot;#cv_get_call_checker&quot;&gt;cv_get_call_checker&lt;/a&gt;.</source>
          <target state="translated">特定のCVの現在の設定は、&lt;a href=&quot;#cv_get_call_checker&quot;&gt;cv_get_call_checker&lt;/a&gt;で取得できます。</target>
        </trans-unit>
        <trans-unit id="b952480064e555e874a4e5bab67374e0afa43170" translate="yes" xml:space="preserve">
          <source>The current state is quite close to this target. Known limitations:</source>
          <target state="translated">現在の状態は、このターゲットにかなり近いです。既知の制限。</target>
        </trans-unit>
        <trans-unit id="8b45957d0c48ff5a61159add09d1cced4fe06354" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$,&lt;/code&gt; (if any) is printed between each LIST item. The current value of &lt;code&gt;$\&lt;/code&gt; (if any) is printed after the entire LIST has been printed. Because print takes a LIST, anything in the LIST is evaluated in list context, including any subroutines whose return lists you pass to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;. Be careful not to follow the print keyword with a left parenthesis unless you want the corresponding right parenthesis to terminate the arguments to the print; put parentheses around all arguments (or interpose a &lt;code&gt;+&lt;/code&gt; , but that doesn't look as good).</source>
          <target state="translated">&lt;code&gt;$,&lt;/code&gt; の現在の値（ある場合）は、各LIST項目の間に出力されます。 &lt;code&gt;$\&lt;/code&gt; （存在する場合）の現在の値は、リスト全体が出力された後に出力されます。printはLISTを受け取るため、戻りリストを &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; に渡すサブルーチンを含め、LIST内のすべてがリストコンテキストで評価されます。対応する右括弧でprintへの引数を終了させたい場合を除き、printキーワードの後に​​左括弧を付けないように注意してください。すべての引数を括弧で囲みます（または &lt;code&gt;+&lt;/code&gt; を挿入しますが、見栄えがよくありません）。</target>
        </trans-unit>
        <trans-unit id="d3b381c8d22a96ce946901e90864741d92df1af5" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$,&lt;/code&gt; (if any) is printed between each LIST item. The current value of &lt;code&gt;$\&lt;/code&gt; (if any) is printed after the entire LIST has been printed. Because print takes a LIST, anything in the LIST is evaluated in list context, including any subroutines whose return lists you pass to &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;. Be careful not to follow the print keyword with a left parenthesis unless you want the corresponding right parenthesis to terminate the arguments to the print; put parentheses around all arguments (or interpose a &lt;code&gt;+&lt;/code&gt; , but that doesn't look as good).</source>
          <target state="translated">&lt;code&gt;$,&lt;/code&gt; の現在の値（ある場合）は、各LIST項目の間に出力されます。 &lt;code&gt;$\&lt;/code&gt; （存在する場合）の現在の値は、リスト全体が出力された後に出力されます。printはLISTを受け取るため、戻りリストを &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; に渡すサブルーチンを含め、LIST内のすべてがリストコンテキストで評価されます。対応する右括弧でprintへの引数を終了させたい場合を除き、printキーワードの後に​​左括弧を付けないように注意してください。すべての引数を括弧で囲みます（または &lt;code&gt;+&lt;/code&gt; を挿入しますが、見栄えがよくありません）。</target>
        </trans-unit>
        <trans-unit id="16a7c40e8bbfe13e91d735da741af8520eabede2" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$archname&lt;/code&gt; can be found with this command:</source>
          <target state="translated">&lt;code&gt;$archname&lt;/code&gt; の現在の値は、次のコマンドで確認できます。</target>
        </trans-unit>
        <trans-unit id="db4a25bfed587546962de5c8d6543f967c92521a" translate="yes" xml:space="preserve">
          <source>The current value of the &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; accumulator for &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format()&lt;/a&gt;&lt;/code&gt; lines. A format contains &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; calls that put their result into &lt;code&gt;$^A&lt;/code&gt; . After calling its format, &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; prints out the contents of &lt;code&gt;$^A&lt;/code&gt; and empties. So you never really see the contents of &lt;code&gt;$^A&lt;/code&gt; unless you call &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; yourself and then look at it. See &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; and &lt;a href=&quot;functions/formline&quot;&gt;formline PICTURE,LIST&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format()&lt;/a&gt;&lt;/code&gt; 行の &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; アキュムレータの現在の値。形式には、結果を &lt;code&gt;$^A&lt;/code&gt; 入れる &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; 呼び出しが含まれます。その形式を呼び出した後、 &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;$^A&lt;/code&gt; 内容を出力して空にします。したがって、 &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; を自分で呼び出してそれを調べない限り、 &lt;code&gt;$^A&lt;/code&gt; 内容は実際には表示されません。&lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt;と&lt;a href=&quot;functions/formline&quot;&gt;formline PICTURE、LISTを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ed07dc52d8f87fe5efbcd1795acd592cb2bcdd55" translate="yes" xml:space="preserve">
          <source>The current value of the debugging flags. May be read or set. Like its command-line equivalent, you can use numeric or symbolic values, eg &lt;code&gt;$^D = 10&lt;/code&gt; or &lt;code&gt;$^D = &quot;st&quot;&lt;/code&gt; .</source>
          <target state="translated">デバッグフラグの現在の値。読み取りまたは設定できます。同等のコマンドラインと同様に、数値または記号値を使用できます（例： &lt;code&gt;$^D = 10&lt;/code&gt; または &lt;code&gt;$^D = &quot;st&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="761048a9f6779920117c38b6975281ec2824cbaa" translate="yes" xml:space="preserve">
          <source>The current value of the flag associated with the &lt;b&gt;-c&lt;/b&gt; switch. Mainly of use with &lt;b&gt;-MO=...&lt;/b&gt; to allow code to alter its behavior when being compiled, such as for example to &lt;code&gt;AUTOLOAD&lt;/code&gt; at compile time rather than normal, deferred loading. Setting &lt;code&gt;$^C = 1&lt;/code&gt; is similar to calling &lt;code&gt;B::minus_c&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;-c&lt;/b&gt;スイッチに関連付けられているフラグの現在の値。主に&lt;b&gt;-MO = ...&lt;/b&gt;と共に使用して、コンパイル時にコードの動作を変更できるようにします&lt;b&gt;。&lt;/b&gt;たとえば、通常の遅延ロードではなく、コンパイル時に &lt;code&gt;AUTOLOAD&lt;/code&gt; を実行します。 &lt;code&gt;$^C = 1&lt;/code&gt; 設定は、 &lt;code&gt;B::minus_c&lt;/code&gt; 呼び出しに似ています。</target>
        </trans-unit>
        <trans-unit id="5468ce0ac69ee02e09a591df294df02b8e8e00dd" translate="yes" xml:space="preserve">
          <source>The current value of the inplace-edit extension. Use &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to disable inplace editing.</source>
          <target state="translated">インプレース編集拡張機能の現在の値。インプレース編集を無効にするには、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ab0d30902e8f62034444f0c46f34be59caec65d2" translate="yes" xml:space="preserve">
          <source>The current value of the regex debugging flags. Set to 0 for no debug output even when the &lt;code&gt;re 'debug'&lt;/code&gt; module is loaded. See &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt; for details.</source>
          <target state="translated">正規表現デバッグフラグの現在の値。 &lt;code&gt;re 'debug'&lt;/code&gt; モジュールがロードされている場合でも、デバッグ出力がない場合は0に設定します。詳細については、&lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a22922d7a166dbc35ec6d0a0c534fd11892caf1b" translate="yes" xml:space="preserve">
          <source>The current value of the warning switch, initially true if &lt;b&gt;-w&lt;/b&gt; was used, false otherwise, but directly modifiable.</source>
          <target state="translated">警告スイッチの現在の値。最初は&lt;b&gt;-w&lt;/b&gt;が使用された場合はtrue 、それ以外の場合はfalseですが、直接変更できます。</target>
        </trans-unit>
        <trans-unit id="434ca8d76bd8ecc27a064789f98b19395ab4f212" translate="yes" xml:space="preserve">
          <source>The current version of the standards for &lt;code&gt;&lt;a href=&quot;functions/atan2&quot;&gt;atan2()&lt;/a&gt;&lt;/code&gt; is available at &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&quot;&gt;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/atan2&quot;&gt;atan2()&lt;/a&gt;&lt;/code&gt; の標準の現在のバージョンは、&lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&quot;&gt;http: &lt;/a&gt;//www.opengroup.org/onlinepubs/009695399/functions/atan2.htmlで入手できます。</target>
        </trans-unit>
        <trans-unit id="6af70deb3b449e89c48e84135fbdeb7d79f07a9c" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/ansicolor/&quot;&gt;http://www.eyrie.org/~eagle/software/ansicolor/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このモジュールの現在のバージョンは、常に&lt;a href=&quot;http://www.eyrie.org/~eagle/software/ansicolor/&quot;&gt;http://www.eyrie.org/~eagle/software/ansicolor/の&lt;/a&gt; Webサイトから入手できます。5.6.0以降、Perlコアディストリビューションにも含まれています。</target>
        </trans-unit>
        <trans-unit id="b31c3cebc8faae4e8a4925e48535264d89073d95" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;.</source>
          <target state="translated">このモジュールの現在のバージョンは、常にWebサイト&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="f5a8854edfd01b7a5e559e1a5294ccbba9d0afe6" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このモジュールの現在のバージョンは、常にWebサイト&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;から入手できます。5.6.0以降、Perlコアディストリビューションにも含まれています。</target>
        </trans-unit>
        <trans-unit id="c47cd4fd8d9bd245ee61848360efac4088607cb6" translate="yes" xml:space="preserve">
          <source>The current version of this script is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このスクリプトの現在のバージョンは、&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http：//www.eyrie.org/~eagle/software/podlators/の&lt;/a&gt; Webサイトから常に入手できます。5.6.0以降、Perlコアディストリビューションにも含まれています。</target>
        </trans-unit>
        <trans-unit id="9d8fe5626c6979a9718f106c0652b7d905296f64" translate="yes" xml:space="preserve">
          <source>The current version was written by Graham Barr.</source>
          <target state="translated">現在のバージョンはグラハム・バー氏が執筆しています。</target>
        </trans-unit>
        <trans-unit id="7c32f08e82229236d88693ec9eaad5ec8a635209" translate="yes" xml:space="preserve">
          <source>The current working directory of the program is</source>
          <target state="translated">プログラムの現在の作業ディレクトリは</target>
        </trans-unit>
        <trans-unit id="588f5e820c106e9822f858102bdf0e7ae9b574c7" translate="yes" xml:space="preserve">
          <source>The customary Perl approach for processing all the lines in a file is to do so one line at a time:</source>
          <target state="translated">ファイル内のすべての行を処理するためのPerlの慣習的なアプローチは、一度に1行ずつ処理することです。</target>
        </trans-unit>
        <trans-unit id="a4504c4a63cdd557da723133c8d2b75666dc8630" translate="yes" xml:space="preserve">
          <source>The cwd() is the most natural form for the current architecture. For most systems it is identical to `pwd` (but without the trailing line terminator).</source>
          <target state="translated">cwd()は現在のアーキテクチャでは最も自然な形である。ほとんどのシステムでは `pwd` と同じである (ただし、末尾の行の終端がない)。</target>
        </trans-unit>
        <trans-unit id="40c9ebfbdf9a557c5ad182c1d60f03fd99fa74ef" translate="yes" xml:space="preserve">
          <source>The data argument passes in the value (if any) associated with the attribute. For example, if &lt;code&gt;&amp;amp;foo&lt;/code&gt; had been declared:</source>
          <target state="translated">data引数は、属性に関連付けられた値（存在する場合）を渡します。たとえば、 &lt;code&gt;&amp;amp;foo&lt;/code&gt; が宣言されている場合：</target>
        </trans-unit>
        <trans-unit id="4057a2800ea2edef8acd376fce4a738947ca16f2" translate="yes" xml:space="preserve">
          <source>The data can be aggregated into obvious structures, especially if there's a large amount of data in each aggregate.</source>
          <target state="translated">特に、各集合体に大量のデータがある場合には、明らかな構造に集合させることができる。</target>
        </trans-unit>
        <trans-unit id="f1737bbb402e005395886a66a62fefd166798f8a" translate="yes" xml:space="preserve">
          <source>The data is stored as a list of values from the time and times functions:</source>
          <target state="translated">データは、時間と時間の関数から値のリストとして保存されます。</target>
        </trans-unit>
        <trans-unit id="083ecdb4eb83b1283f9d7370b6905eb300e214e7" translate="yes" xml:space="preserve">
          <source>The data may be retrieved using the &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; function if the underlying type of the byte stream is known.</source>
          <target state="translated">バイトストリームの基になるタイプがわかっている場合は、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 関数を使用してデータを取得できます。</target>
        </trans-unit>
        <trans-unit id="9bb2c0f943e4592858ab2d05373119174b2d2dda" translate="yes" xml:space="preserve">
          <source>The data was added as a Unicode string and when writing it out to disk, the &lt;code&gt;:utf8&lt;/code&gt; line discipline wasn't set by &lt;code&gt;Archive::Tar&lt;/code&gt; , so Perl tried to convert the string to ISO-8859 and failed. The written file now contains garbage.</source>
          <target state="translated">データはUnicode文字列として追加され、ディスクに書き込むときに &lt;code&gt;:utf8&lt;/code&gt; 行の規律が &lt;code&gt;Archive::Tar&lt;/code&gt; によって設定されなかったため、Perlは文字列をISO-8859に変換しようとして失敗しました。書き込まれたファイルにはゴミが含まれています。</target>
        </trans-unit>
        <trans-unit id="93ccb288f67ba8fe0c8510721b3e70886d45432a" translate="yes" xml:space="preserve">
          <source>The date and day names in dates formatted by &lt;code&gt;strftime()&lt;/code&gt; could be manipulated to advantage by a malicious user able to subvert the &lt;code&gt;LC_DATE&lt;/code&gt; locale. (&quot;Look--it says I wasn't in the building on Sunday.&quot;)</source>
          <target state="translated">&lt;code&gt;strftime()&lt;/code&gt; でフォーマットされた日付の日付と曜日の名前は、 &lt;code&gt;LC_DATE&lt;/code&gt; ロケールを破壊できる悪意のあるユーザーによって操作される可能性があります。（「見てください、私は日曜日に建物にいなかったと言っています。」）</target>
        </trans-unit>
        <trans-unit id="c40b16f78ce75cc859be91a0613f27d3f68c2364" translate="yes" xml:space="preserve">
          <source>The day of the year is in the list returned by the &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; function. Without an argument &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; uses the current time.</source>
          <target state="translated">年間通算日は、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; 関数によって返されるリストに含まれています。引数がない場合、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; は現在の時刻を使用します。</target>
        </trans-unit>
        <trans-unit id="32d7e957f2b60e8e8af1a45f78007f3a710223c2" translate="yes" xml:space="preserve">
          <source>The days of just flinging strings around are over. It's well established that modern programs need to be capable of communicating funny accented letters, and things like euro symbols. This means that programmers need new habits. It's easy to program Unicode capable software, but it does require discipline to do it right.</source>
          <target state="translated">ただ文字列を弄るだけの時代は終わりました。現代のプログラムには、面白いアクセントのある文字やユーロ記号のようなものを伝える能力が必要であることは、十分に確立されています。これは、プログラマには新しい習慣が必要だということを意味します。Unicode対応のソフトウェアをプログラムするのは簡単ですが、それを正しく行うには規律が必要です。</target>
        </trans-unit>
        <trans-unit id="7d9856be0d4d4aa47742843ac8ee15803c0a6dbf" translate="yes" xml:space="preserve">
          <source>The debugger does not currently work in conjunction with the &lt;b&gt;-W&lt;/b&gt; command-line switch, because it itself is not free of warnings.</source>
          <target state="translated">デバッガ自体は警告がないため、現在&lt;b&gt;-W&lt;/b&gt;コマンドラインスイッチと連動していません。</target>
        </trans-unit>
        <trans-unit id="bff20683f233c3b1a43e85dddcc26c68e9457e08" translate="yes" xml:space="preserve">
          <source>The debugger has numerous options settable using the &lt;code&gt;o&lt;/code&gt; command, either interactively or from the environment or an rc file. (./.perldb or ~/.perldb under Unix.)</source>
          <target state="translated">デバッガーには、対話式に、または環境から、あるいはrcファイルから、 &lt;code&gt;o&lt;/code&gt; コマンドを使用して設定可能な多数のオプションがあります。（UNIXでは./.perldbまたは〜/ .perldb。）</target>
        </trans-unit>
        <trans-unit id="2b8f02d76c62b5ac783a580e7846d6536aa86d85" translate="yes" xml:space="preserve">
          <source>The debugger probably contains enough configuration hooks that you won't ever have to modify it yourself. You may change the behaviour of the debugger from within the debugger using its &lt;code&gt;o&lt;/code&gt; command, from the command line via the &lt;code&gt;PERLDB_OPTS&lt;/code&gt; environment variable, and from customization files.</source>
          <target state="translated">デバッガにはおそらく、自分で変更する必要のない十分な構成フックが含まれています。デバッガーの動作は、デバッガー内の &lt;code&gt;o&lt;/code&gt; コマンドを使用して、コマンドラインから &lt;code&gt;PERLDB_OPTS&lt;/code&gt; 環境変数を介して、およびカスタマイズファイルから変更できます。</target>
        </trans-unit>
        <trans-unit id="24bc00b2a7165b041b9ffd101df7fc63fd2218dd" translate="yes" xml:space="preserve">
          <source>The debugger prompt is something like</source>
          <target state="translated">デバッガのプロンプトは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f8e855d0dba7087b2dc163f59ea22e7610600301" translate="yes" xml:space="preserve">
          <source>The debugging output at compile time looks like this:</source>
          <target state="translated">コンパイル時のデバッグ出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="5cc26823ddc27c25d44117d4b49405e558f3683c" translate="yes" xml:space="preserve">
          <source>The declared variable is not introduced (is not visible) until after the current statement. Thus,</source>
          <target state="translated">宣言された変数は、現在の文の後まで導入されません(見えません)。したがって</target>
        </trans-unit>
        <trans-unit id="9ae51c467cb04a1b525475d0b1964978fbf97d39" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;:perlio&lt;/code&gt; layer retries &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; as described above; interrupted &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; calls will always be retried.</source>
          <target state="translated">デフォルトの &lt;code&gt;:perlio&lt;/code&gt; レイヤー &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 、上記のようにread、 &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; を再試行します。中断された &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; 呼び出しは常に再試行されます。</target>
        </trans-unit>
        <trans-unit id="7af57631245798d230b9a42590aed5504edc7411" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;TIEHASH&lt;/code&gt; method stores &quot;extra&quot; arguments to tie() starting from offset 1 in the array referenced by &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt;; this is the same storage algorithm as in TIEHASH subroutine above. Hence, a typical package inheriting from &lt;b&gt;Tie::ExtraHash&lt;/b&gt; does not need to overwrite this method.</source>
          <target state="translated">デフォルトの &lt;code&gt;TIEHASH&lt;/code&gt; メソッドは、 &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt; によって参照される配列のオフセット1から始まるtie（）への「追加の」引数を格納します。これは、上記のTIEHASHサブルーチンと同じストレージアルゴリズムです。したがって、&lt;b&gt;Tie :: ExtraHashを&lt;/b&gt;継承する一般的なパッケージは、このメソッドを上書きする必要はありません。</target>
        </trans-unit>
        <trans-unit id="8bacf1d67275db56db4c207815d6942a42814176" translate="yes" xml:space="preserve">
          <source>The default behavior is restored with the &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; locale&lt;/code&gt; pragma, or upon reaching the end of the block enclosing &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; . Note that &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; calls may be nested, and that what is in effect within an inner scope will revert to the outer scope's rules at the end of the inner scope.</source>
          <target state="translated">デフォルトの動作は、 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; locale&lt;/code&gt; プラグマを使用して、または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; を囲むブロックの終わりに到達すると復元されます。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 呼び出しの&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;はネストされている場合があり、内部スコープ内で有効なものは内部スコープの最後で外部スコープのルールに戻ることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ebc252c3cc028e1614732f1daa492845981dc49a" translate="yes" xml:space="preserve">
          <source>The default behavior is to allow either VMS or Unix syntax on input and to return VMS syntax on output unless Unix syntax has been explicitly requested via the &lt;code&gt;DECC$FILENAME_UNIX_REPORT&lt;/code&gt; CRTL feature.</source>
          <target state="translated">デフォルトの動作では、UNIX構文が &lt;code&gt;DECC$FILENAME_UNIX_REPORT&lt;/code&gt; CRTL機能を介して明示的に要求されていない限り、入力でVMSまたはUnix構文を許可し、出力でVMS構文を返します。</target>
        </trans-unit>
        <trans-unit id="6dccc7bf2df4ee545fc6ed04ddf3f01c1358bdf3" translate="yes" xml:space="preserve">
          <source>The default behaviour of file test operators is to use the simple mode bits as returned by the stat() family of system calls. However, many operating systems have additional features to define more complex access rights, for example ACLs (Access Control Lists). For such environments, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest&lt;/code&gt; may help the permission operators to return results more consistent with other tools.</source>
          <target state="translated">ファイルテストオペレーターのデフォルトの動作は、システムコールのstat（）ファミリーによって返されるシンプルモードビットを使用することです。ただし、多くのオペレーティングシステムには、ACL（アクセス制御リスト）など、より複雑なアクセス権を定義するための追加機能があります。そのような環境で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest&lt;/code&gt; すると、許可オペレーターが他のツールとより一貫した結果を返すのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1e443bdcb2163a4573139a1dc139dfc380443bd8" translate="yes" xml:space="preserve">
          <source>The default blacklist is [qw|ftp|], as &lt;code&gt;/bin/ftp&lt;/code&gt; is rather unreliable.</source>
          <target state="translated">&lt;code&gt;/bin/ftp&lt;/code&gt; はかなり信頼できないため、デフォルトのブラックリストは[qw | ftp |] です。</target>
        </trans-unit>
        <trans-unit id="ed0767b7e5643475189138ab836319b55629d878" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">デフォルトのバッファサイズは4096です。</target>
        </trans-unit>
        <trans-unit id="8bc00fd19b1a0edf6b2c0d08377dcc6685c37357" translate="yes" xml:space="preserve">
          <source>The default can be overridden by setting the environment variable PERLIO to a space separated list of layers (&lt;code&gt;unix&lt;/code&gt; or platform low level layer is always pushed first).</source>
          <target state="translated">環境変数PERLIOをスペースで区切られたレイヤーのリストに設定することにより、デフォルトを上書きできます（ &lt;code&gt;unix&lt;/code&gt; またはプラットフォームの低レベルレイヤーが常に最初にプッシュされます）。</target>
        </trans-unit>
        <trans-unit id="34b91bbcac281ec343e20574aee63c504ba37c87" translate="yes" xml:space="preserve">
          <source>The default command shells on DOS descendant operating systems (such as they are) usually do not expand wildcard arguments supplied to programs. They consider it the application's job to handle that. This is commonly achieved by linking the application (in our case, perl) with startup code that the C runtime libraries usually provide. However, doing that results in incompatible perl versions (since the behavior of the argv expansion code differs depending on the compiler, and it is even buggy on some compilers). Besides, it may be a source of frustration if you use such a perl binary with an alternate shell that *does* expand wildcards.</source>
          <target state="translated">DOS の子孫オペレーティングシステム上のデフォルトのコマンドシェル (そのようなもの)は、通常、プログラムに与えられたワイルドカード引数を展開しません。彼らはそれを処理するのがアプリケーションの仕事だと考えています。これは一般的に、アプリケーション(私たちの場合はperl)をCランタイムライブラリが通常提供するスタートアップコードとリンクすることで達成されます。しかし、これを行うと、互換性のない perl のバージョンになってしまいます (argv 拡張コードの動作はコンパイラによって異なり、コンパイラによってはバグることさえあります)。さらに、このような perl バイナリをワイルドカードを展開する代替シェルで使うと、フラストレーションの原因になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="83afe3e15499ebffd14384524a4838c21ad9ac57" translate="yes" xml:space="preserve">
          <source>The default delivery policy of signals changed in Perl v5.8.0 from immediate (also known as &quot;unsafe&quot;) to deferred, also known as &quot;safe signals&quot;. See &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for more information.</source>
          <target state="translated">シグナルのデフォルトの配信ポリシーは、Perl v5.8.0で即時（「安全でない」とも呼ばれる）から遅延された（「安全なシグナル」とも呼ばれる）に変更されました。詳細については、&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f60de20ca32864441bb2ece16480b765adbc68d5" translate="yes" xml:space="preserve">
          <source>The default filename translation is roughly &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr|/.|./|;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">デフォルトのファイル名変換は、おおよそ &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr|/.|./|;&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="141616a08e099cc503e54695ac44f2c439029e1f" translate="yes" xml:space="preserve">
          <source>The default for this option is off.</source>
          <target state="translated">このオプションのデフォルトはオフです。</target>
        </trans-unit>
        <trans-unit id="841e53532f4d336433d317d532f99affc692102b" translate="yes" xml:space="preserve">
          <source>The default hash function has been modified with the intention of making it harder to infer the hash seed.</source>
          <target state="translated">デフォルトのハッシュ関数は、ハッシュシードを推論しにくくする意図で修正されています。</target>
        </trans-unit>
        <trans-unit id="917b792910290b9f104f9e9bb1c1c376f6e62a1b" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
          <target state="translated">デフォルトの実装では何もしません。</target>
        </trans-unit>
        <trans-unit id="ba4a564c2fb984db1b9ac70f6b103f10fd3f2c07" translate="yes" xml:space="preserve">
          <source>The default in Perl 5.8.0 and later is to automatically use the &lt;code&gt;:perlio&lt;/code&gt; layer.</source>
          <target state="translated">Perl 5.8.0以降のデフォルトでは、 &lt;code&gt;:perlio&lt;/code&gt; レイヤーが自動的に使用されます。</target>
        </trans-unit>
        <trans-unit id="c034d8cea0ccefbe74b407c47763a2d7febf85bd" translate="yes" xml:space="preserve">
          <source>The default input &lt;b&gt;stream&lt;/b&gt; for your program, which if possible shouldn&amp;rsquo;t care where its data is coming from. Represented within a Perl program by the &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDIN&lt;/code&gt; .</source>
          <target state="translated">プログラムのデフォルトの入力&lt;b&gt;ストリーム。&lt;/b&gt;可能であれば、データの送信元を気にする必要はありません。Perlプログラム内では、&lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDIN&lt;/code&gt; によって&lt;b&gt;表され&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c65b453abcd65763f1788a5bfac88b6cf8e06702" translate="yes" xml:space="preserve">
          <source>The default input and pattern-searching space. The following pairs are equivalent:</source>
          <target state="translated">デフォルトの入力とパターン探索空間。以下のペアは等価です。</target>
        </trans-unit>
        <trans-unit id="cea52ce10c001ee673712587e9b895266781fd26" translate="yes" xml:space="preserve">
          <source>The default installation directory of Perl under PASE is /QOpenSys/perl. This can be modified if needed with Configure parameter -Dprefix=/some/dir.</source>
          <target state="translated">PASEでのPerlのデフォルトのインストールディレクトリは/QOpenSys/perlです。これは必要に応じて Configure パラメータ -Dprefix=/some/dir で変更することができます。</target>
        </trans-unit>
        <trans-unit id="c02bd4590e22b3fdced3d71cd3c3281cc1a0a660" translate="yes" xml:space="preserve">
          <source>The default installation location for this release uses the traditional UNIX directory layout under /usr/local. This is the recommended location for most users, and will leave the Apple-supplied Perl and its modules undisturbed.</source>
          <target state="translated">このリリースのデフォルトのインストール場所は、/usr/local 以下の伝統的な UNIX ディレクトリレイアウトを使用しています。これはほとんどのユーザに推奨されている場所であり、Appleが提供するPerlとそのモジュールは邪魔にならないでしょう。</target>
        </trans-unit>
        <trans-unit id="2cf27b908bba58a1adbe27495a165db5ad0a8770" translate="yes" xml:space="preserve">
          <source>The default is 0.</source>
          <target state="translated">デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="b6e007f998a46a63459c07f21e8e579bcd3ddb9e" translate="yes" xml:space="preserve">
          <source>The default is 0;</source>
          <target state="translated">デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="2fede1b14731afaa7b9b9368ecc641901f9fa509" translate="yes" xml:space="preserve">
          <source>The default is 1 when &lt;a href=&quot;../warnings&quot;&gt;warnings&lt;/a&gt; are enabled, 0 otherwise;</source>
          <target state="translated">&lt;a href=&quot;../warnings&quot;&gt;警告&lt;/a&gt;が有効な場合のデフォルトは1、それ以外の場合は0です。</target>
        </trans-unit>
        <trans-unit id="515832f976590cbb3c71bc0d7d3d0a86a107732b" translate="yes" xml:space="preserve">
          <source>The default is 1.</source>
          <target state="translated">デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="895305ba9904fa755bf8e86c105e9e415a01803b" translate="yes" xml:space="preserve">
          <source>The default is 15 seconds. If you set this value to 0, no timeout will occur, but this is not recommended.</source>
          <target state="translated">デフォルトは15秒です。この値を 0 に設定するとタイムアウトは発生しませんが、これはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="df47c42104d45d72a320a61c09a39d1b3d97871e" translate="yes" xml:space="preserve">
          <source>The default is 1;</source>
          <target state="translated">デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="f462ad28c3fd0db899a9c6ebf2e36d1b531777fa" translate="yes" xml:space="preserve">
          <source>The default is 4096.</source>
          <target state="translated">デフォルトは4096です。</target>
        </trans-unit>
        <trans-unit id="32bc975de1e1a4635ed927b65955622d6412a442" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;0&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9b05c3b862baf5dbb3b6628baf4b68b1570abdb4" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;1&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1e7ce922e57105bce0e95e91cfca276a6a4bf1ac" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;1&lt;/code&gt; for the root user and &lt;code&gt;0&lt;/code&gt; for normal users.</source>
          <target state="translated">デフォルトは、rootユーザーの場合は &lt;code&gt;1&lt;/code&gt; 、通常のユーザーの場合は &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bbf2b1ea0900573472d5b071e3de19f7567ee6bd" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b961dbd8be6b25800dc4b37b67546efccad28f8e" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dc194b0254a7cf1688815756a4f2837510b9b267" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;Z_DEFAULT_STRATEGY&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;Z_DEFAULT_STRATEGY&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fb390eebfd5c04071c6f9ae432a01e30ec460a80" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;pod&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;pod&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3d0a0f1ca8eef2f6fbf6f39dbd7668ad5fbc612a" translate="yes" xml:space="preserve">
          <source>The default is Z_DEFAULT_COMPRESSION.</source>
          <target state="translated">デフォルトはZ_DEFAULT_COMPRESSIONです。</target>
        </trans-unit>
        <trans-unit id="ae93ce6388b29eb983caf1def75b439a9873a0b9" translate="yes" xml:space="preserve">
          <source>The default is Z_DEFAULT_STRATEGY.</source>
          <target state="translated">デフォルトは Z_DEFAULT_STRATEGY です。</target>
        </trans-unit>
        <trans-unit id="b30329767ad59c2dc5630061d1ce79106ced2716" translate="yes" xml:space="preserve">
          <source>The default is no dictionary.</source>
          <target state="translated">デフォルトでは辞書はありません。</target>
        </trans-unit>
        <trans-unit id="0eaff3b0b1b9eb661e7fc7bd656a07d77ba2a1ef" translate="yes" xml:space="preserve">
          <source>The default is not to cuddle.</source>
          <target state="translated">抱っこはしないのがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="9c65dc0d3752b5562d0e04006d66de6352709010" translate="yes" xml:space="preserve">
          <source>The default is to try &lt;code&gt;native&lt;/code&gt; , &lt;code&gt;tcp&lt;/code&gt; , &lt;code&gt;udp&lt;/code&gt; , &lt;code&gt;unix&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt; , &lt;code&gt;console&lt;/code&gt; . Under systems with the Win32 API, &lt;code&gt;eventlog&lt;/code&gt; will be added as the first mechanism to try if &lt;code&gt;Win32::EventLog&lt;/code&gt; is available.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;native&lt;/code&gt; 、 &lt;code&gt;tcp&lt;/code&gt; 、 &lt;code&gt;udp&lt;/code&gt; 、 &lt;code&gt;unix&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;stream&lt;/code&gt; 、 &lt;code&gt;console&lt;/code&gt; を試します。Win32 APIを備えたシステムでは、 &lt;code&gt;Win32::EventLog&lt;/code&gt; が利用可能かどうかを試す最初のメカニズムとして &lt;code&gt;eventlog&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="69bb3e1a426b5cc38eac62d98ea857e63ed9b5dd" translate="yes" xml:space="preserve">
          <source>The default iterator variable in a &lt;code&gt;foreach&lt;/code&gt; loop if no other variable is supplied.</source>
          <target state="translated">他の変数が指定されていない場合の &lt;code&gt;foreach&lt;/code&gt; ループのデフォルトのイテレーター変数。</target>
        </trans-unit>
        <trans-unit id="375ddf0ab7799023484d02f8a221ca6afd3b2054" translate="yes" xml:space="preserve">
          <source>The default memory limit is 2Mib. You can adjust the maximum read cache size by supplying the &lt;code&gt;memory&lt;/code&gt; option. The argument is the desired cache size, in bytes.</source>
          <target state="translated">デフォルトのメモリ制限は2Mibです。 &lt;code&gt;memory&lt;/code&gt; オプションを指定することで、最大読み取りキャッシュサイズを調整できます。引数は、必要なキャッシュサイズ（バイト単位）です。</target>
        </trans-unit>
        <trans-unit id="97d617432e38273ff2337188090afe707d321e91" translate="yes" xml:space="preserve">
          <source>The default method is ZIP_CM_DEFLATE.</source>
          <target state="translated">デフォルトの方法は、ZIP_CM_DEFLATEです。</target>
        </trans-unit>
        <trans-unit id="d06faea5104288d8b0b633dc0567b8b191f0df74" translate="yes" xml:space="preserve">
          <source>The default name of the new configuration file is &quot;libnet.cfg&quot;, and by default it is written to the current directory, unless otherwise specified using the -o option, &lt;code&gt;-o newfile&lt;/code&gt; .</source>
          <target state="translated">新しい構成ファイルのデフォルト名は「libnet.cfg」であり、-oオプション &lt;code&gt;-o newfile&lt;/code&gt; を使用して特に指定されていない限り、デフォルトで現在のディレクトリに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="2e5074809750e6c620d635552cb416989d3d15b2" translate="yes" xml:space="preserve">
          <source>The default name of the old configuration file is by default &quot;libnet.cfg&quot;, unless otherwise specified using the -i option, &lt;code&gt;-i oldfile&lt;/code&gt; , and it is searched first from the current directory, and then from your module path.</source>
          <target state="translated">古い構成ファイルのデフォルト名は、デフォルトで「libnet.cfg」です。ただし、-iオプション &lt;code&gt;-i oldfile&lt;/code&gt; を使用して特に指定されていない限り、最初に現在のディレクトリから、次にモジュールパスから検索されます。</target>
        </trans-unit>
        <trans-unit id="5eb6185afb472dae00827acf41154ba83b345446" translate="yes" xml:space="preserve">
          <source>The default normalizer just concatenates the arguments with character 28 in between. (In ASCII, this is called FS or control-\.) This always works correctly for functions with only one string argument, and also when the arguments never contain character 28. However, it can confuse certain argument lists:</source>
          <target state="translated">デフォルトのノーマライザは、引数の間に文字28を挟んで連結するだけです。(ASCIIでは、これはFSまたはcontrol-\と呼ばれています。)これは、文字列の引数が1つだけの関数では常に正しく動作し、また、引数に文字28が含まれない場合にも正しく動作します。しかし、これは特定の引数リストを混乱させる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b39e82de8afe051a851d53770ae84cf3c68d41cb" translate="yes" xml:space="preserve">
          <source>The default normalizer will turn this into something like &lt;code&gt;&quot;13\034ARRAY(0x436c1f)&quot;&lt;/code&gt; . That would be all right, except that a subsequent array of numbers might be stored at a different location even though it contains the same data. If this happens, &lt;code&gt;Memoize&lt;/code&gt; will think that the arguments are different, even though they are equivalent. In this case, a normalizer like this is appropriate:</source>
          <target state="translated">デフォルトのノーマライザはこれを &lt;code&gt;&quot;13\034ARRAY(0x436c1f)&quot;&lt;/code&gt; ようなものに変えます。同じデータが含まれていても、後続の数値の配列が別の場所に格納される可能性があることを除いて、それで問題ありません。これが発生した場合、 &lt;code&gt;Memoize&lt;/code&gt; は、たとえ同等であるとしても、引数が異なると見なします。この場合、次のようなノーマライザが適切です。</target>
        </trans-unit>
        <trans-unit id="e5d60aed408340ddef56e731c14beba1f193a756" translate="yes" xml:space="preserve">
          <source>The default of building Perl statically may cause problems with complex applications like Tk: in that case consider building shared Perl</source>
          <target state="translated">Perl を静的にビルドするデフォルトの方法は、Tk のような複雑なアプリケーションで問題が発生する可能性があります:その場合は、共有 Perl のビルドを検討してください。</target>
        </trans-unit>
        <trans-unit id="ac5f6413f6edd9db793b85ce42ea2d862be3c9a0" translate="yes" xml:space="preserve">
          <source>The default operator mask for a newly created compartment is the ':default' optag.</source>
          <target state="translated">新しく作成されたコンパートメントのデフォルトの演算子マスクは ':default' オプタグです。</target>
        </trans-unit>
        <trans-unit id="cd7a35f6ae99c836f5d425b35999dec2510b2218" translate="yes" xml:space="preserve">
          <source>The default options gathered by Configure with the assistance of</source>
          <target state="translated">の支援を受けて Configure が収集したデフォルトのオプションは、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="340bacd1cab82a806d284b26719b4d768c188a8d" translate="yes" xml:space="preserve">
          <source>The default output &lt;b&gt;stream&lt;/b&gt; for nasty remarks that don&amp;rsquo;t belong in &lt;b&gt;standard output&lt;/b&gt;. Represented within a Perl program by the output&amp;gt; &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDERR&lt;/code&gt; . You can use this stream explicitly, but the &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; built-ins write to your standard error stream automatically (unless trapped or otherwise intercepted).</source>
          <target state="translated">&lt;b&gt;標準出力に&lt;/b&gt;属さない厄介なコメントのデフォルトの出力&lt;b&gt;ストリーム&lt;/b&gt;。Perlプログラム内では、output&amp;gt; &lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDERR&lt;/code&gt; で表されます。このストリームを明示的に使用できますが、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; ビルトインは、標準のエラーストリームに自動的に書き込みます（トラップまたは他の方法でインターセプトされない限り）。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="aa254ec270a416bb3ac03f5a884b155a435c80cb" translate="yes" xml:space="preserve">
          <source>The default output &lt;b&gt;stream&lt;/b&gt; for your program, which if possible shouldn&amp;rsquo;t care where its data is going. Represented within a Perl program by the &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDOUT&lt;/code&gt; .</source>
          <target state="translated">プログラムのデフォルトの出力&lt;b&gt;ストリーム。&lt;/b&gt;可能であれば、データの送信先を気にする必要はありません。Perlプログラム内では、&lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDOUT&lt;/code&gt; によって&lt;b&gt;表され&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e96d4d616212a6cfd4d2816b5ab3f17c9db66319" translate="yes" xml:space="preserve">
          <source>The default output of self-referential structures can be &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed, but the nested references to &lt;code&gt;$VAR&lt;/code&gt;</source>
          <target state="translated">自己参照構造のデフォルト出力は &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; できますが、 &lt;code&gt;$VAR&lt;/code&gt; へのネストされた参照</target>
        </trans-unit>
        <trans-unit id="a5f2d9e51d87e9b71a9bd992e69d11af3ccda88f" translate="yes" xml:space="preserve">
          <source>The default path for perl binary is /QOpenSys/perl/bin/perl. You'll want to symlink /QOpenSys/usr/bin/perl to this file so you don't have to modify your path.</source>
          <target state="translated">perl バイナリのデフォルトパスは /QOpenSys/perl/bin/perl です。このファイルに /QOpenSys/usr/bin/perl をシンボリックリンクすると、パスを変更する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="c0e7903465e131bba24e8f9fa0f5926ebf1b8dce" translate="yes" xml:space="preserve">
          <source>The default per-thread stack size for different platforms varies significantly, and is almost always far more than is needed for most applications. On Win32, Perl's makefile explicitly sets the default stack to 16 MB; on most other platforms, the system default is used, which again may be much larger than is needed.</source>
          <target state="translated">スレッドごとのデフォルトのスタックサイズはプラットフォームによって大きく異なり、ほとんどの場合、ほとんどのアプリケーショ ンで必要とされるスタックサイズをはるかに超えています。Win32 では、Perl の makefile はデフォルトのスタックサイズを 16 MB に明示的に設定しています。</target>
        </trans-unit>
        <trans-unit id="02fbe3c9bc6d319100d5d82a643c83d45a2aaf27" translate="yes" xml:space="preserve">
          <source>The default per-thread stack size may be set at the start of the application through the use of the environment variable &lt;code&gt;PERL5_ITHREADS_STACK_SIZE&lt;/code&gt; :</source>
          <target state="translated">デフォルトのスレッドごとのスタックサイズは、環境変数 &lt;code&gt;PERL5_ITHREADS_STACK_SIZE&lt;/code&gt; を使用して、アプリケーションの開始時に設定できます。</target>
        </trans-unit>
        <trans-unit id="d17c04396f5d2338f66524479b64e4296e2bc5c4" translate="yes" xml:space="preserve">
          <source>The default perl executable is flexible enough to support most usages. However, one may want something yet more flexible; for example, one may want to find Perl DLL relatively to the location of the EXE file; or one may want to ignore the environment when setting the Perl-library search patch, etc.</source>
          <target state="translated">デフォルトの perl 実行ファイルは、ほとんどの用途をサポートするのに十分な柔軟性を持っています。しかし、もっと柔軟性のあるものが欲しいと思うかもしれません。例えば、Perl DLL を EXE ファイルの場所から相対的に見つけたい、Perl ライブラリ検索パッチを設定するときに環境を無視したいなどです。</target>
        </trans-unit>
        <trans-unit id="7009bdcf386245a7873fc69dc2c48c3bfdcf71d9" translate="yes" xml:space="preserve">
          <source>The default permissions to use if a new file is created. The actual permissions will be modified by the user's umask, so you should probably use 0666 here. (See &lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;.)</source>
          <target state="translated">新しいファイルが作成された場合に使用するデフォルトの権限。実際の権限はユーザーのumaskによって変更されるため、ここではおそらく0666を使用する必要があります。（&lt;a href=&quot;functions/umask&quot;&gt;umaskを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="af672db5716c0b823ab6d08666d2a653d572eae5" translate="yes" xml:space="preserve">
          <source>The default place to put the next value or input record when a &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; operation's result is tested by itself as the sole criterion of a &lt;code&gt;while&lt;/code&gt; test. Outside a &lt;code&gt;while&lt;/code&gt; test, this will not happen.</source>
          <target state="translated">&lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 操作の結果が、 &lt;code&gt;while&lt;/code&gt; テストの唯一の基準として単独でテストされるときに、次の値または入力レコードを配置するデフォルトの場所。外で &lt;code&gt;while&lt;/code&gt; テスト、これは発生しません。</target>
        </trans-unit>
        <trans-unit id="c5df9208ed1f779ba0f9d5864d277d9b22483511" translate="yes" xml:space="preserve">
          <source>The default rendering is top-down, so they're not in execution order. This form reflects the way the stack is used to parse and evaluate expressions; the add operates on the two terms below it in the tree.</source>
          <target state="translated">デフォルトのレンダリングはトップダウンなので、実行順ではありません。この形式は、スタックが式の解析と評価に使用される方法を反映しています。</target>
        </trans-unit>
        <trans-unit id="2fc20ab6a2146e41cd4461ac23c56be7f29f5c25" translate="yes" xml:space="preserve">
          <source>The default rounding mode is 'even'. By using &lt;code&gt;Math::BigFloat-&amp;gt;round_mode($round_mode);&lt;/code&gt; you can get and set the default mode for subsequent rounding. The usage of &lt;code&gt;$Math::BigFloat::$round_mode&lt;/code&gt; is no longer supported. The second parameter to the round functions then overrides the default temporarily.</source>
          <target state="translated">デフォルトの丸めモードは「偶数」です。使用することで &lt;code&gt;Math::BigFloat-&amp;gt;round_mode($round_mode);&lt;/code&gt; 後続の丸めのデフォルトモードを取得および設定できます。使用 &lt;code&gt;$Math::BigFloat::$round_mode&lt;/code&gt; サポートされなくなりました。ラウンド関数の2番目のパラメーターは、デフォルトを一時的にオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="0c0082ed0ee0f68ac7247af3405f6e36532a7d14" translate="yes" xml:space="preserve">
          <source>The default set of layers should give acceptable results on all platforms</source>
          <target state="translated">デフォルトのレイヤーのセットは、すべてのプラットフォームで許容できる結果を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="98f212f2163021f600388dfedb85757788b2ee77" translate="yes" xml:space="preserve">
          <source>The default sort function is cmp, string comparison, which would sort &lt;code&gt;(1, 2, 10)&lt;/code&gt; into &lt;code&gt;(1, 10, 2)&lt;/code&gt; . &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; , used above, is the numerical comparison operator.</source>
          <target state="translated">デフォルトのソート関数は文字列比較であるcmpで、（1、2、10 &lt;code&gt;(1, 2, 10)&lt;/code&gt; を &lt;code&gt;(1, 10, 2)&lt;/code&gt; 1、10、2）にソートします。上記で使用されている &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; は数値比較演算子です。</target>
        </trans-unit>
        <trans-unit id="baa9ec2a72f812d2fff5978a7051ec1d9ead2a46" translate="yes" xml:space="preserve">
          <source>The default subscript separator is &quot;\034&quot;, the same as SUBSEP in &lt;b&gt;awk&lt;/b&gt;.</source>
          <target state="translated">デフォルトの添え字セパレータは「\ 034」で、これは&lt;b&gt;awkの&lt;/b&gt; SUBSEPと同じです。</target>
        </trans-unit>
        <trans-unit id="fedbef30ad12f7c78358c3195161f7bf65ed2265" translate="yes" xml:space="preserve">
          <source>The default text formatter is &lt;a href=&quot;text&quot;&gt;Pod::Text&lt;/a&gt;. The base class for Pod::Usage can be defined by pre-setting &lt;code&gt;$Pod::Usage::Formatter&lt;/code&gt;</source>
          <target state="translated">デフォルトのテキストフォーマッタは&lt;a href=&quot;text&quot;&gt;Pod :: Text&lt;/a&gt;です。Pod :: Usageの基本クラスは、 &lt;code&gt;$Pod::Usage::Formatter&lt;/code&gt; 事前設定することで定義できます。</target>
        </trans-unit>
        <trans-unit id="2eca7e39567cc3a4e38f07441f8e4f7046f9b14f" translate="yes" xml:space="preserve">
          <source>The default type for the constants. If not specified &lt;code&gt;IV&lt;/code&gt; is assumed.</source>
          <target state="translated">定数のデフォルトのタイプ。指定しない場合、 &lt;code&gt;IV&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="3a6f652439685a6a403073936eade467faa79602" translate="yes" xml:space="preserve">
          <source>The default typemap in the</source>
          <target state="translated">のデフォルトのタイプマップは</target>
        </trans-unit>
        <trans-unit id="82f3cb0c641077271c3068ea9c85e22ba715cfbb" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;div_scale&lt;/code&gt; is 40.</source>
          <target state="translated">&lt;code&gt;div_scale&lt;/code&gt; のデフォルト値は40です。</target>
        </trans-unit>
        <trans-unit id="609bf4918ead31f720f19323f5cf2348643f6d2e" translate="yes" xml:space="preserve">
          <source>The default value for CCHOME in the makefiles for Visual C++ may not be correct for some versions. Make sure the default exists and is valid.</source>
          <target state="translated">Visual C++の makefile の CCHOME のデフォルト値は、バージョンによっては正しくない場合があります。デフォルトが存在し、有効であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="1f34862d6782defbe2c5b2a0445c8f00de39fa4d" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;XSINTERFACE_FUNC&lt;/code&gt; and &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt; . An INTERFACE keyword with an empty list of functions can be omitted if INTERFACE_MACRO keyword is used.</source>
          <target state="translated">デフォルト値は &lt;code&gt;XSINTERFACE_FUNC&lt;/code&gt; および &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt; です。関数のリストが空のINTERFACEキーワードは、INTERFACE_MACROキーワードが使用されている場合は省略できます。</target>
        </trans-unit>
        <trans-unit id="3ae2f809fd681df4fcb45c0c13d99a0283fc66b8" translate="yes" xml:space="preserve">
          <source>The definition used for complex arguments of atan2() is</source>
          <target state="translated">atan2()の複雑な引数に使われる定義は</target>
        </trans-unit>
        <trans-unit id="6431fb44fb840f90a758f20a67dcf8b7a9374aa9" translate="yes" xml:space="preserve">
          <source>The del_dup() Method</source>
          <target state="translated">del_dup()メソッド</target>
        </trans-unit>
        <trans-unit id="ed1ded41373481d9b3a2afdb892465f6f5d0d39d" translate="yes" xml:space="preserve">
          <source>The delimiter provided to &lt;code&gt;extract_bracketed&lt;/code&gt; was not one of &lt;code&gt;'()[]&amp;lt;&amp;gt;{}'&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; に提供された区切り文字は、 &lt;code&gt;'()[]&amp;lt;&amp;gt;{}'&lt;/code&gt; の 1つではありませんでした。</target>
        </trans-unit>
        <trans-unit id="0e6b6844fe43a8d8ec1aad6ff952638a46635ab3" translate="yes" xml:space="preserve">
          <source>The denizens of makemaker@perl.org.</source>
          <target state="translated">makemaker@perl.org の住人。</target>
        </trans-unit>
        <trans-unit id="d6c12d31655a68b617bd8f8ac7d7b41ffa97d8df" translate="yes" xml:space="preserve">
          <source>The dereferencing cases (as opposed to method-calling cases) are somewhat extended by the experimental &lt;code&gt;postderef&lt;/code&gt; feature. For the details of that feature, consult &lt;a href=&quot;perlref#Postfix-Dereference-Syntax&quot;&gt;Postfix Dereference Syntax in perlref&lt;/a&gt;.</source>
          <target state="translated">（メソッド呼び出しの場合とは対照的に）逆参照の場合は、実験的な &lt;code&gt;postderef&lt;/code&gt; 機能によって多少拡張されます。その機能の詳細については&lt;a href=&quot;perlref#Postfix-Dereference-Syntax&quot;&gt;、perlrefのPostfix Dereference Syntaxを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c06b4b9a1d8e7058531ada60d67614dbcf01dfd0" translate="yes" xml:space="preserve">
          <source>The deserializing hook called on the object during deserialization. But wait: if we're deserializing, there's no object yet... right?</source>
          <target state="translated">デシリアライズ中にオブジェクトに呼び出されるデシリアライズフック。でも待ってください:デシリアライズしていると、まだオブジェクトがないんですよね...?</target>
        </trans-unit>
        <trans-unit id="8a2f99ef5bda346c32f63e70a7361acb83da8b02" translate="yes" xml:space="preserve">
          <source>The design intent is for &lt;code&gt;\d&lt;/code&gt; to exactly match the set of characters that can safely be used with &quot;normal&quot; big-endian positional decimal syntax, where, for example 123 means one 'hundred', plus two 'tens', plus three 'ones'. This positional notation does not necessarily apply to characters that match the other type of &quot;digit&quot;, &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; , and so &lt;code&gt;\d&lt;/code&gt; doesn't match them.</source>
          <target state="translated">設計意図は、 &lt;code&gt;\d&lt;/code&gt; が「通常の」ビッグエンディアン定位置10進構文で安全に使用できる文字セットと完全に一致することです。たとえば、123は、1つの「百」、2つの「十」、および3つの「」を意味します。もの。この位置表記法は、他のタイプの「数字」に一致する文字 &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; に必ずしも適用されるわけではないため、 &lt;code&gt;\d&lt;/code&gt; はそれらに一致しません。</target>
        </trans-unit>
        <trans-unit id="d6ec3b1b57d74d9cf92c20c7537d430a4cb91982" translate="yes" xml:space="preserve">
          <source>The desire of users to express filenames of the form &lt;code&gt;&amp;lt;Foo$Dir&amp;gt;.Bar&lt;/code&gt; on the command line unquoted causes problems, too: &lt;code&gt;``&lt;/code&gt; command output capture has to perform a guessing game. It assumes that a string &lt;code&gt;&amp;lt;[^&amp;lt;&amp;gt;]+\$[^&amp;lt;&amp;gt;]&amp;gt;&lt;/code&gt; is a reference to an environment variable, whereas anything else involving &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; is redirection, and generally manages to be 99% right. Of course, the problem remains that scripts cannot rely on any Unix tools being available, or that any tools found have Unix-like command line arguments.</source>
          <target state="translated">コマンドラインで &lt;code&gt;&amp;lt;Foo$Dir&amp;gt;.Bar&lt;/code&gt; という形式のファイル名を引用符で囲まずに表現したいというユーザーの要望も問題を引き起こします： &lt;code&gt;``&lt;/code&gt; コマンド出力のキャプチャは、推測ゲームを実行する必要があります。文字列 &lt;code&gt;&amp;lt;[^&amp;lt;&amp;gt;]+\$[^&amp;lt;&amp;gt;]&amp;gt;&lt;/code&gt; は環境変数への参照であると想定していますが、 &lt;code&gt;&amp;lt;&lt;/code&gt; または &lt;code&gt;&amp;gt;&lt;/code&gt; が関係するものはすべてリダイレクトであり、通常は99％正しく管理されています。もちろん、問題は、スクリプトが使用可能なUnixツールに依存できないこと、または見つかったツールにUnixライクなコマンドライン引数があることです。</target>
        </trans-unit>
        <trans-unit id="a11af240187e8ce0ea57c0f5d9817fa72798ba59" translate="yes" xml:space="preserve">
          <source>The desired exit status to pass to the &lt;b&gt;exit()&lt;/b&gt; function. This should be an integer, or else the string &quot;NOEXIT&quot; to indicate that control should simply be returned without terminating the invoking process.</source>
          <target state="translated">&lt;b&gt;exit（）&lt;/b&gt;関数に渡す目的の終了ステータス。これは整数である必要があります。それ以外の場合は、文字列 &quot;NOEXIT&quot;を指定して、呼び出しプロセスを終了せずにコントロールを単に返す必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="a47bdc95431692c8deb0f97084523a81a5887de3" translate="yes" xml:space="preserve">
          <source>The desired level of &quot;verboseness&quot; to use when printing the usage message. If the corresponding value is 0, then only the &quot;SYNOPSIS&quot; section of the pod documentation is printed. If the corresponding value is 1, then the &quot;SYNOPSIS&quot; section, along with any section entitled &quot;OPTIONS&quot;, &quot;ARGUMENTS&quot;, or &quot;OPTIONS AND ARGUMENTS&quot; is printed. If the corresponding value is 2 or more then the entire manpage is printed.</source>
          <target state="translated">使用法メッセージを印刷するときに使用する「冗長性」の希望するレベル。対応する値が0の場合、ポッド文書の「SYNOPSIS」セクションのみが印刷される。対応する値が1の場合、「SYNOPSIS」セクションと、「OPTIONS」、「ARGUMENTS」、または「OPTIONS AND ARGUMENTS」と題されたセクションが印刷されます。対応する値が2以上の場合は、マンページ全体が印刷されます。</target>
        </trans-unit>
        <trans-unit id="2b3e64d006f3001c3df4472f5962fd664df30c48" translate="yes" xml:space="preserve">
          <source>The desired level of verbosity to use:</source>
          <target state="translated">使用するために必要な動詞のレベル。</target>
        </trans-unit>
        <trans-unit id="1f8c4d84dbcf0f5f2d69ca16b4ced3235af3fefd" translate="yes" xml:space="preserve">
          <source>The destination for the option must be an array or array reference.</source>
          <target state="translated">オプ シ ョ ンの出力先は、 配列か配列参照である必要があ り ます。</target>
        </trans-unit>
        <trans-unit id="2940ce84da888fbb72c23c514c9cdd4e2c7bab4a" translate="yes" xml:space="preserve">
          <source>The detection algorithm works something like this:</source>
          <target state="translated">検出アルゴリズムは次のように動作します。</target>
        </trans-unit>
        <trans-unit id="cfd0b50108607e59344e69b0de3bc9fd4f301247" translate="yes" xml:space="preserve">
          <source>The diagnostics Pragma</source>
          <target state="translated">診断プラグマ</target>
        </trans-unit>
        <trans-unit id="9e8272da23da05393615d77b37bcea56278deff5" translate="yes" xml:space="preserve">
          <source>The diagnostics of this test normally just refer to 'the object'. If you'd like them to be more specific, you can supply an $object_name (for example 'Test customer').</source>
          <target state="translated">このテストの診断は通常 'オブジェクト' を参照します。より具体的にしたい場合は、$object_name を指定することができます (例えば 'Test customer' など)。</target>
        </trans-unit>
        <trans-unit id="67027b213e7e98e89fd8e5ebf75f4789f0806d73" translate="yes" xml:space="preserve">
          <source>The diagram below represents a single source stream, with the flow of source from a Perl script file on the left into the Perl parser on the right. This is how Perl normally operates.</source>
          <target state="translated">下の図は、左のPerlスクリプトファイルから右のPerlパーサへのソースの流れを示す単一のソースストリームを表しています。これは、Perl が通常どのように動作するかを示しています。</target>
        </trans-unit>
        <trans-unit id="09d12bc25e1c17128a784d1b2ff7f2b3ea6c5f9e" translate="yes" xml:space="preserve">
          <source>The die on line 4 pops the context stack back down to the CxEVAL, leaving it as:</source>
          <target state="translated">4行目のダイは、コンテキストスタックをCxEVALにポップダウンさせ、そのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="930610eed704196a6c02e9606fed36fd7cdf0a59" translate="yes" xml:space="preserve">
          <source>The die pops the first &lt;code&gt;CxEVAL&lt;/code&gt; off the context stack, sets &lt;code&gt;PL_restartop&lt;/code&gt; from it, does a &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; , and control returns to the top &lt;code&gt;docatch&lt;/code&gt; . This then starts another third-level runops level, which executes the nextstate, pushmark and die ops on line 4. At the point that the second &lt;code&gt;pp_die&lt;/code&gt; is called, the C call stack looks exactly like that above, even though we are no longer within an inner eval; this is because of the optimization mentioned earlier. However, the context stack now looks like this, ie with the top CxEVAL popped:</source>
          <target state="translated">ダイは、コンテキストスタックから最初の &lt;code&gt;CxEVAL&lt;/code&gt; をポップし、 &lt;code&gt;PL_restartop&lt;/code&gt; からPL_restartopを設定し、 &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; を実行して、制御が最上位の &lt;code&gt;docatch&lt;/code&gt; 戻ります。次に、次の3番目のレベルのrunopsレベルが開始され、4行目でnextstate、pushmark、およびdie opsが実行されます。2番目の &lt;code&gt;pp_die&lt;/code&gt; が呼び出された時点で、C呼び出しスタックは上記のように見えますが、内部評価; これは、前述の最適化が原因です。ただし、コンテキストスタックは次のようになります。つまり、最上位のCxEVALがポップされます。</target>
        </trans-unit>
        <trans-unit id="6ed5acbfe1a4a69e2eecb34b13c8306880da82cf" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;extract_tagged&lt;/code&gt; and the anonymous subroutines generated by &lt;code&gt;gen_extract_tagged&lt;/code&gt; , is that those generated subroutines:</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; と &lt;code&gt;gen_extract_tagged&lt;/code&gt; によって生成された無名サブルーチンの違いは、これらの生成されたサブルーチンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7e6f28f40692ae97e2ea2e8080e59d267505ccf0" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;minlen&lt;/code&gt; and &lt;code&gt;minlenret&lt;/code&gt; can be seen in the following pattern:</source>
          <target state="translated">&lt;code&gt;minlen&lt;/code&gt; と &lt;code&gt;minlenret&lt;/code&gt; の違いは、次のパターンで確認できます。</target>
        </trans-unit>
        <trans-unit id="f8ae9fbf98646f2ef8526e7b39bf817f11262438" translate="yes" xml:space="preserve">
          <source>The difference between a block and a script is that scripts are closer to the linguistic notion of a set of code points required to represent languages, while block is more of an artifact of the Unicode code point numbering and separation into blocks of consecutive code points (so far the size of a block is some multiple of 16, like 128 or 256).</source>
          <target state="translated">ブロックとスクリプトの違いは、スクリプトは言語を表現するために必要なコードポイントのセットの言語的な概念に近いですが、ブロックはユニコードのコードポイントのナンバリングと連続したコードポイントのブロックへの分離の成果物です(これまでのところ、ブロックのサイズは128や256のような16のいくつかの倍数です)。</target>
        </trans-unit>
        <trans-unit id="4e0fd5df1eb8c3e578915cd6f8934c4fe5cf676a" translate="yes" xml:space="preserve">
          <source>The difference between these two properties involves characters that are used in multiple scripts. For example the digits '0' through '9' are used in many parts of the world. These are placed in a script named &lt;code&gt;Common&lt;/code&gt; . Other characters are used in just a few scripts. For example, the &lt;code&gt;&quot;KATAKANA-HIRAGANA DOUBLE HYPHEN&quot;&lt;/code&gt; is used in both Japanese scripts, Katakana and Hiragana, but nowhere else. The &lt;code&gt;Script&lt;/code&gt; property places all characters that are used in multiple scripts in the &lt;code&gt;Common&lt;/code&gt; script, while the &lt;code&gt;Script_Extensions&lt;/code&gt; property places those that are used in only a few scripts into each of those scripts; while still using &lt;code&gt;Common&lt;/code&gt; for those used in many scripts. Thus both these match:</source>
          <target state="translated">これら2つのプロパティの違いには、複数のスクリプトで使用される文字が含まれます。たとえば、数字の「0」から「9」は、世界の多くの地域で使用されています。これらは &lt;code&gt;Common&lt;/code&gt; という名前のスクリプトに配置されます。その他の文字は、いくつかのスクリプトで使用されています。たとえば、 &lt;code&gt;&quot;KATAKANA-HIRAGANA DOUBLE HYPHEN&quot;&lt;/code&gt; カタカナひらがなダブルハイフン」はカタカナとひらがなの両方で使用されますが、それ以外の場所では使用されません。 &lt;code&gt;Script&lt;/code&gt; プロパティがで複数のスクリプトで使用されているすべての文字入れ &lt;code&gt;Common&lt;/code&gt; ながら、スクリプトを &lt;code&gt;Script_Extensions&lt;/code&gt; のプロパティは、これらのスクリプトのそれぞれに、わずか数スクリプトで使用されているものを配置します。まだ多くのスクリプトで使用されているものに対しては &lt;code&gt;Common&lt;/code&gt; を使用しています。したがって、これらは両方とも一致します。</target>
        </trans-unit>
        <trans-unit id="f324cedd823e628f1ed8025386bfb26cab3778ab" translate="yes" xml:space="preserve">
          <source>The difference is clear to see and the dereferencing approach is slower. While it managed to execute an average of 628,930 times a second during our test, the direct approach managed to run an additional 204,403 times, unfortunately. Unfortunately, because there are many examples of code written using the multiple layer direct variable access, and it's usually horrible. It is, however, minusculy faster. The question remains whether the minute gain is actually worth the eyestrain, or the loss of maintainability.</source>
          <target state="translated">その違いは明らかで、dereferencingアプローチの方が遅くなっています。私たちのテスト中、それは1秒間に平均628,930回を実行することに成功しましたが、直接アプローチは、残念ながら、追加の204,403回を実行することに成功しました。不幸なことに、複数レイヤーの直接変数アクセスを使って書かれたコードの例がたくさんあるので、通常は恐ろしいものです。しかし、それはマイナスに速くなっています。疑問が残るのは、この微増が実際には目の疲れに値するのか、それとも保守性の損失に値するのかということです。</target>
        </trans-unit>
        <trans-unit id="c9d466e6cdc3e3b171ba671cc22acace7243054b" translate="yes" xml:space="preserve">
          <source>The difference is the sigil, that special character in front of the array name. The &lt;code&gt;$&lt;/code&gt; sigil means &quot;exactly one item&quot;, while the &lt;code&gt;@&lt;/code&gt; sigil means &quot;zero or more items&quot;. The &lt;code&gt;$&lt;/code&gt; gets you a single scalar, while the &lt;code&gt;@&lt;/code&gt; gets you a list.</source>
          <target state="translated">違いは、配列名の前の特殊文字であるシギルです。 &lt;code&gt;$&lt;/code&gt; 「正確に一つの項目」、しばらく手段印章 &lt;code&gt;@&lt;/code&gt; 手段「0個以上の項目」印章。 &lt;code&gt;$&lt;/code&gt; は一方で、あなたに単一のスカラーを取得します &lt;code&gt;@&lt;/code&gt; は、あなたのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="c2b0921f524dbbf7564616e5853365d0c767bfc6" translate="yes" xml:space="preserve">
          <source>The digest can be delivered in three formats:</source>
          <target state="translated">ダイジェストは3つの形式でお届けします。</target>
        </trans-unit>
        <trans-unit id="0155d0c091234cee22dc790957626f27306487e0" translate="yes" xml:space="preserve">
          <source>The direction you must follow the great circle (also known as</source>
          <target state="translated">大円に沿って進むべき方向(通称</target>
        </trans-unit>
        <trans-unit id="03d134305af0df1045ab396312ef86cfab55c5d9" translate="yes" xml:space="preserve">
          <source>The direction you would have to go from London to Tokyo (in radians, straight north being zero, straight east being pi/2).</source>
          <target state="translated">ロンドンから東京に行く場合の方向(ラジアン表示で、北にまっすぐ行くとゼロ、東にまっすぐ行くとπ/2)。</target>
        </trans-unit>
        <trans-unit id="9159a72a045b505fc788bec97c5202fb7f87247c" translate="yes" xml:space="preserve">
          <source>The directory portion may or may not be returned with a trailing '/'.</source>
          <target state="translated">ディレクトリ部分は、末尾に '/' を付けて返される場合と返されない場合があります。</target>
        </trans-unit>
        <trans-unit id="efd54b0e8774d4521e37e9c7dad7074640dfad53" translate="yes" xml:space="preserve">
          <source>The directory you are put into when you log in. On a Unix system, the name is often placed into &lt;code&gt;$ENV{HOME}&lt;/code&gt; or &lt;code&gt;$ENV{LOGDIR}&lt;/code&gt; by</source>
          <target state="translated">あなたは、あなたがログインしたときに置かれているディレクトリ。UNIXシステムでは、名前がしばしばに配置されて &lt;code&gt;$ENV{HOME}&lt;/code&gt; や &lt;code&gt;$ENV{LOGDIR}&lt;/code&gt; で</target>
        </trans-unit>
        <trans-unit id="0f834768c044521ed2139a347066ecd1f6fd454d" translate="yes" xml:space="preserve">
          <source>The directory, if specified, must appear immediately following the &lt;b&gt;-x&lt;/b&gt; with no intervening whitespace.</source>
          <target state="translated">指定する場合、ディレクトリは&lt;b&gt;-xの&lt;/b&gt;直後に空白を入れずに表示する必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
