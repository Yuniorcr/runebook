<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="47631645b3392cb307ba9a6b2b2ae73b5b84b721" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2017 Muted Solutions, LLC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cf610433c65baa8915ec9f0cbfcf96a94b7a66" translate="yes" xml:space="preserve">
          <source>// myview.js import Mn from './mymarionette'; const MyView = Mn.View.extend({});</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c233cee50223f74202a02f9f3db464c01268635" translate="yes" xml:space="preserve">
          <source>// new behavior const {View} = require('backbone.marionette'); const MyView = View.extend({});</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab459c520c91d7b910ff9fd62c8d2a671fba23af" translate="yes" xml:space="preserve">
          <source>// new behaviors // import only needed class/function import {View} from 'backbone.marionette'; const MyView = View.extend({});</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2ef1485c5294bcfb27a072c99636ed1e462419" translate="yes" xml:space="preserve">
          <source>// old behavior const Mn = require('backbone.marionette'); const MyView = Mn.View.extend({});</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2058ef8589b2fa905d240d1a90883146b700707f" translate="yes" xml:space="preserve">
          <source>// or create a module that default exports all functions/classes // mymarionette.js -&amp;gt; can be configured as an alias for marionette or any other module name with webpack import * as Mn from 'backbone.marionette'; export default Mn;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a674185b1e39d97fdc7742c058e6e74e09b6ba9" translate="yes" xml:space="preserve">
          <source>// or import all (kills any chance of tree shaking) import * as Mn from 'backbone.marionette'; const MyView = Mn.View.extend({});</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0955df057514858a2678aebdcb948e70dcd6b92" translate="yes" xml:space="preserve">
          <source>// using CommonJS syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb9198e2815b99d14cf2bebffd9705c3fbdf619" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#the-default-api&quot;&gt;The default API&lt;/a&gt; depends on Backbone's jQuery &lt;code&gt;$&lt;/code&gt; object however it does not rely on jQuery-specific behavior. This should make it easier to develop your own API. You will, however, &lt;a href=&quot;#backbone-jquery-integration&quot;&gt;need to also handle Backbone's jQuery integration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b990e1c18465e99e6d7cfde733716016b53cf0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;backbone.radio#marionette-integration&quot;&gt;Radio API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64fce41a83d64724f87088353c9602d63c33bc7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basics&quot;&gt;Continue Reading...&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bbc84e9ce210e8bdf85badfc0a2bed0e1ef7e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;classes&quot;&gt;Continue Reading...&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d15143d13b848e228878fd8fa0b69ce24f0000b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;classes&quot;&gt;View classes&lt;/a&gt; can be initialized with pre-rendered DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814b6e7c951de54f132198019a3584e5b2b824c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;common&quot;&gt;Continue Reading...&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0ebcf154a093e377be7c06a9b74771b3d2e3bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; is a build tool that makes it easy to bundle NPM modules into your application, so you can &lt;code&gt;require&lt;/code&gt; them as you would import dependencies in any other language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2125c72857906edf7387d521903ca0bf542d3fcd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://brunch.io/&quot;&gt;Brunch&lt;/a&gt; is fast front-end web app build tool with simple declarative config, seamless incremental compilation for rapid development, an opinionated pipeline and workflow, and core support for source maps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c39f4bb9aafafb62565d32ff12fc312bbc3832" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; is task runner. &lt;a href=&quot;https://github.com/marionettejs/marionette-integrations/tree/master/browserify-grunt&quot;&gt;Here&lt;/a&gt; is simple Browserify + Grunt skeleton.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfdaabb123d3a0edd48b9c223d4e0f8efc2ce44" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; is streaming build system. &lt;a href=&quot;https://github.com/marionettejs/marionette-integrations/tree/master/browserify-gulp&quot;&gt;Here&lt;/a&gt; is simple Browserify + Gulp skeleton.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5428da7147229638aea904096866d17c9f3b7e0d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/QubitProducts/cherrytree&quot;&gt;Cherrytree&lt;/a&gt; Nested routes, like Ember, but without the transition lifecycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36db0f9c9448d4a4e847192d9a6872f536c822f2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/leeluolee/stateman&quot;&gt;Stateman&lt;/a&gt; Angular-UI style routing, without the Angular</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fdddb6ee133c67db00a243b9f465a3d1ed9774" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/marionettejs/marionette-integrations/tree/master/browserify&quot;&gt;Here&lt;/a&gt; we prepared simple marionettejs skeleton with Browserify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f4675271cfa6f7280c9a54d54995df4a5cfd68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/marionettejs/marionette-integrations/tree/master/brunch&quot;&gt;Here&lt;/a&gt; we prepared simple marionettejs skeleton with Brunch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad883225f0c920b171d1321991db850df41ebee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/marionettejs/marionette-integrations/tree/master/webpack&quot;&gt;Here&lt;/a&gt; we prepared simple marionettejs skeleton with Webpack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202f1978987e02cb38aa5357289f2efdf60f3b84" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tildeio/router.js&quot;&gt;router.js&lt;/a&gt; This is what Ember's router is built on top of. It has all of the features needed for good routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9702dc3cc1966ca0ca8ce9463fd2db3b42e96b31" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; is a build tool that makes it easy to pull your dependencies together into a single bundle to be delivered to your browser's &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. It works particularly well with Marionette and jQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb7fd1c2d5baf6b8ac397a5c6e0a72f9c393979" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; is the package manager for JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac102d7daea090ff65a880ce6f7a67a95768035a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;routing&quot;&gt;Continue Reading&lt;/a&gt; about routing in Marionette.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7173d82c2000cf823cbce4bda37c83223e938dd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Application&lt;/code&gt; includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf91026e1f74fb84beeda42c38ada26e257e8b8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Application&lt;/code&gt;, &lt;code&gt;Behavior&lt;/code&gt;, and &lt;code&gt;Region&lt;/code&gt; no longer extend &lt;code&gt;MnObject&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20982c7e5d90eff624ea54176b566296fa202541" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Backbone.View&lt;/code&gt; allows the user to change the view's &lt;code&gt;el&lt;/code&gt; after instantiaton using &lt;a href=&quot;http://backbonejs.org/#View-setElement&quot;&gt;&lt;code&gt;setElement&lt;/code&gt;&lt;/a&gt;. This method can be used in Marionette as well, but should be done with caution. &lt;code&gt;setElement&lt;/code&gt; will redelegate view events, but it will essentially ignore children of the view, whether through &lt;code&gt;regions&lt;/code&gt; or through &lt;code&gt;children&lt;/code&gt; and the view's &lt;code&gt;behaviors&lt;/code&gt; will also be unaware of the change. It is likely better to reconstuct a new view with the new &lt;code&gt;el&lt;/code&gt; than to try to change the &lt;code&gt;el&lt;/code&gt; of an existing view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7895bb5efced3a633afb536e08df12b18e5d47d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Behavior&lt;/code&gt; includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05aee5cca8aada039157326b214fe6997926674" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Behavior&lt;/code&gt;s are particularly good at factoring out the common user, model and collection interactions to be utilized across your application. Unlike the other Marionette classes, &lt;code&gt;Behavior&lt;/code&gt;s are not meant to be instantiated directly. Instead a &lt;code&gt;Behavior&lt;/code&gt; should be instantiated by the view it is related to by &lt;a href=&quot;#using-behaviors&quot;&gt;attaching the a behavior class definition to the view&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123d1c956ce175f74ae5d5f9edcc2978fd09bcce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Channel&lt;/code&gt; - a namespace mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60c15ff3aff86cec11efc6dea6e9b83b32bdb1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectionView&lt;/code&gt; Children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0ee7062c6df7a1d1136bee5e8ba7b2d9ebb645" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectionView&lt;/code&gt; Rendering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af81bdf07cfed98f3abf4a5f07cf522172a38c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectionView&lt;/code&gt; allows for a custom &lt;code&gt;viewComparator&lt;/code&gt; option if you want your &lt;code&gt;CollectionView&lt;/code&gt;'s children to be rendered with a different sort order than the underlying Backbone collection uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1cb83406150968ca6e1dd5be1c66ec5878e2cb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectionView&lt;/code&gt; allows for a custom &lt;code&gt;viewFilter&lt;/code&gt; option if you want to prevent some of the underlying &lt;code&gt;children&lt;/code&gt; from being attached to the DOM. A &lt;code&gt;viewFilter&lt;/code&gt; can be a function, predicate object. or string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1269f23b6c9be0fd6f9d0201db858b9bced6df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectionView&lt;/code&gt; implements a &lt;code&gt;destroy&lt;/code&gt; method which automatically destroys its children and cleans up listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3040c5ed744accb627f05175b5743f051c205444" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectionView&lt;/code&gt; includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e37f3d9cb9aae1d0a97389ba6be7f37aa91f8c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectionView&lt;/code&gt;, &lt;code&gt;Region&lt;/code&gt;, and &lt;code&gt;View&lt;/code&gt; all have &lt;code&gt;setDomApi&lt;/code&gt;. Each extended class may have their own DOM API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ad899f58e43325846a1bcded86833796324d00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CollectionView&lt;/code&gt;&lt;code&gt;destroy:children&lt;/code&gt; and &lt;code&gt;before:destroy:children&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7abda9a6a8e93857b5b53cfc526e7ef77e0e524f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DEV_MODE&lt;/code&gt; which shows deprecation warnings was made a feature flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2c1b9e9afa901b4fe398fda65c132fec99f98a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Error&lt;/code&gt; utility was made private</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50cbc10619cc175f54210ac60ec8577efb565b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Event&lt;/code&gt; - alert other parts of your application that something happened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c8876fb7d7aec8c468e98be1a7d14f934f4e58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Marionette.Events&lt;/code&gt; and &lt;code&gt;triggerMethod&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84ef33e7a051f23e7e6569927dcc685148cbe09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MnObject&lt;/code&gt; includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df548fd9eecd8c84c957139fec2e890160cf467b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MnObject&lt;/code&gt; incorporates backbone conventions &lt;code&gt;initialize&lt;/code&gt;, &lt;code&gt;cid&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87ea26d5fde341c78c0687077e4a55d0cb0a49b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MnObject&lt;/code&gt; incorporates backbone conventions &lt;code&gt;initialize&lt;/code&gt;, &lt;code&gt;cid&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;. &lt;code&gt;MnObject&lt;/code&gt; includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef14cbc2948c7ccf551fc57bc97ef219259a8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Region&lt;/code&gt; includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16cb2a2ce47f6f8a5f2e1274a08db7206b0bf9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Request&lt;/code&gt; - execute single functions in a different part of your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4c744d4e5e108e59fcc71cfb3a9b2ab89d6ea7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TemplateCache&lt;/code&gt; render removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc10064b7b1eaa98d4af4ef4d49592e32c47e0a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View&lt;/code&gt; Children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a7ba2730e89c1f73726c4e93b011c862453e60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View&lt;/code&gt; Rendering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92dcec912cd4b63fb15a77bc37e4459cf6d83eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View&lt;/code&gt; includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc113172b52a764eb6bb16f45d1f817cefeeaaf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View&lt;/code&gt; provides a simple interface for managing child-views with &lt;a href=&quot;#showing-a-child-view&quot;&gt;&lt;code&gt;showChildView&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#accessing-a-child-view&quot;&gt;&lt;code&gt;getChildView&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#detaching-a-child-view&quot;&gt;&lt;code&gt;detachChildView&lt;/code&gt;&lt;/a&gt;. These methods all access &lt;code&gt;regions&lt;/code&gt; within the view. We will cover this here but for more advanced information, see the &lt;a href=&quot;marionette.region&quot;&gt;documentation for regions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cddc18abb65e6248e314cc80c91a2cf6e2003387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add:child&lt;/code&gt; and &lt;code&gt;before:add:child&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98494a1cd951bc35fc3e7a1782181e4055562de0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add:child&lt;/code&gt; and &lt;code&gt;remove:child&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8d53ebac23668ae6cf59db9f196d55c8894140" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add:region&lt;/code&gt; and &lt;code&gt;before:add:region&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e87d207035240bee1504a21f6be48ea6d863e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add:region&lt;/code&gt; and &lt;code&gt;remove:region&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e48d34e57f4286a0bdecdb2f2cee88577e2a03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attach&lt;/code&gt; and &lt;code&gt;before:attach&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bfee81482468750d8b9d90daf6e3eb4b85e482d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attach&lt;/code&gt; is the ideal event to setup any external DOM listeners such as &lt;code&gt;jQuery&lt;/code&gt; plugins that use the view's &lt;code&gt;el&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cf7a90c1e27710c9bd40a94a8189ba3f4fee93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attachElContent&lt;/code&gt; not called unless the View renderer returns a value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052036e9705a5efc8c99360f6336837c1a4a9838" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;before:detach&lt;/code&gt; is the ideal event to clean up any external DOM listeners such as &lt;code&gt;jQuery&lt;/code&gt; plugins that use the view's &lt;code&gt;el&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6584bd76da2589bdcdba4dbad27cf11c5576ed96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;before:render&lt;/code&gt; will occur prior to removing any current child views. &lt;code&gt;render&lt;/code&gt; is an ideal event for attaching child views to the view's template as the first render &lt;em&gt;generally&lt;/em&gt; occurs prior to the view attaching to the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce95395d1a60b9d7ed2be8beeecf5dd85aea1de5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;before:start&lt;/code&gt; event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0a73da04a626d905fb9fd140ac3fd1a4744f4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;channel.off('event')&lt;/code&gt; - stop listening to event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0590697c04a434c0ff1728c22cfb802f50ce5acf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;channel.on('event', callback, [context])&lt;/code&gt; - when &lt;code&gt;event&lt;/code&gt; fires, call &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45b277270e198c907525aee9e89f2efd751e39b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;channel.once('event', callback, [context])&lt;/code&gt; - same as &lt;code&gt;on&lt;/code&gt;, but triggered only once</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d3934921ad1ef79eef63f984f32fdcb2c1d55a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;channel.trigger('event', ..args)&lt;/code&gt; - fires &lt;code&gt;event&lt;/code&gt; and passes args into the resulting &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46c488a2eb166654d154c71bab2153ac46f75ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;channelName&lt;/code&gt; - defines the Radio channel that will be used for the requests and/or events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0887aeac6b510667c9f9ffa16e490bcc6b82751" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;childViewEventPrefix&lt;/code&gt; flag is set to false by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8eabe9cb9ee31971a539370ce5f5a717e6c471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;childViewTriggers&lt;/code&gt; is sugar on top of &lt;a href=&quot;#explicit-event-listeners&quot;&gt;&lt;code&gt;childViewEvents&lt;/code&gt;&lt;/a&gt; much in the same way that &lt;a href=&quot;dom.interaction#view-triggers&quot;&gt;view &lt;code&gt;triggers&lt;/code&gt;&lt;/a&gt; are sugar for &lt;a href=&quot;dom.interactions#view-events&quot;&gt;view &lt;code&gt;events&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b817625c31310892111b337ebc498471141e16f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defaults&lt;/code&gt; was removed from Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5a553603649fcc11cdc11fda05a3a7b0058e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;destroy:children&lt;/code&gt; and &lt;code&gt;before:destroy:children&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5309569ef9aa5abc786d90078ab662dd26bde4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;destroy&lt;/code&gt; A Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb6361a3d3868e59cb08810a063e8b6d4a453d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;destroy&lt;/code&gt; and &lt;code&gt;before:destroy&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488405cc5d16feddbacdf4701412fe5b8505a05e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;destroy&lt;/code&gt; functions only proxy a single argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509f9b484d243c10dbefd185aacd471addf42aa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;destroyView&lt;/code&gt; method destroys the view taking into consideration if is a Marionette.View descendant or vanilla Backbone view. It can be replaced by a &lt;code&gt;view.destroy()&lt;/code&gt; call if is ensured that view descends from Marionette.View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f7ced7a5e4d19e5712ae2bc6b4ed2f478dd089" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;detach&lt;/code&gt; and &lt;code&gt;before:detach&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6413f17a35dfbfbc6155b2ac46da79fc7802fc1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dom:refresh&lt;/code&gt; event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322169b94303c1a564b816a71b7821f2c8c37132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dom:remove&lt;/code&gt; event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd27836009c4ba3942572a37417af29f2ff871d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;empty&lt;/code&gt; and &lt;code&gt;before:empty&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b79b25975a40e4d69165a873b1c0143bb7b51ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emptyRegions()&lt;/code&gt; - Empty all of the regions on a view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dce26841d06a454fbf5e8b9455ca3613e4209d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;before:filter&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a74716e6c23e3e913e5522272e23d742602946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getChannel()&lt;/code&gt; - returns a Radio.Channel instance using &lt;code&gt;channelName&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37eee5d2432d275ff3cbcdb126ea19af3ad98c19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getRegion(name)&lt;/code&gt; - Request a region from a view by name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b4933ae3a59c04499de47dbcf453340420e3cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getRegions()&lt;/code&gt; - Returns an object literal of all regions on the view organized by name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6c82e388e138e10087c1bfd50d669f05c3ef6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hasRegion(name)&lt;/code&gt; - Check if a view has a region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fc80a1ea69a8d15bfffda7e6cb1db4f4949343" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialize&lt;/code&gt; event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9abec16b890f38da2ac0cb1187716318d754834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;myBehavior.destroy()&lt;/code&gt; will call &lt;code&gt;stopListening&lt;/code&gt; on the behavior instance, and it will remove the behavior from the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90eb0982fc0e621ccb23324cb83bd4605fa6fcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noConflict&lt;/code&gt; was removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf6bf1f9a8b8695c84dbfe81c785275fc287d47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onEvent&lt;/code&gt; Binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e5a6a6c57aefaa0243fb9a0a3912fb3bfd9754" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;radioEvents&lt;/code&gt; - defines an events hash with the events to be listened and its respective handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0a70865cc4bec621b8271a50c47fe9bbe0a368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;radioRequests&lt;/code&gt; - defines an events hash with the requests to be replied and its respective handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0173b266dfe4dd1ab9fe3c2e85dea195f2dbfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;region&lt;/code&gt; can also be passed as an option during instantiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543875f82966c1cf04f25e971435b45a175f65a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regionClass&lt;/code&gt; can also be passed as an option during instantiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89c9efe9281c4ef2d4eea04879e8aa7c299791e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove:child&lt;/code&gt; and &lt;code&gt;before:remove:child&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ac5bdf891443d8bc3fc6e96a701fe83dc41d42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove:region&lt;/code&gt; and &lt;code&gt;before:remove:region&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ff3fbe92a5c7c1363fa1f2af65c175dc2f5548" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render:children&lt;/code&gt; and &lt;code&gt;before:render:children&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70aed940c6cd8ed64ea5c37d47374f2fd7ea0960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render&lt;/code&gt; and &lt;code&gt;before:render&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e89209f77de988aa39e01a9a59f874c8076556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756fdc05ec72fdb0ec71a7c2c72daf94e54857d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reset&lt;/code&gt; A Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2fc59a4f16db4288d226b48f67035120e46291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;show&lt;/code&gt; and &lt;code&gt;before:show&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1320e2ebd431f64be10ee051b86cb28f623f2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;show&lt;/code&gt; and &lt;code&gt;before:show&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf97ee1b257812342ce0d5faa6a01403ae15291a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;before:sort&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11c0f47bfbc5200e11dff8924e494f26c699af6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e610a42ceb59bb4f61d45c94112cc9e50b235e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;triggerMethod('before:foo')&lt;/code&gt; fires the &quot;onBeforeFoo&quot; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa3280d11edef62e97b529739afa06d1a5687ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;triggerMethod('foo')&lt;/code&gt; fires the &quot;onFoo&quot; function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18db47238dfef003888b3766217cb7ccb834682f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;triggerMethod('foo', bar)&lt;/code&gt; will call &lt;code&gt;onFoo(bar){...})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f7e135c10b4fea2b31800c5f1f1ffafe48f9ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;triggerMethodOn&lt;/code&gt; was removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75213a910c3f96ebcafb8bd334a95a4e91807502" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewFilter&lt;/code&gt; as a function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1570c2c16daf984a3cb9e5e18ca921d3ed27be38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewFilter&lt;/code&gt; as a predicate object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a44105974637b00043f1c20457f4ebdb4e3a68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewFilter&lt;/code&gt; as a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6a900df4d18ab0ab7f0a99c2140feabe45eb80" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Default:&lt;/em&gt;&lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;Default:&lt;/em&gt;&lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14cb0ac207eedf35fafeea76bec9a0c1c2539aa1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Default:&lt;/em&gt;&lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;Default:&lt;/em&gt;&lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5de6eba732601cc75f3b05bd61b82fba2880fadc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; An error will be thrown for an incorrect region configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee89c107b48d304aae1cf77c4ef5869bc958753" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; An error will be thrown if the &lt;code&gt;Behavior&lt;/code&gt; class is not passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3b18b5af71ee5a7507c8673cf3b92a592f9877" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; An error will be thrown if the &lt;code&gt;ViewFilter&lt;/code&gt; is not one of these options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b6e1121bfb55bc2a596ee746235120d3d8ec79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; An error will be thrown if the second parameter is not an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d57403756f57c258f680b6d87cfdba4248b54e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; An error will be thrown if the view is falsy or destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160340170841cff94abb13f2a39e7cffe45e6afa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; An error will be thrown if using the radio integration unless &lt;code&gt;backbone.radio&lt;/code&gt; is setup as a dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5c6ef6b53eb9ae57e4ff6844e1b309b9fa65bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; An error will be thrown in the regions &lt;code&gt;el&lt;/code&gt; is not specified, or if the &lt;code&gt;el&lt;/code&gt; does not exist in the html.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3729ec5e44b9ee75c13cb9bb17f25597d9e88a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; An error will throw if the childViewContainer can not be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d757e0d16312ceddfc2d5ab62af5c960fd277d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; If &lt;code&gt;childView&lt;/code&gt; is a function that does not return a view class an error will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03aa18cf654ac08555815b8b4fb69e36b7a37d52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; If either of the two views aren't part of the &lt;code&gt;CollectionView&lt;/code&gt; an error will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db705b0577468531efd736e1ec98ab0abdf517a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Errors&lt;/strong&gt; If you do not specify a &lt;code&gt;childView&lt;/code&gt;, an exception will be thrown stating that you must specify a &lt;code&gt;childView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d3a13a15576a3d19c843ea9825d60aaf4e3f04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE: To avoid memory leaks, &lt;code&gt;unbindRequests&lt;/code&gt; should be called in or before &lt;code&gt;onBeforeDestroy&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91415aaf5ec161d522bb0dba11e926d114afe315" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; A childview may or may not be destroyed by this point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbaeb099a8baa8f063e53d26991ef7ebea14de31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; Automatic event bubbling can be disabled by setting &lt;a href=&quot;#a-child-views-event-prefix&quot;&gt;&lt;code&gt;childViewEventPrefix&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22016791c3acee2da1a2d94ba97df983768571a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; If the region does &lt;em&gt;not&lt;/em&gt; currently contain a View it will detach any HTML inside the region when emptying. If the region &lt;em&gt;does&lt;/em&gt; contain a View &lt;a href=&quot;upgrade#changes-to-regionshow&quot;&gt;any HTML that doesn't belong to the View will remain&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30ad15d4700f2a3361cda06d99978a9c11a1664" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; It is &lt;em&gt;strongly recommended&lt;/em&gt; that View's handle their own DOM event objects. It should be considered a best practice to not utilize the DOM event in external listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12658a5833824f6975b5f7a9383934ca3cfe4b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; This event will not fire if the view has no template to render unless it contains prerendered html.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b45ac186eae7ebd00fd726a4133528cb49a5552" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; When a &lt;code&gt;CollectionView&lt;/code&gt; is destroyed it will not individually remove its &lt;code&gt;children&lt;/code&gt;. Each childview will be destroyed, but any needed clean up during the &lt;code&gt;CollectionView&lt;/code&gt;'s destruction should happen in &lt;a href=&quot;#destroychildren-and-beforedestroychildren-events&quot;&gt;&lt;code&gt;before:destroy:children&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c53263eb2d0b724a429355dbf9b9a4ef4f5a87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;&lt;code&gt;triggers&lt;/code&gt; will automatically pass the child view as an argument to the parent view, however &lt;code&gt;triggerMethod&lt;/code&gt; will not, and so notice that in the above example, the &lt;code&gt;triggerMethod&lt;/code&gt; explicitly passes the child view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63599dd93e15952f6ade5373dbc1338157def873" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Behavior definitions must be defined on the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c10e12ba933421492444ff44a4dfa09b90ac33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Marionette is not attached to &lt;code&gt;Backbone&lt;/code&gt; global instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94562afd3f1940958412efab872c979bef6c564a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Marionette no longer handles conflicts internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a73b97bad22460a80f7757f6bf81ac09c89d63e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Marionette no longer includes a router</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831cd16061cf8dc93d27835eabcbbfe69a5bdb76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; No render events will occur</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142de4b6bcfcd27a0fed342dca069c68bcfd4cf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Objects that need this functionality should mixin &lt;code&gt;Marionette.Events&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574be40b03a6996c1984fe8da36bcd2c2ace33bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Only &lt;code&gt;CollectionView&lt;/code&gt;, based on &lt;code&gt;NextCollectionView&lt;/code&gt; is provided. The old &lt;code&gt;CollectionView&lt;/code&gt; implementation was removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ccc3f3ed7fee9c1dd2d98d3912f2bfd29ddcb2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Only &lt;code&gt;options&lt;/code&gt; define the Behavior's default options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a76597bd3b7af1a5f9d549cc011cb4279a1b84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Only &lt;code&gt;options&lt;/code&gt; passed in at construction will be passed to the Backbone.View constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c340a351bc741e88d7d405071f66d77e87a266b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Only one argument is passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216f57b5c8cc85403df1a4fc8114e7ab9db2555b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Option is no longer available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1836953b3b70746f955dbd1032cdee3d62ac76cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Package is exported as a ECMAScript module using named exports. The default export with all classes still</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cccce4971e0442d6c29560de48070da97c781c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Renders templates directly &lt;code&gt;template(data);&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09a14f808e7d9b4a542c77c6ff075c20f948f2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; The &lt;code&gt;el&lt;/code&gt; property can be used to set the &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4295750f84b624ae946ee6c98b7f8d11e351b671" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; There is no accessible Error class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdf254bca61aebce84c884c66a5e3ac214b9c71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; These classes no longer extend anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8ef50bf1b4efb9c902b4f580a1ac463b04e867" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; These methods now return the shown view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310d1c7885491c8ea91b2895479edab8042f3383" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; To support &lt;code&gt;Backbone.View&lt;/code&gt; is necessary to apply &lt;code&gt;Marionette.Events&lt;/code&gt; mixin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0c10e625e1a4796276f6cb3f9fc1970b6004e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; Use &lt;code&gt;setEnabled&lt;/code&gt; to set the &lt;code&gt;DEV_MODE&lt;/code&gt; feature flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8016a5d6a93a504d5b7a1fcd3986d4a9934bd90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; model attributes are no longer cloned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1c8ffcb05110b244771de0300bad03cc39de19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt; view.render is no longer bound to the view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b9d2bbadf48f784b126dfdc1bfad4559fde083" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt;&lt;code&gt;CompositeView&lt;/code&gt; does not exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68b48e4dd03071eca081006b30916b2fd0bb668" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt; is used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cd6f2b5e5f4ec7b3dd2ea4cb048e9c232ac7ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt;&lt;code&gt;Renderer&lt;/code&gt; does not exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0301912d1e1ad815deb52650eaaf3975ccf32aea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt;&lt;code&gt;attachElContent&lt;/code&gt; not called if the render doesn't return a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54be278e3db0d06e4f93013cace33eb27c81f5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt;&lt;code&gt;childViewEventPrefix&lt;/code&gt; flag was set to false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec7912bb83d9424b76dee4733b6a4aa8842379a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;New behavior:&lt;/strong&gt;&lt;code&gt;isNodeAttached&lt;/code&gt; does not exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fafc76dc287202dcd40d500cb70506ff4f28b35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; Backbone &lt;code&gt;events&lt;/code&gt; are delegated to the view's &lt;code&gt;el&lt;/code&gt;. This means that events with a dom node selector will be handled for the view and any decendants. So if you attach a child with the same selector as the parent event handler, the parent will handle the event for both views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ae686fa97f4621d8695c6040ba4e5d7792c212" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; Children are removed after the DOM detach of the parent to prevent multiple reflows or repaints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f665bab016439e91d0a965299101d3f2293d8c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; Currently these events are only triggered using the &lt;code&gt;view.removeRegion&lt;/code&gt; API and not when the region is destroyed directly. &lt;a href=&quot;https://github.com/marionettejs/backbone.marionette/issues/3602&quot;&gt;https://github.com/marionettejs/backbone.marionette/issues/3602&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2442a1ff7d89ddc9597faebd20369c298f293bf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; For views this is not the ideal location for clean up of anything touching the DOM. See &lt;a href=&quot;#domremove-event&quot;&gt;&lt;code&gt;dom:remove&lt;/code&gt;&lt;/a&gt; or [&lt;code&gt;before:detach&lt;/code&gt;] for DOM related clean up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c1d45774b707dc50d289864530cd8edf6540dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; If a view's &lt;code&gt;template&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; this event will not trigger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd75511b0aee0d235cf27aafecf504711cbfe3ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; In order to prevent conflict &lt;code&gt;Behavior&lt;/code&gt; does not trigger &lt;a href=&quot;#destroy-and-beforedestroy-events&quot;&gt;destroy events&lt;/a&gt; with its own destruction. A &lt;code&gt;destroy&lt;/code&gt; event occurring on the &lt;code&gt;Behavior&lt;/code&gt; will have originated from the related view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d007ec1b98cd7d1bcbbf8ca9f7da3985e29d19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; Once a view is considered &quot;rendered&quot; it cannot be unrendered until it is &lt;a href=&quot;#destroying-a-view&quot;&gt;destroyed&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16718b90b7903e825c9349cb70dbed0faeb72446" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; That children represents the views rendered that are or will be attached within the view's &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22cf20030350028fe1fd63e2c4f323d9f2b5839" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;CollectionView&lt;/code&gt; expects to be the only entity managing the region. Showing things in this region directly is not advised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75d61f990ef16ba51d4ffc00ec2806d5ca7e3d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; The event handlers will pass the &lt;code&gt;options&lt;/code&gt; argument &lt;code&gt;destroy&lt;/code&gt; was invoked with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47939fb1908868b21a188fb2033e865bd08d9078" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; The events API should not be confused with &lt;a href=&quot;https://marionettejs.com/.dom.interactions.html#view-events&quot;&gt;view &lt;code&gt;events&lt;/code&gt;&lt;/a&gt; which capture DOM events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa83b05ee0d60405a19bb1987b8e4b3dc575ed00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; These examples while functional may not be ideal. If possible it is recommend to precompile your templates which can be done for a number of templating using various plugins for bundling tools such as &lt;a href=&quot;installation&quot;&gt;Browserify or Webpack&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fe319880bb54833d38ee43dfb5c0399c1a9368" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; This event is only triggered when rendering a template into a view. A view that is pre-rendered will not have this event triggered unless re-rendered. &lt;a href=&quot;dom.prerendered&quot;&gt;Pre-rendered views&lt;/a&gt; should use &lt;code&gt;initialize&lt;/code&gt; for attaching child views and the &lt;code&gt;render&lt;/code&gt; event if the view is re-rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cb96bb98e4ae2c9e8d85815db539f5e833923b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; This event is unique in that the triggering class instance (the view) is not the same instance as the handler (the behavior). In most cases internally triggered events are triggered and handled by the same instance, but this is an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8609d470d37cd2395d79ad09ddac2e795b33a0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; This is a presentation functionality used to easily filter in and out constructed children. All children of a &lt;code&gt;collection&lt;/code&gt; will be instantiated once regardless of their filtered status. If you would prefer to manage child view instantiation, you should filter the &lt;code&gt;collection&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ad73a3f133951f9e3338e8c5fa13776dd92576" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; Unless an index is specified, this added view will be subject to filtering and sorting and may be difficult to manage in complex situations. Use with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044cb8384120e337b25d346b5f25d534892e4099" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; When detaching a view you must pass it to a new region so Marionette can handle its life cycle automatically or &lt;code&gt;destroy&lt;/code&gt; it manually to prevent memory leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820ff090b592142ac494bf34cd79c1b38d6b59ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; You should not use this method to add arbitrary extra data to your template. Instead use &lt;code&gt;templateContext&lt;/code&gt; to &lt;a href=&quot;#adding-context-data&quot;&gt;add context data to your template&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8e1a7236799974bf7bbe89bcea5a72a5e89e4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; if you consistently need all of the views within this event use &lt;a href=&quot;marionette.collectionview#collectionviews-children&quot;&gt;&lt;code&gt;children&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d462bf5acb8171985e1b98e409c5b1c33d95001" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; in rare cases when a view's &lt;code&gt;el&lt;/code&gt; is modified via &lt;code&gt;setElement&lt;/code&gt; if utilizing these proxies they will need to be manually updated by calling &lt;code&gt;myBehavior.proxyViewProperties();&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208440e59f765e7f5060460e532ba7b5b4ae0aaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; the data object passed to the template is not deeply cloned and in some cases is not cloned at all. Take caution when modifying the data passed to the template, that you are not also modifying your model's data indirectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998273945fb8d2bcecf922929f0c1874cd561eda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Disabling the view monitor will break the monitor generated events for this view &lt;em&gt;and all child views&lt;/em&gt; of this view. Disabling should be done carefully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a934347f117660aed2c87a347109a243abd077" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;&lt;code&gt;render&lt;/code&gt; and &lt;code&gt;attach&lt;/code&gt; events will not fire for the initial state as the state is set already at instantiation and is not changing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff7c71894acc34ca1fd00ec834dba236b082a63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Any number of arguments passed to a &lt;code&gt;destroy&lt;/code&gt; functions were passed along to events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25afbdb9149c62ebfa891bb94a8424c5807ba31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Both &lt;code&gt;NextCollectionView&lt;/code&gt; and &lt;code&gt;CollectionView&lt;/code&gt; were provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d1317464ad1f371fedda83031b74cf59feea02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Both &lt;code&gt;options&lt;/code&gt; and &lt;code&gt;defaults&lt;/code&gt; defined on Behavior are default options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de6407f2451aad97fe38d0f94249b838ba07ffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Marionette could be acessed using &lt;code&gt;Backbone.Marionette&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9c55673205afc162a6ea23ef9401f33217be38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Marionette included a router</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919d5ae65466412a755114e2a04804ecc9e79d18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Option could be used to prevent destroying a leaving view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0397b5214057349475283696fd9e8185c88202cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Rendered templates using the &lt;code&gt;TemplateCache&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d961f3e49b8a23073c5171f4da3c7a98bdf70a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Template was not rendered, but render events were triggered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5713d349525a0862f395dcfd7d33e0d427a33f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; The &lt;code&gt;selector&lt;/code&gt; or &lt;code&gt;el&lt;/code&gt; property could be used to set the region &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1147c808ade0323e892c82a613a204c5adf2c623" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; The Marionette.Error class was publicly available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32eca625a0aa2a12f68b4db3009f2e23c050b5ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; The default renderer could be changed by setting &lt;code&gt;Renderer.render&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61690c5c5f6cf93215e8b9ebdd48f039f6b8bca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; The package was exported as an UMD module with all classes / functions as a property of the default export</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df204596c736b7b4f9f0bd1251659d4e03af159" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; These classes extended &lt;code&gt;Mn.Object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e196b21f44e47ec1c30908499d37f399dbf0aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; These methods returned the region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c1a3a97316463aced8c572a7a00aa18e7ddbd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; This method was use to &lt;code&gt;triggerMethod&lt;/code&gt; on an object that did not have the method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d374312b48bc7ad8d59af844cfd102a5a0057ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; Utility function &lt;code&gt;isNodeAttached&lt;/code&gt; was provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd3cc0b1cd15e3277fcd129a60911b04f6a1e73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; View behaviors could optionally be looked up via the global lookup naming scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f0a846927e4874bb149245ada96b98fbebb83b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; model attributes were always cloned prior to template rendering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7d091b556bb17767b8882dba0e9ecdd9de6a90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt; view.render was bound to the view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18414f3d7d24eca26473a11739b52a6caf9841fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt;&lt;code&gt;Backbone.View&lt;/code&gt; instances were supported as is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80edbf8a0d13bc3e69d23746d987824aff4d19ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt;&lt;code&gt;CompositeView&lt;/code&gt; class was provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d35c353e845e2c1b59437cde75ae18038b7a15d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt;&lt;code&gt;DEV_MODE&lt;/code&gt; was set on the global &lt;code&gt;Marionette&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13650a3398f7c5e334fabd346204d61d8173ecc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt;&lt;code&gt;_.bind&lt;/code&gt; was used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0638b4ca2c11fcc4ccf571e51a7b5de3381082fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt;&lt;code&gt;attachElContent&lt;/code&gt; was always called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbcebbcc6e2f075ea83017bbe2e5cfb5bc61e3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt;&lt;code&gt;childViewEventPrefix&lt;/code&gt; flag was set to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6e7650cc6d3a8f353365fad31cbc41cc86eb7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt;&lt;code&gt;noConflict&lt;/code&gt; allowed for multiple installs of Marionette to be installed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff03edc5fab767712a24a44f63f34f99a791900" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Old behavior:&lt;/strong&gt;&lt;code&gt;options&lt;/code&gt; defined on the view definition were merged into &lt;code&gt;options&lt;/code&gt; and passed to the Backbone.View constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b30efb94ab440c2ec0e98636f172268ab105e09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; API simplification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6c4c18d09c3022f6869bb8ab293e0005b530c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Align with current JS standard practice, allow tree shaking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47d40b1a667e376c812f879996227fdb50d9561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; AppRouter was used by a minority of cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dea2dfdbbfd10532679c75b9afb22eb28ebe286" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Improve performance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf256e6716dbdf94a063da673c7a72a100d77b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Isn't useful with ES6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc6fc64d3972e06ba547773ca059c225623811b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; More useful return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc19a4f05ef9eb56b8a58021ca8c6fade5e451c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Performance Improvement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7ed988c373bb6410cd184ab6c6a55aebddf41d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Preparing for lodash 5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bc9978a0764102e376d0e62d8f9b2d6be9c22b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Prevents incorrect usage of &lt;code&gt;render&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edd153884a5bad6282adb63f7ced6edfe131e84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Shallow inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23eb5b4ab45cd20375792333dd668ead538c1943" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Simplify API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24e20e357b0d03eb88f6f406a42367254cc448d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Simplify API and maintenance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ab8efcf0d3375c450b7658d843b207567dc4e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Simplify API and no global Marionette instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9c558b5faf819d452fb5ae6b0e979badd437f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Support named exports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d70db2a05a3b2969b625556d952e3c822a3595b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; TemplateCache is only used by a minority of users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40381e9de02f142a2736d483976f3e78e3b6aa7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; There is no longer a global &lt;code&gt;Marionette&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9a578754089016dda809064ae87d51c6f2e0c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason:&lt;/strong&gt; Useful for renderers that modify the content directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9abc16c3dbfd8af15f2ea4f404fcdffba33c9dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Attach behaviors to view definitions. In v3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1520f9da62210a1360227df7adbad61cd808cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Define any default Backbone.View options on the view instance directly instead of in a nested &lt;code&gt;options&lt;/code&gt; on the definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89eff49bcf1eede1a96df030ed5bf0c50d8bda9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; If modifying the &lt;code&gt;Object&lt;/code&gt; prototype you may need to modify the others too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8947679abff864e17b2fc97ff8f5cada44ec75ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; If needed use &lt;a href=&quot;https://github.com/marionettejs/marionette.templatecache&quot;&gt;https://github.com/marionettejs/marionette.templatecache&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874c272d68dccfaa6c971bb0749f2835038df836" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; If vanilla &lt;code&gt;Backbone.View&lt;/code&gt; is not used there's no required change, otherwise, apply the &lt;code&gt;Marionette.Events&lt;/code&gt; mixin&lt;code&gt;to the
prototype of the view class intended to be used with&lt;/code&gt;Marionette`. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd79f9c4b0d977cc6a6b8f05e9b11f116d493c91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; If you need to pass multiple pieces of data through &lt;code&gt;destroy&lt;/code&gt; use an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3977d6853196a31f1fcede5a4806367276d292bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Import Marionette classes directly or use global Marionette instance (when using as a standalone script)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a187d4c513fda46eb81f6db16edfc6e724c13f12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Import each Marionette classses / functions separatedly or with * keyword Examples: ```javascript // using ES module syntax // old behavior import Mn from 'backbone.marionette'; const MyView = Mn.View.extend({});</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fe244be3a7aa7c321949cd2915f3965085eae0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; In most all cases this won't matter but if you need to call the render function out of the context, use &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d4b38c3c9702ceeeb906124128533dbd1d2f10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; It is recommended that child view events are proxied only when necessary. Rather than turning it on globally, set the &lt;code&gt;childViewEventPrefix&lt;/code&gt; per view that needs it. Even better explictly define the proxies via &lt;code&gt;childViewEvents&lt;/code&gt; and &lt;code&gt;childViewTriggers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b0bde654aca1c1945994ca1332c4861b10bbaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Rename any &lt;code&gt;selector&lt;/code&gt; used with Region to &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f978ba58231340d518022168b997e212d04e08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Rename any use of &lt;code&gt;defaults&lt;/code&gt; to &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98372acd013b569f8dc6b58c57ac42f72535640e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Return at least an empty string if you need to have &lt;code&gt;attachElContent&lt;/code&gt; called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc8b765e0b7d95b1c18bf71634d893c7f17ffd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Same as supporting a vanilla Backbone.View mentioned above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd938e49ee2e3f455c3a7b0db24fa96f33883640" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; This may affect anyone hoping to squeeze &amp;lt; IE9 support out of Marionette.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474d3a3caf0caf3230e14b90873752d3492bb0cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Unlikely to be an issue but if no &lt;code&gt;templateContext&lt;/code&gt; is defined templates can modify the actual model data if not careful. Clone if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826175d42914643013c82d62fbaea0f1de3e27c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Use &lt;code&gt;CollectionView&lt;/code&gt; instead. Most features of &lt;code&gt;CompositeView&lt;/code&gt; were added to &lt;code&gt;CollectionView&lt;/code&gt; and in common cases a class rename is enough. The old &lt;code&gt;CompositeView&lt;/code&gt; was abstracted to a &lt;a href=&quot;https://github.com/marionettejs/marionette.oldcollectionview&quot;&gt;separate library&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc2a7def0cda2cfeac48270e580f49aa3bb0086" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Use &lt;code&gt;CollectionView&lt;/code&gt; instead. The old &lt;code&gt;CollectionView&lt;/code&gt; was abstracted to a &lt;a href=&quot;https://github.com/marionettejs/marionette.oldcollectionview&quot;&gt;separate library&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dacbc7864fa44ce1f5ad9b7fee21502f2a48e3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Use &lt;code&gt;Marionette.setRenderer&lt;/code&gt; which accepts a function with same signature as expected by &lt;code&gt;Renderer.render&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0cb7aaf1d93095cf35e8349d8b3b16b43e4aa83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Use &lt;code&gt;detachView&lt;/code&gt; first if you need to remove a shown view without destroying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d012789c1612dda733b113be79d8363cd6947ed3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Use &lt;code&gt;getRegion&lt;/code&gt; if the region is needed after this method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abdb12b981f6ee75f049cdf682ed42a76b446fc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Use any router including the extract AppRouter &lt;a href=&quot;https://github.com/marionettejs/marionette.approuter&quot;&gt;https://github.com/marionettejs/marionette.approuter&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f204873032c12abefca713b1e94986b91716ebc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Use native code: &lt;code&gt;document.documentElement.contains(el)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed07e92fc6045c2d64f5083517936c4a9ee5d9f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt; Use package managers if multiple versions are needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1361eaf8cb232bfd8aa332cea798366b5ea9a62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remedy:&lt;/strong&gt;&lt;code&gt;template: false&lt;/code&gt; was often used to generate render events when no render was performed. Use other hooks or methods when no template will be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf52472e0ebe26a6670fa530b29b4ab2477acd70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;triggerMethod&lt;/code&gt; method is available to &lt;a href=&quot;common#triggermethod&quot;&gt;all Marionette classes&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874112eb15640a3b13b1481f5cb54db87797a600" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This Section only covers the basics. For more information on regions, see the &lt;a href=&quot;marionette.region&quot;&gt;Regions Documentation.&lt;/a&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4a969213734f614b438598142efe9bf254f7ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When passing a method reference, the method must exist on the View.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28be653f79cc2b29ece39be3b1575c39d580fe8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Behavior&lt;/code&gt; provides a clean separation of concerns to your view logic, allowing you to share common user-facing operations between your views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae0307a74d248c876010871ba76d982ff672205" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Behavior&lt;/code&gt;'s view events &lt;a href=&quot;marionette.behavior#proxy-handlers&quot;&gt;are proxied directly on the behavior&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8087050758bb2a9b464b0476ff80bbf5d6dc6c99" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollectionView&lt;/code&gt; can have &lt;a href=&quot;#marionettebehavior&quot;&gt;&lt;code&gt;Behavior&lt;/code&gt;s&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a6eb5afc74778a6a240a37e2c3eeb7d9d04e46" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollectionView&lt;/code&gt; can have &lt;a href=&quot;marionette.behavior&quot;&gt;&lt;code&gt;Behavior&lt;/code&gt;s&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5cfbf5ccfe840f599e44a885c59328b16ebebe" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollectionView&lt;/code&gt; like &lt;code&gt;View&lt;/code&gt; manages a portion of the DOM via a single parent DOM element or &lt;code&gt;el&lt;/code&gt;. This view manages an ordered set of child views that are shown within the view's &lt;code&gt;el&lt;/code&gt;. These children are most often created to match the models of a &lt;code&gt;Backbone.Collection&lt;/code&gt; though a &lt;code&gt;CollectionView&lt;/code&gt; does not require a &lt;code&gt;collection&lt;/code&gt; and can manage any set of views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56817e6287485c1d2784362b71c50fd08a7c150" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;View&lt;/code&gt; can have &lt;a href=&quot;#marionetteregion&quot;&gt;&lt;code&gt;Region&lt;/code&gt;s&lt;/a&gt; and &lt;a href=&quot;#marionettebehavior&quot;&gt;&lt;code&gt;Behavior&lt;/code&gt;s&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31d44b80c644eb9887ecaca8dbdf4a191c3f106" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;View&lt;/code&gt; can have &lt;a href=&quot;marionette.region&quot;&gt;&lt;code&gt;Region&lt;/code&gt;s&lt;/a&gt; and &lt;a href=&quot;marionette.behavior&quot;&gt;&lt;code&gt;Behavior&lt;/code&gt;s&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fdf38d0b016d2bef29a60bf95f4e20cc24f08b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;View&lt;/code&gt; is used for managing portions of the DOM via a single parent DOM element or &lt;code&gt;el&lt;/code&gt;. It provides a consistent interface for managing the content of the &lt;code&gt;el&lt;/code&gt; which is typically administered by serializing a &lt;code&gt;Backbone.Model&lt;/code&gt; or &lt;code&gt;Backbone.Collection&lt;/code&gt; and rendering a template with the serialized data into the &lt;code&gt;View&lt;/code&gt;s &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc80c3be3924b222841d4825634797e5c966d800" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;childViewTriggers&lt;/code&gt; hash or method permits proxying of child view events without manually setting bindings. The values of the hash should be a string of the event to trigger on the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540d92d675012b49da4c92a42d8a5f34e7fdac9c" translate="yes" xml:space="preserve">
          <source>A Child View's Event Prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf88a3d5540a64b55f7b8a833a2396dbc845f7a" translate="yes" xml:space="preserve">
          <source>A Request is, as you might guess, a request for information or for something to happen. You will probably want to use requests when:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1941f11bd477686bd21d3891fad29c1141edae92" translate="yes" xml:space="preserve">
          <source>A handy function to pluck certain &lt;code&gt;options&lt;/code&gt; and attach them directly to an instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355c2b104e4220a90d9274c88beb8c519f7f81cf" translate="yes" xml:space="preserve">
          <source>A highly opinionated, simplistic Backbone.Router coupled with a Backbone.Radio.Channel. When an event is triggered on the channel, it will set the route URL, or when a URL matches a route it will throw an event on the channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a522aa53a26c499f824cbcae822d21434c984a18" translate="yes" xml:space="preserve">
          <source>A number of lifecycle events were changed or removed from Marionette 3. Information on which ones were removed, changed, or added will be found here with recommendations on how to update your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e14ee8298e730857b354f0bfb4b192d9140a45" translate="yes" xml:space="preserve">
          <source>A region can be &lt;code&gt;reset&lt;/code&gt; at any time. This destroys any existing view being displayed, and deletes the cached &lt;code&gt;el&lt;/code&gt;. The next time the region shows a view, the region's &lt;code&gt;el&lt;/code&gt; is queried from the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0842da35a82be72edb5bb3b953fb55ad9f49c6bb" translate="yes" xml:space="preserve">
          <source>A region can be destroyed which will &lt;code&gt;reset&lt;/code&gt; the region, remove it from any parent view, and stop any internal region listeners. A destroyed region should not be reused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5f7b449c23b2bd6c716819879432ebf44db542" translate="yes" xml:space="preserve">
          <source>A template is a function that given data returns either an HTML string or DOM. &lt;a href=&quot;#rendering-the-template&quot;&gt;The default renderer&lt;/a&gt; in Marionette expects the template to return an HTML string. Marionette's dependency Underscore comes with an HTML string &lt;a href=&quot;http://underscorejs.org/#template&quot;&gt;template compiler&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249dfaafc05e6196e8499796c449b33b22d3563f" translate="yes" xml:space="preserve">
          <source>A view is detached when its &lt;code&gt;el&lt;/code&gt; is removed from the DOM. The best time to clean up any listeners added to the &lt;code&gt;el&lt;/code&gt; is in the &lt;a href=&quot;events.class#detach-and-beforedetach-events&quot;&gt;&lt;code&gt;before:detach&lt;/code&gt; event&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="df325db8b77f500b6cdf947d62422aad373e0aea" translate="yes" xml:space="preserve">
          <source>API Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83eb7919f82fd4225a6b85b5359a3da7fb02040" translate="yes" xml:space="preserve">
          <source>Accessing UI Elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9114a556478c3eb657182e388ded5b77ff53cb1" translate="yes" xml:space="preserve">
          <source>Accessing a Child View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cbe8af311e0da8194d21f16ab584e715ec270a" translate="yes" xml:space="preserve">
          <source>Add a leading &lt;code&gt;on&lt;/code&gt; - &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;Before&lt;/code&gt;, &lt;code&gt;Dom&lt;/code&gt;, &lt;code&gt;Refresh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0546f3e4257b98f649cbdbee40ee4a5c0454628e" translate="yes" xml:space="preserve">
          <source>Add them!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b8bcc9452e9460fe9081fa0e66a17ea520de44" translate="yes" xml:space="preserve">
          <source>Adding Context Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c518c8c5a37e18eb39d86997b856676cd8731a8" translate="yes" xml:space="preserve">
          <source>Adding Regions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b836e2072c4c4e0a77fcbe9e2cf6a46d5ba638da" translate="yes" xml:space="preserve">
          <source>Adding a Child View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9eb5283f513cbb08a94332d67b3a1a8a7fac04a" translate="yes" xml:space="preserve">
          <source>Adding managed children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fc3411ecfe0851297299b5a216cead703c2407" translate="yes" xml:space="preserve">
          <source>Adding unmanaged children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c313de6babf318503fdf433e2471023cd78a727c" translate="yes" xml:space="preserve">
          <source>Additional Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbc5280497a8d45a9ce909c09bc9f1774134f4a" translate="yes" xml:space="preserve">
          <source>Additionally a DOM API can be partially set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5084b8b81f1e8666432f0bb38e74d316a1e9aee6" translate="yes" xml:space="preserve">
          <source>Additionally check out &lt;a href=&quot;features&quot;&gt;features&lt;/a&gt; for some configurable options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa22eeae1665a20e16a42a29261fc0bd7a2e6c4" translate="yes" xml:space="preserve">
          <source>Additionally context data overwrites the serialized data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc0dd890e4147013116075d22d3d9830ed42c79" translate="yes" xml:space="preserve">
          <source>Advanced Event Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9ce6d24a5c894601887f66eed0498f98ab1fea" translate="yes" xml:space="preserve">
          <source>After installing Marionette you might want to check out the basics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fc6250c291c95ee41050e36fccd02e26be1e7c" translate="yes" xml:space="preserve">
          <source>After the initial &lt;code&gt;render&lt;/code&gt; the &lt;code&gt;CollectionView&lt;/code&gt; binds to the &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; events of the &lt;code&gt;collection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73f0f7cb53efe77cf6568b5d386a5f5b71f8c59" translate="yes" xml:space="preserve">
          <source>After the view and behavior are &lt;a href=&quot;marionette.behavior#events--initialize-order&quot;&gt;constructed and initialized&lt;/a&gt;, the last event to occur is an &lt;code&gt;initialize&lt;/code&gt; event on the behavior which is passed the view instance and any options passed to the view at instantiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db86cce5c5c20938b97504cb68a73d8d2841dd4" translate="yes" xml:space="preserve">
          <source>All arguments that are passed to the &lt;code&gt;triggerMethod&lt;/code&gt; call are passed along to both the event and the method, with the exception of the event name not being passed to the corresponding method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae0751978b4306b71a7769a38a8e34d3a4035c9" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://github.com/marionettejs/marionette-v3-compat&quot;&gt;upgrade tool&lt;/a&gt; is available and covers the breaking changes in detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c890b75dbd0d7a30c5821f1bc0b51f1050b59f5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Application&lt;/code&gt; can have a single &lt;a href=&quot;marionette.application#application-region&quot;&gt;region&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42a2169fd9a5b3f6a53b44e204a7c3c1dbdf843" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Application&lt;/code&gt; provides a single &lt;a href=&quot;marionette.region&quot;&gt;region&lt;/a&gt; for attaching a view tree. The &lt;code&gt;region&lt;/code&gt; property can be &lt;a href=&quot;marionette.region#defining-regions&quot;&gt;defined in multiple ways&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bcf51505b2e2b41118650dd18ee3cd74352b42" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Application&lt;/code&gt; provides hooks for organizing and initiating other elements and a view tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1499c1c48a57f9c571e4887bb6d1bf28d5a56612" translate="yes" xml:space="preserve">
          <source>An advanced router for MarionetteJS applications. Includes nested routes, states, rendering, async operations, lazy loading routes, Radio channel eventing, and inherits most of CherryTree features while maintaining a similar to Marionette API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afa0cb2ba20b1e1ae4017601628b19953640385" translate="yes" xml:space="preserve">
          <source>An instantiated &lt;code&gt;CollectionView&lt;/code&gt; is aware of its lifecycle state and will throw events related to when that state changes. The view states indicate whether the view is rendered, attached to the DOM, or destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e11909e9e3fe54643c2002546949269397d32b0" translate="yes" xml:space="preserve">
          <source>An instantiated &lt;code&gt;View&lt;/code&gt; is aware of its lifecycle state and will throw events related to when that state changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f747583e378b44256edb25b3b42cd9096c190875" translate="yes" xml:space="preserve">
          <source>Any defined regions within a &lt;code&gt;View&lt;/code&gt; will be available to the &lt;code&gt;View&lt;/code&gt; or any calling code immediately after rendering the &lt;code&gt;View&lt;/code&gt;. Using &lt;code&gt;getRegion&lt;/code&gt; or any of the child view methods above will first render the view so that the region is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00ee8cc4366a76ba1c395bf89f8449fa066018a" translate="yes" xml:space="preserve">
          <source>AppRouter was removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="3867c226b4789bef9369cb3dd374029b9502dab5" translate="yes" xml:space="preserve">
          <source>Application &lt;code&gt;destroy&lt;/code&gt; events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d9ac0286bd4cf919461e1e4f7426fee4f1df01" translate="yes" xml:space="preserve">
          <source>Application Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e231798bfdd9f5bb0ee0930339fa900626ec076" translate="yes" xml:space="preserve">
          <source>Application Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87afdeb5fd2e5c227b941cae2941bd1db1923d49" translate="yes" xml:space="preserve">
          <source>Application Region Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9c5a1fc6433fa8c072f661bf8b7b0f66d00344" translate="yes" xml:space="preserve">
          <source>Arguments for Lifecycle Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0305a50f55dd15b629e361c1a4f861fe3cd0732" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;$saveButton&lt;/code&gt; here is a jQuery selector, you can call any jQuery methods on it, according to the jQuery documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c602b4510f34d45b901d49a5e8228f30a1dc598" translate="yes" xml:space="preserve">
          <source>As a general rule, &lt;code&gt;onBeforeDestroy&lt;/code&gt; is the best handler for cleanup as the instance and any internally created children are already destroyed by the time &lt;code&gt;onDestroy&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edc35396c13aadd127ff8449b04e34f3df85c00" translate="yes" xml:space="preserve">
          <source>As before, all arguments passed into &lt;code&gt;triggerMethod&lt;/code&gt; after the event name will make their way into the event handler. Using this method ensures there will be no unexpected memory leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d952a354d1d0380f980458cc1b7e776fa954393" translate="yes" xml:space="preserve">
          <source>As in &lt;a href=&quot;http://backbonejs.org/#Events&quot;&gt;Backbone&lt;/a&gt;, &lt;code&gt;listenTo&lt;/code&gt; will pass the object it is called on in as the context variable. These behave exactly as in Backbone, so using &lt;code&gt;object.on&lt;/code&gt; will require you to unhook any event handlers yourself to prevent memory leaks. Marionette, however, does provide extra helpers as part of the view lifecycle that bind and unbind event handlers for you. this is the core of &lt;code&gt;onEvent&lt;/code&gt; Binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de315c921e70ff38b639ded99317243dd8ca3f54" translate="yes" xml:space="preserve">
          <source>As in Backbone, the event handler is called with &lt;code&gt;this&lt;/code&gt; bound to the &lt;code&gt;Star&lt;/code&gt; instance. See the &lt;a href=&quot;http://backbonejs.org/#Events&quot;&gt;Backbone documentation&lt;/a&gt; for the full list of Event handling methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af7c2945226ddcea5f1c218e3fa81e8c6e75011" translate="yes" xml:space="preserve">
          <source>As in views, &lt;code&gt;events&lt;/code&gt; and &lt;code&gt;triggers&lt;/code&gt; can use the &lt;code&gt;ui&lt;/code&gt; references in their listeners. For more details, see the &lt;a href=&quot;dom.interactions#organizing-your-view&quot;&gt;&lt;code&gt;ui&lt;/code&gt; documentation&lt;/a&gt;. These can be defined on either the Behavior or the View:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41a24483b5ad642aa043596a4d2f82f882cee15" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#advanced-event-settings&quot;&gt;Advanced Event Settings&lt;/a&gt; some DOM events are triggers from the view event monitor that will handle DOM attachment related events down the view tree. Backbone View's won't have the functionality unless the monitor is added. This will include all &lt;a href=&quot;#dom-change-events&quot;&gt;DOM Change Events&lt;/a&gt; other than render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af97ec9b3b9d2008e6ae87cbeb5ca98788894743" translate="yes" xml:space="preserve">
          <source>As shown the &lt;code&gt;options&lt;/code&gt; object is passed into the &lt;code&gt;Application&lt;/code&gt; as the second argument to &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f9a770b3f3d7848b70ca962fd3d4691b742cb7" translate="yes" xml:space="preserve">
          <source>As the Radio can be imported anywhere, we can use it as a global event aggregator as such:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24413f561e5bc21be599abd30bf88d5feb36fcd2" translate="yes" xml:space="preserve">
          <source>As we can see, almost all of the attributes here can be worked out dynamically. In most cases, Marionette will call the function once at instantiation, or first render, and preserve the value throughout the lifetime of the View. There are some exceptions to this rule - these will be referred to with their respective documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b7dedf5677df726796afa104ac7ab0c5acdd37" translate="yes" xml:space="preserve">
          <source>As when passing a string reference to a view method, the &lt;code&gt;events&lt;/code&gt; attribute passes in the &lt;code&gt;event&lt;/code&gt; as the argument to the function called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62050147f8a7ba4b1053af70e20a9eafde6073ab" translate="yes" xml:space="preserve">
          <source>As with a normal request/reply, we can return values from these bound handlers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c94cb99b8b7637a6db2c0dbd5152a9830cef9b9" translate="yes" xml:space="preserve">
          <source>As with all JavaScript libraries, there are a number of ways to get started with a Marionette application. In this section we'll cover the most common ways. While some integrations are listed here, more resources are available in the integrations repo: &lt;a href=&quot;https://github.com/marionettejs/marionette-integrations&quot;&gt;marionette-integrations&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1dcbd2f80c1c62fa936fa47119384c29685f571" translate="yes" xml:space="preserve">
          <source>As with request, any arguments passed in &lt;code&gt;channel.request&lt;/code&gt; will be passed into the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a2f123c68d3f4b05d832f75a1f19a433bc4be9" translate="yes" xml:space="preserve">
          <source>As you can see above, you can listen to &lt;a href=&quot;view.lifecycle&quot;&gt;Lifecycle Events&lt;/a&gt; on &lt;code&gt;Backbone.View&lt;/code&gt; and Marionette will fire the events for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7f3311f46577029c5db26592fc35d0afd804e8" translate="yes" xml:space="preserve">
          <source>Attaching &lt;code&gt;children&lt;/code&gt; within the &lt;code&gt;el&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edeb9255dac04669b6cafec2b71c579bae2200d1" translate="yes" xml:space="preserve">
          <source>Attaching Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bead612c607e52b355b9411a0f484d1d8b08c9d3" translate="yes" xml:space="preserve">
          <source>Attaching a Child View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cdb6873c99de3087e7afb18e3eef3663c2f82b" translate="yes" xml:space="preserve">
          <source>Attaching a View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed55edd6a000d04069c3fd8cad03957c26ac679" translate="yes" xml:space="preserve">
          <source>BabySitter provides a simple way to manage child views in Backbone/Marionette or any object that manages lists of views. The external Babysitter library was used in Marionette to manage the &lt;code&gt;CollectionView&lt;/code&gt; children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9eb608e6d9438704e04c8b75588848db39ae296" translate="yes" xml:space="preserve">
          <source>Backbone Radio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fbb6deb4be09c0c0db41a7226361a4b9986ae6" translate="yes" xml:space="preserve">
          <source>Backbone jQuery Integration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff50f658581ba559ad4fe566b182cccc8c5a8310" translate="yes" xml:space="preserve">
          <source>Backbone's &lt;code&gt;extend&lt;/code&gt; function is a useful utility to have, and is used in various places in Marionette. To make the use of this method more consistent, Backbone's &lt;code&gt;extend&lt;/code&gt; has been exported &lt;code&gt;extend&lt;/code&gt;. This allows you to get the extend functionality for your object without having to decide if you want to use Backbone.View or Backbone.Model or another Backbone object to grab the method from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56438a62e17a5e88da733910e14cccdb2d9df259" translate="yes" xml:space="preserve">
          <source>Backbone.Babysitter</source>
          <target state="translated">Backbone.Babysitter</target>
        </trans-unit>
        <trans-unit id="b5c41fa54ff5bff7637fc93c1399a4d8514292e3" translate="yes" xml:space="preserve">
          <source>Backbone.Eventrouter</source>
          <target state="translated">Backbone.Eventrouter</target>
        </trans-unit>
        <trans-unit id="48920b35ad96a44fb0b8e38134709d050feab94e" translate="yes" xml:space="preserve">
          <source>Backbone.Marionette</source>
          <target state="translated">Backbone.Marionette</target>
        </trans-unit>
        <trans-unit id="2d447e5d372f74b9cacd843a7f4546129126c4aa" translate="yes" xml:space="preserve">
          <source>Backbone.js is tied to jQuery's API for managing DOM manipulation. If you want to completely remove jQuery from your Marionette app, you'll also have to provide your own versions of the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57702bfb28ed9547528aa68a728d20b92c526740" translate="yes" xml:space="preserve">
          <source>Backwards Compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8932006bc9fb215b4928a3cadf6c2845e613b82" translate="yes" xml:space="preserve">
          <source>Basic Use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2eb88bdcc1320e097251348c850cd5c3072fbd" translate="yes" xml:space="preserve">
          <source>Be default all events triggered on the behavior come from the view or the view's entities. Events triggered in the behavior instance are not executed in the view. To notify the view, the behavior must trigger an event in its view property, e.g, &lt;code&gt;this.view.trigger('my:event')&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cb647a88bd7c9c17d225eecdaf0f898261eb60" translate="yes" xml:space="preserve">
          <source>Behavior</source>
          <target state="translated">Behavior</target>
        </trans-unit>
        <trans-unit id="d32655caf4f4e5425abc6d1ab229077e08d43af3" translate="yes" xml:space="preserve">
          <source>Behavior Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be609e232bbcd65be414c812508075b0fedf8c9" translate="yes" xml:space="preserve">
          <source>Behavior Lookup was removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4e50b60195db74c115949afac475b5e5d58de8" translate="yes" xml:space="preserve">
          <source>Behavior Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52c7281871f2b828bbec27f87138e517c2c27e9" translate="yes" xml:space="preserve">
          <source>Behavior is constructed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a93319b330f59145b229f89c6f22ffe90b8fa34" translate="yes" xml:space="preserve">
          <source>Behavior is initialized with view property set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b615d319efe934d18d838650aea75dd222232f9" translate="yes" xml:space="preserve">
          <source>Behaviors</source>
          <target state="translated">Behaviors</target>
        </trans-unit>
        <trans-unit id="544bd3855a268c9f9af4d952821689a7ac191b2b" translate="yes" xml:space="preserve">
          <source>Behaviors are powered by an event proxy. This means that any events that are triggered on a &lt;code&gt;View&lt;/code&gt; are passed to all attached &lt;code&gt;behaviors&lt;/code&gt;. This includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb23851aee40ffa1c60d1c21baad39b516217bd" translate="yes" xml:space="preserve">
          <source>Behaviors provide proxies to a number of the view event handling attributes including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b3a3832d166c4baa09690121d8ac7756dbb9b5" translate="yes" xml:space="preserve">
          <source>Besides the router &lt;a href=&quot;http://backbonejs.org/#Router&quot;&gt;bundled with Backbone&lt;/a&gt; there are many viable routing solutions available. Some specifically designed for Backbone or Marionette and some that are generic solutions for any framework. Here are a few of those options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59824b29e215a2b4ccc3982742a5f452e31a828d" translate="yes" xml:space="preserve">
          <source>Binding Attributes on Instantiation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93340eb082e194893a481938be42e4db3c36ec5" translate="yes" xml:space="preserve">
          <source>Binding To User Input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77caa19195952cb4d687beeb4b59909a9c44099" translate="yes" xml:space="preserve">
          <source>Borrowed from backbone, &lt;code&gt;extend&lt;/code&gt; is available on all class definitions for &lt;a href=&quot;basics#class-based-inheritance&quot;&gt;class based inheritance&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b982f4f97c0492d8e94173c9bc75a6d64a773b" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;classes&quot;&gt;&lt;code&gt;View&lt;/code&gt; and &lt;code&gt;CollectionView&lt;/code&gt;&lt;/a&gt; are aware of their lifecycle state which indicates if the view is rendered, attached to the DOM or destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe3c7388b4cbb630ef80c9435fc62b00b762cd3" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;View&lt;/code&gt; and &lt;code&gt;CollectionView&lt;/code&gt; share methods for checking lifecycle state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7530d6c7a886906496078b102ac6c4ed92a25a" translate="yes" xml:space="preserve">
          <source>Both forms take an &lt;code&gt;options&lt;/code&gt; object that will be passed to the &lt;a href=&quot;events.class#show-and-beforeshow-events&quot;&gt;events fired during &lt;code&gt;show&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984e0c021a2a657b2507abec38c2c3b5e6d854d6" translate="yes" xml:space="preserve">
          <source>Browserify and Grunt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989f8d98e4618532931508d10b39d5fbf8d12d22" translate="yes" xml:space="preserve">
          <source>Browserify and Gulp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b422b88da4a9bbba47f8ca2c758779a1a54278" translate="yes" xml:space="preserve">
          <source>Bubbled child events no longer pass the &lt;code&gt;childView&lt;/code&gt; implicitly and only pass the arguments passed as part of &lt;code&gt;triggerMethod&lt;/code&gt;. This means that the arguments passed to &lt;code&gt;onEvent&lt;/code&gt; and &lt;code&gt;onChildviewEvent&lt;/code&gt; are now identical. See the &lt;a href=&quot;view.lifecycle&quot;&gt;documentation on event lifecycles&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1092ef56f6ab0a0bb36539a816d43a038db6127" translate="yes" xml:space="preserve">
          <source>Building the &lt;code&gt;children&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf99289b6ad12b328ac656c23ff76d5d846bb95c" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;CollectionView&lt;/code&gt; has no defined &lt;code&gt;template&lt;/code&gt; and will only attempt to render the &lt;code&gt;template&lt;/code&gt; if one is defined. For &lt;code&gt;View&lt;/code&gt; there may be some situations where you do not intend to use a &lt;code&gt;template&lt;/code&gt;. Perhaps you only need the view's &lt;code&gt;el&lt;/code&gt; or you are using &lt;a href=&quot;dom.prerendered&quot;&gt;prerendered content&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b94049c7127f2810e9defd496d10ef38306a961" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;ui&lt;/code&gt; is only bound to the elements within the &lt;a href=&quot;#rendering-a-template&quot;&gt;template&lt;/a&gt;. However as &lt;code&gt;events&lt;/code&gt; and &lt;code&gt;triggers&lt;/code&gt; are delegated to the view's &lt;code&gt;el&lt;/code&gt; they will apply to any children. There may be instances where binding &lt;code&gt;ui&lt;/code&gt; is helpful when you want to access elements inside &lt;code&gt;CollectionView&lt;/code&gt;s children with &lt;a href=&quot;dom.interactions#accessing-ui-elements&quot;&gt;&lt;code&gt;getUI()&lt;/code&gt;&lt;/a&gt;. For these cases you will need to bind &lt;code&gt;ui&lt;/code&gt; yourself. To do so run &lt;code&gt;bindUIElements&lt;/code&gt; on the &lt;code&gt;CollectionView&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5611f4b928e3a39f9262db0fe09145a9f94478b" translate="yes" xml:space="preserve">
          <source>By default all trigger events are stopped with &lt;a href=&quot;features#triggerspreventdefault&quot;&gt;&lt;code&gt;preventDefault&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;features#triggersstoppropagating&quot;&gt;&lt;code&gt;stopPropagation&lt;/code&gt;&lt;/a&gt; methods. This by nature artificially scopes event handling to the view's template preventing event handling of the same selectors in child views. However you can manually configurethe triggers using a hash instead of an event name. The example below triggers an event and prevents default browser behaviour using &lt;code&gt;preventDefault&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1e5a4ab83410fa3157f993140ee0f675f64c36" translate="yes" xml:space="preserve">
          <source>By default the &lt;a href=&quot;marionette.region&quot;&gt;&lt;code&gt;Region&lt;/code&gt;&lt;/a&gt; is used to instantiate the &lt;code&gt;Application&lt;/code&gt;'s region. An extended Region can be provided to the &lt;code&gt;Application&lt;/code&gt; definition to override the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c42539cf4c61e5ae289f2f0abcd355180d2e43" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;CollectionView&lt;/code&gt; will add the HTML of each ChildView into an element buffer array, and then call the DOM API's &lt;a href=&quot;dom.api#appendcontentsel-contents&quot;&gt;appendContents&lt;/a&gt; once at the end to move all of the HTML within the collection view's &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1891feed7be1618dbbf39981228b45578edc1976" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;CollectionView&lt;/code&gt; will maintain a sorted collection's order in the DOM. This behavior can be disabled by specifying &lt;code&gt;{sortWithCollection: false}&lt;/code&gt; on initialize or on the view definiton.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6f0997fa0e805cf4a6a0d668bf5321787e994b" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;CollectionView&lt;/code&gt; will maintain a sorted collection's order in the DOM. This behavior can be disabled by specifying &lt;code&gt;{sortWithCollection: false}&lt;/code&gt; on initialize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1d17e7f34504e3f321c6e804500c93a7a0040c" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;CollectionView&lt;/code&gt; will render the children into the &lt;code&gt;el&lt;/code&gt; of the &lt;code&gt;CollectionView&lt;/code&gt;. If you are rendering a template you will want to set the &lt;code&gt;childViewContainer&lt;/code&gt; to be a selector for an element within the template for child view attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705e0a0e1a714b6be7bcd386d591d957f8e22f1a" translate="yes" xml:space="preserve">
          <source>By default the CollectionView will refilter when views change or when the CollectionView is sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26361ba1b79c846529e06fa3feb90115340a641" translate="yes" xml:space="preserve">
          <source>By prefixing with &lt;code&gt;@ui&lt;/code&gt;, we can change the underlying template without having to hunt through our view for every place where that selector is referenced - just update the &lt;code&gt;ui&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29368ba23391f121d21f2aa124566395d95a41e" translate="yes" xml:space="preserve">
          <source>By setting &lt;a href=&quot;view.rendering#using-a-view-without-a-template&quot;&gt;&lt;code&gt;template&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;&lt;/a&gt; you can entirely disable the view rendering and events. This may be useful for cases where you only need the &lt;code&gt;el&lt;/code&gt; or have &lt;a href=&quot;dom.prerendered&quot;&gt;&lt;code&gt;prerendered content&lt;/code&gt;&lt;/a&gt; that you do not intend to re-render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c55ab81fd55ae22e674e55d6b3b87b5b097ef12" translate="yes" xml:space="preserve">
          <source>Cache the jQuery selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3125cdb5e137bb8dcf4f4c138ffe4b4e6e74ff" translate="yes" xml:space="preserve">
          <source>Calling this method without a events hash will unbind all events from the channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0c1eb94b3b558fea0f01c6baa1b503c89e12bd" translate="yes" xml:space="preserve">
          <source>Calling this method without a radio requests hash will unbind all requests from the channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b80288cf035193ed46cc24f131dc014ad697e3" translate="yes" xml:space="preserve">
          <source>Capitalize the first letter of each word - &lt;code&gt;Before&lt;/code&gt;, &lt;code&gt;Dom&lt;/code&gt;, &lt;code&gt;Refresh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aaeca830c240c7ac49f3a4ea952ad7058346af5" translate="yes" xml:space="preserve">
          <source>Change all instances of &lt;code&gt;LayoutView&lt;/code&gt; and &lt;code&gt;ItemView&lt;/code&gt; to &lt;code&gt;View&lt;/code&gt;. Any views that previously extended &lt;code&gt;View&lt;/code&gt; with a custom &lt;code&gt;render&lt;/code&gt; should work relatively unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cce0c90ef22046cf4f721bdcd2a6086f9349ffb" translate="yes" xml:space="preserve">
          <source>Change all references to &lt;code&gt;view.region&lt;/code&gt; to &lt;code&gt;view.getRegion('region')&lt;/code&gt;. For example, in Mn 2.x and below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263ecb36d6f5e51faa407484e1fdf7e598753259" translate="yes" xml:space="preserve">
          <source>Changes to &lt;code&gt;region.show()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879f0b1bef59eeebf78cfd3a22f6f8077810cecf" translate="yes" xml:space="preserve">
          <source>Channel</source>
          <target state="translated">Channel</target>
        </trans-unit>
        <trans-unit id="3e33386c5a11adb27b76d5db0c4a7d77c6da334f" translate="yes" xml:space="preserve">
          <source>Check If View Is Being Swapped By Another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4528af27f1abdb183ac587e052ccc3bc4be2d8" translate="yes" xml:space="preserve">
          <source>Checking a Feature Flag State</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22acf5e368d4921595ae21dd5228ddadd6ed7a0" translate="yes" xml:space="preserve">
          <source>Checking a Feature Flag state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7f998c549c58f4fcd8c7280bcf504737341b64" translate="yes" xml:space="preserve">
          <source>Checking whether a region is showing a view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e520d27e2439883dfed4b121ef72d0d3b8950f" translate="yes" xml:space="preserve">
          <source>Child Event Bubbling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3db9006c8bfbf050fa23099db12d7ad7868915d" translate="yes" xml:space="preserve">
          <source>Child View Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d50ae30411d4b449fe3d1dbae5d1101f538c06" translate="yes" xml:space="preserve">
          <source>Child event bubbling above one level is now removed in most instances and deprecated pending removal everywhere else. This can no longer be relied upon. To pass events further up the chain, you must explicitly using &lt;code&gt;childViewTriggers&lt;/code&gt; to convert the event from the child into an event on the parent. These can be chained all the way up to the level you require them to be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308ad68b1358dbf6ecdc38c6fa80527a628a864f" translate="yes" xml:space="preserve">
          <source>Child event handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebc9a747d2746fd28a544d143ee0f3e841fa631" translate="yes" xml:space="preserve">
          <source>Children added to a &lt;code&gt;View&lt;/code&gt;'s region or through a &lt;code&gt;CollectionView&lt;/code&gt; will be automatically destroyed if the view is re-rendered, if the view is destroyed, or for &lt;code&gt;CollectionView&lt;/code&gt; if the &lt;code&gt;collection&lt;/code&gt; is reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6aee236ebc26fad5c792009976e4b652d1b1a0f" translate="yes" xml:space="preserve">
          <source>Children are automatically managed once the &lt;code&gt;CollectionView&lt;/code&gt; is &lt;a href=&quot;#rendering-a-collectionview&quot;&gt;rendered&lt;/a&gt;. For each model within the &lt;code&gt;collection&lt;/code&gt; the &lt;code&gt;CollectionView&lt;/code&gt; will build and store a &lt;code&gt;childView&lt;/code&gt; within its &lt;code&gt;children&lt;/code&gt; object. This allows you to easily access the views within the collection view, iterate them, find them by a given indexer such as the view's model or id and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ff354b2b330bd1f8a0587675e43cb32a731f33" translate="yes" xml:space="preserve">
          <source>Class</source>
          <target state="translated">Class</target>
        </trans-unit>
        <trans-unit id="c68b3b2ae02b8f56d2d2672979293f138f672a5f" translate="yes" xml:space="preserve">
          <source>Class Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9d78f59eef9d4c9911acf6671c6511089d1d04" translate="yes" xml:space="preserve">
          <source>Class-based Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaab9a41d7d4011724565ae6331c5fe5a6d29990" translate="yes" xml:space="preserve">
          <source>Class: Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adea018cc5c14d7d103a48cbd36bd6052d24349b" translate="yes" xml:space="preserve">
          <source>Class: Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc00c1b097699d2848f4973b09b210edaa4ebc7c" translate="yes" xml:space="preserve">
          <source>Class: CollectionView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0317a8771fe72c5668ac680f4cb423878f6946" translate="yes" xml:space="preserve">
          <source>Class: MnObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af548acbf7fdfd5f8b6c01e4f72c62deca25fac" translate="yes" xml:space="preserve">
          <source>Class: Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc97f49ce69c24e8b9517b5b23b5c4cf4df5d9e" translate="yes" xml:space="preserve">
          <source>Class: View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="5313519c70aee4e720815443114819ca236a31e6" translate="yes" xml:space="preserve">
          <source>Collection Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b694f50c7834bc4c7f77835e2ab555d6bd98885f" translate="yes" xml:space="preserve">
          <source>Collection events work exactly the same way as &lt;a href=&quot;#model-events&quot;&gt;&lt;code&gt;modelEvents&lt;/code&gt;&lt;/a&gt; with their own &lt;code&gt;collectionEvents&lt;/code&gt; key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2f5e92f531ececafbd7bf535da8e34ca447ac6" translate="yes" xml:space="preserve">
          <source>CollectionView</source>
          <target state="translated">CollectionView</target>
        </trans-unit>
        <trans-unit id="f9970cb6942d1f68c2298e13b409f717574d31ae" translate="yes" xml:space="preserve">
          <source>CollectionView &lt;code&gt;children&lt;/code&gt; Iterators And Collection Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166ca3eebc66b1b465c025434cb2993430c14bf1" translate="yes" xml:space="preserve">
          <source>CollectionView &lt;code&gt;children&lt;/code&gt;'s: &lt;code&gt;findByCid&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38404055688c1d183c262d1f1c809942784e30b2" translate="yes" xml:space="preserve">
          <source>CollectionView &lt;code&gt;children&lt;/code&gt;'s: &lt;code&gt;findByIndex&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036de607925addb9d97c807ce83fd6d2ba93634c" translate="yes" xml:space="preserve">
          <source>CollectionView &lt;code&gt;children&lt;/code&gt;'s: &lt;code&gt;findByModel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ad2286ad084d3fa1ecd0e26aff3c97a08e8225" translate="yes" xml:space="preserve">
          <source>CollectionView &lt;code&gt;children&lt;/code&gt;'s: &lt;code&gt;findByModelCid&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8505941d8501487ee44ab81490de1154cfbd21c" translate="yes" xml:space="preserve">
          <source>CollectionView &lt;code&gt;children&lt;/code&gt;'s: &lt;code&gt;findIndexByView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528c5bcf55a5b7eb4d0f1e9f6aec292949d568ae" translate="yes" xml:space="preserve">
          <source>CollectionView EmptyView Region Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e101d9865d365370b1981927c6e09d002b7acb0f" translate="yes" xml:space="preserve">
          <source>CollectionView Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e26e2b95183c4327f29b48b1d2c3e4a1b12ebc" translate="yes" xml:space="preserve">
          <source>CollectionView's &lt;code&gt;childView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782cbe9e8d559011e0fe711dc06f9f67e0ef22f5" translate="yes" xml:space="preserve">
          <source>CollectionView's &lt;code&gt;emptyView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7923f90c58c3ff4cebac17bf1f3f5432a0397f" translate="yes" xml:space="preserve">
          <source>CollectionView's &lt;code&gt;getEmptyRegion&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d19c8a88f85e9461319a33d5ef00933b87d6fd" translate="yes" xml:space="preserve">
          <source>Common Concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87835ced7cce734e9a2aa7797cd0ea443e855beb" translate="yes" xml:space="preserve">
          <source>Common Functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd400a8fdcefe3b4d0051f1d505bd8d7fbb7eefd" translate="yes" xml:space="preserve">
          <source>Common Functionality bindEvents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67c12d2501bf8a84ed6e8ccfcf394ff18576328" translate="yes" xml:space="preserve">
          <source>Common Functionality bindRequests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa06117987213fc2b678500f7779c9e1f4d41d24" translate="yes" xml:space="preserve">
          <source>Common Functionality extend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273764efb1443ad87a00c6dcaadc6f3e04c5537d" translate="yes" xml:space="preserve">
          <source>Common Functionality getOption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2656353abaddc4e368b6128dc6af102002d2287" translate="yes" xml:space="preserve">
          <source>Common Functionality initialize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273e15ac883eb42f07e329582c355db6cca819cf" translate="yes" xml:space="preserve">
          <source>Common Functionality mergeOptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26798649f04238c71a20e997561e32dea1d0ea8c" translate="yes" xml:space="preserve">
          <source>Common Functionality normalizeMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c910698ea3d19885cd756bc1fbfa1b8c47d78df" translate="yes" xml:space="preserve">
          <source>Common Functionality triggerMethod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9b4610c6fe8fdba71aa2017ed49b701503b7e3" translate="yes" xml:space="preserve">
          <source>Common Functionality unbindEvents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f634ef07fc57d7434a727ae394fc9821060b66" translate="yes" xml:space="preserve">
          <source>Common Functionality unbindRequests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf2fb737de26131a521beb084cfbd3aba531615" translate="yes" xml:space="preserve">
          <source>Common Marionette Concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c8afce9a58e1633ac5366c28b6ce9b298c6bab" translate="yes" xml:space="preserve">
          <source>Common Marionette Functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b2f148b3d336d194c42cdbf3cabd534a81e55e" translate="yes" xml:space="preserve">
          <source>Common Method Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e8b8968899c946cd51220b6c3a8f8bae06ae39" translate="yes" xml:space="preserve">
          <source>CompositeView was removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ad7ab3e5dadd981812da372171e32dd8b66b27" translate="yes" xml:space="preserve">
          <source>Configure How To Remove View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d090da4c442fe9bc413f7ee9c6a056292c8a88ce" translate="yes" xml:space="preserve">
          <source>Current Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677e9557249f0fa33ba2fdd83bc7c1c732325b8a" translate="yes" xml:space="preserve">
          <source>Customizing &lt;code&gt;attachElContents&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8b9fe60048b2b57c3d7c4dcd41dccbd1df4329" translate="yes" xml:space="preserve">
          <source>DEV_MODE</source>
          <target state="translated">DEV_MODE</target>
        </trans-unit>
        <trans-unit id="62fc1554df432827d8aeed7a32c96cf2c79540d4" translate="yes" xml:space="preserve">
          <source>DOM Change Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3113a8cb95cc0bbbe13fed497ac9adbbfa901dcd" translate="yes" xml:space="preserve">
          <source>DOM Change Lifecycle Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d8ddf54f811bedaa6c9d3aaf41d277e4e99308" translate="yes" xml:space="preserve">
          <source>DOM Interactions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff0d8f896662b18cea548ba76f079afc0edba4e" translate="yes" xml:space="preserve">
          <source>DOM Interactions in a Backbone.View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d8201fb1ca0e4bb48b31600ec49be58d472426" translate="yes" xml:space="preserve">
          <source>Defining &lt;code&gt;ui&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21260110a75cc1ae05fcee579101082b8d6793e5" translate="yes" xml:space="preserve">
          <source>Defining Regions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c029cc1d5811234cbd54bed0e9b261c57c1ebda8" translate="yes" xml:space="preserve">
          <source>Defining When an &lt;code&gt;emptyView&lt;/code&gt; shows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edae3e39479277996a18961d19daaf833a5454db" translate="yes" xml:space="preserve">
          <source>Defining and Attaching Behaviors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda91eee5a8003ff221b07b993f329a80641ffda" translate="yes" xml:space="preserve">
          <source>Defining the &lt;code&gt;childViewContainer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a94534fb562e117aee9f1a60c5d9362281ec118" translate="yes" xml:space="preserve">
          <source>Defining the &lt;code&gt;viewComparator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed7858f9bd834e404cb9eca58a5177b8ed32e02" translate="yes" xml:space="preserve">
          <source>Defining the &lt;code&gt;viewFilter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7baefbfb1497229b67dd324a4df4d1e4aefab651" translate="yes" xml:space="preserve">
          <source>Defining the Application Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c575c93d5fe52874efa7f7a31e9c415aa60f51" translate="yes" xml:space="preserve">
          <source>Destroy Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a3c0571170b0bdbb5b8c1717f167ab60055503" translate="yes" xml:space="preserve">
          <source>Destroying All &lt;code&gt;children&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bcbe4bc1c6e00b264c7e867c1a640f72258900f" translate="yes" xml:space="preserve">
          <source>Destroying Children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c404aee566fa94cd8caa5a9fc38029e49d2ee9" translate="yes" xml:space="preserve">
          <source>Destroying a Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8684cd9d1dbc466862a456a7cf671260ca4dd91f" translate="yes" xml:space="preserve">
          <source>Destroying a Child View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30b305afbc52da723a72ca3d237c2e2373948de" translate="yes" xml:space="preserve">
          <source>Destroying a MnObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682b6b6c41afd5fa84bc5ab9985333a0bae2752d" translate="yes" xml:space="preserve">
          <source>Destroying a View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ddea6272c3d6adf8b236ac0aef6904c34d168c" translate="yes" xml:space="preserve">
          <source>Destroying a view (ie: &lt;code&gt;myView.destroy()&lt;/code&gt;) cleans up anything constucted within Marionette so that if a view's instance is no longer referenced the view can be cleaned up by the browser's garbage collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90133eb7658cb18b79cf385336b7f62632db8558" translate="yes" xml:space="preserve">
          <source>Detach &lt;code&gt;el&lt;/code&gt; from the DOM without removing listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfba2e0d7ddc84d411fcdbe07b6a38d924baf472" translate="yes" xml:space="preserve">
          <source>Detaching Existing Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69edb5d14c401313e01634ca7d67df7174dedc3e" translate="yes" xml:space="preserve">
          <source>Detaching a Child View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fea1961bff9499612a7157bdde66189853bfdb" translate="yes" xml:space="preserve">
          <source>Detaching a View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e259c5519b3f7d531ac43a6cc9ae9d4773f463a5" translate="yes" xml:space="preserve">
          <source>Determining what method an event will call is easy, we will outline this with an example using &lt;code&gt;before:dom:refresh&lt;/code&gt; though this also works with any custom events you want to fire:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a02cfdcffd698fa282655798a0005a69a2da4a" translate="yes" xml:space="preserve">
          <source>Display a &lt;code&gt;View&lt;/code&gt; instance in the region attached to the Application. This runs the &lt;a href=&quot;view.lifecycle&quot;&gt;&lt;code&gt;View lifecycle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828296e9e5b807e7f4b566b23bcc31faa7913be5" translate="yes" xml:space="preserve">
          <source>Documentation Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e9cbade0fed390975235c30bff1eeb1aacb477" translate="yes" xml:space="preserve">
          <source>Each behavior will now be able to respond to user interactions as though the event handlers were attached to the view directly. In addition to using array notation, Behaviors can be attached using an object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc603d8002ded69c2f5e71e562444099e09a5de6" translate="yes" xml:space="preserve">
          <source>Each view class has a renderer which by default passes the &lt;a href=&quot;#serializing-data&quot;&gt;view data&lt;/a&gt; to the template function and returns the html string it generates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f9abffaef3fa9bf0ec3d10557dda244cb2a7a0" translate="yes" xml:space="preserve">
          <source>Efficient Nested View Structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831c1c2ead0b8f2d031a01a5c08c7029c785188d" translate="yes" xml:space="preserve">
          <source>Emptying a Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78253113336b52f48b9dd93c5732b55153b1f41" translate="yes" xml:space="preserve">
          <source>Entity Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1309085e1b16c3e618ad6d0016721b237ca0813a" translate="yes" xml:space="preserve">
          <source>Entity events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8919ace091b14011c6439cfd5e1707b58f5abd" translate="yes" xml:space="preserve">
          <source>Event</source>
          <target state="translated">Event</target>
        </trans-unit>
        <trans-unit id="d44b41d5da5151986c1bd05d1f16a9161b149d32" translate="yes" xml:space="preserve">
          <source>Event Bubbling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292989d57e57ee7a50a6e9e280885db397eacdd1" translate="yes" xml:space="preserve">
          <source>Event and Trigger Mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cce85b43344e12762992905eb29078ccc1936b7" translate="yes" xml:space="preserve">
          <source>Event handlers are called with the same arguments as if listening to the entity directly and called with the context of the view instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55ebfd6234aa80a39ed9bfc57a51137ebf7a518" translate="yes" xml:space="preserve">
          <source>Event handlers will receive the triggering view as the first argument and the DOM Event object as the second followed by any extra parameters triggered by the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa17a86378aa781e477b77511b8712b283c5a328" translate="yes" xml:space="preserve">
          <source>Event listeners are constructed by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="0854be86d062a456db2bbb358379b76bbbe90ff2" translate="yes" xml:space="preserve">
          <source>Events - trigger events on a global object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15960d7c6dda794df1ace67037b1cf575ffbb533" translate="yes" xml:space="preserve">
          <source>Events / Initialize Order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe344110e73a74f72736069ed919c062c627ec74" translate="yes" xml:space="preserve">
          <source>Events API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541c20b4288dd7d0c4b2355deaa66ae794d7df02" translate="yes" xml:space="preserve">
          <source>Events and Requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee737ab270bba86e84f8976148d4e44c1fa84a78" translate="yes" xml:space="preserve">
          <source>Events and requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77c70f89dddba4e2f67fc526e439c0dfc9de00a" translate="yes" xml:space="preserve">
          <source>Events are typically used to alert other parts of the system that something happened. For example, a user login expired or the user performed a specific action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba35e69e7bcdee77e9a284677870fa09174158f9" translate="yes" xml:space="preserve">
          <source>Events fired by &lt;code&gt;childViewTriggers&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30fa18e64faf90dbc229cc3047971193f875ed4" translate="yes" xml:space="preserve">
          <source>Events fired by &lt;code&gt;triggerMethod&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9355c4da3cf6552b7769a548531396c1817813" translate="yes" xml:space="preserve">
          <source>Events fired from &lt;code&gt;childView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe999fb3bea0c0f00d9264ba666b03b2eeb4c2fa" translate="yes" xml:space="preserve">
          <source>Events fired from &lt;code&gt;triggers&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd33dfdb6f3039239dd4860c3a17df0b873aa39" translate="yes" xml:space="preserve">
          <source>Events fired on a view bubble up to their direct parent views, calling any event methods using the &lt;code&gt;childview:&lt;/code&gt; prefix (more on that shortly) and any methods bound to the &lt;code&gt;childViewEvents&lt;/code&gt; attribute. This works for built-in events, custom events fired with &lt;code&gt;triggerMethod&lt;/code&gt; and bound events using &lt;code&gt;triggers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4228fe37d9e4cc917bbde5a8899f5cf07f88ed65" translate="yes" xml:space="preserve">
          <source>Every class has a &lt;code&gt;destroy&lt;/code&gt; method which can be used to clean up the instance. With the exception of &lt;code&gt;Behavior&lt;/code&gt;'s each of these methods triggers a &lt;code&gt;before:destroy&lt;/code&gt; and a &lt;code&gt;destroy&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="535292a374c162780254b235d53e365eb6fb0cfd" translate="yes" xml:space="preserve">
          <source>Explicit Event Listeners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dced92d38a494d927a10999d989e5b46ee7d2ec6" translate="yes" xml:space="preserve">
          <source>Falsey values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="b1aa1305f893ecfc0ed1ab30024764521d7becb5" translate="yes" xml:space="preserve">
          <source>Filtering the &lt;code&gt;children&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867106c5f73aec13eda0fc5e67a86f717c618148" translate="yes" xml:space="preserve">
          <source>Find a view by it's cid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94ceaf660ec9ba8ba40a4ccbd91e62e92e8e5a8" translate="yes" xml:space="preserve">
          <source>Find a view by model cid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca71b6eef9813719712665baad82d563ee6672d" translate="yes" xml:space="preserve">
          <source>Find a view by model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cb69afde7bc88564246a8a10ce2c5a7831f970" translate="yes" xml:space="preserve">
          <source>Find by numeric index (unstable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d87513c2dc27f374691aa796b42845eae7de73d" translate="yes" xml:space="preserve">
          <source>Find the index of the view inside the children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7144b75286a91c7b732c50a94b6186fd5ea9f5b6" translate="yes" xml:space="preserve">
          <source>Fired as part of the application startup. This is where you should be showing your views and starting &lt;code&gt;Backbone.history&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210e8ac0d7a279a8e04507f3459c2c7c9542f02c" translate="yes" xml:space="preserve">
          <source>Fired just before the application is started. Use this to prepare the application with anything it will need to start, for example instantiating routers, models, and collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c28bdd5be018d144d76e562192a9b7ec6bdf384" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;marionette.collectionview&quot;&gt;&lt;code&gt;CollectionView&lt;/code&gt;&lt;/a&gt;, rendering signifies that the view's &lt;a href=&quot;marionette.collectionview#collectionviews-children&quot;&gt;&lt;code&gt;children&lt;/code&gt;&lt;/a&gt; were created and attached to the view's &lt;code&gt;el&lt;/code&gt;. So unlike &lt;code&gt;View&lt;/code&gt; a &lt;code&gt;CollectionView&lt;/code&gt; can be instantiated with content in its &lt;code&gt;el&lt;/code&gt;, but until the &lt;code&gt;children&lt;/code&gt; are &quot;rendered&quot; the entire view is not considered rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d97f994858459c490f3d11144c9039026de65a4" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;marionette.view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;, rendering entails serializing the view's data, passing it to a template, and taking the results of that template and replacing the contents of the view's &lt;code&gt;el&lt;/code&gt;. So when a &lt;code&gt;View&lt;/code&gt; is instantiated it is considered rendered if the &lt;code&gt;el&lt;/code&gt; node contains any content. However after instantiation a template may render empty in which case the &lt;code&gt;View&lt;/code&gt; will still be considered &quot;rendered&quot; even though it contains no content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2704469027269eb4b1e45887b9e246079ac5fe74" translate="yes" xml:space="preserve">
          <source>For example, to listen to a model's events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512162dd99f6990c0b7ee2713f73d747c2a3598b" translate="yes" xml:space="preserve">
          <source>For instance, perhaps for one particular view you need to bypass the &lt;a href=&quot;dom.api&quot;&gt;DOM API&lt;/a&gt; and set the html directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a687325cc0ffb4c59f3ec48209a9cbdd65aec4e7" translate="yes" xml:space="preserve">
          <source>For more detail on how to render templates, see &lt;a href=&quot;view.rendering&quot;&gt;View Template Rendering&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f915cfec40c52c98c841d237124fe89fdeb359c" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;showChildView&lt;/code&gt; and &lt;code&gt;getChildView&lt;/code&gt;, see the &lt;a href=&quot;marionette.view#managing-children&quot;&gt;Documentation for Views&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692f0879bb64cd882c497ad460c60e1e8016f976" translate="yes" xml:space="preserve">
          <source>For more information on instanting a view with pre-rendered DOM see: &lt;a href=&quot;dom.prerendered&quot;&gt;Prerendered Content&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6f6f3a4fbfac878118068d27b6b47808785740" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;dom.interactions#binding-to-user-input&quot;&gt;DOM interactions documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa1717f4b730bc3f2a238f66d53a22d7db017d1" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;events.entity&quot;&gt;Entity events documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3a6ff953c168a198daa013d1b3ecff1c42ff2d" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;marionette.application#application-region&quot;&gt;Application docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932b7133f8ecd4335c535e0b589f2659c4cb27d2" translate="yes" xml:space="preserve">
          <source>For most cases you will want to use the &lt;a href=&quot;dom.api&quot;&gt;DOM API&lt;/a&gt; to determine how a region html is attached, but in some cases you may want to override a single Region class for situations like animation where you want to control both attaching and &lt;a href=&quot;#configure-how-to-remove-view&quot;&gt;view removal&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9b3e590ece88db23fbd52ac71a4ba833af47d6" translate="yes" xml:space="preserve">
          <source>For updating in Marionette 2.x, it is recommended you change all instances of &lt;code&gt;ItemView&lt;/code&gt; to &lt;code&gt;LayoutView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5f762c1f65a9886dfe4004da0d3e529827c360" translate="yes" xml:space="preserve">
          <source>Function Callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b50e92fc7aea5426c00478727616aa2732e335b" translate="yes" xml:space="preserve">
          <source>Function Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b79428d14c80602f07db4f6cf096cfd6321d057" translate="yes" xml:space="preserve">
          <source>Function isNodeAttached was removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ffd3c45a2198742a64b1182a44898be5507951" translate="yes" xml:space="preserve">
          <source>Functions Returning Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee3a98fc183d3791af8b61b8615560392adc950" translate="yes" xml:space="preserve">
          <source>Generic Routers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d8c627be3c12fac8a0a9ddb9ceaa5e126cf358" translate="yes" xml:space="preserve">
          <source>Goals</source>
          <target state="translated">Goals</target>
        </trans-unit>
        <trans-unit id="1f5aebde5b7c2251de63baad091a0807c654f4cc" translate="yes" xml:space="preserve">
          <source>Goals:</source>
          <target state="translated">Goals:</target>
        </trans-unit>
        <trans-unit id="bfb69d23d552cd9db39b7c6c673b2d2cc67c8217" translate="yes" xml:space="preserve">
          <source>Here's an example that allows for the &lt;code&gt;template&lt;/code&gt; of a view to be an underscore template string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ef1b52ea05264cfaba3be3dd149a971620a753" translate="yes" xml:space="preserve">
          <source>How the &lt;code&gt;collection&lt;/code&gt; is serialized can also be customized per view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f5336533830a1895fbd52dce7b5d261a2c17cb" translate="yes" xml:space="preserve">
          <source>How the &lt;code&gt;model&lt;/code&gt; is serialized can also be customized per view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0bce3b5ac87ae46b341f3b8affd0b81d0d84cc" translate="yes" xml:space="preserve">
          <source>However to support backwards compatibility Marionette exports all of its classes and functions on a default object. This default export may be removed in a future version of Marionette and it is recommend to migrate to a named imports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f434c02979940f6b32f433af43df40917c1269" translate="yes" xml:space="preserve">
          <source>However with pre-rendered DOM you may need to show child views in &lt;code&gt;initialize&lt;/code&gt; as the view will already be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebced65d690ba4325f022c189ca1720d68437959" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;emptyViewOptions&lt;/code&gt; aren't provided the &lt;code&gt;CollectionView&lt;/code&gt; will default to passing the &lt;code&gt;childViewOptions&lt;/code&gt; to the &lt;code&gt;emptyView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7378bf2afc10cccdb2c8461e7b9064c10bfb0a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, deprecation console warnings are issued at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e5de4d4d1e117e2a17f49e092caec6db464f5e" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;viewFilter&lt;/code&gt; exists the &lt;a href=&quot;events.class#filter-and-beforefilter-events&quot;&gt;&lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;before:filter&lt;/code&gt; events&lt;/a&gt; will trigger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f1d6b66b8f1652dcb8f627dc96360ae66ae24b" translate="yes" xml:space="preserve">
          <source>If both view and behavior are listening for the same event, this will be executed first in the view then in the behavior as below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4169130880cb79b042d2b7c25e639edfe50cdb25" translate="yes" xml:space="preserve">
          <source>If it's fine for many objects to perform an action, use an &lt;code&gt;Event&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414ed13ac166d24313defb384044db62d446d670" translate="yes" xml:space="preserve">
          <source>If no view is available, &lt;code&gt;getChildView&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2572bd0e1854d3111c1313d5380e3be8b03852a3" translate="yes" xml:space="preserve">
          <source>If one child is in the &lt;code&gt;el&lt;/code&gt; but the other is not, &lt;a href=&quot;#filtering-the-children&quot;&gt;filter&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba097323f34cdefad7f7faa35664eee29b02dc9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CollectionView&lt;/code&gt; can determine that added views will only be appended to the end, only the appended views will be passed to the event. Otherwise all of the &lt;code&gt;children&lt;/code&gt; views will be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac6b6dc49490b0054b9652640a9bf1d2bd55c6a" translate="yes" xml:space="preserve">
          <source>If the view does not have a &lt;code&gt;model&lt;/code&gt; but has a &lt;code&gt;collection&lt;/code&gt; the collection's models will be serialized to an array provided as an &lt;code&gt;items&lt;/code&gt; attribute to the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39633f5888d8571f64160a32230bd0df38af2dfb" translate="yes" xml:space="preserve">
          <source>If the view has a &lt;code&gt;model&lt;/code&gt; it will pass that model's attributes to the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c493f8246ce4042778452e9fbaab2a1802c8a73" translate="yes" xml:space="preserve">
          <source>If you add a view to a &lt;code&gt;CollectionView&lt;/code&gt;s children by default it will treat it as any other view added from the &lt;code&gt;collection&lt;/code&gt;. This means it is subject to the &lt;a href=&quot;marionette.collectionview#defining-the-viewcomparator&quot;&gt;&lt;code&gt;viewComparator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marionette.collectionview#defining-the-viewfilter&quot;&gt;&lt;code&gt;viewFilter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e735b59a230dbdc7e1adc3a1b55b7c6c275d5daf" translate="yes" xml:space="preserve">
          <source>If you don't know what could act on the event, or don't care, use an &lt;code&gt;Event&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f505669868df7e48cd16e96c84d2a72070269c0d" translate="yes" xml:space="preserve">
          <source>If you don't mind that no objects react, use an &lt;code&gt;Event&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d1d751807556b4d8b2d396b879c9f18df44fd1" translate="yes" xml:space="preserve">
          <source>If you find yourself calling it an action that occurred, use an &lt;code&gt;Event&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945523977553ce7f419e6f9b76980c72f3363e54" translate="yes" xml:space="preserve">
          <source>If you need to re-render the entire collection or the template, you can call the &lt;code&gt;collectionView.render&lt;/code&gt; method. This method will destroying all of the child views that may have previously been added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4e9d5ddafd1d47e8a70c706ceb2dda13ced149" translate="yes" xml:space="preserve">
          <source>If you replace the current view with a new view by calling &lt;code&gt;show&lt;/code&gt;, it will automatically destroy the previous view. You can prevent this behavior by &lt;a href=&quot;#detaching-existing-views&quot;&gt;detaching the view&lt;/a&gt; before showing another one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a4263bd11424fee466a4b090b8dc9b9abc7dcf" translate="yes" xml:space="preserve">
          <source>If you show a view in a region with an existing view, Marionette will &lt;a href=&quot;#emptying-a-region&quot;&gt;remove the existing View&lt;/a&gt; before showing the new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9f1488121572c69fc424281327f9df376df4c3" translate="yes" xml:space="preserve">
          <source>If you want to control when the empty view is rendered, you can override &lt;code&gt;isEmpty&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7fa16fce8ece6ef03606774be21f51ac31360dd" translate="yes" xml:space="preserve">
          <source>If you want to detach an existing view from a region, use &lt;code&gt;detachView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4f26f1ce23689948b48b45656485d98497b056" translate="yes" xml:space="preserve">
          <source>If you wish to check whether a region has a view, you can use the &lt;code&gt;hasView&lt;/code&gt; function. This will return a boolean value depending whether or not the region is showing a view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc7091a16fd09296b99e430d6e6573c8bba34f7" translate="yes" xml:space="preserve">
          <source>If you've created a custom region class, you can use it to define your region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258044d00799398af0fed5afa55eca9f1ec076dd" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;ui&lt;/code&gt; keys clash with keys on the attached view, the view's &lt;code&gt;ui&lt;/code&gt; declarations will take precidence over the behavior's &lt;code&gt;ui&lt;/code&gt;. This allows for behaviors to be more easily reused without dictating necessary structures within the view itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b012b818aa9b71fa333bc69d27b45eab317e89" translate="yes" xml:space="preserve">
          <source>If your use case isn't covered here, consider whether you want to &lt;a href=&quot;#when-to-use-requests&quot;&gt;use a request&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b130fd19b706ea640cdf8aca125964e9c99a63" translate="yes" xml:space="preserve">
          <source>If your view has a &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt; attached, it will listen for events on both:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaf0ff8ba5b5c4e81390aba8100079e7cd2932e" translate="yes" xml:space="preserve">
          <source>In Marionette 2, &lt;code&gt;childEvents&lt;/code&gt; were bound on every event. In Marionette 3, &lt;code&gt;childViewEvents&lt;/code&gt; are bound once and cached. This means that you cannot add new events after the view has been created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe500ea8df85cf5c15733d6b8d582a89478df30" translate="yes" xml:space="preserve">
          <source>In Marionette 2, the HTML output will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2ba341c3809b14c1e87cbc5d409116524f9cec" translate="yes" xml:space="preserve">
          <source>In Marionette 3, the HTML will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374cd1d2d6e5b85fed4ac19f2e1de3ee184d7208" translate="yes" xml:space="preserve">
          <source>In Marionette 3, this was changed to unhook &lt;code&gt;region.currentView&lt;/code&gt; from the DOM, remove all event handlers, then delete it. Any HTML added to the region that isn't contained in the DOM of the View won't be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc8ad3f0efb51be0e4d5761517a8ad8af1135a9" translate="yes" xml:space="preserve">
          <source>In Marionette &lt;a href=&quot;view.rendering&quot;&gt;rendering a view&lt;/a&gt; is changing a view's &lt;code&gt;el&lt;/code&gt;'s contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8cd1ecbd12b85645d753b864feca2f28129988" translate="yes" xml:space="preserve">
          <source>In Marionette a view is attached if the view's &lt;code&gt;el&lt;/code&gt; can be found in the DOM. The best time to add listeners to the view's &lt;code&gt;el&lt;/code&gt; is likely in the &lt;a href=&quot;events.class#attach-and-beforeattach-events&quot;&gt;&lt;code&gt;attach&lt;/code&gt; event&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05a5d833987594d472345f2698c0f67b6901633" translate="yes" xml:space="preserve">
          <source>In Marionette you can define a region with a string selector or an object literal on your &lt;code&gt;Application&lt;/code&gt; or &lt;code&gt;View&lt;/code&gt;. This section will document the two types as applied to &lt;code&gt;View&lt;/code&gt;, although they will work for &lt;code&gt;Application&lt;/code&gt; as well - just replace &lt;code&gt;regions&lt;/code&gt; with &lt;code&gt;region&lt;/code&gt; in your definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31912047aff750f69394987ec520e3da057dc21" translate="yes" xml:space="preserve">
          <source>In Marionette, most attributes can be bound on class instantiation in addition to being set when the &lt;a href=&quot;#class-based-inheritance&quot;&gt;class is defined&lt;/a&gt;. You can use this to bind events, triggers, models, and collections at runtime:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfb304042833b4e20cf55dc60656d4fb789f4c6" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;MnObject&lt;/code&gt;'s API, Application provides two significant additions. A simple lifecycle hook with &lt;a href=&quot;#starting-an-application&quot;&gt;&lt;code&gt;start&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;#application-region&quot;&gt;single region&lt;/a&gt; for attaching a view tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c04bf53d06155643483527e32835b3cf534dce2" translate="yes" xml:space="preserve">
          <source>In addition to adding and removing regions there are a few methods to help utilize regions. All of these methods will first render an unrendered view so that regions are properly initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbb24a430e5b9737e3dfd5b5b510f8e63862d69" translate="yes" xml:space="preserve">
          <source>In addition to children added by Marionette matching the model of a &lt;code&gt;collection&lt;/code&gt;, the &lt;code&gt;children&lt;/code&gt; of the &lt;code&gt;CollectionView&lt;/code&gt; can be manually managed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40228d97dcb3e26c9fde06dfc2f82735f9bfded0" translate="yes" xml:space="preserve">
          <source>In addition to extending a &lt;code&gt;View&lt;/code&gt; with &lt;code&gt;Behavior&lt;/code&gt;, a &lt;code&gt;Behavior&lt;/code&gt; can itself use other Behaviors. The syntax is identical to that used for a &lt;code&gt;View&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7706fc2586990c022dceb662d7eaed11b3006b74" translate="yes" xml:space="preserve">
          <source>In addition to rendering children, the &lt;code&gt;CollectionView&lt;/code&gt; may have a &lt;code&gt;template&lt;/code&gt;. The child views can be rendered within a DOM element of this template. The &lt;code&gt;CollectionView&lt;/code&gt; will serialize either the &lt;code&gt;model&lt;/code&gt; or &lt;code&gt;collection&lt;/code&gt; along with context for the &lt;code&gt;template&lt;/code&gt; to render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52125bb135086c75727502d9181f61e693d52bd" translate="yes" xml:space="preserve">
          <source>In addition to this documentation, the Radio documentation can be found on &lt;a href=&quot;https://github.com/marionettejs/backbone.radio&quot;&gt;Github&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5757092eff6dde73f2a6b4851bec028704a80319" translate="yes" xml:space="preserve">
          <source>In addition to what Backbone provides the views, Marionette has additional API for DOM interactions available to all Marionette &lt;a href=&quot;classes&quot;&gt;view classes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a017c4ddd0d70c499dc542744b370ccc3e0790fa" translate="yes" xml:space="preserve">
          <source>In addition to what Backbone provides the views, Marionette has additional API for DOM interactions: &lt;code&gt;events&lt;/code&gt;, &lt;code&gt;triggers&lt;/code&gt;, and &lt;code&gt;ui&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4414df5d4eaf209b663557d3065ac396163dcf80" translate="yes" xml:space="preserve">
          <source>In addition, each behavior is able to reference the view they are attached to through the &lt;code&gt;view&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418fdec9c8a965d096119edd97137d97dd73fbd3" translate="yes" xml:space="preserve">
          <source>In almost every instance where we can set a value, we can also assign a function to figure out the value at runtime. In this case, Marionette will run the function on instantiation and use the returned value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8d7a75230b96395b32bd75a3deabf5dc740fd1" translate="yes" xml:space="preserve">
          <source>In an unrelated module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b85764ee8637eb07079009de57031d6a9a884a9" translate="yes" xml:space="preserve">
          <source>In both of the cases at instantiation the view will determine &lt;a href=&quot;view.lifecycle&quot;&gt;its state&lt;/a&gt; as to whether the el is rendered or attached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152f3f8ee2c3b3d44da924f11b9b107bcbb7eafe" translate="yes" xml:space="preserve">
          <source>In general the best method for adding a child view to a &lt;code&gt;View&lt;/code&gt; is to use &lt;a href=&quot;marionette.view#showing-a-view&quot;&gt;&lt;code&gt;showChildView&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;events.class#render-and-beforerender-events&quot;&gt;&lt;code&gt;render&lt;/code&gt; event&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b9561c388e0618bf194a616c2c185409c5ed74" translate="yes" xml:space="preserve">
          <source>In most cases by using the default &lt;code&gt;getTemplate&lt;/code&gt; you can simply set the &lt;code&gt;template&lt;/code&gt; on the view to define the view's template, but in some circumstances you may want to set the template conditionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307e993500d2b4305963a60b9655a4a27e4e7a6b" translate="yes" xml:space="preserve">
          <source>In some cases it may be a useful performance improvement to disable this functionality. Doing so is as easy as setting &lt;code&gt;monitorViewEvents: false&lt;/code&gt; on the view class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e6029a13252e24b8832234c1901c583b8978f4" translate="yes" xml:space="preserve">
          <source>In the above example the contents of the &lt;code&gt;template&lt;/code&gt; attribute will be rendered inside a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag available at &lt;code&gt;myView.el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441adfb0f459dac69710337e0e26848bbe42c2b4" translate="yes" xml:space="preserve">
          <source>In the example below, we create a new pseudo-class called &lt;code&gt;MyView&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d800d02e7f0ce6ed4e7a2694d329438f9d50e58b" translate="yes" xml:space="preserve">
          <source>In the following example the &lt;code&gt;template&lt;/code&gt; method passed to the renderer will return a DOM element, and then if the view is already rendered utilize &lt;a href=&quot;https://github.com/patrick-steele-idem/morphdom&quot;&gt;morphdom&lt;/a&gt; to patch the DOM or otherwise it will set the view's &lt;code&gt;el&lt;/code&gt; to the result of the template. (Note in this case the view's &lt;code&gt;el&lt;/code&gt; created at instantiation would be overridden).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35f982bb5c5b1766d09e116e4549ce2b84edbe8" translate="yes" xml:space="preserve">
          <source>In this case because the renderer is modifying the &lt;code&gt;el&lt;/code&gt; directly, there is no need to return the result of the template rendering for the view to handle in &lt;a href=&quot;#customizing-attachelcontents&quot;&gt;&lt;code&gt;attachElContents&lt;/code&gt;&lt;/a&gt;. It is certainly an option to return the compiled DOM and modify &lt;a href=&quot;#customizing-attachelcontents&quot;&gt;&lt;code&gt;attachElContents&lt;/code&gt;&lt;/a&gt; to handle a DOM object instead of a string literal, but in many cases it may be overcomplicated to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d20ef49462d6784ef889cb7cec2dbb6af58c9e" translate="yes" xml:space="preserve">
          <source>In this case setting &lt;code&gt;template&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will prevent the template render. In the case of &lt;code&gt;View&lt;/code&gt; it will also prevent the &lt;a href=&quot;events.class#render-and-beforerender-events&quot;&gt;&lt;code&gt;render&lt;/code&gt; events&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14827d95bfe31f928f624eb9bea689cd382bd935" translate="yes" xml:space="preserve">
          <source>In this case, Marionette will bind event handlers to both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1699d680c4f3ec67120d13608314117c95f893" translate="yes" xml:space="preserve">
          <source>In this example, &quot;bar&quot; is returned both times because the second example has an undefined value for &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7721a8fa1959a888e9ee734039a60010527e7eff" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;something&lt;/code&gt; are directly available on the &lt;code&gt;MyObject&lt;/code&gt; instance, while &lt;code&gt;another&lt;/code&gt; must be accessed via &lt;code&gt;getOption&lt;/code&gt;. This is handy when you want to add extra keys that will be used heavily throughout the defined class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff0ac8dbc34ffb26efff18b45cc2ec7965afcfe" translate="yes" xml:space="preserve">
          <source>In this example, the doubly-nested view structure will be rendered in a single paint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbc86d1aef7f6de0af9afade468c0b88d451392" translate="yes" xml:space="preserve">
          <source>In this example, the trigger for &lt;code&gt;save:form&lt;/code&gt; will no longer be fired, as the trigger for &lt;code&gt;show:link&lt;/code&gt; completely overrides it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca10d97fa344d9e8dc416801de0ea6a42eac642" translate="yes" xml:space="preserve">
          <source>In this example, when the user clicks on &lt;code&gt;#save-button&lt;/code&gt;, &lt;code&gt;onSave&lt;/code&gt; will be called. If the user clicks on &lt;code&gt;.close-button&lt;/code&gt;, then the event &lt;code&gt;close:view&lt;/code&gt; will be fired on &lt;code&gt;MyView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7abbd1b4078d513f86a97a5a2da74d74092489e6" translate="yes" xml:space="preserve">
          <source>In v4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138b9759c9ba103b68aec9833c4208706cc483f4" translate="yes" xml:space="preserve">
          <source>In versions previous to v4, &lt;code&gt;MnObject&lt;/code&gt; was simply named &lt;code&gt;Object&lt;/code&gt;. This naming is still supported via the default export of the library, but should be considered &lt;strong&gt;deprecated&lt;/strong&gt; and is scheduled for removal in an upcoming version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d806c2e3202418b73175db1623c1523093b7450" translate="yes" xml:space="preserve">
          <source>Inside your view, the &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt; references will point to the jQuery selectors &lt;code&gt;#save-button&lt;/code&gt; and &lt;code&gt;.close-button&lt;/code&gt;respectively found only in the rendered &lt;code&gt;MyTemplate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214913c693b54070e48777a15763b36b565dc676" translate="yes" xml:space="preserve">
          <source>Installing Marionette</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e48a65ed1b5393942dc548a8b1c243dbc0f1277" translate="yes" xml:space="preserve">
          <source>Installing with NPM through command-line interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567fe27a4727b3d126ac82236f053bbd3f056c13" translate="yes" xml:space="preserve">
          <source>Instantiating An Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8e8b3a3df86f25193f81ffdb5de713f367bb9b" translate="yes" xml:space="preserve">
          <source>Instantiating a Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5b521914004f5bf74f117864b124961f477b8d" translate="yes" xml:space="preserve">
          <source>Instantiating a CollectionView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a955a94a3f43f4f73bcb115e2a8c80db8f50db" translate="yes" xml:space="preserve">
          <source>Instantiating a MnObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255d21d26e2ce73b365bde4a25423b1f55094420" translate="yes" xml:space="preserve">
          <source>Instantiating a Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77820beafb1c3306e98ef5f128a2dbbef1e58391" translate="yes" xml:space="preserve">
          <source>Instantiating a View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1eb47468e699137fde32233dcdac6c46af35a11" translate="yes" xml:space="preserve">
          <source>Instantiating an Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbefd2b5961ad362fe8277e107d8100369f5f24f" translate="yes" xml:space="preserve">
          <source>Interaction points, such as tooltips and warning messages, are generic concepts. There is no need to recode them within your Views so they are prime candidates to be extracted into &lt;code&gt;Behavior&lt;/code&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3418eb964442487e2a5907fe25965a119f9cb75" translate="yes" xml:space="preserve">
          <source>Internally &lt;code&gt;_.bind&lt;/code&gt; was replaced with &lt;code&gt;Function.prototype.bind&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffe41e25858026124599d640efa844a4aea2639" translate="yes" xml:space="preserve">
          <source>Internally Marionette uses &lt;a href=&quot;common#triggermethod&quot;&gt;&lt;code&gt;triggerMethod&lt;/code&gt;&lt;/a&gt; for event triggering. This API is not available to &lt;code&gt;Backbone.View&lt;/code&gt;s so in order to support &lt;code&gt;Backbone.View&lt;/code&gt;s in Marionette v4+, &lt;code&gt;Marionette.Events&lt;/code&gt; must be mixed into the non-Marionette view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98941c5e17f60962216743346284fd2d125f7bac" translate="yes" xml:space="preserve">
          <source>Invoking the &lt;code&gt;destroy&lt;/code&gt; method will trigger &lt;code&gt;before:destroy&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt; events and their &lt;a href=&quot;marionette.functions#marionettetriggermethod&quot;&gt;corresponding methods&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f618c4cbbe21fb56cb1bfb8f75d37b246c80a35e" translate="yes" xml:space="preserve">
          <source>It indicates the whether or not &lt;a href=&quot;dom.interactions#view-triggers-event-object&quot;&gt;&lt;code&gt;View.triggers&lt;/code&gt; will call &lt;code&gt;event.preventDefault()&lt;/code&gt;&lt;/a&gt; if not explicitly defined by the trigger. The default has been true, but for a future version &lt;a href=&quot;https://github.com/marionettejs/backbone.marionette/issues/2926&quot;&gt;&lt;code&gt;false&lt;/code&gt; is being considered&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b03698a4c89d76efd222feebd906c19eec51bbf" translate="yes" xml:space="preserve">
          <source>It indicates the whether or not &lt;a href=&quot;dom.interactions#view-triggers-event-object&quot;&gt;&lt;code&gt;View.triggers&lt;/code&gt; will call &lt;code&gt;event.stopPropagating()&lt;/code&gt;&lt;/a&gt; if not explicitly defined by the trigger. The default has been true, but for a future version &lt;a href=&quot;https://github.com/marionettejs/backbone.marionette/issues/2926&quot;&gt;&lt;code&gt;false&lt;/code&gt; is being considered&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f68d08f58c44e5136d0aebf3ee63196d507bcb" translate="yes" xml:space="preserve">
          <source>It may be the case that you need child views of already existing DOM as well. To set this up you'll need to query for &lt;code&gt;el&lt;/code&gt;s down the tree:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fd08ff38ba85dff7d7e1954f0bdc68edcfc8b0" translate="yes" xml:space="preserve">
          <source>Just as in &lt;code&gt;modelEvents&lt;/code&gt;, you can bind function callbacks directly inside the &lt;code&gt;collectionEvents&lt;/code&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3f5d6c966727db9186faecfbe70878660d3e80" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;Backbone&lt;/code&gt;'s &lt;a href=&quot;http://backbonejs.org/#Events-trigger&quot;&gt;&lt;code&gt;trigger&lt;/code&gt;&lt;/a&gt; the &lt;code&gt;triggerMethod&lt;/code&gt; method fires the named event on the instance - any listeners will then be triggered on the event. If there are no listeners, this call will still succeed. All arguments after the first event name string will be passed to all event handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2833ccf0e28302ed2a52d6db845e3200c972958" translate="yes" xml:space="preserve">
          <source>Just like Backbone Events, the Radio respects the &lt;code&gt;listenTo&lt;/code&gt; handler as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d1259778049e278a6f897113e6151b7297c018" translate="yes" xml:space="preserve">
          <source>Know of other routers that should be listed here?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266f353b8107014c6838b2d45bfd4917b5582d80" translate="yes" xml:space="preserve">
          <source>Laying Out Views - Regions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8b1d7a394ffe253551cd750d202d23b2572557" translate="yes" xml:space="preserve">
          <source>Lifecycle Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7224898374009ef54f60e402babfcd54d138b16" translate="yes" xml:space="preserve">
          <source>Lifecycle State Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9392f7fdaaf4c8d2b30e1403f800769cf69c1ecc" translate="yes" xml:space="preserve">
          <source>Lifecycle and Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794849d5bfc51aef86463073067180f0530f6e3d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;http://backbonejs.org/#Model-extend&quot;&gt;Backbone&lt;/a&gt;, Marionette utilizes the &lt;a href=&quot;http://underscorejs.org/#extend&quot;&gt;&lt;code&gt;_.extend&lt;/code&gt;&lt;/a&gt; function to simulate class-based inheritance. &lt;a href=&quot;classes&quot;&gt;All built-in classes&lt;/a&gt;, such as &lt;code&gt;Marionette.View&lt;/code&gt;, &lt;code&gt;Marionette.MnObject&lt;/code&gt; and everything that extend these provide an &lt;code&gt;extend&lt;/code&gt; method for just this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7b79e269562a3547158db1866c52bec33cab6e" translate="yes" xml:space="preserve">
          <source>Like the backbone classes, &lt;code&gt;initialize&lt;/code&gt; is a method you can define on any Marionette class that will be called when the class is instantiated and will be passed any arguments passed at instantiation. The first argument may contain &lt;a href=&quot;#getoption&quot;&gt;options&lt;/a&gt; the class attaches to the instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d548f986afd3875d104623c3248f57a085ac69e6" translate="yes" xml:space="preserve">
          <source>Listening to Both</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4068e29f0d00dd78b6cb63522d95b7fd8466fe66" translate="yes" xml:space="preserve">
          <source>Listening to Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb67ac00d2ab257cab62a98d7126dff213dc005" translate="yes" xml:space="preserve">
          <source>Listening to Events on Children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05e9df67400d9824cb42995162d43a4664a4ab1" translate="yes" xml:space="preserve">
          <source>Listening to Events on the &lt;code&gt;children&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959a1f844c50daefb3f812e108e07ab058bfd4c3" translate="yes" xml:space="preserve">
          <source>Listening to View Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0acbd87b6e975a834e11876a01c2dc936199a9" translate="yes" xml:space="preserve">
          <source>Listening to events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19646932df2821a76d070d391a81a56f5b95215" translate="yes" xml:space="preserve">
          <source>Live example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66c6803c67f60624e428beacade6cb10972157a" translate="yes" xml:space="preserve">
          <source>Live examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4951b5dfe960413b1f4f4cccbea773e1fb3504db" translate="yes" xml:space="preserve">
          <source>Lookup the &lt;code&gt;selector&lt;/code&gt; string within the DOM node &lt;code&gt;el&lt;/code&gt;. It should return an array-like object of nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1651497a7fc40b0484d62ece458a0393750512c7" translate="yes" xml:space="preserve">
          <source>Lookup the &lt;code&gt;selector&lt;/code&gt; string withing the DOM. The &lt;code&gt;selector&lt;/code&gt; may also be a DOM element. It should return an array-like object of the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86dfef80e23b0ea17c71f227fdf972caa7e16d75" translate="yes" xml:space="preserve">
          <source>Main Differences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3da3c7d18842ca765ff8214586804aa8ed32a9" translate="yes" xml:space="preserve">
          <source>Maintaining the &lt;code&gt;collection&lt;/code&gt;'s sort</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0254f8f86aa27583cad891d9fff14f870321c377" translate="yes" xml:space="preserve">
          <source>Maintains a reference to the version of a Marionette instance. &lt;code&gt;VERSION&lt;/code&gt; is used to direct users to the correctly versioned documentation when errors are thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313565c2df6b814a53a5923407e8de1cc7cd8b4b" translate="yes" xml:space="preserve">
          <source>Managing &lt;code&gt;View&lt;/code&gt; children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604c20eb5f07ae96d11a9b30a752d137fe4e822f" translate="yes" xml:space="preserve">
          <source>Managing Children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1441b9e0164f2b511e6567a9f8d1008e00fad420" translate="yes" xml:space="preserve">
          <source>Managing a Pre-existing View Tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387799c67771be6c8025e753344ffcfd26242450" translate="yes" xml:space="preserve">
          <source>Marionette 3 introduces a number of breaking changes. This upgrade guide will go through the major changes and describe how to change your application to accommodate them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20955d4e5bc57af427d23d8f027a752ccb6fd57" translate="yes" xml:space="preserve">
          <source>Marionette 4 introduces a number of breaking changes. This upgrade guide will go through the major changes and describe how to change your application to accommodate them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906946d727f5cf4b0cb2993ff0e4567ef919ede0" translate="yes" xml:space="preserve">
          <source>Marionette Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29c3a94809b27efd557e1c5ca0c2a916dcca46d" translate="yes" xml:space="preserve">
          <source>Marionette Community Routers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4551d54a266ec052aee8aea9f607245f5344f0a5" translate="yes" xml:space="preserve">
          <source>Marionette Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0e04de6cada3a6ed9f2cbb9ff3d78223e85b53" translate="yes" xml:space="preserve">
          <source>Marionette Features are opt-in functionality that you can enable by utilizing &lt;a href=&quot;#setting-a-feature-flag&quot;&gt;&lt;code&gt;setEnabled&lt;/code&gt;&lt;/a&gt; in your app. It is a good practice to set these flags only once prior to instantiating any Marionette class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098da92f101f435929e3fc614b2aff87925addb5" translate="yes" xml:space="preserve">
          <source>Marionette Integration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d2391518beb5c1ea3aa59957b68a1d8a72c0d7" translate="yes" xml:space="preserve">
          <source>Marionette Modules have been completely removed in favor of using the more standard JavaScript module loaders e.g. &lt;a href=&quot;installation#quick-start-using-npm-and-webpack&quot;&gt;Webpack&lt;/a&gt; or &lt;a href=&quot;installation#quick-start-using-npm-and-browserify&quot;&gt;Browserify&lt;/a&gt;. See the &lt;a href=&quot;installation&quot;&gt;installation&lt;/a&gt; documentation for a list of potential options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4864103c0e87be95fdcb28a3b2a8321d3a47537" translate="yes" xml:space="preserve">
          <source>Marionette Regions aren't just for showing Marionette Views - they can also display instances of a &lt;a href=&quot;http://backbonejs.org/#View&quot;&gt;&lt;code&gt;Backbone.View&lt;/code&gt;&lt;/a&gt;. To do this, ensure your view defines a &lt;code&gt;render()&lt;/code&gt; method and just treat it like a regular Marionette View:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23394affa9700d4387c4740b02fbca2b24611e7" translate="yes" xml:space="preserve">
          <source>Marionette Utility Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca489fd06bb0b57bbcf1874e7bb87e27e0ac96c3" translate="yes" xml:space="preserve">
          <source>Marionette Views are Backbone Views and so when they are instantiated the view has an &lt;code&gt;el&lt;/code&gt;. That &lt;code&gt;el&lt;/code&gt; will be the root node for the view and other than its contents it will not change for the life of the view unless directly manipulated (ie: &lt;code&gt;view.$el.addClass&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1de285a1555538fa6a76b6f2583d1be80c0ce5" translate="yes" xml:space="preserve">
          <source>Marionette Views fire events during their creation and destruction lifecycle. For more information see the documentation covering the &lt;a href=&quot;view.lifecycle&quot;&gt;&lt;code&gt;View&lt;/code&gt; Lifecycle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d7527505222582f50dc5338f654e58ab4bb585" translate="yes" xml:space="preserve">
          <source>Marionette also supports templates that render to DOM instead of html strings by using a custom render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b912d0a60e1ce2bd9bb90071a5b1512f3efb25e" translate="yes" xml:space="preserve">
          <source>Marionette can set options when you instantiate a class. This lets you override many class-based attributes when you need to. You can also pass new information specific to the object in question that it can access through special helper methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a420baa63c2d25e3aaa7d68c4a45b08dac352427" translate="yes" xml:space="preserve">
          <source>Marionette follows Backbone's &lt;a href=&quot;basics#class-based-inheritance&quot;&gt;pseudo-class architecture&lt;/a&gt;. This documentation is meant to provide a comprehensive listing of those classes so that the reader can have a high-level view and understand functional similarities between the classes. All of these classes share a &lt;a href=&quot;common&quot;&gt;common set of functionality&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e1e05a5ec629b9e4dcfe0fcbd2a6b94e3617bb" translate="yes" xml:space="preserve">
          <source>Marionette global instance is not attached to Backbone global instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba84ac1cfc7a140f219cbb5c74abdc9eb86c5ac" translate="yes" xml:space="preserve">
          <source>Marionette has a few methods and core functionality that are common to &lt;a href=&quot;classes&quot;&gt;all classes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c93a731744127a8a19bb7fb8b137e6d6925d9e" translate="yes" xml:space="preserve">
          <source>Marionette has a few methods that are common to &lt;a href=&quot;classes&quot;&gt;all classes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b93b6a6a967c40db4f6061856cedf5900e0984f" translate="yes" xml:space="preserve">
          <source>Marionette is able to trigger &lt;code&gt;attach&lt;/code&gt;/&lt;code&gt;detach&lt;/code&gt; events down the view tree along with triggering the &lt;code&gt;dom:refresh&lt;/code&gt;/&lt;code&gt;dom:remove&lt;/code&gt; events because of the view event monitor. This monitor starts when a view is created or shown in a region (to handle non-Marionette views).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e5c4b7b1df4ceada27ce430b45eb8268d304fc" translate="yes" xml:space="preserve">
          <source>Marionette provides a few classes for building your view tree and application structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec98ac7d32426eab49ee9246fac7630358d8ff93" translate="yes" xml:space="preserve">
          <source>Marionette provides a set of utility / helper functions that are used to facilitate common behaviors throughout the framework. These functions may be useful to those that are building on top of Marionette, as they provide a way to get the same behaviors and conventions from your own code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22931899a90a6763313bddd82c94eba8be2c665b" translate="yes" xml:space="preserve">
          <source>Marionette provides a simple mechanism to infinitely nest views in a single paint: just render all of the children in the &lt;code&gt;onRender&lt;/code&gt; callback for the &lt;a href=&quot;events.class#render-and-beforerender-events&quot;&gt;&lt;code&gt;render&lt;/code&gt; event&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9577190713265c44a09ba3de1a5c36f823032b5c" translate="yes" xml:space="preserve">
          <source>Marionette still supports using the library via an inline script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3a7c3a4a04dd9ea86cf9b4b54909d64a2db0c5" translate="yes" xml:space="preserve">
          <source>Marionette uses &lt;a href=&quot;events#triggermethod&quot;&gt;&lt;code&gt;triggerMethod&lt;/code&gt;&lt;/a&gt; internally to trigger various events used within the &lt;a href=&quot;classes&quot;&gt;classes&lt;/a&gt;. This provides &lt;a href=&quot;events#onevent-binding&quot;&gt;'onEvent' binding&lt;/a&gt; providing convenient hooks for handling class events. Notably all internally triggered events will pass the triggering class instance as the first argument of the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb222797e3edabfba01e61f1d1b71ce5b86c414f" translate="yes" xml:space="preserve">
          <source>Marionette views provide a &lt;code&gt;templateContext&lt;/code&gt; attribute that is used to add extra information to your templates. This can be either an object, or a function returning an object. The keys on the returned object will be mixed into the model or collection keys and made available to the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be7f6b4fe520d809c9376a5627d9229fe08b781" translate="yes" xml:space="preserve">
          <source>Marionette views use the &lt;code&gt;getTemplate&lt;/code&gt; method to determine which template to use for rendering into its &lt;code&gt;el&lt;/code&gt;. By default &lt;code&gt;getTemplate&lt;/code&gt; is predefined on the view as simply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d422e5ec10a99146c9fb56ae8f878db1006770" translate="yes" xml:space="preserve">
          <source>Marionette will automatically serialize the data from its &lt;code&gt;model&lt;/code&gt; or &lt;code&gt;collection&lt;/code&gt; for the template to use at &lt;a href=&quot;#rendering-the-template&quot;&gt;rendering&lt;/a&gt;. You can override this logic and provide serialization of other data with the &lt;code&gt;serializeData&lt;/code&gt; method. The method is called with no arguments, but has the context of the view and should return a javascript object for the template to consume. If &lt;code&gt;serializeData&lt;/code&gt; does not return data the template may still receive &lt;a href=&quot;#adding-context-data&quot;&gt;added context&lt;/a&gt; or an empty object for rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d579d3caa519a51830b3917163454ebfbf8d4b9" translate="yes" xml:space="preserve">
          <source>Marionette will determine the initial state of the view as to whether the view is considered already &lt;a href=&quot;#rendering-a-view&quot;&gt;rendered&lt;/a&gt; or &lt;a href=&quot;#attaching-a-view&quot;&gt;attached&lt;/a&gt;. If a view is already rendered or attached its &lt;a href=&quot;#lifecycle-state-methods&quot;&gt;state&lt;/a&gt; will reflect that status, but the &lt;a href=&quot;events.class#dom-change-events&quot;&gt;related events&lt;/a&gt; will not have fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3a05c286aa372b97210792630e20e72dd1e549" translate="yes" xml:space="preserve">
          <source>Marionette's Views extend &lt;a href=&quot;http://backbonejs.org/#View&quot;&gt;&lt;code&gt;Backbone.View&lt;/code&gt;&lt;/a&gt; and so have references to the view's &lt;code&gt;el&lt;/code&gt;, &lt;code&gt;$el&lt;/code&gt;, and &lt;code&gt;this.$()&lt;/code&gt; as well as defining an &lt;code&gt;events&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0042c01262061aa5ba317a73a2fcf48fb6f05b00" translate="yes" xml:space="preserve">
          <source>Marionette's event triggers work just like regular Backbone events - you can use &lt;code&gt;myView.on&lt;/code&gt; and &lt;code&gt;myObject.listenTo&lt;/code&gt; to act on events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade739e03b2fb023f22875356bdaadcb09caa290" translate="yes" xml:space="preserve">
          <source>Marionette.AppRouter</source>
          <target state="translated">Marionette.AppRouter</target>
        </trans-unit>
        <trans-unit id="ba5df34e1f004ddbaf5e9ea87cf3e2895ecf1665" translate="yes" xml:space="preserve">
          <source>Marionette.Application</source>
          <target state="translated">Marionette.Application</target>
        </trans-unit>
        <trans-unit id="be78894afd036429089f6616081e565583ba9fac" translate="yes" xml:space="preserve">
          <source>Marionette.Behavior</source>
          <target state="translated">Marionette.Behavior</target>
        </trans-unit>
        <trans-unit id="5bee535ebf20e03cc69809d0e4e3292a13db17ac" translate="yes" xml:space="preserve">
          <source>Marionette.CollectionView</source>
          <target state="translated">Marionette.CollectionView</target>
        </trans-unit>
        <trans-unit id="5153557d0e46285367ef31eabf1e4b1956588c12" translate="yes" xml:space="preserve">
          <source>Marionette.Events and triggerMethod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdb9532868b246d2a629c4a9125ca8a3e5986ce" translate="yes" xml:space="preserve">
          <source>Marionette.MnObject</source>
          <target state="translated">Marionette.MnObject</target>
        </trans-unit>
        <trans-unit id="4604f0620e5ccaba9bb8554f1558cf632edbf83f" translate="yes" xml:space="preserve">
          <source>Marionette.Region</source>
          <target state="translated">Marionette.Region</target>
        </trans-unit>
        <trans-unit id="ce5d3174258dda7edfb586f7b5b183d9375fa602" translate="yes" xml:space="preserve">
          <source>Marionette.Routing</source>
          <target state="translated">Marionette.Routing</target>
        </trans-unit>
        <trans-unit id="b37f901597bce1b55a5c3d11bd146a54b5279ebd" translate="yes" xml:space="preserve">
          <source>Marionette.View</source>
          <target state="translated">Marionette.View</target>
        </trans-unit>
        <trans-unit id="d52643b5cec046a11ca35c2e534d4ea4c4518a4f" translate="yes" xml:space="preserve">
          <source>Marionette.js</source>
          <target state="translated">Marionette.js</target>
        </trans-unit>
        <trans-unit id="10687c57012eeb98ea3c6ebfb58243a99136e34c" translate="yes" xml:space="preserve">
          <source>Mash it into a single call - &lt;code&gt;onBeforeDomRefresh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="ef6f218cabaaf1a03f674a30f448eac7b8c0f2dd" translate="yes" xml:space="preserve">
          <source>MnObject</source>
          <target state="translated">MnObject</target>
        </trans-unit>
        <trans-unit id="9d47c4883da6ab76bf228375a9f96da5a5e9b38c" translate="yes" xml:space="preserve">
          <source>MnObject Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14da9690e79c57784ceb6e68f955b20fac1624c9" translate="yes" xml:space="preserve">
          <source>MnObject's API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36eaf427f6b2141afc9f588d0de12122eba52be9" translate="yes" xml:space="preserve">
          <source>MnObjects have a &lt;code&gt;destroy&lt;/code&gt; method that unbind the events that are directly attached to the instance. &lt;code&gt;destroy&lt;/code&gt; returns the MnObject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d1ca66c41254171e26939298c91e4676ab6741" translate="yes" xml:space="preserve">
          <source>Model Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="8fb241d183303ff35154aab94f8af7878f9cfcd9" translate="yes" xml:space="preserve">
          <source>More information on &lt;code&gt;triggerMethod&lt;/code&gt; can be found in the &lt;a href=&quot;events#triggermethod&quot;&gt;Marionette events documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2f77b5f8e3e12703dd5202d9fd948317fbe72f" translate="yes" xml:space="preserve">
          <source>NPM and Browserify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f36ee5638fcda58c9e6fb48670e2061566cf0f" translate="yes" xml:space="preserve">
          <source>NPM and Brunch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f71a6cda438aa50be669d38b87431c33b3d655" translate="yes" xml:space="preserve">
          <source>NPM and Webpack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af90e40f999b64c4df76b231d15d185f37d4d207" translate="yes" xml:space="preserve">
          <source>Nested Behaviors act as if they were direct Behaviors of the parent &lt;code&gt;Behavior&lt;/code&gt;'s view instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa68b0949c839cadfee84202ed21ef0b2881c90" translate="yes" xml:space="preserve">
          <source>Nesting Behaviors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af794ce3e0697f539baabc976758bc246a0e2511" translate="yes" xml:space="preserve">
          <source>NextCollectionView was renamed to CollectionView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca17d41584abe3e6adf54bd48ff0bbb6cd4ad6c7" translate="yes" xml:space="preserve">
          <source>Non-Marionette Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a26a8d60c81292687f447a9caf8784b701d1418" translate="yes" xml:space="preserve">
          <source>Notably if there are no &lt;code&gt;children&lt;/code&gt; when rendering, the view will still be considered rendered. This is true whether or not an &lt;a href=&quot;marionette.collectionview#collectionviews-emptyview&quot;&gt;&lt;code&gt;emptyView&lt;/code&gt;&lt;/a&gt; is rendered. So it is possible for a &lt;code&gt;CollectionView&lt;/code&gt; to be &quot;rendered&quot; but the &lt;code&gt;el&lt;/code&gt; to only be an empty tag. Also note that just like &lt;code&gt;View&lt;/code&gt; a &lt;code&gt;CollectionView&lt;/code&gt; may have a &lt;code&gt;template&lt;/code&gt; which is rendered and attached to the &lt;code&gt;el&lt;/code&gt; during the &lt;code&gt;render&lt;/code&gt;, but the template rendering itself has no bearing on the status of the &lt;code&gt;CollectionView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041cccaf494ef02bbcc5c22671a5e86761c27723" translate="yes" xml:space="preserve">
          <source>Note that the event handler can be defined as a method like used for &lt;code&gt;'left:building'&lt;/code&gt; event or inline like used in &lt;code&gt;'enter:building'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcff587ace918c0786c9c6a65cf0ad598c26a9bd" translate="yes" xml:space="preserve">
          <source>Note: If &lt;code&gt;view.showChildView(region, subView)&lt;/code&gt; is invoked before the &lt;code&gt;view&lt;/code&gt; has been rendered, it will automatically render the &lt;code&gt;view&lt;/code&gt; so the region's &lt;code&gt;el&lt;/code&gt; exists in the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914d36f99c86b0015175e028da11aef545691b94" translate="yes" xml:space="preserve">
          <source>Now we can access &lt;code&gt;thirdRegion&lt;/code&gt; as we would the others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a6ac8afdb54c05a610aa1c4c5c300ed568510a" translate="yes" xml:space="preserve">
          <source>Now, whenever the model attached to this View is unable to sync with the server, we can display an error message to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902d739f813852ca3b93785aadf1bf2a1c2501c9" translate="yes" xml:space="preserve">
          <source>On a &lt;code&gt;View&lt;/code&gt; the &lt;code&gt;regions&lt;/code&gt; attribute can also be a &lt;a href=&quot;basics#functions-returning-values&quot;&gt;function returning an object&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fdbaa4bd753addb3e80aed523b45c164fb56ad" translate="yes" xml:space="preserve">
          <source>Once a region is defined, you can call its &lt;code&gt;show&lt;/code&gt; method to display the view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547c0e91a5ee156f8bd8f06d6856ff34541de537" translate="yes" xml:space="preserve">
          <source>Once you have determined the best strategy for removing your unmanaged child views, adding them is best handled in the &lt;a href=&quot;events.class#renderchildren-and-beforerenderchildren-events&quot;&gt;&lt;code&gt;render:children&lt;/code&gt; event&lt;/a&gt;. Additionally adding a child with &lt;code&gt;addChildView&lt;/code&gt; will itself cause these events to occur, so to prevent stack overflows, it is best to use a flag to guard the adds and to insert a new view at a specified index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ea71c885b02ec9ca12a1c3a07ff9d5701d5c20" translate="yes" xml:space="preserve">
          <source>Once you have your application configured, you can kick everything off by calling: &lt;code&gt;myApp.start(options)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af91c9a650e5f91a122075ce340dd818414cae16" translate="yes" xml:space="preserve">
          <source>One additional difference is the &lt;code&gt;Application&lt;/code&gt;&lt;a href=&quot;marionette.mnobject#unique-client-id&quot;&gt;&lt;code&gt;cidPrefix&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;mna&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ddd113b0e1b1cea9f4587211c1cea52b909047" translate="yes" xml:space="preserve">
          <source>One of the required changes is to explicitly define the &lt;code&gt;childView&lt;/code&gt; when implementing a recursive (tree) view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccab90556cd700ba64085d02f10be9f95b54cce" translate="yes" xml:space="preserve">
          <source>Options set here will override options set on class definition. So, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7084c2de8a0feaafdfe6e7fa02921a005e13d34" translate="yes" xml:space="preserve">
          <source>Or it can be DOM created in memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0b889eb1cc52342cb2287dfb59111e94055884" translate="yes" xml:space="preserve">
          <source>Organizing Your View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2388fd25e83c524fa847cd6e068ab74d00f0708" translate="yes" xml:space="preserve">
          <source>Override the region's &lt;code&gt;attachHtml&lt;/code&gt; method to change how the view is attached to the DOM (when not using &lt;code&gt;replaceElement: true&lt;/code&gt;. This method receives one parameter - the view to show.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa7a6e064d69811cca9c417033b83743f4cb6a0" translate="yes" xml:space="preserve">
          <source>Override the region's &lt;code&gt;removeView&lt;/code&gt; method to change how and when the view is destroyed / removed from the DOM. This method receives one parameter - the view to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f93b2dd9b6a9d175c48e417d06d3c453ce47461" translate="yes" xml:space="preserve">
          <source>Override this function to programatically decide which &lt;code&gt;viewFilter&lt;/code&gt; to use when &lt;code&gt;filter&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e58ec13ff55889b0a9b54ceff375300fc465ed7" translate="yes" xml:space="preserve">
          <source>Override this method to determine which &lt;code&gt;viewComparator&lt;/code&gt; to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8472747905c544405ee3032e2415393bf302406" translate="yes" xml:space="preserve">
          <source>Override this method when you need a more complicated build, but use &lt;a href=&quot;#collectionviews-childview&quot;&gt;&lt;code&gt;childView&lt;/code&gt;&lt;/a&gt; if you need to determine &lt;em&gt;which&lt;/em&gt; View class to instantiate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad992d48898cbb9bdc643d8a7ef16a1098c8edc" translate="yes" xml:space="preserve">
          <source>Partially-rendered Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7058ab59d41954e06b1904ff2d24503d8fffcf96" translate="yes" xml:space="preserve">
          <source>Passing Data to the &lt;code&gt;childView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2491bcac7e652c24901ce06848fef4baaf6f2ff" translate="yes" xml:space="preserve">
          <source>Passing Data to the &lt;code&gt;emptyView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153d652599e5c4725c4e6b68943584ac2e11d4a6" translate="yes" xml:space="preserve">
          <source>Prerendered Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc97c4c64ee3db99ef5c8467660d32a27ee3c20" translate="yes" xml:space="preserve">
          <source>Preserving Existing Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bdc65e77b04c27a078cba6e9319016a91b014a" translate="yes" xml:space="preserve">
          <source>Previous to Marionette v4 the default renderer was the &lt;code&gt;TemplateCache&lt;/code&gt;. This renderer has been extracted to a separate library: &lt;a href=&quot;https://github.com/marionettejs/marionette.templatecache&quot;&gt;https://github.com/marionettejs/marionette.templatecache&lt;/a&gt; and can be used with v4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1486638238d8e23c9e9c4cb54fe67252e70e0f50" translate="yes" xml:space="preserve">
          <source>Previously bundled router. Extends &lt;a href=&quot;http://backbonejs.org/#Router&quot;&gt;backbone.router&lt;/a&gt; and is helpful for breaking a large amount of routes on a single backbone.router instance into smaller more managable approuters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8aa4212a65f8fdf651df156bb09a284da68c98" translate="yes" xml:space="preserve">
          <source>Provide a single defined reference to commonly used UI elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11def34e7b077cee8d7872adc8a0388232257077" translate="yes" xml:space="preserve">
          <source>Providing Your Own DOM API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c91b920284804b13c77cb2545fc8a05bd67d77" translate="yes" xml:space="preserve">
          <source>Proxied Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72dc3c004a7828f7c0b62855a89bcf466ac3a7b4" translate="yes" xml:space="preserve">
          <source>Proxy Handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f228dd4fe749401ce6f459662fb26fa05adea0" translate="yes" xml:space="preserve">
          <source>Query from only the view's template and not the children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e4ee8eb5469ec5f94043e4688d5d020547bff7" translate="yes" xml:space="preserve">
          <source>Quick start using NPM and Browserify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568efa913442536347bc9eb041f2d556b037cbfc" translate="yes" xml:space="preserve">
          <source>Quick start using NPM and Brunch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341b5639a6603b1857ced5dac9290e0dd6aaf4ef" translate="yes" xml:space="preserve">
          <source>Quick start using NPM and Webpack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01beedd449f8903c5e8f7a89ff6b7b73e72c27d" translate="yes" xml:space="preserve">
          <source>Radio API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b50b278d0187199292622b3684face9ee6561d" translate="yes" xml:space="preserve">
          <source>Radio Concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ab5d98a72ecd5db950d7db70cd412468381015" translate="yes" xml:space="preserve">
          <source>Radio takes these two constructs and adds the channel implementation - providing namespaces for events and requests. In short, Radio is a global, namespaced, message bus system designed to allow two otherwise unrelated objects to communicate and share information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41540d3b705cb2e72d5e8e80c82d37c05d90820e" translate="yes" xml:space="preserve">
          <source>Re-rendering children of a view with preexisting DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60200c3036ab87254d482e33aabd13ed8c4e078e" translate="yes" xml:space="preserve">
          <source>Re-rendering the CollectionView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542dbe673e06832aeae118830437270c07e8c4f6" translate="yes" xml:space="preserve">
          <source>Read More:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7671c49dca15d028f81ca620471eea08dc8eefb9" translate="yes" xml:space="preserve">
          <source>Receives a hash of event names and functions and/or function names, and returns the same hash with the function names replaced with the function references themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21f9a9460b5c4b0ed3f9091d60dee3d14e6dee4" translate="yes" xml:space="preserve">
          <source>Recommended changes (deprecations)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22425910e396398a61b05dd096ff35c1447c6cc4" translate="yes" xml:space="preserve">
          <source>Referencing UI in &lt;code&gt;events&lt;/code&gt; and &lt;code&gt;triggers&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14cc2b0a017a24fe252aa1cd6ad0c0d4a7d1ded" translate="yes" xml:space="preserve">
          <source>Referencing UI in &lt;code&gt;regions&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6651f1a3135c21db0401cc7f1e54674d7ad527c" translate="yes" xml:space="preserve">
          <source>Reflects when a view's template is being rendered into its &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f217179940c6d89f5cb2c7002a58d91ab7286c1" translate="yes" xml:space="preserve">
          <source>Region</source>
          <target state="translated">Region</target>
        </trans-unit>
        <trans-unit id="98f483f39baa9df28acd7a062f3cc6877e49b0b5" translate="yes" xml:space="preserve">
          <source>Region &lt;code&gt;preventDestroy&lt;/code&gt; option was removed from &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;empty&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ef897893b808d44e0af8cb4709060519997022" translate="yes" xml:space="preserve">
          <source>Region Availability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e885ef8659a870f97731adbdb475e9b89345d9" translate="yes" xml:space="preserve">
          <source>Region Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d153e198dc2e27350fe6c7446b8ed5981e190d4" translate="yes" xml:space="preserve">
          <source>Region Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86b0c82a8afc02bd19323a54ba42b34004090af" translate="yes" xml:space="preserve">
          <source>Region no longer supports the &lt;code&gt;selector&lt;/code&gt; property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039711232507cd9753ddba093da2350b27e67dca" translate="yes" xml:space="preserve">
          <source>Regions</source>
          <target state="translated">Regions</target>
        </trans-unit>
        <trans-unit id="94dd3ae2df6c6faf42784c7be8f7c3339ca5efa8" translate="yes" xml:space="preserve">
          <source>Regions are ideal for rendering application layouts by isolating concerns inside another view. This is especially useful for independently re-rendering chunks of your application without having to completely re-draw the entire screen every time some data is updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2d4f6d3d81f2efcfdedb139523c42a13fbd71a" translate="yes" xml:space="preserve">
          <source>Regions can be added to a View at class definition, with &lt;a href=&quot;marionette.region#defining-regions&quot;&gt;&lt;code&gt;regions&lt;/code&gt;&lt;/a&gt;, or at runtime using &lt;a href=&quot;marionette.region#adding-regions&quot;&gt;&lt;code&gt;addRegion&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961c22589fb15c0a097616f494222947ce2f3875" translate="yes" xml:space="preserve">
          <source>Regions maintain the &lt;a href=&quot;view.lifecycle&quot;&gt;View's lifecycle&lt;/a&gt; while showing or emptying a view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d616df31ac9bb3b0a52efa48e7932f7e5f5d4ef" translate="yes" xml:space="preserve">
          <source>Regions provide consistent methods to manage, show and destroy views in your applications and views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e5f5f190a980a15656a0fdea0ca948a3700242" translate="yes" xml:space="preserve">
          <source>Relects when the &lt;code&gt;el&lt;/code&gt; of a view is attached to the DOM. These events will not trigger when a view is re-rendered as the &lt;code&gt;el&lt;/code&gt; itself does not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5802969de32b799d0fe378c1538026cfc4d6bb30" translate="yes" xml:space="preserve">
          <source>Relects when the &lt;code&gt;el&lt;/code&gt; of a view is detached from the DOM. These events will not trigger when a view is re-rendered as the &lt;code&gt;el&lt;/code&gt; itself does not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0602958ee5c871dea8815d4d533440858551eb29" translate="yes" xml:space="preserve">
          <source>Relects when the &lt;em&gt;contents&lt;/em&gt; of a view's &lt;code&gt;el&lt;/code&gt; are about to change in the DOM. This event will fire when the view is about to be &lt;a href=&quot;#detach-and-beforedetach-events&quot;&gt;&lt;code&gt;detach&lt;/code&gt;ed&lt;/a&gt;. It will also fire before an attached view is re-rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b1ce2d9de8ee01cf523e5fe92c3983aac35e29" translate="yes" xml:space="preserve">
          <source>Relects when the &lt;em&gt;contents&lt;/em&gt; of a view's &lt;code&gt;el&lt;/code&gt; change in the DOM. This event will fire when the view is first &lt;a href=&quot;#attach-and-beforeattach-events&quot;&gt;&lt;code&gt;attach&lt;/code&gt;ed&lt;/a&gt;. It will also fire if an attached view is re-rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68799da45daba25eea2f9e839225128b1262f7b7" translate="yes" xml:space="preserve">
          <source>Remove &lt;code&gt;oldEl&lt;/code&gt; from the DOM and put &lt;code&gt;newEl&lt;/code&gt; in its place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af27904d6f146f64164cf7c81128eec08ea024c" translate="yes" xml:space="preserve">
          <source>Remove the inner contents of &lt;code&gt;el&lt;/code&gt; from the DOM while leaving &lt;code&gt;el&lt;/code&gt; itself in the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f26e440c525295d867a707928259bcc1ba5cc53" translate="yes" xml:space="preserve">
          <source>Removing &lt;code&gt;CollectionView.getChildView()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8544093dcd3014bc444dfa3451be05d357ab2638" translate="yes" xml:space="preserve">
          <source>Removing &lt;code&gt;CollectionView.getEmptyView()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f53dbe39fed8778c03b37c11a9e57cc11c7326" translate="yes" xml:space="preserve">
          <source>Removing &lt;code&gt;CompositeView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65376fa84fea20b9905aec062ce28d304e32fec7" translate="yes" xml:space="preserve">
          <source>Removing &lt;code&gt;LayoutView&lt;/code&gt; and &lt;code&gt;ItemView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350e5001db0e190eb456118372cbc8c60135e8ab" translate="yes" xml:space="preserve">
          <source>Removing &lt;code&gt;view.region&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e4838ef950c708915c2c83fc45c50f2538185e" translate="yes" xml:space="preserve">
          <source>Removing Regions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f8527c2151951b8522aa69cea8e08380920bde" translate="yes" xml:space="preserve">
          <source>Removing a Child View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263707b520e85260ad9bb0dfced3a9ce24dff127" translate="yes" xml:space="preserve">
          <source>Renderer class was removed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d716c21818cd23d6078b6f842a4ad102d10185" translate="yes" xml:space="preserve">
          <source>Rendering Children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1df91daa4fceae2d529bb558418be0990cad784" translate="yes" xml:space="preserve">
          <source>Rendering a CollectionView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0985a0ecfabc2231124bd8de762617aaeafd5bd5" translate="yes" xml:space="preserve">
          <source>Rendering a Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44590de4fcd5adee6b488724832adb905dd4b600" translate="yes" xml:space="preserve">
          <source>Rendering a View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e71a58c2f9cd2225c6a3044504029f1faa321ac" translate="yes" xml:space="preserve">
          <source>Rendering child views is often best accomplish after the view render as typically the first render happens prior to the view entering the DOM. This helps to prevent unnecessary repaints and reflows by making the DOM insert at the highest possible view in the view tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06fe9eec33bda870e83833c704b4ef0438e9b2e" translate="yes" xml:space="preserve">
          <source>Rendering the Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b0c2c210d483efed769ca3bccb7a8fad48fe3c" translate="yes" xml:space="preserve">
          <source>Rendering to DOM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a738c5a740716c2c5d4fd66e282927c73c83df" translate="yes" xml:space="preserve">
          <source>Rendering to HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f094bf825821ecf2fc377f5943848ecc17f1cb" translate="yes" xml:space="preserve">
          <source>Replace all instances of &lt;code&gt;onShow&lt;/code&gt;, &lt;code&gt;on('show')&lt;/code&gt;, &lt;code&gt;onBeforeShow&lt;/code&gt; and &lt;code&gt;on('before:show')&lt;/code&gt; to use the &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;before:render&lt;/code&gt; events. This is the recommendation for Marionette 3 and ensures the DOM tree is built in-memory before modifying the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ffb05302040f0afc9a558ee07e79d0b7fed084" translate="yes" xml:space="preserve">
          <source>Replace all instances of &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;before:show&lt;/code&gt; with &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;before:render&lt;/code&gt;. If you want the view to be visible in the DOM, then listen to the &lt;code&gt;dom:refresh&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d389436d7de056a782442ee4d4cf3a7d1b8d26" translate="yes" xml:space="preserve">
          <source>Replace the contents of &lt;code&gt;el&lt;/code&gt; with the HTML string of &lt;code&gt;html&lt;/code&gt;. Unlike other DOM functions, this only takes a literal string for its second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f513159c1dfd824eee90d0d911ecdf2e2c2eb3" translate="yes" xml:space="preserve">
          <source>Replying to Requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3199869e2e13f494a856afb59ca293c33fff6a2c" translate="yes" xml:space="preserve">
          <source>Replying to requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aed03cac49d5e43da4e855a967286931a4d621a" translate="yes" xml:space="preserve">
          <source>Request</source>
          <target state="translated">Request</target>
        </trans-unit>
        <trans-unit id="32fdc12d389bc62731e172e1e869ea6c29f32edc" translate="yes" xml:space="preserve">
          <source>Requests - a global request/reply implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f190ea2c3185822da988996e7daf8a639a52e4e" translate="yes" xml:space="preserve">
          <source>Required changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ed21ce10d6906172af8bff035c3bf0ecd63364" translate="yes" xml:space="preserve">
          <source>Retrieve an object's attribute either directly from the object, or from the object's &lt;code&gt;this.options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fdb81e0a61eb41dd6a459e4aa9358698c396d7" translate="yes" xml:space="preserve">
          <source>Return the attached &lt;a href=&quot;marionette.region&quot;&gt;region object&lt;/a&gt; for the Application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f280bb70ac9dcb690bd0839d63e4633e7224ea69" translate="yes" xml:space="preserve">
          <source>Return the view currently being displayed in the Application's attached &lt;code&gt;region&lt;/code&gt;. If the Application is not currently displaying a view, this method returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859dfe1748b1ddba0ca91e7ca5c9394c36ae7d67" translate="yes" xml:space="preserve">
          <source>Returning Values from Reply</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb26459129a843901ac279990c769753c11f44c0" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating if the &lt;code&gt;el&lt;/code&gt; has child nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebee0da1338f7c57dca183adbaf5a48293550cd" translate="yes" xml:space="preserve">
          <source>Returns a boolean value reflecting if the view has been destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bda26a3d9711f341a6ff8a818f5978b4a6c41e" translate="yes" xml:space="preserve">
          <source>Returns a boolean value reflecting if the view is considered attached to the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f271503227e21a7dc369cbf90a36684e0b6a971d" translate="yes" xml:space="preserve">
          <source>Returns a boolean value reflecting if the view is considered rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530ff7378c6edd313b01d12e809b5b9835cf5cdb" translate="yes" xml:space="preserve">
          <source>Returns a new HTML DOM node instance. The resulting node can be passed into the other DOM functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a617f4149a66c40ef719a3c7133f2925eca0b7" translate="yes" xml:space="preserve">
          <source>Returns true if the el contains the node childEl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68856f7c1cdde7c7e2db0bb65069bf3f9d96b11" translate="yes" xml:space="preserve">
          <source>Routing in Marionette</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da944e92be2f8e6bf8d336d1aca983f5ce7600c5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;marionette.collectionview#rendering-collectionviews&quot;&gt;&lt;code&gt;CollectionView&lt;/code&gt;&lt;/a&gt; for detail on upgrading to Marionette 3. This technique works in both Marionette 2.x and Marionette 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f41984f5d81e6c05beab74f1a3ff1a584bf5e11" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;marionette.view#laying-out-views---regions&quot;&gt;laying out views&lt;/a&gt; for an introduction in managing regions throughout your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66668550abaa19b66e5ed208ae25d836ce74110" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;marionette.view#laying-out-views---regions&quot;&gt;views&lt;/a&gt; to learn more about how to manage regions in Marionette 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61b3afb6583f868531ae0e51f7d372b17e6a87a" translate="yes" xml:space="preserve">
          <source>Selections is a simple MnObject that manages a selection of things. Because Selections extends from MnObject, it gets &lt;code&gt;initialize&lt;/code&gt; and &lt;code&gt;Events&lt;/code&gt; for free.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b6cb18178231276391f4d0402077f5baf4ad36" translate="yes" xml:space="preserve">
          <source>Self Managed &lt;code&gt;children&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac42163cba3dcc0c492844fc9e9673189f7ac47" translate="yes" xml:space="preserve">
          <source>Serializing Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd7df8af6f55977852795acdcfd1e3b0ea1382f" translate="yes" xml:space="preserve">
          <source>Serializing a Collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c06c005f0fe89bf08b3178168d2d05d23ff207" translate="yes" xml:space="preserve">
          <source>Serializing a Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677fafc7f5aa9b21ae7bd76f5e5005ad012c9a35" translate="yes" xml:space="preserve">
          <source>Serializing with a &lt;code&gt;CollectionView&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5184dbd7948ab07df543eaf4abab79792549c33" translate="yes" xml:space="preserve">
          <source>Set How View's &lt;code&gt;el&lt;/code&gt; Is Attached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e801984e23022daa6c9cddb3f1eabf1b6c07c09c" translate="yes" xml:space="preserve">
          <source>Set How View's &lt;code&gt;el&lt;/code&gt; Is Attached and Detached</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d66080c1492aab7fc0971fbb8ab25b75e9480cf" translate="yes" xml:space="preserve">
          <source>Setting Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28175b9f9fd89ccb44bf46f8e39bd7d3847e9e30" translate="yes" xml:space="preserve">
          <source>Setting a Feature Flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15709bf7cde63fa19ad9601a600a2870236e558" translate="yes" xml:space="preserve">
          <source>Setting a View Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d992e0bd965da877b43c47efa78aafbeaabd9114" translate="yes" xml:space="preserve">
          <source>Showing a Child View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2728979253bf0df9ac300852015cb119f2a2c26f" translate="yes" xml:space="preserve">
          <source>Showing a Template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fb1e688eef0a11fa2cd062dc7bb22b6b339d66" translate="yes" xml:space="preserve">
          <source>Showing a View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaab63e390c97f3ee82593868403fdf9d866562" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#collectionviews-childview&quot;&gt;&lt;code&gt;childView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#padding-data-to-the-childview&quot;&gt;&lt;code&gt;childViewOptions&lt;/code&gt;&lt;/a&gt;, there is an &lt;code&gt;emptyViewOptions&lt;/code&gt; property that will be passed to the &lt;code&gt;emptyView&lt;/code&gt; constructor. It can be provided as an object literal or as a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e4dc0c30bfd6945f549f39f03df975cfd7e248" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#show-and-beforeshow-events&quot;&gt;&lt;code&gt;Region&lt;/code&gt; &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;before:show&lt;/code&gt; events&lt;/a&gt; these events fire before (&lt;code&gt;before:render:children&lt;/code&gt;) and after (&lt;code&gt;render:children&lt;/code&gt;) the &lt;code&gt;children&lt;/code&gt; of the &lt;code&gt;CollectionView&lt;/code&gt; are attached to the &lt;code&gt;CollectionView&lt;/code&gt;'s &lt;code&gt;el&lt;/code&gt; or &lt;code&gt;childViewContainer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dfcc22441c1e1cc9ee547f1ea93818e59cea0d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;attachHtml&lt;/code&gt;, override &lt;code&gt;detachHtml&lt;/code&gt; to determine how the region detaches the contents from its &lt;code&gt;el&lt;/code&gt;. This method receives no parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74148b582f25a77c0eaa58a6866c4c172b961ccc" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;destroy&lt;/code&gt;, &lt;code&gt;CollectionView&lt;/code&gt; has events for when all of its children are destroyed. See &lt;a href=&quot;#destroychildren-and-beforedestroychildren-events&quot;&gt;the CollectionView's events&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39c155ac99ee3c8ca9c91c68b421abcc95b3e0a" translate="yes" xml:space="preserve">
          <source>Simply replace all instances of &lt;code&gt;getChildView&lt;/code&gt; with &lt;code&gt;childView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe15501641b84feb9d3e0677eedd6a22b173dc7" translate="yes" xml:space="preserve">
          <source>Simply replace all instances of &lt;code&gt;getEmptyView&lt;/code&gt; with &lt;code&gt;emptyView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e8371ebb820266fbab82e1eb2d1a7d0943eb35" translate="yes" xml:space="preserve">
          <source>Simply replace all instances of &lt;code&gt;templateHelpers&lt;/code&gt; with &lt;code&gt;templateContext&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda40c9d97027937e3d793750b960d75d7ba3b0f" translate="yes" xml:space="preserve">
          <source>So if you are accounting for added views in your &lt;code&gt;viewFilter&lt;/code&gt; and &lt;code&gt;viewComparator&lt;/code&gt; the best place to add these children is likely in the &lt;a href=&quot;events.class#render-and-beforerender-events&quot;&gt;&lt;code&gt;render&lt;/code&gt; event&lt;/a&gt; as the views will only be added once (or re-added if the children are rebuilt in a subsequent &lt;code&gt;render&lt;/code&gt;) and managed in the sort or filter as the &lt;code&gt;collection&lt;/code&gt; is updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e697b2bc6950100b9440fc254c2a82be8481a50f" translate="yes" xml:space="preserve">
          <source>So your view will need to be prepared to handle both scenarios.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7408766ede53173c9bdb95674b42ceb77075540" translate="yes" xml:space="preserve">
          <source>So, for example, when a model sync fails:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822f225a90e6a21d93c7900c90ce831c9eb0968d" translate="yes" xml:space="preserve">
          <source>Some Routing Solutions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2373ec16b20af173470c5db0f6ca59c17f13071" translate="yes" xml:space="preserve">
          <source>Some of these properties come from Marionette, but many are inherited from &lt;a href=&quot;http://backbonejs.org/#View-constructor&quot;&gt;&lt;code&gt;Backbone.View&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2de78178178e8b23c431fb66f88d7027a8a745" translate="yes" xml:space="preserve">
          <source>Sorting the &lt;code&gt;children&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ad5d7e594322b3a2e607f5acd273a0fb14819a" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;regions&lt;/code&gt; as a Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af2e21d917585b954cf4677ba1687c69cb303be" translate="yes" xml:space="preserve">
          <source>Split the words around the &lt;code&gt;:&lt;/code&gt; characters - so &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;dom&lt;/code&gt;, &lt;code&gt;refresh&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e49b6fde65818e9a40a72c1bb38c42a59ddc6b" translate="yes" xml:space="preserve">
          <source>Starting An Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833e58e1f9818ab0b5286af67e1692ab336e9fee" translate="yes" xml:space="preserve">
          <source>String Selector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ece8d28853641ce94274f7b02e751dae113445" translate="yes" xml:space="preserve">
          <source>Support for vanilla Backbone.View has changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd9bcd80597e18c49965b57f6fd423d8f348551" translate="yes" xml:space="preserve">
          <source>Supporting Backbone Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab62b85d17f30cc58654100b3bc450098be5bc0" translate="yes" xml:space="preserve">
          <source>Swap the location of two views in the &lt;code&gt;CollectionView&lt;/code&gt;&lt;code&gt;children&lt;/code&gt; and in the &lt;code&gt;el&lt;/code&gt;. This can be useful when sorting is arbitrary or is not performant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2270f52cb2b65eaf1dfb0729fbdd4faedc89e14a" translate="yes" xml:space="preserve">
          <source>Swapping Child Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef632a39da51bd5d8265f657842535184f5101b" translate="yes" xml:space="preserve">
          <source>Swaps the location of &lt;code&gt;el1&lt;/code&gt; and &lt;code&gt;el2&lt;/code&gt; in the DOM. Both els must have a parentNode to be able to swap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13513088a58e3d2056677521b64f797fd547f4a6" translate="yes" xml:space="preserve">
          <source>Takes the DOM node &lt;code&gt;el&lt;/code&gt; and appends the DOM node &lt;code&gt;contents&lt;/code&gt; to the end of the element's contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="cd988826e8ae1dfc15033beeafea811beb2a7885" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;classes&quot;&gt;&lt;code&gt;View&lt;/code&gt;, &lt;code&gt;CollectionView&lt;/code&gt; and &lt;code&gt;Behavior&lt;/code&gt;&lt;/a&gt; can bind to events that occur on attached models and collections - this includes both &lt;a href=&quot;http://backbonejs.org/#Events-catalog&quot;&gt;standard backbone-events&lt;/a&gt; and custom events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e5d62c6526a46b5c67b1b805ad8e6bfabefff2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;events.class#destroy-and-beforedestroy-events&quot;&gt;&lt;code&gt;before:destroy&lt;/code&gt; event&lt;/a&gt; is the best place to clean up any added listeners not related to the view's DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4434d9748725b17217591f734c2933477a26af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://backbonejs.org/#Events&quot;&gt;Backbone.Events API&lt;/a&gt; is available to all classes. Each Marionette class can both &lt;code&gt;listenTo&lt;/code&gt; any object with this API and have events triggered on the instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8050d112bea51aa8ee7585fe7dea8603ead7213f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;marionette.application&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marionette.mnobject&quot;&gt;&lt;code&gt;MnObject&lt;/code&gt;&lt;/a&gt; classes provide bindings to provide automatic event listeners and / or request handlers on your object instances. This works with a bound &lt;code&gt;channelName&lt;/code&gt; to let us provide listeners using the &lt;code&gt;radioEvents&lt;/code&gt; and &lt;code&gt;radioRequests&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd090d3b01b64effaa3f0fd7c81e20ba30c4f0d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;marionette.view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marionette.collectionview&quot;&gt;&lt;code&gt;CollectionView&lt;/code&gt;&lt;/a&gt; are able to monitor and act on events on any of their direct children. Any events fired on a view are automatically propagated to their direct parents as well. Let's see a quick example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f325595bcab0b7a39a041b061a168778c6cd4760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Application&lt;/code&gt; class also triggers &lt;a href=&quot;#destroy-and-beforedestroy-events&quot;&gt;Destroy Events&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa27e2d9993647ca2eb15954622ef16cf3e20fc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Application&lt;/code&gt; object will fire two events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8761a40f599091a900db4fa4d556f3278c51d5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Application&lt;/code&gt; provides hooks for organizing and initiating other elements and a view tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67dc442631e8deede2dccd33b5474839375415b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Behavior&lt;/code&gt; class provides proxies for a selection of &lt;code&gt;View&lt;/code&gt; functionality. This includes &lt;a href=&quot;marionette.behavior&quot;&gt;listening to events on the view&lt;/a&gt;, being able to &lt;a href=&quot;marionette.behavior&quot;&gt;handle events on models and collections&lt;/a&gt;, and being able to directly &lt;a href=&quot;marionette.behavior&quot;&gt;interact with the attached template&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180af7bb8335f620acc99b1f619bac3315cbc31b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Behavior&lt;/code&gt; has a number of proxies attributes that directly refer to the related attribute on a view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0955c2e44e72386fcc425294ffa73b8621da8eda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CollectionView&lt;/code&gt; can bind to events that occur on the attached &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt; - this includes both &lt;a href=&quot;http://backbonejs.org/#Events-catalog&quot;&gt;standard backbone-events&lt;/a&gt; and custom events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1a149766b02257af359dc55281ef91bcb4b317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CollectionView&lt;/code&gt; can take action depending on what events are triggered in its &lt;code&gt;children&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f010d5190c8b9212fdc9baa0787e11143139a069" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CollectionView&lt;/code&gt; triggers unique events specifically related to child management.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804250a8bca27a97ddd115d408dc3f0475463f1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CollectionView&lt;/code&gt; uses a region internally that can be used to know when the empty view is show or destroyed. See &lt;a href=&quot;#region-events&quot;&gt;Region Events&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae897694b13fc4d9b32f9b2ca5e891ba59475c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CompositeView&lt;/code&gt; was deprecated in favor of using &lt;code&gt;View&lt;/code&gt; and &lt;code&gt;CollectionView&lt;/code&gt;. The &lt;code&gt;CompositeView&lt;/code&gt; will be completely removed in Marionette 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb88200d6b191166aa533da2fb36b4336150c52e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Marionette.View&lt;/code&gt; class lets us manage a hierarchy of views using &lt;code&gt;regions&lt;/code&gt;. Regions are a hook point that lets us show views inside views, manage the show/hide lifecycles, and act on events inside the children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="486ddcc47dadba314368addafcb6e5c47ade8e58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MnObject&lt;/code&gt; class triggers &lt;a href=&quot;#destroy-and-beforedestroy-events&quot;&gt;Destroy Events&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70611f779f3df947e6e8fa0479a8d654d03caf52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Radio Event&lt;/code&gt; works exactly the same way as regular &lt;code&gt;Backbone Events&lt;/code&gt; like model/collection events. In fact, it uses the &lt;code&gt;Backbone.Events&lt;/code&gt; mixin internally, exposing its API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d136be2414cde4ba69dffa0658ad39da3203bd4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Radio&lt;/code&gt; message bus exposes some core concepts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14884155715dc6ea98d0cd416c97a413a53264c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Region&lt;/code&gt; class also triggers &lt;a href=&quot;#destroy-and-beforedestroy-events&quot;&gt;Destroy Events&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b1ea8e6e411797b1ee2260d0936309142eaa2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;View&lt;/code&gt; can bind to events that occur on the attached &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt; - this includes both &lt;a href=&quot;http://backbonejs.org/#Events-catalog&quot;&gt;standard backbone-events&lt;/a&gt; and custom events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1bb63de17cca81958342d5d697fb5f3bc53588e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;View&lt;/code&gt; provides a mechanism to name parts of your template to be used throughout the view with the &lt;code&gt;ui&lt;/code&gt; attribute. This provides a number of benefits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d0a663e6848305741d7e9e8af857a5003b2aed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;View&lt;/code&gt; provides event delegation for capturing and handling DOM interactions as well as the ability to separate concerns into smaller, managed child views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daeb7fd25f8b24022a94fea91c7c130285403973" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addChildView&lt;/code&gt; method can be used to add a view that is independent of your &lt;code&gt;Backbone.Collection&lt;/code&gt;. This method takes two parameters, the child view instance and optionally the index for where it should be placed within the &lt;a href=&quot;#managing-children&quot;&gt;CollectionView's &lt;code&gt;children&lt;/code&gt;&lt;/a&gt;. It returns the added view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fbd48dbe04463d2070588fa20b7b46a0b0c2af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buildChildView&lt;/code&gt; method is responsible for taking the ChildView class and instantiating it with the appropriate data. This method takes three parameters and returns a view instance to be used as the child view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a320c9bab407652ebad400332eb2b759112c0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;channel&lt;/code&gt; is the biggest reason to use &lt;code&gt;Radio&lt;/code&gt; as our event aggregator - it provides a clean point for dividing global events. To retrieve a channel, use &lt;code&gt;Radio.channel(channelName)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f59bc41df8048f016c566e924716ec4e4fa852d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;childEvents&lt;/code&gt; attribute was renamed to &lt;code&gt;childViewEvents&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bedafc38915d695f17e3f8a79923fabda47df82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;childViewEventPrefix&lt;/code&gt; can be provided in the view definition or in the constructor function call, to get a view instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a169bb66cec5e16755239467ee58e6980a16de14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;childViewEvents&lt;/code&gt; attribute can also attach functions directly to be event handlers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba64d5bacb8537d844604e3aaeddb965cd500841" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cid&lt;/code&gt; or client id is a unique identifier automatically assigned to MnObjects when they're first created and by default is prefixed with &lt;code&gt;mno&lt;/code&gt;. You can modify the prefix for &lt;code&gt;MnObject&lt;/code&gt;s you &lt;code&gt;extend&lt;/code&gt; by setting the &lt;code&gt;cidPrefix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4c8fc194256b19b28dc0be2b75ac65888091d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;collectionEvents&lt;/code&gt; attribute can also take a &lt;a href=&quot;basics#functions-returning-values&quot;&gt;function returning an object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5b9d991774a4279bb72380c93d8d2cc7a45b7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dom event&lt;/code&gt; can be a jQuery DOM event - such as &lt;code&gt;click&lt;/code&gt; - or another custom event, such as Bootstrap's &lt;code&gt;show.bs.modal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdee8e689f2b23d5095b565b3a53ff7a2d44623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dom node&lt;/code&gt; represents a jQuery selector or a &lt;code&gt;ui&lt;/code&gt; key prefixed by &lt;code&gt;@.&lt;/code&gt;. The &lt;code&gt;dom node&lt;/code&gt; is optional, and if omitted, the view's &lt;code&gt;$el&lt;/code&gt; will be used as the selector. For more information about the &lt;code&gt;ui&lt;/code&gt; object, and how it works, see &lt;a href=&quot;#organizing-your-view&quot;&gt;the documentation on ui&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff6ee700fce8278226c9b8a3428df2b54d2abda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; and &lt;code&gt;triggers&lt;/code&gt; attributes bind DOM events to actions to perform on the view. They each take a DOM event key and a mapping to the handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b8a7667f4fbbaf37723297d073f8faae32ae9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; attribute can also directly bind functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e479bfce73dfeac49cd77aa0f5abecddc588b111" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; method will loop through the &lt;code&gt;CollectionView&lt;/code&gt;'s sorted &lt;code&gt;children&lt;/code&gt; and test them against the &lt;a href=&quot;#defining-the-viewfilter&quot;&gt;&lt;code&gt;viewFilter&lt;/code&gt;&lt;/a&gt;. The views that pass the &lt;code&gt;viewFilter&lt;/code&gt;are rendered if necessary and attached to the CollectionView and the views that are filtered out will be detached. After filtering the &lt;code&gt;children&lt;/code&gt; will only contain the views to be attached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d76bf9909996c260b2ee73768bcb79946af631" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getChildView&lt;/code&gt; method has been removed in favor of the &lt;code&gt;childView&lt;/code&gt; property, &lt;a href=&quot;basics#functions-returning-values&quot;&gt;which now accepts a function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bd484f7a49b782a99eb2d279353fdd9f525ad8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getEmptyView&lt;/code&gt; method has been removed in favor of the &lt;code&gt;emptyView&lt;/code&gt; property, &lt;a href=&quot;basics#functions-returning-values&quot;&gt;which now accepts a function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8ce5ad10cfec2bb05d776d2e03627cac10a48c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOption&lt;/code&gt; function will return any falsey value from the &lt;code&gt;options&lt;/code&gt;, other than &lt;code&gt;undefined&lt;/code&gt;. If an object's options has an undefined value, it will attempt to read the value from the object directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ca9dd1af27e53cfafcfed02f8113c038ceaa93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isSwappingView&lt;/code&gt; method returns if a view is being swapped by another one. It's useful inside region lifecycle events / methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa14664c2febf800101d6fa21c0506c1d224d41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mergeOptions&lt;/code&gt; method takes two arguments: an &lt;code&gt;options&lt;/code&gt; object and &lt;code&gt;keys&lt;/code&gt; to pull from the options object. Any matching &lt;code&gt;keys&lt;/code&gt; will be merged onto the class instance. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f666d9889f820aa33e26a20e38076ea5826fca71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modelEvents&lt;/code&gt; attribute can also take a &lt;a href=&quot;basics#functions-returning-values&quot;&gt;function returning an object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425ea2e45c737c7581ebfdb6970ba4c8fce3e7c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modelEvents&lt;/code&gt; attribute passes through all the arguments that are passed to &lt;code&gt;model.trigger('event', arguments)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e85bd62c0dff38022c0ddb6d7a77342ac224ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; Property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1fc5857bae5a0e49afe9f08af7aac7501c9f5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument passed in &lt;code&gt;initialize&lt;/code&gt; method is equal to the passed at class instantiation. To get the option inside initialize considering the &lt;code&gt;options&lt;/code&gt; property is necessary to use &lt;code&gt;getOption&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1738632e19d449f5b3afe9f0d4211ea3dcf0afa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;region.show()&lt;/code&gt; method (that also backs &lt;code&gt;showChildView()&lt;/code&gt;) was changed to not remove HTML outside the &lt;code&gt;$el&lt;/code&gt; of the displayed view. In Marionette 2, the &lt;code&gt;region.show()&lt;/code&gt; method would call &lt;code&gt;region.$el.empty()&lt;/code&gt; before showing the new HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c56430ea9038c10afe3aa7924e622c8b9fb2b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;removeChildView&lt;/code&gt; method is useful if you need to remove and destroy a view from the &lt;code&gt;CollectionView&lt;/code&gt; without affecting the view's collection. In most cases it is better to use the data to determine what the &lt;code&gt;CollectionView&lt;/code&gt; should display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabfa3debe1c68bb0e7eb4b1c77f2ba9443962a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; method of the &lt;code&gt;CollectionView&lt;/code&gt; is primarily responsible for rendering the entire collection. It loops through each of the children in the collection and renders them individually as a &lt;code&gt;childView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbaa70b037136fb3b745a3f39b5baf7e0e6c76b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setComparator&lt;/code&gt; method modifies the &lt;code&gt;CollectionView&lt;/code&gt;'s &lt;code&gt;viewComparator&lt;/code&gt; attribute and re-sorts. Passing &lt;code&gt;{ preventRender: true }&lt;/code&gt; in the options argument will prevent the view being rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76e11a7404950035bb2d7553cf0464d546e273a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setFilter&lt;/code&gt; method modifies the &lt;code&gt;CollectionView&lt;/code&gt;'s &lt;code&gt;viewFilter&lt;/code&gt; attribute and filters. Passing &lt;code&gt;{ preventRender: true }&lt;/code&gt; in the options argument will prevent the view being rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49d1b452cd00162dd12703ed3fb881f9ffc674a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;show&lt;/code&gt; events were removed completely as they were redundant and were being used incorrectly to show child regions. The &lt;code&gt;show&lt;/code&gt; event was fired after the view had been attached, meaning the DOM was being constantly updated, leading to deteriorated performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daae16d92129f32dda4d65521fe604e0785407f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;show&lt;/code&gt; events will receive the region instance, the view being shown, and any options passed to &lt;code&gt;region.show&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158962c20d22159e76336ebe2322207b4f98ef2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort&lt;/code&gt; method will loop through the &lt;code&gt;CollectionView&lt;/code&gt;&lt;code&gt;children&lt;/code&gt; prior to filtering and sort them with the &lt;a href=&quot;#defining-the-viewcomparator&quot;&gt;&lt;code&gt;viewComparator&lt;/code&gt;&lt;/a&gt;. By default, if a &lt;code&gt;viewComparator&lt;/code&gt; is not set, the &lt;code&gt;CollectionView&lt;/code&gt; will sort the views by the order of the models in the &lt;code&gt;collection&lt;/code&gt;. If set to &lt;code&gt;false&lt;/code&gt; view sorting will be disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176d91097c5149490c4cc93ac002c907d81a89a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view.&amp;lt;region_name&amp;gt;&lt;/code&gt; syntax has been removed in favor of &lt;code&gt;view.getRegion()&lt;/code&gt;, &lt;code&gt;view.getChildView()&lt;/code&gt; and &lt;code&gt;view.showChildView()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88be8356ad5c07c20e4ae42745b70d28ccaff0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; is a reference to the &lt;code&gt;View&lt;/code&gt; instance that the &lt;code&gt;Behavior&lt;/code&gt; is attached to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8445dbd5d29a7c7360442b5e2f5a5a046c8675cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;viewComparator&lt;/code&gt; can take any of the acceptable &lt;code&gt;Backbone.Collection&lt;/code&gt;&lt;a href=&quot;http://backbonejs.org/#Collection-comparator&quot;&gt;comparator formats&lt;/a&gt; -- a sortBy (pass a function that takes a single argument), as a sort (pass a comparator function that expects two arguments), or as a string indicating the attribute to sort by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ead55daf6faf3cf674d6f1980e300d606bc2a14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;viewFilter&lt;/code&gt; function takes a view from the &lt;code&gt;children&lt;/code&gt; and returns a truthy value if the child should be attached, and a falsey value if it should not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af41dce662be6150b64aa99caacf5b02a3a2a1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;viewFilter&lt;/code&gt; predicate object will filter against the view's model attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc7d6360b31500e50378cc808c89f96eea2505b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;viewFilter&lt;/code&gt; string represents the view's model attribute and will filter truthy values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e90f38d4e5f7c8e5d03155c2baaceac874c611" translate="yes" xml:space="preserve">
          <source>The API used by Marionette by default is attached as &lt;code&gt;Marionette.DomApi&lt;/code&gt;. This is useful if you &lt;a href=&quot;#providing-your-own-dom-api&quot;&gt;change the API&lt;/a&gt; globally, but want to reuse the default in certain cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221f246f44cab6a92b8de13dc698860eeb097a23" translate="yes" xml:space="preserve">
          <source>The Application defines a single region &lt;code&gt;el&lt;/code&gt; using the &lt;code&gt;region&lt;/code&gt; attribute. This can be accessed through &lt;code&gt;getRegion()&lt;/code&gt; or have a view displayed directly with &lt;code&gt;showView()&lt;/code&gt;. Below is a short example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5adef84cd283fa766ff6bfd075eb78308d05f4" translate="yes" xml:space="preserve">
          <source>The Backbone Radio provides easy support for a number of messaging patterns for Backbone and Marionette. This is provided through two basic constructs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a57d509c5db621404ddea2415e2b27ba1979b1d" translate="yes" xml:space="preserve">
          <source>The Behavior's &lt;code&gt;view&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad8bd819284dcf6d4c82da4d34ed9445c0ce2d6" translate="yes" xml:space="preserve">
          <source>The DOM API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911f28efdddd71205b9a478b30f12e2c756803e2" translate="yes" xml:space="preserve">
          <source>The DOM API manages the DOM on behalf of &lt;a href=&quot;classes&quot;&gt;each view class and &lt;code&gt;Region&lt;/code&gt;&lt;/a&gt;. It defines the methods that actually attach and remove views and children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a61d1e0fe45316667ddb7aa856a4892ceeca60" translate="yes" xml:space="preserve">
          <source>The DOM API takes care of the other DOM manipulation methods for you. The &lt;a href=&quot;https://github.com/jashkenas/backbone/wiki/using-backbone-without-jquery&quot;&gt;Backbone Wiki&lt;/a&gt; has a good reference for removing jQuery from the app, including Browserify and Webpack configuration hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f5bca6f4e34553a29833584c5654f6cff487aa" translate="yes" xml:space="preserve">
          <source>The DOM event gets passed in as the first argument, allowing you to see any information passed as part of the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70461566b02f30927589bd34531fb6bdfc4b9606" translate="yes" xml:space="preserve">
          <source>The Event is a simple notification that &lt;em&gt;something happened&lt;/em&gt; and you may or may not want other objects in your application to react to that. A few key principles to bear in mind are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105ed1064867b55760694841491a7f0efc1496c7" translate="yes" xml:space="preserve">
          <source>The Marionette Application provides helper methods for managing its attached region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7c3d9a2fd6fc9f68c81603ee666ad5073e2433" translate="yes" xml:space="preserve">
          <source>The Marionette Event system provides a system for objects to communicate with each other in a uniform way. In Marionette, this involves one object triggering an event that another listens to. This is an extended from of the &lt;a href=&quot;http://backbonejs.org/#Events&quot;&gt;event handling system in Backbone&lt;/a&gt;, and is different than &lt;a href=&quot;dom.interactions#binding-to-user-input&quot;&gt;DOM related events&lt;/a&gt;. It is mixed in to every &lt;a href=&quot;classes&quot;&gt;Marionette class&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09af59294feb8900f6e939bb877a3cb180568047" translate="yes" xml:space="preserve">
          <source>The Marionette View implements a powerful render method which, given a &lt;a href=&quot;view.rendering#setting-a-view-template&quot;&gt;&lt;code&gt;template&lt;/code&gt;&lt;/a&gt;, will build your HTML from that template, mixing in &lt;code&gt;model&lt;/code&gt; or &lt;code&gt;collection&lt;/code&gt; data and any extra &lt;a href=&quot;view.rendering#adding-context-data&quot;&gt;template context&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0137ef16418ae4c49f9f1f317e91260e81437ab0" translate="yes" xml:space="preserve">
          <source>The Marionette classes accept an &lt;code&gt;options&lt;/code&gt; property in the class definition which is merged with the &lt;code&gt;options&lt;/code&gt; argument passed at instantiation. The values from the passed in &lt;code&gt;options&lt;/code&gt; overrides the property values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55837c7720fbf867db167658c5fcb179733965f" translate="yes" xml:space="preserve">
          <source>The Request API is also able to return values, making it extremely useful for accessing objects that would be otherwise difficult to access. As an example, let's assume we attach the currently logged-in user to the &lt;code&gt;Application&lt;/code&gt; object and we want to know if they're still logged-in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5986d508782ad23f2e10218073b114c2b6015d8c" translate="yes" xml:space="preserve">
          <source>The Request API provides a uniform way for unrelated parts of the system to communicate with each other. For example, displaying notifications in response to system activity. To attach a listener to a request channel, use &lt;code&gt;reply&lt;/code&gt; or &lt;code&gt;replyOnce&lt;/code&gt; to attach a listener that immediately detaches after one call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d6276f80be588f8add54d5d33c4b4b8c97a1f9" translate="yes" xml:space="preserve">
          <source>The UI attribute can be useful when setting region selectors - simply use the &lt;code&gt;@ui.&lt;/code&gt; prefix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739193568c22c106f043535e1b12bfc0861dea98" translate="yes" xml:space="preserve">
          <source>The UI attribute is especially useful when setting handlers in the &lt;a href=&quot;#view-events&quot;&gt;&lt;code&gt;events&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#view-triggers&quot;&gt;&lt;code&gt;triggers&lt;/code&gt;&lt;/a&gt; objects - simply use the &lt;code&gt;@ui.&lt;/code&gt; prefix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbae14c43606489114b8810c4a90189209dfccd4" translate="yes" xml:space="preserve">
          <source>The View + Behavior initialize process is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac609435b8aac094d8eb641475db910f924658a" translate="yes" xml:space="preserve">
          <source>The arguments for a number of lifecycle events were changed. For consistency, all events will now receive the view that is emitting the event as the first argument. See the &lt;a href=&quot;view.lifecycle&quot;&gt;documentation for view lifecycles&lt;/a&gt; for more complete information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099979b41d8c9df97e94607dd7952442ad2b1112" translate="yes" xml:space="preserve">
          <source>The attached state is maintained when attaching a view with a &lt;code&gt;Region&lt;/code&gt; or as a child of a &lt;code&gt;CollectionView&lt;/code&gt; or during &lt;a href=&quot;#instantiating-a-view&quot;&gt;view instantiation&lt;/a&gt;. If a view is attached by other means like &lt;code&gt;$.append&lt;/code&gt; [&lt;code&gt;isAttached&lt;/code&gt;] may not reflect the actual state of attachment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc733af5f883ffa3ebbfbb9d10d3be961c473d0" translate="yes" xml:space="preserve">
          <source>The biggest change to templates is renaming &lt;code&gt;templateHelpers&lt;/code&gt; to &lt;code&gt;templateContext&lt;/code&gt; - the aim is to be more in-line with terminology from other frameworks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a45de3719f21d6d57f18fa1986c14956afc310" translate="yes" xml:space="preserve">
          <source>The channel is accessible everywhere in your application. Simply import Radio and call &lt;code&gt;channel()&lt;/code&gt; to add listeners, fire callbacks, or send requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f7e305fff12429da8f792d201716d42b9485da" translate="yes" xml:space="preserve">
          <source>The container object borrows several functions from &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt;, to provide iterators and other collection functions, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422fcccded4d3a1acac0752e24bacd4f5c898fef" translate="yes" xml:space="preserve">
          <source>The current default renderer is essentially the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d39866a0a2d8ddac50198fee4ca4f50dd6d867c" translate="yes" xml:space="preserve">
          <source>The default API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec69d3b3d3cb853697ffcfd384244694d4383c1" translate="yes" xml:space="preserve">
          <source>The default Marionette renders return the HTML as a string. This string is passed to the view's &lt;code&gt;attachElContents&lt;/code&gt; method which in turn uses the DOM API's &lt;a href=&quot;dom.api#setcontentsel-html&quot;&gt;&lt;code&gt;setContents&lt;/code&gt;&lt;/a&gt;. to set the contents of the view's &lt;code&gt;el&lt;/code&gt; with DOM from the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d354e636a55e75e951a0d4fc1067f5a0c913ea" translate="yes" xml:space="preserve">
          <source>The default behavior for calling &lt;code&gt;preventDefault&lt;/code&gt; can be changed with the feature flag &lt;a href=&quot;features#triggerspreventdefault&quot;&gt;&lt;code&gt;triggersPreventDefault&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;stopPropagation&lt;/code&gt; can be changed with the feature flag &lt;a href=&quot;features#triggersstoppropagating&quot;&gt;&lt;code&gt;triggersStopPropagation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6518725722a1c9f38e1aad4eade21272ed3e2687" translate="yes" xml:space="preserve">
          <source>The default export has been deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c242812c91f3598f4d058afda4667d330c44a50" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;attachHtml&lt;/code&gt; is essentially:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e513565df16103d6ecb0d0b774ca388181650b4" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;isEmpty&lt;/code&gt; returns &lt;code&gt;!this.children.length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805ed0b4cf0cee3a6a86975cc3cdbd2837877e43" translate="yes" xml:space="preserve">
          <source>The default implementation of &lt;code&gt;removeView&lt;/code&gt; is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d53047202c89985406a9173de553c4b793a165" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;childViewEventPrefix&lt;/code&gt; is &lt;code&gt;childview&lt;/code&gt;. Setting this property to &lt;code&gt;false&lt;/code&gt; will disable &lt;a href=&quot;#event-bubbling&quot;&gt;automatic event bubbling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7ab98e1bf53b22397ec3d8b8c3305c1a60b061" translate="yes" xml:space="preserve">
          <source>The dependency on &lt;code&gt;Backbone.Babysitter&lt;/code&gt; has been removed in favour of an in-built implementation that is maintained within the main Marionette codebase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959df2ce88bca1c688824e34f2c2651d65628841" translate="yes" xml:space="preserve">
          <source>The easiest way to see how to use the &lt;code&gt;Behavior&lt;/code&gt; class is to take an example view and factor out common behavior to be shared across other views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1980f8ab0dd02661e150ffbd89280f90863535c" translate="yes" xml:space="preserve">
          <source>The empty events will receive the region instance, the view leaving the region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4816266e56c07ce9c4592d98f0a3def608fbcff" translate="yes" xml:space="preserve">
          <source>The example will show an message when the region is empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fd9d3ebfba3c8909662ee8117f9e1c611676ed" translate="yes" xml:space="preserve">
          <source>The exception is views with &lt;a href=&quot;dom.prerendered&quot;&gt;prerendered content&lt;/a&gt;. In the case that the view is instantiated rendered, child views are best managed in the view's &lt;a href=&quot;common#initialize&quot;&gt;&lt;code&gt;initialize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fa9e1df58bcd4b1d6fc7a05ad00b0fd5ce2e47" translate="yes" xml:space="preserve">
          <source>The first parameter is the &lt;code&gt;entity&lt;/code&gt; (Backbone.Model, Backbone.Collection or any object that has Backbone.Events mixed in) to bind the events from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529b29725de4a1eaf854a2b0b1490d5f2a547c50" translate="yes" xml:space="preserve">
          <source>The first parameter is the HTML buffer, and the second parameter is the expected container for the children which by default equates to the view's &lt;code&gt;el&lt;/code&gt; unless a &lt;a href=&quot;#defining-the-childViewContainer&quot;&gt;&lt;code&gt;childViewContainer&lt;/code&gt;&lt;/a&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ab9c078f4d5ea1375f5dd8cded496293bb948a" translate="yes" xml:space="preserve">
          <source>The first parameter, &lt;code&gt;channel&lt;/code&gt;, is an instance from &lt;code&gt;Radio&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6da69bea142801bb642323e2f1e692d9c2d6a8" translate="yes" xml:space="preserve">
          <source>The following events, with their accompanying &lt;code&gt;before:&lt;/code&gt; event were changed and may need to be updated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb941c8e8bce24025e8a26766f0cd85362d43c1" translate="yes" xml:space="preserve">
          <source>The following simplistic example will add an unmanaged view at the 5th index and remove it prior to any changes to the &lt;code&gt;children&lt;/code&gt;. In a real world scenario it will likely be more complicated to keep track of which view to remove in the &lt;code&gt;onBeforeSort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1ebe6488199c6e5f7598a91b01b1086f2898d8" translate="yes" xml:space="preserve">
          <source>The goal will be to add the unmanaged views after other views are added and to remove any unmanaged views prior to any managed &lt;code&gt;children&lt;/code&gt; changes. To do so you must understand which &lt;a href=&quot;events.class#collectionview-events&quot;&gt;&lt;code&gt;CollectionView&lt;/code&gt; event&lt;/a&gt; will occur prior to changes to the &lt;code&gt;children&lt;/code&gt; for your particular use case. By default a &lt;code&gt;CollectionView&lt;/code&gt; sorts according to the &lt;code&gt;collection&lt;/code&gt; sort, so unless &lt;code&gt;viewComparator&lt;/code&gt; is disabled, the best event for removing unmanaged views is the &lt;a href=&quot;events.class#sort-and-beforesort-events&quot;&gt;&lt;code&gt;before:sort&lt;/code&gt; event&lt;/a&gt;, but if &lt;code&gt;viewComparator&lt;/code&gt; is false the next event to consider is the &lt;a href=&quot;events.class#filter-and-beforefilter-events&quot;&gt;&lt;code&gt;before:filter&lt;/code&gt; event&lt;/a&gt; if your &lt;code&gt;CollectionView&lt;/code&gt; has a &lt;code&gt;viewFilter&lt;/code&gt;, otherwise the &lt;a href=&quot;events.class#renderchildren-and-beforerenderchildren-events&quot;&gt;&lt;code&gt;before:render:children&lt;/code&gt; event&lt;/a&gt; is ideal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4daed731fea2d11df7cd269862cae7394e3cb7" translate="yes" xml:space="preserve">
          <source>The main difference between Babysitter and the Marionette implementation is the removal of &lt;code&gt;.call&lt;/code&gt; and &lt;code&gt;.apply&lt;/code&gt; on &lt;code&gt;CollectionView.children&lt;/code&gt;. Instead you should use &lt;code&gt;.invoke&lt;/code&gt; or &lt;a href=&quot;marionette.collectionview#collectionview-childview-iterators-and-collection-functions&quot;&gt;any of the methods provided&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a9c8db74fab50dc7aeea4f3bfac61aa377a9c7" translate="yes" xml:space="preserve">
          <source>The major benefit of the &lt;code&gt;triggers&lt;/code&gt; attribute over &lt;code&gt;events&lt;/code&gt; is that triggered events can bubble up to any parent views. For a full explanation of bubbling events and listening to child events, see the &lt;a href=&quot;events#event-bubbling&quot;&gt;event bubbling documentation&lt;/a&gt;..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d489d7f69cbde7ace2de4429ca41334e4d578d6" translate="yes" xml:space="preserve">
          <source>The major difference between &lt;code&gt;Backbone.trigger&lt;/code&gt; and &lt;code&gt;triggerMethod&lt;/code&gt; is that &lt;code&gt;triggerMethod&lt;/code&gt; can fire specially named events on the instance. For example, a view that has been rendered will iternally fire &lt;code&gt;view.triggerMethod('render')&lt;/code&gt; and call &lt;code&gt;onRender&lt;/code&gt; - providing a handy way to add behavior to your views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133c37afb503147fb3e50c32b14a30e97488de54" translate="yes" xml:space="preserve">
          <source>The most noticeable change to Marionette 3 is the consolidation of &lt;code&gt;ItemView&lt;/code&gt; and &lt;code&gt;LayoutView&lt;/code&gt; into &lt;code&gt;View&lt;/code&gt;. In addition, &lt;code&gt;CompositeView&lt;/code&gt; has been removed and its functionality merged into &lt;code&gt;CollectionView&lt;/code&gt; and &lt;code&gt;View&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d4be0d8b4f26599336e9810d8fd61401b0cb44" translate="yes" xml:space="preserve">
          <source>The primary use case for a &lt;code&gt;CollectionView&lt;/code&gt; is maintaining child views to match the state of a Backbone Collection. By default children will be added or removed to match the models within the collection. However a &lt;code&gt;CollectionView&lt;/code&gt; can have children in addition to, or instead of, views matching the &lt;code&gt;collection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287128e38e7570ee1629b758ae1ae59e47ca003e" translate="yes" xml:space="preserve">
          <source>The recommended solution is to choose a solution like a &lt;a href=&quot;installation&quot;&gt;package manager&lt;/a&gt; to allow for ES6 module importing of the library. The best way to import is using name imports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad3e77d086f48627bee55b2b19d7f3b97db9faf" translate="yes" xml:space="preserve">
          <source>The renderer can also be customized separately on any extended View.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ec9f1c68c62f096a36166c80b1b827e664948a" translate="yes" xml:space="preserve">
          <source>The same can be done with &lt;a href=&quot;marionette.collectionview&quot;&gt;&lt;code&gt;CollectionView&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8751c2f368891548e540cb0c78c7fdc0186400d5" translate="yes" xml:space="preserve">
          <source>The second parameter is a hash of &lt;code&gt;{ 'event:name': 'eventHandler' }&lt;/code&gt; configuration. A function can be supplied instead of a string handler name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb084998ee3a1c69b538065a59b518345c19bf9" translate="yes" xml:space="preserve">
          <source>The second parameter is a hash of &lt;code&gt;{ 'event:name': 'eventHandler' }&lt;/code&gt; configuration. A function can be supplied instead of a string handler name. If the second paramater is not supplied, all listeners are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51deac99bee4ab95a0a993feaea619e4412adcb5" translate="yes" xml:space="preserve">
          <source>The second parameter is a hash of &lt;code&gt;{ 'request:name': 'replyHandler' }&lt;/code&gt; configuration. A function can be supplied instead of a string handler name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8bb9dc2f973292de5c263cf4913934a44ee2e09" translate="yes" xml:space="preserve">
          <source>The second parameter is a hash of &lt;code&gt;{ 'request:name': 'replyHandler' }&lt;/code&gt; configuration. A function can be supplied instead of a string handler name. If the second paramater is not supplied, all handlers are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311e944b79bb74773ae1c0cb878be21c776082f0" translate="yes" xml:space="preserve">
          <source>The state of the view after the destroy is not attached and not rendered although the &lt;code&gt;el&lt;/code&gt; is not emptied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790aa6b87dc63031b6dec0bd05d01080477f22f8" translate="yes" xml:space="preserve">
          <source>The traditional &lt;a href=&quot;http://backbonejs.org/#Events&quot;&gt;event handling system in Backbone&lt;/a&gt; is fully supported in Marionette. Marionette, however, provides an additional event API using the &lt;code&gt;triggerMethod&lt;/code&gt; method - the key difference between the two is that &lt;code&gt;triggerMethod&lt;/code&gt; automatically calls specially named event handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c14cb5f54b35fc9f37f589021f11e88e975f1c3" translate="yes" xml:space="preserve">
          <source>The view &lt;code&gt;events&lt;/code&gt; attribute binds DOM events to functions or methods on the view. The simplest form is to reference a method on the view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58340235642a5346fa68bada6e26498073f152ee" translate="yes" xml:space="preserve">
          <source>The view &lt;code&gt;triggers&lt;/code&gt; attribute binds DOM events to Marionette events that can be responded to at the view or parent level. For more information on events, see the &lt;a href=&quot;events&quot;&gt;events documentation&lt;/a&gt;. This section will just cover how to bind these events to views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d9c67a2cfba0d8c0f77a0e0f08ed77953f1b7e" translate="yes" xml:space="preserve">
          <source>The view &lt;code&gt;triggers&lt;/code&gt; attribute no longer passes an &lt;code&gt;options&lt;/code&gt; attribute to event handlers, instead passing the view instance that triggered the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e096a25b70ca14be5a529d4e5c60471ffd1880" translate="yes" xml:space="preserve">
          <source>The view can be passed an existing &lt;code&gt;el&lt;/code&gt; either in the DOM (ie: &lt;code&gt;el: $('.foo-selector')&lt;/code&gt;) or in memory (ie: &lt;code&gt;el: $('&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;')&lt;/code&gt;) or most commonly, the view constructs its own &lt;code&gt;el&lt;/code&gt; at instantiation as &lt;a href=&quot;http://backbonejs.org/#View-el&quot;&gt;documented on backbonejs.org&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940981f1334c3f6dd3c58f3805deb6da3ba26025" translate="yes" xml:space="preserve">
          <source>The view states indicate whether the view is rendered, attached to the DOM, or destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720b3bed0b86c432fff973332c07deb747041d61" translate="yes" xml:space="preserve">
          <source>Then, from another view, instead of trying to find the User model. we simply &lt;code&gt;request&lt;/code&gt; it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad072c3b456ea1f81f656224c81566eedbb357b8" translate="yes" xml:space="preserve">
          <source>There are a number of changes to how regions behave - the biggest change being the removal of the ability to access regions as attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d5932d689f5b04a8ab78e4b148faa65d2b2002" translate="yes" xml:space="preserve">
          <source>There are a variety of possibilities for rendering with Marionette. If you are looking into alternatives from the default this may be a useful resource: &lt;a href=&quot;https://github.com/blikblum/marionette.renderers#renderers&quot;&gt;https://github.com/blikblum/marionette.renderers#renderers&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec19987a53e73b766fb140314d03f07d5798f79" translate="yes" xml:space="preserve">
          <source>There are several properties, if passed, that will be attached directly to the instance: &lt;code&gt;collectionEvents&lt;/code&gt;, &lt;code&gt;events&lt;/code&gt;, &lt;code&gt;modelEvents&lt;/code&gt;, &lt;code&gt;triggers&lt;/code&gt;, &lt;code&gt;ui&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9827a71689525097f0a218ab781ab747744e7f8d" translate="yes" xml:space="preserve">
          <source>There are two ways to easily destroy a child view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0808f4bf68ae8963603a1e119e95d571f34ce8" translate="yes" xml:space="preserve">
          <source>There may be scenarios where you need to pass data from your parent collection view in to each of the childView instances. To do this, provide a &lt;code&gt;childViewOptions&lt;/code&gt; definition on your collection view as an object literal. This will be passed to the constructor of your childView as part of the &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89338e7d4111bd9b88f090784717f359172dbcd4" translate="yes" xml:space="preserve">
          <source>These &lt;a href=&quot;common&quot;&gt;common utilities&lt;/a&gt; are available to all Marionette classes and exported so that the functionality can be used elsewhere. Each method has the same arguments as documented in &lt;a href=&quot;common&quot;&gt;common utilities&lt;/a&gt; except that the target of the method is added as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ce6126937cf3a019b7d022f69097dd1dbab76d" translate="yes" xml:space="preserve">
          <source>These are breaking changes that need to be handled when migrating from Marionette v3 to v4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd39c877b47ce8e22b1da00f17474d7c46944069" translate="yes" xml:space="preserve">
          <source>These changes are optional, although recommended to make future upgrades easy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5467d89df5456aa150beaf15cb9200c86e1d489" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:add:child&lt;/code&gt;) and after (&lt;code&gt;add:child&lt;/code&gt;) each child view is instantiated and added to the &lt;a href=&quot;collectionview#collectionviews-children&quot;&gt;&lt;code&gt;children&lt;/code&gt;&lt;/a&gt;. These will fire once for each item in the attached collection or for any view added using &lt;a href=&quot;collectionview#adding-a-child-view&quot;&gt;&lt;code&gt;addChildView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f9d7d82d3d49e6a155da4d014b82a18473541d" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:add:region&lt;/code&gt;) and after (&lt;code&gt;add:region&lt;/code&gt;) a region is added to a view. This event handler will receive the view instance, the region name string, and the region instance as event arguments. The region is fully instantated for both events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68e72411e65855d3ec0af1d8b6f92f4021c295a" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:destroy:children&lt;/code&gt;) and after (&lt;code&gt;destroy:children&lt;/code&gt;) destroying the children in the &lt;code&gt;CollectionView&lt;/code&gt;. These events will only fire if there are &lt;a href=&quot;collectionview#collectionviews-children&quot;&gt;&lt;code&gt;children&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a10100f20fec626829e9286e90595370a3bd05b" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:empty&lt;/code&gt;) and after (&lt;code&gt;empty&lt;/code&gt;) emptying a region's view. These events will not fire if there is no view in the region, even if the region detaches DOM from within the region's &lt;code&gt;el&lt;/code&gt;. The view will not be detached or destroyed during &lt;code&gt;before:empty&lt;/code&gt;, but will be detached or destroyed during the &lt;code&gt;empty&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31a3f7832bd8c95900ffa6d62655e5457da98d1" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:filter&lt;/code&gt;) and after (&lt;code&gt;filter&lt;/code&gt;) filtering the children in the &lt;code&gt;CollectionView&lt;/code&gt;. This event will only fire if there are &lt;a href=&quot;collectionview#collectionviews-children&quot;&gt;&lt;code&gt;children&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;collectionview#defining-the-viewfilter&quot;&gt;&lt;code&gt;viewFilter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c78d5d84a00e947011573e0c5baa0ad017cc374" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:remove:child&lt;/code&gt;) and after (&lt;code&gt;remove:child&lt;/code&gt;) each child view is removed to the &lt;a href=&quot;collectionview#collectionviews-children&quot;&gt;&lt;code&gt;children&lt;/code&gt;&lt;/a&gt;. A view may be removed from the &lt;code&gt;children&lt;/code&gt; if it is destroyed, if it is removed from the &lt;code&gt;collection&lt;/code&gt; or if it is removed with &lt;a href=&quot;collectionview#removing-a-child-view&quot;&gt;&lt;code&gt;removeChildView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206a7b4ce21be291634c4d6ae228503f39a0d201" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:remove:region&lt;/code&gt;) and after (&lt;code&gt;remove:region&lt;/code&gt;) a region is removed from a view. This event handler will receive the view instance, the region name string, and the region instance as event arguments. The region will be not be destroyed in the before event, but is destroyed by &lt;code&gt;remove:region&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05868598747b7dde8e17e0c3eb765e7ba8f44ffd" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:show&lt;/code&gt;) and after (&lt;code&gt;show&lt;/code&gt;) showing anything in a region. A view may or may not be rendered during &lt;code&gt;before:show&lt;/code&gt;, but a view will be rendered by &lt;code&gt;show&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35dbf1e830eb7dcc655878567246235e684c8f57" translate="yes" xml:space="preserve">
          <source>These events fire before (&lt;code&gt;before:sort&lt;/code&gt;) and after (&lt;code&gt;sort&lt;/code&gt;) sorting the children in the &lt;code&gt;CollectionView&lt;/code&gt;. These events will only fire if there are &lt;a href=&quot;collectionview#collectionviews-children&quot;&gt;&lt;code&gt;children&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;collectionview#defining-the-viewcomparator&quot;&gt;&lt;code&gt;viewComparator&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe8533759ae215bdf626983e503059403d4102c" translate="yes" xml:space="preserve">
          <source>These events will be passed the &lt;code&gt;CollectionView&lt;/code&gt; instance and the array of views being attached. The views in the array may or may not be rendered or attached for &lt;code&gt;before:render:children&lt;/code&gt;, but will be rendered and attached by &lt;code&gt;render:children&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5937afe5507c70ec708f7c7cbb12c8731abe3b0b" translate="yes" xml:space="preserve">
          <source>These handlers work exactly as they do on &lt;code&gt;View&lt;/code&gt; - &lt;a href=&quot;marionette.view#events&quot;&gt;see the &lt;code&gt;View&lt;/code&gt; documentation&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee786a5450e0e79401b3f279c07f98e0abddbea7" translate="yes" xml:space="preserve">
          <source>These methods can be called directly on the container, to iterate and process the views held by the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed07dc914b77fbed9ee7e110890d676c358a3cc8" translate="yes" xml:space="preserve">
          <source>These methods provide ways for interacting with the view scoped to it's &lt;code&gt;el&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; all of the view's children. To restate &lt;code&gt;events&lt;/code&gt; and &lt;code&gt;this.$()&lt;/code&gt; will query the view's template and all of the children. Marionette's added interfaces attempt to scope interactions with only the view's template, leaving the children to handle themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905a9d285547ca4e125b88726a3e6fe262034a98" translate="yes" xml:space="preserve">
          <source>This can be HTML that's currently in the DOM:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e5b62d35d3e78f2e59f752382d9021e941e693" translate="yes" xml:space="preserve">
          <source>This can be done for an individual view definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f25434db8e9e5e9dfd6ba32f612d50c1e2fd1f" translate="yes" xml:space="preserve">
          <source>This can be useful in unit testing your views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee63954eb50a7ff41117f60d7444e7e855c237b6" translate="yes" xml:space="preserve">
          <source>This document covers the basic usage patterns and concepts across Marionette. This includes things like calling conventions, setting attributes, common option patterns etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192d63c01ded42950753083df2bff71cd96f9118" translate="yes" xml:space="preserve">
          <source>This does not work in Mn 3 - instead do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce9c252ffc0ac6ede30c4a16cf8d23804072ef7" translate="yes" xml:space="preserve">
          <source>This doesn't have to be an underscore template, you can pass your own rendering function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b7cc89d1678c12ac48ee7ac3eaed0361ab8744" translate="yes" xml:space="preserve">
          <source>This example will animate with a fade effect showing and hiding the view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d412f7fadff19ea4a28e000a83ad0576e87a4704" translate="yes" xml:space="preserve">
          <source>This example will make a view slide down from the top of the screen instead of just appearing in place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a3f7340f21104eab7d46d737b558aff6881b86" translate="yes" xml:space="preserve">
          <source>This flag indicates whether &lt;a href=&quot;events#a-child-views-event-prefix&quot;&gt;&lt;code&gt;childViewEventPrefix&lt;/code&gt;&lt;/a&gt; for all views will return the default value of &lt;code&gt;'childview'&lt;/code&gt; or if it will return &lt;code&gt;false&lt;/code&gt; disabling &lt;a href=&quot;events#event-bubbling&quot;&gt;automatic event bubbling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5203ffd0e21a1e978c29c3120832649b0621e80" translate="yes" xml:space="preserve">
          <source>This function is actually an alias of &lt;code&gt;setComparator(null, options)&lt;/code&gt;. It is useful for removing the comparator. &lt;code&gt;removeComparator&lt;/code&gt; also accepts &lt;code&gt;preventRender&lt;/code&gt; as a option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d322e1468e61203cf9107d3e564b01f6dfd04c14" translate="yes" xml:space="preserve">
          <source>This function is actually an alias of &lt;code&gt;setFilter(null, options)&lt;/code&gt;. It is useful for removing filters. &lt;code&gt;removeFilter&lt;/code&gt; also accepts &lt;code&gt;preventRender&lt;/code&gt; as a option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b960eb93429098fe98536b79caf14c2573b861" translate="yes" xml:space="preserve">
          <source>This function takes a single optional argument to pass along to the events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc449c76d9b88e74f8dc83cb8db506e9b09e58b9" translate="yes" xml:space="preserve">
          <source>This gives us a clear definition of how this object interacts with the &lt;code&gt;star&lt;/code&gt; radio channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72798f7c2f7ab2dde9921f590ab4a56acf8b6fd8" translate="yes" xml:space="preserve">
          <source>This is a proxy for &lt;a href=&quot;marionette.region#detaching-existing-views&quot;&gt;region.detachView()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972c3839e489caadb1842143226831ed41e1dff0" translate="yes" xml:space="preserve">
          <source>This is equivalent to a view's &lt;code&gt;showChildView&lt;/code&gt; which can be used as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb63f7616eeb220e5fd3f667125598ce54cded2" translate="yes" xml:space="preserve">
          <source>This is the ideal event to clean up any external DOM listeners such as &lt;code&gt;jQuery&lt;/code&gt; plugins that use DOM &lt;em&gt;within&lt;/em&gt; the &lt;code&gt;el&lt;/code&gt; of the view and not the view's &lt;code&gt;el&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e5f05c4b15e118e8947ecb8799c3c96e9af5b5" translate="yes" xml:space="preserve">
          <source>This is the ideal event to setup any external DOM listeners such as &lt;code&gt;jQuery&lt;/code&gt; plugins that use DOM &lt;em&gt;within&lt;/em&gt; the &lt;code&gt;el&lt;/code&gt; of the view and not the view's &lt;code&gt;el&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32566e2eb9dc101f4a63cde392e0e80e1df646c" translate="yes" xml:space="preserve">
          <source>This means that the behavior can access the view during its own &lt;code&gt;initialize&lt;/code&gt; method. The view &lt;code&gt;initialize&lt;/code&gt; is called later with the information eventually injected by the behavior. The &lt;code&gt;initialize&lt;/code&gt; event is triggered on the behavior indicating that the view is fully initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530a51c9baa5940fff7cc23323234a0bd0ce625a" translate="yes" xml:space="preserve">
          <source>This method accepts the child view instance to remove as its parameter. It returns the removed view;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e77568be6ed5ea729fc2fd27e4254c4be930505" translate="yes" xml:space="preserve">
          <source>This method can be used to unbind callbacks from entities' events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eed3ba63f1a9d96d2f647560e90b7f28be8f444" translate="yes" xml:space="preserve">
          <source>This method can be used to unbind radio reply handler from entities' events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57cababedb4b4ad4da8e0e8f3d2dc07a936dee9" translate="yes" xml:space="preserve">
          <source>This method is called internally when rendering and &lt;a href=&quot;events.class#sort-and-beforesort-events&quot;&gt;&lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;before:sort&lt;/code&gt; events&lt;/a&gt; will trigger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1ef56eea78e6913715382044b81cdc716b0a3f" translate="yes" xml:space="preserve">
          <source>This method is the same as &lt;a href=&quot;#removing-a-child-view&quot;&gt;&lt;code&gt;removeChildView&lt;/code&gt;&lt;/a&gt; with the exception that the removed view is not destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840c60bf1427eab4d850ede1afe26e40384e0260" translate="yes" xml:space="preserve">
          <source>This method is used to bind a backbone &quot;entity&quot; to methods on a target object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b450068ef409936a3b562c3f2a7bd7cbdad480" translate="yes" xml:space="preserve">
          <source>This method is used to bind any object that works with the &lt;a href=&quot;#events-api&quot;&gt;&lt;code&gt;Backbone.Events&lt;/code&gt; API&lt;/a&gt;. This includes all Backbone classes, Marionette classes and &lt;a href=&quot;backbone.radio&quot;&gt;Radio&lt;/a&gt; channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0b54d654edf08438d6abd0e7d6983477d70d28" translate="yes" xml:space="preserve">
          <source>This method is used to bind any object that works with the &lt;a href=&quot;https://github.com/marionettejs/backbone.radio#backboneradiorequests&quot;&gt;&lt;code&gt;Backbone.Radio&lt;/code&gt; Request API&lt;/a&gt;. This includes &lt;a href=&quot;backbone.radio&quot;&gt;Radio&lt;/a&gt; channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c748d123f16e9660421f91878048a98329dcea" translate="yes" xml:space="preserve">
          <source>This method is used to bind backbone radio replies to methods on a target object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23968d8c6dfdd85d673d5e3d846fe63724f172b9" translate="yes" xml:space="preserve">
          <source>This method is used to unbind any object that works with the &lt;a href=&quot;#events-api&quot;&gt;&lt;code&gt;Backbone.Events&lt;/code&gt; API&lt;/a&gt;. This includes all Backbone classes, Marionette classes and &lt;a href=&quot;backbone.radio&quot;&gt;Radio&lt;/a&gt; channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e2b268faa06a470aa10ddcb5f5f57695e27492" translate="yes" xml:space="preserve">
          <source>This method is used to unbind any object that works with the &lt;a href=&quot;https://github.com/marionettejs/backbone.radio#backboneradiorequests&quot;&gt;&lt;code&gt;Backbone.Radio&lt;/code&gt; Request API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223fce5c9d3984926c716ce11f31d19fd0f45f89" translate="yes" xml:space="preserve">
          <source>This method will return a boolean indicating if the mnobject has been destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535a2b8bb028e92ae0337895ace879759010320b" translate="yes" xml:space="preserve">
          <source>This region can be useful for handling the &lt;a href=&quot;events.class#collectionview-emptyview-region-events&quot;&gt;EmptyView Region Events&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249fb2925ca74d22444aa15336645700cdae3452" translate="yes" xml:space="preserve">
          <source>This system is recursive, so it works for any deeply nested structure. The child views you show can render their own child views within their onRender callbacks!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6b99b7d57c8bab99f663adc457271908069614" translate="yes" xml:space="preserve">
          <source>This will destroy the view, clean up any event handlers and remove it from the DOM. When a region is emptied &lt;a href=&quot;events.class#empty-and-beforeempty-events&quot;&gt;empty events are triggered&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba846a79bd719082b066bf9828c5cc12471dddd5" translate="yes" xml:space="preserve">
          <source>This will immediately render &lt;code&gt;RootView&lt;/code&gt; and fire the usual triggers such as &lt;code&gt;before:attach&lt;/code&gt; and &lt;code&gt;attach&lt;/code&gt; in addition to the &lt;code&gt;before:render&lt;/code&gt; and &lt;code&gt;render&lt;/code&gt; triggers.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
