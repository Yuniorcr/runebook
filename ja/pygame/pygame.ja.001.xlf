<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="pygame">
    <body>
      <group id="pygame">
        <trans-unit id="a82ed28488e3adf61e70fbe60f92a403cc746ce5" translate="yes" xml:space="preserve">
          <source>&quot;UserEvent&quot; is returned for all values in the user event id range. &quot;Unknown&quot; is returned when the event type does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4ba9fda047985148d989978decee27773eda3b" translate="yes" xml:space="preserve">
          <source>&amp;copy; Pygame Developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e12ba1aabe722db8739aefab40b33d7fc74e6e0" translate="yes" xml:space="preserve">
          <source>'0' returns a contiguous unstructured bytes view. No surface shape information is given. A &lt;code&gt;ValueError&lt;/code&gt; is raised if the surface's pixels are discontinuous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b0fea1e6b71be86a4dd66a87015984569b933d" translate="yes" xml:space="preserve">
          <source>'1' returns a (surface-width * surface-height) array of continuous pixels. A &lt;code&gt;ValueError&lt;/code&gt; is raised if the surface pixels are discontinuous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f664da9af33c0443dddd98810e8bfb802d26de4b" translate="yes" xml:space="preserve">
          <source>'2' returns a (surface-width, surface-height) array of raw pixels. The pixels are surface-bytesize-d unsigned integers. The pixel format is surface specific. The 3 byte unsigned integers of 24 bit surfaces are unlikely accepted by anything other than other pygame functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3974d7b2d8cdd2c1dcf4510da74aba6c22eb89" translate="yes" xml:space="preserve">
          <source>'3' returns a (surface-width, surface-height, 3) array of &lt;code&gt;RGB&lt;/code&gt; color components. Each of the red, green, and blue components are unsigned bytes. Only 24-bit and 32-bit surfaces are supported. The color components must be in either &lt;code&gt;RGB&lt;/code&gt; or &lt;code&gt;BGR&lt;/code&gt; order within the pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941f13b7707bd503037f95ee15e1d508664ca156" translate="yes" xml:space="preserve">
          <source>'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a (surface-width, surface-height) view of a single color component within a surface: a color plane. Color components are unsigned bytes. Both 24-bit and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with &lt;code&gt;SRCALPHA&lt;/code&gt; support 'a'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d3310790834e3cceb133a016303fb74a94c580" translate="yes" xml:space="preserve">
          <source>(optional) used for line thickness</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6472a696c31833bbe23eea55e699cb3826246c" translate="yes" xml:space="preserve">
          <source>(optional) used for line thickness (not to be confused with the width value of the &lt;code&gt;rect&lt;/code&gt; parameter)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f24b288b342dab55f6cc47bea334005f87b1cb" translate="yes" xml:space="preserve">
          <source>(optional) used for line thickness or to indicate that the circle is to be filled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01490032347ceb74a56ceb2d111e0285af067780" translate="yes" xml:space="preserve">
          <source>(optional) used for line thickness or to indicate that the ellipse is to be filled (not to be confused with the width value of the &lt;code&gt;rect&lt;/code&gt; parameter)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ef76b569b6ab98faa7b1fd14b9bc7b6d4346a8" translate="yes" xml:space="preserve">
          <source>(optional) used for line thickness or to indicate that the polygon is to be filled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46f1cdb68a82026214ba7c23a060157c9a8580d" translate="yes" xml:space="preserve">
          <source>(optional) used for line thickness or to indicate that the rectangle is to be filled (not to be confused with the width value of the &lt;code&gt;rect&lt;/code&gt; parameter)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f16f27588235ae31b7fcfa1c9b5f40b34925246" translate="yes" xml:space="preserve">
          <source>- &lt;strong&gt;Color object:&lt;/strong&gt; clones the given &lt;a href=&quot;#pygame.Color&quot;&gt;&lt;code&gt;Color&lt;/code&gt;&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea102ad9541e8e650cd4fd61d2c4a523f96db15e" translate="yes" xml:space="preserve">
          <source>- &lt;strong&gt;HTML color format str:&lt;/strong&gt;&lt;code&gt;'#rrggbbaa'&lt;/code&gt; or &lt;code&gt;'#rrggbb'&lt;/code&gt;, where rr, gg, bb, and aa are 2-digit hex numbers in the range of 0 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fe20e8782b9a299a806c728328f98386520d2a" translate="yes" xml:space="preserve">
          <source>- &lt;strong&gt;color name str:&lt;/strong&gt; name of the color to use, e.g. &lt;code&gt;'red'&lt;/code&gt; (all the supported name strings can be found in the &lt;a href=&quot;https://github.com/pygame/pygame/blob/master/src_py/colordict.py&quot;&gt;colordict module&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2216f7ba46b8b2e6fa069d1111441b9a4b33ceb2" translate="yes" xml:space="preserve">
          <source>- &lt;strong&gt;hex number str:&lt;/strong&gt;&lt;code&gt;'0xrrggbbaa'&lt;/code&gt; or &lt;code&gt;'0xrrggbb'&lt;/code&gt;, where rr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1706fd5b817e6447ace7a2e22d50942ca41830b8" translate="yes" xml:space="preserve">
          <source>- &lt;strong&gt;int:&lt;/strong&gt; int value of the color to use, using hex numbers can make this parameter more readable, e.g. &lt;code&gt;0xrrggbbaa&lt;/code&gt;, where rr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00 to 0xFF inclusive, note that the aa (alpha) value is not optional for the int format and must be provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce55d069224ade8ea0583ff98e1dec840a01f422" translate="yes" xml:space="preserve">
          <source>- &lt;strong&gt;tuple/list of int color values:&lt;/strong&gt;&lt;code&gt;(R, G, B, A)&lt;/code&gt; or &lt;code&gt;(R, G, B)&lt;/code&gt;, where R, G, B, and A are int values in the range of 0 to 255 inclusive, the A (alpha) value defaults to 255 if not provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff2316650c9e0909d336df3f86326048cf01c7d" translate="yes" xml:space="preserve">
          <source>1 enables stereo 3D. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040b8776ef0f01ae83ed5b7e4909041dc17f5b09" translate="yes" xml:space="preserve">
          <source>1 if the bit is set, 0 if the bit is not set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c5c5ff6a694647b524eb37ce630b5b5988d0bd" translate="yes" xml:space="preserve">
          <source>:sg:` -&amp;gt; `</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b40cb4ca1df0b0b69e709b4cbc7a29303b664e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#pygame.BufferProxy&quot;&gt;&lt;code&gt;BufferProxy&lt;/code&gt;&lt;/a&gt; instances can be created directly from Python code, either for a parent that exports an interface, or from a Python &lt;code&gt;dict&lt;/code&gt; describing an object's buffer layout. The dict entries are based on the Python level array interface mapping. The following keys are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e995406b7ef2068aa654076dde8429a1dfd6f3d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#pygame.BufferProxy&quot;&gt;&lt;code&gt;BufferProxy&lt;/code&gt;&lt;/a&gt; is a pygame support type, designed as the return value of the &lt;a href=&quot;surface#pygame.Surface.get_buffer&quot;&gt;&lt;code&gt;Surface.get_buffer()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;surface#pygame.Surface.get_view&quot;&gt;&lt;code&gt;Surface.get_view()&lt;/code&gt;&lt;/a&gt; methods. For all Python versions a &lt;a href=&quot;#pygame.BufferProxy&quot;&gt;&lt;code&gt;BufferProxy&lt;/code&gt;&lt;/a&gt; object exports a C struct and Python level array interface on behalf of its parent object's buffer. For CPython 2.6 and later a new buffer interface is also exported. In pygame, &lt;a href=&quot;#pygame.BufferProxy&quot;&gt;&lt;code&gt;BufferProxy&lt;/code&gt;&lt;/a&gt; is key to implementing the &lt;a href=&quot;surfarray#module-pygame.surfarray&quot;&gt;&lt;code&gt;pygame.surfarray&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea98e8b20043ab3c2ff0d7fc20c21ff67b27fb82" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#pygame.midi.MidiException&quot;&gt;&lt;strong&gt;MidiException&lt;/strong&gt;&lt;/a&gt; -- on error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06151e695f455ef0ac04a2c3643bf5b2584d7f1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pygame#pygame.error&quot;&gt;&lt;strong&gt;pygame.error&lt;/strong&gt;&lt;/a&gt; -- if unable to initialize scrap module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9374a8b048308afe357f3e87b68ce67fb4b6af" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;pygame#pygame.error&quot;&gt;&lt;strong&gt;pygame.error&lt;/strong&gt;&lt;/a&gt; -- if unable to put the data into the clipboard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0458b1010fa3908c29c4f49d7df2824990a7bfe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;after&quot;&lt;/code&gt;:callable:(optional)</source>
          <target state="translated">&lt;code&gt;&quot;after&quot;&lt;/code&gt;:callable:(optional)</target>
        </trans-unit>
        <trans-unit id="fd1bd8758a57e054cedc713cc29bab8cd3f5afcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;before&quot;&lt;/code&gt;:callable:(optional)</source>
          <target state="translated">&lt;code&gt;&quot;before&quot;&lt;/code&gt;:callable:(optional)</target>
        </trans-unit>
        <trans-unit id="5ab11287bb09d0f83cc4533d653348fea30eb100" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;data&quot;&lt;/code&gt;:tuple</source>
          <target state="translated">&lt;code&gt;&quot;data&quot;&lt;/code&gt;:tuple</target>
        </trans-unit>
        <trans-unit id="36148938229947cbb37eb910331473bcc7e0dd1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;parent&quot;&lt;/code&gt;:object:(optional)</source>
          <target state="translated">&lt;code&gt;&quot;parent&quot;&lt;/code&gt;:object:(optional)</target>
        </trans-unit>
        <trans-unit id="7ff71abf28d883bb9b0188f2cf5749782933998e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;shape&quot;&lt;/code&gt;:tuple</source>
          <target state="translated">&lt;code&gt;&quot;shape&quot;&lt;/code&gt;:tuple</target>
        </trans-unit>
        <trans-unit id="62ef0fd6121023d203a51d25a68bd7e0fe97e0eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;strides&quot;&lt;/code&gt;:tuple:(optional)</source>
          <target state="translated">&lt;code&gt;&quot;strides&quot;&lt;/code&gt;:tuple:(optional)</target>
        </trans-unit>
        <trans-unit id="67d319084b1906e2bdead4a2441cfbc838b2fca9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;typestr&quot;&lt;/code&gt;:string</source>
          <target state="translated">&lt;code&gt;&quot;typestr&quot;&lt;/code&gt;:string</target>
        </trans-unit>
        <trans-unit id="94f1cecd6a75b6e7a67e05dca33d5a727297a462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARGB&lt;/code&gt;, 32-bit image with alpha channel first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1f2dd47bc53e8c889f78c6f3883d283ad2d42c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ARGB_PREMULT&lt;/code&gt;, 32-bit image with colors scaled by alpha channel, alpha channel first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3b5e9c7f817d386aa99e3557bf09c0ae2c169c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DROPTEXT&lt;/code&gt; is only supported on X11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a42415a8bb49258680f55ee384b5f4152102ce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GIF&lt;/code&gt; (non-animated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69be4af8a3bd99e6fd14cd05c6bad375206e58a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HSV&lt;/code&gt; - Hue, Saturation, Value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6fa5e541ae086060c0677cde9206264d2d0664" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LBM&lt;/code&gt; (and &lt;code&gt;PBM&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0c4190261237119bc13ab2c3eb5d08bca7b845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NOTE&lt;/code&gt;: For less laggy sound use a smaller buffer size. The default is set to reduce the chance of scratchy sounds on some computers. You can change the default buffer by calling &lt;a href=&quot;#pygame.mixer.pre_init&quot;&gt;&lt;code&gt;pygame.mixer.pre_init()&lt;/code&gt;&lt;/a&gt; before &lt;a href=&quot;#pygame.mixer.init&quot;&gt;&lt;code&gt;pygame.mixer.init()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pygame#pygame.init&quot;&gt;&lt;code&gt;pygame.init()&lt;/code&gt;&lt;/a&gt; is called. For example: &lt;code&gt;pygame.mixer.pre_init(44100,-16,2, 1024)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51580ccdbe9d6b91cb99b6296fa9b21d1a62a53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NOTE&lt;/code&gt;: If you want a &quot;crop&quot; that returns the part of an image within a rect, you can blit with a rect to a new surface or copy a subsurface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e26d3168d138c25f0e5c3b20d452909d19f9b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NOTE&lt;/code&gt;: the pygame scale function uses MMX/SSE if available, and can be run in multiple threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ca2ad5ba9e2a124d8f65d9bedc4c82a6e63a01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;P&lt;/code&gt;, 8-bit palettized Surfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4934984cdfebd6fe7b7604b02418973fcba3c01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PBM&lt;/code&gt; (and &lt;code&gt;PGM&lt;/code&gt;, &lt;code&gt;PPM&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793ab95baef5e4dec283378e792dd2a013767163" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RGB&lt;/code&gt; - Red, Green, Blue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a9ffa03791cecbf712ab3fe5f394816a6dd52d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RGB&lt;/code&gt;, 24-bit image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77ce55577baef885fb08ea7e833f59732f7637f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RGBA&lt;/code&gt;, 32-bit image with an alpha channel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcf7664333bb8d15b27322f656f25963f97a111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RGBA_PREMULT&lt;/code&gt;, 32-bit image with colors scaled by alpha channel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01efcd38df08d90a9c193b88d9b19dd4fdc766fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RGBX&lt;/code&gt;, 32-bit image with unused space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2e1a0e50e211a9b48ec83442eda74450231a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TGA&lt;/code&gt; (uncompressed)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18600aebd1b386b9526e5031d5e596d27639ef05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if data for the passed type is available in the clipboard, &lt;code&gt;False&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335a9c772d509c8775ec147e317300d5a630cd73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the &lt;a href=&quot;#module-pygame.midi&quot;&gt;&lt;code&gt;pygame.midi&lt;/code&gt;&lt;/a&gt; module is currently initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd1c7e1b69ceb10400e7646c9d78721b6c37394" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the &lt;a href=&quot;#module-pygame.scrap&quot;&gt;&lt;code&gt;pygame.scrap&lt;/code&gt;&lt;/a&gt; module is currently initialized, &lt;code&gt;False&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d124fb796a573fbdaf096a41e479ce7c3f6a6cec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if the mouse cursor is currently visible and &lt;code&gt;False&lt;/code&gt; if the mouse cursor is not visible</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565f78d6ed2d5931c849f2d286aaa92e2ccee141" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt; if there is data, &lt;code&gt;False&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7170c880a1bb2885c11e6df405c9640349708a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;True&lt;/code&gt;, if the clipboard ownership has been lost by the pygame application, &lt;code&gt;False&lt;/code&gt; if the pygame application still owns the clipboard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9555e070f04e99845906f20f57b92346c60b1b5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;YUV&lt;/code&gt; - Luma, Blue Chrominance, Red Chrominance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e00e8b065658e4f129347a700fdb6e0d271d93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;latency&lt;/code&gt; is the delay in milliseconds applied to timestamps to determine when the output should actually occur. If &lt;code&gt;latency&lt;/code&gt; is &amp;lt;&amp;lt;0, 0 is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23be6f12242898bc78beb9409f41a35933d73358" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pygame.SCRAP_PPM&lt;/code&gt;, &lt;code&gt;pygame.SCRAP_PBM&lt;/code&gt; and &lt;code&gt;pygame.SCRAP_BMP&lt;/code&gt; are suitable for surface buffers to be shared with other applications. &lt;code&gt;pygame.SCRAP_TEXT&lt;/code&gt; is an alias for the plain text clipboard type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf5c51f93cc30f6c1ee1c81afa5a0b9351707bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sound.py&lt;/code&gt; optional command line argument: an audio file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738008c96003560d14d425d8d536442b1718b83f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Enhanced pygame module for loading and rendering computer fonts&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee28fbc2426d2ae9e054027eeb587b4ea9239e03" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Pygame module for interacting with joysticks, gamepads, and trackballs.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329eaf08460d6d6d82dfc76c82eb672db6f82065" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Pygame unit test suite package&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dac723062bd509d476006f47c3d0209016fb2d8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;module of example programs&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d745b5f6684fa05ece3b54dd687c561d2273ec" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame constants&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee38d69cdcedd5f2c17d2098f8ed7873bfa606b5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for accessing sound sample data&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a21b11beb369f2e26b849dc772f989e04440491" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for accessing surface pixel data using array interfaces&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be26afe6294d828483817878659d0f1d61db3ae" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for audio cdrom control&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b431cfb1ffbf8d1cb472b93799b85928959e35" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for camera use&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145c33279d09d290c7c62dff27b1c2c5d0a769cb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for clipboard support.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10fbae187d157e2e745e2e4ff66a3548f1910ad9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for controlling streamed audio&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4be2def28eebc79e7dced8ab49c0ad70b077436" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for cursor resources&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d22156b3debaf696ce9dcaf1eb560d31a0be576" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for drawing shapes&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e30323148926e2b1631b2a98c933be4797e1d2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for general pixel array copying&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa35ab03af9391c786db87c21c4fb9d063bc6e0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for image masks.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a9853392c681b5997f8f3d31a6b380f95aeced" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for image transfer&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75b4e608bb04acf263a23903690860bcad7fa04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for interacting with events and queues&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2b5a85df96107b9df9471ea65c9e2b85229a2d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for interacting with midi input and output.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20dfa97d51427f6f4c2a815404b5981f626b2792" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for loading and playing sounds&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b46871dd047cf8ce349572aab01616c832490a4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for loading and rendering fonts&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76311e6fc52c84b5be68ab8e0aa87d57fce8f79" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for monitoring time&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58d79d57051d2b4010f1cfd8de5a3ff9a432cf5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module for vector classes&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfd5451a4f4f0aa7ff351086e4112906bcba090" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module to control the display window and screen&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0600c8c818a171d6e9280e324363ef97d22fa41f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module to transform surfaces&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69626df90366617d00ca27bc215f050fec2eab2b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module to work with the keyboard&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc44c915d12cf11032eff10439130a4a65fe7ef" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module to work with the mouse&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc5afae2c0c5db7437798df287288eb91a4885c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module to work with touch input&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57da9dc9f2e8534558323cf635ec7a61d10768fd" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;pygame module with basic game object classes&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001965f4a1440740815f84fb093c2da61d7e19b4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;small module containing version information&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c25c727ea90cef5a49f8f1bf85b97b7a8aa23b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;the top level pygame package&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dece4cb77e313b50db9dcad1d7e105e9edc17ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EXPERIMENTAL!&lt;/strong&gt;: This API may change or disappear in later pygame releases. If you use this, your code may break with the next pygame release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3a099947ddb0bd911f548dacbba5a397a0bf81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IndexError&lt;/strong&gt; -- if more than 1024 elements in the data list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba0c6a8565473170ad77d3f6c857f974e1fff27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IndexError&lt;/strong&gt; -- if the optional &lt;code&gt;pos&lt;/code&gt; parameter is outside of the mask's bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a03abaebf66da0a2ad65a3721bec6ec236cd62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IndexError&lt;/strong&gt; -- if the position is outside of the mask's bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a916aac838e9dfd990e8c87b12e74406e20e3aad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TypeError&lt;/strong&gt; -- if &lt;code&gt;points&lt;/code&gt; is not a sequence or &lt;code&gt;points&lt;/code&gt; does not contain number pairs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be2c0ccc99679fa8d81faa0a9a691deeb3e308e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TypeError&lt;/strong&gt; -- if &lt;code&gt;start_pos&lt;/code&gt; or &lt;code&gt;end_pos&lt;/code&gt; is not a sequence of two numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5ea2308a992e1e6460e5d42aa376dcec37ec45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ValueError&lt;/strong&gt; -- if &lt;code&gt;len(points) &amp;lt; 2&lt;/code&gt; (must have at least 2 points)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c5bed62958eab7b6cc81059b714c74556b59d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ValueError&lt;/strong&gt; -- if &lt;code&gt;len(points) &amp;lt; 3&lt;/code&gt; (must have at least 3 points)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a237221c44fe9941f5bdf624d767b54ac2b00db5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ValueError&lt;/strong&gt; -- if &lt;code&gt;radius &amp;lt; 0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f92d483177ceaa670e55eb375c6fb3d9049607" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ValueError&lt;/strong&gt; -- if &lt;code&gt;width &amp;lt; 0&lt;/code&gt; or &lt;code&gt;height &amp;lt; 0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8bbad1000d8f9773e33395c8ab930b6e2374c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ValueError&lt;/strong&gt; -- if the &lt;code&gt;mode&lt;/code&gt; parameter is not &lt;code&gt;pygame.SCRAP_CLIPBOARD&lt;/code&gt; or &lt;code&gt;pygame.SCRAP_SELECTION&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4347c22ba5ccf4c334983ea40897f74ff4571cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;a&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- (optional) alpha value in the range of 0 to 255 inclusive, default is 255</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4b18f92234fa16c6109f372d664f98efcc22e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;an_id&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- id of the midi device being queried</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0992e35288de1e8451e9f0aba7e330121ef44536" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;b&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- blue value in the range of 0 to 255 inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c501753750d761be12ae41c8f13fe437cad6da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;blend&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- (optional) if non-zero (default) each line will be blended with the surface's existing pixel shades, otherwise the pixels will be overwritten</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c0eaca5f4aabbbad38fead5c4e374b31d43504" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;blend&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- (optional) if non-zero (default) the line will be blended with the surface's existing pixel shades, otherwise it will overwrite them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd0d8b42d5f751a0158d02c252670f3a3f49b72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;blit_sequence&lt;/strong&gt; -- a sequence of surfaces and arguments to blit them, they correspond to the &lt;a href=&quot;#pygame.Surface.blit&quot;&gt;&lt;code&gt;blit()&lt;/code&gt;&lt;/a&gt; arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ff9fac9ceab7bfaeefa512088bf15639abc901" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;buffer_size&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- (optional) the number of input events to be buffered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ad4824bac5ef14c42b3a36125902a557b27315" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;center&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;a href=&quot;math#pygame.math.Vector2&quot;&gt;&lt;em&gt;Vector2&lt;/em&gt;&lt;/a&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;)&lt;/em&gt;) -- center point of the circle as a sequence of 2 ints/floats, e.g. &lt;code&gt;(x, y)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94670791f506900b9baed0644cbdd2cee4d87f70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;closed&lt;/strong&gt; (&lt;em&gt;bool&lt;/em&gt;) -- if &lt;code&gt;True&lt;/code&gt; an additional line segment is drawn between the first and last points in the &lt;code&gt;points&lt;/code&gt; sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43171a179857b89254d09b7730edcf24bc09cdea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;color&lt;/strong&gt; (&lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- color used to check if the surface's pixels are within the given &lt;code&gt;threshold&lt;/code&gt; range, this parameter is ignored if the optional &lt;code&gt;othersurface&lt;/code&gt; parameter is supplied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad30cd0c6eacb885c9853ad5fca2bfe0163699ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;color&lt;/strong&gt; (&lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;)&lt;/em&gt;) -- color to draw with, the alpha value is optional if using a tuple &lt;code&gt;(RGB[A])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3b1c12756e9f640db6f18cd7893b2775afb00c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;color_value&lt;/strong&gt; (&lt;a href=&quot;#pygame.Color&quot;&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;str&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;)&lt;/em&gt;) --</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7688b434eaf94b81d6c9f05c393f7d52dde5251d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; (&lt;em&gt;bytes&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;str&lt;/em&gt;) -- data to be place into the clipboard (in python 3 data is a byte string and in python 2 data is a str)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e975868a34871ade7f175dde545df8c29a6fb7b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;data&lt;/strong&gt; (&lt;em&gt;list&lt;/em&gt;) -- data to write, the expected format is &lt;code&gt;[[[status, data1=0, data2=0, ...], timestamp], ...]&lt;/code&gt; with the &lt;code&gt;data#&lt;/code&gt; fields being optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2acab4c5bfa6a9bba8340bc40f120d305bbbb591" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dest_surf&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;pygame.Surface&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;None&lt;/em&gt;) -- Surface we are changing. See 'set_behavior'. Should be None if counting (set_behavior is 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c15d01aee05d918fd694fae4c78bc9ff0cd485" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;device_id&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- midi device id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0efaffd6fd98ba274724085d7dd8a143b9eddf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;doreturn&lt;/strong&gt; -- if &lt;code&gt;True&lt;/code&gt;, return a list of rects of the areas changed, otherwise return &lt;code&gt;None&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ca77ef3ed2e01d300b6644d7aafe0bb7e20981" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;end_pos&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;a href=&quot;math#pygame.math.Vector2&quot;&gt;&lt;em&gt;Vector2&lt;/em&gt;&lt;/a&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;)&lt;/em&gt;) -- end position of the line, (x, y)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779aa2be7e7899741401c02700e2ff24a0d21fa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;every&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- (optional) indicates the number of bits to skip over in the outline (default is 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c10ea249fc6681dd6c93693d7997c5a2d2cb4f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fill&lt;/strong&gt; (&lt;em&gt;bool&lt;/em&gt;) -- (optional) create an unfilled mask (default: &lt;code&gt;False&lt;/code&gt;) or filled mask (&lt;code&gt;True&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f572093f373ed063eb2aa85cb4d720fd15202884" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;g&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- green value in the range of 0 to 255 inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4678116bd306b8aaf3dd183b9e494bf7a99d17a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- The index of the finger to return information about, between 0 and the &lt;a href=&quot;#pygame._sdl2.touch.get_num_fingers&quot;&gt;&lt;code&gt;number of active fingers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5795276a8b5466c2e55768b872cdb6dbb7e8127b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- This number is at least 0 and less than the &lt;a href=&quot;#pygame._sdl2.touch.get_num_devices&quot;&gt;&lt;code&gt;number of devices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000c1fef482fd1e5e31759895cc061e453056313" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;inverse_set&lt;/strong&gt; (&lt;em&gt;bool&lt;/em&gt;) --</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477ee5c0c9c36791905938993e7b764799461a2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;kwargs&lt;/strong&gt; (&lt;em&gt;dict&lt;/em&gt;) -- &lt;a href=&quot;rect#pygame.Rect&quot;&gt;&lt;code&gt;pygame.Rect()&lt;/code&gt;&lt;/a&gt; attribute keyword arguments/values that will be applied to the rect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be47635741b6b70557fc5642ee5dc10cd359f49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;linked&lt;/strong&gt; (&lt;em&gt;bool&lt;/em&gt;) -- if &lt;code&gt;True&lt;/code&gt; (default) the linked version number is returned, otherwise the compiled version number is returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807183ff2109e6bb6077c92ba429be1afae6f7d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;min&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- (optional) indicates the minimum number of bits (to filter out noise) per connected component (default is 0, which equates to no minimum and is equivalent to setting it to 1, as a connected component must have at least 1 bit set)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3732b73a35cc21bb7e58c7eacdc266609ec6150" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mode&lt;/strong&gt; -- access mode, supported values are &lt;code&gt;pygame.SCRAP_CLIPBOARD&lt;/code&gt; and &lt;code&gt;pygame.SCRAP_SELECTION&lt;/code&gt; (&lt;code&gt;pygame.SCRAP_SELECTION&lt;/code&gt; only has an effect when used on X11 platforms)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9111dc28861947397078d3a2783be35af4f83caa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;msg&lt;/strong&gt; (&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;] or &lt;/em&gt;&lt;em&gt;str&lt;/em&gt;) -- midi message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dcafbdc24de235f89ff7550a76cfd157cb87ffa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;num_events&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- number of input events to read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9c21bc6a01637a0011f3dea76931980d6e1f54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;offset&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- the offset of &lt;code&gt;othermask&lt;/code&gt; from this mask, (default is &lt;code&gt;(0, 0)&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f5e71b88d4cc6db3ef66d4051e7db5dcc20878" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;offset&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- the offset of &lt;code&gt;othermask&lt;/code&gt; from this mask, for more details refer to the &lt;a href=&quot;#mask-offset-label&quot;&gt;Mask offset notes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9e7f0bbbe1f9c05677deb251fe998a94d5f910" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;othermask&lt;/strong&gt; (&lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;em&gt;Mask&lt;/em&gt;&lt;/a&gt;) -- mask to convolve this mask with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7227440f018fadd4297200bdc892e3bfc1ffb875" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;othermask&lt;/strong&gt; (&lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;em&gt;Mask&lt;/em&gt;&lt;/a&gt;) -- the mask to draw onto this mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc22ac0119955609f4ed205d9ba85c980db3b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;othermask&lt;/strong&gt; (&lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;em&gt;Mask&lt;/em&gt;&lt;/a&gt;) -- the mask to erase from this mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da9c3bfcc81883a36f792b06fee2b74c863b8e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;othermask&lt;/strong&gt; (&lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;em&gt;Mask&lt;/em&gt;&lt;/a&gt;) -- the other mask to overlap with this mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca854eb5ddf5d9c841016133700966d19b7b53a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;othersurface&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;Surface&lt;/em&gt;&lt;/a&gt;) -- (optional) used to check whether the pixels of the first surface are within the given &lt;code&gt;threshold&lt;/code&gt; range of the pixels from this surface (default is &lt;code&gt;None&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126287235d0a2d0c79a0173873a7d886eb20507f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;outputmask&lt;/strong&gt; (&lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;em&gt;Mask&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;NoneType&lt;/em&gt;) -- (optional) mask for output (default is &lt;code&gt;None&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2f3af3f6e0a2219e2e23714cd8c387ae320a76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;palette_colors&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- (optional) indicates whether to use the palette colors or not, a nonzero value causes the palette colors to be used and a 0 causes them not to be used (default is 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef44c6afc7191573a3b720cb76017ade43f73775" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;points&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;coordinate&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;coordinate&lt;/em&gt;&lt;em&gt;)&lt;/em&gt;) -- a sequence of 2 or more (x, y) coordinates, where each &lt;em&gt;coordinate&lt;/em&gt; in the sequence must be a tuple/list/&lt;a href=&quot;math#pygame.math.Vector2&quot;&gt;&lt;code&gt;pygame.math.Vector2&lt;/code&gt;&lt;/a&gt; of 2 ints/floats and adjacent coordinates will be connected by a line segment, e.g. for the points &lt;code&gt;[(x1, y1), (x2, y2), (x3, y3)]&lt;/code&gt; a line segment will be drawn from &lt;code&gt;(x1, y1)&lt;/code&gt; to &lt;code&gt;(x2, y2)&lt;/code&gt; and from &lt;code&gt;(x2, y2)&lt;/code&gt; to &lt;code&gt;(x3, y3)&lt;/code&gt;, additionally if the &lt;code&gt;closed&lt;/code&gt; parameter is &lt;code&gt;True&lt;/code&gt; another line segment will be drawn from &lt;code&gt;(x3, y3)&lt;/code&gt; to &lt;code&gt;(x1, y1)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01ea0bc64a56deddb957fd97fe0b80e4c74b4ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;points&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;coordinate&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;coordinate&lt;/em&gt;&lt;em&gt;)&lt;/em&gt;) -- a sequence of 3 or more (x, y) coordinates that make up the vertices of the polygon, each &lt;em&gt;coordinate&lt;/em&gt; in the sequence must be a tuple/list/&lt;a href=&quot;math#pygame.math.Vector2&quot;&gt;&lt;code&gt;pygame.math.Vector2&lt;/code&gt;&lt;/a&gt; of 2 ints/floats, e.g. &lt;code&gt;[(x1, y1), (x2, y2), (x3, y3)]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b118557452eaab083eca9f4dad02ffe3a83c8f2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pos&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- (optional) selects the connected component that contains the bit at this position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d0845c1a4919317398fc892bfb90d6921a4f41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pos&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- the position of the bit to get</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2229c64825a823aa6a0a2b2db767510bf56b15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pos&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- the position of the bit to set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6df4d65594649f436961429fb056a99589b851" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;r&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- red value in the range of 0 to 255 inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6779d2699cca51120c4dcdb764b26715c83524" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;radius&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;) -- radius of the circle, measured from the &lt;code&gt;center&lt;/code&gt; parameter, a radius of 0 will only draw the &lt;code&gt;center&lt;/code&gt; pixel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d701fdb1b814c69b58035faaf7b269413444b23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rect&lt;/strong&gt; (&lt;a href=&quot;rect#pygame.Rect&quot;&gt;&lt;em&gt;Rect&lt;/em&gt;&lt;/a&gt;) -- rectangle to draw, position and dimensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d7766edba37564b3fd7e696d6d4717fee2cc85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rect&lt;/strong&gt; (&lt;a href=&quot;rect#pygame.Rect&quot;&gt;&lt;em&gt;Rect&lt;/em&gt;&lt;/a&gt;) -- rectangle to indicate the position and dimensions of the ellipse which the arc will be based on, the ellipse will be centered inside the rectangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cf7a054dfc665f401868797d7aa69669d352d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rect&lt;/strong&gt; (&lt;a href=&quot;rect#pygame.Rect&quot;&gt;&lt;em&gt;Rect&lt;/em&gt;&lt;/a&gt;) -- rectangle to indicate the position and dimensions of the ellipse, the ellipse will be centered inside the rectangle and bounded by it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53695a8e4144727cc8b8cfdf9cdecc2127904b32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;search_color&lt;/strong&gt; (&lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;em&gt;pygame.Color&lt;/em&gt;&lt;/a&gt;) -- Color we are searching for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1328408a7fd2b607299e893e8d370516322b2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;search_surf&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;pygame.Surface&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;None&lt;/em&gt;) --</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a43554b1956eb46d973589399a93133d873339" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;set_behavior&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) --</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e69e2b1fa1783f843984d164d3f26444888ed64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;set_color&lt;/strong&gt; (&lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;em&gt;pygame.Color&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;None&lt;/em&gt;) -- Color we set in dest_surf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52b54fdfd05611b24966226d88da77f401fbe5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;setcolor&lt;/strong&gt; (&lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;None&lt;/em&gt;) -- (optional) color to draw set bits (default is &lt;code&gt;(255, 255, 255, 255)&lt;/code&gt;, white), use &lt;code&gt;None&lt;/code&gt; to skip drawing the set bits, the &lt;code&gt;setsurface&lt;/code&gt; parameter (if set) will takes precedence over this parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22be876a37b10be6899a357822af87b22f3c729" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;setsurface&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;Surface&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;None&lt;/em&gt;) -- (optional) use this surface's color values to draw set bits (default is &lt;code&gt;None&lt;/code&gt;), if this surface is smaller than the mask any bits outside its bounds will use the &lt;code&gt;setcolor&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059a579a96881462b86ec320754ba0789e670869" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;size&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- the dimensions of the mask (width and height)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b397cbdb2358114772e95b52d89dd6aefb5ac875" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;size&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- the width and height (size) of the mask to create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c588f979b3a2d4caa01a35b48830c5748155e60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;start_angle&lt;/strong&gt; (&lt;em&gt;float&lt;/em&gt;) -- start angle of the arc in radians</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968dbdbbc61c50cc41676eb1a366d9ccfb947a8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;start_pos&lt;/strong&gt; (&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;a href=&quot;math#pygame.math.Vector2&quot;&gt;&lt;em&gt;Vector2&lt;/em&gt;&lt;/a&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;float&lt;/em&gt;&lt;em&gt;)&lt;/em&gt;) -- start position of the line, (x, y)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42bd77a91756d29725bc62f9ef61489209f2f9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stop_angle&lt;/strong&gt; (&lt;em&gt;float&lt;/em&gt;) --</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda623264fc9f64a06f89085666ec7b469db53e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;surf&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;pygame.Surface&lt;/em&gt;&lt;/a&gt;) -- Surface we are looking at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e31d5f383629430715145622cf9623b2be2b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;surface&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;Surface&lt;/em&gt;&lt;/a&gt;) -- surface to draw on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99dd99135cf0165c01a5e61b7e550e44275c71e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;surface&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;Surface&lt;/em&gt;&lt;/a&gt;) -- the surface to create the mask from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1add3ae5575672b2647e323c4c8ea3e16c6044" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;surface&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;Surface&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;None&lt;/em&gt;) -- (optional) Surface to draw mask onto, if no surface is provided one will be created (default is &lt;code&gt;None&lt;/code&gt;, which will cause a surface with the parameters &lt;code&gt;Surface(size=mask.get_size(), flags=SRCALPHA, depth=32)&lt;/code&gt; to be created, drawn on, and returned)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88de45bb9f0c4e27ff9fdfca8c7ff42873da3f67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;threshold&lt;/strong&gt; (&lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;) -- (optional) the threshold range used to check the difference between two colors (default is &lt;code&gt;(0, 0, 0, 255)&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9611b604ab0ad0358086ffca430b9e2fe3261cde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;threshold&lt;/strong&gt; (&lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;em&gt;pygame.Color&lt;/em&gt;&lt;/a&gt;) -- Within this distance from search_color (or search_surf). You can use a threshold of (r,g,b,a) where the r,g,b can have different thresholds. So you could use an r threshold of 40 and a blue threshold of 2 if you like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a44c7fcb3c83b5add6d39c894be07a1142ea92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;threshold&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- (optional) the alpha threshold (default is 127) to compare with each surface pixel's alpha value, if the &lt;code&gt;surface&lt;/code&gt; is color-keyed this parameter is ignored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5e85d9919c094a357c358403094c2cd9d74faf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;touchid&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- The touch device id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584df9c957076b6bb1a1fa2d7879d5c9bb762faa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; (&lt;em&gt;string&lt;/em&gt;) -- data type to check availability of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26cf786c7eba761e1945d629dab9e7f52016ee1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; (&lt;em&gt;string&lt;/em&gt;) -- data type to retrieve from the clipboard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059ba67044c78a75eca88130f123fea9e7508e4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; (&lt;em&gt;string&lt;/em&gt;) -- type identifier of the data to be placed into the clipboard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb5e4c92bee4e2b6d9208a7eccc25aa480eb5d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;unsetcolor&lt;/strong&gt; (&lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;tuple&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;list&lt;/em&gt;&lt;em&gt;(&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;, &lt;/em&gt;&lt;em&gt;[&lt;/em&gt;&lt;em&gt;int&lt;/em&gt;&lt;em&gt;]&lt;/em&gt;&lt;em&gt;) or &lt;/em&gt;&lt;em&gt;None&lt;/em&gt;) -- (optional) color to draw unset bits (default is &lt;code&gt;(0, 0, 0, 255)&lt;/code&gt;, black), use &lt;code&gt;None&lt;/code&gt; to skip drawing the unset bits, the &lt;code&gt;unsetsurface&lt;/code&gt; parameter (if set) will takes precedence over this parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff67c7c9f980ffbc5a7f786dac8546a8b82f6e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;unsetsurface&lt;/strong&gt; (&lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;em&gt;Surface&lt;/em&gt;&lt;/a&gt;&lt;em&gt; or &lt;/em&gt;&lt;em&gt;None&lt;/em&gt;) -- (optional) use this surface's color values to draw unset bits (default is &lt;code&gt;None&lt;/code&gt;), if this surface is smaller than the mask any bits outside its bounds will use the &lt;code&gt;unsetcolor&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a6c0253c86969ad18166fecebe56393dd7ddd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; (&lt;em&gt;float&lt;/em&gt;) --</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338b6799eaaa87a4a66b91303a8792b7a6fea4ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) -- any nonzero int will set the bit to 1, 0 will set the bit to 0 (default is 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323330ffb19370882db5347fba7d187b6efde718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;when&lt;/strong&gt; -- timestamp in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697ad088a31e06aff63714e39209dca47ed0aab5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;width&lt;/strong&gt; (&lt;em&gt;int&lt;/em&gt;) --</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84c494e86854c02b9289b2d99b3970186bd5407" translate="yes" xml:space="preserve">
          <source>A 2D PixelArray can have a length 1 dimension. Only an integer index on a 2D PixelArray returns a 1D array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231b82ef2c3c8319eb782b6aec2efb6264d183d6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Mask&lt;/code&gt; object is used to represent a 2D bitmask. Each bit in the mask represents a pixel. 1 is used to indicate a set bit and 0 is used to indicate an unset bit. Set bits in a mask can be used to detect collisions with other masks and their set bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da99deb07ff8d9ffe8cf99f30104523df94c8502" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;pygame.TEXTEDITING&lt;/code&gt; event is received when an IME composition is started or changed. It contains the composition &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, and editing &lt;code&gt;start&lt;/code&gt; position within the composition (attributes &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, and &lt;code&gt;start&lt;/code&gt;, respectively). When the composition is committed (or non-IME input is received), a &lt;code&gt;pygame.TEXTINPUT&lt;/code&gt; event is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f34e78e56e2bed9a7582c36fd39192137e24547" translate="yes" xml:space="preserve">
          <source>A PixelArray pixel item can be assigned a raw integer values, a &lt;a href=&quot;color#pygame.Color&quot;&gt;&lt;code&gt;pygame.Color&lt;/code&gt;&lt;/a&gt; instance, or a (r, g, b[, a]) tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48aadc9d59baa973c3f5795e29be472d1597a060" translate="yes" xml:space="preserve">
          <source>A Surface transform is an operation that moves or resizes the pixels. All these functions take a Surface to operate on and return a new Surface with the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81aae3bd80a714c21c19747574719a01046489ce" translate="yes" xml:space="preserve">
          <source>A callable class that checks for collisions between two sprites, using a scaled version of the sprites radius.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4eaab3bf3ffef46b33fb3b979fab6422212a9e" translate="yes" xml:space="preserve">
          <source>A callable class that checks for collisions between two sprites, using a scaled version of the sprites rects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc3c2b7eaac9103bc55d6e57a5f98467c85c2ae" translate="yes" xml:space="preserve">
          <source>A color's alpha value will be written directly into the surface (if the surface contains pixel alphas), but the draw function will not draw transparently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b18a96dae35fc6e81617a2e1533a7182950b103" translate="yes" xml:space="preserve">
          <source>A connected component is a group (1 or more) of connected set bits (orthogonally and diagonally). The SAUF algorithm, which checks 8 point connectivity, is used to find a connected component in the mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d56f7034f5c96a877690f9618053509e040151" translate="yes" xml:space="preserve">
          <source>A container class to hold and manage multiple Sprite objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e7a052785600d730f9875279360499a8379463" translate="yes" xml:space="preserve">
          <source>A copy of the exported buffer as a single block of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65506d2fdd0999e97629ed9dedf1149172faded6" translate="yes" xml:space="preserve">
          <source>A filled mask has all of its bits set to 1, conversely an unfilled/cleared/empty mask has all of its bits set to 0. Masks can be created unfilled (default) or filled by using the &lt;code&gt;fill&lt;/code&gt; parameter. Masks can also be cleared or filled using the &lt;a href=&quot;#pygame.mask.Mask.clear&quot;&gt;&lt;code&gt;pygame.mask.Mask.clear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pygame.mask.Mask.fill&quot;&gt;&lt;code&gt;pygame.mask.Mask.fill()&lt;/code&gt;&lt;/a&gt; methods respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39eba15df18b67b677a556efb4ed5cd1e0b035a" translate="yes" xml:space="preserve">
          <source>A gamma value of 1.0 creates a linear color table. Lower values will darken the display and higher values will brighten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a8cec57c7f39bd3af102be89b8c57fa7d3eb2b" translate="yes" xml:space="preserve">
          <source>A interactive demo that lets one choose which BLEND_xxx option to apply to a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f7cecfc35cd98c027735cd87b2c52014be3870" translate="yes" xml:space="preserve">
          <source>A mask's coordinates start in the top left corner at &lt;code&gt;(0, 0)&lt;/code&gt; just like &lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;code&gt;pygame.Surface&lt;/code&gt;&lt;/a&gt;. Individual bits can be accessed using the &lt;a href=&quot;#pygame.mask.Mask.get_at&quot;&gt;&lt;code&gt;pygame.mask.Mask.get_at()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pygame.mask.Mask.set_at&quot;&gt;&lt;code&gt;pygame.mask.Mask.set_at()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d171303c8f38701b12be0b8c08dd012c383423" translate="yes" xml:space="preserve">
          <source>A note about PixelArray to PixelArray assignment, for arrays with an item size of 3 (created from 24 bit surfaces) pixel values are translated from the source to the destinations format. The red, green, and blue color elements of each pixel are shifted to match the format of the target surface. For all other pixel sizes no such remapping occurs. This should change in later pygame releases, where format conversions are performed for all pixel sizes. To avoid code breakage when full mapped copying is implemented it is suggested PixelArray to PixelArray copies be only between surfaces of identical format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05e1d803668a5566375c3ead2f588782299366e" translate="yes" xml:space="preserve">
          <source>A per-pixel alpha texture blit to a per-pixel alpha surface will differ from a &lt;code&gt;Surface.blit()&lt;/code&gt; blit. Also, a per-pixel alpha texture cannot be used with an 8-bit per pixel destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd967af3bded322d4134577e619f08457d0dd2f" translate="yes" xml:space="preserve">
          <source>A pixel array can be 1 or 2 dimensional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf419bdefd281f63c32ec1d1e292732525aca0d" translate="yes" xml:space="preserve">
          <source>A pygame Surface is used to represent any image. The Surface has a fixed resolution and pixel format. Surfaces with 8-bit pixels use a color palette to map to 24-bit color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584d4d08c7342a28c6ed6829c3d5665e0f9c6833" translate="yes" xml:space="preserve">
          <source>A pygame object that represents an event. User event instances are created with an &lt;a href=&quot;#pygame.event.Event&quot;&gt;&lt;code&gt;pygame.event.Event()&lt;/code&gt;&lt;/a&gt; function call. The &lt;code&gt;EventType&lt;/code&gt; type is not directly callable. &lt;code&gt;EventType&lt;/code&gt; instances support attribute assignment and deletion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d2d2866c111740aecc20373c2d1432d636e28e" translate="yes" xml:space="preserve">
          <source>A quick way to run the test suite package from the command line is to import the go submodule with the Python -m option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741887b79605221e581c444cc85035e22400cfa1" translate="yes" xml:space="preserve">
          <source>A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as big, and 0.5 is half the size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aceab14a4709aa1870d3e134b41f80c910a796c" translate="yes" xml:space="preserve">
          <source>A sequence of strings can be used to create binary cursor data for the system cursor. The return values are the same format needed by &lt;code&gt;pygame.mouse.set_cursor()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835e9bf4164d81b54afa35b322e86ff4d6e0fa43" translate="yes" xml:space="preserve">
          <source>A showcase of rendering features the &lt;a href=&quot;freetype#pygame.freetype.Font&quot;&gt;&lt;code&gt;pygame.freetype.Font&lt;/code&gt;&lt;/a&gt; class provides in addition to those available with &lt;a href=&quot;font#pygame.font.Font&quot;&gt;&lt;code&gt;pygame.font.Font&lt;/code&gt;&lt;/a&gt;. It is a demonstration of direct to surface rendering, with vertical text and rotated text, opaque text and semi transparent text, horizontally stretched text and vertically stretched text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f0cdcfa2bf920ed299ae75d3aba53091ec1314" translate="yes" xml:space="preserve">
          <source>A simple &lt;code&gt;:&lt;/code&gt; slice index for the column can be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3fa736225adaf2127d462a4be9ed4331ac251b" translate="yes" xml:space="preserve">
          <source>A simple container for Sprite objects. This class can be inherited to create containers with more specific behaviors. The constructor takes any number of Sprite arguments to add to the Group. The group supports the following standard Python operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2601f8bfa5af83b350e763af0ec735db91d19d5e" translate="yes" xml:space="preserve">
          <source>A simple demonstration example for the clipboard support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4116f91aa63d205d08f0f86ec86f1e2d68ce9d5" translate="yes" xml:space="preserve">
          <source>A simple live video player, it uses the first available camera it finds on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560931877b6c4bd99e78faf6839f162b8c6a5780" translate="yes" xml:space="preserve">
          <source>A simple music player with window and keyboard playback control. Playback can be paused and rewound to the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09272046559628210861b43b7a3314c6688bf9a0" translate="yes" xml:space="preserve">
          <source>A simple starfield example. You can change the center of perspective by leftclicking the mouse on the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abf9e327464dd73a9b58bbdd594066dc8f853cb" translate="yes" xml:space="preserve">
          <source>A smoothscale example that resized an image on the screen. Vertical and horizontal arrow keys are used to change the width and height of the displayed image. If the convert_alpha option is True then the source image is forced to have source alpha, whether or not the original images does. If run_speed_test is True then a background timing test is performed instead of the interactive scaler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54dfbbdb1bf73671966abeca55881cd623b3f57a" translate="yes" xml:space="preserve">
          <source>A subclass of Sprite with more attributes and features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504e5f34c7cd537669eef94cf25fc919ffd44a8c" translate="yes" xml:space="preserve">
          <source>A subsurface will have the same class as the parent surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa68ee618bdacb10e0dafa7a242dd03f98a366e" translate="yes" xml:space="preserve">
          <source>A tuple or length &lt;a href=&quot;#pygame.PixelArray.ndim&quot;&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/a&gt; byte counts. When a stride is multiplied by the corresponding index it gives the offset of that index from the start of the array. A stride is negative for an array that has is inverted (has a negative step).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb831cd50eaa84ed03688c88de60c84fd2b02745" translate="yes" xml:space="preserve">
          <source>A tuple or length &lt;a href=&quot;#pygame.PixelArray.ndim&quot;&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/a&gt; giving the length of each dimension. Analogous to &lt;a href=&quot;surface#pygame.Surface.get_size&quot;&gt;&lt;code&gt;Surface.get_size()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545da02cbacc35e3587b2c639751d146085e4889" translate="yes" xml:space="preserve">
          <source>AUDIO_ALLOW_ANY_CHANGE</source>
          <target state="translated">AUDIO_ALLOW_ANY_CHANGE</target>
        </trans-unit>
        <trans-unit id="84691e75784f6ad9ce9a6f0e5fcf8e639ece953f" translate="yes" xml:space="preserve">
          <source>AUDIO_ALLOW_CHANNELS_CHANGE</source>
          <target state="translated">AUDIO_ALLOW_CHANNELS_CHANGE</target>
        </trans-unit>
        <trans-unit id="560e814c0050c962dc9a16377f101857834683e2" translate="yes" xml:space="preserve">
          <source>AUDIO_ALLOW_FORMAT_CHANGE</source>
          <target state="translated">AUDIO_ALLOW_FORMAT_CHANGE</target>
        </trans-unit>
        <trans-unit id="86458caa4986dee774d3092bffcaf9f6e0c9876b" translate="yes" xml:space="preserve">
          <source>AUDIO_ALLOW_FREQUENCY_CHANGE</source>
          <target state="translated">AUDIO_ALLOW_FREQUENCY_CHANGE</target>
        </trans-unit>
        <trans-unit id="e1541229c0cfb097f10b2a5366033573bcdfa3ad" translate="yes" xml:space="preserve">
          <source>Add any number of Sprites to this Group. This will only add Sprites that are not already members of the Group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f2402b53ad4e6e05b1f8c9a6b9af75dc090f4f" translate="yes" xml:space="preserve">
          <source>Adjust the pitch of a channel. The value is a signed integer from -8192 to +8191. For example, 0 means &quot;no change&quot;, +4096 is typically a semitone higher, and -8192 is 1 whole tone lower (though the musical range corresponding to the pitch bend range can also be changed in some synthesizers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354c2a7a83ea52d4fe2f318c89afa0a6c2206596" translate="yes" xml:space="preserve">
          <source>Adjustment factor for the underline position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5b4a7c24371a722c7a30229034b22e81a4f6a4" translate="yes" xml:space="preserve">
          <source>Advance users can combine a set of bitmasks with a depth value. The masks are a set of 4 integers representing which bits in a pixel will represent each color. Normal Surfaces should not require the masks argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f4f24d81d6c1313982a38606a251c0e120273a" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;pygame.display.set_mode()&lt;/code&gt; is called the display Surface will be visible on the screen. Most windowed displays can be hidden by the user. If the display Surface is hidden or iconified this will return False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd05fd1359b2582672008a613ff4fd188f667b2" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;pygame.display.set_mode()&lt;/code&gt; with the &lt;code&gt;pygame.OPENGL&lt;/code&gt; flag, it is a good idea to check the value of any requested OpenGL attributes. See &lt;code&gt;pygame.display.gl_set_attribute()&lt;/code&gt; for a list of valid flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d860f35cfadd17aa6734aad1b5d937066039adea" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;#pygame.event.EventType&quot;&gt;&lt;code&gt;pygame.event.EventType&lt;/code&gt;&lt;/a&gt; instances contain an event type identifier and attributes specific to that event type. The event type identifier is accessible as the &lt;a href=&quot;#pygame.event.EventType.type&quot;&gt;&lt;code&gt;pygame.event.EventType.type&lt;/code&gt;&lt;/a&gt; property. Any of the event specific attributes can be accessed through the &lt;a href=&quot;#pygame.event.EventType.__dict__&quot;&gt;&lt;code&gt;pygame.event.EventType.__dict__&lt;/code&gt;&lt;/a&gt; attribute or directly as an attribute of the event object (as member lookups are passed through to the object's dictionary values). The event object has no method functions. Users can create their own new events with the &lt;a href=&quot;#pygame.event.Event&quot;&gt;&lt;code&gt;pygame.event.Event()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459b952a193722631723c11638133894f3af4b76" translate="yes" xml:space="preserve">
          <source>All font file formats supported by FreeType can be rendered by &lt;code&gt;pygame.freetype&lt;/code&gt;, namely &lt;code&gt;TTF&lt;/code&gt;, Type1, &lt;code&gt;CFF&lt;/code&gt;, OpenType, &lt;code&gt;SFNT&lt;/code&gt;, &lt;code&gt;PCF&lt;/code&gt;, &lt;code&gt;FNT&lt;/code&gt;, &lt;code&gt;BDF&lt;/code&gt;, &lt;code&gt;PFR&lt;/code&gt; and Type42 fonts. All glyphs having UTF-32 code points are accessible (see &lt;a href=&quot;#pygame.freetype.Font.ucs4&quot;&gt;&lt;code&gt;Font.ucs4&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af56863cbd6ac59c7e65d81b09313c40b529aac7" translate="yes" xml:space="preserve">
          <source>All of these attributes can be assigned to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fec444f9964d095b2b829725490b212839a529e" translate="yes" xml:space="preserve">
          <source>All pygame functions will automatically lock and unlock the Surface data as needed. If a section of code is going to make calls that will repeatedly lock and unlock the Surface many times, it can be helpful to wrap the block inside a lock and unlock pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f223dedf1d187b874221b1ca4f0faf57fd0686" translate="yes" xml:space="preserve">
          <source>All sound playback is mixed in background threads. When you begin to play a Sound object, it will return immediately while the sound continues to play. A single Sound object can also be actively played back multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e232bf18815e7542b84fbaa829a39dc112b61512" translate="yes" xml:space="preserve">
          <source>All the drawing functions accept a color argument that can be one of the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f5052dea71e21a34ced718c2347c6da5c404c1" translate="yes" xml:space="preserve">
          <source>All the drawing functions respect the clip area for the surface and will be constrained to that area. The functions return a rectangle representing the bounding area of changed pixels. This bounding rectangle is the 'minimum' bounding box that encloses the affected area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9651a2abc95e0d5e08f6f0ebaa1995b84182c88" translate="yes" xml:space="preserve">
          <source>Allows for conversion from &quot;RGB&quot; to a destination colorspace of &quot;HSV&quot; or &quot;YUV&quot;. The source and destination surfaces must be the same size and pixel depth. This is useful for computer vision on devices with limited processing power. Capture as small of an image as possible, &lt;code&gt;transform.scale()&lt;/code&gt; it even smaller, and then convert the colorspace to &lt;code&gt;YUV&lt;/code&gt; or &lt;code&gt;HSV&lt;/code&gt; before doing any processing on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd05a9db280ca562a8ae3215b5e67e60982d2b10" translate="yes" xml:space="preserve">
          <source>Allows you to change camera settings if the camera supports it. The return values will be the input values if the camera claims it succeeded or the values previously in use if not. Each argument is optional, and the desired one can be chosen by supplying the keyword, like hflip. Note that the actual settings being used by the camera may not be the same as those returned by set_controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c23c6bea01da4d85a5790e8b43a10d29d473341" translate="yes" xml:space="preserve">
          <source>Also note that several font formats (especially bitmap based ones) don't contain the necessary metrics to draw glyphs vertically, so drawing in those cases will give unspecified results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee57d30b469523d59d240a7fd6f5e07d6002468" translate="yes" xml:space="preserve">
          <source>An optional area rectangle can be passed as well. This represents a smaller portion of the source Surface to draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfd177da8f5fa528511b512d839c7099bf9a682" translate="yes" xml:space="preserve">
          <source>An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be the same size as the (width, height) passed in. Also the destination surface must be the same format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87bbc0238492f69cd5920ddc3cd4d3112b153767" translate="yes" xml:space="preserve">
          <source>An optional destination surface can be used, rather than have it create a new one. This is quicker if you want to repeatedly scale something. However the destination must be twice the size of the source surface passed in. Also the destination surface must be the same format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73861e25783461c8a96963308ffdd7a9a1e9f9e" translate="yes" xml:space="preserve">
          <source>Another example filled with various surfarray effects. It requires the surfarray and image modules to be installed. This little demo can also make a good starting point for any of your own tests with surfarray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ad19c857bb2c849d678d2254eb75fa433dd91a" translate="yes" xml:space="preserve">
          <source>Any functions that directly access a surface's pixel data will need that surface to be lock()'ed. These functions can &lt;a href=&quot;#pygame.Surface.lock&quot;&gt;&lt;code&gt;lock()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pygame.Surface.unlock&quot;&gt;&lt;code&gt;unlock()&lt;/code&gt;&lt;/a&gt; the surfaces themselves without assistance. But, if a function will be called many times, there will be a lot of overhead for multiple locking and unlocking of the surface. It is best to lock the surface manually before making the function call many times, and then unlocking when you are finished. All functions that need a locked surface will say so in their docs. Remember to leave the Surface locked only while necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6aa2aee7b089e858e2936034d00ce7e36be28bf" translate="yes" xml:space="preserve">
          <source>Any number of Group instances can be passed as arguments. The Sprite will be added to the Groups it is not already a member of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352f5b2cd4b2c85fcad4ef9c2789eecb1bff7202" translate="yes" xml:space="preserve">
          <source>Any number of Group instances can be passed as arguments. The Sprite will be removed from the Groups it is currently a member of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf38b6e8e814d4821d309ada803a18fb5c549b3" translate="yes" xml:space="preserve">
          <source>Any pygame function that requires a Rect argument also accepts any of these values to construct a Rect. This makes it easier to create Rects on the fly as arguments to functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6780013ba1bb40e693c4ac13c5f50b588c6ddb35" translate="yes" xml:space="preserve">
          <source>Apart from 0, allowedchanged accepts the following constants ORed together:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b304963530d0a27b89a2a05ecb8f3bd2d1e9edc" translate="yes" xml:space="preserve">
          <source>Applies a certain gamma value to the Color and returns a new Color with the adjusted &lt;code&gt;RGBA&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f5729ebe27b50fb7978dae210b7d6970aedd89" translate="yes" xml:space="preserve">
          <source>Applies a certain gamma value to the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f318de9bbe32b2d41f01bb544c6d527b0d4939" translate="yes" xml:space="preserve">
          <source>Applies the following operation to each element of the vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f22e4e20c73db9746382e5939cdaae35a686f6b" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;file&lt;/em&gt; can be either a string representing the font's filename, a file-like object containing the font, or None; if None, a default, Pygame, font is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="e865aa3a507e517b7fceed0519dfa34a6f85d649" translate="yes" xml:space="preserve">
          <source>Array stride information as a tuple of integers. It is required only of non C-contiguous arrays. The tuple length must match that of &lt;code&gt;&quot;shape&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085e7731fb75f6ef33b90bddb91963a7764955e8" translate="yes" xml:space="preserve">
          <source>As a convenience, most of the top-level variables in pygame have been placed inside a module named &lt;a href=&quot;locals#module-pygame.locals&quot;&gt;&lt;code&gt;pygame.locals&lt;/code&gt;&lt;/a&gt;. This is meant to be used with &lt;code&gt;from pygame.locals import *&lt;/code&gt;, in addition to &lt;code&gt;import pygame&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1050e846ce520f5d46127d283ce70aab0784949b" translate="yes" xml:space="preserve">
          <source>As in &lt;code&gt;Sound.play()&lt;/code&gt;, the fade_ms argument can be used fade in the sound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2347b3831ce277c8baec6a09a321003b39a36f54" translate="yes" xml:space="preserve">
          <source>As in &lt;code&gt;Sound.play()&lt;/code&gt;, the maxtime argument can be used to stop playback of the Sound after a given number of milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad7b55da5fb30d17d696535342d1ee1c72f72e9" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#pygame.Surface.convert&quot;&gt;&lt;code&gt;convert()&lt;/code&gt;&lt;/a&gt; the returned surface has the same class as the converted surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41f640b5d5cabb31fbcf12b62ef7d619bafebaf" translate="yes" xml:space="preserve">
          <source>Assigning &lt;code&gt;STYLE_DEFAULT&lt;/code&gt; to the &lt;a href=&quot;#pygame.freetype.Font.style&quot;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; property leaves the property unchanged, as this property defines the default. The &lt;a href=&quot;#pygame.freetype.Font.style&quot;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; property will never return &lt;code&gt;STYLE_DEFAULT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb233397c9eb6a4a6e5730f316a642742a1ff46a" translate="yes" xml:space="preserve">
          <source>Assigning to size, width or height changes the dimensions of the rectangle; all other assignments move the rectangle without resizing it. Notice that some attributes are integers and others are pairs of integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db4d7a0289e8a606e31543c21eb84ca785697508" translate="yes" xml:space="preserve">
          <source>Available for &lt;a href=&quot;display#pygame.display.set_mode&quot;&gt;&lt;code&gt;pygame.display.set_mode()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f9b4905ed66a5c73f1ca312be0ddfef456e670" translate="yes" xml:space="preserve">
          <source>Be aware that &lt;code&gt;MP3&lt;/code&gt; support is limited. On some systems an unsupported format can crash the program, &lt;code&gt;e.g&lt;/code&gt;. Debian Linux. Consider using &lt;code&gt;OGG&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068520199de2155944886341a5cfeb622a31891e" translate="yes" xml:space="preserve">
          <source>Be aware that most fonts use kerning which adjusts the widths for specific letter pairs. For example, the width for &quot;ae&quot; will not always match the width for &quot;a&quot; + &quot;e&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebbe97d3857ed69476ecceb7b81e1df04513664" translate="yes" xml:space="preserve">
          <source>Begin playback of the Sound (i.e., on the computer's speakers) on an available Channel. This will forcibly select a Channel, so playback may cut off a currently playing sound if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f7216b1a0a9e3e5e8906f47466ea577eb6f9c0" translate="yes" xml:space="preserve">
          <source>Blit directly from a array values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1423de0aafc29df1975c30ed09925dad4b90fc23" translate="yes" xml:space="preserve">
          <source>Both flags are only a request, and may not be possible for all displays and formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc50109665664b3eedf326221cbe44b8c00fb5b1" translate="yes" xml:space="preserve">
          <source>Bottom sprites first, top last.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bf7e4a5a56b611f686acea3f5176ead3d2c465" translate="yes" xml:space="preserve">
          <source>Brings the sprite to front, changing sprite layer to topmost layer (added at the end of that layer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979667854bb1577c90e1548491b9a06b8a913547" translate="yes" xml:space="preserve">
          <source>BufferProxy</source>
          <target state="translated">BufferProxy</target>
        </trans-unit>
        <trans-unit id="7ea56536aa5bc30a03067badff751dc075b1b6d4" translate="yes" xml:space="preserve">
          <source>BufferProxy.length</source>
          <target state="translated">BufferProxy.length</target>
        </trans-unit>
        <trans-unit id="2269f79ee43ebffaafa3351c5400cf7a81f51c56" translate="yes" xml:space="preserve">
          <source>BufferProxy.parent</source>
          <target state="translated">BufferProxy.parent</target>
        </trans-unit>
        <trans-unit id="ed9175e738ca083175f5e3a3358352dc33dcd281" translate="yes" xml:space="preserve">
          <source>BufferProxy.raw</source>
          <target state="translated">BufferProxy.raw</target>
        </trans-unit>
        <trans-unit id="a1c50c438c81228ae7222ce12296c5b92d5f4f8e" translate="yes" xml:space="preserve">
          <source>BufferProxy.write()</source>
          <target state="translated">BufferProxy.write()</target>
        </trans-unit>
        <trans-unit id="97c51db9178a2fa43ed4c4c73e691ad77c097031" translate="yes" xml:space="preserve">
          <source>Buttons generate a &lt;code&gt;pygame.JOYBUTTONDOWN&lt;/code&gt; and &lt;code&gt;pygame.JOYBUTTONUP&lt;/code&gt; event when they are pressed and released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c18dfc272756ca214ed50c9af601c8c12b59d7" translate="yes" xml:space="preserve">
          <source>By default individual test modules are run in separate subprocesses. This recreates normal pygame usage where &lt;code&gt;pygame.init()&lt;/code&gt; and &lt;code&gt;pygame.quit()&lt;/code&gt; are called only once per program execution, and avoids unfortunate interactions between test modules. Also, a time limit is placed on test execution, so frozen tests are killed when there time allotment expired. Use the single process option if threading is not working properly or if tests are taking too long. It is not guaranteed that all tests will pass in single process mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109d89e856ca4c25309258f4e039c0355e305d51" translate="yes" xml:space="preserve">
          <source>By default it sets pixels in the 'dest_surf' where all of the pixels NOT within the threshold are changed to set_color. If inverse_set is optionally set to True, the pixels that ARE within the threshold are changed to set_color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7101b647566e0bceee4557c7b0fc3da6a1aef386" translate="yes" xml:space="preserve">
          <source>By default this method will return a &lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;code&gt;Mask&lt;/code&gt;&lt;/a&gt; containing the largest connected component in the mask. Optionally, a bit coordinate can be specified and the connected component containing it will be returned. If the bit at the given location is not set, the returned &lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;code&gt;Mask&lt;/code&gt;&lt;/a&gt; will be empty (no bits set).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7e76a36e1ac37bfeb3cd76428d6fd200d20aa9" translate="yes" xml:space="preserve">
          <source>Calculates the spherical interpolation from self to the given Vector. The second argument - often called t - must be in the range [-1, 1]. It parametrizes where - in between the two vectors - the result should be. If a negative value is given the interpolation will not take the complement of the shortest path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af5513db74dc52d22594fc347a6bc29fbe2ea17" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;#pygame.Surface&quot;&gt;&lt;code&gt;pygame.Surface()&lt;/code&gt;&lt;/a&gt; to create a new image object. The Surface will be cleared to all black. The only required arguments are the sizes. With no additional arguments, the Surface will be created in a format that best matches the display Surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712ef12412611dc690e94a5450efe87e0cc40302" translate="yes" xml:space="preserve">
          <source>Call pre_init to change the defaults used when the real &lt;code&gt;pygame.mixer.init()&lt;/code&gt; is called. Keyword arguments are accepted. The best way to set custom mixer playback values is to call &lt;code&gt;pygame.mixer.pre_init()&lt;/code&gt; before calling the top level &lt;code&gt;pygame.init()&lt;/code&gt;. For backward compatibility argument values of zero are replaced with the startup defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a728b1b2fafa80365d8057d6654aa13f43ae6bfa" translate="yes" xml:space="preserve">
          <source>Callback invoked when an exported buffer is released. The callback is passed on argument, the &lt;code&gt;&quot;parent&quot;&lt;/code&gt; object if given, otherwise None. The callback is useful for releasing a lock on the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85ab3675f17f237442adac0964ee69b9c601b3b" translate="yes" xml:space="preserve">
          <source>Callback invoked when the &lt;a href=&quot;#pygame.BufferProxy&quot;&gt;&lt;code&gt;BufferProxy&lt;/code&gt;&lt;/a&gt; instance exports the buffer. The callback is given one argument, the &lt;code&gt;&quot;parent&quot;&lt;/code&gt; object if given, otherwise &lt;code&gt;None&lt;/code&gt;. The callback is useful for setting a lock on the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a82a021e15721f31ae273c85c00db338a71e9e4" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;#pygame.quit&quot;&gt;&lt;code&gt;pygame.quit()&lt;/code&gt;&lt;/a&gt; will not exit your program. Consider letting your program end in the same way a normal Python program will end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2051f90dc16a403ba17728f433a4e4f27d4ac0ac" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;update()&lt;/code&gt; method on all Sprites in the Group. The base Sprite class has an update method that takes any number of arguments and does nothing. The arguments passed to &lt;code&gt;Group.update()&lt;/code&gt; will be passed to each Sprite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a89527100d7affacb785a535913eceec75eda6" translate="yes" xml:space="preserve">
          <source>Caution</source>
          <target state="translated">Caution</target>
        </trans-unit>
        <trans-unit id="28d28dbc748c84b83a4371c3d8186b77c455bbc0" translate="yes" xml:space="preserve">
          <source>Change the hardware gamma ramps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d436dbc48262a7ca97451d12c36551c997efc0" translate="yes" xml:space="preserve">
          <source>Change the hardware gamma ramps with a custom lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935311686868299482135fdb914a959ca8fe20fc" translate="yes" xml:space="preserve">
          <source>Change the system image for the display window</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a17f7d886a9824d999fd15b3dd72360e31c2e9" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.8.1: New implementation of the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f6f4a4c0c16ad2cc1faf465363499c0bf05e6d" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.8: The default &lt;code&gt;buffersize&lt;/code&gt; was changed from 1024 to 3072.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62afe95c96fc788d44f54b596fa3cf3f007307b1" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.0: Color objects support 4-element tuples of integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde27a35d4784e364261651d705b175c56e93ff0" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.1: The default &lt;code&gt;buffersize&lt;/code&gt; was changed from 3072 to 4096.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677c5d48bf86f4e1b232a5ff4707df17936fd93d" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe12a3d27a72f62ff77c2054223be66599ea22bb" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.2: Color objects export the C level array interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1279d4c464e7c8adce585f46947c5281f4990a" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.4: &lt;a href=&quot;#module-pygame.math&quot;&gt;&lt;code&gt;pygame.math&lt;/code&gt;&lt;/a&gt; required import. More convenient &lt;code&gt;pygame.Vector2&lt;/code&gt; and &lt;code&gt;pygame.Vector3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2afeb56d4373f6766984200f4cddf3ad1794ed" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.4: Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a85d6d49392f0489c18b8d4234f888e2fbb12e8" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.4: Fixed a lot of bugs and added keyword arguments. Test your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536577f0755074650249a80e0a3fb8b3cdb587ae" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.4: Removed experimental notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502afc5129904cdbee73d6d67004dacd7b069d71" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.5: Added support for keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7a6d9c7a1389fb1f46d665d983fea010f3e971" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.5: Added support for masks with a width and/or a height of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c17ed3d9be927c3acd6713c2ea281525233a39" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.5: Added the optional keyword parameter &lt;code&gt;fill&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117d68adedfac7106cf9de0dca13f3c55d1c1b36" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.6: &lt;code&gt;repr(pygame.version.vernum)&lt;/code&gt; returns a string like &lt;code&gt;&quot;PygameVersion(major=2, minor=0, patch=0)&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;(2, 0, 0)&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9684900377d58cb180a30b966f69d0b1adac429a" translate="yes" xml:space="preserve">
          <source>Changed in pygame 1.9.6: &lt;code&gt;str(pygame.version.vernum)&lt;/code&gt; returns a string like &lt;code&gt;&quot;2.0.0&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;(2, 0, 0)&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa999698e15905fc9ef32630b653c852c592240" translate="yes" xml:space="preserve">
          <source>Changed in pygame 2.0.0: Added support for keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f5b170386dfbffc10e52972b7d6d53f7cb3599" translate="yes" xml:space="preserve">
          <source>Changed in pygame 2.0.0: Shallow copy support added. The &lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;code&gt;Mask&lt;/code&gt;&lt;/a&gt; class supports the special method &lt;code&gt;__copy__()&lt;/code&gt; and shallow copying via &lt;code&gt;copy.copy(mask)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5ad9bf4dc125ab4400bd788f47c68eef569d25" translate="yes" xml:space="preserve">
          <source>Changed in pygame 2.0.0: Subclassing support added. The &lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;code&gt;Mask&lt;/code&gt;&lt;/a&gt; class can be used as a base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fcf4632b8e96bce5a2ef123b8e84046520cf868" translate="yes" xml:space="preserve">
          <source>Changed in pygame 2.0.0: Support for tuples, lists, and &lt;a href=&quot;#pygame.Color&quot;&gt;&lt;code&gt;Color&lt;/code&gt;&lt;/a&gt; objects when creating &lt;a href=&quot;#pygame.Color&quot;&gt;&lt;code&gt;Color&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a563d6e128d86ca4b656a3494cd4a3bfc6cbe50" translate="yes" xml:space="preserve">
          <source>Changed in pygame 2.0.0: The default &lt;code&gt;buffersize&lt;/code&gt; was changed from 4096 to 512. The default frequency changed to 44100 from 22050.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c8973ddf3ef89eb198cfeb58dfd271f7c556e2" translate="yes" xml:space="preserve">
          <source>Changed in pygame 2.0: per-surface alpha can be combined with per-pixel alpha.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06adc4442acb6c974a14079b292172b7156d8a02" translate="yes" xml:space="preserve">
          <source>Changes the direction of self as if it would have been reflected of a surface with the given surface normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645b2366089022ad216e37ba3d6badeafbf4791b" translate="yes" xml:space="preserve">
          <source>Character kerning mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0862c14ae3f04297fcbefc02c762066000822fb" translate="yes" xml:space="preserve">
          <source>Checks the computer for available cameras and returns a list of strings of camera names, ready to be fed into &lt;a href=&quot;#pygame.camera.Camera&quot;&gt;&lt;code&gt;pygame.camera.Camera&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e584ae18574993fe73d3c7335893192b51a176e" translate="yes" xml:space="preserve">
          <source>Checks whether data for a given type is available in the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3051d1c608f7fd2f409cebe2b10ee3a275ee2d5e" translate="yes" xml:space="preserve">
          <source>Checks whether data for the given type is currently available in the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ff38151edc9b47693623638b7be4546aedb5fe" translate="yes" xml:space="preserve">
          <source>Closes the PixelArray, and releases Surface lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b68d2c7436c1c6b8af762df6cc911e789fcb60" translate="yes" xml:space="preserve">
          <source>Collision detection between two sprites, using circles scaled to a ratio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b9e07a67b598169cac8b8db4eaa75056576a41" translate="yes" xml:space="preserve">
          <source>Collision detection between two sprites, using circles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b43383e628cad919300a4e464745f8c150024ba" translate="yes" xml:space="preserve">
          <source>Collision detection between two sprites, using masks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a77f53705055dfb771820c69fa21a2d02878a9" translate="yes" xml:space="preserve">
          <source>Collision detection between two sprites, using rects scaled to a ratio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e038b7fde36403d462ace4a0a4c6fc820af464a0" translate="yes" xml:space="preserve">
          <source>Collision detection between two sprites, using rects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de388e6986ef49848cca5b67ddc9b0e53abb3241" translate="yes" xml:space="preserve">
          <source>Collision with the returned sprite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0c8304baedcf8e3a78982c2e7c0b04622bf2a0" translate="yes" xml:space="preserve">
          <source>Color</source>
          <target state="translated">Color</target>
        </trans-unit>
        <trans-unit id="68e811e9a50f14f698de2f4f0afd172d4f9df671" translate="yes" xml:space="preserve">
          <source>Color objects export the C level array interface. The interface exports a read-only one dimensional unsigned byte array of the same assigned length as the color. For CPython 2.6 and later, the new buffer interface is also exported, with the same characteristics as the array interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4774e33c05f9358d80dee4c587aecdc426d0af6" translate="yes" xml:space="preserve">
          <source>Color objects support equality comparison with other color objects and 3 or 4 element tuples of integers. There was a bug in pygame 1.8.1 where the default alpha was 0, not 255 like previously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce9662fbe120b8517dd69a00ca49213d2794cb6" translate="yes" xml:space="preserve">
          <source>Color.a</source>
          <target state="translated">Color.a</target>
        </trans-unit>
        <trans-unit id="de0a1d0d815e2c2267dda1e524465e42ed0994e0" translate="yes" xml:space="preserve">
          <source>Color.b</source>
          <target state="translated">Color.b</target>
        </trans-unit>
        <trans-unit id="f30c37e5a21c453933ec517b464be6b5fc224937" translate="yes" xml:space="preserve">
          <source>Color.cmy</source>
          <target state="translated">Color.cmy</target>
        </trans-unit>
        <trans-unit id="d61700359393009bae0f503ebfbcfd173c111883" translate="yes" xml:space="preserve">
          <source>Color.correct_gamma()</source>
          <target state="translated">Color.correct_gamma()</target>
        </trans-unit>
        <trans-unit id="618ca2e9dc2b81e62db93406b2d3b033d9c5ed4b" translate="yes" xml:space="preserve">
          <source>Color.g</source>
          <target state="translated">Color.g</target>
        </trans-unit>
        <trans-unit id="0acf5169e654276c5450c7a675e01f96564527ff" translate="yes" xml:space="preserve">
          <source>Color.hsla</source>
          <target state="translated">Color.hsla</target>
        </trans-unit>
        <trans-unit id="7b670a69e7b789c75a2af2675a8cba609978de4c" translate="yes" xml:space="preserve">
          <source>Color.hsva</source>
          <target state="translated">Color.hsva</target>
        </trans-unit>
        <trans-unit id="88386b6f216c7b1aae4d1bec4ae8c7e584ef984a" translate="yes" xml:space="preserve">
          <source>Color.i1i2i3</source>
          <target state="translated">Color.i1i2i3</target>
        </trans-unit>
        <trans-unit id="bb4435f64c472c4311799e46415cd1694d9f6279" translate="yes" xml:space="preserve">
          <source>Color.lerp()</source>
          <target state="translated">Color.lerp()</target>
        </trans-unit>
        <trans-unit id="aa07924d243fe821951190e7855d482d861a459f" translate="yes" xml:space="preserve">
          <source>Color.normalize()</source>
          <target state="translated">Color.normalize()</target>
        </trans-unit>
        <trans-unit id="aa014f51e125b0ef86818cf767ec1496ce225f17" translate="yes" xml:space="preserve">
          <source>Color.r</source>
          <target state="translated">Color.r</target>
        </trans-unit>
        <trans-unit id="a7917c09ce91666ad8230716ec411f46131f6177" translate="yes" xml:space="preserve">
          <source>Color.set_length()</source>
          <target state="translated">Color.set_length()</target>
        </trans-unit>
        <trans-unit id="de212669ae5467c58ef9110b8ec9e578e5383094" translate="yes" xml:space="preserve">
          <source>Command line option --help displays a usage message. Available options correspond to the &lt;a href=&quot;#pygame.tests.run&quot;&gt;&lt;code&gt;pygame.tests.run()&lt;/code&gt;&lt;/a&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260907fa719c871b803d5d0ef5cd49d1abc88907" translate="yes" xml:space="preserve">
          <source>Compares the PixelArray with another one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17007c2fee063a772347243e17dad4843268b4d7" translate="yes" xml:space="preserve">
          <source>Compares the contents of the PixelArray with those from the passed PixelArray. It returns a new PixelArray with a black/white color mask that indicates the differences (white) of both arrays. Both PixelArray objects must have identical bit depths and dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a93beed6f1159dcf6501c999bd67b5b5218bb5" translate="yes" xml:space="preserve">
          <source>Compute your game's framerate (in frames per second). It is computed by averaging the last ten calls to &lt;code&gt;Clock.tick()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d54c68add208e755751697292c17f35f866690d" translate="yes" xml:space="preserve">
          <source>Convert a 3D array into a 2D array. This will use the given Surface format to control the conversion. Palette surface formats are supported for NumPy arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569acb94061b9e84e99248d00fd5e000f1d169c8" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;RGBA&lt;/code&gt; color into the mapped integer value for this Surface. The returned integer will contain no more bits than the bit depth of the Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b517ede646e126337237dc86b4d68a1a9553c042" translate="yes" xml:space="preserve">
          <source>Convert an mapped integer color into the &lt;code&gt;RGB&lt;/code&gt; color components for this Surface. Mapped color values are not often used inside pygame, but can be passed to most functions that require a Surface and a color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d16db84bbad50a2a659170b273159aefa31dc42" translate="yes" xml:space="preserve">
          <source>Converts a frequency into a MIDI note. Rounds to the closest midi note.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316a479d30dad70043aff375adf010548f1dcd29" translate="yes" xml:space="preserve">
          <source>Converts a midi note to a frequency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83de4bbb014a57256fbc9e44a72c81375325715b" translate="yes" xml:space="preserve">
          <source>Convolve this mask with the given &lt;code&gt;othermask&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7baf0ac883e7f7b469cb22f1e1ea1478e55d3d9" translate="yes" xml:space="preserve">
          <source>Copy an array to a new surface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382c04925a56983f312e79c3545b692237cab25c" translate="yes" xml:space="preserve">
          <source>Copy kind 'C' is a special case for alpha copy of a source surface with colorkey. Unlike the 'A' color component copy, the &lt;code&gt;clear&lt;/code&gt; argument value is used for colorkey matches, &lt;code&gt;opaque&lt;/code&gt; otherwise. By default, a match has alpha 0 (totally transparent), while everything else is alpha 255 (totally opaque). It is a more general implementation of &lt;a href=&quot;surfarray#pygame.surfarray.array_colorkey&quot;&gt;&lt;code&gt;pygame.surfarray.array_colorkey()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12db024274c652a2391de1bfd87415a66a4eb1d3" translate="yes" xml:space="preserve">
          <source>Copy pixel alphas into a 2d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c69faaac7f136e09b5bcc0d31a8aa883b8d2be" translate="yes" xml:space="preserve">
          <source>Copy pixels into a 2d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700f42eae11371d7c647b4b4bd596040772bc435" translate="yes" xml:space="preserve">
          <source>Copy pixels into a 3d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23feebf9f28ad7dab190cc3a6bf288ecda2cc7c4" translate="yes" xml:space="preserve">
          <source>Copy the &lt;a href=&quot;surface#pygame.Surface.map_rgb&quot;&gt;&lt;code&gt;mapped&lt;/code&gt;&lt;/a&gt; (raw) pixels from a Surface into a 2D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44efe6c0f9bcb3059d118c83108fa340ebbab361" translate="yes" xml:space="preserve">
          <source>Copy the colorkey values into a 2d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eeac16d711635e0a26e1f19cdce1ee7c7e4f522" translate="yes" xml:space="preserve">
          <source>Copy the pixel alpha values (degree of transparency) from a Surface into a 2D array. This will work for any type of Surface format. Surfaces without a pixel alpha will return an array with all opaque values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af19d2af7189b572dad61b4d44945b8ff16f66ca" translate="yes" xml:space="preserve">
          <source>Copy the pixels from a Surface into a 3D array. The bit depth of the surface will control the size of the integer values, and will work for any type of pixel format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdc427000aa9294def6ec34c24ad6c6c2cf5f99" translate="yes" xml:space="preserve">
          <source>Create a Channel object for controlling playback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6159a68c4dd8e325639221117b93feb8c768d01d" translate="yes" xml:space="preserve">
          <source>Create a bitmask of the modifier constants you want to impose on your program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabed3f207d7cc4975f26d71cb98e049c2bb6202" translate="yes" xml:space="preserve">
          <source>Create a new 2D array that directly references the alpha values (degree of transparency) in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ed25a17c44faf3abc398c944afa1f7582e489f" translate="yes" xml:space="preserve">
          <source>Create a new 2D array that directly references the blue values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8ceb01e0480f2e3d4573ffbcc45f0a841a126f" translate="yes" xml:space="preserve">
          <source>Create a new 2D array that directly references the green values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccaede36a4e8bd77e8af567d5387113aff4c38c5" translate="yes" xml:space="preserve">
          <source>Create a new 2D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a88bb36867d7d1c8beae3744d22942bf768154" translate="yes" xml:space="preserve">
          <source>Create a new 2D array that directly references the red values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ec462c7dc29b062e13976454e05282eefc4d23" translate="yes" xml:space="preserve">
          <source>Create a new 3D array that directly references the pixel values in a Surface. Any changes to the array will affect the pixels in the Surface. This is a fast operation since no data is copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b7f348744198eba75cb59262d0cb42077a9266" translate="yes" xml:space="preserve">
          <source>Create a new Font instance from a supported font file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d9402ac48f00bb2e58535fb9f3cf98e337c7cb" translate="yes" xml:space="preserve">
          <source>Create a new Joystick object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0cf3a03813d6671792ee91242579a336c80116" translate="yes" xml:space="preserve">
          <source>Create a new Sound object from a file or buffer object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b6834cb012f159adb1238749557b9e3114b9c2" translate="yes" xml:space="preserve">
          <source>Create a new Surface that best resembles the data and format of the array. The array can be 2D or 3D with any sized integer values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03574715f8d41954f868f2068aaca81feffa8a6" translate="yes" xml:space="preserve">
          <source>Create a new Surface that best resembles the data and format on the array. The array can be 2D or 3D with any sized integer values. Function make_surface uses the array struct interface to acquire array properties, so is not limited to just NumPy arrays. See &lt;a href=&quot;pixelcopy#module-pygame.pixelcopy&quot;&gt;&lt;code&gt;pygame.pixelcopy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44866e6f30689e64da5e17029d95de0e59ff06e" translate="yes" xml:space="preserve">
          <source>Create a new Surface that shares pixel data directly from the string buffer. This method takes the same arguments as &lt;code&gt;pygame.image.fromstring()&lt;/code&gt;, but is unable to vertically flip the source data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75f743a40a29b6fa20f4b7db13aa2a3db22b847" translate="yes" xml:space="preserve">
          <source>Create a new array with the colorkey transparency value from each pixel. If the pixel matches the colorkey it will be fully transparent; otherwise it will be fully opaque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0045520be12dd7047fd6df78a382b74dcfe61f09" translate="yes" xml:space="preserve">
          <source>Create a new joystick to access a physical device. The id argument must be a value from 0 to pygame.joystick.get_count()-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed4c5a2c8e62eccfc4c5965d4734e62bf208fe6" translate="yes" xml:space="preserve">
          <source>Create a new playable Sound object from an array. The mixer module must be initialized and the array format must be similar to the mixer audio format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627a8dab06cbc84e11263439f4bb23691c3105e9" translate="yes" xml:space="preserve">
          <source>Create a video display information object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769c527599e065f91a64145e15acf5d5fd796e7a" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;code&gt;Mask&lt;/code&gt;&lt;/a&gt; object from the given surface by setting all the opaque pixels and not setting the transparent pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61435c706db899b98846f8ead27c47e87faa986" translate="yes" xml:space="preserve">
          <source>Creates a Mask from the given surface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09edb38258da117a74a85f0845f5b78252be348d" translate="yes" xml:space="preserve">
          <source>Creates a dictionary filled with string keys. The strings and values are arbitrarily created by the system. Some systems may have no information and an empty dictionary will be returned. Most platforms will return a &quot;window&quot; key with the value set to the system id for the current display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82423e425a76e88bc3e743159124d67449190ac" translate="yes" xml:space="preserve">
          <source>Creates a mask by thresholding Surfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3433b39fbe938c59100020eee272e72ae7110642" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;code&gt;Mask&lt;/code&gt;&lt;/a&gt; of the requested size with its bits scaled from this mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0516ccbe93024067ad9f4a21fc2ef357f67ed2b" translate="yes" xml:space="preserve">
          <source>Creates a new Clock object that can be used to track an amount of time. The clock also provides several functions to help control a game's framerate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2a8a98ff10d08443439c4abb0a955db7c84ee9" translate="yes" xml:space="preserve">
          <source>Creates a new Group with all the same Sprites as the original. If you have subclassed Group, the new object will have the same (sub-)class as the original. This only works if the derived class's constructor takes the same arguments as the Group class's.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5179bff8b7126ccd2f1289b4702cb6b967803f12" translate="yes" xml:space="preserve">
          <source>Creates a new Surface from the current PixelArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3d6fc7ea2b50d20490c5997b0a22bd9671e108" translate="yes" xml:space="preserve">
          <source>Creates a new Surface from the current PixelArray. Depending on the current PixelArray the size, pixel order etc. will be different from the original Surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34339f91497ff223cb2ee1a63b4dec812cd92a4" translate="yes" xml:space="preserve">
          <source>Creates a new array for the sound data and copies the samples. The array will always be in the format returned from &lt;code&gt;pygame.mixer.get_init()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312e803600877f308a8acd9b8da4767ef91e1ae2" translate="yes" xml:space="preserve">
          <source>Creates a new array that directly references the samples in a Sound object. Modifying the array will change the Sound. The array will always be in the format returned from &lt;code&gt;pygame.mixer.get_init()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f883179e80670a247f79a8ab3a9478fbce0eec" translate="yes" xml:space="preserve">
          <source>Creates a new copy of the Surface with the pixel format changed. The new pixel format can be determined from another existing Surface. Otherwise depth, flags, and masks arguments can be used, similar to the &lt;a href=&quot;#pygame.Surface&quot;&gt;&lt;code&gt;pygame.Surface()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4289bc57cc311aa08f204fcc41dcd3eca4ee8d6" translate="yes" xml:space="preserve">
          <source>Creates a new copy of the surface with the desired pixel format. The new surface will be in a format suited for quick blitting to the given format with per pixel alpha. If no surface is given, the new surface will be optimized for blitting to the current display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f465507450fcdde3c509e33cadba4ede5c6d9d0c" translate="yes" xml:space="preserve">
          <source>Creates a new event with the given type and attributes. The attributes can come from a dictionary argument with string keys or from keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af06b2454e1385ac751425201779278e6eb41f7" translate="yes" xml:space="preserve">
          <source>Creates a simple object containing several attributes to describe the current graphics environment. If this is called before &lt;code&gt;pygame.display.set_mode()&lt;/code&gt; some platforms can provide information about the default display mode. This can also be called after setting the display mode to verify specific display options were satisfied. The VidInfo object has several attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75bc863482fe13df6372b005cba11b4b2449e9e2" translate="yes" xml:space="preserve">
          <source>Creates a string that can be transferred with the 'fromstring' method in other Python imaging packages. Some Python image packages prefer their images in bottom-to-top format (PyOpenGL for example). If you pass True for the flipped argument, the string buffer will be vertically flipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52761774b349a37e780ed8feeeee1487dbb5bc03" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the &lt;a href=&quot;#pygame.sndarray.use_arraytype&quot;&gt;&lt;code&gt;pygame.sndarray.use_arraytype()&lt;/code&gt;&lt;/a&gt; () method. If no supported array system could be found, None will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99270afd46c62a93a3efcc3fab47c530af8bc173" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Checks, which array systems are available and returns them as a tuple of strings. The values of the tuple can be used directly in the &lt;a href=&quot;#pygame.surfarray.use_arraytype&quot;&gt;&lt;code&gt;pygame.surfarray.use_arraytype()&lt;/code&gt;&lt;/a&gt; () method. If no supported array system could be found, None will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6fe1a592a158e1a1619b198cce7fd75452003b" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Not needed anymore. Will be removed in a later version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b31d1334a1c0e2173f6e50307e6f964c4f7b5a6" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Returns &lt;code&gt;True&lt;/code&gt; if the &lt;code&gt;pygame.freetype&lt;/code&gt; module is currently initialized. Use &lt;code&gt;get_init()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf0a0bf7414705fce58a4b460ebcd935f34d318" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Returns the currently active array type. This will be a value of the &lt;code&gt;get_arraytypes()&lt;/code&gt; tuple and indicates which type of array module is used for the array creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd14c2bfc3bd814ae79b3741823069b48e503496" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Use get_init() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d29f6b550ecaed560e7ac84c5f7d642d6db579" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Uses the requested array type for the module functions. The only supported arraytype is &lt;code&gt;'numpy'&lt;/code&gt;. Other values will raise ValueError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae746daaf062e63752f8c7ea58dfea12873ccdc5" translate="yes" xml:space="preserve">
          <source>Default is 1000./80 where 80 is the fps I want to switch to full screen mode. This method's name is a typo and should be fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dda2182766ac17c13944520c5f125f9442dcb79" translate="yes" xml:space="preserve">
          <source>Demonstrates creating a vertical gradient with pixelcopy and NumPy python. The app will create a new gradient every half second and report the time needed to create and display the image. If you're not prepared to start working with the NumPy arrays, don't worry about the source for this one :]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55abd2db9dab8d8fe463b64362310d691de3dd49" translate="yes" xml:space="preserve">
          <source>Depending on the platform, additional types are automatically registered when data is placed into the clipboard to guarantee a consistent sharing behaviour with other applications. The following listed types can be used as strings to be passed to the respective &lt;a href=&quot;#module-pygame.scrap&quot;&gt;&lt;code&gt;pygame.scrap&lt;/code&gt;&lt;/a&gt; module functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774b232c1f158b8c594d90b112f730101c74f25b" translate="yes" xml:space="preserve">
          <source>Depending on the type of background and antialiasing used, this returns different types of Surfaces. For performance reasons, it is good to know what type of image will be used. If antialiasing is not used, the return image will always be an 8-bit image with a two-color palette. If the background is transparent a colorkey will be set. Antialiased images are rendered to 24-bit &lt;code&gt;RGB&lt;/code&gt; images. If the background is transparent a pixel alpha will be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4711e6a34a7d029090b1be459b7a7f0721b09932" translate="yes" xml:space="preserve">
          <source>Derived from the &lt;code&gt;RuntimeError&lt;/code&gt; exception, which can also be used to catch these raised errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9414da0327f3430093a78ad8ba84cbdb7dda7aca" translate="yes" xml:space="preserve">
          <source>Detailed descriptions of the various constants can be found throughout the pygame documentation. Here are the locations of some of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c03d25bc0599eff342f372ac5e167821179b14a" translate="yes" xml:space="preserve">
          <source>Determine if a track on a cdrom contains audio data. You can also call &lt;code&gt;CD.num_tracks()&lt;/code&gt; and &lt;code&gt;CD.get_all()&lt;/code&gt; to determine more information about the cdrom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd821381f2cac6cca56458d34d6ac264864210d" translate="yes" xml:space="preserve">
          <source>Device ids range from 0 to &lt;code&gt;get_count() - 1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ba22c4b1e6290cda3d42cdcba4e44a95dc6116" translate="yes" xml:space="preserve">
          <source>Directly copy values from an array into a Surface. This is faster than converting the array into a Surface and blitting. The array must be the same dimensions as the Surface and will completely replace all pixel values. Only integer, ASCII character and record arrays are accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86dde178f8ee9769937388cb41887ad6bd4bb40" translate="yes" xml:space="preserve">
          <source>Disables swizzling for all vectors until &lt;code&gt;enable_swizzling()&lt;/code&gt; is called. By default swizzling is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549cbf18e9bef3e9423b9aaae1e8a67d3aec787b" translate="yes" xml:space="preserve">
          <source>Display an arrow or circle with crossbar cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4bdfe5717097add2a249c2a43e8d72c7f6c524" translate="yes" xml:space="preserve">
          <source>Display the YUV data in SDL's overlay planes. The y, u, and v arguments are strings of binary data. The data must be in the correct format used to create the Overlay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a22bc1acc4543b5e5f85e929f26e2d1f667e4f" translate="yes" xml:space="preserve">
          <source>Display various pixelarray generated effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f42ac8e46bac8ac793bc2e3fd3f659c255ea5a1" translate="yes" xml:space="preserve">
          <source>Draw several shapes to a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff55deae72c3ab5c5fe72dc4dba0c1dba07fec4" translate="yes" xml:space="preserve">
          <source>Draw several simple shapes to a surface. These functions will work for rendering to any format of surface. Rendering to hardware surfaces will be slower than regular software surfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446aee89c95556b9bfc22e9d1b274f612de3ab61" translate="yes" xml:space="preserve">
          <source>Draws a B&amp;eacute;zier curve onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b06157c644c7fdc6725a971c302b14ff92c0195" translate="yes" xml:space="preserve">
          <source>Draws a box (a rect) onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ca406d2b3de12e66fe1cf78353265b087264f9" translate="yes" xml:space="preserve">
          <source>Draws a circle on the given surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4568350de083503d73efd8b37c25dcc629c7a65c" translate="yes" xml:space="preserve">
          <source>Draws a filled circle onto a surface. So the inside of the circle will be filled with the given color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d22668cf271c3d68ed31a09d6f547ca7f7ed36" translate="yes" xml:space="preserve">
          <source>Draws a filled ellipse onto a surface. So the inside of the ellipse will be filled with the given color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9e0c3c3184d241bace24e10ccdba64706243e5" translate="yes" xml:space="preserve">
          <source>Draws a filled polygon onto a surface. So the inside of the polygon will be filled with the given color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb4b428a312654f0c95b2ca6ae20ea8f24b2ce5" translate="yes" xml:space="preserve">
          <source>Draws a filled trigon onto a surface. So the inside of the trigon will be filled with the given color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd561c85e4999d6cd05fffafb86bb044d9895ad" translate="yes" xml:space="preserve">
          <source>Draws a mask onto another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f100dd1a8d8072544a079bfaeda0d438d58ffb" translate="yes" xml:space="preserve">
          <source>Draws a pie onto the surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406f4768efedac45179b46c4719e4f2d6cb46288" translate="yes" xml:space="preserve">
          <source>Draws a polygon on the given surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5a685987800f5a2d40e9ce5b902432d81feb33" translate="yes" xml:space="preserve">
          <source>Draws a rectangle on the given surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681885b6ed612af4206af67774451e49c7ec8075" translate="yes" xml:space="preserve">
          <source>Draws a sequence of contiguous straight antialiased lines on the given surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34a31b382c130ae094216f5f9d2dececbd98b19" translate="yes" xml:space="preserve">
          <source>Draws a sequence of contiguous straight lines on the given surface. There are no endcaps or miter joints. For thick lines the ends are squared off. Drawing thick lines with sharp corners can have undesired looking results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdccb3823baaad43329e23fed203dab14a649b4" translate="yes" xml:space="preserve">
          <source>Draws a single pixel onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b80958adcb40f88c9f0fe331289e35274a99e0" translate="yes" xml:space="preserve">
          <source>Draws a source Surface onto this Surface. The draw can be positioned with the dest argument. Dest can either be pair of coordinates representing the upper left corner of the source. A Rect can also be passed as the destination and the topleft corner of the rectangle will be used as the position for the blit. The size of the destination rectangle does not effect the blit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33486e7d44a00a3489217b7aadf04393d1710ca1" translate="yes" xml:space="preserve">
          <source>Draws a straight antialiased line on the given surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefce3e9dc33fd4cd679af6688ee2c8024564af4" translate="yes" xml:space="preserve">
          <source>Draws a straight horizontal line on a Surface from x1 to x2 for the given y coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7016e5ee1eddbf0361309fbc8ce713f2c9c25769" translate="yes" xml:space="preserve">
          <source>Draws a straight line on a Surface. There are no endcaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8114fae198e4569a401265ecf6346a66cf7ec7d0" translate="yes" xml:space="preserve">
          <source>Draws a straight line on the given surface. There are no endcaps. For thick lines the ends are squared off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d5bf05884a4d5652618c5e337dd2df9a3fa7e7" translate="yes" xml:space="preserve">
          <source>Draws a straight vertical line on a Surface from y1 to y2 on the given x coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629419394899dd67fc179c7a6570b9837bd91ea3" translate="yes" xml:space="preserve">
          <source>Draws a textured polygon onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38a8042fcf4a77a1a41493ec43304b4c12b085e" translate="yes" xml:space="preserve">
          <source>Draws all the Sprites to the surface, the same as &lt;code&gt;Group.draw()&lt;/code&gt;. This method also returns a list of Rectangular areas on the screen that have been changed. The returned changes include areas of the screen that have been affected by previous &lt;code&gt;Group.clear()&lt;/code&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5e3a2ccda80f265c928f63d5cb581c959bf228" translate="yes" xml:space="preserve">
          <source>Draws an arc onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291bb8f294aaf09a14a4b90f08dc16b37396a0ec" translate="yes" xml:space="preserve">
          <source>Draws an ellipse on the given surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1f2386e7856bb6e009fb334a1bdc69a1d2c910" translate="yes" xml:space="preserve">
          <source>Draws an elliptical arc on the given surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6c9b880366a696319d90a34f7337acb497c224" translate="yes" xml:space="preserve">
          <source>Draws anti aliased edges of an ellipse onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6d176048b1ca8e44c58bdf6e3ed4446228fabc" translate="yes" xml:space="preserve">
          <source>Draws many surfaces onto this Surface. It takes a sequence as input, with each of the elements corresponding to the ones of &lt;a href=&quot;#pygame.Surface.blit&quot;&gt;&lt;code&gt;blit()&lt;/code&gt;&lt;/a&gt;. It needs at minimum a sequence of (source, dest).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eedf2a266d295acb2ec57f211a39cf9c61e53b7" translate="yes" xml:space="preserve">
          <source>Draws the anti aliased edges of a polygon onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83e7d418f5115f3f797d423f5c8bfd156524229" translate="yes" xml:space="preserve">
          <source>Draws the anti aliased edges of a trigon onto a surface. A trigon is a triangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee04ee390ac776460c8db05db5d17c4f51a162aa" translate="yes" xml:space="preserve">
          <source>Draws the contained Sprites to the Surface argument. This uses the &lt;code&gt;Sprite.image&lt;/code&gt; attribute for the source surface, and &lt;code&gt;Sprite.rect&lt;/code&gt; for the position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedc64abceb13306064e370e74da93120b2d6b49" translate="yes" xml:space="preserve">
          <source>Draws the edges of a circular shape on the Surface. The pos argument is the center of the circle, and radius is the size. The circle is not filled with color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c65a8f2edea81bee590eb23b6485aeeaea037eb" translate="yes" xml:space="preserve">
          <source>Draws the edges of a polygon onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a15fb999502f61882bc7896d3aade582f2ac5b" translate="yes" xml:space="preserve">
          <source>Draws the edges of a trigon onto a surface. A trigon is a triangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abdb50d2b931e024e1d1391087447f54954fd059" translate="yes" xml:space="preserve">
          <source>Draws the edges of an anti aliased circle onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd39747308edd4e02b91e5ff64d9ef76c63dd90" translate="yes" xml:space="preserve">
          <source>Draws the edges of an ellipse onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849b5f98551736fe10c7f43b3a7fa97f67d47f76" translate="yes" xml:space="preserve">
          <source>Draws the rectangle edges onto the surface. The given Rect is the area of the rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc1e77c84aafa7667bb85929627de1548b13acd" translate="yes" xml:space="preserve">
          <source>Draws this mask on the given surface. Set bits (bits set to 1) and unset bits (bits set to 0) can be drawn onto a surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed786593bd876d876edf59c13a74ad5b48f2e5fe" translate="yes" xml:space="preserve">
          <source>During its lifetime, the PixelArray locks the surface, thus you explicitly have to close() it once its not used any more and the surface should perform operations in the same scope. It is best to use it as a context manager using the with PixelArray(surf) as pixel_array: style. So it works on pypy too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f025a6f9179a91e173d06196e5f30ab1fc0acb" translate="yes" xml:space="preserve">
          <source>EXPERIMENTAL!: This API may change or disappear in later pygame releases. If you use this, your code will very likely break with the next pygame release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb201d37a320e008a58b9498883438d78f8f34ec" translate="yes" xml:space="preserve">
          <source>EXPERIMENTAL!: meaning this API may change, or disappear in later pygame releases. If you use this, your code will break with the next pygame release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe16fdbe72ae49d09fed535a3d3bcd41ca71117c" translate="yes" xml:space="preserve">
          <source>Each Surface contains a clipping area. By default the clip area covers the entire Surface. If it is changed, all drawing operations will only effect the smaller area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b44039f0adae52363a4ddd2b5d18c8455d11ed3" translate="yes" xml:space="preserve">
          <source>Each Surface has an active clipping area. This is a rectangle that represents the only pixels on the Surface that can be modified. If &lt;code&gt;None&lt;/code&gt; is passed for the rectangle the full Surface will be available for changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa7fcd6c0904adff75a1090c782ef7a9bc8fb79" translate="yes" xml:space="preserve">
          <source>Each instance of the Joystick class represents one gaming device plugged into the computer. If a gaming pad has multiple joysticks on it, than the joystick object can actually represent multiple joysticks on that single game device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1407e3faaff861dcad372882b71c332a70a6a383" translate="yes" xml:space="preserve">
          <source>Each sample is an 8-bit or 16-bit integer, depending on the data format. A stereo sound file has two values per sample, while a mono sound file only has one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6a897016df3aab02c701561579919fa1f2bc6f" translate="yes" xml:space="preserve">
          <source>Each sprite argument can also be a iterator containing Sprites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3fa8b5450287943da6fdb4592286230e6c8303" translate="yes" xml:space="preserve">
          <source>Edit on GitHub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f343e283240ee51581770f7a3ff9f28203dd3c04" translate="yes" xml:space="preserve">
          <source>Enable UCS-4 mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c7c2c252c88e2bc162219a3343c11740e1ef12" translate="yes" xml:space="preserve">
          <source>Enables fake rendering of italic text. This is a fake skewing of the font that doesn't look good on many font types. If possible load the font from a real italic font file. While italic the font will have a different width than when normal. This can be mixed with the bold and underline modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24432c2a41bdb7128f045a7a85892830dd33f1d" translate="yes" xml:space="preserve">
          <source>Enables swizzling for all vectors until &lt;code&gt;disable_swizzling()&lt;/code&gt; is called. By default swizzling is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704c94ec86324ac5a23cc2c6cbf3ed3bfee4173f" translate="yes" xml:space="preserve">
          <source>Enables the bold rendering of text. This is a fake stretching of the font that doesn't look good on many font types. If possible load the font from a real bold font file. While bold, the font will have a different width than when normal. This can be mixed with the italic and underline modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abd0981b30c30c159b11b8315a16db74071f9d2" translate="yes" xml:space="preserve">
          <source>Encode a Unicode or bytes object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02eda9d5d9b5be639ad8c298a304eee3e296609c" translate="yes" xml:space="preserve">
          <source>Encode a Unicode or bytes object as a file system path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5a573292227c5a21a70ff27fbf8030b4e7dc88" translate="yes" xml:space="preserve">
          <source>Enhanced pygame module for loading and rendering computer fonts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbcf867462da7bb55af218c4c551c36ae178468" translate="yes" xml:space="preserve">
          <source>Erases (clears) all bits set in &lt;code&gt;othermask&lt;/code&gt; from this mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8308dc61d14b51d7894e8adf61bef7e9c10a8d7a" translate="yes" xml:space="preserve">
          <source>Erases a mask from another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7671f61cadf93ded7b63a56c2669ba74c9b83c62" translate="yes" xml:space="preserve">
          <source>Erases the Sprites used in the last &lt;code&gt;Group.draw()&lt;/code&gt; call. The destination Surface is cleared by filling the drawn Sprite positions with the background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bba0ea05e669b5c965f6b8e08a210a5cbc24d7c" translate="yes" xml:space="preserve">
          <source>Eventlist is a sloppy style of pygame, but is a handy tool for learning about pygame events and input. At the top of the screen are the state of several device values, and a scrolling list of events are displayed on the bottom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c7205cdb0404927d3f22ff0e05bd0cddc7f825" translate="yes" xml:space="preserve">
          <source>Events support equality and inequality comparisons. Two events are equal if they are the same type and have identical attribute values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bcd1551711b9a5dd008f51d05b05cbebc98732" translate="yes" xml:space="preserve">
          <source>Events that come from the system will have a guaranteed set of member attributes based on the type. The following is a list event types with their specific attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6c2ecbadf88935d9575eb2ad5771947e4b6195" translate="yes" xml:space="preserve">
          <source>Every Sprite inside group1 is added to the return dictionary. The value for each item is the list of Sprites in group2 that intersect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72636f41d6542b956c896744e8e16226c291603e" translate="yes" xml:space="preserve">
          <source>Every event type can have a separate timer attached to it. It is best to use the value between &lt;code&gt;pygame.USEREVENT&lt;/code&gt; and &lt;code&gt;pygame.NUMEVENTS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8948c6e512f151c231a13598e13aa15759a170b8" translate="yes" xml:space="preserve">
          <source>Every pixel is stored as a single integer value to represent the red, green, and blue colors. The 8-bit images use a value that looks into a colormap. Pixels with higher depth use a bit packing process to place three or four values into a single number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6610fa17b40e38b328cf539bf63637b48030bc7" translate="yes" xml:space="preserve">
          <source>Example code for draw module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28398feac6e0f66525cca230e8399d35f2f6647c" translate="yes" xml:space="preserve">
          <source>Example code for joystick module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="3b54a8aff3c81a9a9dfa5c787bc8b9df5fd01b25" translate="yes" xml:space="preserve">
          <source>Examples of status byte values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="309063d426f50c390eb0a2f14a40053f52b7ffa1" translate="yes" xml:space="preserve">
          <source>Exchanges the x and y axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febea71a5b41712327b3b22a0c300d81efebb80c" translate="yes" xml:space="preserve">
          <source>Extended in pygame 1.9.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ff22700ac473cb95bd2dcf50428a7f009fcd51" translate="yes" xml:space="preserve">
          <source>Extra DirtySprite attributes with their default values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ca29fc64248f2818345e9b85f668c4f4a0d3b7" translate="yes" xml:space="preserve">
          <source>Extra rendering features available to &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;pygame.freetype.Font&lt;/code&gt;&lt;/a&gt; are direct to surface rendering (see &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;Font.render_to()&lt;/code&gt;&lt;/a&gt;), character kerning (see &lt;a href=&quot;#pygame.freetype.Font.kerning&quot;&gt;&lt;code&gt;Font.kerning&lt;/code&gt;&lt;/a&gt;), vertical layout (see &lt;a href=&quot;#pygame.freetype.Font.vertical&quot;&gt;&lt;code&gt;Font.vertical&lt;/code&gt;&lt;/a&gt;), rotation of rendered text (see &lt;a href=&quot;#pygame.freetype.Font.rotation&quot;&gt;&lt;code&gt;Font.rotation&lt;/code&gt;&lt;/a&gt;), and the strong style (see &lt;a href=&quot;#pygame.freetype.Font.strong&quot;&gt;&lt;code&gt;Font.strong&lt;/code&gt;&lt;/a&gt;). Some properties are configurable, such as strong style strength (see &lt;a href=&quot;#pygame.freetype.Font.strength&quot;&gt;&lt;code&gt;Font.strength&lt;/code&gt;&lt;/a&gt;) and underline positioning (see &lt;a href=&quot;#pygame.freetype.Font.underline_adjustment&quot;&gt;&lt;code&gt;Font.underline_adjustment&lt;/code&gt;&lt;/a&gt;). Text can be positioned by the upper right corner of the text box or by the text baseline (see &lt;a href=&quot;#pygame.freetype.Font.origin&quot;&gt;&lt;code&gt;Font.origin&lt;/code&gt;&lt;/a&gt;). Finally, a font's vertical and horizontal size can be adjusted separately (see &lt;a href=&quot;#pygame.freetype.Font.size&quot;&gt;&lt;code&gt;Font.size&lt;/code&gt;&lt;/a&gt;). The &lt;a href=&quot;examples#pygame.examples.freetype_misc.main&quot;&gt;&lt;code&gt;pygame.examples.freetype_misc&lt;/code&gt;&lt;/a&gt; example shows these features in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96e42a72dd9db4139d3294e54c7a481c25ee2b0" translate="yes" xml:space="preserve">
          <source>Extra support of bitmap fonts is available. Available bitmap sizes can be listed (see &lt;a href=&quot;#pygame.freetype.Font.get_sizes&quot;&gt;&lt;code&gt;Font.get_sizes()&lt;/code&gt;&lt;/a&gt;). For bitmap only fonts &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; can set the size for you (see the &lt;a href=&quot;#pygame.freetype.Font.size&quot;&gt;&lt;code&gt;Font.size&lt;/code&gt;&lt;/a&gt; property).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2618dbf947b31c91670c5acdadd8e18896f5a7a5" translate="yes" xml:space="preserve">
          <source>Extracts a portion of an image. All vertical and horizontal pixels surrounding the given rectangle area are removed. The corner areas (diagonal to the rect) are then brought together. (The original image is not altered by this operation.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b014dcd4abf51e71c21c22b981b210ebb8903e" translate="yes" xml:space="preserve">
          <source>Extracts the passed color by changing all matching pixels to white, while non-matching pixels are changed to black. This returns a new PixelArray with the black/white color mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174c0aa63903f9214702019979b07ea184379a21" translate="yes" xml:space="preserve">
          <source>Extracts the passed color from the PixelArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77150129fdda9ffcb118e6ef88c410586ecb5604" translate="yes" xml:space="preserve">
          <source>Extremely basic testing of the mixer module. Load a sound and play it. All from the command shell, no graphics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c513fad83672eeddfbe23edf8531585626775e44" translate="yes" xml:space="preserve">
          <source>Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat like blend_fill.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd5c924bbd4e3a53b0d70dde99b5497c99d4a2c" translate="yes" xml:space="preserve">
          <source>False if a cdrom is in the drive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284c6569b0db73ccf91e376b4fb49222163740f3" translate="yes" xml:space="preserve">
          <source>False, default. Pixels outside of threshold are changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef5366789e4eb89a9a31f68972f12f318480962" translate="yes" xml:space="preserve">
          <source>Fast events does not appear faster!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241837de1a2f8d9d78a5f73db32a0ff36bb0a226" translate="yes" xml:space="preserve">
          <source>Fill the Surface with a solid color. If no rect argument is given the entire Surface will be filled. The rect argument will limit the fill to a specific area. The fill will also be contained by the Surface clip area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200617e85c01775fbfa508d8b9dd5e4c4965d71a" translate="yes" xml:space="preserve">
          <source>Find all sprites that collide between two groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a004292f65a9c0925de9f104918deb081f1e287" translate="yes" xml:space="preserve">
          <source>Find sprites in a group that intersect another sprite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b42507ad1e816c6f4aa071a85ecbfabf45730c" translate="yes" xml:space="preserve">
          <source>Finds the approximate orientation (from -90 to 90 degrees) of the set bits in the mask. This works best if performed on a mask with only one connected component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e018596401fc128a5f2fe6c1c03caf24718d9ccc" translate="yes" xml:space="preserve">
          <source>Finds the average color of a Surface or a region of a surface specified by a Rect, and returns it as a Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74082d713d5f79aa260e8e576ee76ba24b551e37" translate="yes" xml:space="preserve">
          <source>Finds the centroid (the center mass of the set bits) for this mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7e21bf4217cb4b4f15b2ffaefc3a4f079ed2fe" translate="yes" xml:space="preserve">
          <source>Finds the edges in a surface using the laplacian algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5324ec186986be21b3a831c115fa2457af19b89c" translate="yes" xml:space="preserve">
          <source>Flips all of the bits in the mask. All the set bits are cleared to 0 and all the unset bits are set to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e417cf03257643c632d857830050a633a06c2641" translate="yes" xml:space="preserve">
          <source>Flips all the bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a325fa335f9c3c6f1a36f0145b2b1883aa1d3aa6" translate="yes" xml:space="preserve">
          <source>Font anti-aliasing mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe49cf508fe9507c09694386dcb90a850c9ffa5" translate="yes" xml:space="preserve">
          <source>Font file path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40adc1066cffc228e11910fe214695daa412d93" translate="yes" xml:space="preserve">
          <source>Font objects are mainly used to render text into new Surface objects. The render can emulate bold or italic features, but it is better to load from a font with actual italic or bold glyphs. The rendered text can be regular strings or unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72e82b8ee10963c23a1e01ae80ec6d20d6c6a01" translate="yes" xml:space="preserve">
          <source>Font render to text origin mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59721c918e4456ac00f7c421069015f269826d56" translate="yes" xml:space="preserve">
          <source>Font rendering is not thread safe: only a single thread can render text at any time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f686ba09c6268f0005346164c0a400de73d485cf" translate="yes" xml:space="preserve">
          <source>Font size differs for a non-scalable, bitmap, font. During a method call it must match one of the available sizes returned by method &lt;a href=&quot;#pygame.freetype.Font.get_sizes&quot;&gt;&lt;code&gt;get_sizes()&lt;/code&gt;&lt;/a&gt;. If not, an exception is raised. If the size is a single number, the size is first matched against the point size value. If no match, then the available size with the same nominal width and height is chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f9034c203178bc2a4a07eadcec0bb2514ace71" translate="yes" xml:space="preserve">
          <source>Font vertical mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3872ec685485a0a713e93f2fc5264dc71dcab740" translate="yes" xml:space="preserve">
          <source>For &lt;strong&gt;Windows&lt;/strong&gt; platforms, these additional types are supported automatically and resolve to their internal definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b253f2ca2688cf8b83f103e59627126e19d7c82" translate="yes" xml:space="preserve">
          <source>For &lt;strong&gt;X11&lt;/strong&gt; platforms, these additional types are supported automatically and resolve to their internal definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5386fde8f3b6f255177443526a75bca6d005df" translate="yes" xml:space="preserve">
          <source>For PixelArray assignment, if the right hand side array has a row length of 1, then the column is broadcast over the target array's rows. An array of height 1 is broadcast over the target's columns, and is equivalent to assigning a 1D PixelArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1e34fec23ffb319e4edda49521f35c3e360396" translate="yes" xml:space="preserve">
          <source>For a quick way to initialise the joystick module and get a list of Joystick instances use the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ca6f99ea6ffc283d470071b3770110a07631e6" translate="yes" xml:space="preserve">
          <source>For a scalable font, a single number value is equivalent to a tuple with width equal height. A font can be stretched vertically with height set greater than width, or horizontally with width set greater than height. For embedded bitmaps, as listed by &lt;a href=&quot;#pygame.freetype.Font.get_sizes&quot;&gt;&lt;code&gt;get_sizes()&lt;/code&gt;&lt;/a&gt;, use the nominal width and height to select an available size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02127bf9d4c96735939ec87e1460ba697d392df" translate="yes" xml:space="preserve">
          <source>For a surface with colorkey or blanket alpha, a blit to self may give slightly different colors than a non self-blit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d527fa30e4c486e8c929f3782b2a0e93aab283" translate="yes" xml:space="preserve">
          <source>For all functions the arguments are strictly positional. Only integers are accepted for coordinates and radii.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d42b36cef311f9ceef3487554cd4bad1009c40b" translate="yes" xml:space="preserve">
          <source>For alpha transparency, like in .png images, use the &lt;code&gt;convert_alpha()&lt;/code&gt; method after loading so that the image has per pixel transparency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8f1c6650fda3e91cf015a896149978536c336f" translate="yes" xml:space="preserve">
          <source>For an aapolygon, use &lt;a href=&quot;#pygame.draw.aalines&quot;&gt;&lt;code&gt;aalines()&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;closed=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98517400e8b59a2ca78e6f3712842c8f6e2b45df" translate="yes" xml:space="preserve">
          <source>For an example of how the scrap module works refer to the examples page (&lt;a href=&quot;examples#pygame.examples.scrap_clipboard.main&quot;&gt;&lt;code&gt;pygame.examples.scrap_clipboard.main()&lt;/code&gt;&lt;/a&gt;) or the code directly in GitHub (&lt;a href=&quot;https://github.com/pygame/pygame/blob/master/examples/scrap_clipboard.py&quot;&gt;pygame/examples/scrap_clipboard.py&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23c8c0985ac0bace5c87ffd0bf6421d81265fc1" translate="yes" xml:space="preserve">
          <source>For assignment, a tuple can only be a color. Any other sequence type is a sequence of colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68506a4f28818125e753515ab2ef8991ae2be6fb" translate="yes" xml:space="preserve">
          <source>For each frame of your game, you will need to make some sort of call to the event queue. This ensures your program can internally interact with the rest of the operating system. If you are not using other event functions in your game, you should call &lt;code&gt;pygame.event.pump()&lt;/code&gt; to allow pygame to handle internal actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ee693da84e8b8c88064357aebc995915afef9f5" translate="yes" xml:space="preserve">
          <source>For even &lt;code&gt;width&lt;/code&gt; values, the thickness of each line grows with the original line being offset from the center (as there is no exact center line drawn). As a result, lines with a slope &amp;lt; 1 (horizontal-ish) will have 1 more pixel of thickness below the original line (in the y direction). Lines with a slope &amp;gt;= 1 (vertical-ish) will have 1 more pixel of thickness to the right of the original line (in the x direction).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936edcb2985d6288fde888e72eb6619d99c4a173" translate="yes" xml:space="preserve">
          <source>For example, some predefined event identifiers are &lt;code&gt;QUIT&lt;/code&gt; and &lt;code&gt;MOUSEMOTION&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3827f1d20338ee67a8a62e50e3cb7f2c938416de" translate="yes" xml:space="preserve">
          <source>For example, the attributes of a &lt;code&gt;KEYDOWN&lt;/code&gt; event would be &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, and &lt;code&gt;mod&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01f3d5dbb1fcdad4df8c7c18b86fc479abc2de0" translate="yes" xml:space="preserve">
          <source>For functions like rectangle that accept a rect argument any (x, y, w, h) sequence is accepted, though &lt;a href=&quot;rect#pygame.Rect&quot;&gt;&lt;code&gt;pygame.Rect&lt;/code&gt;&lt;/a&gt; instances are preferred. Note that for a &lt;a href=&quot;rect#pygame.Rect&quot;&gt;&lt;code&gt;pygame.Rect&lt;/code&gt;&lt;/a&gt; the drawing will not include &lt;code&gt;Rect.bottomright&lt;/code&gt;. The right and bottom attributes of a Rect lie one pixel outside of the Rect's boarder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3950a7414aee5f870104f64ce0f31f80d4c16a9" translate="yes" xml:space="preserve">
          <source>For now buffer and array support is consistent with &lt;code&gt;sndarray.make_sound&lt;/code&gt; for Numeric arrays, in that sample sign and byte order are ignored. This will change, either by correctly handling sign and byte order, or by raising an exception when different. Also, source samples are truncated to fit the audio sample size. This will not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4ea974b0499a410305510e98bcfe6a1027aaae" translate="yes" xml:space="preserve">
          <source>For now undefined character codes are replaced with the &lt;code&gt;.notdef&lt;/code&gt; (not defined) character. How undefined codes are handled may become configurable in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe41364b40441d2bb7395a695caaf045ddbcc3b" translate="yes" xml:space="preserve">
          <source>For odd &lt;code&gt;width&lt;/code&gt; values, the thickness of each line grows with the original line being in the center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8d825a554f806aad6493895f31e65cb0d2a474" translate="yes" xml:space="preserve">
          <source>For pygame development the test suite can be run from a pygame distribution root directory. Program &lt;code&gt;run_tests.py&lt;/code&gt; is provided for convenience, though test/go.py can be run directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f55b9f40f1606ebc31d28877bb67ccdb6bc02e" translate="yes" xml:space="preserve">
          <source>For the 'R', 'G', 'B', and 'A' copy kinds a single color component of the unmapped surface pixels are copied to the target 2D array. For kind 'A' and surfaces with source alpha (the surface was created with the SRCALPHA flag), has a colorkey (set with &lt;a href=&quot;surface#pygame.Surface.set_colorkey&quot;&gt;&lt;code&gt;Surface.set_colorkey()&lt;/code&gt;&lt;/a&gt;), or has a blanket alpha (set with &lt;a href=&quot;surface#pygame.Surface.set_alpha&quot;&gt;&lt;code&gt;Surface.set_alpha()&lt;/code&gt;&lt;/a&gt;) then the alpha values are those expected for a SDL surface. If a surface has no explicit alpha value, then the target array is filled with the value of the optional &lt;code&gt;opaque&lt;/code&gt; surface_to_array argument (default 255: not transparent).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e1d7ee528af7446a992334e8d32049c23aea4a" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;#pygame.mixer.music.set_pos&quot;&gt;&lt;code&gt;set_pos()&lt;/code&gt;&lt;/a&gt; calls underlining SDL_mixer function &lt;code&gt;Mix_SetMusicPosition&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4300089bced3789c305a2355b3626e65999ccd23" translate="yes" xml:space="preserve">
          <source>Functions to convert between NumPy arrays and Sound objects. This module will only be available when pygame can use the external NumPy package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2804bda5460c5d6d00830e29ff6355591fee9fb6" translate="yes" xml:space="preserve">
          <source>Functions to convert pixel data between pygame Surfaces and arrays. This module will only be functional when pygame can use the external NumPy package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf44cc265ccf9b8eba72aed1de0d263511c4ca98" translate="yes" xml:space="preserve">
          <source>Get a reference to the currently set display surface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2aa7d8abd8020abc69ced38ff388bf47ae6785b" translate="yes" xml:space="preserve">
          <source>Get information about the current windowing system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896b25c286ef08309eb253ddaa6b041d91c73aad" translate="yes" xml:space="preserve">
          <source>Get list of available fullscreen modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aa495ee6efdef95ef9cd711fc3b91c29b25f4e" translate="yes" xml:space="preserve">
          <source>Get or set the default size for text metrics and rendering. It can be a single point size, given as an Python &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt;, or a font ppem (width, height) &lt;code&gt;tuple&lt;/code&gt;. Size values are non-negative. A zero size or width represents an undefined size. In this case the size must be given as a method argument, or an exception is raised. A zero width but non-zero height is a ValueError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0243b22eef1517cf01a6452c652cb1f9cc773ca7" translate="yes" xml:space="preserve">
          <source>Get the current transparent colorkey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54710612590c30bfcc69560165743fbe6eef851" translate="yes" xml:space="preserve">
          <source>Get the current visibility state of the mouse cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e5ab4a73b960ea629f7b4777a175e33449dac5" translate="yes" xml:space="preserve">
          <source>Get the current window caption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeabc76d9cd51e5d14c83d0a4f3a602a3d6a185a" translate="yes" xml:space="preserve">
          <source>Get the descriptive name of the button from a keyboard button id constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b336b0d2cfe2e5b964f552fcf5315e872955f574" translate="yes" xml:space="preserve">
          <source>Get the filename of the default font</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d01a223d64c0401d07d00d3f939535da97054d" translate="yes" xml:space="preserve">
          <source>Get the information about the mouse system cursor. The return value is the same data as the arguments passed into &lt;code&gt;pygame.mouse.set_cursor()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b0032df926b45cf6ca2971b64391e87caf5f76" translate="yes" xml:space="preserve">
          <source>Get the name of the pygame display backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089dc0e3bb008c6af72a328cd13c70ac16973c17" translate="yes" xml:space="preserve">
          <source>Get the offset position of a child subsurface inside of a parent. If the Surface is not a subsurface this will return (0, 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d456ad65e50449abcc6a5586a94c0483bd7d870e" translate="yes" xml:space="preserve">
          <source>Get the offset position of a child subsurface inside of its top level parent Surface. If the Surface is not a subsurface this will return (0, 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8600b3bf7c2d5ce6db603ee93587c3a000d0d9" translate="yes" xml:space="preserve">
          <source>Get the value for an OpenGL flag for the current display</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5427ff12a0001d6ef580c5ea17c550f34a0c9244" translate="yes" xml:space="preserve">
          <source>Gets a list of data type string identifiers for the data currently available on the clipboard. Each identifier can be used in the &lt;a href=&quot;#pygame.scrap.get&quot;&gt;&lt;code&gt;pygame.scrap.get()&lt;/code&gt;&lt;/a&gt; method to get the clipboard content of the specific type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2529a55dd7e1e4c08d7d470a63cdaf7f7a51a919" translate="yes" xml:space="preserve">
          <source>Gets a list of the available clipboard types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b112b9d55b537ce9e755239c873fe859da2f0df" translate="yes" xml:space="preserve">
          <source>Gets an image from a camera as a string in the native pixelformat of the camera. Useful for integration with other libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105ad60ef560b0d48c9fa7bca6a03110d22c6de9" translate="yes" xml:space="preserve">
          <source>Gets or sets a factor which, when positive, is multiplied with the font's underline offset to adjust the underline position. A negative value turns an underline into a strike-through or overline. It is multiplied with the ascender. Accepted values range between -2.0 and 2.0 inclusive. A value of 0.5 closely matches Tango underlining. A value of 1.0 mimics &lt;a href=&quot;font#pygame.font.Font&quot;&gt;&lt;code&gt;pygame.font.Font&lt;/code&gt;&lt;/a&gt; underlining.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714ff9284e9d271af0364406465bc8712becfba7" translate="yes" xml:space="preserve">
          <source>Gets or sets the CMY representation of the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb9c1b55eb6ea8f065bb7dcf318c2d2e4b96175" translate="yes" xml:space="preserve">
          <source>Gets or sets the HSLA representation of the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4535bc71812615a00df1091572b45aa06c35af" translate="yes" xml:space="preserve">
          <source>Gets or sets the HSVA representation of the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84122baab763ee0d5cf5ac538e4c279179d36387" translate="yes" xml:space="preserve">
          <source>Gets or sets the I1I2I3 representation of the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212b3007eee3e25dafbb682f6107d4e6c195b3a8" translate="yes" xml:space="preserve">
          <source>Gets or sets the alpha value of the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891322a06f6191b93cc9e93f99a3dce20d000c49" translate="yes" xml:space="preserve">
          <source>Gets or sets the baseline angle of the rendered text. The angle is represented as integer degrees. The default angle is 0, with horizontal text rendered along the X-axis, and vertical text along the Y-axis. A positive value rotates these axes counterclockwise that many degrees. A negative angle corresponds to a clockwise rotation. The rotation value is normalized to a value within the range 0 to 359 inclusive (eg. 390 -&amp;gt; 390 - 360 -&amp;gt; 30, -45 -&amp;gt; 360 + -45 -&amp;gt; 315, 720 -&amp;gt; 720 - (2 * 360) -&amp;gt; 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2daea383aae54a67064f8cecf41914583c07f8" translate="yes" xml:space="preserve">
          <source>Gets or sets the blue value of the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9ce59b9ca55fcd55247c37a243b42fb46f20ea" translate="yes" xml:space="preserve">
          <source>Gets or sets the decoding of Unicode text. By default, the freetype module performs UTF-16 surrogate pair decoding on Unicode text. This allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and 0x10FFFF to represent their corresponding UTF-32 code points on Python interpreters built with a UCS-2 Unicode type (on Windows, for instance). It also means character values within the UTF-16 surrogate area (0xD800 to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate pair will raise a UnicodeEncodeError. Setting ucs4 &lt;code&gt;True&lt;/code&gt; turns surrogate pair decoding off, allowing access the full UCS-4 character range to a Python interpreter built with four-byte Unicode character support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7582830597e652ec0d1af3fc6053a0725e48ffc9" translate="yes" xml:space="preserve">
          <source>Gets or sets the default glyph rendering color. It is initially opaque black ― (0, 0, 0, 255). Applies to &lt;a href=&quot;#pygame.freetype.Font.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f6b21b87ebf3b3d66eeef4275671a4a4613760" translate="yes" xml:space="preserve">
          <source>Gets or sets the default style of the Font. This default style will be used for all text rendering and size calculations unless overridden specifically a render or &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt; call. The style value may be a bit-wise OR of one or more of the following constants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662a53efe21c45d18a5cd900734b410691549426" translate="yes" xml:space="preserve">
          <source>Gets or sets the font's anti-aliasing mode. This defaults to &lt;code&gt;True&lt;/code&gt; on all fonts, which are rendered with full 8 bit blending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9e40f25e7921d62e25a71004ef895708f91bc2" translate="yes" xml:space="preserve">
          <source>Gets or sets the font's kerning mode. This defaults to &lt;code&gt;False&lt;/code&gt; on all fonts, which will be rendered without kerning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61a47767004e449a07a34557f9b002b8d0d1012" translate="yes" xml:space="preserve">
          <source>Gets or sets the green value of the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057506f15edd2b8188cc589eab5f9cf7a9f89765" translate="yes" xml:space="preserve">
          <source>Gets or sets the red value of the Color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b039e77107c8f3f051ec8abdb885830d19e41396" translate="yes" xml:space="preserve">
          <source>Gets or sets whether the characters are laid out vertically rather than horizontally. May be useful when rendering Kanji or some other vertical script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0396e9f74d0de8c80db34166dba876406bbc6806" translate="yes" xml:space="preserve">
          <source>Gets or sets whether the font will be bold when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt; call, via the 'style' parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3193cb859add54a5985f7f218962aaeba6e4f22" translate="yes" xml:space="preserve">
          <source>Gets or sets whether the font will be rendered as oblique. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt; call, via the &lt;em&gt;style&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a329d126b01b9892cbc4c6223cffdbe6a7c78286" translate="yes" xml:space="preserve">
          <source>Gets or sets whether the font will be stretched horizontally when drawing text. It produces a result similar to &lt;a href=&quot;font#pygame.font.Font&quot;&gt;&lt;code&gt;pygame.font.Font&lt;/code&gt;&lt;/a&gt;'s bold. This style not available for rotated text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6924224dea456a05b1f6a789608f99fb7f1364" translate="yes" xml:space="preserve">
          <source>Gets or sets whether the font will be underlined when drawing text. This default style value will be used for all text rendering and size calculations unless overridden specifically in a render or &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt; call, via the 'style' parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f50770cbab21f8979a39bfd99cb96c5ba6459d1" translate="yes" xml:space="preserve">
          <source>Gets the Surface the PixelArray uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088fa7396b4e4347c9b4b232fcc533c7b059b8d5" translate="yes" xml:space="preserve">
          <source>Gets the array system types currently supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e48a7c784fd2423b74dfd8e98411fce2bcec1a6" translate="yes" xml:space="preserve">
          <source>Gets the bit at the given position</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6286063eb526c9424dcc6aab8183ca66013ea75" translate="yes" xml:space="preserve">
          <source>Gets the currently active array type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50aef3f05999d7d351e5ab68221359d05722fe33" translate="yes" xml:space="preserve">
          <source>Gets the data for the specified type from the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26fd8a05e2cad28af0c9784a3b8ba4ca1b37abd" translate="yes" xml:space="preserve">
          <source>Gets the device info for a given id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97bb634c45c4a5f7662bc9678a1e0900b1595e7" translate="yes" xml:space="preserve">
          <source>Gets the final dimensions and origin, in pixels, of &lt;em&gt;text&lt;/em&gt; using the optional &lt;em&gt;size&lt;/em&gt; in points, &lt;em&gt;style&lt;/em&gt;, and &lt;em&gt;rotation&lt;/em&gt;. For other relevant render properties, and for any optional argument not given, the default values set for the &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; instance are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2c3d8bd6003ce1c4fc653093ce8fe01993bdf7" translate="yes" xml:space="preserve">
          <source>Gets the initialization state of the &lt;a href=&quot;#module-pygame.midi&quot;&gt;&lt;code&gt;pygame.midi&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3479695bd66b886a8f372cce696b85ec014f2d" translate="yes" xml:space="preserve">
          <source>Gets the locks for the Surface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da8cb8df883df645f4cce9dfc552906100a082d" translate="yes" xml:space="preserve">
          <source>Gets the scrap module's initialization state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8902f92815d860a697e4990c70c8aa419cee8e" translate="yes" xml:space="preserve">
          <source>Gets whether the font is fixed-width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8301b868d7bde4f3905d750db80f6e09bc3259" translate="yes" xml:space="preserve">
          <source>Gets whether the font is scalable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8231ccfa0fae8c79c9a55aab5b20c8d3d29a15e" translate="yes" xml:space="preserve">
          <source>Getting and setting pixels one at a time is generally too slow to be used in a game or realtime situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64cc74d23be13677818850300cd31393395ffec" translate="yes" xml:space="preserve">
          <source>Getting and setting pixels one at a time is generally too slow to be used in a game or realtime situation. It is better to use methods which operate on many pixels at a time like with the blit, fill and draw methods - or by using &lt;a href=&quot;surfarray#module-pygame.surfarray&quot;&gt;&lt;code&gt;pygame.surfarray&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;pixelarray#pygame.PixelArray&quot;&gt;&lt;code&gt;pygame.PixelArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e681ac707b8ab5f65f06859428c27e5d069cf3" translate="yes" xml:space="preserve">
          <source>Getting the list of pushed buttons with this function is not the proper way to handle text entry from the user. You have no way to know the order of keys pressed, and rapidly pushed keys can be completely unnoticed between two calls to &lt;code&gt;pygame.key.get_pressed()&lt;/code&gt;. There is also no way to translate these pushed keys into a fully translated character value. See the &lt;code&gt;pygame.KEYDOWN&lt;/code&gt; events on the event queue for this functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2baf3e96d6ccd0d1f1a8a21b2f19f8075f48cdf" translate="yes" xml:space="preserve">
          <source>Group container that holds a single sprite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8341cf75c3efe2f48bec57da1ecc5e9e668dea" translate="yes" xml:space="preserve">
          <source>Group sub-class that tracks dirty updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff45ca8fbf34715b385a6eb5329d264ee79ac37" translate="yes" xml:space="preserve">
          <source>Here is a more complete list of flags. A full list can be found in &lt;code&gt;SDL_video.h&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4269519de116ab8e4c80c7633047306f71590a" translate="yes" xml:space="preserve">
          <source>Here is an example callback that will clear the Sprites with solid red:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c7bbbaa42859f2aa6ddc567597c789dabfba2a" translate="yes" xml:space="preserve">
          <source>How to use pygame with no windowing system, like on headless servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b02556a0e4c7faf9d0e44aae6c719e0483f41f" translate="yes" xml:space="preserve">
          <source>However, &lt;a href=&quot;pygame#pygame.init&quot;&gt;&lt;code&gt;pygame.init()&lt;/code&gt;&lt;/a&gt; will automatically call this function if the &lt;code&gt;freetype&lt;/code&gt; module is already imported. It is safe to call this function more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b706002a3abbaa2bf2c13d27a81a30e3a243f3f6" translate="yes" xml:space="preserve">
          <source>However, only a pixel's integer value is returned. So, to compare a pixel to a particular color the color needs to be first mapped using the &lt;a href=&quot;surface#pygame.Surface.map_rgb&quot;&gt;&lt;code&gt;Surface.map_rgb()&lt;/code&gt;&lt;/a&gt; method of the Surface object for which the PixelArray was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7aad51aed3bb889e49accd134b9ce78664a4f42" translate="yes" xml:space="preserve">
          <source>However... on my Debian Duron 850 machine fastevents is faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c87507a26f506cc78a2d0399a04f050dd7a57aa" translate="yes" xml:space="preserve">
          <source>Iconify the display surface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b69a08edf7b85a27b4493618c97f6ca12ea8fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Channel.stop()&lt;/code&gt; or &lt;code&gt;Channel.play()&lt;/code&gt; is called while the sound was still playing, the event will be posted immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef95333d7ab25f774d222eeaca9eaf98fcb90799" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;None&lt;/code&gt; is passed as the argument, ALL of the event types are allowed to be placed on the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc4b9cda35913a48aa92724720815dda1d8d15f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;None&lt;/code&gt; is passed as the argument, ALL of the event types are blocked from being placed on the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c63b40086068404a4967253c759876efb194473" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;headless_no_windows_needed.py&lt;/code&gt; is run as a program it takes the following command line arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d194a6938811c57e4534eb017ed254d7e1a6117" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;latency&lt;/code&gt; is zero, timestamps are ignored and all output is delivered immediately. If &lt;code&gt;latency&lt;/code&gt; is greater than zero, output is delayed until the message timestamp plus the &lt;code&gt;latency&lt;/code&gt;. In some cases, PortMidi can obtain better timing than your application by passing timestamps along to the device driver or hardware. Latency may also help you to synchronize midi data to audio data by matching midi latency to the audio buffer latency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fef2354330c467e252b0859e853f4f8700e491" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pump&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; (the default), then &lt;a href=&quot;#pygame.event.pump&quot;&gt;&lt;code&gt;pygame.event.pump()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11115b7aa0d234c0e2d0a4ac484d270d8c1f27f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;scaletest.py&lt;/code&gt; is run as a program then the command line options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f30241eade0ccb443bb524f365b6b0924e13635" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;text&lt;/em&gt; is a char (byte) string, its encoding is assumed to be &lt;code&gt;LATIN1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fd027f7c126d45d0549afd710a90b5ef084e2d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;text&lt;/em&gt; is a char (byte) string, then its encoding is assumed to be &lt;code&gt;LATIN1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67cb726a891ffff0488816f2a9dbb6df821e473" translate="yes" xml:space="preserve">
          <source>If a Rect has a nonzero width or height, it will return True for a nonzero test. Some methods return a Rect with 0 size to represent an invalid rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10fd2933de38766ffe532800df9ec085018fd4d" translate="yes" xml:space="preserve">
          <source>If a Sound is already queued on this channel it will be returned. Once the queued sound begins playback it will no longer be on the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3548a1dccea4e09cf648e3dbbf10f6b5632fb3" translate="yes" xml:space="preserve">
          <source>If a background color &lt;em&gt;bgcolor&lt;/em&gt; is given, the text bounding box is first filled with that color. The text is blitted next. Both the background fill and text rendering involve full alpha blits. That is, the alpha values of the foreground, background, and destination target surface all affect the blit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c534cd6940277c78d8d8887858073808dc4b70" translate="yes" xml:space="preserve">
          <source>If a color-key is not used, then the alpha value of each pixel is used to decide which bits in the resulting mask are set. All the pixels that have an alpha value &lt;strong&gt;greater than&lt;/strong&gt; the &lt;code&gt;threshold&lt;/code&gt; parameter are &lt;strong&gt;set&lt;/strong&gt; and the pixels with an alpha value less than or equal to the &lt;code&gt;threshold&lt;/code&gt; are not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685e7da102fd122d3536f19645151d930333e583" translate="yes" xml:space="preserve">
          <source>If a mask subclass needs to copy any instance specific attributes then it should override the &lt;code&gt;__copy__()&lt;/code&gt; method. The overridden &lt;code&gt;__copy__()&lt;/code&gt; method needs to call &lt;code&gt;super().__copy__()&lt;/code&gt; and then copy the required data as in the following example code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e23c07f1e3483a40e734c8672d495b90bdbcff2" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;outputmask&lt;/code&gt; is specified, the output is drawn onto it and it is returned. Otherwise a mask of size &lt;code&gt;(MAX(0, width + othermask's
width - 1), MAX(0, height + othermask's height - 1))&lt;/code&gt; is created and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601680ccb645ca1dbd9bbd0fb47107db80f82ac0" translate="yes" xml:space="preserve">
          <source>If an empty string is passed for text then the returned &lt;a href=&quot;rect#pygame.Rect&quot;&gt;&lt;code&gt;Rect&lt;/code&gt;&lt;/a&gt; is zero width and the height of the font. The rect will test False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7646b50f1924b96bffe6c1b0c86f8c2723f6cc90" translate="yes" xml:space="preserve">
          <source>If an empty string is passed for text then the returned Rect is zero width and the height of the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b135f0f888c0313077b30116f88fae456ac750" translate="yes" xml:space="preserve">
          <source>If an image is ready to get, it returns true. Otherwise it returns false. Note that some webcams will always return False and will only queue a frame when called with a blocking function like &lt;code&gt;get_image()&lt;/code&gt;. This is useful to separate the framerate of the game from that of the camera without having to use threading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674940857cd1964d8ef639ab88037578ffb2db16" translate="yes" xml:space="preserve">
          <source>If depth is 0, &lt;code&gt;SDL&lt;/code&gt; will choose the current/best color depth for the display. The flags defaults to &lt;code&gt;pygame.FULLSCREEN&lt;/code&gt;, but you may need to add additional flags for specific fullscreen modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e354242d1de2ba75fea25e118821efd606e70d4c" translate="yes" xml:space="preserve">
          <source>If either dokill argument is True, the colliding Sprites will be removed from their respective Group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26df5264e29f8df9f71c3f21cffc59d48c55266e" translate="yes" xml:space="preserve">
          <source>If no argument is passed in, the Overlay will simply be redrawn with the current data. This can be useful when the Overlay is not really hardware accelerated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b562a28c481e8e41cda62ec997fe79fd8714e3" translate="yes" xml:space="preserve">
          <source>If no arguments are passed the new Surface will have the same pixel format as the display Surface. This is always the fastest format for blitting. It is a good idea to convert all Surfaces before they are blitted many times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b27faaba2cfb6c11afafc57927c357525908342" translate="yes" xml:space="preserve">
          <source>If no size is passed or is set to (0, 0) and pygame uses &lt;code&gt;SDL&lt;/code&gt; version 1.2.10 or above, the created Surface will have the same size as the current screen resolution. If only the width or height are set to 0, the Surface will have the same width or height as the screen resolution. Using a &lt;code&gt;SDL&lt;/code&gt; version prior to 1.2.10 will raise an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39524946a06ad6ee3718985adbffec6920404fd4" translate="yes" xml:space="preserve">
          <source>If no value is given, the pitch bend is returned to &quot;no change&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5921a8b8858835c5dbf7d26f01df66c00ccd69f6" translate="yes" xml:space="preserve">
          <source>If one argument is passed, it will be the volume of both speakers. If two arguments are passed and the mixer is in stereo mode, the first argument will be the volume of the left speaker and the second will be the volume of the right speaker. (If the second argument is &lt;code&gt;None&lt;/code&gt;, the first argument will be the volume of both speakers.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e4cbd5d943c1e78fbc18a8293efcfb5103b8eb" translate="yes" xml:space="preserve">
          <source>If provided, use the audio file 'file_path', otherwise use a default file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540c5e1d7ec47d9531cb79316e4837cc750150c0" translate="yes" xml:space="preserve">
          <source>If pygame is built with extended image formats this function will return True. It is still not possible to determine which formats will be available, but generally you will be able to load them all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9835b3049812a924e27cab0b419ac5c57c34f8" translate="yes" xml:space="preserve">
          <source>If run as a program &lt;code&gt;overlay.py&lt;/code&gt; takes the file name as a command line argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4782f63049c11f1e267a4e2fd70c16dd4695a6a0" translate="yes" xml:space="preserve">
          <source>If run as a program then &lt;code&gt;mask.py&lt;/code&gt; takes one or more image files as command line arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48df8a324cb5ba649b3688228f335d035cead6ce" translate="yes" xml:space="preserve">
          <source>If run as a stand-alone program then no command line arguments are taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6806fa455ee3cf62325e4f0acb2af2ad7cacf769" translate="yes" xml:space="preserve">
          <source>If set &lt;code&gt;True&lt;/code&gt;, &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pygame.freetype.Font.render_raw_to&quot;&gt;&lt;code&gt;render_raw_to()&lt;/code&gt;&lt;/a&gt; will take the &lt;em&gt;dest&lt;/em&gt; position to be that of the text origin, as opposed to the top-left corner of the bounding box. See &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c1a2c3304204e92b870f8e219f9ff2d0edfd40" translate="yes" xml:space="preserve">
          <source>If set &lt;code&gt;True&lt;/code&gt;, then the text boundary rectangle will be inflated to match that of &lt;a href=&quot;font#pygame.font.Font&quot;&gt;&lt;code&gt;font.Font&lt;/code&gt;&lt;/a&gt;. Otherwise, the boundary rectangle is just large enough for the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0c1d84bfd7d09fb2fe2a4afe88ab6f52a1610e" translate="yes" xml:space="preserve">
          <source>If text is a char (byte) string, then its encoding is assumed to be &lt;code&gt;LATIN1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5ce266bd3391293e868f9010d9235740af5102" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;pos&lt;/code&gt; parameter is provided then the mask returned will have the connected component that contains this position. An empty mask will be returned if the &lt;code&gt;pos&lt;/code&gt; parameter selects an unset bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d8f22fc50c072cc8ec98e38c900c2f251ab0ba" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;sprite(s)&lt;/code&gt; have an attribute layer then that is used for the layer. If **kwargs contains 'layer' then the &lt;code&gt;sprite(s)&lt;/code&gt; will be added to that argument (overriding the sprite layer attribute). If neither is passed then the &lt;code&gt;sprite(s)&lt;/code&gt; will be added to the default layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc67dc20b1992a5feaed28911b409559f3182d1" translate="yes" xml:space="preserve">
          <source>If the bool argument is true, the mouse cursor will be visible. This will return the previous visible state of the cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbc9cc06dd3ac77135f66d23f9d8e8672db9d45" translate="yes" xml:space="preserve">
          <source>If the camera supports it, get_controls will return the current settings for horizontal and vertical image flip as bools and brightness as an int. If unsupported, it will return the default values of (0, 0, 0). Note that the return values here may be different than those returned by set_controls, though these are more likely to be correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b5ab818402bc09a2f1b6ef9272fa993f971206" translate="yes" xml:space="preserve">
          <source>If the channel is playing a Sound on which &lt;code&gt;set_volume()&lt;/code&gt; has also been called, both calls are taken into account. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8422d069e56e25d13cf621c0986dc9406d3dd76" translate="yes" xml:space="preserve">
          <source>If the display has a window title, this function will change the name on the window. Some systems support an alternate shorter title to be used for minimized displays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a6a05754025cb7ebfa43ffa8719f682e237db1" translate="yes" xml:space="preserve">
          <source>If the event queue is full a &lt;a href=&quot;pygame#pygame.error&quot;&gt;&lt;code&gt;pygame.error&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fde297f7f1d1e8de86d30c49e80918f7ae557d0" translate="yes" xml:space="preserve">
          <source>If the font file has more than one font, the font to load can be chosen with the &lt;em&gt;index&lt;/em&gt; argument. An exception is raised for an out-of-range font index value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159615cb4172acf39d27164bdb7d13ed799ba37c" translate="yes" xml:space="preserve">
          <source>If the mixer has reserved channels from &lt;code&gt;pygame.mixer.set_reserved()&lt;/code&gt; then those channels will not be returned here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c5615335c659cf3a641b2ba0220d6f0a6cd1d9" translate="yes" xml:space="preserve">
          <source>If the mixer is initialized, this returns the playback arguments it is using. If the mixer has not been initialized this returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f65be1f407ffc0c0fbed69ef462f2139ea3772" translate="yes" xml:space="preserve">
          <source>If the mouse cursor is hidden, and input is grabbed to the current display the mouse will enter a virtual input mode, where the relative movements of the mouse will never be stopped by the borders of the screen. See the functions &lt;code&gt;pygame.mouse.set_visible()&lt;/code&gt; and &lt;code&gt;pygame.event.set_grab()&lt;/code&gt; to get this configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf23479e923272374d2108bfa13d661d8546f98" translate="yes" xml:space="preserve">
          <source>If the once argument is True, then only send the timer once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21319b8702fdd55e57c99bc4ffc6f61fbe6b8a00" translate="yes" xml:space="preserve">
          <source>If the optional 'search_surf' surface is given, it is used to threshold against rather than the specified 'set_color'. That is, it will find each pixel in the 'surf' that is within the 'threshold' of the pixel at the same coordinates of the 'search_surf'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1482ad0820d5aa8ab75e4dcb32dacf742b0859e" translate="yes" xml:space="preserve">
          <source>If the optional &lt;code&gt;othersurface&lt;/code&gt; is not used, all the pixels &lt;strong&gt;within&lt;/strong&gt; the &lt;code&gt;threshold&lt;/code&gt; of the &lt;code&gt;color&lt;/code&gt; parameter are &lt;strong&gt;set&lt;/strong&gt; in the resulting mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e53fc358da6e22295468d58c4a7ba6f3a33cee" translate="yes" xml:space="preserve">
          <source>If the optional &lt;code&gt;othersurface&lt;/code&gt; is used, every pixel in the first surface that is &lt;strong&gt;within&lt;/strong&gt; the &lt;code&gt;threshold&lt;/code&gt; of the corresponding pixel in &lt;code&gt;othersurface&lt;/code&gt; is &lt;strong&gt;set&lt;/strong&gt; in the resulting mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b17eb4c6898ddf1f614d16a7ddd4b5fc92811e" translate="yes" xml:space="preserve">
          <source>If the sprite collides with any single sprite in the group, a single sprite from the group is returned. On no collision None is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b291154e039918053dd98370edb2131aaf7d70" translate="yes" xml:space="preserve">
          <source>If the sprite is not found then it will return the default layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7a30ee8c6375bab0c6102fc57c38030f658207" translate="yes" xml:space="preserve">
          <source>If the sprite you add has an attribute layer then that layer will be used. If the **kwarg contains 'layer' then the sprites passed will be added to that layer (overriding the &lt;code&gt;sprite.layer&lt;/code&gt; attribute). If neither sprite has attribute layer nor **kwarg then the default layer is used to add the sprites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81811fb9ddb4f2dde78f049f937064be1ff57a2d" translate="yes" xml:space="preserve">
          <source>If the surface uses a color-key, then it is used to decide which bits in the resulting mask are set. All the pixels that are &lt;strong&gt;not&lt;/strong&gt; equal to the color-key are &lt;strong&gt;set&lt;/strong&gt; and the pixels equal to the color-key are not set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe42e1e5ad163250be23e633ec61104a9c6510d4" translate="yes" xml:space="preserve">
          <source>If there is no sound actively playing on the Channel then the Sound will begin playing immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b9a24cf87be43d35c684ac5bd4e7bf511b35ad" translate="yes" xml:space="preserve">
          <source>If too many events are made a &lt;a href=&quot;pygame#pygame.error&quot;&gt;&lt;code&gt;pygame.error&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3576b6f5851df50d806e3d52b1baee52b684bdb" translate="yes" xml:space="preserve">
          <source>If value &amp;gt; 1.0, the volume will be set to 1.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abe86c718dc9ea9c1de10e30cece24ee6745a3e" translate="yes" xml:space="preserve">
          <source>If value &amp;lt; 0.0, the volume will not be changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578bc72502549fd57cfe440f336e2d8d3591c0d8" translate="yes" xml:space="preserve">
          <source>If you are creating your own cursor strings, you can use any value represent the black and white pixels. Some system allow you to set a special toggle color for the system color, this is also called the xor color. If the system does not support xor cursors, that color will simply be black.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00caf4133ef4754b5d466e0bd79d1919fe56d65c" translate="yes" xml:space="preserve">
          <source>If you are only taking specific events from the queue, be aware that the queue could eventually fill up with the events you are not interested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74f4f4a2899998193c4af78240035d0a9adfcaf" translate="yes" xml:space="preserve">
          <source>If you don't need all the features of the &lt;code&gt;pygame.sprite.spritecollide()&lt;/code&gt; function, this function will be a bit quicker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f54fb4919a4895a7db4a0e4d4e5f2430cbabd5" translate="yes" xml:space="preserve">
          <source>If you pass a start time but no end, the audio will play to the end of the track. If you pass a start time and 'None' for the end time, the audio will play to the end of the entire disc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbaddb0d9c0de257522766e24caa1b3ccf06172" translate="yes" xml:space="preserve">
          <source>If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling &lt;code&gt;Clock.tick(40)&lt;/code&gt; once per frame, the program will never run at more than 40 frames per second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cb0f01b0fa4e0847abc089eed5f8768706b73e" translate="yes" xml:space="preserve">
          <source>If you pass the optional framerate argument the function will delay to keep the game running slower than the given ticks per second. This can be used to help limit the runtime speed of a game. By calling &lt;code&gt;Clock.tick_busy_loop(40)&lt;/code&gt; once per frame, the program will never run at more than 40 frames per second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b87a52d408debcea15304e66b07ea6ba9d09d75" translate="yes" xml:space="preserve">
          <source>If you render '\n' an unknown char will be rendered. Usually a rectangle. Instead you need to handle new lines yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e94baf3d6ecc5b9a554f2386cb1087817443571" translate="yes" xml:space="preserve">
          <source>In addition to the name, &lt;a href=&quot;#pygame.midi.get_device_info&quot;&gt;&lt;code&gt;get_device_info()&lt;/code&gt;&lt;/a&gt; returns &quot;interf&quot;, which is the interface name. The &quot;interface&quot; is the underlying software system or API used by PortMidi to access devices. Supported interfaces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94e1f35b910b5ad48bfee447842a9242957a686" translate="yes" xml:space="preserve">
          <source>In general, the registry is a better place for this kind of info. With USB devices that can come and go, using integers is not very reliable for device identification. Under Windows, if &lt;code&gt;PM_RECOMMENDED_INPUT_DEVICE&lt;/code&gt; (or &lt;code&gt;PM_RECOMMENDED_OUTPUT_DEVICE&lt;/code&gt;) is NOT found in the environment, then the default device is obtained by looking for a string in the registry under:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfdd12505ed10aa0d087db0b874967b17e41f39" translate="yes" xml:space="preserve">
          <source>In the current release, the default is simply the first device (the input or output device with the lowest PmDeviceID).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76535c364a87f3b87cae72ac864a4ecd0ae32b80" translate="yes" xml:space="preserve">
          <source>Indicates if the clipboard ownership has been lost by the pygame application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab3d32f7446dd47d4c9540d5520b4bee3278370" translate="yes" xml:space="preserve">
          <source>Individual test modules may have a __tags__ attribute, a list of tag strings used to selectively omit modules from a run. By default only 'interactive' modules such as cdrom_test are ignored. An interactive module must be run from the console as a Python program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac8f21cf9aaa0d21d2b6dfafbddf184d114df4e" translate="yes" xml:space="preserve">
          <source>Initialize a window or screen for display</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a592683ef23cf3246996a50eea2058b68711132b" translate="yes" xml:space="preserve">
          <source>Initialize all imported pygame modules. No exceptions will be raised if a module fails, but the total number if successful and failed inits will be returned as a tuple. You can always initialize individual modules manually, but &lt;a href=&quot;#pygame.init&quot;&gt;&lt;code&gt;pygame.init()&lt;/code&gt;&lt;/a&gt; is a convenient way to get everything started. The &lt;code&gt;init()&lt;/code&gt; functions for individual modules will raise exceptions when they fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8b0ce5695afb6136f07de87822f3d37ca9f1cc" translate="yes" xml:space="preserve">
          <source>Initialize the cdrom drive for use. The drive must be initialized for most &lt;code&gt;CD&lt;/code&gt; methods to work. Even if the rest of pygame has been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a504af7cdac535786bc564f8e2e5259373ef79c" translate="yes" xml:space="preserve">
          <source>Initialize the cdrom module. This will scan the system for all &lt;code&gt;CD&lt;/code&gt; devices. The module must be initialized before any other functions will work. This automatically happens when you call &lt;code&gt;pygame.init()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f909924b73f76e55e9a367dbb6b8b05de7356191" translate="yes" xml:space="preserve">
          <source>Initialize the display module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf25defee261707c71b782bcce483b5b58ea7909" translate="yes" xml:space="preserve">
          <source>Initialize the joystick module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c72b4d7d654bca49c92669b08520b73fb2f838b" translate="yes" xml:space="preserve">
          <source>Initialize the mixer module for Sound loading and playback. The default arguments can be overridden to provide specific audio mixing. Keyword arguments are accepted. For backward compatibility where an argument is set zero the default value is used (possible changed by a pre_init call).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcc71775cb34d0a0be543fd75a5c478c51ec7c3" translate="yes" xml:space="preserve">
          <source>Initialize the scrap module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec119c14ef27ada17e7f356a7596cb9c9e9a69d" translate="yes" xml:space="preserve">
          <source>Initialize the underlying FreeType library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003e5e685f3c6d7c8ae311d0e714ebad290b9a38" translate="yes" xml:space="preserve">
          <source>Initializes the &lt;a href=&quot;#module-pygame.midi&quot;&gt;&lt;code&gt;pygame.midi&lt;/code&gt;&lt;/a&gt; module. Must be called before using the &lt;a href=&quot;#module-pygame.midi&quot;&gt;&lt;code&gt;pygame.midi&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6f179b5d4a8865cacf50bced3d28e5a9af3251" translate="yes" xml:space="preserve">
          <source>Initializes the pygame display module. The display module cannot do anything until it is initialized. This is usually handled for you automatically when you call the higher level &lt;code&gt;pygame.init()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bca563dd975785ca4c07b98ba4b1d9e1335d8d" translate="yes" xml:space="preserve">
          <source>Initializes the scrap module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60601fa2b8c05430a62893f0839f96a844d09f3" translate="yes" xml:space="preserve">
          <source>Input is used to get midi input from midi devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046ae87b19157a418e8e5bdb97f78808ff67c80d" translate="yes" xml:space="preserve">
          <source>Is created with a floating point ratio, the instance is then intended to be passed as a collided callback function to the *collide functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f83c340cc68051073148d42f40d64e8886e1a3" translate="yes" xml:space="preserve">
          <source>Is created with a ratio, the instance is then intended to be passed as a collided callback function to the *collide functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601566ba086e4308f046d8384d67142220983c51" translate="yes" xml:space="preserve">
          <source>It can also be used to transfer pixels into a 'dest_surf' that match or don't match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f584e43baeb525175b265274159cba23490ef7b" translate="yes" xml:space="preserve">
          <source>It initializes the joystick module. This will scan the system for all joystick devices. The module must be initialized before any other functions will work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a747d702f376387b33488b84b85a0f79e20123" translate="yes" xml:space="preserve">
          <source>It is best to not always grab the input, since it prevents the user from doing other things on their system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cc4e9e8104da753aa0797b291fe6483a2055f2" translate="yes" xml:space="preserve">
          <source>It is harmless to call this more than once, repeated calls have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5420c7690d191cf0cdaa440aece58eeda2ef6e93" translate="yes" xml:space="preserve">
          <source>It is possible to have any number of subsurfaces and subsubsurfaces on the parent. It is also possible to subsurface the display Surface if the display mode is not hardware accelerated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a8e00238eddbe877b3e5e04507fa12ca0303b3" translate="yes" xml:space="preserve">
          <source>It is safe to call this &lt;code&gt;init()&lt;/code&gt; more than once as repeated calls will have no effect. This is true even if you have &lt;code&gt;pygame.quit()&lt;/code&gt; all the modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac98e1dde62e7ffd5cb467feaae7fbc208ee164" translate="yes" xml:space="preserve">
          <source>It is safe to call this function even if font is currently not initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d39f6a2046fd41ac18f84c87e51fb5c9f066fa" translate="yes" xml:space="preserve">
          <source>It is safe to call this function more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b0eceea9107528fec9c008292950a8deb7e4bf" translate="yes" xml:space="preserve">
          <source>It is safe to call this more than once, but after the mixer is initialized you cannot change the playback arguments without first calling &lt;code&gt;pygame.mixer.quit()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9565334dcb292c96738a327fe156543a620d1e50" translate="yes" xml:space="preserve">
          <source>It is safe to call this more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d13cf2c02921eede24255e1f9977cad76424939" translate="yes" xml:space="preserve">
          <source>It is safe to create multiple &lt;code&gt;CD&lt;/code&gt; objects for the same drive, they will all cooperate normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3392b911d33302c4b35dcaa44b60f6e33fc01e51" translate="yes" xml:space="preserve">
          <source>It is safe to nest locking and unlocking calls. The surface will only be unlocked after the final lock is released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e9a02bf172e36d80a89a2bcf9cfa70855510c5" translate="yes" xml:space="preserve">
          <source>It is usually best to not pass the depth argument. It will default to the best and fastest color depth for the system. If your game requires a specific color format you can control the depth with this argument. Pygame will emulate an unavailable color depth which can be slow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c446a8ffd2852ff84cb1a83d9c7d0446de2520" translate="yes" xml:space="preserve">
          <source>It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the comparison to mark pixels with a similar, but not exactly identical color, as black.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0fbe3e719d9417e9265cdea1cf5b47d188a8ac" translate="yes" xml:space="preserve">
          <source>It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the extraction to take pixels with a similar, but not exactly identical color, into account as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49782f27aecec741aac4e2d72428a0e97b027018" translate="yes" xml:space="preserve">
          <source>It uses a simple weighted Euclidean distance formula to calculate the distance between the colors. The distance space ranges from 0.0 to 1.0 and is used as threshold for the color detection. This causes the replacement to take pixels with a similar, but not exactly identical color, into account as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba64adde0948685873660c13f8f394b98f94917e" translate="yes" xml:space="preserve">
          <source>It uses the dirty flag technique and is therefore faster than the &lt;a href=&quot;#pygame.sprite.RenderUpdates&quot;&gt;&lt;code&gt;pygame.sprite.RenderUpdates&lt;/code&gt;&lt;/a&gt; if you have many static sprites. It also switches automatically between dirty rect update and full screen drawing, so you do no have to worry what would be faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c9a5e4acf0a3f4e72ccf72045125ccbcc79987" translate="yes" xml:space="preserve">
          <source>It uses the portmidi library. Is portable to which ever platforms portmidi supports (currently Windows, Mac OS X, and Linux).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2984ef6d7585a7bc900c5f7801000984302c2a" translate="yes" xml:space="preserve">
          <source>Keep in mind the &lt;code&gt;Surface.fill()&lt;/code&gt; method works just as well for drawing filled rectangles. In fact the &lt;code&gt;Surface.fill()&lt;/code&gt; can be hardware accelerated on some platforms with both software and hardware display modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8804a97595c6605af997f797488e9f7a887cea7" translate="yes" xml:space="preserve">
          <source>Keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b18e78257661559d5dea1314aaf997a8d8ef03" translate="yes" xml:space="preserve">
          <source>Lastly, this module contains several collision functions. These help find sprites inside multiple groups that have intersecting bounding rectangles. To find the collisions, the Sprites are required to have a &lt;code&gt;Surface.rect&lt;/code&gt; attribute assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb937240a512fe0fd1c0719c4e09c261b439f23" translate="yes" xml:space="preserve">
          <source>LayeredDirty group is for DirtySprite objects. Subclasses LayeredUpdates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520b37537b0d06c6b381f1c88caa98d6ca296f80" translate="yes" xml:space="preserve">
          <source>LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044a55507d16cb291ecb2e6641b11bd6d0a5b0c9" translate="yes" xml:space="preserve">
          <source>Lets you get or set multiple coordinates as one attribute, eg &lt;code&gt;vec.xyz = 1, 2, 3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f9d200d9dc973ea0c3ae6347189aa8827086b3" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU LGPL License version 2.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cccc67568aafabd64074d011367a50b443bc2d7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#pygame.freetype.Font.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; but with the pixels returned as a byte string of 8-bit gray-scale values. The foreground color is 255, the background 0, useful as an alpha mask for a foreground pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8583648927eb63e891f302db65bed64eb07a6ac7" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;testsprite.c&lt;/code&gt; that comes with SDL, this pygame version shows lots of sprites moving around.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8561c8ab755a1eba66bce0bf6738f46dd54e33" translate="yes" xml:space="preserve">
          <source>Load a music file for playback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a6fe63b69c73a305c589a5d40491719ffcbeed" translate="yes" xml:space="preserve">
          <source>Load a new font from a given filename or a python file object. The size is the height of the font in pixels. If the filename is None the pygame default font will be loaded. If a font cannot be loaded from the arguments given an exception will be raised. Once the font is created the size cannot be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3c84036a6b79e70be1a292ac4ebe8e04dfdc18" translate="yes" xml:space="preserve">
          <source>Load a new sound buffer from a filename, a python file object or a readable buffer object. Limited resampling will be performed to help the sample match the initialize arguments for the mixer. A Unicode string can only be a file pathname. A Python 2.x string or a Python 3.x bytes object can be either a pathname or a buffer object. Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may guess wrong. If the array keyword is used, the object is expected to export a version 3, &lt;code&gt;C&lt;/code&gt; level array interface or, for Python 2.6 or later, a new buffer interface (The object is checked for a buffer interface first.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f01b6667c51e007522ef3e6c49838bc4011abae" translate="yes" xml:space="preserve">
          <source>Load an image from a file source. You can pass either a filename or a Python file-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafa690fc7f7031ab64b6c8ff47d31c7faf38385" translate="yes" xml:space="preserve">
          <source>Loads a v4l2 camera. The device is typically something like &quot;/dev/video0&quot;. Default width and height are 640 by 480. Format is the desired colorspace of the output. This is useful for computer vision purposes. The default is &lt;code&gt;RGB&lt;/code&gt;. The following are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5726426dfbc85c2c657486aef38158437cf1db" translate="yes" xml:space="preserve">
          <source>Lock the pixel data of a Surface for access. On accelerated Surfaces, the pixel data may be stored in volatile video memory or nonlinear compressed forms. When a Surface is locked the pixel memory becomes available to access by regular software. Code that reads or writes pixel values will need the Surface to be locked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d794c32dbd2ea47c4dd79b45d7dbb00c16e34f86" translate="yes" xml:space="preserve">
          <source>Makes a duplicate copy of a Surface. The new surface will have the same pixel formats, color palettes, transparency settings, and class as the original. If a Surface subclass also needs to copy any instance specific attributes then it should override &lt;code&gt;copy()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81ddce33b163f260692311624752d6d8429f015" translate="yes" xml:space="preserve">
          <source>Manually uninitialize SDL_ttf's font system. This is called automatically by &lt;code&gt;pygame.quit()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72efd585ca246d241007dc3ae3f50267e15aee0d" translate="yes" xml:space="preserve">
          <source>Many settings are the requested minimum. Creating a window with an OpenGL context will fail if OpenGL cannot provide the requested attribute, but it may for example give you a stencil buffer even if you request none, or it may give you a larger one than requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f4507d5e8fd5675ce31dbc4f501f49b09058aa" translate="yes" xml:space="preserve">
          <source>Map a 3d array into a 2d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5fa6d9cc9248016d27aa387cc7a681f5fb0aca" translate="yes" xml:space="preserve">
          <source>Map an array of color element values - (w, h, ..., 3) - to an array of pixels - (w, h) according to the format of &amp;lt;surface&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aadf1657da58cb6e5ae063fb1322736bf6002e4" translate="yes" xml:space="preserve">
          <source>Mask</source>
          <target state="translated">Mask</target>
        </trans-unit>
        <trans-unit id="982201f6c429788b647996f7a69b7c91a39b9f11" translate="yes" xml:space="preserve">
          <source>Minimum bit size of the depth buffer. Defaults to 16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b558840009cb1f453517700a40cf0c05d00255" translate="yes" xml:space="preserve">
          <source>Minimum bit size of the frame buffer. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25402a5db4bd8564d74ff10b8b229a3559604bd" translate="yes" xml:space="preserve">
          <source>Minimum bit size of the stencil buffer. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98f026223e25bdc54f33d242a44f8103014ccf5" translate="yes" xml:space="preserve">
          <source>Module level tags control which modules are included in a unit test run. Tags are assigned to a unit test module with a corresponding &amp;lt;name&amp;gt;_tags.py module. The tags module has the global __tags__, a list of tag names. For example, &lt;code&gt;cdrom_test.py&lt;/code&gt; has a tag file &lt;code&gt;cdrom_tags.py&lt;/code&gt; containing a tags list that has the 'interactive' string. The 'interactive' tag indicates &lt;code&gt;cdrom_test.py&lt;/code&gt; expects user input. It is excluded from a &lt;code&gt;run_tests.py&lt;/code&gt; or &lt;code&gt;pygame.tests.go&lt;/code&gt; run. Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These two tags indicate unit tests that will not run on a particular platform, or for which no corresponding pygame module is available. The test runner will list each excluded module along with the tag responsible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6c0b71f37c69ffd9426eb4eabdbb508f46887c" translate="yes" xml:space="preserve">
          <source>Most of the functions accept a color argument that is an &lt;code&gt;RGB&lt;/code&gt; triplet. These can also accept an &lt;code&gt;RGBA&lt;/code&gt; quadruplet. The color argument can also be an integer pixel value that is already mapped to the Surface's pixel format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130d1eea1c8e0cdd4e40e0fc6cb6d8bcbdf53b39" translate="yes" xml:space="preserve">
          <source>Most of the functions take a width argument to represent the size of stroke (thickness) around the edge of the shape. If a width of 0 is passed the shape will be filled (solid).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4185fee8786ab5ba662e496d68212961a4bd50d" translate="yes" xml:space="preserve">
          <source>Most of the work done with fonts are done by using the actual Font objects. The module by itself only has routines to initialize the module and create Font objects with &lt;code&gt;pygame.font.Font()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d032eb4b9500bb140552b8c5dea5a2424fe3c72d" translate="yes" xml:space="preserve">
          <source>Most work on fonts is done using &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; instances. The module itself only has routines for initialization and creation of &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; objects. You can load fonts from the system using the &lt;a href=&quot;#pygame.freetype.SysFont&quot;&gt;&lt;code&gt;SysFont()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14bd325c12c7375f79cf9212d769f79ae2bca83" translate="yes" xml:space="preserve">
          <source>Move the image by dx pixels right and dy pixels down. dx and dy may be negative for left and up scrolls respectively. Areas of the surface that are not overwritten retain their original pixel values. Scrolling is contained by the Surface clip area. It is safe to have dx and dy values that exceed the surface size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb39d70b7b8647e5f04bb6d1d3b21a04737ee819" translate="yes" xml:space="preserve">
          <source>Moves the sprite to the bottom layer, moving it behind all other layers and adding one additional layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6678389210062b8241cda7f9632ee9aa3d302a" translate="yes" xml:space="preserve">
          <source>Multiple coordinates can be set using slices or swizzling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfee9ed466eebb5c28564473212708ddc8ab3200" translate="yes" xml:space="preserve">
          <source>New in pygame 1.7.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30540b2153ed1bd737e05df641cf8fb697c588d" translate="yes" xml:space="preserve">
          <source>New in pygame 1.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d08ad223cd2b8504ee5cc0f727ae16371777bd" translate="yes" xml:space="preserve">
          <source>New in pygame 1.8.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e6e5a3f1d408418e9022d22a3b3f27f9479179" translate="yes" xml:space="preserve">
          <source>New in pygame 1.8.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7b5c0867d4c22bd0ddc74697e679887e408736" translate="yes" xml:space="preserve">
          <source>New in pygame 1.8.1: Optional &lt;code&gt;special_flags&lt;/code&gt;: &lt;code&gt;BLEND_RGBA_ADD&lt;/code&gt;, &lt;code&gt;BLEND_RGBA_SUB&lt;/code&gt;, &lt;code&gt;BLEND_RGBA_MULT&lt;/code&gt;, &lt;code&gt;BLEND_RGBA_MIN&lt;/code&gt;, &lt;code&gt;BLEND_RGBA_MAX&lt;/code&gt;&lt;code&gt;BLEND_RGB_ADD&lt;/code&gt;, &lt;code&gt;BLEND_RGB_SUB&lt;/code&gt;, &lt;code&gt;BLEND_RGB_MULT&lt;/code&gt;, &lt;code&gt;BLEND_RGB_MIN&lt;/code&gt;, &lt;code&gt;BLEND_RGB_MAX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f34db08b055a30e15e54ca850d67d829d9b865" translate="yes" xml:space="preserve">
          <source>New in pygame 1.8: &lt;code&gt;pygame.mixer.Sound(buffer)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01445db8a2fee3eb81baaa902b4f263fccbf277f" translate="yes" xml:space="preserve">
          <source>New in pygame 1.8: Optional &lt;code&gt;special_flags&lt;/code&gt;: &lt;code&gt;BLEND_ADD&lt;/code&gt;, &lt;code&gt;BLEND_SUB&lt;/code&gt;, &lt;code&gt;BLEND_MULT&lt;/code&gt;, &lt;code&gt;BLEND_MIN&lt;/code&gt;, &lt;code&gt;BLEND_MAX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5363a977aba90d129700971e65f3e5a04daaece6" translate="yes" xml:space="preserve">
          <source>New in pygame 1.8: Saving PNG and JPEG files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c693c5397e85356976d02ea091e1cd1f1994ae61" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115371abf3d806d5bdc8245d7e56f02a597584ee" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91df8bbd1b71405ad6adf277421e1e669963d38e" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5831c8967245f89e0ebd1f522cbc31867644e948" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af907ce24817664dbb3becce4a6b616495a920fd" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf0e8c3e25cbfdfd80fbb32df115381afaee1f3" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2: (primarily for use in unit tests)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1de42902e0109ca72bb11afca634c22d607861" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2: &lt;a href=&quot;#pygame.mixer.Sound&quot;&gt;&lt;code&gt;pygame.mixer.Sound&lt;/code&gt;&lt;/a&gt; keyword arguments and array interface support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafd789c1dcb0d680b69e9f708d70010d951f02e" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2: &lt;code&gt;freetype&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c5ad00ba1805af3c6d3be4df0fc5b2f713ac54" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2: Mutable attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cc237efa53d2426f0775eb2338a5ba2b72ea64" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2: The Rect class can be subclassed. Methods such as &lt;code&gt;copy()&lt;/code&gt; and &lt;code&gt;move()&lt;/code&gt; will recognize this and return instances of the subclass. However, the subclass's &lt;code&gt;__init__()&lt;/code&gt; method is not called, and &lt;code&gt;__new__()&lt;/code&gt; is assumed to take no arguments. So these methods should be overridden if any extra attributes need to be copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccb8f6d76ae1b57ddb8463b695e291646c371f7" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2: array struct interface support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a6866feec6c4e3c8273c8fb33457bd34c711c0" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.2pre.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a414d767a07be2d8d51fcc61e5ca2eab4e6eefd" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3e9a695d7801944c9003eec2f66d3e30bbdce4" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.4:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0848077c9284b037e87a5da80b1cf24191e465b3" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbcfa9eba9b8b2964ab205f85e60251902626c96" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.5: &lt;code&gt;pump&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db6a28c2fe9793ac3bf7ab558b1825d56187bd26" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9.6: Attributes &lt;code&gt;major&lt;/code&gt;, &lt;code&gt;minor&lt;/code&gt;, and &lt;code&gt;patch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56bb27c9afd09ced4693c9092be5d80e5bf24a7" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9: &lt;code&gt;palette_colors&lt;/code&gt; argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f526708bd8c83e650f3cb5cafe59a5e3da5b6dc" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9: Returning &lt;code&gt;Color(with length 3)&lt;/code&gt; instance instead of a tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4059ad9d6163d4c7b2b16749150cd3d799fdfb55" translate="yes" xml:space="preserve">
          <source>New in pygame 1.9: Returning a Color instead of tuple. Use &lt;code&gt;tuple(surf.get_at((x,y)))&lt;/code&gt; if you want a tuple, and not a Color. This should only matter if you want to use the color as a key in a dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba08227d00485da972732dbc5180972c975ba32" translate="yes" xml:space="preserve">
          <source>New in pygame 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74b386cb744fbed4673e1594c9b3ab0d5d52f20" translate="yes" xml:space="preserve">
          <source>New in pygame 2.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e22e8a8f064ea9abbf9225d01e796e6244fb43b" translate="yes" xml:space="preserve">
          <source>New in pygame 2.0.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fd9f187e625b586c7151b5fec9caaf2bc2d82b" translate="yes" xml:space="preserve">
          <source>New in pygame 2.0.0.dev3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9473b67c0ca5a8c22beb7bbdc47b4720d0dbff1" translate="yes" xml:space="preserve">
          <source>New in pygame 2.0.0.dev3: once argument added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9f9dea66030579e8c0ee81e40e4c8b4773ca1a" translate="yes" xml:space="preserve">
          <source>New in pygame 2.0.0: &lt;code&gt;SCALED&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e9f3b3cf3cbeeab28d09adfe3cffeae7c9a670" translate="yes" xml:space="preserve">
          <source>New in pygame 2.0.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511e05d2b69241794031faa137c358f0bdb47007" translate="yes" xml:space="preserve">
          <source>New in pygame 2.0: Additional attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1cc91c6ceeb3307d0c50f08b4869fe468d28ac" translate="yes" xml:space="preserve">
          <source>New in pygame 2.0: The &lt;code&gt;pygame.TEXTINPUT&lt;/code&gt; event is preferred to the &lt;code&gt;unicode&lt;/code&gt; attribute of &lt;code&gt;pygame.KEYDOWN&lt;/code&gt;. The attribute &lt;code&gt;text&lt;/code&gt; contains the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f554cc41e876eee1a36056424fda10bfc11d45" translate="yes" xml:space="preserve">
          <source>New in pygame 2: The number of channels can also be 4 or 6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fc8b394fd9d1aaa45cccaa232ab4466b85832a" translate="yes" xml:space="preserve">
          <source>New in pygame 2: This module requires SDL2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be98af238eac74819762f744a73a6cef3ce2ca7" translate="yes" xml:space="preserve">
          <source>New in pygame 2: When compiled with SDL2, size can be 32 (32bit floats).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d76b262c59910c7d7ca6e7961971ed8eff3731d" translate="yes" xml:space="preserve">
          <source>New in pygame 2: allowedchanges added for SDL2. This has no effect with SDL1 (i.e. the requested format may always differ from the returned format).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1797ecec5ab3b3154ebdeba3024460ed5e3ae0" translate="yes" xml:space="preserve">
          <source>New with pygame 1.7.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4c9e34e5ab375eab81be965f93a93ad61f3a55" translate="yes" xml:space="preserve">
          <source>No collision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6943f83e916fe671902bab30a31d05371cef7a8c" translate="yes" xml:space="preserve">
          <source>NoneType</source>
          <target state="translated">NoneType</target>
        </trans-unit>
        <trans-unit id="81fe0956b3cbbca20b7586fe9d4459c7c6f4cefb" translate="yes" xml:space="preserve">
          <source>Normal &lt;code&gt;pygame.TEXTINPUT&lt;/code&gt; events are not dependent on this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28db7e6948ac6e3ea9319c2c1f58201c7376b8fe" translate="yes" xml:space="preserve">
          <source>Normalizes the vector so that it has length == 1. The direction of the vector is not changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a55e2b92b329a8207cfe7f8cd5fcaec05290033" translate="yes" xml:space="preserve">
          <source>Not all Surfaces require locking. The &lt;a href=&quot;#pygame.Surface.mustlock&quot;&gt;&lt;code&gt;mustlock()&lt;/code&gt;&lt;/a&gt; method can determine if it is actually required. There is no performance penalty for locking and unlocking a Surface that does not need it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="a0dfe23e9851a1185ad339c9b245208fc30eab0f" translate="yes" xml:space="preserve">
          <source>Note it's a bit scant on error checking, but it's easy to read. :] Fortunately, this is python, and we needn't wrestle with a pile of error codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b7b7c6ceb999d5bc278c0f98b652144e177f25" translate="yes" xml:space="preserve">
          <source>Note that if you called &lt;code&gt;Sound.play(n)&lt;/code&gt; or &lt;code&gt;Channel.play(sound,n)&lt;/code&gt;, the end event is sent only once: after the sound has been played &quot;n+1&quot; times (see the documentation of Sound.play).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33526511541c6c91100f2136b022bf24e75843eb" translate="yes" xml:space="preserve">
          <source>Note that pygame does not automatically import pygame.gfxdraw, so you need to import pygame.gfxdraw before using it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20176c822433ab9b26ca6adf0d356867ba4b4a90" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; class does not automatically determine script orientation. Vertical layout must be selected explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf908cee86d2b0b3bcfbbdbba5332ffaa328970" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;freetype&lt;/code&gt; module depends on the FreeType 2 library. It will not compile with the original FreeType 1.0. Hence, the first element of the tuple will always be &quot;2&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd147a5ac9ffbf7713decf8d4484fcc313508cb" translate="yes" xml:space="preserve">
          <source>Note that there is no Image class; an image is loaded as a Surface object. The Surface class allows manipulation (drawing lines, setting pixels, capturing regions, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dece7f34dd80058bfbb80c5466b5ffb25fdb31b0" translate="yes" xml:space="preserve">
          <source>Note that this function uses &lt;a href=&quot;#pygame.time.delay&quot;&gt;&lt;code&gt;pygame.time.delay()&lt;/code&gt;&lt;/a&gt;, which uses lots of CPU in a busy loop to make sure that timing is more accurate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3967894f4605d4f931bcbf3daf990f558cf3f6" translate="yes" xml:space="preserve">
          <source>Note that this function uses SDL_Delay function which is not accurate on every platform, but does not use much CPU. Use tick_busy_loop if you want an accurate timer, and don't mind chewing CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd8010dc7a9582522395209f54114ba14632ff3" translate="yes" xml:space="preserve">
          <source>Note, remember to call &lt;code&gt;pygame.event.get()&lt;/code&gt; before this function. Otherwise it will not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f69d6d5962c63fab7e407cd67381dea93602884" translate="yes" xml:space="preserve">
          <source>Note, that on &lt;code&gt;X11&lt;/code&gt; some X servers use middle button emulation. When you click both buttons 1 and 3 at the same time a 2 button event can be emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74057b7577e9ec4a5c19d48cf436bf4c16a67fc2" translate="yes" xml:space="preserve">
          <source>Note, that this function blocks until the music has faded out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec9008cca99c0cdfdb0ea88b711e157e087a89e" translate="yes" xml:space="preserve">
          <source>Note, this function currently does not handle palette using surfaces correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d949f41168d3e067a5c75a3341b661ef53c9ef2" translate="yes" xml:space="preserve">
          <source>Note, to get all of the mouse events it is better to use either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52745f5a2c234f2e0a453715ec7b0cfb9163658" translate="yes" xml:space="preserve">
          <source>Note, track 0 is the first track on the &lt;code&gt;CD&lt;/code&gt;. Track numbers start at zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbfa8b17d7daa2756fb50b5a32cd29f3079d04b" translate="yes" xml:space="preserve">
          <source>Note: The buffer will be copied internally, no data will be shared between it and the Sound object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e6fc3320148176882b98b2b58fed0307ed942a" translate="yes" xml:space="preserve">
          <source>Note: under &lt;code&gt;MS&lt;/code&gt; Windows, the window that has the mouse focus also has the keyboard focus. But under X-Windows, one window can receive mouse events and another receive keyboard events. &lt;code&gt;pygame.mouse.get_focused()&lt;/code&gt; indicates whether the pygame window receives mouse events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab23265a510a4791ee56e71a7409ff801578fd8d" translate="yes" xml:space="preserve">
          <source>On MacOSX when a file is opened using a pygame application, a &lt;code&gt;USEREVENT&lt;/code&gt; with its &lt;code&gt;code&lt;/code&gt; attribute set to &lt;code&gt;pygame.USEREVENT_DROPFILE&lt;/code&gt; is generated. There is an additional attribute called &lt;code&gt;filename&lt;/code&gt; where the name of the file being accessed is stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53703c11f5049f33839022172473afe29b09e4b" translate="yes" xml:space="preserve">
          <source>On a PC the user can specify a default device by setting an environment variable. To use device #1, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0ec62a7b2a1d84c946c0408c0d333084ad2e2a" translate="yes" xml:space="preserve">
          <source>On each OS and version of Python the location will be slightly different. For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/' On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b907dfd961fac7b581e3a1fdb2fb2f40734da35c" translate="yes" xml:space="preserve">
          <source>On high resolution displays(4k, 1080p) and tiny graphics games (640x480) show up very small so that they are unplayable. SCALED scales up the window for you. The game thinks it's a 640x480 window, but really it can be bigger. Mouse events are scaled for you, so your game doesn't need to do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89471af2bd90f0382b84801c787382c94026d9e6" translate="yes" xml:space="preserve">
          <source>On some platforms it is possible to embed the pygame display into an already existing window. To do this, the environment variable &lt;code&gt;SDL_WINDOWID&lt;/code&gt; must be set to a string containing the window id or handle. The environment variable is checked when the pygame display is initialized. Be aware that there can be many strange side effects when running in an embedded display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4168e46d535abe54cf4d36244f60f7061ca07a0" translate="yes" xml:space="preserve">
          <source>Once the display Surface is created, the functions from this module affect the single existing display. The Surface becomes invalid if the module is uninitialized. If a new display mode is set, the existing Surface will automatically switch to operate on the new display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149882a9b7f73f4ffbc34ba33ca64241e38d7a15" translate="yes" xml:space="preserve">
          <source>Only scalable (outline) fonts can be rotated. An attempt to change the rotation of a bitmap font raises an AttributeError. An attempt to change the rotation of an inactive font instance, as returned by &lt;code&gt;Font.__new__()&lt;/code&gt;, raises a RuntimeError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c114be14203c80670175d9f2c5238525bc0794" translate="yes" xml:space="preserve">
          <source>Opens the camera device, attempts to initialize it, and begins recording images to a buffer. The camera must be started before any of the below functions can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45676d8f9f6d9a07a5a352f5ae252e6612701963" translate="yes" xml:space="preserve">
          <source>Optimization: if you know that the final destination for the text (on the screen) will always have a solid background, and the text is antialiased, you can improve performance by specifying the background color. This will cause the resulting image to maintain transparency information by colorkey rather than (much less efficient) alpha values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a69301e0f7e8e85c1029901852f203f003546d4" translate="yes" xml:space="preserve">
          <source>Optional &lt;em&gt;fgcolor&lt;/em&gt;, &lt;em&gt;style&lt;/em&gt;, &lt;em&gt;rotation&lt;/em&gt;, and &lt;em&gt;size&lt;/em&gt; arguments override the default values set for the &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae442ea12ddaafa31c0d35dae469af7a01da507" translate="yes" xml:space="preserve">
          <source>Optional data fields: &lt;code&gt;write([[[0xc0, 0, 0], 20000]])&lt;/code&gt; is equivalent to &lt;code&gt;write([[[0xc0], 20000]])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba14667f5511bdc02dd0a4d464d5cf771a26e01" translate="yes" xml:space="preserve">
          <source>Optional keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc278b577df62f07f2fb79dac5895ac1289b3311" translate="yes" xml:space="preserve">
          <source>Optionally, &lt;em&gt;text&lt;/em&gt; can be &lt;code&gt;None&lt;/code&gt;, which will render the text passed to a previous &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.render_raw&quot;&gt;&lt;code&gt;render_raw()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#pygame.freetype.Font.render_raw_to&quot;&gt;&lt;code&gt;render_raw_to()&lt;/code&gt;&lt;/a&gt; call. See &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ab4fd680c2e1ef1c96c540304620adf99adb9d" translate="yes" xml:space="preserve">
          <source>Optionally, &lt;em&gt;text&lt;/em&gt; can be &lt;code&gt;None&lt;/code&gt;, which will return the bounding rectangle for the text passed to a previous &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.render_raw&quot;&gt;&lt;code&gt;render_raw()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#pygame.freetype.Font.render_raw_to&quot;&gt;&lt;code&gt;render_raw_to()&lt;/code&gt;&lt;/a&gt; call. See &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97ce5d9c6faa924508f6f06971243862673412d" translate="yes" xml:space="preserve">
          <source>Optionally, &lt;em&gt;text&lt;/em&gt; can be set &lt;code&gt;None&lt;/code&gt;, which will re-render text passed to a previous &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pygame.freetype.Font.render_raw&quot;&gt;&lt;code&gt;render_raw()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#pygame.freetype.Font.render_raw_to&quot;&gt;&lt;code&gt;render_raw_to()&lt;/code&gt;&lt;/a&gt; call. Primarily, this feature is an aid to using &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt; in combination with &lt;a href=&quot;#pygame.freetype.Font.get_rect&quot;&gt;&lt;code&gt;get_rect()&lt;/code&gt;&lt;/a&gt;. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4134224b8da23e9fa32b3fdc62554e88d2d03e32" translate="yes" xml:space="preserve">
          <source>Optionally, a &lt;em&gt;size&lt;/em&gt; argument may be specified to set the default size in points, which determines the size of the rendered characters. The size can also be passed explicitly to each method call. Because of the way the caching system works, specifying a default size on the constructor doesn't imply a performance gain over manually passing the size on each function call. If the font is bitmap and no &lt;em&gt;size&lt;/em&gt; is given, the default size is set to the first available size for the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5786e2a4e2a299bf6c203c7ef9902fd3bd83e930" translate="yes" xml:space="preserve">
          <source>Optionally, you may specify a default &lt;em&gt;cache_size&lt;/em&gt; for the Glyph cache: the maximum number of glyphs that will be cached at any given time by the module. Exceedingly small values will be automatically tuned for performance. Also a default pixel &lt;em&gt;resolution&lt;/em&gt;, in dots per inch, can be given to adjust font scaling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3096dd3ab2f08c55fbcdda9f7dc1d94f61b70ada" translate="yes" xml:space="preserve">
          <source>Output MIDI information of 3 bytes or less. The &lt;code&gt;data&lt;/code&gt; fields are optional and assumed to be 0 if omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60149b0a607eed755d2bc65c7eb1b371583986a4" translate="yes" xml:space="preserve">
          <source>Output is used to send midi to an output device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249450cb72252df146b3769ed2d41a843af2058c" translate="yes" xml:space="preserve">
          <source>Overlay</source>
          <target state="translated">Overlay</target>
        </trans-unit>
        <trans-unit id="86b472fab5e419ac6068843b1012c29fe43d0a22" translate="yes" xml:space="preserve">
          <source>Overlay.display()</source>
          <target state="translated">Overlay.display()</target>
        </trans-unit>
        <trans-unit id="2d517ab48dadcd825afa3347088382ebfc644d97" translate="yes" xml:space="preserve">
          <source>Overlay.get_hardware()</source>
          <target state="translated">Overlay.get_hardware()</target>
        </trans-unit>
        <trans-unit id="bc46e1b7d98bba5c592f6d2c0f300999d60fc098" translate="yes" xml:space="preserve">
          <source>Overlay.set_location()</source>
          <target state="translated">Overlay.set_location()</target>
        </trans-unit>
        <trans-unit id="1a12282c2ad1c7b41439b95fdbd68d961f3cbee6" translate="yes" xml:space="preserve">
          <source>Overwrite bytes in the parent object's data. The data must be C or F contiguous, otherwise a ValueError is raised. Argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="bf1f2e45c3a25a7a341bab2f359695e121f7385c" translate="yes" xml:space="preserve">
          <source>Per pixel alphas are different because they store a transparency value for every pixel. This allows for the most precise transparency effects, but it also the slowest. Per pixel alphas cannot be mixed with surface alpha and colorkeys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b76f9e7cc2d1c6ec28a6b72be603576c5f34f0" translate="yes" xml:space="preserve">
          <source>Performs a bitwise OR, drawing &lt;code&gt;othermask&lt;/code&gt; onto this mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cea0d0af907b30eb74ac6f44d7ec69cae9c117" translate="yes" xml:space="preserve">
          <source>Pick the best color depth for a display mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afe792d4fb921c382cb7e44aa4e3f597d8714d7" translate="yes" xml:space="preserve">
          <source>Pixel alphas will be ignored when blitting to an 8 bit Surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282a9cd366d470ea26082f68d42a376cc652edf2" translate="yes" xml:space="preserve">
          <source>Pixel resolution in dots per inch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af58b829ebb3b9afd9cb9b37654693ed0d85d9aa" translate="yes" xml:space="preserve">
          <source>PixelArray</source>
          <target state="translated">PixelArray</target>
        </trans-unit>
        <trans-unit id="4eb849917cbd2f04117c55fe60a818a51b6c1779" translate="yes" xml:space="preserve">
          <source>PixelArray.close()</source>
          <target state="translated">PixelArray.close()</target>
        </trans-unit>
        <trans-unit id="1f325026f10ca86c161dc0d4ebb82db7adee291f" translate="yes" xml:space="preserve">
          <source>PixelArray.compare()</source>
          <target state="translated">PixelArray.compare()</target>
        </trans-unit>
        <trans-unit id="9b71668b247b90e88fd4a62e41b338d25e1c367e" translate="yes" xml:space="preserve">
          <source>PixelArray.extract()</source>
          <target state="translated">PixelArray.extract()</target>
        </trans-unit>
        <trans-unit id="3542150dfcadefa9d70f779e66c63802560fae7c" translate="yes" xml:space="preserve">
          <source>PixelArray.itemsize</source>
          <target state="translated">PixelArray.itemsize</target>
        </trans-unit>
        <trans-unit id="a6e5b3087e8481d58464e788f9c673cd6a4c9e10" translate="yes" xml:space="preserve">
          <source>PixelArray.make_surface()</source>
          <target state="translated">PixelArray.make_surface()</target>
        </trans-unit>
        <trans-unit id="c0ed4e054039e2be71f67749121d4b37d20ff2a6" translate="yes" xml:space="preserve">
          <source>PixelArray.ndim</source>
          <target state="translated">PixelArray.ndim</target>
        </trans-unit>
        <trans-unit id="f4189e3f28907f0fe31a314f7c99fb4ab7c0d5f1" translate="yes" xml:space="preserve">
          <source>PixelArray.replace()</source>
          <target state="translated">PixelArray.replace()</target>
        </trans-unit>
        <trans-unit id="b8d857c859f0c4e3708a9feb8077c0dae6b01110" translate="yes" xml:space="preserve">
          <source>PixelArray.shape</source>
          <target state="translated">PixelArray.shape</target>
        </trans-unit>
        <trans-unit id="ca98ba38709b88c5f716d585e00665626aeb7fec" translate="yes" xml:space="preserve">
          <source>PixelArray.strides</source>
          <target state="translated">PixelArray.strides</target>
        </trans-unit>
        <trans-unit id="7f3d78c6de1570d526a78d5c5fa23df7bd14dc96" translate="yes" xml:space="preserve">
          <source>PixelArray.surface</source>
          <target state="translated">PixelArray.surface</target>
        </trans-unit>
        <trans-unit id="2299a6cec077f1dc1b4bb5a310066ed007fbc95f" translate="yes" xml:space="preserve">
          <source>PixelArray.transpose()</source>
          <target state="translated">PixelArray.transpose()</target>
        </trans-unit>
        <trans-unit id="86b467ef48614b98ab426db7ad84e521b0c856eb" translate="yes" xml:space="preserve">
          <source>Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit depths can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a58727937510a1c709fea24d1e959926ebad44" translate="yes" xml:space="preserve">
          <source>Places data for a given clipboard type into the clipboard. The data must be a string buffer. The type is a string identifying the type of data to be placed into the clipboard. This can be one of the predefined &lt;code&gt;pygame.SCRAP_PBM&lt;/code&gt;, &lt;code&gt;pygame.SCRAP_PPM&lt;/code&gt;, &lt;code&gt;pygame.SCRAP_BMP&lt;/code&gt; or &lt;code&gt;pygame.SCRAP_TEXT&lt;/code&gt; values or a user defined string identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74782e1f254f19ebd31282919ca2cad4e562872" translate="yes" xml:space="preserve">
          <source>Places data into the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d4d80ebb7e40ff9f3b6420e54380709ff7895d" translate="yes" xml:space="preserve">
          <source>Places the given event at the end of the event queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43ffc9eb6ba63c773e3a55ee5611d031fcdf8bf" translate="yes" xml:space="preserve">
          <source>Play the .pgm video file given by a path fname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b0da0b491039c856cbad631299f3d65ae00595" translate="yes" xml:space="preserve">
          <source>Playback audio from an audio cdrom in the drive. Besides the track number argument, you can also pass a starting and ending time for playback. The start and end time are in seconds, and can limit the section of an audio track played.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01283185a86544db14cbb42ebb054adc233c99ed" translate="yes" xml:space="preserve">
          <source>PortMidi attempts to close open streams when the application exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0035dacc98e9608b2d61056753e2c912419a8001" translate="yes" xml:space="preserve">
          <source>Positional arguments (optional):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39400e243858e0aaf5e092e774de6d7e67dd3656" translate="yes" xml:space="preserve">
          <source>Positional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f969924d26184795fef92ca993d328cc50fbc4e4" translate="yes" xml:space="preserve">
          <source>Proper font name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8910a85e0d7cb5ff57cf53c9afa847c3cfceb0fc" translate="yes" xml:space="preserve">
          <source>Provides a list containing a &lt;a href=&quot;#pygame.mask.Mask&quot;&gt;&lt;code&gt;Mask&lt;/code&gt;&lt;/a&gt; object for each connected component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc807cb27ba64fca6833d896a3a999a8583f5173" translate="yes" xml:space="preserve">
          <source>Provides a list containing a bounding rect for each connected component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cddf5687ad700d8156209d1c0f701918dc0fa17a" translate="yes" xml:space="preserve">
          <source>Pulls an image off of the buffer as an &lt;code&gt;RGB&lt;/code&gt; Surface. It can optionally reuse an existing Surface to save time. The bit-depth of the surface is either 24 bits or the same as the optionally supplied Surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ace252cce40ec008e279f8513207e422d8389a" translate="yes" xml:space="preserve">
          <source>Pygame</source>
          <target state="translated">Pygame</target>
        </trans-unit>
        <trans-unit id="62ea146696d5393dc3e0d3a9103091086fb4ee45" translate="yes" xml:space="preserve">
          <source>Pygame can only have a single display active at any time. Creating a new one with &lt;code&gt;pygame.display.set_mode()&lt;/code&gt; will close the previous display. If precise control is needed over the pixel format or display resolutions, use the functions &lt;code&gt;pygame.display.mode_ok()&lt;/code&gt;, &lt;code&gt;pygame.display.list_modes()&lt;/code&gt;, and &lt;code&gt;pygame.display.Info()&lt;/code&gt; to query information about the display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3629260089c8a1551135d4a2aa80e06a2692e62c" translate="yes" xml:space="preserve">
          <source>Pygame chooses one of many available display backends when it is initialized. This returns the internal name used for the display backend. This can be used to provide limited information about what display capabilities might be accelerated. See the &lt;code&gt;SDL_VIDEODRIVER&lt;/code&gt; flags in &lt;code&gt;pygame.display.set_mode()&lt;/code&gt; to see some of the common options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdd6f0b12505034f7be0a0125090b29fd29e5e0" translate="yes" xml:space="preserve">
          <source>Pygame comes with a built-in default font. This can always be accessed by passing None as the font name to the &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e442c89c977d3bd3c0f2c1198156ea7dd0687d3" translate="yes" xml:space="preserve">
          <source>Pygame comes with a builtin default font. This can always be accessed by passing None as the font name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c0b39d0ec68bdd347c9185c879bc5835b6df4a" translate="yes" xml:space="preserve">
          <source>Pygame currently supports only Linux and v4l2 cameras.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47388a62032a6f7b29569668c34cb671ac4b72ad" translate="yes" xml:space="preserve">
          <source>Pygame handles all its event messaging through an event queue. The routines in this module help you manage that event queue. The input queue is heavily dependent on the &lt;a href=&quot;display#module-pygame.display&quot;&gt;&lt;code&gt;pygame.display&lt;/code&gt;&lt;/a&gt; module. If the display has not been initialized and a video mode not set, the event queue may not work properly. The event subsystem should be called from the main thread. If you want to post events into the queue from other threads, please use the &lt;code&gt;pygame.fastevent&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30521278993354bcf4213194b7fb827d88210f94" translate="yes" xml:space="preserve">
          <source>Pygame may not always be built to support all image formats. At minimum it will support uncompressed &lt;code&gt;BMP&lt;/code&gt;. If &lt;code&gt;pygame.image.get_extended()&lt;/code&gt; returns 'True', you should be able to load most images (including PNG, JPG and GIF).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a489a188e7f6c955cfea402e2a76445fdd911691" translate="yes" xml:space="preserve">
          <source>Pygame module for interacting with joysticks, gamepads, and trackballs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e4b2dbf64590527ad8f897b9c8135536e7e718" translate="yes" xml:space="preserve">
          <source>Pygame offers control over the system hardware cursor. Pygame only supports black and white cursors for the system. You control the cursor with functions inside &lt;a href=&quot;mouse#module-pygame.mouse&quot;&gt;&lt;code&gt;pygame.mouse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee65ef55b0530dee88bea6bdb1f9bec90dc2eaf" translate="yes" xml:space="preserve">
          <source>Pygame unit test suite package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c57b9e54a21956f95b08a12aca2a4b07ef03923" translate="yes" xml:space="preserve">
          <source>Pygame uses Rect objects to store and manipulate rectangular areas. A Rect can be created from a combination of left, top, width, and height values. Rects can also be created from python objects that are already a Rect or have an attribute named &quot;rect&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f0384d1baa5fb6573144835ce6565824bbdb62" translate="yes" xml:space="preserve">
          <source>Pygame will automatically determine the image type (e.g., &lt;code&gt;GIF&lt;/code&gt; or bitmap) and create a new Surface object from the data. In some cases it will need to know the file extension (e.g., &lt;code&gt;GIF&lt;/code&gt; images should end in &quot;.gif&quot;). If you pass a raw file-like object, you may also want to pass the original filename as the namehint argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cfd8ac0c281670bd9ce06a916cb36075a9d4df" translate="yes" xml:space="preserve">
          <source>Pygame will select from one of several internal display backends when it is initialized. The display mode will be chosen depending on the platform and permissions of current user. Before the display module is initialized the environment variable &lt;code&gt;SDL_VIDEODRIVER&lt;/code&gt; can be set to control which backend is used. The systems with multiple choices are listed here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef57782fada84a616865a928f5e6171085284008" translate="yes" xml:space="preserve">
          <source>Raises IndexOutOfBounds if the idx is not within range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0eb5268f437200e3ca42ec2d178bdfb80e8e252" translate="yes" xml:space="preserve">
          <source>Raises:</source>
          <target state="translated">Raises:</target>
        </trans-unit>
        <trans-unit id="f7cabe0b13d3a088a2c6bcc6e08675557dfafb39" translate="yes" xml:space="preserve">
          <source>Read only. Gets pixel size used in scaling font glyphs for this &lt;a href=&quot;#pygame.freetype.Font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523183a526ca5d4420ecef654e510b9a411fdcbe" translate="yes" xml:space="preserve">
          <source>Read only. Gets the height of the font. This is the average value of all glyphs in the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2499af05c8e8a7481dd689abc2d643d8ed10c8b" translate="yes" xml:space="preserve">
          <source>Read only. Return the height in font units for the font descent. The descent is the number of units from the font's baseline to the bottom of the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fba813565a4b1747791222cb83f87608b5ed857" translate="yes" xml:space="preserve">
          <source>Read only. Return the number of units from the font's baseline to the top of the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90f0ecbab4d9a689001f46c8386b746f91314c9" translate="yes" xml:space="preserve">
          <source>Read only. Returns &lt;code&gt;True&lt;/code&gt; if the font contains fixed-width characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8cea69cefbecd95c08cdb0ce28a61923170d52" translate="yes" xml:space="preserve">
          <source>Read only. Returns &lt;code&gt;True&lt;/code&gt; if the font contains outline glyphs. If so, the point size is not limited to available bitmap sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f838d7a1ec3a0deace7d72a29c9ad3d7086721" translate="yes" xml:space="preserve">
          <source>Read only. Returns the number of point sizes for which the font contains bitmap character images. If zero then the font is not a bitmap font. A scalable font may contain pre-rendered point sizes as strikes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b9fb0d8e8a88e780c062d99076974b7a4014b1" translate="yes" xml:space="preserve">
          <source>Read only. Returns the path of the loaded font file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc93911a725213c75c396216c366df87c45c50f" translate="yes" xml:space="preserve">
          <source>Read only. Returns the real (long) name of the font, as recorded in the font file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70253bd5984582916fc0fbb30b794ee9b2b7185" translate="yes" xml:space="preserve">
          <source>Read-only. The event type identifier. For user created event objects, this is the &lt;code&gt;type&lt;/code&gt; argument passed to &lt;a href=&quot;#pygame.event.Event&quot;&gt;&lt;code&gt;pygame.event.Event()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba0ea54d165ebbab1c0f50c422dc056a536ff38" translate="yes" xml:space="preserve">
          <source>Read-only. The event type specific attributes of an event. The &lt;code&gt;dict&lt;/code&gt; attribute is a synonym for backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db786eafc62137dac943ac5e7c2d5221619c259c" translate="yes" xml:space="preserve">
          <source>Reads from the input buffer and gives back midi events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29a653db2d7bf417b20651a7c7a696090d6bbaa" translate="yes" xml:space="preserve">
          <source>Rect</source>
          <target state="translated">Rect</target>
        </trans-unit>
        <trans-unit id="68535e5b71267f74b8e2e1794546bc8c3b7b5ddc" translate="yes" xml:space="preserve">
          <source>Rect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple/list. e.g. &lt;code&gt;rect.collidedict({tuple(key_rect) : value})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05352cf98530c972ffea1dddb46ac71865bee39b" translate="yes" xml:space="preserve">
          <source>Rect objects cannot be used as keys in a dictionary (they are not hashable), so they must be converted to a tuple/list. e.g. &lt;code&gt;rect.collidedictall({tuple(key_rect) : value})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59e49b56cffa267673f26d064942780d0246656" translate="yes" xml:space="preserve">
          <source>Rect.clamp()</source>
          <target state="translated">Rect.clamp()</target>
        </trans-unit>
        <trans-unit id="dcb1d9ad574aac507cfbeb39f6fbfd5c4ee1dbf8" translate="yes" xml:space="preserve">
          <source>Rect.clamp_ip()</source>
          <target state="translated">Rect.clamp_ip()</target>
        </trans-unit>
        <trans-unit id="c1922751c7fae06f5894aba64f62a835888e0bc1" translate="yes" xml:space="preserve">
          <source>Rect.clip()</source>
          <target state="translated">Rect.clip()</target>
        </trans-unit>
        <trans-unit id="b234fabeb60da6c1c9c10a834baf8f547915154b" translate="yes" xml:space="preserve">
          <source>Rect.collidedict()</source>
          <target state="translated">Rect.collidedict()</target>
        </trans-unit>
        <trans-unit id="a0ad1ec4641a8c26a86b8b04295ae86b00946fd3" translate="yes" xml:space="preserve">
          <source>Rect.collidedictall()</source>
          <target state="translated">Rect.collidedictall()</target>
        </trans-unit>
        <trans-unit id="41a7ce4b0ac2dcd3bd7d5a9817f0f3040a064fb8" translate="yes" xml:space="preserve">
          <source>Rect.collidelist()</source>
          <target state="translated">Rect.collidelist()</target>
        </trans-unit>
        <trans-unit id="11cf60b51c480c3ea5720337da3bf93eca732293" translate="yes" xml:space="preserve">
          <source>Rect.collidelistall()</source>
          <target state="translated">Rect.collidelistall()</target>
        </trans-unit>
        <trans-unit id="e0d448241449f3552d5214d3cddfabc7299e6703" translate="yes" xml:space="preserve">
          <source>Rect.collidepoint()</source>
          <target state="translated">Rect.collidepoint()</target>
        </trans-unit>
        <trans-unit id="47c0755d8a97c6397ff7b309ace638e6e2e3c74f" translate="yes" xml:space="preserve">
          <source>Rect.colliderect()</source>
          <target state="translated">Rect.colliderect()</target>
        </trans-unit>
        <trans-unit id="1249dcc104be3ae3e8dc3b2c11b9c2866139adea" translate="yes" xml:space="preserve">
          <source>Rect.contains()</source>
          <target state="translated">Rect.contains()</target>
        </trans-unit>
        <trans-unit id="cf3df10960b247ab48910711a5e98d1fd64929c2" translate="yes" xml:space="preserve">
          <source>Rect.copy()</source>
          <target state="translated">Rect.copy()</target>
        </trans-unit>
        <trans-unit id="251f849e768aa14c4ef180d0a6f414f0aa144ef4" translate="yes" xml:space="preserve">
          <source>Rect.fit()</source>
          <target state="translated">Rect.fit()</target>
        </trans-unit>
        <trans-unit id="0c229589cd5a943cb6d0c8396f1f041eea43eb7d" translate="yes" xml:space="preserve">
          <source>Rect.inflate()</source>
          <target state="translated">Rect.inflate()</target>
        </trans-unit>
        <trans-unit id="a9cfa9e276e30a0bcb1b418d5d95a2988309f6ef" translate="yes" xml:space="preserve">
          <source>Rect.inflate_ip()</source>
          <target state="translated">Rect.inflate_ip()</target>
        </trans-unit>
        <trans-unit id="b63f08ab79b26d772ca5dc44a5e445b5bc0341cb" translate="yes" xml:space="preserve">
          <source>Rect.move()</source>
          <target state="translated">Rect.move()</target>
        </trans-unit>
        <trans-unit id="1758bb7db929a1d1b2ca0b7bd1303a2d1d170605" translate="yes" xml:space="preserve">
          <source>Rect.move_ip()</source>
          <target state="translated">Rect.move_ip()</target>
        </trans-unit>
        <trans-unit id="77318f7b6e037c6433db5448f6b11d18466d43ee" translate="yes" xml:space="preserve">
          <source>Rect.normalize()</source>
          <target state="translated">Rect.normalize()</target>
        </trans-unit>
        <trans-unit id="68403680ea1f7d71409dd3f43fa76266c9602f0e" translate="yes" xml:space="preserve">
          <source>Rect.union()</source>
          <target state="translated">Rect.union()</target>
        </trans-unit>
        <trans-unit id="d6b450507b0642d060396bdd4bdd7047d03d53f9" translate="yes" xml:space="preserve">
          <source>Rect.union_ip()</source>
          <target state="translated">Rect.union_ip()</target>
        </trans-unit>
        <trans-unit id="ad0d245e114ffce6a16ced32df6955f58d069e66" translate="yes" xml:space="preserve">
          <source>Rect.unionall()</source>
          <target state="translated">Rect.unionall()</target>
        </trans-unit>
        <trans-unit id="07454386e354b40243a4146c9377f023b6f8dc67" translate="yes" xml:space="preserve">
          <source>Rect.unionall_ip()</source>
          <target state="translated">Rect.unionall_ip()</target>
        </trans-unit>
        <trans-unit id="4c8145f1815d0213235a1ed95c6c88bbfd724a7a" translate="yes" xml:space="preserve">
          <source>Reference pixel alphas into a 2d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d797dcae7e1b1df6ccd5abca82375188a0a85a6" translate="yes" xml:space="preserve">
          <source>Reference pixel blue into a 2d array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8c0ffc510703381793ce727702f1611e3f0f5e" translate="yes" xml:space="preserve">
          <source>Reference pixel green into a 2d array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdb24725c625163cd60819e4d05410d340e8029" translate="yes" xml:space="preserve">
          <source>Reference pixel red into a 2d array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672bc002028c919ec00c8d8a53d0248227c8e361" translate="yes" xml:space="preserve">
          <source>Reference pixels into a 2d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff3b85a69eb07ec47840ef2a860b8e17a2e5064" translate="yes" xml:space="preserve">
          <source>Reference pixels into a 3d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f618d98348d1495b3140e217888d40932569d12" translate="yes" xml:space="preserve">
          <source>Remove any number of Sprites from the Group. This will only remove Sprites that are already members of the Group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca6e26963f96d15f309a24151fbd40c72d472ba" translate="yes" xml:space="preserve">
          <source>Removes all Sprites from this Group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0601b443c8e50e5fdeefb306caa6aa0361b68ed9" translate="yes" xml:space="preserve">
          <source>Removes all events from the queue. If &lt;code&gt;eventtype&lt;/code&gt; is given, removes the given event or sequence of events. This has the same effect as &lt;a href=&quot;#pygame.event.get&quot;&gt;&lt;code&gt;pygame.event.get()&lt;/code&gt;&lt;/a&gt; except &lt;code&gt;None&lt;/code&gt; is returned. It can be slightly more efficient when clearing a full event queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa395a9b07590042e0939f0ecb0565877f04920" translate="yes" xml:space="preserve">
          <source>Render text into an array of ints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c0a425a382a78416218014bcc976cd0c71f784" translate="yes" xml:space="preserve">
          <source>Render text onto an existing surface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b21bb0d0ffd6a5643a924bf0e1d1e5d1bafb9" translate="yes" xml:space="preserve">
          <source>Render to an array object exposing an array struct interface. The array must be two dimensional with integer items. The default &lt;em&gt;dest&lt;/em&gt; value, &lt;code&gt;None&lt;/code&gt;, is equivalent to position (0, 0). See &lt;a href=&quot;#pygame.freetype.Font.render_to&quot;&gt;&lt;code&gt;render_to()&lt;/code&gt;&lt;/a&gt;. As with the other render methods, &lt;em&gt;text&lt;/em&gt; can be &lt;code&gt;None&lt;/code&gt; to render a text string passed previously to another method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741b07d8c89ced02b681ed5bee9aa2a5a2001f71" translate="yes" xml:space="preserve">
          <source>RenderUpdates sub-class that draws Sprites in order of addition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4add72ecdf66359c8644e32e6a3d1984f90123c9" translate="yes" xml:space="preserve">
          <source>Renders the string &lt;em&gt;text&lt;/em&gt; to the &lt;a href=&quot;surface#pygame.Surface&quot;&gt;&lt;code&gt;pygame.Surface&lt;/code&gt;&lt;/a&gt;&lt;em&gt;surf&lt;/em&gt;, at position &lt;em&gt;dest&lt;/em&gt;, a (x, y) surface coordinate pair. If either x or y is not an integer it is converted to one if possible. Any sequence where the first two items are x and y positional elements is accepted, including a &lt;a href=&quot;rect#pygame.Rect&quot;&gt;&lt;code&gt;Rect&lt;/code&gt;&lt;/a&gt; instance. As with &lt;a href=&quot;#pygame.freetype.Font.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt;, optional &lt;em&gt;fgcolor&lt;/em&gt;, &lt;em&gt;style&lt;/em&gt;, &lt;em&gt;rotation&lt;/em&gt;, and &lt;em&gt;size&lt;/em&gt; argument are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298923e081edfef4386796b472ffdd0c363a328c" translate="yes" xml:space="preserve">
          <source>Replaces the passed color in the PixelArray with another one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ad6f8d5c111a2ebbd81c172053421a52067ac6" translate="yes" xml:space="preserve">
          <source>Replaces the pixels with the passed color in the PixelArray by changing them them to the passed replacement color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e320554a22c43a7c823271e410af0dac925c9f" translate="yes" xml:space="preserve">
          <source>Request an OpenGL display attribute for the display mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c716eaf3170f2d1f13ddeeccdaaf2412678661" translate="yes" xml:space="preserve">
          <source>Request the window for the display surface be iconified or hidden. Not all systems and displays support an iconified display. The function will return True if successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d9010f416942c6a657402907d7d8af3f68483e" translate="yes" xml:space="preserve">
          <source>Reserves a &lt;code&gt;pygame.USEREVENT&lt;/code&gt; for a custom use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c042b10d3d3d0e7c028276032021958dd22e44" translate="yes" xml:space="preserve">
          <source>Resets playback of the current music to the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1411987e25e8b03db263ee1b497fb126c88f87b5" translate="yes" xml:space="preserve">
          <source>Resizes a mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c139bbf920d53cfab7efa78a69cb64e143bc13cd" translate="yes" xml:space="preserve">
          <source>Resizes the Surface to a new resolution. This is a fast scale operation that does not sample the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b77f88bc5eb7577c917e54764bf430ebc9f8961" translate="yes" xml:space="preserve">
          <source>Resources such as images and sounds for the examples are found in the pygame/examples/data subdirectory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec80629102fe8b28243f5f3bdc3538194429c59" translate="yes" xml:space="preserve">
          <source>Resume the playback on a paused channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d15e9abe6dc347ec49578956d0a2ee7c745c68" translate="yes" xml:space="preserve">
          <source>Retrieves the data for the specified type from the clipboard. In python 3 the data is returned as a byte string and might need further processing (such as decoding to Unicode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b015d3dcf77272f773f99a0e98f1f7f05dec98e5" translate="yes" xml:space="preserve">
          <source>Return False if there is a cdrom currently in the drive. If the drive is empty this will return True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a9a91c15fb07c0ce2fc8e18e612d95aa6e678b" translate="yes" xml:space="preserve">
          <source>Return True if the Group contains all of the given sprites. This is similar to using the &quot;in&quot; operator on the Group (&quot;if sprite in group: ...&quot;), which tests if a single Sprite belongs to a Group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26438be898f27a0c48aac30f76cd291738bc17f5" translate="yes" xml:space="preserve">
          <source>Return True when the font bold rendering mode is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13001f0b91ab57771ba053e1f56cca84a1265084" translate="yes" xml:space="preserve">
          <source>Return True when the font italic rendering mode is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81530407a9fe1bbecd739adfd6f46efb45677cf5" translate="yes" xml:space="preserve">
          <source>Return True when the font underline is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af076fba067703c60d49a1f2a2cb30d34bedec86" translate="yes" xml:space="preserve">
          <source>Return a Channel object for one of the current channels. The id must be a value from 0 to the value of &lt;code&gt;pygame.mixer.get_num_channels()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d1ed55ae9a760709c879633424ecac4163e337" translate="yes" xml:space="preserve">
          <source>Return a buffer object for the pixels of the Surface. The buffer can be used for direct pixel access and manipulation. Surface pixel data is represented as an unstructured block of memory, with a start address and length in bytes. The data need not be contiguous. Any gaps are included in the length, but otherwise ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056f4848da6601593777921053cb25d7afdb6361" translate="yes" xml:space="preserve">
          <source>Return a copy of the &lt;code&gt;RGBA&lt;/code&gt; Color value at the given pixel. If the Surface has no per pixel alpha, then the alpha value will always be 255 (opaque). If the pixel position is outside the area of the Surface an &lt;code&gt;IndexError&lt;/code&gt; exception will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c586721102ea2ff1c164c96ae960141777bb28" translate="yes" xml:space="preserve">
          <source>Return a copy of the Sound object buffer as a bytes (for Python 3.x) or str (for Python 2.x) object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424cb6446103b74e650ecc6b396e7c7e4828b8c7" translate="yes" xml:space="preserve">
          <source>Return a description of the last error which occurred in the FreeType2 library, or None if no errors have occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ddcb78fe308bb1e632c1f27054fbe76e34e64e" translate="yes" xml:space="preserve">
          <source>Return a dict for the finger &lt;code&gt;index&lt;/code&gt; active on &lt;code&gt;touchid&lt;/code&gt;. The dict contains these keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a57487e70d311a04764becf3a468cc871d6be9a" translate="yes" xml:space="preserve">
          <source>Return a floating point value in seconds of the length of the cdrom track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adb50869241c614e9154bc8bd9ca02e9850cfa2" translate="yes" xml:space="preserve">
          <source>Return a list containing all Sprites in a Group that intersect with another Sprite. Intersection is determined by comparing the &lt;code&gt;Sprite.rect&lt;/code&gt; attribute of each Sprite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38a47cc33ee80d8ee8ee7300b6d32bfc8e0d10e" translate="yes" xml:space="preserve">
          <source>Return a list of all the Groups that contain this Sprite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b85519b1ea8f3f13aa3cc976498491a09fd9358" translate="yes" xml:space="preserve">
          <source>Return a list of all the Sprites this group contains. You can also get an iterator from the group, but you cannot iterator over a Group while modifying it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39077ce4028cba25f55636d3f63bf75b4fe381b6" translate="yes" xml:space="preserve">
          <source>Return a list of up to 256 color elements that represent the indexed colors used in an 8-bit Surface. The returned list is a copy of the palette, and changes will have no effect on the Surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9bd71dc02663566480c39785e5c415e5ed5389" translate="yes" xml:space="preserve">
          <source>Return a list with information for every track on the cdrom. The information consists of a tuple with four values. The audio value is True if the track contains audio data. The start, end, and length values are floating point numbers in seconds. Start and end represent absolute times on the entire disc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76b3c70f37ead696665daf73aea3c0d5e09930c" translate="yes" xml:space="preserve">
          <source>Return a new Font object that is loaded from the system fonts. The font will match the requested &lt;em&gt;bold&lt;/em&gt; and &lt;em&gt;italic&lt;/em&gt; flags. If a suitable system font is not found, a default, Pygame, is returned instead. The font &lt;em&gt;name&lt;/em&gt; can be a comma separated list of font names to search for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fedb74b2d73e625861102c3d9ee981cc866f171" translate="yes" xml:space="preserve">
          <source>Return a new Font object that is loaded from the system fonts. The font will match the requested bold and italic flags. If a suitable system font is not found this will fall back on loading the default pygame font. The font name can be a comma separated list of font names to look for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7de2f25909e6337c8eb0fbeb6109a5fae44354" translate="yes" xml:space="preserve">
          <source>Return a rectangle of the current clipping area. The Surface will always return a valid rectangle that will never be outside the bounds of the image. If the Surface has had &lt;code&gt;None&lt;/code&gt; set for the clipping area, the Surface will return a rectangle with the full area of the Surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23966783e05e33784f0ce4f18cb28e0126c22972" translate="yes" xml:space="preserve">
          <source>Return a reference to the currently set display Surface. If no display mode has been set this will return None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e78a8585e4276c4cdb445e52630965cb3bded0" translate="yes" xml:space="preserve">
          <source>Return a value from 0.0 to 1.0 representing the volume for this Sound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720e06312984ea6a354ec5914defb8d3897d92da" translate="yes" xml:space="preserve">
          <source>Return an integer id associated with the given &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727d5af1f6ad93671e19d3ea911c3e2bdf1e2f07" translate="yes" xml:space="preserve">
          <source>Return an object which exports a surface's internal pixel buffer as a C level array struct, Python level array interface or a C level buffer interface. The pixel buffer is writeable. The new buffer protocol is supported for Python 2.6 and up in CPython. The old buffer protocol is also supported for Python 2.x. The old buffer data is in one segment for kind '0', multi-segment for other buffer view kinds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e7d9a226a67afc3fec2607e2021035806d5c69" translate="yes" xml:space="preserve">
          <source>Return rendered text as a string of bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0baf835f9e940b3ea85c76eab15b03e0c47085a8" translate="yes" xml:space="preserve">
          <source>Return rendered text as a surface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f9e99acc58749da31718e35fd90b9cecea9065" translate="yes" xml:space="preserve">
          <source>Return the FreeType version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9509e34dcbc241b9a9ebf838d4327328408c68d6" translate="yes" xml:space="preserve">
          <source>Return the absolute time in seconds where at start of the cdrom track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1203bf45b3b6975054a0969a0272edf28ec15c9e" translate="yes" xml:space="preserve">
          <source>Return the actual Sound object currently playing on this channel. If the channel is idle &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcf5a1efe4a62ed62b831462e27634d45d1ee7c" translate="yes" xml:space="preserve">
          <source>Return the current alpha value for the Surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003d2546c11f7c1351fc70f52fef469750ba969f" translate="yes" xml:space="preserve">
          <source>Return the current colorkey value for the Surface. If the colorkey is not set then &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ab40681037357eb822f4d1fb9cc62c0948183d" translate="yes" xml:space="preserve">
          <source>Return the default device ID or &lt;code&gt;-1&lt;/code&gt; if there are no devices. The result can be passed to the &lt;a href=&quot;#pygame.midi.Input&quot;&gt;&lt;code&gt;Input&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#pygame.midi.Output&quot;&gt;&lt;code&gt;Output&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d14a0bf1c689dc6f1186b72dff7921543e77d9" translate="yes" xml:space="preserve">
          <source>Return the default pixel size in dots per inch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8b18932e45940a8c79e66257729fc73d0628dc" translate="yes" xml:space="preserve">
          <source>Return the filename of the default pygame font. This is not the full path to the file. The file is usually in the same directory as the font module, but can also be bundled in a separate archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babe0967d3209a5b9c357dff64ab69f33b78d796" translate="yes" xml:space="preserve">
          <source>Return the filename of the system font. This is not the full path to the file. This file can usually be found in the same directory as the font module, but it can also be bundled in separate archives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe17cec53ee5306d1536126105853f0e3a13f37" translate="yes" xml:space="preserve">
          <source>Return the glyph bounding box height of the font in pixels. This is the average value of all glyphs in the font. It is not adjusted for strong or rotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa8ec2cfe1dd1d39fd1ba0f19589d9ba8fdc01a" translate="yes" xml:space="preserve">
          <source>Return the glyph case size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b633a462298b1581e8f0ab3725de9ec861370b5c" translate="yes" xml:space="preserve">
          <source>Return the glyph metrics for the given text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deffda1bc38e5137c7e5178ff5eac920382c97d0" translate="yes" xml:space="preserve">
          <source>Return the height in pixels for a line of text with the font. When rendering multiple lines of text this is the recommended amount of space between lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f687ab6918f18d11ffab434b269ca60ebff8c2f" translate="yes" xml:space="preserve">
          <source>Return the height in pixels for the font ascent. The ascent is the number of pixels from the font baseline to the top of the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aece7bea1715a5acdf44b5f317ae25dc7c84179" translate="yes" xml:space="preserve">
          <source>Return the height in pixels for the font descent. The descent is the number of pixels from the font baseline to the bottom of the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab840b74bc7528d09d9e2a52849d87883634cbd" translate="yes" xml:space="preserve">
          <source>Return the height in pixels of the actual rendered text. This is the average size for each glyph in the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435705b776bdfba1c889c3ef17fcccb4888c9760" translate="yes" xml:space="preserve">
          <source>Return the height of the Surface in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efab968f46e145256bae81a90a47d56390cb1457" translate="yes" xml:space="preserve">
          <source>Return the integer value of the given pixel. If the pixel position is outside the area of the Surface an &lt;code&gt;IndexError&lt;/code&gt; exception will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89d8822323a2beb2427394b011d07c12637ac52" translate="yes" xml:space="preserve">
          <source>Return the latest FreeType error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5725df1ff6fefa8e233b6cbb95d0f2d0c7ae94" translate="yes" xml:space="preserve">
          <source>Return the least significant number of bits stripped from each color in a mapped integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b8787ba57d96264f3b9f321baa64eedfd1562c" translate="yes" xml:space="preserve">
          <source>Return the length of this Sound in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3854cd6647e633f61ea99e7f9d014576ecdf8abb" translate="yes" xml:space="preserve">
          <source>Return the number of active channels this sound is playing on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae79202a7d4cd0aa86570210872090d7f212766" translate="yes" xml:space="preserve">
          <source>Return the number of available touch devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201261811712b814eaa31360e586f851b06e5569" translate="yes" xml:space="preserve">
          <source>Return the number of bytes separating each row in the Surface. Surfaces in video memory are not always linearly packed. Subsurfaces will also have a larger pitch than their real width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bbe1bfa10a39979ce38201c10cd53f35697327" translate="yes" xml:space="preserve">
          <source>Return the number of bytes used per pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c8c1e40cf8f3ed1e67db05a5dd455ba2aac77e" translate="yes" xml:space="preserve">
          <source>Return the number of cd drives on the system. When you create &lt;code&gt;CD&lt;/code&gt; objects you need to pass an integer id that must be lower than this count. The count will be 0 if there are no drives on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699052de2262d3da4d82d51ab17a6732f174ca5d" translate="yes" xml:space="preserve">
          <source>Return the number of displays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0c9e9af789455df1c1451117556c77baa959d9" translate="yes" xml:space="preserve">
          <source>Return the number of fingers active for the touch device whose id is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c00ab4a2762b344efd4210d57be8414efd4ee85" translate="yes" xml:space="preserve">
          <source>Return the number of joystick devices on the system. The count will be 0 if there are no joysticks on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab4e7dd68b0e80314d44da17f1c51a1b2bebd36" translate="yes" xml:space="preserve">
          <source>Return the number of milliseconds since &lt;code&gt;pygame.init()&lt;/code&gt; was called. Before pygame is initialized this will always be 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c38d8a9082bf3076403f1a07b14ce0d45609f6" translate="yes" xml:space="preserve">
          <source>Return the number of pixels from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1f381f868eded5868f83958d69575e7bb75b48" translate="yes" xml:space="preserve">
          <source>Return the number of tracks on the cdrom in the drive. This will return zero of the drive is empty or has no tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066da10c315ccfa59b879c1a0e27504f5f34b902" translate="yes" xml:space="preserve">
          <source>Return the number of units from the font's baseline to the top of the bounding box. It is not adjusted for strong or rotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f59962ad9fe9ccf657fd8e4df186871ffce643" translate="yes" xml:space="preserve">
          <source>Return the size and offset of rendered text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86351c8247da8bee58bd186a0e07eb2bb93bbc2" translate="yes" xml:space="preserve">
          <source>Return the size of the window or screen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f0d9e46faa627ec53f7dc4c3ff9bd066387c65" translate="yes" xml:space="preserve">
          <source>Return the string name of the drive. This is the system name used to represent the drive. It is often the drive letter or device name. This method can work on an uninitialized &lt;code&gt;CD&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e3cd309bb3b848eed4dcf75580ddd25dbc1cfc" translate="yes" xml:space="preserve">
          <source>Return the volume of the channel for the current playing sound. This does not take into account stereo separation used by &lt;a href=&quot;#pygame.mixer.Channel.set_volume&quot;&gt;&lt;code&gt;Channel.set_volume()&lt;/code&gt;&lt;/a&gt;. The Sound object also has its own volume which is mixed with the channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d3ccfa743b37fb03607feaec835b1588c42b96" translate="yes" xml:space="preserve">
          <source>Return the width and height of the Surface in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6231441ac8bf32841986f5478f48edcc66a6a10f" translate="yes" xml:space="preserve">
          <source>Return the width of the Surface in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8246453c6e901bbc2e4288b43a47949404da068a" translate="yes" xml:space="preserve">
          <source>Return type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0f4aca16fcfaa6cac730d783925636f5e4b5c8" translate="yes" xml:space="preserve">
          <source>Return value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324fa67b5409974af9b97e4a1718faf30fc84e0c" translate="yes" xml:space="preserve">
          <source>Return wrapped exporting object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4e016ce780803baf73a247df580f302172f6cb" translate="yes" xml:space="preserve">
          <source>Returning a list of &lt;code&gt;Color(with length 3)&lt;/code&gt; instances instead of tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41e53e3cf3582ea35b09f3c3e485c1750298100" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if pygame is currently initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebaa59e165b9e92c40d58aac84395ae47eb34ec" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the &lt;code&gt;pygame.freetype&lt;/code&gt; module is currently initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9bba30a4a89121142e9b8cf46c7accbefb10cf" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the Surface is required to be locked to access pixel data. Usually pure software Surfaces do not require locking. This method is rarely needed, since it is safe and quickest to just lock all Surfaces as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2debe033f367d74b7eabd1e0f81ebb8f4a57de" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the channel is actively mixing sound. If the channel is idle this returns &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ce6a81d706d253d5dfa809052ea717f757ab1a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the given event type is blocked from the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12826f787fb7134d9637037177eefee31f7c4d0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if the mixer is busy mixing any channels. If the mixer is idle then this return &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4cd51e8c4a5f7a30bf4ea19cc2d7883d65b1ad" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; if there are any events of the given type waiting on the queue. If a sequence of event types is passed, this will return &lt;code&gt;True&lt;/code&gt; if any of those events are on the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34a0f284df7e029c9a282e4e6a009663c8c89a9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; when the Surface is locked. It doesn't matter how many times the Surface is locked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e8f15d10829816f973144f6b06078de3fdc16b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;True&lt;/code&gt; when the input events are grabbed for this application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc1af66c5f0ea4c76ea51bfa72f1b0199a08f8d" translate="yes" xml:space="preserve">
          <source>Returns True if the &lt;a href=&quot;#module-pygame.display&quot;&gt;&lt;code&gt;pygame.display&lt;/code&gt;&lt;/a&gt; module is currently initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf68e15983c679da60feb646465cb36f381a8bb" translate="yes" xml:space="preserve">
          <source>Returns True if the &lt;code&gt;init()&lt;/code&gt; method has already been called on this Joystick object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222ef93d054a1b1b4965e86dbb8f0153b8f5674b" translate="yes" xml:space="preserve">
          <source>Returns True if the FreeType module is currently initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c3dd3deb9d48b5975d1cf1f0a51c9098503701" translate="yes" xml:space="preserve">
          <source>Returns True if the display module has been initialized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6690614b37dfcf86bd745570451e3fff29c2285" translate="yes" xml:space="preserve">
          <source>Returns True if the drive busy playing back audio.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
