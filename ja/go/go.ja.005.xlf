<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="e6a6e8cadfebe9c4799e999d069f9213bb24bed9" translate="yes" xml:space="preserve">
          <source>FuncOf</source>
          <target state="translated">FuncOf</target>
        </trans-unit>
        <trans-unit id="d863a41e98edea4d63050f4d41d85e38ee53432a" translate="yes" xml:space="preserve">
          <source>FuncOf returns a wrapped function.</source>
          <target state="translated">FuncOf は、ラップされた関数を返します。</target>
        </trans-unit>
        <trans-unit id="93a168211e34460ad795ada01d7598344ab1ff0e" translate="yes" xml:space="preserve">
          <source>FuncOf returns the function type with the given argument and result types. For example if k represents int and e represents string, FuncOf([]Type{k}, []Type{e}, false) represents func(int) string.</source>
          <target state="translated">FuncOfは、与えられた引数と結果の型を持つ関数の型を返します。例えば、kがintでeが文字列の場合、FuncOf([]Type{k},[]Type{e},false)はfunc(int)の文字列を表します。</target>
        </trans-unit>
        <trans-unit id="e545c5b7597389c332937a417c6dbb10d7b9c2b9" translate="yes" xml:space="preserve">
          <source>Funcs adds the elements of the argument map to the template's function map. It must be called before the template is parsed. It panics if a value in the map is not a function with appropriate return type or if the name cannot be used syntactically as a function in a template. It is legal to overwrite elements of the map. The return value is the template, so calls can be chained.</source>
          <target state="translated">Funcsは、引数マップの要素をテンプレートの関数マップに追加します。テンプレートが解析される前に呼び出されなければなりません。マップ内の値が適切な戻り値型を持つ関数でない場合や、その名前がテンプレート内の関数として構文的に使用できない場合にパニックになります。マップの要素を上書きするのはご法度です。戻り値はテンプレートなので、呼び出しは連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="d356e92562acfcaf97196969d96dd79e05dacf25" translate="yes" xml:space="preserve">
          <source>Funcs adds the elements of the argument map to the template's function map. It must be called before the template is parsed. It panics if a value in the map is not a function with appropriate return type. However, it is legal to overwrite elements of the map. The return value is the template, so calls can be chained.</source>
          <target state="translated">Funcsは、引数マップの要素をテンプレートの関数マップに追加します。テンプレートが解析される前に呼び出す必要があります。マップ内の値が適切な戻り値型を持つ関数でない場合はパニックになります。ただし、マップの要素を上書きすることは合法です。戻り値はテンプレートなので、呼び出しは連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="8c10d9660a016948a806bd8cbcad3722d8e6bc88" translate="yes" xml:space="preserve">
          <source>Functions and channels will not be sent in a gob. Attempting to encode such a value at the top level will fail. A struct field of chan or func type is treated exactly like an unexported field and is ignored.</source>
          <target state="translated">関数やチャンネルはゴブでは送信されません。そのような値をトップレベルでエンコードしようとすると失敗します。chan 型や func 型の struct フィールドは、エクスポートされていないフィールドと同じように扱われ、無視されます。</target>
        </trans-unit>
        <trans-unit id="515fb65b2b3a55f3a5ea9024aecd183d10145a5b" translate="yes" xml:space="preserve">
          <source>Functions of the form</source>
          <target state="translated">フォームの機能</target>
        </trans-unit>
        <trans-unit id="5bde1b79ff9cf2a64313aa293a07d05136a9d65d" translate="yes" xml:space="preserve">
          <source>Functions starting with &quot;Is&quot; can be used to inspect which table of range a rune belongs to. Note that runes may fit into more than one range.</source>
          <target state="translated">Is &quot;で始まる関数は、ルーンがどの範囲のテーブルに属しているかを調べるために使用することができます。ルーンは複数の範囲に入ることがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="14038939956e123c4daa0060310ed80bf1b7a49d" translate="yes" xml:space="preserve">
          <source>GC runs a garbage collection and blocks the caller until the garbage collection is complete. It may also block the entire program.</source>
          <target state="translated">GC はガベージコレクションを実行し、ガベージコレクションが完了するまで呼び出し元をブロックします。また、プログラム全体をブロックすることもあります。</target>
        </trans-unit>
        <trans-unit id="c1dacc63b01c8608c5a77320640ce147950f96e1" translate="yes" xml:space="preserve">
          <source>GCD sets z to the greatest common divisor of a and b, which both must be &amp;gt; 0, and returns z. If x or y are not nil, GCD sets their value such that z = a*x + b*y. If either a or b is &amp;lt;= 0, GCD sets z = x = y = 0.</source>
          <target state="translated">GCDは、zをaとbの最大公約数に設定します。これらは両方とも&amp;gt; 0でなければならず、zを返します。xまたはyがnilでない場合、GCDはz = a * x + b * yとなるように値を設定します。aまたはbのいずれかが0以下の場合、GCDはz = x = y = 0を設定します。</target>
        </trans-unit>
        <trans-unit id="19dd357da96d7272320f7fadf3fd2965c024dba5" translate="yes" xml:space="preserve">
          <source>GCStats collect information about recent garbage collections.</source>
          <target state="translated">GCStats は最近のゴミ収集に関する情報を収集します。</target>
        </trans-unit>
        <trans-unit id="d010209a0c3d0dee637f5259dfa34515f68772df" translate="yes" xml:space="preserve">
          <source>GIF represents the possibly multiple images stored in a GIF file.</source>
          <target state="translated">GIFは、GIFファイルに格納されている可能性のある複数の画像を表します。</target>
        </trans-unit>
        <trans-unit id="f62024646db1c94f452ef8c25337fad08f62d18e" translate="yes" xml:space="preserve">
          <source>GOARCH is the running program's architecture target: one of 386, amd64, arm, s390x, and so on.</source>
          <target state="translated">GOARCH は実行中のプログラムのアーキテクチャターゲットです:386,amd64,arm,s390x,などのいずれかです。</target>
        </trans-unit>
        <trans-unit id="cb34b31ce447e79881d19460e35c7075fc05a81a" translate="yes" xml:space="preserve">
          <source>GOMAXPROCS sets the maximum number of CPUs that can be executing simultaneously and returns the previous setting. If n &amp;lt; 1, it does not change the current setting. The number of logical CPUs on the local machine can be queried with NumCPU. This call will go away when the scheduler improves.</source>
          <target state="translated">GOMAXPROCSは、同時に実行できるCPUの最大数を設定し、以前の設定を返します。n &amp;lt;1の場合、現在の設定は変更されません。ローカルマシン上の論理CPUの数は、NumCPUで照会できます。この呼び出しは、スケジューラーが改善されると消えます。</target>
        </trans-unit>
        <trans-unit id="ad65293e987b4a4c08430d0e000aecbc1854ac24" translate="yes" xml:space="preserve">
          <source>GOOS is the running program's operating system target: one of darwin, freebsd, linux, and so on. To view possible combinations of GOOS and GOARCH, run &quot;go tool dist list&quot;.</source>
          <target state="translated">GOOSは実行中のプログラムのオペレーティングシステムのターゲットです:darwin,freebsd,linuxなどのいずれかです。GOOS と GOARCH の組み合わせを見るには &quot;go tool dist list&quot; を実行してください。</target>
        </trans-unit>
        <trans-unit id="7bb230fcc10199af1bb88085306db7998e9674cd" translate="yes" xml:space="preserve">
          <source>GOROOT returns the root of the Go tree. It uses the GOROOT environment variable, if set at process start, or else the root used during the Go build.</source>
          <target state="translated">GOROOT は Go ツリーのルートを返します。プロセス開始時に設定されている場合はGOROOT環境変数を使用し、そうでない場合はGoビルド時に使用されたルートを使用します。</target>
        </trans-unit>
        <trans-unit id="3552a70e477a364f8e82a292dad18f46a2ad988b" translate="yes" xml:space="preserve">
          <source>Gamma returns the Gamma function of x.</source>
          <target state="translated">Gammaは、xのガンマ関数を返します。</target>
        </trans-unit>
        <trans-unit id="a2672eb4dac0440844556fb66fa39b9edb2d2041" translate="yes" xml:space="preserve">
          <source>General:</source>
          <target state="translated">General:</target>
        </trans-unit>
        <trans-unit id="453efae49cba4a01a09c987414ab329ee6c4a305" translate="yes" xml:space="preserve">
          <source>Generally Get, Post, or PostForm will be used instead of Do.</source>
          <target state="translated">一般的には、Do の代わりに Get,Post,PostForm を使用します。</target>
        </trans-unit>
        <trans-unit id="1c57b54aace051c9a60fd146f5087c013aa2d721" translate="yes" xml:space="preserve">
          <source>GenerateKey generates a public and private key pair.</source>
          <target state="translated">GenerateKeyは公開鍵と秘密鍵のペアを生成します。</target>
        </trans-unit>
        <trans-unit id="db1ff76045ebe9cc510f3c31601ddcbcd7fd57de" translate="yes" xml:space="preserve">
          <source>GenerateKey generates a public&amp;amp;private key pair. The Parameters of the PrivateKey must already be valid (see GenerateParameters).</source>
          <target state="translated">GenerateKeyは、公開鍵と秘密鍵のペアを生成します。PrivateKeyのパラメーターは既に有効である必要があります（GenerateParametersを参照）。</target>
        </trans-unit>
        <trans-unit id="e650907b55be64a19300b70e59344d22b7245e9b" translate="yes" xml:space="preserve">
          <source>GenerateKey generates a public/private key pair using entropy from rand. If rand is nil, crypto/rand.Reader will be used.</source>
          <target state="translated">GenerateKeyは、randからエントロピーを使用して公開鍵/秘密鍵ペアを生成します。randがnilの場合は、crypto/rand.Readerが使用されます。</target>
        </trans-unit>
        <trans-unit id="7f11f0f6942fab0ca9f944e5798d7d37395d774c" translate="yes" xml:space="preserve">
          <source>GenerateKey generates an RSA keypair of the given bit size using the random source random (for example, crypto/rand.Reader).</source>
          <target state="translated">GenerateKey は、ランダムソースの random (例えば、crypto/rand.Reader)を使用して、指定されたビットサイズの RSA 鍵ペアを生成します。</target>
        </trans-unit>
        <trans-unit id="80806cb0e126f8dd45cfba36eccecc7429a61358" translate="yes" xml:space="preserve">
          <source>GenerateKey returns a public/private key pair. The private key is generated using the given reader, which must return random data.</source>
          <target state="translated">GenerateKey は公開鍵/秘密鍵のペアを返します。秘密鍵は、与えられたリーダを使用して生成され、ランダムなデータを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="94cfc2c7f30a1879e413d8411b7005501c966655" translate="yes" xml:space="preserve">
          <source>GenerateMultiPrimeKey generates a multi-prime RSA keypair of the given bit size and the given random source, as suggested in [1]. Although the public keys are compatible (actually, indistinguishable) from the 2-prime case, the private keys are not. Thus it may not be possible to export multi-prime private keys in certain formats or to subsequently import them into other code.</source>
          <target state="translated">GenerateMultiPrimeKeyは、[1]で提案されているように、与えられたビットサイズとランダムなソースから、 マルチプライムRSA鍵ペアを生成する。公開鍵は2-primeの場合と互換性がある(実際には区別がつかない)が、秘密鍵は互換性がない。そのため、特定の形式で複数プライムの秘密鍵をエクスポートしたり、後から他のコードにインポートしたりすることはできないかもしれない。</target>
        </trans-unit>
        <trans-unit id="51625703089c85c9211c0ab627055dec67c2bfaf" translate="yes" xml:space="preserve">
          <source>GenerateParameters puts a random, valid set of DSA parameters into params. This function can take many seconds, even on fast machines.</source>
          <target state="translated">GenerateParameters は、ランダムで有効な DSA パラメータのセットを params に入れます。この関数は、高速なマシンでも数秒かかることがあります。</target>
        </trans-unit>
        <trans-unit id="bfffd736cddd08a4eee689949c3399cb61da773b" translate="yes" xml:space="preserve">
          <source>Get</source>
          <target state="translated">Get</target>
        </trans-unit>
        <trans-unit id="2fe964aa376032085805189a0397b3cdcf676226" translate="yes" xml:space="preserve">
          <source>Get gets the first value associated with the given key. If there are no values associated with the key, Get returns &quot;&quot;. It is case insensitive; textproto.CanonicalMIMEHeaderKey is used to canonicalize the provided key. To access multiple values of a key, or to use non-canonical keys, access the map directly.</source>
          <target state="translated">Get は、指定されたキーに関連付けられた最初の値を取得します。キーに関連付けられた値がない場合、Get は &quot;&quot; を返します。大文字小文字を区別しません。textproto.CanonicalMIMEHeaderKeyは、与えられたキーを正規化するために使用されます。キーの複数の値にアクセスしたり、非正規キーを使用したりするには、マップに直接アクセスします。</target>
        </trans-unit>
        <trans-unit id="5819a3dfa32fe18b54e30756235c5c0b3e71efb0" translate="yes" xml:space="preserve">
          <source>Get gets the first value associated with the given key. If there are no values associated with the key, Get returns the empty string. To access multiple values, use the map directly.</source>
          <target state="translated">Get は、指定されたキーに関連付けられた最初の値を取得します。キーに関連付けられた値がない場合、Get は空の文字列を返します。複数の値にアクセスするには、マップを直接使用します。</target>
        </trans-unit>
        <trans-unit id="322573da1168297393f519b4b988bc100cbe0b6c" translate="yes" xml:space="preserve">
          <source>Get gets the first value associated with the given key. It is case insensitive; CanonicalMIMEHeaderKey is used to canonicalize the provided key. If there are no values associated with the key, Get returns &quot;&quot;. To access multiple values of a key, or to use non-canonical keys, access the map directly.</source>
          <target state="translated">Get は、指定したキーに関連付けられた最初の値を取得します。大文字小文字を区別しません。CanonicalMIMEHeaderKey を使用して、指定したキーを正規化します。キーに関連付けられた値がない場合、Get は &quot;&quot; を返します。キーの複数の値にアクセスしたり、非正規キーを使用したりするには、マップに直接アクセスします。</target>
        </trans-unit>
        <trans-unit id="ec73d0c593dbece5412fe884185bdca68896527d" translate="yes" xml:space="preserve">
          <source>Get is a wrapper around DefaultClient.Get.</source>
          <target state="translated">Get は DefaultClient.Get のラッパーです。</target>
        </trans-unit>
        <trans-unit id="e51f2ab7d6fbd0e2ffab583f80049b3cfc794ac8" translate="yes" xml:space="preserve">
          <source>Get issues a GET to the specified URL. If the response is one of the following redirect codes, Get follows the redirect after calling the Client's CheckRedirect function:</source>
          <target state="translated">Get は、指定された URL に GET を発行します。レスポンスが以下のリダイレクトコードのいずれかである場合、クライアントの CheckRedirect 関数を呼び出した後、Get はリダイレクトに従います。</target>
        </trans-unit>
        <trans-unit id="cff58f3ccfaec37f9252515e01360ee67558791b" translate="yes" xml:space="preserve">
          <source>Get issues a GET to the specified URL. If the response is one of the following redirect codes, Get follows the redirect, up to a maximum of 10 redirects:</source>
          <target state="translated">Get は、指定された URL に対して GET を発行します。レスポンスが以下のリダイレクトコードのいずれかである場合、Get はリダイレクトに従います。</target>
        </trans-unit>
        <trans-unit id="4af41ae2934aaf3ecc571a5a758befaaf5dd46ec" translate="yes" xml:space="preserve">
          <source>Get retrieves a named exported variable. It returns nil if the name has not been registered.</source>
          <target state="translated">Getは、名前付きエクスポートされた変数を取得します。名前が登録されていない場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="afa92ba06d138d5628558f74ba88a7e263aff277" translate="yes" xml:space="preserve">
          <source>Get returns the JavaScript property p of value v. It panics if v is not a JavaScript object.</source>
          <target state="translated">Get は、値 v の JavaScript プロパティ p を返します。</target>
        </trans-unit>
        <trans-unit id="1f152948d80d4df7cedf020669e282541979aaff" translate="yes" xml:space="preserve">
          <source>Get returns the value associated with key in the tag string. If there is no such key in the tag, Get returns the empty string. If the tag does not have the conventional format, the value returned by Get is unspecified. To determine whether a tag is explicitly set to the empty string, use Lookup.</source>
          <target state="translated">Get は、タグの文字列に含まれるキーに関連付けられた値を返します。タグにそのようなキーがない場合、Get は空の文字列を返します。タグが従来の形式を持たない場合、Get が返す値は指定されていません。タグが明示的に空文字列に設定されているかどうかを調べるには、Lookup を使用します。</target>
        </trans-unit>
        <trans-unit id="1c95403f4621e18fe8ba30c67d76e285e8214f43" translate="yes" xml:space="preserve">
          <source>Get selects an arbitrary item from the Pool, removes it from the Pool, and returns it to the caller. Get may choose to ignore the pool and treat it as empty. Callers should not assume any relation between values passed to Put and the values returned by Get.</source>
          <target state="translated">Get は、プールから任意の項目を選択し、プールから削除して呼び出し元に返します。Get は、プールを無視して空として扱うこともできます。呼び出し元は、Put に渡された値と Get が返す値との間に何の関係もないと思ってはいけません。</target>
        </trans-unit>
        <trans-unit id="c21e6716a05006be2a3b33da22f790cc4dacbd14" translate="yes" xml:space="preserve">
          <source>Get, Head, Post, and PostForm make HTTP (or HTTPS) requests:</source>
          <target state="translated">Get、Head、Post、PostForm は HTTP (または HTTPS)リクエストを行います。</target>
        </trans-unit>
        <trans-unit id="c5763aa4654b9f9e755a5247c7e85bd6431154eb" translate="yes" xml:space="preserve">
          <source>Getegid returns the numeric effective group id of the caller.</source>
          <target state="translated">Getegid は、呼び出し元の有効なグループ ID を数値で返します。</target>
        </trans-unit>
        <trans-unit id="3ce86e952faaa112161293325cc18e1e8b1d1f86" translate="yes" xml:space="preserve">
          <source>Getenv</source>
          <target state="translated">Getenv</target>
        </trans-unit>
        <trans-unit id="83272f1d9be5d707a2abc299316ecf8c20c6572e" translate="yes" xml:space="preserve">
          <source>Getenv retrieves the value of the environment variable named by the key. It returns the value, which will be empty if the variable is not present. To distinguish between an empty value and an unset value, use LookupEnv.</source>
          <target state="translated">Getenv は、キーで指定された環境変数の値を取得します。変数が存在しない場合は空の値を返します。空の値と未設定の値を区別するには、LookupEnv を使用します。</target>
        </trans-unit>
        <trans-unit id="fb87cd5bc3aee2814b4736bc86345f331ef466ad" translate="yes" xml:space="preserve">
          <source>Geteuid returns the numeric effective user id of the caller.</source>
          <target state="translated">Geteuid は、呼び出し元の有効なユーザ ID を数値で返します。</target>
        </trans-unit>
        <trans-unit id="ba1ccf148fadcaa5a423e416bb3b76de027035d5" translate="yes" xml:space="preserve">
          <source>Getgid returns the numeric group id of the caller.</source>
          <target state="translated">Getgid は、呼び出し元のグループ ID を返します。</target>
        </trans-unit>
        <trans-unit id="1a0d3dfabc3d14d5473d84c935b43760abff4984" translate="yes" xml:space="preserve">
          <source>Getgroups returns a list of the numeric ids of groups that the caller belongs to.</source>
          <target state="translated">Getgroups は、呼び出し元が所属するグループの ID のリストを返します。</target>
        </trans-unit>
        <trans-unit id="cf37c04d335f6576ae2f027091318c6f433db063" translate="yes" xml:space="preserve">
          <source>Getpagesize returns the underlying system's memory page size.</source>
          <target state="translated">Getpagesizeは、基礎となるシステムのメモリページサイズを返します。</target>
        </trans-unit>
        <trans-unit id="98c30bd03388e6d00325569f2c09cb7a5c1f7d76" translate="yes" xml:space="preserve">
          <source>Getpid returns the process id of the caller.</source>
          <target state="translated">Getpid は、呼び出し元のプロセス ID を返します。</target>
        </trans-unit>
        <trans-unit id="7d80618e0017c08138a1fb60fea1c4ec0dbcc585" translate="yes" xml:space="preserve">
          <source>Getppid returns the process id of the caller's parent.</source>
          <target state="translated">Getppid は、呼び出し元の親のプロセス ID を返します。</target>
        </trans-unit>
        <trans-unit id="ed660f2b70ea9d5fc73733f3c8d0fe3252a11e78" translate="yes" xml:space="preserve">
          <source>Getter is an interface that allows the contents of a Value to be retrieved. It wraps the Value interface, rather than being part of it, because it appeared after Go 1 and its compatibility rules. All Value types provided by this package satisfy the Getter interface.</source>
          <target state="translated">ゲッターは、Valueの内容を取得できるようにするインターフェースです。Getter は、Go 1 とその互換性ルールの後に登場したため、Value インターフェースの一部ではなくラップしています。本パッケージが提供するすべての Value 型は Getter インターフェースを満たしています。</target>
        </trans-unit>
        <trans-unit id="87c5badfd378b66a2a7ada85f8b7415911742baa" translate="yes" xml:space="preserve">
          <source>Getuid returns the numeric user id of the caller.</source>
          <target state="translated">Getuid は、呼び出し元のユーザ ID を返します。</target>
        </trans-unit>
        <trans-unit id="55e12168bb983e41918aba1691a9e5f495430b36" translate="yes" xml:space="preserve">
          <source>Getwd returns a rooted path name corresponding to the current directory. If the current directory can be reached via multiple paths (due to symbolic links), Getwd may return any one of them.</source>
          <target state="translated">Getwd は、カレントディレクトリに対応するルートパス名を返します。カレントディレクトリに複数のパス (シンボリックリンクによる)で到達できる場合、Getwd はそのうちのどれかを返すことができます。</target>
        </trans-unit>
        <trans-unit id="db8c30ea4bb862dc2beac406c90a324c6875e53e" translate="yes" xml:space="preserve">
          <source>Given that input, ReadMIMEHeader returns the map:</source>
          <target state="translated">その入力が与えられると、ReadMIMEHeaderはマップを返します。</target>
        </trans-unit>
        <trans-unit id="0d7c5c492a7ddeb919966cbf89bf311a727d8ab3" translate="yes" xml:space="preserve">
          <source>Glob ignores file system errors such as I/O errors reading directories. The only possible returned error is ErrBadPattern, when pattern is malformed.</source>
          <target state="translated">Glob は、ディレクトリの読み込みなどの I/O エラーなどのファイルシステムエラーを無視する。返される可能性のあるエラーは、パターンが不正な場合の ErrBadPattern のみです。</target>
        </trans-unit>
        <trans-unit id="5a57ea57c1f0982972dd2d2f408926f91cf67c45" translate="yes" xml:space="preserve">
          <source>Glob returns the names of all files matching pattern or nil if there is no matching file. The syntax of patterns is the same as in Match. The pattern may describe hierarchical names such as /usr/*/bin/ed (assuming the Separator is '/').</source>
          <target state="translated">Glob は、パターンにマッチするすべてのファイルの名前を返します。パターンの構文は Matchと同じです。パターンは、/usr/*/bin/ed のような階層的な名前を記述することができます (Separator が '/' であることを前提としています)。</target>
        </trans-unit>
        <trans-unit id="599aa1de3cf0d500e8e5f7d1a178d0ab1cc0a630" translate="yes" xml:space="preserve">
          <source>Global returns the JavaScript global object, usually &quot;window&quot; or &quot;global&quot;.</source>
          <target state="translated">Globalは、JavaScriptのグローバルオブジェクト(通常は &quot;window &quot;または &quot;global&quot;)を返します。</target>
        </trans-unit>
        <trans-unit id="2e0b45f2a456e8db55f08d7b65e87593a3e9a140" translate="yes" xml:space="preserve">
          <source>Go</source>
          <target state="translated">Go</target>
        </trans-unit>
        <trans-unit id="e2b7859482bcbcd7f30181447cb1227d814aecb3" translate="yes" xml:space="preserve">
          <source>Go Path</source>
          <target state="translated">パスに行く</target>
        </trans-unit>
        <trans-unit id="31c51be344c4f61c8aa40bf7e10aeaf5b3b1af91" translate="yes" xml:space="preserve">
          <source>Go Programming Language</source>
          <target state="translated">Go 言語プログラミング</target>
        </trans-unit>
        <trans-unit id="2c968e5f87e6cf184e435232ef5dd7937823c72a" translate="yes" xml:space="preserve">
          <source>Go code built with -buildmode=c-archive or -buildmode=c-shared will not install any other signal handlers by default. If there is an existing signal handler, the Go runtime will turn on the SA_ONSTACK flag and otherwise keep the signal handler. If Notify is called for an asynchronous signal, a Go signal handler will be installed for that signal. If, later, Reset is called for that signal, the original handling for that signal will be reinstalled, restoring the non-Go signal handler if any.</source>
          <target state="translated">buildmode=c-archive または -buildmode=c-shared でビルドされた Go コードは、デフォルトで他のシグナルハンドラをインストールしません。既存のシグナルハンドラがある場合、Go ランタイムは SA_ONSTACK フラグをオンにし、それ以外の場合はシグナルハンドラを保持します。非同期シグナルに対して Notify が呼び出された場合、そのシグナルに対して Go シグナルハンドラがインストールされます。後日、そのシグナルに対して Reset が呼び出された場合、そのシグナルの元の処理が再インストールされ、Go 以外のシグナルハンドラがあればそれを復元します。</target>
        </trans-unit>
        <trans-unit id="799dd6ab824dcf093ff420451386c628fa2a9520" translate="yes" xml:space="preserve">
          <source>Go code built without -buildmode=c-archive or -buildmode=c-shared will install a signal handler for the asynchronous signals listed above, and save any existing signal handler. If a signal is delivered to a non-Go thread, it will act as described above, except that if there is an existing non-Go signal handler, that handler will be installed before raising the signal.</source>
          <target state="translated">buildmode=c-archive または -buildmode=c-shared を使用せずにビルドされた Go コードは、上記の非同期シグナル用のシグナルハンドラをインストールし、既存のシグナルハンドラを保存します。シグナルが非Goスレッドに配信された場合、上述のように動作しますが、既存の非Goシグナルハンドラがある場合は、シグナルを上げる前にそのハンドラがインストールされます。</target>
        </trans-unit>
        <trans-unit id="eb5d4b3ab79b5b09438ad686f6a173b50aeb10bd" translate="yes" xml:space="preserve">
          <source>Go identifiers that appear in the words map are italicized; if the corresponding map value is not the empty string, it is considered a URL and the word is converted into a link.</source>
          <target state="translated">対応するマップ値が空文字列でない場合、それはURLとみなされ、その単語はリンクに変換されます。</target>
        </trans-unit>
        <trans-unit id="ea224aeb731dc78304c02f088e7a39cfe984c1f7" translate="yes" xml:space="preserve">
          <source>Go invokes the function asynchronously. It returns the Call structure representing the invocation. The done channel will signal when the call is complete by returning the same Call object. If done is nil, Go will allocate a new channel. If non-nil, done must be buffered or Go will deliberately crash.</source>
          <target state="translated">Go は、関数を非同期的に呼び出します。呼び出しを表す Call 構造体を返します。done チャネルは、同じ Call オブジェクトを返すことで、呼び出しが完了したことを通知します。done が nil の場合、Go は新しいチャネルを割り当てます。done が nil でない場合は、done をバッファリングしておかなければなりません。</target>
        </trans-unit>
        <trans-unit id="a7c304672885987fa9e2bc01caee3388d0b9796b" translate="yes" xml:space="preserve">
          <source>Go programs that use cgo or SWIG</source>
          <target state="translated">cgoやSWIGを使用した囲碁プログラム</target>
        </trans-unit>
        <trans-unit id="f00375ef44991e7032fc680e2e8afc5d4b4ddcac" translate="yes" xml:space="preserve">
          <source>GoStringer</source>
          <target state="translated">GoStringer</target>
        </trans-unit>
        <trans-unit id="776ec360ea626f63aba6d19bf197cc0106f28f0c" translate="yes" xml:space="preserve">
          <source>GoStringer is implemented by any value that has a GoString method, which defines the Go syntax for that value. The GoString method is used to print values passed as an operand to a %#v format.</source>
          <target state="translated">GoStringer は、その値の Go 構文を定義する GoString メソッドを持つ任意の値によって実装されます。GoString メソッドは、オペランドとして渡された値を %#v 形式に印刷するために使用されます。</target>
        </trans-unit>
        <trans-unit id="06664245ef1dbe050dbc75990b043c9e9da34427" translate="yes" xml:space="preserve">
          <source>GoWhitespace is the default value for the Scanner's Whitespace field. Its value selects Go's white space characters.</source>
          <target state="translated">GoWhitespace は、スキャナのホワイトスペースフィールドの既定値です。この値は、Goの空白文字を選択します。</target>
        </trans-unit>
        <trans-unit id="13594eb4e63d05205c24ee0d18474bb09fad234a" translate="yes" xml:space="preserve">
          <source>Gob can decode a value of any type implementing the GobDecoder or encoding.BinaryUnmarshaler interfaces by calling the corresponding method, again in that order of preference.</source>
          <target state="translated">Gob は、対応するメソッドを呼び出すことで、GobDecoder や encoding.BinaryUnmarshaler インターフェイスを実装した任意の型の値をデコードすることができます。</target>
        </trans-unit>
        <trans-unit id="7274c1618f0661ff86ead432a84f718728e78907" translate="yes" xml:space="preserve">
          <source>Gob can encode a value of any type implementing the GobEncoder or encoding.BinaryMarshaler interfaces by calling the corresponding method, in that order of preference.</source>
          <target state="translated">Gob は、GobEncoder や encoding.BinaryMarshaler インターフェイスを実装した任意の型の値を、優先順位の高い順に対応するメソッドを呼び出すことでエンコードすることができます。</target>
        </trans-unit>
        <trans-unit id="3f0664b183bab943699d699e2b7fa06d50e41b1a" translate="yes" xml:space="preserve">
          <source>GobDecode implements the gob.GobDecoder interface.</source>
          <target state="translated">GobDecode は gob.GobDecoder インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="d350a1211682bc77e1cf31df3df91c75eb68270c" translate="yes" xml:space="preserve">
          <source>GobDecode implements the gob.GobDecoder interface. The result is rounded per the precision and rounding mode of z unless z's precision is 0, in which case z is set exactly to the decoded value.</source>
          <target state="translated">GobDecode は gob.GobDecoder インターフェイスを実装しています。z の精度が 0 でない限り、結果は z の精度と丸めモードに従って丸められ、その場合は z がデコードされた値に正確に設定されます。</target>
        </trans-unit>
        <trans-unit id="dd719ca2cfb03b3cfba4caf011be5a1140872694" translate="yes" xml:space="preserve">
          <source>GobDecoder is the interface describing data that provides its own routine for decoding transmitted values sent by a GobEncoder.</source>
          <target state="translated">GobDecoderは、GobEncoderによって送信された送信値をデコードするための独自のルーチンを提供するデータを記述するインタフェースです。</target>
        </trans-unit>
        <trans-unit id="d5aa87ccb7988a5106efef8e6d2f9cae7932e9c6" translate="yes" xml:space="preserve">
          <source>GobEncode implements the gob.GobEncoder interface.</source>
          <target state="translated">GobEncode は gob.GobEncoder インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="20cb90d239fa73b1f6938fdb92b390d973a1de7f" translate="yes" xml:space="preserve">
          <source>GobEncode implements the gob.GobEncoder interface. The Float value and all its attributes (precision, rounding mode, accuracy) are marshaled.</source>
          <target state="translated">GobEncodeは、gob.GobEncoderインターフェースを実装しています。Float値とそのすべての属性(精度、丸めモード、精度)がマーシャリングされます。</target>
        </trans-unit>
        <trans-unit id="a019b8cdacb9fe6be4bcfe375ae2210cd1a4074d" translate="yes" xml:space="preserve">
          <source>GobEncoder is the interface describing data that provides its own representation for encoding values for transmission to a GobDecoder. A type that implements GobEncoder and GobDecoder has complete control over the representation of its data and may therefore contain things such as private fields, channels, and functions, which are not usually transmissible in gob streams.</source>
          <target state="translated">GobEncoder は、GobDecoder に送信するための値をエンコードするための独自の表現を提供するデータを記述するインターフェイスです。GobEncoder と GobDecoder を実装した型は、そのデータの表現を完全に制御しているため、プライベートフィールド、チャンネル、関数など、通常は gob ストリームでは伝送できないものを含むことがあります。</target>
        </trans-unit>
        <trans-unit id="3af908c6818caa06d786a8ce4e61618d352da418" translate="yes" xml:space="preserve">
          <source>Goexit terminates the goroutine that calls it. No other goroutine is affected. Goexit runs all deferred calls before terminating the goroutine. Because Goexit is not a panic, any recover calls in those deferred functions will return nil.</source>
          <target state="translated">Goexitはそれを呼び出すgoroutineを終了させます。他のgoroutineは影響を受けません。Goexitは、goroutineを終了する前に、すべての繰延関数の呼び出しを実行します。Goexit はパニックではないので、これらの繰延関数の回復呼び出しはすべて nil を返します。</target>
        </trans-unit>
        <trans-unit id="92c1b5045c151c8351b05867329857d4da35385e" translate="yes" xml:space="preserve">
          <source>GoroutineProfile returns n, the number of records in the active goroutine stack profile. If len(p) &amp;gt;= n, GoroutineProfile copies the profile into p and returns n, true. If len(p) &amp;lt; n, GoroutineProfile does not change p and returns n, false.</source>
          <target state="translated">GoroutineProfileは、アクティブなgoroutineスタックプロファイルのレコード数nを返します。len（p）&amp;gt; = nの場合、GoroutineProfileはプロファイルをpにコピーし、n、trueを返します。len（p）&amp;lt;nの場合、GoroutineProfileはpを変更せず、n、falseを返します。</target>
        </trans-unit>
        <trans-unit id="62967be4b08298e25e7959a7cdc5602a2a2be72a" translate="yes" xml:space="preserve">
          <source>Gosched yields the processor, allowing other goroutines to run. It does not suspend the current goroutine, so execution resumes automatically.</source>
          <target state="translated">Gosched はプロセッサを解放し、他の goroutine を実行できるようにします。現在のgoroutineをサスペンドしないので、実行は自動的に再開されます。</target>
        </trans-unit>
        <trans-unit id="1c2aaf1310e2e413d539667c1a3e7771e58933c6" translate="yes" xml:space="preserve">
          <source>GotConnInfo is the argument to the ClientTrace.GotConn function and contains information about the obtained connection.</source>
          <target state="translated">GotConnInfo は ClientTrace.GotConn 関数の引数で、取得した接続に関する情報を含みます。</target>
        </trans-unit>
        <trans-unit id="8aa6da089a7b549e351002a5e03605264795ad2e" translate="yes" xml:space="preserve">
          <source>GraphicRanges defines the set of graphic characters according to Unicode.</source>
          <target state="translated">GraphicRangesは、Unicodeに従ったグラフィック文字の集合を定義します。</target>
        </trans-unit>
        <trans-unit id="e7195fa4641b119dd2889d0a417f633c2b3c037d" translate="yes" xml:space="preserve">
          <source>Gray is an in-memory image whose At method returns color.Gray values.</source>
          <target state="translated">グレーは、Atメソッドがcolor.Grayの値を返すインメモリ画像です。</target>
        </trans-unit>
        <trans-unit id="8551691479e553fcfd58c230f9f1c7702a08e936" translate="yes" xml:space="preserve">
          <source>Gray represents an 8-bit grayscale color.</source>
          <target state="translated">グレーは8ビットのグレースケールカラーを表します。</target>
        </trans-unit>
        <trans-unit id="8be44534e41a9fdc599304347782cb967b0bd62b" translate="yes" xml:space="preserve">
          <source>Gray16 is an in-memory image whose At method returns color.Gray16 values.</source>
          <target state="translated">Gray16は、Atメソッドがcolor.Gray16の値を返すインメモリ画像です。</target>
        </trans-unit>
        <trans-unit id="b7ee628ee7a9a7bf06c313fa8d8dc808a58abb8f" translate="yes" xml:space="preserve">
          <source>Gray16 represents a 16-bit grayscale color.</source>
          <target state="translated">Gray16は16ビットのグレースケールカラーを表します。</target>
        </trans-unit>
        <trans-unit id="6e09be6a83f7d3163e99081e0c679a65e139fc8d" translate="yes" xml:space="preserve">
          <source>Group represents a grouping of users.</source>
          <target state="translated">グループは、ユーザーのグループ化を表します。</target>
        </trans-unit>
        <trans-unit id="7de1bb0487db53a77d3d5fa786aa26f9027ba7c1" translate="yes" xml:space="preserve">
          <source>GroupIds returns the list of group IDs that the user is a member of.</source>
          <target state="translated">GroupIdsは、ユーザーが所属しているグループIDのリストを返します。</target>
        </trans-unit>
        <trans-unit id="d0e679bf3eeb0246c0708b92532613618a2a5627" translate="yes" xml:space="preserve">
          <source>Grouping:</source>
          <target state="translated">Grouping:</target>
        </trans-unit>
        <trans-unit id="a3dd80da68d80e7f0e9f29bcc9f5cb31d2777884" translate="yes" xml:space="preserve">
          <source>Grow grows b's capacity, if necessary, to guarantee space for another n bytes. After Grow(n), at least n bytes can be written to b without another allocation. If n is negative, Grow panics.</source>
          <target state="translated">Grow は、必要に応じて b の容量を増やし、さらに n バイト分のスペースを保証します。Grow(n)の後、少なくとも n バイトを b に書き込むことができます。n が負の値の場合、Grow はパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="ea6ca3eab6713cfdabbbddc578b2358a70e4ccb7" translate="yes" xml:space="preserve">
          <source>Grow grows the buffer's capacity, if necessary, to guarantee space for another n bytes. After Grow(n), at least n bytes can be written to the buffer without another allocation. If n is negative, Grow will panic. If the buffer can't grow it will panic with ErrTooLarge.</source>
          <target state="translated">Grow は、必要に応じてバッファの容量を増やし、さらに n バイト分のスペースを確保します。Grow(n)の後は、少なくとも n バイトをバッファに書き込むことができます。n が負の値の場合、Grow はパニックに陥ります。バッファの容量を増やすことができない場合は、ErrTooLarge でパニックになります。</target>
        </trans-unit>
        <trans-unit id="fcfc665b9c38534864ef4c48c8a42633500c63ee" translate="yes" xml:space="preserve">
          <source>Gzip files store a length and checksum of the uncompressed data. The Reader will return an ErrChecksum when Read reaches the end of the uncompressed data if it does not have the expected length or checksum. Clients should treat data returned by Read as tentative until they receive the io.EOF marking the end of the data.</source>
          <target state="translated">Gzipファイルは、非圧縮データの長さとチェックサムを格納する。期待された長さやチェックサムがない場合、Readが非圧縮データの最後に到達したとき、ReadはErrChecksumを返します。クライアントは、データの終了を示すio.EOFを受け取るまでは、Readから返されたデータを暫定的なものとして扱うべきです。</target>
        </trans-unit>
        <trans-unit id="5d71851e777cb11c10615f1403f7831b2abdc279" translate="yes" xml:space="preserve">
          <source>HTML encapsulates a known safe HTML document fragment. It should not be used for HTML from a third-party, or HTML with unclosed tags or comments. The outputs of a sound HTML sanitizer and a template escaped by this package are fine for use with HTML.</source>
          <target state="translated">HTMLは、既知の安全なHTML文書の断片をカプセル化します。サードパーティからのHTMLや、閉じられていないタグやコメントのあるHTMLには使用すべきではありません。このパッケージによってエスケープされたテンプレートやサウンドHTMLサニタイザの出力は、HTMLでの使用には問題ありません。</target>
        </trans-unit>
        <trans-unit id="b3eeeba32a88681f357c6658794b2cde0a1ffee1" translate="yes" xml:space="preserve">
          <source>HTML templates treat data values as plain text which should be encoded so they can be safely embedded in an HTML document. The escaping is contextual, so actions can appear within JavaScript, CSS, and URI contexts.</source>
          <target state="translated">HTML テンプレートはデータ値をプレーンテキストとして扱います。エスケープは文脈に応じて行われるので、アクションは JavaScript、CSS、URI のコンテキスト内で表示されます。</target>
        </trans-unit>
        <trans-unit id="9941fc69ceb0b7c4c9cd661ccc1d3296d53a1466" translate="yes" xml:space="preserve">
          <source>HTMLAttr encapsulates an HTML attribute from a trusted source, for example, ` dir=&quot;ltr&quot;`.</source>
          <target state="translated">HTMLAttrは信頼できるソースからのHTML属性をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="56515df9ce780f70db2a14123d61a78cb0491ced" translate="yes" xml:space="preserve">
          <source>HTMLAutoClose is the set of HTML elements that should be considered to close automatically.</source>
          <target state="translated">HTMLAutoCloseは、自動的に閉じることを考慮すべきHTML要素の集合です。</target>
        </trans-unit>
        <trans-unit id="e3ae2c19a119f12f6bd7618bea966cc88fb1903b" translate="yes" xml:space="preserve">
          <source>HTMLEntity is an entity map containing translations for the standard HTML entity characters.</source>
          <target state="translated">HTMLEntityは、標準的なHTMLエンティティ文字の翻訳を含むエンティティマップです。</target>
        </trans-unit>
        <trans-unit id="0502b94bdac42557ec458b2bcfd7d81519bb7f5f" translate="yes" xml:space="preserve">
          <source>HTMLEscape</source>
          <target state="translated">HTMLEscape</target>
        </trans-unit>
        <trans-unit id="108bb0274697ed474af72c0af28941c4694cc443" translate="yes" xml:space="preserve">
          <source>HTMLEscape appends to dst the JSON-encoded src with &amp;lt;, &amp;gt;, &amp;amp;, U+2028 and U+2029 characters inside string literals changed to \u003c, \u003e, \u0026, \u2028, \u2029 so that the JSON will be safe to embed inside HTML &amp;lt;script&amp;gt; tags. For historical reasons, web browsers don't honor standard HTML escaping within &amp;lt;script&amp;gt; tags, so an alternative JSON encoding must be used.</source>
          <target state="translated">HTMLEscapeは、JSONエンコードされたsrcをdstに追加し、文字列リテラル内の&amp;lt;、&amp;gt;、＆、U + 2028およびU + 2029文字を\ u003c、\ u003e、\ u0026、\ u2028、\ u2029に変更して、JSONが安全になるようにしますHTML &amp;lt;script&amp;gt;タグ内に埋め込む。歴史的な理由により、Webブラウザーは&amp;lt;script&amp;gt;タグ内の標準のHTMLエスケープを受け入れないため、代替のJSONエンコーディングを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="eaa5eff89dbdb13500c068f0e84bf21b7f3be3fb" translate="yes" xml:space="preserve">
          <source>HTMLEscape writes to w the escaped HTML equivalent of the plain text data b.</source>
          <target state="translated">HTMLEscape は、プレーンテキストデータ b のエスケープされた HTML に相当するものを w に書き込みます。</target>
        </trans-unit>
        <trans-unit id="eba1f3f7ea429a820bedfa415a707d8da7ce1238" translate="yes" xml:space="preserve">
          <source>HTMLEscapeString returns the escaped HTML equivalent of the plain text data s.</source>
          <target state="translated">HTMLEscapeString は、プレーンテキストデータ s のエスケープされた HTML と同等のものを返します。</target>
        </trans-unit>
        <trans-unit id="8b2dbe52305b6c07dd244c27d634207753a8523e" translate="yes" xml:space="preserve">
          <source>HTMLEscaper returns the escaped HTML equivalent of the textual representation of its arguments.</source>
          <target state="translated">HTMLEscaperは、その引数のテキスト表現のエスケープされたHTMLと同等のものを返します。</target>
        </trans-unit>
        <trans-unit id="9304c86e0fba62ba5daa5297c254f425c77df161" translate="yes" xml:space="preserve">
          <source>HTTP Trailers are a set of key/value pairs like headers that come after the HTTP response, instead of before.</source>
          <target state="translated">HTTP トレーラーは、HTTP レスポンスの前ではなく、HTTP レスポンスの後に来るヘッダのようなキー/値のペアのセットです。</target>
        </trans-unit>
        <trans-unit id="0f4dea56c9591992aae081556a866da7a62d7c76" translate="yes" xml:space="preserve">
          <source>HTTP status codes as registered with IANA. See: &lt;a href=&quot;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&quot;&gt;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&lt;/a&gt;</source>
          <target state="translated">IANAに登録されているHTTPステータスコード。参照：&lt;a href=&quot;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&quot;&gt;https&lt;/a&gt; : //www.iana.org/assignments/http-status-codes/http-status-codes.xhtml</target>
        </trans-unit>
        <trans-unit id="ffb0634925a034a37cf81c8bf163966c760740e9" translate="yes" xml:space="preserve">
          <source>HTTP/2 support is only enabled if the Listener returns *tls.Conn connections and they were configured with &quot;h2&quot; in the TLS Config.NextProtos.</source>
          <target state="translated">HTTP/2のサポートが有効になるのは、リスナーが*tls.Conn接続を返し、それらがTLS Config.NextProtosで &quot;h2 &quot;で構成されている場合のみです。</target>
        </trans-unit>
        <trans-unit id="5ee0353f20802f9b3b832dc664b1cf16f1dd8c83" translate="yes" xml:space="preserve">
          <source>HalfReader returns a Reader that implements Read by reading half as many requested bytes from r.</source>
          <target state="translated">HalfReaderは、要求されたバイト数の半分のバイト数をrから読み込むことでReadを実装したReaderを返します。</target>
        </trans-unit>
        <trans-unit id="c0392b2b1c472815ba8d1a1e3b20f4a279bf6c50" translate="yes" xml:space="preserve">
          <source>Handle</source>
          <target state="translated">Handle</target>
        </trans-unit>
        <trans-unit id="1f7743a2da5a9b87698980081ed0a9b4a848c67b" translate="yes" xml:space="preserve">
          <source>Handle registers the handler for the given pattern in the DefaultServeMux. The documentation for ServeMux explains how patterns are matched.</source>
          <target state="translated">Handle は、与えられたパターンのハンドラを DefaultServeMux に登録します。ServeMuxのドキュメントでは、パターンがどのようにマッチするかを説明しています。</target>
        </trans-unit>
        <trans-unit id="adfb5ece7bb714f07a8d92f38ecaccd93eb91488" translate="yes" xml:space="preserve">
          <source>Handle registers the handler for the given pattern. If a handler already exists for pattern, Handle panics.</source>
          <target state="translated">Handleは、与えられたパターンのハンドラを登録します。すでにパターンにハンドラが存在する場合、Handleはパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="9df709e02c4285ab3a3440b49e05002a1810c202" translate="yes" xml:space="preserve">
          <source>HandleFunc</source>
          <target state="translated">HandleFunc</target>
        </trans-unit>
        <trans-unit id="ba3631b03a8549831c70fb0b756b06eb4ccdf22e" translate="yes" xml:space="preserve">
          <source>HandleFunc registers the handler function for the given pattern in the DefaultServeMux. The documentation for ServeMux explains how patterns are matched.</source>
          <target state="translated">HandleFuncは、与えられたパターンに対するハンドラ関数をDefaultServeMuxに登録します。ServeMuxのドキュメントでは、パターンがどのようにマッチするかを説明しています。</target>
        </trans-unit>
        <trans-unit id="671e02c9111874e0dde4ea20673fb01320ed5a12" translate="yes" xml:space="preserve">
          <source>HandleFunc registers the handler function for the given pattern.</source>
          <target state="translated">HandleFuncは、与えられたパターンのハンドラ関数を登録します。</target>
        </trans-unit>
        <trans-unit id="b8bc0ae743c24154bab55e05ddac119f84a83a3e" translate="yes" xml:space="preserve">
          <source>HandleHTTP registers an HTTP handler for RPC messages on rpcPath, and a debugging handler on debugPath. It is still necessary to invoke http.Serve(), typically in a go statement.</source>
          <target state="translated">HandleHTTPはRPCメッセージ用のHTTPハンドラをrpcPathに、デバッグ用ハンドラをdebugPathに登録します。http.Serve()を呼び出す必要がありますが、通常は go 文の中で行います。</target>
        </trans-unit>
        <trans-unit id="104cf096656ffcb1565dfd1219d7035e43630f88" translate="yes" xml:space="preserve">
          <source>HandleHTTP registers an HTTP handler for RPC messages to DefaultServer on DefaultRPCPath and a debugging handler on DefaultDebugPath. It is still necessary to invoke http.Serve(), typically in a go statement.</source>
          <target state="translated">HandleHTTP は DefaultServer への RPC メッセージ用の HTTP ハンドラを DefaultRPCPath に、デバッグ用のハンドラを DefaultDebugPath に登録します。http.Serve()を呼び出す必要がありますが、通常は go 文の中で行います。</target>
        </trans-unit>
        <trans-unit id="a62b57b0720d266ed6489a123759bbfe855bf88a" translate="yes" xml:space="preserve">
          <source>Handler also returns the registered pattern that matches the request or, in the case of internally-generated redirects, the pattern that will match after following the redirect.</source>
          <target state="translated">ハンドラはまた、リクエストにマッチする登録済みのパターン、あるいは内部的に生成されたリダイレクトの場合には、リダイレクトの後にマッチするパターンを返します。</target>
        </trans-unit>
        <trans-unit id="0ddb06f6f85fc2ca7a7cc5302dfee4fc45947bee" translate="yes" xml:space="preserve">
          <source>Handler returns an HTTP handler that serves the named profile.</source>
          <target state="translated">ハンドラは、指定されたプロファイルにサービスを提供する HTTP ハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="4065eef104a7b00ebd8ce9a91293334fd4bb0db9" translate="yes" xml:space="preserve">
          <source>Handler returns the expvar HTTP Handler.</source>
          <target state="translated">Handler は expvar HTTP ハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="e63273beb69f3454c447975682e44a2c5d4a0c1e" translate="yes" xml:space="preserve">
          <source>Handler returns the handler to use for the given request, consulting r.Method, r.Host, and r.URL.Path. It always returns a non-nil handler. If the path is not in its canonical form, the handler will be an internally-generated handler that redirects to the canonical path. If the host contains a port, it is ignored when matching handlers.</source>
          <target state="translated">Handler は、r.Method,r.Host,r.URL.Path を参照して、指定されたリクエストに使用するハンドラを返します。常に非 null のハンドラを返します。パスが正規の形でない場合、ハンドラは正規のパスにリダイレクトする内部的に生成されたハンドラになります。ホストにポートが含まれている場合は、ハンドラのマッチング時に無視されます。</target>
        </trans-unit>
        <trans-unit id="a812b2fb8f7451d8a9be630f8c521fc7613cf74d" translate="yes" xml:space="preserve">
          <source>Handler runs an executable in a subprocess with a CGI environment.</source>
          <target state="translated">ハンドラは、CGI 環境のあるサブプロセスで実行ファイルを実行します。</target>
        </trans-unit>
        <trans-unit id="612e8566dcf29030b3f86ae45fac3cd161070575" translate="yes" xml:space="preserve">
          <source>Handling of anonymous struct fields is new in Go 1.1. Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of an anonymous struct field in both current and earlier versions, give the field a JSON tag of &quot;-&quot;.</source>
          <target state="translated">匿名構造体フィールドの取り扱いは、Go 1.1では新しくなりました。Go 1.1以前のバージョンでは、匿名構造体フィールドは無視されていました。現在のバージョンと以前のバージョンの両方で、匿名構造体フィールドを強制的に無視するには、フィールドに &quot;-&quot; の JSON タグを与えます。</target>
        </trans-unit>
        <trans-unit id="8bd5447a341844b0e1ee2ac00ed949437eac1c43" translate="yes" xml:space="preserve">
          <source>Handshake runs the client or server handshake protocol if it has not yet been run. Most uses of this package need not call Handshake explicitly: the first Read or Write will call it automatically.</source>
          <target state="translated">Handshake は、まだ実行されていない場合、クライアントまたはサーバのハンドシェイクプロトコルを実行します。本パッケージのほとんどの用途では、Handshake を明示的に呼び出す必要はありません:最初の読み取りまたは書き込みで自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0bf39eaf505133458b930fe0c34986ca5b577cc9" translate="yes" xml:space="preserve">
          <source>HasExpired reports whether certList should have been updated by now.</source>
          <target state="translated">HasExpired は、certList が今までに更新されている必要があるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="d390517d58b930cb269df7a0b32aa914bfb5311d" translate="yes" xml:space="preserve">
          <source>HasOk reports whether the corresponding expression may be used on the rhs of a comma-ok assignment.</source>
          <target state="translated">HasOkは、対応する式がカンマOK代入のrhsで使用できるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="e53848ef4c6fc884ed74c95d3ab525fa42a2bbe7" translate="yes" xml:space="preserve">
          <source>HasPrefix</source>
          <target state="translated">HasPrefix</target>
        </trans-unit>
        <trans-unit id="8d314f541aff1011d7ddb318695b8f61b2af6ec2" translate="yes" xml:space="preserve">
          <source>HasPrefix exists for historical compatibility and should not be used.</source>
          <target state="translated">HasPrefixは歴史的互換性のために存在し、使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="2669e9427d4779bbc09f60c5ccfd3fe6d15b6c70" translate="yes" xml:space="preserve">
          <source>HasPrefix tests whether the byte slice s begins with prefix.</source>
          <target state="translated">HasPrefix は、バイトスライスが接頭辞で始まるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="5cd07ae1c7bc3b9ed87eb16cdb61e05184635090" translate="yes" xml:space="preserve">
          <source>HasPrefix tests whether the string s begins with prefix.</source>
          <target state="translated">HasPrefix は、文字列 s が接頭辞で始まるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="117455f286c7643c45e4bb7a574dddee082000d6" translate="yes" xml:space="preserve">
          <source>HasSuffix</source>
          <target state="translated">HasSuffix</target>
        </trans-unit>
        <trans-unit id="0d84ad6d23e5d60c659894725feb80de1e5bc00b" translate="yes" xml:space="preserve">
          <source>HasSuffix tests whether the byte slice s ends with suffix.</source>
          <target state="translated">HasSuffix は、バイトスライスの末尾がサフィックスで終わるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="71e6720e740d9f5d90d030cf5d260029a0041a76" translate="yes" xml:space="preserve">
          <source>HasSuffix tests whether the string s ends with suffix.</source>
          <target state="translated">HasSuffix は、文字列 s がサフィックスで終わるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="c07fb815b0dd23f98464b6c96ba0043996f42574" translate="yes" xml:space="preserve">
          <source>Hash identifies a cryptographic hash function that is implemented in another package.</source>
          <target state="translated">ハッシュは、他のパッケージで実装されている暗号化ハッシュ関数を識別します。</target>
        </trans-unit>
        <trans-unit id="a8a4a81d7a93ec8ea6de29fca7e817e8b0ccf094" translate="yes" xml:space="preserve">
          <source>Hash implementations in the standard library (e.g. hash/crc32 and crypto/sha256) implement the encoding.BinaryMarshaler and encoding.BinaryUnmarshaler interfaces. Marshaling a hash implementation allows its internal state to be saved and used for additional processing later, without having to re-write the data previously written to the hash. The hash state may contain portions of the input in its original form, which users are expected to handle for any possible security implications.</source>
          <target state="translated">標準ライブラリのハッシュ実装(hash/crc32やcrypto/sha256など)は、encoding.BinaryMarshalerとencoding.BinaryUnmarshalerインターフェースを実装しています。ハッシュ実装をマーシャリングすることで、ハッシュに書き込まれたデータを書き換えることなく、内部状態を保存し、後で追加の処理に使用することができます。ハッシュの状態は入力の一部を元の形で含むことがありますが、これはセキュリティ上の影響を考慮してユーザーが処理することが期待されています。</target>
        </trans-unit>
        <trans-unit id="afa3769866aaa8e9ccd0894bbb12db0f2a42b294" translate="yes" xml:space="preserve">
          <source>Hash is the common interface implemented by all hash functions.</source>
          <target state="translated">ハッシュは、すべてのハッシュ関数で実装されている共通のインターフェースです。</target>
        </trans-unit>
        <trans-unit id="bbb248d3e1082f71a91f55221f9ef1629bac5c92" translate="yes" xml:space="preserve">
          <source>Hash32 is the common interface implemented by all 32-bit hash functions.</source>
          <target state="translated">Hash32は、すべての32ビットハッシュ関数で実装されている共通のインターフェースです。</target>
        </trans-unit>
        <trans-unit id="05bc44af5e367ef4fc60329373f6d1a44dbf5c85" translate="yes" xml:space="preserve">
          <source>Hash64 is the common interface implemented by all 64-bit hash functions.</source>
          <target state="translated">Hash64は、すべての64ビットハッシュ関数で実装されている共通のインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="3959061e57c74057bbf958321e7f6031a26bba89" translate="yes" xml:space="preserve">
          <source>HashFunc returns pssOpts.Hash so that PSSOptions implements crypto.SignerOpts.</source>
          <target state="translated">HashFunc は pssOpts.Hash を返すので、PSSOptions は crypto.SignerOpts を実装します。</target>
        </trans-unit>
        <trans-unit id="860155016136afc0d36dbbc3f9fc98412399783e" translate="yes" xml:space="preserve">
          <source>HashFunc simply returns the value of h so that Hash implements SignerOpts.</source>
          <target state="translated">HashFuncは、HashがSignerOptsを実装するようにhの値を返すだけです。</target>
        </trans-unit>
        <trans-unit id="cd2b2728ea1f997355e4a7e5005a26c5306f470a" translate="yes" xml:space="preserve">
          <source>Head is a wrapper around DefaultClient.Head</source>
          <target state="translated">Head は DefaultClient.Head のラッパーです。</target>
        </trans-unit>
        <trans-unit id="93e59ac29bb3c357b0f9c42db1f78e97e116c128" translate="yes" xml:space="preserve">
          <source>Head issues a HEAD to the specified URL. If the response is one of the following redirect codes, Head follows the redirect after calling the Client's CheckRedirect function:</source>
          <target state="translated">Head は指定された URL に HEAD を発行します。レスポンスが以下のリダイレクトコードのいずれかであれば、クライアントの CheckRedirect 関数を呼び出した後に HEAD はリダイレクトに従います。</target>
        </trans-unit>
        <trans-unit id="24094406af9408bd066ab26a0a1ef55bdcdead08" translate="yes" xml:space="preserve">
          <source>Head issues a HEAD to the specified URL. If the response is one of the following redirect codes, Head follows the redirect, up to a maximum of 10 redirects:</source>
          <target state="translated">Head は指定された URL に HEAD を発行します。レスポンスが以下のリダイレクトコードのいずれかである場合、Head はリダイレクトを追従し、最大 10 個のリダイレクトを行います。</target>
        </trans-unit>
        <trans-unit id="a50c7cbf99b8cae529cf3d620f5022a1c82e8fca" translate="yes" xml:space="preserve">
          <source>Header implements http.ResponseWriter. It returns the response headers to mutate within a handler. To test the headers that were written after a handler completes, use the Result method and see the returned Response value's Header.</source>
          <target state="translated">Header は http.ResponseWriter を実装しています。ハンドラ内で変異するレスポンスヘッダを返します。ハンドラが完了した後に書き込まれたヘッダをテストするには、Resultメソッドを使用して、返されたレスポンス値のヘッダを確認します。</target>
        </trans-unit>
        <trans-unit id="2a403ca7fd2ae0865923ded1f911ee30d4fbde83" translate="yes" xml:space="preserve">
          <source>Hello sends a HELO or EHLO to the server as the given host name. Calling this method is only necessary if the client needs control over the host name used. The client will introduce itself as &quot;localhost&quot; automatically otherwise. If Hello is called, it must be called before any of the other methods.</source>
          <target state="translated">Hello は、指定されたホスト名としてサーバに HELO または EHLO を送信します。このメソッドの呼び出しは、クライアントが使用するホスト名を制御する必要がある場合にのみ必要です。そうでなければ、クライアントは自動的に「localhost」として自分自身を紹介します。Helloが呼び出された場合は、他のどのメソッドよりも先に呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="0aed41610e50a1818172a103900a5a6fdac5322e" translate="yes" xml:space="preserve">
          <source>Helper marks the calling function as a test helper function. When printing file and line information, that function will be skipped. Helper may be called simultaneously from multiple goroutines.</source>
          <target state="translated">Helperは、呼び出した関数をテストヘルパー関数としてマークします。ファイルや行情報を印刷する場合は、その関数はスキップされます。Helperは複数のゴロチンから同時に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="aa0b52b8a6b42d9b0905c653c010a924ae5e874a" translate="yes" xml:space="preserve">
          <source>Here are some example one-line templates demonstrating pipelines and variables. All produce the quoted word &quot;output&quot;:</source>
          <target state="translated">パイプラインと変数を示す一行テンプレートの例を以下に示します。すべて引用符で囲まれた &quot;output &quot;という単語を生成します。</target>
        </trans-unit>
        <trans-unit id="89620d229387855063bd56a8e6d5a3250086c9f0" translate="yes" xml:space="preserve">
          <source>Here is a simple example, opening a file and reading some of it.</source>
          <target state="translated">ここでは簡単な例として、ファイルを開いてその一部を読み込んでみます。</target>
        </trans-unit>
        <trans-unit id="2824caba6baa2187c9e56d7836920f8ff25bcc71" translate="yes" xml:space="preserve">
          <source>Here is a simple example. A server wishes to export an object of type Arith:</source>
          <target state="translated">ここでは簡単な例を示します。サーバーがArith型のオブジェクトをエクスポートしたいとします。</target>
        </trans-unit>
        <trans-unit id="2c22db98d01fc50d0681541a0b0caf2c4141f0f4" translate="yes" xml:space="preserve">
          <source>Here is a trivial example that prints &quot;17 items are made of wool&quot;.</source>
          <target state="translated">ここでは、「17品目はウールでできています」とプリントした些細な例を紹介します。</target>
        </trans-unit>
        <trans-unit id="dc0bea3647dd8635722162c3a9c56cc10d70b7ac" translate="yes" xml:space="preserve">
          <source>Here is the list of actions. &quot;Arguments&quot; and &quot;pipelines&quot; are evaluations of data, defined in detail in the corresponding sections that follow.</source>
          <target state="translated">アクションの一覧です。&quot;Arguments &quot;と &quot;pipelines &quot;はデータの評価であり、後に続く対応するセクションで詳細に定義されています。</target>
        </trans-unit>
        <trans-unit id="c3b612d75a40adadd01e188d1e2aba30e8b88d33" translate="yes" xml:space="preserve">
          <source>Here we demonstrate loading a set of templates from a directory.</source>
          <target state="translated">ここでは、ディレクトリからテンプレートのセットをロードするデモを行います。</target>
        </trans-unit>
        <trans-unit id="c18d789286c40d70b27c77faebcb174f22c85dbc" translate="yes" xml:space="preserve">
          <source>Here we demonstrate loading a set of templates from files in different directories</source>
          <target state="translated">ここでは、異なるディレクトリ内のファイルからテンプレートのセットをロードするデモを行います。</target>
        </trans-unit>
        <trans-unit id="bcef5f73d0a48aab25273d92f8664ff4fb80379d" translate="yes" xml:space="preserve">
          <source>Here's an example directory layout:</source>
          <target state="translated">以下にディレクトリレイアウトの例を示します。</target>
        </trans-unit>
        <trans-unit id="35d5d6962be99793c34862b1061c8b5cacf67fc9" translate="yes" xml:space="preserve">
          <source>HexEncoding is the &amp;ldquo;Extended Hex Alphabet&amp;rdquo; defined in RFC 4648. It is typically used in DNS.</source>
          <target state="translated">HexEncodingは、RFC 4648で定義されている「Extended Hex Alphabet」です。通常、DNSで使用されます。</target>
        </trans-unit>
        <trans-unit id="e23f68e03ccbc9812663415a4a25267a75156114" translate="yes" xml:space="preserve">
          <source>Hijack detaches the ClientConn and returns the underlying connection as well as the read-side bufio which may have some left over data. Hijack may be called before the user or Read have signaled the end of the keep-alive logic. The user should not call Hijack while Read or Write is in progress.</source>
          <target state="translated">ハイジャックは ClientConn を切り離して、基本的な接続と、データが残っているかもしれないリード側の bufio を返します。Hijackは、ユーザやReadがキープアライブロジックの終了を通知する前に呼ばれることがあります。ユーザは、Read または Write の実行中に Hijack を呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="9150896df8944dbbb2d645bc78167fd76df1dc80" translate="yes" xml:space="preserve">
          <source>Hijack detaches the ServerConn and returns the underlying connection as well as the read-side bufio which may have some left over data. Hijack may be called before Read has signaled the end of the keep-alive logic. The user should not call Hijack while Read or Write is in progress.</source>
          <target state="translated">ハイジャックはServerConnをデタッチして、基礎となる接続を返し、読み込み側のbufioも返します。Hijackは、Readがキープアライブロジックの終了を通知する前に呼ばれることがあります。ReadやWriteの実行中にHijackを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="4a56321e103f0a1a522b694db3cb8d2d733e26fd" translate="yes" xml:space="preserve">
          <source>Hijacker</source>
          <target state="translated">Hijacker</target>
        </trans-unit>
        <trans-unit id="162450ef640a1216b7486b356d2e0daf7f97ce1d" translate="yes" xml:space="preserve">
          <source>Hostname returns the host name reported by the kernel.</source>
          <target state="translated">Hostname はカーネルが報告したホスト名を返します。</target>
        </trans-unit>
        <trans-unit id="96c776e02774d643d6c9b2543ae4ea531e374ca6" translate="yes" xml:space="preserve">
          <source>Hostname returns u.Host, stripping any valid port number if present.</source>
          <target state="translated">Hostname は u.Host を返し、有効なポート番号がある場合はそれを取り除きます。</target>
        </trans-unit>
        <trans-unit id="c10a91f09a43d36b8c063665239759dddfc07545" translate="yes" xml:space="preserve">
          <source>HostnameError results when the set of authorized names doesn't match the requested name.</source>
          <target state="translated">許可された名前のセットが要求された名前と一致しない場合、HostnameError が発生します。</target>
        </trans-unit>
        <trans-unit id="a732fe7ae23ec635b26f3cda289c15cbca4f3d8c" translate="yes" xml:space="preserve">
          <source>Hour returns the hour within the day specified by t, in the range [0, 23].</source>
          <target state="translated">Hourは、tで指定した日中の時間を[0,23]の範囲で返します。</target>
        </trans-unit>
        <trans-unit id="316afefe22138dc95ee9f3b2f4bc4164e8b8424e" translate="yes" xml:space="preserve">
          <source>Hours returns the duration as a floating point number of hours.</source>
          <target state="translated">Hoursは、時間を浮動小数点数で返します。</target>
        </trans-unit>
        <trans-unit id="29032d83edd3b2c57e81fe35f7063e01de42a614" translate="yes" xml:space="preserve">
          <source>However, there can be multiple leftmost-longest matches, with different submatch choices, and here this package diverges from POSIX. Among the possible leftmost-longest matches, this package chooses the one that a backtracking search would have found first, while POSIX specifies that the match be chosen to maximize the length of the first subexpression, then the second, and so on from left to right. The POSIX rule is computationally prohibitive and not even well-defined. See &lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp2.html#posix&quot;&gt;https://swtch.com/~rsc/regexp/regexp2.html#posix&lt;/a&gt; for details.</source>
          <target state="translated">ただし、左端が最も長い一致が複数あり、サブマッチの選択が異なる場合があります。この場合、このパッケージはPOSIXとは異なります。可能な左端から最長の一致の中から、このパッケージは、バックトラッキング検索で最初に見つかったものを選択しますが、POSIXは、最初の部分式、次に2番目の部分式の長さを最大にするように一致を選択することを指定しています。 。POSIXルールは計算上禁止されており、明確に定義されていません。詳細については、&lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp2.html#posix&quot;&gt;https：//swtch.com/~rsc/regexp/regexp2.html#posix&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="40708df18a19eb4cd04fce64de3e8c9f00288cb2" translate="yes" xml:space="preserve">
          <source>However, to aid in formatting template source code, if an action's left delimiter (by default &quot;{{&quot;) is followed immediately by a minus sign and ASCII space character (&quot;{{- &quot;), all trailing white space is trimmed from the immediately preceding text. Similarly, if the right delimiter (&quot;}}&quot;) is preceded by a space and minus sign (&quot; -}}&quot;), all leading white space is trimmed from the immediately following text. In these trim markers, the ASCII space must be present; &quot;{{-3}}&quot; parses as an action containing the number -3.</source>
          <target state="translated">しかし、テンプレートのソースコードのフォーマットを助けるために、アクションの左の区切り文字(デフォルトでは&quot;{{&quot;)の後にマイナス記号とASCIIスペース文字(&quot;{{-&quot;)が続く場合、末尾のすべてのホワイトスペースは直前のテキストからトリミングされます。同様に、右の区切り文字 (&quot;}}}&quot;)の前にスペースとマイナス記号 (&quot; -}}}&quot;)を付けると、直後のテキストから先頭の空白がすべて切り取られます。これらのトリムマーカーでは、ASCIIスペースが存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d4e4742177e63cc124605c711f8542e79a9c655e" translate="yes" xml:space="preserve">
          <source>However, when printing a byte slice with a string-like verb (%s %q %x %X), it is treated identically to a string, as a single item.</source>
          <target state="translated">ただし、文字列のような動詞 (%s %q %x %X)を持つバイト・スライスを印刷する場合は、文字列と同じように 1 つの項目として扱われます。</target>
        </trans-unit>
        <trans-unit id="5c4cbffa6231f3b3c2514644d0fee825e224c80d" translate="yes" xml:space="preserve">
          <source>Hypot returns Sqrt(p*p + q*q), taking care to avoid unnecessary overflow and underflow.</source>
          <target state="translated">Hypotは、不要なオーバーフローやアンダーフローが発生しないように注意して、Sqrt(p*p+q*q)を返します。</target>
        </trans-unit>
        <trans-unit id="576b7847aead683e23b77c003ff6f222a841ef25" translate="yes" xml:space="preserve">
          <source>IEEETable is the table for the IEEE polynomial.</source>
          <target state="translated">IEEETableは、IEEE多項式のテーブルです。</target>
        </trans-unit>
        <trans-unit id="a220db6c90383cf3092dacd6831c2890463d8ced" translate="yes" xml:space="preserve">
          <source>IMAGE_DIRECTORY_ENTRY constants</source>
          <target state="translated">IMAGE_DIRECTORY_ENTRY 定数</target>
        </trans-unit>
        <trans-unit id="f585c9fe77a34e4b203ca7586560b165b3fa9e06" translate="yes" xml:space="preserve">
          <source>IP address lengths (bytes).</source>
          <target state="translated">IP アドレスの長さ (バイト)。</target>
        </trans-unit>
        <trans-unit id="e746cf97286466a3ee7a6da22134f5658e5d9835" translate="yes" xml:space="preserve">
          <source>IP.DefaultMask</source>
          <target state="translated">IP.DefaultMask</target>
        </trans-unit>
        <trans-unit id="11cb3659b8e0ce7581cbb847a5c82b1c9f0fd371" translate="yes" xml:space="preserve">
          <source>IP.Mask</source>
          <target state="translated">IP.Mask</target>
        </trans-unit>
        <trans-unit id="afa88b5842f11425f491e338d7ab921fd1ba5273" translate="yes" xml:space="preserve">
          <source>IPAddr represents the address of an IP end point.</source>
          <target state="translated">IPAddrは、IPエンドポイントのアドレスを表します。</target>
        </trans-unit>
        <trans-unit id="62bf2467f82c0177288446c3c53fcfe1388fdbf4" translate="yes" xml:space="preserve">
          <source>IPConn is the implementation of the Conn and PacketConn interfaces for IP network connections.</source>
          <target state="translated">IPConnは、IPネットワーク接続のためのConnおよびPacketConnインターフェースの実装です。</target>
        </trans-unit>
        <trans-unit id="f8a4e52fe170a6b87d8e8f324c9e46497e3e1a1e" translate="yes" xml:space="preserve">
          <source>IPv4</source>
          <target state="translated">IPv4</target>
        </trans-unit>
        <trans-unit id="01eafbb77fe2e5da4ec4f2fa2166e61bdbf17fda" translate="yes" xml:space="preserve">
          <source>IPv4 returns the IP address (in 16-byte form) of the IPv4 address a.b.c.d.</source>
          <target state="translated">IPv4は、IPv4アドレスa.b.c.dのIPアドレス(16バイト形式)を返します。</target>
        </trans-unit>
        <trans-unit id="3e2065fb2c469f55091e83e0c17ec6c33b2ade3a" translate="yes" xml:space="preserve">
          <source>IPv4Mask</source>
          <target state="translated">IPv4Mask</target>
        </trans-unit>
        <trans-unit id="d0818e19fd482dbfdc092a8f03eecab69f4f02c6" translate="yes" xml:space="preserve">
          <source>IPv4Mask returns the IP mask (in 4-byte form) of the IPv4 mask a.b.c.d.</source>
          <target state="translated">IPv4Maskは、IPv4マスクa.b.c.dのIPマスク(4バイト形式)を返します。</target>
        </trans-unit>
        <trans-unit id="84f775d13ea13d9914f862669240b386b5b2ce40" translate="yes" xml:space="preserve">
          <source>ISOWeek returns the ISO 8601 year and week number in which t occurs. Week ranges from 1 to 53. Jan 01 to Jan 03 of year n might belong to week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1 of year n+1.</source>
          <target state="translated">ISOWeekは、tが発生するISO 8601の年号と週号を返します。週の範囲は1から53までです。n 年の 1 月 1 日から 1 月 03 日は n-1 年の 52 週目または 53 週目に属し、12 月 29 日から 12 月 31 日は n+1 年の 1 週目に属するかもしれません。</target>
        </trans-unit>
        <trans-unit id="08d6764cba419802272bb09d455c908144b957aa" translate="yes" xml:space="preserve">
          <source>Id is a wrapper for Id(obj.Pkg(), obj.Name()).</source>
          <target state="translated">IdはId(obj.Pkg(),obj.Name())のラッパーです。</target>
        </trans-unit>
        <trans-unit id="1d68ea4276c501cd9a850a1820a4a4d86fcccd10" translate="yes" xml:space="preserve">
          <source>Id returns name if it is exported, otherwise it returns the name qualified with the package path.</source>
          <target state="translated">Id は、エクスポートされた場合は名前を返し、そうでない場合はパッケージパスで修飾された名前を返します。</target>
        </trans-unit>
        <trans-unit id="fa08cb5f856950ffd31e99879394c8d2ecd78b73" translate="yes" xml:space="preserve">
          <source>Identical reports whether x and y are identical types. Receivers of Signature types are ignored.</source>
          <target state="translated">Identical は、x と y が同一の型であるかどうかを報告します。Signature型の受信者は無視されます。</target>
        </trans-unit>
        <trans-unit id="62582ea142e0c589620d5bd10a3675dc62d150bc" translate="yes" xml:space="preserve">
          <source>IdenticalIgnoreTags reports whether x and y are identical types if tags are ignored. Receivers of Signature types are ignored.</source>
          <target state="translated">IdenticalIgnoreTagsは、タグが無視された場合にxとyが同一型かどうかを報告します。Signature型の受信者は無視されます。</target>
        </trans-unit>
        <trans-unit id="1b283807cc15b11d0882e9fd847033d20b983bd2" translate="yes" xml:space="preserve">
          <source>IdentifierNode holds an identifier.</source>
          <target state="translated">IdentifierNodeは識別子を保持します。</target>
        </trans-unit>
        <trans-unit id="e3f7a148cc891203b5f7d36d2d9e45cad70d628a" translate="yes" xml:space="preserve">
          <source>If 'All' is present, the routine matches successive non-overlapping matches of the entire expression. Empty matches abutting a preceding match are ignored. The return value is a slice containing the successive return values of the corresponding non-'All' routine. These routines take an extra integer argument, n. If n &amp;gt;= 0, the function returns at most n matches/submatches; otherwise, it returns all of them.</source>
          <target state="translated">「すべて」が存在する場合、ルーチンは式全体の連続する重複しない一致と一致します。前の一致に隣接する空の一致は無視されます。戻り値は、対応する「All」以外のルーチンの連続する戻り値を含むスライスです。これらのルーチンは、追加の整数引数nを取ります。n&amp;gt; = 0の場合、関数は最大でn個の一致/部分一致を返します。それ以外の場合は、それらすべてを返します。</target>
        </trans-unit>
        <trans-unit id="4bc5ea7c2a0ba24905139043c1e06d713fc4b624" translate="yes" xml:space="preserve">
          <source>If 'Index' is present, matches and submatches are identified by byte index pairs within the input string: result[2*n:2*n+1] identifies the indexes of the nth submatch. The pair for n==0 identifies the match of the entire expression. If 'Index' is not present, the match is identified by the text of the match/submatch. If an index is negative or text is nil, it means that subexpression did not match any string in the input. For 'String' versions an empty string means either no match or an empty match.</source>
          <target state="translated">Index' が存在する場合、マッチとサブマッチは入力文字列内のバイトインデックスペアで識別されます:result[2*n:2*n+1]は n 番目のサブマッチのインデックスを識別します。n==0 のペアは、式全体のマッチを識別します。Index' が存在しない場合は、マッチ/サブマッチのテキストによってマッチが識別されます。インデックスが負の値であったり、テキストがnilであったりする場合は、subexpressionが入力中の文字列にマッチしなかったことを意味します。String' バージョンでは、空の文字列は一致しないか空の一致を意味します。</target>
        </trans-unit>
        <trans-unit id="750f20e67d15d8b15512065e634f8a04cd24649d" translate="yes" xml:space="preserve">
          <source>If 'String' is present, the argument is a string; otherwise it is a slice of bytes; return values are adjusted as appropriate.</source>
          <target state="translated">String' が存在する場合、引数は文字列であり、そうでない場合はバイトのスライスである。</target>
        </trans-unit>
        <trans-unit id="6b5422b81678b9d8d259a31067e6668262dc0a15" translate="yes" xml:space="preserve">
          <source>If 'Submatch' is present, the return value is a slice identifying the successive submatches of the expression. Submatches are matches of parenthesized subexpressions (also known as capturing groups) within the regular expression, numbered from left to right in order of opening parenthesis. Submatch 0 is the match of the entire expression, submatch 1 the match of the first parenthesized subexpression, and so on.</source>
          <target state="translated">Submatch' が存在する場合、戻り値は式の連続したサブマッチを識別するスライスです。サブマッチは、正規表現内の括弧付きのサブ表現(キャプチャグループとも呼ばれます)のマッチで、左から右へと括弧が開いている順に番号が付けられています。サブマッチ 0 は式全体のマッチであり、サブマッチ 1 は最初の括弧付き部分式のマッチです。</target>
        </trans-unit>
        <trans-unit id="c8e129ec8b814ed3ea9bfb24aed18824a3379050" translate="yes" xml:space="preserve">
          <source>If Body is present, Content-Length is &amp;lt;= 0 and TransferEncoding hasn't been set to &quot;identity&quot;, Write adds &quot;Transfer-Encoding: chunked&quot; to the header. Body is closed after it is sent.</source>
          <target state="translated">Bodyが存在し、Content-Lengthが0以下で、TransferEncodingが「identity」に設定されていない場合、Writeはヘッダーに「Transfer-Encoding：chunked」を追加します。送信後、本体は閉じられます。</target>
        </trans-unit>
        <trans-unit id="a4c660d2d836ce5011f39f208170601c14fc3f84" translate="yes" xml:space="preserve">
          <source>If CheckNamedValue returns ErrRemoveArgument, the NamedValue will not be included in the final query arguments. This may be used to pass special options to the query itself.</source>
          <target state="translated">CheckNamedValueがErrRemoveArgumentを返した場合、NamedValueは最終的な問い合わせ引数には含まれません。これは、クエリ自体に特別なオプションを渡すために使用することができます。</target>
        </trans-unit>
        <trans-unit id="16a03bedfc442181d888e7b8ec8eee1e7e8562bb" translate="yes" xml:space="preserve">
          <source>If Conn.Ping returns ErrBadConn, DB.Ping and DB.PingContext will remove the Conn from pool.</source>
          <target state="translated">Conn.Ping が ErrBadConn を返すと、DB.Ping と DB.PingContext はプールから Conn を削除します。</target>
        </trans-unit>
        <trans-unit id="9bf5fb8d1ebbb6dc425efaa4065a072560c9aaa0" translate="yes" xml:space="preserve">
          <source>If DIR is a directory listed in the Go path, a package with source in DIR/src/foo/bar can be imported as &quot;foo/bar&quot; and has its compiled form installed to &quot;DIR/pkg/GOOS_GOARCH/foo/bar.a&quot; (or, for gccgo, &quot;DIR/pkg/gccgo/foo/libbar.a&quot;).</source>
          <target state="translated">DIRがGoパスに記載されているディレクトリであれば、DIR/src/foo/barにソースがあるパッケージを &quot;foo/bar &quot;としてインポートし、コンパイルされた形で &quot;DIR/pkg/GOOS_GOARCH/foo/bar.a &quot;にインストールすることができます(gccgoの場合は &quot;DIR/pkg/gccgo/foo/libbar.a &quot;にインストールします)。</target>
        </trans-unit>
        <trans-unit id="626d82422a444f8260197f6a255b844b957560c9" translate="yes" xml:space="preserve">
          <source>If Dir is SelectDefault, the case represents a default case. Chan and Send must be zero Values.</source>
          <target state="translated">DirがSelectDefaultの場合、ケースはデフォルトのケースを表します。ChanとSendは0の値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b64c8a9a4dd6bc23186cb39d29f2d6a941b37467" translate="yes" xml:space="preserve">
          <source>If Dir is SelectRecv, the case represents a receive operation. Normally Chan's underlying value must be a channel and Send must be a zero Value. If Chan is a zero Value, then the case is ignored, but Send must still be a zero Value. When a receive operation is selected, the received Value is returned by Select.</source>
          <target state="translated">Dir が SelectRecv の場合は、受信操作を表します。通常、Chan の基本値はチャンネルでなければならず、Send はゼロ値でなければなりません。Chan が 0 Value の場合、ケースは無視されますが、Send は 0 Value でなければなりません。受信操作が選択されると、受信した Value が Select によって返されます。</target>
        </trans-unit>
        <trans-unit id="fc3241471000ca543780e2776c12ce2c0f98b518" translate="yes" xml:space="preserve">
          <source>If Dir is SelectSend, the case represents a send operation. Normally Chan's underlying value must be a channel, and Send's underlying value must be assignable to the channel's element type. As a special case, if Chan is a zero Value, then the case is ignored, and the field Send will also be ignored and may be either zero or non-zero.</source>
          <target state="translated">Dir が SelectSend の場合、このケースは送信操作を表します。通常、Chanの基本値はチャンネルでなければならず、Sendの基本値はチャンネルの要素型に代入可能でなければなりません。特殊なケースとして、Chanがゼロ値の場合、ケースは無視され、フィールドSendも無視され、ゼロか非ゼロのどちらかになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e5a9a392b54a0f9dbcf70e078d697829fda46e7" translate="yes" xml:space="preserve">
          <source>If Discard skips fewer than n bytes, it also returns an error. If 0 &amp;lt;= n &amp;lt;= b.Buffered(), Discard is guaranteed to succeed without reading from the underlying io.Reader.</source>
          <target state="translated">Discardがスキップするバイト数がnバイト未満の場合も、エラーを返します。0 &amp;lt;= n &amp;lt;= b.Buffered（）の場合、破棄は、基になるio.Readerから読み取らずに成功することが保証されています。</target>
        </trans-unit>
        <trans-unit id="5388f313bdebc1cd743073994620f637168dfccb" translate="yes" xml:space="preserve">
          <source>If DiscardEmptyColumns is set, empty columns that are terminated entirely by vertical (or &quot;soft&quot;) tabs are discarded. Columns terminated by horizontal (or &quot;hard&quot;) tabs are not affected by this flag.</source>
          <target state="translated">DiscardEmptyColumns が設定されている場合、垂直タブ (または &quot;ソフト&quot; タブ)で完全に終端された空のカラムは破棄されます。水平タブ (または &quot;ハード&quot; タブ)で終了したカラムは、このフラグの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="c9deb8e1a0cfa1d1825dc49ade2afa7eec850bd3" translate="yes" xml:space="preserve">
          <source>If ErrSkip is returned the column converter error checking path is used for the argument. Drivers may wish to return ErrSkip after they have exhausted their own special cases.</source>
          <target state="translated">ErrSkip が返された場合、カラムコンバータのエラーチェックパスが引数に使用されます。ドライバは、独自の特殊なケースを使い切った後に ErrSkip を返すことを望むかもしれません。</target>
        </trans-unit>
        <trans-unit id="acb8bfb04c68aa06cf649fa65fe83fd0ec6ad99b" translate="yes" xml:space="preserve">
          <source>If Get would otherwise return nil and p.New is non-nil, Get returns the result of calling p.New.</source>
          <target state="translated">Get が nil を返し、p.New が非 nil である場合、Get は p.New を呼び出した結果を返します。</target>
        </trans-unit>
        <trans-unit id="cbb35dd622fd4fc40d747d7fe8a39806c85598b4" translate="yes" xml:space="preserve">
          <source>If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than MaxIdleConns, then MaxIdleConns will be reduced to match the new MaxOpenConns limit.</source>
          <target state="translated">MaxIdleConnsが0よりも大きく、新しいMaxOpenConnsがMaxIdleConnsよりも小さい場合、MaxIdleConnsは新しいMaxOpenConnsの制限値に合わせて縮小されます。</target>
        </trans-unit>
        <trans-unit id="0566ce3b75e32de588395cc9db25a53062d79613" translate="yes" xml:space="preserve">
          <source>If MaxOpenConns is greater than 0 but less than the new MaxIdleConns, then the new MaxIdleConns will be reduced to match the MaxOpenConns limit.</source>
          <target state="translated">MaxOpenConns が 0 よりも大きく、新しい MaxIdleConns よりも小さい場合、新しい MaxIdleConns は MaxOpenConns の制限値に合わせて減少します。</target>
        </trans-unit>
        <trans-unit id="ba59fc6bf9458413409db5ff0b9045c64e756bcb" translate="yes" xml:space="preserve">
          <source>If ReadAt is reading from an input source with a seek offset, ReadAt should not affect nor be affected by the underlying seek offset.</source>
          <target state="translated">ReadAtがシークオフセットを持つ入力ソースから読み出す場合、ReadAtは、その下にあるシークオフセットに影響を与えたり、影響を受けたりすることはないはずです。</target>
        </trans-unit>
        <trans-unit id="cc3d6766541295fe523ec22933263aa9a06c4657" translate="yes" xml:space="preserve">
          <source>If ServeHTTP panics, the server (the caller of ServeHTTP) assumes that the effect of the panic was isolated to the active request. It recovers the panic, logs a stack trace to the server error log, and either closes the network connection or sends an HTTP/2 RST_STREAM, depending on the HTTP protocol. To abort a handler so the client sees an interrupted response but the server doesn't log an error, panic with the value ErrAbortHandler.</source>
          <target state="translated">ServeHTTPがパニックになった場合、サーバー(ServeHTTPの呼び出し元)はパニックの影響が アクティブなリクエストに隔離されたと仮定する。それはパニックを回復し、スタックトレースをサーバーエラーログに記録し、HTTPプロトコルに応じて、 ネットワーク接続を閉じるか、HTTP/2 RST_STREAMを送る。クライアントが中断された応答を見てもサーバーがエラーログを記録しないようにハンドラを中止するには、ErrAbortHandler の値を指定してパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="7c30ed6f837b3e7a9558eb599fa8c56e0e97063b" translate="yes" xml:space="preserve">
          <source>If Times t and u both contain monotonic clock readings, the operations t.After(u), t.Before(u), t.Equal(u), and t.Sub(u) are carried out using the monotonic clock readings alone, ignoring the wall clock readings. If either t or u contains no monotonic clock reading, these operations fall back to using the wall clock readings.</source>
          <target state="translated">Times t と u の両方に単調なクロック値が含まれている場合、t.After(u)、t.Before(u)、t.Equal(u)、および t.Sub(u)の操作は、壁のクロック値を無視して単調なクロック値のみを使用して実行されます。t または u のいずれかに単調クロックの読み取り値が含まれていない場合、これらの演算は壁のクロックの読み取り値を使用するようにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="bc4d8baa4dbb3f1a94db59ec9aa34f357782809d" translate="yes" xml:space="preserve">
          <source>If Unmarshal encounters a field type that implements the Unmarshaler interface, Unmarshal calls its UnmarshalXML method to produce the value from the XML element. Otherwise, if the value implements encoding.TextUnmarshaler, Unmarshal calls that value's UnmarshalText method.</source>
          <target state="translated">Unmarshal は、Unmarshaler インターフェイスを実装したフィールド型に遭遇した場合、Unmarshal はその UnmarshalXML メソッドを呼び出して XML 要素から値を生成します。そうでなければ、値が encoding.TextUnmarshaler を実装している場合、Unmarshal はその値の UnmarshalText メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="e7b1cef9234b9022f80f99b102d2ffde95658f55" translate="yes" xml:space="preserve">
          <source>If UseCRLF is true, the Writer ends each output line with \r\n instead of \n.</source>
          <target state="translated">UseCRLFが真の場合、Writerは、各出力行を\\rnの代わりに\rnで終了する。</target>
        </trans-unit>
        <trans-unit id="24f02297c63afdceb90dae9a889e378f8f5dc1c7" translate="yes" xml:space="preserve">
          <source>If WriteAt is writing to a destination with a seek offset, WriteAt should not affect nor be affected by the underlying seek offset.</source>
          <target state="translated">WriteAtがシークオフセットを持つデスティネーションに書き込んでいる場合、WriteAtは、その下にあるシークオフセットに影響を与えたり、影響を受けたりすることはないはずです。</target>
        </trans-unit>
        <trans-unit id="01ec25dfc6204eb6897de5935b9779223b3cad13" translate="yes" xml:space="preserve">
          <source>If a &quot;range&quot; action initializes a variable, the variable is set to the successive elements of the iteration. Also, a &quot;range&quot; may declare two variables, separated by a comma:</source>
          <target state="translated">range &quot;アクションが変数を初期化する場合、その変数は反復の連続した要素に設定されます。また、&quot;range &quot;はカンマで区切られた2つの変数を宣言することができます。</target>
        </trans-unit>
        <trans-unit id="58d444ec12c7fa5d6e872ab50772870b5a393d01" translate="yes" xml:space="preserve">
          <source>If a Conn does not implement ExecerContext, the sql package's DB.Exec will fall back to Execer; if the Conn does not implement Execer either, DB.Exec will first prepare a query, execute the statement, and then close the statement.</source>
          <target state="translated">Conn が ExecerContext を実装していない場合、SQL パッケージの DB.Exec は Execer にフォールバックします。Conn が Execer を実装していない場合、DB.Exec は最初にクエリを準備し、文を実行し、文を閉じます。</target>
        </trans-unit>
        <trans-unit id="44e6dfb38005e87694379cf1c0216f95562e9cfb" translate="yes" xml:space="preserve">
          <source>If a Conn does not implement Pinger, the sql package's DB.Ping and DB.PingContext will check if there is at least one Conn available.</source>
          <target state="translated">ConnがPingerを実装していない場合、SQLパッケージのDB.PingとDB.PingContextは、少なくとも1つのConnが利用可能かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="21128809a4ab46817c40f8b5969689593dcd6f72" translate="yes" xml:space="preserve">
          <source>If a Conn does not implement QueryerContext, the sql package's DB.Query will fall back to Queryer; if the Conn does not implement Queryer either, DB.Query will first prepare a query, execute the statement, and then close the statement.</source>
          <target state="translated">Conn が QueryerContext を実装していない場合、SQL パッケージの DB.Query は Queryer にフォールバックします。Conn が Queryer を実装していない場合、DB.Query は最初にクエリを準備し、文を実行し、文を閉じます。</target>
        </trans-unit>
        <trans-unit id="45c4be212f44031bede2b5276a4a3589a0dc2b98" translate="yes" xml:space="preserve">
          <source>If a Conn implements neither ExecerContext nor Execer, the sql package's DB.Exec will first prepare a query, execute the statement, and then close the statement.</source>
          <target state="translated">Conn が ExecerContext も Execer も実装していない場合、SQL パッケージの DB.Exec は最初にクエリを準備し、文を実行し、文を閉じます。</target>
        </trans-unit>
        <trans-unit id="1cb5d6dd6f4d516d1ae37935040abf369ba105f8" translate="yes" xml:space="preserve">
          <source>If a Conn implements neither QueryerContext nor Queryer, the sql package's DB.Query will first prepare a query, execute the statement, and then close the statement.</source>
          <target state="translated">Conn が QueryerContext も Queryer も実装していない場合、SQL パッケージの DB.Query は最初にクエリを準備し、文を実行してから文を閉じます。</target>
        </trans-unit>
        <trans-unit id="71c0f29e06c175a2adb537fdf47269746a601d0d" translate="yes" xml:space="preserve">
          <source>If a Driver implements DriverContext, then sql.DB will call OpenConnector to obtain a Connector and then invoke that Connector's Conn method to obtain each needed connection, instead of invoking the Driver's Open method for each connection. The two-step sequence allows drivers to parse the name just once and also provides access to per-Conn contexts.</source>
          <target state="translated">ドライバがDriverContextを実装している場合、sql.DBはOpenConnectorを呼び出してConnectorを取得し、そのConnectorのConnメソッドを呼び出して必要な接続を取得します。この 2 段階のシーケンスにより、ドライバは 1 回だけ名前を解析し、Conn 単位のコンテキストへのアクセスも可能になります。</target>
        </trans-unit>
        <trans-unit id="232b341436c8f9f54c10a5dba1cf92c214798814" translate="yes" xml:space="preserve">
          <source>If a JSON value is not appropriate for a given target type, or if a JSON number overflows the target type, Unmarshal skips that field and completes the unmarshaling as best it can. If no more serious errors are encountered, Unmarshal returns an UnmarshalTypeError describing the earliest such error. In any case, it's not guaranteed that all the remaining fields following the problematic one will be unmarshaled into the target object.</source>
          <target state="translated">JSON 値が指定されたターゲット型に適切でない場合、または JSON 数がターゲット型をオーバーフローした場合、Unmarshal はそのフィールドをスキップして、可能な限りのアンマーシャリングを完了します。これ以上深刻なエラーが発生しなかった場合、Unmarshal はそのようなエラーのうち最も早いものを記述した UnmarshalTypeError を返します。いずれにしても、問題のあるフィールドに続く残りのすべてのフィールドがターゲットオブジェクトにアンマーシャリングされることは保証されていません。</target>
        </trans-unit>
        <trans-unit id="07bd09bc1ed04a73b33dd796fe781c9034c95572" translate="yes" xml:space="preserve">
          <source>If a Stmt is prepared on a Tx or Conn, it will be bound to a single underlying connection forever. If the Tx or Conn closes, the Stmt will become unusable and all operations will return an error. If a Stmt is prepared on a DB, it will remain usable for the lifetime of the DB. When the Stmt needs to execute on a new underlying connection, it will prepare itself on the new connection automatically.</source>
          <target state="translated">Tx または Conn 上に Stmt が用意されている場合、それは永遠に単一の基礎となる接続にバインドされます。Tx または Conn が閉じた場合、Stmt は使用不能となり、すべての操作はエラーを返します。Stmt が DB 上に用意されている場合は、DB の寿命まで使用可能なままです。Stmt が新しい接続上で実行する必要がある場合、新しい接続上で自動的に準備されます。</target>
        </trans-unit>
        <trans-unit id="3b80dd32b6041fa4ef2f09439544647455bd33ab" translate="yes" xml:space="preserve">
          <source>If a Value has an IsBoolFlag() bool method returning true, the command-line parser makes -name equivalent to -name=true rather than using the next command-line argument.</source>
          <target state="translated">値が真を返す IsBoolFlag()bool メソッドを持つ場合、コマンドライン・パーサは、次のコマンドライン引数を使用するのではなく、-name を -name=true と同等にします。</target>
        </trans-unit>
        <trans-unit id="1d651c7c470bed2709ac735baaeec98dda753ea4" translate="yes" xml:space="preserve">
          <source>If a Writer is configured to filter HTML, HTML tags and entities are passed through. The widths of tags and entities are assumed to be zero (tags) and one (entities) for formatting purposes.</source>
          <target state="translated">WriterがHTMLをフィルタリングするように設定されている場合、HTMLのタグとエンティティが通過します。タグとエンティティの幅は、書式設定のためにゼロ(タグ)と1(エンティティ)と見なされます。</target>
        </trans-unit>
        <trans-unit id="52438c4d80c78ea57962cd3af33f715085501ef6" translate="yes" xml:space="preserve">
          <source>If a benchmark needs some expensive setup before running, the timer may be reset:</source>
          <target state="translated">ベンチマークを実行する前に何らかの高価な設定が必要な場合、タイマーがリセットされることがあります。</target>
        </trans-unit>
        <trans-unit id="d7727dcc2593fe8b30c299beed7e6a6b86f7e22b" translate="yes" xml:space="preserve">
          <source>If a benchmark needs to test performance in a parallel setting, it may use the RunParallel helper function; such benchmarks are intended to be used with the go test -cpu flag:</source>
          <target state="translated">ベンチマークが並列設定で性能をテストする必要がある場合、RunParallelヘルパー関数を使用することができます;そのようなベンチマークは、go test -cpuフラグで使用することを意図しています。</target>
        </trans-unit>
        <trans-unit id="a54ff063e15dbe9b378b4160c9280c7409b22dcb" translate="yes" xml:space="preserve">
          <source>If a dest argument has type *[]byte, Scan saves in that argument a copy of the corresponding data. The copy is owned by the caller and can be modified and held indefinitely. The copy can be avoided by using an argument of type *RawBytes instead; see the documentation for RawBytes for restrictions on its use.</source>
          <target state="translated">dest引数の型が*[]バイトの場合、Scanはその引数に対応するデータのコピーを保存します。コピーは呼び出し元が所有し、無期限に変更・保持することができます。代わりに*RawBytes型の引数を使用することでコピーを回避することができます。</target>
        </trans-unit>
        <trans-unit id="20186d29e290366ced58a159801092dd58a776e3" translate="yes" xml:space="preserve">
          <source>If a field uses a tag &quot;a&amp;gt;b&amp;gt;c&quot;, then the element c will be nested inside parent elements a and b. Fields that appear next to each other that name the same parent will be enclosed in one XML element.</source>
          <target state="translated">フィールドがタグ &quot;a&amp;gt; b&amp;gt; c&quot;を使用する場合、要素cは親要素aおよびb内にネストされます。同じ親を指定する、隣り合って表示されるフィールドは、1つのXML要素で囲まれます。</target>
        </trans-unit>
        <trans-unit id="9df6c8e2aa87346f45992618c6d030de25253b4a" translate="yes" xml:space="preserve">
          <source>If a file's name, after stripping the extension and a possible _test suffix, matches any of the following patterns:</source>
          <target state="translated">拡張子と_testの可能性のある接尾辞を除去した後のファイル名が、以下のパターンのいずれかに一致する場合。</target>
        </trans-unit>
        <trans-unit id="d6c46042317668db3b232f00f55a1ab61b108925" translate="yes" xml:space="preserve">
          <source>If a goroutine holds a RWMutex for reading and another goroutine might call Lock, no goroutine should expect to be able to acquire a read lock until the initial read lock is released. In particular, this prohibits recursive read locking. This is to ensure that the lock eventually becomes available; a blocked Lock call excludes new readers from acquiring the lock.</source>
          <target state="translated">goroutineが読み取り用のRWMutexを保持していて、別のgoroutineがLockを呼び出す可能性がある場合、どのgoroutineも最初の読み取りロックが解放されるまで読み取りロックを取得できることを期待すべきではありません。特に、これは再帰的なリードロックを禁止します。これは、ロックが最終的に利用可能になることを確実にするためです。ブロックされた Lock 呼び出しは、新しいリーダがロックを取得することを除外します。</target>
        </trans-unit>
        <trans-unit id="54b696ffb9e87ece68a0d432b267874461da7b0c" translate="yes" xml:space="preserve">
          <source>If a pointer argument must be converted to uintptr for use as an argument, that conversion must appear in the call expression itself:</source>
          <target state="translated">ポインタの引数を引数として使用するためにuintptrに変換しなければならない場合、その変換は呼び出し式自体に現れなければなりません。</target>
        </trans-unit>
        <trans-unit id="a7be185efba59538fbd160cb8d8144506dd7c57d" translate="yes" xml:space="preserve">
          <source>If a subtree has been registered and a request is received naming the subtree root without its trailing slash, ServeMux redirects that request to the subtree root (adding the trailing slash). This behavior can be overridden with a separate registration for the path without the trailing slash. For example, registering &quot;/images/&quot; causes ServeMux to redirect a request for &quot;/images&quot; to &quot;/images/&quot;, unless &quot;/images&quot; has been registered separately.</source>
          <target state="translated">サブツリーが登録されていて、最後のスラッシュのないサブツリールートを指定したリクエストを受け取った場合、ServeMux はそのリクエストをサブツリールートにリダイレクトします (最後のスラッシュを追加します)。この動作は、末尾にスラッシュを付けないパスを個別に登録することでオーバーライドできます。例えば、「/images/」を登録すると、「/images」が個別に登録されていない限り、ServeMuxは「/images」に対するリクエストを「/images/」にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="104ed2563a73defc4faea46be899a20063ec818c" translate="yes" xml:space="preserve">
          <source>If a template with the given name already exists, the new HTML template will replace it. The existing template will be reset and disassociated with t.</source>
          <target state="translated">指定された名前のテンプレートが既に存在する場合、新しいHTMLテンプレートがそれを置き換えます。既存のテンプレートはリセットされ、tとの関連付けが解除されます。</target>
        </trans-unit>
        <trans-unit id="463d47c06a7100464461b73a8101f7660c223839" translate="yes" xml:space="preserve">
          <source>If a value is passed to Encode and the type is not a struct (or pointer to struct, etc.), for simplicity of processing it is represented as a struct of one field. The only visible effect of this is to encode a zero byte after the value, just as after the last field of an encoded struct, so that the decode algorithm knows when the top-level value is complete.</source>
          <target state="translated">値が Encode に渡され、その型が struct (または struct へのポインタなど)でない場合、処理を簡単にするために、1 つのフィールドの struct として表現されます。これの唯一の目に見える効果は、エンコードされた構造体の最後のフィールドの後と同じように、値の後にゼロバイトをエンコードすることで、デコードアルゴリズムはトップレベルの値が完了したときに知ることができます。</target>
        </trans-unit>
        <trans-unit id="d7d467cb048cd5252bcf40b068f20c227a6c5268" translate="yes" xml:space="preserve">
          <source>If an Error or String method triggers a panic when called by a print routine, the fmt package reformats the error message from the panic, decorating it with an indication that it came through the fmt package. For example, if a String method calls panic(&quot;bad&quot;), the resulting formatted message will look like</source>
          <target state="translated">エラーや文字列メソッドがプリントルーチンによって呼び出されたときにパニックを引き起こす場合、fmtパッケージはパニックからのエラーメッセージを再構成し、それがfmtパッケージを経由して来たことを示す表示で装飾します。例えば、Stringメソッドがpanic(&quot;bad&quot;)を呼び出すと、結果として得られるフォーマットされたメッセージは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d3278ea50ebebf5ea6289948b73b15f204c549e9" translate="yes" xml:space="preserve">
          <source>If an argument has type *interface{}, Scan copies the value provided by the underlying driver without conversion. When scanning from a source value of type []byte to *interface{}, a copy of the slice is made and the caller owns the result.</source>
          <target state="translated">引数の型が*interface{}の場合、変換せずに基礎となるドライバによって提供された値をコピーします。型[]バイトのソース値から*interface{}にスキャンすると、スライスのコピーが作成され、呼び出し元は結果を所有します。</target>
        </trans-unit>
        <trans-unit id="6c7525fb96a9e6dded8b4dd1c94198523c01a7a6" translate="yes" xml:space="preserve">
          <source>If an error occurs, Import returns a non-nil error and a non-nil *Package containing partial information.</source>
          <target state="translated">エラーが発生した場合、Importは非nilのエラーと部分情報を含む非nilの*Packageを返す。</target>
        </trans-unit>
        <trans-unit id="22a8988276a496bd99d453fc14d11bfb8cde90f0" translate="yes" xml:space="preserve">
          <source>If an invalid argument is given for a verb, such as providing a string to %d, the generated string will contain a description of the problem, as in these examples:</source>
          <target state="translated">d に文字列を与えるなど、動詞に無効な引数が与えられた場合、以下の例のように、生成された文字列には問題の説明が含まれます。</target>
        </trans-unit>
        <trans-unit id="2f5f672edd948d125f1a8e2164d6570e08508e2a" translate="yes" xml:space="preserve">
          <source>If any of c.Stdin, c.Stdout or c.Stderr are not an *os.File, Wait also waits for the respective I/O loop copying to or from the process to complete.</source>
          <target state="translated">c.Stdin、c.Stdout、c.Stderrのいずれかが*os.Fileでない場合、Waitはプロセスへの、またはプロセスからのそれぞれのI/Oループのコピーが完了するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="f2c348eae7d177d9986e66ac0dbb1fa9c1c8eff2" translate="yes" xml:space="preserve">
          <source>If b has invalid headers and cannot be encoded, EncodeToMemory returns nil. If it is important to report details about this error case, use Encode instead.</source>
          <target state="translated">b に無効なヘッダがあり、エンコードできない場合、EncodeToMemory は nil を返します。このエラーケースの詳細を報告することが重要な場合は、代わりに Encode を使用します。</target>
        </trans-unit>
        <trans-unit id="81446ee41b4f44409d6c98445688e2c9dc448484" translate="yes" xml:space="preserve">
          <source>If base == 0, the base is implied by the string's prefix: base 2 for &quot;0b&quot;, base 8 for &quot;0&quot; or &quot;0o&quot;, base 16 for &quot;0x&quot;, and base 10 otherwise. Also, for base == 0 only, underscore characters are permitted per the Go integer literal syntax. If base is below 0, is 1, or is above 36, an error is returned.</source>
          <target state="translated">ベース ==0 の場合、ベースは文字列の接頭辞によって暗示されます。&quot;0b&quot; の場合はベース 2、&quot;0&quot; または &quot;0o&quot; の場合はベース 8、&quot;0x&quot; の場合はベース 16、それ以外の場合はベース 10 です。また、base ==0 の場合のみ、Go 整数リテラル構文ではアンダースコア文字が許可されます。base が 0 以下、1、または 36 以上の場合はエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="ff7cc9932856849c823dcd514ebeb18a3facfdc3" translate="yes" xml:space="preserve">
          <source>If body is of type *bytes.Buffer, *bytes.Reader, or *strings.Reader, the returned request's ContentLength is set to its exact value (instead of -1), GetBody is populated (so 307 and 308 redirects can replay the body), and Body is set to NoBody if the ContentLength is 0.</source>
          <target state="translated">bodyが*bytes.Buffer、*bytes.Reader、または*strings.Readerの型の場合、返されたリクエストのContentLengthが正確な値に設定され(-1ではなく)、GetBodyが生成され(リダイレクトがボディを再生できるように)、ContentLengthが0の場合はBodyがNoBodyに設定されます。</target>
        </trans-unit>
        <trans-unit id="07cc785c40dfb93b351fa360eaf5c11b3a687a2b" translate="yes" xml:space="preserve">
          <source>If body is true, DumpRequest also returns the body. To do so, it consumes req.Body and then replaces it with a new io.ReadCloser that yields the same bytes. If DumpRequest returns an error, the state of req is undefined.</source>
          <target state="translated">bodyがtrueの場合、DumpRequestはbodyも返します。そのためには、req.Bodyを消費し、同じバイト数を生成する新しいio.ReadCloserに置き換えます。DumpRequestがエラーを返した場合、reqの状態は未定義です。</target>
        </trans-unit>
        <trans-unit id="e8579022b484933fe4198bbc194c8a61565aa3ef" translate="yes" xml:space="preserve">
          <source>If d &amp;lt;= 0, connections are reused forever.</source>
          <target state="translated">d &amp;lt;= 0の場合、接続は永久に再利用されます。</target>
        </trans-unit>
        <trans-unit id="11054b794a9e66d49b745938ef3b656c43f6d39e" translate="yes" xml:space="preserve">
          <source>If data is a reflect.Value, the template applies to the concrete value that the reflect.Value holds, as in fmt.Print.</source>
          <target state="translated">データが reflect.Value の場合、テンプレートは、fmt.Print.Print のように reflect.Value が保持する具体的な値に適用されます。</target>
        </trans-unit>
        <trans-unit id="f83ceb0ced26c1c764536b5ff1b4fa15e74b62ce" translate="yes" xml:space="preserve">
          <source>If dst implements the ReaderFrom interface, the copy is implemented using it.</source>
          <target state="translated">dstがReaderFromインターフェイスを実装している場合、コピーはそれを使って実装されます。</target>
        </trans-unit>
        <trans-unit id="6833b17cfcf75e1b486e6c702d0520e85f9b86a2" translate="yes" xml:space="preserve">
          <source>If e.Unwrap() returns a non-nil error w, then we say that e wraps w.</source>
          <target state="translated">e.Unwrap()が非nilのエラーwを返す場合は、eがwをラップしていることになります。</target>
        </trans-unit>
        <trans-unit id="81786ec59b1db1b26068cac6cb2b8f77c848e02c" translate="yes" xml:space="preserve">
          <source>If enabled (the default), the Reader expects the input to be a sequence of individually gzipped data streams, each with its own header and trailer, ending at EOF. The effect is that the concatenation of a sequence of gzipped files is treated as equivalent to the gzip of the concatenation of the sequence. This is standard behavior for gzip readers.</source>
          <target state="translated">この機能を有効にすると (デフォルトでは)、 リーダは入力を、それぞれ独自のヘッダとトレーラを持つ、個別に gzip 化されたデータストリームのシーケンスで、EOF で終わるものと期待します。これは、一連の gzip されたファイルを連結したものが、その連結したものを gzip したものと同等に扱われることを意味します。これは gzip リーダの標準的な動作です。</target>
        </trans-unit>
        <trans-unit id="eddf53f9cf1fca82486b2bf4ab21846e817aba06" translate="yes" xml:space="preserve">
          <source>If f calls Run, the result will be an estimate of running all its subbenchmarks that don't call Run in sequence in a single benchmark.</source>
          <target state="translated">fがRunを呼び出した場合、その結果は、Runを呼び出さないすべてのサブベンチマークを1つのベンチマークで順番に実行した場合の推定値となります。</target>
        </trans-unit>
        <trans-unit id="24aa535ef0441b2f9dcbe0e4bbff395ed6067287" translate="yes" xml:space="preserve">
          <source>If f depends on testing flags, then Init must be used to register those flags before calling Benchmark and before calling flag.Parse.</source>
          <target state="translated">fがテストフラグに依存している場合は、Benchmarkを呼び出す前、flag.Parseを呼び出す前に、Initを使用してフラグを登録しなければなりません。</target>
        </trans-unit>
        <trans-unit id="08b53793b968ecc1f35e8cac439169b17517c834" translate="yes" xml:space="preserve">
          <source>If f has a symbol version table, the returned Symbols will have initialized Version and Library fields.</source>
          <target state="translated">fがシンボルのバージョンテーブルを持っている場合、返されたシンボルは、バージョンフィールドとライブラリフィールドが初期化されています。</target>
        </trans-unit>
        <trans-unit id="d8c9bcc7ac7c9df2b87a2dbabc8c6ec7964d0a03" translate="yes" xml:space="preserve">
          <source>If f panics, Do considers it to have returned; future calls of Do return without calling f.</source>
          <target state="translated">f がパニックになった場合、Do はそれが戻ってきたとみなします。</target>
        </trans-unit>
        <trans-unit id="cfdf3a788dfda0a29c8d0cf447a4cec60c0bc739" translate="yes" xml:space="preserve">
          <source>If file was opened with the O_APPEND flag, WriteAt returns an error.</source>
          <target state="translated">ファイルが O_APPEND フラグでオープンされた場合、WriteAt はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="822b75e4d85498d0d8696aa19251040ab86e6e90" translate="yes" xml:space="preserve">
          <source>If filter != nil, only the files with os.FileInfo entries passing through the filter (and ending in &quot;.go&quot;) are considered. The mode bits are passed to ParseFile unchanged. Position information is recorded in fset, which must not be nil.</source>
          <target state="translated">filter !=nil の場合は、os.FileInfo エントリがフィルタを通過した (そして &quot;.go&quot; で終わる)ファイルのみを考慮します。モードビットは変更されずに ParseFile に渡されます。位置情報は fset に記録されますが、これは nil であってはなりません。</target>
        </trans-unit>
        <trans-unit id="78e87476be473e05171bc062a52f2074d7a8ce2f" translate="yes" xml:space="preserve">
          <source>If flush is true, Decode assumes that src represents the end of the input stream and processes it completely rather than wait for the completion of another 32-bit block.</source>
          <target state="translated">flush が真の場合,Decode は src が入力ストリームの終わりを表し,別の 32 ビットブロックの完了を待つのではなく,完全に処理すると仮定します.</target>
        </trans-unit>
        <trans-unit id="abcd3e65f17be630b169b8e4f1f0e366085cdf18" translate="yes" xml:space="preserve">
          <source>If format is a different character, Text returns a &quot;%&quot; followed by the unrecognized format character.</source>
          <target state="translated">フォーマットが別の文字である場合、テキストは&quot;%&quot;の後に認識できないフォーマット文字を返します。</target>
        </trans-unit>
        <trans-unit id="5da5429fa2e44a95884b22d9fe6c9389416883fa" translate="yes" xml:space="preserve">
          <source>If id is an embedded struct field, ObjectOf returns the field (*Var) it defines, not the type (*TypeName) it uses.</source>
          <target state="translated">idが埋め込まれた構造体フィールドの場合、ObjectOfは、それが使用する型(*TypeName)ではなく、それが定義したフィールド(*Var)を返します。</target>
        </trans-unit>
        <trans-unit id="5f15fee8dc8778902e45311fbf0205cb96dcffed" translate="yes" xml:space="preserve">
          <source>If inuseZero is true, the profile includes allocation records where r.AllocBytes &amp;gt; 0 but r.AllocBytes == r.FreeBytes. These are sites where memory was allocated, but it has all been released back to the runtime.</source>
          <target state="translated">inuseZeroがtrueの場合、プロファイルには、r.AllocBytes&amp;gt; 0であるがr.AllocBytes == r.FreeBytesである割り当てレコードが含まれます。これらはメモリが割り当てられたサイトですが、すべてランタイムに解放されています。</target>
        </trans-unit>
        <trans-unit id="892475b4c6ec1f9a63d5df678595d2602a01d9d3" translate="yes" xml:space="preserve">
          <source>If laddr is nil, a local address is automatically chosen. If the IP field of raddr is nil or an unspecified IP address, the local system is assumed.</source>
          <target state="translated">laddr が nil の場合、ローカルアドレスが自動的に選択されます。raddr の IP フィールドが nil または指定されていない IP アドレスの場合は、ローカルシステムが想定されます。</target>
        </trans-unit>
        <trans-unit id="ba24dc1c2b3bf1cedb83b06f2414cb64ac15d1da" translate="yes" xml:space="preserve">
          <source>If laddr is non-nil, it is used as the local address for the connection.</source>
          <target state="translated">laddrがnilでない場合は、接続のローカルアドレスとして使用されます。</target>
        </trans-unit>
        <trans-unit id="9842a555fc5ba63bad435c92db4ce21af1894ec3" translate="yes" xml:space="preserve">
          <source>If level is in the range [-2, 9] then the error returned will be nil. Otherwise the error returned will be non-nil.</source>
          <target state="translated">レベルが [-2,9]の範囲内にある場合、返されるエラーは nil になります。それ以外の場合は、エラーは nil ではありません。</target>
        </trans-unit>
        <trans-unit id="550da103e5e342ac2c8eff3e35ca3b010db8375f" translate="yes" xml:space="preserve">
          <source>If modtime is not the zero time or Unix epoch, ServeContent includes it in a Last-Modified header in the response. If the request includes an If-Modified-Since header, ServeContent uses modtime to decide whether the content needs to be sent at all.</source>
          <target state="translated">modtimeがゼロタイムまたはUnixエポックでない場合、ServeContentは応答のLast-Modifiedヘッダーにそれを含める。リクエストが If-Modified-Since ヘッダを含む場合、ServeContent は modtime を使用してコンテンツが全く送信される必要があるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="4498ca26095d9f0afc17fc3d124ee10f9b929767" translate="yes" xml:space="preserve">
          <source>If n &amp;gt; 0, Readdir returns at most n FileInfo structures. In this case, if Readdir returns an empty slice, it will return a non-nil error explaining why. At the end of a directory, the error is io.EOF.</source>
          <target state="translated">n&amp;gt; 0の場合、Readdirは最大でn個のFileInfo構造を返します。この場合、Readdirが空のスライスを返すと、理由を説明するnil以外のエラーが返されます。ディレクトリの最後でのエラーはio.EOFです。</target>
        </trans-unit>
        <trans-unit id="fc3b271d5f3a597b07b28cf1083fa8b465cfe35b" translate="yes" xml:space="preserve">
          <source>If n &amp;gt; 0, Readdirnames returns at most n names. In this case, if Readdirnames returns an empty slice, it will return a non-nil error explaining why. At the end of a directory, the error is io.EOF.</source>
          <target state="translated">n&amp;gt; 0の場合、Readdirnamesは最大でn個の名前を返します。この場合、Readdirnamesが空のスライスを返すと、理由を説明するnil以外のエラーが返されます。ディレクトリの最後でのエラーはio.EOFです。</target>
        </trans-unit>
        <trans-unit id="eac4c3ba5a8c94ad8cb8a4a397c8ee90135cea13" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, Readdir returns all the FileInfo from the directory in a single slice. In this case, if Readdir succeeds (reads all the way to the end of the directory), it returns the slice and a nil error. If it encounters an error before the end of the directory, Readdir returns the FileInfo read until that point and a non-nil error.</source>
          <target state="translated">n &amp;lt;= 0の場合、ReaddirはディレクトリのすべてのFileInfoを単一のスライスで返します。この場合、Readdirが成功（ディレクトリの最後まで読み取り）すると、スライスとnilエラーが返されます。ディレクトリが終了する前にエラーが発生した場合、Readdirはその時点までに読み取られたFileInfoと非nilエラーを返します。</target>
        </trans-unit>
        <trans-unit id="c3cc55f92ff37a98b5144ea82d578410d2c8c458" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, Readdirnames returns all the names from the directory in a single slice. In this case, if Readdirnames succeeds (reads all the way to the end of the directory), it returns the slice and a nil error. If it encounters an error before the end of the directory, Readdirnames returns the names read until that point and a non-nil error.</source>
          <target state="translated">n &amp;lt;= 0の場合、Readdirnamesは単一のスライスのディレクトリからすべての名前を返します。この場合、Readdirnamesが成功すると（ディレクトリの最後まで読み取ります）、スライスとnilエラーが返されます。ディレクトリの終わりより前にエラーが発生した場合、Readdirnamesはその時点までに読み取られた名前とnil以外のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="2b903f7cf121247bf3e7b3aca6c7022dbb5df0e4" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, no idle connections are retained.</source>
          <target state="translated">n &amp;lt;= 0の場合、アイドル接続は保持されません。</target>
        </trans-unit>
        <trans-unit id="be61ba0537fe2779cebfab91a18a370978aeba0f" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, then there is no limit on the number of open connections. The default is 0 (unlimited).</source>
          <target state="translated">n &amp;lt;= 0の場合、開いている接続の数に制限はありません。デフォルトは0（無制限）です。</target>
        </trans-unit>
        <trans-unit id="3ffbdba0310e5330b6e39ba21df32f4ec64c1673" translate="yes" xml:space="preserve">
          <source>If name contains no path separators, Command uses LookPath to resolve name to a complete path if possible. Otherwise it uses name directly as Path.</source>
          <target state="translated">名前にパス区切り文字が含まれていない場合、可能であれば、コマンドはLookPathを使用して名前を完全なパスに解決します。それ以外の場合は、名前を直接Pathとして使用します。</target>
        </trans-unit>
        <trans-unit id="e919c20774517f309335e67ee8266068c715cb69" translate="yes" xml:space="preserve">
          <source>If no entry is found, a nil object is returned. In this case, the returned index and indirect values have the following meaning:</source>
          <target state="translated">エントリが見つからない場合は、nil オブジェクトが返されます。この場合、返されたインデックスと間接値は以下の意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="2a51e78e82aff9bdb39269ef8cd918a49b097d8e" translate="yes" xml:space="preserve">
          <source>If opts.Roots is nil and system roots are unavailable the returned error will be of type SystemRootsError.</source>
          <target state="translated">opts.Rootsがnilでシステムルートが利用できない場合、返されるエラーはSystemRootsError型になります。</target>
        </trans-unit>
        <trans-unit id="93b29b6dd544ee070bf7867f11c38d0b30ce0f19" translate="yes" xml:space="preserve">
          <source>If p points into an allocated object, it can be advanced through the object by conversion to uintptr, addition of an offset, and conversion back to Pointer.</source>
          <target state="translated">p が割り当てられたオブジェクトを指している場合は,uintptr への変換,オフセットの追加,Pointer への変換により,オブジェクトの中を進むことができます.</target>
        </trans-unit>
        <trans-unit id="9c4a4899af1972effe20bb6d4fb3e2cc68991f24" translate="yes" xml:space="preserve">
          <source>If pc is not covered by any entry in this line table, SeekPC returns ErrUnknownPC. In this case, *entry and the final seek position are unspecified.</source>
          <target state="translated">pcがこの行テーブルのどのエントリにもカバーされていない場合、SeekPCはErrUnknownPCを返します。この場合、*エントリと最終的なシーク位置は指定されません。</target>
        </trans-unit>
        <trans-unit id="47b9ebf87a72a4fc29d6e9526a5e472474f83dfe" translate="yes" xml:space="preserve">
          <source>If pc represents multiple functions because of inlining, it returns the a *Func describing the innermost function, but with an entry of the outermost function.</source>
          <target state="translated">pcがインライン化により複数の関数を表現している場合は、最内の関数を記述した*Funcを返しますが、最外の関数のエントリが含まれています。</target>
        </trans-unit>
        <trans-unit id="8759c1ffe2421dc4e493bad121916d1c4a784268" translate="yes" xml:space="preserve">
          <source>If pkg == nil, the Universe scope is used and the provided position pos is ignored. If pkg != nil, and pos is invalid, the package scope is used. Otherwise, pos must belong to the package.</source>
          <target state="translated">pkg ==nil の場合、Universe スコープが使用され、指定された位置 pos は無視されます。pkg !=nil で pos が無効な場合は、package スコープが使用されます。それ以外の場合は、そのパッケージに属している必要があります。</target>
        </trans-unit>
        <trans-unit id="3b501d10f0b3315a0edcb0a3aa0bfa72db3f19b3" translate="yes" xml:space="preserve">
          <source>If pkg was loaded from export data, Imports includes packages that provide package-level objects referenced by pkg. This may be more or less than the set of packages directly imported by pkg's source code.</source>
          <target state="translated">pkg がエクスポートデータから読み込まれた場合、Imports には pkg が参照するパッケージレベルのオブジェクトを提供する packages が含まれます。これは、pkgのソースコードによって直接インポートされたパッケージのセットよりも多いかもしれませんし、少ないかもしれません。</target>
        </trans-unit>
        <trans-unit id="a13dac68b11bffa0323115aff464b296dab14f09" translate="yes" xml:space="preserve">
          <source>If r and s point to different rings, linking them creates a single ring with the elements of s inserted after r. The result points to the element following the last element of s after insertion.</source>
          <target state="translated">r と s が異なるリングを指している場合、それらをリンクすると、r の後に s の要素が挿入された単一のリングが作成されます。</target>
        </trans-unit>
        <trans-unit id="b045896c9ac0e612d840b26fdcd16f9492dfd688" translate="yes" xml:space="preserve">
          <source>If r and s point to the same ring, linking them removes the elements between r and s from the ring. The removed elements form a subring and the result is a reference to that subring (if no elements were removed, the result is still the original value for r.Next(), and not nil).</source>
          <target state="translated">rとsが同じリングを指している場合、それらをリンクすることで、rとsの間の要素がリングから削除されます。削除された要素はサブリングを形成し、結果はそのサブリングへの参照となります(要素が削除されていない場合、結果はr.Next()の元の値のままであり、nilではありません)。</target>
        </trans-unit>
        <trans-unit id="8848277c3a29719067a054c042f2cd449fd3596a" translate="yes" xml:space="preserve">
          <source>If rand is not nil then RSA blinding will be used to avoid timing side-channel attacks.</source>
          <target state="translated">randがnilでない場合は、タイミングのサイドチャネル攻撃を避けるためにRSA blindingが使用されます。</target>
        </trans-unit>
        <trans-unit id="a19e63938d7a0894376439e5599ffa43b250a5d4" translate="yes" xml:space="preserve">
          <source>If rt.RoundTrip returns ErrSkipAltProtocol, the Transport will handle the RoundTrip itself for that one request, as if the protocol were not registered.</source>
          <target state="translated">rt.RoundTripがErrSkipAltProtocolを返した場合、プロトコルが登録されていないかのように、トランスポートはその1つのリクエストに対してRoundTrip自体を処理します。</target>
        </trans-unit>
        <trans-unit id="54ad40399e089deda52c88ae3ba4659988c86560" translate="yes" xml:space="preserve">
          <source>If s does not contain sep and sep is not empty, Split returns a slice of length 1 whose only element is s.</source>
          <target state="translated">s が sep を含まず、sep が空でない場合、Split は唯一の要素が s である長さ 1 のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="9daee5dcf8a47681ddd5e5f835fb1dbed1f83aea" translate="yes" xml:space="preserve">
          <source>If s does not contain sep and sep is not empty, SplitAfter returns a slice of length 1 whose only element is s.</source>
          <target state="translated">s が sep を含まず sep が空でない場合、SplitAfter は、唯一の要素が s である長さ 1 のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="95759bb8e19ebcbb98672ac7fdd18943d4708775" translate="yes" xml:space="preserve">
          <source>If s is not syntactically well-formed, ParseFloat returns err.Err = ErrSyntax.</source>
          <target state="translated">s が構文的に整形されていない場合、ParseFloat は err.Err=ErrSyntax を返します。</target>
        </trans-unit>
        <trans-unit id="3e257c93b527ddb828e688937de0ccc11edf5f79" translate="yes" xml:space="preserve">
          <source>If s is syntactically well-formed but is more than 1/2 ULP away from the largest floating point number of the given size, ParseFloat returns f = &amp;plusmn;Inf, err.Err = ErrRange.</source>
          <target state="translated">sが構文的に整形式であるが、指定されたサイズの最大の浮動小数点数から1/2 ULP以上離れている場合、ParseFloatはf =&amp;plusmn;Inf、err.Err = ErrRangeを返します。</target>
        </trans-unit>
        <trans-unit id="2958c3475b5e1c01d3ef1742914960b9002f7a9e" translate="yes" xml:space="preserve">
          <source>If sec &amp;gt; 0, the data is sent in the background as with sec &amp;lt; 0. On some operating systems after sec seconds have elapsed any remaining unsent data may be discarded.</source>
          <target state="translated">秒&amp;gt; 0の場合、データは秒&amp;lt;0の場合と同様にバックグラウンドで送信されます。一部のオペレーティングシステムでは、秒秒が経過した後、未送信の残りのデータが破棄される場合があります。</target>
        </trans-unit>
        <trans-unit id="f56f69cce6422c40a21ab01c5418cdbd4bf77063" translate="yes" xml:space="preserve">
          <source>If sec &amp;lt; 0 (the default), the operating system finishes sending the data in the background.</source>
          <target state="translated">sec &amp;lt;0（デフォルト）の場合、オペレーティングシステムはバックグラウンドでのデータ送信を終了します。</target>
        </trans-unit>
        <trans-unit id="d8d3489dffe9a7fe6c9ad9a620bad31395af4507" translate="yes" xml:space="preserve">
          <source>If sec == 0, the operating system discards any unsent or unacknowledged data.</source>
          <target state="translated">sec ==0 の場合、OS は未送信または未認識のデータを破棄します。</target>
        </trans-unit>
        <trans-unit id="be66aebe1a8866a8f4dc281f1bd57616b1f982bc" translate="yes" xml:space="preserve">
          <source>If sep is empty, Split splits after each UTF-8 sequence. If both s and sep are empty, Split returns an empty slice.</source>
          <target state="translated">sep が空の場合、Split は各 UTF-8 シーケンスの後に分割します。s と sep の両方が空の場合、Split は空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="489ca1eca08b1f0a405730583d47d533fb4b076e" translate="yes" xml:space="preserve">
          <source>If sep is empty, SplitAfter splits after each UTF-8 sequence. If both s and sep are empty, SplitAfter returns an empty slice.</source>
          <target state="translated">sep が空の場合、SplitAfter は各 UTF-8 シーケンスの後に分割します。s と sep の両方が空の場合、SplitAfter は空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="2a3657d8164caf54f78f733fc8ef2ecda3905624" translate="yes" xml:space="preserve">
          <source>If src != nil, ParseFile parses the source from src and the filename is only used when recording position information. The type of the argument for the src parameter must be string, []byte, or io.Reader. If src == nil, ParseFile parses the file specified by filename.</source>
          <target state="translated">src !=nil の場合,ParseFile は src からソースを解析し,ファイル名は位置情報を記録する際にのみ使用されます.src パラメータの引数の型は string,[]byte,または io.Reader でなければなりません.src ==nil の場合,ParseFile は filename で指定されたファイルを解析します.</target>
        </trans-unit>
        <trans-unit id="fe8d7fb1ea6082771e2bec41671407fae46d618e" translate="yes" xml:space="preserve">
          <source>If src implements the WriterTo interface, the copy is implemented by calling src.WriteTo(dst). Otherwise, if dst implements the ReaderFrom interface, the copy is implemented by calling dst.ReadFrom(src).</source>
          <target state="translated">src が WriterTo インターフェースを実装している場合,コピーは src.WriteTo(dst)を呼び出すことで実装されます.そうでなければ,dst が ReaderFrom インターフェースを実装している場合,コピーは dst.ReadFrom(src)を呼び出すことで実装されます.</target>
        </trans-unit>
        <trans-unit id="e40b342e6817ab9c3ac4432d840f11c1f0b22325" translate="yes" xml:space="preserve">
          <source>If src is a partial source file, the leading and trailing space of src is applied to the result (such that it has the same leading and trailing space as src), and the result is indented by the same amount as the first line of src containing code. Imports are not sorted for partial source files.</source>
          <target state="translated">srcが部分的なソースファイルの場合,srcの先頭と末尾のスペースが結果に適用され(srcと同じ先頭と末尾のスペースを持つように),その結果は,コードを含むsrcの最初の行と同じ量だけインデントされます.インポートは、部分的なソースファイルに対してはソートされません。</target>
        </trans-unit>
        <trans-unit id="7c67bad25cffc131c00d1eef36d585ec638c9170" translate="yes" xml:space="preserve">
          <source>If srv.Addr is blank, &quot;:http&quot; is used.</source>
          <target state="translated">srv.Addrが空白の場合は&quot;:http &quot;が使われます。</target>
        </trans-unit>
        <trans-unit id="f9e50e1a49136013b88aa780931a141882ea6f39" translate="yes" xml:space="preserve">
          <source>If srv.Addr is blank, &quot;:https&quot; is used.</source>
          <target state="translated">srv.Addrが空白の場合は&quot;:https &quot;が使われます。</target>
        </trans-unit>
        <trans-unit id="ad0892d319e6dc448b8b5b8890782a44c3d82311" translate="yes" xml:space="preserve">
          <source>If successful, tmpl will now be injection-safe. Otherwise, err is an error defined in the docs for ErrorCode.</source>
          <target state="translated">成功すれば、tmplはインジェクションセーフになります。そうでなければ、errはErrorCodeのドキュメントで定義されているエラーです。</target>
        </trans-unit>
        <trans-unit id="178b407eef387370d388c8cfe01edb64789c6b52" translate="yes" xml:space="preserve">
          <source>If the Client's Transport does not have a CloseIdleConnections method then this method does nothing.</source>
          <target state="translated">クライアントのトランスポートに CloseIdleConnections メソッドがない場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="a2836eacebc948128e4aa3ce4d8b1d3fc7d6a477" translate="yes" xml:space="preserve">
          <source>If the Content-Type header has not been set, Redirect sets it to &quot;text/html; charset=utf-8&quot; and writes a small HTML body. Setting the Content-Type header to any value, including nil, disables that behavior.</source>
          <target state="translated">Content-Typeヘッダが設定されていない場合、Redirectはそれを &quot;text/html;charset=utf-8 &quot;に設定し、小さなHTMLボディを書き込む。Content-Type ヘッダを nil を含む任意の値に設定すると、その動作を無効にします。</target>
        </trans-unit>
        <trans-unit id="3ae6135ca1107639811cd5daef71ae7fca79e2f6" translate="yes" xml:space="preserve">
          <source>If the Context field is 0, the context function is being called to record the current traceback context. It should record in the Context field whatever information is needed about the current point of execution to later produce a stack trace, probably the stack pointer and PC. In this case the context function will be called from C code.</source>
          <target state="translated">Context フィールドが 0 の場合、現在のトレースバックコンテキストを記録するためにコンテキスト関数が呼び出されます。後でスタックトレースを生成するために、現在の実行ポイントについて必要な情報(おそらくスタックポインタとPC)をContextフィールドに記録しなければなりません。この場合、コンテキスト関数は C コードから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="42011269501bbfe9917fe4565b51ba6a042b7ead" translate="yes" xml:space="preserve">
          <source>If the Context field is not 0, then it is a value returned by a previous call to the context function. This case is called when the context is no longer needed; that is, when the Go code is returning to its C code caller. This permits the context function to release any associated resources.</source>
          <target state="translated">コンテキスト フィールドが 0 でない場合は、以前にコンテキスト関数を呼び出したときに返された値になります。このケースは、コンテキストが不要になったとき、つまり囲碁コードがCコードの呼び出し元に戻るときに呼び出されます。これにより、コンテキスト関数は関連するリソースを解放することができます。</target>
        </trans-unit>
        <trans-unit id="084a8ea923e025ba6d8130824462ac823dad2f19" translate="yes" xml:space="preserve">
          <source>If the Delta field of a CaseRange is UpperLower, it means this CaseRange represents a sequence of the form (say) Upper Lower Upper Lower.</source>
          <target state="translated">CaseRangeのDeltaフィールドがUpperLowerの場合、このCaseRangeは(例えば)Upper Lower Upper Lowerという形式のシーケンスを表していることを意味します。</target>
        </trans-unit>
        <trans-unit id="99155dad735e31c1f83383d55994a89a1d5b0d8e" translate="yes" xml:space="preserve">
          <source>If the Go program is started with a non-empty signal mask, that will generally be honored. However, some signals are explicitly unblocked: the synchronous signals, SIGILL, SIGTRAP, SIGSTKFLT, SIGCHLD, SIGPROF, and, on GNU/Linux, signals 32 (SIGCANCEL) and 33 (SIGSETXID) (SIGCANCEL and SIGSETXID are used internally by glibc). Subprocesses started by os.Exec, or by the os/exec package, will inherit the modified signal mask.</source>
          <target state="translated">Goプログラムが空ではないシグナルマスクで開始された場合、一般的にはそれが尊重されます。しかし、いくつかのシグナルは明示的にブロックが解除されます:同期シグナル、SIGILL、SIGTRAP、SIGSTKFLT、SIGCHLD、SIGPROF、そして GNU/Linux ではシグナル 32 (SIGCANCEL)と 33 (SIGSETXID)です (SIGCANCEL と SIGSETXID は glibc によって内部的に使用されています)。os.Exec または os/exec パッケージによって起動されたサブプロセスは、変更されたシグナルマスクを継承します。</target>
        </trans-unit>
        <trans-unit id="9a19e7607fdf15201f487fc6adac4a654bb31d6b" translate="yes" xml:space="preserve">
          <source>If the Go program is started with either SIGHUP or SIGINT ignored (signal handler set to SIG_IGN), they will remain ignored.</source>
          <target state="translated">囲碁プログラムがSIGHUPまたはSIGINTのいずれかを無視して開始された場合(シグナルハンドラがSIG_IGNに設定されている場合)、これらは無視されたままになります。</target>
        </trans-unit>
        <trans-unit id="bb2401bc392b8c040ae8577c33db0583e1939491" translate="yes" xml:space="preserve">
          <source>If the Go runtime sees an existing signal handler for the SIGCANCEL or SIGSETXID signals (which are used only on GNU/Linux), it will turn on the SA_ONSTACK flag and otherwise keep the signal handler.</source>
          <target state="translated">もしGoランタイムがSIGCANCELまたはSIGSETXIDシグナル(GNU/Linuxでのみ使用される)のための既存のシグナルハンドラを見つけた場合、SA_ONSTACKフラグをオンにし、それ以外の場合はシグナルハンドラを保持します。</target>
        </trans-unit>
        <trans-unit id="b8c9bbe3199fe348a3ebb3c33bad8f777f2557ca" translate="yes" xml:space="preserve">
          <source>If the Go signal handler is invoked on a non-Go thread not running Go code, the handler generally forwards the signal to the non-Go code, as follows. If the signal is SIGPROF, the Go handler does nothing. Otherwise, the Go handler removes itself, unblocks the signal, and raises it again, to invoke any non-Go handler or default system handler. If the program does not exit, the Go handler then reinstalls itself and continues execution of the program.</source>
          <target state="translated">囲碁コードを実行していない非囲碁スレッド上で囲碁シグナルハンドラが呼び出された場合、ハンドラは通常、以下のように非囲碁コードにシグナルを転送します。シグナルが SIGPROF の場合、Go ハンドラは何もしません。そうでなければ、Go ハンドラはそれ自身を削除し、シグナルのブロックを解除し、シグナルを再び発生させて、非Go ハンドラまたはデフォルトのシステムハンドラを呼び出します。プログラムが終了しない場合、Go ハンドラはそれ自身を再インストールし、プログラムの実行を継続します。</target>
        </trans-unit>
        <trans-unit id="d1450a83e799c9f838308f1831ad2410ca5837bc" translate="yes" xml:space="preserve">
          <source>If the IP field of laddr is nil or an unspecified IP address, ListenIP listens on all available IP addresses of the local system except multicast IP addresses.</source>
          <target state="translated">laddrのIPフィールドがnilまたは指定されていないIPアドレスの場合、ListenIPはマルチキャストIPアドレスを除くローカルシステムで利用可能なすべてのIPアドレスをリッスンします。</target>
        </trans-unit>
        <trans-unit id="af82767d02391b6e900db2816b87a4fb9f84a234" translate="yes" xml:space="preserve">
          <source>If the IP field of laddr is nil or an unspecified IP address, ListenTCP listens on all available unicast and anycast IP addresses of the local system. If the Port field of laddr is 0, a port number is automatically chosen.</source>
          <target state="translated">laddr の IP フィールドが nil または指定されていない IP アドレスの場合、ListenTCP はローカルシステムのすべての利用可能なユニキャスト IP アドレスとエ ンジキャスト IP アドレスをリッスンする。laddr の Port フィールドが 0 の場合、ポート番号が自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="af86e9317bf51d088cb071c3ee8a01bff50d7b6b" translate="yes" xml:space="preserve">
          <source>If the IP field of laddr is nil or an unspecified IP address, ListenUDP listens on all available IP addresses of the local system except multicast IP addresses. If the Port field of laddr is 0, a port number is automatically chosen.</source>
          <target state="translated">laddrのIPフィールドがnilまたは指定されていないIPアドレスの場合、ListenUDPはマルチキャストIPアドレスを除くローカルシステムの利用可能なすべてのIPアドレスをリッスンします。laddrのPortフィールドが0の場合、ポート番号が自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="5b648936c52bc2fbcc7b753478ee856cc09da205" translate="yes" xml:space="preserve">
          <source>If the XML name for a struct field is defined by both the field tag and the struct's XMLName field, the names must match.</source>
          <target state="translated">構造体フィールドの XML 名が field タグと構造体の XMLName フィールドの両方で定義されている場合は、名前が一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ef1f744f6bc6158c837d3a4a05d2dd7419e3d5c" translate="yes" xml:space="preserve">
          <source>If the caller has set w's ETag header formatted per RFC 7232, section 2.3, ServeContent uses it to handle requests using If-Match, If-None-Match, or If-Range.</source>
          <target state="translated">発呼側がWのETagヘッダーをRFC7232のセクション2.3に従ってフォーマットしている場合、 ServeContentはそれを使用してIf-Match、If-None-Match、またはIf-Rangeを使用したリクエストを処理する。</target>
        </trans-unit>
        <trans-unit id="7fe34f55752121c99936b8403a6063a8914cb06e" translate="yes" xml:space="preserve">
          <source>If the calling goroutine has locked the operating system thread with runtime.LockOSThread and modified any inheritable OS-level thread state (for example, Linux or Plan 9 name spaces), the new process will inherit the caller's thread state.</source>
          <target state="translated">呼び出し元のゴローチンが runtime.LockOSThread でオペレーティング・システム・スレッドをロックし、継承可能な OS レベルのスレッド状態(Linux や Plan 9 のネームスペースなど)を変更した場合、新しいプロセスは呼び出し元のスレッド状態を継承します。</target>
        </trans-unit>
        <trans-unit id="259a07efdd482c1e280dc36d61c76b7e373057fb" translate="yes" xml:space="preserve">
          <source>If the command fails to run or doesn't complete successfully, the error is of type *ExitError. Other error types may be returned for I/O problems.</source>
          <target state="translated">コマンドの実行に失敗したり、正常に完了しなかった場合、エラーは *ExitError 型になります。I/O問題の場合は、他のタイプのエラーが返されることがあります。</target>
        </trans-unit>
        <trans-unit id="b33403be418b27f91a2d42d554ef5c02f7c63947" translate="yes" xml:space="preserve">
          <source>If the command starts but does not complete successfully, the error is of type *ExitError. Other error types may be returned for other situations.</source>
          <target state="translated">コマンドが開始されたが正常に完了しなかった場合、エラーのタイプは *ExitError です。その他の状況では、他のタイプのエラーが返されることがあります。</target>
        </trans-unit>
        <trans-unit id="5a122d2b8c97a37a880702f2a3fbe016e3749fd3" translate="yes" xml:space="preserve">
          <source>If the current file is sparse, then the regions marked as a hole are read back as NUL-bytes.</source>
          <target state="translated">現在のファイルが疎な場合、ホールとしてマークされた領域は NUL バイトとして読み返されます。</target>
        </trans-unit>
        <trans-unit id="6253658c1bbbfe0517d9a4b3227473cd894d597c" translate="yes" xml:space="preserve">
          <source>If the directory couldn't be read, a nil map and the respective error are returned. If a parse error occurred, a non-nil but incomplete map and the first error encountered are returned.</source>
          <target state="translated">ディレクトリが読み込めなかった場合は、nil のマップとそれぞれのエラーが返されます。パースエラーが発生した場合は、nil ではないが不完全なマップと最初に発生したエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="01b40bd5ac5583f9db3311853c6994966859d236" translate="yes" xml:space="preserve">
          <source>If the driver supports cursors, a returned Value may also implement the Rows interface in this package. This is used, for example, when a user selects a cursor such as &quot;select cursor(select * from my_table) from dual&quot;. If the Rows from the select is closed, the cursor Rows will also be closed.</source>
          <target state="translated">ドライバがカーソルをサポートしている場合、返される値は本パッケージの Rows インターフェースを実装している可能性があります。これは、例えば、&quot;select cursor(select*from my_table)from dual &quot;のようなカーソルをユーザが選択するときに使用されます。selectからのRowsがクローズされている場合、カーソルのRowsもクローズされます。</target>
        </trans-unit>
        <trans-unit id="cf50ebb80b297da2b505a620be031cb25dcead76" translate="yes" xml:space="preserve">
          <source>If the format (which is implicitly %v for Println etc.) is valid for a string (%s %q %v %x %X), the following two rules apply:</source>
          <target state="translated">文字列(%s %s %q %v %x %X)に対してフォーマット(Printlnなどでは暗黙のうちに%v)が有効な場合、以下の2つの規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="0f42e25dba03dca0e51f87ed12e981c71373e332" translate="yes" xml:space="preserve">
          <source>If the format specifier includes a %w verb with an error operand, the returned error will implement an Unwrap method returning the operand. It is invalid to include more than one %w verb or to supply it with an operand that does not implement the error interface. The %w verb is otherwise a synonym for %v.</source>
          <target state="translated">フォーマット指定子にエラー・オペランドを持つ %w 動詞が含まれている場合、返されるエラーは、オペランドを返す Unwrap メソッドを実装します。複数の %w 動詞を含むことや、エラー・インタフェースを実装しないオペランドを指定することは無効です。w 動詞は、それ以外の場合、%v の同義語です。</target>
        </trans-unit>
        <trans-unit id="b70a519f0eee1914e654572a47f9ae5a7a8a3889" translate="yes" xml:space="preserve">
          <source>If the host in the address parameter is not a literal IP address or the port is not a literal port number, ResolveTCPAddr resolves the address to an address of TCP end point. Otherwise, it parses the address as a pair of literal IP address and port number. The address parameter can use a host name, but this is not recommended, because it will return at most one of the host name's IP addresses.</source>
          <target state="translated">address パラメータのホストがリテラル IP アドレスでない場合、またはポートがリテラルポート番号でない場合、ResolveTCPAddr はアドレスを TCP エンドポイントのアドレスに解決します。それ以外の場合は、アドレスをリテラル IP アドレスとポート番号のペアとして解析します。address パラメータにはホスト名を使用することができますが、ホスト名の IP アドレスのうち最大でも 1 つを返すことになるため、これは推奨されません。</target>
        </trans-unit>
        <trans-unit id="60603d4b10b0e1d0e446fdae0a4a44c25a6c45b7" translate="yes" xml:space="preserve">
          <source>If the host in the address parameter is not a literal IP address or the port is not a literal port number, ResolveUDPAddr resolves the address to an address of UDP end point. Otherwise, it parses the address as a pair of literal IP address and port number. The address parameter can use a host name, but this is not recommended, because it will return at most one of the host name's IP addresses.</source>
          <target state="translated">address パラメータのホストがリテラル IP アドレスでない場合、またはポートがリテラルポート番号でない場合、ResolveUDPAddr はアドレスを UDP エンドポイントのアドレスに解決します。それ以外の場合は、アドレスをリテラル IP アドレスとポート番号のペアとして解析します。address パラメータにはホスト名を使用することができますが、ホスト名の IP アドレスのうち最大でも 1 つを返すことになるので、これはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="cd0fc2990a9a9cf8fad81f64436555d3d6b35355" translate="yes" xml:space="preserve">
          <source>If the host in the address parameter is not a literal IP address, ResolveIPAddr resolves the address to an address of IP end point. Otherwise, it parses the address as a literal IP address. The address parameter can use a host name, but this is not recommended, because it will return at most one of the host name's IP addresses.</source>
          <target state="translated">address パラメータのホストがリテラル IP アドレスでない場合、ResolveIPAddr はそのアドレスを IP エンドポイントのアドレスに解決します。それ以外の場合は、アドレスをリテラル IP アドレスとして解析します。address パラメータにはホスト名を使用することができますが、ホスト名の IP アドレスのうち最大でも 1 つを返すことになるため、これは推奨されません。</target>
        </trans-unit>
        <trans-unit id="199da3dce7215d4cebc5f4fd0619e8dbc8fd6d9d" translate="yes" xml:space="preserve">
          <source>If the key type is not a valid map key type (that is, if it does not implement Go's == operator), MapOf panics.</source>
          <target state="translated">キー型が有効なマップ・キー型でない場合 (Go の ==演算子を実装していない場合)、MapOf はパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="fdcae4b6d304718d87888a4b14792a984d6db584" translate="yes" xml:space="preserve">
          <source>If the location cannot be determined (for example, $HOME is not defined), then it will return an error.</source>
          <target state="translated">場所が特定できない場合(例えば、$HOMEが定義されていないなど)は、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="83fc45c3d88185bce6b913b6fba87e76a3564c14" translate="yes" xml:space="preserve">
          <source>If the n = len(p) bytes returned by ReadAt are at the end of the input source, ReadAt may return either err == EOF or err == nil.</source>
          <target state="translated">ReadAt が返す n=len(p)バイトが入力ソースの最後にある場合、ReadAt は err ==EOF または err ==nil を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="96928e9a3e37cddefc97fd6808cb69e209a645f8" translate="yes" xml:space="preserve">
          <source>If the name is &quot;&quot; or &quot;UTC&quot;, LoadLocation returns UTC. If the name is &quot;Local&quot;, LoadLocation returns Local.</source>
          <target state="translated">名前が &quot;&quot; または &quot;UTC&quot; の場合、LoadLocation は UTC を返します。名前が &quot;Local&quot; の場合、LoadLocation は Local を返します。</target>
        </trans-unit>
        <trans-unit id="71bd5d676aea790d3104c9356a66a88a54f27219" translate="yes" xml:space="preserve">
          <source>If the non-Go code called by the Go program does not change any signal handlers or masks, then the behavior is the same as for a pure Go program.</source>
          <target state="translated">囲碁プログラムによって呼び出された非囲碁コードがシグナルハンドラやマスクを変更しない場合、動作は純粋な囲碁プログラムと同じです。</target>
        </trans-unit>
        <trans-unit id="7ff28c4dacda2b677d57a006ed06c589035c4906" translate="yes" xml:space="preserve">
          <source>If the non-Go code installs a signal handler for any of the asynchronous signals, it may invoke the Go signal handler or not as it chooses. Naturally, if it does not invoke the Go signal handler, the Go behavior described above will not occur. This can be an issue with the SIGPROF signal in particular.</source>
          <target state="translated">非Goコードが非同期信号のシグナルハンドラをインストールした場合、Goシグナルハンドラを呼び出すかどうかは、その選択によります。当然のことながら、Goシグナルハンドラを呼び出さない場合、上述のGoの動作は発生しません。これは、特に SIGPROF シグナルの問題になることがあります。</target>
        </trans-unit>
        <trans-unit id="abd2048f2311a9e6d64b579961e64f72d37d33a6" translate="yes" xml:space="preserve">
          <source>If the non-Go code installs a signal handler for any of the synchronous signals (SIGBUS, SIGFPE, SIGSEGV), then it should record the existing Go signal handler. If those signals occur while executing Go code, it should invoke the Go signal handler (whether the signal occurs while executing Go code can be determined by looking at the PC passed to the signal handler). Otherwise some Go run-time panics will not occur as expected.</source>
          <target state="translated">Go以外のコードが同期信号(SIGBUS、SIGFPE、SIGSEGV)のシグナルハンドラをインストールする場合、既存のGoシグナルハンドラを記録する必要があります。囲碁コードの実行中にこれらのシグナルが発生した場合、囲碁シグナルハンドラを呼び出す必要があります(囲碁コードの実行中にシグナルが発生するかどうかは、シグナルハンドラに渡されたPCを見ることで判断できます)。そうしないと、期待したとおりに囲碁のランタイムパニックが発生しません。</target>
        </trans-unit>
        <trans-unit id="bb19b115a2d359b987ea5bcb60343aca9ae430dd" translate="yes" xml:space="preserve">
          <source>If the non-Go code installs any signal handlers, it must use the SA_ONSTACK flag with sigaction. Failing to do so is likely to cause the program to crash if the signal is received. Go programs routinely run with a limited stack, and therefore set up an alternate signal stack. Also, the Go standard library expects that any signal handlers will use the SA_RESTART flag. Failing to do so may cause some library calls to return &quot;interrupted system call&quot; errors.</source>
          <target state="translated">Go 以外のコードがシグナルハンドラをインストールする場合は、sigaction で SA_ONSTACK フラグを使用する必要があります。これを使用しないと、シグナルを受信したときにプログラムがクラッシュする可能性があります。囲碁プログラムは日常的に限られたスタックで実行されるため、代替のシグナルスタックをセットアップします。また、Go 標準ライブラリは、シグナルハンドラが SA_RESTART フラグを使用することを想定しています。これを使用しないと、一部のライブラリ呼び出しで「システムコールの中断」エラーが返されることがあります。</target>
        </trans-unit>
        <trans-unit id="7e1d203998def7d0f58007e88176f92e21a64b50" translate="yes" xml:space="preserve">
          <source>If the non-Go code starts a new thread, changes the signal mask, and then invokes a Go function in that thread, the Go runtime will automatically unblock certain signals: the synchronous signals, SIGILL, SIGTRAP, SIGSTKFLT, SIGCHLD, SIGPROF, SIGCANCEL, and SIGSETXID. When the Go function returns, the non-Go signal mask will be restored.</source>
          <target state="translated">非Goコードが新しいスレッドを開始し、シグナルマスクを変更し、そのスレッドでGo関数を呼び出した場合、Goランタイムは自動的に特定のシグナルのブロックを解除します:同期シグナル、SIGILL、SIGTRAP、SIGSTKFLT、SIGCHLD、SIGPROF、SIGCANCEL、およびSIGSETXID。Go関数が戻ると、Go以外のシグナルマスクが復元されます。</target>
        </trans-unit>
        <trans-unit id="91074ebc7a3334ebd4f37cdfabaa9ca32fd24f74" translate="yes" xml:space="preserve">
          <source>If the open fails, the error string will be self-explanatory, like</source>
          <target state="translated">オープンに失敗した場合、エラー文字列は次のような自明のものになります。</target>
        </trans-unit>
        <trans-unit id="54fcc24f407eeb4900b5f210d5d49a96c53bb1c9" translate="yes" xml:space="preserve">
          <source>If the prefix of the status does not match the digits in expectCode, ReadCodeLine returns with err set to &amp;amp;Error{code, message}. For example, if expectCode is 31, an error will be returned if the status is not in the range [310,319].</source>
          <target state="translated">ステータスのプレフィックスがexpectCodeの数字と一致しない場合、ReadCodeLineはerrを＆Error {code、message}に設定して戻ります。たとえば、expectCodeが31の場合、ステータスが[310,319]の範囲にない場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="86837437a16860a8105279be00bffc491da5bba2" translate="yes" xml:space="preserve">
          <source>If the prefix of the status does not match the digits in expectCode, ReadResponse returns with err set to &amp;amp;Error{code, message}. For example, if expectCode is 31, an error will be returned if the status is not in the range [310,319].</source>
          <target state="translated">ステータスのプレフィックスがexpectCodeの数字と一致しない場合、ReadResponseはerrを＆Error {code、message}に設定して戻ります。たとえば、expectCodeが31の場合、ステータスが[310,319]の範囲にない場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="5ebf5ba32952d52f53e121ccb89f42cb9010f630" translate="yes" xml:space="preserve">
          <source>If the program has called Notify to receive SIGPIPE signals, the file descriptor number does not matter. The SIGPIPE signal will be delivered to the Notify channel, and the write will fail with an EPIPE error.</source>
          <target state="translated">プログラムがSIGPIPE信号を受信するためにNotifyを呼び出した場合、ファイルディスクリプター番号は関係ありません。SIGPIPE シグナルは Notify チャネルに配信され、書き込みは EPIPE エラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="7cf239f9c12fb938b9596c568e4f45900dce20bb" translate="yes" xml:space="preserve">
          <source>If the program has not called Notify to receive SIGPIPE signals, then the behavior depends on the file descriptor number. A write to a broken pipe on file descriptors 1 or 2 (standard output or standard error) will cause the program to exit with a SIGPIPE signal. A write to a broken pipe on some other file descriptor will take no action on the SIGPIPE signal, and the write will fail with an EPIPE error.</source>
          <target state="translated">プログラムが SIGPIPE シグナルを受信するために Notify を呼んでいない場合、動作はファイルディスクリプタ番号に依存します。ファイルディスクリプタ 1 または 2 の壊れたパイプへの書き込み(標準出力または標準エラー)は、プログラムを SIGPIPE シグナルで終了させます。他のファイルディスクリプタ上の壊れたパイプへの書き込みは、SIGPIPE シグナルには何も作用せず、書き込みは EPIPE エラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="111ef080bfe5d9de228261353c72d73b391743f0" translate="yes" xml:space="preserve">
          <source>If the program is started with a non-empty signal mask, some signals will be explicitly unblocked as described above. If Notify is called for a blocked signal, it will be unblocked. If, later, Reset is called for that signal, or Stop is called on all channels passed to Notify for that signal, the signal will once again be blocked.</source>
          <target state="translated">プログラムが空でないシグナルマスクで開始された場合、上記のようにいくつかのシグナルが明示的にブロック解除されます。ブロックされたシグナルに対して Notify が呼び出された場合、そのシグナルはブロック解除されます。その後、そのシグナルに対して Reset が呼び出されたり、そのシグナルに対して Notify に渡された全てのチャンネルに対して Stop が呼び出されたりすると、そのシグナルは再びブロックされます。</target>
        </trans-unit>
        <trans-unit id="6b4f665c5cfb9144d49b7e1dcb5bc2df2bfa007a" translate="yes" xml:space="preserve">
          <source>If the program was started with SIGHUP or SIGINT ignored, and Notify is called for either signal, a signal handler will be installed for that signal and it will no longer be ignored. If, later, Reset or Ignore is called for that signal, or Stop is called on all channels passed to Notify for that signal, the signal will once again be ignored. Reset will restore the system default behavior for the signal, while Ignore will cause the system to ignore the signal entirely.</source>
          <target state="translated">プログラムがSIGHUPまたはSIGINTを無視して起動され、どちらかの信号に対してNotifyが呼び出された場合、その信号に対してシグナルハンドラがインストールされ、無視されることはなくなります。その後、そのシグナルに対して Reset または Ignore が呼び出されたり、そのシグナルに対して Notify に渡された全てのチャンネルで Stop が呼び出されたりすると、そのシグナルは再び無視されるようになります。Reset はそのシグナルのシステムのデフォルトの動作を復元し、Ignore はそのシグナルを完全に無視するようにします。</target>
        </trans-unit>
        <trans-unit id="a50b71ad5f04ba376647400ad12d829202f07d7f" translate="yes" xml:space="preserve">
          <source>If the provided body is also an io.Closer, the returned Request.Body is set to body and will be closed by the Client methods Do, Post, and PostForm, and Transport.RoundTrip.</source>
          <target state="translated">提供されたbodyがio.Closerでもある場合、返されたRequest.Bodyはbodyに設定され、クライアントメソッドDo,Post,PostFormとTransport.RoundTripによって閉じられます。</target>
        </trans-unit>
        <trans-unit id="a90f0974cd32b46dcc6c15c91f94c9f93252ae8b" translate="yes" xml:space="preserve">
          <source>If the provided body is an io.Closer, it is closed after the request.</source>
          <target state="translated">提供されたボディがio.Closerの場合、リクエスト後にクローズされます。</target>
        </trans-unit>
        <trans-unit id="76a4a3b11148dd18ae8c95298059edf28df076dc" translate="yes" xml:space="preserve">
          <source>If the provided file or directory name is a relative path, it is interpreted relative to the current directory and may ascend to parent directories. If the provided name is constructed from user input, it should be sanitized before calling ServeFile.</source>
          <target state="translated">提供されたファイル名またはディレクトリ名が相対パスである場合、それはカレントディレクトリからの相対パスとして解釈され、親ディレクトリに昇順する可能性があります。提供された名前がユーザ入力から構築されている場合は、ServeFile を呼び出す前にサニタイズされなければなりません。</target>
        </trans-unit>
        <trans-unit id="4e3cf22a6ffbc844d8cc7293fe5c88e56a31e62d" translate="yes" xml:space="preserve">
          <source>If the provided result precision is 0 (see below), it is set to the precision of the argument with the largest precision value before any rounding takes place, and the rounding mode remains unchanged. Thus, uninitialized Floats provided as result arguments will have their precision set to a reasonable value determined by the operands, and their mode is the zero value for RoundingMode (ToNearestEven).</source>
          <target state="translated">提供された結果の精度が0(以下を参照)の場合、丸めが行われる前に最大の精度値を持つ引数の精度に設定され、丸めモードは変更されません。したがって、結果引数として提供される初期化されていない Floats は、その精度がオペランドによって決定される妥当な値に設定され、そのモードは RoundingMode (ToNearestEven)のゼロ値となります。</target>
        </trans-unit>
        <trans-unit id="2b88a75837ac44c3ec57492aadd63fbc336940cb" translate="yes" xml:space="preserve">
          <source>If the request Body's size has not already been limited by MaxBytesReader, the size is capped at 10MB.</source>
          <target state="translated">リクエストBodyのサイズがMaxBytesReaderによって制限されていない場合、サイズは10MBに制限されます。</target>
        </trans-unit>
        <trans-unit id="202ca334b5c1306191933ea4f4be7458350d5dde" translate="yes" xml:space="preserve">
          <source>If the response is multi-line, ReadCodeLine returns an error.</source>
          <target state="translated">レスポンスが複数行の場合、ReadCodeLine はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="cca7e3754527e1fa0174f20268f5f2115cb686b6" translate="yes" xml:space="preserve">
          <source>If the response's Content-Type header is not set, ServeContent first tries to deduce the type from name's file extension and, if that fails, falls back to reading the first block of the content and passing it to DetectContentType. The name is otherwise unused; in particular it can be empty and is never sent in the response.</source>
          <target state="translated">レスポンスのContent-Typeヘッダが設定されていない場合、ServeContentは最初にnameのファイル拡張子から型を推測しようとし、それが失敗した場合は、コンテンツの最初のブロックを読み込んでそれをDetectContentTypeに渡すことに戻ります。nameはそれ以外の場合は使用されません;特に空である可能性があり、レスポンスでは決して送信されません。</target>
        </trans-unit>
        <trans-unit id="4adb610dc4446d1c29fb56aaef6e5c8a55dbd30c" translate="yes" xml:space="preserve">
          <source>If the result is enclosed in square brackets, as literal IPv6 addresses are, the square brackets are removed from the result.</source>
          <target state="translated">リテラルIPv6アドレスのように結果が角括弧で囲まれている場合は、結果から角括弧が削除されます。</target>
        </trans-unit>
        <trans-unit id="46d8ee162d5e124f43ba34e4b526da01d3ba6f66" translate="yes" xml:space="preserve">
          <source>If the result of this process is an empty string, Clean returns the string &quot;.&quot;.</source>
          <target state="translated">この処理の結果が空の文字列の場合、Clean は &quot;.&quot; という文字列を返します。</target>
        </trans-unit>
        <trans-unit id="63039cb93ec1523520a70aa02f8add44a72d2dcc" translate="yes" xml:space="preserve">
          <source>If the resulting type would be larger than the available address space, ArrayOf panics.</source>
          <target state="translated">結果の型が利用可能なアドレス空間よりも大きくなる場合、ArrayOf はパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="49eb9c6b19926a8575c169e52f8df687a6338f21" translate="yes" xml:space="preserve">
          <source>If the returned error is nil, the Response will contain a non-nil Body which the user is expected to close. If the Body is not both read to EOF and closed, the Client's underlying RoundTripper (typically Transport) may not be able to re-use a persistent TCP connection to the server for a subsequent &quot;keep-alive&quot; request.</source>
          <target state="translated">返されたエラーがnilの場合、レスポンスには、ユーザーが閉じることが期待される非nilのBodyが含まれます。ボディがEOFに読み込まれ、クローズされていない場合、クライアントの基礎となるRoundTripper(通常はTransport)は、後続の「キープアライブ」リクエストのためにサーバへの持続的なTCP接続を再利用できない可能性があります。</target>
        </trans-unit>
        <trans-unit id="2bd3e276f21c33ca258e2835ea6ef2502ea92047" translate="yes" xml:space="preserve">
          <source>If the returned token is a keyword, the literal string is the keyword.</source>
          <target state="translated">返されたトークンがキーワードの場合、リテラル文字列がキーワードになります。</target>
        </trans-unit>
        <trans-unit id="d7865630a2cf1e24a8ed7ed472ba9beeb25fa193" translate="yes" xml:space="preserve">
          <source>If the returned token is a literal (token.IDENT, token.INT, token.FLOAT, token.IMAG, token.CHAR, token.STRING) or token.COMMENT, the literal string has the corresponding value.</source>
          <target state="translated">返されたトークンがリテラル(token.IDENT、token.INT、token.FLOAT、token.IMAG、token.CHAR、token.STRING)またはtoken.COMMENTの場合、リテラル文字列は対応する値を持ちます。</target>
        </trans-unit>
        <trans-unit id="7b330824cf4af38e2c2f1237e0044975056d896f" translate="yes" xml:space="preserve">
          <source>If the returned token is token.ILLEGAL, the literal string is the offending character.</source>
          <target state="translated">返されたトークンが token.ILLEGAL の場合、リテラル文字列が違反文字となります。</target>
        </trans-unit>
        <trans-unit id="f2065d9b79fae019bc66ef4f832603a41d2a079f" translate="yes" xml:space="preserve">
          <source>If the returned token is token.SEMICOLON, the corresponding literal string is &quot;;&quot; if the semicolon was present in the source, and &quot;\n&quot; if the semicolon was inserted because of a newline or at EOF.</source>
          <target state="translated">返されたトークンがtoken.SEMICOLONであれば、対応するリテラル文字列は、ソースにセミコロンがあった場合は&quot;;&quot;、改行やEOFでセミコロンが挿入された場合は&quot;\n &quot;となります。</target>
        </trans-unit>
        <trans-unit id="6d82694c27c567dcf0d737897e646720cd59f4a9" translate="yes" xml:space="preserve">
          <source>If the server replies with a redirect, the Client first uses the CheckRedirect function to determine whether the redirect should be followed. If permitted, a 301, 302, or 303 redirect causes subsequent requests to use HTTP method GET (or HEAD if the original request was HEAD), with no body. A 307 or 308 redirect preserves the original HTTP method and body, provided that the Request.GetBody function is defined. The NewRequest function automatically sets GetBody for common standard library body types.</source>
          <target state="translated">サーバがリダイレクトで応答する場合、クライアントは最初に CheckRedirect 関数を使用して、リダイレクトに従うかどうかを判断します。許可されている場合、301、302、303 リダイレクトは、後続のリクエストに HTTP メソッド GET (元のリクエストが HEAD の場合は HEAD)を使用させ、ボディを使用しません。307 または 308 リダイレクトは、Request.GetBody 関数が定義されていれば、元の HTTP メソッドとボディを保持します。NewRequest 関数は、一般的な標準ライブラリのボディタイプ用の GetBody を自動的に設定します。</target>
        </trans-unit>
        <trans-unit id="8bef3b53d6d7bb99946b130aacd06c58001e65ba" translate="yes" xml:space="preserve">
          <source>If the source couldn't be read, the returned AST is nil and the error indicates the specific failure. If the source was read but syntax errors were found, the result is a partial AST (with ast.Bad* nodes representing the fragments of erroneous source code). Multiple errors are returned via a scanner.ErrorList which is sorted by file position.</source>
          <target state="translated">ソースを読み込めなかった場合は、ASTはnilとなり、エラーは特定の失敗を示します。ソースが読み込まれたが構文エラーが見つかった場合は、部分的なASTが返されます(AST.Bad*ノードは誤ったソースコードの断片を表します)。複数のエラーは、ファイルの位置でソートされた scanner.ErrorList によって返されます。</target>
        </trans-unit>
        <trans-unit id="f66a139f57b43b60f302e27759bd0543bc9c0e26" translate="yes" xml:space="preserve">
          <source>If the time has a monotonic clock reading, the returned string includes a final field &quot;m=&amp;plusmn;&amp;lt;value&amp;gt;&quot;, where value is the monotonic clock reading formatted as a decimal number of seconds.</source>
          <target state="translated">時刻に単調な時計の読み取り値がある場合、返される文字列には最後のフィールド &quot;m =&amp;plusmn;&amp;lt;value&amp;gt;&quot;が含まれます。ここで、valueは10進数の秒数としてフォーマットされた単調な時計の読み取り値です。</target>
        </trans-unit>
        <trans-unit id="251f36d24e83127f4dd9319d7cdbc49677b94325" translate="yes" xml:space="preserve">
          <source>If the traceback function is called from a signal handler on a Unix system, SigContext will be the signal context argument passed to the signal handler (a C ucontext_t* cast to uintptr_t). This may be used to start tracing at the point where the signal occurred. If the traceback function is not called from a signal handler, SigContext will be zero.</source>
          <target state="translated">トレースバック関数がUnixシステム上のシグナルハンドラから呼び出された場合、SigContextはシグナルハンドラに渡されたシグナルコンテキスト引数(Cのucontext_t*をuintptr_tにキャストしたもの)になります。これはシグナルが発生したポイントでトレースを開始するために使用されます。トレースバック関数がシグナルハンドラから呼び出されない場合、SigContext はゼロになります。</target>
        </trans-unit>
        <trans-unit id="07b1d78b08994662a459431d46bce8768415b25a" translate="yes" xml:space="preserve">
          <source>If the type name of a slice element ends with &quot;SET&quot; then it's treated as if the &quot;set&quot; tag was set on it. This can be used with nested slices where a struct tag cannot be given.</source>
          <target state="translated">slice要素の型名が &quot;set &quot;で終わる場合は、&quot;set &quot;タグが設定されているかのように扱われます。これは、 struct タグを与えることができないネストされたスライスで使用することができます。</target>
        </trans-unit>
        <trans-unit id="b1b298da75673ff2dc00ea6d79d2dbf4f6d4ad81" translate="yes" xml:space="preserve">
          <source>If the type of the first field of a structure is RawContent then the raw ASN1 contents of the struct will be stored in it.</source>
          <target state="translated">構造体の最初のフィールドの型が RawContent の場合、構造体の生の ASN1 コンテンツが格納されます。</target>
        </trans-unit>
        <trans-unit id="94580cf18c0cdda91d151e0855e03334c0926847" translate="yes" xml:space="preserve">
          <source>If there are nested type ids, the types for all inner type ids must be defined before the top-level type id is used to describe an encoded-v.</source>
          <target state="translated">入れ子になった型IDがある場合は、トップレベルの型IDがエンコードされたVを記述するために使用される前に、すべての内部の型IDの型を定義しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a4b08581fb59710f6d84824026b409a7e3fe2aea" translate="yes" xml:space="preserve">
          <source>If there is an error, it will be of type *PathError.</source>
          <target state="translated">エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="d59b10d118f91edc83c197a1ea597908270dd51e" translate="yes" xml:space="preserve">
          <source>If there is no registered handler that applies to the request, Handler returns a &amp;ldquo;page not found&amp;rdquo; handler and an empty pattern.</source>
          <target state="translated">リクエストに適用される登録済みハンドラーがない場合、ハンドラーは「ページが見つかりません」ハンドラーと空のパターンを返します。</target>
        </trans-unit>
        <trans-unit id="1a7ace82b8245bf4439307ba5dfdbd1b825dcfff" translate="yes" xml:space="preserve">
          <source>If there was a problem walking to the file or directory named by path, the incoming error will describe the problem and the function can decide how to handle that error (and Walk will not descend into that directory). In the case of an error, the info argument will be nil. If an error is returned, processing stops. The sole exception is when the function returns the special value SkipDir. If the function returns SkipDir when invoked on a directory, Walk skips the directory's contents entirely. If the function returns SkipDir when invoked on a non-directory file, Walk skips the remaining files in the containing directory.</source>
          <target state="translated">パスで指定されたファイルやディレクトリへの歩行に問題があった場合、入力されたエラーが問題を説明し、関数はそのエラーをどのように処理するかを決定することができます(そして、Walkはそのディレクトリには降りません)。エラーの場合、info 引数は nil になります。エラーが返された場合、処理は停止します。唯一の例外は、関数が特別な値SkipDirを返した場合です。 ディレクトリに対して呼び出されたときにSkipDirを返した場合、Walkはそのディレクトリの内容を完全にスキップします。ディレクトリ以外のファイルに対して SkipDir を返した場合、Walk はディレクトリ内の残りのファイルをスキップします。</target>
        </trans-unit>
        <trans-unit id="9f28f83ac01122a6b8eb17da82fc365cf06db186" translate="yes" xml:space="preserve">
          <source>If this compilation unit has no line table, it returns nil, nil.</source>
          <target state="translated">このコンパイルユニットに行テーブルがない場合は、nil,nilを返します。</target>
        </trans-unit>
        <trans-unit id="36cfd61621ceef678850032683735978215f2feb" translate="yes" xml:space="preserve">
          <source>If u.Host doesn't contain a valid numeric port, Port returns an empty string.</source>
          <target state="translated">u.Hostに有効な数値のポートが含まれていない場合、Portは空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="1f16e20c1b2a3c0d7a413b8fa21221a527ff3a01" translate="yes" xml:space="preserve">
          <source>If u.Opaque is non-empty, String uses the first form; otherwise it uses the second form. Any non-ASCII characters in host are escaped. To obtain the path, String uses u.EscapedPath().</source>
          <target state="translated">u.Opaqueが空でない場合、Stringは第1の形式を使用し、そうでない場合は第2の形式を使用します。host内の非ASCII文字はすべてエスケープされます。パスを取得するには、Stringはu.EscapedPath()を使用します。</target>
        </trans-unit>
        <trans-unit id="8013c9355c400aa79a6367baa057f4b9d4888841" translate="yes" xml:space="preserve">
          <source>If used in an unsafe context, then the value might be filtered out:</source>
          <target state="translated">安全でないコンテキストで使用された場合、値はフィルタリングされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="169176f5802d140421e02d07f71892f55914e587" translate="yes" xml:space="preserve">
          <source>If v's Kind is Func, the returned pointer is an underlying code pointer, but not necessarily enough to identify a single function uniquely. The only guarantee is that the result is zero if and only if v is a nil func Value.</source>
          <target state="translated">vのKindがFuncの場合、返されるポインタは基礎となるコードポインタですが、単一の関数を一意に識別するには必ずしも十分ではありません。唯一の保証は、v が nil の func Value である場合に限り、結果が 0 であることです。</target>
        </trans-unit>
        <trans-unit id="ee9b69667b384fa6c8c1419304597f7a05f5dda4" translate="yes" xml:space="preserve">
          <source>If v's Kind is Slice, the returned pointer is to the first element of the slice. If the slice is nil the returned value is 0. If the slice is empty but non-nil the return value is non-zero.</source>
          <target state="translated">vの種類がSliceの場合、返されるポインタはSliceの最初の要素になります。sliceがnilの場合は0が返され、sliceが空でnil以外の場合は0以外の値が返されます。</target>
        </trans-unit>
        <trans-unit id="ccce50575e90f1da7bb594b206672d76cc0b7fdc" translate="yes" xml:space="preserve">
          <source>If x is prime, ProbablyPrime returns true. If x is chosen randomly and not prime, ProbablyPrime probably returns false. The probability of returning true for a randomly chosen non-prime is at most &amp;frac14;ⁿ.</source>
          <target state="translated">xが素数の場合、ProbablyPrimeはtrueを返します。xがランダムに選択され、素数ではない場合、ProbablyPrimeはおそらくfalseを返します。ランダムに選択された非素数に対してtrueを返す確率は最大で&amp;frac14;ⁿです。</target>
        </trans-unit>
        <trans-unit id="bf8bf41d1552e2a2314c86bbee51c546608c7502" translate="yes" xml:space="preserve">
          <source>If you like, you can bind the flag to a variable using the Var() functions.</source>
          <target state="translated">必要であれば、Var()関数を使ってフラグを変数にバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="8a6f437f93f8b5dbc142b89b4316e10878736145" translate="yes" xml:space="preserve">
          <source>If your application is not already running an http server, you need to start one. Add &quot;net/http&quot; and &quot;log&quot; to your imports and the following code to your main function:</source>
          <target state="translated">アプリケーションがまだhttpサーバーを実行していない場合は、httpサーバーを起動する必要があります。インポートに &quot;net/http &quot;と &quot;log &quot;を追加し、メイン関数に以下のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="e7a7bb87f973e19b80ef2f0c235948e2ab80ca50" translate="yes" xml:space="preserve">
          <source>If z's precision is 0, it is changed to x's precision before the operation. Rounding is performed according to z's precision and rounding mode.</source>
          <target state="translated">z の精度が 0 の場合は、演算前に x の精度に変更されます。丸めは z の精度と丸めモードに応じて行います。</target>
        </trans-unit>
        <trans-unit id="bf3bdba69c06f396d015a2e68cfa8b8e0dc2a553" translate="yes" xml:space="preserve">
          <source>If {{.}} is the innocuous word, `left`, then it can appear more widely,</source>
          <target state="translated">もし{{{.}}が無害な言葉である`left`であれば、もっと広く出てくる可能性があります。</target>
        </trans-unit>
        <trans-unit id="35dc1b1b93ecc62032ac0000d9cf5065af4bc463" translate="yes" xml:space="preserve">
          <source>IfNode represents an {{if}} action and its commands.</source>
          <target state="translated">IfNodeは{{{if}}}アクションとそのコマンドを表します。</target>
        </trans-unit>
        <trans-unit id="a40a74611ce76ddfa9aec134c7c4d57d7e7d1a0b" translate="yes" xml:space="preserve">
          <source>Ignore causes the provided signals to be ignored. If they are received by the program, nothing will happen. Ignore undoes the effect of any prior calls to Notify for the provided signals. If no signals are provided, all incoming signals will be ignored.</source>
          <target state="translated">Ignore は、提供された信号を無視します。プログラムが受信した場合は何も起こりません。Ignore は、提供されたシグナルに対する事前の Notify コールの効果を取り消します。シグナルが提供されない場合、すべての着信シグナルは無視されます。</target>
        </trans-unit>
        <trans-unit id="98d36857a614a1e009d79e216b4eb0d9115f0404" translate="yes" xml:space="preserve">
          <source>Ignored reports whether sig is currently ignored.</source>
          <target state="translated">Ignored は、シグが現在無視されているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="4d88a112acad4eaba636cd685d95e848e229a4fb" translate="yes" xml:space="preserve">
          <source>Ilogb returns the binary exponent of x as an integer.</source>
          <target state="translated">Ilogbはxの2進指数を整数として返します。</target>
        </trans-unit>
        <trans-unit id="44e069a8f4a7e1ac23418ede1f9fbec843a967dd" translate="yes" xml:space="preserve">
          <source>Imag returns the imaginary part of x, which must be a numeric or unknown value. If x is Unknown, the result is Unknown.</source>
          <target state="translated">Imag は x の虚数部を返します。xがUnknownの場合、結果はUnknownとなります。</target>
        </trans-unit>
        <trans-unit id="30d40b43edb0bdc3eabf2d534c36f9d06f964b6e" translate="yes" xml:space="preserve">
          <source>Image is a finite rectangular grid of color.Color values taken from a color model.</source>
          <target state="translated">画像は、カラーモデルから取得されたカラー値の有限の長方形のグリッドです。</target>
        </trans-unit>
        <trans-unit id="26d71317c3ede5b3f54e923608b8db6326957a5e" translate="yes" xml:space="preserve">
          <source>Image is an image.Image with a Set method to change a single pixel.</source>
          <target state="translated">Imageは、1ピクセルを変更するためのSetメソッドを持つimage.Imageです。</target>
        </trans-unit>
        <trans-unit id="b146748a0514484acff9fb056c40176e7e0d62af" translate="yes" xml:space="preserve">
          <source>Implementation restriction: The counting forms x{n,m}, x{n,}, and x{n} reject forms that create a minimum or maximum repetition count above 1000. Unlimited repetitions are not subject to this restriction.</source>
          <target state="translated">実装制限。カウンティングフォーム x{n,m},x{n,},x{n}は、最小または最大の繰り返し回数が 1000 回を超えるフォームを拒否します。無制限の繰り返しはこの制限の対象にはなりません。</target>
        </trans-unit>
        <trans-unit id="75c9903908feb1732654db7dd3662c68681cf3c0" translate="yes" xml:space="preserve">
          <source>Implementations must not retain p.</source>
          <target state="translated">実装はpを保持してはならない。</target>
        </trans-unit>
        <trans-unit id="baccfe949bd483e0aa453da0b286a6848971e885" translate="yes" xml:space="preserve">
          <source>Implementations of CookieJar must be safe for concurrent use by multiple goroutines.</source>
          <target state="translated">CookieJarの実装は、複数のゴロチンによる同時使用に対して安全でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2496dd56381c55b51499d5f91502dcff20d2b771" translate="yes" xml:space="preserve">
          <source>Implementations of PublicSuffixList must be safe for concurrent use by multiple goroutines.</source>
          <target state="translated">PublicSuffixList の実装は、複数の goroutines が同時に使用しても安全でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f73bf070b6238c284ef7b4d02061d370d3bb9d34" translate="yes" xml:space="preserve">
          <source>Implementations of Read are discouraged from returning a zero byte count with a nil error, except when len(p) == 0. Callers should treat a return of 0 and nil as indicating that nothing happened; in particular it does not indicate EOF.</source>
          <target state="translated">Readの実装では、len(p)==0の場合を除いて、0バイトカウントとnilエラーを返すことは推奨されていません。 呼び出し側は、0とnilを返すことは何も起きなかったことを示すものとして扱わなければなりません;特にEOFを示すものではありません。</target>
        </trans-unit>
        <trans-unit id="9c4eb58019f122cd6fcd79f868e42855509e5b17" translate="yes" xml:space="preserve">
          <source>Implementations of Token are discouraged from returning a nil token with a nil error. Callers should treat a return of nil, nil as indicating that nothing happened; in particular it does not indicate EOF.</source>
          <target state="translated">Tokenの実装では、nilエラーでnilトークンを返すことは推奨されていません。呼び出し側は nil,nil のリターンを何も起きなかったことを示すものとして扱うべきです。</target>
        </trans-unit>
        <trans-unit id="3b31ef7323ed3ca421b9bab6f7dbaab32c7ce726" translate="yes" xml:space="preserve">
          <source>Implements reports whether type V implements interface T.</source>
          <target state="translated">インプルメントは、V型がインターフェースTを実装しているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="5ba5f70840c67e6a055ce04e03bb2454bb162d9f" translate="yes" xml:space="preserve">
          <source>Import is shorthand for Default.Import.</source>
          <target state="translated">インポートは Default.Import の略です。</target>
        </trans-unit>
        <trans-unit id="6afc9b3e57abb6585be9561d376bdea28ca944ae" translate="yes" xml:space="preserve">
          <source>Import returns details about the Go package named by the import path, interpreting local import paths relative to the srcDir directory. If the path is a local import path naming a package that can be imported using a standard import path, the returned package will set p.ImportPath to that path.</source>
          <target state="translated">インポートは、srcDir ディレクトリからの相対的なローカルインポートパスを解釈して、インポートパスで指定された Go パッケージの詳細を返します。パスが標準のインポートパスを使用してインポートできるパッケージを指定したローカルのインポートパスである場合、返されるパッケージは p.ImportPath をそのパスに設定します。</target>
        </trans-unit>
        <trans-unit id="93d88a517c9d75699c2e4045b6e3fc932cd88482" translate="yes" xml:space="preserve">
          <source>ImportDir is like Import but processes the Go package found in the named directory.</source>
          <target state="translated">ImportDir は Import と似ていますが、指定されたディレクトリにある Go パッケージを処理します。</target>
        </trans-unit>
        <trans-unit id="58d6f3af90d9fbc41be2c405bfa8615d93151250" translate="yes" xml:space="preserve">
          <source>ImportDir is shorthand for Default.ImportDir.</source>
          <target state="translated">ImportDirはDefault.ImportDirの略です。</target>
        </trans-unit>
        <trans-unit id="2d321830ed77e3baaf4ac8b7f7efc36408c85002" translate="yes" xml:space="preserve">
          <source>ImportMode is reserved for future use.</source>
          <target state="translated">ImportModeは将来の使用のために予約されています。</target>
        </trans-unit>
        <trans-unit id="81d5bfd42309b64b183f9701f930099193a14426" translate="yes" xml:space="preserve">
          <source>Imported returns the package that was imported. It is distinct from Pkg(), which is the package containing the import statement.</source>
          <target state="translated">Imported は、インポートされたパッケージを返します。これは、インポート文を含むパッケージである Pkg()とは区別されます。</target>
        </trans-unit>
        <trans-unit id="98f8e071166bb5be3aecf52c0312f3d8e38c742a" translate="yes" xml:space="preserve">
          <source>ImportedLibraries returns the names of all libraries referred to by the binary f that are expected to be linked with the binary at dynamic link time.</source>
          <target state="translated">ImportedLibrariesは、ダイナミックリンク時にバイナリとリンクされることが予想されるバイナリfによって参照されるすべてのライブラリの名前を返します。</target>
        </trans-unit>
        <trans-unit id="6d0d053d5be94190ae4125e53a45e74c9bfff903" translate="yes" xml:space="preserve">
          <source>ImportedLibraries returns the paths of all libraries referred to by the binary f that are expected to be linked with the binary at dynamic link time.</source>
          <target state="translated">ImportedLibrariesは、ダイナミックリンク時にバイナリとリンクされると予想されるバイナリfによって参照されるすべてのライブラリのパスを返します。</target>
        </trans-unit>
        <trans-unit id="27f49356d80e117cb6ff37f13e3b8dc616e332cb" translate="yes" xml:space="preserve">
          <source>ImportedSymbols returns the names of all symbols referred to by the binary f that are expected to be satisfied by other libraries at dynamic load time.</source>
          <target state="translated">ImportedSymbolsは、動的ロード時に他のライブラリで満たされると予想されるバイナリfによって参照されるすべてのシンボルの名前を返します。</target>
        </trans-unit>
        <trans-unit id="80301d15602072b275cf4e9d642684ee556fd2a0" translate="yes" xml:space="preserve">
          <source>ImportedSymbols returns the names of all symbols referred to by the binary f that are expected to be satisfied by other libraries at dynamic load time. It does not return weak symbols.</source>
          <target state="translated">ImportedSymbolsは、動的ロード時に他のライブラリが満たすことが期待されるバイナリfで参照されるすべてのシンボルの名前を返します。弱いシンボルは返しません。</target>
        </trans-unit>
        <trans-unit id="75eb201c4952cde504ceda9eb34765cbfc018641" translate="yes" xml:space="preserve">
          <source>Imports returns the list of packages directly imported by pkg; the list is in source order.</source>
          <target state="translated">Imports は pkg によって直接インポートされた packages のリストを返します。</target>
        </trans-unit>
        <trans-unit id="cb7bc76d7380682c92ffb45e3be0edf510619c0c" translate="yes" xml:space="preserve">
          <source>In C syntax, this struct will be</source>
          <target state="translated">C の構文では、この構造体は</target>
        </trans-unit>
        <trans-unit id="031e67b82062bc206ba16bfbb78969301350778f" translate="yes" xml:space="preserve">
          <source>In Go 1 and Go 1.1, each package produced one Obj for all Go sources and one Obj per C source file.</source>
          <target state="translated">Go 1とGo 1.1では、各パッケージはすべてのGoソースに対して1つのObjを、Cソースファイルに対して1つのObjを生成していました。</target>
        </trans-unit>
        <trans-unit id="f1a4145c4d681021c6b688a748d3fd850af7e56f" translate="yes" xml:space="preserve">
          <source>In Go 1.1 and earlier, each function (represented by a Func) had its own LineTable, and the line number corresponded to a numbering of all source lines in the program, across all files. That absolute line number would then have to be converted separately to a file name and line number within the file.</source>
          <target state="translated">Go 1.1以前のバージョンでは、各関数(Funcで表される)は独自のLineTableを持っており、行番号はプログラム内のすべてのソース行のナンバリングに対応していました。この絶対的な行番号は、ファイル内のファイル名と行番号に個別に変換しなければなりませんでした。</target>
        </trans-unit>
        <trans-unit id="35c4a15e4a2e0d9709fe9d9d2d8891336f5119ee" translate="yes" xml:space="preserve">
          <source>In Go 1.12 and earlier, it was possible to distribute packages in binary form without including the source code used for compiling the package. The package was distributed with a source file not excluded by build constraints and containing a &quot;//go:binary-only-package&quot; comment. Like a build constraint, this comment appeared at the top of a file, preceded only by blank lines and other line comments and with a blank line following the comment, to separate it from the package documentation. Unlike build constraints, this comment is only recognized in non-test Go source files.</source>
          <target state="translated">Go 1.12 以前のバージョンでは、パッケージのコンパイルに使用したソースコードを含まずにバイナリ形式でパッケージを配布することが可能でした。パッケージは、ビルド制約によって除外されず、&quot;//go:binary-only-package&quot; コメントを含むソースファイルとともに配布されました。ビルド制約と同様に、このコメントはファイルの先頭に表示され、空行や他の行のコメントだけが先行し、コメントの後に空行が続くことで、パッケージのドキュメントから分離されています。ビルド制約とは異なり、このコメントはテスト用ではない Go ソースファイルでのみ認識されます。</target>
        </trans-unit>
        <trans-unit id="cc8775c16cc6c9f67e9f67d2c4b9b38bd2343802" translate="yes" xml:space="preserve">
          <source>In Go 1.2, the format of the data changed so that there is a single LineTable for the entire program, shared by all Funcs, and there are no absolute line numbers, just line numbers within specific files.</source>
          <target state="translated">Go 1.2では、データのフォーマットが変更され、すべてのFuncで共有されるプログラム全体の単一のLineTableが存在し、絶対的な行番号はなく、特定のファイル内の行番号だけが存在するようになりました。</target>
        </trans-unit>
        <trans-unit id="94c3f9b8a2f1195c43f29bc6d1587c741d49bcbe" translate="yes" xml:space="preserve">
          <source>In Go 1.2, there is a single Obj for the entire program.</source>
          <target state="translated">Go 1.2では、プログラム全体に1つのObjがあります。</target>
        </trans-unit>
        <trans-unit id="fc1a1510c05c5e605f2bf42bab100aff6fd4f01e" translate="yes" xml:space="preserve">
          <source>In Printf, Sprintf, and Fprintf, the default behavior is for each formatting verb to format successive arguments passed in the call. However, the notation [n] immediately before the verb indicates that the nth one-indexed argument is to be formatted instead. The same notation before a '*' for a width or precision selects the argument index holding the value. After processing a bracketed expression [n], subsequent verbs will use arguments n+1, n+2, etc. unless otherwise directed.</source>
          <target state="translated">Printf、Sprintf、およびFprintfでは、デフォルトの動作は、各書式設定動詞が、呼び出しで渡された連続した引数を書式設定することです。しかし、動詞の直前にある[n]という記法は、インデックスの付いた n 番目の引数が代わりにフォーマットされることを示しています。幅または精度を表す '*' の前の同じ表記法は、値を保持する引数インデックスを選択します。括弧付き式[n]を処理した後、後続の動詞は、特に指示がない限り、引数n+1、n+2などを使用します。</target>
        </trans-unit>
        <trans-unit id="6f69301b556dc9f571bc4bb3612422a63af49e86" translate="yes" xml:space="preserve">
          <source>In TLS 1.3, this type is called NamedGroup, but at this time this library only supports Elliptic Curve based groups. See RFC 8446, Section 4.2.7.</source>
          <target state="translated">TLS 1.3 では、このタイプは NamedGroup と呼ばれていますが、現時点では、このライブラリは楕円曲線ベースのグループのみをサポートしています。RFC 8446 のセクション 4.2.7 を参照してください。</target>
        </trans-unit>
        <trans-unit id="93a2aff531fe6a26d094463bdd12d8ce980726db" translate="yes" xml:space="preserve">
          <source>In a Go program that includes non-Go code, typically C/C++ code accessed using cgo or SWIG, Go's startup code normally runs first. It configures the signal handlers as expected by the Go runtime, before the non-Go startup code runs. If the non-Go startup code wishes to install its own signal handlers, it must take certain steps to keep Go working well. This section documents those steps and the overall effect changes to signal handler settings by the non-Go code can have on Go programs. In rare cases, the non-Go code may run before the Go code, in which case the next section also applies.</source>
          <target state="translated">Go 以外のコード、通常は cgo または SWIG を使用してアクセスする C/C++コードを含む Go プログラムでは、通常、Go のスタートアップコードが最初に実行されます。これは、Go ランタイムによって期待されるシグナルハンドラを設定し、非Go スタートアップコードが実行される前に実行します。Go 以外のスタートアップコードが独自のシグナルハンドラをインストールしたい場合は、Go の動作を維持するために特定のステップを踏まなければなりません。このセクションでは、これらのステップと、Go 以外のコードによるシグナルハンドラ設定の変更が Go プログラムに与える全体的な影響について説明します。まれに、Go 以外のコードが Go コードよりも先に実行されることがありますが、その場合は次のセクションも適用されます。</target>
        </trans-unit>
        <trans-unit id="b709a8b5c95be5a899a7612ec04af9fcd8c6fe68" translate="yes" xml:space="preserve">
          <source>In addition to adding the HTTP handler, this package registers the following variables:</source>
          <target state="translated">HTTP ハンドラの追加に加えて、本パッケージは以下の変数を登録します。</target>
        </trans-unit>
        <trans-unit id="c7232c786e65fae897885a5d1905f0858ffd2ae2" translate="yes" xml:space="preserve">
          <source>In addition to the required &amp;ldquo;wall clock&amp;rdquo; reading, a Time may contain an optional reading of the current process's monotonic clock, to provide additional precision for comparison or subtraction. See the &amp;ldquo;Monotonic Clocks&amp;rdquo; section in the package documentation for details.</source>
          <target state="translated">Timeには、必要な「ウォールクロック」の読み取り値に加えて、現在のプロセスの単調クロックのオプションの読み取り値を含めて、比較または減算の精度を高めることができます。詳細については、パッケージドキュメントの「単調時計」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="965439857efd394443e37d36ace60b7ac7d83473" translate="yes" xml:space="preserve">
          <source>In addition to the struct tags recognised by Unmarshal, the following can be used:</source>
          <target state="translated">Unmarshalが認識するstructタグに加えて、以下のようなものを使用することができます。</target>
        </trans-unit>
        <trans-unit id="d07fa607208161c419b4aff2675e4f243b41086c" translate="yes" xml:space="preserve">
          <source>In all other cases, Scan returns an empty literal string.</source>
          <target state="translated">それ以外の場合、Scan は空のリテラル文字列を返します。</target>
        </trans-unit>
        <trans-unit id="dc451d8d43456b62826bda28dfbc96cdb2eb2524" translate="yes" xml:space="preserve">
          <source>In all the scanning functions, a carriage return followed immediately by a newline is treated as a plain newline (\r\n means the same as \n).</source>
          <target state="translated">全てのスキャニング機能では、キャリッジリターンの後に改行が続くと、プレーンな改行として扱われます(\r\nは、\nと同じ意味です)。</target>
        </trans-unit>
        <trans-unit id="fedccbf24f7f68d8101f599e3218a03c5ffaf765" translate="yes" xml:space="preserve">
          <source>In all the scanning functions, if an operand implements method Scan (that is, it implements the Scanner interface) that method will be used to scan the text for that operand. Also, if the number of arguments scanned is less than the number of arguments provided, an error is returned.</source>
          <target state="translated">すべてのスキャン関数において、オペランドがScanメソッドを実装している場合(つまり、Scannerインターフェースを実装している場合)、そのメソッドは、そのオペランドのテキストをスキャンするために使用されます。また、スキャンされた引数の数が提供された引数の数よりも少ない場合は、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="a1bf502195aaabff9af8feae702eb1ba2c806b3d" translate="yes" xml:space="preserve">
          <source>In an ErrorList, an error is represented by an *Error. The position Pos, if valid, points to the beginning of the offending token, and the error condition is described by Msg.</source>
          <target state="translated">ErrorListでは、エラーは*Errorで表されます。Pos の位置が有効であれば、問題のあるトークンの先頭を指し、エラーの状態は Msg で記述されます。</target>
        </trans-unit>
        <trans-unit id="c43ce5959f73c41a703ce648d64371023d38a1e1" translate="yes" xml:space="preserve">
          <source>In early versions of Go each source file became a different Obj.</source>
          <target state="translated">Goの初期バージョンでは、各ソースファイルは別のObjになっていました。</target>
        </trans-unit>
        <trans-unit id="42a68547a9dca9735cb7eba8147953340f09b72e" translate="yes" xml:space="preserve">
          <source>In effect, the method must look schematically like</source>
          <target state="translated">実際には、メソッドは次のように模式的に表示されなければなりません。</target>
        </trans-unit>
        <trans-unit id="b72051420981768a1127b1640516d07dc80b1c1a" translate="yes" xml:space="preserve">
          <source>In general DeepEqual is a recursive relaxation of Go's == operator. However, this idea is impossible to implement without some inconsistency. Specifically, it is possible for a value to be unequal to itself, either because it is of func type (uncomparable in general) or because it is a floating-point NaN value (not equal to itself in floating-point comparison), or because it is an array, struct, or interface containing such a value. On the other hand, pointer values are always equal to themselves, even if they point at or contain such problematic values, because they compare equal using Go's == operator, and that is a sufficient condition to be deeply equal, regardless of content. DeepEqual has been defined so that the same short-cut applies to slices and maps: if x and y are the same slice or the same map, they are deeply equal regardless of content.</source>
          <target state="translated">一般的にDeepEqualはGoの==演算子の再帰的緩和です。しかし、この考えは、いくつかの矛盾を抜きにして実装することは不可能です。具体的には、値が func 型(一般的には比較できない)であるか、浮動小数点の NaN 値(浮動小数点比較では自分自身とは等しくない)であるか、またはそのような値を含む配列、構造体、インターフェースであるかのいずれかの理由で、値が自分自身と不等しくなる可能性があります。一方、ポインタの値は、たとえそのような問題のある値を指していたり、そのような値を含んでいたりしても、常にそれ自身と等しくなります。DeepEqualは、スライスやマップにも同じショートカットが適用されるように定義されています:xとyが同じスライスまたは同じマップであれば、内容に関係なく深く等しくなります。</target>
        </trans-unit>
        <trans-unit id="07b960c708d879d40875264c73a08a0683383d6b" translate="yes" xml:space="preserve">
          <source>In general, a given attribute's value may take on one of several possible classes defined by DWARF, each of which leads to a slightly different interpretation of the attribute.</source>
          <target state="translated">一般的に、与えられた属性の値は、DWARFによって定義されたいくつかの可能性のあるクラスのうちの1つを取ることができ、それぞれが属性のわずかに異なる解釈をもたらします。</target>
        </trans-unit>
        <trans-unit id="2e9ecaaf397056078378f799dda9c4e1072c7928" translate="yes" xml:space="preserve">
          <source>In general, a gzip file can be a concatenation of gzip files, each with its own header. Reads from the Reader return the concatenation of the uncompressed data of each. Only the first header is recorded in the Reader fields.</source>
          <target state="translated">一般的に、gzipファイルは、それぞれが独自のヘッダを持つgzipファイルの連結体になる。リーダーからの読み込みは、それぞれの非圧縮データの連結体を返す。Readerのフィールドには、最初のヘッダのみが記録されます。</target>
        </trans-unit>
        <trans-unit id="b6ffd0a95c8557850de7ace105d0c02e95a18d70" translate="yes" xml:space="preserve">
          <source>In general, if allocation is required, the decoder will allocate memory. If not, it will update the destination variables with values read from the stream. It does not initialize them first, so if the destination is a compound value such as a map, struct, or slice, the decoded values will be merged elementwise into the existing variables.</source>
          <target state="translated">一般的に、割り当てが必要な場合、デコーダはメモリを割り当てます。そうでない場合は、ストリームから読み込んだ値で宛先変数を更新します。最初にそれらを初期化することはありませんので、宛先がマップ、構造体、スライスなどの複合値の場合、デコードされた値は既存の変数に要素ごとにマージされます。</target>
        </trans-unit>
        <trans-unit id="d1a73603a88217147c68ec9c324a3f4cba1ebddc" translate="yes" xml:space="preserve">
          <source>In general, reflect.SliceHeader and reflect.StringHeader should be used only as *reflect.SliceHeader and *reflect.StringHeader pointing at actual slices or strings, never as plain structs. A program should not declare or allocate variables of these struct types.</source>
          <target state="translated">一般的に、Reflect.SliceHeader と reflect.StringHeader は、実際のスライスまたは文字列を指す *reflect.SliceHeader と *reflect.StringHeader としてのみ使用し、プレーン構造体としては使用しないでください。プログラムは、これらの構造体型の変数を宣言したり、割り当てたりしてはいけません。</target>
        </trans-unit>
        <trans-unit id="99dc4b6fd44a858b786d20b64de92f5f16319ca0" translate="yes" xml:space="preserve">
          <source>In general, the GHASH operation performed by this implementation of GCM is not constant-time. An exception is when the underlying Block was created by aes.NewCipher on systems with hardware support for AES. See the crypto/aes package documentation for details.</source>
          <target state="translated">一般に、 こ の GCM の実装に よ っ て実行 さ れ る GHASH 操作は、 一定時間ではあ り ません。例外は、AES をハードウェアでサポートしているシステムで、基礎となるブロックが aes.NewCipher によって作成された場合です。詳細は、crypto/aes パッケージのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="63a94d50c6e71995bfdddbf6d3b7ddbbd572fca1" translate="yes" xml:space="preserve">
          <source>In most cases, new(Buffer) (or just declaring a Buffer variable) is sufficient to initialize a Buffer.</source>
          <target state="translated">ほとんどの場合、バッファを初期化するにはnew(Buffer)(またはBuffer変数を宣言するだけ)で十分です。</target>
        </trans-unit>
        <trans-unit id="ce6abe6e4a1757599621f3d92af6850089e3e51d" translate="yes" xml:space="preserve">
          <source>In non-HTML settings where the escaping interferes with the readability of the output, SetEscapeHTML(false) disables this behavior.</source>
          <target state="translated">エスケープが出力の可読性を妨げる非HTML設定では、SetEscapeHTML(false)でこの動作を無効にします。</target>
        </trans-unit>
        <trans-unit id="7077ca93ebf4ef49120708550f14d220620ccf80" translate="yes" xml:space="preserve">
          <source>In panics if loc is nil.</source>
          <target state="translated">locがnilの場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="f52d38c87623b45c8b7767cba23884c87bb2c3a8" translate="yes" xml:space="preserve">
          <source>In particular, it implements LZW as used by the GIF and PDF file formats, which means variable-width codes up to 12 bits and the first two non-literal codes are a clear code and an EOF code.</source>
          <target state="translated">特に、GIFやPDFファイルフォーマットで使用されているLZWを実装しており、最大12ビットまでの可変幅コードと、最初の2つの非リテラルコードはクリアコードとEOFコードです。</target>
        </trans-unit>
        <trans-unit id="4026aa85ef00c786dfe0c796e4b667cd2644b68d" translate="yes" xml:space="preserve">
          <source>In performance critical applications, Reset can be used to discard the current compressor or decompressor state and reinitialize them quickly by taking advantage of previously allocated memory.</source>
          <target state="translated">パフォーマンスが重要なアプリケーションでは、リセットを使用して現在のコンプレッサまたはデコンプレッサの状態を破棄し、以前に割り当てられたメモリを利用して迅速に再初期化することができます。</target>
        </trans-unit>
        <trans-unit id="6db233d0c99db26b8c12c611c05604abfea98d46" translate="yes" xml:space="preserve">
          <source>In reports whether every point in r is in s.</source>
          <target state="translated">r のすべての点が s の中にあるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="84fe4eae8d319a1913e35010d51f1271fd7ded56" translate="yes" xml:space="preserve">
          <source>In reports whether p is in r.</source>
          <target state="translated">p が r にあるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="0fd55e418f00485b3f2efc5b428b0418b6a94be8" translate="yes" xml:space="preserve">
          <source>In reports whether the rune is a member of one of the ranges.</source>
          <target state="translated">ルーンがいずれかの範囲のメンバーであるかどうかを報告する。</target>
        </trans-unit>
        <trans-unit id="472b3dea5785c77ec21b439277ea93730e47a2be" translate="yes" xml:space="preserve">
          <source>In returns a copy of t representing the same time instant, but with the copy's location information set to loc for display purposes.</source>
          <target state="translated">In は、同じ時間の瞬間を表す t のコピーを返しますが、そのコピーの位置情報は表示のために loc に設定されています。</target>
        </trans-unit>
        <trans-unit id="711d8c9ceb05e3476e4192e2fd5e66ccc3b3ba1b" translate="yes" xml:space="preserve">
          <source>In slices and arrays, as well as maps, all elements, even zero-valued elements, are transmitted, even if all the elements are zero.</source>
          <target state="translated">スライスや配列では、マップと同様に、すべての要素がゼロ値の要素であっても、すべての要素が送信されます。</target>
        </trans-unit>
        <trans-unit id="9f17f1b7292d381dce79c4e2b9b83d7f1d5da96e" translate="yes" xml:space="preserve">
          <source>In summary, a gob stream looks like</source>
          <target state="translated">まとめると、ゴブの流れは次のようになります。</target>
        </trans-unit>
        <trans-unit id="2d78ddedbd337c0bea6888e7055a4838325b74f8" translate="yes" xml:space="preserve">
          <source>In the $name form, name is taken to be as long as possible: $1x is equivalent to ${1x}, not ${1}x, and, $10 is equivalent to ${10}, not ${1}0.</source>
          <target state="translated">1xは${1}xではなく${1x}に相当し、$10は${1}0ではなく${10}に相当します。</target>
        </trans-unit>
        <trans-unit id="37a0ec0d20103e0c83570c4610c7755ff7ac53c0" translate="yes" xml:space="preserve">
          <source>In the absence of a time zone indicator, Parse returns a time in UTC.</source>
          <target state="translated">タイムゾーンインジケータがない場合、Parse は UTC での時刻を返します。</target>
        </trans-unit>
        <trans-unit id="b029486adc899e6b2e4bce186582f459ceb89a34" translate="yes" xml:space="preserve">
          <source>In the directory containing the package, .go, .c, .h, and .s files are considered part of the package except for:</source>
          <target state="translated">パッケージを含むディレクトリでは、.go、.c、.h、.sファイルはパッケージの一部とみなされますが、それ以外はパッケージの一部とみなされます。</target>
        </trans-unit>
        <trans-unit id="fa1c6c88c18a52fe6d2731df7b2ac739dc65317f" translate="yes" xml:space="preserve">
          <source>In the format string, a verb introduced by the % character consumes and parses input; these verbs are described in more detail below. A character other than %, space, or newline in the format consumes exactly that input character, which must be present. A newline with zero or more spaces before it in the format string consumes zero or more spaces in the input followed by a single newline or the end of the input. A space following a newline in the format string consumes zero or more spaces in the input. Otherwise, any run of one or more spaces in the format string consumes as many spaces as possible in the input. Unless the run of spaces in the format string appears adjacent to a newline, the run must consume at least one space from the input or find the end of the input.</source>
          <target state="translated">フォーマット文字列では、% 文字によって導入された動詞が入力を消費して解析します。フォーマット内の %、スペース、または改行以外の文字は、その入力文字を正確に消費します。フォーマット文字列の前にゼロまたはそれ以上のスペースを持つ改行は、入力中のゼロまたはそれ以上のスペースを消費し、その後に1つの改行が続くか、または入力の終わりになります。フォーマット文字列中の改行に続くスペースは、入力中に0個以上のスペースを消費します。それ以外の場合は、フォーマット文字列の中の1つ以上のスペースの実行は、入力の中で可能な限り多くのスペースを消費します。フォーマット文字列内のスペースの実行が改行に隣接していない限り、その実行は入力から少なくとも1つのスペースを消費するか、入力の終わりを見つけなければならない。</target>
        </trans-unit>
        <trans-unit id="ed1a2050a365f5d52ef37144115d11517ff42bc2" translate="yes" xml:space="preserve">
          <source>In the most simple case, if the type of the value from the source column is an integer, bool or string type T and dest is of type *T, Scan simply assigns the value through the pointer.</source>
          <target state="translated">最も単純なケースでは、ソースカラムからの値の型が整数、bool、または文字列で、destの型が*Tの場合、Scanは単にポインタを介して値を代入します。</target>
        </trans-unit>
        <trans-unit id="5c811352496639bcd7be1278e40839e6992f883a" translate="yes" xml:space="preserve">
          <source>In the second form, the following rules apply:</source>
          <target state="translated">第2の形態では、以下のようなルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="9ca6beb2058ca8ef81c9dbee1705e13b3578af1f" translate="yes" xml:space="preserve">
          <source>In the template, a variable is denoted by a substring of the form $name or ${name}, where name is a non-empty sequence of letters, digits, and underscores. A purely numeric name like $1 refers to the submatch with the corresponding index; other names refer to capturing parentheses named with the (?P&amp;lt;name&amp;gt;...) syntax. A reference to an out of range or unmatched index or a name that is not present in the regular expression is replaced with an empty slice.</source>
          <target state="translated">テンプレートでは、変数は$ nameまたは$ {name}の形式の部分文字列で表されます。ここで、nameは空ではない文字、数字、およびアンダースコアのシーケンスです。 $ 1のような純粋に数値の名前は、対応するインデックスとのサブマッチを指します。他の名前は、（？P &amp;lt;name&amp;gt; ...）構文で名前が付けられた括弧をキャプチャすることを指します。範囲外、一致しないインデックス、または正規表現に存在しない名前への参照は、空のスライスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="5a1c160af25c73f96bab58b7ac18692fbbe1ffa1" translate="yes" xml:space="preserve">
          <source>In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH.</source>
          <target state="translated">zlib ライブラリの用語では、Flush は Z_SYNC_FLUSH と同等です。</target>
        </trans-unit>
        <trans-unit id="2dd7b02fa4aa241d6b5f4aad090e1521eaf7af73" translate="yes" xml:space="preserve">
          <source>In this usage hdr.Data is really an alternate way to refer to the underlying pointer in the string header, not a uintptr variable itself.</source>
          <target state="translated">この使用法では、hdr.Dataは文字列ヘッダ内のポインタを参照する別の方法であり、uintptr変数そのものを参照するものではありません。</target>
        </trans-unit>
        <trans-unit id="b66dfbc84a8b6f209be163efb64c95ba40440449" translate="yes" xml:space="preserve">
          <source>InUseBytes returns the number of bytes in use (AllocBytes - FreeBytes).</source>
          <target state="translated">InUseBytes は、使用中のバイト数(AllocBytes-FreeBytes)を返します。</target>
        </trans-unit>
        <trans-unit id="d6ed56286846a6cf59f0baa7c19dd1836590eeba" translate="yes" xml:space="preserve">
          <source>InUseObjects returns the number of objects in use (AllocObjects - FreeObjects).</source>
          <target state="translated">InUseObjectsは、使用中のオブジェクト(AllocObjects-FreeObjects)の数を返します。</target>
        </trans-unit>
        <trans-unit id="dfe141017385b1d5692d01442e77119d4a1ae1e2" translate="yes" xml:space="preserve">
          <source>Incoming requests to a server should create a Context, and outgoing calls to servers should accept a Context. The chain of function calls between them must propagate the Context, optionally replacing it with a derived Context created using WithCancel, WithDeadline, WithTimeout, or WithValue. When a Context is canceled, all Contexts derived from it are also canceled.</source>
          <target state="translated">サーバへの着信リクエストはコンテキストを作成し、サーバへの発信コールはコンテキストを受け入れる必要があります。これらの間の関数呼び出しの連鎖は、そのコンテキストを伝搬させなければならず、オプションで WithCancel、WithDeadline、WithTimeout、または WithValue を使用して作成された派生コンテキストに置き換える必要があります。コンテキストがキャンセルされると、そこから派生したすべてのコンテキストもキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="f3527c443ffc9a19a79c9a5af60b69f82dd615d1" translate="yes" xml:space="preserve">
          <source>IncorrectPasswordError is returned when an incorrect password is detected.</source>
          <target state="translated">不正なパスワードが検出された場合、IncorrectPasswordError が返されます。</target>
        </trans-unit>
        <trans-unit id="aacf42132cce6cf5c1608a5d27f90fcbf93ae851" translate="yes" xml:space="preserve">
          <source>Indent</source>
          <target state="translated">Indent</target>
        </trans-unit>
        <trans-unit id="ffaaf5870213dda02bfcfd6086cb6c73c505917c" translate="yes" xml:space="preserve">
          <source>Indent appends to dst an indented form of the JSON-encoded src. Each element in a JSON object or array begins on a new, indented line beginning with prefix followed by one or more copies of indent according to the indentation nesting. The data appended to dst does not begin with the prefix nor any indentation, to make it easier to embed inside other formatted JSON data. Although leading space characters (space, tab, carriage return, newline) at the beginning of src are dropped, trailing space characters at the end of src are preserved and copied to dst. For example, if src has no trailing spaces, neither will dst; if src ends in a trailing newline, so will dst.</source>
          <target state="translated">Indent は、JSON でエンコードされた src のインデントされた形を dst に追加します。JSON オブジェクトや配列の各要素は、プレフィックスで始まる新しいインデントされた行から始まり、インデントの入れ子にしたがって 1 つ以上のコピーが続きます。dstに追加されるデータは、他のフォーマットされたJSONデータの中に埋め込むことを容易にするために、接頭辞やインデントでは始まりません。src の先頭のスペース文字 (スペース、タブ、キャリッジリターン、改行)は削除されますが、src の末尾のスペース文字は保存され、dst にコピーされます。例えば、src の末尾にスペースがない場合、dst も同様です。</target>
        </trans-unit>
        <trans-unit id="68e20af4dfa7d94d1e8e99b5a45a2168cf2653cc" translate="yes" xml:space="preserve">
          <source>Indent sets the encoder to generate XML in which each element begins on a new indented line that starts with prefix and is followed by one or more copies of indent according to the nesting depth.</source>
          <target state="translated">Indent は、各要素が接頭辞で始まる新しいインデント行から始まり、入れ子の深さに応じて 1 つ以上のインデントのコピーが続く XML を生成するようにエンコーダを設定します。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="421722312ce68c9bf9eb41def321649c4712dbd6" translate="yes" xml:space="preserve">
          <source>Index describes the path from x to f in x.f. The last index entry is the field or method index of the type declaring f; either:</source>
          <target state="translated">インデックスは x.f の x から f へのパスを記述します。最後のインデックスエントリは f を宣言する型のフィールドまたはメソッドのインデックスです。</target>
        </trans-unit>
        <trans-unit id="1d0b49853e61d44f4f8b07282b1903e9f2bc5158" translate="yes" xml:space="preserve">
          <source>Index implements a suffix array for fast substring search.</source>
          <target state="translated">インデックスは、高速な部分文字列検索のためのサフィックス配列を実装しています。</target>
        </trans-unit>
        <trans-unit id="af573efacc3f6c1539d934e082a33b7c5805e74a" translate="yes" xml:space="preserve">
          <source>Index responds with the pprof-formatted profile named by the request. For example, &quot;/debug/pprof/heap&quot; serves the &quot;heap&quot; profile. Index responds to a request for &quot;/debug/pprof/&quot; with an HTML page listing the available profiles.</source>
          <target state="translated">Index はリクエストで指定された pprof 形式のプロファイルで応答します。例えば、&quot;/debug/pprof/heap&quot; は &quot;heap&quot; プロファイルを提供します。Index は &quot;/debug/pprof/&quot; へのリクエストに対して、利用可能なプロファイルを一覧にした HTML ページで応答します。</target>
        </trans-unit>
        <trans-unit id="fd5b04a55e6c188f04225c052c3a4ebb3eecf806" translate="yes" xml:space="preserve">
          <source>Index returns JavaScript index i of value v. It panics if v is not a JavaScript object.</source>
          <target state="translated">Indexは、値vのJavaScriptインデックスiを返します。</target>
        </trans-unit>
        <trans-unit id="41cc91c9bcf3f0a08fb627d21f4a77281aee4bad" translate="yes" xml:space="preserve">
          <source>Index returns the index of the first instance of sep in s, or -1 if sep is not present in s.</source>
          <target state="translated">Index は、s の最初のインスタンスである sep のインデックスを返し、 s に sep が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="1f02d6f4db0fe2bb71d169a720ea48dacd4410f7" translate="yes" xml:space="preserve">
          <source>Index returns the index of the first instance of substr in s, or -1 if substr is not present in s.</source>
          <target state="translated">Indexは、sの最初のインスタンスのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="6672a7ad3732041777afcc9d59e94790fa08598a" translate="yes" xml:space="preserve">
          <source>Index returns the index of the palette color closest to c in Euclidean R,G,B,A space.</source>
          <target state="translated">Indexは、ユークリッドR,G,B,A空間においてcに最も近いパレットカラーのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="08cc5090355bf36192f88d52e3809f63b35b1be3" translate="yes" xml:space="preserve">
          <source>Index returns v's i'th element. It panics if v's Kind is not Array, Slice, or String or i is out of range.</source>
          <target state="translated">Index は v の i 番目の要素を返します。vのKindがArray,Slice,Stringでない場合や、iが範囲外の場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="f604fe204d59450e53c6f0f981bb463a3da262fc" translate="yes" xml:space="preserve">
          <source>Index.Lookup</source>
          <target state="translated">Index.Lookup</target>
        </trans-unit>
        <trans-unit id="693f6afea6d2763baec63c4f683ab836809a8526" translate="yes" xml:space="preserve">
          <source>IndexAny</source>
          <target state="translated">IndexAny</target>
        </trans-unit>
        <trans-unit id="227cd6f0abdfd091813bf35b8fd1dcfbc25cecd9" translate="yes" xml:space="preserve">
          <source>IndexAny interprets s as a sequence of UTF-8-encoded Unicode code points. It returns the byte index of the first occurrence in s of any of the Unicode code points in chars. It returns -1 if chars is empty or if there is no code point in common.</source>
          <target state="translated">IndexAny は、s を UTF-8 でエンコードされた Unicode コードポイントのシーケンスとして解釈します。これは、s の中で、chars の中の Unicode コードポイントのいずれかが最初に出現したときのバイトインデックスを返します。chars が空の場合や、共通のコード点がない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="1adf36d0e196212f2787325e2cb626ccc3228c3b" translate="yes" xml:space="preserve">
          <source>IndexAny returns the index of the first instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s.</source>
          <target state="translated">IndexAny は、 s 内の文字列からの Unicode コ ー ド 点の最初の イ ン ス タ ン ス の イ ン ス タ ン ス の イ ンデ ッ ク ス を返し、 s 内に文字列か ら の Unicode コ ー ド 点が存在 し ない場合は -1 を返し ます。</target>
        </trans-unit>
        <trans-unit id="91d007c3332e259ec2e02f981423ecacc90c6ee6" translate="yes" xml:space="preserve">
          <source>IndexByte</source>
          <target state="translated">IndexByte</target>
        </trans-unit>
        <trans-unit id="c4f06e8f47e53dedfca453887d03a95ac035b5de" translate="yes" xml:space="preserve">
          <source>IndexByte returns the index of the first instance of c in b, or -1 if c is not present in b.</source>
          <target state="translated">IndexByte は、b の中の c の最初のインスタンスのインデックスを返し、 b の中に c が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="c369952c4d2f42c9a51eabe33a7908d4c8f60ad4" translate="yes" xml:space="preserve">
          <source>IndexByte returns the index of the first instance of c in s, or -1 if c is not present in s.</source>
          <target state="translated">IndexByte は、 s の中の c の最初のインスタンスのインデックスを返し、 s の中に c が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="4b29f4c46fd4242b96d7f6d96005476262ea25b4" translate="yes" xml:space="preserve">
          <source>IndexFunc</source>
          <target state="translated">IndexFunc</target>
        </trans-unit>
        <trans-unit id="fd5aa7f0734b2b2162a12de708cba7a93a1ba269" translate="yes" xml:space="preserve">
          <source>IndexFunc interprets s as a sequence of UTF-8-encoded code points. It returns the byte index in s of the first Unicode code point satisfying f(c), or -1 if none do.</source>
          <target state="translated">IndexFuncは、sをUTF-8でエンコードされたコードポイントのシーケンスとして解釈する。これは、f(c)を満たす最初の Unicode コードポイントの s のバイトインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="67453fcd073346734a7503bb3d4207a4ffac0a81" translate="yes" xml:space="preserve">
          <source>IndexFunc returns the index into s of the first Unicode code point satisfying f(c), or -1 if none do.</source>
          <target state="translated">IndexFunc は、f(c)を満たす最初の Unicode コード点の s へのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="0404886738141ffe45c4d013ff978a64bde2ba63" translate="yes" xml:space="preserve">
          <source>IndexRune</source>
          <target state="translated">IndexRune</target>
        </trans-unit>
        <trans-unit id="f4318ccac75e1dd461aaa7a9c7842e97a421edce" translate="yes" xml:space="preserve">
          <source>IndexRune interprets s as a sequence of UTF-8-encoded code points. It returns the byte index of the first occurrence in s of the given rune. It returns -1 if rune is not present in s. If r is utf8.RuneError, it returns the first instance of any invalid UTF-8 byte sequence.</source>
          <target state="translated">IndexRuneは、sをUTF-8でエンコードされたコードポイントのシーケンスとして解釈します。これは、指定されたルーンが s に最初に出現したときのバイトインデックスを返します。r が utf8.RuneError の場合、無効な UTF-8 バイトシーケンスの最初のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="042bb768e6a79fc4f2a8939cb46f8d887178fb46" translate="yes" xml:space="preserve">
          <source>IndexRune returns the index of the first instance of the Unicode code point r, or -1 if rune is not present in s. If r is utf8.RuneError, it returns the first instance of any invalid UTF-8 byte sequence.</source>
          <target state="translated">IndexRune は、Unicode コードポイント r の最初のインスタンスのインデックス、または s に rune が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="a85d156f8eef16ea6fae8f47130c09e7ab738f38" translate="yes" xml:space="preserve">
          <source>Indexes into the Header.Ident array.</source>
          <target state="translated">Header.Ident配列へのインデックス。</target>
        </trans-unit>
        <trans-unit id="bee82bdb7da751fd64eea7f5143956992f5aed77" translate="yes" xml:space="preserve">
          <source>Indices into the Delta arrays inside CaseRanges for case mapping.</source>
          <target state="translated">ケース マッピングのための CaseRanges 内のデルタ配列へのインデックス。</target>
        </trans-unit>
        <trans-unit id="22023c8031bf3535a364147cd1c4ebacba51eca8" translate="yes" xml:space="preserve">
          <source>Indirect reports whether any pointer indirection was required to get from x to f in x.f.</source>
          <target state="translated">Indirect は、x.f の x から f への取得にポインタのインダイレクトが必要だったかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="1dbf2dfd2ac6c93be252e418d12775d2db6f53d8" translate="yes" xml:space="preserve">
          <source>Indirect returns the value that v points to. If v is a nil pointer, Indirect returns a zero Value. If v is not a pointer, Indirect returns v.</source>
          <target state="translated">Indirect は v が指す値を返します。v が nil ポインタの場合、Indirect は 0 の値を返します。v がポインタでない場合、Indirect は v を返す。</target>
        </trans-unit>
        <trans-unit id="fe7ad1fbee745b4ca3d08d7729476db7d9fb4fe9" translate="yes" xml:space="preserve">
          <source>Inf returns a complex infinity, complex(+Inf, +Inf).</source>
          <target state="translated">Infは、複素数の無限大、complex(+Inf,+Inf)を返します。</target>
        </trans-unit>
        <trans-unit id="0125073a5f3757f1dc62bea262918d4c5b3bae8e" translate="yes" xml:space="preserve">
          <source>Inf returns positive infinity if sign &amp;gt;= 0, negative infinity if sign &amp;lt; 0.</source>
          <target state="translated">Infは、符号&amp;gt; = 0の場合は正の無限大を、符号&amp;lt;0の場合は負の無限大を返します。</target>
        </trans-unit>
        <trans-unit id="fd7feb1c61f7423453cbee79d9998496c4df75f3" translate="yes" xml:space="preserve">
          <source>Infinite recursion can also be triggered by self-referential data structures, such as a slice that contains itself as an element, if that type has a String method. Such pathologies are rare, however, and the package does not protect against them.</source>
          <target state="translated">無限再帰は、自己参照型のデータ構造、例えばそれ自身を要素として含むスライスのように、その型が String メソッドを持っている場合にトリガーされることもあります。しかし、このような問題は稀であり、パッケージはこのような問題からは保護されていません。</target>
        </trans-unit>
        <trans-unit id="4b631f69842530d659306c8f06dbad594a6b1807" translate="yes" xml:space="preserve">
          <source>Info</source>
          <target state="translated">Info</target>
        </trans-unit>
        <trans-unit id="0e2ca261be59b2db86de1819fd95c5c62808d215" translate="yes" xml:space="preserve">
          <source>Info holds result type information for a type-checked package. Only the information for which a map is provided is collected. If the package has type errors, the collected information may be incomplete.</source>
          <target state="translated">情報は、タイプチェックされたパッケージの結果タイプ情報を保持します。マップが提供されている情報のみが収集されます。パッケージに型エラーがある場合、収集された情報は不完全なものになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="829a6f4d1b71214eb93db4bdc76fb1b790f4e5d1" translate="yes" xml:space="preserve">
          <source>Info logs a message with severity LOG_INFO, ignoring the severity passed to New.</source>
          <target state="translated">Info は、New に渡された深刻度を無視して、深刻度 LOG_INFO でメッセージをログに記録します。</target>
        </trans-unit>
        <trans-unit id="d0968061a8aa60c3762f0e765c2376d0827896c3" translate="yes" xml:space="preserve">
          <source>Info returns information about properties of basic type b.</source>
          <target state="translated">Info は、基本型 b のプロパティに関する情報を返します。</target>
        </trans-unit>
        <trans-unit id="4bebef89f6713b109d9329a6bfe51cba5fd0be4f" translate="yes" xml:space="preserve">
          <source>Init establishes the heap invariants required by the other routines in this package. Init is idempotent with respect to the heap invariants and may be called whenever the heap invariants may have been invalidated. The complexity is O(n) where n = h.Len().</source>
          <target state="translated">Init は、本パッケージの他のルーチンが必要とするヒープ不変量を確立します。Init は、ヒープ不変量に関しては、偶数であり、ヒープ不変量が無効化されている場合はいつでも呼び出されます。複雑さはO(n)であり、n=h.Len()です。</target>
        </trans-unit>
        <trans-unit id="e025530212d94f43014839edcd8664101cb1d082" translate="yes" xml:space="preserve">
          <source>Init has no effect if it was already called.</source>
          <target state="translated">Initは既に呼び出されていても効果がありません。</target>
        </trans-unit>
        <trans-unit id="ab8a6a690d98493f29c3a7eded17da06a0fe4963" translate="yes" xml:space="preserve">
          <source>Init initializes a Scanner with a new source and returns s. Error is set to nil, ErrorCount is set to 0, Mode is set to GoTokens, and Whitespace is set to GoWhitespace.</source>
          <target state="translated">エラーは nil に、エラーカウントは 0 に、モードは GoTokens に、ホワイトスペースは GoWhitespace に設定されます。</target>
        </trans-unit>
        <trans-unit id="38f2f0576d19cc2c5fa27415d0b566e72a9f5fcc" translate="yes" xml:space="preserve">
          <source>Init initializes or clears list l.</source>
          <target state="translated">Init はリスト l を初期化またはクリアします。</target>
        </trans-unit>
        <trans-unit id="4828f42508fc3abcabc5d7577bba28e3151a2a20" translate="yes" xml:space="preserve">
          <source>Init prepares the scanner s to tokenize the text src by setting the scanner at the beginning of src. The scanner uses the file set file for position information and it adds line information for each line. It is ok to re-use the same file when re-scanning the same file as line information which is already present is ignored. Init causes a panic if the file size does not match the src size.</source>
          <target state="translated">Initは、スキャナsをsrcの先頭に設定することで、テキストsrcをトークン化するための準備をする。スキャナは、位置情報のためにファイルセットファイルを使用し、行ごとに行情報を追加する。既に存在する行情報は無視されるので、同じファイルを再スキャンする際には同じファイルを再利用しても構わない。Init は、ファイルサイズが src サイズと一致しない場合にパニックを起こす。</target>
        </trans-unit>
        <trans-unit id="1ff5728fd1958fa03cc23f0615bd53c6b8512d71" translate="yes" xml:space="preserve">
          <source>Init registers testing flags. These flags are automatically registered by the &quot;go test&quot; command before running test functions, so Init is only needed when calling functions such as Benchmark without using &quot;go test&quot;.</source>
          <target state="translated">Init はテストフラグを登録します。これらのフラグはテスト関数を実行する前に &quot;go test &quot;コマンドによって自動的に登録されるので、Initは &quot;go test &quot;を使わずにBenchmarkなどの関数を呼び出す場合にのみ必要になります。</target>
        </trans-unit>
        <trans-unit id="e71fb65b44dd31464c3ab6d5dc9c1b767849af42" translate="yes" xml:space="preserve">
          <source>Init removes all keys from the map.</source>
          <target state="translated">Init はマップからすべてのキーを削除します。</target>
        </trans-unit>
        <trans-unit id="2f9d5d06290960b800b664c463e2749afea3e374" translate="yes" xml:space="preserve">
          <source>Init sets the name and error handling property for a flag set. By default, the zero FlagSet uses an empty name and the ContinueOnError error handling policy.</source>
          <target state="translated">Initは、フラグセットの名前とエラー処理プロパティを設定します。デフォルトでは、ゼロのフラグセットは空の名前とContinueOnErrorエラー処理ポリシーを使用します。</target>
        </trans-unit>
        <trans-unit id="1ff277aa8c5f044965228237465cbaf43a54dec6" translate="yes" xml:space="preserve">
          <source>Initial magic number for ELF files.</source>
          <target state="translated">ELFファイルの初期マジックナンバー。</target>
        </trans-unit>
        <trans-unit id="7ceb1ca1dad4f40542d5a478441bc59f2f8873ca" translate="yes" xml:space="preserve">
          <source>Innermost returns the innermost (child) scope containing pos. If pos is not within any scope, the result is nil. The result is also nil for the Universe scope. The result is guaranteed to be valid only if the type-checked AST has complete position information.</source>
          <target state="translated">Innermost は、pos を含む最も内側の (子の)スコープを返します。pos がどのスコープにも含まれていない場合は、結果は nil となります。Universeスコープの場合も、結果はnilです。この結果は、型チェックされたASTが完全な位置情報を持っている場合にのみ有効であることが保証されます。</target>
        </trans-unit>
        <trans-unit id="d3d677ba8b8fb62d3d734397c41c430f5735b25c" translate="yes" xml:space="preserve">
          <source>Input processed by verbs is implicitly space-delimited: the implementation of every verb except %c starts by discarding leading spaces from the remaining input, and the %s verb (and %v reading into a string) stops consuming input at the first space or newline character.</source>
          <target state="translated">c 以外のすべての動詞の実装は、残りの入力から先頭のスペースを破棄することで開始し、%s 動詞 (および文字列への読 み込み %v)は、最初のスペースまたは改行文字で入力の消費を停止します。</target>
        </trans-unit>
        <trans-unit id="f2b998d9fdcbc1c4a3ffebeea1625f9214a80db4" translate="yes" xml:space="preserve">
          <source>InputOffset returns the input stream byte offset of the current decoder position. The offset gives the location of the end of the most recently returned token and the beginning of the next token.</source>
          <target state="translated">InputOffset は、現在のデコーダ位置の入力ストリームのバイトオフセットを返す。このオフセットは、直近に返されたトークンの終了位置と次のトークンの開始位置を示します。</target>
        </trans-unit>
        <trans-unit id="c6bdbccac97746d550ea930e761dad7ffa800d06" translate="yes" xml:space="preserve">
          <source>Insert attempts to insert a named object obj into the scope s. If the scope already contains an object alt with the same name, Insert leaves the scope unchanged and returns alt. Otherwise it inserts obj and returns nil.</source>
          <target state="translated">スコープに同名のオブジェクト alt が既に含まれている場合、Insert はスコープを変更せずに alt を返します。それ以外の場合は obj を挿入して nil を返します。</target>
        </trans-unit>
        <trans-unit id="3c51f0bca7bc21285dde2f4365d66539c9045fbd" translate="yes" xml:space="preserve">
          <source>Insert attempts to insert an object obj into scope s. If s already contains an alternative object alt with the same name, Insert leaves s unchanged and returns alt. Otherwise it inserts obj, sets the object's parent scope if not already set, and returns nil.</source>
          <target state="translated">insert は、オブジェクト obj をスコープ s に挿入しようとします。 s に同名の代替オブジェクト alt が既に含まれている場合、Insert は s を変更せずに alt を返します。それ以外の場合は obj を挿入し、オブジェクトの親スコープが設定されていない場合はそのオブジェクトの親スコープを設定し、nil を返します。</target>
        </trans-unit>
        <trans-unit id="e5d297ca4eb4122848b745777ba08d9e98e99026" translate="yes" xml:space="preserve">
          <source>InsertAfter inserts a new element e with value v immediately after mark and returns e. If mark is not an element of l, the list is not modified. The mark must not be nil.</source>
          <target state="translated">InsertAfter は、マークの直後に値 v を持つ新しい要素 e を挿入し、e を返します。 マークが l の要素でない場合、リストは変更されません。マークはnilであってはなりません。</target>
        </trans-unit>
        <trans-unit id="f8690dfd3964564996a8ec4c6a534ffd7d8cce51" translate="yes" xml:space="preserve">
          <source>InsertBefore inserts a new element e with value v immediately before mark and returns e. If mark is not an element of l, the list is not modified. The mark must not be nil.</source>
          <target state="translated">InsertBefore は、マークの直前に値 v を持つ新しい要素 e を挿入し、e を返します。 マークが l の要素でない場合、リストは変更されません。マークはnilであってはなりません。</target>
        </trans-unit>
        <trans-unit id="1a44ed1d9fdf3b19a9445ead705835b2d7701bba" translate="yes" xml:space="preserve">
          <source>Inset returns the rectangle r inset by n, which may be negative. If either of r's dimensions is less than 2*n then an empty rectangle near the center of r will be returned.</source>
          <target state="translated">Insetは、nで囲まれた矩形rを返しますが、負の値になることもあります。rのいずれかの寸法が2*nよりも小さい場合、rの中心付近の空の矩形が返されます。</target>
        </trans-unit>
        <trans-unit id="18ca87afec4298d9de864e32b4eeb6a31786e496" translate="yes" xml:space="preserve">
          <source>Inspect</source>
          <target state="translated">Inspect</target>
        </trans-unit>
        <trans-unit id="165da1fa673b9fd9a581f6c1c726cccbffc7e2ca" translate="yes" xml:space="preserve">
          <source>Inspect traverses an AST in depth-first order: It starts by calling f(node); node must not be nil. If f returns true, Inspect invokes f recursively for each of the non-nil children of node, followed by a call of f(nil).</source>
          <target state="translated">InspectはASTを深さ優先で走査します。これは,f(node)を呼び出すことから始まります.fが真を返す場合,Inspectはnodeの非nilの子のそれぞれについて再帰的にfを呼び出し,その後にf(nil)を呼び出します.</target>
        </trans-unit>
        <trans-unit id="a6a380194dfce8d967bc921f5f0bd2558e839e1f" translate="yes" xml:space="preserve">
          <source>InstanceOf reports whether v is an instance of type t according to JavaScript's instanceof operator.</source>
          <target state="translated">InstanceOf は、JavaScript の instanceof 演算子に従って、v が t 型のインスタンスであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="ebf808b93582c50b9dee098ffbc7851e8bbd1bc5" translate="yes" xml:space="preserve">
          <source>Int defines an int flag with specified name, default value, and usage string. The return value is the address of an int variable that stores the value of the flag.</source>
          <target state="translated">Intは、名前、デフォルト値、使用文字列を指定したintフラグを定義します。戻り値は、フラグの値を格納するint変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="4a82193f61167eeb73caee70b7d931807aee1e38" translate="yes" xml:space="preserve">
          <source>Int is a 64-bit integer variable that satisfies the Var interface.</source>
          <target state="translated">IntはVarインタフェースを満たす64ビットの整数変数です。</target>
        </trans-unit>
        <trans-unit id="af260c99fb6b16af9acf30bb7ef7c67bfd7f461c" translate="yes" xml:space="preserve">
          <source>Int returns a non-negative pseudo-random int from the default Source.</source>
          <target state="translated">Intは、デフォルトのSourceから非負の擬似乱数intを返します。</target>
        </trans-unit>
        <trans-unit id="381ad8d2cdfa2db4d632061cd5638bdb827c118f" translate="yes" xml:space="preserve">
          <source>Int returns a non-negative pseudo-random int.</source>
          <target state="translated">Intは、負ではない擬似乱数のintを返します。</target>
        </trans-unit>
        <trans-unit id="78b2c6c511c1ed56b26a62f7cd24e23bebce41b7" translate="yes" xml:space="preserve">
          <source>Int returns a uniform random value in [0, max). It panics if max &amp;lt;= 0.</source>
          <target state="translated">Intは、[0、max）で均一なランダム値を返します。max &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="5333a3a7b26511027f14a3034f5b9a08970c91dc" translate="yes" xml:space="preserve">
          <source>Int returns the result of truncating x towards zero; or nil if x is an infinity. The result is Exact if x.IsInt(); otherwise it is Below for x &amp;gt; 0, and Above for x &amp;lt; 0. If a non-nil *Int argument z is provided, Int stores the result in z instead of allocating a new Int.</source>
          <target state="translated">Intは、xをゼロに切り捨てた結果を返します。xが無限大の場合はnil。x.IsInt（）;の場合、結果は正確です。それ以外の場合は、x&amp;gt; 0の場合は下、x &amp;lt;0の場合は上になります。nil以外の* Int引数zが指定されている場合、Intは新しいIntを割り当てる代わりにzに結果を格納します。</target>
        </trans-unit>
        <trans-unit id="b48fef275365436d3178b531a98b6df9140d4a4e" translate="yes" xml:space="preserve">
          <source>Int returns the value v truncated to an int. It panics if v is not a JavaScript number.</source>
          <target state="translated">Int は、v を int に切り捨てた値を返します。vがJavaScriptの数値でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="7aeadc703783366afed8a63b0734b22311f2a7e4" translate="yes" xml:space="preserve">
          <source>Int returns v's underlying value, as an int64. It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64.</source>
          <target state="translated">Int は、v の基礎となる値を int64 で返します。vのKindがInt、Int8、Int16、Int32、またはInt64でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="53c091a9597bdba1f2ca46d491f5c108342e031f" translate="yes" xml:space="preserve">
          <source>Int.Scan</source>
          <target state="translated">Int.Scan</target>
        </trans-unit>
        <trans-unit id="5de699e08eb78e768e5b08ea65a2d2d995d6cca4" translate="yes" xml:space="preserve">
          <source>Int.SetString</source>
          <target state="translated">Int.SetString</target>
        </trans-unit>
        <trans-unit id="25863d22096f1ba104e899340881b4d53e78900e" translate="yes" xml:space="preserve">
          <source>Int31 returns a non-negative pseudo-random 31-bit integer as an int32 from the default Source.</source>
          <target state="translated">Int31は、デフォルトのソースから非負の疑似乱数31ビット整数をint32として返します。</target>
        </trans-unit>
        <trans-unit id="8668fa86efe442ed5c0ddfb6799eac348a1585d9" translate="yes" xml:space="preserve">
          <source>Int31 returns a non-negative pseudo-random 31-bit integer as an int32.</source>
          <target state="translated">Int31 は、非負の疑似乱数 31 ビット整数を int32 として返します。</target>
        </trans-unit>
        <trans-unit id="4ef488a0ec898f126b9413bbb42319fb0eaeff13" translate="yes" xml:space="preserve">
          <source>Int31n returns, as an int32, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n &amp;lt;= 0.</source>
          <target state="translated">Int31nは、デフォルトのSourceから[0、n）の負でない疑似乱数をint32として返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="90d847f9e26c6ab28ce7fd160e1218ad35e875d4" translate="yes" xml:space="preserve">
          <source>Int31n returns, as an int32, a non-negative pseudo-random number in [0,n). It panics if n &amp;lt;= 0.</source>
          <target state="translated">Int31nは、[0、n）に負でない疑似乱数をint32として返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="848b71a013b8e0169e247e647c756adf54d70a3d" translate="yes" xml:space="preserve">
          <source>Int32 is a ValueConverter that converts input values to int64, respecting the limits of an int32 value.</source>
          <target state="translated">Int32は、入力値をint32値の限界を尊重してint64に変換するValueConverterです。</target>
        </trans-unit>
        <trans-unit id="40feceb2effc4993d828a64f0bbc7bd4b65472d1" translate="yes" xml:space="preserve">
          <source>Int63 returns a non-negative pseudo-random 63-bit integer as an int64 from the default Source.</source>
          <target state="translated">Int63は、デフォルトのソースから非負の擬似乱数63ビット整数をint64として返します。</target>
        </trans-unit>
        <trans-unit id="73b13ad335bd8c446e54125036bbdb60110b8a67" translate="yes" xml:space="preserve">
          <source>Int63 returns a non-negative pseudo-random 63-bit integer as an int64.</source>
          <target state="translated">Int63 は、非負の疑似乱数 63 ビット整数を int64 として返します。</target>
        </trans-unit>
        <trans-unit id="ccf199104b81302e6aa6420d9d53fbe6d1e5e481" translate="yes" xml:space="preserve">
          <source>Int63n returns, as an int64, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n &amp;lt;= 0.</source>
          <target state="translated">Int63nは、デフォルトのSourceから[0、n）の負でない疑似乱数をint64として返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="adc50ec6888e251cb9eb8237744893f852c6674f" translate="yes" xml:space="preserve">
          <source>Int63n returns, as an int64, a non-negative pseudo-random number in [0,n). It panics if n &amp;lt;= 0.</source>
          <target state="translated">Int63nは、[0、n）の負でない疑似乱数をint64として返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="caf7332f4387883214a684cf486e59d1298af5e4" translate="yes" xml:space="preserve">
          <source>Int64 defines an int64 flag with specified name, default value, and usage string. The return value is the address of an int64 variable that stores the value of the flag.</source>
          <target state="translated">Int64は、名前、デフォルト値、使用文字列を指定したint64フラグを定義します。戻り値はフラグの値を格納するint64変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="5ea42bb5a91b0f37c1c104284dddf7aee6dd3d40" translate="yes" xml:space="preserve">
          <source>Int64 returns the int64 representation of x. If x cannot be represented in an int64, the result is undefined.</source>
          <target state="translated">Int64 は、x を int64 で表現できない場合は、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="024ee0329e5ac0182a79c3f0f817ea471b5da8f4" translate="yes" xml:space="preserve">
          <source>Int64 returns the integer resulting from truncating x towards zero. If math.MinInt64 &amp;lt;= x &amp;lt;= math.MaxInt64, the result is Exact if x is an integer, and Above (x &amp;lt; 0) or Below (x &amp;gt; 0) otherwise. The result is (math.MinInt64, Above) for x &amp;lt; math.MinInt64, and (math.MaxInt64, Below) for x &amp;gt; math.MaxInt64.</source>
          <target state="translated">Int64は、xをゼロに切り捨てた結果の整数を返します。math.MinInt64 &amp;lt;= x &amp;lt;= math.MaxInt64の場合、結果は、xが整数の場合はExact、それ以外の場合はAbove（x &amp;lt;0）またはBelow（x&amp;gt; 0）になります。結果は、x &amp;lt;math.MinInt64の場合は（math.MinInt64、Above）、x&amp;gt; math.MaxInt64の場合は（math.MaxInt64、Below）です。</target>
        </trans-unit>
        <trans-unit id="a7858f715e5515e9b11682c98c7e956884fa03d3" translate="yes" xml:space="preserve">
          <source>Int64 returns the number as an int64.</source>
          <target state="translated">Int64は、その数値をint64として返します。</target>
        </trans-unit>
        <trans-unit id="e87b1cbe8a7626b33b6c26f9454e9b97aa48ff20" translate="yes" xml:space="preserve">
          <source>Int64Val returns the Go int64 value of x and whether the result is exact; x must be an Int or an Unknown. If the result is not exact, its value is undefined. If x is Unknown, the result is (0, false).</source>
          <target state="translated">Int64Valは、xのGo int64値を返し、その結果が正確であるかどうかを返します。結果が正確でない場合、その値は未定義です。xがUnknownの場合、結果は(0,false)となります。</target>
        </trans-unit>
        <trans-unit id="e48ba0f308dabec3542a772cd98df7b4a194464a" translate="yes" xml:space="preserve">
          <source>Int64Var defines an int64 flag with specified name, default value, and usage string. The argument p points to an int64 variable in which to store the value of the flag.</source>
          <target state="translated">Int64Var は、指定された名前、デフォルト値、使用文字列を持つ int64 フラグを定義します。引数pは、フラグの値を格納するint64変数を指します。</target>
        </trans-unit>
        <trans-unit id="826fdf675ec889637dd1607e0ecbc7b4617ed6b5" translate="yes" xml:space="preserve">
          <source>IntSize is the size in bits of an int or uint value.</source>
          <target state="translated">IntSizeは、intまたはuint値のビット単位のサイズです。</target>
        </trans-unit>
        <trans-unit id="7d0ad3a5fc2c5562d1a3d5edaf660d5681e2e7dd" translate="yes" xml:space="preserve">
          <source>IntSlice attaches the methods of Interface to []int, sorting in increasing order.</source>
          <target state="translated">IntSliceはInterfaceのメソッドを[]intにアタッチして、順番にソートしていきます。</target>
        </trans-unit>
        <trans-unit id="259cdcc1487407a0effb8761c09ff465d822351b" translate="yes" xml:space="preserve">
          <source>IntVar defines an int flag with specified name, default value, and usage string. The argument p points to an int variable in which to store the value of the flag.</source>
          <target state="translated">IntVarは、名前、デフォルト値、使用文字列を指定したintフラグを定義します。引数pは、フラグの値を格納するint変数を指します。</target>
        </trans-unit>
        <trans-unit id="e927198b4dfea79ca477c6ca320b7977e5f907d8" translate="yes" xml:space="preserve">
          <source>Integer flags accept 1234, 0664, 0x1234 and may be negative. Boolean flags may be:</source>
          <target state="translated">整数フラグは1234、0664、0x1234を受け付け、負の値を指定することができます。ブール型フラグは、負の可能性があります。</target>
        </trans-unit>
        <trans-unit id="d8d2cb0f1ba846253e8f8508e7b268037f761677" translate="yes" xml:space="preserve">
          <source>Integer limit values.</source>
          <target state="translated">整数の制限値。</target>
        </trans-unit>
        <trans-unit id="8e6549b1b15bddbc7e4ca51ecb54082a0c50f802" translate="yes" xml:space="preserve">
          <source>Integer:</source>
          <target state="translated">Integer:</target>
        </trans-unit>
        <trans-unit id="8ef45f34654a956038b7d2e46f7b980bceca0a1e" translate="yes" xml:space="preserve">
          <source>IntegerType is here for the purposes of documentation only. It is a stand-in for any integer type: int, uint, int8 etc.</source>
          <target state="translated">IntegerType は、ここでは文書化のみを目的としています。int,uint,int8 などの任意の整数型の代用となります。</target>
        </trans-unit>
        <trans-unit id="5a289c0331a1e2ae1cddd468bdbd08515a751488" translate="yes" xml:space="preserve">
          <source>Integers are transmitted two ways: arbitrary precision signed integers or arbitrary precision unsigned integers. There is no int8, int16 etc. discrimination in the gob format; there are only signed and unsigned integers. As described below, the transmitter sends the value in a variable-length encoding; the receiver accepts the value and stores it in the destination variable. Floating-point numbers are always sent using IEEE-754 64-bit precision (see below).</source>
          <target state="translated">整数は、任意の精度の符号付き整数と任意の精度の符号なし整数の2つの方法で伝送されます。gob 形式には int8,int16 などの区別はなく、符号付き整数と符号なし整数しかありません。後述するように、送信機は可変長エンコーディングで値を送信し、受信機は値を受け入れて宛先変数に格納します。浮動小数点数は常にIEEE-754の64ビット精度(後述)で送信されます。</target>
        </trans-unit>
        <trans-unit id="8a7e153030b338cdad7a41aa466f441af45e4a11" translate="yes" xml:space="preserve">
          <source>Interface represents a mapping between network interface name and index. It also represents network interface facility information.</source>
          <target state="translated">インタフェースは、ネットワーク・インタフェース名とインデックスのマッピングを表します。また、ネットワークインタフェースの設備情報を表します。</target>
        </trans-unit>
        <trans-unit id="6da3607f32beaa93e64c1a37a2f36fbed997c327" translate="yes" xml:space="preserve">
          <source>Interface returns v's current value as an interface{}. It is equivalent to:</source>
          <target state="translated">Interfaceは、vの現在の値をinterface{}として返します。と等価です。</target>
        </trans-unit>
        <trans-unit id="5ea5c3979b46b5a2713cc2d1786a81b1f8ec63c2" translate="yes" xml:space="preserve">
          <source>Interface types are not checked for compatibility; all interface types are treated, for transmission, as members of a single &quot;interface&quot; type, analogous to int or []byte - in effect they're all treated as interface{}. Interface values are transmitted as a string identifying the concrete type being sent (a name that must be pre-defined by calling Register), followed by a byte count of the length of the following data (so the value can be skipped if it cannot be stored), followed by the usual encoding of concrete (dynamic) value stored in the interface value. (A nil interface value is identified by the empty string and transmits no value.) Upon receipt, the decoder verifies that the unpacked concrete item satisfies the interface of the receiving variable.</source>
          <target state="translated">インタフェース型は互換性のチェックを行いません。すべてのインタフェース型は、intや[]byteに似た単一の「インタフェース」型のメンバーとして送信時に扱われます。インターフェイス値は、送信される具体的な型を識別する文字列(Registerを呼び出すことで事前に定義されなければならない名前)として送信され、その後に次のデータの長さのバイト数が続き(値を格納できない場合はスキップできるようにするため)、インターフェイス値に格納されている具体的な(動的な)値の通常のエンコーディングが続きます(nilのインターフェイス値は識別されます)。(nilインターフェース値は空文字列で識別され、値を送信しない)。受信時に、デコーダは、アンパックされた具象項目が受信変数のインタフェースを満たすことを検証する。</target>
        </trans-unit>
        <trans-unit id="74b4a1f2cd95d6ac03afcfd27826497cd84b5ae7" translate="yes" xml:space="preserve">
          <source>Interface values are deeply equal if they hold deeply equal concrete values.</source>
          <target state="translated">インターフェースの値は、深く等しい具体的な値を保持していれば、深く等しい。</target>
        </trans-unit>
        <trans-unit id="09203e8778d59b495323467d890a95f5807f26bf" translate="yes" xml:space="preserve">
          <source>Interface values encode as the value contained in the interface. A nil interface value encodes as the null JSON value.</source>
          <target state="translated">インターフェースの値は、インターフェースに含まれる値としてエンコードされます。nil のインターフェース値は、null の JSON 値としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="360b50370b24932254b26c7af3e111445c188db0" translate="yes" xml:space="preserve">
          <source>InterfaceAddrs returns a list of the system's unicast interface addresses.</source>
          <target state="translated">InterfaceAddrs は、システムのユニキャスト・インターフェース・アドレスのリストを返します。</target>
        </trans-unit>
        <trans-unit id="9ce937dfbe60c7ef5a110a8b5806627105e626f1" translate="yes" xml:space="preserve">
          <source>InterfaceByIndex returns the interface specified by index.</source>
          <target state="translated">InterfaceByIndex は、インデックスで指定されたインターフェースを返します。</target>
        </trans-unit>
        <trans-unit id="4245d4428eaccf8da6182470aec7d558cea28a53" translate="yes" xml:space="preserve">
          <source>InterfaceByName returns the interface specified by name.</source>
          <target state="translated">InterfaceByNameは、名前で指定されたインターフェースを返します。</target>
        </trans-unit>
        <trans-unit id="a63d53fbc696efd4a28db884d8645a21dcabe121" translate="yes" xml:space="preserve">
          <source>InterfaceData returns the interface v's value as a uintptr pair. It panics if v's Kind is not Interface.</source>
          <target state="translated">InterfaceData は、インタフェース v の値を uintptr のペアとして返します。vのKindがInterfaceでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="470a021de3b9df70021376a7834ee99ab5ab1f2e" translate="yes" xml:space="preserve">
          <source>Interfaces returns a list of the system's network interfaces.</source>
          <target state="translated">Interfaces は、システムのネットワーク・インターフェースのリストを返します。</target>
        </trans-unit>
        <trans-unit id="a60781d644f0c18cd790184e8cc93bbf04ff58fe" translate="yes" xml:space="preserve">
          <source>Intersect returns the largest rectangle contained by both r and s. If the two rectangles do not overlap then the zero rectangle will be returned.</source>
          <target state="translated">2つの矩形が重なっていない場合は、0の矩形が返されます。</target>
        </trans-unit>
        <trans-unit id="37b82affb5d88e1d235360ffb5b4876b9c358ef4" translate="yes" xml:space="preserve">
          <source>Intn</source>
          <target state="translated">Intn</target>
        </trans-unit>
        <trans-unit id="54d0c13534e6e00abbb2d04b4cb149c7d0ddea38" translate="yes" xml:space="preserve">
          <source>Intn returns, as an int, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n &amp;lt;= 0.</source>
          <target state="translated">Intnは、デフォルトのSourceから[0、n）の負でない疑似乱数をintとして返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="8f26feb5337a07fc6e35ec73e1c6b06a4a8f7c21" translate="yes" xml:space="preserve">
          <source>Intn returns, as an int, a non-negative pseudo-random number in [0,n). It panics if n &amp;lt;= 0.</source>
          <target state="translated">Intnは、[0、n）の非負の疑似乱数をintとして返します。 n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="b7f44e53c873fdc1db7cef7777af521f4a3b60c1" translate="yes" xml:space="preserve">
          <source>Ints</source>
          <target state="translated">Ints</target>
        </trans-unit>
        <trans-unit id="0d62fa520893beed143100d8873cdbc43cfe7428" translate="yes" xml:space="preserve">
          <source>Ints sorts a slice of ints in increasing order.</source>
          <target state="translated">インツはスライスを順にソートしていきます。</target>
        </trans-unit>
        <trans-unit id="00382ca46ab71a1b23e2790f3cf0a66b6faa90df" translate="yes" xml:space="preserve">
          <source>IntsAreSorted</source>
          <target state="translated">IntsAreSorted</target>
        </trans-unit>
        <trans-unit id="d11bf023986ecfce333bd8a5477d90f31eb1db0a" translate="yes" xml:space="preserve">
          <source>IntsAreSorted tests whether a slice of ints is sorted in increasing order.</source>
          <target state="translated">IntsAreSorted は、スライスされたイントが昇順にソートされているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e6124bd83c6b099c79f4ac3379192d76121e3dfb" translate="yes" xml:space="preserve">
          <source>Inv sets z to 1/x and returns z.</source>
          <target state="translated">Inv は z を 1/x にセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="57f0200085fa1268ae261758bfb7dee5795a5704" translate="yes" xml:space="preserve">
          <source>InvalidByteError values describe errors resulting from an invalid byte in a hex string.</source>
          <target state="translated">InvalidByteError 値は、16 進文字列の無効なバイトに起因するエラーを記述します。</target>
        </trans-unit>
        <trans-unit id="fc945344ffab3c8e0685a8f6f0b347b0e1b5f04c" translate="yes" xml:space="preserve">
          <source>Invoke does a JavaScript call of the value v with the given arguments. It panics if v is not a JavaScript function. The arguments get mapped to JavaScript values according to the ValueOf function.</source>
          <target state="translated">Invoke は、与えられた引数で値 v の JavaScript 呼び出しを行います。v が JavaScript 関数でない場合はパニックになります。引数は ValueOf 関数に従って JavaScript の値にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="a8bc24ce97a4c19ceec821a6c13e305d4cc7093a" translate="yes" xml:space="preserve">
          <source>Invoking the JavaScript function will synchronously call the Go function fn with the value of JavaScript's &quot;this&quot; keyword and the arguments of the invocation. The return value of the invocation is the result of the Go function mapped back to JavaScript according to ValueOf.</source>
          <target state="translated">JavaScriptの関数を呼び出すと、JavaScriptの &quot;this &quot;キーワードの値と呼び出しの引数を持つGo関数fnが同期的に呼び出されます。呼び出しの戻り値は、ValueOfに従ってJavaScriptにマッピングされたGo関数の結果となります。</target>
        </trans-unit>
        <trans-unit id="b80342e2833069978eb2ebabac8e59ca1a3fbfc5" translate="yes" xml:space="preserve">
          <source>Is reports whether any error in err's chain matches target.</source>
          <target state="translated">errのチェーンにあるエラーがターゲットにマッチしているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="2dcad3f5fb898f44a28ca9cc90eb869f037180e6" translate="yes" xml:space="preserve">
          <source>Is reports whether the rune is in the specified table of ranges.</source>
          <target state="translated">Isは、指定された範囲のテーブルにルーンがあるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="d895a1147fb9e99c093e2c8e3aa2a3a161a62599" translate="yes" xml:space="preserve">
          <source>Is unwraps its first argument sequentially looking for an error that matches the second. It reports whether it finds a match. It should be used in preference to simple equality checks:</source>
          <target state="translated">Isは最初の引数を順次展開し、2番目の引数にマッチするエラーを探します。一致するものが見つかったかどうかを報告します。単純な等質性チェックよりも優先して使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4240feb2e7eac03ab7672bf3d52cbd0df60964bf" translate="yes" xml:space="preserve">
          <source>IsAbs</source>
          <target state="translated">IsAbs</target>
        </trans-unit>
        <trans-unit id="6ba3e5deb5d3ce3b158c2019d9e58f42637cf610" translate="yes" xml:space="preserve">
          <source>IsAbs reports whether the URL is absolute. Absolute means that it has a non-empty scheme.</source>
          <target state="translated">IsAbsは、URLがアブソリュートかどうかをレポートします。絶対値は、空ではないスキームを持つことを意味します。</target>
        </trans-unit>
        <trans-unit id="36a0d5f9413d1e35ae6366ef607edd836694bee0" translate="yes" xml:space="preserve">
          <source>IsAbs reports whether the path is absolute.</source>
          <target state="translated">IsAbs は、パスが絶対パスかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="e1eaf7841a07f287f076c00cb20e44f9651ff13f" translate="yes" xml:space="preserve">
          <source>IsAlias reports whether obj is an alias name for a type.</source>
          <target state="translated">IsAlias は、obj が型のエイリアス名であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="0e84022f347580b90f81c69d614f481de5c48849" translate="yes" xml:space="preserve">
          <source>IsBuiltin reports whether the corresponding expression denotes a (possibly parenthesized) built-in function.</source>
          <target state="translated">IsBuiltin は、対応する式が (括弧で囲まれている可能性のある)組み込み関数を示すかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="c915051f076524ecaa2f5d332eb2bb4d2765eefa" translate="yes" xml:space="preserve">
          <source>IsCommand reports whether the package is considered a command to be installed (not just a library). Packages named &quot;main&quot; are treated as commands.</source>
          <target state="translated">IsCommandは、パッケージが(ライブラリだけでなく)インストールされるコマンドとみなされるかどうかを報告します。main」という名前のパッケージはコマンドとして扱われます。</target>
        </trans-unit>
        <trans-unit id="2cd3abc2f41e5f98828e0ebaee47dfbcd10387ad" translate="yes" xml:space="preserve">
          <source>IsControl reports whether the rune is a control character. The C (Other) Unicode category includes more code points such as surrogates; use Is(C, r) to test for them.</source>
          <target state="translated">IsControlは、ルーンが制御文字であるかどうかを報告します。C (その他)Unicodeカテゴリには、サロゲートなどのコードポイントが含まれています;それらをテストするにはIs(C,r)を使用してください。</target>
        </trans-unit>
        <trans-unit id="c746a0807bba76d32760f9142c884716d0699c51" translate="yes" xml:space="preserve">
          <source>IsDigit reports whether the rune is a decimal digit.</source>
          <target state="translated">IsDigitは、ルーンが10進数かどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="3dc4a185454e26efa4716393eed4775f2e55fe7c" translate="yes" xml:space="preserve">
          <source>IsDir reports whether m describes a directory. That is, it tests for the ModeDir bit being set in m.</source>
          <target state="translated">IsDirは、mがディレクトリを記述しているかどうかを報告します。つまり、ModeDir ビットが m に設定されているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="5fd80e2b1854e3452cd6bfd7234aa8fa8ddcdc63" translate="yes" xml:space="preserve">
          <source>IsEmptyTree reports whether this tree (node) is empty of everything but space.</source>
          <target state="translated">IsEmptyTree は、このツリー(ノード)がスペース以外のすべてのものが空であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="cd43f5281afe605e10c23fa5e5c73089248f9feb" translate="yes" xml:space="preserve">
          <source>IsEnabled reports whether tracing is enabled. The information is advisory only. The tracing status may have changed by the time this function returns.</source>
          <target state="translated">IsEnabled は、トレースが有効かどうかをレポートします。この情報はあくまでも参考情報です。この関数が戻るまでにトレースの状態が変更されている可能性があります。</target>
        </trans-unit>
        <trans-unit id="39e18e7e1b9d6fbe4b3f09d74593704f059a0c0a" translate="yes" xml:space="preserve">
          <source>IsEncryptedPEMBlock returns if the PEM block is password encrypted.</source>
          <target state="translated">IsEncryptedPEMBlock は、PEM ブロックがパスワードで暗号化されているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="bc66205543d841780222acbebc983e058e70415a" translate="yes" xml:space="preserve">
          <source>IsExist returns a boolean indicating whether the error is known to report that a file or directory already exists. It is satisfied by ErrExist as well as some syscall errors.</source>
          <target state="translated">IsExistは、ファイルまたはディレクトリが既に存在することを報告するエラーが知られているかどうかを示すブール値を返します。これは、いくつかのsyscallエラーと同様にErrExistによって満たされます。</target>
        </trans-unit>
        <trans-unit id="fc56fa9983588228bd9fa3b0b5a7931ac3cb75f1" translate="yes" xml:space="preserve">
          <source>IsExported reports whether id starts with an upper-case letter.</source>
          <target state="translated">IsExported は、id が大文字で始まるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="3c6d4e31e0d52ed1d2823481dfa21ed80c9b776d" translate="yes" xml:space="preserve">
          <source>IsExported reports whether name starts with an upper-case letter.</source>
          <target state="translated">IsExported は、名前が大文字で始まるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="504274dd55fc2a273ebc2bd501f5695303ffe229" translate="yes" xml:space="preserve">
          <source>IsField reports whether the variable is a struct field.</source>
          <target state="translated">IsField は、変数が構造体フィールドであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="d9bdbeb50a8c37eb5d00e31069315d70d10359d6" translate="yes" xml:space="preserve">
          <source>IsGlobalUnicast reports whether ip is a global unicast address.</source>
          <target state="translated">IsGlobalUnicastは、ipがグローバルユニキャストアドレスであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="d72f8c1ccd0ac092185d981b6c61eacc3c121ef6" translate="yes" xml:space="preserve">
          <source>IsGraphic</source>
          <target state="translated">IsGraphic</target>
        </trans-unit>
        <trans-unit id="56022820abfd812a684373d7b12ff29c87996877" translate="yes" xml:space="preserve">
          <source>IsGraphic reports whether the rune is defined as a Graphic by Unicode. Such characters include letters, marks, numbers, punctuation, symbols, and spaces, from categories L, M, N, P, S, Zs.</source>
          <target state="translated">IsGraphicは、ルーンがUnicodeでグラフィックとして定義されているかどうかを報告します。このような文字には、L,M,N,P,S,Zsのカテゴリから、文字、マーク、数字、句読点、記号、スペースが含まれます。</target>
        </trans-unit>
        <trans-unit id="3bed5baca126f10003a7fc44f4e55808b330feda" translate="yes" xml:space="preserve">
          <source>IsGraphic reports whether the rune is defined as a Graphic by Unicode. Such characters include letters, marks, numbers, punctuation, symbols, and spaces, from categories L, M, N, P, S, and Zs.</source>
          <target state="translated">IsGraphicは、ルーンがUnicodeでグラフィックとして定義されているかどうかを報告します。このような文字には、L,M,N,P,S,Zsのカテゴリから、文字、マーク、数字、句読点、記号、スペースが含まれます。</target>
        </trans-unit>
        <trans-unit id="93d167ded0e381246ad35c4922eb8c26e2a4fc55" translate="yes" xml:space="preserve">
          <source>IsIdentifier reports whether name is a Go identifier, that is, a non-empty string made up of letters, digits, and underscores, where the first character is not a digit. Keywords are not identifiers.</source>
          <target state="translated">IsIdentifier は、名前が Go 識別子であるかどうかを報告します。つまり、文字、数字、アンダースコアで構成された空でない文字列で、最初の文字は数字ではありません。キーワードは識別子ではありません。</target>
        </trans-unit>
        <trans-unit id="679d30c5187a96f463dfbcdfb594ecc9983403ef" translate="yes" xml:space="preserve">
          <source>IsInf reports whether either real(x) or imag(x) is an infinity.</source>
          <target state="translated">IsInfは、real(x)とimag(x)のどちらかが無限大であるかを報告します。</target>
        </trans-unit>
        <trans-unit id="13dd75a92325ad267d0a2fa14c6cb50f24a9dd7b" translate="yes" xml:space="preserve">
          <source>IsInf reports whether f is an infinity, according to sign. If sign &amp;gt; 0, IsInf reports whether f is positive infinity. If sign &amp;lt; 0, IsInf reports whether f is negative infinity. If sign == 0, IsInf reports whether f is either infinity.</source>
          <target state="translated">符号によると、IsInfはfが無限大であるかどうかを報告します。符号&amp;gt; 0の場合、IsInfはfが正の無限大かどうかを報告します。符号&amp;lt;0の場合、IsInfはfが負の無限大かどうかを報告します。sign == 0の場合、IsInfはfが無限大かどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="8e1783a22a02fb29f43965c4b4c975183d78e4dd" translate="yes" xml:space="preserve">
          <source>IsInf reports whether x is +Inf or -Inf.</source>
          <target state="translated">IsInfは、xが+Infか-Infかをレポートします。</target>
        </trans-unit>
        <trans-unit id="1b05edd34484393d17b771d708b4b2dd276cb90e" translate="yes" xml:space="preserve">
          <source>IsInt reports whether the denominator of x is 1.</source>
          <target state="translated">IsIntは、xの分母が1であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="63c80063be9af3740f75431caecb4e56ba22484c" translate="yes" xml:space="preserve">
          <source>IsInt reports whether x is an integer. &amp;plusmn;Inf values are not integers.</source>
          <target state="translated">IsIntは、xが整数かどうかを報告します。&amp;plusmn;Inf値は整数ではありません。</target>
        </trans-unit>
        <trans-unit id="00a1b79e443959417f450c9b16cf5f48a8929d0f" translate="yes" xml:space="preserve">
          <source>IsInt64 reports whether x can be represented as an int64.</source>
          <target state="translated">IsInt64は、xがint64として表現できるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="ab97d0f94b18fe8f3b28313a45a877858cc4fa50" translate="yes" xml:space="preserve">
          <source>IsInterface reports whether typ is an interface type.</source>
          <target state="translated">IsInterfaceは、typがインターフェイス型であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="c6bdcbe107886851b028b532be31d52568400157" translate="yes" xml:space="preserve">
          <source>IsInterfaceLocalMulticast reports whether ip is an interface-local multicast address.</source>
          <target state="translated">IsInterfaceLocalMulticast は、ip がインターフェイスローカルマルチキャストアドレスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="203bcfa02f0ff2531137c0e97e09e91145ccf765" translate="yes" xml:space="preserve">
          <source>IsKeyword reports whether name is a Go keyword, such as &quot;func&quot; or &quot;return&quot;.</source>
          <target state="translated">IsKeyword は、名前が &quot;func&quot; や &quot;return&quot; などの Go キーワードであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="b1af467f9e4844b489b1e4d07d7f23c5a24e49f8" translate="yes" xml:space="preserve">
          <source>IsKeyword returns true for tokens corresponding to keywords; it returns false otherwise.</source>
          <target state="translated">IsKeywordは、キーワードに対応するトークンに対して真を返し、そうでない場合は偽を返します。</target>
        </trans-unit>
        <trans-unit id="9e659e799b643d193bc338fa878bc56e93c2043d" translate="yes" xml:space="preserve">
          <source>IsLetter reports whether the rune is a letter (category L).</source>
          <target state="translated">IsLetterは、ルーンが文字(カテゴリL)であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="796f0c2eac4ef075bdac49252f1a8a9437f7cb5a" translate="yes" xml:space="preserve">
          <source>IsLinkLocalMulticast reports whether ip is a link-local multicast address.</source>
          <target state="translated">IsLinkLocalMulticastは、ipがリンクローカルマルチキャストアドレスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="bb398472e4891951632d23a856db9700a4f1260f" translate="yes" xml:space="preserve">
          <source>IsLinkLocalUnicast reports whether ip is a link-local unicast address.</source>
          <target state="translated">IsLinkLocalUnicastは、ipがリンクローカルユニキャストアドレスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="338823e775821fbbffd934b6dc8f8c7b06cf31f5" translate="yes" xml:space="preserve">
          <source>IsLiteral returns true for tokens corresponding to identifiers and basic type literals; it returns false otherwise.</source>
          <target state="translated">IsLiteral は、識別子と基本型リテラルに対応するトークンに対して真を返します。</target>
        </trans-unit>
        <trans-unit id="a302aa5062a5a2939f950e77a3b1bd2cffbbb134" translate="yes" xml:space="preserve">
          <source>IsLocalImport reports whether the import path is a local import path, like &quot;.&quot;, &quot;..&quot;, &quot;./foo&quot;, or &quot;../foo&quot;.</source>
          <target state="translated">IsLocalImport は、インポートパスが &quot;.&quot;,&quot;..&quot;,&quot;./foo&quot;,&quot;../foo&quot; のようなローカルインポートパスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="a279a0dd486da312eb888a933fcd3c106d5ddf1b" translate="yes" xml:space="preserve">
          <source>IsLoopback reports whether ip is a loopback address.</source>
          <target state="translated">IsLoopbackは、ipがループバックアドレスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="4c6115a445a46684f9b4821abab1454dcf00a510" translate="yes" xml:space="preserve">
          <source>IsLower reports whether the rune is a lower case letter.</source>
          <target state="translated">IsLowerは、ルーンが小文字であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="e316f3e3a4a4a943e13f969fe03fe3e6888a42f0" translate="yes" xml:space="preserve">
          <source>IsMark reports whether the rune is a mark character (category M).</source>
          <target state="translated">IsMarkは、ルーンがマーク文字(カテゴリM)であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="e919a8a1e5af711657ece2a09a282e053c84e876" translate="yes" xml:space="preserve">
          <source>IsMulticast reports whether ip is a multicast address.</source>
          <target state="translated">IsMulticastは、ipがマルチキャストアドレスであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="0d71475a6ac8cde45586a2e1ee4e9f1a73195c46" translate="yes" xml:space="preserve">
          <source>IsNaN reports whether either real(x) or imag(x) is NaN and neither is an infinity.</source>
          <target state="translated">IsNaNは、real(x)とimag(x)のどちらかがNaNで、どちらも無限大であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="51cb1fb375010c76e1d272e937551b9aa294ed29" translate="yes" xml:space="preserve">
          <source>IsNaN reports whether f is an IEEE 754 &amp;ldquo;not-a-number&amp;rdquo; value.</source>
          <target state="translated">IsNaNは、fがIEEE 754の「数値ではない」値かどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="8a70a6c8c78f197d95d9931060aaaff0e1ad7ace" translate="yes" xml:space="preserve">
          <source>IsNil reports whether its argument v is nil. The argument must be a chan, func, interface, map, pointer, or slice value; if it is not, IsNil panics. Note that IsNil is not always equivalent to a regular comparison with nil in Go. For example, if v was created by calling ValueOf with an uninitialized interface variable i, i==nil will be true but v.IsNil will panic as v will be the zero Value.</source>
          <target state="translated">IsNilは、引数vがnilであるかどうかを報告します。引数は chan,func,interface,map,pointer,slice 値でなければなりません。IsNil は、Go の nil との通常の比較とは必ずしも一致しないことに注意してください。例えば、初期化されていないインターフェイス変数 i で ValueOf を呼び出して v が作成された場合、i==nil は真になりますが、v.IsNil は v がゼロの Value になるのでパニックになります。</target>
        </trans-unit>
        <trans-unit id="d1cbf137d274a495776ae13213f6abf32b87d01c" translate="yes" xml:space="preserve">
          <source>IsNil reports whether the corresponding expression denotes the predeclared value nil.</source>
          <target state="translated">IsNil は、対応する式が事前に宣言された値 nil を示すかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="299ff42ffbb3020ccb3e165c3f47990aa016cf3b" translate="yes" xml:space="preserve">
          <source>IsNotExist</source>
          <target state="translated">IsNotExist</target>
        </trans-unit>
        <trans-unit id="03c20e37da945e513d60a4c872afa073a5099855" translate="yes" xml:space="preserve">
          <source>IsNotExist returns a boolean indicating whether the error is known to report that a file or directory does not exist. It is satisfied by ErrNotExist as well as some syscall errors.</source>
          <target state="translated">IsNotExistは、ファイルまたはディレクトリが存在しないことを報告するエラーが知られているかどうかを示すブール値を返します。これは、いくつかのsyscallエラーと同様にErrNotExistによって満たされます。</target>
        </trans-unit>
        <trans-unit id="f2c323038256b2a2953181c6a475ccd896ada404" translate="yes" xml:space="preserve">
          <source>IsNumber reports whether the rune is a number (category N).</source>
          <target state="translated">IsNumberは、ルーンが数字(カテゴリN)であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="245475f668f23bbed41324e2de1b4948cc531ddc" translate="yes" xml:space="preserve">
          <source>IsOneOf reports whether the rune is a member of one of the ranges. The function &quot;In&quot; provides a nicer signature and should be used in preference to IsOneOf.</source>
          <target state="translated">IsOneOfは、ルーンがいずれかの範囲のメンバーであるかどうかを報告する。関数 &quot;In &quot;はより良いシグネチャを提供するので、IsOneOfよりも優先して使用すべきである。</target>
        </trans-unit>
        <trans-unit id="a20bd2f5568b340e7370b04b798bc3f83596bcce" translate="yes" xml:space="preserve">
          <source>IsOperator returns true for tokens corresponding to operators and delimiters; it returns false otherwise.</source>
          <target state="translated">IsOperator は、演算子とデリミタに対応するトークンに対して真を返し、そうでない場合は偽を返します。</target>
        </trans-unit>
        <trans-unit id="73c5624da9ca6fbf3e420dbf86786a852cc89a14" translate="yes" xml:space="preserve">
          <source>IsPathSeparator reports whether c is a directory separator character.</source>
          <target state="translated">IsPathSeparatorは、cがディレクトリセパレータ文字であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="8bd40ac27999a79bc28cf90f839e43d8f9372279" translate="yes" xml:space="preserve">
          <source>IsPermission returns a boolean indicating whether the error is known to report that permission is denied. It is satisfied by ErrPermission as well as some syscall errors.</source>
          <target state="translated">IsPermissionは、パーミッションが拒否されたことを報告するエラーが知られているかどうかを示すブール値を返します。これは、いくつかのsyscallエラーと同様にErrPermissionによって満たされます。</target>
        </trans-unit>
        <trans-unit id="e48f3df15b49da83d51099ad5b3eb8bbfd8edc75" translate="yes" xml:space="preserve">
          <source>IsPredeclared reports whether s is a predeclared identifier.</source>
          <target state="translated">IsPredeclaredは、sが事前に宣言された識別子であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="36ebaf4d189aca534d273d48d5ddeec782d7bed9" translate="yes" xml:space="preserve">
          <source>IsPrint</source>
          <target state="translated">IsPrint</target>
        </trans-unit>
        <trans-unit id="9798b863454466bfa901e359486dca8125aebd8e" translate="yes" xml:space="preserve">
          <source>IsPrint reports whether the rune is defined as printable by Go, with the same definition as unicode.IsPrint: letters, numbers, punctuation, symbols and ASCII space.</source>
          <target state="translated">IsPrintは、ルーンがGoで印刷可能と定義されているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="98481c27a5fae0a861fa7de3b6778c4d86a82e18" translate="yes" xml:space="preserve">
          <source>IsPrint reports whether the rune is defined as printable by Go. Such characters include letters, marks, numbers, punctuation, symbols, and the ASCII space character, from categories L, M, N, P, S and the ASCII space character. This categorization is the same as IsGraphic except that the only spacing character is ASCII space, U+0020.</source>
          <target state="translated">IsPrintは、ルーンがGoで印刷可能と定義されているかどうかを報告します。このような文字には、文字、マーク、数字、句読点、記号、およびカテゴリL、M、N、P、S、およびASCIIスペース文字が含まれます。この分類は、スペーシング文字がASCIIスペース文字のU+0020のみであることを除いては、IsGraphicと同じです。</target>
        </trans-unit>
        <trans-unit id="8d669f2d873d45ac65ae33ba5fc527f66e56a570" translate="yes" xml:space="preserve">
          <source>IsPunct reports whether the rune is a Unicode punctuation character (category P).</source>
          <target state="translated">IsPunctは、ルーンがUnicode句読点文字(カテゴリP)であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="09f51db22f739274d216b281ce628857122cde77" translate="yes" xml:space="preserve">
          <source>IsRegular reports whether m describes a regular file. That is, it tests that no mode type bits are set.</source>
          <target state="translated">IsRegularは、mが通常のファイルを記述しているかどうかを報告します。つまり、モードタイプのビットが設定されていないことをテストします。</target>
        </trans-unit>
        <trans-unit id="7aa02fb0658d675b5c73f5d774f227af20e5eda3" translate="yes" xml:space="preserve">
          <source>IsScanValue is equivalent to IsValue. It exists for compatibility.</source>
          <target state="translated">IsScanValueはIsValueと同等です。これは互換性のために存在します。</target>
        </trans-unit>
        <trans-unit id="02fd007fd97349a8b2fafa3e48b3fe7f504ea24c" translate="yes" xml:space="preserve">
          <source>IsSorted reports whether data is sorted.</source>
          <target state="translated">IsSorted は、データがソートされているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="514d21d401add5f58b109e05d3a8a2615962f831" translate="yes" xml:space="preserve">
          <source>IsSpace reports whether the rune is a space character as defined by Unicode's White Space property; in the Latin-1 space this is</source>
          <target state="translated">IsSpaceは、ルーンがUnicodeのWhite Spaceプロパティで定義されているスペース文字であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="b8364c32e39bc01deb2db29de008f790b53e0511" translate="yes" xml:space="preserve">
          <source>IsSurrogate reports whether the specified Unicode code point can appear in a surrogate pair.</source>
          <target state="translated">IsSurrogateは、指定されたUnicodeコードポイントがサロゲートペアに現れるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="94ff69a73ee80e68160fc5d14463531f326feb1a" translate="yes" xml:space="preserve">
          <source>IsSymbol reports whether the rune is a symbolic character.</source>
          <target state="translated">IsSymbolは、ルーンが記号文字であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="80e8a9046c478caac6544a67a67898f6f56d102d" translate="yes" xml:space="preserve">
          <source>IsTimeout returns a boolean indicating whether the error is known to report that a timeout occurred.</source>
          <target state="translated">IsTimeoutは、タイムアウトが発生したことを報告するためにエラーが知られているかどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="5dae031aae8f79fce18391198feff6e45790996f" translate="yes" xml:space="preserve">
          <source>IsTitle reports whether the rune is a title case letter.</source>
          <target state="translated">IsTitleは、ルーンがタイトル・ケースレターであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="47cdd782e568065cbc896003cc3080e6fa343e64" translate="yes" xml:space="preserve">
          <source>IsTrue reports whether the value is 'true', in the sense of not the zero of its type, and whether the value has a meaningful truth value. This is the definition of truth used by if and other such actions.</source>
          <target state="translated">IsTrueは、その型のゼロではないという意味で、値が「真」であるかどうかを報告し、その値が意味のある真理値を持っているかどうかを報告します。これはifなどのアクションで使われる真理の定義です。</target>
        </trans-unit>
        <trans-unit id="f386d0c906e9366cb699b0ae4451bc9d70023dc4" translate="yes" xml:space="preserve">
          <source>IsType reports whether the corresponding expression specifies a type.</source>
          <target state="translated">IsTypeは、対応する式が型を指定しているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="bd72caa363338547d5699b96c1b4ac80c8cd24c1" translate="yes" xml:space="preserve">
          <source>IsUint64 reports whether x can be represented as a uint64.</source>
          <target state="translated">IsUint64は、xがuint64として表現できるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="6b3721da2086f5e9441475d80b1c204e06489512" translate="yes" xml:space="preserve">
          <source>IsUnspecified reports whether ip is an unspecified address, either the IPv4 address &quot;0.0.0.0&quot; or the IPv6 address &quot;::&quot;.</source>
          <target state="translated">IsUnspecifiedは、IPv4アドレス「0.0.0.0.0」またはIPv6アドレス「::」のいずれかであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="b72d29b8198db403c8169f5f00434fb729acb678" translate="yes" xml:space="preserve">
          <source>IsUpper reports whether the rune is an upper case letter.</source>
          <target state="translated">IsUpperは、ルーンが大文字かどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="ecc382ac4eeae90631c4ff786a142c8cd4a2a1e3" translate="yes" xml:space="preserve">
          <source>IsValid reports whether the position is valid.</source>
          <target state="translated">IsValid は、ポジションが有効かどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="6b4d65bab951e443a5b5a6cb70b5527aa329d397" translate="yes" xml:space="preserve">
          <source>IsValid reports whether v represents a value. It returns false if v is the zero Value. If IsValid returns false, all other methods except String panic. Most functions and methods never return an invalid value. If one does, its documentation states the conditions explicitly.</source>
          <target state="translated">IsValid は、v が値を表すかどうかをレポートします。v がゼロの値の場合は false を返します。IsValid が false を返すと、String 以外のすべてのメソッドがパニックになります。ほとんどの関数やメソッドは、無効な値を返すことはありません。無効な値を返す場合は、そのドキュメントに明示的に条件が記載されています。</target>
        </trans-unit>
        <trans-unit id="55d30ff7d3d863a32468776759178dbe0451ccce" translate="yes" xml:space="preserve">
          <source>IsValue reports whether the corresponding expression is a value. Builtins are not considered values. Constant values have a non- nil Value.</source>
          <target state="translated">IsValueは、対応する式が値であるかどうかを報告します。ビルトインは値とはみなされません。定数の値は、非nilのValueを持ちます。</target>
        </trans-unit>
        <trans-unit id="9d7a5d3a7652824e4f9b549a7d5a262a10ef59c5" translate="yes" xml:space="preserve">
          <source>IsValue reports whether v is a valid Value parameter type.</source>
          <target state="translated">IsValueは、vが有効なValueパラメータ型であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="65e1a871482dad54f08e17dd72762a3fd2f75d74" translate="yes" xml:space="preserve">
          <source>IsVoid reports whether the corresponding expression is a function call without results.</source>
          <target state="translated">IsVoidは、対応する式が結果を伴わない関数呼び出しであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="297c16f9ae029663b610c3b616363007a062b053" translate="yes" xml:space="preserve">
          <source>IsWordChar reports whether r is consider a &amp;ldquo;word character&amp;rdquo; during the evaluation of the \b and \B zero-width assertions. These assertions are ASCII-only: the word characters are [A-Za-z0-9_].</source>
          <target state="translated">IsWordCharは、\ bおよび\ Bのゼロ幅アサーションの評価中にrが「ワード文字」と見なされるかどうかを報告します。これらのアサーションはASCIIのみです。文字は[A-Za-z0-9_]です。</target>
        </trans-unit>
        <trans-unit id="5f0397c5af2b47c485a6cac89d344b49d39148e5" translate="yes" xml:space="preserve">
          <source>IsZero reports whether t represents the zero time instant, January 1, year 1, 00:00:00 UTC.</source>
          <target state="translated">IsZero は、t がゼロ時間の瞬間、1 年 1 月 1 日 00:00:00:00 UTC を表しているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="14b29f8979f8b38e486b8c2fc265fcec75315a1b" translate="yes" xml:space="preserve">
          <source>IsZero reports whether v is the zero value for its type. It panics if the argument is invalid.</source>
          <target state="translated">IsZeroは、vがその型のゼロ値であるかどうかを報告します。引数が無効な場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="2e5ba7b50d53dc66de9ac76f94ae84e19ac42a4e" translate="yes" xml:space="preserve">
          <source>IsolationLevel is the transaction isolation level stored in TxOptions.</source>
          <target state="translated">IsolationLevelはTxOptionsに格納されているトランザクション分離レベルです。</target>
        </trans-unit>
        <trans-unit id="00b8885e61c34531225b38e32ae41a763eb82a05" translate="yes" xml:space="preserve">
          <source>IsolationLevel is the transaction isolation level used in TxOptions.</source>
          <target state="translated">IsolationLevelはTxOptionsで使用されるトランザクション分離レベルです。</target>
        </trans-unit>
        <trans-unit id="d76fb5eb8c221bc52330dc2413a54b325f8af681" translate="yes" xml:space="preserve">
          <source>It does nothing if the URL's scheme is not HTTP or HTTPS.</source>
          <target state="translated">URL のスキームが HTTP または HTTPS でない場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="730fc66fc7c6f8658abbd279912d4debd6897a14" translate="yes" xml:space="preserve">
          <source>It is allowed but not required for the caller to hold c.L during the call.</source>
          <target state="translated">発信者が通話中にc.Lをホールドすることは許可されていますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="64b18effbf60d196d9c9972b0f4752ad49d90515" translate="yes" xml:space="preserve">
          <source>It is allowed to call Notify multiple times with different channels and the same signals: each channel receives copies of incoming signals independently.</source>
          <target state="translated">異なるチャネルと同じ信号で複数回Notifyを呼び出すことができます:各チャネルは受信信号のコピーを独立して受信します。</target>
        </trans-unit>
        <trans-unit id="2b72f5a15cc86252895b6a5820ed7c36974cccb2" translate="yes" xml:space="preserve">
          <source>It is allowed to call Notify multiple times with the same channel: each call expands the set of signals sent to that channel. The only way to remove signals from the set is to call Stop.</source>
          <target state="translated">同じチャネルで複数回の Notify コールを行うことができます。シグナルをセットから削除する唯一の方法は Stop を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="64b9ab50226fefd57abe4e106fe4fbde6d348569" translate="yes" xml:space="preserve">
          <source>It is defined in RFC 1950:</source>
          <target state="translated">これはRFC 1950で定義されています。</target>
        </trans-unit>
        <trans-unit id="3527f9b32341885623b87c38f5f98392bdedd8dc" translate="yes" xml:space="preserve">
          <source>It is equivalent to SplitAfterN with a count of -1.</source>
          <target state="translated">これは SplitAfterN のカウントを -1 としたものと同等です。</target>
        </trans-unit>
        <trans-unit id="dbac3455f5dcff27b15907e612c36dc6d6627118" translate="yes" xml:space="preserve">
          <source>It is equivalent to SplitN with a count of -1.</source>
          <target state="translated">SplitNのカウントが-1の場合と同等です。</target>
        </trans-unit>
        <trans-unit id="9bc89c86db3c02e15ec65887cfcf0cc312b36a24" translate="yes" xml:space="preserve">
          <source>It is not associated with any particular color profile.</source>
          <target state="translated">特定のカラープロファイルとは関係ありません。</target>
        </trans-unit>
        <trans-unit id="8b9cf269b7a066efe335dc4941105afdd2791a76" translate="yes" xml:space="preserve">
          <source>It is not guaranteed that a finalizer will run for objects allocated in initializers for package-level variables. Such objects may be linker-allocated, not heap-allocated.</source>
          <target state="translated">パッケージレベルの変数のイニシャライザに割り当てられたオブジェクトに対してファイナライザが実行されることは保証されていません。このようなオブジェクトは、ヒープではなくリンカで割り当てられているかもしれません。</target>
        </trans-unit>
        <trans-unit id="185afc47d5312f1df75d7c2e1fd8c497c93c1bee" translate="yes" xml:space="preserve">
          <source>It is not guaranteed that a finalizer will run if the size of *obj is zero bytes.</source>
          <target state="translated">objのサイズが0バイトの場合、ファイナライザが実行されることは保証されていません。</target>
        </trans-unit>
        <trans-unit id="e276973efe0e06473fcbf2184470a55ce905f9ea" translate="yes" xml:space="preserve">
          <source>It is rare to Close a DB, as the DB handle is meant to be long-lived and shared between many goroutines.</source>
          <target state="translated">DBハンドルは長寿命を意味し、多くのゴロチン間で共有されているため、DBを閉じることは稀です。</target>
        </trans-unit>
        <trans-unit id="13c70c7692f708ab80a79d217ba3b943c3b63874" translate="yes" xml:space="preserve">
          <source>It is safe to call Read and Write in parallel with each other or with Close. Parallel calls to Read and parallel calls to Write are also safe: the individual calls will be gated sequentially.</source>
          <target state="translated">Read と Write を互いに並行して呼び出すか、Close を使って呼び出すのが安全です。Readへの並列呼び出しやWriteへの並列呼び出しも安全です。</target>
        </trans-unit>
        <trans-unit id="8e87bdde62b3a11cc618f6eef7d1ef7e95ea027e" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary for a test program to do extra setup or teardown before or after testing. It is also sometimes necessary for a test to control which code runs on the main thread. To support these and other cases, if a test file contains a function:</source>
          <target state="translated">テストプログラムでは、テストの前後に余分なセットアップやティアダウンを行うことが必要になることがあります。また、どのコードがメインスレッド上で実行されるかを制御するためにテストが必要になることもあります。これらのケースやその他のケースをサポートするために、テストファイルに関数が含まれている場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="c4c640b2d1c13408fc0addbe9ca9b3e33c914d4c" translate="yes" xml:space="preserve">
          <source>It is the caller's responsibility to call Close on the Reader when done.</source>
          <target state="translated">終わったらClose on the Readerを呼び出すのは発信者の責任です。</target>
        </trans-unit>
        <trans-unit id="986480998eaebed4b6a54647e1482613d046d84f" translate="yes" xml:space="preserve">
          <source>It is the caller's responsibility to call Close on the Writer when done. Writes may be buffered and not flushed until Close.</source>
          <target state="translated">書き込みが完了したら、ライター上でCloseを呼び出すのは呼び出し側の責任です。書き込みはバッファリングされ、Closeまでフラッシュされないことがあります。</target>
        </trans-unit>
        <trans-unit id="5d5e9d1ff14ea8de0b89e8865f3f584d482a0afe" translate="yes" xml:space="preserve">
          <source>It is useful mainly in compressed network protocols, to ensure that a remote reader has enough data to reconstruct a packet. Flush does not return until the data has been written. If the underlying writer returns an error, Flush returns that error.</source>
          <target state="translated">これは主に圧縮されたネットワークプロトコルで有用で、リモートリーダーがパケットを再構築するのに十分なデータを持っていることを保証します。フラッシュは、データが書き込まれるまで戻りません。基礎となるライタがエラーを返した場合、Flush はそのエラーを返します。</target>
        </trans-unit>
        <trans-unit id="31cc99464ed62136a451655119e840afa7451b83" translate="yes" xml:space="preserve">
          <source>It is valid both to add and to subtract offsets from a pointer in this way. It is also valid to use &amp;amp;^ to round pointers, usually for alignment. In all cases, the result must continue to point into the original allocated object.</source>
          <target state="translated">このようにして、ポインターにオフセットを加算したり、ポインターから減算したりすることはどちらも有効です。通常は位置合わせのために、ポインターを丸めるために＆^を使用することも有効です。すべての場合において、結果は引き続き元の割り当てられたオブジェクトを指している必要があります。</target>
        </trans-unit>
        <trans-unit id="dd1e16d418b70f8a4bcbc355b1da37369ffe8113" translate="yes" xml:space="preserve">
          <source>It makes one call to data.Len to determine n, O(n*log(n)) calls to data.Less and O(n*log(n)*log(n)) calls to data.Swap.</source>
          <target state="translated">これは、nを決定するためにdata.Lenを1回呼び出し、data.LessをO(n*log(n)呼び出し、data.SwapをO(n*log(n)*log(n)呼び出し)します。</target>
        </trans-unit>
        <trans-unit id="49a3b03dcb3864c71030445c5ba5bfe2611711d2" translate="yes" xml:space="preserve">
          <source>It may also be received into any of these:</source>
          <target state="translated">また、これらのいずれかに受け取られることもあります。</target>
        </trans-unit>
        <trans-unit id="7b88fc3e61debf0d0f1a1581e71a0996edf539a5" translate="yes" xml:space="preserve">
          <source>It panics if count is negative or if the result of (len(b) * count) overflows.</source>
          <target state="translated">countが負の値であったり、(len(b)*count)の結果がオーバーフローした場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="8b61a1a4bb411ee036d7d3cc509678ace33cef83" translate="yes" xml:space="preserve">
          <source>It panics if count is negative or if the result of (len(s) * count) overflows.</source>
          <target state="translated">countが負の値であったり、(len(s)*count)の結果がオーバーフローした場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="652db58383317d0338f369bbd62022ed3ab07600" translate="yes" xml:space="preserve">
          <source>It panics if the Value was obtained by accessing unexported struct fields.</source>
          <target state="translated">ポートされていない構造体フィールドにアクセスして値が取得された場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="564d342d70ea92defe3199a234b7ca21ece54f95" translate="yes" xml:space="preserve">
          <source>It returns a *rsa.PrivateKey, a *ecdsa.PrivateKey, or a ed25519.PrivateKey. More types might be supported in the future.</source>
          <target state="translated">rsa.PrivateKey、*ecdsa.PrivateKey、またはed25519.PrivateKeyを返します。将来的には、より多くの型がサポートされるかもしれません。</target>
        </trans-unit>
        <trans-unit id="9f11d9cd546ed2abe8e697fa6f8bbdc2a3d2e5ef" translate="yes" xml:space="preserve">
          <source>It returns a *rsa.PublicKey, *dsa.PublicKey, *ecdsa.PublicKey, or ed25519.PublicKey. More types might be supported in the future.</source>
          <target state="translated">これは、*rsa.PublicKey、*dsa.PublicKey、*ecdsa.PublicKey、またはed25519.PublicKeyを返します。将来的には、より多くの型がサポートされるようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e5010d434ca33dd92d7a44910817533939048059" translate="yes" xml:space="preserve">
          <source>It returns an empty slice if the URL's scheme is not HTTP or HTTPS.</source>
          <target state="translated">URL のスキームが HTTP または HTTPS でない場合は、空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="2b565edf53edd5e13295b4a395aad926eda82327" translate="yes" xml:space="preserve">
          <source>It returns an error if t has already been executed.</source>
          <target state="translated">すでに t が実行されている場合はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="a56353db7fb203c22e0bfd117b292abd05c5de94" translate="yes" xml:space="preserve">
          <source>It returns an error if t or any associated template has already been executed.</source>
          <target state="translated">tまたは関連するテンプレートが既に実行されている場合はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="e63a57b040488970eacecfd2272a9deb62e2be3e" translate="yes" xml:space="preserve">
          <source>It returns an error if the receiver is not an exported type or has no suitable methods. It also logs the error using package log. The client accesses each method using a string of the form &quot;Type.Method&quot;, where Type is the receiver's concrete type.</source>
          <target state="translated">これは、レシーバがエクスポートされた型ではなかったり、適切なメソッドを持っていない場合にエラーを返します。また、パッケージログを用いてエラーを記録します。クライアントは、&quot;Type.Method&quot; という形式の文字列を用いて各メソッドにアクセスします。</target>
        </trans-unit>
        <trans-unit id="4dde580c3be3f14ce5fe15d368688767eafb64f5" translate="yes" xml:space="preserve">
          <source>It returns the IP address and the network implied by the IP and prefix length. For example, ParseCIDR(&quot;192.0.2.1/24&quot;) returns the IP address 192.0.2.1 and the network 192.0.2.0/24.</source>
          <target state="translated">これは、IPアドレスとIPとプレフィックスの長さによって暗示されるネットワークを返します。例えば、ParseCIDR(&quot;192.0.2.1/24&quot;)は IP アドレス 192.0.2.1 とネットワーク 192.0.2.0/24 を返します。</target>
        </trans-unit>
        <trans-unit id="0b053a1afdc2a3fb959c27dc82bd3e04e4d3478f" translate="yes" xml:space="preserve">
          <source>It sets only the Path and Args in the returned structure.</source>
          <target state="translated">返された構造体のPathとArgsのみを設定します。</target>
        </trans-unit>
        <trans-unit id="810599e9d82ed867f48c9be47863d26eaa5d33f3" translate="yes" xml:space="preserve">
          <source>It sets z to the (possibly rounded) value of the corresponding floating- point value, and returns z, the actual base b, and an error err, if any. The entire string (not just a prefix) must be consumed for success. If z's precision is 0, it is changed to 64 before rounding takes effect. The number must be of the form:</source>
          <target state="translated">これは z を対応する浮動小数点値の (丸められた)値に設定し、z、実際の基底 b、もしあればエラー err を返します。成功するためには、文字列全体 (接頭辞だけでなく)を消費しなければなりません。z の精度が 0 の場合は、丸めが有効になる前に 64 に変更されます。数値は以下の形式でなければなりません。</target>
        </trans-unit>
        <trans-unit id="4b0e67dd55e6df4a3c7132865324312cab9fb6a8" translate="yes" xml:space="preserve">
          <source>It should not be used for recursive read locking; a blocked Lock call excludes new readers from acquiring the lock. See the documentation on the RWMutex type.</source>
          <target state="translated">これは再帰的な読み取りロックには使用しないでください。RWMutex型に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ff62c59d333b6b7669c7f0b6568819a5dff0f396" translate="yes" xml:space="preserve">
          <source>Iterate calls f for the files in the file set in the order they were added until f returns false.</source>
          <target state="translated">f が false を返すまで、ファイルセット内のファイルを追加した順に f を繰り返し呼び出します。</target>
        </trans-unit>
        <trans-unit id="380c384a3bc4560682612879309496ebdde5cfd3" translate="yes" xml:space="preserve">
          <source>Itoa</source>
          <target state="translated">Itoa</target>
        </trans-unit>
        <trans-unit id="aac52064292950f4b3f0337ac6b1ebbc54bd40af" translate="yes" xml:space="preserve">
          <source>Itoa is equivalent to FormatInt(int64(i), 10).</source>
          <target state="translated">ItoaはFormatInt(int64(i),10)と同等です。</target>
        </trans-unit>
        <trans-unit id="2d1e23b725be8aad6b338015ecefbc3479bf797c" translate="yes" xml:space="preserve">
          <source>J0 returns the order-zero Bessel function of the first kind.</source>
          <target state="translated">J0は第1種の次数ゼロのベッセル関数を返します。</target>
        </trans-unit>
        <trans-unit id="9b402d642da0f20c362bc1bcf6bfd3cb9482a1ee" translate="yes" xml:space="preserve">
          <source>J1 returns the order-one Bessel function of the first kind.</source>
          <target state="translated">J1は第1種の次数1のベッセル関数を返します。</target>
        </trans-unit>
        <trans-unit id="0a183d189787e52c86d1ff01f1f68fc26c61737d" translate="yes" xml:space="preserve">
          <source>JPEG is defined in ITU-T T.81: &lt;a href=&quot;https://www.w3.org/Graphics/JPEG/itu-t81.pdf&quot;&gt;https://www.w3.org/Graphics/JPEG/itu-t81.pdf&lt;/a&gt;.</source>
          <target state="translated">JPEGはITU-T T.81で定義されてい&lt;a href=&quot;https://www.w3.org/Graphics/JPEG/itu-t81.pdf&quot;&gt;ます&lt;/a&gt;：https ://www.w3.org/Graphics/JPEG/itu-t81.pdf 。</target>
        </trans-unit>
        <trans-unit id="bd49e7822aebcb558798ee4f0f590d63e8da7cc1" translate="yes" xml:space="preserve">
          <source>JPEG, VP8, the MPEG family and other codecs use this color model. Such codecs often use the terms YUV and Y'CbCr interchangeably, but strictly speaking, the term YUV applies only to analog video signals, and Y' (luma) is Y (luminance) after applying gamma correction.</source>
          <target state="translated">JPEG、VP8、MPEGファミリーなどのコーデックはこのカラーモデルを使用しています。このようなコーデックでは、YUVとY'CbCrという用語を互換的に使用することが多いが、厳密には、YUVという用語はアナログ映像信号にのみ適用され、Y'(luma)はガンマ補正を適用した後のY(輝度)である。</target>
        </trans-unit>
        <trans-unit id="922b9fe605d8db0c621e15bc38a3c570a5ce91fd" translate="yes" xml:space="preserve">
          <source>JS encapsulates a known safe EcmaScript5 Expression, for example, `(x + y * z())`. Template authors are responsible for ensuring that typed expressions do not break the intended precedence and that there is no statement/expression ambiguity as when passing an expression like &quot;{ foo: bar() }\n['foo']()&quot;, which is both a valid Expression and a valid Program with a very different meaning.</source>
          <target state="translated">JS は既知の安全な EcmaScript5 式、例えば `(x+y*z())` をカプセル化しています。テンプレート作成者は、型付けされた式が意図した優先順位を崩さないようにすること、そして &quot;{foo:bar()}}\n['foo']()&quot; のような式を渡すときのような文や式の曖昧さがないようにすることに責任があります。</target>
        </trans-unit>
        <trans-unit id="26cbdc0eb97f168871a53f6c7842d5c136b64697" translate="yes" xml:space="preserve">
          <source>JSEscape writes to w the escaped JavaScript equivalent of the plain text data b.</source>
          <target state="translated">JSEscapeは、プレーンテキストデータbのエスケープされたJavaScript相当のデータをwに書き込みます。</target>
        </trans-unit>
        <trans-unit id="bd3faa1039cdd3fc555ce394120927a3ffbfdfd6" translate="yes" xml:space="preserve">
          <source>JSEscapeString returns the escaped JavaScript equivalent of the plain text data s.</source>
          <target state="translated">JSEscapeStringは、プレーンテキストデータsのエスケープされたJavaScriptの等価物を返します。</target>
        </trans-unit>
        <trans-unit id="0657ce896f15a5407782a5a0cb9e814dbb9243d9" translate="yes" xml:space="preserve">
          <source>JSEscaper returns the escaped JavaScript equivalent of the textual representation of its arguments.</source>
          <target state="translated">JSEscaperは、引数のテキスト表現をエスケープしたJavaScriptと同等のものを返します。</target>
        </trans-unit>
        <trans-unit id="3bd554b8109b0533f9a7bb62634a7c4956ea4b3a" translate="yes" xml:space="preserve">
          <source>JSON cannot represent cyclic data structures and Marshal does not handle them. Passing cyclic structures to Marshal will result in an infinite recursion.</source>
          <target state="translated">JSON は環状データ構造を表現することができず、Marshal はそれを扱いません。環状構造を Marshal に渡すと、無限の再帰が発生します。</target>
        </trans-unit>
        <trans-unit id="16c95a3afe47aa9594cf8938af617a9901298497" translate="yes" xml:space="preserve">
          <source>JSStr encapsulates a sequence of characters meant to be embedded between quotes in a JavaScript expression. The string must match a series of StringCharacters:</source>
          <target state="translated">JSStrは、JavaScriptの式の引用符の間に埋め込まれる文字列をカプセル化します。この文字列は、StringCharacters の一連の文字列にマッチしなければなりません。</target>
        </trans-unit>
        <trans-unit id="7ee415a9e606531fbf364133b0de844b1078510a" translate="yes" xml:space="preserve">
          <source>JSValue implements Wrapper interface.</source>
          <target state="translated">JSValueはWrapperインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="b800dfb6df40a19873f9dc7ec5927a93b2cfe769" translate="yes" xml:space="preserve">
          <source>Jacobi returns the Jacobi symbol (x/y), either +1, -1, or 0. The y argument must be an odd integer.</source>
          <target state="translated">Jacobi は、ヤコビ記号 (x/y)を +1、-1、または 0 のいずれかで返します。 y 引数は奇数の整数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="173acb21066734464813cc933e35bf49fb5074d7" translate="yes" xml:space="preserve">
          <source>Jar implements the http.CookieJar interface from the net/http package.</source>
          <target state="translated">Jar は net/http パッケージの http.CookieJar インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="0a5f33ea0d4d273fa523aad519e0bd5003a1f2a2" translate="yes" xml:space="preserve">
          <source>Jn returns the order-n Bessel function of the first kind.</source>
          <target state="translated">Jnは第1種の次数nのベッセル関数を返します。</target>
        </trans-unit>
        <trans-unit id="e0d73143de80d17e82de2e017ac156ca3b9c4e01" translate="yes" xml:space="preserve">
          <source>Join</source>
          <target state="translated">Join</target>
        </trans-unit>
        <trans-unit id="b160ff3535de402a5c7113020ea1b5b48c93aaa3" translate="yes" xml:space="preserve">
          <source>Join concatenates the elements of a to create a single string. The separator string sep is placed between elements in the resulting string.</source>
          <target state="translated">Join は、a の要素を連結して 1 つの文字列を作成します。区切り文字列 sep は、結果の文字列の要素間に配置されます。</target>
        </trans-unit>
        <trans-unit id="6badcc1917f6227c17c3b5a3bb3a7ab0dac561dd" translate="yes" xml:space="preserve">
          <source>Join concatenates the elements of s to create a new byte slice. The separator sep is placed between elements in the resulting slice.</source>
          <target state="translated">Join は s の要素を連結して新しいバイトスライスを作成します。区切り文字 sep は、結果のスライスの要素間に配置されます。</target>
        </trans-unit>
        <trans-unit id="aa67e6029ba49c3f992d57c2d0ab202a04ec1080" translate="yes" xml:space="preserve">
          <source>Join joins any number of path elements into a single path, adding a Separator if necessary. Join calls Clean on the result; in particular, all empty strings are ignored. On Windows, the result is a UNC path if and only if the first path element is a UNC path.</source>
          <target state="translated">Join は、必要に応じて Separator を追加して、任意の数のパス要素を 1 つのパスに結合します。Join は結果に対して Clean を呼び出します。特に、すべての空の文字列は無視されます。Windows では、最初のパス要素が UNC パスである場合に限り、結果は UNC パスになります。</target>
        </trans-unit>
        <trans-unit id="945c23e567973c47ce3562fa8cf5ef5f3d5533ea" translate="yes" xml:space="preserve">
          <source>Join joins any number of path elements into a single path, adding a separating slash if necessary. The result is Cleaned; in particular, all empty strings are ignored.</source>
          <target state="translated">Join は、任意の数のパス要素を 1 つのパスに結合し、必要に応じてスラッシュを追加します。結果はクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="0f25f02ad0ad7ded23a0d09d8ea462e385b6164c" translate="yes" xml:space="preserve">
          <source>JoinHostPort combines host and port into a network address of the form &quot;host:port&quot;. If host contains a colon, as found in literal IPv6 addresses, then JoinHostPort returns &quot;[host]:port&quot;.</source>
          <target state="translated">JoinHostPortは、ホストとポートを組み合わせて、「host:port」という形式のネットワークアドレスにします。リテラルIPv6アドレスで見られるように、hostにコロンが含まれている場合、JoinHostPortは&quot;[host]:port &quot;を返します。</target>
        </trans-unit>
        <trans-unit id="0cf4b24840f4e27435d8326ea5a70f3fed6a3f6e" translate="yes" xml:space="preserve">
          <source>KeepAlive marks its argument as currently reachable. This ensures that the object is not freed, and its finalizer is not run, before the point in the program where KeepAlive is called.</source>
          <target state="translated">KeepAliveはその引数を現在到達可能なものとしてマークします。これにより、KeepAliveが呼び出されるプログラムのポイントの前にオブジェクトが解放されず、そのファイナライザが実行されないことを保証します。</target>
        </trans-unit>
        <trans-unit id="4901b1829f2829b984a0de81f7472f13edad3727" translate="yes" xml:space="preserve">
          <source>Key returns the key of the iterator's current map entry.</source>
          <target state="translated">Key は、イテレータの現在のマップエントリのキーを返します。</target>
        </trans-unit>
        <trans-unit id="91d7c5c0cb63de8145a0cccf24bc8d2f799ffa8e" translate="yes" xml:space="preserve">
          <source>Key returns the key type of map m.</source>
          <target state="translated">Key は、マップ m のキータイプを返します。</target>
        </trans-unit>
        <trans-unit id="376426fe335e339ad2d0569150ad1299f858528e" translate="yes" xml:space="preserve">
          <source>KeyUsage represents the set of actions that are valid for a given key. It's a bitmap of the KeyUsage* constants.</source>
          <target state="translated">KeyUsageは、与えられた鍵に対して有効なアクションのセットを表す。KeyUsage*定数のビットマップです。</target>
        </trans-unit>
        <trans-unit id="096044ddbad86155a76b804e09110be8b259d0c6" translate="yes" xml:space="preserve">
          <source>KeyValue represents a single entry in a Map.</source>
          <target state="translated">キー値は、マップ内の 1 つの項目を表します。</target>
        </trans-unit>
        <trans-unit id="054ac770f511da2fe690104026b09ee1f229a5cb" translate="yes" xml:space="preserve">
          <source>Kill causes the Process to exit immediately. Kill does not wait until the Process has actually exited. This only kills the Process itself, not any other processes it may have started.</source>
          <target state="translated">Killは、プロセスを即座に終了させます。プロセスが実際に終了するまで待つことはありません。これは、プロセス自体を終了させるだけであり、プロセスが起動している可能性のある他のプロセスを終了させることはありません。</target>
        </trans-unit>
        <trans-unit id="e00ac23f2ac2ff73ad4f3c4b263d6c5bbfb80190" translate="yes" xml:space="preserve">
          <source>Kind</source>
          <target state="translated">Kind</target>
        </trans-unit>
        <trans-unit id="2f96efc28c6a98b35f43fa160b16237570ef8889" translate="yes" xml:space="preserve">
          <source>Kind returns the kind of basic type b.</source>
          <target state="translated">Kindは基本型bの種類を返します。</target>
        </trans-unit>
        <trans-unit id="1333bd1a9ccf64ac482cd7154071753a44d2a74b" translate="yes" xml:space="preserve">
          <source>Kind returns the selection kind.</source>
          <target state="translated">種類は選択範囲の種類を返します。</target>
        </trans-unit>
        <trans-unit id="1c89bd23580c2ae3925d134637371987fedb05e1" translate="yes" xml:space="preserve">
          <source>Kind returns v's Kind. If v is the zero Value (IsValid returns false), Kind returns Invalid.</source>
          <target state="translated">Kind は v の Kind を返します。v がゼロの値(IsValid は false を返します)の場合、Kind は Invalid を返します。</target>
        </trans-unit>
        <trans-unit id="069ade3ad94bb7d5e1d27e83fcea3337da44893d" translate="yes" xml:space="preserve">
          <source>Kind specifies the kind of value represented by a Value.</source>
          <target state="translated">KindはValueが表す値の種類を指定します。</target>
        </trans-unit>
        <trans-unit id="4774d947be420886f05bc80b8d7b99a878f5521e" translate="yes" xml:space="preserve">
          <source>Known networks are &quot;tcp&quot;, &quot;tcp4&quot; (IPv4-only), &quot;tcp6&quot; (IPv6-only), &quot;udp&quot;, &quot;udp4&quot; (IPv4-only), &quot;udp6&quot; (IPv6-only), &quot;ip&quot;, &quot;ip4&quot; (IPv4-only), &quot;ip6&quot; (IPv6-only), &quot;unix&quot;, &quot;unixgram&quot; and &quot;unixpacket&quot;.</source>
          <target state="translated">既知のネットワークは、「tcp」、「tcp4」(IPv4のみ)、「tcp6」(IPv6のみ)、「udp」、「udp4」(IPv4のみ)、「udp6」(IPv6のみ)、「ip」、「ip4」(IPv4のみ)、「ip6」(IPv6のみ)、「unix」、「unixgram」、「unixpacket」である。</target>
        </trans-unit>
        <trans-unit id="b8b88dd6dbbf9262e1174af16ab3d22e577d2db5" translate="yes" xml:space="preserve">
          <source>Known options:</source>
          <target state="translated">既知のオプション。</target>
        </trans-unit>
        <trans-unit id="14eee53dd9c3bca9efa386f9ef53c298322ea056" translate="yes" xml:space="preserve">
          <source>Label returns the value of the label with the given key on ctx, and a boolean indicating whether that label exists.</source>
          <target state="translated">Labelは、ctx上で指定されたキーを持つラベルの値と、そのラベルが存在するかどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="17f6783a9c705de835debb13cac8a07e2f5a8b94" translate="yes" xml:space="preserve">
          <source>LabelSet is a set of labels.</source>
          <target state="translated">LabelSetはラベルの集合です。</target>
        </trans-unit>
        <trans-unit id="bd752eb91afd54f78c7060bac232ea7dd334932f" translate="yes" xml:space="preserve">
          <source>Labels takes an even number of strings representing key-value pairs and makes a LabelSet containing them. A label overwrites a prior label with the same key. Currently only CPU profile utilizes labels information. See &lt;a href=&quot;https://golang.org/issue/23458&quot;&gt;https://golang.org/issue/23458&lt;/a&gt; for details.</source>
          <target state="translated">ラベルは、キーと値のペアを表す偶数の文字列を受け取り、それらを含むラベルセットを作成します。ラベルは、同じキーを持つ以前のラベルを上書きします。現在、CPUプロファイルのみがラベル情報を利用しています。詳細については、&lt;a href=&quot;https://golang.org/issue/23458&quot;&gt;https：//golang.org/issue/23458&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c80c2e659a9bc68c02557be9a6c755aeed779cd0" translate="yes" xml:space="preserve">
          <source>LastIndex</source>
          <target state="translated">LastIndex</target>
        </trans-unit>
        <trans-unit id="c2daa604f07bcb24a260e4fea3217009758689c4" translate="yes" xml:space="preserve">
          <source>LastIndex returns the index of the last instance of sep in s, or -1 if sep is not present in s.</source>
          <target state="translated">LastIndex は、 s 中の sep の最後のインスタンスのインデックスを返し、 s 中に sep が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="b07643ffeaf5942b3f11986d945cbd1ca4dc0db5" translate="yes" xml:space="preserve">
          <source>LastIndex returns the index of the last instance of substr in s, or -1 if substr is not present in s.</source>
          <target state="translated">LastIndexは、sの中の最後のインスタンスのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="a55ae6e0d05b49527c27558955cfb6017a5cb79e" translate="yes" xml:space="preserve">
          <source>LastIndexAny</source>
          <target state="translated">LastIndexAny</target>
        </trans-unit>
        <trans-unit id="c468ec7af80d497e073da5281108fc969df48a62" translate="yes" xml:space="preserve">
          <source>LastIndexAny interprets s as a sequence of UTF-8-encoded Unicode code points. It returns the byte index of the last occurrence in s of any of the Unicode code points in chars. It returns -1 if chars is empty or if there is no code point in common.</source>
          <target state="translated">LastIndexAny は、s を UTF-8 でエンコードされた Unicode コードポイントのシーケンスとして解釈します。これは、s の中で、chars の中の Unicode コードポイントのいずれかが最後に出現したときのバイトインデックスを返します。chars が空の場合や、共通のコードポイントがない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="f35ff2cbc15f8519c2de1c522556210dbec6f0d9" translate="yes" xml:space="preserve">
          <source>LastIndexAny returns the index of the last instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s.</source>
          <target state="translated">LastIndexAny は、 s 内の文字列からの Unicode コード点の最後のインスタンスのインデックスを返し、 s 内に文字列からの Unicode コード点が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="e5af45bb29df606a6ad9f71c5f8ffe801cf806e3" translate="yes" xml:space="preserve">
          <source>LastIndexByte</source>
          <target state="translated">LastIndexByte</target>
        </trans-unit>
        <trans-unit id="715ec7346f22f455ae3b4f77928429d6e6ea2e7d" translate="yes" xml:space="preserve">
          <source>LastIndexByte returns the index of the last instance of c in s, or -1 if c is not present in s.</source>
          <target state="translated">LastIndexByte は、 s 内の c の最後のインスタンスのインデックスを返し、 s 内に c が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="0052a6c35642a0a5651d0e514c35ebcc1b001ad3" translate="yes" xml:space="preserve">
          <source>LastIndexFunc</source>
          <target state="translated">LastIndexFunc</target>
        </trans-unit>
        <trans-unit id="e9e6d245d6f60be69d3deb822ef844937727defc" translate="yes" xml:space="preserve">
          <source>LastIndexFunc interprets s as a sequence of UTF-8-encoded code points. It returns the byte index in s of the last Unicode code point satisfying f(c), or -1 if none do.</source>
          <target state="translated">LastIndexFunc は、s を UTF-8 でエンコードされたコード点のシーケンスとして解釈します。f(c)を満たす最後の Unicode コードポイントの s のバイトインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="573828a944fe303002f7c0336cac457a4d45085f" translate="yes" xml:space="preserve">
          <source>LastIndexFunc returns the index into s of the last Unicode code point satisfying f(c), or -1 if none do.</source>
          <target state="translated">LastIndexFunc は、f(c)を満たす最後の Unicode コードポイントの s へのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="cdb76fffe46f91856747d3f589e0a3ea42a00f8c" translate="yes" xml:space="preserve">
          <source>Lchown changes the numeric uid and gid of the named file. If the file is a symbolic link, it changes the uid and gid of the link itself. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Lchown は、指定されたファイルの uid と gid を数値で変更します。ファイルがシンボリックリンクの場合は、リンク自体の uid と gid を変更します。エラーが発生した場合は、*PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="9f1275e6821f8a51315e2ca81450b41140587c42" translate="yes" xml:space="preserve">
          <source>Ldexp is the inverse of Frexp. It returns frac &amp;times; 2**exp.</source>
          <target state="translated">LdexpはFrexpの逆です。frac&amp;times;2 ** expを返します。</target>
        </trans-unit>
        <trans-unit id="0bfbea9fa1b1bd75227de20412ea5faba23da169" translate="yes" xml:space="preserve">
          <source>LeadingZeros returns the number of leading zero bits in x; the result is UintSize for x == 0.</source>
          <target state="translated">LeadingZerosは、xの先頭のゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="e3dbef4bbdf5cce299ff063f0c95032879c3da58" translate="yes" xml:space="preserve">
          <source>LeadingZeros16</source>
          <target state="translated">LeadingZeros16</target>
        </trans-unit>
        <trans-unit id="44f8376c5ec759270046aff7d8e5b19117ded5c1" translate="yes" xml:space="preserve">
          <source>LeadingZeros16 returns the number of leading zero bits in x; the result is 16 for x == 0.</source>
          <target state="translated">LeadingZeros16 は、x の先頭のゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="e9ed6b4c7187930afe2c50c883fcac4812515684" translate="yes" xml:space="preserve">
          <source>LeadingZeros32</source>
          <target state="translated">LeadingZeros32</target>
        </trans-unit>
        <trans-unit id="d0f408a69a9bfc0c9d5428df849a3e3f9c88b61c" translate="yes" xml:space="preserve">
          <source>LeadingZeros32 returns the number of leading zero bits in x; the result is 32 for x == 0.</source>
          <target state="translated">LeadingZeros32 は、x の先頭のゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="f987ddc8abdaac6d127e5eafa8b11404f85e5b1a" translate="yes" xml:space="preserve">
          <source>LeadingZeros64</source>
          <target state="translated">LeadingZeros64</target>
        </trans-unit>
        <trans-unit id="fda83273480c3e8d70a28c2f123cbf299bd51fd9" translate="yes" xml:space="preserve">
          <source>LeadingZeros64 returns the number of leading zero bits in x; the result is 64 for x == 0.</source>
          <target state="translated">LeadingZeros64 は、x の先頭のゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="fda98988d92b8709dacc15db674b3e6e61682f64" translate="yes" xml:space="preserve">
          <source>LeadingZeros8</source>
          <target state="translated">LeadingZeros8</target>
        </trans-unit>
        <trans-unit id="d8a16180e08b654e4c4467808de5826069ff567a" translate="yes" xml:space="preserve">
          <source>LeadingZeros8 returns the number of leading zero bits in x; the result is 8 for x == 0.</source>
          <target state="translated">LeadingZeros8 は、x の先頭のゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="721bda08d146a886975a86dd204cbec756066f9e" translate="yes" xml:space="preserve">
          <source>Least Surprise Property: &quot;A developer (or code reviewer) familiar with HTML, CSS, and JavaScript, who knows that contextual autoescaping happens should be able to look at a {{.}} and correctly infer what sanitization happens.&quot;</source>
          <target state="translated">Least Surprise Property.&quot;HTML,CSS,JavaScriptに精通した開発者(またはコードレビュアー)は、コンテキストによるオートエスケープが起こることを知っているので、{{{.}}}を見て、サニタイズが起こることを正しく推測することができるはずです。</target>
        </trans-unit>
        <trans-unit id="8d92112ff544a635650fbaf730715150d27bea5c" translate="yes" xml:space="preserve">
          <source>Len computes the number of elements in ring r. It executes in time proportional to the number of elements.</source>
          <target state="translated">Lenはリングrの要素数を計算します.</target>
        </trans-unit>
        <trans-unit id="1399044ec4cebde1e345bfb6e7bc0665028c448d" translate="yes" xml:space="preserve">
          <source>Len returns the length of array a. A negative result indicates an unknown length.</source>
          <target state="translated">Lenは配列aの長さを返します。負の結果は不明な長さを示します。</target>
        </trans-unit>
        <trans-unit id="93ef3e242273d75e5bb1dbc766c5fd7830570833" translate="yes" xml:space="preserve">
          <source>Len returns the minimum number of bits required to represent x; the result is 0 for x == 0.</source>
          <target state="translated">Lenはxを表現するのに必要な最小ビット数を返します。</target>
        </trans-unit>
        <trans-unit id="ca5afaea7adacd073486db0f70027386a60f94b6" translate="yes" xml:space="preserve">
          <source>Len returns the number of accumulated bytes; b.Len() == len(b.String()).</source>
          <target state="translated">Len は、蓄積されたバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="ee2f279ceb0f8a58afdf88fefe8cee3f9c31fa50" translate="yes" xml:space="preserve">
          <source>Len returns the number of bytes of the unread portion of the buffer; b.Len() == len(b.Bytes()).</source>
          <target state="translated">Len は、バッファの未読部分のバイト数を返します;b.Len()==len(b.Bytes())。</target>
        </trans-unit>
        <trans-unit id="67467f9c2f5df39d1ac34826fd0579c560dedb06" translate="yes" xml:space="preserve">
          <source>Len returns the number of bytes of the unread portion of the slice.</source>
          <target state="translated">Lenはスライスの未読部分のバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="9a34422a61609509fefc4a297f2f9c07ff69ccf9" translate="yes" xml:space="preserve">
          <source>Len returns the number of bytes of the unread portion of the string.</source>
          <target state="translated">Lenは、文字列の未読部分のバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="be3ac6245438d5424b518ab2335163e6f1965692" translate="yes" xml:space="preserve">
          <source>Len returns the number of elements of list l. The complexity is O(1).</source>
          <target state="translated">Lenはリストlの要素数を返します。</target>
        </trans-unit>
        <trans-unit id="a7b0b1334a129ccc7a0e235fc902ddfdb01aa234" translate="yes" xml:space="preserve">
          <source>Len returns the number of methods in s.</source>
          <target state="translated">Lenはsの中のメソッドの数を返します。</target>
        </trans-unit>
        <trans-unit id="9909b01102ccbea5c34e603dc1a8df16cade5eea" translate="yes" xml:space="preserve">
          <source>Len returns the number of scope elements.</source>
          <target state="translated">Lenはスコープ要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="8315c44360f57db88aab9b44a76e81307e540e3a" translate="yes" xml:space="preserve">
          <source>Len returns the number variables of tuple t.</source>
          <target state="translated">Lenはタプルtの変数の数を返します。</target>
        </trans-unit>
        <trans-unit id="ca8349640e110d5798f69868438b094ed5d5cb6c" translate="yes" xml:space="preserve">
          <source>Len returns v's length. It panics if v's Kind is not Array, Chan, Map, Slice, or String.</source>
          <target state="translated">Len は v の長さを返します。vのKindがArray,Chan,Map,Slice,Stringでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="b58611e03df383dbaa4dc9ba6fd2e4a6b8e52327" translate="yes" xml:space="preserve">
          <source>Len16</source>
          <target state="translated">Len16</target>
        </trans-unit>
        <trans-unit id="f5e60795826c955dcfd526c1230894564783d120" translate="yes" xml:space="preserve">
          <source>Len16 returns the minimum number of bits required to represent x; the result is 0 for x == 0.</source>
          <target state="translated">Len16 は x を表現するのに必要な最小ビット数を返します。</target>
        </trans-unit>
        <trans-unit id="76efc8ef8d6465f58231c9d295309a299f1d8534" translate="yes" xml:space="preserve">
          <source>Len32</source>
          <target state="translated">Len32</target>
        </trans-unit>
        <trans-unit id="2bdd325b510dd0548fcbb4a4b3c4d52a4f66d711" translate="yes" xml:space="preserve">
          <source>Len32 returns the minimum number of bits required to represent x; the result is 0 for x == 0.</source>
          <target state="translated">Len32はxを表現するのに必要な最小ビット数を返します。</target>
        </trans-unit>
        <trans-unit id="5bed2d704a16234c65f3795d3067f97369c94923" translate="yes" xml:space="preserve">
          <source>Len64</source>
          <target state="translated">Len64</target>
        </trans-unit>
        <trans-unit id="67dd373d63df43f7c3cfe611f388cdd1def82589" translate="yes" xml:space="preserve">
          <source>Len64 returns the minimum number of bits required to represent x; the result is 0 for x == 0.</source>
          <target state="translated">Len64 は x を表現するのに必要な最小ビット数を返します。</target>
        </trans-unit>
        <trans-unit id="5877dcf480cd63f747b4cd7b2e4473a4fb01962a" translate="yes" xml:space="preserve">
          <source>Len8</source>
          <target state="translated">Len8</target>
        </trans-unit>
        <trans-unit id="ead2ce671d2982c7db8677f2bb62a7b4fdd9a8e8" translate="yes" xml:space="preserve">
          <source>Len8 returns the minimum number of bits required to represent x; the result is 0 for x == 0.</source>
          <target state="translated">Len8 は x を表現するのに必要な最小ビット数を返します。</target>
        </trans-unit>
        <trans-unit id="2981abdd30fd95f0ea0e0799884f920048d0fba8" translate="yes" xml:space="preserve">
          <source>Length returns the JavaScript property &quot;length&quot; of v. It panics if v is not a JavaScript object.</source>
          <target state="translated">Lengthは、vのJavaScriptプロパティ「length」を返します。</target>
        </trans-unit>
        <trans-unit id="f0f51015552f0c7df8f3dcfecc5c896adfb05b7f" translate="yes" xml:space="preserve">
          <source>Length returns the column type length for variable length column types such as text and binary field types. If the type length is unbounded the value will be math.MaxInt64 (any database limits will still apply). If the column type is not variable length, such as an int, or if not supported by the driver ok is false.</source>
          <target state="translated">Length は、テキストやバイナリフィールド型などの可変長のカラム型のカラム型の長さを返します。型の長さに制限がない場合、値は math.MaxInt64 となります(データベースの制限は適用されます)。カラム型がintのような可変長でない場合、またはドライバがサポートしていない場合、 okはfalseです。</target>
        </trans-unit>
        <trans-unit id="7467b2c9a7e459bce96e4603f4b9c0fecbbea6e6" translate="yes" xml:space="preserve">
          <source>Lgamma returns the natural logarithm and sign (-1 or +1) of Gamma(x).</source>
          <target state="translated">LgammaはGamma(x)の自然対数と符号(-1または+1)を返します。</target>
        </trans-unit>
        <trans-unit id="7db120ff0add5b38c6339cbb76ef30243d16848f" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution License 3.0.</source>
          <target state="translated">クリエイティブ・コモンズ表示ライセンス3.0の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="7d9d345bfff5b874e03396293193a78237bde2df" translate="yes" xml:space="preserve">
          <source>Like Scanf and Fscanf, Sscanf need not consume its entire input. There is no way to recover how much of the input string Sscanf used.</source>
          <target state="translated">Scanf や Fscanf のように、Sscanf は入力全体を消費する必要はありません。Sscanf がどれだけの入力文字列を使用したかを復元する方法はありません。</target>
        </trans-unit>
        <trans-unit id="7e1cb140c6b5c5e4e4aa15375a7a581d31852d58" translate="yes" xml:space="preserve">
          <source>Like in tests, benchmark logs are accumulated during execution and dumped to standard error when done. Unlike in tests, benchmark logs are always printed, so as not to hide output whose existence may be affecting benchmark results.</source>
          <target state="translated">テストと同様に、ベンチマークログは実行中に蓄積され、実行が完了すると標準誤差にダンプされます。テストとは異なり、ベンチマークログは常に出力されます。</target>
        </trans-unit>
        <trans-unit id="64d7a9c098ae2cc78ad63fdda4f717ce942dd2cc" translate="yes" xml:space="preserve">
          <source>Like the RoundTripper interface, the error types returned by RoundTrip are unspecified.</source>
          <target state="translated">RoundTripper インターフェースと同様に、RoundTrip によって返されるエラータイプは未指定です。</target>
        </trans-unit>
        <trans-unit id="8c3e2cc8bde5ef9c910164a74c49f21b4ecb6bc1" translate="yes" xml:space="preserve">
          <source>LimitReader</source>
          <target state="translated">LimitReader</target>
        </trans-unit>
        <trans-unit id="82f17ce7a899200e83a237fbfff2e0aec18adc46" translate="yes" xml:space="preserve">
          <source>LimitReader returns a Reader that reads from r but stops with EOF after n bytes. The underlying implementation is a *LimitedReader.</source>
          <target state="translated">LimitReaderは、rから読み込みますが、nバイト後にEOFで停止するReaderを返します。基本的な実装は *LimitedReader です。</target>
        </trans-unit>
        <trans-unit id="dfc4ccc73713d6d0c21377e9d4eb82cf06cf9ec2" translate="yes" xml:space="preserve">
          <source>Line returns the line number for the given file position p; p must be a Pos value in that file or NoPos.</source>
          <target state="translated">Line は、指定されたファイル位置 p の行番号を返します。</target>
        </trans-unit>
        <trans-unit id="c80f69f5d4f28c6e33fd6610f08a1143f38de111" translate="yes" xml:space="preserve">
          <source>LineCount returns the number of lines in file f.</source>
          <target state="translated">LineCountは、ファイルfの行数を返します。</target>
        </trans-unit>
        <trans-unit id="8021239ce81a740af9d1126d1dcb955373ee8d6d" translate="yes" xml:space="preserve">
          <source>LineReader returns a new reader for the line table of compilation unit cu, which must be an Entry with tag TagCompileUnit.</source>
          <target state="translated">LineReaderは、コンパイルユニットcuの行テーブル用の新しいリーダを返します。</target>
        </trans-unit>
        <trans-unit id="d6e6998fd35451f00c85f965d2d22dc96e7bd958" translate="yes" xml:space="preserve">
          <source>LineStart returns the Pos value of the start of the specified line. It ignores any alternative positions set using AddLineColumnInfo. LineStart panics if the 1-based line number is invalid.</source>
          <target state="translated">LineStartは、指定された行の開始位置のPos値を返します。これは、AddLineColumnInfo を使用して設定された代替位置を無視します。LineStart は、1 ベースの行番号が無効な場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="4776e3cbe12ee14e372370ae9f2a2f5ec9999059" translate="yes" xml:space="preserve">
          <source>LineToPC looks up the first program counter on the given line in the named file. It returns UnknownPathError or UnknownLineError if there is an error looking up this line.</source>
          <target state="translated">LineToPC は、指定されたファイルの指定された行の最初のプログラムカウンタを検索します。この行の検索でエラーが発生した場合は、UnknownPathError または UnknownLineError を返します。</target>
        </trans-unit>
        <trans-unit id="e41c87878f5ec2dd68efcc90f4932d27c2b8d1c2" translate="yes" xml:space="preserve">
          <source>LineToPC returns the program counter for the given line number, considering only program counters before maxpc.</source>
          <target state="translated">LineToPC は、maxpc より前のプログラムカウンタのみを考慮して、指定された行番号のプログラムカウンタを返します。</target>
        </trans-unit>
        <trans-unit id="d3ece36672b155d5080f24d88b4ef4dc56af15c6" translate="yes" xml:space="preserve">
          <source>Link connects ring r with ring s such that r.Next() becomes s and returns the original value for r.Next(). r must not be empty.</source>
          <target state="translated">リンクは、r.Next()が s になり、r.Next()の元の値を返すように、リング r とリング s を接続します。</target>
        </trans-unit>
        <trans-unit id="61bc01a247b2210bb40d4dab78269bb633df6036" translate="yes" xml:space="preserve">
          <source>Link creates newname as a hard link to the oldname file. If there is an error, it will be of type *LinkError.</source>
          <target state="translated">リンクは、旧名ファイルへのハードリンクとしてnewnameを作成します。エラーが発生した場合、それは *LinkError 型になります。</target>
        </trans-unit>
        <trans-unit id="8c53bb40a220e2f4f66bfd2012a9dda9a12bc64f" translate="yes" xml:space="preserve">
          <source>LinkError records an error during a link or symlink or rename system call and the paths that caused it.</source>
          <target state="translated">LinkError は、リンク、シンボリックリンク、またはリネームシステムコール中のエラーと、その原因となったパスを記録します。</target>
        </trans-unit>
        <trans-unit id="2ca439921c0481dec50573fdcf5a08b538a5f2a3" translate="yes" xml:space="preserve">
          <source>List represents a doubly linked list. The zero value for List is an empty list ready to use.</source>
          <target state="translated">List は、二重リンクされたリストを表します。Listの0の値は、使用可能な空のリストです。</target>
        </trans-unit>
        <trans-unit id="ed96ea56ffbf3b559f9c41465dc17435379898fd" translate="yes" xml:space="preserve">
          <source>ListNode holds a sequence of nodes.</source>
          <target state="translated">ListNodeは、一連のノードを保持します。</target>
        </trans-unit>
        <trans-unit id="ca24c0263416d5489002e073f3f7f972b1a2c801" translate="yes" xml:space="preserve">
          <source>Listen announces on the local network address.</source>
          <target state="translated">ローカルネットワークアドレスのアナウンスを聞きます。</target>
        </trans-unit>
        <trans-unit id="fbc501a375c74f3f294816964a99702dd99275fe" translate="yes" xml:space="preserve">
          <source>Listen creates a TLS listener accepting connections on the given network address using net.Listen. The configuration config must be non-nil and must include at least one certificate or else set GetCertificate.</source>
          <target state="translated">Listen は net.Listen を使用して、指定されたネットワークアドレスからの接続を受け付ける TLS リスナーを作成します。設定はnilではなく、少なくとも1つの証明書を含まなければなりません。</target>
        </trans-unit>
        <trans-unit id="6c1bd8cd11c9c376470f7f547014d7596b4d2372" translate="yes" xml:space="preserve">
          <source>ListenAndServe</source>
          <target state="translated">ListenAndServe</target>
        </trans-unit>
        <trans-unit id="ca4b599f82e29135dc1efc68105574de3edf6ae1" translate="yes" xml:space="preserve">
          <source>ListenAndServe always returns a non-nil error.</source>
          <target state="translated">ListenAndServeは常に非nilのエラーを返します。</target>
        </trans-unit>
        <trans-unit id="5dd294a2ba295a8af34a90f46a25099808a8e7bb" translate="yes" xml:space="preserve">
          <source>ListenAndServe always returns a non-nil error. After Shutdown or Close, the returned error is ErrServerClosed.</source>
          <target state="translated">ListenAndServeは常に非nilのエラーを返します。シャットダウンまたはクローズの後、返されるエラーは ErrServerClosed です。</target>
        </trans-unit>
        <trans-unit id="0e017d6f66fb57e5159203491154acdfd7f3155e" translate="yes" xml:space="preserve">
          <source>ListenAndServe listens on the TCP network address addr and then calls Serve with handler to handle requests on incoming connections. Accepted connections are configured to enable TCP keep-alives.</source>
          <target state="translated">ListenAndServe は TCP ネットワークアドレスのアドレ スをリッスンしてから Serve をハンドラで呼び出し、着信接続のリクエストを処理します。受理された接続は、TCPキープアライブを有効にするように設定されています。</target>
        </trans-unit>
        <trans-unit id="1eb6871fd885bb71d1764b988ed8e0b1207dbd10" translate="yes" xml:space="preserve">
          <source>ListenAndServe listens on the TCP network address srv.Addr and then calls Serve to handle requests on incoming connections. Accepted connections are configured to enable TCP keep-alives.</source>
          <target state="translated">ListenAndServe は TCP ネットワークアドレス srv.Addr をリッスンしてから Serve を呼び出し、着信接続のリクエストを処理します。受理された接続はTCPキープアライブを有効にするように設定されています。</target>
        </trans-unit>
        <trans-unit id="f672409681724db7975a81f059dabf70eb0a6552" translate="yes" xml:space="preserve">
          <source>ListenAndServe starts an HTTP server with a given address and handler. The handler is usually nil, which means to use DefaultServeMux. Handle and HandleFunc add handlers to DefaultServeMux:</source>
          <target state="translated">ListenAndServe は、指定されたアドレスとハンドラで HTTP サーバを起動します。ハンドラは通常nilで、DefaultServeMuxを使用することを意味します。Handle と HandleFunc は DefaultServeMux にハンドラを追加します。</target>
        </trans-unit>
        <trans-unit id="b1444c4d4c91aea2ff2c287b0f4c6b6c33effbc6" translate="yes" xml:space="preserve">
          <source>ListenAndServeTLS</source>
          <target state="translated">ListenAndServeTLS</target>
        </trans-unit>
        <trans-unit id="4b13ffad776ec4c1e6e622baa48939390c7f43be" translate="yes" xml:space="preserve">
          <source>ListenAndServeTLS acts identically to ListenAndServe, except that it expects HTTPS connections. Additionally, files containing a certificate and matching private key for the server must be provided. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate.</source>
          <target state="translated">ListenAndServeTLS は ListenAndServe と同じように動作しますが、HTTPS 接続を期待します。さらに、サーバの証明書と一致する秘密鍵を含むファイルを提供しなければなりません。証明書が証明機関によって署名されている場合、certFile は、サーバの証明書、仲介者、および CA の証明書を連結したものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="e993bc61c7cd05bdd6aa504a7bf534f06ff70ebd" translate="yes" xml:space="preserve">
          <source>ListenAndServeTLS always returns a non-nil error. After Shutdown or Close, the returned error is ErrServerClosed.</source>
          <target state="translated">ListenAndServeTLS は常に非ゼロのエラーを返します。シャットダウンまたはクローズ後、返されるエラーは ErrServerClosed です。</target>
        </trans-unit>
        <trans-unit id="4de6956912052ccb175eeb5c4727583b8c87a58f" translate="yes" xml:space="preserve">
          <source>ListenAndServeTLS listens on the TCP network address srv.Addr and then calls ServeTLS to handle requests on incoming TLS connections. Accepted connections are configured to enable TCP keep-alives.</source>
          <target state="translated">ListenAndServeTLS は TCP ネットワークアドレス srv.Addr をリッスンしてから ServeTLS を呼び出し、着信 TLS 接続のリクエストを処理します。受理された接続は、TCPキープアライブを有効にするように設定されています。</target>
        </trans-unit>
        <trans-unit id="2ef32140a96f71533a922e8af1a4a1287b2aa08c" translate="yes" xml:space="preserve">
          <source>ListenConfig contains options for listening to an address.</source>
          <target state="translated">ListenConfig には、アドレスをリッスンするためのオプションが含まれています。</target>
        </trans-unit>
        <trans-unit id="56e637fe09ab78156ad9d4b14c696af0fcd5c313" translate="yes" xml:space="preserve">
          <source>ListenIP acts like ListenPacket for IP networks.</source>
          <target state="translated">ListenIPは、IPネットワーク用のListenPacketのように動作します。</target>
        </trans-unit>
        <trans-unit id="f21580354d675fc10d1e9ee1c4db6486064ec455" translate="yes" xml:space="preserve">
          <source>ListenMulticastUDP acts like ListenPacket for UDP networks but takes a group address on a specific network interface.</source>
          <target state="translated">ListenMulticastUDPは、UDPネットワーク用のListenPacketのように動作しますが、特定のネットワーク・インタフェース上のグループ・アドレスを取ります。</target>
        </trans-unit>
        <trans-unit id="867f2d87132f64efe5f8f6f86d2c98549b471fdb" translate="yes" xml:space="preserve">
          <source>ListenMulticastUDP is just for convenience of simple, small applications. There are golang.org/x/net/ipv4 and golang.org/x/net/ipv6 packages for general purpose uses.</source>
          <target state="translated">ListenMulticastUDPは、単純な、小さなアプリケーションの利便性のためだけです。golang.org/x/net/ipv4 と golang.org/x/net/ipv6 パッケージがあります。</target>
        </trans-unit>
        <trans-unit id="bd5f6e57a541e39939141511f957be405b380471" translate="yes" xml:space="preserve">
          <source>ListenMulticastUDP listens on all available IP addresses of the local system including the group, multicast IP address. If ifi is nil, ListenMulticastUDP uses the system-assigned multicast interface, although this is not recommended because the assignment depends on platforms and sometimes it might require routing configuration. If the Port field of gaddr is 0, a port number is automatically chosen.</source>
          <target state="translated">ListenMulticastUDPは、グループ、マルチキャストIPアドレスを含むローカルシステムの利用可能なすべてのIPアドレスをリッスンします。iiがnilの場合、ListenMulticastUDPはシステムに割り当てられたマルチキャストインターフェースを使用しますが、割り当てはプラットフォームに依存し、ルーティング設定が必要な場合もあるため、これは推奨されません。gaddr の Port フィールドが 0 の場合、ポート番号が自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="468da55aa49f2b551af4d2ec242f5d19018b56ca" translate="yes" xml:space="preserve">
          <source>ListenPacket announces on the local network address.</source>
          <target state="translated">ListenPacketは、ローカルネットワークのアドレスを発表します。</target>
        </trans-unit>
        <trans-unit id="df604088a8b978cdce196e569a7b165e976e6869" translate="yes" xml:space="preserve">
          <source>ListenTCP acts like Listen for TCP networks.</source>
          <target state="translated">ListenTCP は TCP ネットワークの Listen のように動作します。</target>
        </trans-unit>
        <trans-unit id="9851cfe87c5b9ef168f40038c7d75b3a82ee3529" translate="yes" xml:space="preserve">
          <source>ListenUDP acts like ListenPacket for UDP networks.</source>
          <target state="translated">ListenUDPは、UDPネットワークのためのListenPacketのように動作します。</target>
        </trans-unit>
        <trans-unit id="5b7757b4611e8ba6d66b663a1f48d50bfcf3ecc4" translate="yes" xml:space="preserve">
          <source>ListenUnix acts like Listen for Unix networks.</source>
          <target state="translated">ListenUnix は Listen for Unix ネットワークのように動作します。</target>
        </trans-unit>
        <trans-unit id="df0abb591dbf2fca4d32aeb087ddbb3eb5bf7905" translate="yes" xml:space="preserve">
          <source>ListenUnixgram acts like ListenPacket for Unix networks.</source>
          <target state="translated">ListenUnixgramは、UnixネットワークのためのListenPacketのように動作します。</target>
        </trans-unit>
        <trans-unit id="37ea46b5942beaeb21bb4e06a14e4f7232d2a1b0" translate="yes" xml:space="preserve">
          <source>Listener</source>
          <target state="translated">Listener</target>
        </trans-unit>
        <trans-unit id="0391fe0f913571d2818f72cca0ff528d31c4414b" translate="yes" xml:space="preserve">
          <source>LiteralPrefix returns a literal string that must begin any match of the regular expression re. It returns the boolean true if the literal string comprises the entire regular expression.</source>
          <target state="translated">LiteralPrefixは、正規表現reにマッチした場合には必ず開始しなければならないリテラル文字列を返します。</target>
        </trans-unit>
        <trans-unit id="ecdd85ee0de784370070e365d9f936724803e148" translate="yes" xml:space="preserve">
          <source>LittleEndian is the little-endian implementation of ByteOrder.</source>
          <target state="translated">LittleEndianはByteOrderのリトルエンディアン実装です。</target>
        </trans-unit>
        <trans-unit id="d5ae70e267716ec3e2a976b68757e30ee0e214a8" translate="yes" xml:space="preserve">
          <source>Load returns the value set by the most recent Store. It returns nil if there has been no call to Store for this Value.</source>
          <target state="translated">Load は、直近の Store で設定された値を返します。この値のためのStoreの呼び出しがなかった場合は、nilを返します。</target>
        </trans-unit>
        <trans-unit id="74c5a2d6710e8b201a98f6c2837198f613eec0fa" translate="yes" xml:space="preserve">
          <source>Load returns the value stored in the map for a key, or nil if no value is present. The ok result indicates whether value was found in the map.</source>
          <target state="translated">ロードは、キーに対してマップに保存されている値を返しますが、値が存在しない場合は nil を返します。ok 結果は、マップに値が見つかったかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="881052b1a20f63445e79814467ecdb5374883ab0" translate="yes" xml:space="preserve">
          <source>LoadInt32 atomically loads *addr.</source>
          <target state="translated">LoadInt32 アトミックに *addr をロードします。</target>
        </trans-unit>
        <trans-unit id="2ac3794cf69cbb4165a4ee85d8ea313e85610e69" translate="yes" xml:space="preserve">
          <source>LoadInt64 atomically loads *addr.</source>
          <target state="translated">LoadInt64 アトミックに *addr をロードします。</target>
        </trans-unit>
        <trans-unit id="3cd00c96c1dde37f4e165d9dd83f094e52c09c97" translate="yes" xml:space="preserve">
          <source>LoadLocation</source>
          <target state="translated">LoadLocation</target>
        </trans-unit>
        <trans-unit id="942c4e15f8861257bc29d285e307a9855ad8da88" translate="yes" xml:space="preserve">
          <source>LoadLocation returns the Location with the given name.</source>
          <target state="translated">LoadLocation は、指定した名前の Location を返します。</target>
        </trans-unit>
        <trans-unit id="452c7f6aa0b947a115cd7ebee668ccabc28767f6" translate="yes" xml:space="preserve">
          <source>LoadLocationFromTZData returns a Location with the given name initialized from the IANA Time Zone database-formatted data. The data should be in the format of a standard IANA time zone file (for example, the content of /etc/localtime on Unix systems).</source>
          <target state="translated">LoadLocationFromTZData は、IANA タイムゾーンデータベース形式のデータから、 指定した名前の Location を返します。データは、標準的なIANAタイムゾーンファイルの形式(例えば、Unixシステムでは/etc/localtimeの内容)でなければなりません。</target>
        </trans-unit>
        <trans-unit id="730b9fd8d031760ad2f11544687c7f3a4c32ba10" translate="yes" xml:space="preserve">
          <source>LoadOrStore returns the existing value for the key if present. Otherwise, it stores and returns the given value. The loaded result is true if the value was loaded, false if stored.</source>
          <target state="translated">LoadOrStore は、キーが存在する場合は、そのキーの既存の値を返します。それ以外の場合は、与えられた値を保存して返します。ロードされた結果は、値がロードされていれば真、保存されていれば偽となります。</target>
        </trans-unit>
        <trans-unit id="16e5531718ad0441ff996bffe1bdb2f9013072b8" translate="yes" xml:space="preserve">
          <source>LoadPointer atomically loads *addr.</source>
          <target state="translated">LoadPointer アトミックに *addr をロードします。</target>
        </trans-unit>
        <trans-unit id="3a58860dce2950635c9b0aec0356bd0e023fcd4b" translate="yes" xml:space="preserve">
          <source>LoadUint32 atomically loads *addr.</source>
          <target state="translated">LoadUint32 アトミックに *addr をロードします。</target>
        </trans-unit>
        <trans-unit id="ed4689d0f224e4c5a01ae1b69433a91e9f118b20" translate="yes" xml:space="preserve">
          <source>LoadUint64 atomically loads *addr.</source>
          <target state="translated">LoadUint64 アトミックに *addr をロードします。</target>
        </trans-unit>
        <trans-unit id="9cfbde985c4614b9808e9de0d65afb5568c9c53d" translate="yes" xml:space="preserve">
          <source>LoadUintptr atomically loads *addr.</source>
          <target state="translated">LoadUintptr は、アトミックに *addr をロードします。</target>
        </trans-unit>
        <trans-unit id="e85b79501e4b543de03554e2a29fd9cbd965ec40" translate="yes" xml:space="preserve">
          <source>LoadX509KeyPair</source>
          <target state="translated">LoadX509KeyPair</target>
        </trans-unit>
        <trans-unit id="45fae6424c26a4b8eb19ae242ef820e6061dab08" translate="yes" xml:space="preserve">
          <source>LoadX509KeyPair reads and parses a public/private key pair from a pair of files. The files must contain PEM encoded data. The certificate file may contain intermediate certificates following the leaf certificate to form a certificate chain. On successful return, Certificate.Leaf will be nil because the parsed form of the certificate is not retained.</source>
          <target state="translated">LoadX509KeyPair は、ファイルのペアから公開鍵/秘密鍵のペアを読み取り、解析します。ファイルには、PEM エンコードされたデータが含まれていなければなりません。証明書ファイルには、証明書チェーンを形成するために、リーフ証明書に続く中間証明書を含めることができます。返却に成功した場合、解析された証明書の形式は保持されないため、Certificate.Leaf は nil になります。</target>
        </trans-unit>
        <trans-unit id="1da25ed4d4f6ff8e68f5335ba8ba070399bd7f5f" translate="yes" xml:space="preserve">
          <source>Local represents the system's local time zone.</source>
          <target state="translated">Local はシステムのローカルタイムゾーンを表します。</target>
        </trans-unit>
        <trans-unit id="bd6d294473bbbfce0d1197b903b10c86fb6c3b7b" translate="yes" xml:space="preserve">
          <source>Local returns t with the location set to local time.</source>
          <target state="translated">Localは、ローカル時間に設定された位置を持つtを返します。</target>
        </trans-unit>
        <trans-unit id="4a5ab837cb8b234abbab484d911af5705d613e13" translate="yes" xml:space="preserve">
          <source>LocalAddr returns the local network address.</source>
          <target state="translated">LocalAddr は、ローカル・ネットワーク・アドレスを返します。</target>
        </trans-unit>
        <trans-unit id="c10eb870360e8baad53b9b506e944815aa5896df" translate="yes" xml:space="preserve">
          <source>LocalAddr returns the local network address. The Addr returned is shared by all invocations of LocalAddr, so do not modify it.</source>
          <target state="translated">LocalAddr は、ローカル・ネットワーク・アドレスを返します。返されたAddrは、LocalAddrのすべての呼び出しで共有されるので、変更しないでください。</target>
        </trans-unit>
        <trans-unit id="238b4cd4fe464f99416bb574ab9c5c6651970ad5" translate="yes" xml:space="preserve">
          <source>LocalhostCert is a PEM-encoded TLS cert with SAN IPs &quot;127.0.0.1&quot; and &quot;[::1]&quot;, expiring at Jan 29 16:00:00 2084 GMT. generated from src/crypto/tls: go run generate_cert.go --rsa-bits 1024 --host 127.0.0.1,::1,example.com --ca --start-date &quot;Jan 1 00:00:00 1970&quot; --duration=1000000h</source>
          <target state="translated">LocalhostCertはPEMでエンコードされたTLS証明書で、SAN IPは &quot;127.0.0.0.1 &quot;と&quot;[::1]&quot;で、有効期限は1月29日16:00:00:00 2084 GMTです。</target>
        </trans-unit>
        <trans-unit id="2852b827de5091ca5aa6958386fa1405befa6094" translate="yes" xml:space="preserve">
          <source>LocalhostKey is the private key for localhostCert.</source>
          <target state="translated">LocalhostKey は localhostCert の秘密鍵です。</target>
        </trans-unit>
        <trans-unit id="d219c68101f532de10add2cf42fb9dbeca73d3be" translate="yes" xml:space="preserve">
          <source>Location</source>
          <target state="translated">Location</target>
        </trans-unit>
        <trans-unit id="c9551a197b6ccbbe733e98e1afb44218648f365d" translate="yes" xml:space="preserve">
          <source>Location returns the URL of the response's &quot;Location&quot; header, if present. Relative redirects are resolved relative to the Response's Request. ErrNoLocation is returned if no Location header is present.</source>
          <target state="translated">Location は、レスポンスの &quot;Location&quot; ヘッダがあれば、その URL を返します。相対リダイレクトは、レスポンスのリクエストに対して相対的に解決されます。Location ヘッダが存在しない場合は、ErrNoLocation を返します。</target>
        </trans-unit>
        <trans-unit id="6b99376f9c15a7e92154da5850b5d13b41ab37cc" translate="yes" xml:space="preserve">
          <source>Location returns the time zone information associated with t.</source>
          <target state="translated">Locationは、tに関連付けられたタイムゾーン情報を返します。</target>
        </trans-unit>
        <trans-unit id="f30d8c256e2218530f9f115302f529d73fbbff9d" translate="yes" xml:space="preserve">
          <source>Lock locks m. If the lock is already in use, the calling goroutine blocks until the mutex is available.</source>
          <target state="translated">ロックロック m.ロックがすでに使用中の場合、ミューテックスが使用可能になるまで、呼び出し側のゴローチンはブロックします。</target>
        </trans-unit>
        <trans-unit id="c3a987424c4290a7edfb3d1d597eb0eadb3ba378" translate="yes" xml:space="preserve">
          <source>Lock locks rw for writing. If the lock is already locked for reading or writing, Lock blocks until the lock is available.</source>
          <target state="translated">書き込み用に rw をロックします。すでに読み込みまたは書き込み用にロックされている場合は、ロックが使用可能になるまでロックをブロックします。</target>
        </trans-unit>
        <trans-unit id="5e340916752857a7b67a505378d157d115c1dd5a" translate="yes" xml:space="preserve">
          <source>LockOSThread wires the calling goroutine to its current operating system thread. The calling goroutine will always execute in that thread, and no other goroutine will execute in it, until the calling goroutine has made as many calls to UnlockOSThread as to LockOSThread. If the calling goroutine exits without unlocking the thread, the thread will be terminated.</source>
          <target state="translated">LockOSThread は、呼び出し元のゴローチンを現在のオペレーティング・システム・スレッドに配線します。呼び出したゴローチンは常にそのスレッドで実行され、 呼び出したゴローチンがLockOSThreadと同じ数だけUnlockOSThreadを呼び出すまでは、 他のゴローチンはそのスレッドで実行されません。呼び出したゴローチンがスレッドのロックを解除せずに終了した場合、そのスレッドは終了します。</target>
        </trans-unit>
        <trans-unit id="8bf95ea372568c7a254ba9fada5f6f1701ebc5b5" translate="yes" xml:space="preserve">
          <source>Log</source>
          <target state="translated">Log</target>
        </trans-unit>
        <trans-unit id="fef609891d98d73a3ae686771d1e86e56fc90748" translate="yes" xml:space="preserve">
          <source>Log emits a one-off event with the given category and message. Category can be empty and the API assumes there are only a handful of unique categories in the system.</source>
          <target state="translated">ログは、与えられたカテゴリとメッセージを持つ1回限りのイベントを発行します。カテゴリは空にすることができ、APIはシステム内に一握りのユニークなカテゴリしか存在しないと想定しています。</target>
        </trans-unit>
        <trans-unit id="2353b4e8ade1606ef5c45cccd26ad3ad6087c78a" translate="yes" xml:space="preserve">
          <source>Log emits a timestamped message to the execution trace along with additional information such as the category of the message and which goroutine called Log. The execution tracer provides UIs to filter and group goroutines using the log category and the message supplied in Log.</source>
          <target state="translated">Logは、メッセージのカテゴリやどのゴローチンがLogを呼んだかなどの追加情報とともに、タイムスタンプ付きのメッセージを実行トレースに出力します。実行トレーサは、ログのカテゴリとLogで提供されるメッセージを使用して、ゴローチンをフィルタリングしたり、グループ化したりするためのUIを提供します。</target>
        </trans-unit>
        <trans-unit id="9821e0db1231d181423f2e3b3225f154baa6bcf6" translate="yes" xml:space="preserve">
          <source>Log formats its arguments using default formatting, analogous to Println, and records the text in the error log. For tests, the text will be printed only if the test fails or the -test.v flag is set. For benchmarks, the text is always printed to avoid having performance depend on the value of the -test.v flag.</source>
          <target state="translated">ログは、Printlnに似たデフォルトの書式設定を使用して引数をフォーマットし、エラーログにテキストを記録します。テストの場合、テストが失敗するか、-test.v フラグが設定されている場合にのみテキストが表示されます。ベンチマークの場合、パフォーマンスが-test.vフラグの値に依存するのを避けるために、テキストは常に表示されます。</target>
        </trans-unit>
        <trans-unit id="ad88d5c498edf7ea21028a5246446ba6a3bf9e4a" translate="yes" xml:space="preserve">
          <source>Log returns the natural logarithm of x.</source>
          <target state="translated">Logは、xの自然対数を返します。</target>
        </trans-unit>
        <trans-unit id="81d615cdf905d64451161a1aa0b68ae0ffb374e3" translate="yes" xml:space="preserve">
          <source>Log10</source>
          <target state="translated">Log10</target>
        </trans-unit>
        <trans-unit id="977a2b5c893e89719e9a7736a4e1f9cc525e8f11" translate="yes" xml:space="preserve">
          <source>Log10 returns the decimal logarithm of x.</source>
          <target state="translated">Log10は、xの10進対数を返します。</target>
        </trans-unit>
        <trans-unit id="8671c0c40d7db0093d8bf62e5f04cba5c99ec3ea" translate="yes" xml:space="preserve">
          <source>Log10 returns the decimal logarithm of x. The special cases are the same as for Log.</source>
          <target state="translated">Log10はxの10進対数を返します。</target>
        </trans-unit>
        <trans-unit id="a5b2fd4cb1a8e2bb305b5672e391aef89a37298c" translate="yes" xml:space="preserve">
          <source>Log1p returns the natural logarithm of 1 plus its argument x. It is more accurate than Log(1 + x) when x is near zero.</source>
          <target state="translated">Log1pは1の自然対数に引数xを加えたものを返します。</target>
        </trans-unit>
        <trans-unit id="6687db9bf747c384bcc8d36417e42b952196b766" translate="yes" xml:space="preserve">
          <source>Log2</source>
          <target state="translated">Log2</target>
        </trans-unit>
        <trans-unit id="7a0389c8675757d7572efc0a10b125d5c66b151f" translate="yes" xml:space="preserve">
          <source>Log2 returns the binary logarithm of x. The special cases are the same as for Log.</source>
          <target state="translated">Log2はxの2進対数を返します。</target>
        </trans-unit>
        <trans-unit id="5963a7c64c0149e44b174ff76b7f701d23bc3074" translate="yes" xml:space="preserve">
          <source>Logb returns the binary exponent of x.</source>
          <target state="translated">Logbはxの2進指数を返します。</target>
        </trans-unit>
        <trans-unit id="ea0c4052b7cdd5aadd9cd6f72174db65e462d77d" translate="yes" xml:space="preserve">
          <source>Logf formats its arguments according to the format, analogous to Printf, and records the text in the error log. A final newline is added if not provided. For tests, the text will be printed only if the test fails or the -test.v flag is set. For benchmarks, the text is always printed to avoid having performance depend on the value of the -test.v flag.</source>
          <target state="translated">Logfはその引数をPrintfに類似したフォーマットに従ってフォーマットし、エラーログにテキストを記録します。省略された場合は最後の改行が追加されます。テストの場合、テストが失敗した場合や -test.v フラグが設定されている場合にのみテキストが表示されます。ベンチマークでは、パフォーマンスが-test.vフラグの値に依存することを避けるために、テキストは常に表示されます。</target>
        </trans-unit>
        <trans-unit id="38de20acad3e04f48129d8399f6a41e7517acf40" translate="yes" xml:space="preserve">
          <source>Logf is like Log, but the value is formatted using the specified format spec.</source>
          <target state="translated">LogfはLogと似ていますが、値は指定されたフォーマット仕様でフォーマットされています。</target>
        </trans-unit>
        <trans-unit id="8432c24573f3f89fad60802fe8eddf1da6315768" translate="yes" xml:space="preserve">
          <source>Logger</source>
          <target state="translated">Logger</target>
        </trans-unit>
        <trans-unit id="71c466638d24f772f0edc78440c6db3a9b5a9e5d" translate="yes" xml:space="preserve">
          <source>Logger.Output</source>
          <target state="translated">Logger.Output</target>
        </trans-unit>
        <trans-unit id="00aa9c00206cc40c149f1a777f6bcbff0a6df954" translate="yes" xml:space="preserve">
          <source>Longest makes future searches prefer the leftmost-longest match. That is, when matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses a match that is as long as possible. This method modifies the Regexp and may not be called concurrently with any other methods.</source>
          <target state="translated">Longest を指定すると、将来の検索では左端から最長のマッチが優先されます。つまり、テキストに対してマッチする場合、 regexp は入力の中で可能な限り早く始まるマッチ (左端)を返し、その中から可能な限り長いマッチを選択します。このメソッドは Regexp を変更し、他のメソッドと同時に呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="2397e2af778033b693f99aeecb7590b807be4783" translate="yes" xml:space="preserve">
          <source>LookPath</source>
          <target state="translated">LookPath</target>
        </trans-unit>
        <trans-unit id="3feb8389b758c68212533dd8278b352dcce121bf" translate="yes" xml:space="preserve">
          <source>LookPath searches for an executable named file in the directories named by the PATH environment variable. If file contains a slash, it is tried directly and the PATH is not consulted. The result may be an absolute path or a path relative to the current directory.</source>
          <target state="translated">LookPathは、環境変数PATHで指定されたディレクトリ内の実行ファイル名を検索します。ファイルにスラッシュが含まれている場合、それは直接試行され、PATHは参照されません。結果は絶対パスか、カレントディレクトリからの相対パスになります。</target>
        </trans-unit>
        <trans-unit id="31ab9ed47ac6872e6361cf76170e61fbc5a37449" translate="yes" xml:space="preserve">
          <source>Lookup looks up a user by username. If the user cannot be found, the returned error is of type UnknownUserError.</source>
          <target state="translated">Lookup は、ユーザ名でユーザを検索します。ユーザーが見つからない場合、返されるエラーは UnknownUserError 型です。</target>
        </trans-unit>
        <trans-unit id="2c6f1e000a822d2c47b6a21ebdd8f5f93b104795" translate="yes" xml:space="preserve">
          <source>Lookup maps an identifier to its keyword token or IDENT (if not a keyword).</source>
          <target state="translated">ルックアップは、識別子をそのキーワードトークンまたは IDENT (キーワードでない場合)にマップします。</target>
        </trans-unit>
        <trans-unit id="e9251196227d6115352b68461b921cf61a906b43" translate="yes" xml:space="preserve">
          <source>Lookup returns an unsorted list of at most n indices where the byte string s occurs in the indexed data. If n &amp;lt; 0, all occurrences are returned. The result is nil if s is empty, s is not found, or n == 0. Lookup time is O(log(N)*len(s) + len(result)) where N is the size of the indexed data.</source>
          <target state="translated">Lookupは、インデックス付けされたデータにバイト文字列sが出現する、最大n個のインデックスのソートされていないリストを返します。n &amp;lt;0の場合、すべてのオカレンスが返されます。sが空、sが見つからない、またはn == 0の場合、結果はnilです。ルックアップ時間はO（log（N）* len（s）+ len（result））です。ここで、Nはインデックス付きデータのサイズです。</target>
        </trans-unit>
        <trans-unit id="13380eb03660f02dbd5d025d2b74f6f24450d311" translate="yes" xml:space="preserve">
          <source>Lookup returns the Flag structure of the named command-line flag, returning nil if none exists.</source>
          <target state="translated">Lookupは、指定されたコマンドラインフラグのフラグ構造体を返し、存在しない場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="7e5483b0c984c3a57ec759db6fb278e7b255ecf8" translate="yes" xml:space="preserve">
          <source>Lookup returns the Flag structure of the named flag, returning nil if none exists.</source>
          <target state="translated">ルックアップは、指定されたフラグのフラグ構造体を返し、存在しない場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="5b0f26aebf1133c7a9f5776675b02659900d5a6f" translate="yes" xml:space="preserve">
          <source>Lookup returns the method with matching package and name, or nil if not found.</source>
          <target state="translated">Lookup は、パッケージと名前が一致するメソッドを返します。</target>
        </trans-unit>
        <trans-unit id="903dddeee2a83198e7d326397e76f54d9c716c8e" translate="yes" xml:space="preserve">
          <source>Lookup returns the object in scope s with the given name if such an object exists; otherwise the result is nil.</source>
          <target state="translated">Lookup は、指定された名前のオブジェクトがスコープ s に存在する場合には、そのオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="103697c251b3570afaab5577775dc041e648c7f1" translate="yes" xml:space="preserve">
          <source>Lookup returns the object with the given name if it is found in scope s, otherwise it returns nil. Outer scopes are ignored.</source>
          <target state="translated">Lookup は、指定された名前のオブジェクトがスコープ s で見つかった場合にはそのオブジェクトを返し、そうでない場合は nil を返します。外側のスコープは無視されます。</target>
        </trans-unit>
        <trans-unit id="85596012a102f4cba55be912c69d163f2b6f529c" translate="yes" xml:space="preserve">
          <source>Lookup returns the profile with the given name, or nil if no such profile exists.</source>
          <target state="translated">検索は、指定された名前のプロファイルを返します。</target>
        </trans-unit>
        <trans-unit id="38285e372c5ecf7fee79e8f5475a7ad611b07ce7" translate="yes" xml:space="preserve">
          <source>Lookup returns the template with the given name that is associated with t, or nil if there is no such template.</source>
          <target state="translated">ルックアップは、tに関連付けられた指定された名前のテンプレートを返します。</target>
        </trans-unit>
        <trans-unit id="b619549e7b11c0494158ea2b89e4d841aca101b2" translate="yes" xml:space="preserve">
          <source>Lookup returns the template with the given name that is associated with t. It returns nil if there is no such template or the template has no definition.</source>
          <target state="translated">Lookupは、tに関連付けられた指定された名前のテンプレートを返します。</target>
        </trans-unit>
        <trans-unit id="c7a19da9ed723c89b3a482cb521b80e66fbdef7d" translate="yes" xml:space="preserve">
          <source>Lookup returns the value associated with key in the tag string. If the key is present in the tag the value (which may be empty) is returned. Otherwise the returned value will be the empty string. The ok return value reports whether the value was explicitly set in the tag string. If the tag does not have the conventional format, the value returned by Lookup is unspecified.</source>
          <target state="translated">ルックアップは、タグ文字列のキーに関連付けられた値を返します。タグ内にキーが存在する場合は、値(空の場合もあります)が返されます。そうでない場合は、空の文字列が返されます。ok戻り値は、値がタグ文字列に明示的に設定されているかどうかを報告します。タグが従来のフォーマットを持っていない場合、Lookupによって返される値は未指定です。</target>
        </trans-unit>
        <trans-unit id="b1ca47c6e14b4100767398ad08b18ceba8715515" translate="yes" xml:space="preserve">
          <source>Lookup searches for a symbol named symName in plugin p. A symbol is any exported variable or function. It reports an error if the symbol is not found. It is safe for concurrent use by multiple goroutines.</source>
          <target state="translated">シンボルは、エクスポートされた変数や関数です。シンボルが見つからない場合はエラーを報告します。これは、複数のゴロチンによる同時使用には安全です。</target>
        </trans-unit>
        <trans-unit id="99f5d988af7e6ab773a1a6146dd567b1c079995f" translate="yes" xml:space="preserve">
          <source>LookupAddr performs a reverse lookup for the given address, returning a list of names mapping to that address.</source>
          <target state="translated">LookupAddr は、指定されたアドレスの逆引きを実行し、そのアドレスにマッピングされた名前のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c70e79ec87ca49562ea197d9f2381d9321d8fe1b" translate="yes" xml:space="preserve">
          <source>LookupCNAME returns the canonical name for the given host. Callers that do not care about the canonical name can call LookupHost or LookupIP directly; both take care of resolving the canonical name as part of the lookup.</source>
          <target state="translated">LookupCNAMEは、指定されたホストの正式名称を返します。正規表現名を気にしない呼び出し元はLookupHostかLookupIPを直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="8f4cf5e540b2d7dc315df0e1c1d62f60bab0e907" translate="yes" xml:space="preserve">
          <source>LookupEnv</source>
          <target state="translated">LookupEnv</target>
        </trans-unit>
        <trans-unit id="1ae2ee5065be9305542647e69dc65b9fd29b64fe" translate="yes" xml:space="preserve">
          <source>LookupEnv retrieves the value of the environment variable named by the key. If the variable is present in the environment the value (which may be empty) is returned and the boolean is true. Otherwise the returned value will be empty and the boolean will be false.</source>
          <target state="translated">LookupEnvは、キーで指定された環境変数の値を取得します。その変数が環境に存在する場合、値(空かもしれません)が返され、ブール値はtrueになります。そうでなければ、返された値は空で、ブーリアンはFalseになります。</target>
        </trans-unit>
        <trans-unit id="450e346d69b1c045fb4f52550736ebb0d1d8a4f8" translate="yes" xml:space="preserve">
          <source>LookupFieldOrMethod looks up a field or method with given package and name in T and returns the corresponding *Var or *Func, an index sequence, and a bool indicating if there were any pointer indirections on the path to the field or method. If addressable is set, T is the type of an addressable variable (only matters for method lookups).</source>
          <target state="translated">LookupFieldOrMethod は、与えられたパッケージと名前を持つフィールドまたはメソッドを T で検索し、対応する *Var または *Func、インデックス・シーケンス、フィールドまたはメソッドへのパス上にポインタ間接があったかどうかを示す bool を返します。addressableが設定されている場合、Tはアドレス指定可能な変数の型です(メソッドのルックアップの場合のみ重要です)。</target>
        </trans-unit>
        <trans-unit id="9411c991fe6ec6318c1ddadaf5239d4c8ddf419e" translate="yes" xml:space="preserve">
          <source>LookupFunc returns the text, data, or bss symbol with the given name, or nil if no such symbol is found.</source>
          <target state="translated">LookupFunc は、指定された名前のテキスト、データ、または bss シンボルを返し、そのようなシンボルが見つからない場合は nil を返す。</target>
        </trans-unit>
        <trans-unit id="b92e9ccf5cc37f1e202dab80af7fdd5adb2d4fdf" translate="yes" xml:space="preserve">
          <source>LookupGroup looks up a group by name. If the group cannot be found, the returned error is of type UnknownGroupError.</source>
          <target state="translated">LookupGroupは名前でグループを検索します。グループが見つからない場合、返されるエラーは UnknownGroupError 型です。</target>
        </trans-unit>
        <trans-unit id="864ecbbe82138c5e60336462e2e26b9cc0321aa1" translate="yes" xml:space="preserve">
          <source>LookupGroupId looks up a group by groupid. If the group cannot be found, the returned error is of type UnknownGroupIdError.</source>
          <target state="translated">LookupGroupIdはgroupidでグループを検索します。グループが見つからない場合、返されるエラーは UnknownGroupIdError 型です。</target>
        </trans-unit>
        <trans-unit id="b9002491d44dda33fcc5ee2b368b90bad48de6db" translate="yes" xml:space="preserve">
          <source>LookupHost looks up the given host using the local resolver. It returns a slice of that host's addresses.</source>
          <target state="translated">LookupHostは、ローカルリゾルバを使用して指定されたホストを検索します。そのホストのアドレスのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="e9702748a7f19b9de210233c47deec534e3b2cf2" translate="yes" xml:space="preserve">
          <source>LookupIP looks up host using the local resolver. It returns a slice of that host's IPv4 and IPv6 addresses.</source>
          <target state="translated">LookupIPはローカルリゾルバを使用してホストを検索します。これは、そのホストのIPv4およびIPv6アドレスのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="f974c6e0590936cd53144b751f0c8c53e1e56f97" translate="yes" xml:space="preserve">
          <source>LookupIPAddr looks up host using the local resolver. It returns a slice of that host's IPv4 and IPv6 addresses.</source>
          <target state="translated">LookupIPAddrはローカルリゾルバを使用してホストを検索します。これは、そのホストのIPv4およびIPv6アドレスのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="39cfba6c5476e7337eb21e14ebf7cf0d6e5bedc2" translate="yes" xml:space="preserve">
          <source>LookupId looks up a user by userid. If the user cannot be found, the returned error is of type UnknownUserIdError.</source>
          <target state="translated">LookupIdは、useridでユーザーを検索します。ユーザーが見つからなかった場合、返されるエラーは UnknownUserIdError 型です。</target>
        </trans-unit>
        <trans-unit id="fa6df437374a8db7470645bbe9d4e27c81caaaeb" translate="yes" xml:space="preserve">
          <source>LookupMX returns the DNS MX records for the given domain name sorted by preference.</source>
          <target state="translated">LookupMXは、指定されたドメイン名のDNS MXレコードを優先順位でソートして返します。</target>
        </trans-unit>
        <trans-unit id="eb321dee8209258e986d88d75de6022a02c641f4" translate="yes" xml:space="preserve">
          <source>LookupNS returns the DNS NS records for the given domain name.</source>
          <target state="translated">LookupNSは、指定されたドメイン名のDNS NSレコードを返します。</target>
        </trans-unit>
        <trans-unit id="74ae49fce9af1a0aa1c34cc08bb2eaff3e2f9136" translate="yes" xml:space="preserve">
          <source>LookupParent follows the parent chain of scopes starting with s until it finds a scope where Lookup(name) returns a non-nil object, and then returns that scope and object. If a valid position pos is provided, only objects that were declared at or before pos are considered. If no such scope and object exists, the result is (nil, nil).</source>
          <target state="translated">LookupParent は s で始まるスコープの親の連鎖を辿り、Lookup(name)が非 null のオブジェクトを返すスコープを見つけるまで、そのスコープとオブジェクトを返します。有効な位置 pos が提供されている場合は、pos 以前に宣言されたオブジェクトのみが考慮されます。そのようなスコープとオブジェクトが存在しない場合は、結果は (nil,nil)となります。</target>
        </trans-unit>
        <trans-unit id="0730b69dbfb75d19ecc78b2277aae489ac068a4f" translate="yes" xml:space="preserve">
          <source>LookupPort looks up the port for the given network and service.</source>
          <target state="translated">LookupPort は、指定されたネットワークとサービスのポートを検索します。</target>
        </trans-unit>
        <trans-unit id="f0a5a2c68645491f7f14b8ebf958dd03393284be" translate="yes" xml:space="preserve">
          <source>LookupSRV constructs the DNS name to look up following RFC 2782. That is, it looks up _service._proto.name. To accommodate services publishing SRV records under non-standard names, if both service and proto are empty strings, LookupSRV looks up name directly.</source>
          <target state="translated">LookupSRVは、RFC2782に従って検索するDNS名を構築する。つまり、_service._proto.name を検索します。非標準名でSRVレコードを公開しているサービスに対応するため、 serviceとprotoの両方が空文字列の場合、LookupSRVは直接名前を検索します。</target>
        </trans-unit>
        <trans-unit id="6b37c6078d739a1c536ea751e03fbdc7bcfb4fd9" translate="yes" xml:space="preserve">
          <source>LookupSRV tries to resolve an SRV query of the given service, protocol, and domain name. The proto is &quot;tcp&quot; or &quot;udp&quot;. The returned records are sorted by priority and randomized by weight within a priority.</source>
          <target state="translated">LookupSRVは、指定されたサービス、プロトコル、ドメイン名のSRVクエリを解決しようとします。プロトコルは &quot;tcp &quot;または &quot;udp &quot;です。返されたレコードは優先度でソートされ、優先度の範囲内で重みでランダム化されます。</target>
        </trans-unit>
        <trans-unit id="53adeca568bb0a57f84e1f9d5ebd3b79ee2295f0" translate="yes" xml:space="preserve">
          <source>LookupSym returns the text, data, or bss symbol with the given name, or nil if no such symbol is found.</source>
          <target state="translated">LookupSym は、指定された名前のテキスト、データ、または bss シンボルを返します。</target>
        </trans-unit>
        <trans-unit id="e3ed61b0b0e3039a19a182ecd64a64ecece699f9" translate="yes" xml:space="preserve">
          <source>LookupTXT returns the DNS TXT records for the given domain name.</source>
          <target state="translated">LookupTXTは、指定されたドメイン名のDNS TXTレコードを返します。</target>
        </trans-unit>
        <trans-unit id="be0fd93650565eb4e261e38483006a0a6e96ae35" translate="yes" xml:space="preserve">
          <source>Lsh sets z = x &amp;lt;&amp;lt; n and returns z.</source>
          <target state="translated">Lshはz = x &amp;lt;&amp;lt; nを設定し、zを返します。</target>
        </trans-unit>
        <trans-unit id="8432c7185b33f226f3a96e2aaaeb0017fbd79a53" translate="yes" xml:space="preserve">
          <source>Lstat returns a FileInfo describing the named file. If the file is a symbolic link, the returned FileInfo describes the symbolic link. Lstat makes no attempt to follow the link. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Lstatは、指定したファイルを記述したFileInfoを返します。ファイルがシンボリックリンクである場合、返されるFileInfoはシンボリックリンクを記述します。Lstatはリンクを辿ろうとはしません。エラーが発生した場合は、*PathError型となります。</target>
        </trans-unit>
        <trans-unit id="653b7ad5571eb02f2761c383b0762a05ad1e21e9" translate="yes" xml:space="preserve">
          <source>M is a type passed to a TestMain function to run the actual tests.</source>
          <target state="translated">Mは実際のテストを実行するTestMain関数に渡される型です。</target>
        </trans-unit>
        <trans-unit id="6c4afe9957321d9f90932c8eebed2802a4ac1436" translate="yes" xml:space="preserve">
          <source>MD5 is cryptographically broken and should not be used for secure applications.</source>
          <target state="translated">MD5は暗号化されていないので、安全なアプリケーションには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="2c0f2626fcfbcf6f5cc06f45f9a06123950573c9" translate="yes" xml:space="preserve">
          <source>Machine is found in Header.Machine.</source>
          <target state="translated">MachineはHeader.Machineにあります。</target>
        </trans-unit>
        <trans-unit id="abd1aeb6203ae00a3b2e20d1890fa31ee8357446" translate="yes" xml:space="preserve">
          <source>Magic number for the elf trampoline, chosen wisely to be an immediate value.</source>
          <target state="translated">即値で賢く選んだエルフトランポリンの魔法数。</target>
        </trans-unit>
        <trans-unit id="d30cb76631db62a976ef3584c436e5f44c54006c" translate="yes" xml:space="preserve">
          <source>Mail issues a MAIL command to the server using the provided email address. If the server supports the 8BITMIME extension, Mail adds the BODY=8BITMIME parameter. This initiates a mail transaction and is followed by one or more Rcpt calls.</source>
          <target state="translated">メールは、指定されたメールアドレスを使用してサーバにMAILコマンドを発行します。サーバが8BITMIME拡張をサポートしている場合、MailはBODY=8BITMIMEパラメータを追加します。これによりメールトランザクションが開始され、1つ以上のRcptコールが続きます。</target>
        </trans-unit>
        <trans-unit id="62bce9422ff2d14f69ab80a154510232fc8a9afd" translate="yes" xml:space="preserve">
          <source>Main</source>
          <target state="translated">Main</target>
        </trans-unit>
        <trans-unit id="0784ed59d6aa6164d650ee5788e4f48c9ab53ccb" translate="yes" xml:space="preserve">
          <source>Main is an internal function, part of the implementation of the &quot;go test&quot; command. It was exported because it is cross-package and predates &quot;internal&quot; packages. It is no longer used by &quot;go test&quot; but preserved, as much as possible, for other systems that simulate &quot;go test&quot; using Main, but Main sometimes cannot be updated as new functionality is added to the testing package. Systems simulating &quot;go test&quot; should be updated to use MainStart.</source>
          <target state="translated">Mainは内部関数で、&quot;go test &quot;コマンドの実装の一部です。これはクロスパッケージであり、&quot;内部 &quot;パッケージよりも前のものであるため、エクスポートされました。これは、もはや &quot;go test &quot;では使用されませんが、Mainを使用して &quot;go test &quot;をシミュレートする他のシステムのために、可能な限り保存されていますが、新しい機能がテストパッケージに追加されると、Mainを更新できないことがあります。go test」をシミュレートするシステムは、MainStartを使用するように更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4948070b9137e3c4295247505827d161a1430c0" translate="yes" xml:space="preserve">
          <source>MainStart is meant for use by tests generated by 'go test'. It is not meant to be called directly and is not subject to the Go 1 compatibility document. It may change signature from release to release.</source>
          <target state="translated">MainStart は 'go test' で生成されたテストで使用するためのものです。直接呼び出されることは意図されておらず、Go 1互換性ドキュメントの対象にはなりません。リリースごとに署名が変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="76f0e763aa0460d3ebdb6819d8a8618bd610502c" translate="yes" xml:space="preserve">
          <source>Make returns the Value for x.</source>
          <target state="translated">Make は x の値を返します。</target>
        </trans-unit>
        <trans-unit id="d212d37a7f555035543edd9847aa0f8944d00dd6" translate="yes" xml:space="preserve">
          <source>MakeBool returns the Bool value for b.</source>
          <target state="translated">MakeBoolはbのBool値を返します。</target>
        </trans-unit>
        <trans-unit id="1bde4b612786d9c5dc71f0124e7f5aff783bd040" translate="yes" xml:space="preserve">
          <source>MakeChan creates a new channel with the specified type and buffer size.</source>
          <target state="translated">MakeChan は、指定されたタイプとバッファサイズで新しいチャンネルを作成します。</target>
        </trans-unit>
        <trans-unit id="8499a9ac9172e4fd5f8c155f860005e583c8290f" translate="yes" xml:space="preserve">
          <source>MakeFloat64 returns the Float value for x. If x is not finite, the result is an Unknown.</source>
          <target state="translated">MakeFloat64 は x の Float 値を返します。 x が有限でない場合、結果は Unknown となります。</target>
        </trans-unit>
        <trans-unit id="080b5a4b73c758656574c66abecfca2800793e12" translate="yes" xml:space="preserve">
          <source>MakeFromBytes returns the Int value given the bytes of its little-endian binary representation. An empty byte slice argument represents 0.</source>
          <target state="translated">MakeFromBytes は、リトルエンディアンのバイナリ表現のバイトを指定して Int 値を返します。空のバイトスライス引数は 0 を表します。</target>
        </trans-unit>
        <trans-unit id="04110b4029f3d51d7f1b1e32dfd59973aae981d8" translate="yes" xml:space="preserve">
          <source>MakeFromLiteral returns the corresponding integer, floating-point, imaginary, character, or string value for a Go literal string. The tok value must be one of token.INT, token.FLOAT, token.IMAG, token.CHAR, or token.STRING. The final argument must be zero. If the literal string syntax is invalid, the result is an Unknown.</source>
          <target state="translated">MakeFromLiteral は、Go リテラル文字列に対応する整数、浮動小数点、虚数、文字、または文字列の値を返します。token.INT、token.FLOAT、token.IMAG、token.CHAR、またはtoken.STRINGのいずれかの値を指定する必要があります。最後の引数はゼロでなければなりません。リテラル文字列の構文が無効な場合、結果はUnknownとなります。</target>
        </trans-unit>
        <trans-unit id="07a7a52634a41aa9116fcfbf959be30745aab340" translate="yes" xml:space="preserve">
          <source>MakeFunc</source>
          <target state="translated">MakeFunc</target>
        </trans-unit>
        <trans-unit id="643c1268f2628745bb74a74c0b6210fc3a37b52e" translate="yes" xml:space="preserve">
          <source>MakeFunc returns a new function of the given Type that wraps the function fn. When called, that new function does the following:</source>
          <target state="translated">MakeFuncは、関数fnをラップした、指定されたTypeの新しい関数を返します。呼び出されると、その新しい関数は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e91507405a52b25c3084428772c7fd9dd85d29bc" translate="yes" xml:space="preserve">
          <source>MakeImag returns the Complex value x*i; x must be Int, Float, or Unknown. If x is Unknown, the result is Unknown.</source>
          <target state="translated">MakeImag は複素数値 x*i を返します。xがUnknownの場合、結果はUnknownとなります。</target>
        </trans-unit>
        <trans-unit id="da6ba30b4b9d9da1cda2bb8d92f1cb545785138a" translate="yes" xml:space="preserve">
          <source>MakeInt64 returns the Int value for x.</source>
          <target state="translated">MakeInt64 は x の Int 値を返します。</target>
        </trans-unit>
        <trans-unit id="f32c29a01762bfefeedc6eb9373c057117a43683" translate="yes" xml:space="preserve">
          <source>MakeMap creates a new map with the specified type.</source>
          <target state="translated">MakeMap は、指定されたタイプの新しいマップを作成します。</target>
        </trans-unit>
        <trans-unit id="f52a4bb4c4b8bb40c53081e9faafbd87a3b197bc" translate="yes" xml:space="preserve">
          <source>MakeMapWithSize creates a new map with the specified type and initial space for approximately n elements.</source>
          <target state="translated">MakeMapWithSize は、指定された型と、約 n 個の要素の初期空間を持つ新しいマップを作成します。</target>
        </trans-unit>
        <trans-unit id="55769617e91451b5769c2caeaf264e53ded13fa6" translate="yes" xml:space="preserve">
          <source>MakeSlice creates a new zero-initialized slice value for the specified slice type, length, and capacity.</source>
          <target state="translated">MakeSlice は、指定されたスライス タイプ、長さ、および容量に対して、初期化されていない新しいスライス値を作成します。</target>
        </trans-unit>
        <trans-unit id="fbaf52cf63ee748130cb04d59e9e62d4763220eb" translate="yes" xml:space="preserve">
          <source>MakeString returns the String value for s.</source>
          <target state="translated">MakeString は、s の String 値を返します。</target>
        </trans-unit>
        <trans-unit id="5e3fa6d0673feb64d51f64ca41937f6da75eff62" translate="yes" xml:space="preserve">
          <source>MakeTable</source>
          <target state="translated">MakeTable</target>
        </trans-unit>
        <trans-unit id="785bab6ccfcc81c98865184a96f5abfea960b9ee" translate="yes" xml:space="preserve">
          <source>MakeTable returns a Table constructed from the specified polynomial. The contents of this Table must not be modified.</source>
          <target state="translated">MakeTableは、指定された多項式から構築されたテーブルを返します。このテーブルの内容は変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="9a7cf77039092ac36f999962d307dd473ba79848" translate="yes" xml:space="preserve">
          <source>MakeUint64 returns the Int value for x.</source>
          <target state="translated">MakeUint64 は x の Int 値を返します。</target>
        </trans-unit>
        <trans-unit id="e3694e34668330687dd83b2555828d28784d9456" translate="yes" xml:space="preserve">
          <source>MakeUnknown returns the Unknown value.</source>
          <target state="translated">MakeUnknown は Unknown の値を返します。</target>
        </trans-unit>
        <trans-unit id="fc2df9e4256f3cab4d6220a72b883983cc586bc1" translate="yes" xml:space="preserve">
          <source>MantExp breaks x into its mantissa and exponent components and returns the exponent. If a non-nil mant argument is provided its value is set to the mantissa of x, with the same precision and rounding mode as x. The components satisfy x == mant &amp;times; 2**exp, with 0.5 &amp;lt;= |mant| &amp;lt; 1.0. Calling MantExp with a nil argument is an efficient way to get the exponent of the receiver.</source>
          <target state="translated">MantExpは、xを仮数コンポーネントと指数コンポーネントに分解し、指数を返します。nil以外の引数を指定すると、その値はxの仮数に設定され、xと同じ精度と丸めモードになります。コンポーネントはx == mant&amp;times;2 ** expを満たし、0.5 &amp;lt;= | mant | &amp;lt;1.0。nil引数を指定してMantExpを呼び出すと、レシーバーの指数を効率的に取得できます。</target>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="053e42c081459c8a8812cfba3b82d0d77adea8da" translate="yes" xml:space="preserve">
          <source>Map is a string-to-Var map variable that satisfies the Var interface.</source>
          <target state="translated">MapはVarインターフェースを満たす文字列対Varマップ変数です。</target>
        </trans-unit>
        <trans-unit id="f35fa30552bf86b6a97457f5a529f46b1ec4ac90" translate="yes" xml:space="preserve">
          <source>Map is like a Go map[interface{}]interface{} but is safe for concurrent use by multiple goroutines without additional locking or coordination. Loads, stores, and deletes run in amortized constant time.</source>
          <target state="translated">マップはGo map[interface{}]interface{}のようなものですが、追加のロックや調整を必要とせず、複数のgoroutineによる同時使用にも安全です。ロード、ストア、削除は償却された一定時間で実行されます。</target>
        </trans-unit>
        <trans-unit id="a55357ddaf2509ac1bf72db741f5c0cb32477d6c" translate="yes" xml:space="preserve">
          <source>Map returns a copy of the byte slice s with all its characters modified according to the mapping function. If mapping returns a negative value, the character is dropped from the byte slice with no replacement. The characters in s and the output are interpreted as UTF-8-encoded code points.</source>
          <target state="translated">Map は、マッピング関数に従ってすべての文字が変更されたバイトスライス s のコピーを返します。マッピングが負の値を返す場合、その文字は置換されずにバイトスライスから削除されます。s の文字と出力は、UTF-8 でエンコードされたコードポイントとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="0c9f196c46a54d96a050fd1d4b324297d8b6bbfd" translate="yes" xml:space="preserve">
          <source>Map returns a copy of the string s with all its characters modified according to the mapping function. If mapping returns a negative value, the character is dropped from the string with no replacement.</source>
          <target state="translated">Map は、マッピング関数に従ってすべての文字が変更された文字列 s のコピーを返します。マッピングが負の値を返した場合、その文字は置換されずに文字列から削除されます。</target>
        </trans-unit>
        <trans-unit id="4153ac6503fd2f26b78b101383b87a23ab8757a1" translate="yes" xml:space="preserve">
          <source>Map values are deeply equal when all of the following are true: they are both nil or both non-nil, they have the same length, and either they are the same map object or their corresponding keys (matched using Go equality) map to deeply equal values.</source>
          <target state="translated">マップ値は、次のすべてが真である場合に深く等しくなります。両方とも nil または両方とも non-nil であること、同じ長さであること、同じマップオブジェクトであること、または対応するキー (Go equality を使用してマッチされた)が深く等しくなるようにマップされていること。</target>
        </trans-unit>
        <trans-unit id="ff4de2d02636ff0b35d7ac62c39c77c38ada9f83" translate="yes" xml:space="preserve">
          <source>Map values encode as JSON objects. The map's key type must either be a string, an integer type, or implement encoding.TextMarshaler. The map keys are sorted and used as JSON object keys by applying the following rules, subject to the UTF-8 coercion described for string values above:</source>
          <target state="translated">マップ値は JSON オブジェクトとしてエンコードされます。マップのキー型は、文字列、整数型、または encoding.TextMarshaler を実装する必要があります。マップのキーは、上記の文字列値について説明した UTF-8 強制を条件に、以下のルールを適用して並べ替えられ、JSON オブジェクトのキーとして使用されます。</target>
        </trans-unit>
        <trans-unit id="b746be79a80992b182da84fae71887f2ec6be3ae" translate="yes" xml:space="preserve">
          <source>MapIndex returns the value associated with key in the map v. It panics if v's Kind is not Map. It returns the zero Value if key is not found in the map or if v represents a nil map. As in Go, the key's value must be assignable to the map's key type.</source>
          <target state="translated">MapIndex は、マップ v のキーに関連付けられた値を返します。マップ内にキーが見つからない場合、または v がゼロのマップを表す場合は、ゼロの値を返します。Go の場合と同様に、キーの値はマップのキー タイプに代入可能である必要があります。</target>
        </trans-unit>
        <trans-unit id="8a8f96c2a60281e18fdf86af937035c625b23750" translate="yes" xml:space="preserve">
          <source>MapKeys returns a slice containing all the keys present in the map, in unspecified order. It panics if v's Kind is not Map. It returns an empty slice if v represents a nil map.</source>
          <target state="translated">MapKeys は、マップ内に存在するすべてのキーを含むスライスを、指定されていない順序で返します。v のカインドが Map でない場合はパニックになります。v が nil マップを表す場合は空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="393371509edfbb2648f262a9e6f9034fb677acf3" translate="yes" xml:space="preserve">
          <source>MapOf returns the map type with the given key and element types. For example, if k represents int and e represents string, MapOf(k, e) represents map[int]string.</source>
          <target state="translated">MapOf は、指定されたキーと要素の型を持つマップ型を返します。例えば、kがint、eが文字列を表す場合、MapOf(k,e)はmap[int]stringを表します。</target>
        </trans-unit>
        <trans-unit id="d868be238acb64c17c8f70f0fad5dbca2528fe1a" translate="yes" xml:space="preserve">
          <source>MapRange returns a range iterator for a map. It panics if v's Kind is not Map.</source>
          <target state="translated">MapRangeは、マップの範囲イテレータを返します。vのKindがMapでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="61f910b08995efdd96acb55eeb3536149a9ef35f" translate="yes" xml:space="preserve">
          <source>Mapping between XML elements and data structures is inherently flawed: an XML element is an order-dependent collection of anonymous values, while a data structure is an order-independent collection of named values. See package json for a textual representation more suitable to data structures.</source>
          <target state="translated">XML要素とデータ構造の間のマッピングは本質的に欠陥があります:XML要素は順序に依存した無名の値の集合ですが、データ構造は順序に依存しない名前付きの値の集合です。データ構造により適したテキスト表現については json パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="2b32ea0b0909e5260b55a58bd4f84f53b5d1ee01" translate="yes" xml:space="preserve">
          <source>Maps are sent as an unsigned count followed by that many key, element pairs. Empty but non-nil maps are sent, so if the receiver has not allocated one already, one will always be allocated on receipt unless the transmitted map is nil and not at the top level.</source>
          <target state="translated">マップは、その数だけのキーと要素のペアに続く符号なしのカウントとして送信されます。空ではあるが非 nil のマップが送信されるので、受信者がまだマップを割り当てていない場合は、送信されたマップが nil でトップレベルでない限り、受信時に常に 1 つが割り当てられます。</target>
        </trans-unit>
        <trans-unit id="ea8cf739cc820968d208878224615030de7ce782" translate="yes" xml:space="preserve">
          <source>MarkComplete marks a package as complete.</source>
          <target state="translated">MarkComplete は、パッケージを完全なものとしてマークします。</target>
        </trans-unit>
        <trans-unit id="9cdfbcba7d735bd862886d7bc92cdad6e808e063" translate="yes" xml:space="preserve">
          <source>Marshal</source>
          <target state="translated">Marshal</target>
        </trans-unit>
        <trans-unit id="eb880bd9042393d95106d6336ca91dc7587c2469" translate="yes" xml:space="preserve">
          <source>Marshal converts a point into the uncompressed form specified in section 4.3.6 of ANSI X9.62.</source>
          <target state="translated">マーシャルは、ポイントをANSI X9.62の4.3.6節で規定されている非圧縮形式に変換します。</target>
        </trans-unit>
        <trans-unit id="9dcb1e980e770758d048cdbf31965108d4392cbe" translate="yes" xml:space="preserve">
          <source>Marshal handles an array or slice by marshaling each of the elements. Marshal handles a pointer by marshaling the value it points at or, if the pointer is nil, by writing nothing. Marshal handles an interface value by marshaling the value it contains or, if the interface value is nil, by writing nothing. Marshal handles all other data by writing one or more XML elements containing the data.</source>
          <target state="translated">マーシャルは、各要素をマーシャル化することで配列やスライスを処理します。マーシャルは、ポインタが指す値をマーシャル化するか、ポインタが nil の場合は何も書き込まないことでポインタを扱います。マーシャルは、それが含む値をマーシャル化することでインターフェイス値を処理します。マーシャルは、データを含む 1 つ以上の XML 要素を書き込むことで、他のすべてのデータを処理します。</target>
        </trans-unit>
        <trans-unit id="62270c3791161d9e12b821a2dd5a09da76b7d939" translate="yes" xml:space="preserve">
          <source>Marshal returns the ASN.1 encoding of val.</source>
          <target state="translated">マーシャルは val の ASN.1 エンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="d0688338eb6d31b2244e733d8a38556baae70f6c" translate="yes" xml:space="preserve">
          <source>Marshal returns the JSON encoding of v.</source>
          <target state="translated">Marshal は v.の JSON エンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="fd91d49c812b62dbf02b368713f03ffdd50b3ad6" translate="yes" xml:space="preserve">
          <source>Marshal returns the XML encoding of v.</source>
          <target state="translated">Marshal は v の XML エンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="0de0f4cea1e586ddc2b14ecaaa41c4020891c164" translate="yes" xml:space="preserve">
          <source>Marshal traverses the value v recursively. If an encountered value implements the Marshaler interface and is not a nil pointer, Marshal calls its MarshalJSON method to produce JSON. If no MarshalJSON method is present but the value implements encoding.TextMarshaler instead, Marshal calls its MarshalText method and encodes the result as a JSON string. The nil pointer exception is not strictly necessary but mimics a similar, necessary exception in the behavior of UnmarshalJSON.</source>
          <target state="translated">Marshal は値 v を再帰的に巡回します。遭遇した値が Marshaler インターフェースを実装しており、nil ポインタでない場合、Marshal はその MarshalJSON メソッドを呼び出して JSON を生成します。MarshalJSON メソッドが存在せず、値が encoding.TextMarshaler を実装している場合、Marshal は MarshalText メソッドを呼び出し、結果を JSON 文字列としてエンコードします。ニルポインタ例外は厳密には必要ではありませんが、UnmarshalJSONの動作にある同様の必要な例外を模倣しています。</target>
        </trans-unit>
        <trans-unit id="fafaa1ebf620f3798cc6a8c58b669a7ea73fa6b9" translate="yes" xml:space="preserve">
          <source>Marshal will return an error if asked to marshal a channel, function, or map.</source>
          <target state="translated">チャネル、関数、またはマップのマーシャルを要求された場合、マーシャルはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="db453e34c5fbd8220b129af743f7150483dd7932" translate="yes" xml:space="preserve">
          <source>MarshalBinary encodes the receiver into a binary form and returns the result.</source>
          <target state="translated">MarshalBinary は、受信機をバイナリ形式にエンコードして結果を返します。</target>
        </trans-unit>
        <trans-unit id="0bedf8f876a84577084ab2b16cacfd3254f063b2" translate="yes" xml:space="preserve">
          <source>MarshalBinary implements the encoding.BinaryMarshaler interface.</source>
          <target state="translated">MarshalBinary は encoding.BinaryMarshaler インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="ee53c721c287cd02dbf9f92c9f5e2a991f1f615d" translate="yes" xml:space="preserve">
          <source>MarshalECPrivateKey converts an EC private key to SEC 1, ASN.1 DER form.</source>
          <target state="translated">MarshalECPrivateKeyは、EC秘密鍵をSEC 1、ASN.1 DER形式に変換します。</target>
        </trans-unit>
        <trans-unit id="f9e73b7909d7a048a7d6c9e44a0504b100446e17" translate="yes" xml:space="preserve">
          <source>MarshalIndent</source>
          <target state="translated">MarshalIndent</target>
        </trans-unit>
        <trans-unit id="42cea4e6f776e84fbd92d4a9f5ef1c3b218c54ea" translate="yes" xml:space="preserve">
          <source>MarshalIndent is like Marshal but applies Indent to format the output. Each JSON element in the output will begin on a new line beginning with prefix followed by one or more copies of indent according to the indentation nesting.</source>
          <target state="translated">MarshalIndentはMarshalと似ていますが、出力をフォーマットするためにIndentを適用します。出力の各JSON要素は、プレフィックスで始まる新しい行から始まり、インデントの入れ子に応じて1つ以上のインデントのコピーが続きます。</target>
        </trans-unit>
        <trans-unit id="b93c5c2e6a3ce1b1ffab83edfd3027b2f5a958ee" translate="yes" xml:space="preserve">
          <source>MarshalIndent works like Marshal, but each XML element begins on a new indented line that starts with prefix and is followed by one or more copies of indent according to the nesting depth.</source>
          <target state="translated">MarshalIndentはMarshalと同じように動作しますが、各XML要素は接頭辞で始まる新しいインデント行から始まり、入れ子の深さに応じて1つ以上のインデントのコピーが続きます。</target>
        </trans-unit>
        <trans-unit id="1fe8186b542a0c93fd906dfbf1d378366d66b83e" translate="yes" xml:space="preserve">
          <source>MarshalJSON implements the json.Marshaler interface.</source>
          <target state="translated">MarshalJSONはjson.Marshalerインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="34cafb57f3bf4f148de8715aea906ddd24ca5b67" translate="yes" xml:space="preserve">
          <source>MarshalJSON implements the json.Marshaler interface. The time is a quoted string in RFC 3339 format, with sub-second precision added if present.</source>
          <target state="translated">MarshalJSONはjson.Marshalerインターフェースを実装しています。時刻はRFC3339形式の引用符付き文字列で、サブ秒の精度があれば追加されます。</target>
        </trans-unit>
        <trans-unit id="79739908efedb1d030bbc1bed7fc419173d502bc" translate="yes" xml:space="preserve">
          <source>MarshalJSON returns m as the JSON encoding of m.</source>
          <target state="translated">MarshalJSONは、mのJSONエンコーディングとしてmを返します。</target>
        </trans-unit>
        <trans-unit id="49c4c53b126d5e728f2103ee05aeb8456df06352" translate="yes" xml:space="preserve">
          <source>MarshalPKCS1PrivateKey converts an RSA private key to PKCS#1, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS1PrivateKey は RSA 秘密鍵を PKCS#1,ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="6dbb4afc98d66ecc773730ab53b2d3d25670dae3" translate="yes" xml:space="preserve">
          <source>MarshalPKCS1PublicKey converts an RSA public key to PKCS#1, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS1PublicKey は RSA 公開鍵を PKCS#1,ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="de5c14e75241b3422cb105f3219299fa62dfe8b0" translate="yes" xml:space="preserve">
          <source>MarshalPKCS8PrivateKey converts an RSA private key to PKCS#8, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS8PrivateKey は RSA 秘密鍵を PKCS#8、ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="7c79ebdd42b60d7be91053c9a1161ea6d5ebbab9" translate="yes" xml:space="preserve">
          <source>MarshalPKIXPublicKey converts a public key to PKIX, ASN.1 DER form.</source>
          <target state="translated">MarshalPKIXPublicKey は公開鍵を PKIX、ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="def0005fff87679bf808d28ec17c1164d884c779" translate="yes" xml:space="preserve">
          <source>MarshalText encodes the receiver into UTF-8-encoded text and returns the result.</source>
          <target state="translated">MarshalText は、受信機を UTF-8 でエンコードされたテキストにエンコードし、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="0e6ec969b789b52d1c5120ea85c9ad182259f168" translate="yes" xml:space="preserve">
          <source>MarshalText implements the encoding.TextMarshaler interface.</source>
          <target state="translated">MarshalText は encoding.TextMarshaler インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="e9f45c26a4b805caf1ff0c7f133453fe1405ea6f" translate="yes" xml:space="preserve">
          <source>MarshalText implements the encoding.TextMarshaler interface. Only the Float value is marshaled (in full precision), other attributes such as precision or accuracy are ignored.</source>
          <target state="translated">MarshalText は encoding.TextMarshaler インターフェースを実装しています。Float 値のみが (完全な精度で)マーシャリングされ、精度や精度などの他の属性は無視されます。</target>
        </trans-unit>
        <trans-unit id="1fbe6f2d906b1d5948fbd9851ef463bba4786bcb" translate="yes" xml:space="preserve">
          <source>MarshalText implements the encoding.TextMarshaler interface. The encoding is the same as returned by String, with one exception: When len(ip) is zero, it returns an empty slice.</source>
          <target state="translated">MarshalText は encoding.TextMarshaler インターフェースを実装しています。エンコーディングは String が返すものと同じですが、1つの例外があります。len(ip)がゼロの場合、空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="83f43718a3654277944df9768c5af959f91ebe45" translate="yes" xml:space="preserve">
          <source>MarshalText implements the encoding.TextMarshaler interface. The time is formatted in RFC 3339 format, with sub-second precision added if present.</source>
          <target state="translated">MarshalText は encoding.TextMarshaler インターフェースを実装しています。時刻は RFC 3339 フォーマットでフォーマットされており、もしあればサブセコンドの精度が追加されます。</target>
        </trans-unit>
        <trans-unit id="14fcaccd265e76bda57404dd966d33311a65ffc3" translate="yes" xml:space="preserve">
          <source>MarshalWithParams allows field parameters to be specified for the top-level element. The form of the params is the same as the field tags.</source>
          <target state="translated">MarshalWithParams は、トップレベル要素に対してフィールドパラメータを指定することができます。パラメータの形式はフィールドタグと同じです。</target>
        </trans-unit>
        <trans-unit id="34052c5ea18ea7495e24eea4a4d137cecba4872c" translate="yes" xml:space="preserve">
          <source>MarshalXML encodes the receiver as zero or more XML elements. By convention, arrays or slices are typically encoded as a sequence of elements, one per entry. Using start as the element tag is not required, but doing so will enable Unmarshal to match the XML elements to the correct struct field. One common implementation strategy is to construct a separate value with a layout corresponding to the desired XML and then to encode it using e.EncodeElement. Another common strategy is to use repeated calls to e.EncodeToken to generate the XML output one token at a time. The sequence of encoded tokens must make up zero or more valid XML elements.</source>
          <target state="translated">MarshalXML は、受信機を 0 個以上の XML 要素としてエンコードします。慣例では、配列やスライスは通常、1 エントリあたり 1 つの要素のシーケンスとしてエンコードされます。要素タグとして start を使用することは必須ではありませんが、そうすることで Unmarshal は XML 要素を正しい構造体フィールドにマッチさせることができます。一般的な実装方法の一つは、目的のXMLに対応するレイアウトを持つ別の値を構築し、それをe.EncodeElementを使用してエンコードすることです。もう一つの一般的な実装方法は、e.EncodeTokenの繰り返し呼び出しを使用して、XML出力を一度に一つのトークンずつ生成することです。エンコードされたトークンのシーケンスは、0個以上の有効なXML要素を構成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="41210996386655a5e9f720c4f9e735ef866f35cb" translate="yes" xml:space="preserve">
          <source>MarshalXMLAttr returns an XML attribute with the encoded value of the receiver. Using name as the attribute name is not required, but doing so will enable Unmarshal to match the attribute to the correct struct field. If MarshalXMLAttr returns the zero attribute Attr{}, no attribute will be generated in the output. MarshalXMLAttr is used only for struct fields with the &quot;attr&quot; option in the field tag.</source>
          <target state="translated">MarshalXMLAttr は、受信機のエンコードされた値を持つ XML 属性を返します。属性名として name を使用することは必須ではありませんが、そうすることで Unmarshal がその属性を正しい構造体フィールドにマッチさせることが可能になります。MarshalXMLAttr がゼロ属性 Attr{}を返す場合、出力には属性は生成されません。MarshalXMLAttr は、フィールドタグに &quot;attr&quot; オプションを持つ構造体フィールドにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="18fd048394e569d8195a81313b9e64f2eba7ee35" translate="yes" xml:space="preserve">
          <source>Marshaler is the interface implemented by objects that can marshal themselves into valid XML elements.</source>
          <target state="translated">マーシャラーは、自分自身を有効なXML要素にマーシャリングすることができるオブジェクトによって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="47a2664e5f80a08312afe3946a74993c99143c6d" translate="yes" xml:space="preserve">
          <source>Marshaler is the interface implemented by types that can marshal themselves into valid JSON.</source>
          <target state="translated">マーシャラーは、自分自身を有効なJSONにマーシャリングすることができる型によって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="4a00ca7b38dd0506417989c16c2542f21f4d7c58" translate="yes" xml:space="preserve">
          <source>MarshalerAttr is the interface implemented by objects that can marshal themselves into valid XML attributes.</source>
          <target state="translated">MarshalerAttrは、自分自身を有効なXML属性にマーシャリングすることができるオブジェクトによって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="5c61140e5006502f101ce6ee77324538231946bb" translate="yes" xml:space="preserve">
          <source>Mask returns the result of masking the IP address ip with mask.</source>
          <target state="translated">Maskは、IPアドレスのipをmaskでマスクした結果を返します。</target>
        </trans-unit>
        <trans-unit id="0335207f5e840d81afa158c6c2bb6e3fa02653b4" translate="yes" xml:space="preserve">
          <source>Match</source>
          <target state="translated">Match</target>
        </trans-unit>
        <trans-unit id="b841b8491dab0dabb8feb21367e059b0624fa3bb" translate="yes" xml:space="preserve">
          <source>Match reports whether name matches the shell file name pattern. The pattern syntax is:</source>
          <target state="translated">Match は、名前がシェルファイル名のパターンと一致するかどうかを報告します。パターンの構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="65238f3fd69244258d0fe7834a55d41fd9fdb4b5" translate="yes" xml:space="preserve">
          <source>Match reports whether name matches the shell pattern. The pattern syntax is:</source>
          <target state="translated">Match は、名前がシェルパターンと一致するかどうかを報告します。パターンの構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5f5677ee8a35a029aa3e90c1d56b65878192d3b4" translate="yes" xml:space="preserve">
          <source>Match reports whether the byte slice b contains any match of the regular expression pattern. More complicated queries need to use Compile and the full Regexp interface.</source>
          <target state="translated">Matchは、バイトスライスbが正規表現パターンにマッチするものを含んでいるかどうかを報告します。より複雑なクエリは、コンパイルと完全な Regexp インターフェイスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="269393d413e09f2ec5ba2e6fbdd662834a23a90b" translate="yes" xml:space="preserve">
          <source>Match reports whether the byte slice b contains any match of the regular expression re.</source>
          <target state="translated">Match は、バイトスライス b に正規表現 re のマッチが含まれているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="188538220b1d59de0ef20f48b5e9a854e7a08bec" translate="yes" xml:space="preserve">
          <source>Match requires pattern to match all of name, not just a substring. The only possible returned error is ErrBadPattern, when pattern is malformed.</source>
          <target state="translated">Match は、部分文字列だけでなく name のすべてにマッチするようにパターンを要求します。返される可能性のあるエラーは、パターンが不正な場合にErrBadPatternのみです。</target>
        </trans-unit>
        <trans-unit id="fb78f24b3584ab26ff8d868ae02c24bc3e7a84f8" translate="yes" xml:space="preserve">
          <source>MatchEmptyWidth reports whether the instruction matches an empty string between the runes before and after. It should only be called when i.Op == InstEmptyWidth.</source>
          <target state="translated">MatchEmptyWidthは、命令が前後のルーンの間の空の文字列にマッチするかどうかを報告します。これは、i.Op ==InstEmptyWidthの時にのみ呼び出されるべきです。</target>
        </trans-unit>
        <trans-unit id="766801810391656eb72b30e1a620adc09dc91643" translate="yes" xml:space="preserve">
          <source>MatchFile considers the name of the file and may use ctxt.OpenFile to read some or all of the file's content.</source>
          <target state="translated">MatchFileはファイル名を考慮し、ctxt.OpenFileを使用してファイルの内容の一部または全部を読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="32f23226c3beda09b3f84dfe037d9c9ada013d83" translate="yes" xml:space="preserve">
          <source>MatchFile reports whether the file with the given name in the given directory matches the context and would be included in a Package created by ImportDir of that directory.</source>
          <target state="translated">MatchFileは、指定されたディレクトリ内の指定された名前のファイルがコンテキストにマッチし、そのディレクトリのImportDirによって作成されたパッケージに含まれるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="230e93d3f899e27c4d81d89f3ff53b1eca08bb37" translate="yes" xml:space="preserve">
          <source>MatchReader reports whether the text returned by the RuneReader contains any match of the regular expression pattern. More complicated queries need to use Compile and the full Regexp interface.</source>
          <target state="translated">MatchReader は、RuneReader によって返されたテキストに正規表現パターンと一致するものが含まれているかどうかを報告します。より複雑なクエリは、コンパイルと完全な Regexp インターフェイスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="25c8a8e56012833544924619010cf5721432e9ab" translate="yes" xml:space="preserve">
          <source>MatchReader reports whether the text returned by the RuneReader contains any match of the regular expression re.</source>
          <target state="translated">MatchReader は、RuneReader が返すテキストに正規表現 re のマッチが含まれているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="da28fa625630bc6b02e3ddab6dad208f72cd40bb" translate="yes" xml:space="preserve">
          <source>MatchRune reports whether the instruction matches (and consumes) r. It should only be called when i.Op == InstRune.</source>
          <target state="translated">MatchRune は、命令が r にマッチしているかどうかを報告します (および消費しているかどうかを報告します)。</target>
        </trans-unit>
        <trans-unit id="c488501e6169e99f4e3f5cf4b601fce5b1d18d9c" translate="yes" xml:space="preserve">
          <source>MatchRunePos checks whether the instruction matches (and consumes) r. If so, MatchRunePos returns the index of the matching rune pair (or, when len(i.Rune) == 1, rune singleton). If not, MatchRunePos returns -1. MatchRunePos should only be called when i.Op == InstRune.</source>
          <target state="translated">MatchRunePos は、命令が r にマッチしている (および消費している)かどうかをチェックします。マッチしている場合は、マッチしているルーンペアのインデックスを返します (または len(i.Rune)==1 の場合はルーンシングルトン)。そうでない場合、MatchRunePos は -1 を返します。MatchRunePosは、i.Op ==InstRuneの場合にのみ呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="c78293f6444063ae02b61b422c861a74ea5c0992" translate="yes" xml:space="preserve">
          <source>MatchString</source>
          <target state="translated">MatchString</target>
        </trans-unit>
        <trans-unit id="16440a205b6632a6f9ce394e96f4e30da62834e6" translate="yes" xml:space="preserve">
          <source>MatchString reports whether the string s contains any match of the regular expression pattern. More complicated queries need to use Compile and the full Regexp interface.</source>
          <target state="translated">MatchString は、文字列 s が正規表現パターンにマッチするものを含んでいるかどうかを報告します。より複雑なクエリは、Compile と完全な Regexp インターフェイスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0b53f246428ae463a3e54d71ff6883543bf5e6b2" translate="yes" xml:space="preserve">
          <source>MatchString reports whether the string s contains any match of the regular expression re.</source>
          <target state="translated">MatchString は、文字列 s が正規表現 re にマッチするものを含むかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="386301aac4b9205f957c7e2aded15dd3a3170a4d" translate="yes" xml:space="preserve">
          <source>Mathematical constants.</source>
          <target state="translated">数学的な定数。</target>
        </trans-unit>
        <trans-unit id="e9339d8c2f10a09643bf33b4b293ddbf19fb634d" translate="yes" xml:space="preserve">
          <source>Mathematical interval notation such as [0, n) is used throughout the documentation for this package.</source>
          <target state="translated">このパッケージのドキュメントでは、[0,n]のような数学的な区間表記が使用されています。</target>
        </trans-unit>
        <trans-unit id="b64028b7ef9651f5e0c9bf08d57c40c964fb143d" translate="yes" xml:space="preserve">
          <source>Max returns the larger of x or y.</source>
          <target state="translated">Maxは、xとyのどちらか大きい方を返します。</target>
        </trans-unit>
        <trans-unit id="6c955f951ae2dab8e6f5e54e3a98c7139c879b48" translate="yes" xml:space="preserve">
          <source>MaxBase is the largest number base accepted for string conversions.</source>
          <target state="translated">MaxBaseは、文字列変換に受け入れられる最大の数値ベースです。</target>
        </trans-unit>
        <trans-unit id="d9d067026e10599a63c5386be336904174743560" translate="yes" xml:space="preserve">
          <source>MaxBytesReader is similar to io.LimitReader but is intended for limiting the size of incoming request bodies. In contrast to io.LimitReader, MaxBytesReader's result is a ReadCloser, returns a non-EOF error for a Read beyond the limit, and closes the underlying reader when its Close method is called.</source>
          <target state="translated">MaxBytesReader は io.LimitReader に似ていますが、受信するリクエストボディのサイズを制限することを目的としています。io.LimitReader とは対照的に、MaxBytesReader の結果は ReadCloser であり、制限を超えて読み込まれた場合は非EOF エラーを返し、Close メソッドが呼ばれた場合には基礎となるリーダーを閉じます。</target>
        </trans-unit>
        <trans-unit id="739ec125397a0373ef46f377effdf6be903c6fd8" translate="yes" xml:space="preserve">
          <source>MaxBytesReader prevents clients from accidentally or maliciously sending a large request and wasting server resources.</source>
          <target state="translated">MaxBytesReader は、クライアントが誤ってまたは悪意を持って大規模なリクエストを送信し、サーバー リソースを無駄にすることを防ぎます。</target>
        </trans-unit>
        <trans-unit id="61be69d33fec3be907f4ea6e04af100d85f7675e" translate="yes" xml:space="preserve">
          <source>MaxCap walks the regexp to find the maximum capture index.</source>
          <target state="translated">MaxCapは、最大のキャプチャインデックスを見つけるために正規表現を歩きます。</target>
        </trans-unit>
        <trans-unit id="df7b72cdcf2650790c955b9e993a0a0c2fbe25b4" translate="yes" xml:space="preserve">
          <source>MaxEncodedLen returns the maximum length of an encoding of n source bytes.</source>
          <target state="translated">MaxEncodedLen は、n 個のソースバイトのエンコーディングの最大長を返します。</target>
        </trans-unit>
        <trans-unit id="89c65689a7af2cc891fbeafce261f8df625c4303" translate="yes" xml:space="preserve">
          <source>MaxVarintLenN is the maximum length of a varint-encoded N-bit integer.</source>
          <target state="translated">MaxVarintLenN は、バリントエンコードされた N ビット整数の最大長です。</target>
        </trans-unit>
        <trans-unit id="1157d0585a10f5f650da7952c06f96ac83134419" translate="yes" xml:space="preserve">
          <source>MemProfile returns a profile of memory allocated and freed per allocation site.</source>
          <target state="translated">MemProfileは、割り当てサイトごとに割り当てられたメモリと解放されたメモリのプロファイルを返します。</target>
        </trans-unit>
        <trans-unit id="d8d6b923c77de71210013c81589eaf2c4fe10654" translate="yes" xml:space="preserve">
          <source>MemProfile returns n, the number of records in the current memory profile. If len(p) &amp;gt;= n, MemProfile copies the profile into p and returns n, true. If len(p) &amp;lt; n, MemProfile does not change p and returns n, false.</source>
          <target state="translated">MemProfileは、現在のメモリプロファイルのレコード数であるnを返します。len（p）&amp;gt; = nの場合、MemProfileはプロファイルをpにコピーし、n、trueを返します。len（p）&amp;lt;nの場合、MemProfileはpを変更せず、n、falseを返します。</target>
        </trans-unit>
        <trans-unit id="c013eb0f98db13dab8418c5c8a82f2ae00733c42" translate="yes" xml:space="preserve">
          <source>MemProfileRate controls the fraction of memory allocations that are recorded and reported in the memory profile. The profiler aims to sample an average of one allocation per MemProfileRate bytes allocated.</source>
          <target state="translated">MemProfileRate は、メモリプロファイルに記録され、報告されるメモリ割り当ての割合を制御します。プロファイラは、割り当てられたMemProfileRateバイトごとに平均して1つの割り当てをサンプリングすることを目指しています。</target>
        </trans-unit>
        <trans-unit id="e7ca02f761fad2cef95bf22ec3a49a7a10d4d7ec" translate="yes" xml:space="preserve">
          <source>MemString returns r.AllocedBytesPerOp and r.AllocsPerOp in the same format as 'go test'.</source>
          <target state="translated">MemStringは、'go test'と同じ形式でr.AllocedBytesPerOpとr.AllocsPerOpを返します。</target>
        </trans-unit>
        <trans-unit id="5885c324e2b06a6d3881d7dca39a2a9515c8b84e" translate="yes" xml:space="preserve">
          <source>MergeLine merges a line with the following line. It is akin to replacing the newline character at the end of the line with a space (to not change the remaining offsets). To obtain the line number, consult e.g. Position.Line. MergeLine will panic if given an invalid line number.</source>
          <target state="translated">MergeLine は、行を次の行にマージします。これは、行末の改行文字をスペースに置き換えるのと似ています(残りのオフセットを変更しないため)。行番号を取得するには、例えば Position.Line を参照してください。MergeLine は無効な行番号が与えられるとパニックになります。</target>
        </trans-unit>
        <trans-unit id="c56ee5f274246d4907a3f8792aa47b70201e2839" translate="yes" xml:space="preserve">
          <source>MergePackageFiles creates a file AST by merging the ASTs of the files belonging to a package. The mode flags control merging behavior.</source>
          <target state="translated">MergePackageFilesは、パッケージに属するファイルのASTをマージしてファイルASTを生成します。モードフラグはマージの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="7f6f0438a1b28dd75bfa1675a817c685d6ecf309" translate="yes" xml:space="preserve">
          <source>Method represents a single method.</source>
          <target state="translated">メソッドは1つのメソッドを表しています。</target>
        </trans-unit>
        <trans-unit id="d5cc6ded0a12c1ea7e555fe80a4dd907a9326b65" translate="yes" xml:space="preserve">
          <source>Method returns a function value corresponding to v's i'th method. The arguments to a Call on the returned function should not include a receiver; the returned function will always use v as the receiver. Method panics if i is out of range or if v is a nil interface value.</source>
          <target state="translated">メソッドは v の i 番目のメソッドに対応する関数値を返します。返された関数の Call への引数にはレシーバーを含めてはいけません。メソッドは、i が範囲外の場合、または v が nil のインターフェイス値の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="8580bc7cf729ccd2e220561b0a2aa0093af75313" translate="yes" xml:space="preserve">
          <source>Method returns the i'th method of interface t for 0 &amp;lt;= i &amp;lt; t.NumMethods(). The methods are ordered by their unique Id.</source>
          <target state="translated">Methodは、0 &amp;lt;= i &amp;lt;t.NumMethods（）に対して、インターフェースtのi番目のメソッドを返します。メソッドは、固有のIDで並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="0d5919064169d4fa2dfa670c5cd1d31fe4f5ec77" translate="yes" xml:space="preserve">
          <source>Method returns the i'th method of named type t for 0 &amp;lt;= i &amp;lt; t.NumMethods().</source>
          <target state="translated">メソッドは、名前付きタイプtのi番目のメソッドを0 &amp;lt;= i &amp;lt;t.NumMethods（）に対して返します。</target>
        </trans-unit>
        <trans-unit id="7b406879ef1e276f5ac32d320c19bb15ff9ced44" translate="yes" xml:space="preserve">
          <source>MethodByName returns a function value corresponding to the method of v with the given name. The arguments to a Call on the returned function should not include a receiver; the returned function will always use v as the receiver. It returns the zero Value if no method was found.</source>
          <target state="translated">MethodByName は、指定された名前の v のメソッドに対応する関数値を返します。返された関数のCallへの引数にはレシーバーを含めてはいけません。メソッドが見つからなかった場合は、ゼロ値を返します。</target>
        </trans-unit>
        <trans-unit id="1995bb7d8a495c29ba7a59b0b373d66ee1f82142" translate="yes" xml:space="preserve">
          <source>MethodSet</source>
          <target state="translated">MethodSet</target>
        </trans-unit>
        <trans-unit id="c5e9a1bdc9129c6b25b91c69272ee11aa65ae4ac" translate="yes" xml:space="preserve">
          <source>Methods of this form typically return the incoming receiver as well, to enable simple call chaining.</source>
          <target state="translated">この形式のメソッドは、通常、単純なコールチェーニングを可能にするために、着信レシーバも返す。</target>
        </trans-unit>
        <trans-unit id="68e37169f0406f89039a63dc143d5a05fc9b5510" translate="yes" xml:space="preserve">
          <source>Methods which don't require a result value to be passed in (for instance, Int.Sign), simply return the result. In this case, the receiver is typically the first operand, named x:</source>
          <target state="translated">結果の値を渡す必要のないメソッド(例えば、Int.Sign)は、単に結果を返します。この場合、レシーバは通常、xという名前の最初のオペランドになります。</target>
        </trans-unit>
        <trans-unit id="594fd92ee6be7b72c6f8d9451d2a9f9e3bae51ed" translate="yes" xml:space="preserve">
          <source>Microseconds returns the duration as an integer microsecond count.</source>
          <target state="translated">Microseconds は、持続時間を整数のマイクロ秒数で返します。</target>
        </trans-unit>
        <trans-unit id="c825c82257bdcbc1a135579145266c6ee484713a" translate="yes" xml:space="preserve">
          <source>Milliseconds returns the duration as an integer millisecond count.</source>
          <target state="translated">Millisecondsは、持続時間を整数のミリ秒数で返します。</target>
        </trans-unit>
        <trans-unit id="d4a6fe67a8f15c1c894bf05225db6c07db7dc926" translate="yes" xml:space="preserve">
          <source>Min returns the smaller of x or y.</source>
          <target state="translated">Minは、xまたはyのどちらか小さい方を返します。</target>
        </trans-unit>
        <trans-unit id="dacfaba796bce8b807113e726ae0618041c980f0" translate="yes" xml:space="preserve">
          <source>MinPrec returns the minimum precision required to represent x exactly (i.e., the smallest prec before x.SetPrec(prec) would start rounding x). The result is 0 for |x| == 0 and |x| == Inf.</source>
          <target state="translated">MinPrecは,xを正確に表現するのに必要な最小精度(つまり,x.SetPrec(prec)がxの丸めを開始する前の最小prec)を返します.x| ==0 と |x| ==Inf の場合、結果は 0 になります。</target>
        </trans-unit>
        <trans-unit id="b959e8418a57efc341ef2ea80360e0eee71f265e" translate="yes" xml:space="preserve">
          <source>MinRead is the minimum slice size passed to a Read call by Buffer.ReadFrom. As long as the Buffer has at least MinRead bytes beyond what is required to hold the contents of r, ReadFrom will not grow the underlying buffer.</source>
          <target state="translated">MinReadは、Buffer.ReadFromによってReadコールに渡される最小スライスサイズです。Bufferに、rの内容を保持するために必要なバイト数以上のMinReadバイトがある限り、ReadFromはその下のバッファを成長させません。</target>
        </trans-unit>
        <trans-unit id="ba682b9edf600874d186945b125535bdb2fd2d00" translate="yes" xml:space="preserve">
          <source>Minute returns the minute offset within the hour specified by t, in the range [0, 59].</source>
          <target state="translated">Minuteは、tで指定した時間内の分のオフセットを、[0,59]の範囲で返します。</target>
        </trans-unit>
        <trans-unit id="f75dd7f0b206dbae82a8f8f0b7023bff54f3a266" translate="yes" xml:space="preserve">
          <source>Minutes returns the duration as a floating point number of minutes.</source>
          <target state="translated">Minutesは、浮動小数点数である分として期間を返します。</target>
        </trans-unit>
        <trans-unit id="eb3dbdbaa825e8d8a44607bf8d9e0b1911e69e12" translate="yes" xml:space="preserve">
          <source>MissingMethod returns (nil, false) if V implements T, otherwise it returns a missing method required by T and whether it is missing or just has the wrong type.</source>
          <target state="translated">MissingMethodは、VがTを実装している場合は(nil,false)を返し、そうでない場合は、Tで必要とされるメソッドが見つからないか、型が間違っているだけなのかを返します。</target>
        </trans-unit>
        <trans-unit id="37de4657eb0dc5b3413cb095b60f3d8129f6593f" translate="yes" xml:space="preserve">
          <source>Mkdir creates a new directory with the specified name and permission bits (before umask). If there is an error, it will be of type *PathError.</source>
          <target state="translated">Mkdir は、指定された名前とパーミッションビット (umask の前)を持つ新しいディレクトリを作成します。エラーが発生した場合は、*PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="677ef1c770313b12ac646270f84a792125bb5633" translate="yes" xml:space="preserve">
          <source>MkdirAll creates a directory named path, along with any necessary parents, and returns nil, or else returns an error. The permission bits perm (before umask) are used for all directories that MkdirAll creates. If path is already a directory, MkdirAll does nothing and returns nil.</source>
          <target state="translated">MkdirAll は path という名前のディレクトリを必要な親と一緒に作成し、nil を返すか、エラーを返します。パーミッションビット perm (umask の前)は、MkdirAll が作成するすべてのディレクトリに使用されます。path が既にディレクトリである場合、MkdirAll は何もせず nil を返します。</target>
        </trans-unit>
        <trans-unit id="f388dbfb78ec3e8821ae0844a947cecd488dd5ff" translate="yes" xml:space="preserve">
          <source>Mod</source>
          <target state="translated">Mod</target>
        </trans-unit>
        <trans-unit id="373154d6ec87032b198bd3426fdb98b629297d1b" translate="yes" xml:space="preserve">
          <source>Mod returns the floating-point remainder of x/y. The magnitude of the result is less than y and its sign agrees with that of x.</source>
          <target state="translated">Mod は x/y の浮動小数点の余剰を返します。結果の大きさは y より小さく、その符号は x のそれと一致します。</target>
        </trans-unit>
        <trans-unit id="f2b25579075ef3b96af2a2e04dfbe27a4023e7c3" translate="yes" xml:space="preserve">
          <source>Mod returns the point q in r such that p.X-q.X is a multiple of r's width and p.Y-q.Y is a multiple of r's height.</source>
          <target state="translated">Modは、p.X-q.Xがrの幅の倍数、p.Y-q.Yがrの高さの倍数となるようなrの点qを返します。</target>
        </trans-unit>
        <trans-unit id="5301dec2851eeeadb9f8edd3bcc14178a7cc1eac" translate="yes" xml:space="preserve">
          <source>Mod sets z to the modulus x%y for y != 0 and returns z. If y == 0, a division-by-zero run-time panic occurs. Mod implements Euclidean modulus (unlike Go); see DivMod for more details.</source>
          <target state="translated">y !=0 のモジュラス x%y に z を設定して z を返します。 y ==0 の場合は、ランタイムパニックが発生します。Mod はユークリッド係数を実装しています(Go とは異なります)。</target>
        </trans-unit>
        <trans-unit id="6d74b87ee55add7bade81d22a2a4510010f96ac8" translate="yes" xml:space="preserve">
          <source>ModInverse sets z to the multiplicative inverse of g in the ring ℤ/nℤ and returns z. If g and n are not relatively prime, g has no multiplicative inverse in the ring ℤ/nℤ. In this case, z is unchanged and the return value is nil.</source>
          <target state="translated">ModInverseは、zを環状のℤ/nℤにおけるgの乗算逆数に設定してzを返します。 gとnが相対素数でない場合、gは環状のℤ/nℤにおいて乗算逆数を持ちません。この場合、zは変化せず、戻り値はnilです。</target>
        </trans-unit>
        <trans-unit id="7a4fd0d385cd06f73e61243a029e76aa018a4f23" translate="yes" xml:space="preserve">
          <source>ModSqrt sets z to a square root of x mod p if such a square root exists, and returns z. The modulus p must be an odd prime. If x is not a square mod p, ModSqrt leaves z unchanged and returns nil. This function panics if p is not an odd integer.</source>
          <target state="translated">ModSqrtは、そのような平方根が存在する場合、zをxの平方根mod pに設定し、zを返します。x が p の平方根でない場合、ModSqrt は z を変更せずに nil を返します。この関数は、pが奇数整数でない場合にパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="aac634faa69d653814bcee88f0a5dfc61028be1b" translate="yes" xml:space="preserve">
          <source>ModTime returns the modification time in UTC using the legacy ModifiedDate and ModifiedTime fields.</source>
          <target state="translated">ModTime は、従来の ModifiedDate フィールドと ModifiedTime フィールドを使用して UTC での変更時刻を返します。</target>
        </trans-unit>
        <trans-unit id="aa00a628811be04815f4dd62095833b576cd8722" translate="yes" xml:space="preserve">
          <source>Mode returns the permission and mode bits for the FileHeader.</source>
          <target state="translated">Mode は、FileHeader のパーミッションとモードビットを返します。</target>
        </trans-unit>
        <trans-unit id="28a0f960b89726a468e14a8ebdf922a21170bc22" translate="yes" xml:space="preserve">
          <source>Mode returns the rounding mode of x.</source>
          <target state="translated">Mode は x の丸めモードを返します。</target>
        </trans-unit>
        <trans-unit id="8b4ea19087de0202d8e6a728b310de2dbb997d4d" translate="yes" xml:space="preserve">
          <source>Mode values control the operation of New.</source>
          <target state="translated">モード値は、Newの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="ee5a2d9bea8822761c2af443e30dd8b140094e31" translate="yes" xml:space="preserve">
          <source>Model can convert any Color to one from its own color model. The conversion may be lossy.</source>
          <target state="translated">モデルは、任意のカラーを独自のカラーモデルからのカラーに変換することができます。変換にはロスが発生する場合があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
