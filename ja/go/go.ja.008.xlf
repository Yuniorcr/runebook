<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="a91bed1365204e8353c0f745ca77893ae1b1305d" translate="yes" xml:space="preserve">
          <source>Source values of type bool may be scanned into types *bool, *interface{}, *string, *[]byte, or *RawBytes.</source>
          <target state="translated">bool型のソース値は、*bool型、*interface{}型、*string型、*[]byte型、または*RawBytes型にスキャンされます。</target>
        </trans-unit>
        <trans-unit id="4cd3cd23d4f7a4635c360a861ee7be174fed76cc" translate="yes" xml:space="preserve">
          <source>Source values of type time.Time may be scanned into values of type *time.Time, *interface{}, *string, or *[]byte. When converting to the latter two, time.RFC3339Nano is used.</source>
          <target state="translated">time.Time型のソース値は、*time.Time型、*interface{}型、*string型、または*[]byte型の値にスキャンされます。後者の2つに変換する場合は、time.RFC3339Nanoが使用されます。</target>
        </trans-unit>
        <trans-unit id="6bdf6d7926b72078af0c191b3c6238538d7b0cb1" translate="yes" xml:space="preserve">
          <source>Special case is:</source>
          <target state="translated">特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="38cf2e1ac5d0bfa814379b9cb5b1a8aad4c71895" translate="yes" xml:space="preserve">
          <source>Special cases are (in order):</source>
          <target state="translated">特殊なケースは(順不同)です。</target>
        </trans-unit>
        <trans-unit id="36ff1c61fcf6a6f96273c5129f496e6e2d52bc61" translate="yes" xml:space="preserve">
          <source>Special cases are the same as Exp.</source>
          <target state="translated">特殊なケースはExp.</target>
        </trans-unit>
        <trans-unit id="fb4f18f6f604123235431e09b3313991f0bb526d" translate="yes" xml:space="preserve">
          <source>Special cases are:</source>
          <target state="translated">特殊なケースは</target>
        </trans-unit>
        <trans-unit id="46044fc293a1827aa7aed188a242765b1470a9ed" translate="yes" xml:space="preserve">
          <source>Special section indices.</source>
          <target state="translated">特別セクションのインデックス。</target>
        </trans-unit>
        <trans-unit id="a2fde335dab74ce6562dfce419b45cb58e70ab07" translate="yes" xml:space="preserve">
          <source>SpecialCase</source>
          <target state="translated">SpecialCase</target>
        </trans-unit>
        <trans-unit id="47398a3a12335bdb3df057e3646557b1b5841333" translate="yes" xml:space="preserve">
          <source>SpecialCase represents language-specific case mappings such as Turkish. Methods of SpecialCase customize (by overriding) the standard mappings.</source>
          <target state="translated">SpecialCase はトルコ語のような言語固有の大文字小文字のマッピングを表します。SpecialCase のメソッドは、標準的なマッピングを (オーバーライドすることで)カスタマイズします。</target>
        </trans-unit>
        <trans-unit id="fc8230b4119ad4b994db2324d71f4e0ae7ad932c" translate="yes" xml:space="preserve">
          <source>Split</source>
          <target state="translated">Split</target>
        </trans-unit>
        <trans-unit id="23392488f19a5d0be8c39d3cfafde4dd76bd94be" translate="yes" xml:space="preserve">
          <source>Split panics if it is called after scanning has started.</source>
          <target state="translated">スキャンが開始された後に呼び出された場合、スプリットパニックが発生します。</target>
        </trans-unit>
        <trans-unit id="96e564d2bf5c731af05562ed176616a9d55a5e64" translate="yes" xml:space="preserve">
          <source>Split sets the split function for the Scanner. The default split function is ScanLines.</source>
          <target state="translated">分割]は、スキャナの分割機能を設定します。デフォルトのスプリット機能はScanLinesです。</target>
        </trans-unit>
        <trans-unit id="eb475bc85cdb49a4c4de00518ab4efe39bcec33e" translate="yes" xml:space="preserve">
          <source>Split slices s into all subslices separated by sep and returns a slice of the subslices between those separators. If sep is empty, Split splits after each UTF-8 sequence. It is equivalent to SplitN with a count of -1.</source>
          <target state="translated">Split slices s を sep で区切られたすべてのサブスライスに分割し、それらの区切り文字の間のサブスライスのスライスを返します。sep が空の場合、Split は各 UTF-8 シーケンスの後に分割します。これは、-1のカウントを持つSplitNと同等です。</target>
        </trans-unit>
        <trans-unit id="67dbafd6c3b93902b18d8f321af8549a1b6ad6e7" translate="yes" xml:space="preserve">
          <source>Split slices s into all substrings separated by sep and returns a slice of the substrings between those separators.</source>
          <target state="translated">s を sep で区切られたすべての部分文字列に分割し、それらの区切り文字の間の部分文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="8a1469b01e576340018d58bd7e3d302e90dee09f" translate="yes" xml:space="preserve">
          <source>Split slices s into substrings separated by the expression and returns a slice of the substrings between those expression matches.</source>
          <target state="translated">sを式で区切られた部分文字列に分割し、それらの式にマッチした部分文字列の間のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="817430fe1883828acde2ae90d1a5b512a8d87c1e" translate="yes" xml:space="preserve">
          <source>Split splits path immediately following the final Separator, separating it into a directory and file name component. If there is no Separator in path, Split returns an empty dir and file set to path. The returned values have the property that path = dir+file.</source>
          <target state="translated">Splitは、最終的なSeparatorの直後のパスを、ディレクトリとファイル名のコンポーネントに分割します。パスに Separator がない場合、Split は空の dir と file を path に設定した値を返します。返される値は、path=dir+file というプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="04097266465adc5300d2bc3091a77206398acddf" translate="yes" xml:space="preserve">
          <source>Split splits path immediately following the final slash, separating it into a directory and file name component. If there is no slash in path, Split returns an empty dir and file set to path. The returned values have the property that path = dir+file.</source>
          <target state="translated">Splitは、最後のスラッシュの直後のパスをディレクトリとファイル名のコンポーネントに分割します。パスにスラッシュがない場合、Split は空のディレクトリとファイルをパスに設定して返します。返される値は、path=dir+file というプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="f645051fa0ea9f5fba674ae30e0eb8228c563bbb" translate="yes" xml:space="preserve">
          <source>SplitAfter</source>
          <target state="translated">SplitAfter</target>
        </trans-unit>
        <trans-unit id="af6f57e26d6655b8a560ff5a1ea503e038967615" translate="yes" xml:space="preserve">
          <source>SplitAfter slices s into all subslices after each instance of sep and returns a slice of those subslices. If sep is empty, SplitAfter splits after each UTF-8 sequence. It is equivalent to SplitAfterN with a count of -1.</source>
          <target state="translated">SplitAfter は、s を sep の各インスタンスの後のすべてのサブスライスにスライスし、それらのサブスライスのスライスを返します。sep が空の場合、SplitAfter は各 UTF-8 シーケンスの後に分割します。これは SplitAfterN と同等で、カウント数は -1 です。</target>
        </trans-unit>
        <trans-unit id="7b96a1319471e70dc0744f490b304d8e5292e091" translate="yes" xml:space="preserve">
          <source>SplitAfter slices s into all substrings after each instance of sep and returns a slice of those substrings.</source>
          <target state="translated">SplitAfter は sep の各インスタンスの後に s をすべての部分文字列にスライスし、それらの部分文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="183e10127881bddc63e39844aca6fde7b55ad84d" translate="yes" xml:space="preserve">
          <source>SplitAfterN</source>
          <target state="translated">SplitAfterN</target>
        </trans-unit>
        <trans-unit id="71c5d7e2f9fd13201867043dfefbd28be7cef909" translate="yes" xml:space="preserve">
          <source>SplitAfterN slices s into subslices after each instance of sep and returns a slice of those subslices. If sep is empty, SplitAfterN splits after each UTF-8 sequence. The count determines the number of subslices to return:</source>
          <target state="translated">SplitAfterN は、sep の各インスタンスの後に s をサブスライスにスライスし、それらのサブスライスのスライスを返します。sep が空の場合、SplitAfterN は各 UTF-8 シーケンスの後に分割します。countは返すサブスライスの数を決定します。</target>
        </trans-unit>
        <trans-unit id="b953b958d37f7636fa29a91139b9e599462e7d0a" translate="yes" xml:space="preserve">
          <source>SplitAfterN slices s into substrings after each instance of sep and returns a slice of those substrings.</source>
          <target state="translated">SplitAfterN は sep の各インスタンスの後に s を部分文字列にスライスし、それらの部分文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="c42d1c66abbb920d11fa3452a55d6b02ca57969f" translate="yes" xml:space="preserve">
          <source>SplitFunc is the signature of the split function used to tokenize the input. The arguments are an initial substring of the remaining unprocessed data and a flag, atEOF, that reports whether the Reader has no more data to give. The return values are the number of bytes to advance the input and the next token to return to the user, if any, plus an error, if any.</source>
          <target state="translated">SplitFuncは入力をトークン化するために使用される分割関数のシグネチャです。引数は、残りの未処理データの初期部分文字列と、 リーダーに与えるデータがなくなったかどうかを報告するフラグ atEOF です。戻り値は、入力を前進させるバイト数と、ユーザに返す次のトークンがあればそれに加えて、エラーがあればそれを返します。</target>
        </trans-unit>
        <trans-unit id="b4cd81f732cbd3a8923ecb19ba58f0f16cb90789" translate="yes" xml:space="preserve">
          <source>SplitHostPort splits a network address of the form &quot;host:port&quot;, &quot;host%zone:port&quot;, &quot;[host]:port&quot; or &quot;[host%zone]:port&quot; into host or host%zone and port.</source>
          <target state="translated">SplitHostPortは、&quot;host:port&quot;、&quot;host%zone:port&quot;、&quot;[host]:port&quot;、または&quot;[host%zone]:port &quot;の形式のネットワークアドレスを、ホストまたはホスト%zoneとポートに分割します。</target>
        </trans-unit>
        <trans-unit id="83d28a087df2085b354d9219f029b5d90cf38ec4" translate="yes" xml:space="preserve">
          <source>SplitList</source>
          <target state="translated">SplitList</target>
        </trans-unit>
        <trans-unit id="2810f9f5e2566aed968386693eafb51ff308b597" translate="yes" xml:space="preserve">
          <source>SplitList splits a list of paths joined by the OS-specific ListSeparator, usually found in PATH or GOPATH environment variables. Unlike strings.Split, SplitList returns an empty slice when passed an empty string.</source>
          <target state="translated">SplitList は、OS 固有の ListSeparator で結合されたパスのリストを分割します。strings.Split とは異なり、SplitList は空の文字列を渡すと空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="84cfaf9bc325cc024ba8d73b2f03f1f0b940f375" translate="yes" xml:space="preserve">
          <source>SplitN</source>
          <target state="translated">SplitN</target>
        </trans-unit>
        <trans-unit id="36c3c8ea011f7ef62da6893e010962d6852bd07a" translate="yes" xml:space="preserve">
          <source>SplitN slices s into subslices separated by sep and returns a slice of the subslices between those separators. If sep is empty, SplitN splits after each UTF-8 sequence. The count determines the number of subslices to return:</source>
          <target state="translated">SplitN は s を sep で区切られたサブスライスにスライスし、それらの区切り文字の間のサブスライスのスライスを返します。sep が空の場合、SplitN は各 UTF-8 シーケンスの後に分割します。countは返すサブスライスの数を決定します。</target>
        </trans-unit>
        <trans-unit id="de01961453e6bcc30ddd7714ed914f746f011fab" translate="yes" xml:space="preserve">
          <source>SplitN slices s into substrings separated by sep and returns a slice of the substrings between those separators.</source>
          <target state="translated">SplitN は s を sep で区切られた部分文字列にスライスし、それらの区切り文字の間の部分文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="8ca15484a6a50617febf823f3fa1c9e7038688ee" translate="yes" xml:space="preserve">
          <source>Sprint</source>
          <target state="translated">Sprint</target>
        </trans-unit>
        <trans-unit id="d0775164f7f53356c293723cd9c1222468d3a49b" translate="yes" xml:space="preserve">
          <source>Sprint formats using the default formats for its operands and returns the resulting string. Spaces are added between operands when neither is a string.</source>
          <target state="translated">Sprintは、そのオペランドのデフォルトのフォーマットを使用してフォーマットし、結果の文字列を返します。どちらも文字列ではない場合、オペランド間にスペースが追加されます。</target>
        </trans-unit>
        <trans-unit id="7d5fe7cc61bbb8158ad630a3820e3c126928a4a6" translate="yes" xml:space="preserve">
          <source>Sprintf</source>
          <target state="translated">Sprintf</target>
        </trans-unit>
        <trans-unit id="5bfb46358289368784772aa4aa5a217258b76236" translate="yes" xml:space="preserve">
          <source>Sprintf formats according to a format specifier and returns the resulting string.</source>
          <target state="translated">Sprintfは、フォーマット指定子に従ってフォーマットを行い、結果の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="5446f67533b2f88354fccb3b84fed81fd676a9d5" translate="yes" xml:space="preserve">
          <source>Sprintln</source>
          <target state="translated">Sprintln</target>
        </trans-unit>
        <trans-unit id="d0bd83b3300fd81e26aa39c136cc9d6ce11bb5a7" translate="yes" xml:space="preserve">
          <source>Sprintln formats using the default formats for its operands and returns the resulting string. Spaces are always added between operands and a newline is appended.</source>
          <target state="translated">Sprintlnは、オペランドのデフォルトのフォーマットを使用してフォーマットし、結果の文字列を返します。オペランド間には常にスペースが追加され、改行が追加されます。</target>
        </trans-unit>
        <trans-unit id="6bbb118b36018412cea4de47bc914f00685c9ac5" translate="yes" xml:space="preserve">
          <source>Sqrt</source>
          <target state="translated">Sqrt</target>
        </trans-unit>
        <trans-unit id="1b795ae9b134bc8c4c0b446e88fecc1f3b41d092" translate="yes" xml:space="preserve">
          <source>Sqrt returns the square root of x.</source>
          <target state="translated">Sqrtはxの平方根を返します。</target>
        </trans-unit>
        <trans-unit id="b85c9b396b0e4464f48aa17058f2b1082008ae70" translate="yes" xml:space="preserve">
          <source>Sqrt returns the square root of x. The result r is chosen so that real(r) &amp;ge; 0 and imag(r) has the same sign as imag(x).</source>
          <target state="translated">Sqrtはxの平方根を返します。結果rは、real（r）&amp;ge;0でimag（r）がimag（x）と同じ符号になるように選択されます。</target>
        </trans-unit>
        <trans-unit id="41b5f4c2f86ca750aabbdd4d6bdb915be0584893" translate="yes" xml:space="preserve">
          <source>Sqrt sets z to &amp;lfloor;&amp;radic;x&amp;rfloor;, the largest integer such that z&amp;sup2; &amp;le; x, and returns z. It panics if x is negative.</source>
          <target state="translated">Sqrtはzを&amp;lfloor;&amp;radic;x&amp;rfloor;（z&amp;sup2;&amp;le;xとなる最大の整数）に設定し、zを返します。xが負の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="2e519fcfbc6a90ddf75f1394fae55598d7af8898" translate="yes" xml:space="preserve">
          <source>Sqrt sets z to the rounded square root of x, and returns it.</source>
          <target state="translated">Sqrtは、zをxの丸められた平方根に設定し、それを返します。</target>
        </trans-unit>
        <trans-unit id="b183229b8a0007179105ee23f98db0fa35e992ca" translate="yes" xml:space="preserve">
          <source>SrcDirs returns a list of package source root directories. It draws from the current Go root and Go path but omits directories that do not exist.</source>
          <target state="translated">SrcDirs は、パッケージのソースルートディレクトリのリストを返します。これは、現在の囲碁ルートと囲碁パスから描画しますが、存在しないディレクトリは省略されます。</target>
        </trans-unit>
        <trans-unit id="ace37ead62176f4b0fef73d8a4e6eefe6e4e0808" translate="yes" xml:space="preserve">
          <source>Srcset encapsulates a known safe srcset attribute (see &lt;a href=&quot;https://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset&quot;&gt;https://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset&lt;/a&gt;).</source>
          <target state="translated">Srcsetは、既知の安全なsrcset属性をカプセル化します（&lt;a href=&quot;https://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset&quot;&gt;https://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcsetを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="608729966442ded3bea906aefa46d7a131fb981c" translate="yes" xml:space="preserve">
          <source>Sscan scans the argument string, storing successive space-separated values into successive arguments. Newlines count as space. It returns the number of items successfully scanned. If that is less than the number of arguments, err will report why.</source>
          <target state="translated">Sscan は引数文字列をスキャンし、スペースで区切られた値を連続した引数に格納します。改行はスペースとしてカウントされます。スキャンに成功した項目の数を返します。もしそれが引数の数よりも少ない場合は、 err がその理由を報告します。</target>
        </trans-unit>
        <trans-unit id="390342df3a9580b3ab53916d8e78ce9a67e05f51" translate="yes" xml:space="preserve">
          <source>Sscanf</source>
          <target state="translated">Sscanf</target>
        </trans-unit>
        <trans-unit id="61a716d2775c775cb5be05f41652e9aaaad32358" translate="yes" xml:space="preserve">
          <source>Sscanf scans the argument string, storing successive space-separated values into successive arguments as determined by the format. It returns the number of items successfully parsed. Newlines in the input must match newlines in the format.</source>
          <target state="translated">Sscanf は引数の文字列をスキャンし、スペースで区切られた値をフォーマットで決定された連続した引数に格納します。解析に成功した項目の数を返します。入力の改行はフォーマットの改行と一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="af4732932dde6aa0c1e4ad7d04d2e2382ec0a0b6" translate="yes" xml:space="preserve">
          <source>Sscanln is similar to Sscan, but stops scanning at a newline and after the final item there must be a newline or EOF.</source>
          <target state="translated">SscanlnはSscanと似ていますが、改行でスキャンを停止し、最終項目の後に改行かEOFがなければなりません。</target>
        </trans-unit>
        <trans-unit id="6f3e4b56a56750c728e3e2463bad931f8918a9d7" translate="yes" xml:space="preserve">
          <source>Stable sorts data while keeping the original order of equal elements.</source>
          <target state="translated">安定したソートを行い、元の等しい要素の順序を維持したままデータをソートします。</target>
        </trans-unit>
        <trans-unit id="c9e8e2e8cb17ec7f99a9db77c101e60f6136c3a5" translate="yes" xml:space="preserve">
          <source>Stack formats a stack trace of the calling goroutine into buf and returns the number of bytes written to buf. If all is true, Stack formats stack traces of all other goroutines into buf after the trace for the current goroutine.</source>
          <target state="translated">Stack は、呼び出し元の goroutine のスタックトレースを buf にフォーマットし、buf に書き込まれたバイト数を返します。すべてが真の場合、Stack は他のすべての goroutine のスタックトレースを現在の goroutine のトレースの後に buf にフォーマットします。</target>
        </trans-unit>
        <trans-unit id="1cffafd303a34a6584721e138e5265f842cb505a" translate="yes" xml:space="preserve">
          <source>Stack returns a formatted stack trace of the goroutine that calls it. It calls runtime.Stack with a large enough buffer to capture the entire trace.</source>
          <target state="translated">Stack は、それを呼び出す goroutine のスタックトレースをフォーマットしたものを返します。これは、トレース全体をキャプチャするのに十分な大きさのバッファで runtime.Stack を呼び出します。</target>
        </trans-unit>
        <trans-unit id="418aa94a169d739e57a35d99f93d9138e0bb4b62" translate="yes" xml:space="preserve">
          <source>Stack returns the stack trace associated with the record, a prefix of r.Stack0.</source>
          <target state="translated">Stack は、レコードに関連付けられたスタックトレースを返します。</target>
        </trans-unit>
        <trans-unit id="687cb3d7c249eff01be44167736a622ba61578c9" translate="yes" xml:space="preserve">
          <source>Standard colors.</source>
          <target state="translated">定番の色です。</target>
        </trans-unit>
        <trans-unit id="360c57caedbd1d1ff38dde144677c893d6ad3792" translate="yes" xml:space="preserve">
          <source>Standard library</source>
          <target state="translated">標準ライブラリ</target>
        </trans-unit>
        <trans-unit id="9fb1a9f741b4439135087b938ed47613619d8e54" translate="yes" xml:space="preserve">
          <source>Start enables tracing for the current program. While tracing, the trace will be buffered and written to w. Start returns an error if tracing is already enabled.</source>
          <target state="translated">Start は現在のプログラムのトレースを有効にします。トレース中、トレースはバッファリングされ、wに書き込まれます。Startはトレースが既に有効になっている場合、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="d84f21e1e9935e064f3eccc25d6db5d4fb64a86a" translate="yes" xml:space="preserve">
          <source>Start starts a server from NewUnstartedServer.</source>
          <target state="translated">StartはNewUnstartedServerからサーバを起動します。</target>
        </trans-unit>
        <trans-unit id="b61ef15d781bf8c860427db7964980f61966535c" translate="yes" xml:space="preserve">
          <source>Start starts the specified command but does not wait for it to complete.</source>
          <target state="translated">Startは指定したコマンドを起動しますが、コマンドの完了を待つことはありません。</target>
        </trans-unit>
        <trans-unit id="7f51b09c0923a4603b545c471069b55e22a62f34" translate="yes" xml:space="preserve">
          <source>StartCPUProfile enables CPU profiling for the current process. While profiling, the profile will be buffered and written to w. StartCPUProfile returns an error if profiling is already enabled.</source>
          <target state="translated">StartCPUProfile は、現在のプロセスの CPU プロファイリングを有効にします。プロファイリング中、プロファイルはバッファリングされ、wに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="f3753321843c42ccf0d93028e612610280e12d5e" translate="yes" xml:space="preserve">
          <source>StartCond returns the leading empty-width conditions that must be true in any match. It returns ^EmptyOp(0) if no matches are possible.</source>
          <target state="translated">StartCond は、どのようなマッチでも真でなければならない先頭の空幅条件を返します。マッチしない場合は ^EmptyOp(0)を返します。</target>
        </trans-unit>
        <trans-unit id="e00bec2778efe9f0a1a92501d76b773c7dc58166" translate="yes" xml:space="preserve">
          <source>StartProcess is a low-level interface. The os/exec package provides higher-level interfaces.</source>
          <target state="translated">StartProcess は低レベルのインターフェイスです。os/exec パッケージはより高レベルのインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="4656baf99c52e7677cc8f68ccbc8052e39ef42e9" translate="yes" xml:space="preserve">
          <source>StartProcess starts a new process with the program, arguments and attributes specified by name, argv and attr. The argv slice will become os.Args in the new process, so it normally starts with the program name.</source>
          <target state="translated">StartProcessは、name、argv、attrで指定されたプログラム、引数、属性で新しいプロセスを開始します。argvスライスは新しいプロセスではos.Argsになるので、通常はプログラム名から始まります。</target>
        </trans-unit>
        <trans-unit id="d3d2be7776a3d003cee77683d05001ec6ef09966" translate="yes" xml:space="preserve">
          <source>StartProcess wraps ForkExec for package os.</source>
          <target state="translated">StartProcess は os パッケージの ForkExec をラップします。</target>
        </trans-unit>
        <trans-unit id="4593c93bfc9fb8dacabfc8b4a1731d4454969f64" translate="yes" xml:space="preserve">
          <source>StartRegion starts a region and returns a function for marking the end of the region. The returned Region's End function must be called from the same goroutine where the region was started. Within each goroutine, regions must nest. That is, regions started after this region must be ended before this region can be ended. Recommended usage is</source>
          <target state="translated">StartRegion はリージョンを開始し、リージョンの終了を示す関数を返します。返された Region's End 関数は、リージョンが開始されたのと同じ goroutine から呼び出されなければなりません。各ゴローチン内では、領域は入れ子になっていなければなりません。つまり、この領域の後に開始された領域は、この領域を終了させる前に終了させなければなりません。推奨される使用法は</target>
        </trans-unit>
        <trans-unit id="3b719a81fa9e5ddcbfba4cb3fb45c729f487d09e" translate="yes" xml:space="preserve">
          <source>StartRequest blocks until it is time to send (or, if this is a server, receive) the request with the given id.</source>
          <target state="translated">StartRequestは、指定されたidでリクエストを送信する(サーバであれば受信する)時間になるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="338c8f94474f010aa4669ab2c0ae55a5c3a8c12a" translate="yes" xml:space="preserve">
          <source>StartResponse blocks until it is time to receive (or, if this is a server, send) the request with the given id.</source>
          <target state="translated">StartResponseは、指定されたIDのリクエストを受信する(サーバの場合は送信する)時間になるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="7ea714fe33f9c8708b382ac24930c9134895c05e" translate="yes" xml:space="preserve">
          <source>StartTLS sends the STARTTLS command and encrypts all further communication. Only servers that advertise the STARTTLS extension support this function.</source>
          <target state="translated">StartTLS は STARTTLS コマンドを送信し、それ以降のすべての通信を暗号化します。STARTTLS拡張をアドバタイズしているサーバのみがこの機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="d062840c5c4653552407064d11c812b2dfbbac16" translate="yes" xml:space="preserve">
          <source>StartTLS starts TLS on a server from NewUnstartedServer.</source>
          <target state="translated">StartTLS は NewUnstartedServer からサーバ上の TLS を起動します。</target>
        </trans-unit>
        <trans-unit id="01903002ac73fdbc83cec8f016e70281a8a03041" translate="yes" xml:space="preserve">
          <source>StartTimer starts timing a test. This function is called automatically before a benchmark starts, but it can also be used to resume timing after a call to StopTimer.</source>
          <target state="translated">StartTimerはテストのタイミングを開始します。この関数はベンチマークが開始される前に自動的に呼び出されますが、StopTimerを呼び出した後にタイミングを再開するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="bb33cf53f4e568db572c687d22b2ff2888d74df9" translate="yes" xml:space="preserve">
          <source>StartTrace enables tracing for the current process. While tracing, the data will be buffered and available via ReadTrace. StartTrace returns an error if tracing is already enabled. Most clients should use the runtime/trace package or the testing package's -test.trace flag instead of calling StartTrace directly.</source>
          <target state="translated">StartTrace は、現在のプロセスのトレースを有効にします。トレース中、データはバッファリングされ、ReadTrace経由で利用可能になります。StartTrace は、トレースがすでに有効になっている場合、エラーを返します。ほとんどのクライアントは、StartTraceを直接呼び出す代わりに、ランタイム/トレースパッケージまたはテストパッケージの-test.traceフラグを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6de552c394748272d237ee2909c17f8a5fd51503" translate="yes" xml:space="preserve">
          <source>Starting with Go 1.6, the http package has transparent support for the HTTP/2 protocol when using HTTPS. Programs that must disable HTTP/2 can do so by setting Transport.TLSNextProto (for clients) or Server.TLSNextProto (for servers) to a non-nil, empty map. Alternatively, the following GODEBUG environment variables are currently supported:</source>
          <target state="translated">Go 1.6 以降、http パッケージは HTTPS を使用する際に HTTP/2 プロトコルを透過的にサポートしています。HTTP/2 を無効にしなければならないプログラムは、Transport.TLSNextProto (クライアント用)または Server.TLSNextProto (サーバ用)を、nil ではない空のマップに設定することで無効にすることができます。代わりに、以下の GODEBUG 環境変数が現在サポートされています。</target>
        </trans-unit>
        <trans-unit id="9c555084811f017d34d2693472b49bb062306f30" translate="yes" xml:space="preserve">
          <source>Stat returns a FileInfo describing the named file. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Stat は、名前の付いたファイルを記述した FileInfo を返します。エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="e4a95458fc56105197c2a964b9366157865cbb1b" translate="yes" xml:space="preserve">
          <source>Stat returns the FileInfo structure describing file. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Stat は、ファイルを記述した FileInfo 構造体を返します。エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="6ed6c9c2af9ffd2ea1bfb59989c27d85db3a34df" translate="yes" xml:space="preserve">
          <source>State represents the printer state passed to custom formatters. It provides access to the io.Writer interface plus information about the flags and options for the operand's format specifier.</source>
          <target state="translated">Stateは、カスタム・フォーマッタに渡されるプリンタの状態を表します。これは、io.Writerインタフェースへのアクセスに加えて、オペランドのフォーマット指定子のフラグやオプションに関する情報を提供します。</target>
        </trans-unit>
        <trans-unit id="6c898e0bae6ae6e6a509998b0d70b717982994c3" translate="yes" xml:space="preserve">
          <source>Static reports whether this symbol is static (not visible outside its file).</source>
          <target state="translated">Static は、このシンボルがスタティックであるかどうかを報告します(ファイルの外では見えません)。</target>
        </trans-unit>
        <trans-unit id="f107d6fd99e84eaeb4014efe73efa78374b13f61" translate="yes" xml:space="preserve">
          <source>Stats returns database statistics.</source>
          <target state="translated">Statsはデータベースの統計情報を返します。</target>
        </trans-unit>
        <trans-unit id="473cf8363b9a9dc6de8f9778203d0b0d99ffe820" translate="yes" xml:space="preserve">
          <source>StatusText returns a text for the HTTP status code. It returns the empty string if the code is unknown.</source>
          <target state="translated">StatusText は、HTTP ステータスコードのテキストを返します。コードが不明な場合は空文字列を返します。</target>
        </trans-unit>
        <trans-unit id="d95efd4b66df751ef4f7e7c0d6a981a761feec31" translate="yes" xml:space="preserve">
          <source>StdEncoding is the standard base32 encoding, as defined in RFC 4648.</source>
          <target state="translated">StdEncodingは、RFC 4648で定義されている標準のbase32エンコーディングです。</target>
        </trans-unit>
        <trans-unit id="a9197d0bbe7d5f346c8fce4d5958e4af36331be4" translate="yes" xml:space="preserve">
          <source>StdEncoding is the standard base64 encoding, as defined in RFC 4648.</source>
          <target state="translated">StdEncodingは、RFC 4648で定義されている標準のbase64エンコーディングです。</target>
        </trans-unit>
        <trans-unit id="c30cba7f2a4c150acfe65c8a3aa36a9ff709ad57" translate="yes" xml:space="preserve">
          <source>StdSizes is a convenience type for creating commonly used Sizes. It makes the following simplifying assumptions:</source>
          <target state="translated">StdSizesは、一般的に使用されているサイズを作成するための便利なタイプです。以下のような単純化を前提としています。</target>
        </trans-unit>
        <trans-unit id="34f196b4b0f694cd0a2f21247970027005c1305c" translate="yes" xml:space="preserve">
          <source>StderrPipe returns a pipe that will be connected to the command's standard error when the command starts.</source>
          <target state="translated">StderrPipeは、コマンドの起動時にコマンドの標準エラーに接続されるパイプを返します。</target>
        </trans-unit>
        <trans-unit id="f9c5224ebb81b29f683fd0f89569f0498e209b24" translate="yes" xml:space="preserve">
          <source>Stdin, Stdout, and Stderr are open Files pointing to the standard input, standard output, and standard error file descriptors.</source>
          <target state="translated">Stdin,Stdout,Stderr は、標準入力、標準出力、標準エラーファイル記述子を指すオープンファイルです。</target>
        </trans-unit>
        <trans-unit id="eaaa7d5358fae0ad4ea6507594efa4e1fe1938f3" translate="yes" xml:space="preserve">
          <source>StdinPipe returns a pipe that will be connected to the command's standard input when the command starts. The pipe will be closed automatically after Wait sees the command exit. A caller need only call Close to force the pipe to close sooner. For example, if the command being run will not exit until standard input is closed, the caller must close the pipe.</source>
          <target state="translated">StdinPipe は、コマンドの開始時にコマンドの標準入力に接続されるパイプを返します。パイプは、Wait がコマンドの終了を見た後、自動的に閉じられます。呼び出し側は Close を呼び出すだけでパイプを強制的にすぐに閉じることができます。例えば、実行中のコマンドが標準入力を閉じるまで終了しない場合、呼び出し元はパイプを閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="e34e1f63d532ddcb966f6992c5d243530bff512e" translate="yes" xml:space="preserve">
          <source>StdoutPipe returns a pipe that will be connected to the command's standard output when the command starts.</source>
          <target state="translated">StdoutPipe は、コマンドの起動時にコマンドの標準出力に接続されるパイプを返します。</target>
        </trans-unit>
        <trans-unit id="35cb1f2f3090469fddd290f48f6f6f66f6cfbf71" translate="yes" xml:space="preserve">
          <source>Stmt</source>
          <target state="translated">Stmt</target>
        </trans-unit>
        <trans-unit id="e8d756b195575772804ef522d92696943863af82" translate="yes" xml:space="preserve">
          <source>Stmt is a prepared statement. A Stmt is safe for concurrent use by multiple goroutines.</source>
          <target state="translated">Stmtは準備されたステートメントです。Stmtは、複数のゴロチンを同時に使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="0bb26a3ab8d8618ecc81beec5115670b66a970d5" translate="yes" xml:space="preserve">
          <source>Stmt is a prepared statement. It is bound to a Conn and not used by multiple goroutines concurrently.</source>
          <target state="translated">Stmtは準備された文です。Connにバインドされており、複数のゴローチンが同時に使用することはありません。</target>
        </trans-unit>
        <trans-unit id="9e8123e57a051d77d8becac273756b24f947f7c4" translate="yes" xml:space="preserve">
          <source>Stmt returns a transaction-specific prepared statement from an existing statement.</source>
          <target state="translated">Stmtは、既存のステートメントからトランザクション固有の準備されたステートメントを返します。</target>
        </trans-unit>
        <trans-unit id="9e2e6090b163c6036190ffea94ddcfbb24b8b882" translate="yes" xml:space="preserve">
          <source>Stmt.QueryRowContext</source>
          <target state="translated">Stmt.QueryRowContext</target>
        </trans-unit>
        <trans-unit id="70af1d64e33ba2bc94ac6b94c7823d3046a2e685" translate="yes" xml:space="preserve">
          <source>StmtContext returns a transaction-specific prepared statement from an existing statement.</source>
          <target state="translated">StmtContext は、既存のステートメントからトランザクション固有の準備されたステートメントを返します。</target>
        </trans-unit>
        <trans-unit id="a70153fdc2043d42cd12ca46ccb4c33b57b300d4" translate="yes" xml:space="preserve">
          <source>StmtExecContext enhances the Stmt interface by providing Exec with context.</source>
          <target state="translated">StmtExecContextは、Execにコンテキストを提供することで、Stmtインタフェースを強化します。</target>
        </trans-unit>
        <trans-unit id="1004fd52a4b277314a44a4efa023effe4416d3f8" translate="yes" xml:space="preserve">
          <source>StmtQueryContext enhances the Stmt interface by providing Query with context.</source>
          <target state="translated">StmtQueryContextは、Queryにコンテキストを与えることで、Stmtインターフェースを強化します。</target>
        </trans-unit>
        <trans-unit id="4e7e607354865ab06dac634d86cb1266a005b9e3" translate="yes" xml:space="preserve">
          <source>Stop causes package signal to stop relaying incoming signals to c. It undoes the effect of all prior calls to Notify using c. When Stop returns, it is guaranteed that c will receive no more signals.</source>
          <target state="translated">Stop は、パッケージシグナルの c への着信信号の中継を停止させます。これは、c を使用した Notify へのそれまでのすべての呼び出しの効果を元に戻します。</target>
        </trans-unit>
        <trans-unit id="94f72ec5a9e9e46f0269677088e9aed4dc6bf0c7" translate="yes" xml:space="preserve">
          <source>Stop prevents the Timer from firing. It returns true if the call stops the timer, false if the timer has already expired or been stopped. Stop does not close the channel, to prevent a read from the channel succeeding incorrectly.</source>
          <target state="translated">Stopは、タイマーの発射を阻止します。呼び出しがタイマーを停止した場合は真を返し、タイマーが既に期限切れか停止している場合は偽を返します。Stop はチャンネルを閉じず、チャンネルからの読み取りが正しく行われないようにします。</target>
        </trans-unit>
        <trans-unit id="96e4cceff229f7d0b6242e33e40b44c6e1f954ad" translate="yes" xml:space="preserve">
          <source>Stop stops the current tracing, if any. Stop only returns after all the writes for the trace have completed.</source>
          <target state="translated">Stop は、現在のトレースを停止します。停止は、トレースのすべての書き込みが完了した後にのみ戻ります。</target>
        </trans-unit>
        <trans-unit id="f869959cdbddc758676d9a0b40b1ccec00a007e0" translate="yes" xml:space="preserve">
          <source>Stop turns off a ticker. After Stop, no more ticks will be sent. Stop does not close the channel, to prevent a concurrent goroutine reading from the channel from seeing an erroneous &quot;tick&quot;.</source>
          <target state="translated">Stopはティッカーをオフにします。ストップ後は、それ以上のティッカーは送信されません。ストップはチャンネルを閉じません。これは、チャンネルからの同時読取ゴロチンが誤った「目盛り」を見ないようにするためです。</target>
        </trans-unit>
        <trans-unit id="6c60cc11ce6206ba7285eea9b92d5192efe41d39" translate="yes" xml:space="preserve">
          <source>StopCPUProfile stops the current CPU profile, if any. StopCPUProfile only returns after all the writes for the profile have completed.</source>
          <target state="translated">StopCPUProfile は、現在の CPU プロファイルがある場合には、そのプロファイルを停止します。StopCPUProfileは、プロファイルへのすべての書き込みが完了した後にのみ戻ります。</target>
        </trans-unit>
        <trans-unit id="921647073cddc48eae81cacd6f73563cc3719e6f" translate="yes" xml:space="preserve">
          <source>StopTimer stops timing a test. This can be used to pause the timer while performing complex initialization that you don't want to measure.</source>
          <target state="translated">StopTimerは、テストの計時を停止します。これは、測定したくない複雑な初期化を実行中にタイマーを一時停止するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="84dbe4eb021745433f9d6bb9432228e77ba19099" translate="yes" xml:space="preserve">
          <source>StopTrace stops tracing, if it was previously enabled. StopTrace only returns after all the reads for the trace have completed.</source>
          <target state="translated">StopTrace は、以前に有効になっていた場合、トレースを停止します。StopTrace は、トレースのためのすべての読み取りが完了した後にのみ戻ります。</target>
        </trans-unit>
        <trans-unit id="e64cf11d9830120b60f240aa4b7f7791804376a7" translate="yes" xml:space="preserve">
          <source>Store sets the value for a key.</source>
          <target state="translated">ストアは、キーの値を設定します。</target>
        </trans-unit>
        <trans-unit id="0576297e57bdd6afa5e5d4f4c53fb27987cf20cb" translate="yes" xml:space="preserve">
          <source>Store sets the value of the Value to x. All calls to Store for a given Value must use values of the same concrete type. Store of an inconsistent type panics, as does Store(nil).</source>
          <target state="translated">Store は、値の値を x に設定します。指定された値に対する Store の呼び出しはすべて、同じ具象型の値を使用しなければなりません。矛盾した型のStoreは、Store(nil)と同様にパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="61fc43e10839248a6ca4c0ad01079c0c4ad0ec37" translate="yes" xml:space="preserve">
          <source>StoreInt32 atomically stores val into *addr.</source>
          <target state="translated">StoreInt32 アトミックにvalを*addrに格納します。</target>
        </trans-unit>
        <trans-unit id="7914e40a268c91ed6c78dd3a0c674684e23beca2" translate="yes" xml:space="preserve">
          <source>StoreInt64 atomically stores val into *addr.</source>
          <target state="translated">StoreInt64 は val を *addr にアトミックに格納します。</target>
        </trans-unit>
        <trans-unit id="3bd4e783553f00f03c188a415e3661fa8de191b3" translate="yes" xml:space="preserve">
          <source>StorePointer atomically stores val into *addr.</source>
          <target state="translated">StorePointerは,原子的にvalを*addrに格納します.</target>
        </trans-unit>
        <trans-unit id="9cc88c9dca1de73040dfd90e6d827a5b531c64fe" translate="yes" xml:space="preserve">
          <source>StoreUint32 atomically stores val into *addr.</source>
          <target state="translated">StoreUint32 は、val を *addr にアトミックに格納します。</target>
        </trans-unit>
        <trans-unit id="e11c1fe521ea309905b20e2bda18135e66472a1e" translate="yes" xml:space="preserve">
          <source>StoreUint64 atomically stores val into *addr.</source>
          <target state="translated">StoreUint64 は val を *addr にアトミックに格納します。</target>
        </trans-unit>
        <trans-unit id="644096d645019d8a2ba6cbc4d305a2699fe9059f" translate="yes" xml:space="preserve">
          <source>StoreUintptr atomically stores val into *addr.</source>
          <target state="translated">StoreUintptr アトミックにvalを*addrに格納します。</target>
        </trans-unit>
        <trans-unit id="cab8594aca23f91dcc0728ca91d9d20dcd26b690" translate="yes" xml:space="preserve">
          <source>StreamReader</source>
          <target state="translated">StreamReader</target>
        </trans-unit>
        <trans-unit id="2a7fc943079fc92f6a989794ba51133e347d57cd" translate="yes" xml:space="preserve">
          <source>StreamReader wraps a Stream into an io.Reader. It calls XORKeyStream to process each slice of data which passes through.</source>
          <target state="translated">StreamReader は Stream を io.Reader にラップします。XORKeyStreamを呼び出して、通過するデータの各スライスを処理します。</target>
        </trans-unit>
        <trans-unit id="232a89f73446348f72f684c82d07ed788b848a3a" translate="yes" xml:space="preserve">
          <source>StreamWriter</source>
          <target state="translated">StreamWriter</target>
        </trans-unit>
        <trans-unit id="fc13aaf005c735ab0e4aa5176b6af67540be3a8b" translate="yes" xml:space="preserve">
          <source>StreamWriter wraps a Stream into an io.Writer. It calls XORKeyStream to process each slice of data which passes through. If any Write call returns short then the StreamWriter is out of sync and must be discarded. A StreamWriter has no internal buffering; Close does not need to be called to flush write data.</source>
          <target state="translated">StreamWriter は Stream を io.Writer にラップします。XORKeyStream を呼び出して、通過するデータの各スライスを処理します。もし Write コールがショートを返す場合は、StreamWriter は同期が取れていないので破棄しなければなりません。書込みデータをフラッシュするために Close を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="61135993a6e29b59a8df3075ca0d3838f94b8d90" translate="yes" xml:space="preserve">
          <source>Strict creates a new encoding identical to enc except with strict decoding enabled. In this mode, the decoder requires that trailing padding bits are zero, as described in RFC 4648 section 3.5.</source>
          <target state="translated">Strict は、strict デコーディングを有効にする以外は enc と同じ新しいエンコーディングを作成します。このモードでは、デコーダは、RFC 4648のセクション3.5で記述されているように、末尾のパディングビットが0であることを要求する。</target>
        </trans-unit>
        <trans-unit id="396b00d6c7e8c1194e27297cd11ae3108cdacd84" translate="yes" xml:space="preserve">
          <source>String Conversions</source>
          <target state="translated">文字列の変換</target>
        </trans-unit>
        <trans-unit id="bd47be7c94487cbe10dfe0be4138815d0017463a" translate="yes" xml:space="preserve">
          <source>String and slice of bytes (treated equivalently with these verbs):</source>
          <target state="translated">文字列とバイトのスライス(これらの動詞と同等に扱われる)。</target>
        </trans-unit>
        <trans-unit id="8296a76a0e5d96744b29fe69547a88fb9387440d" translate="yes" xml:space="preserve">
          <source>String defines a string flag with specified name, default value, and usage string. The return value is the address of a string variable that stores the value of the flag.</source>
          <target state="translated">Stringは、指定された名前、デフォルト値、使用文字列を持つ文字列フラグを定義します。戻り値は、フラグの値を格納する文字列変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="9e4dec141cb0219423f92167f6932232e80cdb9e" translate="yes" xml:space="preserve">
          <source>String extracts string from COFF string table st at offset start.</source>
          <target state="translated">文字列は、オフセット開始時のCOFF文字列テーブルstから文字列を抽出します。</target>
        </trans-unit>
        <trans-unit id="dcd688eb0f2fbd5e407777a28042b64595f0fef8" translate="yes" xml:space="preserve">
          <source>String formats the address as a valid RFC 5322 address. If the address's name contains non-ASCII characters the name will be rendered according to RFC 2047.</source>
          <target state="translated">文字列は、アドレスを有効な RFC 5322 アドレスとしてフォーマットします。アドレスの名前に非 ASCII 文字が含まれている場合、その名前は RFC 2047 に従って表示されます。</target>
        </trans-unit>
        <trans-unit id="8d105c469495a5d5f8062e63371ab613869f1e04" translate="yes" xml:space="preserve">
          <source>String formats x like x.Text('g', 10). (String must be called explicitly, Float.Format does not support %s verb.)</source>
          <target state="translated">文字列は x.Text('g',10)のように x をフォーマットします。(Stringは明示的に呼び出す必要があります。Float.Formatは%s動詞をサポートしていません)。</target>
        </trans-unit>
        <trans-unit id="01748cd6407645feded183980c6258bbb0d669e6" translate="yes" xml:space="preserve">
          <source>String implements the Var interface. To get the unquoted string use Value.</source>
          <target state="translated">String は Var インターフェースを実装しています。引用符で囲まれていない文字列を取得するには Value を使用します。</target>
        </trans-unit>
        <trans-unit id="c388848919b90e3a01d2d3408f1ebde77b3f2a74" translate="yes" xml:space="preserve">
          <source>String is a ValueConverter that converts its input to a string. If the value is already a string or []byte, it's unchanged. If the value is of another type, conversion to string is done with fmt.Sprintf(&quot;%v&quot;, v).</source>
          <target state="translated">Stringは、その入力を文字列に変換するValueConverterです。値が既に文字列または[]バイトである場合、それは変更されません。値が別の型の場合、文字列への変換は fmt.Sprintf(&quot;%v&quot;,v)で行われます。</target>
        </trans-unit>
        <trans-unit id="014933e8c2aa543fd850622d80731a6a9386778b" translate="yes" xml:space="preserve">
          <source>String is a string variable, and satisfies the Var interface.</source>
          <target state="translated">Stringは文字列変数で、Varインターフェースを満たしています。</target>
        </trans-unit>
        <trans-unit id="83826ec6cada0ae1502e1aff2c5460723f559354" translate="yes" xml:space="preserve">
          <source>String reassembles the URL into a valid URL string. The general form of the result is one of:</source>
          <target state="translated">Stringは、URLを有効なURL文字列に再構築します。結果の一般的な形式は以下のいずれかです。</target>
        </trans-unit>
        <trans-unit id="1a1a1e5164ab79c22ae49942d67ef810bdba6ad9" translate="yes" xml:space="preserve">
          <source>String returns a descriptive name for the time zone information, corresponding to the name argument to LoadLocation or FixedZone.</source>
          <target state="translated">String は、LoadLocation または FixedZone の引数である name に対応するタイムゾーン情報の説明的な名前を返します。</target>
        </trans-unit>
        <trans-unit id="aa4d82115db66e350e92f539c5427c79fdfb58ed" translate="yes" xml:space="preserve">
          <source>String returns a human-readable description of c. It is intended only for debugging. In particular, it is not suitable for use as input to a shell. The output of String may vary across Go releases.</source>
          <target state="translated">String は、人間が読めるような c の記述を返します。特に、シェルへの入力としての使用には適していません。Stringの出力は、Goのリリースによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="55bb95d4983983ad2bde74eafe604eb90028dc18" translate="yes" xml:space="preserve">
          <source>String returns a string in one of several forms:</source>
          <target state="translated">Stringは、いくつかの形式のうちの1つで文字列を返します。</target>
        </trans-unit>
        <trans-unit id="345f70fca28ee043619061f7f87c019dadbba1fa" translate="yes" xml:space="preserve">
          <source>String returns a string representation of p like &quot;(3,4)&quot;.</source>
          <target state="translated">Stringは、「(3,4)」のようにpを文字列で表現したものを返します。</target>
        </trans-unit>
        <trans-unit id="3448960ebb659e656c5021f0b36127dab5b9d619" translate="yes" xml:space="preserve">
          <source>String returns a string representation of r like &quot;(3,4)-(6,5)&quot;.</source>
          <target state="translated">Stringは、&quot;(3,4)-(6,5)のようなrの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="1b35bdca294966810231e9db40a5c473f629af73" translate="yes" xml:space="preserve">
          <source>String returns a string representation of the scope, for debugging.</source>
          <target state="translated">String は、デバッグ用にスコープの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="40800a9640894f3a3149f9e54d890572a4beda8c" translate="yes" xml:space="preserve">
          <source>String returns a string representation of the sequence r, roughly following the RFC 2253 Distinguished Names syntax.</source>
          <target state="translated">String は、RFC 2253 の Distinguished Names 構文にほぼ従った、シーケンス r の文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="7a196811cde011797851e8bcd4ea585d5971e7d9" translate="yes" xml:space="preserve">
          <source>String returns a string representation of x in the form &quot;a/b&quot; (even if b == 1).</source>
          <target state="translated">Stringは、xを &quot;a/b &quot;の形式で文字列表現したものを返します(b ==1であっても)。</target>
        </trans-unit>
        <trans-unit id="7b4474871a59eadc44e6ad3cc370b5d1fd6eabd1" translate="yes" xml:space="preserve">
          <source>String returns a string representing the duration in the form &quot;72h3m0.5s&quot;. Leading zero units are omitted. As a special case, durations less than one second format use a smaller unit (milli-, micro-, or nanoseconds) to ensure that the leading digit is non-zero. The zero duration formats as 0s.</source>
          <target state="translated">String は、&quot;72h3m0.5s &quot;という形式の持続時間を表す文字列を返します。先頭のゼロの単位は省略されます。特殊なケースとして、1秒未満の持続時間は、最初の桁がゼロでないことを確実にするために、より小さい単位(ミリ秒、マイクロ秒、またはナノ秒)を使用してフォーマットされます。ゼロの持続時間は 0s としてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="f5e00dac202df16525dc65e74932811ab9752d4e" translate="yes" xml:space="preserve">
          <source>String returns a summary of the benchmark results. It follows the benchmark result line format from &lt;a href=&quot;https://golang.org/design/14313-benchmark-format&quot;&gt;https://golang.org/design/14313-benchmark-format&lt;/a&gt;, not including the benchmark name. Extra metrics override built-in metrics of the same name. String does not include allocs/op or B/op, since those are reported by MemString.</source>
          <target state="translated">文字列は、ベンチマーク結果の概要を返します。これは、&lt;a href=&quot;https://golang.org/design/14313-benchmark-format&quot;&gt;https：&lt;/a&gt; //golang.org/design/14313-benchmark-formatのベンチマーク結果の行フォーマットに従っています。ベンチマーク名は含まれていません。追加のメトリックは、同じ名前の組み込みメトリックをオーバーライドします。文字列にはallocs / opまたはB / opは含まれません。これらはMemStringによって報告されるためです。</target>
        </trans-unit>
        <trans-unit id="a1320f96272e68242e45787bdcf443a45a5d4acb" translate="yes" xml:space="preserve">
          <source>String returns the CIDR notation of n like &quot;192.0.2.0/24&quot; or &quot;2001:db8::/48&quot; as defined in RFC 4632 and RFC 4291. If the mask is not in the canonical form, it returns the string which consists of an IP address, followed by a slash character and a mask expressed as hexadecimal form with no punctuation like &quot;198.51.100.0/c000ff00&quot;.</source>
          <target state="translated">Stringは、RFC 4632とRFC 4291で定義されている「192.0.0.2.0/24」や「2001:db8::/48」のようなnのCIDR表記を返す。マスクが正規表現でない場合は、IPアドレスとスラッシュ文字の後に &quot;198.51.100.0/c000ff00 &quot;のような句読点のない16進数で表現されたマスクからなる文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f55b73801df68c7614969aee1732afd9d5e38010" translate="yes" xml:space="preserve">
          <source>String returns the English name of the day (&quot;Sunday&quot;, &quot;Monday&quot;, ...).</source>
          <target state="translated">文字列は、その日の英語名(「日曜日」「月曜日」「...」)を返します。</target>
        </trans-unit>
        <trans-unit id="ffc4d02cde72706d98e09a395ce956d9d89dd7b5" translate="yes" xml:space="preserve">
          <source>String returns the English name of the month (&quot;January&quot;, &quot;February&quot;, ...).</source>
          <target state="translated">文字列は、月の英語名(&quot;1月&quot;、&quot;2月&quot;、...)を返します。</target>
        </trans-unit>
        <trans-unit id="d35cab9a7681d28fe5cfa98797f716ccf4a8148e" translate="yes" xml:space="preserve">
          <source>String returns the accumulated string.</source>
          <target state="translated">Stringは、蓄積された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6a561a9c0ca3a5d45a6220d79144ae4e4f68eaba" translate="yes" xml:space="preserve">
          <source>String returns the contents of the unread portion of the buffer as a string. If the Buffer is a nil pointer, it returns &quot;&amp;lt;nil&amp;gt;&quot;.</source>
          <target state="translated">文字列は、バッファの未読部分の内容を文字列として返します。Bufferがnilポインターの場合、 &quot;&amp;lt;nil&amp;gt;&quot;を返します。</target>
        </trans-unit>
        <trans-unit id="20281079c25e7469dba253811f0a64eb9af0ad50" translate="yes" xml:space="preserve">
          <source>String returns the decimal representation of x as generated by x.Text(10).</source>
          <target state="translated">文字列は、x.Text(10)で生成された x の 10 進表現を返します。</target>
        </trans-unit>
        <trans-unit id="c1f7f34151f59a07d632aef98f6cf3db75ca331f" translate="yes" xml:space="preserve">
          <source>String returns the encoded userinfo information in the standard form of &quot;username[:password]&quot;.</source>
          <target state="translated">文字列は、&quot;username[:password]&quot;という標準形式でエンコードされたユーザ情報を返す。</target>
        </trans-unit>
        <trans-unit id="c9f4b613c07a2c7f71577fe196567617d0abff90" translate="yes" xml:space="preserve">
          <source>String returns the hexadecimal form of m, with no punctuation.</source>
          <target state="translated">文字列は、句読点のない16進数形式のmを返します。</target>
        </trans-unit>
        <trans-unit id="a803d186b1c90a1c53ad70e26c40836efc312842" translate="yes" xml:space="preserve">
          <source>String returns the literal text of the number.</source>
          <target state="translated">文字列は、番号のリテラルテキストを返します。</target>
        </trans-unit>
        <trans-unit id="efd718d51f4b6dbacf2db82a320892ae4b63a670" translate="yes" xml:space="preserve">
          <source>String returns the name of k.</source>
          <target state="translated">文字列は、kの名前を返します。</target>
        </trans-unit>
        <trans-unit id="750dd1515ee90a846665f6d5d112993b3669e476" translate="yes" xml:space="preserve">
          <source>String returns the name of the transaction isolation level.</source>
          <target state="translated">String は、トランザクション分離レベルの名前を返します。</target>
        </trans-unit>
        <trans-unit id="e794984ac30a476fc607ba49d30074600724b1fd" translate="yes" xml:space="preserve">
          <source>String returns the serialization of the cookie for use in a Cookie header (if only Name and Value are set) or a Set-Cookie response header (if other fields are set). If c is nil or c.Name is invalid, the empty string is returned.</source>
          <target state="translated">String は、Cookie ヘッダ (Name と Value のみが設定されている場合)または Set-Cookie レスポンスヘッダ (他のフィールドが設定されている場合)で使用するための Cookie のシリアライズを返します。c が nil であるか、c.Name が無効な場合、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="fe713a69a5fd2ac5cb84c706517fb895d0d57913" translate="yes" xml:space="preserve">
          <source>String returns the source text used to compile the regular expression.</source>
          <target state="translated">文字列は、正規表現のコンパイルに使用したソーステキストを返します。</target>
        </trans-unit>
        <trans-unit id="34bacca8ec4eef4ee78833a67f79a6eef6da5be0" translate="yes" xml:space="preserve">
          <source>String returns the string corresponding to the token tok. For operators, delimiters, and keywords the string is the actual token character sequence (e.g., for the token ADD, the string is &quot;+&quot;). For all other tokens the string corresponds to the token constant name (e.g. for the token IDENT, the string is &quot;IDENT&quot;).</source>
          <target state="translated">String は、トークン・トークに対応する文字列を返します。演算子、デリミタ、キーワードについては、文字列は実際のトークンの文字列となります(例えば、トークンADDについては文字列は &quot;+&quot;となります)。それ以外のすべてのトークンについては、文字列はトークン定数名に対応します(例えば、トークンIDENTについては、文字列は &quot;IDENT&quot;)。</target>
        </trans-unit>
        <trans-unit id="2d88168daac6375a514f336433bd215fb612a6a9" translate="yes" xml:space="preserve">
          <source>String returns the string form of n, roughly following the RFC 2253 Distinguished Names syntax.</source>
          <target state="translated">String は、RFC 2253 の Distinguished Names 構文にほぼ従った n の文字列形式を返します。</target>
        </trans-unit>
        <trans-unit id="65a433aa544a0c7b3431068c5cc7f107bc02e8c8" translate="yes" xml:space="preserve">
          <source>String returns the string form of the IP address ip. It returns one of 4 forms:</source>
          <target state="translated">String は、IP アドレス ip の文字列形式を返します。4つの形式のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="77e4b34a03bfe1d41ef0627a6a3eef76345118dd" translate="yes" xml:space="preserve">
          <source>String returns the string v's underlying value, as a string. String is a special case because of Go's String method convention. Unlike the other getters, it does not panic if v's Kind is not String. Instead, it returns a string of the form &quot;&amp;lt;T value&amp;gt;&quot; where T is v's type. The fmt package treats Values specially. It does not call their String method implicitly but instead prints the concrete values they hold.</source>
          <target state="translated">文字列は、文字列として文字列vの基になる値を返します。GoのStringメソッドの規約により、Stringは特殊なケースです。他のゲッターとは異なり、vの種類が文字列でない場合はパニックになりません。代わりに、「&amp;lt;T値&amp;gt;」という形式の文字列を返します。Tはvの型です。fmtパッケージは値を特別に扱います。Stringメソッドを暗黙的に呼び出すのではなく、それらが保持する具体的な値を出力します。</target>
        </trans-unit>
        <trans-unit id="da3ada59fed13cf9c42e28f35ce824b152ed6695" translate="yes" xml:space="preserve">
          <source>String returns the time formatted using the format string</source>
          <target state="translated">文字列は、フォーマット文字列を使用してフォーマットされた時刻を返します。</target>
        </trans-unit>
        <trans-unit id="7582d0695c8835ce2d6fd48b6b11691af0fd874b" translate="yes" xml:space="preserve">
          <source>String returns the value v as a string. String is a special case because of Go's String method convention. Unlike the other getters, it does not panic if v's Type is not TypeString. Instead, it returns a string of the form &quot;&amp;lt;T&amp;gt;&quot; or &quot;&amp;lt;T: V&amp;gt;&quot; where T is v's type and V is a string representation of v's value.</source>
          <target state="translated">文字列は値vを文字列として返します。GoのStringメソッドの規約により、Stringは特殊なケースです。他のゲッターとは異なり、vのTypeがTypeStringでない場合でもパニックになりません。代わりに、 &quot;&amp;lt;T&amp;gt;&quot;または &quot;&amp;lt;T：V&amp;gt;&quot;という形式の文字列を返します。Tはvの型で、Vはvの値の文字列表現です。</target>
        </trans-unit>
        <trans-unit id="b5780fb112a6b774b6985415c1ab7539f30b0d21" translate="yes" xml:space="preserve">
          <source>String values encode as JSON strings coerced to valid UTF-8, replacing invalid bytes with the Unicode replacement rune. So that the JSON will be safe to embed inside HTML &amp;lt;script&amp;gt; tags, the string is encoded using HTMLEscape, which replaces &quot;&amp;lt;&quot;, &quot;&amp;gt;&quot;, &quot;&amp;amp;&quot;, U+2028, and U+2029 are escaped to &quot;\u003c&quot;,&quot;\u003e&quot;, &quot;\u0026&quot;, &quot;\u2028&quot;, and &quot;\u2029&quot;. This replacement can be disabled when using an Encoder, by calling SetEscapeHTML(false).</source>
          <target state="translated">文字列値は、有効なUTF-8に強制変換されたJSON文字列としてエンコードされ、無効なバイトがUnicode置換ルーンに置き換えられます。JSONがHTML &amp;lt;script&amp;gt;タグ内に安全に埋め込まれるように、文字列はHTMLEscapeを使用してエンコードされ、「&amp;lt;」、「&amp;gt;」、「＆」、U + 2028、およびU + 2029は「\」にエスケープされます。 u003c &quot;、&quot; \ u003e &quot;、&quot; \ u0026 &quot;、&quot; \ u2028 &quot;、および&quot; \ u2029 &quot;。エンコーダーを使用している場合、SetEscapeHTML（false）を呼び出すことにより、この置換を無効にできます。</target>
        </trans-unit>
        <trans-unit id="86940bb85d221e97a38bc1e113fc6bce034c8750" translate="yes" xml:space="preserve">
          <source>StringBytePtr returns a pointer to a NUL-terminated array of bytes. If s contains a NUL byte this function panics instead of returning an error.</source>
          <target state="translated">StringBytePtr は、NUL で終端するバイトの配列へのポインタを返します。s に NUL バイトが含まれている場合、この関数はエラーを返さずにパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="c0623ccf68cc35082d287f89796544274ff86c91" translate="yes" xml:space="preserve">
          <source>StringByteSlice converts a string to a NUL-terminated []byte, If s contains a NUL byte this function panics instead of returning an error.</source>
          <target state="translated">StringByteSliceは文字列をNUL終端の[]バイトに変換します。</target>
        </trans-unit>
        <trans-unit id="6bf1e10cb60d4363fb37f7da731443afa2a654e2" translate="yes" xml:space="preserve">
          <source>StringHeader is the runtime representation of a string. It cannot be used safely or portably and its representation may change in a later release. Moreover, the Data field is not sufficient to guarantee the data it references will not be garbage collected, so programs must keep a separate, correctly typed pointer to the underlying data.</source>
          <target state="translated">StringHeaderは、文字列のランタイム表現です。安全に使用したり、移植性を確保したりすることはできず、その表現は後のリリースで変更される可能性があります。さらに、Dataフィールドは、参照するデータがガベージコレクションされないことを保証するのに十分ではないので、プログラムは、基礎となるデータへの別個の正しく型付けされたポインタを保持しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a97933503d7359e70c5bcc6d71f20f23e72ff484" translate="yes" xml:space="preserve">
          <source>StringNode holds a string constant. The value has been &quot;unquoted&quot;.</source>
          <target state="translated">StringNodeは文字列定数を保持しています。値は &quot;unquoted &quot;になっています。</target>
        </trans-unit>
        <trans-unit id="4e2dc56d882f4e247f4c8c91d09f7ca7c92151b0" translate="yes" xml:space="preserve">
          <source>StringSlice attaches the methods of Interface to []string, sorting in increasing order.</source>
          <target state="translated">StringSliceは、Interfaceのメソッドを[]stringにアタッチして、順番にソートしていきます。</target>
        </trans-unit>
        <trans-unit id="0ccdd69f6b44471ac8719f7a4d5092264f1d1540" translate="yes" xml:space="preserve">
          <source>StringSlicePtr converts a slice of strings to a slice of pointers to NUL-terminated byte arrays. If any string contains a NUL byte this function panics instead of returning an error.</source>
          <target state="translated">StringSlicePtr は文字列のスライスを NUL 終端のバイト配列へのポインタのスライスに変換します。文字列に NUL バイトが含まれている場合、この関数はエラーを返さずにパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="58cd2c4c0c64b3e8b63116e619c1216921aee8f5" translate="yes" xml:space="preserve">
          <source>StringTable is a COFF string table.</source>
          <target state="translated">StringTableはCOFF文字列テーブルです。</target>
        </trans-unit>
        <trans-unit id="cf2c21cf4463c1c95fd9d9c1165bec97a40c80e4" translate="yes" xml:space="preserve">
          <source>StringVal returns the Go string value of x, which must be a String or an Unknown. If x is Unknown, the result is &quot;&quot;.</source>
          <target state="translated">StringVal は、x の Go 文字列の値を返します。x が不明の場合、結果は &quot;&quot; です。</target>
        </trans-unit>
        <trans-unit id="d9073eff948f092d1e822cdc4b90545ac7f58c79" translate="yes" xml:space="preserve">
          <source>StringVar defines a string flag with specified name, default value, and usage string. The argument p points to a string variable in which to store the value of the flag.</source>
          <target state="translated">StringVarは、指定された名前、デフォルト値、使用文字列を持つ文字列フラグを定義します。引数pは、フラグの値を格納する文字列変数を指します。</target>
        </trans-unit>
        <trans-unit id="8523e16e4f3d17cbbcc1796a5175f67569825d49" translate="yes" xml:space="preserve">
          <source>StringWriter is the interface that wraps the WriteString method.</source>
          <target state="translated">StringWriterは、WriteStringメソッドをラップするインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="2968f2bfae46d2fc485efc7b71be92497e030111" translate="yes" xml:space="preserve">
          <source>Stringer</source>
          <target state="translated">Stringer</target>
        </trans-unit>
        <trans-unit id="58829a9ebd1b847fb0ad45cdde0851c334ed441d" translate="yes" xml:space="preserve">
          <source>Stringer is implemented by any value that has a String method, which defines the &amp;ldquo;native&amp;rdquo; format for that value. The String method is used to print values passed as an operand to any format that accepts a string or to an unformatted printer such as Print.</source>
          <target state="translated">ストリンガーは、その値の「ネイティブ」フォーマットを定義するStringメソッドを持つ任意の値によって実装されます。 Stringメソッドは、文字列を受け入れる任意の形式またはPrintなどの未フォーマットのプリンターにオペランドとして渡された値を印刷するために使用されます。</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="906a27ee40bd23a1553b39eb16be0c8e8ac3e949" translate="yes" xml:space="preserve">
          <source>Strings and slices of bytes are sent as an unsigned count followed by that many uninterpreted bytes of the value.</source>
          <target state="translated">文字列とバイトのスライスは、その値の未解釈バイト数が続く符号なしのカウントとして送信されます。</target>
        </trans-unit>
        <trans-unit id="faac2cc38ba743bbc17ba9acb7964aa6cee65d73" translate="yes" xml:space="preserve">
          <source>Strings must be UTF-8 encoded and may only contain Unicode code points U+0001 through U+00FF, due to limitations of the GZIP file format.</source>
          <target state="translated">文字列はUTF-8でエンコードされている必要があり、GZIPファイル形式の制限のため、UnicodeコードポイントU+0001~U+00FFのみを含むことができます。</target>
        </trans-unit>
        <trans-unit id="f76921542e09ce2202753a5d0b5a9e24e8b8a263" translate="yes" xml:space="preserve">
          <source>Strings sorts a slice of strings in increasing order.</source>
          <target state="translated">Stringsは、文字列のスライスを順にソートします。</target>
        </trans-unit>
        <trans-unit id="3d93c8594f1a8a4b01949156c04f8f3f3ae7fd2a" translate="yes" xml:space="preserve">
          <source>StringsAreSorted tests whether a slice of strings is sorted in increasing order.</source>
          <target state="translated">StringsAreSorted は、文字列のスライスが昇順にソートされているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="13ae2dda2de94ac9d40b6ba17fece2797835c04a" translate="yes" xml:space="preserve">
          <source>StripPrefix</source>
          <target state="translated">StripPrefix</target>
        </trans-unit>
        <trans-unit id="e0a5f88c187543f04de90ac6fd0379250c9778df" translate="yes" xml:space="preserve">
          <source>StripPrefix returns a handler that serves HTTP requests by removing the given prefix from the request URL's Path and invoking the handler h. StripPrefix handles a request for a path that doesn't begin with prefix by replying with an HTTP 404 not found error.</source>
          <target state="translated">StripPrefix は、リクエスト URL の Path から与えられたプレフィックスを削除してハンドラ h を呼び出すことで HTTP リクエストに対応するハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="39170b61b74a11d6a192ff9863dfa73aaecba21c" translate="yes" xml:space="preserve">
          <source>Struct values are deeply equal if their corresponding fields, both exported and unexported, are deeply equal.</source>
          <target state="translated">構造体の値は、エクスポートされたフィールドとエクスポートされていないフィールドの対応するフィールドの両方が深く等しくなると、深く等しくなります。</target>
        </trans-unit>
        <trans-unit id="fb5bb421400cdac0575f807d47566c64d1f46c0f" translate="yes" xml:space="preserve">
          <source>Struct values encode as JSON objects. Each exported struct field becomes a member of the object, using the field name as the object key, unless the field is omitted for one of the reasons given below.</source>
          <target state="translated">構造体の値は、JSON オブジェクトとしてエンコードされます。エクスポートされた各構造体フィールドは、以下の理由でフィールドが省略されない限り、フィールド名をオブジェクトのキーとして使用してオブジェクトのメンバになります。</target>
        </trans-unit>
        <trans-unit id="0b823e55e4d9782e91674576a6c2dba2dbfb679a" translate="yes" xml:space="preserve">
          <source>StructOf</source>
          <target state="translated">StructOf</target>
        </trans-unit>
        <trans-unit id="cbecd3176d1c216f7d05eaf053a4641373b34f6b" translate="yes" xml:space="preserve">
          <source>StructOf currently does not generate wrapper methods for embedded fields and panics if passed unexported StructFields. These limitations may be lifted in a future version.</source>
          <target state="translated">StructOf は現在、埋め込まれたフィールドのラッパーメソッドを生成せず、ポートされていない StructFields が渡された場合にパニックになります。これらの制限は、将来のバージョンで解除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="e272272dfcabba6b0a57032693b1247f7d907d03" translate="yes" xml:space="preserve">
          <source>StructOf returns the struct type containing fields. The Offset and Index fields are ignored and computed as they would be by the compiler.</source>
          <target state="translated">StructOf は、フィールドを含む構造体型を返します。オフセット・フィールドとインデックス・フィールドは無視され、コンパイラによって計算されます。</target>
        </trans-unit>
        <trans-unit id="642ea82e69d222e31d0a11979f4762edc849aa8f" translate="yes" xml:space="preserve">
          <source>StructTag</source>
          <target state="translated">StructTag</target>
        </trans-unit>
        <trans-unit id="666cf050832b24dac5a22e670aae0c296886ba23" translate="yes" xml:space="preserve">
          <source>StructTag.Lookup</source>
          <target state="translated">StructTag.Lookup</target>
        </trans-unit>
        <trans-unit id="5f4f3284caaeebe32585ec344848f50378d011bc" translate="yes" xml:space="preserve">
          <source>Structs are sent as a sequence of (field number, field value) pairs. The field value is sent using the standard gob encoding for its type, recursively. If a field has the zero value for its type (except for arrays; see above), it is omitted from the transmission. The field number is defined by the type of the encoded struct: the first field of the encoded type is field 0, the second is field 1, etc. When encoding a value, the field numbers are delta encoded for efficiency and the fields are always sent in order of increasing field number; the deltas are therefore unsigned. The initialization for the delta encoding sets the field number to -1, so an unsigned integer field 0 with value 7 is transmitted as unsigned delta = 1, unsigned value = 7 or (01 07). Finally, after all the fields have been sent a terminating mark denotes the end of the struct. That mark is a delta=0 value, which has representation (00).</source>
          <target state="translated">構造体は、(フィールド番号、フィールド値)のペアのシーケンスとして送られます。フィールド値は、その型に対して標準的なgobエンコーディングを用いて再帰的に送信されます。フィールドがその型に対してゼロ値を持つ場合(配列を除く、上記参照)、送信から省略されます。フィールド番号は、符号化された構造体の型によって定義されます:符号化された型の最初のフィールドはフィールド0、2番目のフィールドはフィールド1などです。値をエンコードする際には、効率化のためにフィールド番号はデルタエンコードされ、フィールドは常にフィールド番号の高い順に送信されます。デルタ符号化の初期化はフィールド番号を-1 に設定するので、値 7 の符号なし整数フィールド 0 は、符号なしデルタ=1、符号なし値=7、または (01 07)として送信されます。最後に、すべてのフィールドが送信された後、終端マークが構造体の終了を示します。このマークは delta=0 の値で、表現 (00)を持っています。</target>
        </trans-unit>
        <trans-unit id="7dc46671ebabbdf3c46aadccd97f8c490eefc52c" translate="yes" xml:space="preserve">
          <source>Structs, arrays and slices are also supported. Structs encode and decode only exported fields. Strings and arrays of bytes are supported with a special, efficient representation (see below). When a slice is decoded, if the existing slice has capacity the slice will be extended in place; if not, a new array is allocated. Regardless, the length of the resulting slice reports the number of elements decoded.</source>
          <target state="translated">構造体、配列、スライスもサポートされています。構造体は、エクスポートされたフィールドのみをエンコードおよびデコードします。文字列とバイトの配列は、特別な効率的な表現でサポートされています(後述)。スライスがデコードされる際、既存のスライスに容量がある場合は、そのスライスがその場で拡張されます。そうでない場合は、新しい配列が割り当てられます。それに関わらず、結果として得られるスライスの長さは、デコードされた要素の数を報告します。</target>
        </trans-unit>
        <trans-unit id="ad78f09f9c6b3087d8e72e4530ecc70c4956979a" translate="yes" xml:space="preserve">
          <source>Structure Preservation Property: &quot;... when a template author writes an HTML tag in a safe templating language, the browser will interpret the corresponding portion of the output as a tag regardless of the values of untrusted data, and similarly for other structures such as attribute boundaries and JS and CSS string boundaries.&quot;</source>
          <target state="translated">構造体保存プロパティ。&quot;テンプレート作成者が安全なテンプレート言語でHTMLタグを書くと、ブラウザは信頼されないデータの値に関係なく、出力の対応する部分をタグとして解釈し、同様に属性境界やJSやCSS文字列境界のような他の構造に対しても解釈します。</target>
        </trans-unit>
        <trans-unit id="a3c9ca613cd987d897ef5275ec8d3b6be7186d1f" translate="yes" xml:space="preserve">
          <source>Sub returns the difference of x, y and borrow: diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Sub は、x,y,borrow の差分を返します:diff=x-y-borrow。borrow 入力は 0 または 1 でなければなりません.borrowOut出力は,0または1であることが保証されています.</target>
        </trans-unit>
        <trans-unit id="61c41cb657724bf35da0dad82b0d5dee3326e95d" translate="yes" xml:space="preserve">
          <source>Sub returns the duration t-u. If the result exceeds the maximum (or minimum) value that can be stored in a Duration, the maximum (or minimum) duration will be returned. To compute t-d for a duration d, use t.Add(-d).</source>
          <target state="translated">Sub はデュレーション t-u を返します。結果がデュレーションに格納できる最大値(または最小値)を超える場合は、最大値(または最小値)のデュレーションが返されます。持続時間dに対してt-dを計算するには、t.Add(-d)を使用します。</target>
        </trans-unit>
        <trans-unit id="9a9cccdf849236c7b5afc32fedeaf0e730cf15fd" translate="yes" xml:space="preserve">
          <source>Sub returns the rectangle r translated by -p.</source>
          <target state="translated">Subは、-pで変換された矩形rを返します。</target>
        </trans-unit>
        <trans-unit id="c74b307e6862c7c0fdbabb48e4f241316eca6f53" translate="yes" xml:space="preserve">
          <source>Sub returns the vector p-q.</source>
          <target state="translated">Sub はベクトル p-q を返します。</target>
        </trans-unit>
        <trans-unit id="2660992e01b4593ff7e0d2ea96dbc6a6fcdbbc82" translate="yes" xml:space="preserve">
          <source>Sub sets z to the difference x-y and returns z.</source>
          <target state="translated">サブは、x-y の差分に z をセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="07c120e2c4cb601d9bfe9da745d95ee84f5c8f23" translate="yes" xml:space="preserve">
          <source>Sub sets z to the rounded difference x-y and returns z. Precision, rounding, and accuracy reporting are as for Add. Sub panics with ErrNaN if x and y are infinities with equal signs. The value of z is undefined in that case.</source>
          <target state="translated">Subは、zを丸めた差x-yにセットしてzを返します。精度、丸め、精度の報告は Add の場合と同様です。Subは、xとyが等号の無限大の場合、ErrNaNでパニックになります。この場合、zの値は未定義です。</target>
        </trans-unit>
        <trans-unit id="821524c66883b61b23da230e1f7ac6f247b61c28" translate="yes" xml:space="preserve">
          <source>Sub-repositories</source>
          <target state="translated">Sub-repositories</target>
        </trans-unit>
        <trans-unit id="027b254161eaa851d3de87e3e3811c330b4b1cfe" translate="yes" xml:space="preserve">
          <source>Sub32 returns the difference of x, y and borrow, diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Sub32 は、x,y,borrow の差分 diff=x-y-borrow を返します。borrow 入力は 0 または 1 でなければなりません.borrowOut 出力は 0 または 1 であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="19abe5243ff65ef214d8cfd1ed7dd0d253eaaf1e" translate="yes" xml:space="preserve">
          <source>Sub64 returns the difference of x, y and borrow: diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Sub64 は、x,y,borrow の差分を返します:diff=x-y-borrow。borrow 入力は 0 または 1 でなければなりません.borrowOut出力は0か1であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="3fc6e21e27e1d98c4a46c59e21cbbbe634de9bcb" translate="yes" xml:space="preserve">
          <source>SubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image.</source>
          <target state="translated">SubImageは,画像pのうち,rを通して見える部分を表す画像を返します.</target>
        </trans-unit>
        <trans-unit id="19b094dbedb2add32a27c12c5c0b06b9d304fb7c" translate="yes" xml:space="preserve">
          <source>Subdirectories</source>
          <target state="translated">Subdirectories</target>
        </trans-unit>
        <trans-unit id="abb46f6f4b961e90d924a27858c117c84efd6aae" translate="yes" xml:space="preserve">
          <source>SubexpNames returns the names of the parenthesized subexpressions in this Regexp. The name for the first sub-expression is names[1], so that if m is a match slice, the name for m[i] is SubexpNames()[i]. Since the Regexp as a whole cannot be named, names[0] is always the empty string. The slice should not be modified.</source>
          <target state="translated">SubexpNamesは、このRegexp内の括弧で括られた副式の名前を返します。最初の副式の名前は names[1]であり、m がマッチスライスの場合、m[i]の名前は SubexpNames()[i]となります。Regexp全体に名前を付けることはできないので、names[0]は常に空の文字列となります。スライスを変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="c9c047b864469812cfb4b3b886d30b5376a4d0df" translate="yes" xml:space="preserve">
          <source>Subjects returns a list of the DER-encoded subjects of all of the certificates in the pool.</source>
          <target state="translated">Subjects は、プール内のすべての証明書の DER エンコードされたサブジェクトのリストを返す。</target>
        </trans-unit>
        <trans-unit id="91e8bbbf1ff4c8e821148581549206c9787e494e" translate="yes" xml:space="preserve">
          <source>Subtests and Sub-benchmarks</source>
          <target state="translated">小テストとサブベンチマーク</target>
        </trans-unit>
        <trans-unit id="05cc8697fcb7ccef149a7858e8bd798cb2cd774f" translate="yes" xml:space="preserve">
          <source>Subtests can also be used to control parallelism. A parent test will only complete once all of its subtests complete. In this example, all tests are run in parallel with each other, and only with each other, regardless of other top-level tests that may be defined:</source>
          <target state="translated">サブテストは並列性を制御するために使用することもできます。親テストは、そのサブテストがすべて完了して初めて完了します。この例では、定義されている他のトップレベルテストに関係なく、すべてのテストがお互いに並行して実行され、お互いにのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="bb672ca35fe1893eef6f12fcd0a8efff47a2478c" translate="yes" xml:space="preserve">
          <source>Success reports whether the program exited successfully, such as with exit status 0 on Unix.</source>
          <target state="translated">成功はプログラムが正常に終了したかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="07eda2eb03735678c89d2490ea6410dd3ad1a43b" translate="yes" xml:space="preserve">
          <source>Such a file is usually paired with another file implementing the default functionality for other systems, which in this case would carry the constraint:</source>
          <target state="translated">このようなファイルは通常、他のシステムのデフォルト機能を実装した別のファイルと対になっており、この場合は制約があります。</target>
        </trans-unit>
        <trans-unit id="fc9ce14b28c6f2c3b72caf056ca604b2b96f7d2b" translate="yes" xml:space="preserve">
          <source>Sum</source>
          <target state="translated">Sum</target>
        </trans-unit>
        <trans-unit id="1037d5e9f233e3f6a6a25104581ccd4bbd6ac1c7" translate="yes" xml:space="preserve">
          <source>Sum returns the MD5 checksum of the data.</source>
          <target state="translated">Sumは、データのMD5チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="d8eeaf2ada0e780d70b60f2e9edbd46ef59d4a13" translate="yes" xml:space="preserve">
          <source>Sum returns the SHA-1 checksum of the data.</source>
          <target state="translated">Sum は、データの SHA-1 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="0dca98b14fcbfeb34897e7396c1a6dfa98d521b4" translate="yes" xml:space="preserve">
          <source>Sum224 returns the SHA224 checksum of the data.</source>
          <target state="translated">Sum224 は、データの SHA224 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="ba05916088015c0f1b00b88d9415ebfa726370d8" translate="yes" xml:space="preserve">
          <source>Sum256</source>
          <target state="translated">Sum256</target>
        </trans-unit>
        <trans-unit id="087b1fabd67b489187e993cab88dfd4147ea385d" translate="yes" xml:space="preserve">
          <source>Sum256 returns the SHA256 checksum of the data.</source>
          <target state="translated">Sum256は、データのSHA256チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="6bd95a96de2d8140b4ada3f2d7b194594facee01" translate="yes" xml:space="preserve">
          <source>Sum384 returns the SHA384 checksum of the data.</source>
          <target state="translated">Sum384 は、データの SHA384 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="bf1f6e0b5ced478fca66b19297a0e98baeedd390" translate="yes" xml:space="preserve">
          <source>Sum512 returns the SHA512 checksum of the data.</source>
          <target state="translated">Sum512 は、データの SHA512 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="3357361c0e72e316aab24916d39ed7d14bdb335d" translate="yes" xml:space="preserve">
          <source>Sum512_224 returns the Sum512/224 checksum of the data.</source>
          <target state="translated">Sum512_224は、データのSum512/224チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="ff71eecde6b5c686475ebd821438cf7dd50ffe32" translate="yes" xml:space="preserve">
          <source>Sum512_256 returns the Sum512/256 checksum of the data.</source>
          <target state="translated">Sum512_256 は、データの Sum512/256 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="4442b8443612835fd9bd367eb3496bb5cfec606a" translate="yes" xml:space="preserve">
          <source>Support for tracing tests and benchmarks built with the standard testing package is built into `go test`. For example, the following command runs the test in the current directory and writes the trace file (trace.out).</source>
          <target state="translated">標準のテストパッケージで構築されたテストとベンチマークのトレースのサポートは `go test` に組み込まれています。例えば、以下のコマンドはカレントディレクトリでテストを実行し、トレースファイル(trace.out)を書き出します。</target>
        </trans-unit>
        <trans-unit id="05492c0a57ea2d63ba2b476c7222b6bcdddbb676" translate="yes" xml:space="preserve">
          <source>Supported architectures for compiler &quot;gc&quot;: &quot;386&quot;, &quot;arm&quot;, &quot;arm64&quot;, &quot;amd64&quot;, &quot;amd64p32&quot;, &quot;mips&quot;, &quot;mipsle&quot;, &quot;mips64&quot;, &quot;mips64le&quot;, &quot;ppc64&quot;, &quot;ppc64le&quot;, &quot;riscv64&quot;, &quot;s390x&quot;, &quot;sparc64&quot;, &quot;wasm&quot;.</source>
          <target state="translated">コンパイラ &quot;gc&quot; でサポートされているアーキテクチャ &quot;386&quot;、&quot;arm&quot;、&quot;arm64&quot;、&quot;amd64&quot;、&quot;amd64p32&quot;、&quot;mips&quot;、&quot;mipsle&quot;、&quot;mips64&quot;、&quot;mips64le&quot;、&quot;ppc64&quot;、&quot;ppc64le&quot;、&quot;riscv64&quot;、&quot;s390x&quot;、&quot;sparc64&quot;、&quot;wasm&quot;。</target>
        </trans-unit>
        <trans-unit id="e8b59b633a995b7dd6a0e84deb15f21ce9bf242a" translate="yes" xml:space="preserve">
          <source>SwapInt32 atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapInt32 は、原子的に新しい値を *addr に格納し、前の *addr の値を返します。</target>
        </trans-unit>
        <trans-unit id="96490065dc4e2e645c8a89627e673eb95f4aaa28" translate="yes" xml:space="preserve">
          <source>SwapInt64 atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapInt64 は、アトミックに新しい値を *addr に格納し、前の *addr の値を返します。</target>
        </trans-unit>
        <trans-unit id="da115593d3ae663bb42ff237dd86576dfdedf6ad" translate="yes" xml:space="preserve">
          <source>SwapPointer atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapPointerは、原子的に新しい値を*addrに格納し、前の*addrの値を返す。</target>
        </trans-unit>
        <trans-unit id="0c0f6214095877962c7da65a2c141bf3b6cbecc8" translate="yes" xml:space="preserve">
          <source>SwapUint32 atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapUint32 は、原子的に新しい値を *addr に格納し、前の *addr の値を返します。</target>
        </trans-unit>
        <trans-unit id="899e9c7e854930b5577e53934a16009339f15457" translate="yes" xml:space="preserve">
          <source>SwapUint64 atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapUint64 は、原子的に新しい値を *addr に格納し、前の *addr の値を返す。</target>
        </trans-unit>
        <trans-unit id="18cdfb91a16523313759a1c794de0eb9712ac2b2" translate="yes" xml:space="preserve">
          <source>SwapUintptr atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapUintptr は、原子的に新しい値を *addr に格納し、前の *addr の値を返す。</target>
        </trans-unit>
        <trans-unit id="5c2b73e847c3ed8be17c9afe2788c2fedb5bc635" translate="yes" xml:space="preserve">
          <source>Swapper panics if the provided interface is not a slice.</source>
          <target state="translated">スワッパーは、提供されたインターフェースがスライスではない場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="0485bba36620f415adb72d21b9eac171cd9aadf1" translate="yes" xml:space="preserve">
          <source>Swapper returns a function that swaps the elements in the provided slice.</source>
          <target state="translated">Swapperは、指定されたスライス内の要素を交換する関数を返します。</target>
        </trans-unit>
        <trans-unit id="baf85dad7e64d73c6dc3f04eb46803a601b907a7" translate="yes" xml:space="preserve">
          <source>SymByAddr returns the text, data, or bss symbol starting at the given address.</source>
          <target state="translated">SymByAddr は、指定したアドレスから始まるテキスト、データ、または bss シンボルを返します。</target>
        </trans-unit>
        <trans-unit id="e6a580ed077335806f8a72f4c91bc2108aa36618" translate="yes" xml:space="preserve">
          <source>Symbol Binding - ELFNN_ST_BIND - st_info</source>
          <target state="translated">シンボルバインディング-ELFNN_ST_BIND-st_info</target>
        </trans-unit>
        <trans-unit id="998290f1606e44ec99b08646525255987ca67dd9" translate="yes" xml:space="preserve">
          <source>Symbol is similar to COFFSymbol with Name field replaced by Go string. Symbol also does not have NumberOfAuxSymbols.</source>
          <target state="translated">SymbolはCOFFSymbolに似ていますが、NameフィールドがGo文字列に置き換えられています。SymbolにはNumberOfAuxSymbolsがありません。</target>
        </trans-unit>
        <trans-unit id="e746caac18fb8c9ece11fba1c3858dd24402cee1" translate="yes" xml:space="preserve">
          <source>Symbol looks up the program counters listed in the request, responding with a table mapping program counters to function names. The package initialization registers it as /debug/pprof/symbol.</source>
          <target state="translated">Symbol はリクエストにリストアップされたプログラムカウンタを調べ、プログラムカウンタを関数名にマッピングしたテーブルで応答します。パッケージの初期化はこれを /debug/pprof/symbol として登録します。</target>
        </trans-unit>
        <trans-unit id="9183912a1c8677ccbfeafe4a95bb81fdaf9d6c67" translate="yes" xml:space="preserve">
          <source>Symbol type - ELFNN_ST_TYPE - st_info</source>
          <target state="translated">シンボルタイプ-ELFNN_ST_TYPE-st_info</target>
        </trans-unit>
        <trans-unit id="300ae1bf65f5418188fead7a4f6227a1a8cb17ab" translate="yes" xml:space="preserve">
          <source>Symbol visibility - ELFNN_ST_VISIBILITY - st_other</source>
          <target state="translated">シンボルの可視性-ELFNN_ST_VISIBILITY-st_other</target>
        </trans-unit>
        <trans-unit id="e0dd57ca387a759e2499962eadf5f79f0eaa8ee2" translate="yes" xml:space="preserve">
          <source>Symbols returns the symbol table for f.</source>
          <target state="translated">Symbolsは、fのシンボルテーブルを返します。</target>
        </trans-unit>
        <trans-unit id="40ab78f946263d95260d4886b240965a4da98f61" translate="yes" xml:space="preserve">
          <source>Symbols returns the symbol table for f. The symbols will be listed in the order they appear in f.</source>
          <target state="translated">Symbols は、f のシンボルテーブルを返します。</target>
        </trans-unit>
        <trans-unit id="2377d81c04be24a887c20fd3bd69bc0f09f37db5" translate="yes" xml:space="preserve">
          <source>Symlink creates newname as a symbolic link to oldname. If there is an error, it will be of type *LinkError.</source>
          <target state="translated">Symlink は newname を oldname へのシンボリックリンクとして作成します。エラーが発生した場合は、*LinkError 型になります。</target>
        </trans-unit>
        <trans-unit id="0aceec11151392e3e912ee288231038c58c328b4" translate="yes" xml:space="preserve">
          <source>Sync commits the current contents of the file to stable storage. Typically, this means flushing the file system's in-memory copy of recently written data to disk.</source>
          <target state="translated">Sync はファイルの現在の内容を安定したストレージにコミットします。通常、これは最近書き込まれたデータのファイルシステムのインメモリコピーをディスクにフラッシュすることを意味します。</target>
        </trans-unit>
        <trans-unit id="e15b4a502540aca9807844244039f56ac0ff96c5" translate="yes" xml:space="preserve">
          <source>Synchronous signals are signals triggered by errors in program execution: SIGBUS, SIGFPE, and SIGSEGV. These are only considered synchronous when caused by program execution, not when sent using os.Process.Kill or the kill program or some similar mechanism. In general, except as discussed below, Go programs will convert a synchronous signal into a run-time panic.</source>
          <target state="translated">同期信号とは、プログラム実行時のエラーによってトリガされる信号のことです。SIGBUS、SIGFPE、SIGSEGVです。これらは、プログラムの実行によって引き起こされた場合にのみ同期信号とみなされ、os.Process.Killやkillプログラム、または類似のメカニズムを使用して送信された場合には、同期信号とはみなされません。一般的には、以下で説明する場合を除いて、Goプログラムは同期信号をランタイムパニックに変換します。</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="14251985329004226786245f7238c38c1ab2c9f9" translate="yes" xml:space="preserve">
          <source>Synopsis returns a cleaned version of the first sentence in s. That sentence ends after the first period followed by space and not preceded by exactly one uppercase letter. The result string has no \n, \r, or \t characters and uses only single spaces between words. If s starts with any of the IllegalPrefixes, the result is the empty string.</source>
          <target state="translated">その文は、最初のピリオドの後にスペースが続き、大文字ではなく、正確に1つの大文字で終わるようになっています。結果の文字列には、\n、\r、または \t 文字はなく、単語間には単一のスペースのみを使用します。sがIllegalPrefixesのいずれかで始まる場合、結果は空の文字列です。</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="94881bde696c81108db9e992f3357d3d70383bb4" translate="yes" xml:space="preserve">
          <source>Sys returns system-dependent exit information about the process. Convert it to the appropriate underlying type, such as syscall.WaitStatus on Unix, to access its contents.</source>
          <target state="translated">Sysはプロセスに関するシステム依存の終了情報を返します。その内容にアクセスするには、Unix の syscall.WaitStatus のような適切な基礎となる型に変換してください。</target>
        </trans-unit>
        <trans-unit id="ce82965024d89928bce7d20275a546fd15078072" translate="yes" xml:space="preserve">
          <source>SysProcIDMap holds Container ID to Host ID mappings used for User Namespaces in Linux. See user_namespaces(7).</source>
          <target state="translated">SysProcIDMap は、Linux のユーザ名空間に使用されるコンテナ ID とホスト ID のマッピングを保持しています。user_namespaces(7)を参照してください。</target>
        </trans-unit>
        <trans-unit id="8ffbaaa01464f1d0b5846f06e745037abe0d8cb8" translate="yes" xml:space="preserve">
          <source>SysUsage returns system-dependent resource usage information about the exited process. Convert it to the appropriate underlying type, such as *syscall.Rusage on Unix, to access its contents. (On Unix, *syscall.Rusage matches struct rusage as defined in the getrusage(2) manual page.)</source>
          <target state="translated">SysUsage は、終了したプロセスに関するシステム依存のリソース使用情報を返します。その内容にアクセスするには、Unixの*syscall.Rusageのような適切な基礎となる型に変換してください。(Unixでは、*syscall.Rusageはgetrusage(2)マニュアルページで定義されているように構造体rusageにマッチします)。</target>
        </trans-unit>
        <trans-unit id="e293cc54d1f1c47b6fdb1085033440055e2faa2b" translate="yes" xml:space="preserve">
          <source>SyscallConn returns a raw file. This implements the syscall.Conn interface.</source>
          <target state="translated">SyscallConnは生のファイルを返します。これは syscall.Conn インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="93d325a9a596e81112db1a88f6cf17706c8e91ec" translate="yes" xml:space="preserve">
          <source>SyscallConn returns a raw network connection. This implements the syscall.Conn interface.</source>
          <target state="translated">SyscallConnは生のネットワーク接続を返します。これは syscall.Conn インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="aa615b3f3de4dc13fa4173050b52db98916467bd" translate="yes" xml:space="preserve">
          <source>SyscallError records an error from a specific system call.</source>
          <target state="translated">SyscallError は、特定のシステムコールからのエラーを記録します。</target>
        </trans-unit>
        <trans-unit id="de57d6136b78d4b44c51a17ce5f47f730586e6a6" translate="yes" xml:space="preserve">
          <source>SystemCertPool returns a copy of the system cert pool.</source>
          <target state="translated">SystemCertPool は、システム認証プールのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="5bc8f6a9ab808b5aa99fa9f5b51afdf83e241a9c" translate="yes" xml:space="preserve">
          <source>SystemRootsError results when we fail to load the system root certificates.</source>
          <target state="translated">システムルート証明書のロードに失敗すると、SystemRootsError が発生します。</target>
        </trans-unit>
        <trans-unit id="326b735dbfcf185462598a45a443d5db5a2c18cd" translate="yes" xml:space="preserve">
          <source>SystemTime returns the system CPU time of the exited process and its children.</source>
          <target state="translated">SystemTimeは、終了したプロセスとその子プロセスのシステムCPU時間を返します。</target>
        </trans-unit>
        <trans-unit id="bd9dc41e485032cb18e9d13d513ba555be1b33c2" translate="yes" xml:space="preserve">
          <source>T is a type passed to Test functions to manage test state and support formatted test logs. Logs are accumulated during execution and dumped to standard output when done.</source>
          <target state="translated">Tは、テストの状態を管理し、フォーマットされたテストログをサポートするために、テスト関数に渡される型です。ログは実行中に蓄積され、実行が完了すると標準出力にダンプされます。</target>
        </trans-unit>
        <trans-unit id="d71f7f3fa4e9f0ba0065f39db28f69d358c4b941" translate="yes" xml:space="preserve">
          <source>TB is the interface common to T and B.</source>
          <target state="translated">TBは、TとBに共通のインタフェースである。</target>
        </trans-unit>
        <trans-unit id="671a2dd281c27979f8b5f140c5da50e321430a64" translate="yes" xml:space="preserve">
          <source>TBSCertificateList represents the ASN.1 structure of the same name. See RFC 5280, section 5.1.</source>
          <target state="translated">TBSCertificateListは、同名のASN.1構造体を表す。RFC 5280の第5.1節を参照のこと。</target>
        </trans-unit>
        <trans-unit id="2984ada09d0c49745872575be1763fe615cf3de7" translate="yes" xml:space="preserve">
          <source>TCPAddr represents the address of a TCP end point.</source>
          <target state="translated">TCPAddr は TCP エンドポイントのアドレスを表します。</target>
        </trans-unit>
        <trans-unit id="623c2c8aa88d77780fe4e0bcba75694b81bcf2ad" translate="yes" xml:space="preserve">
          <source>TCPConn is an implementation of the Conn interface for TCP network connections.</source>
          <target state="translated">TCPConnは、TCPネットワーク接続のためのConnインターフェースの実装です。</target>
        </trans-unit>
        <trans-unit id="1bbfc48812fe8aa4d93c086976c0d5cdc5424e43" translate="yes" xml:space="preserve">
          <source>TCPListener is a TCP network listener. Clients should typically use variables of type Listener instead of assuming TCP.</source>
          <target state="translated">TCPListener は TCP ネットワーク・リスナーです。クライアントは通常、TCPを想定するのではなくListener型の変数を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c0df2a7fffd9d8cf03b29589d0b72452730e5dd3" translate="yes" xml:space="preserve">
          <source>TLS 1.3 is available on an opt-out basis in Go 1.13. To disable it, set the GODEBUG environment variable (comma-separated key=value options) such that it includes &quot;tls13=0&quot;.</source>
          <target state="translated">TLS 1.3は、Go 1.13ではオプトアウトで利用できます。これを無効にするには、GODEBUG環境変数(カンマで区切られたキー=値のオプション)に &quot;tls13=0 &quot;を含むように設定します。</target>
        </trans-unit>
        <trans-unit id="daa5896e5821b88d0d9b26d2bc85c2d021b848c8" translate="yes" xml:space="preserve">
          <source>TLSConnectionState returns the client's TLS connection state. The return values are their zero values if StartTLS did not succeed.</source>
          <target state="translated">TLSConnectionState は、クライアントの TLS 接続状態を返します。戻り値は、StartTLS が成功しなかった場合のゼロ値です。</target>
        </trans-unit>
        <trans-unit id="ed012370216d609d48fc2b869f8a011268923cad" translate="yes" xml:space="preserve">
          <source>TODO returns a non-nil, empty Context. Code should use context.TODO when it's unclear which Context to use or it is not yet available (because the surrounding function has not yet been extended to accept a Context parameter).</source>
          <target state="translated">TODO は、非 null の空の Context を返します。どのコンテキストを使用するかが不明な場合や、まだ利用できない場合 (周囲の関数がまだ拡張されていないため、Context パラメータを受け付けることができません)には、コードは context.TODO を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1f541ebdf888dacb11e44ff51c13846474081ba9" translate="yes" xml:space="preserve">
          <source>Tab-terminated cells in contiguous lines constitute a column. The Writer inserts padding as needed to make all cells in a column have the same width, effectively aligning the columns. It assumes that all characters have the same width, except for tabs for which a tabwidth must be specified. Column cells must be tab-terminated, not tab-separated: non-tab terminated trailing text at the end of a line forms a cell but that cell is not part of an aligned column. For instance, in this example (where | stands for a horizontal tab):</source>
          <target state="translated">連続した行のタブ終端セルが 1 列を構成します。ライターは、列内のすべてのセルが同じ幅になるように必要に応じてパディングを挿入し、列を効果的に整列させます。タ ブ幅を指定する必要のあるタブを除いては、 すべてのキ ャ ラ ク タ が同じ幅を持つ こ と を前提 と し ています。列セルは、 タブ区切りではな く タ ブ終端にする必要があ り ます:行末のタブ終端以外の末尾のテキス ト はセルを形成 し ますが、 そのセルは整列された列の一部ではあ り ません。た と えば、 こ の例では (ここで|は水平タブを表します)。</target>
        </trans-unit>
        <trans-unit id="9baa6d565b56c1e4861e3df81a8fd8df65d699d4" translate="yes" xml:space="preserve">
          <source>Table 1 in [2] suggests maximum numbers of primes for a given size.</source>
          <target state="translated">2]の表1は、与えられたサイズの最大素数を示唆しています。</target>
        </trans-unit>
        <trans-unit id="ba3ee22bd3b233bdb404d63bfe71ba0cb11ae0a4" translate="yes" xml:space="preserve">
          <source>Table is a 256-word table representing the polynomial for efficient processing.</source>
          <target state="translated">テーブルは、効率的な処理のための多項式を表す256ワードのテーブルです。</target>
        </trans-unit>
        <trans-unit id="599b448991ae5ae6d130b6356ce6b00630c5cefb" translate="yes" xml:space="preserve">
          <source>Table represents a Go symbol table. It stores all of the symbols decoded from the program and provides methods to translate between symbols, names, and addresses.</source>
          <target state="translated">テーブルは囲碁のシンボルテーブルを表します。プログラムからデコードされたすべてのシンボルを格納し、シンボル、名前、アドレス間の変換方法を提供します。</target>
        </trans-unit>
        <trans-unit id="bfc4ba347929d28c193a400550bae587488f16cd" translate="yes" xml:space="preserve">
          <source>Tag returns the i'th field tag for 0 &amp;lt;= i &amp;lt; NumFields().</source>
          <target state="translated">Tagは、0 &amp;lt;= i &amp;lt;NumFields（）のi番目のフィールドタグを返します。</target>
        </trans-unit>
        <trans-unit id="7a39b84c91d8c550355f46b331fdfde2ffca5ba7" translate="yes" xml:space="preserve">
          <source>Tag sizes between 12 and 16 bytes are allowed.</source>
          <target state="translated">タグのサイズは12~16バイトの間で使用できます。</target>
        </trans-unit>
        <trans-unit id="9dda0ce21be12978cbb42d63ed48bd36a71555e8" translate="yes" xml:space="preserve">
          <source>Taken from &lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&quot;&gt;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&quot;&gt;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&lt;/a&gt;から取得</target>
        </trans-unit>
        <trans-unit id="133552ebfbcce8310f8920695422699d5256bac9" translate="yes" xml:space="preserve">
          <source>Tan</source>
          <target state="translated">Tan</target>
        </trans-unit>
        <trans-unit id="c442668b04fe0d2fb49d4d83b1b51198b583f812" translate="yes" xml:space="preserve">
          <source>Tan returns the tangent of the radian argument x.</source>
          <target state="translated">Tanは、ラジアンの引数xの正接を返します。</target>
        </trans-unit>
        <trans-unit id="9f8f5243ed4843c5154158c2ff20cd9a586739e0" translate="yes" xml:space="preserve">
          <source>Tan returns the tangent of x.</source>
          <target state="translated">Tanはxの正接を返します。</target>
        </trans-unit>
        <trans-unit id="19bff9fbbbadd7b339e0ee0ae1715d62fea9cae0" translate="yes" xml:space="preserve">
          <source>Tanh</source>
          <target state="translated">Tanh</target>
        </trans-unit>
        <trans-unit id="dc8ae90d27ce708b07a5ac10906ccc3ed208c4a5" translate="yes" xml:space="preserve">
          <source>Tanh returns the hyperbolic tangent of x.</source>
          <target state="translated">Tanhはxの双曲正接を返します。</target>
        </trans-unit>
        <trans-unit id="6f0a22a02d454a68d024fa67fa9340156799d88b" translate="yes" xml:space="preserve">
          <source>Tape archives (tar) are a file format for storing a sequence of files that can be read and written in a streaming manner. This package aims to cover most variations of the format, including those produced by GNU and BSD tar tools.</source>
          <target state="translated">テープアーカイブ (tar)は、ストリーミング形式で読み書き可能な一連のファイルを保存するためのファイル形式です。本パッケージは、GNU や BSD の tar ツールで作成されたものを含め、この形式のほとんどのバリエーションをカバーすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="f11f02db734667c97fad6ffb5c8e393a00b87399" translate="yes" xml:space="preserve">
          <source>Task is a data type for tracing a user-defined, logical operation.</source>
          <target state="translated">タスクは、ユーザー定義の論理操作をトレースするためのデータ型です。</target>
        </trans-unit>
        <trans-unit id="a9e55d223a3d4713691d397b40624caef60d5252" translate="yes" xml:space="preserve">
          <source>TeeReader</source>
          <target state="translated">TeeReader</target>
        </trans-unit>
        <trans-unit id="c3ce03ea658d6ce846ba37ed8673f608fd0ba578" translate="yes" xml:space="preserve">
          <source>TeeReader returns a Reader that writes to w what it reads from r. All reads from r performed through it are matched with corresponding writes to w. There is no internal buffering - the write must complete before the read completes. Any error encountered while writing is reported as a read error.</source>
          <target state="translated">TeeReader は、r から読み取ったものを w に書き込むリーダーを返します。このリーダーを介して実行される r からのすべての読み取りは、対応する w への書き込みと一致します。書き込み中にエラーが発生した場合は、読み取りエラーとして報告されます。</target>
        </trans-unit>
        <trans-unit id="d5aae156b3babace54749a4ff370cbf166528804" translate="yes" xml:space="preserve">
          <source>Tell returns the current position in the line table.</source>
          <target state="translated">Tellは、ラインテーブルの現在の位置を返します。</target>
        </trans-unit>
        <trans-unit id="243b371792899304742de51767e5e63dc878faba" translate="yes" xml:space="preserve">
          <source>TempDir</source>
          <target state="translated">TempDir</target>
        </trans-unit>
        <trans-unit id="99e70473aa5b1571f3701ff2584745139273d8ab" translate="yes" xml:space="preserve">
          <source>TempDir creates a new temporary directory in the directory dir with a name beginning with prefix and returns the path of the new directory. If dir is the empty string, TempDir uses the default directory for temporary files (see os.TempDir). Multiple programs calling TempDir simultaneously will not choose the same directory. It is the caller's responsibility to remove the directory when no longer needed.</source>
          <target state="translated">TempDir は、prefix で始まる名前のディレクトリ dir に新しい一時ディレクトリを作成し、新しいディレクトリのパスを返します。dir が空文字列の場合、TempDir は一時ファイル用のデフォルトのディレクトリを使用します (os.TempDir を参照してください)。TempDir を同時に呼び出す複数のプログラムが同じディレクトリを選択することはありません。不要になったらディレクトリを削除するのは呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="275584eb4c05e91a05657287b9e5e68b19aedf60" translate="yes" xml:space="preserve">
          <source>TempDir returns the default directory to use for temporary files.</source>
          <target state="translated">TempDir は、一時ファイルに使用するデフォルトのディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="d7cc1fbb5a71addb97fa8de33ce419d1f28b35a1" translate="yes" xml:space="preserve">
          <source>TempFile</source>
          <target state="translated">TempFile</target>
        </trans-unit>
        <trans-unit id="ba14fe997bc74680fd4532ceead516a44881c27a" translate="yes" xml:space="preserve">
          <source>TempFile (Suffix)</source>
          <target state="translated">TempFile (サフィックス)</target>
        </trans-unit>
        <trans-unit id="db71768a24bbe351f05252c3b917cc624a9ef1b3" translate="yes" xml:space="preserve">
          <source>TempFile creates a new temporary file in the directory dir, opens the file for reading and writing, and returns the resulting *os.File. The filename is generated by taking pattern and adding a random string to the end. If pattern includes a &quot;*&quot;, the random string replaces the last &quot;*&quot;. If dir is the empty string, TempFile uses the default directory for temporary files (see os.TempDir). Multiple programs calling TempFile simultaneously will not choose the same file. The caller can use f.Name() to find the pathname of the file. It is the caller's responsibility to remove the file when no longer needed.</source>
          <target state="translated">TempFileは、ディレクトリdirに新しい一時ファイルを作成し、読み書きのためにファイルを開き、その結果の*os.Fileを返します。ファイル名は、パターンを取り、最後にランダムな文字列を追加することで生成されます。patternに &quot;*&quot;が含まれている場合、ランダムな文字列が最後の &quot;*&quot;に置き換わります。dir が空文字列の場合、TempFile は一時ファイル用のデフォルトのディレクトリを使用します (os.TempDir を参照してください)。TempFile を同時に呼び出す複数のプログラムが同じファイルを選択することはありません。呼び出し元は f.Name()を使用してファイルのパス名を見つけることができます。不要になったらファイルを削除するのは呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="52ee9ac00f43714b0b4818dd84d35b8b6557c7c3" translate="yes" xml:space="preserve">
          <source>Template (Block)</source>
          <target state="translated">テンプレート(ブロック</target>
        </trans-unit>
        <trans-unit id="74122feafa7458ac08ce0eb420614965c6703346" translate="yes" xml:space="preserve">
          <source>Template (Func)</source>
          <target state="translated">テンプレート(Func)</target>
        </trans-unit>
        <trans-unit id="2682dd16a44a1aa85841c66918e903265b4a3cd6" translate="yes" xml:space="preserve">
          <source>Template (Glob)</source>
          <target state="translated">テンプレート(Glob)</target>
        </trans-unit>
        <trans-unit id="b329235171f350105da0e424a6e94302aadf509f" translate="yes" xml:space="preserve">
          <source>Template (Helpers)</source>
          <target state="translated">テンプレート(ヘルパー</target>
        </trans-unit>
        <trans-unit id="f6c8b5d715e6b1e91ba606c90a46ade44fbfcfc3" translate="yes" xml:space="preserve">
          <source>Template (Parsefiles)</source>
          <target state="translated">テンプレート(パースファイル</target>
        </trans-unit>
        <trans-unit id="57600593178e53d1b30c9ce35cfc8c0a348f3a2c" translate="yes" xml:space="preserve">
          <source>Template (Share)</source>
          <target state="translated">テンプレート(シェア</target>
        </trans-unit>
        <trans-unit id="85b91409ae0c75ad6a8c43a15d791cc0c6067ae4" translate="yes" xml:space="preserve">
          <source>Template is a specialized Template from &quot;text/template&quot; that produces a safe HTML document fragment.</source>
          <target state="translated">テンプレートとは、安全なHTML文書の断片を生成する「text/template」に特化したテンプレートです。</target>
        </trans-unit>
        <trans-unit id="d8a89275d0782e6367eafd96ad18e35d72254fb0" translate="yes" xml:space="preserve">
          <source>Template is the representation of a parsed template. The *parse.Tree field is exported only for use by html/template and should be treated as unexported by all other clients.</source>
          <target state="translated">テンプレートは、解析されたテンプレートの表現です。parse.Treeフィールドはhtml/templateで使用するためだけにエクスポートされ、他のすべてのクライアントではエクスポートされていないものとして扱われます。</target>
        </trans-unit>
        <trans-unit id="19cafd4f58542bc1848a2bc09f68f32df89aaeb6" translate="yes" xml:space="preserve">
          <source>Template.Delims</source>
          <target state="translated">Template.Delims</target>
        </trans-unit>
        <trans-unit id="a8aa430f1c13b8e8ba33d56534b8f8c54974c35f" translate="yes" xml:space="preserve">
          <source>TemplateNode represents a {{template}} action.</source>
          <target state="translated">TemplateNodeは{{{template}}アクションを表します。</target>
        </trans-unit>
        <trans-unit id="6272b08c56a555c9301dfcc377b8ee08eca7de29" translate="yes" xml:space="preserve">
          <source>Templates are executed by applying them to a data structure. Annotations in the template refer to elements of the data structure (typically a field of a struct or a key in a map) to control execution and derive values to be displayed. Execution of the template walks the structure and sets the cursor, represented by a period '.' and called &quot;dot&quot;, to the value at the current location in the structure as execution proceeds.</source>
          <target state="translated">テンプレートは、データ構造体に適用することで実行されます。テンプレート内の注釈は、データ構造体の要素(典型的には構造体のフィールドまたはマップのキー)を参照して、実行を制御し、表示される値を導出します。テンプレートの実行は構造体を歩き、実行が進むにつれて、ピリオド '.' で表され、&quot;ドット&quot; と呼ばれるカーソルを構造体の現在位置の値に設定します。</target>
        </trans-unit>
        <trans-unit id="d659d268d0b2876b00930d9cefac00e94082414d" translate="yes" xml:space="preserve">
          <source>Templates can be redefined in successive calls to Parse, before the first use of Execute on t or any associated template. A template definition with a body containing only white space and comments is considered empty and will not replace an existing template's body. This allows using Parse to add new named template definitions without overwriting the main template body.</source>
          <target state="translated">テンプレートは、t または関連するテンプレートで最初に Execute on t を使用する前に、Parse を連続して呼び出すことで再定義することができます。ホワイトスペースとコメントのみを含むボディを持つテンプレート定義は空とみなされ、既存のテンプレートのボディを置き換えることはありません。これにより、Parse を使用して、メイン・テンプレート・ボディを上書きせずに新しい名前付きテンプレート定義を追加することができます。</target>
        </trans-unit>
        <trans-unit id="b0dad97eb547b69ff6ae16e7728cdc906f69fe6a" translate="yes" xml:space="preserve">
          <source>Templates can be redefined in successive calls to Parse. A template definition with a body containing only white space and comments is considered empty and will not replace an existing template's body. This allows using Parse to add new named template definitions without overwriting the main template body.</source>
          <target state="translated">テンプレートは、Parse を連続して呼び出すことで再定義することができます。ホワイトスペースとコメントのみを含むボディを持つテンプレート定義は空とみなされ、既存のテンプレートのボディを置き換えることはありません。これにより、Parse を使用して、メインのテンプレート本体を上書きせずに新しい名前付きテンプレート定義を追加することができます。</target>
        </trans-unit>
        <trans-unit id="7b101f8846f53e53dd0074ea44ad4ea7b299215d" translate="yes" xml:space="preserve">
          <source>Templates returns a slice of defined templates associated with t.</source>
          <target state="translated">Templatesは、tに関連付けられた定義されたテンプレートのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="ef678e78b264d52108e80621ab16809ee2f68f32" translate="yes" xml:space="preserve">
          <source>Templates returns a slice of the templates associated with t, including t itself.</source>
          <target state="translated">Templatesは、tに関連付けられたテンプレートのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="63499f131caeb094b508fda158f4d32cdfc15875" translate="yes" xml:space="preserve">
          <source>Temporary reports whether the DNS error is known to be temporary. This is not always known; a DNS lookup may fail due to a temporary error and return a DNSError for which Temporary returns false.</source>
          <target state="translated">Temporary は、DNS エラーが一時的なものであることがわかっているかどうかを報告します。これは常に知られているわけではありません。 DNS の検索が一時的なエラーのために失敗し、Temporary が false を返す DNSError を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="102ab778dfcf2daa890ddca81b62a6c8c57e866c" translate="yes" xml:space="preserve">
          <source>Tests or benchmarks may be skipped at run time with a call to the Skip method of *T or *B:</source>
          <target state="translated">テストやベンチマークは、*Tまたは*BのSkipメソッドを呼び出すことで、実行時にスキップすることができます。</target>
        </trans-unit>
        <trans-unit id="4fb2cdb8c84498e97b67876bcf9179f6c6a0681c" translate="yes" xml:space="preserve">
          <source>Text and spaces</source>
          <target state="translated">テキストとスペース</target>
        </trans-unit>
        <trans-unit id="7c3578369bc9761a19920ddfd71d5074fb77328e" translate="yes" xml:space="preserve">
          <source>Text converts the floating-point number x to a string according to the given format and precision prec. The format is one of:</source>
          <target state="translated">テキストは、浮動小数点数xを指定されたフォーマットと精度precに従って文字列に変換します。フォーマットは以下のいずれかです。</target>
        </trans-unit>
        <trans-unit id="9714bb7b9d9dc65203e2f28091e607a38d20869a" translate="yes" xml:space="preserve">
          <source>Text in the format string that is not recognized as part of the reference time is echoed verbatim during Format and expected to appear verbatim in the input to Parse.</source>
          <target state="translated">参照時間の一部として認識されないフォーマット文字列のテキストは、フォーマット中に冗長にエコーされ、パースへの入力では冗長に表示されることが期待されます。</target>
        </trans-unit>
        <trans-unit id="2a87e174a24b19b122c0ab179b85b925e794409f" translate="yes" xml:space="preserve">
          <source>Text returns the most recent token generated by a call to Scan as a newly allocated string holding its bytes.</source>
          <target state="translated">テキストは、Scan の呼び出しによって生成された最新のトークンを、そのバイト数を保持する新たに確保された文字列として返します。</target>
        </trans-unit>
        <trans-unit id="9757ee25c7224af6e75db771ea323fc05ac31e21" translate="yes" xml:space="preserve">
          <source>Text returns the string representation of x in the given base. Base must be between 2 and 62, inclusive. The result uses the lower-case letters 'a' to 'z' for digit values 10 to 35, and the upper-case letters 'A' to 'Z' for digit values 36 to 61. No prefix (such as &quot;0x&quot;) is added to the string. If x is a nil pointer it returns &quot;&amp;lt;nil&amp;gt;&quot;.</source>
          <target state="translated">テキストは、指定されたベースでのxの文字列表現を返します。ベースは2以上62以下でなければなりません。結果では、10〜35の数字の値には小文字の 'a'〜 'z'を使用し、36〜61の数字の値には大文字の 'A'〜 'Z'を使用します。プレフィックスなし（ &quot;0x&quot;など） ）が文字列に追加されます。xがnilポインターの場合、 &quot;&amp;lt;nil&amp;gt;&quot;を返します。</target>
        </trans-unit>
        <trans-unit id="42341adeec7d736d3551b283379c31741e77e4f9" translate="yes" xml:space="preserve">
          <source>Text returns the text of the comment. Comment markers (//, /*, and */), the first space of a line comment, and leading and trailing empty lines are removed. Multiple empty lines are reduced to one, and trailing space on lines is trimmed. Unless the result is empty, it is newline-terminated.</source>
          <target state="translated">Text はコメントのテキストを返します。コメントマーカー(//,/*,*/)、行コメントの最初のスペース、行の先頭と末尾の空行は削除されます。複数の空行は1行に縮小され、行末のスペースはトリムされます。結果が空でない限り、結果は改行で終了します。</target>
        </trans-unit>
        <trans-unit id="02af2db9a5ef05bc960487d876c4df951f9ad592" translate="yes" xml:space="preserve">
          <source>Text types have the charset parameter set to &quot;utf-8&quot; by default.</source>
          <target state="translated">テキストタイプは、デフォルトでcharsetパラメータが &quot;utf-8 &quot;に設定されています。</target>
        </trans-unit>
        <trans-unit id="b44c08e7f92ae7b5fe535298ff7558bf9d8a0cab" translate="yes" xml:space="preserve">
          <source>TextMarshaler is the interface implemented by an object that can marshal itself into a textual form.</source>
          <target state="translated">TextMarshalerは、自分自身をテキスト形式にマーシャルすることができるオブジェクトによって実装されたインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="ae8b7afc36cfb51ffddc286e90577602c85186e4" translate="yes" xml:space="preserve">
          <source>TextNode holds plain text.</source>
          <target state="translated">TextNodeはプレーンテキストを保持します。</target>
        </trans-unit>
        <trans-unit id="48668880c8086b3c4c912b1de227b18b3d9a93e1" translate="yes" xml:space="preserve">
          <source>TextUnmarshaler is the interface implemented by an object that can unmarshal a textual representation of itself.</source>
          <target state="translated">TextUnmarshalerは、それ自身のテキスト表現をアンマーシャリングすることができるオブジェクトによって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="33b69b32d53f67278f1556c03b99ca73467e15b3" translate="yes" xml:space="preserve">
          <source>That is, when matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses a match that is as long as possible. This so-called leftmost-longest matching is the same semantics that early regular expression implementations used and that POSIX specifies.</source>
          <target state="translated">つまり、テキストとのマッチングを行う場合、正規表現は入力の中で可能な限り早く始まるマッチ(左端)を返し、その中から可能な限り長いマッチを選択します。このいわゆる左端から最長のマッチングは、初期の正規表現実装が使用していたものと同じセマンティクスであり、POSIXが指定しているものです。</target>
        </trans-unit>
        <trans-unit id="1fe9add248f3617655fdc8371d42751cba2e4007" translate="yes" xml:space="preserve">
          <source>The &quot;omitempty&quot; option specifies that the field should be omitted from the encoding if the field has an empty value, defined as false, 0, a nil pointer, a nil interface value, and any empty array, slice, map, or string.</source>
          <target state="translated">omitempty &quot;オプションは、フィールドが空の値を持つ場合に、エンコーディングからフィールドを省略することを指定する。</target>
        </trans-unit>
        <trans-unit id="71d19b0f94317203bba62dcd8f10cd68c650f96b" translate="yes" xml:space="preserve">
          <source>The &quot;string&quot; option signals that a field is stored as JSON inside a JSON-encoded string. It applies only to fields of string, floating point, integer, or boolean types. This extra level of encoding is sometimes used when communicating with JavaScript programs:</source>
          <target state="translated">string &quot;オプションは、フィールドがJSONエンコードされた文字列の中にJSONとして保存されていることを示します。これは、文字列、浮動小数点、整数、ブール型のフィールドにのみ適用されます。この余分なレベルのエンコーディングは、JavaScriptプログラムと通信する際に使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="d1ee29ca2c06802f34981d89493c0bb6f1d6d312" translate="yes" xml:space="preserve">
          <source>The %!s just shows the print verb in use when the failure occurred. If the panic is caused by a nil receiver to an Error or String method, however, the output is the undecorated string, &quot;&amp;lt;nil&amp;gt;&quot;.</source>
          <target state="translated">％！sは、障害が発生したときに使用中の印刷動詞を表示するだけです。ただし、パニックの原因がErrorまたはStringメソッドのnilレシーバーである場合、出力は装飾されていない文字列 &quot;&amp;lt;nil&amp;gt;&quot;です。</target>
        </trans-unit>
        <trans-unit id="743e4c8e9a91e391bfa222546fd5a23a69c683b9" translate="yes" xml:space="preserve">
          <source>The *Basic type for Typ[Byte] will have the name &quot;uint8&quot;. Use Universe.Lookup(&quot;byte&quot;).Type() to obtain the specific alias basic type named &quot;byte&quot; (and analogous for &quot;rune&quot;).</source>
          <target state="translated">Typ[Byte]の*Basic型は &quot;uint8 &quot;という名前になります。Universe.Lookup(&quot;byte&quot;).Type()を使用して、&quot;byte &quot;という名前の特定のエイリアス基本型(および &quot;rune &quot;の類似型)を取得します。</target>
        </trans-unit>
        <trans-unit id="850dd1df743a69c63fe9886362ac383beaaa22a7" translate="yes" xml:space="preserve">
          <source>The AES block size in bytes.</source>
          <target state="translated">AES のブロックサイズをバイト単位で指定します.</target>
        </trans-unit>
        <trans-unit id="5673ab8326600fbbe495a6285dd8ced305ce9de8" translate="yes" xml:space="preserve">
          <source>The AES operations in this package are not implemented using constant-time algorithms. An exception is when running on systems with enabled hardware support for AES that makes these operations constant-time. Examples include amd64 systems using AES-NI extensions and s390x systems using Message-Security-Assist extensions. On such systems, when the result of NewCipher is passed to cipher.NewGCM, the GHASH operation used by GCM is also constant-time.</source>
          <target state="translated">本パッケージに含まれる AES の演算には定数時間アルゴリズムは使用されていません。例外は、AES のハードウェアサポートを有効にしているシステムで、これらの操作を一定時間で行う場合です。例えば、AES-NI 拡張を使用している amd64 システムや、Message-Security-Assist 拡張を使用している s390x システムなどです。このようなシステムでは、NewCipher の結果が cipher.NewGCM に渡されると、GCM が使用する GHASH 操作も一定時間になります。</target>
        </trans-unit>
        <trans-unit id="6adb0b7099e3661b5d507077f904503946e1529a" translate="yes" xml:space="preserve">
          <source>The AuthorityKeyId will be taken from the SubjectKeyId of parent, if any, unless the resulting certificate is self-signed. Otherwise the value from template will be used.</source>
          <target state="translated">AuthorityKeyId は、結果の証明書が自己署名されていない限り、親の SubjectKeyId から取得します。そうでない場合は、テンプレートの値が使用されます。</target>
        </trans-unit>
        <trans-unit id="ef02c253bf1371acc1a3bc5ebf403abe9da8e69d" translate="yes" xml:space="preserve">
          <source>The CPU profile is not available as a Profile. It has a special API, the StartCPUProfile and StopCPUProfile functions, because it streams output to a writer during profiling.</source>
          <target state="translated">CPUプロファイルはプロファイルとして利用できません。プロファイリング中にライターに出力をストリームするため、StartCPUProfile、StopCPUProfileという特殊なAPIを持っています。</target>
        </trans-unit>
        <trans-unit id="36bb730fcee3dc3ab8099094b237b4e5ff536824" translate="yes" xml:space="preserve">
          <source>The Call method waits for the remote call to complete while the Go method launches the call asynchronously and signals completion using the Call structure's Done channel.</source>
          <target state="translated">Call メソッドはリモートコールが完了するまで待機し、Go メソッドは非同期的にコールを起動し、Call 構造体の Done チャネルを使用して完了を通知します。</target>
        </trans-unit>
        <trans-unit id="fa9c5434f905167654701708a6911e94eaa76597" translate="yes" xml:space="preserve">
          <source>The Client and Transport return Responses from servers once the response headers have been received. The response body is streamed on demand as the Body field is read.</source>
          <target state="translated">クライアントとトランスポートは、応答ヘッダを受信すると、サーバから応答を返します。レスポンスボディは、Body フィールドが読み込まれると、要求に応じてストリームされます。</target>
        </trans-unit>
        <trans-unit id="a06861d55f6598b58fca7ecb30c8e99763835023" translate="yes" xml:space="preserve">
          <source>The Client's Transport typically has internal state (cached TCP connections), so Clients should be reused instead of created as needed. Clients are safe for concurrent use by multiple goroutines.</source>
          <target state="translated">クライアントのトランスポートは通常、内部状態(TCP 接続のキャッシュ)を持っているので、クライアントは必要に応じて作成するのではなく、再利用するべきです。クライアントは複数のゴロチンが同時に使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="ceca2d7732940705f6d00b5d32a4fb0ac5b5ffee" translate="yes" xml:space="preserve">
          <source>The CloseNotifier interface is implemented by ResponseWriters which allow detecting when the underlying connection has gone away.</source>
          <target state="translated">CloseNotifier インターフェイスは ResponseWriters によって実装されており、これを使用することで、基礎となる接続がなくなったことを検出することができます。</target>
        </trans-unit>
        <trans-unit id="e611d14841eea36df4afcbef6632f0e94c16f389" translate="yes" xml:space="preserve">
          <source>The Comments list contains all comments in the source file in order of appearance, including the comments that are pointed to from other nodes via Doc and Comment fields.</source>
          <target state="translated">コメント リストには、Doc および Comment フィールドを介して他のノードから指摘されたコメントを含む、ソース ファイル内のすべてのコメントが外観順に表示されます。</target>
        </trans-unit>
        <trans-unit id="7243291c556ac8dd62df98afdad8c3760dcef423" translate="yes" xml:space="preserve">
          <source>The Content-Type header is set to application/x-www-form-urlencoded. To set other headers, use NewRequest and Client.Do.</source>
          <target state="translated">Content-Typeヘッダはapplication/x-www-form-urlencodedに設定されています。他のヘッダを設定するには、NewRequest と Client.Do を使用します。</target>
        </trans-unit>
        <trans-unit id="4c8514b948c44917ccd4528524ea490c8df7afe9" translate="yes" xml:space="preserve">
          <source>The Content-Type header is set to application/x-www-form-urlencoded. To set other headers, use NewRequest and DefaultClient.Do.</source>
          <target state="translated">Content-Typeヘッダはapplication/x-www-form-urlencodedに設定されています。他のヘッダを設定するには、NewRequestとDefaultClient.Doを使用します。</target>
        </trans-unit>
        <trans-unit id="e64fbf6aec6e290cb2a86c841a198b35f0414494" translate="yes" xml:space="preserve">
          <source>The Context field will be zero to gather a traceback from the current program execution point. In this case, the traceback function will be called from C code.</source>
          <target state="translated">現在のプログラム実行ポイントからのトレースバックを収集するために、Contextフィールドは0になります。この場合、トレースバック関数はCコードから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0d4ab0b54e24df8d963181a5b8f48a80c3f0be3b" translate="yes" xml:space="preserve">
          <source>The Copy function uses ReaderFrom if available.</source>
          <target state="translated">コピー機能は、ReaderFromがあればそれを使用します。</target>
        </trans-unit>
        <trans-unit id="64b7a752d1105251970c527872a99e908894fe83" translate="yes" xml:space="preserve">
          <source>The Copy function uses WriterTo if available.</source>
          <target state="translated">コピー関数は、利用可能な場合はWriterToを使用します。</target>
        </trans-unit>
        <trans-unit id="4068b76cb1fd1e06d5771c04e2c02b7fd65472c1" translate="yes" xml:space="preserve">
          <source>The DES block size in bytes.</source>
          <target state="translated">DESブロックのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="1b8c2351859f5d138662581cb4874dd621eef345" translate="yes" xml:space="preserve">
          <source>The DSA operations in this package are not implemented using constant-time algorithms.</source>
          <target state="translated">本パッケージのDSA演算は、一定時間アルゴリズムを使用して実装されていません。</target>
        </trans-unit>
        <trans-unit id="3d5a6f0be8af4ae349714dde142378b2b0dd32c1" translate="yes" xml:space="preserve">
          <source>The Data fields contains object-specific data:</source>
          <target state="translated">Data フィールドには、オブジェクト固有のデータが含まれています。</target>
        </trans-unit>
        <trans-unit id="d70280d8e959481aa07b78bca8cd9c9158da0c1f" translate="yes" xml:space="preserve">
          <source>The Decoder does only basic sanity checking on decoded input sizes, and its limits are not configurable. Take caution when decoding gob data from untrusted sources.</source>
          <target state="translated">デコーダは、デコードされた入力サイズの基本的なサニティチェックのみを行い、その限界は設定できません。信頼できないソースから gob データをデコードする場合は注意してください。</target>
        </trans-unit>
        <trans-unit id="1a3dcfbdb85a6eb02179c9d5c4dd5b3efbbb6016" translate="yes" xml:space="preserve">
          <source>The Dial function connects to a server:</source>
          <target state="translated">ダイヤル機能でサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="e5af1dd969514f431da9aefdd41666a5f815fd72" translate="yes" xml:space="preserve">
          <source>The Error interface identifies a run time error.</source>
          <target state="translated">エラー・インターフェースは、ランタイム・エラーを識別します。</target>
        </trans-unit>
        <trans-unit id="8e437b0bdb4841542eba2f049276dee573f887b3" translate="yes" xml:space="preserve">
          <source>The Errorf function lets us use formatting features to create descriptive error messages.</source>
          <target state="translated">Errorf関数を使用すると、書式設定機能を使用して記述的なエラーメッセージを作成することができます。</target>
        </trans-unit>
        <trans-unit id="4cc7e273196b60c7b327e2a1e7c92da50e59b611" translate="yes" xml:space="preserve">
          <source>The Examples section of the documentation includes an illustration of how to use MakeFunc to build a swap function for different types.</source>
          <target state="translated">ドキュメントの「Examples」セクションには、MakeFuncを使用してさまざまなタイプのスワップ関数を構築する方法の説明があります。</target>
        </trans-unit>
        <trans-unit id="a4103d71ff7738d060819734b8440840f86eb6a7" translate="yes" xml:space="preserve">
          <source>The Flusher interface is implemented by ResponseWriters that allow an HTTP handler to flush buffered data to the client.</source>
          <target state="translated">Flusher インターフェースは、HTTP ハンドラがバッファリングされたデータをクライアントにフラッシュすることを可能にする ResponseWriters によって実装されています。</target>
        </trans-unit>
        <trans-unit id="8989cf7d3fb3d7f0d686b9d17d09faeb78214543" translate="yes" xml:space="preserve">
          <source>The GIF specification is at &lt;a href=&quot;https://www.w3.org/Graphics/GIF/spec-gif89a.txt&quot;&gt;https://www.w3.org/Graphics/GIF/spec-gif89a.txt&lt;/a&gt;.</source>
          <target state="translated">GIF仕様は&lt;a href=&quot;https://www.w3.org/Graphics/GIF/spec-gif89a.txt&quot;&gt;https://www.w3.org/Graphics/GIF/spec-gif89a.txtにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="413f2e2abeee0cebf1b4d1ac0f711038cf2ef825" translate="yes" xml:space="preserve">
          <source>The GOARCH, GOOS, GOPATH, and GOROOT environment variables complete the set of Go environment variables. They influence the building of Go programs (see &lt;a href=&quot;https://golang.org/cmd/go&quot;&gt;https://golang.org/cmd/go&lt;/a&gt; and &lt;a href=&quot;../go/build/index&quot;&gt;https://golang.org/pkg/go/build&lt;/a&gt;). GOARCH, GOOS, and GOROOT are recorded at compile time and made available by constants or functions in this package, but they do not influence the execution of the run-time system.</source>
          <target state="translated">GOARCH、GOOS、GOPATH、およびGOROOT環境変数は、Go環境変数のセットを完成させます。これらはGoプログラムのビルドに影響を与えます（&lt;a href=&quot;https://golang.org/cmd/go&quot;&gt;https://golang.org/cmd/go&lt;/a&gt;および&lt;a href=&quot;../go/build/index&quot;&gt;https://golang.org/pkg/go/buildを&lt;/a&gt;参照）。GOARCH、GOOS、およびGOROOTはコンパイル時に記録され、このパッケージの定数または関数によって利用可能になりますが、ランタイムシステムの実行には影響しません。</target>
        </trans-unit>
        <trans-unit id="980859c522964a8cbb3109a2a563d54c04b37667" translate="yes" xml:space="preserve">
          <source>The GODEBUG variable controls debugging variables within the runtime. It is a comma-separated list of name=val pairs setting these named variables:</source>
          <target state="translated">GODEBUG変数はランタイム内のデバッグ変数を制御します。これは、これらの名前付き変数を設定する name=val のペアのカンマ区切りのリストです。</target>
        </trans-unit>
        <trans-unit id="854b96235a6d258614ac621d5a074c350962980a" translate="yes" xml:space="preserve">
          <source>The GODEBUG variables are not covered by Go's API compatibility promise. Please report any issues before disabling HTTP/2 support: &lt;a href=&quot;https://golang.org/s/http2bug&quot;&gt;https://golang.org/s/http2bug&lt;/a&gt;</source>
          <target state="translated">GODEBUG変数はGoのAPI互換性の約束ではカバーされていません。HTTP / 2サポートを無効にする前に問題を報告してください：&lt;a href=&quot;https://golang.org/s/http2bug&quot;&gt;https&lt;/a&gt; : //golang.org/s/http2bug</target>
        </trans-unit>
        <trans-unit id="07350ebc65d6866cf7470b34fa919f4c89a12e5a" translate="yes" xml:space="preserve">
          <source>The GOGC variable sets the initial garbage collection target percentage. A collection is triggered when the ratio of freshly allocated data to live data remaining after the previous collection reaches this percentage. The default is GOGC=100. Setting GOGC=off disables the garbage collector entirely. The runtime/debug package's SetGCPercent function allows changing this percentage at run time. See &lt;a href=&quot;debug/index#SetGCPercent&quot;&gt;https://golang.org/pkg/runtime/debug/#SetGCPercent&lt;/a&gt;.</source>
          <target state="translated">GOGC変数は、ガベージコレクションの初期ターゲットパーセンテージを設定します。前回の収集後に残っているライブデータに対する新しく割り当てられたデータの比率がこのパーセンテージに達すると、収集がトリガーされます。デフォルトはGOGC = 100です。GOGC = offを設定すると、ガベージコレクタが完全に無効になります。ランタイム/デバッグパッケージのSetGCPercent関数を使用すると、実行時にこのパーセンテージを変更できます。&lt;a href=&quot;debug/index#SetGCPercent&quot;&gt;https://golang.org/pkg/runtime/debug/#SetGCPercentを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="23644add17b2d4ea82387647518fec703dd62cda" translate="yes" xml:space="preserve">
          <source>The GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously. There is no limit to the number of threads that can be blocked in system calls on behalf of Go code; those do not count against the GOMAXPROCS limit. This package's GOMAXPROCS function queries and changes the limit.</source>
          <target state="translated">GOMAXPROCS 変数は、ユーザーレベルの囲碁コードを同時に実行できるオペレーティング システム スレッドの数を制限します。囲碁コードの代わりにシステムコールでブロックできるスレッドの数に制限はありません。本パッケージの GOMAXPROCS 関数は、制限値を照会して変更します。</target>
        </trans-unit>
        <trans-unit id="2dc1829c430b9fe1fcd42a5d7af5182478e7df72" translate="yes" xml:space="preserve">
          <source>The GORACE variable configures the race detector, for programs built using -race. See &lt;a href=&quot;https://golang.org/doc/articles/race_detector.html&quot;&gt;https://golang.org/doc/articles/race_detector.html&lt;/a&gt; for details.</source>
          <target state="translated">GORACE変数は、-raceを使用して構築されたプログラムの競合検出器を構成します。詳細については、&lt;a href=&quot;https://golang.org/doc/articles/race_detector.html&quot;&gt;https：//golang.org/doc/articles/race_detector.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="895a2c86582e638542cc835d086a523cf9768898" translate="yes" xml:space="preserve">
          <source>The GOTRACEBACK variable controls the amount of output generated when a Go program fails due to an unrecovered panic or an unexpected runtime condition. By default, a failure prints a stack trace for the current goroutine, eliding functions internal to the run-time system, and then exits with exit code 2. The failure prints stack traces for all goroutines if there is no current goroutine or the failure is internal to the run-time. GOTRACEBACK=none omits the goroutine stack traces entirely. GOTRACEBACK=single (the default) behaves as described above. GOTRACEBACK=all adds stack traces for all user-created goroutines. GOTRACEBACK=system is like &amp;ldquo;all&amp;rdquo; but adds stack frames for run-time functions and shows goroutines created internally by the run-time. GOTRACEBACK=crash is like &amp;ldquo;system&amp;rdquo; but crashes in an operating system-specific manner instead of exiting. For example, on Unix systems, the crash raises SIGABRT to trigger a core dump. For historical reasons, the GOTRACEBACK settings 0, 1, and 2 are synonyms for none, all, and system, respectively. The runtime/debug package's SetTraceback function allows increasing the amount of output at run time, but it cannot reduce the amount below that specified by the environment variable. See &lt;a href=&quot;debug/index#SetTraceback&quot;&gt;https://golang.org/pkg/runtime/debug/#SetTraceback&lt;/a&gt;.</source>
          <target state="translated">GOTRACEBACK変数は、回復不能なパニックまたは予期しないランタイム条件が原因でGoプログラムが失敗したときに生成される出力の量を制御します。デフォルトでは、エラーは現在のゴルーチンのスタックトレースを出力し、ランタイムシステムの内部の関数を省略して、終了コード2で終了します。現在のゴルーチンが存在しないか、エラーがランタイムの内部。 GOTRACEBACK = noneは、goroutineスタックトレースを完全に省略します。 GOTRACEBACK = single（デフォルト）は上記のように動作します。 GOTRACEBACK = allは、ユーザーが作成したすべてのゴルーチンのスタックトレースを追加します。 GOTRACEBACK = systemは「すべて」に似ていますが、ランタイム関数のスタックフレームを追加し、ランタイムによって内部的に作成されたゴルーチンを表示します。GOTRACEBACK = crashは「システム」に似ていますが、終了せずにオペレーティングシステム固有の方法でクラッシュします。たとえば、Unixシステムでは、クラッシュによりSIGABRTが発生し、コアダンプがトリガーされます。歴史的な理由により、GOTRACEBACK設定0、1、および2は、それぞれnone、all、およびsystemの同義語です。ランタイム/デバッグパッケージのSetTraceback関数を使用すると、実行時に出力量を増やすことができますが、環境変数で指定された量よりも少なくすることはできません。見るただし、環境変数で指定された量よりも少なくすることはできません。見るただし、環境変数で指定された量よりも少なくすることはできません。見る&lt;a href=&quot;debug/index#SetTraceback&quot;&gt;https://golang.org/pkg/runtime/debug/#SetTraceback&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="201ea9b13c6c1b11811e547f191be7e93f488ebd" translate="yes" xml:space="preserve">
          <source>The Go 1 compatibility guidelines make it impossible for us to change the behavior of these methods; use Read or ReadMsgIP instead.</source>
          <target state="translated">Go 1 の互換性ガイドラインでは、これらのメソッドの動作を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="c7566eb3c6d36d40991cd457887383d73c8d32f6" translate="yes" xml:space="preserve">
          <source>The Go path is a list of directory trees containing Go source code. It is consulted to resolve imports that cannot be found in the standard Go tree. The default path is the value of the GOPATH environment variable, interpreted as a path list appropriate to the operating system (on Unix, the variable is a colon-separated string; on Windows, a semicolon-separated string; on Plan 9, a list).</source>
          <target state="translated">Go パスは、Go ソースコードを含むディレクトリツリーのリストです。これは、標準の Go ツリーで見つからないインポートを解決するために参照されます。デフォルトのパスは、GOPATH 環境変数の値で、オペレーティング・システムに適したパス・リストとして解釈されます (Unix ではコロンで区切られた文字列、Windows ではセミコロンで区切られた文字列、Plan 9 ではリスト)。</target>
        </trans-unit>
        <trans-unit id="b3cf2d68365e20d0973a301087cdd0150f378764" translate="yes" xml:space="preserve">
          <source>The Go visibility rules for struct fields are amended for JSON when deciding which field to marshal or unmarshal. If there are multiple fields at the same level, and that level is the least nested (and would therefore be the nesting level selected by the usual Go rules), the following extra rules apply:</source>
          <target state="translated">構造体フィールドの Go 表示ルールは、マーシャリングまたはアンマーシャリングするフィールドを決定する際に、JSON の場合に修正されます。同じレベルに複数のフィールドがあり、そのレベルが最も入れ子になっていない場合(したがって、通常のGoルールで選択される入れ子レベルになる)、以下の追加ルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="0fd6453ed937237b824b9a18906363db4d73b2a6" translate="yes" xml:space="preserve">
          <source>The HandlerFunc type is an adapter to allow the use of ordinary functions as HTTP handlers. If f is a function with the appropriate signature, HandlerFunc(f) is a Handler that calls f.</source>
          <target state="translated">HandlerFunc 型は、通常の関数を HTTP ハンドラとして使用できるようにするアダプタです。f が適切なシグネチャを持つ関数であれば、 HandlerFunc(f)は f を呼び出すハンドラです。</target>
        </trans-unit>
        <trans-unit id="dcde06a75814cbd2f82c57451a15f7098bfdc1f6" translate="yes" xml:space="preserve">
          <source>The Hijacker interface is implemented by ResponseWriters that allow an HTTP handler to take over the connection.</source>
          <target state="translated">Hijacker インターフェイスは、HTTP ハンドラが接続を引き継ぐことを可能にする ResponseWriters によって実装されています。</target>
        </trans-unit>
        <trans-unit id="3370b385b8e5dd84393ea8ba4a384825a13db61b" translate="yes" xml:space="preserve">
          <source>The Interface type describes the requirements for a type using the routines in this package. Any type that implements it may be used as a min-heap with the following invariants (established after Init has been called or if the data is empty or sorted):</source>
          <target state="translated">インターフェース型は、本パッケージのルーチンを使用する型の要件を記述します。これを実装した型は、以下の不変量を持つミニヒープとして使用することができます(Initが呼ばれた後、またはデータが空かソートされている場合に確立されます)。</target>
        </trans-unit>
        <trans-unit id="0aee04eced9ac7c3fac2de601ac7413fde3bf654" translate="yes" xml:space="preserve">
          <source>The JSON null value unmarshals into an interface, map, pointer, or slice by setting that Go value to nil. Because null is often used in JSON to mean &amp;ldquo;not present,&amp;rdquo; unmarshaling a JSON null into any other Go type has no effect on the value and produces no error.</source>
          <target state="translated">JSONのnull値は、そのGo値をnilに設定することにより、インターフェース、マップ、ポインター、またはスライスに非整列化します。JSONでnullは「存在しない」という意味でよく使用されるため、JSON nullを他のGoタイプにマーシャリング解除しても値には影響せず、エラーも発生しません。</target>
        </trans-unit>
        <trans-unit id="22f4320ee94c207b6f6c1bf76ec0cc99a4e78e12" translate="yes" xml:space="preserve">
          <source>The Listen function creates servers:</source>
          <target state="translated">Listen機能は、サーバーを作成します。</target>
        </trans-unit>
        <trans-unit id="f1e8051445ee7295f2015e153c91e6e9f468a7b9" translate="yes" xml:space="preserve">
          <source>The Map type is optimized for two common use cases: (1) when the entry for a given key is only ever written once but read many times, as in caches that only grow, or (2) when multiple goroutines read, write, and overwrite entries for disjoint sets of keys. In these two cases, use of a Map may significantly reduce lock contention compared to a Go map paired with a separate Mutex or RWMutex.</source>
          <target state="translated">Map型は、2つの一般的なユースケースに最適化されています。(1)キャッシュが成長するだけのように、指定されたキーのエントリが一度しか書き込まれず、何度も読み込まれる場合、または (2)複数のゴローチンが、キーの不連続なセットのエントリを読み込んだり、書き込んだり、上書きしたりする場合です。この 2 つのケースでは、マップを使用することで、個別の Mutex または RWMutex とペアになった Go マップと比較して、ロックの競合が大幅に減る可能性があります。</target>
        </trans-unit>
        <trans-unit id="93c1aea237df8273d73d6b2b1db4e7c127b7fdb2" translate="yes" xml:space="preserve">
          <source>The Map type is specialized. Most code should use a plain Go map instead, with separate locking or coordination, for better type safety and to make it easier to maintain other invariants along with the map content.</source>
          <target state="translated">マップ型は特殊です。ほとんどのコードでは、型の安全性を高め、マップの内容と一緒に他の不変量を維持することを容易にするために、別個のロックまたは調整を持つ、プレーンな囲碁マップを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0006e6725a631489c9423aa1f192586acc3a14d6" translate="yes" xml:space="preserve">
          <source>The MergeMode flags control the behavior of MergePackageFiles.</source>
          <target state="translated">MergeMode フラグは MergePackageFiles の動作を制御します。</target>
        </trans-unit>
        <trans-unit id="46419978a96c95f07df701b47af9ce0c381fb8e5" translate="yes" xml:space="preserve">
          <source>The New function creates errors whose only content is a text message.</source>
          <target state="translated">New関数は、内容がテキストメッセージのみのエラーを作成します。</target>
        </trans-unit>
        <trans-unit id="ed989955d8475da0903bbb33a13d3c6797487592" translate="yes" xml:space="preserve">
          <source>The PC field will be a value returned by a call to the traceback function.</source>
          <target state="translated">PCフィールドは、トレースバック関数の呼び出しによって返される値になります。</target>
        </trans-unit>
        <trans-unit id="886ce6ce1a2e11f65b175c91749f88d574c43226" translate="yes" xml:space="preserve">
          <source>The PNG specification is at &lt;a href=&quot;https://www.w3.org/TR/PNG/&quot;&gt;https://www.w3.org/TR/PNG/&lt;/a&gt;.</source>
          <target state="translated">PNGの仕様は&lt;a href=&quot;https://www.w3.org/TR/PNG/&quot;&gt;https://www.w3.org/TR/PNG/にあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e01da8fcfe6b3b9e18fc8125aed80da656d99c50" translate="yes" xml:space="preserve">
          <source>The Pos value for a given file is a number in the range [base, base+size], where base and size are specified when adding the file to the file set via AddFile.</source>
          <target state="translated">指定されたファイルのPos値は[base,base+size]の範囲の数値で、AddFileを介してファイルセットにファイルを追加する際にbaseとsizeが指定されます。</target>
        </trans-unit>
        <trans-unit id="24b49c8f6cf4d6923667f2f4ded23d7140a2b9f0" translate="yes" xml:space="preserve">
          <source>The Priority is a combination of the syslog facility and severity. For example, LOG_ALERT | LOG_FTP sends an alert severity message from the FTP facility. The default severity is LOG_EMERG; the default facility is LOG_KERN.</source>
          <target state="translated">優先度は、syslog ファシリティと深刻度の組み合わせです。例えば、LOG_ALERT | LOG_FTP は、FTP ファシリティからアラートの深刻度メッセージを送信します。デフォルトの深刻度は LOG_EMERG で、デフォルトのファシリティは LOG_KERN です。</target>
        </trans-unit>
        <trans-unit id="c56c9b0bbe08c95a239dcc95eda30597b6ca619e" translate="yes" xml:space="preserve">
          <source>The Process it returns can be used to obtain information about the underlying operating system process.</source>
          <target state="translated">それが返すプロセスは、基礎となるオペレーティングシステムのプロセスに関する情報を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="10801c2ff1093f1ce7c760ba00803c382474a94e" translate="yes" xml:space="preserve">
          <source>The RSA operations in this package are not implemented using constant-time algorithms.</source>
          <target state="translated">本パッケージの RSA 演算は、一定時間アルゴリズムを使用して実装されていません。</target>
        </trans-unit>
        <trans-unit id="e75efacd08116681c05f3907c86c9cdff60db179" translate="yes" xml:space="preserve">
          <source>The ReadCloser returned by NewReader also implements Resetter.</source>
          <target state="translated">NewReader が返す ReadCloser も Resetter を実装しています。</target>
        </trans-unit>
        <trans-unit id="3bfc20a3944403086f24f5757939a8cbd9b7c5ac" translate="yes" xml:space="preserve">
          <source>The ReadCloser returned by NewReaderDict also implements Resetter.</source>
          <target state="translated">NewReaderDict が返す ReadCloser も Resetter を実装しています。</target>
        </trans-unit>
        <trans-unit id="c4f8edaea822742e73d1aca6a1265098af5d579e" translate="yes" xml:space="preserve">
          <source>The Reader converts all \r\n sequences in its input to plain \n, including in multiline field values, so that the returned data does not depend on which line-ending convention an input file uses.</source>
          <target state="translated">リーダーは、入力ファイルが使用する行末規則に依存しないように、複数行のフィールド値も含めて、入力中の全ての\\rn シーケンスをプレーンな\rnに変換する。</target>
        </trans-unit>
        <trans-unit id="41c2e3518894534a6a634c57bbad5ea70224c3de" translate="yes" xml:space="preserve">
          <source>The Reader.Header fields will be valid in the Reader returned.</source>
          <target state="translated">返されたReaderでは、Reader.Headerフィールドが有効になります。</target>
        </trans-unit>
        <trans-unit id="9fd8011df0852a1e27b3907bd2a3f82247ef31e5" translate="yes" xml:space="preserve">
          <source>The Request.Proto is always HTTP/1.1.</source>
          <target state="translated">Request.Proto は常に HTTP/1.1 です。</target>
        </trans-unit>
        <trans-unit id="09c4e81d433af7e0ae48c721f621859a4e5a3317" translate="yes" xml:space="preserve">
          <source>The Response Body is closed after it is sent.</source>
          <target state="translated">レスポンスボディは送信後に閉じられます。</target>
        </trans-unit>
        <trans-unit id="041fd8da9679545d4de46a3a12d665330f551006" translate="yes" xml:space="preserve">
          <source>The Response.Body is guaranteed to be non-nil and Body.Read call is guaranteed to not return any error other than io.EOF.</source>
          <target state="translated">Response.Bodyは非nilであることが保証されており、Body.Readコールはio.EOF以外のエラーを返さないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="bc99bfa959e73d9ff72d10e54ecd5ffaa2259252" translate="yes" xml:space="preserve">
          <source>The Response.Header is a snapshot of the headers at the time of the first write call, or at the time of this call, if the handler never did a write.</source>
          <target state="translated">Response.Headerは、最初の書き込み呼び出し時のヘッダのスナップショットです。</target>
        </trans-unit>
        <trans-unit id="18a3ebac1f2c2059df0438aac114025f62ecfbf9" translate="yes" xml:space="preserve">
          <source>The Run methods of T and B allow defining subtests and sub-benchmarks, without having to define separate functions for each. This enables uses like table-driven benchmarks and creating hierarchical tests. It also provides a way to share common setup and tear-down code:</source>
          <target state="translated">TとBのRunメソッドでは、サブテストとサブベンチマークを定義することができ、それぞれに個別の関数を定義する必要はありません。これにより、テーブル駆動型ベンチマークや階層型テストの作成などの用途が可能になります。また、共通のセットアップコードとティアダウンコードを共有する方法も提供します。</target>
        </trans-unit>
        <trans-unit id="2fdffd1148a25e94f2ea65756e345947d69016d2" translate="yes" xml:space="preserve">
          <source>The SendMail function and the net/smtp package are low-level mechanisms and provide no support for DKIM signing, MIME attachments (see the mime/multipart package), or other mail functionality. Higher-level packages exist outside of the standard library.</source>
          <target state="translated">SendMail 関数と net/smtp パッケージは低レベルのメカニズムであり、DKIM 署名や MIME 添付ファイル (mime/multipart パッケージを参照)、その他のメール機能はサポートしていません。より高レベルのパッケージは標準ライブラリの外に存在します。</target>
        </trans-unit>
        <trans-unit id="f9a92bd5980ed21b3a625476d07c987591bfa7d7" translate="yes" xml:space="preserve">
          <source>The Spec type stands for any of *ImportSpec, *ValueSpec, and *TypeSpec.</source>
          <target state="translated">Specタイプは、*ImportSpec、*ValueSpec、および*TypeSpecのいずれかを表します。</target>
        </trans-unit>
        <trans-unit id="4919a225e3add39379ff15a9bce358f52cae5ffb" translate="yes" xml:space="preserve">
          <source>The Syscall functions in package syscall pass their uintptr arguments directly to the operating system, which then may, depending on the details of the call, reinterpret some of them as pointers. That is, the system call implementation is implicitly converting certain arguments back from uintptr to pointer.</source>
          <target state="translated">syscall パッケージの Syscall 関数は uintptr 引数を直接オペレーティングシステムに渡します。つまり、システムコールの実装は暗黙のうちに特定の引数を uintptr からポインタに変換しています。</target>
        </trans-unit>
        <trans-unit id="3e332fd0096a988b6619d722b0818e386abfd30a" translate="yes" xml:space="preserve">
          <source>The TIFF file format uses a similar but incompatible version of the LZW algorithm. See the golang.org/x/image/tiff/lzw package for an implementation.</source>
          <target state="translated">TIFF ファイルフォーマットは、LZW アルゴリズムの類似した、しかし互換性のないバージョンを使用しています。実装については golang.org/x/image/tiff/lzw パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="58336a8c0934089954efcd803d6fca80fefa9eb4" translate="yes" xml:space="preserve">
          <source>The TLS field is set to a non-nil dummy value if target has scheme &quot;https&quot;.</source>
          <target state="translated">TLSフィールドには、ターゲットがスキーム &quot;https &quot;を持っている場合には、非nilのダミー値が設定される。</target>
        </trans-unit>
        <trans-unit id="d581afca4a5305392d28788d2eee7630e8dc138a" translate="yes" xml:space="preserve">
          <source>The Time returned by time.Now contains a monotonic clock reading. If Time t has a monotonic clock reading, t.Add adds the same duration to both the wall clock and monotonic clock readings to compute the result. Because t.AddDate(y, m, d), t.Round(d), and t.Truncate(d) are wall time computations, they always strip any monotonic clock reading from their results. Because t.In, t.Local, and t.UTC are used for their effect on the interpretation of the wall time, they also strip any monotonic clock reading from their results. The canonical way to strip a monotonic clock reading is to use t = t.Round(0).</source>
          <target state="translated">time.Nowによって返されたTimeには、単調なクロック読みが含まれています。Time tが単調時計の読みを持つ場合、t.Addは、壁時計と単調時計の読みの両方に同じ時間を追加して結果を計算します。t.AddDate(y,m,d),t.Round(d),t.Truncate(d)は壁時間の計算なので、これらは常に結果から単調時計の読みを削除します。t.In,t.Local,t.UTCは壁時間の解釈に影響を与えるために使用されるため、これらもまた、結果から単調なクロックの読みを削除します。単調な時計の読み取り値を取り除くための定型的な方法は、t=t.Round(0)を使用することです。</target>
        </trans-unit>
        <trans-unit id="33e81456d15715e940a5919174eaa3f7637dcde7" translate="yes" xml:space="preserve">
          <source>The Timer type represents a single event. When the Timer expires, the current time will be sent on C, unless the Timer was created by AfterFunc. A Timer must be created with NewTimer or AfterFunc.</source>
          <target state="translated">Timer型は単一のイベントを表します。タイマーの期限が切れると、AfterFuncで作成された場合を除き、現在の時刻がCに送信されます。タイマーはNewTimerまたはAfterFuncで作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf73d1723f31995bde582871be9d0a7a3c49f2e8" translate="yes" xml:space="preserve">
          <source>The Universe scope contains all predeclared objects of Go. It is the outermost scope of any chain of nested scopes.</source>
          <target state="translated">Universe スコープには、Go のすべての宣言済みオブジェクトが含まれています。これは、入れ子になっているスコープのチェーンの最外周のスコープです。</target>
        </trans-unit>
        <trans-unit id="d2217feb010f2a9e20eb107dc97fbe00b28a97e3" translate="yes" xml:space="preserve">
          <source>The Unsafe package is the package returned by an importer for the import path &quot;unsafe&quot;.</source>
          <target state="translated">Unsafeパッケージは、インポートパス &quot;unsafe &quot;に対してインポーターが返すパッケージです。</target>
        </trans-unit>
        <trans-unit id="82e1a6db6a2ce451395a30960fcbaa8d447276c7" translate="yes" xml:space="preserve">
          <source>The Unwrap, Is and As functions work on errors that may wrap other errors. An error wraps another error if its type has the method</source>
          <target state="translated">Unwrap、Is、As関数は、他のエラーをラップする可能性のあるエラーに対して働きます。エラーは、その型が</target>
        </trans-unit>
        <trans-unit id="84a102639d5d98f811fc502808b53b881ef02020" translate="yes" xml:space="preserve">
          <source>The Userinfo type is an immutable encapsulation of username and password details for a URL. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password.</source>
          <target state="translated">Userinfo型は、URLのユーザ名とパスワードの詳細を不変にカプセル化したものである。既存のUserinfo値は、ユーザ名(RFC 2396で許可されているように空の可能性があります)とオプションでパスワードを持つことが保証されています。</target>
        </trans-unit>
        <trans-unit id="fbd19f3117c4f5404c3dc4318c570ed741a162cd" translate="yes" xml:space="preserve">
          <source>The Value.Call method allows the caller to invoke a typed function in terms of Values; in contrast, MakeFunc allows the caller to implement a typed function in terms of Values.</source>
          <target state="translated">対照的に、MakeFunc は、呼び出し元が Values の型付き関数を実装することを可能にします。</target>
        </trans-unit>
        <trans-unit id="b671f0d2f06db5c55a3ebed77ddd3e1fdacf58bc" translate="yes" xml:space="preserve">
          <source>The Wait method will return the exit code and release associated resources once the command exits.</source>
          <target state="translated">Waitメソッドは、コマンドが終了すると終了コードを返し、関連するリソースを解放します。</target>
        </trans-unit>
        <trans-unit id="f996448ff14d875bb2a49935e2e1a1c11597d19a" translate="yes" xml:space="preserve">
          <source>The WithCancel, WithDeadline, and WithTimeout functions take a Context (the parent) and return a derived Context (the child) and a CancelFunc. Calling the CancelFunc cancels the child and its children, removes the parent's reference to the child, and stops any associated timers. Failing to call the CancelFunc leaks the child and its children until the parent is canceled or the timer fires. The go vet tool checks that CancelFuncs are used on all control-flow paths.</source>
          <target state="translated">WithCancel、WithDeadline、および WithTimeout 関数は、コンテキスト (親)を受け取り、派生コンテキスト (子)と CancelFunc を返します。CancelFunc を呼び出すと、子とその子をキャンセルし、子への親の参照を削除し、関連するタイマーを停止します。CancelFunc の呼び出しに失敗すると、親がキャンセルされるか、タイマーが切れるまで子とその子がリークされます。go vetツールは、すべてのコントロールフローパスでCancelFuncが使用されているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="7ad67f6f0923ebfa2c780fb9b0118879fff918f1" translate="yes" xml:space="preserve">
          <source>The Writer assumes that all Unicode code points have the same width; this may not be true in some fonts or if the string contains combining characters.</source>
          <target state="translated">こ れは、 フ ォ ン ト に よ っ ては真ではない場合もあ り ますし、 文字列に結合キ ャ ラ ク タ が含まれてい る 場合には真ではない場合もあ り ます。</target>
        </trans-unit>
        <trans-unit id="e4b495842c9aa071c7e0475777b24079ec5d06f2" translate="yes" xml:space="preserve">
          <source>The Writer currently provides no support for sparse files.</source>
          <target state="translated">ライターは現在、疎なファイルをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="53af9c2eed3edf32c0f1e34e826ade2723d6ef7e" translate="yes" xml:space="preserve">
          <source>The Writer must buffer input internally, because proper spacing of one line may depend on the cells in future lines. Clients must call Flush when done calling Write.</source>
          <target state="translated">ライターは内部的に入力をバッファリングしなければなりません。クライアントはWriteの呼び出しが終わったらFlushを呼ばなければなりません。</target>
        </trans-unit>
        <trans-unit id="628a74097036f85303a5350ae981dc164e95f20b" translate="yes" xml:space="preserve">
          <source>The Writer treats incoming bytes as UTF-8-encoded text consisting of cells terminated by horizontal ('\t') or vertical ('\v') tabs, and newline ('\n') or formfeed ('\f') characters; both newline and formfeed act as line breaks.</source>
          <target state="translated">ライターは、着信バイトを、水平('\t')または垂直('\v')タブと、改行('\n')またはフォームフィード('Formfeed')文字で終端されたセルからなるUTF-8エンコードされたテキストとして扱います。</target>
        </trans-unit>
        <trans-unit id="ff09099a8f170cf0d12905fa7c7238d645a38332" translate="yes" xml:space="preserve">
          <source>The XML element for a struct contains marshaled elements for each of the exported fields of the struct, with these exceptions:</source>
          <target state="translated">構造体の XML 要素には、これらの例外を除いて、構造体のエクスポートされたフィールドごとにマーシャリングされた要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="79336ab4324d9f5dfdaefa0128d6e4be21b88b75" translate="yes" xml:space="preserve">
          <source>The []byte arguments are the data from the corresponding debug section in the object file; for example, for an ELF object, abbrev is the contents of the &quot;.debug_abbrev&quot; section.</source>
          <target state="translated">例えば、ELF オブジェクトの場合、abbrev は &quot;.debug_abbrev&quot; セクションの内容です。</target>
        </trans-unit>
        <trans-unit id="76c0ad8d05ede9a06fba9319e4883b6c3aed9f8a" translate="yes" xml:space="preserve">
          <source>The actual read interface needed by NewReader. If the passed in io.Reader does not also have ReadByte, the NewReader will introduce its own buffering.</source>
          <target state="translated">NewReaderが必要とする実際の読み取りインターフェイス。io.Readerで渡されたものがReadByteも持っていない場合、NewReaderは独自のバッファリングを導入します。</target>
        </trans-unit>
        <trans-unit id="c853d84a15cfc8c913087ccf677e5edf1ca53e04" translate="yes" xml:space="preserve">
          <source>The add operation, implemented by the AddT functions, is the atomic equivalent of:</source>
          <target state="translated">AddT 関数で実装されている add 操作は、アトミックに相当します。</target>
        </trans-unit>
        <trans-unit id="7b4a22ebac17d94f75fe50addbae480c54b8e412" translate="yes" xml:space="preserve">
          <source>The addresses in the to parameter are the SMTP RCPT addresses.</source>
          <target state="translated">toパラメータのアドレスはSMTP RCPTアドレスです。</target>
        </trans-unit>
        <trans-unit id="fa78f066db9b3a5524ca42a8affe77f75da9d63e" translate="yes" xml:space="preserve">
          <source>The allocs profile is the same as the heap profile but changes the default pprof display to -alloc_space, the total number of bytes allocated since the program began (including garbage-collected bytes).</source>
          <target state="translated">allocsプロファイルはヒーププロファイルと同じですが、デフォルトのpprofの表示を-alloc_spaceに変更します。</target>
        </trans-unit>
        <trans-unit id="7b7e2adce610eba0eb46d47752259233e509b5f5" translate="yes" xml:space="preserve">
          <source>The append built-in function appends elements to the end of a slice. If it has sufficient capacity, the destination is resliced to accommodate the new elements. If it does not, a new underlying array will be allocated. Append returns the updated slice. It is therefore necessary to store the result of append, often in the variable holding the slice itself:</source>
          <target state="translated">組み込みのappend関数は、スライスの最後に要素を追加します。十分な容量があれば,新しい要素を収容するために格納先が再スライスされます.十分な容量がない場合は、新しい基礎となる配列が割り当てられます。Appendは更新されたスライスを返します。したがって、appendの結果を、多くの場合、スライス自体を保持する変数に格納する必要があります。</target>
        </trans-unit>
        <trans-unit id="319121c4cf28a1a73f5a5d055a29a23993940f46" translate="yes" xml:space="preserve">
          <source>The argument obj must be a pointer to an object allocated by calling new, by taking the address of a composite literal, or by taking the address of a local variable. The argument finalizer must be a function that takes a single argument to which obj's type can be assigned, and can have arbitrary ignored return values. If either of these is not true, SetFinalizer may abort the program.</source>
          <target state="translated">引数 obj は、new を呼び出すか、複合リテラルのアドレスを取るか、ローカル変数のアドレスを取ることで割り当てられたオブジェクトへのポインタでなければなりません。引数ファイナライザは、obj の型を代入できる単一の引数を取り、任意の無視された戻り値を持つことができる関数でなければなりません。これらのいずれかが真でない場合、SetFinalizer はプログラムを中止することがあります。</target>
        </trans-unit>
        <trans-unit id="cd8b4269726f03ea74d83f3435788f2723fca1f6" translate="yes" xml:space="preserve">
          <source>The argument pos must have been returned by a call to Tell on this line table.</source>
          <target state="translated">引数 pos は、この行テーブル上で Tell を呼び出して返されたものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b92996537add2723dc45807913fd63c71882192d" translate="yes" xml:space="preserve">
          <source>The argument to the -run and -bench command-line flags is an unanchored regular expression that matches the test's name. For tests with multiple slash-separated elements, such as subtests, the argument is itself slash-separated, with expressions matching each name element in turn. Because it is unanchored, an empty expression matches any string. For example, using &quot;matching&quot; to mean &quot;whose name contains&quot;:</source>
          <target state="translated">コマンドラインフラグの -run と -bench の引数は、テストの名前にマッチするアンアンアンカーな正規表現です。サブテストのように複数のスラッシュで区切られた要素を持つテストの場合、引数はそれ自体がスラッシュで区切られており、それぞれの名前の要素に順番にマッチする式を持ちます。これはアンアンチョアされているので、空の式はどんな文字列にもマッチします。例えば、&quot;matching &quot;を使用して &quot;誰の名前が含まれているか &quot;を意味します。</target>
        </trans-unit>
        <trans-unit id="e79a98521fd13244e0b154d938bb00c75c9b0451" translate="yes" xml:space="preserve">
          <source>The base argument must be 0 or a value between 2 and MaxBase. For base 0, the number prefix determines the actual base: A prefix of &amp;ldquo;0b&amp;rdquo; or &amp;ldquo;0B&amp;rdquo; selects base 2, &amp;ldquo;0&amp;rdquo;, &amp;ldquo;0o&amp;rdquo; or &amp;ldquo;0O&amp;rdquo; selects base 8, and &amp;ldquo;0x&amp;rdquo; or &amp;ldquo;0X&amp;rdquo; selects base 16. Otherwise, the selected base is 10 and no prefix is accepted.</source>
          <target state="translated">base引数は0または2とMaxBaseの間の値でなければなりません。基数0の場合、数値の接頭辞は実際の基数を決定します。「0b」または「0B」の接頭辞は基数2を選択し、「0」、「0o」または「0O」は基数8を選択し、「0x」または「0X」は選択しますベース16.それ以外の場合、選択されたベースは10であり、接頭辞は受け入れられません。</target>
        </trans-unit>
        <trans-unit id="1f5bc3650196f245f397cccfe0b715471a484024" translate="yes" xml:space="preserve">
          <source>The base argument must be 0, 2, 8, 10, or 16. Providing an invalid base argument will lead to a run-time panic.</source>
          <target state="translated">ベースとなる引数は、0、2、8、10、または16でなければなりません。無効な基底引数を与えると、実行時にパニックになります。</target>
        </trans-unit>
        <trans-unit id="999251e457607fde479613cc188e10bb8aa35ffc" translate="yes" xml:space="preserve">
          <source>The behavior of Close after the first call is undefined. Specific implementations may document their own behavior.</source>
          <target state="translated">最初の呼び出し後のCloseの動作は定義されていません。特定の実装では、独自の動作を文書化することができます。</target>
        </trans-unit>
        <trans-unit id="a5501fbd34c66d8be25df49275f9a5880a90030a" translate="yes" xml:space="preserve">
          <source>The benchmark function must run the target code b.N times. During benchmark execution, b.N is adjusted until the benchmark function lasts long enough to be timed reliably. The output</source>
          <target state="translated">ベンチマーク関数は、ターゲットコードを b.N 回実行する必要があります。ベンチマーク実行中、b.Nは、ベンチマーク関数が確実に計時されるのに十分な長さになるまで調整されます。出力される</target>
        </trans-unit>
        <trans-unit id="5d5239994cd75391745c3ffd216fe5a8cda11e2c" translate="yes" xml:space="preserve">
          <source>The bin/ directory holds compiled commands. Each command is named for its source directory, but only using the final element, not the entire path. That is, the command with source in DIR/src/foo/quux is installed into DIR/bin/quux, not DIR/bin/foo/quux. The foo/ is stripped so that you can add DIR/bin to your PATH to get at the installed commands.</source>
          <target state="translated">bin/ディレクトリにはコンパイル済みのコマンドが格納されています。各コマンドはソースディレクトリに名前を付けますが、パス全体ではなく最後の要素のみを使用します。つまり、DIR/src/foo/quux にソースを持つコマンドは DIR/bin/quux にインストールされ、 DIR/bin/foo/quux にはインストールされません。foo/が剥がされているのは、DIR/binをPATHに追加してインストールされたコマンドにたどり着けるようにするためです。</target>
        </trans-unit>
        <trans-unit id="5fb2943938d895315eb0861e562b65ec37e4257a" translate="yes" xml:space="preserve">
          <source>The bitSize argument specifies the integer type that the result must fit into. Bit sizes 0, 8, 16, 32, and 64 correspond to int, int8, int16, int32, and int64. If bitSize is below 0 or above 64, an error is returned.</source>
          <target state="translated">bitSize 引数は、結果が収まる整数型を指定します。ビットサイズ 0,8,16,32,64 は int,int8,int16,int32,int64 に対応します。bitSize が 0 以下、または 64 以上の場合は、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="73a023e42c8f449dd9afceb038f53730f09d0f3a" translate="yes" xml:space="preserve">
          <source>The blocksize of MD5 in bytes.</source>
          <target state="translated">MD5のブロックサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="b15f9638286bf74ad9f05789a97346025af52de4" translate="yes" xml:space="preserve">
          <source>The blocksize of SHA-1 in bytes.</source>
          <target state="translated">SHA-1のブロックサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="a7b36663bea360572efce2e38cb3e1eb26ceecf3" translate="yes" xml:space="preserve">
          <source>The blocksize of SHA256 and SHA224 in bytes.</source>
          <target state="translated">SHA256とSHA224のブロックサイズをバイト単位で表したものです。</target>
        </trans-unit>
        <trans-unit id="97aa274f72b6214d58f8cac268e6604a5f6faa7b" translate="yes" xml:space="preserve">
          <source>The body function will be run in each goroutine. It should set up any goroutine-local state and then iterate until pb.Next returns false. It should not use the StartTimer, StopTimer, or ResetTimer functions, because they have global effect. It should also not call Run.</source>
          <target state="translated">body 関数は各 goroutine で実行されます。それは、任意のgoroutineローカル状態を設定し、pb.Nextがfalseを返すまで反復処理しなければなりません。StartTimer、StopTimer、ResetTimer関数はグローバルな効果を持つため、使用してはいけません。また、Runを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="af7dc8ebb6f00c62864546d31e047f12c2a2774d" translate="yes" xml:space="preserve">
          <source>The boolean functions take any zero value to be false and a non-zero value to be true.</source>
          <target state="translated">ブール関数は、任意のゼロ値をfalse、ゼロ以外の値をtrueとします。</target>
        </trans-unit>
        <trans-unit id="0ca3ec8906bf9075e98bceae22793965b445ac42" translate="yes" xml:space="preserve">
          <source>The boundary is usually obtained from the &quot;boundary&quot; parameter of the message's &quot;Content-Type&quot; header. Use mime.ParseMediaType to parse such headers.</source>
          <target state="translated">境界は通常、メッセージの &quot;Content-Type &quot;ヘッダの &quot;boundary &quot;パラメータから取得されます。このようなヘッダを解析するには、mime.ParseMediaTypeを使用します。</target>
        </trans-unit>
        <trans-unit id="93f9cb3d63de38d1cca4d1f9efd9ca872f4716ce" translate="yes" xml:space="preserve">
          <source>The built-in table is small but on unix it is augmented by the local system's mime.types file(s) if available under one or more of these names:</source>
          <target state="translated">ビルトインテーブルは小さいですが、Unixでは、ローカルシステムのmime.typesファイル(複数可)がこれらの名前の一つ以上で利用可能であれば、それによって拡張されます。</target>
        </trans-unit>
        <trans-unit id="e3abe768a37a21ebff40b7c9151a7b3edc6c44e0" translate="yes" xml:space="preserve">
          <source>The calendrical calculations always assume a Gregorian calendar, with no leap seconds.</source>
          <target state="translated">カレント計算は常にグレゴリオ暦を前提としており、閏秒はありません。</target>
        </trans-unit>
        <trans-unit id="dd3a4f20159bb2231f4a88b4a45f4b772e80ba3c" translate="yes" xml:space="preserve">
          <source>The caller should call Close when finished, to shut it down.</source>
          <target state="translated">発信者は、終了したらCloseを呼び出してシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="257fee20f0af9c58c89645e121bcb859cd7d2ba2" translate="yes" xml:space="preserve">
          <source>The cap built-in function returns the capacity of v, according to its type:</source>
          <target state="translated">キャップ組み込み関数は、v の容量を型に応じて返します。</target>
        </trans-unit>
        <trans-unit id="e553ed25dbd923acc16eb919df1e53d3eec5c8ba" translate="yes" xml:space="preserve">
          <source>The certificate is signed by parent. If parent is equal to template then the certificate is self-signed. The parameter pub is the public key of the signee and priv is the private key of the signer.</source>
          <target state="translated">証明書は親によって署名されます。parentがtemplateと等しい場合、証明書は自己署名されます。パラメータ pub は署名者の公開鍵、priv は署名者の秘密鍵です。</target>
        </trans-unit>
        <trans-unit id="dc1a26e65aace69e5a0db7ec46a4e897871c5c8e" translate="yes" xml:space="preserve">
          <source>The chain consists of err itself followed by the sequence of errors obtained by repeatedly calling Unwrap.</source>
          <target state="translated">このチェーンは、 err 自体の後に、Unwrap を繰り返し呼び出すことで得られる一連のエラーで構成されています。</target>
        </trans-unit>
        <trans-unit id="784fcd80e08909ffdec4906c1c0dba2f7d623904" translate="yes" xml:space="preserve">
          <source>The client must close the response body when finished with it:</source>
          <target state="translated">クライアントは、それが終了したらレスポンスボディを閉じなければなりません。</target>
        </trans-unit>
        <trans-unit id="7b4dd52e8c63aa6987cf8c226672c7d4edb96f82" translate="yes" xml:space="preserve">
          <source>The close built-in function closes a channel, which must be either bidirectional or send-only. It should be executed only by the sender, never the receiver, and has the effect of shutting down the channel after the last sent value is received. After the last value has been received from a closed channel c, any receive from c will succeed without blocking, returning the zero value for the channel element. The form</source>
          <target state="translated">close ビルトイン関数はチャネルをクローズします。この関数は送信者のみが実行すべきであり、受信者が実行すべきではありません。閉じられたチャネル c から最後の値を受信した後は、 c からの受信はブロックされることなく成功し、チャネル要素にゼロ値を返します。この形式は</target>
        </trans-unit>
        <trans-unit id="0c580a2c87e0f2186896309d301dc63aad975a10" translate="yes" xml:space="preserve">
          <source>The command must have been started by Start.</source>
          <target state="translated">コマンドはStartで起動されている必要があります。</target>
        </trans-unit>
        <trans-unit id="ef8e35ecfe346ef37bdb6a41007c64b491f6581e" translate="yes" xml:space="preserve">
          <source>The comment prefix &quot;Unordered output:&quot; is like &quot;Output:&quot;, but matches any line order:</source>
          <target state="translated">コメントのプレフィックス &quot;Unordered output:&quot;は &quot;Output:&quot;のようなものですが、任意の行順にマッチします。</target>
        </trans-unit>
        <trans-unit id="af6f6bfe9472d6cd742ab07f4d13576c62ddc94c" translate="yes" xml:space="preserve">
          <source>The compare-and-swap operation, implemented by the CompareAndSwapT functions, is the atomic equivalent of:</source>
          <target state="translated">CompareAndSwapT 関数で実装されている比較・スワップ操作は、原子的にはこれと同等のものです。</target>
        </trans-unit>
        <trans-unit id="53528cbdfa92cb465406c07ac6068163f15d8aff" translate="yes" xml:space="preserve">
          <source>The comparison functions work on basic types only (or named basic types, such as &quot;type Celsius float32&quot;). They implement the Go rules for comparison of values, except that size and exact type are ignored, so any integer value, signed or unsigned, may be compared with any other integer value. (The arithmetic value is compared, not the bit pattern, so all negative integers are less than all unsigned integers.) However, as usual, one may not compare an int with a float32 and so on.</source>
          <target state="translated">比較関数は、基本型 (または &quot;type Celsius float32&quot; などの名前付き基本型)のみで動作します。これらの関数は、サイズと正確な型が無視されることを除いて、値の比較に関する Go ルールを実装しているため、符号付きまたは符号なしの任意の整数値を他の任意の整数値と比較することができます。(算術値が比較されるのはビット パターンではなく、ビット パターンなので、すべての負の整数はすべての符号なし整数よりも小さくなります)。ただし、通常通り、int と float32 などを比較することはできません。</target>
        </trans-unit>
        <trans-unit id="3947ad8b82d2733c9797fbc944569005335da23c" translate="yes" xml:space="preserve">
          <source>The compiler handles a Pointer converted to a uintptr in the argument list of a call to a function implemented in assembly by arranging that the referenced allocated object, if any, is retained and not moved until the call completes, even though from the types alone it would appear that the object is no longer needed during the call.</source>
          <target state="translated">コンパイラは、アセンブリで実装された関数の呼び出しの引数リストで uintptr に変換された Pointer を処理し、型だけを見ると呼び出し中にオブジェクトが不要になったように見えても、参照された割り当てオブジェクトがあれば、呼び出しが完了するまで保持して移動しないようにします。</target>
        </trans-unit>
        <trans-unit id="fbe6ac33b06dc273e75926ad2490d8b3832a0214" translate="yes" xml:space="preserve">
          <source>The complex built-in function constructs a complex value from two floating-point values. The real and imaginary parts must be of the same size, either float32 or float64 (or assignable to them), and the return value will be the corresponding complex type (complex64 for float32, complex128 for float64).</source>
          <target state="translated">ビルトイン関数 complex は、2 つの浮動小数点値から複素数値を作成します。実部と虚部は同じサイズでなければならず、 float32 または float64 (またはそれらに代入可能)でなければなりません。</target>
        </trans-unit>
        <trans-unit id="ef38d7c2bab871a13bc3d0543cc12b1189486358" translate="yes" xml:space="preserve">
          <source>The compression level can be DefaultCompression, NoCompression, HuffmanOnly or any integer value between BestSpeed and BestCompression inclusive. The error returned will be nil if the level is valid.</source>
          <target state="translated">圧縮レベルは、DefaultCompression、NoCompression、HuffmanOnly、またはBestSpeedとBestCompressionの間の任意の整数値を指定できます。レベルが有効な場合、エラーは nil で返されます。</target>
        </trans-unit>
        <trans-unit id="351f67248e4d8a5518193363a02cfe1c83014012" translate="yes" xml:space="preserve">
          <source>The constant UpperLower has an otherwise impossible delta value.</source>
          <target state="translated">定数UpperLowerは、そうでなければ不可能なデルタ値を持っています。</target>
        </trans-unit>
        <trans-unit id="8c8706295858fb442cc0b27075b7f68668230e3c" translate="yes" xml:space="preserve">
          <source>The content's Seek method must work: ServeContent uses a seek to the end of the content to determine its size.</source>
          <target state="translated">コンテンツの Seek メソッドが動作する必要があります。ServeContent は、コンテンツのサイズを決定するためにコンテンツの最後までシークを使用します。</target>
        </trans-unit>
        <trans-unit id="7a49805d773fd718112af263e9a481b6533ee15e" translate="yes" xml:space="preserve">
          <source>The context function will be called with a single argument, a pointer to a struct:</source>
          <target state="translated">コンテキスト関数は、構造体へのポインタという単一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d756f1871d5d4f318cef847f3f882a9119bd1f8d" translate="yes" xml:space="preserve">
          <source>The conversion rules are:</source>
          <target state="translated">変換ルールは</target>
        </trans-unit>
        <trans-unit id="8b9249f4b562855e188c8c6e04ee31f39d350295" translate="yes" xml:space="preserve">
          <source>The copy built-in function copies elements from a source slice into a destination slice. (As a special case, it also will copy bytes from a string to a slice of bytes.) The source and destination may overlap. Copy returns the number of elements copied, which will be the minimum of len(src) and len(dst).</source>
          <target state="translated">コピー組み込み関数は、ソーススライスからデスティネーションスライスに要素をコピーします。(特殊なケースとして、文字列からバイトのスライスにバイトをコピーすることもできます)。コピー元とコピー先は重複する場合があります。Copy はコピーされた要素の数を返しますが、これは len(src)と len(dst)の最小値になります。</target>
        </trans-unit>
        <trans-unit id="7003f654a24cc0fe7e8417bb3241f59de9fe836b" translate="yes" xml:space="preserve">
          <source>The count determines the number of substrings to return:</source>
          <target state="translated">count は返す部分文字列の数を決定します。</target>
        </trans-unit>
        <trans-unit id="5dbb8e654b6fb0895661f0c315a08864e55ec239" translate="yes" xml:space="preserve">
          <source>The crypto/tls package only implements some countermeasures against Lucky13 attacks on CBC-mode encryption, and only on SHA1 variants. See &lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/TLStiming.pdf&quot;&gt;http://www.isg.rhul.ac.uk/tls/TLStiming.pdf&lt;/a&gt; and &lt;a href=&quot;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&quot;&gt;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&lt;/a&gt;.</source>
          <target state="translated">crypto / tlsパッケージは、CBCモードの暗号化に対するLucky13攻撃に対するいくつかの対策のみを実装し、SHA1バリアントにのみ実装します。&lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/TLStiming.pdf&quot;&gt;http://www.isg.rhul.ac.uk/tls/TLStiming.pdf&lt;/a&gt;および&lt;a href=&quot;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&quot;&gt;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3df95d2be07bff158f354793704b39fa0b17441d" translate="yes" xml:space="preserve">
          <source>The cryptographic operations are implemented using constant-time algorithms.</source>
          <target state="translated">暗号演算は、一定時間アルゴリズムを用いて実装されています。</target>
        </trans-unit>
        <trans-unit id="7eab6b01982b7d5d0967ad563265ae830b1ba245" translate="yes" xml:space="preserve">
          <source>The cryptographic operations do not use constant-time algorithms.</source>
          <target state="translated">暗号演算では、一定時間アルゴリズムを使用しません。</target>
        </trans-unit>
        <trans-unit id="27e1f3bd597aed109fd98be320131ab37e282b69" translate="yes" xml:space="preserve">
          <source>The currently supported key types are *rsa.PublicKey, *ecdsa.PublicKey and ed25519.PublicKey. pub must be a supported key type, and priv must be a crypto.Signer with a supported public key.</source>
          <target state="translated">現在サポートされている鍵タイプは、*rsa.PublicKey、*ecdsa.PublicKey、およびed25519.PublicKeyである。 pubにはサポートされている鍵タイプを指定し、 privにはサポートされている公開鍵を持つcrypto.Signerを指定する必要がある。</target>
        </trans-unit>
        <trans-unit id="7a6143ad908fa5d13101f2932405343a9fc3dd21" translate="yes" xml:space="preserve">
          <source>The debug parameter enables additional output. Passing debug=0 prints only the hexadecimal addresses that pprof needs. Passing debug=1 adds comments translating addresses to function names and line numbers, so that a programmer can read the profile without tools.</source>
          <target state="translated">debug パラメータを使用すると、追加出力が可能になります。debug=0 を渡すと、pprof が必要とする 16 進数のアドレスのみを出力します。debug=1 を渡すと、アドレスを関数名と行番号に変換するコメントが追加され、プログラマがツールなしでプロファイルを読むことができるようになります。</target>
        </trans-unit>
        <trans-unit id="bcfadeab38a63378303009891c62ea08d3a9f648" translate="yes" xml:space="preserve">
          <source>The decision can also be forced while building the Go source tree by setting the netgo or netcgo build tag.</source>
          <target state="translated">また、netgoまたはnetcgoのビルドタグを設定することで、Goのソースツリーを構築している間に強制的に決定することもできます。</target>
        </trans-unit>
        <trans-unit id="e55a5ed5aee48109c8f556983bc2b6ba47049c1e" translate="yes" xml:space="preserve">
          <source>The decoded form returned by the Reader's Read method rewrites the &quot;\r\n&quot; line endings into the simpler &quot;\n&quot;, removes leading dot escapes if present, and stops with error io.EOF after consuming (and discarding) the end-of-sequence line.</source>
          <target state="translated">Reader's Readメソッドによって返された復号化された形式は、&quot;\r\r\n &quot;の行末をより単純な&quot;\n &quot;に書き換え、先頭のドットエスケープがあれば削除し、行末を消費(破棄)した後、エラーio.EOFで停止します。</target>
        </trans-unit>
        <trans-unit id="ade9eaf300f62ddbbf2f36e130c2f06e8467d26d" translate="yes" xml:space="preserve">
          <source>The decoder introduces its own buffering and may read data from r beyond the JSON values requested.</source>
          <target state="translated">デコーダは独自のバッファリングを導入し、要求されたJSON値を超えてrからデータを読み込むことがあります。</target>
        </trans-unit>
        <trans-unit id="500a9025cc154f7f8f86d7b577b23c5a4330caf0" translate="yes" xml:space="preserve">
          <source>The default HTTP/1.x and HTTP/2 ResponseWriter implementations support Flusher, but ResponseWriter wrappers may not. Handlers should always test for this ability at runtime.</source>
          <target state="translated">デフォルトの HTTP/1.x および HTTP/2 ResponseWriter の実装は Flusher をサポートしていますが、ResponseWriter のラッパーはサポートしていない場合があります。ハンドラは常に実行時にこの機能をテストしなければなりません。</target>
        </trans-unit>
        <trans-unit id="dbfff1190b706ff9c82ad5d939db53ac5e19b8d5" translate="yes" xml:space="preserve">
          <source>The default ResponseWriter for HTTP/1.x connections supports Hijacker, but HTTP/2 connections intentionally do not. ResponseWriter wrappers may also not support Hijacker. Handlers should always test for this ability at runtime.</source>
          <target state="translated">HTTP/1.x 接続のデフォルトの ResponseWriter は Hijacker をサポートしていますが、HTTP/2 接続では意図的に Hijacker をサポートしていません。ResponseWriter ラッパーも Hijacker をサポートしていない場合があります。ハンドラは常に実行時にこの機能をテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="29a4bf6e98ccc92440a0810fcad76a8019aec7ff" translate="yes" xml:space="preserve">
          <source>The default behavior is to unlink the socket file only when package net created it. That is, when the listener and the underlying socket file were created by a call to Listen or ListenUnix, then by default closing the listener will remove the socket file. but if the listener was created by a call to FileListener to use an already existing socket file, then by default closing the listener will not remove the socket file.</source>
          <target state="translated">デフォルトの動作は、パッケージ net がソケットファイルを作成したときにのみ、ソケットファイルのリンクを解除するようになっています。つまり、Listen や ListenUnix の呼び出しによってリスナーとソケットファイルが作成された場合、デフォルトではリスナーを閉じてもソケットファイルは削除されますが、既存のソケットファイルを利用するために FileListener の呼び出しによってリスナーが作成された場合、デフォルトではリスナーを閉じてもソケットファイルは削除されません。</target>
        </trans-unit>
        <trans-unit id="f3bd4ca778e016b570e20fa99bcd057793129198" translate="yes" xml:space="preserve">
          <source>The default format for %v is:</source>
          <target state="translated">v の既定の形式は、%v です。</target>
        </trans-unit>
        <trans-unit id="e5fbfa4bdd17cdbfb6f18b5cea533902d960ee26" translate="yes" xml:space="preserve">
          <source>The default max idle connections is currently 2. This may change in a future release.</source>
          <target state="translated">デフォルトの最大アイドル接続数は現在2です。 これは将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="385f08ab994be40fdde70d56e38ccb63bb65d078" translate="yes" xml:space="preserve">
          <source>The default set of command-line flags is controlled by top-level functions. The FlagSet type allows one to define independent sets of flags, such as to implement subcommands in a command-line interface. The methods of FlagSet are analogous to the top-level functions for the command-line flag set.</source>
          <target state="translated">コマンドラインフラグのデフォルトセットは、トップレベル関数によって制御されます。フラグセット型は、コマンドラインインタフェースにサブコマンドを実装するなど、独立したフラグのセットを定義することを可能にします。フラグセットのメソッドは、コマンドラインフラグセットのトップレベル関数に類似しています。</target>
        </trans-unit>
        <trans-unit id="a05d93e44d2bb1f3518c258e77ecac2e52df5b7c" translate="yes" xml:space="preserve">
          <source>The define action names the template being created by providing a string constant. Here is a simple example:</source>
          <target state="translated">defineアクションは、文字列定数を提供することで作成されるテンプレートに名前を付けます。ここに簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="1752a2a854e41ac9841751567fab2d2b00d5fd9e" translate="yes" xml:space="preserve">
          <source>The defined file mode bits are the most significant bits of the FileMode. The nine least-significant bits are the standard Unix rwxrwxrwx permissions. The values of these bits should be considered part of the public API and may be used in wire protocols or disk representations: they must not be changed, although new bits might be added.</source>
          <target state="translated">定義されたファイルモードビットは、FileModeの最上位ビットです。9つの最下位ビットは、標準的なUnixのrwxrwxrwxパーミッションです。これらのビットの値はパブリック API の一部とみなされ、ワイヤプロトコルやディスク表現で使用することができます。</target>
        </trans-unit>
        <trans-unit id="5cff7ee8fa31e3f6a6739a2dee232b717a523c6f" translate="yes" xml:space="preserve">
          <source>The delete built-in function deletes the element with the specified key (m[key]) from the map. If m is nil or there is no such element, delete is a no-op.</source>
          <target state="translated">delete 組み込み関数は、指定されたキー(m[key])を持つ要素をマップから削除します。m が nil であるか、そのような要素が存在しない場合、delete は実行されません。</target>
        </trans-unit>
        <trans-unit id="7be6f8c0500d37b62c7237cb3172e8612a1be7ae" translate="yes" xml:space="preserve">
          <source>The dictionary may be nil. If not, its contents should not be modified until the Writer is closed.</source>
          <target state="translated">辞書は nil であってもかまいません。そうでない場合は、ライターが閉じられるまでその内容は変更されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="bc9a068b7cdbaff9efc9114bb2316dc6eaf9165d" translate="yes" xml:space="preserve">
          <source>The direction of a channel is indicated by one of these constants.</source>
          <target state="translated">チャネルの方向は、これらの定数のいずれかによって示される。</target>
        </trans-unit>
        <trans-unit id="46b217ce09d8bd67e6158257fb40490e88a671dd" translate="yes" xml:space="preserve">
          <source>The direction of a channel type is indicated by a bit mask including one or both of the following constants.</source>
          <target state="translated">チャンネルタイプの方向は、以下の定数のいずれか一方または両方を含むビットマスクによって示される。</target>
        </trans-unit>
        <trans-unit id="7dfb11306d6f3241074422bcaa067904172344cc" translate="yes" xml:space="preserve">
          <source>The directory is neither guaranteed to exist nor have accessible permissions.</source>
          <target state="translated">そのディレクトリが存在することは保証されていませんし、アクセス可能なパーミッションもありません。</target>
        </trans-unit>
        <trans-unit id="565d684eeda7e9edb8f7bb0c103897df1854d973" translate="yes" xml:space="preserve">
          <source>The documentation for http.Request.Write details which fields of req are included in the dump.</source>
          <target state="translated">http.Request.Write のドキュメントには、req のどのフィールドがダンプに含まれるかの詳細が記載されています。</target>
        </trans-unit>
        <trans-unit id="07211f6185f4e6de4337f341c2cdb69d4cc499c7" translate="yes" xml:space="preserve">
          <source>The documentation here focuses on the security features of the package. For information about how to program the templates themselves, see the documentation for text/template.</source>
          <target state="translated">ここでは、パッケージのセキュリティ機能に焦点を当てています。テンプレート自体をプログラムする方法については、text/template のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d608ae58f506a273826ac24fbe8a6e832c7cfa18" translate="yes" xml:space="preserve">
          <source>The earlier index entries are the indices of the embedded fields implicitly traversed to get from (the type of) x to f, starting at embedding depth 0.</source>
          <target state="translated">初期のインデックスエントリは、埋め込み深度0から始まり、(型の)xからfに到達するために暗黙的にトラバースされた埋め込みフィールドのインデックスです。</target>
        </trans-unit>
        <trans-unit id="9969cd1fd12276c81b2d25b52e841cee1f38a6af" translate="yes" xml:space="preserve">
          <source>The earlier index entries are the indices of the embedded struct fields traversed to get to the found entry, starting at depth 0.</source>
          <target state="translated">それ以前のインデックスエントリは、深さ0から始まる、見つかったエントリに到達するためにトラバースされた埋め込み構造体フィールドのインデックスです。</target>
        </trans-unit>
        <trans-unit id="55f7215f8e7a1256ecd44a2e72424fdc36866f77" translate="yes" xml:space="preserve">
          <source>The encoded form is:</source>
          <target state="translated">符号化された形になっています。</target>
        </trans-unit>
        <trans-unit id="58738aa6dbb46f39a2d83f07741091a7022a1024" translate="yes" xml:space="preserve">
          <source>The encoding handles 4-byte chunks, using a special encoding for the last fragment, so Encode is not appropriate for use on individual blocks of a large data stream. Use NewEncoder() instead.</source>
          <target state="translated">エンコードは、最後のフラグメントに特別なエンコードを使用して 4 バイトのチャンクを処理するので、 Encode は大きなデータストリームの個々のブロックでの使用には適していません。代わりに NewEncoder()を使用してください。</target>
        </trans-unit>
        <trans-unit id="352cf3ce7f63c6b9e4ef698575b243f2f7eab5f4" translate="yes" xml:space="preserve">
          <source>The encoding of each struct field can be customized by the format string stored under the &quot;json&quot; key in the struct field's tag. The format string gives the name of the field, possibly followed by a comma-separated list of options. The name may be empty in order to specify options without overriding the default field name.</source>
          <target state="translated">各構造体フィールドのエンコーディングは、構造体フィールドのタグの &quot;json &quot;キーの下に格納されているフォーマット文字列によってカスタマイズすることができます。フォーマット文字列には、フィールドの名前を指定し、その後にオプションをカンマで区切ったリストをつけることもできます。デフォルトのフィールド名を上書きせずにオプションを指定するには、名前を空にすることができます。</target>
        </trans-unit>
        <trans-unit id="17b6791f4c87db95fbf5fcc1580f710e0b98bcc7" translate="yes" xml:space="preserve">
          <source>The encoding pads the output to a multiple of 4 bytes, so Encode is not appropriate for use on individual blocks of a large data stream. Use NewEncoder() instead.</source>
          <target state="translated">エンコードは4バイトの倍数に出力をパッドするので、Encodeは大きなデータストリームの個々のブロックでの使用には適していません。代わりに NewEncoder()を使用してください。</target>
        </trans-unit>
        <trans-unit id="f9b92d6b313993a8570c418851ae0a82ee1d08b2" translate="yes" xml:space="preserve">
          <source>The encoding pads the output to a multiple of 8 bytes, so Encode is not appropriate for use on individual blocks of a large data stream. Use NewEncoder() instead.</source>
          <target state="translated">エンコードは出力を 8 バイトの倍数にパッドするので、Encode は大きなデータストリームの個々のブロックでの使用には適していません。代わりに NewEncoder()を使用してください。</target>
        </trans-unit>
        <trans-unit id="f21e6b7ab20b84c2608ae859489552989b9c9ded" translate="yes" xml:space="preserve">
          <source>The entire test file is presented as the example when it contains a single example function, at least one other function, type, variable, or constant declaration, and no test or benchmark functions.</source>
          <target state="translated">テストファイル全体が例として提示されるのは、1つの例題関数、少なくとも1つの他の関数、型、変数、定数の宣言が含まれており、テストやベンチマーク関数がない場合です。</target>
        </trans-unit>
        <trans-unit id="8a5b41cf040dd894c5f5818385e864bb8f5f4256" translate="yes" xml:space="preserve">
          <source>The environment values may be either a complete URL or a &quot;host[:port]&quot;, in which case the &quot;http&quot; scheme is assumed. An error is returned if the value is a different form.</source>
          <target state="translated">環境値は完全なURLか &quot;host[:port]&quot;のどちらかである。値が異なる形式の場合はエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="63d88a909a5214b04c717d2600360e2bf8c34633" translate="yes" xml:space="preserve">
          <source>The error built-in interface type is the conventional interface for representing an error condition, with the nil value representing no error.</source>
          <target state="translated">エラー組み込みインタフェース型は、エラー状態を表現するための従来のインタフェースであり、nil 値はエラーなしを表します。</target>
        </trans-unit>
        <trans-unit id="057113f0f11fb7ab423f9c5529d153f0951fafc6" translate="yes" xml:space="preserve">
          <source>The error is EOF only if no bytes were read. If an EOF happens after reading some but not all the bytes, Read returns ErrUnexpectedEOF.</source>
          <target state="translated">エラーはバイトが読み込まれなかった場合のみEOFとなります。一部のバイトではなく、すべてのバイトを読み込んだ後にEOFが発生した場合、ReadはErrUnexpectedEOFを返します。</target>
        </trans-unit>
        <trans-unit id="e19a9195a1344f79f24fd7f396a97d73332aa946" translate="yes" xml:space="preserve">
          <source>The errors that ParseFloat returns have concrete type *NumError and include err.Num = s.</source>
          <target state="translated">ParseFloat が返すエラーは具象型の *NumError で、 err.Num=s.を含みます。</target>
        </trans-unit>
        <trans-unit id="235cee0ee469905c73061c3ebbf12b0afd87e749" translate="yes" xml:space="preserve">
          <source>The errors that ParseInt returns have concrete type *NumError and include err.Num = s. If s is empty or contains invalid digits, err.Err = ErrSyntax and the returned value is 0; if the value corresponding to s cannot be represented by a signed integer of the given size, err.Err = ErrRange and the returned value is the maximum magnitude integer of the appropriate bitSize and sign.</source>
          <target state="translated">ParseInt が返すエラーは具象型 *NumError で、 err.Num=s を含みます。 s が空であるか無効な数字を含む場合、 err.Err=ErrSyntax となり、返される値は 0 となります。s に対応する値が指定されたサイズの符号付き整数で表現できない場合、 err.Err=ErrRange となり、返される値は適切なビットサイズと符号の最大マグニチュード整数となります。</target>
        </trans-unit>
        <trans-unit id="1079b4c215daaeaddfd42a5c24ae40421a24ca31" translate="yes" xml:space="preserve">
          <source>The exact method of division of a binary into separate Objs is an internal detail of the symbol table format.</source>
          <target state="translated">バイナリを別のObjsに分割する正確な方法は、シンボルテーブル形式の内部的な詳細です。</target>
        </trans-unit>
        <trans-unit id="704442846624164254cefb0621f909b9f8e7b255" translate="yes" xml:space="preserve">
          <source>The executable example for Time.Format demonstrates the working of the layout string in detail and is a good reference.</source>
          <target state="translated">Time.Formatの実行例では、レイアウト文字列の動作を詳しく説明しており、参考になります。</target>
        </trans-unit>
        <trans-unit id="d1e6774ae13e892b5b495469c8177e657ea29b91" translate="yes" xml:space="preserve">
          <source>The execution trace captures a wide range of execution events such as goroutine creation/blocking/unblocking, syscall enter/exit/block, GC-related events, changes of heap size, processor start/stop, etc. A precise nanosecond-precision timestamp and a stack trace is captured for most events. The generated trace can be interpreted using `go tool trace`.</source>
          <target state="translated">実行トレースは、goroutineの作成/ブロック/ブロック解除、syscallの入力/終了/ブロック、GC関連イベント、ヒープサイズの変更、プロセッサの起動/停止など、幅広い実行イベントをキャプチャします。ほとんどのイベントについて、正確なナノ秒精度のタイムスタンプとスタックトレースがキャプチャされます。生成されたトレースは、`go tool trace`を使って解釈することができます。</target>
        </trans-unit>
        <trans-unit id="0bb8da556b82de3d2273cd84d139d0610336a88a" translate="yes" xml:space="preserve">
          <source>The familiar base-setting prefixes 0b (binary), 0o and 0 (octal), and 0x (hexadecimal) are accepted when scanning integers without a format or with the %v verb, as are digit-separating underscores.</source>
          <target state="translated">おなじみの基底設定接頭辞 0b (2 進数)、0o および 0 (8 進数)、0x (16 進数)は、整数をフォーマットなしでスキャンするとき、または %v 動詞を使用してスキャンするときに、桁区切りのアンダースコアと同様に受け入れられます。</target>
        </trans-unit>
        <trans-unit id="f9ffee1670410a5e7cd11d5f1bee248ae5a136bc" translate="yes" xml:space="preserve">
          <source>The field semantics differ slightly between client and server usage. In addition to the notes on the fields below, see the documentation for Request.Write and RoundTripper.</source>
          <target state="translated">フィールドのセマンティクスは、クライアントとサーバの使用法によって若干異なります。以下のフィールドに関する注意事項に加えて、Request.Write と RoundTripper のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bc18f2dd0c8c98e57212ed20f1a2ef2dc2747c6d" translate="yes" xml:space="preserve">
          <source>The file's data can then be read into a slice of bytes. Read and Write take their byte counts from the length of the argument slice.</source>
          <target state="translated">その後、ファイルのデータをバイト数のスライスに読み込むことができます。リードとライトは、引数スライスの長さからバイト数を取ります。</target>
        </trans-unit>
        <trans-unit id="bf3df07f08dd9391973ec022887d04b86f02f1b9" translate="yes" xml:space="preserve">
          <source>The filepath package uses either forward slashes or backslashes, depending on the operating system. To process paths such as URLs that always use forward slashes regardless of the operating system, see the path package.</source>
          <target state="translated">filepath パッケージは、オペレーテ ィ ングシステムに応じて、順方向スラッシュかバックスラッシュのいずれかを使用します。オペレーティングシステムに関係なく常にフォワードスラッシュを使用する URL のようなパスを処理するには、path パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="e2a5de21556a23ce2ab6268f51afe1d5e198e5ff" translate="yes" xml:space="preserve">
          <source>The finalizer is scheduled to run at some arbitrary time after the program can no longer reach the object to which obj points. There is no guarantee that finalizers will run before a program exits, so typically they are useful only for releasing non-memory resources associated with an object during a long-running program. For example, an os.File object could use a finalizer to close the associated operating system file descriptor when a program discards an os.File without calling Close, but it would be a mistake to depend on a finalizer to flush an in-memory I/O buffer such as a bufio.Writer, because the buffer would not be flushed at program exit.</source>
          <target state="translated">ファイナライザは、プログラムが obj が指すオブジェクトに到達できなくなった後、任意の時間に実行されるようにスケジュールされています。プログラムが終了する前にファイナライザが実行されるという保証はないので、通常、ファイナライザは長時間実行されているプログラムの間にオブジェクトに関連付けられている非メモリ・リソースを解放する場合にのみ有用です。例えば、os.File オブジェクトは、プログラムが Close を呼び出さずに os.File を破棄したときに、関連するオペレーティング・システム・ファイル記述子を閉じるためにファイナライザを使用することができますが、bufio.Writer のようなインメモリ I/O バッファをフラッシュするためにファイナライザに依存するのは間違いです。</target>
        </trans-unit>
        <trans-unit id="b1e301ef4e8e6bbc26fb8b640366f5d912e010bd" translate="yes" xml:space="preserve">
          <source>The first call to ReadContinuedLine will return &quot;Line 1 continued...&quot; and the second will return &quot;Line 2&quot;.</source>
          <target state="translated">ReadContinuedLineの1回目の呼び出しは「Line 1 continued...」を返し、2回目の呼び出しは「Line 2」を返します。</target>
        </trans-unit>
        <trans-unit id="aa248e4cf567dddf42fcb3d7320a5fbdd025b032" translate="yes" xml:space="preserve">
          <source>The first call will cache the current user information. Subsequent calls will return the cached value and will not reflect changes to the current user.</source>
          <target state="translated">最初の呼び出しは現在のユーザ情報をキャッシュします。それ以降の呼び出しはキャッシュされた値を返し、現在のユーザへの変更は反映されません。</target>
        </trans-unit>
        <trans-unit id="f9bea105d5515e425130c674b9a6d60024d04428" translate="yes" xml:space="preserve">
          <source>The first step to profiling a Go program is to enable profiling. Support for profiling benchmarks built with the standard testing package is built into go test. For example, the following command runs benchmarks in the current directory and writes the CPU and memory profiles to cpu.prof and mem.prof:</source>
          <target state="translated">Goプログラムをプロファイリングする最初のステップは、プロファイリングを有効にすることです。標準のテストパッケージで構築されたベンチマークのプロファイリングのサポートは、go testに組み込まれています。例えば、以下のコマンドは、カレントディレクトリでベンチマークを実行し、CPUとメモリのプロファイルをcpu.profとmem.profに書き込みます。</target>
        </trans-unit>
        <trans-unit id="436dd80ca68673a729fce026c246571c6f61d421" translate="yes" xml:space="preserve">
          <source>The first time the function is called for a particular traceback, all the fields except PC will be 0. The function should fill in the other fields if possible, setting them to 0/nil if the information is not available. The Data field may be used to store any useful information across calls. The More field should be set to non-zero if there is more information for this PC, zero otherwise. If More is set non-zero, the function will be called again with the same PC, and may return different information (this is intended for use with inlined functions). If More is zero, the function will be called with the next PC value in the traceback. When the traceback is complete, the function will be called once more with PC set to zero; this may be used to free any information. Each call will leave the fields of the struct set to the same values they had upon return, except for the PC field when the More field is zero. The function must not keep a copy of the struct pointer between calls.</source>
          <target state="translated">この関数が特定のトレースバックに対して最初に呼び出されたとき、PCを除くすべてのフィールドは0になります。 この関数は、可能であれば他のフィールドを埋め、情報が利用できない場合は0/nilに設定する必要があります。Dataフィールドは、呼び出しにまたがって有用な情報を保存するために使用することができます。Moreフィールドは、このPCの情報がさらにある場合は0以外の値に設定する必要があり、そうでない場合は0に設定する必要があります。Moreが0以外に設定されている場合、この関数は同じPCで再度呼び出され、異なる情報を返す可能性があります(これはインライン関数での使用を意図しています)。Moreが0の場合、関数はトレースバックの次のPC値で呼び出されます。トレースバックが完了すると、この関数は PC をゼロに設定して再度呼び出されます。各呼び出しでは、構造体のフィールドは、More フィールドがゼロの場合の PC フィールドを除き、リターン時の値と同じ値に設定されたままになります。この関数は、呼び出しの間に構造体ポインタのコピーを保持してはいけません。</target>
        </trans-unit>
        <trans-unit id="1c12332b1a7f816e653faac5972323a1a86f4075" translate="yes" xml:space="preserve">
          <source>The fmt package's Errorf function lets us use the package's formatting features to create descriptive error messages.</source>
          <target state="translated">fmt パッケージの Errorf 関数を使うと、パッケージの書式設定機能を使って説明的なエラーメッセージを作成することができます。</target>
        </trans-unit>
        <trans-unit id="daed29ba07a438b86a35f4ffceadf0ee0b2962c4" translate="yes" xml:space="preserve">
          <source>The following environment variables ($name or %name%, depending on the host operating system) control the run-time behavior of Go programs. The meanings and use may change from release to release.</source>
          <target state="translated">以下の環境変数 ($name または %name%)は、Go プログラムの実行時の動作を制御します (ホスト・オペレーティング・システムによって異なります)。この意味と使用法は、リリースごとに変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d76a76a5baf9188ebac1a65a2793d054e97d3403" translate="yes" xml:space="preserve">
          <source>The following example shows how to maintain a scalable frequently read, but infrequently updated data structure using copy-on-write idiom.</source>
          <target state="translated">以下の例は、コピーオンライトイディオムを使用して、頻繁に読み込まれるが更新頻度の低いスケーラブルなデータ構造を維持する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3f0a6fe70878d3ed973c5f4c4f9e11a4b37e3d2a" translate="yes" xml:space="preserve">
          <source>The following example shows how to use Value for periodic program config updates and propagation of the changes to worker goroutines.</source>
          <target state="translated">以下の例では、プログラム構成の定期的な更新とワーカーゴロチンへの変更の伝播にValueを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2cccb14470014df050daea92c16a16fd189e8367" translate="yes" xml:space="preserve">
          <source>The following forms are permitted:</source>
          <target state="translated">以下のような形態が認められています。</target>
        </trans-unit>
        <trans-unit id="f535af253987553534ec7b604b13bea0bafaf89a" translate="yes" xml:space="preserve">
          <source>The following key types are currently supported: *rsa.PrivateKey, *ecdsa.PrivateKey and ed25519.PrivateKey. Unsupported key types result in an error.</source>
          <target state="translated">現在、以下のキータイプがサポートされています。*rsa.PrivateKey、*ecdsa.PrivateKey、およびed25519.PrivateKeyです。サポートされていないキー・タイプはエラーになります。</target>
        </trans-unit>
        <trans-unit id="db7a430d5590cf9adf90b727249460131ab84e28" translate="yes" xml:space="preserve">
          <source>The following key types are currently supported: *rsa.PublicKey, *ecdsa.PublicKey and ed25519.PublicKey. Unsupported key types result in an error.</source>
          <target state="translated">現在、以下のキータイプがサポートされています。*rsa.PublicKey、*ecdsa.PublicKey、およびed25519.PublicKeyです。サポートされていないキー・タイプはエラーになります。</target>
        </trans-unit>
        <trans-unit id="575dc13df3822635a20233f0d934b2828c4cbcc1" translate="yes" xml:space="preserve">
          <source>The following patterns involving Pointer are valid. Code not using these patterns is likely to be invalid today or to become invalid in the future. Even the valid patterns below come with important caveats.</source>
          <target state="translated">Pointerを含む以下のパターンが有効です。これらのパターンを使用していないコードは、現在無効であるか、将来的に無効になる可能性があります。以下の有効なパターンであっても、重要な注意点があります。</target>
        </trans-unit>
        <trans-unit id="ea1b5d42ec809a44272262968add764fd0382aa5" translate="yes" xml:space="preserve">
          <source>The following table captures the capabilities of each format:</source>
          <target state="translated">以下の表は、各フォーマットの能力をまとめたものです。</target>
        </trans-unit>
        <trans-unit id="00ec28c9d7b575a36a11e5441e71a7350e3c8790" translate="yes" xml:space="preserve">
          <source>The following tags on struct fields have special meaning to Unmarshal:</source>
          <target state="translated">構造体フィールドの以下のタグは、Unmarshalにとって特別な意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="89924ba6250a79536c8a80bb6ca7f28f4193a60a" translate="yes" xml:space="preserve">
          <source>The format fmt is one of 'b' (-ddddp&amp;plusmn;ddd, a binary exponent), 'e' (-d.dddde&amp;plusmn;dd, a decimal exponent), 'E' (-d.ddddE&amp;plusmn;dd, a decimal exponent), 'f' (-ddd.dddd, no exponent), 'g' ('e' for large exponents, 'f' otherwise), 'G' ('E' for large exponents, 'f' otherwise), 'x' (-0xd.ddddp&amp;plusmn;ddd, a hexadecimal fraction and binary exponent), or 'X' (-0Xd.ddddP&amp;plusmn;ddd, a hexadecimal fraction and binary exponent).</source>
          <target state="translated">形式fmtは、 'b'（-ddddp&amp;plusmn;ddd、2進指数）、 'e'（-d.dddde&amp;plusmn;dd、10進指数）、 'E'（-d.ddddE&amp;plusmn;dd、10進指数）のいずれかです。 ）、 'f'（-ddd.dddd、指数なし）、 'g'（大きな指数の場合は 'e'、それ以外の場合は 'f'）、 'G'（大きな指数の場合は 'E'、それ以外の場合は 'f'）、 ' x '（-0xd.ddddp&amp;plusmn;ddd、16進数の小数部と2進数の指数）、または' X '（-0Xd.ddddP&amp;plusmn;ddd、16進数の小数部と2進数の指数）。</target>
        </trans-unit>
        <trans-unit id="f76288ef40c91d2e63963863e41869428543cdec" translate="yes" xml:space="preserve">
          <source>The formats 2, _2, and 02 are unpadded, space-padded, and zero-padded day of month. The formats __2 and 002 are space-padded and zero-padded three-character day of year; there is no unpadded day of year format.</source>
          <target state="translated">フォーマット_2、_2、02は、空白でパッドなし、ゼロパッドの月の日です。フォーマット_2_2と002は、スペースパッド付き、ゼロパッド付きの3文字の年の日であり、パッドなしの年の日のフォーマットはありません。</target>
        </trans-unit>
        <trans-unit id="1f639fab95b9f7e1b599aa2a265c8aee60d79d31" translate="yes" xml:space="preserve">
          <source>The formfeed character acts like a newline but it also terminates all columns in the current line (effectively calling Flush). Tab- terminated cells in the next line start new columns. Unless found inside an HTML tag or inside an escaped text segment, formfeed characters appear as newlines in the output.</source>
          <target state="translated">formfeed文字は改行のように動作しますが、現在の行のすべての列を終了させます(効果的にFlushを呼び出します)。次の行のタブで終了したセルは新しい列を開始します。HTMLタグの中やエスケープされたテキストセグメントの中にない限り、フォームフィード文字は出力の中では改行として表示されます。</target>
        </trans-unit>
        <trans-unit id="6c966e528430f5e8f847d49a893afb0bf98faff4" translate="yes" xml:space="preserve">
          <source>The function is never called with an empty data slice unless atEOF is true. If atEOF is true, however, data may be non-empty and, as always, holds unprocessed text.</source>
          <target state="translated">atEOFが真でない限り、この関数は空のデータスライスで呼び出されることはありません。しかし atEOF が真の場合、データは空ではないかもしれず、常に未処理のテキストを保持します。</target>
        </trans-unit>
        <trans-unit id="bb0e0b68d3018d9e09f97b972052414d315bce69" translate="yes" xml:space="preserve">
          <source>The function may return early (before the entire result is written) and return a formatting error, for instance due to an incorrect AST.</source>
          <target state="translated">この関数は,(結果全体が書き込まれる前に)早期に返され,例えばASTが正しくないためにフォーマットエラーを返すことがあります.</target>
        </trans-unit>
        <trans-unit id="f82da77fd5615642bd9b732fd9350b4315a5dea8" translate="yes" xml:space="preserve">
          <source>The function panics if the provided interface is not a slice.</source>
          <target state="translated">この関数は、提供されたインターフェースがスライスでない場合にパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="4a5f1ee976b1b1f94f517d27ee9603ea7e455c85" translate="yes" xml:space="preserve">
          <source>The function panics if z &amp;lt; 0. The value of z is undefined in that case.</source>
          <target state="translated">z &amp;lt;0の場合、関数はパニックになります。その場合、zの値は未定義です。</target>
        </trans-unit>
        <trans-unit id="d83c73a08df2f74bc57a61017e163cb8c0547bd2" translate="yes" xml:space="preserve">
          <source>The functions in this package allow a program to change the way Go programs handle signals.</source>
          <target state="translated">本パッケージの関数を使用すると、囲碁プログラムが信号を処理する方法をプログラムで変更することができます。</target>
        </trans-unit>
        <trans-unit id="c621ec21270aea7b19125c0f31ddb234d896d492" translate="yes" xml:space="preserve">
          <source>The fundamental interface is called Image. An Image contains colors, which are described in the image/color package.</source>
          <target state="translated">基本的なインターフェースは Image と呼ばれています。画像には色が含まれており、それは画像/色パッケージで記述されています。</target>
        </trans-unit>
        <trans-unit id="3e95d4d070ede79d500e36cf5c238c24c3001c9d" translate="yes" xml:space="preserve">
          <source>The gc runtime imposes a limit of 64 kB on channel element types. If t's size is equal to or exceeds this limit, ChanOf panics.</source>
          <target state="translated">gcのランタイムでは、チャネル要素の型に64kBの制限が課せられています。tのサイズがこの制限値と同じかそれを超えると,ChanOfはパニックを起こします.</target>
        </trans-unit>
        <trans-unit id="0b2d97be3dbe373d310641088f98b283534b1dcf" translate="yes" xml:space="preserve">
          <source>The general form represented is:</source>
          <target state="translated">表現される一般的な形態は</target>
        </trans-unit>
        <trans-unit id="e818a1eefc582415dc190e3c644893b44536faa0" translate="yes" xml:space="preserve">
          <source>The gzip file stores a header giving metadata about the compressed file. That header is exposed as the fields of the Writer and Reader structs.</source>
          <target state="translated">gzip ファイルは、圧縮されたファイルに関するメタデータを与えるヘッダを格納します。このヘッダは Writer 構造体と Reader 構造体のフィールドとして公開されます。</target>
        </trans-unit>
        <trans-unit id="d55115d1e7ac93246c076c18ab9827900516047e" translate="yes" xml:space="preserve">
          <source>The handler is typically nil, in which case the DefaultServeMux is used.</source>
          <target state="translated">ハンドラは通常 nil で、その場合は DefaultServeMux が使用されます。</target>
        </trans-unit>
        <trans-unit id="19708f111db26407005495f3eafb1c4b25430791" translate="yes" xml:space="preserve">
          <source>The handling of spaces and newlines differs from that of C's scanf family: in C, newlines are treated as any other space, and it is never an error when a run of spaces in the format string finds no spaces to consume in the input.</source>
          <target state="translated">スペースと改行の扱いは、Cのscanfファミリーとは異なります。Cでは、改行は他のスペースと同じように扱われ、フォーマット文字列の中でスペースを実行しても、入力に使用するスペースがない場合でもエラーになることはありません。</target>
        </trans-unit>
        <trans-unit id="e507edab6e88a1637c49a21b0db27e0ccae398e0" translate="yes" xml:space="preserve">
          <source>The heap dump format is defined at &lt;a href=&quot;https://golang.org/s/go15heapdump&quot;&gt;https://golang.org/s/go15heapdump&lt;/a&gt;.</source>
          <target state="translated">ヒープダンプの形式は&lt;a href=&quot;https://golang.org/s/go15heapdump&quot;&gt;https://golang.org/s/go15heapdump&lt;/a&gt;で定義されています。</target>
        </trans-unit>
        <trans-unit id="8b009325b4464d415a87b0e6547346de038d0c47" translate="yes" xml:space="preserve">
          <source>The heap profile reports statistics as of the most recently completed garbage collection; it elides more recent allocation to avoid skewing the profile away from live data and toward garbage. If there has been no garbage collection at all, the heap profile reports all known allocations. This exception helps mainly in programs running without garbage collection enabled, usually for debugging purposes.</source>
          <target state="translated">ヒーププロファイルは、直近に完了したガベージコレクションの統計情報を報告します。ガベージコレクションが全く行われていない場合、ヒーププロファイルはすべての既知の割り当てを報告します。この例外は、主にガベージコレクションを有効にせずに実行しているプログラムで、通常はデバッグのために役立ちます。</target>
        </trans-unit>
        <trans-unit id="421272feeab82226233835220df71bd5575dfeaf" translate="yes" xml:space="preserve">
          <source>The heap profile tracks both the allocation sites for all live objects in the application memory and for all objects allocated since the program start. Pprof's -inuse_space, -inuse_objects, -alloc_space, and -alloc_objects flags select which to display, defaulting to -inuse_space (live objects, scaled by size).</source>
          <target state="translated">ヒープ・プロファイルは、アプリケーション・メモリ内のすべてのライブ・オブジェクトの割り当て場所と、プログラムの開始以降に割り当てられたすべてのオブジェクトの割り当て場所の両方を追跡します。Pprof の -inuse_space、-inuse_objects、-alloc_space、および -alloc_objects フラグは、表示するオブジェクトを選択します。</target>
        </trans-unit>
        <trans-unit id="9054b52054ed118bba62807238e18c27e8900f1e" translate="yes" xml:space="preserve">
          <source>The http package's Transport and Server both automatically enable HTTP/2 support for simple configurations. To enable HTTP/2 for more complex configurations, to use lower-level HTTP/2 features, or to use a newer version of Go's http2 package, import &quot;golang.org/x/net/http2&quot; directly and use its ConfigureTransport and/or ConfigureServer functions. Manually configuring HTTP/2 via the golang.org/x/net/http2 package takes precedence over the net/http package's built-in HTTP/2 support.</source>
          <target state="translated">http パッケージのトランスポートとサーバは、単純な設定では自動的に HTTP/2 サポートを有効にします。より複雑な設定で HTTP/2 を有効にしたり、低レベルの HTTP/2 機能を使用したり、Go の新しいバージョンの http2 パッケージを使用したりするには、&quot;golang.org/x/net/http2&quot; を直接インポートして ConfigureTransport や ConfigureServer 関数を使用してください。golang.org/x/net/http2 パッケージを介して手動で HTTP/2 を設定することは、net/http パッケージのビルトイン HTTP/2 サポートよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="7901eb39a7a77a33e17eff2e48d2aac1d7c0d97c" translate="yes" xml:space="preserve">
          <source>The identification of global unicast addresses uses address type identification as defined in RFC 1122, RFC 4632 and RFC 4291 with the exception of IPv4 directed broadcast addresses. It returns true even if ip is in IPv4 private address space or local IPv6 unicast address space.</source>
          <target state="translated">グローバルユニキャストアドレスの識別は、IPv4指向ブロードキャストアドレスを除いて、RFC 1122、RFC 4632、RFC 4291で定義されているアドレスタイプの識別を使用します。ipがIPv4プライベートアドレス空間またはローカルIPv6ユニキャストアドレス空間にある場合でも真を返します。</target>
        </trans-unit>
        <trans-unit id="b257c667cd0c9ffb7ee1c476e193cf63abc04956" translate="yes" xml:space="preserve">
          <source>The imag built-in function returns the imaginary part of the complex number c. The return value will be floating point type corresponding to the type of c.</source>
          <target state="translated">imag組み込み関数は,複素数cの虚数部を返します.</target>
        </trans-unit>
        <trans-unit id="bba6c5ec151d11520ba69091805c64672051a283" translate="yes" xml:space="preserve">
          <source>The implementation compiles a custom codec for each data type in the stream and is most efficient when a single Encoder is used to transmit a stream of values, amortizing the cost of compilation.</source>
          <target state="translated">実装では、ストリーム内のデータ型ごとにカスタムコーデックをコンパイルし、単一のエンコーダを使用して値のストリームを送信する場合に最も効率的であり、コンパイルのコストを償却します。</target>
        </trans-unit>
        <trans-unit id="cc59eb7da6cf17b91e5a422524763e1124d23ad5" translate="yes" xml:space="preserve">
          <source>The implementation fn can assume that the argument Value slice has the number and type of arguments given by typ. If typ describes a variadic function, the final Value is itself a slice representing the variadic arguments, as in the body of a variadic function. The result Value slice returned by fn must have the number and type of results given by typ.</source>
          <target state="translated">実装 fn は、引数 Value スライスが typ で与えられた引数の数と型を持っていると仮定することができます。typが変項関数を記述している場合、最終的なValueはそれ自体が変項関数の本体のように変項引数を表すスライスです。fnによって返される結果のValueスライスは、typによって与えられた結果の数と型を持たなければなりません。</target>
        </trans-unit>
        <trans-unit id="a41481e84f45a7e3719a2630303073b44edd9b5b" translate="yes" xml:space="preserve">
          <source>The implementation is sufficient for HTTP (RFC 2388) and the multipart bodies generated by popular browsers.</source>
          <target state="translated">この実装は、HTTP (RFC 2388)と、一般的なブラウザで生成されるマルチパートボディには十分です。</target>
        </trans-unit>
        <trans-unit id="bd36b82add2ec8e45a6f77ef7cf720308cbe3f24" translate="yes" xml:space="preserve">
          <source>The implementation provides filters that uncompress during reading and compress during writing. For example, to write compressed data to a buffer:</source>
          <target state="translated">実装では、読み込み時に圧縮を解除し、書き込み時に圧縮するフィルタを提供しています。例えば、圧縮されたデータをバッファに書き込む場合などです。</target>
        </trans-unit>
        <trans-unit id="4c05b349b9c7f15622f23c1c3f50e289a6f9207b" translate="yes" xml:space="preserve">
          <source>The input stream consists of basic JSON values&amp;mdash;bool, string, number, and null&amp;mdash;along with delimiters [ ] { } of type Delim to mark the start and end of arrays and objects. Commas and colons are elided.</source>
          <target state="translated">入力ストリームは、bool、string、number、nullの基本的なJSON値と、配列とオブジェクトの開始と終了をマークするタイプDelimの区切り文字[] {}で構成されます。カンマとコロンは省略されます。</target>
        </trans-unit>
        <trans-unit id="12da2b29ce7b4618ed043885dc9bb14fc4b7647d" translate="yes" xml:space="preserve">
          <source>The input text for a template is UTF-8-encoded text in any format. &quot;Actions&quot;--data evaluations or control structures--are delimited by &quot;{{&quot; and &quot;}}&quot;; all text outside actions is copied to the output unchanged. Except for raw strings, actions may not span newlines, although comments can.</source>
          <target state="translated">テンプレートの入力テキストは、任意の形式でUTF-8でエンコードされたテキストです。&quot;アクション--データ評価や制御構造--は&quot;{{&quot;と&quot;}}&quot;で区切られています。生の文字列を除いて、アクションは改行できませんが、コメントはできます。</target>
        </trans-unit>
        <trans-unit id="0fe0f673e6c94e25d76ca7000237cacb398b340e" translate="yes" xml:space="preserve">
          <source>The key name will be used if it's a non-empty string consisting of only Unicode letters, digits, and ASCII punctuation except quotation marks, backslash, and comma.</source>
          <target state="translated">キー名は、引用符、バックスラッシュ、カンマを除く、Unicode文字、数字、ASCII句読点のみで構成される空でない文字列の場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="56c8d36b799fc9e0b2026b0edca00b49c8b68568" translate="yes" xml:space="preserve">
          <source>The keys should be in canonical form, as returned by CanonicalHeaderKey.</source>
          <target state="translated">キーはCanonicalHeaderKeyによって返される正規表現でなければなりません。</target>
        </trans-unit>
        <trans-unit id="aafd41e452c62afe966c7e13f3df11b54dbc58d9" translate="yes" xml:space="preserve">
          <source>The label parameter may contain arbitrary data that will not be encrypted, but which gives important context to the message. For example, if a given public key is used to decrypt two types of messages then distinct label values could be used to ensure that a ciphertext for one purpose cannot be used for another by an attacker. If not required it can be empty.</source>
          <target state="translated">ラベルパラメータには、暗号化されない任意のデータが含まれているかもしれませんが、メッセージに重要な文脈を与えます。例えば、ある公開鍵が2種類のメッセージの復号化に使われている場合、ある目的の暗号文が攻撃者によって別の目的に使われることがないように、別個のラベル値を使うことができます。必須でない場合は空にすることもできます。</target>
        </trans-unit>
        <trans-unit id="8cac55c132cd1a101696d231efd1dd2e57c66e06" translate="yes" xml:space="preserve">
          <source>The label parameter must match the value given when encrypting. See EncryptOAEP for details.</source>
          <target state="translated">label パラメータは、暗号化の際に与えられた値と一致している必要があります。詳細は EncryptOAEP を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f23b14d8824650d5d93ee806d28aa66402f402a" translate="yes" xml:space="preserve">
          <source>The last index entry is the field or method index in the (possibly embedded) type where the entry was found, either:</source>
          <target state="translated">最後のインデックスエントリは、エントリが見つかった(埋め込まれている可能性のある)型のフィールドまたはメソッドのインデックスです。</target>
        </trans-unit>
        <trans-unit id="feec6e46b5f96d5f768a208b14b5f1c441e6736a" translate="yes" xml:space="preserve">
          <source>The len built-in function returns the length of v, according to its type:</source>
          <target state="translated">len組み込み関数は、型に応じてvの長さを返します。</target>
        </trans-unit>
        <trans-unit id="67e3ff53cc19034aa94ce5014984a3863b3ceaa2" translate="yes" xml:space="preserve">
          <source>The limit controls the number of operating system threads, not the number of goroutines. A Go program creates a new thread only when a goroutine is ready to run but all the existing threads are blocked in system calls, cgo calls, or are locked to other goroutines due to use of runtime.LockOSThread.</source>
          <target state="translated">制限はオペレーティングシステムのスレッド数を制御するものであり、ゴローチンの数ではありません。囲碁プログラムは、ゴローチンの実行準備ができている場合にのみ新しいスレッドを作成しますが、既存のすべてのスレッドがシステムコール、cgoコールでブロックされているか、またはruntime.LockOSThreadを使用しているために他のゴローチンにロックされています。</target>
        </trans-unit>
        <trans-unit id="61b31a135931a0a96f45c468dd4c1356b142f056" translate="yes" xml:space="preserve">
          <source>The list of possible Object kinds.</source>
          <target state="translated">可能なオブジェクトの種類のリスト。</target>
        </trans-unit>
        <trans-unit id="f82cdeb26140d2ac8d4f27048ef361e35bc34e51" translate="yes" xml:space="preserve">
          <source>The list of tokens.</source>
          <target state="translated">トークンのリストです。</target>
        </trans-unit>
        <trans-unit id="744b107073d50b7c5d979152623baf7c98836ce1" translate="yes" xml:space="preserve">
          <source>The load and store operations, implemented by the LoadT and StoreT functions, are the atomic equivalents of &quot;return *addr&quot; and &quot;*addr = val&quot;.</source>
          <target state="translated">LoadT関数とStoreT関数によって実装されるロードとストアの操作は、&quot;return *addr &quot;と &quot;*addr=val &quot;の原子的な等価物です。</target>
        </trans-unit>
        <trans-unit id="d80346c4a6d83f0a2408ae318740b75196640a27" translate="yes" xml:space="preserve">
          <source>The lookup function is called each time the resulting importer needs to resolve an import path. In this mode the importer can only be invoked with canonical import paths (not relative or absolute ones); it is assumed that the translation to canonical import paths is being done by the client of the importer.</source>
          <target state="translated">ルックアップ関数は、結果として得られるインポーターがインポートパスを解決する必要があるたびに呼び出されます。このモードでは、インポーターは正規のインポートパス(相対パスや絶対パスではなく)でのみ起動できます。正規のインポートパスへの変換は、インポーターのクライアントによって行われていると想定されます。</target>
        </trans-unit>
        <trans-unit id="d42ee39ba69d607990bf6285f526cdb4d05cd8c5" translate="yes" xml:space="preserve">
          <source>The low bit is therefore analogous to a sign bit, but making it the complement bit instead guarantees that the largest negative integer is not a special case. For example, -129=^128=(^256&amp;gt;&amp;gt;1) encodes as (FE 01 01).</source>
          <target state="translated">したがって、下位ビットは符号ビットに類似していますが、それを補数ビットにすることで、最大の負の整数が特別なケースではないことが保証されます。たとえば、-129 = ^ 128 =（^ 256 &amp;gt;&amp;gt; 1）は（FE 01 01）としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="e23983031d30e849dd601f8a9a147a11b178b7e1" translate="yes" xml:space="preserve">
          <source>The main use case is finding resources located relative to an executable.</source>
          <target state="translated">主な使用例は、実行ファイルから相対的に配置されたリソースを見つけることです。</target>
        </trans-unit>
        <trans-unit id="ae651dd57d8aac89d2244b121832135b42a78e22" translate="yes" xml:space="preserve">
          <source>The make built-in function allocates and initializes an object of type slice, map, or chan (only). Like new, the first argument is a type, not a value. Unlike new, make's return type is the same as the type of its argument, not a pointer to it. The specification of the result depends on the type:</source>
          <target state="translated">make組み込み関数は、slice,map,chan(のみ)型のオブジェクトを割り当てて初期化します。newと同様に、最初の引数は値ではなく型です。newとは異なり、makeの戻り値の型は引数の型と同じであり、ポインタではありません。結果の指定は型に依存します。</target>
        </trans-unit>
        <trans-unit id="ad15554627caa64494fe09878e570067f5641170" translate="yes" xml:space="preserve">
          <source>The meaning of the parameters fset, pkg, and pos is the same as in CheckExpr. An error is returned if expr cannot be parsed successfully, or the resulting expr AST cannot be type-checked.</source>
          <target state="translated">パラメータfset,pkg,posの意味はCheckExprと同じです。exprが正常に解析できなかった場合や,結果として得られたexpr ASTが型チェックできなかった場合は,エラーが返されます.</target>
        </trans-unit>
        <trans-unit id="76f7a0e267f75e03932754601186fb88901bc244" translate="yes" xml:space="preserve">
          <source>The message must be no longer than the length of the public modulus minus twice the hash length, minus a further 2.</source>
          <target state="translated">メッセージはパブリックモジュラスの長さからハッシュの長さの2倍を引いた長さからさらに2を引いた長さを超えてはなりません。</target>
        </trans-unit>
        <trans-unit id="f50438ca0e284cc49442d4b96ed8422098542b37" translate="yes" xml:space="preserve">
          <source>The method for resolving domain names, whether indirectly with functions like Dial or directly with functions like LookupHost and LookupAddr, varies by operating system.</source>
          <target state="translated">ドメイン名を解決する方法は、Dialのような機能を使って間接的に行う場合と、LookupHostやLookupAddrのような機能を使って直接行う場合と、OSによって異なります。</target>
        </trans-unit>
        <trans-unit id="fd8e3459dc1d93b8b2959d9f7ce9e888fe72a14d" translate="yes" xml:space="preserve">
          <source>The method's first argument represents the arguments provided by the caller; the second argument represents the result parameters to be returned to the caller. The method's return value, if non-nil, is passed back as a string that the client sees as if created by errors.New. If an error is returned, the reply parameter will not be sent back to the client.</source>
          <target state="translated">メソッドの第 1 引数は呼び出し元によって提供される引数を表し、第 2 引数は呼び出し元に返される結果パラメータを表します。メソッドの戻り値は、nilでない場合、クライアントが見る文字列として渡されます。エラーが返された場合、応答パラメータはクライアントには返されません。</target>
        </trans-unit>
        <trans-unit id="eebd4cc8d1b396bccc721d19c4bd56800d60e192" translate="yes" xml:space="preserve">
          <source>The methods should behave the same as those on an *os.File.</source>
          <target state="translated">メソッドは、*os.File.File.Fileと同じように動作しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3351c33da5b9bc73dd81d983421271485dd91e09" translate="yes" xml:space="preserve">
          <source>The minimal source code for a binary-only package was therefore:</source>
          <target state="translated">そのため、バイナリのみのパッケージのソースコードは最小限に抑えられていました。</target>
        </trans-unit>
        <trans-unit id="ba0d7c85cb07c29f22bceee0e488a79cf0a2c300" translate="yes" xml:space="preserve">
          <source>The minimum element in the tree is the root, at index 0.</source>
          <target state="translated">ツリーの最小要素は、インデックス0のルートです。</target>
        </trans-unit>
        <trans-unit id="6cf2c8c68bd743b1d5a4e29ae7301dad5d49bcb2" translate="yes" xml:space="preserve">
          <source>The mode parameter controls the amount of source text parsed and other optional parser functionality. Position information is recorded in the file set fset, which must not be nil.</source>
          <target state="translated">モードパラメータは、解析されるソーステキストの量やその他のオプションのパーサ機能を制御します。位置情報はファイルセット fset に記録されますが、これは nil であってはなりません。</target>
        </trans-unit>
        <trans-unit id="7d1773f39818c5825c59e48b1236b92119b0b32e" translate="yes" xml:space="preserve">
          <source>The month, day, hour, min, sec, and nsec values may be outside their usual ranges and will be normalized during the conversion. For example, October 32 converts to November 1.</source>
          <target state="translated">月、日、時、分、秒、および nsec の値は通常の範囲外の場合があり、変換中に正規化されます。例えば、10月32日は11月1日に変換されます。</target>
        </trans-unit>
        <trans-unit id="a5541e290e27715c3d35b2115cad871f3ab99ccb" translate="yes" xml:space="preserve">
          <source>The most common numeric conversions are Atoi (string to int) and Itoa (int to string).</source>
          <target state="translated">最も一般的な数値変換は、Atoi(文字列→int)とItoa(int→文字列)です。</target>
        </trans-unit>
        <trans-unit id="4bbbacdbad6d2c99ac68260aad07ecb869838903" translate="yes" xml:space="preserve">
          <source>The most common use of this pattern is to access fields in a struct or elements of an array:</source>
          <target state="translated">このパターンの最も一般的な使用法は、構造体のフィールドや配列の要素にアクセスすることです。</target>
        </trans-unit>
        <trans-unit id="ac8cc81db3fc49af2479176c9231b929d55cdbd8" translate="yes" xml:space="preserve">
          <source>The msg parameter should be an RFC 822-style email with headers first, a blank line, and then the message body. The lines of msg should be CRLF terminated. The msg headers should usually include fields such as &quot;From&quot;, &quot;To&quot;, &quot;Subject&quot;, and &quot;Cc&quot;. Sending &quot;Bcc&quot; messages is accomplished by including an email address in the to parameter but not including it in the msg headers.</source>
          <target state="translated">msg パラメータは RFC 822 形式の電子メールで、ヘッダを先頭にして空行を入れ、その後にメッ セージ本文を指定します。msg の行は CRLF で終了させる必要があります。通常、msg ヘッダーには「From」、「To」、「Subject」、「Cc」などのフィールドを含める必要があります。Bcc」メッセージを送信するには、to パラメータに電子メール・アドレスを含めますが、それを msg ヘッダーには含めません。</target>
        </trans-unit>
        <trans-unit id="410aa7b0a0304575a8915750342dc577b832f74c" translate="yes" xml:space="preserve">
          <source>The name for the XML elements is taken from, in order of preference:</source>
          <target state="translated">XML要素の名前は、優先順位の高い順に取得されます。</target>
        </trans-unit>
        <trans-unit id="57b088fc8d39478c2345773281e5eb271805f7ea" translate="yes" xml:space="preserve">
          <source>The naming convention to declare examples for the package, a function F, a type T and method M on type T are:</source>
          <target state="translated">パッケージ、関数F、型T、型T、型T上のメソッドMの例を宣言するための命名規則は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7b9b492a2e0fbf406f8b8d17e034f78a30b6eb8c" translate="yes" xml:space="preserve">
          <source>The net, net/http, and crypto/tls packages also refer to debugging variables in GODEBUG. See the documentation for those packages for details.</source>
          <target state="translated">net、net/http、および crypto/tls パッケージは、GODEBUG のデバッグ変数も参照しています。詳細はそれらのパッケージのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="69954652d3ee14598bd31e60017ff5be6ec75582" translate="yes" xml:space="preserve">
          <source>The net/http/cookiejar package provides a CookieJar implementation.</source>
          <target state="translated">net/http/cookiejar パッケージは CookieJar の実装を提供します。</target>
        </trans-unit>
        <trans-unit id="7815d9693c2e8fba3de7740f99dda917ebde80d7" translate="yes" xml:space="preserve">
          <source>The net/rpc package is frozen and is not accepting new features.</source>
          <target state="translated">net/rpc パッケージがフリーズしており、新機能を受け付けていません。</target>
        </trans-unit>
        <trans-unit id="b67ec9dd23234843cefc446704be9276e0333344" translate="yes" xml:space="preserve">
          <source>The network must be &quot;tcp&quot;, &quot;tcp4&quot;, &quot;tcp6&quot;, &quot;unix&quot; or &quot;unixpacket&quot;.</source>
          <target state="translated">ネットワークは &quot;tcp&quot;、&quot;tcp4&quot;、&quot;tcp6&quot;、&quot;unix &quot;または &quot;unixpacket &quot;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f78c2675c0a1b78facf549c913ce29c8786aed4f" translate="yes" xml:space="preserve">
          <source>The network must be &quot;udp&quot;, &quot;udp4&quot;, &quot;udp6&quot;, &quot;unixgram&quot;, or an IP transport. The IP transports are &quot;ip&quot;, &quot;ip4&quot;, or &quot;ip6&quot; followed by a colon and a literal protocol number or a protocol name, as in &quot;ip:1&quot; or &quot;ip:icmp&quot;.</source>
          <target state="translated">ネットワークは、&quot;udp&quot;、&quot;udp4&quot;、&quot;udp6&quot;、&quot;unixgram&quot;、またはIPトランスポートでなければならない。IPトランスポートは、「ip」、「ip4」、または「ip6」の後にコロンとリテラルプロトコル番号またはプロトコル名(「ip:1」または「ip:icmp」のように)が続く。</target>
        </trans-unit>
        <trans-unit id="f62f0c6bf3637b6bd91fbed73590e0c5ec059d67" translate="yes" xml:space="preserve">
          <source>The network must be &quot;unix&quot; or &quot;unixpacket&quot;.</source>
          <target state="translated">ネットワークは &quot;unix &quot;または &quot;unixpacket &quot;である必要があります。</target>
        </trans-unit>
        <trans-unit id="961ea2a9664370be05fda243ace29bf62f0b8b14" translate="yes" xml:space="preserve">
          <source>The network must be &quot;unixgram&quot;.</source>
          <target state="translated">ネットワークは「unixgram」である必要があります。</target>
        </trans-unit>
        <trans-unit id="143c1ec61594ea23a84fdfc668726a693ff1d059" translate="yes" xml:space="preserve">
          <source>The network must be a TCP network name.</source>
          <target state="translated">ネットワークはTCPネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="54bb9136f9b37f7468411dbae5b647c63059a3a1" translate="yes" xml:space="preserve">
          <source>The network must be a TCP network name; see func Dial for details.</source>
          <target state="translated">ネットワークは TCP ネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a35132d711d8945bdb8b272ee67848e4c94a5a16" translate="yes" xml:space="preserve">
          <source>The network must be a UDP network name.</source>
          <target state="translated">ネットワークはUDPネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="89ed96066a0fbc9b6b82696daa8ba7effb94e0a8" translate="yes" xml:space="preserve">
          <source>The network must be a UDP network name; see func Dial for details.</source>
          <target state="translated">ネットワークは UDP ネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="199d17e2fe63f354db9a6b916c396629d6b88dda" translate="yes" xml:space="preserve">
          <source>The network must be a Unix network name.</source>
          <target state="translated">ネットワークはUnixネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b6cf9d29e750ed948316e5ba40edb44e452845b1" translate="yes" xml:space="preserve">
          <source>The network must be a Unix network name; see func Dial for details.</source>
          <target state="translated">ネットワークは Unix ネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="61f5a2270318ecc8414142178aaa1a53165f97e7" translate="yes" xml:space="preserve">
          <source>The network must be an IP network name.</source>
          <target state="translated">ネットワークはIPネットワーク名である必要があります。</target>
        </trans-unit>
        <trans-unit id="b881d6aafa14d5f635aad510160f9473031ecf6f" translate="yes" xml:space="preserve">
          <source>The network must be an IP network name; see func Dial for details.</source>
          <target state="translated">ネットワークは IP ネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="882441c96cbf8f9716ac8a79d3a5eb4e3af0bcfd" translate="yes" xml:space="preserve">
          <source>The new Handler calls h.ServeHTTP to handle each request, but if a call runs for longer than its time limit, the handler responds with a 503 Service Unavailable error and the given message in its body. (If msg is empty, a suitable default message will be sent.) After such a timeout, writes by h to its ResponseWriter will return ErrHandlerTimeout.</source>
          <target state="translated">新しいHandlerは各リクエストを処理するためにh.ServeHTTPを呼び出しますが、もし呼び出しが制限時間を超えて実行された場合、ハンドラは503 Service Unavailableエラーとそのボディに与えられたメッセージで応答します(msgが空の場合、適切なデフォルトのメッセージが送信されます)。(msg が空の場合は、適切なデフォルトのメッセージが送信されます。)このようなタイムアウトの後、h による ResponseWriter への書き込みは ErrHandlerTimeout を返します。</target>
        </trans-unit>
        <trans-unit id="3cf0c81686ac1acb508bf9e67780a55cee7159d9" translate="yes" xml:space="preserve">
          <source>The new built-in function allocates memory. The first argument is a type, not a value, and the value returned is a pointer to a newly allocated zero value of that type.</source>
          <target state="translated">新しい組み込み関数はメモリを割り当てます。第一引数は値ではなく型であり、返される値はその型の新たに割り当てられたゼロ値へのポインタです。</target>
        </trans-unit>
        <trans-unit id="902360dabebdea5b3a521c7b72fed85e30d4437d" translate="yes" xml:space="preserve">
          <source>The node type must be *ast.File, *printer.CommentedNode, []ast.Decl, []ast.Stmt, or assignment-compatible to ast.Expr, ast.Decl, ast.Spec, or ast.Stmt. Node does not modify node. Imports are not sorted for nodes representing partial source files (for instance, if the node is not an *ast.File or a *printer.CommentedNode not wrapping an *ast.File).</source>
          <target state="translated">ノードのタイプは、*ast.File、*printer.CommentedNode、[]ast.Decl、[]ast.Stmt、または ast.Expr、ast.Decl、ast.Spec、または ast.Stmt と代入互換性のあるものでなければなりません。ノードはノードを変更しません。部分的なソースファイルを表すノードのインポートはソートされません(例えば、ノードが*ast.Fileでない場合や*printer.CommentedNodeが*ast.Fileをラッピングしていない場合など)。</target>
        </trans-unit>
        <trans-unit id="56cff2c7a026fcff6621abd1c298d8e39f80b3ef" translate="yes" xml:space="preserve">
          <source>The non-Go code should not change the signal mask on any threads created by the Go runtime. If the non-Go code starts new threads of its own, it may set the signal mask as it pleases.</source>
          <target state="translated">非Goコードは、Goランタイムによって作成されたスレッドのシグナルマスクを変更してはなりません。非Goコードが自分自身で新しいスレッドを開始する場合、シグナルマスクを好きなように設定することができます。</target>
        </trans-unit>
        <trans-unit id="b32a27700c08984e10653750973205a0166116d3" translate="yes" xml:space="preserve">
          <source>The only signal values guaranteed to be present in the os package on all systems are os.Interrupt (send the process an interrupt) and os.Kill (force the process to exit). On Windows, sending os.Interrupt to a process with os.Process.Signal is not implemented; it will return an error instead of sending a signal.</source>
          <target state="translated">すべてのシステムで os パッケージに存在することが保証されているシグナル値は os.Interrupt (プロセスに割り込みを送る)と os.Kill (プロセスを強制的に終了させる)だけです。Windows では、os.Process.Signal を持つプロセスに os.Interrupt を送ることは実装されていません。</target>
        </trans-unit>
        <trans-unit id="8c37b0a4e6fab650a215cbd5edb17eee82ff53db" translate="yes" xml:space="preserve">
          <source>The original specification for encryption and signatures with RSA is PKCS#1 and the terms &quot;RSA encryption&quot; and &quot;RSA signatures&quot; by default refer to PKCS#1 version 1.5. However, that specification has flaws and new designs should use version two, usually called by just OAEP and PSS, where possible.</source>
          <target state="translated">RSAによる暗号化と署名のオリジナル仕様はPKCS#1であり、「RSA暗号化」と「RSA署名」という用語はデフォルトではPKCS#1のバージョン1.5を参照しています。しかし、この仕様には欠陥があり、新しい設計では可能な限り、通常は OAEP と PSS だけで呼ばれるバージョン 2 を使用すべきです。</target>
        </trans-unit>
        <trans-unit id="540d9d25cf4179e22c8285de7096ab16e1c12b86" translate="yes" xml:space="preserve">
          <source>The original tar format was introduced in Unix V7. Since then, there have been multiple competing formats attempting to standardize or extend the V7 format to overcome its limitations. The most common formats are the USTAR, PAX, and GNU formats, each with their own advantages and limitations.</source>
          <target state="translated">オリジナルの tar フォーマットは Unix V7 で導入されました。それ以来、V7 フォーマットの限界を克服するために V7 フォーマットを標準化したり拡張したりしようとする複数の競合フォーマットが存在しています。最も一般的なフォーマットは USTAR,PAX,GNU フォーマットで、それぞれに利点と限界があります。</target>
        </trans-unit>
        <trans-unit id="447ae61382377495d9bb3dcbc7167cc095d3d833" translate="yes" xml:space="preserve">
          <source>The os interface is intended to be uniform across all operating systems. Features not generally available appear in the system-specific package syscall.</source>
          <target state="translated">OS インタフェースは、すべてのオペレーティングシステムで統一されていることを意図しています。一般的に利用できない機能は、システム固有のパッケージsyscallに記載されています。</target>
        </trans-unit>
        <trans-unit id="826c8f633f039e53ad0aac6dce5e00961c47baef" translate="yes" xml:space="preserve">
          <source>The other reporting methods, such as the variations of Log and Error, may be called simultaneously from multiple goroutines.</source>
          <target state="translated">他の報知手段、例えば、ログやエラーのバリエーションなどは、複数のゴロチンから一斉に呼び出されることがある。</target>
        </trans-unit>
        <trans-unit id="314818cec484a0a4f79c6a3bd12ea1e65d6a5497" translate="yes" xml:space="preserve">
          <source>The output of a command will be either one value or two values, the second of which has type error. If that second value is present and evaluates to non-nil, execution terminates and the error is returned to the caller of Execute.</source>
          <target state="translated">コマンドの出力は、1 つの値か 2 つの値のどちらかになり、2 番目の値はエラー型を持ちます。2 番目の値が存在し、non-nil と評価された場合、実行は終了し、エラーは Execute の呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="01b79b49ed9f5aef9d64418cf5de61a045616033" translate="yes" xml:space="preserve">
          <source>The package also runs and verifies example code. Example functions may include a concluding line comment that begins with &quot;Output:&quot; and is compared with the standard output of the function when the tests are run. (The comparison ignores leading and trailing space.) These are examples of an example:</source>
          <target state="translated">このパッケージは、サンプルコードの実行と検証も行います。例示的な関数は、&quot;Output:&quot;で始まり、テストが実行されたときに関数の標準出力と比較される結論行のコメントを含むことがあります。(この比較では、先頭と末尾のスペースは無視されます。)これらは例題の例です。</target>
        </trans-unit>
        <trans-unit id="a842fba56dd27e8e683543ed1da0bb8ec8237f57" translate="yes" xml:space="preserve">
          <source>The package is marked as complete if no errors occurred, otherwise it is incomplete. See Config.Error for controlling behavior in the presence of errors.</source>
          <target state="translated">エラーが発生していない場合、パッケージは完全であるとマークされ、そうでない場合は不完全です。エラーが発生した場合の動作の制御については Config.Error を参照してください。</target>
        </trans-unit>
        <trans-unit id="084533be70387d373858b81e63ee3fdbb938556c" translate="yes" xml:space="preserve">
          <source>The package is sometimes only imported for the side effect of registering its HTTP handler and the above variables. To use it this way, link this package into your program:</source>
          <target state="translated">このパッケージは、HTTP ハンドラと上記の変数を登録するという副作用のためだけにインポートされることがあります。この方法で使用するには、このパッケージをプログラムにリンクしてください。</target>
        </trans-unit>
        <trans-unit id="a76fef8dda549c1a3db0f0948e9255bd119d522e" translate="yes" xml:space="preserve">
          <source>The package is specified by a list of *ast.Files and corresponding file set, and the package path the package is identified with. The clean path must not be empty or dot (&quot;.&quot;).</source>
          <target state="translated">パッケージは、*ast.Filesと対応するファイルセットのリスト、およびパッケージが識別されるパッケージパスによって指定されます。クリーンパスは、空かドット(&quot;.&quot;)であってはなりません。</target>
        </trans-unit>
        <trans-unit id="399fd3ad30378409e2dc4bdf013d129681dab5d4" translate="yes" xml:space="preserve">
          <source>The package is typically only imported for the side effect of registering its HTTP handlers. The handled paths all begin with /debug/pprof/.</source>
          <target state="translated">このパッケージは通常、HTTP ハンドラを登録するという副作用のためにのみインポートされます。扱われるパスはすべて /debug/pprof/で始まります。</target>
        </trans-unit>
        <trans-unit id="1435a203fd8b96db3ad7b17b180e6f206d92f47b" translate="yes" xml:space="preserve">
          <source>The package is using the Elastic Tabstops algorithm described at &lt;a href=&quot;http://nickgravgaard.com/elastictabstops/index.html&quot;&gt;http://nickgravgaard.com/elastictabstops/index.html&lt;/a&gt;.</source>
          <target state="translated">パッケージは、&lt;a href=&quot;http://nickgravgaard.com/elastictabstops/index.html&quot;&gt;http:&lt;/a&gt; //nickgravgaard.com/elastictabstops/index.htmlで説明されているElastic Tabstopsアルゴリズムを使用しています。</target>
        </trans-unit>
        <trans-unit id="2d8c628767f33f2351dada491bfefd34f51b3140" translate="yes" xml:space="preserve">
          <source>The package provides:</source>
          <target state="translated">パッケージが提供します。</target>
        </trans-unit>
        <trans-unit id="fdd304cc0ffa560e98ef7d6ccf98bb51070237a4" translate="yes" xml:space="preserve">
          <source>The packages golang.org/x/net/ipv4 and golang.org/x/net/ipv6 can be used to manipulate IP-level socket options in oob.</source>
          <target state="translated">golang.org/x/net/ipv4 と golang.org/x/net/ipv6 パッケージは、 oob で IP レベルのソケットオプションを操作するために使用できます。</target>
        </trans-unit>
        <trans-unit id="e31e979e3edc39254b9a5c52d82e5a30deadc675" translate="yes" xml:space="preserve">
          <source>The panic built-in function stops normal execution of the current goroutine. When a function F calls panic, normal execution of F stops immediately. Any functions whose execution was deferred by F are run in the usual way, and then F returns to its caller. To the caller G, the invocation of F then behaves like a call to panic, terminating G's execution and running any deferred functions. This continues until all functions in the executing goroutine have stopped, in reverse order. At that point, the program is terminated with a non-zero exit code. This termination sequence is called panicking and can be controlled by the built-in function recover.</source>
          <target state="translated">panic組み込み関数は、現在のゴローチンの正常な実行を停止します。関数Fがパニックを呼び出すと、Fの通常の実行は直ちに停止します。Fによって実行が延期された関数は通常の方法で実行され、Fは呼び出し元に戻ります。呼び出し元のGにとっては、Fの呼び出しはパニックの呼び出しのように振る舞い、Gの実行を終了させ、延期された関数を実行します。これは、実行中の goroutine のすべての関数が逆順に停止するまで続きます。この時点で、プログラムはゼロではない終了コードで終了します。この終了シーケンスはパニックと呼ばれ、組み込み関数 recover によって制御することができます。</target>
        </trans-unit>
        <trans-unit id="af4f035528815b22e373ca233969d1eeb80da9ab" translate="yes" xml:space="preserve">
          <source>The parse functions return the widest type (float64, int64, and uint64), but if the size argument specifies a narrower width the result can be converted to that narrower type without data loss:</source>
          <target state="translated">パース関数は最も幅の広い型(float64、int64、および uint64)を返しますが、size 引数でより狭い幅を指定した場合、結果はデータを失うことなくその狭い型に変換されます。</target>
        </trans-unit>
        <trans-unit id="a18efb4bf749b7c5acc3a4bfaddc4a2e6898762f" translate="yes" xml:space="preserve">
          <source>The parser accepts a larger language than is syntactically permitted by the Go spec, for simplicity, and for improved robustness in the presence of syntax errors. For instance, in method declarations, the receiver is treated like an ordinary parameter list and thus may contain multiple entries where the spec permits exactly one. Consequently, the corresponding field in the AST (ast.FuncDecl.Recv) field is not restricted to one entry.</source>
          <target state="translated">パーサは、構文エラーが発生した場合のロバスト性を向上させるために、構文的にGo仕様で許可されている言語よりも大きな言語を受け入れます。例えば、メソッドの宣言では、レシーバは通常のパラメータリストのように扱われ、仕様では1つのエントリしか許可されていないのに複数のエントリを含むことがあります。その結果、AST (ast.FuncDecl.Recv)フィールドの対応するフィールドは1つのエントリに制限されません。</target>
        </trans-unit>
        <trans-unit id="f1b15ae7c535ec21c3b3214f780b2381f7617014" translate="yes" xml:space="preserve">
          <source>The path and host are used unchanged for CONNECT requests.</source>
          <target state="translated">パスとホストはCONNECTリクエストでは変更されずに使用されます。</target>
        </trans-unit>
        <trans-unit id="185477acd3fd456d75fb7c4fc53e2fc58b8c4aaf" translate="yes" xml:space="preserve">
          <source>The path package should only be used for paths separated by forward slashes, such as the paths in URLs. This package does not deal with Windows paths with drive letters or backslashes; to manipulate operating system paths, use the path/filepath package.</source>
          <target state="translated">path パッケージは、URL 内のパスのようにスラッシュで区切られたパスにのみ使用してください。このパッケージは、ドライブレターやバックスラッシュのある Windows のパスを扱いません。</target>
        </trans-unit>
        <trans-unit id="26954c9ca56cc48a56a0453ce2488e2f260ed60b" translate="yes" xml:space="preserve">
          <source>The pkg/ directory holds installed package objects. As in the Go tree, each target operating system and architecture pair has its own subdirectory of pkg (pkg/GOOS_GOARCH).</source>
          <target state="translated">pkg/ディレクトリには、インストールされたパッケージオブジェクトが格納されます。Go ツリーと同様に、ターゲットとなるオペレーティングシステムとアーキテクチャのペアはそれぞれ pkg のサブディレクトリ (pkg/GOOS_GOARCH)を持っています。</target>
        </trans-unit>
        <trans-unit id="5a87eb4ca6fbc546df6339993053151079409112" translate="yes" xml:space="preserve">
          <source>The precision prec controls the number of digits (excluding the exponent) printed by the 'e', 'E', 'f', 'g', 'G', 'x', and 'X' formats. For 'e', 'E', 'f', 'x', and 'X', it is the number of digits after the decimal point. For 'g' and 'G' it is the maximum number of significant digits (trailing zeros are removed). The special precision -1 uses the smallest number of digits necessary such that ParseFloat will return f exactly.</source>
          <target state="translated">精度プリックは、'e','E','f','g','G','x',および 'X' フォーマットで出力される桁数(指数を除く)を制御します。e','E','f','x',および 'X' の場合は、小数点以下の桁数です。g' および 'G' の場合は、有効数字の最大桁数です (末尾のゼロは削除されます)。特別な精度-1は、ParseFloatがfを正確に返すために必要な最小の桁数を使用します。</target>
        </trans-unit>
        <trans-unit id="69078c80b7be9ecb1f89b1ab519c7b7264b1d687" translate="yes" xml:space="preserve">
          <source>The precision prec controls the number of digits (excluding the exponent) printed by the 'e', 'E', 'f', 'g', 'G', and 'x' formats. For 'e', 'E', 'f', and 'x', it is the number of digits after the decimal point. For 'g' and 'G' it is the total number of digits. A negative precision selects the smallest number of decimal digits necessary to identify the value x uniquely using x.Prec() mantissa bits. The prec value is ignored for the 'b' and 'p' formats.</source>
          <target state="translated">精度 prec は、'e','E','f','g','G',および 'x' フォーマットで出力される桁数 (指数を除く)を制御します。e'、'E'、'f'、'x' の場合、小数点以下の桁数を指定します。g' と 'G' の場合は、桁数の合計です。負の精度は、x.Prec()の仮数ビットを使用して値 x を一意に識別するのに必要な最小の小数点以下の桁数を選択します。prec 値は、'b' および 'p' フォーマットでは無視されます。</target>
        </trans-unit>
        <trans-unit id="456c4a02a800a4453e3d726e233dc51ff74f0fc9" translate="yes" xml:space="preserve">
          <source>The predefined profiles may assign meaning to other debug values; for example, when printing the &quot;goroutine&quot; profile, debug=2 means to print the goroutine stacks in the same form that a Go program uses when dying due to an unrecovered panic.</source>
          <target state="translated">定義済みのプロファイルは、他のデバッグ値に意味を割り当てることができます。例えば、「goroutine」プロファイルを印刷する場合、debug=2 は、回復しないパニックで死亡したときに Go プログラムが使用するのと同じ形式で goroutine スタックを印刷することを意味します。</target>
        </trans-unit>
        <trans-unit id="58481973143a6de618e8538c648e764b31b42f2b" translate="yes" xml:space="preserve">
          <source>The print built-in function formats its arguments in an implementation-specific way and writes the result to standard error. Print is useful for bootstrapping and debugging; it is not guaranteed to stay in the language.</source>
          <target state="translated">組み込みの関数printは、実装固有の方法で引数をフォーマットし、その結果を標準エラーに書き込みます。printはブートストラップやデバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="91f04de49b9af203098665c6f8b752b5392b78a0" translate="yes" xml:space="preserve">
          <source>The println built-in function formats its arguments in an implementation-specific way and writes the result to standard error. Spaces are always added between arguments and a newline is appended. Println is useful for bootstrapping and debugging; it is not guaranteed to stay in the language.</source>
          <target state="translated">組み込みのprintln関数は、実装固有の方法で引数をフォーマットし、その結果を標準エラーに書き込みます。引数の間には常にスペースが追加され、改行が追加されます。Printlnはブートストラップやデバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="151eef92ef01a650c4a9036a013718d694ffc693" translate="yes" xml:space="preserve">
          <source>The provided Context must be non-nil. If the context expires before the connection is complete, an error is returned. Once successfully connected, any expiration of the context will not affect the connection.</source>
          <target state="translated">指定したコンテキストは、非 null でなければなりません。接続が完了する前にコンテキストの有効期限が切れた場合は、エラーが返されます。一旦接続に成功しても、コンテキストの有効期限が切れても接続には影響しません。</target>
        </trans-unit>
        <trans-unit id="0e411a42789a39be423654b810b14a1d819d3f7a" translate="yes" xml:space="preserve">
          <source>The provided TxOptions is optional and may be nil if defaults should be used. If a non-default isolation level is used that the driver doesn't support, an error will be returned.</source>
          <target state="translated">提供される TxOptions はオプションであり、デフォルトを使用する場合は nil にすることができます。ドライバがサポートしていないデフォルト以外のアイソレーションレベルが使用された場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="decd2b405e8241c6f8e12f33bd5a3bb2cc5dc04e" translate="yes" xml:space="preserve">
          <source>The provided body may be nil. If the body is of type *bytes.Reader, *strings.Reader, or *bytes.Buffer, the Request.ContentLength is set.</source>
          <target state="translated">提供されるボディはnilである場合があります。ボディの型が*bytes.Reader、*strings.Reader、または*bytes.Bufferの場合、Request.ContentLengthが設定されます。</target>
        </trans-unit>
        <trans-unit id="58ddb87ccdb3a3bbf17dded9af2e6f690f9fa593" translate="yes" xml:space="preserve">
          <source>The provided code should be in the 3xx range and is usually StatusMovedPermanently, StatusFound or StatusSeeOther.</source>
          <target state="translated">提供されるコードは 3xx の範囲内である必要があり、通常は StatusMovedPermanently、StatusFound、または StatusSeeOther です。</target>
        </trans-unit>
        <trans-unit id="86be20106cb95d195cb582ade394435819f24514" translate="yes" xml:space="preserve">
          <source>The provided context is used for the preparation of the statement, not for the execution of the statement.</source>
          <target state="translated">提供されたコンテキストはステートメントの準備に使用され、ステートメントの実行には使用されません。</target>
        </trans-unit>
        <trans-unit id="dd14eed153c5e1b07e7490871396f032fee4f925" translate="yes" xml:space="preserve">
          <source>The provided context is used to kill the process (by calling os.Process.Kill) if the context becomes done before the command completes on its own.</source>
          <target state="translated">与えられたコンテキストは、コマンドがそれ自身で完了する前にコンテキストが完了した場合、プロセスを kill するために使用されます (os.Process.Kill を呼び出すことで)。</target>
        </trans-unit>
        <trans-unit id="a4964ee167f777b88ff9017caa2a6e7f575494e2" translate="yes" xml:space="preserve">
          <source>The provided context is used until the transaction is committed or rolled back. If the context is canceled, the sql package will roll back the transaction. Tx.Commit will return an error if the context provided to BeginTx is canceled.</source>
          <target state="translated">提供されたコンテキストは、トランザクションがコミットされるかロールバックされるまで使用されます。コンテキストがキャンセルされた場合、sqlパッケージはトランザクションをロールバックします。BeginTxに提供されたコンテキストがキャンセルされた場合、Tx.Commitはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="08a11fcf0761deb535b1afddd2450e0cb1b073dd" translate="yes" xml:space="preserve">
          <source>The provided context will be used for the preparation of the context, not for the execution of the returned statement. The returned statement will run in the transaction context.</source>
          <target state="translated">提供されたコンテキストはコンテキストの準備に使用され、返されたステートメントの実行には使用されません。返されたステートメントは、トランザクションコンテキストで実行されます。</target>
        </trans-unit>
        <trans-unit id="36087efe71a5f2727d53bfdfa94ece516eb41424" translate="yes" xml:space="preserve">
          <source>The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context. Users of WithValue should define their own types for keys. To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables' static type should be a pointer or interface.</source>
          <target state="translated">提供されるキーは同等のものでなければならず、 コンテキストを使用しているパッケージ間の衝突を避けるために、 文字列型やその他の組み込み型であってはなりません。WithValue の利用者は、キーの型を独自に定義しなければなりません。インターフェイス{}に代入する際の割り当てを避けるために、コンテキストキーはしばしば具象型の struct{}を持つことがあります。あるいは、エクスポートされたコンテキストキー変数の静的型はポインタかインターフェースでなければなりません。</target>
        </trans-unit>
        <trans-unit id="85ad36caa7041b29ad99437d10d43da203313ed0" translate="yes" xml:space="preserve">
          <source>The race detector kills the program if it exceeds 8192 concurrent goroutines, so use care when running parallel tests with the -race flag set.</source>
          <target state="translated">競合検出器は、8192個の同時実行ゴロチンを超えるとプログラムを終了させるので、-raceフラグを設定して並列テストを実行する際には注意してください。</target>
        </trans-unit>
        <trans-unit id="8b5744dbc3f5965d88d3d9f6581899823cd536e1" translate="yes" xml:space="preserve">
          <source>The rand parameter is used as a source of entropy to ensure that encrypting the same message twice doesn't result in the same ciphertext.</source>
          <target state="translated">rand パラメータは、同じメッセージを 2 回暗号化しても同じ暗号文にならないようにするためのエントロピー源として使用されます。</target>
        </trans-unit>
        <trans-unit id="9b3902f0d9da9da0e87784ba5652f4c8601d4919" translate="yes" xml:space="preserve">
          <source>The random parameter is used as a source of entropy to ensure that encrypting the same message twice doesn't result in the same ciphertext.</source>
          <target state="translated">ランダムパラメータは、同じメッセージを二度暗号化しても同じ暗号文にならないようにするためのエントロピー源として使用されます。</target>
        </trans-unit>
        <trans-unit id="cf169dddc14ea8341fcb30899e22a5fa61df4712" translate="yes" xml:space="preserve">
          <source>The random parameter, if not nil, is used to blind the private-key operation and avoid timing side-channel attacks. Blinding is purely internal to this function &amp;ndash; the random data need not match that used when encrypting.</source>
          <target state="translated">ランダムパラメータは、nilでない場合は、秘密鍵の操作をブラインドし、サイドチャネル攻撃のタイミングを回避するために使用されます。ブラインドはこの関数の純粋な内部です。ランダムデータは、暗号化時に使用されるデータと一致する必要はありません。</target>
        </trans-unit>
        <trans-unit id="2314ea9b04c810fb371325317bf102a02d2d59d0" translate="yes" xml:space="preserve">
          <source>The rawurl may be relative (a path, without a host) or absolute (starting with a scheme). Trying to parse a hostname and path without a scheme is invalid but may not necessarily return an error, due to parsing ambiguities.</source>
          <target state="translated">rawurl は相対パス (ホストなしのパス)または絶対パス (スキームで始まる)です。スキームなしでホスト名とパスを解析しようとすると無効ですが、解析の曖昧さのために必ずしもエラーを返すとは限りません。</target>
        </trans-unit>
        <trans-unit id="239176c955d354cb84e342df1da6a160a09d1822" translate="yes" xml:space="preserve">
          <source>The read and write halves of the connection are serialized independently, so no interlocking is required. However each half may be accessed concurrently so the implementation of conn should protect against concurrent reads or concurrent writes.</source>
          <target state="translated">接続の読み書きの半分は独立してシリアル化されているので、インターロックは必要ありません。しかし、それぞれの半分は同時にアクセスされる可能性があるので、conn の実装は同時読み取りまたは同時書き込みから保護する必要があります。</target>
        </trans-unit>
        <trans-unit id="b43ec28ed349612adbaa799bb6c92934c3b075dc" translate="yes" xml:space="preserve">
          <source>The real built-in function returns the real part of the complex number c. The return value will be floating point type corresponding to the type of c.</source>
          <target state="translated">実数組み込み関数は複素数cの実数部を返します。</target>
        </trans-unit>
        <trans-unit id="9bb09164885f351e6fb900da553f1e63b375bfa9" translate="yes" xml:space="preserve">
          <source>The recognized day of week formats are &quot;Mon&quot; and &quot;Monday&quot;. The recognized month formats are &quot;Jan&quot; and &quot;January&quot;.</source>
          <target state="translated">認識される曜日のフォーマットは「月」と「月」です。認識される月のフォーマットは、&quot;Jan &quot;と &quot;1月 &quot;です。</target>
        </trans-unit>
        <trans-unit id="2c571daa54e2fb7d0c128741daf715a11d1e44fe" translate="yes" xml:space="preserve">
          <source>The recover built-in function allows a program to manage behavior of a panicking goroutine. Executing a call to recover inside a deferred function (but not any function called by it) stops the panicking sequence by restoring normal execution and retrieves the error value passed to the call of panic. If recover is called outside the deferred function it will not stop a panicking sequence. In this case, or when the goroutine is not panicking, or if the argument supplied to panic was nil, recover returns nil. Thus the return value from recover reports whether the goroutine is panicking.</source>
          <target state="translated">recoverビルトイン関数を使用することで、プログラムはパニックを起こすゴロチンの動作を管理することができます。deferred関数の内部でrecoverの呼び出しを実行すると(それによって呼び出された関数ではなく)、通常の実行を回復してパニックシーケンスを停止し、panicの呼び出しに渡されたエラー値を取得します。recoverが繰延関数の外側で呼ばれた場合、パニックシーケンスは停止しません。この場合、あるいはゴローチンがパニックを起こしていない場合、あるいはパニックに与えられた引数がnilであった場合、recoverはnilを返します。したがって、recoverからの戻り値は、goroutineがパニックになっているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="ff14ed6c9720c452a0294998e96d92039ec86474" translate="yes" xml:space="preserve">
          <source>The regexp implementation provided by this package is guaranteed to run in time linear in the size of the input. (This is a property not guaranteed by most open source implementations of regular expressions.) For more information about this property, see</source>
          <target state="translated">本パッケージが提供する正規表現の実装は、入力のサイズに比例した時間内に実行されることが保証されています。(これは、ほとんどのオープンソースの正規表現実装では保証されていないプロパティです)。このプロパティの詳細については</target>
        </trans-unit>
        <trans-unit id="e4c94cab05a4e2263ef4f912bc17e254d9de85c1" translate="yes" xml:space="preserve">
          <source>The regionType is used to classify regions, so there should be only a handful of unique region types.</source>
          <target state="translated">regionTypeは地域を分類するために使用されるので、ユニークな地域タイプは一握りしかないはずです。</target>
        </trans-unit>
        <trans-unit id="613161bf225c19a5f2c8859dc32ad7cbf64fe341" translate="yes" xml:space="preserve">
          <source>The regular expression syntax understood by this package when parsing with the Perl flag is as follows. Parts of the syntax can be disabled by passing alternate flags to Parse.</source>
          <target state="translated">Perl フラグを使用して解析する際に、このパッケージが理解する正規表現構文は以下の通りです。構文の一部は、Parse に別のフラグを渡すことで無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="414d3f9a62c65f403de754cbbecda8b294ef6a05" translate="yes" xml:space="preserve">
          <source>The remaining patterns enumerate the only valid conversions from uintptr to Pointer.</source>
          <target state="translated">残りのパターンは,uintptrからPointerへの唯一有効な変換を列挙しています.</target>
        </trans-unit>
        <trans-unit id="f01d454f6a8093b81d93ec48391c3d15861fea72" translate="yes" xml:space="preserve">
          <source>The remaining signals are asynchronous signals. They are not triggered by program errors, but are instead sent from the kernel or from some other program.</source>
          <target state="translated">残りの信号は非同期信号です。これらのシグナルはプログラムエラーによってトリガされるのではなく、カーネルや他のプログラムから送信されます。</target>
        </trans-unit>
        <trans-unit id="b6f243f72fd3fe537acd4a5fca41b95e81ce45b9" translate="yes" xml:space="preserve">
          <source>The representation of types is described below. When a type is defined on a given connection between an Encoder and Decoder, it is assigned a signed integer type id. When Encoder.Encode(v) is called, it makes sure there is an id assigned for the type of v and all its elements and then it sends the pair (typeid, encoded-v) where typeid is the type id of the encoded type of v and encoded-v is the gob encoding of the value v.</source>
          <target state="translated">型の表現については、以下で説明します。エンコーダとデコーダ間の接続で型が定義されると、符号付き整数型の id が割り当てられます。Encoder.Encode(v)が呼び出されると、v の型とそのすべての要素に id が割り当てられていることを確認してから、ペア (typeid,encoded-v)を送信します。</target>
        </trans-unit>
        <trans-unit id="cd667628565a5086d3e9895b56322424dc5621cd" translate="yes" xml:space="preserve">
          <source>The request Body, if non-nil, will be closed by the underlying Transport, even on errors.</source>
          <target state="translated">リクエストボディは、エラーが発生した場合であっても、リクエストボディが存在しない場合は、基礎となるトランスポートによってクローズされます。</target>
        </trans-unit>
        <trans-unit id="d4e026c3f59ca2f49146d499574e033e155a3b79" translate="yes" xml:space="preserve">
          <source>The resolver decision can be overridden by setting the netdns value of the GODEBUG environment variable (see package runtime) to go or cgo, as in:</source>
          <target state="translated">リゾルバの決定は、GODEBUG 環境変数 (パッケージのランタイムを参照)の netdns の値を go か cgo に設定することで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="85ba008f9a41b800d285074394b704f73cc09894" translate="yes" xml:space="preserve">
          <source>The rest of this package comment may be skipped on first reading; it includes details necessary to understand escaping contexts and error messages. Most users will not need to understand these details.</source>
          <target state="translated">このパッケージのコメントの残りの部分は、最初に読んだときには読み飛ばしてもかまいません。ほとんどのユーザはこれらの詳細を理解する必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="5f29380aa9a229b911cfb4cbcef02c25951562ac" translate="yes" xml:space="preserve">
          <source>The rest of this section gives the precise details of how operations use monotonic clocks, but understanding those details is not required to use this package.</source>
          <target state="translated">このセクションの残りの部分では、操作がどのように単調なクロックを使用するかについて正確な詳細を説明しますが、これらの詳細を理解していることは、本パッケージを使用するために必要ではありません。</target>
        </trans-unit>
        <trans-unit id="b7f11101676a7b7c4f383ade5d8d3f82131c1b53" translate="yes" xml:space="preserve">
          <source>The result of Scan is one of these tokens or a Unicode character.</source>
          <target state="translated">Scanの結果は、これらのトークンまたはUnicode文字のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="4646462be207e1c8f655d521c7883b8db5be5339" translate="yes" xml:space="preserve">
          <source>The results of a benchmark run.</source>
          <target state="translated">ベンチマーク実行の結果です。</target>
        </trans-unit>
        <trans-unit id="6be7e87ff9924a05b7bc2a7006d807f1fab39e3d" translate="yes" xml:space="preserve">
          <source>The returned *Float f is nil and the value of z is valid but not defined if an error is reported.</source>
          <target state="translated">返された *Float f は nil であり、z の値は有効ですが、エラーが報告された場合は定義されていません。</target>
        </trans-unit>
        <trans-unit id="bac86830681be1d31b72f9f7791b1c44ac2452e7" translate="yes" xml:space="preserve">
          <source>The returned Cmd's Args field is constructed from the command name followed by the elements of arg, so arg should not include the command name itself. For example, Command(&quot;echo&quot;, &quot;hello&quot;). Args[0] is always name, not the possibly resolved Path.</source>
          <target state="translated">返されるCmdのArgsフィールドは、コマンド名の後にargの要素が続く形で構成されているので、argはコマンド名そのものを含んではいけません。例えば、Command(&quot;echo&quot;,&quot;hello&quot;)のようになります。Args[0]は常にnameであり、解決された可能性のあるPathではありません。</target>
        </trans-unit>
        <trans-unit id="3bc6a14f8ce0d88107543f9f02901b96c67b460c" translate="yes" xml:space="preserve">
          <source>The returned DB is safe for concurrent use by multiple goroutines and maintains its own pool of idle connections. Thus, the Open function should be called just once. It is rarely necessary to close a DB.</source>
          <target state="translated">返されたDBは、複数のゴロチンによる同時使用のために安全であり、アイドル接続の独自のプールを維持しています。したがって、Open関数は一度だけ呼ばれるべきです。DBを閉じる必要はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="c94572c3b7d816968d78d57402944f7efb4246e7" translate="yes" xml:space="preserve">
          <source>The returned DB is safe for concurrent use by multiple goroutines and maintains its own pool of idle connections. Thus, the OpenDB function should be called just once. It is rarely necessary to close a DB.</source>
          <target state="translated">返されたDBは、複数のゴロチンによる同時使用でも安全であり、アイドル接続のプールを独自に維持しています。したがって、OpenDB 関数は一度だけ呼ばれるべきです。DBを閉じる必要はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="33f1666e076b57e7a3379acacb81a7ec24e7d31d" translate="yes" xml:space="preserve">
          <source>The returned RawConn only supports calling Control. Read and Write return an error.</source>
          <target state="translated">返されたRawConnはControlの呼び出しのみをサポートしています。リードとライトはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="00382818b7b561dcf8c2e41afc3acbf78809ee7a" translate="yes" xml:space="preserve">
          <source>The returned Response will have at least its StatusCode, Header, Body, and optionally Trailer populated. More fields may be populated in the future, so callers should not DeepEqual the result in tests.</source>
          <target state="translated">返されるレスポンスには、少なくとも StatusCode、Header、Body、およびオプションで Trailer が入力されています。将来的には、より多くのフィールドが実装される可能性があるので、呼び出し元はテストで結果を DeepEqual してはいけません。</target>
        </trans-unit>
        <trans-unit id="f4f37717fc57244b8b099472fa87f281f196d58d" translate="yes" xml:space="preserve">
          <source>The returned context is always non-nil; it defaults to the background context.</source>
          <target state="translated">返されるコンテキストは常に非 null であり、デフォルトはバックグラウンドコンテキストです。</target>
        </trans-unit>
        <trans-unit id="9cbe06fbabaade2695a345469e46bbf5011eaae5" translate="yes" xml:space="preserve">
          <source>The returned end function is used to mark the task's end. The trace tool measures task latency as the time between task creation and when the end function is called, and provides the latency distribution per task type. If the end function is called multiple times, only the first call is used in the latency measurement.</source>
          <target state="translated">返された end 関数は、タスクの終了をマークするために使用されます。トレースツールは、タスクが作成されてから終了関数が呼び出されるまでの時間としてタスクのレイテンシを測定し、タスクの種類ごとのレイテンシ分布を提供します。終了関数が複数回呼び出された場合は、最初の呼び出しのみがレイテンシ測定に使用されます。</target>
        </trans-unit>
        <trans-unit id="f0a8feeaa4dbaf36e773a52f49c0b0ac6bb7e74a" translate="yes" xml:space="preserve">
          <source>The returned error is nil if the command runs, has no problems copying stdin, stdout, and stderr, and exits with a zero exit status.</source>
          <target state="translated">コマンドが実行され、stdin、stdout、stderrのコピーに問題がなく、終了ステータスが0で終了した場合、返されるエラーはnilです。</target>
        </trans-unit>
        <trans-unit id="4d6b3f09dc97620be2a232fb3dc17468c15d1426" translate="yes" xml:space="preserve">
          <source>The returned list does not identify the associated interface; use Interfaces and Interface.Addrs for more detail.</source>
          <target state="translated">返されたリストは、関連するインタフェースを識別しません。詳細については、Interfaces と Interface.Addrs を使用してください。</target>
        </trans-unit>
        <trans-unit id="c6a6b1723d6bc4ac24e64af0ce75d94122db9245" translate="yes" xml:space="preserve">
          <source>The returned memory allocator statistics are up to date as of the call to ReadMemStats. This is in contrast with a heap profile, which is a snapshot as of the most recently completed garbage collection cycle.</source>
          <target state="translated">返されたメモリアロケータの統計情報は、ReadMemStatsを呼び出した時点で最新のものです。これはヒーププロファイルとは対照的で、直近に完了したガベージコレクションサイクルのスナップショットです。</target>
        </trans-unit>
        <trans-unit id="a6ee6f83dacc73003b6dade23a5eca55ab60b66f" translate="yes" xml:space="preserve">
          <source>The returned os.File's file descriptor is different from the connection's. Attempting to change properties of the original using this duplicate may or may not have the desired effect.</source>
          <target state="translated">返された os.File のファイルディスクリプタは接続のものとは異なります。この複製を使ってオリジナルのプロパティを変更しようとすると、期待した効果が得られないかもしれません。</target>
        </trans-unit>
        <trans-unit id="5927f2050b65cd29032e207117c8b2d6ca472e54" translate="yes" xml:space="preserve">
          <source>The returned path ends in a slash only if it is the root &quot;/&quot;.</source>
          <target state="translated">返されるパスの末尾がスラッシュで終わるのは、ルート&quot;/&quot;の場合のみです。</target>
        </trans-unit>
        <trans-unit id="004ac519a1c16ea761d189382ea9cc0c1b68b7d1" translate="yes" xml:space="preserve">
          <source>The returned path ends in a slash only if it represents a root directory, such as &quot;/&quot; on Unix or `C:\` on Windows.</source>
          <target state="translated">返されるパスは、Unixの&quot;/&quot;やWindowsの`C:\`のようなルートディレクトリを表す場合にのみ、スラッシュで終わります。</target>
        </trans-unit>
        <trans-unit id="709611ccac6cb61ed7ee0c2fc8499ed7e268fed4" translate="yes" xml:space="preserve">
          <source>The returned profile may be up to two garbage collection cycles old. This is to avoid skewing the profile toward allocations; because allocations happen in real time but frees are delayed until the garbage collector performs sweeping, the profile only accounts for allocations that have had a chance to be freed by the garbage collector.</source>
          <target state="translated">返されたプロファイルは、ガベージコレクションサイクルが最大で2サイクル古い場合があります。これは、プロファイルがアロケートに偏ってしまうことを避けるためです。アロケートはリアルタイムで発生しますが、解放はガベージコレクタがスイープを実行するまで遅れるため、プロファイルはガベージコレクタによって解放される機会があったアロケートのみを考慮します。</target>
        </trans-unit>
        <trans-unit id="2fcbc7cecfbd88a968cff813905d726fdf40b131" translate="yes" xml:space="preserve">
          <source>The returned slice is the certificate in DER encoding.</source>
          <target state="translated">返されるスライスはDERエンコーディングの証明書です。</target>
        </trans-unit>
        <trans-unit id="01c758564c188da314abf0218bd7cfbe2c752f80" translate="yes" xml:space="preserve">
          <source>The returned slice is the certificate request in DER encoding.</source>
          <target state="translated">返されるスライスはDERエンコーディングの証明書要求です。</target>
        </trans-unit>
        <trans-unit id="56ef9da288a159e17f780d686422f0dfcfa221a7" translate="yes" xml:space="preserve">
          <source>The returned statement operates within the transaction and can no longer be used once the transaction has been committed or rolled back.</source>
          <target state="translated">返されたステートメントはトランザクション内で動作し、トランザクションがコミットされたりロールバックされたりすると使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="eaef2ac25b5ec95632c077f9297b6bf55f5dd3f6" translate="yes" xml:space="preserve">
          <source>The returned statement operates within the transaction and will be closed when the transaction has been committed or rolled back.</source>
          <target state="translated">返されたステートメントはトランザクション内で動作し、トランザクションがコミットされたかロールバックされたときにクローズされます。</target>
        </trans-unit>
        <trans-unit id="10df7eea472cec1ead17a66cb1fdaefe2e6578cc" translate="yes" xml:space="preserve">
          <source>The returned string is meant for debugging; for a stable serialized representation, use t.MarshalText, t.MarshalBinary, or t.Format with an explicit format string.</source>
          <target state="translated">返される文字列はデバッグ用です。安定したシリアライズ表現を行うには、明示的なフォーマット文字列を持つ t.MarshalText,t.MarshalBinary,t.Format を使用してください。</target>
        </trans-unit>
        <trans-unit id="48866f9aa69c2bb04dcb85d20c5a3c1d2d405ca8" translate="yes" xml:space="preserve">
          <source>The rule Title uses for word boundaries does not handle Unicode punctuation properly.</source>
          <target state="translated">Titleが単語の境界に使うルールは、Unicodeの句読点を正しく扱っていません。</target>
        </trans-unit>
        <trans-unit id="f80f01b0edf7103d5ecb8ca06eb4e22919710f70" translate="yes" xml:space="preserve">
          <source>The same Context may be passed to functions running in different goroutines; Contexts are safe for simultaneous use by multiple goroutines.</source>
          <target state="translated">同じコンテキストは、異なるゴローチンで実行されている関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a401c4efb67cc0055f52caa84dcf2de0d8f63cd7" translate="yes" xml:space="preserve">
          <source>The second argument, quote, specifies the type of literal being parsed and therefore which escaped quote character is permitted. If set to a single quote, it permits the sequence \' and disallows unescaped '. If set to a double quote, it permits \&quot; and disallows unescaped &quot;. If set to zero, it does not permit either escape and allows both quote characters to appear unescaped.</source>
          <target state="translated">二番目の引数である quote は、解析されるリテラルのタイプを指定し、 どのエスケープされたクォート文字を許可するかを指定します。単一の引用符に設定されている場合、シーケンスの \' を許可し、エスケープされていない '.二重引用符に設定されている場合、それは &quot;\&quot; を許可し、エスケープされていない &quot;.ゼロに設定されている場合、どちらのエスケープも許可せず、 両方の引用符文字がエスケープされていない状態で表示されることを許可します。</target>
        </trans-unit>
        <trans-unit id="40a1d3ecbed0bf217ec97ece1c42e914315bd313" translate="yes" xml:space="preserve">
          <source>The security model used by this package assumes that template authors are trusted, while Execute's data parameter is not. More details are provided below.</source>
          <target state="translated">本パッケージで使用されるセキュリティモデルは、テンプレート作成者が信頼されていることを前提としていますが、Executeのデータパラメータは信頼されていません。詳細は以下に記載します。</target>
        </trans-unit>
        <trans-unit id="a70cb84ae80d93013971dc3c09e0dd11fbe3a660" translate="yes" xml:space="preserve">
          <source>The server calls (for HTTP service):</source>
          <target state="translated">サーバーは(HTTPサービスのための)呼び出しを行います。</target>
        </trans-unit>
        <trans-unit id="4694acea63f5ebf8b8be35e4e84982505cd7d21a" translate="yes" xml:space="preserve">
          <source>The server may handle requests on a single connection by calling ServeConn. More typically it will create a network listener and call Accept or, for an HTTP listener, HandleHTTP and http.Serve.</source>
          <target state="translated">サーバは ServeConn を呼び出すことで、単一の接続に対するリクエストを処理することができます。より一般的には、ネットワークリスナーを作成して Accept を呼び出すか、HTTP リスナーの場合は HandleHTTP と http.Serve を呼び出します。</target>
        </trans-unit>
        <trans-unit id="901fd3527b931189389dc8b05aa80a401b308de0" translate="yes" xml:space="preserve">
          <source>The set of available CPUs is checked by querying the operating system at process startup. Changes to operating system CPU allocation after process startup are not reflected.</source>
          <target state="translated">利用可能なCPUのセットは、プロセス起動時にオペレーティングシステムに問い合わせて確認します。プロセス起動後のオペレーティングシステムのCPU割り当ての変更は反映されません。</target>
        </trans-unit>
        <trans-unit id="10e3cd17c3685da24fcde871ef4da00a080771a9" translate="yes" xml:space="preserve">
          <source>The signals SIGKILL and SIGSTOP may not be caught by a program, and therefore cannot be affected by this package.</source>
          <target state="translated">シグナル SIGKILL と SIGSTOP はプログラムにキャッチされない可能性があるため、本パッケージの影響を受けることはありません。</target>
        </trans-unit>
        <trans-unit id="7621705ac03f21ac222836c967959708135562eb" translate="yes" xml:space="preserve">
          <source>The simplest use of a Scanner, to read standard input as a set of lines.</source>
          <target state="translated">スキャナの最も簡単な使い方は、標準入力をラインのセットとして読み取ることです。</target>
        </trans-unit>
        <trans-unit id="9c0657904725889b0c9ba75534abc4f635bc0b2b" translate="yes" xml:space="preserve">
          <source>The size of a CRC-32 checksum in bytes.</source>
          <target state="translated">CRC-32 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="3ff608e7233df0580119a8a262ba634622895d8a" translate="yes" xml:space="preserve">
          <source>The size of a CRC-64 checksum in bytes.</source>
          <target state="translated">CRC-64チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="caae8e5aad6dbb0160181390b9818b080d122c80" translate="yes" xml:space="preserve">
          <source>The size of a SHA-1 checksum in bytes.</source>
          <target state="translated">SHA-1 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="cea16f97cc88534275f0e03f305d57951a36e34b" translate="yes" xml:space="preserve">
          <source>The size of a SHA224 checksum in bytes.</source>
          <target state="translated">SHA224 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="3a1556147bf25a0038243a962f16bc9d44b98e20" translate="yes" xml:space="preserve">
          <source>The size of a SHA256 checksum in bytes.</source>
          <target state="translated">SHA256 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="fb49c909a50ec86545c33e34c0f3d64148914e03" translate="yes" xml:space="preserve">
          <source>The size of an Adler-32 checksum in bytes.</source>
          <target state="translated">Adler-32チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="edf1ef16cc66ffa121682ca1207ef5467651c4f4" translate="yes" xml:space="preserve">
          <source>The size of an MD5 checksum in bytes.</source>
          <target state="translated">MD5 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="248e03e24b52c36053fea2b5fabdbb42fe255abb" translate="yes" xml:space="preserve">
          <source>The skip parameter has the same meaning as runtime.Caller's skip and controls where the stack trace begins. Passing skip=0 begins the trace in the function calling Add. For example, given this execution stack:</source>
          <target state="translated">skipパラメータは、runtime.Callerのスキップと同じ意味を持ち、スタックトレースがどこから始まるかを制御します。skip=0を渡すと、Addを呼び出す関数のトレースが始まります。例えば、この実行スタックが与えられたとします。</target>
        </trans-unit>
        <trans-unit id="b675e8a3e2a529e23f6f667c1adf36c39ed93efb" translate="yes" xml:space="preserve">
          <source>The slice returned by this method consists of all the substrings of s not contained in the slice returned by FindAllString. When called on an expression that contains no metacharacters, it is equivalent to strings.SplitN.</source>
          <target state="translated">このメソッドによって返されるスライスは、FindAllStringによって返されるスライスに含まれていないsのすべての部分文字列から構成されます。メタキャラクタを含まない式に対して呼び出された場合、これは strings.SplitN.</target>
        </trans-unit>
        <trans-unit id="37fc7946d5ac5fa1638ca298818fb97686f9142e" translate="yes" xml:space="preserve">
          <source>The smtp package is frozen and is not accepting new features. Some external packages provide more functionality. See:</source>
          <target state="translated">smtp パッケージは凍結されており、新機能を受け付けていません。外部パッケージの中には、より多くの機能を提供するものがあります。これを参照してください。</target>
        </trans-unit>
        <trans-unit id="37671db71f74ceff10a366ff8f17e7a0a28fae66" translate="yes" xml:space="preserve">
          <source>The sort is not guaranteed to be stable. For a stable sort, use SliceStable.</source>
          <target state="translated">ソートは安定していることを保証するものではありません。安定したソートを行うには、SliceStableを使用します。</target>
        </trans-unit>
        <trans-unit id="17c5e77086e67a3f2c51a48bac9596dffc360456" translate="yes" xml:space="preserve">
          <source>The source and destination values/types need not correspond exactly. For structs, fields (identified by name) that are in the source but absent from the receiving variable will be ignored. Fields that are in the receiving variable but missing from the transmitted type or value will be ignored in the destination. If a field with the same name is present in both, their types must be compatible. Both the receiver and transmitter will do all necessary indirection and dereferencing to convert between gobs and actual Go values. For instance, a gob type that is schematically,</source>
          <target state="translated">ソースとデスティネーションの値/型は、正確に対応する必要はありません。構造体の場合、ソースにありながら受信変数にないフィールド (名前で識別される)は無視されます。受信変数にはあるが、送信された型や値がないフィールドは、宛先では無視されます。同じ名前のフィールドが両方に存在する場合、その型は互換性がなければなりません。受信側と送信側の両方で、gob と実際の Go 値を変換するために必要なすべての間接参照と参照解除が行われます。例えば、図式的にはゴブの型。</target>
        </trans-unit>
        <trans-unit id="0268779129500cf4856c5f56fd67106abaf097eb" translate="yes" xml:space="preserve">
          <source>The source code could include additional Go code. That code was never compiled but would be processed by tools like godoc and might be useful as end-user documentation.</source>
          <target state="translated">ソースコードには、追加のGoコードが含まれている可能性があります。このコードはコンパイルされたことはありませんが、 godoc のようなツールで処理され、エンドユーザーのドキュメントとして役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="535d0edaef1db8d5c1dc136b1a303868255bb996" translate="yes" xml:space="preserve">
          <source>The source:</source>
          <target state="translated">ソースは</target>
        </trans-unit>
        <trans-unit id="e645e5bfb164f126d92a3414aa1a585176c8e465" translate="yes" xml:space="preserve">
          <source>The sql package checks for value checkers in the following order, stopping at the first found match: Stmt.NamedValueChecker, Conn.NamedValueChecker, Stmt.ColumnConverter, DefaultParameterConverter.</source>
          <target state="translated">sqlパッケージは、最初に見つかったマッチで停止し、以下の順序で値チェッカをチェックします。Stmt.NamedValueChecker、Conn.NamedValueChecker、Stmt.ColumnConverter、DefaultParameterConverter。</target>
        </trans-unit>
        <trans-unit id="bf35db5d84a5c59679d57c2063978bf2973a302c" translate="yes" xml:space="preserve">
          <source>The sql package creates and frees connections automatically; it also maintains a free pool of idle connections. If the database has a concept of per-connection state, such state can be reliably observed within a transaction (Tx) or connection (Conn). Once DB.Begin is called, the returned Tx is bound to a single connection. Once Commit or Rollback is called on the transaction, that transaction's connection is returned to DB's idle connection pool. The pool size can be controlled with SetMaxIdleConns.</source>
          <target state="translated">sqlパッケージは自動的にコネクションを作成して解放します。データベースが接続ごとの状態の概念を持っている場合、そのような状態はトランザクション(Tx)または接続(Conn)内で確実に観察することができます。DB.Begin が呼ばれると、返された Tx は単一の接続にバインドされます。トランザクションで Commit または Rollback が呼び出されると、そのトランザクションの接続は DB のアイドル接続プールに戻されます。プールのサイズは SetMaxIdleConns で制御できます。</target>
        </trans-unit>
        <trans-unit id="14c50009f306ef9ba308a3f9f45cb12ceab6e041" translate="yes" xml:space="preserve">
          <source>The sql package must be used in conjunction with a database driver. See &lt;a href=&quot;https://golang.org/s/sqldrivers&quot;&gt;https://golang.org/s/sqldrivers&lt;/a&gt; for a list of drivers.</source>
          <target state="translated">sqlパッケージは、データベースドライバーと組み合わせて使用​​する必要があります。ドライバーのリストについては、&lt;a href=&quot;https://golang.org/s/sqldrivers&quot;&gt;https：//golang.org/s/sqldrivers&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff11c76849e5520b5d3c1908876a0a08249bbd90" translate="yes" xml:space="preserve">
          <source>The src/ directory holds source code. The path below 'src' determines the import path or executable name.</source>
          <target state="translated">src/ディレクトリにはソースコードが格納されています。src' の下のパスは、インポートパスまたは実行ファイル名を決定します。</target>
        </trans-unit>
        <trans-unit id="51fce287253a04b9aa4e50fe0cda26970eb0eeca" translate="yes" xml:space="preserve">
          <source>The statements prepared for a transaction by calling the transaction's Prepare or Stmt methods are closed by the call to Commit or Rollback.</source>
          <target state="translated">トランザクションのPrepareメソッドまたはStmtメソッドを呼び出してトランザクション用に準備されたステートメントは、CommitまたはRollbackの呼び出しによって閉じられます。</target>
        </trans-unit>
        <trans-unit id="266ee83c3a485624a9ce3be711986c42904d65df" translate="yes" xml:space="preserve">
          <source>The swap operation, implemented by the SwapT functions, is the atomic equivalent of:</source>
          <target state="translated">SwapT関数で実装されているスワップ操作は、アトミックに相当します。</target>
        </trans-unit>
        <trans-unit id="78109ee602f829fc62630aa0958e0668bde1d9d0" translate="yes" xml:space="preserve">
          <source>The symbolizer function may be nil, in which case the results of the traceback function will be displayed as numbers. If the traceback function is nil, the symbolizer function will never be called. The context function may be nil, in which case the traceback function will only be called with the context field set to zero. If the context function is nil, then calls from Go to C to Go will not show a traceback for the C portion of the call stack.</source>
          <target state="translated">シンボライザー関数が nil の場合、トレースバック関数の結果は数値で表示されます。トレースバック関数が nil の場合、シンボライザー関数は決して呼び出されません。コンテキスト関数が nil の場合、トレースバック関数はコンテキストフィールドが 0 に設定されている場合にのみ呼び出されます。コンテキスト関数が nil の場合、Go から C への呼び出しは、呼び出しスタックの C 部分のトレースバックを表示しません。</target>
        </trans-unit>
        <trans-unit id="7f3f65f4777096791e56d64b25eeec76abb44bfa" translate="yes" xml:space="preserve">
          <source>The symbolizer function will be called with a single argument, a pointer to a struct:</source>
          <target state="translated">シンボライザー関数は、構造体へのポインタという単一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="826b161e82b6e953fc66964167887f9fb128e89d" translate="yes" xml:space="preserve">
          <source>The syntax of such definitions is to surround each template declaration with a &quot;define&quot; and &quot;end&quot; action.</source>
          <target state="translated">このような定義の構文は、各テンプレート宣言を &quot;define &quot;と &quot;end &quot;アクションで囲むことです。</target>
        </trans-unit>
        <trans-unit id="a896d242a72cd56df044b310d3d7e48636436044" translate="yes" xml:space="preserve">
          <source>The syntax of the regular expressions accepted is the same general syntax used by Perl, Python, and other languages. More precisely, it is the syntax accepted by RE2 and described at &lt;a href=&quot;https://golang.org/s/re2syntax&quot;&gt;https://golang.org/s/re2syntax&lt;/a&gt;, except for \C. For an overview of the syntax, run</source>
          <target state="translated">受け入れられる正規表現の構文は、Perl、Python、およびその他の言語で使用される一般的な構文と同じです。より正確には、\ Cを除いて、RE2で受け入れられ、&lt;a href=&quot;https://golang.org/s/re2syntax&quot;&gt;https：&lt;/a&gt; //golang.org/s/re2syntaxで説明されている構文です。構文の概要については、実行</target>
        </trans-unit>
        <trans-unit id="ba2393e2ef8002ea106da87efa718a59742fc7ac" translate="yes" xml:space="preserve">
          <source>The syslog package is frozen and is not accepting new features. Some external packages provide more functionality. See:</source>
          <target state="translated">syslog パッケージは凍結されており、新機能を受け付けていません。外部パッケージの中には、より多くの機能を提供するものがあります。を参照してください。</target>
        </trans-unit>
        <trans-unit id="99e701177eab165c110f7e05395c5e3f3462fc8b" translate="yes" xml:space="preserve">
          <source>The table's lower portion shows specialized features of each format, such as supported string encodings, support for sub-second timestamps, or support for sparse files.</source>
          <target state="translated">表の下部には、サポートされている文字列エンコーディング、サブセコンドのタイムスタンプのサポート、スパースファイルのサポートなど、各フォーマットの特殊な機能が示されています。</target>
        </trans-unit>
        <trans-unit id="e6cfcc2895da4e068fb4279dd7ba0aaf57b5ca4f" translate="yes" xml:space="preserve">
          <source>The table's upper portion shows the Header fields, where each format reports the maximum number of bytes allowed for each string field and the integer type used to store each numeric field (where timestamps are stored as the number of seconds since the Unix epoch).</source>
          <target state="translated">テーブルの上部にはヘッダフィールドが表示され、各フォーマットは各文字列フィールドに許可される最大バイト数と、各数値フィールドを格納するために使用される整数型を報告します(タイムスタンプはUnixのエポックからの秒数として格納されます)。</target>
        </trans-unit>
        <trans-unit id="b0a984b621ec68366c5b1261f609a8ab7bb45ea3" translate="yes" xml:space="preserve">
          <source>The tag must be one that takes string values: DT_NEEDED, DT_SONAME, DT_RPATH, or DT_RUNPATH.</source>
          <target state="translated">タグは、文字列の値を取るものでなければなりません。DT_NEEDED、DT_SONAME、DT_RPATH、DT_RUNPATH のいずれかの文字列値を取るタグでなければなりません。</target>
        </trans-unit>
        <trans-unit id="cbe588a5ff1a44ccc9c3b05cfac0b378253441ae" translate="yes" xml:space="preserve">
          <source>The target is the RFC 7230 &quot;request-target&quot;: it may be either a path or an absolute URL. If target is an absolute URL, the host name from the URL is used. Otherwise, &quot;example.com&quot; is used.</source>
          <target state="translated">targetはRFC7230の「request-target」であり、パスでも絶対URLでもよい。targetが絶対URLの場合、URLのホスト名が使用されます。それ以外の場合は、「example.com」が使用されます。</target>
        </trans-unit>
        <trans-unit id="a6f845f916ddb97993362899697ada283b05c4e3" translate="yes" xml:space="preserve">
          <source>The taskType is used to classify task instances. Analysis tools like the Go execution tracer may assume there are only a bounded number of unique task types in the system.</source>
          <target state="translated">taskType は、タスク・インスタンスを分類するために使用されます。Go 実行トレーサのような分析ツールでは、システム内に一意のタスクタイプが限られた数しかないと想定している場合があります。</target>
        </trans-unit>
        <trans-unit id="87c98cdec407269913a37379692f0119d00836f4" translate="yes" xml:space="preserve">
          <source>The template</source>
          <target state="translated">テンプレート</target>
        </trans-unit>
        <trans-unit id="8dbf1659d9b474dfc6de39448622e749ace9eba6" translate="yes" xml:space="preserve">
          <source>The testing/quick package is frozen and is not accepting new features.</source>
          <target state="translated">テスト/クイックパッケージが凍結されており、新機能を受け付けていません。</target>
        </trans-unit>
        <trans-unit id="450bac070fc3c1d570ed998a1290dd681976d259" translate="yes" xml:space="preserve">
          <source>The text returned from ReadLine does not include the line end (&quot;\r\n&quot; or &quot;\n&quot;). No indication or error is given if the input ends without a final line end. Calling UnreadByte after ReadLine will always unread the last byte read (possibly a character belonging to the line end) even if that byte is not part of the line returned by ReadLine.</source>
          <target state="translated">ReadLineから返されたテキストには、行末が含まれていません(&quot;\r\n&quot; or &quot;\n&quot;)。入力が最終的な行末を含まずに終了しても、表示もエラーも与えられません。ReadLine後にUnreadByteを呼び出すと、そのバイトがReadLineによって返された行の一部ではない場合でも、常に最後に読まれたバイト(おそらく行末に属する文字)を読み解いてしまいます。</target>
        </trans-unit>
        <trans-unit id="e19ad8a62ebb2f930cd2d412533e63ab163f9e7f" translate="yes" xml:space="preserve">
          <source>The text/tabwriter package is frozen and is not accepting new features.</source>
          <target state="translated">text/tabwriter パッケージがフリーズしており、新機能を受け付けていません。</target>
        </trans-unit>
        <trans-unit id="b8b4c6c4010154e59471f9dc5acececde45e4c79" translate="yes" xml:space="preserve">
          <source>The time zone database needed by LoadLocation may not be present on all systems, especially non-Unix systems. LoadLocation looks in the directory or uncompressed zip file named by the ZONEINFO environment variable, if any, then looks in known installation locations on Unix systems, and finally looks in $GOROOT/lib/time/zoneinfo.zip.</source>
          <target state="translated">LoadLocation が必要とするタイムゾーンデータベースは、すべてのシステム、特に Unix 以外のシステムには存在しないかもしれません。LoadLocation は、環境変数 ZONEINFO で指定されたディレクトリや圧縮されていない zip ファイルを探し、次に Unix システム上の既知のインストール場所を探し、最後に $GOROOT/lib/time/zoneinfo.zip を探します。</target>
        </trans-unit>
        <trans-unit id="d9d95ea8fa35077316d58a8c096d78c878d9e8de" translate="yes" xml:space="preserve">
          <source>The timeout includes name resolution, if required. When using TCP, and the host in the address parameter resolves to multiple IP addresses, the timeout is spread over each consecutive dial, such that each is given an appropriate fraction of the time to connect.</source>
          <target state="translated">タイムアウトには、必要に応じて名前解決も含まれます。TCP を使用していて、address パラメータのホストが複数の IP アドレスに解決している場合、タイムアウトは連続する各ダイヤルに分散され、それぞれに接続に必要な時間の適切な割合が与えられます。</target>
        </trans-unit>
        <trans-unit id="1be65b230e905dbffd21fbadb56320938e08062d" translate="yes" xml:space="preserve">
          <source>The tools that process the memory profiles assume that the profile rate is constant across the lifetime of the program and equal to the current value. Programs that change the memory profiling rate should do so just once, as early as possible in the execution of the program (for example, at the beginning of main).</source>
          <target state="translated">メモリプロファイルを処理するツールは、プロファイルレートがプログラムの寿命を通じて一定であり、現在の値に等しいことを前提としています。メモリプロファイルレートを変更するプログラムは、プログラムの実行中の可能な限り早い時期(例えば、mainの先頭など)に一度だけ変更しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1a177d1df849e44bddcb9ba4d4be3d9812f21f16" translate="yes" xml:space="preserve">
          <source>The trace tool computes the latency of a task by measuring the time between the task creation and the task end and provides latency distributions for each task type found in the trace.</source>
          <target state="translated">トレースツールは、タスクの作成からタスク終了までの時間を測定することでタスクの待ち時間を計算し、トレースで見つかった各タスクタイプの待ち時間分布を提供します。</target>
        </trans-unit>
        <trans-unit id="62d0bac03a171fb89c5dd19570b301f5442565f7" translate="yes" xml:space="preserve">
          <source>The traceback and context functions may be called from a signal handler, and must therefore use only async-signal safe functions. The symbolizer function may be called while the program is crashing, and so must be cautious about using memory. None of the functions may call back into Go.</source>
          <target state="translated">トレースバック関数とコンテキスト関数はシグナルハンドラから呼び出される可能性があるため、非同期シグナルセーフ関数のみを使用しなければなりません。シンボライザー関数は、プログラムがクラッシュしている間に呼び出される可能性があるため、メモリの使用には注意が必要です。どの関数も Go にコールバックすることはできません。</target>
        </trans-unit>
        <trans-unit id="64b5d618701b94606e91495371f70fb5b100120e" translate="yes" xml:space="preserve">
          <source>The traceback function will be called with a single argument, a pointer to a struct:</source>
          <target state="translated">トレースバック関数は、構造体へのポインタという単一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fbcd1af40286bdefbe9605ee1269e5d70a141d29" translate="yes" xml:space="preserve">
          <source>The two methods Network and String conventionally return strings that can be passed as the arguments to Dial, but the exact form and meaning of the strings is up to the implementation.</source>
          <target state="translated">Network と String の 2 つのメソッドは、従来は Dial への引数として渡すことができる文字列を返しますが、文字列の正確な形式や意味は実装次第です。</target>
        </trans-unit>
        <trans-unit id="ee1fff48d57b4264c60df5732fa6d287858ca513" translate="yes" xml:space="preserve">
          <source>The typ argument may be a defined (Named) type or an alias type. It may also be nil such that the returned TypeName can be used as argument for NewNamed, which will set the TypeName's type as a side- effect.</source>
          <target state="translated">typ 引数には、定義された(Named)型、またはエイリアス型を指定することができます。また、返されたTypeNameをNewNamedの引数として使用することができるように、nilにすることもできます。</target>
        </trans-unit>
        <trans-unit id="761242af94989502320341408ab25169d28b2151" translate="yes" xml:space="preserve">
          <source>The typical use case for NewFileTransport is to register the &quot;file&quot; protocol with a Transport, as in:</source>
          <target state="translated">NewFileTransportの典型的なユースケースは、以下のように「ファイル」プロトコルをTransportに登録することです。</target>
        </trans-unit>
        <trans-unit id="c9dec8fd9ff2613dd03956d5301652519fcaec0c" translate="yes" xml:space="preserve">
          <source>The underlying filesystem may truncate or round the values to a less precise time unit. If there is an error, it will be of type *PathError.</source>
          <target state="translated">基礎となるファイルシステムは、値を切り捨てたり、より正確でない時間単位に丸めたりすることがあります。エラーが発生した場合は、*PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="bc08db1aae610f1545a452a1bb5a7582597ab3b7" translate="yes" xml:space="preserve">
          <source>The usage message will appear on a separate line for anything but a bool flag with a one-byte name. For bool flags, the type is omitted and if the flag name is one byte the usage message appears on the same line. The parenthetical default is omitted if the default is the zero value for the type. The listed type, here int, can be changed by placing a back-quoted name in the flag's usage string; the first such item in the message is taken to be a parameter name to show in the message and the back quotes are stripped from the message when displayed. For instance, given</source>
          <target state="translated">使用法のメッセージは、1 バイトの名前を持つ bool フラグ以外は別の行に表示されます。bool フラグの場合は型は省略され、フラグ名が 1 バイトの場合は使用法メッセージが同じ行に表示されます。また、型のデフォルトがゼロ値の場合は、親文字のデフォルトは省略されます。フラグの使用法文字列の中にバッククォートされた名前を入れることで、リストされた型(ここでは int)を変更することができます。 メッセージの最初のそのような項目は、メッセージに表示されるパラメータ名とみなされ、表示されるときにバッククォートはメッセージから取り除かれます。例えば</target>
        </trans-unit>
        <trans-unit id="7175f6a7da0429173b6be919d1c9513e0498e3e7" translate="yes" xml:space="preserve">
          <source>The value 0xff was chosen because it cannot appear in a valid UTF-8 sequence.</source>
          <target state="translated">値 0xff は、有効な UTF-8 シーケンスには出現しないため、選択されました。</target>
        </trans-unit>
        <trans-unit id="e4328a7e24cd2970818970fe425c0b1b3c86f9d7" translate="yes" xml:space="preserve">
          <source>The variadic argument controls whether the function is variadic. FuncOf panics if the in[len(in)-1] does not represent a slice and variadic is true.</source>
          <target state="translated">variadic 引数は、関数が variadic であるかどうかを制御します。FuncOfは、in[len(in)-1]がスライスを表しておらず、 variadicが真の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="1e72c26ccaadcb98e76249dcd1c8f3cdb175e9de" translate="yes" xml:space="preserve">
          <source>The varint functions encode and decode single integer values using a variable-length encoding; smaller values require fewer bytes. For a specification, see &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/encoding&quot;&gt;https://developers.google.com/protocol-buffers/docs/encoding&lt;/a&gt;.</source>
          <target state="translated">varint関数は、可変長エンコーディングを使用して単一の整数値をエンコードおよびデコードします。値が小さいほど必要なバイトが少なくなります。仕様については、&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/encoding&quot;&gt;https：//developers.google.com/protocol-buffers/docs/encodingを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5cdb175715a8f3e26508e589b1b8622549f73fd8" translate="yes" xml:space="preserve">
          <source>The verbs behave analogously to those of Printf. For example, %x will scan an integer as a hexadecimal number, and %v will scan the default representation format for the value. The Printf verbs %p and %T and the flags # and + are not implemented. For floating-point and complex values, all valid formatting verbs (%b %e %E %f %F %g %G %x %X and %v) are equivalent and accept both decimal and hexadecimal notation (for example: &quot;2.3e+7&quot;, &quot;0x4.5p-8&quot;) and digit-separating underscores (for example: &quot;3.14159_26535_89793&quot;).</source>
          <target state="translated">動詞はPrintfのそれと似たような動作をします。例えば、%x は整数を 16 進数としてスキャンし、%v は値の既定の表現形式をスキャンします。Printf の動詞 %p と %T、フラグ#と+は実装されていません。浮動小数点値および複素数値については、すべての有効な書式設定動詞 (%b %e %E %f %F %g %G %x %X および %v)が同等で、10 進数および 16 進数表記 (例:&quot;2.3e+7&quot;,&quot;0x4.5p-8&quot;)と桁区切りのアンダースコア (例:&quot;3.14159_26535_89793&quot;)の両方を受け入れます。</target>
        </trans-unit>
        <trans-unit id="a6ebe1343c13ca95e202e147b7f816ef1bc435a4" translate="yes" xml:space="preserve">
          <source>The verbs:</source>
          <target state="translated">動詞が</target>
        </trans-unit>
        <trans-unit id="3ce9ac6782ffe3c2b00e6a4b78b2ec7b810f1491" translate="yes" xml:space="preserve">
          <source>The writes of individual records are buffered. After all data has been written, the client should call the Flush method to guarantee all data has been forwarded to the underlying io.Writer. Any errors that occurred should be checked by calling the Error method.</source>
          <target state="translated">個々のレコードの書き込みはバッファリングされます。すべてのデータが書き込まれた後、クライアントはFlushメソッドを呼び出して、すべてのデータが基礎となるio.Writerに転送されたことを保証しなければなりません。発生したエラーは、Errorメソッドを呼び出してチェックする必要があります。</target>
        </trans-unit>
        <trans-unit id="c7efdce3a929526f7cd0a0a9c837645401afe311" translate="yes" xml:space="preserve">
          <source>The zero (uninitialized) value for a Float is ready to use and represents the number +0.0 exactly, with precision 0 and rounding mode ToNearestEven.</source>
          <target state="translated">Float のゼロ(初期化されていない)値は、使用する準備ができており、精度 0、丸めモード ToNearestEven で、正確に +0.0 の数値を表します。</target>
        </trans-unit>
        <trans-unit id="232f8c7f5eea097cc9451d2d90b51db6b069254d" translate="yes" xml:space="preserve">
          <source>The zero Map is empty and ready for use. A Map must not be copied after first use.</source>
          <target state="translated">ゼロ マップは空で、使用する準備ができています。最初に使用した後は、マップをコピーしてはいけません。</target>
        </trans-unit>
        <trans-unit id="ba5155e1e3916eee99a712d5244dcde8e9982094" translate="yes" xml:space="preserve">
          <source>The zero Value represents no value. Its IsValid method returns false, its Kind method returns Invalid, its String method returns &quot;&amp;lt;invalid Value&amp;gt;&quot;, and all other methods panic. Most functions and methods never return an invalid value. If one does, its documentation states the conditions explicitly.</source>
          <target state="translated">ゼロの値は値がないことを表します。 IsValidメソッドはfalseを返し、KindメソッドはInvalidを返し、Stringメソッドは &quot;&amp;lt;invalid Value&amp;gt;&quot;を返し、他のすべてのメソッドはパニックになります。ほとんどの関数とメソッドが無効な値を返すことはありません。ある場合は、そのドキュメントに条件が明示的に記載されています。</target>
        </trans-unit>
        <trans-unit id="384c750c13afaffcbd5ebf58e8afec2b8768e946" translate="yes" xml:space="preserve">
          <source>The zero value for Pos is NoPos; there is no file and line information associated with it, and NoPos.IsValid() is false. NoPos is always smaller than any other Pos value. The corresponding Position value for NoPos is the zero value for Position.</source>
          <target state="translated">Pos のゼロ値は NoPos であり、これにはファイルや行の情報が関連付けられておらず、NoPos.IsValid()は false です。NoPosは、他のどのPos値よりも常に小さくなります。NoPosに対応するPositionの値は、Positionのゼロ値です。</target>
        </trans-unit>
        <trans-unit id="3f5973e68195ed6a7dd12c4c7dc485f8bde0523d" translate="yes" xml:space="preserve">
          <source>The zero value for an Int, Rat, or Float correspond to 0. Thus, new values can be declared in the usual ways and denote 0 without further initialization:</source>
          <target state="translated">Int,Rat,Float のゼロ値は 0 に対応します。 このように、新しい値は通常の方法で宣言することができ、さらに初期化することなく 0 を表すことができます。</target>
        </trans-unit>
        <trans-unit id="5d5aa4f538fd1571e15874ad0969ae7c0fda3040" translate="yes" xml:space="preserve">
          <source>The zero value for each field is equivalent to dialing without that option. Dialing with the zero value of Dialer is therefore equivalent to just calling the Dial function.</source>
          <target state="translated">各フィールドのゼロ値は、そのオプションなしでダイヤルするのと同じです。したがって、Dialer のゼロ値を使用してダイヤルすることは、単にダイヤル関数を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="beb5a289f20083f1018df67115c647d61b968230" translate="yes" xml:space="preserve">
          <source>The zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC. As this time is unlikely to come up in practice, the IsZero method gives a simple way of detecting a time that has not been initialized explicitly.</source>
          <target state="translated">Time型のゼロ値は1年1月1日、00:00:00.000000000 UTCです。この時刻が実際に出てくることはほとんどないので、IsZeroメソッドは、明示的に初期化されていない時刻を検出する簡単な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="4752552a303f0f1e8a6bd4b3555705dcb31c63a8" translate="yes" xml:space="preserve">
          <source>Then it can make a remote call:</source>
          <target state="translated">そうすると、リモート通話ができるようになります。</target>
        </trans-unit>
        <trans-unit id="c5d500f53dcbe43654b22f15924d609c47bcfc3c" translate="yes" xml:space="preserve">
          <source>Then use the pprof tool to look at the heap profile:</source>
          <target state="translated">次に、pprofツールを使ってヒーププロファイルを見ます。</target>
        </trans-unit>
        <trans-unit id="d249cadab1a19289ed9fd8f524a7048ff9efb13f" translate="yes" xml:space="preserve">
          <source>There are 16 methods of Regexp that match a regular expression and identify the matched text. Their names are matched by this regular expression:</source>
          <target state="translated">正規表現にマッチし、マッチしたテキストを識別する Regexp には 16 のメソッドがあります。これらの名前はこの正規表現にマッチします。</target>
        </trans-unit>
        <trans-unit id="089af1af9f031a6d4cb36f253f88e22a554b4d75" translate="yes" xml:space="preserve">
          <source>There are many commands available from the pprof command line. Commonly used commands include &quot;top&quot;, which prints a summary of the top program hot-spots, and &quot;web&quot;, which opens an interactive graph of hot-spots and their call graphs. Use &quot;help&quot; for information on all pprof commands.</source>
          <target state="translated">pprof コマンドラインからは多くのコマンドが利用できます。一般的に使用されるコマンドには、トップ・プログラムのホットスポットの要約を表示する &quot;top &quot;や、ホットスポットとその呼び出しグラフのインタラクティブなグラフを開く &quot;web &quot;などがあります。すべての pprof コマンドに関する情報は、&quot;help&quot; を使用してください。</target>
        </trans-unit>
        <trans-unit id="6fa5b171535b7941feffabcf1c5f915fe3f02940" translate="yes" xml:space="preserve">
          <source>There are no build tags for beta or minor releases.</source>
          <target state="translated">ベータ版やマイナーリリースのビルドタグはありません。</target>
        </trans-unit>
        <trans-unit id="f4ebe0322e94e23eec9f295ca340080dec64dffd" translate="yes" xml:space="preserve">
          <source>There are three types of user annotations: log messages, regions, and tasks.</source>
          <target state="translated">ユーザーアノテーションには、ログメッセージ、リージョン、タスクの3つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="311b843be371a8c7fc9f6f81df2189e5f92e44e5" translate="yes" xml:space="preserve">
          <source>There is also a set of binary comparison operators defined as functions:</source>
          <target state="translated">また、関数として定義された二値比較演算子の集合もあります。</target>
        </trans-unit>
        <trans-unit id="5f5077a9bb275171893d0be52e74cbffe4b19888" translate="yes" xml:space="preserve">
          <source>There is also a standard HTTP interface to profiling data. Adding the following line will install handlers under the /debug/pprof/ URL to download live profiles:</source>
          <target state="translated">プロファイリングデータへの標準的なHTTPインターフェースもあります。以下の行を追加すると、/debug/pprof/URLの下にハンドラーがインストールされ、ライブプロファイルをダウンロードすることができます。</target>
        </trans-unit>
        <trans-unit id="f5962f465f0b5c003c4585058fcce10ec6a63c36" translate="yes" xml:space="preserve">
          <source>There is also a standard HTTP interface to trace data. Adding the following line will install a handler under the /debug/pprof/trace URL to download a live trace:</source>
          <target state="translated">トレースデータへの標準的な HTTP インターフェイスもあります。以下の行を追加すると、/debug/pprof/trace URL の下にライブトレースをダウンロードするためのハンドラがインストールされます。</target>
        </trans-unit>
        <trans-unit id="669c09ef6ba443f4e07a76e5e520b09339b0d7ba" translate="yes" xml:space="preserve">
          <source>There is also a subset of the methods that can be applied to text read from a RuneReader:</source>
          <target state="translated">また、RuneReader から読み込んだテキストに適用できるメソッドのサブセットもあります。</target>
        </trans-unit>
        <trans-unit id="e5e187581cfc7675624afa1252d945d3159b9872" translate="yes" xml:space="preserve">
          <source>There is no mechanism for full case folding, that is, for characters that involve multiple runes in the input or output.</source>
          <target state="translated">入力や出力に複数のルーンを含む文字については、フルケース折り返しの仕組みはありません。</target>
        </trans-unit>
        <trans-unit id="4e416754d4e74f38af1b48194c67cf3710f22527" translate="yes" xml:space="preserve">
          <source>These are predefined layouts for use in Time.Format and time.Parse. The reference time used in the layouts is the specific time:</source>
          <target state="translated">これらは、Time.Formatとtime.Parseで使用するための定義済みレイアウトです。レイアウトで使用される参照時間は、特定の時間です。</target>
        </trans-unit>
        <trans-unit id="622b937b45492ef40cc6c554bb302fd36d24a9dd" translate="yes" xml:space="preserve">
          <source>These are the errors that can be returned in ParseError.Err.</source>
          <target state="translated">これらは、ParseError.Err.Err.で返されるエラーです。</target>
        </trans-unit>
        <trans-unit id="df2271a2f22e4450d78c23577801038a703976de" translate="yes" xml:space="preserve">
          <source>These assume decimal and the Go int type.</source>
          <target state="translated">これらは10進数とGo int型を前提としています。</target>
        </trans-unit>
        <trans-unit id="e44cf0ddaa746164e3256589314495380a8d22a3" translate="yes" xml:space="preserve">
          <source>These constants are copied from the flate package, so that code that imports &quot;compress/gzip&quot; does not also have to import &quot;compress/flate&quot;.</source>
          <target state="translated">これらの定数は flate パッケージからコピーされているので、&quot;compress/gzip&quot; をインポートするコードは &quot;compress/flate&quot; もインポートする必要がありません。</target>
        </trans-unit>
        <trans-unit id="9b53ffb7fd51347180d120a25b5986ecdfdf8a40" translate="yes" xml:space="preserve">
          <source>These constants are copied from the flate package, so that code that imports &quot;compress/zlib&quot; does not also have to import &quot;compress/flate&quot;.</source>
          <target state="translated">これらの定数は flate パッケージからコピーされているので、&quot;compress/zlib&quot; をインポートするコードは &quot;compress/flate&quot; もインポートする必要がありません。</target>
        </trans-unit>
        <trans-unit id="a6caaf07cd62c3bce0c1d44802c32e939959f7c6" translate="yes" xml:space="preserve">
          <source>These constants cause FlagSet.Parse to behave as described if the parse fails.</source>
          <target state="translated">これらの定数は、Parseに失敗した場合に、FlagSet.Parseを説明した通りに動作させます。</target>
        </trans-unit>
        <trans-unit id="c3e135e518f3071cd6e6de5ee8eb8509897ca8e4" translate="yes" xml:space="preserve">
          <source>These constants define supported rounding modes.</source>
          <target state="translated">これらの定数は、サポートされている丸めモードを定義します。</target>
        </trans-unit>
        <trans-unit id="e9b81d06567b4f6ea4a134b77b7d8d68b11092d0" translate="yes" xml:space="preserve">
          <source>These examples demonstrate the basics of printing using a format string. Printf, Sprintf, and Fprintf all take a format string that specifies how to format the subsequent arguments. For example, %d (we call that a 'verb') says to print the corresponding argument, which must be an integer (or something containing an integer, such as a slice of ints) in decimal. The verb %v ('v' for 'value') always formats the argument in its default form, just how Print or Println would show it. The special verb %T ('T' for 'Type') prints the type of the argument rather than its value. The examples are not exhaustive; see the package comment for all the details.</source>
          <target state="translated">これらの例は、フォーマット文字列を使った印刷の基本を示しています。Printf、Sprintf、および Fprintf はすべて、後続の引数をどのようにフォーマットするかを指定する書式文字列を取ります。例えば、%d (これを '動詞' と呼びます)は、対応する引数を 10 進数で整数 (または整数を含むもの、例えば ints のスライスなど)にして印刷するように言っています。動詞 %v ('value' の'v'は'value'を意味します)は、常に引数を既定の形式でフォーマットしますが、これは Print または Println が表示する方法と同じです。特殊な動詞 %T ('T' for 'Type')は、値ではなく引数の型を表示します。この例はすべてを網羅しているわけではありません。詳細についてはパッケージのコメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b31c3c54ac0eb3ff04d00595a12fb566e8fcf7e" translate="yes" xml:space="preserve">
          <source>These flags define which text to prefix to each log entry generated by the Logger. Bits are or'ed together to control what's printed. There is no control over the order they appear (the order listed here) or the format they present (as described in the comments). The prefix is followed by a colon only when Llongfile or Lshortfile is specified. For example, flags Ldate | Ltime (or LstdFlags) produce,</source>
          <target state="translated">これらのフラグは、ロガーによって生成された各ログ エントリに接頭辞を付けるテキストを定義します。ビットは、印刷されるものを制御するために、一緒にまたは編集されます。表示される順序 (ここに記載されている順序)や表示形式 (コメントで説明されている)は制御できません。Llongfile または Lshortfile が指定されている場合のみ、接頭辞の後にコロンが続きます。例えば、フラグ Ldate | Ltime (または LstdFlags)は、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fc9914d5780e96c178ba8969a057705144577da8" translate="yes" xml:space="preserve">
          <source>These functions are also compatible with the &amp;ldquo;Ed25519&amp;rdquo; function defined in RFC 8032. However, unlike RFC 8032's formulation, this package's private key representation includes a public key suffix to make multiple signing operations with the same key more efficient. This package refers to the RFC 8032 private key as the &amp;ldquo;seed&amp;rdquo;.</source>
          <target state="translated">これらの関数は、RFC 8032で定義されている「Ed25519」関数とも互換性があります。ただし、RFC 8032の公式とは異なり、このパッケージの秘密鍵表現には、同じ鍵での複数の署名操作をより効率的にする公開鍵のサフィックスが含まれています。このパッケージでは、RFC 8032秘密鍵を「シード」と呼びます。</target>
        </trans-unit>
        <trans-unit id="2034a99a91b57c3247261a1a8004621e6e0c4e1f" translate="yes" xml:space="preserve">
          <source>These functions require great care to be used correctly. Except for special, low-level applications, synchronization is better done with channels or the facilities of the sync package. Share memory by communicating; don't communicate by sharing memory.</source>
          <target state="translated">これらの機能を正しく使うには細心の注意が必要です。特別な低レベルのアプリケーションを除いて、同期はチャンネルや同期パッケージの機能を使って行う方が良いでしょう。通信してメモリを共有する;メモリを共有して通信しない。</target>
        </trans-unit>
        <trans-unit id="54aa9a67852a83f3350017dd1b9500c555360772" translate="yes" xml:space="preserve">
          <source>These packages are part of the Go Project but outside the main Go tree. They are developed under looser &lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;compatibility requirements&lt;/a&gt; than the Go core. Install them with &quot;&lt;a href=&quot;https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies&quot;&gt;go get&lt;/a&gt;&quot;.</source>
          <target state="translated">これらのパッケージはGoプロジェクトの一部ですが、メインのGoツリーの外にあります。それらはGoコアよりも緩い&lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;互換性要件の&lt;/a&gt;下で開発されています。「&lt;a href=&quot;https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies&quot;&gt;go get&lt;/a&gt;」でインストールしてください。</target>
        </trans-unit>
        <trans-unit id="07168c583c59c9cae9d4bb3facc94a52fb2a21e9" translate="yes" xml:space="preserve">
          <source>These predefined profiles maintain themselves and panic on an explicit Add or Remove method call.</source>
          <target state="translated">これらの定義済みプロファイルは、明示的な追加または削除メソッド呼び出しで自身を維持し、パニックを起こします。</target>
        </trans-unit>
        <trans-unit id="8dc4875980e26530686b9e8a46a4183aeaf7943d" translate="yes" xml:space="preserve">
          <source>These services can help you find Open Source packages provided by the community.</source>
          <target state="translated">これらのサービスは、コミュニティが提供するオープンソースパッケージを見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="6ba17173fd7e73d9151d0d7cdef890f5dd3a0a3f" translate="yes" xml:space="preserve">
          <source>These three formatting routines call the Qualifier for each package-level object O, and if the Qualifier returns a non-empty string p, the object is printed in the form p.O. If it returns an empty string, only the object name O is printed.</source>
          <target state="translated">これら 3 つの書式設定ルーチンは、各パッケージレベルのオブジェクト O に対して Qualifier を呼び出し、Qualifier が空でない文字列 p を返すと、オブジェクトは p.O の形式で印刷されます。</target>
        </trans-unit>
        <trans-unit id="2207cae6c61d669eed106af825a6dce66aef87d1" translate="yes" xml:space="preserve">
          <source>These variables have type *RangeTable.</source>
          <target state="translated">これらの変数の型は *RangeTable です。</target>
        </trans-unit>
        <trans-unit id="1166cbd43d7ca0f544abde3cc256ae8afc9cd0b1" translate="yes" xml:space="preserve">
          <source>This cannot be done concurrent to other receives from the Timer's channel.</source>
          <target state="translated">タイマーのチャンネルからの他の受信と並行して行うことはできません。</target>
        </trans-unit>
        <trans-unit id="b00ff4b1fd4c120a5db60ce99d175dd291630987" translate="yes" xml:space="preserve">
          <source>This declares an integer flag, -flagname, stored in the pointer ip, with type *int.</source>
          <target state="translated">これは、ポインタ ip に格納されている整数フラグ -flagname を宣言します。</target>
        </trans-unit>
        <trans-unit id="631f1841cf17bb7db8a22b0767e5099ebe5b8b09" translate="yes" xml:space="preserve">
          <source>This defines two templates, T1 and T2, and a third T3 that invokes the other two when it is executed. Finally it invokes T3. If executed this template will produce the text</source>
          <target state="translated">これは2つのテンプレートT1とT2を定義し、実行時に他の2つを呼び出す第3のT3を定義します。最後にT3を呼び出します。このテンプレートが実行されると</target>
        </trans-unit>
        <trans-unit id="07be652fe77b2bc1e633b76695cc662deba999dd" translate="yes" xml:space="preserve">
          <source>This example creates a PriorityQueue with some items, adds and manipulates an item, and then removes the items in priority order.</source>
          <target state="translated">この例では、いくつかのアイテムを含むPriorityQueueを作成し、アイテムを追加して操作し、優先順位の高い順にアイテムを削除します。</target>
        </trans-unit>
        <trans-unit id="11e8e47e8373159f24438e9584e5f85d6b5441f2" translate="yes" xml:space="preserve">
          <source>This example demonstrates a custom function to process template text. It installs the strings.Title function and uses it to Make Title Text Look Good In Our Template's Output.</source>
          <target state="translated">この例では、テンプレートのテキストを処理するためのカスタム関数を示します。strings.Title関数をインストールし、それを使用して、テンプレートの出力でタイトルテキストを見栄えよくするようにしています。</target>
        </trans-unit>
        <trans-unit id="dfa54d108334a66ba7ab5757d71b4364db5ae271" translate="yes" xml:space="preserve">
          <source>This example demonstrates how a value can be passed to the context and also how to retrieve it if it exists.</source>
          <target state="translated">この例では、コンテキストに値を渡す方法と、値が存在する場合にそれを取得する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cbed8edb3aa3c802bdc2c523c3a0a851457324e3" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to inspect the AST of a Go program.</source>
          <target state="translated">この例では、囲碁プログラムのASTを検査する方法を示します。</target>
        </trans-unit>
        <trans-unit id="165d3019bf668cef6d1995c8165503ac097763bd" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use big.Int to compute the smallest Fibonacci number with 100 decimal digits and to test whether it is prime.</source>
          <target state="translated">この例では、big.Intを使用して10進数100桁の最小フィボナッチ数を計算し、それが素数であるかどうかをテストする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0059484fefd6cd0e894a9be3837a0c3c538eda17" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use big.Rat to compute the first 15 terms in the sequence of rational convergents for the constant e (base of natural logarithm).</source>
          <target state="translated">この例は、定数e(自然対数の基底)の有理収束子の列の最初の15項を計算するためにbig.Ratを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b29080504869eb07c938bd169b02dbf661e6a627" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use one group of driver templates with distinct sets of helper templates.</source>
          <target state="translated">この例では、1 つのドライバーテンプレートのグループを、異なるヘルパーテンプレートのセットで使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ba0650f40679135f634bca363681740adeafe34a" translate="yes" xml:space="preserve">
          <source>This example demonstrates one way to share some templates and use them in different contexts. In this variant we add multiple driver templates by hand to an existing bundle of templates.</source>
          <target state="translated">この例では、いくつかのテンプレートを共有し、異なるコンテキストで使用する方法を示します。この例では、既存のテンプレートバンドルに複数のドライバテンプレートを手で追加します。</target>
        </trans-unit>
        <trans-unit id="0ba078883e861f3b147ecf053f6c06d8a3174cd3" translate="yes" xml:space="preserve">
          <source>This example demonstrates searching a list sorted in ascending order.</source>
          <target state="translated">この例では、昇順にソートされたリストを検索しています。</target>
        </trans-unit>
        <trans-unit id="7888c65ff5bdcbe2c823d7d7283ee2975bf6366b" translate="yes" xml:space="preserve">
          <source>This example demonstrates searching a list sorted in descending order. The approach is the same as searching a list in ascending order, but with the condition inverted.</source>
          <target state="translated">この例は、降順にソートされたリストを検索することを示しています。アプローチは昇順のリストを検索するのと同じですが、条件を反転させています。</target>
        </trans-unit>
        <trans-unit id="2db6a343e7f8129baf91fac5d3ebedf3e8666279" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of a cancelable context to prevent a goroutine leak. By the end of the example function, the goroutine started by gen will return without leaking.</source>
          <target state="translated">この例では、ゴルーチンリークを防ぐためにキャンセル可能なコンテキストを使用することを示しています。この例の関数が終わるまでに、gen によって開始された goroutine はリークせずに戻ってきます。</target>
        </trans-unit>
        <trans-unit id="f5ede30ffc3c68340a6fb2445f68975fd1d677b3" translate="yes" xml:space="preserve">
          <source>This example demonstrates unmarshaling an XML excerpt into a value with some preset fields. Note that the Phone field isn't modified and that the XML &amp;lt;Company&amp;gt; element is ignored. Also, the Groups field is assigned considering the element path provided in its tag.</source>
          <target state="translated">この例では、XMLの抜粋をいくつかの事前設定されたフィールドを持つ値に非整列化する方法を示します。Phoneフィールドは変更されず、XML &amp;lt;Company&amp;gt;要素は無視されることに注意してください。また、[グループ]フィールドは、タグで提供されている要素のパスを考慮して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="363362d5c2e9f91c6b9857ffd69fe714bafa9ced" translate="yes" xml:space="preserve">
          <source>This example fetches several URLs concurrently, using a WaitGroup to block until all the fetches are complete.</source>
          <target state="translated">この例では、複数の URL を同時にフェッチし、すべてのフェッチが完了するまで WaitGroup を使用してブロックします。</target>
        </trans-unit>
        <trans-unit id="06701ebad78061b44ebf3ff359db4a889929ed4c" translate="yes" xml:space="preserve">
          <source>This example illustrates how to remove a variable declaration in a Go program while maintaining correct comment association using an ast.CommentMap.</source>
          <target state="translated">この例では、 ast.CommentMap を使用して正しいコメント関連付けを維持しながら、Go プログラムの変数宣言を削除する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a88fa5b5d7ed0c65b753c3fe2d8b6cdc87e0d250" translate="yes" xml:space="preserve">
          <source>This example inserts several ints into an IntHeap, checks the minimum, and removes them in order of priority.</source>
          <target state="translated">この例では、複数のイントを IntHeap に挿入し、最小値をチェックし、優先度の高い順に削除します。</target>
        </trans-unit>
        <trans-unit id="e36be68d73234a9e2fb853054688b98fefd0444d" translate="yes" xml:space="preserve">
          <source>This example passes a context with a timeout to tell a blocking function that it should abandon its work after the timeout elapses.</source>
          <target state="translated">この例では、タイムアウトのあるコンテキストを渡して、タイムアウトが経過した後に作業を放棄するようにブロッキング関数に伝えています。</target>
        </trans-unit>
        <trans-unit id="eac2b4a123d3756695f2f19424362998d49962a1" translate="yes" xml:space="preserve">
          <source>This example passes a context with an arbitrary deadline to tell a blocking function that it should abandon its work as soon as it gets to it.</source>
          <target state="translated">この例では、任意の期限を指定したコンテキストを渡して、ブロッキング関数に到達したらすぐに作業を放棄するように指示しています。</target>
        </trans-unit>
        <trans-unit id="df7ace59807aa52b6b44602449d158b9635a420e" translate="yes" xml:space="preserve">
          <source>This example reads 10 cryptographically secure pseudorandom numbers from rand.Reader and writes them to a byte slice.</source>
          <target state="translated">この例では、暗号的に安全な10個の疑似乱数をrand.Readerから読み込み、バイトスライスに書き込みます。</target>
        </trans-unit>
        <trans-unit id="d0f63cae6959df0e63ff45ed07152e8d354e9432" translate="yes" xml:space="preserve">
          <source>This example shows how csv.Reader can be configured to handle other types of CSV files.</source>
          <target state="translated">この例では、csv.Readerが他のタイプのCSVファイルを扱うように設定できることを示しています。</target>
        </trans-unit>
        <trans-unit id="1cca172f7759e3ba0050255d1746af87f660b76a" translate="yes" xml:space="preserve">
          <source>This example shows how to encode an interface value. The key distinction from regular types is to register the concrete type that implements the interface.</source>
          <target state="translated">この例では、インターフェースの値をエンコードする方法を示しています。通常の型との違いは、インターフェイスを実装した具象型を登録することです。</target>
        </trans-unit>
        <trans-unit id="a3357a230dfc48b693b3b94d9c6611698fcf1171" translate="yes" xml:space="preserve">
          <source>This example shows how to use big.Float to compute the square root of 2 with a precision of 200 bits, and how to print the result as a decimal number.</source>
          <target state="translated">この例では、big.Floatを使用して200ビットの精度で2の平方根を計算し、その結果を10進数として表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="efe429413e771069e2a76db974f921ef42dbdd60" translate="yes" xml:space="preserve">
          <source>This example shows the basic usage of the package: Create an encoder, transmit some values, receive them with a decoder.</source>
          <target state="translated">この例は、パッケージの基本的な使い方を示しています。エンコーダを作成し、値を送信し、デコーダで受信します。</target>
        </trans-unit>
        <trans-unit id="4e20892924831ca17c2f745e5365e20b64d74b0e" translate="yes" xml:space="preserve">
          <source>This example shows the use of each of the methods on a *Rand. The use of the global functions is the same, without the receiver.</source>
          <target state="translated">この例では、*Randでの各メソッドの使用方法を示しています。グローバル関数の使用方法は、レシーバがなくても同じです。</target>
        </trans-unit>
        <trans-unit id="9dae51dea551843f94a869c5f0aec8bf68e765cc" translate="yes" xml:space="preserve">
          <source>This example shows what an AST looks like when printed for debugging.</source>
          <target state="translated">この例では、デバッグ用にASTを印刷したときにどのように見えるかを示しています。</target>
        </trans-unit>
        <trans-unit id="3d4d87b6b74c64cd8a077a3429d1b650786c492b" translate="yes" xml:space="preserve">
          <source>This example transmits a value that implements the custom encoding and decoding methods.</source>
          <target state="translated">この例では、カスタム・エンコーディングおよびデコーディング・メソッドを実装した値を送信します。</target>
        </trans-unit>
        <trans-unit id="5ad4aea6278dc849132cadb70003c4716078bb1f" translate="yes" xml:space="preserve">
          <source>This example uses RawMessage to delay parsing part of a JSON message.</source>
          <target state="translated">この例では、RawMessage を使用して JSON メッセージの一部の解析を遅延させています。</target>
        </trans-unit>
        <trans-unit id="f3c7cd2790bc702e1c4e8248c880538aa9480232" translate="yes" xml:space="preserve">
          <source>This example uses RawMessage to use a precomputed JSON during marshal.</source>
          <target state="translated">この例では、RawMessageを使用して、marshal時に事前に計算されたJSONを使用しています。</target>
        </trans-unit>
        <trans-unit id="0980067335654187fe3f7c133925d1affa51d747" translate="yes" xml:space="preserve">
          <source>This example uses a Decoder to decode a stream of distinct JSON values.</source>
          <target state="translated">この例では、デコーダを使用して、異なる JSON 値のストリームをデコードします。</target>
        </trans-unit>
        <trans-unit id="03fbac2b83cd3991555ff62920bdc91549cc27eb" translate="yes" xml:space="preserve">
          <source>This example uses a Decoder to decode a streaming array of JSON objects.</source>
          <target state="translated">この例では、デコーダを使用して、JSON オブジェクトのストリーミング配列をデコードしています。</target>
        </trans-unit>
        <trans-unit id="f5365f6fa06883e90b95f7b5b17bc92e07aa1a04" translate="yes" xml:space="preserve">
          <source>This function is deterministic. Thus, if the set of possible messages is small, an attacker may be able to build a map from messages to signatures and identify the signed messages. As ever, signatures provide authenticity, not confidentiality.</source>
          <target state="translated">この関数は決定論的である。したがって、可能なメッセージのセットが小さい場合、攻撃者はメッセージから署名へのマップを構築し、署名されたメッセージを識別することができるかもしれません。これまでと同様に、署名は真正性を提供するものであり、機密性を提供するものではありません。</target>
        </trans-unit>
        <trans-unit id="21dc4eae53c9012a7d2a049dd7f00db6a6938f5b" translate="yes" xml:space="preserve">
          <source>This function's execution time does not depend on the inputs.</source>
          <target state="translated">この関数の実行時間は入力に依存しません。</target>
        </trans-unit>
        <trans-unit id="87202fef0c6c5ae187b02620dfd26b630d0392d4" translate="yes" xml:space="preserve">
          <source>This functionality should only be used with legacy web sites. RFC 2396 warns that interpreting Userinfo this way &amp;ldquo;is NOT RECOMMENDED, because the passing of authentication information in clear text (such as URI) has proven to be a security risk in almost every case where it has been used.&amp;rdquo;</source>
          <target state="translated">この機能は、レガシーWebサイトでのみ使用する必要があります。RFC 2396は、Userinfoをこのように解釈することを警告しています。「認証情報をクリアテキスト（URIなど）で渡すことは、使用されているほとんどすべてのケースでセキュリティリスクであることが判明しているためです。」</target>
        </trans-unit>
        <trans-unit id="898688304c78e7f2468d53e47407efc6f38af32f" translate="yes" xml:space="preserve">
          <source>This implementation derives the nonce from an AES-CTR CSPRNG keyed by ChopMD(256, SHA2-512(priv.D || entropy || hash)). The CSPRNG key is IRO by a result of Coron; the AES-CTR stream is IRO under standard assumptions.</source>
          <target state="translated">この実装では、ChopMD(256,SHA2-512(priv.D || entropy || hash))で鍵を設定したAES-CTR CSPRNGからnonceを導出する。CSPRNG 鍵は Coron の結果により IRO であり、AES-CTR ストリームは標準的な仮定の下で IRO である。</target>
        </trans-unit>
        <trans-unit id="d2d5c7329f986ca3d31bfdba2057014f5f44ad7d" translate="yes" xml:space="preserve">
          <source>This is only needed to install the handler in a non-standard location.</source>
          <target state="translated">これは、ハンドラを標準以外の場所に設置する場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="4726b7b6e93eb25607ca12b6c92e41d048948273" translate="yes" xml:space="preserve">
          <source>This is unnecessary as the next call to WriteHeader or Close will implicitly flush out the file's padding.</source>
          <target state="translated">次のWriteHeaderやCloseの呼び出しは、暗黙のうちにファイルのパディングをフラッシュアウトしてしまうので、これは不要です。</target>
        </trans-unit>
        <trans-unit id="eb1b3ed68f800415903edd6e38e6c00b58c4b66a" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;EC PRIVATE KEY&quot;. For a more flexible key format which is not EC specific, use MarshalPKCS8PrivateKey.</source>
          <target state="translated">この種の鍵は一般的に「EC PRIVATE KEY」タイプのPEMブロックでエンコードされています。EC に特化したものではない、より柔軟な鍵フォーマットには、MarshalPKCS8PrivateKey を使用してください。</target>
        </trans-unit>
        <trans-unit id="56bef0ed59f36389d7550a0e4c48802187b81f7d" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;EC PUBLIC KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「EC PUBLIC KEY」タイプのPEMブロックでエンコードされている。</target>
        </trans-unit>
        <trans-unit id="dfe352de6a0131091f458f18e937a358eab3152e" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;PRIVATE KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「PRIVATE KEY」タイプのPEMブロックでエンコードされている。</target>
        </trans-unit>
        <trans-unit id="42db7a056c64d4d64e474ea59fd1650377d9bc54" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;PUBLIC KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「PUBLIC KEY」タイプのPEMブロックでエンコードされています。</target>
        </trans-unit>
        <trans-unit id="64ab07dfb34f7d2feff364506aca7067a4453b39" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;RSA PRIVATE KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「RSA PRIVATE KEY」タイプのPEMブロックでエンコードされています。</target>
        </trans-unit>
        <trans-unit id="98a803d28f3224bf7891d32a0db324db326e4afd" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;RSA PRIVATE KEY&quot;. For a more flexible key format which is not RSA specific, use MarshalPKCS8PrivateKey.</source>
          <target state="translated">この種の鍵は一般的に「RSA PRIVATE KEY」タイプの PEM ブロックでエンコードされています。RSA 固有ではない、より柔軟な鍵フォーマットには、MarshalPKCS8PrivateKey を使用してください。</target>
        </trans-unit>
        <trans-unit id="5d8222cc13301829f5dbdc649eec16abab7d33d6" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;RSA PUBLIC KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「RSA PUBLIC KEY」タイプのPEMブロックでエンコードされています。</target>
        </trans-unit>
        <trans-unit id="67c7b63689264a63777784c1588c7be8f2ebeb83" translate="yes" xml:space="preserve">
          <source>This means that, by default, command line programs will behave like typical Unix command line programs, while other programs will not crash with SIGPIPE when writing to a closed network connection.</source>
          <target state="translated">これは、デフォルトでは、コマンドラインプログラムは典型的なUnixコマンドラインプログラムのように動作し、他のプログラムは閉じたネットワーク接続に書き込みをしてもSIGPIPEでクラッシュしないことを意味します。</target>
        </trans-unit>
        <trans-unit id="53c41745078961e0cbeedf1ad29b01ea99fe7434" translate="yes" xml:space="preserve">
          <source>This mechanism can be used to cancel long operations on the server if the client has disconnected before the response is ready.</source>
          <target state="translated">このメカニズムは、応答の準備が整う前にクライアントが切断した場合に、サーバ上での長時間の操作をキャンセルするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d3191056acdbdc6fd1ca936f76914f75eb4f8098" translate="yes" xml:space="preserve">
          <source>This mechanism is intended only for trailers that are not known prior to the headers being written. If the set of trailers is fixed or known before the header is written, the normal Go trailers mechanism is preferred:</source>
          <target state="translated">このメカニズムは、ヘッダが書き込まれる前に知られていないトレーラのみを対象としています。トレーラーのセットが固定されているか、ヘッダが書き込まれる前に知られている場合は、通常の Go トレーラーのメカニズムが好ましい。</target>
        </trans-unit>
        <trans-unit id="34dfd520d192c4e8193a79a528c0369751354149" translate="yes" xml:space="preserve">
          <source>This method consults the following fields of the response r:</source>
          <target state="translated">このメソッドは、レスポンス r の以下のフィールドを参照します。</target>
        </trans-unit>
        <trans-unit id="6857cb2d00e6efa4c19dc849fe5f85bb657fb149" translate="yes" xml:space="preserve">
          <source>This method implements crypto.Signer, which is an interface to support keys where the private part is kept in, for example, a hardware module. Common uses should use the Sign function in this package directly.</source>
          <target state="translated">このメソッドは、プライベート部分がハードウェアモジュールなどに保持される鍵をサポートするインターフェイスである crypto.Signer を実装している。一般的には、このパッケージの Sign 関数を直接使用してください。</target>
        </trans-unit>
        <trans-unit id="dca73678d958fc56a6644aad153e6b5ae346adb8" translate="yes" xml:space="preserve">
          <source>This method implements crypto.Signer, which is an interface to support keys where the private part is kept in, for example, a hardware module. Common uses should use the Sign* functions in this package directly.</source>
          <target state="translated">このメソッドは、プライベート部分がハードウェアモジュールなどに保持される鍵をサポートするインターフェイスである crypto.Signerを実装している。一般的には、このパッケージの Sign*関数を直接使用してください。</target>
        </trans-unit>
        <trans-unit id="6162e9fff452fe7b81839fc43d5a9b956682d1db" translate="yes" xml:space="preserve">
          <source>This package assumes that template authors are trusted, that Execute's data parameter is not, and seeks to preserve the properties below in the face of untrusted data:</source>
          <target state="translated">本パッケージは、テンプレート作成者が信頼されていること、Execute のデータ・パラメータが信頼されていないことを前提としており、信頼されていないデータに直面しても以下のプロパティを保持しようとしています。</target>
        </trans-unit>
        <trans-unit id="646741784bedcfbc50f393efbc21b4c2b803f33a" translate="yes" xml:space="preserve">
          <source>This package does not guarantee bit-identical results across architectures.</source>
          <target state="translated">本パッケージは、アーキテクチャ間でのビット同一性の結果を保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="25b183f3fa47240bd162a6084ce81041d00db47f" translate="yes" xml:space="preserve">
          <source>This package does not support disk spanning.</source>
          <target state="translated">本パッケージはディスクスパニングをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="917226455af3a3e84812552f61aaf5f000d19a66" translate="yes" xml:space="preserve">
          <source>This package favors simplicity over efficiency. Clients that require high-performance serialization, especially for large data structures, should look at more advanced solutions such as the encoding/gob package or protocol buffers.</source>
          <target state="translated">このパッケージは効率よりもシンプルさを優先しています。特に大きなデータ構造のために高性能なシリアライズを必要とするクライアントは、encoding/gob パッケージやプロトコルバッファのようなより高度なソリューションを探すべきです。</target>
        </trans-unit>
        <trans-unit id="91400ec0be490a039f54a2e8ea4991f07061b72f" translate="yes" xml:space="preserve">
          <source>This package is EXPERIMENTAL. Its current scope is only to allow tests to run, but not yet to provide a comprehensive API for users. It is exempt from the Go compatibility promise.</source>
          <target state="translated">本パッケージは EXPERIMENTAL です。現在の範囲はテストを実行できるようにするだけで、ユーザーに包括的な API を提供することはできません。Go 互換性の約束からは除外されています。</target>
        </trans-unit>
        <trans-unit id="f172ad46509f2996426e887fe6f7f5b737ccb0ba" translate="yes" xml:space="preserve">
          <source>This package is not implemented on NaCl (Native Client).</source>
          <target state="translated">本パッケージは NaCl (Native Client)には実装されていません。</target>
        </trans-unit>
        <trans-unit id="70b7c3d76332df2a567dd4571a1dd43d36bb3d95" translate="yes" xml:space="preserve">
          <source>This package is not implemented on Plan 9.</source>
          <target state="translated">このパッケージはプラン9には実装されていません。</target>
        </trans-unit>
        <trans-unit id="089323f3519ab53b437d7cbe9878efc86f18d94a" translate="yes" xml:space="preserve">
          <source>This package is not implemented on Windows. As the syslog package is frozen, Windows users are encouraged to use a package outside of the standard library. For background, see &lt;a href=&quot;https://golang.org/issue/1108&quot;&gt;https://golang.org/issue/1108&lt;/a&gt;.</source>
          <target state="translated">このパッケージはWindowsでは実装されていません。syslogパッケージがフリーズしているため、Windowsユーザーは標準ライブラリ以外のパッケージを使用することをお勧めします。背景については、&lt;a href=&quot;https://golang.org/issue/1108&quot;&gt;https：//golang.org/issue/1108を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4c28db944fb8406ea70640148283b4f2b07cfe75" translate="yes" xml:space="preserve">
          <source>This package understands HTML, CSS, JavaScript, and URIs. It adds sanitizing functions to each simple action pipeline, so given the excerpt</source>
          <target state="translated">本パッケージは HTML,CSS,JavaScript,URI を理解します。各単純なアクションパイプラインにサニタイズ関数を追加します。</target>
        </trans-unit>
        <trans-unit id="63f9c654258649e0fec61304d0149ff6b7e1fac2" translate="yes" xml:space="preserve">
          <source>This package wraps package text/template so you can share its template API to parse and execute HTML templates safely.</source>
          <target state="translated">本パッケージは、HTML テンプレートを安全に解析・実行するためのテンプレート API を共有できるように、パッケージの text/template をラップします。</target>
        </trans-unit>
        <trans-unit id="12b81feb5020b97e164b3bd1ab6605720164a33f" translate="yes" xml:space="preserve">
          <source>This palette was used in the Plan 9 Operating System, described at &lt;a href=&quot;https://9p.io/magic/man2html/6/color&quot;&gt;https://9p.io/magic/man2html/6/color&lt;/a&gt;</source>
          <target state="translated">このパレットは、&lt;a href=&quot;https://9p.io/magic/man2html/6/color&quot;&gt;https：//9p.io/magic/man2html/6/color&lt;/a&gt;で説明されているPlan 9オペレーティングシステムで使用されていました。</target>
        </trans-unit>
        <trans-unit id="53f264e60d97dda7c8e598fd892c840f64c77bcb" translate="yes" xml:space="preserve">
          <source>This returns a Writer to which the file contents should be written. The file's contents must be written to the io.Writer before the next call to Create, CreateHeader, or Close.</source>
          <target state="translated">これは、ファイルの内容を書き込むべきライターを返します。ファイルの内容は、次にCreate、CreateHeader、またはCloseを呼び出す前に、io.Writerに書き込まなければなりません。</target>
        </trans-unit>
        <trans-unit id="3636f2d8cb7dce3b52ad380d63ea631656bb70da" translate="yes" xml:space="preserve">
          <source>This runtime/trace package provides APIs to add equivalent tracing support to a standalone program. See the Example that demonstrates how to use this API to enable tracing.</source>
          <target state="translated">このランタイム/トレースパッケージは、スタンドアロンプログラムに同等のトレースサポートを追加するためのAPIを提供します。この API を使用してトレースを有効にする方法を示す例を参照してください。</target>
        </trans-unit>
        <trans-unit id="eb3d7236d288f19d5e07330ec9b641abb7a1c736" translate="yes" xml:space="preserve">
          <source>This section documents the encoding, details that are not important for most users. Details are presented bottom-up.</source>
          <target state="translated">このセクションでは、ほとんどのユーザーにとって重要ではないエンコーディングの詳細を文書化しています。詳細はボトムアップで表示されます。</target>
        </trans-unit>
        <trans-unit id="8d97dde3cffa35e96f0901463ccd21bc2b7e33d2" translate="yes" xml:space="preserve">
          <source>This set may grow. Note that regular expression matches may need to examine text beyond the text returned by a match, so the methods that match text from a RuneReader may read arbitrarily far into the input before returning.</source>
          <target state="translated">このセットは増える可能性があります。正規表現のマッチは、マッチによって返されるテキスト以外のテキストを調べる必要がある場合があるため、RuneReader からテキストにマッチするメソッドは、返す前に入力を任意に遠くまで読み込んでしまうことに注意してください。</target>
        </trans-unit>
        <trans-unit id="13155ea54999e3f67a0c6d8a556ef2fb922860ce" translate="yes" xml:space="preserve">
          <source>This should not be done concurrent to other receives from the Timer's channel.</source>
          <target state="translated">タイマーのチャンネルからの他の受信と並行して行ってはいけません。</target>
        </trans-unit>
        <trans-unit id="0da770375be11542fa319ca413fcc3ece2b576a4" translate="yes" xml:space="preserve">
          <source>This type should be considered identical to sql.IsolationLevel along with any values defined on it.</source>
          <target state="translated">この型はsql.IsolationLevelと定義されている値と同じと考えてください。</target>
        </trans-unit>
        <trans-unit id="5cefc7416c362c1afcf6c674cc1720ba6d02139f" translate="yes" xml:space="preserve">
          <source>This type should be considered identical to sql.TxOptions.</source>
          <target state="translated">この型はsql.TxOptionsと同じと考えてください。</target>
        </trans-unit>
        <trans-unit id="23bb56893bd9c167f4933bba0f06ea209969209a" translate="yes" xml:space="preserve">
          <source>ThreadCreateProfile returns n, the number of records in the thread creation profile. If len(p) &amp;gt;= n, ThreadCreateProfile copies the profile into p and returns n, true. If len(p) &amp;lt; n, ThreadCreateProfile does not change p and returns n, false.</source>
          <target state="translated">ThreadCreateProfileは、スレッド作成プロファイルのレコード数であるnを返します。len（p）&amp;gt; = nの場合、ThreadCreateProfileはプロファイルをpにコピーし、n、trueを返します。len（p）&amp;lt;nの場合、ThreadCreateProfileはpを変更せず、n、falseを返します。</target>
        </trans-unit>
        <trans-unit id="aeddfe22a01fc0ff5fb0fe691b08db0b2e2a26c7" translate="yes" xml:space="preserve">
          <source>Tick</source>
          <target state="translated">Tick</target>
        </trans-unit>
        <trans-unit id="26c9fc157a3f52de1aca92922ccb9a288e5fa386" translate="yes" xml:space="preserve">
          <source>Tick is a convenience wrapper for NewTicker providing access to the ticking channel only. While Tick is useful for clients that have no need to shut down the Ticker, be aware that without a way to shut it down the underlying Ticker cannot be recovered by the garbage collector; it &quot;leaks&quot;. Unlike NewTicker, Tick will return nil if d &amp;lt;= 0.</source>
          <target state="translated">Tickは、Tickingチャネルへのアクセスのみを提供するNewTickerの便利なラッパーです。TickはTickerをシャットダウンする必要がないクライアントに役立ちますが、Tickerをシャットダウンする方法がないと、基になるTickerをガベージコレクターで回復できないことに注意してください。それは「リーク」します。NewTickerとは異なり、Tickはd &amp;lt;= 0の場合nilを返します。</target>
        </trans-unit>
        <trans-unit id="464b9c4863cbad4e03c3166e6a41a020f20219b8" translate="yes" xml:space="preserve">
          <source>Time instants can be compared using the Before, After, and Equal methods. The Sub method subtracts two instants, producing a Duration. The Add method adds a Time and a Duration, producing a Time.</source>
          <target state="translated">インスタントの時間は、Before、After、Equalメソッドを使用して比較することができます。Subメソッドは、2つのインスタンツを減算し、デュレーションを生成します。Addメソッドは、TimeとDurationを追加してTimeを生成します。</target>
        </trans-unit>
        <trans-unit id="7e0d5fdb48c2796b9cc511f84f1969b59a9bd1cf" translate="yes" xml:space="preserve">
          <source>Time.Add</source>
          <target state="translated">Time.Add</target>
        </trans-unit>
        <trans-unit id="5c2e779ba4c8677013ab3eb4de9c1e6bf9c9924b" translate="yes" xml:space="preserve">
          <source>Time.AddDate</source>
          <target state="translated">Time.AddDate</target>
        </trans-unit>
        <trans-unit id="730b4aa03b8316a2a6c19e05b72ec5d4eb05e78c" translate="yes" xml:space="preserve">
          <source>Time.After</source>
          <target state="translated">Time.After</target>
        </trans-unit>
        <trans-unit id="d5e86b615c46a18260de62e172d7e06cc20f7083" translate="yes" xml:space="preserve">
          <source>Time.AppendFormat</source>
          <target state="translated">Time.AppendFormat</target>
        </trans-unit>
        <trans-unit id="88be4309d5e0539eff6218d7e8c02ecf0c7b2e65" translate="yes" xml:space="preserve">
          <source>Time.Before</source>
          <target state="translated">Time.Before</target>
        </trans-unit>
        <trans-unit id="480d1c53462d365532b2348e82a3f0dcb963c99e" translate="yes" xml:space="preserve">
          <source>Time.Date</source>
          <target state="translated">Time.Date</target>
        </trans-unit>
        <trans-unit id="ae2638b80e7bdac6e6725adc567cf7badedc6abe" translate="yes" xml:space="preserve">
          <source>Time.Day</source>
          <target state="translated">Time.Day</target>
        </trans-unit>
        <trans-unit id="d4766b7b3328342b5ba1a667334b95afb4c840fd" translate="yes" xml:space="preserve">
          <source>Time.Equal</source>
          <target state="translated">Time.Equal</target>
        </trans-unit>
        <trans-unit id="092fc9098aafde18e6cec288675831ee7d77f8a8" translate="yes" xml:space="preserve">
          <source>Time.Format</source>
          <target state="translated">Time.Format</target>
        </trans-unit>
        <trans-unit id="3768befc26b5bc40a2c6b38ecc6f26a0656a5d40" translate="yes" xml:space="preserve">
          <source>Time.Round</source>
          <target state="translated">Time.Round</target>
        </trans-unit>
        <trans-unit id="5b138a17083c1c36c8bab2fd64e7493a32a70b68" translate="yes" xml:space="preserve">
          <source>Time.String</source>
          <target state="translated">Time.String</target>
        </trans-unit>
        <trans-unit id="e126e45961c85339227ad3c92517287507ec5152" translate="yes" xml:space="preserve">
          <source>Time.Sub</source>
          <target state="translated">Time.Sub</target>
        </trans-unit>
        <trans-unit id="d3f1777c34673ecabb71603383f8d1fd8d6be9c4" translate="yes" xml:space="preserve">
          <source>Time.Truncate</source>
          <target state="translated">Time.Truncate</target>
        </trans-unit>
        <trans-unit id="c4ee117595e7091017dcf807233ec5e3324552ac" translate="yes" xml:space="preserve">
          <source>Time.Unix</source>
          <target state="translated">Time.Unix</target>
        </trans-unit>
        <trans-unit id="f8fc7e6bb582b1829de5a848ff872dea68eff61d" translate="yes" xml:space="preserve">
          <source>TimeFormat is the time format to use when generating times in HTTP headers. It is like time.RFC1123 but hard-codes GMT as the time zone. The time being formatted must be in UTC for Format to generate the correct format.</source>
          <target state="translated">TimeFormat は HTTP ヘッダで時刻を生成する際に使用する時刻フォーマットです。time.RFC1123 と似ていますが、タイムゾーンとして GMT をハードコードしています。正しいフォーマットを生成するためには、フォーマットされる時間は UTC でなければなりません。</target>
        </trans-unit>
        <trans-unit id="9827d1afd02311b970b1c9ab5d2482ee7f917a5d" translate="yes" xml:space="preserve">
          <source>Timeout reports whether the DNS lookup is known to have timed out. This is not always known; a DNS lookup may fail due to a timeout and return a DNSError for which Timeout returns false.</source>
          <target state="translated">Timeoutは、DNS検索がタイムアウトしたことがわかっているかどうかを報告する。これは常に知られているわけではありません。 DNS検索はタイムアウトにより失敗し、Timeoutがfalseを返すDNSErrorを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="927810e8434679578bc9bf07a4312dbfd80340d4" translate="yes" xml:space="preserve">
          <source>Timeout reports whether this error represents a timeout.</source>
          <target state="translated">Timeout は、このエラーがタイムアウトを表しているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="e7860bff1be7d01a8121a71b30616b2279f825c3" translate="yes" xml:space="preserve">
          <source>TimeoutHandler returns a Handler that runs h with the given time limit.</source>
          <target state="translated">TimeoutHandler は、指定された制限時間内に h を実行するハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="41f375b226e7f8e10a9acde2441f73751822f0d4" translate="yes" xml:space="preserve">
          <source>TimeoutHandler supports the Flusher and Pusher interfaces but does not support the Hijacker interface.</source>
          <target state="translated">TimeoutHandlerはFlusherとPusherインターフェースをサポートしていますが、Hijackerインターフェースはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="b94b20b16ca4b5f916aaa1eb8d24553f8d4b92c2" translate="yes" xml:space="preserve">
          <source>TimeoutReader returns ErrTimeout on the second read with no data. Subsequent calls to read succeed.</source>
          <target state="translated">TimeoutReader は、データがない 2 回目の読み取りで ErrTimeout を返します。それ以降の読み込みの呼び出しは成功します。</target>
        </trans-unit>
        <trans-unit id="8bdae2bbf616fbfd5c5eefd29c8a537bd886144c" translate="yes" xml:space="preserve">
          <source>TimespecToNsec converts a Timespec value into a number of nanoseconds since the Unix epoch.</source>
          <target state="translated">TimespecToNsecは、Timespecの値をUnixのエポック以降のナノ秒数に変換します。</target>
        </trans-unit>
        <trans-unit id="71641b558817e2a09b865dac9868550ced5db039" translate="yes" xml:space="preserve">
          <source>TimevalToNsec converts a Timeval value into a number of nanoseconds since the Unix epoch.</source>
          <target state="translated">TimevalToNsecは、Timeval値をUnixのエポック以降のナノ秒数に変換します。</target>
        </trans-unit>
        <trans-unit id="768e0c1c69573fb588f61f1308a015c11468e05f" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">Title</target>
        </trans-unit>
        <trans-unit id="ee048df59e1fe3a78061c7c9271c635869379b9b" translate="yes" xml:space="preserve">
          <source>Title returns a copy of the string s with all Unicode letters that begin words mapped to their Unicode title case.</source>
          <target state="translated">Title は、単語の先頭にあるすべての Unicode 文字を、その Unicode タイトルケースにマップした文字列 s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="173f12648645a6edd8fcbab7c7ed0369c007806c" translate="yes" xml:space="preserve">
          <source>Title treats s as UTF-8-encoded bytes and returns a copy with all Unicode letters that begin words mapped to their title case.</source>
          <target state="translated">TitleはsをUTF-8でエンコードされたバイトとして扱い、単語の先頭にあるすべてのUnicode文字をタイトルケースにマッピングしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="ae79ea1e9c6391a9ed83a2e18a031b835feec0c9" translate="yes" xml:space="preserve">
          <source>To</source>
          <target state="translated">To</target>
        </trans-unit>
        <trans-unit id="616d61f65a9f91c650c28db92d9cb8984a1f52bd" translate="yes" xml:space="preserve">
          <source>To add equivalent profiling support to a standalone program, add code like the following to your main function:</source>
          <target state="translated">スタンドアロン・プログラムに同等のプロファイリング・サポートを追加するには、メイン関数に以下のようなコードを追加します。</target>
        </trans-unit>
        <trans-unit id="f6f5822190a6e77b3f6e2423fce4abac430f1e8d" translate="yes" xml:space="preserve">
          <source>To avoid denial of service attacks, the provided bufio.Reader should be reading from an io.LimitReader or similar Reader to bound the size of responses.</source>
          <target state="translated">サービス拒否攻撃を避けるために、提供される bufio.Reader は、応答のサイズを制限するために、io.LimitReader または同様の Reader から読み取る必要があります。</target>
        </trans-unit>
        <trans-unit id="87386ad5a06e96430212748899697cda9d7a3724" translate="yes" xml:space="preserve">
          <source>To avoid recursion in cases such as</source>
          <target state="translated">のような場合の再帰を避けるために</target>
        </trans-unit>
        <trans-unit id="a87f0fb7c131221874ae3b0c17104f44ee1c34bc" translate="yes" xml:space="preserve">
          <source>To be backwards compatible the FileHeader has both 32 and 64 bit Size fields. The 64 bit fields will always contain the correct value and for normal archives both fields will be the same. For files requiring the ZIP64 format the 32 bit fields will be 0xffffffff and the 64 bit fields must be used instead.</source>
          <target state="translated">後方互換性を持たせるために、FileHeader は 32 ビットと 64 ビットの両方のサイズフィールドを持っています。64 ビットのフィールドには常に正しい値が含まれ、通常のアーカイブでは両方のフィールドは同じになります。ZIP64 フォーマットを必要とするファイルでは、32 ビットのフィールドは 0xffffffffff になり、代わりに 64 ビットのフィールドを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="f0c9c2ba0d3b42114f628f0336b7d63f8138a666" translate="yes" xml:space="preserve">
          <source>To build a file only when using cgo, and only on Linux and OS X:</source>
          <target state="translated">cgoを使用しているときだけ、LinuxとOS Xでのみファイルをビルドすること。</target>
        </trans-unit>
        <trans-unit id="b59fa373960766ba2850aeb1bfd6ebb3acccc2d0" translate="yes" xml:space="preserve">
          <source>To build strings more efficiently, see the strings.Builder type.</source>
          <target state="translated">より効率的に文字列を構築するには、string.Builderの型を参照してください。</target>
        </trans-unit>
        <trans-unit id="65822ab438826bd3303521dc362fbdb7385f9c68" translate="yes" xml:space="preserve">
          <source>To change the destination for flag messages, call CommandLine.SetOutput.</source>
          <target state="translated">フラグ・メッセージの送信先を変更するには、CommandLine.SetOutput を呼び出します。</target>
        </trans-unit>
        <trans-unit id="697c0150c9b1eec40f18c8aa7919a2878d3bf00a" translate="yes" xml:space="preserve">
          <source>To compare two Values, compare the results of the Interface method. Using == on two Values does not compare the underlying values they represent.</source>
          <target state="translated">2つの値を比較するには、Interfaceメソッドの結果を比較します。2つの値に==を使用しても、それらが表現している基本的な値は比較されません。</target>
        </trans-unit>
        <trans-unit id="26bcf90200ee4c383ef61356b62c1cde915663a4" translate="yes" xml:space="preserve">
          <source>To complete the example above, the following code tries to find the value x in an integer slice data sorted in ascending order:</source>
          <target state="translated">上記の例を完成させるために、以下のコードは、昇順にソートされた整数スライスデータの中から値xを見つけようとします。</target>
        </trans-unit>
        <trans-unit id="48862e3dd334f932c3f29aca76cb78295d40632d" translate="yes" xml:space="preserve">
          <source>To compute the number of allocations, the function will first be run once as a warm-up. The average number of allocations over the specified number of runs will then be measured and returned.</source>
          <target state="translated">割り当て数を計算するために、この関数はまずウォームアップとして1回実行されます。その後、指定された実行回数にわたる割り当て数の平均値が測定され、返されます。</target>
        </trans-unit>
        <trans-unit id="a1b4d9690ab97f466c6d326d8c742f5be1f15108" translate="yes" xml:space="preserve">
          <source>To convert an integer number of units to a Duration, multiply:</source>
          <target state="translated">整数の単位をデュレーションに変換するには、乗算します。</target>
        </trans-unit>
        <trans-unit id="c70ea98cf5f708e17c34d681b2e9583414cbfaae" translate="yes" xml:space="preserve">
          <source>To count the number of units in a Duration, divide:</source>
          <target state="translated">デュレーションの単位数を数えるには、割り算します。</target>
        </trans-unit>
        <trans-unit id="a8a481566ee5c9f4011b251f076b7cff25d2b336" translate="yes" xml:space="preserve">
          <source>To create a new request with a context, use NewRequestWithContext. To change the context of a request (such as an incoming) you then also want to modify to send back out, use Request.Clone. Between those two uses, it's rare to need WithContext.</source>
          <target state="translated">コンテキストを持つ新しいリクエストを作成するには、NewRequestWithContextを使用します。リクエストのコンテキスト (着信など)を変更して、それを修正して送信したい場合は Request.Clone を使います。この2つの用途の間では、WithContextを必要とすることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="d1ce4e028f3adf6fe5e3e3ea8b7a3ce1d7c4cce0" translate="yes" xml:space="preserve">
          <source>To create the Pos value for a specific source offset (measured in bytes), first add the respective file to the current file set using FileSet.AddFile and then call File.Pos(offset) for that file. Given a Pos value p for a specific file set fset, the corresponding Position value is obtained by calling fset.Position(p).</source>
          <target state="translated">特定のソース・オフセット(バイト単位で測定)のPos値を作成するには、まず、FileSet.AddFileを使用してそれぞれのファイルを現在のファイル・セットに追加してから、そのファイルのFile.Pos(offset)を呼び出します。特定のファイルセット fset の Pos 値 p が与えられると、対応する Position 値は fset.Position(p)を呼び出すことで得られます。</target>
        </trans-unit>
        <trans-unit id="ffa6362a850b5571ec14ab520e75aaa3f0b772a0" translate="yes" xml:space="preserve">
          <source>To define a type, the encoder chooses an unused, positive type id and sends the pair (-type id, encoded-type) where encoded-type is the gob encoding of a wireType description, constructed from these types:</source>
          <target state="translated">タイプを定義するために、エンコーダは未使用の正のタイプidを選択し、ペア(-type id,encoded-type)を送信します。</target>
        </trans-unit>
        <trans-unit id="da43583df08c2ff7e4692ba80d3b2cf801b80a61" translate="yes" xml:space="preserve">
          <source>To define your own format, write down what the reference time would look like formatted your way; see the values of constants like ANSIC, StampMicro or Kitchen for examples. The model is to demonstrate what the reference time looks like so that the Format and Parse methods can apply the same transformation to a general time value.</source>
          <target state="translated">独自のフォーマットを定義するには、参照時間がどのように見えるかを書き留めておきます。このモデルは、FormatメソッドとParseメソッドが一般的な時間値に同じ変換を適用できるように、参照時間がどのように見えるかを示すものです。</target>
        </trans-unit>
        <trans-unit id="79806cf1eaac70011a5e985d3751306c16fa37ee" translate="yes" xml:space="preserve">
          <source>To distinguish build constraints from package documentation, a series of build constraints must be followed by a blank line.</source>
          <target state="translated">ビルド制約をパッケージドキュメントと区別するためには、一連のビルド制約の後に空白行を入れなければなりません。</target>
        </trans-unit>
        <trans-unit id="a50607887789cbea54ccb0db0c455e312a84417e" translate="yes" xml:space="preserve">
          <source>To ensure the channel is empty after a call to Stop, check the return value and drain the channel. For example, assuming the program has not received from t.C already:</source>
          <target state="translated">Stopを呼び出した後にチャネルが空になっていることを確認するには、戻り値を確認してチャネルをドレインします。例えば、プログラムが既にt.Cから受信していないと仮定します。</target>
        </trans-unit>
        <trans-unit id="dc7659d0594b1222a7c79baf65726fd2fc8fc92f" translate="yes" xml:space="preserve">
          <source>To escape a text segment, bracket it with Escape characters. For instance, the tab in this string &quot;Ignore this tab: \xff\t\xff&quot; does not terminate a cell and constitutes a single character of width one for formatting purposes.</source>
          <target state="translated">テキストセグメントをエスケープするには、エスケープ文字で括弧を付けます。例えば、この文字列のタブは、&quot;Ignore this tab.&quot;Ignore this tab:Ignore this tab:\\t\xff&quot; は、セルを終了させず、書式設定のための幅1の1文字を構成しています。</target>
        </trans-unit>
        <trans-unit id="a3866d2c65d6d17db1dce0e7ab464336a1186960" translate="yes" xml:space="preserve">
          <source>To force integer division of Int operands, use op == token.QUO_ASSIGN instead of token.QUO; the result is guaranteed to be Int in this case. Division by zero leads to a run-time panic.</source>
          <target state="translated">Intオペランドの整数除算を強制するには、token.QUOの代わりにop ==token.QUO_ASSIGNを使用します。この場合、結果はIntであることが保証されます。</target>
        </trans-unit>
        <trans-unit id="93f96dd1110bc83e45c261305087ab59ccdab5c6" translate="yes" xml:space="preserve">
          <source>To generate HTML output, see package html/template, which has the same interface as this package but automatically secures HTML output against certain attacks.</source>
          <target state="translated">HTML 出力を生成するには、パッケージ html/template を参照してください。このパッケージは、このパッケージと同じインターフェイスを持っていますが、特定の攻撃に対して HTML 出力を自動的に保護します。</target>
        </trans-unit>
        <trans-unit id="0f37e1016d8b746740d606c5f03bd61a370f62be" translate="yes" xml:space="preserve">
          <source>To generate a client HTTP request instead of a server request, see the NewRequest function in the net/http package.</source>
          <target state="translated">サーバリクエストの代わりにクライアントHTTPリクエストを生成するには、 net/httpパッケージのNewRequest関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="06a96f64d7d0f413489f0372ff0c9c5459591c5b" translate="yes" xml:space="preserve">
          <source>To include every allocated block in the profile, set MemProfileRate to 1. To turn off profiling entirely, set MemProfileRate to 0.</source>
          <target state="translated">割り当てられたすべてのブロックをプロファイルに含めるには、MemProfileRate を 1 に設定します。 プロファイルを完全にオフにするには、MemProfileRate を 0 に設定します。</target>
        </trans-unit>
        <trans-unit id="1cf82e7adf1a06dc5b4204dd8949c669c22a6ce1" translate="yes" xml:space="preserve">
          <source>To include every blocking event in the profile, pass rate = 1. To turn off profiling entirely, pass rate &amp;lt;= 0.</source>
          <target state="translated">すべてのブロッキングイベントをプロファイルに含めるには、合格率= 1です。プロファイリングを完全にオフにするには、合格率&amp;lt;= 0です。</target>
        </trans-unit>
        <trans-unit id="5634feb2ac7b66d9d403fa3ba44d3dd35de4aafa" translate="yes" xml:space="preserve">
          <source>To insert a literal $ in the output, use $$ in the template.</source>
          <target state="translated">出力にリテラル$を挿入するには、テンプレートで$$を使用します。</target>
        </trans-unit>
        <trans-unit id="fc7c25c25b23cfac629203b1f680a734ada8bcd7" translate="yes" xml:space="preserve">
          <source>To iterate over a list (where l is a *List):</source>
          <target state="translated">リストを反復処理します (ここで l は *List)。</target>
        </trans-unit>
        <trans-unit id="04464b93c140cce60515e90ab741d559641a3b86" translate="yes" xml:space="preserve">
          <source>To keep a file from being considered for the build:</source>
          <target state="translated">ビルドのためにファイルが考慮されないようにする。</target>
        </trans-unit>
        <trans-unit id="b8dd565d2e14c4949f658d07fd948bd6982afd99" translate="yes" xml:space="preserve">
          <source>To make a request with custom headers, use NewRequest and Client.Do.</source>
          <target state="translated">カスタムヘッダーでリクエストを作成するには、NewRequest と Client.Do を使用します。</target>
        </trans-unit>
        <trans-unit id="5032a2d57ff9e66d730ea600879b156b0a5e02a1" translate="yes" xml:space="preserve">
          <source>To make a request with custom headers, use NewRequest and DefaultClient.Do.</source>
          <target state="translated">カスタムヘッダーでリクエストを作成するには、NewRequestとDefaultClient.Doを使用します。</target>
        </trans-unit>
        <trans-unit id="706ee8ff1d514d4082de19c46038d881341df0b9" translate="yes" xml:space="preserve">
          <source>To maps the rune to the specified case: UpperCase, LowerCase, or TitleCase.</source>
          <target state="translated">ルーンを指定したケースにマップする。UpperCase,LowerCase,TitleCaseのいずれかを指定します。</target>
        </trans-unit>
        <trans-unit id="16db8fa630b8ed6e5e098c9ecc986852e23449ff" translate="yes" xml:space="preserve">
          <source>To prevent duplicate operations, ErrBadConn should NOT be returned if there's a possibility that the database server might have performed the operation. Even if the server sends back an error, you shouldn't return ErrBadConn.</source>
          <target state="translated">重複操作を防ぐために、データベースサーバが操作を行った可能性がある場合はErrBadConnを返すべきではありません。サーバがエラーを返してきた場合でも、ErrBadConnを返すべきではありません。</target>
        </trans-unit>
        <trans-unit id="367a95ef6b89677c6010e99bfe83911bb6aa0ff5" translate="yes" xml:space="preserve">
          <source>To remove a prefix, use TrimPrefix instead.</source>
          <target state="translated">プレフィックスを削除するには、代わりにTrimPrefixを使用します。</target>
        </trans-unit>
        <trans-unit id="651b4bc851ab5004fd129e9e0ff7675d7d666cef" translate="yes" xml:space="preserve">
          <source>To remove a suffix, use TrimSuffix instead.</source>
          <target state="translated">サフィックスを削除するには、代わりにTrimSuffixを使用します。</target>
        </trans-unit>
        <trans-unit id="c83bbc4183fb8f4e0540869ebe8099226ccd8816" translate="yes" xml:space="preserve">
          <source>To set custom headers, use NewRequest and Client.Do.</source>
          <target state="translated">カスタムヘッダーを設定するには、NewRequest と Client.Do を使用します。</target>
        </trans-unit>
        <trans-unit id="71135b9f4481c76b2f670b0d39a1f656b3961a0f" translate="yes" xml:space="preserve">
          <source>To set custom headers, use NewRequest and DefaultClient.Do.</source>
          <target state="translated">カスタムヘッダを設定するには、NewRequestとDefaultClient.Doを使用します。</target>
        </trans-unit>
        <trans-unit id="83002d8cdc0fe4d874cff59ee6e149e3669f91df" translate="yes" xml:space="preserve">
          <source>To translate these PCs into symbolic information such as function names and line numbers, use CallersFrames. CallersFrames accounts for inlined functions and adjusts the return program counters into call program counters. Iterating over the returned slice of PCs directly is discouraged, as is using FuncForPC on any of the returned PCs, since these cannot account for inlining or return program counter adjustment. go:noinline</source>
          <target state="translated">これらのPCを関数名や回線番号などの記号情報に変換するには、CallersFramesを使用します。CallersFrames はインライン関数を考慮し、戻り値のプログラム・カウンタを呼び出しプログラム・カウンタに調整します。返された PC のスライスを直接繰り返し処理することはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="3b553336a2ed0371927e0210cc490999d6f454c6" translate="yes" xml:space="preserve">
          <source>To turn off profiling entirely, pass rate 0. To just read the current rate, pass rate &amp;lt; 0. (For n&amp;gt;1 the details of sampling may change.)</source>
          <target state="translated">プロファイリングを完全にオフにするには、レート0を渡します。現在のレートを読み取るだけの場合は、レート&amp;lt;0を渡します（n&amp;gt; 1の場合、サンプリングの詳細が変わる場合があります）。</target>
        </trans-unit>
        <trans-unit id="ec0c40fcb609291204c17f8d3e9e4a0cf0fb716d" translate="yes" xml:space="preserve">
          <source>To unmarshal JSON into a pointer, Unmarshal first handles the case of the JSON being the JSON literal null. In that case, Unmarshal sets the pointer to nil. Otherwise, Unmarshal unmarshals the JSON into the value pointed at by the pointer. If the pointer is nil, Unmarshal allocates a new value for it to point to.</source>
          <target state="translated">JSON をポインタにアンマーシャルするには、まず Unmarshal は JSON が JSON リテラル null の場合を処理します。この場合、Unmarshal はポインタを nil に設定します。そうでなければ、Unmarshal は JSON をポインタが指す値にアンマーシャルします。ポインタが nil の場合、Unmarshal はポインタが指す値に新しい値を割り当てます。</target>
        </trans-unit>
        <trans-unit id="9ec7dbd6621b41728144a0cd3fc2c36f64948e68" translate="yes" xml:space="preserve">
          <source>To unmarshal JSON into a struct, Unmarshal matches incoming object keys to the keys used by Marshal (either the struct field name or its tag), preferring an exact match but also accepting a case-insensitive match. By default, object keys which don't have a corresponding struct field are ignored (see Decoder.DisallowUnknownFields for an alternative).</source>
          <target state="translated">JSON を構造体にアンマーシャリングする場合、Unmarshal は受信したオブジェクトキーを Marshal が使用するキー (構造体フィールド名またはそのタグ)にマッチさせます。デフォルトでは、対応する構造体フィールドを持たないオブジェクトキーは無視されます (代替手段として Decoder.DisallowUnknownFields を参照してください)。</target>
        </trans-unit>
        <trans-unit id="a6bdbb20d4135a3bc4596a68aa8c2c34912d504d" translate="yes" xml:space="preserve">
          <source>To unmarshal JSON into a value implementing the Unmarshaler interface, Unmarshal calls that value's UnmarshalJSON method, including when the input is a JSON null. Otherwise, if the value implements encoding.TextUnmarshaler and the input is a JSON quoted string, Unmarshal calls that value's UnmarshalText method with the unquoted form of the string.</source>
          <target state="translated">JSONをUnmarshalerインターフェイスを実装した値にアンマーシャリングするには、入力がJSON NULLの場合も含めて、Unmarshalはその値のUnmarshalJSONメソッドを呼び出します。そうでない場合、値が encoding.TextUnmarshaler を実装していて、入力が引用符で囲まれた JSON 文字列の場合、Unmarshal はその値の UnmarshalText メソッドを引用符で囲まれていない形式の文字列で呼び出します。</target>
        </trans-unit>
        <trans-unit id="c66b5ce0cf55557d8e9fd777ec15355bade4e117" translate="yes" xml:space="preserve">
          <source>To unmarshal JSON into an interface value, Unmarshal stores one of these in the interface value:</source>
          <target state="translated">JSONをインターフェイス値にアンマーシャルするには、アンマーシャルはインターフェイス値にこれらのうちの1つを格納します。</target>
        </trans-unit>
        <trans-unit id="94c1b420cdca6fe4940f209d9a41f19875bfb4e7" translate="yes" xml:space="preserve">
          <source>To unmarshal a JSON array into a Go array, Unmarshal decodes JSON array elements into corresponding Go array elements. If the Go array is smaller than the JSON array, the additional JSON array elements are discarded. If the JSON array is smaller than the Go array, the additional Go array elements are set to zero values.</source>
          <target state="translated">JSON 配列を Go 配列に復元するには、Unmarshal は JSON 配列の要素を対応する Go 配列の要素にデコードします。Go 配列が JSON 配列よりも小さい場合、追加の JSON 配列要素は破棄されます。JSON 配列が Go 配列よりも小さい場合、追加の Go 配列要素はゼロ値に設定されます。</target>
        </trans-unit>
        <trans-unit id="ed4bdd964a47161b70a00bdaa7dc00eb114dff57" translate="yes" xml:space="preserve">
          <source>To unmarshal a JSON array into a slice, Unmarshal resets the slice length to zero and then appends each element to the slice. As a special case, to unmarshal an empty JSON array into a slice, Unmarshal replaces the slice with a new empty slice.</source>
          <target state="translated">JSON 配列をスライスにアンマーシャルするには、Unmarshal はスライスの長さをゼロにリセットしてから、各要素をスライスに追加します。特殊なケースとして、空の JSON 配列をスライスにアンマーシャルするには、Unmarshal はスライスを新しい空のスライスに置き換えます。</target>
        </trans-unit>
        <trans-unit id="007b32960f68d5d51b318bb76ca9ea0286f4126d" translate="yes" xml:space="preserve">
          <source>To unmarshal a JSON object into a map, Unmarshal first establishes a map to use. If the map is nil, Unmarshal allocates a new map. Otherwise Unmarshal reuses the existing map, keeping existing entries. Unmarshal then stores key-value pairs from the JSON object into the map. The map's key type must either be a string, an integer, or implement encoding.TextUnmarshaler.</source>
          <target state="translated">JSON オブジェクトをマップに復元するには、Unmarshal は最初に使用するマップを確立します。マップが nil の場合、Unmarshal は新しいマップを割り当てます。そうでない場合、Unmarshal は既存のマップを再利用し、既存のエントリを保持します。次に、Unmarshal は、JSON オブジェクトからマップにキーと値のペアを格納します。マップのキー型は、文字列、整数、または encoding.TextUnmarshaler を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="b87bf4d25ca4624c96c72d4062afc898f384fa73" translate="yes" xml:space="preserve">
          <source>To use a Pipeline p to manage multiple clients on a connection, each client should run:</source>
          <target state="translated">パイプラインpを使用して接続上の複数のクライアントを管理するには、各クライアントが実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="800eefdd201759f89cf9257524a524d86be67a56" translate="yes" xml:space="preserve">
          <source>To use an existing prepared statement on this transaction, see Tx.Stmt.</source>
          <target state="translated">このトランザクションで既存の準備されたステートメントを使用するには、Tx.Stmt.</target>
        </trans-unit>
        <trans-unit id="0c3bf1a32c9b769f727db4118e0b83ca4bb4efa4" translate="yes" xml:space="preserve">
          <source>To use gobs, create an Encoder and present it with a series of data items as values or addresses that can be dereferenced to values. The Encoder makes sure all type information is sent before it is needed. At the receive side, a Decoder retrieves values from the encoded stream and unpacks them into local variables.</source>
          <target state="translated">gobを使用するには、エンコーダを作成して、一連のデータ項目を値または値に参照できるアドレスとして提示します。エンコーダーは、すべての型情報が必要になる前に送信されることを確認します。受信側では、デコーダがエンコードされたストリームから値を取得し、ローカル変数に展開します。</target>
        </trans-unit>
        <trans-unit id="8212c55a0bf9e12d2e296b39237ee5f72cae9d11" translate="yes" xml:space="preserve">
          <source>To use pprof, link this package into your program:</source>
          <target state="translated">pprof を使用するには、このパッケージをプログラムにリンクしてください。</target>
        </trans-unit>
        <trans-unit id="5c29e8288fd1ed9e073fe203fb55fbea12d062de" translate="yes" xml:space="preserve">
          <source>To use the operating system's file system implementation, use http.Dir:</source>
          <target state="translated">オペレーティングシステムのファイルシステムの実装を使用するには、http.Dirを使用します。</target>
        </trans-unit>
        <trans-unit id="467272919dc8f37262b26b52d65afd618589f7ff" translate="yes" xml:space="preserve">
          <source>To view all available profiles, open &lt;a href=&quot;http://localhost:6060/debug/pprof/&quot;&gt;http://localhost:6060/debug/pprof/&lt;/a&gt; in your browser.</source>
          <target state="translated">利用可能なすべてのプロファイルを表示するには、ブラウザーで&lt;a href=&quot;http://localhost:6060/debug/pprof/&quot;&gt;http：// localhost：6060 / debug / pprof /&lt;/a&gt;を開きます。</target>
        </trans-unit>
        <trans-unit id="f1229c7d06cb687b015bf9729398a1b9b76a455a" translate="yes" xml:space="preserve">
          <source>To write a new test suite, create a file whose name ends _test.go that contains the TestXxx functions as described here. Put the file in the same package as the one being tested. The file will be excluded from regular package builds but will be included when the &amp;ldquo;go test&amp;rdquo; command is run. For more detail, run &amp;ldquo;go help test&amp;rdquo; and &amp;ldquo;go help testflag&amp;rdquo;.</source>
          <target state="translated">新しいテストスイートを作成するには、ここで説明するTestXxx関数を含む、名前が_test.goで終わるファイルを作成します。テストするパッケージと同じパッケージにファイルを置きます。ファイルは通常のパッケージビルドから除外されますが、「go test」コマンドを実行すると含まれます。詳細については、「go help test」と「go help testflag」を実行してください。</target>
        </trans-unit>
        <trans-unit id="2392dbedc5657df0a5a8c5b158593f759c811858" translate="yes" xml:space="preserve">
          <source>To16 converts the IP address ip to a 16-byte representation. If ip is not an IP address (it is the wrong length), To16 returns nil.</source>
          <target state="translated">To16 は IP アドレス ip を 16 バイト表現に変換します。ipがIPアドレスではない場合(長さが間違っている場合)、To16はnilを返します。</target>
        </trans-unit>
        <trans-unit id="4294dda7ebb07f9702b0ce5cc1cb8bbf6e004822" translate="yes" xml:space="preserve">
          <source>To4 converts the IPv4 address ip to a 4-byte representation. If ip is not an IPv4 address, To4 returns nil.</source>
          <target state="translated">To4は、IPv4アドレスのipを4バイト表現に変換する。ipがIPv4アドレスでない場合、To4はnilを返す。</target>
        </trans-unit>
        <trans-unit id="7deadbf704990f79d3e4df9686f8846e15431131" translate="yes" xml:space="preserve">
          <source>ToComplex converts x to a Complex value if x is representable as a Complex. Otherwise it returns an Unknown.</source>
          <target state="translated">ToComplexは、xが複素数として表現可能な場合、xを複素数値に変換します。それ以外の場合は不明を返します。</target>
        </trans-unit>
        <trans-unit id="95e3b1fabb27004c6322f401e410b77c8beecafb" translate="yes" xml:space="preserve">
          <source>ToFloat converts x to a Float value if x is representable as a Float. Otherwise it returns an Unknown.</source>
          <target state="translated">ToFloatは、xがFloatとして表現可能な場合、xをFloatに変換します。それ以外の場合は不明を返します。</target>
        </trans-unit>
        <trans-unit id="f5e30e0ab3c38971ff0a23a0823ee7ab2da27587" translate="yes" xml:space="preserve">
          <source>ToHTML converts comment text to formatted HTML. The comment was prepared by DocReader, so it is known not to have leading, trailing blank lines nor to have trailing spaces at the end of lines. The comment markers have already been removed.</source>
          <target state="translated">ToHTMLはコメントのテキストをフォーマットされたHTMLに変換します。コメントはDocReaderで作成されたものなので、先頭に空白行や末尾に空白がないこと、行末に空白がないことがわかっています。コメントマーカーはすでに削除されています。</target>
        </trans-unit>
        <trans-unit id="2f4af6e587a0b093dcea21d741f457946dac2539" translate="yes" xml:space="preserve">
          <source>ToInt converts x to an Int value if x is representable as an Int. Otherwise it returns an Unknown.</source>
          <target state="translated">ToIntは、xがIntとして表現可能な場合、xをInt値に変換します。それ以外の場合は不明を返します。</target>
        </trans-unit>
        <trans-unit id="2458b21542ecbc0f90f413b7ee46521686d711b0" translate="yes" xml:space="preserve">
          <source>ToLower</source>
          <target state="translated">ToLower</target>
        </trans-unit>
        <trans-unit id="6fec192e916332e15759b9ef1699226d11bdd209" translate="yes" xml:space="preserve">
          <source>ToLower maps the rune to lower case giving priority to the special mapping.</source>
          <target state="translated">ToLowerは特別なマッピングを優先してルーンを小文字にマッピングします。</target>
        </trans-unit>
        <trans-unit id="0d0c9cd1331838718de8a67a4fe3f8edaf0bf598" translate="yes" xml:space="preserve">
          <source>ToLower maps the rune to lower case.</source>
          <target state="translated">ToLowerはルーンを小文字にマップします。</target>
        </trans-unit>
        <trans-unit id="0ad2eff81c68ba7feeec4169aa737e669765ecb3" translate="yes" xml:space="preserve">
          <source>ToLower returns a copy of the byte slice s with all Unicode letters mapped to their lower case.</source>
          <target state="translated">ToLower は、すべての Unicode 文字が小文字にマップされたバイトスライス s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="9ce8fb31583c9a3f9db4dda94a7dc14fcb01df77" translate="yes" xml:space="preserve">
          <source>ToLower returns s with all Unicode letters mapped to their lower case.</source>
          <target state="translated">ToLower は、すべての Unicode 文字が小文字にマップされた s を返します。</target>
        </trans-unit>
        <trans-unit id="7c6c5994143b17fa29690098b9cf21d8ab0c9626" translate="yes" xml:space="preserve">
          <source>ToLowerSpecial</source>
          <target state="translated">ToLowerSpecial</target>
        </trans-unit>
        <trans-unit id="a0c9710a46fb772958369a0897c7471714aeeeb8" translate="yes" xml:space="preserve">
          <source>ToLowerSpecial returns a copy of the string s with all Unicode letters mapped to their lower case using the case mapping specified by c.</source>
          <target state="translated">ToLowerSpecial は、c で指定した大文字小文字のマッピングを使用して、すべての Unicode 文字を小文字にマッピングした文字列 s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="cb046f134facad4d83f3df18153937dc0992ea81" translate="yes" xml:space="preserve">
          <source>ToLowerSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their lower case, giving priority to the special casing rules.</source>
          <target state="translated">ToLowerSpecialは、sをUTF-8でエンコードされたバイトとして扱い、特殊なケーシングルールを優先して、すべてのUnicode文字を小文字にマップしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="2915308ca78a335773afea42473f5f868e85f100" translate="yes" xml:space="preserve">
          <source>ToSlash returns the result of replacing each separator character in path with a slash ('/') character. Multiple separators are replaced by multiple slashes.</source>
          <target state="translated">ToSlashは、パス内の各セパレータ文字をスラッシュ('/')文字に置き換えた結果を返します。複数のセパレータは複数のスラッシュに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="ce9610dd835f1269c70383a5f4c28b5a0b063015" translate="yes" xml:space="preserve">
          <source>ToText prepares comment text for presentation in textual output. It wraps paragraphs of text to width or fewer Unicode code points and then prefixes each line with the indent. In preformatted sections (such as program text), it prefixes each non-blank line with preIndent.</source>
          <target state="translated">ToText は、テキスト出力での表示用にコメントテキストを準備します。それは、テキストの段落を幅以下の Unicode コードポイントに折り返し、各行の先頭にインデントを付けます。予めフォーマットされたセクション(プログラムテキストなど)では、空白ではない各行の先頭に preIndent を付けます。</target>
        </trans-unit>
        <trans-unit id="687882b6dd58f630b4dc72d2b748bc2e5e517506" translate="yes" xml:space="preserve">
          <source>ToTitle</source>
          <target state="translated">ToTitle</target>
        </trans-unit>
        <trans-unit id="16626ca02836f3e96b71ac083f67d856672bee6a" translate="yes" xml:space="preserve">
          <source>ToTitle maps the rune to title case giving priority to the special mapping.</source>
          <target state="translated">ToTitleは特別なマッピングを優先してルーンをタイトルケースにマッピングします。</target>
        </trans-unit>
        <trans-unit id="82652cb33ebff96d0745bbb70b7b14b2b4f648b7" translate="yes" xml:space="preserve">
          <source>ToTitle maps the rune to title case.</source>
          <target state="translated">ToTitleはルーンをタイトルケースにマッピングします。</target>
        </trans-unit>
        <trans-unit id="b6339ce57388ab9579ed7dea7397386892cd79b3" translate="yes" xml:space="preserve">
          <source>ToTitle returns a copy of the string s with all Unicode letters mapped to their Unicode title case.</source>
          <target state="translated">ToTitleは、文字列sのコピーを、すべてのUnicode文字がそのUnicodeタイトルケースにマップされた状態で返します。</target>
        </trans-unit>
        <trans-unit id="7c8bdbfdcd905744bd6bd92b5f2c2fe7b0b2a605" translate="yes" xml:space="preserve">
          <source>ToTitle treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their title case.</source>
          <target state="translated">ToTitleはsをUTF-8でエンコードされたバイトとして扱い、すべてのUnicode文字をタイトルケースにマッピングしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="a7e031c3da9f939af57fa1eda658027190b07385" translate="yes" xml:space="preserve">
          <source>ToTitleSpecial</source>
          <target state="translated">ToTitleSpecial</target>
        </trans-unit>
        <trans-unit id="6c2252d5e081e10993ad66199a6ce0f9c88000da" translate="yes" xml:space="preserve">
          <source>ToTitleSpecial returns a copy of the string s with all Unicode letters mapped to their Unicode title case, giving priority to the special casing rules.</source>
          <target state="translated">ToTitleSpecial は、すべての Unicode 文字がその Unicode タイトルケースにマップされた文字列 s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="03ad764cc2cf6e71773b140dd2607d85f903d19e" translate="yes" xml:space="preserve">
          <source>ToTitleSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their title case, giving priority to the special casing rules.</source>
          <target state="translated">ToTitleSpecial は s を UTF-8 エンコードされたバイトとして扱い、特殊なケーシングルールを優先して、すべての Unicode 文字をタイトルケースにマップしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="0c72db5394ee29e5b12a191ab1a0f08579c43c0b" translate="yes" xml:space="preserve">
          <source>ToUpper</source>
          <target state="translated">ToUpper</target>
        </trans-unit>
        <trans-unit id="8830c3933f2751182fd45204e5ac41041c190ab0" translate="yes" xml:space="preserve">
          <source>ToUpper maps the rune to upper case giving priority to the special mapping.</source>
          <target state="translated">ToUpperは、特別なマッピングを優先してルーンを大文字にマッピングします。</target>
        </trans-unit>
        <trans-unit id="9762b6a1a0f8f68d12efc0853373d81b1198caf9" translate="yes" xml:space="preserve">
          <source>ToUpper maps the rune to upper case.</source>
          <target state="translated">ToUpperはルーンを大文字にマッピングします。</target>
        </trans-unit>
        <trans-unit id="587e23bede12f256b7a2b187d202dc77575c043c" translate="yes" xml:space="preserve">
          <source>ToUpper returns a copy of the byte slice s with all Unicode letters mapped to their upper case.</source>
          <target state="translated">ToUpper は、すべての Unicode 文字が大文字にマップされたバイトスライス s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="1567cbaa93e2803c0387b5e052b94febf77b0dce" translate="yes" xml:space="preserve">
          <source>ToUpper returns s with all Unicode letters mapped to their upper case.</source>
          <target state="translated">ToUpper は、すべての Unicode 文字が大文字にマップされた s を返します。</target>
        </trans-unit>
        <trans-unit id="e8e18cf71c085c852139f777c3a777629eaba1d4" translate="yes" xml:space="preserve">
          <source>ToUpperSpecial</source>
          <target state="translated">ToUpperSpecial</target>
        </trans-unit>
        <trans-unit id="ca298ca7f1f797ffc04335283b821c4509371407" translate="yes" xml:space="preserve">
          <source>ToUpperSpecial returns a copy of the string s with all Unicode letters mapped to their upper case using the case mapping specified by c.</source>
          <target state="translated">ToUpperSpecial は、c で指定した大文字と小文字のマッピングを使用して、すべての Unicode 文字を大文字にマッピングした文字列 s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="e092426a213e149b750e5c739fd48245f35d6f1d" translate="yes" xml:space="preserve">
          <source>ToUpperSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their upper case, giving priority to the special casing rules.</source>
          <target state="translated">ToUpperSpecial は s を UTF-8 でエンコードされたバイトとして扱い、特殊なケーシングルールを優先して、すべての Unicode 文字を大文字にマップしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="2918f3c11590ab69ac359dd26f3078e378d4433f" translate="yes" xml:space="preserve">
          <source>ToValidUTF8 returns a copy of the string s with each run of invalid UTF-8 byte sequences replaced by the replacement string, which may be empty.</source>
          <target state="translated">ToValidUTF8は、無効なUTF-8バイト列の各実行が置換文字列で置き換えられた文字列sのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="8ddb5599f330dcf8a14e657f65440d11567b1275" translate="yes" xml:space="preserve">
          <source>ToValidUTF8 treats s as UTF-8-encoded bytes and returns a copy with each run of bytes representing invalid UTF-8 replaced with the bytes in replacement, which may be empty.</source>
          <target state="translated">ToValidUTF8は、sをUTF-8でエンコードされたバイトとして扱い、無効なUTF-8を表すバイトの各実行が置換バイトで置き換えられたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="0e6e43d719b59d2f4b6d64b0d7506414e902ac66" translate="yes" xml:space="preserve">
          <source>Token expands self-closing elements such as &amp;lt;br/&amp;gt; into separate start and end elements returned by successive calls.</source>
          <target state="translated">トークンは、&amp;lt;br/&amp;gt;などの自己終了要素を、連続した呼び出しによって返される個別の開始要素と終了要素に展開します。</target>
        </trans-unit>
        <trans-unit id="76c580b187cf47d391aca0669ed50d6bdc842bd1" translate="yes" xml:space="preserve">
          <source>Token guarantees that the StartElement and EndElement tokens it returns are properly nested and matched: if Token encounters an unexpected end element or EOF before all expected end elements, it will return an error.</source>
          <target state="translated">Tokenは、それが返すStartElementとEndElementトークンが適切に入れ子になって一致していることを保証します。</target>
        </trans-unit>
        <trans-unit id="20226a10555b22d829b042743665e60ca5ccfcef" translate="yes" xml:space="preserve">
          <source>Token guarantees that the delimiters [ ] { } it returns are properly nested and matched: if Token encounters an unexpected delimiter in the input, it will return an error.</source>
          <target state="translated">Token は、それが返すデリミタ[]{}が適切にネストされ、マッチしていることを保証します。</target>
        </trans-unit>
        <trans-unit id="d280a9431f5d23758a555c6128dd19caf82e90f5" translate="yes" xml:space="preserve">
          <source>Token implements XML name spaces as described by &lt;a href=&quot;https://www.w3.org/TR/REC-xml-names/&quot;&gt;https://www.w3.org/TR/REC-xml-names/&lt;/a&gt;. Each of the Name structures contained in the Token has the Space set to the URL identifying its name space when known. If Token encounters an unrecognized name space prefix, it uses the prefix as the Space rather than report an error.</source>
          <target state="translated">トークンは、&lt;a href=&quot;https://www.w3.org/TR/REC-xml-names/&quot;&gt;https：//www.w3.org/TR/REC-xml-names/で&lt;/a&gt;説明されているようにXML名前空間を実装します。トークンに含まれる各名前構造には、既知の場合にその名前空間を識別するURLに設定されたスペースがあります。トークンは、認識されない名前空間プレフィックスを検出した場合、エラーを報告するのではなく、プレフィックスをスペースとして使用します。</target>
        </trans-unit>
        <trans-unit id="3daac00da8a20a3986aa0fc3ba367725df5511ad" translate="yes" xml:space="preserve">
          <source>Token is the set of lexical tokens of the Go programming language.</source>
          <target state="translated">トークンは、Goプログラミング言語の語彙トークンの集合です。</target>
        </trans-unit>
        <trans-unit id="347b518b7ad14bbb5cbe2525a0e1cce83a18759e" translate="yes" xml:space="preserve">
          <source>Token returns the next JSON token in the input stream. At the end of the input stream, Token returns nil, io.EOF.</source>
          <target state="translated">Tokenは入力ストリームの次のJSONトークンを返します。入力ストリームの最後には、Tokenはnil、io.EOFを返します。</target>
        </trans-unit>
        <trans-unit id="fb460c5b7cbda3e107ef11644b412428d80a074a" translate="yes" xml:space="preserve">
          <source>Token returns the next XML token in the input stream. At the end of the input stream, Token returns nil, io.EOF.</source>
          <target state="translated">Tokenは入力ストリームの次のXMLトークンを返します。入力ストリームの最後には、Tokenはnil、io.EOFを返します。</target>
        </trans-unit>
        <trans-unit id="1f5c5f661288844b6f2ecd574998016319ee9039" translate="yes" xml:space="preserve">
          <source>TokenString returns a printable string for a token or Unicode character.</source>
          <target state="translated">TokenString は、トークンまたは Unicode 文字の印刷可能な文字列を返します。</target>
        </trans-unit>
        <trans-unit id="1a94c716310bd537564c947b302962f8f4ba3d71" translate="yes" xml:space="preserve">
          <source>TokenText returns the string corresponding to the most recently scanned token. Valid after calling Scan and in calls of Scanner.Error.</source>
          <target state="translated">TokenText は、最近スキャンされたトークンに対応する文字列を返します。Scan を呼び出した後、および Scanner.Error.</target>
        </trans-unit>
        <trans-unit id="a7a728d87ab600f19a872de7d10dd426fc51a410" translate="yes" xml:space="preserve">
          <source>ToolDir is the directory containing build tools.</source>
          <target state="translated">ToolDirはビルドツールが入っているディレクトリです。</target>
        </trans-unit>
        <trans-unit id="84f632ebde53766b4762c1e662046a0bdb1f9bee" translate="yes" xml:space="preserve">
          <source>Trace responds with the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified. The package initialization registers it as /debug/pprof/trace.</source>
          <target state="translated">トレースは、バイナリ形式の実行トレースで応答します。トレースは秒単位で指定された時間だけ持続します。パッケージの初期化では /debug/pprof/trace として登録されます。</target>
        </trans-unit>
        <trans-unit id="37fcf61c233a1ae946b84a69b2de57281c31900c" translate="yes" xml:space="preserve">
          <source>Tracing runtime activities</source>
          <target state="translated">ランタイムアクティビティのトレース</target>
        </trans-unit>
        <trans-unit id="bf930f74e883c038922957814259a08b1e5e21b8" translate="yes" xml:space="preserve">
          <source>TrailerPrefix is a magic prefix for ResponseWriter.Header map keys that, if present, signals that the map entry is actually for the response trailers, and not the response headers. The prefix is stripped after the ServeHTTP call finishes and the values are sent in the trailers.</source>
          <target state="translated">TrailerPrefix は、ResponseWriter.Header マップ・キーの魔法の接頭辞で、これが存在する場合は、マップ・エントリが実際にはレスポンス・トレーラのためのものであり、 レスポンス・ヘッダのためのものではないことを示します。このプレフィックスは、ServeHTTP 呼び出しが終了し、値がトレーラで送信された後に取り除かれます。</target>
        </trans-unit>
        <trans-unit id="d08af63de6fd07c70bf3724749899391ccd80f36" translate="yes" xml:space="preserve">
          <source>TrailingZeroBits returns the number of consecutive least significant zero bits of |x|.</source>
          <target state="translated">TrailingZeroBitsは、|x|の連続した最下位ゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="173da913d8c53620762557efaa7f685234fe0888" translate="yes" xml:space="preserve">
          <source>TrailingZeros returns the number of trailing zero bits in x; the result is UintSize for x == 0.</source>
          <target state="translated">TrailingZerosは、xの末尾にあるゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="3880be13b458ed7d8fd6226152f09a84df60affe" translate="yes" xml:space="preserve">
          <source>TrailingZeros16</source>
          <target state="translated">TrailingZeros16</target>
        </trans-unit>
        <trans-unit id="ac0e8b17c92ec54246a916c7c60a5898e47d2440" translate="yes" xml:space="preserve">
          <source>TrailingZeros16 returns the number of trailing zero bits in x; the result is 16 for x == 0.</source>
          <target state="translated">TrailingZeros16 は、x の末尾にあるゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="9ccb48d1009c49f2458e70054ffb06de2c2e52b1" translate="yes" xml:space="preserve">
          <source>TrailingZeros32</source>
          <target state="translated">TrailingZeros32</target>
        </trans-unit>
        <trans-unit id="ef12b2bd72258ab1ea24487faaf1b36b6624d53b" translate="yes" xml:space="preserve">
          <source>TrailingZeros32 returns the number of trailing zero bits in x; the result is 32 for x == 0.</source>
          <target state="translated">TrailingZeros32 は、x の末尾のゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="8645dda5fc4ccfbadfe816f019759dd903a6b384" translate="yes" xml:space="preserve">
          <source>TrailingZeros64</source>
          <target state="translated">TrailingZeros64</target>
        </trans-unit>
        <trans-unit id="9c1806ac56295eeda1305a5c016e361813241700" translate="yes" xml:space="preserve">
          <source>TrailingZeros64 returns the number of trailing zero bits in x; the result is 64 for x == 0.</source>
          <target state="translated">TrailingZeros64 は、x の末尾のゼロビット数を返します。</target>
        </trans-unit>
        <trans-unit id="56b19e298a41e007826d31fb347a4fad087efb44" translate="yes" xml:space="preserve">
          <source>TrailingZeros8</source>
          <target state="translated">TrailingZeros8</target>
        </trans-unit>
        <trans-unit id="a51f3a70d56ba40f5381588670a32ee940f76014" translate="yes" xml:space="preserve">
          <source>TrailingZeros8 returns the number of trailing zero bits in x; the result is 8 for x == 0.</source>
          <target state="translated">TrailingZeros8 は、x の末尾にあるゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="c46e526f87b0902843d5c82001fbd44e74d2f2d7" translate="yes" xml:space="preserve">
          <source>Transport is an implementation of RoundTripper that supports HTTP, HTTPS, and HTTP proxies (for either HTTP or HTTPS with CONNECT).</source>
          <target state="translated">トランスポートは、HTTP、HTTPS、HTTPプロキシ(CONNECTでHTTPまたはHTTPSのいずれかに対応)をサポートするRoundTripperの実装です。</target>
        </trans-unit>
        <trans-unit id="3a7dd5c9993ccdafc8353b9b9fef9d118c35957f" translate="yes" xml:space="preserve">
          <source>Transport only retries a request upon encountering a network error if the request is idempotent and either has no body or has its Request.GetBody defined. HTTP requests are considered idempotent if they have HTTP methods GET, HEAD, OPTIONS, or TRACE; or if their Header map contains an &quot;Idempotency-Key&quot; or &quot;X-Idempotency-Key&quot; entry. If the idempotency key value is an zero-length slice, the request is treated as idempotent but the header is not sent on the wire.</source>
          <target state="translated">トランスポートは、リクエストがidempotentで、ボディを持たないかRequest.GetBodyが定義されている場合にのみ、ネットワークエラーに遭遇したリクエストを再試行します。HTTPリクエストがHTTPメソッドGET、HEAD、OPTIONS、またはTRACEを持っている場合、またはそのヘッダーマップに「Idempotency-Key」または「X-Idempotency-Key」エントリが含まれている場合、HTTPリクエストはidempotentであるとみなされます。idempotency-Key の値がゼロ長のスライスである場合、リクエストは idempotent として扱われますが、ヘッダはワイヤ上では送信されません。</target>
        </trans-unit>
        <trans-unit id="a83654a5778fc158c90c291f8461263d34090fc9" translate="yes" xml:space="preserve">
          <source>Transport uses HTTP/1.1 for HTTP URLs and either HTTP/1.1 or HTTP/2 for HTTPS URLs, depending on whether the server supports HTTP/2, and how the Transport is configured. The DefaultTransport supports HTTP/2. To explicitly enable HTTP/2 on a transport, use golang.org/x/net/http2 and call ConfigureTransport. See the package docs for more about HTTP/2.</source>
          <target state="translated">トランスポートは、HTTP URL には HTTP/1.1 を使用し、HTTPS URL には HTTP/1.1 または HTTP/2 を使用します。DefaultTransport は HTTP/2 をサポートしています。トランスポートで HTTP/2 を明示的に有効にするには、golang.org/x/net/http2 を使用して ConfigureTransport を呼び出します。HTTP/2 の詳細については、パッケージのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5cba3ebebe9967d6b406fbd61cc05ffea9ddcf56" translate="yes" xml:space="preserve">
          <source>Transports should be reused instead of created as needed. Transports are safe for concurrent use by multiple goroutines.</source>
          <target state="translated">トランスポートは必要に応じて作成されるのではなく、再利用されるべきです。トランスポートは、複数のゴローチンが同時に使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="cf5547182a53dd7a581affea62258ee59e262b85" translate="yes" xml:space="preserve">
          <source>Tree is the representation of a single parsed template.</source>
          <target state="translated">ツリーは、1つの解析されたテンプレートの表現です。</target>
        </trans-unit>
        <trans-unit id="0266abd25371ad4670b041dda4dc487ed199d641" translate="yes" xml:space="preserve">
          <source>Trim</source>
          <target state="translated">Trim</target>
        </trans-unit>
        <trans-unit id="abb910d5bd0bd319cf1d5ef7ad6a5112dc6c0823" translate="yes" xml:space="preserve">
          <source>Trim returns a slice of the string s with all leading and trailing Unicode code points contained in cutset removed.</source>
          <target state="translated">Trim は、文字列 s のスライスを返し、citset に含まれるすべての先頭と末尾の Unicode コードポイントを削除します。</target>
        </trans-unit>
        <trans-unit id="4f07669cc579ec14df811b3ca5fc72fde4f78f58" translate="yes" xml:space="preserve">
          <source>Trim returns a subslice of s by slicing off all leading and trailing UTF-8-encoded code points contained in cutset.</source>
          <target state="translated">Trimは、カットセットに含まれるすべての先頭と末尾のUTF-8エンコードされたコードポイントをスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="ba1962dfeb4e006658709dd72ff841213f7d1db0" translate="yes" xml:space="preserve">
          <source>TrimBytes returns b without leading and trailing ASCII space.</source>
          <target state="translated">TrimBytes は、先頭と末尾に ASCII スペースを入れずに b を返します。</target>
        </trans-unit>
        <trans-unit id="a48987784fdcef3e797c48099ede26a7260db2de" translate="yes" xml:space="preserve">
          <source>TrimFunc</source>
          <target state="translated">TrimFunc</target>
        </trans-unit>
        <trans-unit id="03343404f4f9dd2a23fda87bf2a4805f3806059d" translate="yes" xml:space="preserve">
          <source>TrimFunc returns a slice of the string s with all leading and trailing Unicode code points c satisfying f(c) removed.</source>
          <target state="translated">TrimFunc は、f(c)を満たすすべての先頭と末尾の Unicode コード点 c を削除した文字列 s のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="625b4a484772db3f9992725f710f3d189c47d0db" translate="yes" xml:space="preserve">
          <source>TrimFunc returns a subslice of s by slicing off all leading and trailing UTF-8-encoded code points c that satisfy f(c).</source>
          <target state="translated">TrimFuncは、f(c)を満たすUTF-8エンコードされたコード点cのうち、先頭と末尾のすべてのコード点をスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="b796ff265d1cc90c9b78c76a3f12dd8cbff027a6" translate="yes" xml:space="preserve">
          <source>TrimLeft</source>
          <target state="translated">TrimLeft</target>
        </trans-unit>
        <trans-unit id="3406f99b35b8781b2e30c5d4f1fb92b18ccfb0a0" translate="yes" xml:space="preserve">
          <source>TrimLeft returns a slice of the string s with all leading Unicode code points contained in cutset removed.</source>
          <target state="translated">TrimLeft は、文字列 s のスライスを返し、カットセットに含まれるすべての先頭の Unicode コードポイントを削除します。</target>
        </trans-unit>
        <trans-unit id="b52b880dc01fa22cd46ff385a39b5609f426247b" translate="yes" xml:space="preserve">
          <source>TrimLeft returns a subslice of s by slicing off all leading UTF-8-encoded code points contained in cutset.</source>
          <target state="translated">TrimLeftは、カットセットに含まれるすべての先頭のUTF-8エンコードされたコードポイントをスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="0dda8e3188c1b3df6f3a5c77e5010dd280c96425" translate="yes" xml:space="preserve">
          <source>TrimLeftFunc</source>
          <target state="translated">TrimLeftFunc</target>
        </trans-unit>
        <trans-unit id="2a771ac81b0579d70a2a4390b741d5fed266d711" translate="yes" xml:space="preserve">
          <source>TrimLeftFunc returns a slice of the string s with all leading Unicode code points c satisfying f(c) removed.</source>
          <target state="translated">TrimLeftFunc は、f(c)を満たすすべての先頭の Unicode コード点 c を削除した文字列 s のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="49c15e330f226f8800b406f97802237df2f3f947" translate="yes" xml:space="preserve">
          <source>TrimLeftFunc treats s as UTF-8-encoded bytes and returns a subslice of s by slicing off all leading UTF-8-encoded code points c that satisfy f(c).</source>
          <target state="translated">TrimLeftFuncは、sをUTF-8エンコードされたバイトとして扱い、f(c)を満たす先頭のUTF-8エンコードされたコード点cをすべて切り取って、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="f6781400f56acf5b8bc035e02b3cdac08b09ae64" translate="yes" xml:space="preserve">
          <source>TrimPrefix</source>
          <target state="translated">TrimPrefix</target>
        </trans-unit>
        <trans-unit id="0cdb8742fe0e8f96e729ab0932195bcd75f8a8b2" translate="yes" xml:space="preserve">
          <source>TrimPrefix returns s without the provided leading prefix string. If s doesn't start with prefix, s is returned unchanged.</source>
          <target state="translated">TrimPrefix は、指定された先頭の接頭辞文字列を除いた s を返します。s が接頭辞で始まらない場合、s は変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="3a3dc250671844d052f305fc24e91daa5dfaf78b" translate="yes" xml:space="preserve">
          <source>TrimRight</source>
          <target state="translated">TrimRight</target>
        </trans-unit>
        <trans-unit id="f36ec5b5c4656d60b56116c5bdb688d629f84c86" translate="yes" xml:space="preserve">
          <source>TrimRight returns a slice of the string s, with all trailing Unicode code points contained in cutset removed.</source>
          <target state="translated">TrimRight は、文字列 s のスライスを返し、カットセットに含まれる末尾の Unicode コードポイントをすべて削除します。</target>
        </trans-unit>
        <trans-unit id="3ca08db3862d11ac280fa859c98a5062cca7758f" translate="yes" xml:space="preserve">
          <source>TrimRight returns a subslice of s by slicing off all trailing UTF-8-encoded code points that are contained in cutset.</source>
          <target state="translated">TrimRightは、カットセットに含まれるすべての末尾のUTF-8エンコードされたコードポイントをスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="2face4904f1360f377438b017515ff3c2359f581" translate="yes" xml:space="preserve">
          <source>TrimRightFunc</source>
          <target state="translated">TrimRightFunc</target>
        </trans-unit>
        <trans-unit id="91f9e348fa7e18e840cf0ac3e8dc3a6295b78762" translate="yes" xml:space="preserve">
          <source>TrimRightFunc returns a slice of the string s with all trailing Unicode code points c satisfying f(c) removed.</source>
          <target state="translated">TrimRightFunc は、f(c)を満たす末尾の Unicode コード点 c をすべて削除した文字列 s のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="af58ad241c06498d7e5d96dabf6a334e19cb450d" translate="yes" xml:space="preserve">
          <source>TrimRightFunc returns a subslice of s by slicing off all trailing UTF-8-encoded code points c that satisfy f(c).</source>
          <target state="translated">TrimRightFuncは、f(c)を満たすすべての末尾のUTF-8エンコードされたコード点cをスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="3b9759ef917cd034e3fff66af6781ac1144ddf76" translate="yes" xml:space="preserve">
          <source>TrimSpace</source>
          <target state="translated">TrimSpace</target>
        </trans-unit>
        <trans-unit id="fb7131e90264c0cc3ce43bd31575b4282b5313c8" translate="yes" xml:space="preserve">
          <source>TrimSpace returns a slice of the string s, with all leading and trailing white space removed, as defined by Unicode.</source>
          <target state="translated">TrimSpace は、Unicode で定義されているように、先頭と末尾の空白をすべて取り除き、文字列 s のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="a187e5cf0dba2afc1b0487c662e640873854f7ec" translate="yes" xml:space="preserve">
          <source>TrimSpace returns a subslice of s by slicing off all leading and trailing white space, as defined by Unicode.</source>
          <target state="translated">TrimSpaceは、Unicodeで定義されているように、先頭と末尾のホワイトスペースをすべて切り取って、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="b11fe2b91f56619862961192ca92d40d14d67c9d" translate="yes" xml:space="preserve">
          <source>TrimString returns s without leading and trailing ASCII space.</source>
          <target state="translated">TrimStringは、先頭と末尾にASCIIスペースを入れずにsを返します。</target>
        </trans-unit>
        <trans-unit id="31564f1b1fc10c6dcf98b0ba8f0d174cf833e697" translate="yes" xml:space="preserve">
          <source>TrimSuffix</source>
          <target state="translated">TrimSuffix</target>
        </trans-unit>
        <trans-unit id="92a8263afbc0fa4c5341e4098b039907219bbb45" translate="yes" xml:space="preserve">
          <source>TrimSuffix returns s without the provided trailing suffix string. If s doesn't end with suffix, s is returned unchanged.</source>
          <target state="translated">TrimSuffix は、指定された末尾のサフィックス文字列を除いた s を返します。s がサフィックスで終わっていない場合、s は変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="4ac265259166695b742658a267b27c17c43d2d87" translate="yes" xml:space="preserve">
          <source>Trunc returns the integer value of x.</source>
          <target state="translated">Truncはxの整数値を返します。</target>
        </trans-unit>
        <trans-unit id="a6f2f1d850d6a1bef2ab8b526d322b73779287f1" translate="yes" xml:space="preserve">
          <source>Truncate changes the size of the file. It does not change the I/O offset. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Truncateはファイルのサイズを変更します。I/Oオフセットは変更されません。エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="062334176014417d736c93d4f00898bc3b617151" translate="yes" xml:space="preserve">
          <source>Truncate changes the size of the named file. If the file is a symbolic link, it changes the size of the link's target. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Truncate は、指定されたファイルのサイズを変更します。ファイルがシンボリックリンクの場合、リンク先のサイズを変更します。エラーが発生した場合は、*PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="e8c4ef35e7ba4d40ba29121e1bd589ff3e80bcb3" translate="yes" xml:space="preserve">
          <source>Truncate discards all but the first n unread bytes from the buffer but continues to use the same allocated storage. It panics if n is negative or greater than the length of the buffer.</source>
          <target state="translated">Truncate は、バッファから最初の n バイトを除くすべての未読バイトを破棄しますが、同じ割り当てられたストレージを使用し続けます。n が負の値、またはバッファの長さよりも大きい場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="32beb0b08a1549453f279d1334d844a2afaea49a" translate="yes" xml:space="preserve">
          <source>Truncate operates on the time as an absolute duration since the zero time; it does not operate on the presentation form of the time. Thus, Truncate(Hour) may return a time with a non-zero minute, depending on the time's Location.</source>
          <target state="translated">Truncateは、ゼロ時刻からの絶対的な持続時間としての時刻を操作しますが、時刻の表示形式は操作しません。したがって、Truncate(Hour)は、時刻のLocationに応じて、0ではない分を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="71998d5a06a6fc24a70aad616e3e9f7ea3e57939" translate="yes" xml:space="preserve">
          <source>Truncate returns the result of rounding d toward zero to a multiple of m. If m &amp;lt;= 0, Truncate returns d unchanged.</source>
          <target state="translated">Truncateは、dをゼロに向かってmの倍数に丸めた結果を返します。m &amp;lt;= 0の場合、Truncateはdを変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="498fecdf2960f4ea8c81a3634a3c6208f18d44bd" translate="yes" xml:space="preserve">
          <source>Truncate returns the result of rounding t down to a multiple of d (since the zero time). If d &amp;lt;= 0, Truncate returns t stripped of any monotonic clock reading but otherwise unchanged.</source>
          <target state="translated">Truncateは、tをdの倍数に切り捨てた結果を返します（ゼロ時間以降）。d &amp;lt;= 0の場合、Truncateはtを取り除き、単調なクロックの読み取り値を取り除きますが、それ以外は変更しません。</target>
        </trans-unit>
        <trans-unit id="7a922bb8e2913cab6dcad5ba9140345fb42fa502" translate="yes" xml:space="preserve">
          <source>TruncateWriter returns a Writer that writes to w but stops silently after n bytes.</source>
          <target state="translated">TruncateWriterは、wに書き込んだ後、nバイト後に無言で停止するWriterを返します。</target>
        </trans-unit>
        <trans-unit id="66617c3163f43664fa6ddb9c95a7d88a932b782b" translate="yes" xml:space="preserve">
          <source>Truthy returns the JavaScript &quot;truthiness&quot; of the value v. In JavaScript, false, 0, &quot;&quot;, null, undefined, and NaN are &quot;falsy&quot;, and everything else is &quot;truthy&quot;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&lt;/a&gt;.</source>
          <target state="translated">Truthyは、値vのJavaScriptの「真実性」を返します。JavaScriptでは、false、0、「」、null、未定義、およびNaNは「偽」で、その他はすべて「真実」です。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;https://developer.mozilla.org/en-US/docs/Glossary/Truthyを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c26728b3acc2b9a34150900b5536db30082f4043" translate="yes" xml:space="preserve">
          <source>TryRecv attempts to receive a value from the channel v but will not block. It panics if v's Kind is not Chan. If the receive delivers a value, x is the transferred value and ok is true. If the receive cannot finish without blocking, x is the zero Value and ok is false. If the channel is closed, x is the zero value for the channel's element type and ok is false.</source>
          <target state="translated">TryRecv はチャンネル v からの値の受信を試みますが、ブロックされません。v の Kind が Chan でない場合はパニックになります。受信した値が配送された場合、x は転送された値であり、ok は真です。受信がブロックされずに終了できない場合、x はゼロ値であり、ok は false である。チャンネルが閉じられている場合、x はチャンネルの要素タイプのゼロ値であり、ok は false です。</target>
        </trans-unit>
        <trans-unit id="febc1b0170a31256a4ba31c38646abd1c14c7afb" translate="yes" xml:space="preserve">
          <source>TrySend attempts to send x on the channel v but will not block. It panics if v's Kind is not Chan. It reports whether the value was sent. As in Go, x's value must be assignable to the channel's element type.</source>
          <target state="translated">TrySend はチャンネル v で x を送ろうとしますが、ブロックされません。vのKindがChanでない場合はパニックになります。値が送信されたかどうかを報告します。Go の場合と同様に、x の値はチャンネルの要素型に代入可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="042f2d498c44806f60201f1f05491910d5c73fe8" translate="yes" xml:space="preserve">
          <source>Two sets of interfaces are included in this package. When a more abstract interface isn't necessary, there are functions for encrypting/decrypting with v1.5/OAEP and signing/verifying with v1.5/PSS. If one needs to abstract over the public-key primitive, the PrivateKey struct implements the Decrypter and Signer interfaces from the crypto package.</source>
          <target state="translated">本パッケージには 2 種類のインタフェースが含まれています。より抽象的なインタフェースが不要な場合は、v1.5/OAEP での暗号化/復号化、および v1.5/PSS での署名/検証のための関数があります。公開鍵プリミティブを抽象化する必要がある場合は、PrivateKey 構造体が crypto パッケージの Decrypter および Signer インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="021677bbd9ee4b61e5a1312cf21d452a27661c48" translate="yes" xml:space="preserve">
          <source>Tx is a transaction.</source>
          <target state="translated">Txはトランザクションです。</target>
        </trans-unit>
        <trans-unit id="02cdcf0d841ea4d5e8abf2653c842d138120149a" translate="yes" xml:space="preserve">
          <source>Tx is an in-progress database transaction.</source>
          <target state="translated">Txは進行中のデータベーストランザクションです。</target>
        </trans-unit>
        <trans-unit id="41b6053676814b4fe97b2c9be9a306ee614bfa3d" translate="yes" xml:space="preserve">
          <source>Tx.ExecContext</source>
          <target state="translated">Tx.ExecContext</target>
        </trans-unit>
        <trans-unit id="2825856698e10e430365413d889b83a20654a02a" translate="yes" xml:space="preserve">
          <source>Tx.Prepare</source>
          <target state="translated">Tx.Prepare</target>
        </trans-unit>
        <trans-unit id="ef76ba4edb63dbd2cd7bf54f9037e276e1229e5a" translate="yes" xml:space="preserve">
          <source>Tx.Rollback</source>
          <target state="translated">Tx.Rollback</target>
        </trans-unit>
        <trans-unit id="a83fe983647bcf7e1590d7bef39b1b437680667a" translate="yes" xml:space="preserve">
          <source>TxOptions holds the transaction options to be used in DB.BeginTx.</source>
          <target state="translated">TxOptionsは、DB.BeginTxで使用するトランザクションオプションを保持します。</target>
        </trans-unit>
        <trans-unit id="46eaf072cf758f74571ec8685b65883630652645" translate="yes" xml:space="preserve">
          <source>TxOptions holds the transaction options.</source>
          <target state="translated">TxOptionsは、トランザクションオプションを保持します。</target>
        </trans-unit>
        <trans-unit id="68e7b01d33d203d9281e2f2dd8f3398104376276" translate="yes" xml:space="preserve">
          <source>Typ contains the predeclared *Basic types indexed by their corresponding BasicKind.</source>
          <target state="translated">Typは,対応するBasicKindによってインデックス化された宣言済みの*Basic型を含みます.</target>
        </trans-unit>
        <trans-unit id="64f24b17ea9baa36a77dc3d1afdc32b1a420fb9e" translate="yes" xml:space="preserve">
          <source>Type flags for Header.Typeflag.</source>
          <target state="translated">Header.Typeflagの型フラグです。</target>
        </trans-unit>
        <trans-unit id="04ccb52737e3e40430c97b234b8f24e390173f8b" translate="yes" xml:space="preserve">
          <source>Type inference computes the type (Type) of every expression (ast.Expr) and checks for compliance with the language specification. Use Info.Types[expr].Type for the results of type inference.</source>
          <target state="translated">型推論は、すべての式(ast.Expr)の型(Type)を計算し、言語仕様に準拠しているかどうかをチェックします。型推論の結果は、Info.Types[expr].Typeを使用します。</target>
        </trans-unit>
        <trans-unit id="8035b14525c84dd4e5349419c0ff657e153c1c32" translate="yes" xml:space="preserve">
          <source>Type is found in Header.Type.</source>
          <target state="translated">TypeはHeader.Typeにあります。</target>
        </trans-unit>
        <trans-unit id="ec7bc4958b2c43e87f98f2ef7e1adb5d065d5c5e" translate="yes" xml:space="preserve">
          <source>Type is here for the purposes of documentation only. It is a stand-in for any Go type, but represents the same type for any given function invocation.</source>
          <target state="translated">Type は、ここでは文書化のみを目的としています。これは、任意の Go 型の代用となりますが、任意の関数の呼び出しに対して同じ型を表します。</target>
        </trans-unit>
        <trans-unit id="233ac19906546712346f536e7ee3880b82162310" translate="yes" xml:space="preserve">
          <source>Type is the documentation for a type declaration.</source>
          <target state="translated">Typeは、型宣言のドキュメントです。</target>
        </trans-unit>
        <trans-unit id="d3c0b263d515209e36ac606a05719bce899addba" translate="yes" xml:space="preserve">
          <source>Type is the representation of a Go type.</source>
          <target state="translated">型は囲碁の型を表現したものです。</target>
        </trans-unit>
        <trans-unit id="c3bca7d619ddc3b0ec61fb8f295216cb63f22eb4" translate="yes" xml:space="preserve">
          <source>Type reads the type at off in the DWARF &amp;ldquo;info&amp;rdquo; section.</source>
          <target state="translated">タイプは、DWARFの「情報」セクションでオフのタイプを読み取ります。</target>
        </trans-unit>
        <trans-unit id="1fce0b09390d2c3838db788c0cf76f63a5bf80a9" translate="yes" xml:space="preserve">
          <source>Type represents the JavaScript type of a Value.</source>
          <target state="translated">TypeはValueのJavaScriptの型を表します。</target>
        </trans-unit>
        <trans-unit id="e06c5701673348f2eed499aa753a2ba395d1a12d" translate="yes" xml:space="preserve">
          <source>Type returns itself and provides an easy default implementation for embedding in a Node. Embedded in all non-trivial Nodes.</source>
          <target state="translated">型はそれ自身を返し、ノードに埋め込むための簡単なデフォルト実装を提供します。すべての非自明なノードに埋め込まれています。</target>
        </trans-unit>
        <trans-unit id="4726645469f41dd7bcb1d47132c78e582530c7e1" translate="yes" xml:space="preserve">
          <source>Type returns the JavaScript type of the value v. It is similar to JavaScript's typeof operator, except that it returns TypeNull instead of TypeObject for null.</source>
          <target state="translated">Typeは値vのJavaScriptの型を返します。これはJavaScriptのtypeof演算子と似ていますが、nullの場合はTypeObjectではなくTypeNullを返すことを除いては似ています。</target>
        </trans-unit>
        <trans-unit id="2fa9db8cb436bbb192eec5d03d6240277e6eeffd" translate="yes" xml:space="preserve">
          <source>Type returns the object's type.</source>
          <target state="translated">Typeは、オブジェクトの型を返します。</target>
        </trans-unit>
        <trans-unit id="d1407fc8c8322906d1372dd8a45dc51e6205559f" translate="yes" xml:space="preserve">
          <source>Type returns the type of x.f, which may be different from the type of f. See Selection for more information.</source>
          <target state="translated">Typeはx.fの型を返しますが、これはfの型とは異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="372fc3db84eb7f93272dcba175262aaab1565f30" translate="yes" xml:space="preserve">
          <source>Type returns v's type.</source>
          <target state="translated">Typeはvの型を返します。</target>
        </trans-unit>
        <trans-unit id="55dbc1b43ee6cb3b1548172b193bc2a7d3e5eca5" translate="yes" xml:space="preserve">
          <source>Type values are comparable, such as with the == operator, so they can be used as map keys. Two Type values are equal if they represent identical types.</source>
          <target state="translated">型の値は==演算子のように比較可能なので、マップキーとして使用することができます。2 つの型の値は、同じ型を表す場合は等しくなります。</target>
        </trans-unit>
        <trans-unit id="7bdac7349f75285c99f4a03ea2e2de6365f45c2a" translate="yes" xml:space="preserve">
          <source>Type-checking consists of several interdependent phases:</source>
          <target state="translated">タイプチェックは、いくつかの相互依存的な段階から構成されています。</target>
        </trans-unit>
        <trans-unit id="26984be5e6e3b06475f717ab4d76ce6f4ff88c54" translate="yes" xml:space="preserve">
          <source>Type1 is here for the purposes of documentation only. It is a stand-in for any Go type, but represents the same type for any given function invocation.</source>
          <target state="translated">Type1 は、ここでは文書化のみを目的としています。これは任意の Go 型の代用ですが、任意の関数の呼び出しに対して同じ型を表します。</target>
        </trans-unit>
        <trans-unit id="7ace60c9c3dbd05ce39ba29e759c6ad4a52088eb" translate="yes" xml:space="preserve">
          <source>TypeAndValue reports the type and value (for constants) of the corresponding expression.</source>
          <target state="translated">TypeAndValueは、対応する式の型と値(定数の場合)をレポートします。</target>
        </trans-unit>
        <trans-unit id="2bc75a2b4beae4c84f906bb525769e97f38f0823" translate="yes" xml:space="preserve">
          <source>TypeByExtension returns the MIME type associated with the file extension ext. The extension ext should begin with a leading dot, as in &quot;.html&quot;. When ext has no associated type, TypeByExtension returns &quot;&quot;.</source>
          <target state="translated">TypeByExtension は、ファイルの拡張子 ext に関連付けられた MIME タイプを返します。 拡張子 ext は、&quot;.html&quot; のように先頭のドットで始まる必要があります。ext が関連付けられたタイプを持たない場合、TypeByExtension は &quot;&quot; を返します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
