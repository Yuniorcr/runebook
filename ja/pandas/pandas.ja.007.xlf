<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="76bb2eedb755813fab2047507675c3cb194cf610" translate="yes" xml:space="preserve">
          <source>DataFrame rolling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55247ca5c970b492bb733b21a6e8736858211d32" translate="yes" xml:space="preserve">
          <source>DataFrame to be converted to MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e664b74767e7f572afd414e6b60cff9f6fa48a" translate="yes" xml:space="preserve">
          <source>DataFrame with DatetimeIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad947e885dc096e656d89a79a5faebf39dd5e946" translate="yes" xml:space="preserve">
          <source>DataFrame with NA entries dropped from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb8852d15f19b561336d4b7156d5d1b37ba901a" translate="yes" xml:space="preserve">
          <source>DataFrame with changed index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835de20b02f4633d395a6218ca02694f2049aeab" translate="yes" xml:space="preserve">
          <source>DataFrame with ranking of values within each group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="219e1e8e565ffb2c282b8b95f5b37578570892c9" translate="yes" xml:space="preserve">
          <source>DataFrame with sorted index if inplace=False, None otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3fe7e8b2af8df2aa14ddc4b01fbc1499dc2c22" translate="yes" xml:space="preserve">
          <source>DataFrame with sorted values if inplace=False, None otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c017d5c4b4ff2b39887071cc3982a48a2707f8a8" translate="yes" xml:space="preserve">
          <source>DataFrame with the new index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7700a7d6c400d07ad8b7686cbba5ae597cc00999" translate="yes" xml:space="preserve">
          <source>DataFrame with the renamed axis labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4883ee66c683c6b3826741bf2daffad4754a89a" translate="yes" xml:space="preserve">
          <source>DataFrame without the removed index or column labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48df69691149f67d4dd0931083759fc999233a9" translate="yes" xml:space="preserve">
          <source>DataFrame()</source>
          <target state="translated">DataFrame()</target>
        </trans-unit>
        <trans-unit id="940b2b46e9cac6125b520d129a1b06be4aa30b4b" translate="yes" xml:space="preserve">
          <source>DataFrame, Series, or scalar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3255dbf9a77aae78dc0dbfc8e2897e037234c4" translate="yes" xml:space="preserve">
          <source>DataFrame.T</source>
          <target state="translated">DataFrame.T</target>
        </trans-unit>
        <trans-unit id="da06e1a842288ffaf564081c870a14e49af38317" translate="yes" xml:space="preserve">
          <source>DataFrame.at</source>
          <target state="translated">DataFrame.at</target>
        </trans-unit>
        <trans-unit id="e5cf8763fbdfcc0c2f927a021f09b519391d0b77" translate="yes" xml:space="preserve">
          <source>DataFrame.axes</source>
          <target state="translated">DataFrame.axes</target>
        </trans-unit>
        <trans-unit id="432a297cabc1f719e5ccacfcc63960159e3a322a" translate="yes" xml:space="preserve">
          <source>DataFrame.droplevel()</source>
          <target state="translated">DataFrame.droplevel()</target>
        </trans-unit>
        <trans-unit id="5e7ea6e7860b459a561b72c97d93c5bc91e27d31" translate="yes" xml:space="preserve">
          <source>DataFrame.eq()</source>
          <target state="translated">DataFrame.eq()</target>
        </trans-unit>
        <trans-unit id="8b91b4701b96b36f47bf32c356d21059d83a8d78" translate="yes" xml:space="preserve">
          <source>DataFrame.ge()</source>
          <target state="translated">DataFrame.ge()</target>
        </trans-unit>
        <trans-unit id="718436a74dfa8dc0013240e0ee9224a6d7c5e239" translate="yes" xml:space="preserve">
          <source>DataFrame.gt()</source>
          <target state="translated">DataFrame.gt()</target>
        </trans-unit>
        <trans-unit id="ad87f71e5593d7610f916196325d5e2c5de008bc" translate="yes" xml:space="preserve">
          <source>DataFrame.iat</source>
          <target state="translated">DataFrame.iat</target>
        </trans-unit>
        <trans-unit id="22699f3af68ffe2c7674ca4bc9c99334bc8f74bb" translate="yes" xml:space="preserve">
          <source>DataFrame.iloc</source>
          <target state="translated">DataFrame.iloc</target>
        </trans-unit>
        <trans-unit id="acf9dbfe60d8998e4e04387a0e781b7d213aa0a6" translate="yes" xml:space="preserve">
          <source>DataFrame.ix</source>
          <target state="translated">DataFrame.ix</target>
        </trans-unit>
        <trans-unit id="d90a71094ac38bbf918a2e239172ba5b347f51bd" translate="yes" xml:space="preserve">
          <source>DataFrame.le()</source>
          <target state="translated">DataFrame.le()</target>
        </trans-unit>
        <trans-unit id="5333a7f0b33690fd7dd6121ffee6c4357123e006" translate="yes" xml:space="preserve">
          <source>DataFrame.loc</source>
          <target state="translated">DataFrame.loc</target>
        </trans-unit>
        <trans-unit id="4d05e57d05fc6dadf2775f9b08e30237ac0a8ae3" translate="yes" xml:space="preserve">
          <source>DataFrame.lt()</source>
          <target state="translated">DataFrame.lt()</target>
        </trans-unit>
        <trans-unit id="d0eb1f8396f9d234030e0d715e014c9cea7759fe" translate="yes" xml:space="preserve">
          <source>DataFrame.ndim</source>
          <target state="translated">DataFrame.ndim</target>
        </trans-unit>
        <trans-unit id="8f86ab7a0fc793a0e30e7b2cde48558d5de2c9bb" translate="yes" xml:space="preserve">
          <source>DataFrame.ne()</source>
          <target state="translated">DataFrame.ne()</target>
        </trans-unit>
        <trans-unit id="1d7ea2f9eef6e043a2819ba5472037982425ee68" translate="yes" xml:space="preserve">
          <source>DataFrame.size</source>
          <target state="translated">DataFrame.size</target>
        </trans-unit>
        <trans-unit id="f674c091ca0942e30b8d3b5613b8c03090e2dbc6" translate="yes" xml:space="preserve">
          <source>DataFrame.to_sql()</source>
          <target state="translated">DataFrame.to_sql()</target>
        </trans-unit>
        <trans-unit id="f24f0475dae5aacddffa64a4f12da998df41182b" translate="yes" xml:space="preserve">
          <source>DataFrame.xs()</source>
          <target state="translated">DataFrame.xs()</target>
        </trans-unit>
        <trans-unit id="fd4c7d21bb73593ebdae595548ed9296275de21a" translate="yes" xml:space="preserve">
          <source>DataFrame/MultiIndex or Series/Index of objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cf85b258544f2aa115b5c5bad8a367ec21ff3a" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy or SeriesGroupBy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb397a7db5906ab00a7777351ee99f28f22b656" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.all()</source>
          <target state="translated">DataFrameGroupBy.all()</target>
        </trans-unit>
        <trans-unit id="8f5fafbd24cf21f806560d622617f84151396c92" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.any()</source>
          <target state="translated">DataFrameGroupBy.any()</target>
        </trans-unit>
        <trans-unit id="605bd726c38c5dc6bcbd330a99a23561036ea954" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.bfill()</source>
          <target state="translated">DataFrameGroupBy.bfill()</target>
        </trans-unit>
        <trans-unit id="0f86b06b183c306c3c88bf73e1c347f155a5608d" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.boxplot()</source>
          <target state="translated">DataFrameGroupBy.boxplot()</target>
        </trans-unit>
        <trans-unit id="0a6e407c5806ae3f0f2a0564a3bd65720faf6f75" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.corr</source>
          <target state="translated">DataFrameGroupBy.corr</target>
        </trans-unit>
        <trans-unit id="2a81f2ad689f62e8c472a2519411edfe17d4bc9b" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.corrwith</source>
          <target state="translated">DataFrameGroupBy.corrwith</target>
        </trans-unit>
        <trans-unit id="61a04956038ca9f32b6157438b7daa74b75405de" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.count()</source>
          <target state="translated">DataFrameGroupBy.count()</target>
        </trans-unit>
        <trans-unit id="d83b1cfda6bb06dc6ddb551f4bce115e28212d91" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.cov</source>
          <target state="translated">DataFrameGroupBy.cov</target>
        </trans-unit>
        <trans-unit id="398a62dc6e825ed631f456fee1c33c26477762d0" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.cummax()</source>
          <target state="translated">DataFrameGroupBy.cummax()</target>
        </trans-unit>
        <trans-unit id="5498763e0770383e41e3ba3d5cd5c7b2e40cad85" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.cummin()</source>
          <target state="translated">DataFrameGroupBy.cummin()</target>
        </trans-unit>
        <trans-unit id="a3c7acc345e2c61b3e7e26573066a5b7bac63094" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.cumprod()</source>
          <target state="translated">DataFrameGroupBy.cumprod()</target>
        </trans-unit>
        <trans-unit id="085d3a7844981dacd4058169d3e6e7a531fac4c7" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.cumsum()</source>
          <target state="translated">DataFrameGroupBy.cumsum()</target>
        </trans-unit>
        <trans-unit id="0240c6d936a66c54767c49fe6464a4d00e338dd9" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.describe()</source>
          <target state="translated">DataFrameGroupBy.describe()</target>
        </trans-unit>
        <trans-unit id="3e110836eeadb973a2956830b15d69265959c982" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.diff</source>
          <target state="translated">DataFrameGroupBy.diff</target>
        </trans-unit>
        <trans-unit id="572379276efa1cc2169cbd0306e8fa38f6e61014" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.ffill()</source>
          <target state="translated">DataFrameGroupBy.ffill()</target>
        </trans-unit>
        <trans-unit id="98e4121f41b6c2df398c99acdae804b36441f201" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.fillna</source>
          <target state="translated">DataFrameGroupBy.fillna</target>
        </trans-unit>
        <trans-unit id="d59aa7108b7a2cf251f00b5bdb1de2010bd6474b" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.filter()</source>
          <target state="translated">DataFrameGroupBy.filter()</target>
        </trans-unit>
        <trans-unit id="f00499fd8784d4481aa9c632ace0581edf1ca111" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.hist</source>
          <target state="translated">DataFrameGroupBy.hist</target>
        </trans-unit>
        <trans-unit id="eb502ca9229eda9ff684a3b1ce08d9d4141d6fcb" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.idxmax</source>
          <target state="translated">DataFrameGroupBy.idxmax</target>
        </trans-unit>
        <trans-unit id="039d3611df996e763967f0c7a78ae7dec5c14e0b" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.idxmin</source>
          <target state="translated">DataFrameGroupBy.idxmin</target>
        </trans-unit>
        <trans-unit id="f509c20e36fc470957b78dec97e2adcec823291e" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.mad</source>
          <target state="translated">DataFrameGroupBy.mad</target>
        </trans-unit>
        <trans-unit id="b80a98c4cd2f6b6332d95aecfeefd6f4d248ed37" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.nunique()</source>
          <target state="translated">DataFrameGroupBy.nunique()</target>
        </trans-unit>
        <trans-unit id="da370724337510a405731d5cb247b591e4a8b8eb" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.pct_change()</source>
          <target state="translated">DataFrameGroupBy.pct_change()</target>
        </trans-unit>
        <trans-unit id="f3c9f0af124090dfd3221c93f03acea06866782e" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.plot</source>
          <target state="translated">DataFrameGroupBy.plot</target>
        </trans-unit>
        <trans-unit id="c440f876193cad766034a270ed9483d45512bffd" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.quantile()</source>
          <target state="translated">DataFrameGroupBy.quantile()</target>
        </trans-unit>
        <trans-unit id="50e10e623e0cec8495f651680f5a8b53821ea939" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.rank()</source>
          <target state="translated">DataFrameGroupBy.rank()</target>
        </trans-unit>
        <trans-unit id="9391b2a02dd9c03fe7dff3b2655e24c3052620c2" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.resample()</source>
          <target state="translated">DataFrameGroupBy.resample()</target>
        </trans-unit>
        <trans-unit id="1f10840276baac9d1e0e907e051910bcf780fa5c" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.shift()</source>
          <target state="translated">DataFrameGroupBy.shift()</target>
        </trans-unit>
        <trans-unit id="bb97318dfd38a77f621faa81a86746c134308726" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.size()</source>
          <target state="translated">DataFrameGroupBy.size()</target>
        </trans-unit>
        <trans-unit id="2e687856ee3149b7d0789100d08a99502e4af005" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.skew</source>
          <target state="translated">DataFrameGroupBy.skew</target>
        </trans-unit>
        <trans-unit id="b8e26d02b0fe9fba447a18e9b5488abddf34b5df" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.take</source>
          <target state="translated">DataFrameGroupBy.take</target>
        </trans-unit>
        <trans-unit id="95cdf15ef024c00b936b1dd9d7d5a985d052ddb0" translate="yes" xml:space="preserve">
          <source>DataFrameGroupBy.tshift</source>
          <target state="translated">DataFrameGroupBy.tshift</target>
        </trans-unit>
        <trans-unit id="c47ae6675be285e6fd95b4562aa298b338ed6854" translate="yes" xml:space="preserve">
          <source>DataFrames can be compared to a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a701f93dc4a7fe5904e0c8030b9e361e9dc56c00" translate="yes" xml:space="preserve">
          <source>DataFrames can be filtered in multiple ways; the most intuitive of which is using &lt;a href=&quot;../../user_guide/indexing#indexing-boolean&quot;&gt;boolean indexing&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3909aaa52259b5b30c1a3dc48ceeb26b6cc0ba5" translate="yes" xml:space="preserve">
          <source>DataFrames can be filtered in multiple ways; the most intuitive of which is using &lt;a href=&quot;../../user_guide/indexing#indexing-boolean&quot;&gt;boolean indexing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b5b941979a772f27a3c3218506ba2160dfed9b" translate="yes" xml:space="preserve">
          <source>DataFrames can be filtered in multiple ways; the most intuitive of which is using &lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing&quot;&gt;boolean indexing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a901eacdad05bd6669cdb5db6000a89264bbfdd3" translate="yes" xml:space="preserve">
          <source>DataFrames df and different_column_type have the same element types and values, but have different types for the column labels, which will still return True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf392e23155d90b077d48be67688d29752dd0b6" translate="yes" xml:space="preserve">
          <source>DataFrames df and different_data_type have different types for the same values for their elements, and will return False even though their column labels are the same values and types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c430a5c7188b2ab8622283718babfa9018f44384" translate="yes" xml:space="preserve">
          <source>DataFrames df and exactly_equal have the same types and values for their elements and column labels, which will return True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2cfbb533741889a1130ab9ce459643c052f063" translate="yes" xml:space="preserve">
          <source>Database-style DataFrame or named Series joining/merging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f50c05df4a74b08773b2a628777bf464e00987d" translate="yes" xml:space="preserve">
          <source>Databases supported by SQLAlchemy &lt;a href=&quot;#r689dfd12abe5-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; are supported. Tables can be newly created, appended to, or overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f1cfb36006327760829d6d7f2e8785b405a8d7" translate="yes" xml:space="preserve">
          <source>Databases supported by SQLAlchemy &lt;a href=&quot;#rb112c6730e63-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; are supported. Tables can be newly created, appended to, or overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476ac8ce616a2506adab840fb475901256d8c3b0" translate="yes" xml:space="preserve">
          <source>Date and Time Types: &lt;code&gt;'datetime', 'datetimetz'&lt;/code&gt;, &lt;code&gt;'timedelta'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f049c082cff44adfbf192989f9e5ddd9d35099d0" translate="yes" xml:space="preserve">
          <source>Date format string (e.g. &amp;ldquo;%Y-%m-%d&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c220156350921566dcdfa29115ecb4fdf93c88" translate="yes" xml:space="preserve">
          <source>Date functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa7ab960f7e42d38b680da82bdd59f64dc299c9" translate="yes" xml:space="preserve">
          <source>Date offsets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbd1e34b5cb2708e15c277800daf3a54bdf9980" translate="yes" xml:space="preserve">
          <source>Date(s) before which the last row(s) are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befddc045aa60373c63ef4f4364aeb6ed420f92a" translate="yes" xml:space="preserve">
          <source>DateOffset</source>
          <target state="translated">DateOffset</target>
        </trans-unit>
        <trans-unit id="f809bf223d21683ed220ae1bc0b8ab97adeb6d6b" translate="yes" xml:space="preserve">
          <source>DateOffset for the Easter holiday using logic defined in dateutil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b825d02ade77c929733bfb860e4f21d74425563c" translate="yes" xml:space="preserve">
          <source>DateOffset increments between business EOM dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da1b3b04cfdb6e5a9316dcac80afef0470427c3" translate="yes" xml:space="preserve">
          <source>DateOffset increments between business Quarter dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94f5e070dbf8266e6d5cfce96d0f792c268b9ee" translate="yes" xml:space="preserve">
          <source>DateOffset increments between business quarter dates for 52-53 week fiscal year (also known as a 4-4-5 calendar).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1845f840ca23a7e9d81874c890b5b626570ad2" translate="yes" xml:space="preserve">
          <source>DateOffset increments between business year begin dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c88d36827cd1a811d37833ad8986448f6b83c6" translate="yes" xml:space="preserve">
          <source>DateOffset increments between calendar year begin dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae039519955fbfdb3021e8dbf66df3d0f61d7c6" translate="yes" xml:space="preserve">
          <source>DateOffset increments between calendar year ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8af3d1d25d08c8fb031db6e019f15381dd3941a" translate="yes" xml:space="preserve">
          <source>DateOffset objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2ffe070fb7bdb6c72385dc22032a52d1c345e8" translate="yes" xml:space="preserve">
          <source>DateOffset of one business month at beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b697867e585850c7b6ee88f0b8c07863b1ad2442" translate="yes" xml:space="preserve">
          <source>DateOffset of one month at beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0892a545a68729da4d9678d8494ddf34157620" translate="yes" xml:space="preserve">
          <source>DateOffset of one month end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88074eb502fa6a22507b896a91d69880a4da0022" translate="yes" xml:space="preserve">
          <source>DateOffset subclass representing custom business month(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9809bd0caeb05fe7e81271df2fd9f14d6dc1e65" translate="yes" xml:space="preserve">
          <source>DateOffset subclass representing possibly n business days.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55af90665ee34cd77a521875d1a88210541bb221" translate="yes" xml:space="preserve">
          <source>DateOffset subclass representing possibly n business hours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72206301f1f62b58f6deec8220834bb48cc3f8a5" translate="yes" xml:space="preserve">
          <source>DateOffset subclass representing possibly n custom business days, excluding holidays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d75bfc472f1f10f58efe0a39a3a89ff1d07f58" translate="yes" xml:space="preserve">
          <source>DateOffset subclass representing possibly n custom business days.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9ca172d1cb78a5d9b533ce8b2a1f49da0ec449" translate="yes" xml:space="preserve">
          <source>DateOffset that just needs a month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4aca1d052e7b66074990769bab70626b0bcc17" translate="yes" xml:space="preserve">
          <source>DateOffset work as follows. Each offset specify a set of dates that conform to the DateOffset. For example, Bday defines this set to be the set of dates that are weekdays (M-F). To test if a date is in the set of a DateOffset dateOffset we can use the onOffset method: dateOffset.onOffset(date).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4aca29834916bdc5aa200f8ac763dee198fefb8" translate="yes" xml:space="preserve">
          <source>DateOffset.apply()</source>
          <target state="translated">DateOffset.apply()</target>
        </trans-unit>
        <trans-unit id="c63489d28dfcc369ddb726d90c4f511d0647400b" translate="yes" xml:space="preserve">
          <source>DateOffset.apply_index()</source>
          <target state="translated">DateOffset.apply_index()</target>
        </trans-unit>
        <trans-unit id="80ff35892b67be06957a34269ce3a9fe9ad28583" translate="yes" xml:space="preserve">
          <source>DateOffset.base</source>
          <target state="translated">DateOffset.base</target>
        </trans-unit>
        <trans-unit id="bdbb0c1afbc86c485493d1de48bb5515a440f8aa" translate="yes" xml:space="preserve">
          <source>DateOffset.copy()</source>
          <target state="translated">DateOffset.copy()</target>
        </trans-unit>
        <trans-unit id="f8042f70b8ae3624ab508c2c122158d9cdbf0da8" translate="yes" xml:space="preserve">
          <source>DateOffset.freqstr</source>
          <target state="translated">DateOffset.freqstr</target>
        </trans-unit>
        <trans-unit id="75aab382edeec664ac9f2d10f9cdfff7e5f2f109" translate="yes" xml:space="preserve">
          <source>DateOffset.isAnchored()</source>
          <target state="translated">DateOffset.isAnchored()</target>
        </trans-unit>
        <trans-unit id="bbad71b5c49cb252ad7bf273f4544fe38b6ad923" translate="yes" xml:space="preserve">
          <source>DateOffset.kwds</source>
          <target state="translated">DateOffset.kwds</target>
        </trans-unit>
        <trans-unit id="d112c15f4079d89f0837da92871709bb39cb9d09" translate="yes" xml:space="preserve">
          <source>DateOffset.name</source>
          <target state="translated">DateOffset.name</target>
        </trans-unit>
        <trans-unit id="25180e207f907e8aa87e29ba76d77e4774560a46" translate="yes" xml:space="preserve">
          <source>DateOffset.nanos</source>
          <target state="translated">DateOffset.nanos</target>
        </trans-unit>
        <trans-unit id="c0eb11bcb55fb01c7114b90d64fabc787da7c695" translate="yes" xml:space="preserve">
          <source>DateOffset.normalize</source>
          <target state="translated">DateOffset.normalize</target>
        </trans-unit>
        <trans-unit id="ccecb96fc98e0119f27714fb06d32a217f81e458" translate="yes" xml:space="preserve">
          <source>DateOffset.onOffset()</source>
          <target state="translated">DateOffset.onOffset()</target>
        </trans-unit>
        <trans-unit id="5ccd2d09614ac07acfbc3ab5e3b820a43303d952" translate="yes" xml:space="preserve">
          <source>DateOffset.rollback()</source>
          <target state="translated">DateOffset.rollback()</target>
        </trans-unit>
        <trans-unit id="1f269b6634f4df14092482c70900bb3aa37724cf" translate="yes" xml:space="preserve">
          <source>DateOffset.rollforward()</source>
          <target state="translated">DateOffset.rollforward()</target>
        </trans-unit>
        <trans-unit id="34fdb1a00c3506d140d4a8b7acd0feaf87f2a548" translate="yes" xml:space="preserve">
          <source>DateOffset.rule_code</source>
          <target state="translated">DateOffset.rule_code</target>
        </trans-unit>
        <trans-unit id="6285cd845615843ca1bcf9aa069450742ec22b67" translate="yes" xml:space="preserve">
          <source>DateOffsets can be created to move dates forward a given number of valid dates. For example, Bday(2) can be added to a date to move it two business days forward. If the date does not start on a valid date, first it is moved to a valid date. Thus pseudo code is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f6a5f2173c7d89dde1bc70197644f533febd4e" translate="yes" xml:space="preserve">
          <source>Dates are assumed to be sorted. Raises if this is not the case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6593c6bead0eec5b6abe5a82dd85419dd3ac97" translate="yes" xml:space="preserve">
          <source>Dates to exclude from the set of valid business days, passed to &lt;code&gt;numpy.busdaycalendar&lt;/code&gt;, only used when custom frequency strings are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae373c7eadbd9c6b3e097047f5c910c216623ee0" translate="yes" xml:space="preserve">
          <source>Datetime data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ae284a6934eeff7366d80dfa13a92776f1987a" translate="yes" xml:space="preserve">
          <source>Datetime methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ceb6a10f263f3a51af55a8a54e0d2814d7fce0" translate="yes" xml:space="preserve">
          <source>Datetime properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0494bd6f4ad2f966f52407b28102da25fa1cf8bc" translate="yes" xml:space="preserve">
          <source>Datetime with Timezone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f133defe7322c03afad36ac9a4f24559f7b960" translate="yes" xml:space="preserve">
          <source>Datetime, Timedelta, Period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e0fd66fbdc7b547c6445bb41db267c519d75f2" translate="yes" xml:space="preserve">
          <source>DatetimeArray</source>
          <target state="translated">DatetimeArray</target>
        </trans-unit>
        <trans-unit id="e620b477192d7f686e6196ce8a6447a142ebac6b" translate="yes" xml:space="preserve">
          <source>DatetimeArray is currently experimental, and its API may change without warning. In particular, &lt;code&gt;DatetimeArray.dtype&lt;/code&gt; is expected to change to always be an instance of an &lt;code&gt;ExtensionDtype&lt;/code&gt; subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef83a9d9a8bda1e37eb7aa3e8a7cbf2c8187e5c5" translate="yes" xml:space="preserve">
          <source>DatetimeArray, DatetimeIndex or Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed09a3da47081aac3ada4efcabc3b564714102b3" translate="yes" xml:space="preserve">
          <source>DatetimeArray/Index</source>
          <target state="translated">DatetimeArray/Index</target>
        </trans-unit>
        <trans-unit id="ec1605594d02e33afd13f463b3d1e00a9b9debef" translate="yes" xml:space="preserve">
          <source>DatetimeIndex</source>
          <target state="translated">DatetimeIndex</target>
        </trans-unit>
        <trans-unit id="098e12a19272af30b69bcec524a8cccb5378128a" translate="yes" xml:space="preserve">
          <source>DatetimeIndex, TimedeltaIndex, or Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac916d4a0950dbd2e89ac374afea5d2a28256e1c" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.ceil()</source>
          <target state="translated">DatetimeIndex.ceil()</target>
        </trans-unit>
        <trans-unit id="04ddda63bbc4ef4a2df6412227dc97762f879d30" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.date</source>
          <target state="translated">DatetimeIndex.date</target>
        </trans-unit>
        <trans-unit id="dc2e5d292e24b68ed0867242d470664e6b555727" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.day</source>
          <target state="translated">DatetimeIndex.day</target>
        </trans-unit>
        <trans-unit id="305c50b52766014999e51f7123ad4d30397840d2" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.day_name()</source>
          <target state="translated">DatetimeIndex.day_name()</target>
        </trans-unit>
        <trans-unit id="9f7257700514baed2ae407b78bf6816cd17ed9b5" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.dayofweek</source>
          <target state="translated">DatetimeIndex.dayofweek</target>
        </trans-unit>
        <trans-unit id="a8010457cf5a39c30e71c13d3d8caba4b3ffbce9" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.dayofyear</source>
          <target state="translated">DatetimeIndex.dayofyear</target>
        </trans-unit>
        <trans-unit id="ea5be9feba939a7247a26d3e3bf63040513e38da" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.floor()</source>
          <target state="translated">DatetimeIndex.floor()</target>
        </trans-unit>
        <trans-unit id="957ad6c5da1bf66f5beca9be1715775fc5aef32f" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.freq</source>
          <target state="translated">DatetimeIndex.freq</target>
        </trans-unit>
        <trans-unit id="6ec304de55501064de930b3a524d071824e36cc1" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.freqstr</source>
          <target state="translated">DatetimeIndex.freqstr</target>
        </trans-unit>
        <trans-unit id="e437b434acbbea4b6db48b5a05614ddd13a033d4" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.hour</source>
          <target state="translated">DatetimeIndex.hour</target>
        </trans-unit>
        <trans-unit id="d6d5339fcfb1b411f7feb9880cbdaaafe332d0be" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.indexer_at_time()</source>
          <target state="translated">DatetimeIndex.indexer_at_time()</target>
        </trans-unit>
        <trans-unit id="b131cf1f32da78cf6bf6f1bc9d4afec60bc67b46" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.indexer_between_time()</source>
          <target state="translated">DatetimeIndex.indexer_between_time()</target>
        </trans-unit>
        <trans-unit id="4e6d443464a1b9b1fa9679447cf5c2c1cdc01e63" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.inferred_freq</source>
          <target state="translated">DatetimeIndex.inferred_freq</target>
        </trans-unit>
        <trans-unit id="68f33d80a9aba62927cf7103745b121d33111c67" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.is_leap_year</source>
          <target state="translated">DatetimeIndex.is_leap_year</target>
        </trans-unit>
        <trans-unit id="f9b2a5407d3a70179046e85660a1d2e209df7c78" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.is_month_end</source>
          <target state="translated">DatetimeIndex.is_month_end</target>
        </trans-unit>
        <trans-unit id="caa686233e81c7ccebfce250728d76db79f76080" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.is_month_start</source>
          <target state="translated">DatetimeIndex.is_month_start</target>
        </trans-unit>
        <trans-unit id="9fc295675eda632869f089c1e1361b8d9699b8cd" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.is_quarter_end</source>
          <target state="translated">DatetimeIndex.is_quarter_end</target>
        </trans-unit>
        <trans-unit id="756ad46ec836d4075bd55881833bbb47133c80ac" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.is_quarter_start</source>
          <target state="translated">DatetimeIndex.is_quarter_start</target>
        </trans-unit>
        <trans-unit id="990ac2d076fa87990a15d40063933b6eb10da2ef" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.is_year_end</source>
          <target state="translated">DatetimeIndex.is_year_end</target>
        </trans-unit>
        <trans-unit id="b0dca367de5d5bcd8d0aa717651435f070e8c2fe" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.is_year_start</source>
          <target state="translated">DatetimeIndex.is_year_start</target>
        </trans-unit>
        <trans-unit id="9f1e749d45e17f5536265129506afc687434caca" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.mean()</source>
          <target state="translated">DatetimeIndex.mean()</target>
        </trans-unit>
        <trans-unit id="03e352569e7dbc16809b920da8efa394a65daee5" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.microsecond</source>
          <target state="translated">DatetimeIndex.microsecond</target>
        </trans-unit>
        <trans-unit id="62379a64b8e792387671b47934449f5505a79725" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.minute</source>
          <target state="translated">DatetimeIndex.minute</target>
        </trans-unit>
        <trans-unit id="1a53c9a53d56560957e2c334a4e60bcb85e0c9dc" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.month</source>
          <target state="translated">DatetimeIndex.month</target>
        </trans-unit>
        <trans-unit id="37f460a4016c1b374b747a632702682dfc91a73f" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.month_name()</source>
          <target state="translated">DatetimeIndex.month_name()</target>
        </trans-unit>
        <trans-unit id="012e05bb5095575d2097b3e308c9c3da1253922e" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.nanosecond</source>
          <target state="translated">DatetimeIndex.nanosecond</target>
        </trans-unit>
        <trans-unit id="7a9ecf91d0907b51845a70a1f2509d1ea3ea69ac" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.normalize()</source>
          <target state="translated">DatetimeIndex.normalize()</target>
        </trans-unit>
        <trans-unit id="e487fc299e242ccc26faea4c160210ee8b4db68a" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.quarter</source>
          <target state="translated">DatetimeIndex.quarter</target>
        </trans-unit>
        <trans-unit id="8b1285bdbbc1f567561fe50f987a6fc6588eab0e" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.round()</source>
          <target state="translated">DatetimeIndex.round()</target>
        </trans-unit>
        <trans-unit id="e383db9f00b891dfe1af650e8d8a0b0f9c507f54" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.second</source>
          <target state="translated">DatetimeIndex.second</target>
        </trans-unit>
        <trans-unit id="5f570796e2f11a6024df32e9769d02d2520c354c" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.snap()</source>
          <target state="translated">DatetimeIndex.snap()</target>
        </trans-unit>
        <trans-unit id="7074e782c152a78420c02600a9e0f43c079c570c" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.strftime()</source>
          <target state="translated">DatetimeIndex.strftime()</target>
        </trans-unit>
        <trans-unit id="cc59e1e21144adeb4abf0a34ed1e71633aabfc57" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.time</source>
          <target state="translated">DatetimeIndex.time</target>
        </trans-unit>
        <trans-unit id="e2e1bdace48a70e384c9ff19a5777636328fca2e" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.timetz</source>
          <target state="translated">DatetimeIndex.timetz</target>
        </trans-unit>
        <trans-unit id="9cae788554087b6b97fda300669cd596f8da0487" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.to_frame()</source>
          <target state="translated">DatetimeIndex.to_frame()</target>
        </trans-unit>
        <trans-unit id="00f1c532b7359294aa7eb21e9928b9f397d8bc9f" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.to_period()</source>
          <target state="translated">DatetimeIndex.to_period()</target>
        </trans-unit>
        <trans-unit id="d66990c3864285c267690147c6ff4a485fd04940" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.to_perioddelta()</source>
          <target state="translated">DatetimeIndex.to_perioddelta()</target>
        </trans-unit>
        <trans-unit id="05dc56f6a7afdaf63d6bebb27069474fc91cfb9d" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.to_pydatetime()</source>
          <target state="translated">DatetimeIndex.to_pydatetime()</target>
        </trans-unit>
        <trans-unit id="1785db56fa61b76d46dbad818948945852ae835a" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.to_series()</source>
          <target state="translated">DatetimeIndex.to_series()</target>
        </trans-unit>
        <trans-unit id="db659208334e6168dbfc59757a11e9e2672bd1fe" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.tz</source>
          <target state="translated">DatetimeIndex.tz</target>
        </trans-unit>
        <trans-unit id="565db773be3cbaa64b7c3c3e4902bc02b87f6c0a" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.tz_convert()</source>
          <target state="translated">DatetimeIndex.tz_convert()</target>
        </trans-unit>
        <trans-unit id="220c016bc6ad6c207700149ce8aa73c0fc87e8de" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.tz_localize()</source>
          <target state="translated">DatetimeIndex.tz_localize()</target>
        </trans-unit>
        <trans-unit id="d1ac6caf6ebb2b9c6b20d24f2f40be4ee4b85ab5" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.week</source>
          <target state="translated">DatetimeIndex.week</target>
        </trans-unit>
        <trans-unit id="20307f3422d4925332c258ac3975fd45788bfa4d" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.weekday</source>
          <target state="translated">DatetimeIndex.weekday</target>
        </trans-unit>
        <trans-unit id="4e4e762465c4d5526172772d17a2eef37cd9c302" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.weekofyear</source>
          <target state="translated">DatetimeIndex.weekofyear</target>
        </trans-unit>
        <trans-unit id="35e5c048ff373cb0b7ab93244aa316cad7f5f2f6" translate="yes" xml:space="preserve">
          <source>DatetimeIndex.year</source>
          <target state="translated">DatetimeIndex.year</target>
        </trans-unit>
        <trans-unit id="4ec4817a7ab723b43a998fb4caef01f0173ed1bd" translate="yes" xml:space="preserve">
          <source>DatetimeIndex[source]</source>
          <target state="translated">DatetimeIndex[source]</target>
        </trans-unit>
        <trans-unit id="2dcdd951715a427b894d7d5b047a5d64464837d9" translate="yes" xml:space="preserve">
          <source>DatetimeTZDtype()</source>
          <target state="translated">DatetimeTZDtype()</target>
        </trans-unit>
        <trans-unit id="8d19968d103393cae1d416b38755fe94c488e470" translate="yes" xml:space="preserve">
          <source>DatetimeTZDtype.tz</source>
          <target state="translated">DatetimeTZDtype.tz</target>
        </trans-unit>
        <trans-unit id="0e42f56dd2c9f5d75e40af69337b77657f0a7469" translate="yes" xml:space="preserve">
          <source>DatetimeTZDtype.unit</source>
          <target state="translated">DatetimeTZDtype.unit</target>
        </trans-unit>
        <trans-unit id="230408d9e1faf14a85a3add14062c217e57b7403" translate="yes" xml:space="preserve">
          <source>Datetimelike properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987b9ced08d4ac5d11d286ca4b54b99a4f69164b" translate="yes" xml:space="preserve">
          <source>Day</source>
          <target state="translated">Day</target>
        </trans-unit>
        <trans-unit id="132c2320be0655c7221b45185f2547bcd42d8db0" translate="yes" xml:space="preserve">
          <source>Day of the month as a decimal number [01,31].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232f188c18baa6ec73f240c2283edac2e895ead4" translate="yes" xml:space="preserve">
          <source>Day of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7b3b1acd3449a6d239dd11d639e3cf37c805a1" translate="yes" xml:space="preserve">
          <source>Day of the week the period lies in, with Monday=0 and Sunday=6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0993d50222157eff9732ee0792a3a7df53f677" translate="yes" xml:space="preserve">
          <source>Day of the week the period lies in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41975464a9f88e7f9ec6d70817b97f3ef84bcb9" translate="yes" xml:space="preserve">
          <source>Day of the week.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b517546eb8b5fa413be2223efc36cd26437580" translate="yes" xml:space="preserve">
          <source>Day of the year as a decimal number [001,366].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d217acf15d9c91018c040a87e1a6703ff4783db" translate="yes" xml:space="preserve">
          <source>Day of the year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb80307ec726e223f21b4bdc8c1ac9d34b4325e" translate="yes" xml:space="preserve">
          <source>Day.apply()</source>
          <target state="translated">Day.apply()</target>
        </trans-unit>
        <trans-unit id="bd6650253f3fc19a2a82a70c1658fb79a2fd51ec" translate="yes" xml:space="preserve">
          <source>Day.apply_index()</source>
          <target state="translated">Day.apply_index()</target>
        </trans-unit>
        <trans-unit id="8c342dc7a3877e9cd480232398f7956df21b7d38" translate="yes" xml:space="preserve">
          <source>Day.base</source>
          <target state="translated">Day.base</target>
        </trans-unit>
        <trans-unit id="93a6b4e36f64663815763aebd20d79ca8785c2e8" translate="yes" xml:space="preserve">
          <source>Day.copy()</source>
          <target state="translated">Day.copy()</target>
        </trans-unit>
        <trans-unit id="900feaed195f5e8ef75ae474590a21c6870b1bdf" translate="yes" xml:space="preserve">
          <source>Day.delta</source>
          <target state="translated">Day.delta</target>
        </trans-unit>
        <trans-unit id="f86bae157404440facb6109eb95d19aca465a29f" translate="yes" xml:space="preserve">
          <source>Day.freqstr</source>
          <target state="translated">Day.freqstr</target>
        </trans-unit>
        <trans-unit id="3cf728510286775737d1152877601bdc321a631c" translate="yes" xml:space="preserve">
          <source>Day.isAnchored()</source>
          <target state="translated">Day.isAnchored()</target>
        </trans-unit>
        <trans-unit id="999cc7e1f1dc6c89e4e5ad778112cd00a31c349a" translate="yes" xml:space="preserve">
          <source>Day.kwds</source>
          <target state="translated">Day.kwds</target>
        </trans-unit>
        <trans-unit id="d855bc9d47c657ddb464df403eadb276d7b9103b" translate="yes" xml:space="preserve">
          <source>Day.name</source>
          <target state="translated">Day.name</target>
        </trans-unit>
        <trans-unit id="55408378cdb99ceccff139c18cc6207f24f30564" translate="yes" xml:space="preserve">
          <source>Day.nanos</source>
          <target state="translated">Day.nanos</target>
        </trans-unit>
        <trans-unit id="23766d26d15dcb4a941cb0effd65efa273799a9f" translate="yes" xml:space="preserve">
          <source>Day.normalize</source>
          <target state="translated">Day.normalize</target>
        </trans-unit>
        <trans-unit id="f22f0cf24d70e298a3e2269bd243a8060545f135" translate="yes" xml:space="preserve">
          <source>Day.onOffset()</source>
          <target state="translated">Day.onOffset()</target>
        </trans-unit>
        <trans-unit id="90922713065cbb7cfb9e1c56d447e4561cbfb2ea" translate="yes" xml:space="preserve">
          <source>Day.rollback()</source>
          <target state="translated">Day.rollback()</target>
        </trans-unit>
        <trans-unit id="04ce1bd0d927404128fdd5513b113846684c305c" translate="yes" xml:space="preserve">
          <source>Day.rollforward()</source>
          <target state="translated">Day.rollforward()</target>
        </trans-unit>
        <trans-unit id="6d9ec265eb819541b52e8c398cd94aaeab34190e" translate="yes" xml:space="preserve">
          <source>Day.rule_code</source>
          <target state="translated">Day.rule_code</target>
        </trans-unit>
        <trans-unit id="36c5bba45bec327196a85e65652eaeb50c92e059" translate="yes" xml:space="preserve">
          <source>Days: &amp;lsquo;D&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f775329a5b94da0d8b124d7e0ac6a8c3f9336607" translate="yes" xml:space="preserve">
          <source>Debian</source>
          <target state="translated">Debian</target>
        </trans-unit>
        <trans-unit id="a32688868e6a19f869b76003ac5cdc315486f53e" translate="yes" xml:space="preserve">
          <source>Debian &amp;amp; Ubuntu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa2090435b79b51172d33b3b889c859ab67dd18" translate="yes" xml:space="preserve">
          <source>Debugging Tip: If you&amp;rsquo;re having trouble writing your style function, try just passing it into DataFrame.apply. Internally, Styler.apply uses DataFrame.apply so the result should be the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7553eeb24c79214f77e3ff502b14115dfc75543f" translate="yes" xml:space="preserve">
          <source>Decode character string in the Series/Index using indicated encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7685bbdabc05c795013058cb5d3ea6218af190" translate="yes" xml:space="preserve">
          <source>Decode character string in the Series/Index using indicated encoding. Equivalent to &lt;code&gt;str.decode()&lt;/code&gt; in python2 and &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#bytes.decode&quot;&gt;&lt;code&gt;bytes.decode()&lt;/code&gt;&lt;/a&gt; in python3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5201b121c642c7cf3ef4f05507b89ed7003825" translate="yes" xml:space="preserve">
          <source>Deep copy has own copy of data and index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6fe66ae27d0a93c464fc648526ddf2c9e11d9b" translate="yes" xml:space="preserve">
          <source>Default &amp;lsquo;None&amp;rsquo; results in equal probability weighting. If passed a Series, will align with target object on index. Index values in weights not found in sampled object will be ignored and index values in sampled object not in weights will be assigned weights of zero. If called on a DataFrame, will accept the name of a column when axis = 0. Unless weights are a Series, weights must be same length as axis being sampled. If weights do not sum to 1, they will be normalized to sum to 1. Missing values in the weights column will be treated as zero. Infinite values not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdd838609a927ab98eafc2c3b897470f2e68e03" translate="yes" xml:space="preserve">
          <source>Default NA value to use for this type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b609c665af54d6a554ba5b87d93c2d3d0c9660" translate="yes" xml:space="preserve">
          <source>Default behaviour checks if column-wise values all return True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51204f07d8ca6acb3b5c18425f3daf4e71d5751d" translate="yes" xml:space="preserve">
          <source>Default is latin-1. Unicode is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06028ba62d62eab819b2f4e164d6b91b068570b" translate="yes" xml:space="preserve">
          <source>Default usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23009cb11a46866d019f3b829b15c35473373b1a" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;0&lt;/code&gt;: 1st sheet as a &lt;code&gt;DataFrame&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984145cedd87d3438e33ebb68e80aa68dbebdc37" translate="yes" xml:space="preserve">
          <source>Defaults to csv.QUOTE_MINIMAL. If you have set a &lt;code&gt;float_format&lt;/code&gt; then floats are converted to strings and thus csv.QUOTE_NONNUMERIC will treat them as non-numeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18dd638b0b231cd50b563eeed6291b4526811e15" translate="yes" xml:space="preserve">
          <source>Define &lt;code&gt;_internal_names&lt;/code&gt; and &lt;code&gt;_internal_names_set&lt;/code&gt; for temporary properties which WILL NOT be passed to manipulation results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47cce0982b881670cab38827a6bfcd52d3eac5d" translate="yes" xml:space="preserve">
          <source>Define &lt;code&gt;_metadata&lt;/code&gt; for normal properties which will be passed to manipulation results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf5dd3a6df4858d136f9450de0b969d4c898af1" translate="yes" xml:space="preserve">
          <source>Define a custom function that needs additional positional arguments and pass these additional arguments using the &lt;code&gt;args&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce9049822e516697c535f331996f5153d1d6b7d" translate="yes" xml:space="preserve">
          <source>Define a custom function that takes keyword arguments and pass these arguments to &lt;code&gt;apply&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41be194eaa1ba6584b4386068915bc986b7a61da" translate="yes" xml:space="preserve">
          <source>Define default roll function to be called in apply method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d9bcb7aa6740b2b39453aa8b0a8546072aa477" translate="yes" xml:space="preserve">
          <source>Define each of the operators on your &lt;code&gt;ExtensionArray&lt;/code&gt; subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c490b81ba8c36e410b0c00a7c4b11fe4c04a56" translate="yes" xml:space="preserve">
          <source>Define in which columns to look for missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5269ea82acc06098716d4a6585d5d4472cb2d0b2" translate="yes" xml:space="preserve">
          <source>Define original properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97df4d92ee5f3a20806fe053873877166d8182f2" translate="yes" xml:space="preserve">
          <source>Define the reference date. The numeric values would be parsed as number of units (defined by &lt;code&gt;unit&lt;/code&gt;) since this reference date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c020878684406748e3a2bcdb186152fb8ba2a4e2" translate="yes" xml:space="preserve">
          <source>Degrees of freedom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d3c3ecbcaeda3cbe46723f878858a96145df4b" translate="yes" xml:space="preserve">
          <source>Delete columns to be used as the new index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee9f29a70b60aef3ea71dc44268ebb8a3f6a236" translate="yes" xml:space="preserve">
          <source>Delete your merged branch (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619c4c425d78d74fcf97b244a6522e35db3f2fa8" translate="yes" xml:space="preserve">
          <source>Deleting file with data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3defb0598dfa2546769f9225de488dde7568bc8b" translate="yes" xml:space="preserve">
          <source>Delimiter to use between list entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a357591781595ca2c1d3b5130697caef8bf1d4" translate="yes" xml:space="preserve">
          <source>Delimiter to use. If sep is &lt;code&gt;None&lt;/code&gt;, the C engine cannot automatically detect the separator, but the Python parsing engine can, meaning the latter will be used and automatically detect the separator by Python&amp;rsquo;s builtin sniffer tool, &lt;a href=&quot;https://docs.python.org/3/library/csv.html#csv.Sniffer&quot;&gt;&lt;code&gt;csv.Sniffer&lt;/code&gt;&lt;/a&gt;. In addition, separators longer than 1 character and different from &lt;code&gt;'\s+'&lt;/code&gt; will be interpreted as regular expressions and will also force the use of the Python parsing engine. Note that regex delimiters are prone to ignoring quoted data. Regex example: &lt;code&gt;'\\r\\t'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334213c5c1307ebc69b94287a58e8b064c8b92bf" translate="yes" xml:space="preserve">
          <source>Delimiter to use. If sep is None, the C engine cannot automatically detect the separator, but the Python parsing engine can, meaning the latter will be used and automatically detect the separator by Python&amp;rsquo;s builtin sniffer tool, &lt;code&gt;csv.Sniffer&lt;/code&gt;. In addition, separators longer than 1 character and different from &lt;code&gt;'\s+'&lt;/code&gt; will be interpreted as regular expressions and will also force the use of the Python parsing engine. Note that regex delimiters are prone to ignoring quoted data. Regex example: &lt;code&gt;'\r\t'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c07d2485017871a86e2b6891af9169b2205dae9" translate="yes" xml:space="preserve">
          <source>Delta Degrees of Freedom. The divisor used in calculations is &lt;code&gt;N - ddof&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; represents the number of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9541d46ce74de554740c22fd3c98441b136c83a" translate="yes" xml:space="preserve">
          <source>Delta Degrees of Freedom. The divisor used in calculations is N - ddof, where N represents the number of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c10cf8fb59528be413dbe4a37baea79ee6bf447" translate="yes" xml:space="preserve">
          <source>Demonstrating the preference of the passed in dataframe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f3d12a3630fde2fbd3505ef2ece854e63e19bd" translate="yes" xml:space="preserve">
          <source>Denote the unit of the input, if input is an integer. Default &amp;lsquo;ns&amp;rsquo;. Possible values: {&amp;lsquo;Y&amp;rsquo;, &amp;lsquo;M&amp;rsquo;, &amp;lsquo;W&amp;rsquo;, &amp;lsquo;D&amp;rsquo;, &amp;lsquo;days&amp;rsquo;, &amp;lsquo;day&amp;rsquo;, &amp;lsquo;hours&amp;rsquo;, hour&amp;rsquo;, &amp;lsquo;hr&amp;rsquo;, &amp;lsquo;h&amp;rsquo;, &amp;lsquo;m&amp;rsquo;, &amp;lsquo;minute&amp;rsquo;, &amp;lsquo;min&amp;rsquo;, &amp;lsquo;minutes&amp;rsquo;, &amp;lsquo;T&amp;rsquo;, &amp;lsquo;S&amp;rsquo;, &amp;lsquo;seconds&amp;rsquo;, &amp;lsquo;sec&amp;rsquo;, &amp;lsquo;second&amp;rsquo;, &amp;lsquo;ms&amp;rsquo;, &amp;lsquo;milliseconds&amp;rsquo;, &amp;lsquo;millisecond&amp;rsquo;, &amp;lsquo;milli&amp;rsquo;, &amp;lsquo;millis&amp;rsquo;, &amp;lsquo;L&amp;rsquo;, &amp;lsquo;us&amp;rsquo;, &amp;lsquo;microseconds&amp;rsquo;, &amp;lsquo;microsecond&amp;rsquo;, &amp;lsquo;micro&amp;rsquo;, &amp;lsquo;micros&amp;rsquo;, &amp;lsquo;U&amp;rsquo;, &amp;lsquo;ns&amp;rsquo;, &amp;lsquo;nanoseconds&amp;rsquo;, &amp;lsquo;nano&amp;rsquo;, &amp;lsquo;nanos&amp;rsquo;, &amp;lsquo;nanosecond&amp;rsquo;, &amp;lsquo;N&amp;rsquo;}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd93b5533bbb4955fbfa79b2c758967653ebbac" translate="yes" xml:space="preserve">
          <source>Denotes the unit of the arg. Possible values: (&amp;lsquo;Y&amp;rsquo;, &amp;lsquo;M&amp;rsquo;, &amp;lsquo;W&amp;rsquo;, &amp;lsquo;D&amp;rsquo;, &amp;lsquo;days&amp;rsquo;, &amp;lsquo;day&amp;rsquo;, &amp;lsquo;hours&amp;rsquo;, hour&amp;rsquo;, &amp;lsquo;hr&amp;rsquo;, &amp;lsquo;h&amp;rsquo;, &amp;lsquo;m&amp;rsquo;, &amp;lsquo;minute&amp;rsquo;, &amp;lsquo;min&amp;rsquo;, &amp;lsquo;minutes&amp;rsquo;, &amp;lsquo;T&amp;rsquo;, &amp;lsquo;S&amp;rsquo;, &amp;lsquo;seconds&amp;rsquo;, &amp;lsquo;sec&amp;rsquo;, &amp;lsquo;second&amp;rsquo;, &amp;lsquo;ms&amp;rsquo;, &amp;lsquo;milliseconds&amp;rsquo;, &amp;lsquo;millisecond&amp;rsquo;, &amp;lsquo;milli&amp;rsquo;, &amp;lsquo;millis&amp;rsquo;, &amp;lsquo;L&amp;rsquo;, &amp;lsquo;us&amp;rsquo;, &amp;lsquo;microseconds&amp;rsquo;, &amp;lsquo;microsecond&amp;rsquo;, &amp;lsquo;micro&amp;rsquo;, &amp;lsquo;micros&amp;rsquo;, &amp;lsquo;U&amp;rsquo;, &amp;lsquo;ns&amp;rsquo;, &amp;lsquo;nanoseconds&amp;rsquo;, &amp;lsquo;nano&amp;rsquo;, &amp;lsquo;nanos&amp;rsquo;, &amp;lsquo;nanosecond&amp;rsquo;, &amp;lsquo;N&amp;rsquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3268dea879d3c12934aff719dafbe2a33c353220" translate="yes" xml:space="preserve">
          <source>Dense %(klass)s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="ce311abe7bbcb35898a8ac0bf7c2dca01106d8f6" translate="yes" xml:space="preserve">
          <source>Dependency</source>
          <target state="translated">Dependency</target>
        </trans-unit>
        <trans-unit id="cbd3327b95edcd6d65e097b28547b322a7019db8" translate="yes" xml:space="preserve">
          <source>Depending on system architecture, the return value of &lt;code&gt;is_int64_dtype( int)&lt;/code&gt; will be True if the OS uses 64-bit integers and False if the OS uses 32-bit integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14f13487f791240c4fb7fb356d50f4a2d8f3be0" translate="yes" xml:space="preserve">
          <source>Depends on the calling object and returns groupby object that contains information about the groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2e3910ab7980079912d39160b5730f453cf10c" translate="yes" xml:space="preserve">
          <source>Deprecated in pandas-gbq version 0.4.0. Use the &lt;a href=&quot;https://pandas-gbq.readthedocs.io/en/latest/intro.html#logging&quot;&gt;logging module to adjust verbosity instead&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3629d11c8cb3a6eed1b2dbd3d0740bb8a73c71aa" translate="yes" xml:space="preserve">
          <source>Deprecated in pandas-gbq version 0.8.0. Use the &lt;code&gt;credentials&lt;/code&gt; parameter and &lt;code&gt;google.oauth2.service_account.Credentials.from_service_account_info()&lt;/code&gt; or &lt;code&gt;google.oauth2.service_account.Credentials.from_service_account_file()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e7f0fbf3cac299ca80b86937d3d24eb70bd4a1" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.18.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738817c7402e52840e3e59fc424283da920b8428" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.18.0: The new syntax is &lt;code&gt;.resample(...).&amp;lt;func&amp;gt;()&lt;/code&gt;, e.g. &lt;code&gt;.resample(...).pad()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9f339365503a0a4c18f99ced916c2821723b48" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.18.0: The new syntax is &lt;code&gt;.resample(...).mean()&lt;/code&gt;, or &lt;code&gt;.resample(...).apply(&amp;lt;func&amp;gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ceeacf55ab16f6ab86e00f01865ef3071d20e3" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.21.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e354b29d2f596a24cc569bfeae8ebbb210e35b8c" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.21.0: Please use .at[] or .iat[] accessors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c93a7897eed170854472bfccc9055fce8418f59" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.21.0: Use .at[] or .iat[] accessors instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0e2f146a5f77ac153976b026e705e401bbf058" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeaf06a66b922ec5aa760eb9a328b97c0276ef3a" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: &lt;code&gt;from_items&lt;/code&gt; is deprecated and will be removed in a future version. Use &lt;a href=&quot;pandas.dataframe.from_dict#pandas.DataFrame.from_dict&quot;&gt;&lt;code&gt;DataFrame.from_dict(dict(items))&lt;/code&gt;&lt;/a&gt; instead. &lt;a href=&quot;pandas.dataframe.from_dict#pandas.DataFrame.from_dict&quot;&gt;&lt;code&gt;DataFrame.from_dict(OrderedDict(items))&lt;/code&gt;&lt;/a&gt; may be used to preserve the key order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17e8f3b1d82702ed9bdfbbcb44d41f12aacceec" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: Pass tuple or list to drop on multiple axes. Only a single axis is allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8930a8f9cc2fcd532cee633dd9c1299fe4e59a87" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: This argument will be removed in a future version, replaced by &lt;code&gt;result_type='reduce'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bebcf26d7d6529913c812aabb58f78867505074" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: This argument will be removed in a future version, replaced by result_type=&amp;rsquo;broadcast&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0874837ef3732213c686c8150976fe9e1d1a04c5" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: This parameter has no effect and is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a3fae799637772b8a479c797adc9fa7c03bd6b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: Use &lt;a href=&quot;pandas.dataframe.values#pandas.DataFrame.values&quot;&gt;&lt;code&gt;DataFrame.values()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca72c69cb5f8ed982ed66889d400b10fd708637" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: Use &lt;a href=&quot;pandas.series.dropna#pandas.Series.dropna&quot;&gt;&lt;code&gt;Series.dropna()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64aa3717f2977274ec9052e94f6859470748cea" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: Use &lt;code&gt;Timestamp.day_name()&lt;/code&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cffdf280b31bc965daa9b1f9099f802cfd40102" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: Use &lt;code&gt;astype(object)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4516168b9cac245b036409f485cbf25c2d9f19b5" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: Use &lt;code&gt;skipfooter&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214f1248b35176c68df59a957ec4cfda046cce04" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: Use idx[idx.duplicated()].unique() instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b265a3e48f3588f8583de27cc8146953172126" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.23.0: Use pd.Series(..) constructor instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66a47ec149dbf6e38214dc41d181a00961a0c2c" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb16b3789e25fe10cf972689e207abe9e6ff8a8" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0: Pass in a list of int instead from 0 to &lt;code&gt;usecols&lt;/code&gt; inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7f575a7823b281b3ebe158d4e131726da889c4" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0: Please use .to_numpy().nonzero() as a replacement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b92115e6fb269305cd6bcc890070837b2bea1e" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0: Use &lt;a href=&quot;pandas.api.extensions.extensionarray._formatter#pandas.api.extensions.ExtensionArray._formatter&quot;&gt;&lt;code&gt;ExtensionArray._formatter()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77dd9ef643b900ffcc1ea704f5ba448bc692d6c6" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0: Use &lt;code&gt;codes&lt;/code&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9391d795e79172f36abed1e409744d9d6b6ddcb" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0: Use &lt;code&gt;sep&lt;/code&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935dfb5cddbcb1e21fa4ae23d9e129d31c643256" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0: Use clip(lower=threshold) instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63be3a5defd58c818b13b77f9c2c01e9a5ba5485" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0: Use clip(upper=threshold) instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e5bc4f184a9fc2e44ba6ee6412fcd43187e4c1" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.0: Use numpy.ptp instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213448d9efe7145332d478e91bd250176695962e" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.24.: 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf5754e361d6b1d1aefae624b438edb3a46c343" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50084206097c4613c96695a985961645cc470e2" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;a href=&quot;pandas.dataframe.dtypes#pandas.DataFrame.dtypes&quot;&gt;&lt;code&gt;dtypes()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c0ee2f4d5e76afc025920c64131e3072a6b1d5" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;a href=&quot;pandas.index.to_numpy#pandas.Index.to_numpy&quot;&gt;&lt;code&gt;Index.to_numpy()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pandas.index.array#pandas.Index.array&quot;&gt;&lt;code&gt;Index.array&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2386d70e106eb88343e431f44644e9fda4fb223f" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;a href=&quot;pandas.series.dtype#pandas.Series.dtype&quot;&gt;&lt;code&gt;dtype()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21620fafc8ac6f5d753f75b9a8c6ca9b23760bd" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;a href=&quot;pandas.series.dtypes#pandas.Series.dtypes&quot;&gt;&lt;code&gt;dtypes()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3269dea074d5713baebf8b02dce18bd2331b596c" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;a href=&quot;pandas.series.to_numpy#pandas.Series.to_numpy&quot;&gt;&lt;code&gt;Series.to_numpy()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pandas.series.array#pandas.Series.array&quot;&gt;&lt;code&gt;Series.array&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415df08b0228e04648de2f9661bdfcc0e558e6f8" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;a href=&quot;pandas.series.to_numpy#pandas.Series.to_numpy&quot;&gt;&lt;code&gt;Series.to_numpy()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pandas.timedelta.to_timedelta64#pandas.Timedelta.to_timedelta64&quot;&gt;&lt;code&gt;Timedelta.to_timedelta64()&lt;/code&gt;&lt;/a&gt; instead to get an ndarray of values or numpy.timedelta64, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bcff7c598ceddf510d16720ee47c490fa970c1" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;a href=&quot;pandas.series.to_numpy#pandas.Series.to_numpy&quot;&gt;&lt;code&gt;Series.to_numpy()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pandas.timestamp.to_datetime64#pandas.Timestamp.to_datetime64&quot;&gt;&lt;code&gt;Timestamp.to_datetime64()&lt;/code&gt;&lt;/a&gt; instead to get an ndarray of values or numpy.datetime64, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0793f59e302c3832105d10e872d711d22e506bc7" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;code&gt;key in index&lt;/code&gt; instead of &lt;code&gt;index.contains(key)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb8f3298c72b850d89baf075ffd5073f161f23f" translate="yes" xml:space="preserve">
          <source>Deprecated since version 0.25.0: Use &lt;code&gt;np.asarray(..)&lt;/code&gt; or &lt;a href=&quot;pandas.dataframe.values#pandas.DataFrame.values&quot;&gt;&lt;code&gt;DataFrame.values()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3942ecb35bbbbc15558d8c0b1e7129c3529f17e4" translate="yes" xml:space="preserve">
          <source>Deprecated since version This: is a legacy method. Use &lt;code&gt;read&lt;/code&gt; in new code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08711f64f423731c7330b0535ddc04501bf9c143" translate="yes" xml:space="preserve">
          <source>Describes 52-53 week fiscal year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a584196c8ed45b918e61f54d6e94e484516c97" translate="yes" xml:space="preserve">
          <source>Describes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e855f106e23ca5ea95761bab9aa7262fdf959a6" translate="yes" xml:space="preserve">
          <source>Describes monthly dates in last week of month like &amp;ldquo;the last Tuesday of each month&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd70b76af50cbb1904b21bd68578f7ad13c2547b" translate="yes" xml:space="preserve">
          <source>Describes monthly dates like &amp;ldquo;the Tuesday of the 2nd week of each month&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad164399ae41c9e127997d35986642ade6bf5e3" translate="yes" xml:space="preserve">
          <source>Describing a &lt;code&gt;DataFrame&lt;/code&gt;. By default only numeric fields are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e108ef4796b534ff4070e40d3a780cd1073692ac" translate="yes" xml:space="preserve">
          <source>Describing a categorical &lt;code&gt;Series&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a388edc3aaa790a3a22db027770ea13372b5696" translate="yes" xml:space="preserve">
          <source>Describing a column from a &lt;code&gt;DataFrame&lt;/code&gt; by accessing it as an attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c614c571580533465cf59f211e96b14db2911594" translate="yes" xml:space="preserve">
          <source>Describing a numeric &lt;code&gt;Series&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4929232981b5f4e35ff2e847c0a0e527a49143ef" translate="yes" xml:space="preserve">
          <source>Describing a timestamp &lt;code&gt;Series&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087375cce23a3ff5aa74a3348020f8e9021a8023" translate="yes" xml:space="preserve">
          <source>Describing all columns of a &lt;code&gt;DataFrame&lt;/code&gt; regardless of data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="d024012fa6528361117a8641ebca223f7d84006e" translate="yes" xml:space="preserve">
          <source>Descriptive statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cecb11a83e2c077100089610c088dfc121e49f" translate="yes" xml:space="preserve">
          <source>Desired frequency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6975a8458b53a883ea7d85cbdc6c478c2d7dd14d" translate="yes" xml:space="preserve">
          <source>Despite the warning, the CSV file is read with mixed types in a single column which will be an object type. See the examples below to better understand this issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8776e18513aab3d2da031d4c8b33fb7812dfe1" translate="yes" xml:space="preserve">
          <source>Details and a sample callable implementation can be found in the section &lt;a href=&quot;../../user_guide/io#io-sql-method&quot;&gt;insert method&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7b39104f987dc7f1f8ab2ec9b450ef6ad1109d" translate="yes" xml:space="preserve">
          <source>Detect existing (non-missing) values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fec0d52173b1d17cfd4e4ab85adecba72693d46" translate="yes" xml:space="preserve">
          <source>Detect missing value markers (empty strings and the value of na_values). In data without any NAs, passing na_filter=False can improve the performance of reading a large file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61856c1bffc845c29ccc92da44e3aee4b69aa8e" translate="yes" xml:space="preserve">
          <source>Detect missing values for an array-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9648506c71cac54257b79e13ddd5440217d3ea2" translate="yes" xml:space="preserve">
          <source>Detect missing values in Series object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e694a9f7e6a05afa1ec8ad5cd3f2d5d65b7a3006" translate="yes" xml:space="preserve">
          <source>Detect missing values in a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2ca3ed6115c637f8ed0e563c56615c66cee19b" translate="yes" xml:space="preserve">
          <source>Detect missing values in a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f94c42954c2676a856265f163f4cfc34f89c54" translate="yes" xml:space="preserve">
          <source>Detect missing values in an Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230430e3a7523d5b3c891cb5f19aebdcdfbdde2b" translate="yes" xml:space="preserve">
          <source>Detect missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1208fc52bf4ad16f0d8bdda0d84f44fdf31d9219" translate="yes" xml:space="preserve">
          <source>Detect non-missing values for an array-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbd945a55b4062647bcd0cf2c35473e843ab4a3" translate="yes" xml:space="preserve">
          <source>Detect valid values in a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e4f1f9274614d619b0add57c36eec867533f73" translate="yes" xml:space="preserve">
          <source>Detect valid values in a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c45fe6ec2033bad98dc5f94b082d13544413477" translate="yes" xml:space="preserve">
          <source>Detect valid values in an Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab7e348c0c6da3a95c7ebd269531c3ed0fa2230" translate="yes" xml:space="preserve">
          <source>Determine if each string matches a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84195e171d31ae2af5c207d5ff82710a67928c0b" translate="yes" xml:space="preserve">
          <source>Determine if row or column is removed from DataFrame, when we have at least one NA or all NA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97faeb32c51070d38e846fafb4dad33d3bd979a" translate="yes" xml:space="preserve">
          <source>Determine if rows or columns which contain missing values are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53043822f64f3cb5b52b71dbf85c366b5d596563" translate="yes" xml:space="preserve">
          <source>Determine if two CategoricalIndex objects contain the same elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf663ff3e02b4450327fd1ee7891d66f4f2119c1" translate="yes" xml:space="preserve">
          <source>Determine if two Index objects contain the same elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2bc1a06de6be23b2fea079e726290dbccdc4e2" translate="yes" xml:space="preserve">
          <source>Determines the join-style between the calling Series/Index and any Series/Index/DataFrame in &lt;code&gt;others&lt;/code&gt; (objects without an index need to match the length of the calling Series/Index). If None, alignment is disabled, but this option will be removed in a future version of pandas and replaced with a default of &lt;code&gt;&amp;lsquo;left&amp;rsquo;&lt;/code&gt;. To disable alignment, use &lt;code&gt;.values&lt;/code&gt; on any Series/Index/DataFrame in &lt;code&gt;others&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366d46811e71f358c6898fc7063bacd56e9148e0" translate="yes" xml:space="preserve">
          <source>Determines the type of the values of the dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e08ebec5e6f80a136fa4076e041dd0c811a5e70" translate="yes" xml:space="preserve">
          <source>Developer</source>
          <target state="translated">Developer</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Development</target>
        </trans-unit>
        <trans-unit id="86ce22df3c3077e7dd49013f230f3fdf6ed9ff9d" translate="yes" xml:space="preserve">
          <source>Development team</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0902dad72d5174da2899bd03df9dc4fb801096cc" translate="yes" xml:space="preserve">
          <source>Dict can contain Series, arrays, constants, or list-like objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf32d65c882e0cd51c59559bd9b63802befc24a1" translate="yes" xml:space="preserve">
          <source>Dict of &lt;code&gt;{column_name: arg dict}&lt;/code&gt;, where the arg dict corresponds to the keyword arguments of &lt;a href=&quot;pandas.to_datetime#pandas.to_datetime&quot;&gt;&lt;code&gt;pandas.to_datetime()&lt;/code&gt;&lt;/a&gt; Especially useful with databases without native Datetime support, such as SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96350a85d4742aa07abdedbb44c9a5176ccf89a0" translate="yes" xml:space="preserve">
          <source>Dict of &lt;code&gt;{column_name: format string}&lt;/code&gt; where format string is strftime compatible in case of parsing string times or is one of (D, s, ns, ms, us) in case of parsing integer timestamps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abb5a10e7722f6c76429111237c03c8b43f806c" translate="yes" xml:space="preserve">
          <source>Dict of &lt;code&gt;{column_name: format string}&lt;/code&gt; where format string is strftime compatible in case of parsing string times, or is one of (D, s, ns, ms, us) in case of parsing integer timestamps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbac9ab6cd7b6052e5c056dece8ddff7b8f410de" translate="yes" xml:space="preserve">
          <source>Dict of functions for converting values in certain columns. Keys can either be integers or column labels, values are functions that take one input argument, the Excel cell content, and return the transformed content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c120a46216503cae856a9d2983f8fb9b9366f5" translate="yes" xml:space="preserve">
          <source>Dict of functions for converting values in certain columns. Keys can either be integers or column labels, values are functions that take one input argument, the cell (not column) content, and return the transformed content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84562a3d495d43e1a45b61c0eda056523788b154" translate="yes" xml:space="preserve">
          <source>Dict of functions for converting values in certain columns. Keys can either be integers or column labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3cc830b3fc711d26ee2bda9e55cc95835982de" translate="yes" xml:space="preserve">
          <source>Dict {group name -&amp;gt; group indices}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1926b201f314f2d43cd1a6c9b16968521545d30b" translate="yes" xml:space="preserve">
          <source>Dict {group name -&amp;gt; group labels}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9aa0d50a36607d74b260092fd2deb5597c047ee" translate="yes" xml:space="preserve">
          <source>Dict-like or functions transformations to apply to that axis&amp;rsquo; values. Use either &lt;code&gt;mapper&lt;/code&gt; and &lt;code&gt;axis&lt;/code&gt; to specify the axis to target with &lt;code&gt;mapper&lt;/code&gt;, or &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;columns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fe5e160be8582a74338c557c03d6fc8ceb9e6d" translate="yes" xml:space="preserve">
          <source>Dictionary containing columns as keys and variable labels as values. Each label must be 80 characters or smaller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f11ef052925719ded671269c6bdf0ba563def6" translate="yes" xml:space="preserve">
          <source>Dictionary mapping columns containing datetime types to stata internal format to use when writing the dates. Options are &amp;lsquo;tc&amp;rsquo;, &amp;lsquo;td&amp;rsquo;, &amp;lsquo;tm&amp;rsquo;, &amp;lsquo;tw&amp;rsquo;, &amp;lsquo;th&amp;rsquo;, &amp;lsquo;tq&amp;rsquo;, &amp;lsquo;ty&amp;rsquo;. Column can be either an integer or a name. Datetime columns that do not have a conversion type specified will be converted to &amp;lsquo;tc&amp;rsquo;. Raises NotImplementedError if a datetime column has timezone information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987c65b6f35bdca30438ea557c8a8f8b81cbf542" translate="yes" xml:space="preserve">
          <source>Dictionary-like &lt;code&gt;get()&lt;/code&gt; method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e605e8140a5b5bbd5003492028b2f67df1b0f4" translate="yes" xml:space="preserve">
          <source>Dicts can be used to specify different replacement values for different existing values. For example, &lt;code&gt;{'a': 'b', 'y': 'z'}&lt;/code&gt; replaces the value &amp;lsquo;a&amp;rsquo; with &amp;lsquo;b&amp;rsquo; and &amp;lsquo;y&amp;rsquo; with &amp;lsquo;z&amp;rsquo;. To use a dict in this way the &lt;code&gt;value&lt;/code&gt; parameter should be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5bb0d5d04e6c946ce32644884c585f68a345d95" translate="yes" xml:space="preserve">
          <source>Difference with 3rd previous row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebb679cd89fa76c6228409c8bc3264b3502458a" translate="yes" xml:space="preserve">
          <source>Difference with following row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caaa4211c7486e88a5ec72b62c8bd09796837690" translate="yes" xml:space="preserve">
          <source>Difference with previous column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef6726777cabe03465c33b3ace58d633f53a804" translate="yes" xml:space="preserve">
          <source>Difference with previous row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3be562677bcefcde2f1c5e021f115689629af1" translate="yes" xml:space="preserve">
          <source>Differences to R&amp;rsquo;s &lt;code&gt;factor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0125b19cf6faba9b7faf01e02bba65b6789d4df2" translate="yes" xml:space="preserve">
          <source>Differences with NumPy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47ed5e734b08b79a895b0f83243e6b5a6fef9b2" translate="yes" xml:space="preserve">
          <source>Different aggregations per column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d7957d98e91c7100d80bcc590e0e1c84731660" translate="yes" xml:space="preserve">
          <source>Different choices for indexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3c6a073fd35949ae60e47ab648308351ac232f" translate="yes" xml:space="preserve">
          <source>Differs from &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.zfill&quot;&gt;&lt;code&gt;str.zfill()&lt;/code&gt;&lt;/a&gt; which has special handling for &amp;lsquo;+&amp;rsquo;/&amp;rsquo;-&amp;lsquo; in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4ca9ec08715def4a822d25f75f2d9b79b931c0" translate="yes" xml:space="preserve">
          <source>Dimensions</source>
          <target state="translated">Dimensions</target>
        </trans-unit>
        <trans-unit id="6f8bef093eafc9c538893eade2d7483eb293a3bd" translate="yes" xml:space="preserve">
          <source>Direct decoding to numpy arrays. Supports numeric data only, but non-numeric column and index labels are supported. Note also that the JSON ordering MUST be the same for each term if numpy=True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164e0b79063f11a2936cf830fb48b8c7054cc118" translate="yes" xml:space="preserve">
          <source>Directive</source>
          <target state="translated">Directive</target>
        </trans-unit>
        <trans-unit id="60613c086633cd24de6ca21378fb05965c58f618" translate="yes" xml:space="preserve">
          <source>Discard data that belongs to groups with only a few members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7798b0cd0a7f417836b84571b613db8655935d4f" translate="yes" xml:space="preserve">
          <source>Discovers the same bins, but assign them specific labels. Notice that the returned Categorical&amp;rsquo;s categories are &lt;code&gt;labels&lt;/code&gt; and is ordered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7817596db97f58b1773a8198e256819db452c2" translate="yes" xml:space="preserve">
          <source>Discretize continuous-valued array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c2db5e8ae6921e662a015ebed612bf2cd638bc" translate="yes" xml:space="preserve">
          <source>Discretize into three equal-sized bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248dd3503a9b89fe2bf72512c4cc1ab897525708" translate="yes" xml:space="preserve">
          <source>Discretize variable into equal-sized buckets based on rank or based on sample quantiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af6eb76847b9d3f14a4231075e1fc50761d56eb" translate="yes" xml:space="preserve">
          <source>Dispatching to instance methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a15079af236d40fc62120e55ec0da3b4f955d2" translate="yes" xml:space="preserve">
          <source>Display DataFrame dimensions (number of rows by number of columns).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ec1d446512ec9a0caf4a874ed7910693a608e8" translate="yes" xml:space="preserve">
          <source>Display more information in the error logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79ff1d47ce799f960a27c6d9c56ec3aa4f8e78b" translate="yes" xml:space="preserve">
          <source>Distinguish between these and other types by trying the call to hash() and seeing if they raise TypeError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3c457cbe3e35739086346e0a4048653efa42e7" translate="yes" xml:space="preserve">
          <source>Distribution</source>
          <target state="translated">Distribution</target>
        </trans-unit>
        <trans-unit id="92a9cdf2167435ad2973e99f97b1ee21d41caa94" translate="yes" xml:space="preserve">
          <source>Divide DataFrames (float division).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1c10e8fa2b29b84763b8c0e3d19f7417c67e26" translate="yes" xml:space="preserve">
          <source>Divide DataFrames (integer division).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068762a2f44e41ca6b56c260e9639cf3c322f4d3" translate="yes" xml:space="preserve">
          <source>Divide by a MultiIndex by level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632b9fb8616cb56fe8a5d7dcc44cab9bbe8fe7e6" translate="yes" xml:space="preserve">
          <source>Divide by constant with reverse version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec4252b070f8ce9720bf7b4b75551b77a84fa5b" translate="yes" xml:space="preserve">
          <source>Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings (viewing EWMA as a moving average).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b67bbf0b93e33ab35641c94df5a6312e323fa04" translate="yes" xml:space="preserve">
          <source>Do not include columns whose entries are all NaN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769226359b4bac955ffcc9a69f46d4018963306d" translate="yes" xml:space="preserve">
          <source>Do not include columns whose entries are all NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11923b64a05d45653206bba98fbcdcb42780f69c" translate="yes" xml:space="preserve">
          <source>Do not try to insert index into dataframe columns. This resets the index to the default integer index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf53b770936e50ba7fa7a0c622f2ab2e6410fe3f" translate="yes" xml:space="preserve">
          <source>Do note that this tool is best-effort, meaning that it will try to correct as many errors as possible, but it may not correct &lt;em&gt;all&lt;/em&gt; of them. Thus, it is recommended that you run &lt;code&gt;cpplint&lt;/code&gt; to double check and make any other style fixes manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e74b196b30a15ffad04b19040262ef87d25db2" translate="yes" xml:space="preserve">
          <source>Docstrings must be defined with three double-quotes. No blank lines should be left before or after the docstring. The text starts in the next line after the opening quotes. The closing quotes have their own line (meaning that they are not at the end of the last sentence).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0350dc3257153d84758ae6cd511caacb10aa9d" translate="yes" xml:space="preserve">
          <source>Documentation:</source>
          <target state="translated">Documentation:</target>
        </trans-unit>
        <trans-unit id="19b346dbaee5e0d711986b82632950a569fa0424" translate="yes" xml:space="preserve">
          <source>Documenting your code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2089b963c183d321dffacd391881704b015f6c" translate="yes" xml:space="preserve">
          <source>Does &lt;em&gt;not&lt;/em&gt; check if data being appended overlaps with existing data in the table, so be careful</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02eed1bba36c1e37920c000db6edf8be68eff77" translate="yes" xml:space="preserve">
          <source>Does not sort by remaining levels when sorting by levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2193f06b47266f34d976a6ef76e332cd0d5df2ef" translate="yes" xml:space="preserve">
          <source>Doing &amp;lsquo;git status&amp;rsquo; again should give something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f425d97f507545e758977b195e5e2e478f5337" translate="yes" xml:space="preserve">
          <source>Domain specific</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d8935c61723e99c64d77cee80ff285eb3dd32e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t consider counts of NaN/NaT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4afb66e6c2a7b2873815ed684833d2c53e6e854" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t include NaN in the count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758dfe524bfd9d313a243a608577a6cb704725dc" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t include NaN in the counts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8221ee9fd2dbee40e363f9709dd51471d4bfe9b" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t include counts of NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdb38b5494f71f96d93123a705ba3b1b039803b" translate="yes" xml:space="preserve">
          <source>Downcast dtypes if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fdcbeedb3886ad9d2e75a01a954575ecd0103f" translate="yes" xml:space="preserve">
          <source>Download / Repository Link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae76478103995f3248cc3177c55b578bc6279c2" translate="yes" xml:space="preserve">
          <source>Downsample the DataFrame into 3 minute bins and sum the values of the timestamps falling into a bin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5436e249242bac590e3e6187d996f49d130ec928" translate="yes" xml:space="preserve">
          <source>Downsample the series into 3 minute bins and close the right side of the bin interval, but label each bin using the right edge instead of the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c9d16c77ab77e75a3cf2dd80cc4ec172fd4d9f" translate="yes" xml:space="preserve">
          <source>Downsample the series into 3 minute bins and sum the values of the timestamps falling into a bin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c070f737d02e2d061bc936df7584718c342a74" translate="yes" xml:space="preserve">
          <source>Downsample the series into 3 minute bins as above, but close the right side of the bin interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce595024d07bfa52c37b7cdf58652f2030c4c1ba" translate="yes" xml:space="preserve">
          <source>Downsample the series into 3 minute bins as above, but label each bin using the right edge instead of the left. Please note that the value in the bucket used as the label is not included in the bucket, which it labels. For example, in the original series the bucket &lt;code&gt;2000-01-01 00:03:00&lt;/code&gt; contains the value 3, but the summed value in the resampled bucket with the label &lt;code&gt;2000-01-01 00:03:00&lt;/code&gt; does not include 3 (if it did, the summed value would be 6, not 3). To include this value close the right side of the bin interval as illustrated in the example below this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def55660a766ae654ab8de753f72cd68f1deb937" translate="yes" xml:space="preserve">
          <source>Draw a box plot from a DataFrame with four columns of randomly generated data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e960874b21c390bd66d94e46fe611b469c142d96" translate="yes" xml:space="preserve">
          <source>Draw a box plot from a Series object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dda623a6d466a3786920c45d56c94e6777f6440" translate="yes" xml:space="preserve">
          <source>Draw a box plot in matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d2f047de77cfeb76193b9a678d41513a8b88d8" translate="yes" xml:space="preserve">
          <source>Draw a histogram with Series&amp;rsquo; data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61357227db99aafe57155d188e7f627c07fd2cda" translate="yes" xml:space="preserve">
          <source>Draw a matrix of scatter plots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede0af29fd8fafd6140d5dbb780c71d4f125624b" translate="yes" xml:space="preserve">
          <source>Draw a stacked area plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b04d9a73ed455e76976b3359086ec7cea88a931" translate="yes" xml:space="preserve">
          <source>Draw an area plot based on basic business metrics:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0beebd4c468bfa9e154eb04f38c43785ff756e" translate="yes" xml:space="preserve">
          <source>Draw an area plot for a single column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be78724794c264078f7d8d966389ea7c432246aa" translate="yes" xml:space="preserve">
          <source>Draw bar chart in the cell backgrounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6363c93bffb37c7c525a065be4d55055fe42936" translate="yes" xml:space="preserve">
          <source>Draw histogram of the input series using matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bba38bc26fb9423b2b624c8e05479b1b7c45885" translate="yes" xml:space="preserve">
          <source>Draw histograms per DataFrame&amp;rsquo;s Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92a03087348c848961408502b4d92892e61ba03" translate="yes" xml:space="preserve">
          <source>Draw one histogram of the DataFrame&amp;rsquo;s columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6c6a1ba341e1953a47616c5da6f375a05a5af6" translate="yes" xml:space="preserve">
          <source>Draw with a different &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108427301ccbbf77f782e474a9beba61dd26b294" translate="yes" xml:space="preserve">
          <source>Drop 2nd level label in MultiIndex Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a2bb978e27d6d0344affcba76b5909a8b8260b" translate="yes" xml:space="preserve">
          <source>Drop NA values from a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bc534fe6882c953b43df811e283890ba92339d" translate="yes" xml:space="preserve">
          <source>Drop a row by index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19545c0571c3c324b1c1a3ced8e2ff8a35d977dc" translate="yes" xml:space="preserve">
          <source>Drop columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88de99fdc36793fce3828264d05d5dfb568ef394" translate="yes" xml:space="preserve">
          <source>Drop columns and/or rows of MultiIndex DataFrame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8c61a37b26df681a35b72fcdc0291ad5269c66" translate="yes" xml:space="preserve">
          <source>Drop labels B en C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b584bd1cb7a1261c2b2bb4395ae487eccb68e3" translate="yes" xml:space="preserve">
          <source>Drop missing indices from result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164bcdce8dd8dc77bb3c967c02934e24e8609d6e" translate="yes" xml:space="preserve">
          <source>Drop missing indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fafc2076493863b294cbb25cf023a947e63e795" translate="yes" xml:space="preserve">
          <source>Drop missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af18a275e92d742b03494fc3c62f3ee2d26add6b" translate="yes" xml:space="preserve">
          <source>Drop rows or columns which contain NA values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8e2ea85717ee20257e8ebf6c3803374502a053" translate="yes" xml:space="preserve">
          <source>Drop specified labels from rows or columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d348f61b422466f2b06364141675bcbd0f4904" translate="yes" xml:space="preserve">
          <source>Drop the columns where at least one element is missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d64cad21db8fa6d57035f982ac07da6c06f0b4" translate="yes" xml:space="preserve">
          <source>Drop the rows where all elements are missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1d4bdf0f8e50bf95fff915576f44d903a54d30" translate="yes" xml:space="preserve">
          <source>Drop the rows where at least one element is missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8135ca3f00100e1badcd07ab200529fa756599" translate="yes" xml:space="preserve">
          <source>Dropping axis labels with missing data: dropna</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dbdf7eba678e5137c040075888a2396065c624" translate="yes" xml:space="preserve">
          <source>Dtype and sparsity information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145179585587cbb8c5b8eb10f1a4b8932c4559f4" translate="yes" xml:space="preserve">
          <source>Dtype for data stored in &lt;a href=&quot;api/pandas.sparsearray#pandas.SparseArray&quot;&gt;&lt;code&gt;SparseArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b87b24da070c9d765cc08c099ebb2bf7547c413" translate="yes" xml:space="preserve">
          <source>Dtype for data stored in &lt;a href=&quot;pandas.sparsearray#pandas.SparseArray&quot;&gt;&lt;code&gt;SparseArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3c9252f671ea9596d2a73a2544e1f4170c39ff" translate="yes" xml:space="preserve">
          <source>Dtype introspection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bea2b234344f2cdbfc15a69a434a7f3739f7ea" translate="yes" xml:space="preserve">
          <source>Dummy argument for consistency with Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61ef14814f319def69f6cc72ece262d7dd85606" translate="yes" xml:space="preserve">
          <source>Dummy variables corresponding to values of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fba4f8e978823cb00be06f94e4fc5cb8717cec" translate="yes" xml:space="preserve">
          <source>Dummy-coded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988ccf123f50106db918f969bd0630792d3bd25c" translate="yes" xml:space="preserve">
          <source>Duplicate columns will be specified as &amp;lsquo;X&amp;rsquo;, &amp;lsquo;X.1&amp;rsquo;, &amp;hellip;&amp;rsquo;X.N&amp;rsquo;, rather than &amp;lsquo;X&amp;rsquo;&amp;hellip;&amp;rsquo;X&amp;rsquo;. Passing in False will cause data to be overwritten if there are duplicate names in the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ec01ddd4626730ea03407eeedca5510af44695" translate="yes" xml:space="preserve">
          <source>Duplicate data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8652f75e621a5df4d66f15711157cf3d006476c" translate="yes" xml:space="preserve">
          <source>Duplicate each string in the Series or Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241b9a11c9f9f3b970918ff7cf7527f3ff46f86a" translate="yes" xml:space="preserve">
          <source>Duplicated values are indicated as &lt;code&gt;True&lt;/code&gt; values in the resulting Series. Either all duplicates, all except the first or all except the last occurrence of duplicates can be indicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875b783f984231029994ee15ba2c350731984f19" translate="yes" xml:space="preserve">
          <source>Duplicated values are indicated as &lt;code&gt;True&lt;/code&gt; values in the resulting array. Either all duplicates, all except the first, or all except the last occurrence of duplicates can be indicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="b096fb924a35243e991b8993f18f87f655bdd27b" translate="yes" xml:space="preserve">
          <source>ENH: Enhancement, new functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d145b777f2d85242b57e4cf7b6b7486a4d5cfc8" translate="yes" xml:space="preserve">
          <source>EPEL repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c35af59922d6fb32c048527e86fc09a75f27fc4" translate="yes" xml:space="preserve">
          <source>EWM.corr()</source>
          <target state="translated">EWM.corr()</target>
        </trans-unit>
        <trans-unit id="6dfa103b973e1071479462a698646aa041b698af" translate="yes" xml:space="preserve">
          <source>EWM.cov()</source>
          <target state="translated">EWM.cov()</target>
        </trans-unit>
        <trans-unit id="d789ad7e2359fc1fed605937df017e8106dcf5bf" translate="yes" xml:space="preserve">
          <source>EWM.mean()</source>
          <target state="translated">EWM.mean()</target>
        </trans-unit>
        <trans-unit id="3b31559519d3b709952667011c437b5cd0531e28" translate="yes" xml:space="preserve">
          <source>EWM.std()</source>
          <target state="translated">EWM.std()</target>
        </trans-unit>
        <trans-unit id="577cb41900a97c729c95f60c1e3ac44670f47466" translate="yes" xml:space="preserve">
          <source>EWM.var()</source>
          <target state="translated">EWM.var()</target>
        </trans-unit>
        <trans-unit id="3869b61940cd1f5599403949c16b66dfd496b577" translate="yes" xml:space="preserve">
          <source>Each Series in the DataFrame is represented as a evenly distributed slice on a circle. Each data point is rendered in the circle according to the value on each Series. Highly correlated &lt;code&gt;Series&lt;/code&gt; in the &lt;code&gt;DataFrame&lt;/code&gt; are placed closer on the unit circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86acf40ed3fbef9f40b21ca1ae22f839f8ab9d1f" translate="yes" xml:space="preserve">
          <source>Each array-like gives one level&amp;rsquo;s value for each data point. len(arrays) is the number of levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d018bcfdd928b0b3711d20a3a9ca9053606c7e6c" translate="yes" xml:space="preserve">
          <source>Each column of the DataFrame is stored as a &lt;code&gt;SparseArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56fa224e60c0fd80b35d7c5c2d731ccddc9875ca" translate="yes" xml:space="preserve">
          <source>Each data structure has several &lt;em&gt;constructor properties&lt;/em&gt; for returning a new data structure as the result of an operation. By overriding these properties, you can retain subclasses through &lt;code&gt;pandas&lt;/code&gt; data manipulations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bdeead196f6640c60c1d7b1261ff912f1c6fa3" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;left&lt;/code&gt; must be less than or equal to the &lt;code&gt;right&lt;/code&gt; element at the same position. If an element is missing, it must be missing in both &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;. A TypeError is raised when using an unsupported type for &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;. At the moment, &amp;lsquo;category&amp;rsquo;, &amp;lsquo;object&amp;rsquo;, and &amp;lsquo;string&amp;rsquo; subtypes are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bea018c9b28447ff1b2f2f401568ff5bed077b" translate="yes" xml:space="preserve">
          <source>Each element will be an instance of the scalar type for this array, &lt;code&gt;cls.dtype.type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979fa3a0a58cb15e12dab4dab8aaaa84266f43b1" translate="yes" xml:space="preserve">
          <source>Each individual table_style should be a dictionary with &lt;code&gt;selector&lt;/code&gt; and &lt;code&gt;props&lt;/code&gt; keys. &lt;code&gt;selector&lt;/code&gt; should be a CSS selector that the style will be applied to (automatically prefixed by the table&amp;rsquo;s UUID) and &lt;code&gt;props&lt;/code&gt; should be a list of tuples with &lt;code&gt;(attribute, value)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cffc79768748d3aa6a486dfc44adb555926052" translate="yes" xml:space="preserve">
          <source>Each iterable has unique labels for each level of the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f07de398ca3be9efffef9970965e6f8c701df02" translate="yes" xml:space="preserve">
          <source>Each of these can be specified in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810c3d92837210b477f24d08da4a2d48f9486930" translate="yes" xml:space="preserve">
          <source>Each row of these wide variables are assumed to be uniquely identified by &lt;code&gt;i&lt;/code&gt; (can be a single column name or a list of column names)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45547bfb2620cb6bbf17f1b8801231267251b1c7" translate="yes" xml:space="preserve">
          <source>Each shared docstring will have a base template with variables, like &lt;code&gt;%(klass)s&lt;/code&gt;. The variables filled in later on using the &lt;code&gt;Substitution&lt;/code&gt; decorator. Finally, docstrings can be appended to with the &lt;code&gt;Appender&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b38ed55a3174be9411e640ddaeef6f8721fc91c" translate="yes" xml:space="preserve">
          <source>Each subframe is endowed the attribute &amp;lsquo;name&amp;rsquo; in case you need to know which group you are working on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e86b43c67405d3f92c3df17e9ebfdda48e4b140" translate="yes" xml:space="preserve">
          <source>Each time you push to &lt;em&gt;your&lt;/em&gt; fork, a &lt;em&gt;new&lt;/em&gt; run of the tests will be triggered on the CI. You can enable the auto-cancel feature, which removes any non-currently-running tests for that same pull-request, for &lt;a href=&quot;https://docs.travis-ci.com/user/customizing-the-build/#Building-only-the-latest-commit&quot;&gt;Travis-CI here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc71ebdc6ebeec48ba837b9b5d311f59264c7cf9" translate="yes" xml:space="preserve">
          <source>Each timedelta has a defined resolution that represents the lowest OR most granular level of precision. Each level of resolution is represented by a short string as defined below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236f8c0c2f3efe1300739ad118846e36389afff7" translate="yes" xml:space="preserve">
          <source>Each tuple is the index of one row/column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2606285359704adc2fe251511f5adeb24d53898b" translate="yes" xml:space="preserve">
          <source>Easter</source>
          <target state="translated">Easter</target>
        </trans-unit>
        <trans-unit id="b95989b85bac37a2acfdab9ba64ce91d95c70cd1" translate="yes" xml:space="preserve">
          <source>Easter.apply()</source>
          <target state="translated">Easter.apply()</target>
        </trans-unit>
        <trans-unit id="71f78c6c4117219d0bd8b7313237ef3539bb214b" translate="yes" xml:space="preserve">
          <source>Easter.apply_index()</source>
          <target state="translated">Easter.apply_index()</target>
        </trans-unit>
        <trans-unit id="18a774ff80c4e866e1a6fc9804080ac5fc4bb0f9" translate="yes" xml:space="preserve">
          <source>Easter.base</source>
          <target state="translated">Easter.base</target>
        </trans-unit>
        <trans-unit id="117f7a2cfb405c4f1e663460fe3d5e843c3ecf6d" translate="yes" xml:space="preserve">
          <source>Easter.copy()</source>
          <target state="translated">Easter.copy()</target>
        </trans-unit>
        <trans-unit id="a64c3ce290ff950d00ad93e21618b487059365a5" translate="yes" xml:space="preserve">
          <source>Easter.freqstr</source>
          <target state="translated">Easter.freqstr</target>
        </trans-unit>
        <trans-unit id="e1589f6d56e997fea99706cd9f60f36e99c6001f" translate="yes" xml:space="preserve">
          <source>Easter.isAnchored()</source>
          <target state="translated">Easter.isAnchored()</target>
        </trans-unit>
        <trans-unit id="750946e5844da641cf840194928208395385950e" translate="yes" xml:space="preserve">
          <source>Easter.kwds</source>
          <target state="translated">Easter.kwds</target>
        </trans-unit>
        <trans-unit id="c3bf124c76487590e34235a519c62e73aa442ca0" translate="yes" xml:space="preserve">
          <source>Easter.name</source>
          <target state="translated">Easter.name</target>
        </trans-unit>
        <trans-unit id="d7d0455d2ae8bfa65b35bdfc79e8686f974d5cd2" translate="yes" xml:space="preserve">
          <source>Easter.nanos</source>
          <target state="translated">Easter.nanos</target>
        </trans-unit>
        <trans-unit id="97132f52f72da121d6a4153d9f705dfd8a9d3c45" translate="yes" xml:space="preserve">
          <source>Easter.normalize</source>
          <target state="translated">Easter.normalize</target>
        </trans-unit>
        <trans-unit id="50f10ef1a6bd46758b2b6e6086a90e95a9a92037" translate="yes" xml:space="preserve">
          <source>Easter.onOffset()</source>
          <target state="translated">Easter.onOffset()</target>
        </trans-unit>
        <trans-unit id="7c21a59efa785e8af76178ba9211d81b8b45bb8d" translate="yes" xml:space="preserve">
          <source>Easter.rollback()</source>
          <target state="translated">Easter.rollback()</target>
        </trans-unit>
        <trans-unit id="b08258186c8a2caa11452ce091e1a982ffa87e8e" translate="yes" xml:space="preserve">
          <source>Easter.rollforward()</source>
          <target state="translated">Easter.rollforward()</target>
        </trans-unit>
        <trans-unit id="fc84dcfd5acb60d71b225168052c612be8ca232f" translate="yes" xml:space="preserve">
          <source>Easter.rule_code</source>
          <target state="translated">Easter.rule_code</target>
        </trans-unit>
        <trans-unit id="3999a6af6346493cd0944da9f3622efaf0ed1815" translate="yes" xml:space="preserve">
          <source>Easy handling of &lt;strong&gt;missing data&lt;/strong&gt; (represented as NaN) in floating point as well as non-floating point data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9f362bf0b0d7206f473320bebf61de12af2e79" translate="yes" xml:space="preserve">
          <source>Efficiently infer the type of a passed val, or list-like array of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c4a061029ebb6291c893c075dac2a8ab793ab7" translate="yes" xml:space="preserve">
          <source>Efficiently infer the type of a passed val, or list-like array of values. Return a string describing the type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc67a0cde4826da830110855e0a2e644530ed8d" translate="yes" xml:space="preserve">
          <source>Either a path to a file (a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3/library/pathlib.html#pathlib.Path&quot;&gt;&lt;code&gt;pathlib.Path&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;py._path.local.LocalPath&lt;/code&gt;), URL (including http, ftp, and S3 locations), or any object with a &lt;code&gt;read()&lt;/code&gt; method (such as an open file or &lt;a href=&quot;https://docs.python.org/3/library/io.html#io.StringIO&quot;&gt;&lt;code&gt;StringIO&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0806e323865f06601a1d1b593f5382b282662614" translate="yes" xml:space="preserve">
          <source>Element 0: int, slice object or boolean array Element 1: The resulting sliced multiindex/index. If the key contains all levels, this will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503e5ce89f68e008a14e19be91370e18e79b2bf6" translate="yes" xml:space="preserve">
          <source>Element order is ignored, so &lt;code&gt;usecols=[0, 1]&lt;/code&gt; is the same as &lt;code&gt;[1, 0]&lt;/code&gt;. To instantiate a DataFrame from &lt;code&gt;data&lt;/code&gt; with element order preserved use &lt;code&gt;pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]&lt;/code&gt; for columns in &lt;code&gt;['foo', 'bar']&lt;/code&gt; order or &lt;code&gt;pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]&lt;/code&gt; for &lt;code&gt;['bar', 'foo']&lt;/code&gt; order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae1a37714d0610ea1809571f8bd3df40faf9bf6" translate="yes" xml:space="preserve">
          <source>Elements above the &lt;code&gt;threshold&lt;/code&gt; will be changed to match the &lt;code&gt;threshold&lt;/code&gt; value(s). Threshold can be a single value or an array, in the latter case it performs the truncation element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5caa312a51c1d416a9b18eb195148af1ee06abd1" translate="yes" xml:space="preserve">
          <source>Elements below the &lt;code&gt;threshold&lt;/code&gt; will be changed to match the &lt;code&gt;threshold&lt;/code&gt; value(s). Threshold can be a single value or an array, in the latter case it performs the truncation element-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5a13010537642f63040189901c08f9b1c09480" translate="yes" xml:space="preserve">
          <source>Elements in &lt;code&gt;data&lt;/code&gt; that are &lt;code&gt;fill_value&lt;/code&gt; are not stored in the SparseArray. For memory savings, this should be the most common value in &lt;code&gt;data&lt;/code&gt;. By default, &lt;code&gt;fill_value&lt;/code&gt; depends on the dtype of &lt;code&gt;data&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b5eb8f62e2448bc78867bd7f5fbbf0033b80af" translate="yes" xml:space="preserve">
          <source>Elements in &lt;code&gt;data&lt;/code&gt; that are &lt;code&gt;fill_value&lt;/code&gt; are not stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b8286619a5ad7924b7c9e9c4b30845457766fe" translate="yes" xml:space="preserve">
          <source>Elements of given indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525c74cb301c325c8922de73a58aca7c95a470da" translate="yes" xml:space="preserve">
          <source>Empty list of categoricals passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d270d22e155e070504dd49956fd91c78e0191eb" translate="yes" xml:space="preserve">
          <source>Empty strings are not considered NA values. &lt;code&gt;None&lt;/code&gt; is considered an NA value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3d92015ba57cff6027ae4287635a629ce85ce2" translate="yes" xml:space="preserve">
          <source>Empty strings are not considered NA values. None is considered a NA value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c37f3447b6849621e78a688e9b674a3e18107d" translate="yes" xml:space="preserve">
          <source>Empty strings are not considered NA values. None is considered an NA value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e901d4ccbaee8f880324e15076757dac346544f0" translate="yes" xml:space="preserve">
          <source>Enables automatic and explicit data alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b367113f5eed913f54368cfcda8e21ac5273c9" translate="yes" xml:space="preserve">
          <source>Encode character string in the Series/Index using indicated encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04047600b6dbaaaca9cb9599345ed6b8017a2c18" translate="yes" xml:space="preserve">
          <source>Encode character string in the Series/Index using indicated encoding. Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.encode&quot;&gt;&lt;code&gt;str.encode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e3364b9a2984f9e759fd77173c6abbdb754cdf" translate="yes" xml:space="preserve">
          <source>Encode the extension array as an enumerated type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f63b5b0bb4c290c6f8ec670fd4b7637a23a0cf9" translate="yes" xml:space="preserve">
          <source>Encode the object as an enumerated type or categorical variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c448d7a424e7034a20f769d4658fdabd579b8f66" translate="yes" xml:space="preserve">
          <source>Encoding for text data. If None, text data are stored as raw bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34821b241bfe6e8be06cac4712ac5fe316cc36f" translate="yes" xml:space="preserve">
          <source>Encoding of the resulting excel file. Only necessary for xlwt, other writers support unicode natively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0fa12d49e845b40df6fcb1110b45a9b133a2e23" translate="yes" xml:space="preserve">
          <source>Encoding to use for UTF when reading/writing (ex. &amp;lsquo;utf-8&amp;rsquo;). &lt;a href=&quot;https://docs.python.org/3/library/codecs.html#standard-encodings&quot;&gt;List of Python standard encodings&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0345ae4a94c5a7775719abd4bf58badc59912f20" translate="yes" xml:space="preserve">
          <source>Encoding used to parse the files. None defaults to latin-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3226cbbeda736b6a185ebb432071dfdd46499b9c" translate="yes" xml:space="preserve">
          <source>Encoding with Table Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949e387e8d30902145cda7ada343a60721efe726" translate="yes" xml:space="preserve">
          <source>Encoding/decoding a Dataframe using &lt;code&gt;'columns'&lt;/code&gt; formatted JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d5758f62adb3bdb7352a20a8d2d77da65dff23" translate="yes" xml:space="preserve">
          <source>Encoding/decoding a Dataframe using &lt;code&gt;'index'&lt;/code&gt; formatted JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c708857a4146c92b53ec0e2de3c8574813442a" translate="yes" xml:space="preserve">
          <source>Encoding/decoding a Dataframe using &lt;code&gt;'records'&lt;/code&gt; formatted JSON. Note that index labels are not preserved with this encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618ef73e561d4802a159e38e582bd2d562ddbc09" translate="yes" xml:space="preserve">
          <source>Encoding/decoding a Dataframe using &lt;code&gt;'split'&lt;/code&gt; formatted JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cbea9441f14e19d4c81ed36d46e57e42cccb100" translate="yes" xml:space="preserve">
          <source>Encoding/decoding a Dataframe using &lt;code&gt;'values'&lt;/code&gt; formatted JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43addc28c20634ce912ae6e7fe27b3d649b37805" translate="yes" xml:space="preserve">
          <source>Engarde</source>
          <target state="translated">Engarde</target>
        </trans-unit>
        <trans-unit id="65d73bdf59fd21540bf6975570ceea0f552f37b7" translate="yes" xml:space="preserve">
          <source>Engarde is a lightweight library used to explicitly state your assumptions about your datasets and check that they&amp;rsquo;re &lt;em&gt;actually&lt;/em&gt; true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc316ac1bd016af1f56c630d571e28b866f2fd3e" translate="yes" xml:space="preserve">
          <source>Engine to use for writing. If None, defaults to &lt;code&gt;io.excel.&amp;lt;extension&amp;gt;.writer&lt;/code&gt;. NOTE: can only be passed as a keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a6cba95a0d1e40dc8f11a7f2764bcdcec8b352" translate="yes" xml:space="preserve">
          <source>Enhancing performance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10e88af3792c9f19b02140375564114734c4cc3" translate="yes" xml:space="preserve">
          <source>Enigma</source>
          <target state="translated">Enigma</target>
        </trans-unit>
        <trans-unit id="e2dd9460b98190efc65e85d605a10b089d283a46" translate="yes" xml:space="preserve">
          <source>Ensure &lt;code&gt;pat&lt;/code&gt; is a not a literal pattern when &lt;code&gt;regex&lt;/code&gt; is set to True. Note in the following example one might expect only &lt;code&gt;s2[1]&lt;/code&gt; and &lt;code&gt;s2[3]&lt;/code&gt; to return &lt;code&gt;True&lt;/code&gt;. However, &amp;lsquo;.0&amp;rsquo; as a regex matches any character followed by a 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8065eb6e1360c939ccbf6d8324895bfbc2e2b6e" translate="yes" xml:space="preserve">
          <source>Entries where &lt;code&gt;cond&lt;/code&gt; is False are replaced with corresponding value from &lt;code&gt;other&lt;/code&gt;. If other is callable, it is computed on the Series/DataFrame and should return scalar or Series/DataFrame. The callable must not change input Series/DataFrame (though pandas doesn&amp;rsquo;t check it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49acce1a8a0936ac5ee0e836da10f60b0337b10" translate="yes" xml:space="preserve">
          <source>Entries where &lt;code&gt;cond&lt;/code&gt; is True are replaced with corresponding value from &lt;code&gt;other&lt;/code&gt;. If other is callable, it is computed on the Series/DataFrame and should return scalar or Series/DataFrame. The callable must not change input Series/DataFrame (though pandas doesn&amp;rsquo;t check it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b65bacf0dcfe557f503ac2c6ada5790666cad6" translate="yes" xml:space="preserve">
          <source>Equality test for DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f4741ae43ac85766b1a151f8ca3b0e693ca5b9" translate="yes" xml:space="preserve">
          <source>Equals 0 or &amp;lsquo;index&amp;rsquo; for row-wise, 1 or &amp;lsquo;columns&amp;rsquo; for column-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec372b0c63afa94384d73892b7edc5938dad0bb" translate="yes" xml:space="preserve">
          <source>Equivalent behaviour to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafaf50a3fc5d2f5632eab755aab7b1168625ca7" translate="yes" xml:space="preserve">
          <source>Equivalent function for Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5150ea9de645c73202cdf25bf15aef5fef0f71b9" translate="yes" xml:space="preserve">
          <source>Equivalent function for Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cc6e244cfdf3912de98f274cade02cea1ebbd9" translate="yes" xml:space="preserve">
          <source>Equivalent method for DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d5af3caa4160a58f0c4e672e7c721b5f0ac60e" translate="yes" xml:space="preserve">
          <source>Equivalent method for Numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86be3a008063ea0fa5cbc465de95ff0781aa0274" translate="yes" xml:space="preserve">
          <source>Equivalent method for Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5bcf283c3a2ff6510396df3839d6bf440131764" translate="yes" xml:space="preserve">
          <source>Equivalent method for asserting Series equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1766b2ea538d4da67aacc27e7da2c4776f50878d" translate="yes" xml:space="preserve">
          <source>Equivalent method on DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2bcecfe27133c9d3af500dbe79e4b8fbabe6b9" translate="yes" xml:space="preserve">
          <source>Equivalent method on Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039526d3053d69abdcef44477b44dd885203684b" translate="yes" xml:space="preserve">
          <source>Equivalent method on Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a8e5826b0c825951697c4f94220cfb2ec6df47" translate="yes" xml:space="preserve">
          <source>Equivalent method on pandas.DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02cf099c7617448ab418841eb93c3d26c95440b9" translate="yes" xml:space="preserve">
          <source>Equivalent method on pandas.Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af0c4c82417b823e82121cf4a2e70da57832460" translate="yes" xml:space="preserve">
          <source>Equivalent method on pandas.Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ca5e48933fda492931c90b1bcf99318326d92c" translate="yes" xml:space="preserve">
          <source>Equivalent numpy function to create a new view of the same data in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d8bf0ed3a917a129bad860eafd03364618b48f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.capitalize&quot;&gt;&lt;code&gt;str.capitalize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e4634e8d10e65ad571767afdaef7f48e17792d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.casefold&quot;&gt;&lt;code&gt;str.casefold()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dd64b77ea4698e10d9f62a8768c893079c960b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.endswith&quot;&gt;&lt;code&gt;str.endswith()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8557c34d1a99255dea29f10640e1e53e23c15306" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.lower&quot;&gt;&lt;code&gt;str.lower()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdee95d9552c753b4628a2110af8c042a59db3c9" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.startswith&quot;&gt;&lt;code&gt;str.startswith()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ab9766e4a4bf3cf0f9ed4e0351a549bae6c273" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.swapcase&quot;&gt;&lt;code&gt;str.swapcase()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bb37c42b71289bed4bee7209ae17f58969f592" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.title&quot;&gt;&lt;code&gt;str.title()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d0def0adae00f9922d3794fa4ae0d97942d98c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.upper&quot;&gt;&lt;code&gt;str.upper()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2de26dd66dedb8c3f2fcebc2d8932f397d78e4" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;=!&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; with support to choose axis (rows or columns) and level for comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8325a24b9cd76b68211c33b20206559dac1841" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;dataframe % other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;rmod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ded5ebbec616aeaf49692d5f13776690d34f783" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;dataframe * other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;rmul&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed44b090cee048d7ac666bc47b3885eea740bfce" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;dataframe ** other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;rpow&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3508dbe976dd0fac991f7cabd11b0932aad8560" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;dataframe + other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;radd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b67f6f8e2fc863c8c012894e8a90b18d995890e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;dataframe - other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;rsub&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b512b1905b0d90b5b250d18aeb8ffc80bb6664" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;dataframe / other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;rtruediv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f88988466f5867490f5c6d5db7466cbf156923" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;dataframe // other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;rfloordiv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9855623cca51925b961366f57ef44b9d0df009" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other % dataframe&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;mod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab056889489aaca415e641a436727e11fa841310" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other % series&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecafbefdcd9e37afc570bed2602a27ec7f735ad" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other * dataframe&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;mul&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a841af3c68b714de344b9e707cbb8941d6e7a32d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other * series&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1ba76737080e52f19b48426bbb517d5f1f74eb" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other ** dataframe&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;pow&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96eed61bd77546a7701549d667a943c31c1f866d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other ** series&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adcd240f3181e9f8f4b3d298f6ff23ac74bd0e5" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other + dataframe&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;add&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c20cee94dbad2d3c6e7cca8e27f27100bfa4206" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other + series&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8a7d43b0b03d3c4c1abe018667138886de3688" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other - dataframe&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;sub&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1022760fcd533b5ca5d8f45c515df7b35256794" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other - series&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab0bcf24dbfec8d2836a8050a87fecdf04da0d1" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other / dataframe&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;truediv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cff1388b459faeedd981155ab3756cc10ebfab" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other / series&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ada1c3deca00a0b98bf91c4975c66bf3f2a32e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other // dataframe&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs. With reverse version, &lt;code&gt;floordiv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14c6dba93c6143a2bb337395a7c265afa05ed21" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other // series&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611a69a3865183033248686aa072d739ec83d7e7" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;other divmod series&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dac5f7642ebb0b2fce97a1975324da6575133cd" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series != other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fd03888867509823d41425c9f98ba84a338efd" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series % other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146806a4320c1fc791a2b50f1818d29b1697b282" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series &amp;gt; other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232615fe7359c047031039f09fef437e55b47800" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series &amp;gt;= other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1422746116ba43c3363350a637a5dc17850fe1c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series &amp;lt; other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1187d2ecbe2e9b77fa4311abd96e99ca8625bd2e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series &amp;lt;= other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d57c26e8b6844f7cf58d845a28a1a951ffed1d3" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series * other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f79e49fa785542cc761f929276f109fd3b576f2" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series ** other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc8927b1f6ad3dc690c03681a97e73b97fbc6a0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series + other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65653d57fbabc40af1af2eb8f591d8c6b08143cd" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series - other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e71bac53d43967b346a0405f4abd972a091f33" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series / other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842d93ee127c79fe632f0aa8f57be4246cd1b9ab" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series // other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff3654e90f2c78e8c86db7727c62ef0a699f4ca" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series == other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fac95a25a099666c46f923f5396cb9473e9e77" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;series divmod other&lt;/code&gt;, but with support to substitute a fill_value for missing data in one of the inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb850af4cc7c4e90f496384c03c331f8870f06bc" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;shift&lt;/code&gt; without copying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3535eff68e0e3f0566b60a87623480c31b4217de" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;shift&lt;/code&gt; without copying data. The shifted data will not include the dropped periods and the shifted axis will be smaller than the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac92cb546b7c54bee4fa3940b7026532be25dee" translate="yes" xml:space="preserve">
          <source>Equivalent to Series.items for DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4261dfee78912175d1810d6966131be8adfd8e" translate="yes" xml:space="preserve">
          <source>Equivalent to applying &lt;a href=&quot;https://docs.python.org/3/library/re.html#re.findall&quot;&gt;&lt;code&gt;re.findall()&lt;/code&gt;&lt;/a&gt; to all the elements in the Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f43fc77aa2450edb40bc2d9ce2e0ca5e1d28c2a" translate="yes" xml:space="preserve">
          <source>Equivalent to read_excel(ExcelFile, &amp;hellip;) See the read_excel docstring for more info on accepted parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1de4dc9275f5b326291d028b6c4e7beb261032" translate="yes" xml:space="preserve">
          <source>Error raised when attempting to get a slice of a MultiIndex, and the index has not been lexsorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284d2b630c672fea6ad1786cada4bc360b6c3116" translate="yes" xml:space="preserve">
          <source>Error raised when attempting to get a slice of a MultiIndex, and the index has not been lexsorted. Subclass of &lt;code&gt;KeyError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e799be9c8eb9f580f314888275aa754f240a6423" translate="yes" xml:space="preserve">
          <source>Escape &lt;code&gt;'$'&lt;/code&gt; to find the literal dollar sign.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b84de02044e2a7061edbc0b85c3a5a4ced1aa6e" translate="yes" xml:space="preserve">
          <source>Essential basic functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae92e13bb44b71bed7ba7cb82aaa2d3fc93794e3" translate="yes" xml:space="preserve">
          <source>Essentially equivalent to &lt;code&gt;.apply(lambda x: x.head(n))&lt;/code&gt;, except ignores as_index flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16cc716cfc52e6db21503a58e00a78c7a8ed1057" translate="yes" xml:space="preserve">
          <source>Essentially equivalent to &lt;code&gt;.apply(lambda x: x.tail(n))&lt;/code&gt;, except ignores as_index flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7928183fe39e38720bbea220be96edc1744520" translate="yes" xml:space="preserve">
          <source>Essentially this is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb79438666021b8aa6eba922d09fbc0bae397e83" translate="yes" xml:space="preserve">
          <source>Eurostat</source>
          <target state="translated">Eurostat</target>
        </trans-unit>
        <trans-unit id="12344a389beba7b5dde1f09a5a218e785dc0991d" translate="yes" xml:space="preserve">
          <source>Evaluate a Python expression as a string using various backends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5754da883ef7aaf474568f97756c6e700b0fcc89" translate="yes" xml:space="preserve">
          <source>Evaluate a string describing operations on DataFrame columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97ddde9cf360353f78e8f33c76e9617854f5748" translate="yes" xml:space="preserve">
          <source>Evaluates a boolean expression to query the columns of a frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fe6bf2fa71772fd5fd103b69b4e56394678ca2" translate="yes" xml:space="preserve">
          <source>Evaluation points for the estimated PDF. If None (default), 1000 equally spaced points are used. If &lt;code&gt;ind&lt;/code&gt; is a NumPy array, the KDE is evaluated at the points passed. If &lt;code&gt;ind&lt;/code&gt; is an integer, &lt;code&gt;ind&lt;/code&gt; number of equally spaced points are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98f24522182bbab093284e8a62b8a8974ad8ae6" translate="yes" xml:space="preserve">
          <source>Even faster, with the caveat that a bug in our Cython code (an off-by-one error, for example) might cause a segfault because memory access isn&amp;rsquo;t checked. For more about &lt;code&gt;boundscheck&lt;/code&gt; and &lt;code&gt;wraparound&lt;/code&gt;, see the Cython docs on &lt;a href=&quot;http://cython.readthedocs.io/en/latest/src/reference/compilation.html?highlight=wraparound#compiler-directives&quot;&gt;compiler directives&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0884df4d3b2d9b850dcff21822169991b0be59ba" translate="yes" xml:space="preserve">
          <source>Even if there&amp;rsquo;s a missing value in &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;uniques&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; contain an entry for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16beae7c7a67108a3ace3392a9c92169de0a7e4" translate="yes" xml:space="preserve">
          <source>Even though the resulting DataFrame must have the same length as the input DataFrame, it is possible to provide several input functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d5644476ece525b6be0e4ac57ee9eb2a831fba" translate="yes" xml:space="preserve">
          <source>Even though the resulting Series must have the same length as the input Series, it is possible to provide several input functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f9ae416c145266e1ef37cc1a3d406e35b59e99" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; has an &lt;code&gt;Index&lt;/code&gt; &amp;ndash; labels on the &lt;em&gt;rows&lt;/em&gt; of the data. Stata does not have an exactly analogous concept. In Stata, a data set&amp;rsquo;s rows are essentially unlabeled, other than an implicit integer index that can be accessed with &lt;code&gt;_n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9897b3b4c66dc603d785935dbf0bda3267bab4" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;DataFrame&lt;/code&gt; and &lt;code&gt;Series&lt;/code&gt; has an &lt;code&gt;Index&lt;/code&gt; - which are labels on the &lt;em&gt;rows&lt;/em&gt; of the data. SAS does not have an exactly analogous concept. A data set&amp;rsquo;s rows are essentially unlabeled, other than an implicit integer index that can be accessed during the &lt;code&gt;DATA&lt;/code&gt; step (&lt;code&gt;_N_&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee5df4e5a71accf89b7d1b60df2f71751bfdf6c" translate="yes" xml:space="preserve">
          <source>Every index column is stored with a name matching the pattern &lt;code&gt;__index_level_\d+__&lt;/code&gt; and its corresponding column information is can be found with the following code snippet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fa2a907f50fe0be16238514f41568c5af9adc8" translate="yes" xml:space="preserve">
          <source>Every method should be included in a &lt;code&gt;toctree&lt;/code&gt; in &lt;code&gt;api.rst&lt;/code&gt;, else Sphinx will emit a warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e2275c021dc54551f99a29d6a7c924e31b6bec" translate="yes" xml:space="preserve">
          <source>Exactly one of center of mass, span, half-life, and alpha must be provided. Allowed values and relationship between the parameters are specified in the parameter descriptions above; see the link at the end of this section for a detailed explanation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5611bbe6191480a7a2c993aa5b23372bc7bed93" translate="yes" xml:space="preserve">
          <source>Example that demonstrates the use of &lt;code&gt;overwrite&lt;/code&gt; and behavior when the axis differ between the dataframes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c322e17f3f5ae9cccab44ae6bb30a01e21c392eb" translate="yes" xml:space="preserve">
          <source>Example using a true element-wise combine function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8eec0aec52fd6e9b5231dff334382dfe84caa7" translate="yes" xml:space="preserve">
          <source>Example with a list that contains non-string elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="aa4b78eac1e654399b27734956eda31c582f7d95" translate="yes" xml:space="preserve">
          <source>Examples in docstrings, besides illustrating the usage of the function or method, must be valid Python code, that in a deterministic way returns the presented output, and that can be copied and run by users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08e11119aefc863a42db70003513594d2824191" translate="yes" xml:space="preserve">
          <source>Excel</source>
          <target state="translated">Excel</target>
        </trans-unit>
        <trans-unit id="d3814721f2dc82e17fb622728ae9818a37bb5392" translate="yes" xml:space="preserve">
          <source>Excel charts with pandas, vincent and xlsxwriter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84074766472bfcd2794860ad21251f9fa68009e7" translate="yes" xml:space="preserve">
          <source>Excel files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7875729fe29ef24086d082ea4fc5ab3008b175b0" translate="yes" xml:space="preserve">
          <source>Excel reading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30d394f7e5cd769a44f667e9734d6dbd25afbbb" translate="yes" xml:space="preserve">
          <source>Excel writing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea75110f2cd4d5edbc168572f6b47e5fed81af06" translate="yes" xml:space="preserve">
          <source>ExcelFile.parse()</source>
          <target state="translated">ExcelFile.parse()</target>
        </trans-unit>
        <trans-unit id="02a714b0c25e9f7828ab3fdeac629c3e538220c4" translate="yes" xml:space="preserve">
          <source>ExcelWriter()</source>
          <target state="translated">ExcelWriter()</target>
        </trans-unit>
        <trans-unit id="5acc2c8b09c26d7573c86ce55cd415796a7a756e" translate="yes" xml:space="preserve">
          <source>Exception raised when attempting to call a numpy function on a pandas object, but that function is not supported by the object e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f25bd5c29207b4e5050e20c635da91670ac025" translate="yes" xml:space="preserve">
          <source>Exception raised when attempting to call a numpy function on a pandas object, but that function is not supported by the object e.g. &lt;code&gt;np.cumsum(groupby_object)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843c1cb34c2503e349228fa83f29d0d0718b94eb" translate="yes" xml:space="preserve">
          <source>Exception that is raised by an error encountered in parsing file contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a77685e7d6f22dc4a8cabebf737ee456a9d0e5f" translate="yes" xml:space="preserve">
          <source>Exception that is thrown in &lt;code&gt;pd.read_csv&lt;/code&gt; (by both the C and Python engines) when empty data or header is encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf1573108e16e6d38ba26ddc8eacf022ebd30f9" translate="yes" xml:space="preserve">
          <source>Exceptions and warnings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe900ddd9912c0e428fe50054166d6d912f56296" translate="yes" xml:space="preserve">
          <source>Exclude NA/null values when computing the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b228ef72ff8704ad50848ff3cc89e2944cdf4a2f" translate="yes" xml:space="preserve">
          <source>Exclude NA/null values. If an entire row/column is NA, the result will be NA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5250f19083893fe22421fd1681459cf405c441b8" translate="yes" xml:space="preserve">
          <source>Exclude NA/null values. If an entire row/column is NA, the result will be NA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07da6f1aa6ddafc28f59057e76741b9fce1a37ce" translate="yes" xml:space="preserve">
          <source>Exclude NA/null values. If the entire Series is NA, the result will be NA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297ab665bc832298cb922d60aa4de6bf59b88617" translate="yes" xml:space="preserve">
          <source>Exclude NA/null values. If the entire row/column is NA and skipna is True, then the result will be False, as for an empty row/column. If skipna is False, then NA are treated as True, because these are not equal to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d256846e2ecad664af3184318f257ed8e015cd" translate="yes" xml:space="preserve">
          <source>Exclude NA/null values. If the entire row/column is NA and skipna is True, then the result will be True, as for an empty row/column. If skipna is False, then NA are treated as True, because these are not equal to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db56469943052480b74223068265bc604528139" translate="yes" xml:space="preserve">
          <source>Excludes NA values by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835ce0b250fb0430b506bc63b934fe1a52b5b50c" translate="yes" xml:space="preserve">
          <source>Excluding numeric columns from a &lt;code&gt;DataFrame&lt;/code&gt; description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df36fecd7aaa8fdae342e23cc34696d35ddd031b" translate="yes" xml:space="preserve">
          <source>Excluding object columns from a &lt;code&gt;DataFrame&lt;/code&gt; description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057316b728286aafdc943dc4178eb286f23d8645" translate="yes" xml:space="preserve">
          <source>Exercises for new users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831fab1cc83d91d9f92b8af73c8ca0a7ce14ac1f" translate="yes" xml:space="preserve">
          <source>Expand the splitted strings into separate columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d2c884735282948a00483a56f6259f88c79edd" translate="yes" xml:space="preserve">
          <source>Expanding sample covariance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a233e0339daf951dd297e72928414cfcc4f0f89" translate="yes" xml:space="preserve">
          <source>Expanding windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368af8e049410c8a7c94fbc184fbe2bfd5d462ef" translate="yes" xml:space="preserve">
          <source>Expanding.aggregate()</source>
          <target state="translated">Expanding.aggregate()</target>
        </trans-unit>
        <trans-unit id="43990b7ac8295d9269441df7b987f2d4d9b51923" translate="yes" xml:space="preserve">
          <source>Expanding.apply()</source>
          <target state="translated">Expanding.apply()</target>
        </trans-unit>
        <trans-unit id="4aee228837e363f06ecdd823126896ab0f489900" translate="yes" xml:space="preserve">
          <source>Expanding.corr()</source>
          <target state="translated">Expanding.corr()</target>
        </trans-unit>
        <trans-unit id="f4c56bd97a231d06792666c339793e451f8f9d15" translate="yes" xml:space="preserve">
          <source>Expanding.count()</source>
          <target state="translated">Expanding.count()</target>
        </trans-unit>
        <trans-unit id="f168d9ba8aeeaa26b8563691d9e9982d1b6af7ff" translate="yes" xml:space="preserve">
          <source>Expanding.cov()</source>
          <target state="translated">Expanding.cov()</target>
        </trans-unit>
        <trans-unit id="130aaa27cb652cb66c8524d57f9ee84fecafb68c" translate="yes" xml:space="preserve">
          <source>Expanding.kurt()</source>
          <target state="translated">Expanding.kurt()</target>
        </trans-unit>
        <trans-unit id="0ee90d9629a55a6beb5827afc2ce324906538c43" translate="yes" xml:space="preserve">
          <source>Expanding.max()</source>
          <target state="translated">Expanding.max()</target>
        </trans-unit>
        <trans-unit id="db4d847807cb58ffae83eb70e348775f842263cf" translate="yes" xml:space="preserve">
          <source>Expanding.mean()</source>
          <target state="translated">Expanding.mean()</target>
        </trans-unit>
        <trans-unit id="0d502b7022c87bb9a56e1b306f3ec1789b33e973" translate="yes" xml:space="preserve">
          <source>Expanding.median()</source>
          <target state="translated">Expanding.median()</target>
        </trans-unit>
        <trans-unit id="570ea5d9f73ff518eb416e752f2a25ef49a98c00" translate="yes" xml:space="preserve">
          <source>Expanding.min()</source>
          <target state="translated">Expanding.min()</target>
        </trans-unit>
        <trans-unit id="9be610746594a151709141149375a374a1bdd047" translate="yes" xml:space="preserve">
          <source>Expanding.quantile()</source>
          <target state="translated">Expanding.quantile()</target>
        </trans-unit>
        <trans-unit id="d06fc279224c4edfa5ec2ed3fcde0aeaaea22ef7" translate="yes" xml:space="preserve">
          <source>Expanding.skew()</source>
          <target state="translated">Expanding.skew()</target>
        </trans-unit>
        <trans-unit id="c9a3e12a9f97059a7b5acbf4137acb5323513c79" translate="yes" xml:space="preserve">
          <source>Expanding.std()</source>
          <target state="translated">Expanding.std()</target>
        </trans-unit>
        <trans-unit id="e45d311fff91d92a2419851792777474e5d5bfcc" translate="yes" xml:space="preserve">
          <source>Expanding.sum()</source>
          <target state="translated">Expanding.sum()</target>
        </trans-unit>
        <trans-unit id="1d63c3a9adb782b5e071a922036a6afea8e08c19" translate="yes" xml:space="preserve">
          <source>Expanding.var()</source>
          <target state="translated">Expanding.var()</target>
        </trans-unit>
        <trans-unit id="1a16025b92eeda3d982387bc4b964699efd2e9dd" translate="yes" xml:space="preserve">
          <source>Expect to do some cleanup after you call this function. For example, you might need to manually assign column names if the column names are converted to NaN when you pass the &lt;code&gt;header=0&lt;/code&gt; argument. We try to assume as little as possible about the structure of the table and push the idiosyncrasies of the HTML contained in the table to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14fe67d8fcc086b16c1a194e2d8eed2c973cb74" translate="yes" xml:space="preserve">
          <source>Experienced users of relational databases like SQL will be familiar with the terminology used to describe join operations between two SQL-table like structures (&lt;code&gt;DataFrame&lt;/code&gt; objects). There are several cases to consider which are very important to understand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4077e07de84800317a513cbed87b752cbdfd854" translate="yes" xml:space="preserve">
          <source>Experimental: This is a new feature and still under development. We&amp;rsquo;ll be adding features and possibly making breaking changes in future releases. We&amp;rsquo;d love to hear your feedback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09618f0dd260ba45b2ea50b92da3f4797b9d4245" translate="yes" xml:space="preserve">
          <source>Explain why the current behavior is wrong/not desired and what you expect instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c4d818b13091b12fb7e1033100f74231f127be" translate="yes" xml:space="preserve">
          <source>Explicitly pass &lt;code&gt;sort=True&lt;/code&gt; to silence the warning and sort. Explicitly pass &lt;code&gt;sort=False&lt;/code&gt; to silence the warning and not sort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31f972030da5744bb3b442a7cad4c038c1a65e4" translate="yes" xml:space="preserve">
          <source>Explode a DataFrame from list-like columns to long format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1765275e14cafc2a48cc2d7ab9961baefded93a0" translate="yes" xml:space="preserve">
          <source>Exploded lists to rows of the subset columns; index will be duplicated for these rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75086b1197d69eef128e13cf9b5f307968c6542" translate="yes" xml:space="preserve">
          <source>Exploded lists to rows; index will be duplicated for these rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae732f4e79d2c9c2427de200400664d03468f56" translate="yes" xml:space="preserve">
          <source>Exploding a list-like column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc52a56f6d6b750d6e6d6905467a920e7a18099" translate="yes" xml:space="preserve">
          <source>Exponential weighted moving average.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1ad49e0789ca5aa1bab984b2f604c2a8652866" translate="yes" xml:space="preserve">
          <source>Exponential weighted moving stddev.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4df549c7e9cdae3deb2abd3e0a3e1f39e87970" translate="yes" xml:space="preserve">
          <source>Exponential weighted moving variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8542de4d51bd3357b741df6010c4bb06697b5308" translate="yes" xml:space="preserve">
          <source>Exponential weighted sample correlation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5d9178a7bfb17ed9b276801fad601764f951b4" translate="yes" xml:space="preserve">
          <source>Exponential weighted sample covariance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b61858e311802d9821df6e8f7f62278093aa08" translate="yes" xml:space="preserve">
          <source>Exponentially weighted windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4012c8848521a99f1fc5e0add133449f9151e9" translate="yes" xml:space="preserve">
          <source>Exponentially-weighted moving window functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5640f4f06484e90326af68b8842405638698556b" translate="yes" xml:space="preserve">
          <source>Export DataFrame object to Stata dta format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88921731e3a346e23b21872121af2be507a3bb1" translate="yes" xml:space="preserve">
          <source>Export Stata data files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979a61066306881f467e70677394214f90a9d9d8" translate="yes" xml:space="preserve">
          <source>Export the styles to applied to the current Styler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d348521d1d88385cae9661b52fbdcf517ee1784e" translate="yes" xml:space="preserve">
          <source>Export to Excel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d2d958399f4ec4fff4557fbb342285481c2f91" translate="yes" xml:space="preserve">
          <source>Exporting data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2d8930a1568c140d0b27f5310b0e87d35fb393" translate="yes" xml:space="preserve">
          <source>Expression evaluation via &lt;code&gt;eval()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="e5c766e77be60c2c1f06320f97b05b85f6955357" translate="yes" xml:space="preserve">
          <source>Extending Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fbc5fe553d6748b16103c39324eed5e08f18cd" translate="yes" xml:space="preserve">
          <source>Extending by &lt;a href=&quot;#extending-extension-types&quot;&gt;extension type&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abf03223ae7acb7397a409585484ae2a894ee66" translate="yes" xml:space="preserve">
          <source>Extending by &lt;a href=&quot;#extending-register-accessors&quot;&gt;registering an accessor&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f6827bfdef254bc0230c90588223fe13ce0664" translate="yes" xml:space="preserve">
          <source>Extending pandas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c94538d1874480a4371b6ab14ef1e2eea48fb4" translate="yes" xml:space="preserve">
          <source>Extensibility</source>
          <target state="translated">Extensibility</target>
        </trans-unit>
        <trans-unit id="faf5b82e5b92082a1b30c201996f42e93d447ca7" translate="yes" xml:space="preserve">
          <source>Extensible method chains with &lt;a href=&quot;../getting_started/basics#basics-pipe&quot;&gt;pipe&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0ba92ee468b44b7531201cb796d2991f18f4c6" translate="yes" xml:space="preserve">
          <source>Extension Arrays are only allowed to be 1-dimensional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56814564426209446f0697e46ebe26660aafdae" translate="yes" xml:space="preserve">
          <source>Extension classes include categoricals, pandas sparse objects (i.e. classes represented within the pandas library and not ones external to it like scipy sparse matrices), and datetime-like arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fa2cacf1f0bb5ad2cb9bde4d5d26035b9ddd8e" translate="yes" xml:space="preserve">
          <source>Extension data types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c68cdfbbd52323ff528c825ba660a53d3efe89d" translate="yes" xml:space="preserve">
          <source>Extension types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37e0b59a280fb467047c66655b358959c8585ba" translate="yes" xml:space="preserve">
          <source>ExtensionArray</source>
          <target state="translated">ExtensionArray</target>
        </trans-unit>
        <trans-unit id="ee4737cb3c3291e2fcd1d9780b8df729cb7e1c74" translate="yes" xml:space="preserve">
          <source>ExtensionArray wrapping a NumPy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c8214adc4e356ab9711a4c29c3f470912f9f21" translate="yes" xml:space="preserve">
          <source>ExtensionArray._concat_same_type()</source>
          <target state="translated">ExtensionArray._concat_same_type()</target>
        </trans-unit>
        <trans-unit id="473ce1b45b952bb789f7a3973cef895eadf57990" translate="yes" xml:space="preserve">
          <source>ExtensionArray._formatter()</source>
          <target state="translated">ExtensionArray._formatter()</target>
        </trans-unit>
        <trans-unit id="5c880706226291e77e7c787650fc188b5d056fe1" translate="yes" xml:space="preserve">
          <source>ExtensionArray._formatting_values()</source>
          <target state="translated">ExtensionArray._formatting_values()</target>
        </trans-unit>
        <trans-unit id="f34701c11d9383b35cf486bafec95b8200365c2a" translate="yes" xml:space="preserve">
          <source>ExtensionArray._from_factorized()</source>
          <target state="translated">ExtensionArray._from_factorized()</target>
        </trans-unit>
        <trans-unit id="0698561bc647fab5d16fc14efecb5bb99162a143" translate="yes" xml:space="preserve">
          <source>ExtensionArray._from_sequence()</source>
          <target state="translated">ExtensionArray._from_sequence()</target>
        </trans-unit>
        <trans-unit id="56096dc10921ff4cc13449344add418a5a1fbfed" translate="yes" xml:space="preserve">
          <source>ExtensionArray._from_sequence_of_strings()</source>
          <target state="translated">ExtensionArray._from_sequence_of_strings()</target>
        </trans-unit>
        <trans-unit id="d23fb69bd3530327383e20b69683f917c968bbad" translate="yes" xml:space="preserve">
          <source>ExtensionArray._ndarray_values</source>
          <target state="translated">ExtensionArray._ndarray_values</target>
        </trans-unit>
        <trans-unit id="3a817dfb8dd670c9d2e9dfb92263b64a182e3c2e" translate="yes" xml:space="preserve">
          <source>ExtensionArray._reduce()</source>
          <target state="translated">ExtensionArray._reduce()</target>
        </trans-unit>
        <trans-unit id="718ad56001a394d3e76459366481485b6ddcc359" translate="yes" xml:space="preserve">
          <source>ExtensionArray._values_for_argsort()</source>
          <target state="translated">ExtensionArray._values_for_argsort()</target>
        </trans-unit>
        <trans-unit id="80c8b1f79556e273dfc89ebd4de5311df34df43f" translate="yes" xml:space="preserve">
          <source>ExtensionArray._values_for_factorize()</source>
          <target state="translated">ExtensionArray._values_for_factorize()</target>
        </trans-unit>
        <trans-unit id="d69c82c1ad7d33d8c5c81be00a1f64032850d17e" translate="yes" xml:space="preserve">
          <source>ExtensionArray.argsort()</source>
          <target state="translated">ExtensionArray.argsort()</target>
        </trans-unit>
        <trans-unit id="c5d13b93d5058d6e83bba5610c03ad94271d6ef2" translate="yes" xml:space="preserve">
          <source>ExtensionArray.astype()</source>
          <target state="translated">ExtensionArray.astype()</target>
        </trans-unit>
        <trans-unit id="d881662b6e88f86f370e542e5ffce1e952677572" translate="yes" xml:space="preserve">
          <source>ExtensionArray.copy()</source>
          <target state="translated">ExtensionArray.copy()</target>
        </trans-unit>
        <trans-unit id="c25ceeaf7cd5462dd83a44781b60b18565c34647" translate="yes" xml:space="preserve">
          <source>ExtensionArray.dropna()</source>
          <target state="translated">ExtensionArray.dropna()</target>
        </trans-unit>
        <trans-unit id="8232e429a1ae7ce87db05235484a878fb30467d7" translate="yes" xml:space="preserve">
          <source>ExtensionArray.dtype</source>
          <target state="translated">ExtensionArray.dtype</target>
        </trans-unit>
        <trans-unit id="d5f30bc91af1ee0c40cd82f3faef035c88e5e068" translate="yes" xml:space="preserve">
          <source>ExtensionArray.factorize()</source>
          <target state="translated">ExtensionArray.factorize()</target>
        </trans-unit>
        <trans-unit id="f17d5971a3025877406d8a41f9758ecb18d8e1c5" translate="yes" xml:space="preserve">
          <source>ExtensionArray.fillna()</source>
          <target state="translated">ExtensionArray.fillna()</target>
        </trans-unit>
        <trans-unit id="26a2b599bfc6c588c8d980a67deaa378a9f260ce" translate="yes" xml:space="preserve">
          <source>ExtensionArray.isna()</source>
          <target state="translated">ExtensionArray.isna()</target>
        </trans-unit>
        <trans-unit id="a8da76c9d853401065d5da408acc3f5e3aa94c73" translate="yes" xml:space="preserve">
          <source>ExtensionArray.nbytes</source>
          <target state="translated">ExtensionArray.nbytes</target>
        </trans-unit>
        <trans-unit id="c6a53b584b48dc3783f7608e38a82fbfc3b5a348" translate="yes" xml:space="preserve">
          <source>ExtensionArray.ndim</source>
          <target state="translated">ExtensionArray.ndim</target>
        </trans-unit>
        <trans-unit id="2621513560825cc090806820370827ebe13a52b8" translate="yes" xml:space="preserve">
          <source>ExtensionArray.ravel()</source>
          <target state="translated">ExtensionArray.ravel()</target>
        </trans-unit>
        <trans-unit id="cae96a0505b2bb407af83e96a074c69d888fe5fd" translate="yes" xml:space="preserve">
          <source>ExtensionArray.repeat()</source>
          <target state="translated">ExtensionArray.repeat()</target>
        </trans-unit>
        <trans-unit id="22ac86c9049a13a9b5d2cc23e98eb17c70be0a47" translate="yes" xml:space="preserve">
          <source>ExtensionArray.searchsorted()</source>
          <target state="translated">ExtensionArray.searchsorted()</target>
        </trans-unit>
        <trans-unit id="5f2bfd13a20d7db36de0dc5968073faa3a933741" translate="yes" xml:space="preserve">
          <source>ExtensionArray.shape</source>
          <target state="translated">ExtensionArray.shape</target>
        </trans-unit>
        <trans-unit id="a1e61288edbfdbaebc59f8c35cae46a720981ef8" translate="yes" xml:space="preserve">
          <source>ExtensionArray.shift()</source>
          <target state="translated">ExtensionArray.shift()</target>
        </trans-unit>
        <trans-unit id="295aa54a63b343065fde06347d2d91692747b993" translate="yes" xml:space="preserve">
          <source>ExtensionArray.take is called by &lt;code&gt;Series.__getitem__&lt;/code&gt;, &lt;code&gt;.loc&lt;/code&gt;, &lt;code&gt;iloc&lt;/code&gt;, when &lt;code&gt;indices&lt;/code&gt; is a sequence of values. Additionally, it&amp;rsquo;s called by &lt;code&gt;Series.reindex()&lt;/code&gt;, or any other method that causes realignment, with a &lt;code&gt;fill_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a878e0fac59c4a49ad22991013f4ce84a8371ef" translate="yes" xml:space="preserve">
          <source>ExtensionArray.take()</source>
          <target state="translated">ExtensionArray.take()</target>
        </trans-unit>
        <trans-unit id="fa80d49704c1f5509cc2d5797fe6e5770b1285d2" translate="yes" xml:space="preserve">
          <source>ExtensionArray.unique()</source>
          <target state="translated">ExtensionArray.unique()</target>
        </trans-unit>
        <trans-unit id="9188521c150dcccfc6df8a7a48f079f336c923d3" translate="yes" xml:space="preserve">
          <source>ExtensionArrays are limited to 1 dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66602c53ed25b3e51f8c59ce85a326a3a950f109" translate="yes" xml:space="preserve">
          <source>ExtensionDtype</source>
          <target state="translated">ExtensionDtype</target>
        </trans-unit>
        <trans-unit id="231ef721f0da6370f6d08f0b66f0066bef3d8314" translate="yes" xml:space="preserve">
          <source>ExtensionDtype.construct_array_type()</source>
          <target state="translated">ExtensionDtype.construct_array_type()</target>
        </trans-unit>
        <trans-unit id="cbeefe5c4f031587c157481d8c4838412feca0dd" translate="yes" xml:space="preserve">
          <source>ExtensionDtype.construct_from_string()</source>
          <target state="translated">ExtensionDtype.construct_from_string()</target>
        </trans-unit>
        <trans-unit id="cb70f3bcb5550094ff4d75978b1745a3c03407e4" translate="yes" xml:space="preserve">
          <source>ExtensionDtype.is_dtype()</source>
          <target state="translated">ExtensionDtype.is_dtype()</target>
        </trans-unit>
        <trans-unit id="9a5a2475399414f3534ef36879746a2dd8b764c5" translate="yes" xml:space="preserve">
          <source>ExtensionDtype.kind</source>
          <target state="translated">ExtensionDtype.kind</target>
        </trans-unit>
        <trans-unit id="2e14b102adfd9fb34a8c898ff1442f35e8f56571" translate="yes" xml:space="preserve">
          <source>ExtensionDtype.na_value</source>
          <target state="translated">ExtensionDtype.na_value</target>
        </trans-unit>
        <trans-unit id="0c2710203a9f29a3f6cae2b480c90729fb15affe" translate="yes" xml:space="preserve">
          <source>ExtensionDtype.name</source>
          <target state="translated">ExtensionDtype.name</target>
        </trans-unit>
        <trans-unit id="449a72da72656bcaa4b340d7f5acfd40870ec6fa" translate="yes" xml:space="preserve">
          <source>ExtensionDtype.names</source>
          <target state="translated">ExtensionDtype.names</target>
        </trans-unit>
        <trans-unit id="d2feb58bbdabeae745ea82cf7d2ecadced161772" translate="yes" xml:space="preserve">
          <source>ExtensionDtype.type</source>
          <target state="translated">ExtensionDtype.type</target>
        </trans-unit>
        <trans-unit id="de91e8f5aa51702df94221f4e5a4e07caeb2d019" translate="yes" xml:space="preserve">
          <source>ExtensionDtypes are required to be hashable. The base class provides a default implementation, which relies on the &lt;code&gt;_metadata&lt;/code&gt; class attribute. &lt;code&gt;_metadata&lt;/code&gt; should be a tuple containing the strings that define your data type. For example, with &lt;code&gt;PeriodDtype&lt;/code&gt; that&amp;rsquo;s the &lt;code&gt;freq&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656bcfe284e2da39c77d4fdab55b16ad3c654719" translate="yes" xml:space="preserve">
          <source>Extensions</source>
          <target state="translated">Extensions</target>
        </trans-unit>
        <trans-unit id="d8871d379ef5a388cc087108c344111259832f48" translate="yes" xml:space="preserve">
          <source>Extract 3 random elements from the &lt;code&gt;Series&lt;/code&gt;&lt;code&gt;df['num_legs']&lt;/code&gt;: Note that we use &lt;code&gt;random_state&lt;/code&gt; to ensure the reproducibility of the examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41f2c3a836fda251a32fc0e850e22516bd98228" translate="yes" xml:space="preserve">
          <source>Extract capture groups in the regex &lt;code&gt;pat&lt;/code&gt; as columns in a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e566ed8d5eaa3d640370b431d27a738a5303bf" translate="yes" xml:space="preserve">
          <source>Extract duplicated index elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c596be4c1daf9bf935f8694deb3c54326de1710" translate="yes" xml:space="preserve">
          <source>Extract element from each component at specified position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744b4b33fae9f9e29abd38204a65372410ed487d" translate="yes" xml:space="preserve">
          <source>Extract element from lists, tuples, or strings in each element in the Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fc28f4138b579eb07ab4da30c5782cefb1a15a" translate="yes" xml:space="preserve">
          <source>Extract matched groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbfdead34054d5165239fdacbcfde126181ac28e" translate="yes" xml:space="preserve">
          <source>Extract the array stored within a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad5026b7dc3bacdd43b7f246a7f6d355abdaa47" translate="yes" xml:space="preserve">
          <source>Extracting substrings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79eecff6b62da41fcfcc6f0af3acd88c8b8b4c53" translate="yes" xml:space="preserve">
          <source>FRED</source>
          <target state="translated">FRED</target>
        </trans-unit>
        <trans-unit id="017ef19a9d298f725b1ec74fe5ece28ad72e6e0f" translate="yes" xml:space="preserve">
          <source>FY5253</source>
          <target state="translated">FY5253</target>
        </trans-unit>
        <trans-unit id="5c421e21100f33dcaf16b1ff70ecca0ef7659f07" translate="yes" xml:space="preserve">
          <source>FY5253.apply()</source>
          <target state="translated">FY5253.apply()</target>
        </trans-unit>
        <trans-unit id="5601fdf04bf11b9e0b92590ff68269e42840e58e" translate="yes" xml:space="preserve">
          <source>FY5253.apply_index()</source>
          <target state="translated">FY5253.apply_index()</target>
        </trans-unit>
        <trans-unit id="19bfede70046057b28680d716bbb18b980d4220d" translate="yes" xml:space="preserve">
          <source>FY5253.base</source>
          <target state="translated">FY5253.base</target>
        </trans-unit>
        <trans-unit id="8cec92b095723ba7ad895eac9b7789e3db48ba2a" translate="yes" xml:space="preserve">
          <source>FY5253.copy()</source>
          <target state="translated">FY5253.copy()</target>
        </trans-unit>
        <trans-unit id="7c187cb09c095fe96f994db6a0aebd3afc90048f" translate="yes" xml:space="preserve">
          <source>FY5253.freqstr</source>
          <target state="translated">FY5253.freqstr</target>
        </trans-unit>
        <trans-unit id="c955b39246415eca9108fe9bde93232b3ccff6db" translate="yes" xml:space="preserve">
          <source>FY5253.get_rule_code_suffix()</source>
          <target state="translated">FY5253.get_rule_code_suffix()</target>
        </trans-unit>
        <trans-unit id="5298a875486b7169ab5abdd1d7ba4d58e1c752c6" translate="yes" xml:space="preserve">
          <source>FY5253.get_year_end()</source>
          <target state="translated">FY5253.get_year_end()</target>
        </trans-unit>
        <trans-unit id="43012cb72b94b94c95e1b83d9b847e4c61a89f63" translate="yes" xml:space="preserve">
          <source>FY5253.isAnchored()</source>
          <target state="translated">FY5253.isAnchored()</target>
        </trans-unit>
        <trans-unit id="eb7a63fe669feea50eefdb7f8ae8bd5e19af6a3e" translate="yes" xml:space="preserve">
          <source>FY5253.kwds</source>
          <target state="translated">FY5253.kwds</target>
        </trans-unit>
        <trans-unit id="c1ca3e62768aad77a704433b5226bb17fc633bbd" translate="yes" xml:space="preserve">
          <source>FY5253.name</source>
          <target state="translated">FY5253.name</target>
        </trans-unit>
        <trans-unit id="b04023d1e1db1a1cd0708ec89c7776b9b0952f35" translate="yes" xml:space="preserve">
          <source>FY5253.nanos</source>
          <target state="translated">FY5253.nanos</target>
        </trans-unit>
        <trans-unit id="591dd42f1a57e74a3a2bfb62d5ecf8e4a9117c99" translate="yes" xml:space="preserve">
          <source>FY5253.normalize</source>
          <target state="translated">FY5253.normalize</target>
        </trans-unit>
        <trans-unit id="b63752f9c96232ad43a0804cc7f7094c5fcc2103" translate="yes" xml:space="preserve">
          <source>FY5253.onOffset()</source>
          <target state="translated">FY5253.onOffset()</target>
        </trans-unit>
        <trans-unit id="f422d1976fef0736bd1f85d70f5c7ac4c113494c" translate="yes" xml:space="preserve">
          <source>FY5253.rollback()</source>
          <target state="translated">FY5253.rollback()</target>
        </trans-unit>
        <trans-unit id="f814706653b1f30f15f5d614a94d92ced79db59a" translate="yes" xml:space="preserve">
          <source>FY5253.rollforward()</source>
          <target state="translated">FY5253.rollforward()</target>
        </trans-unit>
        <trans-unit id="4b3afd6bce6fff09096989fc47cc72ea709477b2" translate="yes" xml:space="preserve">
          <source>FY5253.rule_code</source>
          <target state="translated">FY5253.rule_code</target>
        </trans-unit>
        <trans-unit id="96cb254005259267e19e4bd82e0fd8fca2de6e97" translate="yes" xml:space="preserve">
          <source>FY5253Quarter</source>
          <target state="translated">FY5253Quarter</target>
        </trans-unit>
        <trans-unit id="784ec042450bf644e66f35a4a938f32413cf5031" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.apply()</source>
          <target state="translated">FY5253Quarter.apply()</target>
        </trans-unit>
        <trans-unit id="b85f1c00dbdb6f30641a8700c8a806d459815e7e" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.apply_index()</source>
          <target state="translated">FY5253Quarter.apply_index()</target>
        </trans-unit>
        <trans-unit id="2e92948513d2191885863cda33bc3fecaf39830d" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.base</source>
          <target state="translated">FY5253Quarter.base</target>
        </trans-unit>
        <trans-unit id="1d6dd6043c56a8f1f6bc64560198b8cdf6404f02" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.copy()</source>
          <target state="translated">FY5253Quarter.copy()</target>
        </trans-unit>
        <trans-unit id="627993ed976b336dd92237f82f9513a96b0b0816" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.freqstr</source>
          <target state="translated">FY5253Quarter.freqstr</target>
        </trans-unit>
        <trans-unit id="9382fceeeaefa1d3a83c1e1088daa23f089bfd28" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.get_weeks()</source>
          <target state="translated">FY5253Quarter.get_weeks()</target>
        </trans-unit>
        <trans-unit id="2bdc786f729da695a2417ae118b6f500217f6d61" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.isAnchored()</source>
          <target state="translated">FY5253Quarter.isAnchored()</target>
        </trans-unit>
        <trans-unit id="131a83b6cb7a0cae58edaed29e72ebbac580d613" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.kwds</source>
          <target state="translated">FY5253Quarter.kwds</target>
        </trans-unit>
        <trans-unit id="f92e5dbdb30c0e456c81014fb50c6ade607078d6" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.name</source>
          <target state="translated">FY5253Quarter.name</target>
        </trans-unit>
        <trans-unit id="f878fd5b00ef03a1bd8c417ac65d2bd9dbd482e8" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.nanos</source>
          <target state="translated">FY5253Quarter.nanos</target>
        </trans-unit>
        <trans-unit id="4721c95a94bd62217b65365ed8f55d5599d6550c" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.normalize</source>
          <target state="translated">FY5253Quarter.normalize</target>
        </trans-unit>
        <trans-unit id="81f1f26d0714f6f53a686dd752c282d2237d0dfb" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.onOffset()</source>
          <target state="translated">FY5253Quarter.onOffset()</target>
        </trans-unit>
        <trans-unit id="bff7ef0536dd5481b9739e743990ea675542ceda" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.rollback()</source>
          <target state="translated">FY5253Quarter.rollback()</target>
        </trans-unit>
        <trans-unit id="3ad4ca001f2ee53912ae6b9d625be4d4cdb345d8" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.rollforward()</source>
          <target state="translated">FY5253Quarter.rollforward()</target>
        </trans-unit>
        <trans-unit id="8c94940257d2280193600e2e070237d3ee04b4bd" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.rule_code</source>
          <target state="translated">FY5253Quarter.rule_code</target>
        </trans-unit>
        <trans-unit id="fbc4787a7142002a26b9732c839c55435ddf8ea8" translate="yes" xml:space="preserve">
          <source>FY5253Quarter.year_has_extra_week()</source>
          <target state="translated">FY5253Quarter.year_has_extra_week()</target>
        </trans-unit>
        <trans-unit id="106e4b4674a42bd42b9cedf0e327049f1e090b77" translate="yes" xml:space="preserve">
          <source>Factorizing values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cbaa4d652fa9b69360beb1ca8205ae3f1f269c" translate="yes" xml:space="preserve">
          <source>Factory function for creating a subclass of &lt;code&gt;Styler&lt;/code&gt; with a custom template and Jinja environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97cdbdc7feff827efb082a6b6dd2727237cd49fd" translate="yes" xml:space="preserve">
          <source>False</source>
          <target state="translated">False</target>
        </trans-unit>
        <trans-unit id="b96deb3768dcebdce69efb10e87804c88b8a34e2" translate="yes" xml:space="preserve">
          <source>False : Do not sort the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20a7910e54529a94e15496d9bf2c64deab106ce" translate="yes" xml:space="preserve">
          <source>False : Drop all duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98629c7d9f2b3ee2abb8a2b88c80ef6f13a8d9e" translate="yes" xml:space="preserve">
          <source>False : Mark all duplicates as &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e574619f5888527dd4b46c8d21efb6599967561" translate="yes" xml:space="preserve">
          <source>False : do not sort the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea45601f3da5945d3494412d4956fc90a505760" translate="yes" xml:space="preserve">
          <source>False : returns an ndarray of integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5509abef56b320ae40870a70b29bce3da24aff93" translate="yes" xml:space="preserve">
          <source>False for ranks by high (1) to low (N)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361d4af337668b944d87cc468ab35915ea6ead05" translate="yes" xml:space="preserve">
          <source>False to sort in descending order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c7b9e0c6640c191e80b0f42a3e0cb5599fe90c" translate="yes" xml:space="preserve">
          <source>False to sort in descending order Can also be a list to specify a directed ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71ab72067a97a3bff9c6ece7c76464ff712e84f" translate="yes" xml:space="preserve">
          <source>False, because &lt;code&gt;0&lt;/code&gt; is considered False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7fd33420282f75aebed8e9c5a1dc0497e87330" translate="yes" xml:space="preserve">
          <source>False, write a string representation of the object to the clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bc9e31cbcb5092f1db34d73fe09930c9c1ff11" translate="yes" xml:space="preserve">
          <source>False: negative values in &lt;code&gt;indices&lt;/code&gt; indicate positional indices from the right (the default). This is similar to &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.take.html#numpy.take&quot;&gt;&lt;code&gt;numpy.take()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc15e7c9376a780ab20e2736f813431c67f47561" translate="yes" xml:space="preserve">
          <source>False: only update values that are NA in the original DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3332e1b039f3d9c21340c1bb2685d08ae322a82" translate="yes" xml:space="preserve">
          <source>Fama/French</source>
          <target state="translated">Fama/French</target>
        </trans-unit>
        <trans-unit id="874216e990eccdf7c6c0b4c9179b7cb8a56dd84f" translate="yes" xml:space="preserve">
          <source>Fast integer location scalar accessor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337ea8ca14b943e61d637c82f2c613bba294e211" translate="yes" xml:space="preserve">
          <source>Fast lookup of value from 1-dimensional ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10b648a47a4d5e7cf7d74b1e50dcb4a6bd8b633" translate="yes" xml:space="preserve">
          <source>Fast lookup of value from 1-dimensional ndarray. Only use this if you know what you&amp;rsquo;re doing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd36642eb449b970a92b19f21c93bab36201657f" translate="yes" xml:space="preserve">
          <source>Fast scalar value getting and setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de292bd5560d050aa899dfa437d2faf6fcfb7e8" translate="yes" xml:space="preserve">
          <source>Fast writing/reading. Not-appendable, nor searchable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99538d966c9294a32b99f0efc0badb2deba8a351" translate="yes" xml:space="preserve">
          <source>Faster than &lt;code&gt;.sort_values().head(n)&lt;/code&gt; for small &lt;code&gt;n&lt;/code&gt; relative to the size of the &lt;code&gt;Series&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825fdb617ed6728a4a54a249658aec3f6835cd72" translate="yes" xml:space="preserve">
          <source>Faster than &lt;code&gt;.sort_values(ascending=False).head(n)&lt;/code&gt; for small &lt;code&gt;n&lt;/code&gt; relative to the size of the &lt;code&gt;Series&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9bf5551ad3e6450e13ede432ffe8987098c1fb" translate="yes" xml:space="preserve">
          <source>Feather</source>
          <target state="translated">Feather</target>
        </trans-unit>
        <trans-unit id="b0fdb754235635f8ea32eb98dd0e41c1153e1dba" translate="yes" xml:space="preserve">
          <source>Feather Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bae807be9d78f92cf0d62e494d47b8de3238cc" translate="yes" xml:space="preserve">
          <source>Featuretools</source>
          <target state="translated">Featuretools</target>
        </trans-unit>
        <trans-unit id="1bd8f0c9372d96db7fc3b02fc7b5017c1b1fe9fc" translate="yes" xml:space="preserve">
          <source>Featuretools is a Python library for automated feature engineering built on top of pandas. It excels at transforming temporal and relational datasets into feature matrices for machine learning using reusable feature engineering &amp;ldquo;primitives&amp;rdquo;. Users can contribute their own primitives in Python and share them with the rest of the community.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5fc74a0c921be17dde1b381a9a43609da45dab" translate="yes" xml:space="preserve">
          <source>Fedora</source>
          <target state="translated">Fedora</target>
        </trans-unit>
        <trans-unit id="e37089c94eb8cb4b17ffb0dece5eb4de66357210" translate="yes" xml:space="preserve">
          <source>Feel free to ask questions on the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/pydata&quot;&gt;mailing list&lt;/a&gt; or on &lt;a href=&quot;https://gitter.im/pydata/pandas&quot;&gt;Gitter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a483d7df7ab24a937de2380a830b243ab62c3a2a" translate="yes" xml:space="preserve">
          <source>Feel free to skip it, unless you are familiar with the implementation of the algorithm, or you discover some counter-intuitive behavior while writing the examples for the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ea81880c7ea5074a817ce7e3f2f2fdbcfea6d9" translate="yes" xml:space="preserve">
          <source>Field delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537a99a5583ab4fca05a8cb9d614bc5ab2272c0a" translate="yes" xml:space="preserve">
          <source>Field name to join on in left DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ce7cef8b0db07219e0a6af8f7d876b8cac156f" translate="yes" xml:space="preserve">
          <source>Field name to join on in right DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2428bb9f4638e33864108df0c94759242ddf4ce" translate="yes" xml:space="preserve">
          <source>Field name to join on. Must be found in both DataFrames. The data MUST be ordered. Furthermore this must be a numeric column, such as datetimelike, integer, or float. On or left_on/right_on must be given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9582e86f4774cdf2c342c747a46adc99527b29f4" translate="yes" xml:space="preserve">
          <source>Field names to join on in left DataFrame. Can be a vector or list of vectors of the length of the DataFrame to use a particular vector as the join key instead of columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba74cb6f01f4490a588ac70b9e868ab69dfb204" translate="yes" xml:space="preserve">
          <source>Field names to join on in right DataFrame or vector/list of vectors per left_on docs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0775d3111b928ff336ce0fae1112cd65453fb13f" translate="yes" xml:space="preserve">
          <source>Field names to join on. Must be found in both DataFrames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387353364130ed6d443806b5a300456ac5e8ff91" translate="yes" xml:space="preserve">
          <source>Field names to match on in the left DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc5b2b66482174b9fe56a7bbcc7ea8a9dc20f34" translate="yes" xml:space="preserve">
          <source>Field names to match on in the right DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdeae7c8dead1bbc7e71d424f6decb56f17dc0a5" translate="yes" xml:space="preserve">
          <source>Field of array to use as the index, alternately a specific set of input labels to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f921bb637b152dee2457d31ff5ee759ea85df62" translate="yes" xml:space="preserve">
          <source>Fields to use as metadata for each record in resulting table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d459b24c0fff89729feac3cd99d5f9cc5bff4cb" translate="yes" xml:space="preserve">
          <source>File mode to use (write or append).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf921970eeddb890ebff0d8792330c78a4638b9" translate="yes" xml:space="preserve">
          <source>File path or HDFStore object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f867daaac4e2cd95d46387c5829dc91e1389f80c" translate="yes" xml:space="preserve">
          <source>File path or Root Directory path. Will be used as Root Directory path while writing a partitioned dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2d188c74673dc7f89a526316a160f1db07c29e" translate="yes" xml:space="preserve">
          <source>File path or existing ExcelWriter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313b1148aa9528548af7998cfbba677fcabeb3b9" translate="yes" xml:space="preserve">
          <source>File path or object, if None is provided the result is returned as a string. If a file object is passed it should be opened with &lt;code&gt;newline=&amp;rsquo;&amp;lsquo;&lt;/code&gt;, disabling universal newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095f84ba38f5b35140a16b30636b5da81cd59592" translate="yes" xml:space="preserve">
          <source>File path or object. If not specified, the result is returned as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e72ab0bf82ca97709211f07f6e7471fe8797f8" translate="yes" xml:space="preserve">
          <source>File path where the pickled object will be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e26c6c8f5ac7b5d57f95844c1203c4def0475be" translate="yes" xml:space="preserve">
          <source>File path where the pickled object will be stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b351038351d12644063121e24b90ff37b41455d8" translate="yes" xml:space="preserve">
          <source>Fill NA values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80990868950f517aa1173a925642b04f82ae8d3" translate="yes" xml:space="preserve">
          <source>Fill NA/NaN values using the specified method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3703dd475408f0afbbeb8a80210486a209db623" translate="yes" xml:space="preserve">
          <source>Fill NA/NaN values with the specified value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012f242cf29ad225c54b44a3d5b4edfd2db37cfa" translate="yes" xml:space="preserve">
          <source>Fill NaN values in the DataFrame using the specified method, which can be &amp;lsquo;backfill&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620143528e7eeceab027f4c36491dbefd2ac6f7e" translate="yes" xml:space="preserve">
          <source>Fill NaN values in the DataFrame using the specified method, which can be &amp;lsquo;bfill&amp;rsquo; and &amp;lsquo;ffill&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b238ad9507ac3f809a2ab2e08a93025a62752747" translate="yes" xml:space="preserve">
          <source>Fill NaN values in the Series using the specified method, which can be &amp;lsquo;backfill&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01169179363207d823dbfbfb25b9a2e49f9e7f71" translate="yes" xml:space="preserve">
          <source>Fill NaN values in the Series using the specified method, which can be &amp;lsquo;bfill&amp;rsquo; and &amp;lsquo;ffill&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b9680d33b50b90915060223dd79eff0fbc58de" translate="yes" xml:space="preserve">
          <source>Fill NaN values in the resampled data with nearest neighbor starting from center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d891bc00bafcca46ab866f09a35e42513e1ec32" translate="yes" xml:space="preserve">
          <source>Fill NaN values using interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5567118bdf70946310fb9b109d9c8aa5b86ffff1" translate="yes" xml:space="preserve">
          <source>Fill NaN values using the specified method, which can be &amp;lsquo;backfill&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6476bed1e703a5e80152dbeb86e69facac82ba3f" translate="yes" xml:space="preserve">
          <source>Fill NaN values with nearest neighbor starting from center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239b7e96bf370e9a8793ec17c8fc251ade8f48f5" translate="yes" xml:space="preserve">
          <source>Fill existing missing (NaN) values, and any new element needed for successful DataFrame alignment, with this value before computation. If data in both corresponding DataFrame locations is missing the result will be missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c8a1f9c96c84f9010d65f2ca63bb4847e17255" translate="yes" xml:space="preserve">
          <source>Fill existing missing (NaN) values, and any new element needed for successful Series alignment, with this value before computation. If data in both corresponding Series locations is missing the result will be missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7ce6d948d44dac6dfeaf8bf517f1c7d18be768" translate="yes" xml:space="preserve">
          <source>Fill missing values introduced by upsampling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d07b8d33cc2312853bed471ecde65638350c5b" translate="yes" xml:space="preserve">
          <source>Fill missing values using different methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6b45ab7ba3a6ee1147e740d05c4d0e23098774" translate="yes" xml:space="preserve">
          <source>Fill the DataFrame forward (that is, going down) along each column using linear interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2e73645aaaa37322817e31676e49792ea4dd15" translate="yes" xml:space="preserve">
          <source>Fill value for missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0509ef51947892cfb19b054f43ccc493d4b39614" translate="yes" xml:space="preserve">
          <source>Fill value to use for NA-indices when &lt;code&gt;allow_fill&lt;/code&gt; is True. This may be &lt;code&gt;None&lt;/code&gt;, in which case the default NA value for the type, &lt;code&gt;self.dtype.na_value&lt;/code&gt;, is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acec370e9c2d1616314d788ad14ea433b2c5ee3f" translate="yes" xml:space="preserve">
          <source>Filling NAs within groups with a value derived from each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae1b11e487a49cc3f500a364d8b93960e2c5f23" translate="yes" xml:space="preserve">
          <source>Filling axis, method and limit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720f8435075e534272838f7737e56f06a0e89d75" translate="yes" xml:space="preserve">
          <source>Filling in &lt;code&gt;NaN&lt;/code&gt; in a &lt;a href=&quot;pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; via linear interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364da3468aeaddc67bdf9a029fb9bfada31d4104" translate="yes" xml:space="preserve">
          <source>Filling in &lt;code&gt;NaN&lt;/code&gt; in a Series by padding, but filling at most two consecutive &lt;code&gt;NaN&lt;/code&gt; at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36dae5bd5ff9735cf59567c6eecb5edf838f9c67" translate="yes" xml:space="preserve">
          <source>Filling in &lt;code&gt;NaN&lt;/code&gt; in a Series via polynomial interpolation or splines: Both &amp;lsquo;polynomial&amp;rsquo; and &amp;lsquo;spline&amp;rsquo; methods require that you also specify an &lt;code&gt;order&lt;/code&gt; (int).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7ba42d91a9f6fdb44216bf2581a321997de5cd" translate="yes" xml:space="preserve">
          <source>Filling left and right side of strings in the Series/Index with an additional character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf0129732b2592d4bc9cbea905a0fdc8181a407" translate="yes" xml:space="preserve">
          <source>Filling left and right side of strings in the Series/Index with an additional character. Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.center&quot;&gt;&lt;code&gt;str.center()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811887a667f91303bfe683ebc5d89c25b8a758b9" translate="yes" xml:space="preserve">
          <source>Filling left side of strings in the Series/Index with an additional character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c736ad6780ac3ac80ef59b551cb3689cad0a107" translate="yes" xml:space="preserve">
          <source>Filling left side of strings in the Series/Index with an additional character. Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.rjust&quot;&gt;&lt;code&gt;str.rjust()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad05a0f0992418b05509080d6ac6f73afcab4e55" translate="yes" xml:space="preserve">
          <source>Filling method for upsampling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71ddf48e5fc87844cc9033e90535193556eea1a" translate="yes" xml:space="preserve">
          <source>Filling missing values: fillna</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591c633fe1e0c4843a77818a3d273b2e5108eee5" translate="yes" xml:space="preserve">
          <source>Filling right side of strings in the Series/Index with an additional character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac10402a9e5bce560522e238f305710fdc6b5048" translate="yes" xml:space="preserve">
          <source>Filling right side of strings in the Series/Index with an additional character. Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.ljust&quot;&gt;&lt;code&gt;str.ljust()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0549c496a7ed86749b9c184bc8c5c01522d73491" translate="yes" xml:space="preserve">
          <source>Filling with a PandasObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc550ee2845042f5e8d1ff1a04a41f75b5f1c5bf" translate="yes" xml:space="preserve">
          <source>Fills boths sides of strings with an arbitrary character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3790f1af6bf86ff119f3eca7c76b2154b52e604" translate="yes" xml:space="preserve">
          <source>Fills boths sides of strings with an arbitrary character. Equivalent to &lt;code&gt;Series.str.pad(side='both')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a43da16217d034e574ff066c3012d9cdf0c66f8" translate="yes" xml:space="preserve">
          <source>Fills the left side of strings with an arbitrary character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106ddad8573bd02a956a989c9742c39ceb29806f" translate="yes" xml:space="preserve">
          <source>Fills the left side of strings with an arbitrary character. Equivalent to &lt;code&gt;Series.str.pad(side='left')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a9279066cf35c7e73adb2878aaafa11b9de5d8" translate="yes" xml:space="preserve">
          <source>Fills the right side of strings with an arbitrary character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05003d915ba13fb5621018480e37ff2d17c1e5a5" translate="yes" xml:space="preserve">
          <source>Fills the right side of strings with an arbitrary character. Equivalent to &lt;code&gt;Series.str.pad(side='right')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5b8b3cd17ff18d6b2b9386a1b1dbb0a2f5d05a" translate="yes" xml:space="preserve">
          <source>Fills the specified sides of strings with an arbitrary character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bdbda9547944933870b63744d2169ce82e2877" translate="yes" xml:space="preserve">
          <source>Filter out data based on the group sum or mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9075edca21736af901d2add18e4d9491f2452b4d" translate="yes" xml:space="preserve">
          <source>Filtering</source>
          <target state="translated">Filtering</target>
        </trans-unit>
        <trans-unit id="e24c8deea492863000f12c08bc2a43031bf33c9b" translate="yes" xml:space="preserve">
          <source>Filtering in SAS is done with an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;where&lt;/code&gt; statement, on one or more columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ceb04aaab45b86e456bdfc93c82ee8e289159f8" translate="yes" xml:space="preserve">
          <source>Filtering in SQL is done via a WHERE clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5eb30ddec11231f97abc85b225208163f15fac" translate="yes" xml:space="preserve">
          <source>Filtering in Stata is done with an &lt;code&gt;if&lt;/code&gt; clause on one or more columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba995512865f28b893456e50621f593eb7467d9e" translate="yes" xml:space="preserve">
          <source>Filtration</source>
          <target state="translated">Filtration</target>
        </trans-unit>
        <trans-unit id="438e35bbd0819a6546277d92c231dafcfbc83738" translate="yes" xml:space="preserve">
          <source>Finally, Pandas has arrays that mostly overlap with NumPy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074f531bafa15bb6667d0794076638395257fdec" translate="yes" xml:space="preserve">
          <source>Finally, commit your changes to your local repository with an explanatory message. &lt;em&gt;Pandas&lt;/em&gt; uses a convention for commit message prefixes and layout. Here are some common prefixes along with general guidelines for when to use them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3a2030544dc52fa263a10f8f42aa1943fab2a3" translate="yes" xml:space="preserve">
          <source>Finally, make the pull request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921496f8a7db5c07ef7a944cc63cfb57c8926a84" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;code&gt;ind&lt;/code&gt; parameter determines the evaluation points for the plot of the estimated PDF:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9128d56448c5b7e9d9b85e85dcc6a217e0b59284" translate="yes" xml:space="preserve">
          <source>Finally, the input shapes matched. &lt;code&gt;Styler.applymap&lt;/code&gt; calls the function on each scalar input, and the function returns a scalar output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba35679e402eac43d8224a5f31102d8e499a8f05" translate="yes" xml:space="preserve">
          <source>Finally, there are several &lt;a href=&quot;#visualization-tools&quot;&gt;plotting functions&lt;/a&gt; in &lt;code&gt;pandas.plotting&lt;/code&gt; that take a &lt;a href=&quot;../reference/api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../reference/api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt; as an argument. These include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5590c4de9e78bd5ff9604091f19c548b7d153de1" translate="yes" xml:space="preserve">
          <source>Finally, we expect certain styling functions to be common enough that we&amp;rsquo;ve included a few &amp;ldquo;built-in&amp;rdquo; to the &lt;code&gt;Styler&lt;/code&gt;, so you don&amp;rsquo;t have to write them yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461e01cebb09ff495c3966513426443f9e44b706" translate="yes" xml:space="preserve">
          <source>Financial analysis in Python, by Thomas Wiecki</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c7f2b66340b9f72da6f9ec397c5d793b7efc1c" translate="yes" xml:space="preserve">
          <source>Find all occurrences of pattern or regular expression in the Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d914d41d09d92c97e462c896bc6019f8705e89" translate="yes" xml:space="preserve">
          <source>Find indices where elements should be inserted to maintain order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6777ff2908c662d8b35b2bcc5a8eff61cbc5d874" translate="yes" xml:space="preserve">
          <source>Find the indices into a sorted Index &lt;code&gt;self&lt;/code&gt; such that, if the corresponding elements in &lt;code&gt;value&lt;/code&gt; were inserted before the indices, the order of &lt;code&gt;self&lt;/code&gt; would be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa6ebd8fbaddbd5838a4bb02aa91f7c9b8903dc" translate="yes" xml:space="preserve">
          <source>Find the indices into a sorted Series &lt;code&gt;self&lt;/code&gt; such that, if the corresponding elements in &lt;code&gt;value&lt;/code&gt; were inserted before the indices, the order of &lt;code&gt;self&lt;/code&gt; would be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716dfeeb0123c5721590db33ec916189d656c0ff" translate="yes" xml:space="preserve">
          <source>Find the indices into a sorted array &lt;code&gt;self&lt;/code&gt; (a) such that, if the corresponding elements in &lt;code&gt;value&lt;/code&gt; were inserted before the indices, the order of &lt;code&gt;self&lt;/code&gt; would be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b76997622a184c319f0f4883cd439078e1c8b3" translate="yes" xml:space="preserve">
          <source>Find the locations (indices) of the labels from the index for every entry in the &lt;code&gt;where&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517a7893ed2a96fe5193cf1a0eb7e6e9f21aa5c8" translate="yes" xml:space="preserve">
          <source>Find the unique value in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9ce9325a8828ae6caeb2fdb3fe7c3703913154" translate="yes" xml:space="preserve">
          <source>Finer Control: Display Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a6e6a60e22fb8666833e481ab865cee9d2db5a" translate="yes" xml:space="preserve">
          <source>Finer control: slicing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8527da08fc06bc9a94667e594a3fbac56fdfd9fb" translate="yes" xml:space="preserve">
          <source>First DataFrame to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3c09cc589a3fe214655be233df3ffc15dc338e" translate="yes" xml:space="preserve">
          <source>First differences of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8761f1ada728e18a7ee585c85d0cb9a47387bd" translate="yes" xml:space="preserve">
          <source>First discrete difference for a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682b4cf0861faa16a4ac787fd346894847d9b0d2" translate="yes" xml:space="preserve">
          <source>First discrete difference of element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457429c2078f20369b179701540ca68b6ea144e4" translate="yes" xml:space="preserve">
          <source>First discrete difference of object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1105d718a6f7fb0bb3a2d17c942d8d1d3df3280" translate="yes" xml:space="preserve">
          <source>First let&amp;rsquo;s create a few decent-sized arrays to play with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df437b3e25df298d58bd8402e83550074ea9777a" translate="yes" xml:space="preserve">
          <source>First level of index to be swapped. Can pass level name as string. Type of parameters can be mixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86829af109eeb1096386b337d9177676af1fb4a1" translate="yes" xml:space="preserve">
          <source>First we&amp;rsquo;re going to need to import the Cython magic function to ipython:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1202c2eab1bf3d61d38baddda864a5fd6c924cd8" translate="yes" xml:space="preserve">
          <source>First you will need &lt;a href=&quot;http://conda.pydata.org/docs/&quot;&gt;Conda&lt;/a&gt; to be installed and downloading and running the &lt;a href=&quot;http://conda.pydata.org/miniconda.html&quot;&gt;Miniconda&lt;/a&gt; will do this for you. The installer &lt;a href=&quot;http://conda.pydata.org/miniconda.html&quot;&gt;can be found here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50022a74ee1f6e5c624643417ead03bbbbc7d9b0" translate="yes" xml:space="preserve">
          <source>First, if &lt;code&gt;to_replace&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; are both lists, they &lt;strong&gt;must&lt;/strong&gt; be the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b043a0b10b92a4156dd017939831dc8b187e8858" translate="yes" xml:space="preserve">
          <source>First, you need to have a development environment to be able to build pandas (see the docs on &lt;a href=&quot;#contributing-dev-env&quot;&gt;creating a development environment above&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4b61624a356e1d2a6d854c09b3e6ab5a6038cd" translate="yes" xml:space="preserve">
          <source>Fiscal year the Period lies in according to its starting-quarter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a760bff0046a4aa7f02ffceb04f7cca96f1c46" translate="yes" xml:space="preserve">
          <source>Flag indicating whether converted categorical data are ordered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f95c149c4faaec5888d99c7f71ec74e2531b4c8" translate="yes" xml:space="preserve">
          <source>Flag indicating whether to convert missing values to their Stata representations. If False, missing values are replaced with nan. If True, columns containing missing values are returned with object data types and missing values are represented by StataMissingValue objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662a77030cc9860bb52adc75ba74b37ca13f8b74" translate="yes" xml:space="preserve">
          <source>Flag to ignore nan values during truth testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a792d280d5985b9aba1e46b641e583758229d62" translate="yes" xml:space="preserve">
          <source>Flags can be added to the pattern or regular expression. For instance, to find the pattern &amp;lsquo;MONKEY&amp;rsquo; ignoring the case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c97a15e4943a077a1e1220e7137d2a81e85162" translate="yes" xml:space="preserve">
          <source>Flags for the &lt;code&gt;re&lt;/code&gt; module. For a complete list, &lt;a href=&quot;https://docs.python.org/3/howto/regex.html#compilation-flags&quot;&gt;see here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585436554646f7f4eacd66bdc3e594d3d286d018" translate="yes" xml:space="preserve">
          <source>Flags from &lt;code&gt;re&lt;/code&gt; module, e.g. &lt;code&gt;re.IGNORECASE&lt;/code&gt; (default is 0, which means no flags).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515107780eabce305acf354719927312071b81a1" translate="yes" xml:space="preserve">
          <source>Flags from the &lt;code&gt;re&lt;/code&gt; module, e.g. &lt;code&gt;re.IGNORECASE&lt;/code&gt;, that modify regular expression matching for things like case, spaces, etc. For more details, see &lt;a href=&quot;https://docs.python.org/3/library/re.html#module-re&quot;&gt;&lt;code&gt;re&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0543b37c8d9a7d6d7ae7b9c672da227d0ebd09" translate="yes" xml:space="preserve">
          <source>Flags to pass through to the re module, e.g. re.IGNORECASE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a90b005f85eea45da97271e0e67906807ec326" translate="yes" xml:space="preserve">
          <source>Flat file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6604e7feff8b1c565f2050463260cfbad88bc664" translate="yes" xml:space="preserve">
          <source>Flattened array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8321e71ad02696b00c9740d5199653e2fe2cef" translate="yes" xml:space="preserve">
          <source>Flattened data of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecb3394bc21b2c28a924bfb2ceb7ce3b4d4c89b" translate="yes" xml:space="preserve">
          <source>Flexible &lt;code&gt;apply&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dced8a2e2a4243ea94ec16f6aeac7e5e147302d" translate="yes" xml:space="preserve">
          <source>Flexible &lt;strong&gt;reshaping&lt;/strong&gt; and pivoting of data sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5806c6267d9b68d3103f1763eb955966fe3ab4" translate="yes" xml:space="preserve">
          <source>Flexible binary operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd6667377c655b03847b3669898276edf87d560" translate="yes" xml:space="preserve">
          <source>Float64Index[source]</source>
          <target state="translated">Float64Index[source]</target>
        </trans-unit>
        <trans-unit id="6eec942e32d846e2fa7809236a660b9a8999826a" translate="yes" xml:space="preserve">
          <source>Floats: &lt;code&gt;'float16', 'float32', 'float64'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebc44dc921c7e582f09164853c5caec040b7656" translate="yes" xml:space="preserve">
          <source>Floor the DatetimeIndex to the specified freq.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0059e1678d97210e084e848c2fa9149e58d0335" translate="yes" xml:space="preserve">
          <source>Floor the datetimes to the specified freq.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad886bee58cb0e2df6198bed9df97c140aef480" translate="yes" xml:space="preserve">
          <source>Following table shows how &lt;code&gt;pandas&lt;/code&gt; data structures define constructor properties by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5d231e67319578d1a3c4c2e247df09cf9457a6" translate="yes" xml:space="preserve">
          <source>Following this naming convention isn&amp;rsquo;t strictly necessary, but strongly suggested for compatibility with Arrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41148d5ccad00f168e223acb6c377f90966dbedf" translate="yes" xml:space="preserve">
          <source>Follows Python list.append semantics for negative values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecbbe90abea3befc6b730ae5340125aa55961ad" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;DataFrame&lt;/code&gt; objects which don&amp;rsquo;t have a meaningful index, you may wish to append them and ignore the fact that they may have overlapping indexes. To do this, use the &lt;code&gt;ignore_index&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad0cef1babda381b5f8503fa7264f9101ca8626" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;DataFrame&lt;/code&gt; objects, a string indicating a column to be used to group. Of course &lt;code&gt;df.groupby('A')&lt;/code&gt; is just syntactic sugar for &lt;code&gt;df.groupby(df['A'])&lt;/code&gt;, but it makes life simpler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a72f46c3ee1715da977723aeb661f40da9944a1" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;DataFrame&lt;/code&gt; objects, a string indicating an index level to be used to group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acd5abc7b9bd7dd1d488b166bb1139f12f68ace" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;PeriodIndex&lt;/code&gt; only, controls whether to use the start or end of &lt;code&gt;rule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c976e6e4b25103c60d93dfbad500ca5a068cf5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Styler.apply&lt;/code&gt; your function should take a Series or DataFrame (depending on the axis parameter), and return a Series or DataFrame with an identical shape where each value is a string with a CSS attribute-value pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92339953f496b23ea822e700f216e9425cad8c74" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Styler.applymap&lt;/code&gt; your function should take a scalar and return a single string with the CSS attribute-value pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63191dcfce3b8b6e25642ded988ccc2599ce21d9" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;complex&lt;/code&gt; inputs, &lt;code&gt;1.2 + 1j&lt;/code&gt;, the absolute value is \(\sqrt{ a^2 + b^2 }\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc15e72871f4239431f203a522d34e3ddbd7bbf" translate="yes" xml:space="preserve">
          <source>For DataFrame objects, rank only numeric columns if set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cce67030bcae3fa28751b9398f791cd48e516ab" translate="yes" xml:space="preserve">
          <source>For DataFrame objects, the keyword &lt;code&gt;on&lt;/code&gt; can be used to specify the column instead of the index for resampling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71ef4087864dce14de387ae8d781d013d56790d" translate="yes" xml:space="preserve">
          <source>For DataFrame, each expanding sum is computed column-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01b228ea2c64bd54f0f73ce17508220bd446e6a" translate="yes" xml:space="preserve">
          <source>For DataFrame, each rolling sum is computed column-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6c1a399560afc76b4e569ced42902abd8b0203" translate="yes" xml:space="preserve">
          <source>For DataFrame, each window sum is computed column-wise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21ec2bb0e16013b4766b86d5046d3b975a1bd8c" translate="yes" xml:space="preserve">
          <source>For DataFrame, if not &lt;code&gt;None&lt;/code&gt;, only use these columns to check for NaNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c075a5df8888360865d89b7245097779c7785e33" translate="yes" xml:space="preserve">
          <source>For DataFrame, it works in the same way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd0020733f34b336c7ad2f0e11739d018224f42" translate="yes" xml:space="preserve">
          <source>For DataFrames that have Series that are missing data (assuming that data is &lt;a href=&quot;https://en.wikipedia.org/wiki/Missing_data#Missing_at_random&quot;&gt;missing at random&lt;/a&gt;) the returned covariance matrix will be an unbiased estimate of the variance and covariance between the member Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a6c0a346380d4a38720bcdb26a1b61bf486fb7" translate="yes" xml:space="preserve">
          <source>For DatetimeArray &lt;code&gt;values&lt;/code&gt; (or a Series or Index boxing one), &lt;code&gt;dtype&lt;/code&gt; and &lt;code&gt;freq&lt;/code&gt; will be extracted from &lt;code&gt;values&lt;/code&gt;, with precedence given to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f61866957f7d7301f34da0c17d93b8e0bc0a0e7" translate="yes" xml:space="preserve">
          <source>For Index, level should be 0, since there are no multiple levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd12ec2ee5dac6dcc0938558080c7de32cf80dfb" translate="yes" xml:space="preserve">
          <source>For MultiIndex, level for which the labels will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eae3fa2918d301dfd457ba8e42908b628e9e5f7" translate="yes" xml:space="preserve">
          <source>For MultiIndex, level from which the labels will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c859c5d65dd092b51a2eee4b3c2651e816ab15f" translate="yes" xml:space="preserve">
          <source>For NumPy compatibility. No additional arguments are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45d187e976f5b24022aff48a05ad2a87a5a95ab" translate="yes" xml:space="preserve">
          <source>For NumPy dtypes, this will be a reference to the actual data stored in this Series or Index (assuming &lt;code&gt;copy=False&lt;/code&gt;). Modifying the result in place will modify the data stored in the Series or Index (not that we recommend doing that).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12625a6c070a7bf7dc66c0e42a1382b32332f97f" translate="yes" xml:space="preserve">
          <source>For PeriodIndex only, see PeriodIndex.asfreq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560a573dd870506bf44d57c7bea8439b53270213" translate="yes" xml:space="preserve">
          <source>For Series and DataFrame, the same type is returned, containing booleans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ece3a2eeff9dc451c862701f6bdfa92323842a" translate="yes" xml:space="preserve">
          <source>For Series input, the output is a scalar indicating whether any element is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34631f63aeff7e4329e87b95098e1c5c60a9a74e" translate="yes" xml:space="preserve">
          <source>For Series, it&amp;rsquo;s name attribute must be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00f5a6c531a40dbd5d2921d98dd3f4c16cd5a12" translate="yes" xml:space="preserve">
          <source>For Series, only rows can be truncated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5551e2e93a683cfa36af817dbfb8da081f29d5c7" translate="yes" xml:space="preserve">
          <source>For Series, returns a Series with boolean values. For DatetimeIndex, returns a boolean array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2b21676ad900d12ec0105fb422473304ed295a" translate="yes" xml:space="preserve">
          <source>For Series, the row labels are prefixed. For DataFrame, the column labels are prefixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9e287cffb3291ab844008474983151ffa9d6c4" translate="yes" xml:space="preserve">
          <source>For Series, the row labels are suffixed. For DataFrame, the column labels are suffixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1d9ec189276d3e67196cf2df839e8b20b194c0" translate="yes" xml:space="preserve">
          <source>For Table formats, append the input data to the existing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d341912d1333fe0ddfead35b57a3b881f5ef665" translate="yes" xml:space="preserve">
          <source>For Windows developers, when using Python 3.5 and later, it is sufficient to install &lt;a href=&quot;https://visualstudio.com/&quot;&gt;Visual Studio 2017&lt;/a&gt; with the &lt;strong&gt;Python development workload&lt;/strong&gt; and the &lt;strong&gt;Python native development tools&lt;/strong&gt; option. Otherwise, the following links may be helpful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90469ed06a05157905ae4315a937a34cb81acd34" translate="yes" xml:space="preserve">
          <source>For a DataFrame a dict can specify that different values should be replaced in different columns. For example, &lt;code&gt;{'a': 1, 'b': 'z'}&lt;/code&gt; looks for the value 1 in column &amp;lsquo;a&amp;rsquo; and the value &amp;lsquo;z&amp;rsquo; in column &amp;lsquo;b&amp;rsquo; and replaces these values with whatever is specified in &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; parameter should not be &lt;code&gt;None&lt;/code&gt; in this case. You can treat this as a special case of passing two lists except that you are specifying the column to search in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5971d67c38f7055e4b38754e2d37c0bdf80184f1" translate="yes" xml:space="preserve">
          <source>For a DataFrame nested dictionaries, e.g., &lt;code&gt;{'a': {'b': np.nan}}&lt;/code&gt;, are read as follows: look in column &amp;lsquo;a&amp;rsquo; for the value &amp;lsquo;b&amp;rsquo; and replace it with NaN. The &lt;code&gt;value&lt;/code&gt; parameter should be &lt;code&gt;None&lt;/code&gt; to use a nested dict in this way. You can nest regular expressions as well. Note that column names (the top-level dictionary keys in a nested dictionary) &lt;strong&gt;cannot&lt;/strong&gt; be regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da53ca74475e4a9020b470b13ae5f78ed4c4cf4f" translate="yes" xml:space="preserve">
          <source>For a DataFrame with MultiIndex, the keyword &lt;code&gt;level&lt;/code&gt; can be used to specify on which level the resampling needs to take place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d2cee46e85411966e39c0cf35bb8c9e7a30b92" translate="yes" xml:space="preserve">
          <source>For a DataFrame, a datetime-like column on which to calculate the rolling window, rather than the DataFrame&amp;rsquo;s index. Provided integer column is ignored and excluded from result since an integer index is not used to calculate the rolling window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789e72a4455aabb90352c01f28608019b93ca564" translate="yes" xml:space="preserve">
          <source>For a DataFrame, column to use instead of index for resampling. Column must be datetime-like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b3af660f1ff68f30d407b4b7cab096b6ec3c95" translate="yes" xml:space="preserve">
          <source>For a DatetimeIndex, string values in &lt;code&gt;values&lt;/code&gt; are converted to Timestamps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4de0881cd69400ed50e4b7d5119d06373a73ed" translate="yes" xml:space="preserve">
          <source>For a MultiIndex, level (name or number) to use for resampling. &lt;code&gt;level&lt;/code&gt; must be datetime-like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ea9f3629cc2bbd62665a7f2bb6bcfc1ae7f358" translate="yes" xml:space="preserve">
          <source>For a MultiIndex, the maximum is determined lexicographically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b362023808b7faf5e55058a842072797e09a0f0" translate="yes" xml:space="preserve">
          <source>For a MultiIndex, the minimum is determined lexicographically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ffca1b2a30c570bc556bfb9c18184ceb152d94" translate="yes" xml:space="preserve">
          <source>For a Series with a MultiIndex, only remove the specified levels from the index. Removes all levels by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e713123fa1502df74995a9180a5a8847d4a6ff81" translate="yes" xml:space="preserve">
          <source>For a Series with a PeriodIndex, the keyword &lt;code&gt;convention&lt;/code&gt; can be used to control whether to use the start or end of &lt;code&gt;rule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d95f3d7f90e52ac53c1428810b948a8db5ccb8b" translate="yes" xml:space="preserve">
          <source>For a mix of numeric and non-numeric types, the output array will have object dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a90ba1096d0852fabe64494dde3b5ad3fccbce" translate="yes" xml:space="preserve">
          <source>For a sequence &lt;code&gt;where&lt;/code&gt;, a Series is returned. The first value is NaN, because the first element of &lt;code&gt;where&lt;/code&gt; is before the first index value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1565d1a0363ce87b3bfe0a8612d64cbe534ad0cc" translate="yes" xml:space="preserve">
          <source>For aggregated output, return object with group labels as the index. Only relevant for DataFrame input. as_index=False is effectively &amp;ldquo;SQL-style&amp;rdquo; grouped output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be6aca2dc976b242c9a0ae7d88b2e70ea41f704" translate="yes" xml:space="preserve">
          <source>For all &lt;code&gt;orient&lt;/code&gt; values except &lt;code&gt;'table'&lt;/code&gt;, default is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71486b234bf1508cdb7b1870e03b25ac7454fab9" translate="yes" xml:space="preserve">
          <source>For all other cases, NumPy&amp;rsquo;s usual inference rules will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9803c06d2763e4a515660003892a64d59d75687d" translate="yes" xml:space="preserve">
          <source>For all other pandas objects, an Index of the appropriate type is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42bb69048a156d3d8fde243ee894a4f13f61637" translate="yes" xml:space="preserve">
          <source>For all remaining dtypes &lt;code&gt;.array&lt;/code&gt; will be a &lt;code&gt;arrays.NumpyExtensionArray&lt;/code&gt; wrapping the actual ndarray stored within. If you absolutely need a NumPy array (possibly with copying / coercing data), then use &lt;a href=&quot;pandas.series.to_numpy#pandas.Series.to_numpy&quot;&gt;&lt;code&gt;Series.to_numpy()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ea39534ac1f06e6a5a4da8436b19165b3cdf45" translate="yes" xml:space="preserve">
          <source>For an ordered or unique index, compute the slice indexer for input labels and step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0316ddeacecfa8d43c002c574469ad7628692a" translate="yes" xml:space="preserve">
          <source>For any 3rd-party extension types, the array type will be an ExtensionArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2da3796382453766522a84a85cb19c666123e8" translate="yes" xml:space="preserve">
          <source>For applying more complex functions on a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce66206c4d93fc802e5a5acc42d57f753764528" translate="yes" xml:space="preserve">
          <source>For arithmetic operations, this implementation will try to reconstruct a new &lt;code&gt;ExtensionArray&lt;/code&gt; with the result of the element-wise operation. Whether or not that succeeds depends on whether the operation returns a result that&amp;rsquo;s valid for the &lt;code&gt;ExtensionArray&lt;/code&gt;. If an &lt;code&gt;ExtensionArray&lt;/code&gt; cannot be reconstructed, an ndarray containing the scalars returned instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48a831a802c0fa43131f28084da63dc537e014a" translate="yes" xml:space="preserve">
          <source>For array-like input, the &lt;code&gt;.dtype&lt;/code&gt; attribute will be extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cc2f1833c58419b5ef08648eaf112ea8c4dc17" translate="yes" xml:space="preserve">
          <source>For axis, the convention is to use something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6740808a23207cdb9b153d35db3bfbad38923e" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, &lt;code&gt;inplace&lt;/code&gt; defaults to &lt;code&gt;True&lt;/code&gt; if not specified. This will change in a future version of pandas - if your code depends on an inplace assignment you should update to explicitly set &lt;code&gt;inplace=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d641e7cc7c11bb62c80879068b370f0f815e2e7f" translate="yes" xml:space="preserve">
          <source>For column(s)-on-columns(s) operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7ac8dd0ba62a33543b8e693127c8e65d8bb70d" translate="yes" xml:space="preserve">
          <source>For columns with spaces in their name, you can use backtick quoting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae4877c2954aa265da0deff1667bbfd19754912" translate="yes" xml:space="preserve">
          <source>For comparison, a full documentation build may take 15 minutes, but a single section may take 15 seconds. Subsequent builds, which only process portions you have changed, will be faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d5198da410c5c9ecfaa69de0bbd6b29efde29a" translate="yes" xml:space="preserve">
          <source>For compatibility with &lt;a href=&quot;pandas.dataframe.to_csv#pandas.DataFrame.to_csv&quot;&gt;&lt;code&gt;to_csv()&lt;/code&gt;&lt;/a&gt;, to_excel serializes lists and dicts to strings before writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ce00c30a542899b20549373acda54c03ba40ea" translate="yes" xml:space="preserve">
          <source>For compatibility with &lt;code&gt;numpy.take()&lt;/code&gt;. Has no effect on the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892f3307167bf604ac2b5846510ad71c09ca1a90" translate="yes" xml:space="preserve">
          <source>For compatibility with &lt;code&gt;to_csv()&lt;/code&gt;, to_excel serializes lists and dicts to strings before writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c77fe1409d6ced69fda3a755edf5035461c118d" translate="yes" xml:space="preserve">
          <source>For compatibility with CSV writers, ExcelWriter serializes lists and dicts to strings before writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421d19eba00bb25c4d4a87440dccf2018ca1e028" translate="yes" xml:space="preserve">
          <source>For compatibility with DataFrame.idxmax. Redundant for application on Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a82d9cc16bb369d7fbfc0b3e272962659859f5e" translate="yes" xml:space="preserve">
          <source>For compatibility with DataFrame.idxmin. Redundant for application on Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682e58232ae1e457b9e2a1160071d2cc9dae7e41" translate="yes" xml:space="preserve">
          <source>For compatibility with NumPy. Only 0 or None are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd040ea8536374d7db78bffe2fa7be28b925b715" translate="yes" xml:space="preserve">
          <source>For compatibility with other expanding methods. Has no effect on the computed median.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d526a6a537750ab15674ab070a52b26e13fe948" translate="yes" xml:space="preserve">
          <source>For compatibility with other expanding methods. Has no effect on the computed value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cf001ef6e381fc194a00eece8a3d83bd70384b" translate="yes" xml:space="preserve">
          <source>For compatibility with other expanding methods. Has no effect on the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270f4f8a2d0ddf58665aae97b508e7592b296570" translate="yes" xml:space="preserve">
          <source>For compatibility with other rolling methods. Has no effect on the computed median.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d48069a518f252645211551d5b782a4d3ae50bd" translate="yes" xml:space="preserve">
          <source>For compatibility with other rolling methods. Has no effect on the computed value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92fa9e8d7cc3b93a3c1a5a58e5c858192ccca880" translate="yes" xml:space="preserve">
          <source>For compatibility with other rolling methods. Has no effect on the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad87d7a33557969da44eab7eea542616525c83ca" translate="yes" xml:space="preserve">
          <source>For compatibility with other string methods. Not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417878975f2d756def24125d3c196726898b78a2" translate="yes" xml:space="preserve">
          <source>For compatibility with other window methods. Has no effect on the computed value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa6b928c51d22e554165d982b411595147cd7b1" translate="yes" xml:space="preserve">
          <source>For compatibility. Has no effect on the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2110c380ed7d3738432180be67c9c94da571483f" translate="yes" xml:space="preserve">
          <source>For complex types, define the subtypes. For &lt;code&gt;dict&lt;/code&gt; and &lt;code&gt;tuple&lt;/code&gt;, as more than one type is present, we use the brackets to help read the type (curly brackets for &lt;code&gt;dict&lt;/code&gt; and normal brackets for &lt;code&gt;tuple&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa1d48873e9f269ce084ff5f17780a27f97b08c" translate="yes" xml:space="preserve">
          <source>For consistency with pandas methods, you should raise an &lt;code&gt;AttributeError&lt;/code&gt; if the data passed to your accessor has an incorrect dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e478e047f30809e5637c5cd5a7d528652f15839b" translate="yes" xml:space="preserve">
          <source>For convenience, we provide the &lt;code&gt;Styler.from_custom_template&lt;/code&gt; method that does the same as the custom subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530ca33a011c894a0aad35a33c68166224cba548" translate="yes" xml:space="preserve">
          <source>For data grouped with &lt;code&gt;by&lt;/code&gt;, return a Series of the above or a numpy array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712adfd871e02781142dacd9c5bf9f30bfb7ab0f" translate="yes" xml:space="preserve">
          <source>For datetimes, &lt;code&gt;NaT&lt;/code&gt; (Not a Time) is considered as an NA value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d718e4f35381c99658c499ed426b9114cf87bab" translate="yes" xml:space="preserve">
          <source>For dict-like &lt;code&gt;new_categories&lt;/code&gt;, extra keys are ignored and categories not in the dictionary are passed through</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e896148fb1025cfcb3bd14a920fb320137f8a96" translate="yes" xml:space="preserve">
          <source>For each column/row the number of non-NA/null entries. If &lt;code&gt;level&lt;/code&gt; is specified returns a &lt;code&gt;DataFrame&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3b6a87dfe0995e3d922eddc4fa9a03403c193e" translate="yes" xml:space="preserve">
          <source>For each row in the left DataFrame:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8f7af9b2a4abfa72e760e544079f542f23d1d2" translate="yes" xml:space="preserve">
          <source>For each string in the Series, extract groups from all matches of regular expression and return a DataFrame with one row for each match and one column for each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8013b5a5cfc1ecec1d78fd3896b2b663275d0b" translate="yes" xml:space="preserve">
          <source>For each subject string in the Series, extract groups from all matches of regular expression pat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1438dd50f0f247483fe45f89b371bb933d5d9a" translate="yes" xml:space="preserve">
          <source>For each subject string in the Series, extract groups from all matches of regular expression pat. When each subject string in the Series has exactly one match, extractall(pat).xs(0, level=&amp;rsquo;match&amp;rsquo;) is the same as extract(pat).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf885ae2709de792f6cfe528fc9715e262e95052" translate="yes" xml:space="preserve">
          <source>For each subject string in the Series, extract groups from the first match of regular expression &lt;code&gt;pat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b263c3151928f3ce7454cfc3f55c4fb3140e1b7" translate="yes" xml:space="preserve">
          <source>For ease of implementation and consistency with operations between pandas and NumPy ndarrays, we recommend &lt;em&gt;not&lt;/em&gt; handling Series and Indexes in your binary ops. Instead, you should detect these cases and return &lt;code&gt;NotImplemented&lt;/code&gt;. When pandas encounters an operation like &lt;code&gt;op(Series, ExtensionArray)&lt;/code&gt;, pandas will</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b428761c16dd513688f80f7e2d35def7bd81810" translate="yes" xml:space="preserve">
          <source>For element-wise operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efa8ddf7a616d448dd8c77c680a4296fa2076d4" translate="yes" xml:space="preserve">
          <source>For elementwise operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c305823aeeca0be506f34cc3e70904d41c758f" translate="yes" xml:space="preserve">
          <source>For example, (3, 5) will display the subplots using 3 columns and 5 rows, starting from the top-left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c115a20f4c461197761f6446cee18ae7403dd35a" translate="yes" xml:space="preserve">
          <source>For example, a bar plot can be created the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc0883976afb6fd2e8d1608bbacecae53f40d32" translate="yes" xml:space="preserve">
          <source>For example, if one of your columns is called &lt;code&gt;a a&lt;/code&gt; and you want to sum it with &lt;code&gt;b&lt;/code&gt;, your query should be &lt;code&gt;`a a` + b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b1413b8890ab066d563b1385f683dd21254b13" translate="yes" xml:space="preserve">
          <source>For example, lists are considered iterators but not strings or datetime objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464d922a7e68fc268ab6bbb6390b2b16e301b70a" translate="yes" xml:space="preserve">
          <source>For example, pandas supports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6a6c303a99087c83038e8fde36d84f175775ba" translate="yes" xml:space="preserve">
          <source>For example, the memory usage of the &lt;code&gt;DataFrame&lt;/code&gt; below is shown when calling &lt;a href=&quot;../reference/api/pandas.dataframe.info#pandas.DataFrame.info&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb80fbe94eaef5ddb083f1c3b19d25468c88f28" translate="yes" xml:space="preserve">
          <source>For example, to back-propagate the last valid value to fill the &lt;code&gt;NaN&lt;/code&gt; values, pass &lt;code&gt;bfill&lt;/code&gt; as an argument to the &lt;code&gt;method&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9030653cea0c8e5d577e02dac683c6b975cca384" translate="yes" xml:space="preserve">
          <source>For example, with a single value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80548da1794b78acac386b479af60bc8d680d48" translate="yes" xml:space="preserve">
          <source>For example, with tabular data (DataFrame) it is more semantically helpful to think of the &lt;strong&gt;index&lt;/strong&gt; (the rows) and the &lt;strong&gt;columns&lt;/strong&gt; rather than axis 0 and axis 1. Iterating through the columns of the DataFrame thus results in more readable code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b2e9351ebfbbc5dedad682a1223e44fcc8a705" translate="yes" xml:space="preserve">
          <source>For examples that use the &lt;code&gt;StringIO&lt;/code&gt; class, make sure you import it according to your Python version, i.e. &lt;code&gt;from StringIO import StringIO&lt;/code&gt; for Python 2 and &lt;code&gt;from io import StringIO&lt;/code&gt; for Python 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3aa86a7b39570367d49900d470e7176b05cd6d" translate="yes" xml:space="preserve">
          <source>For extension dtypes with arguments the following may be an adequate implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c684be8400a56e476dac6a264012c6b6dd3de56" translate="yes" xml:space="preserve">
          <source>For extension types, &lt;code&gt;to_numpy()&lt;/code&gt;&lt;em&gt;may&lt;/em&gt; require copying data and coercing the result to a NumPy type (possibly object), which may be expensive. When you need a no-copy reference to the underlying data, &lt;a href=&quot;pandas.series.array#pandas.Series.array&quot;&gt;&lt;code&gt;Series.array&lt;/code&gt;&lt;/a&gt; should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b1f4bf9be095aecf99c6cb089e00e05b6c05b6" translate="yes" xml:space="preserve">
          <source>For extension types, like Categorical, the actual ExtensionArray is returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae567579428a20098b6a5f9391d3703064bf4b8" translate="yes" xml:space="preserve">
          <source>For finer-tuned control, see hierarchical indexing documentation along with the related stack/unstack methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b49eeebdd1bc77e11a74ab6654b10dab27ab314" translate="yes" xml:space="preserve">
          <source>For float arg, precision rounding might happen. To prevent unexpected behavior use a fixed-width exact type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2425d9f00218ce8436b5df2b98dc0bfa0e2d7bcb" translate="yes" xml:space="preserve">
          <source>For frequencies that evenly subdivide 1 day, the &amp;ldquo;origin&amp;rdquo; of the aggregated intervals. For example, for &amp;lsquo;5min&amp;rsquo; frequency, base could range from 0 through 4. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
