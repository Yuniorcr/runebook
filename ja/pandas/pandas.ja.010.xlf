<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="ansible">
    <body>
      <group id="ansible">
        <trans-unit id="98fe742fb66aea5de70163f44f393fccea11f79e" translate="yes" xml:space="preserve">
          <source>On Windows the command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2d755f740467446e18fea7bce070ad69c508d8" translate="yes" xml:space="preserve">
          <source>On Windows, one can type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d4aa6ceb7f30d9c8655cb50da3a89392c7241d" translate="yes" xml:space="preserve">
          <source>On a DataFrame, we obtain a GroupBy object by calling &lt;a href=&quot;../reference/api/pandas.dataframe.groupby#pandas.DataFrame.groupby&quot;&gt;&lt;code&gt;groupby()&lt;/code&gt;&lt;/a&gt;. We could naturally group by either the &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; columns, or both:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef401eb345626e5969a0a31a6e20d33ca5551b43" translate="yes" xml:space="preserve">
          <source>On the other hand this methods does not do checks (e.g., whether the old categories are included in the new categories on a reorder), which can result in surprising changes, for example when using special string dtypes on python3, which does not considers a S1 string equal to a single char python string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1176627f2115fb662524cb365077d3799c3c5e5c" translate="yes" xml:space="preserve">
          <source>On the other hand, the search for the pattern &amp;lsquo;MONKEY&amp;rsquo; doesn&amp;rsquo;t return any match:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926d6ca0ee3eea712966fd5f5024b693f51978e7" translate="yes" xml:space="preserve">
          <source>Once a workbook has been saved it is not possible write further data without rewriting the whole workbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b092c24afbb46c78a27307743fdf16cb708125d" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve made changes, you can see them by typing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2919e77aa285fd4ee98e8fb8fa419edd745b05" translate="yes" xml:space="preserve">
          <source>Once your feature branch is accepted into upstream, you&amp;rsquo;ll probably want to get rid of the branch. First, merge upstream master into your branch so git knows it is safe to delete your branch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6e537e72d6d8235abdb78ad23a4a5ca203294e" translate="yes" xml:space="preserve">
          <source>One blank line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee94b1a2f618ae1d899f80ff1250456d7d353c80" translate="yes" xml:space="preserve">
          <source>One can implement methods to handle array reductions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1412467f8f326274ae3c933b80a037ad49e82af8" translate="yes" xml:space="preserve">
          <source>One can implement methods to handle parsing from strings that will be used in methods such as &lt;code&gt;pandas.io.parsers.read_csv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce560844012a73ebdb16b27d65097eac1f763cee" translate="yes" xml:space="preserve">
          <source>One of pandas date offset strings or corresponding objects. The string &amp;lsquo;infer&amp;rsquo; can be passed in order to set the frequency of the index as the inferred frequency upon creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96736cc5d7755c3cec18961364cad3bb9832b29" translate="yes" xml:space="preserve">
          <source>One of pandas period strings or corresponding objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2790c51f6f59e2ad01fdd863ee3ad6d97df8b8a" translate="yes" xml:space="preserve">
          <source>One of pandas&amp;rsquo; &lt;a href=&quot;../../user_guide/timeseries#timeseries-offset-aliases&quot;&gt;offset strings&lt;/a&gt; or an Offset object. Will be inferred by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f98e6339d2121e068349b03ab0eb23954731e77" translate="yes" xml:space="preserve">
          <source>One of the following combinations of libraries is needed to use the top-level &lt;a href=&quot;reference/api/pandas.read_html#pandas.read_html&quot;&gt;&lt;code&gt;read_html()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a2cd379ce6d91ffb5651e916bc0ae2341de708" translate="yes" xml:space="preserve">
          <source>One particularly important item is the &lt;code&gt;type&lt;/code&gt; property. This should be the class that is the scalar type for your data. For example, if you were writing an extension array for IP Address data, this might be &lt;code&gt;ipaddress.IPv4Address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a06167fc7a1f3a93aa1679a60395136be8be7f" translate="yes" xml:space="preserve">
          <source>One way to solve this issue is using the &lt;code&gt;dtype&lt;/code&gt; parameter in the &lt;code&gt;read_csv&lt;/code&gt; and &lt;code&gt;read_table&lt;/code&gt; functions to explicit the conversion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33be4376765d4e1e9b2c284a6e31f32b5b3b941" translate="yes" xml:space="preserve">
          <source>One-character string used to escape other characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6565a3aba1966f1b7176e2b9a6ba933d9af427" translate="yes" xml:space="preserve">
          <source>One-dimensional array with axis labels (including time series).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e708ebdcdacc8eb0e58cb7eb5f6ecd775ad77f" translate="yes" xml:space="preserve">
          <source>One-dimensional ndarray with axis labels (including time series).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e23001a78314df5fe54995454020003b7a41fd" translate="yes" xml:space="preserve">
          <source>Only &lt;a href=&quot;http://lxml.de&quot;&gt;lxml&lt;/a&gt;, although see &lt;a href=&quot;user_guide/io#io-html-gotchas&quot;&gt;HTML Table Parsing&lt;/a&gt; for reasons as to why you should probably &lt;strong&gt;not&lt;/strong&gt; take this approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43abdba9cb4fe8840bfc3a9e08934d5b0c76eee5" translate="yes" xml:space="preserve">
          <source>Only CSS2 named colors and hex colors of the form &lt;code&gt;#rgb&lt;/code&gt; or &lt;code&gt;#rrggbb&lt;/code&gt; are currently supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfe26c01292d2ba152dd1c974ace2fff8bbb714" translate="yes" xml:space="preserve">
          <source>Only consider certain columns for identifying duplicates, by default use all of the columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82abbda2b0caa62672413bffa0926f0db4240dc4" translate="yes" xml:space="preserve">
          <source>Only exact matches will be returned if an interval is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b342138e331a31640329d257c914214e40c86f" translate="yes" xml:space="preserve">
          <source>Only label-based slicing is supported right now, not positional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ceaeddda8ad9cb425754244ab97ad133c1adcd" translate="yes" xml:space="preserve">
          <source>Only left join is implemented, keeping the index and columns of the original object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d90a88c095ace4e13136d0aab1c2c481b4063e" translate="yes" xml:space="preserve">
          <source>Only perform aggregating type operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908382949f39ae9b5c61acce96dfc6b0982d285c" translate="yes" xml:space="preserve">
          <source>Only perform transforming type operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea6a82e7e8c64fc3727ce1838eba1c840cf1325" translate="yes" xml:space="preserve">
          <source>Only relevant for DatetimeIndex:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d9f175f1ac51493d27c7b468cd3dff2ce9fd81" translate="yes" xml:space="preserve">
          <source>Only relevant for aggregation functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7532f861e99304df16ff2e9506d3bad3d5ca8da5" translate="yes" xml:space="preserve">
          <source>Only remove the given levels from the index. Removes all levels by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f19ae4561bc2fe901fa67e3a38f33f4e3d3e68e" translate="yes" xml:space="preserve">
          <source>Only replace the first NaN element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3945c4af4cf17de2e4119b2f09d2d75375d23df" translate="yes" xml:space="preserve">
          <source>Only return values from specified level (for MultiIndex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf6e74585222144163bce537388af40faf14787" translate="yes" xml:space="preserve">
          <source>Only the values in the DataFrame will be returned, the axes labels will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d258729891758b3157248c12a41cbdbfd0081085" translate="yes" xml:space="preserve">
          <source>Only use this if you know what you&amp;rsquo;re doing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab15d4197c31fb4eaa8133ee2f96a51117bdc9b" translate="yes" xml:space="preserve">
          <source>Only when &lt;code&gt;freq&lt;/code&gt; parameter is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903494baaf3ebf65023c1879e6692f82a0c02b55" translate="yes" xml:space="preserve">
          <source>Open the following file in a web browser to see the full documentation you just built:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f22694dfdf2abf399763869e276fe41bdc4165" translate="yes" xml:space="preserve">
          <source>Open, high, low and close values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d619e70e9995bf1ddeed78ca004730bfbe293ae" translate="yes" xml:space="preserve">
          <source>OpenDocument</source>
          <target state="translated">OpenDocument</target>
        </trans-unit>
        <trans-unit id="9e127b70b98d9975b7501d40da6b1b606d6eea0c" translate="yes" xml:space="preserve">
          <source>OpenDocument Spreadsheets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f090fa08be859dd33e1362d973619158cc22e8f2" translate="yes" xml:space="preserve">
          <source>OpenSuse</source>
          <target state="translated">OpenSuse</target>
        </trans-unit>
        <trans-unit id="fb339fcf4b04d682a12285a97fd5e9f6125e60a3" translate="yes" xml:space="preserve">
          <source>OpenSuse Repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf74d16ae7442f79e1c11a2f07f1fa3b00083cb" translate="yes" xml:space="preserve">
          <source>Operates on columns only, not specific rows or elements. This allows &lt;code&gt;eval&lt;/code&gt; to run arbitrary code, which can make you vulnerable to code injection if you pass user input to this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fdaa6b2a846c8fcf18d414bf8c61db610eda6a" translate="yes" xml:space="preserve">
          <source>Operations</source>
          <target state="translated">Operations</target>
        </trans-unit>
        <trans-unit id="d5c567e34ace120c0ada2aad92a044053689e80d" translate="yes" xml:space="preserve">
          <source>Operations between Series (+, -, /, &lt;em&gt;, *&lt;/em&gt;) align values based on their associated index values&amp;ndash; they need not be the same length. The result index will be the sorted union of the two indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b1b846db03b6eb7c42c077a382331d369073ef" translate="yes" xml:space="preserve">
          <source>Operations involving an integer array will behave similar to NumPy arrays. Missing values will be propagated, and and the data will be coerced to another dtype if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226b1226ba2f20efaf0a8c2a9fab2b35c85e9480" translate="yes" xml:space="preserve">
          <source>Operations on columns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24ffa106cbe82cf740b2a99175c6d29c0b1bd4c" translate="yes" xml:space="preserve">
          <source>Operations such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f4f95c689de6d91f3c12eb4d3500a58fe7f1f2" translate="yes" xml:space="preserve">
          <source>Opposite of reset_index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4351caed5925097669b7f412b125a9ccce1261" translate="yes" xml:space="preserve">
          <source>Opposite of set_index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291e8239607d390177be75d23335748ac1284c9e" translate="yes" xml:space="preserve">
          <source>OptionError if no such option exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a48f56228bdda75d2586d40fbe16a4b82b6019" translate="yes" xml:space="preserve">
          <source>Optional array of integer indices that sort &lt;code&gt;self&lt;/code&gt; into ascending order. They are typically the result of &lt;code&gt;np.argsort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd32917dfd5f66fb159ebdd50889a1b4bed7749" translate="yes" xml:space="preserve">
          <source>Optional array of integer indices that sort array a into ascending order. They are typically the result of argsort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b8cb7515c92f06e314e212a9921850500bd6ac" translate="yes" xml:space="preserve">
          <source>Optional datetime-like data to construct index with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7346e4d45825ec177eaaa77f3cf50927846f5271" translate="yes" xml:space="preserve">
          <source>Optional dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764729bd5e94658d1dc934c2915d8f23647ead43" translate="yes" xml:space="preserve">
          <source>Optional dependencies (e.g. matplotlib) should be imported with the private helper &lt;code&gt;pandas.compat._optional.import_optional_dependency&lt;/code&gt;. This ensures a consistent error message when the dependency is not met.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7564296f4bd27745109c26cea4352cd6467ee36e" translate="yes" xml:space="preserve">
          <source>Optional dependencies for parsing HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2b9983a8ec095b0c3286b9cf340f203ea20b0f" translate="yes" xml:space="preserve">
          <source>Optional groups that do not match are NaN in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3723f4d89616e3e58f11469f279a79d12b12d8a3" translate="yes" xml:space="preserve">
          <source>Optional keyword arguments can be passed to &lt;code&gt;TextFileReader&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84ef5ba0310e69859e4c393630648354d307490" translate="yes" xml:space="preserve">
          <source>Optional period-like data to construct index with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306df250f24c96e0a4f322279db4e2da97feaac5" translate="yes" xml:space="preserve">
          <source>Optional positional and keyword arguments to pass to &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d150b48b3e3432e670c6e33b202abfd4baaf34ce" translate="yes" xml:space="preserve">
          <source>Optional timedelta-like data to construct index with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf3d772c80109c205b7a375828f63018853849e" translate="yes" xml:space="preserve">
          <source>Optional, only accepts keyword argument &amp;lsquo;mutated&amp;rsquo; and is passed to groupby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1799c15cd2083974a44df67b7fea081153f307" translate="yes" xml:space="preserve">
          <source>Optionally match on equivalent keys with &amp;lsquo;by&amp;rsquo; before searching with &amp;lsquo;on&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd47aa175f1d1c974ca9b8675b5401669262d358" translate="yes" xml:space="preserve">
          <source>Optionally one can override construct_array_type for construction with the name of this dtype via the Registry. See &lt;code&gt;extensions.register_extension_dtype()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c96486e1d9d0bbec31d39930822bd6948eaf77" translate="yes" xml:space="preserve">
          <source>Optionally provide filling method to pad/backfill missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea3710450e0a726cd1b45108ff0ae769db85817" translate="yes" xml:space="preserve">
          <source>Optionally, a commit message body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d685997c7c80e1fa4b9f8fa12dd66a54a23cef0d" translate="yes" xml:space="preserve">
          <source>Optionally, you may wish to setup &lt;a href=&quot;https://pre-commit.com/&quot;&gt;pre-commit hooks&lt;/a&gt; to automatically run &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;flake8&lt;/code&gt; when you make a git commit. This can be done by installing &lt;code&gt;pre-commit&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99ba0a2d13f5f9a662e3841fa9a534780e19884" translate="yes" xml:space="preserve">
          <source>Options and settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4c459998d8b024fedf5b3d186b667cc8db9e4a" translate="yes" xml:space="preserve">
          <source>Options for specifying how the values should be formatted. These options include the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393072702b5ca450f3fdd659905b5377e3255837" translate="yes" xml:space="preserve">
          <source>Options have a full &amp;ldquo;dotted-style&amp;rdquo;, case-insensitive name (e.g. &lt;code&gt;display.max_rows&lt;/code&gt;). You can get/set options directly as attributes of the top-level &lt;code&gt;options&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0631f95f6b124dcb97dc6ad17b08b6d7db5e4d" translate="yes" xml:space="preserve">
          <source>Options to be passed to axvline method for vertical lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56f6eb0ef8c7428a1fbef0869f4156f2d0eb640" translate="yes" xml:space="preserve">
          <source>Options to pass to matplotlib plotting method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd388f5aecbc508b2f96d38e921085ba8f8bf85" translate="yes" xml:space="preserve">
          <source>Options to pass to matplotlib plotting method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd372694ec9668cd7936d072ae670051d0dcd3a" translate="yes" xml:space="preserve">
          <source>Options to pass to matplotlib scatter plotting method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baaa3f4d00f2bfd5d0c51a8a650c741f77c1ac98" translate="yes" xml:space="preserve">
          <source>Or &lt;code&gt;axis=None&lt;/code&gt; for whether every value is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfee1a635e86aa5c8a822c18d07cb8d42a8c9b5" translate="yes" xml:space="preserve">
          <source>Or &lt;code&gt;dtype='datetime64[ns]'&lt;/code&gt; to return an ndarray of native datetime64 values. The values are converted to UTC and the timezone info is dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330daaa8938a1739e95e06ec62586b981f3ed8cf" translate="yes" xml:space="preserve">
          <source>Or an index with tuples with &lt;code&gt;expand=False&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365bab92544cb8422c4d0818d660af3da2e3e3fd" translate="yes" xml:space="preserve">
          <source>Or pass in a callable (or dictionary of callables) for more flexible handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eef4bbda0126da1e68a141720b8b7d9402e3f30" translate="yes" xml:space="preserve">
          <source>Or specify the actual dtype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec44fb2a88e7af43bf4221909a39249b523cad6" translate="yes" xml:space="preserve">
          <source>Or the NumPy dtype can be specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af970303b26b64460172080a9b4226cc98b0e55" translate="yes" xml:space="preserve">
          <source>Or the string alias &lt;code&gt;&quot;Int64&quot;&lt;/code&gt; (note the capital &lt;code&gt;&quot;I&quot;&lt;/code&gt;, to differentiate from NumPy&amp;rsquo;s &lt;code&gt;'int64'&lt;/code&gt; dtype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672b13b667920d8acedcab3d179a5c938088e82d" translate="yes" xml:space="preserve">
          <source>Or the values may be localized to UTC and the tzinfo discared with &lt;code&gt;dtype='datetime64[ns]'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2d0b4ca0f610b3d5e8bb7ba1ee5e1b41fa5127" translate="yes" xml:space="preserve">
          <source>Or through a &lt;code&gt;set_precision&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234b184e557175d1e463fea9a6f643fe16786bc2" translate="yes" xml:space="preserve">
          <source>Or to an array of values. By default, &lt;code&gt;threshold&lt;/code&gt; should be the same shape as the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540833a655c15c802c4e86b4b409e35b85d282a9" translate="yes" xml:space="preserve">
          <source>Or use pandas where after you&amp;rsquo;ve set up a mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024ad857bf6f996c14f5481401c21910eb60749e" translate="yes" xml:space="preserve">
          <source>Or use the dedicated constructor for the array you&amp;rsquo;re expecting, and wrap that in a PandasArray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1127e9dd8f4eecbcacad03dc04cd3d2e6a1eb6" translate="yes" xml:space="preserve">
          <source>Or we can use &amp;ldquo;axis-style&amp;rdquo; keyword arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591fc62c8a1c33e60cf40018321515ef96d69ebd" translate="yes" xml:space="preserve">
          <source>Or with one of the following constructs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746928c8484a53a0097400d0269a7e565cb9ef88" translate="yes" xml:space="preserve">
          <source>Order result DataFrame lexicographically by the join key. If False, the order of the join key depends on the join type (how keyword).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81042b9192f7e2ebb2dba7d89619d3dcfc694add" translate="yes" xml:space="preserve">
          <source>Ordered &lt;code&gt;CategoricalIndex&lt;/code&gt; can have a min and max value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a085e358fcd784faf32b29f5dd3f77e9abe89c1" translate="yes" xml:space="preserve">
          <source>Ordered &lt;code&gt;Categoricals&lt;/code&gt; can be sorted according to the custom order of the categories and can have a min and max value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abbd6c50551e28376de8273fbd8134130a5394d" translate="yes" xml:space="preserve">
          <source>Ordered Categorical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b176fc70ec0dea29d95ef84d346c4af6ed9680e" translate="yes" xml:space="preserve">
          <source>Ordered and unordered (not necessarily fixed-frequency) time series data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd476c02879db489a92a3258858e9a7faff176d" translate="yes" xml:space="preserve">
          <source>Ordered categoricals with different categories or orderings can be combined by using the &lt;code&gt;ignore_ordered=True&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db073fd9965f5c70f6bd10159a6cb481344a4122" translate="yes" xml:space="preserve">
          <source>Ordered list of field names, or None if there are no fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53340417755fd9957819a78de661350ad16cd1b3" translate="yes" xml:space="preserve">
          <source>Original data with values trimmed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d1ad4dcf6e5a083ee7d2a87aae1f6dccc07ae7" translate="yes" xml:space="preserve">
          <source>Other Considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb6f2fb01dfa81e12bc1e11f0e7b676e54669fd" translate="yes" xml:space="preserve">
          <source>Other Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906d661267e56b356d55939006691a1f8a082c00" translate="yes" xml:space="preserve">
          <source>Other Python objects: &lt;code&gt;'object'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ea52f1a7ae74f014909d25b0bddf410e9fbbb3" translate="yes" xml:space="preserve">
          <source>Other considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f91ae576c16a18b4c1ea0a1820fe3453ca607f2" translate="yes" xml:space="preserve">
          <source>Other file formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dad31e0e47a9d52bdd506c2ede7b0707baa51f9" translate="yes" xml:space="preserve">
          <source>Other plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4815bb0bd4c5d090f882109dfe729dc7c7ed7296" translate="yes" xml:space="preserve">
          <source>Other useful features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc3506fbe83ef55a42cc0213d534a34c1ec9ba8" translate="yes" xml:space="preserve">
          <source>Otherwise the Series will have an datetime64[ns, tz] dtype; the tz will be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02912f7c469cbe440b2b230c2da31763c609353" translate="yes" xml:space="preserve">
          <source>Otherwise, pandas will attempt to infer the &lt;code&gt;dtype&lt;/code&gt; from the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8847586bb031beac6ab5888ab1ebc440b186b1ee" translate="yes" xml:space="preserve">
          <source>Otherwise, you need to do it manually:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f91a8301ad5dd3c0d0e40f4ee62b245ae02f8b" translate="yes" xml:space="preserve">
          <source>Our API documentation in &lt;code&gt;doc/source/api.rst&lt;/code&gt; houses the auto-generated documentation from the docstrings. For classes, there are a few subtleties around controlling which methods and attributes have pages auto-generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682dc40b9f87612396c2e76fe44330cdf2185b76" translate="yes" xml:space="preserve">
          <source>Our custom template accepts a &lt;code&gt;table_title&lt;/code&gt; keyword. We can provide the value in the &lt;code&gt;.render&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50dc8f06fee4b7330786eae0bf37035ae5cf739" translate="yes" xml:space="preserve">
          <source>Our files will often contain a module-level &lt;code&gt;_shared_doc_kwargs&lt;/code&gt; with some common substitution values (things like &lt;code&gt;klass&lt;/code&gt;, &lt;code&gt;axes&lt;/code&gt;, etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e492f2c95a33a388bb2e415b4bc0c7b2957b2c" translate="yes" xml:space="preserve">
          <source>Out of bounds values will be NA in the resulting Categorical object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efe8523605209fda54dcbc1beedcd38b946b891" translate="yes" xml:space="preserve">
          <source>Out of these, the split step is the most straightforward. In fact, in many situations we may wish to split the data set into groups and do something with those groups. In the apply step, we might wish to do one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5a46e73aabceabcb2ff46ea67f3be0ef229c56" translate="yes" xml:space="preserve">
          <source>Out-of-core</source>
          <target state="translated">Out-of-core</target>
        </trans-unit>
        <trans-unit id="87a91b68ad75e0ff234ef1c350e5f0edaaec7556" translate="yes" xml:space="preserve">
          <source>Output type returned if parsing succeeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b26cb48d54b12e663c7a0dd463f9408ec2bf6eb" translate="yes" xml:space="preserve">
          <source>Override constructor properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a805d651808fdd014040275d51056993add982" translate="yes" xml:space="preserve">
          <source>Override constructor properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ea5601dc16afd2b7e4bf7f9f84f54e651893ae" translate="yes" xml:space="preserve">
          <source>Override ndarray.argsort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1c2f83f0493738a86c553d76fd91a3410cd409" translate="yes" xml:space="preserve">
          <source>Override ndarray.argsort. Argsorts the value, omitting NA/null values, and places the result in the same locations as the non-NA values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="37f0cebf5c5d2550db431d67aac63ebe4b557132" translate="yes" xml:space="preserve">
          <source>Overwrite the table with just &lt;code&gt;df1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afefe3fd6123b1b800495ed2ccd5b2450ea153df" translate="yes" xml:space="preserve">
          <source>PCHIP 1-d monotonic cubic interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e69faefcbcaa12ffbc1d58b72bc79aca819f84" translate="yes" xml:space="preserve">
          <source>PERF: Performance improvement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7431e3df243c5be33cffa0b28ca2a76b93f0538c" translate="yes" xml:space="preserve">
          <source>Package</source>
          <target state="translated">Package</target>
        </trans-unit>
        <trans-unit id="2d20eeb6c18c0976f88e054095263282c77764f7" translate="yes" xml:space="preserve">
          <source>Package overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1991b3f2acf1ce54b3bf0e12ea5e27453cfb7b3c" translate="yes" xml:space="preserve">
          <source>Pad strings in the Series/Index by prepending &amp;lsquo;0&amp;rsquo; character. Equivalent to &lt;code&gt;Series.str.pad(side='left', fillchar='0')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea3b187d4a6d8976189a7f5be22652aeb6a799f0" translate="yes" xml:space="preserve">
          <source>Pad strings in the Series/Index by prepending &amp;lsquo;0&amp;rsquo; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5943ecea801012c3d70542531aa0524b124258" translate="yes" xml:space="preserve">
          <source>Pad strings in the Series/Index up to width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b91c77531eb0630e8a852bdec87e022d650604" translate="yes" xml:space="preserve">
          <source>Pairwise correlations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a759ec8891b1d6e9fc1fa3a392ebaade59759ec" translate="yes" xml:space="preserve">
          <source>Pandas (pd) and Numpy (np) are the only two abbreviated imported modules. The rest are kept explicitly imported for newer users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67554d267b845cdba3187fb29b6cee4779df6667" translate="yes" xml:space="preserve">
          <source>Pandas Data Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3bb786600cd0ade9e6be2d6716650b16ddad64" translate="yes" xml:space="preserve">
          <source>Pandas DataFrames Tutorial, by Karlijn Willems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec91ff235d71e10c150d03de5b9b16a564b4244" translate="yes" xml:space="preserve">
          <source>Pandas DataFrames implement &lt;code&gt;_repr_html_``and ``_repr_latex&lt;/code&gt; methods which are utilized by Jupyter Notebook for displaying (abbreviated) HTML or LaTeX tables. LaTeX output is properly escaped. (Note: HTML tables may or may not be compatible with non-HTML Jupyter output formats.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7aaa6cbe34abc514d35cd1a91f19127435050d8" translate="yes" xml:space="preserve">
          <source>Pandas ExtensionArray for storing Period data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff28d8c9ac3bc7ba00a2fded0359c25500461e7" translate="yes" xml:space="preserve">
          <source>Pandas ExtensionArray for timedelta data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06fcb9ec29bae9c69d1dd14d03773e102c9f21a" translate="yes" xml:space="preserve">
          <source>Pandas ExtensionArray for tz-naive or tz-aware datetime data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ffc1a51571a3c34da773607940b9487ca9ae42" translate="yes" xml:space="preserve">
          <source>Pandas Series from where to get the samplings for the bootstrapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1117859e4b75458d751c0dc54f9be93242c65916" translate="yes" xml:space="preserve">
          <source>Pandas and Python: Top 10, by Manish Amde</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e567539af86a1e0ba2f0868a80713c6515b48ab" translate="yes" xml:space="preserve">
          <source>Pandas and third-party libraries can extend NumPy&amp;rsquo;s type system (see &lt;a href=&quot;../development/extending#extending-extension-types&quot;&gt;Extension types&lt;/a&gt;). The top-level &lt;a href=&quot;api/pandas.array#pandas.array&quot;&gt;&lt;code&gt;array()&lt;/code&gt;&lt;/a&gt; method can be used to create a new array, which may be stored in a &lt;a href=&quot;api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api/pandas.index#pandas.Index&quot;&gt;&lt;code&gt;Index&lt;/code&gt;&lt;/a&gt;, or as a column in a &lt;a href=&quot;api/pandas.dataframe#pandas.DataFrame&quot;&gt;&lt;code&gt;DataFrame&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027412c0d3010ce57905ba1f975de95237eb5a29" translate="yes" xml:space="preserve">
          <source>Pandas array for interval data that are closed on the same side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b8204c5fe53e4d5dc9285fcb8c7eec66fe4194" translate="yes" xml:space="preserve">
          <source>Pandas arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d382343d36c32b03ce1d60af61d30d37543f7943" translate="yes" xml:space="preserve">
          <source>Pandas can also export to Stata file format with the &lt;a href=&quot;../../reference/api/pandas.dataframe.to_stata#pandas.DataFrame.to_stata&quot;&gt;&lt;code&gt;DataFrame.to_stata()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2f5ff67006c67e045c763ef65930b1198e2d87" translate="yes" xml:space="preserve">
          <source>Pandas can also read Stata data sets in &lt;code&gt;.dta&lt;/code&gt; format with the &lt;a href=&quot;../../reference/api/pandas.read_stata#pandas.read_stata&quot;&gt;&lt;code&gt;read_stata()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58042b3d0335b7825dc2ac2105cde1b5790779d8" translate="yes" xml:space="preserve">
          <source>Pandas can represent integer data with possibly missing values using &lt;a href=&quot;../reference/api/pandas.arrays.integerarray#pandas.arrays.IntegerArray&quot;&gt;&lt;code&gt;arrays.IntegerArray&lt;/code&gt;&lt;/a&gt;. This is an &lt;a href=&quot;../development/extending#extending-extension-types&quot;&gt;extension types&lt;/a&gt; implemented within pandas. It is not the default dtype for integers, and will not be inferred; you must explicitly pass the dtype into &lt;a href=&quot;../reference/api/pandas.array#pandas.array&quot;&gt;&lt;code&gt;array()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../reference/api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62f7339f25afd99887d4814a1f50bccf28a8421" translate="yes" xml:space="preserve">
          <source>Pandas defines a custom data type for representing data that can take only a limited, fixed set of values. The dtype of a &lt;code&gt;Categorical&lt;/code&gt; can be described by a &lt;code&gt;pandas.api.types.CategoricalDtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f178ada8b9c618f3f893a76ae96839888f9af15a" translate="yes" xml:space="preserve">
          <source>Pandas defines an interface for implementing data types and arrays that &lt;em&gt;extend&lt;/em&gt; NumPy&amp;rsquo;s type system. Pandas itself uses the extension system for some types that aren&amp;rsquo;t built into NumPy (categorical, period, interval, datetime with timezone).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc42cfba57a298dbecd37b08f0f71019a275415" translate="yes" xml:space="preserve">
          <source>Pandas ecosystem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c154e8d4732ae16d34f562feb3533c322c366bf" translate="yes" xml:space="preserve">
          <source>Pandas equivalents for some SQL analytic and aggregate functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f75dab11b539cdc6096b969d1be8b9d25cc08f" translate="yes" xml:space="preserve">
          <source>Pandas has a system for sharing docstrings, with slight variations, between classes. This helps us keep docstrings consistent, while keeping things clear for the user reading. It comes at the cost of some complexity when writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc570f48bfc23424ff565e5ed74388ee831d746" translate="yes" xml:space="preserve">
          <source>Pandas has many optional dependencies that are only used for specific methods. For example, &lt;a href=&quot;reference/api/pandas.read_hdf#pandas.read_hdf&quot;&gt;&lt;code&gt;pandas.read_hdf()&lt;/code&gt;&lt;/a&gt; requires the &lt;code&gt;pytables&lt;/code&gt; package. If the optional dependency is not installed, pandas will raise an &lt;code&gt;ImportError&lt;/code&gt; when the method requiring that dependency is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7ba2562df5b5e3dc77c7e58a0f73ea01ea41df" translate="yes" xml:space="preserve">
          <source>Pandas has some helpers for sharing docstrings between related classes, see &lt;a href=&quot;#docstring-sharing&quot;&gt;Sharing docstrings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbe1b7d7aa8fbef1c1a76bb85c7a924f8b4fbe1" translate="yes" xml:space="preserve">
          <source>Pandas makes no restrictions on how an extension array is created via its &lt;code&gt;__new__&lt;/code&gt; or &lt;code&gt;__init__&lt;/code&gt;, and puts no restrictions on how you store your data. We do require that your array be convertible to a NumPy array, even if this is relatively expensive (as it is for &lt;code&gt;Categorical&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21b8a6779f2f004f79cd9612563cfc6be2ef583" translate="yes" xml:space="preserve">
          <source>Pandas object holding the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21ccf071e48d1a71fe9e040aa3c12ae1f334e4c" translate="yes" xml:space="preserve">
          <source>Pandas on Ray is an early stage DataFrame library that wraps Pandas and transparently distributes the data and computation. The user does not need to know how many cores their system has, nor do they need to specify how to distribute the data. In fact, users can continue using their previous Pandas notebooks while experiencing a considerable speedup from Pandas on Ray, even on a single machine. Only a modification of the import statement is needed, as we demonstrate below. Once you&amp;rsquo;ve changed your import statement, you&amp;rsquo;re ready to use Pandas on Ray just like you would Pandas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c695451815a9168439fd41c7113d2f9ceeb365cb" translate="yes" xml:space="preserve">
          <source>Pandas provides an interface for defining &lt;a href=&quot;development/extending#extending-extension-types&quot;&gt;extension types&lt;/a&gt; to extend NumPy&amp;rsquo;s type system. The following libraries implement that interface to provide types not found in NumPy or pandas, which work well with pandas&amp;rsquo; data containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85607f00e36bb52861c1ab6cf3123a865bc8c845" translate="yes" xml:space="preserve">
          <source>Pandas provides data structures for efficiently storing sparse data. These are not necessarily sparse in the typical &amp;ldquo;mostly 0&amp;rdquo;. Rather, you can view these objects as being &amp;ldquo;compressed&amp;rdquo; where any data matching a specific value (&lt;code&gt;NaN&lt;/code&gt; / missing value, though any value can be chosen, including 0) is omitted. The compressed values are not actually stored in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3beb2797e48d238a09accd1a262596e9320673d3" translate="yes" xml:space="preserve">
          <source>Pandas provides dtype-specific methods under various accessors. These are separate namespaces within &lt;a href=&quot;api/pandas.series#pandas.Series&quot;&gt;&lt;code&gt;Series&lt;/code&gt;&lt;/a&gt; that only apply to specific data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b72bc8721e191840e1cd18d9a1fd5764dac266e" translate="yes" xml:space="preserve">
          <source>Pandas replacement for python datetime.datetime object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3405c54f6e17c647418a358a802bb402c8e3d8d4" translate="yes" xml:space="preserve">
          <source>Pandas represents spans of times as &lt;a href=&quot;api/pandas.period#pandas.Period&quot;&gt;&lt;code&gt;Period&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d85b26efb66d93fc0793f9f0fc137d0b9901a8" translate="yes" xml:space="preserve">
          <source>Pandas uses C extensions (mostly written using Cython) to speed up certain operations. To install pandas from source, you need to compile these C extensions, which means you need a C compiler. This process depends on which platform you&amp;rsquo;re using. Follow the &lt;a href=&quot;https://devguide.python.org/setup/#compile-and-build&quot;&gt;CPython contributing guide&lt;/a&gt; for getting a compiler installed. You don&amp;rsquo;t need to do any of the &lt;code&gt;./configure&lt;/code&gt; or &lt;code&gt;make&lt;/code&gt; steps; you only need to install the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8776ac2beb997046890a79ee5284e51108765955" translate="yes" xml:space="preserve">
          <source>Pandas uses the following keys in render. Arguments passed in &lt;code&gt;**kwargs&lt;/code&gt; take precedence, so think carefully if you want to override them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bde5481a8a1d9a141f8d441bacf2d1d730f594d" translate="yes" xml:space="preserve">
          <source>Pandas will infer an ExtensionArray for some types of data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4bd749ecf708ff53a15e9e7904176bd92ad347" translate="yes" xml:space="preserve">
          <source>Panel</source>
          <target state="translated">Panel</target>
        </trans-unit>
        <trans-unit id="3d839568779777a0feed50be2db506667ad8cf01" translate="yes" xml:space="preserve">
          <source>Parallel Coordinates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a1fbea9aa14f2586103f6c3cc1f656e915b6cf" translate="yes" xml:space="preserve">
          <source>Parallel coordinates plotting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d6816f753293f57877beeac6dbed4d1fd1465d" translate="yes" xml:space="preserve">
          <source>Parameter needed for compatibility with DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511ffd4fb0750e4d75b508a03b761a01f1c67316" translate="yes" xml:space="preserve">
          <source>Parameter types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbff42e933b453bd3df4db47add42681c415e7df" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;lsuffix&lt;/code&gt;, and &lt;code&gt;rsuffix&lt;/code&gt; are not supported when passing a list of &lt;code&gt;DataFrame&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad4383029ba4c90363679a5a0d37309fab09af8" translate="yes" xml:space="preserve">
          <source>Parameters that &lt;strong&gt;add&lt;/strong&gt; to the offset (like Timedelta):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65ab62c24068baaa3df36069f69e40f21f98ff8" translate="yes" xml:space="preserve">
          <source>Parameters that &lt;strong&gt;replace&lt;/strong&gt; the offset value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="b6d723c4422f1831114918787bf7b07424cb30e7" translate="yes" xml:space="preserve">
          <source>Parquet</source>
          <target state="translated">Parquet</target>
        </trans-unit>
        <trans-unit id="3eff82fbda53acf8c428b63a848c44b6e34d3239" translate="yes" xml:space="preserve">
          <source>Parquet Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729feb17186d7373aa5bc88278ecea961b54cbb0" translate="yes" xml:space="preserve">
          <source>Parquet and feather reading / writing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c86c91bbe93616f9f56639b9aff56c4f806c2de" translate="yes" xml:space="preserve">
          <source>Parquet library to use. If &amp;lsquo;auto&amp;rsquo;, then the option &lt;code&gt;io.parquet.engine&lt;/code&gt; is used. The default &lt;code&gt;io.parquet.engine&lt;/code&gt; behavior is to try &amp;lsquo;pyarrow&amp;rsquo;, falling back to &amp;lsquo;fastparquet&amp;rsquo; if &amp;lsquo;pyarrow&amp;rsquo; is unavailable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31829b25d1e2b88afe9823470988636ed7fc5a61" translate="yes" xml:space="preserve">
          <source>Parquet reading / writing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db212c9f981ee1e56571faca69d752757eba3be6" translate="yes" xml:space="preserve">
          <source>Parse specified sheet(s) into a DataFrame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e9c0030dd35f6d4391f0563caa16a349a7748e" translate="yes" xml:space="preserve">
          <source>Parser engine to use. The C engine is faster while the python engine is currently more feature-complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7294d33710169103141018bfcb0ee5ad3daa81e2" translate="yes" xml:space="preserve">
          <source>Parsing</source>
          <target state="translated">Parsing</target>
        </trans-unit>
        <trans-unit id="b7c31aef92e4bff80850de2364c5e5e411e64370" translate="yes" xml:space="preserve">
          <source>Parsing a list or array of strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e364f31723bcf502b9774b78773cd7328300d87" translate="yes" xml:space="preserve">
          <source>Parsing a single string to a Timedelta:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37dd74b7aa0fd821078bc00dea1bf7924a0ae4d" translate="yes" xml:space="preserve">
          <source>Parsing options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4562b76c1f646a55d536fdf0802d0ddf9b8805e" translate="yes" xml:space="preserve">
          <source>Parsing time series information from various sources and formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92928cebb9d2e9a0b772596b27252aabb2e15137" translate="yes" xml:space="preserve">
          <source>Partial indexing with MultiIndex not allowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664c8b8feb63b87992a86ebf00ee9e7c26c930bb" translate="yes" xml:space="preserve">
          <source>Pass &amp;ldquo;all&amp;rdquo; as argument to reset all options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea009b82cce32d25c82f5c945fab835ae1e44f6" translate="yes" xml:space="preserve">
          <source>Pass &amp;lsquo;timestamp&amp;rsquo; to convert the resulting index to a &lt;code&gt;DateTimeIndex&lt;/code&gt; or &amp;lsquo;period&amp;rsquo; to convert it to a &lt;code&gt;PeriodIndex&lt;/code&gt;. By default the input representation is retained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec5983ef169de5c8307c0331ededa50e9e68956" translate="yes" xml:space="preserve">
          <source>Pass a custom function via &lt;code&gt;apply&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e71869244a0a589242122a96ed5bdfb7ef52605" translate="yes" xml:space="preserve">
          <source>Pass your style functions into one of the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145b0d3c2f5ede1a02d43fa53f89418798e20cab" translate="yes" xml:space="preserve">
          <source>Passed to &lt;code&gt;numpy.ndarray.argsort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c1dfc065b915c72ee509d179a1d37103968376" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;ignore_index=True&lt;/code&gt; will drop all name references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4d0c1e743845d75d9921293c2aadfdb0ab716d" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;memory_usage='deep'&lt;/code&gt; will enable a more accurate memory usage report, accounting for the full usage of the contained objects. This is optional as it can be expensive to do this deeper introspection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06569f8f58fa8f012b300c4a8311042df7465679" translate="yes" xml:space="preserve">
          <source>Passing &lt;code&gt;result_type='broadcast'&lt;/code&gt; will ensure the same shape result, whether list-like or scalar is returned by the function, and broadcast it along the axis. The resulting column names will be the originals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af9eba752f00612a7bcb23506ccc2e1068922c9" translate="yes" xml:space="preserve">
          <source>Passing a Series as an input returns a Series with categorical dtype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec314999aee075fb7a2c904d1e4b1e1fb343246" translate="yes" xml:space="preserve">
          <source>Passing a Series as an input returns a Series with mapping value. It is used to map numerically to intervals based on bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1689c3fa1a241e8b51e6068b1547b4bda072306d" translate="yes" xml:space="preserve">
          <source>Passing a single string as &lt;code&gt;s.isin('lama')&lt;/code&gt; will raise an error. Use a list of one element instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9472e37a3bc368737dfb94b6aa8ee74cca07564b" translate="yes" xml:space="preserve">
          <source>Passing an IntervalIndex for &lt;code&gt;bins&lt;/code&gt; results in those categories exactly. Notice that values not covered by the IntervalIndex are set to NaN. 0 is to the left of the first bin (which is closed on the right), and 1.5 falls between two bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92628febe66841c69203c22921a319cb925b992" translate="yes" xml:space="preserve">
          <source>Passing errors=&amp;rsquo;coerce&amp;rsquo; will force an out-of-bounds date to NaT, in addition to forcing non-dates (or non-parseable dates) to NaT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189fa087558955e14572d2c861453c02432c0c86" translate="yes" xml:space="preserve">
          <source>Passing infer_datetime_format=True can often-times speedup a parsing if its not an ISO8601 format exactly, but in a regular format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbc4b2631580726e4add0ae016dd1abea76f652" translate="yes" xml:space="preserve">
          <source>Passing result_type=&amp;rsquo;expand&amp;rsquo; will expand list-like results to columns of a Dataframe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0dd77580696e7789fa25b161cd5e2db08490a6" translate="yes" xml:space="preserve">
          <source>Path in each object to list of records. If not passed, data will be assumed to be an array of records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cddbb36c9d5d62f0febd41d9af884c3b8ade99f2" translate="yes" xml:space="preserve">
          <source>Path or paths of directories containing the templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975dadbb9099de2116ac90dca07691db30d6fc1d" translate="yes" xml:space="preserve">
          <source>Path to xls or xlsx file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34531863a790810792a39bf6f795f78883ec2a4" translate="yes" xml:space="preserve">
          <source>Pattern or regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86aa97567cc25ffc2a763c7ee132952dc15b60af" translate="yes" xml:space="preserve">
          <source>Percent change</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3329ba1ab4e6759dd87fbede18bbbe0ac09aab3" translate="yes" xml:space="preserve">
          <source>Percent change over given number of periods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69daaebf1db83ac4f99153518fb6b2173d75bf63" translate="yes" xml:space="preserve">
          <source>Percentage change between the current and a prior element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c5a6f18cf335b1c427ebcc82a248208cc618bb" translate="yes" xml:space="preserve">
          <source>Percentage change in French franc, Deutsche Mark, and Italian lira from 1980-01-01 to 1980-03-01.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02df581ecc30a3d2e8a62995d955ea0edf69487f" translate="yes" xml:space="preserve">
          <source>Percentage changes within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2274048627e2556d8277c391a2f7d0e79d7c6ec" translate="yes" xml:space="preserve">
          <source>Percentage of change in GOOG and APPL stock volume. Shows computing the percentage change between columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b69616fbdd291d887e4f61a1db3d1e3439d7ae19" translate="yes" xml:space="preserve">
          <source>Perform an asof merge (similar to left join but it matches on nearest key rather than equal key).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bddcb3712e433205aeb21d51eabb689fe22569" translate="yes" xml:space="preserve">
          <source>Perform an asof merge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1939ac0672b7e7a8897496c013c07cfe0eac773" translate="yes" xml:space="preserve">
          <source>Perform an asof merge. Similar to left join.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05957300788e3e7b4cdd620dd8641040968355fd" translate="yes" xml:space="preserve">
          <source>Perform an asof merge. This is similar to a left-join except that we match on nearest key rather than equal keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201fbb7f4b6dcc4fe11cba077662ba0d0642e641" translate="yes" xml:space="preserve">
          <source>Perform any type of operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb8752a9dce9fdfb9ec0ba134c5bcc5b874adcb" translate="yes" xml:space="preserve">
          <source>Perform ceil operation on the data to the specified &lt;code&gt;freq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335e7842ffc312d76c4ff040da84269ebc7aa223" translate="yes" xml:space="preserve">
          <source>Perform column-wise combine with another DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3211441d935a3739c3ea2bfcc63734f59097ac7e" translate="yes" xml:space="preserve">
          <source>Perform elementwise operation on two Series using a given function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88c01c8b46a7afa6ef5d14bdbc633bf05b3868e" translate="yes" xml:space="preserve">
          <source>Perform floor operation on the data to the specified &lt;code&gt;freq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90b35dd00eaaabd8ee29440585fd1ab85132b47" translate="yes" xml:space="preserve">
          <source>Perform merge with optional filling/interpolation designed for ordered data like time series data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f10de21bbecdf1792733b6b43e67137a01c5fef" translate="yes" xml:space="preserve">
          <source>Perform merge with optional filling/interpolation designed for ordered data like time series data. Optionally perform group-wise merge (see examples)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca00a8c5d1b7306e497fd3c92c9775430ce6d90" translate="yes" xml:space="preserve">
          <source>Perform operation over exponential weighted window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7900d23b44b806f50edd4bc2084270edcfb3f34d" translate="yes" xml:space="preserve">
          <source>Perform operations over expanding window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcabe3b79def780528a3fb557408717f7d3f04b" translate="yes" xml:space="preserve">
          <source>Perform operations over groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cc937713bd9b03b28111bbf6e86ecc5ac90601" translate="yes" xml:space="preserve">
          <source>Perform operations over resampled bins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048d39c32ecc534093da70fab84284c75a347fd0" translate="yes" xml:space="preserve">
          <source>Perform operations over rolling window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022e75895791eda49df6eddb877fdf6956610557" translate="yes" xml:space="preserve">
          <source>Perform round operation on the data to the specified &lt;code&gt;freq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40f6ba68a65adb4df9f68265246b34693135e4d" translate="yes" xml:space="preserve">
          <source>Perform series-wise operation on two DataFrames using a given function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e921e40b49d046d8d3dbde74521edf8f9716cea" translate="yes" xml:space="preserve">
          <source>Perform transformation type operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="0cb883fc85b1fd84aaebb7319c682c586a065641" translate="yes" xml:space="preserve">
          <source>Performance considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afba84726a65b55e1e5521312c1ddb6d5f4dd086" translate="yes" xml:space="preserve">
          <source>Performance matters and it is worth considering whether your code has introduced performance regressions. &lt;em&gt;pandas&lt;/em&gt; is in the process of migrating to &lt;a href=&quot;https://github.com/spacetelescope/asv&quot;&gt;asv benchmarks&lt;/a&gt; to enable easy monitoring of the performance of critical &lt;em&gt;pandas&lt;/em&gt; operations. These benchmarks are all found in the &lt;code&gt;pandas/asv_bench&lt;/code&gt; directory. asv supports both python2 and python3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003aa69e5cfbee1e409009d64a7a0fff1a8f8ffb" translate="yes" xml:space="preserve">
          <source>Performing a rolling minimum with a window size of 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170a28a9db6d27d7212fc6dc249434a57517e7bc" translate="yes" xml:space="preserve">
          <source>Period</source>
          <target state="translated">Period</target>
        </trans-unit>
        <trans-unit id="db2a616006dafe5807fe4245c3ddd2b97e6b90b7" translate="yes" xml:space="preserve">
          <source>Period (time spans)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1980124e1b9f3cd9c7a45c49e0007f605feb6c52" translate="yes" xml:space="preserve">
          <source>Period longer than a day</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c47a4725dccbf662698238943889d936446b686" translate="yes" xml:space="preserve">
          <source>Period properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a978407efce71f06781a0be456adef42e15220" translate="yes" xml:space="preserve">
          <source>Period.asfreq()</source>
          <target state="translated">Period.asfreq()</target>
        </trans-unit>
        <trans-unit id="d65daecb919c4419f45b17b3deb3317b3fefa51c" translate="yes" xml:space="preserve">
          <source>Period.day</source>
          <target state="translated">Period.day</target>
        </trans-unit>
        <trans-unit id="95acd3886d63b851b13e869731585f9f773c53cf" translate="yes" xml:space="preserve">
          <source>Period.dayofweek</source>
          <target state="translated">Period.dayofweek</target>
        </trans-unit>
        <trans-unit id="07b0e04ee16ac7a10569f7049adf39246a9cd6b0" translate="yes" xml:space="preserve">
          <source>Period.dayofyear</source>
          <target state="translated">Period.dayofyear</target>
        </trans-unit>
        <trans-unit id="7d66ffa274e02b473c6360d2761e1293a7666efc" translate="yes" xml:space="preserve">
          <source>Period.days_in_month</source>
          <target state="translated">Period.days_in_month</target>
        </trans-unit>
        <trans-unit id="f70ac3e48305915c1bbe165df1b3fee7d9cc9bc2" translate="yes" xml:space="preserve">
          <source>Period.daysinmonth</source>
          <target state="translated">Period.daysinmonth</target>
        </trans-unit>
        <trans-unit id="aaad75f679cc514b904b2bc8bbb8897466524b43" translate="yes" xml:space="preserve">
          <source>Period.end_time</source>
          <target state="translated">Period.end_time</target>
        </trans-unit>
        <trans-unit id="a4456f416e5b6bb6e1d68672ee2b2a57cba34123" translate="yes" xml:space="preserve">
          <source>Period.freq</source>
          <target state="translated">Period.freq</target>
        </trans-unit>
        <trans-unit id="dcbb8c0fe360404ce3c2872e5d289484fb7edfbc" translate="yes" xml:space="preserve">
          <source>Period.freqstr</source>
          <target state="translated">Period.freqstr</target>
        </trans-unit>
        <trans-unit id="ea7d1ea04d5d6ff05c2ed2b5547675b81663a253" translate="yes" xml:space="preserve">
          <source>Period.hour</source>
          <target state="translated">Period.hour</target>
        </trans-unit>
        <trans-unit id="c425cc7b7f8de8dc0cd69c6fb90e5037bfb7506b" translate="yes" xml:space="preserve">
          <source>Period.is_leap_year</source>
          <target state="translated">Period.is_leap_year</target>
        </trans-unit>
        <trans-unit id="9160c93ab457c84b7e550b798c79f1134901189a" translate="yes" xml:space="preserve">
          <source>Period.minute</source>
          <target state="translated">Period.minute</target>
        </trans-unit>
        <trans-unit id="518ac5bbe6b75f7252e0996301df9434fde28076" translate="yes" xml:space="preserve">
          <source>Period.month</source>
          <target state="translated">Period.month</target>
        </trans-unit>
        <trans-unit id="a52ebe24985f98afa868b59635bb6a67c8bce032" translate="yes" xml:space="preserve">
          <source>Period.now()</source>
          <target state="translated">Period.now()</target>
        </trans-unit>
        <trans-unit id="29f91938b5150d66b3955b9c67901cadc4a74ad6" translate="yes" xml:space="preserve">
          <source>Period.ordinal</source>
          <target state="translated">Period.ordinal</target>
        </trans-unit>
        <trans-unit id="86b587e2688c8f39b3be30e129cc9cf4e805c583" translate="yes" xml:space="preserve">
          <source>Period.quarter</source>
          <target state="translated">Period.quarter</target>
        </trans-unit>
        <trans-unit id="89b74e9a88969fbc5ba5831aef9275447c749167" translate="yes" xml:space="preserve">
          <source>Period.qyear</source>
          <target state="translated">Period.qyear</target>
        </trans-unit>
        <trans-unit id="f88618a7e4d88472f37bb3583475fd1518d0edbb" translate="yes" xml:space="preserve">
          <source>Period.second</source>
          <target state="translated">Period.second</target>
        </trans-unit>
        <trans-unit id="43b562d7372e3350c0150139e1befb65b614ed61" translate="yes" xml:space="preserve">
          <source>Period.start_time</source>
          <target state="translated">Period.start_time</target>
        </trans-unit>
        <trans-unit id="d833f6b9cbfb47ea9c1b9cf7316ae389142d28a6" translate="yes" xml:space="preserve">
          <source>Period.strftime()</source>
          <target state="translated">Period.strftime()</target>
        </trans-unit>
        <trans-unit id="cd4786656ee32a933f8cc749a68bf78a7f947804" translate="yes" xml:space="preserve">
          <source>Period.to_timestamp()</source>
          <target state="translated">Period.to_timestamp()</target>
        </trans-unit>
        <trans-unit id="4417bfcb9e76422da18be441427a3170ac7bdd8c" translate="yes" xml:space="preserve">
          <source>Period.week</source>
          <target state="translated">Period.week</target>
        </trans-unit>
        <trans-unit id="bf4ea6ac942aa3ad621575a7e43b2aaabb9f2995" translate="yes" xml:space="preserve">
          <source>Period.weekday</source>
          <target state="translated">Period.weekday</target>
        </trans-unit>
        <trans-unit id="ed866aad118d1f91038a8f03dd6d3829ba757ccd" translate="yes" xml:space="preserve">
          <source>Period.weekofyear</source>
          <target state="translated">Period.weekofyear</target>
        </trans-unit>
        <trans-unit id="75274759c137936c5c878befb6a44ecb1dd6f765" translate="yes" xml:space="preserve">
          <source>Period.year</source>
          <target state="translated">Period.year</target>
        </trans-unit>
        <trans-unit id="58c66627fab8fd507ce511c9e82164d0b87d9f33" translate="yes" xml:space="preserve">
          <source>PeriodArray</source>
          <target state="translated">PeriodArray</target>
        </trans-unit>
        <trans-unit id="31056a8bf25e2c73e59058b479d01cd6a230c777" translate="yes" xml:space="preserve">
          <source>PeriodArray/Index</source>
          <target state="translated">PeriodArray/Index</target>
        </trans-unit>
        <trans-unit id="293c88a4cb583bfc912d44ed76470e49ed0f890c" translate="yes" xml:space="preserve">
          <source>PeriodDtype.freq</source>
          <target state="translated">PeriodDtype.freq</target>
        </trans-unit>
        <trans-unit id="f99cdc932adba0d261c50a1ccf9ec044f73feaa4" translate="yes" xml:space="preserve">
          <source>PeriodDtype[source]</source>
          <target state="translated">PeriodDtype[source]</target>
        </trans-unit>
        <trans-unit id="61a25daafa1f9183b582c0bb51ae12a322dbd769" translate="yes" xml:space="preserve">
          <source>PeriodIndex</source>
          <target state="translated">PeriodIndex</target>
        </trans-unit>
        <trans-unit id="b4aa4fae65b817cbad2635142933bff151c41947" translate="yes" xml:space="preserve">
          <source>PeriodIndex.asfreq()</source>
          <target state="translated">PeriodIndex.asfreq()</target>
        </trans-unit>
        <trans-unit id="46ea833beae375be5bd77e502fd94146c8c3936e" translate="yes" xml:space="preserve">
          <source>PeriodIndex.day</source>
          <target state="translated">PeriodIndex.day</target>
        </trans-unit>
        <trans-unit id="f2013f0759d82f9d0bd84ea8d72e25d2c24cb151" translate="yes" xml:space="preserve">
          <source>PeriodIndex.dayofweek</source>
          <target state="translated">PeriodIndex.dayofweek</target>
        </trans-unit>
        <trans-unit id="5b00be26990bf3a385ad20c81982baa40b92c53e" translate="yes" xml:space="preserve">
          <source>PeriodIndex.dayofyear</source>
          <target state="translated">PeriodIndex.dayofyear</target>
        </trans-unit>
        <trans-unit id="f633583a7e5c103da5464dd54c666554940ab7a9" translate="yes" xml:space="preserve">
          <source>PeriodIndex.days_in_month</source>
          <target state="translated">PeriodIndex.days_in_month</target>
        </trans-unit>
        <trans-unit id="4ed2be5def6773e718d1a9c9dd5cd60673fbc040" translate="yes" xml:space="preserve">
          <source>PeriodIndex.daysinmonth</source>
          <target state="translated">PeriodIndex.daysinmonth</target>
        </trans-unit>
        <trans-unit id="2dcb49e0a9b8ad9fd7e66e06631e869921cf0bef" translate="yes" xml:space="preserve">
          <source>PeriodIndex.end_time</source>
          <target state="translated">PeriodIndex.end_time</target>
        </trans-unit>
        <trans-unit id="6c4d9b089fd048f3b6237ee9ba3c06bf5c3b82dc" translate="yes" xml:space="preserve">
          <source>PeriodIndex.freq</source>
          <target state="translated">PeriodIndex.freq</target>
        </trans-unit>
        <trans-unit id="abc091ca71b2786f20ff973f7b6177fe45d0f2c1" translate="yes" xml:space="preserve">
          <source>PeriodIndex.freqstr</source>
          <target state="translated">PeriodIndex.freqstr</target>
        </trans-unit>
        <trans-unit id="3feaf23583021b77b2c92b179074696d0881a7d0" translate="yes" xml:space="preserve">
          <source>PeriodIndex.hour</source>
          <target state="translated">PeriodIndex.hour</target>
        </trans-unit>
        <trans-unit id="58a001455117bf0cf5e6b79aaf3ee88d88e839d5" translate="yes" xml:space="preserve">
          <source>PeriodIndex.is_leap_year</source>
          <target state="translated">PeriodIndex.is_leap_year</target>
        </trans-unit>
        <trans-unit id="b5b908cfdb33b4ebf51e6edded6c98379b0c2379" translate="yes" xml:space="preserve">
          <source>PeriodIndex.minute</source>
          <target state="translated">PeriodIndex.minute</target>
        </trans-unit>
        <trans-unit id="88ca7090b2b885c3c5c55c44df2fc44c4dedbf2c" translate="yes" xml:space="preserve">
          <source>PeriodIndex.month</source>
          <target state="translated">PeriodIndex.month</target>
        </trans-unit>
        <trans-unit id="03db90f453f33aca36ac265d4f5c70a10354b07b" translate="yes" xml:space="preserve">
          <source>PeriodIndex.quarter</source>
          <target state="translated">PeriodIndex.quarter</target>
        </trans-unit>
        <trans-unit id="7a7576920537e81b883a8f15cb84d9116c92aca1" translate="yes" xml:space="preserve">
          <source>PeriodIndex.qyear</source>
          <target state="translated">PeriodIndex.qyear</target>
        </trans-unit>
        <trans-unit id="5f247c6248930addea78af6da6e221a39abe2d98" translate="yes" xml:space="preserve">
          <source>PeriodIndex.second</source>
          <target state="translated">PeriodIndex.second</target>
        </trans-unit>
        <trans-unit id="3407a8c168398fd20abf18f850c325341b2cd9b3" translate="yes" xml:space="preserve">
          <source>PeriodIndex.start_time</source>
          <target state="translated">PeriodIndex.start_time</target>
        </trans-unit>
        <trans-unit id="62f519d0990e6fef52673a6f5a2c95e8cf279f17" translate="yes" xml:space="preserve">
          <source>PeriodIndex.strftime()</source>
          <target state="translated">PeriodIndex.strftime()</target>
        </trans-unit>
        <trans-unit id="60959bdd6ce1d3e8a3e7e866672537fce11dda28" translate="yes" xml:space="preserve">
          <source>PeriodIndex.to_timestamp()</source>
          <target state="translated">PeriodIndex.to_timestamp()</target>
        </trans-unit>
        <trans-unit id="5305d38bb255187e588e96744d68943167ed50e3" translate="yes" xml:space="preserve">
          <source>PeriodIndex.week</source>
          <target state="translated">PeriodIndex.week</target>
        </trans-unit>
        <trans-unit id="690260de6c35e9ddfa4165f0e9c5342b9ec0432a" translate="yes" xml:space="preserve">
          <source>PeriodIndex.weekday</source>
          <target state="translated">PeriodIndex.weekday</target>
        </trans-unit>
        <trans-unit id="2b231f1a4f84e10b10e412df20964ae42bf4ed38" translate="yes" xml:space="preserve">
          <source>PeriodIndex.weekofyear</source>
          <target state="translated">PeriodIndex.weekofyear</target>
        </trans-unit>
        <trans-unit id="f05811e73b2c1900d2154f287000121b6fe27b82" translate="yes" xml:space="preserve">
          <source>PeriodIndex.year</source>
          <target state="translated">PeriodIndex.year</target>
        </trans-unit>
        <trans-unit id="f0ec07209310a2c271f642e94b0bd68621a8c0ae" translate="yes" xml:space="preserve">
          <source>PeriodIndex[source]</source>
          <target state="translated">PeriodIndex[source]</target>
        </trans-unit>
        <trans-unit id="562ce80e937e5abf9986498043c8d8ae93723c4a" translate="yes" xml:space="preserve">
          <source>Periods to shift for calculating difference, accepts negative values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab68ad50eeee8087c38a98f80759d9591da016d" translate="yes" xml:space="preserve">
          <source>Periods to shift for forming percent change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873d0df0dda4a814bc4790e0d442bf3e2419731f" translate="yes" xml:space="preserve">
          <source>Permute the dimensions of a given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a0fd1bbcc9b25b75a3cdcdab8742d01f4d78c7" translate="yes" xml:space="preserve">
          <source>Pickle (serialize) DataFrame object to file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edad7487b8c954943eadafaa2ff348c52e4aa5e3" translate="yes" xml:space="preserve">
          <source>Pickle (serialize) Series object to file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf72859f3761d541d03af04121ea0fcf75a518aa" translate="yes" xml:space="preserve">
          <source>Pickle (serialize) object to file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e451c6df0e9534b87f8f317ad70746e8d408ad1" translate="yes" xml:space="preserve">
          <source>Pickling</source>
          <target state="translated">Pickling</target>
        </trans-unit>
        <trans-unit id="26965473b4d2ca2e70969a86010b0a5a9ee09d86" translate="yes" xml:space="preserve">
          <source>Piecewise cubic polynomials (Akima interpolator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8953893f96db891e18ce640393fc6fcf5b1ba1" translate="yes" xml:space="preserve">
          <source>Piecewise polynomial in the Bernstein basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a7e250b93c135a2e158b16b1d540adf83f6a09" translate="yes" xml:space="preserve">
          <source>Pipe output of DataFrame.info to buffer instead of sys.stdout, get buffer content and writes to a text file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88658f2820a583968f6a85144f9d66fa02d7cd9" translate="yes" xml:space="preserve">
          <source>Pivot a level of the (necessarily hierarchical) index labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2765dd66d725759a080bd0135dafb744b2bf3b6" translate="yes" xml:space="preserve">
          <source>Pivot a level of the (necessarily hierarchical) index labels, returning a DataFrame having a new level of column labels whose inner-most level consists of the pivoted index labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee3c70c3bb2f62e5a593de782dfddbdbdf27ce0" translate="yes" xml:space="preserve">
          <source>Pivot a level of the column labels (inverse operation from &lt;code&gt;unstack&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a1bd120ae44dc1dc772aa37490711e99cf9c01" translate="yes" xml:space="preserve">
          <source>Pivot a table based on column values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a841e452e1faa1b33b0e1395bf85897cdae5cdc5" translate="yes" xml:space="preserve">
          <source>Pivot based on the index values instead of a column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3bebfe50c5a336e0b4935b14a3e4608d41ccb2" translate="yes" xml:space="preserve">
          <source>Pivot tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d32b75b7e2c6e57580b36ea5a5b57e568128aab" translate="yes" xml:space="preserve">
          <source>Pivot without aggregation that can handle non-numeric data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572cda0a0f9277f04ee36d8d424c3f311e669d22" translate="yes" xml:space="preserve">
          <source>Plain Cython</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac117c5cda51af19ef6ab5644181792d3def2ef" translate="yes" xml:space="preserve">
          <source>Plan for dropping Python 2.7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29829d2e5f4488cbd079fac1af4e2b976b5e6da5" translate="yes" xml:space="preserve">
          <source>Please note that only &lt;code&gt;method='linear'&lt;/code&gt; is supported for DataFrame/Series with a MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376f0fcbd2904b862cd4d42d0ab3a771959a25c4" translate="yes" xml:space="preserve">
          <source>Please note that precision loss may occur if really large numbers are passed in. Due to the internal limitations of &lt;code&gt;ndarray&lt;/code&gt;, if numbers smaller than &lt;code&gt;-9223372036854775808&lt;/code&gt; (np.iinfo(np.int64).min) or larger than &lt;code&gt;18446744073709551615&lt;/code&gt; (np.iinfo(np.uint64).max) are passed in, it is very likely they will be converted to float so that they can stored in an &lt;code&gt;ndarray&lt;/code&gt;. These warnings apply similarly to &lt;code&gt;Series&lt;/code&gt; since it internally leverages &lt;code&gt;ndarray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d58484b554cbe74c10e46924bfc5b521501fd42" translate="yes" xml:space="preserve">
          <source>Please note that the &lt;code&gt;NaN&lt;/code&gt; value present in the original dataframe (at index value 2010-01-03) will not be filled by any of the value propagation schemes. This is because filling while reindexing does not look at dataframe values, but only compares the original and desired indexes. If you do want to fill in the &lt;code&gt;NaN&lt;/code&gt; values present in the original dataframe, use the &lt;code&gt;fillna()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0a7dc9ab3975544462f4aa2fb7100aa2420f8f" translate="yes" xml:space="preserve">
          <source>Please try to maintain backward compatibility. &lt;em&gt;pandas&lt;/em&gt; has lots of users with lots of existing code, so don&amp;rsquo;t break it if at all possible. If you think breakage is required, clearly state why as part of the pull request. Also, be careful when changing method signatures and add deprecation warnings where needed. Also, add the deprecated sphinx directive to the deprecated functions or methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eef82bbca8af1fb0ad17e5f5799121b17cdb383" translate="yes" xml:space="preserve">
          <source>Plot DataFrame versus the desired column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92048d06dd030c76bfb62f593c711595940328b7" translate="yes" xml:space="preserve">
          <source>Plot Formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b0f06b8b4fd439da6ead1cb44f3a3c9a4d2ec3" translate="yes" xml:space="preserve">
          <source>Plot Series or DataFrame as lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51d1ccee3fca685c6ab8669f086357c73b3a64e" translate="yes" xml:space="preserve">
          <source>Plot a column of the DataFrame to a horizontal bar plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c13227f8af72fbc4ef165e0ee4b022b8447c48" translate="yes" xml:space="preserve">
          <source>Plot a histogram using matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79efb43c04bffa4d5ed85c766a1822985a1d8db0" translate="yes" xml:space="preserve">
          <source>Plot a multidimensional dataset in 2D.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af3b341734122f8195f4e97d17179a3f7e34c47" translate="yes" xml:space="preserve">
          <source>Plot a single column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a71a741c957684f76dbe22f2da1e76aa8328c2f" translate="yes" xml:space="preserve">
          <source>Plot a vertical bar plot using matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3bd15f75023888ba7eb094fe02ebeef4799175" translate="yes" xml:space="preserve">
          <source>Plot a whole DataFrame to a horizontal bar plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb05736ad34ebb3a6b5eab0a311a03c3d61b425" translate="yes" xml:space="preserve">
          <source>Plot a whole dataframe to a bar plot. Each column is assigned a distinct color, and each row is nested in a group along the horizontal axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f8ebff784608b0154866f92e13d9ab44b607e7" translate="yes" xml:space="preserve">
          <source>Plot clustering visualization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d870c0d384157f50cae8ec3d6be1d309dc265bc" translate="yes" xml:space="preserve">
          <source>Plot only selected categories for the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfe0d1439de55bc0e0efffa4f0658437316ebe9" translate="yes" xml:space="preserve">
          <source>Plot y versus x as lines and/or markers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ce66c2b26854c8d0237cd4e371bc764bce8420" translate="yes" xml:space="preserve">
          <source>Plotly</source>
          <target state="translated">Plotly</target>
        </trans-unit>
        <trans-unit id="6bf0ba382c4559c265c3749f0c6b7f1ca0cee641" translate="yes" xml:space="preserve">
          <source>Plots in examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a76797a9a3c4c859b66dd1e53ff897ea41774e" translate="yes" xml:space="preserve">
          <source>Plots may also be adorned with &lt;a href=&quot;#visualization-errorbars&quot;&gt;errorbars&lt;/a&gt; or &lt;a href=&quot;#visualization-table&quot;&gt;tables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1431a1959fe1196c8f4695eb0b5b4cd6d881195" translate="yes" xml:space="preserve">
          <source>Plotting</source>
          <target state="translated">Plotting</target>
        </trans-unit>
        <trans-unit id="36260f665a78640a7f8d7d5f79c93ff752073ec1" translate="yes" xml:space="preserve">
          <source>Plotting Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27deee8169316ac29adee7e1bcf6b0128024f7f5" translate="yes" xml:space="preserve">
          <source>Plotting backends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b83c174dad9fcaf87029ed70d5e386740364489" translate="yes" xml:space="preserve">
          <source>Plotting directly with matplotlib</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c65bf8d6c2ac3872e527c09d07b21e0b549ca4" translate="yes" xml:space="preserve">
          <source>Plotting methods allow for a handful of plot styles other than the default line plot. These methods can be provided as the &lt;code&gt;kind&lt;/code&gt; keyword argument to &lt;a href=&quot;../reference/api/pandas.dataframe.plot#pandas.DataFrame.plot&quot;&gt;&lt;code&gt;plot()&lt;/code&gt;&lt;/a&gt;, and include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e7a6498104950a190db834a47add4d57ae57fd" translate="yes" xml:space="preserve">
          <source>Plotting with missing data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae778571ab5f19db26fbd4d35752060ae0346cb5" translate="yes" xml:space="preserve">
          <source>Position of element to extract.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e93307c4fc6270bef7acfd91bce830941e4c637" translate="yes" xml:space="preserve">
          <source>Positional arguments passed to func after the series value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d28def01e771de9f98612a5e2ddb91847a7663" translate="yes" xml:space="preserve">
          <source>Positional arguments to pass to &lt;code&gt;func&lt;/code&gt; in addition to the array/series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceeb272a25da64988bfd5c5a577b7b668661bd1" translate="yes" xml:space="preserve">
          <source>Positional arguments to pass to &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb9fca331ff041927ecc3b9a7b3952fedfcde5c" translate="yes" xml:space="preserve">
          <source>Positions of values within the sort order with -1 indicating nan values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e8f2c04b5ee7a53e909e9962c70ba49812b305" translate="yes" xml:space="preserve">
          <source>Possible arguments are &lt;code&gt;how&lt;/code&gt;, &lt;code&gt;fill_method&lt;/code&gt;, &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;kind&lt;/code&gt; and &lt;code&gt;on&lt;/code&gt;, and other arguments of &lt;code&gt;TimeGrouper&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ef221e3193ecc713338eb88d02a0cab9694e2a" translate="yes" xml:space="preserve">
          <source>Possible values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e34755af93cfe7b0a9b9fdded658b06bebe9a2e" translate="yes" xml:space="preserve">
          <source>PostgreSQL engine for sqlalchemy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256dca0060b7be61c6c16f68f764756184829e5a" translate="yes" xml:space="preserve">
          <source>Powerful, flexible &lt;strong&gt;group by&lt;/strong&gt; functionality to perform split-apply-combine operations on data sets, for both aggregating and transforming data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc270bfe7c5347d4df287a9eb93c3babcf333c80" translate="yes" xml:space="preserve">
          <source>Practical data analysis with Python</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145cf8eda20f002d25adf54fccf45204a9187d42" translate="yes" xml:space="preserve">
          <source>Practice your skills with real data sets and exercises. For more resources, please visit the main &lt;a href=&quot;https://github.com/guipsamora/pandas_exercises&quot;&gt;repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd4db5ce7ea626f59e720f0c27096a22aa1ecd0" translate="yes" xml:space="preserve">
          <source>Precision</source>
          <target state="translated">Precision</target>
        </trans-unit>
        <trans-unit id="71add4340a2da7abbf1c62eded9285b88ccf1269" translate="yes" xml:space="preserve">
          <source>Prefix column labels with string &lt;code&gt;prefix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d0764307be4db73fe4b881b9bd379d7291b659" translate="yes" xml:space="preserve">
          <source>Prefix labels with string &lt;code&gt;prefix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdbb6c2bbbfe9d53113e77a1da1cdd393a2ebbf" translate="yes" xml:space="preserve">
          <source>Prefix row labels with string &lt;code&gt;prefix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9ed1e88589a62eeb0a63c0703028748bbfcecd" translate="yes" xml:space="preserve">
          <source>Prefix to add to column numbers when no header, e.g. &amp;lsquo;X&amp;rsquo; for X0, X1, &amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c57e160d2f5aa1525e2cc828e0405cb8a21dbc" translate="yes" xml:space="preserve">
          <source>Preserve Stata datatypes. If False, numeric data are upcast to pandas default types for foreign data (float64 or int64).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73692c09dfe50e0add6d0ce591606f6f20b2ac45" translate="yes" xml:space="preserve">
          <source>Prevent the result from including duplicate index values with the &lt;code&gt;verify_integrity&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9e10d136ad69542240dff221559d0083d0433b" translate="yes" xml:space="preserve">
          <source>Print a concise summary of a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7fbefebb4a24354aa3d25fac0ee945562f85a6" translate="yes" xml:space="preserve">
          <source>Print detailed information on the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410daa5bb883cad10020533c4b001bf33094024d" translate="yes" xml:space="preserve">
          <source>Prints a summary of columns count and its dtypes but not per column information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42611cbce42fa90cdeaee1b86cb10e6e916a3b1e" translate="yes" xml:space="preserve">
          <source>Prints information of all columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dad50dcea52add54fc4566b0447cb953ade1308" translate="yes" xml:space="preserve">
          <source>Prints the description for one or more registered options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e582594cc023582409931762351b567372e316a" translate="yes" xml:space="preserve">
          <source>Prints the names of the indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3f2f5cb82798fb043e88cbf2868651d533c06e" translate="yes" xml:space="preserve">
          <source>Project governance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="cf2b7ee5f8ed06f88e78dec9461524cef6fbf7a7" translate="yes" xml:space="preserve">
          <source>Property Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485375da4a277709a9de10b95a5f2aadb14d30ff" translate="yes" xml:space="preserve">
          <source>Property returning a Styler object containing methods for building a styled HTML representation fo the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7482260ee5066cf1ab4bf6a81ef045917b251bd" translate="yes" xml:space="preserve">
          <source>Provide a window type. If &lt;code&gt;None&lt;/code&gt;, all points are evenly weighted. See the notes below for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf1059247f4c788a29c35321ff03abbab543630" translate="yes" xml:space="preserve">
          <source>Provide an API that is pleasing to use interactively and is &amp;ldquo;good enough&amp;rdquo; for many tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd288bde617efbe82ce5273ac93fe702a127b702" translate="yes" xml:space="preserve">
          <source>Provide expanding transformations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0a7b7ad221c88635d90bcfdb3996535c4e5d8e" translate="yes" xml:space="preserve">
          <source>Provide exponential weighted functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c2566d5e4e8eebf4d19c7909c0fd85dd9e7b65" translate="yes" xml:space="preserve">
          <source>Provide resampling when using a TimeGrouper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ae0dc7e08e9f6d3415d751d23a68ba5844da25" translate="yes" xml:space="preserve">
          <source>Provide rolling window calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24619ac266b77a8b219c4b212bd51c3d974960df" translate="yes" xml:space="preserve">
          <source>Provide the foundations for dedicated libraries to build on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24322f56a2b8375c0634b2c1ec5fc53fe737408f" translate="yes" xml:space="preserve">
          <source>Provide the rank of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1087c76319b08fac06d5ad3f1848b2c3f73144" translate="yes" xml:space="preserve">
          <source>Provided DataFrame to use to fill null values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e3e0390f795fa838c47a7c6de412ce7d6588f5" translate="yes" xml:space="preserve">
          <source>Provides access to the array scalar view (i.e. a combination of the value and the units) associated with the numpy.timedelta64().view(), including a 64-bit integer representation of the timedelta in nanoseconds (Python int compatible).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc5b59b45dcbea68dcadf4ea5a6d42606d479ef" translate="yes" xml:space="preserve">
          <source>Provides expanding transformations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07befa80f4a6f9829a4023e5e71283f6fec76660" translate="yes" xml:space="preserve">
          <source>Provides exponential weighted functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a6724b5e51c3f591c7e74dc4e93be7f6fa44f9" translate="yes" xml:space="preserve">
          <source>Provides rolling window calculations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b5e495bc6fe697d332546283eacd217fcaa4f0" translate="yes" xml:space="preserve">
          <source>Provisional: This is a new feature and still under development. We&amp;rsquo;ll be adding features and possibly making breaking changes in future releases. We&amp;rsquo;d love to hear your feedback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fc91b5f3f146d12c950fdab771b235c4f0caba" translate="yes" xml:space="preserve">
          <source>Pure Python</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e23cf5b59a18521703a4814181f01a376ef9eed" translate="yes" xml:space="preserve">
          <source>Purely integer-location based indexing for selection by position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d7ebfb44a5ab0064f65f739f51e980de59ccbb" translate="yes" xml:space="preserve">
          <source>Purely label-location based indexer for selection by label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c240a9d6928fbfcafdef504493709d38029b10f" translate="yes" xml:space="preserve">
          <source>Pushing your changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a235d6a67659e545898993494097c1e988a399" translate="yes" xml:space="preserve">
          <source>Put single value at passed column and index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b971179eada0f6c461ba4f0dc97b7256856cd95c" translate="yes" xml:space="preserve">
          <source>Put the first 5 month starts of 2011 into an index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994a521a18e15c34c809408edf4903a574ae5db7" translate="yes" xml:space="preserve">
          <source>Puts NaNs at the beginning if &lt;code&gt;first&lt;/code&gt;; &lt;code&gt;last&lt;/code&gt; puts NaNs at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4982831287a5c3712e3d6ee36dcad0e2d4f0c4" translate="yes" xml:space="preserve">
          <source>Puts NaNs at the beginning if &lt;code&gt;first&lt;/code&gt;; &lt;code&gt;last&lt;/code&gt; puts NaNs at the end. Not implemented for MultiIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5228630dd05c40752301e2f394afba60d1683270" translate="yes" xml:space="preserve">
          <source>Putting NAs first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a689e4a4398b4a2f6d8e80fdc9783021e02db228" translate="yes" xml:space="preserve">
          <source>PyDatastream is a Python interface to the &lt;a href=&quot;http://dataworks.thomson.com/Dataworks/Enterprise/1.0/&quot;&gt;Thomson Dataworks Enterprise (DWE/Datastream)&lt;/a&gt; SOAP API to return indexed Pandas DataFrames with financial data. This package requires valid credentials for this API (non free).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89284152169c4e73aa0946dcdb1d87c91013c335" translate="yes" xml:space="preserve">
          <source>PyQt4</source>
          <target state="translated">PyQt4</target>
        </trans-unit>
        <trans-unit id="65afe6543da6882b23f6835444d80a61dbc97232" translate="yes" xml:space="preserve">
          <source>PyQt5</source>
          <target state="translated">PyQt5</target>
        </trans-unit>
        <trans-unit id="aa93a8f3f07def15393ee309e4e886265beae21d" translate="yes" xml:space="preserve">
          <source>PyTables</source>
          <target state="translated">PyTables</target>
        </trans-unit>
        <trans-unit id="0b592ef470c7edd03b1847202c8345ac26ddc0fe" translate="yes" xml:space="preserve">
          <source>Python (PEP8 / black)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a21aa1dd5cb80868b6fc18d70af296c25fafb76" translate="yes" xml:space="preserve">
          <source>Python Pickle Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aede60261e02acf9cb1e0537e0c9fc5e5855f0da" translate="yes" xml:space="preserve">
          <source>Python Standard Library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8bb7e0a3b6c996b48a73e8a8089a49c4751177" translate="yes" xml:space="preserve">
          <source>Python built-in function returning the length of an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20299b84e1f1a3d9aa1af161690e670c3d254e8" translate="yes" xml:space="preserve">
          <source>Python builtin byte arrays and strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c57d1d0a55035e371141b9236824117d6c11bcd" translate="yes" xml:space="preserve">
          <source>Python builtin numerics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf22fe5872a0ab37096e938bef68dcae28ec12db" translate="yes" xml:space="preserve">
          <source>Python code, a module, function, built-in, type, literal&amp;hellip; (e.g. &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;numpy.abs&lt;/code&gt;, &lt;code&gt;datetime.date&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ac72eddb43fee4c00056f4642c0586c81efc8b" translate="yes" xml:space="preserve">
          <source>Python decorators are applied inside out. So the order is Append then Substitution, even though Substitution comes first in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed56785c4b9eba3c2e9a945cf248bc54ef02b1c" translate="yes" xml:space="preserve">
          <source>Python function or NumPy ufunc to apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8065ef6a45e4f4f258eb0571141334bdfc49e4c" translate="yes" xml:space="preserve">
          <source>Python function, returns a single value from a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9245a5f2a702fc9d8d7805dcd1933132889df3" translate="yes" xml:space="preserve">
          <source>Python standard library string method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c1ddad38320cbcec7938f96d6a8de9ecedc57c" translate="yes" xml:space="preserve">
          <source>Python version support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee322b3f8dc7c0d5b43060b31e7fb5f2b18621ab" translate="yes" xml:space="preserve">
          <source>Python write mode, default &amp;lsquo;w&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b063762eb05a7dabd80efd74d34da184b5e5333" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s datetime uses microsecond resolution, which is lower than pandas (nanosecond). The values are truncated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcfd258b99aed1a1a987ea014ada99418854ca1" translate="yes" xml:space="preserve">
          <source>Python&amp;rsquo;s standard &lt;code&gt;datetime&lt;/code&gt; library uses a different representation timedelta&amp;rsquo;s. This method converts a Series of pandas Timedeltas to &lt;code&gt;datetime.timedelta&lt;/code&gt; format with the same length as the original Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df06aaa242a7d3577191f7cacadb21525ead4f76" translate="yes" xml:space="preserve">
          <source>QtPandas</source>
          <target state="translated">QtPandas</target>
        </trans-unit>
        <trans-unit id="c84e78418a88f29c7a5cf0b6bb5c24b04faf1b26" translate="yes" xml:space="preserve">
          <source>Quandl</source>
          <target state="translated">Quandl</target>
        </trans-unit>
        <trans-unit id="70d8972dad900e8e582b962cceb8a0d3a1d75f98" translate="yes" xml:space="preserve">
          <source>Quandl API for Python wraps the Quandl REST API to return Pandas DataFrames with timeseries indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a930d51ff773254251704dc4c1467f1968347ac" translate="yes" xml:space="preserve">
          <source>Quantile of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3374411c383c97a5040863f6ec4c9b0e8318aba5" translate="yes" xml:space="preserve">
          <source>Quantile to compute. 0 &amp;lt;= quantile &amp;lt;= 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8e6264a72808eae4c61071fcd1c081d21587a5" translate="yes" xml:space="preserve">
          <source>Quantile-based discretization function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e6648ea21f538a60e8d3128af751c0837db304" translate="yes" xml:space="preserve">
          <source>Quantile-based discretization function. Discretize variable into equal-sized buckets based on rank or based on sample quantiles. For example 1000 values for 10 quantiles would produce a Categorical object indicating quantile membership for each data point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d37204be259c80d359d0c86a450d0816a1a0834" translate="yes" xml:space="preserve">
          <source>Quarter as a decimal number [01,04]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92daa39eafd91c82f2ac53ea17cccc90ed2ecce" translate="yes" xml:space="preserve">
          <source>Quarter representation - doesn&amp;rsquo;t call super.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3665b09c9fe1520ad4cadf7bbab715ba9314ffce" translate="yes" xml:space="preserve">
          <source>QuarterBegin</source>
          <target state="translated">QuarterBegin</target>
        </trans-unit>
        <trans-unit id="982efabb8d97eaef6108641e3f7c9d1e716f499c" translate="yes" xml:space="preserve">
          <source>QuarterBegin.apply()</source>
          <target state="translated">QuarterBegin.apply()</target>
        </trans-unit>
        <trans-unit id="4e998afbfa8bf52f17e7cd34547b95693b3dcde4" translate="yes" xml:space="preserve">
          <source>QuarterBegin.apply_index()</source>
          <target state="translated">QuarterBegin.apply_index()</target>
        </trans-unit>
        <trans-unit id="c66746ce8e50e3bb9ea319a312accb05cad6b59e" translate="yes" xml:space="preserve">
          <source>QuarterBegin.base</source>
          <target state="translated">QuarterBegin.base</target>
        </trans-unit>
        <trans-unit id="28d72bc3fba11bc86fa8606d67b36a844212be5e" translate="yes" xml:space="preserve">
          <source>QuarterBegin.copy()</source>
          <target state="translated">QuarterBegin.copy()</target>
        </trans-unit>
        <trans-unit id="82c2dae2265013fe83574fcc6179bfcaf27bd27f" translate="yes" xml:space="preserve">
          <source>QuarterBegin.freqstr</source>
          <target state="translated">QuarterBegin.freqstr</target>
        </trans-unit>
        <trans-unit id="8de01409840dfd5a34a45ebd19839618cafc3c30" translate="yes" xml:space="preserve">
          <source>QuarterBegin.isAnchored()</source>
          <target state="translated">QuarterBegin.isAnchored()</target>
        </trans-unit>
        <trans-unit id="f23770c895ace0c95f0ade2c05173ab70dbd93a1" translate="yes" xml:space="preserve">
          <source>QuarterBegin.kwds</source>
          <target state="translated">QuarterBegin.kwds</target>
        </trans-unit>
        <trans-unit id="48b4d41df4829379c81249d618cb763c55d9110b" translate="yes" xml:space="preserve">
          <source>QuarterBegin.name</source>
          <target state="translated">QuarterBegin.name</target>
        </trans-unit>
        <trans-unit id="94348650b452358bc1ab4a30c6e458b472c4c8ea" translate="yes" xml:space="preserve">
          <source>QuarterBegin.nanos</source>
          <target state="translated">QuarterBegin.nanos</target>
        </trans-unit>
        <trans-unit id="f01d2f0047bead155a09c0c9b7cae47d811472b0" translate="yes" xml:space="preserve">
          <source>QuarterBegin.normalize</source>
          <target state="translated">QuarterBegin.normalize</target>
        </trans-unit>
        <trans-unit id="93f8ccff28402cea6840fa219a1ad8f6453574cf" translate="yes" xml:space="preserve">
          <source>QuarterBegin.onOffset()</source>
          <target state="translated">QuarterBegin.onOffset()</target>
        </trans-unit>
        <trans-unit id="e3310e4c42072b98885a53051a76b24e2a5fac79" translate="yes" xml:space="preserve">
          <source>QuarterBegin.rollback()</source>
          <target state="translated">QuarterBegin.rollback()</target>
        </trans-unit>
        <trans-unit id="1625144bdc07e45ec8f0637b340386ef10dd4031" translate="yes" xml:space="preserve">
          <source>QuarterBegin.rollforward()</source>
          <target state="translated">QuarterBegin.rollforward()</target>
        </trans-unit>
        <trans-unit id="b5730af047933d40a16b8d18f95275b2167e26f1" translate="yes" xml:space="preserve">
          <source>QuarterBegin.rule_code</source>
          <target state="translated">QuarterBegin.rule_code</target>
        </trans-unit>
        <trans-unit id="4f1f8d9497e3ea3f8a4c52484b0041ac7a164be5" translate="yes" xml:space="preserve">
          <source>QuarterEnd</source>
          <target state="translated">QuarterEnd</target>
        </trans-unit>
        <trans-unit id="d9f947a4f3d9c0f929e2b304bd12d9b95d27e103" translate="yes" xml:space="preserve">
          <source>QuarterEnd.apply()</source>
          <target state="translated">QuarterEnd.apply()</target>
        </trans-unit>
        <trans-unit id="0bd5252bb9d5c52d6826b2db0e53eb118bfa09b6" translate="yes" xml:space="preserve">
          <source>QuarterEnd.apply_index()</source>
          <target state="translated">QuarterEnd.apply_index()</target>
        </trans-unit>
        <trans-unit id="228c82e90b89e3e75d16f04ff2f080b5185cb821" translate="yes" xml:space="preserve">
          <source>QuarterEnd.base</source>
          <target state="translated">QuarterEnd.base</target>
        </trans-unit>
        <trans-unit id="f3bcb043812b17c7942f9de9abf1b4f9266c565d" translate="yes" xml:space="preserve">
          <source>QuarterEnd.copy()</source>
          <target state="translated">QuarterEnd.copy()</target>
        </trans-unit>
        <trans-unit id="3e1f2ec261aa41e4680378f69fd20170dd4bd388" translate="yes" xml:space="preserve">
          <source>QuarterEnd.freqstr</source>
          <target state="translated">QuarterEnd.freqstr</target>
        </trans-unit>
        <trans-unit id="d6508a12764e7026162a984c656b7832d113fab4" translate="yes" xml:space="preserve">
          <source>QuarterEnd.isAnchored()</source>
          <target state="translated">QuarterEnd.isAnchored()</target>
        </trans-unit>
        <trans-unit id="9627cb63305583b94ba9960747623a712b39e4d0" translate="yes" xml:space="preserve">
          <source>QuarterEnd.kwds</source>
          <target state="translated">QuarterEnd.kwds</target>
        </trans-unit>
        <trans-unit id="17368d76e19ceea0d4284d3dc45b7b6dd250e434" translate="yes" xml:space="preserve">
          <source>QuarterEnd.name</source>
          <target state="translated">QuarterEnd.name</target>
        </trans-unit>
        <trans-unit id="b86757ba5b437e60c376a6558b2b0aa05a563050" translate="yes" xml:space="preserve">
          <source>QuarterEnd.nanos</source>
          <target state="translated">QuarterEnd.nanos</target>
        </trans-unit>
        <trans-unit id="eb09558d765576d59cfaeff6758a350a2f39beb8" translate="yes" xml:space="preserve">
          <source>QuarterEnd.normalize</source>
          <target state="translated">QuarterEnd.normalize</target>
        </trans-unit>
        <trans-unit id="5bf93d4bc165c8c2dba343a5c41341aa833d4621" translate="yes" xml:space="preserve">
          <source>QuarterEnd.onOffset()</source>
          <target state="translated">QuarterEnd.onOffset()</target>
        </trans-unit>
        <trans-unit id="a0543b89c12a0216c1f2636c0b2ffe66765ad2b2" translate="yes" xml:space="preserve">
          <source>QuarterEnd.rollback()</source>
          <target state="translated">QuarterEnd.rollback()</target>
        </trans-unit>
        <trans-unit id="c414ccc0df44649bb8bb4bda891122e9308861c2" translate="yes" xml:space="preserve">
          <source>QuarterEnd.rollforward()</source>
          <target state="translated">QuarterEnd.rollforward()</target>
        </trans-unit>
        <trans-unit id="d4effe6b6b376eb9bbed2d339e4cd7a9a0f35eea" translate="yes" xml:space="preserve">
          <source>QuarterEnd.rule_code</source>
          <target state="translated">QuarterEnd.rule_code</target>
        </trans-unit>
        <trans-unit id="b669a02ceae533380f0adf7d5fd9bf7603a7eb3c" translate="yes" xml:space="preserve">
          <source>QuarterOffset</source>
          <target state="translated">QuarterOffset</target>
        </trans-unit>
        <trans-unit id="32d79babd91374db41fb882db3bb1905c1c59ce1" translate="yes" xml:space="preserve">
          <source>QuarterOffset.apply()</source>
          <target state="translated">QuarterOffset.apply()</target>
        </trans-unit>
        <trans-unit id="b32ed481839ff3ba73cc174d051dd9c24515b17e" translate="yes" xml:space="preserve">
          <source>QuarterOffset.apply_index()</source>
          <target state="translated">QuarterOffset.apply_index()</target>
        </trans-unit>
        <trans-unit id="050c9c1a5b37cf8eb49b1aa6dfe758b1899c0d6a" translate="yes" xml:space="preserve">
          <source>QuarterOffset.base</source>
          <target state="translated">QuarterOffset.base</target>
        </trans-unit>
        <trans-unit id="179a373901d0f86747c123f924ede79e83c98a95" translate="yes" xml:space="preserve">
          <source>QuarterOffset.copy()</source>
          <target state="translated">QuarterOffset.copy()</target>
        </trans-unit>
        <trans-unit id="0226af38fdd2a44dc8eae46a109a4ebe9914934a" translate="yes" xml:space="preserve">
          <source>QuarterOffset.freqstr</source>
          <target state="translated">QuarterOffset.freqstr</target>
        </trans-unit>
        <trans-unit id="0eb9b679cbccb8166504aff20697e1dd7882a86a" translate="yes" xml:space="preserve">
          <source>QuarterOffset.isAnchored()</source>
          <target state="translated">QuarterOffset.isAnchored()</target>
        </trans-unit>
        <trans-unit id="966cd33633f8385f3602c8c96e34938db1031361" translate="yes" xml:space="preserve">
          <source>QuarterOffset.kwds</source>
          <target state="translated">QuarterOffset.kwds</target>
        </trans-unit>
        <trans-unit id="ee8e6e6ae04c17c1cfa26c76fdc794a0d01c8e39" translate="yes" xml:space="preserve">
          <source>QuarterOffset.name</source>
          <target state="translated">QuarterOffset.name</target>
        </trans-unit>
        <trans-unit id="0e39d783025497956253f9ef57d35e9c0a3df6fc" translate="yes" xml:space="preserve">
          <source>QuarterOffset.nanos</source>
          <target state="translated">QuarterOffset.nanos</target>
        </trans-unit>
        <trans-unit id="533a79a8538d3561e8cccbcf6a8d7268da2b2eac" translate="yes" xml:space="preserve">
          <source>QuarterOffset.normalize</source>
          <target state="translated">QuarterOffset.normalize</target>
        </trans-unit>
        <trans-unit id="951f9042834901a13e25a26dc33fbff35800bc46" translate="yes" xml:space="preserve">
          <source>QuarterOffset.onOffset()</source>
          <target state="translated">QuarterOffset.onOffset()</target>
        </trans-unit>
        <trans-unit id="10f6f5053080f6ffb9fabe0159c02f3344f0eed1" translate="yes" xml:space="preserve">
          <source>QuarterOffset.rollback()</source>
          <target state="translated">QuarterOffset.rollback()</target>
        </trans-unit>
        <trans-unit id="b1b0428843331e35cdcbb99f82c02e7dff4e37e0" translate="yes" xml:space="preserve">
          <source>QuarterOffset.rollforward()</source>
          <target state="translated">QuarterOffset.rollforward()</target>
        </trans-unit>
        <trans-unit id="8a39d31a84a7224bcf851762726021c44eae825e" translate="yes" xml:space="preserve">
          <source>QuarterOffset.rule_code</source>
          <target state="translated">QuarterOffset.rule_code</target>
        </trans-unit>
        <trans-unit id="f1f9f020952dff925cdd2a9ae7799c2076df48ca" translate="yes" xml:space="preserve">
          <source>Query config parameters for job processing. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b1cdd775fe87399936655e939eb7aae087379a" translate="yes" xml:space="preserve">
          <source>Query the columns of a DataFrame with a boolean expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a823c3ab6fe9ebb4d980ae8481b8bf1c986c0a" translate="yes" xml:space="preserve">
          <source>Querying, filtering, sampling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afc1995d3563efc07482a5d4722ff9d94f7f5ed" translate="yes" xml:space="preserve">
          <source>Quick reStructuredText reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf2dad97765bc986e6d1b74274d4d486da854e7" translate="yes" xml:space="preserve">
          <source>Quick reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500c016f410cab769c5b56c96f433e18c751ab32" translate="yes" xml:space="preserve">
          <source>Quickly retrieve single value at passed column and index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb5f7051297d05861040bc214941223508beec6" translate="yes" xml:space="preserve">
          <source>Quickly retrieve single value at passed index label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fe73e932e3c8b813ce628b70eb8d2e8eab3ab9" translate="yes" xml:space="preserve">
          <source>Quickly set single value at passed label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="f4f485087187c516dd7d4c4accb5a863d9789d4a" translate="yes" xml:space="preserve">
          <source>R makes it easy to access &lt;code&gt;data.frame&lt;/code&gt; columns by name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828ff806ee2a0c92f88bdafd52de2f465ae29ec8" translate="yes" xml:space="preserve">
          <source>R&amp;rsquo;s shorthand for a subrange of columns (&lt;code&gt;select(df, col1:col3)&lt;/code&gt;) can be approached cleanly in pandas, if you have the list of columns, for example &lt;code&gt;df[cols[1:3]]&lt;/code&gt; or &lt;code&gt;df.drop(cols[1:3])&lt;/code&gt;, but doing this by column name is a bit messy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296060ae07a8cb0c654996534478668d86782b89" translate="yes" xml:space="preserve">
          <source>RadViz</source>
          <target state="translated">RadViz</target>
        </trans-unit>
        <trans-unit id="71c09bde90f307c8b7327726ddb01b65a1426010" translate="yes" xml:space="preserve">
          <source>RadViz allow to project a N-dimensional data set into a 2D space where the influence of each dimension can be interpreted as a balance between the influence of all dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88904714e3ec389682575134c2348e53e9b0165e" translate="yes" xml:space="preserve">
          <source>Raised by &lt;code&gt;pd.read_csv&lt;/code&gt; and &lt;code&gt;pd.read_table&lt;/code&gt; when it is necessary to change parsers, generally from the default &amp;lsquo;c&amp;rsquo; parser to &amp;lsquo;python&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05e14f9f00eb909fcaffe4ea4ed5300c987f229" translate="yes" xml:space="preserve">
          <source>Raised for a dtype incompatibility. This can happen whenever &lt;code&gt;read_csv&lt;/code&gt; or &lt;code&gt;read_table&lt;/code&gt; encounter non-uniform dtypes in a column(s) of a given CSV file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f428c365c67487cb59554c8352fab9abd129f3" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;TypeError&lt;/code&gt; because the categories are ordered and not identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930c165251c160359ecfe812376626cc736d6f09" translate="yes" xml:space="preserve">
          <source>Raises a ValueError if &lt;code&gt;column&lt;/code&gt; is already contained in the DataFrame, unless &lt;code&gt;allow_duplicates&lt;/code&gt; is set to True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0eb5268f437200e3ca42ec2d178bdfb80e8e252" translate="yes" xml:space="preserve">
          <source>Raises:</source>
          <target state="translated">Raises:</target>
        </trans-unit>
        <trans-unit id="75d5783c7959566139a1b36808eefccca7b59614" translate="yes" xml:space="preserve">
          <source>RangeIndex</source>
          <target state="translated">RangeIndex</target>
        </trans-unit>
        <trans-unit id="84f9191fbfcc701dfd85e1301bfbd934499d1b2a" translate="yes" xml:space="preserve">
          <source>RangeIndex is a memory-saving special case of Int64Index limited to representing monotonic ranges. Using RangeIndex may in some instances improve computing speed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1e285a60bdbb4aee4d6c8ca39d23c349c721bb" translate="yes" xml:space="preserve">
          <source>RangeIndex.from_range()</source>
          <target state="translated">RangeIndex.from_range()</target>
        </trans-unit>
        <trans-unit id="87d4988b27d016dab1b398c30f2ccfbdd0841c81" translate="yes" xml:space="preserve">
          <source>RangeIndex.start</source>
          <target state="translated">RangeIndex.start</target>
        </trans-unit>
        <trans-unit id="88b0bee52ed199d4c28c1c1f7d5a30058944970e" translate="yes" xml:space="preserve">
          <source>RangeIndex.step</source>
          <target state="translated">RangeIndex.step</target>
        </trans-unit>
        <trans-unit id="69ad6fa3fd9dda130818198bb9832c6633d675b2" translate="yes" xml:space="preserve">
          <source>RangeIndex.stop</source>
          <target state="translated">RangeIndex.stop</target>
        </trans-unit>
        <trans-unit id="18b523e0621e64ba2036dbdde64dbc421de4d9f6" translate="yes" xml:space="preserve">
          <source>RangeIndex[source]</source>
          <target state="translated">RangeIndex[source]</target>
        </trans-unit>
        <trans-unit id="ea6fa2e32ebcccdb8106834c9fccc06d5d54d4e7" translate="yes" xml:space="preserve">
          <source>Rank of values within each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8dd5be905d149762e688fd387f887322e2720b" translate="yes" xml:space="preserve">
          <source>Rather than count values, group them into half-open bins, a convenience for &lt;code&gt;pd.cut&lt;/code&gt;, only works with numeric data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a4c571608d952459f39297295a7209cd3cdd76" translate="yes" xml:space="preserve">
          <source>Ratio of non-sparse points to total (dense) data points represented in the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb23efbb267893b699389ae74854547979d265bd" translate="yes" xml:space="preserve">
          <source>Ray</source>
          <target state="translated">Ray</target>
        </trans-unit>
        <trans-unit id="83f01da646c5bb4822ebfe2d66b9b88bcc321809" translate="yes" xml:space="preserve">
          <source>Read CSV (comma-separated) file into DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f35eec2327a784312abc9ec4093b1b501451290" translate="yes" xml:space="preserve">
          <source>Read CSV (comma-separated) file into a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45707c8011376f509554ba7d73cef40b22890227" translate="yes" xml:space="preserve">
          <source>Read HDF5 file into a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebd25e8488f7c7598e6b807c1a5fa0f8567cfaa" translate="yes" xml:space="preserve">
          <source>Read HTML table into a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1932f25358cc497f27f944d26e1d39a3c43685" translate="yes" xml:space="preserve">
          <source>Read HTML tables into a &lt;code&gt;list&lt;/code&gt; of &lt;code&gt;DataFrame&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69864ed70c4e72b0ee86941d508f66f8d67290d0" translate="yes" xml:space="preserve">
          <source>Read SAS files stored as either XPORT or SAS7BDAT format files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d76ac769efc642a0ebdc87db64cd88d6ed39515" translate="yes" xml:space="preserve">
          <source>Read SQL database table into a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c75abb032e2e20afab0d17609ef5cf69b8a263" translate="yes" xml:space="preserve">
          <source>Read SQL query into a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12566c3002ddb7efd6e615cfd89c295726e15b3c" translate="yes" xml:space="preserve">
          <source>Read SQL query or database table into a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace933052483e85236e81afd30ac359065ef34f4" translate="yes" xml:space="preserve">
          <source>Read Stata file into DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65e333cdeea6772730021c7de523883a84293e3" translate="yes" xml:space="preserve">
          <source>Read a DataFrame from Google BigQuery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baceb563f649487b0ec57a64f04381eec5d0cd21" translate="yes" xml:space="preserve">
          <source>Read a DataFrame from a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cff13bafb0a1b1b898693e0e29735feb7309fd" translate="yes" xml:space="preserve">
          <source>Read a Stata dta file in 10,000 line chunks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51ab9d09275223dd8579b61ae5a72eb788c5c3e" translate="yes" xml:space="preserve">
          <source>Read a Stata dta file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf4db1ec98a543ff7b609b2420f0bed4dcfc688" translate="yes" xml:space="preserve">
          <source>Read a comma-separated values (csv) file into DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4382fb2fb6a5570ad88ff7131626fd25cb7606a1" translate="yes" xml:space="preserve">
          <source>Read a parquet file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07b17e27429aa577645c6464cec6882dc89bf41" translate="yes" xml:space="preserve">
          <source>Read a table of fixed-width formatted lines into DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6621e74a9f6ec60ac407926283708dddbc5f3f" translate="yes" xml:space="preserve">
          <source>Read an Excel file into a pandas DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a8b6108a09b0e606a46c3e6570b2658eae9ee4" translate="yes" xml:space="preserve">
          <source>Read file &lt;code&gt;chunksize&lt;/code&gt; lines at a time, returns iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646c1c9b8bfc53fbee6e29104370343785b0bad7" translate="yes" xml:space="preserve">
          <source>Read from HDF file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63018ad1e0cfa5fa4adc0580814716804153d454" translate="yes" xml:space="preserve">
          <source>Read from the store, close it if we opened it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35de0d2e7d124b6ee5d90439bfe059c2398f9b0a" translate="yes" xml:space="preserve">
          <source>Read general delimited file into DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a61261c0b00c785bc8c5a3be77d91b806e8d7e8" translate="yes" xml:space="preserve">
          <source>Read general delimited file into a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fa9f3d16133356205d7cc1be6c6ffd5684f136" translate="yes" xml:space="preserve">
          <source>Read more in the &lt;a href=&quot;http://numba.pydata.org/&quot;&gt;Numba docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee247243e95a8689a1cd53daeae07072df38932" translate="yes" xml:space="preserve">
          <source>Read observations from Stata file, converting them into a dataframe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0af8aecd2f306dd50d65501f98f5bc6d3c4c66" translate="yes" xml:space="preserve">
          <source>Read text from clipboard and pass to read_csv.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe64d7d09bba3a30888c8dde5fdd1556677a8f6" translate="yes" xml:space="preserve">
          <source>Read text from clipboard and pass to read_csv. See read_csv for the full argument list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0127c1264090ef10f85b629f09499086bdc6a962" translate="yes" xml:space="preserve">
          <source>Read text from clipboard and pass to read_table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55175e69e03608831c8a15565cfabce2d812b1f9" translate="yes" xml:space="preserve">
          <source>Read the file as a json object per line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9152553e10658fba7d1a324930f18aea2411d711" translate="yes" xml:space="preserve">
          <source>Read value labels and convert columns to Categorical/Factor variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5bbe8292ed1b69e0f95e5bdaa035569a295fd7" translate="yes" xml:space="preserve">
          <source>Reader</source>
          <target state="translated">Reader</target>
        </trans-unit>
        <trans-unit id="ced066586ffa5e6e3755df96e31fa99c0d9b6847" translate="yes" xml:space="preserve">
          <source>Reading / writing for xlsx files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2600353af1869d9e164a82e8a681c58b33fd56" translate="yes" xml:space="preserve">
          <source>Reading external data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f25379e9755e053c70ecc8dc2443111b6fbe73" translate="yes" xml:space="preserve">
          <source>Reading from HDF file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88799634c11e6cc80231fb917747811050606d1d" translate="yes" xml:space="preserve">
          <source>Rearrange index levels using input order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae9af31ae0d0b9d85dc0d21d4f0148e272d0afd" translate="yes" xml:space="preserve">
          <source>Rearrange index levels using input order. May not drop or duplicate levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d771fbda00418350a1e124cee5eb404ada9954a5" translate="yes" xml:space="preserve">
          <source>Rearrange levels using input order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a257a2cfb259ef4a6e7071b0dff8e77b5d23210c" translate="yes" xml:space="preserve">
          <source>Rearrange levels using input order. May not drop or duplicate levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6030b00e9cfe45e446949b1cfa0858c3f076c4" translate="yes" xml:space="preserve">
          <source>Recommended alternative to this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2b55c44410c5fecbbff6de2b22b9f6bbd2ec5b" translate="yes" xml:space="preserve">
          <source>Recommended dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075d10a4fd1e6ff913b7082591e459176a7109e3" translate="yes" xml:space="preserve">
          <source>Reconstruct an ExtensionArray after factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a2b49707a20955992a96f62fe7fb4096d753ea" translate="yes" xml:space="preserve">
          <source>Reduce the dimensionality of the return type if possible, otherwise return a consistent type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e6433c5b1cb63e0c228d3d31284ceeb2186ec4" translate="yes" xml:space="preserve">
          <source>Reducing sum for DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e877e4c8f65be9f1e4b983817e240bf812d03a" translate="yes" xml:space="preserve">
          <source>Reducing sum for Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f317d001ccc49980481cff37ee7c58036a4586" translate="yes" xml:space="preserve">
          <source>Reductions</source>
          <target state="translated">Reductions</target>
        </trans-unit>
        <trans-unit id="4e8c89c3fca571706d72d64106b38fc7b6c31865" translate="yes" xml:space="preserve">
          <source>Redundant for application on Series, but index can be used instead of labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1be60d14060649a1bf386e770d6698f25d23ef6" translate="yes" xml:space="preserve">
          <source>Redundant for application on Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99368ae22f642244ec0b0201bb120bd8c7435060" translate="yes" xml:space="preserve">
          <source>Reference SciPy method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42db387425b360d03dbe85e4a7139c4ae0dfc5d3" translate="yes" xml:space="preserve">
          <source>Reference to the underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="66dff7f741f24237c60e057348dcf2e76f5d5ef7" translate="yes" xml:space="preserve">
          <source>Reflect the DataFrame over its main diagonal by writing rows as columns and vice-versa. The property &lt;a href=&quot;#pandas.DataFrame.T&quot;&gt;&lt;code&gt;T&lt;/code&gt;&lt;/a&gt; is an accessor to the method &lt;a href=&quot;pandas.dataframe.transpose#pandas.DataFrame.transpose&quot;&gt;&lt;code&gt;transpose()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c72e76ba1aef1b6c2c79a779d3157eeb466047" translate="yes" xml:space="preserve">
          <source>Reflect the DataFrame over its main diagonal by writing rows as columns and vice-versa. The property &lt;a href=&quot;pandas.dataframe.t#pandas.DataFrame.T&quot;&gt;&lt;code&gt;T&lt;/code&gt;&lt;/a&gt; is an accessor to the method &lt;a href=&quot;#pandas.DataFrame.transpose&quot;&gt;&lt;code&gt;transpose()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11e781c0d9d7a7803de99bc4c3b1ca5fd1bec00" translate="yes" xml:space="preserve">
          <source>Regardless of the approach, you may want to set &lt;code&gt;__array_priority__&lt;/code&gt; if you want your implementation to be called when involved in binary operations with NumPy arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c89b667ae8f5540eb59063d251987d9019653a4" translate="yes" xml:space="preserve">
          <source>Regex substitution is performed under the hood with &lt;code&gt;re.sub&lt;/code&gt;. The rules for substitution for &lt;code&gt;re.sub&lt;/code&gt; are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f422bc5d5a46beb099fb2cd85c27df91c2e5388" translate="yes" xml:space="preserve">
          <source>Regexp pattern. All matching keys will have their description displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8f2c20a670dc03296da4f342def35171ef782e" translate="yes" xml:space="preserve">
          <source>Regexp which should match a single option. Note: partial matches are supported for convenience, but unless you use the full option name (e.g. x.y.z.option_name), your code may break in future versions if new options with similar names are introduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5958a87aef60a22e14e465fff150d1a1c3e87a80" translate="yes" xml:space="preserve">
          <source>Register Pandas Formatters and Converters with matplotlib</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c899d326ad81fe59d971423b07d877c67df91e" translate="yes" xml:space="preserve">
          <source>Register a custom accessor on DataFrame objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5efa6de43520e33baf26878e68b63b18c8b241" translate="yes" xml:space="preserve">
          <source>Register a custom accessor on Index objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949260ff8148d4a5cdff71f23d37ef9990bf2548" translate="yes" xml:space="preserve">
          <source>Register a custom accessor on Series objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b30433313ed868171f64e7f540858be480a209" translate="yes" xml:space="preserve">
          <source>Register an ExtensionType with pandas as class decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e891a4a9c712572dd9ae1e2b8ccc07a08ddc1d" translate="yes" xml:space="preserve">
          <source>Registering custom accessors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cfc56d37856960e030a57dc2560048bc4ca6a1b" translate="yes" xml:space="preserve">
          <source>Regular expression pattern with capturing groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe7177e5d75ec8c91df1c8be22d234143131f04" translate="yes" xml:space="preserve">
          <source>Regular expressions are supported too. For instance, the search for all the strings ending with the word &amp;lsquo;on&amp;rsquo; is shown next:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a1f9b57a7689d50c5043df8cef83e79b87d02b" translate="yes" xml:space="preserve">
          <source>Regular expressions will only substitute on strings, meaning you cannot provide, for example, a regular expression matching floating point numbers and expect the columns in your frame that have a numeric dtype to be matched. However, if those floating point numbers &lt;em&gt;are&lt;/em&gt; strings, then you can do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9790b276ed46e99cd466bc5606026a5caeffe125" translate="yes" xml:space="preserve">
          <source>Regular table captions can be added in a few ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630a2cb4f37c36d9f153d4971d4c9d94a6576325" translate="yes" xml:space="preserve">
          <source>Reindexing / selection / label manipulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e521d0b782352a92f77767944b6dcf7f44f7339" translate="yes" xml:space="preserve">
          <source>Reindexing and altering labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b13960201ea49bd6f583ae27456a5e299584ca" translate="yes" xml:space="preserve">
          <source>Related method on Index, indicating duplicate Index values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3612560bb7712c0c0bea28361c37c065099dbb96" translate="yes" xml:space="preserve">
          <source>Related method on Series, indicating duplicate Series values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea4af908fe06688dd3fc02035189b08293c5074" translate="yes" xml:space="preserve">
          <source>Release Notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4edf83b2839daa388e6385a56b0a62656624cbe1" translate="yes" xml:space="preserve">
          <source>Remember to escape special characters when explicitly using regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adad1c07015de7d5676aa1606510878c461faa65" translate="yes" xml:space="preserve">
          <source>Remove categories which are not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28040be798e2e8951a8b146a96a34dc7c4e3ac3f" translate="yes" xml:space="preserve">
          <source>Remove duplicate values from Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b53f83f1b6ca4f007b8e7e9ea81f06cb7228868" translate="yes" xml:space="preserve">
          <source>Remove duplicate values from Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6f6109c8466bf9b843ec562de7fe0f2550bf21" translate="yes" xml:space="preserve">
          <source>Remove elements of a Series based on specifying the index labels. When using a multi-index, labels on different levels can be removed by specifying the level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88dadc9d2b2de911641b2529baf08e627e7aea87" translate="yes" xml:space="preserve">
          <source>Remove leading and trailing characters in Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df9d13ec884393615fbb11efdff4de45c699214" translate="yes" xml:space="preserve">
          <source>Remove leading and trailing characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c4f1ac4ed447f136db561b34368e8524c69c8e" translate="yes" xml:space="preserve">
          <source>Remove leading characters in Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070d218a074043fb2a67abae589e8edd54373005" translate="yes" xml:space="preserve">
          <source>Remove missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2c03444bbb20749f0e173e5eec1ca0b07fded6" translate="yes" xml:space="preserve">
          <source>Remove pandas&amp;rsquo; formatters and converters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b56531de6b340d4d14dc2b038174e544db4d585" translate="yes" xml:space="preserve">
          <source>Remove row labels or move them to new columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88178a50705104b0b2836d14a648e4189abcd273" translate="yes" xml:space="preserve">
          <source>Remove rows or columns by specifying label names and corresponding axis, or by specifying directly index or column names. When using a multi-index, labels on different levels can be removed by specifying the level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d78245b9248ea3a523242847f695d4ba459b99" translate="yes" xml:space="preserve">
          <source>Remove the specified categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eaa003816b8b66d373f425363040f4c7a2fdf26" translate="yes" xml:space="preserve">
          <source>Remove trailing characters in Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b22e9a92752b8cc6f1ee92cb90839f678494f9" translate="yes" xml:space="preserve">
          <source>Removes all case distinctions in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a77a842e7b98f8d5af028c3060d4688205f45d0" translate="yes" xml:space="preserve">
          <source>Removes the custom converters added by &lt;code&gt;register()&lt;/code&gt;. This attempts to set the state of the registry back to the state before pandas registered its own units. Converters for pandas&amp;rsquo; own types like Timestamp and Period are removed completely. Converters for types pandas overwrites, like &lt;code&gt;datetime.datetime&lt;/code&gt;, are restored to their original value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65ebf0469fed5b079d73ba367b8b693caee76e4" translate="yes" xml:space="preserve">
          <source>Rename categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af1070d204c413e85e14e1851d014545fc3ef04" translate="yes" xml:space="preserve">
          <source>Rename columns using a mapping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168644ae4efb4752e23331bada410c4434a03bcd" translate="yes" xml:space="preserve">
          <source>Rename index using a mapping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bcf9e8a4db63cd205cd41eebbb1158c44e122f" translate="yes" xml:space="preserve">
          <source>Render a DataFrame as an HTML table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad3919667a6119eab3aacaa18e8705c60fcac54" translate="yes" xml:space="preserve">
          <source>Render a DataFrame to a console-friendly tabular output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a867ed8ed7fb3eaa3192813afe10a0a29725747" translate="yes" xml:space="preserve">
          <source>Render a string representation of the Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6e8969a6706f302ed6637e764a9efe6745a5a0" translate="yes" xml:space="preserve">
          <source>Render a string representation of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de2dbd2674e4ea71becfaeedb8c28e215e64c9c" translate="yes" xml:space="preserve">
          <source>Render an object to a LaTeX tabular environment table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2a08a4b518de7ef58f217534e46bea8004331d" translate="yes" xml:space="preserve">
          <source>Render an object to a tabular environment table. You can splice this into a LaTeX document. Requires usepackage{booktabs}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c209120b4246893417b8524f4e9747eaad247c" translate="yes" xml:space="preserve">
          <source>Render the built up styles to HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dceb6fdba092d2aea5d5fe88c764fef28f3a8345" translate="yes" xml:space="preserve">
          <source>Reorder categories as specified in new_categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8896b90b62f0039f0f6ea25bb64999eacab52d65" translate="yes" xml:space="preserve">
          <source>Repeat elements of a ExtensionArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa22f45e35c62c226b36ef4a2e81d4e09f8e7de" translate="yes" xml:space="preserve">
          <source>Repeat elements of a Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75e3d48cc141fe78090b219df5f9a1f70f19476" translate="yes" xml:space="preserve">
          <source>Repeat elements of a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328623486cab31ba95f7d69ea7bdf9535758cca2" translate="yes" xml:space="preserve">
          <source>Replace a positional slice of a string with another value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff445f28b72c81893447945cc41583b45c53efd4" translate="yes" xml:space="preserve">
          <source>Replace a slice with a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8033a10082aba9bc8ab8301cc1f4cafc31c343" translate="yes" xml:space="preserve">
          <source>Replace all NaN elements in column &amp;lsquo;A&amp;rsquo;, &amp;lsquo;B&amp;rsquo;, &amp;lsquo;C&amp;rsquo;, and &amp;lsquo;D&amp;rsquo;, with 0, 1, 2, and 3 respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0761da621b2e6baa2baebcfb26102d3331a54bc8" translate="yes" xml:space="preserve">
          <source>Replace all NaN elements with 0s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10ae09914d207de0423adc64c3e16773684708f" translate="yes" xml:space="preserve">
          <source>Replace missing values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1ab57bb2c2afe66df449ef211bfb271f1abb48" translate="yes" xml:space="preserve">
          <source>Replace occurrences of pattern/regex in the Series/Index with some other string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8426d81c2f99a158589c66bac7f70259a1833e76" translate="yes" xml:space="preserve">
          <source>Replace occurrences of pattern/regex in the Series/Index with some other string. Equivalent to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.replace&quot;&gt;&lt;code&gt;str.replace()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3/library/re.html#re.sub&quot;&gt;&lt;code&gt;re.sub()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d0dbcd2ce36a924f8d5424f0d8baca55f21b5e" translate="yes" xml:space="preserve">
          <source>Replace values based on boolean condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508011d4cc2607d6ddd1f4dd5c1f35b21e7da623" translate="yes" xml:space="preserve">
          <source>Replace values given in &lt;code&gt;to_replace&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c2c5d0ca49684bb3fb77ee8004929e6f0fd206" translate="yes" xml:space="preserve">
          <source>Replace values where the condition is False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97e901740e9563d31be25b146b5552d2734ebd1" translate="yes" xml:space="preserve">
          <source>Replace values where the condition is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b10ed2807a593cdd894fa6766537eebcf89d14" translate="yes" xml:space="preserve">
          <source>Replacement string or a callable. The callable is passed the regex match object and must return a replacement string to be used. See &lt;a href=&quot;https://docs.python.org/3/library/re.html#re.sub&quot;&gt;&lt;code&gt;re.sub()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff64b5ebdf6688c7ec87755a84a992487124d79f" translate="yes" xml:space="preserve">
          <source>Replacing generic values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7719f3fe6ac415b2a60923037f6e15ad50c799" translate="yes" xml:space="preserve">
          <source>Represent a categorical variable in classic R / S-plus fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37eedc70baa0fef929ad8e2ed859292741dc636" translate="yes" xml:space="preserve">
          <source>Representation for infinity (there is no native representation for infinity in Excel).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdd5536d1b75a8b2ff2c130eb5f140d89fdc72e" translate="yes" xml:space="preserve">
          <source>Representation of a kernel-density estimate using Gaussian kernels. This is the function used internally to estimate the PDF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ca3df8c84e36754c83c53f6bdeba63523d3787" translate="yes" xml:space="preserve">
          <source>Representation that is inserted for all missing values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f027e8328ccf97931f4b29c90abee0946174658f" translate="yes" xml:space="preserve">
          <source>Representing out-of-bounds spans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5938df8e5b770e016fe3525197f196ac5f14c09" translate="yes" xml:space="preserve">
          <source>Represents a duration between two dates or times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e824b5c47043236cf40fab7c9e2c6940ea6431" translate="yes" xml:space="preserve">
          <source>Represents a duration, the difference between two dates or times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca62c2ff95d69c20f74c75c873e89deaa5d43d9" translate="yes" xml:space="preserve">
          <source>Represents a period of time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a6782259b7ce19d8fe43f5d709eceea6bffe3e" translate="yes" xml:space="preserve">
          <source>Represents a period of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2856923fc32d4273621c0633f5989bfb9b6e881d" translate="yes" xml:space="preserve">
          <source>Require that many non-NA values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="47702c9ff5c270ea8878d8032d0c3f5c1da77cf1" translate="yes" xml:space="preserve">
          <source>Requirements for your platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea3e1d946768c83d96bf8665e6b72de8c38f1c6" translate="yes" xml:space="preserve">
          <source>Requires matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c9f4df5f6ce6a7186183ff47bcd3c194294acd" translate="yes" xml:space="preserve">
          <source>Resample a DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f71a40ad535b8b81e3790df5871511c2fecaee" translate="yes" xml:space="preserve">
          <source>Resample a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a08cb52ab28635865a15eb81caa2499d3d48e9e" translate="yes" xml:space="preserve">
          <source>Resample a year by quarter using &amp;lsquo;start&amp;rsquo; &lt;code&gt;convention&lt;/code&gt;. Values are assigned to the first quarter of the period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb90660adb2aea03eb6ff7bcfdf9eb2cec6bb96" translate="yes" xml:space="preserve">
          <source>Resample by month. Values are assigned to the month of the period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c04fc88263b588de23b4369c73c8cd3d72d16a" translate="yes" xml:space="preserve">
          <source>Resample by using the nearest value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4c0d398045ac5a76de6713cf5d01eb964304b2" translate="yes" xml:space="preserve">
          <source>Resample quarters by month using &amp;lsquo;end&amp;rsquo; &lt;code&gt;convention&lt;/code&gt;. Values are assigned to the last month of the period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b90ca0cdb77346cc84d264078ad108d1bbcd79" translate="yes" xml:space="preserve">
          <source>Resample time-series data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99aa2e60afc8bfb557372540c1c0aeb55387efe" translate="yes" xml:space="preserve">
          <source>Resampler iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa941d878de71a37f2bd31cfc4bbb598d02ee70a" translate="yes" xml:space="preserve">
          <source>Resampler object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2087fd8bb5718274fa72461b7c142c5059c4610" translate="yes" xml:space="preserve">
          <source>Resampler objects are returned by resample calls: &lt;a href=&quot;api/pandas.dataframe.resample#pandas.DataFrame.resample&quot;&gt;&lt;code&gt;pandas.DataFrame.resample()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api/pandas.series.resample#pandas.Series.resample&quot;&gt;&lt;code&gt;pandas.Series.resample()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db87b858b309e8806cb35ee1803c85642abd44ff" translate="yes" xml:space="preserve">
          <source>Resampler.__iter__()</source>
          <target state="translated">Resampler.__iter__()</target>
        </trans-unit>
        <trans-unit id="3ca6131b8bbac88fc9e967297000b23ec0d78e2e" translate="yes" xml:space="preserve">
          <source>Resampler.aggregate()</source>
          <target state="translated">Resampler.aggregate()</target>
        </trans-unit>
        <trans-unit id="5fefe4b5f52cc9373fe966267c7d67f237db2a06" translate="yes" xml:space="preserve">
          <source>Resampler.apply()</source>
          <target state="translated">Resampler.apply()</target>
        </trans-unit>
        <trans-unit id="04ac45c2365269d3c97b2a2df309bbb90350894f" translate="yes" xml:space="preserve">
          <source>Resampler.asfreq()</source>
          <target state="translated">Resampler.asfreq()</target>
        </trans-unit>
        <trans-unit id="13f6e651b94d0a79eae4f093a31ab234d1912a9f" translate="yes" xml:space="preserve">
          <source>Resampler.backfill()</source>
          <target state="translated">Resampler.backfill()</target>
        </trans-unit>
        <trans-unit id="169189ff2d4e477e49c6102d8c5d4a3f26bacc33" translate="yes" xml:space="preserve">
          <source>Resampler.bfill()</source>
          <target state="translated">Resampler.bfill()</target>
        </trans-unit>
        <trans-unit id="c2cbbc1e4439ecaa510e5da31ab1149537cde5b7" translate="yes" xml:space="preserve">
          <source>Resampler.count()</source>
          <target state="translated">Resampler.count()</target>
        </trans-unit>
        <trans-unit id="5ca457d948e064a90b48ea2004db805d2e5d0fce" translate="yes" xml:space="preserve">
          <source>Resampler.ffill()</source>
          <target state="translated">Resampler.ffill()</target>
        </trans-unit>
        <trans-unit id="93d0d0eba966341a18b514a62a50e850fc20ca22" translate="yes" xml:space="preserve">
          <source>Resampler.fillna()</source>
          <target state="translated">Resampler.fillna()</target>
        </trans-unit>
        <trans-unit id="5b7916429ab3e3c6e4e4d87bc5e440acccfebeb1" translate="yes" xml:space="preserve">
          <source>Resampler.first()</source>
          <target state="translated">Resampler.first()</target>
        </trans-unit>
        <trans-unit id="e60fa3b4918d3bbd1ccad87bb8fb4a6a2132d637" translate="yes" xml:space="preserve">
          <source>Resampler.get_group()</source>
          <target state="translated">Resampler.get_group()</target>
        </trans-unit>
        <trans-unit id="33745a42c4fe6ed386b5f115e281248b79f845ed" translate="yes" xml:space="preserve">
          <source>Resampler.groups</source>
          <target state="translated">Resampler.groups</target>
        </trans-unit>
        <trans-unit id="b58476db5b74731dad9ede7d3d8f365bbc8864ba" translate="yes" xml:space="preserve">
          <source>Resampler.indices</source>
          <target state="translated">Resampler.indices</target>
        </trans-unit>
        <trans-unit id="4f2f1d6f372d832f3b506254f846154cc20675e1" translate="yes" xml:space="preserve">
          <source>Resampler.interpolate()</source>
          <target state="translated">Resampler.interpolate()</target>
        </trans-unit>
        <trans-unit id="e1a80e99ea0834e4e35989586256c6fc155cb721" translate="yes" xml:space="preserve">
          <source>Resampler.last()</source>
          <target state="translated">Resampler.last()</target>
        </trans-unit>
        <trans-unit id="aeb23b8ec3673c7deb4fb18ffbebe03e6b6865f9" translate="yes" xml:space="preserve">
          <source>Resampler.max()</source>
          <target state="translated">Resampler.max()</target>
        </trans-unit>
        <trans-unit id="ba78554c2a71ca5a34890f68499ce2c28b2ae2b4" translate="yes" xml:space="preserve">
          <source>Resampler.mean()</source>
          <target state="translated">Resampler.mean()</target>
        </trans-unit>
        <trans-unit id="1c513a245f24be70ca57c96ecb6cf0cb578db58c" translate="yes" xml:space="preserve">
          <source>Resampler.median()</source>
          <target state="translated">Resampler.median()</target>
        </trans-unit>
        <trans-unit id="1033947c782b87b9fa1fa7c783d1ed0fa3ca5edd" translate="yes" xml:space="preserve">
          <source>Resampler.min()</source>
          <target state="translated">Resampler.min()</target>
        </trans-unit>
        <trans-unit id="556b0e8fdb7f23b79b5b5218a6fde4734c809e21" translate="yes" xml:space="preserve">
          <source>Resampler.nearest()</source>
          <target state="translated">Resampler.nearest()</target>
        </trans-unit>
        <trans-unit id="d63d133220e0ef49a15b890a978ac2870e62d116" translate="yes" xml:space="preserve">
          <source>Resampler.nunique()</source>
          <target state="translated">Resampler.nunique()</target>
        </trans-unit>
        <trans-unit id="89afdf519a0b3ae62c92367658778ce9a3b8b65c" translate="yes" xml:space="preserve">
          <source>Resampler.ohlc()</source>
          <target state="translated">Resampler.ohlc()</target>
        </trans-unit>
        <trans-unit id="392962b2ef1ca583ab84bead5b79a464212b958f" translate="yes" xml:space="preserve">
          <source>Resampler.pad()</source>
          <target state="translated">Resampler.pad()</target>
        </trans-unit>
        <trans-unit id="53ce85e0d9d73d6ee11723cbbe229f86b2deb255" translate="yes" xml:space="preserve">
          <source>Resampler.pipe()</source>
          <target state="translated">Resampler.pipe()</target>
        </trans-unit>
        <trans-unit id="dd66fee0cfb9df493e339338fa164f9e56f2023f" translate="yes" xml:space="preserve">
          <source>Resampler.prod()</source>
          <target state="translated">Resampler.prod()</target>
        </trans-unit>
        <trans-unit id="7a45a792537244a3eb673aadcddd4017f2f8f894" translate="yes" xml:space="preserve">
          <source>Resampler.quantile()</source>
          <target state="translated">Resampler.quantile()</target>
        </trans-unit>
        <trans-unit id="93d5d18657dafd76a1f245adb3131c79a65ae636" translate="yes" xml:space="preserve">
          <source>Resampler.sem()</source>
          <target state="translated">Resampler.sem()</target>
        </trans-unit>
        <trans-unit id="0b279c5313e84b15dbc63dd30e08c89d47406022" translate="yes" xml:space="preserve">
          <source>Resampler.size()</source>
          <target state="translated">Resampler.size()</target>
        </trans-unit>
        <trans-unit id="804ad0a3893d0b0177acb9987bf99d1607e38b1d" translate="yes" xml:space="preserve">
          <source>Resampler.std()</source>
          <target state="translated">Resampler.std()</target>
        </trans-unit>
        <trans-unit id="31ac20bd54e33957dbc136b6195587c654413598" translate="yes" xml:space="preserve">
          <source>Resampler.sum()</source>
          <target state="translated">Resampler.sum()</target>
        </trans-unit>
        <trans-unit id="3552149786a25b4eed3fe3722d4b5f875371ba42" translate="yes" xml:space="preserve">
          <source>Resampler.transform()</source>
          <target state="translated">Resampler.transform()</target>
        </trans-unit>
        <trans-unit id="c422a10f95e1ef70a704b44a83c38eda318d059d" translate="yes" xml:space="preserve">
          <source>Resampler.var()</source>
          <target state="translated">Resampler.var()</target>
        </trans-unit>
        <trans-unit id="1bf1aa8f2887b625d22d501dbd248dd757431d5b" translate="yes" xml:space="preserve">
          <source>Resampling</source>
          <target state="translated">Resampling</target>
        </trans-unit>
        <trans-unit id="fdbbc4fd9fbe4cf33cd13104cb69735d1f145473" translate="yes" xml:space="preserve">
          <source>Resampling a DataFrame that has missing values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb52ca3d75a68dab4b2f41ab28071f6a3ece884" translate="yes" xml:space="preserve">
          <source>Resampling a Series:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8b9f1971325fb7b975d9141fe03940d9e2f611" translate="yes" xml:space="preserve">
          <source>Reset one or more options to their default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64331126f325a2459e00534ae87a7d31311e895b" translate="yes" xml:space="preserve">
          <source>Reset the index of the DataFrame, and use the default one instead. If the DataFrame has a MultiIndex, this method can remove one or more levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5784f8e5a48e912a3a8e2da73a55b09ce4b25f76" translate="yes" xml:space="preserve">
          <source>Reset the index, or a level of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef256cbc0b31c662c9e9fd3b3e697703c054e8e" translate="yes" xml:space="preserve">
          <source>Reset the styler, removing any previously applied styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2c1bbb94eefbfbc59b607254c87ee8df79e4e5" translate="yes" xml:space="preserve">
          <source>Reset the styler, removing any previously applied styles. Returns None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584fc9a075213fcdc315beb6673c4161ea3276fa" translate="yes" xml:space="preserve">
          <source>Reshape data (produce a &amp;ldquo;pivot&amp;rdquo; table) based on column values. Uses unique values from specified &lt;code&gt;index&lt;/code&gt; / &lt;code&gt;columns&lt;/code&gt; to form axes of the resulting DataFrame. This function does not support data aggregation, multiple values will result in a MultiIndex in the columns. See the &lt;a href=&quot;../../user_guide/reshaping#reshaping&quot;&gt;User Guide&lt;/a&gt; for more on reshaping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54616de2f88202fb4984d6702b6c5da8b9f7c49f" translate="yes" xml:space="preserve">
          <source>Reshape data based on column values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873930d2b2eeeaab6f1efc2161a3a65ab574eb08" translate="yes" xml:space="preserve">
          <source>Reshape dataframe from long format to wide format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308f59eb95fad497669dcfc017c94bc737132916" translate="yes" xml:space="preserve">
          <source>Reshaping</source>
          <target state="translated">Reshaping</target>
        </trans-unit>
        <trans-unit id="25ec6020061b30b6d06c967615f2232d9d87a45f" translate="yes" xml:space="preserve">
          <source>Reshaping and pivot tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4276e05f10750aaa4d4ed4790c70939fc4ddf66" translate="yes" xml:space="preserve">
          <source>Reshaping by Melt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6e20e85a03ea2a127748b5e2b4c51c5b0fd18d" translate="yes" xml:space="preserve">
          <source>Reshaping by pivoting DataFrame objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee6dba34fd4053681f2e07ad4a0944e7688f8d5" translate="yes" xml:space="preserve">
          <source>Reshaping by stacking and unstacking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5100300a0249f008b4da9f0c964a86e0e4a2f72d" translate="yes" xml:space="preserve">
          <source>Reshaping, sorting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8b66096a52e633d4a9dd0df7f2e4beac62a695" translate="yes" xml:space="preserve">
          <source>Reshaping, sorting, transposing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d032ff9170fbdddba896f93901dcc5fbb16e1c9e" translate="yes" xml:space="preserve">
          <source>Resolution: Return value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80184e2c580f57b28cfa01d0c2c29d719a654f82" translate="yes" xml:space="preserve">
          <source>Rest of &lt;code&gt;pandas.core.*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1909d844cd0a54ee56508df1fb05ed27302e78a7" translate="yes" xml:space="preserve">
          <source>Result index will be the union of the two indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6033c69515c877f39c58f229c53ffda6ac4813c" translate="yes" xml:space="preserve">
          <source>Result of applying &lt;code&gt;func&lt;/code&gt; along the given axis of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10cf2a5f49f039c24d0ed5bffc72fab71063636" translate="yes" xml:space="preserve">
          <source>Result of the arithmetic operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94608a9be0b1f277dc1b8fe3c67de0f156c3c608" translate="yes" xml:space="preserve">
          <source>Result of the comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78cd56444f9b491222314412d5942a0127e7ec10" translate="yes" xml:space="preserve">
          <source>Resulting index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbd047ded9c1d04b17a605afc48fafa06b9fdf1" translate="yes" xml:space="preserve">
          <source>Results can include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9cc3fdd86df202a0374af12587fe7337428564" translate="yes" xml:space="preserve">
          <source>Retrieve pandas object stored in file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba277e5c01447d138d458fd7d03bf8d7979a2ccd" translate="yes" xml:space="preserve">
          <source>Retrieve pandas object stored in file, optionally based on where criteria</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a103fe147f9591bc93cfb4530897bcd61bc14e" translate="yes" xml:space="preserve">
          <source>Retrieve the index labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d274fac52e73f3c9c0079d9f3551a7f4e5d6a69" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the specified option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e373e57d4d753767f6c92cf8a77918dedd8ae2ac" translate="yes" xml:space="preserve">
          <source>Retrieving the column names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75875a1573a6ffc7fbb9f38b1ff727cf82ecb7d6" translate="yes" xml:space="preserve">
          <source>Return 1 if Series. Otherwise return 2 if DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090a97e2f30dd61251342fa2aec507615b618bea" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;Index&lt;/code&gt; data as an &lt;code&gt;numpy.ndarray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4027b9066b14120d9dd73e9ee11029a0f3a37d" translate="yes" xml:space="preserve">
          <source>Return Addition of series and other, element-wise (binary operator &lt;code&gt;add&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfc083bcb12910889a52b1e6a0ad77a1b1c64d2" translate="yes" xml:space="preserve">
          <source>Return Addition of series and other, element-wise (binary operator &lt;code&gt;radd&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4280e160a787a8a97118dbe3c573786ddb6946a5" translate="yes" xml:space="preserve">
          <source>Return DataFrame with duplicate rows removed, optionally only considering certain columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d143df17c4e588f4cb3bc7beb96b5ae93f26df21" translate="yes" xml:space="preserve">
          <source>Return DataFrame with duplicate rows removed, optionally only considering certain columns. Indexes, including time indexes are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493110d65c6ef5a433975fb4e4f7a0a4912a78a0" translate="yes" xml:space="preserve">
          <source>Return DataFrame with labels on given axis omitted where (all or any) data are missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7768c819e75741ba737072dc1f6ffaa112aa86d9" translate="yes" xml:space="preserve">
          <source>Return DataFrame with number of distinct observations per group for each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e4133c0c01e0420e36c1e6dbece25998c1b15e" translate="yes" xml:space="preserve">
          <source>Return DataFrame with requested index / column level(s) removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ab0d3bb063cf18086c7edfd2f8a2e1e7093852" translate="yes" xml:space="preserve">
          <source>Return DateOffset object from string or tuple representation or datetime.timedelta object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7f49a59fe1ab1c2c2245c3527a2c8a72f6a6b3" translate="yes" xml:space="preserve">
          <source>Return Datetime Array/Index as object ndarray of datetime.datetime objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1714fefc67881dfb23a7ebf8a6c9748cdb8945a5" translate="yes" xml:space="preserve">
          <source>Return DatetimeIndex as object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1959413fb3b187cd84a6f8abe06c8a9fcc887786" translate="yes" xml:space="preserve">
          <source>Return DatetimeIndex with times to midnight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04b13e85525df33b02e37ab51ae200f88c6f653" translate="yes" xml:space="preserve">
          <source>Return Equal to of series and other, element-wise (binary operator &lt;code&gt;eq&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a2a2a1ee8ee809b6adcaf04a1ed7b3b71cd8e7" translate="yes" xml:space="preserve">
          <source>Return Exponential power of series and other, element-wise (binary operator &lt;code&gt;pow&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb474c5cbaebdeed807dbf4aeba8eceb3bf1037" translate="yes" xml:space="preserve">
          <source>Return Exponential power of series and other, element-wise (binary operator &lt;code&gt;rpow&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e03f880e05b7f388523c4f7aa56be763f731143" translate="yes" xml:space="preserve">
          <source>Return ExtensionArray without NA values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7789a8f87389cfd677a825d16b2075c4fbe39a03" translate="yes" xml:space="preserve">
          <source>Return Floating division of series and other, element-wise (binary operator &lt;code&gt;rtruediv&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fa8c83e9936186e17471080b9ff87a42131b8d" translate="yes" xml:space="preserve">
          <source>Return Floating division of series and other, element-wise (binary operator &lt;code&gt;truediv&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c07e8ceab687c456aeb16ff9050e704465dfd2" translate="yes" xml:space="preserve">
          <source>Return Greater than of series and other, element-wise (binary operator &lt;code&gt;gt&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae27836544daf9eb75fc74c1bae73517d96d380" translate="yes" xml:space="preserve">
          <source>Return Greater than or equal to of series and other, element-wise (binary operator &lt;code&gt;ge&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3605ff682f89d532d01c44a25fd487daaed1921" translate="yes" xml:space="preserve">
          <source>Return Index with duplicate values removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc109373278ae3e1efb09a78c32e331c3d4ad3d" translate="yes" xml:space="preserve">
          <source>Return Index with duplicates removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3afa0e70cef40eea307a9025bae42b6bd5a88f" translate="yes" xml:space="preserve">
          <source>Return Index with unique values from an Index object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21b24e9673ec6dedcffd8b8debc74d21b2696cd" translate="yes" xml:space="preserve">
          <source>Return Index without NA/NaN values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a921b310f6fd0fb15bf9cffca96850d780944275" translate="yes" xml:space="preserve">
          <source>Return Integer division and modulo of series and other, element-wise (binary operator &lt;code&gt;divmod&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde189e469bfe6adace12a6ff628834a15806e8b" translate="yes" xml:space="preserve">
          <source>Return Integer division and modulo of series and other, element-wise (binary operator &lt;code&gt;rdivmod&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05040f2a024a64be61d242a51127b88090f64d62" translate="yes" xml:space="preserve">
          <source>Return Integer division of series and other, element-wise (binary operator &lt;code&gt;floordiv&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8a135aa8ab9842b99e28bfd7dcb041108f7eee" translate="yes" xml:space="preserve">
          <source>Return Integer division of series and other, element-wise (binary operator &lt;code&gt;rfloordiv&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d670adccbd6050314bd521694f41ba2369670797" translate="yes" xml:space="preserve">
          <source>Return JsonReader object for iteration. See the &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json&quot;&gt;line-delimited json docs&lt;/a&gt; for more information on &lt;code&gt;chunksize&lt;/code&gt;. This can only be passed if &lt;code&gt;lines=True&lt;/code&gt;. If this is None, the file will be read into memory all at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11fccfec4a5aa246f66c57b99cae0c01914dc386" translate="yes" xml:space="preserve">
          <source>Return Less than of series and other, element-wise (binary operator &lt;code&gt;lt&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9303cc843e59fcf3351791320f7cda4a1a6d0a" translate="yes" xml:space="preserve">
          <source>Return Less than or equal to of series and other, element-wise (binary operator &lt;code&gt;le&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b747ae5a7b4775b9a125ea34cdc96e8bcd13b943" translate="yes" xml:space="preserve">
          <source>Return Modulo of series and other, element-wise (binary operator &lt;code&gt;mod&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8613e5d4d1fba572f8a849cd1a2640059809ee" translate="yes" xml:space="preserve">
          <source>Return Modulo of series and other, element-wise (binary operator &lt;code&gt;rmod&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88bfa896134e06bbfe41823e0746536b234e2039" translate="yes" xml:space="preserve">
          <source>Return Multiplication of series and other, element-wise (binary operator &lt;code&gt;mul&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d03486eeae7154f177e453a8d659695c4c25ea3" translate="yes" xml:space="preserve">
          <source>Return Multiplication of series and other, element-wise (binary operator &lt;code&gt;rmul&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06cc07fa6aa2d5e9a15ff10e3c061750a8545e92" translate="yes" xml:space="preserve">
          <source>Return Not equal to of series and other, element-wise (binary operator &lt;code&gt;ne&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95fc892452acc918f2567d0d5a560c494046220" translate="yes" xml:space="preserve">
          <source>Return POSIX timestamp as float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8267a97a89c087e650f4397449a3f1a7e55c65d" translate="yes" xml:space="preserve">
          <source>Return Series as ndarray or ndarray-like depending on the dtype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e60c0733cb896dc8559eaec7395e3c56393e250" translate="yes" xml:space="preserve">
          <source>Return Series of codes as well as the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed0a72a1041941a0dbb56f27b9b0ef5266f448e" translate="yes" xml:space="preserve">
          <source>Return Series with duplicate values removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e2cb60c75a7f0f946cfbfde971ba189b2566b3" translate="yes" xml:space="preserve">
          <source>Return Series with number of distinct observations. Can ignore NaN values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38e6ec838cd9649bc5b440046931967f11fad1f" translate="yes" xml:space="preserve">
          <source>Return Series with specified index labels removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88855c5184858684560c27e2130c8d092605bb2" translate="yes" xml:space="preserve">
          <source>Return Series without null values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f39bd9af603ddaee6189cbf9eb66d30d38b0697" translate="yes" xml:space="preserve">
          <source>Return StataReader object for iterations, returns chunks with given number of lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2110bb45916cf4c6e07351a5f91f73b13f069163" translate="yes" xml:space="preserve">
          <source>Return StataReader object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a964b10397ba138f3ee96576dc9f1b4f302c2076" translate="yes" xml:space="preserve">
          <source>Return Subtraction of series and other, element-wise (binary operator &lt;code&gt;rsub&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c010eaee2bc07f187d2f3fcf5fa901782e43325c" translate="yes" xml:space="preserve">
          <source>Return Subtraction of series and other, element-wise (binary operator &lt;code&gt;sub&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6938f350b8fedabd397f327dedf9ffbbb00aa472" translate="yes" xml:space="preserve">
          <source>Return TextFileReader object for iteration or getting chunks with &lt;code&gt;get_chunk()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41623bbc2bb03403d87675692faa19b550ffb4b2" translate="yes" xml:space="preserve">
          <source>Return TextFileReader object for iteration. See the &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking&quot;&gt;IO Tools docs&lt;/a&gt; for more information on &lt;code&gt;iterator&lt;/code&gt; and &lt;code&gt;chunksize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08dfb1070e7fbe0879ce1aa976decf9be7a7ca7" translate="yes" xml:space="preserve">
          <source>Return Timedelta Array/Index as object ndarray of datetime.timedelta objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8535f5194fedee5d016b88dafa2e2043271178a8" translate="yes" xml:space="preserve">
          <source>Return True if all elements are True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0399ab9a0a0bccfa247cb687d251ef3ac90a585" translate="yes" xml:space="preserve">
          <source>Return True if all values in the group are truthful, else False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f22d5105d44d7daec7b04172592563f080c9ade" translate="yes" xml:space="preserve">
          <source>Return True if any value in the group is truthful, else False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f454e3b7eb3d4895ff5e7c34824301278925a6c" translate="yes" xml:space="preserve">
          <source>Return True if date is first day of month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406c6d2d08d7b1b49333f44e07516ef3b7df4c52" translate="yes" xml:space="preserve">
          <source>Return True if date is first day of the quarter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ad73f78a46bb61ce6131e2662d8d0c34e7d968" translate="yes" xml:space="preserve">
          <source>Return True if date is first day of the year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4d488d57115c96e68afeb0adddb35ac362576f" translate="yes" xml:space="preserve">
          <source>Return True if date is last day of month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b643f44665e31c00656b25f9e9c3b9fd6bac31" translate="yes" xml:space="preserve">
          <source>Return True if date is last day of the quarter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a2fd55322d9bb2f53b4d6ce3382893ab190d66" translate="yes" xml:space="preserve">
          <source>Return True if date is last day of the year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d45ad55fa5f63071ce9f28bf38525b2b0247c9" translate="yes" xml:space="preserve">
          <source>Return True if given object is scalar, False otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db33ac0e99f42946d5252a5af896ddd83a1df4ba" translate="yes" xml:space="preserve">
          <source>Return True if given value is scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f4cb964eebb664571bcd73adc91fae37a122e4" translate="yes" xml:space="preserve">
          <source>Return True if hash(obj) will succeed, False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08be0c08201d2220b6185902c925a555a0bedf2f" translate="yes" xml:space="preserve">
          <source>Return True if left and right DataFrames are equal, False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d3918fc0e542f6c2eab9a493e905b743baf0aa" translate="yes" xml:space="preserve">
          <source>Return True if left and right Series are equal, False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b507a0fa2547a0a800fe4df47c7d5295cfb5a72" translate="yes" xml:space="preserve">
          <source>Return True if one (or more) elements are True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9a1d8f701884b68f689dc1178706ee6b82a5b5" translate="yes" xml:space="preserve">
          <source>Return True if the IntervalArray is non-overlapping (no Intervals share points) and is either monotonic increasing or monotonic decreasing, else False</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9a5b7b923c065e40890e4691b39664d33338fb" translate="yes" xml:space="preserve">
          <source>Return True if the IntervalIndex has overlapping intervals, else False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebce6959f998e3e2e24a13043051940bbdeea4a" translate="yes" xml:space="preserve">
          <source>Return True if the IntervalIndex is non-overlapping (no Intervals share points) and is either monotonic increasing or monotonic decreasing, else False</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c0d583b280527e072e6669d90a9837d7c5d12c" translate="yes" xml:space="preserve">
          <source>Return True if the codes are lexicographically sorted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeec5d9ba727942c6545e05a29a673238f8f3ae5" translate="yes" xml:space="preserve">
          <source>Return True if two arrays have the same shape and elements, False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4713202b2ce4b193e4b2cbdc59b5b941f23460cb" translate="yes" xml:space="preserve">
          <source>Return True if year is a leap year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c9a6bf459d70721b9496ca0ff2ccd5192fc629" translate="yes" xml:space="preserve">
          <source>Return UTC DatetimeIndex if True (converting any tz-aware datetime.datetime objects as well).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc74041f1e854e04716b1cbc777bb48c004573d" translate="yes" xml:space="preserve">
          <source>Return UTC time tuple, compatible with time.localtime().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273e5efedc72e1d86994d0c410f9a96ef3ac57bf" translate="yes" xml:space="preserve">
          <source>Return Value Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5055d259e333ca35ef2dd099128e1bcafe7c30" translate="yes" xml:space="preserve">
          <source>Return a (potentially unordered) list of the keys corresponding to the objects stored in the HDFStore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74231c007455ac4a7ba0fe32491741a1e423f72d" translate="yes" xml:space="preserve">
          <source>Return a (potentially unordered) list of the keys corresponding to the objects stored in the HDFStore. These are ABSOLUTE path-names (e.g. have the leading &amp;lsquo;/&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc532996765c4537affd77290c12195f30d5f19b" translate="yes" xml:space="preserve">
          <source>Return a 3-tuple containing ISO year, week number, and weekday.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3672fd2b09c7453e64a761a34147947e3dda8b" translate="yes" xml:space="preserve">
          <source>Return a DataFrame with components of each Timedelta.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1871f95658ac3738bcaa46b1dff2200d58565e30" translate="yes" xml:space="preserve">
          <source>Return a Dataframe of the components of the Timedeltas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fe55a007ebae6f1c35cdf2c951952a259b1aac" translate="yes" xml:space="preserve">
          <source>Return a MultiIndex reshaped to conform to the shapes given by n_repeat and n_shuffle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0663f9508907c81f0ce052f57f022cac65c1b8f1" translate="yes" xml:space="preserve">
          <source>Return a Numpy representation of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f680f47c88822e9341ffb300674010e160cec101" translate="yes" xml:space="preserve">
          <source>Return a Series containing counts of unique values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfe7818b6bdff682fc238c28e5ed39bf4e133f8" translate="yes" xml:space="preserve">
          <source>Return a Series or DataFrame with data ranks as values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b484f020e9737ccc2b1a14651e78c4f51033c958" translate="yes" xml:space="preserve">
          <source>Return a Series/DataFrame with absolute numeric value of each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51cb2d0b709902ac3d8eeee74ef5a23e5e9448c" translate="yes" xml:space="preserve">
          <source>Return a boolean Series showing whether each element in the Series matches an element in the passed sequence of &lt;code&gt;values&lt;/code&gt; exactly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2452c0de5ce1dfda79e88f123c1d68836238ae50" translate="yes" xml:space="preserve">
          <source>Return a boolean array where the index values are in &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64029aa416395b1a87fb6737cd35d0c88d3f8cf" translate="yes" xml:space="preserve">
          <source>Return a boolean indicating whether the date is the first day of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bce379283ff880c102f5d6ac065f3462ffcbef" translate="yes" xml:space="preserve">
          <source>Return a boolean indicating whether the date is the last day of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e28c6ef386ed8cf875dfa846c97d2f1d8c1910" translate="yes" xml:space="preserve">
          <source>Return a boolean indicating whether the provided key is in the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26ff3ae39defd68b00732297d38cfd1f0368f7e" translate="yes" xml:space="preserve">
          <source>Return a boolean mask whether the value is contained in the Intervals of the IntervalArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270e70ff3a2caaed80d73291b54ec8a095196eb1" translate="yes" xml:space="preserve">
          <source>Return a boolean mask whether the value is contained in the Intervals of the IntervalIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79e7216003d4680a5235b8b63872fac3d2c2e06" translate="yes" xml:space="preserve">
          <source>Return a boolean same-sized object indicating if the values are NA. NA values, such as &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;numpy.NaN&lt;/code&gt; or &lt;code&gt;pd.NaT&lt;/code&gt;, get mapped to &lt;code&gt;True&lt;/code&gt; values. Everything else get mapped to &lt;code&gt;False&lt;/code&gt; values. Characters such as empty strings &lt;code&gt;&amp;lsquo;&amp;rsquo;&lt;/code&gt; or &lt;code&gt;numpy.inf&lt;/code&gt; are not considered NA values (unless you set &lt;code&gt;pandas.options.mode.use_inf_as_na = True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8929c497e2fc3d8ab2325ef83ecae59800305094" translate="yes" xml:space="preserve">
          <source>Return a boolean same-sized object indicating if the values are NA. NA values, such as None or &lt;code&gt;numpy.NaN&lt;/code&gt;, gets mapped to True values. Everything else gets mapped to False values. Characters such as empty strings &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;numpy.inf&lt;/code&gt; are not considered NA values (unless you set &lt;code&gt;pandas.options.mode.use_inf_as_na = True&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c148d7ff2eb0c3e5203800d4f21ac22e5f3c8c6d" translate="yes" xml:space="preserve">
          <source>Return a boolean same-sized object indicating if the values are not NA. Non-missing values get mapped to &lt;code&gt;True&lt;/code&gt;. Characters such as empty strings &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;numpy.inf&lt;/code&gt; are not considered NA values (unless you set &lt;code&gt;pandas.options.mode.use_inf_as_na = True&lt;/code&gt;). NA values, such as None or &lt;code&gt;numpy.NaN&lt;/code&gt;, get mapped to &lt;code&gt;False&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd55001900738dc21bf51e25de3db0e524d48e6c" translate="yes" xml:space="preserve">
          <source>Return a boolean same-sized object indicating if the values are not NA. Non-missing values get mapped to True. Characters such as empty strings &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;numpy.inf&lt;/code&gt; are not considered NA values (unless you set &lt;code&gt;pandas.options.mode.use_inf_as_na = True&lt;/code&gt;). NA values, such as None or &lt;code&gt;numpy.NaN&lt;/code&gt;, get mapped to False values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7a5c2628f9b836b2f7935bf13af84131830bf1" translate="yes" xml:space="preserve">
          <source>Return a collections.abc.Mapping object representing the DataFrame. The resulting transformation depends on the &lt;code&gt;orient&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f34b5c75dd66ac7d5f9b91b8e9c6fe78865eea9" translate="yes" xml:space="preserve">
          <source>Return a components namedtuple-like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a0885a093b5175e8efe5faaa6dff05d13878d0" translate="yes" xml:space="preserve">
          <source>Return a copy of a DataFrame excluding elements from groups that do not satisfy the boolean criterion specified by func.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b980439b8813bd7e38e164ed9f2e0c99f8274be6" translate="yes" xml:space="preserve">
          <source>Return a copy of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c74ced69613cb5a2682cc50e20e1b7e6e2c055" translate="yes" xml:space="preserve">
          <source>Return a copy of the truncated section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3724fe0a3f75cb06864d4aee2eb5f1d98ce677d5" translate="yes" xml:space="preserve">
          <source>Return a copy when &lt;code&gt;copy=True&lt;/code&gt; (be very careful setting &lt;code&gt;copy=False&lt;/code&gt; as changes to values then may propagate to other pandas objects).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc264c958d8656e9fbe0c70ddad5cccf2ce8a85a" translate="yes" xml:space="preserve">
          <source>Return a data hash of the Index/Series/DataFrame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db24c965235d19a5bf4a902940cc49757188f23f" translate="yes" xml:space="preserve">
          <source>Return a dataframe of the components (days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds) of the Timedeltas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1a006a81a2827f5f7c229bba8bb948fe2735c8" translate="yes" xml:space="preserve">
          <source>Return a dict, associating each variable name a dict, associating each value its corresponding label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6aefb4fc7753c0ba7619b328d1b8e63467841f" translate="yes" xml:space="preserve">
          <source>Return a fixed frequency DatetimeIndex, with business day as the default frequency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee7f2e7cb339053ad0ac9a9f3174b6e60549a64" translate="yes" xml:space="preserve">
          <source>Return a fixed frequency DatetimeIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80e1dadc7e2a633ef80d3f1cfbb1a61d91d4ad8" translate="yes" xml:space="preserve">
          <source>Return a fixed frequency IntervalIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b59985b71acd9abcf1df530466602b61b6e020" translate="yes" xml:space="preserve">
          <source>Return a fixed frequency IntervalIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8280cbc79750ae15824d50fc4a4e98c6cf558f8c" translate="yes" xml:space="preserve">
          <source>Return a fixed frequency PeriodIndex, with day (calendar) as the default frequency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bce9260a5ee47ddc05900f2aab26e78fd12b3bc" translate="yes" xml:space="preserve">
          <source>Return a fixed frequency PeriodIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a0d76dd0d9fd6d0988b16946ce3a6deef87e79" translate="yes" xml:space="preserve">
          <source>Return a fixed frequency TimedeltaIndex, with day as the default frequency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f22a21d16a61209ecfb6316b357b47212e9b17e" translate="yes" xml:space="preserve">
          <source>Return a fixed frequency TimedeltaIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b1ac78011d60c09bf04d870ead5b75e0a4b6aa" translate="yes" xml:space="preserve">
          <source>Return a flattened view on this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025f70b33424e457c05cb28ef95e54a60ab6db66" translate="yes" xml:space="preserve">
          <source>Return a histogram plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9dc41ea927de37dceb461fe9d4e4a74c680457" translate="yes" xml:space="preserve">
          <source>Return a list of the row axis labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1876b285b194a7a53a8abfca50fed635b57d69f1" translate="yes" xml:space="preserve">
          <source>Return a list of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f2ad6f0a3c5b9b159d896a2de0cca241123d1d" translate="yes" xml:space="preserve">
          <source>Return a list representing the axes of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f127ed4124ff6037ee1411d1f83de3e51e834fb8" translate="yes" xml:space="preserve">
          <source>Return a ndarray of the minimum argument indexer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d421d416e8cb91d71513fb6ee1981fc1b771d97" translate="yes" xml:space="preserve">
          <source>Return a new Index of the values selected by the indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fdc07abdfee61f013d8c198031e67157075a3d" translate="yes" xml:space="preserve">
          <source>Return a new Index of the values set with the mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857e07cfe747dbf22ca8565782ae021ac0910b1d" translate="yes" xml:space="preserve">
          <source>Return a new Index with elements from the index that are not in &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49517d99fc29777d842b8cb368ec34cc8f4754af" translate="yes" xml:space="preserve">
          <source>Return a new Series with missing values removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28082d4c952f2bab638a0f10e4c66feb7f474c5e" translate="yes" xml:space="preserve">
          <source>Return a new Timestamp representing UTC day and time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267389209f62a69c085135176c10fe7ef1e65e0b" translate="yes" xml:space="preserve">
          <source>Return a new grouper with our resampler appended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0faafcd44239adff2e49ae9a81407ae4e30dd80b" translate="yes" xml:space="preserve">
          <source>Return a new object, even if the passed indexes are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dd6c3968a82f7e2d9fe6ad94446ac7dfe3a7e1" translate="yes" xml:space="preserve">
          <source>Return a numpy timedelta64 array scalar view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f0c30fbb906025304643c32dad9f2eb8fddb39" translate="yes" xml:space="preserve">
          <source>Return a numpy.datetime64 object with &amp;lsquo;ns&amp;rsquo; precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25926864fea4ca3575b7122c4ff3a8e5e1a8587" translate="yes" xml:space="preserve">
          <source>Return a numpy.timedelta64 object with &amp;lsquo;ns&amp;rsquo; precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1564d3a4761c62fb27e9a29b41f4026925c5b99d" translate="yes" xml:space="preserve">
          <source>Return a random sample of items from an axis of object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71608642956b6262c93b1d7896e7cb519c113dc9" translate="yes" xml:space="preserve">
          <source>Return a reshaped DataFrame or Series having a multi-level index with one or more new inner-most levels compared to the current DataFrame. The new inner-most levels are created by pivoting the columns of the current dataframe:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897b71d394f07ce237d665f10137c678cf5a4716" translate="yes" xml:space="preserve">
          <source>Return a scalar result of performing the reduction operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ac80d23b8c05aa99ed90589582014f576693e1" translate="yes" xml:space="preserve">
          <source>Return a sorted copy of the index, and optionally return the indices that sorted the index itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45befe47d74efc946be6c723a8e0b8eb492ecd2" translate="yes" xml:space="preserve">
          <source>Return a sorted copy of the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be933656484b5366e86bec534f120c676a536308" translate="yes" xml:space="preserve">
          <source>Return a string of the type inferred from the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62396000e54b1fa0a9cfab2be9f863c52e7917c0" translate="yes" xml:space="preserve">
          <source>Return a string representing the lowest timedelta resolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8c00a87d320375aa0b5b6a166418210e6b120c" translate="yes" xml:space="preserve">
          <source>Return a subset of the DataFrame&amp;rsquo;s columns based on the column dtypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56984ed3f7f944455db3b7ce8390d4a2cb9bca43" translate="yes" xml:space="preserve">
          <source>Return a subset of the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0985e887650b897784fb117d63f353de65ec0390" translate="yes" xml:space="preserve">
          <source>Return a subset of the columns. If list-like, all elements must either be positional (i.e. integer indices into the document columns) or strings that correspond to column names provided either by the user in &lt;code&gt;names&lt;/code&gt; or inferred from the document header row(s). For example, a valid list-like &lt;code&gt;usecols&lt;/code&gt; parameter would be &lt;code&gt;[0, 1, 2]&lt;/code&gt; or &lt;code&gt;['foo', 'bar', 'baz']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626c89d68f8724594e2bf0b2878569ca468bb540" translate="yes" xml:space="preserve">
          <source>Return a subset of the columns. If list-like, all elements must either be positional (i.e. integer indices into the document columns) or strings that correspond to column names provided either by the user in &lt;code&gt;names&lt;/code&gt; or inferred from the document header row(s). For example, a valid list-like &lt;code&gt;usecols&lt;/code&gt; parameter would be &lt;code&gt;[0, 1, 2]&lt;/code&gt; or &lt;code&gt;['foo', 'bar', 'baz']&lt;/code&gt;. Element order is ignored, so &lt;code&gt;usecols=[0, 1]&lt;/code&gt; is the same as &lt;code&gt;[1, 0]&lt;/code&gt;. To instantiate a DataFrame from &lt;code&gt;data&lt;/code&gt; with element order preserved use &lt;code&gt;pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]&lt;/code&gt; for columns in &lt;code&gt;['foo', 'bar']&lt;/code&gt; order or &lt;code&gt;pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]&lt;/code&gt; for &lt;code&gt;['bar', 'foo']&lt;/code&gt; order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216ac5b6d5cccd6a4d8727514d45ff4aacefd494" translate="yes" xml:space="preserve">
          <source>Return a summarized representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e57eed5c5a367f7fbbf3f60956581b509109016" translate="yes" xml:space="preserve">
          <source>Return a tuple of the array dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e47600622a3556e3e0444a38857f6a00364c29d" translate="yes" xml:space="preserve">
          <source>Return a tuple of the shape of the underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446f6395eadb52fb8dd91ad94cb255f39c1c7d4a" translate="yes" xml:space="preserve">
          <source>Return a tuple representing the dimensionality of the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c6b9a2e2121f53c6da596264e31a34ab621ad7" translate="yes" xml:space="preserve">
          <source>Return alias for index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff53829a18c36be2b31c51c11c2791a87cd31dd" translate="yes" xml:space="preserve">
          <source>Return all attributes with assigned values (i.e. days, hours, minutes, seconds, milliseconds, microseconds, nanoseconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d8be2f3935a0748fc8e66d943ed4f62fe6636d" translate="yes" xml:space="preserve">
          <source>Return an Index of formatted strings specified by date_format, which supports the same string format as the python standard library. Details of the string format can be found in &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior&quot;&gt;python string format doc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5877fc1d93d097f44b6c8ae3bfe7f219e28e6ae3" translate="yes" xml:space="preserve">
          <source>Return an Index of same shape as self and whose corresponding entries are from self where cond is True and otherwise are from other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d347f18c94de2e11d12392384fcf32ef51033f68" translate="yes" xml:space="preserve">
          <source>Return an Index of tuples of the form (left, right)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8c4fecc70d30fa699fa8ab9b2ea51f04ce61bc" translate="yes" xml:space="preserve">
          <source>Return an Index of values for requested level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50590269236b1d78db7bee9bac9ba966b35cde4f" translate="yes" xml:space="preserve">
          <source>Return an Index with entries denoting the length of each Interval in the IntervalArray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9d433464c536463775acb9fe9969a645e58d0b" translate="yes" xml:space="preserve">
          <source>Return an Index with entries denoting the length of each Interval in the IntervalIndex</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c4d117f7f2577f1d42ce252820fd4680225614" translate="yes" xml:space="preserve">
          <source>Return an IntervalArray identical to the current one, but closed on the specified side</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ad3c3faf86f6b0b4b562ff73345123ada36eb9" translate="yes" xml:space="preserve">
          <source>Return an IntervalIndex identical to the current one, but closed on the specified side</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60917ce6d3a28056a51436ac01c1558e00e6c335" translate="yes" xml:space="preserve">
          <source>Return an array and missing value suitable for factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c362c0180b743d6721893b88255437381523e6a" translate="yes" xml:space="preserve">
          <source>Return an array of native &lt;code&gt;datetime.timedelta&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a274ab3e28b7f9c035fff5277a0d57ae9b992789" translate="yes" xml:space="preserve">
          <source>Return an array representing the data in the Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e15d63f11dfa0597024bd9a347cb6244ed30d4" translate="yes" xml:space="preserve">
          <source>Return an int representing the number of axes / array dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec4eb34c5563ac39e0db235be682f474ed47bf5" translate="yes" xml:space="preserve">
          <source>Return an int representing the number of elements in this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e2b762928bccb15305549a690236a76a8c500b" translate="yes" xml:space="preserve">
          <source>Return an iterator object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95918be02fd9f6424d8f7722f2924a755a595ec0" translate="yes" xml:space="preserve">
          <source>Return an iterator of the values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9065832084559d381a9e215c91903bd48baf2c7" translate="yes" xml:space="preserve">
          <source>Return an ndarray after converting sparse values to dense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f736b11e4d2fe8fea8a6dc1dd704870ae98189fe" translate="yes" xml:space="preserve">
          <source>Return an ndarray of the flattened values of the underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e0e5ec36aff99bf4a3077999915ba3e479a777" translate="yes" xml:space="preserve">
          <source>Return an ndarray of the maximum argument indexer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c9a0b82ff4ec7406550b59e41c9d4d396db27a" translate="yes" xml:space="preserve">
          <source>Return an ndarray of tuples of the form (left, right)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b43ab6777e70e68e7a185521cb167d4daf5c456" translate="yes" xml:space="preserve">
          <source>Return an ndarray when &lt;code&gt;subplots=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8226856699e67eebe1cf0959500e24f4d2ed5fe6" translate="yes" xml:space="preserve">
          <source>Return an object of same shape as self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c665a5cf9e478fd82152c37ab11fe94146be7616" translate="yes" xml:space="preserve">
          <source>Return an object with matching indices as other object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f322c9093f99d1a4037b2d8c4ec43d7daa27f4" translate="yes" xml:space="preserve">
          <source>Return an period of which this timestamp is an observation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0344a56b7a454710703429b98567b929386950" translate="yes" xml:space="preserve">
          <source>Return an xarray object from the pandas object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f6cb08929934b1caccfd5237b8f2a7be04816f" translate="yes" xml:space="preserve">
          <source>Return boolean Series denoting duplicate rows, optionally only considering certain columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a915488189182c7a280c6105e9335d36069e7a2" translate="yes" xml:space="preserve">
          <source>Return boolean Series equivalent to left &amp;lt;= series &amp;lt;= right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f3712b7ec1a62dcd2684c55ab7fb48bbf31cca" translate="yes" xml:space="preserve">
          <source>Return boolean Series or Index based on whether a given pattern or regex is contained within a string of a Series or Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1c0632d3a3fd884819051c847d835bab8e290a" translate="yes" xml:space="preserve">
          <source>Return boolean array denoting duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff5290e6693de9eae6f2cf5360d885ce757747f" translate="yes" xml:space="preserve">
          <source>Return boolean if values in the object are monotonic_decreasing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e454d7c8b048c58d2c264f66c0e18597e1eb3296" translate="yes" xml:space="preserve">
          <source>Return boolean if values in the object are monotonic_increasing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cdcb145464d13c4f40b49a5ece02922930c4ca" translate="yes" xml:space="preserve">
          <source>Return boolean if values in the object are unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde6c090ff8e06c3d6e33a0dd8bbe9eca3da868d" translate="yes" xml:space="preserve">
          <source>Return counts of unique dtypes in this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8c093dda49693f4081345c0c9392e4ed10287f" translate="yes" xml:space="preserve">
          <source>Return counts of unique ftypes in this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df4f933d19db0f548315c464d30f67e666b51ef" translate="yes" xml:space="preserve">
          <source>Return cross-section from the Series/DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbed7f65c9cd0529e06b19773af8bae5bc2d187" translate="yes" xml:space="preserve">
          <source>Return ctime() style string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c2ddefbc3036ecc37b4a1c1ffc7f0a9ec79c87" translate="yes" xml:space="preserve">
          <source>Return cumulative maximum over DataFrame axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d68aae60c11592e883c0a5796db2bc0c5c68d651" translate="yes" xml:space="preserve">
          <source>Return cumulative maximum over Series axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c35f9a6e3b37fc140b8e65640e560f94338e5cc" translate="yes" xml:space="preserve">
          <source>Return cumulative maximum over a DataFrame or Series axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdd5378ca5a28ad76f1eecd2109593622625947" translate="yes" xml:space="preserve">
          <source>Return cumulative minimum over DataFrame axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295ad12250f42a5e6a1c0775047618bc23fe5302" translate="yes" xml:space="preserve">
          <source>Return cumulative minimum over Series axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37ea33f816f972a6f9f2f531994dea2afd00292" translate="yes" xml:space="preserve">
          <source>Return cumulative minimum over a DataFrame or Series axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d68f1290335ee9784d542e0806a6e28127b325" translate="yes" xml:space="preserve">
          <source>Return cumulative product over DataFrame axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8726ba320d97f8ec5700c9ad61a4cf60eb1179" translate="yes" xml:space="preserve">
          <source>Return cumulative product over Series axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e220fb2b6620dd25200d38269c0ab2fcc27e5d" translate="yes" xml:space="preserve">
          <source>Return cumulative product over a DataFrame or Series axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0857e29a403b55511ac1cf709b4e253a6868b7c9" translate="yes" xml:space="preserve">
          <source>Return cumulative sum over DataFrame axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df96e9c7853e4985034673d7892aabb67595869" translate="yes" xml:space="preserve">
          <source>Return cumulative sum over Series axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7217eefbb076476ea912c79668d3f87a54fbfb" translate="yes" xml:space="preserve">
          <source>Return cumulative sum over a DataFrame or Series axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e894450cf7f7f37974e9fd9315dbe3fac9f8b2ae" translate="yes" xml:space="preserve">
          <source>Return data label of Stata file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673c576fab63c7860903bb8023dc6be89f7ae39c" translate="yes" xml:space="preserve">
          <source>Return date object with same year, month and day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b9cd7d1779e877ad7a7cdee61fe759b121f622" translate="yes" xml:space="preserve">
          <source>Return day of whe week.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092fe63f52946bdb2c316c1e703b7ead8af206fe" translate="yes" xml:space="preserve">
          <source>Return dense representation of Series/DataFrame (as opposed to sparse).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7412d27d70ddfe4b5a83945f730c9e2c6b80435e" translate="yes" xml:space="preserve">
          <source>Return dense representation of a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e12de85564e6b483920c12b494015650681907b" translate="yes" xml:space="preserve">
          <source>Return element at position. Equivalent to &lt;code&gt;Series.str.slice(start=i, stop=i+1)&lt;/code&gt; with &lt;code&gt;i&lt;/code&gt; being the position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfc79c348ccdb51907cce90b61adb6424ea7825" translate="yes" xml:space="preserve">
          <source>Return empty array-like structure when all elements are unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b3e782da9873c80eb10c2338a3825e03ee959c" translate="yes" xml:space="preserve">
          <source>Return first n rows of each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500ccea885053c6ff2bc1fa3e50072ac9483a658" translate="yes" xml:space="preserve">
          <source>Return ftypes (indication of sparse/dense and dtype) in this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4230613d36af3ac45f064074a8d937a95a3fb22" translate="yes" xml:space="preserve">
          <source>Return group values at the given quantile, a la numpy.percentile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5192e3222dc98bad80e6214e9fcc6bf3b96c3a0d" translate="yes" xml:space="preserve">
          <source>Return highest indexes in each strings in the Series/Index where the substring is fully contained between [start:end].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99619971fc1f8f1c6d292c72ae924be0c04c4ba8" translate="yes" xml:space="preserve">
          <source>Return highest indexes in each strings in the Series/Index where the substring is fully contained between [start:end]. Return -1 on failure. Equivalent to standard &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.rfind&quot;&gt;&lt;code&gt;str.rfind()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10e9ac974e4c4f3a00e4faf4e81517cd4bdb42e" translate="yes" xml:space="preserve">
          <source>Return highest indexes in each strings where the substring is fully contained between [start:end].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1792c4a5781ee3e538b86c8e94d6a4f997eeca21" translate="yes" xml:space="preserve">
          <source>Return highest indexes in each strings where the substring is fully contained between [start:end]. This is the same as &lt;code&gt;str.rfind&lt;/code&gt; except instead of returning -1, it raises a ValueError when the substring is not found. Equivalent to standard &lt;code&gt;str.rindex&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d6357971ac317f778b81f9098e0b4bca8962f9" translate="yes" xml:space="preserve">
          <source>Return highest indexes in each strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732d4280977c8ca12733bd139889f5a5cd655c18" translate="yes" xml:space="preserve">
          <source>Return if I have any nans; enables various perf speedups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c379f1a1447008219443704a1b67a90ee33ceb" translate="yes" xml:space="preserve">
          <source>Return if the data is sparse|dense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181c623b3276d9bde9c747f986f428020dfcd9fd" translate="yes" xml:space="preserve">
          <source>Return if the index has unique values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8638a47135a2f3ec6755582c211771c04db56edf" translate="yes" xml:space="preserve">
          <source>Return if the index is monotonic decreasing (only equal or decreasing) values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c382384d0b089b7825bc1ffcb568b20a2213291" translate="yes" xml:space="preserve">
          <source>Return if the index is monotonic increasing (only equal or increasing) values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb1692717a2cd45d868fe65665b257779229aeb" translate="yes" xml:space="preserve">
          <source>Return imag value of vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1347a82b124923ab92b8ae0fbca3657f73703700" translate="yes" xml:space="preserve">
          <source>Return index &lt;em&gt;label&lt;/em&gt; of the first occurrence of maximum of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12977941c97e6f588bb3d05d1d8e3fe4f3550cfd" translate="yes" xml:space="preserve">
          <source>Return index &lt;em&gt;label&lt;/em&gt; of the first occurrence of minimum of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a451718e7b31521911aae717586bd984d94ac8" translate="yes" xml:space="preserve">
          <source>Return index for first non-NA/null value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354cbc8d19a9bdd81006e134ea7e0bbbf2d8d041" translate="yes" xml:space="preserve">
          <source>Return index for last non-NA/null value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab8e097c80326735bf709e9ab655bb19866e613" translate="yes" xml:space="preserve">
          <source>Return index locations of index values at particular time of day (e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2704f5d6aa16974376e45a5e47370a8c6699637" translate="yes" xml:space="preserve">
          <source>Return index locations of index values at particular time of day (e.g. 9:30AM).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902e03c28ede2fc1402d66a0ea8d911d7665e71d" translate="yes" xml:space="preserve">
          <source>Return index locations of values between particular times of day (e.g., 9:00-9:30AM).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fea056aa8420d969a5255eb3976edeb82e60da" translate="yes" xml:space="preserve">
          <source>Return index of first occurrence of maximum over requested axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d46c0e39c7562487872a7b04a406f3da3fc842d" translate="yes" xml:space="preserve">
          <source>Return index of first occurrence of maximum over requested axis. NA/null values are excluded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae8df4da941976d3e1fbd29eb5e2c78c6af05a7" translate="yes" xml:space="preserve">
          <source>Return index of first occurrence of minimum over requested axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe521a042a3511a0445a94cb3c2f8263a926378b" translate="yes" xml:space="preserve">
          <source>Return index of first occurrence of minimum over requested axis. NA/null values are excluded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723adbc2b79e3be5db672655db59f05af392446c" translate="yes" xml:space="preserve">
          <source>Return index with requested level(s) removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873e597a31c34fe96c973365624c44fe45d0d7d7" translate="yes" xml:space="preserve">
          <source>Return indices of the maximum values along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5d787e3aa735caf85a895e97935bff4b2c2df4" translate="yes" xml:space="preserve">
          <source>Return indices of the minimum values along the given axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a879893fb9d26f096efe31cae9d06683758e37c5" translate="yes" xml:space="preserve">
          <source>Return is NOT a Numpy-matrix, rather, a Numpy-array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103911646083ea7f9cfffe94df5a8b3408d634f9" translate="yes" xml:space="preserve">
          <source>Return item and drop from frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb08b5fae07cdfad137028ce7996048c6d606ad8" translate="yes" xml:space="preserve">
          <source>Return item and drop from frame. Raise KeyError if not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7410da0e85ce92ae415a7377add6f12731439a" translate="yes" xml:space="preserve">
          <source>Return last n rows of each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c91183b76dbef1bb42756062afe8933bb1ccc60" translate="yes" xml:space="preserve">
          <source>Return lowest indexes in each strings in the Series/Index where the substring is fully contained between [start:end].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3d71b307023770a0b16d935ead3ff4bef7715a" translate="yes" xml:space="preserve">
          <source>Return lowest indexes in each strings in the Series/Index where the substring is fully contained between [start:end]. Return -1 on failure. Equivalent to standard &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.find&quot;&gt;&lt;code&gt;str.find()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f0b587ce1aa08fa253836e283302bc91e3228e" translate="yes" xml:space="preserve">
          <source>Return lowest indexes in each strings where the substring is fully contained between [start:end].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0ab81d6027edaea61a6e1e3120ef6118ecbd2f" translate="yes" xml:space="preserve">
          <source>Return lowest indexes in each strings where the substring is fully contained between [start:end]. This is the same as &lt;code&gt;str.find&lt;/code&gt; except instead of returning -1, it raises a ValueError when the substring is not found. Equivalent to standard &lt;code&gt;str.index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfe878d8ebe2601ea483794c8cf4d65efe6a517" translate="yes" xml:space="preserve">
          <source>Return lowest indexes in each strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c333bc7b1ee2c7d83b859182ebab12dcafd77126" translate="yes" xml:space="preserve">
          <source>Return name of the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eea4351d5b638272a84ea82d27b4af268c5550d" translate="yes" xml:space="preserve">
          <source>Return new Timestamp object representing current time local to tz.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c590e87cc05ca8dfbf89fdad4a426d8a7b1cc0e" translate="yes" xml:space="preserve">
          <source>Return number of non-NA/null observations in the Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850b9223607c39c48001982ef87a3e63f3478add" translate="yes" xml:space="preserve">
          <source>Return number of unique elements in the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ae631f1e8a21745dc1dab67b2a87738ebff458" translate="yes" xml:space="preserve">
          <source>Return number of unique elements in the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b96ba7181211e8b699550617e26106f1fea8191" translate="yes" xml:space="preserve">
          <source>Return numpy datetime64 format in nanoseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134e89cf336e38caf53bc3335a8b2b811e474cea" translate="yes" xml:space="preserve">
          <source>Return numpy.ndarray or ExtensionArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be8a60f56e275c562562e54b33ff9c6930fd871" translate="yes" xml:space="preserve">
          <source>Return object Series which contains boxed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e72fd87e7fdc374ea198704d532a116f4ebb906" translate="yes" xml:space="preserve">
          <source>Return only specified index labels of Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f808f210b9b65410fbf8eb011ff1e54fa8bc474" translate="yes" xml:space="preserve">
          <source>Return proleptic Gregorian ordinal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e673f88a5aab38aec61cf673ed0d4fced48fa6" translate="yes" xml:space="preserve">
          <source>Return proleptic Gregorian ordinal. January 1 of year 1 is day 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdafa508709cdffad61508a83bdc59de860d13d" translate="yes" xml:space="preserve">
          <source>Return reshaped DataFrame organized by given index / column values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19474274ae84c8bfdbbf9f106f246e1898c83457" translate="yes" xml:space="preserve">
          <source>Return resolution describing the smallest difference between two times that can be represented by Timestamp object_state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959f4aa3b717cf1c92dce0ef01a80efa830ebbce" translate="yes" xml:space="preserve">
          <source>Return sample standard deviation over requested axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc14cd64295630b5c326bb49879103ded930e83d" translate="yes" xml:space="preserve">
          <source>Return scalar, Series or DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c5da54cd82c994cbd3b3a1a2c8fe87955037b4" translate="yes" xml:space="preserve">
          <source>Return scalar, Series, or DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fc2b766bf88f91f90fd1b5e199c51683b58d13" translate="yes" xml:space="preserve">
          <source>Return selected slices of an array along given axis as a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbbee3a88e872c6180384baaaaeb495d14a7bdd5" translate="yes" xml:space="preserve">
          <source>Return self.tzinfo.dst(self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7809042ac230300661dfcab6e786b92d176272c" translate="yes" xml:space="preserve">
          <source>Return self.tzinfo.tzname(self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e07e024abc42bd1f364083166e41ad4fd1ec396" translate="yes" xml:space="preserve">
          <source>Return self.tzinfo.utcoffset(self).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5634af6b50c59bae3c6eaa1667b0d06ceeb1bded" translate="yes" xml:space="preserve">
          <source>Return series without null values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e972e1a7a60acca5e06b551fca912a83d4c30cfc" translate="yes" xml:space="preserve">
          <source>Return sorted copy of Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9529caad6197f2ff7d9418a7bcf4da79c0922f7c" translate="yes" xml:space="preserve">
          <source>Return the &lt;em&gt;integer&lt;/em&gt; indices of the elements that are non-zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e02d61031fa926aa78b5dbb5fd7e782eccb8ac" translate="yes" xml:space="preserve">
          <source>Return the IntervalIndex&amp;rsquo;s data as an IntervalArray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be50b54fd6ab71c47a1911249d2557c149615031" translate="yes" xml:space="preserve">
          <source>Return the Timestamp representation of the Period at the target frequency at the specified end (how) of the Period</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbbe4591651274145888b6f1999d2328e176966" translate="yes" xml:space="preserve">
          <source>Return the Unicode normal form for the strings in the Series/Index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5093874321dc1141770b3402a320d6781c68be" translate="yes" xml:space="preserve">
          <source>Return the Unicode normal form for the strings in the Series/Index. For more information on the forms, see the &lt;a href=&quot;https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize&quot;&gt;&lt;code&gt;unicodedata.normalize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9e791e1c97e581780be4ac2d9c699f5890bef8" translate="yes" xml:space="preserve">
          <source>Return the array type associated with this dtype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab8b51cb58c0e014863261c889796bb8b1727dc" translate="yes" xml:space="preserve">
          <source>Return the base object if the memory of the underlying data is shared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fe937e336134dbaca086618271758f8deb1cd4" translate="yes" xml:space="preserve">
          <source>Return the bool of a single element PandasObject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722f56d6ba8a6b16c0a675143b5359a3c25a4cfa" translate="yes" xml:space="preserve">
          <source>Return the calendar year of the period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22e07af99dd4dc3795330c0854678509ac3f4c2" translate="yes" xml:space="preserve">
          <source>Return the compound percentage of the values for the requested axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd97567e0e489a242f1ded2d6f3958b91524f8d" translate="yes" xml:space="preserve">
          <source>Return the contents of the frame as a sparse SciPy COO matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0943ad6ea073fd952b8586028724d05fabdf5d" translate="yes" xml:space="preserve">
          <source>Return the copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d1ae82f9e59c352b820da026cf4e32d7a9dbda" translate="yes" xml:space="preserve">
          <source>Return the counts of values in a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60522d987541b06543e7572b6935a3ec497e5405" translate="yes" xml:space="preserve">
          <source>Return the current time in the local timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a37c87af2bc51516af5f5641635375222121a45" translate="yes" xml:space="preserve">
          <source>Return the current time in the local timezone. This differs from datetime.today() in that it can be localized to a passed timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3cbd6bc3f4c4a126468ce897a04b264754f7fe" translate="yes" xml:space="preserve">
          <source>Return the data as an array of native Python datetime objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce628cdc5bd012864d23c82b8dd4624a4d4f9d4" translate="yes" xml:space="preserve">
          <source>Return the data keeping the timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867a94d1e7643c7cceac14c20743e1389b69a411" translate="yes" xml:space="preserve">
          <source>Return the data pointer of the underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48ac686cc2008bcc33538194a2d4922e31e1a5e" translate="yes" xml:space="preserve">
          <source>Return the day name of the Timestamp with specified locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23f27782f38c3432988fdf6cf1f548ea7e3fa25" translate="yes" xml:space="preserve">
          <source>Return the day names of the DateTimeIndex with specified locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432cf96d17cc193e72c2ce8ea36208d01da9b14a" translate="yes" xml:space="preserve">
          <source>Return the day of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d8937530a2e4ef98d97b89215b3c343164e635" translate="yes" xml:space="preserve">
          <source>Return the day of the week represented by the date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b551335e2485e256ec711acda6b525f2b42201" translate="yes" xml:space="preserve">
          <source>Return the day of the week represented by the date. Monday == 0 &amp;hellip; Sunday == 6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b3a29da4fe662c1643f23bae4abe5554b49c63" translate="yes" xml:space="preserve">
          <source>Return the day of the week represented by the date. Monday == 1 &amp;hellip; Sunday == 7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed8cc2f1c64c5a5c757cd6370347a9df8b9b36b" translate="yes" xml:space="preserve">
          <source>Return the day of the week.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eddda28a81206ab511cca3f900f83e656272571" translate="yes" xml:space="preserve">
          <source>Return the day of the week. It is assumed the week starts on Monday, which is denoted by 0 and ends on Sunday which is denoted by 6. This method is available on both Series with datetime values (using the &lt;code&gt;dt&lt;/code&gt; accessor) or DatetimeIndex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094b830974bff75b3e298f8c65e05da2c786c525" translate="yes" xml:space="preserve">
          <source>Return the day of the year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad2158b32c64ef19ce9a48dbe6cc9bf3cc75121" translate="yes" xml:space="preserve">
          <source>Return the day of week.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2e3987119db44b99b85ca1db815882441634bd" translate="yes" xml:space="preserve">
          <source>Return the day of year of all indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec3d3fe7381e5e76cd4af7d43aad352458d806a" translate="yes" xml:space="preserve">
          <source>Return the day of year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7826f49e6c48ed728605537de14027d220fc0bb" translate="yes" xml:space="preserve">
          <source>Return the days in that month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bdb6420aae18a377158a842412c3828bc7e3ba" translate="yes" xml:space="preserve">
          <source>Return the days of the month.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7568d9e43f99d22e55da9f7255abce86f6b98f1" translate="yes" xml:space="preserve">
          <source>Return the difference between the maximum value and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4b95e8df0132a4d9eb464d85eeee57bbe9580c" translate="yes" xml:space="preserve">
          <source>Return the dot product of the Series and other if other is a Series, the Series of the dot product of Series and each rows of other if other is a DataFrame or a numpy.ndarray between the Series and each columns of the numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bba4d2113ec76427a30c5374d1db4f5d4a3c4f3" translate="yes" xml:space="preserve">
          <source>Return the dtype object of the underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec80f122123d0553cbf95e7a68c7a598d7210e7" translate="yes" xml:space="preserve">
          <source>Return the dtype str of the underlying data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75eb29b809f2877d6c7348ad52681f06eb7cc01" translate="yes" xml:space="preserve">
          <source>Return the dtypes in the DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15658cba6fb8c5c60398974d14e5b16eb13265f" translate="yes" xml:space="preserve">
          <source>Return the dtypes in this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865591b1d453ebb0f6d1bce1e94f5282ba6a9ebb" translate="yes" xml:space="preserve">
          <source>Return the elements in the given &lt;em&gt;positional&lt;/em&gt; indices along an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5db0dae47cc545b86ab758020d1b6b4002b31dd" translate="yes" xml:space="preserve">
          <source>Return the end Timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821891bf5bac255d5051e9fe1cc3be16bcfae6bc" translate="yes" xml:space="preserve">
          <source>Return the first &lt;code&gt;n&lt;/code&gt; rows ordered by &lt;code&gt;columns&lt;/code&gt; in ascending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fffb61bae771ae7faaa969b6b590b4c8cba0b6" translate="yes" xml:space="preserve">
          <source>Return the first &lt;code&gt;n&lt;/code&gt; rows ordered by &lt;code&gt;columns&lt;/code&gt; in descending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286a66521aea24f2d8a458a3ed1f8af2f86ccbd5" translate="yes" xml:space="preserve">
          <source>Return the first &lt;code&gt;n&lt;/code&gt; rows with the largest values in &lt;code&gt;columns&lt;/code&gt;, in descending order. The columns that are not specified are returned as well, but not used for ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40fc0d1e2bd62e105dca7ce6db43e6257f17035" translate="yes" xml:space="preserve">
          <source>Return the first &lt;code&gt;n&lt;/code&gt; rows with the smallest values in &lt;code&gt;columns&lt;/code&gt;, in ascending order. The columns that are not specified are returned as well, but not used for ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49e59e5ae8ee5fae0c65d7588d954e7191da8b8" translate="yes" xml:space="preserve">
          <source>Return the first &lt;code&gt;n&lt;/code&gt; rows without re-ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8192f56db7a67cd06e6d22b2245428554f19396c" translate="yes" xml:space="preserve">
          <source>Return the first &lt;code&gt;n&lt;/code&gt; rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684159127db048245bd04aa031abb6a8b1eec25f" translate="yes" xml:space="preserve">
          <source>Return the first element of the underlying data as a python scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359bfefc5cf674977e8774b1184d8b34e28909c2" translate="yes" xml:space="preserve">
          <source>Return the flattened underlying data as an ndarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16925faafd63282f57ff3e01eb85eb7cf4261717" translate="yes" xml:space="preserve">
          <source>Return the frequency object as a string if it is set, otherwise None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e90136956f8f6af3eccfabb043bb90c9f06f481" translate="yes" xml:space="preserve">
          <source>Return the frequency object if it is set, otherwise None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0461b6f6e546187b7833657ca9a16e5572f52f" translate="yes" xml:space="preserve">
          <source>Return the ftypes (indication of sparse/dense and dtype) in DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b336c7ca9025b1b222fc75eb3c8b8ef505a17c89" translate="yes" xml:space="preserve">
          <source>Return the highest frequency value in a Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0e31320a5f5bbb801a1c4966c24519bf2c68f5" translate="yes" xml:space="preserve">
          <source>Return the index of the maximum over the requested axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1be0976c7102421916aaf38a0234e4a6fbdd75" translate="yes" xml:space="preserve">
          <source>Return the index of the maximum.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
