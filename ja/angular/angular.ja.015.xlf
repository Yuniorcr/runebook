<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="342c659777997bec12f413246e5e24d6a8317e2a" translate="yes" xml:space="preserve">
          <source>Usage Example</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="31fdeb34a4f4bc8a7b882018ab434e09d2defd44" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="4df13ec4234f96a6f1f82fccdde77669b4c4b95c" translate="yes" xml:space="preserve">
          <source>Usage Notes</source>
          <target state="translated">使用上の注意</target>
        </trans-unit>
        <trans-unit id="3439e83eddd9b986dc9a370152a22cf7dcf9b189" translate="yes" xml:space="preserve">
          <source>Usage example</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="92d99b032888bf69448943e3813f272f0f43c556" translate="yes" xml:space="preserve">
          <source>Usage notes</source>
          <target state="translated">使用上の注意</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="3ca40217dc0e70d2dc410e2c690446266314d73f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;component-interaction#countdown-tests&quot;&gt;the same countdown timer tests&lt;/a&gt; as before.</source>
          <target state="translated">以前&lt;a href=&quot;component-interaction#countdown-tests&quot;&gt;と同じカウントダウンタイマーテスト&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="bbdce1a9856fbb51307f203e0fd8807247521091" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html&quot;&gt;TypeScript type definition files&lt;/a&gt;&amp;mdash;&lt;code&gt;d.ts files&lt;/code&gt;&amp;mdash;to tell the compiler about the libraries you load.</source>
          <target state="translated">使用&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html&quot;&gt;活字体のタイプ定義ファイル&lt;/a&gt; - &lt;code&gt;d.ts files&lt;/code&gt; は、ロードライブラリに関するコンパイラに伝える-to。</target>
        </trans-unit>
        <trans-unit id="c534d42b01e57fa797f2c9dd829715b3aaef6e23" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt; to reenter the Angular zone and do work that updates the application model.</source>
          <target state="translated">&lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;を使用してAngularゾーンに再度入り、アプリケーションモデルを更新する作業を行います。</target>
        </trans-unit>
        <trans-unit id="11460a33232086c248106ff99715d4babce3c64e" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;router#route-parameters&quot;&gt;&lt;em&gt;route parameters&lt;/em&gt;&lt;/a&gt; to specify a &lt;em&gt;required&lt;/em&gt; parameter value &lt;em&gt;within&lt;/em&gt; the route URL as you do when navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; in order to view the hero with &lt;em&gt;id&lt;/em&gt; 15:</source>
          <target state="translated">&lt;a href=&quot;router#route-parameters&quot;&gt;&lt;em&gt;ルートパラメーター&lt;/em&gt;&lt;/a&gt;を使用して、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動して&lt;em&gt;ID&lt;/em&gt; 15のヒーローを表示するときと同じように、ルートURL &lt;em&gt;内に&lt;/em&gt;&lt;em&gt;必要な&lt;/em&gt;パラメーター値を指定します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a19d669d6ab0a452aeaf8626b2d9150aebbdc3cf" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt; only with &lt;em&gt;emulated&lt;/em&gt; view encapsulation. Emulated is the default and most commonly used view encapsulation. For more information, see the &lt;a href=&quot;component-styles#view-encapsulation&quot;&gt;Controlling view encapsulation&lt;/a&gt; section.</source>
          <target state="translated">使用 &lt;code&gt;/deep/&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; と &lt;code&gt;::ng-deep&lt;/code&gt; のみで&lt;em&gt;エミュレートされた&lt;/em&gt;ビューのカプセル化。エミュレートはデフォルトであり、最も一般的に使用されるビューのカプセル化です。詳細については、&lt;a href=&quot;component-styles#view-encapsulation&quot;&gt;ビューのカプセル化&lt;/a&gt;の制御セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fbc5373a6098820428d8f87b4ebef3596f21ac25" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:increment&lt;/code&gt; and &lt;code&gt;:decrement&lt;/code&gt; to initiate transitions:</source>
          <target state="translated">用途 &lt;code&gt;:increment&lt;/code&gt; と &lt;code&gt;:decrement&lt;/code&gt; 移行を開始します：</target>
        </trans-unit>
        <trans-unit id="37da0447d1fa140f28f8fb6b08272482bf10d2b3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; to apply styling data over a given time interval.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; を使用して、指定した時間間隔でスタイルデータを適用します。</target>
        </trans-unit>
        <trans-unit id="8117b02663c31ca30a3505b5dea37c42a73d66f9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to look for an element entering the page that meets certain criteria.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; を使用して、特定の条件を満たすページに入る要素を探します。</target>
        </trans-unit>
        <trans-unit id="c340b82cff5a85036fa97538fb63c0522defe830" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; to delay each animation by 30 milliseconds.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; を使用して、各アニメーションを30ミリ秒遅延させます。</target>
        </trans-unit>
        <trans-unit id="744032ff1407c7169be00664314296b80fa6d2ce" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; to apply the provided styling data immediately.</source>
          <target state="translated">提供されたスタイルデータをすぐに適用するには、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c164f914355419d833cd09abe62d44f39e5d7fa3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; to define intermediate styles, which create the illusion of motion during the animation.</source>
          <target state="translated">使用する &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; アニメーション中の動きの錯覚を作成する中間スタイルを定義します。</target>
        </trans-unit>
        <trans-unit id="84330455001cba6cc5fc4fcfcc5e6a9131fbbea2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; to set many inline styles simultaneously and dynamically, based on the state of the component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; を使用して、コンポーネントの状態に基づいて、多くのインラインスタイルを同時に動的に設定します。</target>
        </trans-unit>
        <trans-unit id="5245359421c59b09a4a49d6a64056af5518fc2a4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; to define styles that are applied at the end of each transition, they persist after the animation has completed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; を使用して、各遷移の最後に適用されるスタイルを定義します。スタイルは、アニメーションが完了した後も持続します。</target>
        </trans-unit>
        <trans-unit id="23e2c4fd66aaf035f564822cce538de6531f6bbc" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; to create two-way data bindings for reading and writing input-control values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用して、入力制御値を読み書きするための双方向データバインディングを作成します。</target>
        </trans-unit>
        <trans-unit id="3fd82b61ae0dda767fc8f3a6beca402be658ba83" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; to separate providers from a module so you can import that module into the root module with &lt;code&gt;providers&lt;/code&gt; and child modules without &lt;code&gt;providers&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; を使用して、プロバイダーをモジュールから分離します。これにより、そのモジュールを &lt;code&gt;providers&lt;/code&gt; 付きのルートモジュールにインポートし、プロバイダーなしの子モジュールをインポートでき &lt;code&gt;providers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4659a85a02ce72bfcc286731ea25c8f664cf6829" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; to allow AngularJS and Angular to coexist in a single application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; を使用して、AngularJSとAngularが単一のアプリケーションで共存できるようにします。</target>
        </trans-unit>
        <trans-unit id="5dac23ff3bdee9064747ccf719f0ed4727aad84f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; to control a hybrid AngularJS / Angular application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrade/upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; を使用して、AngularJSとAngularのハイブリッドアプリケーションを制御します。</target>
        </trans-unit>
        <trans-unit id="02f4fc0380dc5751bed787fa57f8c1da57539efe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; to allow AngularJS and Angular to coexist in a single application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradeadapter&quot;&gt;UpgradeAdapter&lt;/a&gt;&lt;/code&gt; を使用して、AngularJSとAngularが単一のアプリケーションで共存できるようにします。</target>
        </trans-unit>
        <trans-unit id="ca40e78c4209c9b5e5203ae6d1381b2251b2aed8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; to control a hybrid AngularJS / Angular application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgradeadapterref&quot;&gt;UpgradeAdapterRef&lt;/a&gt;&lt;/code&gt; を使用して、AngularJSとAngularのハイブリッドアプリケーションを制御します。</target>
        </trans-unit>
        <trans-unit id="af06267d70ed596a77b6002d1c976ef8cf195c8c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; to inject the instance.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; を使用してインスタンスを注入します。</target>
        </trans-unit>
        <trans-unit id="8871425e87aae0b3cd3521f2757473e950108c92" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; so that Angular will only look at the &lt;code&gt;ElementInjector&lt;/code&gt; for the current component or directive.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 角度だけを見ていきますように &lt;code&gt;ElementInjector&lt;/code&gt; 現在のコンポーネントまたはディレクティブのために。</target>
        </trans-unit>
        <trans-unit id="5c336104380f0d2867d853d0a9497070d9a8d351" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; to prevent an error if the value is &lt;code&gt;null&lt;/code&gt;. In the following example, the &lt;code&gt;Person&lt;/code&gt; service is injected in the constructor. &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; tells Angular to skip the current injector and &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; will prevent an error should the &lt;code&gt;Person&lt;/code&gt; service be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; の値である場合、エラーを防ぐために &lt;code&gt;null&lt;/code&gt; 。次の例では、 &lt;code&gt;Person&lt;/code&gt; サービスがコンストラクターに注入されています。 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 現在のインジェクタとスキップするように角度を伝え &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; なければならないエラーを防ぐことができます &lt;code&gt;Person&lt;/code&gt; サービスがあること &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c3acfd0b42193c69c97319b8d40897bd917fd56" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;currency&lt;/code&gt; to format a number as currency.</source>
          <target state="translated">&lt;code&gt;currency&lt;/code&gt; を使用して、数値を通貨としてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="8f1bdfdd07f0e51b3ed046c10f3d302723845732" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;downgradeNg2Component&lt;/code&gt; to create an AngularJS Directive Definition Factory from Angular Component. The adapter will bootstrap Angular component from within the AngularJS template.</source>
          <target state="translated">&lt;code&gt;downgradeNg2Component&lt;/code&gt; を使用して、AngularコンポーネントからAngularJSディレクティブ定義ファクトリを作成します。アダプターは、AngularJSテンプレート内からAngularコンポーネントをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="a89fbfa3b7a5cad46931da1a2b1acafab5e39b74" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;fromString&lt;/code&gt; to create HttpParams</source>
          <target state="translated">&lt;code&gt;fromString&lt;/code&gt; を使用してHttpParamsを作成する</target>
        </trans-unit>
        <trans-unit id="9016f8a4d5f440de4485c2ed9ab0fb4c65014418" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;markForCheck()&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; strategy</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; 戦略で &lt;code&gt;markForCheck()&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="57ed9bd08229eab245c48c01dd77e6ea3a5924a2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; &amp;lt;lib_name&amp;gt;&lt;/code&gt; to update individual library versions. The Angular CLI checks the latest published release of the library, and if the latest version is newer than your installed version, downloads it and updates your &lt;code&gt;package.json&lt;/code&gt; to match the latest version.</source>
          <target state="translated">&lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; &amp;lt;lib_name&amp;gt;&lt;/code&gt; を使用して、個々のライブラリバージョンを更新します。Angular CLIは、ライブラリの最新の公開リリースをチェックし、最新バージョンがインストールされているバージョンよりも新しい場合は、それをダウンロードし、 &lt;code&gt;package.json&lt;/code&gt; を更新して最新バージョンに一致させます。</target>
        </trans-unit>
        <trans-unit id="86ee33b42fd33fef24e535d80cee1f4a2d9b6d98" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ngOnInit()&lt;/code&gt; for two main reasons:</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; を使用する主な理由は2つあります。</target>
        </trans-unit>
        <trans-unit id="0101700ae7ee3247de5052bf7ea3d11a837378c4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;setTimeout()&lt;/code&gt; to wait one tick and then revise the &lt;code&gt;seconds()&lt;/code&gt; method so that it takes future values from the timer component.</source>
          <target state="translated">&lt;code&gt;setTimeout()&lt;/code&gt; を使用して1ティック待機し、 &lt;code&gt;seconds()&lt;/code&gt; メソッドを修正して、タイマーコンポーネントから将来の値を取得するようにします。</target>
        </trans-unit>
        <trans-unit id="cb1322724221816f73d5c0329a7eb5dcab8960c7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;upgradeNg1Component&lt;/code&gt; to create an Angular component from AngularJS Component directive. The adapter will bootstrap AngularJS component from within the Angular template.</source>
          <target state="translated">&lt;code&gt;upgradeNg1Component&lt;/code&gt; を使用して、AngularJS ComponentディレクティブからAngularコンポーネントを作成します。アダプターは、Angularテンプレート内からAngularJSコンポーネントをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="50956624e8944e35a6d37b0adb8e3d1bd4c37693" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;root URLs&lt;/em&gt; for all web resources: CSS, images, scripts, and template HTML files.</source>
          <target state="translated">すべてのWebリソース（CSS、画像、スクリプト、テンプレートHTMLファイル）に&lt;em&gt;ルートURL&lt;/em&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="4a03f29e1bd5ed1ad5fcb9c4057f36f7e599cdd5" translate="yes" xml:space="preserve">
          <source>Use Angular's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function to define different states to call at the end of each transition. This function takes two arguments: a unique name like &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 関数を使用して、各遷移の最後に呼び出すさまざまな状態を定義します。この関数は2つの引数を取ります &lt;code&gt;open&lt;/code&gt; や &lt;code&gt;closed&lt;/code&gt; などの一意の名前と &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数です。</target>
        </trans-unit>
        <trans-unit id="87f7bdc684fc8838c17afd26ef0911196a4cc431" translate="yes" xml:space="preserve">
          <source>Use HTML tables to present tabular data.</source>
          <target state="translated">HTML テーブルを使用して表形式のデータを表示します。</target>
        </trans-unit>
        <trans-unit id="d52844f8f4d368ecefe3c48b7579af4485aa36ae" translate="yes" xml:space="preserve">
          <source>Use Lifecycle hooks to tap into important events exposed by Angular.</source>
          <target state="translated">ライフサイクルフックを使って、Angularが公開している重要なイベントを利用しましょう。</target>
        </trans-unit>
        <trans-unit id="9658986afcec6ffd4c7f6a0574e23679c2ba6611" translate="yes" xml:space="preserve">
          <source>Use Shadow DOM to encapsulate styles.</source>
          <target state="translated">スタイルをカプセル化するために Shadow DOM を使用します。</target>
        </trans-unit>
        <trans-unit id="f08d443a95d8465aefd51bbcd60a391957292522" translate="yes" xml:space="preserve">
          <source>Use TypeScript path mapping for peer dependencies</source>
          <target state="translated">ピアの依存関係に TypeScript のパスマッピングを使用する</target>
        </trans-unit>
        <trans-unit id="9cc4b5a0a1615c582c8ca48d1ec27455af6a185b" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;button&lt;/code&gt; element to add a button to the bottom of the form to trigger the form submission.</source>
          <target state="translated">&lt;code&gt;button&lt;/code&gt; 要素を使用してフォームの下部にボタンを追加し、フォームの送信をトリガーします。</target>
        </trans-unit>
        <trans-unit id="5b5ea0356b91d0915d4b8c036e052844c79a4502" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;formGroup&lt;/code&gt; property binding to bind the &lt;code&gt;checkoutForm&lt;/code&gt; to the &lt;code&gt;form&lt;/code&gt; tag in the template. Also include a &quot;Purchase&quot; button to submit the form.</source>
          <target state="translated">&lt;code&gt;formGroup&lt;/code&gt; プロパティバインディングを使用して、 &lt;code&gt;checkoutForm&lt;/code&gt; をテンプレートの &lt;code&gt;form&lt;/code&gt; タグにバインドします。また、フォームを送信するための「購入」ボタンを含めます。</target>
        </trans-unit>
        <trans-unit id="fdac760c5116185edbb31c4a9ad9c814fe4129bb" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;page&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;page&lt;/code&gt; オブジェクトを使用する</target>
        </trans-unit>
        <trans-unit id="d47d2a657fa1d3c60905a8a9ccd668a501f568ba" translate="yes" xml:space="preserve">
          <source>Use a JavaScript function, &lt;code&gt;customElements.define()&lt;/code&gt;, to register the configured constructor and its associated custom-element tag with the browser's &lt;code&gt;CustomElementRegistry&lt;/code&gt;. When the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.</source>
          <target state="translated">JavaScript関数 &lt;code&gt;customElements.define()&lt;/code&gt; を使用して、構成されたコンストラクターとそれに関連付けられたカスタム要素タグをブラウザーの &lt;code&gt;CustomElementRegistry&lt;/code&gt; に登録します。ブラウザーは、登録された要素のタグを検出すると、コンストラクターを使用してカスタム要素インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="72a2b18f27d211118108e49c2dd0efc7f61f3f3d" translate="yes" xml:space="preserve">
          <source>Use a custom id with a description</source>
          <target state="translated">説明付きのカスタムIDを使用する</target>
        </trans-unit>
        <trans-unit id="ca0772b11fa11c22b7bfb2cc9e1ebd036d26eb58" translate="yes" xml:space="preserve">
          <source>Use a custom renderer to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use the &lt;code&gt;setProperty()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">カスタムレンダラーを使用して、Angularのテンプレートをバイパスし、宣言的に表現できないカスタムUIの変更を行います。たとえば、静的に名前がわからないプロパティまたは属性を設定する必要がある場合は、 &lt;code&gt;setProperty()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="2defd1faf147625042e6e427843821178b67bd1b" translate="yes" xml:space="preserve">
          <source>Use a double arrow syntax to specify state-to-state transitions in both directions.</source>
          <target state="translated">二重矢印構文を使用して、両方向の状態遷移を指定します。</target>
        </trans-unit>
        <trans-unit id="8f86fd2cb52558a5f799a9078de5c642cbd17287" translate="yes" xml:space="preserve">
          <source>Use a separate bundle containing code used across multiple bundles.</source>
          <target state="translated">複数のバンドルにまたがって使用されるコードを含む別のバンドルを使用します。</target>
        </trans-unit>
        <trans-unit id="4de7347c4ae42c0338292a697420d7631cff3899" translate="yes" xml:space="preserve">
          <source>Use a separate bundle containing only vendor libraries.</source>
          <target state="translated">ベンダーライブラリのみを含む別のバンドルを使用します。</target>
        </trans-unit>
        <trans-unit id="7d1d96dbe4bfa2f8afd5e063fb099246e2f933e9" translate="yes" xml:space="preserve">
          <source>Use an &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; whenever the type you are injecting is not reified (does not have a runtime representation) such as when injecting an interface, callable type, array or parameterized type.</source>
          <target state="translated">インターフェイス、呼び出し可能型、配列、パラメーター化された型を注入する場合など、注入する型が具体化されていない（ランタイム表現がない）場合は常に、 &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4b24b7564615489f70464a0b684de4d00e3cad09" translate="yes" xml:space="preserve">
          <source>Use an input property setter to intercept and act upon a value from the parent.</source>
          <target state="translated">入力プロパティのセッターを使用して、親からの値を傍受して動作させます。</target>
        </trans-unit>
        <trans-unit id="aa89ae11b8e5412bd5017dd7f915184a5121c58a" translate="yes" xml:space="preserve">
          <source>Use both techniques together</source>
          <target state="translated">両方のテクニックを併用する</target>
        </trans-unit>
        <trans-unit id="58c616bd0cf85cc12a155f6a80ac80d1c6ac921b" translate="yes" xml:space="preserve">
          <source>Use built-in Angular directives to show and hide elements and display lists of hero data.</source>
          <target state="translated">組み込みのAngularディレクティブを使用して、要素の表示・非表示やヒーローデータのリスト表示を行います。</target>
        </trans-unit>
        <trans-unit id="ba903051e852b2dc8a92992587da4085b281db62" translate="yes" xml:space="preserve">
          <source>Use directives to enhance an element</source>
          <target state="translated">ディレクティブを使って要素を強化する</target>
        </trans-unit>
        <trans-unit id="12ab61a4fd4336f2c2953a0f712c04fb91949dba" translate="yes" xml:space="preserve">
          <source>Use file name for lazy loaded chunks.</source>
          <target state="translated">遅延ロードされたチャンクのファイル名を使用します。</target>
        </trans-unit>
        <trans-unit id="f8f0525e366cb8c77a4916b799b14b984e598076" translate="yes" xml:space="preserve">
          <source>Use in components with the &lt;code&gt;@&lt;a href=&quot;core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; directive to emit custom events synchronously or asynchronously, and register handlers for those events by subscribing to an instance.</source>
          <target state="translated">コンポーネントで &lt;code&gt;@&lt;a href=&quot;core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して、カスタムイベントを同期的または非同期的に発行し、インスタンスにサブスクライブすることでそれらのイベントのハンドラーを登録します。</target>
        </trans-unit>
        <trans-unit id="6610f463a7407078fa7bae85f8fc8f843b6debb4" translate="yes" xml:space="preserve">
          <source>Use in components with the &lt;code&gt;@&lt;a href=&quot;output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; directive to emit custom events synchronously or asynchronously, and register handlers for those events by subscribing to an instance.</source>
          <target state="translated">コンポーネントで &lt;code&gt;@&lt;a href=&quot;output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して、カスタムイベントを同期的または非同期的に発行し、インスタンスにサブスクライブすることでそれらのイベントのハンドラーを登録します。</target>
        </trans-unit>
        <trans-unit id="9848cb209b02d0955db09afd48d35722b7baf9e6" translate="yes" xml:space="preserve">
          <source>Use in development mode to verify that running change detection doesn't introduce other changes.</source>
          <target state="translated">開発モードで使用して、実行中の変更検出が他の変更を導入していないことを確認します。</target>
        </trans-unit>
        <trans-unit id="562fbe07806719e4eb320decc50510c6f8fcbd9d" translate="yes" xml:space="preserve">
          <source>Use integration testing for your builder, so that you can use the Architect scheduler to create a context, as in this &lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">この&lt;a href=&quot;https://github.com/mgechev/cli-builders-demo&quot;&gt;例の&lt;/a&gt;ように、Architectスケジューラを使用してコンテキストを作成できるように、ビルダーの統合テストを使用します。</target>
        </trans-unit>
        <trans-unit id="922b5062ec0572aa1adccb4f5632805f5154deab" translate="yes" xml:space="preserve">
          <source>Use kebab-case for downgraded component attributes</source>
          <target state="translated">ダウングレードされたコンポーネント属性にkebab-caseを使用する</target>
        </trans-unit>
        <trans-unit id="44f566857d643f1d49f711c0b30d0dc6a3ffce4b" translate="yes" xml:space="preserve">
          <source>Use keyframes to create a pulse effect in your animations by defining styles at specific offset throughout the animation.</source>
          <target state="translated">キーフレームを使用して、アニメーション全体の特定のオフセットでスタイルを定義して、アニメーションにパルス効果を作成します。</target>
        </trans-unit>
        <trans-unit id="f78e562ea1e7f343fb60afc2c7e41be5afad1302" translate="yes" xml:space="preserve">
          <source>Use nested form groups to validate a sub-group of a form separately from the rest or to group the values of certain controls into their own nested object.</source>
          <target state="translated">入れ子になったフォームグループを使って、フォームのサブグループを他のグループとは別に検証したり、特定のコントロールの値を独自の入れ子になったオブジェクトにグループ化したりすることができます。</target>
        </trans-unit>
        <trans-unit id="ae0b7c6086be4df2a4b72a414920640b2b9519a5" translate="yes" xml:space="preserve">
          <source>Use of *ngIf and *ngFor with :enter and :leave</source>
          <target state="translated">Enter と leave での *ngIf と *ngFor の使用</target>
        </trans-unit>
        <trans-unit id="825f8becf5e248543919edc40655a1407e732140" translate="yes" xml:space="preserve">
          <source>Use one-way data binding for read-only data.</source>
          <target state="translated">読み取り専用データにはワンウェイデータバインディングを使用します。</target>
        </trans-unit>
        <trans-unit id="33c9c9b12a49197173a1f9a9e99b1ab027db7481" translate="yes" xml:space="preserve">
          <source>Use property binding to &lt;em&gt;set&lt;/em&gt; properties of target elements or directive &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorators. For an example demonstrating all of the points in this section, see the &lt;span name=&quot;property-binding&quot;&gt;property binding example&lt;/span&gt;.</source>
          <target state="translated">プロパティバインディングを使用して、ターゲット要素またはディレクティブ &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）デコレータのプロパティを&lt;em&gt;設定し&lt;/em&gt;ます。このセクションのすべてのポイントを示す例については、&lt;span name=&quot;property-binding&quot;&gt;プロパティバインディングの例を&lt;/span&gt;参照してください。&lt;span name=&quot;property-binding&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0e687455aeeac52967421ad9e0ea548379e0207c" translate="yes" xml:space="preserve">
          <source>Use route parameters</source>
          <target state="translated">ルートパラメータの使用</target>
        </trans-unit>
        <trans-unit id="83397ceeb8cb2ee18c72cf2e39d941138c6e3d3b" translate="yes" xml:space="preserve">
          <source>Use routing to navigate among different views and their components.</source>
          <target state="translated">ルーティングを使用して、さまざまなビューとそのコンポーネント間をナビゲートします。</target>
        </trans-unit>
        <trans-unit id="0bfd4f1040c27256f1f7a7669dce5333fc8f6d46" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to automatically set up your project with the correct polyfill: &lt;code&gt;ng add @angular/elements --name=*your_project_name*&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、正しいポリフィルでプロジェクトを自動的に設定します： &lt;code&gt;ng add @angular/elements --name=*your_project_name*&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb0967d7ae25fbeb074644d90cbc2a0b6e09376c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;cli/run&quot;&gt;CLI command &lt;code&gt;ng run&lt;/code&gt;&lt;/a&gt; to invoke a builder by specifying a &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt; associated with that builder. Integrators can add builders to enable tools and workflows to run through the Angular CLI. For example, a custom builder can replace the third-party tools used by the built-in implementations for CLI commands such as &lt;code&gt;ng build&lt;/code&gt; or &lt;code&gt;ng test&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;cli/run&quot;&gt;CLIコマンド &lt;code&gt;ng run&lt;/code&gt; &lt;/a&gt;を使用して、そのビルダーに関連付けられた&lt;a href=&quot;glossary#target&quot;&gt;ターゲット構成を&lt;/a&gt;指定することにより、そのビルダーを呼び出します。インテグレーターはビルダーを追加して、Angular CLIを介してツールとワークフローを実行できるようにすることができます。たとえば、カスタムビルダーは、 &lt;code&gt;ng build&lt;/code&gt; や &lt;code&gt;ng test&lt;/code&gt; などのCLIコマンドの組み込み実装で​​使用されるサードパーティツールを置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="9f443ef713021a89a07c940630b1de13045528f0" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;singleton-services#providedIn&quot;&gt;&lt;code&gt;providedIn&lt;/code&gt; syntax&lt;/a&gt; instead of registering the service in the module.</source>
          <target state="translated">モジュールにサービスを登録する代わりに、&lt;a href=&quot;singleton-services#providedIn&quot;&gt; &lt;code&gt;providedIn&lt;/code&gt; 構文を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="802892225bada3f629d8e440f05c2e60e8ea54c8" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;template-syntax#non-null-assertion-operator&quot;&gt;non-null type assertion operator&lt;/a&gt; to suppress the &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; error when it is inconvenient to use &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; or when some constraint in the component ensures that the expression is always non-null when the binding expression is interpolated.</source>
          <target state="translated">使用する&lt;a href=&quot;template-syntax#non-null-assertion-operator&quot;&gt;null以外の型アサーション演算子を&lt;/a&gt;抑制するために &lt;code&gt;Object is possibly 'undefined'&lt;/code&gt; 、それは使用に不便である場合にエラーを &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; たりするときは、結合式が補間されたときに式が常に非nullであることをコンポーネント性を保証でいくつかの制約。</target>
        </trans-unit>
        <trans-unit id="5a253ee9798a26a31ec1940c9c82d1392f5a3876" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; pseudo-class selector to target styles in the element that &lt;em&gt;hosts&lt;/em&gt; the component (as opposed to targeting elements &lt;em&gt;inside&lt;/em&gt; the component's template).</source>
          <target state="translated">&lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 疑似クラスセレクターを使用し&lt;em&gt;て&lt;/em&gt;、コンポーネントを&lt;em&gt;ホスト&lt;/em&gt;する要素のスタイルをターゲティングします（コンポーネントのテンプレート&lt;em&gt;内&lt;/em&gt;の要素をターゲティングするのではなく）。</target>
        </trans-unit>
        <trans-unit id="3d5018825bf0a7d2fd0cd9ddf6fdbc3f0fd42061" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:host-context()&lt;/code&gt; pseudo-class selector, which works just like the function form of &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;()&lt;/code&gt;. The &lt;code&gt;:host-context()&lt;/code&gt; selector looks for a CSS class in any ancestor of the component host element, up to the document root. The &lt;code&gt;:host-context()&lt;/code&gt; selector is useful when combined with another selector.</source>
          <target state="translated">使用 &lt;code&gt;:host-context()&lt;/code&gt; だけの関数形のように動作擬似クラスセレクタ、 &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;()&lt;/code&gt; 。 &lt;code&gt;:host-context()&lt;/code&gt; セレクタコンポーネントホスト要素の任意の祖先にCSSクラスを探し、ドキュメントのルートまで。 &lt;code&gt;:host-context()&lt;/code&gt; セレクタ別のセレクタと組み合わせた場合に有用です。</target>
        </trans-unit>
        <trans-unit id="c620015e08354210a92a8e92a39367a30c7b96b6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function to define the length, delay, and easing of a transition, and to designate the style function for defining styles while transitions are taking place. You can also use the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function to define the &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; function for multi-step animations. These definitions are placed in the second argument of the &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 長さ、遅延、および遷移の緩和を定義すること、および遷移が行われている間のスタイルを定義するためのスタイルの機能を指定する機能。また、 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数を使用して、マルチステップアニメーションの &lt;code&gt;&lt;a href=&quot;../api/animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 関数を定義することもできます。これらの定義は、 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数の2番目の引数に配置されます。</target>
        </trans-unit>
        <trans-unit id="f32ed10372c1cab9fb95fe4e02cc957f60ec0b21" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; method to create the &lt;code&gt;profileForm&lt;/code&gt; controls.</source>
          <target state="translated">使用する &lt;code&gt;&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;&lt;/code&gt; を作成する方法を &lt;code&gt;profileForm&lt;/code&gt; のコントロールを。</target>
        </trans-unit>
        <trans-unit id="8bdd7bc62b27869a9b7bb04eb7df3c59285d92cc" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; method to find and animate elements within the current host component. The &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:enter&quot;)&lt;/code&gt; statement returns the view that is being inserted, and &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:leave&quot;)&lt;/code&gt; returns the view that is being removed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; メソッドを使用して、現在のホストコンポーネント内の要素を検索してアニメーション化します。 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:enter&quot;)&lt;/code&gt; 文が挿入されているビューを返し、 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(&quot;:leave&quot;)&lt;/code&gt; 削除されているビューを返します。</target>
        </trans-unit>
        <trans-unit id="ebd22958c7847fa77a78ef8e03b47db2e683c9d2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function to define a set of styles to associate with a given state name. Note that the style attributes must be in &lt;a href=&quot;glossary#case-conventions&quot;&gt;&lt;em&gt;camelCase&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 与えられた状態名に関連付けるスタイルのセットを定義する機能を。スタイル属性は&lt;a href=&quot;glossary#case-conventions&quot;&gt;&lt;em&gt;camelCaseにある&lt;/em&gt;&lt;/a&gt;必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="91acc14e39e5119c18415965f1423d1c1e94ab00" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; method to simulate the passage of time within the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; task.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; メソッドを使用して、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; タスク内の時間の経過をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="6e11e33b2cc2033eeec839ccb2bf4ff8db1df75b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array as another way to provide services in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. Using &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; makes services visibile in the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）デコレータでサービスを提供する別の方法として、 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列を使用します。 &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; を使用すると、 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; でサービスが表示されます。</target>
        </trans-unit>
        <trans-unit id="e9da9c13c3494d39f9b8123dc99a605e807be36b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; hook to detect and act upon changes that Angular doesn't catch on its own.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; フックを使用して、Angularが独自にキャッチしない変更を検出して対処します。</target>
        </trans-unit>
        <trans-unit id="b14dbf457ff7a844ac29eacc3c02344a0ca4f6f9" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function to convert a component into a class that can be registered with the browser as a custom element. After you register your configured class with the browser's custom-element registry, you can use the new element just like a built-in HTML element in content that you add directly into the DOM:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; カスタム要素としてブラウザに登録することができるクラスにコンポーネントを変換する機能。構成したクラスをブラウザーのカスタム要素レジストリに登録すると、DOMに直接追加するコンテンツの組み込みHTML要素と同じように、新しい要素を使用できます。</target>
        </trans-unit>
        <trans-unit id="c24aafb47c577f92905ee4910fc51532818acf73" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;FormBuilder.array()&lt;/a&gt;&lt;/code&gt; method to define the array, and the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;FormBuilder.control()&lt;/a&gt;&lt;/code&gt; method to populate the array with an initial control.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#array&quot;&gt;FormBuilder.array()&lt;/a&gt;&lt;/code&gt; 配列を定義する方法、および &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#control&quot;&gt;FormBuilder.control()&lt;/a&gt;&lt;/code&gt; メソッドは、初期制御を有するアレイを移入します。</target>
        </trans-unit>
        <trans-unit id="ee7d38fbbd61f8f37159836272223af030e2357d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method to create a programmatic animation using the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function. The method returns an &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">使用し &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; 使用してプログラム的なアニメーションを作成する方法 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数を。このメソッドは &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;AnimationFactory&lt;/a&gt;&lt;/code&gt; インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="3765ca5842a3e715a91529c10554d2f2c436e303" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; strategy, meaning that automatic change detection is deactivated until reactivated by setting the strategy to &lt;code&gt;Default&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt;). Change detection can still be explicitly invoked. This strategy applies to all child directives and cannot be overridden.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt; ストラテジーを使用します。 &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; 、ストラテジーを &lt;code&gt;Default&lt;/code&gt; （CheckAlways）に設定することで、再アクティブ化されるまで自動変更検出が非アクティブ化されます。変更検出は引き続き明示的に呼び出すことができます。この戦略はすべての子ディレクティブに適用され、オーバーライドできません。</target>
        </trans-unit>
        <trans-unit id="b2cf0a1cf425beff3e317842f9cdbcec4e95baf3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function to register states to an animation trigger. Use the &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function to animate between states. When a state is active within a component, its associated styles persist on the element, even when the animation ends.</source>
          <target state="translated">状態をアニメーショントリガーに登録するには、 &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数を使用します。状態間をアニメーション化するには、 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 関数を使用します。コンポーネント内で状態がアクティブな場合、アニメーションが終了しても、関連付けられたスタイルは要素に保持されます。</target>
        </trans-unit>
        <trans-unit id="b3851f1b2f6c392b87e343e5e9be15390610617a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component or directive to let Angular know that a property in that component can receive its value from its parent component. It helps to remember that the data flow is from the perspective of the child component. So an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; allows data to be input &lt;em&gt;into&lt;/em&gt; the child component from the parent component.</source>
          <target state="translated">子コンポーネントまたはディレクティブで &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレーターを使用して、そのコンポーネントのプロパティが親コンポーネントから値を受け取ることができることをAngularに知らせます。データフローは子コンポーネントの観点からのものであることを覚えておくと役立ちます。だから &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; データを入力することを可能にする&lt;em&gt;に&lt;/em&gt;親コンポーネントから子コンポーネント。</target>
        </trans-unit>
        <trans-unit id="ef440cee0d4b619baf1dc108b572b145ffe599c6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator in the child component or directive to allow data to flow from the child &lt;em&gt;out&lt;/em&gt; to the parent.</source>
          <target state="translated">子コンポーネントまたはディレクティブで &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; デコレーターを使用して、データが子&lt;em&gt;から&lt;/em&gt;親に流れるようにします。</target>
        </trans-unit>
        <trans-unit id="cb9e4c97b8a1368fcaea25ed71eeaf564330d68c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Observable&lt;/code&gt; constructor to create an observable stream of any type. The constructor takes as its argument the subscriber function to run when the observable&amp;rsquo;s &lt;code&gt;subscribe()&lt;/code&gt; method executes. A subscriber function receives an &lt;code&gt;Observer&lt;/code&gt; object, and can publish values to the observer's &lt;code&gt;next()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; コンストラクターを使用して、任意のタイプの監視可能なストリームを作成します。コンストラクターは、オブザーバブルの &lt;code&gt;subscribe()&lt;/code&gt; メソッドが実行されるときに実行するサブスクライバー関数を引数として受け取ります。サブスクライバー関数は &lt;code&gt;Observer&lt;/code&gt; オブジェクトを受け取り、オブザーバーの &lt;code&gt;next()&lt;/code&gt; メソッドに値を公開できます。</target>
        </trans-unit>
        <trans-unit id="1173fd6da6508928f593314bd49b24f1cee5a901" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method to define a set of routes. Also, import this &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the main module, &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">一連のルートを定義するには、 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; メソッドを使用します。また、この &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; をメインモジュール &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; 配列にインポートします。</target>
        </trans-unit>
        <trans-unit id="236f90d8a2b43b2b908f826c2dd47da6ccc4d554" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;declarations&lt;/code&gt; array for directives. To use a directive, component, or pipe in a module, you must do a few things:</source>
          <target state="translated">ディレクティブには &lt;code&gt;declarations&lt;/code&gt; 配列を使用します。モジュールでディレクティブ、コンポーネント、またはパイプを使用するには、いくつかのことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="3c3fa69688b331df5c2d1c642a70ae5ecd3bdf4b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;favoriteColorControl&lt;/code&gt;, a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance, to set the new value.</source>
          <target state="translated">使用 &lt;code&gt;favoriteColorControl&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; の新しい値を設定するには、インスタンスを。</target>
        </trans-unit>
        <trans-unit id="16cf1db0421f9d869402c30f489d6a26b1ef363c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;patchValue()&lt;/code&gt; method to replace any properties defined in the object that have changed in the form model.</source>
          <target state="translated">&lt;code&gt;patchValue()&lt;/code&gt; メソッドを使用して、フォームモデルで変更された、オブジェクトで定義されたプロパティを置き換えます。</target>
        </trans-unit>
        <trans-unit id="663da71b4933858141a19f1c639501cb180552d7" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;retry&lt;/code&gt; operator before the &lt;code&gt;catchError&lt;/code&gt; operator. It resubscribes to the original source observable, which can then re-run the full sequence of actions that resulted in the error. If this includes an HTTP request, it will retry that HTTP request.</source>
          <target state="translated">&lt;code&gt;catchError&lt;/code&gt; 演算子の前に &lt;code&gt;retry&lt;/code&gt; 演算子を使用します。監視可能な元のソースを再サブスクライブし、エラーの原因となった一連のアクションをすべて再実行できます。これにHTTPリクエストが含まれている場合、そのHTTPリクエストを再試行します。</target>
        </trans-unit>
        <trans-unit id="3c670bb360c8cc1af3a13abb754e25fbb2f42f5b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;schematics&lt;/code&gt; command to run a named schematic. Provide the path to the project folder, the schematic name, and any mandatory options, in the following format.</source>
          <target state="translated">名前付きの回路図を実行するには、 &lt;code&gt;schematics&lt;/code&gt; コマンドを使用します。プロジェクトフォルダーへのパス、回路図名、および必須オプションを次の形式で入力します。</target>
        </trans-unit>
        <trans-unit id="d6dfca72b156d70b98370724a6bf1ea5950071f5" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;set()&lt;/code&gt; method instead, to return a clone of the current instance with the new changes applied.</source>
          <target state="translated">代わりに &lt;code&gt;set()&lt;/code&gt; メソッドを使用して、新しい変更が適用された現在のインスタンスのクローンを返します。</target>
        </trans-unit>
        <trans-unit id="52f536a15c49df755922f56c142d44e19a8db2b4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;setValue()&lt;/code&gt; method to set a new value for an individual control. The &lt;code&gt;setValue()&lt;/code&gt; method strictly adheres to the structure of the form group and replaces the entire value for the control.</source>
          <target state="translated">個々のコントロールに新しい値を設定するには、 &lt;code&gt;setValue()&lt;/code&gt; メソッドを使用します。 &lt;code&gt;setValue()&lt;/code&gt; メソッドは、厳密にフォームグループの構造に付着して制御するための全体の値を置き換えます。</target>
        </trans-unit>
        <trans-unit id="608e3ecc67d63ebd131072715526770717d76070" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;function form&lt;/em&gt; to apply host styles conditionally by including another selector inside parentheses after &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用する&lt;em&gt;関数形を&lt;/em&gt;した後の括弧内の別のセレクタを含むことにより、条件付きでホストのスタイルを適用するには &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0228ac89e07be504f25494e9676937a8b7718d7a" translate="yes" xml:space="preserve">
          <source>Use the @Injectable() class decorator</source>
          <target state="translated">クラスのデコレータである @Injectable()を使用します。</target>
        </trans-unit>
        <trans-unit id="d3a17a236cfd17da399af8b8cc707e6575ce9b8c" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI and the npm package manager to build and publish your library as an npm package. Libraries are built in &lt;a href=&quot;aot-compiler&quot;&gt;AoT mode&lt;/a&gt; by default, so you do not need to specify the &lt;code&gt;-prod&lt;/code&gt; flag when building for publication.</source>
          <target state="translated">Angular CLIとnpmパッケージマネージャーを使用して、ライブラリを構築し、npmパッケージとして公開します。ライブラリはデフォルトで&lt;a href=&quot;aot-compiler&quot;&gt;AoTモード&lt;/a&gt;でビルドされるため、公開用にビルドするときに &lt;code&gt;-prod&lt;/code&gt; フラグを指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="4633a55586a6fa2e22e42b322b523d199217f07e" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI to generate a new component named &lt;code&gt;hero-detail&lt;/code&gt;.</source>
          <target state="translated">Angular CLIを使用して、 &lt;code&gt;hero-detail&lt;/code&gt; という名前の新しいコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="4d57c142dc3dc54d8d21e3c079a0a3926683c980" translate="yes" xml:space="preserve">
          <source>Use the Angular CLI to generate a new library skeleton with the following command:</source>
          <target state="translated">Angular CLIを使用して、以下のコマンドで新しいライブラリのスケルトンを生成します。</target>
        </trans-unit>
        <trans-unit id="359dd0a4bcbf30fc27fe4c0e62d05c483ce99a29" translate="yes" xml:space="preserve">
          <source>Use the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new displaying-data&lt;/code&gt;&lt;/a&gt; to create a workspace and app named &lt;code&gt;displaying-data&lt;/code&gt;.</source>
          <target state="translated">CLIコマンド&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new displaying-data&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;displaying-data&lt;/code&gt; という名前のワークスペースとアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="38c9f16db58637bd61abdf74662688ec8ee2214e" translate="yes" xml:space="preserve">
          <source>Use the CLI to automatically create the app shell.</source>
          <target state="translated">CLIを使用して、アプリシェルを自動的に作成します。</target>
        </trans-unit>
        <trans-unit id="9ece05677ae45d1939690d567a9eb86967b7bbf8" translate="yes" xml:space="preserve">
          <source>Use the CLI to build the &lt;code&gt;app-shell&lt;/code&gt; target.</source>
          <target state="translated">CLIを使用して &lt;code&gt;app-shell&lt;/code&gt; ターゲットをビルドします。</target>
        </trans-unit>
        <trans-unit id="e5cf2ec90353ca6935df3915b02b577d867b4e88" translate="yes" xml:space="preserve">
          <source>Use the CLI to create the &lt;code&gt;MessageService&lt;/code&gt; in &lt;code&gt;src/app&lt;/code&gt;.</source>
          <target state="translated">CLIを使用して &lt;code&gt;src/app&lt;/code&gt; に &lt;code&gt;MessageService&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="308d836de00681b82b1a6ac4629d26037ebc7917" translate="yes" xml:space="preserve">
          <source>Use the CLI to create the &lt;code&gt;MessagesComponent&lt;/code&gt;.</source>
          <target state="translated">CLIを使用して、 &lt;code&gt;MessagesComponent&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="7cf59379107eb2f1e9f7b6aeeaba809aa6857254" translate="yes" xml:space="preserve">
          <source>Use the CLI to generate it.</source>
          <target state="translated">CLIを使って生成します。</target>
        </trans-unit>
        <trans-unit id="9784a04039a561954033d9fe973f0a4c5920fe5c" translate="yes" xml:space="preserve">
          <source>Use the HTML</source>
          <target state="translated">HTMLを使用します。</target>
        </trans-unit>
        <trans-unit id="5bbf6b5276a555599737d1dbfa3accbd3fb1e8c7" translate="yes" xml:space="preserve">
          <source>Use the ID in this previous-state object to differentiate between a newly created state and one returned to by a &lt;code&gt;popstate&lt;/code&gt; event, so that you can restore some remembered state, such as scroll position.</source>
          <target state="translated">この以前の状態オブジェクトのIDを使用して、新しく作成された状態と &lt;code&gt;popstate&lt;/code&gt; イベントによって返された状態を区別し、スクロール位置などの記憶された状態を復元できるようにします。</target>
        </trans-unit>
        <trans-unit id="ef9afc5479b408292ddfb0e17196fc61151a2e25" translate="yes" xml:space="preserve">
          <source>Use the cart service</source>
          <target state="translated">カートサービスを利用する</target>
        </trans-unit>
        <trans-unit id="eecd35206481b79b7c4507d8f30817c32cca25ef" translate="yes" xml:space="preserve">
          <source>Use the component instance to set the value of the &lt;code&gt;favoriteColor&lt;/code&gt; property.</source>
          <target state="translated">コンポーネントインスタンスを使用して、 &lt;code&gt;favoriteColor&lt;/code&gt; プロパティの値を設定します。</target>
        </trans-unit>
        <trans-unit id="9d9ebb52ab384cbcfd61b51ce977015d8e0b30b7" translate="yes" xml:space="preserve">
          <source>Use the constructor of &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; to set its initial value, which in this case is an empty string. By creating these controls in your component class, you get immediate access to listen for, update, and validate the state of the form input.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のコンストラクターを使用して、初期値（この場合は空の文字列）を設定します。これらのコントロールをコンポーネントクラスに作成することで、フォーム入力の状態をリッスン、更新、および検証するための即時アクセスを取得できます。</target>
        </trans-unit>
        <trans-unit id="e7587cbf004aad2b4e56b322cfef850309d1e76b" translate="yes" xml:space="preserve">
          <source>Use the default &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; strategy, in which change detection is automatic until explicitly deactivated.</source>
          <target state="translated">明示的に非アクティブ化されるまで変更の検出が自動的に行われる、デフォルトの &lt;code&gt;&lt;a href=&quot;changedetectionstrategy&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; 戦略を使用します。</target>
        </trans-unit>
        <trans-unit id="99d11f8688c1e1b1658b40526cee3f9f4dfd5fa0" translate="yes" xml:space="preserve">
          <source>Use the factory object to create an &lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; and attach it to a DOM element.</source>
          <target state="translated">ファクトリオブジェクトを使用して &lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; を作成し、DOM要素にアタッチします。</target>
        </trans-unit>
        <trans-unit id="09aee07ff0cbe6302c8871e0400bf8743cc280bd" translate="yes" xml:space="preserve">
          <source>Use the following content in the JavaScript configuration file.</source>
          <target state="translated">JavaScriptの設定ファイルでは、以下の内容を使用します。</target>
        </trans-unit>
        <trans-unit id="7e1c4b14a5abd7301b86d2981a9d5c9c7b2e3b27" translate="yes" xml:space="preserve">
          <source>Use the getter syntax to create an &lt;code&gt;aliases&lt;/code&gt; class property to retrieve the alias's form array control from the parent form group.</source>
          <target state="translated">ゲッター構文​​を使用して &lt;code&gt;aliases&lt;/code&gt; クラスプロパティを作成し、親フォームグループからエイリアスのフォーム配列コントロールを取得します。</target>
        </trans-unit>
        <trans-unit id="2b9f9c8bf8a06791c1b3d0e9f88f619639572ebe" translate="yes" xml:space="preserve">
          <source>Use the hash symbol (#) to declare a reference variable. The following reference variable, &lt;code&gt;#phone&lt;/code&gt;, declares a &lt;code&gt;phone&lt;/code&gt; variable on an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">参照変数を宣言するには、ハッシュ記号（＃）を使用します。次の参照変数 &lt;code&gt;#phone&lt;/code&gt; は、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素で &lt;code&gt;phone&lt;/code&gt; 変数を宣言します。</target>
        </trans-unit>
        <trans-unit id="bc2bab9bb36109c9261e4e21e1209550f2534701" translate="yes" xml:space="preserve">
          <source>Use the largest version, including beta and RCs.</source>
          <target state="translated">ベータ版、RC版を含む最大のバージョンを使用してください。</target>
        </trans-unit>
        <trans-unit id="a68d4930594481bd496a5d3065ddf5ac88c6c31d" translate="yes" xml:space="preserve">
          <source>Use the native encapsulation mechanism of the renderer. See &lt;a href=&quot;https://github.com/angular/angular/blob/3e992e18ebf51d6036818f26c3d77b52d3ec48eb/packages/core/src/metadata/view.ts#L32&quot;&gt;view.ts&lt;/a&gt;.</source>
          <target state="translated">レンダラーのネイティブのカプセル化メカニズムを使用します。&lt;a href=&quot;https://github.com/angular/angular/blob/3e992e18ebf51d6036818f26c3d77b52d3ec48eb/packages/core/src/metadata/view.ts#L32&quot;&gt;view.tsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84bc78fa2e78ed5dfdea31357fb98bf3bc73c6e3" translate="yes" xml:space="preserve">
          <source>Use the offline template compiler</source>
          <target state="translated">オフラインテンプレートコンパイラを使用する</target>
        </trans-unit>
        <trans-unit id="4e5c044a102c6e5b28de2adf47e3ca6799e2b720" translate="yes" xml:space="preserve">
          <source>Use the player object to control the animation programmatically.</source>
          <target state="translated">プログラムでアニメーションを制御するには、プレーヤーオブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="33b6e8a56b6a428c4c11a0f9864e1086bde51fbc" translate="yes" xml:space="preserve">
          <source>Use the returned AngularJS module in a call to &lt;a href=&quot;https://docs.angularjs.org/api/ngMock/function/angular.mock.module&quot;&gt;&lt;code&gt;angular.mocks.module&lt;/code&gt;&lt;/a&gt; to include this module in the unit test injector.</source>
          <target state="translated">返されたAngularJSモジュールを&lt;a href=&quot;https://docs.angularjs.org/api/ngMock/function/angular.mock.module&quot;&gt; &lt;code&gt;angular.mocks.module&lt;/code&gt; の&lt;/a&gt;呼び出しで使用して、このモジュールを単体テストインジェクターに含めます。</target>
        </trans-unit>
        <trans-unit id="5077e6c1fae00cd3872afeb69763760817a2633f" translate="yes" xml:space="preserve">
          <source>Use the returned class as an &quot;import&quot; when configuring the &lt;code&gt;&lt;a href=&quot;../../../core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../../core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を構成するときに、返されたクラスを「インポート」として使用します。</target>
        </trans-unit>
        <trans-unit id="da723cd932f5f79f6b8665dde136ba0626c258d9" translate="yes" xml:space="preserve">
          <source>Use the same command to create a second lazy-loaded feature module with routing, along with its stub component.</source>
          <target state="translated">同じコマンドを使用して、スタブコンポーネントと一緒に、ルーティングを備えた2つ目のレイジーロード機能モジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="e7ea2de74a92043d55f851bb691e02d30a346279" translate="yes" xml:space="preserve">
          <source>Use the wildcard &lt;code&gt;*&lt;/code&gt; with a style to tell the animation to use whatever the current style value is, and animate with that. Wildcard is a fallback value that's used if the state being animated isn't declared within the trigger.</source>
          <target state="translated">ワイルドカード &lt;code&gt;*&lt;/code&gt; をスタイルとともに使用して、現在のスタイル値が何であっても使用するようにアニメーションに指示し、それでアニメーション化します。ワイルドカードは、アニメーション化される状態がトリガー内で宣言されていない場合に使用されるフォールバック値です。</target>
        </trans-unit>
        <trans-unit id="e31d6952c1ff1fd94a0e173b45067b6c83f34690" translate="yes" xml:space="preserve">
          <source>Use this API as the last resort when direct access to DOM is needed. Use templating and data-binding provided by Angular instead. Alternatively you can take a look at &lt;a href=&quot;renderer2&quot;&gt;&lt;code&gt;Renderer2&lt;/code&gt;&lt;/a&gt; which provides API that can safely be used even when direct access to native elements is not supported.</source>
          <target state="translated">このAPIは、DOMへの直接アクセスが必要な最後の手段として使用してください。代わりに、Angularが提供するテンプレートおよびデータバインディングを使用してください。または、ネイティブ要素への直接アクセスがサポートされていない場合でも安全に使用できるAPIを提供する&lt;a href=&quot;renderer2&quot;&gt; &lt;code&gt;Renderer2&lt;/code&gt; &lt;/a&gt;を確認できます。</target>
        </trans-unit>
        <trans-unit id="66dc17561e140a926f2fa11ae753d9ec492fade0" translate="yes" xml:space="preserve">
          <source>Use this API to define how an HTML element can move, change color, grow or shrink, fade, or slide off the page. These changes can occur simultaneously or sequentially. You can control the timing of each of these transformations. The function calls generate the data structures and metadata that enable Angular to integrate animations into templates and run them based on application states.</source>
          <target state="translated">この API を使用して、HTML 要素の移動、色の変更、成長、縮小、フェード、またはページからのスライドの仕方を定義します。これらの変更は、同時にまたは連続して行うことができます。これらの各変換のタイミングを制御することができます。関数呼び出しによってデータ構造とメタデータが生成され、Angularがアニメーションをテンプレートに統合し、アプリケーションの状態に基づいてアニメーションを実行できるようになります。</target>
        </trans-unit>
        <trans-unit id="239c77567c5a5ce0197bcc941ceca052e2b45d4e" translate="yes" xml:space="preserve">
          <source>Use this API to register directives, build form and data models, and provide validation to your forms. Validators can be synchronous or asynchronous depending on your use case. You can also extend the built-in functionality provided by forms in Angular by using the interfaces and tokens to create custom validators and input elements.</source>
          <target state="translated">この API を使用して、ディレクティブの登録、フォームやデータモデルの構築、フォームのバリデーションを行います。バリデータはユースケースに応じて同期または非同期のどちらでも構いません。また、インターフェイスやトークンを使ってカスタムバリデータや入力要素を作成することで、Angularのフォームが提供する組み込み機能を拡張することもできます。</target>
        </trans-unit>
        <trans-unit id="98648d6e7331cfddebf675e6e48d5ecfd58e4545" translate="yes" xml:space="preserve">
          <source>Use this directive to validate a sub-group of your form separately from the rest of your form, or if some values in your domain model make more sense to consume together in a nested object.</source>
          <target state="translated">このディレクティブを使って、フォームのサブグループをフォームの残りの部分とは別に検証したり、ドメインモデルの中のいくつかの値をネストされたオブジェクトにまとめて使用した方がより意味がある場合に使用します。</target>
        </trans-unit>
        <trans-unit id="c2f2d6d2eb1b9fd68f5d4923160640fa9a45cb27" translate="yes" xml:space="preserve">
          <source>Use this enum at bootstrap as an option of &lt;code&gt;bootstrapModule&lt;/code&gt; to define the strategy that the compiler should use in case of missing translations:</source>
          <target state="translated">オプションとして、ブートストラップで、この列挙型を使用し &lt;code&gt;bootstrapModule&lt;/code&gt; コンパイラが行方不明翻訳の場合には使用すべきであるという戦略を定義するには：</target>
        </trans-unit>
        <trans-unit id="f91861f9b1b35370d057dd7a059c665663e94008" translate="yes" xml:space="preserve">
          <source>Use this method to detect a change that Angular overlooked.</source>
          <target state="translated">このメソッドを使って、Angularが見落としていた変更を検出します。</target>
        </trans-unit>
        <trans-unit id="02a000c17e1eb4958b9423311364219b7482d859" translate="yes" xml:space="preserve">
          <source>Use this service to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use &lt;a href=&quot;renderer#setElementProperty&quot;&gt;setElementProperty&lt;/a&gt; or &lt;a href=&quot;renderer#setElementAttribute&quot;&gt;setElementAttribute&lt;/a&gt; respectively.</source>
          <target state="translated">このサービスを使用して、Angularのテンプレートをバイパスし、宣言的に表現できないカスタムUIの変更を行います。たとえば、静的に名前がわからないプロパティまたは属性を設定する必要がある場合は、それぞれ&lt;a href=&quot;renderer#setElementProperty&quot;&gt;setElementProperty&lt;/a&gt;または&lt;a href=&quot;renderer#setElementAttribute&quot;&gt;setElementAttributeを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="51dda038803b68b227c51a7dd1d4b365f5cd7449" translate="yes" xml:space="preserve">
          <source>Use this technique to create a dependency object with a factory function whose inputs are a combination of &lt;em&gt;injected services&lt;/em&gt; and &lt;em&gt;local state&lt;/em&gt;.</source>
          <target state="translated">この手法を使用して、入力が&lt;em&gt;注入されたサービス&lt;/em&gt;と&lt;em&gt;ローカル状態の&lt;/em&gt;組み合わせであるファクトリ関数を持つ依存関係オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="b2f43a26151d902b04c11d0c3a3e3e04a2047274" translate="yes" xml:space="preserve">
          <source>Use this token at bootstrap to provide the content of your translation file (&lt;code&gt;xtb&lt;/code&gt;, &lt;code&gt;xlf&lt;/code&gt; or &lt;code&gt;xlf2&lt;/code&gt;) when you want to translate your application in another language.</source>
          <target state="translated">アプリケーションを別の言語に翻訳する場合は、ブートストラップでこのトークンを使用して、翻訳ファイル（ &lt;code&gt;xtb&lt;/code&gt; 、 &lt;code&gt;xlf&lt;/code&gt; または &lt;code&gt;xlf2&lt;/code&gt; ）のコンテンツを提供します。</target>
        </trans-unit>
        <trans-unit id="094736eaeca16e2bc6a94afbc3cacd046430016c" translate="yes" xml:space="preserve">
          <source>Use to find one or more inner HTML elements within the current element.</source>
          <target state="translated">現在の要素の中から1つ以上の内部HTML要素を見つけるために使用します。</target>
        </trans-unit>
        <trans-unit id="ceb45b9a9a131e5ceaa63ef67912c840118032d7" translate="yes" xml:space="preserve">
          <source>Use to get the &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; of elements or directives from the content DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.</source>
          <target state="translated">コンテンツDOMから要素またはディレクティブの &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; を取得するために使用します。子要素が追加、削除、または移動されるたびに、クエリリストが更新され、クエリリストの監視可能な変更によって新しい値が生成されます。</target>
        </trans-unit>
        <trans-unit id="aaf7d01d8950aef25f0bf03d88c14b898cbfd099" translate="yes" xml:space="preserve">
          <source>Use to get the &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; of elements or directives from the view DOM. Any time a child element is added, removed, or moved, the query list will be updated, and the changes observable of the query list will emit a new value.</source>
          <target state="translated">ビューDOMから要素またはディレクティブの &lt;code&gt;&lt;a href=&quot;querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; を取得するために使用します。子要素が追加、削除、または移動されるたびに、クエリリストが更新され、クエリリストの監視可能な変更によって新しい値が生成されます。</target>
        </trans-unit>
        <trans-unit id="51523185d9e70bc9258966c8eac5f9f38fa211f8" translate="yes" xml:space="preserve">
          <source>Use to get the first element or the directive matching the selector from the content DOM. If the content DOM changes, and a new child matches the selector, the property will be updated.</source>
          <target state="translated">コンテンツ DOM からセレクタにマッチする最初の要素やディレクティブを取得するために使用します。コンテンツ DOM が変更され、新しい子がセレクタにマッチした場合は、プロパティが更新されます。</target>
        </trans-unit>
        <trans-unit id="a87e5cd79cc9d650614c0174e0c297ada3478f25" translate="yes" xml:space="preserve">
          <source>Use to store arbitrary developer-defined data on a renderer instance, as an object containing key-value pairs. This is useful for renderers that delegate to other renderers.</source>
          <target state="translated">キーと値のペアを含むオブジェクトとして、レンダラー インスタンス上の任意の開発者定義データを格納するために使用します。これは、他のレンダラーに委任するレンダラーに便利です。</target>
        </trans-unit>
        <trans-unit id="e25c946e66827dc805dd24ff51d8ae7f98f6815b" translate="yes" xml:space="preserve">
          <source>Use with animations test-only mode. Notifies the test when rendering has completed.</source>
          <target state="translated">アニメーションのテスト専用モードで使用します。レンダリングが完了したときにテストを通知します。</target>
        </trans-unit>
        <trans-unit id="eca7e21232f973eab61af44da3d689a26c0f17dc" translate="yes" xml:space="preserve">
          <source>Use with caution</source>
          <target state="translated">注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="ef1c61aa074b0daa2467d00ee7659dad5f0b62ee" translate="yes" xml:space="preserve">
          <source>Use with ngModel</source>
          <target state="translated">ngModel との併用</target>
        </trans-unit>
        <trans-unit id="bddb8fbb30136aa27bb73ecdceb87cca98f6bcc9" translate="yes" xml:space="preserve">
          <source>Use with the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; call. Instead of applying animations from the current state to the destination state, keyframes describe how each style entry is applied and at what point within the animation arc. Compare &lt;a href=&quot;https://www.w3schools.com/css/css3_animations.asp&quot;&gt;CSS Keyframe Animations&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 呼び出しで使用します。キーフレームは、現在の状態から目的の状態にアニメーションを適用する代わりに、各スタイルエントリがどのように適用され、アニメーションアーク内のどの時点にあるかを示します。&lt;a href=&quot;https://www.w3schools.com/css/css3_animations.asp&quot;&gt;CSSキーフレームアニメーションを&lt;/a&gt;比較します。</target>
        </trans-unit>
        <trans-unit id="6d45dfd3ff2a81b444a5dc591b91dc8c66653e7e" translate="yes" xml:space="preserve">
          <source>Use within an animation &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; call to issue a timing gap after each queried item is animated.</source>
          <target state="translated">アニメーション &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 呼び出し内で使用して、クエリされた各アイテムがアニメーション化された後にタイミングギャップを発行します。</target>
        </trans-unit>
        <trans-unit id="652f99cdce6039c1c4c392a599facc0ac9d2adbf" translate="yes" xml:space="preserve">
          <source>Use within an animation &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; call to issue a timing gap after each queried item is animated.</source>
          <target state="translated">アニメーション &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 呼び出し内で使用して、クエリされた各アイテムがアニメーション化された後にタイミングギャップを発行します。</target>
        </trans-unit>
        <trans-unit id="b8859d06d9af44888d766f829a446792669e41bf" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; to associate custom rendering data and styles with a rendering implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; がカスタムレンダリングデータとスタイルをレンダリング実装に関連付けるために使用します。</target>
        </trans-unit>
        <trans-unit id="94c0582398c2c0bb749ac544039ffb4bb01b9afa" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpparams&quot;&gt;HttpParams&lt;/a&gt;&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="60c65c08999202c9b804c2bf81c87ddaf0860f85" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; to associate custom rendering data and styles with a rendering implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; がカスタムレンダリングデータとスタイルをレンダリング実装に関連付けるために使用します。</target>
        </trans-unit>
        <trans-unit id="6f7d0b82c6afb0f2e3b4d749e7cc7ac4a4f630d9" translate="yes" xml:space="preserve">
          <source>Used only in debug mode to serialize property changes to dom nodes as attributes.</source>
          <target state="translated">デバッグモードでのみ使用され、domノードへのプロパティ変更を属性としてシリアライズします。</target>
        </trans-unit>
        <trans-unit id="7005a105d0d69ea62d874ba99e5723ee092e0f01" translate="yes" xml:space="preserve">
          <source>Used only in generated code. No source code should depend on this API.</source>
          <target state="translated">生成されたコードでのみ使用されます。この API に依存するソースコードはありません。</target>
        </trans-unit>
        <trans-unit id="14a1cad3d2bd65cf489b11e28cb9d774f23a3e7d" translate="yes" xml:space="preserve">
          <source>Used to load ng module factories.</source>
          <target state="translated">ngモジュール工場のロードに使用します。</target>
        </trans-unit>
        <trans-unit id="f3e8b3ef8c7b0f5735596a0cecd6a98afb2da940" translate="yes" xml:space="preserve">
          <source>Used to mark Async start. Async are similar to scope but they don't have to be strictly nested. The return value is used in the call to [endAsync]. Async ranges only work if WTF has been enabled.</source>
          <target state="translated">Async の開始をマークするために使用します。Asyncはスコープと似ていますが、厳密に入れ子にする必要はありません。戻り値は [endAsync]の呼び出しで使用されます。Asyncの範囲はWTFが有効になっている場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="599d8de2a24b2f250ae7926588cacd259bc9a982" translate="yes" xml:space="preserve">
          <source>Used to mark end of Scope.</source>
          <target state="translated">スコープの終わりを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="e2c9ab424d315bb61a8d13d1e6541ce25bacbe35" translate="yes" xml:space="preserve">
          <source>Used to mark scope entry. The return value is used to leave the scope.</source>
          <target state="translated">スコープに入ったことをマークするために使用します。戻り値はスコープを抜けるときに使用します。</target>
        </trans-unit>
        <trans-unit id="b3503a2162dbb4997a5439b46fb2c2bf5478d21a" translate="yes" xml:space="preserve">
          <source>Used to provide a &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for form controls.</source>
          <target state="translated">フォームコントロールに &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; を提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="6e34138b486124e172c27967e95851b105c53c11" translate="yes" xml:space="preserve">
          <source>Used to provide a &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for form controls.</source>
          <target state="translated">フォームコントロールに &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; を提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1c9a0ff249b4ff0367c0e831859d912df5989e4a" translate="yes" xml:space="preserve">
          <source>Used when AngularJS is loaded lazily, and not available on &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">AngularJSが遅延して読み込まれ、 &lt;code&gt;window&lt;/code&gt; では使用できない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="8fcc9eb0d01cd2af8a401bb5fbad0ceddd4ebbd6" translate="yes" xml:space="preserve">
          <source>Useful tools and tips for Angular.</source>
          <target state="translated">Angularの便利なツールやTipsを紹介します。</target>
        </trans-unit>
        <trans-unit id="0b75d4ee12567b39421e5cdafacb9fdac3567042" translate="yes" xml:space="preserve">
          <source>User Input</source>
          <target state="translated">ユーザー入力</target>
        </trans-unit>
        <trans-unit id="602a8dcdba61fe963a2ee0eabfa7c6c12caef58a" translate="yes" xml:space="preserve">
          <source>User actions such as clicking a link, pushing a button, and entering text raise DOM events. This page explains how to bind those events to component event handlers using the Angular event binding syntax.</source>
          <target state="translated">リンクをクリックしたり、ボタンを押したり、テキストを入力したりといったユーザーアクションは DOM イベントを発生させます。このページでは、Angular のイベントバインディング構文を使って、それらのイベントをコンポーネントのイベントハンドラにバインドする方法を説明します。</target>
        </trans-unit>
        <trans-unit id="058b267dc9414eb566cadb188507382a9127c368" translate="yes" xml:space="preserve">
          <source>User events other than &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; clicks aren't supported. You must wait for the full client app to bootstrap and run, or buffer the events using libraries like &lt;a href=&quot;https://github.com/angular/preboot&quot;&gt;preboot&lt;/a&gt;, which allow you to replay these events once the client-side scripts load.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; クリック以外のユーザーイベントはサポートされていません。完全なクライアントアプリがブートストラップして実行されるまで待つか、&lt;a href=&quot;https://github.com/angular/preboot&quot;&gt;preboot&lt;/a&gt;などのライブラリを使用してイベントをバッファリングする必要があります。これにより、クライアント側のスクリプトが読み込まれたら、これらのイベントを再生できます。</target>
        </trans-unit>
        <trans-unit id="5141e17357a02f63be66086ece12a9f2d302df1e" translate="yes" xml:space="preserve">
          <source>Users can add, edit, and delete heroes and save these changes over HTTP.</source>
          <target state="translated">ユーザーは、ヒーローの追加、編集、削除を行い、これらの変更をHTTPで保存することができます。</target>
        </trans-unit>
        <trans-unit id="ffb71aafecac3c94302931b31f63e1168c9b1166" translate="yes" xml:space="preserve">
          <source>Users can click on a product name from the list to see details in a new view, with a distinct URL (route)</source>
          <target state="translated">ユーザーはリストから商品名をクリックすると、URL(ルート)を指定して新しいビューで詳細を見ることができます。</target>
        </trans-unit>
        <trans-unit id="6701a88f4173410a6b0358f016f5ca47cd5c83bc" translate="yes" xml:space="preserve">
          <source>Users can opt in to share their Angular CLI usage data with &lt;a href=&quot;https://support.google.com/analytics/answer/1008015?hl=en&quot;&gt;Google Analytics&lt;/a&gt;, using the &lt;a href=&quot;https://angular.io/cli/analytics&quot;&gt;&lt;code&gt;ng analytics&lt;/code&gt; CLI command&lt;/a&gt;. The data is also shared with the Angular team, and used to improve the CLI.</source>
          <target state="translated">ユーザーは、&lt;a href=&quot;https://angular.io/cli/analytics&quot;&gt; &lt;code&gt;ng analytics&lt;/code&gt; &lt;/a&gt; CLIコマンドを使用して、Angular CLIの使用状況データを&lt;a href=&quot;https://support.google.com/analytics/answer/1008015?hl=en&quot;&gt;Googleアナリティクス&lt;/a&gt;と共有することを選択できます。データはAngularチームとも共有され、CLIの改善に使用されます。</target>
        </trans-unit>
        <trans-unit id="9f300cd0d7b9a4b1286d7eb15eb10210c5e6bec6" translate="yes" xml:space="preserve">
          <source>Users can search for heroes by name.</source>
          <target state="translated">ユーザーは、名前からヒーローを検索することができます。</target>
        </trans-unit>
        <trans-unit id="e75567a342e40c9e2e644d8dc12675b4ec829db5" translate="yes" xml:space="preserve">
          <source>Users should be able to edit the hero name in an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; textbox.</source>
          <target state="translated">ユーザーは、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; テキストボックスでヒーロー名を編集できる必要があります。</target>
        </trans-unit>
        <trans-unit id="7b3840d786e1f73b113066b49ab864de5ce34535" translate="yes" xml:space="preserve">
          <source>Users that visit your URL will see a development server start up, and then your application will load.</source>
          <target state="translated">あなたのURLにアクセスしたユーザーは、開発サーバーが起動し、アプリケーションがロードされるのを見ることができます。</target>
        </trans-unit>
        <trans-unit id="39302b04bcbaac9bc8c1d2667096f87cf5896e04" translate="yes" xml:space="preserve">
          <source>Users update crisis information in the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. Unlike the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, the user changes do not update the crisis entity immediately. Instead, the app updates the entity when the user presses the &lt;em&gt;Save&lt;/em&gt; button and discards the changes when the user presses the &lt;em&gt;Cancel&lt;/em&gt; button.</source>
          <target state="translated">ユーザーは &lt;code&gt;CrisisDetailComponent&lt;/code&gt; の危機情報を更新します。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; とは異なり、ユーザーを変更しても、危機的エンティティはすぐには更新されません。代わりに、ユーザーが[ &lt;em&gt;保存&lt;/em&gt; ]ボタンを押すと、アプリはエンティティを更新し、[ &lt;em&gt;キャンセル&lt;/em&gt; ]ボタンを押すと、変更を破棄します。</target>
        </trans-unit>
        <trans-unit id="7e5352cba15d17c20f0a63d91386ede57619fc48" translate="yes" xml:space="preserve">
          <source>Users want to see the heroes in alphabetical order. Rather than modify the original component, sub-class it and create a &lt;code&gt;SortedHeroesComponent&lt;/code&gt; that sorts the heroes before presenting them. The &lt;code&gt;SortedHeroesComponent&lt;/code&gt; lets the base class fetch the heroes.</source>
          <target state="translated">ユーザーは英雄をアルファベット順に表示したいと考えています。元のコンポーネントを変更するのではなく、それを &lt;code&gt;SortedHeroesComponent&lt;/code&gt; し、ヒーローを表示する前にソートするSortedHeroesComponentを作成します。 &lt;code&gt;SortedHeroesComponent&lt;/code&gt; は、基本クラスが英雄をフェッチすることができます。</target>
        </trans-unit>
        <trans-unit id="c2f8c815cbd3d0f6b995bdfc4167eccf93e89835" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to determine which child view is entering and which is leaving the host view.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; を使用して、ホストビューに入る子ビューとホストビューから出る子ビューを判別します。</target>
        </trans-unit>
        <trans-unit id="31aea878b7cc6457d61c00c1a42726ffdd26bdea" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; function to make the inner animations run in parallel.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 関数を使用して、内部アニメーションを並行して実行します。</target>
        </trans-unit>
        <trans-unit id="eb3f711d4d463174e45d6d4d25298cf04c07c73e" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;XMLHttpRequest&lt;/code&gt; to send requests to a backend server.</source>
          <target state="translated">&lt;code&gt;XMLHttpRequest&lt;/code&gt; を使用して、リクエストをバックエンドサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="fb544a35f46de4fa74e1a77fac25ace9926dc2ca" translate="yes" xml:space="preserve">
          <source>Uses the cart service's &lt;code&gt;#addToCart()&lt;/code&gt; method to add the product to the cart</source>
          <target state="translated">カートサービスの &lt;code&gt;#addToCart()&lt;/code&gt; メソッドを使用して、商品をカートに追加します。</target>
        </trans-unit>
        <trans-unit id="26498e934159fe90edddba43e16fe5686239bbb3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt;&lt;/a&gt; to group elements when there is no suitable host element for the directive.</source>
          <target state="translated">ディレクティブに適切なホスト要素がない場合に&lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; &lt;/a&gt;を使用して要素をグループ化します。</target>
        </trans-unit>
        <trans-unit id="dafc513bc116615d9bcd01ae37d00fbc6d71e7be" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; allows the TypeScript compiler to infer that the &lt;code&gt;person&lt;/code&gt; used in the binding expression will never be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; することことを推測するために活字体のコンパイラを許可する &lt;code&gt;person&lt;/code&gt; バインディング式で使用がするん &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2079239a97ead0b33bc251fc5c650a30d5b63e76" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="009d6972085fee6a31f1c55238d2601d61726d62" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; in a form gives you more than just two-way data binding. It also tells you if the user touched the control, if the value changed, or if the value became invalid.</source>
          <target state="translated">フォームで &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用すると、双方向のデータバインディングだけではありません。また、ユーザーがコントロールに触れたかどうか、値が変更されたかどうか、値が無効になったかどうかもわかります。</target>
        </trans-unit>
        <trans-unit id="ecb3202cb740968562d3700dc9265b6286e554ac" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; （）の使用</target>
        </trans-unit>
        <trans-unit id="b80bc244560b6471b5ebc73479dd0654103c5a79" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is a good option for hybrid apps when you want to keep the AngularJS and Angular parts less coupled. You can still mix and match components and services from both frameworks, but you might need to manually propagate change detection. In return, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; offers more control and better performance.</source>
          <target state="translated">AngularJSとAngularパーツの結合を少なくしたい場合、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; を使用することは、ハイブリッドアプリに適したオプションです。両方のフレームワークのコンポーネントとサービスを混在させて一致させることはできますが、変更検出を手動で伝達する必要がある場合があります。その代わりに、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; はより多くの制御とより良いパフォーマンスを提供します。</target>
        </trans-unit>
        <trans-unit id="74169e90061ae53df7dfd46eec63ac28d5d94ef4" translate="yes" xml:space="preserve">
          <source>Using Ahead-of-time compilation with hybrid apps</source>
          <target state="translated">ハイブリッドアプリでの先取りコンパイルの使用</target>
        </trans-unit>
        <trans-unit id="0f882c8db368aa93dcfdc9565b2fe479a0f65394" translate="yes" xml:space="preserve">
          <source>Using Angular Components from AngularJS Code</source>
          <target state="translated">AngularJSのコードからAngularコンポーネントを使う</target>
        </trans-unit>
        <trans-unit id="23d76136981acebe9548a54e9f89615171752fe2" translate="yes" xml:space="preserve">
          <source>Using Angular with Visual Studio 2015</source>
          <target state="translated">Visual Studio 2015でAngularを使う</target>
        </trans-unit>
        <trans-unit id="17c25861439c77e4c24ac7b18b709a16ebcd8414" translate="yes" xml:space="preserve">
          <source>Using AngularJS Component Directives from Angular Code</source>
          <target state="translated">AngularコードからAngularJSのコンポーネントディレクティブを使う</target>
        </trans-unit>
        <trans-unit id="6eedc5b4078ec5038cac8e2b9d65aa8e2af22115" translate="yes" xml:space="preserve">
          <source>Using Bazel with the Angular CLI</source>
          <target state="translated">Angular CLIでBazelを使う</target>
        </trans-unit>
        <trans-unit id="c8043476b24c21372dff83314cac228b720e7e28" translate="yes" xml:space="preserve">
          <source>Using Component Directives</source>
          <target state="translated">コンポーネントディレクティブの使用</target>
        </trans-unit>
        <trans-unit id="5a929294f1668f68b734694e2f6b28e39e561245" translate="yes" xml:space="preserve">
          <source>Using Components and Injectables</source>
          <target state="translated">コンポーネントと注射剤の使用</target>
        </trans-unit>
        <trans-unit id="8560edfb2496478ddf9a15a34d1f1a4eea8ae268" translate="yes" xml:space="preserve">
          <source>Using Ivy in a new project</source>
          <target state="translated">新しいプロジェクトでIvyを使う</target>
        </trans-unit>
        <trans-unit id="cf8265992d20fc1bd54761a66691a09bc3fa959c" translate="yes" xml:space="preserve">
          <source>Using Ivy in an existing project</source>
          <target state="translated">既存のプロジェクトでIvyを使用する</target>
        </trans-unit>
        <trans-unit id="bd58271391a20dd5989d94d3502323887e683ca7" translate="yes" xml:space="preserve">
          <source>Using Published Libraries</source>
          <target state="translated">公開されているライブラリの使用</target>
        </trans-unit>
        <trans-unit id="85890bb2deccf4180db150068e3ca159756d5544" translate="yes" xml:space="preserve">
          <source>Using UpgradeModule with Angular &lt;code&gt;NgModules&lt;/code&gt;</source>
          <target state="translated">Angular &lt;code&gt;NgModules&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="26f2d58b409e22020a26e1496a62efdcfdf36b19" translate="yes" xml:space="preserve">
          <source>Using Web Workers with Angular CLI</source>
          <target state="translated">Angular CLIでWebワーカーを使う</target>
        </trans-unit>
        <trans-unit id="25a7a129fc73369732e5d055709e4cf9d964e38c" translate="yes" xml:space="preserve">
          <source>Using a Module Loader</source>
          <target state="translated">モジュールローダーの使用</target>
        </trans-unit>
        <trans-unit id="1bb470f1f27338d27d105cf1de41569b72b27987" translate="yes" xml:space="preserve">
          <source>Using a checkbox with a reactive form.</source>
          <target state="translated">リアクティブなフォームでチェックボックスを使う</target>
        </trans-unit>
        <trans-unit id="31590c1417cdeb82cd1f78154e9df03671bd0ac5" translate="yes" xml:space="preserve">
          <source>Using a class as an interface gives you the characteristics of an interface in a real JavaScript object. To minimize memory cost, however, the class should have &lt;em&gt;no implementation&lt;/em&gt;. The &lt;code&gt;MinimalLogger&lt;/code&gt; transpiles to this unoptimized, pre-minified JavaScript for a constructor function.</source>
          <target state="translated">クラスをインターフェースとして使用すると、実際のJavaScriptオブジェクトのインターフェースの特性が得られます。ただし、メモリコストを最小限に抑えるには、クラスに&lt;em&gt;実装&lt;/em&gt;を含め&lt;em&gt;ないで&lt;/em&gt;ください。 &lt;code&gt;MinimalLogger&lt;/code&gt; は、コンストラクタ関数のために、この最適化されていない、事前に縮小さJavaScriptにtranspiles。</target>
        </trans-unit>
        <trans-unit id="4d9d664f928769890dab78d8b2d3d0c3e2b54a9f" translate="yes" xml:space="preserve">
          <source>Using a custom provider allows you to provide a concrete implementation for implicit dependencies, such as built-in browser APIs. The following example uses an &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; to provide the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;localStorage&lt;/a&gt; browser API as a dependency in the &lt;code&gt;BrowserStorageService&lt;/code&gt;.</source>
          <target state="translated">カスタムプロバイダーを使用すると、組み込みのブラウザーAPIなど、暗黙的な依存関係の具体的な実装を提供できます。次の例では、 &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage&quot;&gt;localStorage&lt;/a&gt;ブラウザAPIを &lt;code&gt;BrowserStorageService&lt;/code&gt; の依存関係として提供しています。</target>
        </trans-unit>
        <trans-unit id="02aeb5cb190c15997bab2a850739e9d394f7fa3c" translate="yes" xml:space="preserve">
          <source>Using a module loader such as &lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt;, &lt;a href=&quot;http://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt;, or &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; allows us to use the built-in module systems of TypeScript or ES2015. You can use the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; features that explicitly specify what code can and will be shared between different parts of the application. For ES5 applications you can use CommonJS style &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt; features. In both cases, the module loader will then take care of loading all the code the application needs in the correct order.</source>
          <target state="translated">などのモジュールローダを使用して&lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt;、&lt;a href=&quot;http://webpack.github.io/&quot;&gt;WebPACKの&lt;/a&gt;、または&lt;a href=&quot;http://browserify.org/&quot;&gt;Browserifyは、&lt;/a&gt;私たちが内蔵された活字体またはES2015のモジュールシステムを使用することができます。アプリケーションのさまざまな部分で共有できるコードと共有できるコードを明示的に指定する &lt;code&gt;import&lt;/code&gt; および &lt;code&gt;export&lt;/code&gt; 機能を使用できます。 ES5アプリケーションでは、CommonJSスタイルの &lt;code&gt;require&lt;/code&gt; および &lt;code&gt;module.exports&lt;/code&gt; 機能を使用できます。どちらの場合も、モジュールローダーは、アプリケーションが必要とするすべてのコードを正しい順序でロードします。</target>
        </trans-unit>
        <trans-unit id="f25102a62964a05eaec1c93977c505a046e3af36" translate="yes" xml:space="preserve">
          <source>Using a multi-select control</source>
          <target state="translated">マルチセレクトコントロールの使用</target>
        </trans-unit>
        <trans-unit id="f0463c4ad562556ca75b5685c437f035005a3898" translate="yes" xml:space="preserve">
          <source>Using a number input with a reactive form.</source>
          <target state="translated">リアクティブフォームで数字入力を使う</target>
        </trans-unit>
        <trans-unit id="43277715c244dfa655936028d9803ebc04d819da" translate="yes" xml:space="preserve">
          <source>Using a range input with a reactive form</source>
          <target state="translated">リアクティブフォームでの範囲入力の使用</target>
        </trans-unit>
        <trans-unit id="0bc00d2438413210675960c941e89d3aaad3f65b" translate="yes" xml:space="preserve">
          <source>Using a standalone ngModel within a group</source>
          <target state="translated">グループ内でのスタンドアロン ngModel の使用</target>
        </trans-unit>
        <trans-unit id="2339a60fcda21d90b519800c5c237255868c84d4" translate="yes" xml:space="preserve">
          <source>Using absolute URLs for server requests</source>
          <target state="translated">サーバーリクエストに絶対URLを使用する</target>
        </trans-unit>
        <trans-unit id="838f5332e38c0970cd6624c40ba4f576025a9c67" translate="yes" xml:space="preserve">
          <source>Using ahead-of-time compilation with hybrid apps</source>
          <target state="translated">ハイブリッドアプリでの先行コンパイルの利用</target>
        </trans-unit>
        <trans-unit id="3fb461289e6b21adcc3eeca9c5745cff8590fa02" translate="yes" xml:space="preserve">
          <source>Using an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt; requires less boilerplate and is a good default option as it supports AOT out-of-the-box. Using a custom function requires slightly more code, but gives you greater flexibility.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt; を使用すると、必要なボイラープレートが少なくなり、すぐに使える AOTをサポートするため、デフォルトのオプションとして適しています。カスタム関数を使用するには、少し多くのコードが必要ですが、柔軟性が高くなります。</target>
        </trans-unit>
        <trans-unit id="225b30fb1178e65060dad8d2124424365a8f210e" translate="yes" xml:space="preserve">
          <source>Using an Angular custom element makes the process much simpler and more transparent, by providing all of the infrastructure and framework automatically&amp;mdash;all you have to do is define the kind of event handling you want. (You do still have to exclude the component from compilation, if you are not going to use it in your app.)</source>
          <target state="translated">Angularカスタム要素を使用すると、インフラストラクチャとフレームワークがすべて自動的に提供されるため、プロセスがはるかにシンプルで透過的になります。必要なのは、必要な種類のイベント処理を定義することだけです。（アプリで使用しない場合は、コンパイルからコンポーネントを除外する必要があります。）</target>
        </trans-unit>
        <trans-unit id="b770296ed0960ba4e0adf200d5857757fb6ba30c" translate="yes" xml:space="preserve">
          <source>Using an external &lt;code&gt;then&lt;/code&gt; template</source>
          <target state="translated">外部 &lt;code&gt;then&lt;/code&gt; テンプレートの使用</target>
        </trans-unit>
        <trans-unit id="6551ed39890875715b3cd0878168d51e0620c7b7" translate="yes" xml:space="preserve">
          <source>Using an inline function</source>
          <target state="translated">インライン関数の使用</target>
        </trans-unit>
        <trans-unit id="1f00ba280ffbec54abe918ad286a8c43241f37e6" translate="yes" xml:space="preserve">
          <source>Using component styles</source>
          <target state="translated">コンポーネントスタイルの使用</target>
        </trans-unit>
        <trans-unit id="326e590dcb9985b96603eaad2f203133d3ba3bbb" translate="yes" xml:space="preserve">
          <source>Using components vs services from other modules</source>
          <target state="translated">コンポーネントと他のモジュールのサービスを使い分ける</target>
        </trans-unit>
        <trans-unit id="a5d277d826e502273f12e8b03216771a9c8b14ca" translate="yes" xml:space="preserve">
          <source>Using containers for native elements</source>
          <target state="translated">ネイティブ要素にコンテナを使用する</target>
        </trans-unit>
        <trans-unit id="dcca472daafb75114b08b61eb39f9ca73d6a3a8d" translate="yes" xml:space="preserve">
          <source>Using corporate proxy</source>
          <target state="translated">コーポレートプロキシの利用</target>
        </trans-unit>
        <trans-unit id="c2a6531054ec097e5ed70a832394e057ca205e4a" translate="yes" xml:space="preserve">
          <source>Using custom elements</source>
          <target state="translated">カスタム要素の使用</target>
        </trans-unit>
        <trans-unit id="d9d0d750c5305782eba2c313f6df5f97406ecfca" translate="yes" xml:space="preserve">
          <source>Using directives with &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModuleでの&lt;/a&gt;ディレクティブの使用</target>
        </trans-unit>
        <trans-unit id="59731cbdea4e70d97215a2a24c9617e473f8ae07" translate="yes" xml:space="preserve">
          <source>Using environment-specific variables in your app</source>
          <target state="translated">アプリで環境固有の変数を使用する</target>
        </trans-unit>
        <trans-unit id="dbf5a34485d6afcadda2f26d6136cf55d8a92517" translate="yes" xml:space="preserve">
          <source>Using ngModel on a standalone control</source>
          <target state="translated">スタンドアロン コントロールでの ngModel の使用</target>
        </trans-unit>
        <trans-unit id="9a7f37dd828f83348b0672d7bb9204b26a305b1d" translate="yes" xml:space="preserve">
          <source>Using ngModel within a form</source>
          <target state="translated">フォーム内での ngModel の使用</target>
        </trans-unit>
        <trans-unit id="767134f57267e4073023d69bfe85a0ae385d07cf" translate="yes" xml:space="preserve">
          <source>Using observables to handle events and asynchronous operations can have the advantage of greater consistency in contexts such as HTTP requests.</source>
          <target state="translated">イベントや非同期操作を処理するためにオブザーバブルを使用すると、HTTPリクエストのようなコンテキストでの一貫性を高めることができます。</target>
        </trans-unit>
        <trans-unit id="525cb205ecf77ef26071eabcc120a080cdae4b66" translate="yes" xml:space="preserve">
          <source>Using one of our &lt;code&gt;options&lt;/code&gt; is very straightforward, we did this in the previous section when we accessed &lt;code&gt;options.command&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 1つを使用するのは非常に簡単です。これは、前のセクションで &lt;code&gt;options.command&lt;/code&gt; にアクセスしたときに行いました。</target>
        </trans-unit>
        <trans-unit id="54dca9e5d7f69c01aedf3f75ceb5a7cb672bb0ac" translate="yes" xml:space="preserve">
          <source>Using pipes</source>
          <target state="translated">パイプの使用</target>
        </trans-unit>
        <trans-unit id="89ebc794fed95d63f9561d0bda00bb5d55f1a0f8" translate="yes" xml:space="preserve">
          <source>Using radio buttons with reactive form directives</source>
          <target state="translated">リアクティブなフォームディレクティブでラジオボタンを使う</target>
        </trans-unit>
        <trans-unit id="2e5b826e5d221359e0500389d0018c9bdd597f16" translate="yes" xml:space="preserve">
          <source>Using route information</source>
          <target state="translated">ルート情報の利用</target>
        </trans-unit>
        <trans-unit id="881f18e8deeb52c2a18dfc164af0a161e22b725b" translate="yes" xml:space="preserve">
          <source>Using runtime-global libraries inside your app</source>
          <target state="translated">アプリ内でのランタイムグローバルライブラリの使用</target>
        </trans-unit>
        <trans-unit id="9bd2ff97908a0c09c2d63474c3cfcc5434417451" translate="yes" xml:space="preserve">
          <source>Using select controls in a reactive form</source>
          <target state="translated">リアクティブフォームでのセレクトコントロールの使用</target>
        </trans-unit>
        <trans-unit id="832a53e426313323000169f37f744b9b7aa99d81" translate="yes" xml:space="preserve">
          <source>Using select controls in a template-driven form</source>
          <target state="translated">テンプレート駆動型のフォームでセレクトコントロールを使用する</target>
        </trans-unit>
        <trans-unit id="88275c4f479097c72fb4415e38dc5583792a3082" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列の使用</target>
        </trans-unit>
        <trans-unit id="8cd2ad1f42cec0fd44d2b578a1a5e65f273ee4d6" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property is preferable to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; array because with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt;, optimization tools can perform tree-shaking, which removes services that your app isn't using and results in smaller bundle sizes.</source>
          <target state="translated">使い方 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; プロパティはに好適である &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; であるため、配列 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 、最適化ツールは、ツリーを揺るがす、小さな束の大きさで、あなたのアプリが使用していないことをサービスと結果を削除し実行することができます。</target>
        </trans-unit>
        <trans-unit id="8e7ac3035137317853416afbb770970d2510fd53" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property to refer to &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;, or &lt;code&gt;root&lt;/code&gt;.</source>
          <target state="translated">使い方 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; のを参照するためにプロパティを &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 、または &lt;code&gt;root&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e75e4bed92d2b5bcba6a93626663647ccf1ee802" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">使い方 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; 配列を。</target>
        </trans-unit>
        <trans-unit id="0c704679875decd7bc5e10cd52d8163394039311" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;&lt;/code&gt; decorator, the injector only looks at the component's injector for its providers. The &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; decorator allows you to skip the local injector and look up in the hierarchy to find a provider that satisfies this dependency. The &lt;code&gt;sessionStorageService&lt;/code&gt; instance interacts with the &lt;code&gt;BrowserStorageService&lt;/code&gt; using the &lt;code&gt;sessionStorage&lt;/code&gt; browser API, while the &lt;code&gt;localStorageService&lt;/code&gt; skips the local injector and uses the root &lt;code&gt;BrowserStorageService&lt;/code&gt; that uses the &lt;code&gt;localStorage&lt;/code&gt; browser API.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;&lt;/code&gt; デコレータを使用すると、インジェクタはコンポーネントのインジェクタのみを調べて、プロバイダを探します。 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; デコレータを使用すると、プロバイダー満たすこの依存関係を見つけるために、地元のインジェクターをスキップして、階層内で検索することができます。 &lt;code&gt;sessionStorageService&lt;/code&gt; を持つインスタンスの相互作用 &lt;code&gt;BrowserStorageService&lt;/code&gt; 使用 &lt;code&gt;sessionStorage&lt;/code&gt; 一方で、ブラウザのAPIを &lt;code&gt;localStorageService&lt;/code&gt; がローカルインジェクタをスキップして、ルート使用 &lt;code&gt;BrowserStorageService&lt;/code&gt; 使用 &lt;code&gt;localStorage&lt;/code&gt; ブラウザのAPIを。</target>
        </trans-unit>
        <trans-unit id="9c2ddaa9a4477a0d280fe7ff4b0889ca96f1260c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;providers&lt;/code&gt; array</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; 配列の使用</target>
        </trans-unit>
        <trans-unit id="87db3d87246b0ba7b1f6a1e65402304267c078f0" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate class&lt;/code&gt;&lt;/a&gt;, generate a new class named &lt;code&gt;Hero&lt;/code&gt;:</source>
          <target state="translated">Angular CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate class&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;Hero&lt;/code&gt; という名前の新しいクラスを生成します。</target>
        </trans-unit>
        <trans-unit id="24653eb83b101fbb344fe1dd41060b459319c087" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt;, generate a new component named &lt;code&gt;HeroForm&lt;/code&gt;:</source>
          <target state="translated">Angular CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate component&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;HeroForm&lt;/code&gt; という名前の新しいコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="81efa0d631504c35459bdd579b8b05a652508d3a" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI, create a service called &lt;code&gt;hero&lt;/code&gt;.</source>
          <target state="translated">Angular CLIを使用して、 &lt;code&gt;hero&lt;/code&gt; というサービスを作成します。</target>
        </trans-unit>
        <trans-unit id="0965eb7867ed11aa022c0e42434572bd02fabfa4" translate="yes" xml:space="preserve">
          <source>Using the Angular CLI, generate a new component named &lt;code&gt;heroes&lt;/code&gt;.</source>
          <target state="translated">Angular CLIを使用して、 &lt;code&gt;heroes&lt;/code&gt; という名前の新しいコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="a5adb7aa313a235cb09657ba564b95feb23f9777" translate="yes" xml:space="preserve">
          <source>Using the Angular Unified Location Service</source>
          <target state="translated">Angular Unified Location Serviceを使う</target>
        </trans-unit>
        <trans-unit id="3385d7778ed34c624bab677d8b93113048ea3d70" translate="yes" xml:space="preserve">
          <source>Using the Hero class</source>
          <target state="translated">ヒーロークラスを使って</target>
        </trans-unit>
        <trans-unit id="78f7880d324d4d6b362277b5293f7d5e81175744" translate="yes" xml:space="preserve">
          <source>Using the RxJS scheduler inside fakeAsync()</source>
          <target state="translated">fakeAsync()の中でRxJSスケジューラを使う</target>
        </trans-unit>
        <trans-unit id="460ffdb79528b543b65d0023597d166efc0e6187" translate="yes" xml:space="preserve">
          <source>Using the Unified Angular Location Service</source>
          <target state="translated">ユニファイド・アングラー・ロケーション・サービスを使う</target>
        </trans-unit>
        <trans-unit id="9a66563e1975c2187a0773744f035412c7a0c811" translate="yes" xml:space="preserve">
          <source>Using the default value accessor</source>
          <target state="translated">デフォルト値アクセサの使用</target>
        </trans-unit>
        <trans-unit id="d8d0dd351b925abe0013872e2187d3ac63a5f4b4" translate="yes" xml:space="preserve">
          <source>Using the graphviz optional dependency, you'll have a program &lt;code&gt;dot&lt;/code&gt;, which you can use with &lt;code&gt;bazel &lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">graphvizのオプションの依存関係を使用すると、 &lt;code&gt;bazel &lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/animations/query&quot;&gt;queryで&lt;/a&gt;使用できるプログラム &lt;code&gt;dot&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="701a7ae767b31ad4b44a0cd1aae2842c56741ee2" translate="yes" xml:space="preserve">
          <source>Using the key &lt;code&gt;$implicit&lt;/code&gt; in the context object will set its value as default.</source>
          <target state="translated">コンテキストオブジェクトでキー &lt;code&gt;$implicit&lt;/code&gt; を使用すると、その値がデフォルトとして設定されます。</target>
        </trans-unit>
        <trans-unit id="97fd999fe0f9f9e0225af291a35e80bbf1a2a5cb" translate="yes" xml:space="preserve">
          <source>Using the template binding syntax, the form control is now registered to the &lt;code&gt;name&lt;/code&gt; input element in the template. The form control and DOM element communicate with each other: the view reflects changes in the model, and the model reflects changes in the view.</source>
          <target state="translated">テンプレートバインディング構文を使用して、フォームコントロールがテンプレートの &lt;code&gt;name&lt;/code&gt; 入力要素に登録されます。フォームコントロールとDOM要素は相互に通信します。ビューはモデルの変更を反映し、モデルはビューの変更を反映します。</target>
        </trans-unit>
        <trans-unit id="a73267180af548e33b36453222ddbcd0a9cd7a26" translate="yes" xml:space="preserve">
          <source>Using wildcard state with multiple transition states</source>
          <target state="translated">複数の遷移状態を持つワイルドカード状態の使用</target>
        </trans-unit>
        <trans-unit id="f5248445a88890c526dc548b5736616908228cef" translate="yes" xml:space="preserve">
          <source>Using wildcards with styles</source>
          <target state="translated">スタイルでワイルドカードを使用する</target>
        </trans-unit>
        <trans-unit id="3732652b5c565611a56c0e8b0ff175f176f6e899" translate="yes" xml:space="preserve">
          <source>Using your own library in apps</source>
          <target state="translated">アプリで自分のライブラリを使う</target>
        </trans-unit>
        <trans-unit id="36b3c5921b9dbb0818575770f742474b0a62f5c5" translate="yes" xml:space="preserve">
          <source>Usually there's only one component in this list, the &lt;em&gt;root component&lt;/em&gt; of the application.</source>
          <target state="translated">通常、このリストにはコンポーネントの1つ（アプリケーションの&lt;em&gt;ルートコンポーネント）&lt;/em&gt;しかありません。</target>
        </trans-unit>
        <trans-unit id="0a319f5c807a99dec0b4916cda29f6050d992dd8" translate="yes" xml:space="preserve">
          <source>Usually, setting an element property with a &lt;a href=&quot;template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt; is preferable to setting the attribute with a string. However, sometimes there is no element property to bind, so attribute binding is the solution.</source>
          <target state="translated">通常、属性&lt;a href=&quot;template-syntax#property-binding&quot;&gt;バインディングを使用&lt;/a&gt;して要素プロパティを設定することは、文字列を使用して属性を設定するよりも望ましい方法です。ただし、バインドする要素プロパティがない場合があるため、属性バインドが解決策です。</target>
        </trans-unit>
        <trans-unit id="89189507b2a074e98b2e877227343a6e1f27b3ab" translate="yes" xml:space="preserve">
          <source>Utility</source>
          <target state="translated">Utility</target>
        </trans-unit>
        <trans-unit id="0da3a16df4f1cfe00ccae4cb470106238ee3f50d" translate="yes" xml:space="preserve">
          <source>Validate against a maximum of 15</source>
          <target state="translated">最大15個まで検証可能</target>
        </trans-unit>
        <trans-unit id="b626a91102f28dde09ef4feac857a53784030579" translate="yes" xml:space="preserve">
          <source>Validate against a minimum of 3</source>
          <target state="translated">最低3つの検証</target>
        </trans-unit>
        <trans-unit id="5f2d339a1d7ad3e7b42679e5d838c4f7db0e2db1" translate="yes" xml:space="preserve">
          <source>Validate that the field has a minimum of 3 characters</source>
          <target state="translated">フィールドの文字数が3文字以上であることを確認します。</target>
        </trans-unit>
        <trans-unit id="365af241d710fd38bb8fc6a89e93b90b0d1db454" translate="yes" xml:space="preserve">
          <source>Validate that the field has maximum of 5 characters</source>
          <target state="translated">フィールドの最大文字数が5文字であることを確認します。</target>
        </trans-unit>
        <trans-unit id="0506ee2af8e063c56ec116feb2754facf42c90d0" translate="yes" xml:space="preserve">
          <source>Validate that the field is non-empty</source>
          <target state="translated">フィールドが空でないことを確認します。</target>
        </trans-unit>
        <trans-unit id="a3381e343a3617a4bb231a512be6fc59fa34d569" translate="yes" xml:space="preserve">
          <source>Validate that the field matches a valid email pattern</source>
          <target state="translated">フィールドが有効なメールパターンと一致していることを確認します。</target>
        </trans-unit>
        <trans-unit id="403d97dc000145ae46f642bb7353f29a0deade7a" translate="yes" xml:space="preserve">
          <source>Validate that the field only contains letters or spaces</source>
          <target state="translated">フィールドには文字またはスペースしか含まれていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="b1d42fbeab767bb81064a062ffe20d0f69ea59f2" translate="yes" xml:space="preserve">
          <source>Validate that the field value is true</source>
          <target state="translated">フィールドの値が真であることを検証する</target>
        </trans-unit>
        <trans-unit id="23b8880400d5deddab1250ea0a0ef87bbdae38db" translate="yes" xml:space="preserve">
          <source>Validate the correctness of user input.</source>
          <target state="translated">ユーザーの入力が正しいかどうかを検証します。</target>
        </trans-unit>
        <trans-unit id="f43a0dc6633797adf7396b6cf232151d02e24338" translate="yes" xml:space="preserve">
          <source>Validation is an integral part of managing any set of forms. Whether you're checking for required fields or querying an external API for an existing username, Angular provides a set of built-in validators as well as the ability to create custom validators.</source>
          <target state="translated">バリデーションはフォームを管理する上で不可欠な要素です。必須フィールドをチェックする場合でも、既存のユーザー名のために外部APIに問い合わせをする場合でも、Angularは組み込みのバリデータのセットとカスタムバリデータを作成する機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="70933a459fa1beb4c3976a98043f612aca8bc6ae" translate="yes" xml:space="preserve">
          <source>Validation is set up through validation functions rather than valdation directives.</source>
          <target state="translated">バリデーションはvaldationディレクティブではなくバリデーション関数で設定します。</target>
        </trans-unit>
        <trans-unit id="42b88cee0411df854ab9ab8680b74f241740fc3c" translate="yes" xml:space="preserve">
          <source>ValidationErrors</source>
          <target state="translated">ValidationErrors</target>
        </trans-unit>
        <trans-unit id="6e5b7a60980482ab39ae77b25489457b817517cd" translate="yes" xml:space="preserve">
          <source>Validator</source>
          <target state="translated">Validator</target>
        </trans-unit>
        <trans-unit id="e37939a31ae2f93a355efd2e41823a0ccd0104e8" translate="yes" xml:space="preserve">
          <source>Validator functions</source>
          <target state="translated">バリデータ機能</target>
        </trans-unit>
        <trans-unit id="0b6adf9f43ac26d416c0fe91c7ae74d404335f9c" translate="yes" xml:space="preserve">
          <source>Validator that performs no operation.</source>
          <target state="translated">何も操作しないバリデータ。</target>
        </trans-unit>
        <trans-unit id="bf6a47ff451c3b9d71ebb71124e408131e842715" translate="yes" xml:space="preserve">
          <source>Validator that requires the control have a non-empty value.</source>
          <target state="translated">コントロールが空でない値を持つことを要求するバリデータです。</target>
        </trans-unit>
        <trans-unit id="9b247107c6248f97a52d72465eaa594dac9f871b" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value be true. This validator is commonly used for required checkboxes.</source>
          <target state="translated">コントロールの値が真であることを要求するバリデータ。このバリデータは必須チェックボックスによく使われます。</target>
        </trans-unit>
        <trans-unit id="2ae1c5182294db9a183f7aa482d9d8a206c1d386" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value pass an email validation test.</source>
          <target state="translated">コントロールの値がメール検証テストに合格することを要求するバリデータです。</target>
        </trans-unit>
        <trans-unit id="0106b5809c999beadaacdf16e65d183947be2d35" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value to be greater than or equal to the provided number. The validator exists only as a function and not as a directive.</source>
          <target state="translated">コントロールの値が指定された数値以上であることを要求するバリデータです。このバリデータは関数としてのみ存在し、ディレクティブとしては存在しません。</target>
        </trans-unit>
        <trans-unit id="162dfec38e764abc2921d5b06f86d1bcbeadf02b" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value to be less than or equal to the provided number. The validator exists only as a function and not as a directive.</source>
          <target state="translated">コントロールの値が指定された数値以下であることを要求するバリデータです。このバリデータは関数としてのみ存在し、ディレクティブとしては存在しません。</target>
        </trans-unit>
        <trans-unit id="52c39a07c7e7121efa3eaeb3fbe77b7575251296" translate="yes" xml:space="preserve">
          <source>Validator that requires the control's value to match a regex pattern. This validator is also provided by default if you use the HTML5 &lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="translated">コントロールの値が正規表現パターンに一致することを要求するバリデーター。HTML5 &lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 属性を使用する場合、このバリデーターもデフォルトで提供されます。</target>
        </trans-unit>
        <trans-unit id="76256d2b6665f1a3f3640f2890572f05710a20d7" translate="yes" xml:space="preserve">
          <source>Validator that requires the length of the control's value to be greater than or equal to the provided minimum length. This validator is also provided by default if you use the the HTML5 &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="translated">コントロールの値の長さが提供された最小長以上であることを要求するバリデーター。HTML5 &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 属性を使用する場合、このバリデーターもデフォルトで提供されます。</target>
        </trans-unit>
        <trans-unit id="f9d855798656a116c1182141d94fad28454e4e72" translate="yes" xml:space="preserve">
          <source>Validator that requires the length of the control's value to be less than or equal to the provided maximum length. This validator is also provided by default if you use the the HTML5 &lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="translated">コントロールの値の長さが提供された最大長以下であることを要求するバリデーター。HTML5の &lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 属性を使用する場合、このバリデーターもデフォルトで提供されます。</target>
        </trans-unit>
        <trans-unit id="d29f76e695670cc31b55309fdad4de99247e6232" translate="yes" xml:space="preserve">
          <source>ValidatorFn</source>
          <target state="translated">ValidatorFn</target>
        </trans-unit>
        <trans-unit id="762f13c2259b5fbab6d8f1bdbab081fc48bc558f" translate="yes" xml:space="preserve">
          <source>Validators</source>
          <target state="translated">Validators</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="d2f1e7eaab356f70c51f6149188803cfa1f41bd2" translate="yes" xml:space="preserve">
          <source>Value providers</source>
          <target state="translated">バリュープロバイダー</target>
        </trans-unit>
        <trans-unit id="20f9ff3e7294e59511661cc02c6349a3f6b1ebb7" translate="yes" xml:space="preserve">
          <source>Value providers: &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">値プロバイダー： &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8fe3282b947225da293afc6b4fd0512f85bae210" translate="yes" xml:space="preserve">
          <source>ValueProvider</source>
          <target state="translated">ValueProvider</target>
        </trans-unit>
        <trans-unit id="e16f3c18243dc608a013837c5a79a4d00bdb7bc7" translate="yes" xml:space="preserve">
          <source>ValueSansProvider</source>
          <target state="translated">ValueSansProvider</target>
        </trans-unit>
        <trans-unit id="5d5c6b67c9db0e498e790e883c5de52f385275d8" translate="yes" xml:space="preserve">
          <source>Verify that no unmatched requests are outstanding.</source>
          <target state="translated">マッチしていないリクエストがないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="81c258b63dad449560a58fedcf568dc6b8a49576" translate="yes" xml:space="preserve">
          <source>Version from which to migrate from. Only available with a single package being updated, and only on migration only.</source>
          <target state="translated">移行元のバージョン。1つのパッケージが更新されている場合にのみ利用可能で、移行時にのみ利用可能です。</target>
        </trans-unit>
        <trans-unit id="fc66ec0d0963a90667a2ecf160141fe6e6b47961" translate="yes" xml:space="preserve">
          <source>Version up to which to apply migrations. Only available with a single package being updated, and only on migrations only. Requires from to be specified. Default to the installed version detected.</source>
          <target state="translated">移行を適用するバージョン。単一のパッケージが更新されている場合にのみ利用可能で、マイグレーションでのみ利用可能です。from を指定する必要があります。デフォルトは検出されたインストールされたバージョンです。</target>
        </trans-unit>
        <trans-unit id="ad05dbfb7d147c73816ab1fecdddddf16429566f" translate="yes" xml:space="preserve">
          <source>Versioning, release, support, and deprecation practices: &lt;a href=&quot;releases&quot;&gt;Angular versioning and releases&lt;/a&gt;</source>
          <target state="translated">バージョニング、リリース、サポート、非推奨プラクティス：&lt;a href=&quot;releases&quot;&gt;Angularのバージョニングとリリース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="40e309254a1c09b7db3fd4b9af2fa9ecaa53129a" translate="yes" xml:space="preserve">
          <source>View encapsulation</source>
          <target state="translated">カプセル化を見る</target>
        </trans-unit>
        <trans-unit id="63a105276cb081db80a13c002ab391c84407745d" translate="yes" xml:space="preserve">
          <source>View hierarchies can be loaded and unloaded dynamically as the user navigates through the application, typically under the control of a &lt;a href=&quot;glossary#router&quot;&gt;router&lt;/a&gt;.</source>
          <target state="translated">ビュー階層は、ユーザーがアプリケーションをナビゲートするときに、通常は&lt;a href=&quot;glossary#router&quot;&gt;ルーターの&lt;/a&gt;制御下で動的にロードおよびアンロードできます。</target>
        </trans-unit>
        <trans-unit id="ced146390f04d6176a1c9baafe3663557cd5bb9c" translate="yes" xml:space="preserve">
          <source>View queries are set before the &lt;code&gt;ngAfterViewInit&lt;/code&gt; callback is called.</source>
          <target state="translated">ビュークエリは、 &lt;code&gt;ngAfterViewInit&lt;/code&gt; コールバックが呼び出される前に設定されます。</target>
        </trans-unit>
        <trans-unit id="70b22bdcbbd499b2cd172768582a04965d178285" translate="yes" xml:space="preserve">
          <source>ViewChild</source>
          <target state="translated">ViewChild</target>
        </trans-unit>
        <trans-unit id="731e75cc493e2b3f0e1520064261281cd209667b" translate="yes" xml:space="preserve">
          <source>ViewChildren</source>
          <target state="translated">ViewChildren</target>
        </trans-unit>
        <trans-unit id="c0b27cd972ffd1977642761def1f7be9a42f5afa" translate="yes" xml:space="preserve">
          <source>ViewContainerRef</source>
          <target state="translated">ViewContainerRef</target>
        </trans-unit>
        <trans-unit id="e5240a7ff11b6693e9588a24feef5960dd5495b8" translate="yes" xml:space="preserve">
          <source>ViewEncapsulation</source>
          <target state="translated">ViewEncapsulation</target>
        </trans-unit>
        <trans-unit id="bb27c41c6081cf7c9006a0c2e01017e596206e38" translate="yes" xml:space="preserve">
          <source>ViewRef</source>
          <target state="translated">ViewRef</target>
        </trans-unit>
        <trans-unit id="85787f7a1fbf5317a97c6316e18e928d4f590507" translate="yes" xml:space="preserve">
          <source>ViewportScroller</source>
          <target state="translated">ViewportScroller</target>
        </trans-unit>
        <trans-unit id="aa8824d0dbe6def19d33585bef0db1c629139af5" translate="yes" xml:space="preserve">
          <source>Views are typically arranged hierarchically, allowing you to modify or show and hide entire UI sections or pages as a unit. The template immediately associated with a component defines that component's &lt;em&gt;host view&lt;/em&gt;. The component can also define a &lt;em&gt;view hierarchy&lt;/em&gt;, which contains &lt;em&gt;embedded views&lt;/em&gt;, hosted by other components.</source>
          <target state="translated">ビューは通常階層的に配置され、UIセクションまたはページ全体を1つの単位として変更または表示および非表示にすることができます。コンポーネントに直接関連付けられているテンプレートは、そのコンポーネントの&lt;em&gt;ホストビューを&lt;/em&gt;定義します。コンポーネントは、他のコンポーネントがホストする&lt;em&gt;埋め込みビュー&lt;/em&gt;を含む&lt;em&gt;ビュー階層を&lt;/em&gt;定義することもできます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f1386eabb408835f08cb05d409256f611a521fdc" translate="yes" xml:space="preserve">
          <source>Visibility decorators influence where the search for the injection token begins and ends in the logic tree. To do this, place visibility decorators at the point of injection, that is, the &lt;code&gt;constructor()&lt;/code&gt;, rather than at a point of declaration.</source>
          <target state="translated">可視性デコレータは、インジェクショントークンの検索がロジックツリーのどこで始まりどこで終わるかに影響します。これを行うには、宣言の場所ではなく、インジェクションの場所、つまり &lt;code&gt;constructor()&lt;/code&gt; に可視性デコレーターを配置します。</target>
        </trans-unit>
        <trans-unit id="01354e09c47bfba10344c316d3973dd8d8c0c124" translate="yes" xml:space="preserve">
          <source>Visibility of provided tokens</source>
          <target state="translated">提供されたトークンの表示</target>
        </trans-unit>
        <trans-unit id="423f1f3d80c4d824ca917e13649a5c584a13ec87" translate="yes" xml:space="preserve">
          <source>Visual Studio Code</source>
          <target state="translated">Visual Studioコード</target>
        </trans-unit>
        <trans-unit id="5bd87aebeff1926fd4da28c306978ef7e958002f" translate="yes" xml:space="preserve">
          <source>Visual Studio now looks first for external tools in the current workspace and if it doesn't find them, it looks in the global path. If Visual Studio doesn't find them in either location, it will use its own versions of the tools.</source>
          <target state="translated">Visual Studio*では、現在のワークスペース内の外部ツールを最初に検索し、見つからない場合はグローバル・パスを検索するようになりました。Visual Studio がどちらの場所にも見つからない場合は、独自のバージョンのツールを使用します。</target>
        </trans-unit>
        <trans-unit id="cf912685bcd3b8695b78564cf9cc45a83ef11075" translate="yes" xml:space="preserve">
          <source>Visual Studio ships with IIS Express, which has the rewrite module baked in. However, if you're using regular IIS you'll have to install the rewrite module.</source>
          <target state="translated">Visual Studio は IIS Express で出荷されているが、これには書き換えモジュールが組み込まれている。しかし、通常の IIS を使用している場合は、書き換えモジュールをインストールしなければならない。</target>
        </trans-unit>
        <trans-unit id="1a00dd5a3fe4b1a6a174763f1ccc3255c559d786" translate="yes" xml:space="preserve">
          <source>Visualize a &lt;em&gt;banana in a box&lt;/em&gt; to remember that the parentheses go &lt;em&gt;inside&lt;/em&gt; the brackets.</source>
          <target state="translated">&lt;em&gt;ボックス&lt;/em&gt;内の&lt;em&gt;バナナを&lt;/em&gt;視覚化して、括弧が括弧の&lt;em&gt;内側に&lt;/em&gt;あることを思い出して&lt;em&gt;ください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ae20d0dcd36854dd9c33ee0729b11a0b952fd48f" translate="yes" xml:space="preserve">
          <source>Void state</source>
          <target state="translated">ボイド状態</target>
        </trans-unit>
        <trans-unit id="363d01361c13e93cb5c5849c62cc7a9e5fb2a36f" translate="yes" xml:space="preserve">
          <source>Voil&amp;agrave;! &lt;code&gt;['/crisis-center']&lt;/code&gt;.</source>
          <target state="translated">ほら！ &lt;code&gt;['/crisis-center']&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="7d863250597b39573e59f2dd5bbdb466dcefa3eb" translate="yes" xml:space="preserve">
          <source>W3C - Web Accessibility Initiative</source>
          <target state="translated">W3C-ウェブアクセシビリティ・イニシアチブ</target>
        </trans-unit>
        <trans-unit id="a8973c4ad76d66d81020d94041af9480559aca02" translate="yes" xml:space="preserve">
          <source>WARNING: this pipe uses the Internationalization API which is not yet available in all browsers and may require a polyfill. See &lt;a href=&quot;../../guide/browser-support&quot;&gt;Browser Support&lt;/a&gt; for details.</source>
          <target state="translated">警告：このパイプは国際化APIを使用しますが、これはまだすべてのブラウザーで利用可能ではなく、ポリフィルが必要になる場合があります。詳細については、&lt;a href=&quot;../../guide/browser-support&quot;&gt;ブラウザのサポート&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c07ec44ed7c7c12105929adc7842d7938752526a" translate="yes" xml:space="preserve">
          <source>WARNINGS:</source>
          <target state="translated">WARNINGS:</target>
        </trans-unit>
        <trans-unit id="6c1d5662bd95a1bc248614055dd45cd2c7c74fae" translate="yes" xml:space="preserve">
          <source>WORKER_APP_LOCATION_PROVIDERS</source>
          <target state="translated">WORKER_APP_LOCATION_PROVIDERS</target>
        </trans-unit>
        <trans-unit id="82986323ee9a26fe8f93325355793336b70d0475" translate="yes" xml:space="preserve">
          <source>WORKER_UI_LOCATION_PROVIDERS</source>
          <target state="translated">WORKER_UI_LOCATION_PROVIDERS</target>
        </trans-unit>
        <trans-unit id="fc298440e65c9e288e74a2aa8c9b6a8c4ae86157" translate="yes" xml:space="preserve">
          <source>WORKSPACE CONFIG FILES</source>
          <target state="translated">ワークスペース設定ファイル</target>
        </trans-unit>
        <trans-unit id="9ecaf9bcefceb097a640b14a0a1ef2fe6fb7fab4" translate="yes" xml:space="preserve">
          <source>Wait for 100ms and then run for 200ms: &lt;code&gt;'0.2s 100ms'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;'0.2s 100ms'&lt;/code&gt; 待ってから200ミリ秒実行します：'0.2s 100ms'</target>
        </trans-unit>
        <trans-unit id="7bc78e562cbe874c8773d19cf4be97f0463bbc5e" translate="yes" xml:space="preserve">
          <source>Wait for 100ms, run for 200ms. Use a deceleration curve to start out fast and slowly decelerate to a resting point: &lt;code&gt;'0.2s 100ms ease-out'&lt;/code&gt;</source>
          <target state="translated">100ms待ち、200ms実行します。減速曲線を使用して、速く開始し、ゆっくりと減速して休憩点まで： &lt;code&gt;'0.2s 100ms ease-out'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b5586b3bb95ca7c31cb3c22819d08ba3bebb1c3" translate="yes" xml:space="preserve">
          <source>Wait for the application to be stable with a timeout. If the timeout is reached before that happens, the callback receives a list of the macro tasks that were pending, otherwise null.</source>
          <target state="translated">タイムアウトでアプリケーションが安定するのを待ちます。タイムアウトが発生する前にタイムアウトに達した場合、コールバックは保留中のマクロタスクのリストを受け取ります。</target>
        </trans-unit>
        <trans-unit id="5397416bedc6dd6eb062cf6b283a2ffe2c518c96" translate="yes" xml:space="preserve">
          <source>Warning (default): show a 'Missing translation' warning in the console or shell.</source>
          <target state="translated">Warning (default):コンソールやシェルに「翻訳が見つからない」という警告を表示します。</target>
        </trans-unit>
        <trans-unit id="05c345e4ec19aba46a5943dc0f547f62c9342ec1" translate="yes" xml:space="preserve">
          <source>Warning (default): show a warning in the console and/or shell.</source>
          <target state="translated">Warning (default):コンソールやシェルに警告を表示します。</target>
        </trans-unit>
        <trans-unit id="88b85d9988679e4293fa4ac6a48242d90d816934" translate="yes" xml:space="preserve">
          <source>Watch mode</source>
          <target state="translated">ウォッチモード</target>
        </trans-unit>
        <trans-unit id="049327f20280160e2798ffbfea9f0196b9c52a75" translate="yes" xml:space="preserve">
          <source>We also share with you the desire for Angular to keep evolving. We strive to ensure that the foundation on top of which you are building is continuously improving and enabling you to stay up-to-date with the rest of the web ecosystem and your user needs.</source>
          <target state="translated">私たちはまた、Angularが進化し続けてほしいという願いを共有しています。私たちは、お客様が構築している基盤が継続的に改善され、他のウェブエコシステムやユーザーのニーズに合わせて最新の状態を維持できるように努力しています。</target>
        </trans-unit>
        <trans-unit id="367ba1138b6b56e08c59f2f66d2ac44e4a858807" translate="yes" xml:space="preserve">
          <source>We are working on custom elements that can be used by web apps built on other frameworks. A minimal, self-contained version of the Angular framework will be injected as a service to support the component's change-detection and data-binding functionality. For more about the direction of development, check out this &lt;a href=&quot;https://www.youtube.com/watch?v=Z1gLFPLVJjY&amp;amp;t=4s&quot;&gt;video presentation&lt;/a&gt;.</source>
          <target state="translated">他のフレームワーク上に構築されたWebアプリで使用できるカスタム要素に取り組んでいます。Angularフレームワークの最小限の自己完結型バージョンが、コンポーネントの変更検出機能とデータバインディング機能をサポートするサービスとして挿入されます。開発の方向性について詳しくは、こちらの&lt;a href=&quot;https://www.youtube.com/watch?v=Z1gLFPLVJjY&amp;amp;t=4s&quot;&gt;ビデオプレゼンテーションを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e6a5c87a2d5a877756756b0475d44bae01c02874" translate="yes" xml:space="preserve">
          <source>We ask all contributing authors to adhere to three aspects of style:</source>
          <target state="translated">投稿者の皆様には、以下の3点を遵守していただきたいと思います。</target>
        </trans-unit>
        <trans-unit id="ec11a33a55c211bc5d98f96df3c7c4a5d0617287" translate="yes" xml:space="preserve">
          <source>We can delay updating the form validity by changing the &lt;code&gt;updateOn&lt;/code&gt; property from &lt;code&gt;change&lt;/code&gt; (default) to &lt;code&gt;submit&lt;/code&gt; or &lt;code&gt;blur&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; プロパティを &lt;code&gt;change&lt;/code&gt; （デフォルト）から &lt;code&gt;submit&lt;/code&gt; または &lt;code&gt;blur&lt;/code&gt; に変更することで、フォームの有効性の更新を遅らせることができます。</target>
        </trans-unit>
        <trans-unit id="fd8e866ad285f0dc9892217e61259175ebd3fd46" translate="yes" xml:space="preserve">
          <source>We can provide the following schema for type validation of these values.</source>
          <target state="translated">これらの値の型検証のために、以下のスキーマを提供することができます。</target>
        </trans-unit>
        <trans-unit id="2931f0896f596ff16cc12f410c35306a64670a62" translate="yes" xml:space="preserve">
          <source>We can publish the builder to npm (see &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;), and install it using the following command:</source>
          <target state="translated">ビルダーをnpmに公開し（「&lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;ライブラリの公開&lt;/a&gt;」を参照）、次のコマンドを使用してインストールできます。</target>
        </trans-unit>
        <trans-unit id="ee14b2f048236515de09f569a5537a505db84ddc" translate="yes" xml:space="preserve">
          <source>We can retrieve a Logger instance from the context.</source>
          <target state="translated">コンテキストからロガーのインスタンスを取得することができます。</target>
        </trans-unit>
        <trans-unit id="ed979d867401216782d14206d29678b5df7afa90" translate="yes" xml:space="preserve">
          <source>We follow the deprecation policy described here, so you have time to update your apps to the latest APIs and best practices.</source>
          <target state="translated">ここに記載されている非推奨ポリシーに従っていますので、アプリを最新のAPIやベストプラクティスにアップデートする時間があります。</target>
        </trans-unit>
        <trans-unit id="e9b76a51b7a99c79ff1cc0f3f2bebb68cb9f17f8" translate="yes" xml:space="preserve">
          <source>We have discussed the basic HTTP functionality in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;, but sometimes you need to do more than make simple requests and get data back.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; で基本的なHTTP機能について説明しましたが、場合によっては、単純なリクエストを行ってデータを取得するだけでは不十分です。</target>
        </trans-unit>
        <trans-unit id="f3da62ac46ab52ae87815d94ca4d56bf01a862f1" translate="yes" xml:space="preserve">
          <source>We let you preview what's coming by providing Beta releases and Release Candidates (&lt;code&gt;rc&lt;/code&gt;) for each major and minor release:</source>
          <target state="translated">メジャーリリースとマイナーリリースごとにベータリリースとリリース候補（ &lt;code&gt;rc&lt;/code&gt; ）を提供することで、今後の予定をプレビューできます。</target>
        </trans-unit>
        <trans-unit id="b91a3f18bcf41bca5f95939f116cf6e3d59216ba" translate="yes" xml:space="preserve">
          <source>We meet this goal by displaying code snippets that are derived directly from standalone code samples, written specifically for these guide pages.</source>
          <target state="translated">この目標を達成するために、これらのガイドページのために特別に書かれたスタンドアロンのコードサンプルから直接派生したコードスニペットを表示しています。</target>
        </trans-unit>
        <trans-unit id="3137f17ffcf69ea0fc771d5e9d7c10273ff1f4f9" translate="yes" xml:space="preserve">
          <source>We must create a &lt;code&gt;&lt;a href=&quot;../../core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; that will make this AngularJS component available inside Angular templates.</source>
          <target state="translated">このAngularJSコンポーネントをAngularテンプレート内で使用できるようにする &lt;code&gt;&lt;a href=&quot;../../core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf1fc25d3116f8dea78230e2816ca8675a89a9fe" translate="yes" xml:space="preserve">
          <source>We must create an AngularJS &lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;directive&lt;/a&gt; that will make this Angular component available inside AngularJS templates. The &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; function returns a factory function that we can use to define the AngularJS directive that wraps the &quot;downgraded&quot; component.</source>
          <target state="translated">このAngularコンポーネントをAngularJSテンプレート内で利用できるようにするAngularJS &lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;ディレクティブ&lt;/a&gt;を作成する必要があります。 &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; 関数は、我々はコンポーネントを「格下げ」ラップAngularJSディレクティブを定義するために使用できることをファクトリ関数を返します。</target>
        </trans-unit>
        <trans-unit id="4f0b3a7bbc11be9ec5f1d0d0772101f30b20afa5" translate="yes" xml:space="preserve">
          <source>We need to update the &lt;code&gt;angular.json&lt;/code&gt; file to add a target for this builder to the &quot;architect&quot; section of our new project.</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; ファイルを更新して、このビルダーのターゲットを新しいプロジェクトの「architect」セクションに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="7f07def30e46276be4e20aec308dade0a77d9924" translate="yes" xml:space="preserve">
          <source>We now have the framework in place for creating the code that actually modifies the user's application to set it up for the service defined in your library.</source>
          <target state="translated">これで、ユーザーのアプリケーションを実際に変更して、ライブラリで定義されているサービスにセットアップするコードを作成するためのフレームワークが整いました。</target>
        </trans-unit>
        <trans-unit id="fdfba83206c23f3c099770c464e3ad4b48b0dbb9" translate="yes" xml:space="preserve">
          <source>We recognize that you need stability from the Angular framework. Stability ensures that reusable components and libraries, tutorials, tools, and learned practices don't become obsolete unexpectedly. Stability is essential for the ecosystem around Angular to thrive.</source>
          <target state="translated">Angularフレームワークには安定性が必要だと認識しています。安定性があれば、再利用可能なコンポーネントやライブラリ、チュートリアル、ツール、学習したプラクティスが予期せず陳腐化することはありません。安定性はAngularのエコシステムが繁栄するために不可欠です。</target>
        </trans-unit>
        <trans-unit id="77d09fc97147b2ef90d76928341a69ca7bde154c" translate="yes" xml:space="preserve">
          <source>We recommend that you always update to the latest patch version, as it contains fixes we released since the initial major release. For example, use the following command to take the latest 7.x.x version and use that to update.</source>
          <target state="translated">最初のメジャーリリース以降にリリースした修正が含まれていますので、常に最新のパッチバージョンにアップデートすることをお勧めします。例えば、以下のコマンドを使用して、最新の 7.x.x.x バージョンを取得し、それを使用してアップデートします。</target>
        </trans-unit>
        <trans-unit id="775687186195b9a3e24a2f53506fea1a527d8ea0" translate="yes" xml:space="preserve">
          <source>We recommend that you do not force an update of all dependencies by default. Try updating specific dependencies first.</source>
          <target state="translated">デフォルトではすべての依存関係を強制的に更新しないことをお勧めします。最初に特定の依存関係を更新してみてください。</target>
        </trans-unit>
        <trans-unit id="80be1bb38ec0ca675a20185b65c4dba9e98272bb" translate="yes" xml:space="preserve">
          <source>We recommend that you use integration tests to test Architect builders. You can use unit tests to validate the logic that the builder executes.</source>
          <target state="translated">アーキテクトビルダーのテストには、統合テストを使用することをお勧めします。ビルダーが実行するロジックを検証するためにユニットテストを使用することができます。</target>
        </trans-unit>
        <trans-unit id="310cfdcf5af5f6be333c6538a69706c32e03c366" translate="yes" xml:space="preserve">
          <source>We want the user to click a product name to display the details for that product.</source>
          <target state="translated">ユーザーが商品名をクリックして、その商品の詳細を表示させたいのです。</target>
        </trans-unit>
        <trans-unit id="963319a4bbeb2a266dbe49a9dbba7d16c6c97bad" translate="yes" xml:space="preserve">
          <source>We want to hear from you. &lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;Report problems or submit suggestions for future docs.&lt;/a&gt;</source>
          <target state="translated">我々はあなたから聞きたい。&lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;問題を報告するか、将来のドキュメントの提案を送信してください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="08ccad7003f1e35885c0a7207dc4655e386f189a" translate="yes" xml:space="preserve">
          <source>We work hard to minimize the number of breaking changes and to provide migration tools when possible.</source>
          <target state="translated">私たちは、可能な限りブレークする変更の数を最小限に抑え、移行ツールを提供できるように努めています。</target>
        </trans-unit>
        <trans-unit id="80ef513b5b64fa187df26f2b88bdd0df53b470f9" translate="yes" xml:space="preserve">
          <source>We work toward a regular schedule of releases, so that you can plan and coordinate your updates with the continuing evolution of Angular.</source>
          <target state="translated">私たちは定期的なリリーススケジュールを目指しており、Angularの継続的な進化に合わせてアップデートを計画し、調整することができます。</target>
        </trans-unit>
        <trans-unit id="4f7ca8850d7d3e95260cdb1a36e87b1bd5a2f9ab" translate="yes" xml:space="preserve">
          <source>We'll add a new target section to the &quot;architect&quot; object for our project.</source>
          <target state="translated">今回のプロジェクトの &quot;architect &quot;オブジェクトに新しいターゲットセクションを追加します。</target>
        </trans-unit>
        <trans-unit id="1f0e521cbcb2ebaba4d1dd2e5a53e9662e8db9ca" translate="yes" xml:space="preserve">
          <source>We'll assume that your library defines a service, &lt;code&gt;my-service&lt;/code&gt;, that requires some setup. You want your users to be able to generate it using the following CLI command.</source>
          <target state="translated">ライブラリでは、いくつかの設定が必要な &lt;code&gt;my-service&lt;/code&gt; 定義されていると想定します。ユーザーが次のCLIコマンドを使用してそれを生成できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="455855d6e204ab91263b75701fa13e1551077ff1" translate="yes" xml:space="preserve">
          <source>We'll be using &lt;a href=&quot;https://developers.google.com/web/updates/2017/04/headless-chrome#cli&quot;&gt;Headless Chrome&lt;/a&gt; in these examples.</source>
          <target state="translated">これらの例では、&lt;a href=&quot;https://developers.google.com/web/updates/2017/04/headless-chrome#cli&quot;&gt;ヘッドレスクロム&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="0023425c9a40172e734cbb5e99d9df3d9f24d37a" translate="yes" xml:space="preserve">
          <source>We'll create the cart page in two steps:</source>
          <target state="translated">2ステップでカートページを作成していきます。</target>
        </trans-unit>
        <trans-unit id="9c13304de9fb7403344d19d9edc7669863094bb9" translate="yes" xml:space="preserve">
          <source>We've added a &lt;code&gt;builders.json&lt;/code&gt; file next to the builder's &lt;a href=&quot;https://github.com/mgechev/cli-builders-demo/blob/master/command-builder/builders.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt; file&lt;/a&gt;, and modified the package file to point to it.</source>
          <target state="translated">ビルダーの&lt;a href=&quot;https://github.com/mgechev/cli-builders-demo/blob/master/command-builder/builders.json&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;ファイルの横に &lt;code&gt;builders.json&lt;/code&gt; ファイルを追加し、それを指すようにパッケージファイルを変更しました。</target>
        </trans-unit>
        <trans-unit id="229504c90b2ed36005a13f0891c6ea34dd49cee8" translate="yes" xml:space="preserve">
          <source>Web Animations</source>
          <target state="translated">ウェブアニメーション</target>
        </trans-unit>
        <trans-unit id="c689af566e60edb050fba04883329a2b969d41aa" translate="yes" xml:space="preserve">
          <source>Web Tracing Framework integration</source>
          <target state="translated">ウェブトレースフレームワークの統合</target>
        </trans-unit>
        <trans-unit id="c5b6d6d89517eff4ce180cea4ab387ae48e094cb" translate="yes" xml:space="preserve">
          <source>WebStorm</source>
          <target state="translated">WebStorm</target>
        </trans-unit>
        <trans-unit id="96c7816359b06d625431375d1cbdc07ed4556d66" translate="yes" xml:space="preserve">
          <source>Week day</source>
          <target state="translated">曜日</target>
        </trans-unit>
        <trans-unit id="6cb4f0e33b17b0f52c241793df12a1dd4d39da62" translate="yes" xml:space="preserve">
          <source>Week of month</source>
          <target state="translated">月の週</target>
        </trans-unit>
        <trans-unit id="b634011cda59925fcb33d601d8b1227879d65bbc" translate="yes" xml:space="preserve">
          <source>Week of year</source>
          <target state="translated">年の週</target>
        </trans-unit>
        <trans-unit id="09cfafc979eda38b81da9ec21690558d2edcbfd0" translate="yes" xml:space="preserve">
          <source>WeekDay</source>
          <target state="translated">WeekDay</target>
        </trans-unit>
        <trans-unit id="ec1d4a2eb821d65b5f91f9b7b510a0c9033552d6" translate="yes" xml:space="preserve">
          <source>Welcome to Angular!</source>
          <target state="translated">Angularへようこそ</target>
        </trans-unit>
        <trans-unit id="f31d5caf28c1c07d1ee03f259600799b9c986539" translate="yes" xml:space="preserve">
          <source>What &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive? You didn't add an &lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt; directive.</source>
          <target state="translated">どの &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブ？&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;ディレクティブを追加していません。</target>
        </trans-unit>
        <trans-unit id="550389c79bd6aad13b8b970d4d70593adcb978c0" translate="yes" xml:space="preserve">
          <source>What are structural directives?</source>
          <target state="translated">構造指令とは?</target>
        </trans-unit>
        <trans-unit id="f9f442481556abfd102cc7155daba690e1a9a733" translate="yes" xml:space="preserve">
          <source>What changed?</source>
          <target state="translated">何が変わったの?</target>
        </trans-unit>
        <trans-unit id="f8328397c60c8af6da98225a51e8980b05f6b4e4" translate="yes" xml:space="preserve">
          <source>What classes should I &lt;code&gt;not&lt;/code&gt; add to &lt;code&gt;declarations&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;declarations&lt;/code&gt; 追加してはいけ &lt;code&gt;not&lt;/code&gt; クラスは何ですか？</target>
        </trans-unit>
        <trans-unit id="6d27e0d2fc8a84f6cbfebe6fe7c1d1ca3170ab86" translate="yes" xml:space="preserve">
          <source>What classes should I add to the &lt;code&gt;declarations&lt;/code&gt; array?</source>
          <target state="translated">&lt;code&gt;declarations&lt;/code&gt; 配列にどのクラスを追加する必要がありますか？</target>
        </trans-unit>
        <trans-unit id="057eaac6f0deedde6be1f19bfebd7864c77aaaea" translate="yes" xml:space="preserve">
          <source>What do you do about unapproved, unsaved changes when the user navigates away? You can't just leave and risk losing the user's changes; that would be a terrible experience.</source>
          <target state="translated">ユーザーが離れた場所に移動したときに、承認されていない、保存されていない変更をどうしますか?ユーザーの変更を放置して、ユーザーの変更を失うリスクを冒すことはできません。</target>
        </trans-unit>
        <trans-unit id="473d6c927a1e922bb838df64558b20be71bcb2f4" translate="yes" xml:space="preserve">
          <source>What does &quot;Can't bind to 'x' since it isn't a known property of 'y'&quot; mean?</source>
          <target state="translated">'y' の既知のプロパティではないので 'x' にバインドできない」とはどういう意味ですか?</target>
        </trans-unit>
        <trans-unit id="2a4d6e81b7048543cdc7f0bf6420334628995a10" translate="yes" xml:space="preserve">
          <source>What good are these tests?</source>
          <target state="translated">このテストは何が良いのか?</target>
        </trans-unit>
        <trans-unit id="e9ef659a9f0dd7f7a57fd0812697b64f3b70b6ea" translate="yes" xml:space="preserve">
          <source>What happened?</source>
          <target state="translated">何があったの?</target>
        </trans-unit>
        <trans-unit id="a8ce06e7c8801f5352d9b466e0f76fb6c3c8a84b" translate="yes" xml:space="preserve">
          <source>What happens if the request fails on the server, or if a poor network connection prevents it from even reaching the server? &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; will return an &lt;em&gt;error&lt;/em&gt; object instead of a successful response.</source>
          <target state="translated">サーバーで要求が失敗した場合、またはネットワーク接続が不十分なためにサーバーに到達できない場合はどうなりますか？ &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; は、正常な応答の代わりに&lt;em&gt;エラー&lt;/em&gt;オブジェクトを返し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="10d9fbb31e05693074cbd05ef7c4fa4b5d4cc854" translate="yes" xml:space="preserve">
          <source>What happens on top of this is that components and services managed by one framework can interoperate with those from the other framework. This happens in three main areas: Dependency injection, the DOM, and change detection.</source>
          <target state="translated">この上で何が起こるかというと、あるフレームワークによって管理されているコンポーネントやサービスは、他のフレームワークのものと相互運用することができます。これは主に3つの分野で起こります。依存性の注入、DOM、変更の検出です。</target>
        </trans-unit>
        <trans-unit id="15d57a03ad72e64e2f967c9b58b84e47c42f4e56" translate="yes" xml:space="preserve">
          <source>What if I import the same module twice?</source>
          <target state="translated">同じモジュールを2回インポートするとどうなりますか?</target>
        </trans-unit>
        <trans-unit id="67698516018294ce714cfa0910ed88df86860dcc" translate="yes" xml:space="preserve">
          <source>What if the service is optional?</source>
          <target state="translated">サービスがオプションの場合は?</target>
        </trans-unit>
        <trans-unit id="fdf373766dbd491f797bd75ad9a27bc85492ffa5" translate="yes" xml:space="preserve">
          <source>What if the user tries to navigate away without saving or canceling? The user could push the browser back button or click the heroes link. Both actions trigger a navigation. Should the app save or cancel automatically?</source>
          <target state="translated">ユーザーが保存やキャンセルをせずに移動しようとした場合はどうなりますか?ユーザーはブラウザの戻るボタンを押すか、ヒーローリンクをクリックします。どちらのアクションもナビゲーションのトリガーとなります。アプリは自動的に保存またはキャンセルする必要がありますか?</target>
        </trans-unit>
        <trans-unit id="3fc3074fd43e313b68435dd9d3eccbad57fbacca" translate="yes" xml:space="preserve">
          <source>What if two modules provide the same service?</source>
          <target state="translated">2つのモジュールが同じサービスを提供している場合は?</target>
        </trans-unit>
        <trans-unit id="84612cf3c8dbe22a08e1d681d1e151867a37c306" translate="yes" xml:space="preserve">
          <source>What if you &lt;em&gt;don't&lt;/em&gt; know the concrete parent component class?</source>
          <target state="translated">具体的な親コンポーネントクラスが&lt;em&gt;わからない&lt;/em&gt;場合はどうなりますか？</target>
        </trans-unit>
        <trans-unit id="9571231b9a6513e5bda3f63b2546e2f10a6caf27" translate="yes" xml:space="preserve">
          <source>What if you aren't so lucky. What if faking the &lt;code&gt;HeroService&lt;/code&gt; is hard? What if &lt;code&gt;HeroDetailService&lt;/code&gt; makes its own server requests?</source>
          <target state="translated">あなたがそれほど幸運でない場合はどうでしょう。 &lt;code&gt;HeroService&lt;/code&gt; の偽造が難しい場合はどうなりますか？ &lt;code&gt;HeroDetailService&lt;/code&gt; が独自のサーバー要求を行うとどうなりますか？</target>
        </trans-unit>
        <trans-unit id="2af22762107db85dc423fbbae7b2defe8142ea5a" translate="yes" xml:space="preserve">
          <source>What is a &lt;code&gt;declarable&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;declarable&lt;/code&gt; とは何ですか？</target>
        </trans-unit>
        <trans-unit id="f22c2deef328e587dff4aa9d84977cb40974b2b3" translate="yes" xml:space="preserve">
          <source>What is an &lt;code&gt;entry component&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;entry component&lt;/code&gt; とは何ですか？</target>
        </trans-unit>
        <trans-unit id="42a60fa4661b031df7525d26e30ae45290feeb4f" translate="yes" xml:space="preserve">
          <source>What is the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method?</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドとは何ですか？</target>
        </trans-unit>
        <trans-unit id="393dcffc17ce162eb4715e7887f6986bef77f253" translate="yes" xml:space="preserve">
          <source>What is the Angular compiler?</source>
          <target state="translated">Angularコンパイラとは?</target>
        </trans-unit>
        <trans-unit id="ca032b5844df22ede2117e0697547ac14af77ed3" translate="yes" xml:space="preserve">
          <source>What it does</source>
          <target state="translated">何をするのか</target>
        </trans-unit>
        <trans-unit id="ce3efec53dfa7b3f17d8b379e8bb6f5b1fe81172" translate="yes" xml:space="preserve">
          <source>What kinds of modules should I have and how should I use them?</source>
          <target state="translated">どのような種類のモジュールを持っていて、どのように使えばいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="8492f572f03fd01c98f764f87b2ecfafaba6438b" translate="yes" xml:space="preserve">
          <source>What should I &lt;code&gt;not&lt;/code&gt; export?</source>
          <target state="translated">何をエクスポートしてはいけ &lt;code&gt;not&lt;/code&gt; か？</target>
        </trans-unit>
        <trans-unit id="272547099bb1eafdb8c114cedd1c025f49babd8d" translate="yes" xml:space="preserve">
          <source>What should I export?</source>
          <target state="translated">何を輸出すればいいの?</target>
        </trans-unit>
        <trans-unit id="2fba818e3c12cdfea661b9e5031ad159d26edea6" translate="yes" xml:space="preserve">
          <source>What should I import?</source>
          <target state="translated">何を輸入すればいいの?</target>
        </trans-unit>
        <trans-unit id="f56cc84fec0aec96345c31e5e364bd0bf53c27f7" translate="yes" xml:space="preserve">
          <source>What this means is that applications using &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; will run change detection more frequently in order to ensure that both frameworks are properly notified about possible changes. This will inevitably result in more change detection runs than necessary.</source>
          <target state="translated">つまり、 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; を使用するアプリケーションは、両方のフレームワークに可能な変更について適切に通知されるようにするために、変更検出をより頻繁に実行します。これにより、必然的に必要以上の変更検出が実行されます。</target>
        </trans-unit>
        <trans-unit id="8e748865fabf06ac85d0efb3686d535f7edbe194" translate="yes" xml:space="preserve">
          <source>What to do if Angular doesn't find what you're looking for, that is &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">Angularがあなたが探しているものを見つけられない場合の対処方法、それは &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e88cb973cd5369993be64ec9b2cc3ad10b9b55a" translate="yes" xml:space="preserve">
          <source>What was previously done in the controller function is now done in the class constructor function. The dependency injection annotations are attached to the class using a static property &lt;code&gt;$inject&lt;/code&gt;. At runtime this becomes the &lt;code&gt;PhoneListController.$inject&lt;/code&gt; property.</source>
          <target state="translated">以前はコントローラー関数で行われていたことは、現在クラスコンストラクター関数で行われます。依存関係注入アノテーションは、静的プロパティ &lt;code&gt;$inject&lt;/code&gt; を使用してクラスにアタッチされます。実行時に、これは &lt;code&gt;PhoneListController.$inject&lt;/code&gt; プロパティになります。</target>
        </trans-unit>
        <trans-unit id="36bcf3cf57500860c4fe2fa7525f4f11a0d1ee9c" translate="yes" xml:space="preserve">
          <source>What went wrong? Nothing, actually. The Angular service worker is doing its job and serving the version of the application that it has &lt;strong&gt;installed&lt;/strong&gt;, even though there is an update available. In the interest of speed, the service worker doesn't wait to check for updates before it serves the application that it has cached.</source>
          <target state="translated">何が悪かったのか？実際には何もありません。Angular Service Worker は、利用可能なアップデートがあっても、その仕事をし、&lt;strong&gt;インストールし&lt;/strong&gt;たアプリケーションのバージョンを提供しています。速度を上げるために、Service Workerは、キャッシュされたアプリケーションにサービスを提供する前に、更新の確認を待機しません。</target>
        </trans-unit>
        <trans-unit id="3f165c8fe830c74b722cf3c40b0f1a6351cc255e" translate="yes" xml:space="preserve">
          <source>What you include in your library is determined by the kind of task you are trying to accomplish. For example, if you want a dropdown with some canned data to show how to add it to your app, your library could define a schematic to create it. For a component like a dropdown that would contain different passed-in values each time, you could provide it as a component in a shared library.</source>
          <target state="translated">ライブラリに何を含めるかは、達成しようとしているタスクの種類によって決まります。たとえば、アプリに追加する方法を示す定型データを含むドロップダウンが必要な場合、ライブラリはそれを作成するための回路図を定義することができます。ドロップダウンのように、毎回異なる値が渡されるようなコンポーネントの場合は、共有ライブラリのコンポーネントとして提供できます。</target>
        </trans-unit>
        <trans-unit id="7efedb21f9cc31360041f1387aa92e01cf8751ea" translate="yes" xml:space="preserve">
          <source>What you'll build</source>
          <target state="translated">あなたが構築するもの</target>
        </trans-unit>
        <trans-unit id="206c37a11b4ea4cf13bb051d8b88deddea5ec07c" translate="yes" xml:space="preserve">
          <source>What's being cached?</source>
          <target state="translated">何がキャッシュされているのか?</target>
        </trans-unit>
        <trans-unit id="b0da2957891f63fe85f0b681e42bc7c99353b6ac" translate="yes" xml:space="preserve">
          <source>What's in the QuickStart seed?</source>
          <target state="translated">クイックスタートの種には何が入っているのか?</target>
        </trans-unit>
        <trans-unit id="bbe4cab88394b14ba3632e2b2dcf364b507a5fba" translate="yes" xml:space="preserve">
          <source>What's new? What's changed? We share the most important things you need to know on the Angular blog in &lt;a href=&quot;https://blog.angular.io/tagged/release%20notes&quot;&gt;release announcements&lt;/a&gt;.</source>
          <target state="translated">新着情報？何が変わったの？Angularブログの&lt;a href=&quot;https://blog.angular.io/tagged/release%20notes&quot;&gt;リリース告知&lt;/a&gt;で、知っておくべき最も重要なことを共有します。</target>
        </trans-unit>
        <trans-unit id="46fdeff62267a834862780ae0326b4c1aaa4483d" translate="yes" xml:space="preserve">
          <source>What's next</source>
          <target state="translated">次は何をするか</target>
        </trans-unit>
        <trans-unit id="c9d5de0ac54b4a1d6831c0c5c8cc8b083df30290" translate="yes" xml:space="preserve">
          <source>What's the difference between NgModules and JavaScript Modules?</source>
          <target state="translated">NgModulesとJavaScriptモジュールの違いは?</target>
        </trans-unit>
        <trans-unit id="df4456b644d2af7318557209dc4f1b5237c4e5d9" translate="yes" xml:space="preserve">
          <source>What's the difference between a &lt;code&gt;bootstrap&lt;/code&gt; component and an &lt;code&gt;entry component&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;bootstrap&lt;/code&gt; コンポーネントと &lt;code&gt;entry component&lt;/code&gt; の違いは何ですか？</target>
        </trans-unit>
        <trans-unit id="a2003b1e0230fe60f289921936009ec90172775d" translate="yes" xml:space="preserve">
          <source>Whatever the source, the doc viewer renders them as &quot;code snippets&quot;, either individually with the &lt;a href=&quot;docs-style-guide#code-example&quot;&gt;&lt;em&gt;code-example&lt;/em&gt;&lt;/a&gt; component or as a tabbed collection with the &lt;a href=&quot;docs-style-guide#code-tabs&quot;&gt;&lt;em&gt;code-tabs&lt;/em&gt;&lt;/a&gt; component.</source>
          <target state="translated">ソースが何であれ、ドキュメントビューアはそれらを「コードスニペット」として、個別に&lt;a href=&quot;docs-style-guide#code-example&quot;&gt;&lt;em&gt;code-example&lt;/em&gt;&lt;/a&gt;コンポーネントを使用して、または&lt;a href=&quot;docs-style-guide#code-tabs&quot;&gt;&lt;em&gt;code-tabs&lt;/em&gt;&lt;/a&gt;コンポーネントを使用したタブ付きコレクションとしてレンダリングし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d40735da03c29f6121c2a672d8e066562771fdbb" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;glossary#server-side-rendering&quot;&gt;server-side rendering&lt;/a&gt; (SSR) is used, the &lt;a href=&quot;../api/platform-server&quot;&gt;&lt;code&gt;platform-server&lt;/code&gt;&lt;/a&gt; package provides web server implementations of the &lt;code&gt;DOM&lt;/code&gt;, &lt;code&gt;XMLHttpRequest&lt;/code&gt;, and other low-level features that don't rely on a browser.</source>
          <target state="translated">場合は&lt;a href=&quot;glossary#server-side-rendering&quot;&gt;、サーバー側のレンダリング&lt;/a&gt;（SSR）が使用され、&lt;a href=&quot;../api/platform-server&quot;&gt; &lt;code&gt;platform-server&lt;/code&gt; &lt;/a&gt;パッケージは、ウェブサーバの実装を提供 &lt;code&gt;DOM&lt;/code&gt; 、 &lt;code&gt;XMLHttpRequest&lt;/code&gt; のブラウザーに依存しない、および他の低レベルの特徴を。</target>
        </trans-unit>
        <trans-unit id="8914c537808edf1a7a626676a069039b9f296c22" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; requests the &lt;code&gt;FlowerService&lt;/code&gt;, the injector begins its search at the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; belonging to &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; (&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; is included because it is injected from &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;) and ends with &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;. In this case, the &lt;code&gt;FlowerService&lt;/code&gt; is resolved in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s &lt;code&gt;providers&lt;/code&gt; array with sunflower 🌻. The injector doesn't have to look any further in the injector tree. It stops as soon as it finds the &lt;code&gt;FlowerService&lt;/code&gt; and never sees the 🌺 (red hibiscus).</source>
          <target state="translated">とき &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 要求 &lt;code&gt;FlowerService&lt;/code&gt; を、注射器は、その検索から始まる &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; に属する &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; （ &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; それがから注入されているため、含まれている &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; ）で終わる &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 。この場合、 &lt;code&gt;FlowerService&lt;/code&gt; は、ヒマワリwithを使用して &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; の &lt;code&gt;providers&lt;/code&gt; 配列で解決されます。インジェクターは、インジェクターツリーでこれ以上探す必要はありません。 &lt;code&gt;FlowerService&lt;/code&gt; が見つかるとすぐに停止し、the（赤いハイビスカス）は表示されません。</target>
        </trans-unit>
        <trans-unit id="3a290ab7d29486d5dec0940d7942415d6fab40d8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; requests the &lt;code&gt;FlowerService&lt;/code&gt;, it is the injector's job to resolve the &lt;code&gt;FlowerService&lt;/code&gt; token. The resolution of the token happens in two phases:</source>
          <target state="translated">とき &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; 要求 &lt;code&gt;FlowerService&lt;/code&gt; を、解決するために、インジェクタの仕事です &lt;code&gt;FlowerService&lt;/code&gt; のトークンを。トークンの解決は2つのフェーズで行われます。</target>
        </trans-unit>
        <trans-unit id="21374804442ed472300ccdecb64c9e08c0ae1478" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;../upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; is not provided, uses query results to determine the timing of query resolution. If any query results are inside a nested view (such as &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;), the query is resolved after change detection runs. Otherwise, it is resolved before change detection runs.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;../upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; 設けられていない、クエリ解像度のタイミングを決定するために、クエリの結果を使用します。クエリ結果がネストされたビュー（ &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; など）内にある場合、クエリは変更検出の実行後に解決されます。それ以外の場合は、変更検出が実行される前に解決されます。</target>
        </trans-unit>
        <trans-unit id="53e5281d1686a6ec68990211a7fd328735128905" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;../upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; is not provided, uses the query results to determine the timing of query resolution. If any query results are inside a nested view (such as &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;), the query is resolved after change detection runs. Otherwise, it is resolved before change detection runs.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;../upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; 設けられていない、クエリ解像度のタイミングを決定するために、クエリの結果を使用します。クエリ結果がネストされたビュー（ &lt;code&gt;*&lt;a href=&quot;../common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; など）内にある場合、クエリは変更検出の実行後に解決されます。それ以外の場合は、変更検出が実行される前に解決されます。</target>
        </trans-unit>
        <trans-unit id="9f2951b5265473e47083f23251a243f2533334e7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@.disabled&lt;/code&gt; is true, it prevents the &lt;code&gt;@childAnimation&lt;/code&gt; trigger from animating, along with any inner animations.</source>
          <target state="translated">とき &lt;code&gt;@.disabled&lt;/code&gt; 真である、それは防ぎ &lt;code&gt;@childAnimation&lt;/code&gt; の任意の内側のアニメーションと一緒に、アニメーションからトリガーを。</target>
        </trans-unit>
        <trans-unit id="aae654a850870dc683e195d0d86f434df815ab22" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; were applied to the &lt;code&gt;FlowerService&lt;/code&gt;, which is in the &lt;code&gt;providers&lt;/code&gt; array, the result was &lt;code&gt;null&lt;/code&gt; because &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; starts its search in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; injector, but &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; stops searching at &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;&amp;mdash;where there is no &lt;code&gt;FlowerService&lt;/code&gt;. In the logical tree, you can see that the &lt;code&gt;FlowerService&lt;/code&gt; is visible in &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;, not its &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; に適用された &lt;code&gt;FlowerService&lt;/code&gt; であり、 &lt;code&gt;providers&lt;/code&gt; 配列、結果はでした &lt;code&gt;null&lt;/code&gt; ので、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 内の検索を開始 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; インジェクタが、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 検索を停止しますat &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; &amp;mdash; FlowerServiceがない &lt;code&gt;FlowerService&lt;/code&gt; 。論理ツリーで、 &lt;code&gt;FlowerService&lt;/code&gt; が &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; ではなく &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; に表示されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="2bdf758a1a9690d4ad83702a2aa70dc21cb575b3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;addHero()&lt;/code&gt; saves successfully, the &lt;code&gt;subscribe()&lt;/code&gt; callback receives the new hero and pushes it into to the &lt;code&gt;heroes&lt;/code&gt; list for display.</source>
          <target state="translated">とき &lt;code&gt;addHero()&lt;/code&gt; が成功したセーブ、 &lt;code&gt;subscribe()&lt;/code&gt; コールバックは新しいヒーローを受け取りににそれをプッシュ &lt;code&gt;heroes&lt;/code&gt; 表示のためのリスト。</target>
        </trans-unit>
        <trans-unit id="f10aac19bd7597b8018bacfe0f5ef7081c6eb8a1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;bindingProperty&lt;/code&gt; is not provided, it is assumed to be equal to &lt;code&gt;directiveProperty&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;bindingProperty&lt;/code&gt; が設けられておらず、に等しいと仮定される &lt;code&gt;directiveProperty&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed12b19518c977a855a7af5f7bcbb3780eb478a3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt;, disables this rewriting, requiring the rewriting to be done manually.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; の場合、この書き換えを無効にします。書き換えを手動で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="a0a78206a1f0896e2816ea253bc9930ac1c56dfe" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ngc&lt;/code&gt; runs, it compiles &lt;code&gt;AppModule&lt;/code&gt; into a module factory, which contains definitions for all the providers declared in all the modules it includes. At runtime, this factory becomes an injector that instantiates these services.</source>
          <target state="translated">とき &lt;code&gt;ngc&lt;/code&gt; 実行されると、それはコンパイル &lt;code&gt;AppModule&lt;/code&gt; をそれに含まれるすべてのモジュールで宣言されたすべてのプロバイダの定義を含むモジュール工場へ。実行時に、このファクトリーはこれらのサービスをインスタンス化するインジェクターになります。</target>
        </trans-unit>
        <trans-unit id="c6b2139d05d2a8c8f3fc1f7405ee8a5d8b302144" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;selectedHero&lt;/code&gt; is undefined, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; removes the hero detail from the DOM. There are no &lt;code&gt;selectedHero&lt;/code&gt; bindings to consider.</source>
          <target state="translated">とき &lt;code&gt;selectedHero&lt;/code&gt; が定義されていない、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; は DOMからヒーローの詳細を削除します。考慮すべき &lt;code&gt;selectedHero&lt;/code&gt; バインディングはありません。</target>
        </trans-unit>
        <trans-unit id="e05e0539b42ad79b46d59d705a37b7a3d0c21c93" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the compiler does not check the TypeScript version and does not report an error when an unsupported version of TypeScript is used. Not recommended, as unsupported versions of TypeScript might have undefined behavior. Default is false.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の場合、サポートされていないバージョンのTypeScriptが使用されている場合、コンパイラーはTypeScriptバージョンをチェックせず、エラーを報告しません。TypeScriptのサポートされていないバージョンは未定義の動作をする可能性があるため、推奨されません。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="548c1033b7a8da41ee5f0961ac1576b4e9faa14a" translate="yes" xml:space="preserve">
          <source>When Angular creates &lt;code&gt;AppComponent&lt;/code&gt;, the DI framework creates an instance of &lt;code&gt;LoggerService&lt;/code&gt; and starts to create &lt;code&gt;UserContextService&lt;/code&gt;. &lt;code&gt;UserContextService&lt;/code&gt; also needs &lt;code&gt;LoggerService&lt;/code&gt;, which the framework already has, so the framework can provide the same instance. &lt;code&gt;UserContextService&lt;/code&gt; also needs &lt;code&gt;UserService&lt;/code&gt;, which the framework has yet to create. &lt;code&gt;UserService&lt;/code&gt; has no further dependencies, so the framework can simply use &lt;code&gt;new&lt;/code&gt; to instantiate the class and provide the instance to the &lt;code&gt;UserContextService&lt;/code&gt; constructor.</source>
          <target state="translated">Angularが &lt;code&gt;AppComponent&lt;/code&gt; を作成すると、DIフレームワークは &lt;code&gt;LoggerService&lt;/code&gt; のインスタンスを作成し、 &lt;code&gt;UserContextService&lt;/code&gt; の作成を開始します。 &lt;code&gt;UserContextService&lt;/code&gt; には、フレームワークがすでに持っている &lt;code&gt;LoggerService&lt;/code&gt; も必要なので、フレームワークは同じインスタンスを提供できます。 &lt;code&gt;UserContextService&lt;/code&gt; には、フレームワークがまだ作成していない &lt;code&gt;UserService&lt;/code&gt; も必要です。 &lt;code&gt;UserService&lt;/code&gt; にはそれ以上の依存関係がないため、フレームワークは単に &lt;code&gt;new&lt;/code&gt; を使用してクラスをインスタンス化し、インスタンスを &lt;code&gt;UserContextService&lt;/code&gt; コンストラクターに提供できます。</target>
        </trans-unit>
        <trans-unit id="9c46546530ec2305526bbe60f113e24d64bb2ea5" translate="yes" xml:space="preserve">
          <source>When Angular creates &lt;code&gt;HeroesBaseComponent&lt;/code&gt;, it also creates a new instance of &lt;code&gt;HeroService&lt;/code&gt; that is visible only to that component and its children, if any.</source>
          <target state="translated">Angularが &lt;code&gt;HeroesBaseComponent&lt;/code&gt; を作成すると、そのコンポーネントとその子（存在する場合）のみに表示される &lt;code&gt;HeroService&lt;/code&gt; の新しいインスタンスも作成されます。</target>
        </trans-unit>
        <trans-unit id="d75141e96ff6cc6af5c2f22e153bb8b7726c8439" translate="yes" xml:space="preserve">
          <source>When Angular creates a &lt;code&gt;HeroesComponent&lt;/code&gt;, the &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt; system sets the &lt;code&gt;heroService&lt;/code&gt; parameter to the singleton instance of &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">Angularが &lt;code&gt;HeroesComponent&lt;/code&gt; を作成すると、&lt;a href=&quot;../guide/dependency-injection&quot;&gt;依存性注入&lt;/a&gt;システムが &lt;code&gt;heroService&lt;/code&gt; パラメーターをHeroServiceのシングルトンインスタンスに &lt;code&gt;HeroService&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="edfe45fd7cd5a3d35587c22b5138369ceba935e9" translate="yes" xml:space="preserve">
          <source>When Angular creates a class whose constructor has parameters, it looks for type and injection metadata about those parameters so that it can inject the correct service. If Angular can't find that parameter information, it throws an error. Angular can only find the parameter information &lt;em&gt;if the class has a decorator of some kind&lt;/em&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator is the standard decorator for service classes.</source>
          <target state="translated">Angularがコンストラクターにパラメーターを持つクラスを作成すると、正しいサービスを注入できるように、それらのパラメーターに関する型と注入メタデータを探します。 Angularがそのパラメータ情報を見つけられない場合、エラーをスローします。 Angularは&lt;em&gt;、クラスにある種のデコレータがある場合に&lt;/em&gt;のみパラメータ情報を見つけることができます。 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータは、サービスクラスの標準的なデコレータです。</target>
        </trans-unit>
        <trans-unit id="b60a04b551961ac33eb89dab15ee5fc3d96de088" translate="yes" xml:space="preserve">
          <source>When Angular creates a lazy component for that module and injects &lt;code&gt;UserService&lt;/code&gt;, it finds a &lt;code&gt;UserService&lt;/code&gt; provider in the lazy module's &lt;em&gt;child injector&lt;/em&gt; and creates a &lt;em&gt;new&lt;/em&gt; instance of the &lt;code&gt;UserService&lt;/code&gt;. This is an entirely different &lt;code&gt;UserService&lt;/code&gt; instance than the app-wide singleton version that Angular injected in one of the eagerly loaded components.</source>
          <target state="translated">Angularがそのモジュールのレイジーコンポーネントを作成して &lt;code&gt;UserService&lt;/code&gt; を挿入すると、レイジーモジュールの&lt;em&gt;子インジェクターで&lt;/em&gt; &lt;code&gt;UserService&lt;/code&gt; プロバイダーが見つかり、UserServiceの&lt;em&gt;新しい&lt;/em&gt;インスタンスが作成され &lt;code&gt;UserService&lt;/code&gt; 。これは、Angularが積極的に読み込まれたコンポーネントの1つに挿入したアプリ全体のシングルトンバージョンとはまったく異なる &lt;code&gt;UserService&lt;/code&gt; インスタンスです。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dc69520190e3c83c55a291c33fca092b47e14bd0" translate="yes" xml:space="preserve">
          <source>When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking at the constructor parameter types. For example, the constructor of &lt;code&gt;HeroListComponent&lt;/code&gt; needs &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">Angularがコンポーネントクラスの新しいインスタンスを作成するとき、コンストラクターのパラメータータイプを調べて、コンポーネントが必要とするサービスやその他の依存関係を決定します。たとえば、 &lt;code&gt;HeroListComponent&lt;/code&gt; のコンストラクターにはHeroServiceが必要 &lt;code&gt;HeroService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="daa80d0bedfc508acd3e345644f12519bac5df05" translate="yes" xml:space="preserve">
          <source>When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. If a requested service instance doesn't yet exist, the injector makes one using the registered provider, and adds it to the injector before returning the service to Angular.</source>
          <target state="translated">Angularはコンポーネントがサービスに依存していることを発見すると、まずインジェクタにそのサービスのインスタンスが存在するかどうかをチェックします。要求されたサービスのインスタンスがまだ存在しない場合、インジェクタは登録されたプロバイダを使ってインスタンスを作成し、サービスをAngularに返す前にインジェクタに追加します。</target>
        </trans-unit>
        <trans-unit id="15fbac2ad05bb1b878e9b6aaaddf5c2a92440c52" translate="yes" xml:space="preserve">
          <source>When Angular first introduced lazy routes, there wasn't browser support for dynamically loading additional JavaScript. Angular created our own scheme using the syntax &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: './lazy/lazy.module#LazyModule'&lt;/code&gt; and built tooling to support it. Now that ECMAScript dynamic import is supported in many browsers, Angular is moving toward this new syntax.</source>
          <target state="translated">Angularが最初にレイジールートを導入したとき、追加のJavaScriptを動的にロードするためのブラウザーサポートはありませんでした。Angularは、構文 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: './lazy/lazy.module#LazyModule'&lt;/code&gt; を使用して独自のスキームを作成し、それをサポートするツールを構築しました。ECMAScriptの動的インポートが多くのブラウザーでサポートされるようになったため、Angularはこの新しい構文に移行しています。</target>
        </trans-unit>
        <trans-unit id="c532a909b137883ff1cc53d2b0c6b4c9086b273e" translate="yes" xml:space="preserve">
          <source>When Angular looks to inject a service for that token, it creates and delivers the instance created by the second provider.</source>
          <target state="translated">Angularがそのトークンのサービスをインジェクションしようとすると、2番目のプロバイダが作成したインスタンスを作成して配信します。</target>
        </trans-unit>
        <trans-unit id="0a3b387e0d7ce6256900c30fd7083a52d270aa24" translate="yes" xml:space="preserve">
          <source>When Angular sees this dev dependency, it provides the language service in the WebStorm environment. WebStorm then gives you colorization inside the template and autocomplete in addition to the Angular Language Service.</source>
          <target state="translated">Angularはこのdev dependencyを見ると、WebStorm環境で言語サービスを提供します。WebStormはAngular言語サービスに加えて、テンプレート内のカラー化とオートコンプリートを提供します。</target>
        </trans-unit>
        <trans-unit id="33dad2f9fbf951339a3296d3326f729bb3e085c0" translate="yes" xml:space="preserve">
          <source>When AngularJS content gets projected inside an Angular component, it still remains in &quot;AngularJS land&quot; and is managed by the AngularJS framework.</source>
          <target state="translated">AngularJSのコンテンツがAngularコンポーネント内に投影されても、それは「AngularJSランド」のままで、AngularJSフレームワークによって管理されます。</target>
        </trans-unit>
        <trans-unit id="5ed767ca456340b0d66612ee5b397caf978c20ac" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test ends with pending &lt;em&gt;micro-tasks&lt;/em&gt; such as unresolved promises, the test fails with a clear error message.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 保留中と試験終了&lt;em&gt;マイクロタスク&lt;/em&gt;ような未解決の約束として、試験は、明確なエラーメッセージで失敗します。</target>
        </trans-unit>
        <trans-unit id="706c0acd77c834e1aad2b340fca6016f1fa6d670" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test ends with pending timer event &lt;em&gt;tasks&lt;/em&gt; (queued &lt;code&gt;setTimeOut&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; callbacks), the test fails with a clear error message.</source>
          <target state="translated">とき &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 保留タイマーイベントでテストが終了&lt;em&gt;タスク&lt;/em&gt;（キューに入れられた &lt;code&gt;setTimeOut&lt;/code&gt; と &lt;code&gt;setInterval&lt;/code&gt; コールバック）を、テストでは、明確なエラーメッセージで失敗します。</target>
        </trans-unit>
        <trans-unit id="5c0f510f249ea7d1ebc16b4ca9b7274ea4dccefc" translate="yes" xml:space="preserve">
          <source>When a child of this component asks for the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; service, Angular provides the local &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; service, not the version provided in the application root injector. Child components make proper HTTP requests no matter what other modules do to &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このコンポーネントの子が &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; サービスを要求すると、Angularはアプリケーションルートインジェクターで提供されるバージョンではなく、ローカル &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; サービスを提供します。子コンポーネントは、他のモジュールが &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; に対して何をしても、適切なHTTPリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="2f50727eaded505f27a2039589063405b5098511" translate="yes" xml:space="preserve">
          <source>When a class requires a dependency, that dependency is added to the constructor as a parameter. When Angular needs to instantiate the class, it calls upon the DI framework to supply the dependency. By default, the DI framework searches for a provider in the injector hierarchy, starting at the component's local injector of the component, and if necessary bubbling up through the injector tree until it reaches the root injector.</source>
          <target state="translated">クラスが依存関係を必要とする場合、その依存関係はコンストラクタのパラメータとして追加されます。Angularがクラスのインスタンスを作成する必要がある場合、DIフレームワークを呼び出して依存関係を提供します。デフォルトでは、DIフレームワークはインジェクタ階層でプロバイダを検索し、コンポーネントのローカルインジェクタから始まり、必要に応じてインジェクタツリーを通ってルートインジェクタに到達するまでバブリングします。</target>
        </trans-unit>
        <trans-unit id="cdcac278185f690641e0973ca2f176befc8267b8" translate="yes" xml:space="preserve">
          <source>When a component declares a dependency, Angular tries to satisfy that dependency with its own &lt;code&gt;ElementInjector&lt;/code&gt;. If the component's injector lacks the provider, it passes the request up to its parent component's &lt;code&gt;ElementInjector&lt;/code&gt;.</source>
          <target state="translated">コンポーネントが依存関係を宣言すると、Angularは独自の &lt;code&gt;ElementInjector&lt;/code&gt; でその依存関係を満たそうとします。コンポーネントのインジェクターがプロバイダーを欠いている場合、コンポーネントは親コンポーネントの &lt;code&gt;ElementInjector&lt;/code&gt; にリクエストを渡します。</target>
        </trans-unit>
        <trans-unit id="fa934dc7384f20c5899aeb7143c3e042d42bada1" translate="yes" xml:space="preserve">
          <source>When a component has dependencies, you may wish to use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to both create the component and its dependencies.</source>
          <target state="translated">コンポーネントに依存関係がある場合、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を使用して、コンポーネントとその依存関係の両方を作成できます。</target>
        </trans-unit>
        <trans-unit id="80c0d48aa6b194f35fb1a95277c8c0e3c66d70a2" translate="yes" xml:space="preserve">
          <source>When a component is instantiated, Angular creates a change detector, which is responsible for propagating the component's bindings. The strategy is one of:</source>
          <target state="translated">コンポーネントがインスタンス化されると、Angularは変更検出器を作成し、コンポーネントのバインディングを伝播させる役割を果たします。戦略の一つです。</target>
        </trans-unit>
        <trans-unit id="cc7c94e41269c2b8dc0737122e64dd38c738de77" translate="yes" xml:space="preserve">
          <source>When a component or service declares a dependency, the class constructor takes that dependency as a parameter. You can tell Angular that the dependency is optional by annotating the constructor parameter with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">コンポーネントまたはサービスが依存関係を宣言すると、クラスコンストラクターはその依存関係をパラメーターとして受け取ります。コンストラクターパラメーターに &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; アノテーションを付けることで、依存関係がオプションであることをAngularに伝えることができます。</target>
        </trans-unit>
        <trans-unit id="c92f91e13ec5352ca2d9208b3c8260e92af91884" translate="yes" xml:space="preserve">
          <source>When a module is loaded at application launch, its &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; have &lt;em&gt;application-wide scope&lt;/em&gt;; that is, they are available for injection throughout the application.</source>
          <target state="translated">アプリケーションの起動時にモジュールが読み込まれると、その &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; は&lt;em&gt;アプリケーション全体のスコープがあり&lt;/em&gt;ます。つまり、アプリケーション全体で注入に使用できます。</target>
        </trans-unit>
        <trans-unit id="6422ede5f8ed58042863b6f652f29c592c282af7" translate="yes" xml:space="preserve">
          <source>When a sequence is used within a &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; or a &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call, execution continues to the next instruction only after each of the inner animation steps have completed.</source>
          <target state="translated">シーケンスが &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 呼び出し内で使用される場合、実行は、内部の各アニメーションステップが完了した後でのみ次の命令に進みます。</target>
        </trans-unit>
        <trans-unit id="c3cbb8c4d353fced8240d3f69c79bebf4d68b840" translate="yes" xml:space="preserve">
          <source>When a user clicks a &lt;em&gt;Dashboard&lt;/em&gt; hero, the &lt;code&gt;DashboardComponent&lt;/code&gt; tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate to &lt;code&gt;heroes/:id&lt;/code&gt;. The &lt;code&gt;:id&lt;/code&gt; is a route parameter whose value is the &lt;code&gt;id&lt;/code&gt; of the hero to edit.</source>
          <target state="translated">ユーザーが&lt;em&gt;ダッシュボードの&lt;/em&gt;ヒーローをクリックすると、 &lt;code&gt;DashboardComponent&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;heroes/:id&lt;/code&gt; に移動するよう指示します。 &lt;code&gt;:id&lt;/code&gt; がその値であるルートパラメータである &lt;code&gt;id&lt;/code&gt; 、編集に英雄の。</target>
        </trans-unit>
        <trans-unit id="72ff44014ef60a516903197c78b674811bdbbea1" translate="yes" xml:space="preserve">
          <source>When a user clicks the button, the &lt;code&gt;profileForm&lt;/code&gt; model is updated with new values for &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;street&lt;/code&gt;. Notice that &lt;code&gt;street&lt;/code&gt; is provided in an object inside the &lt;code&gt;address&lt;/code&gt; property. This is necessary because the &lt;code&gt;patchValue()&lt;/code&gt; method applies the update against the model structure. &lt;code&gt;PatchValue()&lt;/code&gt; only updates properties that the form model defines.</source>
          <target state="translated">ユーザーがボタンをクリックすると、 &lt;code&gt;profileForm&lt;/code&gt; モデルが &lt;code&gt;firstName&lt;/code&gt; と &lt;code&gt;street&lt;/code&gt; の新しい値で更新されます。 &lt;code&gt;street&lt;/code&gt; が &lt;code&gt;address&lt;/code&gt; プロパティ内のオブジェクトで提供されていることに注意してください。 &lt;code&gt;patchValue()&lt;/code&gt; メソッドはモデル構造に対して更新を適用するため、これが必要です。 &lt;code&gt;PatchValue()&lt;/code&gt; は、フォームモデルが定義するプロパティのみを更新します。</target>
        </trans-unit>
        <trans-unit id="5e7904f8fa1f1502df6bd3b94de8f69ab0c6c02d" translate="yes" xml:space="preserve">
          <source>When a user presses and releases a key, the &lt;code&gt;keyup&lt;/code&gt; event occurs, and Angular provides a corresponding DOM event object in the &lt;code&gt;$event&lt;/code&gt; variable which this code passes as a parameter to the component's &lt;code&gt;onKey()&lt;/code&gt; method.</source>
          <target state="translated">ユーザーがキーを押して離すと、 &lt;code&gt;keyup&lt;/code&gt; イベントが発生し、Angularは &lt;code&gt;$event&lt;/code&gt; 変数に対応するDOMイベントオブジェクトを提供します。このコードは、このコードがパラメーターとしてコンポーネントの &lt;code&gt;onKey()&lt;/code&gt; メソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="d3234f0499ea9f65642e43dacff906896c520058" translate="yes" xml:space="preserve">
          <source>When a view uses the &lt;a href=&quot;changedetectionstrategy#OnPush&quot;&gt;OnPush&lt;/a&gt; (checkOnce) change detection strategy, explicitly marks the view as changed so that it can be checked again.</source>
          <target state="translated">ビューが&lt;a href=&quot;changedetectionstrategy#OnPush&quot;&gt;OnPush&lt;/a&gt;（checkOnce）変更検出戦略を使用する場合は、ビューを変更済みとして明示的にマークし、再度チェックできるようにします。</target>
        </trans-unit>
        <trans-unit id="f2a58965900b52ff44960aeb5d3b1ab8663f125a" translate="yes" xml:space="preserve">
          <source>When all dependencies are in place, &lt;code&gt;AppComponent&lt;/code&gt; displays the user information.</source>
          <target state="translated">すべての依存関係が整うと、 &lt;code&gt;AppComponent&lt;/code&gt; はユーザー情報を表示します。</target>
        </trans-unit>
        <trans-unit id="bd8f6d53233742cc77fab54767b182e5f57eee9a" translate="yes" xml:space="preserve">
          <source>When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.</source>
          <target state="translated">要求されたサービスがすべて解決されて返されると、Angularはそれらのサービスを引数としてコンポーネントのコンストラクタを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b42dedf76e9162b85f232959c900f4d227b64bc8" translate="yes" xml:space="preserve">
          <source>When all routes were in one &lt;code&gt;AppRoutingModule&lt;/code&gt;, you put the default and &lt;a href=&quot;router#wildcard&quot;&gt;wildcard&lt;/a&gt; routes last, after the &lt;code&gt;/heroes&lt;/code&gt; route, so that the router had a chance to match a URL to the &lt;code&gt;/heroes&lt;/code&gt; route &lt;em&gt;before&lt;/em&gt; hitting the wildcard route and navigating to &quot;Page not found&quot;.</source>
          <target state="translated">すべてのルートが1にあったとき &lt;code&gt;AppRoutingModule&lt;/code&gt; 、デフォルトと入れ&lt;a href=&quot;router#wildcard&quot;&gt;ワイルドカード&lt;/a&gt;の後、最後のルートを &lt;code&gt;/heroes&lt;/code&gt; ルータはへのURLと一致するチャンスだったように、ルート &lt;code&gt;/heroes&lt;/code&gt; ルート&lt;em&gt;する前に&lt;/em&gt;、ワイルドカードのルートを打つとページ」にないのナビゲートを見つかりました。」</target>
        </trans-unit>
        <trans-unit id="6d84e128eb398288da3157378d60b0938fa2d8fd" translate="yes" xml:space="preserve">
          <source>When an AngularJS component directive supports transclusion, it may use the &lt;code&gt;ng-transclude&lt;/code&gt; directive in its template to mark the transclusion point:</source>
          <target state="translated">AngularJSコンポーネントディレクティブがトランスクルージョンをサポートしている場合、テンプレートで &lt;code&gt;ng-transclude&lt;/code&gt; ディレクティブを使用してトランスクルージョンポイントをマークできます。</target>
        </trans-unit>
        <trans-unit id="3b810ca0a0152d462508ed51e0332b20030ce21c" translate="yes" xml:space="preserve">
          <source>When an application is laid out feature per feature in this way, it can also be migrated one feature at a time. For applications that don't already look like this, applying the rules in the AngularJS style guide is a highly recommended preparation step. And this is not just for the sake of the upgrade - it is just solid advice in general!</source>
          <target state="translated">このように機能ごとにアプリケーションをレイアウトすると、1つの機能ごとに移行することもできます。まだこのように見えていないアプリケーションの場合、AngularJSスタイルガイドのルールを適用することは、非常にお勧めの準備ステップです。そして、これはアップグレードのためだけのものではありません-一般的にはただの堅実なアドバイスです!</target>
        </trans-unit>
        <trans-unit id="47d77d1d4a7d81017ab7a88f89771a6bc5639dd4" translate="yes" xml:space="preserve">
          <source>When an applications starts, Angular first configures the root injector with the providers of all eagerly loaded NgModules &lt;em&gt;before&lt;/em&gt; creating its first component and injecting any of the provided services. Once the application begins, the app root injector is closed to new providers.</source>
          <target state="translated">アプリケーションが起動すると、Angular は最初にコンポーネントを作成し、提供されたサービスを注入する&lt;em&gt;前&lt;/em&gt;に、熱心にロードされたすべてのNgModuleのプロバイダーでルートインジェクターを構成します。アプリケーションが開始すると、アプリルートインジェクターは新しいプロバイダーに対して閉じられます。</target>
        </trans-unit>
        <trans-unit id="de05fecb69b29988cfd38b015be38ee5c1e10d06" translate="yes" xml:space="preserve">
          <source>When an area of the template is set to have animations disabled, &lt;strong&gt;all&lt;/strong&gt; inner components have their animations disabled as well. This means that you can disable all animations for an app by placing a host binding set on &lt;code&gt;@.disabled&lt;/code&gt; on the topmost Angular component.</source>
          <target state="translated">テンプレートの領域でアニメーションが無効に設定されている場合、&lt;strong&gt;すべての&lt;/strong&gt;内部コンポーネントのアニメーションも無効になります。つまり、最上位のAngularコンポーネントの &lt;code&gt;@.disabled&lt;/code&gt; にホストバインディングセットを配置することで、アプリのすべてのアニメーションを無効にできます。</target>
        </trans-unit>
        <trans-unit id="2158e7ac2d535c8a0d73be64130946207704b5dd" translate="yes" xml:space="preserve">
          <source>When an eagerly loaded module provides a service, for example a &lt;code&gt;UserService&lt;/code&gt;, that service is available application-wide. If the root module provides &lt;code&gt;UserService&lt;/code&gt; and imports another module that provides the same &lt;code&gt;UserService&lt;/code&gt;, Angular registers one of them in the root app injector (see &lt;a href=&quot;ngmodule-faq#q-reimport&quot;&gt;What if I import the same module twice?&lt;/a&gt;).</source>
          <target state="translated">積極的にロードされたモジュールが &lt;code&gt;UserService&lt;/code&gt; などのサービスを提供する場合、そのサービスはアプリケーション全体で利用できます。ルートモジュールが &lt;code&gt;UserService&lt;/code&gt; を提供し、同じ &lt;code&gt;UserService&lt;/code&gt; を提供する別のモジュールをインポートする場合、Angularはそれらの1つをルートアプリインジェクターに登録します（&lt;a href=&quot;ngmodule-faq#q-reimport&quot;&gt;同じモジュールを2回インポートするとどうなるかを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="05aae7978db62e7e7c9429220e2ca190a4d0d35e" translate="yes" xml:space="preserve">
          <source>When an element is repeated within &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, the context is an &lt;code&gt;NgForRow&lt;/code&gt; whose &lt;code&gt;$implicit&lt;/code&gt; property is the value of the row instance value. For example, the &lt;code&gt;hero&lt;/code&gt; in &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let hero of heroes&quot;&lt;/code&gt;.</source>
          <target state="translated">要素は内で繰り返されるとき &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 、コンテキストは &lt;code&gt;NgForRow&lt;/code&gt; その &lt;code&gt;$implicit&lt;/code&gt; プロパティは、行インスタンス値の値です。例えば、 &lt;code&gt;hero&lt;/code&gt; 中 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let hero of heroes&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c546d06df1559440a1db83b4e5c1db73f342fce" translate="yes" xml:space="preserve">
          <source>When an element within an HTML template has animations disabled using the &lt;code&gt;@.disabled&lt;/code&gt; host binding, animations are disabled on all inner elements as well. You can't selectively disable multiple animations on a single element.</source>
          <target state="translated">HTMLテンプレート内の要素で &lt;code&gt;@.disabled&lt;/code&gt; ホストバインディングを使用してアニメーションが無効になっている場合、アニメーションはすべての内部要素でも無効になります。1つの要素で複数のアニメーションを選択的に無効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="d91d5acbcb6e8adb1db7278d2b85940b8c059799" translate="yes" xml:space="preserve">
          <source>When an item is added, a new instance of the template is added to the DOM.</source>
          <target state="translated">アイテムが追加されると、テンプレートの新しいインスタンスが DOM に追加されます。</target>
        </trans-unit>
        <trans-unit id="6812fd0a944e938e939802bbf208e98821182752" translate="yes" xml:space="preserve">
          <source>When an item is removed, its template instance is removed from the DOM.</source>
          <target state="translated">アイテムが削除されると、そのテンプレートインスタンスは DOM から削除されます。</target>
        </trans-unit>
        <trans-unit id="5a9a8569048e0b049afa4c46c8590c8fbf5d8867" translate="yes" xml:space="preserve">
          <source>When an output property emits an event, an event handler attached to that event in the template is invoked.</source>
          <target state="translated">出力プロパティがイベントを放出すると、テンプレート内のそのイベントにアタッチされたイベントハンドラが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e7a21063df73c511a2f56f2ef1bf9a8ff345822c" translate="yes" xml:space="preserve">
          <source>When animations are disabled, &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; styles can be skipped, but &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; styles can't.</source>
          <target state="translated">アニメーションが無効になっている場合、 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; スタイルはスキップできますが、 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; スタイルはスキップできません。</target>
        </trans-unit>
        <trans-unit id="29c152c927172bc42277bd311cf9c51039c351e7" translate="yes" xml:space="preserve">
          <source>When autodetect is &lt;code&gt;true&lt;/code&gt;, the test fixture calls &lt;code&gt;detectChanges&lt;/code&gt; immediately after creating the component. Then it listens for pertinent zone events and calls &lt;code&gt;detectChanges&lt;/code&gt; accordingly. When your test code modifies component property values directly, you probably still have to call &lt;code&gt;fixture.detectChanges&lt;/code&gt; to trigger data binding updates.</source>
          <target state="translated">&lt;code&gt;detectChanges&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、テストフィクスチャは、コンポーネントの作成直後にdetectChangesを呼び出します。次に、関連するゾーンイベントをリッスンし、それに応じて &lt;code&gt;detectChanges&lt;/code&gt; を呼び出します。テストコードがコンポーネントのプロパティ値を直接変更する場合でも、おそらくデータバインディングの更新をトリガーするために、 &lt;code&gt;fixture.detectChanges&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="a2068eaf5a2c701ccbfce60b3646bbea4685601e" translate="yes" xml:space="preserve">
          <source>When binding to ARIA attributes in Angular, you must use the &lt;code&gt;attr.&lt;/code&gt; prefix, as the ARIA specification depends specifically on HTML attributes rather than properties on DOM elements.</source>
          <target state="translated">AngularでARIA属性にバインドするときは、 &lt;code&gt;attr.&lt;/code&gt; 使用する必要があります。ARIA仕様は、DOM要素のプロパティではなく、HTML属性に特に依存するため、接頭辞。</target>
        </trans-unit>
        <trans-unit id="1d403c7f0a15567441991f43194df4dfc6f894d3" translate="yes" xml:space="preserve">
          <source>When bootstrapping a new root component into an application, Angular mounts the specified application component onto DOM elements identified by the componentType's selector and kicks off automatic change detection to finish initializing the component.</source>
          <target state="translated">新しいルートコンポーネントをアプリケーションにブートストラップするとき、Angularは指定されたアプリケーションコンポーネントをcomponentTypeのセレクタで識別されるDOM要素にマウントし、自動変更検出を開始してコンポーネントの初期化を完了します。</target>
        </trans-unit>
        <trans-unit id="2b86c2426923dc82f318377489363981eae2a0e1" translate="yes" xml:space="preserve">
          <source>When building Angular applications you can take advantage of sophisticated first-party libraries, such as &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt;, as well as rich ecosystem of third-party libraries. See the &lt;a href=&quot;https://angular.io/resources&quot;&gt;Angular Resources&lt;/a&gt; page for links to the most popular ones.</source>
          <target state="translated">Angularアプリケーションを構築する際には、&lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt;などの洗練されたファーストパーティライブラリやサードパーティライブラリの豊富なエコシステムを利用できます。最も人気のあるものへのリンクについては、&lt;a href=&quot;https://angular.io/resources&quot;&gt;Angular Resources&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="89bb95bbe2563b71f388aa0a0055510166a2c680" translate="yes" xml:space="preserve">
          <source>When building applications, you want to ensure that only the required resources are loaded when necessary. Whether that be loading of assets or code, making sure everything that can be deferred until needed keeps your application running efficiently. This is especially true when running different frameworks in the same application.</source>
          <target state="translated">アプリケーションを構築する際には、必要なときに必要なリソースだけがロードされるようにしたいものです。アセットのロードであれコードのロードであれ、必要になるまで延期できることを確認することで、アプリケーションを効率的に実行し続けることができます。これは、同じアプリケーションで異なるフレームワークを実行している場合に特に当てはまります。</target>
        </trans-unit>
        <trans-unit id="9386092cd495cfdab016752500f432eb023edc15" translate="yes" xml:space="preserve">
          <source>When building complex forms, managing the different areas of information is easier in smaller sections, and some groups of information naturally fall into the same group. Using a nested form group instance allows you to break large forms groups into smaller, more manageable ones.</source>
          <target state="translated">複雑なフォームを構築する際には、情報の異なる領域をより小さなセクションで管理する方が簡単です。入れ子になったフォームグループのインスタンスを使用することで、大きなフォームグループをより小さく、より管理しやすいものに分割することができます。</target>
        </trans-unit>
        <trans-unit id="0fc20bd4d6affd513b7a83567c797dc2341e8f77" translate="yes" xml:space="preserve">
          <source>When building forms in Angular, it's important to understand how the framework handles data flowing from the user or from programmatic changes. Reactive and template-driven forms follow two different strategies when handling form input. The data flow examples below begin with the favorite color input field example from above, and then show how changes to favorite color are handled in reactive forms compared to template-driven forms.</source>
          <target state="translated">Angularでフォームを構築する際には、ユーザーやプログラマティックな変更から流れてくるデータをフレームワークがどのように処理するかを理解することが重要です。リアクティブなフォームとテンプレート駆動型のフォームはフォーム入力を処理する際に2つの異なる戦略に従います。以下のデータフローの例では、上のお気に入りの色の入力フィールドの例から始まり、お気に入りの色の変更がテンプレート駆動型のフォームと比較してリアクティブフォームでどのように処理されるかを示しています。</target>
        </trans-unit>
        <trans-unit id="6fc9bc402f56e1c96af7199e1d509f4661b9855c" translate="yes" xml:space="preserve">
          <source>When building web applications, making sure your application is compatible with the majority of browsers is a goal. Even as JavaScript continues to evolve, with new features being introduced, not all browsers are updated with support for these new features at the same pace.</source>
          <target state="translated">ウェブアプリケーションを構築する際には、アプリケーションが大多数のブラウザと互換性があることを確認することが目標となります。JavaScript が進化し続け、新しい機能が導入されても、すべてのブラウザが同じペースでこれらの新機能のサポートを更新しているわけではありません。</target>
        </trans-unit>
        <trans-unit id="f8b8eff21bbd0f8e5d36d2990adb2865268b95d6" translate="yes" xml:space="preserve">
          <source>When building with the CLI, be sure to include the linked style file among the assets to be copied to the server as described in the &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-asset-configuration&quot;&gt;CLI wiki&lt;/a&gt;.</source>
          <target state="translated">CLIを使用してビルドする場合は、&lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-asset-configuration&quot;&gt;CLI wikiで&lt;/a&gt;説明されているように、サーバーにコピーされるアセットにリンクされたスタイルファイルを必ず含めてください。</target>
        </trans-unit>
        <trans-unit id="bab6d7c828b83308f18a53ca8a90ddce5abb3f87" translate="yes" xml:space="preserve">
          <source>When building with the CLI, you must configure the &lt;code&gt;angular.json&lt;/code&gt; to include &lt;em&gt;all external assets&lt;/em&gt;, including external style files.</source>
          <target state="translated">CLIを使用して &lt;code&gt;angular.json&lt;/code&gt; する場合は、angular.jsonを設定して、外部スタイルファイルを含む&lt;em&gt;すべての外部アセット&lt;/em&gt;を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="1bf2af4af56d10c85356870b1e312679a109012f" translate="yes" xml:space="preserve">
          <source>When called with unknown elements, such as a custom element name (&lt;code&gt;popup-element&lt;/code&gt; in our example), the methods will return a generic type, such as &lt;code&gt;HTMLElement&lt;/code&gt;, since TypeScript can't infer the correct type of the returned element.</source>
          <target state="translated">TypeScriptは返された要素の正しい型を推測できないため、カスタム要素名（この例では &lt;code&gt;popup-element&lt;/code&gt; ）などの不明な要素で呼び出されると、メソッドは &lt;code&gt;HTMLElement&lt;/code&gt; などの汎用型を返します。</target>
        </trans-unit>
        <trans-unit id="63d51b615b5761b9b503679d40bc888ba4267a20" translate="yes" xml:space="preserve">
          <source>When called within a &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; or a &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call, does not continue to the next instruction until all of the inner animation steps have completed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 呼び出し内で呼び出された場合、内部のアニメーションステップがすべて完了するまで、次の命令に進みません。</target>
        </trans-unit>
        <trans-unit id="dc86cf8f39cfd1795f74b2f88d47a1dafd6a033a" translate="yes" xml:space="preserve">
          <source>When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives.</source>
          <target state="translated">テンプレートをコンパイルする際には、対応するディレクティブをトリガーするために使用するセレクタのセットを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="eff0e89b5209a2cd9fe83f63b8126db2c132d8ea" translate="yes" xml:space="preserve">
          <source>When creating an &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, you can optionally specify a factory function which returns (possibly by creating) a default value of the parameterized type &lt;code&gt;T&lt;/code&gt;. This sets up the &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; using this factory as a provider as if it was defined explicitly in the application's root injector. If the factory function, which takes zero arguments, needs to inject dependencies, it can do so using the &lt;code&gt;inject&lt;/code&gt; function. See below for an example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; を作成するときに、パラメータ化された型 &lt;code&gt;T&lt;/code&gt; のデフォルト値を（場合によっては作成によって）返すファクトリ関数をオプションで指定できます。これにより、このファクトリをプロバイダーとして使用して、アプリケーションのルートインジェクターで明示的に定義されているかのように &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; がセットアップされます。引数を取らないファクトリ関数が依存関係を注入する必要がある場合は、 &lt;code&gt;inject&lt;/code&gt; 関数を使用して行うことができます。例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="a06654762cbf15c6a7d824d62d5f3ff30f8cd430" translate="yes" xml:space="preserve">
          <source>When creating an observable you should determine how you want that observable to be used and whether or not you want to multicast its values.</source>
          <target state="translated">オブザーバブルを作成する際には、そのオブザーバブルをどのように使用したいか、またその値をマルチキャストするかどうかを決定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="749c6b45f20c32758d29b06fe77e09e8859f0280" translate="yes" xml:space="preserve">
          <source>When defining a &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;, the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator on a directive property makes that property available as a &lt;em&gt;target&lt;/em&gt; of a &lt;a href=&quot;template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt;. Data values flow into an input property from the data source identified in the &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; to the right of the equal sign.</source>
          <target state="translated">定義する場合&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブを&lt;/a&gt;、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ディレクティブ財産上のデコレータは、のようにそのプロパティを使用できるようになり&lt;em&gt;、ターゲット&lt;/em&gt;の&lt;a href=&quot;template-syntax#property-binding&quot;&gt;結合性&lt;/a&gt;。データ値は、等号の右側の&lt;a href=&quot;glossary#template-expression&quot;&gt;テンプレート式で&lt;/a&gt;識別されたデータソースから入力プロパティに流れ込みます。</target>
        </trans-unit>
        <trans-unit id="4307d2cc44bc7a97d4a4418574bb1547f7624e08" translate="yes" xml:space="preserve">
          <source>When defining a &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;, the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;{}&lt;/code&gt; decorator on a directive property makes that property available as a &lt;em&gt;target&lt;/em&gt; of &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt;. Events stream &lt;em&gt;out&lt;/em&gt; of this property to the receiver identified in the &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; to the right of the equal sign.</source>
          <target state="translated">定義する場合&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブを&lt;/a&gt;、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;{}&lt;/code&gt; 指令性にデコレータはとしてその性質を利用可能にする&lt;em&gt;標的&lt;/em&gt;の&lt;a href=&quot;template-syntax#event-binding&quot;&gt;結合事象&lt;/a&gt;。イベントは、このプロパティから、等号の右側の&lt;a href=&quot;glossary#template-expression&quot;&gt;テンプレート式で&lt;/a&gt;識別されたレシーバーにストリーミング&lt;em&gt;され&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3cef3cb91c2c647878c9cddaa3fa8393736c0a9d" translate="yes" xml:space="preserve">
          <source>When do I add components to &lt;code&gt;entryComponents&lt;/code&gt;?</source>
          <target state="translated">いつコンポーネントを &lt;code&gt;entryComponents&lt;/code&gt; に追加しますか？</target>
        </trans-unit>
        <trans-unit id="e4be4307e52967d21c990d182cfe4e0ac164bd6d" translate="yes" xml:space="preserve">
          <source>When enabled, the &lt;code&gt;.js&lt;/code&gt; output of &lt;code&gt;ngc&lt;/code&gt; does not include any lazy-loaded template or style URLs.</source>
          <target state="translated">有効にすると、 &lt;code&gt;ngc&lt;/code&gt; の &lt;code&gt;.js&lt;/code&gt; 出力に遅延読み込みされたテンプレートまたはスタイルURLが含まれません。</target>
        </trans-unit>
        <trans-unit id="78cfd68dc9b0bf523c79b28df0b08d4cf40e6063" translate="yes" xml:space="preserve">
          <source>When false (the default), removes blank text nodes from compiled templates, which results in smaller emitted template factory modules. Set to true to preserve blank text nodes.</source>
          <target state="translated">false(デフォルト)に設定すると、コンパイルされたテンプレートから空白のテキスト ノードが削除され、結果として、エミッ トされるテンプレート ファクトリ モジュールが小さくなります。true に設定すると、空白のテキストノードが保存されます。</target>
        </trans-unit>
        <trans-unit id="a48aec62988f1ccca24b1925a6fcfd92ea3a485f" translate="yes" xml:space="preserve">
          <source>When false, disables interactive input prompts.</source>
          <target state="translated">false の場合、インタラクティブな入力プロンプトを無効にします。</target>
        </trans-unit>
        <trans-unit id="187407e31db6569d8a862bbe786d50251332d665" translate="yes" xml:space="preserve">
          <source>When false, factory files are generated only for &lt;code&gt;.ts&lt;/code&gt; files. Do this when using factory summaries.</source>
          <target state="translated">falseの場合、ファクトリファイルは &lt;code&gt;.ts&lt;/code&gt; ファイルに対してのみ生成されます。これは、ファクトリサマリーを使用するときに行います。</target>
        </trans-unit>
        <trans-unit id="ef603dd1a4473adca892b6e5005cb3af75201392" translate="yes" xml:space="preserve">
          <source>When generating a component file with &lt;code&gt;ng generate component&lt;/code&gt;, the CLI emits an empty CSS styles file (&lt;code&gt;.css&lt;/code&gt;) by default. You can configure the CLI to default to your preferred CSS preprocessor as explained in the &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-css-preprocessors&quot;&gt;CLI wiki&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ng generate component&lt;/code&gt; componentを使用してコンポーネントファイルを生成すると、CLIはデフォルトで空のCSSスタイルファイル（ &lt;code&gt;.css&lt;/code&gt; ）を出力します。&lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-css-preprocessors&quot;&gt;CLI wikiで&lt;/a&gt;説明されているように、CLIをデフォルトの優先CSSプリプロセッサーに設定できます。</target>
        </trans-unit>
        <trans-unit id="e66e299f045744162ddfe45522dbce7add492b38" translate="yes" xml:space="preserve">
          <source>When given a tuple with x and y position value, the router uses that offset each time it scrolls. When given a function, the router invokes the function every time it restores scroll position.</source>
          <target state="translated">x と y の位置値を持つタプルを与えられると、 ルータはスクロールするたびにそのオフセットを使用します。関数を与えられた場合、ルータはスクロール位置を復元するたびにその関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="7ef92686417b75b5cbea84d910778edba78cd2a4" translate="yes" xml:space="preserve">
          <source>When given an activated route, applies the given commands starting from the route. Otherwise, applies the given command starting from the root.</source>
          <target state="translated">有効化されたルートを与えられた場合、ルートから始まるコマンドを適用します。それ以外の場合は、ルートから始まるコマンドを適用します。</target>
        </trans-unit>
        <trans-unit id="53849b6fde8d2206f676efc5f57c1bff53663e80" translate="yes" xml:space="preserve">
          <source>When implementing &lt;code&gt;registerOnTouched&lt;/code&gt; in your own value accessor, save the given function so your class calls it when the control should be considered blurred or &quot;touched&quot;.</source>
          <target state="translated">独自の値アクセサーに &lt;code&gt;registerOnTouched&lt;/code&gt; を実装する場合は、指定された関数を保存して、コントロールがぼやけている、または「触れられている」と見なされる必要があるときにクラスがその関数を呼び出すようにします。</target>
        </trans-unit>
        <trans-unit id="6659f36f8906d9b6df663ed12a7ea8edf531eaf8" translate="yes" xml:space="preserve">
          <source>When implementing the &lt;code&gt;registerOnChange&lt;/code&gt; method in your own value accessor, save the given function so your class calls it at the appropriate time.</source>
          <target state="translated">独自の値アクセサーに &lt;code&gt;registerOnChange&lt;/code&gt; メソッドを実装する場合、指定された関数を保存して、クラスが適切なときにそれを呼び出すようにします。</target>
        </trans-unit>
        <trans-unit id="e24b1f3a3c5786e4d0e0b368b389c36801747d1a" translate="yes" xml:space="preserve">
          <source>When injected, &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; dispatches requests directly to the backend, without going through the interceptor chain.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; されると、HttpBackendはインターセプターチェーンを経由せずに、リクエストをバックエンドに直接ディスパッチします。</target>
        </trans-unit>
        <trans-unit id="580455f83a9bed03f0a9761dbfac0d9fa7233a45" translate="yes" xml:space="preserve">
          <source>When instantiating a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, pass in a collection of child controls as the first argument. The key for each child registers the name for the control.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; をインスタンス化するときは、最初の引数として子コントロールのコレクションを渡します。各子のキーは、コントロールの名前を登録します。</target>
        </trans-unit>
        <trans-unit id="1dd82c5d8059bec900275dede8a10d9747aa6216" translate="yes" xml:space="preserve">
          <source>When it appears in &lt;strong&gt;square brackets&lt;/strong&gt; ([ ]) to the &lt;strong&gt;left&lt;/strong&gt; of the equals (=), the property belongs to some &lt;em&gt;other&lt;/em&gt; component or directive; that property must be adorned with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">それはで表示されたときに&lt;strong&gt;角括弧&lt;/strong&gt;（[]）に&lt;strong&gt;左&lt;/strong&gt;等号（=）の、プロパティがいくつかに属する&lt;em&gt;他の&lt;/em&gt;コンポーネントまたはディレクティブ。このプロパティは、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; デコレータで装飾する必要があります。</target>
        </trans-unit>
        <trans-unit id="c9f1c7ae270dcf8ed2fb36e356720b2282a2234b" translate="yes" xml:space="preserve">
          <source>When it appears in the template expression to the &lt;strong&gt;&lt;em&gt;right&lt;/em&gt;&lt;/strong&gt; of the equals (=), it belongs to the template's component and does not require the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">等号（=）の&lt;strong&gt;&lt;em&gt;右側の&lt;/em&gt;&lt;/strong&gt;テンプレート式に現れる場合、それはテンプレートのコンポーネントに属し、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; デコレーターを必要としません。</target>
        </trans-unit>
        <trans-unit id="726cccf06c149c75e2bcbaec1213fc068eb64d58" translate="yes" xml:space="preserve">
          <source>When it returns true, the router will execute the regular navigation. When it returns false, the router will set the router state to an empty state. As a result, all the active components will be destroyed.</source>
          <target state="translated">true を返すと、ルータは通常のナビゲーションを実行します。falseを返すと、ルータはルータの状態を空の状態にします。その結果、アクティブなコンポーネントはすべて破棄されます。</target>
        </trans-unit>
        <trans-unit id="65bc0e8f54c69a39293ba4c95d5c5b7ea95eb9e8" translate="yes" xml:space="preserve">
          <source>When items are added, moved, or removed in the iterable, the directive must re-render the appropriate DOM nodes. To minimize churn in the DOM, only nodes that have changed are re-rendered.</source>
          <target state="translated">アイテムがイテレータブルに追加、移動、削除されたとき、ディレクティブは適切な DOM ノードを再レンダリングしなければなりません。DOM の回転を最小限に抑えるために、変更されたノードのみが再レンダリングされます。</target>
        </trans-unit>
        <trans-unit id="3383a24d31d85f720ecee22674153dda0032675f" translate="yes" xml:space="preserve">
          <source>When items are reordered, their respective templates are reordered in the DOM.</source>
          <target state="translated">アイテムが並べ替えられると、それぞれのテンプレートは DOM で並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="4e46635cb6851d2c8daac2e8a56141906f6c0a57" translate="yes" xml:space="preserve">
          <source>When migrating large applications from AngularJS to Angular using a hybrid approach, you want to migrate some of the most commonly used features first, and only use the less commonly used features if needed. Doing so helps you ensure that the application is still providing a seamless experience for your users while you are migrating.</source>
          <target state="translated">ハイブリッドアプローチを使って大規模なアプリケーションをAngularJSからAngularに移行する場合、最もよく使われる機能を先に移行し、必要に応じてあまり使われていない機能だけを使うようにしたいものです。そうすることで、移行中もアプリケーションがユーザーにシームレスな体験を提供できるようになります。</target>
        </trans-unit>
        <trans-unit id="f693ef9f80d346bdc6a2cb671a6ac073cf6c8c15" translate="yes" xml:space="preserve">
          <source>When moving applications into production, module loaders also make it easier to package them all up into production bundles with batteries included.</source>
          <target state="translated">アプリケーションを生産に移す際には、モジュールローダーを使用することで、電池を含む生産用のバンドルにすべてをパッケージ化することも容易になります。</target>
        </trans-unit>
        <trans-unit id="974ce48422781e5e8f141c93cec08580c47ded29" translate="yes" xml:space="preserve">
          <source>When navigating to '/team/11/legacy/user/jim', the router changes the URL segment '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates the Team component with the User child component in it.</source>
          <target state="translated">team11legacyuserjim」に移動すると、ルーターはURLセグメント「team11legacyuserjim」を「team11userjim」に変更し、その中にUserの子コンポーネントを持つTeamコンポーネントをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="4dabd38c86ae8f6fd64bd5a719e2864ff58a5263" translate="yes" xml:space="preserve">
          <source>When navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; you specified the &lt;em&gt;required&lt;/em&gt;&lt;code&gt;id&lt;/code&gt; of the hero-to-edit in the &lt;em&gt;route parameter&lt;/em&gt; and made it the second item of the &lt;a href=&quot;router#link-parameters-array&quot;&gt;&lt;em&gt;link parameters array&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動するときに、&lt;em&gt;ルートパラメーターで&lt;/em&gt;編集するヒーローの&lt;em&gt;必須&lt;/em&gt; &lt;code&gt;id&lt;/code&gt; を指定し、それを&lt;a href=&quot;router#link-parameters-array&quot;&gt;&lt;em&gt;リンクパラメーター配列の&lt;/em&gt;&lt;/a&gt; 2番目の項目にしました。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b596202b93519fa83ba3e0636fbd745a12579c58" translate="yes" xml:space="preserve">
          <source>When navigating within the page, you can omit the page URL when specifying the link that &lt;a href=&quot;docs-style-guide#anchors&quot;&gt;scrolls up&lt;/a&gt; to the beginning of this section.</source>
          <target state="translated">ページ内を移動する場合、このセクションの最初&lt;a href=&quot;docs-style-guide#anchors&quot;&gt;までスクロールする&lt;/a&gt;リンクを指定するときに、ページのURLを省略できます。</target>
        </trans-unit>
        <trans-unit id="47e71f5eac56adacb97cdaa135062c7be281d29c" translate="yes" xml:space="preserve">
          <source>When operating on a blank value, the pipe returns the blank value.</source>
          <target state="translated">ブランク値で操作すると、パイプはブランク値を返します。</target>
        </trans-unit>
        <trans-unit id="9470fc75d4f16eb75457c7c0701e316180391ae8" translate="yes" xml:space="preserve">
          <source>When operating on an &lt;code&gt;Array&lt;/code&gt;, the returned &lt;code&gt;Array&lt;/code&gt; is always a copy even when all the elements are being returned.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; を操作する場合、すべての要素が返される場合でも、返される &lt;code&gt;Array&lt;/code&gt; は常にコピーです。</target>
        </trans-unit>
        <trans-unit id="af8a1731fb61ac75119cbee0bc7096781d75858e" translate="yes" xml:space="preserve">
          <source>When possible, every snippet of code on a guide page should be derived from a code sample file. You tell the Angular documentation engine which code file - or fragment of a code file - to display by configuring &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; attributes.</source>
          <target state="translated">可能な場合、ガイドページのすべてのコードスニペットは、コードサンプルファイルから派生させる必要があります。 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; 属性を構成することで、Angularドキュメントエンジンに表示するコードファイル（またはコードファイルのフラグメント）を指示します。</target>
        </trans-unit>
        <trans-unit id="4b1e14412852555d0dead8387cd5e4230c5c2210" translate="yes" xml:space="preserve">
          <source>When reasoning about how a hybrid application works it is useful to have a mental model which describes what is happening and explains what is happening at the lowest level.</source>
          <target state="translated">ハイブリッドアプリケーションがどのように動作するかを推論する際には、何が起こっているかを説明し、最低レベルで何が起こっているかを説明するメンタルモデルを持っていると便利です。</target>
        </trans-unit>
        <trans-unit id="910d857793129df45ce010da90a7c320c1e97758" translate="yes" xml:space="preserve">
          <source>When registered at the root, the module should be used as follows</source>
          <target state="translated">ルートで登録する場合は、以下のようにモジュールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3a43104f732ee923f94742e9dafb4569962350fe" translate="yes" xml:space="preserve">
          <source>When resolving a token for a component/directive, Angular resolves it in two phases:</source>
          <target state="translated">compontdirectiveのトークンを解決する場合、Angularは2つのフェーズで解決します。</target>
        </trans-unit>
        <trans-unit id="c2ae9e9637b2b33a1688e28b8fbf98ba2ef54d5d" translate="yes" xml:space="preserve">
          <source>When running a hybrid app, you may encounter situations where you need to inject some AngularJS dependencies into your Angular code. Maybe you have some business logic still in AngularJS services. Maybe you want access to AngularJS's built-in services like &lt;code&gt;$location&lt;/code&gt; or &lt;code&gt;$timeout&lt;/code&gt;.</source>
          <target state="translated">ハイブリッドアプリを実行しているときに、AngularJSの依存関係をAngularコードに挿入する必要がある場合があります。おそらく、AngularJSサービスにビジネスロジックがまだ残っているかもしれません。 &lt;code&gt;$location&lt;/code&gt; や &lt;code&gt;$timeout&lt;/code&gt; などのAngularJSの組み込みサービスにアクセスしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="3bed0140c9176f2a5f051b579d76e69efbabf955" translate="yes" xml:space="preserve">
          <source>When running in a web browser, &lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;&lt;code&gt;BrowserModule&lt;/code&gt;&lt;/a&gt; is imported from the &lt;code&gt;platform-browser&lt;/code&gt; package, and supports services that simplify security and event processing, and allows applications to access browser-specific features, such as interpreting keyboard input and controlling the title of the document being displayed. All applications running in the browser use the same platform service.</source>
          <target state="translated">Webブラウザーで実行する場合、&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt; &lt;code&gt;BrowserModule&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;platform-browser&lt;/code&gt; パッケージからインポートされ、セキュリティとイベント処理を簡素化するサービスをサポートし、アプリケーションがキーボード入力の解釈やドキュメントのタイトルの制御などのブラウザー固有の機能にアクセスできるようにします表示されます。ブラウザで実行されるすべてのアプリケーションは、同じプラットフォームサービスを使用します。</target>
        </trans-unit>
        <trans-unit id="d3b9496755bdbefbc04d83cf169903cd6a85e935" translate="yes" xml:space="preserve">
          <source>When running this test in your repo, you need the &lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt;&lt;code&gt;ts-node&lt;/code&gt;&lt;/a&gt; package. You can avoid this by renaming &lt;code&gt;index.spec.ts&lt;/code&gt; to &lt;code&gt;index.spec.js&lt;/code&gt;.</source>
          <target state="translated">このテストをリポジトリで実行するときは、&lt;a href=&quot;https://github.com/TypeStrong/ts-node&quot;&gt; &lt;code&gt;ts-node&lt;/code&gt; &lt;/a&gt;パッケージが必要です。これを回避するには、 &lt;code&gt;index.spec.ts&lt;/code&gt; を &lt;code&gt;index.spec.js&lt;/code&gt; に名前変更します。</target>
        </trans-unit>
        <trans-unit id="ca1e00f7ccb695467c2c1c8bdcb6dc3a59945ddf" translate="yes" xml:space="preserve">
          <source>When set to 'enabled', scrolls to the anchor element when the URL has a fragment. Anchor scrolling is disabled by default.</source>
          <target state="translated">enabled」に設定すると、URLにフラグメントがある場合にアンカー要素にスクロールします。アンカーのスクロールはデフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="df46a80b7b23d043f67f6a3e6c0f76498ecbceda" translate="yes" xml:space="preserve">
          <source>When steps are defined by &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function calls, each call within the group is executed instantly.</source>
          <target state="translated">ステップが &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数呼び出しで定義されている場合、グループ内の各呼び出しは即座に実行されます。</target>
        </trans-unit>
        <trans-unit id="ec7e8de6c9a711c3fd504943c4759732a87b530d" translate="yes" xml:space="preserve">
          <source>When subscribing to an observable in a component, you almost always arrange to unsubscribe when the component is destroyed.</source>
          <target state="translated">コンポーネント内のオブザーバブルを購読するときは、ほとんどの場合、コンポーネントが破壊されたときに購読を解除するように手配します。</target>
        </trans-unit>
        <trans-unit id="c84a9e640ad95d9f4b83e468d1eed71718bb7381" translate="yes" xml:space="preserve">
          <source>When supplied, a custom handler for a completion notification from this emitter.</source>
          <target state="translated">指定された場合、このエミッタからの完了通知のためのカスタムハンドラ。</target>
        </trans-unit>
        <trans-unit id="4df8413e1037a7ffe9bd25f1c95460fff8733865" translate="yes" xml:space="preserve">
          <source>When supplied, a custom handler for an error notification from this emitter.</source>
          <target state="translated">指定された場合、このエミッタからのエラー通知のためのカスタムハンドラ。</target>
        </trans-unit>
        <trans-unit id="00c39ac45b462ecb37bcc3a021a4360c58c40852" translate="yes" xml:space="preserve">
          <source>When supplied, a custom handler for emitted events.</source>
          <target state="translated">指定された場合、放出されるイベントのためのカスタムハンドラ。</target>
        </trans-unit>
        <trans-unit id="9e9d2f5c611c356028dee0d50c203b929a7a14e8" translate="yes" xml:space="preserve">
          <source>When switching between the two routes, the &lt;code&gt;HeroDetailComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt; will ease in from the left when routed to and will slide to the right when navigating away.</source>
          <target state="translated">2つのルートを切り替える場合、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; と &lt;code&gt;HeroListComponent&lt;/code&gt; は、ルーティングされると左から緩められ、ナビゲートされると右にスライドします。</target>
        </trans-unit>
        <trans-unit id="6d869f89c0032b7d502684b0c42e737ad757a361" translate="yes" xml:space="preserve">
          <source>When testing a component, only the service's public API should matter. In general, tests themselves should not make calls to remote servers. They should emulate such calls. The setup in this &lt;code&gt;app/twain/twain.component.spec.ts&lt;/code&gt; shows one way to do that:</source>
          <target state="translated">コンポーネントをテストする場合、問題になるのはサービスのパブリックAPIだけです。一般に、テスト自体はリモートサーバーを呼び出すべきではありません。彼らはそのような呼び出しをエミュレートする必要があります。この &lt;code&gt;app/twain/twain.component.spec.ts&lt;/code&gt; の設定は、そのための1つの方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ef0f0acd351b519e1bdbe282aaf9c197ad051fd4" translate="yes" xml:space="preserve">
          <source>When testing a service with a dependency, provide the mock in the &lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">依存関係のあるサービスをテストする場合は、 &lt;code&gt;providers&lt;/code&gt; 配列にモックを提供します。</target>
        </trans-unit>
        <trans-unit id="0860f03444a0fc7aa7e1b3fb17143a54bae674bc" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; expression returns a truthy value, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; adds the &lt;code&gt;ItemDetailComponent&lt;/code&gt; to the DOM. When the expression is falsy, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; removes the &lt;code&gt;ItemDetailComponent&lt;/code&gt; from the DOM, destroying that component and all of its sub-components.</source>
          <target state="translated">とき &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; 式がtruthy値を返し、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; は追加 &lt;code&gt;ItemDetailComponent&lt;/code&gt; を DOMに。発現はfalsyとき、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; は除去 &lt;code&gt;ItemDetailComponent&lt;/code&gt; をそのコンポーネントとそのサブコンポーネントのすべてを破壊し、DOMから。</target>
        </trans-unit>
        <trans-unit id="7210ba167993f8f770531f5c2b064669c209d5dc" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;@.disabled&lt;/code&gt; binding is true, the &lt;code&gt;@childAnimation&lt;/code&gt; trigger doesn't kick off.</source>
          <target state="translated">とき &lt;code&gt;@.disabled&lt;/code&gt; 結合が真である、 &lt;code&gt;@childAnimation&lt;/code&gt; のトリガーがキックオフされません。</target>
        </trans-unit>
        <trans-unit id="8caa4e29d9b4d974dd5d9041992426ba9ac8a426" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;base&lt;/code&gt; tag is mis-configured, the app fails to load and the browser console displays &lt;code&gt;404 - Not Found&lt;/code&gt; errors for the missing files. Look at where it &lt;em&gt;tried&lt;/em&gt; to find those files and adjust the base tag appropriately.</source>
          <target state="translated">場合は &lt;code&gt;base&lt;/code&gt; タグが誤って設定されている、アプリが負荷に失敗し、ブラウザのコンソールが表示さ &lt;code&gt;404 - Not Found&lt;/code&gt; 不足しているファイルのエラーを。それらがそれらのファイルを見つけよ&lt;em&gt;うと&lt;/em&gt;した場所を見て、ベースタグを適切に調整してください。</target>
        </trans-unit>
        <trans-unit id="e75c241922935cbd3ea5df02a84d5245d7cf9eba" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;condition&lt;/code&gt; is falsy, the top (A) paragraph appears and the bottom (B) paragraph disappears. When the &lt;code&gt;condition&lt;/code&gt; is truthy, the top (A) paragraph is removed and the bottom (B) paragraph appears.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; falsyで、トップ（A）段落表示され、下（B）段落は消滅。場合 &lt;code&gt;condition&lt;/code&gt; truthyあり、上部（A）項は除去され、下（B）段落現れます。</target>
        </trans-unit>
        <trans-unit id="3dc1efd9593828d0e01af36e18c84dde19f4956e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;deleteRequest&lt;/code&gt; event fires, Angular calls the parent component's &lt;code&gt;deleteItem()&lt;/code&gt; method, passing the &lt;em&gt;item-to-delete&lt;/em&gt; (emitted by &lt;code&gt;ItemDetail&lt;/code&gt;) in the &lt;code&gt;$event&lt;/code&gt; variable.</source>
          <target state="translated">とき &lt;code&gt;deleteRequest&lt;/code&gt; イベントが発生、角度は、親コンポーネントの呼び出し、 &lt;code&gt;deleteItem()&lt;/code&gt; 渡して、メソッドを&lt;em&gt;アイテム・ツー・削除&lt;/em&gt;（から放出された &lt;code&gt;ItemDetail&lt;/code&gt; をして） &lt;code&gt;$event&lt;/code&gt; 変数。</target>
        </trans-unit>
        <trans-unit id="c9a2b3437891fb18901b8b21686790b30e088379" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;id&lt;/code&gt; cannot be found, the component should re-route to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;id&lt;/code&gt; 見つからない、コンポーネントは、ルート再べき &lt;code&gt;HeroListComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="d2e3d77dbe8594275e223d51b36cd1f3be8ab17c" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;noImplicitAny&lt;/code&gt; flag is &lt;code&gt;false&lt;/code&gt; (the default), and if the compiler cannot infer the variable type based on how it's used, the compiler silently defaults the type to &lt;code&gt;any&lt;/code&gt;. That's what is meant by &lt;em&gt;implicit &lt;code&gt;any&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">とき &lt;code&gt;noImplicitAny&lt;/code&gt; フラグが &lt;code&gt;false&lt;/code&gt; （デフォルト）、およびコンパイラが変数の型推論それが使われている方法に基づいてすることができない場合、コンパイラ黙っデフォルトにタイプ &lt;code&gt;any&lt;/code&gt; 。それが&lt;em&gt;暗黙の &lt;code&gt;any&lt;/code&gt; の&lt;/em&gt;意味です。</target>
        </trans-unit>
        <trans-unit id="1d4a388447e5472702495919fcaedf96a0b5cef4" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;noImplicitAny&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt; and the TypeScript compiler cannot infer the type, it still generates the JavaScript files, but it also &lt;strong&gt;reports an error&lt;/strong&gt;. Many seasoned developers prefer this stricter setting because type checking catches more unintentional errors at compile time.</source>
          <target state="translated">とき &lt;code&gt;noImplicitAny&lt;/code&gt; フラグが &lt;code&gt;true&lt;/code&gt; と活字体のコンパイラが型を推論することはできません、それはまだJavaScriptファイルを生成し、それはまた、&lt;strong&gt;エラーを報告します&lt;/strong&gt;。型チェックはコンパイル時に意図しないエラーをキャッチするため、熟練した開発者の多くはこのより厳しい設定を好みます。</target>
        </trans-unit>
        <trans-unit id="acd1794f17ea94afe9bc086e9963108f4a25ba69" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;noImplicitAny&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;, you may get &lt;em&gt;implicit index errors&lt;/em&gt; as well. Most developers feel that &lt;em&gt;this particular error&lt;/em&gt; is more annoying than helpful. You can suppress them with the following additional flag:</source>
          <target state="translated">とき &lt;code&gt;noImplicitAny&lt;/code&gt; のフラグが &lt;code&gt;true&lt;/code&gt; 、あなたが得ることが&lt;em&gt;暗黙のインデックスエラーを&lt;/em&gt;同様。ほとんどの開発者は、&lt;em&gt;この特定のエラー&lt;/em&gt;は役立つよりも迷惑であると感じています。次の追加のフラグでそれらを抑制することができます：</target>
        </trans-unit>
        <trans-unit id="1221ec7078025cb9fbeced33a7c810ee121599ea" translate="yes" xml:space="preserve">
          <source>When the Angular Router matches a route that uses AngularJS, the &lt;code&gt;AngularJSComponent&lt;/code&gt; is rendered, and the content is rendered within the AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/directive/ngView&quot;&gt;&lt;code&gt;ng-view&lt;/code&gt;&lt;/a&gt; directive. When the user navigates away from the route, the &lt;code&gt;$rootScope&lt;/code&gt; is destroyed on the AngularJS application.</source>
          <target state="translated">AngularルーターがAngularJSを使用するルートと一致すると、 &lt;code&gt;AngularJSComponent&lt;/code&gt; がレンダリングされ、AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/directive/ngView&quot;&gt; &lt;code&gt;ng-view&lt;/code&gt; &lt;/a&gt;ディレクティブ内でコンテンツがレンダリングされます。ユーザーがルートから離れると、AngularJSアプリケーションで &lt;code&gt;$rootScope&lt;/code&gt; が破棄されます。</target>
        </trans-unit>
        <trans-unit id="080f2859f1d13e16f7fe1af393eea801d31826ab" translate="yes" xml:space="preserve">
          <source>When the Angular compiler turns this template into TypeScript code, it prevents TypeScript from reporting that &lt;code&gt;bestByDate&lt;/code&gt; is not a member of the &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; object when it runs type checking on the template.</source>
          <target state="translated">AngularコンパイラーがこのテンプレートをTypeScriptコードに &lt;code&gt;bestByDate&lt;/code&gt; すると、テンプレートで型チェックを実行するときに、typeScriptがbestByDateが &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; オブジェクトのメンバーではないことを報告しなくなります。</target>
        </trans-unit>
        <trans-unit id="e0289ecc8b0efe9a3b03fd5c608e586c950afcad" translate="yes" xml:space="preserve">
          <source>When the Angular compiler turns your template into TypeScript code, it prevents TypeScript from reporting that &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; might be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">AngularコンパイラーがテンプレートをTypeScriptコードに変換すると、TypeScriptは &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; である可能性があると報告しなくなります。</target>
        </trans-unit>
        <trans-unit id="7b523d4946336137aa2dbed657d1c4be4adcefae" translate="yes" xml:space="preserve">
          <source>When the Angular router lazy-loads a module, it creates a new execution context. That &lt;a href=&quot;ngmodule-faq#q-why-child-injector&quot;&gt;context has its own injector&lt;/a&gt;, which is a direct child of the application injector.</source>
          <target state="translated">Angularルーターがモジュールをレイジーロードすると、新しい実行コンテキストが作成されます。その&lt;a href=&quot;ngmodule-faq#q-why-child-injector&quot;&gt;コンテキストには&lt;/a&gt;、アプリケーションインジェクターの直接の子である独自のインジェクターがあります。</target>
        </trans-unit>
        <trans-unit id="2cf28989035e8b08a947a71d640454a09e99a9b3" translate="yes" xml:space="preserve">
          <source>When the Angular router lazy-loads a module, it creates a new injector. This injector is a child of the root application injector. Imagine a tree of injectors; there is a single root injector and then a child injector for each lazy loaded module. The router adds all of the providers from the root injector to the child injector. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</source>
          <target state="translated">Angular ルーターがモジュールをレイジーロードすると、新しいインジェクターが作成されます。このインジェクターはルートアプリケーションのインジェクターの子となります。インジェクターのツリーを想像してみてください。ルーターは、ルートインジェクターから子インジェクターにすべてのプロバイダーを追加します。ルーターが遅延ロードされたコンテキスト内でコンポーネントを作成すると、Angularはアプリケーションのルートインジェクターのサービスインスタンスよりも、これらのプロバイダーから作成されたサービスインスタンスを優先します。</target>
        </trans-unit>
        <trans-unit id="a59c1220766a1692e2ac330d5b21be92fc1db6a9" translate="yes" xml:space="preserve">
          <source>When the CLI commands &lt;code&gt;ng test&lt;/code&gt; and &lt;code&gt;ng e2e&lt;/code&gt; are generally running the CI tests in your environment, you might still need to adjust your configuration to run the Chrome browser tests.</source>
          <target state="translated">CLIコマンドの &lt;code&gt;ng test&lt;/code&gt; および &lt;code&gt;ng e2e&lt;/code&gt; が環境内でCIテストを実行している場合でも、Chromeブラウザーテストを実行するために構成を調整する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="d88b7c40f460e73c24fa3f0de74d16ad21ad9d2c" translate="yes" xml:space="preserve">
          <source>When the CLI generated the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; for the feature module, it included a template, &lt;code&gt;customer-dashboard.component.html&lt;/code&gt;, with the following markup:</source>
          <target state="translated">CLI が機能モジュールの &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; を生成したときに、次のマークアップを含むテンプレート &lt;code&gt;customer-dashboard.component.html&lt;/code&gt; が含まれていました。</target>
        </trans-unit>
        <trans-unit id="59925ab392dd758a0d023368a837b4147d92ef54" translate="yes" xml:space="preserve">
          <source>When the CLI generated the &lt;code&gt;HeroesComponent&lt;/code&gt;, it created an empty &lt;code&gt;heroes.component.css&lt;/code&gt; stylesheet for the &lt;code&gt;HeroesComponent&lt;/code&gt; and pointed to it in &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; like this.</source>
          <target state="translated">CLIが発生した場合は &lt;code&gt;HeroesComponent&lt;/code&gt; を、それが空の状態で作成 &lt;code&gt;heroes.component.css&lt;/code&gt; のためのスタイルシート &lt;code&gt;HeroesComponent&lt;/code&gt; をし、それを指摘 &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; このような。</target>
        </trans-unit>
        <trans-unit id="aa5fd6c00e755291fcd1e8dfd434052f8247fbca" translate="yes" xml:space="preserve">
          <source>When the ES5 Browserslist result is &lt;code&gt;disabled&lt;/code&gt;, then ES5 browser support is not required. Otherwise, ES5 browser support is required.</source>
          <target state="translated">ES5 Browserslistの結果が &lt;code&gt;disabled&lt;/code&gt; 場合、ES5ブラウザーのサポートは必要ありません。それ以外の場合は、ES5ブラウザーのサポートが必要です。</target>
        </trans-unit>
        <trans-unit id="d409951125980096e2daa76599fa79723877f3d7" translate="yes" xml:space="preserve">
          <source>When the app starts, the &lt;code&gt;selectedHero&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;&lt;em&gt;by design&lt;/em&gt;.</source>
          <target state="translated">アプリが起動したとき、 &lt;code&gt;selectedHero&lt;/code&gt; は&lt;em&gt;設計上&lt;/em&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;em&gt;です&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="85cce31634dd108961a3fd7d6540d6c70f895fff" translate="yes" xml:space="preserve">
          <source>When the app starts, the browser's address bar points to the web site's root. That doesn't match any existing route so the router doesn't navigate anywhere. The space below the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; is blank.</source>
          <target state="translated">アプリが起動すると、ブラウザーのアドレスバーはWebサイトのルートを指します。これは既存のルートと一致しないため、ルーターはどこにもナビゲートしません。 &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 下のスペースは空白です。</target>
        </trans-unit>
        <trans-unit id="2bea55775588ba5cf5d20de8360b1abd2270286d" translate="yes" xml:space="preserve">
          <source>When the application launches, the initial URL in the browser bar is something like:</source>
          <target state="translated">アプリケーションを起動すると、ブラウザバーの初期URLは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="229415848028c721168bbcfe230abe07e6e4c7d2" translate="yes" xml:space="preserve">
          <source>When the application requests navigation to the path &lt;code&gt;/crisis-center&lt;/code&gt;, the router activates an instance of &lt;code&gt;CrisisListComponent&lt;/code&gt;, displays its view, and updates the browser's address location and history with the URL for that path.</source>
          <target state="translated">アプリケーションがパス &lt;code&gt;/crisis-center&lt;/code&gt; へのナビゲーションを要求すると、ルーターは &lt;code&gt;CrisisListComponent&lt;/code&gt; のインスタンスをアクティブにし、そのビューを表示し、ブラウザーのアドレスの場所と履歴をそのパスのURLで更新します。</target>
        </trans-unit>
        <trans-unit id="c361606b02a6340c1440983835104942a028a4c0" translate="yes" xml:space="preserve">
          <source>When the bootstrap method is switched from that of &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to pure Angular, AngularJS ceases to exist on the page completely. At this point, you need to tell Protractor that it should not be looking for an AngularJS app anymore, but instead it should find &lt;em&gt;Angular apps&lt;/em&gt; from the page.</source>
          <target state="translated">ブートストラップメソッドを &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; のメソッドから純粋なAngular に切り替えると、AngularJSはページに完全に存在しなくなります。この時点で、Protractorに、AngularJSアプリを探すのではなく、ページから&lt;em&gt;Angularアプリ&lt;/em&gt;を見つけるように指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="390621ac2e07fd3b6f4546222f0b4c3bdc079e78" translate="yes" xml:space="preserve">
          <source>When the browser refreshes, the app should work again. You can edit the hero's name and see the changes reflected immediately in the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; above the textbox.</source>
          <target state="translated">ブラウザが更新されると、アプリは再び動作するはずです。ヒーローの名前を編集して、テキストボックスの上の &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; にすぐに反映された変更を確認できます。</target>
        </trans-unit>
        <trans-unit id="7f7fdc0a3d021ba9aefb9ebd7e31adbe1a20f6b3" translate="yes" xml:space="preserve">
          <source>When the browser renders &lt;code&gt;&amp;lt;input type=&quot;text&quot; value=&quot;Sarah&quot;&amp;gt;&lt;/code&gt;, it creates a corresponding DOM node with a &lt;code&gt;value&lt;/code&gt; property initialized to &quot;Sarah&quot;.</source>
          <target state="translated">ブラウザーは &lt;code&gt;&amp;lt;input type=&quot;text&quot; value=&quot;Sarah&quot;&amp;gt;&lt;/code&gt; をレンダリングするときに、 &lt;code&gt;value&lt;/code&gt; プロパティが「Sarah」に初期化された対応するDOMノードを作成します。</target>
        </trans-unit>
        <trans-unit id="df2233bf5455bd5715e7600e6f1195db0c477e2f" translate="yes" xml:space="preserve">
          <source>When the browser's location URL changes to match the path segment &lt;code&gt;/crisis-center&lt;/code&gt;, then the router activates an instance of the &lt;code&gt;CrisisListComponent&lt;/code&gt; and displays its view.</source>
          <target state="translated">ブラウザーのロケーションURLがパスセグメント &lt;code&gt;/crisis-center&lt;/code&gt; と一致するように変更されると、ルーターは &lt;code&gt;CrisisListComponent&lt;/code&gt; のインスタンスをアクティブにし、そのビューを表示します。</target>
        </trans-unit>
        <trans-unit id="6169562d3c2a62b330d6c334a1f65f9b57448074" translate="yes" xml:space="preserve">
          <source>When the build is complete, make a copy of &lt;code&gt;docs/index.html&lt;/code&gt; and name it &lt;code&gt;docs/404.html&lt;/code&gt;.</source>
          <target state="translated">ビルドが完了したら、 &lt;code&gt;docs/index.html&lt;/code&gt; のコピーを作成し、 &lt;code&gt;docs/404.html&lt;/code&gt; という名前を付けます。</target>
        </trans-unit>
        <trans-unit id="f89de102a1abb74769837f142272c4ff2f6b0f07" translate="yes" xml:space="preserve">
          <source>When the component instance is destroyed, so is that service instance.</source>
          <target state="translated">コンポーネント インスタンスが破棄されると、そのサービス インスタンスも破棄されます。</target>
        </trans-unit>
        <trans-unit id="2311871b7205a5129ce3ee5c983030b3867b7bc9" translate="yes" xml:space="preserve">
          <source>When the condition is false, &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; removes its host element from the DOM, detaches it from DOM events (the attachments that it made), detaches the component from Angular change detection, and destroys it. The component and DOM nodes can be garbage-collected and free up memory.</source>
          <target state="translated">条件がfalseの場合、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; はホスト要素をDOMから削除し、それをDOMイベント（作成された添付ファイル）から切り離し、コンポーネントをAngular変更検出から切り離して破棄します。コンポーネントとDOMノードをガベージコレクションしてメモリを解放できます。</target>
        </trans-unit>
        <trans-unit id="4524392797b14c325b60bac95b96ec334a2b3e1a" translate="yes" xml:space="preserve">
          <source>When the contents of the iterator changes, &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; makes the corresponding changes to the DOM:</source>
          <target state="translated">イテレータの内容が変更されると、 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; はDOMに対応する変更を行います。</target>
        </trans-unit>
        <trans-unit id="0e5038380ebb787d300a2c9eb39551f139a04fd3" translate="yes" xml:space="preserve">
          <source>When the current row hero is the same as the &lt;code&gt;selectedHero&lt;/code&gt;, Angular adds the &lt;code&gt;selected&lt;/code&gt; CSS class. When the two heroes are different, Angular removes the class.</source>
          <target state="translated">現在の行のヒーローが &lt;code&gt;selectedHero&lt;/code&gt; と同じ場合、Angularは &lt;code&gt;selected&lt;/code&gt; CSSクラスを追加します。2人のヒーローが異なる場合、Angularはクラスを削除します。</target>
        </trans-unit>
        <trans-unit id="88f7dc097723856c6451253157ead9cee3d512b4" translate="yes" xml:space="preserve">
          <source>When the default change detector detects changes, it invokes &lt;code&gt;ngOnChanges()&lt;/code&gt; if supplied, regardless of whether you perform additional change detection. Typically, you should not use both &lt;code&gt;&lt;a href=&quot;docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; to respond to changes on the same input.</source>
          <target state="translated">デフォルトの変更検出機能が変更を検出すると、追加の変更検出を実行するかどうかに関係なく、指定されている場合は &lt;code&gt;ngOnChanges()&lt;/code&gt; を呼び出します。通常、同じ入力の変更に応答するために &lt;code&gt;&lt;a href=&quot;docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; の両方を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="87eced2ba76fd26a75fedaeb26d1a231925e3980" translate="yes" xml:space="preserve">
          <source>When the event is raised, the handler executes the template statement. The template statement typically involves a receiver, which performs an action in response to the event, such as storing a value from the HTML control into a model.</source>
          <target state="translated">イベントが発生すると、ハンドラはテンプレート文を実行します。テンプレート文は通常、レシーバを含み、レシーバはイベントに応答してアクションを実行します。</target>
        </trans-unit>
        <trans-unit id="e6dde887a621ed7d8cda22827f17a6b04470ac49" translate="yes" xml:space="preserve">
          <source>When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not applied and the formatted text will have the same day, month and year of the expression.</source>
          <target state="translated">式が時間のないISO文字列(例:2016-09-19)の場合、タイムゾーンオフセットは適用されず、フォーマットされたテキストは式と同じ日、月、年を持つことになります。</target>
        </trans-unit>
        <trans-unit id="37ece522a490a41d305f59b9d00b58e362fecb66" translate="yes" xml:space="preserve">
          <source>When the given name is non-blank, the handler creates a &lt;code&gt;Hero&lt;/code&gt;-like object from the name (it's only missing the &lt;code&gt;id&lt;/code&gt;) and passes it to the services &lt;code&gt;addHero()&lt;/code&gt; method.</source>
          <target state="translated">指定された名前が空白でない場合、ハンドラーは名前から &lt;code&gt;Hero&lt;/code&gt; のようなオブジェクトを作成し（ &lt;code&gt;id&lt;/code&gt; が欠けているだけです）、それをサービスの &lt;code&gt;addHero()&lt;/code&gt; メソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="15483efa7611420de43a81a7b88feacee6eacb09" translate="yes" xml:space="preserve">
          <source>When the key is a property of the host element, the property value is the propagated to the specified DOM property.</source>
          <target state="translated">key が host 要素のプロパティの場合、プロパティ値は指定された DOM プロパティに伝播されます。</target>
        </trans-unit>
        <trans-unit id="8b2b2a15239650c80bd61cf3a7c4a6838674078b" translate="yes" xml:space="preserve">
          <source>When the key is a static attribute in the DOM, the attribute value is propagated to the specified property in the host element.</source>
          <target state="translated">キーが DOM 内の静的属性である場合、属性値は host 要素内の指定されたプロパティに伝搬されます。</target>
        </trans-unit>
        <trans-unit id="d3a68099d4829af5c295f8308c3e9d58baf906ee" translate="yes" xml:space="preserve">
          <source>When the old component logs a message with &lt;code&gt;OldLogger&lt;/code&gt;, you want the singleton instance of &lt;code&gt;NewLogger&lt;/code&gt; to handle it instead. In this case, the dependency injector should inject that singleton instance when a component asks for either the new or the old logger. &lt;code&gt;OldLogger&lt;/code&gt; should be an &lt;em&gt;alias&lt;/em&gt; for &lt;code&gt;NewLogger&lt;/code&gt;.</source>
          <target state="translated">古いコンポーネントが &lt;code&gt;OldLogger&lt;/code&gt; を使用してメッセージをログに記録する場合、代わりに &lt;code&gt;NewLogger&lt;/code&gt; のシングルトンインスタンスで処理する必要があります。この場合、コンポーネントが新しいロガーまたは古いロガーを要求したときに、依存関係インジェクターはそのシングルトンインスタンスをインジェクトする必要があります。 &lt;code&gt;OldLogger&lt;/code&gt; はあるべき&lt;em&gt;別名&lt;/em&gt;ため &lt;code&gt;NewLogger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ff128e54a9e6628bf482f076b33ee1b1b627b6f" translate="yes" xml:space="preserve">
          <source>When the parent component &lt;em&gt;class&lt;/em&gt; requires that kind of access, &lt;strong&gt;&lt;em&gt;inject&lt;/em&gt;&lt;/strong&gt; the child component into the parent as a &lt;em&gt;ViewChild&lt;/em&gt;.</source>
          <target state="translated">親コンポーネントの場合は&lt;em&gt;クラスが&lt;/em&gt;アクセスのようなものを必要とし、&lt;strong&gt;&lt;em&gt;注入&lt;/em&gt;&lt;/strong&gt;として親に子コンポーネントを&lt;em&gt;ViewChild&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b9900aa1ed0b5e38fbcd32f4da40c0c5d962adb0" translate="yes" xml:space="preserve">
          <source>When the restore is finished, a message in the bottom message bar of Visual Studio should say: &lt;code&gt;Installing packages complete&lt;/code&gt;. Be patient. This could take a while.</source>
          <target state="translated">復元が完了すると、Visual Studioの下部のメッセージバーに次のメッセージが表示され &lt;code&gt;Installing packages complete&lt;/code&gt; 。パッケージのインストールが完了しました。我慢して。これには時間がかかる場合があります。</target>
        </trans-unit>
        <trans-unit id="6c1050711c1fd12fb5b6f194938f3e8579a393e6" translate="yes" xml:space="preserve">
          <source>When the router lazy loads a module, it creates a child injector and registers the &lt;code&gt;UserService&lt;/code&gt; provider with that child injector. The child injector is &lt;em&gt;not&lt;/em&gt; the root injector.</source>
          <target state="translated">ルーターがモジュールをレイジーロードすると、子インジェクターが作成され、 &lt;code&gt;UserService&lt;/code&gt; プロバイダーがその子インジェクターに登録されます。子インジェクターはルートインジェクターではあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="bec743e0774188316c4607e7d48359e06eca207a" translate="yes" xml:space="preserve">
          <source>When the router navigates to a new component view, it updates the browser's location and history with a URL for that view. This is a strictly local URL. The browser shouldn't send this URL to the server and should not reload the page.</source>
          <target state="translated">ルータが新しいコンポーネントビューに移動すると、そのビューの URL でブラウザの位置と履歴が更新されます。これは厳密にはローカルURLです。ブラウザはこのURLをサーバーに送信したり、ページをリロードしたりしてはいけません。</target>
        </trans-unit>
        <trans-unit id="90b902ee771a51ea4c2789f717ed041922a6f1b5" translate="yes" xml:space="preserve">
          <source>When the router navigates to this route, it uses the &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; string to dynamically load the &lt;code&gt;AdminModule&lt;/code&gt;. Then it adds the &lt;code&gt;AdminModule&lt;/code&gt; routes to its current route configuration. Finally, it loads the requested route to the destination admin component.</source>
          <target state="translated">ルーターがこのルートに移動すると、ルーターは &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; 文字列を使用してAdminModuleを動的にロードし &lt;code&gt;AdminModule&lt;/code&gt; 。次に、 &lt;code&gt;AdminModule&lt;/code&gt; ルートを現在のルート構成に追加します。最後に、要求されたルートを宛先管理コンポーネントにロードします。</target>
        </trans-unit>
        <trans-unit id="c4793c657e648cd962d6756a48cf39fb9572cc40" translate="yes" xml:space="preserve">
          <source>When the server is ready, you'll detach the In-memory Web API, and the app's requests will go through to the server.</source>
          <target state="translated">サーバーの準備ができたら、インメモリWeb APIをデタッチし、アプリのリクエストはサーバーを経由します。</target>
        </trans-unit>
        <trans-unit id="8c5e1c6cb471ba84681d4eec768f8daf9aee7300" translate="yes" xml:space="preserve">
          <source>When the server responds successfully with the newly added hero, the component adds that hero to the displayed &lt;code&gt;heroes&lt;/code&gt; list.</source>
          <target state="translated">サーバーが新しく追加されたヒーローで正常に応答すると、コンポーネントは表示された &lt;code&gt;heroes&lt;/code&gt; リストにそのヒーローを追加します。</target>
        </trans-unit>
        <trans-unit id="7f5488c0527bdc65788bef91441700006f51550b" translate="yes" xml:space="preserve">
          <source>When the tests are complete, the command creates a new &lt;code&gt;/coverage&lt;/code&gt; folder in the project. Open the &lt;code&gt;index.html&lt;/code&gt; file to see a report with your source code and code coverage values.</source>
          <target state="translated">テストが完了すると、コマンドはプロジェクトに新しい &lt;code&gt;/coverage&lt;/code&gt; フォルダーを作成します。 &lt;code&gt;index.html&lt;/code&gt; ファイルを開いて、ソースコードとコードカバレッジの値を含むレポートを表示します。</target>
        </trans-unit>
        <trans-unit id="cc433f6ebd5153ea48b6acb9758c8f35454ca692" translate="yes" xml:space="preserve">
          <source>When the url is either '/user' or '/user/bob', the active-link class will be added to the &lt;code&gt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&lt;/code&gt; tag. If the url changes, the class will be removed.</source>
          <target state="translated">URLはどちらか「/ユーザー」または「/ユーザー/ボブ」の場合、アクティブ・リンククラスが追加されたタグ。URLが変更されると、クラスは削除されます。 &lt;code&gt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="56e24b86fc8dc4eb7c05899793fc749916e2d93a" translate="yes" xml:space="preserve">
          <source>When the user clicks a hero in the &lt;strong&gt;master&lt;/strong&gt; list, the component should display the selected hero's &lt;strong&gt;details&lt;/strong&gt; at the bottom of the page.</source>
          <target state="translated">ユーザーが&lt;strong&gt;マスター&lt;/strong&gt;リストでヒーローをクリックすると、コンポーネントはページの下部に選択したヒーローの&lt;strong&gt;詳細&lt;/strong&gt;を表示します。</target>
        </trans-unit>
        <trans-unit id="0da528ae2bbf4606a802931b278d60a04b127084" translate="yes" xml:space="preserve">
          <source>When the user clicks a hero item in the &lt;code&gt;HeroesComponent&lt;/code&gt;, the app should navigate to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, replacing the heroes list view with the hero detail view. The heroes list view should no longer show hero details as it does now.</source>
          <target state="translated">ユーザーが &lt;code&gt;HeroesComponent&lt;/code&gt; のヒーローアイテムをクリックすると、アプリは &lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動し、ヒーローリストビューをヒーロー詳細ビューに置き換えます。ヒーローリストビューに、ヒーローの詳細が表示されなくなりました。</target>
        </trans-unit>
        <trans-unit id="965cc4386347869f8766b8bd6c03a51c94b256a1" translate="yes" xml:space="preserve">
          <source>When the user clicks the back button, the &lt;code&gt;HeroDetailComponent&lt;/code&gt; constructs another &lt;em&gt;link parameters array&lt;/em&gt; which it uses to navigate back to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">ユーザーが戻るボタンをクリックすると、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; は別の&lt;em&gt;リンクパラメータ配列&lt;/em&gt;を作成し、これを使用して &lt;code&gt;HeroListComponent&lt;/code&gt; に戻ります。</target>
        </trans-unit>
        <trans-unit id="b5381f2dbc392678bc72803a41a04f59cc4b7028" translate="yes" xml:space="preserve">
          <source>When the user clicks the button, Angular calls the &lt;code&gt;onClickMe&lt;/code&gt; method from &lt;code&gt;ClickMeComponent&lt;/code&gt;.</source>
          <target state="translated">ユーザーがボタンをクリックすると、Angularは &lt;code&gt;onClickMe&lt;/code&gt; から &lt;code&gt;ClickMeComponent&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="09f436cef939df335d96f2d5d3fa0d239641f9a3" translate="yes" xml:space="preserve">
          <source>When the user deletes the name, the form should look like this:</source>
          <target state="translated">ユーザーが名前を削除すると、このようなフォームになります。</target>
        </trans-unit>
        <trans-unit id="60767066f8c768e0937e2414770db47911b50141" translate="yes" xml:space="preserve">
          <source>When the user enters &quot;Sally&quot; into the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, the DOM element &lt;code&gt;value&lt;/code&gt;&lt;em&gt;property&lt;/em&gt; becomes &quot;Sally&quot;. However, if you look at the HTML attribute &lt;code&gt;value&lt;/code&gt; using &lt;code&gt;input.getAttribute('value')&lt;/code&gt;, you can see that the &lt;em&gt;attribute&lt;/em&gt; remains unchanged&amp;mdash;it returns &quot;Sarah&quot;.</source>
          <target state="translated">ユーザーが &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に「Sally」と入力すると、DOM要素の &lt;code&gt;value&lt;/code&gt; &lt;em&gt;プロパティ&lt;/em&gt;が「Sally」になります。ただし、 &lt;code&gt;input.getAttribute('value')&lt;/code&gt; を使用してHTML属性 &lt;code&gt;value&lt;/code&gt; を見ると、&lt;em&gt;属性&lt;/em&gt;が変更されていないことがわかります。「Sarah」が返されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="45684a41a52534dc3a21a13492006994cdd3ce14" translate="yes" xml:space="preserve">
          <source>When the user enters a name in a search-box, the &lt;code&gt;PackageSearchComponent&lt;/code&gt; sends a search request for a package with that name to the NPM web API.</source>
          <target state="translated">ユーザーが検索ボックスに名前を入力すると、 &lt;code&gt;PackageSearchComponent&lt;/code&gt; は、その名前のパッケージの検索要求をNPM Web APIに送信します。</target>
        </trans-unit>
        <trans-unit id="24612cfd1409a4d5460abc7f2935bcce9977ee3f" translate="yes" xml:space="preserve">
          <source>When the user navigates from the heroes list to the &quot;Magneta&quot; hero and back, &quot;Magneta&quot; appears selected:</source>
          <target state="translated">ヒーローリストから「Magneta」のヒーローに移動して戻ると、「Magneta」が選択された状態で表示されます。</target>
        </trans-unit>
        <trans-unit id="20759cd95c7b4ee15d25a5ac38dd65f7086028c9" translate="yes" xml:space="preserve">
          <source>When the user picks a hero, &lt;code&gt;selectedHero&lt;/code&gt; has a value and &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; puts the hero detail into the DOM.</source>
          <target state="translated">ユーザーがヒーローを &lt;code&gt;selectedHero&lt;/code&gt; すると、selectedHeroは値を持ち、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; はヒーローの詳細をDOMに入れます。</target>
        </trans-unit>
        <trans-unit id="d3a252aba875b8f256c6decf33f58be856151e22" translate="yes" xml:space="preserve">
          <source>When the user selects a hero from the list, the app should navigate to the detail view and show that hero. You tell the detail view which hero to display by including the selected hero's id in the route URL.</source>
          <target state="translated">ユーザーがリストからヒーローを選択すると、アプリは詳細ビューに移動し、そのヒーローを表示します。ルートURLに選択したヒーローのIDを含めることで、どのヒーローを表示するかを詳細ビューに指示します。</target>
        </trans-unit>
        <trans-unit id="a510d7fcc215eca3c7dadb10daf2bda07de4c2f2" translate="yes" xml:space="preserve">
          <source>When the value changes in the UI, call the registered function to allow the forms API to update itself:</source>
          <target state="translated">UIで値が変わったら、登録した関数を呼び出して、フォームAPIが自分自身を更新できるようにします。</target>
        </trans-unit>
        <trans-unit id="8f3a890a779d79ad9661c7749d679f59723a6996" translate="yes" xml:space="preserve">
          <source>When the workspace file structure is in place, you can use the &lt;code&gt;ng generate&lt;/code&gt; command on the command line to add functionality and data to the application. This initial root-level application is the &lt;em&gt;default app&lt;/em&gt; for CLI commands (unless you change the default after creating &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;additional apps&lt;/a&gt;).</source>
          <target state="translated">ワークスペースファイル構造が整ったら、コマンドラインで &lt;code&gt;ng generate&lt;/code&gt; コマンドを使用して、機能とデータをアプリケーションに追加できます。この初期ルートレベルアプリケーションは、CLIコマンドの&lt;em&gt;デフォルトアプリです&lt;/em&gt;（&lt;a href=&quot;file-structure#multiple-projects&quot;&gt;追加のアプリを&lt;/a&gt;作成した後でデフォルトを変更しない限り）。</target>
        </trans-unit>
        <trans-unit id="3732bd2e415ded41d84e9da700bfbe65d89ef57d" translate="yes" xml:space="preserve">
          <source>When there isn't a host element, you can usually wrap the content in a native HTML container element, such as a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, and attach the directive to that wrapper.</source>
          <target state="translated">ホスト要素がない場合は、通常、コンテンツを &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; などのネイティブHTMLコンテナー要素にラップし、そのラッパーにディレクティブをアタッチできます。</target>
        </trans-unit>
        <trans-unit id="1fc8a283755738e86c35338fd89146a3972eeed2" translate="yes" xml:space="preserve">
          <source>When true (recommended), enables the &lt;a href=&quot;aot-compiler#binding-expression-validation&quot;&gt;binding expression validation&lt;/a&gt; phase of the template compiler, which uses TypeScript to validate binding expressions.</source>
          <target state="translated">trueの場合（推奨）、TypeScriptを使用して&lt;a href=&quot;aot-compiler#binding-expression-validation&quot;&gt;バインディング式を検証&lt;/a&gt;するテンプレートコンパイラのバインディング式検証フェーズを有効にします。</target>
        </trans-unit>
        <trans-unit id="878269276c4b94291dba5557e0c330a0c66c6fb8" translate="yes" xml:space="preserve">
          <source>When true (recommended), reports an error for a supplied parameter whose injection type cannot be determined. When false (currently the default), constructor parameters of classes marked with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; whose type cannot be resolved produce a warning.</source>
          <target state="translated">true（推奨）の場合、注入タイプを判別できない指定されたパラメーターのエラーを報告します。false（現在のデフォルト）の場合、タイプを解決できない &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; でマークされたクラスのコンストラクターパラメーターは警告を生成します。</target>
        </trans-unit>
        <trans-unit id="b212849a159920cad7420629011f7a9864bdde5b" translate="yes" xml:space="preserve">
          <source>When true (the default) creates files at the top level of the project.</source>
          <target state="translated">true の場合(デフォルト)、プロジェクトのトップレベルにファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="b398aee58d8c1adc60ea74f0c726ecef38afbcac" translate="yes" xml:space="preserve">
          <source>When true (the default), creates a new initial app project in the src folder of the new workspace. When false, creates an empty workspace with no initial app. You can then use the generate application command so that all apps are created in the projects folder.</source>
          <target state="translated">true (既定)の場合、新しいワークスペースの src フォルダに新しい初期アプリ・プロジェクトが作成されます。false を指定すると、初期アプリのない空のワークスペースが作成されます。これにより、すべてのアプリが projects フォルダに作成されるように generate application コマンドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="604d90449f9af601695e42adb4b369217d014677" translate="yes" xml:space="preserve">
          <source>When true (the default), creates files at the top level of the project.</source>
          <target state="translated">true(デフォルト)の場合、プロジェクトのトップレベルにファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="7dcf5b75b56e6b05b97927c0c576164a022fcc31" translate="yes" xml:space="preserve">
          <source>When true (the default), creates the new files at the top level of the current project.</source>
          <target state="translated">true(デフォルト)の場合、現在のプロジェクトのトップレベルに新しいファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="c73f51ee5cd9b796be53e6056b6cf273b83aea52" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new class.</source>
          <target state="translated">true (デフォルト)の場合、新しいクラスの &quot;spec.ts&quot; テストファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="ee4fe2980cd47d4b732694bd3792325d274c7180" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new component.</source>
          <target state="translated">true(デフォルト)の場合、新しいコンポーネントの &quot;spec.ts &quot;テストファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="d9eb4be401f613f74c8a47c2093669fd19d2a62c" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new directive.</source>
          <target state="translated">true (デフォルト)の場合、新しいディレクティブの &quot;spec.ts&quot; テストファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="6481d790b1dddc693cad7c9e147a4da0a6eb5138" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new guard.</source>
          <target state="translated">true (デフォルト)の場合、新しいガード用の &quot;spec.ts&quot; テストファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="a7a7c6e8767122c13c74f42b5133e29df9ca038a" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new pipe.</source>
          <target state="translated">true (デフォルト)の場合、新しいパイプ用の &quot;spec.ts&quot; テストファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="67bfaa3ef25e8db2f0c7f855a6f34e4bb636d36e" translate="yes" xml:space="preserve">
          <source>When true (the default), generates a &quot;spec.ts&quot; test file for the new service.</source>
          <target state="translated">true (デフォルト)の場合、新しいサービスのための &quot;spec.ts&quot; テストファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="13601450e9623940a233839335f1507064324df7" translate="yes" xml:space="preserve">
          <source>When true (the default), generates factory files (&lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt;) for &lt;code&gt;.d.ts&lt;/code&gt; files with a corresponding &lt;code&gt;.metadata.json&lt;/code&gt; file.</source>
          <target state="translated">true（デフォルト）の場合、対応する &lt;code&gt;.metadata.json&lt;/code&gt; ファイルを使用して &lt;code&gt;.d.ts&lt;/code&gt; ファイル用のファクトリファイル（ &lt;code&gt;.ngfactory.js&lt;/code&gt; および &lt;code&gt;.ngstyle.js&lt;/code&gt; ）を生成します。</target>
        </trans-unit>
        <trans-unit id="2a9112845e3cd524c5442bdae74800c9bc5fcdd4" translate="yes" xml:space="preserve">
          <source>When true (the default), transforms code that is or could be used in an annotation, to allow it to be imported from template factory modules. See &lt;a href=&quot;aot-compiler#metadata-rewriting&quot;&gt;metadata rewriting&lt;/a&gt; for more information.</source>
          <target state="translated">true（デフォルト）の場合、注釈で使用されている、または使用できるコードを変換して、テンプレートファクトリモジュールからインポートできるようにします。詳細については、&lt;a href=&quot;aot-compiler#metadata-rewriting&quot;&gt;メタデータの書き換え&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c8e2eb7a4ced22adde9d0624fe6eddd94fe05b5f" translate="yes" xml:space="preserve">
          <source>When true, accesses the global configuration in the caller's home directory.</source>
          <target state="translated">true の場合、呼び出し元のホームディレクトリのグローバル構成にアクセスします。</target>
        </trans-unit>
        <trans-unit id="bb60a760b14a85a1bcf7a224a79ad3a0f0de50f6" translate="yes" xml:space="preserve">
          <source>When true, adds more details to output logging.</source>
          <target state="translated">true の場合、出力ロギングに詳細を追加します。</target>
        </trans-unit>
        <trans-unit id="ab5469a20d0799c4f5bb3006c5ea578a0eca87e5" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the application.</source>
          <target state="translated">true の場合、アプリケーションの生成後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="65e6119dd752e0e555791a9d0884d1adaeeefb3e" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the class.</source>
          <target state="translated">true の場合、クラスを生成した後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="0adb7edc861426173459ea0ac523eb007f0c6759" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the component.</source>
          <target state="translated">true の場合、コンポーネントの生成後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="7a95d82cb423357b0496282514270de200f32d94" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the directive.</source>
          <target state="translated">true の場合、ディレクティブの生成後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="6ef7b46aab6c8559b742e340fc987833a15211ca" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the enum.</source>
          <target state="translated">trueの場合、enumを生成した後にlintの修正を適用します。</target>
        </trans-unit>
        <trans-unit id="0c51368d0aa738deb6b05772bdbedf82c36e2946" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the guard.</source>
          <target state="translated">true の場合、ガードを生成した後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="3c7d56418b815742975279a27504721340d37164" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the interface.</source>
          <target state="translated">true の場合、インターフェイスを生成した後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="9df5ce1e8f7684c6a8dc523cf880a5980072d9b1" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the library.</source>
          <target state="translated">true の場合、ライブラリの生成後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="ea80c5d299d07258dde76aab64937de197bfd6f4" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the module.</source>
          <target state="translated">true の場合、モジュール生成後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="d3ea9a477728c77e2d1847ebc54f96051234cae6" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the pipe.</source>
          <target state="translated">true の場合、パイプを生成した後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="568d7e9013f771f110a76cdd6a84b6900cb5a879" translate="yes" xml:space="preserve">
          <source>When true, applies lint fixes after generating the service.</source>
          <target state="translated">true の場合、サービスの生成後に lint の修正を適用します。</target>
        </trans-unit>
        <trans-unit id="3a45da43566e855927acf38adb2c984647ee7977" translate="yes" xml:space="preserve">
          <source>When true, creates a bare-bones project without any testing frameworks. (Use for learning purposes only.)</source>
          <target state="translated">true の場合、テストフレームワークを一切使用せずに素のプロジェクトを作成します。(学習目的でのみ使用します)。</target>
        </trans-unit>
        <trans-unit id="6003cdbbdfe68bec3d9470eff199fcd83c109def" translate="yes" xml:space="preserve">
          <source>When true, creates a new app that uses the Ivy rendering engine.</source>
          <target state="translated">true の場合、Ivy レンダリング エンジンを使用する新しいアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="2cd0a15167f0e4812f706fd666aae705c50d746b" translate="yes" xml:space="preserve">
          <source>When true, creates a project without any testing frameworks. (Use for learning purposes only.)</source>
          <target state="translated">true の場合、テストフレームワークを使用しないプロジェクトを作成します。(学習目的のみに使用します)。</target>
        </trans-unit>
        <trans-unit id="cbf6fb323dee4d1c82a080508b0dc4b0f8607fed" translate="yes" xml:space="preserve">
          <source>When true, creates a routing NgModule.</source>
          <target state="translated">trueの場合、ルーティングNgModuleを作成します。</target>
        </trans-unit>
        <trans-unit id="56dbc63b0ec51cd8cb74b3a1a9ad4fe8e0e83b50" translate="yes" xml:space="preserve">
          <source>When true, creates a routing module.</source>
          <target state="translated">true の場合、ルーティングモジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="c2ec0ae9d8c5507501033cd46944cba3283bfeae" translate="yes" xml:space="preserve">
          <source>When true, creates the new files at the top level of the current project root.</source>
          <target state="translated">true の場合、現在のプロジェクトルートの最上位に新しいファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="2e8e353066e54d59ddc751dbc9d0c297d8b85adb" translate="yes" xml:space="preserve">
          <source>When true, creates the new files at the top level of the current project.</source>
          <target state="translated">true の場合、現在のプロジェクトのトップレベルに新しいファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="f5a93a3117cd8f1514feec73f24850b724350d92" translate="yes" xml:space="preserve">
          <source>When true, deliver events asynchronously.</source>
          <target state="translated">true の場合、イベントを非同期に配信します。</target>
        </trans-unit>
        <trans-unit id="18f021c0fe33a328d88b865734d1717e7626889b" translate="yes" xml:space="preserve">
          <source>When true, disables interactive input prompts for options with a default.</source>
          <target state="translated">true の場合、既定のオプションの対話型入力プロンプトを無効にします。</target>
        </trans-unit>
        <trans-unit id="f6ada5bdef828fa760b365e6b7b776cf6b17adb4" translate="yes" xml:space="preserve">
          <source>When true, does not add dependencies to the &quot;package.json&quot; file.</source>
          <target state="translated">trueの場合、&quot;package.json &quot;ファイルに依存関係を追加しません。</target>
        </trans-unit>
        <trans-unit id="f8d98eca32aeaddff19b79ab0b97e3b4f44f897f" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the app.</source>
          <target state="translated">trueの場合、アプリの &quot;spec.ts &quot;テストファイルを作成しません。</target>
        </trans-unit>
        <trans-unit id="6e5f0ff4b1329f81e381ce2feefd91e48e03360c" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new class.</source>
          <target state="translated">trueの場合、新しいクラスのための &quot;spec.ts &quot;テストファイルを作成しません。</target>
        </trans-unit>
        <trans-unit id="787db2ebf3b6d9a9cfcb5d65d02ca9380b758bf7" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new component.</source>
          <target state="translated">trueの場合、新しいコンポーネント用の &quot;spec.ts &quot;テストファイルを作成しません。</target>
        </trans-unit>
        <trans-unit id="1a05daffc1a3871cce336c9e222772d0c5768aeb" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new guard.</source>
          <target state="translated">trueの場合、新しいガードのための &quot;spec.ts &quot;テストファイルを作成しません。</target>
        </trans-unit>
        <trans-unit id="0ec16b43282885c383a356226cf0f90b2d403309" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new pipe.</source>
          <target state="translated">true の場合、新しいパイプ用の &quot;spec.ts&quot; テストファイルを作成しません。</target>
        </trans-unit>
        <trans-unit id="84d13244f42f45e24f366a7c34846f7ff3ad9285" translate="yes" xml:space="preserve">
          <source>When true, does not create &quot;spec.ts&quot; test files for the new service.</source>
          <target state="translated">trueの場合、新しいサービスのための &quot;spec.ts &quot;テストファイルを作成しません。</target>
        </trans-unit>
        <trans-unit id="ff22a4e958e901d487c01fddcd1c261ea77d1f94" translate="yes" xml:space="preserve">
          <source>When true, does not emit &lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt; files. This turns off most of the template compiler and disables the reporting of template diagnostics.</source>
          <target state="translated">trueの場合、 &lt;code&gt;.ngfactory.js&lt;/code&gt; および &lt;code&gt;.ngstyle.js&lt;/code&gt; ファイルを出力しません。これにより、ほとんどのテンプレートコンパイラがオフになり、テンプレート診断のレポートが無効になります。</target>
        </trans-unit>
        <trans-unit id="85d57e2a3768528616abacc66eeeda04f86cb197" translate="yes" xml:space="preserve">
          <source>When true, does not generate &quot;spec.ts&quot; test files for the new project.</source>
          <target state="translated">trueの場合、新しいプロジェクトの &quot;spec.ts &quot;テストファイルを生成しません。</target>
        </trans-unit>
        <trans-unit id="021531593a5857b6b634ffa7110b7e09677de92f" translate="yes" xml:space="preserve">
          <source>When true, does not import this component into the owning NgModule.</source>
          <target state="translated">true の場合、このコンポーネントを所有する NgModule にインポートしません。</target>
        </trans-unit>
        <trans-unit id="9dce1aa639bae69ca39cbea2281f5ab52e2f5810" translate="yes" xml:space="preserve">
          <source>When true, does not import this directive into the owning NgModule.</source>
          <target state="translated">true の場合、このディレクティブを所有する NgModule にインポートしません。</target>
        </trans-unit>
        <trans-unit id="e39a45636deab57166780dec3288520cc3551132" translate="yes" xml:space="preserve">
          <source>When true, does not import this pipe into the owning NgModule.</source>
          <target state="translated">true の場合、このパイプを所有する NgModule にインポートしません。</target>
        </trans-unit>
        <trans-unit id="541c18226ee8c59f40f232cd042028e33b0de587" translate="yes" xml:space="preserve">
          <source>When true, does not initialize a git repository.</source>
          <target state="translated">true の場合、git リポジトリを初期化しません。</target>
        </trans-unit>
        <trans-unit id="521a0120a95b14866025640c398ce8f7ff310fa4" translate="yes" xml:space="preserve">
          <source>When true, does not install dependency packages.</source>
          <target state="translated">true の場合、依存パッケージをインストールしません。</target>
        </trans-unit>
        <trans-unit id="f3578b18def83dc2da16f045d899e718695cd50d" translate="yes" xml:space="preserve">
          <source>When true, does not install packages for dependencies.</source>
          <target state="translated">true の場合、依存関係のあるパッケージをインストールしません。</target>
        </trans-unit>
        <trans-unit id="0646ee7c8071d504a9e696eab789659e9bc1e696" translate="yes" xml:space="preserve">
          <source>When true, does not to produce &lt;code&gt;.metadata.json&lt;/code&gt; files. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">trueの場合、 &lt;code&gt;.metadata.json&lt;/code&gt; ファイルを生成しません。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9c9ab2f848c6e3f1274c18107fe7541116d4de99" translate="yes" xml:space="preserve">
          <source>When true, does not update &quot;tsconfig.json&quot; to add a path mapping for the new library. The path mapping is needed to use the library in an app, but can be disabled here to simplify development.</source>
          <target state="translated">trueの場合、&quot;tsconfig.json &quot;を更新して新しいライブラリのパスマッピングを追加しません。パスマッピングはアプリでライブラリを使用するために必要ですが、開発を簡単にするためにここでは無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="62c6bdc8aeeb938a24e46cc58eb1bf0b651c1bf5" translate="yes" xml:space="preserve">
          <source>When true, enable the location strategy that uses the URL fragment instead of the history API.</source>
          <target state="translated">true の場合、履歴 API の代わりに URL フラグメントを使用するロケーション戦略を有効にします。</target>
        </trans-unit>
        <trans-unit id="261fe77e1b294ce4d3a98b31adb772ddea771256" translate="yes" xml:space="preserve">
          <source>When true, enables use of the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, which was deprecated in Angular 4.0, in favor of &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; (to avoid colliding with the DOM's element of the same name). Default is false. Might be required by some third-party Angular libraries.</source>
          <target state="translated">trueの場合、（同じ名前のDOMの要素との衝突を避けるために） &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; の代わりに、Angular 4.0で廃止された &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 要素の使用を有効にします。デフォルトはfalseです。一部のサードパーティ製Angularライブラリで必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="7c0d541d696d1f15840d7575ea4f510c48c941cb" translate="yes" xml:space="preserve">
          <source>When true, forces overwriting of existing files.</source>
          <target state="translated">true の場合、既存のファイルを強制的に上書きします。</target>
        </trans-unit>
        <trans-unit id="1aaf874ced3ebb154b21f8167d3778c1794023b3" translate="yes" xml:space="preserve">
          <source>When true, generate all possible files even if they are empty. Default is false. Used by the Bazel build rules to simplify how Bazel rules track file dependencies. Do not use this option outside of the Bazel rules.</source>
          <target state="translated">true にする と、 空であっても可能なすべてのファイルを生成します。デフォルトはfalseです。Bazelのビルドルールで使用され、Bazelルールがファイルの依存関係を追跡する方法を単純化します。このオプションは、Bazelルール以外では使用しないでください。</target>
        </trans-unit>
        <trans-unit id="5b7e7bf350c9fcf27596aa20973b3db4fd6e8bb1" translate="yes" xml:space="preserve">
          <source>When true, generates a flat module index of the given file name and the corresponding flat module metadata. Use to create flat modules that are packaged similarly to &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/common&lt;/code&gt;. When this option is used, the &lt;code&gt;package.json&lt;/code&gt; for the library should refer to the generated flat module index instead of the library index file.</source>
          <target state="translated">trueの場合、指定されたファイル名のフラットモジュールインデックスと、対応するフラットモジュールメタデータを生成します。 &lt;code&gt;@angular/core&lt;/code&gt; および &lt;code&gt;@angular/common&lt;/code&gt; と同様にパッケージ化されたフラットモジュールを作成するために使用します。このオプションを使用する場合、ライブラリの &lt;code&gt;package.json&lt;/code&gt; は、ライブラリインデックスファイルではなく、生成されたフラットモジュールインデックスを参照する必要があります。</target>
        </trans-unit>
        <trans-unit id="b9b819323f8f18793bab01506d1b5f14bbec5acf" translate="yes" xml:space="preserve">
          <source>When true, generates a routing module for the initial project.</source>
          <target state="translated">trueの場合、最初のプロジェクトのルーティングモジュールを生成します。</target>
        </trans-unit>
        <trans-unit id="ae14fe320ea896a875f632dbc4bff5abbda0c2a2" translate="yes" xml:space="preserve">
          <source>When true, includes styles inline in the component TS file. By default, an external styles file is created and referenced in the component TS file.</source>
          <target state="translated">true の場合、コンポーネントの TS ファイルにスタイルをインラインで含めます。デフォルトでは、外部スタイルファイルが作成され、コンポーネントTSファイル内で参照されます。</target>
        </trans-unit>
        <trans-unit id="3b3beaf924cf679384a2ed4d3854a933a4318a5b" translate="yes" xml:space="preserve">
          <source>When true, includes styles inline in the component.ts file. Only CSS styles can be included inline. By default, an external styles file is created and referenced in the component.ts file.</source>
          <target state="translated">trueの場合、component.tsファイルにスタイルをインラインで含めます。CSS スタイルのみをインラインに含めることができます。デフォルトでは、外部スタイルファイルが作成され、component.tsファイル内で参照されます。</target>
        </trans-unit>
        <trans-unit id="1fc4893016b862f1f6cb51410f367ec8369a5e97" translate="yes" xml:space="preserve">
          <source>When true, includes styles inline in the root component.ts file. Only CSS styles can be included inline. Default is false, meaning that an external styles file is created and referenced in the root component.ts file.</source>
          <target state="translated">true の場合、ルートの component.ts ファイルにスタイルをインラインで含めます。CSS スタイルのみをインラインに含めることができます。デフォルトは false で、外部スタイルファイルが作成され、ルートの component.ts ファイルで参照されることを意味します。</target>
        </trans-unit>
        <trans-unit id="33247607dda0b14efd7380854b7d1b95cb8b707e" translate="yes" xml:space="preserve">
          <source>When true, includes template inline in the component TS file. By default, an external template file is created and referenced in the component TS file.</source>
          <target state="translated">true の場合、コンポーネントの TS ファイルにテンプレートをインラインで含めます。デフォルトでは、外部テンプレートファイルが作成され、コンポーネントTSファイル内で参照されます。</target>
        </trans-unit>
        <trans-unit id="d5899d892e6bf561e02447910478d247955babab" translate="yes" xml:space="preserve">
          <source>When true, includes template inline in the component.ts file. By default, an external template file is created and referenced in the component.ts file.</source>
          <target state="translated">trueの場合、component.tsファイルの中にテンプレートをインラインで含めます。デフォルトでは、外部テンプレートファイルが作成され、component.tsファイル内で参照されます。</target>
        </trans-unit>
        <trans-unit id="9ddaf69f17ee1d461ed6364788294b2a4b709ebc" translate="yes" xml:space="preserve">
          <source>When true, includes template inline in the root component.ts file. Default is false, meaning that an external template file is created and referenced in the root component.ts file.</source>
          <target state="translated">trueの場合、ルートのcomponent.tsファイルにテンプレートをインラインでインクルードします。デフォルトはfalseで、外部テンプレートファイルが作成され、ルートのcomponent.tsファイル内で参照されることを意味します。</target>
        </trans-unit>
        <trans-unit id="9fe87a52ceeabbe44e5c515a3228147cbc64b6f3" translate="yes" xml:space="preserve">
          <source>When true, injector returns an array of instances. This is useful to allow multiple providers spread across many files to provide configuration information to a common token.</source>
          <target state="translated">true の場合、インジェクタはインスタンスの配列を返します。これは、多くのファイルに分散している複数のプロバイダが共通のトークンに設定情報を提供できるようにするのに便利です。</target>
        </trans-unit>
        <trans-unit id="f2bf503a52e77886a9df9b3b721629b7bdd83f5d" translate="yes" xml:space="preserve">
          <source>When true, log all internal navigation events to the console. Use for debugging.</source>
          <target state="translated">true の場合、すべての内部ナビゲーションイベントをコンソールに記録します。デバッグに使用します。</target>
        </trans-unit>
        <trans-unit id="0ba98b8ba818a019d7726ea3cd743749164694e0" translate="yes" xml:space="preserve">
          <source>When true, navigates while replacing the current state in history.</source>
          <target state="translated">true の場合、現在の状態を履歴に置き換えながらナビゲートします。</target>
        </trans-unit>
        <trans-unit id="100b728dbc5957ef91ab9a8121d4653d7ee51209" translate="yes" xml:space="preserve">
          <source>When true, navigates without pushing a new state into history.</source>
          <target state="translated">真実の場合、新しい状態を歴史に押し込むことなくナビゲートします。</target>
        </trans-unit>
        <trans-unit id="008db015d7015b6513b946d13e89a45905cf3dd3" translate="yes" xml:space="preserve">
          <source>When true, preserves the URL fragment for the next navigation</source>
          <target state="translated">true の場合、次のナビゲーションのための URL フラグメントを保持します。</target>
        </trans-unit>
        <trans-unit id="e7053f3ec9579533ad57553df2fc44aae15cfd47" translate="yes" xml:space="preserve">
          <source>When true, prints extra information while compiling templates. Default is false.</source>
          <target state="translated">true の場合、テンプレートをコンパイルする際に余分な情報を表示します。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="470599a91818785c5ee58a0f113cae7c96500252" translate="yes" xml:space="preserve">
          <source>When true, replaces the &lt;code&gt;templateUrl&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; property in all &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorators with inlined contents in &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;styles&lt;/code&gt; properties.</source>
          <target state="translated">trueの場合、すべての &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;デコレーターの &lt;code&gt;templateUrl&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; プロパティーを、 &lt;code&gt;template&lt;/code&gt; および &lt;code&gt;styles&lt;/code&gt; プロパティーのインライン化されたコンテンツに置き換えます。</target>
        </trans-unit>
        <trans-unit id="1a4f8c074303da2d063c77492f8e15e05b86f00c" translate="yes" xml:space="preserve">
          <source>When true, reports an error to the &lt;code&gt;.metadata.json&lt;/code&gt; file if &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. Default is false. Use only when &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; is false and &lt;code&gt;&quot;skipTemplateCodeGen&quot;&lt;/code&gt; is true.</source>
          <target state="translated">trueの場合、 &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、 &lt;code&gt;.metadata.json&lt;/code&gt; ファイルにエラーを報告します。デフォルトはfalseです。 &lt;code&gt;&quot;skipMetadataEmit&quot;&lt;/code&gt; がfalseで &lt;code&gt;&quot;skipTemplateCodeGen&quot;&lt;/code&gt; がtrueの場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="fee2c0f9c227cd936e7e0ec7fde35afd7a82fa14" translate="yes" xml:space="preserve">
          <source>When true, runs through and reports activity without writing out results.</source>
          <target state="translated">本当の場合は、結果を書き出さずに活動を実行し、報告します。</target>
        </trans-unit>
        <trans-unit id="248e093ad4093bf849e9a2bb8ea6c61115311429" translate="yes" xml:space="preserve">
          <source>When true, searches all of angular.io. Otherwise, searches only API reference documentation.</source>
          <target state="translated">true の場合は angular.io の全てを検索します。そうでなければ、APIリファレンスのドキュメントのみを検索します。</target>
        </trans-unit>
        <trans-unit id="d2052aabfdb00eb60b3def41e228c021090d18cd" translate="yes" xml:space="preserve">
          <source>When true, the declaring NgModule exports this component.</source>
          <target state="translated">true の場合、宣言した NgModule はこのコンポーネントをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="474f66dc7056c6ae634ff04631017e86490c737b" translate="yes" xml:space="preserve">
          <source>When true, the declaring NgModule exports this directive.</source>
          <target state="translated">true の場合、宣言した NgModule はこのディレクティブをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="89179c30c022a69730027b86caf1462ba77a87db" translate="yes" xml:space="preserve">
          <source>When true, the declaring NgModule exports this pipe.</source>
          <target state="translated">true の場合、宣言した NgModule はこのパイプをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="04e0e74efef0d3f502332b17196bd16fef5f0f39" translate="yes" xml:space="preserve">
          <source>When true, the new component is the entry component of the declaring NgModule.</source>
          <target state="translated">true の場合、新しいコンポーネントは宣言された NgModule のエントリコンポーネントとなります。</target>
        </trans-unit>
        <trans-unit id="6fbefb81d5660c920378ce16f4fcf3f36378b0ac" translate="yes" xml:space="preserve">
          <source>When true, the pipe is pure, meaning that the &lt;code&gt;transform()&lt;/code&gt; method is invoked only when its input arguments change. Pipes are pure by default.</source>
          <target state="translated">trueの場合、パイプは純粋です。つまり、 &lt;code&gt;transform()&lt;/code&gt; メソッドは、入力引数が変更されたときにのみ呼び出されます。パイプはデフォルトで純粋です。</target>
        </trans-unit>
        <trans-unit id="56b0467d9b50fc15e1b147ea8d738c249762a269" translate="yes" xml:space="preserve">
          <source>When true, the special animation control binding &lt;code&gt;@.disabled&lt;/code&gt; binding prevents all animations from rendering. Place the &lt;code&gt;@.disabled&lt;/code&gt; binding on an element to disable animations on the element itself, as well as any inner animation triggers within the element.</source>
          <target state="translated">trueの場合、特別なアニメーションコントロールバインディング &lt;code&gt;@.disabled&lt;/code&gt; バインディングにより、すべてのアニメーションがレンダリングされなくなります。要素に &lt;code&gt;@.disabled&lt;/code&gt; バインディングを配置して、要素自体のアニメーションと、要素内の内部アニメーショントリガーを無効にします。</target>
        </trans-unit>
        <trans-unit id="685f4a008223a0507d20fd336655976d7b7efaea" translate="yes" xml:space="preserve">
          <source>When true, use &lt;a href=&quot;https://github.com/angular/tsickle&quot;&gt;Tsickle&lt;/a&gt; to annotate the emitted JavaScript with &lt;a href=&quot;http://usejsdoc.org/&quot;&gt;JSDoc&lt;/a&gt; comments needed by the &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure Compiler&lt;/a&gt;. Default is false.</source>
          <target state="translated">trueの場合、&lt;a href=&quot;https://github.com/angular/tsickle&quot;&gt;Tsickle&lt;/a&gt;を使用して、発行されたJavaScript に&lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure Compilerが&lt;/a&gt;必要とする&lt;a href=&quot;http://usejsdoc.org/&quot;&gt;JSDoc&lt;/a&gt;コメントを注釈します。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="8fc2c813522ec25fd67580fe8ed8634f057ad051" translate="yes" xml:space="preserve">
          <source>When two imported modules, loaded at the same time, list a provider with the same token, the second module's provider &quot;wins&quot;. That's because both providers are added to the same injector.</source>
          <target state="translated">2つのインポートされたモジュールが同時にロードされ、同じトークンを持つプロバイダがリストアップされた場合、2番目のモジュールのプロバイダが &quot;勝ち &quot;となります。これは、両方のプロバイダが同じインジェクタに追加されているからです。</target>
        </trans-unit>
        <trans-unit id="8a38590f055a7be9417ecb7107a61245f38e62ba" translate="yes" xml:space="preserve">
          <source>When updating the value for a form group instance that contains multiple controls, you may only want to update parts of the model. This section covers how to update specific parts of a form control data model.</source>
          <target state="translated">複数のコントロールを含むフォームグループインスタンスの値を更新する場合、モデルの一部だけを更新したい場合があります。このセクションでは、フォームコントロールのデータモデルの特定の部分を更新する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="0cb80c294f2ac7a6f549a1f6b747ec2a760b7c8e" translate="yes" xml:space="preserve">
          <source>When users click a &lt;em&gt;deep link&lt;/em&gt; in an email, open the detail view for a particular hero.</source>
          <target state="translated">ユーザーがメールの&lt;em&gt;ディープリンク&lt;/em&gt;をクリックすると、特定のヒーローの詳細ビューが開きます。</target>
        </trans-unit>
        <trans-unit id="06df6a1b0b43e2a627825e02e4d731eb142a9abd" translate="yes" xml:space="preserve">
          <source>When users click a hero name in either view, navigate to a detail view of the selected hero.</source>
          <target state="translated">ユーザーがどちらかのビューでヒーロー名をクリックすると、選択したヒーローの詳細ビューに移動します。</target>
        </trans-unit>
        <trans-unit id="d2720a13b038e3604df3e775da3153607bd18d08" translate="yes" xml:space="preserve">
          <source>When users refresh the application, they see the latest fully cached version. New tabs load the latest cached code.</source>
          <target state="translated">ユーザーがアプリケーションをリフレッシュすると、最新の完全にキャッシュされたバージョンが表示されます。新しいタブは、最新のキャッシュされたコードをロードします。</target>
        </trans-unit>
        <trans-unit id="89ee168cd559f7f8ec103bc580870b5f544559ab" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../../core/platformref#bootstrapmodule&quot;&gt;`bootstrapModule()`&lt;/a&gt; or &lt;a href=&quot;../../core/platformref#bootstrapmodulefactory&quot;&gt;`bootstrapModuleFactory()`&lt;/a&gt; to bootstrap the downgraded modules, each one is considered a &quot;root&quot; module. As a consequence, a new instance will be created for every injectable provided in &lt;code&gt;&quot;root&quot;&lt;/code&gt; (via &lt;a href=&quot;../../core/injectable#providedIn&quot;&gt;`providedIn`&lt;/a&gt;). If this is not your intention, you can have a shared module (that will act as act as the &quot;root&quot; module) and create all downgraded modules using that module's injector:</source>
          <target state="translated">使用する場合&lt;a href=&quot;../../core/platformref#bootstrapmodule&quot;&gt;`bootstrapModule（）`&lt;/a&gt;または&lt;a href=&quot;../../core/platformref#bootstrapmodulefactory&quot;&gt;`` bootstrapModuleFactory（）を&lt;/a&gt;格下げモジュールをブートストラップするために、それぞれが「ルート」モジュールであると考えられます。結果として、（&lt;a href=&quot;../../core/injectable#providedIn&quot;&gt;`providedIn`&lt;/a&gt;を介して） &lt;code&gt;&quot;root&quot;&lt;/code&gt; 提供されるすべての注入可能オブジェクトに対して新しいインスタンスが作成されます。これが意図していない場合は、共有モジュール（「ルート」モジュールとして機能する）を用意し、そのモジュールのインジェクターを使用してすべてのダウングレードモジュールを作成できます。</target>
        </trans-unit>
        <trans-unit id="2ded6d3e9bc80e46e3525defd91a7c6252307962" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt;&lt;code&gt;HttpClient#request()&lt;/code&gt;&lt;/a&gt; with an HTTP method, configure with &lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt;&lt;code&gt;observe: 'events'&lt;/code&gt;&lt;/a&gt; to see all events, including the progress of transfers.</source>
          <target state="translated">使用している場合&lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt; &lt;code&gt;HttpClient#request()&lt;/code&gt; &lt;/a&gt;とHTTPメソッドでは、configure &lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt; &lt;code&gt;observe: 'events'&lt;/code&gt; &lt;/a&gt;移転の進捗を含め、すべてのイベントを見ることを。</target>
        </trans-unit>
        <trans-unit id="e8e9cb3c6b273bb12f381bfd95b5afdab0eb5729" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;, downgraded injectables will not be available until the Angular module that provides them is instantiated. In order to be safe, you need to ensure that the downgraded injectables are not used anywhere &lt;em&gt;outside&lt;/em&gt; the part of the app where it is guaranteed that their module has been instantiated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; を使用する場合、ダウングレードされた注射剤は、それらを提供するAngularモジュールがインスタンス化されるまで使用できません。安全のためには、ダウングレードされた注射剤が、モジュールがインスタンス化されていることが保証されているアプリの部分&lt;em&gt;以外&lt;/em&gt;の場所&lt;em&gt;で&lt;/em&gt;使用されていないことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="75f082f4a2a9292bee0a6ec7fcdcf08c245efeae" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, your code must be prepared for a null value. If you don't register a logger provider anywhere, the injector sets the value of &lt;code&gt;logger&lt;/code&gt; to null.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; を使用する場合、コードでnull値を準備する必要があります。ロガープロバイダーをどこにも登録しない場合、インジェクターは &lt;code&gt;logger&lt;/code&gt; の値をnullに設定します。</target>
        </trans-unit>
        <trans-unit id="20476825f82847cd1a9f8b625992073f31914a1b" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;bypassSecurityTrust...&lt;/code&gt;, make sure to call the method as early as possible and as close as possible to the source of the value, to make it easy to verify no security bug is created by its use.</source>
          <target state="translated">&lt;code&gt;bypassSecurityTrust...&lt;/code&gt; を使用するときは、メソッドをできるだけ早く呼び出して、値のソースにできるだけ近づけて、その使用によってセキュリティバグが発生しないことを簡単に確認できるようにしてください。</target>
        </trans-unit>
        <trans-unit id="1b0737e35a4e2a89a802c7501f9bcde999f119f8" translate="yes" xml:space="preserve">
          <source>When using a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to navigate instead of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service, you'd use the &lt;em&gt;same&lt;/em&gt; link parameters array, but you wouldn't provide the object with the &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; is implicit in a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスの代わりに &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; を使用してナビゲートする場合、&lt;em&gt;同じ&lt;/em&gt;リンクパラメーター配列を使用しますが、オブジェクトに &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; プロパティを提供しません。 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; はに内在する &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; のディレクティブ。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c1b489e199dd0f47c8d42b6e961935b6f956c657" translate="yes" xml:space="preserve">
          <source>When using absolute redirects, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; will use the query parameters and the fragment from the redirectTo in the route config.</source>
          <target state="translated">絶対リダイレクトを使用する場合、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; はクエリ構成とルート構成のredirectToからのフラグメントを使用します。</target>
        </trans-unit>
        <trans-unit id="26ed9b82d17457df64013b9eb1fbbaccf7274474" translate="yes" xml:space="preserve">
          <source>When using an &lt;code&gt;intervalTimer()&lt;/code&gt; such as &lt;code&gt;setInterval()&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;, remember to cancel the timer with &lt;code&gt;clearInterval()&lt;/code&gt; after the test, otherwise the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; never ends.</source>
          <target state="translated">使用している場合 &lt;code&gt;intervalTimer()&lt;/code&gt; など &lt;code&gt;setInterval()&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 、とタイマー解除することを忘れないでください &lt;code&gt;clearInterval()&lt;/code&gt; 、試験後にそれ以外の場合は &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; は決して終了します。</target>
        </trans-unit>
        <trans-unit id="134ada82c1bf109630654ad3274d0beaed098194" translate="yes" xml:space="preserve">
          <source>When using developer tools, the service worker is kept running in the background and never restarts. This can cause behavior with Dev Tools open to differ from behavior a user might experience.</source>
          <target state="translated">開発者ツールを使用している場合、サービス ワーカーはバックグラウンドで実行され続け、再起動されることはありません。このため、Dev Toolsオープンでの動作が、ユーザーが経験する可能性のある動作と異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="86d7701f04dbf3278e6bca7d61dec82d10b279c4" translate="yes" xml:space="preserve">
          <source>When using emulated view encapsulation, Angular preprocesses all component styles so that they approximate the standard shadow CSS scoping rules.</source>
          <target state="translated">エミュレートされたビューのカプセル化を使用している場合、Angularはすべてのコンポーネントスタイルを前処理して、標準のシャドウCSSのスコーピングルールに近似するようにします。</target>
        </trans-unit>
        <trans-unit id="f476c990cc992dd16e94e4d7fcc49cfd01a3387d" translate="yes" xml:space="preserve">
          <source>When using hidden source maps, source maps will not be referenced in the bundle. These are useful if you only want source maps to map error stack traces in error reporting tools, but don't want to expose your source maps in the browser developer tools.</source>
          <target state="translated">非表示のソースマップを使用すると、ソースマップはバンドル内で参照されません。これらは、ソースマップをエラー報告ツールでエラースタックのトレースをマッピングするためだけに使用したいが、ブラウザの開発者ツールでソースマップを公開したくない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="054db0ee1823c84752e38fc7a84cd6430df5dfe9" translate="yes" xml:space="preserve">
          <source>When using reactive forms:</source>
          <target state="translated">リアクティブフォームを使用する場合</target>
        </trans-unit>
        <trans-unit id="a828cec6b58e6cb53d2d46a10e8a8e3c000ea7e3" translate="yes" xml:space="preserve">
          <source>When using relative redirects, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; use the query params and the fragment from the source URL.</source>
          <target state="translated">相対リダイレクトを使用する場合、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; はクエリparamsとソースURLからのフラグメントを使用します。</target>
        </trans-unit>
        <trans-unit id="4bf6376b9afea8589f45d2366477e10bd15c8b4c" translate="yes" xml:space="preserve">
          <source>When using template expressions follow these guidelines:</source>
          <target state="translated">テンプレート式を使用する場合は、これらのガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="fd4419420c68cdc2d776a0c6bc7ea6c5c98b6a97" translate="yes" xml:space="preserve">
          <source>When using template-driven forms:</source>
          <target state="translated">テンプレート駆動型のフォームを使用する場合</target>
        </trans-unit>
        <trans-unit id="bb75301a3f57d2766a42cb47b657dd6174d1abe3" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; within &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, you'll also need to supply a &lt;code&gt;name&lt;/code&gt; attribute so that the control can be registered with the parent form under that name.</source>
          <target state="translated">&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグ内で &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用する場合は、 &lt;code&gt;name&lt;/code&gt; 属性を指定して、その名前でコントロールを親フォームに登録できるようにする必要もあります。</target>
        </trans-unit>
        <trans-unit id="2ffcf1c257cc809ebc12f8b82bc6e12b17f71b98" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;controller as&lt;/code&gt; syntax, the binding is prefixed with the controller alias (&lt;code&gt;vm&lt;/code&gt; or &lt;code&gt;$ctrl&lt;/code&gt;) because you have to be specific about the source of the binding.</source>
          <target state="translated">構文 &lt;code&gt;controller as&lt;/code&gt; 使用する場合、バインディングのソースを特定する必要があるため、バインディングの前にコントローラーエイリアス（ &lt;code&gt;vm&lt;/code&gt; または &lt;code&gt;$ctrl&lt;/code&gt; ）が付けられます。</target>
        </trans-unit>
        <trans-unit id="c56383a8e88adb805d2997bbc9ee6587fb9288df" translate="yes" xml:space="preserve">
          <source>When using the component from AngularJS, you can supply contents for it. Just like they would be transcluded in AngularJS, they get projected to the location of the &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag in Angular:</source>
          <target state="translated">AngularJSのコンポーネントを使用する場合、そのコンテンツを提供できます。それらがAngularJSで隠されているように、それらはAngularの &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; タグの場所に投影されます：</target>
        </trans-unit>
        <trans-unit id="af40b2a4b9fbeccafb0fb2865807c495201f126f" translate="yes" xml:space="preserve">
          <source>When using the shorthand syntax, Angular allows only &lt;a href=&quot;../../guide/structural-directives#one-structural-directive-per-host-element&quot;&gt;one structural directive on an element&lt;/a&gt;. If you want to iterate conditionally, for example, put the &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on a container element that wraps the &lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; element. For futher discussion, see &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">短縮構文を使用する場合、Angularは&lt;a href=&quot;../../guide/structural-directives#one-structural-directive-per-host-element&quot;&gt;1つの要素に1つの構造ディレクティブ&lt;/a&gt;のみを許可します。たとえば、条件付きで反復処理を行う場合は、 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 要素をラップするコンテナ要素に &lt;code&gt;*&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ます。詳細については、&lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;構造指令を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6535dd674dcfb46d5113fb884e93a5283000217b" translate="yes" xml:space="preserve">
          <source>When would I put specs in a test folder?</source>
          <target state="translated">スペックをテストフォルダに入れるのはいつ?</target>
        </trans-unit>
        <trans-unit id="1c89837031479519507a2b713b0588a162366ed7" translate="yes" xml:space="preserve">
          <source>When writing a binding, be aware of a template statement's &lt;strong&gt;execution context&lt;/strong&gt;. The identifiers in a template statement belong to a specific context object, usually the Angular component controlling the template. The example above shows a single line of HTML, but that HTML belongs to a larger component:</source>
          <target state="translated">バインディングを作成するときは、テンプレートステートメントの&lt;strong&gt;実行コンテキストに&lt;/strong&gt;注意してください。テンプレートステートメントの識別子は、特定のコンテキストオブジェクト（通常はテンプレートを制御するAngularコンポーネント）に属しています。上記の例はHTMLの1行を示していますが、そのHTMLはより大きなコンポーネントに属しています。</target>
        </trans-unit>
        <trans-unit id="0f96cd01fd00c2449a0dbebceeb658bd4c59c3e1" translate="yes" xml:space="preserve">
          <source>When you add a hero to the list of heroes, it appears to fly onto the page from the left.</source>
          <target state="translated">英雄一覧に英雄を追加すると、左からページ上に飛んでいくように見える。</target>
        </trans-unit>
        <trans-unit id="482aa2abe869c9716a8cb6d5ccd25b994760f22c" translate="yes" xml:space="preserve">
          <source>When you add a package with deployment capability, it'll automatically update your workspace configuration (&lt;code&gt;angular.json&lt;/code&gt; file) with a &lt;code&gt;deploy&lt;/code&gt; section for the selected project. You can then use the &lt;code&gt;ng deploy&lt;/code&gt; command to deploy that project.</source>
          <target state="translated">デプロイ機能付きのパッケージを追加すると、選択したプロジェクトの &lt;code&gt;deploy&lt;/code&gt; セクションでワークスペース構成（ &lt;code&gt;angular.json&lt;/code&gt; ファイル）が自動的に更新されます。次に、 &lt;code&gt;ng deploy&lt;/code&gt; コマンドを使用して、そのプロジェクトをデプロイできます。</target>
        </trans-unit>
        <trans-unit id="3a2441d7ee90ea32ef89ecf67cc9c5bacf216961" translate="yes" xml:space="preserve">
          <source>When you add a required field to the form control, its initial status is invalid. This invalid status propagates to the parent form group element, making its status invalid. Access the current status of the form group instance through its &lt;code&gt;status&lt;/code&gt; property.</source>
          <target state="translated">必須フィールドをフォームコントロールに追加すると、その初期ステータスは無効になります。この無効なステータスは、親フォームグループ要素に伝播し、ステータスが無効になります。 &lt;code&gt;status&lt;/code&gt; プロパティを使用して、フォームグループインスタンスの現在のステータスにアクセスします。</target>
        </trans-unit>
        <trans-unit id="72131c2667f7d78aa1a158277222438a08f970ea" translate="yes" xml:space="preserve">
          <source>When you add a schematic to the collection, you have to point to it in the collection's schema, and provide configuration files to define options that a user can pass to the command.</source>
          <target state="translated">コレクションに回路図を追加する際には、コレクションのスキーマをポイントし、ユーザがコマンドに渡すことができるオプションを定義するための設定ファイルを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="0b5fd936cf7003790ec725548e5e7c1c4a0a8937" translate="yes" xml:space="preserve">
          <source>When you add a service provider to the root application injector, it&amp;rsquo;s available throughout the app. Additionally, these providers are also available to all the classes in the app as long they have the lookup token.</source>
          <target state="translated">ルートアプリケーションインジェクターにサービスプロバイダーを追加すると、アプリ全体で使用できるようになります。さらに、これらのプロバイダーは、ルックアップトークンを持っている限り、アプリのすべてのクラスでも使用できます。</target>
        </trans-unit>
        <trans-unit id="792a549ee7899276b88f55470bc47a22c686cdb5" translate="yes" xml:space="preserve">
          <source>When you add or remove a validator at run time, you must call &lt;code&gt;&lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity()&lt;/a&gt;&lt;/code&gt; for the new validation to take effect.</source>
          <target state="translated">実行時にバリデーターを追加または削除する場合、新しい検証を有効にするには &lt;code&gt;&lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity()&lt;/a&gt;&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="d7cbfc37168ba6757c88e3fb4728e2529d6a7c3c" translate="yes" xml:space="preserve">
          <source>When you add the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt;, its presence alone initializes the button's &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;property&lt;/em&gt; to &lt;code&gt;true&lt;/code&gt; so the button is disabled.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;を追加すると、その存在だけでボタンの &lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;プロパティ&lt;/em&gt;が &lt;code&gt;true&lt;/code&gt; に初期化され、ボタンが無効になります。</target>
        </trans-unit>
        <trans-unit id="c0a5c3f1765a8d85f609278eb91d784b7c5f3577" translate="yes" xml:space="preserve">
          <source>When you are ready to deploy your Angular application to a remote server, you have various options for deployment.</source>
          <target state="translated">Angularアプリケーションをリモートサーバーにデプロイする準備ができたら、デプロイには様々なオプションがあります。</target>
        </trans-unit>
        <trans-unit id="a6b03ce57cce7fb1d00de43901f7939bfd562588" translate="yes" xml:space="preserve">
          <source>When you are using a downgraded Angular component from an AngularJS template, the need may arise to &lt;em&gt;transclude&lt;/em&gt; some content into it. This is also possible. While there is no such thing as transclusion in Angular, there is a very similar concept called &lt;em&gt;content projection&lt;/em&gt;. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; is able to make these two features interoperate.</source>
          <target state="translated">あなたはAngularJSテンプレートから角度成分を格下げ使用している場合は、必要がために発生する可能性がある&lt;em&gt;transclude&lt;/em&gt;それにいくつかのコンテンツを。これも可能です。Angularにはトランスクルージョンのようなものはありませんが、&lt;em&gt;コンテンツプロジェクション&lt;/em&gt;と呼ばれる非常によく似た概念があり&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; は、これら2つの機能を相互運用できます。</target>
        </trans-unit>
        <trans-unit id="d2d88d2533db99d9ce2333dbaed8801d8f09a063" translate="yes" xml:space="preserve">
          <source>When you bootstrap with the &lt;code&gt;AppComponent&lt;/code&gt; class (in &lt;code&gt;main.ts&lt;/code&gt;), Angular looks for a &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; in the &lt;code&gt;index.html&lt;/code&gt;, finds it, instantiates an instance of &lt;code&gt;AppComponent&lt;/code&gt;, and renders it inside the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; クラス（ &lt;code&gt;main.ts&lt;/code&gt; 内）でブートストラップすると、Angularは &lt;code&gt;index.html&lt;/code&gt; で &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; を探し、それを見つけて、 &lt;code&gt;AppComponent&lt;/code&gt; のインスタンスをインスタンス化し、 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; タグ内にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="45bcb2f61ee4422957ba07b063ee711b3fe965bf" translate="yes" xml:space="preserve">
          <source>When you break application code down into one component per file, you often end up with a project structure with a large number of relatively small files. This is a much neater way to organize things than a small number of large files, but it doesn't work that well if you have to load all those files to the HTML page with &amp;lt;script&amp;gt; tags. Especially when you also have to maintain those tags in the correct order. That's why it's a good idea to start using a &lt;em&gt;module loader&lt;/em&gt;.</source>
          <target state="translated">アプリケーションコードをファイルごとに1つのコンポーネントに分割すると、多くの場合、比較的小さなファイルが多数あるプロジェクト構造になります。これは、少数の大きなファイルよりも整理するのに非常に優れた方法ですが、&amp;lt;script&amp;gt;タグを使用してそれらのファイルをすべてHTMLページにロードする必要がある場合は、うまく機能しません。特に、これらのタグを正しい順序で維持する必要がある場合もそうです。そのため、&lt;em&gt;モジュールローダーの&lt;/em&gt;使用を開始することをお勧めし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ce8f1b7eb5f289aae723194ecf63f4999761d3d5" translate="yes" xml:space="preserve">
          <source>When you change the translatable text, the extractor tool generates a new id for that translation unit. You must then update the translation file with the new id.</source>
          <target state="translated">翻訳可能なテキストを変更すると、抽出ツールはその翻訳ユニットの新しいIDを生成します。その後、翻訳ファイルを新しいIDで更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f39ca9d36c3ca35868c2a4c88abbba55a005690" translate="yes" xml:space="preserve">
          <source>When you click a different hero name, the read-only mini detail beneath the list reflects the new choice.</source>
          <target state="translated">別のヒーロー名をクリックすると、リストの下にある読み取り専用のミニ詳細に新しい選択が反映されます。</target>
        </trans-unit>
        <trans-unit id="617f657be9899b52fe5f49ef3b6d85c4d25fd73f" translate="yes" xml:space="preserve">
          <source>When you click the &lt;em&gt;Edit&lt;/em&gt; button, this block disappears and the editable form reappears.</source>
          <target state="translated">[ &lt;em&gt;編集&lt;/em&gt; ]ボタンをクリックすると、このブロックが消え、編集可能なフォームが再び表示されます。</target>
        </trans-unit>
        <trans-unit id="37af15b64770c912fc52e08bb3cce469c7b29f47" translate="yes" xml:space="preserve">
          <source>When you click the &lt;em&gt;Submit&lt;/em&gt; button, the &lt;code&gt;submitted&lt;/code&gt; flag becomes true and the form disappears as planned.</source>
          <target state="translated">あなたがクリックすると、&lt;em&gt;送信&lt;/em&gt;ボタンを、 &lt;code&gt;submitted&lt;/code&gt; フラグが真になると予定通りの形が消えます。</target>
        </trans-unit>
        <trans-unit id="706ebc53dfab50fb06336852da92a5c4919861b5" translate="yes" xml:space="preserve">
          <source>When you configure a budget, the build system warns or reports an error when a given part of the app reaches or exceeds a boundary size that you set.</source>
          <target state="translated">予算を設定すると、アプリの特定の部分が設定した境界サイズに達するか、それを超えると、ビルドシステムは警告またはエラーを報告します。</target>
        </trans-unit>
        <trans-unit id="869269037e3115c244f09bd94306aa003338c106" translate="yes" xml:space="preserve">
          <source>When you configure an injector with a provider, you associate that provider with a &lt;a href=&quot;glossary#di-token&quot;&gt;DI token&lt;/a&gt;. The injector maintains an internal &lt;em&gt;token-provider&lt;/em&gt; map that it references when asked for a dependency. The token is the key to the map.</source>
          <target state="translated">プロバイダーでインジェクターを構成するときは、そのプロバイダーを&lt;a href=&quot;glossary#di-token&quot;&gt;DIトークンに&lt;/a&gt;関連付けます。インジェクターは、依存関係を要求されたときに参照する内部&lt;em&gt;トークンプロバイダー&lt;/em&gt;マップを保持し&lt;em&gt;ます&lt;/em&gt;。トークンはマップのキーです。</target>
        </trans-unit>
        <trans-unit id="bb138bee1b4372f1119c751a572188b350f1deaa" translate="yes" xml:space="preserve">
          <source>When you create a component, it's associated directly with a single view, called the &lt;em&gt;host view&lt;/em&gt;. The host view can be the root of a view hierarchy, which can contain &lt;em&gt;embedded views&lt;/em&gt;, which are in turn the host views of other components. Those components can be in the same NgModule, or can be imported from other NgModules. Views in the tree can be nested to any depth.</source>
          <target state="translated">コンポーネントを作成すると、&lt;em&gt;ホストビュー&lt;/em&gt;と呼ばれる単一のビューに直接関連付けられ&lt;em&gt;ます&lt;/em&gt;。ホストビューは、他のコンポーネントのホストビューである&lt;em&gt;埋め込みビュー&lt;/em&gt;を含むことができるビュー階層のルートになることができます。これらのコンポーネントは同じNgModuleにあるか、他のNgModuleからインポートできます。ツリーのビューは、任意の深さにネストできます。</target>
        </trans-unit>
        <trans-unit id="b86bbfff494f9e2b0676f3988b1ce5be5ce2704e" translate="yes" xml:space="preserve">
          <source>When you create a new blank schematic with the &lt;a href=&quot;schematics-authoring#cli&quot;&gt;Schematics CLI&lt;/a&gt;, the generated entry function is a &lt;em&gt;rule factory&lt;/em&gt;. A &lt;code&gt;RuleFactory&lt;/code&gt; object defines a higher-order function that creates a &lt;code&gt;Rule&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;schematics-authoring#cli&quot;&gt;Schematics CLI&lt;/a&gt;を使用して新しい空の回路図を作成すると、生成されたエントリ関数は&lt;em&gt;ルールファクトリになり&lt;/em&gt;ます。 &lt;code&gt;RuleFactory&lt;/code&gt; オブジェクトが作成され、高次関数定義 &lt;code&gt;Rule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77925d78fe0fa613a0f65a6981a75a2da4ed2cd4" translate="yes" xml:space="preserve">
          <source>When you create a project with the &lt;code&gt;ng new&lt;/code&gt; command, a &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file is created as part of your project folder. This file incorporates the mandatory and many of the optional polyfills as JavaScript &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; コマンドでプロジェクトを作成すると、 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 構成ファイルがプロジェクトフォルダーの一部として作成されます。このファイルには、JavaScript &lt;code&gt;import&lt;/code&gt; ステートメントとして必須のポリフィルと多くのオプションのポリフィルが組み込まれています。</target>
        </trans-unit>
        <trans-unit id="17999f2ec47c4715e77d4f497e7d7048405a374d" translate="yes" xml:space="preserve">
          <source>When you create an Angular library, you can provide and package it with schematics that integrate it with the Angular CLI. With your schematics, your users can use &lt;code&gt;ng add&lt;/code&gt; to install an initial version of your library, &lt;code&gt;ng generate&lt;/code&gt; to create artifacts defined in your library, and &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; to adjust their project for a new version of your library that introduces breaking changes.</source>
          <target state="translated">Angularライブラリを作成する場合、Angular CLIと統合する回路図を提供してパッケージ化できます。回路図を使用すると、ユーザーは &lt;code&gt;ng add&lt;/code&gt; を使用してライブラリの初期バージョンをインストールし、 &lt;code&gt;ng generate&lt;/code&gt; を使用してライブラリで定義されたアーティファクトを作成し、 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; を使用してプロジェクトを調整して、ライブラリに新しいバージョンを導入し、重大な変更を導入できます。</target>
        </trans-unit>
        <trans-unit id="0ed0a480cce150ae491407a6f681a39b6dcf0a9e" translate="yes" xml:space="preserve">
          <source>When you define an environment variable &lt;code&gt;http_proxy&lt;/code&gt; or &lt;code&gt;HTTP_PROXY&lt;/code&gt;, an agent is automatically added to pass calls through your corporate proxy when running &lt;code&gt;npm start&lt;/code&gt;.</source>
          <target state="translated">環境変数 &lt;code&gt;http_proxy&lt;/code&gt; または &lt;code&gt;HTTP_PROXY&lt;/code&gt; を定義すると、 &lt;code&gt;npm start&lt;/code&gt; を実行すると、エージェントが自動的に追加され、コーポレートプロキシを介してコールが渡されます。</target>
        </trans-unit>
        <trans-unit id="e26780ada0ccc3b637f4b01f21aad05ca8123bc7" translate="yes" xml:space="preserve">
          <source>When you do, set the &lt;code&gt;class&lt;/code&gt; to &lt;code&gt;avoid&lt;/code&gt;. The code snippet will be framed in bright red to grab the reader's attention.</source>
          <target state="translated">その場合は、 &lt;code&gt;class&lt;/code&gt; を &lt;code&gt;avoid&lt;/code&gt; するように設定してください。コードスニペットは明るい赤で囲まれ、読者の注意を引きます。</target>
        </trans-unit>
        <trans-unit id="ea188763675648ea90f96f233e7a9e4f9446785b" translate="yes" xml:space="preserve">
          <source>When you downgrade an Angular component and then use it from AngularJS, the component's inputs will be watched using AngularJS change detection. When those inputs change, the corresponding properties in the component are set. You can also hook into the changes by implementing the &lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt; interface in the component, just like you could if it hadn't been downgraded.</source>
          <target state="translated">AngularコンポーネントをダウングレードしてからAngularJSから使用する場合、コンポーネントの入力はAngularJS変更検出を使用して監視されます。これらの入力が変更されると、コンポーネントの対応するプロパティが設定されます。ダウングレードされていない場合と同じように、コンポーネントに&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;インターフェースを実装することで、変更にフックすることもできます。</target>
        </trans-unit>
        <trans-unit id="4453dc4621733c6328eda35ed3ad7fa789798ece" translate="yes" xml:space="preserve">
          <source>When you enable production builds via &lt;code&gt;--prod&lt;/code&gt; command line flag, the runtime production mode is enabled as well.</source>
          <target state="translated">&lt;code&gt;--prod&lt;/code&gt; コマンドラインフラグを介して本番ビルドを有効にすると、ランタイム本番モードも有効になります。</target>
        </trans-unit>
        <trans-unit id="ec9b4238aa6d95593d6729819db45182901c2e3e" translate="yes" xml:space="preserve">
          <source>When you generate a library using the CLI (with a command such as &lt;code&gt;ng generate library my-lib&lt;/code&gt;), the generated files go into the projects/ folder of the workspace. For more information about creating your own libraries, see &lt;a href=&quot;creating-libraries&quot;&gt;Creating Libraries&lt;/a&gt;.</source>
          <target state="translated">CLIを使用して（ &lt;code&gt;ng generate library my-lib&lt;/code&gt; などのコマンドを使用して）ライブラリを生成すると、生成されたファイルはワークスペースのprojects /フォルダーに移動します。独自のライブラリーの作成について詳しくは、&lt;a href=&quot;creating-libraries&quot;&gt;ライブラリーの作成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3c3de61ed943055bf0458f7d0abfbe8083dac68f" translate="yes" xml:space="preserve">
          <source>When you hide an element, that element and all of its descendants remain in the DOM. All components for those elements stay in memory and Angular may continue to check for changes. You could be holding onto considerable computing resources and degrading performance unnecessarily.</source>
          <target state="translated">要素を非表示にすると、その要素とその子孫はすべてDOMに残ります。それらの要素のコンポーネントはすべてメモリに残り、Angularは変更をチェックし続けます。かなりの計算リソースを保持している可能性があり、不必要にパフォーマンスを低下させてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="410ecc95479ff5928d45d83d664c30ac0fed7800" translate="yes" xml:space="preserve">
          <source>When you import an NgModule, Angular adds the module's service providers (the contents of its &lt;code&gt;providers&lt;/code&gt; list) to the application root injector.</source>
          <target state="translated">NgModuleをインポートすると、Angularはモジュールのサービスプロバイダー（ &lt;code&gt;providers&lt;/code&gt; リストのコンテンツ）をアプリケーションルートインジェクターに追加します。</target>
        </trans-unit>
        <trans-unit id="d8644a4f230a744f101351dd00d0bf4a1e1125a5" translate="yes" xml:space="preserve">
          <source>When you import something from a library in an Angular app, Angular looks for a mapping between the library name and a location on disk. When you install a library package, the mapping is in the &lt;code&gt;node_modules&lt;/code&gt; folder. When you build your own library, it has to find the mapping in your &lt;code&gt;tsconfig&lt;/code&gt; paths.</source>
          <target state="translated">Angularアプリのライブラリから何かをインポートすると、Angularはライブラリ名とディスク上の場所の間のマッピングを探します。ライブラリパッケージをインストールすると、マッピングは &lt;code&gt;node_modules&lt;/code&gt; フォルダーにあります。独自のライブラリを構築する場合、 &lt;code&gt;tsconfig&lt;/code&gt; パスでマッピングを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="5d0bf5343123ad54489af22b2a94d022755e308e" translate="yes" xml:space="preserve">
          <source>When you internationalize with the AOT compiler, you must pre-build a separate application package for each language and serve the appropriate package based on either server-side language detection or URL parameters.</source>
          <target state="translated">AOT コンパイラを使用して国際化する場合、各言語ごとに個別のアプリケーションパッケージを事前に構築し、サーバー側の言語検出または URL パラメータに基づいて適切なパッケージを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="362d06f664aaa8348af755e5fbfb12b4e2256623" translate="yes" xml:space="preserve">
          <source>When you know for certain that a &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance will &lt;em&gt;never, never, ever&lt;/em&gt; be re-used, you can simplify the code with the &lt;em&gt;snapshot&lt;/em&gt;.</source>
          <target state="translated">あなたがいることを確実に知っているとき &lt;code&gt;HeroDetailComponent&lt;/code&gt; のインスタンスがなり&lt;em&gt;、これまで決して決して&lt;/em&gt;再使用しないこと、あなたがコードを単純化することができます&lt;em&gt;スナップショット&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b5fecd6f95f828bcccda31df86790f8c129c7ea0" translate="yes" xml:space="preserve">
          <source>When you migrate from AngularJS to Angular you will want to move as much responsibility as possible to Angular, so that you can take advantage of new APIs. To help with the transition, Angular provides the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt;. This module enables a &lt;em&gt;unified&lt;/em&gt; location service that shifts responsibilities from the AngularJS &lt;code&gt;$location&lt;/code&gt; service to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">AngularJSからAngularに移行するときは、できるだけ多くの責任をAngularに移して、新しいAPIを利用できるようにする必要があります。移行を支援するために、Angularは &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt; を提供しています。このモジュールは、AngularJS &lt;code&gt;$location&lt;/code&gt; サービスからAngular &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスに責任を移す&lt;em&gt;統合&lt;/em&gt;ロケーションサービスを可能にします。</target>
        </trans-unit>
        <trans-unit id="e14e60be15cfb3e29e23e3adf7c79ee29e0d7947" translate="yes" xml:space="preserve">
          <source>When you move the source (inevitable), you remember to move the test.</source>
          <target state="translated">ソース(必然)を移動させるときは、テストを移動させることを忘れないようにします。</target>
        </trans-unit>
        <trans-unit id="fe438ebbcd8a35cf245928a1c983b9efddf4900e" translate="yes" xml:space="preserve">
          <source>When you pass an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; uses it to instantiate the module using &lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;'s &lt;a href=&quot;../api/core/platformref#bootstrapModuleFactory&quot;&gt;bootstrapModuleFactory()&lt;/a&gt;, which is compatible with ahead-of-time (AOT) compilation. AOT compilation helps make your apps load faster. For more about AOT and how to create an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-Time Compilation&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt; を渡すと、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; はそれを使用して、事前参照（AOT）コンパイルと互換性のある&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;の&lt;a href=&quot;../api/core/platformref#bootstrapModuleFactory&quot;&gt;bootstrapModuleFactory（）&lt;/a&gt;を使用してモジュールをインスタンス化します。AOTコンパイルは、アプリの読み込みを高速化するのに役立ちます。AOTと &lt;code&gt;&lt;a href=&quot;../api/core/ngmodulefactory&quot;&gt;NgModuleFactory&lt;/a&gt;&lt;/code&gt; の作成方法の詳細については、事前の&lt;a href=&quot;aot-compiler&quot;&gt;コンパイル&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="21d13688782c8b5894b32af1b23cd5c8e43f6163" translate="yes" xml:space="preserve">
          <source>When you pass an array of steps to a &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call, the steps run sequentially by default. Compare this to the &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; call, which runs animation steps in parallel.</source>
          <target state="translated">ステップの配列を &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 呼び出しに渡すと、ステップはデフォルトで順次実行されます。これを &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 呼び出しと比較してください。この呼び出しは、アニメーションステップを並行して実行します。</target>
        </trans-unit>
        <trans-unit id="5ad1c2e84d6f136b6a8a42ad3ccb44378641d0aa" translate="yes" xml:space="preserve">
          <source>When you pass an interface as a type parameter to the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method, use the RxJS &lt;code&gt;map&lt;/code&gt; operator to transform the response data as needed by the UI. You can then pass the transformed data to the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async pipe&lt;/a&gt;.</source>
          <target state="translated">インターフェイスをタイプパラメータとして &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; メソッドに渡す場合、RxJS &lt;code&gt;map&lt;/code&gt; 演算子を使用して、UIの必要に応じて応答データを変換します。次に、変換されたデータを&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;非同期パイプに&lt;/a&gt;渡すことができます。</target>
        </trans-unit>
        <trans-unit id="c2307ff4288c2d124a3fdc1efa06e1678b46c8e2" translate="yes" xml:space="preserve">
          <source>When you provide services in a component, that service is available via the &lt;code&gt;ElementInjector&lt;/code&gt; at that component instance. It may also be visible at child component/directives based on visibility rules described in the &lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;resolution rules&lt;/a&gt; section.</source>
          <target state="translated">コンポーネントでサービスを提供すると、そのサービスはそのコンポーネントインスタンスの &lt;code&gt;ElementInjector&lt;/code&gt; を介して利用できます。また、&lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;解決ルールの&lt;/a&gt;セクションで説明されている可視性ルールに基づいて、子コンポーネント/ディレクティブで表示される場合もあります。</target>
        </trans-unit>
        <trans-unit id="56f91c3af039a87e2e5b1894a0d410dde809e81e" translate="yes" xml:space="preserve">
          <source>When you provide services in the component class, services are visible within the &lt;code&gt;ElementInjector&lt;/code&gt; tree relative to where and how you provide those services.</source>
          <target state="translated">コンポーネントクラスでサービスを提供すると、サービスは、それらのサービスを提供する場所と方法に関連して &lt;code&gt;ElementInjector&lt;/code&gt; ツリー内に表示されます。</target>
        </trans-unit>
        <trans-unit id="8852b03eafeb6d489c8a0d7dc06b14852ad1e11c" translate="yes" xml:space="preserve">
          <source>When you provide the service at the root level, Angular creates a single, shared instance of &lt;code&gt;HeroService&lt;/code&gt; and injects into any class that asks for it. Registering the provider in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; metadata also allows Angular to optimize an app by removing the service if it turns out not to be used after all.</source>
          <target state="translated">ルートレベルでサービスを提供すると、Angularは &lt;code&gt;HeroService&lt;/code&gt; の単一の共有インスタンスを作成し、それを要求するすべてのクラスに注入します。 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; メタデータにプロバイダーを登録すると、Angularは、結局使用されないことが判明した場合にサービスを削除して、アプリを最適化することもできます。</target>
        </trans-unit>
        <trans-unit id="f953905bda44980a6a9f0d5b1b3e121019580b78" translate="yes" xml:space="preserve">
          <source>When you provide the service at the root level, Angular creates a single, shared instance of &lt;code&gt;HeroService&lt;/code&gt; and injects it into any class that asks for it. Registering the provider in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; metadata also allows Angular to optimize an app by removing the service from the compiled app if it isn't used.</source>
          <target state="translated">ルートレベルでサービスを提供すると、Angularは &lt;code&gt;HeroService&lt;/code&gt; の単一の共有インスタンスを作成し、それを要求するすべてのクラスに挿入します。 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; メタデータにプロバイダーを登録すると、Angularは、使用されていない場合にコンパイル済みアプリからサービスを削除して、アプリを最適化することもできます。</target>
        </trans-unit>
        <trans-unit id="b343fcf4d13bc8d991f156872899c3099cdb142c" translate="yes" xml:space="preserve">
          <source>When you register a provider at the component level, you get a new instance of the service with each new instance of that component. At the component level, register a service provider in the &lt;code&gt;providers&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata.</source>
          <target state="translated">コンポーネントレベルでプロバイダーを登録すると、そのコンポーネントの新しいインスタンスごとにサービスの新しいインスタンスが取得されます。コンポーネントレベルで、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）メタデータの &lt;code&gt;providers&lt;/code&gt; プロパティにサービスプロバイダーを登録します。</target>
        </trans-unit>
        <trans-unit id="46450f6e014a67295680762b08aaaf21e1fc79bc" translate="yes" xml:space="preserve">
          <source>When you register a provider with a &lt;a href=&quot;architecture-modules&quot;&gt;specific NgModule&lt;/a&gt;, the same instance of a service is available to all components in that NgModule. To register at this level, use the &lt;code&gt;providers&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator,</source>
          <target state="translated">プロバイダーを&lt;a href=&quot;architecture-modules&quot;&gt;特定のNgModule&lt;/a&gt;に登録すると、そのNgModuleのすべてのコンポーネントでサービスの同じインスタンスを使用できます。このレベルで登録するには、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;（）デコレーターの &lt;code&gt;providers&lt;/code&gt; プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="162521642a27b1e5827c9301cf0ed78f5244aa15" translate="yes" xml:space="preserve">
          <source>When you remove a hero from the list, it appears to fly out to the right.</source>
          <target state="translated">リストからヒーローを削除すると、右に飛んでいくように見える。</target>
        </trans-unit>
        <trans-unit id="4f1ba5f6a26ffaff14e70574d6d3162b35b43f43" translate="yes" xml:space="preserve">
          <source>When you rename the source file (inevitable), you remember to rename the test file.</source>
          <target state="translated">ソースファイルの名前を変更するときは(避けられない)、テストファイルの名前を忘れずに変更します。</target>
        </trans-unit>
        <trans-unit id="76143769b73c5f43fc6f3a3c4f5be082f00a281f" translate="yes" xml:space="preserve">
          <source>When you resolve an instance of &lt;code&gt;Car&lt;/code&gt; at the deepest component (C), its injector produces an instance of &lt;code&gt;Car&lt;/code&gt; resolved by injector (C) with an &lt;code&gt;Engine&lt;/code&gt; resolved by injector (B) and &lt;code&gt;Tires&lt;/code&gt; resolved by the root injector (A).</source>
          <target state="translated">最も深いコンポーネント（C）で &lt;code&gt;Car&lt;/code&gt; のインスタンスを解決すると、そのインジェクターは、インジェクター（B）によって解決された &lt;code&gt;Engine&lt;/code&gt; とルートインジェクター（A）によって解決された &lt;code&gt;Tires&lt;/code&gt; 備えたインジェクター（C）によって解決された &lt;code&gt;Car&lt;/code&gt; のインスタンスを生成します。</target>
        </trans-unit>
        <trans-unit id="c7af032d22de01c80130fb9a41ddd3718e7e974c" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;ng new my-first-project&lt;/code&gt; a new folder, named &lt;code&gt;my-first-project&lt;/code&gt;, will be created in the current working directory. Since you want to be able to create files inside that folder, make sure you have sufficient rights in the current working directory before running the command.</source>
          <target state="translated">&lt;code&gt;ng new my-first-project&lt;/code&gt; を実行すると &lt;code&gt;my-first-project&lt;/code&gt; という名前の新しいフォルダーが現在の作業ディレクトリに作成されます。そのフォルダ内にファイルを作成できるようにするため、コマンドを実行する前に、現在の作業ディレクトリに十分な権限があることを確認してください。</target>
        </trans-unit>
        <trans-unit id="5ede23bce1607d06e6f4c7d8342b9df484546033" translate="yes" xml:space="preserve">
          <source>When you run this command, the CLI installs the necessary Angular npm packages and other dependencies in a new workspace, with a root-level application named &lt;em&gt;my-project&lt;/em&gt;. The workspace root folder contains various support and configuration files, and a README file with generated descriptive text that you can customize.</source>
          <target state="translated">このコマンドを実行すると、CLIは必要なAngular npmパッケージとその他の依存関係を&lt;em&gt;my-project&lt;/em&gt;という名前のルートレベルのアプリケーションとともに新しいワークスペースにインストールします。ワークスペースのルートフォルダーには、さまざまなサポートファイルと構成ファイル、およびカスタマイズ可能な生成された説明テキストを含むREADMEファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="3f89db8d780edd6ff5fede7d7a2e6d3d19f61f83" translate="yes" xml:space="preserve">
          <source>When you specify a custom id, the extractor tool and compiler generate a translation unit with that custom id.</source>
          <target state="translated">カスタムIDを指定すると、抽出ツールとコンパイラはそのカスタムIDの翻訳ユニットを生成します。</target>
        </trans-unit>
        <trans-unit id="8ff5318340747063c6cfc4c93e9fb64e1d986e7b" translate="yes" xml:space="preserve">
          <source>When you start to upgrade components and their templates to Angular, you'll make more changes because the E2E tests have matchers that are specific to AngularJS. For PhoneCat you need to make the following changes in order to make things work with Angular:</source>
          <target state="translated">コンポーネントとそのテンプレートをAngularにアップグレードし始めると、E2EのテストにはAngularJSに固有のマッチャがあるため、より多くの変更を行うことになります。PhoneCatでは、Angularで動作するようにするために以下の変更を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="6527e816afc32aa43b4cbfafcff471db1bf82256" translate="yes" xml:space="preserve">
          <source>When you trigger a completion list within a template, the editor first parses the template into an HTML &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;abstract syntax tree (AST)&lt;/a&gt;. The Angular compiler interprets that tree to determine the context: which module the template is part of, the current scope, the component selector, and where your cursor is in the template AST. It can then determine the symbols that could potentially be at that position..</source>
          <target state="translated">テンプレート内で補完リストをトリガーすると、エディターは最初にテンプレートを解析してHTML &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;抽象構文ツリー（AST）にし&lt;/a&gt;ます。Angularコンパイラーはそのツリーを解釈してコンテキストを決定します：テンプレートがどのモジュールの一部であるか、現在のスコープ、コンポーネントセレクター、そしてカーソルがテンプレートのASTのどこにあるか。次に、その位置にある可能性のあるシンボルを特定できます。</target>
        </trans-unit>
        <trans-unit id="ab73fe04628483ac0b3d2a9834dda0390777b014" translate="yes" xml:space="preserve">
          <source>When you try this,</source>
          <target state="translated">これをやってみると</target>
        </trans-unit>
        <trans-unit id="caa532613dfbcc5fb88bd71c451bea3780c7f5bb" translate="yes" xml:space="preserve">
          <source>When you update Angular to a new version, you need to make sure that any libraries you are using are current. If libraries have interdependencies, you might have to update them in a particular order. See the &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt; for help.</source>
          <target state="translated">Angularを新しいバージョンに更新するときは、使用しているライブラリが最新のものであることを確認する必要があります。ライブラリに相互依存関係がある場合は、特定の順序でライブラリを更新する必要があります。ヘルプについては、&lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="427748cf35ba8629915556d00d80d9456785d7fd" translate="yes" xml:space="preserve">
          <source>When you use &lt;a href=&quot;aot-compiler&quot;&gt;AoT compilation&lt;/a&gt;, you can control how your application is compiled by specifying &lt;em&gt;template&lt;/em&gt; compiler options in the &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript configuration file&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;aot-compiler&quot;&gt;AoTコンパイル&lt;/a&gt;を使用する場合、 &lt;code&gt;tsconfig.json&lt;/code&gt; &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript構成ファイル&lt;/a&gt;で&lt;em&gt;テンプレート&lt;/em&gt;コンパイラオプションを指定することにより、アプリケーションのコンパイル方法を制御できます。</target>
        </trans-unit>
        <trans-unit id="1d76d4cdd08e8ca0fc27a2d6c81a99fd7dd8f163" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;, edit these parts of your app:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; を使用する場合は、アプリの次の部分を編集します。</target>
        </trans-unit>
        <trans-unit id="4580e5ffc3fd526fbaef265fb610c52859c60f63" translate="yes" xml:space="preserve">
          <source>When you use a class this way, it's called a &lt;em&gt;class interface&lt;/em&gt;.</source>
          <target state="translated">この方法でクラスを使用する場合、それは&lt;em&gt;クラスインターフェイス&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f94a253b102233220fd281a30bb6f39b56a66d5a" translate="yes" xml:space="preserve">
          <source>When you use an SVG as the template, you are able to use directives and bindings just like with HTML templates. This means that you will be able to dynamically generate interactive graphics.</source>
          <target state="translated">SVG をテンプレートとして使用する場合、HTML テンプレートと同様にディレクティブやバインディングを使用することができます。これは、動的にインタラクティブなグラフィックを生成することができることを意味します。</target>
        </trans-unit>
        <trans-unit id="7b5db936a4f10347d77d439673f77743a5c795d4" translate="yes" xml:space="preserve">
          <source>When you use an editor with a language service, the editor starts a separate language-service process and communicates with it through an &lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;RPC&lt;/a&gt;, using the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt;. When you type into the editor, the editor sends information to the language-service process to track the state of your project.</source>
          <target state="translated">言語サービスでエディターを使用すると、エディターは個別の言語サービスプロセスを開始し、&lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;言語サーバープロトコル&lt;/a&gt;を使用して&lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;RPC&lt;/a&gt;を介してプロセスと通信します。エディターに入力すると、エディターは言語サービスプロセスに情報を送信して、プロジェクトの状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="7091693d92ad9fcbdbcc9479803eb8ea1f9c1565" translate="yes" xml:space="preserve">
          <source>When you use ngUpgrade, what you're really doing is &lt;em&gt;running both AngularJS and Angular at the same time&lt;/em&gt;. All Angular code is running in the Angular framework, and AngularJS code in the AngularJS framework. Both of these are the actual, fully featured versions of the frameworks. There is no emulation going on, so you can expect to have all the features and natural behavior of both frameworks.</source>
          <target state="translated">ngUpgradeを使用する場合、実際に実行しているのは&lt;em&gt;、AngularJSとAngularの両方を同時に実行&lt;/em&gt;することです。すべてのAngularコードはAngularフレームワークで実行され、AngularJSコードはAngularJSフレームワークで実行されます。これらは両方とも、フレームワークの実際のフル機能バージョンです。エミュレーションは行われていないため、両方のフレームワークのすべての機能と自然な動作を期待できます。</target>
        </trans-unit>
        <trans-unit id="a2eec843f1d023d68567197d0f57ed566b9116ea" translate="yes" xml:space="preserve">
          <source>When you use the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt; without the &lt;code&gt;--inline-style&lt;/code&gt; flag, it creates an empty styles file for you and references that file in the component's generated &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate component&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;--inline-style&lt;/code&gt; フラグなしで使用すると、空のスタイルファイルが作成され、コンポーネントの生成された &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; でそのファイルが参照されます。</target>
        </trans-unit>
        <trans-unit id="247bac8024638798cef5c1812110dc811b6aae31" translate="yes" xml:space="preserve">
          <source>When you use the CLI &lt;code&gt;build&lt;/code&gt; or &lt;code&gt;serve&lt;/code&gt; command to build your application for different locales, change the output path using the &lt;code&gt;--outputPath&lt;/code&gt; command option (along with the i18n-specific command options), so that the translation files are saved to different locations. When you are serving a locale-specific version from a subdirectory, you can also change the base URL used by your app by specifying the &lt;code&gt;--baseHref&lt;/code&gt; option.</source>
          <target state="translated">CLIの &lt;code&gt;build&lt;/code&gt; コマンドまたは &lt;code&gt;serve&lt;/code&gt; コマンドを使用して、さまざまなロケール用にアプリケーションをビルドする場合は、 &lt;code&gt;--outputPath&lt;/code&gt; コマンドオプション（およびi18n固有のコマンドオプション）を使用して出力パスを変更し、翻訳ファイルが別の場所に保存されるようにします。サブディレクトリからロケール固有のバージョンを提供する場合は、 &lt;code&gt;--baseHref&lt;/code&gt; オプションを指定して、アプリで使用されるベースURLを変更することもできます。</target>
        </trans-unit>
        <trans-unit id="f2e97de1383d763b5d6a77c6e6a143039f881b94" translate="yes" xml:space="preserve">
          <source>When you use the Schematics CLI to create a blank schematics project, the new blank schematic is the first member of the collection, and has the same name as the collection. When you add a new named schematic to this collection, it is automatically added to the &lt;code&gt;collection.json&lt;/code&gt; schema.</source>
          <target state="translated">Schematics CLIを使用して空の回路図プロジェクトを作成すると、新しい空の回路図がコレクションの最初のメンバーになり、コレクションと同じ名前になります。このコレクションに新しい名前の付いた回路図を追加すると、自動的に &lt;code&gt;collection.json&lt;/code&gt; スキーマに追加されます。</target>
        </trans-unit>
        <trans-unit id="c8e927f93087617fa5e2ad0d1654b43c538c0e7e" translate="yes" xml:space="preserve">
          <source>When you use these Angular modules, import them in &lt;code&gt;AppModule&lt;/code&gt;, or your feature module as appropriate, and list them in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array. For example, in the basic app generated by the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; is the first import at the top of the &lt;code&gt;AppModule&lt;/code&gt;, &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">これらのAngularモジュールを使用する場合は、それらを &lt;code&gt;AppModule&lt;/code&gt; にインポートするか、必要に応じて機能モジュールに &lt;code&gt;imports&lt;/code&gt; し、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports配列にリストします。たとえば、によって生成された基本的なアプリで&lt;a href=&quot;cli&quot;&gt;角度CLI&lt;/a&gt;、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; はの上部の最初のインポートである &lt;code&gt;AppModule&lt;/code&gt; 、 &lt;code&gt;app.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="080cd8e0ffd40797678bd6db1b07ecb17508c1bf" translate="yes" xml:space="preserve">
          <source>When you visit &lt;code&gt;http://localhost:4200&lt;/code&gt;, the &lt;code&gt;/heroes&lt;/code&gt; route loads immediately upon launch and the router starts loading the &lt;code&gt;CrisisCenterModule&lt;/code&gt; right after the &lt;code&gt;HeroesModule&lt;/code&gt; loads.</source>
          <target state="translated">あなたが訪問するとき &lt;code&gt;http://localhost:4200&lt;/code&gt; 、 &lt;code&gt;/heroes&lt;/code&gt; ルートのすぐ起動時にロードし、ルータがロードを開始 &lt;code&gt;CrisisCenterModule&lt;/code&gt; を右後 &lt;code&gt;HeroesModule&lt;/code&gt; のロード。</target>
        </trans-unit>
        <trans-unit id="44c77ca06e436ba06a76204c91665ded53e10a97" translate="yes" xml:space="preserve">
          <source>When you want to build reactive forms</source>
          <target state="translated">リアクティブなフォームを構築したい場合</target>
        </trans-unit>
        <trans-unit id="48f76a44e44194717a9e946c5feb9c2e6b0b52cd" translate="yes" xml:space="preserve">
          <source>When you want to build template driven forms (includes &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">テンプレート駆動型フォーム（ &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; を含む）を構築する場合</target>
        </trans-unit>
        <trans-unit id="4e5214feaf2e0f2b028e9529ca13429a1279a360" translate="yes" xml:space="preserve">
          <source>When you want to run your app in a browser</source>
          <target state="translated">ブラウザでアプリを実行したい場合</target>
        </trans-unit>
        <trans-unit id="79cd32fcf10e349cacf13610bd6576229e1c2cc5" translate="yes" xml:space="preserve">
          <source>When you want to talk to a server</source>
          <target state="translated">サーバーと話をしたいとき</target>
        </trans-unit>
        <trans-unit id="9b1b99eea8d22a5434f0d6b37e29a9e079c7a914" translate="yes" xml:space="preserve">
          <source>When you want to use &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;NgFor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;NgFor&lt;/code&gt; を使用する場合</target>
        </trans-unit>
        <trans-unit id="896f69bcc45a08c492c179d02b221484e8842f42" translate="yes" xml:space="preserve">
          <source>When you want to use &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.forRoot()&lt;/code&gt;, and &lt;code&gt;.forChild()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;.forRoot()&lt;/code&gt; 、および &lt;code&gt;.forChild()&lt;/code&gt; を使用する場合</target>
        </trans-unit>
        <trans-unit id="dfa0b324bbeaa7902d962fb62864b60a9b21dc09" translate="yes" xml:space="preserve">
          <source>When you write a data-binding, you're dealing exclusively with the &lt;em&gt;DOM properties&lt;/em&gt; and &lt;em&gt;events&lt;/em&gt; of the target object.</source>
          <target state="translated">データバインディングを作成するときは、ターゲットオブジェクトの&lt;em&gt;DOMプロパティ&lt;/em&gt;と&lt;em&gt;イベント&lt;/em&gt;のみを扱います。</target>
        </trans-unit>
        <trans-unit id="4bb0f31a361efec853e39b49bafb65056beed48a" translate="yes" xml:space="preserve">
          <source>When you write your own structural directives, use the following grammar:</source>
          <target state="translated">自分で構造指示書を書くときは、以下の文法を使います。</target>
        </trans-unit>
        <trans-unit id="b4e579e2078171bbeaf4e91de26fcbce3bcc959d" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re done, users will be able to navigate the app like this:</source>
          <target state="translated">完了すると、ユーザーは次のようにアプリをナビゲートできるようになります。</target>
        </trans-unit>
        <trans-unit id="17951df2c8400929e977efa4744c0c861fc58da2" translate="yes" xml:space="preserve">
          <source>When you're done it looks like this.</source>
          <target state="translated">終わるとこんな感じです。</target>
        </trans-unit>
        <trans-unit id="ef010cb6e75978e36467b31a7285fb58053efd7b" translate="yes" xml:space="preserve">
          <source>When you're done with this page, the app should look like this live example.</source>
          <target state="translated">このページが終わると、アプリはこのようなライブサンプルのようになります。</target>
        </trans-unit>
        <trans-unit id="e6a96be9b1ba1110aa029cf80016d7fb5e9e1068" translate="yes" xml:space="preserve">
          <source>When you're done, it should look like this:</source>
          <target state="translated">終わったら、こんな感じになるはずです。</target>
        </trans-unit>
        <trans-unit id="30a40655f733f6e41e3030f2d31ddd6f2dbe644f" translate="yes" xml:space="preserve">
          <source>When you're done, the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">完了すると、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="ea335dad3c01c816d9ed76f23c43e1124bac391a" translate="yes" xml:space="preserve">
          <source>When you're done, you'll have these &lt;em&gt;hero management&lt;/em&gt; files:</source>
          <target state="translated">完了すると、次の&lt;em&gt;ヒーロー管理&lt;/em&gt;ファイルが作成されます。</target>
        </trans-unit>
        <trans-unit id="503695908e0b2be5d18ab6d1e3b8706361e129c4" translate="yes" xml:space="preserve">
          <source>When you're familiar with these fundamental building blocks, you can explore them in more detail in the documentation. To learn about more tools and techniques that are available to help you build and deploy Angular applications, see &lt;a href=&quot;architecture-next-steps&quot;&gt;Next steps: tools and techniques&lt;/a&gt;.</source>
          <target state="translated">これらの基本的なビルディングブロックに精通している場合は、ドキュメントでそれらをより詳しく探索できます。Angularアプリケーションの構築とデプロイに役立つその他のツールとテクニックについては、&lt;a href=&quot;architecture-next-steps&quot;&gt;次のステップ：ツールとテクニックを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3c0dae56146bb8eee79b34c8c03a03fc066445b7" translate="yes" xml:space="preserve">
          <source>When you're filtering by CSS selector and only testing properties of a browser's &lt;em&gt;native element&lt;/em&gt;, the &lt;code&gt;By.css&lt;/code&gt; approach may be overkill.</source>
          <target state="translated">CSSセレクターでフィルタリングし、ブラウザーの&lt;em&gt;ネイティブ要素&lt;/em&gt;のプロパティのみをテストする場合、 &lt;code&gt;By.css&lt;/code&gt; アプローチはやりすぎかもしれません。</target>
        </trans-unit>
        <trans-unit id="e6dec613091e0293026f13a73d50239981c86f57" translate="yes" xml:space="preserve">
          <source>When you're ready to activate the marble observables, you tell the &lt;code&gt;TestScheduler&lt;/code&gt; to &lt;em&gt;flush&lt;/em&gt; its queue of prepared tasks like this.</source>
          <target state="translated">大理石のオブザーバブルをアクティブにする準備ができたら、このように準備されたタスクのキューを&lt;em&gt;フラッシュ&lt;/em&gt;するように &lt;code&gt;TestScheduler&lt;/code&gt; に指示します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7661aa2fca4df31ccc337d89f54c6916141df825" translate="yes" xml:space="preserve">
          <source>When you've defined an animation trigger for a component, you can attach it to an element in that component's template by wrapping the trigger name in brackets and preceding it with an &lt;code&gt;@&lt;/code&gt; symbol. Then, you can bind the trigger to a template expression using standard Angular property binding syntax as shown below, where &lt;code&gt;&lt;a href=&quot;../api/animations/animationevent#triggerName&quot;&gt;triggerName&lt;/a&gt;&lt;/code&gt; is the name of the trigger, and &lt;code&gt;expression&lt;/code&gt; evaluates to a defined animation state.</source>
          <target state="translated">コンポーネントのアニメーショントリガーを定義したら、トリガー名を角かっこで囲み、その前に &lt;code&gt;@&lt;/code&gt; 記号を付けることで、そのコンポーネントのテンプレートの要素にトリガーをアタッチできます。次に、以下に示す標準のAngularプロパティバインディング構文を使用して、トリガーをテンプレート式にバインドできます。ここで、 &lt;code&gt;&lt;a href=&quot;../api/animations/animationevent#triggerName&quot;&gt;triggerName&lt;/a&gt;&lt;/code&gt; はトリガーの名前であり、 &lt;code&gt;expression&lt;/code&gt; は定義されたアニメーション状態に評価されます。</target>
        </trans-unit>
        <trans-unit id="06d0715c9e5e8fde1b326bf82fa7f414cd43a882" translate="yes" xml:space="preserve">
          <source>When your app is ready, you can use the Angular CLI to extract the text messages marked with &lt;code&gt;i18n&lt;/code&gt; and attributes marked with &lt;code&gt;i18n-x&lt;/code&gt; into a translation source file. Open a terminal window at the root of the app project and run the CLI command &lt;code&gt;xi18n&lt;/code&gt;.</source>
          <target state="translated">アプリの準備ができたら、Angular CLIを使用して、 &lt;code&gt;i18n&lt;/code&gt; でマークされたテキストメッセージと &lt;code&gt;i18n-x&lt;/code&gt; でマークされた属性を翻訳ソースファイルに抽出できます。アプリプロジェクトのルートでターミナルウィンドウを開き、CLIコマンド &lt;code&gt;xi18n&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="155587edb5946e5b07a5f26004e5f36b972bf50e" translate="yes" xml:space="preserve">
          <source>When your application matches a route that needs AngularJS, the AngularJS app is loaded and bootstrapped, the AngularJS routes match the necessary URL to render their content, and your application continues to run with both AngularJS and Angular frameworks.</source>
          <target state="translated">アプリケーションがAngularJSを必要とするルートにマッチすると、AngularJSアプリがロードされてブートストラップされ、AngularJSルートがコンテンツをレンダリングするために必要なURLにマッチし、アプリケーションはAngularJSとAngularフレームワークの両方で実行され続けます。</target>
        </trans-unit>
        <trans-unit id="1112737823346d69526849d251d05ee8229526b6" translate="yes" xml:space="preserve">
          <source>When your builder calls &lt;code&gt;BuilderRun.stop()&lt;/code&gt; to exit watch mode, Architect unsubscribes from the builder&amp;rsquo;s Observable and calls the builder&amp;rsquo;s teardown logic to clean up. (This behavior also allows for long running builds to be stopped and cleaned up.)</source>
          <target state="translated">ビルダーが &lt;code&gt;BuilderRun.stop()&lt;/code&gt; を呼び出して監視モードを終了すると、ArchitectはビルダーのObservableからサブスクライブを解除し、ビルダーのティアダウンロジックを呼び出してクリーンアップします。（この動作により、長時間実行されているビルドを停止してクリーンアップすることもできます。）</target>
        </trans-unit>
        <trans-unit id="40126e45c19e856e37cb61d50f01cae678591e52" translate="yes" xml:space="preserve">
          <source>When your custom element is placed on a page, the browser creates an instance of the registered class and adds it to the DOM. The content is provided by the component's template, which uses Angular template syntax, and is rendered using the component and DOM data. Input properties in the component correspond to input attributes for the element.</source>
          <target state="translated">カスタム要素がページに配置されると、ブラウザは登録されたクラスのインスタンスを作成して DOM に追加します。コンテンツはAngularのテンプレート構文を使用するコンポーネントのテンプレートによって提供され、コンポーネントとDOMのデータを使用してレンダリングされます。コンポーネントの入力プロパティは、要素の入力属性に対応しています。</target>
        </trans-unit>
        <trans-unit id="b8a317fa05b7d048a76b55b7cf3677a9fa2860a5" translate="yes" xml:space="preserve">
          <source>Whenever an &quot;upgraded&quot;/&quot;downgraded&quot; component is instantiated the host element is owned by the framework doing the instantiation. The other framework then instantiates and owns the view for that component.</source>
          <target state="translated">アップグレードされた &quot;ダウングレードされた &quot;コンポーネントがインスタンス化されるときはいつでも、ホスト要素はインスタンス化を行うフレームワークによって所有されます。他のフレームワークはそのコンポーネントのビューをインスタンス化して所有します。</target>
        </trans-unit>
        <trans-unit id="c4fef1a1adbf1c56b8cc3ecbb53a52b91dc97ae7" translate="yes" xml:space="preserve">
          <source>Whenever an adapter component is instantiated the host element is owned by the framework doing the instantiation. The other framework then instantiates and owns the view for that component. This implies that component bindings will always follow the semantics of the instantiation framework. The syntax is always that of Angular syntax.</source>
          <target state="translated">アダプタコンポーネントがインスタンス化されるときはいつでも、ホスト要素はインスタンス化を行ったフレームワークが所有します。そして、他のフレームワークがそのコンポーネントのビューをインスタンス化して所有します。これは、コンポーネントのバインディングが常にインスタンス化フレームワークのセマンティクスに従うことを意味します。構文は常にAngularの構文です。</target>
        </trans-unit>
        <trans-unit id="bb18456bba2c2a76c99b73d09dd270a2142bfc64" translate="yes" xml:space="preserve">
          <source>Whenever you use a component that belongs to the other framework, a switch between framework boundaries occurs. However, that switch only happens to the elements in the template of that component. Consider a situation where you use an Angular component from AngularJS like this:</source>
          <target state="translated">他のフレームワークに属しているコンポーネントを使用すると、フレームワークの境界が切り替わることがあります。しかし、この切り替えはそのコンポーネントのテンプレート内の要素にのみ発生します。このようにAngularJSのAngularコンポーネントを使用している状況を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="37c5edffc9d8dd9268e9bb4d3e92e12fb900ef58" translate="yes" xml:space="preserve">
          <source>Where the &lt;code&gt;catchError&lt;/code&gt; operator provides a simple path of recovery, the &lt;code&gt;retry&lt;/code&gt; operator lets you retry a failed request.</source>
          <target state="translated">どこ &lt;code&gt;catchError&lt;/code&gt; のオペレータが回復の簡単なパスを提供し、 &lt;code&gt;retry&lt;/code&gt; オペレータは、あなたが失敗した要求を再試行することができます。</target>
        </trans-unit>
        <trans-unit id="d3e42f4f2adbf1be1d8f547f899caad64fb9b8c9" translate="yes" xml:space="preserve">
          <source>Where to find this element in the source component template.</source>
          <target state="translated">ソース・コンポーネント・テンプレートのどこにこの要素があるか。</target>
        </trans-unit>
        <trans-unit id="899e84e9c1a23f3a65ea931518f5051ef6f15a09" translate="yes" xml:space="preserve">
          <source>Where to start looking, that is &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">どこから探し始めるか、それは &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dbc3168449a7edc3ef42f05f473e45c12862c64f" translate="yes" xml:space="preserve">
          <source>Where to stop looking, &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">どこで見るのをやめるか、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="2e665d9a41999f37f1f7c2d3f4a29a44a6cd8103" translate="yes" xml:space="preserve">
          <source>Whether an associated application is stable</source>
          <target state="translated">関連するアプリケーションが安定しているかどうか</target>
        </trans-unit>
        <trans-unit id="eb474db37cd039fcdb74ad381d29c8362cc8e3e8" translate="yes" xml:space="preserve">
          <source>Whether the ServiceWorker will be registered and the related services (such as &lt;code&gt;&lt;a href=&quot;swpush&quot;&gt;SwPush&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;) will attempt to communicate and interact with it.</source>
          <target state="translated">ServiceWorkerが登録されるかどうか、および関連するサービス（ &lt;code&gt;&lt;a href=&quot;swpush&quot;&gt;SwPush&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; など）がServiceWorkerとの通信および相互作用を試行するかどうか。</target>
        </trans-unit>
        <trans-unit id="2efc288f3df18953bf9fb23fadb91dbc28bef3db" translate="yes" xml:space="preserve">
          <source>Whether the contents of the root element should be preserved, or cleared upon bootstrap (default behavior). Use with &lt;code&gt;&lt;a href=&quot;viewencapsulation#ShadowDom&quot;&gt;ViewEncapsulation.ShadowDom&lt;/a&gt;&lt;/code&gt; to allow simple native content projection via &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">ルート要素の内容を保持するか、ブートストラップ時にクリアするか（デフォルトの動作）。 &lt;code&gt;&lt;a href=&quot;viewencapsulation#ShadowDom&quot;&gt;ViewEncapsulation.ShadowDom&lt;/a&gt;&lt;/code&gt; と組み合わせて使用すると、 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 要素を介した単純なネイティブコンテンツの投影が可能になります。</target>
        </trans-unit>
        <trans-unit id="50cfde31657c9b1fe2fdf40030fe9a96ff38a3c3" translate="yes" xml:space="preserve">
          <source>Whether the request was cancelled after it was sent.</source>
          <target state="translated">リクエストが送信された後にキャンセルされたかどうか。</target>
        </trans-unit>
        <trans-unit id="4bd45560b76a4dce3c8ea0111cc1f62d210247d6" translate="yes" xml:space="preserve">
          <source>Whether the router is configured properly to navigate with that route definition is a question for a separate set of tests.</source>
          <target state="translated">ルータがそのルート定義でナビゲートするように適切に設定されているかどうかは、別のテストセットのための質問です。</target>
        </trans-unit>
        <trans-unit id="a4ae306143b886081b256a0cf1522d64a7dc41b4" translate="yes" xml:space="preserve">
          <source>Whether the segment has child segments</source>
          <target state="translated">セグメントに子セグメントがあるかどうか</target>
        </trans-unit>
        <trans-unit id="456355a8ff33ce384c5db09a8d5dcfc2098e26a3" translate="yes" xml:space="preserve">
          <source>Whether the status code falls in the 2xx range.</source>
          <target state="translated">ステータスコードが2xxの範囲内にあるかどうか。</target>
        </trans-unit>
        <trans-unit id="c1e28eb611de2479c2121cff8123da6d11a13577" translate="yes" xml:space="preserve">
          <source>Whether there are no outstanding microtasks or macrotasks.</source>
          <target state="translated">目立ったマイクロタスクやマクロタスクがないかどうか。</target>
        </trans-unit>
        <trans-unit id="8c95f88ef6319a806a46dcf12f9b346039ef053e" translate="yes" xml:space="preserve">
          <source>Whether this request should be made in a way that exposes progress events.</source>
          <target state="translated">このリクエストは、進捗イベントを公開する形で行うべきかどうか。</target>
        </trans-unit>
        <trans-unit id="98f2e0d781390a03ccdfde20254e6c9d4fb73bb1" translate="yes" xml:space="preserve">
          <source>Whether this request should be sent with outgoing credentials (cookies).</source>
          <target state="translated">このリクエストを発信資格情報(クッキー)で送信するかどうか。</target>
        </trans-unit>
        <trans-unit id="e67c5849260e2c1b0ff2264f25feeb3c55f8f10c" translate="yes" xml:space="preserve">
          <source>Whether to allow updating when the repository contains modified or untracked files.</source>
          <target state="translated">リポジトリに変更されたファイルやトラックされていないファイルが含まれている場合に更新を許可するかどうか。</target>
        </trans-unit>
        <trans-unit id="70687b848d56f420e192e687505aa7a7298367bc" translate="yes" xml:space="preserve">
          <source>Whether to reload the page on change, using live-reload.</source>
          <target state="translated">ライブリロードを使用して、変更時にページをリロードするかどうか。</target>
        </trans-unit>
        <trans-unit id="432f58be7461d276173b0b45a590420621ebf868" translate="yes" xml:space="preserve">
          <source>Whether to update all packages in package.json.</source>
          <target state="translated">package.json内のすべてのパッケージを更新するかどうか。</target>
        </trans-unit>
        <trans-unit id="1de26d1834040d0a83cfb31ff38330472c5f00df" translate="yes" xml:space="preserve">
          <source>Whether using exactMatch</source>
          <target state="translated">exactMatchを使用しているかどうか</target>
        </trans-unit>
        <trans-unit id="4c0616b2607e4abaa27bed4b0ad642dc7df038cf" translate="yes" xml:space="preserve">
          <source>Whether you came here directly from &lt;a href=&quot;https://angular.io/start/start&quot;&gt;Your First App&lt;/a&gt;, or completed the entire online store application through the &lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;Routing&lt;/a&gt;, &lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;Managing Data&lt;/a&gt;, and &lt;a href=&quot;https://angular.io/start/start/forms&quot;&gt;Forms&lt;/a&gt; sections, you have an application that you can deploy by following the instructions in this section.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start&quot;&gt;最初のアプリ&lt;/a&gt;から直接ここに来た場合でも、&lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;ルーティング&lt;/a&gt;、&lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;データの管理&lt;/a&gt;、&lt;a href=&quot;https://angular.io/start/start/forms&quot;&gt;フォームの&lt;/a&gt;セクションを通じてオンラインストアアプリケーション全体を完了した場合でも、このセクションの手順に従ってデプロイできるアプリケーションがあります。</target>
        </trans-unit>
        <trans-unit id="f6730e737d171af53aac08d450ed36cf222714c7" translate="yes" xml:space="preserve">
          <source>Whether you decide to package functionality as a library is an architectural decision, similar to deciding whether a piece of functionality is a component or a service, or deciding on the scope of a component.</source>
          <target state="translated">機能をライブラリとしてパッケージ化するかどうかは、機能の一部がコンポーネントなのかサービスなのかを決めるのと同じように、アーキテクチャ上の決定です。</target>
        </trans-unit>
        <trans-unit id="2038878dfc5e4e17b17bfe1516c1eeefe95f5b86" translate="yes" xml:space="preserve">
          <source>Which strategy is best?</source>
          <target state="translated">どの戦略がベストなのか?</target>
        </trans-unit>
        <trans-unit id="5dfd5deece18b3254cac9f524fac29bd76a83d05" translate="yes" xml:space="preserve">
          <source>While Visual Studio Update 3 ships with TypeScript support out of the box, it currently doesn&amp;rsquo;t ship with more recent versions of TypeScript, which you need to develop Angular applications.</source>
          <target state="translated">Visual Studio Update 3には、すぐにTypeScriptサポートが付属していますが、現在、Angularアプリケーションを開発するために必要なTypeScriptの最新バージョンは付属していません。</target>
        </trans-unit>
        <trans-unit id="2f1154cb47e7f3f095cf5a680d8c709aaf901f86" translate="yes" xml:space="preserve">
          <source>While a list of items exists in another file, &lt;code&gt;mock-items.ts&lt;/code&gt;, you can specify a different item in &lt;code&gt;app.component.ts&lt;/code&gt; so that the new item will render:</source>
          <target state="translated">項目のリストは、別のファイルに存在するが &lt;code&gt;mock-items.ts&lt;/code&gt; 、あなたはで別の項目を指定することができます &lt;code&gt;app.component.ts&lt;/code&gt; 新しいアイテムがレンダリングされますように。</target>
        </trans-unit>
        <trans-unit id="7aaf540a86b02d7ab5f5ad8d445e241cd8492b75" translate="yes" xml:space="preserve">
          <source>While a small application might have only one NgModule, most apps have many more &lt;em&gt;feature modules&lt;/em&gt;. The &lt;em&gt;root&lt;/em&gt; NgModule for an app is so named because it can include child NgModules in a hierarchy of any depth.</source>
          <target state="translated">小さなアプリケーションにはNgModuleが1つしかない場合もありますが、ほとんどのアプリにはさらに多くの&lt;em&gt;機能モジュールがあります&lt;/em&gt;。アプリの&lt;em&gt;ルート&lt;/em&gt; NgModuleは、任意の深さの階層に子NgModuleを含めることができるため、そのように名付けられています。</target>
        </trans-unit>
        <trans-unit id="de3a579f287c79f1f8e62ef5741cd82572da8246" translate="yes" xml:space="preserve">
          <source>While building out the crisis center feature, you navigated to the crisis detail route using an &lt;strong&gt;absolute path&lt;/strong&gt; that begins with a &lt;em&gt;slash&lt;/em&gt;.</source>
          <target state="translated">危機管理センター機能の構築中に、&lt;em&gt;スラッシュ&lt;/em&gt;で始まる&lt;strong&gt;絶対パス&lt;/strong&gt;を使用して危機の詳細ルートに移動しました。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="af0f9bfe35490be85414a0791401df3fcf8622a8" translate="yes" xml:space="preserve">
          <source>While components in dedicated folders are widely preferred, another option for small apps is to keep components flat (not in a dedicated folder). This adds up to four files to the existing folder, but also reduces the folder nesting. Whatever you choose, be consistent.</source>
          <target state="translated">専用フォルダ内のコンポーネントが広く好まれていますが、小さなアプリのための別のオプションとして、コンポーネントをフラットに保つ(専用フォルダには入れない)という方法もあります。これは、既存のフォルダに最大4つのファイルを追加しますが、フォルダの入れ子を減らすことができます。どのような選択をするにしても、一貫性を保ちましょう。</target>
        </trans-unit>
        <trans-unit id="af144108b7f59db013ae2561d54c81a42f70f29c" translate="yes" xml:space="preserve">
          <source>While declaring &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata is possible, it is a better practice to use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; class decorators instead, as follows:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/directive&quot;&gt;ディレクティブ&lt;/a&gt;と &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;メタデータで &lt;code&gt;inputs&lt;/code&gt; と &lt;code&gt;outputs&lt;/code&gt; を宣言することは可能ですが、代わりに &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）および &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;（）クラスデコレーターを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2bed2bf619f46d9561a69d126f76aa9c4fcbbd5e" translate="yes" xml:space="preserve">
          <source>While developing a library, you must install all peer dependencies through &lt;code&gt;devDependencies&lt;/code&gt; to ensure that the library compiles properly. A linked library will then have its own set of Angular libraries that it uses for building, located in its &lt;code&gt;node_modules&lt;/code&gt; folder. However, this can cause problems while building or running your application.</source>
          <target state="translated">ライブラリの開発中に、ライブラリが適切にコンパイルされるようにするには、 &lt;code&gt;devDependencies&lt;/code&gt; を介してすべてのピア依存関係をインストールする必要があります。リンクされたライブラリには、ビルドに使用する独自のAngularライブラリセットがあり、 &lt;code&gt;node_modules&lt;/code&gt; フォルダーに配置されます。ただし、これにより、アプリケーションのビルドまたは実行中に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a1a0bf45b753eb2788a0f144fc1399ff08d7a339" translate="yes" xml:space="preserve">
          <source>While documentation guide pages ultimately render as HTML, almost all of them are written in &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;markdown&lt;/a&gt;.</source>
          <target state="translated">ドキュメントガイドページは最終的にHTMLとしてレンダリングされますが、それらのほとんどすべてが&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;markdownで&lt;/a&gt;記述されています。</target>
        </trans-unit>
        <trans-unit id="2bb660e2b074f370e7dfa660e9e07c484771bd07" translate="yes" xml:space="preserve">
          <source>While invisible, the element remains in the DOM.</source>
          <target state="translated">不可視の間は、要素は DOM の中に残ります。</target>
        </trans-unit>
        <trans-unit id="16ee0811bb131e7a95292c475b6b02aee8293f49" translate="yes" xml:space="preserve">
          <source>While it is possible to downgrade injectables, downgraded injectables will not be available until the Angular module that provides them is instantiated. In order to be safe, you need to ensure that the downgraded injectables are not used anywhere &lt;em&gt;outside&lt;/em&gt; the part of the app where it is guaranteed that their module has been instantiated.</source>
          <target state="translated">注射剤をダウングレードすることは可能ですが、ダウングレードされた注射剤は、それらを提供するAngularモジュールがインスタンス化されるまで使用できません。安全のためには、ダウングレードされた注射剤が、モジュールがインスタンス化されていることが保証されているアプリの部分&lt;em&gt;以外&lt;/em&gt;の場所&lt;em&gt;で&lt;/em&gt;使用されていないことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="b21f1ae1393795395e1d8727d35b23f3416670eb" translate="yes" xml:space="preserve">
          <source>While some may not care to minify this aggressively, the Angular product shouldn't prevent anyone from minifying aggressively. Therefore, the Angular team decided that everything Angular provides will minify safely.</source>
          <target state="translated">これを積極的にミニマイズすることを気にしない人もいるかもしれませんが、Angular製品は誰もが積極的にミニマイズすることを妨げるものではないはずです。そのため、Angularチームは、Angularが提供するものはすべて安全にミニマイズすることにしました。</target>
        </trans-unit>
        <trans-unit id="9deda132ffe29c742d81e186d165961fa24ce75f" translate="yes" xml:space="preserve">
          <source>While testing a component this simple has little intrinsic value, it's worth knowing how. You can use one of these approaches:</source>
          <target state="translated">このように単純なコンポーネントのテストは本質的な価値はほとんどありませんが、その方法を知る価値はあります。これらのアプローチのいずれかを使用することができます。</target>
        </trans-unit>
        <trans-unit id="922eaf22cdef6cf248a96c62535e56e742dd60f1" translate="yes" xml:space="preserve">
          <source>While that seems redundant, these properties have different functions. Membership in one list doesn't imply membership in another list.</source>
          <target state="translated">これは冗長に見えますが、これらのプロパティは異なる機能を持っています。あるリストのメンバーシップは、別のリストのメンバーシップを意味するものではありません。</target>
        </trans-unit>
        <trans-unit id="dbaae74b0ebf41a6f36354e5583ce138e38a4b27" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functions greatly simplify Angular asynchronous testing, you can still fall back to the traditional technique and pass &lt;code&gt;it&lt;/code&gt; a function that takes a &lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support&quot;&gt;&lt;code&gt;done&lt;/code&gt; callback&lt;/a&gt;.</source>
          <target state="translated">一方で &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 関数が大幅に角度非同期テストを簡素化し、あなたはまだ伝統的な技法にフォールバックして渡すことができ &lt;code&gt;it&lt;/code&gt; 取る関数&lt;a href=&quot;https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support&quot;&gt; &lt;code&gt;done&lt;/code&gt; コールバックを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="94a171d6c589715e1067bf2483ed94b5ae7d39ea" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;AppComponent&lt;/code&gt;&lt;em&gt;class&lt;/em&gt; is empty, you may want to write unit tests to confirm that the links are wired properly to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directives, perhaps for the reasons &lt;a href=&quot;testing#why-stubbed-routerlink-tests&quot;&gt;explained below&lt;/a&gt;.</source>
          <target state="translated">一方で &lt;code&gt;AppComponent&lt;/code&gt; の&lt;em&gt;クラスが&lt;/em&gt;空である、あなたは、リンクがに正しく配線されていることを確認するために、ライトユニットテストしたいことがあり &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; の理由は、おそらくのために、ディレクティブ&lt;a href=&quot;testing#why-stubbed-routerlink-tests&quot;&gt;以下に説明します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d3223a994c3c8a4823a7603409c5fb5030bcfbb" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;HeroesComponent&lt;/code&gt; class still works, the &lt;code&gt;onSelect()&lt;/code&gt; method and &lt;code&gt;selectedHero&lt;/code&gt; property are no longer used.</source>
          <target state="translated">一方で &lt;code&gt;HeroesComponent&lt;/code&gt; のクラスはまだ動作、 &lt;code&gt;onSelect()&lt;/code&gt; メソッドと &lt;code&gt;selectedHero&lt;/code&gt; のプロパティは、もはや使用されていません。</target>
        </trans-unit>
        <trans-unit id="7bfa741a35ff4ba4dd3d245eeb234b8097b7ea83" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;ngDoCheck()&lt;/code&gt; hook can detect when the hero's &lt;code&gt;name&lt;/code&gt; has changed, it has a frightful cost. This hook is called with enormous frequency&amp;mdash;after &lt;em&gt;every&lt;/em&gt; change detection cycle no matter where the change occurred. It's called over twenty times in this example before the user can do anything.</source>
          <target state="translated">一方で &lt;code&gt;ngDoCheck()&lt;/code&gt; 主人公の時にフックが検出できる &lt;code&gt;name&lt;/code&gt; 変更されている、それは恐ろしいコストを持っています。このフックは、変更が発生した場所に関係なく、&lt;em&gt;すべての&lt;/em&gt;変更検出サイクルの後、非常に頻繁に呼び出されます。この例では、ユーザーが何かを実行する前に20回以上呼び出されています。</target>
        </trans-unit>
        <trans-unit id="a55beda27c00248790e49417c4dcaaa586bb7541" translate="yes" xml:space="preserve">
          <source>While the &lt;em&gt;code sample&lt;/em&gt; accompanying this guide demonstrates &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt;, this page defers to the &lt;a href=&quot;http#testing-http-requests&quot;&gt;Http guide&lt;/a&gt;, which covers testing with the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; in detail.</source>
          <target state="translated">このガイドに付属する&lt;em&gt;コードサンプル&lt;/em&gt;は &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; を示していますが、このページは &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; を使用したテストを詳細に説明している&lt;a href=&quot;http#testing-http-requests&quot;&gt;Httpガイド&lt;/a&gt;に依存しています。</target>
        </trans-unit>
        <trans-unit id="e236f6fd7d6a981d056dc092480c2d9f7cd0493a" translate="yes" xml:space="preserve">
          <source>While the bootstrapped and routed components are &lt;em&gt;entry components&lt;/em&gt;, you don't have to add them to a module's &lt;code&gt;entryComponents&lt;/code&gt; list, as they are added implicitly.</source>
          <target state="translated">ブートストラップされルーティングされたコンポーネントは&lt;em&gt;エントリコンポーネント&lt;/em&gt;ですが、暗黙的に追加されるため、モジュールの &lt;code&gt;entryComponents&lt;/code&gt; リストに追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="7b948c3298099054af5c43499c67fd799579eafd" translate="yes" xml:space="preserve">
          <source>While the following guidelines describe the use of each type and their typical characteristics, in real world apps, you may see hybrids.</source>
          <target state="translated">以下のガイドラインでは、それぞれのタイプの使い方や代表的な特徴を説明していますが、現実世界のアプリではハイブリッドを目にすることがあります。</target>
        </trans-unit>
        <trans-unit id="322f024cb227e4947bae54501a104f55a7646140" translate="yes" xml:space="preserve">
          <source>While the name &lt;code&gt;root&lt;/code&gt; is a special alias, other &lt;code&gt;ModuleInjector&lt;/code&gt;s don't have aliases. You have the option to create &lt;code&gt;ModuleInjector&lt;/code&gt;s whenever a dynamically loaded component is created, such as with the Router, which will create child &lt;code&gt;ModuleInjector&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; という名前は特別なエイリアスですが、他の &lt;code&gt;ModuleInjector&lt;/code&gt; にはエイリアスがありません。子 &lt;code&gt;ModuleInjector&lt;/code&gt; を作成するルーターなど、動的に読み込まれるコンポーネントが作成されるたびに &lt;code&gt;ModuleInjector&lt;/code&gt; を作成するオプションがあります。</target>
        </trans-unit>
        <trans-unit id="1d767a5a85783201556264a61318d016cc2125ea" translate="yes" xml:space="preserve">
          <source>While the router uses the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;HTML5 pushState&lt;/a&gt; style by default, you &lt;em&gt;must&lt;/em&gt; configure that strategy with a &lt;strong&gt;base href&lt;/strong&gt;.</source>
          <target state="translated">ルーターはデフォルトで&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;HTML5 pushState&lt;/a&gt;スタイルを使用しますが、&lt;strong&gt;base href&lt;/strong&gt;を使用してその戦略を構成する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01d95e9caebba56bfe90c85d978bfaab15d3c180" translate="yes" xml:space="preserve">
          <source>While the subscription is active, Service Worker listens for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushEvent&quot;&gt;PushEvent&lt;/a&gt; occurrences and creates &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification&quot;&gt;Notification&lt;/a&gt; instances in response.</source>
          <target state="translated">サブスクリプションがアクティブな間、Service Workerは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushEvent&quot;&gt;PushEvent&lt;/a&gt;オカレンスをリッスンし、それに応答して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification&quot;&gt;Notification&lt;/a&gt;インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="e91af09c132542b901dc969980ed9ae882ac1705" translate="yes" xml:space="preserve">
          <source>While there's rarely a good reason to apply a structural directive in template &lt;em&gt;attribute&lt;/em&gt; or &lt;em&gt;element&lt;/em&gt; form, it's still important to know that Angular creates a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; and to understand how it works. You'll refer to the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; when you &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own structural directive&lt;/a&gt;.</source>
          <target state="translated">テンプレート&lt;em&gt;属性&lt;/em&gt;または&lt;em&gt;要素の&lt;/em&gt;形式で構造ディレクティブを適用する正当な理由はめったにありませんが、Angularが &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; を作成することを理解し、それがどのように機能するかを理解することは依然として重要です。&lt;a href=&quot;structural-directives#unless&quot;&gt;独自の構造ディレクティブ&lt;/a&gt;を作成するときに、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; を参照します。</target>
        </trans-unit>
        <trans-unit id="13ac445e8a260522faf3df163997d45a5d55783f" translate="yes" xml:space="preserve">
          <source>While these default criteria are fine in most cases, it is sometimes desirable to configure different rules. For example, you may want to ignore specific routes (that are not part of the Angular app) and pass them through to the server.</source>
          <target state="translated">ほとんどの場合、これらのデフォルトの基準は問題ありませんが、異なるルールを設定することが望ましい場合もあります。例えば、特定のルート(Angularアプリの一部ではない)を無視してサーバーに渡したい場合があります。</target>
        </trans-unit>
        <trans-unit id="0f9227406655f727bc3b335fbb57e7ecad4435de" translate="yes" xml:space="preserve">
          <source>While this app doesn't have a route to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; that omits the &lt;code&gt;id&lt;/code&gt; parameter, it might add such a route someday. The component should do something reasonable when there is no &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">このアプリには、 &lt;code&gt;id&lt;/code&gt; パラメーターを省略した &lt;code&gt;HeroDetailComponent&lt;/code&gt; へのルートがありませんが、いつかそのようなルートが追加される可能性があります。 &lt;code&gt;id&lt;/code&gt; がない場合、コンポーネントは適切な処理を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="3db01e5de077841c6ee63df60c8eb095a471b993" translate="yes" xml:space="preserve">
          <source>While this is a base class that NgClass extends from, the class itself acts as a container for non-VE code to setup a link to the &lt;code&gt;[class]&lt;/code&gt; host binding (via the static &lt;code&gt;ngDirectiveDef&lt;/code&gt; property on the class).</source>
          <target state="translated">これはNgClassの継承元の基本クラスですが、クラス自体が非VEコードのコンテナとして機能し、 &lt;code&gt;[class]&lt;/code&gt; ホストバインディングへのリンクをセットアップします（クラスの静的 &lt;code&gt;ngDirectiveDef&lt;/code&gt; プロパティを介して）。</target>
        </trans-unit>
        <trans-unit id="40a33dd6773969d82d18d1f0e4b8284401f3f3fa" translate="yes" xml:space="preserve">
          <source>While this is a base class that NgStyle extends from, the class itself acts as a container for non-VE code to setup a link to the &lt;code&gt;[&lt;a href=&quot;../animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; host binding (via the static &lt;code&gt;ngDirectiveDef&lt;/code&gt; property on the class).</source>
          <target state="translated">これはNgStyleが継承する基本クラスですが、クラス自体が非VEコードのコンテナーとして機能し、 &lt;code&gt;[&lt;a href=&quot;../animations/style&quot;&gt;style&lt;/a&gt;]&lt;/code&gt; ホストバインディングへのリンクをセットアップします（クラスの静的 &lt;code&gt;ngDirectiveDef&lt;/code&gt; プロパティを介して）。</target>
        </trans-unit>
        <trans-unit id="1557d255fa555f2461a9fc1ea6d89f6d4f9550b5" translate="yes" xml:space="preserve">
          <source>While this technique is suitable for toggling a single class name, consider the &lt;a href=&quot;template-syntax#ngClass&quot;&gt;&lt;code&gt;NgClass&lt;/code&gt;&lt;/a&gt; directive when managing multiple class names at the same time.</source>
          <target state="translated">この手法は単一のクラス名を切り替えるのに適していますが、複数のクラス名を同時に管理する場合は&lt;a href=&quot;template-syntax#ngClass&quot;&gt; &lt;code&gt;NgClass&lt;/code&gt; &lt;/a&gt;ディレクティブを検討してください。</target>
        </trans-unit>
        <trans-unit id="d971e439874c00bf97336a91204c83d31c4d88b7" translate="yes" xml:space="preserve">
          <source>While working on a published library, you can use &lt;a href=&quot;https://docs.npmjs.com/cli/link&quot;&gt;npm link&lt;/a&gt; to avoid reinstalling the library on every build.</source>
          <target state="translated">公開されたライブラリでの作業中に、&lt;a href=&quot;https://docs.npmjs.com/cli/link&quot;&gt;npmリンク&lt;/a&gt;を使用して、ビルドごとにライブラリを再インストールすることを回避できます。</target>
        </trans-unit>
        <trans-unit id="b24ca2e39219949e690787fe118cba513f0fcb23" translate="yes" xml:space="preserve">
          <source>While you can put more than one component tree on a host web page, most applications have only one component tree and bootstrap a single root component.</source>
          <target state="translated">ホストのウェブページに複数のコンポーネントツリーを配置することができますが、ほとんどのアプリケーションは1つのコンポーネントツリーしか持たず、1つのルートコンポーネントをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="7e225fb4c7e87b7b1778b247651d232843aa3aba" translate="yes" xml:space="preserve">
          <source>While you could call &lt;code&gt;getHeroes()&lt;/code&gt; in the constructor, that's not the best practice.</source>
          <target state="translated">コンストラクターで &lt;code&gt;getHeroes()&lt;/code&gt; を呼び出すこともできますが、これはベストプラクティスではありません。</target>
        </trans-unit>
        <trans-unit id="a0fae3fec8db9b133701c092b5757d24ffb7e3ae" translate="yes" xml:space="preserve">
          <source>While you could continue to add files to the &lt;code&gt;src/app/&lt;/code&gt; folder, that is unrealistic and ultimately not maintainable. Most developers prefer to put each feature area in its own folder.</source>
          <target state="translated">引き続き &lt;code&gt;src/app/&lt;/code&gt; フォルダーにファイルを追加することもできますが、これは非現実的であり、最終的には保守できません。ほとんどの開発者は、各機能領域を独自のフォルダーに配置することを好みます。</target>
        </trans-unit>
        <trans-unit id="ab6a43c0bf8f0d40672e23efd7b8429687eb1e22" translate="yes" xml:space="preserve">
          <source>Why &quot;ngModel&quot;? A directive's &lt;a href=&quot;../api/core/directive&quot;&gt;exportAs&lt;/a&gt; property tells Angular how to link the reference variable to the directive. You set &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; because the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive's &lt;code&gt;exportAs&lt;/code&gt; property happens to be &quot;ngModel&quot;.</source>
          <target state="translated">なぜ「ngModel」なのか？ディレクティブの&lt;a href=&quot;../api/core/directive&quot;&gt;exportAs&lt;/a&gt;プロパティは、参照変数をディレクティブにリンクする方法をAngularに指示します。 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブの &lt;code&gt;exportAs&lt;/code&gt; プロパティがたまたま「ngModel」であるため、 &lt;code&gt;name&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; に設定しました。</target>
        </trans-unit>
        <trans-unit id="d318f1063bfb5cd9dacbb5931bfa402cc527970e" translate="yes" xml:space="preserve">
          <source>Why &lt;code&gt;remove&lt;/code&gt; rather than &lt;code&gt;hide&lt;/code&gt;?</source>
          <target state="translated">なぜ &lt;code&gt;hide&lt;/code&gt; ではなく &lt;code&gt;remove&lt;/code&gt; ですか？</target>
        </trans-unit>
        <trans-unit id="5e5069bc0dde0d06f00638f22a1b23e5b6061f68" translate="yes" xml:space="preserve">
          <source>Why check &lt;em&gt;dirty&lt;/em&gt; and &lt;em&gt;touched&lt;/em&gt;?</source>
          <target state="translated">なぜ&lt;em&gt;汚れ&lt;/em&gt;て&lt;em&gt;触ったの&lt;/em&gt;かチェックする？</target>
        </trans-unit>
        <trans-unit id="cdde1e44b5df9e7b5ee6f951fb7ffd01c1fe5ee3" translate="yes" xml:space="preserve">
          <source>Why declare &lt;em&gt;angular&lt;/em&gt; as &lt;em&gt;angular.IAngularStatic&lt;/em&gt;?</source>
          <target state="translated">&lt;em&gt;angular&lt;/em&gt;を&lt;em&gt;angular.IAngularStatic&lt;/em&gt;として宣言するのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="77edc57f32ccba69520fd34fd76f444ba728688a" translate="yes" xml:space="preserve">
          <source>Why does Angular need &lt;code&gt;entryComponents&lt;/code&gt;?</source>
          <target state="translated">なぜAngularは &lt;code&gt;entryComponents&lt;/code&gt; を必要とするのですか？</target>
        </trans-unit>
        <trans-unit id="51611ead610693f8035df03d882f55fdb9029100" translate="yes" xml:space="preserve">
          <source>Why does lazy loading create a child injector?</source>
          <target state="translated">怠惰なローディングはなぜ子インジェクタを作成するのですか?</target>
        </trans-unit>
        <trans-unit id="4eec386f35248e79e61fc00c25f2064798d6b68d" translate="yes" xml:space="preserve">
          <source>Why does the &lt;code&gt;doSomething()&lt;/code&gt; method wait a tick before updating &lt;code&gt;comment&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;doSomething()&lt;/code&gt; メソッドが &lt;code&gt;comment&lt;/code&gt; 更新する前にティックを待機するのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="eb31703be46c50bbc7eaa00a5535907610777ee9" translate="yes" xml:space="preserve">
          <source>Why doesn't Angular add lazy-loaded providers to the app root injector as it does for eagerly loaded NgModules?</source>
          <target state="translated">なぜAngularは、イーガーリーロードされたNgModulesのためのように、アプリのルートインジェクターに遅延ロードされたプロバイダを追加しないのですか?</target>
        </trans-unit>
        <trans-unit id="1854ce5e4b6793b5d1ae83050374ba97c6c3c00c" translate="yes" xml:space="preserve">
          <source>Why is a service provided in a feature module visible everywhere?</source>
          <target state="translated">フィーチャーモジュールで提供されているサービスがどこでも見られるのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="7f854e990dd8ef12c3bfdefa6688b2c3721f6c5b" translate="yes" xml:space="preserve">
          <source>Why is a service provided in a lazy-loaded module visible only to that module?</source>
          <target state="translated">なぜ、レイジーロードされたモジュールで提供されるサービスは、そのモジュールにしか見えないのですか?</target>
        </trans-unit>
        <trans-unit id="8c6b2ade23fd30b08eb34573829d5d3555214a81" translate="yes" xml:space="preserve">
          <source>Why is it bad if a shared module provides a service to a lazy-loaded module?</source>
          <target state="translated">共有モジュールが遅延ロードされたモジュールにサービスを提供するのはなぜ悪いことなのでしょうか?</target>
        </trans-unit>
        <trans-unit id="2e4580536b0f2359910adb76e50ba348f206ca0a" translate="yes" xml:space="preserve">
          <source>Why it works</source>
          <target state="translated">なぜそれが機能するのか</target>
        </trans-unit>
        <trans-unit id="c61aec305e608a6380d5ef5d9610794a4acd19c7" translate="yes" xml:space="preserve">
          <source>Why list the same component in multiple &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; properties?</source>
          <target state="translated">同じコンポーネントを複数の &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; プロパティにリストするのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="4b4def911c2cbfb92404d9a60708df645ca4036b" translate="yes" xml:space="preserve">
          <source>Why not &quot;highlight&quot;?</source>
          <target state="translated">なぜ「ハイライト」ではないのか?</target>
        </trans-unit>
        <trans-unit id="9e9f3c21f34bc99e2a0bc838edaf643242816b11" translate="yes" xml:space="preserve">
          <source>Why not defer DOM integration tests to end-to-end (E2E) testing?</source>
          <target state="translated">DOM 統合テストをエンドツーエンド (E2E)テストに延期してはどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="f0c9e7d2fbfbc176f66d88e4130920bb0d8e5e6d" translate="yes" xml:space="preserve">
          <source>Why not rely on E2E tests of DOM integration?</source>
          <target state="translated">なぜ DOM 統合の E2E テストに頼らないのですか?</target>
        </trans-unit>
        <trans-unit id="ba6cd6fa33a570d67aedda554c42dca77ff31e43" translate="yes" xml:space="preserve">
          <source>Why put spec file next to the file it tests?</source>
          <target state="translated">なぜテストするファイルの隣に spec ファイルを置くのですか?</target>
        </trans-unit>
        <trans-unit id="12078275c72479f3331dcc17b12caa18d03a9c98" translate="yes" xml:space="preserve">
          <source>Why services</source>
          <target state="translated">なぜサービスなのか</target>
        </trans-unit>
        <trans-unit id="430ea9adf8d91815946ba4f13ebf65a6528dc6b9" translate="yes" xml:space="preserve">
          <source>Why use server-side rendering?</source>
          <target state="translated">なぜサーバーサイドレンダリングを使うのか?</target>
        </trans-unit>
        <trans-unit id="58eb6efb5ee2ce76380afc566adebeb87b29c2a6" translate="yes" xml:space="preserve">
          <source>Why would you use SVG as template, instead of simply adding it as image to your application?</source>
          <target state="translated">単純にアプリケーションに画像として追加するのではなく、SVGをテンプレートとして使用する理由は何でしょうか?</target>
        </trans-unit>
        <trans-unit id="5e348a70aa9504ebb9cd2767488ed852755a1934" translate="yes" xml:space="preserve">
          <source>Why write a service?</source>
          <target state="translated">なぜサービスを書くのか?</target>
        </trans-unit>
        <trans-unit id="7320f16356458f846b9605ef64b13b7ecdd83423" translate="yes" xml:space="preserve">
          <source>Why you &lt;a href=&quot;structural-directives#the-asterisk--prefix&quot;&gt;prefix the directive name with an asterisk (*)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;structural-directives#the-asterisk--prefix&quot;&gt;ディレクティブ名の前にアスタリスク（*）&lt;/a&gt;を付ける理由。</target>
        </trans-unit>
        <trans-unit id="58c5b9f3361fe794e0551a73d476d4c73d87a3a4" translate="yes" xml:space="preserve">
          <source>Why you use it</source>
          <target state="translated">使う理由</target>
        </trans-unit>
        <trans-unit id="9ec4d86f6bc5dfade050672f98a8b077a3af7db8" translate="yes" xml:space="preserve">
          <source>Wide</source>
          <target state="translated">Wide</target>
        </trans-unit>
        <trans-unit id="b920e278db060d5132eb85b067e6489cd9df8c17" translate="yes" xml:space="preserve">
          <source>Wide (fallback to &lt;code&gt;&lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&lt;/code&gt; when missing)</source>
          <target state="translated">ワイド（にフォールバック欠落している場合） &lt;code&gt;&lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be7eb77ab67a75bdfd5c6e1433e701036125c95c" translate="yes" xml:space="preserve">
          <source>Wide images can be a problem. Most browsers try to rescale the image but wide images may overflow the document in certain viewports.</source>
          <target state="translated">ワイド画像は問題になることがあります。ほとんどのブラウザは画像のリスケールを試みますが、特定のビューポートではワイド画像がドキュメントからはみ出すことがあります。</target>
        </trans-unit>
        <trans-unit id="df15305cc141d8294713eba43aaee44d1edfe3bd" translate="yes" xml:space="preserve">
          <source>Widget</source>
          <target state="translated">Widget</target>
        </trans-unit>
        <trans-unit id="e5ea2dcd242e9e2f7f8046f8332e2e4f97aa61fc" translate="yes" xml:space="preserve">
          <source>Widget feature modules.</source>
          <target state="translated">ウィジェット機能モジュール。</target>
        </trans-unit>
        <trans-unit id="4b22636bf684877a2ca0fddff96647d96827436c" translate="yes" xml:space="preserve">
          <source>Wild Cards</source>
          <target state="translated">ワイルドカード</target>
        </trans-unit>
        <trans-unit id="e7838d3e850762e34afbc40f2627be6c7bd374b2" translate="yes" xml:space="preserve">
          <source>Wildcard state</source>
          <target state="translated">ワイルドカード状態</target>
        </trans-unit>
        <trans-unit id="019592ebc26ebe6bf40f0c3a3d02f90af2815eb4" translate="yes" xml:space="preserve">
          <source>Will be called for every request, so the token may change between requests.</source>
          <target state="translated">リクエストごとに呼び出されるので、トークンはリクエスト間で変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="0fdc144c92056ab7d5f102c3d50ea2cefa690d68" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;i18n#merge-aot&quot;&gt;AOT&lt;/a&gt;, you pass the information as configuration settings.</source>
          <target state="translated">&lt;a href=&quot;i18n#merge-aot&quot;&gt;AOT&lt;/a&gt;、あなたは構成設定などの情報を渡します。</target>
        </trans-unit>
        <trans-unit id="1d09f298abe9a7fc875ef158d461d408d20664a6" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;i18n#merge-jit&quot;&gt;JIT&lt;/a&gt;, you provide the information at bootstrap time.</source>
          <target state="translated">では&lt;a href=&quot;i18n#merge-jit&quot;&gt;JIT&lt;/a&gt;、ブートストラップ時の情報を提供しています。</target>
        </trans-unit>
        <trans-unit id="200c19c0c9f56cf91684c9502f9b1d3d09288928" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;*&lt;a href=&quot;api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; repeats for each product in the list.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; のリストにある各製品の繰り返し。</target>
        </trans-unit>
        <trans-unit id="0ecc3b0f037e8e08430e46acd7c70c807c3b3ffb" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, the two change detection systems are tied together more tightly. Whenever something happens in the AngularJS part of the app, change detection is automatically triggered on the Angular part and vice versa. This is convenient as it ensures that neither framework misses an important change. Most of the time, though, these extra change detection runs are unnecessary.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 、2つの変更の検出システムは、より緊密に結びついています。アプリのAngularJS部分で何かが発生すると、Angular部分で変更検出が自動的にトリガーされ、その逆も同様です。これはどちらのフレームワークも重要な変更を見逃さないようにするので便利です。ただし、ほとんどの場合、これらの追加の変更検出の実行は不要です。</target>
        </trans-unit>
        <trans-unit id="0ab2c912f60573267ca8c0c610d5904df837d8b8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, Angular passes the value for &lt;code&gt;currentItem&lt;/code&gt; to the child so that &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; renders as &lt;code&gt;Television&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 、角度は値渡し &lt;code&gt;currentItem&lt;/code&gt; するように子供に &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; としてレンダリングする &lt;code&gt;Television&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1571093943d515929c4d2ad37e20dc85fb0cb242" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;, the injector begins its search for the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;&lt;code&gt;ElementInjector&lt;/code&gt; and finds 🐳 (whale).</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; で &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 、インジェクタはのための検索を開始します &lt;code&gt;AnimalService&lt;/code&gt; で &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; &lt;code&gt;ElementInjector&lt;/code&gt; と発見🐳（クジラ）。</target>
        </trans-unit>
        <trans-unit id="514263be0a675439b526ac2db882f2028e8a6caa" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;, the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; injector doesn't look to itself for the &lt;code&gt;FlowerService&lt;/code&gt;. Instead, the injector starts looking for the &lt;code&gt;FlowerService&lt;/code&gt; at the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;'s &lt;code&gt;ElementInjector&lt;/code&gt;, where it finds nothing. Then, it goes back to the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt; and finds the 🌺 (red hibiscus) value, which is available because the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt; and the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;&lt;code&gt;ModuleInjector&lt;/code&gt; are flattened into one &lt;code&gt;ModuleInjector&lt;/code&gt;. Thus, the UI renders the following:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; インジェクタはのために自分自身に見ていない &lt;code&gt;FlowerService&lt;/code&gt; 。代わりに、インジェクターは &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; の &lt;code&gt;ElementInjector&lt;/code&gt; で &lt;code&gt;FlowerService&lt;/code&gt; の検索を開始しますが、何も見つかりません。次に、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; に戻り、the（赤いハイビスカス）の値を見つけます。これは、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; と &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; が1つの &lt;code&gt;ModuleInjector&lt;/code&gt; にフラット化されているため利用できます。したがって、UIは以下をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="6aa81c5fc739583ab2d3afe1487e3a1975b85894" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;trackBy&lt;/code&gt;, only changing the &lt;code&gt;id&lt;/code&gt; triggers element replacement.</source>
          <target state="translated">&lt;code&gt;trackBy&lt;/code&gt; 、唯一の変更 &lt;code&gt;id&lt;/code&gt; トリガエレメント交換を。</target>
        </trans-unit>
        <trans-unit id="2b2022ad5e54a76cb4f206c08caf298b2a25eec7" translate="yes" xml:space="preserve">
          <source>With Angular Universal, you can generate landing pages for the app that look like the complete app. The pages are pure HTML, and can display even if JavaScript is disabled. The pages don't handle browser events, but they &lt;em&gt;do&lt;/em&gt; support navigation through the site using &lt;a href=&quot;router#router-link&quot;&gt;&lt;code&gt;routerLink&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Angular Universalを使用すると、完全なアプリのように見えるアプリのランディングページを生成できます。ページは純粋なHTMLであり、JavaScriptが無効になっていても表示できます。ページには、ブラウザのイベントを処理していないが、彼らは&lt;em&gt;やる&lt;/em&gt;使用して、サイトを介して支持ナビゲーションを&lt;a href=&quot;router#router-link&quot;&gt; &lt;code&gt;routerLink&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9f8fe2ab51d493e8db841e87168ff2a0ac6f0c3e" translate="yes" xml:space="preserve">
          <source>With Angular version 8, the CLI Builder API is stable and available to developers who want to customize the Angular CLI by adding or modifying commands. For example, you could supply a builder to perform an entirely new task, or to change which third-party tool is used by an existing command.</source>
          <target state="translated">Angularバージョン8では、CLI Builder APIが安定しており、コマンドを追加したり修正したりしてAngular CLIをカスタマイズしたい開発者が利用できるようになりました。例えば、全く新しいタスクを実行するためにビルダーを提供したり、既存のコマンドで使用するサードパーティのツールを変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="c2a88e1a0148b4a6869805a7a6ac97dde9e0ff28" translate="yes" xml:space="preserve">
          <source>With CSS imports.</source>
          <target state="translated">CSSのインポートで。</target>
        </trans-unit>
        <trans-unit id="bf0a79766c3bc1ba070745fe39181ae5fe7be150" translate="yes" xml:space="preserve">
          <source>With data-binding, you can control things like the state of a button:</source>
          <target state="translated">データバインディングでは、ボタンの状態などを制御することができます。</target>
        </trans-unit>
        <trans-unit id="a3e8732f285a06169348c283028ee3640fff4b7a" translate="yes" xml:space="preserve">
          <source>With its &lt;code&gt;getAds()&lt;/code&gt; method, &lt;code&gt;AdBannerComponent&lt;/code&gt; cycles through the array of &lt;code&gt;AdItems&lt;/code&gt; and loads a new component every 3 seconds by calling &lt;code&gt;loadComponent()&lt;/code&gt;.</source>
          <target state="translated">その付 &lt;code&gt;getAds()&lt;/code&gt; メソッド、 &lt;code&gt;AdBannerComponent&lt;/code&gt; の配列を循環 &lt;code&gt;AdItems&lt;/code&gt; と負荷新しいコンポーネントごとに3秒呼び出すこと &lt;code&gt;loadComponent()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ceb2407ccef6b0bf3e482eb7d304bbdcd717820" translate="yes" xml:space="preserve">
          <source>With no &lt;code&gt;trackBy&lt;/code&gt;, both buttons trigger complete DOM element replacement.</source>
          <target state="translated">&lt;code&gt;trackBy&lt;/code&gt; がない場合、両方のボタンがDOM要素の完全な置換をトリガーします。</target>
        </trans-unit>
        <trans-unit id="536e3572a460f32cd6bdb3410223e623acf76f40" translate="yes" xml:space="preserve">
          <source>With reactive forms, the &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance&lt;/strong&gt; always returns a new value when the control's value is updated.</source>
          <target state="translated">リアクティブフォームでは、コントロールの値が更新されると、&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスは&lt;/strong&gt;常に新しい値を返します。</target>
        </trans-unit>
        <trans-unit id="5e2c684a98820d22704c39326e7146086ace1878" translate="yes" xml:space="preserve">
          <source>With reactive forms, the form model is explicitly defined in the component class. The reactive form directive (in this case, &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt;) then links the existing &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance to a specific form element in the view using a value accessor (&lt;code&gt;&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; instance).</source>
          <target state="translated">リアクティブフォームでは、フォームモデルはコンポーネントクラスで明示的に定義されます。次に、リアクティブフォームディレクティブ（この場合は &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; ）が、値アクセサー（ &lt;code&gt;&lt;a href=&quot;../api/forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; インスタンス）を使用して、既存の &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスをビュー内の特定のフォーム要素にリンクします。</target>
        </trans-unit>
        <trans-unit id="2d05e69e43f92be76d996dab286009e2290f7866" translate="yes" xml:space="preserve">
          <source>With reactive forms:</source>
          <target state="translated">反応性のあるフォームで</target>
        </trans-unit>
        <trans-unit id="019eb643284aded107e069dd6344db97a92357fe" translate="yes" xml:space="preserve">
          <source>With template-driven forms, the &lt;strong&gt;favorite color property&lt;/strong&gt; is always modified to its new value.</source>
          <target state="translated">テンプレート駆動型フォームでは、&lt;strong&gt;お気に入りのカラープロパティ&lt;/strong&gt;は常に新しい値に変更されます。</target>
        </trans-unit>
        <trans-unit id="19e073dfecca90c0a9f77a20bb44682814b67a82" translate="yes" xml:space="preserve">
          <source>With template-driven forms:</source>
          <target state="translated">テンプレート駆動型のフォームで</target>
        </trans-unit>
        <trans-unit id="be8d82817001ae7961e2f4110b21a1426c5b5835" translate="yes" xml:space="preserve">
          <source>With that concern in mind, implement an impure pipe with great care. An expensive, long-running pipe could destroy the user experience.</source>
          <target state="translated">その点を考慮して、不純なパイプは細心の注意を払って実装してください。高価で長持ちするパイプは、ユーザーエクスペリエンスを破壊する可能性があります。</target>
        </trans-unit>
        <trans-unit id="08f5cfc92b9e57c5269817cc98d1f5ea4a41a524" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;http://www.learnrxjs.io/operators/transformation/switchmap.html&quot;&gt;switchMap operator&lt;/a&gt;, every qualifying key event can trigger an &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; method call. Even with a 300ms pause between requests, you could have multiple HTTP requests in flight and they may not return in the order sent.</source>
          <target state="translated">&lt;a href=&quot;http://www.learnrxjs.io/operators/transformation/switchmap.html&quot;&gt;switchMap演算子を&lt;/a&gt;使用すると、対象となるすべてのキーイベントが &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; メソッドの呼び出しをトリガーできます。リクエスト間に300ミリ秒の一時停止があったとしても、複数のHTTPリクエストが処理中である可能性があり、送信された順序で返されない場合があります。</target>
        </trans-unit>
        <trans-unit id="2352f11932b7bff23ba7057bd735b9f485a4af13" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;ngUpgrade&lt;/code&gt; library in Angular you can upgrade an existing AngularJS app incrementally by building a hybrid app where you can run both frameworks side-by-side. In these hybrid apps you can mix and match AngularJS and Angular components and services and have them interoperate seamlessly. That means you don't have to do the upgrade work all at once as there is a natural coexistence between the two frameworks during the transition period.</source>
          <target state="translated">Angular の &lt;code&gt;ngUpgrade&lt;/code&gt; ライブラリを使用すると、両方のフレームワークを並行して実行できるハイブリッドアプリを構築することにより、既存のAngularJSアプリを段階的にアップグレードできます。これらのハイブリッドアプリでは、AngularJSとAngularのコンポーネントおよびサービスを組み合わせて、シームレスに相互運用できます。つまり、移行期間中は2つのフレームワークが自然に共存するため、アップグレード作業を一度に行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="074ab19623556f09735ac122589456a92b46c9ef" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;value&lt;/code&gt; property. which gives you a snapshot of the current value.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; プロパティ。これにより、現在の値のスナップショットが得られます。</target>
        </trans-unit>
        <trans-unit id="c3e2859d149c00a8c70f651753088ada705938fd" translate="yes" xml:space="preserve">
          <source>With the Angular CLI, you can configure your global styles in the &lt;code&gt;angular.json&lt;/code&gt; file. You can rename the extension to &lt;code&gt;.scss&lt;/code&gt; to use sass.</source>
          <target state="translated">Angular CLIを使用すると、 &lt;code&gt;angular.json&lt;/code&gt; ファイルでグローバルスタイルを構成できます。拡張子を &lt;code&gt;.scss&lt;/code&gt; に変更して、sassを使用できます。</target>
        </trans-unit>
        <trans-unit id="4cc1b5658039f71e373c05a8c2d298408717f4a9" translate="yes" xml:space="preserve">
          <source>With the addition of an Angular service worker, the application behavior changes. On a refresh, the page loads normally.</source>
          <target state="translated">Angularのサービスワーカーを追加すると、アプリケーションの動作が変わります。リフレッシュ時には、ページは正常に読み込まれます。</target>
        </trans-unit>
        <trans-unit id="1ed3fd9bd4c1f256dcc104023a64d45285ef0146" translate="yes" xml:space="preserve">
          <source>With the following code:</source>
          <target state="translated">以下のコードで</target>
        </trans-unit>
        <trans-unit id="e4ba2bf51920e50ddd76d0b8ce235609e5ca3f00" translate="yes" xml:space="preserve">
          <source>With the redirects setup, all previous routes now point to their new destinations and both URLs still function as intended.</source>
          <target state="translated">リダイレクトが設定されたことで、以前のすべてのルートが新しい目的地を指すようになり、両方の URL が意図した通りに機能するようになりました。</target>
        </trans-unit>
        <trans-unit id="7b7e14ba85f043cc2153d669ef641d59ce2ba6dc" translate="yes" xml:space="preserve">
          <source>With the safe navigation operator, &lt;code&gt;?&lt;/code&gt;, Angular stops evaluating the expression when it hits the first &lt;code&gt;null&lt;/code&gt; value and renders the view without errors.</source>
          <target state="translated">安全な航法演算子を使用すると、 &lt;code&gt;?&lt;/code&gt; 、Angularは最初の &lt;code&gt;null&lt;/code&gt; 値にヒットすると式の評価を停止し、エラーなしでビューをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="e6501ec771a7fc4bae077d3c02ffac0e8b32870f" translate="yes" xml:space="preserve">
          <source>With the server running, you can point your browser at &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;. Your application should load normally.</source>
          <target state="translated">サーバーが稼働している状態で、ブラウザーで&lt;a href=&quot;http://localhost:8080/&quot;&gt;http：// localhost：8080 /を指定でき&lt;/a&gt;ます。アプリケーションは正常に読み込まれるはずです。</target>
        </trans-unit>
        <trans-unit id="8fe7cf705023fd1c89ebb3c647e04c69d1bb4ec3" translate="yes" xml:space="preserve">
          <source>With the versioning behavior of the Angular service worker, an application server can ensure that the Angular app always has a consistent set of files.</source>
          <target state="translated">Angularサービスワーカーのバージョニング動作により、アプリケーションサーバーはAngularアプリが常に一貫したファイルセットを持っていることを保証することができます。</target>
        </trans-unit>
        <trans-unit id="2849f0172ab7aa7e6a7d8293fb4ce2777526ea4a" translate="yes" xml:space="preserve">
          <source>With this content:</source>
          <target state="translated">この内容で</target>
        </trans-unit>
        <trans-unit id="089eb5172d3965ed3cdbcf88655204f69aa78b7a" translate="yes" xml:space="preserve">
          <source>WithProperties</source>
          <target state="translated">WithProperties</target>
        </trans-unit>
        <trans-unit id="9bda55462ad09ef63ca623f6eb47fb05236ec79c" translate="yes" xml:space="preserve">
          <source>Within a switch container, &lt;code&gt;*&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; statements specify the match expressions as attributes. Include &lt;code&gt;*&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; as the final case.</source>
          <target state="translated">スイッチコンテナ内では、 &lt;code&gt;*&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; ステートメントは属性として一致式を指定します。最後のケースとして &lt;code&gt;*&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="5e7fc2910f937115866b1508ba85cfd25173fbfe" translate="yes" xml:space="preserve">
          <source>Within such a factory function, using this function to request injection of a dependency is faster and more type-safe than providing an additional array of dependencies (as has been common with &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; providers).</source>
          <target state="translated">このようなファクトリー関数内で、この関数を使用して依存関係の注入を要求する方が、（ &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; プロバイダーで一般的である）追加の依存関係の配列を提供するよりも高速でタイプセーフです。</target>
        </trans-unit>
        <trans-unit id="22803a3b39417d3e155ecdc540584686725394b8" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; function:</source>
          <target state="translated">内 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder#group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 関数：</target>
        </trans-unit>
        <trans-unit id="7d1d21894554520cbe70ca3161889946066e8693" translate="yes" xml:space="preserve">
          <source>Within the container, &lt;code&gt;*&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; statements specify the match expressions as attributes. Include &lt;code&gt;*&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; as the final case.</source>
          <target state="translated">コンテナー内で、 &lt;code&gt;*&lt;a href=&quot;ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; ステートメントは、一致式を属性として指定します。最後のケースとして &lt;code&gt;*&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="a7276b58b727c6c410427f99bc15652f439a152d" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; なし</target>
        </trans-unit>
        <trans-unit id="7fcf4d2f6736413b0fdde7ba35c562ec2b3ed296" translate="yes" xml:space="preserve">
          <source>Without a framework, you would be responsible for pushing data values into the HTML controls and turning user responses into actions and value updates. Writing such push and pull logic by hand is tedious, error-prone, and a nightmare to read, as any experienced front-end JavaScript programmer can attest.</source>
          <target state="translated">フレームワークがなければ、データの値を HTML コントロールにプッシュし、ユーザーの反応をアクションや値の更新に変える責任があります。このようなプッシュとプルのロジックを手書きで書くのは退屈で、エラーが発生しやすく、経験豊富なフロントエンド JavaScript プログラマなら誰でも証明してくれるように、読むのは悪夢のようなものです。</target>
        </trans-unit>
        <trans-unit id="43acf4885e6d5e8186042e70023c71257f30d8b8" translate="yes" xml:space="preserve">
          <source>Without animations, web page transitions can seem abrupt and jarring.</source>
          <target state="translated">アニメーションがないと、Webページの遷移が唐突に感じられてしまいます。</target>
        </trans-unit>
        <trans-unit id="3cb1b66992897f9d72d43a66457c712e7332958e" translate="yes" xml:space="preserve">
          <source>Without interception, developers would have to implement these tasks &lt;em&gt;explicitly&lt;/em&gt; for each &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method call.</source>
          <target state="translated">インターセプトがなければ、開発者は各 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッド呼び出しに対してこれらのタスクを&lt;em&gt;明示的&lt;/em&gt;に実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="d8159db5355a8ad440e87c125107146e2f6c4bc2" translate="yes" xml:space="preserve">
          <source>Without rewriting, this would be invalid because lambdas are not supported and &lt;code&gt;TypicalServer&lt;/code&gt; is not exported. To allow this, the compiler automatically rewrites this to something like:</source>
          <target state="translated">書き換えを行わないと、 &lt;code&gt;TypicalServer&lt;/code&gt; がサポートされず、TypicalServerがエクスポートされないため、これは無効になります。これを可能にするために、コンパイラはこれを次のようなものに自動的に書き換えます。</target>
        </trans-unit>
        <trans-unit id="1929ccbff6f54303435c9d6a6e88229d090523b4" translate="yes" xml:space="preserve">
          <source>Without that tag, the browser may not be able to load resources (images, CSS, scripts) when &quot;deep linking&quot; into the app. Bad things could happen when someone pastes an application link into the browser's address bar or clicks such a link in an email.</source>
          <target state="translated">このタグがないと、アプリへの「ディープリンク」の際に、ブラウザがリソース(画像、CSS、スクリプト)を読み込めない場合があります。誰かがアプリケーションのリンクをブラウザのアドレスバーに貼り付けたり、電子メールでそのようなリンクをクリックしたりすると、悪いことが起こる可能性があります。</target>
        </trans-unit>
        <trans-unit id="010c5880bd6415296c88290b8d4aadcb9cfb803c" translate="yes" xml:space="preserve">
          <source>Without those braces, JavaScript would only execute the first statement when you intend to conditionally execute all of them as a single block. The &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; satisfies a similar need in Angular templates.</source>
          <target state="translated">これらの中括弧がないと、JavaScriptは、条件付きですべてを単一のブロックとして実行する場合にのみ、最初のステートメントを実行します。 &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; を満たす角度テンプレートに似て必要。</target>
        </trans-unit>
        <trans-unit id="76958a0cd41a3ca4e5779435c35a550beb1958a9" translate="yes" xml:space="preserve">
          <source>WorkerAppModule</source>
          <target state="translated">WorkerAppModule</target>
        </trans-unit>
        <trans-unit id="01b0947f98451f2111dec9ae4e4392144c3513b4" translate="yes" xml:space="preserve">
          <source>Working around the browser APIs</source>
          <target state="translated">ブラウザAPIの周りの作業</target>
        </trans-unit>
        <trans-unit id="2eb34458f36c3030ba79d7147278dcb7f42f56ba" translate="yes" xml:space="preserve">
          <source>Working on an implementation.</source>
          <target state="translated">実装に向けての作業。</target>
        </trans-unit>
        <trans-unit id="6268699d3bbeb1ad3dd8fe27d8c8cd586c39fb67" translate="yes" xml:space="preserve">
          <source>Workspace and project configuration</source>
          <target state="translated">ワークスペースとプロジェクトの構成</target>
        </trans-unit>
        <trans-unit id="753540644098b968997d9756ca9f709602fc348a" translate="yes" xml:space="preserve">
          <source>Workspace and project file structure</source>
          <target state="translated">ワークスペースとプロジェクトのファイル構造</target>
        </trans-unit>
        <trans-unit id="c352c45f9dfd8d810dc06724fc085c520f1ecafa" translate="yes" xml:space="preserve">
          <source>Workspace configuration files</source>
          <target state="translated">ワークスペース構成ファイル</target>
        </trans-unit>
        <trans-unit id="85aa6b445eca0c0cf6c798a83ec5dedaa7b66a19" translate="yes" xml:space="preserve">
          <source>Workspace npm dependencies</source>
          <target state="translated">ワークスペース npm の依存関係</target>
        </trans-unit>
        <trans-unit id="5a0d418778672b7618a4ff2f76ab69dd1900780f" translate="yes" xml:space="preserve">
          <source>Workspaces and project files</source>
          <target state="translated">ワークスペースとプロジェクトファイル</target>
        </trans-unit>
        <trans-unit id="c4758386676c54543b72740b050edd6b5164b8d6" translate="yes" xml:space="preserve">
          <source>Wrap the form in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and bind its &lt;code&gt;hidden&lt;/code&gt; property to the &lt;code&gt;HeroFormComponent.submitted&lt;/code&gt; property.</source>
          <target state="translated">フォームを &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; でラップし、その &lt;code&gt;hidden&lt;/code&gt; プロパティを &lt;code&gt;HeroFormComponent.submitted&lt;/code&gt; プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="16d56174bd7b0125fea2dcc2c06879628dc61f7b" translate="yes" xml:space="preserve">
          <source>Wrap the hero detail HTML in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Add Angular's &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and set it to &lt;code&gt;selectedHero&lt;/code&gt;.</source>
          <target state="translated">ヒーローの詳細HTMLを &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; で囲みます。Angularの &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ディレクティブを &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に追加し、それを &lt;code&gt;selectedHero&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="80af69bfe43ca69dcb3f2fb2aa59e64fa426c886" translate="yes" xml:space="preserve">
          <source>Wrap up and final app</source>
          <target state="translated">ラップアップと最後のアプリ</target>
        </trans-unit>
        <trans-unit id="27cf5d4683d47a0de40a3f27346a5f855469b310" translate="yes" xml:space="preserve">
          <source>Wrapped values are unwrapped automatically during the change detection, and the unwrapped value is stored.</source>
          <target state="translated">ラッピングされた値は、変更検出時に自動的にアンラッピングされ、アンラッピングされた値が格納されます。</target>
        </trans-unit>
        <trans-unit id="b618e5b1103fc5a7e8d976cd3a42fcb09070c8d7" translate="yes" xml:space="preserve">
          <source>WrappedValue</source>
          <target state="translated">WrappedValue</target>
        </trans-unit>
        <trans-unit id="57b9cb2cebc443cd6088f1e833e85368057ca6eb" translate="yes" xml:space="preserve">
          <source>Wraps a function to be executed in the fakeAsync zone:</source>
          <target state="translated">fakeAsyncゾーンで実行される関数をラップします。</target>
        </trans-unit>
        <trans-unit id="22a50d995cd4156654361cd37c38f681e8d33b3b" translate="yes" xml:space="preserve">
          <source>Wraps a test function in an asynchronous test zone. The test will automatically complete when all asynchronous calls within this zone are done. Can be used to wrap an &lt;a href=&quot;inject&quot;&gt;&lt;code&gt;inject&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">非同期テストゾーンでテスト関数をラップします。このゾーン内のすべての非同期呼び出しが完了すると、テストは自動的に完了します。&lt;a href=&quot;inject&quot;&gt; &lt;code&gt;inject&lt;/code&gt; &lt;/a&gt;コールをラップするために使用できます。</target>
        </trans-unit>
        <trans-unit id="100b402dceaf296612af0eb5e4e6515e25039258" translate="yes" xml:space="preserve">
          <source>Wraps a test function in an asynchronous test zone. The test will automatically complete when all asynchronous calls within this zone are done. Can be used to wrap an &lt;a href=&quot;testing/inject&quot;&gt;&lt;code&gt;inject&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">非同期テストゾーンでテスト関数をラップします。このゾーン内のすべての非同期呼び出しが完了すると、テストは自動的に完了します。&lt;a href=&quot;testing/inject&quot;&gt; &lt;code&gt;inject&lt;/code&gt; &lt;/a&gt;コールをラップするために使用できます。</target>
        </trans-unit>
        <trans-unit id="ea8f25d1acfd326e0dad7d7c32fcc318bdf66542" translate="yes" xml:space="preserve">
          <source>Write DOM tests too</source>
          <target state="translated">DOMテストも書く</target>
        </trans-unit>
        <trans-unit id="a20cce9d728aa06f528fda67055ff0c86a09b2b3" translate="yes" xml:space="preserve">
          <source>Write a harness to try it</source>
          <target state="translated">試しにハーネスを書いてみる</target>
        </trans-unit>
        <trans-unit id="a8d0c494c88477774037634897be250615132ba0" translate="yes" xml:space="preserve">
          <source>Write a second component that &lt;em&gt;binds&lt;/em&gt; the pipe's format parameter to the component's &lt;code&gt;format&lt;/code&gt; property. Here's the template for that component:</source>
          <target state="translated">パイプのフォーマットパラメータをコンポーネントの &lt;code&gt;format&lt;/code&gt; プロパティに&lt;em&gt;バインド&lt;/em&gt;する2番目のコンポーネントを記述します。これがそのコンポーネントのテンプレートです：</target>
        </trans-unit>
        <trans-unit id="c475564c93474169eccff5a8c6fbbae81a32d868" translate="yes" xml:space="preserve">
          <source>Write a structural directive</source>
          <target state="translated">構造指令を書く</target>
        </trans-unit>
        <trans-unit id="0b5b915cb79464c96b638b4b04076ae4512fcc2b" translate="yes" xml:space="preserve">
          <source>Write a value to the element</source>
          <target state="translated">要素に値を書き込む</target>
        </trans-unit>
        <trans-unit id="50ab6e47b6478470b9f03185206a16d9f0dcd98d" translate="yes" xml:space="preserve">
          <source>Write an &lt;a href=&quot;dependency-injection-in-action#useexisting&quot;&gt;&lt;em&gt;alias provider&lt;/em&gt;&lt;/a&gt;&amp;mdash;a &lt;code&gt;provide&lt;/code&gt; object literal with a &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; definition&amp;mdash;that creates an &lt;em&gt;alternative&lt;/em&gt; way to inject the same component instance and add that provider to the &lt;code&gt;providers&lt;/code&gt; array of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata for the &lt;code&gt;AlexComponent&lt;/code&gt;.</source>
          <target state="translated">書き込み&lt;a href=&quot;dependency-injection-in-action#useexisting&quot;&gt;&lt;em&gt;エイリアスプロバイダは&lt;/em&gt;&lt;/a&gt; -a &lt;code&gt;provide&lt;/code&gt; とオブジェクトリテラルを &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 定義、作成&lt;em&gt;別の&lt;/em&gt;同じコンポーネントインスタンスを注入とにそのプロバイダを追加する方法 &lt;code&gt;providers&lt;/code&gt; のアレイ &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; のメタデータ &lt;code&gt;AlexComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f03d8a78e9142ec11fa984d17b5bba0431278bdc" translate="yes" xml:space="preserve">
          <source>Write an interceptor</source>
          <target state="translated">インターセプターを書く</target>
        </trans-unit>
        <trans-unit id="11f4e18a688e5fb137dcbb0b8fc5b283a82a6f5a" translate="yes" xml:space="preserve">
          <source>Write one more impure pipe, a pipe that makes an HTTP request.</source>
          <target state="translated">不純なパイプ、HTTPリクエストをするパイプをもう一本書こう。</target>
        </trans-unit>
        <trans-unit id="98d4c2f5112b9165b3d77fe1bbc4810bdb11e157" translate="yes" xml:space="preserve">
          <source>Write the directive code</source>
          <target state="translated">ディレクティブのコードを書く</target>
        </trans-unit>
        <trans-unit id="328305f528e33187a05ed913c4cdfd6835ff639a" translate="yes" xml:space="preserve">
          <source>Write the first async &lt;code&gt;beforeEach&lt;/code&gt; like this.</source>
          <target state="translated">このように最初の非同期 &lt;code&gt;beforeEach&lt;/code&gt; を記述します。</target>
        </trans-unit>
        <trans-unit id="4a8c5b07a378d0e9997a7ab9a6bc9d3eb9fe12c2" translate="yes" xml:space="preserve">
          <source>Write the template</source>
          <target state="translated">テンプレートを書く</target>
        </trans-unit>
        <trans-unit id="3460c1b32f74351fdabb7b72f175001fb3641df8" translate="yes" xml:space="preserve">
          <source>Write-Only</source>
          <target state="translated">Write-Only</target>
        </trans-unit>
        <trans-unit id="db8bc67982568e392f688d4f65b76786016e30fa" translate="yes" xml:space="preserve">
          <source>Writes a new value to the element.</source>
          <target state="translated">要素に新しい値を書き込みます。</target>
        </trans-unit>
        <trans-unit id="a2cee97467095242641dce6e6e2e22f7a3d2d50a" translate="yes" xml:space="preserve">
          <source>Writing test functions with &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt;, is more cumbersome than &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;and &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt;, but it is occasionally necessary when code involves the &lt;code&gt;intervalTimer()&lt;/code&gt; like &lt;code&gt;setInterval&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; を使用してテスト関数を作成することは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; よりも面倒ですが、コードに &lt;code&gt;setInterval&lt;/code&gt; のような &lt;code&gt;intervalTimer()&lt;/code&gt; が含まれる場合に必要になることがあります。</target>
        </trans-unit>
        <trans-unit id="869fbcd2d8f7216089e804c7e02a4532a37cae00" translate="yes" xml:space="preserve">
          <source>Writing tests with template-driven forms requires a detailed knowledge of the change detection process and an understanding of how directives run on each cycle to ensure that elements are queried, tested, or changed at the correct time.</source>
          <target state="translated">テンプレート駆動のフォームを使ってテストを書くには、変更検出プロセスの詳細な知識と、要素が適切なタイミングで問い合わせ、テスト、変更されることを確実にするために、各サイクルでどのようにディレクティブが実行されるかを理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="fba633555fbdefb41b26b54e2d1ae5197e6018a8" translate="yes" xml:space="preserve">
          <source>Writing this in full JavaScript can be quite involved. With observables, you can use a simple series of RxJS operators:</source>
          <target state="translated">これを完全なJavaScriptで記述するのは、かなり複雑な作業になります。観測値を使えば、簡単な一連のRxJS演算子を使うことができます。</target>
        </trans-unit>
        <trans-unit id="5d7b693cbfc10c6be0691f24671f3dea15cd67fa" translate="yes" xml:space="preserve">
          <source>Writing variations of the same parent &lt;em&gt;alias provider&lt;/em&gt; gets old quickly, especially this awful mouthful with a &lt;a href=&quot;dependency-injection-in-action#forwardref&quot;&gt;&lt;em&gt;forwardRef&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">同じ親&lt;em&gt;エイリアスプロバイダーの&lt;/em&gt;バリエーションを作成すると、すぐに古くなります。特に、この&lt;a href=&quot;dependency-injection-in-action#forwardref&quot;&gt;&lt;em&gt;forwardRef&lt;/em&gt;&lt;/a&gt;を使用すると、ひどい口当たりに&lt;em&gt;なり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6615fce0f673668cfcbf040e610b3f243f6a5f0f" translate="yes" xml:space="preserve">
          <source>Writing your own structural directives</source>
          <target state="translated">独自の構造指示書を書く</target>
        </trans-unit>
        <trans-unit id="bda3d503ab6e71da4ecdc7ba9799876a869c7f5d" translate="yes" xml:space="preserve">
          <source>WtfScopeFn</source>
          <target state="translated">WtfScopeFn</target>
        </trans-unit>
        <trans-unit id="0bedb6a0b3ee1a4586748a1afd482fdab6cd810e" translate="yes" xml:space="preserve">
          <source>XLIFF 1.2 (default)</source>
          <target state="translated">XLIFF 1.2(デフォルト</target>
        </trans-unit>
        <trans-unit id="7ac17d1faac505f349f9755e05f6be22993a3065" translate="yes" xml:space="preserve">
          <source>XLIFF 2</source>
          <target state="translated">XLIFF 2</target>
        </trans-unit>
        <trans-unit id="09d92a1a0c75cee4b1621a6ca1a7fc5f5e596627" translate="yes" xml:space="preserve">
          <source>XLIFF files have the extension .xlf. The XMB format generates .xmb source files but uses .xtb (XML Translation Bundle: XTB) translation files.</source>
          <target state="translated">XLIFF ファイルの拡張子は .xlf です。XMB フォーマットは .xmb ソースファイルを生成しますが、.xtb (XML Translation Bundle:XTB)翻訳ファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="0d6931c6ae08210e1032ff16fc8dc25545ff4dd5" translate="yes" xml:space="preserve">
          <source>XML Message Bundle (XMB)</source>
          <target state="translated">XML メッセージバンドル (XMB)</target>
        </trans-unit>
        <trans-unit id="599e87f8ed02dd15253f65e02b7486f06eafc4c7" translate="yes" xml:space="preserve">
          <source>XSRF protection</source>
          <target state="translated">XSRF保護</target>
        </trans-unit>
        <trans-unit id="6fd5227911e073f0f3b8abbe36af4c0966e7d31e" translate="yes" xml:space="preserve">
          <source>XhrFactory</source>
          <target state="translated">XhrFactory</target>
        </trans-unit>
        <trans-unit id="879e32326c5217968ac8e3a14e4a8a5214957264" translate="yes" xml:space="preserve">
          <source>Year</source>
          <target state="translated">Year</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="d7d90dedbe56729ff46d489e7ed07371a54fa88f" translate="yes" xml:space="preserve">
          <source>Yes (Guards)</source>
          <target state="translated">はい(警備員)</target>
        </trans-unit>
        <trans-unit id="507cb15cae91e9b102e4c4639f56689d54efb2b2" translate="yes" xml:space="preserve">
          <source>Yet another is setting the model property of a custom component&amp;mdash;a great way for parent and child components to communicate:</source>
          <target state="translated">さらに、カスタムコンポーネントのモデルプロパティを設定することもできます。これは、親コンポーネントと子コンポーネントが通信するための優れた方法です。</target>
        </trans-unit>
        <trans-unit id="5184f834d5e61356c1186f5476ca3e95650f0f36" translate="yes" xml:space="preserve">
          <source>Yet any test that creates the &lt;code&gt;AppComponent&lt;/code&gt; in the DOM will also create instances of these three components and, if you let that happen, you'll have to configure the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to create them.</source>
          <target state="translated">ただし、DOMで &lt;code&gt;AppComponent&lt;/code&gt; を作成するテストでは、これら3つのコンポーネントのインスタンスも作成されます。これが発生した場合は、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を作成するためにTestBedを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="09c5b3c020b8419aa1859d0421105d3bc9f79c89" translate="yes" xml:space="preserve">
          <source>You &lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;learned earlier&lt;/a&gt; that a class interface is an abstract class used as an interface rather than as a base class.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;以前&lt;/a&gt;に、クラスインターフェイスは、基本クラスとしてではなくインターフェイスとして使用される抽象クラスであることを学びました。</target>
        </trans-unit>
        <trans-unit id="9eb8bdd95a2a0842fc38fcf43de28230ccdaaa64" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;can&lt;/em&gt; export any declarable class&amp;mdash;components, directives, and pipes&amp;mdash;whether it's declared in this NgModule or in an imported NgModule.</source>
          <target state="translated">あなたは&lt;em&gt;できる&lt;/em&gt;任意の申告クラスコンポーネント、ディレクティブ、およびパイプ-かどうか、それがこのNgModule中またはインポートNgModuleで宣言されていますをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="787ea929d005d74a273414ae116216e5df9c88b8" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;can&lt;/em&gt; re-export entire imported NgModules, which effectively re-exports all of their exported classes. An NgModule can even export a module that it doesn't import.</source>
          <target state="translated">あなたは&lt;em&gt;できる&lt;/em&gt;再輸出全体の効果すべてのエクスポートされたクラスの輸出を再インポートNgModulesを、。NgModuleは、インポートしないモジュールをエクスポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="53efccf4d2256507a396e122e4b6a85b6cb4087d" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;could&lt;/em&gt; add this provider directly to the providers array of the &lt;code&gt;AppModule&lt;/code&gt;. However, it's rather verbose and there's a good chance that you'll create more interceptors and provide them in the same way. You must also pay &lt;a href=&quot;http#interceptor-order&quot;&gt;close attention to the order&lt;/a&gt; in which you provide these interceptors.</source>
          <target state="translated">あなたは&lt;em&gt;可能性&lt;/em&gt;のプロバイダの配列に直接このプロバイダを追加 &lt;code&gt;AppModule&lt;/code&gt; 。ただし、これはかなり冗長であり、インターセプターをさらに作成して同じ方法で提供する可能性は十分にあります。また、これらのインターセプターを提供する&lt;a href=&quot;http#interceptor-order&quot;&gt;順序&lt;/a&gt;にも細心の注意を払う必要があります。</target>
        </trans-unit>
        <trans-unit id="b85a893fd767c61c0814c4709da16cc28cf81f13" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;could&lt;/em&gt; handle in the component by adding a second callback to the &lt;code&gt;.subscribe()&lt;/code&gt;:</source>
          <target state="translated">あなたは&lt;em&gt;可能性&lt;/em&gt;への2番目のコールバックを追加することにより、コンポーネントでハンドル &lt;code&gt;.subscribe()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="83686f5d76aa5b58d68b9684ddb16975afa647d0" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;import&lt;/em&gt; other NgModules so you can use their exported classes in component templates. You &lt;em&gt;export&lt;/em&gt; this NgModule's classes so they can be imported and used by components of &lt;em&gt;other&lt;/em&gt; NgModules.</source>
          <target state="translated">あなたは、&lt;em&gt;インポート&lt;/em&gt;、コンポーネントテンプレートに自分のエクスポートクラスを使用することができますので、他のNgModulesを。あなたは、&lt;em&gt;エクスポート&lt;/em&gt;、彼らは輸入のコンポーネントで使用することができますので、このNgModuleのクラスを&lt;em&gt;他の&lt;/em&gt; NgModules。</target>
        </trans-unit>
        <trans-unit id="09c14240b7508350608a5ba18e2c5814bd0a661d" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;may&lt;/em&gt; also be able to get the service from the root injector via &lt;code&gt;TestBed.get()&lt;/code&gt;. This is easier to remember and less verbose. But it only works when Angular injects the component with the service instance in the test's root injector.</source>
          <target state="translated">あなたは&lt;em&gt;可能&lt;/em&gt;また、経由ルートインジェクタからサービスを得ることができる &lt;code&gt;TestBed.get()&lt;/code&gt; 。これは覚えやすく、冗長ではありません。ただし、Angularがコンポーネントをテストのルートインジェクターのサービスインスタンスと共に注入する場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="8602a4c4173ea23f45ba3fcc342dec01b1dabf44" translate="yes" xml:space="preserve">
          <source>You &lt;em&gt;should&lt;/em&gt; omit the brackets when all of the following are true:</source>
          <target state="translated">あなたは&lt;em&gt;必要があり&lt;/em&gt;、次のすべてに該当する場合にかっこを省略します。</target>
        </trans-unit>
        <trans-unit id="e6278239350d29c6aa9b279ad51935f18b8320d6" translate="yes" xml:space="preserve">
          <source>You achieve this effect by adding these class definitions to a new &lt;code&gt;forms.css&lt;/code&gt; file that you add to the project as a sibling to &lt;code&gt;index.html&lt;/code&gt;:</source>
          <target state="translated">これらのクラス定義を、 &lt;code&gt;index.html&lt;/code&gt; の兄弟としてプロジェクトに追加する新しい &lt;code&gt;forms.css&lt;/code&gt; ファイルに追加することにより、この効果を実現します。</target>
        </trans-unit>
        <trans-unit id="ca6798fadac41315d6be90467029b23c51b0bdf9" translate="yes" xml:space="preserve">
          <source>You add &lt;em&gt;guards&lt;/em&gt; to the route configuration to handle these scenarios.</source>
          <target state="translated">これらのシナリオを処理するには、ルート構成に&lt;em&gt;ガード&lt;/em&gt;を追加します。</target>
        </trans-unit>
        <trans-unit id="8d6bbb540bb935e899c2208f09a1d394e5d0ac6c" translate="yes" xml:space="preserve">
          <source>You add context by beginning the &lt;code&gt;i18n&lt;/code&gt; attribute value with the &lt;em&gt;meaning&lt;/em&gt; and separating it from the &lt;em&gt;description&lt;/em&gt; with the &lt;code&gt;|&lt;/code&gt; character: &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt;</source>
          <target state="translated">コンテキストを追加するには、 &lt;code&gt;i18n&lt;/code&gt; 属性値を&lt;em&gt;意味で&lt;/em&gt;始め、 &lt;code&gt;|&lt;/code&gt; で&lt;em&gt;説明&lt;/em&gt;から分離します。文字： &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3430c566917b8b85e306dc99e17ab8c6aa42b22" translate="yes" xml:space="preserve">
          <source>You add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the list of &lt;code&gt;imports&lt;/code&gt; defined in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. This gives the application access to all of the template-driven forms features, including &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;デコレータで定義された &lt;code&gt;imports&lt;/code&gt; のリストに追加します。これにより、アプリケーションは &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を含むすべてのテンプレート駆動型フォーム機能にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="438bdad8fdf45e3082ebef8f1d0b53feb1474fc0" translate="yes" xml:space="preserve">
          <source>You add the hero into the &lt;code&gt;heroes&lt;/code&gt; array. The reference to the array hasn't changed. It's the same array. That's all Angular cares about. From its perspective, &lt;em&gt;same array, no change, no display update&lt;/em&gt;.</source>
          <target state="translated">ヒーローを &lt;code&gt;heroes&lt;/code&gt; 配列に追加します。配列への参照は変更されていません。同じ配列です。Angularが気にしているのはこれだけです。その観点から、&lt;em&gt;同じ配列、変更なし、表示更新なし&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7ca70762d285d9a3feb0f42adf3ad26cf94a9f1b" translate="yes" xml:space="preserve">
          <source>You added a &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard to the route in the &lt;code&gt;AdminModule&lt;/code&gt; a few steps back to block loading of that module until the user is authorized. That &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; guard takes precedence over the preload strategy.</source>
          <target state="translated">あなたは追加 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; の中でルートにガードを &lt;code&gt;AdminModule&lt;/code&gt; いくつかの手順は、ユーザが許可されるまで、そのモジュールのロードをブロックするためにバックします。その &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; のガードは、プリロード戦略よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="c7f1f5fee6b108edd5d8482048cf967be2ffe741" translate="yes" xml:space="preserve">
          <source>You added a &lt;code&gt;diagnostic&lt;/code&gt; property to return a JSON representation of the model. It'll help you see what you're doing during development; you've left yourself a cleanup note to discard it later.</source>
          <target state="translated">モデルのJSON表現を返す &lt;code&gt;diagnostic&lt;/code&gt; プロパティを追加しました。開発中に行っていることを確認するのに役立ちます。後で破棄するために片付けメモを残しました。</target>
        </trans-unit>
        <trans-unit id="6b2cd77924cadb7ab1174142cd5459f8db5909c1" translate="yes" xml:space="preserve">
          <source>You added a &lt;em&gt;Submit&lt;/em&gt; button at the bottom with some classes on it for styling.</source>
          <target state="translated">下部に[ &lt;em&gt;送信&lt;/em&gt; ]ボタンを追加して、スタイル設定のためにいくつかのクラスを追加しました。</target>
        </trans-unit>
        <trans-unit id="361569c7fe3d5fe1eec3f680494febf8867dddc2" translate="yes" xml:space="preserve">
          <source>You added a diagnostic interpolation after the input tag so you can see what you're doing. You left yourself a note to throw it away when you're done.</source>
          <target state="translated">入力タグの後に診断用の補間を追加して何をしているのかわかるようにしたんですね。終わったら捨てるようにメモを残していますね。</target>
        </trans-unit>
        <trans-unit id="cad9e1c57dbea9ac68e5f90137a78136490ac8aa" translate="yes" xml:space="preserve">
          <source>You added a header to tell the reader where to find the file by setting the &lt;code&gt;header&lt;/code&gt; attribute. Following convention, you set the &lt;code&gt;header&lt;/code&gt; attribute to the file's location within the sample's root folder.</source>
          <target state="translated">ヘッダーを追加して、 &lt;code&gt;header&lt;/code&gt; 属性を設定することにより、ファイルの場所をリーダーに指示しました。規則に従って、 &lt;code&gt;header&lt;/code&gt; 属性をサンプルのルートフォルダー内のファイルの場所に設定します。</target>
        </trans-unit>
        <trans-unit id="7797833099f6da73568d1a71b02ca4c623672629" translate="yes" xml:space="preserve">
          <source>You added the &lt;code&gt;id&lt;/code&gt; of the &lt;em&gt;Dragon Crisis&lt;/em&gt; as the second item in the array (&lt;code&gt;1&lt;/code&gt;).</source>
          <target state="translated">&lt;em&gt;Dragon Crisisの&lt;/em&gt; &lt;code&gt;id&lt;/code&gt; を配列の2番目の項目として追加しました（ &lt;code&gt;1&lt;/code&gt; ）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="70027f72129f3cc67318ed5489214e1c09ac777e" translate="yes" xml:space="preserve">
          <source>You added the Angular router to navigate among different components.</source>
          <target state="translated">異なるコンポーネント間をナビゲートするために Angular ルーターを追加しました。</target>
        </trans-unit>
        <trans-unit id="55e3767f013032dca85f37dcfbbb03f3c20ed728" translate="yes" xml:space="preserve">
          <source>You added the necessary dependencies to use HTTP in the app.</source>
          <target state="translated">アプリでHTTPを使用するために必要な依存関係を追加しました。</target>
        </trans-unit>
        <trans-unit id="b80bca51135e569f2275ee3e366cf402ec3c1fd9" translate="yes" xml:space="preserve">
          <source>You added two properties to the formerly empty component: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;myHero&lt;/code&gt;.</source>
          <target state="translated">以前は空だったコンポーネントに、 &lt;code&gt;title&lt;/code&gt; と &lt;code&gt;myHero&lt;/code&gt; という 2つのプロパティを追加しました。</target>
        </trans-unit>
        <trans-unit id="7546ffdac7d49a159cc2a7bfd8a978c1ac8ae6e9" translate="yes" xml:space="preserve">
          <source>You also added a button to the template and bound its click event to the component's &lt;code&gt;toggleFormat()&lt;/code&gt; method. That method toggles the component's &lt;code&gt;format&lt;/code&gt; property between a short form (&lt;code&gt;'shortDate'&lt;/code&gt;) and a longer form (&lt;code&gt;'fullDate'&lt;/code&gt;).</source>
          <target state="translated">また、テンプレートにボタンを追加し、そのクリックイベントをコンポーネントの &lt;code&gt;toggleFormat()&lt;/code&gt; メソッドにバインドしました。このメソッドは、コンポーネントの &lt;code&gt;format&lt;/code&gt; プロパティを短い形式（ &lt;code&gt;'shortDate'&lt;/code&gt; ）と長い形式（ &lt;code&gt;'fullDate'&lt;/code&gt; ）の間で切り替えます。</target>
        </trans-unit>
        <trans-unit id="2ce0e1b0da9f5a59dd44832d0898a715f4653bdb" translate="yes" xml:space="preserve">
          <source>You also can add a meaning, as shown in this example:</source>
          <target state="translated">また、この例のように意味をつけることもできます。</target>
        </trans-unit>
        <trans-unit id="15b2632ca3271e0f77756a23cb72af8d5bb04a25" translate="yes" xml:space="preserve">
          <source>You also can assign a meaning, description, and id with the &lt;code&gt;i18n-x=&quot;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;@@&amp;lt;id&amp;gt;&quot;&lt;/code&gt; syntax.</source>
          <target state="translated">&lt;code&gt;i18n-x=&quot;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;@@&amp;lt;id&amp;gt;&quot;&lt;/code&gt; 構文を使用して、意味、説明、IDを割り当てることもできます。</target>
        </trans-unit>
        <trans-unit id="10a98da0cae7c6adb8bd68337d54cdb31a63cea8" translate="yes" xml:space="preserve">
          <source>You also get this error if you call a function or method in a provider's &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このエラーは、プロバイダーの &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; で関数またはメソッドを呼び出した場合にも発生します。</target>
        </trans-unit>
        <trans-unit id="2089b8dae07d8e82ca84631e97bd1bbb16dd5f08" translate="yes" xml:space="preserve">
          <source>You also have a CSS style rule that happens to apply to a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; within a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;aragraph.</source>
          <target state="translated">また、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 段落内の &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; に適用されるCSSスタイルルールもあります。</target>
        </trans-unit>
        <trans-unit id="9b5c030003397159acdb465424b902cba7eb3348" translate="yes" xml:space="preserve">
          <source>You also import NgModules from Angular &lt;em&gt;libraries&lt;/em&gt; using JavaScript import statements. For example, the following code imports the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; NgModule from the &lt;code&gt;platform-browser&lt;/code&gt; library.</source>
          <target state="translated">また、JavaScriptインポートステートメントを使用してAngular &lt;em&gt;ライブラリ&lt;/em&gt;からNgModuleをインポートします。たとえば、次のコードは、 &lt;code&gt;platform-browser&lt;/code&gt; ライブラリから &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; NgModuleをインポートします。</target>
        </trans-unit>
        <trans-unit id="80df427e4dcb3187ce4d09900c34780b3fa685e0" translate="yes" xml:space="preserve">
          <source>You also need to install the &lt;code&gt;@angular/upgrade&lt;/code&gt; package via &lt;code&gt;npm install @angular/upgrade --save&lt;/code&gt; and add a mapping for the &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; package:</source>
          <target state="translated">&lt;code&gt;npm install @angular/upgrade --save&lt;/code&gt; を使用して &lt;code&gt;@angular/upgrade&lt;/code&gt; パッケージをインストールし、 &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; パッケージのマッピングを追加する必要もあります。</target>
        </trans-unit>
        <trans-unit id="29781a32c599c88be9b3977e94a9fdb2f316fc17" translate="yes" xml:space="preserve">
          <source>You also need to make a couple of adjustments to the &lt;code&gt;systemjs.config.js&lt;/code&gt; file installed during &lt;a href=&quot;upgrade-setup&quot;&gt;upgrade setup&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;upgrade-setup&quot;&gt;アップグレードのセットアップ&lt;/a&gt;中にインストールされる &lt;code&gt;systemjs.config.js&lt;/code&gt; ファイルにいくつかの調整を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="8555706e03df7109f8967d156364f0a6dc13a6a4" translate="yes" xml:space="preserve">
          <source>You also need to pass the generated &lt;code&gt;MainAngularModuleFactory&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; instead of the custom bootstrap function:</source>
          <target state="translated">また、カスタムブートストラップ関数の代わりに、生成された &lt;code&gt;MainAngularModuleFactory&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="ad188e1c952ebf71da0537e0d4585377e064e1f1" translate="yes" xml:space="preserve">
          <source>You always import the &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; symbol from the Angular core library and annotate the component class with &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコアライブラリから常に &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; シンボルをインポートし、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; コンポーネントクラスに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="ed9333b7537e83c795a95ae1a57e1fff6c4a74f8" translate="yes" xml:space="preserve">
          <source>You appear to be inserting the result between element tags and assigning it to attributes. However, interpolation is a special syntax that Angular converts into a &lt;em&gt;property binding&lt;/em&gt;.</source>
          <target state="translated">要素タグの間に結果を挿入し、それを属性に割り当てているようです。ただし、補間は、Angularが&lt;em&gt;プロパティバインディングに&lt;/em&gt;変換する特別な構文です。</target>
        </trans-unit>
        <trans-unit id="5a7e393cc3d71ada2d51725c68312b4ec17e75c0" translate="yes" xml:space="preserve">
          <source>You applied the &lt;code&gt;UppercasePipe&lt;/code&gt; to format the name.</source>
          <target state="translated">&lt;code&gt;UppercasePipe&lt;/code&gt; を適用して名前をフォーマットしました。</target>
        </trans-unit>
        <trans-unit id="f5ed36a67e5c64f7e17a2572545a399b3efa1ad5" translate="yes" xml:space="preserve">
          <source>You are about to break up the app into different &lt;em&gt;feature modules&lt;/em&gt;, each with its own concerns. Then you'll import into the main module and navigate among them.</source>
          <target state="translated">アプリをさまざまな&lt;em&gt;機能モジュール&lt;/em&gt;に分割しようとしてい&lt;em&gt;ますが&lt;/em&gt;、それぞれに独自の懸念があります。次に、メインモジュールにインポートし、それらの間を移動します。</target>
        </trans-unit>
        <trans-unit id="e2970b459e19dea069d0b7a89007485bb9215544" translate="yes" xml:space="preserve">
          <source>You are in effect saying, &lt;em&gt;when the user clicks this link, display the component associated with the &lt;code&gt;compose&lt;/code&gt; route in the &lt;code&gt;popup&lt;/code&gt; outlet&lt;/em&gt;.</source>
          <target state="translated">あなたは、言って有効になっている&lt;em&gt;ユーザーは、このリンクをクリックすると、関連付けられたコンポーネントを表示 &lt;code&gt;compose&lt;/code&gt; ルート &lt;code&gt;popup&lt;/code&gt; コンセントを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="102f041c09d56efa28154c4310d8010c538086e8" translate="yes" xml:space="preserve">
          <source>You are now an Angular developer! &lt;a href=&quot;https://twitter.com/intent/tweet?url=https://angular.io/start&amp;amp;text=I%20just%20finished%20the%20Angular%20Getting%20Started%20Tutorial&quot;&gt;Share this moment&lt;/a&gt;, tell us what you thought of this Getting Started, or submit &lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;suggestions for future editions&lt;/a&gt;.</source>
          <target state="translated">これでAngular開発者になりました！&lt;a href=&quot;https://twitter.com/intent/tweet?url=https://angular.io/start&amp;amp;text=I%20just%20finished%20the%20Angular%20Getting%20Started%20Tutorial&quot;&gt;この瞬間を共有し&lt;/a&gt;たり、この「はじめに」についての感想を伝えたり&lt;a href=&quot;https://github.com/angular/angular/issues/new/choose&quot;&gt;、将来のエディションの提案を&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="d491e7cb90554a81c9e013fa43d65daa0885c8cb" translate="yes" xml:space="preserve">
          <source>You are now running a pure Angular application!</source>
          <target state="translated">これで純粋なAngularアプリケーションを実行していることになります!</target>
        </trans-unit>
        <trans-unit id="7cdcb9196438a46fde40f714f28ea46a2eda0776" translate="yes" xml:space="preserve">
          <source>You begin by creating an initial application using the Angular CLI. Throughout this tutorial, you&amp;rsquo;ll modify and extend that starter application to create the Tour of Heroes app.</source>
          <target state="translated">まず、Angular CLIを使用して初期アプリケーションを作成します。このチュートリアルでは、そのスターターアプリケーションを変更および拡張して、Tour of Heroesアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="81c902f92fef1f4a20873ab5f68ce68a50ae4af5" translate="yes" xml:space="preserve">
          <source>You can &lt;em&gt;upgrade&lt;/em&gt; this component to Angular using the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; class. By creating a new Angular &lt;strong&gt;directive&lt;/strong&gt; that extends &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; and doing a &lt;code&gt;super&lt;/code&gt; call inside its constructor, you have a fully upgraded AngularJS component to be used inside Angular. All that is left is to add it to &lt;code&gt;AppModule&lt;/code&gt;'s &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; クラスを使用して、このコンポーネントをAngularに&lt;em&gt;アップグレード&lt;/em&gt;でき&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; を拡張する新しいAngular &lt;strong&gt;ディレクティブ&lt;/strong&gt;を作成し、そのコンストラクター内で &lt;code&gt;super&lt;/code&gt; 呼び出しを行うことにより、完全にアップグレードされたAngularJSコンポーネントがAngular内で使用されます。あとは、 &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;declarations&lt;/code&gt; 配列に追加するだけです。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20998ab36110d70249d73d4c59eba8c8f430ac99" translate="yes" xml:space="preserve">
          <source>You can achieve the same effect by putting the label between the &lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; tags:</source>
          <target state="translated">&lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; タグの間にラベルを置くことで同じ効果を得ることができます：</target>
        </trans-unit>
        <trans-unit id="a976e450ce6baa257a935451c00a03775ec464f6" translate="yes" xml:space="preserve">
          <source>You can add a &lt;code&gt;styles&lt;/code&gt; array property to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;デコレータに &lt;code&gt;styles&lt;/code&gt; 配列プロパティを追加できます。</target>
        </trans-unit>
        <trans-unit id="f8b236444d154157691e47dd5ec8758e169dd7b3" translate="yes" xml:space="preserve">
          <source>You can add a custom user ID to the global configuration, in order to identify unique usage of commands and flags. If that user enables CLI analytics for their own project, your analytics display tracks and labels their individual usage.</source>
          <target state="translated">コマンドやフラグの固有の使用法を識別するために、カスタムユーザーIDをグローバル設定に追加することができます。そのユーザーが自分のプロジェクトでCLI分析を有効にしている場合、分析表示はそのユーザーの個別の使用状況を追跡し、ラベルを付けます。</target>
        </trans-unit>
        <trans-unit id="c41d8625f722b6d12ab3d0d9d1fd15eab13e8f61" translate="yes" xml:space="preserve">
          <source>You can add a description of the text message as the value of the &lt;code&gt;i18n&lt;/code&gt; attribute, as shown in the example below:</source>
          <target state="translated">以下の例に示すように、テキストメッセージの説明を &lt;code&gt;i18n&lt;/code&gt; 属性の値として追加できます。</target>
        </trans-unit>
        <trans-unit id="3a548aa6072e8a5f389f60ba7255c8c982ed70fb" translate="yes" xml:space="preserve">
          <source>You can add a named schematic to your collection that lets your users use the &lt;code&gt;ng generate&lt;/code&gt; command to create an artifact that is defined in your library.</source>
          <target state="translated">名前付きの回路図をコレクションに追加すると、ユーザーは &lt;code&gt;ng generate&lt;/code&gt; コマンドを使用して、ライブラリで定義されたアーティファクトを作成できます。</target>
        </trans-unit>
        <trans-unit id="804aa402eea0a5f3636f449289ff3d8e1c5d5070" translate="yes" xml:space="preserve">
          <source>You can add a web worker anywhere in your application. If the file that contains your expensive computation is &lt;code&gt;src/app/app.component.ts&lt;/code&gt;, you can add a Web Worker using &lt;code&gt;ng generate web-worker app&lt;/code&gt;.</source>
          <target state="translated">アプリケーションの任意の場所にWebワーカーを追加できます。高価な計算を含むファイルが &lt;code&gt;src/app/app.component.ts&lt;/code&gt; の場合、 &lt;code&gt;ng generate web-worker app&lt;/code&gt; を使用してWebワーカーを追加できます。</target>
        </trans-unit>
        <trans-unit id="c35cf3736ef659ee5c6923017457205d7fff81b0" translate="yes" xml:space="preserve">
          <source>You can add additional configurations as required. To add a staging environment, create a copy of &lt;code&gt;src/environments/environment.ts&lt;/code&gt; called &lt;code&gt;src/environments/environment.staging.ts&lt;/code&gt;, then add a &lt;code&gt;staging&lt;/code&gt; configuration to &lt;code&gt;angular.json&lt;/code&gt;:</source>
          <target state="translated">必要に応じて構成を追加できます。ステージング環境を追加するには、 &lt;code&gt;src/environments/environment.ts&lt;/code&gt; と呼ばれる &lt;code&gt;src/environments/environment.staging.ts&lt;/code&gt; コピーを作成し、 &lt;code&gt;staging&lt;/code&gt; 構成を &lt;code&gt;angular.json&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="3d0cdd4cae89177221a5eb596d76443fb9dc5975" translate="yes" xml:space="preserve">
          <source>You can add heroes and Angular updates the display when you do. If you click the &lt;code&gt;reset&lt;/code&gt; button, Angular replaces &lt;code&gt;heroes&lt;/code&gt; with a new array of the original heroes and updates the display. If you added the ability to remove or change a hero, Angular would detect those changes and update the display as well.</source>
          <target state="translated">ヒーローを追加すると、Angularが表示を更新します。 &lt;code&gt;reset&lt;/code&gt; ボタンをクリックすると、Angularは &lt;code&gt;heroes&lt;/code&gt; を元のヒーローの新しい配列に置き換え、表示を更新します。ヒーローを削除または変更する機能を追加した場合、Angularはそれらの変更を検出し、表示も更新します。</target>
        </trans-unit>
        <trans-unit id="f9da851a0ebf29126cb8c0a95f65d2989eaf1228" translate="yes" xml:space="preserve">
          <source>You can add interceptors to the chain behind &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; by binding them to the multiprovider for built-in &lt;a href=&quot;../../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt;&lt;code&gt;&lt;a href=&quot;http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">組み込みの&lt;a href=&quot;../../../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; のマルチ &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; にバインドすることで、HttpClientの背後にあるチェーンにインターセプターを追加できます。</target>
        </trans-unit>
        <trans-unit id="4f0aadeba9307e5167e25a0728630eec62b5fc43" translate="yes" xml:space="preserve">
          <source>You can add many more outlets and routes, at the top level and in nested levels, creating a navigation tree with many branches. The router will generate the URL to go with it.</source>
          <target state="translated">トップレベルとネストされたレベルで、さらに多くのアウトレットとルートを追加して、多くのブランチを持つナビゲーションツリーを作成することができます。ルータはそれに付随するURLを生成します。</target>
        </trans-unit>
        <trans-unit id="2b46fe91e4d8999030b4a841fb198dd2c9bbb590" translate="yes" xml:space="preserve">
          <source>You can add more configuration options to this target environment as well. Any option that your build supports can be overridden in a build target configuration.</source>
          <target state="translated">このターゲット環境にも、より多くの設定オプションを追加することができます。ビルドがサポートしているオプションは、ビルドターゲットの設定で上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="624073ff88178c49ce6ac9f3f53dc62b5ef55ce0" translate="yes" xml:space="preserve">
          <source>You can add or remove an element from the DOM by applying an &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive to a host element. Bind the directive to a condition expression like &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ディレクティブをホスト要素に適用することで、DOMに要素を追加または削除できます。この例では、ディレクティブを &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#isActive&quot;&gt;isActive&lt;/a&gt;&lt;/code&gt; のような条件式にバインドします。</target>
        </trans-unit>
        <trans-unit id="dd9314d95d3d912f79fd878707764d9ea61a6b87" translate="yes" xml:space="preserve">
          <source>You can add or remove plural cases, with each language having its own cardinality. (See &lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html&quot;&gt;CLDR plural rules&lt;/a&gt;.)</source>
          <target state="translated">複数のケースを追加または削除できます。各言語には独自のカーディナリティがあります。（&lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html&quot;&gt;CLDR複数規則を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="3eb016549380e1871f3b0d3d837dfe5451882379" translate="yes" xml:space="preserve">
          <source>You can add target-specific configuration files, such as &lt;code&gt;environment.prod.ts&lt;/code&gt;. The following sets content sets default values for the production build target:</source>
          <target state="translated">&lt;code&gt;environment.prod.ts&lt;/code&gt; などのターゲット固有の構成ファイルを追加できます。次のセットコンテンツは、本番ビルドターゲットのデフォルト値を設定します。</target>
        </trans-unit>
        <trans-unit id="c9a1d641689d7ce9b785cf821dfd72080140b408" translate="yes" xml:space="preserve">
          <source>You can also add &lt;em&gt;optional&lt;/em&gt; information to a route request. For example, when returning to the hero-detail.component.ts list from the hero detail view, it would be nice if the viewed hero was preselected in the list.</source>
          <target state="translated">ルート要求に&lt;em&gt;オプションの&lt;/em&gt;情報を追加することもでき&lt;em&gt;ます&lt;/em&gt;。たとえば、ヒーロー詳細ビューからhero-detail.component.tsリストに戻る場合、表示されているヒーローがリストで事前に選択されていると便利です。</target>
        </trans-unit>
        <trans-unit id="5759614dda58e9a847b95f8209881d0ee2692b09" translate="yes" xml:space="preserve">
          <source>You can also add a &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method in the &lt;code&gt;GreetingModule&lt;/code&gt; that configures the greeting &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">また、挨拶 &lt;code&gt;UserService&lt;/code&gt; を構成する &lt;code&gt;GreetingModule&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="5a526b25408266d3968827df1221d6347e7f6b85" translate="yes" xml:space="preserve">
          <source>You can also add append a class to an element without overwriting the classes already on the element:</source>
          <target state="translated">また、要素に既にあるクラスを上書きすることなく、要素にクラスを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="0eb6f621b2e971f7bf9abb6ff993457b4191a15a" translate="yes" xml:space="preserve">
          <source>You can also apply an &lt;code&gt;NgFor&lt;/code&gt; to a component element, as in the following example.</source>
          <target state="translated">次の例のように、コンポーネント要素に &lt;code&gt;NgFor&lt;/code&gt; を適用することもできます。</target>
        </trans-unit>
        <trans-unit id="0bed0049739f1e932b1f46657a5c193451b2bba9" translate="yes" xml:space="preserve">
          <source>You can also configure the &lt;code&gt;serve&lt;/code&gt; command to use the targeted build configuration if you add it to the &quot;serve:configurations&quot; section of &lt;code&gt;angular.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; の &quot;serve：configurations&quot;セクションに追加する場合、対象のビルド構成を使用するように &lt;code&gt;serve&lt;/code&gt; コマンドを構成することもできます。</target>
        </trans-unit>
        <trans-unit id="e55eaa66fa3c788b5a42077334a80ec5aa552608" translate="yes" xml:space="preserve">
          <source>You can also create HTTP parameters directly from a query string by using the &lt;code&gt;fromString&lt;/code&gt; variable:</source>
          <target state="translated">&lt;code&gt;fromString&lt;/code&gt; 変数を使用して、クエリ文字列から直接HTTPパラメータを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="cb31cb6aa4a816fa40c42f7a6a8064d99b7ca9e3" translate="yes" xml:space="preserve">
          <source>You can also define a custom builder, and add a target to the project configuration that uses your custom builder. You can then run the target using the &lt;a href=&quot;cli/run&quot;&gt;&lt;code&gt;ng run&lt;/code&gt;&lt;/a&gt; CLI command.</source>
          <target state="translated">カスタムビルダーを定義し、カスタムビルダーを使用するプロジェクト構成にターゲットを追加することもできます。その後、&lt;a href=&quot;cli/run&quot;&gt; &lt;code&gt;ng run&lt;/code&gt; &lt;/a&gt; CLIコマンドを使用してターゲットを実行できます。</target>
        </trans-unit>
        <trans-unit id="8ef2b8d18e1c53c75e1aec40dd395cf2864bc75c" translate="yes" xml:space="preserve">
          <source>You can also do this in AngularJS, using &lt;em&gt;component directives&lt;/em&gt;. These are directives that define their own templates, controllers, and input/output bindings - the same things that Angular components define. Applications built with component directives are much easier to migrate to Angular than applications built with lower-level features like &lt;code&gt;ng-controller&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt;, and scope inheritance.</source>
          <target state="translated">&lt;em&gt;コンポーネントディレクティブ&lt;/em&gt;を使用して、AngularJSでこれを行うこともでき&lt;em&gt;ます&lt;/em&gt;。これらは、独自のテンプレート、コントローラー、および入出力バインディングを定義するディレクティブです。Angularコンポーネントが定義するものと同じです。コンポーネントディレクティブを使用して構築されたアプリケーションは、 &lt;code&gt;ng-controller&lt;/code&gt; 、 &lt;code&gt;ng-include&lt;/code&gt; 、スコープの継承などの下位レベルの機能を使用して構築されたアプリケーションよりも、Angularへの移行がはるかに簡単です。</target>
        </trans-unit>
        <trans-unit id="d59f82a05714d92030f73af63da0c791cf2c2cc9" translate="yes" xml:space="preserve">
          <source>You can also experience and download the .</source>
          <target state="translated">体験してダウンロードすることもできます。</target>
        </trans-unit>
        <trans-unit id="4aef1bbcbbd5075a517ac29931b7d7add135f643" translate="yes" xml:space="preserve">
          <source>You can also find the most current version of Angular by using the CLI command &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt;. By default, &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt;(without additional arguments) lists the updates that are available to you.</source>
          <target state="translated">また、CLIコマンド&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;を使用して、Angularの最新バージョンを見つけることもできます。デフォルトでは、&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;（追加の引数なし）は、利用可能な更新をリストします。</target>
        </trans-unit>
        <trans-unit id="40bc080f90a040b1296b66e89d909d307d95b9c2" translate="yes" xml:space="preserve">
          <source>You can also import CSS files into the CSS files using the standard CSS &lt;code&gt;@import&lt;/code&gt; rule. For details, see &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/@import&quot;&gt;&lt;code&gt;@import&lt;/code&gt;&lt;/a&gt; on the &lt;a href=&quot;https://developer.mozilla.org&quot;&gt;MDN&lt;/a&gt; site.</source>
          <target state="translated">標準のCSS &lt;code&gt;@import&lt;/code&gt; ルールを使用して、CSSファイルをCSSファイルにインポートすることもできます。詳細については、&lt;a href=&quot;https://developer.mozilla.org&quot;&gt;MDN&lt;/a&gt;サイトの&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/@import&quot;&gt; &lt;code&gt;@import&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ad1215013608ffc7cdc8d41f51b20172f6860bd3" translate="yes" xml:space="preserve">
          <source>You can also invoke a builder directly from another builder or test by calling &lt;code&gt;BuilderContext.scheduleBuilder()&lt;/code&gt;. You pass an &lt;code&gt;options&lt;/code&gt; object directly to the method, and those option values are validated against the schema of the builder without further adjustment.</source>
          <target state="translated">&lt;code&gt;BuilderContext.scheduleBuilder()&lt;/code&gt; を呼び出して、別のビルダーまたはテストからビルダーを直接呼び出すこともできます。 &lt;code&gt;options&lt;/code&gt; オブジェクトをメソッドに直接渡すと、それらのオプション値は、さらに調整することなく、ビルダーのスキーマに対して検証されます。</target>
        </trans-unit>
        <trans-unit id="a5e5de366b60dd156e8eee1160484d4e7c3e8972" translate="yes" xml:space="preserve">
          <source>You can also make Angular services available for injection to AngularJS code by &lt;em&gt;downgrading&lt;/em&gt; them. Only services from the Angular root injector can be downgraded. Again, the same singleton instances are shared between the frameworks. When you register a downgraded service, you must explicitly specify a &lt;em&gt;string token&lt;/em&gt; that you want to use in AngularJS.</source>
          <target state="translated">また、Angularサービスを&lt;em&gt;ダウングレード&lt;/em&gt;して、AngularJSコードへのインジェクションに利用できるようにすることもできます。ダウングレードできるのは、Angularルートインジェクターからのサービスのみです。この場合も、同じシングルトンインスタンスがフレームワーク間で共有されます。ダウングレードされたサービスを登録するときは、AngularJSで使用する&lt;em&gt;文字列トークン&lt;/em&gt;を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="0c5cfeb0e0b76ee9743bba9a4035c4a07642e5c5" translate="yes" xml:space="preserve">
          <source>You can also nest different ICU expressions together, as shown in this example:</source>
          <target state="translated">また、この例に示すように、異なる ICU 式を一緒に入れ子にすることもできます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
