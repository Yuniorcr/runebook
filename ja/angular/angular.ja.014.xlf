<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="550828cc689d902dc2704d305cf15fafb615c2b6" translate="yes">
          <source>There are two more injectors above &lt;code&gt;root&lt;/code&gt;, an additional &lt;code&gt;ModuleInjector&lt;/code&gt; and &lt;code&gt;NullInjector()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;root&lt;/code&gt; 上にさらに2つのインジェクター、追加の &lt;code&gt;ModuleInjector&lt;/code&gt; および &lt;code&gt;NullInjector()&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ec82505f597f4541fee947d1b90b7670a8bfe1fc" translate="yes">
          <source>There are two other kinds of Angular directives, described extensively elsewhere: (1) components and (2) attribute directives.</source>
          <target state="translated">他の2つの種類のAngularディレクティブがあり、他の場所で詳しく説明されています：（1）コンポーネントと（2）属性ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="eee5ab865a86fd0b73b19b491d8642111214cd0d" translate="yes">
          <source>There are two possible degraded states:</source>
          <target state="translated">次の2つの劣化状態が考えられます。</target>
        </trans-unit>
        <trans-unit id="25650f34b85cc033bcf18133335c7c20ab26b348" translate="yes">
          <source>There are two types of validator functions: sync validators and async validators.</source>
          <target state="translated">バリデータ関数には、同期バリデータと非同期バリデータの2種類があります。</target>
        </trans-unit>
        <trans-unit id="3f8e7458d2bd37a51a02a94b62cdecdc59f8af4c" translate="yes">
          <source>There are two ways to make a service a singleton in Angular:</source>
          <target state="translated">Angularでサービスをシングルトンにする方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="faa6ad5446f7861f6ecf46da71ea515c5fb5f071" translate="yes">
          <source>There are two ways to update the model value:</source>
          <target state="translated">モデル値を更新するには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="f26b5471a1dd6edb128afdf26847e8bb73608215" translate="yes">
          <source>There are usually one or more main sections that may be further divided into secondary sections.</source>
          <target state="translated">通常、1つ以上のメインセクションがあり、これらはさらに2次セクションに分割できます。</target>
        </trans-unit>
        <trans-unit id="ca00ae37aaf723dcf8b96d9e5fe70f20f93c9cc4" translate="yes">
          <source>There is a &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;tree hierarchy of injectors&lt;/a&gt;, with a root injector and an additional injector for each component.</source>
          <target state="translated">&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;インジェクターのツリー階層&lt;/a&gt;があり、ルートインジェクターと各コンポーネントの追加のインジェクターがあります。</target>
        </trans-unit>
        <trans-unit id="027fb989b8678c3235e885de0c12df209840f1d8" translate="yes">
          <source>There is a rule for each defined day period. The first rule is applied to the first day period and so on. Fall back to AM/PM when no rules are available.</source>
          <target state="translated">定義された日ごとにルールがあります。 最初のルールは、最初の日の期間などに適用されます。 利用可能なルールがない場合は、AM / PMにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="7654c24d9c7b87cc2fb7d574ad4e33ff2eb6cd63" translate="yes">
          <source>There is a small but critical difference. In the &lt;code&gt;AppRoutingModule&lt;/code&gt;, you used the static &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; method to register the routes and application level service providers. In a feature module you use the static &lt;strong&gt;&lt;code&gt;forChild&lt;/code&gt;&lt;/strong&gt; method.</source>
          <target state="translated">小さいながらも重大な違いがあります。 &lt;code&gt;AppRoutingModule&lt;/code&gt; では、静的な&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;メソッドを使用して、ルートとアプリケーションレベルのサービスプロバイダーを登録しました。 機能モジュールでは、静的&lt;strong&gt; &lt;code&gt;forChild&lt;/code&gt; &lt;/strong&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="1089bb549e548f1eece3447abc86312a541125a5" translate="yes">
          <source>There is an API for navigating &lt;em&gt;down&lt;/em&gt; the view hierarchy. Check out &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; in the &lt;a href=&quot;../api/index&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">ビュー階層を&lt;em&gt;下&lt;/em&gt;にナビゲート&lt;em&gt;する&lt;/em&gt;ためのAPIがあります。 &lt;a href=&quot;../api/index&quot;&gt;APIリファレンスの&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;../api/core/query&quot;&gt;Query&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/querylist&quot;&gt;QueryList&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/viewchildren&quot;&gt;ViewChildren&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/core/contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; を確認してください。</target>
        </trans-unit>
        <trans-unit id="bf10db6389feae71b1aa42ec8c45a030a861e2e0" translate="yes">
          <source>There is an important distinction between using another module's component and using a service from another module. Import modules when you want to use directives, pipes, and components. Importing a module with services means that you will have a new instance of that service, which typically is not what you need (typically one wants to reuse an existing service). Use module imports to control service instantiation.</source>
          <target state="translated">別のモジュールのコンポーネントの使用と別のモジュールのサービスの使用には重要な違いがあります。 ディレクティブ、パイプ、およびコンポーネントを使用するときにモジュールをインポートします。 サービスを含むモジュールをインポートすると、そのサービスの新しいインスタンスが作成されますが、通常は必要なものではありません（通常は既存のサービスを再利用したい）。 モジュールのインポートを使用して、サービスのインスタンス化を制御します。</target>
        </trans-unit>
        <trans-unit id="cceabdb690dfa8a94f69d03b06952860cf555cc4" translate="yes">
          <source>There is exactly one injector. Even in multi-module applications, everything is poured into one big namespace.</source>
          <target state="translated">インジェクターは1つだけです。 マルチモジュールアプリケーションでも、すべてが1つの大きな名前空間に注がれます。</target>
        </trans-unit>
        <trans-unit id="8b6ca3d80875d293406dd0f142004f9fede44d55" translate="yes">
          <source>There is no &lt;em&gt;live example&lt;/em&gt; for this cookbook because it describes Visual Studio, not the Angular application itself. It uses the starter Angular application created by the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; as an example.</source>
          <target state="translated">このクックブックには、Angularアプリケーション自体ではなく、Visual Studioが記述されているため、 &lt;em&gt;実例&lt;/em&gt;はありません。 CLIコマンド&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;によって作成されたスターターAngularアプリケーションを例として使用します。</target>
        </trans-unit>
        <trans-unit id="133a9567390a248ff96c3ddfeb770bd616eadd71" translate="yes">
          <source>There is no default for the child route so you need to pick one.</source>
          <target state="translated">子ルートにはデフォルトがないため、いずれかを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="c9bb67cef244a52a5902839951c12ad9006e5375" translate="yes">
          <source>There is no issue when the user navigates to that URL from within a running client. The Angular router interprets the URL and routes to that page and hero.</source>
          <target state="translated">ユーザーが実行中のクライアント内からそのURLに移動しても問題はありません。 AngularルーターはURLを解釈し、そのページとヒーローにルーティングします。</target>
        </trans-unit>
        <trans-unit id="565fc140f826820d99228d067e03328fac73f380" translate="yes">
          <source>There is no longer a reference to &lt;code&gt;template&lt;/code&gt; and, therefore, nothing to trouble the compiler when it later interprets the &lt;em&gt;collector's&lt;/em&gt; output in &lt;code&gt;.metadata.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; への参照は存在しないため、後で &lt;code&gt;.metadata.json&lt;/code&gt; の &lt;em&gt;コレクターの&lt;/em&gt;出力を解釈するときにコンパイラーを悩ますことはありません 。</target>
        </trans-unit>
        <trans-unit id="4e748fc4f70bcf252a46a3d8e24d8e97b2bd9b8c" translate="yes">
          <source>There is no public API for acquiring a parent reference. However, because every component instance is added to an injector's container, you can use Angular dependency injection to reach a parent component.</source>
          <target state="translated">親参照を取得するためのパブリックAPIはありません。 ただし、すべてのコンポーネントインスタンスがインジェクターのコンテナーに追加されるため、Angular依存性注入を使用して親コンポーネントに到達できます。</target>
        </trans-unit>
        <trans-unit id="9e1f226d0769c2006bed4876b7fe7a774057642d" translate="yes">
          <source>There is no single configuration that works for every server. The following sections describe configurations for some of the most popular servers. The list is by no means exhaustive, but should provide you with a good starting point.</source>
          <target state="translated">すべてのサーバーで機能する単一の構成はありません。 以下のセクションでは、最も一般的なサーバーのいくつかの構成について説明します。 リストは決して完全ではありませんが、良い出発点を提供するはずです。</target>
        </trans-unit>
        <trans-unit id="259bb0afbd8fefe05bdc556bd5eef64a565fd518" translate="yes">
          <source>There is no specific API for upgrading an AngularJS service. Instead you should just follow the following recipe:</source>
          <target state="translated">AngularJSサービスをアップグレードするための特定のAPIはありません。 代わりに、次のレシピに従う必要があります。</target>
        </trans-unit>
        <trans-unit id="550621addec4fd2e0708772894f55350f2a0f79c" translate="yes">
          <source>There is no upgrade method to convert filters into pipes. You won't miss it. It's easy to turn the filter function into an equivalent Pipe class. The implementation is the same as before, repackaged in the &lt;code&gt;transform&lt;/code&gt; method. Rename the file to &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; to conform with Angular conventions:</source>
          <target state="translated">フィルターをパイプに変換するアップグレード方法はありません。 お見逃しなく。 フィルター関数を同等のPipeクラスに簡単に変更できます。 実装は以前と同じで、 &lt;code&gt;transform&lt;/code&gt; メソッドに再パッケージ化されています。 ファイルの名前を &lt;code&gt;checkmark.pipe.ts&lt;/code&gt; に変更して、Angular規則に準拠します。</target>
        </trans-unit>
        <trans-unit id="4367e8254fa20fae31dcd949ca18914ce55ee3c5" translate="yes">
          <source>There is one exception to this behavior that applies to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;trackBy&lt;/code&gt; functionality that can deal with referential inequality of objects when iterating over them. See &lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;*ngFor with &lt;code&gt;trackBy&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 適用されるこの動作には1つの例外があります。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は、オブジェクトを反復処理するときにオブジェクトの参照不等式を処理できる &lt;code&gt;trackBy&lt;/code&gt; 機能があります。 詳細については&lt;a href=&quot;template-syntax#ngfor-with-trackby&quot;&gt;、 &lt;code&gt;trackBy&lt;/code&gt; &lt;/a&gt;での* ngForを参照してください。</target>
        </trans-unit>
        <trans-unit id="7dd62d5ae3789ef38b487eab0e8d1f7f87b82b99" translate="yes">
          <source>There is one exception to this rule. Attributes can be changed by &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt;, which re-initializes corresponding DOM properties.</source>
          <target state="translated">この規則には1つの例外があります。 属性は、対応するDOMプロパティを再初期化する &lt;code&gt;&lt;a href=&quot;template-syntax&quot;&gt;setAttribute()&lt;/a&gt;&lt;/code&gt; によって変更できます。</target>
        </trans-unit>
        <trans-unit id="d33886b39df983b142ac0e4c678d0df8e24d2439" translate="yes">
          <source>There is one exception to this rule: to make local development easier, browsers do &lt;em&gt;not&lt;/em&gt; require a secure connection when accessing an app on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">このルールには1つの例外があります。ローカル開発を容易にするために、ブラウザーは &lt;code&gt;localhost&lt;/code&gt; のアプリにアクセスするときに安全な接続を必要とし&lt;em&gt;ません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="56ed5ae7d3569c2686c1ede9ce1a1546720090e8" translate="yes">
          <source>There is only one root injector for an app. Providing &lt;code&gt;UserService&lt;/code&gt; at the &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;AppModule&lt;/code&gt; level means it is registered with the root injector. There is just one &lt;code&gt;UserService&lt;/code&gt; instance in the entire app and every class that injects &lt;code&gt;UserService&lt;/code&gt; gets this service instance &lt;em&gt;unless&lt;/em&gt; you configure another provider with a &lt;em&gt;child injector&lt;/em&gt;.</source>
          <target state="translated">アプリに対してルートインジェクターは1つだけです。 &lt;code&gt;root&lt;/code&gt; または &lt;code&gt;AppModule&lt;/code&gt; レベルで &lt;code&gt;UserService&lt;/code&gt; を提供することは、ルートインジェクターに登録されることを意味します。 アプリ全体に &lt;code&gt;UserService&lt;/code&gt; インスタンスは1つだけあり、 &lt;code&gt;UserService&lt;/code&gt; を注入するすべてのクラスは、 &lt;em&gt;子インジェクターで&lt;/em&gt;別のプロバイダーを構成し&lt;em&gt;ない限り、&lt;/em&gt;このサービスインスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="aa0f46f07be6d7bd145a95e639f76d57f093602d" translate="yes">
          <source>There isn't anything the client application can do about these errors. The server must be configured to accept the application's requests. Read about how to enable CORS for specific servers at &lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org&lt;/a&gt;.</source>
          <target state="translated">クライアントアプリケーションがこれらのエラーについてできることは何もありません。 サーバーは、アプリケーションの要求を受け入れるように構成する必要があります。 &lt;a href=&quot;http://enable-cors.org/server.html&quot;&gt;enable-cors.org&lt;/a&gt;で特定のサーバーのCORSを有効にする方法についてお読みください。</target>
        </trans-unit>
        <trans-unit id="bd29a80577a16149f809aa709e10802120f26a64" translate="yes">
          <source>There will be one additional argument to the &lt;code&gt;transform&lt;/code&gt; method for each parameter passed to the pipe. Your pipe has one such parameter: the &lt;code&gt;exponent&lt;/code&gt;.</source>
          <target state="translated">パイプに渡されるパラメーターごとに、 &lt;code&gt;transform&lt;/code&gt; メソッドへの追加の引数が1つあります。 パイプには、そのようなパラメーターが1つあります： &lt;code&gt;exponent&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7cc5eb405460e77c124b415c5ccacffdb138ea7a" translate="yes">
          <source>There&amp;rsquo;s nothing special about this component, nothing form-specific, nothing to distinguish it from any component you've written before.</source>
          <target state="translated">このコンポーネントには特別なものはなく、フォーム固有のものも、以前に作成したコンポーネントと区別するものもありません。</target>
        </trans-unit>
        <trans-unit id="542467bb8ed2c1b3891b718134b4968a6fc9a566" translate="yes">
          <source>There's a good reason for this circuitous path to the element.</source>
          <target state="translated">この要素への遠回りの道には十分な理由があります。</target>
        </trans-unit>
        <trans-unit id="508e59adf4df546f2bbce6e533bf9e238970539b" translate="yes">
          <source>There's a similar helper for producing an async error.</source>
          <target state="translated">非同期エラーを生成するための同様のヘルパーがあります。</target>
        </trans-unit>
        <trans-unit id="84cc470613727d84aabbfa2c1862c5ad36fcaf45" translate="yes">
          <source>There's also the &lt;code&gt;bind-&lt;/code&gt; prefix alternative:</source>
          <target state="translated">&lt;code&gt;bind-&lt;/code&gt; prefixの代替もあります：</target>
        </trans-unit>
        <trans-unit id="0909bf3d1ff44badd0511d8a77fa43424485ad25" translate="yes">
          <source>There's an easier way: bind to Angular's &lt;code&gt;keyup.enter&lt;/code&gt; pseudo-event. Then Angular calls the event handler only when the user presses &lt;em&gt;Enter&lt;/em&gt;.</source>
          <target state="translated">より簡単な方法があります：Angularの &lt;code&gt;keyup.enter&lt;/code&gt; 疑似イベントにバインドします。 次に、Angularは、ユーザーが&lt;em&gt;Enterを&lt;/em&gt;押したときにのみイベントハンドラーを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ab30027be9f11ddbb2b70f4586d177e63c2b9249" translate="yes">
          <source>There's another school of testing that never calls &lt;code&gt;beforeEach()&lt;/code&gt; and prefers to create classes explicitly rather than use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; を決して呼び出さず 、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を使用するよりも明示的にクラスを作成することを好む別のテストスクールがあります。</target>
        </trans-unit>
        <trans-unit id="ea61c19309ff72246ea3a2984fbfffe7d47f7033" translate="yes">
          <source>There's another way to get the user data: use Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;template reference variables&lt;/strong&gt;&lt;/a&gt;. These variables provide direct access to an element from within the template. To declare a template reference variable, precede an identifier with a hash (or pound) character (#).</source>
          <target state="translated">ユーザーデータを取得する別の方法があります。Angular &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;&lt;strong&gt;テンプレート参照変数を&lt;/strong&gt;&lt;/a&gt;使用し&lt;strong&gt;ます&lt;/strong&gt; 。 これらの変数は、テンプレート内から要素への直接アクセスを提供します。 テンプレート参照変数を宣言するには、識別子の前にハッシュ（またはポンド）文字（＃）を付けます。</target>
        </trans-unit>
        <trans-unit id="649efc388a11470109bc9e7158e40958a6267aea" translate="yes">
          <source>There's no harm in calling &lt;code&gt;compileComponents()&lt;/code&gt; when it's not required.</source>
          <target state="translated">必要のない &lt;code&gt;compileComponents()&lt;/code&gt; を呼び出しても害はありません。</target>
        </trans-unit>
        <trans-unit id="d18f6add8e2e8495aacfbde5fe0813a6561d85a2" translate="yes">
          <source>There's no need to declare or import anything else. The default test module is pre-configured with something like the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">他のものを宣言したりインポートしたりする必要はありません。 デフォルトのテストモジュールは、 &lt;code&gt;@angular/platform-browser&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; のようなもので事前設定されています。</target>
        </trans-unit>
        <trans-unit id="9485387892c4a4b5f9d2bd3163e6e9e7f2a2b699" translate="yes">
          <source>There's no need to list a component in both the &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;entryComponents&lt;/code&gt; lists, although doing so is harmless.</source>
          <target state="translated">&lt;code&gt;bootstrap&lt;/code&gt; リストと &lt;code&gt;entryComponents&lt;/code&gt; リストの両方にコンポーネントをリストする必要はありませんが、そうすることは無害です。</target>
        </trans-unit>
        <trans-unit id="c90aada73387116e19e933942a34d908ca737c3b" translate="yes">
          <source>There's often a &lt;em&gt;root&lt;/em&gt; element that can and should host the structural directive. The list element (&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) is a typical host element of an &lt;code&gt;NgFor&lt;/code&gt; repeater.</source>
          <target state="translated">多くの場合、構造ディレクティブをホストできる、またはホストする必要がある&lt;em&gt;ルート&lt;/em&gt;要素があります。 リスト要素（ &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; ）は、 &lt;code&gt;NgFor&lt;/code&gt; リピーターの典型的なホスト要素です。</target>
        </trans-unit>
        <trans-unit id="ca6a4c5f2988457896869f467e895a0eeb19531f" translate="yes">
          <source>There's one notable exception to the rule of using Angular attribute syntax for downgraded components. It has to do with input or output names that consist of multiple words. In Angular, you would bind these attributes using camelCase:</source>
          <target state="translated">ダウングレードされたコンポーネントにAngular属性構文を使用するルールには、1つの注目すべき例外があります。 複数の単語で構成される入力名または出力名に関係しています。 Angularでは、camelCaseを使用してこれらの属性をバインドします。</target>
        </trans-unit>
        <trans-unit id="6cf332e6a1ddffd2a30959312ecbc288187e50d8" translate="yes">
          <source>There's really nothing for the component to do with the &lt;code&gt;Observable&lt;/code&gt; returned by &lt;code&gt;heroService.delete()&lt;/code&gt;&lt;strong&gt;but it must subscribe anyway&lt;/strong&gt;.</source>
          <target state="translated">コンポーネントが &lt;code&gt;heroService.delete()&lt;/code&gt; によって返された &lt;code&gt;Observable&lt;/code&gt; と実際には関係ありませんが、 &lt;strong&gt;とにかくサブスクライブする必要があります&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="2e367708179b8c6b769aeb5784a73ff30d8bb02d" translate="yes">
          <source>There's the hero again, displayed read-only with interpolation bindings. This &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; appears only while the component is in the submitted state.</source>
          <target state="translated">ヒーローが再び登場し、補間バインディングで読み取り専用で表示されます。 この &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、コンポーネントが送信済み状態の場合にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="a7f47f5fef07e1400c8770e346e27dd983d3210c" translate="yes">
          <source>These Angular docs help you learn and use the Angular platform and framework, from your first app to optimizing complex enterprise apps. Tutorials and guides include downloadable example to accelerate your projects.</source>
          <target state="translated">これらのAngularドキュメントは、最初のアプリから複雑なエンタープライズアプリの最適化まで、Angularプラットフォームとフレームワークの学習と使用に役立ちます。 チュートリアルとガイドには、プロジェクトを高速化するためのダウンロード可能なサンプルが含まれています。</target>
        </trans-unit>
        <trans-unit id="9c8f4170de94e38e103661daa9cd09d22d382f76" translate="yes">
          <source>These are all features you'll want to test.</source>
          <target state="translated">これらはすべて、テストする機能です。</target>
        </trans-unit>
        <trans-unit id="19fa4dd3c3af8618e37296f1894ca8c3663deadc" translate="yes">
          <source>These are short, simple functions that you can write yourself. Unfortunately, they're too simple for many common scenarios. An observable often emits multiple times, perhaps after a significant delay. A component may coordinate multiple observables with overlapping sequences of values and errors.</source>
          <target state="translated">これらは、自分で記述できる短い単純な関数です。 残念ながら、それらは多くの一般的なシナリオには単純すぎます。 オブザーバブルは、多くの場合、おそらく大幅な遅延の後、複数回放出します。 コンポーネントは、値とエラーのシーケンスが重複する複数のオブザーバブルを調整できます。</target>
        </trans-unit>
        <trans-unit id="15a8bdbc2d27676173c0870bb9d476a44f9c0ec8" translate="yes">
          <source>These are techniques for &lt;em&gt;Shallow Component Testing&lt;/em&gt; , so-named because they reduce the visual surface of the component to just those elements in the component's template that matter for tests.</source>
          <target state="translated">これらは、コンポーネントの視覚的な表面を、テストに関係するコンポーネントのテンプレート内の要素のみに縮小するため、いわゆる&lt;em&gt;シャローコンポーネントテストの&lt;/em&gt;手法です。</target>
        </trans-unit>
        <trans-unit id="874d82075cf5a1fb8e894c6a1831e2a99c4f9cf5" translate="yes">
          <source>These are tests of the pipe &lt;em&gt;in isolation&lt;/em&gt;. They can't tell if the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; is working properly as applied in the application components.</source>
          <target state="translated">これらは&lt;em&gt;、単独&lt;/em&gt;でのパイプのテストです。 彼らは、 &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; がアプリケーションコンポーネントに適用されているように適切に機能しているかどうかを判断できません。</target>
        </trans-unit>
        <trans-unit id="7aa6e184a2127bbab023de5210efd3d94de5eaf2" translate="yes">
          <source>These are the polyfills required to run an Angular application on each supported browser:</source>
          <target state="translated">サポートされている各ブラウザでAngularアプリケーションを実行するために必要なポリフィルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d6422d60e6eed75caf6b039379d70a9d2b91599f" translate="yes">
          <source>These buttons work, because the CLI automatically added the routes to the feature modules to the &lt;code&gt;routes&lt;/code&gt; array in &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">CLIは &lt;code&gt;app.module.ts&lt;/code&gt; の &lt;code&gt;routes&lt;/code&gt; 配列に機能モジュールへのルートを自動的に追加するため、これらのボタンは機能します。</target>
        </trans-unit>
        <trans-unit id="4fadb046a4f69a8a29a6dfda895733f7808fc510" translate="yes">
          <source>These complications argue for &lt;em&gt;avoiding component inheritance&lt;/em&gt;.</source>
          <target state="translated">これらの合併症は、 &lt;em&gt;コンポーネントの継承&lt;/em&gt;を&lt;em&gt;回避&lt;/em&gt;すること&lt;em&gt;を&lt;/em&gt;主張し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cd97d4aaaa391802aacd2112d378fb5a981f75d" translate="yes">
          <source>These declared classes are visible within the module but invisible to components in a different module unless they are exported from this module and the other module imports this one.</source>
          <target state="translated">これらの宣言されたクラスはモジュール内で表示されますが、このモジュールからエクスポートされ、他のモジュールがこのモジュールをインポートしない限り、別のモジュールのコンポーネントからは見えません。</target>
        </trans-unit>
        <trans-unit id="e0813bed7ed16b4e0b736f3f56fccf8998f10650" translate="yes">
          <source>These decorators can be used individually or together, as shown in the example. This &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; is a revision of &lt;code&gt;HeroBiosComponent&lt;/code&gt; which you looked at &lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">例に示すように、これらのデコレータは個別に使用することも、一緒に使用することもできます。 この &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; は、 &lt;a href=&quot;dependency-injection-in-action#hero-bios-component&quot;&gt;上で&lt;/a&gt;見た &lt;code&gt;HeroBiosComponent&lt;/code&gt; の改訂版です。</target>
        </trans-unit>
        <trans-unit id="e87f8d2277a30ddb602eb3ef7903e879dae9750f" translate="yes">
          <source>These differences argue for a re-usable stub class.</source>
          <target state="translated">これらの違いは、再利用可能なスタブクラスを主張します。</target>
        </trans-unit>
        <trans-unit id="332167a123f1d6b741515c29ca0f4c696c2a51c9" translate="yes">
          <source>These docs assume that you are already familiar with HTML, CSS, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt;, and some of the tools from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;latest standards&lt;/a&gt;, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;modules&lt;/a&gt;. The code samples are written using &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;. Most Angular code can be written with just the latest JavaScript, using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;types&lt;/a&gt; for dependency injection, and using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;decorators&lt;/a&gt; for metadata.</source>
          <target state="translated">これらのドキュメントでは、HTML、CSS、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;JavaScript&lt;/a&gt; 、および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;クラス&lt;/a&gt;や&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;モジュール&lt;/a&gt;などの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;最新標準の&lt;/a&gt;ツールの一部に既に精通していることを前提としています 。 コードサンプルは&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;を使用して記述されています。 ほとんどのAngularコードは、依存性注入に&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;型&lt;/a&gt;を使用し、メタデータに&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;デコレータ&lt;/a&gt;を使用して、最新のJavaScriptだけで作成できます。</target>
        </trans-unit>
        <trans-unit id="c0248cf761a672df747afacece78839e13096947" translate="yes">
          <source>These events are logged to the console when the &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; option is enabled also. For an example of filtering router navigation events, visit the &lt;a href=&quot;observables-in-angular#router&quot;&gt;router section&lt;/a&gt; of the &lt;a href=&quot;observables-in-angular&quot;&gt;Observables in Angular&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;&lt;/code&gt; オプションも有効になっている場合、これらのイベントはコンソールに記録されます。 ルーターナビゲーションイベントのフィルター処理の例については&lt;a href=&quot;observables-in-angular&quot;&gt;、Angular&lt;/a&gt;ガイドのObservablesの &lt;a href=&quot;observables-in-angular#router&quot;&gt;ルーターセクション&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="2680c5c9b2a75fe66adbcbcf8321b6c19da88cdf" translate="yes">
          <source>These examples transform a date into various formats, assuming that &lt;code&gt;dateObj&lt;/code&gt; is a JavaScript &lt;code&gt;Date&lt;/code&gt; object for year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11, given in the local time for the &lt;code&gt;en-US&lt;/code&gt; locale.</source>
          <target state="translated">これらの例は、日付をさまざまな形式に変換します &lt;code&gt;dateObj&lt;/code&gt; は、 &lt;code&gt;en-US&lt;/code&gt; 現地時間で指定された年：2015、月：6、日：15、時間：21、分：43、秒：11のJavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトであると仮定します-USロケール。</target>
        </trans-unit>
        <trans-unit id="2c3bf4e06192c72785cca976fd12148948a7cb90" translate="yes">
          <source>These examples use a shorthand form of the prompt syntax, supplying only the text of the question. In most cases, this is all that is required. Notice however, that the two prompts expect different types of input. When using the shorthand form, the most appropriate type is automatically selected based on the property's schema. In the example, the &lt;code&gt;name&lt;/code&gt; prompt uses the &lt;code&gt;input&lt;/code&gt; type because it it is a string property. The &lt;code&gt;useColor&lt;/code&gt; prompt uses a &lt;code&gt;confirmation&lt;/code&gt; type because it is a Boolean property. In this case, &quot;yes&quot; corresponds to &lt;code&gt;true&lt;/code&gt; and &quot;no&quot; corresponds to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これらの例では、プロンプト構文の短縮形を使用して、質問のテキストのみを提供しています。 ほとんどの場合、これで十分です。 ただし、2つのプロンプトは異なるタイプの入力を想定していることに注意してください。 省略形を使用する場合、プロパティのスキーマに基づいて最も適切なタイプが自動的に選択されます。 この例では、 &lt;code&gt;name&lt;/code&gt; プロンプトは文字列プロパティであるため、 &lt;code&gt;input&lt;/code&gt; タイプを使用します。 &lt;code&gt;useColor&lt;/code&gt; プロンプトはブール型プロパティであるため、 &lt;code&gt;confirmation&lt;/code&gt; タイプを使用します。 この場合、「yes」は &lt;code&gt;true&lt;/code&gt; に対応し、「no」は &lt;code&gt;false&lt;/code&gt; に対応します 。</target>
        </trans-unit>
        <trans-unit id="d24eb680a33027e2617530dc12e6676b87a2c5ca" translate="yes">
          <source>These files need to be copied together with the polyfills. The files the application needs at runtime, like the &lt;code&gt;.json&lt;/code&gt; phone lists and images, also need to be copied.</source>
          <target state="translated">これらのファイルは、ポリフィルと一緒にコピーする必要があります。 &lt;code&gt;.json&lt;/code&gt; 電話リストや画像など、実行時にアプリケーションが必要とするファイルもコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="02b3a7df8a6c77dd99266ab2b91a34b6a3d23a77" translate="yes">
          <source>These four bindings demonstrate the difference between &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;. Since the 🐶 (puppy) is declared inside the &amp;lt;#VIEW&amp;gt;, it isn't visible to the projected content. Instead, the projected content sees the 🐳 (whale).</source>
          <target state="translated">これらの4つのバインディングは、 &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の違いを示しています。 🐶（子犬）は&amp;lt;#VIEW&amp;gt;内で宣言されているため、投影されたコンテンツには表示されません。 代わりに、投影されたコンテンツには🐳（クジラ）が表示されます。</target>
        </trans-unit>
        <trans-unit id="8eb673fe0a5db30500d447cd8ed9df2e9892d31d" translate="yes">
          <source>These inputs and outputs can be supplied from the AngularJS template, and the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; method takes care of wiring them up:</source>
          <target state="translated">これらの入力と出力は、AngularJSテンプレートから提供でき、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; メソッドがそれらの接続を処理します。</target>
        </trans-unit>
        <trans-unit id="aca1e5487bdae512316a9552870710cde2c7edc4" translate="yes">
          <source>These kinds of parameters don't fit easily in a URL &lt;em&gt;path&lt;/em&gt;. Even if you could define a suitable URL token scheme, doing so greatly complicates the pattern matching required to translate an incoming URL to a named route.</source>
          <target state="translated">これらの種類のパラメータは、URL &lt;em&gt;パス&lt;/em&gt;に簡単に収まりません。 適切なURLトークンスキームを定義できたとしても、そうすると、着信URLを名前付きルートに変換するために必要なパターンマッチングが非常に複雑になります。</target>
        </trans-unit>
        <trans-unit id="29425b5274cb55ea0877f8425586bc76b4a9c960" translate="yes">
          <source>These may not be troubling questions for the simple components illustrated above. But many components have complex interactions with the DOM elements described in their templates, causing HTML to appear and disappear as the component state changes.</source>
          <target state="translated">これらは、上に示した単純なコンポーネントの問題ではないかもしれません。 しかし、多くのコンポーネントは、テンプレートに記述されているDOM要素と複雑な相互作用を持っているため、コンポーネントの状態が変化するとHTMLが表示されたり消えたりします。</target>
        </trans-unit>
        <trans-unit id="9280883bdf2743a9d36490d0dc135e8e9a512cc2" translate="yes">
          <source>These methods access the injected timer component directly.</source>
          <target state="translated">これらのメソッドは、挿入されたタイマーコンポーネントに直接アクセスします。</target>
        </trans-unit>
        <trans-unit id="c22429bdeba56aae46b0da88ebbd1eba5c9f7eb4" translate="yes">
          <source>These microsyntax mechanisms are also available to you when you write your own structural directives. For example, microsyntax in Angular allows you to write &lt;code&gt;&amp;lt;div *&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt;. The following sections provide detailed information on constraints, grammar, and translation of microsyntax.</source>
          <target state="translated">これらのマイクロシンタックスメカニズムは、独自の構造ディレクティブを記述するときにも使用できます。 たとえば、Angularのmicrosyntaxでは、 &lt;code&gt;&amp;lt;ng-template &lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt; [&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;]=&quot;items&quot;&amp;gt;&amp;lt;div&amp;gt;{{&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;}}&amp;lt;/div&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; 次のセクションでは、制約、文法、およびマイクロシンタックスの翻訳に関する詳細情報を提供します。</target>
        </trans-unit>
        <trans-unit id="f75727d0e53686975b5f9fe934821fc5ef2a010f" translate="yes">
          <source>These providers are insulated from changes to application providers with the same lookup token. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</source>
          <target state="translated">これらのプロバイダーは、同じルックアップトークンを持つアプリケーションプロバイダーへの変更から隔離されています。 ルーターが遅延ロードコンテキスト内でコンポーネントを作成するとき、Angularはこれらのプロバイダーから作成されたサービスインスタンスをアプリケーションルートインジェクターのサービスインスタンスよりも優先します。</target>
        </trans-unit>
        <trans-unit id="24dcfb3b1d815ddbfc80be55b49ecf74b9b01fec" translate="yes">
          <source>These services become available for injection into any component, directive, pipe or service which is a child of this injector.</source>
          <target state="translated">これらのサービスは、このインジェクターの子であるコンポーネント、ディレクティブ、パイプ、またはサービスへのインジェクションに使用可能になります。</target>
        </trans-unit>
        <trans-unit id="f9b0721484302592e733b6e272928008f313a2ba" translate="yes">
          <source>These situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!</source>
          <target state="translated">これらの状況は非常にまれであり、クロスサイトスクリプティング（XSS）セキュリティバグの作成を避けるために特別な注意が必要です！</target>
        </trans-unit>
        <trans-unit id="a17e78995649c771b926fa480048cee49ac14e32" translate="yes">
          <source>These standard testing techniques are great for unit testing services in isolation.</source>
          <target state="translated">これらの標準のテスト手法は、単体テストサービスに最適です。</target>
        </trans-unit>
        <trans-unit id="471f11bedf623af5e51a7550b62738fa78f523b0" translate="yes">
          <source>These status values are mutually exclusive, so a control cannot be both valid AND invalid or invalid AND disabled.</source>
          <target state="translated">これらのステータス値は相互に排他的であるため、コントロールを有効かつ無効、または無効および無効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="05f39205bd9c10860f4038f8cb6f1f80b35432f1" translate="yes">
          <source>These styles are post-processed so that each selector is augmented with &lt;code&gt;_nghost&lt;/code&gt; or &lt;code&gt;_ngcontent&lt;/code&gt; attribute selectors. These extra selectors enable the scoping rules described in this page.</source>
          <target state="translated">これらのスタイルは後処理されるため、各セレクターには &lt;code&gt;_nghost&lt;/code&gt; または &lt;code&gt;_ngcontent&lt;/code&gt; 属性セレクターが追加されます。 これらの追加のセレクターにより、このページで説明するスコープ規則が有効になります。</target>
        </trans-unit>
        <trans-unit id="59ed30c14d44ecaa6cf045e5333024f1a3034ced" translate="yes">
          <source>These techniques are useful for small-scale demonstrations, but they quickly become verbose and clumsy when handling large amounts of user input. Two-way data binding is a more elegant and compact way to move values between data entry fields and model properties. The next page, &lt;code&gt;Forms&lt;/code&gt;, explains how to write two-way bindings with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの手法は小規模なデモンストレーションに役立ちますが、大量のユーザー入力を処理するとすぐに冗長で不器用になります。 双方向データバインディングは、データ入力フィールドとモデルプロパティ間で値を移動するためのよりエレガントでコンパクトな方法です。 次のページ &lt;code&gt;Forms&lt;/code&gt; では、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; を使用した双方向バインディングの作成方法について説明しています。</target>
        </trans-unit>
        <trans-unit id="53c3322dcb945c3c38eca1315cb0acd70af9667e" translate="yes">
          <source>These tests could fail or timeout if the &lt;code&gt;HeroDetailService&lt;/code&gt; made its own XHR calls to a remote server. There might not be a remote server to call.</source>
          <target state="translated">&lt;code&gt;HeroDetailService&lt;/code&gt; がリモートサーバーに対して独自のXHR呼び出しを行った場合、これらのテストは失敗またはタイムアウトする可能性があります。 呼び出すリモートサーバーがない可能性があります。</target>
        </trans-unit>
        <trans-unit id="ce3f767e6032b95a5a603034551bf8233c93f3f2" translate="yes">
          <source>These three examples cover the need for an app with one level routing. The moment you add a child router, such as the crisis center, you create new link array possibilities.</source>
          <target state="translated">これら3つの例は、1レベルのルーティングを備えたアプリの必要性をカバーしています。 危機管理センターなどの子ルーターを追加すると、新しいリンクアレイの可能性が生まれます。</target>
        </trans-unit>
        <trans-unit id="a858b580e5d1dabed41a7075d6de4bc56502ab07" translate="yes">
          <source>These two properties have subtle differences, so switching to &lt;code&gt;textContent&lt;/code&gt; under the hood can be surprising to users. For this reason, we are deprecating this behavior. Going forward, users should explicitly bind to &lt;code&gt;textContent&lt;/code&gt; when using Domino.</source>
          <target state="translated">これら2つのプロパティには微妙な違いがあるため、 &lt;code&gt;textContent&lt;/code&gt; でtextContentに切り替えることはユーザーにとって驚くべきことです。 このため、この動作は非推奨です。 今後、ユーザーはDominoを使用するときに明示的に &lt;code&gt;textContent&lt;/code&gt; にバインドする必要があります。</target>
        </trans-unit>
        <trans-unit id="db3d1e9b8dc7f1d6ba6781b5d1aeadad60243cbb" translate="yes">
          <source>These two routes navigate to the crisis center child components, &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; and &lt;code&gt;CrisisDetailComponent&lt;/code&gt;, respectively.</source>
          <target state="translated">これらの2つのルートは、危機センターの子コンポーネントである &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; と &lt;code&gt;CrisisDetailComponent&lt;/code&gt; にそれぞれナビゲートします。</target>
        </trans-unit>
        <trans-unit id="ce122e04c4a0e2a0a5f7ad63d194e4fea023293d" translate="yes">
          <source>They are &lt;em&gt;not inherited&lt;/em&gt; by any components nested within the template nor by any content projected into the component.</source>
          <target state="translated">テンプレート内にネストされたコンポーネントや、コンポーネントに投影されたコンテンツに&lt;em&gt;は継承&lt;/em&gt;され&lt;em&gt;ません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="16ada202f0f526edb509f857ec3037ca6a0f4115" translate="yes">
          <source>They are displayed in named outlets.</source>
          <target state="translated">それらは名前付きコンセントに表示されます。</target>
        </trans-unit>
        <trans-unit id="1b990f73ae62c0da4608dce9f08db78466a71820" translate="yes">
          <source>They are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times. If an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</source>
          <target state="translated">正当な理由で不変です。アプリは、成功する前にリクエストを数回再試行する場合があります。つまり、インターセプターチェーンが同じリクエストを複数回再処理する場合があります。 インターセプターが元の要求オブジェクトを変更できる場合、再試行された操作は、元の要求ではなく、変更された要求から開始されます。 不変性により、インターセプターは各試行で同じリクエストを確認できます。</target>
        </trans-unit>
        <trans-unit id="0a5e8503c85509faa05b6e855e4edcff069456e9" translate="yes">
          <source>They are independent of each other.</source>
          <target state="translated">それらは互いに独立しています。</target>
        </trans-unit>
        <trans-unit id="6afb78efe8cab856821000146ea4a61b8a334fa8" translate="yes">
          <source>They are very similar with the only difference being:</source>
          <target state="translated">これらは非常に似ていますが、唯一の違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="cfd5fb1fb1b07124fb1aace027accf1df4c99e03" translate="yes">
          <source>They follow a common pattern: a &lt;em&gt;parent&lt;/em&gt; component serves as a test rig for a &lt;em&gt;child&lt;/em&gt; component that illustrates one or more of the lifecycle hook methods.</source>
          <target state="translated">これらは共通のパターンに従います。 &lt;em&gt;親&lt;/em&gt;コンポーネントは、1つ以上のライフサイクルフックメソッドを示す子コンポーネントのテストリグとして機能します。</target>
        </trans-unit>
        <trans-unit id="73b47ba16ec3ed20f7c0f09044645d6af1239f79" translate="yes">
          <source>They might be imported by the root &lt;code&gt;AppModule&lt;/code&gt; of a small application that lacks routing.</source>
          <target state="translated">これらは、ルーティングのない小さなアプリケーションのルート &lt;code&gt;AppModule&lt;/code&gt; によってインポートされる場合があります。</target>
        </trans-unit>
        <trans-unit id="0bd9de91dc582fbf7daa5013098dfee5a9baa9df" translate="yes">
          <source>They might. By default, the router re-uses a component instance when it re-navigates to the same component type without visiting a different component first. The route parameters could change each time.</source>
          <target state="translated">彼らはかもしれない。 デフォルトでは、ルータは最初に別のコンポーネントにアクセスせずに同じコンポーネントタイプに再ナビゲートすると、コンポーネントインスタンスを再使用します。 ルートパラメータは毎回変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="bcebc66109bd0b943ba34a0b34f724475faa7a20" translate="yes">
          <source>They must return a Promise or an Observable,</source>
          <target state="translated">彼らはPromiseまたはObservableを返さなければなりません、</target>
        </trans-unit>
        <trans-unit id="6a1d3b6796b2728eca30d7dc142c330459e6d1b9" translate="yes">
          <source>They typically have a top component that acts as the feature root and private, supporting sub-components descend from it.</source>
          <target state="translated">通常、それらは機能のルートおよびプライベートとして機能するトップコンポーネントを持ち、サブコンポーネントをサポートします。</target>
        </trans-unit>
        <trans-unit id="f8026517cd2a6484e993db7a3cd1d56c8845b6ed" translate="yes">
          <source>They work in combination with other routes.</source>
          <target state="translated">他のルートと組み合わせて機能します。</target>
        </trans-unit>
        <trans-unit id="3d3f6d4959980160a0fdb422743d1ab226d66d6a" translate="yes">
          <source>They'll do that with the RxJS &lt;code&gt;tap()&lt;/code&gt; operator, which looks at the observable values, does something with those values, and passes them along. The &lt;code&gt;tap()&lt;/code&gt; call back doesn't touch the values themselves.</source>
          <target state="translated">RxJSの &lt;code&gt;tap()&lt;/code&gt; 演算子でそれを行います。この演算子は、観測可能な値を見て、それらの値で何かを行い、それらを渡します。 &lt;code&gt;tap()&lt;/code&gt; コールバックは値自体には触れません。</target>
        </trans-unit>
        <trans-unit id="6764cd39877eeca69ad10d4286668ee2c1b61792" translate="yes">
          <source>Things go wrong, especially when you're getting data from a remote server. The &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; method should catch errors and do something appropriate.</source>
          <target state="translated">特にリモートサーバーからデータを取得している場合は、問題が発生します。 &lt;code&gt;HeroService.getHeroes()&lt;/code&gt; メソッドはエラーをキャッチし、適切な処理を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="bba021091f297904597c2bb05d6e5e449bd86e0a" translate="yes">
          <source>Things to keep in mind, when downgrading multiple modules:</source>
          <target state="translated">複数のモジュールをダウングレードする場合の注意事項：</target>
        </trans-unit>
        <trans-unit id="c7b69adf603ad8f6d0e880b3effde6a1bd75ec06" translate="yes">
          <source>This &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; example:</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; の例：</target>
        </trans-unit>
        <trans-unit id="258e5fd8f98e77a1547ddec9b070f084c89034c4" translate="yes">
          <source>This &lt;code&gt;MissionService&lt;/code&gt; connects the &lt;code&gt;MissionControlComponent&lt;/code&gt; to multiple &lt;code&gt;AstronautComponent&lt;/code&gt; children.</source>
          <target state="translated">この &lt;code&gt;MissionService&lt;/code&gt; は &lt;code&gt;MissionControlComponent&lt;/code&gt; を複数の &lt;code&gt;AstronautComponent&lt;/code&gt; の子に接続します。</target>
        </trans-unit>
        <trans-unit id="59e007abb53ac82deffb3014ce0885f777370e0d" translate="yes">
          <source>This &lt;code&gt;VersionChildComponent&lt;/code&gt; detects changes to the &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; input properties and composes a log message reporting these changes:</source>
          <target state="translated">この &lt;code&gt;VersionChildComponent&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../api/core/version#major&quot;&gt;major&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/core/version#minor&quot;&gt;minor&lt;/a&gt;&lt;/code&gt; 入力プロパティへの変更を検出し、これらの変更を報告するログメッセージを作成します。</target>
        </trans-unit>
        <trans-unit id="fbe66defed731afe2b351869493bed1b439539c0" translate="yes">
          <source>This &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; syntax can only &lt;em&gt;set&lt;/em&gt; a data-bound property. If you need to do something more, you can write the expanded form; for example, the following changes the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; value to uppercase:</source>
          <target state="translated">この &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 構文は、データバインドプロパティのみを&lt;em&gt;設定&lt;/em&gt;できます。 さらに何かする必要がある場合は、展開されたフォームを記述できます。 たとえば、次は &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 値を大文字に変更します。</target>
        </trans-unit>
        <trans-unit id="d891bfbbc30a830ed00d349d04e68d42b5ea2457" translate="yes">
          <source>This &lt;code&gt;bootstrap&lt;/code&gt; method is a direct replacement (takes same arguments) for AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;bootstrap&lt;/code&gt;&lt;/a&gt; method. Unlike AngularJS, this bootstrap is asynchronous.</source>
          <target state="translated">この &lt;code&gt;bootstrap&lt;/code&gt; メソッドは、AngularJS &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;bootstrap&lt;/code&gt; &lt;/a&gt;メソッドを直接置き換えるものです（同じ引数を取ります）。 AngularJSとは異なり、このブートストラップは非同期です。</target>
        </trans-unit>
        <trans-unit id="a81bbff7f4c2b4f66516ab105c5f2da6f8908842" translate="yes">
          <source>This &lt;code&gt;getHeroes()&lt;/code&gt; returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th).</source>
          <target state="translated">この &lt;code&gt;getHeroes()&lt;/code&gt; は、位置1および5にあるヒーローのスライスリストを返し、トップヒーローのうち4つ（2番目、3番目、4番目、および5番目）のみを返します。</target>
        </trans-unit>
        <trans-unit id="9b89a86d9e9910b9545a4d39e96b18d0d3af5a5b" translate="yes">
          <source>This &lt;code&gt;outlets&lt;/code&gt; object within an outer object was completely unnecessary when there was only one route and one &lt;em&gt;unnamed&lt;/em&gt; outlet to think about.</source>
          <target state="translated">外側のオブジェクト内のこの &lt;code&gt;outlets&lt;/code&gt; オブジェクトは、考えられるルートが1つと&lt;em&gt;名前のない&lt;/em&gt;アウトレットが1つしかない場合、まったく不要でした。</target>
        </trans-unit>
        <trans-unit id="7f20e0dbf005f61cffb8c3dd9af39a375a30b434" translate="yes">
          <source>This &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial provides an introduction to the fundamentals of Angular. It shows you how to set up your local development environment and develop an app using the &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLI tool&lt;/a&gt;.</source>
          <target state="translated">この&lt;em&gt;ツアーオブヒーローズの&lt;/em&gt;チュートリアルでは、Angularの基礎を紹介しています。 ローカル開発環境をセットアップし、 &lt;a href=&quot;https://angular.io/cli&quot;&gt;Angular CLIツール&lt;/a&gt;を使用してアプリを開発する方法を示します。</target>
        </trans-unit>
        <trans-unit id="f09b226e4f2c4eb0d926e572d4a75f6880da5490" translate="yes">
          <source>This &lt;em&gt;no-op&lt;/em&gt; interceptor simply calls &lt;code&gt;next.handle()&lt;/code&gt; with the original request and returns the observable without doing a thing.</source>
          <target state="translated">この&lt;em&gt;no-op&lt;/em&gt;インターセプターは、元の要求で &lt;code&gt;next.handle()&lt;/code&gt; を呼び出すだけで、何もせずにobservableを返します。</target>
        </trans-unit>
        <trans-unit id="50210317fa118bab69579c2022e5d9a816190d39" translate="yes">
          <source>This API is the recommended way to construct injectors in performance-sensitive parts.</source>
          <target state="translated">このAPIは、パフォーマンスに敏感な部品にインジェクターを構築するための推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="469f1d1eec641289327d7f725b8bc80d83c5b953" translate="yes">
          <source>This Style Guide is for anyone who contributes to the Angular documentation (this site). These guidelines should be followed by all authors. Deviations must be approved by a documentation editor.</source>
          <target state="translated">このスタイルガイドは、Angularドキュメント（このサイト）に貢献する人を対象としています。 すべての著者がこれらのガイドラインに従う必要があります。 偏差は、ドキュメントエディターによって承認される必要があります。</target>
        </trans-unit>
        <trans-unit id="3415857a9e6030331c79e1e76604015a5df5e041" translate="yes">
          <source>This UI uses the HTML unordered list with &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tags. The &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element is the Angular &quot;repeater&quot; directive. It marks that &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element (and its children) as the &quot;repeater template&quot;:</source>
          <target state="translated">このUIは、 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; タグを含むHTMLの順序なしリストを使用します。 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は、Angular &quot;repeater&quot;ディレクティブです。 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素（およびその子要素）を「リピーターテンプレート」としてマークします。</target>
        </trans-unit>
        <trans-unit id="2b4ebc81415f90795ab79ed8a5b2cd8f2bb7595a" translate="yes">
          <source>This XML element represents the translation of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; greeting tag that you marked with the &lt;code&gt;i18n&lt;/code&gt; attribute earlier in this guide.</source>
          <target state="translated">このXML要素は、このガイドの前半で &lt;code&gt;i18n&lt;/code&gt; 属性でマークした &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; グリーティングタグの翻訳を表します。</target>
        </trans-unit>
        <trans-unit id="48298b5a19ab51f248711bfb5fa88cc617b0670f" translate="yes">
          <source>This allows the Angular Language Service to provide diagnostics and completions in &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">これにより、Angular Language Serviceは &lt;code&gt;.ts&lt;/code&gt; ファイルで診断と補完を提供できます。</target>
        </trans-unit>
        <trans-unit id="98f7af4e84f120f59a1303fcf4a9447a45a5d38a" translate="yes">
          <source>This allows the compiler to generate a reference to &lt;code&gt;ɵ0&lt;/code&gt; in the factory without having to know what the value of &lt;code&gt;ɵ0&lt;/code&gt; contains.</source>
          <target state="translated">これにより、コンパイラーは、 &lt;code&gt;ɵ0&lt;/code&gt; の値に含まれるものを知る必要なく、ファクトリーで &lt;code&gt;ɵ0&lt;/code&gt; への参照を生成できます。</target>
        </trans-unit>
        <trans-unit id="24015a5bb2d8b1f8210c5acd6f640d4dc6d483b2" translate="yes">
          <source>This allows us to add new states without having to include separate transitions for each one.</source>
          <target state="translated">これにより、状態ごとに個別の遷移を含める必要なく、新しい状態を追加できます。</target>
        </trans-unit>
        <trans-unit id="cbe0ef929bc0631d02b1205466d152dddaeabe4f" translate="yes">
          <source>This allows you to set appropriate styles for individual components that won&amp;rsquo;t leak into other parts of the application.</source>
          <target state="translated">これにより、アプリケーションの他の部分に漏れない個々のコンポーネントに適切なスタイルを設定できます。</target>
        </trans-unit>
        <trans-unit id="fa04bc183c4a35ffd59532acaddb459c40802b8c" translate="yes">
          <source>This always means importing &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/common&lt;/code&gt; for access to the Angular directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt;. You can import it directly or from another NgModule that &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;re-exports&lt;/a&gt; it.</source>
          <target state="translated">これは常に、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;NgFor&lt;/code&gt; などのAngularディレクティブにアクセスするために &lt;code&gt;@angular/common&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポートすることを意味します。 直接インポートすることも、 &lt;a href=&quot;ngmodule-faq#q-reexport&quot;&gt;再エクスポート&lt;/a&gt;する別のNgModuleからインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="e4af21eecd43fe210746ff3a4c62a38f49ffe7f9" translate="yes">
          <source>This app has many of the features you'd expect to find in a data-driven application. It acquires and displays a list of heroes, edits a selected hero's detail, and navigates among different views of heroic data.</source>
          <target state="translated">このアプリには、データ駆動型アプリケーションで期待される多くの機能があります。 ヒーローのリストを取得して表示し、選択したヒーローの詳細を編集し、ヒーローデータのさまざまなビュー間をナビゲートします。</target>
        </trans-unit>
        <trans-unit id="f17ea08bfc5149a70f6152907b2632dc2a63714a" translate="yes">
          <source>This app provides &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in the app's root injector, as a side-effect of importing the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;AppModule&lt;/code&gt;. You should provide interceptors in &lt;code&gt;AppModule&lt;/code&gt; as well.</source>
          <target state="translated">このアプリは、 &lt;code&gt;AppModule&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートする副作用として、アプリのルートインジェクターにHttpClientを提供します。 &lt;code&gt;AppModule&lt;/code&gt; でもインターセプターを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="9010af53dce21e99cd1b98b6918ed08a568edceb" translate="yes">
          <source>This app uses more terse &quot;variable assignment&quot; style simply for brevity.</source>
          <target state="translated">このアプリは、簡潔にするために、より簡潔な「変数割り当て」スタイルを使用しています。</target>
        </trans-unit>
        <trans-unit id="e2dd29b7095751503adbe18ae104950880b8fed2" translate="yes">
          <source>This application deletes a hero with the &lt;code&gt;HttpClient.delete&lt;/code&gt; method by passing the hero's id in the request URL.</source>
          <target state="translated">このアプリケーションは、リクエストURLでヒーローのIDを渡すことにより、 &lt;code&gt;HttpClient.delete&lt;/code&gt; メソッドでヒーローを削除します。</target>
        </trans-unit>
        <trans-unit id="448875963d3ea5d9faf62ce4ea4e238a24bd4684" translate="yes">
          <source>This approach makes it easier to re-use the component somewhere else and deliver the component's intended appearance even if the global styles are different.</source>
          <target state="translated">このアプローチにより、グローバルスタイルが異なっていても、コンポーネントを別の場所で再利用し、コンポーネントの意図した外観を簡単に提供できます。</target>
        </trans-unit>
        <trans-unit id="736cdde48162e97e7bae316bb32e7680eb170f89" translate="yes">
          <source>This approach works for prototyping, but is not robust or maintainable. As soon as you try to test this component or get heroes from a remote server, you have to change the implementation of &lt;code&gt;HeroesListComponent&lt;/code&gt; and replace every use of the &lt;code&gt;HEROES&lt;/code&gt; mock data.</source>
          <target state="translated">このアプローチはプロトタイピングには有効ですが、堅牢性や保守性はありません。 このコンポーネントをテストするか、リモートサーバーからヒーローを取得しようとするとすぐに、 &lt;code&gt;HeroesListComponent&lt;/code&gt; の実装を変更し、 &lt;code&gt;HEROES&lt;/code&gt; モックデータの使用をすべて置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="d2207c94db1f3c39ac92627d2d416a732485be1c" translate="yes">
          <source>This array lacks a route parameter because you had no reason to send information to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; に情報を送信する理由がなかったため、この配列にはルートパラメーターがありません。</target>
        </trans-unit>
        <trans-unit id="e9b9947c5ef101e16618174c23e01f209fae9d4e" translate="yes">
          <source>This article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.</source>
          <target state="translated">この記事では、Circle CIとTravis CIを実行するようにプロジェクトを構成する方法と、どちらの環境でもChromeブラウザーでテストを実行できるようにテスト構成を更新する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4e02ae1fdc78e80303d48713d37550a281676bcb" translate="yes">
          <source>This asynchronous approach &lt;em&gt;will work&lt;/em&gt; when the &lt;code&gt;HeroService&lt;/code&gt; requests heroes from the server.</source>
          <target state="translated">この非同期アプローチ&lt;em&gt;は&lt;/em&gt; 、 &lt;code&gt;HeroService&lt;/code&gt; がサーバーにヒーローを要求するときに機能します。</target>
        </trans-unit>
        <trans-unit id="9e58e666a6e882960d6b1daf78543b6547ba94f0" translate="yes">
          <source>This attack is only successful if the returned JSON is executable as JavaScript. Servers can prevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the well-known string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;.</source>
          <target state="translated">この攻撃は、返されたJSONがJavaScriptとして実行可能な場合にのみ成功します。 サーバーは、慣例により、既知の文字列 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; を使用して、すべてのJSON応答にプレフィックスを付けて実行不可能にすることにより、攻撃を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="651be0a8100915d5529b17ae73b92bbe7b153f12" translate="yes">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also defines an empty &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method, to prevent the &lt;a href=&quot;../api/core/compiler&quot;&gt;Compiler&lt;/a&gt; from returning errors. This is necessary because the module will not have a &lt;code&gt;bootstrap&lt;/code&gt; declaration on its &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">この最小限の &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は、すべてのAngularブラウザベースのアプリに必要なモジュールである &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートします。 また、空の &lt;code&gt;ngDoBootstrap()&lt;/code&gt; メソッドを定義して、 &lt;a href=&quot;../api/core/compiler&quot;&gt;コンパイラ&lt;/a&gt;がエラーを返さないようにします。 モジュールの &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータに &lt;code&gt;bootstrap&lt;/code&gt; 宣言がないため、これが必要です。</target>
        </trans-unit>
        <trans-unit id="f56abc002d8d199ab12c7a00e8eceb4cb5324712" translate="yes">
          <source>This bare minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, the module every Angular browser-based app must have. It also imports &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt;, which exports providers that will be used for upgrading and downgrading services and components.</source>
          <target state="translated">この最小限の &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は、すべてのAngularブラウザベースのアプリに必要なモジュールである &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートします。 また、 &lt;code&gt;@angular/upgrade/&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; をインポートし、サービスとコンポーネントのアップグレードとダウングレードに使用されるプロバイダーをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="4182fbf9bcd985eb43d694af8b1af19720683102" translate="yes">
          <source>This behavior necessarily changes when you use lazy loading. Lazy loading is when you load modules only when you need them; for example, when routing. They aren&amp;rsquo;t loaded right away like with eagerly loaded modules. This means that any services listed in their provider arrays aren&amp;rsquo;t available because the root injector doesn&amp;rsquo;t know about these modules.</source>
          <target state="translated">遅延読み込みを使用すると、この動作は必然的に変わります。 遅延読み込みは、必要なときにのみモジュールを読み込む場合です。 たとえば、ルーティングするとき。 熱心にロードされたモジュールのように、すぐにはロードされません。 これは、ルートインジェクターがこれらのモジュールを知らないため、プロバイダー配列にリストされているサービスが利用できないことを意味します。</target>
        </trans-unit>
        <trans-unit id="35a35e5d7d8bb3b5d8a866028a9f757d0c2abbb7" translate="yes">
          <source>This cadence of releases gives you access to new features as soon as they are ready, while maintaining the stability and reliability of the platform for production users.</source>
          <target state="translated">この一連のリリースにより、本番ユーザー向けのプラットフォームの安定性と信頼性を維持しながら、準備が整い次第、新機能にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="de8dbaffe2662ccb066fdee3c1966e668ead9335" translate="yes">
          <source>This can be a problem if you have to change your app's location. If you setup a redirect from the old location (for example &lt;code&gt;example.com&lt;/code&gt;) to the new location (for example &lt;code&gt;www.example.com&lt;/code&gt;) the worker will stop working. Also, the redirect won't even trigger for users who are loading the site entirely from Service Worker. The old worker (registered at &lt;code&gt;example.com&lt;/code&gt;) tries to update and sends requests to the old location &lt;code&gt;example.com&lt;/code&gt; which get redirected to the new location &lt;code&gt;www.example.com&lt;/code&gt; and create the error &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt;.</source>
          <target state="translated">アプリの場所を変更する必要がある場合、これは問題になる可能性があります。 古い場所（ &lt;code&gt;example.com&lt;/code&gt; など ）から新しい場所（ &lt;code&gt;www.example.com&lt;/code&gt; など）へのリダイレクトを設定すると、ワーカーは動作を停止します。 また、Service Workerからサイトを完全にロードしているユーザーに対しても、リダイレクトはトリガーされません。 古いワーカー（ &lt;code&gt;example.com&lt;/code&gt; に登録されている）が更新を試み、新しいロケーション &lt;code&gt;www.example.com&lt;/code&gt; にリダイレクトされる古いロケーション &lt;code&gt;example.com&lt;/code&gt; にリクエストを送信し、エラーを作成します &lt;code&gt;The script resource is behind &lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; redirect, which is disallowed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a25a7112462a90a222ddd01185604490e952693" translate="yes">
          <source>This can be used to resume testing after events have triggered asynchronous activity or asynchronous change detection.</source>
          <target state="translated">これは、イベントが非同期アクティビティまたは非同期変更検出をトリガーした後にテストを再開するために使用できます。</target>
        </trans-unit>
        <trans-unit id="934112ccd1aa2b6915e125429be40b8b0e576f0a" translate="yes">
          <source>This can be useful when scanning through code and looking for observable values. Also, if you want a property to store the most recent value from an observable, it can be convenient to simply use the same name with or without the &amp;ldquo;$&amp;rdquo;.</source>
          <target state="translated">これは、コードをスキャンして観察可能な値を探すときに役立ちます。 また、プロパティにオブザーバブルの最新の値を保存する場合は、「$」の有無にかかわらず同じ名前を使用するだけで便利です。</target>
        </trans-unit>
        <trans-unit id="2b2a566810683bdb154f2660dc33dfd48367534d" translate="yes">
          <source>This can happen if you refer to an ambient type. For example, the &lt;code&gt;Window&lt;/code&gt; type is an ambient type declared in the global &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">これは、アンビエントタイプを参照する場合に発生する可能性があります。 たとえば、 &lt;code&gt;Window&lt;/code&gt; タイプは、グローバル &lt;code&gt;.d.ts&lt;/code&gt; ファイルで宣言されたアンビエントタイプです。</target>
        </trans-unit>
        <trans-unit id="6476281277699a0797217af1c8c95aadca9fed5f" translate="yes">
          <source>This can happen if you use a number as a property name as in the following example.</source>
          <target state="translated">これは、次の例のように、プロパティ名として数値を使用する場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3b41585be32bdaba39097b77ac3bb57808c72252" translate="yes">
          <source>This can happen when a &lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;route guard&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt; or initiates a redirect by returning a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;a href=&quot;../../guide/router#milestone-5-route-guards&quot;&gt;ルートガード&lt;/a&gt;が &lt;code&gt;false&lt;/code&gt; を返すか、 &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すことでリダイレクトを開始するときに発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="161acaf31fb43a0787ee8fbb9353bde452188f86" translate="yes">
          <source>This causes the CLI to create a folder called &lt;code&gt;customer-dashboard&lt;/code&gt; with a file inside called &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; with the following contents:</source>
          <target state="translated">これにより、CLIは &lt;code&gt;customer-dashboard&lt;/code&gt; と呼ばれるフォルダーを作成し、その中にcustomer-dashboard.module.tsというファイルが含まれ、次の内容が含まれます。</target>
        </trans-unit>
        <trans-unit id="5019a44a75c49b88537ac9e8329f1c2eab2831e5" translate="yes">
          <source>This class is an &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">このクラスは &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; であり、これをインポートしてAngularJSコアサービスを提供します。また、ハイブリッドアップグレードアプリケーションのブートストラップに使用するインスタンスメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="025bc612549c84721126511ec42b2a6d0ff1d56c" translate="yes">
          <source>This class is immutable; all mutation operations return a new instance.</source>
          <target state="translated">このクラスは不変です。 すべての突然変異操作は新しいインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="d3d60295749b3a3a0404d6398d78e18e444489d5" translate="yes">
          <source>This class is only used internally in the &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このクラスは、 &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; で内部的にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="801d9cace214c9cf01792d4f29b30f5848a25da1" translate="yes">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスは、アプリケーション開発者が直接使用しないでください。 代わりに、 &lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d1d6a70007738552506319e31c6ae61765926844" translate="yes">
          <source>This class should not be used directly by an application developer. Instead, use &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスは、アプリケーション開発者が直接使用しないでください。 代わりに、 &lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d5c998372f08c1a101f67cf6fc6453dc480a13a2" translate="yes">
          <source>This code inspects certain &lt;em&gt;values of interest&lt;/em&gt;, capturing and comparing their current state against previous values. It writes a special message to the log when there are no substantive changes to the &lt;code&gt;hero&lt;/code&gt; or the &lt;code&gt;power&lt;/code&gt; so you can see how often &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; is called. The results are illuminating:</source>
          <target state="translated">このコードは、対象の特定の&lt;em&gt;値を&lt;/em&gt;検査し、現在の状態をキャプチャして以前の値と比較します。 &lt;code&gt;hero&lt;/code&gt; または &lt;code&gt;power&lt;/code&gt; 実質的な変更がない場合、ログに特別なメッセージを書き込むので、 &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; が呼び出される頻度を確認できます。 結果は明らかです。</target>
        </trans-unit>
        <trans-unit id="db010d4e9e3ffb1514bc2b0d8a75b9801342ba2f" translate="yes">
          <source>This code repeats the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tag for each power in the list of powers. The &lt;code&gt;pow&lt;/code&gt; template input variable is a different power in each iteration; you display its name using the interpolation syntax.</source>
          <target state="translated">このコードは、パワーのリスト内の各パワーに対して &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; タグを繰り返します 。 &lt;code&gt;pow&lt;/code&gt; テンプレート入力変数は、反復ごとに異なるパワーです。 補間構文を使用してその名前を表示します。</target>
        </trans-unit>
        <trans-unit id="75b5c5fa1c91023ea749d4aa233f6b4929e1dfb1" translate="yes">
          <source>This code sets the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;code&gt;value&lt;/code&gt; property by binding to the &lt;code&gt;name&lt;/code&gt; property. To listen for changes to the value, the code binds to the &lt;code&gt;input&lt;/code&gt; event of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. When the user makes changes, the &lt;code&gt;input&lt;/code&gt; event is raised, and the binding executes the statement within a context that includes the DOM event object, &lt;code&gt;$event&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;name&lt;/code&gt; プロパティにバインドすることにより、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; プロパティを設定します。 値の変更をリッスンするために、コードは &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;input&lt;/code&gt; イベントにバインドします。 ユーザーが変更を加えると、 &lt;code&gt;input&lt;/code&gt; イベントが発生し、バインディングがDOMイベントオブジェクト &lt;code&gt;$event&lt;/code&gt; を含むコンテキスト内でステートメントを実行します。</target>
        </trans-unit>
        <trans-unit id="077f99384ba94951a54310fe9d28e905bc2e0a9b" translate="yes">
          <source>This code uses only one &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;, so only one subscription is created. The conditional statement stores the result of &lt;code&gt;userStream|async&lt;/code&gt; in the local variable &lt;code&gt;user&lt;/code&gt;. You can then bind the local &lt;code&gt;user&lt;/code&gt; repeatedly.</source>
          <target state="translated">このコードは &lt;code&gt;&lt;a href=&quot;asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; を 1つだけ使用するため、作成されるサブスクリプションは1つだけです。 条件ステートメントは、 &lt;code&gt;userStream|async&lt;/code&gt; 結果をローカル変数 &lt;code&gt;user&lt;/code&gt; に保存します 。 その後、ローカル &lt;code&gt;user&lt;/code&gt; 繰り返しバインドできます 。</target>
        </trans-unit>
        <trans-unit id="13648ab24db66abd7c6828bea92fd0f6dff2d7ba" translate="yes">
          <source>This command creates the following &lt;code&gt;UserService&lt;/code&gt; skeleton:</source>
          <target state="translated">このコマンドは、次の &lt;code&gt;UserService&lt;/code&gt; スケルトンを作成します。</target>
        </trans-unit>
        <trans-unit id="53ca835c29b278849f8cc8fdbc5ec1ec43128a05" translate="yes">
          <source>This command updates both &lt;code&gt;@angular/material&lt;/code&gt; and its dependency &lt;code&gt;@angular/cdk&lt;/code&gt; in your workspace's &lt;code&gt;package.json&lt;/code&gt;. If either package contains an update schematic that covers migration from the existing version to a new version, the command runs that schematic on your workspace.</source>
          <target state="translated">このコマンドは、ワークスペースの &lt;code&gt;package.json&lt;/code&gt; で &lt;code&gt;@angular/material&lt;/code&gt; とその依存関係 &lt;code&gt;@angular/cdk&lt;/code&gt; 両方を更新します。 いずれかのパッケージに、既存のバージョンから新しいバージョンへの移行をカバーする更新回路図が含まれている場合、コマンドはワークスペースでその回路図を実行します。</target>
        </trans-unit>
        <trans-unit id="5f08f688b42cedaf1c2687380db97e840fa25cee" translate="yes">
          <source>This completes the cross validation example. We managed to:</source>
          <target state="translated">これで相互検証の例を完了しました。 なんとかできました：</target>
        </trans-unit>
        <trans-unit id="5c82d5954347561c2d21641e18971743651dd806" translate="yes">
          <source>This component and its tree of child components receive &lt;code&gt;DateLoggerService&lt;/code&gt; instance. Components outside the tree continue to receive the original &lt;code&gt;LoggerService&lt;/code&gt; instance.</source>
          <target state="translated">このコンポーネントとその子コンポーネントのツリーは、 &lt;code&gt;DateLoggerService&lt;/code&gt; インスタンスを受け取ります。 ツリーの外部のコンポーネントは、引き続き元の &lt;code&gt;LoggerService&lt;/code&gt; インスタンスを受け取ります。</target>
        </trans-unit>
        <trans-unit id="597e9233caedd83ac990f5386a4ce276f54df4c0" translate="yes">
          <source>This component class has no dependencies. To test a service with no dependencies, you create it with &lt;code&gt;new&lt;/code&gt;, poke at its API, and assert expectations on its public state. Do the same with the component class.</source>
          <target state="translated">このコンポーネントクラスには依存関係はありません。 依存関係のないサービスをテストするには、 &lt;code&gt;new&lt;/code&gt; を使用してサービスを作成し、そのAPIを調べて、パブリック状態に期待を表明します。 コンポーネントクラスでも同じことを行います。</target>
        </trans-unit>
        <trans-unit id="065a8c2a12fca59785e66b9536ad7a4d7503a70d" translate="yes">
          <source>This component instance.</source>
          <target state="translated">このコンポーネントインスタンス。</target>
        </trans-unit>
        <trans-unit id="a07464de42a69a73871d1c32b4cddf78f4a39cff" translate="yes">
          <source>This component's &lt;code&gt;doSomething()&lt;/code&gt; method update's the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately. There's no &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;need to wait&lt;/a&gt;.</source>
          <target state="translated">このコンポーネントの &lt;code&gt;doSomething()&lt;/code&gt; メソッドは、コンポーネントのデータバインド &lt;code&gt;comment&lt;/code&gt; プロパティをすぐに更新します。 &lt;a href=&quot;lifecycle-hooks#wait-a-tick&quot;&gt;待つ必要は&lt;/a&gt;ありません 。</target>
        </trans-unit>
        <trans-unit id="8831291497a6d0587b26b1c8ca5ca8dbd14f9441" translate="yes">
          <source>This component's injector lookup tokens. Includes the component itself plus the tokens that the component lists in its &lt;code&gt;providers&lt;/code&gt; metadata.</source>
          <target state="translated">このコンポーネントのインジェクター検索トークン。 コンポーネント自体と、その &lt;code&gt;providers&lt;/code&gt; メタデータにコンポーネントがリストするトークンを含めます。</target>
        </trans-unit>
        <trans-unit id="7b0506327a430462426c6e68b6e09fd639e04c8d" translate="yes">
          <source>This concludes the &quot;Tour of Heroes&quot; tutorial. You're ready to learn more about Angular development in the fundamentals section, starting with the &lt;a href=&quot;../guide/architecture&quot;&gt;Architecture&lt;/a&gt; guide.</source>
          <target state="translated">これで、「英雄の旅」チュートリアルは終了です。 &lt;a href=&quot;../guide/architecture&quot;&gt;アーキテクチャ&lt;/a&gt;ガイドから始めて、基本セクションでAngular開発の詳細を学ぶ準備ができました。</target>
        </trans-unit>
        <trans-unit id="e37d0d91df8ad47c0dbbb5e123254e61fce1c600" translate="yes">
          <source>This configuration caches &lt;code&gt;node_modules/&lt;/code&gt; and uses &lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt;&lt;code&gt;npm run&lt;/code&gt;&lt;/a&gt; to run CLI commands, because &lt;code&gt;@angular/cli&lt;/code&gt; is not installed globally. The double dash (&lt;code&gt;--&lt;/code&gt;) is needed to pass arguments into the &lt;code&gt;npm&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;@angular/cli&lt;/code&gt; はグローバルにインストールされていないため、この構成は &lt;code&gt;node_modules/&lt;/code&gt; をキャッシュし、 &lt;a href=&quot;https://docs.npmjs.com/cli/run-script&quot;&gt; &lt;code&gt;npm run&lt;/code&gt; &lt;/a&gt;を使用してCLIコマンドを実行します。 引数を &lt;code&gt;npm&lt;/code&gt; スクリプトに渡すには、二重ダッシュ（ &lt;code&gt;--&lt;/code&gt; ）が必要です。</target>
        </trans-unit>
        <trans-unit id="40d0adebce1666f54fd687822290b1370ce51244" translate="yes">
          <source>This cookbook contains recipes for common component communication scenarios in which two or more components share information.</source>
          <target state="translated">このクックブックには、2つ以上のコンポーネントが情報を共有する一般的なコンポーネント通信シナリオのレシピが含まれています。</target>
        </trans-unit>
        <trans-unit id="a322972c7d99a3ec23cfc786253fdee6e876e02e" translate="yes">
          <source>This cookbook describes the steps required to set up and use Angular app files in Visual Studio 2015 within an ASP.NET 4.x project.</source>
          <target state="translated">このクックブックでは、ASP.NET 4.xプロジェクト内のVisual Studio 2015でAngularアプリファイルをセットアップして使用するために必要な手順について説明します。</target>
        </trans-unit>
        <trans-unit id="81fab89603358b3015fbab03f643f5619e9e7e16" translate="yes">
          <source>This cookbook shows you how to use &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; to add components dynamically.</source>
          <target state="translated">このクックブックは、 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; を使用してコンポーネントを動的に追加する方法を示します。</target>
        </trans-unit>
        <trans-unit id="e813c2193e41174a6e571245c4cd3c17e5e9558e" translate="yes">
          <source>This cookbook shows you how to use &lt;code&gt;formGroup&lt;/code&gt; to dynamically render a simple form with different control types and validation. It's a primitive start. It might evolve to support a much richer variety of questions, more graceful rendering, and superior user experience. All such greatness has humble beginnings.</source>
          <target state="translated">このクックブックでは、 &lt;code&gt;formGroup&lt;/code&gt; を使用して、さまざまなコントロールタイプと検証を使用して単純なフォームを動的にレンダリングする方法を示します。 それは原始的なスタートです。 より豊富な種類の質問、より優雅なレンダリング、および優れたユーザーエクスペリエンスをサポートするために進化する可能性があります。 そのような偉大さはすべて謙虚な始まりを持っています。</target>
        </trans-unit>
        <trans-unit id="d822107036c9c9bdc81f05621421ed35206b48fe" translate="yes">
          <source>This cookbook uses &lt;a href=&quot;reactive-forms&quot;&gt;reactive forms&lt;/a&gt;.</source>
          <target state="translated">このクックブックは&lt;a href=&quot;reactive-forms&quot;&gt;リアクティブフォームを&lt;/a&gt;使用します 。</target>
        </trans-unit>
        <trans-unit id="d23601ec63a90736809116d022f4fadccabb0fbd" translate="yes">
          <source>This cookbook uses the &lt;code&gt;Empty&lt;/code&gt; template with no added folders, no authentication, and no hosting. Pick the template and options appropriate for your project.</source>
          <target state="translated">このクックブックは、 &lt;code&gt;Empty&lt;/code&gt; テンプレートを使用します。追加されたフォルダー、認証、ホスティングはありません。 プロジェクトに適したテンプレートとオプションを選択します。</target>
        </trans-unit>
        <trans-unit id="a651647f94c034ce66b15f4ab627c4ac2e28535c" translate="yes">
          <source>This creates a &lt;code&gt;customers&lt;/code&gt; folder with the new lazy-loadable module &lt;code&gt;CustomersModule&lt;/code&gt; defined in the file &lt;code&gt;customers.module.ts&lt;/code&gt;. The command automatically adds the &lt;code&gt;CustomerComponent&lt;/code&gt; to the new feature module.</source>
          <target state="translated">これにより、 &lt;code&gt;customers&lt;/code&gt; .module.tsファイルで定義された新しい遅延読み込み可能なモジュール &lt;code&gt;CustomersModule&lt;/code&gt; を含むcustomersフォルダーが作成されます。 このコマンドは、 &lt;code&gt;CustomerComponent&lt;/code&gt; を新しい機能モジュールに自動的に追加します。</target>
        </trans-unit>
        <trans-unit id="14b67ee4f93cd53fc641ba3366b0aa1e81714ab4" translate="yes">
          <source>This creates a new folder called &lt;code&gt;orders&lt;/code&gt; containing an &lt;code&gt;OrdersModule&lt;/code&gt; and &lt;code&gt;OrdersRoutingModule&lt;/code&gt;, along with the new &lt;code&gt;OrderComponent&lt;/code&gt; source files. The &lt;code&gt;order-list&lt;/code&gt; route is added to the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array in &lt;code&gt;app-routing.module.ts&lt;/code&gt;, using the lazy-loading syntax.</source>
          <target state="translated">これにより、新しい &lt;code&gt;OrderComponent&lt;/code&gt; ソースファイルとともに &lt;code&gt;OrdersModule&lt;/code&gt; と &lt;code&gt;OrdersRoutingModule&lt;/code&gt; を含む &lt;code&gt;orders&lt;/code&gt; という新しいフォルダーが作成されます。 遅延 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 構文を使用して、 &lt;code&gt;order-list&lt;/code&gt; ルートがapp-routing.module.tsの &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列に追加されます。</target>
        </trans-unit>
        <trans-unit id="a0adbda48788d27b45342d5c21c7e2786033726c" translate="yes">
          <source>This creates a separate file named &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; to store the NgModule's routes. The file includes an empty &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; object that you can fill with routes to different components and NgModules.</source>
          <target state="translated">これにより、 &lt;code&gt;my-module-routing.module.ts&lt;/code&gt; という名前の別のファイルが作成され、NgModuleのルートが保存されます。 このファイルには、さまざまなコンポーネントおよびNgModuleへのルートを入力できる空の &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; オブジェクトが含まれています。</target>
        </trans-unit>
        <trans-unit id="1e0fcef7f7df8d4e453466c52facdaf940fe0d0a" translate="yes">
          <source>This creates an app called &lt;code&gt;customer-app&lt;/code&gt; and the &lt;code&gt;--routing&lt;/code&gt; flag generates a file called &lt;code&gt;app-routing.module.ts&lt;/code&gt;, which is one of the files you need for setting up lazy loading for your feature module. Navigate into the project by issuing the command &lt;code&gt;cd customer-app&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;customer-app&lt;/code&gt; というアプリが作成され、 -- &lt;code&gt;--routing&lt;/code&gt; フラグにより &lt;code&gt;app-routing.module.ts&lt;/code&gt; というファイルが生成されます。これは、機能モジュールの遅延読み込みを設定するために必要なファイルの1つです。 コマンド &lt;code&gt;cd customer-app&lt;/code&gt; を発行して、プロジェクトに移動します。</target>
        </trans-unit>
        <trans-unit id="0198faa84961169c4d04809b0185acf9e3ac22b4" translate="yes">
          <source>This creates the &lt;code&gt;projects/my-lib&lt;/code&gt; folder in your workspace, which contains a component and a service inside an NgModule. The workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is updated with a project of type 'library'.</source>
          <target state="translated">これにより、ワークスペースに &lt;code&gt;projects/my-lib&lt;/code&gt; フォルダーが作成され、NgModule内にコンポーネントとサービスが含まれます。 ワークスペース構成ファイル、 &lt;code&gt;angular.json&lt;/code&gt; は、タイプが「library」のプロジェクトで更新されます。</target>
        </trans-unit>
        <trans-unit id="742c3e2e58b8f0be6640dfb54f738b9a9e7625e7" translate="yes">
          <source>This declares that the input property &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; directive should be treated as a guard to the use of its template, implying that the template will only be instantiated if the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; input property is true.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ディレクティブの入力プロパティ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; がテンプレートの使用に対するガードとして扱われることを宣言し、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 入力プロパティがtrueの場合にのみテンプレートがインスタンス化されることを意味します。</target>
        </trans-unit>
        <trans-unit id="048e83daee9abd14678f6339d9376992f4af52ee" translate="yes">
          <source>This default behavior is suitable for a typical &quot;multi-repo&quot; development style where each application resides in its own workspace. Beginners and intermediate users are encouraged to use &lt;code&gt;ng new&lt;/code&gt; to create a separate workspace for each application.</source>
          <target state="translated">このデフォルトの動作は、各アプリケーションが独自のワークスペースに存在する典型的な「マルチリポジトリ」開発スタイルに適しています。 初心者および中間ユーザーは、 &lt;code&gt;ng new&lt;/code&gt; を使用して、アプリケーションごとに個別のワークスペースを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6587344c6ac0fb7a73ec81835299d2d7ce729572" translate="yes">
          <source>This demo does neither. Instead, it asks the user to make that choice explicitly in a confirmation dialog box that &lt;em&gt;waits asynchronously for the user's answer&lt;/em&gt;.</source>
          <target state="translated">このデモはどちらも行いません。 代わりに、 &lt;em&gt;ユーザーの回答を非同期に待機&lt;/em&gt;する確認ダイアログボックスで明示的に選択するようにユーザーに要求します。</target>
        </trans-unit>
        <trans-unit id="6b5876f473d01141acbb800a8ab479df9db1837f" translate="yes">
          <source>This directive accepts an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance. It will then use this &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to match any child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances to child &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">このディレクティブは、既存の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを受け入れます。 次に、この &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを使用して、すべての子 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスを子 &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; ディレクティブに一致させます。</target>
        </trans-unit>
        <trans-unit id="a7989fce38212429c7062b9c5da6235e1e43e7a8" translate="yes">
          <source>This directive can only be used as a child of &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; (within &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags).</source>
          <target state="translated">このディレクティブは、 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; の子（ &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグ内）としてのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="251b666c976f4261c91fe4beed08cf42cce8548f" translate="yes">
          <source>This directive can only be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このディレクティブは、親 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="e18d93c8deadcb10dbc3f3516c1984ce080db614" translate="yes">
          <source>This directive is designed to be used with a parent &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; (selector: &lt;code&gt;[formGroup]&lt;/code&gt;).</source>
          <target state="translated">このディレクティブは、親 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; （セレクター： &lt;code&gt;[formGroup]&lt;/code&gt; ）とともに使用されるように設計されています。</target>
        </trans-unit>
        <trans-unit id="8ac905b9010d53abe6967453b6081cf348d35f38" translate="yes">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">このディレクティブは、非推奨の &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; セレクターが使用されたときに警告を表示するためにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="b316720613e231db957c48b5c531a72244e235ef" translate="yes">
          <source>This directive is solely used to display warnings when the deprecated &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; selector is used.</source>
          <target state="translated">このディレクティブは、非推奨の &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;ngForm&lt;/a&gt;&lt;/code&gt; セレクターが使用されたときに警告を表示するためにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="cf3a222ca96206b5b9edc9d51a79dbc263b73654" translate="yes">
          <source>This directive is used by itself or as part of a larger form. Use the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; selector to activate it.</source>
          <target state="translated">このディレクティブは、単独で、またはより大きな形式の一部として使用されます。 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; セレクターを使用してアクティブにします。</target>
        </trans-unit>
        <trans-unit id="079bfc81b016d5fdb9440e147c8f59ceacfd53ed" translate="yes">
          <source>This directive lets you add a CSS class to an element when the link's route becomes active.</source>
          <target state="translated">このディレクティブを使用すると、リンクのルートがアクティブになったときにCSSクラスを要素に追加できます。</target>
        </trans-unit>
        <trans-unit id="75bdf4a08a98952e88ab0d9d8d3f69ffb18f7db5" translate="yes">
          <source>This document contains information and resources to help you keep your Angular apps and libraries up-to-date.</source>
          <target state="translated">このドキュメントには、Angularアプリとライブラリを最新の状態に保つのに役立つ情報とリソースが含まれています。</target>
        </trans-unit>
        <trans-unit id="5c3c465a1a031a3ba31db55cb2026597de7378a1" translate="yes">
          <source>This document contains the practices that we follow to provide you with a leading-edge app development platform, balanced with stability. We strive to ensure that future changes are always introduced in a predictable way. We want everyone who depends on Angular to know when and how new features are added, and to be well-prepared when obsolete ones are removed.</source>
          <target state="translated">このドキュメントには、安定性とバランスのとれた最先端のアプリ開発プラットフォームを提供するために従うプラクティスが含まれています。 将来の変更が常に予測可能な方法で導入されるように努めています。 私たちは、Angularに依存するすべての人に、新しい機能がいつどのように追加されるかを知ってもらい、廃止された機能が削除されたときに十分な準備をしてほしいと思っています。</target>
        </trans-unit>
        <trans-unit id="5bc557b45ba44abe0921a0e64654f12154157a7c" translate="yes">
          <source>This document explains how CLI builders integrate with the workspace configuration file, and shows how you can create your own builder.</source>
          <target state="translated">このドキュメントでは、CLIビルダーがワークスペース構成ファイルとどのように統合されるかを説明し、独自のビルダーを作成する方法を示します。</target>
        </trans-unit>
        <trans-unit id="a18d52460187370aee9da7ba825b392cfeb2488a" translate="yes">
          <source>This document explains how to enable Angular service worker support in projects that you created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. It then uses a simple example to show you a service worker in action, demonstrating loading and basic caching.</source>
          <target state="translated">このドキュメントでは、 &lt;a href=&quot;cli&quot;&gt;Angular CLIで&lt;/a&gt;作成したプロジェクトでAngular Service Workerサポートを有効にする方法について説明します 。 次に、単純な例を使用して、動作中のサービスワーカーを示し、読み込みと基本的なキャッシュを示します。</target>
        </trans-unit>
        <trans-unit id="91cf023004b2aaf04380d0ea7e79d9a637aeaec2" translate="yes">
          <source>This document refers to a unit of translatable text as &quot;text,&quot; a &quot;message&quot;, or a &quot;text message.&quot;</source>
          <target state="translated">このドキュメントでは、翻訳可能なテキストの単位を「テキスト」、「メッセージ」、または「テキストメッセージ」と呼びます。</target>
        </trans-unit>
        <trans-unit id="f12cdb59b126570dec1c8c00fc1543f0b13ae7d0" translate="yes">
          <source>This does not use the deprecated jsdoc tag on purpose because it renders all overloads as deprecated in TSLint due to &lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https://github.com/palantir/tslint/issues/4522&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;a href=&quot;https://github.com/palantir/tslint/issues/4522&quot;&gt;https：&lt;/a&gt; //github.com/palantir/tslint/issues/4522によってTSLintで非推奨としてすべてのオーバーロードをレンダリングするため、非推奨のjsdocタグを意図的に使用しません。</target>
        </trans-unit>
        <trans-unit id="49942dcd9689b7ed449bd1f739e91d6c6991a659" translate="yes">
          <source>This does the same things as the Circle CI configuration, except that Travis doesn't come with Chrome, so we use Chromium instead.</source>
          <target state="translated">TravisにはChromeが付属していないことを除いて、これはCircle CI構成と同じことを行うため、代わりにChromiumを使用します。</target>
        </trans-unit>
        <trans-unit id="7a173481108f8e08ee23eccdc0ba37f48670a382" translate="yes">
          <source>This duration string specifies the network timeout. The network timeout is how long the Angular service worker will wait for the network to respond before using a cached response, if configured to do so. &lt;code&gt;timeout&lt;/code&gt; is a duration string, using the following unit suffixes:</source>
          <target state="translated">この期間文字列は、ネットワークタイムアウトを指定します。 ネットワークタイムアウトは、Angular Service Workerがネットワークが応答するのを待機する時間で、キャッシュされた応答を使用するように構成されている場合は、その応答を使用します。 &lt;code&gt;timeout&lt;/code&gt; は、次の単位サフィックスを使用した期間文字列です。</target>
        </trans-unit>
        <trans-unit id="148a52c96fd5321b2e9f47b1c411e3997ad1ee54" translate="yes">
          <source>This ensures that the build and serve commands can find the configurations for specific build targets.</source>
          <target state="translated">これにより、buildコマンドとserveコマンドが特定のビルドターゲットの構成を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="dd6ef74d3212dfa09ccacfec3ba04d981a0ae6bd" translate="yes">
          <source>This error can occur if you use an expression in the &lt;code&gt;extends&lt;/code&gt; clause of a class.</source>
          <target state="translated">このエラーは、クラスの &lt;code&gt;extends&lt;/code&gt; 句で式を使用する場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f96ad016e893a674d5f49749d37377695df58a8c" translate="yes">
          <source>This error often means that you haven't declared the directive &quot;x&quot; or haven't imported the NgModule to which &quot;x&quot; belongs.</source>
          <target state="translated">このエラーは、多くの場合、ディレクティブ「x」を宣言していないか、「x」が属するNgModuleをインポートしていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="ef4ec03d4ed605a8e9e66585cd5c2453ff07a4af" translate="yes">
          <source>This example adds a few getter methods. In a reactive form, you can always access any form control through the &lt;code&gt;get&lt;/code&gt; method on its parent group, but sometimes it's useful to define getters as shorthands for the template.</source>
          <target state="translated">この例では、いくつかのゲッターメソッドを追加します。 リアクティブフォームでは、親グループの &lt;code&gt;get&lt;/code&gt; メソッドを介していつでもフォームコントロールにアクセスできますが、テンプレートの短縮形としてゲッターを定義すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="835a254bafaad8e2e761a6f3738065e79183f666" translate="yes">
          <source>This example adds a state transition from the &lt;code&gt;closed&lt;/code&gt; state to the &lt;code&gt;open&lt;/code&gt; state with a 0.5 second transition animation arc.</source>
          <target state="translated">この例では、0.5秒の遷移アニメーションアークを使用して、 &lt;code&gt;closed&lt;/code&gt; 状態から &lt;code&gt;open&lt;/code&gt; た状態への状態遷移を追加します。</target>
        </trans-unit>
        <trans-unit id="91b20a46620fed8511ccd3504ac47cc1854c74e2" translate="yes">
          <source>This example applies the &lt;code&gt;SpyDirective&lt;/code&gt; to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; in an &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;&lt;em&gt;hero&lt;/em&gt; repeater managed by the parent &lt;code&gt;SpyComponent&lt;/code&gt;.</source>
          <target state="translated">この例では、親 &lt;code&gt;SpyComponent&lt;/code&gt; によって管理される &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; &lt;em&gt;ヒーロー&lt;/em&gt;リピーターの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に &lt;code&gt;SpyDirective&lt;/code&gt; を適用します。</target>
        </trans-unit>
        <trans-unit id="3dfd88d242d31d74d24a1d273231ff4e8624d83a" translate="yes">
          <source>This example binds a &lt;code&gt;Promise&lt;/code&gt; to the view. Clicking the &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; button resolves the promise.</source>
          <target state="translated">この例では、 &lt;code&gt;Promise&lt;/code&gt; をビューにバインドします。 [ &lt;code&gt;&lt;a href=&quot;../router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; ]ボタンをクリックすると、約束が解決します。</target>
        </trans-unit>
        <trans-unit id="76fea2ff263dbc0e5640bda0886d27fd33ac4eb8" translate="yes">
          <source>This example completely replaces the component's &lt;code&gt;providers&lt;/code&gt; array with a new array containing a &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt;.</source>
          <target state="translated">この例では、コンポーネントの &lt;code&gt;providers&lt;/code&gt; 配列を &lt;code&gt;HeroDetailServiceSpy&lt;/code&gt; を含む新しい配列に完全に置き換えます。</target>
        </trans-unit>
        <trans-unit id="b38e94209799b7cb2ad45b15b4c0f49aebeeaf6c" translate="yes">
          <source>This example features an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; where a user can enter a value and click a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; that raises an event. The &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; then relays the data to the parent component.</source>
          <target state="translated">この例の特徴は、ユーザーが値を入力してイベントを発生させる &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; をクリックできる &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; です。 次に、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; はデータを親コンポーネントに中継します。</target>
        </trans-unit>
        <trans-unit id="e3900b3c5f734c8b42b0423653ffc07e9a8c5717" translate="yes">
          <source>This example filters the &lt;code&gt;title&lt;/code&gt; property to uppercase.</source>
          <target state="translated">この例では、 &lt;code&gt;title&lt;/code&gt; プロパティを大文字にフィルターします。</target>
        </trans-unit>
        <trans-unit id="175ec0e7ef7252b24060674256a084243d66f30a" translate="yes">
          <source>This example from the &lt;code&gt;HeroListComponent&lt;/code&gt; template uses three of these forms.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; テンプレートのこの例では、これらのフォームのうち3つを使用しています。</target>
        </trans-unit>
        <trans-unit id="48f92247fb3553c5917ea007bd2c3e17c2e4d8ad" translate="yes">
          <source>This example is so simple that it is tempting to write the &lt;code&gt;Http.get()&lt;/code&gt; inside the component itself and skip the service. In practice, however, data access rarely stays this simple. You typically need to post-process the data, add error handling, and maybe some retry logic to cope with intermittent connectivity.</source>
          <target state="translated">この例は非常に単純であるため、コンポーネント自体の内部に &lt;code&gt;Http.get()&lt;/code&gt; を記述して、サービスをスキップすることができます。 ただし、実際には、データアクセスがこれほど単純なままになることはめったにありません。 通常、データを後処理し、エラー処理を追加し、場合によっては断続的な接続に対処するための再試行ロジックを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="7738f3bfb08d1f44b77915ef508354d761db0235" translate="yes">
          <source>This example provides a state transition from &lt;code&gt;open&lt;/code&gt; to &lt;code&gt;closed&lt;/code&gt; with a one second transition between states.</source>
          <target state="translated">この例では、 &lt;code&gt;open&lt;/code&gt; た状態から &lt;code&gt;closed&lt;/code&gt; た状態への状態遷移を提供し、状態間の遷移は1秒です。</target>
        </trans-unit>
        <trans-unit id="9e2fbcbc42a2d75d74a3222a5d342beb0a9c1ce0" translate="yes">
          <source>This example recreates the heroes feature in the &quot;Services&quot; episode of the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;, and you'll be copying much of the code from the .</source>
          <target state="translated">この例では、 &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Tour of Heroesチュートリアル&lt;/a&gt;の「Services」エピソードでヒーロー機能を再作成し、から多くのコードをコピーします。</target>
        </trans-unit>
        <trans-unit id="373455b46f233c304aab2070dd6730bb07e917cc" translate="yes">
          <source>This example shows some of the most useful &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; configuration options:</source>
          <target state="translated">この例は、最も便利な &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 構成オプションの一部を示しています。</target>
        </trans-unit>
        <trans-unit id="9700001752d1ddad2bef57a54fdbab31b4d92d72" translate="yes">
          <source>This example wires parent buttons to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; and uses interpolation to display the child's &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">この例では、親ボタンを子の &lt;code&gt;start&lt;/code&gt; および &lt;code&gt;stop&lt;/code&gt; 配線し、補間を使用して子の &lt;code&gt;seconds&lt;/code&gt; プロパティを表示します。</target>
        </trans-unit>
        <trans-unit id="7de281f2ca63df5ae46cabdcc5a3f0a47f5d8df0" translate="yes">
          <source>This example&amp;mdash;which displays &lt;strong&gt;&lt;samp&gt;FRIDAY, APRIL 15, 1988&lt;/samp&gt;&lt;/strong&gt;&amp;mdash;chains the same pipes as above, but passes in a parameter to &lt;code&gt;date&lt;/code&gt; as well.</source>
          <target state="translated">&lt;strong&gt;&lt;samp&gt;1988年&lt;/samp&gt;&lt;/strong&gt; 4 &lt;strong&gt;&lt;samp&gt;月15日&lt;/samp&gt;&lt;/strong&gt;金曜日を表示するこの例では&lt;strong&gt;&lt;samp&gt;、&lt;/samp&gt;&lt;/strong&gt;上記と同じパイプをチェーンしますが、パラメーターも &lt;code&gt;date&lt;/code&gt; 渡します。</target>
        </trans-unit>
        <trans-unit id="4820eaf9e83b02c2a47b5745671a9d1f9f915362" translate="yes">
          <source>This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue pipe.</source>
          <target state="translated">この例は、このキー値パイプを使用して、ngForがオブジェクトまたはマップを反復する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d13f81c361ce43971a48c424f3851c8dbc4f0ebf" translate="yes">
          <source>This exists to support future Ivy work and has no effect currently.</source>
          <target state="translated">これは、将来のIvyの作業をサポートするために存在し、現在は効果がありません。</target>
        </trans-unit>
        <trans-unit id="29df732f2a0c84758770605719258bd4b737a4b9" translate="yes">
          <source>This field contains an array of URLs and &lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;glob-like&lt;/a&gt; URL patterns that will be matched at runtime. It can contain both negative patterns (i.e. patterns starting with &lt;code&gt;!&lt;/code&gt;) and non-negative patterns and URLs.</source>
          <target state="translated">このフィールドには、実行時に照合されるURL配列と&lt;a href=&quot;service-worker-config#glob-patterns&quot;&gt;globに似た&lt;/a&gt; URLパターンが含まれます。 負のパターン（ &lt;code&gt;!&lt;/code&gt; 始まるパターン）と非負のパターンおよびURLの両方を含めることができます。</target>
        </trans-unit>
        <trans-unit id="8a65db321c5e9974fc66318e4ba5bcd4b192ba5d" translate="yes">
          <source>This field contains an array of asset groups, each of which defines a set of asset resources and the policy by which they are cached.</source>
          <target state="translated">このフィールドには、アセットグループの配列が含まれます。各アセットグループは、アセットリソースのセットとそれらがキャッシュされるポリシーを定義します。</target>
        </trans-unit>
        <trans-unit id="39dca8bdfadccce3aa32a1f0f34acf9df4dfd38c" translate="yes">
          <source>This file contains imports and functionality that is available to the entire app.</source>
          <target state="translated">このファイルには、アプリ全体で利用可能なインポートと機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="c09c8b1c3afe0b2f3e211e35dda11d6b49d046a2" translate="yes">
          <source>This file contains options and flags that are essential for Angular applications.</source>
          <target state="translated">このファイルには、Angularアプリケーションに不可欠なオプションとフラグが含まれています。</target>
        </trans-unit>
        <trans-unit id="7774dea1cbb9ba9a9affbe79a52ad87b124f3078" translate="yes">
          <source>This file does the following:</source>
          <target state="translated">このファイルは次のことを行います。</target>
        </trans-unit>
        <trans-unit id="8e6fad8835e771be15a7e60de8d9f839976d92ca" translate="yes">
          <source>This file integrity is especially important when lazy loading modules. A JS bundle may reference many lazy chunks, and the filenames of the lazy chunks are unique to the particular build of the app. If a running app at version &lt;code&gt;X&lt;/code&gt; attempts to load a lazy chunk, but the server has updated to version &lt;code&gt;X + 1&lt;/code&gt; already, the lazy loading operation will fail.</source>
          <target state="translated">このファイルの整合性は、モジュールを遅延ロードするときに特に重要です。 JSバンドルは多くの遅延チャンクを参照する場合があり、遅延チャンクのファイル名はアプリの特定のビルドに固有です。 バージョン &lt;code&gt;X&lt;/code&gt; で実行中のアプリが遅延チャンクをロードしようとしたが、サーバーがすでにバージョン &lt;code&gt;X + 1&lt;/code&gt; に更新されている場合、遅延ロード操作は失敗します。</target>
        </trans-unit>
        <trans-unit id="18dc9ff9208e9157f8adfe6cb8c2bceab30b16aa" translate="yes">
          <source>This first implementation sets the background color of the host element to yellow.</source>
          <target state="translated">この最初の実装は、ホスト要素の背景色を黄色に設定します。</target>
        </trans-unit>
        <trans-unit id="fc36f6372162820e0033b4e4ebdc541bbbe324f4" translate="yes">
          <source>This function &lt;em&gt;must&lt;/em&gt; match the form above: an arrow function of the form &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt;.</source>
          <target state="translated">この関数&lt;em&gt;は&lt;/em&gt;上記のフォームに一致する&lt;em&gt;必要があり&lt;/em&gt;ます： &lt;code&gt;() =&amp;gt; import('...').then(mod =&amp;gt; mod.MODULE)&lt;/code&gt; の形式の矢印関数。</target>
        </trans-unit>
        <trans-unit id="4878fd2cfdcaf11685e5e72d2354cd83ec8f9724" translate="yes">
          <source>This function is functionally the same as &lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt; at this level. It exists for symmetry with &lt;a href=&quot;formgroup#patchValue&quot;&gt;patchValue&lt;/a&gt; on &lt;code&gt;FormGroups&lt;/code&gt; and &lt;code&gt;FormArrays&lt;/code&gt;, where it does behave differently.</source>
          <target state="translated">この関数は、機能的にはこのレベルの&lt;a href=&quot;formcontrol#setValue&quot;&gt;setValue&lt;/a&gt;と同じです。 &lt;code&gt;FormGroups&lt;/code&gt; および &lt;code&gt;FormArrays&lt;/code&gt; の patchValueとの対称性のために存在し、動作が異なります。</target>
        </trans-unit>
        <trans-unit id="56d3f264d77db65b5e665e640dd42a9db6e677ef" translate="yes">
          <source>This function returns an &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorated class that is configured to wire up the Angular and AngularJS injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">この関数は、実際にハイブリッドアプリケーションをブートストラップする必要なく、AngularおよびAngularJSインジェクターを接続するように構成された &lt;code&gt;&lt;a href=&quot;../../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装飾クラスを返します。 これにより、単体テストサービスがより簡単かつ高速になります。</target>
        </trans-unit>
        <trans-unit id="e6acc9bce8fe23418fda41554da4f4e2de103857" translate="yes">
          <source>This function returns an AngularJS module that is configured to wire up the AngularJS and Angular injectors without the need to actually bootstrap a hybrid application. This makes it simpler and faster to unit test services.</source>
          <target state="translated">この関数は、実際にハイブリッドアプリケーションをブートストラップする必要なく、AngularJSとAngularインジェクターを接続するように構成されたAngularJSモジュールを返します。 これにより、単体テストサービスがより簡単かつ高速になります。</target>
        </trans-unit>
        <trans-unit id="ec2de2fde95bef298a51f31a0130f6587e05afec" translate="yes">
          <source>This functionality is only available when you have loaded the full locale data. See the &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;&quot;I18n guide&quot;&lt;/a&gt;.</source>
          <target state="translated">この機能は、完全なロケールデータをロードした場合にのみ使用できます。 &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;「I18nガイド」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="71d1005561ab53d8d9b93d80838e0492d40b9143" translate="yes">
          <source>This general rule can help you build a mental model of attributes and DOM properties: &lt;strong&gt;Attributes initialize DOM properties and then they are done. Property values can change; attribute values can't.&lt;/strong&gt;</source>
          <target state="translated">この一般的なルールは、属性とDOMプロパティのメンタルモデルを構築するのに役立ちます。 &lt;strong&gt;属性はDOMプロパティを初期化してから実行されます。&lt;/strong&gt; &lt;strong&gt;プロパティ値は変更できます。&lt;/strong&gt; &lt;strong&gt;属性値はできません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ed51a3d987c448eabd0caaad7d11446c5f4ee98e" translate="yes">
          <source>This generates a folder for the new component within the customer-dashboard folder and updates the feature module with the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; info:</source>
          <target state="translated">これにより、customer-dashboardフォルダー内に新しいコンポーネントのフォルダーが生成され、 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; 情報で機能モジュールが更新されます。</target>
        </trans-unit>
        <trans-unit id="a8ca933ae9ed34a8a06321e5395d5386f3467055" translate="yes">
          <source>This gives users a meaningful first paint of your application that appears quickly because the browser can simply render the HTML and CSS without the need to initialize any JavaScript.</source>
          <target state="translated">これにより、ブラウザはJavaScriptを初期化せずにHTMLとCSSを簡単にレンダリングできるため、アプリケーションの最初の意味のあるペイントがすぐに表示されます。</target>
        </trans-unit>
        <trans-unit id="7491170871e6c27e83f7232d07de91c8f51b4dc0" translate="yes">
          <source>This glossary lists the most prominent terms and a few less familiar ones with unusual or unexpected definitions.</source>
          <target state="translated">この用語集には、最も有名な用語と、珍しい定義や予期しない定義を含むあまり知られていない用語がリストされています。</target>
        </trans-unit>
        <trans-unit id="fdd0dd4255112079ec8cd2cac891a62c3bc630af" translate="yes">
          <source>This guard returns a synchronous boolean result. If the user is logged in, it returns true and the navigation continues.</source>
          <target state="translated">このガードは、同期ブール結果を返します。 ユーザーがログインしている場合、trueが返され、ナビゲーションが続行されます。</target>
        </trans-unit>
        <trans-unit id="71b0a76f127063119253692ead9f31153f3cf61f" translate="yes">
          <source>This guide assumes you are already familiar with developing and building Angular applications using the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">このガイドは、 &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;を使用したAngularアプリケーションの開発と構築にすでに精通していることを前提としています 。</target>
        </trans-unit>
        <trans-unit id="f91f9ca40378a30abae72457a623c7d9b92e26f1" translate="yes">
          <source>This guide contains a summary of all Angular APIs and features that are currently deprecated.</source>
          <target state="translated">このガイドには、現在廃止されているすべてのAngular APIおよび機能の概要が含まれています。</target>
        </trans-unit>
        <trans-unit id="a03008f3c8f9dc5daf041fcc08d5096f9ec3c5aa" translate="yes">
          <source>This guide covers the basic Angular animation features to get you started on adding Angular animations to your project.</source>
          <target state="translated">このガイドでは、Angularアニメーションをプロジェクトに追加するための基本的なAngularアニメーション機能について説明します。</target>
        </trans-unit>
        <trans-unit id="5089559fca821bd8df702b50f4397404eaa6a17a" translate="yes">
          <source>This guide covers the router's primary features, illustrating them through the evolution of a small application that you can &lt;span&gt;run live in the browser&lt;/span&gt;.</source>
          <target state="translated">このガイドでは、ルーターの主要な機能について説明し&lt;span&gt;、ブラウザーでライブで実行&lt;/span&gt;できる小さなアプリケーションの進化を通じてそれらを説明します。</target>
        </trans-unit>
        <trans-unit id="16b4b3c7d27b05a7a93d7585fd80da6f87695735" translate="yes">
          <source>This guide demonstrates that scenario with an example in the Tour of Heroes theme. Imagine an outer &lt;code&gt;HeroListComponent&lt;/code&gt; that displays a list of super heroes.</source>
          <target state="translated">このガイドでは、Tour of Heroesテーマの例を使用してそのシナリオを示します。 スーパーヒーローのリストを表示する外部の &lt;code&gt;HeroListComponent&lt;/code&gt; を想像してください。</target>
        </trans-unit>
        <trans-unit id="94795f12569496bcae1ed95d5adfb2856a55c12a" translate="yes">
          <source>This guide describes &lt;strong&gt;Angular Universal&lt;/strong&gt;, a technology that renders Angular applications on the server.</source>
          <target state="translated">このガイドでは、 &lt;strong&gt;Angular Universalを&lt;/strong&gt;説明しています。これは、Angularアプリケーションをサーバー上でレンダリングする技術です。</target>
        </trans-unit>
        <trans-unit id="7c79df812f600818480fccaad006560ab578d116" translate="yes">
          <source>This guide describes development of a multi-page routed sample application. Along the way, it highlights design decisions and describes key features of the router such as:</source>
          <target state="translated">このガイドでは、複数ページのルーティングサンプルアプリケーションの開発について説明します。 途中で、設計上の決定事項を強調し、次のようなルーターの主要な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="5eaa5268ab448450e02df4dcd7d854a3b74ebfd4" translate="yes">
          <source>This guide describes how to develop locally on your own machine. Setting up a new project on your machine is quick and easy with the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart seed on github&lt;/a&gt;.</source>
          <target state="translated">このガイドでは、独自のマシンでローカルに開発する方法について説明します。 &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;githubのQuickStartシード&lt;/a&gt;を使用すると、マシンに新しいプロジェクトを簡単にセットアップできます。</target>
        </trans-unit>
        <trans-unit id="a071d6040e5b884251f92cb51a3a612a4400f9c1" translate="yes">
          <source>This guide describes some of the built-in tools for efficiently migrating AngularJS projects over to the Angular platform, one piece at a time. It is very similar to &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; with the exception that this one uses the &lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule()&lt;/a&gt; helper function instead of the &lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt; class. This affects how the app is bootstrapped and how change detection is propagated between the two frameworks. It allows you to upgrade incrementally while improving the speed of your hybrid apps and leveraging the latest of Angular in AngularJS apps early in the process of upgrading.</source>
          <target state="translated">このガイドでは、AngularJSプロジェクトをAngularプラットフォームに1つずつ効率的に移行するための組み込みツールについて説明します。 これは&lt;a href=&quot;upgrade&quot;&gt;、AngularJS&lt;/a&gt;からのアップグレードと非常に似ていますが、この&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;モジュール&lt;/a&gt;ではUpgradeModuleクラスの代わりに&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule（）&lt;/a&gt;ヘルパー関数を使用する点が異なります。 これは、アプリのブートストラップ方法と、2つのフレームワーク間での変更検出の伝播方法に影響します。 ハイブリッドアプリの速度を向上させ、アップグレードプロセスの初期段階でAngularJSアプリで最新のAngularを活用しながら、段階的にアップグレードできます。</target>
        </trans-unit>
        <trans-unit id="52f91de3b44e77776bb5d72dda1262736b0f2d6c" translate="yes">
          <source>This guide explains how to build and test Angular apps with Bazel.</source>
          <target state="translated">このガイドでは、Bazelを使用してAngularアプリをビルドおよびテストする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="a7f2364975bf639296fbad2e6ccfbf1dc9b2ff63" translate="yes">
          <source>This guide explains how to set up your environment for Angular development using the &lt;a href=&quot;cli&quot;&gt;Angular CLI tool&lt;/a&gt;. It includes information about prerequisites, installing the CLI, creating an initial workspace and starter app, and running that app locally to verify your setup.</source>
          <target state="translated">このガイドでは、 &lt;a href=&quot;cli&quot;&gt;Angular CLIツール&lt;/a&gt;を使用して、 Angular開発用に環境をセットアップする方法について説明します。 前提条件、CLIのインストール、初期ワークスペースとスターターアプリの作成、そのアプリをローカルで実行して設定を確認することに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="e4e5dc8be1da9c2744ee3e6ff19277fa157b7049" translate="yes">
          <source>This guide explains how to specify metadata and apply available compiler options to compile your applications efficiently using the AOT compiler.</source>
          <target state="translated">このガイドでは、メタデータを指定し、利用可能なコンパイラオプションを適用して、AOTコンパイラを使用してアプリケーションを効率的にコンパイルする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="e8e0ddc6e4a1bac092793252db146528b491a1a7" translate="yes">
          <source>This guide follows that approach. It has a &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; folder under &lt;code&gt;src/&lt;/code&gt;. Assets within that folder have a filename extension that matches their associated locale.</source>
          <target state="translated">このガイドはそのアプローチに従います。 &lt;code&gt;src/&lt;/code&gt; 下に &lt;code&gt;&lt;a href=&quot;../api/common/nglocalelocalization#locale&quot;&gt;locale&lt;/a&gt;&lt;/code&gt; フォルダーがあります 。 そのフォルダー内のアセットには、関連するロケールに一致するファイル名拡張子があります。</target>
        </trans-unit>
        <trans-unit id="a4fe0eebc6c53dfd8ba7ae172b29d6085d11576f" translate="yes">
          <source>This guide helps you transition from AngularJS to Angular by mapping AngularJS syntax to the equivalent Angular syntax.</source>
          <target state="translated">このガイドは、AngularJS構文を同等のAngular構文にマッピングすることにより、AngularJSからAngularに移行するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="8b1d6ce9f824c1b57c26e8b4535de072da1382f6" translate="yes">
          <source>This guide is a &lt;em&gt;living document&lt;/em&gt;; it changes over time. We strive for consistency to the extent feasible, but you may find parts of our documentation that don't match this style guide. When in doubt, &lt;strong&gt;follow this guide rather than imitating existing documents.&lt;/strong&gt;</source>
          <target state="translated">このガイドは&lt;em&gt;生きた文書&lt;/em&gt;です。 時間とともに変化します。 可能な範囲で一貫性を保つよう努めていますが、このスタイルガイドと一致しないドキュメントの一部を見つける場合があります。 疑問がある場合は、 &lt;strong&gt;既存のドキュメントを模倣するのではなく、このガイド&lt;/strong&gt;に&lt;strong&gt;従ってください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b86a88184ea70d17effff794189dd4cb85c357f" translate="yes">
          <source>This guide looks at how Angular manipulates the DOM with &lt;strong&gt;structural directives&lt;/strong&gt; and how you can write your own structural directives to do the same thing.</source>
          <target state="translated">このガイドでは、Angularが&lt;strong&gt;構造ディレクティブ&lt;/strong&gt;を使用してDOMを操作する方法と、同じことを行う独自の構造ディレクティブを作成する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="593d82739fc5c50f931f13f1ea5af12b64068cec" translate="yes">
          <source>This guide offers tips and techniques for unit and integration testing Angular applications.</source>
          <target state="translated">このガイドは、Angularアプリケーションの単体および統合テストのヒントとテクニックを提供します。</target>
        </trans-unit>
        <trans-unit id="c0d6e75bcf91e32b2e66ca76df8b63da387d1f38" translate="yes">
          <source>This guide proceeds in phases, marked by milestones, starting from a simple two-pager and building toward a modular, multi-view design with child routes.</source>
          <target state="translated">このガイドは、単純な2ページから始まり、子ルートを含むモジュール式のマルチビュー設計に向けて、マイルストーンでマークされた段階で進行します。</target>
        </trans-unit>
        <trans-unit id="d3c69f9ce0aa91fc4ff28ea4156ea22eb64b216f" translate="yes">
          <source>This guide provides information to help you decide which type of form works best for your situation. It introduces the common building blocks used by both approaches. It also summarizes the key differences between the two approaches, and demonstrates those differences in the context of setup, data flow, and testing.</source>
          <target state="translated">このガイドは、状況に最適なフォームのタイプを決定するのに役立つ情報を提供します。 両方のアプローチで使用される一般的なビルディングブロックを紹介します。 また、2つのアプローチの主な違いを要約し、セットアップ、データフロー、およびテストのコンテキストでそれらの違いを示します。</target>
        </trans-unit>
        <trans-unit id="5d34585a93f67fec9f496e464bff52a80a3a9cbe" translate="yes">
          <source>This guide uses the StackBlitz Generator to show you a ready-made, simple application that you can examine and play with interactively. In actual development you will typically use the &lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;, a powerful command-line tool that lets you generate and modify applications. For more information, see the &lt;a href=&quot;https://angular.io/cli&quot;&gt;CLI Overview&lt;/a&gt;.</source>
          <target state="translated">このガイドでは、StackBlitz Generatorを使用して、インタラクティブに調べて操作できる既製のシンプルなアプリケーションを示します。 実際の開発では、通常、 &lt;a href=&quot;guide/glossary#command-line-interface-cli&quot;&gt;Angular CLI&lt;/a&gt;を使用します。これは、アプリケーションを生成および変更できる強力なコマンドラインツールです。 詳細については、 &lt;a href=&quot;https://angular.io/cli&quot;&gt;CLIの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e586281684b3e248038b701f36893a54ff5a55bc" translate="yes">
          <source>This guide won't repeat how to &lt;em&gt;use&lt;/em&gt; them. But it does explain &lt;em&gt;how they work&lt;/em&gt; and how to &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own&lt;/a&gt; structural directive.</source>
          <target state="translated">このガイドでは、それらの&lt;em&gt;使用&lt;/em&gt;方法を繰り返しません。 しかし、 &lt;em&gt;それら&lt;/em&gt;が&lt;em&gt;どのように機能&lt;/em&gt;し&lt;a href=&quot;structural-directives#unless&quot;&gt;、独自の&lt;/a&gt;構造ディレクティブを作成する&lt;em&gt;か&lt;/em&gt;については説明しています 。</target>
        </trans-unit>
        <trans-unit id="051838d2f6789f70fb2f89d0d3b7b55f2fd66a1e" translate="yes">
          <source>This has been deprecated for a few reasons. First, developers have found this pattern confusing. It seems like the actual &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive is being used, but in fact it's an input/output property named &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; on the reactive form directive that simply approximates (some of) its behavior. Specifically, it allows getting/setting the value and intercepting value events. However, some of &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;'s other features - like delaying updates with&lt;code&gt;ngModelOptions&lt;/code&gt; or exporting the directive - simply don't work, which has understandably caused some confusion.</source>
          <target state="translated">これはいくつかの理由で廃止されました。 最初に、開発者はこのパターンを紛らわしく感じました。 実際の &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブが使用されているように見えますが、実際には、その動作（の一部）を単純に近似するリアクティブフォームディレクティブの &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; という名前の入出力プロパティです。 具体的には、値の取得/設定と値イベントのインターセプトが可能です。 ただし、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; のその他の機能（ ngModelOptionsによる更新の遅延やディレクティブのエクスポートなど）の一部は、単に動作しないため、当然ながら混乱が生じています。</target>
        </trans-unit>
        <trans-unit id="bb14c528bca95d7e4e8b5c0e75434cfae54a895b" translate="yes">
          <source>This has been deprecated to keep selectors consistent with other core Angular selectors, as element selectors are typically written in kebab-case.</source>
          <target state="translated">エレメントセレクタは通常ケバブケースで記述されているため、セレクタは他のコアAngularセレクタとの一貫性を保つために廃止されました。</target>
        </trans-unit>
        <trans-unit id="1095f7e1edc68ff18dd9e80137271b101bd86c29" translate="yes">
          <source>This helper class should be used as a base class for creating Angular directives that wrap AngularJS components that need to be &quot;upgraded&quot;.</source>
          <target state="translated">このヘルパークラスは、「アップグレード」が必要なAngularJSコンポーネントをラップするAngularディレクティブを作成するための基本クラスとして使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a9910a470680f461d5e2a2614c8675ebcbbb9c4" translate="yes">
          <source>This helper function returns a factory function that provides access to the Angular service identified by the &lt;code&gt;token&lt;/code&gt; parameter.</source>
          <target state="translated">このヘルパー関数は、 &lt;code&gt;token&lt;/code&gt; パラメーターで識別されるAngularサービスへのアクセスを提供するファクトリー関数を返します。</target>
        </trans-unit>
        <trans-unit id="3feef579a17c24eb18bbf65e912c0af25f671bc1" translate="yes">
          <source>This helper function returns a factory function to be used for registering an AngularJS wrapper directive for &quot;downgrading&quot; an Angular component.</source>
          <target state="translated">このヘルパー関数は、Angularコンポーネントを「ダウングレード」するためのAngularJSラッパーディレクティブを登録するために使用されるファクトリ関数を返します。</target>
        </trans-unit>
        <trans-unit id="47aa8d05f2d4f3b4a736e0ea1dd586657dd4775e" translate="yes">
          <source>This helper is for testing services not Components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">このヘルパーは、コンポーネントではなくサービスをテストするためのものです。 コンポーネントのテストでは、ハイブリッドアプリをブートストラップする必要があります。 詳細については、 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4eef553362f7318dd361d3d0f6a5760f3585a142" translate="yes">
          <source>This helper is for testing services not components. For Component testing you must still bootstrap a hybrid app. See &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; for more information.</source>
          <target state="translated">このヘルパーは、コンポーネントではなくサービスをテストするためのものです。 コンポーネントのテストでは、ハイブリッドアプリをブートストラップする必要があります。 詳細については、 &lt;code&gt;&lt;a href=&quot;../upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b9ba1412b83f44b56ecd7943b94f7e6d7ad49fa" translate="yes">
          <source>This helper's observable emits the &lt;code&gt;data&lt;/code&gt; value in the next turn of the JavaScript engine.</source>
          <target state="translated">このヘルパーのオブザーバブルは、JavaScriptエンジンの次のターンで &lt;code&gt;data&lt;/code&gt; 値を出力します。</target>
        </trans-unit>
        <trans-unit id="326ed6100992d8304a4c4512b4ef1b97e697f367" translate="yes">
          <source>This highlight directive has a single customizable property. In a real app, it may need more.</source>
          <target state="translated">このハイライトディレクティブには、カスタマイズ可能なプロパティが1つあります。 実際のアプリでは、さらに必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="a8424043c89606ac692d26ae91eabcf058b3b255" translate="yes">
          <source>This implies that the component bindings will always follow the semantics of the instantiation framework.</source>
          <target state="translated">これは、コンポーネントのバインディングが常にインスタンス化フレームワークのセマンティクスに従うことを意味します。</target>
        </trans-unit>
        <trans-unit id="13526051beab5c2cb1409738f1705df68acfffb7" translate="yes">
          <source>This indicates the last time the service worker checked for a new version, or update, of the app. &lt;code&gt;never&lt;/code&gt; indicates that the service worker has never checked for an update.</source>
          <target state="translated">これは、サービスワーカーがアプリの新しいバージョンまたは更新を最後にチェックしたことを示します。 &lt;code&gt;never&lt;/code&gt; は、サービスワーカーが更新を確認したことがないことを示します。</target>
        </trans-unit>
        <trans-unit id="c6866fb4d3be58dfa31c9fcb707a31824d7cdb10" translate="yes">
          <source>This initial value never changes.</source>
          <target state="translated">この初期値は変更されません。</target>
        </trans-unit>
        <trans-unit id="8fdbd80f7713591b405acb108f078354e86bdf7e" translate="yes">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics &lt;a href=&quot;glossary#collection&quot;&gt;collection&lt;/a&gt; with an initial named schematic. The collection folder is a workspace for schematics. You can also use the &lt;code&gt;schematics&lt;/code&gt; command to add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">これにより、 &lt;code&gt;schematics&lt;/code&gt; 実行可能ファイルがインストールされます。これを使用して、最初の名前付きスケマティックで新しいスケマティック&lt;a href=&quot;glossary#collection&quot;&gt;コレクション&lt;/a&gt;を作成できます。 コレクションフォルダーは、回路図のワークスペースです。 また、 &lt;code&gt;schematics&lt;/code&gt; コマンドを使用して、既存のコレクションに新しい回路図を追加したり、既存の回路図を拡張したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="f4f376c92f4d721a1cb60edfb651e536ba4f5e3e" translate="yes">
          <source>This installs the &lt;code&gt;schematics&lt;/code&gt; executable, which you can use to create a new schematics collection in its own project folder, add a new schematic to an existing collection, or extend an existing schematic.</source>
          <target state="translated">これにより、 &lt;code&gt;schematics&lt;/code&gt; 実行可能ファイルがインストールされます。これを使用して、独自のプロジェクトフォルダに新しい回路図コレクションを作成したり、既存のコレクションに新しい回路図を追加したり、既存の回路図を拡張したりできます。</target>
        </trans-unit>
        <trans-unit id="b28a949d24ede3e30d4f2425cea4c004accffb6c" translate="yes">
          <source>This interface allows access to the underlying &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt;, and allows responding with &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s or &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">このインターフェイスは、基になる &lt;code&gt;&lt;a href=&quot;../httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; へのアクセスを許可し、 &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; での応答を許可します。</target>
        </trans-unit>
        <trans-unit id="f14b1937cf79a6a85c55fe443bf06ded14c39fe9" translate="yes">
          <source>This is a &lt;em&gt;cold&lt;/em&gt; observable that waits three frames and then emits an error, The hash (&lt;code&gt;#&lt;/code&gt;) indicates the timing of the error that is specified in the third argument. The second argument is null because the observable never emits a value.</source>
          <target state="translated">これは、3つのフレームを待機してからエラーを発行する&lt;em&gt;コールド&lt;/em&gt;オブザーバブルです。ハッシュ（ &lt;code&gt;#&lt;/code&gt; ）は、3番目の引数で指定されたエラーのタイミングを示します。 observableは値を発行しないため、2番目の引数はnullです。</target>
        </trans-unit>
        <trans-unit id="325c383689dc505c167a4efdf3ff1bfffcda2dac" translate="yes">
          <source>This is a common middleware pattern found in frameworks such as Express.js.</source>
          <target state="translated">これは、Express.jsなどのフレームワークで見られる一般的なミドルウェアパターンです。</target>
        </trans-unit>
        <trans-unit id="8a0404a183044b9e9c6ffe40bc631a912f26a05f" translate="yes">
          <source>This is a considerable effort and it often isn't worth it, especially since you are in the process of moving your code to Angular. Instead, declare &lt;code&gt;angular&lt;/code&gt; as &lt;code&gt;angular.IAngularStatic&lt;/code&gt; to indicate it is a global variable and still have full typing support.</source>
          <target state="translated">これはかなりの努力であり、多くの場合、それは価値がありません。特に、コードをAngularに移行しているためです。 代わりに、 &lt;code&gt;angular.IAngularStatic&lt;/code&gt; としてangularを宣言して、それがグローバル変数であり、依然として完全な型指定サポートがあることを示します。</target>
        </trans-unit>
        <trans-unit id="ebfc1fc3ae76182d341bfaf13595ca3c04aee718" translate="yes">
          <source>This is a general purpose guard&amp;mdash;you can imagine other features that require authenticated users&amp;mdash;so you generate an &lt;code&gt;AuthGuard&lt;/code&gt; in the &lt;code&gt;auth&lt;/code&gt; folder.</source>
          <target state="translated">これは汎用のガードです（認証されたユーザーを必要とする他の機能を想像できます）ので、 &lt;code&gt;auth&lt;/code&gt; フォルダーに &lt;code&gt;AuthGuard&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="745624b6290490997a074676dc013e0ad3433575" translate="yes">
          <source>This is a good candidate for an impure pipe because the &lt;code&gt;transform&lt;/code&gt; function is trivial and fast.</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; 関数は簡単で高速であるため、これは不純なパイプの適切な候補です。</target>
        </trans-unit>
        <trans-unit id="5b9b9bda285209856e8b9f18df0fc5414bc4d50e" translate="yes">
          <source>This is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for you custom element. But it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</source>
          <target state="translated">これは、カスタム要素のタイプチェックやオートコンプリートサポートなどのTypeScript機能をすばやく取得するための良い方法です。 ただし、発生するたびに戻り値の型をキャストする必要があるため、複数の場所で必要な場合は面倒になります。</target>
        </trans-unit>
        <trans-unit id="6520fb09eb7f64f65fec620f22a827ad129c5147" translate="yes">
          <source>This is a nonissue in Angular because ES 2015 modules handle the namespacing for you.</source>
          <target state="translated">ES 2015モジュールが名前空間を処理するため、これはAngularでは問題になりません。</target>
        </trans-unit>
        <trans-unit id="b1360d42910235d11c8da57171809f03949b89f4" translate="yes">
          <source>This is a tree of activated route snapshots. Every node in this tree knows about the &quot;consumed&quot; URL segments, the extracted parameters, and the resolved data.</source>
          <target state="translated">これは、アクティブ化されたルートスナップショットのツリーです。 このツリーのすべてのノードは、「消費された」URLセグメント、抽出されたパラメーター、および解決されたデータについて認識しています。</target>
        </trans-unit>
        <trans-unit id="308f6f1ffa549dea73f1268332bb7efda867f32b" translate="yes">
          <source>This is a typical &quot;&lt;em&gt;service-in-service&lt;/em&gt;&quot; scenario: you inject the &lt;code&gt;MessageService&lt;/code&gt; into the &lt;code&gt;HeroService&lt;/code&gt; which is injected into the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">これは典型的な「 &lt;em&gt;サービスインサービス&lt;/em&gt; 」シナリオです &lt;code&gt;HeroService&lt;/code&gt; に注入されるHeroServiceに &lt;code&gt;MessageService&lt;/code&gt; を注入します。</target>
        </trans-unit>
        <trans-unit id="cd1783005dfb776d1af2f04f6577b41eaa1ff956" translate="yes">
          <source>This is a very simple example, but the use of a schema for validation can be very powerful. For more information, see the &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schemas website&lt;/a&gt;.</source>
          <target state="translated">これは非常に単純な例ですが、検証にスキーマを使用することは非常に強力です。 詳細については、 &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSONスキーマのWebサイトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="98e22f6dda8c73c831d901b714a07d0b7689f227" translate="yes">
          <source>This is actually a convenience method, implemented as &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt;.</source>
          <target state="translated">これは実際には、 &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt; として実装される便利なメソッドです 。</target>
        </trans-unit>
        <trans-unit id="dd436a739a02b80b45abdb0c1ad5a566028baa06" translate="yes">
          <source>This is actually a pretty good starting point. The code uses the AngularJS 1.5 component API and the organization follows the &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJS Style Guide&lt;/a&gt;, which is an important &lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;preparation step&lt;/a&gt; before a successful upgrade.</source>
          <target state="translated">これは実際にはかなり良い出発点です。 コードはAngularJS 1.5コンポーネントAPIを使用し、組織は&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md&quot;&gt;AngularJSスタイルガイドに&lt;/a&gt;従います。これはアップグレードが成功&lt;a href=&quot;upgrade#follow-the-angular-styleguide&quot;&gt;する&lt;/a&gt;前の重要な準備手順です。</target>
        </trans-unit>
        <trans-unit id="28fd6969c6d6369ceb7285ab5a770ea3315ffab8" translate="yes">
          <source>This is an example of Angular's &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; syntax.</source>
          <target state="translated">これは、Angularの&lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;イベントバインド&lt;/a&gt;構文の例です。</target>
        </trans-unit>
        <trans-unit id="edb830bd9f42a141071913f2de5f0ee10c46edce" translate="yes">
          <source>This is an interim code sample that will allow you to provide and use the &lt;code&gt;HeroService&lt;/code&gt;. At this point, the code will differ from the &lt;code&gt;HeroService&lt;/code&gt; in the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;HeroService&lt;/code&gt; を提供および使用できるようにする暫定的なコードサンプルです。 この時点で、コードは&lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;「最終コードレビュー」の&lt;/a&gt; &lt;code&gt;HeroService&lt;/code&gt; とは異なります 。</target>
        </trans-unit>
        <trans-unit id="b2b55aa5e71e846d741afa9a4891157e8f09cdfb" translate="yes">
          <source>This is an opaque value the router will give to a custom route reuse strategy to store and retrieve later on.</source>
          <target state="translated">これは、後で保存および取得するために、ルーターがカスタムルート再利用戦略に与える不透明な値です。</target>
        </trans-unit>
        <trans-unit id="47187f9c60a312936c257bcbf674f7a846c9c3b7" translate="yes">
          <source>This is disagreeable. The word, &lt;code&gt;appHighlight&lt;/code&gt;, is a terrible property name and it doesn't convey the property's intent.</source>
          <target state="translated">これは嫌です。 単語 &lt;code&gt;appHighlight&lt;/code&gt; はひどいプロパティ名であり、プロパティの意図を伝えません。</target>
        </trans-unit>
        <trans-unit id="402dd3cc505c92b3ebc8041d5e0f5ce4dca64317" translate="yes">
          <source>This is especially useful when child components are defined with an empty path string, as in the following example. With this configuration, navigating to '/parent/10' creates the main child and aux components.</source>
          <target state="translated">これは、次の例のように、空のパス文字列で子コンポーネントが定義されている場合に特に便利です。 この構成では、「/ parent / 10」に移動すると、メインの子および補助コンポーネントが作成されます。</target>
        </trans-unit>
        <trans-unit id="f0a8eee1520084e40ddb251d4ee70816b2810239" translate="yes">
          <source>This is how you associate a template with logic, which is defined in the component class.</source>
          <target state="translated">これは、テンプレートをコンポーネントクラスで定義されているロジックに関連付ける方法です。</target>
        </trans-unit>
        <trans-unit id="3a2de92bdd97f6fbeeca5fdc9ee29a195958c537" translate="yes">
          <source>This is illustrated in the following image, which displays the logging date.</source>
          <target state="translated">これは、ロギング日付を表示する次の画像に示されています。</target>
        </trans-unit>
        <trans-unit id="4461ea0ba25396c618a6f8a0d7132ba6f60a3420" translate="yes">
          <source>This is manifestly more complicated than &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and rightly so. The &lt;code&gt;NgFor&lt;/code&gt; directive has more features, both required and optional, than the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; shown in this guide. At minimum &lt;code&gt;NgFor&lt;/code&gt; needs a looping variable (&lt;code&gt;let hero&lt;/code&gt;) and a list (&lt;code&gt;heroes&lt;/code&gt;).</source>
          <target state="translated">これは明らかに &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; よりも複雑であり 、当然そうです。 &lt;code&gt;NgFor&lt;/code&gt; ディレクティブには、このガイドに示されている &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; よりも多くの機能（必須およびオプション）があります。 少なくとも &lt;code&gt;NgFor&lt;/code&gt; には、ループ変数（ &lt;code&gt;let hero&lt;/code&gt; ）とリスト（ &lt;code&gt;heroes&lt;/code&gt; ）が必要です。</target>
        </trans-unit>
        <trans-unit id="7efe4c9363e221388c4cd38d8c3a512cea782501" translate="yes">
          <source>This is often the case with &lt;em&gt;routing components&lt;/em&gt;. As a rule you test the component, not the router, and care only if the component navigates with the right address under the given conditions.</source>
          <target state="translated">これは、 &lt;em&gt;ルーティングコンポーネント&lt;/em&gt;の場合によくあり&lt;em&gt;ます&lt;/em&gt; 。 原則として、ルーターではなくコンポーネントをテストし、指定された条件下でコンポーネントが正しいアドレスでナビゲートする場合にのみ注意します。</target>
        </trans-unit>
        <trans-unit id="60412eee3362861bf6dd3a41df31f62ad91b66a4" translate="yes">
          <source>This is one of the three fundamental building blocks of Angular forms, along with &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It extends the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; class that implements most of the base functionality for accessing the value, validation status, user interactions and events.</source>
          <target state="translated">これは、Angularフォームの3つの基本的な構成要素の1つであり、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; とともに使用されます 。 値、検証ステータス、ユーザーインタラクションおよびイベントにアクセスするためのほとんどの基本機能を実装する &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; クラスを拡張します。</target>
        </trans-unit>
        <trans-unit id="51b5158af868b9258e387116060b9c47ff8fb973" translate="yes">
          <source>This is similar to the phone list component. The new wrinkle is the &lt;code&gt;RouteParams&lt;/code&gt; type annotation that identifies the &lt;code&gt;routeParams&lt;/code&gt; dependency.</source>
          <target state="translated">これは、電話リストコンポーネントに似ています。 新しいリンクルは、 &lt;code&gt;routeParams&lt;/code&gt; 依存関係を識別する &lt;code&gt;RouteParams&lt;/code&gt; タイプの注釈です。</target>
        </trans-unit>
        <trans-unit id="804a4031c3f14f499869d2204177c75dee70978b" translate="yes">
          <source>This is the SHA1 hash of the most up-to-date version of the app that the service worker knows about.</source>
          <target state="translated">これは、サービスワーカーが知っているアプリの最新バージョンのSHA1ハッシュです。</target>
        </trans-unit>
        <trans-unit id="16525e697531723027c408ae314d617a3cee22fa" translate="yes">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の基本クラスです。</target>
        </trans-unit>
        <trans-unit id="32e4434471515868a1b3925d1547dbdde41ab113" translate="yes">
          <source>This is the base class for &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の基本クラスです。</target>
        </trans-unit>
        <trans-unit id="09772e314d49341cf87eb2642be70a9dc5fc7d9f" translate="yes">
          <source>This is the default option.</source>
          <target state="translated">これがデフォルトのオプションです。</target>
        </trans-unit>
        <trans-unit id="2f800de1b08868e8b8e49cce1d56cd86eef0162b" translate="yes">
          <source>This is the inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">これは内側の &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; です：</target>
        </trans-unit>
        <trans-unit id="cff98b359039fbd0f2a88788c0ca5a17c544f06f" translate="yes">
          <source>This is the outer &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">これは外側の &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; です：</target>
        </trans-unit>
        <trans-unit id="6fbcbb942159ed1a22b254df114719bad20d47a4" translate="yes">
          <source>This is the perfect infiltration job for a directive. The heroes will never know they're being watched.</source>
          <target state="translated">これは、指令に対する完璧な浸透作業です。 ヒーローは、自分が監視されていることを知ることはありません。</target>
        </trans-unit>
        <trans-unit id="4ccba53d17df213bee27c394101fd3424e3c0b6f" translate="yes">
          <source>This is the place to free resources that won't be garbage collected automatically. Unsubscribe from Observables and DOM events. Stop interval timers. Unregister all callbacks that this directive registered with global or application services. You risk memory leaks if you neglect to do so.</source>
          <target state="translated">これは、自動的にガベージコレクションされないリソースを解放する場所です。 ObservablesおよびDOMイベントからサブスクライブ解除します。 インターバルタイマーを停止します。 このディレクティブがグローバルサービスまたはアプリケーションサービスに登録したコールバックをすべて登録解除します。 怠ると、メモリリークの危険があります。</target>
        </trans-unit>
        <trans-unit id="87a555dd35ff17530be3a1fe3b938e47130474eb" translate="yes">
          <source>This is the simplest production-ready deployment of your application.</source>
          <target state="translated">これは、アプリケーションの最も簡単な本番環境への展開です。</target>
        </trans-unit>
        <trans-unit id="c58e06956699ce3b5d0d19719918b6ae26cfc2f3" translate="yes">
          <source>This is the time to notify another part of the application that the component is going away.</source>
          <target state="translated">これは、アプリケーションの別の部分にコンポーネントがなくなることを通知する時間です。</target>
        </trans-unit>
        <trans-unit id="5d3cebde8a1c748058ff6feaf6d6fd7fffbd33c4" translate="yes">
          <source>This is used to parse the response appropriately before returning it to the requestee.</source>
          <target state="translated">これは、要求先に返す前に応答を適切に解析するために使用されます。</target>
        </trans-unit>
        <trans-unit id="4575447306482a712f678b2a9d395b8a07e7fe6d" translate="yes">
          <source>This is usually created automatically by &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt;.</source>
          <target state="translated">通常、これは &lt;code&gt;Injector.resolveAndCreate&lt;/code&gt; によって自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="8d4f6bc5f09e6fd5355e7d9f2a9258c893547afc" translate="yes">
          <source>This is very important since it allows you to repurpose the components for any type of survey as long as it's compatible with the &lt;em&gt;question&lt;/em&gt; object model. The key is the dynamic data binding of metadata used to render the form without making any hardcoded assumptions about specific questions. In addition to control metadata, you are also adding validation dynamically.</source>
          <target state="translated">これは、 &lt;em&gt;質問&lt;/em&gt;オブジェクトモデルと互換性がある限り、あらゆるタイプの調査にコンポーネントを再利用できるため、非常に重要です。 重要なのは、特定の質問についてハードコーディングされた仮定を行わずにフォームをレンダリングするために使用されるメタデータの動的データバインディングです。 メタデータを制御することに加えて、検証を動的に追加します。</target>
        </trans-unit>
        <trans-unit id="30cc4dc7a4b6f15bc6646908fab43b52eb183eb7" translate="yes">
          <source>This isn't an oversight. Angular doesn't offer such pipes because they perform poorly and prevent aggressive minification. Both &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; require parameters that reference object properties. Earlier in this page, you learned that such pipes must be &lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;impure&lt;/a&gt; and that Angular calls impure pipes in almost every change-detection cycle.</source>
          <target state="translated">これは見落としではありません。 Angularは、パフォーマンスが低く、積極的な縮小を防ぐため、このようなパイプを提供しません。 &lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;orderBy&lt;/code&gt; の両方には、オブジェクトプロパティを参照するパラメーターが必要です。 このページの前半で、そのようなパイプは&lt;a href=&quot;pipes#pure-and-impure-pipes&quot;&gt;不純&lt;/a&gt;でなければならず、Angular呼び出しはほとんどすべての変更検出サイクルでパイプを不純にすることを学びました。</target>
        </trans-unit>
        <trans-unit id="bf87feeb4d56bb09ecc40ffedbf5b9b09eea90de" translate="yes">
          <source>This isn't necessarily good design. This example is examining &lt;em&gt;whether a component can inject its parent via the parent's base class&lt;/em&gt;.</source>
          <target state="translated">これは必ずしも良い設計ではありません。 この例では&lt;em&gt;、コンポーネントが親の基本クラスを介してその親を注入できるかどうか&lt;/em&gt;を調べ&lt;em&gt;ています&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="6eaca4844068379a7e60176fbbfc6443308fe713" translate="yes">
          <source>This isn't usually a problem, especially if you adhere to the recommended &lt;em&gt;one class per file&lt;/em&gt; rule. But sometimes circular references are unavoidable. You're in a bind when class 'A' refers to class 'B' and 'B' refers to 'A'. One of them has to be defined first.</source>
          <target state="translated">これは通常、特に&lt;em&gt;ファイル&lt;/em&gt;ルール&lt;em&gt;ごとに&lt;/em&gt;推奨される&lt;em&gt;1つのクラス&lt;/em&gt;を順守している場合には問題になりません。 ただし、循環参照が避けられない場合があります。 クラス 'A'がクラス 'B'を参照し、 'B'が 'A'を参照している場合、バインド状態にあります。 それらの1つを最初に定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="ee0b3ac2c6c7f7ea1c3093b1d935ac0ccfed0cd9" translate="yes">
          <source>This list of modules are those that export components, directives, or pipes that the component templates in this module reference. In this case, the component is &lt;code&gt;AppComponent&lt;/code&gt;, which references components, directives, or pipes in &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. A component template can reference another component, directive, or pipe when the referenced class is declared in this module or the class was imported from another module.</source>
          <target state="translated">このモジュールのリストは、このモジュール内のコンポーネントテンプレートが参照するコンポーネント、ディレクティブ、またはパイプをエクスポートするものです。 この場合、コンポーネントは &lt;code&gt;AppComponent&lt;/code&gt; であり、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; のコンポーネント、ディレクティブ、またはパイプを参照します 。 参照されているクラスがこのモジュールで宣言されている場合、またはクラスが別のモジュールからインポートされた場合、コンポーネントテンプレートは別のコンポーネント、ディレクティブ、またはパイプを参照できます。</target>
        </trans-unit>
        <trans-unit id="4a9afe5b810e772d3eb663f9b40c1dd4d79aaccb" translate="yes">
          <source>This makes the controller code look a lot more like Angular already. You're all set to actually introduce Angular into the project.</source>
          <target state="translated">これにより、コントローラーのコードはすでにAngularのように見えます。 Angularを実際にプロジェクトに導入する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="cf52b88eeaa1d49f9b18045164c3a40eae3476c3" translate="yes">
          <source>This makes the provider visible to every class in the application that knows the provider's lookup token, or name.</source>
          <target state="translated">これにより、プロバイダーのルックアップトークンまたは名前を知っているアプリケーション内のすべてのクラスからプロバイダーが見えるようになります。</target>
        </trans-unit>
        <trans-unit id="e402b132534c7c9be62f7464642b0941cc482405" translate="yes">
          <source>This mapping ensures that your library always loads the local copies of the modules it needs.</source>
          <target state="translated">このマッピングにより、ライブラリは常に必要なモジュールのローカルコピーをロードします。</target>
        </trans-unit>
        <trans-unit id="31460d71bf9e1b081028cbc8de1171f82e87335e" translate="yes">
          <source>This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use &lt;code&gt;resetTestEnvironment&lt;/code&gt;.</source>
          <target state="translated">これは、現在のプラットフォームで現在のテストスイートの共通プロバイダーをセットアップするために、1回だけ呼び出すことができます。 プロバイダーを絶対に変更する必要がある場合は、最初に &lt;code&gt;resetTestEnvironment&lt;/code&gt; を使用します 。</target>
        </trans-unit>
        <trans-unit id="61958d29a3c8058968147c18b0f01bb5c73d67d0" translate="yes">
          <source>This may seem like what the app has been doing all along. Not quite. The &lt;code&gt;AppModule&lt;/code&gt; is loaded when the application starts; that's &lt;em&gt;eager&lt;/em&gt; loading. Now the &lt;code&gt;AdminModule&lt;/code&gt; loads only when the user clicks on a link; that's &lt;em&gt;lazy&lt;/em&gt; loading.</source>
          <target state="translated">これは、アプリがずっとやってきたことのように思えるかもしれません。 そうでもない。 &lt;code&gt;AppModule&lt;/code&gt; は、アプリケーションの起動時にロードされます。 それは&lt;em&gt;熱心な&lt;/em&gt;ロードです。 現在、 &lt;code&gt;AdminModule&lt;/code&gt; は、ユーザーがリンクをクリックしたときにのみロードされます。 それは&lt;em&gt;遅延&lt;/em&gt;読み込みです。</target>
        </trans-unit>
        <trans-unit id="12bc8c3aa7a62420ea2cb6d2e429c4880c25f7b6" translate="yes">
          <source>This may seem restrictive but it's also fast. An object reference check is fast&amp;mdash;much faster than a deep check for differences&amp;mdash;so Angular can quickly determine if it can skip both the pipe execution and a view update.</source>
          <target state="translated">これは制限的に見えるかもしれませんが、高速です。 オブジェクト参照チェックは高速であり（相違点の詳細チェックよりもはるかに高速）、Angularはパイプの実行とビューの更新の両方をスキップできるかどうかをすばやく判断できます。</target>
        </trans-unit>
        <trans-unit id="5ad5340f87862c854151cf06f5fd6043a1b00b74" translate="yes">
          <source>This means that an NgModule behaves differently depending on whether it's loaded during application start or lazy-loaded later. Neglecting that difference can lead to &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;adverse consequences&lt;/a&gt;.</source>
          <target state="translated">つまり、NgModuleは、アプリケーションの起動時に読み込まれるか、後で遅延読み込みされるかによって動作が異なります。 その違いを無視すると、 &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;悪影響が生じる&lt;/a&gt;可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e6e948c64201b9f8912c19889c92106c85c33fc" translate="yes">
          <source>This means that when you build your production configuration (using &lt;code&gt;ng build --prod&lt;/code&gt; or &lt;code&gt;ng build --configuration=production&lt;/code&gt;), the &lt;code&gt;src/environments/environment.ts&lt;/code&gt; file is replaced with the target-specific version of the file, &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt;.</source>
          <target state="translated">つまり、（ &lt;code&gt;ng build --prod&lt;/code&gt; または &lt;code&gt;ng build --configuration=production&lt;/code&gt; を使用して）実稼働構成をビルドすると、 &lt;code&gt;src/environments/environment.ts&lt;/code&gt; ファイルはターゲット固有バージョンのファイル &lt;code&gt;src/environments/environment.prod.ts&lt;/code&gt; 置き換えられます/environment.prod.ts</target>
        </trans-unit>
        <trans-unit id="7b42c601f1b0de6ca86d93b51f7a4f0d84c91d6c" translate="yes">
          <source>This means you're responsible for putting &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; on your service classes.</source>
          <target state="translated">これは、サービスクラスに &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 配置する責任があることを意味します。</target>
        </trans-unit>
        <trans-unit id="b37292a0b3e74c75b71eca67292a0c0b9392a296" translate="yes">
          <source>This method also updates the value and validity of the control.</source>
          <target state="translated">このメソッドは、コントロールの値と有効性も更新します。</target>
        </trans-unit>
        <trans-unit id="e754eab77abab498cd7f7a0b1268613ab289c6ed" translate="yes">
          <source>This method does not update the value or validity of the control. Use &lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt; instead.</source>
          <target state="translated">このメソッドは、コントロールの値または有効性を更新しません。 代わりに&lt;a href=&quot;formgroup#addControl&quot;&gt;addControl&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="100a8e77d4f74abe1033d79495767430a1882094" translate="yes">
          <source>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</source>
          <target state="translated">このメソッドは、初期化時にフォームAPIによって呼び出され、値がビューからモデルに伝播するときにフォームモデルを更新します。</target>
        </trans-unit>
        <trans-unit id="957d45ae3b8977944714e03589b7ce213ef76cbd" translate="yes">
          <source>This method is called by the forms API to write to the view when programmatic changes from model to view are requested.</source>
          <target state="translated">このメソッドは、モデルからビューへのプログラムによる変更が要求されたときに、ビューに書き込むためにフォームAPIによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d4c0ca924e5a897aa17682cd4a412c4b9b49e4bc" translate="yes">
          <source>This method is for development and testing only, and is not a supported or secure way of deploying an application.</source>
          <target state="translated">この方法は、開発とテストのみを目的としており、アプリケーションをデプロイするためのサポートされた安全な方法ではありません。</target>
        </trans-unit>
        <trans-unit id="07d75e6c897ca8fced62ff854dd31dff479c1ea8" translate="yes">
          <source>This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API methods such as &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;. If you need to support older browsers (like IE9 or Android &amp;lt; 4.0), don't use this method.</source>
          <target state="translated">このメソッドは、HTML5モードでのみ、また &lt;code&gt;pushState&lt;/code&gt; や &lt;code&gt;replaceState&lt;/code&gt; などのHTML5 History APIメソッドをサポートするブラウザーでのみサポートされます。 古いブラウザー（IE9やAndroid &amp;lt;4.0など）をサポートする必要がある場合は、この方法を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="582cc9eb2f1253026d9fec705c1a27f27a1e5797" translate="yes">
          <source>This method performs strict checks, and throws an error if you try to set the value of a control that doesn't exist or if you exclude the value of a control.</source>
          <target state="translated">このメソッドは厳密なチェックを実行し、存在しないコントロールの値を設定しようとした場合、またはコントロールの値を除外した場合、エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="38f2789fcaf15e04940002919821b82465849aa8" translate="yes">
          <source>This method returns a &lt;code&gt;Promise&lt;/code&gt; which indicates that the update check has completed successfully, though it does not indicate whether an update was discovered as a result of the check. Even if one is found, the service worker must still successfully download the changed files, which can fail. If successful, the &lt;code&gt;available&lt;/code&gt; event will indicate availability of a new version of the app.</source>
          <target state="translated">このメソッドは、更新チェックが正常に完了したことを示す &lt;code&gt;Promise&lt;/code&gt; を返しますが、チェックの結果として更新が検出されたかどうかは示しません。 見つかった場合でも、サービスワーカーは変更されたファイルを正常にダウンロードする必要があり、失敗する可能性があります。 成功した場合、 &lt;code&gt;available&lt;/code&gt; イベントは、アプリの新しいバージョンが利用可能になったことを示します。</target>
        </trans-unit>
        <trans-unit id="7240a76f2e460d49075a05cb693f1cf044c80345" translate="yes">
          <source>This might seem strange if you're used to dependency injection in strongly typed languages where an interface is the preferred dependency lookup key. However, JavaScript, doesn't have interfaces, so when TypeScript is transpiled to JavaScript, the interface disappears. There is no interface type information left for Angular to find at runtime.</source>
          <target state="translated">これは、インターフェイスが優先依存関係ルックアップキーである、厳密に型指定された言語で依存関係の注入に慣れている場合、奇妙に見えるかもしれません。 ただし、JavaScriptにはインターフェイスがないため、TypeScriptをJavaScriptに変換すると、インターフェイスが消えます。 実行時にAngularが見つけるためのインターフェースタイプ情報は残っていません。</target>
        </trans-unit>
        <trans-unit id="01a6160cc6927cc87e97af3ca12f5d7c3e578c05" translate="yes">
          <source>This module defines a &lt;code&gt;routes&lt;/code&gt; object with two routes to the two phone components and a default route for the empty path. It passes the &lt;code&gt;routes&lt;/code&gt; to the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method which does the rest.</source>
          <target state="translated">このモジュールは、2つの電話コンポーネントへの2つのルートと空のパスのデフォルトルートを持つ &lt;code&gt;routes&lt;/code&gt; オブジェクトを定義します。 残りを行う &lt;code&gt;RouterModule.forRoot&lt;/code&gt; メソッドに &lt;code&gt;routes&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="81b384ca39cda92728b7bd10a1501aede53ebbbb" translate="yes">
          <source>This next example binds an &lt;code&gt;Observable&lt;/code&gt; of message strings (&lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt;) to a view with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; pipe.</source>
          <target state="translated">この次の例では、メッセージ文字列の &lt;code&gt;Observable&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;$&lt;/code&gt; ）を &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;&lt;/code&gt; パイプを使用してビューにバインドします。</target>
        </trans-unit>
        <trans-unit id="1f28fed5c95e4e5fc2cf216bb7edd12cd2cdd95f" translate="yes">
          <source>This one root component is usually called &lt;code&gt;AppComponent&lt;/code&gt; and is in the root module's &lt;code&gt;bootstrap&lt;/code&gt; array.</source>
          <target state="translated">この1つのルートコンポーネントは通常 &lt;code&gt;AppComponent&lt;/code&gt; と呼ばれ、ルートモジュールの &lt;code&gt;bootstrap&lt;/code&gt; 配列にあります。</target>
        </trans-unit>
        <trans-unit id="553c357233905d7a357b67f87ff6741c54ba7d0c" translate="yes">
          <source>This option can take one of the following &lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;sub-commands&lt;/a&gt;:</source>
          <target state="translated">このオプションは、次の&lt;a href=&quot;https://angular.io/cli/cli/generate#schematic-commands&quot;&gt;サブコマンドの&lt;/a&gt;いずれかを使用できます 。</target>
        </trans-unit>
        <trans-unit id="7e2bdd9bc4821ec6e25c48f5020fa352d5d592c1" translate="yes">
          <source>This option is intended to validate the &lt;code&gt;.metadata.json&lt;/code&gt; files emitted for bundling with an &lt;code&gt;npm&lt;/code&gt; package. The validation is strict and can emit errors for metadata that would never produce an error when used by the template compiler. You can choose to suppress the error emitted by this option for an exported symbol by including &lt;code&gt;@dynamic&lt;/code&gt; in the comment documenting the symbol.</source>
          <target state="translated">このオプションは、 &lt;code&gt;npm&lt;/code&gt; パッケージとのバンドルのために &lt;code&gt;.metadata.json&lt;/code&gt; される.metadata.jsonファイルを検証することを目的としています。 検証は厳密であり、テンプレートコンパイラで使用されたときにエラーを生成しないメタデータのエラーを出力する可能性があります。 シンボルを &lt;code&gt;@dynamic&lt;/code&gt; コメントに@dynamicを含めることにより、エクスポートされたシンボルに対してこのオプションによって出力されるエラーを抑制することができます。</target>
        </trans-unit>
        <trans-unit id="d6eab3c2994a6a17d4115d07f1dae680ac2ec26d" translate="yes">
          <source>This option is only available if application URLs look like normal web URLs without hashes (#) in the middle.</source>
          <target state="translated">このオプションは、アプリケーションURLが中間にハッシュ（＃）のない通常のWeb URLのように見える場合にのみ使用可能です。</target>
        </trans-unit>
        <trans-unit id="b706956040eab679c0d00e95b8bd1fb93cd1e1bf" translate="yes">
          <source>This optional section enables you to specify a custom list of URLs that will be redirected to the index file.</source>
          <target state="translated">このオプションセクションでは、インデックスファイルにリダイレクトされるURLのカスタムリストを指定できます。</target>
        </trans-unit>
        <trans-unit id="d49647d5cde74d419f8b7a1440d72e1fa1cdb7e9" translate="yes">
          <source>This page answers the questions many developers ask about NgModule design and implementation.</source>
          <target state="translated">このページは、多くの開発者がNgModuleの設計と実装について尋ねる質問に答えます。</target>
        </trans-unit>
        <trans-unit id="e470076e6470a706c5e7519008e46a929c297415" translate="yes">
          <source>This page covered how to use the &lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt; package to incrementally upgrade existing AngularJS apps at your own pace and without impeding further development of the app for the duration of the upgrade process.</source>
          <target state="translated">このページでは、 &lt;a href=&quot;../api/upgrade/static&quot;&gt;アップグレード/静的&lt;/a&gt;パッケージを使用して、既存のAngularJSアプリを自分のペースで、アップグレードプロセス中にアプリのさらなる開発を妨げることなく段階的にアップグレードする方法について説明しました。</target>
        </trans-unit>
        <trans-unit id="81be0c6f770103c818ad9a59d216fef97dd57b87" translate="yes">
          <source>This page covered how to:</source>
          <target state="translated">このページでは、次の方法について説明しました。</target>
        </trans-unit>
        <trans-unit id="c3d2f38bcda77f3d0e583e4cbd59a23c93e26dd3" translate="yes">
          <source>This page covers some aspects of TypeScript configuration and the TypeScript environment that are important to Angular developers, including details about the following files:</source>
          <target state="translated">このページでは、Angular開発者にとって重要なTypeScript構成とTypeScript環境のいくつかの側面について説明します。以下のファイルに関する詳細が含まれます。</target>
        </trans-unit>
        <trans-unit id="dc6463bb109d0d9d7a3485b00e656aa5ad4447d1" translate="yes">
          <source>This page demonstrates building a simple &lt;em&gt;appHighlight&lt;/em&gt; attribute directive to set an element's background color when the user hovers over that element. You can apply it like this:</source>
          <target state="translated">このページでは、単純な&lt;em&gt;appHighlight&lt;/em&gt;属性ディレクティブを作成して、ユーザーが要素に&lt;em&gt;カーソル&lt;/em&gt;を合わせたときに要素の背景色を設定する方法を示します。 次のように適用できます。</target>
        </trans-unit>
        <trans-unit id="f41f995aa12a74f7c35870947d8b3dfcd851015a" translate="yes">
          <source>This page describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication (&lt;em&gt;Who is this user?&lt;/em&gt;) and authorization (&lt;em&gt;What can this user do?&lt;/em&gt;).</source>
          <target state="translated">このページでは、一般的なWebアプリケーションの脆弱性およびクロスサイトスクリプティング攻撃などの攻撃に対するAngularの組み込み保護について説明します。 認証（ &lt;em&gt;このユーザーは誰ですか？&lt;/em&gt; ）や承認（ &lt;em&gt;このユーザーは何ができ&lt;/em&gt; &lt;em&gt;ますか？&lt;/em&gt; ）などのアプリケーションレベルのセキュリティ&lt;em&gt;は対象外です&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="b0a26a5d944df815f572ce97ca9af1ebb2bdb5a7" translate="yes">
          <source>This page describes how to load and apply these component styles.</source>
          <target state="translated">このページでは、これらのコンポーネントスタイルを読み込んで適用する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="09ae81e8cd8b8d7fc27be03d544055e093469b55" translate="yes">
          <source>This page discusses best practices for designing Angular applications that work well for all users, including those who rely on assistive technologies.</source>
          <target state="translated">このページでは、支援技術に依存するユーザーを含むすべてのユーザーに適したAngularアプリケーションを設計するためのベストプラクティスについて説明します。</target>
        </trans-unit>
        <trans-unit id="670a5a082b047a72ce1a558bd250325e58e09d59" translate="yes">
          <source>This page discusses build-specific configuration options for Angular projects.</source>
          <target state="translated">このページでは、Angularプロジェクトのビルド固有の構成オプションについて説明します。</target>
        </trans-unit>
        <trans-unit id="cbfa8125c3023f0e5a452262dd4b80eb0950ad8c" translate="yes">
          <source>This page is a comprehensive technical reference to the Angular template language. It explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.</source>
          <target state="translated">このページは、Angularテンプレート言語の包括的なテクニカルリファレンスです。 テンプレート言語の基本原則を説明し、ドキュメントの他の場所で遭遇する構文のほとんどを説明します。</target>
        </trans-unit>
        <trans-unit id="7fad648d853b5ed4d555cb38fbfbacd9ba7992b6" translate="yes">
          <source>This page is a reference for deploying and supporting production apps that use the Angular service worker. It explains how the Angular service worker fits into the larger production environment, the service worker's behavior under various conditions, and available resources and fail-safes.</source>
          <target state="translated">このページは、Angular Service Workerを使用するプロダクションアプリを展開およびサポートするためのリファレンスです。 Angular Service Workerが大規模な本番環境にどのように適合するか、さまざまな条件下でのService Workerの動作、利用可能なリソースとフェールセーフについて説明します。</target>
        </trans-unit>
        <trans-unit id="97c20e865f128e08c87e8b02ca1209e92134e457" translate="yes">
          <source>This page shows how to validate user input in the UI and display useful validation messages using both reactive and template-driven forms. It assumes some basic knowledge of the two forms modules.</source>
          <target state="translated">このページでは、UIでのユーザー入力を検証し、リアクティブフォームとテンプレート駆動フォームの両方を使用して有用な検証メッセージを表示する方法を示します。 2つのフォームモジュールの基本的な知識を前提としています。</target>
        </trans-unit>
        <trans-unit id="5d4c0327323a7a67f27b56ff84bda976d2f25fa4" translate="yes">
          <source>This page shows you how to build a simple form from scratch. Along the way you'll learn how to:</source>
          <target state="translated">このページでは、簡単なフォームをゼロから作成する方法を示します。 方法に沿って、次の方法を学習します。</target>
        </trans-unit>
        <trans-unit id="809f471c9fda21049d71c0885d6f8ee1429911d6" translate="yes">
          <source>This particular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; call returns an &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt;; that is, &quot;&lt;em&gt;an observable of hero arrays&lt;/em&gt;&quot;. In practice, it will only return a single hero array.</source>
          <target state="translated">この特定の &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 呼び出しは &lt;code&gt;Observable&amp;lt;Hero[]&amp;gt;&lt;/code&gt; 返します。 つまり、「 &lt;em&gt;ヒーロー配列の観測可能物&lt;/em&gt; 」です。 実際には、単一のヒーロー配列のみを返します。</target>
        </trans-unit>
        <trans-unit id="d836ca04f6cff950392c8ae7f7d0cf1a60a94c96" translate="yes">
          <source>This particular test suite supplies a minimal mock of the &lt;code&gt;UserService&lt;/code&gt; that satisfies the needs of the &lt;code&gt;WelcomeComponent&lt;/code&gt; and its tests:</source>
          <target state="translated">この特定のテストスイートは、 &lt;code&gt;WelcomeComponent&lt;/code&gt; とそのテストのニーズを満たす &lt;code&gt;UserService&lt;/code&gt; の最小限のモックを提供します。</target>
        </trans-unit>
        <trans-unit id="ff6ecdb8628c90cfa56e0ff26fbdce1243318d07" translate="yes">
          <source>This pipe definition reveals the following key points:</source>
          <target state="translated">このパイプの定義は、次のキーポイントを明らかにします。</target>
        </trans-unit>
        <trans-unit id="9c06cdda191efa55a95c5ebbcd3348ce80c0d189" translate="yes">
          <source>This platform has to be included in any other platform</source>
          <target state="translated">このプラットフォームは、他のプラットフォームに含める必要があります</target>
        </trans-unit>
        <trans-unit id="1a66dd83805fb99c52388b0a549137c596348fd3" translate="yes">
          <source>This produces the following error:</source>
          <target state="translated">これにより、次のエラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="cc28ea5e9b1a6b51e4c29ff84265e5f10b52e574" translate="yes">
          <source>This registers Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; providers globally.</source>
          <target state="translated">これにより、Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; プロバイダーがグローバルに登録されます。</target>
        </trans-unit>
        <trans-unit id="40b2f3a8cf72659eb5e60961a2342494b2510413" translate="yes">
          <source>This registers a drop-in replacement for the &lt;code&gt;$location&lt;/code&gt; provider in AngularJS. Once registered, all navigation, routing broadcast messages, and any necessary digest cycles in AngularJS triggered during navigation are handled by Angular. This gives you a single way to navigate within both sides of your hybrid application consistently.</source>
          <target state="translated">これにより、AngularJSの &lt;code&gt;$location&lt;/code&gt; プロバイダーのドロップイン置換が登録されます。 登録すると、すべてのナビゲーション、ルーティングブロードキャストメッセージ、およびナビゲーション中にトリガーされるAngularJSの必要なダイジェストサイクルは、Angularによって処理されます。 これにより、ハイブリッドアプリケーションの両側を一貫してナビゲートする単一の方法が提供されます。</target>
        </trans-unit>
        <trans-unit id="06f56de558de0a575487e683fea999edf392ee43" translate="yes">
          <source>This request passes the &lt;code&gt;heroesURL&lt;/code&gt; as the first parameter and the callback function name as the second parameter. The response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</source>
          <target state="translated">このリクエストは、 &lt;code&gt;heroesURL&lt;/code&gt; を最初のパラメーターとして渡し、コールバック関数名を2番目のパラメーターとして渡します。 応答はコールバック関数にラップされ、JSONPメソッドによって返されたオブザーバブルを取得して、エラーハンドラーにパイプ処理します。</target>
        </trans-unit>
        <trans-unit id="d9fd7c2c4a20b1de98c590fa48930235dc6aba0d" translate="yes">
          <source>This route redirects a URL that fully matches the empty path to the route whose path is &lt;code&gt;'/dashboard'&lt;/code&gt;.</source>
          <target state="translated">このルートは、空のパスに完全に一致するURLを、パスが &lt;code&gt;'/dashboard'&lt;/code&gt; ルートにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="6c41f8a018f7563801e156030ed8a8f8ca194ad0" translate="yes">
          <source>This rule is essential to Angular's &quot;unidirectional data flow&quot; policy. You should never worry that reading a component value might change some other displayed value. The view should be stable throughout a single rendering pass.</source>
          <target state="translated">このルールは、Angularの「単方向データフロー」ポリシーに不可欠です。 コンポーネントの値を読み取ると、表示される他の値が変更される可能性があることを心配しないでください。 ビューは、単一のレンダリングパスを通して安定している必要があります。</target>
        </trans-unit>
        <trans-unit id="0d1e4a2f1c53200691565434ab456d518f0bf3a4" translate="yes">
          <source>This sample file is easy to translate without a special editor or knowledge of French.</source>
          <target state="translated">このサンプルファイルは、特別なエディターやフランス語の知識がなくても簡単に翻訳できます。</target>
        </trans-unit>
        <trans-unit id="480408f47c676f8c57b3cde5a055d6686d241608" translate="yes">
          <source>This scenario causes your app to create a new instance every time, instead of using the singleton.</source>
          <target state="translated">このシナリオでは、アプリはシングルトンを使用する代わりに、毎回新しいインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="99aa2e43a5383e16a847762330ebaee6bfd37ca5" translate="yes">
          <source>This scoping restriction is a &lt;strong&gt;&lt;em&gt;styling modularity feature&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">このスコーピングの制限は、 &lt;strong&gt;&lt;em&gt;スタイリングのモジュール機能です&lt;/em&gt;&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="31d68c7991b2366acf1e70e15d44815dc09ecff1" translate="yes">
          <source>This script can be used both to deactivate &lt;code&gt;@angular/service-worker&lt;/code&gt; as well as any other Service Workers which might have been served in the past on your site.</source>
          <target state="translated">このスクリプトは、 &lt;code&gt;@angular/service-worker&lt;/code&gt; と、サイトで過去にサービスを受けた可能性のある他のService Workerの両方を無効にするために使用できます。</target>
        </trans-unit>
        <trans-unit id="c18fae7524b94c2e1854507242de01f07367e013" translate="yes">
          <source>This section about &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; has its own . The following subsections highlight key points in the sample app.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; および@Output （）に関するこのセクションには、独自のがあります。 次のサブセクションでは、サンプルアプリの重要なポイントを強調しています。</target>
        </trans-unit>
        <trans-unit id="b64223a794713879607f46b9296695b6693dcfef" translate="yes">
          <source>This section assumes you are familiar with &lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt;.</source>
          <target state="translated">このセクションは、 &lt;a href=&quot;https://docs.bazel.build&quot;&gt;読者がBazelに&lt;/a&gt;精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="11a0d4f001f44cf92c4d038ced8939573bb0e86d" translate="yes">
          <source>This section contains a complete list all of the currently-deprecated APIs, with details to help you plan your migration to a replacement.</source>
          <target state="translated">このセクションには、現在廃止されているすべてのAPIの完全なリストと、代替への移行の計画に役立つ詳細が含まれています。</target>
        </trans-unit>
        <trans-unit id="f5235be074b4aa0d4b2e76c1864190fa474d6ead" translate="yes">
          <source>This section contains default build target options, used when no named alternative configuration is specified. See &lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;Default build targets&lt;/a&gt; below.</source>
          <target state="translated">このセクションには、名前付き代替構成が指定されていない場合に使用されるデフォルトのビルドターゲットオプションが含まれています。 以下の&lt;a href=&quot;workspace-config#default-build-targets&quot;&gt;デフォルトのビルドターゲットを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a6f4ac6b1d629df1dd4126322ebc082c11c00de6" translate="yes">
          <source>This section covers changes you may have make to the server or to files deployed to the server.</source>
          <target state="translated">このセクションでは、サーバーまたはサーバーにデプロイされたファイルに対して行った変更について説明します。</target>
        </trans-unit>
        <trans-unit id="1b184253cc42d7415bb50e2b1f1ae4bfa4d58e73" translate="yes">
          <source>This section defines and names alternative configurations for different intended destinations. It contains a section for each named configuration, which sets the default options for that intended environment. See &lt;a href=&quot;workspace-config#build-configs&quot;&gt;Alternate build configurations&lt;/a&gt; below.</source>
          <target state="translated">このセクションでは、さまざまな宛先の代替構成を定義し、名前を付けます。 名前付きの構成ごとにセクションがあり、目的の環境のデフォルトオプションを設定します。 以下の&lt;a href=&quot;workspace-config#build-configs&quot;&gt;代替ビルド構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e7378faaab25e8cea0f89eb0420acd35173d6d0c" translate="yes">
          <source>This section defines the policy by which matching requests will be cached.</source>
          <target state="translated">このセクションでは、一致する要求をキャッシュするポリシーを定義します。</target>
        </trans-unit>
        <trans-unit id="085d9b2381ce33b95badee4ece65c04252ae8b07" translate="yes">
          <source>This section demonstrates a service worker in action, using an example application.</source>
          <target state="translated">このセクションでは、サンプルアプリケーションを使用して、動作中のサービスワーカーを示します。</target>
        </trans-unit>
        <trans-unit id="b0beb9d185cb05154e1dd17453c7c97560febcea" translate="yes">
          <source>This section demonstrates how to write providers that deliver dependent services.</source>
          <target state="translated">このセクションでは、依存サービスを提供するプロバイダーの作成方法を示します。</target>
        </trans-unit>
        <trans-unit id="eb2c533b5e2645aa61c4b0e279f37acd6ba4506b" translate="yes">
          <source>This section describes how to add a single form control. In the example, the user enters their name into an input field, captures that input value, and displays the current value of the form control element.</source>
          <target state="translated">このセクションでは、単一のフォームコントロールを追加する方法について説明します。 この例では、ユーザーは自分の名前を入力フィールドに入力し、その入力値を取得して、フォームコントロール要素の現在の値を表示します。</target>
        </trans-unit>
        <trans-unit id="8df9a0125bfce0a631c00cf027d6c0c9e9c21223" translate="yes">
          <source>This section describes how to limit the scope of the beginning and ending &lt;code&gt;ElementInjector&lt;/code&gt; using the visibility decorators &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;, and &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、可視性デコレータ &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 、および@SkipSelf （）を使用して、開始および終了 &lt;code&gt;ElementInjector&lt;/code&gt; の範囲を制限する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="93a1f837d6690ccc5052bae1311690c80cb118fa" translate="yes">
          <source>This section describes some techniques for doing that.</source>
          <target state="translated">このセクションでは、それを行うためのいくつかの手法について説明します。</target>
        </trans-unit>
        <trans-unit id="69a1ff0385a87975f95ae5a798ec38b6e1fa9506" translate="yes">
          <source>This section describes the resources to cache, broken up into three groups.</source>
          <target state="translated">このセクションでは、キャッシュするリソースを3つのグループに分けて説明します。</target>
        </trans-unit>
        <trans-unit id="25d342d94221065f56ba9567318ef23b976b78cb" translate="yes">
          <source>This section describes two techniques for minimizing the setup. Use them, alone or in combination, to stay focused on the testing the primary component.</source>
          <target state="translated">このセクションでは、セットアップを最小限に抑えるための2つの手法について説明します。 これらを単独または組み合わせて使用​​して、主要コンポーネントのテストに集中してください。</target>
        </trans-unit>
        <trans-unit id="4b6eb3ab67768fa1db1718443a20d6bef34cf012" translate="yes">
          <source>This section enables you to pass any data you want that describes this particular version of the app. The &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service includes that data in the update notifications. Many apps use this section to provide additional information for the display of UI popups, notifying users of the available update.</source>
          <target state="translated">このセクションでは、アプリのこの特定のバージョンを説明する任意のデータを渡すことができます。 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; サービスは、更新通知にそのデータを含めます。 多くのアプリはこのセクションを使用して、UIポップアップの表示に関する追加情報を提供し、利用可能なアップデートをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="47fc123a3ed1f0d231e027d8288971ed0c72aa21" translate="yes">
          <source>This section explores many of the features of dependency injection (DI) in Angular.</source>
          <target state="translated">このセクションでは、Angularの依存性注入（DI）の多くの機能について説明します。</target>
        </trans-unit>
        <trans-unit id="3fbce57e38fce3ed83994d74968cf78f64dac167" translate="yes">
          <source>This section guides you through the following:</source>
          <target state="translated">このセクションでは、以下について説明します。</target>
        </trans-unit>
        <trans-unit id="3a63d68a98a00a26a92cce922c9931db461a38cf" translate="yes">
          <source>This section is an introduction to the common built-in structural directives:</source>
          <target state="translated">このセクションは、一般的な組み込み構造ディレクティブの紹介です。</target>
        </trans-unit>
        <trans-unit id="c4d630efe539af7ec5dfcdfbcacacc0d6a4f3dbc" translate="yes">
          <source>This section lists all of the currently-deprecated features, which includes template syntax, configuration options, and any other deprecations not listed in the &lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;Deprecated APIs&lt;/a&gt; section above. It also includes deprecated API usage scenarios or API combinations, to augment the information above.</source>
          <target state="translated">このセクションでは、テンプレート構文、構成オプション、および上記の非&lt;a href=&quot;deprecations#deprecated-apis&quot;&gt;推奨API&lt;/a&gt;セクションにリストされていないその他の非推奨を含む、現在非推奨の機能をすべてリストします。 また、上記の情報を補強するために、非推奨のAPI使用シナリオまたはAPIの組み合わせも含まれています。</target>
        </trans-unit>
        <trans-unit id="306aadf682fc11264f3cfeb1c732892c12664c75" translate="yes">
          <source>This section shows how to animate elements entering or leaving a page.</source>
          <target state="translated">このセクションでは、ページに出入りする要素をアニメーション化する方法を示します。</target>
        </trans-unit>
        <trans-unit id="3b6e09c67f8a39342ff4c0257fcd5cc67bae2f2c" translate="yes">
          <source>This section shows how to create asynchronous validators. It assumes some basic knowledge of creating &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、非同期バリデーターの作成方法を示します。 &lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデーター&lt;/a&gt;作成の基本的な知識を前提としています。</target>
        </trans-unit>
        <trans-unit id="c1876bae15f4c669767ab3331f67eef88c5960e8" translate="yes">
          <source>This section shows how to perform cross field validation. It assumes some basic knowledge of creating custom validators.</source>
          <target state="translated">このセクションでは、クロスフィールド検証を実行する方法を示します。 カスタムバリデータの作成に関する基本的な知識を前提としています。</target>
        </trans-unit>
        <trans-unit id="40c08e782b8b4dce59c05abd346b382ec356f9f6" translate="yes">
          <source>This section shows you how to add some &lt;a href=&quot;animations&quot;&gt;animations&lt;/a&gt; to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、いくつかの&lt;a href=&quot;animations&quot;&gt;アニメーション&lt;/a&gt;を &lt;code&gt;HeroDetailComponent&lt;/code&gt; に追加する方法を示します。</target>
        </trans-unit>
        <trans-unit id="28698d05d33f5b1671f713ab414eca9161933dd5" translate="yes">
          <source>This section shows you how to organize the crisis center to conform to the following recommended pattern for Angular applications:</source>
          <target state="translated">このセクションでは、Angularアプリケーションの次の推奨パターンに適合するように危機管理センターを編成する方法を示します。</target>
        </trans-unit>
        <trans-unit id="8555832b3f593de35864e26800451467378353f6" translate="yes">
          <source>This section takes inventory of the most useful Angular testing features and summarizes what they do.</source>
          <target state="translated">このセクションでは、最も有用なAngularテスト機能のインベントリを作成し、それらの機能の概要を説明します。</target>
        </trans-unit>
        <trans-unit id="15bf3c33e1424399ab26287ac6065fe7557dd98a" translate="yes">
          <source>This setup also calls &lt;code&gt;TestBed.get()&lt;/code&gt; to inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service and the mocking controller so they can be referenced during the tests.</source>
          <target state="translated">また、このセットアップは &lt;code&gt;TestBed.get()&lt;/code&gt; を呼び出して、テスト中に参照できるように &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスとモッキングコントローラーを挿入します 。</target>
        </trans-unit>
        <trans-unit id="456f1cff8a28d651f522a6a70eb2cb94a641a08f" translate="yes">
          <source>This setup guide uses the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm client&lt;/a&gt; command line interface, which is installed with &lt;code&gt;Node.js&lt;/code&gt; by default.</source>
          <target state="translated">このセットアップガイドでは、デフォルトで &lt;code&gt;Node.js&lt;/code&gt; と共にインストールされる&lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm client&lt;/a&gt;コマンドラインインターフェイスを使用します。</target>
        </trans-unit>
        <trans-unit id="92609043e3a5049fe9cf167aad090f47caad57aa" translate="yes">
          <source>This simple rule factory returns the tree without modification. The options are the option values passed through from the &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="translated">この単純なルールファクトリは、変更せずにツリーを返します。 オプションは、 &lt;code&gt;ng generate&lt;/code&gt; コマンドから渡されるオプション値です。</target>
        </trans-unit>
        <trans-unit id="3d73db06502687b0e565f94857691c977b98bee9" translate="yes">
          <source>This small test demonstrates how Angular tests can verify a component's visual representation&amp;mdash;something not possible with &lt;a href=&quot;testing#component-class-testing&quot;&gt;component class tests&lt;/a&gt;&amp;mdash;at low cost and without resorting to much slower and more complicated end-to-end tests.</source>
          <target state="translated">この小さなテストは、Angularテストがコンポーネントの視覚表現（ &lt;a href=&quot;testing#component-class-testing&quot;&gt;コンポーネントクラステストで&lt;/a&gt;は不可能なこと）を低コストで、はるかに低速で複雑なエンドツーエンドテストに頼ることなく検証する方法を示します。</target>
        </trans-unit>
        <trans-unit id="cb009288ce29b0288afe49f6ee2aab850b60725f" translate="yes">
          <source>This snapshot reflects the state of the log after the user clicked the &lt;em&gt;Create...&lt;/em&gt; button and then the &lt;em&gt;Destroy...&lt;/em&gt; button.</source>
          <target state="translated">このスナップショットは、ユーザーが[ &lt;em&gt;作成&lt;/em&gt; ]ボタンをクリックしてから[ &lt;em&gt;破棄&lt;/em&gt; ]ボタンをクリックした後のログの状態を反映しています。</target>
        </trans-unit>
        <trans-unit id="079dfe1488f95b55bfe4eaaff729c5ed46abb14d" translate="yes">
          <source>This step serves a purpose analogous to &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;whenStable()&lt;/code&gt; in the earlier &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; examples. The balance of the test is the same as those examples.</source>
          <target state="translated">このステップは、前述の &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 例の &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;whenStable()&lt;/code&gt; に類似した目的を果たします。 テストのバランスは、これらの例と同じです。</target>
        </trans-unit>
        <trans-unit id="dd15d4d4538f8653d2b222f1a75f8aaa65446a2d" translate="yes">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs.</source>
          <target state="translated">この戦略により、複数のブラウザをサポートするWebアプリケーションを引き続き構築できますが、ブラウザが必要とする必要なコードのみをロードできます。</target>
        </trans-unit>
        <trans-unit id="a6549f07c80220a17e94351180403481dcd649c2" translate="yes">
          <source>This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs. For more information about how this works, see &lt;a href=&quot;deployment#differential-loading&quot;&gt;Differential Loading&lt;/a&gt; in the &lt;a href=&quot;deployment&quot;&gt;Deployment guide&lt;/a&gt;.</source>
          <target state="translated">この戦略により、複数のブラウザをサポートするWebアプリケーションを引き続き構築できますが、ブラウザが必要とする必要なコードのみをロードできます。 これがどのように機能するかについての詳細は、 &lt;a href=&quot;deployment&quot;&gt;展開ガイドの&lt;/a&gt; &lt;a href=&quot;deployment#differential-loading&quot;&gt;差分読み込み&lt;/a&gt;を参照してください 。</target>
        </trans-unit>
        <trans-unit id="d7f27f72ef1db3f4b8e0b64ac49c35d1b3d860d4" translate="yes">
          <source>This strategy is enabled by default.</source>
          <target state="translated">この戦略はデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="b4dc934e925dfc611be024d59208b2dd13b6d211" translate="yes">
          <source>This syntax conforms to the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICU Message Format&lt;/a&gt; as specified in the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDR pluralization rules&lt;/a&gt;.</source>
          <target state="translated">この構文は、 &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;CLDRの複数形化規則で&lt;/a&gt;指定されている &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot;&gt;ICUメッセージ形式に&lt;/a&gt;準拠しています 。</target>
        </trans-unit>
        <trans-unit id="a921404409acb321a0300d0ef76d994ae2a236f1" translate="yes">
          <source>This syntax tells the Angular compiler to read the external files during component compilation.</source>
          <target state="translated">この構文は、コンポーネントのコンパイル中に外部ファイルを読み取るようにAngularコンパイラに指示します。</target>
        </trans-unit>
        <trans-unit id="f054420c1ce338910d0afb64bdc92e93d64d0562" translate="yes">
          <source>This technique can improve performance on mobile and low-powered devices and improve the user experience by showing a static first page quickly while the client-side app is loading. The static version can also make your app more visible to web crawlers.</source>
          <target state="translated">この手法により、モバイルおよび低電力デバイスのパフォーマンスが向上し、クライアント側アプリの読み込み中に静的な最初のページがすばやく表示されるため、ユーザーエクスペリエンスが向上します。 静的バージョンは、アプリをWebクローラーから見やすくすることもできます。</target>
        </trans-unit>
        <trans-unit id="ac27da6a3425110fb4858d56fa56042a9d64c44f" translate="yes">
          <source>This technique is effective because all browsers implement the &lt;em&gt;same origin policy&lt;/em&gt;. Only code from the website on which cookies are set can read the cookies from that site and set custom headers on requests to that site. That means only your application can read this cookie token and set the custom header. The malicious code on &lt;code&gt;evil.com&lt;/code&gt; can't.</source>
          <target state="translated">すべてのブラウザが&lt;em&gt;同じ発信元ポリシーを&lt;/em&gt;実装しているため、この手法は効果的です。 Cookieが設定されているWebサイトのコードのみが、そのサイトからCookieを読み取り、そのサイトへのリクエストにカスタムヘッダーを設定できます。 つまり、アプリケーションのみがこのCookieトークンを読み取り、カスタムヘッダーを設定できます。 &lt;code&gt;evil.com&lt;/code&gt; の悪意のあるコードはできません。</target>
        </trans-unit>
        <trans-unit id="edaf5e02d43ccc1019d65ebdfbccee03f175b8c8" translate="yes">
          <source>This technique is suitable for setting a single style, but consider the &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive when setting several inline styles at the same time.</source>
          <target state="translated">この手法は単一のスタイルを設定するのに適していますが、複数のインラインスタイルを同時に設定する場合は&lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt;ディレクティブを考慮してください 。</target>
        </trans-unit>
        <trans-unit id="f819a7b1e0aafa1d2068ac4808d42099765b1fd4" translate="yes">
          <source>This technique works for any attribute of any element.</source>
          <target state="translated">この手法は、任意の要素の任意の属性に対して機能します。</target>
        </trans-unit>
        <trans-unit id="c1e03a2b5a2ead7f58623d3d33ead88c0cbed81a" translate="yes">
          <source>This tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; preloader to immediately load &lt;em&gt;all&lt;/em&gt; lazy loaded routes (routes with a &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property).</source>
          <target state="translated">これは、 &lt;em&gt;すべての&lt;/em&gt;遅延ロードされたルート（ &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; プロパティを持つルート）をすぐにロードするように &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; プリローダーに指示します。</target>
        </trans-unit>
        <trans-unit id="02a67f3677df899c9872b4c722cacd0ea9415c83" translate="yes">
          <source>This tells the router to match that URL to &lt;code&gt;path: 'heroes'&lt;/code&gt; and display the &lt;code&gt;HeroesComponent&lt;/code&gt; when the URL is something like &lt;code&gt;localhost:4200/heroes&lt;/code&gt;.</source>
          <target state="translated">これにより、そのURLを &lt;code&gt;path: 'heroes'&lt;/code&gt; に一致させ、URLが &lt;code&gt;localhost:4200/heroes&lt;/code&gt; ような場合に &lt;code&gt;HeroesComponent&lt;/code&gt; を表示するようにルーターに指示します。</target>
        </trans-unit>
        <trans-unit id="b56327c98c0651adf92a3962b35326d9411155a9" translate="yes">
          <source>This template binds directly to the component's &lt;code&gt;messageService&lt;/code&gt;.</source>
          <target state="translated">このテンプレートは、コンポーネントの &lt;code&gt;messageService&lt;/code&gt; に直接バインドします。</target>
        </trans-unit>
        <trans-unit id="9e9c43c15900050160dc8be35d6067a63318aec5" translate="yes">
          <source>This template looks a lot like the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater in the &lt;code&gt;HeroesComponent&lt;/code&gt; template.</source>
          <target state="translated">このテンプレートは、 &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートの &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; リピーターによく似ています。</target>
        </trans-unit>
        <trans-unit id="d637ab123347ac13fe17a004c73c98b4dddb234f" translate="yes">
          <source>This template uses typical HTML elements like &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, and also includes Angular template-syntax elements, &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;{{hero.name}}&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, &lt;code&gt;[hero]&lt;/code&gt;, and &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt;. The template-syntax elements tell Angular how to render the HTML to the screen, using program logic and data.</source>
          <target state="translated">このテンプレートは、 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; などの一般的なHTML要素を使用し、Angular template-syntax要素、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;{{hero.name}}&lt;/code&gt; 、 &lt;code&gt;(click)&lt;/code&gt; 、 &lt;code&gt;[hero]&lt;/code&gt; 、および &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; 。 template-syntax要素は、プログラムのロジックとデータを使用して、AngularにHTMLを画面にレンダリングする方法を伝えます。</target>
        </trans-unit>
        <trans-unit id="33f50f397f4ca96e33bfb10d036f4db70c1735c8" translate="yes">
          <source>This test expects the component to try to navigate to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">このテストでは、コンポーネントが &lt;code&gt;HeroListComponent&lt;/code&gt; に移動しようとすることを想定しています。</target>
        </trans-unit>
        <trans-unit id="501a5e4c0d88821fa944fe51ad014be796c1b208" translate="yes">
          <source>This test host binds to &lt;code&gt;DashboardHeroComponent&lt;/code&gt; as the &lt;code&gt;DashboardComponent&lt;/code&gt; would but without the noise of the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;HeroService&lt;/code&gt;, or the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater.</source>
          <target state="translated">このテストホストは、 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; 同じように &lt;code&gt;DashboardComponent&lt;/code&gt; バインドしますが、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;HeroService&lt;/code&gt; 、または &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; リピーターのノイズはありません 。</target>
        </trans-unit>
        <trans-unit id="6f65de663612898c193d6874b17e0426d7e59e43" translate="yes">
          <source>This testing module configuration shows three important differences:</source>
          <target state="translated">このテストモジュール構成には、3つの重要な違いがあります。</target>
        </trans-unit>
        <trans-unit id="750aba5f80080e328a3f7b0b79fa476b6891b62b" translate="yes">
          <source>This text wraps around to the right of the floating &quot;flying hero&quot; image.</source>
          <target state="translated">このテキストは、フローティング「フライングヒーロー」画像の右側に回り込みます。</target>
        </trans-unit>
        <trans-unit id="113e418e350b558b02724dea8b12bbcc059f4851" translate="yes">
          <source>This time you'll be navigating in the opposite direction, from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">今回は、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; からHeroListComponentの反対方向にナビゲートします。</target>
        </trans-unit>
        <trans-unit id="cefc645993bf706c88455dca56b4abc1e03879d3" translate="yes">
          <source>This time, in addition to declaring the &lt;em&gt;component-under-test&lt;/em&gt;, the configuration adds a &lt;code&gt;UserService&lt;/code&gt; provider to the &lt;code&gt;providers&lt;/code&gt; list. But not the real &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">今回は、 &lt;em&gt;component-under-testの&lt;/em&gt;宣言に加えて、構成により &lt;code&gt;UserService&lt;/code&gt; プロバイダーが &lt;code&gt;providers&lt;/code&gt; リストに追加されます。 しかし、実際の &lt;code&gt;UserService&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="af2165b1138d7807abb0f9b20b74189222b793e4" translate="yes">
          <source>This time, the value of &lt;code&gt;'popup'&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. That's not a route, but it is a legitimate value. Setting the popup &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; clears the outlet and removes the secondary popup route from the current URL.</source>
          <target state="translated">今回は、 &lt;code&gt;'popup'&lt;/code&gt; 値は &lt;code&gt;null&lt;/code&gt; です。 それはルートではありませんが、正当な価値です。 ポップアップの &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;null&lt;/code&gt; に設定すると、アウトレットがクリアされ、現在のURLからセカンダリポップアップルートが削除されます。</target>
        </trans-unit>
        <trans-unit id="4d58a98a6b42341e9f6814cfed96b99344da3020" translate="yes">
          <source>This tutorial introduces you to the essentials of Angular by walking you through building a simple e-commerce site with a catalog, shopping cart, and check-out form. It uses the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment so you can get started right away.</source>
          <target state="translated">このチュートリアルでは、カタログ、ショッピングカート、チェックアウトフォームを備えたシンプルなeコマースサイトを構築して、Angularの基本を紹介します。 &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;オンライン開発環境を使用しているため、 すぐに開始できます。</target>
        </trans-unit>
        <trans-unit id="4be47255fc4c07ae300b4da88c16205f91d089d6" translate="yes">
          <source>This tutorial sample mimics communication with a remote data server by using the &lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;In-memory Web API&lt;/a&gt; module.</source>
          <target state="translated">このチュートリアルサンプルは、 &lt;a href=&quot;https://github.com/angular/in-memory-web-api&quot;&gt;インメモリWeb API&lt;/a&gt;モジュールを使用して、リモートデータサーバーとの通信を模倣します。</target>
        </trans-unit>
        <trans-unit id="d9d67a376ed76f9dd9f3998880f05555c2f237ea" translate="yes">
          <source>This user experience is the developer's choice. Some developers want the message to display at all times. If you ignore the &lt;code&gt;pristine&lt;/code&gt; state, you would hide the message only when the value is valid. If you arrive in this component with a new (blank) hero or an invalid hero, you'll see the error message immediately, before you've done anything.</source>
          <target state="translated">このユーザーエクスペリエンスは、開発者の選択です。 一部の開発者は、メッセージを常に表示することを望んでいます。 &lt;code&gt;pristine&lt;/code&gt; 状態を無視すると、値が有効な場合にのみメッセージを非表示にします。 新しい（空白の）ヒーローまたは無効なヒーローと共にこのコンポーネントに到着すると、何かを行う前にエラーメッセージがすぐに表示されます。</target>
        </trans-unit>
        <trans-unit id="7fe52a203b046ba6736edeae46dcac27488617b9" translate="yes">
          <source>This version of the &lt;code&gt;HeroListComponent&lt;/code&gt; gets heroes from the &lt;code&gt;HEROES&lt;/code&gt; array, an in-memory collection defined in a separate &lt;code&gt;mock-heroes&lt;/code&gt; file.</source>
          <target state="translated">このバージョンの &lt;code&gt;HeroListComponent&lt;/code&gt; は、別の &lt;code&gt;mock-heroes&lt;/code&gt; ファイルで定義されたメモリ内コレクションである &lt;code&gt;HEROES&lt;/code&gt; 配列からヒーローを取得します。</target>
        </trans-unit>
        <trans-unit id="5ac5c50e4fc7fc8f690f46a387d86d6cd4e8a480" translate="yes">
          <source>This will call the &lt;code&gt;ls&lt;/code&gt; command instead of the &lt;code&gt;touch&lt;/code&gt; command. Because we did not override the &lt;em&gt;args&lt;/em&gt; option, it will list information about the &lt;code&gt;src/main.ts&lt;/code&gt; file (the default value provided for the target).</source>
          <target state="translated">これにより、 &lt;code&gt;touch&lt;/code&gt; コマンドの代わりに &lt;code&gt;ls&lt;/code&gt; コマンドが呼び出されます。 &lt;em&gt;args&lt;/em&gt;オプションをオーバーライドしなかったため、 &lt;code&gt;src/main.ts&lt;/code&gt; ファイルに関する情報（ターゲットに提供されるデフォルト値）がリストされます。</target>
        </trans-unit>
        <trans-unit id="9312003f28c3729ef201319a34848ad897938e4a" translate="yes">
          <source>This will install the command &lt;code&gt;ng&lt;/code&gt; into your system, which is the command you use to create new workspaces, new projects, serve your application during development, or produce builds that can be shared or distributed.</source>
          <target state="translated">これにより、コマンド &lt;code&gt;ng&lt;/code&gt; がシステムにインストールされます。これは、新しいワークスペース、新しいプロジェクトの作成、開発中のアプリケーションの提供、共有または配布可能なビルドの作成に使用するコマンドです。</target>
        </trans-unit>
        <trans-unit id="9bb5987cb75dc888fb534638627a4e1a3c031126" translate="yes">
          <source>This will not work in a real app. You're getting away with it now because the service currently returns &lt;em&gt;mock heroes&lt;/em&gt;. But soon the app will fetch heroes from a remote server, which is an inherently &lt;em&gt;asynchronous&lt;/em&gt; operation.</source>
          <target state="translated">これは実際のアプリでは機能しません。 サービスは現在、 &lt;em&gt;模擬ヒーローを&lt;/em&gt;返しているので、あなたは今それで逃げています。 しかし、間もなくアプリはリモートサーバーからヒーローを取得します。これは本質的に&lt;em&gt;非同期&lt;/em&gt;操作です。</target>
        </trans-unit>
        <trans-unit id="c8a4d0a01462100bf09cd9c7a8827ae3dcb63eb8" translate="yes">
          <source>This will produce the files that you need to deploy.</source>
          <target state="translated">これにより、展開する必要があるファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="9b630be3829ca4b43f0c0f13ae624094630240e5" translate="yes">
          <source>This will run the &lt;code&gt;touch&lt;/code&gt; command on the &lt;code&gt;src/main.ts&lt;/code&gt; file.</source>
          <target state="translated">これにより、 &lt;code&gt;src/main.ts&lt;/code&gt; ファイルで &lt;code&gt;touch&lt;/code&gt; コマンドが実行されます。</target>
        </trans-unit>
        <trans-unit id="4fb5514b164bef25ddca759f879da4b392519146" translate="yes">
          <source>This will set the active-link class on the div tag if the url is either '/user/jim' or '/user/bob'.</source>
          <target state="translated">これにより、urlが '/ user / jim'または '/ user / bob'の場合、divタグにactive-linkクラスが設定されます。</target>
        </trans-unit>
        <trans-unit id="d430f7cac5ea324357497bb1e85a43cc3ac98f1a" translate="yes">
          <source>This won't work if the service is an application-wide singleton. Every component would share the same service instance, and each component would overwrite the tax return that belonged to another hero.</source>
          <target state="translated">サービスがアプリケーション全体のシングルトンの場合、これは機能しません。 各コンポーネントは同じサービスインスタンスを共有し、各コンポーネントは別のヒーローに属する納税申告書を上書きします。</target>
        </trans-unit>
        <trans-unit id="66ee2090966d8e328167f9dd11bd703bc89361b7" translate="yes">
          <source>This worked well, but there's a better way. If you were using a real world API, there might be some delay before the data to display is returned from the server. You don't want to display a blank component while waiting for the data.</source>
          <target state="translated">これはうまくいきましたが、もっと良い方法があります。 実世界のAPIを使用している場合、表示するデータがサーバーから返されるまでに多少の遅延が生じる可能性があります。 データを待っている間、空白のコンポーネントを表示したくありません。</target>
        </trans-unit>
        <trans-unit id="3030da2c36d0ffb5bb1a38f3d3ab06bd0ba9aebe" translate="yes">
          <source>Those developers may still use HTML5 URLs by taking two remedial steps:</source>
          <target state="translated">これらの開発者は、次の2つの修正手順を実行することでHTML5 URLを引き続き使用できます。</target>
        </trans-unit>
        <trans-unit id="a4c3697ed1231b34be5a06d277ed21d7aec6aac6" translate="yes">
          <source>Those three steps look like the following. In the file where you create your directive, export it. The following example, named &lt;code&gt;ItemDirective&lt;/code&gt; is the default directive structure that the CLI generates in its own file, &lt;code&gt;item.directive.ts&lt;/code&gt;:</source>
          <target state="translated">これらの3つの手順は次のようになります。 ディレクティブを作成するファイルで、エクスポートします。 &lt;code&gt;ItemDirective&lt;/code&gt; という名前の次の例は、CLIが独自のファイル &lt;code&gt;item.directive.ts&lt;/code&gt; で生成するデフォルトのディレクティブ構造です。</target>
        </trans-unit>
        <trans-unit id="7282182d46ba8591a3fb80eb88450d7e6e0fb75f" translate="yes">
          <source>Though &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; shouldn't have &lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;side effects&lt;/a&gt;, template statements usually do. The &lt;code&gt;deleteItem()&lt;/code&gt; method does have a side effect: it deletes an item.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式に&lt;/a&gt;は&lt;a href=&quot;template-syntax#avoid-side-effects&quot;&gt;副作用&lt;/a&gt;はありませんが、通常はテンプレートステートメントに副作用があります。 &lt;code&gt;deleteItem()&lt;/code&gt; メソッドには副作用があります：アイテムを削除します。</target>
        </trans-unit>
        <trans-unit id="8b45283f651e66eedd857eedb3d79dccba5ecff8" translate="yes">
          <source>Though &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; provides the 🌻 (sunflower), the app renders the 🌺 (red hibiscus) because &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; causes the current injector to skip itself and look to its parent.</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; は🌻（ヒマワリ）を提供しますが、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; により現在のインジェクターはそれ自体をスキップして親を見るため、アプリは🌺（赤いハイビスカス）をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="1075a1e80e7f93a1f8a46fd5766714abf59a2e2d" translate="yes">
          <source>Though &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; often appear together in apps, you can use them separately. If the nested component is such that it only needs to send data to its parent, you wouldn't need an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, only an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;. The reverse is also true in that if the child only needs to receive data from the parent, you'd only need &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; はアプリで一緒に表示されることがよくありますが、別々に使用できます。 ネストされたコンポーネントが、親にデータを送信するだけの場合、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; のみは必要ありません。 子が親からのみデータを受信する必要がある場合は、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; のみが必要になるという点で、逆もまた真です。</target>
        </trans-unit>
        <trans-unit id="76c63fbb51bf2e00185f379ad812f423247e2cf5" translate="yes">
          <source>Though &lt;em&gt;highlight&lt;/em&gt; would be a more concise selector than &lt;em&gt;appHighlight&lt;/em&gt; and it would work, the best practice is to prefix selector names to ensure they don't conflict with standard HTML attributes. This also reduces the risk of colliding with third-party directive names. The CLI added the &lt;code&gt;app&lt;/code&gt; prefix for you.</source>
          <target state="translated">&lt;em&gt;ハイライト&lt;/em&gt;は&lt;em&gt;appHighlight&lt;/em&gt;よりも簡潔なセレクターであり、 &lt;em&gt;機能&lt;/em&gt;しますが、ベストプラクティスはセレクター名にプレフィックスを付けて、標準のHTML属性と競合しないようにすることです。 これにより、サードパーティのディレクティブ名と衝突するリスクも軽減されます。 CLIが &lt;code&gt;app&lt;/code&gt; プレフィックスを追加しました。</target>
        </trans-unit>
        <trans-unit id="e7794513d8ab6b404efc84e17a85b45fb430b7cb" translate="yes">
          <source>Though the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator has an &lt;code&gt;entryComponents&lt;/code&gt; array, most of the time you won't have to explicitly set any entry components because Angular adds components listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to &lt;code&gt;entryComponents&lt;/code&gt; explicitly.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータには &lt;code&gt;entryComponents&lt;/code&gt; 配列がありますが、ほとんどの場合、Angularは &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; リストされたコンポーネントとルート定義のコンポーネントをエントリコンポーネントに自動的に追加するため、エントリコンポーネントを明示的に設定する必要はありません。 これらの2つのメカニズムはほとんどのエントリコンポーネントを説明しますが、アプリがたまたまタイプ別にコンポーネントをブートストラップまたは動的にロードする場合、 &lt;code&gt;entryComponents&lt;/code&gt; に明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c0c89634e88d4f46eb100cf74294ba38817d4923" translate="yes">
          <source>Though the target name is usually the name of a property, there is an automatic attribute-to-property mapping in Angular for several common attributes. These include &lt;code&gt;class&lt;/code&gt;/&lt;code&gt;className&lt;/code&gt;, &lt;code&gt;innerHtml&lt;/code&gt;/&lt;code&gt;innerHTML&lt;/code&gt;, and &lt;code&gt;tabindex&lt;/code&gt;/&lt;code&gt;tabIndex&lt;/code&gt;.</source>
          <target state="translated">通常、ターゲット名はプロパティの名前ですが、Angularにはいくつかの一般的な属性の属性とプロパティの自動マッピングがあります。 これらには、 &lt;code&gt;class&lt;/code&gt; / &lt;code&gt;className&lt;/code&gt; 、 &lt;code&gt;innerHtml&lt;/code&gt; / &lt;code&gt;innerHTML&lt;/code&gt; 、および &lt;code&gt;tabindex&lt;/code&gt; / &lt;code&gt;tabIndex&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="6bdc5ca158e9ca814a1efdfbdd56e2547c9decdf" translate="yes">
          <source>Though you can limit access to a service by providing it in a lazy loaded module or providing it in a component, providing services in a component can lead to multiple instances of those services. Thus, the lazy loading is preferable.</source>
          <target state="translated">遅延ロードされたモジュールで提供するか、コンポーネントで提供することでサービスへのアクセスを制限できますが、コンポーネントでサービスを提供すると、それらのサービスの複数のインスタンスにつながる可能性があります。 したがって、遅延ロードが望ましいです。</target>
        </trans-unit>
        <trans-unit id="90e178c89e79710297fa1f0d8ae614004845fcca" translate="yes">
          <source>Though you can provide services by lazy loading modules, not all services can be lazy loaded. For instance, some modules only work in the root module, such as the Router. The Router works with the global location object in the browser.</source>
          <target state="translated">モジュールを遅延ロードすることでサービスを提供できますが、すべてのサービスを遅延ロードできるわけではありません。 たとえば、ルーターなど、一部のモジュールはルートモジュールでのみ機能します。 ルーターは、ブラウザのグローバルロケーションオブジェクトと連携します。</target>
        </trans-unit>
        <trans-unit id="4ac43ae059a7abe0952abd693cdca4e55b219478" translate="yes">
          <source>Though you can type the URL into the address bar, a navigation UI is easier for the user and more common. Replace the default placeholder markup in &lt;code&gt;app.component.html&lt;/code&gt; with a custom nav so you can easily navigate to your modules in the browser:</source>
          <target state="translated">アドレスバーにURLを入力できますが、ナビゲーションUIはユーザーにとってより簡単で一般的です。 ブラウザでモジュールに簡単に移動できるように、 &lt;code&gt;app.component.html&lt;/code&gt; のデフォルトのプレースホルダーマークアップをカスタムnavに置き換えます。</target>
        </trans-unit>
        <trans-unit id="528e1795eb218a5f3792808cc39b7bcce25ad8db" translate="yes">
          <source>Though you could technically set the &lt;code&gt;[attr.disabled]&lt;/code&gt; attribute binding, the values are different in that the property binding requires to a boolean value, while its corresponding attribute binding relies on whether the value is &lt;code&gt;null&lt;/code&gt; or not. Consider the following:</source>
          <target state="translated">&lt;code&gt;[attr.disabled]&lt;/code&gt; 属性バインディングを技術的に設定することもできますが、値はプロパティバインディングがブール値を必要とするという点で異なりますが、対応する属性バインディングは値が &lt;code&gt;null&lt;/code&gt; かどうかに依存します 。 以下を考慮してください。</target>
        </trans-unit>
        <trans-unit id="171a82320fbdf7d2e2689bc12c98963504c6696d" translate="yes">
          <source>Three instances of &lt;code&gt;HeroBioComponent&lt;/code&gt; can't share the same instance of &lt;code&gt;HeroCacheService&lt;/code&gt;, as they'd be competing with each other to determine which hero to cache.</source>
          <target state="translated">&lt;code&gt;HeroBioComponent&lt;/code&gt; の 3つのインスタンスは、 HeroCacheServiceの同じインスタンスを共有できません。キャッシュするヒーローを決定するために互いに競合するためです。</target>
        </trans-unit>
        <trans-unit id="5d80c7ef855b73b71c4ca5c1c8a2d8119c7fa21b" translate="yes">
          <source>Three of the common, built-in structural directives&amp;mdash;&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;, &lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;, and &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch...&lt;/a&gt;&amp;mdash;are described in the &lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;Template Syntax&lt;/em&gt;&lt;/a&gt; guide and seen in samples throughout the Angular documentation. Here's an example of them in a template:</source>
          <target state="translated">3つの共通の組み込み構造ディレクティブ&amp;mdash; &lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt; 、 &lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt; 、および&lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;NgSwitch ...&lt;/a&gt; &amp;mdash;は、 &lt;a href=&quot;template-syntax&quot;&gt;&lt;em&gt;テンプレート構文&lt;/em&gt;&lt;/a&gt;ガイドに記載されており、Angularドキュメント全体のサンプルに記載されています。 テンプレートのそれらの例はここにあります：</target>
        </trans-unit>
        <trans-unit id="8703c0daee7a3560153b94bc34a950b511daab36" translate="yes">
          <source>Three points of special interest:</source>
          <target state="translated">特に興味深い3つのポイント：</target>
        </trans-unit>
        <trans-unit id="6b164df9c4f94a91727830fddbf131671bff71ec" translate="yes">
          <source>Three providers tell the JIT compiler how to translate the template texts for a particular language while compiling the app:</source>
          <target state="translated">3つのプロバイダーが、アプリのコンパイル中に特定の言語のテンプレートテキストを翻訳する方法をJITコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="ed12cc77bbd83748afc157b996ead876c3c5517c" translate="yes">
          <source>Through the &lt;code&gt;valueChanges&lt;/code&gt; observable where you can listen for changes in the form's value in the template using &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; or in the component class using the &lt;code&gt;subscribe()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;valueChanges&lt;/code&gt; を使用してテンプレートで、または &lt;code&gt;subscribe()&lt;/code&gt; メソッドを使用してコンポーネントクラスでフォームの値の変化をリッスンできるvalueChangesオブザーバブルを通じて。</target>
        </trans-unit>
        <trans-unit id="5a4cab0ebea476f32aa1e1c5fba91f40707b2ad6" translate="yes">
          <source>Throughout this guide, you'll see a directive spelled in both &lt;em&gt;UpperCamelCase&lt;/em&gt; and &lt;em&gt;lowerCamelCase&lt;/em&gt;. Already you've seen &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. There's a reason. &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; refers to the directive &lt;em&gt;class&lt;/em&gt;; &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; refers to the directive's &lt;em&gt;attribute name&lt;/em&gt;.</source>
          <target state="translated">このガイド全体で、 &lt;em&gt;UpperCamelCase&lt;/em&gt;と&lt;em&gt;lowerCamelCaseの&lt;/em&gt;両方で綴られたディレクティブが表示されます。 すでに &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を見てきました。 理由があります。 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; はディレクティブ&lt;em&gt;クラスを&lt;/em&gt;指します。 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; はディレクティブの&lt;em&gt;属性名を&lt;/em&gt;指し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9f4b0f30b3f06e61b21febef173645d29891305" translate="yes">
          <source>Throws</source>
          <target state="translated">Throws</target>
        </trans-unit>
        <trans-unit id="6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b" translate="yes">
          <source>Time</source>
          <target state="translated">Time</target>
        </trans-unit>
        <trans-unit id="f7ea2d8763887c41cd7da975aaf8c487045171ac" translate="yes">
          <source>Time passes and application logic triggers lazy loading of an NgModule. Angular must add the lazy-loaded module's providers to an injector somewhere. It can't add them to the app root injector because that injector is closed to new providers. So Angular creates a new child injector for the lazy-loaded module context.</source>
          <target state="translated">時間が経過し、アプリケーションロジックがNgModuleの遅延読み込みをトリガーします。 Angularは、遅延読み込みされたモジュールのプロバイダーをインジェクターのどこかに追加する必要があります。 そのインジェクターは新しいプロバイダーに対して閉じられているため、アプリのルートインジェクターに追加することはできません。 そのため、Angularは遅延読み込みモジュールコンテキスト用の新しい子インジェクターを作成します。</target>
        </trans-unit>
        <trans-unit id="8f86764c71eb5f28fd785ba95ea223af744160bb" translate="yes">
          <source>Timezone of the formatted text will be the local system timezone of the end-user's machine.</source>
          <target state="translated">フォーマットされたテキストのタイムゾーンは、エンドユーザーのマシンのローカルシステムタイムゾーンになります。</target>
        </trans-unit>
        <trans-unit id="ff73d9b2c838aef0837103246944b6eeaac4e811" translate="yes">
          <source>Tip: In the &lt;a href=&quot;api&quot;&gt;API reference section&lt;/a&gt; of this doc site, deprecated APIs are indicated by &lt;del&gt;strikethrough.&lt;/del&gt; You can filter the API list by &lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status: deprecated&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">ヒント：このドキュメントサイトの&lt;a href=&quot;api&quot;&gt;APIリファレンスセクション&lt;/a&gt;では、廃止されたAPIは &lt;del&gt; 取り消し線。 &lt;/del&gt; &lt;a href=&quot;api?status=deprecated&quot;&gt;&lt;strong&gt;Status：deprecatedで&lt;/strong&gt;&lt;/a&gt; APIリストをフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="768e0c1c69573fb588f61f1308a015c11468e05f" translate="yes">
          <source>Title</source>
          <target state="translated">Title</target>
        </trans-unit>
        <trans-unit id="1ef4826ff87f22d637cb47eb360c1525fcf04ada" translate="yes">
          <source>Title text should be in &quot;Title Case&quot;, which means that you use capital letters to start the first words and all &lt;em&gt;principal&lt;/em&gt; words. Use lower case letters for &lt;em&gt;secondary&lt;/em&gt; words such as &quot;in&quot;, &quot;of&quot;, and &quot;the&quot;.</source>
          <target state="translated">タイトルテキストは「タイトルケース」にする必要があります。これは、大文字を使用して最初の単語とすべての&lt;em&gt;主要な&lt;/em&gt;単語を開始することを意味します。 「in」、「of」、「the」などの&lt;em&gt;2次&lt;/em&gt;語には小文字を使用します。</target>
        </trans-unit>
        <trans-unit id="0443511f0f0d69e0669b6cc477969ba0177c046d" translate="yes">
          <source>TitleCasePipe</source>
          <target state="translated">TitleCasePipe</target>
        </trans-unit>
        <trans-unit id="ed1a0b0c87e134832acc7d87c80e1e27c802b764" translate="yes">
          <source>To access properties that are defined in an interface, you must explicitly convert the Object you get from the JSON to the required response type. For example, the following &lt;code&gt;subscribe&lt;/code&gt; callback receives &lt;code&gt;data&lt;/code&gt; as an Object, and then type-casts it in order to access the properties.</source>
          <target state="translated">インターフェイスで定義されているプロパティにアクセスするには、JSONから取得したオブジェクトを必要な応答タイプに明示的に変換する必要があります。 たとえば、次の &lt;code&gt;subscribe&lt;/code&gt; コールバックは &lt;code&gt;data&lt;/code&gt; をオブジェクトとして受け取り、プロパティにアクセスするためにそれを型キャストします。</target>
        </trans-unit>
        <trans-unit id="612822e1f2a2307aaa6e2b3ed143cfc5b79f8e35" translate="yes">
          <source>To achieve this effect, extend the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag with the following:</source>
          <target state="translated">この効果を実現するには、次を使用して &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; タグを拡張します。</target>
        </trans-unit>
        <trans-unit id="4de9b850b6bc48b2b817512c2db67f3f4f4de00a" translate="yes">
          <source>To add a hero, this app only needs the hero's name. You can use an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element paired with an add button.</source>
          <target state="translated">ヒーローを追加するには、このアプリに必要なのはヒーローの名前だけです。 追加ボタンとペアになった &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素を使用できます。</target>
        </trans-unit>
        <trans-unit id="da8e56238639cdc891b1d4ed923efdcffe46b6f3" translate="yes">
          <source>To add a new &lt;code&gt;devDependency&lt;/code&gt;, use either one of the following commands:</source>
          <target state="translated">新しい &lt;code&gt;devDependency&lt;/code&gt; を追加するには、次のコマンドのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="27d7686824adeea94d6f50645d6b9afbe94609dd" translate="yes">
          <source>To add a new dependency, use the &lt;a href=&quot;cli/add&quot;&gt;&lt;code&gt;ng add&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">新しい依存関係を追加するには、 &lt;a href=&quot;cli/add&quot;&gt; &lt;code&gt;ng add&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="f457092233f40d2f34e89cbae624605c9b59951d" translate="yes">
          <source>To add a schematic to an existing collection, use the same command you use to start a new schematics project, but run the command inside the project folder.</source>
          <target state="translated">既存のコレクションに回路図を追加するには、新しい回路図プロジェクトを開始するために使用するのと同じコマンドを使用しますが、プロジェクトフォルダー内でコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="e0dff7476603a4365ce04e28daa6e5ae648874f0" translate="yes">
          <source>To add a validator to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, pass the new validator in as the second argument on creation.</source>
          <target state="translated">バリデーターを &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; に追加するには、作成時に2番目の引数として新しいバリデーターを渡します。</target>
        </trans-unit>
        <trans-unit id="b7c21a740943c10dfa15804fca8321cd2e41101e" translate="yes">
          <source>To add another product, click &quot;My Store&quot; to return to the product list. Repeat the steps above.</source>
          <target state="translated">別の製品を追加するには、[マイストア]をクリックして製品リストに戻ります。 上記の手順を繰り返します。</target>
        </trans-unit>
        <trans-unit id="af30217cecee494619d1758d399f71f84dae729e" translate="yes">
          <source>To add artifacts to a project, your schematic needs its own template files. Schematic templates support special syntax to execute code and variable substitution.</source>
          <target state="translated">プロジェクトにアーティファクトを追加するには、回路図に独自のテンプレートファイルが必要です。 回路図テンプレートは、コードと変数の置換を実行する特別な構文をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c3d2051452de0323eb6efd5aedc607498069cdae" translate="yes">
          <source>To add or remove a &lt;em&gt;single&lt;/em&gt; class, use &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt; rather than &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;単一の&lt;/em&gt;クラスを追加または削除するには、 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;NgClass&lt;/a&gt;&lt;/code&gt; ではなく&lt;a href=&quot;template-syntax#class-binding&quot;&gt;クラスバインディングを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e9da25919d51d1a85e0005bea2eb758313daa6fe" translate="yes">
          <source>To add paths, use the &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; option:</source>
          <target state="translated">パスを追加するには、 &lt;code&gt;stylePreprocessorOptions&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="496b7ad1d0a0eed5827dc1a97fd622e7f8d94e93" translate="yes">
          <source>To add the component to the template, you call &lt;code&gt;createComponent()&lt;/code&gt; on &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンポーネントをテンプレートに追加するには、 &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;createComponent()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="987b409e8bf18353ecffd982c4a6027176175f26" translate="yes">
          <source>To add the schematics to the library bundle, add scripts to the library's &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="translated">ライブラリバンドルに回路図を追加するには、ライブラリの &lt;code&gt;package.json&lt;/code&gt; ファイルにスクリプトを追加します。</target>
        </trans-unit>
        <trans-unit id="1a7a24ab6c517387fe4fb759c2cbbe67fd7e654f" translate="yes">
          <source>To add the stylesheet, open &lt;code&gt;styles.css&lt;/code&gt; and add the following import line at the top:</source>
          <target state="translated">スタイルシートを追加するには、 &lt;code&gt;styles.css&lt;/code&gt; を開き、次のインポート行を上部に追加します。</target>
        </trans-unit>
        <trans-unit id="d7a97119528a1219e01d41b64f89cfc156ab2111" translate="yes">
          <source>To add validation to a template-driven form, you add the same validation attributes as you would with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;native HTML form validation&lt;/a&gt;. Angular uses directives to match these attributes with validator functions in the framework.</source>
          <target state="translated">テンプレート駆動型フォームに検証を追加するには、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation&quot;&gt;ネイティブHTMLフォーム検証&lt;/a&gt;と同じ検証属性を追加します。 Angularはディレクティブを使用して、これらの属性をフレームワークのバリデーター関数と一致させます。</target>
        </trans-unit>
        <trans-unit id="ce70784e6a2d0e1e0652eb7bae45da63bd42c69d" translate="yes">
          <source>To alter the request, clone it first and modify the clone before passing it to &lt;code&gt;next.handle()&lt;/code&gt;. You can clone and modify the request in a single step as in this example.</source>
          <target state="translated">要求を変更するには、まずそれを複製し、複製を変更してから &lt;code&gt;next.handle()&lt;/code&gt; に渡します。 この例のように、1つの手順でリクエストを複製および変更できます。</target>
        </trans-unit>
        <trans-unit id="be9073f11e0afa56717eb05e0a7001960b7a1b99" translate="yes">
          <source>To alter where the injector starts looking for &lt;code&gt;FlowerService&lt;/code&gt;, add &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; to the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; declaration for the &lt;code&gt;FlowerService&lt;/code&gt;. This declaration is in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; constructor as shown in &lt;code&gt;child.component.ts&lt;/code&gt;:</source>
          <target state="translated">インジェクターが &lt;code&gt;FlowerService&lt;/code&gt; の検索を開始する場所を変更するには、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; の &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;FlowerService&lt;/code&gt; 宣言に@SkipSelf （）を追加します。 この宣言は、 &lt;code&gt;child.component.ts&lt;/code&gt; に示すように &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; コンストラクターにあります 。</target>
        </trans-unit>
        <trans-unit id="22c3b2cba8f53e2ffe5dab01bc5b91f88e756346" translate="yes">
          <source>To answer these kinds of questions, you have to create the DOM elements associated with the components, you must examine the DOM to confirm that component state displays properly at the appropriate times, and you must simulate user interaction with the screen to determine whether those interactions cause the component to behave as expected.</source>
          <target state="translated">これらの種類の質問に答えるには、コンポーネントに関連付けられたDOM要素を作成し、DOMを調べて適切なタイミングでコンポーネントの状態が適切に表示されることを確認する必要があります。コンポーネントが期待どおりに動作するようにします。</target>
        </trans-unit>
        <trans-unit id="36d091e0c047395da2a56a9e24df2133c4a12994" translate="yes">
          <source>To attach the aliases from your form model, you must add it to the template. Similar to the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; input provided by &lt;code&gt;FormGroupNameDirective&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/formarrayname&quot;&gt;formArrayName&lt;/a&gt;&lt;/code&gt; binds communication from the form array instance to the template with &lt;code&gt;FormArrayNameDirective&lt;/code&gt;.</source>
          <target state="translated">フォームモデルからエイリアスを添付するには、エイリアスをテンプレートに追加する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; 提供するformGroupName入力と同様に、 formArrayNameはFormArrayNameDirectiveを使用して、フォーム配列インスタンスからテンプレートへの通信をバインドし &lt;code&gt;FormArrayNameDirective&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b439955a79dbd833d42d99f6fa91279d6ef67f27" translate="yes">
          <source>To automate that data flow, setup a two-way data binding between the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; form element and the &lt;code&gt;hero.name&lt;/code&gt; property.</source>
          <target state="translated">そのデータフローを自動化するには、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; フォーム要素と &lt;code&gt;hero.name&lt;/code&gt; プロパティの間に双方向のデータバインディングを設定します。</target>
        </trans-unit>
        <trans-unit id="c97596f545bc3c4cf4d6e36b38363f8b20cb690b" translate="yes">
          <source>To avoid relying solely on visual cues, you need to make sure your routing code updates focus after page navigation. Use the &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; event from the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to know when to update focus.</source>
          <target state="translated">視覚的な合図だけに頼らないようにするには、ページナビゲーション後にルーティングコードの更新がフォーカスされていることを確認する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスの &lt;code&gt;&lt;a href=&quot;../api/router/navigationend&quot;&gt;NavigationEnd&lt;/a&gt;&lt;/code&gt; イベントを使用して、フォーカスを更新するタイミングを確認します。</target>
        </trans-unit>
        <trans-unit id="441327a3b62f31f08d7ebf067ab65b6221abce4c" translate="yes">
          <source>To avoid this expensive operation, you can customize the default tracking algorithm. by supplying the &lt;code&gt;trackBy&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;trackBy&lt;/code&gt; takes a function that has two arguments: &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;trackBy&lt;/code&gt; is given, Angular tracks changes by the return value of the function.</source>
          <target state="translated">この高価な操作を避けるために、デフォルトの追跡アルゴリズムをカスタマイズできます。 &lt;code&gt;trackBy&lt;/code&gt; オプションを &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; ます。 &lt;code&gt;trackBy&lt;/code&gt; は、 &lt;code&gt;index&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; の 2つの引数を持つ関数を取ります 。 &lt;code&gt;trackBy&lt;/code&gt; が指定されている場合、Angularは関数の戻り値によって変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="e8cfc2c0e9fadb81aa5e73b8bb58085461fa57a5" translate="yes">
          <source>To avoid this problem, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in the &lt;code&gt;AppModule&lt;/code&gt;, the application &lt;em&gt;root module&lt;/em&gt;.</source>
          <target state="translated">この問題を回避するには、アプリケーション&lt;em&gt;ルートモジュール&lt;/em&gt;である &lt;code&gt;AppModule&lt;/code&gt; にのみ &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートし&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="598b94eaf0a9207b1b2f7e14b6bb329e39eadeca" translate="yes">
          <source>To be Angular compatible, an AngularJS component directive should configure these attributes:</source>
          <target state="translated">Angularと互換性を持たせるには、AngularJSコンポーネントディレクティブで次の属性を構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="123c3019791e3c52ebbcbe83a892f8e6e401c499" translate="yes">
          <source>To be notified when new releases are available, follow &lt;a href=&quot;https://twitter.com/angular&quot;&gt;@angular&lt;/a&gt; on Twitter or subscribe to the &lt;a href=&quot;https://blog.angular.io&quot;&gt;Angular blog&lt;/a&gt;.</source>
          <target state="translated">新しいリリースが利用可能になったときに通知を受けるには、Twitterで&lt;a href=&quot;https://twitter.com/angular&quot;&gt;@angular&lt;/a&gt;をフォローするか、 &lt;a href=&quot;https://blog.angular.io&quot;&gt;Angularブログを&lt;/a&gt;購読してください 。</target>
        </trans-unit>
        <trans-unit id="dd4700612dcf5dc9d98d073d3fec1a9bda0633ef" translate="yes">
          <source>To be used with watch mode, a builder handler function should return an Observable. Architect subscribes to the Observable until it completes and might reuse it if the builder is scheduled again with the same arguments.</source>
          <target state="translated">監視モードで使用するには、ビルダーハンドラー関数がObservableを返す必要があります。 Architectは、完了するまでObservableにサブスクライブし、ビルダーが同じ引数で再度スケジュールされる場合は再利用する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c6264ce2f8d176973d84cc88a177c1b8d2ae8301" translate="yes">
          <source>To begin converting your AngularJS application to a hybrid, you need to load the Angular framework. You can see how this can be done with SystemJS by following the instructions in &lt;a href=&quot;upgrade-setup&quot;&gt;Setup for Upgrading to AngularJS&lt;/a&gt; for selectively copying code from the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStart github repository&lt;/a&gt;.</source>
          <target state="translated">AngularJSアプリケーションのハイブリッドへの変換を開始するには、Angularフレームワークをロードする必要があります。 &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;QuickStartのgithubリポジトリ&lt;/a&gt;からコードを選択的にコピーする&lt;a href=&quot;upgrade-setup&quot;&gt;ためのAngularJS&lt;/a&gt;へのアップグレードのセットアップの手順に従って、SystemJSでこれを行う方法を確認できます 。</target>
        </trans-unit>
        <trans-unit id="ff25a3d91e518e6022fbcb82db9614eb3a86d036" translate="yes">
          <source>To begin testing calls to &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, import the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; and the mocking controller, &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt;, along with the other symbols your tests require.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; の呼び出しのテストを開始するには、 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; とモッキングコントローラー &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httptestingcontroller&quot;&gt;HttpTestingController&lt;/a&gt;&lt;/code&gt; を 、テストに必要な他のシンボルと共にインポートします 。</target>
        </trans-unit>
        <trans-unit id="970d997b1f905a43219b5008925290bb634cfd6b" translate="yes">
          <source>To begin using Angular service workers, see &lt;a href=&quot;service-worker-getting-started&quot;&gt;Getting Started with service workers&lt;/a&gt;.</source>
          <target state="translated">Angular Service Workerの使用を&lt;a href=&quot;service-worker-getting-started&quot;&gt;開始するには、Service Workerの開始を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="de460edf05dca2d464a1be91407ed6ffea7d7a8e" translate="yes">
          <source>To begin using the CLI for a new project, see &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">新しいプロジェクトでCLIの使用を開始するには、 &lt;a href=&quot;setup-local&quot;&gt;ローカル環境のセットアップを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6b18b6e1679f6b673ab980d8c28e59713ff54dfa" translate="yes">
          <source>To begin, configure a set of routes using methods available in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; class. This route configuration tells the router how to navigate.</source>
          <target state="translated">まず、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; クラスで利用可能なメソッドを使用して一連のルートを構成します。 このルート構成は、ナビゲート方法をルーターに指示します。</target>
        </trans-unit>
        <trans-unit id="008987cccbf2a31fda96aa5a830cd40924b91032" translate="yes">
          <source>To begin, create a new subfolder, &lt;code&gt;my-service&lt;/code&gt;, in the &lt;code&gt;schematics&lt;/code&gt; folder.</source>
          <target state="translated">最初に、 &lt;code&gt;schematics&lt;/code&gt; フォルダーに新しいサブフォルダー &lt;code&gt;my-service&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="6dd9e1c57cc321e0fe725c8e45cb7fc4f6d13c75" translate="yes">
          <source>To benefit from the Angular service worker, your app must run in a web browser that supports service workers in general. Currently, service workers are supported in the latest versions of Chrome, Firefox, Edge, Safari, Opera, UC Browser (Android version) and Samsung Internet. Browsers like IE and Opera Mini do not support service workers.</source>
          <target state="translated">Angular Service Workerを活用するには、Service Worker全般をサポートするWebブラウザーでアプリを実行する必要があります。 現在、サービスワーカーはChrome、Firefox、Edge、Safari、Opera、UC Browser（Androidバージョン）、Samsung Internetの最新バージョンでサポートされています。 IEやOpera Miniなどのブラウザは、サービスワーカーをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="aceceb9344b852a619d58c97b4a87fbc9c2dc9ab" translate="yes">
          <source>To bind to a DOM event, surround the DOM event name in parentheses and assign a quoted &lt;a href=&quot;template-syntax#template-statements&quot;&gt;template statement&lt;/a&gt; to it.</source>
          <target state="translated">DOMイベントにバインドするには、DOMイベント名を括弧で囲み、引用符で囲まれた&lt;a href=&quot;template-syntax#template-statements&quot;&gt;テンプレートステートメント&lt;/a&gt;を割り当てます。</target>
        </trans-unit>
        <trans-unit id="2a2b43d8d4759c302041d5555e84a74b033db308" translate="yes">
          <source>To block XSS attacks, you must prevent malicious code from entering the DOM (Document Object Model). For example, if attackers can trick you into inserting a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the DOM, they can run arbitrary code on your website. The attack isn't limited to &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&amp;mdash;many elements and properties in the DOM allow code execution, for example, &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt;. If attacker-controlled data enters the DOM, expect security vulnerabilities.</source>
          <target state="translated">XSS攻撃をブロックするには、悪意のあるコードがDOM（ドキュメントオブジェクトモデル）に入るのを防ぐ必要があります。 たとえば、攻撃者があなたをだましてDOMに &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを挿入できる場合、彼らはあなたのウェブサイトで任意のコードを実行できます。 攻撃は &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグに限定されません。たとえば、 &lt;code&gt;&amp;lt;img onerror=&quot;...&quot;&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href=&quot;javascript:...&quot;&amp;gt;&lt;/code&gt; &quot;javascript：...&quot;&amp;gt;のように、DOMの多くの要素やプロパティでコードを実行できます。 攻撃者が制御するデータがDOMに入る場合、セキュリティの脆弱性が予想されます。</target>
        </trans-unit>
        <trans-unit id="82e29a55d59b6b2bd0a517982412ccec5411a4a1" translate="yes">
          <source>To bootstrap a hybrid application, you must bootstrap each of the Angular and AngularJS parts of the application. You must bootstrap the Angular bits first and then ask the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; to bootstrap the AngularJS bits next.</source>
          <target state="translated">ハイブリッドアプリケーションをブートストラップするには、アプリケーションのAngularおよびAngularJSの各部分をブートストラップする必要があります。 最初にAngularビットをブートストラップし、次に &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; にAngularJSビットを次にブートストラップするように要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="e4ec3081d8abfef81b9c7b98512682fe817069de" translate="yes">
          <source>To build up the generation schematic, start with an empty rule factory.</source>
          <target state="translated">生成回路図を構築するには、空のルールファクトリから始めます。</target>
        </trans-unit>
        <trans-unit id="8901fe39170514d01f50341a27e20f9604a9825a" translate="yes">
          <source>To build using the staging configuration, run the following command:</source>
          <target state="translated">ステージング構成を使用してビルドするには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="e28bdfee0dc7a60965eea042b0b40687dbd667f9" translate="yes">
          <source>To build your application locally or for production, you will need to download the source code from your StackBlitz project. Click the &lt;code&gt;Download Project&lt;/code&gt; icon in the left menu across from &lt;code&gt;Project&lt;/code&gt; to download your files.</source>
          <target state="translated">アプリケーションをローカルまたは実稼働用にビルドするには、StackBlitzプロジェクトからソースコードをダウンロードする必要があります。 &lt;code&gt;Download Project&lt;/code&gt; 向かいの左側のメニューにある[ プロジェクトのダウンロード ]アイコンをクリックして、ファイルをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="0466ae768a4d93cf77c8e4981171d89f8a7ca6ff" translate="yes">
          <source>To bundle your schematics together with your library, you must configure the library to build the schematics separately, then add them to the bundle. You must build your schematics &lt;em&gt;after&lt;/em&gt; you build your library, so they are placed in the correct directory.</source>
          <target state="translated">回路図をライブラリにバンドルするには、ライブラリを構成して回路図を個別に構築し、それらをバンドルに追加する必要があります。 ライブラリをビルドした&lt;em&gt;後に&lt;/em&gt;回路図をビルドする必要があるため、それらは正しいディレクトリに配置されます。</target>
        </trans-unit>
        <trans-unit id="885d50f557834570c68a2e5e1be6b220c9216f5a" translate="yes">
          <source>To bypass the service worker you can set &lt;code&gt;ngsw-bypass&lt;/code&gt; as a request header, or as a query parameter. (The value of the header or query parameter is ignored and can be empty or omitted.)</source>
          <target state="translated">Service Workerをバイパスするには、 &lt;code&gt;ngsw-bypass&lt;/code&gt; をリクエストヘッダーまたはクエリパラメーターとして設定できます。 （ヘッダーまたはクエリパラメーターの値は無視され、空または省略できます。）</target>
        </trans-unit>
        <trans-unit id="12534712788ba78416f7f95870eaa280458520d6" translate="yes">
          <source>To catch errors, you &lt;strong&gt;&quot;pipe&quot; the observable&lt;/strong&gt; result from &lt;code&gt;http.get()&lt;/code&gt; through an RxJS &lt;code&gt;catchError()&lt;/code&gt; operator.</source>
          <target state="translated">エラーをキャッチするには、RxJS &lt;code&gt;catchError()&lt;/code&gt; 演算子を使用して、http.get &lt;code&gt;http.get()&lt;/code&gt; から&lt;strong&gt;観察可能な&lt;/strong&gt;結果を&lt;strong&gt;「パイプ」し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1e0fe49f14510b713680172388a0dd717d0f6c10" translate="yes">
          <source>To change the controls in the array, use the &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;removeAt&lt;/code&gt; or &lt;code&gt;clear&lt;/code&gt; methods in &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; itself. These methods ensure the controls are properly tracked in the form's hierarchy. Do not modify the array of &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s used to instantiate the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; directly, as that result in strange and unexpected behavior such as broken change detection.</source>
          <target state="translated">配列内のコントロールを変更するには、 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 自体で &lt;code&gt;push&lt;/code&gt; 、 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;removeAt&lt;/code&gt; または &lt;code&gt;clear&lt;/code&gt; メソッドを使用します。 これらのメソッドは、コントロールがフォームの階層で適切に追跡されるようにします。 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; を直接インスタンス化するために使用される &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; の配列を変更しないでください。変更の検出が壊れるなど、奇妙で予期しない動作が発生します。</target>
        </trans-unit>
        <trans-unit id="63029d22a7a0498f402e2ef9e4441e473404955c" translate="yes">
          <source>To check that you have the npm client installed, run &lt;code&gt;npm -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">npmクライアントがインストールされていることを確認するには、ターミナル/コンソールウィンドウで &lt;code&gt;npm -v&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="6e948743b462eea7115d418352e1dbfa4b4b10ff" translate="yes">
          <source>To check your app's version of Angular: From within your project directory, use the &lt;code&gt;ng version&lt;/code&gt; command.</source>
          <target state="translated">Angularのアプリのバージョンを確認するには：プロジェクトディレクトリ内から、 &lt;code&gt;ng version&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="13078c07edb73de738fd267221caa6c4bad9f0a1" translate="yes">
          <source>To check your version, run &lt;code&gt;node -v&lt;/code&gt; in a terminal/console window.</source>
          <target state="translated">バージョンを確認するには、ターミナル/コンソールウィンドウで &lt;code&gt;node -v&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="07cec4d840c8d65fc9e2b7b36b758a8ade445776" translate="yes">
          <source>To combine property and event bindings using the banana-in-a-box syntax, &lt;code&gt;[()]&lt;/code&gt;, see &lt;a href=&quot;template-syntax#two-way&quot;&gt;Two-way Binding&lt;/a&gt;.</source>
          <target state="translated">banana-in-a-box構文 &lt;code&gt;[()]&lt;/code&gt; を使用してプロパティとイベントバインディングを組み合わせるには、 &lt;a href=&quot;template-syntax#two-way&quot;&gt;双方向バインディングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3236306fb71061a53e3712837b9be971697d08d" translate="yes">
          <source>To conditionally display an element, place the element's &lt;code&gt;hidden&lt;/code&gt; property in square brackets and set it to a quoted template expression that evaluates to the &lt;em&gt;opposite&lt;/em&gt; of &lt;em&gt;show&lt;/em&gt;.</source>
          <target state="translated">要素を条件付きで表示するには、要素の &lt;code&gt;hidden&lt;/code&gt; プロパティを角括弧で囲み、 &lt;em&gt;show&lt;/em&gt;の&lt;em&gt;反対&lt;/em&gt;に評価される引用符で囲まれたテンプレート式に設定します。</target>
        </trans-unit>
        <trans-unit id="53182894e9c6995045a12635221f90b2e4299c08" translate="yes">
          <source>To configure access to your own users' CLI usage data, use the &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; command to add a key to your global &lt;a href=&quot;../guide/workspace-config&quot;&gt;&lt;code&gt;angular.json&lt;/code&gt; workspace configuration file&lt;/a&gt;. The key goes under &lt;code&gt;cli.analyticsSharing&lt;/code&gt; at the top level of the file, outside the &lt;code&gt;projects&lt;/code&gt; sections. The value of the key is your organization's tracking ID, as assigned by Google Analytics. This ID is a string that looks like &lt;code&gt;UA-123456-12&lt;/code&gt;.</source>
          <target state="translated">独自のユーザーのCLI使用データへのアクセスを構成するには、 &lt;code&gt;ng &lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; コマンドを使用して、キーをグローバル&lt;a href=&quot;../guide/workspace-config&quot;&gt; &lt;code&gt;angular.json&lt;/code&gt; ワークスペース構成ファイル&lt;/a&gt;に追加します 。 キーは、ファイルの最上位の &lt;code&gt;projects&lt;/code&gt; セクションの外側の &lt;code&gt;cli.analyticsSharing&lt;/code&gt; の下にあります。 キーの値は、Googleアナリティクスによって割り当てられた組織の追跡IDです。 このIDは &lt;code&gt;UA-123456-12&lt;/code&gt; のような文字列です。</target>
        </trans-unit>
        <trans-unit id="081b1f073ba92cd82743621b3f2f2eb2c90049a3" translate="yes">
          <source>To configure the Angular Router, you must define a route for AngularJS URLs. To match those URLs, you add a route configuration that uses the &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; allows you to use custom pattern matching for URL paths. The Angular Router tries to match on more specific routes such as static and variable routes first. When it doesn't find a match, it then looks at custom matchers defined in your route configuration. If the custom matchers don't match a route, it then goes to catch-all routes, such as a 404 page.</source>
          <target state="translated">Angular Routerを構成するには、AngularJS URLのルートを定義する必要があります。 これらのURLを一致させるには、 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; プロパティを使用するルート構成を追加します。 &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; を使用すると、URLパスにカスタムパターンマッチングを使用できます。 Angular Routerは、静的ルートや可変ルートなど、より具体的なルートで最初に一致を試みます。 一致するものが見つからない場合、ルート構成で定義されたカスタムマッチャーを調べます。 カスタムマッチャーがルートと一致しない場合、404ページなどのキャッチオールルートに進みます。</target>
        </trans-unit>
        <trans-unit id="99be46bd11d0de83ad9e296968ef2c5a7118146b" translate="yes">
          <source>To continue exploring Angular, choose either of the following options:</source>
          <target state="translated">Angularの探索を続けるには、次のオプションのいずれかを選択します。</target>
        </trans-unit>
        <trans-unit id="a3014c43a2313b977c6aed25419c31a95265fa08" translate="yes">
          <source>To contrast the two types of components, there are components which are included in the template, which are declarative. Additionally, there are components which you load imperatively; that is, entry components.</source>
          <target state="translated">2つのタイプのコンポーネントを対比するために、テンプレートに含まれるコンポーネントが宣言的です。 さらに、命令的にロードするコンポーネントがあります。 つまり、エントリコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="959d46928d85d110fdade5f2293bf97890445838" translate="yes">
          <source>To control how this encapsulation happens on a &lt;em&gt;per component&lt;/em&gt; basis, you can set the &lt;em&gt;view encapsulation mode&lt;/em&gt; in the component metadata. Choose from the following modes:</source>
          <target state="translated">&lt;em&gt;コンポーネント&lt;/em&gt;ごとにこのカプセル化がどのように行われるかを制御するには、コンポーネントメタデータで&lt;em&gt;ビューのカプセル化モードを&lt;/em&gt;設定できます。 次のモードから選択します。</target>
        </trans-unit>
        <trans-unit id="c93024cc33ad0ddbba14e6bbd25bf12722637c4a" translate="yes">
          <source>To control the state of the button, set the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;property&lt;/em&gt;,</source>
          <target state="translated">ボタンの状態を制御するには、 &lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;プロパティを&lt;/em&gt;設定し、</target>
        </trans-unit>
        <trans-unit id="fbe3fde2fb0a60e4ec9cfcd947c47d4e664ce7a7" translate="yes">
          <source>To convert this binding to use specialized objects, turn the array of hero names into an array of &lt;code&gt;Hero&lt;/code&gt; objects. For that you'll need a &lt;code&gt;Hero&lt;/code&gt; class:</source>
          <target state="translated">このバインディングを特殊なオブジェクトを使用するように変換するには、ヒーロー名の配列を &lt;code&gt;Hero&lt;/code&gt; オブジェクトの配列に変換します。 そのためには、 &lt;code&gt;Hero&lt;/code&gt; クラスが必要です。</target>
        </trans-unit>
        <trans-unit id="3e235ca1b49cbf515a53d4eb460cb0a499395651" translate="yes">
          <source>To copy a code example from this tutorial, click the icon at the top right of the code example box, and then paste the code snippet from the clipboard into StackBlitz.</source>
          <target state="translated">このチュートリアルからコード例をコピーするには、コード例ボックスの右上にあるアイコンをクリックして、クリップボードからStackBlitzにコードスニペットを貼り付けます。</target>
        </trans-unit>
        <trans-unit id="b27e4d885fe2defbb235fa198172a39e1ab9f6e4" translate="yes">
          <source>To correct the problem, call &lt;code&gt;compileComponents()&lt;/code&gt; as explained &lt;a href=&quot;testing#compile-components&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">問題を修正するには、 &lt;a href=&quot;testing#compile-components&quot;&gt;以下で&lt;/a&gt;説明するように &lt;code&gt;compileComponents()&lt;/code&gt; を呼び出します 。</target>
        </trans-unit>
        <trans-unit id="979325cb37deb2c50164b83f04e810b1ac2b55a5" translate="yes">
          <source>To correct this error, export a function from the module and refer to the function in a &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider instead.</source>
          <target state="translated">このエラーを修正するには、モジュールから関数をエクスポートし、代わりに &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; プロバイダーの関数を参照します。</target>
        </trans-unit>
        <trans-unit id="1ecaf5471a0ced58416233b3602e2e5a39d32a9d" translate="yes">
          <source>To correct this error, provide the initial value of the variable in an initializer clause &lt;em&gt;on the same line&lt;/em&gt;.</source>
          <target state="translated">このエラーを修正するには、変数の初期値を&lt;em&gt;同じ行の&lt;/em&gt;初期化句&lt;em&gt;に指定し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4dee6cdbff0c50b18b7cf0744c39d9afb9e81794" translate="yes">
          <source>To correct this error, refer to non-destructured values.</source>
          <target state="translated">このエラーを修正するには、非構造化されていない値を参照してください。</target>
        </trans-unit>
        <trans-unit id="d2bf7fb2d3e94211afcd57a10f20c4c45cfe0d7d" translate="yes">
          <source>To create a new workspace and an initial app project:</source>
          <target state="translated">新しいワークスペースと最初のアプリプロジェクトを作成するには：</target>
        </trans-unit>
        <trans-unit id="f144d38768edd99f2d27499d71edd950a08584a3" translate="yes">
          <source>To create a new workspace and initial starter app:</source>
          <target state="translated">新しいワークスペースと初期スターターアプリを作成するには：</target>
        </trans-unit>
        <trans-unit id="1aa719950868f1d4fa3ac83a344dcfa8c80b6018" translate="yes">
          <source>To create a reusable animation, use the &lt;a href=&quot;../api/animations/animation&quot;&gt;&lt;code&gt;animation()&lt;/code&gt;&lt;/a&gt; method to define an animation in a separate &lt;code&gt;.ts&lt;/code&gt; file and declare this animation definition as a &lt;code&gt;const&lt;/code&gt; export variable. You can then import and reuse this animation in any of your app components using the &lt;a href=&quot;../api/animations/useanimation&quot;&gt;&lt;code&gt;useAnimation()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">再利用可能なアニメーションを作成するには、 &lt;a href=&quot;../api/animations/animation&quot;&gt; &lt;code&gt;animation()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、別の &lt;code&gt;.ts&lt;/code&gt; ファイルでアニメーションを定義し、このアニメーション定義を &lt;code&gt;const&lt;/code&gt; エクスポート変数として宣言します。 その後、 &lt;a href=&quot;../api/animations/useanimation&quot;&gt; &lt;code&gt;useAnimation()&lt;/code&gt; &lt;/a&gt; APIを使用して、このアニメーションをアプリコンポーネントのいずれかにインポートして再利用できます。</target>
        </trans-unit>
        <trans-unit id="29ae33325b206d2fd3cdedfd24a2c41e5f192288" translate="yes">
          <source>To create the cart page, you begin by following the same steps you did to create the product details component and to set up routing for the new component.</source>
          <target state="translated">カートページを作成するには、最初に製品詳細コンポーネントを作成し、新しいコンポーネントのルーティングを設定したのと同じ手順を実行します。</target>
        </trans-unit>
        <trans-unit id="594ec3ddcc19c25f73ea897495b521aecaf86016" translate="yes">
          <source>To create the server-side app module, &lt;code&gt;app.server.module.ts&lt;/code&gt;, run the following CLI command.</source>
          <target state="translated">サーバー側のアプリモジュール &lt;code&gt;app.server.module.ts&lt;/code&gt; を作成するには、次のCLIコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="a1d7d554f2d72ca28c730058079d294822be35c1" translate="yes">
          <source>To create, build, and serve a new, basic Angular project on a development server, go to the parent directory of your new workspace use the following commands:</source>
          <target state="translated">開発サーバーで新しい基本的なAngularプロジェクトを作成、構築、提供するには、次のコマンドを使用して新しいワークスペースの親ディレクトリに移動します。</target>
        </trans-unit>
        <trans-unit id="65acbd001432e22b30e796e7e61e3dfe440088a8" translate="yes">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. &lt;code&gt;compareWith&lt;/code&gt; takes a &lt;strong&gt;function&lt;/strong&gt; which has two arguments: &lt;code&gt;option1&lt;/code&gt; and &lt;code&gt;option2&lt;/code&gt;. If &lt;code&gt;compareWith&lt;/code&gt; is given, Angular selects option by the return value of the function.</source>
          <target state="translated">デフォルトのオプション比較アルゴリズムをカスタマイズするために、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; は &lt;code&gt;compareWith&lt;/code&gt; 入力をサポートしています。 &lt;code&gt;compareWith&lt;/code&gt; は、 &lt;code&gt;option1&lt;/code&gt; と &lt;code&gt;option2&lt;/code&gt; の 2つの引数を持つ&lt;strong&gt;関数&lt;/strong&gt;を取ります。 &lt;code&gt;compareWith&lt;/code&gt; が指定されている場合、Angularは関数の戻り値によってオプションを選択します。</target>
        </trans-unit>
        <trans-unit id="c9057dec56a92572abc6bcb328cdc254209b6283" translate="yes">
          <source>To customize the default option comparison algorithm, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; supports &lt;code&gt;compareWith&lt;/code&gt; input. See the &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; for usage.</source>
          <target state="translated">デフォルトのオプション比較アルゴリズムをカスタマイズするために、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; は &lt;code&gt;compareWith&lt;/code&gt; 入力をサポートしています。 使用法については、 &lt;code&gt;&lt;a href=&quot;selectcontrolvalueaccessor&quot;&gt;SelectControlValueAccessor&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="12614d5a0a4f9980916f0bd6829fb9e94aeee5ca" translate="yes">
          <source>To deactivate the service worker, remove or rename the &lt;code&gt;ngsw.json&lt;/code&gt; file. When the service worker's request for &lt;code&gt;ngsw.json&lt;/code&gt; returns a &lt;code&gt;404&lt;/code&gt;, then the service worker removes all of its caches and de-registers itself, essentially self-destructing.</source>
          <target state="translated">Service Workerを無効にするには、 &lt;code&gt;ngsw.json&lt;/code&gt; ファイルを削除するか名前を変更します。 &lt;code&gt;ngsw.json&lt;/code&gt; に対するサービスワーカーのリクエストが &lt;code&gt;404&lt;/code&gt; を返すと、サービスワーカーはすべてのキャッシュを削除し、それ自体を登録解除し 、本質的に自己破壊します。</target>
        </trans-unit>
        <trans-unit id="95e38d849c5796bd6398c2761b41e463c7976d04" translate="yes">
          <source>To define a class as a service in Angular, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to provide the metadata that allows Angular to inject it into a component as a &lt;em&gt;dependency&lt;/em&gt;. Similarly, use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator to indicate that a component or other class (such as another service, a pipe, or an NgModule) &lt;em&gt;has&lt;/em&gt; a dependency.</source>
          <target state="translated">クラスをAngularのサービスとして定義するには、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータを使用して、Angularが&lt;em&gt;依存関係&lt;/em&gt;としてコンポーネントにそれを注入できるようにするメタデータを提供します。 同様に、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータを使用して、コンポーネントまたは他のクラス（別のサービス、パイプ、NgModuleなど） &lt;em&gt;に&lt;/em&gt;依存関係&lt;em&gt;が&lt;/em&gt;あることを示します。</target>
        </trans-unit>
        <trans-unit id="ad6c984d27957b7c6989d1d288e104c9c138aa30" translate="yes">
          <source>To define a directive, mark the class with the decorator and provide metadata.</source>
          <target state="translated">ディレクティブを定義するには、デコレーターでクラスをマークし、メタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="1cd846925adda37616140e026544f1e443869411" translate="yes">
          <source>To define navigation rules, you associate &lt;em&gt;navigation paths&lt;/em&gt; with your components. A path uses a URL-like syntax that integrates your program data, in much the same way that template syntax integrates your views with your program data. You can then apply program logic to choose which views to show or to hide, in response to user input and your own access rules.</source>
          <target state="translated">ナビゲーションルールを定義するには、 &lt;em&gt;ナビゲーションパス&lt;/em&gt;をコンポーネントに関連付けます。 パスは、テンプレート構文がビューをプログラムデータと統合するのとほぼ同じ方法で、プログラムデータを統合するURLのような構文を使用します。 その後、ユーザー入力と独自のアクセスルールに応じて、表示または非表示にするビューを選択するプログラムロジックを適用できます。</target>
        </trans-unit>
        <trans-unit id="2e9f5fcdd9d08eaae4f6f27d8f15141de7ee4a5f" translate="yes">
          <source>To deploy your application, you have to compile it, and then host the JavaScript, CSS, and HTML on a web server. Built Angular applications are very portable and can live in any environment or served by any technology, such as Node, Java, .NET, PHP, and many others.</source>
          <target state="translated">アプリケーションをデプロイするには、アプリケーションをコンパイルし、WebサーバーでJavaScript、CSS、およびHTMLをホストする必要があります。 構築されたAngularアプリケーションは非常に移植性が高く、あらゆる環境で使用でき、Node、Java、.NET、PHP、その他多くのテクノロジーなどのあらゆるテクノロジーで提供できます。</target>
        </trans-unit>
        <trans-unit id="458c0ad6c07671bce624449b3ec9d294dc2007ad" translate="yes">
          <source>To determine the destination project, use the &lt;code&gt;Tree.read()&lt;/code&gt; method to read the contents of the workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, at the root of the workspace. Add the following code to your factory function.</source>
          <target state="translated">宛先プロジェクトを決定するには、 &lt;code&gt;Tree.read()&lt;/code&gt; メソッドを使用して、ワークスペースのルートにあるワークスペース構成ファイル &lt;code&gt;angular.json&lt;/code&gt; 内容を読み取ります。 ファクトリー関数に次のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="b38921f33869fd230c21c0400a6e54f928af5829" translate="yes">
          <source>To disable all animations for an Angular app, place the &lt;code&gt;@.disabled&lt;/code&gt; host binding on the topmost Angular component.</source>
          <target state="translated">Angularアプリのすべてのアニメーションを無効にするには、最上位のAngularコンポーネントに &lt;code&gt;@.disabled&lt;/code&gt; ホストバインディングを配置します。</target>
        </trans-unit>
        <trans-unit id="8d2b1d0f9febd720f6513d3ea282a6265dbf4671" translate="yes">
          <source>To display a list of heroes, begin by adding an array of hero names to the component and redefine &lt;code&gt;myHero&lt;/code&gt; to be the first name in the array.</source>
          <target state="translated">ヒーローのリストを表示するには、まずヒーロー名の配列をコンポーネントに追加し、 &lt;code&gt;myHero&lt;/code&gt; を配列の最初の名前に再定義します。</target>
        </trans-unit>
        <trans-unit id="c5c321525611939ce03b07b9d1cd2adb53d24843" translate="yes">
          <source>To display a template when &lt;code&gt;expression&lt;/code&gt; evaluates to false, use an &lt;code&gt;else&lt;/code&gt; template binding as shown in the following example. The &lt;code&gt;else&lt;/code&gt; binding points to an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element labeled &lt;code&gt;#elseBlock&lt;/code&gt;. The template can be defined anywhere in the component view, but is typically placed right after &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; for readability.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; がfalseと評価されたときにテンプレートを表示するには、次の例に示すように &lt;code&gt;else&lt;/code&gt; テンプレートバインディングを使用します 。 &lt;code&gt;else&lt;/code&gt; バインディングは、 &lt;code&gt;#elseBlock&lt;/code&gt; というラベルの付いた &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素を指します。 テンプレートはコンポーネントビューのどこでも定義できますが、通常は読みやすくするために &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; の直後に配置されます。</target>
        </trans-unit>
        <trans-unit id="f578c5cb78b9f7bd8066f62098c29394c6101150" translate="yes">
          <source>To display the &lt;code&gt;HeroesComponent&lt;/code&gt;, you must add it to the template of the shell &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; を表示するには、シェル &lt;code&gt;AppComponent&lt;/code&gt; のテンプレートに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f6cadc05a799ae38b432205731731047b90305a" translate="yes">
          <source>To display the &lt;code&gt;ProfileEditor&lt;/code&gt; component that contains the form, add it to a component template.</source>
          <target state="translated">フォームを含む &lt;code&gt;ProfileEditor&lt;/code&gt; コンポーネントを表示するには、コンポーネントテンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="903cc390eb408d1ea55af3983eda315a6832f5dc" translate="yes">
          <source>To display the names of the products, use the interpolation syntax &lt;code&gt;{{ }}&lt;/code&gt;. Interpolation renders a property's value as text. Inside the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, add an &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; to display the interpolation of the product's name property:</source>
          <target state="translated">製品の名前を表示するには、補間構文 &lt;code&gt;{{ }}&lt;/code&gt; 使用します。 補間は、プロパティの値をテキストとしてレンダリングします。 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 内に&amp;lt; &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; を追加して、製品の名前プロパティの補間を表示します。</target>
        </trans-unit>
        <trans-unit id="af6b8e70bc867df920c57a14286a9aca559c2d1f" translate="yes">
          <source>To do this for &lt;code&gt;ng serve&lt;/code&gt;, create a new file, &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; next to &lt;code&gt;tsconfig.app.json&lt;/code&gt; with the following content.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; でこれを行うには、 &lt;code&gt;tsconfig-es5.app.json&lt;/code&gt; 横に次の内容の新しいファイルtsconfig-es5.app.jsonを &lt;code&gt;tsconfig.app.json&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="2d79d0bb78f9158b8f6b014230ea7d15c1b601c1" translate="yes">
          <source>To do this, list the more specific transitions &lt;em&gt;before&lt;/em&gt;&lt;code&gt;* =&amp;gt; *&lt;/code&gt;.</source>
          <target state="translated">これを行うには、 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; の &lt;em&gt;前に&lt;/em&gt; 、より具体的な遷移をリストします。</target>
        </trans-unit>
        <trans-unit id="4af7f031db75e121d1590f04ee2af53757ce04c5" translate="yes">
          <source>To do this, you'll use the Angular &lt;em&gt;router&lt;/em&gt;. The Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;router&lt;/a&gt; enables you to show different components and data to the user based on where the user is in the application. The router enables navigation from one view to the next as users perform application tasks:</source>
          <target state="translated">これを行うには、Angular &lt;em&gt;ルーターを&lt;/em&gt;使用し&lt;em&gt;ます&lt;/em&gt; 。 Angular &lt;a href=&quot;../guide/glossary#router&quot;&gt;ルーターを&lt;/a&gt;使用すると、アプリケーション内のユーザーの場所に基づいて、さまざまなコンポーネントとデータをユーザーに表示できます。 ルーターは、ユーザーがアプリケーションタスクを実行するときに、あるビューから次のビューへのナビゲーションを可能にします。</target>
        </trans-unit>
        <trans-unit id="94dcbf1537099a8d72c6a9756d09210df8ae8156" translate="yes">
          <source>To enable preloading of all lazy loaded modules, import the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token from the Angular router package.</source>
          <target state="translated">遅延ロードされたすべてのモジュールのプリロードを有効にするには、Angularルーターパッケージから &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; トークンをインポートします。</target>
        </trans-unit>
        <trans-unit id="7fc710364e3b588a30c9d0c74118b2c885102b0a" translate="yes">
          <source>To enable routing transition animation, do the following:</source>
          <target state="translated">ルーティング遷移アニメーションを有効にするには、次を実行します。</target>
        </trans-unit>
        <trans-unit id="25d5eb1605457fea82578b3d288b0d9a7ae3a8f5" translate="yes">
          <source>To ensure a high-quality, consistent experience for Angular documentation users.</source>
          <target state="translated">Angularドキュメントユーザーに高品質で一貫したエクスペリエンスを保証するため。</target>
        </trans-unit>
        <trans-unit id="b0bf35c98e00c5fabe6d7d695facb2ff6dcd71c2" translate="yes">
          <source>To ensure any necessary teardown is triggered in the AngularJS app, such as removal of global listeners, you also implement a method to call the &lt;code&gt;$rootScope.destroy()&lt;/code&gt; method.</source>
          <target state="translated">グローバルリスナーの削除など、必要なティアダウンがAngularJSアプリでトリガーされるようにするには、 &lt;code&gt;$rootScope.destroy()&lt;/code&gt; メソッドを呼び出すメソッドも実装します。</target>
        </trans-unit>
        <trans-unit id="ebde52584fea72d72602dc3407e717b85e61cb56" translate="yes">
          <source>To ensure resource integrity, the Angular service worker validates the hashes of all resources for which it has a hash. Typically for an app created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, this is everything in the &lt;code&gt;dist&lt;/code&gt; directory covered by the user's &lt;code&gt;src/ngsw-config.json&lt;/code&gt; configuration.</source>
          <target state="translated">リソースの整合性を確保するために、Angular Service Workerは、ハッシュを持つすべてのリソースのハッシュを検証します。 通常、 &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;で作成されたアプリの場合、これはユーザーの &lt;code&gt;src/ngsw-config.json&lt;/code&gt; 設定でカバーされる &lt;code&gt;dist&lt;/code&gt; ディレクトリ内のすべてです。</target>
        </trans-unit>
        <trans-unit id="36a2f26d071a65a5067d8e3435ef41b66818020c" translate="yes">
          <source>To ensure that clients can only download the files that they are permitted to see, put all client-facing asset files in the &lt;code&gt;/dist&lt;/code&gt; folder and only honor requests for files from the &lt;code&gt;/dist&lt;/code&gt; folder.</source>
          <target state="translated">クライアントが表示が許可されているファイルのみをダウンロードできるようにするには、すべてのクライアント向けアセットファイルを &lt;code&gt;/dist&lt;/code&gt; フォルダーに入れ、 / distフォルダーからのファイルの要求のみを &lt;code&gt;/dist&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d8598c2022602203d9603274200d342e1eb538fb" translate="yes">
          <source>To ensure that the compiler still generates a factory, add dynamically loaded components to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;'s &lt;code&gt;entryComponents&lt;/code&gt; array:</source>
          <target state="translated">コンパイラーが引き続きファクトリーを生成するようにするには、動的にロードされたコンポーネントを &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;entryComponents&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="e1812e3ae723bb35d7649d2ff5479140c8c70d2c" translate="yes">
          <source>To exclude a heading from the TOC, create the heading as an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; element with a class called 'no-toc'. You can't do this with markdown.</source>
          <target state="translated">TOCから見出しを除外するには、「no-toc」というクラスを持つ &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 要素として見出しを作成します。 これをマークダウンで行うことはできません。</target>
        </trans-unit>
        <trans-unit id="ec903eae4634b565ecbfd272a77568b1f130ca3e" translate="yes">
          <source>To exclude an asset, you can remove it from the assets configuration.</source>
          <target state="translated">資産を除外するには、資産構成から削除します。</target>
        </trans-unit>
        <trans-unit id="f9e07f2c5513c75b8f79d6963b277e9fbd52a303" translate="yes">
          <source>To execute the observable you have created and begin receiving notifications, you call its &lt;code&gt;subscribe()&lt;/code&gt; method, passing an &lt;em&gt;observer&lt;/em&gt;. This is a JavaScript object that defines the handlers for the notifications you receive. The &lt;code&gt;subscribe()&lt;/code&gt; call returns a &lt;code&gt;Subscription&lt;/code&gt; object that has an &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; method, which you call to stop receiving notifications.</source>
          <target state="translated">作成したobservableを実行して通知の受信を開始するには、 &lt;code&gt;subscribe()&lt;/code&gt; メソッドを呼び出して&lt;em&gt;observer&lt;/em&gt;を渡します。 これは、受け取る通知のハンドラーを定義するJavaScriptオブジェクトです。 &lt;code&gt;subscribe()&lt;/code&gt; 呼び出しは、通知の受信を停止するために呼び出す &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; メソッドを持つ &lt;code&gt;Subscription&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="4a6f3f5c4289042742ca02c090211b9822454c2a" translate="yes">
          <source>To explicitly disable differential loading:</source>
          <target state="translated">明示的に差分読み込みを無効にするには：</target>
        </trans-unit>
        <trans-unit id="dc86ffb91970ba4ea3d784fdcfa4a20106112fb8" translate="yes">
          <source>To filter output in AngularJS templates, use the pipe character (|) and one or more filters.</source>
          <target state="translated">AngularJSテンプレートで出力をフィルタリングするには、パイプ文字（|）と1つ以上のフィルターを使用します。</target>
        </trans-unit>
        <trans-unit id="154ce8f40b436ba677325298e54443b2e23530f6" translate="yes">
          <source>To fix that, create an array with the new hero appended and assign that to &lt;code&gt;heroes&lt;/code&gt;. This time Angular detects that the array reference has changed. It executes the pipe and updates the display with the new array, which includes the new flying hero.</source>
          <target state="translated">これを修正するには、新しいヒーローを追加した配列を作成し、それを &lt;code&gt;heroes&lt;/code&gt; 割り当てます。 今回は、配列参照が変更されたことをAngularが検出します。 パイプを実行し、新しい配列でディスプレイを更新します。これには、新しい飛行ヒーローが含まれます。</target>
        </trans-unit>
        <trans-unit id="56cf754ee3e7dca1fe9c44b4816cf790a119fb8c" translate="yes">
          <source>To fix this issue, listen to both the &lt;em&gt;Enter&lt;/em&gt; key and the &lt;em&gt;blur&lt;/em&gt; event.</source>
          <target state="translated">この問題を修正するには、 &lt;em&gt;Enter&lt;/em&gt;キーと&lt;em&gt;blur&lt;/em&gt;イベントの両方をリッスンします。</target>
        </trans-unit>
        <trans-unit id="ba34c5be9ff1d603c4140d7b3f5b608439a0b39b" translate="yes">
          <source>To flush the first quote from the observable, you call &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;. Then call &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to tell Angular to update the screen.</source>
          <target state="translated">オブザーバブルから最初の引用をフラッシュするには、 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; を呼び出します。 次に、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; を呼び出して、Angularに画面を更新するよう指示します。</target>
        </trans-unit>
        <trans-unit id="fc7ba23765221be6372d0b33a6a7c1abada5cdf3" translate="yes">
          <source>To follow along with the tutorial, clone the &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt; repository and apply the steps as you go.</source>
          <target state="translated">チュートリアルを進めるには、 &lt;a href=&quot;https://github.com/angular/angular-phonecat&quot;&gt;angular-phonecat&lt;/a&gt;リポジトリのクローンを作成し、実行しながら手順を適用します。</target>
        </trans-unit>
        <trans-unit id="50c790d75defb0a4ec3aa8c5265b6f9346b5307e" translate="yes">
          <source>To follow this pattern, import the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper with the other testing symbols.</source>
          <target state="translated">このパターンに従うには、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; ヘルパーを他のテストシンボルとともにインポートします。</target>
        </trans-unit>
        <trans-unit id="0e9bedad15ebc538d9e68cbdd28af270587693f3" translate="yes">
          <source>To generate a coverage report run the following command in the root of your project.</source>
          <target state="translated">カバレッジレポートを生成するには、プロジェクトのルートで次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="abf26b47cd0c5e68c8c79d0daf2df1036fa78b7a" translate="yes">
          <source>To generate a new random user ID, run the following command:</source>
          <target state="translated">新しいランダムなユーザーIDを生成するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="8acafccdcb332ce70715cbf29a3839a0c89102b8" translate="yes">
          <source>To get &lt;code&gt;Node.js&lt;/code&gt;, go to &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.org&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Node.js&lt;/code&gt; を取得するには、 &lt;a href=&quot;https://nodejs.org&quot;&gt;nodejs.orgにアクセスし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="0e9f4a06c6902eaaa4816e3c94cc563103857fe3" translate="yes">
          <source>To get around this problem you can use TypeScript path mapping to tell TypeScript that it should load some modules from a specific location. List all the peer dependencies that your library uses in the workspace TypeScript configuration file &lt;code&gt;./tsconfig.json&lt;/code&gt;, and point them at the local copy in the app's &lt;code&gt;node_modules&lt;/code&gt; folder.</source>
          <target state="translated">この問題を回避するには、TypeScriptパスマッピングを使用して、特定の場所からいくつかのモジュールを読み込む必要があることをTypeScriptに伝えることができます。 ライブラリが使用するすべてのピア依存関係をワークスペースのTypeScript構成ファイル &lt;code&gt;./tsconfig.json&lt;/code&gt; にリストし 、それらをアプリの &lt;code&gt;node_modules&lt;/code&gt; フォルダー内のローカルコピーに向けます。</target>
        </trans-unit>
        <trans-unit id="c620c03d023234ed2391242307f1d8712d8a8439" translate="yes">
          <source>To get started with adding Angular animations to your project, import the animation-specific modules along with standard Angular functionality.</source>
          <target state="translated">プロジェクトへのAngularアニメーションの追加を開始するには、標準のAngular機能とともにアニメーション固有のモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="22605a20b1a22f239c1e3107167d2597f5c39ded" translate="yes">
          <source>To guard against a lazy loaded module re-importing &lt;code&gt;GreetingModule&lt;/code&gt;, add the following &lt;code&gt;GreetingModule&lt;/code&gt; constructor.</source>
          <target state="translated">遅延ロードされたモジュールが &lt;code&gt;GreetingModule&lt;/code&gt; を再インポートしないようにするには、次の &lt;code&gt;GreetingModule&lt;/code&gt; コンストラクターを追加します。</target>
        </trans-unit>
        <trans-unit id="77ca585f495413c83c85661daa403686e9bd57f1" translate="yes">
          <source>To guard against minification problems, tell Angular explicitly that it should inject an instance of the &lt;code&gt;MovieService&lt;/code&gt; in the first parameter.</source>
          <target state="translated">縮小の問題を防ぐには、 &lt;code&gt;MovieService&lt;/code&gt; に、最初のパラメーターでMovieServiceのインスタンスを注入することを明示的に伝えます。</target>
        </trans-unit>
        <trans-unit id="0483a13b68a98141b413a5592409e590323ff6ac" translate="yes">
          <source>To help determine whether your proxy is working as intended, set the &lt;code&gt;logLevel&lt;/code&gt; option. For example:</source>
          <target state="translated">プロキシが意図したとおりに動作しているかどうかを判断するには、 &lt;code&gt;logLevel&lt;/code&gt; オプションを設定します。 例えば：</target>
        </trans-unit>
        <trans-unit id="ef7a832a2ae76c1a243ec1b9f05e550953889fdf" translate="yes">
          <source>To help ensure that you have sufficient time and a clear path to update, this is our deprecation policy:</source>
          <target state="translated">十分な時間と明確な更新パスを確保するために、これは非推奨ポリシーです。</target>
        </trans-unit>
        <trans-unit id="b18eb17f8c80dcf33ac422b8959463f27ab98a1d" translate="yes">
          <source>To help you future-proof your apps, the following table lists all deprecated APIs and features, organized by the release in which they are candidates for removal. Each item is linked to the section later in this guide that describes the deprecation reason and replacement options.</source>
          <target state="translated">アプリの将来性を保証するために、次の表に、廃止予定のすべてのAPIと機能を、それらが削除の候補となるリリースごとにまとめて示します。 各アイテムは、このガイドの後のセクションにリンクされています。このセクションでは、サポート終了の理由と交換オプションについて説明しています。</target>
        </trans-unit>
        <trans-unit id="d5b3bbad8bfc4eb6cea8091361ccfc84c96c7368" translate="yes">
          <source>To help you get going, the following steps use predefined product data and methods from the &lt;code&gt;product-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;product-list.component.ts&lt;/code&gt; ために、次の手順ではproduct-list.component.tsファイルの事前定義された製品データとメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="e3fe5b2a2bd58ed1b8655045a4030a46a226b4e3" translate="yes">
          <source>To host an Angular app on another web host, you'll need to upload or send the files to the host. Because you are building a Single Page Application, you'll also need to make sure you redirect any invalid URLs to your &lt;code&gt;index.html&lt;/code&gt; file. Learn more about development and distribution of your application in the &lt;a href=&quot;../guide/build&quot;&gt;Building &amp;amp; Serving&lt;/a&gt; and &lt;a href=&quot;../guide/deployment&quot;&gt;Deployment&lt;/a&gt; guides.</source>
          <target state="translated">別のWebホストでAngularアプリをホストするには、ホストにファイルをアップロードまたは送信する必要があります。 単一ページアプリケーションを構築しているため、無効なURLを &lt;code&gt;index.html&lt;/code&gt; ファイルにリダイレクトすることも確認する必要があります。 アプリケーションの開発と配布の詳細については、 &lt;a href=&quot;../guide/build&quot;&gt;構築と提供&lt;/a&gt;および&lt;a href=&quot;../guide/deployment&quot;&gt;導入&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="5f77fdab586f868e4093851acfc1533b76f62e25" translate="yes">
          <source>To illustrate the use of &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;, edit these parts of your app:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 使用を説明するために、アプリの次の部分を編集します。</target>
        </trans-unit>
        <trans-unit id="1fbb1f454bb7d2e047050e16a5b5adac1e15336c" translate="yes">
          <source>To illustrate, here's a simplified version of &lt;code&gt;HighlightDirective&lt;/code&gt; from the &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; page.</source>
          <target state="translated">説明のために、 &lt;a href=&quot;attribute-directives&quot;&gt;属性ディレクティブ&lt;/a&gt;ページの &lt;code&gt;HighlightDirective&lt;/code&gt; の簡易バージョンを次に示します。</target>
        </trans-unit>
        <trans-unit id="d9242c7bce3b2639f0867ea3c0827c2fa3fcc014" translate="yes">
          <source>To implement an interceptor, declare a class that implements the &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">インターセプターを実装するには、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; インターフェースの &lt;code&gt;&lt;a href=&quot;../api/common/http/jsonpinterceptor#intercept&quot;&gt;intercept()&lt;/a&gt;&lt;/code&gt; メソッドを実装するクラスを宣言します。</target>
        </trans-unit>
        <trans-unit id="69b60d346fb92f51499356b42a9f5d8d37258d56" translate="yes">
          <source>To include the new component, use its selector, &lt;code&gt;app-product-alert&lt;/code&gt;, as you would an HTML element.</source>
          <target state="translated">新しいコンポーネントを含めるには、HTML要素の場合と同様に、セレクター &lt;code&gt;app-product-alert&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="835dfd12477d853747c300147b3c559302e5eeff" translate="yes">
          <source>To incorporate the feature module into your app, you have to let the root module, &lt;code&gt;app.module.ts&lt;/code&gt;, know about it. Notice the &lt;code&gt;CustomerDashboardModule&lt;/code&gt; export at the bottom of &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;. This exposes it so that other modules can get to it. To import it into the &lt;code&gt;AppModule&lt;/code&gt;, add it to the imports in &lt;code&gt;app.module.ts&lt;/code&gt; and to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">機能モジュールをアプリに組み込むには、ルートモジュール &lt;code&gt;app.module.ts&lt;/code&gt; に通知する必要があります。 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; の下部にある &lt;code&gt;CustomerDashboardModule&lt;/code&gt; エクスポートに注意してください。 これにより、他のモジュールがアクセスできるようになります。 &lt;code&gt;AppModule&lt;/code&gt; にインポートするには、 app.module.tsのインポートとimports配列に追加します。</target>
        </trans-unit>
        <trans-unit id="7d1f76b24bcf5a077b04779a10d2acb122df684c" translate="yes">
          <source>To inspect the properties of the associated &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; (like validity state), export the directive into a local template variable using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; as the key (ex: &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt;). You then access the control using the directive's &lt;code&gt;control&lt;/code&gt; property, but most properties used (like &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt;) fall through to the control anyway for direct access. See a full list of properties directly available in &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関連する &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のプロパティ（有効性状態など）を &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; は、 ngModelをキーとして使用してディレクティブをローカルテンプレート変数にエクスポートします（例： &lt;code&gt;#myVar=&quot;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&quot;&lt;/code&gt; ）。 次に、ディレクティブの &lt;code&gt;control&lt;/code&gt; プロパティを使用してコントロールにアクセスしますが、使用されるほとんどのプロパティ（ &lt;code&gt;valid&lt;/code&gt; や &lt;code&gt;dirty&lt;/code&gt; など ）は、いずれにしても直接アクセスのためにコントロールにフォールスルーします。 &lt;code&gt;&lt;a href=&quot;abstractcontroldirective&quot;&gt;AbstractControlDirective&lt;/a&gt;&lt;/code&gt; で直接使用可能なプロパティの完全なリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="3be4cd44a75c82f831a7fb264bb28d71c6d67aa0" translate="yes">
          <source>To install the CLI using &lt;code&gt;npm&lt;/code&gt;, open a terminal/console window and enter the following command:</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; を使用してCLIをインストールするには、ターミナル/コンソールウィンドウを開き、次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="978f127332b309b9081001f9ef289a772808bdd2" translate="yes">
          <source>To install the latest version of TypeScript:</source>
          <target state="translated">TypeScriptの最新バージョンをインストールするには：</target>
        </trans-unit>
        <trans-unit id="79ca5dd762f8884fdb128fbf222685ff3aa6cc9b" translate="yes">
          <source>To instruct the AOT compiler to use your translation configuration, set the three &quot;i18n&quot; build configuration options in your CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">AOTコンパイラに変換構成を使用するよう指示するには、CLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; 3つの「i18n」ビルド構成オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="1677d547af7492d218688d8fc496408b0a0b031e" translate="yes">
          <source>To learn more about other browsers that are service worker ready, see the &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt; page and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN docs&lt;/a&gt;.</source>
          <target state="translated">Service Workerに対応している他のブラウザーの詳細については、 &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt;ページと&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;MDN docs&lt;/a&gt; をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c84c9b491abea1ff59708036d037ad515cf9fdbd" translate="yes">
          <source>To learn more about providers, see the &lt;a href=&quot;../guide/providers&quot;&gt;Providers section&lt;/a&gt;. To learn more about injectors, see the &lt;a href=&quot;../guide/dependency-injection&quot;&gt;Dependency Injection guide&lt;/a&gt;.</source>
          <target state="translated">プロバイダーの詳細については、 &lt;a href=&quot;../guide/providers&quot;&gt;プロバイダーのセクションを&lt;/a&gt;ご覧ください。 インジェクターの詳細については、「 &lt;a href=&quot;../guide/dependency-injection&quot;&gt;依存性注入ガイド&lt;/a&gt; 」を参照してください 。</target>
        </trans-unit>
        <trans-unit id="f76858a7e260841160caa41bedc9711829079ce9" translate="yes">
          <source>To learn more about reactive forms, see the following guides:</source>
          <target state="translated">リアクティブフォームの詳細については、次のガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="59a572cbe7b9a3e97969793c2bc9cfdeb16ab418" translate="yes">
          <source>To learn more about template-driven forms, see the following guides:</source>
          <target state="translated">テンプレート駆動フォームの詳細については、次のガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="738b9eb031dded491e17886663caa1ff29e71ce4" translate="yes">
          <source>To learn more about the full capabilities of the CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI command reference&lt;/a&gt;.</source>
          <target state="translated">CLIの全機能の詳細については、 &lt;a href=&quot;cli&quot;&gt;CLIコマンドリファレンスを参照してください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="c3f50de3d99d51fc3307e8adf60a7d37ef18510f" translate="yes">
          <source>To learn more about using the Angular CLI, see the &lt;a href=&quot;cli&quot;&gt;CLI Overview&lt;/a&gt;. In addition to creating the initial workspace and app scaffolding, you can use the CLI to generate Angular code such as components and services. The CLI supports the full development cycle, including building, testing, bundling, and deployment.</source>
          <target state="translated">Angular CLIの使用の詳細については、 &lt;a href=&quot;cli&quot;&gt;CLIの概要を&lt;/a&gt;参照してください。 初期ワークスペースとアプリの足場を作成することに加えて、CLIを使用して、コンポーネントやサービスなどのAngularコードを生成できます。 CLIは、構築、テスト、バンドル、および展開を含む開発サイクル全体をサポートします。</target>
        </trans-unit>
        <trans-unit id="416a58e3ce60c40d39bdf10d063589c334e40ab1" translate="yes">
          <source>To learn more, see &lt;a href=&quot;architecture-services&quot;&gt;Introduction to Services and Dependency Injection&lt;/a&gt;.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;architecture-services&quot;&gt;サービスと依存性注入の概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e694d6c1d32b6b56ce020c646c48af952c618210" translate="yes">
          <source>To learn more, see &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;browser-support&quot;&gt;ブラウザのサポートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b5d547564ae49438c7f5583123e361486b37cdfb" translate="yes">
          <source>To learn more, see &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;form-validation&quot;&gt;フォーム検証を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3b51947679f07f8322ce7f3740f084897727afa5" translate="yes">
          <source>To learn more, see &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5dac4e123cca0d4a59d5f6f873a05e1a76d9583b" translate="yes">
          <source>To learn more, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;ngmodules&quot;&gt;NgModulesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c2218a8556fffcfa1f6d34419d68f2922869161d" translate="yes">
          <source>To learn more, see &lt;a href=&quot;observables&quot;&gt;Observables&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;observables&quot;&gt;Observablesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b1076876ca0b526aa98a8f286bda2dbf9a2d471f" translate="yes">
          <source>To learn more, see &lt;a href=&quot;pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;pipes&quot;&gt;パイプ&lt;/a&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a1bfb784682ebe266242fbdb242bb6f408ed07f" translate="yes">
          <source>To learn more, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3b914fb9f887c33faf04a08f5c6bcad4ae48f1d7" translate="yes">
          <source>To learn more, see &lt;a href=&quot;schematics&quot;&gt;Schematics Overview&lt;/a&gt; and &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;schematics&quot;&gt;回路図の概要&lt;/a&gt;と&lt;a href=&quot;schematics-for-libraries&quot;&gt;ライブラリの回路図を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d010cfde7bc2c506df423549e631c7008431f001" translate="yes">
          <source>To learn more, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;structural-directives&quot;&gt;構造ディレクティブを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e4570551808faa6eea6e2ab0181ccbcaaa5c2263" translate="yes">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;Input and Output Properties&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;入力および出力プロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ecceabc50e42b7eefd96c26c6bf1f43187e84d1f" translate="yes">
          <source>To learn more, see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input and output properties&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;入力および出力プロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="49bdcdc84e41d471767e7d1270cab230b0e8a7f1" translate="yes">
          <source>To learn more, see &lt;a href=&quot;universal&quot;&gt;Angular Universal: server-side rendering&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;universal&quot;&gt;Angular Universal：サーバー側レンダリングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eb003e20f49d50feecb8fdc386ebe9f76301de6f" translate="yes">
          <source>To limit access to a service, consider lazy loading the NgModule that provides that service. See &lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;How do I restrict service scope to a module?&lt;/a&gt; for more information.</source>
          <target state="translated">サービスへのアクセスを制限するには、そのサービスを提供するNgModuleの遅延読み込みを検討してください。 &lt;a href=&quot;ngmodule-faq#service-scope&quot;&gt;モジュールにサービススコープを制限する方法を&lt;/a&gt;参照してください。 詳細については。</target>
        </trans-unit>
        <trans-unit id="176131b1c166c15dd52ca2270019e00646222f93" translate="yes">
          <source>To link our builder implementation with its schema and name, we need to create a &lt;em&gt;builder definition&lt;/em&gt; file, which we can point to in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">ビルダーの実装をそのスキーマと名前にリンクするには、 &lt;em&gt;ビルダー定義&lt;/em&gt;ファイルを作成する必要があります。これは &lt;code&gt;package.json&lt;/code&gt; でポイントできます。</target>
        </trans-unit>
        <trans-unit id="8ef171fef0328a2cd5ad545be79413b8427d3d1b" translate="yes">
          <source>To link to a Stackblitz defined by a named &lt;code&gt;stackblitz.json&lt;/code&gt; file, set the &lt;code&gt;stackblitz&lt;/code&gt; attribute. The following example links to the Stackblitz defined by &lt;code&gt;second.stackblitz.json&lt;/code&gt; in the current guide's directory.</source>
          <target state="translated">名前付き &lt;code&gt;stackblitz.json&lt;/code&gt; ファイルで定義されたStackblitzにリンクするには、 &lt;code&gt;stackblitz&lt;/code&gt; 属性を設定します。 次の例は、現在のガイドのディレクトリにあるsecond.stackblitz.jsonで定義されているStackblitzにリンクしています。</target>
        </trans-unit>
        <trans-unit id="d0dfc4d2bbeb415d911b77bd57e23158017465af" translate="yes">
          <source>To link to a Stackblitz in a folder whose name is not the same as the current guide page, set the &lt;code&gt;name&lt;/code&gt; attribute to the name of that folder.</source>
          <target state="translated">現在のガイドページと同じ名前ではないフォルダー内のStackblitzにリンクするには、 &lt;code&gt;name&lt;/code&gt; 属性をそのフォルダーの名前に設定します。</target>
        </trans-unit>
        <trans-unit id="9e806bc9cf5ce821c72637bad288f0c8a385e3b7" translate="yes">
          <source>To make a request with progress events enabled, you can create an instance of &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; option set true to enable tracking of progress events.</source>
          <target state="translated">進行状況イベントを有効にしてリクエストを作成するには、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest#reportProgress&quot;&gt;reportProgress&lt;/a&gt;&lt;/code&gt; オプションをtrueに設定して &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; のインスタンスを作成し、進行状況イベントの追跡を有効にします。</target>
        </trans-unit>
        <trans-unit id="2d1f94a35fe29cf68215d8ce11be523428a2104c" translate="yes">
          <source>To make changes to the documentation pages and sample code, clone the &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular github repository&lt;/a&gt; and go to the &lt;code&gt;aio/&lt;/code&gt; folder.</source>
          <target state="translated">ドキュメントページとサンプルコードを変更するには、 &lt;a href=&quot;https://github.com/angular/angular&quot;&gt;Angular githubリポジトリの&lt;/a&gt;クローンを作成し、 &lt;code&gt;aio/&lt;/code&gt; フォルダーに移動します。</target>
        </trans-unit>
        <trans-unit id="ad1bed88cabd87c7ef61bbd728ce927c47d305ed" translate="yes">
          <source>To make each product name a link to product details, add the &lt;code&gt;&amp;lt;&lt;a href=&quot;api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; element and set its title to be the product's name by using the property binding &lt;code&gt;[ ]&lt;/code&gt; syntax, as follows:</source>
          <target state="translated">各製品名を製品の詳細へのリンクにするには、次のように、プロパティバインディング &lt;code&gt;[ ]&lt;/code&gt; 構文を使用して、&amp;lt;a&amp;gt;要素を追加し、そのタイトルを製品名に設定します。</target>
        </trans-unit>
        <trans-unit id="0133990127a445b9c4636bf47add6269aff05d0f" translate="yes">
          <source>To make library code reusable you must define a public API for it. This &quot;user layer&quot; defines what is available to consumers of your library. A user of your library should be able to access public functionality (such as NgModules, service providers and general utility functions) through a single import path.</source>
          <target state="translated">ライブラリコードを再利用可能にするには、そのためのパブリックAPIを定義する必要があります。 この「ユーザー層」は、ライブラリの利用者が利用できるものを定義します。 ライブラリのユーザーは、単一のインポートパスを通じてパブリック機能（NgModule、サービスプロバイダー、一般的なユーティリティ機能など）にアクセスできる必要があります。</target>
        </trans-unit>
        <trans-unit id="f4c06ba3e64fe70ec544df6b51f17ee32a730f00" translate="yes">
          <source>To make sure that the &lt;code&gt;HeroService&lt;/code&gt; can provide this service, register it with the &lt;em&gt;injector&lt;/em&gt;, which is the object that is responsible for choosing and injecting the provider where the app requires it.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; がこのサービスを確実に提供できるようにするには、 &lt;em&gt;インジェクターに&lt;/em&gt;登録します。 &lt;em&gt;インジェクター&lt;/em&gt;は、アプリが必要とするプロバイダーを選択してインジェクトするオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="abe2d5f3112ac6f160f5eaad338cd564e7929599" translate="yes">
          <source>To make sure there is only one instance of &lt;code&gt;NewLogger&lt;/code&gt;, alias &lt;code&gt;OldLogger&lt;/code&gt; with the &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;NewLogger&lt;/code&gt; のインスタンスが1つのみであることを確認するには、 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; オプションを &lt;code&gt;OldLogger&lt;/code&gt; してOldLoggerをエイリアスします。</target>
        </trans-unit>
        <trans-unit id="e85568359a0fbe5ee087b7635e1885b559b60aea" translate="yes">
          <source>To make sure your schematics source files get compiled into the library bundle, add the following scripts to the &lt;code&gt;package.json&lt;/code&gt; file in your library project's root folder (&lt;code&gt;projects/my-lib&lt;/code&gt;).</source>
          <target state="translated">回路図ソースファイルがライブラリバンドルにコンパイルされるようにするには、ライブラリプロジェクトのルートフォルダー（ &lt;code&gt;projects/my-lib&lt;/code&gt; ）の &lt;code&gt;package.json&lt;/code&gt; ファイルに次のスクリプトを追加します。</target>
        </trans-unit>
        <trans-unit id="b618bd0150119d92c15de99c07c66b9d5d5df18d" translate="yes">
          <source>To make the &quot;Notify Me&quot; button work, you need to configure two things:</source>
          <target state="translated">[通知]ボタンを機能させるには、次の2つの設定が必要です。</target>
        </trans-unit>
        <trans-unit id="c63bfd6ff80b0594b74ebefc3198e01f8f521a91" translate="yes">
          <source>To make the app navigate to the dashboard automatically, add the following route to the &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; array.</source>
          <target state="translated">アプリがダッシュボードに自動的に移動するようにするには、 &lt;code&gt;AppRoutingModule.Routes&lt;/code&gt; 配列に次のルートを追加します。</target>
        </trans-unit>
        <trans-unit id="f13fc1c29e96e1dfdbe3eed259eadf83ed2de57e" translate="yes">
          <source>To make the change less abrupt, we need to define an animation &lt;em&gt;transition&lt;/em&gt; to specify the changes that occur between one state and another over a period of time. The &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function accepts two arguments: the first argument accepts an expression that defines the direction between two transition states, and the second argument accepts one or a series of &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; steps.</source>
          <target state="translated">変更の急激さを軽減するには、アニメーションの&lt;em&gt;遷移&lt;/em&gt;を定義して、ある状態と別の状態の間で一定期間に発生する変更を指定する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 関数は2つの引数を受け入れます。最初の引数は2つの遷移状態間の方向を定義する式を受け入れ、2番目の引数は1つまたは一連の &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; ステップを受け入れます。</target>
        </trans-unit>
        <trans-unit id="8bcf14d372529e2a67e2f9aa251e900cf6621e7d" translate="yes">
          <source>To make these transitions as easy as possible, we deprecate APIs and features for a period of time before removing them. This gives you time to update your apps to the latest APIs and best practices.</source>
          <target state="translated">これらの移行を可能な限り簡単にするために、APIと機能を削除する前に、しばらくの間廃止します。 これにより、アプリを最新のAPIとベストプラクティスに更新する時間ができます。</target>
        </trans-unit>
        <trans-unit id="c7d74082b91da794e2772b1b64caafcf244578ba" translate="yes">
          <source>To make these transitions as easy as possible, we make these commitments to you:</source>
          <target state="translated">これらの移行を可能な限り簡単にするために、次のことを約束します。</target>
        </trans-unit>
        <trans-unit id="e4342ac072084a99b08c67145d8f7f9d46ebc4bf" translate="yes">
          <source>To make updating easy, we provide complete instructions in the interactive &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;.</source>
          <target state="translated">更新を簡単にするために、インタラクティブな「 &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide」&lt;/a&gt;で完全な手順を提供しています 。</target>
        </trans-unit>
        <trans-unit id="f346dda78884da2f316927c754a446df557d7e97" translate="yes">
          <source>To make use of all the features of Angular service worker, use the latest versions of Angular and the Angular CLI.</source>
          <target state="translated">Angular Service Workerのすべての機能を利用するには、Angularの最新バージョンとAngular CLIを使用してください。</target>
        </trans-unit>
        <trans-unit id="d3a75dfb8b6d5e0a84151719b6bac15ccc94edf4" translate="yes">
          <source>To make your solution reusable, you need to adjust it so that it does not depend on app-specific code. Here are some things to consider in migrating application functionality to a library.</source>
          <target state="translated">ソリューションを再利用可能にするには、アプリ固有のコードに依存しないように調整する必要があります。 以下に、アプリケーションの機能をライブラリに移行する際に考慮すべき事項をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="ebb28b48869f066439d945bc03e317d919b03091" translate="yes">
          <source>To mark a value as trusted, inject &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; and call one of the following methods:</source>
          <target state="translated">値を信頼済みとしてマークするには、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/domsanitizer&quot;&gt;DomSanitizer&lt;/a&gt;&lt;/code&gt; を挿入し、次のいずれかのメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="826ff064aa36b11928c6420ce581e8abd48d94ef" translate="yes">
          <source>To mark an attribute for translation, add an attribute in the form of &lt;code&gt;i18n-x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the name of the attribute to translate. The following example shows how to mark the &lt;code&gt;title&lt;/code&gt; attribute for translation by adding the &lt;code&gt;i18n-title&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag:</source>
          <target state="translated">属性を翻訳対象としてマークするには、 &lt;code&gt;i18n-x&lt;/code&gt; の形式で属性を追加します &lt;code&gt;x&lt;/code&gt; は翻訳する属性の名前です。 次の例は、 &lt;code&gt;img&lt;/code&gt; タグに &lt;code&gt;i18n-title&lt;/code&gt; 属性を追加して、翻訳のために &lt;code&gt;title&lt;/code&gt; 属性をマークする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d8d57de94256bf3111f375a6f4f8c16a2bbdcc50" translate="yes">
          <source>To mark the greeting for translation, add the &lt;code&gt;i18n&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">グリーティングに翻訳のマークを付けるには、 &lt;code&gt;i18n&lt;/code&gt; 属性を &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; タグに追加します。</target>
        </trans-unit>
        <trans-unit id="204d695937e174c030d578e79a70b8cfdaa9fdde" translate="yes">
          <source>To maximize compatibility, you could ship a single bundle that includes all your compiled code, plus any polyfills that may be needed. Users with modern browsers, however, shouldn't have to pay the price of increased bundle size that comes with polyfills they don't need. Differential loading, which is supported by default in Angular CLI version 8 and higher, solves this problem.</source>
          <target state="translated">互換性を最大化するために、コンパイルされたすべてのコードと必要なポリフィルを含む単一のバンドルを出荷できます。 ただし、最新のブラウザを使用しているユーザーは、不要なポリフィルに伴うバンドルサイズの増加という代価を支払う必要はありません。 Angular CLIバージョン8以降でデフォルトでサポートされている差動ロードは、この問題を解決します。</target>
        </trans-unit>
        <trans-unit id="6c9f63931f1a9876ee6144f0f6f85bb6ad52a4a3" translate="yes">
          <source>To merge the translated text into component templates, compile the app with the completed translation file.</source>
          <target state="translated">翻訳されたテキストをコンポーネントテンプレートにマージするには、完成した翻訳ファイルでアプリをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="50177e0937d0c24e4d779ea321fe99f130aa12ab" translate="yes">
          <source>To navigate a relative path with the &lt;code&gt;Router.navigate&lt;/code&gt; method, you must supply the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; to give the router knowledge of where you are in the current route tree.</source>
          <target state="translated">&lt;code&gt;Router.navigate&lt;/code&gt; メソッドを使用して相対パスをナビゲートするには、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を指定して、現在のルートツリーのどこにいるかをルーターに知らせる必要があります。</target>
        </trans-unit>
        <trans-unit id="e3d48bf82f388d44ca8269b4f3bfd203e20968b6" translate="yes">
          <source>To navigate to the &lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;CrisisCenterHomeComponent&lt;/code&gt; に移動するには、完全なURLは &lt;code&gt;/crisis-center&lt;/code&gt; （ &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="c30458218377d115bbf5391fba4f7de471157644" translate="yes">
          <source>To navigate to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; for a crisis with &lt;code&gt;id=2&lt;/code&gt;, the full URL is &lt;code&gt;/crisis-center/2&lt;/code&gt; (&lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;id=2&lt;/code&gt; 危機の &lt;code&gt;CrisisDetailComponent&lt;/code&gt; に移動するには、完全なURLは &lt;code&gt;/crisis-center/2&lt;/code&gt; （ &lt;code&gt;/crisis-center&lt;/code&gt; + &lt;code&gt;''&lt;/code&gt; + &lt;code&gt;'/2'&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="97e5b5a0b343f2f0aacae676cafbfb230385ea8b" translate="yes">
          <source>To navigate to the dashboard, the router needs an appropriate route.</source>
          <target state="translated">ダッシュボードに移動するには、ルーターに適切なルートが必要です。</target>
        </trans-unit>
        <trans-unit id="97d195db608d7c728fef4d499c5aaf0c6b4979af" translate="yes">
          <source>To open a hero's tax return, the preparer clicks on a hero name, which opens a component for editing that return. Each selected hero tax return opens in its own component and multiple returns can be open at the same time.</source>
          <target state="translated">ヒーローの納税申告書を開くには、作成者がヒーロー名をクリックして、その申告書を編集するためのコンポーネントを開きます。 選択された各ヒーローの納税申告書は独自のコンポーネントで開き、複数の申告書を同時に開くことができます。</target>
        </trans-unit>
        <trans-unit id="b5a0babdbd087078fc6808357b85a5f76fc7e195" translate="yes">
          <source>To opt-in an existing application, run</source>
          <target state="translated">既存のアプリケーションをオプトインするには、次を実行します</target>
        </trans-unit>
        <trans-unit id="e1e1e2d56f853cd55abdf55cf1f45f3fbc917764" translate="yes">
          <source>To override a tree-shakable provider, configure the injector of a specific NgModule or component with another provider, using the &lt;code&gt;providers: []&lt;/code&gt; array syntax of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">ツリーシェーカブルプロバイダーをオーバーライドするには、プロバイダーを使用して、特定のNgModuleまたはコンポーネントのインジェクターを別のプロバイダーで構成し &lt;code&gt;providers: []&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレーターの[]配列構文。</target>
        </trans-unit>
        <trans-unit id="36a953799b95a8f6656497edaeebfe8ea9110972" translate="yes">
          <source>To perform complex initializations shortly after construction.</source>
          <target state="translated">構築後すぐに複雑な初期化を実行します。</target>
        </trans-unit>
        <trans-unit id="f0bb0d88a7390f7a95031586a8beb53ff5091b52" translate="yes">
          <source>To position the delete button at the far right of the hero entry, add some CSS to the &lt;code&gt;heroes.component.css&lt;/code&gt;. You'll find that CSS in the &lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;final review code&lt;/a&gt; below.</source>
          <target state="translated">ヒーローエントリの右端に削除ボタンを配置するには、 &lt;code&gt;heroes.component.css&lt;/code&gt; に CSSを追加します。 そのCSSは、以下の&lt;a href=&quot;toh-pt6#heroescomponent&quot;&gt;最終レビューコードで確認でき&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2c961571be0bc2d29a55550db6735d63db701501" translate="yes">
          <source>To preserve app integrity, the Angular service worker groups all files into a version together. The files grouped into a version usually include HTML, JS, and CSS files. Grouping of these files is essential for integrity because HTML, JS, and CSS files frequently refer to each other and depend on specific content. For example, an &lt;code&gt;index.html&lt;/code&gt; file might have a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that references &lt;code&gt;bundle.js&lt;/code&gt; and it might attempt to call a function &lt;code&gt;startApp()&lt;/code&gt; from within that script. Any time this version of &lt;code&gt;index.html&lt;/code&gt; is served, the corresponding &lt;code&gt;bundle.js&lt;/code&gt; must be served with it. For example, assume that the &lt;code&gt;startApp()&lt;/code&gt; function is renamed to &lt;code&gt;runApp()&lt;/code&gt; in both files. In this scenario, it is not valid to serve the old &lt;code&gt;index.html&lt;/code&gt;, which calls &lt;code&gt;startApp()&lt;/code&gt;, along with the new bundle, which defines &lt;code&gt;runApp()&lt;/code&gt;.</source>
          <target state="translated">アプリの整合性を維持するために、Angular Service Workerはすべてのファイルを1つのバージョンにグループ化します。 バージョンにグループ化されたファイルには、通常、HTML、JS、およびCSSファイルが含まれます。 HTML、JS、およびCSSファイルは頻繁に相互に参照し、特定のコンテンツに依存するため、これらのファイルのグループ化は整合性にとって不可欠です。 たとえば、 &lt;code&gt;index.html&lt;/code&gt; ファイルには &lt;code&gt;bundle.js&lt;/code&gt; を参照する &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグがあり、そのスクリプト内から関数 &lt;code&gt;startApp()&lt;/code&gt; を呼び出そうとします。 このバージョンの &lt;code&gt;index.html&lt;/code&gt; が提供されるときはいつでも、対応する &lt;code&gt;bundle.js&lt;/code&gt; を提供する必要があります。 たとえば、両方のファイルで &lt;code&gt;startApp()&lt;/code&gt; 関数の名前が &lt;code&gt;runApp()&lt;/code&gt; に変更されたと仮定します。 このシナリオでは、 &lt;code&gt;startApp()&lt;/code&gt; を呼び出す古い &lt;code&gt;index.html&lt;/code&gt; とrunApp（）を定義する新しいバンドルを提供することは無効です。</target>
        </trans-unit>
        <trans-unit id="fe943f52fad6ef05058867916f3c62d1438605f6" translate="yes">
          <source>To preserve sequences of whitespace characters, use the &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; attribute.</source>
          <target state="translated">空白文字のシーケンスを保持するには、 &lt;code&gt;ngPreserveWhitespaces&lt;/code&gt; 属性を使用します。</target>
        </trans-unit>
        <trans-unit id="8f13d961bf1f2a2e0a6771cacc0e0734c478d793" translate="yes">
          <source>To prevent this issue, write a constructor that attempts to inject the module or service from the root app injector. If the injection succeeds, the class has been loaded a second time. You can throw an error or take other remedial action.</source>
          <target state="translated">この問題を回避するには、ルートアプリインジェクターからモジュールまたはサービスを挿入しようとするコンストラクターを作成します。 インジェクションが成功した場合、クラスは再度ロードされています。 エラーをスローするか、他の修正アクションを実行できます。</target>
        </trans-unit>
        <trans-unit id="82edb1afa8eeaf7f78aa665cfb01fbaf7b31f687" translate="yes">
          <source>To prevent this, configure the component-level injector of &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; to provide the service, using the &lt;code&gt;providers&lt;/code&gt; property in the component metadata.</source>
          <target state="translated">これを防ぐには、 &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; のコンポーネントレベルのインジェクターを構成して、コンポーネントメタデータの &lt;code&gt;providers&lt;/code&gt; プロパティを使用してサービスを提供します。</target>
        </trans-unit>
        <trans-unit id="764953f88d6db345381e8274359af32c10d6b814" translate="yes">
          <source>To prevent this, the application must ensure that a user request originates from the real application, not from a different site. The server and client must cooperate to thwart this attack.</source>
          <target state="translated">これを防ぐには、アプリケーションは、ユーザーリクエストが別のサイトではなく、実際のアプリケーションから発信されていることを確認する必要があります。 サーバーとクライアントは協力して、この攻撃を阻止する必要があります。</target>
        </trans-unit>
        <trans-unit id="23e6bd66df0322fbae0f2b4af0850695d73a6068" translate="yes">
          <source>To preview Ivy, use &lt;code&gt;@angular/core@next&lt;/code&gt; version of Angular (8.1.x), rather than &lt;code&gt;@angular/core@latest&lt;/code&gt; (8.0.x), as it contains all the latest bug fixes and improvements.</source>
          <target state="translated">Ivyをプレビューするには、 &lt;code&gt;@angular/core@latest&lt;/code&gt; （8.0.x）ではなく、 &lt;code&gt;@angular/core@next&lt;/code&gt; バージョンのAngular（8.1.x）を使用してください。最新のバグ修正と改善がすべて含まれているためです。</target>
        </trans-unit>
        <trans-unit id="8d1a7d82c50d476f8fd8a4601ce28f42ef661a13" translate="yes">
          <source>To probe the behavior in the live example, change the value and optional exponent in the template.</source>
          <target state="translated">実例の動作を調べるには、テンプレートの値とオプションの指数を変更します。</target>
        </trans-unit>
        <trans-unit id="e498d45c2b48e2a16db2e6e00575c839c83f030b" translate="yes">
          <source>To provide better user experience, we show an appropriate error message when the form is invalid.</source>
          <target state="translated">ユーザーエクスペリエンスを向上させるために、フォームが無効な場合に適切なエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="fe1b5ee91e15d081682393046ee0422bacf79816" translate="yes">
          <source>To read about sharing services, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">共有サービスについて読むには、 &lt;a href=&quot;providers&quot;&gt;プロバイダーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="16b4681d1fd2b68022b40ab92b874d4b37fbb9de" translate="yes">
          <source>To register child controls with the form, use &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; with a &lt;code&gt;name&lt;/code&gt; attribute. You may use &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; to create sub-groups within the form.</source>
          <target state="translated">子コントロールをフォームに登録するには、 &lt;code&gt;name&lt;/code&gt; 属性で &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; を使用します。 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; を使用して、フォーム内にサブグループを作成できます。</target>
        </trans-unit>
        <trans-unit id="8bd6725fea1d02e33394eb5471a409672ea30a70" translate="yes">
          <source>To remedy this, you may need to kill the old worker using one of the above techniques (&lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;Fail-safe&lt;/a&gt; or &lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;Safety Worker&lt;/a&gt;).</source>
          <target state="translated">これを修正するには、上記の手法のいずれか（ &lt;a href=&quot;service-worker-devops#fail-safe&quot;&gt;フェイルセーフ&lt;/a&gt;または&lt;a href=&quot;service-worker-devops#safety-worker&quot;&gt;セーフティワーカー&lt;/a&gt; ）を使用して古いワーカーを殺す必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="aaeefee9f550b0ec463699d0b839236aef8f3ef3" translate="yes">
          <source>To render the new values, add &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; to the bottom of the &lt;code&gt;AppComponent&lt;/code&gt; template so the view also displays the sunflower:</source>
          <target state="translated">新しい値をレンダリングするには、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; を &lt;code&gt;AppComponent&lt;/code&gt; テンプレートの下部に追加して、ビューにヒマワリも表示されるようにします。</target>
        </trans-unit>
        <trans-unit id="2d4a7cb38a8f7318c5a2000f39faa271b3df5c87" translate="yes">
          <source>To repeat the command any time the inputs change (watch mode), replace &lt;code&gt;bazel&lt;/code&gt; with &lt;code&gt;ibazel&lt;/code&gt; in these commands.</source>
          <target state="translated">入力が変更されるたびにコマンドを繰り返すには（ウォッチモード）、これらのコマンドで &lt;code&gt;bazel&lt;/code&gt; を &lt;code&gt;ibazel&lt;/code&gt; に置き換えます。</target>
        </trans-unit>
        <trans-unit id="752e6482dbad0b90cac7b0b18d6fb3ccea0c4a13" translate="yes">
          <source>To report progress, use the &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; method, which takes a current value, (optional) total, and status string as arguments. The total can be any number; for example, if you know how many files you have to process, the total could be the number of files, and current should be the number processed so far. The status string is unmodified unless you pass in a new string value.</source>
          <target state="translated">進行状況をレポートするには、 &lt;code&gt;BuilderContext.reportProgress()&lt;/code&gt; メソッドを使用します。このメソッドは、現在の値、（オプションの）合計、ステータス文字列を引数として受け取ります。 合計は任意の数にすることができます。 たとえば、処理する必要のあるファイルの数がわかっている場合、合計はファイルの数になり、現在は現在までに処理された数になります。 ステータス文字列は、新しい文字列値を渡さない限り変更されません。</target>
        </trans-unit>
        <trans-unit id="da733e7d828e2271d74de53fcaeb21139907c7a1" translate="yes">
          <source>To report vulnerabilities in Angular itself, email us at &lt;a href=&quot;mailto:security@angular.io&quot;&gt;security@angular.io&lt;/a&gt;.</source>
          <target state="translated">Angular自体の脆弱性を報告するには、 &lt;a href=&quot;mailto:security@angular.io&quot;&gt;security&lt;/a&gt; @ angular.ioまでメールでお問い合わせください。</target>
        </trans-unit>
        <trans-unit id="abae6466bed4070d96bb8c402709fe5af1d1f3dd" translate="yes">
          <source>To resolve this, we give the &lt;code&gt;HeroService&lt;/code&gt; constructor a boolean flag to control display of secret heroes.</source>
          <target state="translated">これを解決するために、 &lt;code&gt;HeroService&lt;/code&gt; コンストラクターにブール値フラグを与えて、秘密のヒーローの表示を制御します。</target>
        </trans-unit>
        <trans-unit id="ac34d2783858abc37d4c5360d16d00324ca882e2" translate="yes">
          <source>To resume testing after completion of asynchronous activity or asynchronous change detection, hook that promise. See &lt;a href=&quot;testing#when-stable&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">非同期アクティビティまたは非同期変更検出の完了後にテストを再開するには、その約束をフックします。 &lt;a href=&quot;testing#when-stable&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9f7479c96fe5dbd95ef07ceac53b3c6f29bcbc0" translate="yes">
          <source>To review a complete list of changes, organized by version, see the &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;Angular change log&lt;/a&gt;.</source>
          <target state="translated">バージョンごとに整理された変更の完全なリストを確認するには、 &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;Angular change logを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9431c2209f7aafa5c97b655421d8f332f66b82cb" translate="yes">
          <source>To run in VS with F5</source>
          <target state="translated">F5を使用してVSで実行するには</target>
        </trans-unit>
        <trans-unit id="c7b8b861dfdc4cde711a32872c93fbcde33dd655" translate="yes">
          <source>To run our builder with the new target's default configuration, use the following CLI command in a Linux shell.</source>
          <target state="translated">新しいターゲットのデフォルト設定でビルダーを実行するには、Linuxシェルで次のCLIコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="0fde64751caa86a1be2593adb8f8b511a7f690bd" translate="yes">
          <source>To run the dev server with this proxy configuration, call &lt;code&gt;ng serve&lt;/code&gt;.</source>
          <target state="translated">このプロキシ設定で開発サーバーを実行するには、 &lt;code&gt;ng serve&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a927d68bbfb0db6ef570d00d34818dc1e9fa2fda" translate="yes">
          <source>To see &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; examples with different form control types, see:</source>
          <target state="translated">さまざまなフォームコントロールタイプの &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; の例を参照するには、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="8dc5a6c3881a1c518a3093382f57be5a945c82be" translate="yes">
          <source>To see attribute, class, and style bindings in a functioning app, see the  especially for this section.</source>
          <target state="translated">機能しているアプリの属性、クラス、およびスタイルのバインディングを確認するには、特にこのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2066c3f9e99ddeda033de3aa56599325b3da329c" translate="yes">
          <source>To see attributes versus DOM properties in a functioning app, see the  especially for binding syntax.</source>
          <target state="translated">機能しているアプリの属性とDOMプロパティを確認するには、特にバインド構文を参照してください。</target>
        </trans-unit>
        <trans-unit id="cd33799f99a3c33eec695a0b9c438c5302870973" translate="yes">
          <source>To see it again, or to test after working in the project, clear everything out by clicking the circle with a line through it in the upper left of the Network Tab:</source>
          <target state="translated">もう一度表示するか、プロジェクトでの作業後にテストするには、[ネットワーク]タブの左上にある線の付いた円をクリックして、すべてクリアします。</target>
        </trans-unit>
        <trans-unit id="ee06c99b240c3cdf0c41541163f7f2fc33c71e72" translate="yes">
          <source>To see the &lt;code&gt;disabled&lt;/code&gt; button example in a functioning app, see the  especially for binding syntax. This example shows you how to toggle the disabled property from the component.</source>
          <target state="translated">機能しているアプリで &lt;code&gt;disabled&lt;/code&gt; ボタンの例を確認するには、特にバインド構文についてを参照してください。 この例では、コンポーネントから無効プロパティを切り替える方法を示します。</target>
        </trans-unit>
        <trans-unit id="3c298523d5d662629912091f2a811ab71db25f4f" translate="yes">
          <source>To see the difference between using &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;, add another component to the example and call it &lt;code&gt;InspectorComponent&lt;/code&gt;. &lt;code&gt;InspectorComponent&lt;/code&gt; will be a child of the &lt;code&gt;ChildComponent&lt;/code&gt;. In &lt;code&gt;inspector.component.ts&lt;/code&gt;, inject the &lt;code&gt;FlowerService&lt;/code&gt; and &lt;code&gt;AnimalService&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の使用の違いを確認するには、別のコンポーネントを例に追加し、それを &lt;code&gt;InspectorComponent&lt;/code&gt; と呼びます。 &lt;code&gt;InspectorComponent&lt;/code&gt; は &lt;code&gt;ChildComponent&lt;/code&gt; の子になります 。 &lt;code&gt;AnimalService&lt;/code&gt; で、コンストラクターに &lt;code&gt;FlowerService&lt;/code&gt; とAnimalServiceを注入します 。</target>
        </trans-unit>
        <trans-unit id="7426a6c423585d610bffc9572304cb82a2152a88" translate="yes">
          <source>To see the error, open the browser development tools and look in the console for a message like</source>
          <target state="translated">エラーを確認するには、ブラウザー開発ツールを開き、コンソールで次のようなメッセージを探します</target>
        </trans-unit>
        <trans-unit id="f73daa4c6554c2966552e22cb0bf684bb0109fbc" translate="yes">
          <source>To see the new &quot;Buy&quot; button, refresh the application and click on a product's name to display its details.</source>
          <target state="translated">新しい[購入]ボタンを表示するには、アプリケーションを更新し、製品名をクリックして詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="5f23726a83ac2bd2efd5087ef3b709a56d3f0856" translate="yes">
          <source>To see the new cart component, click the &quot;Checkout&quot; button. You can see the &quot;cart works!&quot; default text, and the URL has the pattern &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt;, where &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; may be different for your StackBlitz project.</source>
          <target state="translated">新しいカートコンポーネントを表示するには、[チェックアウト]ボタンをクリックします。 「カートが動作します！」 デフォルトのテキストで、URLのパターンは &lt;code&gt;https://getting-started.stackblitz.io/cart&lt;/code&gt; です 。ここで、getting-started.stackblitz.ioはStackBlitzプロジェクトによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="c61ac58ea53a8acce49524c72714aac95d91562d" translate="yes">
          <source>To see the progress bar in a working example app, refer to the live example.</source>
          <target state="translated">動作中のサンプルアプリの進行状況バーを表示するには、ライブサンプルを参照してください。</target>
        </trans-unit>
        <trans-unit id="51762df269fa74951660bcc92b3a1d8f604aa3bc" translate="yes">
          <source>To see this HTML in the &lt;code&gt;AppComponent&lt;/code&gt;, you first have to export the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; in the &lt;code&gt;CustomerDashboardModule&lt;/code&gt;. In &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt;, just beneath the &lt;code&gt;declarations&lt;/code&gt; array, add an &lt;code&gt;exports&lt;/code&gt; array containing &lt;code&gt;CustomerDashboardComponent&lt;/code&gt;:</source>
          <target state="translated">このHTMLを &lt;code&gt;AppComponent&lt;/code&gt; で表示するには、まず &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; をエクスポートする必要があります。 &lt;code&gt;customer-dashboard.module.ts&lt;/code&gt; で、 &lt;code&gt;declarations&lt;/code&gt; 配列のすぐ下に、 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; を含む &lt;code&gt;exports&lt;/code&gt; 配列を追加します 。</target>
        </trans-unit>
        <trans-unit id="a7f192efea8de2bd06b45b2f3bf2d52e4f1a15ca" translate="yes">
          <source>To see this in action, make a small change to &lt;code&gt;app.component.ts&lt;/code&gt; and save. The tests run again, the browser refreshes, and the new test results appear.</source>
          <target state="translated">この動作を確認するには、 &lt;code&gt;app.component.ts&lt;/code&gt; に小さな変更を加えて保存します。 テストが再度実行され、ブラウザが更新され、新しいテスト結果が表示されます。</target>
        </trans-unit>
        <trans-unit id="259f775be5923c9da2e22cf62bebce4455141afc" translate="yes">
          <source>To see this in code, assume that the following value for &lt;code&gt;emoji&lt;/code&gt; is what the parent component were using, as in this service:</source>
          <target state="translated">コードでこれを確認するには、このサービスのように、 &lt;code&gt;emoji&lt;/code&gt; の次の値が親コンポーネントが使用していたものであると想定します。</target>
        </trans-unit>
        <trans-unit id="a0b5f297034732e98b08f028549d29a0bc5b1e6b" translate="yes">
          <source>To see which browsers are supported with the above configuration, see which settings meet to your browser support requirements, see the &lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;Browserslist compatibility page&lt;/a&gt;.</source>
          <target state="translated">上記の構成でサポートされているブラウザを確認するには、ブラウザのサポート要件を満たす設定を確認して&lt;a href=&quot;https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+not+dead%2C+not+IE+9-11&quot;&gt;ください&lt;/a&gt; 。 ブラウザリストの互換性ページをご覧ください 。</target>
        </trans-unit>
        <trans-unit id="2aecb05bd9c819562cf2d14d979e8185016e3fb1" translate="yes">
          <source>To see your app in the browser so far, enter the following command in the terminal window:</source>
          <target state="translated">これまでにブラウザーでアプリを表示するには、ターミナルウィンドウで次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="885269644ec508e0ea2156adee77813993bb242f" translate="yes">
          <source>To serve the directory containing your web files with &lt;code&gt;http-server&lt;/code&gt;, run the following command:</source>
          <target state="translated">Webファイルを含むディレクトリを &lt;code&gt;http-server&lt;/code&gt; で提供するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="0c073e0977df21697005c90ce800e73a2b92cb98" translate="yes">
          <source>To set the components encapsulation mode, use the &lt;code&gt;encapsulation&lt;/code&gt; property in the component metadata:</source>
          <target state="translated">コンポーネントのカプセル化モードを設定するには、コンポーネントのメタデータで &lt;code&gt;encapsulation&lt;/code&gt; プロパティを使用します 。</target>
        </trans-unit>
        <trans-unit id="3758c4ecb4f9914c32c58041e427ee3538c11cd2" translate="yes">
          <source>To set up a monorepo workspace, you should skip the creating the root application. See &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;Setting up for a multi-project workspace&lt;/a&gt; below.</source>
          <target state="translated">monorepoワークスペースをセットアップするには、ルートアプリケーションの作成をスキップする必要があります。 以下の&lt;a href=&quot;file-structure#multiple-projects&quot;&gt;マルチプロジェクトワークスペースのセットアップを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d47642c5fa808e4e1650b0efd2f81da7bfc8bfcf" translate="yes">
          <source>To set up the Angular service worker in your project, use the CLI &lt;code&gt;add&lt;/code&gt; command.</source>
          <target state="translated">プロジェクトでAngular Service Workerを設定するには、CLIの &lt;code&gt;add&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="7d4bc7469b3a5e6cf5c595d20bd4518bf745d39d" translate="yes">
          <source>To set up the Angular service worker in your project, use the CLI command &lt;code&gt;ng add @angular/pwa&lt;/code&gt;. It takes care of configuring your app to use service workers by adding the &lt;code&gt;service-worker&lt;/code&gt; package along with setting up the necessary support files.</source>
          <target state="translated">プロジェクトでAngular Service Workerを設定するには、CLIコマンド &lt;code&gt;ng add @angular/pwa&lt;/code&gt; 使用します。 &lt;code&gt;service-worker&lt;/code&gt; パッケージを追加し、必要なサポートファイルを設定することで、 サービスワーカーを使用するようにアプリを構成します。</target>
        </trans-unit>
        <trans-unit id="8dc80e025131d2a69acf3fb7e053f667fec10a2e" translate="yes">
          <source>To set up the Getting Started files with an &lt;strong&gt;ASP.NET 4.x project&lt;/strong&gt; in Visual Studio 2015, follow these steps:</source>
          <target state="translated">Visual Studio 2015の&lt;strong&gt;ASP.NET 4.xプロジェクト&lt;/strong&gt;で入門ファイルを設定するには、次の手順を実行します。</target>
        </trans-unit>
        <trans-unit id="de142fa8fc921e821213670b35614aa8b3250c8c" translate="yes">
          <source>To set up the component after Angular sets the input properties.</source>
          <target state="translated">Angularが入力プロパティを設定した後にコンポーネントを設定するには。</target>
        </trans-unit>
        <trans-unit id="e1f243210a5ae29b5fc9889478313e44836e9435" translate="yes">
          <source>To set up your development environment, follow the instructions in &lt;a href=&quot;../guide/setup-local&quot;&gt;Local Environment Setup&lt;/a&gt;.</source>
          <target state="translated">開発環境を&lt;a href=&quot;../guide/setup-local&quot;&gt;セットアップ&lt;/a&gt;するには、 ローカル環境のセットアップの指示に従ってください。</target>
        </trans-unit>
        <trans-unit id="e19731bed4fa9ad865f132552125887ef1add447" translate="yes">
          <source>To simplify the writing process for contributing authors. This guide helps you make decisions about tone, voice, and style. It also helps you find the right markup quickly.</source>
          <target state="translated">寄稿者の執筆プロセスを簡素化する。 このガイドは、音色、声、スタイルに関する決定を下すのに役立ちます。 また、適切なマークアップをすばやく見つけるのにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="367649fb6abb3b384169647dba62b78e8155b4e1" translate="yes">
          <source>To simulate a network issue, disable network interaction for your application. In Chrome:</source>
          <target state="translated">ネットワークの問題をシミュレートするには、アプリケーションのネットワーク相互作用を無効にします。 Chromeの場合：</target>
        </trans-unit>
        <trans-unit id="f88ded5fc1c640f4a2bd9755a49fe8b90817554c" translate="yes">
          <source>To simulate user input, you can find the input element and set its &lt;code&gt;value&lt;/code&gt; property.</source>
          <target state="translated">ユーザー入力をシミュレートするために、input要素を見つけてその &lt;code&gt;value&lt;/code&gt; プロパティを設定できます。</target>
        </trans-unit>
        <trans-unit id="740da28ed7f431cf8963e67cef151e88bd5e2bbf" translate="yes">
          <source>To skip the download link, add the &lt;code&gt;noDownload&lt;/code&gt; attribute.</source>
          <target state="translated">ダウンロードリンクをスキップするには、 &lt;code&gt;noDownload&lt;/code&gt; 属性を追加します。</target>
        </trans-unit>
        <trans-unit id="966fbbefbe372b65e80303ab34559f1ffc260f0b" translate="yes">
          <source>To skip the live Stackblitz link and only link to the download, add the &lt;code&gt;downloadOnly&lt;/code&gt; attribute.</source>
          <target state="translated">Stackblitzのライブリンクとダウンロードへのリンクのみをスキップするには、 &lt;code&gt;downloadOnly&lt;/code&gt; 属性を追加します。</target>
        </trans-unit>
        <trans-unit id="ab87060eaf2297eb5463559b81f0a81cc8881cda" translate="yes">
          <source>To specify a value transformation in an HTML template, use the &lt;a href=&quot;template-syntax#pipe&quot;&gt;pipe operator (|)&lt;/a&gt;.</source>
          <target state="translated">HTMLテンプレートで値変換を指定するには、 &lt;a href=&quot;template-syntax#pipe&quot;&gt;パイプ演算子（|）を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8c26bd8dbf7d5d26bb6a0711698f315370497669" translate="yes">
          <source>To specify offset styles to be applied at a later time, define steps with &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;, or use &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; calls with a delay value. For example:</source>
          <target state="translated">後で適用されるオフセットスタイルを指定するには、 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 使用してステップを定義するか、遅延値を指定した &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 呼び出しを使用します。 例えば：</target>
        </trans-unit>
        <trans-unit id="098c0b9849214a70fc7726b8c68b61855e17df7b" translate="yes">
          <source>To specify the response object type, first define an interface with the required properties. (Use an interface rather than a class; a response cannot be automatically converted to an instance of a class.)</source>
          <target state="translated">応答オブジェクトのタイプを指定するには、最初に必要なプロパティを持つインターフェースを定義します。 （クラスではなくインターフェースを使用してください。応答をクラスのインスタンスに自動的に変換することはできません。）</target>
        </trans-unit>
        <trans-unit id="dde8a2ef8d669c63a62cff50f1d6396d1cb88adf" translate="yes">
          <source>To start a collection, you need to create the schematic files. The following steps show you how to add initial support without modifying any project files.</source>
          <target state="translated">コレクションを開始するには、回路図ファイルを作成する必要があります。 次の手順は、プロジェクトファイルを変更せずに初期サポートを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="675df4470cdabe4f5cbe7c6f1ee4baa2a9761571" translate="yes">
          <source>To start a new project with Ivy enabled, use the &lt;code&gt;--enable-ivy&lt;/code&gt; flag with the &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">Ivyを有効にして新しいプロジェクトを開始するには、 &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;コマンドで &lt;code&gt;--enable-ivy&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="cc42865ce59ef8db7b918c51096cb7b9d9d767ba" translate="yes">
          <source>To start rendering your app with Universal on your local system, use the following command.</source>
          <target state="translated">ローカルシステムでユニバーサルを使用してアプリのレンダリングを開始するには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="e1c7b5759322bd72b7a70ff587712b48f2342170" translate="yes">
          <source>To stop using the Ivy compiler, set &lt;code&gt;enableIvy&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;tsconfig.app.json&lt;/code&gt;, or remove it completely. Also remove &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; from your default build options if you didn't have it there before.</source>
          <target state="translated">Ivyコンパイラーの使用を停止するには、 &lt;code&gt;enableIvy&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定するか、完全に削除します。 &lt;code&gt;&quot;aot&quot;: true&lt;/code&gt; も削除します：以前にそれがなかった場合は、デフォルトのビルドオプションからtrueです。</target>
        </trans-unit>
        <trans-unit id="d3c09441693602ca793b2b01b4f9af8a0248fabc" translate="yes">
          <source>To streamline the syntax, the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive hides the details behind its own &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; input and &lt;code&gt;ngModelChange&lt;/code&gt; output properties:</source>
          <target state="translated">構文を合理化するために、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブは独自の &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; inputおよび &lt;code&gt;ngModelChange&lt;/code&gt; outputプロパティの背後に詳細を隠します：</target>
        </trans-unit>
        <trans-unit id="39b4d5704426ff8a7639bccde11ece39d8b3aeb6" translate="yes">
          <source>To subscribe, call &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt;, which asks the user for permission. The call returns a &lt;code&gt;Promise&lt;/code&gt; with a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt;&lt;code&gt;PushSubscription&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">購読するには、ユーザーに許可を求める &lt;code&gt;&lt;a href=&quot;swpush#requestSubscription&quot;&gt;SwPush.requestSubscription()&lt;/a&gt;&lt;/code&gt; 呼び出します。 呼び出しは、新しい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt; &lt;code&gt;PushSubscription&lt;/code&gt; &lt;/a&gt;インスタンスを含む &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="091932076ef13bad443c5e0beaa6885505ec5895" translate="yes">
          <source>To summarize, Angular found the &lt;code&gt;appHighlight&lt;/code&gt; attribute on the &lt;strong&gt;host&lt;/strong&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. It created an instance of the &lt;code&gt;HighlightDirective&lt;/code&gt; class and injected a reference to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element into the directive's constructor which sets the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element's background style to yellow.</source>
          <target state="translated">要約すると、Angularは&lt;strong&gt;ホストの&lt;/strong&gt; &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素で &lt;code&gt;appHighlight&lt;/code&gt; 属性を見つけました。 &lt;code&gt;HighlightDirective&lt;/code&gt; クラスのインスタンスを作成し、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素への参照をディレクティブのコンストラクターに挿入して、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素の背景スタイルを黄色に設定します。</target>
        </trans-unit>
        <trans-unit id="fe4b6b798619064feab05be7c141408b9ecfad03" translate="yes">
          <source>To summarize, the key differentiating factors of &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; are:</source>
          <target state="translated">要約すると、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 主要な差別化要因は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b52ca2d96bdaaa3cfb5379f6156241ff261b361a" translate="yes">
          <source>To support these behaviors, the Angular service worker loads a &lt;em&gt;manifest&lt;/em&gt; file from the server. The manifest describes the resources to cache and includes hashes of every file's contents. When an update to the application is deployed, the contents of the manifest change, informing the service worker that a new version of the application should be downloaded and cached. This manifest is generated from a CLI-generated configuration file called &lt;code&gt;ngsw-config.json&lt;/code&gt;.</source>
          <target state="translated">これらの動作をサポートするために、Angular Service Workerは&lt;em&gt;マニフェスト&lt;/em&gt;ファイルをサーバーからロードします。 マニフェストには、キャッシュするリソースが記述され、すべてのファイルのコンテンツのハッシュが含まれます。 アプリケーションの更新がデプロイされると、マニフェストの内容が変更され、アプリケーションの新しいバージョンをダウンロードしてキャッシュする必要があることをサービスワーカーに通知します。 このマニフェストは、 &lt;code&gt;ngsw-config.json&lt;/code&gt; というCLIで生成された構成ファイルから生成されます。</target>
        </trans-unit>
        <trans-unit id="c4ca653d202193362f15dba2ff3cfc4b0025739a" translate="yes">
          <source>To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.</source>
          <target state="translated">XSSバグを体系的にブロックするために、Angularはデフォルトですべての値を信頼できないものとして扱います。 プロパティ、属性、スタイル、クラスバインディング、または補間によって値がテンプレートからDOMに挿入されると、Angularは信頼できない値をサニタイズしてエスケープします。</target>
        </trans-unit>
        <trans-unit id="5c2d8661b5b005891a1e25d985a1673afb599e07" translate="yes">
          <source>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called &lt;code&gt;XSRF-TOKEN&lt;/code&gt; on either the page load or the first GET request. On subsequent requests the server can verify that the cookie matches the &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP header, and therefore be sure that only code running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens. Set the token to a digest of your site's authentication cookie with a salt for added security.</source>
          <target state="translated">これを活用するには、サーバーは、ページの読み込み時または最初のGET要求時に、 &lt;code&gt;XSRF-TOKEN&lt;/code&gt; というJavaScriptで読み取り可能なセッションCookieにトークンを設定する必要があります。 後続のリクエストで、サーバーはCookieが &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTPヘッダーと一致することを確認できます。したがって、ドメインで実行されているコードのみがリクエストを送信できたことを確認してください。 トークンはユーザーごとに一意であり、サーバーで検証可能である必要があります。 これにより、クライアントが独自のトークンを作成できなくなります。 セキュリティを強化するために、トークンをサイトの認証Cookieのダイジェストに塩で設定します。</target>
        </trans-unit>
        <trans-unit id="a2c3396ff07cb76eb004b09abd2396aa4cfc57b5" translate="yes">
          <source>To take this example a little further, we can create an observable that publishes events. In this example, the subscriber function is defined inline.</source>
          <target state="translated">この例をさらに進めるために、イベントを発行するオブザーバブルを作成できます。 この例では、サブスクライバー関数はインラインで定義されています。</target>
        </trans-unit>
        <trans-unit id="33b81c4efe4680114d1f1e1f01d20fc61854d427" translate="yes">
          <source>To tell Angular that this is a pipe, you apply the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator, which you import from the core Angular library.</source>
          <target state="translated">これがパイプであることをAngularに伝えるには、コアAngularライブラリからインポートする &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; デコレータを適用します。</target>
        </trans-unit>
        <trans-unit id="d69f6b79976daa71b140336b6e0fc275fb2a4a15" translate="yes">
          <source>To tell that story in code, you'll often need to create partial files or intermediate versions of the final source code file with fragments of code that don't appear in the final app.</source>
          <target state="translated">そのストーリーをコードで伝えるには、最終的なアプリには表示されないコードのフラグメントを含む最終的なソースコードファイルの部分ファイルまたは中間バージョンを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="41ed9ac99a1093b2313ac001a60efb09be984be6" translate="yes">
          <source>To test a service, you set the &lt;code&gt;providers&lt;/code&gt; metadata property with an array of the services that you'll test or mock.</source>
          <target state="translated">サービスをテストするには、 &lt;code&gt;providers&lt;/code&gt; メタデータプロパティに、テストまたはモックするサービスの配列を設定します 。</target>
        </trans-unit>
        <trans-unit id="0689818deab6829bbe840e4c6eba2a40a2aa0140" translate="yes">
          <source>To test this feature, add a button with a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;HeroListComponent&lt;/code&gt; template and set the link to &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt;.</source>
          <target state="translated">この機能をテストするには、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; を含むボタンを &lt;code&gt;HeroListComponent&lt;/code&gt; テンプレートに追加し、リンクを &lt;code&gt;&quot;/sidekicks&quot;&lt;/code&gt; sidekicks &quot;に設定します。</target>
        </trans-unit>
        <trans-unit id="ecc66d276b3225d15e06e1f1cf36defdf74d825a" translate="yes">
          <source>To translate a &lt;code&gt;plural&lt;/code&gt;, translate its ICU format match values:</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; を翻訳するには、そのICU形式の一致値を翻訳します。</target>
        </trans-unit>
        <trans-unit id="885e91781ad354087c34588828548ccdfecdb432" translate="yes">
          <source>To translate a text message accurately, the translator may need additional information or context.</source>
          <target state="translated">テキストメッセージを正確に翻訳するには、翻訳者が追加の情報またはコンテキストを必要とする場合があります。</target>
        </trans-unit>
        <trans-unit id="cef6e619ff20a5d2471097479db5a249a2c82f81" translate="yes">
          <source>To turn off this feature, run the following command:</source>
          <target state="translated">この機能をオフにするには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ed33505f49ae41506ab117a8b63c6d0f85e67b26" translate="yes">
          <source>To understand how the &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; influence service visibility differently, the following sections build a  step-by-step and compare the use of &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; in code and a logical tree.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; がサービスの可視性に異なる影響を与える方法を理解するために、次のセクションでは、コードと論理ツリーでの &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の使用を段階的に構築して比較します。</target>
        </trans-unit>
        <trans-unit id="3eebe2ea66d8dfa62e18d044bc45eab39aaad7bf" translate="yes">
          <source>To update an existing project to use Ivy, set the &lt;code&gt;enableIvy&lt;/code&gt; option in the &lt;code&gt;angularCompilerOptions&lt;/code&gt; in your project's &lt;code&gt;tsconfig.app.json&lt;/code&gt;.</source>
          <target state="translated">既存のプロジェクトを更新してIvyを使用するには、プロジェクトの &lt;code&gt;tsconfig.app.json&lt;/code&gt; の &lt;code&gt;angularCompilerOptions&lt;/code&gt; で &lt;code&gt;enableIvy&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="b4726caf12aeeed22903d708d6fd9dcb3ab84cef" translate="yes">
          <source>To update from one major version to another, use the format &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">あるメジャーバージョンから別のメジャーバージョンに &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt; @angular/cli@^&amp;lt;major_version&amp;gt; @angular/core@^&amp;lt;major_version&amp;gt;&lt;/code&gt; するには、 ng update @ angular / cli @ ^ &amp;lt;major_version&amp;gt; @ angular / core @ ^ &amp;lt;major_version&amp;gt;という形式を使用します。</target>
        </trans-unit>
        <trans-unit id="3b123945947d8bf63fcbe7c6d93a368853a6bef1" translate="yes">
          <source>To update the &lt;code&gt;name&lt;/code&gt; property, the changed text is retrieved by following the path &lt;code&gt;$event.target.value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; プロパティを更新するには、パス &lt;code&gt;$event.target.value&lt;/code&gt; に従って変更されたテキストを取得します。</target>
        </trans-unit>
        <trans-unit id="e3daec1d373f17dce64b4434537727da04314427" translate="yes">
          <source>To update the hero form to be a reactive form, you can use some of the same built-in validators&amp;mdash;this time, in function form. See below:</source>
          <target state="translated">ヒーローフォームをリアクティブフォームに更新するには、同じ組み込みバリデータのいくつかを使用します。今回は関数フォームで使用できます。 下記参照：</target>
        </trans-unit>
        <trans-unit id="ec580f157cda9cf0f0589f7bbc29f74d7bf8bf09" translate="yes">
          <source>To update to the next beta or pre-release version, use the &lt;code&gt;--next=true&lt;/code&gt; option.</source>
          <target state="translated">次のベータ版またはプレリリース版に更新するには、 &lt;code&gt;--next=true&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="bbc501407156722afda3e86f40157fb7f056ade2" translate="yes">
          <source>To update your apps:</source>
          <target state="translated">アプリを更新するには：</target>
        </trans-unit>
        <trans-unit id="8a839cde0f94f54c1db2fbd03e39cc0d94409768" translate="yes">
          <source>To update your code before v7, you'll want to decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch over to template-driven directives.</source>
          <target state="translated">v7より前にコードを更新するには、リアクティブフォームディレクティブに固執する（およびリアクティブフォームパターンを使用して値を取得/設定する）か、テンプレート駆動ディレクティブに切り替えるかを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f18488d2ffa521dc9c72e40ed167cd48cf4b0efb" translate="yes">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 機能を使用するには、テスト設定ファイルに &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; をインポートする必要があります。 Angular CLIでプロジェクトを作成した場合、 &lt;code&gt;zone-testing&lt;/code&gt; は既に &lt;code&gt;src/test.ts&lt;/code&gt; インポートされています。</target>
        </trans-unit>
        <trans-unit id="a2482c9fc60deb6dca0d28b779cb8b73a4467b41" translate="yes">
          <source>To use &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; functionality, you must import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file. If you created your project with the Angular CLI, &lt;code&gt;zone-testing&lt;/code&gt; is already imported in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; 機能を使用するには、テストセットアップファイルに &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; をインポートする必要があります。 Angular CLIでプロジェクトを作成した場合、 &lt;code&gt;zone-testing&lt;/code&gt; は既に &lt;code&gt;src/test.ts&lt;/code&gt; インポートされています。</target>
        </trans-unit>
        <trans-unit id="4c5cd4c387b425279202e14518a4f13f588d38ae" translate="yes">
          <source>To use AOT with a hybrid app, you have to first set it up like any other Angular application, as shown in &lt;a href=&quot;aot-compiler&quot;&gt;the Ahead-of-time Compilation chapter&lt;/a&gt;.</source>
          <target state="translated">ハイブリッドアプリでAOTを使用するには&lt;a href=&quot;aot-compiler&quot;&gt;、「Ahead-of-time Compilation」の章に&lt;/a&gt;示すように、他のAngularアプリケーションと同様に最初にセットアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="dc05bdf242df5c5e52a5f7713254718034ee591f" translate="yes">
          <source>To use Bazel in a new application, first install &lt;code&gt;@angular/bazel&lt;/code&gt; globally</source>
          <target state="translated">新しいアプリケーションで &lt;code&gt;@angular/bazel&lt;/code&gt; を使用するには、まず@ angular / bazelをグローバルにインストールします</target>
        </trans-unit>
        <trans-unit id="c3f4f3cb1895e041269196b22d5a205a95c00cb5" translate="yes">
          <source>To use CSS grid with IE10/11, you must explicitly enable it using the &lt;code&gt;autoplace&lt;/code&gt; option. To do this, add the following to the top of the global styles file (or within a specific css selector scope):</source>
          <target state="translated">IE10 / 11でCSSグリッドを使用するには、 &lt;code&gt;autoplace&lt;/code&gt; オプションを使用して明示的に有効にする必要があります。 これを行うには、グローバルスタイルファイルの先頭に（または特定のCSSセレクタースコープ内に）以下を追加します。</target>
        </trans-unit>
        <trans-unit id="adbc1c0149aa2c996df7fd94085915ea70c1dfcf" translate="yes">
          <source>To use a select in a template-driven form, simply add an &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;name&lt;/code&gt; attribute to the main &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">テンプレート駆動型フォームで選択を使用するには、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; 属性をメインの &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; タグに追加するだけです。</target>
        </trans-unit>
        <trans-unit id="d9a033cbec8595c7b94a782a7c20d201108cbb14" translate="yes">
          <source>To use reactive forms, import &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/forms&lt;/code&gt; package and add it to your NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; フォームを使用するには、 &lt;code&gt;@angular/forms&lt;/code&gt; パッケージからReactiveFormsModuleをインポートし、NgModuleの &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="99b05aeea7ad8c9ff74a29d0c307334f8ae5a9cc" translate="yes">
          <source>To use the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt;, import the symbol from &lt;code&gt;@angular/common/upgrade&lt;/code&gt; and add it to your &lt;code&gt;AppModule&lt;/code&gt; imports using the static &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule&quot;&gt;LocationUpgradeModule&lt;/a&gt;&lt;/code&gt; を使用するには、 &lt;code&gt;@angular/common/upgrade&lt;/code&gt; からシンボルをインポートし、静的 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; メソッドを使用して &lt;code&gt;AppModule&lt;/code&gt; インポートに追加します。</target>
        </trans-unit>
        <trans-unit id="df43dc8c1dde95936358a838f639abe20aaeb53b" translate="yes">
          <source>To use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator in a child component class, first import &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and then decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">子コンポーネントクラスで &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレータを使用するには、まず &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; をインポートし、次に &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティをデコレートします。</target>
        </trans-unit>
        <trans-unit id="d4922d09d3f66928b67e63af20c190e526abbeb7" translate="yes">
          <source>To use the &lt;code&gt;ng deploy&lt;/code&gt; command, use &lt;code&gt;ng add&lt;/code&gt; to add a package that implements deployment capabilities to your favorite platform. Adding the package automatically updates your workspace configuration, adding a deployment &lt;a href=&quot;../guide/cli-builder&quot;&gt;CLI builder&lt;/a&gt;. For example:</source>
          <target state="translated">&lt;code&gt;ng deploy&lt;/code&gt; コマンドを使用するには、 &lt;code&gt;ng add&lt;/code&gt; を使用して、お気に入りのプラットフォームに展開機能を実装するパッケージを追加します。 パッケージを追加すると、ワークスペース構成が自動的に更新され、展開&lt;a href=&quot;../guide/cli-builder&quot;&gt;CLIビルダーが&lt;/a&gt;追加されます 。 例えば：</target>
        </trans-unit>
        <trans-unit id="4e5078f362fa8e75b589c64aa05c23c8c2894e2d" translate="yes">
          <source>To use the Language Service for in-line templates, you must first add an extension to allow TypeScript, then install the Angular Language Service plug-in. Starting with TypeScript 2.3, TypeScript has a plug-in model that the language service can use.</source>
          <target state="translated">インラインテンプレートに言語サービスを使用するには、最初に拡張子を追加してTypeScriptを許可し、次にAngular Language Serviceプラグインをインストールする必要があります。 TypeScript 2.3以降、TypeScriptには、言語サービスが使用できるプラグインモデルがあります。</target>
        </trans-unit>
        <trans-unit id="d456e2ebd07067eb97a027965223c7abb3f733d7" translate="yes">
          <source>To use the environment configurations you have defined, your components must import the original environments file:</source>
          <target state="translated">定義した環境構成を使用するには、コンポーネントで元の環境ファイルをインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="f5d7e74575342444e96fc87e2007c4383a5ce53c" translate="yes">
          <source>To use the new &lt;code&gt;HighlightDirective&lt;/code&gt;, add a paragraph (&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;) element to the template of the root &lt;code&gt;AppComponent&lt;/code&gt; and apply the directive as an attribute.</source>
          <target state="translated">新しい &lt;code&gt;HighlightDirective&lt;/code&gt; を使用するには、ルート &lt;code&gt;AppComponent&lt;/code&gt; のテンプレートに段落（ &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ）要素を追加し、ディレクティブを属性として適用します。</target>
        </trans-unit>
        <trans-unit id="6ef78e3fbfe7e791fb6b54a58fe45a757bce01ad" translate="yes">
          <source>To use the same instance of &lt;code&gt;HttpInterceptors&lt;/code&gt; for the entire app, import the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; only in your &lt;code&gt;AppModule&lt;/code&gt;, and add the interceptors to the root application injector . If you import &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; multiple times across different modules (for example, in lazy loading modules), each import creates a new copy of the &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, which overwrites the interceptors provided in the root module.</source>
          <target state="translated">アプリ全体で &lt;code&gt;HttpInterceptors&lt;/code&gt; の同じインスタンスを使用するには、 HttpModuleをAppModuleにのみインポートし、インターセプターをルートアプリケーションインジェクターに追加します。 異なるモジュール間で（たとえば、遅延読み込みモジュールで） &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を複数回インポートする場合、インポートごとに &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; の新しいコピーが作成され、ルートモジュールで提供されるインターセプターが上書きされます。</target>
        </trans-unit>
        <trans-unit id="8a1652d0cb403164496c7c6e9915242c358c810d" translate="yes">
          <source>To use this directive you must provide a container element that sets the &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; attribute to a switch expression. Inner elements with a &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; will display based on their expression:</source>
          <target state="translated">このディレクティブを使用するには、 &lt;code&gt;[&lt;a href=&quot;ngplural&quot;&gt;ngPlural&lt;/a&gt;]&lt;/code&gt; 属性をスイッチ式に設定するコンテナー要素を提供する必要があります。 &lt;code&gt;[&lt;a href=&quot;ngpluralcase&quot;&gt;ngPluralCase&lt;/a&gt;]&lt;/code&gt; を持つ内部要素は、式に基づいて表示されます。</target>
        </trans-unit>
        <trans-unit id="bec1df521164ef700b40c0abfb52f86f1e693028" translate="yes">
          <source>To use this service, add it to your component or directive as a dependency. The service is instantiated along with your component.</source>
          <target state="translated">このサービスを使用するには、依存関係としてコンポーネントまたはディレクティブに追加します。 サービスは、コンポーネントとともにインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="ec400ea96c2fce5839cbfdc718a80a3377af0601" translate="yes">
          <source>To use your own library in an app:</source>
          <target state="translated">アプリで独自のライブラリを使用するには：</target>
        </trans-unit>
        <trans-unit id="3c973408d2448836192162ca55537f91af2a75f7" translate="yes">
          <source>To validate the links, you don't need the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate and you don't need the &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; to mark where the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; inserts &lt;em&gt;routed components&lt;/em&gt;.</source>
          <target state="translated">リンクを検証するために、ナビゲートするために &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; は必要なく、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; が&lt;em&gt;ルーティングされたコンポーネントを&lt;/em&gt;挿入する場所をマークするために &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="0df4d562aaab9bff2662b3ac4f6d1a92f4728ee1" translate="yes">
          <source>To validate the potential alter ego, we need to consult a central database of all currently enlisted heroes. The process is asynchronous, so we need a special validator for that.</source>
          <target state="translated">潜在的な分身を検証するには、現在参加しているすべてのヒーローの中央データベースを調べる必要があります。 プロセスは非同期であるため、そのための特別なバリデーターが必要です。</target>
        </trans-unit>
        <trans-unit id="32c127e56d91889f1c7cad6d0e80c60907253fef" translate="yes">
          <source>To verify the build output, open &lt;code&gt;dist/my-app/index.html&lt;/code&gt;. Look for default text &lt;code&gt;app-shell works!&lt;/code&gt; to show that the app shell route was rendered as part of the output.</source>
          <target state="translated">ビルド出力を確認するには、 &lt;code&gt;dist/my-app/index.html&lt;/code&gt; 開きます。 デフォルトのテキスト &lt;code&gt;app-shell works!&lt;/code&gt; アプリシェルルートが出力の一部としてレンダリングされたことを示すため。</target>
        </trans-unit>
        <trans-unit id="64189167d7c6f7924c3403091e78e99cd1953102" translate="yes">
          <source>To watch for changes on an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property, use &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, one of Angular's &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;lifecycle hooks&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; is specifically designed to work with properties that have the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator. See the &lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;&lt;code&gt;OnChanges&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; guide for more details and examples.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティの変更を監視するには、Angularの&lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt;ライフサイクルフック&lt;/a&gt;の1つである &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; を使用します 。 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; デコレータを持つプロパティで動作するように特別に設計されています。 詳細と例については、 &lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;ガイドの&lt;a href=&quot;lifecycle-hooks#onchanges&quot;&gt; &lt;code&gt;OnChanges&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="05a58fa2ca80d1b185bffa061088c51d5420c848" translate="yes">
          <source>To write these kinds of test, you'll use additional features of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; as well as other testing helpers.</source>
          <target state="translated">この種のテストを作成するには、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; の追加機能と他のテストヘルパーを使用します。</target>
        </trans-unit>
        <trans-unit id="1cc935e80e328e474a31d427ae2531c53add98a9" translate="yes">
          <source>Together, a component and template define an Angular view.</source>
          <target state="translated">コンポーネントとテンプレートを組み合わせて、Angularビューを定義します。</target>
        </trans-unit>
        <trans-unit id="87022fcea4706d527b367133425bf8fe125ff9af" translate="yes">
          <source>Toggle two form regions (extra credit)</source>
          <target state="translated">2つのフォーム領域を切り替えます（追加クレジット）</target>
        </trans-unit>
        <trans-unit id="5ba5c297a3177e98b75ef09b3c0904e236e367fe" translate="yes">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;service-worker/serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; 外部でServiceWorkerModuleのオプションを提供するために使用できるトークン。</target>
        </trans-unit>
        <trans-unit id="31eb6ab3d3ba3ac918313692bbab97fbc9516ee1" translate="yes">
          <source>Token that can be used to provide options for &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; outside of &lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;serviceworkermodule#register&quot;&gt;ServiceWorkerModule.register()&lt;/a&gt;&lt;/code&gt; 外部でServiceWorkerModuleのオプションを提供するために使用できるトークン。</target>
        </trans-unit>
        <trans-unit id="a829a6b9e3e265061c5310994b566e52ec5ed4d0" translate="yes">
          <source>Token to provide CompilerOptions in the platform injector.</source>
          <target state="translated">プラットフォームインジェクターでCompilerOptionsを提供するトークン。</target>
        </trans-unit>
        <trans-unit id="1d10a851a2521fa1132fbcccf205872120c2acd7" translate="yes">
          <source>Tokens &lt;a href=&quot;dependency-injection&quot;&gt;can have different types&lt;/a&gt;. They are often classes. They may also be strings.</source>
          <target state="translated">トークンに&lt;a href=&quot;dependency-injection&quot;&gt;はさまざまなタイプがあります&lt;/a&gt; 。 多くの場合、クラスです。 文字列でもあります。</target>
        </trans-unit>
        <trans-unit id="19d57f29559f37ce632a300697209a7f397c855f" translate="yes">
          <source>Tokens can be merged into a combined query selector string. For example:</source>
          <target state="translated">トークンは、結合されたクエリセレクター文字列にマージできます。 例えば：</target>
        </trans-unit>
        <trans-unit id="df45966d6a0d5c55c4c026a6b59b4d99477ebee0" translate="yes">
          <source>Top component</source>
          <target state="translated">トップコンポーネント</target>
        </trans-unit>
        <trans-unit id="8dd425bec3818cb3cdcc48d42a8c69706bf636c4" translate="yes">
          <source>Total number of bytes to upload or download. Depending on the request or response, this may not be computable and thus may not be present.</source>
          <target state="translated">アップロードまたはダウンロードする合計バイト数。 要求または応答によっては、これは計算できないため、存在しない場合があります。</target>
        </trans-unit>
        <trans-unit id="253508f1cdb3b5a118c1f092109924e9f6cc5ecf" translate="yes">
          <source>Tour of Heroes App and Tutorial</source>
          <target state="translated">Heroesアプリとチュートリアルのツアー</target>
        </trans-unit>
        <trans-unit id="940a504d78dc8eb71cdeb87d05acf21c2c8dddc2" translate="yes">
          <source>Track and listen for changes to the form's data model.</source>
          <target state="translated">フォームのデータモデルへの変更を追跡してリッスンします。</target>
        </trans-unit>
        <trans-unit id="8fb0f6e53c00adefd00aea3fc755781253060a37" translate="yes">
          <source>Track by identity as computed by the &lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;trackbyfunction&quot;&gt;TrackByFunction&lt;/a&gt;&lt;/code&gt; によって計算されたIDで追跡します。</target>
        </trans-unit>
        <trans-unit id="2e20a272657096b0f12c4de4b5cd187088921815" translate="yes">
          <source>Track control state and validity with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; を使用して制御状態と有効性を追跡する</target>
        </trans-unit>
        <trans-unit id="c1f1f73803fe36b0c16b9ccc852ad5cf4c245bed" translate="yes">
          <source>Track state changes and the validity of form controls.</source>
          <target state="translated">状態の変化とフォームコントロールの有効性を追跡します。</target>
        </trans-unit>
        <trans-unit id="750eabe2d59ab51eb9806ca014b817ea6d03f06e" translate="yes">
          <source>TrackByFunction</source>
          <target state="translated">TrackByFunction</target>
        </trans-unit>
        <trans-unit id="e8e06238766a8da29e9dc9f88eea2e8f0510ad6f" translate="yes">
          <source>Tracking and controlling &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;focus&lt;/a&gt; in a UI is an important consideration in designing for accessibility. When using Angular routing, you should decide where page focus goes upon navigation.</source>
          <target state="translated">UIで&lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/focus/&quot;&gt;フォーカス&lt;/a&gt;を追跡および制御することは、アクセシビリティを設計する上で重要な考慮事項です。 Angularルーティングを使用する場合は、ナビゲーションのページフォーカスを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2bf54b9db29d88e96523bb27968cbe340de3297c" translate="yes">
          <source>Tracks changes to the email attribute bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされたメール属性への変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="8fd392bb0e0e4c81e1b2544fdfe54ef3a072a778" translate="yes">
          <source>Tracks changes to the pattern bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされたパターンへの変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="d69d10dc65469d775e59042da88ca5d5529758ae" translate="yes">
          <source>Tracks changes to the required attribute bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされた必須属性への変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="d8556ba32bce9b6e211ba689364183606036ec09" translate="yes">
          <source>Tracks changes to the the maximum length bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされている最大長までの変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="94a80f0e6fddb9418827ab4bb176c0d8df0d6618" translate="yes">
          <source>Tracks changes to the the minimum length bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされている最小長までの変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="196941bc4879e6f47b65e211a399eab8a6f6151b" translate="yes">
          <source>Tracks options for the &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; インスタンスのオプションを追跡します。</target>
        </trans-unit>
        <trans-unit id="ab3dbc710cc5293470f8eccfb6d9f6e87414e9b0" translate="yes">
          <source>Tracks simple string values bound to the option element. For objects, use the &lt;code&gt;ngValue&lt;/code&gt; input binding.</source>
          <target state="translated">オプション要素にバインドされた単純な文字列値を追跡します。 オブジェクトの場合、 &lt;code&gt;ngValue&lt;/code&gt; 入力バインディングを使用します。</target>
        </trans-unit>
        <trans-unit id="8e0382103af4eac9cadd4b2247861b1d78b40172" translate="yes">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance bound to the directive.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを追跡します。</target>
        </trans-unit>
        <trans-unit id="e47245e960a6f3e488ea514c18870fe786d9b704" translate="yes">
          <source>Tracks the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; を追跡します。</target>
        </trans-unit>
        <trans-unit id="22f15c49bdce4bf9eed08a825998088b3e2b947f" translate="yes">
          <source>Tracks the configuration options for this &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; インスタンスの構成オプションを追跡します。</target>
        </trans-unit>
        <trans-unit id="625b260ece4880729473d6e613cdc9200774f31d" translate="yes">
          <source>Tracks the list of added &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; instances</source>
          <target state="translated">追加された &lt;code&gt;&lt;a href=&quot;formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; インスタンスのリストを追跡します</target>
        </trans-unit>
        <trans-unit id="89defebffe912c5087e896997a7d9b201c73c793" translate="yes">
          <source>Tracks the name bound to the directive. The parent form uses this name as a key to retrieve this control's value.</source>
          <target state="translated">ディレクティブにバインドされた名前を追跡します。 親フォームは、この名前をキーとして使用して、このコントロールの値を取得します。</target>
        </trans-unit>
        <trans-unit id="aee499214828a5c060da6e529f71f860679051fe" translate="yes">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の名前を追跡します。 名前は、親 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。</target>
        </trans-unit>
        <trans-unit id="aad0ec9ce7f409bb75dafe01a113a9f157129e45" translate="yes">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; の名前を追跡します。 名前は、親 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。</target>
        </trans-unit>
        <trans-unit id="5250e4f20d726ba69a0ff3fea3984936608f75ae" translate="yes">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の名前を追跡します。 名前は、親 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のキーに対応します。</target>
        </trans-unit>
        <trans-unit id="3587ba9a726a4c83a603322c3d244042c4a5440b" translate="yes">
          <source>Tracks the name of the &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; bound to the directive. The name corresponds to a key in the parent &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディレクティブにバインドされた &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; の名前を追跡します。 名前は、親 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; のキーに対応します。</target>
        </trans-unit>
        <trans-unit id="94ef4bb133d8371862e04cdbe35ea80d627658aa" translate="yes">
          <source>Tracks the name of the radio input element.</source>
          <target state="translated">ラジオ入力要素の名前を追跡します。</target>
        </trans-unit>
        <trans-unit id="847fd12a5e443af80b1d628517f650d4b16809c3" translate="yes">
          <source>Tracks the option comparison algorithm for tracking identities when checking for changes.</source>
          <target state="translated">変更を確認するときにIDを追跡するためのオプション比較アルゴリズムを追跡します。</target>
        </trans-unit>
        <trans-unit id="4181514cf443c8d2ed062575db037633d03567f5" translate="yes">
          <source>Tracks the value and validation status of an individual form control.</source>
          <target state="translated">個々のフォームコントロールの値と検証ステータスを追跡します。</target>
        </trans-unit>
        <trans-unit id="e95029f5c1b54e6951ef7d1dc1f48671ee8c5122" translate="yes">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスのグループの値と有効性の状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="6081501877b5287d24fab2c51a89d5bc830a5e25" translate="yes">
          <source>Tracks the value and validity state of a group of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスのグループの値と有効性の状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="145bfac45bf7e6224142dc5429a521af2cf548c9" translate="yes">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスの配列の値と有効性状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="571f063bb31197967a229f7c4374acb092869635" translate="yes">
          <source>Tracks the value and validity state of an array of &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスの配列の値と有効性状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="a2626e67aec561be0def79f87c598efe295b2e85" translate="yes">
          <source>Tracks the value bound to the option element. Unlike the value binding, ngValue supports binding to objects.</source>
          <target state="translated">オプション要素にバインドされた値を追跡します。 値バインディングとは異なり、ngValueはオブジェクトへのバインディングをサポートします。</target>
        </trans-unit>
        <trans-unit id="3ee63c63d361eb3aa2b0a3c1f8a3353d2f4dccf1" translate="yes">
          <source>Tracks the value bound to this directive.</source>
          <target state="translated">このディレクティブにバインドされた値を追跡します。</target>
        </trans-unit>
        <trans-unit id="283ea7e4ca07fa5714eec7b7e0bd1c17f20bc544" translate="yes">
          <source>Tracks the value of the radio input element</source>
          <target state="translated">ラジオ入力要素の値を追跡します</target>
        </trans-unit>
        <trans-unit id="705f5065f56c892bc977873651559fe5515ab8a6" translate="yes">
          <source>Tracks whether the control is disabled.</source>
          <target state="translated">コントロールが無効かどうかを追跡します。</target>
        </trans-unit>
        <trans-unit id="9e4fec6404eb80383e9e6d6b5b94d18a5fdece28" translate="yes">
          <source>Transcluding Angular Content into AngularJS Component Directives</source>
          <target state="translated">AngularコンテンツをAngularJSコンポーネントディレクティブに変換する</target>
        </trans-unit>
        <trans-unit id="b8bc0089d8b086cb38dab65911aa8acd5d70fbb7" translate="yes">
          <source>Transclusion: yes</source>
          <target state="translated">トランスクルージョン：はい</target>
        </trans-unit>
        <trans-unit id="f29368cc7ff3b4ade7bfa044be1921ff64aa770b" translate="yes">
          <source>TransferState</source>
          <target state="translated">TransferState</target>
        </trans-unit>
        <trans-unit id="dea51bb13a4467c505ee6181171375f497334d54" translate="yes">
          <source>Transform</source>
          <target state="translated">Transform</target>
        </trans-unit>
        <trans-unit id="812518bba5c699b0027b6b3a480acfb0ebc647bd" translate="yes">
          <source>Transform the free-form body into a serialized format suitable for transmission to the server.</source>
          <target state="translated">自由形式の本体を、サーバーへの送信に適したシリアル化された形式に変換します。</target>
        </trans-unit>
        <trans-unit id="dc1c231275a16e11dae243561efa84b2936b1b19" translate="yes">
          <source>Transformation</source>
          <target state="translated">Transformation</target>
        </trans-unit>
        <trans-unit id="173612f0833f1106fbc8f8dd6cfe45177a22f0f4" translate="yes">
          <source>Transforming a component to a custom element makes all of the required Angular infrastructure available to the browser. Creating a custom element is simple and straightforward, and automatically connects your component-defined view with change detection and data binding, mapping Angular functionality to the corresponding native HTML equivalents.</source>
          <target state="translated">コンポーネントをカスタム要素に変換すると、必要なすべてのAngularインフラストラクチャがブラウザで利用可能になります。 カスタム要素の作成はシンプルで簡単で、コンポーネント定義ビューを変更検出およびデータバインディングに自動的に接続し、Angular機能を対応するネイティブHTML同等物にマッピングします。</target>
        </trans-unit>
        <trans-unit id="76dc9f83782c6293c8d8c6eca91efe25b1d4f5a7" translate="yes">
          <source>Transforming a component to a custom element provides an easy path to creating dynamic HTML content in your Angular app. HTML content that you add directly to the DOM in an Angular app is normally displayed without Angular processing, unless you define a &lt;em&gt;dynamic component&lt;/em&gt;, adding your own code to connect the HTML tag to your app data, and participate in change detection. With a custom element, all of that wiring is taken care of automatically.</source>
          <target state="translated">コンポーネントをカスタム要素に変換すると、Angularアプリで動的なHTMLコンテンツを簡単に作成できます。 AngularアプリのDOMに直接追加したHTMLコンテンツは、 &lt;em&gt;動的コンポーネント&lt;/em&gt;を定義し、独自のコードを追加してHTMLタグをアプリデータに接続し、変更検出に参加しない限り、Angular処理なしで通常表示されます。 カスタム要素を使用すると、そのすべての配線が自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="428b2ec1d548861040d138b663bdf7c61a4509ea" translate="yes">
          <source>Transforming components to custom elements</source>
          <target state="translated">コンポーネントをカスタム要素に変換する</target>
        </trans-unit>
        <trans-unit id="52c81ceec8de22f6a2b99230305438e29dcc24a6" translate="yes">
          <source>Transforms Object or Map into an array of key value pairs.</source>
          <target state="translated">オブジェクトまたはマップをキーと値のペアの配列に変換します。</target>
        </trans-unit>
        <trans-unit id="3a83fe4e975ea243d0d4caabdbff2dd2ca6b63d4" translate="yes">
          <source>Transforms a number into a string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">数値を文字列に変換し、グループのサイズと区切り文字、小数点文字、およびその他のロケール固有の構成を決定するロケール規則に従って書式設定します。</target>
        </trans-unit>
        <trans-unit id="afee2a38410ecd1b168f5e62c7af603ea93414fc" translate="yes">
          <source>Transforms a number to a currency string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">グループのサイズと区切り記号、小数点文字、およびその他のロケール固有の構成を決定するロケール規則に従って書式設定された数値を通貨文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="ba444aa93f3d7c55a8743abcd65343bee076a245" translate="yes">
          <source>Transforms a number to a percentage string, formatted according to locale rules that determine group sizing and separator, decimal-point character, and other locale-specific configurations.</source>
          <target state="translated">グループのサイズと区切り文字、小数点文字、およびその他のロケール固有の構成を決定するロケール規則に従ってフォーマットされた、数値をパーセント文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="b212033572f2c487923ac10525b776d1494e7327" translate="yes">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; のストリームに変換します 。その1つはおそらく &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; です 。</target>
        </trans-unit>
        <trans-unit id="abab076aca3610a4dff43371a91f5154ef3df183" translate="yes">
          <source>Transforms an &lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; into a stream of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;s, one of which will likely be a &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; のストリームに変換します 。その1つはおそらく &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; です 。</target>
        </trans-unit>
        <trans-unit id="c23fe29041b0f266f33891ae1c767b0508402f9a" translate="yes">
          <source>Transforms text to all lower case.</source>
          <target state="translated">テキストをすべて小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="0e392a9c956f15e36c2ae33d345783ffbc7a81c9" translate="yes">
          <source>Transforms text to all upper case.</source>
          <target state="translated">テキストをすべて大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="40a88712d9f4b6d6903665d4b10961274eca90e4" translate="yes">
          <source>Transforms text to title case. Capitalizes the first letter of each word, and transforms the rest of the word to lower case. Words are delimited by any whitespace character, such as a space, tab, or line-feed character.</source>
          <target state="translated">テキストをタイトルケースに変換します。 各単語の最初の文字を大文字にし、残りの単語を小文字に変換します。 単語は、スペース、タブ、改行文字などの空白文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="8c6c4775aedd63bf234a390e5f164114cd3a3da9" translate="yes">
          <source>Transforms the current value of expression &lt;code&gt;cardNumber&lt;/code&gt; via the pipe called &lt;code&gt;myCardNumberFormatter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cardNumber&lt;/code&gt; というパイプを介して式cardNumberの現在の値を変換します。</target>
        </trans-unit>
        <trans-unit id="acb4047f26fa458f6ca21611c9b86f2ba97bab12" translate="yes">
          <source>Transition and triggers</source>
          <target state="translated">移行とトリガー</target>
        </trans-unit>
        <trans-unit id="fd3159002733ca58d01f18f3ef225b0a35103de7" translate="yes">
          <source>Transitions and timing</source>
          <target state="translated">遷移とタイミング</target>
        </trans-unit>
        <trans-unit id="f89031b2b65e1a903ff7d0356c56106e1092f7d4" translate="yes">
          <source>Transitions are matched in the order in which they are defined. Thus, you can apply other transitions on top of the &lt;code&gt;* =&amp;gt; *&lt;/code&gt; (any-to-any) transition. For example, define style changes or animations that would apply just to &lt;code&gt;open =&amp;gt; closed&lt;/code&gt;, or just to &lt;code&gt;closed =&amp;gt; open&lt;/code&gt;, and then use &lt;code&gt;* =&amp;gt; *&lt;/code&gt; as a fallback for state pairings that aren't otherwise called out.</source>
          <target state="translated">遷移は、定義された順序で一致します。 したがって、 &lt;code&gt;* =&amp;gt; *&lt;/code&gt; （any-to-any）遷移の上に他の遷移を適用できます。 たとえば、 &lt;code&gt;open =&amp;gt; closed&lt;/code&gt; 、または単に &lt;code&gt;closed =&amp;gt; open&lt;/code&gt; にのみ適用されるスタイル変更またはアニメーションを定義し、それ以外では呼び出されない状態ペアのフォールバックとして &lt;code&gt;* =&amp;gt; *&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7ff0a6e47fefa7e662116ee0dd231cdcc6a56382" translate="yes">
          <source>Translate &lt;code&gt;plural&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;plural&lt;/code&gt; 翻訳</target>
        </trans-unit>
        <trans-unit id="f28407638edfdbe51d332499328f0747faddfb77" translate="yes">
          <source>Translate &lt;code&gt;select&lt;/code&gt;</source>
          <target state="translated">翻訳を &lt;code&gt;select&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9957e9ff8b20a6e29b6eb99cd6e9ed298461187" translate="yes">
          <source>Translate a nested expression</source>
          <target state="translated">ネストされた式を翻訳する</target>
        </trans-unit>
        <trans-unit id="f8fd85ad8899ddbec87ff78411cd4b09cf77deb3" translate="yes">
          <source>Translate attributes</source>
          <target state="translated">属性を翻訳する</target>
        </trans-unit>
        <trans-unit id="5bd3d2d2e5c2b013f5f2ac3e26d961037f15cca1" translate="yes">
          <source>Translate text nodes</source>
          <target state="translated">テキストノードを翻訳する</target>
        </trans-unit>
        <trans-unit id="c13a3e77e07e4d808e0f50d46cf7d8fba6e47542" translate="yes">
          <source>Translate text without creating an element</source>
          <target state="translated">要素を作成せずにテキストを翻訳する</target>
        </trans-unit>
        <trans-unit id="9ca6a08c5891b63e799acee720895ad663f388d5" translate="yes">
          <source>Translate the other text nodes the same way:</source>
          <target state="translated">他のテキストノードも同じ方法で翻訳します。</target>
        </trans-unit>
        <trans-unit id="ac3f7cdd6fb7bb10f67a29857be4bed2e5e05bcb" translate="yes">
          <source>Translate the source text</source>
          <target state="translated">ソーステキストを翻訳する</target>
        </trans-unit>
        <trans-unit id="624f545665467d793ca13a411258c70e6ac2ee86" translate="yes">
          <source>Translating plural and select expressions</source>
          <target state="translated">複数形と選択式の翻訳</target>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="36e89f13f90ac0d31f2033903bc7999d29a243ad" translate="yes">
          <source>TranslationWidth</source>
          <target state="translated">TranslationWidth</target>
        </trans-unit>
        <trans-unit id="3c93b9e5330687363111dd7a6e0ebef29ee56f02" translate="yes">
          <source>Transmitting data between components</source>
          <target state="translated">コンポーネント間でデータを送信する</target>
        </trans-unit>
        <trans-unit id="6e1d794deefaa6f98622f1040f05a7ea650ea223" translate="yes">
          <source>Tree shaking refers to a compiler option that removes code from the final bundle if the app doesn't reference that code. When providers are tree-shakable, the Angular compiler removes the associated services from the final output when it determines that your application doesn't use those services. This significantly reduces the size of your bundles.</source>
          <target state="translated">ツリーシェーキングとは、アプリがそのコードを参照しない場合に最終バンドルからコードを削除するコンパイラーオプションを指します。 プロバイダーがツリーシェーカブルである場合、Angularコンパイラーは、アプリケーションがそれらのサービスを使用しないと判断すると、関連するサービスを最終出力から削除します。 これにより、バンドルのサイズが大幅に削減されます。</target>
        </trans-unit>
        <trans-unit id="158297e3d668ae1a961f319687ea97bab89382f7" translate="yes">
          <source>Tree-shakable InjectionToken</source>
          <target state="translated">ツリーシェイク可能なインジェクショントークン</target>
        </trans-unit>
        <trans-unit id="e9fcab1031cb2e23a1fe8832649e9c5a53141e58" translate="yes">
          <source>Tree-shakable providers</source>
          <target state="translated">ツリーシェーカブルプロバイダー</target>
        </trans-unit>
        <trans-unit id="434f076d20f1b3b8a33e9ed50bbcb217521d722b" translate="yes">
          <source>Tree-shaking and &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">ツリーシェーキングと &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f05b6a96acbdcfadc896179dc913a13d818f2f99" translate="yes">
          <source>Tree-shaking doesn't work here because Angular can't decide to exclude one chunk of code (the provider definition for the service within the module factory) based on whether another chunk of code (the service class) is used. To make services tree-shakable, the information about how to construct an instance of the service (the provider definition) needs to be a part of the service class itself.</source>
          <target state="translated">Angularは、コードの別のチャンク（サービスクラス）が使用されているかどうかに基づいてコードの1つのチャンク（モジュールファクトリ内のサービスのプロバイダー定義）を除外することを決定できないため、ツリーシェーキングはここでは機能しません。 サービスをツリーシェーカブルにするには、サービスのインスタンス（プロバイダー定義）を構築する方法に関する情報がサービスクラス自体の一部である必要があります。</target>
        </trans-unit>
        <trans-unit id="b998b898aa55ff4a0b42570f2ce7f5d95a803024" translate="yes">
          <source>Tree-shaking is especially useful for a library because the application which uses the library may not have a need to inject it. Read more about &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;tree-shakable providers&lt;/a&gt; in &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI Providers&lt;/a&gt;.</source>
          <target state="translated">ツリーシェーキングは、ライブラリを使用するアプリケーションがライブラリをインジェクトする必要がないため、ライブラリにとって特に役立ちます。 &lt;a href=&quot;dependency-injection-providers#tree-shakable-providers&quot;&gt;ツリーシェーカブルプロバイダーの&lt;/a&gt;詳細については、 &lt;a href=&quot;dependency-injection-providers&quot;&gt;DIプロバイダー&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="1e7081d736f43ad30574ac906d26acdd03c38ed9" translate="yes">
          <source>Trees</source>
          <target state="translated">Trees</target>
        </trans-unit>
        <trans-unit id="6c9d923a2bdc1cbd32c38da5c221d86fa7a8a6ed" translate="yes">
          <source>Trees can represent hierarchical data.</source>
          <target state="translated">ツリーは階層データを表すことができます。</target>
        </trans-unit>
        <trans-unit id="de3b30d295ded9bca000cfefdd9403aa187ece06" translate="yes">
          <source>Trigger a change detection cycle for the component.</source>
          <target state="translated">コンポーネントの変更検出サイクルをトリガーします。</target>
        </trans-unit>
        <trans-unit id="9407e89d96626ed5d353629e3f6d9a9d64468166" translate="yes">
          <source>Trigger component destruction.</source>
          <target state="translated">コンポーネントの破壊をトリガーします。</target>
        </trans-unit>
        <trans-unit id="53af3485dc7b16524b04a2e63069b00e185de29e" translate="yes">
          <source>Triggering the animation</source>
          <target state="translated">アニメーションのトリガー</target>
        </trans-unit>
        <trans-unit id="e870e5d23b1facd0b564612cfd9fdd42eb18bc87" translate="yes">
          <source>Triggers a change event by emitting on the &lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;querylist#changes&quot;&gt;changes&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; を発行&lt;/a&gt;することにより、変更イベントをトリガーします。</target>
        </trans-unit>
        <trans-unit id="0ae4d5b42be1c56e1a7225f517e99f471b359dc4" translate="yes">
          <source>Triggers a warning that this input should not be used with reactive forms.</source>
          <target state="translated">この入力をリアクティブフォームで使用してはならないという警告をトリガーします。</target>
        </trans-unit>
        <trans-unit id="5083756d2f83ef32092480b31b3cecd6c6cec6c9" translate="yes">
          <source>Triggers the event by its name if there is a corresponding listener in the element's &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; collection. The second parameter is the &lt;em&gt;event object&lt;/em&gt; expected by the handler. See &lt;a href=&quot;testing#trigger-event-handler&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">要素の &lt;code&gt;&lt;a href=&quot;../api/core/debugnode#listeners&quot;&gt;listeners&lt;/a&gt;&lt;/code&gt; コレクションに対応するリスナーがある場合、名前でイベントをトリガーします。 2番目のパラメーターは、ハンドラーが予期する&lt;em&gt;イベントオブジェクト&lt;/em&gt;です。 &lt;a href=&quot;testing#trigger-event-handler&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a10c269fb7def350ff63b23aa2d28b00775e9f1c" translate="yes">
          <source>Trim the value (remove whitespace) and make sure it&amp;rsquo;s a minimum length.</source>
          <target state="translated">値をトリム（空白を削除）し、最小長であることを確認します。</target>
        </trans-unit>
        <trans-unit id="3cc21cf3f8e5867393f5bad054b9c40301206223" translate="yes">
          <source>Trims all whitespaces at the beginning and the end of a template.</source>
          <target state="translated">テンプレートの最初と最後のすべての空白を削除します。</target>
        </trans-unit>
        <trans-unit id="f43741667aa518662d503fc2ce7e1d14354c3bec" translate="yes">
          <source>True if at least one navigation event has occurred, false otherwise.</source>
          <target state="translated">少なくとも1つのナビゲーションイベントが発生した場合はtrue、そうでない場合はfalse。</target>
        </trans-unit>
        <trans-unit id="9d796fe59ff2474ea78a1c50451058993aa79f3b" translate="yes">
          <source>True if the Service Worker is enabled (supported by the browser and enabled via &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">Service Workerが有効になっている場合（ブラウザでサポートされ、 &lt;code&gt;&lt;a href=&quot;serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; を介して有効になっている場合）、True</target>
        </trans-unit>
        <trans-unit id="5f972cc15ad49cf4f212b677b7dc7d8b9251db55" translate="yes">
          <source>True if the control has not been marked as touched</source>
          <target state="translated">コントロールがタッチ済みとしてマークされていない場合はTrue</target>
        </trans-unit>
        <trans-unit id="dcc1b1c1aa85f2da9a269e743dc502fd0749e99e" translate="yes">
          <source>True if the control is marked as &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">コントロールが &lt;code&gt;touched&lt;/code&gt; としてマークされている場合はTrue。</target>
        </trans-unit>
        <trans-unit id="60e52a2ca105703a08ce2fd47ddd086d17018855" translate="yes">
          <source>True if this query is optional, false if it is required. Default is false. A required query throws an error if no elements are retrieved when the query is executed. An optional query does not.</source>
          <target state="translated">このクエリがオプションの場合はtrue、必要な場合はfalse。 デフォルトはfalseです。 クエリの実行時に要素が取得されない場合、必要なクエリはエラーをスローします。 オプションのクエリはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="06b3634a6e2a35bbc0dd073c9b175791f2522293" translate="yes">
          <source>True to include an anchor fragment in the path.</source>
          <target state="translated">アンカーフラグメントをパスに含める場合はTrue。</target>
        </trans-unit>
        <trans-unit id="1ab65405badb72e5749b47e365af2b6aaf2cb192" translate="yes">
          <source>True to preserve or false to remove potentially superfluous whitespace characters from the compiled template. Whitespace characters are those matching the &lt;code&gt;\s&lt;/code&gt; character class in JavaScript regular expressions. Default is false, unless overridden in compiler options.</source>
          <target state="translated">保存する場合はtrue、コンパイル済みテンプレートから潜在的に不要な空白文字を削除する場合はfalse。 空白文字は、JavaScriptの正規表現の &lt;code&gt;\s&lt;/code&gt; 文字クラスに一致する文字です。 コンパイラオプションでオーバーライドされない限り、デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="c19e0cdc9c33c77f5adf440dc15998ff2a61e211" translate="yes">
          <source>Trusting safe values</source>
          <target state="translated">安全な価値を信頼する</target>
        </trans-unit>
        <trans-unit id="beb70957ec5482b78d59548c5c70483736e2c218" translate="yes">
          <source>Try editing any of the project files. Save and refresh the browser to see the changes.</source>
          <target state="translated">プロジェクトファイルを編集してみてください。 ブラウザを保存して更新し、変更を確認します。</target>
        </trans-unit>
        <trans-unit id="7ddd66b689c9370a62daee26be57fd02d84a295b" translate="yes">
          <source>Try it</source>
          <target state="translated">それを試してみてください</target>
        </trans-unit>
        <trans-unit id="62e11793c0386a1bddb0a86fda7f464e7c562e11" translate="yes">
          <source>Try it by adding the following directive binding variations to the &lt;code&gt;AppComponent&lt;/code&gt; template:</source>
          <target state="translated">次のディレクティブバインディングバリエーションを &lt;code&gt;AppComponent&lt;/code&gt; テンプレートに追加して試してください。</target>
        </trans-unit>
        <trans-unit id="c8e038028e411ef9a23f6b3c0e6a383591225562" translate="yes">
          <source>Try it by clicking on this &lt;span&gt;live example link&lt;/span&gt;.</source>
          <target state="translated">この&lt;span&gt;実例のリンクを&lt;/span&gt;クリックして試してください。</target>
        </trans-unit>
        <trans-unit id="55391745de289ddef8d65ec34b574ce002c5003d" translate="yes">
          <source>Try it out. Because the array has four items, the message should appear. Go back into &lt;code&gt;app.component.ts&lt;/code&gt; and delete or comment out one of the elements from the heroes array. The browser should refresh automatically and the message should disappear.</source>
          <target state="translated">やってみよう。 配列には4つの項目があるため、メッセージが表示されます。 &lt;code&gt;app.component.ts&lt;/code&gt; に戻り、heroes配列から要素の1つを削除またはコメントアウトします。 ブラウザが自動的に更新され、メッセージが消えます。</target>
        </trans-unit>
        <trans-unit id="8d0b56cf0fa53f627bd12835d235587765053dc2" translate="yes">
          <source>Try one of the &quot;3G&quot; speeds.</source>
          <target state="translated">「3G」速度のいずれかを試してください。</target>
        </trans-unit>
        <trans-unit id="dc1ea3e260d075f0697ffb4ad683deb138ba7e53" translate="yes">
          <source>Try setting it to &lt;code&gt;'prefix'&lt;/code&gt; then click the &lt;code&gt;Go to sidekicks&lt;/code&gt; button. Remember that's a bad URL and you should see the &quot;Page not found&quot; page. Instead, you're still on the &quot;Heroes&quot; page. Enter a bad URL in the browser address bar. You're instantly re-routed to &lt;code&gt;/heroes&lt;/code&gt;. &lt;em&gt;Every&lt;/em&gt; URL, good or bad, that falls through to &lt;em&gt;this&lt;/em&gt; route definition will be a match.</source>
          <target state="translated">&lt;code&gt;'prefix'&lt;/code&gt; 設定してから、 「 &lt;code&gt;Go to sidekicks&lt;/code&gt; 」ボタンをクリックしてください。 これは不適切なURLであり、「ページが見つかりません」ページが表示されるはずです。 代わりに、あなたはまだ「ヒーロー」ページにいます。 ブラウザのアドレスバーに不正なURLを入力します。 すぐに &lt;code&gt;/heroes&lt;/code&gt; 転送されます。 &lt;em&gt;この&lt;/em&gt;ルート定義に至る&lt;em&gt;すべての&lt;/em&gt; URL（良いか悪いか）は一致します。</target>
        </trans-unit>
        <trans-unit id="ae0be3b047c4a387d93f02977418e5b637e0c752" translate="yes">
          <source>Try the &quot;Notify Me&quot; button:</source>
          <target state="translated">「通知」ボタンを試してください。</target>
        </trans-unit>
        <trans-unit id="cd0d3f4d9f412d033eddde43a048eb8599b4eed2" translate="yes">
          <source>Try the .</source>
          <target state="translated">をお試しください。</target>
        </trans-unit>
        <trans-unit id="f3928bcaacca2f8a9d4e72ea48d9fc537bfb74d8" translate="yes">
          <source>Try the &lt;span&gt;Reactive Forms live-example&lt;/span&gt;.</source>
          <target state="translated">&lt;span&gt;Reactive Forms live-exampleを&lt;/span&gt;試してください。</target>
        </trans-unit>
        <trans-unit id="1a5c2c2df13a5a08f5ec5e0c77a14b60e0a6f624" translate="yes">
          <source>Try the change detection profiler &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; then hit Enter.</source>
          <target state="translated">変更検出プロファイラー &lt;code&gt;ng.profiler.timeChangeDetection()&lt;/code&gt; 試してからEnterを押します。</target>
        </trans-unit>
        <trans-unit id="cc82bb7378a7738346274197a65346c4cb1c2791" translate="yes">
          <source>Try the live example.</source>
          <target state="translated">実際の例を試してください。</target>
        </trans-unit>
        <trans-unit id="6f3deed36905b6ad108038ee3fade698b4b61902" translate="yes">
          <source>Try to minimize the heading depth, preferably only two. But more headings, such as this one, are permitted if they make sense.</source>
          <target state="translated">見出しの深さ、できれば2つだけを最小化してください。 しかし、意味があれば、この見出しなどの見出しを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="95d44839b57ad612170554fef51a66c4c2b769e8" translate="yes">
          <source>Try to update webdriver.</source>
          <target state="translated">Webdriverを更新してみてください。</target>
        </trans-unit>
        <trans-unit id="b44892b7f81948b449b1fceb43f8115ba5ff108b" translate="yes">
          <source>Tu</source>
          <target state="translated">Tu</target>
        </trans-unit>
        <trans-unit id="529541bb390c76152e313351d89de3cd30a1c4bd" translate="yes">
          <source>Tue</source>
          <target state="translated">Tue</target>
        </trans-unit>
        <trans-unit id="42e43b612a5dfae57ddf5929f0fb945ae83cbf61" translate="yes">
          <source>Tuesday</source>
          <target state="translated">Tuesday</target>
        </trans-unit>
        <trans-unit id="db9100479b1bab146b0529edf56cd2ecbd2b852d" translate="yes">
          <source>Turns an array of provider definitions into an array of resolved providers.</source>
          <target state="translated">プロバイダー定義の配列を解決済みプロバイダーの配列に変換します。</target>
        </trans-unit>
        <trans-unit id="7a8c0b3d0dcf9c1d0944ace8b26766b7619fce7b" translate="yes">
          <source>Turns the li element and its contents into a template, and uses that to instantiate a view for each item in list.</source>
          <target state="translated">li要素とそのコンテンツをテンプレートに変換し、それを使用してリスト内の各アイテムのビューをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="67bfe76e19af4ce403f2340d240f7abfa0a85e7e" translate="yes">
          <source>Two injector hierarchies</source>
          <target state="translated">2つのインジェクター階層</target>
        </trans-unit>
        <trans-unit id="5af8d4f5f9dae7eb59bd4d8f4f973fff3523e350" translate="yes">
          <source>Two of the three fields on this form are required. Required fields have a green bar on the left to make them easy to spot.</source>
          <target state="translated">このフォームの3つのフィールドのうち2つは必須です。 必須フィールドには、見つけやすいように左側に緑色のバーがあります。</target>
        </trans-unit>
        <trans-unit id="b26194f02c2a9055521cad644dadbcf22c29b12c" translate="yes">
          <source>Two older properties are still available. They are less capable than their replacements, discouraged, and may be deprecated in a future Angular version.</source>
          <target state="translated">2つの古いプロパティが引き続き使用可能です。 それらは代替品よりも能力が低く、推奨されておらず、将来のAngularバージョンでは廃止される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c8403b3967903a37a646651f5a30b179b5958e53" translate="yes">
          <source>Two types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error &lt;em&gt;responses&lt;/em&gt;.</source>
          <target state="translated">2種類のエラーが発生する可能性があります。 サーバーバックエンドが要求を拒否し、404や500などのステータスコードを含むHTTP応答を返す場合があります。これらはエラー&lt;em&gt;応答&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="ee50a3e68cf100c0537278aede679f485d09b355" translate="yes">
          <source>Two-way</source>
          <target state="translated">Two-way</target>
        </trans-unit>
        <trans-unit id="76e6c5bfb6eaf94684d63dcc6574a58b41d951d1" translate="yes">
          <source>Two-way binding</source>
          <target state="translated">双方向バインディング</target>
        </trans-unit>
        <trans-unit id="a02bb0a1df250e5934cdce63455e1ad4bc4637b6" translate="yes">
          <source>Two-way binding &lt;code&gt;[(...)]&lt;/code&gt;</source>
          <target state="translated">双方向バインディング &lt;code&gt;[(...)]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ee8d72f683e98e5e49284a4dbb3c6a8dac3d915" translate="yes">
          <source>Two-way binding does two things:</source>
          <target state="translated">双方向バインディングは、2つのことを行います。</target>
        </trans-unit>
        <trans-unit id="f559c791fe1735111c9bc3f8318c26c9efdb1820" translate="yes">
          <source>Two-way binding gives your app a way to share data between a component class and its template.</source>
          <target state="translated">双方向バインディングにより、アプリはコンポーネントクラスとそのテンプレート間でデータを共有できます。</target>
        </trans-unit>
        <trans-unit id="03cb506ca909370dd733aa2c43253165731e42ab" translate="yes">
          <source>Two-way binding in forms</source>
          <target state="translated">フォームの双方向バインディング</target>
        </trans-unit>
        <trans-unit id="5d24cacbc734efe855956d91ed8e0797e5f736ba" translate="yes">
          <source>Two-way data binding (used mainly in &lt;a href=&quot;forms&quot;&gt;template-driven forms&lt;/a&gt;) combines property and event binding in a single notation. Here's an example from the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template that uses two-way data binding with the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">双方向データバインディング（主に&lt;a href=&quot;forms&quot;&gt;テンプレートドリブンフォームで使用&lt;/a&gt; ）は、プロパティとイベントバインディングを1つの表記法で結合します。 以下は、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブで双方向データバインディングを使用する &lt;code&gt;HeroDetailComponent&lt;/code&gt; テンプレートの例です。</target>
        </trans-unit>
        <trans-unit id="06f67c15fc229f1a2bb0b3b0ebc852bfedb0de8e" translate="yes">
          <source>Two-way data binding with &lt;code&gt;ngModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; を使用した双方向データバインディング</target>
        </trans-unit>
        <trans-unit id="6d973b2b83b53e6c30f5b13acc68a0a0c71e118f" translate="yes">
          <source>Two-way data binding with ngModel</source>
          <target state="translated">ngModelを使用した双方向データバインディング</target>
        </trans-unit>
        <trans-unit id="f52bdefafb9c2ca15e12f66ca83326ece8bda8ce" translate="yes">
          <source>Two-way sequence: &lt;em&gt;view-to-source-to-view&lt;/em&gt;</source>
          <target state="translated">双方向シーケンス： &lt;em&gt;ビューからソース、ビュー&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="abb237ba4f86298e209fd0cde19460f30c5121a4" translate="yes">
          <source>Type &lt;code&gt;ng.&lt;/code&gt; (usually the console will show auto-complete suggestion)</source>
          <target state="translated">&lt;code&gt;ng.&lt;/code&gt; 入力します。 （通常、コンソールには自動補完候補が表示されます）</target>
        </trans-unit>
        <trans-unit id="00ec381921f624d45bbd03504823d08111458d72" translate="yes">
          <source>Type annotations can be gradually added to existing functions and variables to pin down their types and get benefits like build-time error checking, great autocompletion support and inline documentation.</source>
          <target state="translated">型注釈を既存の関数と変数に徐々に追加して、型を特定し、ビルド時のエラーチェック、優れたオートコンプリートのサポート、インラインドキュメントなどの利点を得ることができます。</target>
        </trans-unit>
        <trans-unit id="35df57064639add6482ba283504c0b41a4d923e6" translate="yes">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">さまざまな種類の &lt;code&gt;&lt;a href=&quot;http/httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; の型列挙。</target>
        </trans-unit>
        <trans-unit id="67608246c1a184d4c40c268ca1fdc639f618fa7c" translate="yes">
          <source>Type enumeration for the different kinds of &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">さまざまな種類の &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; の型列挙。</target>
        </trans-unit>
        <trans-unit id="57c55c58c8644f8a5cbf6770552ae7125d3582e3" translate="yes">
          <source>Type narrowing</source>
          <target state="translated">タイプの絞り込み</target>
        </trans-unit>
        <trans-unit id="95d67b98d7690612e1e13d9a3e9a1be2da8d088a" translate="yes">
          <source>Type of the response, narrowed to either the full response or the header.</source>
          <target state="translated">応答のタイプ。完全な応答またはヘッダーに絞り込まれています。</target>
        </trans-unit>
        <trans-unit id="c05540b14b3733e314b2c94793826ae9c2b0627e" translate="yes">
          <source>Type something in the input box, and watch the display update with each keystroke.</source>
          <target state="translated">入力ボックスに何かを入力し、各キーストロークで表示が更新されるのを確認します。</target>
        </trans-unit>
        <trans-unit id="33ab71a8dcc6216b348bea2620429ad622b3147d" translate="yes">
          <source>Type the &lt;code&gt;$event&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 入力します</target>
        </trans-unit>
        <trans-unit id="01e12f16a8da430c9b64b2d92b35b38ac6541548" translate="yes">
          <source>Type used for modifications to metadata</source>
          <target state="translated">メタデータの変更に使用されるタイプ</target>
        </trans-unit>
        <trans-unit id="5173fdf6f5703224da499d4346fe617ae8193603" translate="yes">
          <source>Type-ahead suggestions</source>
          <target state="translated">先行入力の提案</target>
        </trans-unit>
        <trans-unit id="9c733ffadf4f948ba611c69673474803d64d1601" translate="yes">
          <source>TypeDecorator</source>
          <target state="translated">TypeDecorator</target>
        </trans-unit>
        <trans-unit id="e6711bda99893016ef166d44941fe0aeec10d722" translate="yes">
          <source>TypeProvider</source>
          <target state="translated">TypeProvider</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="eea2f4b377967e9066abaa29b6c1756fe6ff90ed" translate="yes">
          <source>TypeScript Configuration</source>
          <target state="translated">TypeScript設定</target>
        </trans-unit>
        <trans-unit id="d08f0fbcc73c7306dc8d1fd2df1b684771e05b98" translate="yes">
          <source>TypeScript Typings</source>
          <target state="translated">TypeScriptタイピング</target>
        </trans-unit>
        <trans-unit id="568ece999d38f89aa19bccbc22c354f6f68a64b1" translate="yes">
          <source>TypeScript configuration In the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;compilerOptions&lt;/code&gt; section determines the ECMAScript target version that the code is compiled to. Modern browsers support ES2015 natively, while ES5 is more commonly used to support legacy browsers.</source>
          <target state="translated">TypeScript構成TypeScript構成ファイル &lt;code&gt;tsconfig.json&lt;/code&gt; では、 &lt;code&gt;compilerOptions&lt;/code&gt; セクションのターゲットが、コードがコンパイルされるECMAScriptターゲットバージョンを決定します。 最新のブラウザーはES2015をネイティブでサポートしますが、ES5はレガシーブラウザーをサポートするためにより一般的に使用されます。</target>
        </trans-unit>
        <trans-unit id="b1e9557f6d0130ab631bf37ddceaa7ef43c0683e" translate="yes">
          <source>TypeScript configuration for Web Worker modules.</source>
          <target state="translated">Web WorkerモジュールのTypeScript構成。</target>
        </trans-unit>
        <trans-unit id="ffe80e00ee1ac5833b065ce121ce10c3b973c059" translate="yes">
          <source>TypeScript definition files for 3rd party libraries such as Jasmine and Node.js.</source>
          <target state="translated">JasmineやNode.jsなどのサードパーティライブラリのTypeScript定義ファイル。</target>
        </trans-unit>
        <trans-unit id="0b3cb1f49429cb05d8a3b0bcacdfe5ff715b318e" translate="yes">
          <source>TypeScript developers disagree about whether the &lt;code&gt;noImplicitAny&lt;/code&gt; flag should be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. There is no correct answer and you can change the flag later. But your choice now can make a difference in larger projects, so it merits discussion.</source>
          <target state="translated">TypeScript開発者は、 &lt;code&gt;noImplicitAny&lt;/code&gt; フラグを &lt;code&gt;true&lt;/code&gt; にするか &lt;code&gt;false&lt;/code&gt; にするかについて意見が分かれています 。 正解はありません。フラグは後で変更できます。 しかし、大規模なプロジェクトでは、あなたの選択が違いを生む可能性があるため、議論に値します。</target>
        </trans-unit>
        <trans-unit id="2ac9ee6e703b108a7d6fb03a16a6d571742ddf64" translate="yes">
          <source>TypeScript execution environment and REPL for Node.js.</source>
          <target state="translated">Node.jsのTypeScript実行環境とREPL。</target>
        </trans-unit>
        <trans-unit id="e285eb073cfe4ca1656c07087772b6ee1156351a" translate="yes">
          <source>TypeScript includes a special declaration file called &lt;code&gt;lib.d.ts&lt;/code&gt;. This file contains the ambient declarations for various common JavaScript constructs present in JavaScript runtimes and the DOM.</source>
          <target state="translated">TypeScriptには &lt;code&gt;lib.d.ts&lt;/code&gt; という特別な宣言ファイルが含まれています。 このファイルには、JavaScriptランタイムおよびDOMに存在するさまざまな一般的なJavaScriptコンストラクトのアンビエント宣言が含まれています。</target>
        </trans-unit>
        <trans-unit id="d17e05e344ecb4e3225929fb6a865b40d4814eb9" translate="yes">
          <source>TypeScript is a primary language for Angular application development. It is a superset of JavaScript with design-time support for type safety and tooling.</source>
          <target state="translated">TypeScriptは、Angularアプリケーション開発の主要言語です。 これは、型安全性とツールの設計時サポートを備えたJavaScriptのスーパーセットです。</target>
        </trans-unit>
        <trans-unit id="2c8995564b3de9df5c51483595738fe4422b297b" translate="yes">
          <source>TypeScript is the preferred language for Angular development. Read more about TypeScript at &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.org&lt;/a&gt;.</source>
          <target state="translated">TypeScriptは、Angular開発の優先言語です。 &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;typescriptlang.orgで&lt;/a&gt; TypeScriptの詳細を読んでください。</target>
        </trans-unit>
        <trans-unit id="13b49b13fb502567852c984e23e397ba1fe80b3a" translate="yes">
          <source>TypeScript understands ambient types so you don't import them. The Angular compiler does not understand a type that you neglect to export or import.</source>
          <target state="translated">TypeScriptはアンビエントタイプを理解するため、インポートしません。 Angularコンパイラは、エクスポートまたはインポートを怠るタイプを理解しません。</target>
        </trans-unit>
        <trans-unit id="77e137f60887b3a3c13ebdb09dee2d2b67d890c4" translate="yes">
          <source>TypeScript will prevent you from setting &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; readonly properties.</source>
          <target state="translated">TypeScriptは、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; の読み取り専用プロパティを設定できないようにします。</target>
        </trans-unit>
        <trans-unit id="717ede79628ca336772d228c8b05e09de2a3a0c2" translate="yes">
          <source>TypeScript-aware editors leverage these same definition files to display type information about library features.</source>
          <target state="translated">TypeScript対応のエディターは、これらの同じ定義ファイルを活用して、ライブラリー機能に関するタイプ情報を表示します。</target>
        </trans-unit>
        <trans-unit id="7118d9e8c875a30ba644adcfe209053d423d1da0" translate="yes">
          <source>Typed Array</source>
          <target state="translated">型付き配列</target>
        </trans-unit>
        <trans-unit id="7ab3c88469253783493694d6963d80d7a8308f54" translate="yes">
          <source>Typed according to the expected type of the response.</source>
          <target state="translated">予想される応答のタイプに従って入力されます。</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="c713e3cd5c50ec234c9ce6d04250d694a2a4d577" translate="yes">
          <source>Types defined in a &lt;code&gt;@types/&lt;/code&gt; package for a library installed into the workspace are automatically added to the TypeScript configuration for the project that uses that library. TypeScript looks for types in the &lt;code&gt;node_modules/@types&lt;/code&gt; folder by default, so you don't have to add each type package individually.</source>
          <target state="translated">ワークスペースにインストールされたライブラリの &lt;code&gt;@types/&lt;/code&gt; パッケージで定義されたタイプは、そのライブラリを使用するプロジェクトのTypeScript構成に自動的に追加されます。 TypeScriptはデフォルトで &lt;code&gt;node_modules/@types&lt;/code&gt; フォルダーでタイプを検索するため、各タイプパッケージを個別に追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="12392cbc3086f77e04a6c62a73c887b3f9c633d6" translate="yes">
          <source>Types of Feature Modules</source>
          <target state="translated">機能モジュールの種類</target>
        </trans-unit>
        <trans-unit id="118122abcc89881e0578f9aef369355356986b9f" translate="yes">
          <source>Types of NgModules</source>
          <target state="translated">NgModuleの種類</target>
        </trans-unit>
        <trans-unit id="11fe3760894bbd3efef56cd08f43a7f909233a1d" translate="yes">
          <source>Types of modifiers</source>
          <target state="translated">修飾子の種類</target>
        </trans-unit>
        <trans-unit id="0ef8a95f38c50052d0013209588f9bd78801e33d" translate="yes">
          <source>Typically new embedded views are attached to the view container of this location, but in advanced use-cases, the view can be attached to a different container while keeping the data-binding and injection context from the original location.</source>
          <target state="translated">通常、新しい埋め込みビューはこの場所のビューコンテナにアタッチされますが、高度なユースケースでは、元の場所からのデータバインディングとインジェクションコンテキストを維持しながら、ビューを別のコンテナにアタッチできます。</target>
        </trans-unit>
        <trans-unit id="2c7b40120f45df1933863f5ac01d78ac42ee438a" translate="yes">
          <source>Typically, animations involve multiple style &lt;em&gt;transformations&lt;/em&gt; over time. An HTML element can move, change color, grow or shrink, fade, or slide off the page. These changes can occur simultaneously or sequentially. You can control the timing of each transformation.</source>
          <target state="translated">通常、アニメーションには時間の経過に伴う複数のスタイル&lt;em&gt;変換が含ま&lt;/em&gt;れます。 HTML要素は、移動、色の変更、拡大または縮小、フェード、またはページからのスライドが可能です。 これらの変更は、同時にまたは連続して発生する可能性があります。 各変換のタイミングを制御できます。</target>
        </trans-unit>
        <trans-unit id="b5fb32f38245ff9f2d99b2dd935857d879ebced7" translate="yes">
          <source>Typically, the name of a generated artifact can be given as an argument to the command or specified with the --name option.</source>
          <target state="translated">通常、生成されたアーティファクトの名前は、コマンドの引数として指定するか、-nameオプションで指定できます。</target>
        </trans-unit>
        <trans-unit id="b95554d848ef81d79b0b709dc7f5aaeb34a12474" translate="yes">
          <source>Typically, you add a TypeScript configuration file called &lt;code&gt;tsconfig.json&lt;/code&gt; to your project to guide the compiler as it generates JavaScript files.</source>
          <target state="translated">通常、 &lt;code&gt;tsconfig.json&lt;/code&gt; というTypeScript構成ファイルをプロジェクトに追加して、JavaScriptファイルを生成するコンパイラーをガイドします。</target>
        </trans-unit>
        <trans-unit id="a0bd1a75c0172c79f7c9ff6dc164b3a599561a53" translate="yes">
          <source>Typing the event object reveals a significant objection to passing the entire DOM event into the method: the component has too much awareness of the template details. It can't extract information without knowing more than it should about the HTML implementation. That breaks the separation of concerns between the template (&lt;em&gt;what the user sees&lt;/em&gt;) and the component (&lt;em&gt;how the application processes user data&lt;/em&gt;).</source>
          <target state="translated">イベントオブジェクトを入力すると、DOMイベント全体をメソッドに渡すことに対する重大な異議が明らかになります。コンポーネントはテンプレートの詳細を認識しすぎています。 HTMLの実装について知っておく必要がある以上の情報を抽出することはできません。 これにより、テンプレート（ &lt;em&gt;ユーザーに表示されるもの&lt;/em&gt; ）とコンポーネント（ &lt;em&gt;アプリケーションがユーザーデータを処理する方法&lt;/em&gt; ）間の関心の分離が破ら&lt;em&gt;れます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="480af6c7beed3c898f5f1f02a7bf65dedf1b38cc" translate="yes">
          <source>Typings for custom elements</source>
          <target state="translated">カスタム要素のタイピング</target>
        </trans-unit>
        <trans-unit id="20bdf90100bc0696258702c718f92a1b02cab2b8" translate="yes">
          <source>UPPER_UNDERSCORE_CASE (or UPPER_SNAKE_CASE, or SCREAMING_SNAKE_CASE): Traditional for constants (acceptable, but prefer camelCase). Upper snake case uses words in all capital letters connected with underscores. For example, &quot;FIX_ME&quot;.</source>
          <target state="translated">UPPER_UNDERSCORE_CASE（またはUPPER_SNAKE_CASE、またはSCREAMING_SNAKE_CASE）：従来の定数（許容されますが、camelCaseを好む）。 上部のスネークケースは、アンダースコアで接続されたすべての大文字の単語を使用します。 たとえば、「FIX_ME」。</target>
        </trans-unit>
        <trans-unit id="a27c9c50aeeb496cbd6ae8eb92bcc77112bfe9fd" translate="yes">
          <source>URL of the resource retrieved, or null if not available.</source>
          <target state="translated">取得したリソースのURL。使用できない場合はnull。</target>
        </trans-unit>
        <trans-unit id="f65f44308f1ade7cb98e9a6130f17b75f1c7965f" translate="yes">
          <source>URL path to normalize.</source>
          <target state="translated">正規化するURLパス。</target>
        </trans-unit>
        <trans-unit id="c774e36c8a233fe47b885d57e6f9250be88a291c" translate="yes">
          <source>URL query strings</source>
          <target state="translated">URLクエリ文字列</target>
        </trans-unit>
        <trans-unit id="ab8c3d3d9bc2c2c289a7a884d43b797a116cdf17" translate="yes">
          <source>URL string</source>
          <target state="translated">URL文字列</target>
        </trans-unit>
        <trans-unit id="6415e7db453017765698b94a474b0ba310523c13" translate="yes">
          <source>URL string.</source>
          <target state="translated">URL文字列。</target>
        </trans-unit>
        <trans-unit id="6229662eaa903e67f2ed0f1353e8aa463aa6f79f" translate="yes">
          <source>URL where files will be deployed.</source>
          <target state="translated">ファイルが展開されるURL。</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="82ec40ec287dfe6afdf2c04f8ac45df9a5b41f73" translate="yes">
          <source>Uglification: rewrites code to use short, cryptic variable and function names.</source>
          <target state="translated">gl化：コードを書き直して、短い暗号の変数名と関数名を使用します。</target>
        </trans-unit>
        <trans-unit id="dec6154649e20b8a4f868f22a0c2826a4a662d9a" translate="yes">
          <source>Ugly, long section header anchors</source>
          <target state="translated">Uい長いセクションヘッダーアンカー</target>
        </trans-unit>
        <trans-unit id="3698e121e629257a193cc1ee0ba5707f90dd1040" translate="yes">
          <source>UiArguments</source>
          <target state="translated">UiArguments</target>
        </trans-unit>
        <trans-unit id="0368218af0bd6062b199bada30a6e4035b16a7cb" translate="yes">
          <source>Unable to find a parent by its base class</source>
          <target state="translated">基本クラスで親を見つけることができません</target>
        </trans-unit>
        <trans-unit id="0585362025afaad2cb556c1470ca13de2ec4b0c6" translate="yes">
          <source>Under the &lt;code&gt;projects/&lt;/code&gt; folder, the &lt;code&gt;my-lib&lt;/code&gt; folder contains your library code.</source>
          <target state="translated">&lt;code&gt;projects/&lt;/code&gt; フォルダーの下の &lt;code&gt;my-lib&lt;/code&gt; フォルダーにライブラリコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="4b9ec3e5288ad1a146764809c08b172bb0ce4e69" translate="yes">
          <source>Underlying strategy used by the NgElement to create/destroy the component and react to input changes.</source>
          <target state="translated">コンポーネントを作成/破棄し、入力の変更に対応するためにNgElementによって使用される基本的な戦略。</target>
        </trans-unit>
        <trans-unit id="afd606b1b8fa2ecceb75d550cab8b8e4f51e46bf" translate="yes">
          <source>Understanding the idea of the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; demarcation is especially significant when you configure services in the component class.</source>
          <target state="translated">コンポーネントクラスでサービスを構成する場合、 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 境界の概念を理解することは特に重要です。</target>
        </trans-unit>
        <trans-unit id="4f597440e2efa26501d9e6fdf63a407e19ac4158" translate="yes">
          <source>Understanding the underlying logical structure of the Angular template will give you a foundation for configuring services and in turn control their visibility.</source>
          <target state="translated">Angularテンプレートの基礎となる論理構造を理解すると、サービスを構成し、その可視性を制御するための基盤が得られます。</target>
        </trans-unit>
        <trans-unit id="824952b55c3b4916ed165e11642a01333e88585f" translate="yes">
          <source>Understanding this component requires only the Angular concepts covered in previous pages.</source>
          <target state="translated">このコンポーネントを理解するには、前のページで説明したAngularの概念のみが必要です。</target>
        </trans-unit>
        <trans-unit id="b0c0452cb24336e8190f9828a028e109b51bace3" translate="yes">
          <source>Unfortunately, &lt;code&gt;ngOnInit&lt;/code&gt; is only called once per component instantiation. You need a way to detect when the route parameters change from &lt;em&gt;within the same instance&lt;/em&gt;. The observable &lt;code&gt;paramMap&lt;/code&gt; property handles that beautifully.</source>
          <target state="translated">残念ながら、 &lt;code&gt;ngOnInit&lt;/code&gt; はコンポーネントのインスタンス化ごとに1回しか呼び出されません。 ルート&lt;em&gt;インスタンスが同じインスタンス内&lt;/em&gt;からいつ変更されるかを検出する方法が必要です。 &lt;code&gt;paramMap&lt;/code&gt; 可能なparamMapプロパティはそれを美しく処理します。</target>
        </trans-unit>
        <trans-unit id="d3ef861886f3ab5ce3796bed96c86f8269cc8b32" translate="yes">
          <source>Unfortunately, Angular cannot inject the &lt;code&gt;HeroService&lt;/code&gt; directly into the base class. You must provide the &lt;code&gt;HeroService&lt;/code&gt; again for &lt;em&gt;this&lt;/em&gt; component, then pass it down to the base class inside the constructor.</source>
          <target state="translated">残念ながら、Angularは &lt;code&gt;HeroService&lt;/code&gt; を基本クラスに直接注入できません。 &lt;em&gt;この&lt;/em&gt;コンポーネントに &lt;code&gt;HeroService&lt;/code&gt; を再度提供し、コンストラクター内の基本クラスに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="1139beaeaa7d4f3a71b279c04ed1135ac0675787" translate="yes">
          <source>Unfortunately, AngularJS dependencies are not automatically available to Angular components. You must upgrade this service via a &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;factory provider&lt;/a&gt; to make &lt;code&gt;$routeParams&lt;/code&gt; an Angular injectable. Do that in a new file called &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; and import it in &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">残念ながら、AngularJSの依存関係は、Angularコンポーネントでは自動的に利用できません。 &lt;code&gt;$routeParams&lt;/code&gt; をAngular インジェクタブルにするには、 &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;ファクトリプロバイダー&lt;/a&gt;を介してこのサービスをアップグレードする必要があります。 &lt;code&gt;ajs-upgraded-providers.ts&lt;/code&gt; という新しいファイルでそれを &lt;code&gt;app.module.ts&lt;/code&gt; 、 app.module.tsにインポートします ：</target>
        </trans-unit>
        <trans-unit id="4e7ab2a4cdcc53a9daa1be69012bf4487cc99281" translate="yes">
          <source>Unfortunately, it's easy to mistakenly create invalid JSON that way. The preferred way is to create a JSON partial file with the fragment you want to display.</source>
          <target state="translated">残念ながら、そのようにして誤って無効なJSONを作成するのは簡単です。 推奨される方法は、表示するフラグメントを含むJSON部分ファイルを作成することです。</target>
        </trans-unit>
        <trans-unit id="0867a551d468c9cf54a4c9bf87311fc791c6fddc" translate="yes">
          <source>Unfortunately, this doesn't work. The  confirms that the &lt;code&gt;alex&lt;/code&gt; parameter is null. &lt;em&gt;You cannot inject a parent by its base class.&lt;/em&gt;</source>
          <target state="translated">残念ながら、これは機能しません。 これは、 &lt;code&gt;alex&lt;/code&gt; パラメーターがnullであることを確認します。 &lt;em&gt;基本クラスによって親を注入することはできません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a68c075bb4d2b8034dd50549a21ce7d7c5111785" translate="yes">
          <source>Unhashed content</source>
          <target state="translated">ハッシュ化されていないコンテンツ</target>
        </trans-unit>
        <trans-unit id="4fab6ba13e9a4725c7f55ea2ec290c22e51d62b3" translate="yes">
          <source>Union type for all possible events on the response stream.</source>
          <target state="translated">応答ストリームで発生する可能性があるすべてのイベントのユニオンタイプ。</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes">
          <source>Unit Tests</source>
          <target state="translated">単体テスト</target>
        </trans-unit>
        <trans-unit id="db8942af8190970c5de3a92510cbcaccdbfc8120" translate="yes">
          <source>Unit test file names</source>
          <target state="translated">ユニットテストファイル名</target>
        </trans-unit>
        <trans-unit id="29d1c928f5bc2da434acc08d22662b06b1e6a793" translate="yes">
          <source>Unit tests are located side-by-side with application code where they are easily found, as described in the rules for &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;Organizing Tests&lt;/a&gt;.</source>
          <target state="translated">ユニットテストは、 &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#organizing-tests&quot;&gt;テストの整理&lt;/a&gt;のルールで説明されているように、簡単に見つけられるアプリケーションコードと並んで配置されます。</target>
        </trans-unit>
        <trans-unit id="d02603176f8822a40aaa5b4270e49934a7f83824" translate="yes">
          <source>Universal</source>
          <target state="translated">Universal</target>
        </trans-unit>
        <trans-unit id="aff10513c0d4453b031e927d20f60a376e5f4fbf" translate="yes">
          <source>Universal applications use the Angular &lt;code&gt;platform-server&lt;/code&gt; package (as opposed to &lt;code&gt;platform-browser&lt;/code&gt;), which provides server implementations of the DOM, &lt;code&gt;XMLHttpRequest&lt;/code&gt;, and other low-level features that don't rely on a browser.</source>
          <target state="translated">ユニバーサルアプリケーションは、Angular &lt;code&gt;platform-server&lt;/code&gt; パッケージを使用して（ &lt;code&gt;platform-browser&lt;/code&gt; ではなく）、DOM、 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 、およびブラウザーに依存しない他の低レベル機能のサーバー実装を提供します。</target>
        </trans-unit>
        <trans-unit id="1b3d6e5815238e0752a3fe0b7b98c0c2d1361792" translate="yes">
          <source>Universal in action</source>
          <target state="translated">ユニバーサルインアクション</target>
        </trans-unit>
        <trans-unit id="dfa8fc69d23bd49ebc9a6555c9504f90cf88d7d1" translate="yes">
          <source>Universal template engine</source>
          <target state="translated">ユニバーサルテンプレートエンジン</target>
        </trans-unit>
        <trans-unit id="8a007210f1fae1f94e3d5f08f71db96b4634231f" translate="yes">
          <source>Universal tutorial</source>
          <target state="translated">ユニバーサルチュートリアル</target>
        </trans-unit>
        <trans-unit id="7128eb1919baae98fa34b937a937468e6cef52dd" translate="yes">
          <source>Universal web servers</source>
          <target state="translated">ユニバーサルWebサーバー</target>
        </trans-unit>
        <trans-unit id="4c8eeb97df443eae9c961beeb83622d6ee4e82cc" translate="yes">
          <source>Unless otherwise noted, all code snippets in this page are derived from sample source code located in the &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; directory.</source>
          <target state="translated">特に断りのない限り、このページのすべてのコードスニペットは、 &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; ディレクトリにあるサンプルソースコードから派生しています。</target>
        </trans-unit>
        <trans-unit id="c6cf3859698e15c5299392bec7dbb52c091995b6" translate="yes">
          <source>Unless otherwise noted, patterns use a limited glob format:</source>
          <target state="translated">特に明記しない限り、パターンは制限されたglob形式を使用します。</target>
        </trans-unit>
        <trans-unit id="997a0eb0ed95f2be66009dfc632a3a65cd86399d" translate="yes">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not automatically run a &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$digest()&lt;/a&gt; when changes are detected in the Angular part of the application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; とは異なり、アプリケーションのAngular部分で変更が検出された場合、 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24digest&quot;&gt;$ digest（）を&lt;/a&gt;自動的に実行しません。</target>
        </trans-unit>
        <trans-unit id="a2a526d27ea3191a1868165ff807c75c16ebcdfe" translate="yes">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; does not bootstrap the main AngularJS module inside the &lt;a href=&quot;../../core/ngzone&quot;&gt;Angular zone&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、 &lt;a href=&quot;../../core/ngzone&quot;&gt;Angularゾーン&lt;/a&gt;内のメインのAngularJSモジュールをブートストラップしません。</target>
        </trans-unit>
        <trans-unit id="b662d56928e588ac496f4c10d2baf470830bd906" translate="yes">
          <source>Unlike &lt;em&gt;Hero Detail&lt;/em&gt;, which updates as you type, &lt;em&gt;Crisis Detail&lt;/em&gt; changes are temporary until you either save or discard them by pressing the &quot;Save&quot; or &quot;Cancel&quot; buttons. Both buttons navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; and its list of crises.</source>
          <target state="translated">入力時に更新される&lt;em&gt;ヒーロー詳細&lt;/em&gt;とは異なり、 &lt;em&gt;危機詳細の&lt;/em&gt;変更は、「保存」または「キャンセル」ボタンを押して保存または破棄するまで一時的なものです。 両方のボタンは、 &lt;em&gt;危機センター&lt;/em&gt;とその危機のリストに戻ります。</target>
        </trans-unit>
        <trans-unit id="17cc853061da6fd12dc97c043a57e14e493a031e" translate="yes">
          <source>Unlike JavaScript modules, an NgModule can extend the &lt;em&gt;entire&lt;/em&gt; application with services by adding providers to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; list.</source>
          <target state="translated">JavaScriptモジュールとは異なり、NgModuleはプロバイダーを &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; リストに追加することにより、サービスでアプリケーション&lt;em&gt;全体&lt;/em&gt;を拡張できます。</target>
        </trans-unit>
        <trans-unit id="c061fb170ebb3deb768717f260b104981728d5c0" translate="yes">
          <source>Unlike JavaScript, which uses strict equality, Angular uses loose equality. This means that the empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt; matches 0.</source>
          <target state="translated">厳密な等価性を使用するJavaScriptとは異なり、Angularは緩やかな等価性を使用します。 これは、空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; 0に一致することを意味します。</target>
        </trans-unit>
        <trans-unit id="d12281a35071e2f70968ecec4a88ccf48823d979" translate="yes">
          <source>Unlike asset resources, data requests are not versioned along with the app. They're cached according to manually-configured policies that are more useful for situations such as API requests and other data dependencies.</source>
          <target state="translated">資産リソースとは異なり、データ要求はアプリとともにバージョン管理されません。 APIリクエストやその他のデータ依存性などの状況により役立つ手動設定のポリシーに従ってキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="883ea145ab160985399b62f775b21393220f3076" translate="yes">
          <source>Unlike providers of the modules loaded at launch, providers of lazy-loaded modules are &lt;em&gt;module-scoped&lt;/em&gt;.</source>
          <target state="translated">起動時にロードされるモジュールのプロバイダーとは異なり、遅延ロードされるモジュールのプロバイダーは&lt;em&gt;モジュールスコープ&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="b6f5e363e9f262e106ea06e2709ebaf828ae9100" translate="yes">
          <source>Unlike the &lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;safe navigation operator&lt;/em&gt;&lt;/a&gt;, the non-null assertion operator does not guard against &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Rather, it tells the TypeScript type checker to suspend strict &lt;code&gt;null&lt;/code&gt; checks for a specific property expression.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#safe-navigation-operator&quot;&gt;&lt;em&gt;安全なナビゲーション演算子&lt;/em&gt;&lt;/a&gt;とは異なり、非nullアサーション演算子は &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; に対して保護しません。 むしろ、特定のプロパティ式の厳密な &lt;code&gt;null&lt;/code&gt; チェックを一時停止するようにTypeScriptタイプチェッカーに指示します 。</target>
        </trans-unit>
        <trans-unit id="c84f1525536690954f99a413b23d680798dcaedf" translate="yes">
          <source>Unlike the other scripts that make up an application, such as the Angular app bundle, the service worker is preserved after the user closes the tab. The next time that browser loads the application, the service worker loads first, and can intercept every request for resources to load the application. If the service worker is designed to do so, it can &lt;em&gt;completely satisfy the loading of the application, without the need for the network&lt;/em&gt;.</source>
          <target state="translated">Angularアプリバンドルなど、アプリケーションを構成する他のスクリプトとは異なり、サービスワーカーは、ユーザーがタブを閉じた後も保持されます。 ブラウザが次にアプリケーションをロードするとき、Service Workerは最初にロードし、リソースを要求するすべてのリクエストをインターセプトしてアプリケーションをロードできます。 サービスワーカーがそのように設計されて&lt;em&gt;いる場合、ネットワークを必要とせずに、アプリケーションのロードを完全に満たす&lt;/em&gt;ことができ&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f33036664974b24cb26da8a2ab6ee9afad16fa6" translate="yes">
          <source>Unregisters all applications</source>
          <target state="translated">すべてのアプリケーションの登録を解除します</target>
        </trans-unit>
        <trans-unit id="6d32a4bafd30dfcac7a8a3c144996daff36ea02d" translate="yes">
          <source>Unregisters an application.</source>
          <target state="translated">アプリケーションの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="5ffffa9c4a22117e6f52f99f5cc3c43782a3e756" translate="yes">
          <source>Unstructured</source>
          <target state="translated">Unstructured</target>
        </trans-unit>
        <trans-unit id="834cc0ee6089e541b395509ba562516bcafa78e2" translate="yes">
          <source>Unsubscribe</source>
          <target state="translated">Unsubscribe</target>
        </trans-unit>
        <trans-unit id="36f376c88cfb8d16619510a291258ce8d2da42da" translate="yes">
          <source>Unsubscribe using &lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;swpush#unsubscribe&quot;&gt;SwPush.unsubscribe()&lt;/a&gt;&lt;/code&gt; を使用して登録解除します。</target>
        </trans-unit>
        <trans-unit id="493dc8b26569cd76e59616c46a19c4d0c813beb4" translate="yes">
          <source>Unsubscribes from Service Worker push notifications.</source>
          <target state="translated">Service Workerプッシュ通知の購読を解除します。</target>
        </trans-unit>
        <trans-unit id="df1c180e11f697ae58851be0746d6030d8e54305" translate="yes">
          <source>Unsupported enum member name</source>
          <target state="translated">サポートされていない列挙型メンバー名</target>
        </trans-unit>
        <trans-unit id="97a36dffa889515ec7097ac4311b95fa3f61bf7f" translate="yes">
          <source>Until now, you've defined a single outlet and you've nested child routes under that outlet to group routes together. The router only supports one primary &lt;em&gt;unnamed&lt;/em&gt; outlet per template.</source>
          <target state="translated">これまで、単一のアウトレットを定義し、そのアウトレットの下に子ルートをネストして、ルートをグループ化しました。 ルーターは、テンプレートごとに1つのプライマリ&lt;em&gt;無名&lt;/em&gt;コンセントのみをサポートします。</target>
        </trans-unit>
        <trans-unit id="2de3bb02ea926f63aeba38c756a87b0a2edaeece" translate="yes">
          <source>Unwraps a value from an asynchronous primitive.</source>
          <target state="translated">非同期プリミティブから値をアンラップします。</target>
        </trans-unit>
        <trans-unit id="641990fee74114293b8c76ce49cb7bf399384326" translate="yes">
          <source>Up pops a dialog box.</source>
          <target state="translated">Upはダイアログボックスをポップアップします。</target>
        </trans-unit>
        <trans-unit id="ec67e6bd96103c22a842afec3ac1381cad313045" translate="yes">
          <source>Up to this point, users can view product information, and simulate sharing and being notified about product changes. They cannot, however, buy products.</source>
          <target state="translated">この時点まで、ユーザーは製品情報を表示し、共有をシミュレートし、製品の変更について通知を受けることができます。 ただし、製品を購入することはできません。</target>
        </trans-unit>
        <trans-unit id="4ae15402fdbe9d9effa05f440fbe4ce47c9537f7" translate="yes">
          <source>Update &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; を更新する</target>
        </trans-unit>
        <trans-unit id="496dd8be1173dfef1f30923f2f19597732b208d8" translate="yes">
          <source>Update &lt;code&gt;app.component.html&lt;/code&gt; as follows:</source>
          <target state="translated">次のように &lt;code&gt;app.component.html&lt;/code&gt; を更新します。</target>
        </trans-unit>
        <trans-unit id="e59d7b6b2ead1f0fc0b11cee3e56f5210aeccca4" translate="yes">
          <source>Update checks</source>
          <target state="translated">更新チェック</target>
        </trans-unit>
        <trans-unit id="4e81a8a01dd6e963822eee8752358d7afb76a325" translate="yes">
          <source>Update command reference: &lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; command reference&lt;/a&gt;</source>
          <target state="translated">更新コマンドリファレンス： &lt;a href=&quot;cli/update&quot;&gt;Angular CLI &lt;code&gt;ng update&lt;/code&gt; コマンドリファレンス&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0de3f679ddfbe2c120a92aa34594bc38a0c19fc6" translate="yes">
          <source>Update heroes</source>
          <target state="translated">ヒーローを更新する</target>
        </trans-unit>
        <trans-unit id="a4cb9fff8da5beaccbad71dfaf4739db28f45a5b" translate="yes">
          <source>Update instructions: &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;</source>
          <target state="translated">更新手順： &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular更新ガイド&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aee936d4df69b41b6d8369cb77cf1b581c5a9c3f" translate="yes">
          <source>Update it with the following:</source>
          <target state="translated">以下で更新します。</target>
        </trans-unit>
        <trans-unit id="aae9bb284e5cbcbfe30098c360fd2e5dac2b8f1d" translate="yes">
          <source>Update schematics</source>
          <target state="translated">回路図を更新する</target>
        </trans-unit>
        <trans-unit id="55262abadc993a08fb22cf285edc08f25cb1c76b" translate="yes">
          <source>Update the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of &lt;code&gt;index.html&lt;/code&gt; to include this style sheet:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; の &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; を更新して、このスタイルシートを含めます。</target>
        </trans-unit>
        <trans-unit id="44edb4f17ea3eb3c127f01bb6cec6f3cf223b788" translate="yes">
          <source>Update the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive to assign each index in the &lt;code&gt;products&lt;/code&gt; array to the &lt;code&gt;productId&lt;/code&gt; variable when iterating over the list.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ディレクティブを更新して、リストを反復処理するときに、 &lt;code&gt;products&lt;/code&gt; 配列の各インデックスを &lt;code&gt;productId&lt;/code&gt; 変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="047acd556996d14676e31a2016d5e00031fb3843" translate="yes">
          <source>Update the &lt;code&gt;AuthGuard&lt;/code&gt; to provide a &lt;code&gt;session_id&lt;/code&gt; query that will remain after navigating to another route.</source>
          <target state="translated">&lt;code&gt;AuthGuard&lt;/code&gt; を更新して、別のルートに移動した後に残る &lt;code&gt;session_id&lt;/code&gt; クエリを提供します。</target>
        </trans-unit>
        <trans-unit id="c7af99452e024679731c58a6ce980e61e0f9ce31" translate="yes">
          <source>Update the &lt;code&gt;AuthService&lt;/code&gt; to log in the user:</source>
          <target state="translated">&lt;code&gt;AuthService&lt;/code&gt; を更新して、ユーザーをログインさせます。</target>
        </trans-unit>
        <trans-unit id="17df82461b1d4af3eea1a7f235dffc7a24516cb6" translate="yes">
          <source>Update the &lt;code&gt;HeroService&lt;/code&gt;&lt;code&gt;getHero()&lt;/code&gt; method with the following to make that request:</source>
          <target state="translated">そのリクエストを行うには、 &lt;code&gt;HeroService&lt;/code&gt; &lt;code&gt;getHero()&lt;/code&gt; メソッドを次のように更新します。</target>
        </trans-unit>
        <trans-unit id="456c568fc10b9b5af7828b3954b0630e145d6ff2" translate="yes">
          <source>Update the &lt;code&gt;HeroesComponent&lt;/code&gt; template</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートを更新する</target>
        </trans-unit>
        <trans-unit id="2a0c322c3ec3335c98a6927316b6de2d83201e94" translate="yes">
          <source>Update the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; you renamed after copying it from &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; file. This time, you define &lt;strong&gt;child routes&lt;/strong&gt;&lt;em&gt;within&lt;/em&gt; the parent &lt;code&gt;crisis-center&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; を変更したcrisis-center-routing.module.tsを、 &lt;code&gt;heroes-routing.module.ts&lt;/code&gt; ファイルからコピーした後に更新します。 今回は、親の &lt;code&gt;crisis-center&lt;/code&gt; ルート&lt;em&gt;内に&lt;/em&gt; &lt;strong&gt;子ルート&lt;/strong&gt;を定義します。</target>
        </trans-unit>
        <trans-unit id="e584e483de80651422da868086dd08163863efd3" translate="yes">
          <source>Update the &lt;code&gt;goToHeroes()&lt;/code&gt; method in the &lt;code&gt;hero-detail.component.ts&lt;/code&gt; to navigate back to &lt;code&gt;/superheroes&lt;/code&gt; with the optional route parameters.</source>
          <target state="translated">&lt;code&gt;hero-detail.component.ts&lt;/code&gt; の &lt;code&gt;goToHeroes()&lt;/code&gt; メソッドを更新して、オプションのルートパラメーターを使用して &lt;code&gt;/superheroes&lt;/code&gt; 戻ります。</target>
        </trans-unit>
        <trans-unit id="9ceea5cd899b3e0cb4af6ee69dfa6e2a472df15b" translate="yes">
          <source>Update the &lt;code&gt;gotoCrises&lt;/code&gt; method of the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; to navigate back to the &lt;em&gt;Crisis Center&lt;/em&gt; list using relative path navigation.</source>
          <target state="translated">&lt;code&gt;gotoCrises&lt;/code&gt; メソッドを更新して、相対パスナビゲーションを使用して&lt;em&gt;Crisis Center&lt;/em&gt;リストに戻ります。</target>
        </trans-unit>
        <trans-unit id="63d15e6be1057ef3573d05c93044f0abe7f5d7f0" translate="yes">
          <source>Update the &lt;code&gt;protractor-conf.js&lt;/code&gt; to sync with hybrid apps:</source>
          <target state="translated">&lt;code&gt;protractor-conf.js&lt;/code&gt; を更新して、ハイブリッドアプリと同期します。</target>
        </trans-unit>
        <trans-unit id="ba1c01ce8fe91885115c745dda6dea1b1dee4654" translate="yes">
          <source>Update the binding in the template to announce the hero's name and show both &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; in a details layout like this:</source>
          <target state="translated">テンプレートのバインディングを更新してヒーローの名前を告知し、 &lt;code&gt;id&lt;/code&gt; ような詳細レイアウトでidと &lt;code&gt;name&lt;/code&gt; 両方を表示します。</target>
        </trans-unit>
        <trans-unit id="b73f126c77cbaf03da82c5d00d55430a2ec78f0a" translate="yes">
          <source>Update the component template to look like this:</source>
          <target state="translated">コンポーネントテンプレートを次のように更新します。</target>
        </trans-unit>
        <trans-unit id="e8c7ee399df1289188c98c11849990a2f1ac0ced" translate="yes">
          <source>Update the model for a particular control with a new value.</source>
          <target state="translated">特定のコントロールのモデルを新しい値で更新します。</target>
        </trans-unit>
        <trans-unit id="559847cfe7989a011f1f7f236cc63d7c5ef1d512" translate="yes">
          <source>Update the product details page to include a &quot;Buy&quot; button, which adds the current product to a list of products managed by a cart service.</source>
          <target state="translated">商品の詳細ページを更新して、[購入]ボタンを追加します。このボタンは、カートサービスによって管理される商品のリストに現在の商品を追加します。</target>
        </trans-unit>
        <trans-unit id="fc029d79ce7b99ec3a2fca2086322426387609a6" translate="yes">
          <source>Update the product details template to have a &quot;Buy&quot; button that adds the current product to the cart.</source>
          <target state="translated">商品の詳細テンプレートを更新して、現在の商品をカートに追加する[購入]ボタンを追加します。</target>
        </trans-unit>
        <trans-unit id="ce24781651687073ccf0577b48abbd217ac36903" translate="yes">
          <source>Update the relative path import to the &lt;code&gt;message.service&lt;/code&gt; in the &lt;code&gt;hero.service.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;hero.service.ts&lt;/code&gt; ファイル内のmessage.serviceへの相対パスインポートを更新します。</target>
        </trans-unit>
        <trans-unit id="203f53a020bfd878e423fc52de5b3578a006bfb8" translate="yes">
          <source>Update the route configuration to lazy load the &lt;code&gt;CrisisCenterModule&lt;/code&gt;. Take the same steps you used to configure &lt;code&gt;AdminModule&lt;/code&gt; for lazy load.</source>
          <target state="translated">ルート構成を更新して、 &lt;code&gt;CrisisCenterModule&lt;/code&gt; を遅延ロードします 。 遅延ロード用に &lt;code&gt;AdminModule&lt;/code&gt; を構成するために使用したのと同じ手順を実行します。</target>
        </trans-unit>
        <trans-unit id="cca7fe187a76a321d42e7e1ba7f157b20dbd5a77" translate="yes">
          <source>Update the shipping component's template to display the shipping types and prices using async pipe:</source>
          <target state="translated">非同期コンポーネントを使用して配送コンポーネントのテンプレートを更新し、配送タイプと価格を表示します。</target>
        </trans-unit>
        <trans-unit id="a357da0cfc27c86f48e17bd313f4e3eece1eed72" translate="yes">
          <source>Update the template file with the following contents:</source>
          <target state="translated">次の内容でテンプレートファイルを更新します。</target>
        </trans-unit>
        <trans-unit id="2a9f24f9facab2d3032dfc55184857c8d51349c7" translate="yes">
          <source>Update the template to display product details information inside an &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートを更新して、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 内の製品詳細情報を表示します。</target>
        </trans-unit>
        <trans-unit id="2f41d9ccaa5ca6464fe9e26dcf2fef17ab479d12" translate="yes">
          <source>Update the template to display the strategy service's &lt;code&gt;preloadedModules&lt;/code&gt; array.</source>
          <target state="translated">テンプレートを更新して、戦略サービスの &lt;code&gt;preloadedModules&lt;/code&gt; 配列を表示します。</target>
        </trans-unit>
        <trans-unit id="dfba97897cc40bb55207339966a6db50b171b279" translate="yes">
          <source>Update the template with a &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class binding&lt;/a&gt;. The binding adds the &lt;code&gt;selected&lt;/code&gt; CSS class when the comparison returns &lt;code&gt;true&lt;/code&gt; and removes it when &lt;code&gt;false&lt;/code&gt;. Look for it within the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag as shown here:</source>
          <target state="translated">&lt;a href=&quot;template-syntax#class-binding&quot;&gt;クラスバインディングで&lt;/a&gt;テンプレートを更新します。 バインディングは、比較が &lt;code&gt;true&lt;/code&gt; を返すときに &lt;code&gt;selected&lt;/code&gt; CSSクラスを追加し、 &lt;code&gt;false&lt;/code&gt; のときにそれを削除します 。 次に示すように、繰り返される &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; タグ内で検索します。</target>
        </trans-unit>
        <trans-unit id="d296ccbde468f094eb509d5d21a2641f2f39d02b" translate="yes">
          <source>Update the template with a button to simulate a name update. When you click the &lt;strong&gt;Update Name&lt;/strong&gt; button, the value entered in the form control element is reflected as its current value.</source>
          <target state="translated">ボタンを使用してテンプレートを更新し、名前の更新をシミュレートします。 [ &lt;strong&gt;名前&lt;/strong&gt;の&lt;strong&gt;更新]&lt;/strong&gt;ボタンをクリックすると、フォームコントロール要素に入力された値が現在の値として反映されます。</target>
        </trans-unit>
        <trans-unit id="70bf9b016dd5abd476b3536c1c64aba3fbec12cf" translate="yes">
          <source>Update the template with a header (&quot;Cart&quot;), and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; to display each of the cart items with its name and price.</source>
          <target state="translated">ヘッダー（「カート」）でテンプレートを更新し、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; を指定した &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; を使用して、各カートアイテムを名前と価格で表示します。</target>
        </trans-unit>
        <trans-unit id="9e70ce970e12f27c3c0169130c0f1fea106c9fc1" translate="yes">
          <source>Update the template with a welcome message to the &lt;code&gt;Crisis Center&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Crisis Center&lt;/code&gt; へのウェルカムメッセージでテンプレートを更新します。</target>
        </trans-unit>
        <trans-unit id="5ce647b93fb03bcc71424f45986c72ce1d07ff28" translate="yes">
          <source>UpdateActivatedEvent</source>
          <target state="translated">UpdateActivatedEvent</target>
        </trans-unit>
        <trans-unit id="fd2207341d757f6ad0dc82194a9f23e501154bfa" translate="yes">
          <source>UpdateAvailableEvent</source>
          <target state="translated">UpdateAvailableEvent</target>
        </trans-unit>
        <trans-unit id="30827e80f2dab0755e1aab3fdcd5f8e852c80f1e" translate="yes">
          <source>Updates happen in the background, relatively quickly after changes are published. The previous version of the application is served until an update is installed and ready.</source>
          <target state="translated">更新は、変更が公開された後、比較的迅速にバックグラウンドで行われます。 アプリケーションの以前のバージョンは、アップデートがインストールされ準備ができるまで提供されます。</target>
        </trans-unit>
        <trans-unit id="0b4d2f63f515bde39286e6b3ccfa79609ea6eeda" translate="yes">
          <source>Updates the &lt;code&gt;index.html&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; ファイルを更新します。</target>
        </trans-unit>
        <trans-unit id="b23869ff3d3ab319301b5274bca98483d206fab5" translate="yes">
          <source>Updates the stored data of the query list, and resets the &lt;code&gt;dirty&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;, so that on change detection, it will not notify of changes to the queries, unless a new change occurs.</source>
          <target state="translated">クエリリストの保存データを更新し、 &lt;code&gt;dirty&lt;/code&gt; フラグを &lt;code&gt;false&lt;/code&gt; にリセットします 。これにより、変更の検出時に、新しい変更が発生しない限り、クエリの変更を通知しません。</target>
        </trans-unit>
        <trans-unit id="53d4b930a68894d016ef42936f1cf3d3913d5484" translate="yes">
          <source>Updates your application and its dependencies. See &lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/&lt;/a&gt;</source>
          <target state="translated">アプリケーションとその依存関係を更新します。 &lt;a href=&quot;https://update.angular.io/&quot;&gt;https://update.angular.io/を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="4c5646c8307bd85d09df30c3b3db3a0d18ae2f19" translate="yes">
          <source>Updating headers</source>
          <target state="translated">ヘッダーを更新する</target>
        </trans-unit>
        <trans-unit id="3bfbada4728f2e043b7771479883f3fc79ae26f5" translate="yes">
          <source>Updating libraries</source>
          <target state="translated">ライブラリを更新する</target>
        </trans-unit>
        <trans-unit id="ea82e134fbd8a260e992aef7287a5680172c618b" translate="yes">
          <source>Updating to version 8 with &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; changes this automatically.</source>
          <target state="translated">&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; で&lt;/a&gt;バージョン8にアップデートすると、これが自動的に変更されます。</target>
        </trans-unit>
        <trans-unit id="2fe4aa4b0674fef349deee21474a9e07ec8e067d" translate="yes">
          <source>Updating your application in the browser</source>
          <target state="translated">ブラウザでアプリケーションを更新する</target>
        </trans-unit>
        <trans-unit id="fdcac3e04bfcd5fd48d4d42aa4876e07971bf792" translate="yes">
          <source>Updating your environment and apps</source>
          <target state="translated">環境とアプリを更新する</target>
        </trans-unit>
        <trans-unit id="a4cf3923e47fcb8de57d182bf42a0b41fb5e9032" translate="yes">
          <source>Upgrade the AngularJS components to Angular components next. Do it one component at a time while still keeping the application in hybrid mode. As you make these conversions, you'll also define your first Angular &lt;em&gt;pipes&lt;/em&gt;.</source>
          <target state="translated">次に、AngularJSコンポーネントをAngularコンポーネントにアップグレードします。 アプリケーションをハイブリッドモードのままにして、一度に1つのコンポーネントを実行します。 これらの変換を行うときに、最初のAngular &lt;em&gt;パイプ&lt;/em&gt;も定義します。</target>
        </trans-unit>
        <trans-unit id="24f30a918c96ec7f78d6de2229e4e45721a78e8d" translate="yes">
          <source>UpgradeAdapter</source>
          <target state="translated">UpgradeAdapter</target>
        </trans-unit>
        <trans-unit id="349a24b81f2702737e72ac44c56d5eea5df09232" translate="yes">
          <source>UpgradeAdapterRef</source>
          <target state="translated">UpgradeAdapterRef</target>
        </trans-unit>
        <trans-unit id="3472325c45449a53cfbeda85e9dc64ed999c053e" translate="yes">
          <source>UpgradeComponent</source>
          <target state="translated">UpgradeComponent</target>
        </trans-unit>
        <trans-unit id="f957777c36883bb04b88b1a75eabd9d4e87143f7" translate="yes">
          <source>UpgradeModule</source>
          <target state="translated">UpgradeModule</target>
        </trans-unit>
        <trans-unit id="dc294e605816722937474ceca1ecd6db86bccf84" translate="yes">
          <source>Upgraded components are Angular &lt;strong&gt;directives&lt;/strong&gt;, instead of &lt;strong&gt;components&lt;/strong&gt;, because Angular is unaware that AngularJS will create elements under it. As far as Angular knows, the upgraded component is just a directive - a tag - and Angular doesn't have to concern itself with its children.</source>
          <target state="translated">アップグレードされたコンポーネントは、AngularJSがその下に要素を作成することを認識していないため、 &lt;strong&gt;components&lt;/strong&gt;ではなくAngular &lt;strong&gt;ディレクティブ&lt;/strong&gt;です。 Angularが知っている限りでは、アップグレードされたコンポーネントは単なるディレクティブ-タグです-そして、Angularはその子自身を気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="4bcf3358a1532605c1d102caf461fe6695881d98" translate="yes">
          <source>Upgrading Components</source>
          <target state="translated">コンポーネントのアップグレード</target>
        </trans-unit>
        <trans-unit id="3de37c097e347898a6c3fcca7012b78cb95fe583" translate="yes">
          <source>Upgrading an AngularJS service</source>
          <target state="translated">AngularJSサービスのアップグレード</target>
        </trans-unit>
        <trans-unit id="8ad98e9741d8e1a96c0b693a2a2c1e769fe850a8" translate="yes">
          <source>Upgrading for Performance</source>
          <target state="translated">パフォーマンスのためのアップグレード</target>
        </trans-unit>
        <trans-unit id="f49e3b37a91d97499c2632816643696c225e6f8f" translate="yes">
          <source>Upgrading from AngularJS to Angular</source>
          <target state="translated">AngularJSからAngularへのアップグレード</target>
        </trans-unit>
        <trans-unit id="a5a3a352431f58bbbf100b500b3c0596ab226f27" translate="yes">
          <source>Upgrading the Phone service</source>
          <target state="translated">電話サービスのアップグレード</target>
        </trans-unit>
        <trans-unit id="be955d520b7fdc0e2bf8afcda324203e51725d6d" translate="yes">
          <source>Upgrading with &lt;code&gt;ngUpgrade&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngUpgrade&lt;/code&gt; を使用したアップグレード</target>
        </trans-unit>
        <trans-unit id="f8522315486f45748eda6e72566dff17c151bd49" translate="yes">
          <source>Upgrading with ngUpgrade</source>
          <target state="translated">ngUpgradeを使用したアップグレード</target>
        </trans-unit>
        <trans-unit id="233e49b5606ac48bdee62d2e7bac7f481dc3f94b" translate="yes">
          <source>UpperCamelCase (or PascalCase): Class names, including classes that define components, interfaces, NgModules, directives, and pipes, Upper camel case uses uppercase on the first letter of the item. For example, &quot;HeroListComponent&quot;.</source>
          <target state="translated">UpperCamelCase（またはPascalCase）：コンポーネント、インターフェイス、NgModule、ディレクティブ、およびパイプを定義するクラスを含むクラス名。大文字のキャメルケースでは、アイテムの最初の文字に大文字が使用されます。 たとえば、「He​​roListComponent」。</target>
        </trans-unit>
        <trans-unit id="155c412fcd3971aa03fafff2bacb8bb9adc5883c" translate="yes">
          <source>UpperCasePipe</source>
          <target state="translated">UpperCasePipe</target>
        </trans-unit>
        <trans-unit id="71dd69965f2486999c211c68072c41db5ae84baf" translate="yes">
          <source>UrlCodec</source>
          <target state="translated">UrlCodec</target>
        </trans-unit>
        <trans-unit id="68948d1dadddf95bc54d96cecbf392ae48e8d326" translate="yes">
          <source>UrlHandlingStrategy</source>
          <target state="translated">UrlHandlingStrategy</target>
        </trans-unit>
        <trans-unit id="16cc40206f5a097848430a6c434c805355e9962a" translate="yes">
          <source>UrlMatchResult</source>
          <target state="translated">UrlMatchResult</target>
        </trans-unit>
        <trans-unit id="b4a9ef4257a8681d0b8b798a42c3019be0c1e3e7" translate="yes">
          <source>UrlMatcher</source>
          <target state="translated">UrlMatcher</target>
        </trans-unit>
        <trans-unit id="cb582a3934e09bbb5eff19851f7f334c90041133" translate="yes">
          <source>UrlSegment</source>
          <target state="translated">UrlSegment</target>
        </trans-unit>
        <trans-unit id="5c83abe9807fc6933e00e92449e0482f3644b9ae" translate="yes">
          <source>UrlSegmentGroup</source>
          <target state="translated">UrlSegmentGroup</target>
        </trans-unit>
        <trans-unit id="d13f52dbbad2d8b754750f29699588763707bcf7" translate="yes">
          <source>UrlSerializer</source>
          <target state="translated">UrlSerializer</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
