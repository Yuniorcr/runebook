<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="a841e5989fc4a3f8e040bebb8d4e89ce53e2ea2d" translate="yes">
          <source>Build and run the server again:</source>
          <target state="translated">サーバーを再度ビルドして実行します。</target>
        </trans-unit>
        <trans-unit id="d6e1e6845b1c24e4e46ae9e1811d147c1fd4b03b" translate="yes">
          <source>Build artifacts (JS and CSS bundles).</source>
          <target state="translated">アーティファクトのビルド（JSおよびCSSバンドル）。</target>
        </trans-unit>
        <trans-unit id="fe668d7b9bd1bdd039e15e4e4878232c9f14cf75" translate="yes">
          <source>Build for multiple locales</source>
          <target state="translated">複数のロケール向けのビルド</target>
        </trans-unit>
        <trans-unit id="55d71d005605b731983e1212cab3067f5e36bf4a" translate="yes">
          <source>Build target</source>
          <target state="translated">ビルドターゲット</target>
        </trans-unit>
        <trans-unit id="0e3634fbe639279233d0d5ba2b0a7a9a5c30747b" translate="yes">
          <source>Build the library. You cannot use a library before it is built.</source>
          <target state="translated">ライブラリをビルドします。 ビルドする前にライブラリを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="10f95352487e622a50d6a09f351680b2e04970de" translate="yes">
          <source>Build using Ahead of Time compilation.</source>
          <target state="translated">Ahead of Timeコンパイルを使用してビルドします。</target>
        </trans-unit>
        <trans-unit id="12147b38fd3c8e49fbaaf0d27106cec8cf6bf7a1" translate="yes">
          <source>Build your app for production &lt;em&gt;including the source maps&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ソースマップを含む&lt;/em&gt;本番用のアプリを構築する</target>
        </trans-unit>
        <trans-unit id="4e1f7908a8fa15b11aa7a8fec3020d998a1cb595" translate="yes">
          <source>Build your library and schematics</source>
          <target state="translated">ライブラリと回路図を構築する</target>
        </trans-unit>
        <trans-unit id="3a8f2b080985e84ff16f5bd0acaede8ad59a5039" translate="yes">
          <source>Build your project using Github project name, with the Angular CLI command &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; and the options shown here:</source>
          <target state="translated">Angular CLIコマンド&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;とここに示すオプションを使用して、Githubプロジェクト名を使用してプロジェクトをビルドします。</target>
        </trans-unit>
        <trans-unit id="338940014efbeb76bf00b87e6fd1a0b5d3d0dc9f" translate="yes">
          <source>Builder input</source>
          <target state="translated">ビルダー入力</target>
        </trans-unit>
        <trans-unit id="7ef7408461360b6d8e74a044b183f8de6fc8be2e" translate="yes">
          <source>Builder project structure</source>
          <target state="translated">Builderプロジェクトの構造</target>
        </trans-unit>
        <trans-unit id="7cec90732540af8e27f18d76711bdd709e2926f7" translate="yes">
          <source>Builders can be synchronous or asynchronous, execute once or watch for external events, and can schedule other builders or targets.</source>
          <target state="translated">ビルダーは、同期または非同期で、一度実行するか、外部イベントを監視し、他のビルダーまたはターゲットをスケジュールできます。</target>
        </trans-unit>
        <trans-unit id="3fc44ef66b534b8d05ed7f18b305da65952fa0a1" translate="yes">
          <source>Builders have option defaults specified in the &lt;code&gt;angular.json&lt;/code&gt; configuration file, which can be overwritten by an alternate configuration for the target, and further overwritten by command line flags.</source>
          <target state="translated">ビルダーには、 &lt;code&gt;angular.json&lt;/code&gt; 構成ファイルで指定されたオプションのデフォルトがあります。これは、ターゲットの代替構成で上書きでき、さらにコマンドラインフラグで上書きできます。</target>
        </trans-unit>
        <trans-unit id="58423fd7c3d8a2b3b0288c434ca19a63c03fddd4" translate="yes">
          <source>Building accessible web experience often involves setting &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&quot;&gt;ARIA attributes&lt;/a&gt; to provide semantic meaning where it might otherwise be missing. Use &lt;a href=&quot;template-syntax#attribute-binding&quot;&gt;attribute binding&lt;/a&gt; template syntax to control the values of accessibility-related attributes.</source>
          <target state="translated">アクセスしやすいWebエクスペリエンスを構築するには、多くの場合、 &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&quot;&gt;ARIA属性&lt;/a&gt;を設定して、セマンティックな意味を提供する必要があります。 &lt;a href=&quot;template-syntax#attribute-binding&quot;&gt;属性バインディング&lt;/a&gt;テンプレート構文を使用して、アクセシビリティ関連の属性の値を制御します。</target>
        </trans-unit>
        <trans-unit id="ffb0d65cff95173c9727f4ed3f1046730b30b49a" translate="yes">
          <source>Building and rebuilding your library</source>
          <target state="translated">ライブラリの構築と再構築</target>
        </trans-unit>
        <trans-unit id="f7125bd3b210a7172b096873cf19164849e1f6b3" translate="yes">
          <source>Building and serving Angular apps</source>
          <target state="translated">Angularアプリの構築と提供</target>
        </trans-unit>
        <trans-unit id="38044acdb5b1bf0f8b98c5b7c6e09d68e6dbf057" translate="yes">
          <source>Building and serving from disk</source>
          <target state="translated">ディスクからの構築と提供</target>
        </trans-unit>
        <trans-unit id="5f44ed433a18b75e46be9d13f403d1b209869c46" translate="yes">
          <source>Building and serving the app for a given locale, using the translated text.</source>
          <target state="translated">翻訳されたテキストを使用して、指定されたロケールのアプリをビルドおよび提供します。</target>
        </trans-unit>
        <trans-unit id="14d7cef5094185320d88e754c57130b67a38a3c8" translate="yes">
          <source>Building handcrafted forms can be costly and time-consuming, especially if you need a great number of them, they're similar to each other, and they change frequently to meet rapidly changing business and regulatory requirements.</source>
          <target state="translated">手作りのフォームの作成は、特に大量に必要な場合、費用がかかり、時間がかかる可能性があり、互いに類似しており、急速に変化するビジネス要件および規制要件を満たすために頻繁に変更されます。</target>
        </trans-unit>
        <trans-unit id="99b633b8b55f4a4a0e4b874bf81f4324ac607609" translate="yes">
          <source>Building locally</source>
          <target state="translated">ローカルに構築</target>
        </trans-unit>
        <trans-unit id="ea19476edd9c5bc2591da244c58924cd2d0448a0" translate="yes">
          <source>Building with Bazel</source>
          <target state="translated">バゼルで構築</target>
        </trans-unit>
        <trans-unit id="592a2f2da2ad52e24a8c5d5555474faed5b11d88" translate="yes">
          <source>Building your schematics</source>
          <target state="translated">回路図を作成する</target>
        </trans-unit>
        <trans-unit id="74dbfc5fed244390666be30faae5de6b93204f0d" translate="yes">
          <source>Builds a class that encapsulates the functionality of the provided component and uses the configuration information to provide more context to the class. Takes the component factory's inputs and outputs to convert them to the proper custom element API and add hooks to input changes.</source>
          <target state="translated">提供されたコンポーネントの機能をカプセル化するクラスを構築し、構成情報を使用して、クラスにより多くのコンテキストを提供します。 コンポーネントファクトリの入力と出力を取得して適切なカスタム要素APIに変換し、入力の変更にフックを追加します。</target>
        </trans-unit>
        <trans-unit id="232819cbe5519dee306aa0895ba18910a5ec7859" translate="yes">
          <source>Builds a factory for producing a defined animation.</source>
          <target state="translated">定義されたアニメーションを生成するためのファクトリを構築します。</target>
        </trans-unit>
        <trans-unit id="29a6ebd47094fe74b2826b82789b68332b6c3967" translate="yes">
          <source>Builds and serves an Angular app, then runs end-to-end tests using Protractor.</source>
          <target state="translated">Angularアプリをビルドして提供し、Protractorを使用してエンドツーエンドのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="e2a7d33be0b02d6a586a825825ca723c6f2b203a" translate="yes">
          <source>Builds and serves your app, rebuilding on file changes.</source>
          <target state="translated">アプリをビルドして提供し、ファイルの変更時に再構築します。</target>
        </trans-unit>
        <trans-unit id="3699f6d3ab9939f61e3dfd80b624361cc8f93a32" translate="yes">
          <source>Built-in &lt;code&gt;structural&lt;/code&gt; directives</source>
          <target state="translated">組み込みの &lt;code&gt;structural&lt;/code&gt; ディレクティブ</target>
        </trans-unit>
        <trans-unit id="788c41440c17fec4a3ceedf2627edc4891b3e70f" translate="yes">
          <source>Built-in attribute directives</source>
          <target state="translated">組み込みの属性ディレクティブ</target>
        </trans-unit>
        <trans-unit id="34fc1e1b84850bf75a3a8ab79f67893426bb2dbb" translate="yes">
          <source>Built-in directives</source>
          <target state="translated">組み込みディレクティブ</target>
        </trans-unit>
        <trans-unit id="f1881fdacac2d002db723126c9b7e1fc54324ce1" translate="yes">
          <source>Built-in directives use only public APIs; that is, they do not have special access to any private APIs that other directives can't access.</source>
          <target state="translated">組み込みディレクティブは、パブリックAPIのみを使用します。 つまり、他のディレクティブがアクセスできないプライベートAPIへの特別なアクセス権はありません。</target>
        </trans-unit>
        <trans-unit id="14c8e0c882b739a0956ce99a903aa60c7db8e7b0" translate="yes">
          <source>Built-in pipes</source>
          <target state="translated">内蔵パイプ</target>
        </trans-unit>
        <trans-unit id="f846a8ef31181b4f0e27e3db37268decf8f99a23" translate="yes">
          <source>Built-in template functions</source>
          <target state="translated">組み込みテンプレート関数</target>
        </trans-unit>
        <trans-unit id="853adbe6a9c9185cf38b20fec800da9b6c47bf4a" translate="yes">
          <source>Built-in validators</source>
          <target state="translated">組み込みのバリデーター</target>
        </trans-unit>
        <trans-unit id="23270ff48782c619fd08871d4873b8a228d6bad4" translate="yes">
          <source>Bundling: concatenates your many application and library files into a few bundles.</source>
          <target state="translated">バンドル：多くのアプリケーションおよびライブラリファイルをいくつかのバンドルに連結します。</target>
        </trans-unit>
        <trans-unit id="b77c50fe85e215a333530a2770df5fc00971a9a0" translate="yes">
          <source>But a component is more than just its class. A component interacts with the DOM and with other components. The &lt;em&gt;class-only&lt;/em&gt; tests can tell you about class behavior. They cannot tell you if the component is going to render properly, respond to user input and gestures, or integrate with its parent and child components.</source>
          <target state="translated">しかし、コンポーネントは単なるクラス以上のものです。 コンポーネントは、DOMおよび他のコンポーネントと対話します。 &lt;em&gt;クラスのみの&lt;/em&gt;テストでは、クラスの動作について知ることができます。 コンポーネントが適切にレンダリングされるのか、ユーザーの入力とジェスチャーに応答するのか、または親コンポーネントと子コンポーネントと統合されるのかを通知できません。</target>
        </trans-unit>
        <trans-unit id="dd16c28b37bfac9fd975ec035f73fbe88687604a" translate="yes">
          <source>But a component or directive shouldn't blindly trust &lt;em&gt;other&lt;/em&gt; components and directives. The properties of a component or directive are hidden from binding by default. They are &lt;em&gt;private&lt;/em&gt; from an Angular binding perspective. When adorned with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator, the property becomes &lt;em&gt;public&lt;/em&gt; from an Angular binding perspective. Only then can it be bound by some other component or directive.</source>
          <target state="translated">ただし、コンポーネントまたはディレクティブは、 &lt;em&gt;他の&lt;/em&gt;コンポーネントおよびディレクティブを盲目的に信頼&lt;em&gt;する&lt;/em&gt;べきではありません。 コンポーネントまたはディレクティブのプロパティは、デフォルトではバインディングから隠されています。 Angularバインディングの観点からは&lt;em&gt;プライベート&lt;/em&gt;です。 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; デコレータで装飾すると、プロパティはAngularバインディングの観点から&lt;em&gt;パブリックに&lt;/em&gt;なります。 その場合にのみ、他のコンポーネントまたはディレクティブによってバインドできます。</target>
        </trans-unit>
        <trans-unit id="4c3ff50267ef1b91995b1701f72f05cd08be99af" translate="yes">
          <source>But always implement a &lt;em&gt;pure pipe&lt;/em&gt; with a &lt;em&gt;pure function&lt;/em&gt;. Otherwise, you'll see many console errors regarding expressions that changed after they were checked.</source>
          <target state="translated">しかし、常に&lt;em&gt;純粋な関数で&lt;/em&gt; &lt;em&gt;純粋なパイプ&lt;/em&gt;を実装してください。 そうしないと、チェック後に変更された式に関する多くのコンソールエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="1dad324eea1e02746dc15d325e015070ea526f47" translate="yes">
          <source>But an interceptor can change this to an &lt;em&gt;observable&lt;/em&gt; that emits more than once.</source>
          <target state="translated">ただし、インターセプターはこれを、複数回放出する&lt;em&gt;オブザーバブルに&lt;/em&gt;変更できます。</target>
        </trans-unit>
        <trans-unit id="80bd50bba245c58f59752096de59db1d05418d3c" translate="yes">
          <source>But clicking a link in an email, entering it in the browser address bar, or merely refreshing the browser while on the hero detail page &amp;mdash; all of these actions are handled by the browser itself, &lt;em&gt;outside&lt;/em&gt; the running application. The browser makes a direct request to the server for that URL, bypassing the router.</source>
          <target state="translated">ただし、メール内のリンクをクリックするか、ブラウザーのアドレスバーに入力するか、ヒーローの詳細ページでブラウザーを更新するだけです。これらのアクションはすべて、実行中のアプリケーションの&lt;em&gt;外部&lt;/em&gt;のブラウザー自体によって処理されます。 ブラウザーは、ルーターをバイパスして、そのURLをサーバーに直接要求します。</target>
        </trans-unit>
        <trans-unit id="fa03a76338d6f6af61aea8774405dc940313388b" translate="yes">
          <source>But first, make a few changes to the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">ただし、最初に &lt;code&gt;AppRoutingModule&lt;/code&gt; にいくつかの変更を加えます。</target>
        </trans-unit>
        <trans-unit id="c27f7b3e935b9fc74c79376898a71d98935aa436" translate="yes">
          <source>But in the absence of a compelling reason to keep them around, your preference should be to remove DOM elements that the user can't see and recover the unused resources with a structural directive like &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="translated">しかし、それらを保持する説得力のある理由がない場合は、ユーザーが見ることができないDOM要素を削除し、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; のような構造ディレクティブを使用して未使用のリソースを回復する必要があります。</target>
        </trans-unit>
        <trans-unit id="3edb9da96e057d100aa5383d0834fa22e414c6e1" translate="yes">
          <source>But interceptors that examine and modify the response from &lt;code&gt;next.handle()&lt;/code&gt; will see all of these events. Your interceptor should return &lt;em&gt;every event untouched&lt;/em&gt; unless it has a &lt;em&gt;compelling reason to do otherwise&lt;/em&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;next.handle()&lt;/code&gt; からの応答を調べて変更するインターセプターでは、これらのイベントがすべて表示されます。 インターセプターは、 &lt;em&gt;特に理由&lt;/em&gt;がない限り、 &lt;em&gt;すべてのイベントを変更せずに&lt;/em&gt;返す必要&lt;em&gt;があります&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="a36ff3370e272264824942a257a5f735eab10803" translate="yes">
          <source>But on the shared or production server, you might serve the app from a subfolder. For example, when the URL to load the app is something like &lt;code&gt;http://www.mysite.com/my/app/&lt;/code&gt;, the subfolder is &lt;code&gt;my/app/&lt;/code&gt; and you should add &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt; to the server version of the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">ただし、共有サーバーまたは運用サーバーでは、サブフォルダーからアプリを提供できます。 たとえば、アプリを読み込むURLが &lt;code&gt;http://www.mysite.com/my/app/&lt;/code&gt; のような場合、サブフォルダーは &lt;code&gt;my/app/&lt;/code&gt; あり、 &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt; を追加する必要があります&amp;gt;サーバーバージョンの &lt;code&gt;index.html&lt;/code&gt; に 。</target>
        </trans-unit>
        <trans-unit id="3b97cebd5bc435fb7714257eba2ba270e61f5214" translate="yes">
          <source>But the compiler won't throw an error when it encounters &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;. It simply renders them as empty tags and the browser ignores them.</source>
          <target state="translated">ただし、コンパイラは &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; 、または &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; に遭遇してもエラーをスローしません。 単に空のタグとしてレンダリングし、ブラウザはそれらを無視します。</target>
        </trans-unit>
        <trans-unit id="a6e1ffc936f0d832154812aedbbbdd45670ea6cb" translate="yes">
          <source>But the router is still loading the &lt;code&gt;AdminModule&lt;/code&gt; even if the user can't visit any of its components. Ideally, you'd only load the &lt;code&gt;AdminModule&lt;/code&gt; if the user is logged in.</source>
          <target state="translated">ただし、ユーザーがコンポーネントに &lt;code&gt;AdminModule&lt;/code&gt; 場合でも、ルーターは引き続きAdminModuleをロードしています。 理想的には、ユーザーがログインしている場合にのみ &lt;code&gt;AdminModule&lt;/code&gt; をロードします。</target>
        </trans-unit>
        <trans-unit id="5cf7129241a1e1a5c0fa7cf971437230767eaf7b" translate="yes">
          <source>But the test's asynchronous nature is revealed by the call to &lt;code&gt;fixture.whenStable()&lt;/code&gt;, which breaks the linear flow of control.</source>
          <target state="translated">しかし、テストの非同期の性質は、制御の線形フローを &lt;code&gt;fixture.whenStable()&lt;/code&gt; 呼び出しによって明らかになります。</target>
        </trans-unit>
        <trans-unit id="8cea244f43f2793e842872ae957b0a1f13e42a42" translate="yes">
          <source>But there's plenty of template complexity even in this simple form.</source>
          <target state="translated">しかし、この単純な形式であっても、テンプレートは非常に複雑です。</target>
        </trans-unit>
        <trans-unit id="7b11b3e52dfeccee3a7be0007f3d3766d07568c9" translate="yes">
          <source>But when using them from AngularJS templates, you must use kebab-case:</source>
          <target state="translated">ただし、AngularJSテンプレートからそれらを使用する場合は、kebab-caseを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="943e02425418f80a99a67821520af9a48faca8cd" translate="yes">
          <source>But you can also start adding &lt;em&gt;type annotations&lt;/em&gt; to get even more out of TypeScript's type system. For instance, you can annotate the checkmark filter so that it explicitly expects booleans as arguments. This makes it clearer what the filter is supposed to do.</source>
          <target state="translated">ただし、 &lt;em&gt;Type注釈&lt;/em&gt;を追加して、TypeScriptの型システムをさらに活用することもできます。 たとえば、ブール値を引数として明示的に期待するように、チェックマークフィルターに注釈を付けることができます。 これにより、フィルターの処理内容が明確になります。</target>
        </trans-unit>
        <trans-unit id="cfadbd7a577133041a60f331a0e2ad6af20f3f8b" translate="yes">
          <source>By</source>
          <target state="translated">By</target>
        </trans-unit>
        <trans-unit id="9979e502bac7109b83a440b9de42340f258ddfa0" translate="yes">
          <source>By adding &lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; to the page you generate links that run sample code in the Stackblitz live coding environment and download that code to the reader's file system.</source>
          <target state="translated">&lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; をページに追加することにより、Stackblitzライブコーディング環境でサンプルコードを実行するリンクを生成し、そのコードをリーダーのファイルシステムにダウンロードします。</target>
        </trans-unit>
        <trans-unit id="2cf4fb2c70012c8404bf6ea7e18e7ae9d001da1c" translate="yes">
          <source>By clicking a hero in the dashboard.</source>
          <target state="translated">ダッシュボードでヒーローをクリックする。</target>
        </trans-unit>
        <trans-unit id="06c882c348dd5f75caf8d98a0cc0eb826d015cff" translate="yes">
          <source>By clicking a hero in the heroes list.</source>
          <target state="translated">ヒーローリストでヒーローをクリックする。</target>
        </trans-unit>
        <trans-unit id="0ea68802c089f45528d4b35900b0fde6854239f2" translate="yes">
          <source>By clicking the browser's back button, you can go back to the hero list or dashboard view, depending upon which sent you to the detail view.</source>
          <target state="translated">ブラウザの戻るボタンをクリックすると、ヒーロービューまたはダッシュボードビューに戻ることができますが、どちらが詳細ビューに送られたかによって異なります。</target>
        </trans-unit>
        <trans-unit id="0a5dc8091fb2b001718c9b188eeb628b36637423" translate="yes">
          <source>By compiling your application using the &lt;code&gt;ngc&lt;/code&gt; command-line tool, you can bootstrap directly to a module factory, so you don't need to include the Angular compiler in your JavaScript bundle.</source>
          <target state="translated">&lt;code&gt;ngc&lt;/code&gt; コマンドラインツールを使用してアプリケーションをコンパイルすると、モジュールファクトリに直接ブートストラップできるため、AngularコンパイラをJavaScriptバンドルに含める必要はありません。</target>
        </trans-unit>
        <trans-unit id="e83663bb4eeda0ed5495f37b7c40ecac703dc7a4" translate="yes">
          <source>By contrast, Angular registers &lt;code&gt;AppComponent&lt;/code&gt; providers with the &lt;code&gt;AppComponent&lt;/code&gt;'s own injector. &lt;code&gt;AppComponent&lt;/code&gt; services are available only to that component and its component tree. They have component scope.</source>
          <target state="translated">対照的に、Angularは &lt;code&gt;AppComponent&lt;/code&gt; プロバイダーを &lt;code&gt;AppComponent&lt;/code&gt; 自身のインジェクターに登録します。 &lt;code&gt;AppComponent&lt;/code&gt; サービスは、そのコンポーネントとそのコンポーネントツリーでのみ使用できます。 コンポーネントスコープがあります。</target>
        </trans-unit>
        <trans-unit id="d00a813e7486c3605092212dc4aceb4cad4fd7d3" translate="yes">
          <source>By convention, HTML attributes use lowercase names (&lt;code&gt;tabindex&lt;/code&gt;), while properties use camelCase names (&lt;code&gt;tabIndex&lt;/code&gt;).</source>
          <target state="translated">慣例により、HTML属性は小文字の名前（ &lt;code&gt;tabindex&lt;/code&gt; ）を使用し、プロパティはcamelCase名（ &lt;code&gt;tabIndex&lt;/code&gt; ）を使用します。</target>
        </trans-unit>
        <trans-unit id="9b63586546cd1a81c918d1e5257f96a507ec674b" translate="yes">
          <source>By convention, the module class name is &lt;code&gt;AppRoutingModule&lt;/code&gt; and it belongs in the &lt;code&gt;app-routing.module.ts&lt;/code&gt; in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">慣例により、モジュールクラス名は &lt;code&gt;AppRoutingModule&lt;/code&gt; であり、 &lt;code&gt;src/app&lt;/code&gt; フォルダーの &lt;code&gt;app-routing.module.ts&lt;/code&gt; に属します。</target>
        </trans-unit>
        <trans-unit id="03a4df132d346ecc03036957b443d37171ef0e22" translate="yes">
          <source>By default &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; supports the following &lt;code&gt;macroTasks&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; は次の &lt;code&gt;macroTasks&lt;/code&gt; をサポートします。</target>
        </trans-unit>
        <trans-unit id="2bf91cf79be5a08d74ebc94a4d5ee160fbcd355c" translate="yes">
          <source>By default no files are replaced. You can add file replacements for specific build targets. For example:</source>
          <target state="translated">デフォルトでは、ファイルは置き換えられません。 特定のビルドターゲットのファイル置換を追加できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="51695b957eb12e3eaecfb926c54f3ed8f96364b1" translate="yes">
          <source>By default the &lt;code&gt;.ts&lt;/code&gt; file supplied in the &lt;code&gt;files&lt;/code&gt; field is assumed to be the library index. If more than one &lt;code&gt;.ts&lt;/code&gt; file is specified, &lt;code&gt;libraryIndex&lt;/code&gt; is used to select the file to use. If more than one &lt;code&gt;.ts&lt;/code&gt; file is supplied without a &lt;code&gt;libraryIndex&lt;/code&gt;, an error is produced.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;files&lt;/code&gt; フィールドで提供される &lt;code&gt;.ts&lt;/code&gt; ファイルはライブラリインデックスであると想定されます。 複数の &lt;code&gt;.ts&lt;/code&gt; ファイルが指定されている場合、 &lt;code&gt;libraryIndex&lt;/code&gt; を使用して使用するファイルを選択します。 &lt;code&gt;.ts&lt;/code&gt; なしで複数の.tsファイルが提供された &lt;code&gt;libraryIndex&lt;/code&gt; 、エラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="e5914dfa1fd7ba2af1bd87033b229c44bc750e76" translate="yes">
          <source>By default, &lt;code&gt;ng new&lt;/code&gt; creates an initial skeleton application at the root level of the workspace, along with its end-to-end tests. The skeleton is for a simple Welcome application that is ready to run and easy to modify. The root-level application has the same name as the workspace, and the source files reside in the &lt;code&gt;src/&lt;/code&gt; subfolder of the workspace.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;ng new&lt;/code&gt; は、エンドツーエンドのテストとともに、ワークスペースのルートレベルで初期スケルトンアプリケーションを作成します。 スケルトンは、実行準備が整っており、簡単に変更できるシンプルなWelcomeアプリケーション用です。 ルートレベルアプリケーションの名前はワークスペースと同じで、ソースファイルはワークスペースの &lt;code&gt;src/&lt;/code&gt; サブフォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="fdde175d8d5cd355f83e0d12cd962bd43d0f6ace" translate="yes">
          <source>By default, Angular always starts at the current &lt;code&gt;&lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; and keeps searching all the way up. Modifiers allow you to change the starting (self) or ending location.</source>
          <target state="translated">デフォルトでは、Angularは常に現在の &lt;code&gt;&lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; から開始し、ずっと検索を続けます。 修飾子を使用すると、開始位置（自己）または終了位置を変更できます。</target>
        </trans-unit>
        <trans-unit id="c246f990199a0a6cf74efb68b5e6a57d51a1c478" translate="yes">
          <source>By default, Angular only contains locale data for &lt;code&gt;en-US&lt;/code&gt;. If you set the value of &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; to another locale, you must import locale data for that new locale. The CLI imports the locale data for you when you use the parameter &lt;code&gt;--configuration&lt;/code&gt; with &lt;code&gt;ng serve&lt;/code&gt; and &lt;code&gt;ng build&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Angularには &lt;code&gt;en-US&lt;/code&gt; のロケールデータのみが含まれています。 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; の値を別のロケールに設定した場合、その新しいロケールのロケールデータをインポートする必要があります。 &lt;code&gt;ng serve&lt;/code&gt; および &lt;code&gt;ng build&lt;/code&gt; でパラメーター &lt;code&gt;--configuration&lt;/code&gt; を使用すると、CLIがロケールデータをインポートします。</target>
        </trans-unit>
        <trans-unit id="c38ab5e3eefabb0e0f4fea157820aa9ee2ccacc6" translate="yes">
          <source>By default, Angular uses the locale &lt;code&gt;en-US&lt;/code&gt;, which is English as spoken in the United States of America.</source>
          <target state="translated">デフォルトでは、Angularは &lt;code&gt;en-US&lt;/code&gt; ロケールを使用します。これはアメリカ合衆国で話されている英語です。</target>
        </trans-unit>
        <trans-unit id="7d6489a7440ae99238e395cfb6007fae40fb09ae" translate="yes">
          <source>By default, NgModules are eagerly loaded, which means that as soon as the app loads, so do all the NgModules, whether or not they are immediately necessary. For large apps with lots of routes, consider lazy loading&amp;mdash;a design pattern that loads NgModules as needed. Lazy loading helps keep initial bundle sizes smaller, which in turn helps decrease load times.</source>
          <target state="translated">デフォルトでは、NgModulesは積極的にロードされます。つまり、アプリがロードされるとすぐに、すぐに必要かどうかに関係なく、すべてのNgModulesもロードされます。 多数のルートを持つ大規模なアプリの場合、遅延読み込み（必要に応じてNgModuleを読み込むデザインパターン）を検討してください。 遅延読み込みは、初期バンドルサイズを小さく保つのに役立ち、これにより読み込み時間の短縮に役立ちます。</target>
        </trans-unit>
        <trans-unit id="4a2fd556d26003ca54a9e732916c3e8fb2840bae" translate="yes">
          <source>By default, a &lt;code&gt;production&lt;/code&gt; configuration is defined, and the &lt;code&gt;ng build&lt;/code&gt; command has &lt;code&gt;--prod&lt;/code&gt; option that builds using this configuration. The &lt;code&gt;production&lt;/code&gt; configuration sets defaults that optimize the app in a number of ways, such as bundling files, minimizing excess whitespace, removing comments and dead code, and rewriting code to use short, cryptic names (&quot;minification&quot;).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;production&lt;/code&gt; 構成が定義されており、 &lt;code&gt;ng build&lt;/code&gt; コマンドには、この構成を使用してビルドする &lt;code&gt;--prod&lt;/code&gt; オプションがあります。 &lt;code&gt;production&lt;/code&gt; 構成では、ファイルのバンドル、余白の最小化、コメントとデッドコードの削除、短い暗号名を使用するためのコードの書き換え（「ミニフィケーション」）など、さまざまな方法でアプリを最適化するデフォルトを設定します。</target>
        </trans-unit>
        <trans-unit id="6104e2784b3d5459f07069827571091b50f300af" translate="yes">
          <source>By default, a live example link opens a Stackblitz in a separate browser tab. You can embed the Stackblitz within the guide page itself by adding the &lt;code&gt;embedded&lt;/code&gt; attribute.</source>
          <target state="translated">デフォルトでは、ライブサンプルリンクは、別のブラウザタブでStackblitzを開きます。 &lt;code&gt;embedded&lt;/code&gt; 属性を追加することで、Stackblitzをガイドページ自体に埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="e81e3b2c1800abfb9519aca9fcc5374fb1a22984" translate="yes">
          <source>By default, all validators are run after every form value change. With synchronous validators, this will not likely have a noticeable impact on application performance. However, it's common for async validators to perform some kind of HTTP request to validate the control. Dispatching an HTTP request after every keystroke could put a strain on the backend API, and should be avoided if possible.</source>
          <target state="translated">デフォルトでは、すべてのバリデーターはフォームの値が変更されるたびに実行されます。 同期検証では、これはアプリケーションのパフォーマンスに顕著な影響を与える可能性がありません。 ただし、非同期バリデーターがコントロールを検証するために何らかのHTTPリクエストを実行することは一般的です。 キーストロークごとにHTTPリクエストをディスパッチすると、バックエンドAPIに負担がかかる可能性があるため、可能であれば回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb054c411f164d76b27f15037b08121e4e98dde4" translate="yes">
          <source>By default, an Angular app always has at least one entry component, the root component, &lt;code&gt;AppComponent&lt;/code&gt;. Its purpose is to serve as a point of entry into the app, that is, you bootstrap it to launch the app.</source>
          <target state="translated">デフォルトでは、Angularアプリには常に少なくとも1つのエントリコンポーネント、ルートコンポーネント &lt;code&gt;AppComponent&lt;/code&gt; があります。 その目的は、アプリへのエントリポイントとして機能することです。つまり、アプリを起動するために起動します。</target>
        </trans-unit>
        <trans-unit id="d95d52a0fff91150c8cb9f7bb76b9d498b34a5e8" translate="yes">
          <source>By default, an interceptor sends this header on all mutating requests (such as POST) to relative URLs, but not on GET/HEAD requests or on requests with an absolute URL.</source>
          <target state="translated">デフォルトでは、インターセプターはすべての変換リクエスト（POSTなど）で相対URLにこのヘッダーを送信しますが、GET / HEADリクエストまたは絶対URLを含むリクエストでは送信しません。</target>
        </trans-unit>
        <trans-unit id="29612b8986641e9c62a3c15504623ae3e86c6192" translate="yes">
          <source>By default, if the control has children, all children are enabled.</source>
          <target state="translated">デフォルトでは、コントロールに子がある場合、すべての子が有効になります。</target>
        </trans-unit>
        <trans-unit id="e243dc5ef99c3ce4659ac5ffc13cb25f6f1f760c" translate="yes">
          <source>By default, it also updates the value and validity of its ancestors.</source>
          <target state="translated">デフォルトでは、祖先の値と有効性も更新します。</target>
        </trans-unit>
        <trans-unit id="86d26dd91eba4447650188c535f2705b5cd1b74d" translate="yes">
          <source>By default, legacy browsers such as IE 9-11 are ignored, and the compilation target is ES2015. As a result, this produces two builds, and differential loading is enabled. If you ignore browsers without ES2015 support, a single build is produced. To see the build result for differential loading based on different configurations, refer to the table below.</source>
          <target state="translated">デフォルトでは、IE 9-11などのレガシーブラウザーは無視され、コンパイルターゲットはES2015です。 その結果、これにより2つのビルドが生成され、差分ロードが有効になります。 ES2015サポートのないブラウザーを無視すると、単一のビルドが作成されます。 さまざまな構成に基づく差分ロードのビルド結果を確認するには、以下の表を参照してください。</target>
        </trans-unit>
        <trans-unit id="8c4d24c550e53bc0f5bebd201e971a470cb6283c" translate="yes">
          <source>By default, the &lt;code&gt;spawn()&lt;/code&gt; method outputs everything to the process standard output and error. To make it easier to test and debug, we can forward the output to the CLI Builder logger instead. This also allows the builder itself to be executed in a separate process, even if the standard output and error are deactivated (as in an &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron app&lt;/a&gt;).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;spawn()&lt;/code&gt; メソッドはすべてをプロセスの標準出力とエラーに出力します。 テストとデバッグを簡単にするために、代わりに出力をCLI Builderロガーに転送できます。 これにより、標準出力とエラーが（ &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electronアプリのように&lt;/a&gt; ）非アクティブ化されている場合でも、ビルダー自体を別のプロセスで実行することもできます。</target>
        </trans-unit>
        <trans-unit id="1dfbd486aab7d0d92e1d421a68656a3e0c20983d" translate="yes">
          <source>By default, the &lt;code&gt;xi18n&lt;/code&gt; command generates a translation file named &lt;code&gt;messages.xlf&lt;/code&gt; in the &lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;XML Localization Interchange File Format (XLIFF, version 1.2)&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;xi18n&lt;/code&gt; コマンドは、 &lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;XML Localization Interchange File Format（XLIFF、バージョン1.2）で&lt;/a&gt; &lt;code&gt;messages.xlf&lt;/code&gt; という名前の翻訳ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="d941e4f6148aedde9261a9a0cf15f5ba8a31113e" translate="yes">
          <source>By default, the AOT compiler removes whitespace characters as follows:</source>
          <target state="translated">デフォルトでは、AOTコンパイラは次のように空白文字を削除します。</target>
        </trans-unit>
        <trans-unit id="a8a7612d9fccf041650c5c969b9038616f83e502" translate="yes">
          <source>By default, the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt; generates components with a template file. You can override that with:</source>
          <target state="translated">デフォルトでは、Angular CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate component&lt;/code&gt; &lt;/a&gt; generate componentは、テンプレートファイルを使用してコンポーネントを生成します。 以下で上書きできます：</target>
        </trans-unit>
        <trans-unit id="daa76f3155ef0748e4e8ab3fd4aaa4c1fd24528b" translate="yes">
          <source>By default, the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate service&lt;/code&gt;&lt;/a&gt; registers a provider with the root injector for your service by including provider metadata in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. The tutorial uses this method to register the provider of HeroService class definition.</source>
          <target state="translated">デフォルトでは、Angular CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate service&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレーターにプロバイダーメタデータを含めることにより、プロバイダーをサービスのルートインジェクターに登録します。 チュートリアルでは、このメソッドを使用して、HeroServiceクラス定義のプロバイダーを登録します。</target>
        </trans-unit>
        <trans-unit id="b2bbe47a91244e664efba1dcfef903739625e635" translate="yes">
          <source>By default, the Angular CLI command &lt;code&gt;ng generate service&lt;/code&gt; registers a provider with the &lt;em&gt;root injector&lt;/em&gt; for your service by including provider metadata, that is &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">デフォルトでは、Angular CLIコマンド &lt;code&gt;ng generate service&lt;/code&gt; は、プロバイダーのメタデータを提供することにより、サービスの&lt;em&gt;ルートインジェクターに&lt;/em&gt;プロバイダーを登録します。これは &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレーターの &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; れた「ルート」です。</target>
        </trans-unit>
        <trans-unit id="4b07b4ab8b7660869dbbd653625f529f802c444b" translate="yes">
          <source>By default, the CLI command &lt;code&gt;ng new my-app&lt;/code&gt; creates a workspace folder named &quot;my-app&quot; and generates a new application skeleton in a &lt;code&gt;src/&lt;/code&gt; folder at the top level of the workspace. A newly generated application contains source files for a root module, with a root component and template.</source>
          <target state="translated">デフォルトでは、CLIコマンド &lt;code&gt;ng new my-app&lt;/code&gt; は「my-app」という名前のワークスペースフォルダーを作成し、ワークスペースの最上位の &lt;code&gt;src/&lt;/code&gt; フォルダーに新しいアプリケーションスケルトンを生成します。 新しく生成されたアプリケーションには、ルートコンポーネントとテンプレートを含むルートモジュールのソースファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="55eded90bf61b8ed39ccdda5d400e9b5e0adf278" translate="yes">
          <source>By default, the change detector assumes that the object instance identifies the node in the iterable. When this function is supplied, the directive uses the result of calling this function to identify the item node, rather than the identity of the object itself.</source>
          <target state="translated">デフォルトでは、変更検出機能は、オブジェクトインスタンスが反復可能オブジェクトのノードを識別すると想定します。 この関数が指定されると、ディレクティブは、オブジェクト自体のIDではなく、この関数を呼び出した結果を使用してアイテムノードを識別します。</target>
        </trans-unit>
        <trans-unit id="793355b486faa68c3f5a96afa98bcba17673aaaa" translate="yes">
          <source>By default, the command creates a file named &lt;code&gt;messages.xlf&lt;/code&gt; in your project's root directory.</source>
          <target state="translated">デフォルトでは、このコマンドはプロジェクトのルートディレクトリに &lt;code&gt;messages.xlf&lt;/code&gt; という名前のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="ff3064f6c11c8a9e2889671ed9f14030d3fa084f" translate="yes">
          <source>By default, the compiler replaces decorators with a static field in the class, which allows advanced tree-shakers like &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure compiler&lt;/a&gt; to remove unused classes.</source>
          <target state="translated">デフォルトでは、コンパイラーはデコレーターをクラスの静的フィールドに置き換えます。これにより、 &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;クロージャーコンパイラー&lt;/a&gt;などの高度なツリーシェーカーが未使用のクラスを削除できます。</target>
        </trans-unit>
        <trans-unit id="d6300bbcf1bdafeb32e8a213f18ff110a8c0cc5f" translate="yes">
          <source>By default, the files for a new initial app (with the same name as the workspace) are placed in the &lt;code&gt;src/&lt;/code&gt; subfolder. Corresponding end-to-end tests are placed in the &lt;code&gt;e2e/&lt;/code&gt; subfolder.</source>
          <target state="translated">デフォルトでは、新しい初期アプリのファイル（ワークスペースと同じ名前）は &lt;code&gt;src/&lt;/code&gt; サブフォルダーに配置されます。 対応するエンドツーエンドのテストは、 &lt;code&gt;e2e/&lt;/code&gt; サブフォルダーに配置されます。</target>
        </trans-unit>
        <trans-unit id="8582915bde1d5201e954cc693f0f835f7a95e185" translate="yes">
          <source>By default, the injector throws an error when it can't find a requested provider. The &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; decorator means not finding the service is OK. The injector returns &lt;code&gt;null&lt;/code&gt;, the &lt;code&gt;parentModule&lt;/code&gt; parameter is null, and the constructor concludes uneventfully.</source>
          <target state="translated">デフォルトでは、要求されたプロバイダーが見つからない場合、インジェクターはエラーをスローします。 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; デコレータは、サービスに問題がないことを意味します。 インジェクターは &lt;code&gt;null&lt;/code&gt; を返し、 &lt;code&gt;parentModule&lt;/code&gt; パラメーターはnullであり、コンストラクターは問題なく終了します。</target>
        </trans-unit>
        <trans-unit id="f59494e4c795cdee22a3b89f3a638403a11d22a5" translate="yes">
          <source>By default, the router checks URL elements from the left to see if the URL matches a given path, and stops when there is a match. For example, '/team/11/user' matches 'team/:id'.</source>
          <target state="translated">デフォルトでは、ルーターはURL要素を左からチェックして、URLが特定のパスに一致するかどうかを確認し、一致する場合に停止します。 たとえば、「/ team / 11 / user」は「team /：id」に一致します。</target>
        </trans-unit>
        <trans-unit id="6a43a86194b96294c0a89a6c30e5587c974c168c" translate="yes">
          <source>By default, the target is &lt;code&gt;es2015&lt;/code&gt;, which is supported only in modern browsers. You can configure the target to &lt;code&gt;es5&lt;/code&gt; to specifically support legacy browsers. &lt;a href=&quot;deployment#differential-loading&quot;&gt;Differential loading&lt;/a&gt; is also provided by the Angular CLI to support modern, and legacy browsers with separate bundles.</source>
          <target state="translated">デフォルトでは、ターゲットは &lt;code&gt;es2015&lt;/code&gt; であり、最新のブラウザーでのみサポートされています。 ターゲットを &lt;code&gt;es5&lt;/code&gt; に構成して、特にレガシーブラウザーをサポートできます。 また、Angular CLIによって&lt;a href=&quot;deployment#differential-loading&quot;&gt;差動ロード&lt;/a&gt;が提供され、個別のバンドルを備えた最新のレガシーブラウザーをサポートします。</target>
        </trans-unit>
        <trans-unit id="41868320016c660205217a38b2ee8095f3d655f6" translate="yes">
          <source>By default, the target is &lt;code&gt;es2015&lt;/code&gt;. If you are targeting &lt;code&gt;es5&lt;/code&gt;, you still have newer type declarations due to the list of declaration files included:</source>
          <target state="translated">デフォルトでは、ターゲットは &lt;code&gt;es2015&lt;/code&gt; です。 &lt;code&gt;es5&lt;/code&gt; をターゲットにしている場合、宣言ファイルのリストが含まれているため、さらに新しい型宣言があります。</target>
        </trans-unit>
        <trans-unit id="b58ea2ecb9512652cbb7eb35d524285feb8fe024" translate="yes">
          <source>By default, these criteria are:</source>
          <target state="translated">デフォルトでは、これらの基準は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ff5efeabdc4761db17da76ed72cd97d01e3582f0" translate="yes">
          <source>By default, this feature is disabled. To enable it, set a global flag before importing &lt;code&gt;zone-testing&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、この機能は無効になっています。 有効にするには、 &lt;code&gt;zone-testing&lt;/code&gt; をインポートする前にグローバルフラグを設定します 。</target>
        </trans-unit>
        <trans-unit id="737d872d4aa1137431d336c09f5cba06097c9d53" translate="yes">
          <source>By default, this is true, unless a user calls &lt;code&gt;&lt;a href=&quot;enableprodmode&quot;&gt;enableProdMode&lt;/a&gt;&lt;/code&gt; before calling this.</source>
          <target state="translated">デフォルトでは、これを呼び出す前にユーザーが &lt;code&gt;&lt;a href=&quot;enableprodmode&quot;&gt;enableProdMode&lt;/a&gt;&lt;/code&gt; を呼び出さない限り、これはtrueです。</target>
        </trans-unit>
        <trans-unit id="895cfca638aab96c2e4c68a44a374a362e111c0c" translate="yes">
          <source>By default, throws an error when zero items are found. Set the &lt;code&gt;&lt;a href=&quot;animationqueryoptions#optional&quot;&gt;optional&lt;/a&gt;&lt;/code&gt; flag to ignore this error. For example:</source>
          <target state="translated">デフォルトでは、ゼロのアイテムが見つかったときにエラーをスローします。 このエラーを無視するには、 &lt;code&gt;&lt;a href=&quot;animationqueryoptions#optional&quot;&gt;optional&lt;/a&gt;&lt;/code&gt; フラグを設定します。 例えば：</target>
        </trans-unit>
        <trans-unit id="0b38aef427efb542e3ceae80895c955069c64dfc" translate="yes">
          <source>By default, when a translation is missing, the build succeeds but generates a warning such as &lt;code&gt;Missing translation for &lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt; &quot;foo&quot;&lt;/code&gt;. You can configure the level of warning that is generated by the Angular compiler:</source>
          <target state="translated">デフォルトでは、翻訳がない場合、ビルドは成功しますが &lt;code&gt;Missing translation for &lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt; &quot;foo&quot;&lt;/code&gt; などの警告が生成されます 。 Angularコンパイラーによって生成される警告のレベルを構成できます。</target>
        </trans-unit>
        <trans-unit id="3f88cf4b54ca18c2f47342d965f1bdec83e0be88" translate="yes">
          <source>By default, when you use this pattern, you will see a deprecation warning once in dev mode. You can choose to silence this warning by providing a config for &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; at import time:</source>
          <target state="translated">デフォルトでは、このパターンを使用すると、開発モードで非推奨の警告が1回表示されます。 インポート時に &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; の構成を提供することにより、この警告を黙らせることを選択できます。</target>
        </trans-unit>
        <trans-unit id="04e414d22540c0f1ae4f946db786ae55fdc12b7a" translate="yes">
          <source>By default, writes output to a folder named dist/ in the current project.</source>
          <target state="translated">デフォルトでは、現在のプロジェクトのdist /という名前のフォルダーに出力を書き込みます。</target>
        </trans-unit>
        <trans-unit id="acd1c464bf12f5fb5b52349cdf92a0a00b334436" translate="yes">
          <source>By pasting a &quot;deep link&quot; URL into the browser address bar that identifies the hero to display.</source>
          <target state="translated">「ディープリンク」URLをブラウザのアドレスバーに貼り付けて、表示するヒーローを識別します。</target>
        </trans-unit>
        <trans-unit id="bde6963f476446a45cc29e3b93aaf4ef55f49da3" translate="yes">
          <source>By providing &lt;code&gt;VillainsService&lt;/code&gt; in the &lt;code&gt;VillainsListComponent&lt;/code&gt; metadata and nowhere else, the service becomes available only in the &lt;code&gt;VillainsListComponent&lt;/code&gt; and its sub-component tree.</source>
          <target state="translated">&lt;code&gt;VillainsListComponent&lt;/code&gt; メタデータで &lt;code&gt;VillainsService&lt;/code&gt; を提供し、それ以外の場所では提供しないことにより、サービスは &lt;code&gt;VillainsListComponent&lt;/code&gt; とそのサブコンポーネントツリーでのみ利用可能になります。</target>
        </trans-unit>
        <trans-unit id="22e598ce57a7b24da0404d550c8e77311fe81cd0" translate="yes">
          <source>By re-exporting &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, any other module that imports this &lt;code&gt;SharedModule&lt;/code&gt;, gets access to directives like &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and can bind to component properties with &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt;, a directive in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を再エクスポートすることにより、この &lt;code&gt;SharedModule&lt;/code&gt; をインポートする他のモジュールは、 &lt;code&gt;NgFor&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; などのディレクティブにアクセスし、 FormsModuleのディレクティブである &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; でコンポーネントプロパティにバインドできます。</target>
        </trans-unit>
        <trans-unit id="283fdefdd6d1f0a83829f00ef235e73a7152b4e1" translate="yes">
          <source>By setting &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">&lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; メタデータを設定します 。</target>
        </trans-unit>
        <trans-unit id="6cec4402059ea00c6d712a42340d4c89e450d6df" translate="yes">
          <source>By the end of this tutorial you will be able to do the following:</source>
          <target state="translated">このチュートリアルを完了すると、次のことができるようになります。</target>
        </trans-unit>
        <trans-unit id="f210331839801b71d9bdc60036a3a6c72ef3ca14" translate="yes">
          <source>By transcluding or projecting content from the other framework. ngUpgrade bridges the related concepts of AngularJS transclusion and Angular content projection together.</source>
          <target state="translated">他のフレームワークからコンテンツをトランスポーズまたは投影することにより。 ngUpgradeは、AngularJSトランスクルージョンとAngularコンテンツプロジェクションの関連概念を結び付けます。</target>
        </trans-unit>
        <trans-unit id="dadb9f1898ae42aeddccb80695bb2ff36cdd5430" translate="yes">
          <source>By using a component from the other framework: An AngularJS template using an Angular component, or an Angular template using an AngularJS component.</source>
          <target state="translated">他のフレームワークのコンポーネントを使用する：Angularコンポーネントを使用するAngularJSテンプレート、またはAngularJSコンポーネントを使用するAngularテンプレート。</target>
        </trans-unit>
        <trans-unit id="6d317743f301e033fe05c5da5516eefef9fab01e" translate="yes">
          <source>By using the In-memory Web API, you won't have to set up a server to learn about &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">インメモリWeb APIを使用すると、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; について学習するためにサーバーを設定する必要がありません。</target>
        </trans-unit>
        <trans-unit id="24b79b9a8cccf72bf74da2766e3aa142e67bff38" translate="yes">
          <source>Bypass security and trust the given value to be a safe resource URL, i.e. a location that may be used to load executable code from, like &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">セキュリティをバイパスし、指定された値を安全なリソースURL、つまり &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; などの実行可能コードの読み込みに使用できる場所であると信頼します。</target>
        </trans-unit>
        <trans-unit id="3db6a85413c3a62448f8e24b9cd62b97af777782" translate="yes">
          <source>Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used in hyperlinks or &lt;code&gt;&amp;lt;img src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">セキュリティをバイパスし、指定された値を安全なスタイルのURL、つまりハイパーリンクまたは &lt;code&gt;&amp;lt;img src&amp;gt;&lt;/code&gt; で使用できる値であると信頼します。</target>
        </trans-unit>
        <trans-unit id="0a85a9de1b624d9a281f803426a0c32bef3e8171" translate="yes">
          <source>Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML is unsafe (e.g. contains &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags) and the code should be executed. The sanitizer will leave safe HTML intact, so in most situations this method should not be used.</source>
          <target state="translated">セキュリティをバイパスし、指定された値が安全なHTMLであると信頼します。 これは、バインドされたHTMLが安全でない（たとえば &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを含む）場合にのみ使用し、コードを実行する必要があります。 サニタイザーは安全なHTMLをそのまま残すため、ほとんどの場合、このメソッドは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="22734a3b413e2ed5c26b1b233ef8006fccfd2ce7" translate="yes">
          <source>Bypass security and trust the given value to be safe JavaScript.</source>
          <target state="translated">セキュリティをバイパスし、指定された値が安全なJavaScriptであると信頼します。</target>
        </trans-unit>
        <trans-unit id="589711522f3adf8b9c47b84407ddfb6f212d4894" translate="yes">
          <source>Bypass security and trust the given value to be safe style value (CSS).</source>
          <target state="translated">セキュリティをバイパスし、指定された値が安全なスタイル値（CSS）であると信頼します。</target>
        </trans-unit>
        <trans-unit id="8da3c14fe68d007dd948bc0a37349c8d84280bcd" translate="yes">
          <source>Bypass the proxy</source>
          <target state="translated">プロキシをバイパスする</target>
        </trans-unit>
        <trans-unit id="06a4bea2f3447ba097746f02424c164f98dfee16" translate="yes">
          <source>Bypassing the service worker</source>
          <target state="translated">サービスワーカーのバイパス</target>
        </trans-unit>
        <trans-unit id="37a7892d0df4e20dffd1da4a2ba8cfb9cc8d059d" translate="yes">
          <source>CLDR website</source>
          <target state="translated">CLDRウェブサイト</target>
        </trans-unit>
        <trans-unit id="f3f49e2d65f9b334363f376775aeebd652cb905d" translate="yes">
          <source>CLI Overview and Command Reference</source>
          <target state="translated">CLIの概要とコマンドリファレンス</target>
        </trans-unit>
        <trans-unit id="0e92b110d4f6d555eade5dd441fe110ec6d62ab6" translate="yes">
          <source>CLI builders</source>
          <target state="translated">CLIビルダー</target>
        </trans-unit>
        <trans-unit id="6b72ce98d68681f85db235c515ed234796b0ca1c" translate="yes">
          <source>CLI command-language syntax</source>
          <target state="translated">CLIコマンド言語構文</target>
        </trans-unit>
        <trans-unit id="0bf433ec5cf4675ef3c8596d8512dfdab2f6f0fd" translate="yes">
          <source>CLI configuration defaults for all projects in the workspace, including configuration options for build, serve, and test tools that the CLI uses, such as &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;, &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;, and &lt;a href=&quot;http://www.protractortest.org/&quot;&gt;Protractor&lt;/a&gt;. For details, see &lt;a href=&quot;workspace-config&quot;&gt;Angular Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; 、 &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt; 、 &lt;a href=&quot;http://www.protractortest.org/&quot;&gt;Protractor&lt;/a&gt;など、CLIが使用するビルド、サービス、およびテストツールの構成オプションを含む、ワークスペース内のすべてのプロジェクトのCLI構成のデフォルト。 詳細については、「 &lt;a href=&quot;workspace-config&quot;&gt;Angular Workspace Configuration&lt;/a&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="8caf1ee0de7eeac9fea3c587a7f16ec05c4f45cf" translate="yes">
          <source>CLI-generated tests</source>
          <target state="translated">CLIで生成されたテスト</target>
        </trans-unit>
        <trans-unit id="84e0fad234061448b6aeb61b281e3307ef9f497c" translate="yes">
          <source>COMPILER_OPTIONS</source>
          <target state="translated">COMPILER_OPTIONS</target>
        </trans-unit>
        <trans-unit id="6d430c3fc0de431b42a6f7090a75092e0f1d2fc3" translate="yes">
          <source>COMPOSITION_BUFFER_MODE</source>
          <target state="translated">COMPOSITION_BUFFER_MODE</target>
        </trans-unit>
        <trans-unit id="4078e32911d6f5d679797645f636c7e696b15e8e" translate="yes">
          <source>CSS @imports</source>
          <target state="translated">CSS @imports</target>
        </trans-unit>
        <trans-unit id="8341ce8d88650eb66817af40baa993cf445ec2f2" translate="yes">
          <source>CSS classes applied</source>
          <target state="translated">適用されたCSSクラス</target>
        </trans-unit>
        <trans-unit id="b9b5583437724ee43c4c64a2eb01060aaf2595c8" translate="yes">
          <source>CSS grid layout support in Autoprefixer, which was previously on by default, is off by default in Angular 8 and higher.</source>
          <target state="translated">AutoprefixerのCSSグリッドレイアウトサポートは、以前はデフォルトでオンでしたが、Angular 8以降ではデフォルトでオフになっています。</target>
        </trans-unit>
        <trans-unit id="6e11144489b2f269249757fca859d7096307f304" translate="yes">
          <source>CUSTOM_ELEMENTS_SCHEMA</source>
          <target state="translated">CUSTOM_ELEMENTS_SCHEMA</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="4f7d7a23879dbe205ad31457186146482db2c33f" translate="yes">
          <source>Caching an application is like installing a native application. The application is cached as one unit, and all files update together.</source>
          <target state="translated">アプリケーションのキャッシュは、ネイティブアプリケーションのインストールに似ています。 アプリケーションは1つのユニットとしてキャッシュされ、すべてのファイルが一緒に更新されます。</target>
        </trans-unit>
        <trans-unit id="c7dcd8556967edbf9dc15b2dd9c7696a8a73d43b" translate="yes">
          <source>Caching behavior; for example, &lt;code&gt;If-Modified-Since&lt;/code&gt;</source>
          <target state="translated">キャッシュ動作。 たとえば、 &lt;code&gt;If-Modified-Since&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b46de0011e7af89a350bd98b9a1fd29a77cc8cf3" translate="yes">
          <source>Caching layers in between the origin server and the end user could serve stale content.</source>
          <target state="translated">オリジンサーバーとエンドユーザーの間のキャッシングレイヤーは、古いコンテンツを提供する可能性があります。</target>
        </trans-unit>
        <trans-unit id="261eb580b5dbd737463584be0e96288856d0fcff" translate="yes">
          <source>Call &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; methods &lt;em&gt;within&lt;/em&gt; a &lt;code&gt;beforeEach()&lt;/code&gt; to ensure a fresh start before each individual test.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; &lt;em&gt;内で&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; メソッドを呼び出して、個々のテストの前に新たに開始するようにします。</target>
        </trans-unit>
        <trans-unit id="55478a8e2da2b9d13233927ad4ce964932c556ef" translate="yes">
          <source>Call &lt;code&gt;configureTestingModule&lt;/code&gt; to refine the testing module configuration for a particular set of tests by adding and removing imports, declarations (of components, directives, and pipes), and providers.</source>
          <target state="translated">&lt;code&gt;configureTestingModule&lt;/code&gt; を呼び出して、インポート、（コンポーネント、ディレクティブ、およびパイプの）宣言、およびプロバイダーを追加および削除することにより、特定のテストセットのテストモジュール構成を調整します。</target>
        </trans-unit>
        <trans-unit id="8cc3a4f15b0cb9d21d181ba24371c672d6b47e7d" translate="yes">
          <source>Call &lt;code&gt;request.flush()&lt;/code&gt; with an error message, as seen in the following example.</source>
          <target state="translated">次の例に示すように、エラーメッセージを指定して &lt;code&gt;request.flush()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="57c7fc903cfd1566d2b98e6e679bed67b09b10a6" translate="yes">
          <source>Call it in &lt;code&gt;ngOnInit()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; で呼び出します</target>
        </trans-unit>
        <trans-unit id="6027ee4df59b4012aaea1f2c5f4181d0bf2a7184" translate="yes">
          <source>Call it to initialize the component (it calls &lt;code&gt;ngOnInit&lt;/code&gt;) and after your test code, change the component's data bound property values. Angular can't see that you've changed &lt;code&gt;personComponent.name&lt;/code&gt; and won't update the &lt;code&gt;name&lt;/code&gt; binding until you call &lt;code&gt;detectChanges&lt;/code&gt;.</source>
          <target state="translated">これを呼び出してコンポーネントを初期化し（ &lt;code&gt;ngOnInit&lt;/code&gt; を呼び出します ）、テストコードの後に​​、コンポーネントのデータバインドプロパティ値を変更します。 Angularは、 &lt;code&gt;personComponent.name&lt;/code&gt; を変更したことを認識できず、 &lt;code&gt;detectChanges&lt;/code&gt; を呼び出すまで &lt;code&gt;name&lt;/code&gt; バインディングを更新しません。</target>
        </trans-unit>
        <trans-unit id="98e5babeab32e45e806fbc3b19174a99b11c23ca" translate="yes">
          <source>Call within an animation &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call to specify an animation step that applies given style data to the parent animation for a given amount of time.</source>
          <target state="translated">アニメーション &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 呼び出し内で呼び出して、特定のスタイルデータを特定の時間、親アニメーションに適用するアニメーションステップを指定します。</target>
        </trans-unit>
        <trans-unit id="1771add456fd5236fb4ceb3907b9902363284a43" translate="yes">
          <source>Callbacks can serve as a debugging tool, for example in conjunction with &lt;code&gt;console.warn()&lt;/code&gt; to view the application's progress in a browser's Developer JavaScript Console. The following code snippet creates console log output for our original example, a button with the two states of &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt;.</source>
          <target state="translated">コールバックは、たとえば &lt;code&gt;console.warn()&lt;/code&gt; と組み合わせて、ブラウザの開発者JavaScriptコンソールでアプリケーションの進行状況を表示するデバッグツールとして機能します。 次のコードスニペットは、元の例のコンソールログ出力、 &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; の 2つの状態を持つボタンを作成します。</target>
        </trans-unit>
        <trans-unit id="760346b355881672a0a6d496758fb65d68eaf88c" translate="yes">
          <source>Called &lt;em&gt;just before&lt;/em&gt; Angular destroys the directive/component.</source>
          <target state="translated">Angularがディレクティブ/コンポーネントを破棄する&lt;em&gt;直前に&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b43d88a726fcdc88f9eb54c0fd5d13581ff0616e" translate="yes">
          <source>Called &lt;em&gt;once&lt;/em&gt; after the first &lt;code&gt;ngAfterContentChecked()&lt;/code&gt;.</source>
          <target state="translated">最初の &lt;code&gt;ngAfterContentChecked()&lt;/code&gt; 後に1 &lt;em&gt;回&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dec40bf1cbc2faab1a865283dcd9baa5bb7dfd6f" translate="yes">
          <source>Called &lt;em&gt;once&lt;/em&gt; after the first &lt;code&gt;ngDoCheck()&lt;/code&gt;.</source>
          <target state="translated">最初の &lt;code&gt;ngDoCheck()&lt;/code&gt; 後に1 &lt;em&gt;回&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ed61dce56e76b70f3a1dafc6de01c809ad00c2df" translate="yes">
          <source>Called &lt;em&gt;once&lt;/em&gt;, after the &lt;em&gt;first&lt;/em&gt;&lt;code&gt;ngOnChanges()&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;最初の&lt;/em&gt; &lt;code&gt;ngOnChanges()&lt;/code&gt; 後に&lt;em&gt;1&lt;/em&gt; &lt;em&gt;回&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b9940e1eeb5a7c145f2b10ef2094d91adf0e011e" translate="yes">
          <source>Called after &lt;code&gt;ngAfterContentInit&lt;/code&gt; when the component's views and child views / the view that a directive is in has been initialized.</source>
          <target state="translated">コンポーネントのビューと子ビュー/ディレクティブが含まれるビューが初期化されたときに &lt;code&gt;ngAfterContentInit&lt;/code&gt; の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c0e8308ef6731afacab2d2cf1a1d82e6d5d18c59" translate="yes">
          <source>Called after &lt;code&gt;ngOnInit&lt;/code&gt; when the component's or directive's content has been initialized.</source>
          <target state="translated">コンポーネントまたはディレクティブのコンテンツが初期化されたときに &lt;code&gt;ngOnInit&lt;/code&gt; の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3abf88459dea9d48107a15886f727107471dbb96" translate="yes">
          <source>Called after every change to input properties and before processing content or child views.</source>
          <target state="translated">入力プロパティが変更されるたびに、コンテンツまたは子ビューを処理する前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a130609bac88d5543ea30ad6133139b03b01ecf7" translate="yes">
          <source>Called after every check of the component's or directive's content.</source>
          <target state="translated">コンポーネントまたはディレクティブのコンテンツをチェックするたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0a0e3aa13b4388685cf9d7c3507f3e1ee153db1a" translate="yes">
          <source>Called after every check of the component's views and child views / the view that a directive is in.</source>
          <target state="translated">コンポーネントのビューと子ビュー/ディレクティブが含まれているビューをチェックするたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1f8068273dc6ecea537534ade623776122365e21" translate="yes">
          <source>Called after the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; and every subsequent &lt;code&gt;ngAfterContentChecked()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; および後続のすべてのngAfterContentChecked（）の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6b5705918e476cb904b5fa668ed214206ec73591" translate="yes">
          <source>Called after the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; and every subsequent &lt;code&gt;ngDoCheck()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; および後続のすべてのngDoCheck（）の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="60f0d6f5d02969dcc38e9b8f7dab33c5b8ec6a67" translate="yes">
          <source>Called after the constructor, initializing input properties, and the first call to &lt;code&gt;ngOnChanges&lt;/code&gt;.</source>
          <target state="translated">コンストラクター、入力プロパティの初期化、および &lt;code&gt;ngOnChanges&lt;/code&gt; の最初の呼び出しの後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3992a9223eaa475ee02765bb281acfe9016e9587" translate="yes">
          <source>Called before &lt;code&gt;ngOnInit()&lt;/code&gt; and whenever one or more data-bound input properties change.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; 前、および1つ以上のデータバインド入力プロパティが変更されるたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="338e219ba9c4ad2d93a1252ea07e78fcd5812653" translate="yes">
          <source>Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.</source>
          <target state="translated">他のライフサイクルフックの前に呼び出されます。 依存関係を注入するために使用しますが、ここでは重大な作業を避けてください。</target>
        </trans-unit>
        <trans-unit id="079a33e34b46ed902e2756f083cec3f074677ba5" translate="yes">
          <source>Called during every change detection run, immediately after &lt;code&gt;ngOnChanges()&lt;/code&gt; and &lt;code&gt;ngOnInit()&lt;/code&gt;.</source>
          <target state="translated">すべての変更検出実行中に、 &lt;code&gt;ngOnChanges()&lt;/code&gt; および &lt;code&gt;ngOnInit()&lt;/code&gt; 直後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f2a8186d4eef069a787d88d5ad608795d2a3b749" translate="yes">
          <source>Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.</source>
          <target state="translated">コンポーネントまたはディレクティブの入力プロパティがチェックされるたびに呼び出されます。 カスタムチェックを実行して、変更検出を拡張するために使用します。</target>
        </trans-unit>
        <trans-unit id="ded11fd49a01c772c26b4a79906617586dfcc389" translate="yes">
          <source>Called once, before the instance is destroyed.</source>
          <target state="translated">インスタンスが破棄される前に1回呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6370b8dc1866c030c38bf3c5b2f85b9cec9f1e45" translate="yes">
          <source>Called when a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive is destroyed. We need to keep the context as the outlet could be destroyed inside a NgIf and might be re-created later.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; ディレクティブが破棄されると呼び出されます。 NgIf内でアウトレットが破壊され、後で再作成される可能性があるため、コンテキストを保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="e3c27d5c41ab5ae9ad7c8e33864c2395541456d6" translate="yes">
          <source>Called when a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive is instantiated</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; ディレクティブがインスタンス化されるときに呼び出されます</target>
        </trans-unit>
        <trans-unit id="bdc03480e95937267c839f086bcde846aaa91db9" translate="yes">
          <source>Called when the &lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; instructs to detach the subtree</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; がサブツリーをデタッチするように指示したときに呼び出されます</target>
        </trans-unit>
        <trans-unit id="da38a77071e29a9e7664a3315f4f4e75e060eafe" translate="yes">
          <source>Called when the &lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; instructs to re-attach a previously detached subtree</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; が以前に切り離されたサブツリーを再接続するように指示したときに呼び出されます</target>
        </trans-unit>
        <trans-unit id="34fa98865ffd00d148b8d531c88a1378d0836148" translate="yes">
          <source>Called when the corresponding route is deactivated during navigation. Because the component get destroyed, all children outlet are destroyed.</source>
          <target state="translated">ナビゲーション中に対応するルートが非アクティブ化されると呼び出されます。 コンポーネントが破壊されるため、すべての子アウトレットが破壊されます。</target>
        </trans-unit>
        <trans-unit id="e23fcda0d1a865ac392be3ef0e2925a05f5b0881" translate="yes">
          <source>Calling &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; returns the first &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; that matches the &lt;a href=&quot;testing#query-predicate&quot;&gt;predicate&lt;/a&gt; at any depth in the subtree.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; と、サブツリーの任意の深さで&lt;a href=&quot;testing#query-predicate&quot;&gt;述語&lt;/a&gt;に一致する最初のDebugElementが返されます。</target>
        </trans-unit>
        <trans-unit id="a824c35c2959755fd808822de4dedf95fd4d39cb" translate="yes">
          <source>Calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; simulates the passage of time until all pending asynchronous activities finish. In this case, it waits for the error handler's &lt;code&gt;setTimeout()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; 呼び出しは、保留中のすべての非同期アクティビティが完了するまでの時間の経過をシミュレートします。 この場合、エラーハンドラの &lt;code&gt;setTimeout()&lt;/code&gt; 待機します。</target>
        </trans-unit>
        <trans-unit id="a792f34c98efbd65d1a036e7a6d5db68e24cebe7" translate="yes">
          <source>Calling &lt;code&gt;compileComponents()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;compileComponents()&lt;/code&gt; 呼び出し</target>
        </trans-unit>
        <trans-unit id="c9c757d2f6cb308f6cb586c83e9fc16ef99eaa72" translate="yes">
          <source>Calling &lt;code&gt;compileComponents()&lt;/code&gt; closes the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance to further configuration. You cannot call any more &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration methods, not &lt;code&gt;configureTestingModule()&lt;/code&gt; nor any of the &lt;code&gt;override...&lt;/code&gt; methods. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; throws an error if you try.</source>
          <target state="translated">&lt;code&gt;compileComponents()&lt;/code&gt; 呼び出すと、現在の &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インスタンスが閉じられ、さらに設定が行われます。 &lt;code&gt;configureTestingModule()&lt;/code&gt; も &lt;code&gt;override...&lt;/code&gt; メソッドも呼び出さずに、これ以上 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成メソッドを呼び出すことはできません。 試行すると、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="02f2e83289b8c70bc906bf5b04c1061ef6002a40" translate="yes">
          <source>Calling &lt;code&gt;queryAll(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; returns all &lt;code&gt;DebugElements&lt;/code&gt; that matches the &lt;a href=&quot;testing#query-predicate&quot;&gt;predicate&lt;/a&gt; at any depth in subtree.</source>
          <target state="translated">&lt;code&gt;queryAll(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; &lt;code&gt;DebugElements&lt;/code&gt; と、サブツリーの任意の深さで&lt;a href=&quot;testing#query-predicate&quot;&gt;述語&lt;/a&gt;に一致するすべてのDebugElementsが返されます。</target>
        </trans-unit>
        <trans-unit id="c905b75753a481a14356fc6d2b86a0900d82b11b" translate="yes">
          <source>Calling &lt;code&gt;setErrors&lt;/code&gt; also updates the validity of the parent control.</source>
          <target state="translated">&lt;code&gt;setErrors&lt;/code&gt; を呼び出すと、親コントロールの有効性も更新されます。</target>
        </trans-unit>
        <trans-unit id="a1c343329d27e796c6369216dce0e24cb05d5809" translate="yes">
          <source>Calling &lt;code&gt;subscribe(...)&lt;/code&gt; triggers execution of the observable and causes &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to compose and send the HTTP request to the server.</source>
          <target state="translated">&lt;code&gt;subscribe(...)&lt;/code&gt; 呼び出すと、observableの実行がトリガーされ、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; がHTTPリクエストを作成してサーバーに送信します。</target>
        </trans-unit>
        <trans-unit id="ad2dfd54f809b36b4b1c053edef7371ae8619628" translate="yes">
          <source>Calling any of the &lt;code&gt;bypassSecurityTrust...&lt;/code&gt; APIs disables Angular's built-in sanitization for the value passed in. Carefully check and audit all values and code paths going into this call. Make sure any user data is appropriately escaped for this security context. For more detail, see the &lt;a href=&quot;http://g.co/ng/security&quot;&gt;Security Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bypassSecurityTrust...&lt;/code&gt; APIのいずれかを呼び出すと、渡された値に対するAngularのビルトインサニタイズが無効になります。この呼び出しに入るすべての値とコードパスを慎重に確認および監査してください。 このセキュリティコンテキストのユーザーデータが適切にエスケープされていることを確認してください。 詳細については、 &lt;a href=&quot;http://g.co/ng/security&quot;&gt;セキュリティガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bdb81e7cc6d31b5ab7893b8f4c6563164aa2b633" translate="yes">
          <source>Callouts</source>
          <target state="translated">Callouts</target>
        </trans-unit>
        <trans-unit id="9d34b10af87e2cc9ccbc0459df289025ef6c7c79" translate="yes">
          <source>Callouts are meant to grab the user's attention. They are not for casual asides. Please use them sparingly.</source>
          <target state="translated">コールアウトは、ユーザーの注意を引くためのものです。 彼らは偶然の側近のためではありません。 控えめに使用してください。</target>
        </trans-unit>
        <trans-unit id="ab3c3e0b5de6c6e0e7dca5076e6ad88d9df7c7e1" translate="yes">
          <source>Callouts use the same &lt;em&gt;urgency levels&lt;/em&gt; that alerts do.</source>
          <target state="translated">コールアウトは、アラートと同じ&lt;em&gt;緊急度レベル&lt;/em&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="505a7e75cfac8596300522544e26062f958a48a4" translate="yes">
          <source>Callouts, like alerts, are meant to draw attention to important points. Use a callout when you want a riveting header and multi-line content.</source>
          <target state="translated">アラートのようなコールアウトは、重要なポイントに注意を引くことを目的としています。 リベット留めヘッダーと複数行コンテンツが必要な場合は、コールアウトを使用します。</target>
        </trans-unit>
        <trans-unit id="0a19b7e26b2ba75ac27255f31f21e98a34d62953" translate="yes">
          <source>Calls</source>
          <target state="translated">Calls</target>
        </trans-unit>
        <trans-unit id="c7458f20cc67730b3cfc74274de606821b58649f" translate="yes">
          <source>Calls &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; on the view that is leaving, to run its child animations.</source>
          <target state="translated">終了するビューで &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; を呼び出して、その子アニメーションを実行します。</target>
        </trans-unit>
        <trans-unit id="054740b116bb7ad21ec189e277687edb090d5e7a" translate="yes">
          <source>Calls method &lt;code&gt;readRainbow&lt;/code&gt; when a click event is triggered on this button element (or its children) and passes in the event object.</source>
          <target state="translated">このボタン要素（またはその子要素）でクリックイベントがトリガーされ、イベントオブジェクトを渡すと、メソッド &lt;code&gt;readRainbow&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="9ec80b36df3dfad6ec2a2e4c829bb5c8f1486470" translate="yes">
          <source>Calls the &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; method on the new view to run its child animations after the main animation completes.</source>
          <target state="translated">メインアニメーションが完了した後、新しいビューで &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; メソッドを呼び出して、子アニメーションを実行します。</target>
        </trans-unit>
        <trans-unit id="20b5d8714282fb0a73c671dbc1257f65ec30bfa4" translate="yes">
          <source>Can I re-export classes and modules?</source>
          <target state="translated">クラスとモジュールを再エクスポートできますか？</target>
        </trans-unit>
        <trans-unit id="909f15135d74304c1d1061422b73388345640cf1" translate="yes">
          <source>Can be used to instruct the template compiler to produce &lt;code&gt;.metadata.json&lt;/code&gt; files for distribution with an &lt;code&gt;npm&lt;/code&gt; package while avoiding the production of &lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt; files that cannot be distributed to &lt;code&gt;npm&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; パッケージで配布するために &lt;code&gt;.metadata.json&lt;/code&gt; ファイルを生成するようにテンプレートコンパイラに指示し、 npmに配布できない &lt;code&gt;.ngfactory.js&lt;/code&gt; および &lt;code&gt;.ngstyle.js&lt;/code&gt; ファイルの生成を回避するために使用できます。</target>
        </trans-unit>
        <trans-unit id="5f36799879d0cf41af5b4c27f7d960b58598905d" translate="yes">
          <source>Can be used to wrap inject() calls.</source>
          <target state="translated">inject（）呼び出しをラップするために使用できます。</target>
        </trans-unit>
        <trans-unit id="eeca2657940329cf291b081d93f9892584f17b53" translate="yes">
          <source>Can be used together with other parameter decorators that modify how dependency injection operates.</source>
          <target state="translated">依存性注入の動作方法を変更する他のパラメーターデコレーターと併用できます。</target>
        </trans-unit>
        <trans-unit id="b41daf8b17e839983b484ba6d073adc7e542e89e" translate="yes">
          <source>Can change a tax return without affecting a return in another component.</source>
          <target state="translated">別のコンポーネントの申告に影響を与えることなく、確定申告を変更できます。</target>
        </trans-unit>
        <trans-unit id="c9100670ff9a13c528e1d1a5b727b0630c83c454" translate="yes">
          <source>Can contain &lt;em&gt;host views&lt;/em&gt; (created by instantiating a component with the &lt;code&gt;createComponent()&lt;/code&gt; method), and &lt;em&gt;embedded views&lt;/em&gt; (created by instantiating a &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;createEmbeddedView()&lt;/code&gt; method).</source>
          <target state="translated">&lt;em&gt;ホストビュー&lt;/em&gt; （ &lt;code&gt;createComponent()&lt;/code&gt; メソッドを使用してコンポーネントをインスタンス化することによって作成される）および&lt;em&gt;埋め込みビュー&lt;/em&gt; （ &lt;code&gt;createEmbeddedView()&lt;/code&gt; メソッドを使用して &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; をインスタンス化することによって作成される）を含めることができます。</target>
        </trans-unit>
        <trans-unit id="6904ca2fb9f0915a919fc5e9a9879f3583b0ff87" translate="yes">
          <source>Can the user actually select the hero displayed by &lt;code&gt;DashboardHeroComponent&lt;/code&gt;?</source>
          <target state="translated">ユーザーは、 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; によって表示されるヒーローを実際に選択できますか？</target>
        </trans-unit>
        <trans-unit id="180f5279c67f2eeb8b2298fb91ef00bb31f943f7" translate="yes">
          <source>CanActivate</source>
          <target state="translated">CanActivate</target>
        </trans-unit>
        <trans-unit id="503b1aee292a84a5015a1b05f05d75a1b4bb3b78" translate="yes">
          <source>CanActivateChild</source>
          <target state="translated">CanActivateChild</target>
        </trans-unit>
        <trans-unit id="22ee059e4c3b96beb90cacc882d7bc9f311ba0ef" translate="yes">
          <source>CanDeactivate</source>
          <target state="translated">CanDeactivate</target>
        </trans-unit>
        <trans-unit id="a043a9144fd1167b1a2529e7a366de5b9973fd0a" translate="yes">
          <source>CanLoad</source>
          <target state="translated">CanLoad</target>
        </trans-unit>
        <trans-unit id="1fab6a02d9a28f3ff9036951307010813ac79bc0" translate="yes">
          <source>CanLoad blocks preload</source>
          <target state="translated">CanLoadブロックのプリロード</target>
        </trans-unit>
        <trans-unit id="07f74d08e03072e546e3877aef507f93c09e6839" translate="yes">
          <source>Cancel and save</source>
          <target state="translated">キャンセルして保存</target>
        </trans-unit>
        <trans-unit id="b496c07eb5af98f1ed2e504cdf9e47afef8c701c" translate="yes">
          <source>Cancel ongoing AJAX requests if their results will be invalidated by the updated results.</source>
          <target state="translated">更新された結果によって結果が無効になる場合、進行中のAJAXリクエストをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="319aaae4dec46a75861fd10bcf8d182f4a77298d" translate="yes">
          <source>Cancellation</source>
          <target state="translated">Cancellation</target>
        </trans-unit>
        <trans-unit id="bff56e1549fd7a6a5f354ee4a0ca235953d70f07" translate="yes">
          <source>Cannot assign to template variables</source>
          <target state="translated">テンプレート変数に割り当てることができません</target>
        </trans-unit>
        <trans-unit id="0b34940b15c08ee3ff0e607747050d9f6089f16f" translate="yes">
          <source>Capture a state change between any states:</source>
          <target state="translated">状態間の状態の変化をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="d6f2ba4c017e10b7dd998487ea0fdc703f74b715" translate="yes">
          <source>Capture the current value and validation status of a form.</source>
          <target state="translated">フォームの現在の値と検証ステータスをキャプチャします。</target>
        </trans-unit>
        <trans-unit id="58f52ea4cfe6d3f65fa26be21bdbd52f13fb53ea" translate="yes">
          <source>Case study: Building a custom progress bar</source>
          <target state="translated">ケーススタディ：カスタムプログレスバーの構築</target>
        </trans-unit>
        <trans-unit id="6f34f8eb641732996a47d4a852ea593e50abe92e" translate="yes">
          <source>Catch-all state change for when an element is inserted into the page and the destination state is unknown:</source>
          <target state="translated">要素がページに挿入され、宛先の状態が不明な場合のキャッチオール状態の変更：</target>
        </trans-unit>
        <trans-unit id="a3c686e711e4720f99b4562bb3dbaae7ab658cf2" translate="yes">
          <source>Category</source>
          <target state="translated">Category</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="80656e1ac8d7229db56620ded26ed78c22d67a05" translate="yes">
          <source>Certain NgModules, such as &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, implement such a guard. Here is a custom constructor for an NgModule called &lt;code&gt;GreetingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; などの特定のNgModuleは、このようなガードを実装します。 &lt;code&gt;GreetingModule&lt;/code&gt; というNgModuleのカスタムコンストラクターを次に示します。</target>
        </trans-unit>
        <trans-unit id="6e8fee1b61a78b05f3275829dbb034edaa941c4e" translate="yes">
          <source>Certain services, such as the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, only work when you register them in the application root injector.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; などの特定のサービスは、アプリケーションルートインジェクターに登録した場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="480bd17189258d07915ad129dccf24a948c44df7" translate="yes">
          <source>Chaining</source>
          <target state="translated">Chaining</target>
        </trans-unit>
        <trans-unit id="d5d97b4fb4d072582f9b61039d71706e3deb2db1" translate="yes">
          <source>Chaining RxJS operators</source>
          <target state="translated">RxJSオペレーターのチェーン</target>
        </trans-unit>
        <trans-unit id="9700d3ee9c183d3666b2b94f12e30f5e47ca2416" translate="yes">
          <source>Chaining expressions with &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;;&lt;/code&gt; を使用した式の連鎖 または &lt;code&gt;,&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d1cdea71a3322e7230575959abb41daaf51e783" translate="yes">
          <source>Chaining pipes</source>
          <target state="translated">チェーンパイプ</target>
        </trans-unit>
        <trans-unit id="4991d5ea5af682d4bd01c3240e19cd513867cab6" translate="yes">
          <source>Change Detection</source>
          <target state="translated">変更検出</target>
        </trans-unit>
        <trans-unit id="343b1717461275ac4ca7b57386b4e4fd9f50b8f1" translate="yes">
          <source>Change Detection with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; による変更検出</target>
        </trans-unit>
        <trans-unit id="3f8c1160f24c95950eb5896ce2ace4d289f1b622" translate="yes">
          <source>Change an input value with &lt;em&gt;dispatchEvent()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;dispatchEvent（）を使用&lt;/em&gt;して入力値を変更する</target>
        </trans-unit>
        <trans-unit id="3056a3bc48b6af974962366a13a95bb358bd68e6" translate="yes">
          <source>Change detection begins.</source>
          <target state="translated">変更検出が開始されます。</target>
        </trans-unit>
        <trans-unit id="d9c401dce4625f6d4132ee55d56ac329792d87ae" translate="yes">
          <source>Change detection completes.</source>
          <target state="translated">変更検出が完了します。</target>
        </trans-unit>
        <trans-unit id="8f8f51ff0e0f41b2723a3b0ddb1fc762ca1bbe07" translate="yes">
          <source>Change propagation</source>
          <target state="translated">伝播の変更</target>
        </trans-unit>
        <trans-unit id="a69fd5c5cd83b7b0a7e790bf0a78ee6893f67b64" translate="yes">
          <source>Change root relative URLs in stylesheets to include base HREF and deploy URL. Use only for compatibility and transition. The behavior of this option is non-standard and will be removed in the next major release.</source>
          <target state="translated">スタイルシートのルート相対URLを変更して、ベースHREFとデプロイURLを含めます。 互換性と移行のためにのみ使用してください。 このオプションの動作は非標準であり、次のメジャーリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="8babe69a0e11422b542467ffba728e60ba1c55e3" translate="yes">
          <source>Change the &lt;code&gt;admin&lt;/code&gt;&lt;strong&gt;path&lt;/strong&gt; in the &lt;code&gt;admin-routing.module.ts&lt;/code&gt; from &lt;code&gt;'admin'&lt;/code&gt; to an empty string, &lt;code&gt;''&lt;/code&gt;, the &lt;em&gt;empty path&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;admin-routing.module.ts&lt;/code&gt; の &lt;code&gt;admin&lt;/code&gt; &lt;strong&gt;パス&lt;/strong&gt;を &lt;code&gt;'admin'&lt;/code&gt; から空の文字列 &lt;code&gt;''&lt;/code&gt; 、 &lt;em&gt;空のパスに変更します&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d1cabd01ed824d898e58ebeb17c5d4a449cd6cd" translate="yes">
          <source>Change the &lt;code&gt;crisis-center&lt;/code&gt; path in the &lt;code&gt;CrisisCenterRoutingModule&lt;/code&gt; to an empty string.</source>
          <target state="translated">&lt;code&gt;CrisisCenterRoutingModule&lt;/code&gt; の &lt;code&gt;crisis-center&lt;/code&gt; パスを空の文字列に変更します。</target>
        </trans-unit>
        <trans-unit id="434daac2c5b3d1ab473246ae8b1e713c54dc7351" translate="yes">
          <source>Change the &lt;code&gt;selector&lt;/code&gt; to &lt;code&gt;app-hero-list&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; を &lt;code&gt;app-hero-list&lt;/code&gt; に変更します 。</target>
        </trans-unit>
        <trans-unit id="b0dde64b8dbb0bcbea9f57171ea80c7d963b7477" translate="yes">
          <source>Change the application title</source>
          <target state="translated">アプリケーションのタイトルを変更する</target>
        </trans-unit>
        <trans-unit id="9186ea4fea7f7f8a33d6b896351d60a43fdd1cf8" translate="yes">
          <source>Change the component class name to &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">コンポーネントクラス名を &lt;code&gt;HeroListComponent&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="927385537fbe1015a617be665c6693f672fb3a52" translate="yes">
          <source>Change the history state object when called with one parameter and return &lt;code&gt;$location&lt;/code&gt;. The state object is later passed to &lt;code&gt;pushState&lt;/code&gt; or &lt;code&gt;replaceState&lt;/code&gt;.</source>
          <target state="translated">1つのパラメーターで呼び出されたときに履歴状態オブジェクトを変更し、 &lt;code&gt;$location&lt;/code&gt; を返します 。 状態オブジェクトは、後で &lt;code&gt;pushState&lt;/code&gt; または &lt;code&gt;replaceState&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="bfe643cd41ad6bd8325838b21bb5f217bb25eaba" translate="yes">
          <source>Change the name of the property to something non-numeric.</source>
          <target state="translated">プロパティの名前を非数値に変更します。</target>
        </trans-unit>
        <trans-unit id="42c003a9c6e71c4ca88e8ccd27f3508b897ae2a8" translate="yes">
          <source>Change the text &lt;code&gt;Welcome to {{title}}!&lt;/code&gt; to &lt;code&gt;Bienvenue &amp;agrave; {{title}}!&lt;/code&gt;.</source>
          <target state="translated">テキスト &lt;code&gt;Welcome to {{title}}!&lt;/code&gt; 変更します！ &lt;code&gt;Bienvenue &amp;agrave; {{title}}!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8676d4d635410ca2c077409dad69d9f77ca2647f" translate="yes">
          <source>ChangeDetectionStrategy</source>
          <target state="translated">ChangeDetectionStrategy</target>
        </trans-unit>
        <trans-unit id="9610416e7bcb35a070b1afee3e1ecbe89b251021" translate="yes">
          <source>ChangeDetectorRef</source>
          <target state="translated">ChangeDetectorRef</target>
        </trans-unit>
        <trans-unit id="8eb8f6f68f506aa805d98d21bb31757a770f8982" translate="yes">
          <source>Changes can be observed by subscribing to the changes &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; の変更をサブスクライブすることで、変更を確認できます。</target>
        </trans-unit>
        <trans-unit id="e28e885c282bb260b0a322754ee5b453345cab30" translate="yes">
          <source>Changes the browser's URL to a normalized version of a given URL, and pushes a new item onto the platform's history.</source>
          <target state="translated">ブラウザのURLを指定されたURLの正規化されたバージョンに変更し、プラットフォームの履歴に新しいアイテムをプッシュします。</target>
        </trans-unit>
        <trans-unit id="d841e1b40e8a43f3b1d465ce7175f1d1d080099d" translate="yes">
          <source>Changes the browser's URL to a normalized version of the given URL, and replaces the top item on the platform's history stack.</source>
          <target state="translated">ブラウザのURLを指定されたURLの正規化されたバージョンに変更し、プラットフォームの履歴スタックの一番上の項目を置き換えます。</target>
        </trans-unit>
        <trans-unit id="0528bf143935bb6c0e63d6c319330abc5897e287" translate="yes">
          <source>Changes to &lt;code&gt;$location&lt;/code&gt; during the current &lt;code&gt;$digest&lt;/code&gt; will replace the current history record, instead of adding a new one.</source>
          <target state="translated">現在の &lt;code&gt;$digest&lt;/code&gt; 中に &lt;code&gt;$location&lt;/code&gt; 変更すると、新しいレコードが追加されるのではなく、現在の履歴レコードが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="696e045172b10914e55a284add7f292269adccb9" translate="yes">
          <source>Changes to styles elsewhere in the application don't affect the component's styles.</source>
          <target state="translated">アプリケーションの他の場所でスタイルを変更しても、コンポーネントのスタイルには影響しません。</target>
        </trans-unit>
        <trans-unit id="831ab0dd3e14c19a13759f4e73d7a68f79e884a9" translate="yes">
          <source>Changing /heroes to /superheroes</source>
          <target state="translated">/ heroesを/ superheroesに変更する</target>
        </trans-unit>
        <trans-unit id="fcac6dfa3f865ecb219e677bce8f4ac4fd43e75a" translate="yes">
          <source>Changing the observable to be multicasting could look something like this:</source>
          <target state="translated">オブザーバブルをマルチキャストに変更すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="23fafb17a150814dab8b9300a9bdd995dd6aaf3b" translate="yes">
          <source>Changing your app's location</source>
          <target state="translated">アプリの場所を変更する</target>
        </trans-unit>
        <trans-unit id="e688823a84fa6f43670fb82f99c26f690e6bccb5" translate="yes">
          <source>Cheat Sheet</source>
          <target state="translated">カンニングペーパー</target>
        </trans-unit>
        <trans-unit id="99957d5920a0c408d447b33739a6c587076d7c4c" translate="yes">
          <source>Cheat sheet</source>
          <target state="translated">カンニングペーパー</target>
        </trans-unit>
        <trans-unit id="e1aba76971244577871fcf686981c5cf54bbfec3" translate="yes">
          <source>Check all internal dependencies.</source>
          <target state="translated">すべての内部依存関係を確認します。</target>
        </trans-unit>
        <trans-unit id="bd6bd8ea1d42310566ae35ff189fa25bce0739c6" translate="yes">
          <source>Check out &lt;a href=&quot;https://github.com/angular-buch/angular-cli-ghpages&quot;&gt;angular-cli-ghpages&lt;/a&gt;, a full featured package that does all this for you and has extra functionality.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular-buch/angular-cli-ghpages&quot;&gt;angular-cli-ghpagesを&lt;/a&gt;チェックしてください。これはすべての機能を備え、追加機能を備えたフル機能のパッケージです。</target>
        </trans-unit>
        <trans-unit id="92cfb73fbe5a898080633faeb8d721bec2e82d45" translate="yes">
          <source>Check out this full animation &lt;a href=&quot;http://animationsftw.in/#/&quot;&gt;demo&lt;/a&gt; with accompanying &lt;a href=&quot;https://www.youtube.com/watch?v=JhNo3Wvj6UQ&amp;amp;feature=youtu.be&amp;amp;t=2h47m53s&quot;&gt;presentation&lt;/a&gt;, shown at the AngularConnect conference in November 2017.</source>
          <target state="translated">2017年11月に開催されたAngularConnectカンファレンスで紹介された&lt;a href=&quot;https://www.youtube.com/watch?v=JhNo3Wvj6UQ&amp;amp;feature=youtu.be&amp;amp;t=2h47m53s&quot;&gt;プレゼンテーション&lt;/a&gt;と一緒にこの完全なアニメーション&lt;a href=&quot;http://animationsftw.in/#/&quot;&gt;デモ&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c384f9025a9aede92802f2295e03b1a23a81d08b" translate="yes">
          <source>Check self and check parent injector if needed</source>
          <target state="translated">自己を確認し、必要に応じて親インジェクターを確認します</target>
        </trans-unit>
        <trans-unit id="9bf59c30dc2e2cfc9815c66b412795ea380622ec" translate="yes">
          <source>Check the &lt;strong&gt;Offline box&lt;/strong&gt;.</source>
          <target state="translated">[ &lt;strong&gt;オフライン]ボックスを&lt;/strong&gt;オンにし&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="53a91267f194e09a874c756ae0e5cd6fbc5e9b4b" translate="yes">
          <source>Check whether the new value is the first value assigned.</source>
          <target state="translated">新しい値が最初に割り当てられた値であるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f34e8033f22ef7572d3f7bef622110673a0b903e" translate="yes">
          <source>Check whether there is an enabled control with the given name in the group.</source>
          <target state="translated">グループ内に指定された名前の有効なコントロールがあるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="aa5944be645c910b902d4178536960e0dd6bb46e" translate="yes">
          <source>CheckboxControlValueAccessor</source>
          <target state="translated">CheckboxControlValueAccessor</target>
        </trans-unit>
        <trans-unit id="c879093d869ad86b0566a12fe19cb46968467703" translate="yes">
          <source>CheckboxRequiredValidator</source>
          <target state="translated">CheckboxRequiredValidator</target>
        </trans-unit>
        <trans-unit id="78948b2a07ee0efcb3ac6f4a1a272b534d287c7b" translate="yes">
          <source>Checking for updates</source>
          <target state="translated">アップデートの確認</target>
        </trans-unit>
        <trans-unit id="59ac9dbbeb11bfee8438eb0df9da52f319181942" translate="yes">
          <source>Checking your version of Angular</source>
          <target state="translated">Angularのバージョンを確認する</target>
        </trans-unit>
        <trans-unit id="039ccb2918e7c3b5e496faa1cbfa7e89bb915059" translate="yes">
          <source>Checks for existence of a given header.</source>
          <target state="translated">指定されたヘッダーの存在を確認します。</target>
        </trans-unit>
        <trans-unit id="f19cdeb053f13ef119dad6eaba0ab038717b11b2" translate="yes">
          <source>Checks that there currently is a platform which contains the given token as a provider.</source>
          <target state="translated">指定されたトークンをプロバイダーとして含むプラットフォームが現在存在することを確認します。</target>
        </trans-unit>
        <trans-unit id="27e534014d7f6c5ef04a4cb1f5834c05cadd4a7f" translate="yes">
          <source>Checks the change detector and its children, and throws if any changes are detected.</source>
          <target state="translated">変更検出器とその子をチェックし、変更が検出された場合にスローします。</target>
        </trans-unit>
        <trans-unit id="ac7375845b6700eea70b230cf6ef23256bc66b1e" translate="yes">
          <source>Checks this view and its children. Use in combination with &lt;a href=&quot;changedetectorref#detach&quot;&gt;detach&lt;/a&gt; to implement local change detection checks.</source>
          <target state="translated">このビューとその子をチェックします。 &lt;a href=&quot;changedetectorref#detach&quot;&gt;detach&lt;/a&gt;と組み合わせて使用​​して、ローカルの変更検出チェックを実装します。</target>
        </trans-unit>
        <trans-unit id="40446a4774953299d744b037f3fabd61581c55cd" translate="yes">
          <source>Checks whether the two strings are equal</source>
          <target state="translated">2つの文字列が等しいかどうかを確認します</target>
        </trans-unit>
        <trans-unit id="105070f0db5c610c2e3799d698d9f3ec337beb1a" translate="yes">
          <source>Child &lt;code&gt;ModuleInjector&lt;/code&gt;s are created when lazy loading other &lt;code&gt;@NgModules&lt;/code&gt;.</source>
          <target state="translated">子 &lt;code&gt;ModuleInjector&lt;/code&gt; は、他の &lt;code&gt;@NgModules&lt;/code&gt; を遅延読み込みするときに作成されます。</target>
        </trans-unit>
        <trans-unit id="b45018b9cbbbefcc8dbba9b84a7cc1c2fb002971" translate="yes">
          <source>Child interfaces</source>
          <target state="translated">子インターフェース</target>
        </trans-unit>
        <trans-unit id="51d827784282762a77db2ecf655e40e63440b111" translate="yes">
          <source>Child modules and component injectors are independent of each other, and create their own separate instances of the provided services. When Angular destroys an NgModule or component instance, it also destroys that injector and that injector's service instances.</source>
          <target state="translated">子モジュールとコンポーネントインジェクターは互いに独立しており、提供されるサービスの独自の個別のインスタンスを作成します。 AngularがNgModuleまたはコンポーネントインスタンスを破棄すると、そのインジェクターとそのインジェクターのサービスインスタンスも破棄されます。</target>
        </trans-unit>
        <trans-unit id="add021ebee29a859789ac87532524f9916e8f376" translate="yes">
          <source>Child route configuration</source>
          <target state="translated">子ルートの構成</target>
        </trans-unit>
        <trans-unit id="b3dc916760d8ae9ca4995453a2ebc7e0d16f4105" translate="yes">
          <source>Child routes (the &lt;em&gt;Crisis Center&lt;/em&gt; has its own routes).</source>
          <target state="translated">子ルート（ &lt;em&gt;Crisis Centerに&lt;/em&gt;は独自のルートがあります）。</target>
        </trans-unit>
        <trans-unit id="3ae7a7e0215bdbccdaa70a62527624da49d7b032" translate="yes">
          <source>Child routing component</source>
          <target state="translated">子ルーティングコンポーネント</target>
        </trans-unit>
        <trans-unit id="b39289ca7dd8c2d34548ec58a2bd80a309b34054" translate="yes">
          <source>ChildActivationEnd</source>
          <target state="translated">ChildActivationEnd</target>
        </trans-unit>
        <trans-unit id="4fba8126259467946ad228f3bbc5ad08bcc49f2a" translate="yes">
          <source>ChildActivationStart</source>
          <target state="translated">ChildActivationStart</target>
        </trans-unit>
        <trans-unit id="597f94e85e956cc34d0e81bd2267a3d55397342d" translate="yes">
          <source>ChildrenOutletContexts</source>
          <target state="translated">ChildrenOutletContexts</target>
        </trans-unit>
        <trans-unit id="7a500f7710fc992ffd582db793ce56b2deb14e80" translate="yes">
          <source>Chinese Simplified</source>
          <target state="translated">中国語（簡体字</target>
        </trans-unit>
        <trans-unit id="475bd05d677945b1aa0853356a8a8a2f5ba3dccb" translate="yes">
          <source>Chinese Traditional</source>
          <target state="translated">中国の伝統的な</target>
        </trans-unit>
        <trans-unit id="7f76285d4993d793b551055eee78e271b1ac0fb6" translate="yes">
          <source>Chinese Traditional Hong Kong</source>
          <target state="translated">繁体字香港</target>
        </trans-unit>
        <trans-unit id="17c5aee7d1808096ae2d774042d1f051379d83ae" translate="yes">
          <source>Choose one pattern or the other and follow that pattern consistently.</source>
          <target state="translated">いずれかのパターンを選択し、一貫してそのパターンに従います。</target>
        </trans-unit>
        <trans-unit id="6b9e178bd0af63fe006adcde0a8d9cf243536ca1" translate="yes">
          <source>Choosing a compiler</source>
          <target state="translated">コンパイラーの選択</target>
        </trans-unit>
        <trans-unit id="ce5ea27fc9f713601c67aa8664fbea01d4964a0b" translate="yes">
          <source>Choosing a strategy begins with understanding the strengths and weaknesses of the options presented. Low-level API and form model access, predictability, mutability, straightforward validation and testing strategies, and scalability are all important considerations in choosing the infrastructure you use to build your forms in Angular. Template-driven forms are similar to patterns in AngularJS, but they have limitations given the criteria of many modern, large-scale Angular apps. Reactive forms minimize these limitations. Reactive forms integrate with reactive patterns already present in other areas of the Angular architecture, and complement those requirements well.</source>
          <target state="translated">戦略の選択は、提示されたオプションの長所と短所を理解することから始まります。 低レベルのAPIおよびフォームモデルへのアクセス、予測可能性、可変性、簡単な検証およびテスト戦略、およびスケーラビリティはすべて、Angularでフォームを構築するために使用するインフラストラクチャを選択する際の重要な考慮事項です。 テンプレート駆動フォームは、AngularJSのパターンに似ていますが、多くの最新の大規模なAngularアプリの基準を考えると、制限があります。 リアクティブフォームはこれらの制限を最小限に抑えます。 リアクティブフォームは、Angularアーキテクチャの他の領域に既に存在するリアクティブパターンと統合し、それらの要件を十分に補完します。</target>
        </trans-unit>
        <trans-unit id="218e75c7a912404b048fff0747e40108873b6334" translate="yes">
          <source>Chrome</source>
          <target state="translated">Chrome</target>
        </trans-unit>
        <trans-unit id="db7a66fee54cb2c0a49086533407c84c154c93b6" translate="yes">
          <source>Chrome, Firefox, Edge,  Safari, Android, IE 10+</source>
          <target state="translated">Chrome、Firefox、Edge、Safari、Android、IE 10+</target>
        </trans-unit>
        <trans-unit id="41ff354b2b330bd1f8a0587675e43cb32a731f33" translate="yes">
          <source>Class</source>
          <target state="translated">Class</target>
        </trans-unit>
        <trans-unit id="8154a233a656dec9151d776f59d14b5ece214584" translate="yes">
          <source>Class binding</source>
          <target state="translated">クラスバインディング</target>
        </trans-unit>
        <trans-unit id="b3f6bf21bd790c8c0ca4c69e84a202669b340aec" translate="yes">
          <source>Class binding syntax resembles property binding, but instead of an element property between brackets, start with the prefix &lt;code&gt;class&lt;/code&gt;, optionally followed by a dot (&lt;code&gt;.&lt;/code&gt;) and the name of a CSS class: &lt;code&gt;[class.class-name]&lt;/code&gt;.</source>
          <target state="translated">クラスバインディング構文はプロパティバインディングに似ていますが、角括弧で囲まれた要素プロパティの代わりに、接頭辞 &lt;code&gt;class&lt;/code&gt; で始まり、オプションでドット（ &lt;code&gt;.&lt;/code&gt; ）とCSSクラスの名前が続きます： &lt;code&gt;[class.class-name]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e08bce289f366c056ecd9ce1d6fbabe31242faa" translate="yes">
          <source>Class decorators</source>
          <target state="translated">クラスデコレータ</target>
        </trans-unit>
        <trans-unit id="ead76f2265a0d81882e6ad9f43d58b17ab60cd2e" translate="yes">
          <source>Class field decorators for directives and components</source>
          <target state="translated">ディレクティブとコンポーネントのクラスフィールドデコレーター</target>
        </trans-unit>
        <trans-unit id="bd8d578a2c9be2adfd97344aa626fa426c36137a" translate="yes">
          <source>Class if false</source>
          <target state="translated">falseの場合のクラス</target>
        </trans-unit>
        <trans-unit id="37f4d9eb1a6cf37d8d57164c8727fe1da9d6c802" translate="yes">
          <source>Class if true</source>
          <target state="translated">真の場合のクラス</target>
        </trans-unit>
        <trans-unit id="703e9eebcf42bdd8b7a0a6b496df19654d526ebe" translate="yes">
          <source>Class implementations</source>
          <target state="translated">クラス実装</target>
        </trans-unit>
        <trans-unit id="00e4305e03e0dd23aa189c7dfb11b275650b4811" translate="yes">
          <source>Class interface</source>
          <target state="translated">クラスインターフェイス</target>
        </trans-unit>
        <trans-unit id="5a80022dc562a4854ed320709d4e5f295abcbf93" translate="yes">
          <source>Class names and selectors are local to the component and don't collide with classes and selectors used elsewhere in the application.</source>
          <target state="translated">クラス名とセレクターはコンポーネントに対してローカルであり、アプリケーションの他の場所で使用されるクラスとセレクターと衝突しません。</target>
        </trans-unit>
        <trans-unit id="e25ec41c9f0b314b93d2865f50d88ae917e6ff6e" translate="yes">
          <source>Class providers with dependencies</source>
          <target state="translated">依存関係を持つクラスプロバイダー</target>
        </trans-unit>
        <trans-unit id="2ce2b7d2960a43ff91bdce39b41516a092f557c0" translate="yes">
          <source>Class providers: &lt;code&gt;useClass&lt;/code&gt;</source>
          <target state="translated">クラスプロバイダー： &lt;code&gt;useClass&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d75f311366207e7e2aa503909afb6f888aa1e24b" translate="yes">
          <source>Class to instantiate for the &lt;code&gt;token&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;token&lt;/code&gt; をインスタンス化するクラス。</target>
        </trans-unit>
        <trans-unit id="c81eac26029ad80be2ecb31b3a105a54bd607ca4" translate="yes">
          <source>ClassProvider</source>
          <target state="translated">ClassProvider</target>
        </trans-unit>
        <trans-unit id="4ad4dcce4a04b908b87b184e0e237aaad3f93967" translate="yes">
          <source>ClassSansProvider</source>
          <target state="translated">ClassSansProvider</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="c6251b998cd47a22f6f10a241477788107ff1abe" translate="yes">
          <source>Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers to avoid memory leaks.</source>
          <target state="translated">Angularがディレクティブ/コンポーネントを破棄する直前にクリーンアップします。 Observableのサブスクライブを解除し、イベントハンドラーをデタッチして、メモリリークを回避します。</target>
        </trans-unit>
        <trans-unit id="ce5079dd77d657c0cf099c0418da34731184f7b0" translate="yes">
          <source>Clearing secondary routes</source>
          <target state="translated">セカンダリルートのクリア</target>
        </trans-unit>
        <trans-unit id="5db54a049d498c60f89ca10bde98edb2d6069ad2" translate="yes">
          <source>Clearing the request body</source>
          <target state="translated">リクエスト本文をクリアする</target>
        </trans-unit>
        <trans-unit id="cf50fa318db0085017303d0a35f24a05f1663bbc" translate="yes">
          <source>Clearly, some values benefit from a bit of editing. You may notice that you desire many of the same transformations repeatedly, both within and across many applications. You can almost think of them as styles. In fact, you might like to apply them in your HTML templates as you do styles.</source>
          <target state="translated">明らかに、いくつかの値は少しの編集の恩恵を受けます。 多くのアプリケーション内およびアプリケーション間で、同じ変換の多くを繰り返し望むことに気付くかもしれません。 それらはほとんどスタイルと考えることができます。 実際、スタイルを実行するときに、それらをHTMLテンプレートに適用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="026c9a5b393972d1b74e879509efaf02047efffd" translate="yes">
          <source>Clears all caches.</source>
          <target state="translated">すべてのキャッシュをクリアします。</target>
        </trans-unit>
        <trans-unit id="b1ad879d1b6ba3a92ecf85c2bf72ec70799ba4b4" translate="yes">
          <source>Clears out the shared fake async zone for a test. To be called in a global &lt;code&gt;beforeEach&lt;/code&gt;.</source>
          <target state="translated">テストのために共有された偽の非同期ゾーンをクリアします。 グローバル &lt;code&gt;beforeEach&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3da02b23929580e57414dead83052520181965c8" translate="yes">
          <source>Clears the cache for the given component/ngModule.</source>
          <target state="translated">指定されたコンポーネント/ ngModuleのキャッシュをクリアします。</target>
        </trans-unit>
        <trans-unit id="1ceee3f3ff9ea2b24225f5c50bf87f4ef4199c6e" translate="yes">
          <source>Click &quot;Buy&quot; to add the product to the cart.</source>
          <target state="translated">[購入]をクリックして、商品をカートに追加します。</target>
        </trans-unit>
        <trans-unit id="f84c2305c2632803a02e65fcadee7fbd81e73dfa" translate="yes">
          <source>Click &quot;Checkout&quot; to see the cart.</source>
          <target state="translated">「チェックアウト」をクリックしてカートを表示します。</target>
        </trans-unit>
        <trans-unit id="83429308d7a703087079aed854d4057e2973e9c0" translate="yes">
          <source>Click OK to close the dialog.</source>
          <target state="translated">[OK]をクリックしてダイアログを閉じます。</target>
        </trans-unit>
        <trans-unit id="a6b80126611af848948c0c6774dbd3810ab84e9a" translate="yes">
          <source>Click inside the name box, then click outside it.</source>
          <target state="translated">名前ボックスの内側をクリックしてから、外側をクリックします。</target>
        </trans-unit>
        <trans-unit id="25323834f15a5cdd5d9c332bdf408c9fad445293" translate="yes">
          <source>Click links on the page and the browser navigates to a new page.</source>
          <target state="translated">ページ上のリンクをクリックすると、ブラウザが新しいページに移動します。</target>
        </trans-unit>
        <trans-unit id="9a0294549b373fb604bb541a36952363ee1e0c0d" translate="yes">
          <source>Click links on the page, and the browser navigates to a new page.</source>
          <target state="translated">ページ上のリンクをクリックすると、ブラウザが新しいページに移動します。</target>
        </trans-unit>
        <trans-unit id="81d717da4be4f860e0609091c741c5e385bc988d" translate="yes">
          <source>Click on &quot;My Store&quot; to go to the product list page.</source>
          <target state="translated">[マイストア]をクリックして、製品リストページに移動します。</target>
        </trans-unit>
        <trans-unit id="a7c86dcc2337bad128a9e7611b8fe25cad3729d0" translate="yes">
          <source>Click on a product name to display its details.</source>
          <target state="translated">製品名をクリックして詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="61f156fc0205f2cf0b5cf9f3f4c67e5de0395f6e" translate="yes">
          <source>Click on the &quot;Checkout&quot; button to see the updated cart. (Remember that changing the app causes the preview to refresh, which empties the cart.)</source>
          <target state="translated">「チェックアウト」ボタンをクリックして、更新されたカートを確認します。 （アプリを変更するとプレビューが更新され、カートが空になることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="a780f7c233867ca1d42bf0443d903007584aa372" translate="yes">
          <source>Click on the Orders or Customers button. If you see a chunk appear, everything is wired up properly and the feature module is being lazy loaded. A chunk should appear for Orders and for Customers but will only appear once for each.</source>
          <target state="translated">[注文]または[顧客]ボタンをクリックします。 チャンクが表示される場合は、すべてが適切に接続されており、機能モジュールが遅延ロードされています。 チャンクは注文と顧客に表示されるはずですが、それぞれに1回だけ表示されます。</target>
        </trans-unit>
        <trans-unit id="86f4b3cfca3cd1f70a3cc2d66645da062b527d2b" translate="yes">
          <source>Click on the link to navigate to the shipping prices.</source>
          <target state="translated">リンクをクリックして、配送価格に移動します。</target>
        </trans-unit>
        <trans-unit id="d7cc08c66323eccb2590d691177ee8938357b986" translate="yes">
          <source>Click the &quot;Buy&quot; button. The product is added to the stored list of items in the cart, and a message is displayed.</source>
          <target state="translated">[購入]ボタンをクリックします。 製品がカート内の保存されたアイテムのリストに追加され、メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="72e67d710f138d2b710872747ba7ea759254edd1" translate="yes">
          <source>Click the &lt;code&gt;Refresh&lt;/code&gt; icon in Solution Explorer.</source>
          <target state="translated">ソリューションエクスプローラーで[ &lt;code&gt;Refresh&lt;/code&gt; ]アイコンをクリックします。</target>
        </trans-unit>
        <trans-unit id="16411a223f86d4e726b416df57543b1081256a5e" translate="yes">
          <source>Click the &lt;code&gt;Show &lt;a href=&quot;visual-studio-2015&quot;&gt;All&lt;/a&gt; Files&lt;/code&gt; button in Solution Explorer to reveal all of the hidden files in the project.</source>
          <target state="translated">ソリューションエクスプローラーの[ &lt;code&gt;Show &lt;a href=&quot;visual-studio-2015&quot;&gt;All&lt;/a&gt; Files&lt;/code&gt; 表示]ボタンをクリックして、プロジェクト内のすべての隠しファイルを表示します。</target>
        </trans-unit>
        <trans-unit id="cf2ced5bb5829ad40830165be365705611673e8b" translate="yes">
          <source>Click the &lt;em&gt;Heroes&lt;/em&gt; link and look at the URL again.</source>
          <target state="translated">&lt;em&gt;Heroes&lt;/em&gt;リンクをクリックして、URLをもう一度見てください。</target>
        </trans-unit>
        <trans-unit id="c249fbe128a1032fa4f807ec53c9425bc77a9b75" translate="yes">
          <source>Click the &lt;strong&gt;DEBUG&lt;/strong&gt; button; it opens a new browser tab and re-runs the tests.</source>
          <target state="translated">[ &lt;strong&gt;デバッグ&lt;/strong&gt; ]ボタンをクリックします。 新しいブラウザタブが開き、テストが再実行されます。</target>
        </trans-unit>
        <trans-unit id="77e578611e4803016143a92e1ef69e1623c79dcb" translate="yes">
          <source>Click the browser's back and forward buttons and the browser navigates backward and forward through the history of pages you've seen.</source>
          <target state="translated">ブラウザの[戻る]ボタンと[進む]ボタンをクリックすると、ブラウザは表示したページの履歴を前後にナビゲートします。</target>
        </trans-unit>
        <trans-unit id="ceea20d77290f0cb78d5f302dff2055b8d170030" translate="yes">
          <source>Click the browser's back and forward buttons, and the browser navigates backward and forward through the history of pages you've seen.</source>
          <target state="translated">ブラウザの[戻る]ボタンと[進む]ボタンをクリックすると、ブラウザは閲覧したページの履歴を前後にナビゲートします。</target>
        </trans-unit>
        <trans-unit id="c3c0280b7777b8cef4c29b98f8d337fb8e934ef7" translate="yes">
          <source>Click the element</source>
          <target state="translated">要素をクリックします</target>
        </trans-unit>
        <trans-unit id="950e0a5a7930594e16bd57f00c733233272c41ae" translate="yes">
          <source>Click the link. The address bar updates to &lt;code&gt;/heroes&lt;/code&gt; and the list of heroes appears.</source>
          <target state="translated">リンクをクリックしてください。 アドレスバーが &lt;code&gt;/heroes&lt;/code&gt; 更新され、ヒーローのリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="09703d1ff01a59ef498218efeacdae1639095d1f" translate="yes">
          <source>Clicking</source>
          <target state="translated">Clicking</target>
        </trans-unit>
        <trans-unit id="1da2ea4a87d6f19823b803f949be3d7491916217" translate="yes">
          <source>Clicking a button triggers emission of a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, the boolean &lt;em&gt;payload&lt;/em&gt;.</source>
          <target state="translated">ボタンをクリックすると、ブール&lt;em&gt;ペイロード&lt;/em&gt;である &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; の放出がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="bb49b11f73402cdd0bffcf5889ea5a109de39f23" translate="yes">
          <source>Clicking a button, an anchor, or an arbitrary HTML element is a common test task.</source>
          <target state="translated">ボタン、アンカー、または任意のHTML要素をクリックすることは、一般的なテストタスクです。</target>
        </trans-unit>
        <trans-unit id="9e48257c907b0db2169f81abb1cd380daa59c644" translate="yes">
          <source>Clicking a hero item now does nothing. You'll &lt;a href=&quot;toh-pt5#heroes-component-links&quot;&gt;fix that shortly&lt;/a&gt; after you enable routing to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">ヒーローアイテムをクリックしても何も起こりません。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; へのルーティングを有効にしたら&lt;a href=&quot;toh-pt5#heroes-component-links&quot;&gt;すぐ&lt;/a&gt;に修正します。</target>
        </trans-unit>
        <trans-unit id="c5a1b225039f1d739bb3ad5c0e447f8353e3f6c3" translate="yes">
          <source>Clicking a hero on the Heroes page does nothing.</source>
          <target state="translated">ヒーローページでヒーローをクリックしても何も起こりません。</target>
        </trans-unit>
        <trans-unit id="8c4d1f403e12c12ef8797335854dcbcd6dfc676b" translate="yes">
          <source>Clicking the &quot;Back&quot; button returns you to the Dashboard. Links at the top take you to either of the main views. If you click &quot;Heroes,&quot; the app displays the &quot;Heroes&quot; master list view.</source>
          <target state="translated">[戻る]ボタンをクリックすると、ダッシュボードに戻ります。 上部のリンクをクリックすると、いずれかのメインビューに移動できます。 [ヒーロー]をクリックすると、アプリに[ヒーロー]マスターリストビューが表示されます。</target>
        </trans-unit>
        <trans-unit id="3931f42f723a39b2782772fe00cbe5cefdd4bca6" translate="yes">
          <source>Clicking the &quot;send&quot; or &quot;cancel&quot; buttons &lt;em&gt;does&lt;/em&gt; clear the popup view. To see how, look at the &lt;code&gt;closePopup()&lt;/code&gt; method again:</source>
          <target state="translated">[送信]または[キャンセル]ボタンをクリックすると、ポップアップビュー&lt;em&gt;が&lt;/em&gt;クリアされます。 方法を確認するには、 &lt;code&gt;closePopup()&lt;/code&gt; メソッドをもう一度見てください。</target>
        </trans-unit>
        <trans-unit id="bedc0826561d31a8b6c6010ebae551f66676ec2d" translate="yes">
          <source>Clicking the anchor should trigger the &lt;code&gt;onClick()&lt;/code&gt; method, which sets the stub's telltale &lt;code&gt;navigatedTo&lt;/code&gt; property. Tests inspect &lt;code&gt;navigatedTo&lt;/code&gt; to confirm that clicking the anchor set the expected route definition.</source>
          <target state="translated">アンカーをクリックすると &lt;code&gt;onClick()&lt;/code&gt; メソッドがトリガーされ、スタブのtelltale &lt;code&gt;navigatedTo&lt;/code&gt; プロパティが設定されます。 テストでは、 &lt;code&gt;navigatedTo&lt;/code&gt; を検査して、アンカーをクリックすると予想されるルート定義が設定されたことを確認します。</target>
        </trans-unit>
        <trans-unit id="833d3dfcf8141f8ab032d805db00496f93b18f57" translate="yes">
          <source>Clicking the buttons updates the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; via the two-way binding. The revised &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; value flows through to the &lt;em&gt;style&lt;/em&gt; binding, making the displayed text bigger or smaller.</source>
          <target state="translated">ボタンをクリックすると、双方向バインディングを介して &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; が更新されます。 改訂された &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; 値は&lt;em&gt;スタイル&lt;/em&gt;バインディングに流れ、表示されるテキストを大きくしたり小さくしたりします。</target>
        </trans-unit>
        <trans-unit id="ce15a56b0476c91447205e4359b504b835e90758" translate="yes">
          <source>Clicking the first link opens the code sample on StackBlitz in a new browser tab.</source>
          <target state="translated">最初のリンクをクリックすると、新しいブラウザタブでStackBlitzのコードサンプルが開きます。</target>
        </trans-unit>
        <trans-unit id="7b9d81bfcc7b8b133f0723740f8c5243f83c2166" translate="yes">
          <source>Clicking the hero should raise a &lt;code&gt;selected&lt;/code&gt; event that the host component (&lt;code&gt;DashboardComponent&lt;/code&gt; presumably) can hear:</source>
          <target state="translated">ヒーローをクリックすると、ホストコンポーネント（おそらく &lt;code&gt;DashboardComponent&lt;/code&gt; ）が聞くことができる &lt;code&gt;selected&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="6c2cb6b6d4534d0f7d4f44550ee1cd3f63622c02" translate="yes">
          <source>Client-server interaction</source>
          <target state="translated">クライアントとサーバーの相互作用</target>
        </trans-unit>
        <trans-unit id="3d05b7f9deccb2161007447387fcc1ecd84c7c85" translate="yes">
          <source>ClientMessageBroker</source>
          <target state="translated">ClientMessageBroker</target>
        </trans-unit>
        <trans-unit id="e7cb0d70d74fee09271bd2dc0ab81ce5975a34ae" translate="yes">
          <source>ClientMessageBrokerFactory</source>
          <target state="translated">ClientMessageBrokerFactory</target>
        </trans-unit>
        <trans-unit id="d8cdb573350de78596e4852bc9cacfc94e8d17ed" translate="yes">
          <source>Clone</source>
          <target state="translated">Clone</target>
        </trans-unit>
        <trans-unit id="9c510c50acb1cdb4194bcb189503fb557b8f0d1d" translate="yes">
          <source>Close the application tab, but not the window. This should also close the Developer Tools.</source>
          <target state="translated">アプリケーションタブを閉じますが、ウィンドウは閉じません。 これにより、開発者ツールも閉じられます。</target>
        </trans-unit>
        <trans-unit id="22f63b79b03d3993269429e6178e7579689d4daf" translate="yes">
          <source>Closest replacement in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt; 最も近い置換</target>
        </trans-unit>
        <trans-unit id="e671772e24b04909f77713dfe4745675929c9db3" translate="yes">
          <source>Closest replacement in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 最も近い置換</target>
        </trans-unit>
        <trans-unit id="3e26d090c81cd0ae4e4685584b8cbc871399a5ff" translate="yes">
          <source>Code Tabs</source>
          <target state="translated">コードタブ</target>
        </trans-unit>
        <trans-unit id="fb03260f7d7c972c5f881252a1bf5974c61308ba" translate="yes">
          <source>Code associated with a component that defines how to render the component's &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;.</source>
          <target state="translated">コンポーネントの&lt;a href=&quot;glossary#view&quot;&gt;ビュー&lt;/a&gt;をレンダリングする方法を定義するコンポーネントに関連付けられたコード。</target>
        </trans-unit>
        <trans-unit id="26f8d7e5de50c48432a82b39f956846ac9a3edf2" translate="yes">
          <source>Code coverage enforcement</source>
          <target state="translated">コードカバレッジの実施</target>
        </trans-unit>
        <trans-unit id="f46c72bf4ae7eb48d96f55e4013ee3f2d7142778" translate="yes">
          <source>Code example</source>
          <target state="translated">コード例</target>
        </trans-unit>
        <trans-unit id="7f24c84fb8f4849c887796b363e0764aa6358136" translate="yes">
          <source>Code folding</source>
          <target state="translated">コードの折りたたみ</target>
        </trans-unit>
        <trans-unit id="c7d0e7e0e4dd707c2571466fd21232a0c600fae4" translate="yes">
          <source>Code review</source>
          <target state="translated">コードレビュー</target>
        </trans-unit>
        <trans-unit id="6e9e83946f82934cc9af7eabf849f56e5568af17" translate="yes">
          <source>Code samples are located in sub-folders of the &lt;code&gt;content/examples&lt;/code&gt; directory of the &lt;code&gt;angular/angular&lt;/code&gt; repository. An example folder name should be the same as the guide page it supports.</source>
          <target state="translated">コードサンプルは、 &lt;code&gt;angular/angular&lt;/code&gt; リポジトリの &lt;code&gt;content/examples&lt;/code&gt; ディレクトリのサブフォルダーにあります。 フォルダー名の例は、サポートするガイドページと同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="e41d178927f51afd0c45ad6d7fa26a126615f9ca" translate="yes">
          <source>Code snippet from a file</source>
          <target state="translated">ファイルからのコードスニペット</target>
        </trans-unit>
        <trans-unit id="224c92aae86d4dcbe90c7f9da817abd49a68a22a" translate="yes">
          <source>Code snippet markup is always in the form of a comment. Here's the default &lt;em&gt;docregion&lt;/em&gt; markup for a TypeScript or JavaScript file:</source>
          <target state="translated">コードスニペットマークアップは常にコメントの形式です。 TypeScriptまたはJavaScriptファイルのデフォルトの&lt;em&gt;docregion&lt;/em&gt;マークアップは&lt;em&gt;次のとおり&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="12290540d14510f52b7f0030a442c0c44cb71ecb" translate="yes">
          <source>Code snippet markup is not supported for JSON files because comments are forbidden in JSON files.</source>
          <target state="translated">JSONファイルではコメントが禁止されているため、JSONファイルではコードスニペットマークアップはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="98236b3d17ceed033b542d4613eb46ba6e125324" translate="yes">
          <source>Code snippet markup is not supported in JSON files because comments are forbidden in JSON files. See &lt;a href=&quot;docs-style-guide#json-files&quot;&gt;below&lt;/a&gt; for details and workarounds.</source>
          <target state="translated">JSONファイルではコメントが禁止されているため、JSONファイルではコードスニペットマークアップはサポートされていません。 詳細と回避策については、 &lt;a href=&quot;docs-style-guide#json-files&quot;&gt;以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b2f3eed2a4a45d8750a9e33d1ea2457771c53179" translate="yes">
          <source>Code snippets</source>
          <target state="translated">コードスニペット</target>
        </trans-unit>
        <trans-unit id="ac2970f6e6c3e24b562997868c5c1c3fdd412357" translate="yes">
          <source>Code snippets and code samples</source>
          <target state="translated">コードスニペットとコードサンプル</target>
        </trans-unit>
        <trans-unit id="1c800abf691fed44650ecde40fa2cf5185767d18" translate="yes">
          <source>Code tabs display code much like &lt;em&gt;code examples&lt;/em&gt; do. The added advantage is that they can display multiple code samples within a tabbed interface. Each tab is displayed using &lt;em&gt;code pane&lt;/em&gt;.</source>
          <target state="translated">コードタブには、 &lt;em&gt;コード例の&lt;/em&gt;ように&lt;em&gt;コードが&lt;/em&gt;表示されます。 追加の利点は、タブ付きインターフェイス内で複数のコードサンプルを表示できることです。 各タブは、 &lt;em&gt;コードペイン&lt;/em&gt;を使用して表示されます。</target>
        </trans-unit>
        <trans-unit id="c7ddc435fb2f971e641394b8fc884d949522ab45" translate="yes">
          <source>Code that defines the transformation logic for a named schematic.</source>
          <target state="translated">名前付き回路図の変換ロジックを定義するコード。</target>
        </trans-unit>
        <trans-unit id="24a9b1e9a69e6a776df404d65c076ef88075529c" translate="yes">
          <source>Code-example attributes</source>
          <target state="translated">コード例の属性</target>
        </trans-unit>
        <trans-unit id="205fb81b522095ce244f559338855e2127cf2d16" translate="yes">
          <source>Code-pane attributes</source>
          <target state="translated">コードペインの属性</target>
        </trans-unit>
        <trans-unit id="1b719f3a5e89b82f76e2afe3515e95ab5698cea1" translate="yes">
          <source>Code-tabs attributes</source>
          <target state="translated">コードタブ属性</target>
        </trans-unit>
        <trans-unit id="8011ac79125624099e9d32e8ef670f86528c2033" translate="yes">
          <source>Codelyzer</source>
          <target state="translated">Codelyzer</target>
        </trans-unit>
        <trans-unit id="4da50236eb720bd1413455d107dba335697d2a6a" translate="yes">
          <source>Collection contents</source>
          <target state="translated">収集内容</target>
        </trans-unit>
        <trans-unit id="e8caf58ebc2730336f5d66018e3945727efc9abc" translate="yes">
          <source>CollectionChangeRecord</source>
          <target state="translated">CollectionChangeRecord</target>
        </trans-unit>
        <trans-unit id="db316d38e0f2c64e217b3a2605bcc3104e4dc570" translate="yes">
          <source>Combination</source>
          <target state="translated">Combination</target>
        </trans-unit>
        <trans-unit id="2d4444c960a283390201d4508071d4dfe606c872" translate="yes">
          <source>Combination of NgModuleFactory and ComponentFactorys.</source>
          <target state="translated">NgModuleFactoryとComponentFactoryの組み合わせ。</target>
        </trans-unit>
        <trans-unit id="96027d3744e326ba68544f30c3f8c184f6f702c7" translate="yes">
          <source>Combining fragments</source>
          <target state="translated">フラグメントの結合</target>
        </trans-unit>
        <trans-unit id="edd1876ade856fe13c97a7af4232c252d357d410" translate="yes">
          <source>Combining wildcard and void states</source>
          <target state="translated">ワイルドカード状態と無効状態の組み合わせ</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes">
          <source>Command</source>
          <target state="translated">Command</target>
        </trans-unit>
        <trans-unit id="40a13131a199f7ed2b2e53bae9c0a5634c9185ef" translate="yes">
          <source>Command Overview</source>
          <target state="translated">コマンドの概要</target>
        </trans-unit>
        <trans-unit id="28d23da4f1861c2de251864384cc90103263376a" translate="yes">
          <source>Command syntax is shown as follows:</source>
          <target state="translated">コマンド構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b0136eb7ffb449c2fa1b21274a97fdd8125ef15a" translate="yes">
          <source>Commands that create or operate on apps and libraries (such as &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;generate&lt;/code&gt;) must be executed from within a workspace folder.</source>
          <target state="translated">アプリやライブラリを作成または操作するコマンド（ &lt;code&gt;add&lt;/code&gt; や &lt;code&gt;generate&lt;/code&gt; など ）は、ワークスペースフォルダー内から実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="63648a31e444c32ef66681b6888f0fca2836a055" translate="yes">
          <source>Commit your changes and push.</source>
          <target state="translated">変更をコミットしてプッシュします。</target>
        </trans-unit>
        <trans-unit id="30f749ce740e43f064650c91d9a8aebd2ae4577f" translate="yes">
          <source>Common foundation</source>
          <target state="translated">共通の基盤</target>
        </trans-unit>
        <trans-unit id="044d38e8939c8f6fc027ea1c90729d6aca7109d3" translate="yes">
          <source>Common operators</source>
          <target state="translated">一般的な演算子</target>
        </trans-unit>
        <trans-unit id="badb8aff5ba142329a4ad7b62d8078cf42193553" translate="yes">
          <source>CommonModule</source>
          <target state="translated">CommonModule</target>
        </trans-unit>
        <trans-unit id="61c86ad5105299805677289b9b80314247887cba" translate="yes">
          <source>Compare to &lt;a href=&quot;glossary#aot&quot;&gt;ahead-of-time (AOT) compilation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#aot&quot;&gt;事前（AOT）コンパイルと&lt;/a&gt;比較してください。</target>
        </trans-unit>
        <trans-unit id="25d26218f8a73479c8f90335a3a6a00b6f337b22" translate="yes">
          <source>Compare to &lt;a href=&quot;glossary#custom-element&quot;&gt;custom element&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#custom-element&quot;&gt;カスタム要素と&lt;/a&gt;比較してください。</target>
        </trans-unit>
        <trans-unit id="c022e170fda3db787738674a20dda4b677e11ddc" translate="yes">
          <source>Compare to &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModuleと&lt;/a&gt;比較してください 。</target>
        </trans-unit>
        <trans-unit id="ca9d691190a1543ad5b5951dda02661148f1dad1" translate="yes">
          <source>Compare using the form builder to creating the instances manually.</source>
          <target state="translated">フォームビルダーを使用して、インスタンスを手動で作成することと比較してください。</target>
        </trans-unit>
        <trans-unit id="4d3180d25790308ffef9fbe2de02c0c538d01c88" translate="yes">
          <source>Compare with the less preferred &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata alternative.</source>
          <target state="translated">優先度の低い &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; メタデータの選択肢と比較してください。</target>
        </trans-unit>
        <trans-unit id="231783f3babfb643d604e3827c29b662da5ecc82" translate="yes">
          <source>Comparing dates inside fakeAsync()</source>
          <target state="translated">fakeAsync（）内の日付の比較</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="1b02994ca75141a94477242c55d0ff492b4469de" translate="yes">
          <source>Compatibility note: The primary goal of the backward compatibility promise is to ensure that changes in the core framework and tooling don't break the existing ecosystem of components and applications and don't put undue upgrade/migration burden on Angular application and component authors.</source>
          <target state="translated">互換性に関する注意：下位互換性の約束の主な目的は、コアフレームワークとツールの変更がコンポーネントとアプリケーションの既存のエコシステムを壊さないようにし、Angularアプリケーションとコンポーネント作成者に過度のアップグレード/移行の負担をかけないことです。</target>
        </trans-unit>
        <trans-unit id="7351891215f76c0244ff90f141a455e333b9ba9d" translate="yes">
          <source>Compilation phases</source>
          <target state="translated">コンパイル段階</target>
        </trans-unit>
        <trans-unit id="b23c833bc98e34fcc44de353781870a6809c2ce3" translate="yes">
          <source>Compile components with a &lt;code&gt;templateUrl&lt;/code&gt; for the test's NgModule. It is necessary to call this function as fetching urls is asynchronous.</source>
          <target state="translated">テストのNgModuleの &lt;code&gt;templateUrl&lt;/code&gt; を使用してコンポーネントをコンパイルします。 URLの取得は非同期であるため、この関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="b1e019565fd0e122114fad2a76572cafa4c0d552" translate="yes">
          <source>Compile the testing module asynchronously after you've finished configuring it. You &lt;strong&gt;must&lt;/strong&gt; call this method if &lt;em&gt;any&lt;/em&gt; of the testing module components have a &lt;code&gt;templateUrl&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; because fetching component template and style files is necessarily asynchronous. See &lt;a href=&quot;testing#compile-components&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">設定が完了したら、テストモジュールを非同期にコンパイルします。 コンポーネントテンプレートとスタイルファイルの取得は必ず非同期であるため、テストモジュールコンポーネントの&lt;em&gt;いずれか&lt;/em&gt;に &lt;code&gt;templateUrl&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; がある場合&lt;em&gt;、&lt;/em&gt;このメソッドを呼び出す必要があります。 &lt;a href=&quot;testing#compile-components&quot;&gt;上記を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="341a20e237ff5c4b89204a3d4d8c8af5f8aa63bb" translate="yes">
          <source>Compiler</source>
          <target state="translated">Compiler</target>
        </trans-unit>
        <trans-unit id="a4ff411395a91d5b1dc79f3d1278e69cf04aa8b5" translate="yes">
          <source>CompilerFactory</source>
          <target state="translated">CompilerFactory</target>
        </trans-unit>
        <trans-unit id="4dc2ee3abd448529e3588f53e80d60d1f5288a64" translate="yes">
          <source>CompilerOptions</source>
          <target state="translated">CompilerOptions</target>
        </trans-unit>
        <trans-unit id="1b49f0cb07fed5cfdb96ce2bba96d96a96d357fa" translate="yes">
          <source>Compiles an Angular app into an output directory named dist/ at the given output path. Must be executed from within a workspace directory.</source>
          <target state="translated">Angularアプリを、指定された出力パスにあるdist /という名前の出力ディレクトリにコンパイルします。 ワークスペースディレクトリ内から実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="14f023360e44232d193e338a890e4c19d000308a" translate="yes">
          <source>Compiles the application with the &lt;a href=&quot;glossary#jit&quot;&gt;JIT compiler&lt;/a&gt; and &lt;a href=&quot;bootstrapping&quot;&gt;bootstraps&lt;/a&gt; the application's main module (&lt;code&gt;AppModule&lt;/code&gt;) to run in the browser. The JIT compiler is a reasonable choice during the development of most projects and it's the only viable choice for a sample running in a &lt;em&gt;live-coding&lt;/em&gt; environment such as Stackblitz. Alternative &lt;a href=&quot;aot-compiler&quot;&gt;compilation&lt;/a&gt;, &lt;a href=&quot;build&quot;&gt;build&lt;/a&gt;, and &lt;a href=&quot;deployment&quot;&gt;deployment&lt;/a&gt; options are available.</source>
          <target state="translated">&lt;a href=&quot;glossary#jit&quot;&gt;JITコンパイラーで&lt;/a&gt;アプリケーションをコンパイルし、アプリケーションのメインモジュール（ &lt;code&gt;AppModule&lt;/code&gt; ）を&lt;a href=&quot;bootstrapping&quot;&gt;ブートストラップ&lt;/a&gt;して、ブラウザーで実行します。 JITコンパイラーは、ほとんどのプロジェクトの開発において妥当な選択肢であり、Stackblitzなどの&lt;em&gt;ライブコーディング&lt;/em&gt;環境で実行されるサンプルにとって唯一の実行可能な選択肢です。 代替の&lt;a href=&quot;aot-compiler&quot;&gt;コンパイル&lt;/a&gt; 、 &lt;a href=&quot;build&quot;&gt;ビルド&lt;/a&gt; 、および&lt;a href=&quot;deployment&quot;&gt;展開&lt;/a&gt;オプションが利用可能です。</target>
        </trans-unit>
        <trans-unit id="50708126059fa40a6b557ef77b37be70a346beb5" translate="yes">
          <source>Compiles the given NgModule and all of its components</source>
          <target state="translated">指定されたNgModuleとそのすべてのコンポーネントをコンパイルします</target>
        </trans-unit>
        <trans-unit id="73b7b9c6e3ac2f9105c846798742f2893a8be9e7" translate="yes">
          <source>Compiles the given NgModule and all of its components. All templates of the components listed in &lt;code&gt;entryComponents&lt;/code&gt; have to be inlined.</source>
          <target state="translated">指定されたNgModuleとそのすべてのコンポーネントをコンパイルします。 &lt;code&gt;entryComponents&lt;/code&gt; にリストされているコンポーネントのすべてのテンプレートはインライン化する必要があります。</target>
        </trans-unit>
        <trans-unit id="de39b9b91b8f7180a411b770d0b07b5599e52b42" translate="yes">
          <source>Completions lists</source>
          <target state="translated">完了リスト</target>
        </trans-unit>
        <trans-unit id="8888e0cf1a2c2fd0498704b282ff6ffc60e95cb3" translate="yes">
          <source>Complex animation Sequences</source>
          <target state="translated">複雑なアニメーションシーケンス</target>
        </trans-unit>
        <trans-unit id="6c208d675cf6c07a5ea2f5b619875954f7edeb3a" translate="yes">
          <source>Complex animation sequences</source>
          <target state="translated">複雑なアニメーションシーケンス</target>
        </trans-unit>
        <trans-unit id="38bb4df6bab9aede2293cef9b9ad58be0b3a29a1" translate="yes">
          <source>Complex animations can have many things happening at once. But what if you want to create an animation involving several animations happening one after the other? Earlier we used &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; to run multiple animations all at the same time, in parallel.</source>
          <target state="translated">複雑なアニメーションでは、一度に多くのことが起こります。 しかし、次々に発生する複数のアニメーションを含むアニメーションを作成する場合はどうでしょうか？ 以前は、 &lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt;を使用して複数のアニメーションをすべて同時に並行して実行しました。</target>
        </trans-unit>
        <trans-unit id="e7b80648a434b40526c0d9e8ab3bbc1771baf9d8" translate="yes">
          <source>Complex configuration values</source>
          <target state="translated">複雑な構成値</target>
        </trans-unit>
        <trans-unit id="c92c529e0731c57efd7550480196484040b33c3e" translate="yes">
          <source>Component</source>
          <target state="translated">Component</target>
        </trans-unit>
        <trans-unit id="516d8480c6ea7e5e78171eef9373ac7cd5f70db0" translate="yes">
          <source>Component (B) is the parent of another component (C) that defines its own, even &lt;em&gt;more specialized&lt;/em&gt; provider for &lt;code&gt;CarService&lt;/code&gt;.</source>
          <target state="translated">コンポーネント（B）は別のコンポーネント（C）の親であり、独自の &lt;code&gt;CarService&lt;/code&gt; &lt;em&gt;専用の&lt;/em&gt;プロバイダーを定義します。</target>
        </trans-unit>
        <trans-unit id="6c6a824a16623ee0b32f2357a8d7b8db120fe3be" translate="yes">
          <source>Component DOM testing</source>
          <target state="translated">コンポーネントDOMテスト</target>
        </trans-unit>
        <trans-unit id="8ea7f737b1c6dd041d0d69bb58b053702ef34738" translate="yes">
          <source>Component Interaction</source>
          <target state="translated">コンポーネントの相互作用</target>
        </trans-unit>
        <trans-unit id="1119a03609be0e26f0b83ce1b815ac1ef4ba2995" translate="yes">
          <source>Component Styles</source>
          <target state="translated">コンポーネントスタイル</target>
        </trans-unit>
        <trans-unit id="ca7585be91ae5aa056821ee74e95e1de1b09310c" translate="yes">
          <source>Component Test Basics</source>
          <target state="translated">コンポーネントテストの基本</target>
        </trans-unit>
        <trans-unit id="fc991f93e2c88dc262e01671c09afbe0757e6c8e" translate="yes">
          <source>Component Test Scenarios</source>
          <target state="translated">コンポーネントテストのシナリオ</target>
        </trans-unit>
        <trans-unit id="fd40a457b9e4e1afef35a0f7de1f3f1f701d052a" translate="yes">
          <source>Component binding</source>
          <target state="translated">コンポーネントのバインド</target>
        </trans-unit>
        <trans-unit id="cd24457c9b7dc7ba1d421757845f793c80019fa2" translate="yes">
          <source>Component class</source>
          <target state="translated">コンポーネントクラス</target>
        </trans-unit>
        <trans-unit id="78197fcc61b947f45c6d27cabc4c7c8a26dd350e" translate="yes">
          <source>Component class testing</source>
          <target state="translated">コンポーネントクラスのテスト</target>
        </trans-unit>
        <trans-unit id="edd1cb80eef428ae3b3e4c894c36b107b7a92287" translate="yes">
          <source>Component configuration</source>
          <target state="translated">コンポーネント構成</target>
        </trans-unit>
        <trans-unit id="e403eb48a3799fbeef85de47dee17fd3567678c4" translate="yes">
          <source>Component custom prefix</source>
          <target state="translated">コンポーネントのカスタムプレフィックス</target>
        </trans-unit>
        <trans-unit id="92223451f571ab07fa63eb6c4fdc64e185de9c7d" translate="yes">
          <source>Component decorator</source>
          <target state="translated">コンポーネントデコレータ</target>
        </trans-unit>
        <trans-unit id="4b156bc6b7215149af0299458e72e26181d26575" translate="yes">
          <source>Component directives &lt;strong&gt;should not&lt;/strong&gt; use the following attributes:</source>
          <target state="translated">コンポーネントディレクティブ&lt;strong&gt;では&lt;/strong&gt; 、次の属性を使用し&lt;strong&gt;ないでください&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="1b2c144285210dd5bbe0792678f5f896a79660c5" translate="yes">
          <source>Component directives may also use the following attributes:</source>
          <target state="translated">コンポーネントディレクティブでは、次の属性も使用できます。</target>
        </trans-unit>
        <trans-unit id="c54468e20f7644178b82ade992718614d8369ce7" translate="yes">
          <source>Component inside a test host</source>
          <target state="translated">テストホスト内のコンポーネント</target>
        </trans-unit>
        <trans-unit id="c5b6cd1c5c2fe07aede776527928b5d7682adba2" translate="yes">
          <source>Component lifecycle hooks overview</source>
          <target state="translated">コンポーネントライフサイクルフックの概要</target>
        </trans-unit>
        <trans-unit id="d04d57678cf109bf45daef3aa34052f94933e2d0" translate="yes">
          <source>Component marble tests</source>
          <target state="translated">コンポーネントマーブルテスト</target>
        </trans-unit>
        <trans-unit id="9e6c549ff22b030abd1a117d74976137e2550458" translate="yes">
          <source>Component metadata</source>
          <target state="translated">コンポーネントのメタデータ</target>
        </trans-unit>
        <trans-unit id="ad800316fe97dc21af2417441adf06059ed33e1e" translate="yes">
          <source>Component outputs are dispatched as HTML &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent&quot;&gt;Custom Events&lt;/a&gt;, with the name of the custom event matching the output name. For example, for a component with &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;() valueChanged = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt;, the corresponding custom element will dispatch events with the name &quot;valueChanged&quot;, and the emitted data will be stored on the event&amp;rsquo;s &lt;code&gt;detail&lt;/code&gt; property. If you provide an alias, that value is used; for example, &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;('myClick') clicks = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&amp;lt;string&amp;gt;();&lt;/code&gt; results in dispatch events with the name &quot;myClick&quot;.</source>
          <target state="translated">コンポーネントの出力はHTML &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent&quot;&gt;カスタムイベント&lt;/a&gt;としてディスパッチされ、カスタムイベントの名前は出力名と一致します。 たとえば、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;() valueChanged = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt; コンポーネントの場合、対応するカスタム要素は「valueChanged」という名前のイベントをディスパッチし、発行されたデータはイベントの &lt;code&gt;detail&lt;/code&gt; プロパティに保存されます。 エイリアスを指定すると、その値が使用されます。 たとえば、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;('myClick') clicks = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&amp;lt;string&amp;gt;();&lt;/code&gt; 「myClick」という名前のイベントをディスパッチします。</target>
        </trans-unit>
        <trans-unit id="a9ea9312f0e536e509ee307db80d647c47b6a4a7" translate="yes">
          <source>Component selectors</source>
          <target state="translated">コンポーネントセレクター</target>
        </trans-unit>
        <trans-unit id="8863b469cad5dc791fae35412b4254fed7745b28" translate="yes">
          <source>Component styles have a few special &lt;em&gt;selectors&lt;/em&gt; from the world of shadow DOM style scoping (described in the &lt;a href=&quot;https://www.w3.org/TR/css-scoping-1&quot;&gt;CSS Scoping Module Level 1&lt;/a&gt; page on the &lt;a href=&quot;https://www.w3.org&quot;&gt;W3C&lt;/a&gt; site). The following sections describe these selectors.</source>
          <target state="translated">コンポーネントスタイルには、シャドウDOMスタイルスコープの世界からいくつかの特別な&lt;em&gt;セレクター&lt;/em&gt;があります（ &lt;a href=&quot;https://www.w3.org&quot;&gt;W3C&lt;/a&gt;サイトの&lt;a href=&quot;https://www.w3.org/TR/css-scoping-1&quot;&gt;CSSスコープモジュールレベル1&lt;/a&gt;ページで説明されています）。 以下のセクションでは、これらのセレクターについて説明します。</target>
        </trans-unit>
        <trans-unit id="c446f8314ac20002e5ecf53891c030438828a2ec" translate="yes">
          <source>Component styles normally apply only to the HTML in the component's own template.</source>
          <target state="translated">コンポーネントスタイルは通常、コンポーネント自体のテンプレート内のHTMLにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="ea2ecee4a949dbf40e4abdfb3f361cc06d154b19" translate="yes">
          <source>Component templates are not always fixed. An application may need to load new components at runtime.</source>
          <target state="translated">コンポーネントテンプレートは常に修正されるとは限りません。 アプリケーションは、実行時に新しいコンポーネントをロードする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="fadc85e8437b1cdd7af92ff5b173596395910c6e" translate="yes">
          <source>Component templates often have nested components, whose templates may contain more components.</source>
          <target state="translated">コンポーネントテンプレートには多くの場合、ネストされたコンポーネントがあり、そのテンプレートにはさらに多くのコンポーネントが含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="43652ff79cfd8f9d0118ca00f815b83151f09899" translate="yes">
          <source>Component with a dependency</source>
          <target state="translated">依存関係のあるコンポーネント</target>
        </trans-unit>
        <trans-unit id="9b8bf28b2e5f05d7a69da7a49da675689404155c" translate="yes">
          <source>Component with async service</source>
          <target state="translated">非同期サービスを備えたコンポーネント</target>
        </trans-unit>
        <trans-unit id="41ed493fa280ebc7f4b7605ea8c601d5796f60cb" translate="yes">
          <source>Component with external files</source>
          <target state="translated">外部ファイルを持つコンポーネント</target>
        </trans-unit>
        <trans-unit id="a68b8dbf2387ec137e9b2d3fc6b9da1e905d6b34" translate="yes">
          <source>Component with inputs and outputs</source>
          <target state="translated">入力と出力を備えたコンポーネント</target>
        </trans-unit>
        <trans-unit id="e1236f7608681ed2a1269df0535b9888ff0c1324" translate="yes">
          <source>Component-less route: grouping routes without a component</source>
          <target state="translated">コンポーネントなしのルート：コンポーネントなしのルートのグループ化</target>
        </trans-unit>
        <trans-unit id="685f6e115c5169adc25a44d77aed6eb00bc124cb" translate="yes">
          <source>ComponentFactory</source>
          <target state="translated">ComponentFactory</target>
        </trans-unit>
        <trans-unit id="86525493504d87a98402483f8c3054424e31bb06" translate="yes">
          <source>ComponentFactoryResolver</source>
          <target state="translated">ComponentFactoryResolver</target>
        </trans-unit>
        <trans-unit id="5a101fd475d77eb764e9fed972a6bbd46bc80495" translate="yes">
          <source>ComponentFixture</source>
          <target state="translated">ComponentFixture</target>
        </trans-unit>
        <trans-unit id="12e293c8cf590c8746d84456b1dc0aa586f017de" translate="yes">
          <source>ComponentFixtureAutoDetect</source>
          <target state="translated">ComponentFixtureAutoDetect</target>
        </trans-unit>
        <trans-unit id="e14a2773bbf3d8a6ab2a1d8aa1ed7bae8a0f0c06" translate="yes">
          <source>ComponentFixtureNoNgZone</source>
          <target state="translated">ComponentFixtureNoNgZone</target>
        </trans-unit>
        <trans-unit id="06e98cec7c3eaf575c1d34319d462717d0387fe3" translate="yes">
          <source>ComponentRef</source>
          <target state="translated">ComponentRef</target>
        </trans-unit>
        <trans-unit id="ad6c4b6618cfc741ae22fbd010f4d93752f06491" translate="yes">
          <source>Componentless Routes</source>
          <target state="translated">コンポーネントレスルート</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="04871d72df14f67889a30f54a88254070cdbf35d" translate="yes">
          <source>Components and the DOM</source>
          <target state="translated">コンポーネントとDOM</target>
        </trans-unit>
        <trans-unit id="3ec4533ed719f39b381cbdfc417b27788619074f" translate="yes">
          <source>Components are directives, and the &lt;code&gt;providers&lt;/code&gt; option is inherited from &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;. You can also configure providers for directives and pipes at the same level as the component.</source>
          <target state="translated">コンポーネントはディレクティブであり、 &lt;code&gt;providers&lt;/code&gt; オプションは &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; から継承されます。 コンポーネントと同じレベルでディレクティブとパイプのプロバイダーを構成することもできます。</target>
        </trans-unit>
        <trans-unit id="7b6ccc6716d5ea20911cd8f2b468603ff8cc07e3" translate="yes">
          <source>Components are normally marked as dirty (in need of rerendering) when inputs have changed or events have fired in the view. Call this method to ensure that a component is checked even if these triggers have not occured.</source>
          <target state="translated">通常、コンポーネントは、入力が変更されたとき、またはビューでイベントが発生したときにダーティ（再レンダリングが必要）としてマークされます。 これらのトリガーが発生していなくても、コンポーネントがチェックされるようにするには、このメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="111fdb54ac7de4a5014fda70ad4653ce5adce0c1" translate="yes">
          <source>Components are the most basic UI building block of an Angular app. An Angular app contains a tree of Angular components.</source>
          <target state="translated">コンポーネントは、Angularアプリの最も基本的なUI構築ブロックです。 Angularアプリには、Angularコンポーネントのツリーが含まれています。</target>
        </trans-unit>
        <trans-unit id="82e8f3bc2333c7cc18c50daf6aa116204f2ef464" translate="yes">
          <source>Components are used in your templates, as in the following example:</source>
          <target state="translated">次の例のように、コンポーネントはテンプレートで使用されます。</target>
        </trans-unit>
        <trans-unit id="69dc5e05a59cdc6a7dabbb6d83c2adc09bba15dc" translate="yes">
          <source>Components as elements</source>
          <target state="translated">要素としてのコンポーネント</target>
        </trans-unit>
        <trans-unit id="a6e394315dc7817973d18be1e075c8e2dd6217e7" translate="yes">
          <source>Components define &lt;em&gt;views&lt;/em&gt;, which are sets of screen elements that Angular can choose among and modify according to your program logic and data.</source>
          <target state="translated">コンポーネントは&lt;em&gt;ビューを&lt;/em&gt;定義し&lt;em&gt;ます&lt;/em&gt; 。これは、Angularがプログラムロジックとデータに応じて選択および変更できる画面要素のセットです。</target>
        </trans-unit>
        <trans-unit id="584e4a632efc57983135945abb97b1a89e6f3c71" translate="yes">
          <source>Components in external modules continue to receive the instance provided by their injectors.</source>
          <target state="translated">外部モジュールのコンポーネントは、インジェクターによって提供されるインスタンスを引き続き受け取ります。</target>
        </trans-unit>
        <trans-unit id="7084833ae18593d05fba020fc794dab748ba3ed2" translate="yes">
          <source>Components in route definitions are also &lt;em&gt;entry components&lt;/em&gt;. A route definition refers to a component by its &lt;em&gt;type&lt;/em&gt;. The router ignores a routed component's selector, if it even has one, and loads the component dynamically into a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルート定義のコンポーネントも&lt;em&gt;エントリーコンポーネント&lt;/em&gt;です。 ルート定義は&lt;em&gt;タイプ&lt;/em&gt;によってコンポーネントを示します。 ルーターは、ルーティングされたコンポーネントのセレクター（ある場合）を無視し、コンポーネントを &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; に動的にロードします。</target>
        </trans-unit>
        <trans-unit id="43f2f799d4b9ac0bf7ee88c6bd79441decb0f884" translate="yes">
          <source>Components often have service dependencies.</source>
          <target state="translated">多くの場合、コンポーネントにはサービスの依存関係があります。</target>
        </trans-unit>
        <trans-unit id="9cd4f8b0ba0728b87ad402a9c2782f583d5ae1fd" translate="yes">
          <source>Components should expose their interactions through inputs for providing context, and outputs for communicating events to other components.</source>
          <target state="translated">コンポーネントは、コンテキストを提供するための入力、およびイベントを他のコンポーネントと通信するための出力を介して相互作用を公開する必要があります。</target>
        </trans-unit>
        <trans-unit id="408fdb18600b6c51987875e2857d0bd7de437dc5" translate="yes">
          <source>Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data. They should focus on presenting data and delegate data access to a service.</source>
          <target state="translated">コンポーネントは、データを直接取得したり保存したりしてはならず、偽のデータを故意に提示してはなりません。 データの提示に重点を置き、データアクセスをサービスに委任する必要があります。</target>
        </trans-unit>
        <trans-unit id="0fd8d99abc38e74108276aa2bf4da03f77f0284d" translate="yes">
          <source>Components that are only loaded dynamically by the router or by bootstrapping. Such &lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;entry components&lt;/a&gt; can never be selected in another component's template. While there's no harm in exporting them, there's also no benefit.</source>
          <target state="translated">ルーターまたはブートストラップによってのみ動的にロードされるコンポーネント。 このような&lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;エントリコンポーネント&lt;/a&gt;は、別のコンポーネントのテンプレートでは選択できません。 それらをエクスポートしても害はありませんが、メリットもありません。</target>
        </trans-unit>
        <trans-unit id="537c22bb75822c4c36bedeb23ff56c63634900e8" translate="yes">
          <source>Components use &lt;em&gt;services&lt;/em&gt;, which provide specific functionality not directly related to views. Service providers can be &lt;em&gt;injected&lt;/em&gt; into components as &lt;em&gt;dependencies&lt;/em&gt;, making your code modular, reusable, and efficient.</source>
          <target state="translated">コンポーネントは、ビューに直接関連しない特定の機能を提供する&lt;em&gt;サービスを&lt;/em&gt;使用します。 サービスプロバイダーを&lt;em&gt;依存関係&lt;/em&gt;としてコンポーネントに&lt;em&gt;注入&lt;/em&gt;して、コードをモジュール化して再利用可能かつ効率的にすることができます。</target>
        </trans-unit>
        <trans-unit id="0a95007464d33e889aaba72bdf85c74650118684" translate="yes">
          <source>Components with &lt;code&gt;RouterLink&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;RouterLink&lt;/code&gt; を備えたコンポーネント</target>
        </trans-unit>
        <trans-unit id="ccedd94d6bed4d22293639bbe5172d0520a683ac" translate="yes">
          <source>Components&amp;mdash;directives with a template.</source>
          <target state="translated">コンポーネント-テンプレート付きのディレクティブ。</target>
        </trans-unit>
        <trans-unit id="613ad0917443866a4cb165203f1ee52098da7920" translate="yes">
          <source>Components, directives, and pipes must belong to &lt;em&gt;exactly&lt;/em&gt; one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported directly or indirectly from another module.</source>
          <target state="translated">コンポーネント、ディレクティブ、およびパイプは、1つのモジュールに属している必要があります。 複数のモジュールで同じクラスを宣言しようとすると、コンパイラはエラーを出力します。 別のモジュールから直接または間接的にインポートされたクラスを再宣言しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="7e4bfab1753d945b45d24b8a8f9b694887544a20" translate="yes">
          <source>Compose multiple async validators into a single function that returns the union of the individual error objects for the provided control.</source>
          <target state="translated">複数の非同期検証ツールを、提供されたコントロールの個々のエラーオブジェクトの和集合を返す単一の関数に構成します。</target>
        </trans-unit>
        <trans-unit id="713796f29d99bd25c93da871cdbfc3841e1f3dd4" translate="yes">
          <source>Compose multiple validators into a single function that returns the union of the individual error maps for the provided control.</source>
          <target state="translated">提供されたコントロールの個々のエラーマップの和集合を返す単一の関数に複数のバリデーターを作成します。</target>
        </trans-unit>
        <trans-unit id="d9a25d5f8a23e5ca75242aa5e2740c8f9f249d5f" translate="yes">
          <source>Composing multiple streams</source>
          <target state="translated">複数のストリームを作成する</target>
        </trans-unit>
        <trans-unit id="4099139a76dd41e01b827890573d000064768d5d" translate="yes">
          <source>Compute a difference between the previous state and the new &lt;code&gt;object&lt;/code&gt; state.</source>
          <target state="translated">前の状態と新しい &lt;code&gt;object&lt;/code&gt; 状態の差を計算します 。</target>
        </trans-unit>
        <trans-unit id="9131da43681025794422d5020969e00fe64736c6" translate="yes">
          <source>Computer notation for exponential value (n times a power of 10). Example: 1.2E3</source>
          <target state="translated">指数値（10のn倍）のコンピューター表記。 例：1.2E3</target>
        </trans-unit>
        <trans-unit id="2fd720ee45c492d6d7ed703e270ad918fb8c585e" translate="yes">
          <source>Conceptually, you can imagine the Angular service worker as a forward cache or a CDN edge that is installed in the end user's web browser. The service worker's job is to satisfy requests made by the Angular app for resources or data from a local cache, without needing to wait for the network. Like any cache, it has rules for how content is expired and updated.</source>
          <target state="translated">概念的には、Angularサービスワーカーは、エンドユーザーのWebブラウザーにインストールされるフォワードキャッシュまたはCDNエッジとして想像できます。 サービスワーカーの仕事は、ネットワークを待つことなく、ローカルキャッシュからのリソースまたはデータに対するAngularアプリからの要求を満たすことです。 他のキャッシュと同様に、コンテンツの有効期限と更新方法に関するルールがあります。</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="e52b9120da6a8af8541ebd623c609817158aa62a" translate="yes">
          <source>Concrete injectors implement this interface.</source>
          <target state="translated">具体的なインジェクターはこのインターフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="a9f1b7e372d92a878669324d80007121df0e9993" translate="yes">
          <source>Conditional display with NgIf</source>
          <target state="translated">NgIfによる条件付き表示</target>
        </trans-unit>
        <trans-unit id="86d8c4f438a64027d9c179cbd6cac7228180ae16" translate="yes">
          <source>Conditional operator</source>
          <target state="translated">条件演算子</target>
        </trans-unit>
        <trans-unit id="9eb462985047418e569f749429a8e241082dca68" translate="yes">
          <source>Conditionally swaps the contents of the div by selecting one of the embedded templates based on the current value of &lt;code&gt;conditionExpression&lt;/code&gt;.</source>
          <target state="translated">conditionExpressionの現在の値に基づいて埋め込みテンプレートの1つを選択することにより、条件付きでdivの内容を交換し &lt;code&gt;conditionExpression&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d12923d02188453229d798291560b0e402e0cdc2" translate="yes">
          <source>Config object passed to initialize the platform.</source>
          <target state="translated">プラットフォームを初期化するために渡される構成オブジェクト。</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="8d1100f1c9c4d1eb55d7214837d3fb9654ee74a6" translate="yes">
          <source>Configuration defaults for Architect builder targets for this project.</source>
          <target state="translated">このプロジェクトのArchitect Builderターゲットの構成のデフォルト。</target>
        </trans-unit>
        <trans-unit id="0724d66ac5fde4442631a00bd09131b2dd58588a" translate="yes">
          <source>Configuration file used by &lt;a href=&quot;https://github.com/ng-packagr/ng-packagr&quot;&gt;ng-packagr&lt;/a&gt; for building your library.</source>
          <target state="translated">ライブラリを構築するために&lt;a href=&quot;https://github.com/ng-packagr/ng-packagr&quot;&gt;ng-packagrが&lt;/a&gt;使用する構成ファイル。</target>
        </trans-unit>
        <trans-unit id="b0dd88079f541af57e4adfcddaae6fb163e6da93" translate="yes">
          <source>Configuration for SystemJsNgModuleLoader. token.</source>
          <target state="translated">SystemJsNgModuleLoaderの構成。 トークン。</target>
        </trans-unit>
        <trans-unit id="02f59039a9582f5ef9337d8fd89fec8a897a3f8c" translate="yes">
          <source>Configuration for code editors. See &lt;a href=&quot;https://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt;.</source>
          <target state="translated">コードエディターの構成。 &lt;a href=&quot;https://editorconfig.org/&quot;&gt;EditorConfigを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3c15ee8a67a30e7e9a9e71785f7b672937eec9ce" translate="yes">
          <source>Configuration inheritance with extends</source>
          <target state="translated">拡張による構成の継承</target>
        </trans-unit>
        <trans-unit id="6b0ea8f50fd69e0d1f261fb22638d876ef51713d" translate="yes">
          <source>Configuration options determine how the control propagates changes and emits events after updates and validity checks are applied.</source>
          <target state="translated">構成オプションは、更新および有効性チェックが適用された後、コントロールが変更を伝播し、イベントを発行する方法を決定します。</target>
        </trans-unit>
        <trans-unit id="904ea1c4be060c0b5f8bd86dec83859df182f291" translate="yes">
          <source>Configuration options for LocationUpgrade.</source>
          <target state="translated">LocationUpgradeの構成オプション。</target>
        </trans-unit>
        <trans-unit id="080e38262b19342c92f70dcb4f588e0426189269" translate="yes">
          <source>Configuration options object for the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. The object can have two shapes:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の構成オプションオブジェクト。 オブジェクトには2つの形状があります。</target>
        </trans-unit>
        <trans-unit id="04c43124a5e5f33bef1c53433d118dd7a497ccab" translate="yes">
          <source>Configuration options that determine how the control emits events after marking is applied.</source>
          <target state="translated">マーキングが適用された後にコントロールがイベントを発行する方法を決定する構成オプション。</target>
        </trans-unit>
        <trans-unit id="fbc1e7137af00b8101306741dc390346f387c194" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events after marking is applied.</source>
          <target state="translated">コントロールが変更を伝播し、マーキングが適用された後にイベントを発行する方法を決定する構成オプション。</target>
        </trans-unit>
        <trans-unit id="60371f334a83c028ab5ba1cd688d36dd7b388f85" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events after the control is disabled.</source>
          <target state="translated">コントロールが無効になった後、コントロールが変更を伝播し、イベントを発行する方法を決定する構成オプション。</target>
        </trans-unit>
        <trans-unit id="d54bb3a87a91320a8a66b7f3a8ab342702b3a630" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events after the marking is applied.</source>
          <target state="translated">コントロールが変更を伝播し、マーキングが適用された後にイベントを発行する方法を決定する構成オプション。</target>
        </trans-unit>
        <trans-unit id="e5e068b29775ffa65327c0c8208d34c6077b4704" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events after the value changes.</source>
          <target state="translated">コントロールが変更を伝播し、値が変更された後にイベントを発行する方法を決定する構成オプション。</target>
        </trans-unit>
        <trans-unit id="eef8c09918819b33239a64a7704d2dc27700f4ed" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events after the value changes. The configuration options are passed to the &lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt; method.</source>
          <target state="translated">コントロールが変更を伝播し、値が変更された後にイベントを発行する方法を決定する構成オプション。 構成オプションは&lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt;メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="d7da654574374e97b1b1d633c048bae7669cdbc6" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events after the value is patched.</source>
          <target state="translated">コントロールが変更を伝播し、値がパッチされた後にイベントを発行する方法を決定する構成オプション。</target>
        </trans-unit>
        <trans-unit id="1c8c51fa4affb5692281be0093de6971007241a1" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events events after marking is applied.</source>
          <target state="translated">コントロールが変更を伝播し、マーキングが適用された後にイベントイベントを発行する方法を決定する構成オプション。</target>
        </trans-unit>
        <trans-unit id="1e20f0372bd831c5bf266eaa0e2a5d55a55725a0" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events when the group is reset.</source>
          <target state="translated">コントロールが変更を伝播し、グループがリセットされたときにイベントを発行する方法を決定する構成オプション。</target>
        </trans-unit>
        <trans-unit id="e95346d92ef28a1f10e1fda94a68c78f7ddc899d" translate="yes">
          <source>Configuration options that determine how the control propagates changes and emits events when the value changes. The configuration options are passed to the &lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt; method.</source>
          <target state="translated">コントロールが変更を伝播し、値が変更されたときにイベントを発行する方法を決定する構成オプション。 構成オプションは&lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt;メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="f225227a9ede3a3a8dd6e1abda67f983abb549ed" translate="yes">
          <source>Configure CLI for CI testing in Chrome</source>
          <target state="translated">ChromeでCIテスト用のCLIを構成する</target>
        </trans-unit>
        <trans-unit id="c7b29bddffe31db8562618db2dcd2e4e60815f01" translate="yes">
          <source>Configure IIS rewrite rules</source>
          <target state="translated">IIS書き換えルールを構成する</target>
        </trans-unit>
        <trans-unit id="89b41b15bfe9509457f2290a57e31d089c487f02" translate="yes">
          <source>Configure Visual Studio to use the global external web tools instead of the tools that ship with Visual Studio:</source>
          <target state="translated">Visual Studioに付属のツールではなく、グローバル外部Webツールを使用するようにVisual Studioを構成します。</target>
        </trans-unit>
        <trans-unit id="ddbfa3351a7da736d0f49a97dc1ad6c0732013f9" translate="yes">
          <source>Configure XSRF protection.</source>
          <target state="translated">XSRF保護を構成します。</target>
        </trans-unit>
        <trans-unit id="ed8d54f9a98aa953033d3f194a4460811675a05f" translate="yes">
          <source>Configure a custom route matcher for AngularJS routes</source>
          <target state="translated">AngularJSルートのカスタムルートマッチャーを構成する</target>
        </trans-unit>
        <trans-unit id="40dd712a3b2c0fb2198e61700e7b674122237218" translate="yes">
          <source>Configure an injector with a service provider</source>
          <target state="translated">サービスプロバイダーでインジェクターを構成する</target>
        </trans-unit>
        <trans-unit id="b13e3e83717f3b6e903c9549155c22d7088485f0" translate="yes">
          <source>Configure environment-specific defaults</source>
          <target state="translated">環境固有のデフォルトを構成する</target>
        </trans-unit>
        <trans-unit id="4264ed71674e27966b2c0b46b2608327f0ad1b6c" translate="yes">
          <source>Configure options that control how the control propagates changes and emits events when marked as untouched</source>
          <target state="translated">未変更としてマークされたときにコントロールが変更を伝播し、イベントを発行する方法を制御するオプションを構成します</target>
        </trans-unit>
        <trans-unit id="8cf7ca44f8f33409d312682ce9ad98ded1245676" translate="yes">
          <source>Configure options that determine how the control propagates changes and emits events after the value changes</source>
          <target state="translated">コントロールが変更を伝播し、値が変更された後にイベントを発行する方法を決定するオプションを構成します</target>
        </trans-unit>
        <trans-unit id="eb57e0371e2fc9618005ed283bc5a627e0d0503d" translate="yes">
          <source>Configure project for Circle CI</source>
          <target state="translated">Circle CIのプロジェクトを構成する</target>
        </trans-unit>
        <trans-unit id="170e1de26a76b0b5d609277eac722fc254816590" translate="yes">
          <source>Configure project for Travis CI</source>
          <target state="translated">Travis CIのプロジェクトを構成する</target>
        </trans-unit>
        <trans-unit id="16a9aa72cb715e4fdbe55f12687848393d9768d2" translate="yes">
          <source>Configure target-specific file replacements</source>
          <target state="translated">ターゲット固有のファイル置換を構成する</target>
        </trans-unit>
        <trans-unit id="8d35a8912f7e5dc75b8b11df8308bd48528c3ace" translate="yes">
          <source>Configure the Angular Router to defer loading of all other modules (and their associated code), either by &lt;a href=&quot;router#preloading&quot;&gt;waiting until the app has launched&lt;/a&gt; or by &lt;a href=&quot;router#asynchronous-routing&quot;&gt;&lt;em&gt;lazy loading&lt;/em&gt;&lt;/a&gt; them on demand.</source>
          <target state="translated">&lt;a href=&quot;router#preloading&quot;&gt;アプリが起動するまで待機する&lt;/a&gt;か、オンデマンドでモジュールを&lt;a href=&quot;router#asynchronous-routing&quot;&gt;&lt;em&gt;遅延ロード&lt;/em&gt;&lt;/a&gt;することにより、他のすべてのモジュール（および関連するコード）のロードを延期するように、Angular Routerを構成します。</target>
        </trans-unit>
        <trans-unit id="df4c2e92d82a4ec3de973912a2abd2f9c68b616d" translate="yes">
          <source>Configure the control to update on a blur event</source>
          <target state="translated">ブラーイベントで更新するようにコントロールを構成する</target>
        </trans-unit>
        <trans-unit id="cea6116a1253fc1036b641181589e01fbb198bb9" translate="yes">
          <source>Configure the control to update on a submit event</source>
          <target state="translated">送信イベントで更新するようにコントロールを構成する</target>
        </trans-unit>
        <trans-unit id="3f746a68905eaf70487c3a4b6c2f9fdf25b6f714" translate="yes">
          <source>Configure the new schematic</source>
          <target state="translated">新しい回路図を構成する</target>
        </trans-unit>
        <trans-unit id="51965dab4793a37225d1a1be0a49b829d5e23bf4" translate="yes">
          <source>Configure the router module with &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; を使用してルーターモジュールを構成します。</target>
        </trans-unit>
        <trans-unit id="cd1a902d750f1c3a051ac9adef4d547529be7083" translate="yes">
          <source>Configure the routes.</source>
          <target state="translated">ルートを構成します。</target>
        </trans-unit>
        <trans-unit id="ac47d13e9fb69ec283379427c60cda732da4a6e6" translate="yes">
          <source>Configure the server to redirect requests for missing files to &lt;code&gt;index.html&lt;/code&gt;. Learn more about server-side redirects &lt;a href=&quot;deployment#fallback&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">欠落ファイルの要求を &lt;code&gt;index.html&lt;/code&gt; にリダイレクトするようにサーバーを構成します。 サーバー側リダイレクトの詳細については、 &lt;a href=&quot;deployment#fallback&quot;&gt;以下を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e5b4e42ab75b8784da8b861251f32df14e4e0ed8" translate="yes">
          <source>Configures &lt;a href=&quot;npm-packages&quot;&gt;npm package dependencies&lt;/a&gt; that are available to all projects in the workspace. See &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;npm documentation&lt;/a&gt; for the specific format and contents of this file.</source>
          <target state="translated">ワークスペース内のすべてのプロジェクトで使用可能な&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージの依存関係&lt;/a&gt;を構成します。 このファイルの特定の形式と内容については、 &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;npmのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="05d23157ddf003648e8e746d3559880a65b4dc54" translate="yes">
          <source>Configures &lt;a href=&quot;npm-packages&quot;&gt;npm package dependencies&lt;/a&gt; that are required for this library.</source>
          <target state="translated">このライブラリに必要な&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージの依存関係&lt;/a&gt;を構成します。</target>
        </trans-unit>
        <trans-unit id="3cd14ca10fd76adaadc5939ae472d04f24c24d40" translate="yes">
          <source>Configures &lt;code&gt;HttpClientTestingBackend&lt;/code&gt; as the &lt;code&gt;&lt;a href=&quot;../httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; used by &lt;code&gt;&lt;a href=&quot;../httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HttpClientTestingBackend&lt;/code&gt; をHttpClientが使用する &lt;code&gt;&lt;a href=&quot;../httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; として構成し &lt;code&gt;&lt;a href=&quot;../httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aaf933ef56571a123747f65a5b55a64b98ada50f" translate="yes">
          <source>Configures &lt;code&gt;HttpClientTestingBackend&lt;/code&gt; as the &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; used by &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HttpClientTestingBackend&lt;/code&gt; をHttpClientが使用する &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; として構成し &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbb7e4485932cfd1de7a060e475b3815ae97dfc1" translate="yes">
          <source>Configures XSRF protection support for outgoing requests.</source>
          <target state="translated">発信要求のXSRF保護サポートを構成します。</target>
        </trans-unit>
        <trans-unit id="b8a1de12ced777c182047fc1700c6e22c8edc707" translate="yes">
          <source>Configures a browser-based app to transition from a server-rendered app, if one is present on the page.</source>
          <target state="translated">ページにサーバーレンダリングアプリが存在する場合、サーバーレンダリングアプリから移行するようにブラウザーベースのアプリを構成します。</target>
        </trans-unit>
        <trans-unit id="a434ad619286dfe86adfce0465b9d38610c08bc2" translate="yes">
          <source>Configures a preloading strategy. One of &lt;code&gt;&lt;a href=&quot;preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;nopreloading&quot;&gt;NoPreloading&lt;/a&gt;&lt;/code&gt; (the default).</source>
          <target state="translated">プリロード戦略を設定します。 &lt;code&gt;&lt;a href=&quot;preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;nopreloading&quot;&gt;NoPreloading&lt;/a&gt;&lt;/code&gt; のいずれか（デフォルト）。</target>
        </trans-unit>
        <trans-unit id="a709e8acb46c26ccfe94d302e108117ba50bc817" translate="yes">
          <source>Configures and initializes environment for unit testing and provides methods for creating components and services in unit tests.</source>
          <target state="translated">単体テストの環境を構成および初期化し、単体テストでコンポーネントとサービスを作成する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="d974520f6e13caa7523a050c50112dac9842e81c" translate="yes">
          <source>Configures if the scroll position needs to be restored when navigating back.</source>
          <target state="translated">戻るときにスクロール位置を復元する必要があるかどうかを構成します。</target>
        </trans-unit>
        <trans-unit id="355e28af987d6e19841341eeb2a4d70ee68fa8fa" translate="yes">
          <source>Configures routes for the application. Supports static, parameterized, redirect, and wildcard routes. Also supports custom route data and resolve.</source>
          <target state="translated">アプリケーションのルートを構成します。 静的、パラメータ化、リダイレクト、およびワイルドカードルートをサポートします。 カスタムルートデータと解決もサポートします。</target>
        </trans-unit>
        <trans-unit id="655c57a99af0d3109e31ed75d5bcd9d001455065" translate="yes">
          <source>Configures sharing of target browsers and Node.js versions among various front-end tools. See &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist on GitHub&lt;/a&gt; for more information.</source>
          <target state="translated">さまざまなフロントエンドツール間でターゲットブラウザーとNode.jsバージョンの共有を構成します。 詳細については&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;、GitHubのBrowserslistを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad517b56561202c6f4359a9192de454ae8a95b9c" translate="yes">
          <source>Configures the &lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for JSONP. Without this module, Jsonp requests reach the backend with method JSONP, where they are rejected.</source>
          <target state="translated">JSONPのサポートサービスを &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; して、 HttpClientの&lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;を構成します。 このモジュールがないと、JsonpリクエストはメソッドJSONPでバックエンドに到達し、そこで拒否されます。</target>
        </trans-unit>
        <trans-unit id="017bdec14b57ac5df6673be7e9fcc7965f792356" translate="yes">
          <source>Configures the &lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for XSRF. Automatically imported by &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">XSRFのサポートサービスを &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; して、 HttpClientの&lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;を構成します。 &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; によって自動的にインポートされます 。</target>
        </trans-unit>
        <trans-unit id="71aa94662f29578035b51374daebcceb523a1a5c" translate="yes">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for JSONP. Without this module, Jsonp requests reach the backend with method JSONP, where they are rejected.</source>
          <target state="translated">JSONPのサポートサービスを &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; して、 HttpClientの&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;を構成します。 このモジュールがないと、JsonpリクエストはメソッドJSONPでバックエンドに到達し、そこで拒否されます。</target>
        </trans-unit>
        <trans-unit id="abb8b7af799cf935e6d74a82f16cc3df381fd3fa" translate="yes">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for XSRF. Automatically imported by &lt;code&gt;&lt;a href=&quot;http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">XSRFのサポートサービスを &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; して、 HttpClientの&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;依存関係インジェクター&lt;/a&gt;を構成します。 &lt;code&gt;&lt;a href=&quot;http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; によって自動的にインポートされます 。</target>
        </trans-unit>
        <trans-unit id="790982c1da92d9a4a3757d5e97cbd5482faeab59" translate="yes">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;injector&lt;/a&gt; of this directive or component with a &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;token&lt;/a&gt; that maps to a &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; of a dependency.</source>
          <target state="translated">依存関係の&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;にマップする&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;トークン&lt;/a&gt;を使用して、このディレクティブまたはコンポーネントの&lt;a href=&quot;../../guide/glossary#injector&quot;&gt;インジェクター&lt;/a&gt;を構成します 。</target>
        </trans-unit>
        <trans-unit id="2a45f7929e71f4ba59f4a8ad3da1adfaa36da765" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;&lt;a href=&quot;core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="f02ed916f1e49de03daf252a306ed41a87a8e713" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;useClass&lt;/code&gt; function. Base for &lt;code&gt;&lt;a href=&quot;core/classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;useClass&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;core/classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="f92fc25f9eceebfbb5082c1b90a7de5b094fe6c6" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token.</source>
          <target state="translated">トークンの値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="5e479568b218802812c025359083e541bc6ccb05" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token. Base for &lt;code&gt;&lt;a href=&quot;core/valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">トークンの値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;core/valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="6353fce328281bccc557008062dcf3fbfb3cedd6" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value of another &lt;code&gt;&lt;a href=&quot;core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="translated">別の &lt;code&gt;&lt;a href=&quot;core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; トークンの値を返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="6912db51cd3dbd31d8209b6df1e76d3826ee6b25" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; when `Type' is used as the token.</source>
          <target state="translated">「Type」がトークンとして使用される場合、 &lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="7e48ca749f7103d266a954f62377d9c41ee37b78" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token.</source>
          <target state="translated">トークンの &lt;code&gt;useClass&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="215555381dc174a710d55310df8470a1903bc17e" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token. Base for &lt;code&gt;&lt;a href=&quot;core/staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">トークンの &lt;code&gt;useClass&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;core/staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="2774323b86ff54bc138cf89007f4a111fe978949" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of a token.</source>
          <target state="translated">トークンのインスタンスを返すように &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="46876796cbd43a683b28fd882c707ae7ed9c73fd" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="b3555b19661005ca96609d18ab3d5155c9a989f4" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;useClass&lt;/code&gt; function. Base for &lt;code&gt;&lt;a href=&quot;classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;useClass&lt;/code&gt; 関数を呼び出して値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="1aa4d8f65f33963b2c13a185cc39738c1582c90e" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token.</source>
          <target state="translated">トークンの値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="2ad425856dc4fab4c772b6dfd94e9573673341fe" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token. Base for &lt;code&gt;&lt;a href=&quot;valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">トークンの値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="d00f9d960028889f815c04e01ccebf365295c64b" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value of another &lt;code&gt;&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="translated">別の &lt;code&gt;&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; トークンの値を返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="70ce9b3787c81b461a2ff3c1e6eccab1e8a5db21" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; when `Type' is used as the token.</source>
          <target state="translated">「Type」がトークンとして使用される場合、 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="c785c093ab8db357541ce09421b2905d251c6f62" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token.</source>
          <target state="translated">トークンの &lt;code&gt;useClass&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="0534fa68714679e5acd551385a86e37f431e6ad6" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token. Base for &lt;code&gt;&lt;a href=&quot;staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">トークンの &lt;code&gt;useClass&lt;/code&gt; のインスタンスを返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。 &lt;code&gt;&lt;a href=&quot;staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; デコレータのベース。</target>
        </trans-unit>
        <trans-unit id="a1cdae9c54d30865f0bd4567e4ad345bca4298f1" translate="yes">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of a token.</source>
          <target state="translated">トークンのインスタンスを返すように &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="b4ceed2ced13e45139fbd79ba14b4345f5f02552" translate="yes">
          <source>Configures the URL codec for encoding and decoding URLs. Default is the &lt;code&gt;AngularJSCodec&lt;/code&gt;</source>
          <target state="translated">URLをエンコードおよびデコードするためのURLコーデックを構成します。 デフォルトは &lt;code&gt;AngularJSCodec&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="96d4362ba6a5c2b25cf80a318749279e2913f30c" translate="yes">
          <source>Configures the base href when used in client-side rendered applications</source>
          <target state="translated">クライアント側のレンダリングされたアプリケーションで使用される場合、ベースhrefを構成します</target>
        </trans-unit>
        <trans-unit id="e33672527f455ecfddcd35c1002dc3b16a4c07a8" translate="yes">
          <source>Configures the base href when used in server-side rendered applications</source>
          <target state="translated">サーバー側のレンダリングされたアプリケーションで使用される場合、ベースhrefを構成します</target>
        </trans-unit>
        <trans-unit id="6ef7ef749cff709e887e2c2aa691baf2be4fa36e" translate="yes">
          <source>Configures the gathering of Angular CLI usage metrics. See &lt;a href=&quot;https://v8.angular.io/cli/usage-analytics-gathering&quot;&gt;https://v8.angular.io/cli/usage-analytics-gathering&lt;/a&gt;.</source>
          <target state="translated">Angular CLI使用メトリックの収集を構成します。 &lt;a href=&quot;https://v8.angular.io/cli/usage-analytics-gathering&quot;&gt;https://v8.angular.io/cli/usage-analytics-gatheringを&lt;/a&gt;参照してください 。</target>
        </trans-unit>
        <trans-unit id="b44dba6deb045365ba90eda211459a90a314cfa1" translate="yes">
          <source>Configures the generation of the application's HTML index.</source>
          <target state="translated">アプリケーションのHTMLインデックスの生成を構成します。</target>
        </trans-unit>
        <trans-unit id="606e40d38c3c6176492de2e8767b8f16cc82d975" translate="yes">
          <source>Configures the hash prefix used in the URL when using the &lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; を使用するときにURLで使用されるハッシュプレフィックスを構成します</target>
        </trans-unit>
        <trans-unit id="354ac0d80d0935b4f0ed926e11149cc7187b891c" translate="yes">
          <source>Configures the queries that will be injected into the directive.</source>
          <target state="translated">ディレクティブに挿入されるクエリを設定します。</target>
        </trans-unit>
        <trans-unit id="a0b85c7e4fa593ef2684a74687e147f20c772314" translate="yes">
          <source>Configures the root injector for an app with providers of &lt;code&gt;@angular/core&lt;/code&gt; dependencies that &lt;code&gt;&lt;a href=&quot;applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; needs to bootstrap components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; がコンポーネントをブートストラップするために必要な &lt;code&gt;@angular/core&lt;/code&gt; 依存関係のプロバイダーでアプリのルートインジェクターを構成します。</target>
        </trans-unit>
        <trans-unit id="64bb1a91c1b98343a1a9158d20a1b1a8de04d5f3" translate="yes">
          <source>Configures the root injector for an app with providers of &lt;code&gt;@angular/core&lt;/code&gt; dependencies that &lt;code&gt;&lt;a href=&quot;core/applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; needs to bootstrap components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; がコンポーネントをブートストラップするために必要な &lt;code&gt;@angular/core&lt;/code&gt; 依存関係のプロバイダーでアプリのルートインジェクターを構成します。</target>
        </trans-unit>
        <trans-unit id="c3ea32179e836ed9d697fdab772550567562d715" translate="yes">
          <source>Configures the scroll offset the router will use when scrolling to an element.</source>
          <target state="translated">エレメントまでスクロールするときにルーターが使用するスクロールオフセットを設定します。</target>
        </trans-unit>
        <trans-unit id="2bfb6c394274e9e69dc237b1ee54d632c4b77f09" translate="yes">
          <source>Configures the top offset used when scrolling to an anchor.</source>
          <target state="translated">アンカーまでスクロールするときに使用される上部オフセットを構成します。</target>
        </trans-unit>
        <trans-unit id="9cbb80073f5a7c31464f131d4117751088863bdb" translate="yes">
          <source>Configures whether the location upgrade module should use the &lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;&lt;a href=&quot;../pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ロケーションアップグレードモジュールが &lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; またはPathLocationStrategyを使用するかどうかを構成します</target>
        </trans-unit>
        <trans-unit id="f3fc56ebc0f714bdfd0dff1e82922f959b5ef867" translate="yes">
          <source>Configuring AOT compilation</source>
          <target state="translated">AOTコンパイルの構成</target>
        </trans-unit>
        <trans-unit id="dca5d7436fb543c24f85516f553280684c834989" translate="yes">
          <source>Configuring CLI schematics</source>
          <target state="translated">CLI回路図の構成</target>
        </trans-unit>
        <trans-unit id="fad07be672efeb55ca3cb3f37c69044afcf5f7b7" translate="yes">
          <source>Configuring application environments</source>
          <target state="translated">アプリケーション環境の構成</target>
        </trans-unit>
        <trans-unit id="ec21d8d7cb50228b36397333d5669d30dd474349" translate="yes">
          <source>Configuring browser compatibility</source>
          <target state="translated">ブラウザーの互換性の構成</target>
        </trans-unit>
        <trans-unit id="1bc5290c9bfe3ed7f891c80e59aa43584653ac02" translate="yes">
          <source>Configuring builder targets</source>
          <target state="translated">Builderターゲットの構成</target>
        </trans-unit>
        <trans-unit id="daaea589cfdcba68c6fb4439f82db13e2663ef08" translate="yes">
          <source>Configuring custom cookie/header names</source>
          <target state="translated">カスタムCookie /ヘッダー名の構成</target>
        </trans-unit>
        <trans-unit id="3318dc8949af442001c4edd02bb7f568634038c4" translate="yes">
          <source>Configuring differential loading</source>
          <target state="translated">差動負荷の構成</target>
        </trans-unit>
        <trans-unit id="e2e730960b7171130fca481fc1f10e9e9263328d" translate="yes">
          <source>Configuring serve for ES5</source>
          <target state="translated">ES5のサーバーの構成</target>
        </trans-unit>
        <trans-unit id="e167f3c501b11cdaa3153d8880a1210498664831" translate="yes">
          <source>Configuring size budgets</source>
          <target state="translated">サイズ予算の構成</target>
        </trans-unit>
        <trans-unit id="7e4a4c665250aa208aa365794302cdfdd8be4d9e" translate="yes">
          <source>Configuring the e2e command</source>
          <target state="translated">e2eコマンドの構成</target>
        </trans-unit>
        <trans-unit id="4c8c7079cd89d0939b266f6d64431c7e2ae58c57" translate="yes">
          <source>Configuring the request</source>
          <target state="translated">リクエストを設定する</target>
        </trans-unit>
        <trans-unit id="fdd2811811ef917c6598a28f5343087cf2fd7267" translate="yes">
          <source>Configuring the test command</source>
          <target state="translated">テストコマンドの構成</target>
        </trans-unit>
        <trans-unit id="b3a24839fb22b5bafd46364046d4cbddbff408ca" translate="yes">
          <source>Confirm it&amp;rsquo;s working</source>
          <target state="translated">動作していることを確認してください</target>
        </trans-unit>
        <trans-unit id="224f48dab1e5cf55b03ac2f1ac05bea3b8bedb00" translate="yes">
          <source>Confirm this for yourself by temporarily removing the &lt;code&gt;subscribe()&lt;/code&gt;, clicking &quot;Dashboard&quot;, then clicking &quot;Heroes&quot;. You'll see the full list of heroes again.</source>
          <target state="translated">&lt;code&gt;subscribe()&lt;/code&gt; 一時的に削除し、[ダッシュボード]をクリックしてから[ヒーロー]をクリックして、このことを確認してください。 ヒーローの完全なリストが再び表示されます。</target>
        </trans-unit>
        <trans-unit id="f6715f3903bc2449584179fb098598b283932a25" translate="yes">
          <source>Congratulations! You have a complete online store application with a product catalog, a shopping cart, and a checkout function.</source>
          <target state="translated">おめでとう！ 製品カタログ、ショッピングカート、チェックアウト機能を備えた完全なオンラインストアアプリケーションがあります。</target>
        </trans-unit>
        <trans-unit id="b7ad5d0678afbe3fd7553084cf4787b6e9c0c989" translate="yes">
          <source>Congratulations! You have an online store application with a product catalog and shopping cart. You also have the ability to look up and display shipping prices.</source>
          <target state="translated">おめでとう！ 製品カタログとショッピングカートを備えたオンラインストアアプリケーションがあります。 また、送料を検索して表示することもできます。</target>
        </trans-unit>
        <trans-unit id="10c6e279d38be8fc1d0310fb7edeaf498cdea917" translate="yes">
          <source>Congratulations! You have integrated routing into your online store.</source>
          <target state="translated">おめでとう！ オンラインストアにルーティングを統合しました。</target>
        </trans-unit>
        <trans-unit id="0ec4a8ae4ac6c91ea3ef7e362745b3a129323812" translate="yes">
          <source>Congratulations! You're running a hybrid application! The existing AngularJS code works as before &lt;em&gt;and&lt;/em&gt; you're ready to start adding Angular code.</source>
          <target state="translated">おめでとう！ ハイブリッドアプリケーションを実行しています！ 既存のAngularJSコードは以前&lt;em&gt;と&lt;/em&gt;同様に機能し、Angularコードの追加を開始する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="1d629e3fa6fd492821bf50a06af042ffb3bd5c9e" translate="yes">
          <source>Congratulations! You've completed your first Angular app!</source>
          <target state="translated">おめでとう！ 最初のAngularアプリが完成しました！</target>
        </trans-unit>
        <trans-unit id="30d43a2b85f7f934e83c32a6dd269b7b686aad20" translate="yes">
          <source>Connect your CLI to your Firebase account and initialize the connection to your project using &lt;code&gt;firebase login&lt;/code&gt; and &lt;code&gt;firebase init&lt;/code&gt;.</source>
          <target state="translated">CLIをFirebaseアカウントに接続し、 &lt;code&gt;firebase login&lt;/code&gt; および &lt;code&gt;firebase init&lt;/code&gt; を使用してプロジェクトへの接続を初期化します。</target>
        </trans-unit>
        <trans-unit id="5c27449d136ee0edd471d5b2bcf5d772b4ffe53d" translate="yes">
          <source>Consider a &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; that capitalizes the first letter of each word. Here's a naive implementation with a regular expression.</source>
          <target state="translated">各単語の最初の文字を大文字にする &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; を考えます。 正規表現を使用した単純な実装を次に示します。</target>
        </trans-unit>
        <trans-unit id="f11af7b9a0daf678a95a2bb3545a00907b3f43a5" translate="yes">
          <source>Consider a &lt;code&gt;setCurrentClasses()&lt;/code&gt; component method that sets a component property, &lt;code&gt;currentClasses&lt;/code&gt;, with an object that adds or removes three classes based on the &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; state of three other component properties. Each key of the object is a CSS class name; its value is &lt;code&gt;true&lt;/code&gt; if the class should be added, &lt;code&gt;false&lt;/code&gt; if it should be removed.</source>
          <target state="translated">コンポーネントプロパティ &lt;code&gt;currentClasses&lt;/code&gt; を 、他の3つのコンポーネントプロパティの &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt; 状態に基づいて3つのクラスを追加または削除するオブジェクトで設定する &lt;code&gt;setCurrentClasses()&lt;/code&gt; コンポーネントメソッドを考えます。 オブジェクトの各キーはCSSクラス名です。 その値は、クラスを追加する必要が &lt;code&gt;true&lt;/code&gt; 場合はtrue 、削除する必要がある場合は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="704938e400612dc2bb86a91cf695ea802ba5df28" translate="yes">
          <source>Consider a Car component that depends on several services. Suppose you configured the root injector (marked as A) with &lt;em&gt;generic&lt;/em&gt; providers for &lt;code&gt;CarService&lt;/code&gt;, &lt;code&gt;EngineService&lt;/code&gt; and &lt;code&gt;TiresService&lt;/code&gt;.</source>
          <target state="translated">いくつかのサービスに依存するCarコンポーネントを考えます。 &lt;code&gt;CarService&lt;/code&gt; 、 &lt;code&gt;EngineService&lt;/code&gt; および &lt;code&gt;TiresService&lt;/code&gt; の &lt;em&gt;汎用&lt;/em&gt;プロバイダーでルートインジェクター（Aとしてマーク）を構成したとします。</target>
        </trans-unit>
        <trans-unit id="ef6dd46525b101f499b4173e45474719d3b73bc3" translate="yes">
          <source>Consider a simple app with only an &lt;code&gt;AppComponent&lt;/code&gt; and a &lt;code&gt;ChildComponent&lt;/code&gt;. The most basic rendered view would look like nested HTML elements such as the following:</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; とChildComponentのみを持つシンプルなアプリを考えてください。 最も基本的なレンダリングビューは、次のようなネストされたHTML要素のようになります。</target>
        </trans-unit>
        <trans-unit id="9d0c87c273b1cd440c8e08219bd3d9f4c12b560b" translate="yes">
          <source>Consider adding component tests such as this one:</source>
          <target state="translated">次のようなコンポーネントテストを追加することを検討してください。</target>
        </trans-unit>
        <trans-unit id="19ab25c1b93a2faa63cd5aea01571afde09c39f6" translate="yes">
          <source>Consider an &lt;code&gt;ItemDetailComponent&lt;/code&gt; that presents item information and responds to user actions. Although the &lt;code&gt;ItemDetailComponent&lt;/code&gt; has a delete button, it doesn't know how to delete the hero. It can only raise an event reporting the user's delete request.</source>
          <target state="translated">アイテム情報を提示し、ユーザーアクションに応答する &lt;code&gt;ItemDetailComponent&lt;/code&gt; を検討します。 &lt;code&gt;ItemDetailComponent&lt;/code&gt; には削除ボタンがありますが、ヒーローを削除する方法がわかりません。 ユーザーの削除要求を報告するイベントのみを発生させることができます。</target>
        </trans-unit>
        <trans-unit id="45bbfebd52a6fc2dcad975ebb9246faf762507f1" translate="yes">
          <source>Consider creating a &quot;barrel&quot; file that gathers all the interceptor providers into an &lt;code&gt;httpInterceptorProviders&lt;/code&gt; array, starting with this first one, the &lt;code&gt;NoopInterceptor&lt;/code&gt;.</source>
          <target state="translated">この最初の &lt;code&gt;NoopInterceptor&lt;/code&gt; から始めて、すべてのインターセプタープロバイダーを &lt;code&gt;httpInterceptorProviders&lt;/code&gt; 配列に収集する「バレル」ファイルを作成することを検討してください。</target>
        </trans-unit>
        <trans-unit id="b722f410e317e9cfe009f859ff75c60e3c1f71c7" translate="yes">
          <source>Consider giving each feature module its own route configuration file. It may seem like overkill early when the feature routes are simple. But routes have a tendency to grow more complex and consistency in patterns pays off over time.</source>
          <target state="translated">各機能モジュールに独自のルート構成ファイルを与えることを検討してください。 機能ルートが単純な場合、早い段階でやり過ぎに見えるかもしれません。 しかし、ルートはより複雑になる傾向があり、パターンの一貫性は時間の経過とともに利益をもたらします。</target>
        </trans-unit>
        <trans-unit id="b361db120d8326b1672390a514f03096ea8586f8" translate="yes">
          <source>Consider how Angular bootstraps the app with the following in &lt;code&gt;main.ts&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;main.ts&lt;/code&gt; で以下を使用して、Angularがアプリをどのようにブートストラップするかを検討してください。</target>
        </trans-unit>
        <trans-unit id="d2610c84394a549686952f121986b0a1dfafaabe" translate="yes">
          <source>Consider placing such helpers in a &lt;code&gt;testing&lt;/code&gt; folder sibling to the &lt;code&gt;app&lt;/code&gt; folder. This sample puts &lt;code&gt;ActivatedRouteStub&lt;/code&gt; in &lt;code&gt;testing/activated-route-stub.ts&lt;/code&gt;.</source>
          <target state="translated">このようなヘルパーを &lt;code&gt;app&lt;/code&gt; フォルダーの兄弟である &lt;code&gt;testing&lt;/code&gt; フォルダーに配置することを検討してください。 このサンプルでは、 &lt;code&gt;ActivatedRouteStub&lt;/code&gt; を &lt;code&gt;testing/activated-route-stub.ts&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="40a30ec038af240bb0c63a65ef68c17c3e707a72" translate="yes">
          <source>Consider the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&quot;&gt;ARIA&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVG&lt;/a&gt;. They are purely attributes, don't correspond to element properties, and don't set element properties. In these cases, there are no property targets to bind to.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&quot;&gt;ARIA&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVGを&lt;/a&gt;検討してください。 それらは純粋な属性であり、要素のプロパティに対応せず、要素のプロパティを設定しません。 これらの場合、バインドするプロパティターゲットはありません。</target>
        </trans-unit>
        <trans-unit id="6dfcd76249e9ea71a17509fe3b793289b07d8e06" translate="yes">
          <source>Consider the &lt;code&gt;forbiddenNameValidator&lt;/code&gt; function from previous &lt;a href=&quot;form-validation#reactive-component-class&quot;&gt;examples&lt;/a&gt; in this guide. Here's what the definition of that function looks like:</source>
          <target state="translated">このガイドの前の&lt;a href=&quot;form-validation#reactive-component-class&quot;&gt;例の&lt;/a&gt; &lt;code&gt;forbiddenNameValidator&lt;/code&gt; 関数を検討してください。 その関数の定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9832950e2039437daf274f99d97ab976ff07a91b" translate="yes">
          <source>Consider the first parameter:</source>
          <target state="translated">最初のパラメーターを検討してください。</target>
        </trans-unit>
        <trans-unit id="df750f99f759535256c70ba046322057d97e3891" translate="yes">
          <source>Consider the following &lt;code&gt;LoggingInterceptor&lt;/code&gt;, which captures the time of the request, the time of the response, and logs the outcome with the elapsed time with the injected &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">次の &lt;code&gt;LoggingInterceptor&lt;/code&gt; を検討してください 。これは、リクエストの時間、レスポンスの時間をキャプチャし、注入された &lt;code&gt;MessageService&lt;/code&gt; で経過時間とともに結果を記録します。</target>
        </trans-unit>
        <trans-unit id="1fa153aa2b6717da43d4aa5c2f8cdfa675736fe8" translate="yes">
          <source>Consider the following component decorator:</source>
          <target state="translated">次のコンポーネントデコレータを検討してください。</target>
        </trans-unit>
        <trans-unit id="9d49b38c45368606b30731a4e8c9d9b37fce625c" translate="yes">
          <source>Consider the following component definition:</source>
          <target state="translated">次のコンポーネント定義を検討してください。</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes">
          <source>Consider the following example:</source>
          <target state="translated">次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="ba02a047d2fa606c8b62d0728733a71f12e0cff9" translate="yes">
          <source>Consider the following module from an imaginary app:</source>
          <target state="translated">架空のアプリの次のモジュールを検討してください。</target>
        </trans-unit>
        <trans-unit id="a3930ac2c45c0dfd74cd50df77026bee3f43670b" translate="yes">
          <source>Consider the following route configuration: &lt;code&gt;[{ path: 'user/:name', component: UserCmp }]&lt;/code&gt;. When linking to this &lt;code&gt;user/:name&lt;/code&gt; route, you use the &lt;code&gt;&lt;a href=&quot;routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">次のルート構成を考慮してください： &lt;code&gt;[{ path: 'user/:name', component: UserCmp }]&lt;/code&gt; 。 この &lt;code&gt;user/:name&lt;/code&gt; ルートにリンクするときは、 &lt;code&gt;&lt;a href=&quot;routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="39319f460f4fb9c39f4884a7c1a88c15c5e5d19b" translate="yes">
          <source>Consider the following template:</source>
          <target state="translated">次のテンプレートを検討してください。</target>
        </trans-unit>
        <trans-unit id="9bc5918ab96c8ae8dd385d33d9088492a8181d54" translate="yes">
          <source>Consider the next example, with a &lt;code&gt;nullItem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nullItem&lt;/code&gt; を使用した次の例を検討してください 。</target>
        </trans-unit>
        <trans-unit id="2db65abc70042beb9455d6a81f9ffe531ed87cd5" translate="yes">
          <source>Consider this &lt;code&gt;LightswitchComponent&lt;/code&gt; which toggles a light on and off (represented by an on-screen message) when the user clicks the button.</source>
          <target state="translated">ユーザーがボタンをクリックすると、ライトのオンとオフ（画面上のメッセージで表される）を切り替えるこの &lt;code&gt;LightswitchComponent&lt;/code&gt; について考えます。</target>
        </trans-unit>
        <trans-unit id="8fd55686b3b9fcd196785761c13b6856f6e18c3d" translate="yes">
          <source>Consider this example of a child/parent relationship:</source>
          <target state="translated">子/親関係のこの例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes">
          <source>Consider this example:</source>
          <target state="translated">この例を考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="373e414166550c8a0819f99056b315d0e56007a0" translate="yes">
          <source>Consider this translation to French:</source>
          <target state="translated">このフランス語への翻訳を検討してください。</target>
        </trans-unit>
        <trans-unit id="44b7723591959083ad1b46043ee91e613fb4e932" translate="yes">
          <source>Consider this variation on the &lt;a href=&quot;lifecycle-hooks#afterview&quot;&gt;previous &lt;em&gt;AfterView&lt;/em&gt;&lt;/a&gt; example. This time, instead of including the child view within the template, it imports the content from the &lt;code&gt;AfterContentComponent&lt;/code&gt;'s parent. Here's the parent's template:</source>
          <target state="translated">&lt;a href=&quot;lifecycle-hooks#afterview&quot;&gt;前の&lt;em&gt;AfterViewの&lt;/em&gt;&lt;/a&gt;例のこのバリエーションを検討してください。 今回は、テンプレート内に子ビューを含める代わりに、 &lt;code&gt;AfterContentComponent&lt;/code&gt; の親からコンテンツをインポートします。 親のテンプレートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a19ffd846c37d7414552d50785c96ff829945eb9" translate="yes">
          <source>Consider writing a more capable version of this stub class with the &lt;a href=&quot;testing#marble-testing&quot;&gt;&lt;em&gt;marble testing library&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing#marble-testing&quot;&gt;&lt;em&gt;マーブルテストライブラリを使用&lt;/em&gt;&lt;/a&gt;して、このスタブクラスのより高性能なバージョンを記述することを検討してください。</target>
        </trans-unit>
        <trans-unit id="123acf3eb0958698db3b9d6cb8b39fb90d98951d" translate="yes">
          <source>Consolidated setup</source>
          <target state="translated">統合セットアップ</target>
        </trans-unit>
        <trans-unit id="599005e9d0a1ed8a6d678501e1cd08f335ab014c" translate="yes">
          <source>Constants for the categories of parameters that can be defined for animations.</source>
          <target state="translated">アニメーション用に定義できるパラメーターのカテゴリの定数。</target>
        </trans-unit>
        <trans-unit id="6b523fd10da4469f4b2ce06dba3999dc4b270b7d" translate="yes">
          <source>Constants in API documentation to find more built-in tokens.</source>
          <target state="translated">より多くの組み込みトークンを見つけるためのAPIドキュメントの定数。</target>
        </trans-unit>
        <trans-unit id="52e68a873a2be3470675b9ee933b98d781ae7fef" translate="yes">
          <source>Constraints</source>
          <target state="translated">Constraints</target>
        </trans-unit>
        <trans-unit id="ef05208dd9ec71f70387f2d769aa146308ccbd23" translate="yes">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; with the given state, validators and options.</source>
          <target state="translated">指定された状態、バリデーター、オプションで新しい &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; を構築します。</target>
        </trans-unit>
        <trans-unit id="0e2579e03480a20036b5089c167b3f0020b0184c" translate="yes">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="c76dfa2168304d703ec211079e60eaef5f1dbdec" translate="yes">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; を構築します。</target>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes">
          <source>Constructor</source>
          <target state="translated">Constructor</target>
        </trans-unit>
        <trans-unit id="670ca6b9ef09915407c033157280805e28b73c2f" translate="yes">
          <source>Constructor or variable initialization?</source>
          <target state="translated">コンストラクターまたは変数の初期化？</target>
        </trans-unit>
        <trans-unit id="e05a9515511c565726bade9a20901e8a1b93defa" translate="yes">
          <source>ConstructorProvider</source>
          <target state="translated">ConstructorProvider</target>
        </trans-unit>
        <trans-unit id="4b55a3bf49768e5a45166266fd99336a9be3e26c" translate="yes">
          <source>ConstructorSansProvider</source>
          <target state="translated">ConstructorSansProvider</target>
        </trans-unit>
        <trans-unit id="7ce1dbb7519fe8f24420e28f982f8fb187e4b298" translate="yes">
          <source>Constructors should do little more than initialize variables. This rule makes the component safe to construct under test without fear that it will do something dramatic like talk to the server. That's why you call the &lt;code&gt;HeroService&lt;/code&gt; from within the &lt;code&gt;ngOnInit&lt;/code&gt; rather than the constructor.</source>
          <target state="translated">コンストラクターは、変数を初期化するだけです。 このルールにより、コンポーネントはテスト中に安全に構築され、サーバーとの対話のような劇的な動作を行うことを恐れません。 そのため、コンストラクターではなく &lt;code&gt;ngOnInit&lt;/code&gt; 内から &lt;code&gt;HeroService&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="23cadb1df353b99c4e051b6edc1ad945766aada1" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="f6c7265bc324b3ca092e2e42b20774ac1a7962cf" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="d752e575bd5ac363323d94fd1cddc80f248c081e" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、応答を &lt;code&gt;Blob&lt;/code&gt; として返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="9a9734e30c9c3fb4f3087180f1f53dda27759aa7" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="2c7b345a02c8a2e0b156bf32fd1d956468c16cba" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="78fa3c91d93b2834d54dad25333e8d6c6f04d52a" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答本文をJSONオブジェクトとして返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="5763f853957277c256fe8bece71d26cd1c302989" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="d395c4f8772ed966eb476d4553f3622f3c9eb516" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text string and returns a string.</source>
          <target state="translated">本文をテキスト文字列として解釈し、文字列を返す &lt;code&gt;DELETE&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="f42594ac52811090242806c1017dfff7afc2cc39" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">本文をテキスト文字列として解釈し、完全なイベントストリームを返す &lt;code&gt;DELETE&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="ceb015cee9533f889ac31fcc95a89d588735115b" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="b3d4b7b588e3563475edba42714ce450d5308cc9" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;DELETE&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="9e38f7f2d5fea29306efef924f497a2f58946854" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、応答を &lt;code&gt;ArrayBuffer&lt;/code&gt; として返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="650e1e417750bced0f54cbe9f418025dc567dc8f" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request the interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="dad93856adb8d6b8425b7acc5385a4808c8d006a" translate="yes">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt;request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返す &lt;code&gt;DELETE&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="2bf9b19b246c66a2020726251530d48bc738a8aa" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="4e49725f1a9ae4e2054271d70637a4ebfc5fe534" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="15c388ade7bdd889621caad9b4ece27fe7dd1606" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">本体を &lt;code&gt;Blob&lt;/code&gt; として解釈し、応答を &lt;code&gt;Blob&lt;/code&gt; として返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="3281ae3f5f4f5c1ceb31d26c685149c405cf34c9" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="7bdb056ccc601478c9de526dba99533277c63fc3" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="f8808b94c91f6cb918a6e23418d801f00d007f86" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答本文をJSONオブジェクトとして返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="38c4983aaec309563fd4823755b91abad4118959" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the response body in a given type.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、指定されたタイプの応答本文を返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="fef0b29101aeda5c1971e298a033227042da30da" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="88acb84a8dc8a7a7bf125dd68851430ba5c28b6f" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">本文をテキスト文字列として解釈し、完全なイベントストリームを返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="b2cceab39f1e7e7efe2e2f6e579fd544fa697936" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">本文をテキスト文字列として解釈し、応答を文字列値として返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="b9d900f5a2b2c2135dbbd2f5f071bfe09b7344a7" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="85cb8493e8fa7eb489f1d771a1b639079de6048e" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="9a07c27d0a666876d3e577af932ae161d141709c" translate="yes">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response in an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">ボディを &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、応答をArrayBufferに返す &lt;code&gt;GET&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="8ae9709e5254a29fde908937342183243336d2e6" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="9e41bc7a0a26a5593b8c106a2849513992d208a4" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="b3bff2414a25c7a3a355f0ac107ce0ab2220bab8" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、応答を &lt;code&gt;Blob&lt;/code&gt; として返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを構築します。</target>
        </trans-unit>
        <trans-unit id="c5a0f75d10f9dd47c3ef30634c7082613b93db48" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="f863170a130f7b10701f3d033e7924e426505f54" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full HTTP event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なHTTPイベントストリームを返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="6f8ba56427c69a4a299cc298ca03f14f9791c4c6" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="61e2986956d3b70b1a243ef9d1891b235b3a7cf7" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答本文をJSONオブジェクトとして返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="0410e3f2cf2f25269594792fad8a56045d9622fd" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、指定されたタイプで応答を返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="11c6793971907cea6cbeff4c666ee19920fc8790" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">本文をテキスト文字列として解釈し、完全なイベントストリームを返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="17465a76f8919024e4dab5202a2b02db5f624e11" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">本文をテキスト文字列として解釈し、応答を文字列値として返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="d32aab72547341461188042bc33d708b084b2739" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なHTTP応答を返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="75281f828c52beee78e72c74e921142c4418838c" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="651a1e9c194461a541b1e9b035c2716dab91434f" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、応答を &lt;code&gt;ArrayBuffer&lt;/code&gt; として返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="e6e699f4d178bb9685d4393ffad3b66517220e5c" translate="yes">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;HEAD&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="dd3faa3853dcee5fe3d9fe9443a6f3cbab522583" translate="yes">
          <source>Constructs a &lt;code&gt;JSONP&lt;/code&gt; request for the given URL and name of the callback parameter.</source>
          <target state="translated">指定されたURLとコールバックパラメーターの名前の &lt;code&gt;JSONP&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="235abbed0544ac665d44263fa9d57156d8a7d0d4" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="12c496639b74673e61acab392af8229707d80e94" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="3860ec6228891ae23996bbb6ec573173db852b0a" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、応答を &lt;code&gt;Blob&lt;/code&gt; として返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="65f17861f529c27980d80ff43a891f5712038253" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="362c13fb84402f01f2d429576ef5e4a4f5b33b07" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="39c5b11223130ad747170436e71886fdb3ac790f" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答本文をJSONオブジェクトとして返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="62dc2dc0a6122d2737ade209d92cf331f28fc41b" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、指定されたタイプで応答を返す &lt;code&gt;PATCH&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="00cc25279f1fe8a55b73b50a0f3061b5bf769645" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;PATCH&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="9e38458638cf0324b1712678aff908b60855c606" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">本文をテキスト文字列として解釈し、完全なイベントストリームを返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="4c6d700be22e47259958685c709c9505c5740728" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="02057de6678548f190b9df379d020308af41aed6" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">本体を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、応答を &lt;code&gt;ArrayBuffer&lt;/code&gt; として返す &lt;code&gt;PATCH&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="7b28f32d4a88ab248f7cf83aa28581d3fb53de32" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the the full event stream.</source>
          <target state="translated">本体を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="94cd7acd8580c2038f0ddac265f4a05e8c9fd805" translate="yes">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as as a text string and returns the response as a string value.</source>
          <target state="translated">本文をテキスト文字列として解釈し、応答を文字列値として返す &lt;code&gt;PATCH&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="a81bd3729afd38c9b3f199dd3cba59451666f8e8" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;POST&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="641cb490191b751283ceeb07b3880411b3e331d9" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、応答を &lt;code&gt;Blob&lt;/code&gt; として返す &lt;code&gt;POST&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="3115bea78d82e234317f39a3678fc0f698690441" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response in an observable of the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームのオブザーバブルで応答を返す &lt;code&gt;POST&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="6ba1bd26d70d1d409c49914ddecb60499cb87756" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns an observable of the response.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答の監視可能オブジェクトを返す &lt;code&gt;POST&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="f1fb5bb7bfe7c0f33819f0f7b890f9a166a77955" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;POST&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="5eaf2b0bba2543a7459ce52211e4f71a92ce1366" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答本文をJSONオブジェクトとして返す &lt;code&gt;POST&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="253b00de387b55f60aac23305f4fd5c1946433c7" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;POST&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="5e4eb5da1850699a1fe63fd490a53282f34e0d9a" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">本文をテキスト文字列として解釈し、完全なイベントストリームを返す &lt;code&gt;POST&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="7a789907a379c1ba1cf8c5c66a9f3b5f6488c4ba" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">本文をテキスト文字列として解釈し、応答を文字列値として返す &lt;code&gt;POST&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="54dee4e9bfdab77a1cce5b278205d1aa8b0386cb" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;POST&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="b3edb2404101ecf07ed861998b4a029fdffde857" translate="yes">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as an as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、 ArrayBufferを返す &lt;code&gt;POST&lt;/code&gt; 要求を構築し &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87b99be82744dd378073f66e4b7c97962ac602f7" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="translated">本体を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なHTTP応答を返す &lt;code&gt;PUT&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="a1235d4b058347a55fb90fed94e459e7a014ba09" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;PUT&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="f2b5392428552e3c8efb88251093c2bdbfba5d51" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">本体を &lt;code&gt;Blob&lt;/code&gt; として解釈し、応答を &lt;code&gt;Blob&lt;/code&gt; として返す &lt;code&gt;PUT&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="eba74799172ea8fcc067f636db902fd80a63cbea" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns an observable of the response.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答のオブザーバブルを返す &lt;code&gt;PUT&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="6ca01bbee7247503c8ed6b402d209233876b14b1" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the full HTTP response.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なHTTP応答を返す &lt;code&gt;PUT&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="3b44df6f74adf2927b103251d3acd57cefb019cd" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返す &lt;code&gt;PUT&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="1fd26bb4f36e9f3d74c0083a4024dc81cab4d0b3" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答本文をJSONオブジェクトとして返す &lt;code&gt;PUT&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="7d09f0b2e98042f496b98ff20dca620252b483b9" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text stream and returns the full HTTP response.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全なHTTP応答を返す &lt;code&gt;PUT&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="863358fd573521107236693d767077976e59fa2b" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">本文をテキスト文字列として解釈し、完全なイベントストリームを返す &lt;code&gt;PUT&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="377246ad02c79bf2e4d51b4f8419d3ddeeafb681" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="translated">本文をテキスト文字列として解釈し、応答を文字列値として返す &lt;code&gt;PUT&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="64c0cd9a96668e8b3343fee0e252136c45340d24" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns an observable of the full HTTP response.</source>
          <target state="translated">本体を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なHTTP応答の監視可能オブジェクトを返す &lt;code&gt;PUT&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="bb1beb4560a375619148b6bd82dab41ae22771ac" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本体を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;PUT&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="ad0d5617ed1d692d198b945c2d880bf92ea9bb23" translate="yes">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">本体を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、応答を &lt;code&gt;ArrayBuffer&lt;/code&gt; として返す &lt;code&gt;PUT&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="2c2f9b7c6872456661c302e7b127ee817109f69f" translate="yes">
          <source>Constructs a DELETE request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="translated">本体をJSONオブジェクトとして解釈し、指定されたタイプで応答を返すDELETEリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="4fdf78c52ba12f844dc35ac6ac10fec8165d09d8" translate="yes">
          <source>Constructs a POST request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返すPOSTリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="a0f16550cba971f5543bee854b84b69167c02e12" translate="yes">
          <source>Constructs a POST request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPresponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPresponse&lt;/code&gt; を返すPOST要求を構築します。</target>
        </trans-unit>
        <trans-unit id="faca82d4645ac5209a169e17a54b5429d35b82f5" translate="yes">
          <source>Constructs a new &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; from the given array of configurations, validators and options.</source>
          <target state="translated">構成、バリデーター、およびオプションの指定された配列から新しい &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; を構築します。</target>
        </trans-unit>
        <trans-unit id="e4f1a1329904af95fdafaf68a3286a1f491fb41e" translate="yes">
          <source>Constructs a new HTTP header object with the given values.</source>
          <target state="translated">指定された値で新しいHTTPヘッダーオブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="23c7c42791c3ed6d93d51cd2e390649e3d52a08c" translate="yes">
          <source>Constructs a request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームを返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="e4f5145b1c07e56fcc5a94d8f45486317d521e44" translate="yes">
          <source>Constructs a request that interprets the body as a blob and returns the response as a blob.</source>
          <target state="translated">本文をblobとして解釈し、応答をblobとして返す要求を作成します。</target>
        </trans-unit>
        <trans-unit id="7a4c3f3a26fcbf5a54904048a00ea04e24b7829c" translate="yes">
          <source>Constructs a request that interprets the body as a text string and returns a string value.</source>
          <target state="translated">本文をテキスト文字列として解釈し、文字列値を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="80832bf903757ba9e7a0204dc49d67b0e482a5dc" translate="yes">
          <source>Constructs a request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response in an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">本体を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、 &lt;code&gt;ArrayBuffer&lt;/code&gt; に応答を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="c9d4aa3bbd4f5b076380c1ce5b2d9fc9aa237020" translate="yes">
          <source>Constructs a request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="66a8388af3067eb92a40e42161e27adde33ad707" translate="yes">
          <source>Constructs a request where response type and requested observable are not known statically.</source>
          <target state="translated">応答タイプと要求されたobservableが静的に認識されていない要求を構築します。</target>
        </trans-unit>
        <trans-unit id="cc2e5129749ea1ac51e3940bcad6196f2e3f0d57" translate="yes">
          <source>Constructs a request which interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="5c05e9b870c9e45179a8c60dd8a491ee6d879818" translate="yes">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt; as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; をJSONオブジェクトとして返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="2fd177b01d4106a11ace58c091c67fb2667e5e3e" translate="yes">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt; with the response body in the requested type.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈する要求を &lt;code&gt;HTTPResponse&lt;/code&gt; し、要求されたタイプの応答本文を含む完全なHTTPResponseを返します。</target>
        </trans-unit>
        <trans-unit id="e239c478d8d610cfd7229cf417e18307e479fca9" translate="yes">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="19ca9e2cabc5e8cad7907af5722bad9b8c4841ae" translate="yes">
          <source>Constructs a request which interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="5ff310655babdbd12ef2099887de65800e95ad4a" translate="yes">
          <source>Constructs a request which interprets the body as a JSON object with the response body of the requested type.</source>
          <target state="translated">要求されたタイプの応答本文を持つJSONオブジェクトとして本文を解釈する要求を作成します。</target>
        </trans-unit>
        <trans-unit id="5d357b5fa671a3acf59792934174d67c5969e195" translate="yes">
          <source>Constructs a request which interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="fbe5633d3438abe9fc1598aad6c50f76be1c984b" translate="yes">
          <source>Constructs a request which interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">本文をテキスト文字列として解釈し、完全なイベントストリームを返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="589ee8b3009a97edc2e105e386455f14a6ac6eaf" translate="yes">
          <source>Constructs a request which interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返すリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="211b45077edf145b2c1ab7a5658740f2629293f1" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="3f70f447bdb712016999ddd1f486a06582ad414a" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="3c2191707361f8916dd245724c3fb5d2162f638c" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;Blob&lt;/code&gt; として解釈し、応答を &lt;code&gt;Blob&lt;/code&gt; として返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="68cb6838561e80e7628ba396368ee45ef8e2d8b2" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="902129b5eca64cc2f16d81e1fc10e63df1bee3be" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、完全なイベントストリームを返す &lt;code&gt;OPTIONS&lt;/code&gt; リクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="0c7fdf047af3a8958038a757c74e1c63d9542aef" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、応答本文をJSONオブジェクトとして返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="9b11290c8cfbb3b730421dfbca1d1cf02c66dd3e" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="translated">本文をJSONオブジェクトとして解釈し、指定されたタイプの応答を返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="c7a2a5ef838d241037e01caa8ee9f37a5af4e540" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a text string and returns a string value.</source>
          <target state="translated">本文をテキスト文字列として解釈し、文字列値を返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="4b7f2fe48b89261fe52e259b2880964247765df8" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="translated">本文をテキスト文字列として解釈し、完全なイベントストリームを返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="179fcc296f7004ba8fa6e08e127a0d3bc8fab23b" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なHTTP応答を返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="ef02beb6aacabe6634023a8cbc4f937cce1f3fdc" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、完全なイベントストリームを返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="f638583ad8ec6239b9861a9997058059eefcb1b8" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">本文を &lt;code&gt;ArrayBuffer&lt;/code&gt; として解釈し、応答を &lt;code&gt;ArrayBuffer&lt;/code&gt; として返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を作成します。</target>
        </trans-unit>
        <trans-unit id="60d7e2d2bd804f43e701c41db670762438d1e121" translate="yes">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="translated">本文をテキストストリームとして解釈し、完全な &lt;code&gt;HTTPResponse&lt;/code&gt; を返す &lt;code&gt;OPTIONS&lt;/code&gt; 要求を構築します。</target>
        </trans-unit>
        <trans-unit id="0cf9d7353005581788d3e7598a8800407a55cf3e" translate="yes">
          <source>Constructs an &lt;code&gt;Observable&lt;/code&gt; that, when subscribed, causes a request with the special method &lt;code&gt;JSONP&lt;/code&gt; to be dispatched via the interceptor pipeline. The &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP pattern&lt;/a&gt; works around limitations of certain API endpoints that don't support newer, and preferable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt; protocol. JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the requests even if the API endpoint is not located on the same domain (origin) as the client-side application making the request. The endpoint API must support JSONP callback for JSONP requests to work. The resource API returns the JSON response wrapped in a callback function. You can pass the callback function name as one of the query parameters. Note that JSONP requests can only be used with &lt;code&gt;GET&lt;/code&gt; requests.</source>
          <target state="translated">サブスクライブされると、インターセプターパイプラインを介して特別なメソッド &lt;code&gt;JSONP&lt;/code&gt; でリクエストをディスパッチする &lt;code&gt;Observable&lt;/code&gt; を構築します。 &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONPパターンは&lt;/a&gt; 、より新しく、望ましい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt;プロトコルをサポートしない特定のAPIエンドポイントの制限を回避します。 JSONPは、エンドポイントAPIをJavaScriptファイルとして扱い、APIエンドポイントがリクエストを行うクライアント側アプリケーションと同じドメイン（オリジン）にない場合でも、リクエストを処理するようにブラウザをだます。 エンドポイントAPIは、JSONP要求が機能するためにJSONPコールバックをサポートする必要があります。 リソースAPIは、コールバック関数にラップされたJSON応答を返します。 コールバック関数名をクエリパラメーターの1つとして渡すことができます。 JSONPリクエストは &lt;code&gt;GET&lt;/code&gt; リクエストでのみ使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b0d247830e912c20bc354ff04c22370298537dbd" translate="yes">
          <source>Constructs an &lt;code&gt;Observable&lt;/code&gt; that, when subscribed, causes the configured &lt;code&gt;OPTIONS&lt;/code&gt; request to execute on the server. This method allows the client to determine the supported HTTP methods and other capabilites of an endpoint, without implying a resource action. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;OPTIONS&lt;/code&gt; 要求をサーバーで実行する &lt;code&gt;Observable&lt;/code&gt; を構築します。 このメソッドにより、クライアントは、リソースアクションを暗示することなく、サポートされているHTTPメソッドおよびエンドポイントの他の機能を決定できます。 戻りタイプの詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="37b5ebdc23ba0671b7d2b5bfdd6f880fcc5a4543" translate="yes">
          <source>Constructs an observable for a generic HTTP request that, when subscribed, fires the request through the chain of registered interceptors and on to the server.</source>
          <target state="translated">サブスクライブされると、登録済みインターセプターのチェーンを介してサーバーにリクエストを送信する汎用HTTPリクエストのオブザーバブルを構築します。</target>
        </trans-unit>
        <trans-unit id="8b1895b2612f30f28c01f0bc2082e2c07b7909c9" translate="yes">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;DELETE&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;DELETE&lt;/code&gt; 要求をサーバー上で実行するオブザーバブルを構築します。 戻りタイプの詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="4d806e1dcedcaa693d77cf017adc44b16c578330" translate="yes">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;GET&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;GET&lt;/code&gt; 要求がサーバー上で実行されるオブザーバブルを構築します。 戻りタイプの詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="71f7794dd42ec39f50c82779f160807bf91746a3" translate="yes">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;HEAD&lt;/code&gt; request to execute on the server. The &lt;code&gt;HEAD&lt;/code&gt; method returns meta information about the resource without transferring the resource itself. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;HEAD&lt;/code&gt; リクエストをサーバーで実行するオブザーバブルを構築します。 &lt;code&gt;HEAD&lt;/code&gt; メソッドは、リソース自体を転送せずに、リソースに関するメタ情報を返します。 戻りタイプの詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="52ae6e3d51c8c3b5cc2d797d171f548c95c272af" translate="yes">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;PATCH&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;PATCH&lt;/code&gt; 要求をサーバー上で実行するオブザーバブルを構築します。 戻りタイプの詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="fb1a1c8aa44cdebcb48a20947d39495c036898ea" translate="yes">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;POST&lt;/code&gt; request to execute on the server. The server responds with the location of the replaced resource. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;POST&lt;/code&gt; 要求をサーバー上で実行するオブザーバブルを構築します。 サーバーは、置き換えられたリソースの場所で応答します。 戻りタイプの詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="b596a81fbfe7be8f37ef25519b1c7cfdd896b547" translate="yes">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;PUT&lt;/code&gt; request to execute on the server. The &lt;code&gt;PUT&lt;/code&gt; method replaces an existing resource with a new set of values. See the individual overloads for details on the return type.</source>
          <target state="translated">サブスクライブされると、構成された &lt;code&gt;PUT&lt;/code&gt; 要求をサーバー上で実行するオブザーバブルを構築します。 &lt;code&gt;PUT&lt;/code&gt; メソッドは、既存のリソースを新しい値のセットで置き換えます。 戻りタイプの詳細については、個々のオーバーロードを参照してください。</target>
        </trans-unit>
        <trans-unit id="b0f261e39825bcaba86eb199bd75bc95a965046f" translate="yes">
          <source>Consuming controls in a grouping</source>
          <target state="translated">グループ化でコントロールを使用する</target>
        </trans-unit>
        <trans-unit id="5921ce9b794517579875e899237be92946964b92" translate="yes">
          <source>Contains a re-usable animation. See &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">再利用可能なアニメーションが含まれています。 &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 見る（）</target>
        </trans-unit>
        <trans-unit id="c05469e3e34f048954fcfa8ac3ef87c944b1adfa" translate="yes">
          <source>Contains a set of CSS property-value pairs into a named style. See &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">CSSプロパティと値のペアのセットが名前付きスタイルに含まれています。 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 見る（）</target>
        </trans-unit>
        <trans-unit id="9b9db0cfc91810c23685cf4af0b7fabd5592665d" translate="yes">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">一連のアニメーションステップが含まれています。 &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 参照してください</target>
        </trans-unit>
        <trans-unit id="3cbb3cc83027338145bb5743b8785d8f12444f5a" translate="yes">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">一連のアニメーションステップが含まれています。 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 見る（）</target>
        </trans-unit>
        <trans-unit id="619b3f5fbeae7c81c1f626c289ef61fe0f527a4b" translate="yes">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">一連のアニメーションステップが含まれています。 &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="4ac17a2d017d4488a0bb4df8f79eeed303020ae0" translate="yes">
          <source>Contains all the &lt;a href=&quot;router#child-routing-component&quot;&gt;child routes&lt;/a&gt; activated under the current route.</source>
          <target state="translated">現在のルートでアクティブ化されているすべての&lt;a href=&quot;router#child-routing-component&quot;&gt;子ルート&lt;/a&gt;が含まれます。</target>
        </trans-unit>
        <trans-unit id="ad51011dfba99d373a5435f05a6da9109da527b8" translate="yes">
          <source>Contains an animation step. See &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">アニメーションステップが含まれています。 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="fadaa32099232d5dc3ba2a9025a9702c2d38ab0e" translate="yes">
          <source>Contains an animation trigger. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーショントリガーが含まれています。 インスタンス化され、 &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="15c25e46166e889e0b68feb40f1111fd91225ff1" translate="yes">
          <source>Contains an animation trigger. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーショントリガーが含まれています。 インスタンス化され、 &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="feb6f63e05ffd985d9055b7076f337ba4c06f62d" translate="yes">
          <source>Contains animation parameters for a re-usable animation. See &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">再利用可能なアニメーションのアニメーションパラメータが含まれています。 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="5ff4adbdda17b5bf178e5e3fb064038ba273ce45" translate="yes">
          <source>Contains build configuration options for particular target environments. By default there is an unnamed standard development environment and a production (&quot;prod&quot;) environment. You can define additional target environment configurations.</source>
          <target state="translated">特定のターゲット環境用のビルド構成オプションが含まれています。 デフォルトでは、名前のない標準開発環境と本番（「製品」）環境があります。 追加のターゲット環境構成を定義できます。</target>
        </trans-unit>
        <trans-unit id="ab3ecf2264326072c36faae174b6f032dac8fbd3" translate="yes">
          <source>Contains child-animation query data. See &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">子アニメーションクエリデータが含まれます。 &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="dc7da1e369d7c4399691bc55fea56917d1fe0acd" translate="yes">
          <source>Contains data for staggering an animation sequence. See &lt;code&gt;&lt;a href=&quot;stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">アニメーションシーケンスをずらすためのデータが含まれます。 &lt;code&gt;&lt;a href=&quot;stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 見る（）</target>
        </trans-unit>
        <trans-unit id="c761f47fc9cbfff9f17d454605795b06422010b6" translate="yes">
          <source>Contains data to use in executing child animations returned by a query. See &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">クエリによって返される子アニメーションの実行に使用するデータが含まれます。 &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; 参照してください</target>
        </trans-unit>
        <trans-unit id="efceaeecd88f26fad7fc54f488fd3156edae1d13" translate="yes">
          <source>Contains image and other asset files to be copied as-is when you build your application.</source>
          <target state="translated">アプリケーションのビルド時にそのままコピーされる画像およびその他のアセットファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="451c833683655ca4c54bfa816ff7243e17177730" translate="yes">
          <source>Contains the component files in which your application logic and data are defined. See details &lt;a href=&quot;file-structure#app-src&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">アプリケーションのロジックとデータが定義されているコンポーネントファイルが含まれています。 &lt;a href=&quot;file-structure#app-src&quot;&gt;以下の&lt;/a&gt;詳細を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a3570af1ff9a0c0195985687f4d9fb49189b88a" translate="yes">
          <source>Contains the first &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the list of this route's child routes.</source>
          <target state="translated">このルートの子ルートのリストの最初の &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="b2508437a48b549ece3f2976c0ec7536dde1129b" translate="yes">
          <source>Contains the information about a route associated with a component loaded in an outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router state tree.</source>
          <target state="translated">特定の瞬間にコンセントにロードされたコンポーネントに関連付けられたルートに関する情報が含まれます。 ActivatedRouteSnapshotを使用して、ルーターの状態ツリーを走査することもできます。</target>
        </trans-unit>
        <trans-unit id="8ba27a67003af1668cdba1d05e81fca07794cf13" translate="yes">
          <source>Contains the version of Angular to use for the documentation. If not provided, the command uses your current Angular core version.</source>
          <target state="translated">ドキュメントに使用するAngularのバージョンが含まれています。 指定しない場合、コマンドは現在のAngularコアバージョンを使用します。</target>
        </trans-unit>
        <trans-unit id="6673d15b94e89eb12696401bb24c2f3bdd46cbde" translate="yes">
          <source>Contains your library project's logic and data. Like an application project, a library project can contain components, services, modules, directives, and pipes.</source>
          <target state="translated">ライブラリプロジェクトのロジックとデータが含まれます。 アプリケーションプロジェクトと同様に、ライブラリプロジェクトにはコンポーネント、サービス、モジュール、ディレクティブ、およびパイプを含めることができます。</target>
        </trans-unit>
        <trans-unit id="237350064b8c3b0e11e70b93fd554306d2a4f39f" translate="yes">
          <source>Content Security Policy (CSP) is a defense-in-depth technique to prevent XSS. To enable CSP, configure your web server to return an appropriate &lt;code&gt;Content-Security-Policy&lt;/code&gt; HTTP header. Read more about content security policy at &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;An Introduction to Content Security Policy&lt;/a&gt; on the HTML5Rocks website.</source>
          <target state="translated">コンテンツセキュリティポリシー（CSP）は、XSSを防ぐための多層防御技術です。 CSPを有効にするには、適切な &lt;code&gt;Content-Security-Policy&lt;/code&gt; HTTPヘッダーを返すようにWebサーバーを構成します。 コンテンツセキュリティポリシーの詳細については、HTML5Rocks Webサイトの「 &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;コンテンツセキュリティポリシーの概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f6202692206dad79a1b14d6088be61b681526178" translate="yes">
          <source>Content projection</source>
          <target state="translated">コンテンツの投影</target>
        </trans-unit>
        <trans-unit id="a019a50d07f41ea70df9c0821615ec4ff0dc202f" translate="yes">
          <source>Content projection: yes</source>
          <target state="translated">コンテンツの投影：はい</target>
        </trans-unit>
        <trans-unit id="4e05a83d745ac98da7773c2108efde552ef95257" translate="yes">
          <source>Content queries are set before the &lt;code&gt;ngAfterContentInit&lt;/code&gt; callback is called.</source>
          <target state="translated">コンテンツクエリは、 &lt;code&gt;ngAfterContentInit&lt;/code&gt; コールバックが呼び出される前に設定されます。</target>
        </trans-unit>
        <trans-unit id="132d57a8ba3715878400596fcd4e56d25812cdcb" translate="yes">
          <source>Content queries are set before the &lt;code&gt;ngAfterContentInit&lt;/code&gt; callback is called. View queries are set before the &lt;code&gt;ngAfterViewInit&lt;/code&gt; callback is called.</source>
          <target state="translated">コンテンツクエリは、 &lt;code&gt;ngAfterContentInit&lt;/code&gt; コールバックが呼び出される前に設定されます。 ビュークエリは、 &lt;code&gt;ngAfterViewInit&lt;/code&gt; コールバックが呼び出される前に設定されます。</target>
        </trans-unit>
        <trans-unit id="61218e768de2538cdbdc58d958fa9e9d9945325e" translate="yes">
          <source>Content security</source>
          <target state="translated">コンテンツのセキュリティ</target>
        </trans-unit>
        <trans-unit id="de5cbf363cbbce7cd02a96e382ca1a5a03a3865a" translate="yes">
          <source>Content security policy</source>
          <target state="translated">コンテンツセキュリティポリシー</target>
        </trans-unit>
        <trans-unit id="0fe6c28565cc3c25e091112f9228a8f6d49d056a" translate="yes">
          <source>ContentChild</source>
          <target state="translated">ContentChild</target>
        </trans-unit>
        <trans-unit id="80e33e2fb56f68033efbded7c57f7a1bcd8a17c6" translate="yes">
          <source>ContentChildren</source>
          <target state="translated">ContentChildren</target>
        </trans-unit>
        <trans-unit id="30dfef912c135ce3653ecd0049ab1a0d09975808" translate="yes">
          <source>Context-dependant translation forms for strings. Typically the standalone version is for the nominative form of the word, and the format version is used for the genitive case.</source>
          <target state="translated">文字列のコンテキスト依存の翻訳フォーム。 通常、スタンドアロンバージョンは主格形式の単語用であり、形式バージョンは属格の場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="e639aff42d79ce7d04ac679b47d7888105a27b9c" translate="yes">
          <source>Continue working in &lt;code&gt;cart.service.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cart.service.ts&lt;/code&gt; で作業を続けます。</target>
        </trans-unit>
        <trans-unit id="98d30ae3f1bb7f9fb155a5bf681d817c8c98d5be" translate="yes">
          <source>Continuing with the same example, suppose the components of a module truly require a private, custom &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同じ例を続けて、モジュールのコンポーネントがプライベートなカスタム &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; を本当に必要とすると仮定します。</target>
        </trans-unit>
        <trans-unit id="0b994060af598c09bf8841e4b648fa4521474cd2" translate="yes">
          <source>Contribute to Angular docs by creating &lt;a href=&quot;https://github.com/angular/angular/pulls&quot;&gt;pull requests&lt;/a&gt; on the Angular Github repository. See &lt;a href=&quot;https://github.com/angular/angular/blob/master/CONTRIBUTING.md&quot;&gt;Contributing to Angular&lt;/a&gt; for information about submission guidelines.</source>
          <target state="translated">Angular Githubリポジトリで&lt;a href=&quot;https://github.com/angular/angular/pulls&quot;&gt;プルリクエスト&lt;/a&gt;を作成して、Angularドキュメントに貢献します。 提出ガイドラインについては&lt;a href=&quot;https://github.com/angular/angular/blob/master/CONTRIBUTING.md&quot;&gt;、Angular&lt;/a&gt;への貢献をご覧ください。</target>
        </trans-unit>
        <trans-unit id="43d038e7e3efd3548f310850f15533c4258c0fb1" translate="yes">
          <source>Control status CSS classes</source>
          <target state="translated">制御ステータスCSSクラス</target>
        </trans-unit>
        <trans-unit id="229ecc00162e04334fa4b4ccac6c92e3cb27952a" translate="yes">
          <source>ControlContainer</source>
          <target state="translated">ControlContainer</target>
        </trans-unit>
        <trans-unit id="343d7cf91d2920daa7e4cf70ebe4169f5fbad163" translate="yes">
          <source>ControlValueAccessor</source>
          <target state="translated">ControlValueAccessor</target>
        </trans-unit>
        <trans-unit id="c704de049fa7f49d7e27a189c2f7435244863da7" translate="yes">
          <source>Controller function</source>
          <target state="translated">コントローラー機能</target>
        </trans-unit>
        <trans-unit id="eaf31001eb1cfd639a6e756df156289b71c30f3e" translate="yes">
          <source>Controller lifecycle hook methods &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onInit&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;$onDestroy()&lt;/code&gt;, and &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onChanges&lt;/a&gt;()&lt;/code&gt; are another convenient feature that AngularJS 1.5 introduces. They all have nearly exact &lt;a href=&quot;lifecycle-hooks&quot;&gt;equivalents in Angular&lt;/a&gt;, so organizing component lifecycle logic around them will ease the eventual Angular upgrade process.</source>
          <target state="translated">コントローラのライフサイクルフックメソッド &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onInit&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;$onDestroy()&lt;/code&gt; 、および &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onChanges&lt;/a&gt;()&lt;/code&gt; は、AngularJS 1.5で導入されたもう1つの便利な機能です。 これらはすべて&lt;a href=&quot;lifecycle-hooks&quot;&gt;、Angularに&lt;/a&gt;ほぼ正確に同等のものがあるため、コンポーネントのライフサイクルロジックを整理すると、最終的なAngularアップグレードプロセスが容易になります。</target>
        </trans-unit>
        <trans-unit id="4a55898ba4d0c3606814215066c44fdde71f8efa" translate="yes">
          <source>Controller registration</source>
          <target state="translated">コントローラー登録</target>
        </trans-unit>
        <trans-unit id="ea0568a8e25668de0a1132c1123479b554368dac" translate="yes">
          <source>Controller to be injected into tests, that allows for mocking and flushing of requests.</source>
          <target state="translated">リクエストのモックとフラッシュを可能にするテストに注入されるコントローラー。</target>
        </trans-unit>
        <trans-unit id="b0c2b035771a9eb356524d9a56b916b77b9f7291" translate="yes">
          <source>Controlling the &lt;em&gt;Submit&lt;/em&gt; button's enabled state by binding to &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; validity.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; の有効性にバインドして、[ &lt;em&gt;送信&lt;/em&gt; ]ボタンの有効状態を制御します。</target>
        </trans-unit>
        <trans-unit id="a9a192682500970780576e3105c9ffd0bc6ec8ac" translate="yes">
          <source>Controls the type check for linting.</source>
          <target state="translated">リンティングのタイプチェックを制御します。</target>
        </trans-unit>
        <trans-unit id="be77b92308e4d8d1f11ce842fbb550d826c3b78b" translate="yes">
          <source>Convert that method to use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; as follows:</source>
          <target state="translated">次のように、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用するようにそのメソッドを変換します。</target>
        </trans-unit>
        <trans-unit id="00b2a18414b957028b4f77b2246b6dc3ecee7517" translate="yes">
          <source>Convert the phone detail component template into Angular syntax as follows:</source>
          <target state="translated">電話詳細コンポーネントテンプレートを次のようにAngular構文に変換します。</target>
        </trans-unit>
        <trans-unit id="461a5706ccc3e456140291e61b965e6d8ccf1d72" translate="yes">
          <source>Converting existing code for async operations into observables</source>
          <target state="translated">非同期操作の既存のコードをオブザーバブルに変換する</target>
        </trans-unit>
        <trans-unit id="078947d90aafa4b154394b9558fb454be3bdea6f" translate="yes">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; instance to a &lt;code&gt;&lt;a href=&quot;parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; インスタンスを &lt;code&gt;&lt;a href=&quot;parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="97d29d83b162042524ce3f03b85cb9262c204f0e" translate="yes">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;router/params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; instance to a &lt;code&gt;&lt;a href=&quot;router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; インスタンスを &lt;code&gt;&lt;a href=&quot;router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="9993dde6f70ec00b27b0a3b88374796590de2ce3" translate="yes">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; into a url</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; をURLに変換します</target>
        </trans-unit>
        <trans-unit id="21b6e9efdfda32b5cc193fd23ed3d6560b8ed92f" translate="yes">
          <source>Converts a JavaScript object into a JSON string. This is useful for debugging.</source>
          <target state="translated">JavaScriptオブジェクトをJSON文字列に変換します。 これはデバッグに役立ちます。</target>
        </trans-unit>
        <trans-unit id="adf77768d6a39db93cdef5c7aa5d05d8ae44ccfc" translate="yes">
          <source>Converts a value into its JSON-format representation. Useful for debugging.</source>
          <target state="translated">値をJSON形式の表現に変換します。 デバッグに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5b89863d56f5fa5231bd9ba6831296dcbd916d71" translate="yes">
          <source>Converts the string to lowercase.</source>
          <target state="translated">文字列を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="8a496e4dc738110449ee481338a94d58994d8e7f" translate="yes">
          <source>Cookie name default is &lt;code&gt;XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="translated">Cookie名のデフォルトは &lt;code&gt;XSRF-TOKEN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="decdd902fbecc98f23f54011ff264d9219f15f90" translate="yes">
          <source>Copy &lt;em&gt;everything&lt;/em&gt; within the output folder (&lt;code&gt;dist/&lt;/code&gt; by default) to a folder on the server.</source>
          <target state="translated">出力フォルダー（デフォルトでは &lt;code&gt;dist/&lt;/code&gt; ）内の&lt;em&gt;すべてを&lt;/em&gt;サーバー上のフォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="e96dfe6c055de09a0fe4ab8d1cd89274f9e0b328" translate="yes">
          <source>Copy files from the starter Angular app into the folder containing the &lt;code&gt;.csproj&lt;/code&gt; file. Include the files in the Visual Studio project as follows:</source>
          <target state="translated">スターターAngularアプリから &lt;code&gt;.csproj&lt;/code&gt; ファイルを含むフォルダーにファイルをコピーします。 次のようにファイルをVisual Studioプロジェクトに含めます。</target>
        </trans-unit>
        <trans-unit id="2e0c4cd2fc66e099007547c595d8fb3af64016d1" translate="yes">
          <source>Copy the &lt;code&gt;hero-detail&lt;/code&gt; folder, the &lt;code&gt;hero.ts&lt;/code&gt;, &lt;code&gt;hero.service.ts&lt;/code&gt;, and &lt;code&gt;mock-heroes.ts&lt;/code&gt; files into the &lt;code&gt;heroes&lt;/code&gt; subfolder.</source>
          <target state="translated">&lt;code&gt;hero-detail&lt;/code&gt; フォルダー、 &lt;code&gt;hero.ts&lt;/code&gt; 、 &lt;code&gt;hero.service.ts&lt;/code&gt; 、および &lt;code&gt;mock-heroes.ts&lt;/code&gt; ファイルを &lt;code&gt;heroes&lt;/code&gt; サブフォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="8e12febf5873dca574759667733b5e5e66e6ba98" translate="yes">
          <source>Copy the &lt;code&gt;message.service.ts&lt;/code&gt; into the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;message.service.ts&lt;/code&gt; を &lt;code&gt;src/app&lt;/code&gt; フォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="ccc6a23cf0c8732b658ce947fd5dc5af75d63b93" translate="yes">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.css&lt;/code&gt; from the live example into the &lt;code&gt;hero-list.component.css&lt;/code&gt; file.</source>
          <target state="translated">ライブサンプルの &lt;code&gt;heroes/heroes.component.css&lt;/code&gt; の内容を &lt;code&gt;hero-list.component.css&lt;/code&gt; ファイルにコピーします。</target>
        </trans-unit>
        <trans-unit id="9e21cb207ee7e3057d9095acd497da7ad01d4339" translate="yes">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.html&lt;/code&gt; from the &lt;span name=&quot;toh-pt4&quot;&gt;&quot;Services&quot; tutorial&lt;/span&gt; into the &lt;code&gt;hero-list.component.html&lt;/code&gt; template.</source>
          <target state="translated">&lt;span name=&quot;toh-pt4&quot;&gt;「サービス」チュートリアル&lt;/span&gt;の &lt;code&gt;heroes/heroes.component.html&lt;/code&gt; の内容を &lt;code&gt;hero-list.component.html&lt;/code&gt; テンプレートにコピーします。</target>
        </trans-unit>
        <trans-unit id="006748a2c8575f2736445cd6e1cb632b2d1c3f84" translate="yes">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.ts&lt;/code&gt; from the live example into the &lt;code&gt;hero-list.component.ts&lt;/code&gt; file.</source>
          <target state="translated">ライブサンプルの &lt;code&gt;heroes/heroes.component.ts&lt;/code&gt; の内容を &lt;code&gt;hero-list.component.ts&lt;/code&gt; ファイルにコピーします。</target>
        </trans-unit>
        <trans-unit id="64e69777d644990a712d9156ccfe6d33b49e0d98" translate="yes">
          <source>Copy the files and folders from &lt;code&gt;app/heroes&lt;/code&gt; into the new &lt;code&gt;crisis-center&lt;/code&gt; folder.</source>
          <target state="translated">ファイルとフォルダーを &lt;code&gt;app/heroes&lt;/code&gt; から新しい &lt;code&gt;crisis-center&lt;/code&gt; フォルダーにコピーします。</target>
        </trans-unit>
        <trans-unit id="ac16c8969e359f571689b91327c6dcf652187725" translate="yes">
          <source>Copy this &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;, overriding its contents with the given parameter hash.</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; をコピーし、指定されたパラメーターハッシュでその内容をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="a1d8ecfd782a2f39dac14d8d6b51eb1f52ca13f6" translate="yes">
          <source>Core AngularJS services Importing this &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; will add providers for the core &lt;a href=&quot;https://docs.angularjs.org/api/ng/service&quot;&gt;AngularJS services&lt;/a&gt; to the root injector.</source>
          <target state="translated">コアAngularJSサービスこの &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; をインポートすると、コア&lt;a href=&quot;https://docs.angularjs.org/api/ng/service&quot;&gt;AngularJSサービスの&lt;/a&gt;プロバイダーがルートインジェクターに追加されます。</target>
        </trans-unit>
        <trans-unit id="c39220a429cf1bece1b687538bd0e0fc0b34e712" translate="yes">
          <source>Correspondingly, when you upgrade an AngularJS component and use it from Angular, all the bindings defined for the component directive's &lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;bindToController&lt;/code&gt;) will be hooked into Angular change detection. They will be treated as regular Angular inputs. Their values will be written to the upgraded component's scope (or controller) when they change.</source>
          <target state="translated">同様に、AngularJSコンポーネントをアップグレードしてAngularから使用すると、コンポーネントディレクティブの &lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; （または &lt;code&gt;bindToController&lt;/code&gt; ）に定義されたすべてのバインディングがAngular変更検出にフックされます。 それらは通常のAngular入力として扱われます。 それらの値は、変更されると、アップグレードされたコンポーネントのスコープ（またはコントローラー）に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="eee21c7732ceea657ba582876098e48649d633db" translate="yes">
          <source>Could not resolve type</source>
          <target state="translated">タイプを解決できませんでした</target>
        </trans-unit>
        <trans-unit id="f4018045cfb458b2734d2b09cf762c2567878c41" translate="yes">
          <source>Counter</source>
          <target state="translated">Counter</target>
        </trans-unit>
        <trans-unit id="b7570836d6154e29e2f406e09548419037760602" translate="yes">
          <source>Create &lt;code&gt;HeroSearchComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroSearchComponent&lt;/code&gt; を作成する</target>
        </trans-unit>
        <trans-unit id="da63132d4553a2504164f54ad55c134cc4edc6ad" translate="yes">
          <source>Create &lt;code&gt;MessagesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MessagesComponent&lt;/code&gt; を作成する</target>
        </trans-unit>
        <trans-unit id="9376163183db8e23239d334e0ae6a7ea6411dd85" translate="yes">
          <source>Create Angular components to display hero details and show an array of heroes.</source>
          <target state="translated">Angularコンポーネントを作成して、ヒーローの詳細を表示し、ヒーローの配列を表示します。</target>
        </trans-unit>
        <trans-unit id="5c5fe036d57773794e72a8d112d9907ead0619d8" translate="yes">
          <source>Create a &quot;top component&quot; that acts as the root for all of the module's components. Add the custom &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; provider to the top component's &lt;code&gt;providers&lt;/code&gt; list rather than the module's &lt;code&gt;providers&lt;/code&gt;. Recall that Angular creates a child injector for each component instance and populates the injector with the component's own providers.</source>
          <target state="translated">モジュールのすべてのコンポーネントのルートとして機能する「トップコンポーネント」を作成します。 モジュールの &lt;code&gt;providers&lt;/code&gt; ではなく、最上位コンポーネントの &lt;code&gt;providers&lt;/code&gt; リストにカスタム &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; プロバイダーを追加します 。 Angularは各コンポーネントインスタンスの子インジェクターを作成し、インジェクターにコンポーネントの独自のプロバイダーを設定することを思い出してください。</target>
        </trans-unit>
        <trans-unit id="0b0911b2990c85edee45f304d359a364bc6364bd" translate="yes">
          <source>Create a &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="ca5222191cefbcbf34292d4ccac4f8d3099452e0" translate="yes">
          <source>Create a &lt;code&gt;&lt;a href=&quot;platform-browser/statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that can be used to store value of type T with &lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; で T型の値を格納するために使用できる &lt;code&gt;&lt;a href=&quot;platform-browser/statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="da12bfbf8cba36936cab8d5080627812d3bc5b9a" translate="yes">
          <source>Create a &lt;code&gt;&lt;a href=&quot;statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that can be used to store value of type T with &lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; で T型の値を格納するために使用できる &lt;code&gt;&lt;a href=&quot;statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="33824bbdfa9db4cd33cb2cc28044b8bb7bd994f1" translate="yes">
          <source>Create a &lt;code&gt;Hero&lt;/code&gt; class in its own file in the &lt;code&gt;src/app&lt;/code&gt; folder. Give it &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;src/app&lt;/code&gt; フォルダー内の独自のファイルに &lt;code&gt;Hero&lt;/code&gt; クラスを作成します。 &lt;code&gt;id&lt;/code&gt; および &lt;code&gt;name&lt;/code&gt; プロパティを指定します。</target>
        </trans-unit>
        <trans-unit id="1c71c09584ab2fa05b7a2f1d605f961915809721" translate="yes">
          <source>Create a &lt;code&gt;HeroSearchComponent&lt;/code&gt; with the CLI.</source>
          <target state="translated">CLIで &lt;code&gt;HeroSearchComponent&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="6845c0f15a7f2d03e5f9f62fa58801361ed5c80a" translate="yes">
          <source>Create a &lt;code&gt;HeroesModule&lt;/code&gt; with routing in the heroes folder and register it with the root &lt;code&gt;AppModule&lt;/code&gt;. This is where you'll be implementing the &lt;em&gt;hero management&lt;/em&gt;.</source>
          <target state="translated">heroesフォルダーにルーティングを使用して &lt;code&gt;HeroesModule&lt;/code&gt; を作成し、ルート &lt;code&gt;AppModule&lt;/code&gt; に登録します。 ここで&lt;em&gt;ヒーロー管理を&lt;/em&gt;実装します。</target>
        </trans-unit>
        <trans-unit id="17210801dfaf29924a75d1ab920c332968468da3" translate="yes">
          <source>Create a &lt;code&gt;crisis-center&lt;/code&gt; subfolder in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;src/app&lt;/code&gt; フォルダーに &lt;code&gt;crisis-center&lt;/code&gt; サブフォルダーを作成します。</target>
        </trans-unit>
        <trans-unit id="8d1365a808082b38561ee0f9ea6407a8ea2c7915" translate="yes">
          <source>Create a &lt;code&gt;files/&lt;/code&gt; folder inside the &lt;code&gt;schematics/my-service/&lt;/code&gt; folder.</source>
          <target state="translated">schemas &lt;code&gt;schematics/my-service/&lt;/code&gt; フォルダー内に &lt;code&gt;files/&lt;/code&gt; フォルダーを作成します。</target>
        </trans-unit>
        <trans-unit id="03a8b37194cd9a6ed4fef9b8e6ffb334c714f01f" translate="yes">
          <source>Create a &lt;code&gt;schema.json&lt;/code&gt; file and define the available options for the schematic.</source>
          <target state="translated">&lt;code&gt;schema.json&lt;/code&gt; ファイルを作成し、回路図で利用可能なオプションを定義します。</target>
        </trans-unit>
        <trans-unit id="7653907d1390a7958748cfad0de2f7e15929597c" translate="yes">
          <source>Create a &lt;code&gt;schema.ts&lt;/code&gt; file and define an interface that stores the values of the options defined in the &lt;code&gt;schema.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;schema.ts&lt;/code&gt; ファイルを作成し、 schema.jsonファイルで定義されたオプションの値を保存するインターフェースを定義します。</target>
        </trans-unit>
        <trans-unit id="5fd7bd2de7171d715f1f538a385409bbedf60fd2" translate="yes">
          <source>Create a &lt;code&gt;typings.d.ts&lt;/code&gt; file in your &lt;code&gt;src/&lt;/code&gt; folder. This file is automatically included as global type definition.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; フォルダーに &lt;code&gt;typings.d.ts&lt;/code&gt; ファイルを作成します。 このファイルは、グローバルタイプ定義として自動的に含まれます。</target>
        </trans-unit>
        <trans-unit id="ff616cbff238ee78c83cb4c2d5667f04727c2c70" translate="yes">
          <source>Create a Hero class</source>
          <target state="translated">ヒーロークラスを作成する</target>
        </trans-unit>
        <trans-unit id="de7fd1d13091dc87fa2bc6cd7f30b4c62da30c2a" translate="yes">
          <source>Create a cart component and set up routing to the new component. At this point, the cart page will only have default text.</source>
          <target state="translated">カートコンポーネントを作成し、新しいコンポーネントへのルーティングを設定します。 この時点で、カートページにはデフォルトのテキストのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="3d3c0796b0b271bbd7027cd5fd74cea722c3bd61" translate="yes">
          <source>Create a component to render AngularJS content</source>
          <target state="translated">AngularJSコンテンツをレンダリングするコンポーネントを作成します</target>
        </trans-unit>
        <trans-unit id="dbb341a6339ef12f828a7d5f6c43fd81df5c13d1" translate="yes">
          <source>Create a custom &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; function for AngularJS-specific URLs and configure the Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; with the custom matcher for AngularJS routes.</source>
          <target state="translated">AngularJS固有のURL用のカスタム &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 関数を作成し、AngularJSルート用のカスタムマッチャーでAngular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="c523f2d6f0ef5f2efd18e3076a9038458c296a55" translate="yes">
          <source>Create a factory function that returns that instance.</source>
          <target state="translated">そのインスタンスを返すファクトリー関数を作成します。</target>
        </trans-unit>
        <trans-unit id="7f2bb69920f627470e948635b846ad2f55548877" translate="yes">
          <source>Create a feature module with routing</source>
          <target state="translated">ルーティングを使用して機能モジュールを作成する</target>
        </trans-unit>
        <trans-unit id="3992d8892162bfa0ed8361ad16356d6012ed972d" translate="yes">
          <source>Create a file &lt;code&gt;proxy.conf.json&lt;/code&gt; in your project's &lt;code&gt;src/&lt;/code&gt; folder.</source>
          <target state="translated">プロジェクトの &lt;code&gt;src/&lt;/code&gt; フォルダーに &lt;code&gt;proxy.conf.json&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="41ffd1d35c5f02ae42ec30c59609ce9da41df565" translate="yes">
          <source>Create a file called &lt;code&gt;mock-heroes.ts&lt;/code&gt; in the &lt;code&gt;src/app/&lt;/code&gt; folder. Define a &lt;code&gt;HEROES&lt;/code&gt; constant as an array of ten heroes and export it. The file should look like this.</source>
          <target state="translated">&lt;code&gt;src/app/&lt;/code&gt; フォルダーに &lt;code&gt;mock-heroes.ts&lt;/code&gt; というファイルを作成します。 &lt;code&gt;HEROES&lt;/code&gt; 定数を10人のヒーローの配列として定義し、エクスポートします。 ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="69732bba9870de84d675267cbe1cf4d45f861919" translate="yes">
          <source>Create a file named &lt;code&gt;__name@dasherize__.service.ts.template&lt;/code&gt; that defines a template you can use for generating files. This template will generate a service that already has Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; injected into its constructor.</source>
          <target state="translated">ファイルの生成に使用できるテンプレートを定義する &lt;code&gt;__name@dasherize__.service.ts.template&lt;/code&gt; という名前のファイルを作成します。 このテンプレートは、Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; が既にコンストラクターに挿入されているサービスを生成します。</target>
        </trans-unit>
        <trans-unit id="38e4fd9e90f6b4cd021df9e4dfcbb8d302140ea2" translate="yes">
          <source>Create a file named &lt;code&gt;builders.json&lt;/code&gt; file that looks like this.</source>
          <target state="translated">次のような &lt;code&gt;builders.json&lt;/code&gt; ファイルという名前のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="f2a3216de4a1d482ff94f06e3f6620f72a039129" translate="yes">
          <source>Create a form array with array-level validators</source>
          <target state="translated">配列レベルのバリデーターでフォーム配列を作成する</target>
        </trans-unit>
        <trans-unit id="b96a11ccc1a7f7f1033388de141e67f8a7692bf0" translate="yes">
          <source>Create a form component</source>
          <target state="translated">フォームコンポーネントを作成する</target>
        </trans-unit>
        <trans-unit id="8c779731b129ec9a1f0f54ba194f30d8bf6d9a3b" translate="yes">
          <source>Create a form group with 2 controls</source>
          <target state="translated">2つのコントロールを持つフォームグループを作成する</target>
        </trans-unit>
        <trans-unit id="a31a843ccda278265868ae591babbbbffa0aaec9" translate="yes">
          <source>Create a form group with a group-level validator</source>
          <target state="translated">グループレベルのバリデータを使用してフォームグループを作成する</target>
        </trans-unit>
        <trans-unit id="8349529ff67aeb3fe069d4c4eaa3d215f2841f84" translate="yes">
          <source>Create a function to retrieve the heroes from the service.</source>
          <target state="translated">サービスからヒーローを取得する関数を作成します。</target>
        </trans-unit>
        <trans-unit id="3aa54a2c7f2ebf4339e64d173a825d3b05732eab" translate="yes">
          <source>Create a localization folder</source>
          <target state="translated">ローカライズフォルダーを作成する</target>
        </trans-unit>
        <trans-unit id="a64438b98d4f21e3d55b771cbac8f715217ae08d" translate="yes">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; with the given parameters.</source>
          <target state="translated">指定されたパラメーターで新しい &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="78efc26fbc9687ec57888c9bb37b7f4b34c26875" translate="yes">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; instance. You should not normally need to do this. Instead you should derive a new class from this one and call the super constructor from the base class.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。 通常、これを行う必要はありません。 代わりに、このクラスから新しいクラスを派生し、基本クラスからスーパーコンストラクターを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="9a46de9f6729bf067c43047c43ae56c3aae4a7e7" translate="yes">
          <source>Create a new Angular CLI workspace using the &lt;a href=&quot;https://angular.io/start/cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;コマンドを使用して、新しいAngular CLIワークスペースを作成します。</target>
        </trans-unit>
        <trans-unit id="380217cd2bc441b341d7dabe2374197b8ed3e719" translate="yes">
          <source>Create a new Injector which is configure using &lt;code&gt;&lt;a href=&quot;staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt; を使用して設定される新しいインジェクターを作成します。</target>
        </trans-unit>
        <trans-unit id="e7b9c46559c7dd10c68eb2430214ec17d7126c85" translate="yes">
          <source>Create a new file, &lt;code&gt;tsconfig-es5.spec.json&lt;/code&gt; next to &lt;code&gt;tsconfig.spec.json&lt;/code&gt; with the following content.</source>
          <target state="translated">&lt;code&gt;tsconfig-es5.spec.json&lt;/code&gt; 横に、次の内容の新しいファイルtsconfig-es5.spec.jsonを作成します。</target>
        </trans-unit>
        <trans-unit id="69ee4f0cae672b78fd7e5b509ff749d4be5d8a16" translate="yes">
          <source>Create a new product alerts component.</source>
          <target state="translated">新しい製品アラートコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="325cf797263cfffdce479b5e173823121f9d4d73" translate="yes">
          <source>Create a new project</source>
          <target state="translated">新しいプロジェクトを作成する</target>
        </trans-unit>
        <trans-unit id="5248aa9278aa812df34236f34bfb64a599867920" translate="yes">
          <source>Create a new project named &lt;code&gt;angular-forms&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;angular-forms&lt;/code&gt; という名前の新しいプロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="1fc5f1c2569e6cb934fdcbd8926b0aea6127a7e7" translate="yes">
          <source>Create a new project, giving it any name you like.</source>
          <target state="translated">新しいプロジェクトを作成し、好きな名前を付けます。</target>
        </trans-unit>
        <trans-unit id="4b6f7cb2d362348a78391179b8ff8adbe19ae679" translate="yes">
          <source>Create a new workspace and an initial application</source>
          <target state="translated">新しいワークスペースと初期アプリケーションを作成します</target>
        </trans-unit>
        <trans-unit id="7afd136a424f288c44a26af64d8ab3faed2ff799" translate="yes">
          <source>Create a new workspace and initial app project.</source>
          <target state="translated">新しいワークスペースと最初のアプリプロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="ae1fe121a8217214148d3bcf1b9368c81c062807" translate="yes">
          <source>Create a property in the component class named &lt;code&gt;profileForm&lt;/code&gt; and set the property to a new form group instance. To initialize the form group, provide the constructor with an object of named keys mapped to their control.</source>
          <target state="translated">&lt;code&gt;profileForm&lt;/code&gt; という名前のコンポーネントクラスにプロパティを作成し、そのプロパティを新しいフォームグループインスタンスに設定します。 フォームグループを初期化するには、コントロールにマップされた名前付きキーのオブジェクトをコンストラクターに提供します。</target>
        </trans-unit>
        <trans-unit id="1ccecb770b3d91f132f45bd90c77041c30154648" translate="yes">
          <source>Create a routable component for AngularJS content</source>
          <target state="translated">AngularJSコンテンツ用のルーティング可能なコンポーネントを作成する</target>
        </trans-unit>
        <trans-unit id="f3b4c2964b7e843bca61619451307961ed2ded49" translate="yes">
          <source>Create a service that lazy loads and bootstraps your AngularJS app.</source>
          <target state="translated">AngularJSアプリを遅延ロードおよびブートストラップするサービスを作成します。</target>
        </trans-unit>
        <trans-unit id="80bdfa1b1cdec9562cbda972de4cad92bbe26fc5" translate="yes">
          <source>Create a service to lazy load AngularJS</source>
          <target state="translated">AngularJSを遅延ロードするサービスを作成します</target>
        </trans-unit>
        <trans-unit id="289c9e1ad69aa92c9ace5d2ee7c3bdfd5e926d60" translate="yes">
          <source>Create a shared service to assemble the heroes.</source>
          <target state="translated">ヒーローを組み立てる共有サービスを作成します。</target>
        </trans-unit>
        <trans-unit id="2351297a3e386ea193139a04f7279b11dad0025e" translate="yes">
          <source>Create a static method &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; on the module.</source>
          <target state="translated">モジュールに静的メソッド &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="8a04964f1c5e0d871805d925f133724b75e3819c" translate="yes">
          <source>Create a template with the initial form layout.</source>
          <target state="translated">初期フォームレイアウトでテンプレートを作成します。</target>
        </trans-unit>
        <trans-unit id="6fcd448777d61181ebde74f3b1dbf8d75ef3f0b6" translate="yes">
          <source>Create a translation file: Use the Angular CLI &lt;code&gt;xi18n&lt;/code&gt; command to extract the marked text into an industry-standard translation source file.</source>
          <target state="translated">翻訳ファイルを作成します &lt;code&gt;xi18n&lt;/code&gt; コマンドを使用して、マークされたテキストを業界標準の翻訳ソースファイルに抽出します。</target>
        </trans-unit>
        <trans-unit id="5baf3cac85465507f34ecd0fca31009f61bda43b" translate="yes">
          <source>Create a translation source file</source>
          <target state="translated">翻訳ソースファイルを作成する</target>
        </trans-unit>
        <trans-unit id="a9fe13715c442caee7511e2ad6d5f07636523a48" translate="yes">
          <source>Create an &lt;a href=&quot;deployment#configuring-serve-for-es5&quot;&gt;ES5 serve configuration&lt;/a&gt; as explained above, and configuration an ES5 configuration for the E2E target.</source>
          <target state="translated">上記の説明に従って&lt;a href=&quot;deployment#configuring-serve-for-es5&quot;&gt;ES5サーバー構成&lt;/a&gt;を作成し、E2Eターゲット用にES5構成を構成します。</target>
        </trans-unit>
        <trans-unit id="028aa78227ee6a6c789b49247eb2726d759154ab" translate="yes">
          <source>Create an &lt;code&gt;AppRouting&lt;/code&gt; module in the &lt;code&gt;/app&lt;/code&gt; folder to contain the routing configuration.</source>
          <target state="translated">&lt;code&gt;/app&lt;/code&gt; フォルダーに &lt;code&gt;AppRouting&lt;/code&gt; モジュールを作成して、ルーティング構成を含めます。</target>
        </trans-unit>
        <trans-unit id="f9d287260e0fdc0dcca4bec41b7d0e73c535afaf" translate="yes">
          <source>Create an &lt;code&gt;animations.ts&lt;/code&gt; file in the root &lt;code&gt;src/app/&lt;/code&gt; folder. The contents look like this:</source>
          <target state="translated">ルートの &lt;code&gt;src/app/&lt;/code&gt; フォルダーに &lt;code&gt;animations.ts&lt;/code&gt; ファイルを作成します。 内容は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c771f4fa8c1303411b2989c7ec0ecfd845266d4e" translate="yes">
          <source>Create an array of form controls</source>
          <target state="translated">フォームコントロールの配列を作成する</target>
        </trans-unit>
        <trans-unit id="a120814121d988e4c710394df55d52945567c179" translate="yes">
          <source>Create an initial HTML form template</source>
          <target state="translated">初期HTMLフォームテンプレートを作成する</target>
        </trans-unit>
        <trans-unit id="c0e14e01f44a8e4033e50fdca7caa0554a8c69c1" translate="yes">
          <source>Create an injectable service class</source>
          <target state="translated">注入可能なサービスクラスを作成する</target>
        </trans-unit>
        <trans-unit id="44a67433070c190604f306f05455b8778943324e" translate="yes">
          <source>Create an injection token for an instance of the ambient type.</source>
          <target state="translated">アンビエントタイプのインスタンスの注入トークンを作成します。</target>
        </trans-unit>
        <trans-unit id="6d3f0fe233aa778aa76ea5dae93999776ae70d48" translate="yes">
          <source>Create an instance by invoking the &lt;code&gt;new&lt;/code&gt; operator and supplying additional arguments. This form is a short form of &lt;code&gt;&lt;a href=&quot;typeprovider&quot;&gt;TypeProvider&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 演算子を呼び出し、追加の引数を指定して、インスタンスを作成します。 この形式は &lt;code&gt;&lt;a href=&quot;typeprovider&quot;&gt;TypeProvider&lt;/a&gt;&lt;/code&gt; の短い形式です。</target>
        </trans-unit>
        <trans-unit id="64b222ce3ce34cbe2c058a214917ed1a3f5416dc" translate="yes">
          <source>Create an instance of a component of type &lt;code&gt;T&lt;/code&gt; based on the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration. After calling &lt;code&gt;compileComponent&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">現在の &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成に基づいて、タイプ &lt;code&gt;T&lt;/code&gt; のコンポーネントのインスタンスを作成します。 &lt;code&gt;compileComponent&lt;/code&gt; を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; の構成は現在の仕様の間凍結されます。</target>
        </trans-unit>
        <trans-unit id="ad92015ad7f4f4f784b8261d606ff16ad76df686" translate="yes">
          <source>Create and register an injectable service</source>
          <target state="translated">注入可能なサービスを作成して登録する</target>
        </trans-unit>
        <trans-unit id="a2cfd9c584dadfe8ded7f9bfc6f0127dc27a3cb7" translate="yes">
          <source>Create corresponding translation providers for the JIT compiler.</source>
          <target state="translated">JITコンパイラに対応する翻訳プロバイダーを作成します。</target>
        </trans-unit>
        <trans-unit id="8d78cab03508298b6394500ff143a4ce920f1fe8" translate="yes">
          <source>Create custom validators and input elements.</source>
          <target state="translated">カスタムバリデータと入力要素を作成します。</target>
        </trans-unit>
        <trans-unit id="7fc63713ba8febf462717ec5962af4e913e424da" translate="yes">
          <source>Create mock heroes</source>
          <target state="translated">模擬ヒーローを作成する</target>
        </trans-unit>
        <trans-unit id="05f481fe418f6a86292f6a24415f5606049d07a7" translate="yes">
          <source>Create reusable animations.</source>
          <target state="translated">再利用可能なアニメーションを作成します。</target>
        </trans-unit>
        <trans-unit id="f1b13d67ee451c85d72b12d7fed79afe9f2123ba" translate="yes">
          <source>Create the &lt;code&gt;Hero&lt;/code&gt; model class.</source>
          <target state="translated">&lt;code&gt;Hero&lt;/code&gt; モデルクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="3c6c222726d757393261bf16b1c2a79df66bfed7" translate="yes">
          <source>Create the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; を作成する</target>
        </trans-unit>
        <trans-unit id="21f3283d735b1d144cc0f99ad0d254cbfe035065" translate="yes">
          <source>Create the &lt;code&gt;MessageService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MessageService&lt;/code&gt; を作成します</target>
        </trans-unit>
        <trans-unit id="ada89949412585d9e7c1136054d118223a5d0b4c" translate="yes">
          <source>Create the &lt;code&gt;PageNotFoundComponent&lt;/code&gt; to display when users visit invalid URLs.</source>
          <target state="translated">ユーザーが無効なURLにアクセスしたときに表示する &lt;code&gt;PageNotFoundComponent&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="172a4c3b0ec11bc59cd589335fc6303ab44ee4ae" translate="yes">
          <source>Create the &lt;em&gt;Routing Module&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ルーティングモジュールを&lt;/em&gt;作成する</target>
        </trans-unit>
        <trans-unit id="da675249097ef52e40ae720707f5a7b94684a800" translate="yes">
          <source>Create the ASP.NET 4.x project in the usual way as follows:</source>
          <target state="translated">次の通常の方法でASP.NET 4.xプロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="d5d21b04456ab21aa92e8f2845d72a4cbfeb6b23" translate="yes">
          <source>Create the Hero model class</source>
          <target state="translated">Heroモデルクラスを作成する</target>
        </trans-unit>
        <trans-unit id="2452645fe3a4ccd04b9ca32f2a950631d3598e61" translate="yes">
          <source>Create the cart page</source>
          <target state="translated">カートページを作成する</target>
        </trans-unit>
        <trans-unit id="bd4dd7fe4f4f5e851ad992b436f57ba5de1dc1c9" translate="yes">
          <source>Create the checkout form</source>
          <target state="translated">チェックアウトフォームを作成する</target>
        </trans-unit>
        <trans-unit id="70ff72f4f3c8b91ef4c89715e795b00cc3d2d5e1" translate="yes">
          <source>Create the component that controls the form.</source>
          <target state="translated">フォームを制御するコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="b10035e89e8d4f31dd3e423e7d84cb7cc1782c8c" translate="yes">
          <source>Create the directive class file in a terminal window with the CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate directive&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate directive&lt;/code&gt; を&lt;/a&gt;使用して、ターミナルウィンドウでディレクティブクラスファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="c755355358c6f60194f94dff700393523f07e5b4" translate="yes">
          <source>Create the feature module with the CLI, using the &lt;code&gt;--route&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;--route&lt;/code&gt; フラグを使用して、CLIで機能モジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="7b642d44edff5ee83ad4bfe6b09f6e34711c193f" translate="yes">
          <source>Create the feature module&amp;rsquo;s component.</source>
          <target state="translated">機能モジュールのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="313ba270b7a9c190b1c190d7d84c2a206514a6ab" translate="yes">
          <source>Create the heroes component</source>
          <target state="translated">ヒーローコンポーネントを作成する</target>
        </trans-unit>
        <trans-unit id="5b5c35b2cb11b55d12aa2d98b7a0f1aea4eaef61" translate="yes">
          <source>Create the initial Bazel configuration files by running the following command:</source>
          <target state="translated">次のコマンドを実行して、初期Bazel構成ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="1c3cdf1c844d3db6a269727dd35b1b2669fffd03" translate="yes">
          <source>Create the main file, &lt;code&gt;index.ts&lt;/code&gt; and add the source code for your schematic factory function.</source>
          <target state="translated">メインファイル &lt;code&gt;index.ts&lt;/code&gt; を作成し、回路図ファクトリ関数のソースコードを追加します。</target>
        </trans-unit>
        <trans-unit id="658a7f9024e9c73ccabe751982901d6d4924e575" translate="yes">
          <source>Create the main file, &lt;code&gt;index.ts&lt;/code&gt;.</source>
          <target state="translated">メインファイル &lt;code&gt;index.ts&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="53254f7fb49a06ca530fbd59f0f4f685065ab168" translate="yes">
          <source>Create the shopping cart service</source>
          <target state="translated">ショッピングカートサービスを作成する</target>
        </trans-unit>
        <trans-unit id="b65fa03331046adf1f90a172897e6a189676d1aa" translate="yes">
          <source>Create the translation files</source>
          <target state="translated">翻訳ファイルを作成する</target>
        </trans-unit>
        <trans-unit id="631ced2ba2c2f7187c709f53e2a55495fa82e49d" translate="yes">
          <source>Create trace scope.</source>
          <target state="translated">トレーススコープを作成します。</target>
        </trans-unit>
        <trans-unit id="347617d306b391c7a5529223aa0bf45ed4268eff" translate="yes">
          <source>Create your custom renderer using &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; を使用してカスタムレンダラーを作成します。</target>
        </trans-unit>
        <trans-unit id="dc717190186e3ee44cd32129c62e0deba59b07df" translate="yes">
          <source>Creates a &lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt; and attaches it to a given HTML element.</source>
          <target state="translated">&lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJSマネージャー&lt;/a&gt;を作成し、指定されたHTML要素にアタッチします。</target>
        </trans-unit>
        <trans-unit id="a6530e3441dce3f9ee236ed544557b7007cf2e1f" translate="yes">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance from a domain model and binds it to a form control element.</source>
          <target state="translated">ドメインモデルから &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、フォームコントロール要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="caae2a71e30d7d7b7b9727c56659985439b5bd05" translate="yes">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance from a domain model and binds it to a form control element.</source>
          <target state="translated">ドメインモデルから &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、フォームコントロール要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="ea0cd9f72328ab86c66b5fcd62c3ef99cf3da6eb" translate="yes">
          <source>Creates a child injector from previously resolved providers.</source>
          <target state="translated">以前に解決されたプロバイダーから子インジェクターを作成します。</target>
        </trans-unit>
        <trans-unit id="fef3971537b3f0a1dde1128e255f52d415265611" translate="yes">
          <source>Creates a custom element class based on an Angular component.</source>
          <target state="translated">Angularコンポーネントに基づいてカスタム要素クラスを作成します。</target>
        </trans-unit>
        <trans-unit id="96d72128265d04963c687f715964b2a2d13bcad5" translate="yes">
          <source>Creates a directory &lt;code&gt;src/app/hero-detail&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;src/app/hero-detail&lt;/code&gt; ディレクトリを作成します。</target>
        </trans-unit>
        <trans-unit id="22d9883ebf4a7b06ec424ffe070d29aca9b5d2ea" translate="yes">
          <source>Creates a factory for a platform</source>
          <target state="translated">プラットフォームのファクトリーを作成します</target>
        </trans-unit>
        <trans-unit id="26b2ab3fe3f2aa6f449308649563df0b4c724003" translate="yes">
          <source>Creates a link to a different view based on a route instruction consisting of a route path, required and optional parameters, query parameters, and a fragment. To navigate to a root route, use the &lt;code&gt;/&lt;/code&gt; prefix; for a child route, use the &lt;code&gt;./&lt;/code&gt;prefix; for a sibling or parent, use the &lt;code&gt;../&lt;/code&gt; prefix.</source>
          <target state="translated">ルートパス、必須およびオプションのパラメーター、クエリパラメーター、フラグメントで構成されるルート指示に基づいて、別のビューへのリンクを作成します。 ルートルートに移動するには、 &lt;code&gt;/&lt;/code&gt; プレフィックスを使用します。 子ルートの場合、。 &lt;code&gt;./&lt;/code&gt; プレフィックスを使用します。 兄弟または親の場合は、 &lt;code&gt;../&lt;/code&gt; プレフィックスを使用します。</target>
        </trans-unit>
        <trans-unit id="8a084a9515c51a254bece9083e3958b5aaaa0d6d" translate="yes">
          <source>Creates a local variable &lt;code&gt;movieplayer&lt;/code&gt; that provides access to the &lt;code&gt;video&lt;/code&gt; element instance in data-binding and event-binding expressions in the current template.</source>
          <target state="translated">現在のテンプレートのデータバインディングおよびイベントバインディング式で &lt;code&gt;video&lt;/code&gt; 要素インスタンスへのアクセスを提供するローカル変数 &lt;code&gt;movieplayer&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="71801c6c1100db5ff200cf005463064053764345" translate="yes">
          <source>Creates a module with all the router directives and a provider registering routes.</source>
          <target state="translated">すべてのルーターディレクティブとルートを登録するプロバイダーを含むモジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="180a05c153eaeb2a0b36ac47d5c4868c47babf27" translate="yes">
          <source>Creates a named animation trigger, containing a list of &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; entries to be evaluated when the expression bound to the trigger changes.</source>
          <target state="translated">トリガーにバインドされた式が変更されたときに評価される &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; エントリのリストを含む名前付きアニメーショントリガーを作成します。</target>
        </trans-unit>
        <trans-unit id="411673ac1b73f98373de35f525ceaa2303a5bf06" translate="yes">
          <source>Creates a named animation trigger, containing a list of &lt;code&gt;&lt;a href=&quot;common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; entries to be evaluated when the expression bound to the trigger changes.</source>
          <target state="translated">トリガーにバインドされた式が変更されたときに評価される &lt;code&gt;&lt;a href=&quot;common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; エントリのリストを含む名前付きアニメーショントリガーを作成します。</target>
        </trans-unit>
        <trans-unit id="7d9417e5b45d0789e51adb54752a793fce271faf" translate="yes">
          <source>Creates a named set of CSS styles that should be applied on successful transition to a given state. The state can then be referenced by name within other animation functions.</source>
          <target state="translated">指定された状態への移行が成功したときに適用されるCSSスタイルの名前付きセットを作成します。 状態は、他のアニメーション関数内で名前で参照できます。</target>
        </trans-unit>
        <trans-unit id="198dc08c4d8d1323300a4a6314f67f468b5e290d" translate="yes">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="36efdd5c1e89e4e8486865cfcc0c4b03c4ef9807" translate="yes">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="513102355274ffbdb1d07ac37091bb21593c9c07" translate="yes">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="620859ab54ea93c6e79f9cce56c1578e49659d14" translate="yes">
          <source>Creates a new &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; containing a subset (slice) of the elements.</source>
          <target state="translated">要素のサブセット（スライス）を含む新しい &lt;code&gt;Array&lt;/code&gt; または &lt;code&gt;String&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="65f86dc1f9780df941519cd1825f2191b9809ccb" translate="yes">
          <source>Creates a new component.</source>
          <target state="translated">新しいコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="70706f2ce6e47532c5017273998404c708cf089b" translate="yes">
          <source>Creates a new generic NgModule definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用NgModule定義を作成します。</target>
        </trans-unit>
        <trans-unit id="62e059ae3355a021d82deb57042a27f7a22f2488" translate="yes">
          <source>Creates a new generic class definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用クラス定義を作成します。</target>
        </trans-unit>
        <trans-unit id="270f66a0fff8aec92d1637e16671375a0130bfc5" translate="yes">
          <source>Creates a new generic component definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用コンポーネント定義を作成します。</target>
        </trans-unit>
        <trans-unit id="7e4fbaedc160c88240b887c836f9ce4389155aa8" translate="yes">
          <source>Creates a new generic directive definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用ディレクティブ定義を作成します。</target>
        </trans-unit>
        <trans-unit id="c090794369bff4b38077b04ac3105611a43813f9" translate="yes">
          <source>Creates a new generic interface definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用インターフェース定義を作成します。</target>
        </trans-unit>
        <trans-unit id="c261bc76e1d49e6a376b5b0e9970a8a6e07c39c7" translate="yes">
          <source>Creates a new generic library project in the current workspace.</source>
          <target state="translated">現在のワークスペースに新しい汎用ライブラリプロジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="f1165df6f1761dae40a299c78803074c1c8ff81e" translate="yes">
          <source>Creates a new generic pipe definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用パイプ定義を作成します。</target>
        </trans-unit>
        <trans-unit id="687a19289fa64892e6372f943a0a5962cc751bb9" translate="yes">
          <source>Creates a new generic web worker definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用Webワーカー定義を作成します。</target>
        </trans-unit>
        <trans-unit id="4b0b3666b69dc3cde5cdbcd719fa9954c4463ffa" translate="yes">
          <source>Creates a new instance to be used for an NgElement.</source>
          <target state="translated">NgElementに使用する新しいインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="1674518b44797b3525bd3df00fe3390305b3a762" translate="yes">
          <source>Creates a new workspace and an initial Angular app.</source>
          <target state="translated">新しいワークスペースと初期のAngularアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="4493cf2530477a8d9f2b3b99bb6d434e7a752446" translate="yes">
          <source>Creates a new, generic service definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトに新しい汎用サービス定義を作成します。</target>
        </trans-unit>
        <trans-unit id="78c88e36bcbb813904eea93e54bc229477870576" translate="yes">
          <source>Creates a platform. Platforms have to be eagerly created via this function.</source>
          <target state="translated">プラットフォームを作成します。 プラットフォームは、この関数を使用して熱心に作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="2e110ec18dd00af8cd8c8b81aa579638616fd5bd" translate="yes">
          <source>Creates a token that can be used in a DI Provider.</source>
          <target state="translated">DIプロバイダーで使用できるトークンを作成します。</target>
        </trans-unit>
        <trans-unit id="0b1cb9f9b7d7a285afa951e0d3b69ae30cb6d1d3" translate="yes">
          <source>Creates a top-level &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance and binds it to a form to track aggregate form value and validation status.</source>
          <target state="translated">トップレベルの &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、それをフォームにバインドして、集計フォーム値と検証ステータスを追跡します。</target>
        </trans-unit>
        <trans-unit id="f85546e51ba807f1eec5d5543507cfa7164240c3" translate="yes">
          <source>Creates a top-level &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance and binds it to a form to track aggregate form value and validation status.</source>
          <target state="translated">トップレベルの &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、それをフォームにバインドして、集計フォーム値と検証ステータスを追跡します。</target>
        </trans-unit>
        <trans-unit id="1255a201b85cbe7e5e7a9b06511c881f3d5a6859" translate="yes">
          <source>Creates a view that is rendered when no &lt;code&gt;&lt;a href=&quot;common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; expressions match the &lt;code&gt;&lt;a href=&quot;common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; expression. This statement should be the final case in an &lt;code&gt;&lt;a href=&quot;common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; 式がNgSwitch式と一致しない場合にレンダリングされるビューを作成します。 このステートメントは、 &lt;code&gt;&lt;a href=&quot;common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; の最後のケースでなければなりません。</target>
        </trans-unit>
        <trans-unit id="dab35173cc85b7c0674c27b38510f7f958357ce4" translate="yes">
          <source>Creates a view that is rendered when no &lt;code&gt;&lt;a href=&quot;ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; expressions match the &lt;code&gt;&lt;a href=&quot;ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; expression. This statement should be the final case in an &lt;code&gt;&lt;a href=&quot;ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; 式がNgSwitch式と一致しない場合にレンダリングされるビューを作成します。 このステートメントは、 &lt;code&gt;&lt;a href=&quot;ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; の最後のケースでなければなりません。</target>
        </trans-unit>
        <trans-unit id="c18eee2a93e4477b6c57c10963771d662097ca69" translate="yes">
          <source>Creates a view that will be added/removed from the parent &lt;a href=&quot;common/ngplural&quot;&gt;&lt;code&gt;NgPlural&lt;/code&gt;&lt;/a&gt; when the given expression matches the plural expression according to CLDR rules.</source>
          <target state="translated">CLDRルールに従って、指定された式が複数の式と一致する場合に、親&lt;a href=&quot;common/ngplural&quot;&gt; &lt;code&gt;NgPlural&lt;/code&gt; &lt;/a&gt;に追加/削除されるビューを作成します。</target>
        </trans-unit>
        <trans-unit id="90e5aa9022d0dee8df0b0b02bc152f53c9816158" translate="yes">
          <source>Creates a view that will be added/removed from the parent &lt;a href=&quot;ngplural&quot;&gt;&lt;code&gt;NgPlural&lt;/code&gt;&lt;/a&gt; when the given expression matches the plural expression according to CLDR rules.</source>
          <target state="translated">CLDRルールに従って、指定された式が複数の式と一致する場合に、親&lt;a href=&quot;ngplural&quot;&gt; &lt;code&gt;NgPlural&lt;/code&gt; &lt;/a&gt;に追加/削除されるビューを作成します。</target>
        </trans-unit>
        <trans-unit id="3e46c132859b91b6355f645651049663e1181ea1" translate="yes">
          <source>Creates a wrapped value.</source>
          <target state="translated">ラップされた値を作成します。</target>
        </trans-unit>
        <trans-unit id="bc6c9ac0cfe99a12b62a32c54a59aa29028d9d13" translate="yes">
          <source>Creates an &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; from a user-specified configuration.</source>
          <target state="translated">ユーザー指定の構成から &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="15338d7983963dcad284f0d0d3fa9bab224ad9a6" translate="yes">
          <source>Creates an &lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; instance for the reusable animation defined by the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method that created this factory. Attaches the new player a DOM element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; によって定義された再利用可能なアニメーションのAnimationPlayerインスタンスを作成します。 このファクトリを作成した &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; メソッド。 新しいプレーヤーにDOM要素をアタッチします。</target>
        </trans-unit>
        <trans-unit id="ef233eee832b956acc0fde12db7e7f805a7b5025" translate="yes">
          <source>Creates an &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; from a user-specified configuration.</source>
          <target state="translated">ユーザー指定の構成から &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="2acaa5a30d6eeaec1c7ee23cf865f129cdaea395" translate="yes">
          <source>Creates an initializer that sets up &lt;code&gt;ngRoute&lt;/code&gt; integration along with setting up the Angular router.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; 統合を設定し、Angularルーターを設定する初期化子を作成します。</target>
        </trans-unit>
        <trans-unit id="7518ebe8d61d9da60cef10cb3c8780f14a62ff35" translate="yes">
          <source>Creates an injector from previously resolved providers.</source>
          <target state="translated">以前に解決されたプロバイダーからインジェクターを作成します。</target>
        </trans-unit>
        <trans-unit id="41ec21a51c9e34599ae4575b55ae5b4599a696af" translate="yes">
          <source>Creates an instance of an &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; for a given platform using the given runtime compiler.</source>
          <target state="translated">指定されたランタイムコンパイラを使用して、指定されたプラットフォームの &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="090b8dbc9d029131a07b9444bab5148373f0f7ff" translate="yes">
          <source>Creates an instance of an &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; for the given platform for offline compilation.</source>
          <target state="translated">オフラインコンパイル用に、指定されたプラットフォームの &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="b980f5409603a22ecf3676266dcc84080b7b4f00" translate="yes">
          <source>Creates an instance of this class that can deliver events synchronously or asynchronously.</source>
          <target state="translated">イベントを同期的または非同期的に配信できるこのクラスのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="a6216dd2c4fe1c3c1a551822d229462456b73c31" translate="yes">
          <source>Creates and binds a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、DOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="e23397f8aca5a31a9be2eee05077daf1df88fe48" translate="yes">
          <source>Creates and binds a &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスを作成し、DOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="35f589fc2c6d459da93a0cf721088c19ee1ffd35" translate="yes">
          <source>Creates and configures a module with all the router providers and directives. Optionally sets up an application listener to perform an initial navigation.</source>
          <target state="translated">すべてのルータープロバイダーとディレクティブを使用してモジュールを作成および構成します。 オプションで、最初のナビゲーションを実行するようにアプリケーションリスナーを設定します。</target>
        </trans-unit>
        <trans-unit id="f7c871bdae0434bd52b442db612e31edc75afc82" translate="yes">
          <source>Creates and initializes a custom renderer for a host DOM element.</source>
          <target state="translated">ホストDOM要素のカスタムレンダラーを作成および初期化します。</target>
        </trans-unit>
        <trans-unit id="c9e739492e303a6dc2b215156c6338f21bd2ea8d" translate="yes">
          <source>Creates and initializes a custom renderer that implements the &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; base class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; 基本クラスを実装するカスタムレンダラーを作成および初期化します。</target>
        </trans-unit>
        <trans-unit id="140841381add619cdb8d3e4d4e5da42607ff0b91" translate="yes">
          <source>Creates and initializes a custom renderer that implements the &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; base class.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; 基本クラスを実装するカスタムレンダラーを作成および初期化します。</target>
        </trans-unit>
        <trans-unit id="653f46ba9805561598374edfae9550c119bf3d02" translate="yes">
          <source>Creates and initializes a new Angular app that is the default project for a new workspace.</source>
          <target state="translated">新しいワークスペースのデフォルトのプロジェクトである新しいAngularアプリを作成して初期化します。</target>
        </trans-unit>
        <trans-unit id="ba561ab2c4f07e4c2409fcd26324dc01f653d3f5" translate="yes">
          <source>Creates the router service.</source>
          <target state="translated">ルーターサービスを作成します。</target>
        </trans-unit>
        <trans-unit id="5dcfaea570f4e205f054a7227e74c586a508d9e3" translate="yes">
          <source>Creates the service worker configuration file called &lt;a href=&quot;service-worker-config&quot;&gt;&lt;code&gt;ngsw-config.json&lt;/code&gt;&lt;/a&gt;, which specifies the caching behaviors and other settings.</source>
          <target state="translated">キャッシュ動作およびその他の設定を指定する&lt;a href=&quot;service-worker-config&quot;&gt; &lt;code&gt;ngsw-config.json&lt;/code&gt; &lt;/a&gt;というService Worker構成ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="93f3c73d71b76e9015e6075bb21802e36920b4f3" translate="yes">
          <source>Creating Libraries</source>
          <target state="translated">ライブラリを作成する</target>
        </trans-unit>
        <trans-unit id="4561116d51d14b2cb8eb4093169010893927207d" translate="yes">
          <source>Creating a PWA with Angular CLI</source>
          <target state="translated">Angular CLIを使用したPWAの作成</target>
        </trans-unit>
        <trans-unit id="932747dc8773a5a7c360d70edad53a1d6419196c" translate="yes">
          <source>Creating a builder</source>
          <target state="translated">ビルダーを作成する</target>
        </trans-unit>
        <trans-unit id="565548b72f2d4dbf2aa8bb9383516f26f568cb72" translate="yes">
          <source>Creating a class for the data</source>
          <target state="translated">データのクラスを作成する</target>
        </trans-unit>
        <trans-unit id="b91c40eee2e65613c2e4c3f65111f4ebde138624" translate="yes">
          <source>Creating a directive is similar to creating a component.</source>
          <target state="translated">ディレクティブの作成は、コンポーネントの作成に似ています。</target>
        </trans-unit>
        <trans-unit id="d2b6b7f18d181ef2637b7dc14ddeca81e37c5f6b" translate="yes">
          <source>Creating a schematics collection</source>
          <target state="translated">回路図コレクションの作成</target>
        </trans-unit>
        <trans-unit id="677d95c3cbc2b8152f7dd55e45923a7267ba4303" translate="yes">
          <source>Creating form control instances manually can become repetitive when dealing with multiple forms. The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service provides convenient methods for generating controls.</source>
          <target state="translated">フォームコントロールインスタンスを手動で作成すると、複数のフォームを処理するときに繰り返し発生する可能性があります。 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; サービスは、コントロールを生成するための便利なメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="490dddbf7619317089d285620a37e7072b4340df" translate="yes">
          <source>Creating libraries</source>
          <target state="translated">ライブラリを作成する</target>
        </trans-unit>
        <trans-unit id="db741cba2f274a4f1cbf4c6cb0ef3b78d1d8ac09" translate="yes">
          <source>Creating multiple language versions of your app.</source>
          <target state="translated">アプリの複数の言語バージョンを作成します。</target>
        </trans-unit>
        <trans-unit id="40fb5424318bad5377653fe3039ce09e1e86600f" translate="yes">
          <source>Creating nested form groups</source>
          <target state="translated">ネストされたフォームグループの作成</target>
        </trans-unit>
        <trans-unit id="841d9f0c9f2649a35f996b8772fef3210b7ca451" translate="yes">
          <source>Creating observables</source>
          <target state="translated">オブザーバブルの作成</target>
        </trans-unit>
        <trans-unit id="abbf7bb727236a3929eb0179330931778fbb36a5" translate="yes">
          <source>Creating reusable animations</source>
          <target state="translated">再利用可能なアニメーションを作成する</target>
        </trans-unit>
        <trans-unit id="e7d007397faaabddd2cd03bea65e3c36bff70353" translate="yes">
          <source>Creating shared modules allows you to organize and streamline your code. You can put commonly used directives, pipes, and components into one module and then import just that module wherever you need it in other parts of your app.</source>
          <target state="translated">共有モジュールを作成すると、コードを整理して合理化できます。 一般的に使用されるディレクティブ、パイプ、およびコンポーネントを1つのモジュールに配置し、アプリの他の部分で必要な場所にそのモジュールだけをインポートできます。</target>
        </trans-unit>
        <trans-unit id="d44a291073418ab2cbe02afbe51c1a63c022cd0f" translate="yes">
          <source>Creating the &lt;code&gt;AppModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; の作成</target>
        </trans-unit>
        <trans-unit id="8d512d2cd082ede0e253017cddc5f329df65818c" translate="yes">
          <source>Creating the &lt;code&gt;TestHostComponent&lt;/code&gt; has the side-effect of creating a &lt;code&gt;DashboardHeroComponent&lt;/code&gt; because the latter appears within the template of the former. The query for the hero element (&lt;code&gt;heroEl&lt;/code&gt;) still finds it in the test DOM, albeit at greater depth in the element tree than before.</source>
          <target state="translated">&lt;code&gt;TestHostComponent&lt;/code&gt; を作成すると、前者のテンプレート内に後者が表示されるため、 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; を作成するという副作用があります 。 ヒーロー要素（ &lt;code&gt;heroEl&lt;/code&gt; ）のクエリは、以前よりも要素ツリーの深さが深いにもかかわらず、テストDOMでそれを見つけます。</target>
        </trans-unit>
        <trans-unit id="f1ecaa9e34716f3dd9747a34a65d8ee87cc2dbcd" translate="yes">
          <source>Creating tree-shakable providers</source>
          <target state="translated">ツリーシェーカブルプロバイダーの作成</target>
        </trans-unit>
        <trans-unit id="e13e0554f557ba882751e261b5a60777b337bea6" translate="yes">
          <source>Creation</source>
          <target state="translated">Creation</target>
        </trans-unit>
        <trans-unit id="34348d8cce4ac0baa516ee80df859140d319afcc" translate="yes">
          <source>Creation &amp;amp; cancellation</source>
          <target state="translated">作成とキャンセル</target>
        </trans-unit>
        <trans-unit id="f30c0fc771771dfd33b2021ddcd6bd3d87471b38" translate="yes">
          <source>Creation and subscription</source>
          <target state="translated">作成とサブスクリプション</target>
        </trans-unit>
        <trans-unit id="67500d2a6e793e214a0cd4e1e0df35431ac81e4d" translate="yes">
          <source>Creation of an Angular directive that wraps and exposes an AngularJS component so that it can be used in an Angular template. See &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularJSコンポーネントをラップして公開するAngularディレクティブを作成して、Angularテンプレートで使用できるようにします。 &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d7af9d9b0dcb49613daac413f4d5e07d0db47b5" translate="yes">
          <source>Creation of an Angular root injector provider that wraps and exposes an AngularJS service so that it can be injected into an Angular context. See &lt;a href=&quot;upgrademodule#upgrading-an-angular-1-service&quot;&gt;Upgrading an AngularJS service&lt;/a&gt; below.</source>
          <target state="translated">AngularJSサービスをラップして公開し、Angularコンテキストに注入できるようにする、Angularルートインジェクタープロバイダーの作成。 以下の&lt;a href=&quot;upgrademodule#upgrading-an-angular-1-service&quot;&gt;AngularJSサービスのアップグレードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="30022562cf3aa58562e0f91c6669dd67bcbe50e0" translate="yes">
          <source>Creation of an AngularJS directive that wraps and exposes an Angular component so that it can be used in an AngularJS template. See &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularJSテンプレートで使用できるように、Angularコンポーネントをラップして公開するAngularJSディレクティブの作成。 &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="a6caf540e7d0dece81d99619f671f99deba1c1dc" translate="yes">
          <source>Creation of an AngularJS service that wraps and exposes an Angular injectable so that it can be injected into an AngularJS context. See &lt;code&gt;&lt;a href=&quot;downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularJSコンテキストにインジェクトでき​​るようにAngularインジェクタブルをラップして公開するAngularJSサービスの作成。 &lt;code&gt;&lt;a href=&quot;downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="965bd2d1ae3af9196cbb57387e0b08e1b5ae7b16" translate="yes">
          <source>Critical runtime parts of the framework that are needed by every application. Includes all metadata decorators, &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, dependency injection, and the component lifecycle hooks.</source>
          <target state="translated">すべてのアプリケーションに必要なフレームワークの重要なランタイム部分。 すべてのメタデータデコレータ、 &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 、依存性注入、およびコンポーネントライフサイクルフックが含まれます。</target>
        </trans-unit>
        <trans-unit id="aad515d4bcaf8e4561615026166d203743fcb329" translate="yes">
          <source>Cross field validation</source>
          <target state="translated">クロスフィールド検証</target>
        </trans-unit>
        <trans-unit id="9f699a272acbf0ee5228697bde033ed84c6bc8ec" translate="yes">
          <source>Cross-site request forgery</source>
          <target state="translated">クロスサイトリクエストフォージェリ</target>
        </trans-unit>
        <trans-unit id="58cd6a44bde0b5557b7ee1be6171e19c7b1cf41a" translate="yes">
          <source>Cross-site script inclusion (XSSI)</source>
          <target state="translated">クロスサイトスクリプトインクルード（XSSI）</target>
        </trans-unit>
        <trans-unit id="9599a8d86f93531a87bed7500ddb51c3a1759842" translate="yes">
          <source>Cross-site script inclusion, also known as JSON vulnerability, can allow an attacker's website to read data from a JSON API. The attack works on older browsers by overriding native JavaScript object constructors, and then including an API URL using a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">JSONの脆弱性とも呼ばれるクロスサイトスクリプトを含めると、攻撃者のWebサイトがJSON APIからデータを読み取ることができます。 この攻撃は、ネイティブJavaScriptオブジェクトコンストラクターをオーバーライドし、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを使用してAPI URLを含めることにより、古いブラウザーで機能します。</target>
        </trans-unit>
        <trans-unit id="90c3233734c863797885ddae5b2434bc49094fce" translate="yes">
          <source>CurrencyPipe</source>
          <target state="translated">CurrencyPipe</target>
        </trans-unit>
        <trans-unit id="c8cdbe8af0f2d035eeafa0a86020e3dfc42012d5" translate="yes">
          <source>Current index of the item in &lt;code&gt;Iterable&lt;/code&gt; or null if removed.</source>
          <target state="translated">&lt;code&gt;Iterable&lt;/code&gt; のアイテムの現在のインデックス、または削除された場合はnull。</target>
        </trans-unit>
        <trans-unit id="040896c6a7b6a938ef18df5e030e5f6c531497ca" translate="yes">
          <source>Current key in the Map.</source>
          <target state="translated">マップ内の現在のキー。</target>
        </trans-unit>
        <trans-unit id="4f623428491a00250f9cc3b6f826771ec45769cc" translate="yes">
          <source>Current value for the key or &lt;code&gt;null&lt;/code&gt; if removed.</source>
          <target state="translated">キーの現在の値、または削除された場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d111a7c81ec43cd07010bc5176f26f471a1fd12" translate="yes">
          <source>Currently every route within the &lt;em&gt;Crisis Center&lt;/em&gt; is open to everyone. The new &lt;em&gt;admin&lt;/em&gt; feature should be accessible only to authenticated users.</source>
          <target state="translated">現在、 &lt;em&gt;Crisis Center&lt;/em&gt;内のすべてのルートは誰でも利用できます。 新しい&lt;em&gt;管理&lt;/em&gt;機能には、認証されたユーザーのみがアクセスできる必要があります。</target>
        </trans-unit>
        <trans-unit id="7dc2a59fbb94224120c7fedff472f15e58fd71b8" translate="yes">
          <source>Currently the highlight color is hard-coded &lt;em&gt;within&lt;/em&gt; the directive. That's inflexible. In this section, you give the developer the power to set the highlight color while applying the directive.</source>
          <target state="translated">現在、ハイライトの色はディレクティブ&lt;em&gt;内で&lt;/em&gt;ハードコーディングさ&lt;em&gt;れ&lt;/em&gt;ています。 それは柔軟性がありません。 このセクションでは、ディレクティブを適用しながら、開発者にハイライトの色を設定する権限を与えます。</target>
        </trans-unit>
        <trans-unit id="980bc6bb8d334793aeecaded2d1ba80e27ea7147" translate="yes">
          <source>Currently, &lt;code&gt;appHighlight&lt;/code&gt; simply sets an element color. The directive could be more dynamic. It could detect when the user mouses into or out of the element and respond by setting or clearing the highlight color.</source>
          <target state="translated">現在、 &lt;code&gt;appHighlight&lt;/code&gt; は要素の色を設定するだけです。 ディレクティブはより動的にすることができます。 ユーザーが要素に出入りしたときにそれを検出し、ハイライトの色を設定またはクリアすることで応答します。</target>
        </trans-unit>
        <trans-unit id="f8dd226d2053a8d92cfdc2d0bb11b5673cc40983" translate="yes">
          <source>Currently, the example app has three components:</source>
          <target state="translated">現在、サンプルアプリには3つのコンポーネントがあります。</target>
        </trans-unit>
        <trans-unit id="a4d2520a734e72a55fc240a11feb85a5158026de" translate="yes">
          <source>Currently, the product list displays the name and description of each product. The product list component also defines a &lt;code&gt;products&lt;/code&gt; property that contains imported data for each product from the &lt;code&gt;products&lt;/code&gt; array in &lt;code&gt;products.ts&lt;/code&gt;.</source>
          <target state="translated">現在、製品リストには各製品の名前と説明が表示されます。 製品リストコンポーネントは、 &lt;code&gt;products&lt;/code&gt; .tsの &lt;code&gt;products&lt;/code&gt; 配列から各製品のインポートデータを含む製品プロパティも定義し &lt;code&gt;products.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cb33c66e798683bba0aa43e42df78485ac28c18" translate="yes">
          <source>Currently, you have a list in the component template. To click on a hero on the list and reveal details about that hero, you need a section for the details to render in the template. Add the following to &lt;code&gt;heroes.component.html&lt;/code&gt; beneath the list section:</source>
          <target state="translated">現在、コンポーネントテンプレートにリストがあります。 リストのヒーローをクリックして、そのヒーローに関する詳細を表示するには、テンプレートでレンダリングする詳細のセクションが必要です。 リストセクションの下の &lt;code&gt;heroes.component.html&lt;/code&gt; に以下を追加します。</target>
        </trans-unit>
        <trans-unit id="98e58e551f42abbc9350cbd4eeb67b3b8e230a9e" translate="yes">
          <source>Custom &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; like directives</source>
          <target state="translated">カスタム &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のようなディレクティブ</target>
        </trans-unit>
        <trans-unit id="43ad3f3ccecb1834e96f03ea6336377a42fc2d0f" translate="yes">
          <source>Custom CSS classes that provide visual feedback to users about invalid controls.</source>
          <target state="translated">無効なコントロールに関する視覚的なフィードバックをユーザーに提供するカスタムCSSクラス。</target>
        </trans-unit>
        <trans-unit id="a27b89680d5547c404b628f384b487362b72e24f" translate="yes">
          <source>Custom Element Support</source>
          <target state="translated">カスタム要素のサポート</target>
        </trans-unit>
        <trans-unit id="6c2d7934134bd64cca0c496d6f273c06c5f9cf2d" translate="yes">
          <source>Custom Preloading Strategy</source>
          <target state="translated">カスタムのプリロード戦略</target>
        </trans-unit>
        <trans-unit id="4925e78411919d28a64fbef614750df564eeeb31" translate="yes">
          <source>Custom async validators are similar to sync validators, but they must instead return a Promise or Observable that later emits null or a validation error object. In the case of an Observable, the Observable must complete, at which point the form uses the last value emitted for validation.</source>
          <target state="translated">カスタム非同期バリデーターは同期バリデーターに似ていますが、代わりに、後でnullまたは検証エラーオブジェクトを発行するPromiseまたはObservableを返す必要があります。 Observableの場合、Observableは完了する必要があります。その時点で、フォームは検証のために発行された最後の値を使用します。</target>
        </trans-unit>
        <trans-unit id="a07d2ad69feb471ec3e608dbbb3bbdef03faf935" translate="yes">
          <source>Custom elements bootstrap themselves - they start automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks and behaves like any other HTML element, and does not require any special knowledge of Angular terms or usage conventions.</source>
          <target state="translated">カスタム要素自体がブートストラップされます-DOMに追加されると自動的に起動し、DOMから削除されると自動的に破棄されます。 カスタム要素がページのDOMに追加されると、他のHTML要素のように見え、動作し、Angularの用語や使用規則に関する特別な知識は必要ありません。</target>
        </trans-unit>
        <trans-unit id="36127018e280d4e568b6b50f5066539d9a8cb054" translate="yes">
          <source>Custom elements created with Angular extend &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; (which in turn extends &lt;code&gt;HTMLElement&lt;/code&gt;). Additionally, these custom elements will have a property for each input of the corresponding component. For example, our &lt;code&gt;popup-element&lt;/code&gt; will have a &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;&lt;/code&gt; property of type &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">Angularで作成されたカスタム要素は &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; を拡張します （ NgElementは &lt;code&gt;HTMLElement&lt;/code&gt; を拡張します ）。 さらに、これらのカスタム要素には、対応するコンポーネントの入力ごとにプロパティがあります。 たとえば、 &lt;code&gt;popup-element&lt;/code&gt; には &lt;code&gt;string&lt;/code&gt; 型の &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;&lt;/code&gt; プロパティがあります 。</target>
        </trans-unit>
        <trans-unit id="4e25196231f2ca6d3a38c2024a26e038af8d47e9" translate="yes">
          <source>Custom events with &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; を使用したカスタムイベント</target>
        </trans-unit>
        <trans-unit id="33ad348dcac39a32a6a5638a3873a439c5f5bb48" translate="yes">
          <source>Custom format options</source>
          <target state="translated">カスタム形式オプション</target>
        </trans-unit>
        <trans-unit id="a99e79089d5ca26db3d9e79c453e6fccb307304f" translate="yes">
          <source>Custom label and tooltip</source>
          <target state="translated">カスタムラベルとツールチップ</target>
        </trans-unit>
        <trans-unit id="8841c28e5e05a4f2d9a63656ff35a449a9e517b3" translate="yes">
          <source>Custom pipes</source>
          <target state="translated">カスタムパイプ</target>
        </trans-unit>
        <trans-unit id="9753d61a00b71a9de4d313849d6f03fec44dcfc6" translate="yes">
          <source>Custom request expectations</source>
          <target state="translated">カスタムリクエストの期待</target>
        </trans-unit>
        <trans-unit id="1e9a26c0379f888d5dd3bc76c8b05fdca69be77a" translate="yes">
          <source>Custom validators</source>
          <target state="translated">カスタムバリデーター</target>
        </trans-unit>
        <trans-unit id="2dbb45e0847c56bb6165a138a2a34e6ae7548974" translate="yes">
          <source>Customized injector/content</source>
          <target state="translated">カスタマイズされたインジェクター/コンテンツ</target>
        </trans-unit>
        <trans-unit id="5e7558cff59aa1d2fb0e734c8c70a3466ecc817b" translate="yes">
          <source>Customized ngModuleFactory</source>
          <target state="translated">カスタマイズされたngModuleFactory</target>
        </trans-unit>
        <trans-unit id="c52729454cd00750a4b461768779981a441da771" translate="yes">
          <source>Customizing &lt;code&gt;BUILD.bazel&lt;/code&gt; files</source>
          <target state="translated">&lt;code&gt;BUILD.bazel&lt;/code&gt; ファイルのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="9d237b6d6ebfb9c121d73b028643a81c53f9434c" translate="yes">
          <source>Customizing option selection</source>
          <target state="translated">オプション選択のカスタマイズ</target>
        </trans-unit>
        <trans-unit id="094978cd66bc5d8725b9fdce0785fb623f56940d" translate="yes">
          <source>Cut the HTML for the hero detail from the bottom of the &lt;code&gt;HeroesComponent&lt;/code&gt; template and paste it over the generated boilerplate in the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートの下部からヒーロー詳細のHTMLを切り取り、 HeroDetailComponentテンプレートで生成されたボイラープレートに貼り付けます。</target>
        </trans-unit>
        <trans-unit id="0ceecbea9d37250860e1b3086c61f32787e7e837" translate="yes">
          <source>DESCRIPTION</source>
          <target state="translated">DESCRIPTION</target>
        </trans-unit>
        <trans-unit id="f10de7b822efc6f19f529f58479795f52f902679" translate="yes">
          <source>DI is wired into the Angular framework and used everywhere to provide new components with the services or other things they need. Components consume services; that is, you can &lt;em&gt;inject&lt;/em&gt; a service into a component, giving the component access to that service class.</source>
          <target state="translated">DIはAngularフレームワークに接続され、どこでも使用され、新しいコンポーネントに必要なサービスやその他のものを提供します。 コンポーネントはサービスを消費します。 つまり、コンポーネントにサービスを&lt;em&gt;注入&lt;/em&gt;して、コンポーネントにそのサービスクラスへのアクセス権を付与できます。</target>
        </trans-unit>
        <trans-unit id="74759e7095bb98c889444c3ae3740b1870451363" translate="yes">
          <source>DI token</source>
          <target state="translated">DIトークン</target>
        </trans-unit>
        <trans-unit id="2b2f0524fe19d0b4fd5fd7ef57f39d3449c9cf53" translate="yes">
          <source>DI token for providing &lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJS&lt;/a&gt; support to Angular.</source>
          <target state="translated">Angularに&lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJS&lt;/a&gt;サポートを提供するためのDIトークン。</target>
        </trans-unit>
        <trans-unit id="8a812d80dec5127459b8bbbfdf1e22f80bb56765" translate="yes">
          <source>DOCUMENT</source>
          <target state="translated">DOCUMENT</target>
        </trans-unit>
        <trans-unit id="61c3feb8fa129e3517d7f4e33e0f321b871c65ad" translate="yes">
          <source>DOM events carry a payload of information that may be useful to the component. This section shows how to bind to the &lt;code&gt;keyup&lt;/code&gt; event of an input box to get the user's input after each keystroke.</source>
          <target state="translated">DOMイベントは、コンポーネントに役立つ情報のペイロードを運びます。 このセクションでは、入力ボックスのキー &lt;code&gt;keyup&lt;/code&gt; イベントにバインドして、各キーストローク後にユーザーの入力を取得する方法を示します。</target>
        </trans-unit>
        <trans-unit id="e5e429bcc9c2e4a41a3c7a4d96203be6cb273b11" translate="yes">
          <source>Data</source>
          <target state="translated">Data</target>
        </trans-unit>
        <trans-unit id="1e16684c1ce279006d9578074b0720bf46a86d49" translate="yes">
          <source>Data Services</source>
          <target state="translated">データサービス</target>
        </trans-unit>
        <trans-unit id="d8c7495fb4f75bec8a9dc62511d677ae31c74cad" translate="yes">
          <source>Data Value</source>
          <target state="translated">データ値</target>
        </trans-unit>
        <trans-unit id="d38cca5da9c7df446a12182ab09218cd420e4017" translate="yes">
          <source>Data binding</source>
          <target state="translated">データバインディング</target>
        </trans-unit>
        <trans-unit id="1897722a3a069b2a0505b9bdd9dd28837d6d1b7b" translate="yes">
          <source>Data binding plays an important role in communication between a template and its component, and is also important for communication between parent and child components.</source>
          <target state="translated">データバインディングは、テンプレートとそのコンポーネント間の通信で重要な役割を果たし、親コンポーネントと子コンポーネント間の通信にも重要です。</target>
        </trans-unit>
        <trans-unit id="80cba10ee7651acd77417bf01e46c8d27f5d70e7" translate="yes">
          <source>Data bound properties must also be public.</source>
          <target state="translated">データバインドプロパティもパブリックである必要があります。</target>
        </trans-unit>
        <trans-unit id="751873768a508a89953ce185eccc8e38d8483976" translate="yes">
          <source>Data flow in forms</source>
          <target state="translated">フォームのデータフロー</target>
        </trans-unit>
        <trans-unit id="4fc3d60f53202cd02a2955630e8818fd52876d30" translate="yes">
          <source>Data flow in reactive forms</source>
          <target state="translated">リアクティブ形式のデータフロー</target>
        </trans-unit>
        <trans-unit id="d39f2164fca1d60e85028e0ffd46bbe82f0bc11c" translate="yes">
          <source>Data flow in template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームのデータフロー</target>
        </trans-unit>
        <trans-unit id="2e1b89e8881cafb6b085aada57b60616b9ac3406" translate="yes">
          <source>Data for a transition from one animation state to another. See &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">あるアニメーション状態から別のアニメーション状態への遷移のデータ。 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 見る（）</target>
        </trans-unit>
        <trans-unit id="9393a235ba23b990b99ee169026ad57440db380f" translate="yes">
          <source>Data gathered in this way can be viewed on the Google Analytics site, but is not automatically visible on your own organization's Analytics site. As an administrator for an Angular development group, you can configure your instance of Angular CLI to be able to see analytics data for your own team's usage of the Angular CLI. This configuration option is separate from and in addition to other usage analytics that your users may be sharing with Google.</source>
          <target state="translated">この方法で収集されたデータは、Google Analyticsサイトで表示できますが、組織のAnalyticsサイトでは自動的に表示されません。 Angular開発グループの管理者として、Angular CLIのインスタンスを構成して、Angular CLIのチームの使用状況に関する分析データを表示できるようにすることができます。 この構成オプションは、ユーザーがGoogleと共有している可能性がある他の使用状況分析とは別であり、それに加えています。</target>
        </trans-unit>
        <trans-unit id="e9ccce7c84ff910c0458db8a1eb20d2bf55321dc" translate="yes">
          <source>Data groups follow this Typescript interface:</source>
          <target state="translated">データグループは、このTypescriptインターフェイスに従います。</target>
        </trans-unit>
        <trans-unit id="7c825ea984ebfeb20bfb18c3c089c4b5d7fc910e" translate="yes">
          <source>Data model</source>
          <target state="translated">データ・モデル</target>
        </trans-unit>
        <trans-unit id="e55db42edf09b3bc94ad8e03463d13a646465d6a" translate="yes">
          <source>Data returned from servers often takes the form of a stream. Streams are useful because they make it easy to transform the data that is returned, and to make modifications to the way data is requested. The Angular HTTP client (&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;) is a built-in way to fetch data from external APIs and provide them to your application as a stream.</source>
          <target state="translated">サーバーから返されるデータは、多くの場合、ストリームの形式を取ります。 ストリームは、返されるデータを簡単に変換したり、データが要求される方法を変更したりするので便利です。 Angular HTTPクライアント（ &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; ）は、外部APIからデータを取得し、ストリームとしてアプリケーションに提供する組み込みの方法です。</target>
        </trans-unit>
        <trans-unit id="ac351ed3feb203e6748574b5a4117ca069a6c697" translate="yes">
          <source>Data services that make HTTP calls to remote servers typically inject and delegate to the Angular &lt;a href=&quot;http&quot;&gt;&lt;code&gt;HttpClient&lt;/code&gt;&lt;/a&gt; service for XHR calls.</source>
          <target state="translated">通常、リモートサーバーへのHTTP呼び出しを行うデータサービスは、XHR呼び出しのためにAngular &lt;a href=&quot;http&quot;&gt; &lt;code&gt;HttpClient&lt;/code&gt; &lt;/a&gt;サービスに注入および委任します。</target>
        </trans-unit>
        <trans-unit id="e09683543199a512ce5b35c096ebcad1cf9eede7" translate="yes">
          <source>Data services, such as &lt;code&gt;PackageSearchService&lt;/code&gt;, are unaware that some of their &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; requests actually return cached responses.</source>
          <target state="translated">&lt;code&gt;PackageSearchService&lt;/code&gt; などのデータサービスは、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 要求の一部が実際にキャッシュされた応答を返すことを認識していません。</target>
        </trans-unit>
        <trans-unit id="b830720955a4965a704188d3b5459c245e7001e7" translate="yes">
          <source>Data-binding and HTML</source>
          <target state="translated">データバインディングとHTML</target>
        </trans-unit>
        <trans-unit id="4beeca7e037b29ba76543e1366bfac09d0df5875" translate="yes">
          <source>Data-binding is a mechanism for coordinating what users see, specifically with application data values. While you could push values to and pull values from HTML, the application is easier to write, read, and maintain if you turn these tasks over to a binding framework. You simply declare bindings between binding sources, target HTML elements, and let the framework do the rest.</source>
          <target state="translated">データバインディングは、ユーザーが見るもの、特にアプリケーションデータの値を調整するためのメカニズムです。 HTMLに値をプッシュしたり、HTMLから値をプルしたりできますが、これらのタスクをバインディングフレームワークに引き継ぐと、アプリケーションの作成、読み取り、および保守が容易になります。 バインディングソース間のバインディングを宣言し、HTML要素をターゲットにし、残りはフレームワークに任せるだけです。</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="433a96bef0650364ce46802839a116fc7b8931f3" translate="yes">
          <source>DatePipe</source>
          <target state="translated">DatePipe</target>
        </trans-unit>
        <trans-unit id="f5dbae0bbee5f646b166a48092a587cbe25ba8d8" translate="yes">
          <source>Day of month</source>
          <target state="translated">月の日</target>
        </trans-unit>
        <trans-unit id="1a99c8bddb4b164e11b358bfc48c1fb30dc65858" translate="yes">
          <source>Dead code elimination: removes unreferenced modules and much unused code.</source>
          <target state="translated">デッドコードの除去：参照されていないモジュールと多くの未使用コードを削除します。</target>
        </trans-unit>
        <trans-unit id="5cc8e10702fbb1809836dbd83c85b35804f3cf01" translate="yes">
          <source>Debounce (so as not to send off API requests for every keystroke, but instead wait for a break in keystrokes).</source>
          <target state="translated">デバウンス（キーストロークごとにAPIリクエストを送信せず、代わりにキーストロークの中断を待つように）。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
