<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="09bc2f90624b9bf3ca83b868a4cb571e445219e2" translate="yes">
          <source>Also in &lt;code&gt;index.html&lt;/code&gt;, change the scripts to use &lt;code&gt;/node_modules&lt;/code&gt; with a slash instead of &lt;code&gt;node_modules&lt;/code&gt; without the slash.</source>
          <target state="translated">また、 &lt;code&gt;index.html&lt;/code&gt; で、スラッシュなしの &lt;code&gt;node_modules&lt;/code&gt; ではなく、スラッシュ付きの &lt;code&gt;/node_modules&lt;/code&gt; を使用するようにスクリプトを変更します。</target>
        </trans-unit>
        <trans-unit id="c34ca58802e9ae1bf05a9e1e9808cfff54b066f4" translate="yes">
          <source>Also included in the &lt;code&gt;@angular/service-worker&lt;/code&gt; NPM package is a small script &lt;code&gt;safety-worker.js&lt;/code&gt;, which when loaded will unregister itself from the browser. This script can be used as a last resort to get rid of unwanted service workers already installed on client pages.</source>
          <target state="translated">また、 &lt;code&gt;@angular/service-worker&lt;/code&gt; NPMパッケージには、小さなスクリプト &lt;code&gt;safety-worker.js&lt;/code&gt; 含まれています。これは、ロードされると、ブラウザーから登録解除されます。 このスクリプトは、クライアントページに既にインストールされている不要なサービスワーカーを取り除く最後の手段として使用できます。</target>
        </trans-unit>
        <trans-unit id="3e77b90384ba1376f2a7fc2a2fdb84d02d1ce375" translate="yes">
          <source>Also remove any &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; you find, together with the associated AngularJS factory or directive declarations. Since you no longer have downgraded components, you no longer list them in &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">また、見つかった &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; を、関連するAngularJSファクトリーまたはディレクティブの宣言とともに削除します。 ダウングレードされたコンポーネントがなくなったため、それらを &lt;code&gt;entryComponents&lt;/code&gt; にリストしなくなりました。</target>
        </trans-unit>
        <trans-unit id="3eed6879744930f3ade3d793b4f2c2ad9e696f16" translate="yes">
          <source>Also runs detectChanges once so that any existing change is detected.</source>
          <target state="translated">また、既存の変更が検出されるように、detectChangesを1回実行します。</target>
        </trans-unit>
        <trans-unit id="80c4a57c8598fa805c421acf31759c6f916a295a" translate="yes">
          <source>Also, there are a couple of Protractor API calls in the PhoneCat test code that are using the AngularJS &lt;code&gt;$location&lt;/code&gt; service under the hood. As that service is no longer present after the upgrade, replace those calls with ones that use WebDriver's generic URL APIs instead. The first of these is the redirection spec:</source>
          <target state="translated">また、内部でAngularJS &lt;code&gt;$location&lt;/code&gt; サービスを使用しているPhoneCatテストコードには、いくつかのProtractor API呼び出しがあります。 アップグレード後にそのサービスは存在しなくなるため、これらの呼び出しをWebDriverの汎用URL APIを代わりに使用する呼び出しに置き換えます。 これらの最初のものはリダイレクト仕様です：</target>
        </trans-unit>
        <trans-unit id="e9ec4ab463e95d961d6a661f97b761b3ce157450" translate="yes">
          <source>Alter the name of a crisis. Notice that the corresponding name in the crisis list does &lt;em&gt;not&lt;/em&gt; change.</source>
          <target state="translated">危機の名前を変える。 危機リストの対応する名前は変わら&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ef2efebfb6fde29b1d7a5cd7f44ec2ef3ac1afb6" translate="yes">
          <source>Alter the name. Click the &quot;Back&quot; button and the app returns to the heroes list which displays the changed hero name. Notice that the name change took effect immediately.</source>
          <target state="translated">名前を変更します。 [戻る]ボタンをクリックすると、アプリはヒーローリストに戻り、変更されたヒーロー名が表示されます。 名前の変更がすぐに有効になったことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5c537167fc57c766db36bca741f44f76ff80afb8" translate="yes">
          <source>Alternate build configurations</source>
          <target state="translated">代替ビルド構成</target>
        </trans-unit>
        <trans-unit id="538b10e3e67e9b4ea5cac16016344363816eb454" translate="yes">
          <source>Alternative class providers</source>
          <target state="translated">代替クラスプロバイダー</target>
        </trans-unit>
        <trans-unit id="317529f453f868f828b3061a5492c704c5ebd726" translate="yes">
          <source>Alternative syntax</source>
          <target state="translated">代替構文</target>
        </trans-unit>
        <trans-unit id="7fffe38e0d7a10037e8a311175b76b5eba5d4a82" translate="yes">
          <source>Alternatively you can pass an HTTP method as the first parameter, a URL string as the second, and an options hash containing the request body as the third. See &lt;code&gt;addBody()&lt;/code&gt;. In this case, the specified &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;observe&lt;/code&gt; options determine the type of returned observable.</source>
          <target state="translated">または、HTTPメソッドを最初のパラメーターとして、URL文字列を2番目として、リクエストボディを含むオプションハッシュを3番目として渡すことができます。 &lt;code&gt;addBody()&lt;/code&gt; 参照してください。 この場合、指定された &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;observe&lt;/code&gt; オプションにより、返されるObservableのタイプが決まります。</target>
        </trans-unit>
        <trans-unit id="04a6b5805d15fcdd219083f0cbf17fc9bb490bc5" translate="yes">
          <source>Alternatively, the &lt;code&gt;subscribe()&lt;/code&gt; method can accept callback function definitions in line, for &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;complete&lt;/code&gt; handlers. For example, the following &lt;code&gt;subscribe()&lt;/code&gt; call is the same as the one that specifies the predefined observer:</source>
          <target state="translated">あるいは、 &lt;code&gt;subscribe()&lt;/code&gt; メソッドは、 &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 、および &lt;code&gt;complete&lt;/code&gt; ハンドラーのコールバック関数定義をインラインで受け入れることができます。 たとえば、次の &lt;code&gt;subscribe()&lt;/code&gt; 呼び出しは、事前定義されたオブザーバーを指定する呼び出しと同じです。</target>
        </trans-unit>
        <trans-unit id="e64d9fb1e1f706bc80662aea5f2fb80fb60883b5" translate="yes">
          <source>Alternatively, use the &lt;code&gt;on-&lt;/code&gt; prefix, known as the canonical form:</source>
          <target state="translated">または、標準形式と呼ばれる &lt;code&gt;on-&lt;/code&gt; プレフィックスを使用します。</target>
        </trans-unit>
        <trans-unit id="7ed2dd30905d320449fc9e53a46cc64ce34b13be" translate="yes">
          <source>Alternatively, you can add a new file, &lt;code&gt;.browserslistrc&lt;/code&gt;, to the project directory, that specifies browsers you want to support:</source>
          <target state="translated">あるいは、サポートするブラウザを指定する新しいファイル &lt;code&gt;.browserslistrc&lt;/code&gt; をプロジェクトディレクトリに追加できます。</target>
        </trans-unit>
        <trans-unit id="d3a282109fd2c8a8f7ad5940bdac4b9f189f1e55" translate="yes">
          <source>Alternatively, you can call &lt;code&gt;request.error()&lt;/code&gt; with an &lt;code&gt;ErrorEvent&lt;/code&gt;.</source>
          <target state="translated">または、 &lt;code&gt;ErrorEvent&lt;/code&gt; を使用して &lt;code&gt;request.error()&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="98bf87f428bccd5b0338c78eadf52aaa7a6089b5" translate="yes">
          <source>Alternatively, you can choose to surface a separate warning for each instance of this pattern with a config value of &lt;code&gt;&quot;always&quot;&lt;/code&gt;. This may help to track down where in the code the pattern is being used as the code is being updated.</source>
          <target state="translated">または、このパターンのインスタンスごとに、構成値が &lt;code&gt;&quot;always&quot;&lt;/code&gt; 個別の警告を表示することもできます。 これは、コードの更新中にパターンのどこでコードが使用されているかを追跡するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5d6c050b861181c863e8cb7973a125de6756b8a9" translate="yes">
          <source>Alternatively, you can fix it by exporting &lt;code&gt;foo&lt;/code&gt; with the expectation that &lt;code&gt;foo&lt;/code&gt; will be assigned at runtime when you actually know its value.</source>
          <target state="translated">または、実際に値がわかっているときに実行時に &lt;code&gt;foo&lt;/code&gt; が割り当てられることを期待して、 &lt;code&gt;foo&lt;/code&gt; をエクスポートすることで修正できます。</target>
        </trans-unit>
        <trans-unit id="19c181f0dfa7e4b222a989a1cf6835c473ecb0d0" translate="yes">
          <source>Alternatively, you can pass a plain function, which is expected to return a promise resolving to an &lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt; (i.e. an instance of your Angular module). The function is called with an array of extra &lt;a href=&quot;../api/core/staticprovider&quot;&gt;Providers&lt;/a&gt; that are expected to be available on the returned &lt;code&gt;&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;&lt;/code&gt;'s &lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;. For example, if you are using &lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt; or &lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;, you can pass the &lt;code&gt;extraProviders&lt;/code&gt; array to them:</source>
          <target state="translated">または、プレーン関数を渡すことができます。これは、 &lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt; （つまり、Angularモジュールのインスタンス）に解決されるプロミスを返すことが期待されています。 この関数は、返された &lt;code&gt;&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;&lt;/code&gt; の&lt;a href=&quot;../api/core/injector&quot;&gt;インジェクター&lt;/a&gt;で利用できると予想される追加の&lt;a href=&quot;../api/core/staticprovider&quot;&gt;プロバイダーの&lt;/a&gt;配列で呼び出されます。 たとえば、 &lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;または&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;を使用している場合、 &lt;code&gt;extraProviders&lt;/code&gt; 配列をそれらに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="46f8c220ab71228f6530683c11b7ac9ef6c94316" translate="yes">
          <source>Alternatively, you can specify a custom id in the &lt;code&gt;i18n&lt;/code&gt; attribute by using the prefix &lt;code&gt;@@&lt;/code&gt;. The example below defines the custom id &lt;code&gt;introductionHeader&lt;/code&gt;:</source>
          <target state="translated">または、接頭辞 &lt;code&gt;@@&lt;/code&gt; を使用して &lt;code&gt;i18n&lt;/code&gt; 属性にカスタムIDを指定できます。 以下の例では、カスタムID IntroductionHeaderを定義しています。</target>
        </trans-unit>
        <trans-unit id="cb7c49667809bfe94e1dbbd87a5ce803ffe6ceb8" translate="yes">
          <source>Alternatively, you can use the &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn client&lt;/a&gt; for downloading and installing npm packages.</source>
          <target state="translated">あるいは、npmパッケージのダウンロードとインストールに&lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarnクライアント&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="e9fbf3395b93f5da053cf8f1ade99d229665c121" translate="yes">
          <source>Alternatively, you can use the HTML &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">または、HTML &amp;lt;a&amp;gt;タグを使用できます。</target>
        </trans-unit>
        <trans-unit id="5ad999c866c8bd0df67936adc07a5029b68e2cc3" translate="yes">
          <source>Alternatively, you could accumulate the individual keys themselves by substituting &lt;code&gt;event.key&lt;/code&gt; for &lt;code&gt;event.target.value&lt;/code&gt; in which case the same user input would produce:</source>
          <target state="translated">または、 &lt;code&gt;event.key&lt;/code&gt; を &lt;code&gt;event.target.value&lt;/code&gt; に置き換えることにより、個々のキー自体を蓄積することもできます。この場合、同じユーザー入力が生成されます。</target>
        </trans-unit>
        <trans-unit id="4dc002b021fdf91ff604ee57f3cc129ef280a957" translate="yes">
          <source>Alternatively, you could make a component-specific &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard for the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method provides you with the current instance of the &lt;code&gt;component&lt;/code&gt;, the current &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; in case you needed to access some external information. This would be useful if you only wanted to use this guard for this component and needed to get the component's properties or confirm whether the router should allow navigation away from it.</source>
          <target state="translated">または、 &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; に対してコンポーネント固有のCanDeactivateガードを作成できます。 &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; メソッドは、外部情報にアクセスする必要がある場合に備えて、 &lt;code&gt;component&lt;/code&gt; 現在のインスタンス、現在の &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; を提供します。 これは、このコンポーネントに対してのみこのガードを使用し、コンポーネントのプロパティを取得したり、ルーターがナビゲーションを許可するかどうかを確認したりする必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="2246c16c08b61d99b022d0d6c7301776becfb045" translate="yes">
          <source>Although &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; is a valid Angular directive, it isn't available by default.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; は有効なAngularディレクティブですが、デフォルトでは使用できません。</target>
        </trans-unit>
        <trans-unit id="99c7fb8e8fe2caa5683ecf66a4f0b8dc02a8734c" translate="yes">
          <source>Although &lt;code&gt;HeroService&lt;/code&gt; has no access to &lt;code&gt;UserService&lt;/code&gt;, the factory function does. You inject both &lt;code&gt;Logger&lt;/code&gt; and &lt;code&gt;UserService&lt;/code&gt; into the factory provider and let the injector pass them along to the factory function.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; には &lt;code&gt;UserService&lt;/code&gt; へのアクセス権はありませんが、ファクトリ関数にはアクセス権があります。 &lt;code&gt;Logger&lt;/code&gt; と &lt;code&gt;UserService&lt;/code&gt; の両方をファクトリプロバイダーに注入し、インジェクターがファクトリ関数にそれらを渡すようにします。</target>
        </trans-unit>
        <trans-unit id="a71de44f8d521e498fa4c517279e05613ba8baef" translate="yes">
          <source>Although developers strive to avoid it, many visual effects and third-party tools, such as jQuery, require DOM access. As a result, you might need to access a component's DOM element.</source>
          <target state="translated">開発者は回避するよう努めていますが、多くの視覚効果やjQueryなどのサードパーティツールにはDOMアクセスが必要です。 その結果、コンポーネントのDOM要素にアクセスする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="c63a4c9db8fae775d2c9b2460c0753c92e1ed4e5" translate="yes">
          <source>Although in this example you're modelling a job application for heroes, there are no references to any specific hero question outside the objects returned by &lt;code&gt;QuestionService&lt;/code&gt;.</source>
          <target state="translated">この例では、ヒーローの求人をモデル化していますが、 &lt;code&gt;QuestionService&lt;/code&gt; によって返されるオブジェクトの外側には、特定のヒーローの質問への参照はありません。</target>
        </trans-unit>
        <trans-unit id="eda7b93e32221f3afb3cbb94c32a8763a782190c" translate="yes">
          <source>Although interceptors are capable of mutating requests and responses, the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; instance properties are &lt;code&gt;readonly&lt;/code&gt;, rendering them largely immutable.</source>
          <target state="translated">インターセプターは要求と応答を変更できますが、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; インスタンスのプロパティは &lt;code&gt;readonly&lt;/code&gt; 、ほとんど変更できません。</target>
        </trans-unit>
        <trans-unit id="140a2bef2ba1a6526c1ddea73a80aa5c89e23cae" translate="yes">
          <source>Although invisible, the component&amp;mdash;and all of its descendant components&amp;mdash;tie up resources. The performance and memory burden can be substantial, responsiveness can degrade, and the user sees nothing.</source>
          <target state="translated">見えませんが、コンポーネントとそのすべての子孫コンポーネントはリソースを結び付けます。 パフォーマンスとメモリの負荷が大きくなり、応答性が低下する可能性があり、ユーザーには何も見えません。</target>
        </trans-unit>
        <trans-unit id="8a59cd2708af00e8af91086a976046b0bcef21a1" translate="yes">
          <source>Although it doesn't actually log in, it has what you need for this discussion. It has an &lt;code&gt;isLoggedIn&lt;/code&gt; flag to tell you whether the user is authenticated. Its &lt;code&gt;login&lt;/code&gt; method simulates an API call to an external service by returning an observable that resolves successfully after a short pause. The &lt;code&gt;redirectUrl&lt;/code&gt; property will store the attempted URL so you can navigate to it after authenticating.</source>
          <target state="translated">実際にはログインしませんが、このディスカッションに必要なものが含まれています。 ユーザーが認証されているかどうかを示す &lt;code&gt;isLoggedIn&lt;/code&gt; フラグがあります。 その &lt;code&gt;login&lt;/code&gt; メソッドは、短い一時停止後に正常に解決されるオブザーバブルを返すことにより、外部サービスへのAPI呼び出しをシミュレートします。 &lt;code&gt;redirectUrl&lt;/code&gt; プロパティは試行されたURLを保存するため、認証後に移動できます。</target>
        </trans-unit>
        <trans-unit id="b709afe389b87b25545ae196d4d825808c5ef733" translate="yes">
          <source>Although it's harmless to add components to this list, it's best to add only the components that are truly &lt;em&gt;entry components&lt;/em&gt;. Don't include components that &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;are referenced&lt;/a&gt; in the templates of other components.</source>
          <target state="translated">このリストにコンポーネントを追加することは無害ですが、真に&lt;em&gt;エントリコンポーネントで&lt;/em&gt;あるコンポーネントのみを追加するのが最善&lt;em&gt;です&lt;/em&gt; 。 他のコンポーネントのテンプレートで&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;参照&lt;/a&gt;されるコンポーネントを含めないでください。</target>
        </trans-unit>
        <trans-unit id="e6f1c72ed2810faf50b8f3333c1f8b5b5403cdef" translate="yes">
          <source>Although it's possible to write complex template expressions, it's a better practice to avoid them.</source>
          <target state="translated">複雑なテンプレート式を記述することは可能ですが、それらを避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b526ddc47425d94439f76e0b41ef7dc4ee102f58" translate="yes">
          <source>Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes. The Router is such a system and provides support for the matrix notation across browsers.</source>
          <target state="translated">マトリックス表記は決してHTML標準にはなりませんでしたが、合法であり、親および子ルートに属するパラメーターを分離する方法として、ブラウザールーティングシステムの間で一般的になりました。 ルーターはそのようなシステムであり、ブラウザー間でマトリックス表記のサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="8d8e9edc4365018503a0aa8ba523d7e123f26f73" translate="yes">
          <source>Although not discussed here, there's an example of &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;getHeroNo404()&lt;/code&gt; method included in the sample source code.</source>
          <target state="translated">ここでは説明しませんが、サンプルソースコードに含まれる &lt;code&gt;getHeroNo404()&lt;/code&gt; メソッドには &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; 例があります。</target>
        </trans-unit>
        <trans-unit id="1791d4dc1123e82f2994b8a2caf82568ea2a7c6d" translate="yes">
          <source>Although the &lt;code&gt;AppConfig&lt;/code&gt; interface plays no role in dependency injection, it supports typing of the configuration object within the class.</source>
          <target state="translated">&lt;code&gt;AppConfig&lt;/code&gt; インターフェースは、依存性注入では何の役割も果たしませんが、クラス内の構成オブジェクトの入力をサポートします。</target>
        </trans-unit>
        <trans-unit id="db12662de437927b080487074c85c43b5bbd2b73" translate="yes">
          <source>Although the &lt;code&gt;compose&lt;/code&gt; route is pinned to the &quot;popup&quot; outlet, that's not sufficient for wiring the route to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. You have to specify the named outlet in a &lt;em&gt;link parameters array&lt;/em&gt; and bind it to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with a property binding.</source>
          <target state="translated">&lt;code&gt;compose&lt;/code&gt; ルートは「ポップアップ」アウトレットに固定されていますが、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブにルートを配線するには不十分です。 &lt;em&gt;リンクパラメーター配列&lt;/em&gt;で名前付きアウトレットを指定し、プロパティバインドを使用して &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; にバインドする必要があります。</target>
        </trans-unit>
        <trans-unit id="1d7c4334ace67bdbb9ee7db7773185ffcfb0f003" translate="yes">
          <source>Although the admin dashboard &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; only contains a relative slash without an additional URL segment, it is considered a match to any route within the admin feature area. You only want the &lt;code&gt;Dashboard&lt;/code&gt; link to be active when the user visits that route. Adding an additional binding to the &lt;code&gt;Dashboard&lt;/code&gt; routerLink,&lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]=&quot;{ exact: true }&quot;&lt;/code&gt;, marks the &lt;code&gt;./&lt;/code&gt; link as active when the user navigates to the &lt;code&gt;/admin&lt;/code&gt; URL and not when navigating to any of the child routes.</source>
          <target state="translated">管理ダッシュボードの &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; には、追加のURLセグメントのない相対的なスラッシュのみが含まれていますが、管理機能領域内のすべてのルートへの一致と見なされます。 ユーザーがそのルートにアクセスしたときにのみ、 &lt;code&gt;Dashboard&lt;/code&gt; リンクをアクティブにする必要があります。 &lt;code&gt;Dashboard&lt;/code&gt; routerLink &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]=&quot;{ exact: true }&quot;&lt;/code&gt; に追加のバインディングを追加すると、ユーザーが &lt;code&gt;/admin&lt;/code&gt; URLにナビゲートするときに子ルートにナビゲートするときではなく、。 &lt;code&gt;./&lt;/code&gt; リンクがアクティブとしてマークされます。</target>
        </trans-unit>
        <trans-unit id="b4df6da97c99904265a96515d7f37a5422025257" translate="yes">
          <source>Although the component delegates hero deletion to the &lt;code&gt;HeroService&lt;/code&gt;, it remains responsible for updating its own list of heroes. The component's &lt;code&gt;delete()&lt;/code&gt; method immediately removes the &lt;em&gt;hero-to-delete&lt;/em&gt; from that list, anticipating that the &lt;code&gt;HeroService&lt;/code&gt; will succeed on the server.</source>
          <target state="translated">このコンポーネントはヒーローの削除を &lt;code&gt;HeroService&lt;/code&gt; に委任しますが、ヒーローの独自のリストを更新する責任は残ります。 コンポーネントの &lt;code&gt;delete()&lt;/code&gt; メソッドは、削除する&lt;em&gt;ヒーロー&lt;/em&gt;をそのリストからすぐに削除し、 &lt;code&gt;HeroService&lt;/code&gt; がサーバー上で成功することを予測します。</target>
        </trans-unit>
        <trans-unit id="bea5a0e7aa0c7807f055d55ca7e78a9c93ccea40" translate="yes">
          <source>Although the tests in this guide all run in the browser, some apps might run on a different platform at least some of the time.</source>
          <target state="translated">このガイドのテストはすべてブラウザーで実行されますが、一部のアプリは少なくとも時々は異なるプラットフォームで実行される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f1308d7fdf10956a614e10b524f57beab992dc1b" translate="yes">
          <source>Although this example uses variable assignment to initialize the components, you could instead declare and initialize the properties using a constructor:</source>
          <target state="translated">この例では、変数の割り当てを使用してコンポーネントを初期化しますが、代わりにコンストラクターを使用してプロパティを宣言および初期化できます。</target>
        </trans-unit>
        <trans-unit id="a895ffd8578e7962e8e90dd15f55eb1a1de64833" translate="yes">
          <source>Although this testing guide follows the traditional style and the default &lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;CLI schematics&lt;/a&gt; generate test files with &lt;code&gt;beforeEach()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, feel free to adopt &lt;em&gt;this alternative approach&lt;/em&gt; in your own projects.</source>
          <target state="translated">このテストガイドは従来のスタイルに従い、デフォルトの&lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;CLI回路図&lt;/a&gt;は &lt;code&gt;beforeEach()&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を使用してテストファイルを生成します&lt;em&gt;が&lt;/em&gt; 、 &lt;em&gt;この代替アプローチ&lt;/em&gt;を独自のプロジェクトに自由に採用してください。</target>
        </trans-unit>
        <trans-unit id="7bc7decf04e5716adb169e2e1f89f0d3c435dadc" translate="yes">
          <source>Although you can bootstrap an AngularJS app in code, many applications bootstrap declaratively with the &lt;code&gt;ng-app&lt;/code&gt; directive, giving it the name of the application's module (&lt;code&gt;movieHunter&lt;/code&gt;).</source>
          <target state="translated">コードでAngularJSアプリをブートストラップできますが、多くのアプリケーションは &lt;code&gt;ng-app&lt;/code&gt; ディレクティブを使用して宣言的にブートストラップし、アプリケーションのモジュール（ &lt;code&gt;movieHunter&lt;/code&gt; ）の名前を付けます。</target>
        </trans-unit>
        <trans-unit id="e02c0ab9f3b340b1e4977e3101e04e64e8d94dda" translate="yes">
          <source>Although you're not getting the behavior you want, Angular isn't broken. It's just using a different change-detection algorithm that ignores changes to the list or any of its items.</source>
          <target state="translated">望みの動作が得られていませんが、Angularは壊れていません。 リストまたはそのアイテムの変更を無視する異なる変更検出アルゴリズムを使用しているだけです。</target>
        </trans-unit>
        <trans-unit id="655bcd6a216624937d6672a34cb20e4a684201c0" translate="yes">
          <source>Always &lt;code&gt;export&lt;/code&gt; the component class so you can &lt;code&gt;import&lt;/code&gt; it elsewhere ... like in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; のように、他の場所に &lt;code&gt;import&lt;/code&gt; できるように、常にコンポーネントクラスを &lt;code&gt;export&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="c021e093164e1f74b3f35d8e47a96ac3223c76a9" translate="yes">
          <source>Always get the service from an injector</source>
          <target state="translated">常にインジェクターからサービスを取得します</target>
        </trans-unit>
        <trans-unit id="7c060c43d1d915450d5cd5013ceedc7d9a2b52c6" translate="yes">
          <source>Amend the &lt;code&gt;@angular/core&lt;/code&gt; import statement to include the &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; symbol.</source>
          <target state="translated">&lt;code&gt;@angular/core&lt;/code&gt; importステートメントを修正して、 &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; シンボルを含めます。</target>
        </trans-unit>
        <trans-unit id="a63ef4162e15e9f9a4264c4f633e746ec995f377" translate="yes">
          <source>An &lt;a href=&quot;../../guide/observables&quot;&gt;Observable&lt;/a&gt; factory function: A function that returns an &lt;code&gt;Observable&lt;/code&gt;. The function will be used at runtime to obtain and subscribe to the &lt;code&gt;Observable&lt;/code&gt; and the ServiceWorker will be registered as soon as the first value is emitted.</source>
          <target state="translated">&lt;a href=&quot;../../guide/observables&quot;&gt;Observable&lt;/a&gt;ファクトリー関数： Observableを返す関数。 この関数は、実行時に &lt;code&gt;Observable&lt;/code&gt; を取得してサブスクライブするために使用され、ServiceWorkerは最初の値が発行されるとすぐに登録されます。</target>
        </trans-unit>
        <trans-unit id="7890dafd42800e1e635e68de3df438822747d36f" translate="yes">
          <source>An &lt;a href=&quot;../api/router/activationstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins activating a route.</source>
          <target state="translated">ルーターがルートのアクティブ化を開始したときにトリガーされる&lt;a href=&quot;../api/router/activationstart&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="c39d1e22c53c2af9b2d4c377c45f82b0b1e2bcef" translate="yes">
          <source>An &lt;a href=&quot;../api/router/activationstart&quot;&gt;event&lt;/a&gt; triggered when the Router finishes activating a route.</source>
          <target state="translated">ルーターがルートのアクティブ化を完了したときにトリガーされる&lt;a href=&quot;../api/router/activationstart&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c21e55545fc6566ca7c2bfeac477e90a12a69d4" translate="yes">
          <source>An &lt;a href=&quot;../api/router/childactivationend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes activating a route's children.</source>
          <target state="translated">ルーターがルートの子のアクティブ化を完了したときにトリガーされる&lt;a href=&quot;../api/router/childactivationend&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3327c4a4dd53191f4e45bd3a9702873e5e1df07" translate="yes">
          <source>An &lt;a href=&quot;../api/router/childactivationstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins activating a route's children.</source>
          <target state="translated">ルーターがルートの子のアクティブ化を開始したときにトリガーされる&lt;a href=&quot;../api/router/childactivationstart&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="72902f835d2457adbf3f424d7ed6aa5fbedee83b" translate="yes">
          <source>An &lt;a href=&quot;../api/router/guardscheckend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes the Guards phase of routing successfully.</source>
          <target state="translated">ルーターがルーティングのGuardフェーズを正常に完了したときにトリガーされる&lt;a href=&quot;../api/router/guardscheckend&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c9902eb347e259e539ce1420cfbf9fcb004d4a7" translate="yes">
          <source>An &lt;a href=&quot;../api/router/guardscheckstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins the Guards phase of routing.</source>
          <target state="translated">ルーターがルーティングのGuardフェーズを開始するときにトリガーされる&lt;a href=&quot;../api/router/guardscheckstart&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="69e584daf4625901168aeeeb9d5204b8f03542cf" translate="yes">
          <source>An &lt;a href=&quot;../api/router/navigationcancel&quot;&gt;event&lt;/a&gt; triggered when navigation is canceled. This can happen when a &lt;a href=&quot;router#guards&quot;&gt;Route Guard&lt;/a&gt; returns false during navigation, or redirects by returning a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ナビゲーションがキャンセルされたときにトリガーされる&lt;a href=&quot;../api/router/navigationcancel&quot;&gt;イベント&lt;/a&gt; 。 これは、ナビゲーション中に&lt;a href=&quot;router#guards&quot;&gt;ルートガード&lt;/a&gt;がfalseを返した場合、または &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返すことでリダイレクトした場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="71250dfa39f645ca9272ff2924abdbb047e81e1c" translate="yes">
          <source>An &lt;a href=&quot;../api/router/navigationend&quot;&gt;event&lt;/a&gt; triggered when navigation ends successfully.</source>
          <target state="translated">ナビゲーションが正常に終了したときにトリガーされる&lt;a href=&quot;../api/router/navigationend&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="5449cdb5f08ea0b83a8503bf2aa7e372f857eeb8" translate="yes">
          <source>An &lt;a href=&quot;../api/router/navigationerror&quot;&gt;event&lt;/a&gt; triggered when navigation fails due to an unexpected error.</source>
          <target state="translated">予期しないエラーが原因でナビゲーションが失敗したときにトリガーされる&lt;a href=&quot;../api/router/navigationerror&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2ae571a3340d4a75539962ff60108d48d5c9537" translate="yes">
          <source>An &lt;a href=&quot;../api/router/navigationstart&quot;&gt;event&lt;/a&gt; triggered when navigation starts.</source>
          <target state="translated">ナビゲーションの開始時にトリガーされる&lt;a href=&quot;../api/router/navigationstart&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="426962608c573ea20e84f4af471ba7aecd0d4a37" translate="yes">
          <source>An &lt;a href=&quot;../api/router/resolveend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes the Resolve phase of routing successfuly.</source>
          <target state="translated">ルーターがルーティングの解決フェーズを正常に完了したときにトリガーされる&lt;a href=&quot;../api/router/resolveend&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd22e501f75afe5ba52de290c4ca9f9d39a2d35d" translate="yes">
          <source>An &lt;a href=&quot;../api/router/resolvestart&quot;&gt;event&lt;/a&gt; triggered when the Router begins the Resolve phase of routing.</source>
          <target state="translated">ルーターがルーティングの解決フェーズを開始したときにトリガーされる&lt;a href=&quot;../api/router/resolvestart&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea85ce4a6e9ac1b58d76f15ffef657cbbddf2c3f" translate="yes">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadend&quot;&gt;event&lt;/a&gt; triggered after a route has been lazy loaded.</source>
          <target state="translated">ルートが遅延ロードされた後にトリガーされる&lt;a href=&quot;../api/router/routeconfigloadend&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c0e692d2c146b893b035f9f9829067876ae851d" translate="yes">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;event&lt;/a&gt; triggered before the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;router#asynchronous-routing&quot;&gt;lazy loads&lt;/a&gt; a route configuration.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; がルート構成を&lt;a href=&quot;router#asynchronous-routing&quot;&gt;遅延ロード&lt;/a&gt;する前にトリガーされる&lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="899c0961591582cac03b97b9fe13c8147d2c81ea" translate="yes">
          <source>An &lt;a href=&quot;../api/router/routesrecognized&quot;&gt;event&lt;/a&gt; triggered when the Router parses the URL and the routes are recognized.</source>
          <target state="translated">ルーターがURLを解析し、ルートが認識されたときにトリガーされる&lt;a href=&quot;../api/router/routesrecognized&quot;&gt;イベント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="69ea6deb0af3e15d693596cfbf4f88b319c82d8b" translate="yes">
          <source>An &lt;a href=&quot;../api/router/scroll&quot;&gt;event&lt;/a&gt; that represents a scrolling event.</source>
          <target state="translated">スクロール&lt;a href=&quot;../api/router/scroll&quot;&gt;イベント&lt;/a&gt;を表すイベント。</target>
        </trans-unit>
        <trans-unit id="c1d7ddd4c6221de6325bfd2f11d8ba52144db874" translate="yes">
          <source>An &lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directive&lt;/a&gt; changes the appearance or behavior of an element, component, or another directive. For example, the built-in &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive changes several element styles at the same time.</source>
          <target state="translated">&lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;属性&lt;/em&gt;ディレクティブ&lt;/a&gt;は、要素、コンポーネント、または別のディレクティブの外観または動作を変更し&lt;em&gt;ます&lt;/em&gt; 。 たとえば、組み込みの&lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt;ディレクティブは、いくつかの要素スタイルを同時に変更します。</target>
        </trans-unit>
        <trans-unit id="381caa57d2775be37deef699cc2ad5d0b0696312" translate="yes">
          <source>An &lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;idempotent&lt;/a&gt; expression is ideal because it is free of side effects and improves Angular's change detection performance. In Angular terms, an idempotent expression always returns &lt;em&gt;exactly the same thing&lt;/em&gt; until one of its dependent values changes.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;べき等式&lt;/a&gt;は、副作用がなく、Angularの変更検出パフォーマンスが向上するため理想的です。 Angularの用語では、i等式は、その依存値の1つが変更されるまで&lt;em&gt;、&lt;/em&gt;常に&lt;em&gt;まったく同じものを&lt;/em&gt;返します。</target>
        </trans-unit>
        <trans-unit id="ca5e0929440033b5793e264cd56bccd1cc748753" translate="yes">
          <source>An &lt;a href=&quot;npm-packages&quot;&gt;npm package&lt;/a&gt; that plugs gaps in a browser's JavaScript implementation. See &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt; for polyfills that support particular functionality for particular platforms.</source>
          <target state="translated">ブラウザのJavaScript実装のギャップを埋める&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージ&lt;/a&gt; 。 特定のプラットフォームの特定の機能を&lt;a href=&quot;browser-support&quot;&gt;サポート&lt;/a&gt;するポリフィルについては、 ブラウザのサポートをご覧ください。</target>
        </trans-unit>
        <trans-unit id="219f19f290eb214e9b46b6b243f29af829538794" translate="yes">
          <source>An &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; root element is detected as an SVG element automatically, without the prefix.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; ルート要素は、プレフィックスなしで自動的にSVG要素として検出されます。</target>
        </trans-unit>
        <trans-unit id="8e73ae230a1248e9c7e2883b99036f3d5f240f5f" translate="yes">
          <source>An &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; presents the list of messages in repeated &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は、繰り返される &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素でメッセージのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="f2f90242a3b15020a7dda505cb0f3db9126f9d69" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。これは、AngularJSコアサービスを提供するためにインポートし、ハイブリッドアップグレードアプリケーションのブートストラップに使用されるインスタンスメソッドを持ちます。</target>
        </trans-unit>
        <trans-unit id="e4b5b7b463e93a6c1bdc30c63b8e5d59fb4e799f" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method does not begin its HTTP request until you call &lt;code&gt;subscribe()&lt;/code&gt; on the observable returned by that method. This is true for &lt;em&gt;all&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;&lt;em&gt;methods&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドは、そのメソッドによって返されるオブザーバブルで &lt;code&gt;subscribe()&lt;/code&gt; を呼び出すまで、HTTP要求を開始しません。 これは、 &lt;em&gt;すべての&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; &lt;em&gt;メソッドに&lt;/em&gt;当てはまり&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="3486e52a9ca74e105c9d47272170fbe086672a4e" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional asynchronous validators used with &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; で使用される追加の非同期バリデーターを登録するための &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3fc1b81c07404d7fb201c7c09fb069d006db201" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional synchronous validators used with &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; で使用される追加の同期バリデーターを登録するための &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9acb76cd675cf3db071a0fd0b62776f333e09782" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。これは、AngularJSコアサービスを提供するためにインポートし、ハイブリッドアップグレードアプリケーションのブートストラップに使用されるインスタンスメソッドを持ちます。</target>
        </trans-unit>
        <trans-unit id="a705ac5afb0c3c72cf40d0a78a176ebc767e55b7" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional asynchronous validators used with &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; で使用される追加の非同期バリデーターを登録するための &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23717595533a9e7f86e6906ec79bd920cab4e792" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional synchronous validators used with &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; で使用される追加の同期バリデーターを登録するための &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c48cdd99d250e9b5794feac11e209b12cc845dae" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; is backed by a render-specific element. In the browser, this is usually a DOM element.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; は、レンダリング固有の要素に基づいています。 ブラウザーでは、これは通常DOM要素です。</target>
        </trans-unit>
        <trans-unit id="0902cc5f82cdfcbcb355b954a52dc73cbbfff74b" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; configuration object that controls how navigation is performed.</source>
          <target state="translated">ナビゲーションの実行方法を制御する &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; 構成オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ec99dc581b15e270f8a008cf6fe23c15b13a4e6e" translate="yes">
          <source>An &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; is a replacement for a &lt;code&gt;new&lt;/code&gt; operator, which can automatically resolve the constructor dependencies.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; は、コンストラクターの依存関係を自動的に解決できる &lt;code&gt;new&lt;/code&gt; 演算子の代わりです。</target>
        </trans-unit>
        <trans-unit id="b1291a4011084cae6a49c7568f00d5c3f842045f" translate="yes">
          <source>An &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; property should normally be initialized to an Angular &lt;a href=&quot;../api/core/eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; with values flowing out of the component as &lt;a href=&quot;template-syntax#event-binding&quot;&gt;events&lt;/a&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; プロパティは、 &lt;a href=&quot;template-syntax#event-binding&quot;&gt;イベント&lt;/a&gt;としてコンポーネントから流出する値を持つAngular &lt;a href=&quot;../api/core/eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; に&lt;/a&gt;初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="5c0efdf314434e0bdd77bc0f5a83a46140513339" translate="yes">
          <source>An &lt;code&gt;Observable&lt;/code&gt; instance begins publishing values only when someone subscribes to it. You subscribe by calling the &lt;code&gt;subscribe()&lt;/code&gt; method of the instance, passing an observer object to receive the notifications.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; インスタンスは、誰かがサブスクライブしたときにのみ値の公開を開始します。 インスタンスの &lt;code&gt;subscribe()&lt;/code&gt; メソッドを呼び出して、オブザーバーオブジェクトを渡して通知を受信することにより、 サブスクライブします。</target>
        </trans-unit>
        <trans-unit id="496291c15f69bd4995a0ab9d8aaf7bfd7fe93e3b" translate="yes">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the URL &lt;a href=&quot;router#fragment&quot;&gt;fragment&lt;/a&gt; available to all routes.</source>
          <target state="translated">すべてのルートで利用可能なURL &lt;a href=&quot;router#fragment&quot;&gt;フラグメント&lt;/a&gt;の &lt;code&gt;Observable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4fa68903eb03e9a2e62a2a57a0c8d5942de1bfa" translate="yes">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the route path(s), represented as an array of strings for each part of the route path.</source>
          <target state="translated">ルートパスの &lt;code&gt;Observable&lt;/code&gt; 。ルートパスの各部分の文字列の配列として表されます。</target>
        </trans-unit>
        <trans-unit id="04f30cfd0bce06b1acdce10f416a6eb14bf52ffb" translate="yes">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the &lt;a href=&quot;router#query-parameters&quot;&gt;query parameters&lt;/a&gt; available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">すべてのルートで使用可能な&lt;a href=&quot;router#query-parameters&quot;&gt;クエリパラメータの&lt;/a&gt; &lt;a href=&quot;../api/router/parammap&quot;&gt;マップ&lt;/a&gt;を含む &lt;code&gt;Observable&lt;/code&gt; 。 マップは、クエリパラメーターからの単一および複数の値の取得をサポートしています。</target>
        </trans-unit>
        <trans-unit id="43be0a230743764c26dd920f3024d4f1250bc9f5" translate="yes">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the required and &lt;a href=&quot;router#optional-route-parameters&quot;&gt;optional parameters&lt;/a&gt; specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">ルートに固有の必須および&lt;a href=&quot;router#optional-route-parameters&quot;&gt;オプションのパラメーターの&lt;/a&gt; &lt;a href=&quot;../api/router/parammap&quot;&gt;マップ&lt;/a&gt;を含む &lt;code&gt;Observable&lt;/code&gt; 。 マップは、同じパラメーターからの単一および複数の値の取得をサポートしています。</target>
        </trans-unit>
        <trans-unit id="8f7e21dd9af9c63a178fb6539d2db368c3122537" translate="yes">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains the &lt;code&gt;data&lt;/code&gt; object provided for the route. Also contains any resolved values from the &lt;a href=&quot;router#resolve-guard&quot;&gt;resolve guard&lt;/a&gt;.</source>
          <target state="translated">ルートに提供された &lt;code&gt;data&lt;/code&gt; オブジェクトを含む &lt;code&gt;Observable&lt;/code&gt; 。 また、 &lt;a href=&quot;router#resolve-guard&quot;&gt;resolve guard&lt;/a&gt;から解決された値が含まれます。</target>
        </trans-unit>
        <trans-unit id="659371a63d96eaa9846b4e62b2ecd146eb8fb3a8" translate="yes">
          <source>An &lt;code&gt;e2e/&lt;/code&gt; folder at the top level contains source files for a set of end-to-end tests that correspond to the root-level application, along with test-specific configuration files.</source>
          <target state="translated">最上位の &lt;code&gt;e2e/&lt;/code&gt; フォルダーには、テスト固有の構成ファイルと共に、ルートレベルのアプリケーションに対応する一連のエンドツーエンドテストのソースファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="a393989fd86c0b1fb47b08868996156fe76ee83d" translate="yes">
          <source>An &lt;code&gt;ngOnInit()&lt;/code&gt; is a good place for a component to fetch its initial data. The &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour of Heroes Tutorial&lt;/a&gt; guide shows how.</source>
          <target state="translated">&lt;code&gt;ngOnInit()&lt;/code&gt; は、コンポーネントが初期データを取得するのに適した場所です。 &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour of Heroesチュートリアル&lt;/a&gt;ガイドにその方法が示されています。</target>
        </trans-unit>
        <trans-unit id="40bf5611d5635b162977a8f19c777ed4e7ce75d7" translate="yes">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of body returns an observable of &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; with the same &lt;code&gt;T&lt;/code&gt; body type.</source>
          <target state="translated">bodyの &lt;code&gt;observe&lt;/code&gt; 値は、同じ &lt;code&gt;T&lt;/code&gt; body型の &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; の observableを返します。</target>
        </trans-unit>
        <trans-unit id="09173ee04df6635197986a7dcb62f7c7941d2cfe" translate="yes">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of events returns an observable of the raw &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; stream, including progress events by default.</source>
          <target state="translated">イベントの &lt;code&gt;observe&lt;/code&gt; 値は、デフォルトで進捗イベントを含む生の &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; ストリームの監視可能な値を返します。</target>
        </trans-unit>
        <trans-unit id="c6c6a2eb3f2af282b7e5e7ba7956f7e168813b54" translate="yes">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of response returns an observable of &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;, where the &lt;code&gt;T&lt;/code&gt; parameter depends on the &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; and any optionally provided type parameter.</source>
          <target state="translated">responseの &lt;code&gt;observe&lt;/code&gt; 値は、 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt; observableを返します &lt;code&gt;T&lt;/code&gt; パラメーターは、 &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; およびオプションで提供されるtypeパラメーターに依存します。</target>
        </trans-unit>
        <trans-unit id="26ce9d0a751c4b4bca560fdfc4e8290382f4ff8b" translate="yes">
          <source>An &lt;em&gt;Admin&lt;/em&gt; area to manage the list of crises and heroes.</source>
          <target state="translated">危機とヒーローのリストを管理する&lt;em&gt;管理&lt;/em&gt;エリア。</target>
        </trans-unit>
        <trans-unit id="b19e97dba2208f0862e676d34764de4f98f851d9" translate="yes">
          <source>An &lt;em&gt;add schematic&lt;/em&gt; allows developers to install your library in an Angular workspace using &lt;code&gt;ng add&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;追加回路図&lt;/em&gt;により、開発者は &lt;code&gt;ng add&lt;/code&gt; を使用してライブラリをAngularワークスペースにインストールできます。</target>
        </trans-unit>
        <trans-unit id="6ec44fe7f1a288919612b48c15847deaef368424" translate="yes">
          <source>An &lt;em&gt;attribute directive&lt;/em&gt; modifies the behavior of an element, component or another directive. Its name reflects the way the directive is applied: as an attribute on a host element.</source>
          <target state="translated">&lt;em&gt;属性ディレクティブ&lt;/em&gt;は、要素、コンポーネント、または別のディレクティブの動作を変更します。 その名前は、ホスト要素の属性として、ディレクティブが適用される方法を反映しています。</target>
        </trans-unit>
        <trans-unit id="0ec56b57e883f5387676814357ed484d6aaa7704" translate="yes">
          <source>An &lt;em&gt;update schematic&lt;/em&gt; can tell the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command how to update your library's dependencies and adjust for breaking changes when you release a new version.</source>
          <target state="translated">&lt;em&gt;更新回路図&lt;/em&gt;は、 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; コマンドに、ライブラリの依存関係を更新し、新しいバージョンをリリースしたときに重大な変更を調整する方法を指示できます。</target>
        </trans-unit>
        <trans-unit id="761f41f255dd677b107e4bd110cf2558311066df" translate="yes">
          <source>An &lt;strong&gt;Attribute&lt;/strong&gt; directive changes the appearance or behavior of a DOM element.</source>
          <target state="translated">&lt;strong&gt;Attribute&lt;/strong&gt;ディレクティブは、DOM要素の外観または動作を変更します。</target>
        </trans-unit>
        <trans-unit id="ac0f1891644c942a2466a1e07ed0df2da374772f" translate="yes">
          <source>An Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; binds the button's click event to &lt;code&gt;MessageService.clear()&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;イベントバインディング&lt;/a&gt;は、ボタンのクリックイベントを &lt;code&gt;MessageService.clear()&lt;/code&gt; バインドします。</target>
        </trans-unit>
        <trans-unit id="43775620687c736b758a71c493e7f6e17f5e85cc" translate="yes">
          <source>An Angular &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; packaged as a &lt;a href=&quot;glossary#custom-element&quot;&gt;custom element&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#custom-element&quot;&gt;カスタム要素&lt;/a&gt;としてパッケージ化されたAngular &lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="f7d10a3ad012872f7ef8bb8e2bb8056b9624d030" translate="yes">
          <source>An Angular &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; with a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive in its template that displays views based on router navigations.</source>
          <target state="translated">ルーターナビゲーションに基づいてビューを表示する、テンプレートに &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; ディレクティブを持つAngular &lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae5befb0e78f74df39d0a2413426de6480b4eff1" translate="yes">
          <source>An Angular HTML form template.</source>
          <target state="translated">Angular HTMLフォームテンプレート。</target>
        </trans-unit>
        <trans-unit id="c46699afa49393f6d4cbd5edc2fb078febaadc48" translate="yes">
          <source>An Angular NgModule is a class with the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator&amp;mdash;JavaScript modules don't have to have the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. Angular's &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;imports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; and they serve a similar purpose.</source>
          <target state="translated">Angular NgModuleは &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターを持つクラスです。JavaScriptモジュールは &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターを持つ必要はありません。 Angularの &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; には &lt;code&gt;imports&lt;/code&gt; と &lt;code&gt;exports&lt;/code&gt; あり、同様の目的を果たします。</target>
        </trans-unit>
        <trans-unit id="318d525298ccecf3917c9882251bdba1ace41170" translate="yes">
          <source>An Angular app needs at least one module that serves as the root module. As you add features to your app, you can add them in modules. The following are frequently used Angular modules with examples of some of the things they contain:</source>
          <target state="translated">Angularアプリには、ルートモジュールとして機能するモジュールが少なくとも1つ必要です。 アプリに機能を追加するときに、モジュールに追加できます。 以下は、頻繁に使用されるAngularモジュールとそれに含まれるいくつかの例です。</target>
        </trans-unit>
        <trans-unit id="17e4e945b590d3025d8261eb8ed46e27c36c3781" translate="yes">
          <source>An Angular app runs in a zone where it can respond to asynchronous events by checking for data changes and updating the information it displays by resolving &lt;a href=&quot;glossary#data-binding&quot;&gt;data bindings&lt;/a&gt;.</source>
          <target state="translated">Angularアプリは、データの変更を確認し、 &lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディングを&lt;/a&gt;解決して表示する情報を更新することにより、非同期イベントに応答できるゾーンで実行されます 。</target>
        </trans-unit>
        <trans-unit id="f5a58a2db54c37533d8743189ca00c22cff5f930" translate="yes">
          <source>An Angular application comprises a tree of components, in which each Angular component has a specific purpose and responsibility.</source>
          <target state="translated">Angularアプリケーションはコンポーネントのツリーで構成され、各Angularコンポーネントには特定の目的と責任があります。</target>
        </trans-unit>
        <trans-unit id="224c83ccdc365f0fb95c344a9b94b58e6e776da8" translate="yes">
          <source>An Angular application consists mainly of components and their HTML templates. Because the components and templates provided by Angular cannot be understood by the browser directly, Angular applications require a compilation process before they can run in a browser.</source>
          <target state="translated">Angularアプリケーションは、主にコンポーネントとそのHTMLテンプレートで構成されています。 Angularが提供するコンポーネントとテンプレートはブラウザーで直接理解できないため、Angularアプリケーションをブラウザーで実行するにはコンパイルプロセスが必要です。</target>
        </trans-unit>
        <trans-unit id="abdf235f2e0f6378bc1eb3fb7b12653a48e94457" translate="yes">
          <source>An Angular application has multiple injectors, arranged in a tree hierarchy that parallels the component tree. Each injector creates a singleton instance of a dependency. That same instance is injected wherever that injector provides that service. A particular service can be provided and created at any level of the injector hierarchy, which means that there can be multiple instances of a service if it is provided by multiple injectors.</source>
          <target state="translated">Angularアプリケーションには、コンポーネントツリーに対応するツリー階層に配置された複数のインジェクターがあります。 各インジェクターは、依存関係のシングルトンインスタンスを作成します。 その同じインスタンスは、そのインジェクターがそのサービスを提供するところならどこにでも注入されます。 特定のサービスは、インジェクター階層の任意のレベルで提供および作成できます。つまり、サービスが複数のインジェクターによって提供される場合、サービスのインスタンスが複数存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="901f5d47e5b42b0f1b83f5de4ab44ccaaf9f4393" translate="yes">
          <source>An Angular class or other definition that provides a dependency using the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; mechanism. An injectable &lt;a href=&quot;glossary#service&quot;&gt;service&lt;/a&gt; class must be marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. Other items, such as constant values, can also be injectable.</source>
          <target state="translated">&lt;a href=&quot;glossary#di&quot;&gt;依存性注入&lt;/a&gt;メカニズムを使用して依存関係を提供するAngularクラスまたはその他の定義。 注入可能な&lt;a href=&quot;glossary#service&quot;&gt;サービス&lt;/a&gt;クラスは、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;でマークする必要があります。 定数値などの他の項目も注入可能です。</target>
        </trans-unit>
        <trans-unit id="ca9a64e3c4625a8c6e8d002351029891fd08daa2" translate="yes">
          <source>An Angular component can be &quot;downgraded&quot; to an AngularJS component. This is achieved by defining an AngularJS directive, which bootstraps the Angular component at its location in the DOM. See &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントは、AngularJSコンポーネントに「ダウングレード」できます。 これは、DOM内の位置でAngularコンポーネントをブートストラップするAngularJSディレクティブを定義することで実現されます。 &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="94ed2170f6f1643869b56898066095381b91d979" translate="yes">
          <source>An Angular component can be downgraded to an AngularJS component directive. This creates an AngularJS directive, which bootstraps the Angular component in that location.</source>
          <target state="translated">Angularコンポーネントは、AngularJSコンポーネントディレクティブにダウングレードできます。 これにより、AngularJSディレクティブが作成され、その場所でAngularコンポーネントがブートストラップされます。</target>
        </trans-unit>
        <trans-unit id="84e3e11bc265bb72484f1b08eb8f80c960cc9617" translate="yes">
          <source>An Angular component class is responsible for exposing data and handling most of the view's display and user-interaction logic through &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;.</source>
          <target state="translated">Angularコンポーネントクラスは、データを公開し、 &lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;を通じてビューの表示とユーザー操作ロジックのほとんどを処理します 。</target>
        </trans-unit>
        <trans-unit id="055dd8ce39f4854631f9678e6236d3d89f44ba38" translate="yes">
          <source>An Angular component with a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; that displays views based on router navigations.</source>
          <target state="translated">ルーターナビゲーションに基づいてビューを表示する &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; を備えたAngularコンポーネント。</target>
        </trans-unit>
        <trans-unit id="0583a50b83c1574e7c5305e71080338ec56fc21b" translate="yes">
          <source>An Angular form has two parts: an HTML-based &lt;em&gt;template&lt;/em&gt; and a component &lt;em&gt;class&lt;/em&gt; to handle data and user interactions programmatically. Begin with the class because it states, in brief, what the hero editor can do.</source>
          <target state="translated">Angularフォームには2つの部分があります。HTMLベースの&lt;em&gt;テンプレート&lt;/em&gt;と、プログラムでデータとユーザーの対話を処理するコンポーネント&lt;em&gt;クラス&lt;/em&gt;です。 ヒーローエディターができることを簡単に説明しているため、クラスから始めます。</target>
        </trans-unit>
        <trans-unit id="feb425f8a5e188113a133b8bf3ee82774575750d" translate="yes">
          <source>An Angular library is an Angular &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt; that differs from an app in that it cannot run on its own. A library must be imported and used in an app.</source>
          <target state="translated">Angularライブラリは、独自に実行できないという点でアプリとは異なるAngular &lt;a href=&quot;glossary#project&quot;&gt;プロジェクト&lt;/a&gt;です。 ライブラリをインポートして、アプリで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="39a17a3341ed73b84cf9c19e3784f7825b103d30" translate="yes">
          <source>An AngularJS component can be &quot;upgraded&quot;&quot; to an Angular component. This is achieved by defining an Angular directive, which bootstraps the AngularJS component at its location in the DOM. See &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularJSコンポーネントは、Angularコンポーネントに「アップグレード」できます。これは、DOM内の位置でAngularJSコンポーネントをブートストラップするAngularディレクティブを定義することで実現できます &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="d7fbbc51dcdac1c27708c03be77bb73e12702b44" translate="yes">
          <source>An AngularJS component can be upgraded to an Angular component. This creates an Angular directive, which bootstraps the AngularJS component directive in that location.</source>
          <target state="translated">AngularJSコンポーネントは、Angularコンポーネントにアップグレードできます。 これにより、Angularディレクティブが作成され、その場所でAngularJSコンポーネントディレクティブがブートストラップされます。</target>
        </trans-unit>
        <trans-unit id="4a64cb5ebfd2cbf42d2f183810699373d7988f5d" translate="yes">
          <source>An AngularJS component directive that is fully aligned with the Angular architecture may look something like this:</source>
          <target state="translated">Angularアーキテクチャと完全に整合するAngularJSコンポーネントディレクティブは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="8a975ebf31d46d77cfdf5f77c89cee15a4b405cd" translate="yes">
          <source>An HTML file for the component template.</source>
          <target state="translated">コンポーネントテンプレートのHTMLファイル。</target>
        </trans-unit>
        <trans-unit id="a3f4bdfe7e7387bc48b45d52ab3ae4d5c67454c6" translate="yes">
          <source>An HTTP request/response body that represents serialized parameters, per the MIME type &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.</source>
          <target state="translated">MIMEタイプ &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; ごとに、シリアル化されたパラメーターを表すHTTP要求/応答本文。</target>
        </trans-unit>
        <trans-unit id="e3a02c74d3b66bdb47a53584bb85ba7824e6d06f" translate="yes">
          <source>An InjectionToken that gets the current &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;createInjector()&lt;/code&gt;-style injectors.</source>
          <target state="translated">&lt;code&gt;createInjector()&lt;/code&gt; スタイルのインジェクターの現在の &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を取得するInjectionToken。</target>
        </trans-unit>
        <trans-unit id="148344ddb54e50e9920be9a68ce56bf37e875498" translate="yes">
          <source>An NgModule bounds &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable classes&lt;/a&gt; only. Declarables are the only classes that matter to the &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt;.</source>
          <target state="translated">NgModuleは、 &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;宣言可能なクラス&lt;/a&gt;のみをバインドします 。 宣言可能オブジェクトは、 &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angularコンパイラ&lt;/a&gt;にとって重要な唯一のクラスです。</target>
        </trans-unit>
        <trans-unit id="4d727575727c196322384a842e972193fc9ad53b" translate="yes">
          <source>An NgModule can export a combination of its own declarations, selected imported classes, and imported NgModules.</source>
          <target state="translated">NgModuleは、独自の宣言、選択されたインポートされたクラス、インポートされたNgModuleの組み合わせをエクスポートできます。</target>
        </trans-unit>
        <trans-unit id="4aa58c70086cf419b25738e1a24be53c81f07b1d" translate="yes">
          <source>An NgModule can only export the &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable classes&lt;/a&gt; it owns or imports from other modules. It doesn't declare or export any other kind of class.</source>
          <target state="translated">NgModuleは、所有する宣言可能な&lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;クラス&lt;/a&gt;のみをエクスポートするか、他のモジュールからインポートできます。 他の種類のクラスを宣言またはエクスポートしません。</target>
        </trans-unit>
        <trans-unit id="fb24463a305716f436894ea4dafb6375e5e171c3" translate="yes">
          <source>An NgModule can re-export entire NgModules, which effectively re-exports all of their exported classes. Angular's own &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; exports a couple of NgModules like this:</source>
          <target state="translated">NgModuleはNgModule全体を再エクスポートできます。これにより、エクスポートされたすべてのクラスが効果的に再エクスポートされます。 Angular独自の &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; は、次のようなNgModuleをいくつかエクスポートします。</target>
        </trans-unit>
        <trans-unit id="048f4d3b7b842d7e07d1105320c9847be1e9da43" translate="yes">
          <source>An NgModule describes how the application parts fit together. Every application has at least one Angular module, the &lt;em&gt;root&lt;/em&gt; module that you bootstrap to launch the application. By convention, it is usually called &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">NgModuleは、アプリケーションパーツがどのように適合するかを記述します。 すべてのアプリケーションには、少なくとも1つのAngularモジュールがあります。これは、アプリケーションを起動するためにブートストラップする&lt;em&gt;ルート&lt;/em&gt;モジュールです。 慣例により、通常は &lt;code&gt;AppModule&lt;/code&gt; と呼ばれます 。</target>
        </trans-unit>
        <trans-unit id="c2a07c3d512aeae1808c13ce81a7518d850dce90" translate="yes">
          <source>An NgModule is a class marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; takes a metadata object that describes how to compile a component's template and how to create an injector at runtime. It identifies the module's own components, directives, and pipes, making some of them public, through the &lt;code&gt;exports&lt;/code&gt; property, so that external components can use them. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; can also add service providers to the application dependency injectors.</source>
          <target state="translated">NgModuleは、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターでマークされたクラスです。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は、コンポーネントのテンプレートをコンパイルする方法と、実行時にインジェクターを作成する方法を記述するメタデータオブジェクトを受け取ります。 モジュールのコンポーネント、ディレクティブ、およびパイプを識別し、それらの一部を &lt;code&gt;exports&lt;/code&gt; プロパティを介して公開し、外部コンポーネントがそれらを使用できるようにします。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は、サービスプロバイダーをアプリケーション依存関係インジェクターに追加することもできます。</target>
        </trans-unit>
        <trans-unit id="0755b300d2bc07deab147985dc0808edcf9b55fc" translate="yes">
          <source>An NgModule is defined by a class decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows.</source>
          <target state="translated">NgModuleは、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 装飾されたクラスによって定義されます。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; デコレータは、プロパティがモジュールを記述する単一のメタデータオブジェクトを受け取る関数です。 最も重要なプロパティは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="eeae2a085063e0e52b29bf2aee06c172b48c61d8" translate="yes">
          <source>An Observable that contains a map of the query parameters available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">すべてのルートで使用可能なクエリパラメータのマップを含むObservable。 マップは、クエリパラメーターからの単一および複数の値の取得をサポートしています。</target>
        </trans-unit>
        <trans-unit id="953a469034adc1d17c45b7ae97fc349098337f6a" translate="yes">
          <source>An Observable that contains a map of the required and optional parameters specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">ルートに固有の必須およびオプションのパラメーターのマップを含むObservable。 マップは、同じパラメーターからの単一および複数の値の取得をサポートしています。</target>
        </trans-unit>
        <trans-unit id="b8ab961cde1a70f46035707afbe89037b6b39bfd" translate="yes">
          <source>An SVG snippet template needs an &lt;code&gt;svg:&lt;/code&gt; prefix on its root element to disambiguate the SVG element from an HTML component.</source>
          <target state="translated">SVGスニペットテンプレートには、HTMLコンポーネントからSVG要素を明確にするために、ルート要素に &lt;code&gt;svg:&lt;/code&gt; プレフィックスが必要です。</target>
        </trans-unit>
        <trans-unit id="cd68f31ec23fc069bc97d065b7bda95baed68b56" translate="yes">
          <source>An absolute URL. The function does not apply any delta to the current URL.</source>
          <target state="translated">絶対URL。 この関数は、現在のURLにデルタを適用しません。</target>
        </trans-unit>
        <trans-unit id="000c69911cb6c7d1b91ec58dcd30afe1c065b726" translate="yes">
          <source>An abstract class for inserting the root test component element in a platform independent way.</source>
          <target state="translated">プラットフォームに依存しない方法でルートテストコンポーネント要素を挿入するための抽象クラス。</target>
        </trans-unit>
        <trans-unit id="b4296fe66f2a24f1df22fa35742a65ee2ddbb569" translate="yes">
          <source>An abstract class is usually a base class that you can extend. In this app, however there is no class that inherits from &lt;code&gt;MinimalLogger&lt;/code&gt;. The &lt;code&gt;LoggerService&lt;/code&gt; and the &lt;code&gt;DateLoggerService&lt;/code&gt; could have inherited from &lt;code&gt;MinimalLogger&lt;/code&gt;, or they could have implemented it instead, in the manner of an interface. But they did neither. &lt;code&gt;MinimalLogger&lt;/code&gt; is used only as a dependency injection token.</source>
          <target state="translated">通常、抽象クラスは、拡張可能な基本クラスです。 ただし、このアプリには &lt;code&gt;MinimalLogger&lt;/code&gt; を継承するクラスはありません。 &lt;code&gt;LoggerService&lt;/code&gt; とDateLoggerServiceは &lt;code&gt;DateLoggerService&lt;/code&gt; から継承することもできますが、代わりにインターフェイスのように実装することもできます。 しかし、彼らはどちらもしませんでした。 &lt;code&gt;MinimalLogger&lt;/code&gt; は、依存性注入トークンとしてのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="e9ea8fa94bedea0363391bb71430a1a20bedce5c" translate="yes">
          <source>An add schematic can also update a project with configuration changes, add additional dependencies (such as polyfills), or scaffold package-specific initialization code. For example, the &lt;code&gt;@angular/pwa&lt;/code&gt; schematic turns your application into a PWA by adding an app manifest and service worker, and the &lt;code&gt;@angular/elements&lt;/code&gt; schematic adds the &lt;code&gt;document-register-element.js&lt;/code&gt; polyfill and dependencies for Angular Elements.</source>
          <target state="translated">回路図を追加すると、構成を変更してプロジェクトを更新したり、ポリフィルなどの依存関係を追加したり、スキャフォールドパッケージ固有の初期化コードを追加したりできます。 たとえば、 &lt;code&gt;@angular/pwa&lt;/code&gt; スケマティックは、アプリマニフェストとサービスワーカーを追加することでアプリケーションをPWAに変換し、 &lt;code&gt;@angular/elements&lt;/code&gt; スケマティックは、Angular Elementsの &lt;code&gt;document-register-element.js&lt;/code&gt; ポリフィルと依存関係を追加します 。</target>
        </trans-unit>
        <trans-unit id="d13680ec950010fd10b49de481b4c84b7ce6a765" translate="yes">
          <source>An add schematic is typically supplied with a library, so that the library can be added to an existing project with &lt;code&gt;ng add&lt;/code&gt;. The &lt;code&gt;add&lt;/code&gt; command uses your package manager to download new dependencies, and invokes an installation script that is implemented as a schematic.</source>
          <target state="translated">通常、追加回路図にはライブラリが付属しているため、 &lt;code&gt;ng add&lt;/code&gt; を使用してライブラリを既存のプロジェクトに追加できます。 &lt;code&gt;add&lt;/code&gt; コマンドは、パッケージマネージャーを使用して新しい依存関係をダウンロードし、回路図として実装されているインストールスクリプトを呼び出します。</target>
        </trans-unit>
        <trans-unit id="24978e18969beb5970538c790506a8b202bafe4b" translate="yes">
          <source>An address is a good example of information that can be grouped together. Form groups can accept both form control and form group instances as children. This makes composing complex form models easier to maintain and logically group together. To create a nested group in &lt;code&gt;profileForm&lt;/code&gt;, add a nested &lt;code&gt;address&lt;/code&gt; element to the form group instance.</source>
          <target state="translated">アドレスは、グループ化できる情報の良い例です。 フォームグループは、フォームコントロールとフォームグループインスタンスの両方を子として受け入れることができます。 これにより、複雑なフォームモデルの作成が維持しやすくなり、論理的にグループ化できます。 &lt;code&gt;profileForm&lt;/code&gt; でネストされたグループを作成するには、ネストされた &lt;code&gt;address&lt;/code&gt; 要素をフォームグループインスタンスに追加します。</target>
        </trans-unit>
        <trans-unit id="fbe686fd3d18059b9a2de729a643f10662342143" translate="yes">
          <source>An alert or callout &lt;em&gt;must not&lt;/em&gt; contain anything &lt;em&gt;essential&lt;/em&gt; to that understanding. Don't put a critical instruction or a tutorial step in a subsection.</source>
          <target state="translated">アラートまたはコールアウトに&lt;em&gt;は&lt;/em&gt; 、その理解に&lt;em&gt;不可欠なもの&lt;/em&gt;を含めること&lt;em&gt;はできません&lt;/em&gt; 。 サブセクションに重要な指示やチュートリアルのステップを入れないでください。</target>
        </trans-unit>
        <trans-unit id="00c713d285573373b81643d5061ba989b838ab82" translate="yes">
          <source>An alternative way, that only requires defining each custom element's type once, is augmenting the &lt;code&gt;HTMLElementTagNameMap&lt;/code&gt;, which TypeScript uses to infer the type of a returned element based on its tag name (for DOM methods such as &lt;code&gt;document.createElement()&lt;/code&gt;, &lt;code&gt;document.querySelector()&lt;/code&gt;, etc.):</source>
          <target state="translated">各カスタム要素のタイプを一度だけ定義する必要がある代替方法は、 &lt;code&gt;HTMLElementTagNameMap&lt;/code&gt; を拡張することです。これは、TypeScriptがタグ名に基づいて返される要素のタイプを推測するために使用し &lt;code&gt;document.createElement()&lt;/code&gt; 、 &lt;code&gt;document.querySelector()&lt;/code&gt; などのDOMメソッドの場合） （）など）：</target>
        </trans-unit>
        <trans-unit id="74d83efe7c03fbe91b9f3bcaf5056860a5cc2f6b" translate="yes">
          <source>An animation can influence an end user to &lt;em&gt;perceive&lt;/em&gt; the operation as faster, even when it isn't. Thus, a simple animation can be a cost-effective way to keep users happy, rather than seeking to improve the speed of a server call and having to compensate for circumstances beyond your control, such as an unreliable network connection.</source>
          <target state="translated">アニメーションは、エンドユーザーに影響を与えて、そうでない場合でも操作をより高速に&lt;em&gt;認識さ&lt;/em&gt;せることができます。 したがって、単純なアニメーションは、サーバー呼び出しの速度を向上させ、信頼できないネットワーク接続などの制御できない状況を補うよりも、ユーザーを満足させるための費用対効果の高い方法です。</target>
        </trans-unit>
        <trans-unit id="f1a2cf38a615729fb3f11d85b93701a4402341a7" translate="yes">
          <source>An animation definition object, containing an array of &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 宣言の配列を含むアニメーション定義オブジェクト。</target>
        </trans-unit>
        <trans-unit id="853f9bcb68e4ea413401f09e0440f7461b8af150" translate="yes">
          <source>An animation definition object, containing an array of state and transition declarations.</source>
          <target state="translated">状態と遷移の宣言の配列を含むアニメーション定義オブジェクト。</target>
        </trans-unit>
        <trans-unit id="8a821ff6927c3292569d9090589163fc3c9aa6c9" translate="yes">
          <source>An animation reference object.</source>
          <target state="translated">アニメーション参照オブジェクト。</target>
        </trans-unit>
        <trans-unit id="2cf8c3e888172d6c728a4c7f3a60383d2c87ff99" translate="yes">
          <source>An animation requires a &lt;em&gt;trigger&lt;/em&gt;, so that it knows when to start. The &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function collects the states and transitions, and gives the animation a name, so that you can attach it to the triggering element in the HTML template.</source>
          <target state="translated">アニメーションには&lt;em&gt;trigger&lt;/em&gt;が必要なので、いつ開始するかがわかります。 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数は、状態と遷移を収集し、アニメーションに名前を付けます。これにより、HTMLテンプレートのトリガー要素にアタッチできます。</target>
        </trans-unit>
        <trans-unit id="f31a2cd8172701f8176647e6f4deca92daaccebe" translate="yes">
          <source>An app will send a PUT request to completely replace a resource with updated data. The following &lt;code&gt;HeroesService&lt;/code&gt; example is just like the POST example.</source>
          <target state="translated">アプリはPUTリクエストを送信して、リソースを更新されたデータで完全に置き換えます。 次の &lt;code&gt;HeroesService&lt;/code&gt; の例は、POSTの例と同じです。</target>
        </trans-unit>
        <trans-unit id="08d1f63a5c6d8dd57d9894f60a7bfc80b1a4e371" translate="yes">
          <source>An app's components typically define many views, arranged hierarchically. Angular provides the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to help you define navigation paths among views. The router provides sophisticated in-browser navigational capabilities.</source>
          <target state="translated">通常、アプリのコンポーネントは、階層的に配置された多くのビューを定義します。 Angularは、ビュー間のナビゲーションパスを定義するのに役立つ &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスを提供します。 ルーターは、洗練されたブラウザー内ナビゲーション機能を提供します。</target>
        </trans-unit>
        <trans-unit id="ab7bcd611c180d61f273bc0f9ef27d36dfdab3b1" translate="yes">
          <source>An application can subscribe to &lt;code&gt;&lt;a href=&quot;swpush#notificationClicks&quot;&gt;SwPush.notificationClicks&lt;/a&gt;&lt;/code&gt; observable to be notified when a user clicks on a notification. For example:</source>
          <target state="translated">アプリケーションは、ユーザーが通知をクリックすると通知されるように、 &lt;code&gt;&lt;a href=&quot;swpush#notificationClicks&quot;&gt;SwPush.notificationClicks&lt;/a&gt;&lt;/code&gt; observableにサブスクライブできます。 例えば：</target>
        </trans-unit>
        <trans-unit id="c9718459a067afc4d9d2901e781c24a2a67e4039" translate="yes">
          <source>An array entry for the &lt;code&gt;styles&lt;/code&gt; and &lt;code&gt;scripts&lt;/code&gt; options can be a simple path string, or an object that points to an extra entry-point file. The associated builder will load that file and its dependencies as a separate bundle during the build. With a configuration object, you have the option of naming the bundle for the entry point, using a &lt;code&gt;bundleName&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;styles&lt;/code&gt; および &lt;code&gt;scripts&lt;/code&gt; オプションの配列エントリは、単純なパス文字列、または追加のエントリポイントファイルを指すオブジェクトにすることができます。 関連するビルダーは、ビルド中にそのファイルとその依存関係を別個のバンドルとしてロードします。 構成オブジェクトでは、 &lt;code&gt;bundleName&lt;/code&gt; フィールドを使用して、エントリポイントのバンドルに名前を付けるオプションがあります。</target>
        </trans-unit>
        <trans-unit id="f6e77b0b12875d380070bf15ea40936f15a6e856" translate="yes">
          <source>An array of &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that define the navigation paths for the application.</source>
          <target state="translated">アプリケーションのナビゲーションパスを定義する &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="78fd4b888290426cb729569fbcc07df27c92b26d" translate="yes">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to activate a child of the component. By default, any user can activate a child.</source>
          <target state="translated">現在のユーザーがコンポーネントの子をアクティブ化できるかどうかを判断するために、 &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;()&lt;/code&gt; ハンドラーを検索するために使用されるDIトークンの配列。 デフォルトでは、すべてのユーザーが子をアクティブ化できます。</target>
        </trans-unit>
        <trans-unit id="6ebf193ce1e81f1e29cdfa0592849a6727b6a98e" translate="yes">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to deactivate the component. By default, any user can deactivate.</source>
          <target state="translated">現在のユーザーがコンポーネントの非アクティブ化を許可されているかどうかを判断するために、 &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;()&lt;/code&gt; ハンドラーを検索するために使用されるDIトークンの配列。 デフォルトでは、すべてのユーザーが非アクティブ化できます。</target>
        </trans-unit>
        <trans-unit id="e9ac0547b9e7d50ef7867b566a6ff6650ca3ea97" translate="yes">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to load the component. By default, any user can load.</source>
          <target state="translated">現在のユーザーがコンポーネントをロードできるかどうかを判断するために、 &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;()&lt;/code&gt; ハンドラーを検索するために使用されるDIトークンの配列。 デフォルトでは、すべてのユーザーがロードできます。</target>
        </trans-unit>
        <trans-unit id="ae39554eae86a4d64a9fdb529096eb2b79364390" translate="yes">
          <source>An array of animation step objects.</source>
          <target state="translated">アニメーションステップオブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="f99aba27ddb3e9a1611aa598c8ceb36b851409de" translate="yes">
          <source>An array of animation styles.</source>
          <target state="translated">アニメーションスタイルの配列。</target>
        </trans-unit>
        <trans-unit id="938fa39e1f51c4ab052524820d5860359507a2f0" translate="yes">
          <source>An array of child &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that specifies a nested route configuration.</source>
          <target state="translated">ネストされたルート構成を指定する子 &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="0edd9ac18793ee073ea3aabdfbcfff60f42d2100" translate="yes">
          <source>An array of child controls or control configs. Each child control is given an index when it is registered.</source>
          <target state="translated">子コントロールまたはコントロール構成の配列。 各子コントロールには、登録時にインデックスが付与されます。</target>
        </trans-unit>
        <trans-unit id="b26827b9a483db95d70a5b32edec9f7eeb17162f" translate="yes">
          <source>An array of child controls. Each child control is given an index where it is registered.</source>
          <target state="translated">子コントロールの配列。 各子コントロールには、それが登録されているインデックスが与えられます。</target>
        </trans-unit>
        <trans-unit id="9b54d3fb3ef2c358aeb1752efb0ed3c0fabe3497" translate="yes">
          <source>An array of commands to apply.</source>
          <target state="translated">適用するコマンドの配列。</target>
        </trans-unit>
        <trans-unit id="2152bc4eb46fc4163f9c3942dc1535de09a80686" translate="yes">
          <source>An array of dependency-injection tokens used to look up &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to activate the component. By default, any user can activate.</source>
          <target state="translated">現在のユーザーがコンポーネントのアクティブ化を許可されているかどうかを判断するために、 &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;()&lt;/code&gt; ハンドラーを検索するために使用される依存関係注入トークンの配列。 デフォルトでは、すべてのユーザーがアクティブ化できます。</target>
        </trans-unit>
        <trans-unit id="5e3b57d965761f24eeb916e84feb687611633061" translate="yes">
          <source>An array of directives imported from another module. For example, don't declare &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt; because the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; already declares it.</source>
          <target state="translated">別のモジュールからインポートされたディレクティブの配列。 たとえば、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; がすでに宣言しているため、 &lt;code&gt;@angular/forms&lt;/code&gt; からFORMS_DIRECTIVESを宣言しないでください。</target>
        </trans-unit>
        <trans-unit id="2e01570e046471a7a45896ef34ac7217adb7671c" translate="yes">
          <source>An array of directives imported from another package. For example, don't declare &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt;</source>
          <target state="translated">別のパッケージからインポートされたディレクティブの配列。 たとえば、 &lt;code&gt;@angular/forms&lt;/code&gt; から &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; を宣言しないでください</target>
        </trans-unit>
        <trans-unit id="c9951be90f174b4103642b20c910d1924c5c6d73" translate="yes">
          <source>An array of key-value style pairs.</source>
          <target state="translated">キーと値のスタイルペアの配列。</target>
        </trans-unit>
        <trans-unit id="66295ef82d2f1ab3bcf346f0fcb4e92b84d95dcc" translate="yes">
          <source>An array of observed attribute names for the custom element, derived by transforming input property names from the source component.</source>
          <target state="translated">ソースコンポーネントから入力プロパティ名を変換することにより導出された、カスタム要素の観察された属性名の配列。</target>
        </trans-unit>
        <trans-unit id="7afefdc87251682711b749d3eb9ba8e9cbe0656a" translate="yes">
          <source>An array of string control names, e.g. &lt;code&gt;['address', 'street']&lt;/code&gt;</source>
          <target state="translated">文字列コントロール名の配列、たとえば &lt;code&gt;['address', 'street']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b76cbac2f90bdb301d7a2818c80e539a3c7976c" translate="yes">
          <source>An array of style files to add to the global context of the project. Angular CLI supports CSS imports and all major CSS preprocessors: &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass/scss&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;, and &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt;. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">プロジェクトのグローバルコンテキストに追加するスタイルファイルの配列。 Angular CLIは、CSSインポートとすべての主要なCSSプリプロセッサー&lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass / scss&lt;/a&gt; 、 &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt; 、および&lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylusを&lt;/a&gt;サポートします。 詳細については、以下の&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;スタイルとスクリプトの構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e27d63f99fc67d312604ea9ee9c6b65762ab5602" translate="yes">
          <source>An array that the router interprets as a routing instruction. You can bind that array to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; or pass the array as an argument to the &lt;code&gt;Router.navigate&lt;/code&gt; method.</source>
          <target state="translated">ルーターがルーティング命令として解釈する配列。 その配列を &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; にバインドするか、その配列を引数として &lt;code&gt;Router.navigate&lt;/code&gt; メソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="861576caffeca135d6970293ddc50aeae0da4952" translate="yes">
          <source>An asterisk (*), to use auto-styling, where styles are derived from the element being animated and applied to the animation when it starts.</source>
          <target state="translated">自動スタイルを使用するためのアスタリスク（*）。スタイルは、アニメーション化される要素から派生し、開始時にアニメーションに適用されます。</target>
        </trans-unit>
        <trans-unit id="85c093ac8ffcfa867935ecc8abfeb1ece5cb34f9" translate="yes">
          <source>An asterisk &lt;code&gt;*&lt;/code&gt; or &lt;em&gt;wildcard&lt;/em&gt; matches any animation state. This is useful for defining transitions that apply regardless of the HTML element's start or end state.</source>
          <target state="translated">アスタリスク &lt;code&gt;*&lt;/code&gt; または&lt;em&gt;ワイルドカードは&lt;/em&gt; 、すべてのアニメーション状態に一致します。 これは、HTML要素の開始状態または終了状態に関係なく適用される遷移を定義するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d2c79a074e3226945b2f718538f0cac88a9d5cd4" translate="yes">
          <source>An async &lt;code&gt;beforeEach()&lt;/code&gt; that compiles the components</source>
          <target state="translated">コンポーネントをコンパイルする非同期 &lt;code&gt;beforeEach()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b30c39a90b9eb055d07e0fe54a86ab3c86a6eda9" translate="yes">
          <source>An attribute directive minimally requires building a controller class annotated with &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, which specifies the selector that identifies the attribute. The controller class implements the desired directive behavior.</source>
          <target state="translated">属性ディレクティブでは、属性を識別するセレクターを指定する &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; アノテーションが付けられたコントローラークラスの構築が最低限必要です。 コントローラークラスは、目的のディレクティブ動作を実装します。</target>
        </trans-unit>
        <trans-unit id="abe92ff3d2c0bf40f87b15fcf882a5d02f6a804f" translate="yes">
          <source>An attribute directive that updates styles for the containing HTML element. Sets one or more style properties, specified as colon-separated key-value pairs. The key is a style name, with an optional &lt;code&gt;.&amp;lt;unit&amp;gt;&lt;/code&gt; suffix (such as 'top.px', 'font-style.em'). The value is an expression to be evaluated. The resulting non-null value, expressed in the given unit, is assigned to the given style property. If the result of evaluation is null, the corresponding style is removed.</source>
          <target state="translated">含まれているHTML要素のスタイルを更新する属性ディレクティブ。 コロン区切りのキーと値のペアとして指定された、1つ以上のスタイルプロパティを設定します。 キーはスタイル名で、オプションの &lt;code&gt;.&amp;lt;unit&amp;gt;&lt;/code&gt; 接尾辞（ 'top.px'、 'font-style.em'など）が付いています。 値は評価される式です。 結果のnull以外の値は、指定された単位で表され、指定されたスタイルプロパティに割り当てられます。 評価の結果がnullの場合、対応するスタイルは削除されます。</target>
        </trans-unit>
        <trans-unit id="00708a626fb7b0f03fc253c32c37767743db5166" translate="yes">
          <source>An element property between enclosing square brackets identifies the target property. The target property in the following code is the image element's &lt;code&gt;src&lt;/code&gt; property.</source>
          <target state="translated">角括弧で囲まれた要素プロパティは、ターゲットプロパティを識別します。 次のコードのターゲットプロパティは、画像要素の &lt;code&gt;src&lt;/code&gt; プロパティです。</target>
        </trans-unit>
        <trans-unit id="9b24495f5005b7c33475d93c0b8c85637f99d1d3" translate="yes">
          <source>An element that would be a shadow DOM host in native encapsulation has a generated &lt;code&gt;_nghost&lt;/code&gt; attribute. This is typically the case for component host elements.</source>
          <target state="translated">ネイティブカプセル化のシャドウDOMホストになる要素には、 &lt;code&gt;_nghost&lt;/code&gt; 属性が生成されます。 これは通常、コンポーネントホスト要素の場合です。</target>
        </trans-unit>
        <trans-unit id="3f8c815124d91c2fc5997a18a121c1e43c5849b4" translate="yes">
          <source>An element within a component's view has a &lt;code&gt;_ngcontent&lt;/code&gt; attribute that identifies to which host's emulated shadow DOM this element belongs.</source>
          <target state="translated">コンポーネントのビュー内の要素には、この要素が属するホストのエミュレートされたシャドウDOMを識別する &lt;code&gt;_ngcontent&lt;/code&gt; 属性があります。</target>
        </trans-unit>
        <trans-unit id="50e94825f745e933e83821947b32eef815608bd5" translate="yes">
          <source>An empty programmatic controller for reusable animations. Used internally when animations are disabled, to avoid checking for the null case when an animation player is expected.</source>
          <target state="translated">再利用可能なアニメーション用の空のプログラムコントローラ。 アニメーションが無効になっているときに内部的に使用され、アニメーションプレーヤーが予期される場合にnullケースのチェックを回避します。</target>
        </trans-unit>
        <trans-unit id="ed30450a13cb9d35e8439583113edc0ba728506e" translate="yes">
          <source>An encapsulation policy for the template and CSS styles. One of:</source>
          <target state="translated">テンプレートおよびCSSスタイルのカプセル化ポリシー。 の一つ：</target>
        </trans-unit>
        <trans-unit id="c0d78d1758f0450a2a872695da025c9d5f74b2f8" translate="yes">
          <source>An end-to-end (e2e) framework for Angular apps. Built on top of &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJS&lt;/a&gt;.</source>
          <target state="translated">Angularアプリ用のエンドツーエンド（e2e）フレームワーク。 &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJSの&lt;/a&gt;上に構築されています。</target>
        </trans-unit>
        <trans-unit id="21691cd602a408abe7003eba565465e96100654c" translate="yes">
          <source>An end-to-end test project (in the e2e subfolder).</source>
          <target state="translated">エンドツーエンドのテストプロジェクト（e2eサブフォルダー内）。</target>
        </trans-unit>
        <trans-unit id="af60cca801f9270a2ac760cef8104b5168df0bab" translate="yes">
          <source>An entry component is any component that Angular loads &lt;em&gt;imperatively&lt;/em&gt; by type.</source>
          <target state="translated">エントリコンポーネントは、Angularがタイプ別に&lt;em&gt;命令的に&lt;/em&gt;ロードするコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="520ebcf19ed2e8582e1e23356f207f7c8557c18b" translate="yes">
          <source>An entry component is any component that Angular loads imperatively, (which means you&amp;rsquo;re not referencing it in the template), by type. You specify an entry component by bootstrapping it in an NgModule, or including it in a routing definition.</source>
          <target state="translated">エントリコンポーネントとは、Angularが型ごとに命令的にロードする（テンプレートで参照しないことを意味する）コンポーネントです。 エントリコンポーネントを指定するには、NgModuleにブートストラップするか、ルーティング定義に含めます。</target>
        </trans-unit>
        <trans-unit id="82270f943c0fc2fd25dd54fa68af7719850dddec" translate="yes">
          <source>An event emitted when a new version of the app has been downloaded and activated.</source>
          <target state="translated">アプリの新しいバージョンがダウンロードおよびアクティブ化されたときに発行されるイベント。</target>
        </trans-unit>
        <trans-unit id="48d381a39eba1f1a2428a868079d462a7aeb50e8" translate="yes">
          <source>An event emitted when a new version of the app is available.</source>
          <target state="translated">アプリの新しいバージョンが利用可能になったときに発行されるイベント。</target>
        </trans-unit>
        <trans-unit id="5f859b22e49aae9499ff79db84034121aa16f513" translate="yes">
          <source>An event indicating that the request was sent to the server. Useful when a request may be retried multiple times, to distinguish between retries on the final event stream.</source>
          <target state="translated">要求がサーバーに送信されたことを示すイベント。 最終イベントストリームでの再試行を区別するために、リクエストが複数回再試行される場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9f03c6d306c2112882c6a9ff7babb869d7b460be" translate="yes">
          <source>An event stream for routing events in this NgModule.</source>
          <target state="translated">このNgModuleでイベントをルーティングするためのイベントストリーム。</target>
        </trans-unit>
        <trans-unit id="3d7eb391832c5ed9e7dbb68d3c82c8ad415923bf" translate="yes">
          <source>An event triggered at the end of the Guard phase of routing.</source>
          <target state="translated">ルーティングのGuardフェーズの終わりにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="b5a43600d43e0d7f206b35a9f776d6d2f3d76290" translate="yes">
          <source>An event triggered at the end of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの解決フェーズの終わりにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="fe8df6a007856d3efe69109b534e4f1717bb8417" translate="yes">
          <source>An event triggered at the end of the activation part of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの解決フェーズのアクティブ化部分の終わりにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="7c5dc3b5c6dd3914c069ea105811ad81563ab0a4" translate="yes">
          <source>An event triggered at the end of the child-activation part of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの解決フェーズの子アクティブ化部分の終わりにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="15f0a189e2487ac88e2d4db8817074ffbe2aa465" translate="yes">
          <source>An event triggered at the start of the Guard phase of routing.</source>
          <target state="translated">ルーティングのGuardフェーズの開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="c5e5ee18107806be14081a1525e3498a3843b09e" translate="yes">
          <source>An event triggered at the start of the activation part of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの解決フェーズのアクティベーション部分の開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="9ea7570ad5b425b7d9a9e4e2875bb8e236c63db8" translate="yes">
          <source>An event triggered at the start of the child-activation part of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの解決フェーズの子アクティベーション部分の開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="8df532e1a0fd9fd1688012d2fd01b43742a57d58" translate="yes">
          <source>An event triggered at the the start of the Resolve phase of routing.</source>
          <target state="translated">ルーティングの解決フェーズの開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="253d4698f507f43fb4f138e171a5603c169e6b04" translate="yes">
          <source>An event triggered before lazy loading a route configuration.</source>
          <target state="translated">ルート構成の遅延読み込みの前にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="76c49a5cb92ffd70c824965b9f42fd4ce45e7e75" translate="yes">
          <source>An event triggered by scrolling.</source>
          <target state="translated">スクロールによってトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="ce7314f14718cef6d4f51d25b4d25720245fbf87" translate="yes">
          <source>An event triggered when a navigation ends successfully.</source>
          <target state="translated">ナビゲーションが正常に終了したときにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="1ee0707fd824da0de403c96b737123ba95a464d8" translate="yes">
          <source>An event triggered when a navigation fails due to an unexpected error.</source>
          <target state="translated">予期しないエラーが原因でナビゲーションが失敗したときにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="4238fb65031dc9605ba87d9f0fff4bf6e9d4cbd3" translate="yes">
          <source>An event triggered when a navigation is canceled, directly or indirectly.</source>
          <target state="translated">ナビゲーションが直接または間接的にキャンセルされたときにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="33bb43f2f8b4617aa8b509c9aa64c24d761d2224" translate="yes">
          <source>An event triggered when a navigation starts.</source>
          <target state="translated">ナビゲーションの開始時にトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="22293e5381cfc4742bf52876ed6736a5a5826956" translate="yes">
          <source>An event triggered when a route has been lazy loaded.</source>
          <target state="translated">ルートが遅延ロードされたときにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="55363e49b885f6858dfa81382ac98d5cf71873c4" translate="yes">
          <source>An event triggered when routes are recognized.</source>
          <target state="translated">ルートが認識されたときにトリガーされるイベント。</target>
        </trans-unit>
        <trans-unit id="7e1901e8c0041a6d1ea4f1605828d40b98b1883e" translate="yes">
          <source>An example of a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;MyCustomComponent&lt;/code&gt; class, which in JavaScript is be represented by the &lt;code&gt;MyCustomComponent&lt;/code&gt; constructor function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; の例は &lt;code&gt;MyCustomComponent&lt;/code&gt; クラスで、JavaScriptでは &lt;code&gt;MyCustomComponent&lt;/code&gt; コンストラクター関数で表されます。</target>
        </trans-unit>
        <trans-unit id="1d5adc14822f75158d6c5cd26073d6f3aa532ea8" translate="yes">
          <source>An example of what goes into a declarations array follows:</source>
          <target state="translated">宣言配列の内容の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="8f997a90370a05fd947363bc944f2091bb627c9b" translate="yes">
          <source>An execution context for a set of asynchronous tasks. Useful for debugging, profiling, and testing apps that include asynchronous operations such as event processing, promises, and calls to remote servers.</source>
          <target state="translated">非同期タスクのセットの実行コンテキスト。 イベント処理、プロミス、リモートサーバーへの呼び出しなどの非同期操作を含むアプリのデバッグ、プロファイリング、テストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="13b6181d7b35ce64a903a0013d72e45b403c9e64" translate="yes">
          <source>An expression may also refer to properties of the &lt;em&gt;template's&lt;/em&gt; context such as a template input variable,</source>
          <target state="translated">式は、テンプレート入力変数など、 &lt;em&gt;テンプレートの&lt;/em&gt;コンテキストのプロパティを参照する場合もあります。</target>
        </trans-unit>
        <trans-unit id="abc3de7d68044167c106cb4666b4476c9f78e7e9" translate="yes">
          <source>An expression that describes a state change.</source>
          <target state="translated">状態の変化を記述する式。</target>
        </trans-unit>
        <trans-unit id="4e9dd8fe2f87c25f59015739842c4048179f4a27" translate="yes">
          <source>An icon to use for this application in the bookmark bar.</source>
          <target state="translated">ブックマークバーでこのアプリケーションに使用するアイコン。</target>
        </trans-unit>
        <trans-unit id="010b45774596984624a0a539cd324f8a04170e87" translate="yes">
          <source>An identifying name for the new element, unique within the namespace.</source>
          <target state="translated">名前空間内で一意の、新しい要素の識別名。</target>
        </trans-unit>
        <trans-unit id="2f2a84b30278a5736d58839d9cbed284d382fee8" translate="yes">
          <source>An identifying string.</source>
          <target state="translated">識別文字列。</target>
        </trans-unit>
        <trans-unit id="f26b26e037d4dafb2598887c06f9e13ff1dada92" translate="yes">
          <source>An implementation of &lt;code&gt;preload&lt;/code&gt; must return an &lt;code&gt;Observable&lt;/code&gt;. If the route should preload, it returns the observable returned by calling the loader function. If the route should &lt;em&gt;not&lt;/em&gt; preload, it returns an &lt;code&gt;Observable&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;preload&lt;/code&gt; の実装は &lt;code&gt;Observable&lt;/code&gt; を返さなければなりません。 ルートがプリロードする必要がある場合、ローダー関数を呼び出して返されるオブザーバブルを返します。 ルートがプリロードされるべきでは&lt;em&gt;ない&lt;/em&gt;場合、 &lt;code&gt;null&lt;/code&gt; の &lt;code&gt;Observable&lt;/code&gt; を返します 。</target>
        </trans-unit>
        <trans-unit id="34f205e2b23ffe79df4ed0d6614e52beb270510e" translate="yes">
          <source>An important alert.</source>
          <target state="translated">重要なアラート。</target>
        </trans-unit>
        <trans-unit id="7a0aa966364fd27e3f5561134e767a3d22292508" translate="yes">
          <source>An important part of inter-linking dependencies is linking the two main modules together. This is where &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; comes in. Use it to create an AngularJS module&amp;mdash;one that you can use as a dependency in your main AngularJS module&amp;mdash;that will bootstrap your main Angular module and kick off the Angular part of the hybrid app. In a sense, it &quot;downgrades&quot; an Angular module to an AngularJS module.</source>
          <target state="translated">相互リンクの依存関係の重要な部分は、2つのメインモジュールをリンクすることです。 これが &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 出番です。これを使用して、メインのAngularJSモジュールの依存関係として使用できる、AngularJSモジュールを作成します。 ある意味では、AngularモジュールをAngularJSモジュールに「ダウングレード」します。</target>
        </trans-unit>
        <trans-unit id="ab48629b7689b97b24ca0b4882d2d3231b1a3b2b" translate="yes">
          <source>An important point</source>
          <target state="translated">重要なポイント</target>
        </trans-unit>
        <trans-unit id="ed53c740060de1f8ed241d39eeda4823a21a4860" translate="yes">
          <source>An impure</source>
          <target state="translated">不純</target>
        </trans-unit>
        <trans-unit id="12aba83ea86ac796e838bb36582bc62046067932" translate="yes">
          <source>An impure caching pipe</source>
          <target state="translated">不純なキャッシングパイプ</target>
        </trans-unit>
        <trans-unit id="1ea978cb2e1e36fb4a70cc831345c53ddda16051" translate="yes">
          <source>An initial skeleton app project, also called &lt;code&gt;angular-tour-of-heroes&lt;/code&gt; (in the &lt;code&gt;src&lt;/code&gt; subfolder).</source>
          <target state="translated">初期のスケルトンアプリプロジェクト。 &lt;code&gt;angular-tour-of-heroes&lt;/code&gt; とも呼ばれます（ &lt;code&gt;src&lt;/code&gt; サブフォルダー内）。</target>
        </trans-unit>
        <trans-unit id="684d4fd3e575d1f3658b87fda7811795222f7d50" translate="yes">
          <source>An injectable &lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt; for gesture recognition. Configures specific event recognition.</source>
          <target state="translated">ジェスチャ認識用の注入可能な&lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJSマネージャー&lt;/a&gt; 。 特定のイベント認識を設定します。</target>
        </trans-unit>
        <trans-unit id="e57404a3f8f2b06b4a9a8d4c525e78bb9596739f" translate="yes">
          <source>An injectable service for executing work inside or outside of the Angular zone.</source>
          <target state="translated">Angularゾーンの内部または外部で作業を実行するための注入可能なサービス。</target>
        </trans-unit>
        <trans-unit id="14d3b55eeed336a9ad62e5019f3e2718f4231406" translate="yes">
          <source>An injectable service that produces an animation sequence programmatically within an Angular component or directive. Provided by the &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントまたはディレクティブ内でプログラムによってアニメーションシーケンスを生成する注入可能なサービス。 &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt; によって提供されます。</target>
        </trans-unit>
        <trans-unit id="0cc6e94c0fa46ea1d4f9498c818950af4fca8285" translate="yes">
          <source>An injectable service that produces an animation sequence programmatically within an Angular component or directive. Provided by the &lt;code&gt;&lt;a href=&quot;platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントまたはディレクティブ内でプログラムによってアニメーションシーケンスを生成する注入可能なサービス。 &lt;code&gt;&lt;a href=&quot;platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt; によって提供されます。</target>
        </trans-unit>
        <trans-unit id="36689b6e9bdc70cc4224cf76d38b74712cd514ab" translate="yes">
          <source>An injectable service that provides event management for Angular through a browser plug-in.</source>
          <target state="translated">ブラウザプラグインを介してAngularのイベント管理を提供する注入可能なサービス。</target>
        </trans-unit>
        <trans-unit id="77754ebc786ee25c6412a201040016a7021c3eb2" translate="yes">
          <source>An injectable service that provides factory methods for creating control instances.</source>
          <target state="translated">コントロールインスタンスを作成するためのファクトリメソッドを提供する注入可能なサービス。</target>
        </trans-unit>
        <trans-unit id="b6db0da0e2ea0ddb022d862a7cffe1db1b964118" translate="yes">
          <source>An injection token. (Typically an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, but can be &lt;code&gt;any&lt;/code&gt;).</source>
          <target state="translated">インジェクショントークン。 （通常は &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; のインスタンスですが、 &lt;code&gt;any&lt;/code&gt; でも かまい ません ）。</target>
        </trans-unit>
        <trans-unit id="c26157bc44c92eb491ad786930dfb1f795c4cbb9" translate="yes">
          <source>An injection token. Typically an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, but can be &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">インジェクショントークン。 通常は &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; のインスタンスですが、 &lt;code&gt;any&lt;/code&gt; インスタンスでもかまい ません 。</target>
        </trans-unit>
        <trans-unit id="652138f88939ea014fbae7aa304e8948053f1891" translate="yes">
          <source>An injector creates dependencies, and maintains a &lt;em&gt;container&lt;/em&gt; of dependency instances that it reuses if possible.</source>
          <target state="translated">インジェクターは依存関係を作成し、可能であれば再利用する依存関係インスタンスの&lt;em&gt;コンテナー&lt;/em&gt;を維持します。</target>
        </trans-unit>
        <trans-unit id="9e27f51512e0a5635f6bf58fdb2c50c6038e307e" translate="yes">
          <source>An injector provides a singleton instance of a dependency, and can inject this same instance in multiple components.</source>
          <target state="translated">インジェクターは、依存関係のシングルトンインスタンスを提供し、この同じインスタンスを複数のコンポーネントにインジェクトでき​​ます。</target>
        </trans-unit>
        <trans-unit id="cb056887b035ea4cad1a0a3629cae07df2758572" translate="yes">
          <source>An inline template for an Angular component. If provided, do not supply a template file using &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントのインラインテンプレート。 指定されている場合、templateUrlを使用してテンプレートファイルを提供しないで &lt;code&gt;templateUrl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12722bfa1da4de0ba2c43d261a9de445ffeefb87" translate="yes">
          <source>An instance of this class is returned as an event parameter when an animation callback is captured for an animation either during the start or done phase.</source>
          <target state="translated">このクラスのインスタンスは、開始または終了フェーズのいずれかでアニメーションのアニメーションコールバックがキャプチャされると、イベントパラメーターとして返されます。</target>
        </trans-unit>
        <trans-unit id="816e6be2b2fa74b464d5b2a881dae8af20cb83e3" translate="yes">
          <source>An interceptor that alters headers can be used for a number of different operations, including:</source>
          <target state="translated">ヘッダーを変更するインターセプターは、次のようなさまざまな操作に使用できます。</target>
        </trans-unit>
        <trans-unit id="9146ec3aa23e8cf25a3395bbb20839d604c7a736" translate="yes">
          <source>An interface for defining a class that the router should call first to check if the lazy loaded module should be loaded. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">遅延ロードモジュールをロードする必要があるかどうかを確認するためにルーターが最初に呼び出すクラスを定義するためのインターフェイス。 boolean | UrlTreeまたはboolean | UrlTreeに解決されるObservable / Promiseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="6a938b52cef6ce82227e8252bf81a0112ba711aa" translate="yes">
          <source>An interface for defining a class that the router should call first to determine if it should activate the child route. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">子ルートをアクティブ化する必要があるかどうかを判断するためにルーターが最初に呼び出すクラスを定義するためのインターフェイス。 boolean | UrlTreeまたはboolean | UrlTreeに解決されるObservable / Promiseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="000a11bfba255074626058505b1d21f8b78bbe21" translate="yes">
          <source>An interface for defining a class that the router should call first to determine if it should activate this component. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">このコンポーネントをアクティブにする必要があるかどうかを判断するためにルーターが最初に呼び出すクラスを定義するためのインターフェース。 boolean | UrlTreeまたはboolean | UrlTreeに解決されるObservable / Promiseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="b4e8a5b77f471bb6811774face810e9cbf43b14d" translate="yes">
          <source>An interface for defining a class that the router should call first to determine if it should deactivate this component after a navigation. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">ナビゲーション後にこのコンポーネントを非アクティブ化する必要があるかどうかを決定するためにルーターが最初に呼び出す必要があるクラスを定義するためのインターフェイス。 boolean | UrlTreeまたはboolean | UrlTreeに解決されるObservable / Promiseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="3e995f1eb4c099a6b16ff48012d56d513be3a14a" translate="yes">
          <source>An interface for defining a class that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</source>
          <target state="translated">ルートをレンダリングする前にルートデータを解決するためにルーターが最初に呼び出す必要があるクラスを定義するためのインターフェイス。 値または値に解決されるObservable / Promiseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="82597c22511f52de70969beecef4f3b3898eaa24" translate="yes">
          <source>An interface implemented by &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブによって実装されるインターフェイス。</target>
        </trans-unit>
        <trans-unit id="1a14f9da95e6f6ff982b6626eb7c8628c5efdd37" translate="yes">
          <source>An interface implemented by &lt;code&gt;&lt;a href=&quot;forms/formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブによって実装されるインターフェイス。</target>
        </trans-unit>
        <trans-unit id="8335c6297a5a6cba86cf2d3d45984a8f36d407fb" translate="yes">
          <source>An interface implemented by all Angular type decorators, which allows them to be used as decorators as well as Angular syntax.</source>
          <target state="translated">すべてのAngularタイプのデコレータによって実装されたインターフェイス。これにより、Angular構文だけでなくデコレータとしても使用できます。</target>
        </trans-unit>
        <trans-unit id="3251b8b344b69e19ad57135081e0c24c46b50288" translate="yes">
          <source>An interface implemented by classes that perform asynchronous validation.</source>
          <target state="translated">非同期検証を実行するクラスによって実装されるインターフェイス。</target>
        </trans-unit>
        <trans-unit id="245737c8ad1fc4ff34dc1309e4af6d2a74cb1268" translate="yes">
          <source>An interface implemented by classes that perform synchronous validation.</source>
          <target state="translated">同期検証を実行するクラスによって実装されるインターフェイス。</target>
        </trans-unit>
        <trans-unit id="3553332395db0f3216b86aa5d6d3855e57638927" translate="yes">
          <source>An interface that a function passed into &lt;a href=&quot;core/forwardref&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; has to implement.</source>
          <target state="translated">&lt;a href=&quot;core/forwardref&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; に&lt;/a&gt;渡された関数が実装しなければならないインターフェース。</target>
        </trans-unit>
        <trans-unit id="27ca29f9f070d1b99e4a907d433e49c3c9473f07" translate="yes">
          <source>An interface that a function passed into &lt;a href=&quot;forwardref&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; has to implement.</source>
          <target state="translated">&lt;a href=&quot;forwardref&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; に&lt;/a&gt;渡された関数が実装しなければならないインターフェース。</target>
        </trans-unit>
        <trans-unit id="bbe82c81f390998fc2ac12e6a34f4c68ebf29846" translate="yes">
          <source>An interface that allows you to tap into the lifecycle of &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt; and &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt; as they are created, updated, and destroyed.</source>
          <target state="translated">&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;と&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;が作成、更新、および破棄されるときに、それらのライフサイクルを活用できるインターフェイス。</target>
        </trans-unit>
        <trans-unit id="d84af51a9faa209f199da3634be1aa93a907fb58" translate="yes">
          <source>An interface that is implemented by pipes in order to perform a transformation. Angular invokes the &lt;code&gt;transform&lt;/code&gt; method with the value of a binding as the first argument, and any parameters as the second argument in list form.</source>
          <target state="translated">変換を実行するためにパイプによって実装されるインターフェース。 Angularは、リスト形式で、バインディングの値を最初の引数として、パラメーターを2番目の引数として &lt;code&gt;transform&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="c36481e852a7d993e92e4ce11d6b4beef0f3fdd1" translate="yes">
          <source>An internal callback method triggered before the instance is destroyed. Removes the group from its parent group.</source>
          <target state="translated">インスタンスが破棄される前にトリガーされる内部コールバックメソッド。 親グループからグループを削除します。</target>
        </trans-unit>
        <trans-unit id="b7240884a65be7f42acffdd93220a4238efbb924" translate="yes">
          <source>An internal callback method triggered on the instance after the inputs are set. Registers the group with its parent group.</source>
          <target state="translated">入力が設定された後にインスタンスでトリガーされる内部コールバックメソッド。 グループをその親グループに登録します。</target>
        </trans-unit>
        <trans-unit id="459b33ae0fa271dad1c7cca97ee631d68755d38d" translate="yes">
          <source>An internal resolved representation of a &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; used by the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; によって使用される &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; の内部解決された表現。</target>
        </trans-unit>
        <trans-unit id="1d15a7d32fabd101f937535387a49e1f6c6b6998" translate="yes">
          <source>An internal resolved representation of a &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; used by the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; によって使用される &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; の内部解決された表現。</target>
        </trans-unit>
        <trans-unit id="65e2c36a1d8f607a0d4bae22e070ff4a3a76b579" translate="yes">
          <source>An internal resolved representation of a factory function created by resolving &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; の解決によって作成されたファクトリ関数の内部解決表現。</target>
        </trans-unit>
        <trans-unit id="46810c6b6144599b1f85ccf176d9da78c21a7d6f" translate="yes">
          <source>An internal resolved representation of a factory function created by resolving &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; の解決によって作成されたファクトリ関数の内部解決表現。</target>
        </trans-unit>
        <trans-unit id="fc05d68b0ca26dd2f9ba579fc3670a3efd223e13" translate="yes">
          <source>An introduction to a few core router concepts will help orient you to the details that follow.</source>
          <target state="translated">いくつかのコアルーターの概念を紹介すると、以下の詳細を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c5fc8580ca92e73035b10dc5866e8d34b5b6db8c" translate="yes">
          <source>An object containing JavaScript script files to add to the global context of the project. The scripts are loaded exactly as if you had added them in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside &lt;code&gt;index.html&lt;/code&gt;. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">プロジェクトのグローバルコンテキストに追加するJavaScriptスクリプトファイルを含むオブジェクト。 スクリプトは、 &lt;code&gt;index.html&lt;/code&gt; 内の &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグに追加した場合とまったく同じようにロードされます。 詳細については、以下の&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;スタイルとスクリプトの構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0798b0518cd85723d5bc73026ce32f7acc7ee37e" translate="yes">
          <source>An object containing an identifier for the app to transition. The ID must match between the client and server versions of the app.</source>
          <target state="translated">遷移するアプリの識別子を含むオブジェクト。 IDは、アプリのクライアントバージョンとサーバーバージョン間で一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="34a705cd2ace4927bf00eb0c703ea16e82b4ece4" translate="yes">
          <source>An object containing any errors generated by failing validation, or null if there are no errors.</source>
          <target state="translated">検証の失敗によって生成されたエラーを含むオブジェクト。エラーがない場合はnull。</target>
        </trans-unit>
        <trans-unit id="c8e4c11b42659fb04de7da11d6fd9484b2d147cb" translate="yes">
          <source>An object containing files and their compile-time replacements. See more in &lt;a href=&quot;build#configure-target-specific-file-replacements&quot;&gt;Configure target-specific file replacements&lt;/a&gt;.</source>
          <target state="translated">ファイルとそのコンパイル時の置換を含むオブジェクト。 詳しくは、 &lt;a href=&quot;build#configure-target-specific-file-replacements&quot;&gt;ターゲット固有のファイル置換の構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dc0d6006c1674c97b20fc570175b89cf3a3b1ef7" translate="yes">
          <source>An object containing option-value pairs to pass to style preprocessors. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">スタイルプリプロセッサに渡すオプションと値のペアを含むオブジェクト。 詳細については、以下の&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;スタイルとスクリプトの構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8b744df23ce437f3884fe3ab329fc10884f3b60c" translate="yes">
          <source>An object containing paths to static assets to add to the global context of the project. The default paths point to the project's icon file and its &lt;code&gt;assets&lt;/code&gt; folder. See more in &lt;a href=&quot;workspace-config#asset-config&quot;&gt;Assets configuration&lt;/a&gt; below.</source>
          <target state="translated">プロジェクトのグローバルコンテキストに追加する静的アセットへのパスを含むオブジェクト。 デフォルトのパスは、プロジェクトのアイコンファイルとその &lt;code&gt;assets&lt;/code&gt; フォルダーを指します。 詳細については、以下の&lt;a href=&quot;workspace-config#asset-config&quot;&gt;アセット構成を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="454bf511ebc9e0613519ea5b260dc6ce1bee629f" translate="yes">
          <source>An object containing properties that modify the navigation strategy. The function ignores any properties in the &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; that would change the provided URL.</source>
          <target state="translated">ナビゲーション戦略を変更するプロパティを含むオブジェクト。 この関数は、指定されたURLを変更する &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; のプロパティを無視します。</target>
        </trans-unit>
        <trans-unit id="6f909378a9aeab923299b7bb339184fd3aef25aa" translate="yes">
          <source>An object containing the &lt;code&gt;serverPublicKey&lt;/code&gt; string.</source>
          <target state="translated">&lt;code&gt;serverPublicKey&lt;/code&gt; 文字列を含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5f857b8189df6a05941e1ba626bb7cbf578f2264" translate="yes">
          <source>An object describing the changes in the &lt;code&gt;Iterable&lt;/code&gt; collection since last time &lt;code&gt;&lt;a href=&quot;core/iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; が最後に呼び出されてからの &lt;code&gt;Iterable&lt;/code&gt; コレクションの変更を説明するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8c315ec84a38122ef7c3d9a113c4504cd2522faa" translate="yes">
          <source>An object describing the changes in the &lt;code&gt;Iterable&lt;/code&gt; collection since last time &lt;code&gt;&lt;a href=&quot;iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; が最後に呼び出されてからの &lt;code&gt;Iterable&lt;/code&gt; コレクションの変更を説明するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5a1b257dd7d2442d3adda69d2fa3d7cdd2995179" translate="yes">
          <source>An object describing the changes in the &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{[k:string]: string}&lt;/code&gt; since last time &lt;code&gt;&lt;a href=&quot;core/keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; が最後に呼び出されてからの &lt;code&gt;Map&lt;/code&gt; または &lt;code&gt;{[k:string]: string}&lt;/code&gt; の変更を記述するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6ac36e997ec5fd21bda35b2901d01da4f1df4548" translate="yes">
          <source>An object describing the changes in the &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{[k:string]: string}&lt;/code&gt; since last time &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; が最後に呼び出されてからの &lt;code&gt;Map&lt;/code&gt; または &lt;code&gt;{[k:string]: string}&lt;/code&gt; の変更を記述するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="0f356d25ccaadcbb052958e84e4c538216b2666e" translate="yes">
          <source>An object in the Angular &lt;a href=&quot;glossary#dependency-injection&quot;&gt;dependency-injection&lt;/a&gt; system that can find a named dependency in its cache or create a dependency using a configured &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;. Injectors are created for NgModules automatically as part of the bootstrap process and are inherited through the component hierarchy.</source>
          <target state="translated">キャッシュ内の名前付き依存関係を見つけるか、構成された&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;を使用して依存関係を作成できる、Angular &lt;a href=&quot;glossary#dependency-injection&quot;&gt;依存関係注入&lt;/a&gt;システム内のオブジェクト。 インジェクターは、ブートストラッププロセスの一部としてNgModulesに対して自動的に作成され、コンポーネント階層を通じて継承されます。</target>
        </trans-unit>
        <trans-unit id="cc3b15aff9557888b414af3f20c881c83fc21164" translate="yes">
          <source>An object of configuration options</source>
          <target state="translated">構成オプションのオブジェクト</target>
        </trans-unit>
        <trans-unit id="55a40c09435669e6d09baa4867c14de1eba936e3" translate="yes">
          <source>An object passed to the &lt;code&gt;subscribe()&lt;/code&gt; method for an &lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt;. The object defines the callbacks for the &lt;a href=&quot;glossary#subscriber&quot;&gt;subscriber&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#observable&quot;&gt;observableの&lt;/a&gt; &lt;code&gt;subscribe()&lt;/code&gt; メソッドに渡されるオブジェクト。 オブジェクトは、 &lt;a href=&quot;glossary#subscriber&quot;&gt;サブスクライバ&lt;/a&gt;のコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="91849ac8b00c354cb7ee440dea61bd355a282235" translate="yes">
          <source>An object that can specify either or both cookie name or header name.</source>
          <target state="translated">Cookie名またはヘッダー名のいずれかまたは両方を指定できるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e59674c185a2660e9ab9f2a6044d9674f4444c9e" translate="yes">
          <source>An object that implements one of the &lt;a href=&quot;../api/core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt; interfaces. A provider object defines how to obtain an injectable dependency associated with a &lt;a href=&quot;glossary#token&quot;&gt;DI token&lt;/a&gt;. An &lt;a href=&quot;glossary#injector&quot;&gt;injector&lt;/a&gt; uses the provider to create a new instance of a dependency for a class that requires it.</source>
          <target state="translated">&lt;a href=&quot;../api/core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt;インターフェイスの1つを実装するオブジェクト。 プロバイダオブジェクトは、 &lt;a href=&quot;glossary#token&quot;&gt;DIトークンに&lt;/a&gt;関連付けられた注入可能な依存関係を取得する方法を定義します 。 &lt;a href=&quot;glossary#injector&quot;&gt;インジェクター&lt;/a&gt;はプロバイダーを使用して、それを必要とするクラスの依存関係の新しいインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="882038f9e81095e5a1e8b2e8ac4378d8a2d5727e" translate="yes">
          <source>An object that provides parent context for this element. Often an ancestor component instance that governs this element.</source>
          <target state="translated">この要素の親コンテキストを提供するオブジェクト。 多くの場合、この要素を制御する先祖コンポーネントインスタンス。</target>
        </trans-unit>
        <trans-unit id="c4b1689270e4d44ba822baf6c09fa4f36f7e04ec" translate="yes">
          <source>An observable can deliver multiple values of any type&amp;mdash;literals, messages, or events, depending on the context. The API for receiving values is the same whether the values are delivered synchronously or asynchronously. Because setup and teardown logic are both handled by the observable, your application code only needs to worry about subscribing to consume values, and when done, unsubscribing. Whether the stream was keystrokes, an HTTP response, or an interval timer, the interface for listening to values and stopping listening is the same.</source>
          <target state="translated">オブザーバブルは、コンテキストに応じて、リテラル、メッセージ、イベントなど、あらゆるタイプの複数の値を提供できます。 値を受信するためのAPIは、値が同期的または非同期的に配信される場合でも同じです。 セットアップとティアダウンのロジックはどちらもobservableによって処理されるため、アプリケーションコードは値を消費するためにサブスクライブすることと、完了するとサブスクライブ解除することだけを心配する必要があります。 ストリームがキーストローク、HTTP応答、またはインターバルタイマーのいずれであっても、値をリッスンし、リッスンを停止するためのインターフェイスは同じです。</target>
        </trans-unit>
        <trans-unit id="8f7904892d5fae208a614b0e764892eb392d2990" translate="yes">
          <source>An observable of the URL fragment shared by all the routes.</source>
          <target state="translated">すべてのルートで共有されるURLフラグメントのオブザーバブル。</target>
        </trans-unit>
        <trans-unit id="9886415c12cd9cb121b3e54e248babdfc816c0c5" translate="yes">
          <source>An observable of the URL segments matched by this route.</source>
          <target state="translated">このルートに一致するURLセグメントのオブザーバブル。</target>
        </trans-unit>
        <trans-unit id="78107a7f3c08dd96478ee59348f7bde390f4ab63" translate="yes">
          <source>An observable of the matrix parameters scoped to this route.</source>
          <target state="translated">このルートをスコープとするマトリックスパラメーターの観測可能。</target>
        </trans-unit>
        <trans-unit id="1e605d70e4839e622078c536e593bcab71033051" translate="yes">
          <source>An observable of the query parameters shared by all the routes.</source>
          <target state="translated">すべてのルートで共有されるクエリパラメーターのオブザーバブル。</target>
        </trans-unit>
        <trans-unit id="90ec32bf2447d30094892ebd1f740f9177296b34" translate="yes">
          <source>An observable of the static and resolved data of this route.</source>
          <target state="translated">このルートの静的および解決されたデータの観測可能。</target>
        </trans-unit>
        <trans-unit id="85079a71024f29fac34fa9fff342e23ac05bb053" translate="yes">
          <source>An observable produces values over time. An array is created as a static set of values. In a sense, observables are asynchronous where arrays are synchronous. In the following examples, ➞ implies asynchronous value delivery.</source>
          <target state="translated">オブザーバブルは、時間の経過とともに値を生成します。 配列は、静的な値のセットとして作成されます。 ある意味では、オブザーバブルは非同期であり、配列は同期です。 次の例では、➞は非同期の値配信を意味します。</target>
        </trans-unit>
        <trans-unit id="2b14b5c470af9577f634870ec12983a41761982f" translate="yes">
          <source>An observer object can define any combination of these handlers. If you don't supply a handler for a notification type, the observer ignores notifications of that type.</source>
          <target state="translated">オブザーバーオブジェクトは、これらのハンドラーの任意の組み合わせを定義できます。 通知タイプのハンドラーを提供しない場合、オブザーバーはそのタイプの通知を無視します。</target>
        </trans-unit>
        <trans-unit id="5588df976b6ceca9f5b806e0cfbd39a5b7ad5721" translate="yes">
          <source>An opaque identifier used for efficient table lookup. In Angular, a &lt;a href=&quot;glossary#di-token&quot;&gt;DI token&lt;/a&gt; is used to find &lt;a href=&quot;glossary#provider&quot;&gt;providers&lt;/a&gt; of dependencies in the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; system.</source>
          <target state="translated">効率的なテーブル検索に使用される不透明な識別子。 Angularでは、 &lt;a href=&quot;glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;を使用して、 &lt;a href=&quot;glossary#di&quot;&gt;依存関係注入&lt;/a&gt;システムで依存関係の&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;を見つけます 。</target>
        </trans-unit>
        <trans-unit id="893c9913a260d7efeab0a92c7090707b5d91605d" translate="yes">
          <source>An optional class to instantiate for the &lt;code&gt;token&lt;/code&gt;. By default, the &lt;code&gt;provide&lt;/code&gt; class is instantiated.</source>
          <target state="translated">&lt;code&gt;token&lt;/code&gt; 用にインスタンス化するオプションのクラス。 デフォルトでは、 &lt;code&gt;provide&lt;/code&gt; クラスがインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="e55702fe0ed268cd72f9e80ab84594f0175eac3b" translate="yes">
          <source>An optional custom strategy factory to use instead of the default. The strategy controls how the transformation is performed.</source>
          <target state="translated">デフォルトの代わりに使用するオプションのカスタム戦略ファクトリ。 戦略は、変換の実行方法を制御します。</target>
        </trans-unit>
        <trans-unit id="745e4868ae2dec2541f06bf87f21451d7d0faeb0" translate="yes">
          <source>An optional function passed into the &lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive that defines how to track changes for items in an iterable. The function takes the iteration index and item ID. When supplied, Angular tracks changes by the return value of the function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; ディレクティブに渡されるオプションの関数で、 イテラブル内のアイテムの変更を追跡する方法を定義します。 この関数は、反復インデックスとアイテムIDを受け取ります。 提供されると、Angularは関数の戻り値によって変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="81174fe66b40fa07233e7e82f826582748cde349" translate="yes">
          <source>An optional function passed into the &lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive that defines how to track changes for items in an iterable. The function takes the iteration index and item ID. When supplied, Angular tracks changes by the return value of the function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; ディレクティブに渡されるオプションの関数で、 イテラブル内のアイテムの変更を追跡する方法を定義します。 この関数は、反復インデックスとアイテムIDを受け取ります。 提供されると、Angularは関数の戻り値によって変更を追跡します。</target>
        </trans-unit>
        <trans-unit id="0799df23e9df2c8ad24df18164841277103dfbe6" translate="yes">
          <source>An options object containing a delay and developer-defined parameters that provide styling defaults and can be overridden on invocation.</source>
          <target state="translated">遅延を含むオプションオブジェクトと、スタイル設定のデフォルトを提供し、呼び出し時にオーバーライドできる開発者定義のパラメーター。</target>
        </trans-unit>
        <trans-unit id="18af9da7a490397301ba60f7e43c0ea189752510" translate="yes">
          <source>An options object containing a delay and developer-defined parameters that provide styling defaults and can be overridden on invocation. Default delay is 0.</source>
          <target state="translated">遅延を含むオプションオブジェクトと、スタイル設定のデフォルトを提供し、呼び出し時にオーバーライドできる開発者定義のパラメーター。 デフォルトの遅延は0です。</target>
        </trans-unit>
        <trans-unit id="94b7d838e156ba687705d55bf53cfaea0e2c0706" translate="yes">
          <source>An options object containing developer-defined parameters that provide styling defaults and can be overridden on invocation.</source>
          <target state="translated">スタイル設定のデフォルトを提供し、呼び出し時にオーバーライドできる開発者定義のパラメーターを含むオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="003f413ea648a113813256191625bc45b897caef" translate="yes">
          <source>An options object that can contain a delay value for the start of the animation, and additional developer-defined parameters. Provided values for additional parameters are used as defaults, and override values can be passed to the caller on invocation.</source>
          <target state="translated">アニメーションの開始の遅延値と、開発者が定義した追加のパラメーターを含むことができるオプションオブジェクト。 追加のパラメーターに指定された値はデフォルトとして使用され、呼び出し時に呼び出し側にオーバーライド値を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="69da736740d2be7cce09038dd8384329068cb27f" translate="yes">
          <source>An options object that can contain a delay value for the start of the animation, and additional override values for developer-defined parameters.</source>
          <target state="translated">アニメーションの開始の遅延値、および開発者が定義したパラメーターの追加のオーバーライド値を含むことができるオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="f2ba026d039587baf26944d77bd6fbe6191f4188" translate="yes">
          <source>An options object. Use the 'limit' field to limit the total number of items to collect.</source>
          <target state="translated">オプションオブジェクト。 「制限」フィールドを使用して、収集するアイテムの総数を制限します。</target>
        </trans-unit>
        <trans-unit id="2b8661ad4d0353fe1ca3345139fe01a98c998165" translate="yes">
          <source>An outgoing HTTP request with an optional typed body.</source>
          <target state="translated">オプションの型付き本文を含む発信HTTP要求。</target>
        </trans-unit>
        <trans-unit id="2b3e6f58b8017320fb8ad2d620bfa5f840b529df" translate="yes">
          <source>An unmodifiable list of items that Angular keeps up to date when the state of the application changes.</source>
          <target state="translated">アプリケーションの状態が変化したときにAngularが最新の状態に保つアイテムの変更不可能なリスト。</target>
        </trans-unit>
        <trans-unit id="b0c610b5f38365ac89cc6b28fe1af7503fdd6a36" translate="yes">
          <source>An unrelated error causes the service worker to enter safe mode; that is, temporary deactivation.</source>
          <target state="translated">無関係なエラーが発生すると、Service Workerはセーフモードに入ります。 つまり、一時的な非アクティブ化です。</target>
        </trans-unit>
        <trans-unit id="cc3c9eefabc7f0cea08522cde34fd4642d6273a0" translate="yes">
          <source>An unsurprising observation for a demo. To be honest, jazzing it up won't teach you anything new about forms. But this is an opportunity to exercise some of your newly won binding skills. If you aren't interested, skip to this page's conclusion.</source>
          <target state="translated">デモの驚くべき観測。 正直に言うと、それをジャズしても、フォームについて新しいことは何も教えられません。 しかし、これは新しく獲得したバインディングスキルの一部を行使する機会です。 興味がない場合は、このページの結論に進んでください。</target>
        </trans-unit>
        <trans-unit id="452cffe88932ae77fe68dbf055515d671319274e" translate="yes">
          <source>An upgraded component may also have inputs and outputs, as defined by the scope/controller bindings of the original AngularJS component directive. When you use the component from an Angular template, provide the inputs and outputs using &lt;strong&gt;Angular template syntax&lt;/strong&gt;, observing the following rules:</source>
          <target state="translated">アップグレードされたコンポーネントには、元のAngularJSコンポーネントディレクティブのスコープ/コントローラーバインディングで定義されているように、入力と出力も含まれる場合があります。 Angularテンプレートからコンポーネントを使用する場合は、 &lt;strong&gt;Angularテンプレート構文&lt;/strong&gt;を使用して入力と出力を提供し、次の規則を順守します。</target>
        </trans-unit>
        <trans-unit id="c32307f2c480f6053e5eabae11932dca1c5bd1fb" translate="yes">
          <source>An upload progress event was received.</source>
          <target state="translated">アップロード進行状況イベントを受信しました。</target>
        </trans-unit>
        <trans-unit id="3ecd206c90170f8ae7938d7cd6bd36735ba58063" translate="yes">
          <source>An upload progress event.</source>
          <target state="translated">アップロード進行状況イベント。</target>
        </trans-unit>
        <trans-unit id="e2e2a215be86f3d1acdd9e0d7a47d98ae4b62c70" translate="yes">
          <source>Anchor element that specifies the location of this container in the containing view. Each view container can have only one anchor element, and each anchor element can have only a single view container.</source>
          <target state="translated">含まれるビューでこのコンテナの場所を指定するアンカー要素。 各ビューコンテナは1つのアンカー要素のみを持つことができ、各アンカー要素は単一のビューコンテナのみを持つことができます。</target>
        </trans-unit>
        <trans-unit id="b5d76a3a5f5caf5269f66c1a65575cf3b3e26baf" translate="yes">
          <source>Anchor scrolling does not happen on 'popstate'. Instead, we restore the position that we stored or scroll to the top.</source>
          <target state="translated">アンカースクロールは「popstate」では発生しません。 代わりに、保存した位置を復元するか、上にスクロールします。</target>
        </trans-unit>
        <trans-unit id="a307a637b89fe16e9922778e99bea2ed2e8e496b" translate="yes">
          <source>Anchors</source>
          <target state="translated">Anchors</target>
        </trans-unit>
        <trans-unit id="f51084cd80a34108fd5adb4fd8ede43309c33705" translate="yes">
          <source>And because this component is being used from the AngularJS module, and is an entry point into the Angular application, you must add it to the &lt;code&gt;entryComponents&lt;/code&gt; for the NgModule.</source>
          <target state="translated">また、このコンポーネントはAngularJSモジュールから使用されており、Angularアプリケーションへのエントリポイントであるため、 &lt;code&gt;entryComponents&lt;/code&gt; 追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="220dca1fbf38afa8fcb52d2808f50aad1904d032" translate="yes">
          <source>And both together:</source>
          <target state="translated">そして両方一緒に：</target>
        </trans-unit>
        <trans-unit id="4cb748fd250adc2e2b24d881d384cd3f1ceeff26" translate="yes">
          <source>And for the phone list component, a few adjustments to the router make the &lt;code&gt;RouteLink&lt;/code&gt; directives work.</source>
          <target state="translated">また、電話リストコンポーネントの場合、ルーターをいくつか調整することで &lt;code&gt;RouteLink&lt;/code&gt; ディレクティブが機能します。</target>
        </trans-unit>
        <trans-unit id="029ba4666a2a6cfed9bf04394f2a405b66d1d323" translate="yes">
          <source>And here are some tests:</source>
          <target state="translated">そして、ここにいくつかのテストがあります：</target>
        </trans-unit>
        <trans-unit id="fffb5f839ebabc375dc3442fb647c4f7c7a16fe5" translate="yes">
          <source>And here's how you could use it with a different parent type.</source>
          <target state="translated">そして、異なる親タイプでそれを使用する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="726041286efb6514f4d5c48dff50434ecdff60e6" translate="yes">
          <source>And if the first segment begins with &lt;code&gt;../&lt;/code&gt;, the router will go up one level.</source>
          <target state="translated">そして、最初のセグメントが &lt;code&gt;../&lt;/code&gt; で始まる場合、ルーターは1レベル上がります。</target>
        </trans-unit>
        <trans-unit id="581486c9bdaa42d9745149011abbcef5b3d346e8" translate="yes">
          <source>And in the earlier versions of &lt;code&gt;Angular&lt;/code&gt;, the following files were imported or added in your html file:</source>
          <target state="translated">&lt;code&gt;Angular&lt;/code&gt; の以前のバージョンでは、次のファイルがhtmlファイルにインポートまたは追加されていました。</target>
        </trans-unit>
        <trans-unit id="b2274e10984bdcfe61fe3f96ba22a2a4c56b464e" translate="yes">
          <source>And in the same file, add it to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;declarations&lt;/code&gt; array:</source>
          <target state="translated">そして、同じファイルで、それを &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;declarations&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="514df4d7b03eb7b4bff57e5cc4c1f60e85c21481" translate="yes">
          <source>And later the value can be read from the router through &lt;code&gt;router.getCurrentNavigation&lt;/code&gt;. For example, to capture the &lt;code&gt;tracingId&lt;/code&gt; above during the &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; event:</source>
          <target state="translated">そして、後で &lt;code&gt;router.getCurrentNavigation&lt;/code&gt; を介してルーターから値を読み取ることができます。 たとえば、 &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; イベント中に上記の &lt;code&gt;tracingId&lt;/code&gt; をキャプチャするには：</target>
        </trans-unit>
        <trans-unit id="ba55a85734b9b1212d4da61228070f47cd0a644b" translate="yes">
          <source>And since you are routing to &lt;code&gt;PhoneListComponent&lt;/code&gt; and &lt;code&gt;PhoneDetailComponent&lt;/code&gt; directly rather than using a route template with a &lt;code&gt;&amp;lt;phone-list&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;phone-detail&amp;gt;&lt;/code&gt; tag, you can do away with their Angular selectors as well.</source>
          <target state="translated">また、 &lt;code&gt;&amp;lt;phone-list&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;phone-detail&amp;gt;&lt;/code&gt; タグでルートテンプレートを使用するのではなく、 &lt;code&gt;PhoneListComponent&lt;/code&gt; と &lt;code&gt;PhoneDetailComponent&lt;/code&gt; に直接ルーティングするため、Angularセレクターも廃止できます。</target>
        </trans-unit>
        <trans-unit id="661c680937dcc4b25a3517246569dc41b5dcad75" translate="yes">
          <source>And that is all you need to do to get the full benefit of AOT for hybrid Angular apps.</source>
          <target state="translated">そして、AngularハイブリッドアプリでAOTを最大限に活用するために必要なことはこれだけです。</target>
        </trans-unit>
        <trans-unit id="fe495daae12d4210a639f103ea132191cdb68bc6" translate="yes">
          <source>And that's all you need do to get the full benefit of AOT for Angular apps!</source>
          <target state="translated">そして、Angularアプリ向けAOTを最大限に活用するために必要なことはこれだけです！</target>
        </trans-unit>
        <trans-unit id="4d279d81a0c6f6d0a1bd9ed9c92b0938afbbfc7a" translate="yes">
          <source>And that's all you need to use AOT while upgrading your app!</source>
          <target state="translated">アプリのアップグレード中にAOTを使用するのに必要なことはこれだけです！</target>
        </trans-unit>
        <trans-unit id="f94852fb7b378d191158016d057691422128d0e7" translate="yes">
          <source>And the second is the phone links spec:</source>
          <target state="translated">2番目は電話リンクの仕様です。</target>
        </trans-unit>
        <trans-unit id="a104acccd6d3a8c8cdd1533ec92d99aac644c44f" translate="yes">
          <source>And you can also &lt;a href=&quot;pipes#parameterizing-a-pipe&quot;&gt;apply parameters&lt;/a&gt; to a pipe:</source>
          <target state="translated">また、パイプに&lt;a href=&quot;pipes#parameterizing-a-pipe&quot;&gt;パラメーター&lt;/a&gt;を適用することもできます 。</target>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="8e09000e5c2a6bef346596ec2e0dec0fbf7495a6" translate="yes">
          <source>Angular</source>
          <target state="translated">Angular</target>
        </trans-unit>
        <trans-unit id="9ce4e3444001628938f2114d22cede0cbf3a7345" translate="yes">
          <source>Angular &lt;code&gt;NgModule&lt;/code&gt; names</source>
          <target state="translated">Angular &lt;code&gt;NgModule&lt;/code&gt; 名</target>
        </trans-unit>
        <trans-unit id="006832a598bcc0cfd1bccafa8c1be8086583b93a" translate="yes">
          <source>Angular &lt;em&gt;NgModules&lt;/em&gt; differ from and complement JavaScript (ES2015) modules. An NgModule declares a compilation context for a set of components that is dedicated to an application domain, a workflow, or a closely related set of capabilities. An NgModule can associate its components with related code, such as services, to form functional units.</source>
          <target state="translated">Angular &lt;em&gt;NgModuleは&lt;/em&gt; JavaScript（ES2015）モジュールとは異なり、補完します。 NgModuleは、アプリケーションドメイン、ワークフロー、または密接に関連する機能セット専用のコンポーネントセットのコンパイルコンテキストを宣言します。 NgModuleは、コンポーネントをサービスなどの関連コードに関連付けて、機能ユニットを形成できます。</target>
        </trans-unit>
        <trans-unit id="3a90be85a404ed076f232eda66f6c97b3763ffdd" translate="yes">
          <source>Angular &lt;em&gt;TestBed&lt;/em&gt;</source>
          <target state="translated">Angular&lt;em&gt;テストベッド&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53cd3baaa80c39be7dbd5ce81eccbf14c1556192" translate="yes">
          <source>Angular &lt;strong&gt;pipes&lt;/strong&gt; provide formatting and transformation for data in the template, similar to AngularJS &lt;strong&gt;filters&lt;/strong&gt;. Many of the built-in filters in AngularJS have corresponding pipes in Angular. For more information on pipes, see &lt;a href=&quot;pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;strong&gt;パイプ&lt;/strong&gt;は、AngularJS &lt;strong&gt;フィルター&lt;/strong&gt;と同様に、テンプレート内のデータのフォーマットと変換を提供します。 AngularJSの組み込みフィルターの多くには、Angularに対応するパイプがあります。 パイプの詳細については、パイプを参照してください。</target>
        </trans-unit>
        <trans-unit id="1da97b715125a7200320cdfe21476ab138911186" translate="yes">
          <source>Angular CLI Builders</source>
          <target state="translated">Angular CLI Builders</target>
        </trans-unit>
        <trans-unit id="0b62b52e382c94a5e31cfe2e45350c0ad57bfde2" translate="yes">
          <source>Angular DI has a &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;hierarchical injection system&lt;/a&gt;, which means that nested injectors can create their own service instances. Angular regularly creates nested injectors. Whenever Angular creates a new instance of a component that has &lt;code&gt;providers&lt;/code&gt; specified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;, it also creates a new &lt;em&gt;child injector&lt;/em&gt; for that instance. Similarly, when a new NgModule is lazy-loaded at run time, Angular can create an injector for it with its own providers.</source>
          <target state="translated">Angular DIには&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;階層的なインジェクションシステム&lt;/a&gt;があります。つまり、ネストされたインジェクターは独自のサービスインスタンスを作成できます。 Angularはネストされたインジェクターを定期的に作成します。 Angularは、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; で指定された &lt;code&gt;providers&lt;/code&gt; を持つコンポーネントの新しいインスタンスを作成するたびに、そのインスタンスの新しい&lt;em&gt;子インジェクター&lt;/em&gt;も作成します。 同様に、新しいNgModuleが実行時に遅延ロードされると、Angularは独自のプロバイダーでインジェクターを作成できます。</target>
        </trans-unit>
        <trans-unit id="b6f10f0e075446afd6bd0316044e6433708768b2" translate="yes">
          <source>Angular Documentation</source>
          <target state="translated">Angular ドキュメント</target>
        </trans-unit>
        <trans-unit id="f800173505ee0bcc1b11e1ddf36ce8a030dd7494" translate="yes">
          <source>Angular Documentation Style Guide</source>
          <target state="translated">Angular Documentation Style Guide</target>
        </trans-unit>
        <trans-unit id="4656edbf91cfa36158075026931a11032cead650" translate="yes">
          <source>Angular Elements Overview</source>
          <target state="translated">Angular要素の概要</target>
        </trans-unit>
        <trans-unit id="e07038b6aad22461ee7bae9dc2b45c7a7c2e2daf" translate="yes">
          <source>Angular JSONP requests return an &lt;code&gt;Observable&lt;/code&gt;. Follow the pattern for subscribing to observables and use the RxJS &lt;code&gt;map&lt;/code&gt; operator to transform the response before using the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async pipe&lt;/a&gt; to manage the results.</source>
          <target state="translated">AngularJSONPリクエストは &lt;code&gt;Observable&lt;/code&gt; を返します。 オブザーバブルにサブスクライブするパターンに従い、RxJS &lt;code&gt;map&lt;/code&gt; オペレーターを使用して応答を変換してから、 &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;非同期パイプ&lt;/a&gt;を使用して結果を管理します。</target>
        </trans-unit>
        <trans-unit id="cc9d2d14b4723cc3db1775007d3a69846afb3014" translate="yes">
          <source>Angular Labs</source>
          <target state="translated">Angular Labs</target>
        </trans-unit>
        <trans-unit id="9e7a56e64dea1098d28d55765096fc618a9b8502" translate="yes">
          <source>Angular Labs is an initiative to cultivate new features and iterate on them quickly. Angular Labs provides a safe place for exploration and experimentation by the Angular team.</source>
          <target state="translated">Angular Labsは、新機能を開発し、それらを迅速に繰り返すイニシアチブです。 Angular Labsは、Angularチームによる調査と実験のための安全な場所を提供します。</target>
        </trans-unit>
        <trans-unit id="b00d2c229068abc17cff954895b39cdc3bf5ff0d" translate="yes">
          <source>Angular Labs projects are not ready for production use, and no commitment is made to bring them to production. The policies and practices that are described in this document do not apply to Angular Labs projects.</source>
          <target state="translated">Angular Labsプロジェクトは本番環境で使用する準備ができておらず、本番環境に移行することを約束していません。 このドキュメントに記載されているポリシーとプラクティスは、Angular Labsプロジェクトには適用されません。</target>
        </trans-unit>
        <trans-unit id="14af2b4bd0445fb663d36a7aa76d50d4caa6816b" translate="yes">
          <source>Angular Language Service</source>
          <target state="translated">Angular言語サービス</target>
        </trans-unit>
        <trans-unit id="72a9af2d40cd0cddac1ab7c8148463ece8b5ffc7" translate="yes">
          <source>Angular Language Service in your editor</source>
          <target state="translated">エディターでのAngular Language Service</target>
        </trans-unit>
        <trans-unit id="b73e3a2a2136a6a52f2f163943dedb823749ad44" translate="yes">
          <source>Angular Language Service is currently available as an extension for &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&quot;https://www.jetbrains.com/webstorm&quot;&gt;WebStorm&lt;/a&gt;, and &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;.</source>
          <target state="translated">現在、Angular Language Serviceは&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; 、 &lt;a href=&quot;https://www.jetbrains.com/webstorm&quot;&gt;WebStorm&lt;/a&gt; 、 &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Textの&lt;/a&gt;拡張機能として利用できます。</target>
        </trans-unit>
        <trans-unit id="23326d8b3d91491eb282a0110a38cbdd0d630fcc" translate="yes">
          <source>Angular Material, for example, supplies generation schematics for the UI components that it defines. The following command uses one of these schematics to render an Angular Material &lt;code&gt;&amp;lt;mat-table&amp;gt;&lt;/code&gt; that is pre-configured with a datasource for sorting and pagination.</source>
          <target state="translated">たとえば、Angular Materialは、定義するUIコンポーネントの生成回路図を提供します。 次のコマンドは、これらの回路図のいずれかを使用して、ソートとページネーション用のデータソースで事前構成されたAngularマテリアル &lt;code&gt;&amp;lt;mat-table&amp;gt;&lt;/code&gt; をレンダリングします。</target>
        </trans-unit>
        <trans-unit id="eb970b461e5095261dfad388a7452d357e39a442" translate="yes">
          <source>Angular Push Notifications</source>
          <target state="translated">Angularプッシュ通知</target>
        </trans-unit>
        <trans-unit id="cc237f83efa1a2b5e00294a0bdae42196f8db9d6" translate="yes">
          <source>Angular UI components</source>
          <target state="translated">AngularUIコンポーネント</target>
        </trans-unit>
        <trans-unit id="ace4d235cf67a63f6410e00d7c53d4995b98a87e" translate="yes">
          <source>Angular Universal can generate a static version of your app that is easily searchable, linkable, and navigable without JavaScript. Universal also makes a site preview available since each URL returns a fully rendered page.</source>
          <target state="translated">Angular Universalは、JavaScriptなしで簡単に検索、リンク、ナビゲートできるアプリの静的バージョンを生成できます。 また、Universalは、各URLが完全にレンダリングされたページを返すため、サイトのプレビューを利用可能にします。</target>
        </trans-unit>
        <trans-unit id="03a5c1283a3b0775a44e17725d52243197c5b04f" translate="yes">
          <source>Angular Versioning and Releases</source>
          <target state="translated">Angularバージョン管理とリリース</target>
        </trans-unit>
        <trans-unit id="a8e46db497a411dfa77cebcd5f020de2e1dd9c9a" translate="yes">
          <source>Angular Workspace Configuration</source>
          <target state="translated">Angularワークスペースの構成</target>
        </trans-unit>
        <trans-unit id="cec48440aa352f69975cc33a6148da27d5bd34ec" translate="yes">
          <source>Angular adds &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; to the application root injector, unless the NgModule is lazy-loaded. For a lazy-loaded NgModule, Angular creates a &lt;em&gt;child injector&lt;/em&gt; and adds the module's providers to the child injector.</source>
          <target state="translated">NgModuleが遅延ロードされない限り、Angularは &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; をアプリケーションルートインジェクターに追加します。 遅延ロードされたNgModuleの場合、Angularは&lt;em&gt;子インジェクター&lt;/em&gt;を作成し、モジュールのプロバイダーを&lt;em&gt;子インジェクター&lt;/em&gt;に追加します。</target>
        </trans-unit>
        <trans-unit id="8e142da275e31e83a34423dee09ae7d117ad91d6" translate="yes">
          <source>Angular adds a decorator to the component class to provide any required metadata. The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator declares that the class is a component and provides metadata about that component such as its selector (or tag) and its template.</source>
          <target state="translated">Angularはコンポーネントクラスにデコレータを追加して、必要なメタデータを提供します。 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータは、クラスがコンポーネントであることを宣言し、セレクター（またはタグ）やテンプレートなど、そのコンポーネントに関するメタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="aca3ec94d9d835e1ed7052f9071ac32c46856347" translate="yes">
          <source>Angular adds a directive to the injector of the element to which it is applied. The test for the default color uses the injector of the second &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; to get its &lt;code&gt;HighlightDirective&lt;/code&gt; instance and its &lt;code&gt;defaultColor&lt;/code&gt;.</source>
          <target state="translated">Angularは、適用される要素のインジェクターにディレクティブを追加します。 デフォルトの色のテストでは、2番目の &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; のインジェクターを使用して、その &lt;code&gt;HighlightDirective&lt;/code&gt; インスタンスと &lt;code&gt;defaultColor&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="da8913da0b293e00f59a47b8577bbaab64befa70" translate="yes">
          <source>Angular adds certain components to &lt;em&gt;entry components&lt;/em&gt; automatically. Components listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; are added automatically. Components referenced in router configuration are added automatically. These two mechanisms account for almost all entry components.</source>
          <target state="translated">Angularは、特定のコンポーネントを&lt;em&gt;エントリコンポーネントに&lt;/em&gt;自動的に追加します。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; リストされているコンポーネントは自動的に追加されます。 ルーター構成で参照されるコンポーネントは自動的に追加されます。 これらの2つのメカニズムは、ほとんどすべてのエントリコンポーネントを説明します。</target>
        </trans-unit>
        <trans-unit id="1bfaa4d4afc1fe6d25c5ea40750798df1ebd8735" translate="yes">
          <source>Angular also has &lt;strong&gt;class binding&lt;/strong&gt;, which is a good way to add or remove a single class, as shown in the third example.</source>
          <target state="translated">Angularには&lt;strong&gt;クラスバインディング&lt;/strong&gt;もあります。これは、3番目の例に示すように、単一のクラスを追加または削除するのに適した方法です。</target>
        </trans-unit>
        <trans-unit id="aab5930151c105e1c5d03b6b3f8697b3dc85e9e7" translate="yes">
          <source>Angular also has &lt;strong&gt;style binding&lt;/strong&gt;, which is good way to set a single style. This is shown in the second example.</source>
          <target state="translated">Angularには&lt;strong&gt;スタイルバインディング&lt;/strong&gt;もあり、これは単一のスタイルを設定するのに適した方法です。 これは2番目の例に示されています。</target>
        </trans-unit>
        <trans-unit id="44d0b768fde4742dc1976b77eaf1b2e28afafb0a" translate="yes">
          <source>Angular also has a &lt;code&gt;percent&lt;/code&gt; pipe, which formats a number as a local percentage as shown in the third example.</source>
          <target state="translated">Angularには &lt;code&gt;percent&lt;/code&gt; パイプもあり、3番目の例に示すように、数値をローカルパーセントとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="e7acf3cac93b6dc1dff702f72a776e3bad75bb0b" translate="yes">
          <source>Angular also has an extensive &lt;a href=&quot;https://angular.io/resources&quot;&gt;network of 3rd-party tools and libraries&lt;/a&gt;.</source>
          <target state="translated">Angularは、 &lt;a href=&quot;https://angular.io/resources&quot;&gt;サードパーティのツールとライブラリの&lt;/a&gt;広範なネットワークも備えています 。</target>
        </trans-unit>
        <trans-unit id="c4f6f4c8cab83c598f5f92135c20c5a81d3804e3" translate="yes">
          <source>Angular also supports workspaces with &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;multiple projects&lt;/a&gt;. This type of development environment is suitable for advanced users who are developing &lt;a href=&quot;glossary#library&quot;&gt;shareable libraries&lt;/a&gt;, and for enterprises that use a &quot;monorepo&quot; development style, with a single repository and global configuration for all Angular projects.</source>
          <target state="translated">Angularは、 &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;複数のプロジェクトを含む&lt;/a&gt;ワークスペースもサポートしています。 このタイプの開発環境は、 &lt;a href=&quot;glossary#library&quot;&gt;共有可能なライブラリ&lt;/a&gt;を開発している上級ユーザー、および単一リポジトリとすべてのAngularプロジェクトのグローバル構成で「モノレポ」開発スタイルを使用する企業に適しています。</target>
        </trans-unit>
        <trans-unit id="18ccac82f42afc30dc13eb8f7f4a5b6af31380eb" translate="yes">
          <source>Angular and i18n</source>
          <target state="translated">Angularと国際化</target>
        </trans-unit>
        <trans-unit id="6dd49b5a09165a329e3b3706c72d3ba95738b3ba" translate="yes">
          <source>Angular animations are based on CSS web transition functionality, so anything that can be styled or transformed in CSS can be animated the same way in Angular. Angular animations allow you to:</source>
          <target state="translated">AngularアニメーションはCSS Webトランジション機能に基づいているため、CSSでスタイル設定または変換できるものはすべて、Angularでも同じ方法でアニメーション化できます。 Angularアニメーションを使用すると、次のことができます。</target>
        </trans-unit>
        <trans-unit id="fa2b46cf1fafda0f8f1b1015605c3b0e0c977cd6" translate="yes">
          <source>Angular applications are styled with standard CSS. That means you can apply everything you know about CSS stylesheets, selectors, rules, and media queries directly to Angular applications.</source>
          <target state="translated">Angularアプリケーションは、標準のCSSでスタイル設定されています。 つまり、CSSスタイルシート、セレクター、ルール、およびメディアクエリについて知っているすべてを、Angularアプリケーションに直接適用できます。</target>
        </trans-unit>
        <trans-unit id="14d869c3fb5c7a4d91b5a670f800823baa6232f8" translate="yes">
          <source>Angular applications must follow the same security principles as regular web applications, and must be audited as such. Angular-specific APIs that should be audited in a security review, such as the &lt;a href=&quot;security#bypass-security-apis&quot;&gt;&lt;em&gt;bypassSecurityTrust&lt;/em&gt;&lt;/a&gt; methods, are marked in the documentation as security sensitive.</source>
          <target state="translated">Angularアプリケーションは、通常のWebアプリケーションと同じセキュリティ原則に従う必要があり、そのように監査する必要があります。 &lt;a href=&quot;security#bypass-security-apis&quot;&gt;&lt;em&gt;bypassSecurityTrust&lt;/em&gt;&lt;/a&gt;メソッドなど、セキュリティレビューで監査する必要があるAngular固有のAPIは、ドキュメント内でセキュリティに敏感であるとマークされています。</target>
        </trans-unit>
        <trans-unit id="a1bf3aeaee18f4e10d8c47a1a0151f85f3df9106" translate="yes">
          <source>Angular applications, and specifically applications that relied on the JIT compiler, used to require a polyfill for the &lt;a href=&quot;https://github.com/rbuckton/reflect-metadata&quot;&gt;reflect-metadata&lt;/a&gt; APIs.</source>
          <target state="translated">Angularアプリケーション、特にJITコンパイラに依存するアプリケーションは、 &lt;a href=&quot;https://github.com/rbuckton/reflect-metadata&quot;&gt;リフレクトメタデータ&lt;/a&gt; APIのポリフィルを必要とするために使用されていました。</target>
        </trans-unit>
        <trans-unit id="91733de9ca0b6019e9d774051ac122f55526d61d" translate="yes">
          <source>Angular applications, as single-page applications, are in a prime position to benefit from the advantages of service workers. Starting with version 5.0.0, Angular ships with a service worker implementation. Angular developers can take advantage of this service worker and benefit from the increased reliability and performance it provides, without needing to code against low-level APIs.</source>
          <target state="translated">単一ページのアプリケーションとしてのAngularのあるアプリケーションは、サービスワーカーのメリットを享受するための主要な位置にあります。 バージョン5.0.0以降、AngularにはService Workerが実装されています。 Angularのある開発者は、このService Workerを利用して、低レベルAPIに対してコーディングする必要なく、信頼性とパフォーマンスが向上するというメリットを享受できます。</target>
        </trans-unit>
        <trans-unit id="6a6de042c4c8b613bc14b1004499391dfb5f5947" translate="yes">
          <source>Angular applies interceptors in the order that you provide them. If you provide interceptors &lt;em&gt;A&lt;/em&gt;, then &lt;em&gt;B&lt;/em&gt;, then &lt;em&gt;C&lt;/em&gt;, requests will flow in &lt;em&gt;A-&amp;gt;B-&amp;gt;C&lt;/em&gt; and responses will flow out &lt;em&gt;C-&amp;gt;B-&amp;gt;A&lt;/em&gt;.</source>
          <target state="translated">Angularは、インターセプターをユーザーが指定した順序で適用します。 インターセプター&lt;em&gt;A&lt;/em&gt; 、次に&lt;em&gt;B&lt;/em&gt; 、次に&lt;em&gt;C&lt;/em&gt;を指定すると、要求は&lt;em&gt;A-&amp;gt; B-&amp;gt; C&lt;/em&gt;に流れ、応答は&lt;em&gt;C-&amp;gt; B-&amp;gt; Aに&lt;/em&gt;流れます。</target>
        </trans-unit>
        <trans-unit id="926bf2f3242ed68256b3bd4a48a61bdbc87faa0e" translate="yes">
          <source>Angular apps are modular and Angular has its own modularity system called &lt;em&gt;NgModules&lt;/em&gt;. NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities. They can contain components, service providers, and other code files whose scope is defined by the containing NgModule. They can import functionality that is exported from other NgModules, and export selected functionality for use by other NgModules.</source>
          <target state="translated">Angularアプリはモジュール式であり、Angularには&lt;em&gt;NgModules&lt;/em&gt;と呼ばれる独自のモジュールシステムが&lt;em&gt;あり&lt;/em&gt;ます。 NgModuleは、アプリケーションドメイン、ワークフロー、または密接に関連する一連の機能専用のまとまったコードブロックのコンテナです。 コンポーネント、サービスプロバイダー、およびNgModuleによってスコープが定義される他のコードファイルを含めることができます。 他のNgModuleからエクスポートされた機能をインポートし、他のNgModuleで使用するために選択された機能をエクスポートできます。</target>
        </trans-unit>
        <trans-unit id="25fa7e10b2ea8373e96b925201550beca498120d" translate="yes">
          <source>Angular apps are perfect candidates for serving with a simple static HTML server. You don't need a server-side engine to dynamically compose application pages because Angular does that on the client-side.</source>
          <target state="translated">Angularアプリは、単純な静的HTMLサーバーで提供するのに最適な候補です。 Angularはクライアント側でそれを行うため、アプリケーションページを動的に構成するためにサーバー側エンジンは必要ありません。</target>
        </trans-unit>
        <trans-unit id="89a4897f290e40a2133713a97fbe6e813fdda23d" translate="yes">
          <source>Angular asks the injector for the service associated with &lt;code&gt;LoggerService&lt;/code&gt; and assigns the returned value to the &lt;code&gt;logger&lt;/code&gt; parameter.</source>
          <target state="translated">Angularはインジェクターに &lt;code&gt;LoggerService&lt;/code&gt; に関連付けられたサービスを要求し、返された値を &lt;code&gt;logger&lt;/code&gt; パラメーターに割り当てます。</target>
        </trans-unit>
        <trans-unit id="34736d096c8d01abb937a1a803b97d49650c45e4" translate="yes">
          <source>Angular automatically adds components in the module's &lt;code&gt;bootstrap&lt;/code&gt; and route definitions into the &lt;code&gt;entryComponents&lt;/code&gt; list.</source>
          <target state="translated">Angularは、モジュールの &lt;code&gt;bootstrap&lt;/code&gt; およびルート定義のコンポーネントを &lt;code&gt;entryComponents&lt;/code&gt; リストに自動的に追加します。</target>
        </trans-unit>
        <trans-unit id="f64e43a20cf90e560e0797b938ab839d7501e2c4" translate="yes">
          <source>Angular automatically adds components in the module's bootstrap and route definitions into the &lt;code&gt;entryComponents&lt;/code&gt; list. Use this option to add components that are bootstrapped using one of the imperative techniques, such as &lt;code&gt;ViewContainerRef.createComponent()&lt;/code&gt;.</source>
          <target state="translated">Angularは、モジュールのブートストラップおよびルート定義のコンポーネントを &lt;code&gt;entryComponents&lt;/code&gt; リストに自動的に追加します。 このオプションを使用して、 &lt;code&gt;ViewContainerRef.createComponent()&lt;/code&gt; などの必須テクニックの1つを使用してブートストラップされるコンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="0629ce337235f8f877e6fa641ca67b726d78f938" translate="yes">
          <source>Angular automatically checks host property bindings during change detection. If a binding changes, Angular updates the directive's host element.</source>
          <target state="translated">Angularは、変更の検出中にホストプロパティのバインドを自動的にチェックします。 バインディングが変更されると、Angularはディレクティブのホスト要素を更新します。</target>
        </trans-unit>
        <trans-unit id="8b9a86a14f14da58711979c6e06ad0d7a208e6d2" translate="yes">
          <source>Angular automatically expands the shorthand syntax as it compiles the template. The context for each embedded view is logically merged to the current component context according to its lexical position.</source>
          <target state="translated">Angularは、テンプレートをコンパイルする際に省略形の構文を自動的に展開します。 各埋め込みビューのコンテキストは、その字句位置に従って現在のコンポーネントコンテキストに論理的にマージされます。</target>
        </trans-unit>
        <trans-unit id="66b49eb10d70820437d8d869bc39bde44099684f" translate="yes">
          <source>Angular automatically pulls the value of the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;myHero&lt;/code&gt; properties from the component and inserts those values into the browser. Angular updates the display when these properties change.</source>
          <target state="translated">Angularは、コンポーネントの &lt;code&gt;myHero&lt;/code&gt; プロパティとmyHeroプロパティの値を自動的にプルし、それらの値をブラウザーに挿入します。 これらのプロパティが変更されると、Angularは表示を更新します。</target>
        </trans-unit>
        <trans-unit id="ff00d645a7fcd89b83ee39d6fc1b51274985e3e6" translate="yes">
          <source>Angular automatically updates input properties during change detection. The &lt;code&gt;inputs&lt;/code&gt; property defines a set of &lt;code&gt;directiveProperty&lt;/code&gt; to &lt;code&gt;bindingProperty&lt;/code&gt; configuration:</source>
          <target state="translated">Angularは、変更の検出中に入力プロパティを自動的に更新します。 &lt;code&gt;inputs&lt;/code&gt; プロパティは、 &lt;code&gt;bindingProperty&lt;/code&gt; 設定に対する &lt;code&gt;directiveProperty&lt;/code&gt; のセットを定義します。</target>
        </trans-unit>
        <trans-unit id="4fb8d9e96c7ac6343272dadc9bead965bdb5f2ef" translate="yes">
          <source>Angular calls &lt;code&gt;ngOnInit()&lt;/code&gt; shortly after creating a component.</source>
          <target state="translated">Angularは、コンポーネントを作成した直後に &lt;code&gt;ngOnInit()&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="0761730ce747644c7286543b08d9331ae7b0e5b5" translate="yes">
          <source>Angular calls hook methods for &lt;em&gt;directives&lt;/em&gt; as well as components.</source>
          <target state="translated">Angularは、 &lt;em&gt;ディレクティブ&lt;/em&gt;とコンポーネントのフックメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="700fb4f4fabe764d32bfd76c4bdde2ed1a283939" translate="yes">
          <source>Angular calls its &lt;code&gt;ngOnChanges()&lt;/code&gt; method whenever it detects changes to &lt;strong&gt;&lt;em&gt;input properties&lt;/em&gt;&lt;/strong&gt; of the component (or directive). This example monitors the &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; hook.</source>
          <target state="translated">Angularは、コンポーネント（またはディレクティブ）の&lt;strong&gt;&lt;em&gt;入力プロパティ&lt;/em&gt;&lt;/strong&gt;への変更を検出するたびに、 &lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドを呼び出します。 この例では、 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; フックを監視します。</target>
        </trans-unit>
        <trans-unit id="7fba1c4e305809dca3c5497ed6c4e8bdddcee9d5" translate="yes">
          <source>Angular calls these hook methods in the following order:</source>
          <target state="translated">Angularは、これらのフックメソッドを次の順序で呼び出します。</target>
        </trans-unit>
        <trans-unit id="2eb6be30b85620d64c1287fc12627576cab0e3cb" translate="yes">
          <source>Angular can launch with multiple bootstrap components, each with its own location in the host web page.</source>
          <target state="translated">Angularは複数のブートストラップコンポーネントで起動でき、各コンポーネントはホストWebページ内の独自の場所にあります。</target>
        </trans-unit>
        <trans-unit id="a8d9d853fd628beed82fbc871f08b75361246094" translate="yes">
          <source>Angular can't know at compile time what kind of HTML element the &lt;code&gt;nativeElement&lt;/code&gt; is or if it even is an HTML element. The app might be running on a &lt;em&gt;non-browser platform&lt;/em&gt;, such as the server or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Worker&lt;/a&gt;, where the element may have a diminished API or not exist at all.</source>
          <target state="translated">Angularは、コンパイル時に、 &lt;code&gt;nativeElement&lt;/code&gt; がどのようなHTML要素であるか、あるいはHTML要素であるかどうかを知ることができません。 アプリは、サーバーや&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Worker&lt;/a&gt;などの&lt;em&gt;ブラウザー以外のプラットフォーム&lt;/em&gt;で実行されている可能性があり&lt;em&gt;ます&lt;/em&gt; 。この場合、要素のAPIが縮小されているか、まったく存在しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="36d17ffea363e96f44fadf63bb3a1bdbe014532f" translate="yes">
          <source>Angular comes with a stock of pipes such as &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;LowerCasePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt;. They are all available for use in any template.</source>
          <target state="translated">Angularには、 &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;LowerCasePipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt; 、 PercentPipeなどのパイプのストックが付属しています。 すべてのテンプレートで使用できます。</target>
        </trans-unit>
        <trans-unit id="0a907878ebd06df52b7177c708b1d8e885c2837c" translate="yes">
          <source>Angular comes with its own API for loading components dynamically.</source>
          <target state="translated">Angularには、コンポーネントを動的にロードするための独自のAPIが付属しています。</target>
        </trans-unit>
        <trans-unit id="d2363ce386377b1af5430cd7665d83300366b428" translate="yes">
          <source>Angular compiler options</source>
          <target state="translated">Angularコンパイラオプション</target>
        </trans-unit>
        <trans-unit id="15a73b4d8e7403ebf3810f68763eaa4ff736a997" translate="yes">
          <source>Angular components</source>
          <target state="translated">Angularコンポーネント</target>
        </trans-unit>
        <trans-unit id="ffb4bdd5d65587e2e6c9c3c9d1f3cb6da8838095" translate="yes">
          <source>Angular components always execute inside Angular framework codebase regardless of where they are instantiated.</source>
          <target state="translated">Angularコンポーネントは、インスタンス化される場所に関係なく、Angularフレームワークコードベース内で常に実行されます。</target>
        </trans-unit>
        <trans-unit id="233d6374ce6c4c863b26cd0f6a1152e33095938e" translate="yes">
          <source>Angular components always execute inside the Angular framework codebase regardless of where they are instantiated.</source>
          <target state="translated">Angularコンポーネントは、インスタンス化される場所に関係なく、Angularフレームワークコードベース内で常に実行されます。</target>
        </trans-unit>
        <trans-unit id="b4225f862d6288eb7075b556d3706e253ca5d1d9" translate="yes">
          <source>Angular components are a subset of directives, always associated with a template. Unlike other directives, only one component can be instantiated per an element in a template.</source>
          <target state="translated">Angularコンポーネントはディレクティブのサブセットであり、常にテンプレートに関連付けられています。 他のディレクティブとは異なり、テンプレートの要素ごとに1つのコンポーネントのみをインスタンス化できます。</target>
        </trans-unit>
        <trans-unit id="e4d73c4846ec246a55f1aa13c811b021c01194e2" translate="yes">
          <source>Angular components that support content projection make use of an &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag within them. Here's an example of such a component:</source>
          <target state="translated">コンテンツの投影をサポートするAngularコンポーネントは、それらの中で &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; タグを使用します。 そのようなコンポーネントの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="1071c499d51beceec87025fac82a393ee1e49214" translate="yes">
          <source>Angular consumed the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; content during its actual rendering and replaced the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; with a diagnostic comment.</source>
          <target state="translated">Angularは、実際のレンダリング中に &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; コンテンツを消費し、 &amp;lt;ng-template&amp;gt;を診断コメントに置き換えました。</target>
        </trans-unit>
        <trans-unit id="8636812be488a9e06f44b489bdc2a9078adde645" translate="yes">
          <source>Angular creates &lt;code&gt;ElementInjector&lt;/code&gt;s implicitly for each DOM element.</source>
          <target state="translated">Angularは、各DOM要素に対して暗黙的に &lt;code&gt;ElementInjector&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="c0741d3945dd49502e54a223724b94ed7a5fa8fc" translate="yes">
          <source>Angular creates a lazy loaded module with its own injector, a child of the root injector. &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; causes Angular to look for a &lt;code&gt;GreetingModule&lt;/code&gt; in the parent injector, which this time is the root injector. Of course it finds the instance imported by the root &lt;code&gt;AppModule&lt;/code&gt;. Now &lt;code&gt;parentModule&lt;/code&gt; exists and the constructor throws the error.</source>
          <target state="translated">Angularは、ルートインジェクターの子である独自のインジェクターで遅延ロードモジュールを作成します。 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; により、Angularは親インジェクター（この場合はルートインジェクター）で &lt;code&gt;GreetingModule&lt;/code&gt; を検索します。 もちろん、ルート &lt;code&gt;AppModule&lt;/code&gt; によってインポートされたインスタンスを検出します。 これで &lt;code&gt;parentModule&lt;/code&gt; が存在し、コンストラクターはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="977c8f330d7f7406517c33d255bec85d1010c0fb" translate="yes">
          <source>Angular creates and renders components along with their children, checks when their data-bound properties change, and destroys them before removing them from the DOM.</source>
          <target state="translated">Angularは、コンポーネントとその子を作成およびレンダリングし、データバインドプロパティがいつ変更されるかを確認し、DOMから削除する前にそれらを破棄します。</target>
        </trans-unit>
        <trans-unit id="ba24eb58c283a7912305a525ff29bc67536b0f26" translate="yes">
          <source>Angular creates the component with its &lt;em&gt;own&lt;/em&gt; injector, which is a &lt;em&gt;child&lt;/em&gt; of the fixture injector. It registers the component's providers (the &lt;code&gt;HeroDetailService&lt;/code&gt; in this case) with the child injector.</source>
          <target state="translated">Angularは、フィクスチャインジェクタの&lt;em&gt;子&lt;/em&gt;である&lt;em&gt;独自の&lt;/em&gt;インジェクタでコンポーネントを作成します。 コンポーネントのプロバイダー（この場合は &lt;code&gt;HeroDetailService&lt;/code&gt; ）を子インジェクターに登録します。</target>
        </trans-unit>
        <trans-unit id="8cd6666fc9fd18813b4f61de2cc4a4167a9bcabc" translate="yes">
          <source>Angular creates, updates, and destroys components as the user moves through the application. Your app can take action at each moment in this lifecycle through optional &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hooks&lt;/a&gt;, like &lt;code&gt;ngOnInit()&lt;/code&gt;.</source>
          <target state="translated">ユーザーがアプリケーション内を移動すると、Angularはコンポーネントを作成、更新、および破棄します。 アプリは、 &lt;code&gt;ngOnInit()&lt;/code&gt; などのオプションの&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;を使用して、このライフサイクルの各瞬間にアクションを実行できます。</target>
        </trans-unit>
        <trans-unit id="1491a873fca02f484086bb4c25c113973485dbc4" translate="yes">
          <source>Angular defines an &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; class to wrap render-specific native UI elements. In most cases, this allows you to use Angular templates and data binding to access DOM elements without reference to the native element.</source>
          <target state="translated">Angularは &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; クラスを定義して、レンダリング固有のネイティブUI要素をラップします。 ほとんどの場合、これにより、Angularテンプレートとデータバインディングを使用して、ネイティブ要素を参照せずにDOM要素にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="29b75e3aa5bf733082f6f2be9dc6166f8724c4b5" translate="yes">
          <source>Angular defines decorators that attach metadata to classes or properties so that it knows what those classes or properties mean and how they should work.</source>
          <target state="translated">Angularは、クラスまたはプロパティにメタデータを添付するデコレーターを定義して、それらのクラスまたはプロパティが何を意味し、どのように機能するかを認識します。</target>
        </trans-unit>
        <trans-unit id="54a4705b9139dd29bd0480b9f3c8657f03607bed" translate="yes">
          <source>Angular defines default builders for use with specific CLI commands, or with the general &lt;code&gt;ng run&lt;/code&gt; command. The JSON schemas that the define the options and defaults for each of these default builders are collected in the &lt;a href=&quot;https://github.com/angular/angular-cli/blob/8.0.x/packages/angular/cli/lib/config/schema.json&quot;&gt;&lt;code&gt;@angular-devkit/build-angular&lt;/code&gt;&lt;/a&gt; package. The schemas configure options for the following builders.</source>
          <target state="translated">Angularは、特定のCLIコマンドまたは一般的な &lt;code&gt;ng run&lt;/code&gt; コマンドで使用するデフォルトのビルダーを定義します。 これらの各デフォルトビルダーのオプションとデフォルトを定義するJSONスキーマは、 &lt;a href=&quot;https://github.com/angular/angular-cli/blob/8.0.x/packages/angular/cli/lib/config/schema.json&quot;&gt; &lt;code&gt;@angular-devkit/build-angular&lt;/code&gt; &lt;/a&gt;パッケージに収集されます。 スキーマは、次のビルダーのオプションを構成します。</target>
        </trans-unit>
        <trans-unit id="dee1921a916c378e7946c3b9eeea976785c29693" translate="yes">
          <source>Angular defines the following security contexts:</source>
          <target state="translated">Angularは、次のセキュリティコンテキストを定義します。</target>
        </trans-unit>
        <trans-unit id="6fb8bcc74fbecb42b212d7bf6efe735e1d1e63cd" translate="yes">
          <source>Angular defines various pipes, such as the &lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt; pipe and &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; pipe; for a complete list, see the &lt;a href=&quot;../api?type=pipe&quot;&gt;Pipes API list&lt;/a&gt;. You can also define new pipes.</source>
          <target state="translated">Angularは、 &lt;a href=&quot;../api/common/datepipe&quot;&gt;日付&lt;/a&gt;パイプや&lt;a href=&quot;../api/common/currencypipe&quot;&gt;通貨&lt;/a&gt;パイプなどのさまざまなパイプを定義します。 完全なリストについては、 &lt;a href=&quot;../api?type=pipe&quot;&gt;Pipes APIリストを&lt;/a&gt;参照してください。 新しいパイプを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="36fd385bfb0f2bc723f93bd55ac70bf1b8515f00" translate="yes">
          <source>Angular dependency injection is easiest when the provider token is a class that is also the type of the returned dependency object, or service.</source>
          <target state="translated">Angular依存性注入は、プロバイダートークンが、返される依存関係オブジェクトまたはサービスのタイプでもあるクラスである場合に最も簡単です。</target>
        </trans-unit>
        <trans-unit id="2fdc7ee4e969732e2733a769bd9625a839effc81" translate="yes">
          <source>Angular developers may encounter a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt; &lt;i&gt;cross-origin resource sharing&lt;/i&gt;&lt;/a&gt; error when making a service request (typically a data service request) to a server other than the application's own host server. Browsers forbid such requests unless the server permits them explicitly.</source>
          <target state="translated">Angular開発者は、アプリケーション自身のホストサーバー以外のサーバーにサービスリクエスト（通常はデータサービスリクエスト）を行うと、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;&lt;i&gt;クロスオリジンリソース共有&lt;/i&gt;&lt;/a&gt;エラーが発生する場合があります。 サーバーが明示的に許可しない限り、ブラウザはそのようなリクエストを禁止します。</target>
        </trans-unit>
        <trans-unit id="33ead61c5ae99389962924106e86b6fa486483dc" translate="yes">
          <source>Angular did. Angular automatically creates and attaches an &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">Angularでした。 Angularは、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブを自動的に作成し、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグに添付します。</target>
        </trans-unit>
        <trans-unit id="0c8cd873ef07f78a6133e0a8205b20af3eb32885" translate="yes">
          <source>Angular distinguishes components from services to increase modularity and reusability. By separating a component's view-related functionality from other kinds of processing, you can make your component classes lean and efficient.</source>
          <target state="translated">Angularは、コンポーネントとサービスを区別して、モジュール性と再利用性を高めます。 コンポーネントのビュー関連機能を他の種類の処理から分離することにより、コンポーネントクラスを無駄のない効率的なものにすることができます。</target>
        </trans-unit>
        <trans-unit id="4ef98a05d3c9d89272386206620e0b855fdc66c0" translate="yes">
          <source>Angular doc generation copies these image folders to the &lt;em&gt;runtime&lt;/em&gt; location, &lt;code&gt;generated/images&lt;/code&gt;. Set the image &lt;code&gt;src&lt;/code&gt; attribute to begin in &lt;em&gt;that&lt;/em&gt; directory.</source>
          <target state="translated">Angular doc generationは、これらの画像フォルダーを&lt;em&gt;実行時の&lt;/em&gt;場所である &lt;code&gt;generated/images&lt;/code&gt; コピーします 。 image &lt;code&gt;src&lt;/code&gt; 属性を設定して、 &lt;em&gt;その&lt;/em&gt;ディレクトリで開始します。</target>
        </trans-unit>
        <trans-unit id="05d4d08bb1ab2fe726e25cd17ea946e354b440dc" translate="yes">
          <source>Angular does something similar with the &lt;code&gt;&lt;a href=&quot;../api/common/document&quot;&gt;DOCUMENT&lt;/a&gt;&lt;/code&gt; token so you can inject the browser's &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; object (or an abstraction of it, depending upon the platform in which the application runs).</source>
          <target state="translated">Angularは &lt;code&gt;&lt;a href=&quot;../api/common/document&quot;&gt;DOCUMENT&lt;/a&gt;&lt;/code&gt; トークンで同様の処理を行うため、ブラウザーの &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; オブジェクト（またはアプリケーションを実行するプラットフォームに応じて抽象化）を挿入できます。</target>
        </trans-unit>
        <trans-unit id="316fdcfddbfe253f5be7d7577a1028ffa824c548" translate="yes">
          <source>Angular doesn't &lt;em&gt;enforce&lt;/em&gt; these principles. Angular does help you &lt;em&gt;follow&lt;/em&gt; these principles by making it easy to factor your application logic into services and make those services available to components through &lt;em&gt;dependency injection&lt;/em&gt;.</source>
          <target state="translated">Angularはこれらの原則を&lt;em&gt;強制&lt;/em&gt;しません。 Angularは、アプリケーションロジックをサービスに簡単に組み込み、それらのサービスを&lt;em&gt;依存性注入によって&lt;/em&gt;コンポーネントで利用できるようにすることで、これらの原則に&lt;em&gt;従うのに&lt;/em&gt;役立ちます。</target>
        </trans-unit>
        <trans-unit id="bec27d0e4374bf5d0fe0b39083d667524fda6667" translate="yes">
          <source>Angular doesn't have a &lt;code&gt;FilterPipe&lt;/code&gt; or an &lt;code&gt;OrderByPipe&lt;/code&gt; for reasons explained in the &lt;a href=&quot;pipes#no-filter-pipe&quot;&gt;Appendix&lt;/a&gt; of this page.</source>
          <target state="translated">このページの&lt;a href=&quot;pipes#no-filter-pipe&quot;&gt;付録&lt;/a&gt;で説明されている理由により、Angularには &lt;code&gt;FilterPipe&lt;/code&gt; もOrderByPipeもありません。</target>
        </trans-unit>
        <trans-unit id="d7de62023255791a40ee52811b94f5c474b98e55" translate="yes">
          <source>Angular doesn't have a bootstrap directive. To launch the app in code, explicitly bootstrap the application's root module (&lt;code&gt;AppModule&lt;/code&gt;) in &lt;code&gt;main.ts&lt;/code&gt; and the application's root component (&lt;code&gt;AppComponent&lt;/code&gt;) in &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">Angularにはブートストラップディレクティブがありません。 コードでアプリを起動するには、 &lt;code&gt;AppModule&lt;/code&gt; アプリケーションのルートモジュール（ AppModule ）と &lt;code&gt;main.ts&lt;/code&gt; のアプリケーションのルートコンポーネント（ &lt;code&gt;AppComponent&lt;/code&gt; ）を明示的にブートストラップします。</target>
        </trans-unit>
        <trans-unit id="1db4be0ad95a78f2180c038b6339b94ffad67719" translate="yes">
          <source>Angular doesn't know that you set the input element's &lt;code&gt;value&lt;/code&gt; property. It won't read that property until you raise the element's &lt;code&gt;input&lt;/code&gt; event by calling &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;dispatchEvent()&lt;/a&gt;&lt;/code&gt;. &lt;em&gt;Then&lt;/em&gt; you call &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularは、入力要素の &lt;code&gt;value&lt;/code&gt; プロパティを設定したことを知りません。 &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;dispatchEvent()&lt;/a&gt;&lt;/code&gt; 呼び出して要素の &lt;code&gt;input&lt;/code&gt; イベントを発生させるまで、そのプロパティは読み込まれません。 &lt;em&gt;次に&lt;/em&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="dd520f6af29e767755a3104595b3766e46582132" translate="yes">
          <source>Angular doesn't like NgModules with circular references, so don't let Module 'A' import Module 'B', which imports Module 'A'.</source>
          <target state="translated">Angularは、循環参照を持つNgModuleが好きではないため、モジュール「A」にモジュール「A」をインポートするモジュール「B」をインポートさせないでください。</target>
        </trans-unit>
        <trans-unit id="0fe275456a97ff34d2bc7a9ec6f6a087e43077a0" translate="yes">
          <source>Angular doesn't provide pipes for filtering or sorting lists. Developers familiar with AngularJS know these as &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt;. There are no equivalents in Angular.</source>
          <target state="translated">Angularは、リストのフィルタリングまたはソート用のパイプを提供しません。 AngularJSに詳しい開発者は、これらを &lt;code&gt;filter&lt;/code&gt; および &lt;code&gt;orderBy&lt;/code&gt; として知っています 。 Angularには同等のものはありません。</target>
        </trans-unit>
        <trans-unit id="d035376ad03249c3d06ea41a32cd0585ba3807fd" translate="yes">
          <source>Angular duplicates the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; for each item in the list, setting the &lt;code&gt;hero&lt;/code&gt; variable to the item (the hero) in the current iteration. Angular uses that variable as the context for the interpolation in the double curly braces.</source>
          <target state="translated">Angularは、リスト内の各アイテムの &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; を複製し、現在の反復で &lt;code&gt;hero&lt;/code&gt; 変数をアイテム（ヒーロー）に設定します。 Angularは、その変数を二重中括弧での補間のコンテキストとして使用します。</target>
        </trans-unit>
        <trans-unit id="85015daf970f460cc4cdb8249ea3dcc38c78f993" translate="yes">
          <source>Angular element</source>
          <target state="translated">Angular要素</target>
        </trans-unit>
        <trans-unit id="cc9d62dd0c487b775ce03f3a8c3d97cf94a169d1" translate="yes">
          <source>Angular erases the middle &quot;Hip!&quot;, leaving the cheer a bit less enthusiastic.</source>
          <target state="translated">Angularは中間の &quot;Hip！&quot;を消去し、歓声を少し熱狂させます。</target>
        </trans-unit>
        <trans-unit id="9de65d4e4807d361a824604d00a11e49f70b5d15" translate="yes">
          <source>Angular evaluates all expressions in double curly braces, converts the expression results to strings, and links them with neighboring literal strings. Finally, it assigns this composite interpolated result to an &lt;strong&gt;element or directive property&lt;/strong&gt;.</source>
          <target state="translated">Angularは、二重中括弧内のすべての式を評価し、式の結果を文字列に変換し、それらを隣接するリテラル文字列とリンクします。 最後に、この複合補間結果を&lt;strong&gt;要素またはディレクティブproperty&lt;/strong&gt;に割り当て&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="46b3eae0baafae45c7e6c0a56aa7f909f9c5b753" translate="yes">
          <source>Angular event binding syntax consists of a &lt;strong&gt;target event&lt;/strong&gt; name within parentheses on the left of an equal sign, and a quoted template statement on the right. The following event binding listens for the button's click events, calling the component's &lt;code&gt;onSave()&lt;/code&gt; method whenever a click occurs:</source>
          <target state="translated">Angularイベントバインディング構文は、等号の左側の括弧内の&lt;strong&gt;ターゲットイベント&lt;/strong&gt;名と、右側の引用符で囲まれたテンプレートステートメントで構成されます。 次のイベントバインディングは、ボタンのクリックイベントをリッスンし、クリックが発生するたびにコンポーネントの &lt;code&gt;onSave()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9a1e5ca49dc26e677715c17ed169b11bf4be97c1" translate="yes">
          <source>Angular executes a &lt;em&gt;pure pipe&lt;/em&gt; only when it detects a &lt;em&gt;pure change&lt;/em&gt; to the input value. A pure change is either a change to a primitive input value (&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;) or a changed object reference (&lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;).</source>
          <target state="translated">Angularは、入力値への&lt;em&gt;純粋な変更&lt;/em&gt;を検出した場合にのみ、 &lt;em&gt;純粋なパイプを&lt;/em&gt;実行します。 純粋な変更とは、プリミティブ入力値（ &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、 &lt;code&gt;Boolean&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; ）への変更、または変更されたオブジェクト参照（ &lt;code&gt;Date&lt;/code&gt; 、 &lt;code&gt;Array&lt;/code&gt; 、 &lt;code&gt;Function&lt;/code&gt; 、 &lt;code&gt;Object&lt;/code&gt; ）のいずれかです。</target>
        </trans-unit>
        <trans-unit id="10e61b854f3aa7e97f224d066c41aff35eeab1f5" translate="yes">
          <source>Angular executes an &lt;em&gt;impure pipe&lt;/em&gt; during every component change detection cycle. An impure pipe is called often, as often as every keystroke or mouse-move.</source>
          <target state="translated">Angularは、すべてのコンポーネント変更検出サイクル中に&lt;em&gt;不純なパイプを&lt;/em&gt;実行します。 不純なパイプは、多くの場合、すべてのキーストロークまたはマウス移動と同様に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f3f08b38aea522e78394f75ae5fb4ddda9056304" translate="yes">
          <source>Angular executes template expressions after every change detection cycle. Change detection cycles are triggered by many asynchronous activities such as promise resolutions, HTTP results, timer events, key presses and mouse moves.</source>
          <target state="translated">Angularは、変更検出サイクルごとにテンプレート式を実行します。 変更検出サイクルは、プロミス解決、HTTP結果、タイマーイベント、キーの押下、マウスの移動など、多くの非同期アクティビティによってトリガーされます。</target>
        </trans-unit>
        <trans-unit id="93fd7debae3edda32d9bdc394dafa95f04ee8ce9" translate="yes">
          <source>Angular follows the Unicode LDML convention that uses stable identifiers (Unicode locale identifiers) based on the norm &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;. It is very important that you follow this convention when you define your locale, because the Angular i18n tools use this locale id to find the correct corresponding locale data.</source>
          <target state="translated">Angularは、標準&lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47に&lt;/a&gt;基づく安定した識別子（Unicodeロケール識別子）を使用するUnicode LDML規則に従います。 Angular i18nツールはこのロケールIDを使用して、対応する正しいロケールデータを検索するため、ロケールを定義するときは、この規則に従うことが非常に重要です。</target>
        </trans-unit>
        <trans-unit id="e5403b18984f04aca1cbbd4e8aad53057e69dc66" translate="yes">
          <source>Angular forms allow you to:</source>
          <target state="translated">Angularフォームを使用すると、次のことができます。</target>
        </trans-unit>
        <trans-unit id="e1a9dce4e9c4b6bdfc09512c4aaf5cc2e6bb0b2e" translate="yes">
          <source>Angular forms don't require a style library</source>
          <target state="translated">Angularフォームはスタイルライブラリを必要としません</target>
        </trans-unit>
        <trans-unit id="a53bf8fe33eabf51e7d2da4584dccc79ed01e757" translate="yes">
          <source>Angular functions for animating multiple elements start with &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to find inner elements, for example gathering all images within a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. The remaining functions, &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt;, &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, apply cascades or allow you to control how multiple animation steps are applied.</source>
          <target state="translated">複数の要素をアニメーション化するAngular関数は、 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 始まり、内部要素を検索します。たとえば、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 内のすべての画像を収集します。 残りの関数 &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 、 &lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 、カスケードを適用するか、複数のアニメーションステップの適用方法を制御できます。</target>
        </trans-unit>
        <trans-unit id="6bd9d0319f292ad5b74842fe2d764295ebf9d611" translate="yes">
          <source>Angular generates a class factory in a separate module and that factory &lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;can only access exported classes&lt;/a&gt;. To correct this error, export the referenced class.</source>
          <target state="translated">Angularは別のモジュールでクラスファクトリを生成し、そのファクトリ&lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;はエクスポートされたクラスにのみアクセスできます&lt;/a&gt; 。 このエラーを修正するには、参照されているクラスをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="952768c15a2572a986f6ae3389d91e52e5d8c2ee" translate="yes">
          <source>Angular generates a class factory in a separate module and that factory &lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;can only access exported functions&lt;/a&gt;. To correct this error, export the function.</source>
          <target state="translated">Angularは別のモジュールでクラスファクトリを生成し、そのファクトリ&lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;はエクスポートされた関数にのみアクセスできます&lt;/a&gt; 。 このエラーを修正するには、関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="a776357d683de5262cf58f9728286d0531d34b15" translate="yes">
          <source>Angular generation &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; are instructions for modifying a project by adding files or modifying existing files. Individual schematics for the default Angular CLI &lt;code&gt;ng generate&lt;/code&gt; sub-commands are collected in the package &lt;code&gt;@angular&lt;/code&gt;. Specify the schematic name for a subcommand in the format &lt;code&gt;schematic-package:schematic-name&lt;/code&gt;; for example, the schematic for generating a component is &lt;code&gt;@angular:component&lt;/code&gt;.</source>
          <target state="translated">Angular生成&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;は、ファイルを追加するか、既存のファイルを変更してプロジェクトを変更するための指示です。 デフォルトのAngular CLI &lt;code&gt;ng generate&lt;/code&gt; サブコマンドの個々の回路図は、パッケージ &lt;code&gt;@angular&lt;/code&gt; に収集されています。 サブコマンドの回路図名を、 &lt;code&gt;schematic-package:schematic-name&lt;/code&gt; 形式で指定します。 たとえば、コンポーネントを生成するための回路図は &lt;code&gt;@angular:component&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="089b7f9bea4b756f67f9eed4c52f2969b5e785ba" translate="yes">
          <source>Angular has a hierarchical injection system. There can be injectors at multiple levels, from the root injector created by the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; down through the component tree.</source>
          <target state="translated">Angularには階層的な注入システムがあります。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; によって作成されたルートインジェクターからコンポーネントツリーまで、複数のレベルでインジェクターを使用できます。</target>
        </trans-unit>
        <trans-unit id="8203852c3d2c9dbdc69314b56a03f0403dac7220" translate="yes">
          <source>Angular has an &lt;a href=&quot;router&quot;&gt;all-new router&lt;/a&gt;.</source>
          <target state="translated">Angularには&lt;a href=&quot;router&quot;&gt;まったく新しいルーターがあります&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="0aa5ff740e38d6d18edbfc10a1644f100e11e1f4" translate="yes">
          <source>Angular has been creating new instances of the real &lt;code&gt;HeroDetailService&lt;/code&gt; all along!</source>
          <target state="translated">Angularは、本物の &lt;code&gt;HeroDetailService&lt;/code&gt; の新しいインスタンスをずっと作成してきました！</target>
        </trans-unit>
        <trans-unit id="a5090fe3d42da3f7912eb530ce278090a19f01ff" translate="yes">
          <source>Angular has built-in support to help prevent two common HTTP vulnerabilities, cross-site request forgery (CSRF or XSRF) and cross-site script inclusion (XSSI). Both of these must be mitigated primarily on the server side, but Angular provides helpers to make integration on the client side easier.</source>
          <target state="translated">Angularには、クロスサイトリクエストフォージェリ（CSRFまたはXSRF）とクロスサイトスクリプトインクルージョン（XSSI）の2つの一般的なHTTP脆弱性を防ぐための組み込みサポートがあります。 これらは両方とも主にサーバー側で軽減する必要がありますが、Angularはクライアント側での統合を容易にするヘルパーを提供します。</target>
        </trans-unit>
        <trans-unit id="75f9cada0487eab03f3583131e1b6541f4ca7704" translate="yes">
          <source>Angular has its own vocabulary. Most Angular terms are common English words or computing terms that have a specific meaning within the Angular system.</source>
          <target state="translated">Angularには独自の語彙があります。 ほとんどのAngular用語は、Angularシステム内で特定の意味を持つ一般的な英語の単語または計算用語です。</target>
        </trans-unit>
        <trans-unit id="020323b35fdea984dabd628de596cd425d7e51fa" translate="yes">
          <source>Angular has more pre-defined directives that either alter the layout structure (for example, &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;ngSwitch&lt;/a&gt;) or modify aspects of DOM elements and components (for example, &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;ngStyle&lt;/a&gt; and &lt;a href=&quot;template-syntax#ngClass&quot;&gt;ngClass&lt;/a&gt;).</source>
          <target state="translated">Angularには、レイアウト構造（ &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;ngSwitchなど&lt;/a&gt; ）を変更するか、DOM要素およびコンポーネントの側面（ &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;ngStyle&lt;/a&gt;や&lt;a href=&quot;template-syntax#ngClass&quot;&gt;ngClassなど&lt;/a&gt; ）を変更する定義済みのディレクティブがさらにあります。</target>
        </trans-unit>
        <trans-unit id="1686cbfe82438a65326efb7fbfc9ed594c24a6e5" translate="yes">
          <source>Angular has true template input variables that are explicitly defined using the &lt;code&gt;let&lt;/code&gt; keyword.</source>
          <target state="translated">Angularには、 &lt;code&gt;let&lt;/code&gt; キーワードを使用して明示的に定義された真のテンプレート入力変数があります。</target>
        </trans-unit>
        <trans-unit id="9aa8ff3ec993f9613874918fdca308390a782abe" translate="yes">
          <source>Angular ignores changes within (composite) objects. It won't call a pure pipe if you change an input month, add to an input array, or update an input object property.</source>
          <target state="translated">Angularは（複合）オブジェクト内の変更を無視します。 入力月を変更したり、入力配列に追加したり、入力オブジェクトのプロパティを更新したりしても、純粋なパイプは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="b9ea659473cf06cf26e6026f2da7a0eb79db0ddc" translate="yes">
          <source>Angular instead inspects directive and component classes and calls the hook methods &lt;em&gt;if they are defined&lt;/em&gt;. Angular finds and calls methods like &lt;code&gt;ngOnInit()&lt;/code&gt;, with or without the interfaces.</source>
          <target state="translated">代わりに、Angularはディレクティブクラスとコンポーネントクラスを検査&lt;em&gt;し、定義されている場合&lt;/em&gt;はフックメソッドを呼び出します。 Angularは、インターフェースの有無にかかわらず、 &lt;code&gt;ngOnInit()&lt;/code&gt; などのメソッドを検索して呼び出します。</target>
        </trans-unit>
        <trans-unit id="5b42b26f4e53b4e9e433f908be1ae23996faf473" translate="yes">
          <source>Angular is a collection of many packages, sub-projects, and tools. To prevent accidental use of private APIs&amp;mdash;and so that you can clearly understand what is covered by the practices described here&amp;mdash;we document what is and is not considered our public API surface. For details, see &lt;a href=&quot;https://github.com/angular/angular/blob/master/docs/PUBLIC_API.md&quot;&gt;Supported Public API Surface of Angular&lt;/a&gt;.</source>
          <target state="translated">Angularは、多くのパッケージ、サブプロジェクト、およびツールのコレクションです。 プライベートAPIの偶発的な使用を防ぎ、ここで説明するプラクティスの対象を明確に理解できるように、パブリックAPIの表面と見なされるものと見なされないものを文書化します。 詳細については、「 &lt;a href=&quot;https://github.com/angular/angular/blob/master/docs/PUBLIC_API.md&quot;&gt;AngularのサポートされているパブリックAPIサーフェス」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cedb8ef1bd5824f0f32e164656ec8ed996c2415d" translate="yes">
          <source>Angular is a platform and framework for building client applications in HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your apps.</source>
          <target state="translated">Angularは、HTMLおよびTypeScriptでクライアントアプリケーションを構築するためのプラットフォームおよびフレームワークです。 AngularはTypeScriptで記述されています。 アプリにインポートするTypeScriptライブラリのセットとして、コアおよびオプション機能を実装します。</target>
        </trans-unit>
        <trans-unit id="944adaf5cf94f6c56a0403bf343031231a5680bd" translate="yes">
          <source>Angular is a reimagined version of the best parts of AngularJS. In that sense, its goals are the same as the AngularJS Style Guide's: To preserve the good parts of AngularJS, and to avoid the bad parts. There's a lot more to Angular than just that of course, but this does mean that &lt;em&gt;following the style guide helps make your AngularJS app more closely aligned with Angular&lt;/em&gt;.</source>
          <target state="translated">Angularは、AngularJSの最高の部分を再構築したバージョンです。 その意味では、その目標はAngularJSスタイルガイドと同じです：AngularJSの良い部分を保存し、悪い部分を避けること。 もちろん、Angularにはそれだけではありませんが&lt;em&gt;、スタイルガイドに従うことで、AngularJSアプリとAngularをより密接に連携させることができます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdbe94ed1821482a4bf72519359a4832dfb721ff" translate="yes">
          <source>Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the root component of the application.</source>
          <target state="translated">Angularが最初にブートストラップされます。 AngularJSは2番目にブートストラップされます。 AngularJSは常にアプリケーションのルートコンポーネントを所有しています。</target>
        </trans-unit>
        <trans-unit id="67c408d51f3d9541622ae37dc07fd998e2b6d4a6" translate="yes">
          <source>Angular is built on the latest standards of the web platform. Targeting such a wide range of browsers is challenging because they do not support all features of modern browsers. You compensate by loading polyfill scripts (&quot;polyfills&quot;) for the browsers that you must support. The &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;table below&lt;/a&gt; identifies most of the polyfills you might need.</source>
          <target state="translated">Angularは、Webプラットフォームの最新の標準に基づいて構築されています。 このような幅広いブラウザをターゲットにすることは、最新のブラウザのすべての機能をサポートしていないため、困難です。 サポートする必要のあるブラウザーのポリフィルスクリプト（「ポリフィル」）を読み込むことで補正します。 次の&lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;表&lt;/a&gt;に、必要なポリフィルのほとんどを示します。</target>
        </trans-unit>
        <trans-unit id="e7c5a8227c920abc2ab831e8b743010e5cec1f51" translate="yes">
          <source>Angular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM. That improves performance, especially in larger projects when conditionally including or excluding big chunks of HTML with many data bindings.</source>
          <target state="translated">Angularはメッセージを表示したり隠したりしていません。 DOMから段落要素を追加および削除しています。 特に、多くのデータバインディングを含む大きなHTMLチャンクを条件付きで含めたり除外したりする場合の大規模プロジェクトで、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="bfddc46758f816dd29441664cdec5b402661cdef" translate="yes">
          <source>Angular knows that the &lt;code&gt;defaultColor&lt;/code&gt; binding belongs to the &lt;code&gt;HighlightDirective&lt;/code&gt; because you made it &lt;em&gt;public&lt;/em&gt; with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">@Inputデコレータで&lt;em&gt;公開&lt;/em&gt;したため、Angularは &lt;code&gt;defaultColor&lt;/code&gt; バインディングが &lt;code&gt;HighlightDirective&lt;/code&gt; に属していることを知っています 。</target>
        </trans-unit>
        <trans-unit id="6520112c4953366a0de588a54b18493a41a7c8f8" translate="yes">
          <source>Angular libraries</source>
          <target state="translated">Angularライブラリ</target>
        </trans-unit>
        <trans-unit id="3f426e8d596d5b3588e555663b8f3b96dfed3e9f" translate="yes">
          <source>Angular libraries are NgModules, such as &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. Many third-party libraries are available as NgModules such as &lt;a href=&quot;https://material.angular.io/&quot;&gt;Material Design&lt;/a&gt;, &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt;, and &lt;a href=&quot;https://github.com/angular/angularfire2&quot;&gt;AngularFire2&lt;/a&gt;.</source>
          <target state="translated">Angularライブラリは、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; などのNgModuleです。 &lt;a href=&quot;https://material.angular.io/&quot;&gt;Material Design&lt;/a&gt; 、 &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt; 、AngularFire2などの多くのサードパーティライブラリがNgModuleとして利用可能です。</target>
        </trans-unit>
        <trans-unit id="dad4b4472bc88f1f5698b422a998c38c20704e3c" translate="yes">
          <source>Angular libraries have this option to ensure that all Angular &lt;code&gt;.metadata.json&lt;/code&gt; files are clean and it is a best practice to do the same when building your own libraries.</source>
          <target state="translated">Angularライブラリには、すべてのAngular &lt;code&gt;.metadata.json&lt;/code&gt; ファイルがクリーンであることを保証するためのこのオプションがあり、独自のライブラリを構築するときに同じことを行うことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="be3f78b53fc2c577daabc8bc52b4aa660d4e9dae" translate="yes">
          <source>Angular libraries should list all &lt;code&gt;@angular/*&lt;/code&gt; dependencies as peer dependencies. This ensures that when modules ask for Angular, they all get the exact same module. If a library lists &lt;code&gt;@angular/core&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;peerDependencies&lt;/code&gt;, it might get a different Angular module instead, which would cause your application to break.</source>
          <target state="translated">Angularライブラリは、すべての &lt;code&gt;@angular/*&lt;/code&gt; 依存関係をピア依存関係としてリストする必要があります。 これにより、モジュールがAngularを要求したときに、すべてがまったく同じモジュールを取得することが保証されます。 ライブラリが &lt;code&gt;peerDependencies&lt;/code&gt; ではなく &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;@angular/core&lt;/code&gt; リストしている場合、代わりに別のAngularモジュールを取得する可能性があり、これによりアプリケーションが破損します。</target>
        </trans-unit>
        <trans-unit id="a25634352050885006a3b6152b0eb2a9010080c0" translate="yes">
          <source>Angular loads a component declaratively when using the component's selector to locate the element in the template. Angular then creates the HTML representation of the component and inserts it into the DOM at the selected element. These aren't entry components.</source>
          <target state="translated">コンポーネントのセレクターを使用してテンプレート内の要素を見つけると、Angularはコンポーネントを宣言的にロードします。 次に、AngularはコンポーネントのHTML表現を作成し、選択した要素でDOMに挿入します。 これらはエントリコンポーネントではありません。</target>
        </trans-unit>
        <trans-unit id="995f2b8032fa111ae2d621211fc7064ea0317af9" translate="yes">
          <source>Angular loads a root &lt;code&gt;AppComponent&lt;/code&gt; dynamically because it's listed by type in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; タイプ別にリストされているため、Angularはルート &lt;code&gt;AppComponent&lt;/code&gt; を動的にロードします。</target>
        </trans-unit>
        <trans-unit id="08a4bd02cf20c2f65095b4e5963e1bb2afe416d9" translate="yes">
          <source>Angular loads as a collection of JavaScript modules. You can think of them as library modules. Each Angular library name begins with the &lt;code&gt;@angular&lt;/code&gt; prefix. Install them with the node package manager &lt;code&gt;npm&lt;/code&gt; and import parts of them with JavaScript &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="translated">JavaScriptモジュールのコレクションとしてのAngularロード。 それらはライブラリモジュールと考えることができます。 各Angularライブラリ名は &lt;code&gt;@angular&lt;/code&gt; プレフィックスで始まります。 ノードパッケージマネージャー &lt;code&gt;npm&lt;/code&gt; でそれらをインストールし、JavaScript &lt;code&gt;import&lt;/code&gt; ステートメントでそれらの一部をインポートします。</target>
        </trans-unit>
        <trans-unit id="853e166961741611ece2f458d671b607ed487c72" translate="yes">
          <source>Angular looks for changes to data-bound values through a &lt;em&gt;change detection&lt;/em&gt; process that runs after every DOM event: every keystroke, mouse move, timer tick, and server response. This could be expensive. Angular strives to lower the cost whenever possible and appropriate.</source>
          <target state="translated">Angularは、すべてのDOMイベント（すべてのキーストローク、マウスの移動、タイマーティック、サーバー応答）の後に実行される&lt;em&gt;変更検出&lt;/em&gt;プロセスを通じて、データバインド値の変更を探します。 これは費用がかかる可能性があります。 Angularは、可能な限り適切な場合には、コストを削減するよう努めています。</target>
        </trans-unit>
        <trans-unit id="698612677c72d7d99a71306fe64680c45b867fa2" translate="yes">
          <source>Angular makes no use of the &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;form-group&lt;/code&gt;, &lt;code&gt;form-control&lt;/code&gt;, and &lt;code&gt;btn&lt;/code&gt; classes or the styles of any external library. Angular apps can use any CSS library or none at all.</source>
          <target state="translated">Angularは &lt;code&gt;container&lt;/code&gt; 、 &lt;code&gt;form-group&lt;/code&gt; 、 &lt;code&gt;form-control&lt;/code&gt; 、および &lt;code&gt;btn&lt;/code&gt; クラスや外部ライブラリのスタイルを使用しません。 Angularアプリは、CSSライブラリを使用することも、まったく使用しないこともできます。</target>
        </trans-unit>
        <trans-unit id="d8d1474460cc15db876a17834bf926386371bf34" translate="yes">
          <source>Angular makes the process easy by handling many of the repetitive, boilerplate tasks you'd otherwise wrestle with yourself.</source>
          <target state="translated">Angularは、そうでなければ自分で取り組まなければならない反復的な定型的なタスクの多くを処理することで、プロセスを簡単にします。</target>
        </trans-unit>
        <trans-unit id="733393efef5ce43977efcba35cca922753ae83e7" translate="yes">
          <source>Angular makes use of observables as an interface to handle a variety of common asynchronous operations. For example:</source>
          <target state="translated">Angularは、さまざまな一般的な非同期操作を処理するためのインターフェイスとしてオブザーバブルを使用します。 例えば：</target>
        </trans-unit>
        <trans-unit id="c952b87a2d4235b4fa18e60db17580ca8f99e1d9" translate="yes">
          <source>Angular modularity</source>
          <target state="translated">Angularモジュール</target>
        </trans-unit>
        <trans-unit id="f60bec56de0d46a0d6f36063b2d445f9aa6ecf52" translate="yes">
          <source>Angular modules</source>
          <target state="translated">Angularモジュール</target>
        </trans-unit>
        <trans-unit id="5d2b463cfcddb80a14ef8505352142925769b3e0" translate="yes">
          <source>Angular needs to know how the pieces of your application fit together and what other files and libraries the app requires. This information is called &lt;em&gt;metadata&lt;/em&gt;.</source>
          <target state="translated">Angularは、アプリケーションの各部分がどのように組み合わされるか、アプリが必要とする他のファイルやライブラリを知る必要があります。 この情報は&lt;em&gt;メタデータ&lt;/em&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c8907e4049cbb49a2de258115f28db0236a6b67a" translate="yes">
          <source>Angular offers &lt;strong&gt;lifecycle hooks&lt;/strong&gt; that provide visibility into these key life moments and the ability to act when they occur.</source>
          <target state="translated">Angularは、これらの重要なライフモーメントを可視化し、発生したときに行動する機能を提供する&lt;strong&gt;ライフサイクルフック&lt;/strong&gt;を提供します。</target>
        </trans-unit>
        <trans-unit id="d76e449c5b5a82a11aa58826c48ff9172d4b34e4" translate="yes">
          <source>Angular offers a special &lt;em&gt;two-way data binding&lt;/em&gt; syntax for this purpose, &lt;code&gt;[()]&lt;/code&gt;. The &lt;code&gt;[()]&lt;/code&gt; syntax combines the brackets of property binding, &lt;code&gt;[]&lt;/code&gt;, with the parentheses of event binding, &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">Angularは、この目的のための特別な&lt;em&gt;双方向データバインディング&lt;/em&gt;構文 &lt;code&gt;[()]&lt;/code&gt; ます。 &lt;code&gt;[()]&lt;/code&gt; 構文は、プロパティバインディングの括弧 &lt;code&gt;[]&lt;/code&gt; をイベントバインディングの括弧（）と組み合わせます。</target>
        </trans-unit>
        <trans-unit id="0b96c491c78ad4254c4a00563220ea3cb04a021b" translate="yes">
          <source>Angular offers many more capabilities, and you now have a foundation that empowers you to build an application and explore those other capabilities:</source>
          <target state="translated">Angularはさらに多くの機能を提供し、アプリケーションを構築して他の機能を探索するための基盤ができました。</target>
        </trans-unit>
        <trans-unit id="abc451db75214bb8f5bb03f627de0240f5b091b0" translate="yes">
          <source>Angular offers two kinds of built-in directives: attribute directives and structural directives. This segment reviews some of the most common built-in directives, classified as either &lt;a href=&quot;template-syntax#attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directives&lt;/a&gt; or &lt;a href=&quot;template-syntax#structural-directives&quot;&gt;&lt;em&gt;structural&lt;/em&gt; directives&lt;/a&gt; and has its own &lt;span name=&quot;built-in-directives&quot;&gt;built-in directives example&lt;/span&gt;.</source>
          <target state="translated">Angularは、属性ディレクティブと構造ディレクティブの2種類の組み込みディレクティブを提供します。 このセグメントでは、 &lt;a href=&quot;template-syntax#attribute-directives&quot;&gt;&lt;em&gt;属性&lt;/em&gt;ディレクティブ&lt;/a&gt;または&lt;a href=&quot;template-syntax#structural-directives&quot;&gt;&lt;em&gt;構造&lt;/em&gt;ディレクティブの&lt;/a&gt;いずれかに分類される最も一般的な組み込みディレクティブのいくつかをレビューし、独自の&lt;span name=&quot;built-in-directives&quot;&gt;組み込みディレクティブの例を示してい&lt;/span&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f6ecdff766f22fe112f392e3b5f72cdc4a54fa55" translate="yes">
          <source>Angular offers two ways to compile your application:</source>
          <target state="translated">Angularは、アプリケーションをコンパイルする2つの方法を提供します。</target>
        </trans-unit>
        <trans-unit id="46473abcb3dc6366d18741a180865bfdefc2a988" translate="yes">
          <source>Angular only allows directives to apply on CSS selectors that do not cross element boundaries.</source>
          <target state="translated">Angularでは、要素の境界を越えないCSSセレクターにのみディレクティブを適用できます。</target>
        </trans-unit>
        <trans-unit id="ab4a735a9f53cef22a8e09069eaf331c806e03b7" translate="yes">
          <source>Angular only binds to &lt;em&gt;public&lt;/em&gt; component properties.</source>
          <target state="translated">Angularは、 &lt;em&gt;パブリック&lt;/em&gt;コンポーネントプロパティにのみバインドします。</target>
        </trans-unit>
        <trans-unit id="0796c5a0e37f43354cb8a990d1da6f63a399b35c" translate="yes">
          <source>Angular only calls the hook when the value of the input property changes. The value of the &lt;code&gt;hero&lt;/code&gt; property is the &lt;em&gt;reference to the hero object&lt;/em&gt;. Angular doesn't care that the hero's own &lt;code&gt;name&lt;/code&gt; property changed. The hero object &lt;em&gt;reference&lt;/em&gt; didn't change so, from Angular's perspective, there is no change to report!</source>
          <target state="translated">Angularは、入力プロパティの値が変更されたときにのみフックを呼び出します。 &lt;code&gt;hero&lt;/code&gt; プロパティの値は、 &lt;em&gt;ヒーローオブジェクトへの参照&lt;/em&gt;です。 Angularは、ヒーローの &lt;code&gt;name&lt;/code&gt; プロパティが変更されたことを気にしません。 ヒーローオブジェクト&lt;em&gt;参照&lt;/em&gt;は変更されなかったため、Angularの観点からは、報告する変更はありません！</target>
        </trans-unit>
        <trans-unit id="73365649ff96710832ccaf130004428d6aa4b134" translate="yes">
          <source>Angular only matches selectors and pipe names for classes that are declared by this module or exported by a module that this module imports.</source>
          <target state="translated">Angularは、このモジュールによって宣言されているか、このモジュールがインポートするモジュールによってエクスポートされているクラスのセレクターとパイプ名にのみ一致します。</target>
        </trans-unit>
        <trans-unit id="8f7a44453028015a36d7371b079e0572cb894294" translate="yes">
          <source>Angular packages</source>
          <target state="translated">Angularパッケージ</target>
        </trans-unit>
        <trans-unit id="6b8abf66079d4d2aea96a3f990cecede4a31001d" translate="yes">
          <source>Angular picks a simpler, faster change detection algorithm when you use a pipe.</source>
          <target state="translated">パイプを使用すると、Angularはよりシンプルで高速な変更検出アルゴリズムを選択します。</target>
        </trans-unit>
        <trans-unit id="ef398c20fe5cffcede85fd0486274f77bc4fc926" translate="yes">
          <source>Angular pipes can help you with internationalization: the &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt; use locale data to format data based on the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angularパイプは国際化に役立ちます： &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt; は、ロケールデータを使用して &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; に基づいてデータをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="356e1f5698485995ec39cd81b77ba95feef0a58a" translate="yes">
          <source>Angular pipes let you declare display-value transformations in your template HTML. A class with the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator defines a function that transforms input values to output values for display in a view.</source>
          <target state="translated">Angularパイプを使用すると、テンプレートHTMLで表示値の変換を宣言できます。 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; デコレータを持つクラスは、ビューに表示するために入力値を出力値に変換する関数を定義します。</target>
        </trans-unit>
        <trans-unit id="991be4c3543e8e594fad4f932af19f57bb79c179" translate="yes">
          <source>Angular previously has supported an integration with the Web Tracing Framework (WTF) for performance testing of Angular applications. This integration has not been maintained and likely does not work for the majority of Angular applications today. As a result, we are deprecating the integration in Angular version 8.</source>
          <target state="translated">Angularは以前、AngularアプリケーションのパフォーマンステストのためにWeb Tracing Framework（WTF）との統合をサポートしていました。 この統合は維持されておらず、現在のAngularアプリケーションの大部分では機能しない可能性があります。 その結果、Angularバージョン8での統合は廃止されます。</target>
        </trans-unit>
        <trans-unit id="6ab7532910f8e47c865be64a0bfffac882f25041" translate="yes">
          <source>Angular processes &lt;em&gt;all&lt;/em&gt; data bindings once for each JavaScript event cycle, from the root of the application component tree through all child components.</source>
          <target state="translated">Angularは、アプリケーションコンポーネントツリーのルートからすべての子コンポーネントまで、JavaScriptイベントサイクルごとに&lt;em&gt;すべての&lt;/em&gt;データバインディングを1回処理&lt;em&gt;し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4bfe0e1a65f34be08732e68dc2f47387fc26057f" translate="yes">
          <source>Angular provides a built-in module loader that supports SystemJS to load modules asynchronously. If you were using another bundling tool, such as Webpack, you would use the Webpack mechanism for asynchronously loading modules.</source>
          <target state="translated">Angularは、モジュールを非同期にロードするSystemJSをサポートする組み込みモジュールローダーを提供します。 Webpackなどの別のバンドルツールを使用している場合は、Webpackメカニズムを使用してモジュールを非同期にロードします。</target>
        </trans-unit>
        <trans-unit id="26ab5724f97b042d8e6c3e60e5d984f689e157a5" translate="yes">
          <source>Angular provides a number of built-in injection-token constants that you can use to customize the behavior of various systems.</source>
          <target state="translated">Angularには、さまざまなシステムの動作をカスタマイズするために使用できる組み込みのインジェクショントークン定数が多数用意されています。</target>
        </trans-unit>
        <trans-unit id="b3c5e069bb7f86fbf8b8fc59544cf9cae9badc49" translate="yes">
          <source>Angular provides a set of schematics for use with the CLI. See the &lt;a href=&quot;cli&quot;&gt;Angular CLI command reference&lt;/a&gt;. The &lt;a href=&quot;cli/add&quot;&gt;&lt;code&gt;ng add&lt;/code&gt;&lt;/a&gt; command runs schematics as part of adding a library to your project. The &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate&lt;/code&gt;&lt;/a&gt; command runs schematics to create apps, libraries, and Angular code constructs.</source>
          <target state="translated">Angularは、CLIで使用するための一連の回路図を提供します。 &lt;a href=&quot;cli&quot;&gt;Angular CLIコマンドリファレンスを参照してください&lt;/a&gt; 。 &lt;a href=&quot;cli/add&quot;&gt; &lt;code&gt;ng add&lt;/code&gt; &lt;/a&gt;コマンドは、プロジェクトにライブラリを追加する一環として回路図を実行します。 &lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate&lt;/code&gt; &lt;/a&gt;コマンドは、回路図を実行して、アプリ、ライブラリ、およびAngularコード構成を作成します。</target>
        </trans-unit>
        <trans-unit id="542775cd7da8f6f4765aa0bb672705ccbe83ec20" translate="yes">
          <source>Angular provides advanced capabilities for mobile apps, animation, internationalization, server-side rendering, and more.</source>
          <target state="translated">Angularは、モバイルアプリ、アニメーション、国際化、サーバー側レンダリングなどの高度な機能を提供します。</target>
        </trans-unit>
        <trans-unit id="dd1639fcd16106284432fd62af8a0553b09d8af2" translate="yes">
          <source>Angular provides an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; class that is used when publishing values from a component through the &lt;a href=&quot;template-syntax#how-to-use-output&quot;&gt;&lt;code&gt;@Output()&lt;/code&gt; decorator&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; extends &lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt;&lt;/a&gt;, adding an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; method so it can send arbitrary values. When you call &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt;, it passes the emitted value to the &lt;code&gt;next()&lt;/code&gt; method of any subscribed observer.</source>
          <target state="translated">Angularは、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;template-syntax#how-to-use-output&quot;&gt; &lt;code&gt;@Output()&lt;/code&gt; デコレーターを&lt;/a&gt;介してコンポーネントから値を公開するときに使用されるEventEmitterクラスを提供します。 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt; &lt;/a&gt;を拡張し、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; メソッドを追加して、任意の値を送信できるようにします。 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; を呼び出すと、サブスクライブされたオブザーバーの &lt;code&gt;next()&lt;/code&gt; メソッドに発行された値を渡します。</target>
        </trans-unit>
        <trans-unit id="3ee46a639825d9725e9da43cb62b0f60f904e60a" translate="yes">
          <source>Angular provides many kinds of data-binding. Binding types can be grouped into three categories distinguished by the direction of data flow:</source>
          <target state="translated">Angularは、多くの種類のデータバインディングを提供します。 バインディングタイプは、データフローの方向によって区別される3つのカテゴリにグループ化できます。</target>
        </trans-unit>
        <trans-unit id="eb6bbbf3a5e95ea73ec84dc48e2d08bd47f217b5" translate="yes">
          <source>Angular provides some builders that are used by the CLI for commands such as &lt;code&gt;ng build&lt;/code&gt;, &lt;code&gt;ng test&lt;/code&gt;, and &lt;code&gt;ng lint&lt;/code&gt;. Default target configurations for these and other built-in CLI builders can be found (and customized) in the &quot;architect&quot; section of the &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration file&lt;/a&gt;, &lt;code&gt;angular.json&lt;/code&gt;. You can also extend and customize Angular by creating your own builders, which you can run using the &lt;a href=&quot;cli/run&quot;&gt;&lt;code&gt;ng run&lt;/code&gt; CLI command&lt;/a&gt;.</source>
          <target state="translated">Angularは、 &lt;code&gt;ng build&lt;/code&gt; 、 &lt;code&gt;ng test&lt;/code&gt; 、および &lt;code&gt;ng lint&lt;/code&gt; などのコマンドのためにCLIによって使用されるいくつかのビルダーを提供します。 これらおよびその他のビルトインCLI Builderのデフォルトのターゲット構成は、 &lt;a href=&quot;workspace-config&quot;&gt;ワークスペース構成ファイル&lt;/a&gt; 、 &lt;code&gt;angular.json&lt;/code&gt; の「architect」セクションにあります （およびカスタマイズされています ）。 また、 &lt;a href=&quot;cli/run&quot;&gt; &lt;code&gt;ng run&lt;/code&gt; CLIコマンド&lt;/a&gt;を使用して実行できる独自のビルダーを作成して、Angularを拡張およびカスタマイズすることもできます 。</target>
        </trans-unit>
        <trans-unit id="54e1fe50f3cab60a422c1f61c16b90ad321a060b" translate="yes">
          <source>Angular provides some injectable abstractions over these objects, such as &lt;a href=&quot;../api/common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../api/common/document&quot;&gt;&lt;code&gt;DOCUMENT&lt;/code&gt;&lt;/a&gt;; it may substitute adequately for these APIs. If Angular doesn't provide it, it's possible to write new abstractions that delegate to the browser APIs while in the browser and to an alternative implementation while on the server (aka shimming).</source>
          <target state="translated">Angularは、 &lt;a href=&quot;../api/common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../api/common/document&quot;&gt; &lt;code&gt;DOCUMENT&lt;/code&gt; &lt;/a&gt;など、これらのオブジェクトに対して注入可能な抽象化を提供します。 これらのAPIを適切に置き換えることができます。 Angularがそれを提供しない場合、ブラウザー内ではブラウザーAPIに委任し、サーバー上では別名実装（別名シミング）に委任する新しい抽象化を記述することができます。</target>
        </trans-unit>
        <trans-unit id="0d8f440b029f6084e216f022e4aad088e8ed5e77" translate="yes">
          <source>Angular provides the &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function for converting an Angular component, together with its dependencies, to a custom element. The function collects the component's observable properties, along with the Angular functionality the browser needs to create and destroy instances, and to detect and respond to changes.</source>
          <target state="translated">Angularは、Angularコンポーネントとその依存関係をカスタム要素に変換する &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 関数を提供します。 この関数は、ブラウザがインスタンスを作成および破棄し、変更を検出して応答するために必要なAngular機能とともに、コンポーネントの監視可能なプロパティを収集します。</target>
        </trans-unit>
        <trans-unit id="30e1cd4051db96810a5d5e1dbab2055cb8d90a11" translate="yes">
          <source>Angular provides two different approaches to handling user input through forms: reactive and template-driven. Both capture user input events from the view, validate the user input, create a form model and data model to update, and provide a way to track changes.</source>
          <target state="translated">Angularは、フォームを介したユーザー入力を処理するために、リアクティブとテンプレート駆動の2つの異なるアプローチを提供しています。 どちらも、ビューからユーザー入力イベントをキャプチャし、ユーザー入力を検証し、更新するフォームモデルとデータモデルを作成し、変更を追跡する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="4023aa2209d987433d511efd5c6272087b321931" translate="yes">
          <source>Angular recognizes the directive's role in the validation process because the directive registers itself with the &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; provider, a provider with an extensible collection of validators.</source>
          <target state="translated">Angularは、検証プロセスでのディレクティブの役割を認識します。これは、ディレクティブが、 &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; プロバイダー（拡張可能なバリデーターのコレクションを持つプロバイダー）に登録されるためです。</target>
        </trans-unit>
        <trans-unit id="378a56a09a2bc8c55214ba40b10672b984ed51c4" translate="yes">
          <source>Angular recognizes the value as unsafe and automatically sanitizes it, which removes the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag but keeps safe content such as the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">Angularは値を安全でないと認識し、自動的にサニタイズします。これにより、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグは削除されますが、 &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; 要素などの安全なコンテンツは保持されます。</target>
        </trans-unit>
        <trans-unit id="a124b894fc0aadcd5a3d3d6b85932c692b5117df" translate="yes">
          <source>Angular registers all startup module providers with the application root injector. The services that root injector providers create have application scope, which means they are available to the entire application.</source>
          <target state="translated">Angularは、すべてのスタートアップモジュールプロバイダーをアプリケーションルートインジェクターに登録します。 ルートインジェクタープロバイダーが作成するサービスにはアプリケーションスコープがあります。つまり、アプリケーション全体で利用できます。</target>
        </trans-unit>
        <trans-unit id="925daa517f76b33161b91ea28daef5e4bea3e10e" translate="yes">
          <source>Angular registers its own providers with every injector, for services that Angular defines. You can register your own providers for services that your app needs.</source>
          <target state="translated">Angularは、Angularが定義するサービスのために、すべてのインジェクターに独自のプロバイダーを登録します。 アプリが必要とするサービスの独自のプロバイダーを登録できます。</target>
        </trans-unit>
        <trans-unit id="63df769c252c01cddc5b9fc4a5c36530656fab5b" translate="yes">
          <source>Angular registers these providers with the NgModule's injector. If it is the NgModule used for bootstrapping then it is the root injector.</source>
          <target state="translated">AngularはこれらのプロバイダーをNgModuleのインジェクターに登録します。 ブートストラップに使用されるNgModuleの場合、それはルートインジェクターです。</target>
        </trans-unit>
        <trans-unit id="94f603c4b0f5b4c970534ab64ea69e7b16cf94f8" translate="yes">
          <source>Angular relies on the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; abstraction to work safely across &lt;em&gt;all supported platforms&lt;/em&gt;. Instead of creating an HTML element tree, Angular creates a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; tree that wraps the &lt;em&gt;native elements&lt;/em&gt; for the runtime platform. The &lt;code&gt;nativeElement&lt;/code&gt; property unwraps the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; and returns the platform-specific element object.</source>
          <target state="translated">Angularは、 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 抽象化に依存して、 &lt;em&gt;サポートされ&lt;/em&gt;ている&lt;em&gt;すべてのプラットフォームで&lt;/em&gt;安全に動作&lt;em&gt;します&lt;/em&gt; 。 Angularは、HTML要素ツリーを作成する代わりに、ランタイムプラットフォームの&lt;em&gt;ネイティブ要素&lt;/em&gt;をラップする &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; ツリーを作成します。 &lt;code&gt;nativeElement&lt;/code&gt; プロパティは、DebugElementの &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; し、プラットフォーム固有の要素オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6599d35b316da91d120de3a4ffc0e370ef3d5559" translate="yes">
          <source>Angular relies on zone.js to run Angular's change detection processes when native JavaScript operations raise events. Zone.js is an implementation of a &lt;a href=&quot;https://gist.github.com/mhevery/63fdcdf7c65886051d55&quot;&gt;specification&lt;/a&gt; currently before the &lt;a href=&quot;http://www.ecma-international.org/memento/TC39.htm&quot;&gt;TC39&lt;/a&gt; committee that determines standards for the JavaScript language.</source>
          <target state="translated">Angularは、ネイティブJavaScript操作がイベントを発生させたときに、Angularの変更検出プロセスを実行するためにzone.jsに依存しています。 Zone.jsは、現在JavaScript言語の標準を決定する&lt;a href=&quot;http://www.ecma-international.org/memento/TC39.htm&quot;&gt;TC39&lt;/a&gt;委員会の前の&lt;a href=&quot;https://gist.github.com/mhevery/63fdcdf7c65886051d55&quot;&gt;仕様の&lt;/a&gt;実装です。</target>
        </trans-unit>
        <trans-unit id="400c95b463a974784a617426bfeda0f26de33b43" translate="yes">
          <source>Angular requires &lt;code&gt;Node.js&lt;/code&gt; version 10.9.0 or later.</source>
          <target state="translated">Angularには &lt;code&gt;Node.js&lt;/code&gt; バージョン10.9.0以降が必要です。</target>
        </trans-unit>
        <trans-unit id="bef32477f038457ec76edcd6fb2cb0f29b6948d9" translate="yes">
          <source>Angular sanitizes untrusted values for HTML, styles, and URLs; sanitizing resource URLs isn't possible because they contain arbitrary code. In development mode, Angular prints a console warning when it has to change a value during sanitization.</source>
          <target state="translated">Angularは、HTML、スタイル、およびURLの信頼できない値をサニタイズします。 リソースURLには任意のコードが含まれているため、リソースURLをサニタイズすることはできません。 開発モードでは、Angularはサニタイズ中に値を変更する必要がある場合にコンソール警告を出力します。</target>
        </trans-unit>
        <trans-unit id="95d6c94f88761a819224e7f7ef31c0e016974ef3" translate="yes">
          <source>Angular service worker introduction</source>
          <target state="translated">Angular Service Workerの紹介</target>
        </trans-unit>
        <trans-unit id="ece6de84f6157a2281fd204f372508b6e8936e9e" translate="yes">
          <source>Angular sets the &lt;code&gt;appUnless&lt;/code&gt; property whenever the value of the condition changes. Because the &lt;code&gt;appUnless&lt;/code&gt; property does work, it needs a setter.</source>
          <target state="translated">Angularは、条件の値が変更されるたびに &lt;code&gt;appUnless&lt;/code&gt; プロパティを設定します。 &lt;code&gt;appUnless&lt;/code&gt; プロパティは機能するため、セッターが必要です。</target>
        </trans-unit>
        <trans-unit id="b48433aa9a27d0daa63f87a6c53ae76ff80c318e" translate="yes">
          <source>Angular sets the constructor's &lt;code&gt;el&lt;/code&gt; parameter to the injected &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;. (An &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; is a wrapper around a DOM element, whose &lt;code&gt;nativeElement&lt;/code&gt; property exposes the DOM element for the directive to manipulate.)</source>
          <target state="translated">Angularは、コンストラクターの &lt;code&gt;el&lt;/code&gt; パラメーターを、挿入された &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; に設定します。 （ &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; は、DOM要素のラッパーであり、その &lt;code&gt;nativeElement&lt;/code&gt; プロパティは、操作するディレクティブのDOM要素を公開します。）</target>
        </trans-unit>
        <trans-unit id="0897472d9acb678fe4ea07d3a7bc055bd1af6070" translate="yes">
          <source>Angular ships as a collection of JavaScript modules (also called libraries). Each Angular library name begins with the &lt;code&gt;@angular&lt;/code&gt; prefix. Install Angular libraries with the &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm package manager&lt;/a&gt; and import parts of them with JavaScript &lt;code&gt;import&lt;/code&gt; declarations.</source>
          <target state="translated">AngularはJavaScriptモジュール（ライブラリとも呼ばれます）のコレクションとして出荷されます。 各Angularライブラリ名は &lt;code&gt;@angular&lt;/code&gt; プレフィックスで始まります。 &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npmパッケージマネージャーで&lt;/a&gt; Angularライブラリをインストールし、JavaScript &lt;code&gt;import&lt;/code&gt; 宣言でそれらの一部をインポートします。</target>
        </trans-unit>
        <trans-unit id="c2ed54e54eda3c09a0744999f1f67eb581505b10" translate="yes">
          <source>Angular simplifies the following aspects of internationalization:</source>
          <target state="translated">Angularは、国際化の次の側面を簡素化します。</target>
        </trans-unit>
        <trans-unit id="0b4571fc697e46d0f07cb794315e2abe97a50faa" translate="yes">
          <source>Angular strives to balance innovation and stability. Sometimes, APIs and features become obsolete and need to be removed or replaced so that Angular can stay current with new best practices, changing dependencies, or changes in the (web) platform itself.</source>
          <target state="translated">Angularは、革新と安定性のバランスをとるよう努めています。 時々、Angularが新しいベストプラクティス、依存関係の変更、または（Web）プラットフォーム自体の変更に対応できるように、APIと機能が廃止され、削除または交換する必要があります。</target>
        </trans-unit>
        <trans-unit id="5b3dd1bbaa7482ecb455dc8c4b78b8e67ed96278" translate="yes">
          <source>Angular supplies a number of built-in directives that begin with the &lt;code&gt;ng&lt;/code&gt; prefix. You can also create new directives to implement your own functionality. You associate a &lt;em&gt;selector&lt;/em&gt; (an HTML tag such as &lt;code&gt;&amp;lt;my-directive&amp;gt;&lt;/code&gt;) with a custom directive, thereby extending the &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt; that you can use in your apps.</source>
          <target state="translated">Angularは、 &lt;code&gt;ng&lt;/code&gt; プレフィックスで始まる多くの組み込みディレクティブを提供します。 新しいディレクティブを作成して、独自の機能を実装することもできます。 &lt;em&gt;セレクター&lt;/em&gt; （ &lt;code&gt;&amp;lt;my-directive&amp;gt;&lt;/code&gt; などのHTMLタグ）をカスタムディレクティブに関連付けて、アプリで使用できる&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;を拡張します。</target>
        </trans-unit>
        <trans-unit id="2bd39507a08adc6ad5177ae79d86f8ce148fdf68" translate="yes">
          <source>Angular supports &lt;em&gt;two-way data binding&lt;/em&gt;, a mechanism for coordinating the parts of a template with the parts of a component. Add binding markup to the template HTML to tell Angular how to connect both sides.</source>
          <target state="translated">Angularは、テンプレートの部分とコンポーネントの部分を調整するメカニズムである、 &lt;em&gt;双方向のデータバインディングを&lt;/em&gt;サポートしています。 バインディングマークアップをテンプレートHTMLに追加して、Angularに両側の接続方法を伝えます。</target>
        </trans-unit>
        <trans-unit id="7ea371269e61139c2a9831641c5589131284de96" translate="yes">
          <source>Angular supports most recent browsers. This includes the following specific versions:</source>
          <target state="translated">Angularは最新のブラウザをサポートしています。 これには、次の特定のバージョンが含まれます。</target>
        </trans-unit>
        <trans-unit id="e8e04243c1697b41d29fbfba8b823298c738e03c" translate="yes">
          <source>Angular templates are &lt;em&gt;dynamic&lt;/em&gt;. When Angular renders them, it transforms the DOM according to the instructions given by &lt;em&gt;directives&lt;/em&gt;. A directive is a class with a &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">Angularテンプレートは&lt;em&gt;動的&lt;/em&gt;です。 Angularがそれらをレンダリングするとき、 &lt;em&gt;directives&lt;/em&gt;によって与えられた指示に従ってDOMを変換します。 ディレクティブは、 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; デコレータを持つクラスです。</target>
        </trans-unit>
        <trans-unit id="75360540a862cda10bfe5d3cc9e4e3d8b9249e08" translate="yes">
          <source>Angular throws a cyclic dependency error if you omit the &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; デコレータを省略すると、Angularは周期的な依存関係エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="dffe45e60da8df6adcbb8bd717d7b920a8f70a40" translate="yes">
          <source>Angular throws an error if the hook updates the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately (try it!). The &lt;code&gt;LoggerService.tick_then()&lt;/code&gt; postpones the log update for one turn of the browser's JavaScript cycle and that's just long enough.</source>
          <target state="translated">フックがコンポーネントのデータバインド &lt;code&gt;comment&lt;/code&gt; プロパティをすぐに更新する（試してみてください）と、Angularはエラーをスローします。 &lt;code&gt;LoggerService.tick_then()&lt;/code&gt; は、ブラウザのJavaScriptサイクルの1ターンの間、ログの更新を延期しますが、これは十分な長さです。</target>
        </trans-unit>
        <trans-unit id="e332f37242cc9fcbbae5b381770424eb2cc4ab0e" translate="yes">
          <source>Angular throws an error if you haven't also decorated the property with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;. When the property is marked as optional, Angular sets &lt;code&gt;loggerService&lt;/code&gt; to null and the rest of the component adapts.</source>
          <target state="translated">@Optional &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; プロパティを装飾していない場合、Angularはエラーをスローします。 プロパティがオプションとしてマークされている場合、Angularは &lt;code&gt;loggerService&lt;/code&gt; をnullに設定し、残りのコンポーネントは適応します。</target>
        </trans-unit>
        <trans-unit id="5e4db9368e884831e9e20c6790dc42c39f7b1964" translate="yes">
          <source>Angular transforms the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in similar fashion from asterisk (*) syntax to &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;em&gt;element&lt;/em&gt;.</source>
          <target state="translated">Angularは、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; を同様の方法でアスタリスク（*）構文から &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; &lt;em&gt;要素に変換し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e67e3de40fe95a8c00d4dd1bff2697445d28684b" translate="yes">
          <source>Angular translates this instruction into an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; around the host element, then uses this template repeatedly to create a new set of elements and bindings for each &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; in the list. For more information about microsyntax, see the &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;Structural Directives&lt;/a&gt; guide.</source>
          <target state="translated">Angularは、この命令をホスト要素の周りの &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; に変換し、このテンプレートを繰り返し使用して、リスト内の各 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 要素とバインディングの新しいセットを作成します。 マイクロ構文の詳細については、 &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;構造ディレクティブ&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="d6acd0291e45c98173358bf8fc914f274d361be6" translate="yes">
          <source>Angular updates the bindings (and therefore the screen) only if the app does something in response to asynchronous events, such as keystrokes. This example code binds the &lt;code&gt;keyup&lt;/code&gt; event to the number 0, the shortest template statement possible. While the statement does nothing useful, it satisfies Angular's requirement so that Angular will update the screen.</source>
          <target state="translated">Angularは、キーストロークなどの非同期イベントに応答してアプリが何かを行った場合にのみ、バインディング（したがって画面）を更新します。 このサンプルコードは、 &lt;code&gt;keyup&lt;/code&gt; イベントを、可能な限り短いテンプレートステートメントである数値0にバインドします。 このステートメントは何の役にも立ちませんが、Angularが画面を更新するように、Angularの要件を満たします。</target>
        </trans-unit>
        <trans-unit id="550b4fe7f3f5d9e42a538e1d35676d32309e777c" translate="yes">
          <source>Angular used to rely on the browser to provide number, date, and currency formatting using browser i18n APIs. This practice meant that most apps needed to use a polyfill, users were seeing inconsistent results across browsers, and common formats (such as the currency pipe) didn&amp;rsquo;t match developer expectations out of the box.</source>
          <target state="translated">Angularは、ブラウザi18n APIを使用して数値、日付、通貨のフォーマットを提供するためにブラウザに依存していました。 このプラクティスは、ほとんどのアプリがポリフィルを使用する必要があり、ユーザーがブラウザー間で一貫性のない結果を目にし、一般的な形式（通貨パイプなど）がすぐに使用できる開発者の期待と一致しないことを意味しました。</target>
        </trans-unit>
        <trans-unit id="d34417d3060d2e52591c5133c737a9fc73577780" translate="yes">
          <source>Angular uses a third-party library called &lt;a href=&quot;http://reactivex.io/rxjs/&quot;&gt;Reactive Extensions (RxJS)&lt;/a&gt;.</source>
          <target state="translated">Angularは、 &lt;a href=&quot;http://reactivex.io/rxjs/&quot;&gt;Reactive Extensions（RxJS）&lt;/a&gt;と呼ばれるサードパーティライブラリを使用します。</target>
        </trans-unit>
        <trans-unit id="238cd9c643f7186f47327fa3f20d86506d261bf2" translate="yes">
          <source>Angular uses capitalization conventions to distinguish the names of various types, as described in the &lt;a href=&quot;styleguide#02-01&quot;&gt;naming guidelines section&lt;/a&gt; of the Style Guide. Here's a summary of the case types:</source>
          <target state="translated">Angularでは、スタイルガイドの&lt;a href=&quot;styleguide#02-01&quot;&gt;命名ガイドラインのセクション&lt;/a&gt;で説明されているように、大文字表記規則を使用してさまざまなタイプの名前を区別します。 ケースタイプの概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b23d17cee636d84970f89a7ad98f26ce7fdce1aa" translate="yes">
          <source>Angular uses object identity to select option. It's possible for the identities of items to change while the data does not. This can happen, for example, if the items are produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response will produce objects with different identities.</source>
          <target state="translated">AngularはオブジェクトIDを使用してオプションを選択します。 アイテムのIDは変更できますが、データは変更できません。 これは、たとえば、アイテムがRPCからサーバーに生成され、そのRPCが再実行される場合に発生する可能性があります。 データが変更されていなくても、2番目の応答は異なるIDを持つオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="afa3e2aab5eb44abf792978d1175dab7157473c8" translate="yes">
          <source>Angular uses object identity to track insertions and deletions within the iterator and reproduce those changes in the DOM. This has important implications for animations and any stateful controls that are present, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements that accept user input. Inserted rows can be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such as user input. For more on animations, see &lt;a href=&quot;../../guide/transition-and-triggers&quot;&gt;Transitions and Triggers&lt;/a&gt;.</source>
          <target state="translated">AngularはオブジェクトIDを使用して、イテレーター内の挿入と削除を追跡し、DOMでそれらの変更を再現します。 これは、アニメーションや、ユーザー入力を受け付ける &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素などの存在するステートフルコントロールに重要な意味を持ちます。 挿入された行はアニメーション化され、削除された行はアニメーション化され、未変更の行はユーザー入力などの未保存の状態を保持します。 アニメーションの詳細については、 &lt;a href=&quot;../../guide/transition-and-triggers&quot;&gt;遷移とトリガーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1cb885a8c762330f16faa7918e600c17bab6fcad" translate="yes">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;href&lt;/em&gt; directive. Place the element's &lt;code&gt;href&lt;/code&gt; property in square brackets and set it to a quoted template expression.</source>
          <target state="translated">Angularはプロパティバインディングを使用します。 組み込みの&lt;em&gt;href&lt;/em&gt;ディレクティブはありません。 要素の &lt;code&gt;href&lt;/code&gt; プロパティを角かっこで囲み 、引用符で囲まれたテンプレート式に設定します。</target>
        </trans-unit>
        <trans-unit id="72ad9c35cd585d33a4b440a583ddfd37683769b7" translate="yes">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;show&lt;/em&gt; directive. For hiding and showing elements, bind to the HTML &lt;code&gt;hidden&lt;/code&gt; property.</source>
          <target state="translated">Angularはプロパティバインディングを使用します。 組み込みの&lt;em&gt;show&lt;/em&gt;ディレクティブはありません。 要素を &lt;code&gt;hidden&lt;/code&gt; および表示するには、HTMLのhiddenプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="0b8039827d9181117e8916b7566b190665ccc87d" translate="yes">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;src&lt;/em&gt; directive. Place the &lt;code&gt;src&lt;/code&gt; property in square brackets and set it to a quoted template expression.</source>
          <target state="translated">Angularはプロパティバインディングを使用します。 組み込みの&lt;em&gt;src&lt;/em&gt;ディレクティブはありません。 &lt;code&gt;src&lt;/code&gt; プロパティを角かっこで囲み、引用符で囲まれたテンプレート式に設定します。</target>
        </trans-unit>
        <trans-unit id="6bc76e6d5243f1e5063ab51dd2791ed0cb2ccde1" translate="yes">
          <source>Angular version numbers have three parts: &lt;code&gt;major.minor.patch&lt;/code&gt;. For example, version 7.2.11 indicates major version 7, minor version 2, and patch level 11.</source>
          <target state="translated">Angularバージョン番号には、 &lt;code&gt;major.minor.patch&lt;/code&gt; の 3つの部分があります。 たとえば、バージョン7.2.11は、メジャーバージョン7、マイナーバージョン2、およびパッチレベル11を示します。</target>
        </trans-unit>
        <trans-unit id="e66d745516cc0cbdc5a199f2171badeb163e055a" translate="yes">
          <source>Angular version numbers indicate the level of changes that are introduced by the release. This use of &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt; helps you understand the potential impact of updating to a new version.</source>
          <target state="translated">Angularバージョン番号は、リリースで導入された変更のレベルを示します。 この&lt;a href=&quot;https://semver.org/&quot;&gt;セマンティックバージョニングの&lt;/a&gt;使用は、新しいバージョンへの更新の潜在的な影響を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="6667c0e19d01e9c6b4ce15412ca271371a87af6e" translate="yes">
          <source>Angular versioning</source>
          <target state="translated">Angularバージョン管理</target>
        </trans-unit>
        <trans-unit id="ae599289dc507efb8c0a1716c60673504ba85f7d" translate="yes">
          <source>Angular versions ^4.0.0 and ^5.0.0 are no longer under support.</source>
          <target state="translated">Angularバージョン^ 4.0.0および^ 5.0.0はサポートされなくなりました。</target>
        </trans-unit>
        <trans-unit id="50dcd5af91abd8b4ee5691549f133ec7e54a19b3" translate="yes">
          <source>Angular&amp;rsquo;s &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; returns observables from HTTP method calls. For instance, &lt;code&gt;http.get(&amp;lsquo;/api&amp;rsquo;)&lt;/code&gt; returns an observable. This provides several advantages over promise-based HTTP APIs:</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; は、HTTPメソッド呼び出しからオブザーバブルを返します。 たとえば、 &lt;code&gt;http.get(&amp;lsquo;/api&amp;rsquo;)&lt;/code&gt; はobservableを返します。 これにより、PromiseベースのHTTP APIに比べていくつかの利点が得られます。</target>
        </trans-unit>
        <trans-unit id="39d9244a49d87a2a7a6aedec6ed8bfecbe27e003" translate="yes">
          <source>Angular&amp;rsquo;s cross-site scripting security model</source>
          <target state="translated">Angularのクロスサイトスクリプティングセキュリティモデル</target>
        </trans-unit>
        <trans-unit id="361440e87ccdb1fecd73d942a162a4cb298411a7" translate="yes">
          <source>Angular's &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/compiler-cli/src/metadata/schema.ts&quot;&gt;schema.ts&lt;/a&gt; describes the JSON format as a collection of TypeScript interfaces.</source>
          <target state="translated">Angularの&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/compiler-cli/src/metadata/schema.ts&quot;&gt;schema.ts&lt;/a&gt;は、JSON形式をTypeScriptインターフェイスのコレクションとして記述しています。</target>
        </trans-unit>
        <trans-unit id="8b0004daae3fceeb6dd522584dd3f1c3e15008d4" translate="yes">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; has built-in support for the client-side half of this technique. Read about it more in the &lt;a href=&quot;http&quot;&gt;HttpClient guide&lt;/a&gt;.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; には、この手法のクライアント側半分のサポートが組み込まれています。 詳細については、 &lt;a href=&quot;http&quot;&gt;HttpClientガイドを参照してください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="4fb50cce578f3a5a5a7abdb4dd6da589ba21a121" translate="yes">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; library recognizes this convention and automatically strips the string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; from all responses before further parsing.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; ライブラリはこの規則を認識し、さらに解析する前にすべての応答から文字列 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; を自動的に取り除きます。</target>
        </trans-unit>
        <trans-unit id="14617516211b35ab06a4b2a6b666a840eb5b82fd" translate="yes">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; registers the providers needed to use a single instance of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service throughout your app. The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service is what you inject into your services to fetch data and interact with external APIs and resources.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; は、アプリ全体で &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスの単一インスタンスを使用するために必要なプロバイダーを登録します。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスは、データを取得して外部のAPIやリソースとやり取りするためにサービスに挿入するものです。</target>
        </trans-unit>
        <trans-unit id="ec334ceb63562c7ef49674b3cead9e9d4cba4020" translate="yes">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service provides convenient methods for generating controls. As with the other services you've used, you need to import and inject the service before you can use it:</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; サービスは、コントロールを生成するための便利なメソッドを提供します。 使用した他のサービスと同様に、使用する前にサービスをインポートおよび注入する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf774047e36d0ca6ef5a720dc672fae05bb9fc52" translate="yes">
          <source>Angular's &lt;code&gt;keyframe()&lt;/code&gt; function is similar to keyframes in CSS. Keyframes allow several style changes within a single timing segment. For example, our button, instead of fading, could change color several times over a single 2-second timespan.</source>
          <target state="translated">Angularの &lt;code&gt;keyframe()&lt;/code&gt; 関数は、CSSのキーフレームに似ています。 キーフレームを使用すると、1つのタイミングセグメント内で複数のスタイルを変更できます。 たとえば、ボタンは、フェードする代わりに、1つの2秒の期間で色を数回変更できます。</target>
        </trans-unit>
        <trans-unit id="35707b1741a5656cd81137fd131c1cecf9c96f83" translate="yes">
          <source>Angular's HTTP testing library is designed for a pattern of testing in which the app executes code and makes requests first. The test then expects that certain requests have or have not been made, performs assertions against those requests, and finally provides responses by &quot;flushing&quot; each expected request.</source>
          <target state="translated">AngularのHTTPテストライブラリは、アプリがコードを実行して最初にリクエストを行うテストパターン用に設計されています。 テストでは、特定の要求が行われたかどうかを予測し、それらの要求に対してアサーションを実行し、最終的に各予測された要求を「フラッシュ」して応答を提供します。</target>
        </trans-unit>
        <trans-unit id="44f361bf81db534631a0013ce3d42b1478068b98" translate="yes">
          <source>Angular's animation support builds on top of web animations, so you can animate any property that the browser considers animatable. This includes positions, sizes, transforms, colors, borders, and more. The W3C maintains a list of animatable properties on its &lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt; page.</source>
          <target state="translated">AngularのアニメーションサポートはWebアニメーションの上に構築されるため、ブラウザがアニメーション可能と見なすプロパティをアニメーション化できます。 これには、位置、サイズ、変換、色、境界線などが含まれます。 W3Cは、 &lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS遷移&lt;/a&gt;ページでアニメーション可能なプロパティのリストを保持しています。</target>
        </trans-unit>
        <trans-unit id="f1bc2a1c230dc36047042d454f2cb3150e707c25" translate="yes">
          <source>Angular's animation system is built on CSS functionality, which means you can animate any property that the browser considers animatable. This includes positions, sizes, transforms, colors, borders, and more. The W3C maintains a list of animatable properties on its &lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt; page.</source>
          <target state="translated">AngularのアニメーションシステムはCSS機能に基づいて構築されているため、ブラウザがアニメーション可能と見なすプロパティをアニメーション化できます。 これには、位置、サイズ、変換、色、境界線などが含まれます。 W3Cは、 &lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS遷移&lt;/a&gt;ページでアニメーション可能なプロパティのリストを保持しています。</target>
        </trans-unit>
        <trans-unit id="c259b63cddb04acf22e950acc14653da9d32a74e" translate="yes">
          <source>Angular's animations library makes it easy to define and apply animation effects such as page and list transitions. For more information, see the &lt;a href=&quot;animations&quot;&gt;Animations guide&lt;/a&gt;.</source>
          <target state="translated">Angularのアニメーションライブラリを使用すると、ページやリストの切り替えなどのアニメーション効果を簡単に定義して適用できます。 詳細については、 &lt;a href=&quot;animations&quot;&gt;アニメーションガイドを&lt;/a&gt;参照してください 。</target>
        </trans-unit>
        <trans-unit id="1ae8350364c17bca7b7f63ffe70ee1b69a60cc69" translate="yes">
          <source>Angular's continuous integration process runs unit tests of the framework on all of these browsers for every pull request, using &lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt; and &lt;a href=&quot;https://www.browserstack.com&quot;&gt;Browserstack&lt;/a&gt;.</source>
          <target state="translated">Angularの継続的統合プロセスは、 &lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt;と&lt;a href=&quot;https://www.browserstack.com&quot;&gt;Browserstack&lt;/a&gt;を使用して、すべてのプルリクエストに対してこれらすべてのブラウザーでフレームワークの単体テストを実行します。</target>
        </trans-unit>
        <trans-unit id="cf8707d44d9ba4cc582ed7d651d0ee4d537dd6ef" translate="yes">
          <source>Angular's resolution behavior can be modified with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;. Import each of them from &lt;code&gt;@angular/core&lt;/code&gt; and use each in the component class constructor when you inject your service.</source>
          <target state="translated">Angularの解決動作は、 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 、および &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; ます。 &lt;code&gt;@angular/core&lt;/code&gt; からそれぞれをインポートし、サービスを注入するときにコンポーネントクラスコンストラクターでそれぞれを使用します。</target>
        </trans-unit>
        <trans-unit id="1786feb384dc29da2b7d0b362b7546fe85676b4f" translate="yes">
          <source>Angular's service worker is designed to optimize the end user experience of using an application over a slow or unreliable network connection, while also minimizing the risks of serving outdated content.</source>
          <target state="translated">Angularのサービスワーカーは、低速または信頼性の低いネットワーク接続でアプリケーションを使用するエンドユーザーエクスペリエンスを最適化すると同時に、古いコンテンツを提供するリスクを最小限に抑えるように設計されています。</target>
        </trans-unit>
        <trans-unit id="504cd5fa4c7a2dccac0652568a0bf7e92fa161e4" translate="yes">
          <source>Angular's template compiler. It understands templates and can convert them to code that makes the application run and render. Typically you don&amp;rsquo;t interact with the compiler directly; rather, you use it indirectly via &lt;code&gt;platform-browser-dynamic&lt;/code&gt; when JIT compiling in the browser. For more information, see the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-time Compilation guide&lt;/a&gt;.</source>
          <target state="translated">Angularのテンプレートコンパイラ。 テンプレートを理解し、アプリケーションを実行およびレンダリングするコードに変換できます。 通常、コンパイラと直接対話することはありません。 むしろ、 &lt;code&gt;platform-browser-dynamic&lt;/code&gt; JITをコンパイルするときに、 platform-b​​rowser-dynamicを介して間接的に使用します。 詳細については、 &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-time Compilation guideを&lt;/a&gt;参照してください 。</target>
        </trans-unit>
        <trans-unit id="ff40c7b19b49d4d5e133e555bcb91882845c5f9c" translate="yes">
          <source>Angular's template syntax extends HTML and JavaScript. This section introduces template syntax by enhancing the &quot;Products&quot; area.</source>
          <target state="translated">Angularのテンプレート構文は、HTMLとJavaScriptを拡張します。 このセクションでは、「製品」エリアを拡張することでテンプレートの構文を紹介します。</target>
        </trans-unit>
        <trans-unit id="3ddc03baf11e86bab9597295ea44e229f6cb702e" translate="yes">
          <source>Angular's unidirectional data flow rule forbids updates to the view &lt;em&gt;after&lt;/em&gt; it has been composed. Both of these hooks fire &lt;em&gt;after&lt;/em&gt; the component's view has been composed.</source>
          <target state="translated">Angularの単方向データフロールールは、ビューの構成&lt;em&gt;後の&lt;/em&gt;更新を禁止します。 これらのフックは両方とも、コンポーネントのビューが構成された&lt;em&gt;後に&lt;/em&gt;起動します。</target>
        </trans-unit>
        <trans-unit id="d5adb3a8bc2d1144d715b4e241c8b97e75acec4c" translate="yes">
          <source>Angular, the Angular CLI, and Angular apps depend on features and functionality provided by libraries that are available as &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm packages&lt;/a&gt;. To download and install npm packages, you must have an npm package manager.</source>
          <target state="translated">Angular、Angular CLI、およびAngularアプリは、 &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npmパッケージ&lt;/a&gt;として利用可能なライブラリが提供する機能に依存しています 。 npmパッケージをダウンロードしてインストールするには、npmパッケージマネージャーが必要です。</target>
        </trans-unit>
        <trans-unit id="2a3de4a9dc7c9f3bd23b0b53226033777b1c013b" translate="yes">
          <source>AngularJS</source>
          <target state="translated">AngularJS</target>
        </trans-unit>
        <trans-unit id="6e35a378aa54bd494ebc719b125fbf5b36ab4fb7" translate="yes">
          <source>AngularJS 1.5 introduces the &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module#component&quot;&gt;component API&lt;/a&gt; that makes it easier to define component directives like these. It is a good idea to use this API for component directives for several reasons:</source>
          <target state="translated">AngularJS 1.5には、これらのようなコンポーネントディレクティブの定義を容易にするコンポーネント&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module#component&quot;&gt;API&lt;/a&gt;が導入されています 。 いくつかの理由により、このAPIをコンポーネントディレクティブに使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="be95540cbaad0a5ea6f38f0fb89f4c1fe637785c" translate="yes">
          <source>AngularJS apps are great. Always consider the business case before moving to Angular. An important part of that case is the time and effort to get there. This guide describes the built-in tools for efficiently migrating AngularJS projects over to the Angular platform, a piece at a time.</source>
          <target state="translated">AngularJSアプリは素晴らしいです。 Angularに移行する前に、常にビジネスケースを検討してください。 その場合の重要な部分は、そこに着くまでの時間と努力です。 このガイドでは、AngularJSプロジェクトを一度に1つずつ、Angularプラットフォームに効率的に移行するための組み込みツールについて説明します。</target>
        </trans-unit>
        <trans-unit id="ad3374e34ac229a514bcb825e7c41831585eac3c" translate="yes">
          <source>AngularJS developers know this technique as &lt;em&gt;transclusion&lt;/em&gt;.</source>
          <target state="translated">AngularJS開発者は、この手法を&lt;em&gt;トランスクルージョン&lt;/em&gt;として知っています。</target>
        </trans-unit>
        <trans-unit id="2b756697e8af3cfff41be5b54a86bcc40435ed5a" translate="yes">
          <source>AngularJS directives always execute inside AngularJS framework codebase regardless of where they are instantiated.</source>
          <target state="translated">AngularJSディレクティブは、インスタンス化される場所に関係なく、常にAngularJSフレームワークコードベース内で実行されます。</target>
        </trans-unit>
        <trans-unit id="5883a4552c1e380fb9e76fe1a405dd956e2e041a" translate="yes">
          <source>AngularJS directives always execute inside the AngularJS framework codebase regardless of where they are instantiated.</source>
          <target state="translated">AngularJSディレクティブは、インスタンス化される場所に関係なく、常にAngularJSフレームワークコードベース内で実行されます。</target>
        </trans-unit>
        <trans-unit id="a2361ecb57211e492282d07e7e196e2d57b74a2f" translate="yes">
          <source>AngularJS event-based directives do not exist in Angular. Rather, define one-way binding from the template view to the component using &lt;strong&gt;event binding&lt;/strong&gt;.</source>
          <target state="translated">AngularJSイベントベースのディレクティブは、Angularには存在しません。 むしろ、 &lt;strong&gt;イベントバインディング&lt;/strong&gt;を使用して、テンプレートビューからコンポーネントへの一方向バインディングを定義します。</target>
        </trans-unit>
        <trans-unit id="7ba2194b47c5f56823c853e12f0552deafc5b008" translate="yes">
          <source>AngularJS expects controllers to be constructor functions. That's exactly what ES2015/TypeScript classes are under the hood, so that means you can just plug in a class as a component controller and AngularJS will happily use it.</source>
          <target state="translated">AngularJSは、コントローラーがコンストラクター関数であることを期待しています。 それはまさにES2015 / TypeScriptクラスが内部にあるものです。つまり、クラスをコンポーネントコントローラーとしてプラグインするだけで、AngularJSはそれを喜んで使用します。</target>
        </trans-unit>
        <trans-unit id="112a877bf72d4bfc8bf612a04c77986c603a5169" translate="yes">
          <source>AngularJS has code in each controller that looks up an appropriate Angular module and registers the controller with that module.</source>
          <target state="translated">AngularJSの各コントローラーには、適切なAngularモジュールを検索し、コントローラーをそのモジュールに登録するコードがあります。</target>
        </trans-unit>
        <trans-unit id="e7245580254db776b68e6171f5b629c700d61b34" translate="yes">
          <source>AngularJS is always bootstrapped first and owns the bottom most view.</source>
          <target state="translated">AngularJSは常に最初にブートストラップされ、一番下のビューを所有します。</target>
        </trans-unit>
        <trans-unit id="2aef830187741c51c79d0fdd323c04bb9f1d5a18" translate="yes">
          <source>AngularJS is currently loaded by a script tag in &lt;code&gt;index.html&lt;/code&gt;, which means that the whole app has access to it as a global and uses the same instance of the &lt;code&gt;angular&lt;/code&gt; variable. If you used &lt;code&gt;import * as angular from 'angular'&lt;/code&gt; instead, you'd also have to load every file in the AngularJS app to use ES2015 modules in order to ensure AngularJS was being loaded correctly.</source>
          <target state="translated">AngularJSは現在、 &lt;code&gt;index.html&lt;/code&gt; のスクリプトタグによって読み込まれます。つまり、アプリ全体がグローバルとしてアクセスし、 &lt;code&gt;angular&lt;/code&gt; 変数の同じインスタンスを使用します。 代わりに &lt;code&gt;import * as angular from 'angular'&lt;/code&gt; を使用した場合、AngularJSが正しくロードされていることを確認するために、ES2015モジュールを使用するには、AngularJSアプリのすべてのファイルをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="398510dbda26c2a8fe4e08585f1a59953ba02faf" translate="yes">
          <source>AngularJS provides more than seventy built-in directives for templates. Many of them aren't needed in Angular because of its more capable and expressive binding system. The following are some of the key AngularJS built-in directives and their equivalents in Angular.</source>
          <target state="translated">AngularJSは、テンプレート用に70以上の組み込みディレクティブを提供します。 それらの多くは、より有能で表現力豊かなバインディングシステムのため、Angularでは必要ありません。 以下は、AngularJSの主要な組み込みディレクティブの一部と、Angularでの同等のものです。</target>
        </trans-unit>
        <trans-unit id="3adbc04c8f21c0c77451b7e8d0376cba32bd94e5" translate="yes">
          <source>AngularJS to Angular Concepts: Quick Reference</source>
          <target state="translated">AngularJSからAngular Concepts：クイックリファレンス</target>
        </trans-unit>
        <trans-unit id="71e9e741df0a590eafd026f54096b7bc961874d9" translate="yes">
          <source>AngularJS, uses a &lt;code&gt;link&lt;/code&gt; tag in the head section of the &lt;code&gt;index.html&lt;/code&gt; file to define the styles for the application.</source>
          <target state="translated">AngularJSは、 &lt;code&gt;index.html&lt;/code&gt; ファイルのheadセクションで &lt;code&gt;link&lt;/code&gt; タグを使用して、アプリケーションのスタイルを定義します。</target>
        </trans-unit>
        <trans-unit id="4cee08c4b7c72405159cc26c7780b76851e3a3fd" translate="yes">
          <source>AngularJSUrlCodec</source>
          <target state="translated">AngularJSUrlCodec</target>
        </trans-unit>
        <trans-unit id="beb2fb26a90715a16ad2b713f52643af07bc8e11" translate="yes">
          <source>Animatable properties and units</source>
          <target state="translated">アニメート可能なプロパティと単位</target>
        </trans-unit>
        <trans-unit id="0769c5775aae589f50623888b4c64c6191ca75c0" translate="yes">
          <source>Animate HTML elements as they are inserted and removed from the DOM, including responsive real-time filtering.</source>
          <target state="translated">レスポンシブリアルタイムフィルタリングなど、DOMに挿入および削除されるHTML要素をアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="618592a1a0b18cf010c11404c857093fca94afc4" translate="yes">
          <source>Animate HTML elements in complex sequences and choreographies.</source>
          <target state="translated">複雑なシーケンスと振り付けでHTML要素をアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="22f5b7d24e1ffc8c67c552e6bdc267d15ad51cc1" translate="yes">
          <source>Animate each element on screen for 0.5 seconds using a custom-defined easing curve, simultaneously fading it in and un-transforming it.</source>
          <target state="translated">カスタム定義のイージングカーブを使用して、画面上の各要素を0.5秒間アニメーション化し、同時に要素をフェードインおよび非変換します。</target>
        </trans-unit>
        <trans-unit id="bbd45932cc4b4e9e342cbb31ef89450062658db7" translate="yes">
          <source>Animate multiple elements using query() and stagger() functions</source>
          <target state="translated">query（）およびstagger（）関数を使用して複数の要素をアニメーション化する</target>
        </trans-unit>
        <trans-unit id="1df44453e1f5986603739440ade7f2955dce87e3" translate="yes">
          <source>Animate parent and child elements.</source>
          <target state="translated">親要素と子要素をアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="1231f267f34e53a86804d9ed850d53253508e336" translate="yes">
          <source>AnimateChildOptions</source>
          <target state="translated">AnimateChildOptions</target>
        </trans-unit>
        <trans-unit id="d7cf5bc56891490654005df5eefb910d609dce34" translate="yes">
          <source>AnimateTimings</source>
          <target state="translated">AnimateTimings</target>
        </trans-unit>
        <trans-unit id="d913287670141916915aa8af33ee5f086ec77a65" translate="yes">
          <source>Animates in the element over 300 milliseconds. During the animation, the element assumes its default width and opacity.</source>
          <target state="translated">要素内で300ミリ秒以上アニメーションします。 アニメーション中、要素はデフォルトの幅と不透明度を想定します。</target>
        </trans-unit>
        <trans-unit id="820b9c7157225f0d4bfc03fe34474f3177ca57d5" translate="yes">
          <source>Animating a simple transition</source>
          <target state="translated">単純な遷移のアニメーション化</target>
        </trans-unit>
        <trans-unit id="1acb2e94dc3017b424ec642021dbc908a4c12566" translate="yes">
          <source>Animating entering and leaving a view</source>
          <target state="translated">ビューの開始と終了のアニメーション化</target>
        </trans-unit>
        <trans-unit id="7886cadc604f670181386ae5ea9a46ff00865c33" translate="yes">
          <source>Animating to the final state</source>
          <target state="translated">最終状態へのアニメーション</target>
        </trans-unit>
        <trans-unit id="aff1288fe6cdc9b27c1923584d50a269fdc280dc" translate="yes">
          <source>Animation callbacks</source>
          <target state="translated">アニメーションコールバック</target>
        </trans-unit>
        <trans-unit id="42515a4b18b3e75a9a05c13c308ead18b0c1cf76" translate="yes">
          <source>Animation definition</source>
          <target state="translated">アニメーションの定義</target>
        </trans-unit>
        <trans-unit id="dbcb7927796307d3da6f12d7006d5bd2f5657cd1" translate="yes">
          <source>Animation definitions are linked to components through the &lt;code&gt;&lt;a href=&quot;core/component#animations&quot;&gt;animations&lt;/a&gt;&lt;/code&gt; property in the &lt;code&gt;@&lt;a href=&quot;core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata, typically in the component file of the HTML element to be animated. The &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function encapsulates a named animation, with all other function calls nested within. Use the trigger name to bind the named animation to a specific triggering element in the HTML template.</source>
          <target state="translated">アニメーション定義は、 &lt;code&gt;@&lt;a href=&quot;core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータ、通常はアニメーション化されるHTML要素のコンポーネントファイル内の &lt;code&gt;&lt;a href=&quot;core/component#animations&quot;&gt;animations&lt;/a&gt;&lt;/code&gt; プロパティを介してコンポーネントにリンクされます。 &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数は、他のすべての関数呼び出しがネストされた名前付きアニメーションをカプセル化します。 トリガー名を使用して、名前付きアニメーションをHTMLテンプレートの特定のトリガー要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="310caf407085ad7f23432a3af12093d2c5b45918" translate="yes">
          <source>Animation metadata: duration, delay, and easing</source>
          <target state="translated">アニメーションメタデータ：期間、遅延、およびイージング</target>
        </trans-unit>
        <trans-unit id="070dc1a18e384d7b8c26273653b21f0661b190a1" translate="yes">
          <source>Animation provides the illusion of motion: HTML elements change styling over time. Well-designed animations can make your application more fun and easier to use, but they aren't just cosmetic. Animations can improve your app and user experience in a number of ways:</source>
          <target state="translated">アニメーションは動きの錯覚を提供します。HTML要素は時間とともにスタイルを変更します。 適切に設計されたアニメーションは、アプリケーションをより楽しく使いやすくすることができますが、見た目だけではありません。 アニメーションは、さまざまな方法でアプリとユーザーエクスペリエンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="c0c7db30f689dea02b345d4feb19f80be591a5b4" translate="yes">
          <source>Animation sequence summary</source>
          <target state="translated">アニメーションシーケンスの概要</target>
        </trans-unit>
        <trans-unit id="a2f413b428d01e3d852c9e02cf22d9856f4c9161" translate="yes">
          <source>Animation state and styles</source>
          <target state="translated">アニメーションの状態とスタイル</target>
        </trans-unit>
        <trans-unit id="4c76d2cc2e089a0e490b689a8cc8e9feb5728375" translate="yes">
          <source>Animation trigger bindings convert all values to strings, and then match the previous and current values against any linked transitions. Booleans can be specified as &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">アニメーショントリガーバインディングは、すべての値を文字列に変換し、リンクされた遷移に対して以前の値と現在の値を一致させます。 ブール値は &lt;code&gt;1&lt;/code&gt; または &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; として指定できます。</target>
        </trans-unit>
        <trans-unit id="ab4cf7592d8d437f90159cdf1869e12aa12d56dc" translate="yes">
          <source>AnimationAnimateChildMetadata</source>
          <target state="translated">AnimationAnimateChildMetadata</target>
        </trans-unit>
        <trans-unit id="a8199a8fd1152906437f37e892432a0117740e62" translate="yes">
          <source>AnimationAnimateMetadata</source>
          <target state="translated">AnimationAnimateMetadata</target>
        </trans-unit>
        <trans-unit id="7666f03f557808da2899925571c1dc35a2eac29b" translate="yes">
          <source>AnimationAnimateRefMetadata</source>
          <target state="translated">AnimationAnimateRefMetadata</target>
        </trans-unit>
        <trans-unit id="a6c33451ee1ed3313b74b3e177d7107746a4a7b7" translate="yes">
          <source>AnimationBuilder</source>
          <target state="translated">AnimationBuilder</target>
        </trans-unit>
        <trans-unit id="b6988ea2371fbf582630d88819c0e3f3c9bffeed" translate="yes">
          <source>AnimationDriver</source>
          <target state="translated">AnimationDriver</target>
        </trans-unit>
        <trans-unit id="b68b862342361922d8aeebe8914e3813b3a82ea4" translate="yes">
          <source>AnimationEvent</source>
          <target state="translated">AnimationEvent</target>
        </trans-unit>
        <trans-unit id="b8bfdf6ac4276ec091b33b31fa025b59d8ae6d7d" translate="yes">
          <source>AnimationFactory</source>
          <target state="translated">AnimationFactory</target>
        </trans-unit>
        <trans-unit id="a3a7882964c227f42de2f45e1e825e6e7dbaf958" translate="yes">
          <source>AnimationGroupMetadata</source>
          <target state="translated">AnimationGroupMetadata</target>
        </trans-unit>
        <trans-unit id="3e9f8514aa4837ac7a9591838d80d05da6ea30b5" translate="yes">
          <source>AnimationKeyframesSequenceMetadata</source>
          <target state="translated">AnimationKeyframesSequenceMetadata</target>
        </trans-unit>
        <trans-unit id="6fb97195c310cce7c5f508b709bcb87dd08d499f" translate="yes">
          <source>AnimationMetadata</source>
          <target state="translated">AnimationMetadata</target>
        </trans-unit>
        <trans-unit id="53f1eba48611407f4a1975724592be1e71afd91a" translate="yes">
          <source>AnimationMetadataType</source>
          <target state="translated">AnimationMetadataType</target>
        </trans-unit>
        <trans-unit id="fb0b93cca54964c4444fc172d338b01d02dd2b94" translate="yes">
          <source>AnimationOptions</source>
          <target state="translated">AnimationOptions</target>
        </trans-unit>
        <trans-unit id="209f8c7f66e9bd69a25c35a1868b922ae003930a" translate="yes">
          <source>AnimationPlayer</source>
          <target state="translated">AnimationPlayer</target>
        </trans-unit>
        <trans-unit id="6fb8a7cdef7876dff2df1190c171576bf5a725ed" translate="yes">
          <source>AnimationQueryMetadata</source>
          <target state="translated">AnimationQueryMetadata</target>
        </trans-unit>
        <trans-unit id="78889e2ae13c736ba48dc387ac4d3316766916b3" translate="yes">
          <source>AnimationQueryOptions</source>
          <target state="translated">AnimationQueryOptions</target>
        </trans-unit>
        <trans-unit id="2c5530db9d40f1553b25c85091789d55b95b926e" translate="yes">
          <source>AnimationReferenceMetadata</source>
          <target state="translated">AnimationReferenceMetadata</target>
        </trans-unit>
        <trans-unit id="c65c6a5a21639ea491959e7e81065101b6d31f48" translate="yes">
          <source>AnimationSequenceMetadata</source>
          <target state="translated">AnimationSequenceMetadata</target>
        </trans-unit>
        <trans-unit id="f9a31525fd95249ef37b0b3be3b81f19770b6d77" translate="yes">
          <source>AnimationStaggerMetadata</source>
          <target state="translated">AnimationStaggerMetadata</target>
        </trans-unit>
        <trans-unit id="d5c9e1c8b8703497373c017c5a25ac585f71dca2" translate="yes">
          <source>AnimationStateMetadata</source>
          <target state="translated">AnimationStateMetadata</target>
        </trans-unit>
        <trans-unit id="9f838574e71a14ec4034fc9c668e17daeaa733e1" translate="yes">
          <source>AnimationStyleMetadata</source>
          <target state="translated">AnimationStyleMetadata</target>
        </trans-unit>
        <trans-unit id="2bfef012b3c0bb7a9c8988f6ac24a5853564b567" translate="yes">
          <source>AnimationTransitionMetadata</source>
          <target state="translated">AnimationTransitionMetadata</target>
        </trans-unit>
        <trans-unit id="c9a79289360f62c0f790d371279f9ed9ef6dffec" translate="yes">
          <source>AnimationTriggerMetadata</source>
          <target state="translated">AnimationTriggerMetadata</target>
        </trans-unit>
        <trans-unit id="0f54eb841ec3b22a39fd482ff66e7904acc8641b" translate="yes">
          <source>Animations API summary</source>
          <target state="translated">アニメーションAPIの概要</target>
        </trans-unit>
        <trans-unit id="52512eb45e2b30a744e5257c969ca3111e25423f" translate="yes">
          <source>Animations are defined in the metadata of the component that controls the HTML element to be animated. Put the code that defines your animations under the &lt;code&gt;animations:&lt;/code&gt; property within the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">アニメーションは、アニメーション化されるHTML要素を制御するコンポーネントのメタデータで定義されます。 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータ内の &lt;code&gt;animations:&lt;/code&gt; プロパティの下にアニメーションを定義するコードを配置します。</target>
        </trans-unit>
        <trans-unit id="06c3f02ce6046751e8afb6c9448801d6483e310e" translate="yes">
          <source>Animations can be defined directly inside your components. For this example we are defining the animations in a separate file, which allows us to re-use the animations.</source>
          <target state="translated">アニメーションは、コンポーネント内で直接定義できます。 この例では、アニメーションを別のファイルで定義しているため、アニメーションを再利用できます。</target>
        </trans-unit>
        <trans-unit id="2d23b44688014855fdd9501d6bbd3e413501debb" translate="yes">
          <source>Animations transitions and triggers</source>
          <target state="translated">アニメーションの遷移とトリガー</target>
        </trans-unit>
        <trans-unit id="c3caa79244ee020e6b1824a6e588366f508b747d" translate="yes">
          <source>Anno Domini</source>
          <target state="translated">西暦</target>
        </trans-unit>
        <trans-unit id="53096344fdb247ca5b187e37878713fdf03e1195" translate="yes">
          <source>Another TypeScript feature you can make use of is &lt;em&gt;classes&lt;/em&gt;. In particular, you can turn component controllers into classes. That way they'll be a step closer to becoming Angular component classes, which will make life easier once you upgrade.</source>
          <target state="translated">使用できるもう1つのTypeScript機能は&lt;em&gt;クラス&lt;/em&gt;です。 特に、コンポーネントコントローラーをクラスに変換できます。 そうすれば、それらはAngularコンポーネントクラスになるのに一歩近づき、アップグレードすると生活が楽になります。</target>
        </trans-unit>
        <trans-unit id="56b080272940939ced695e0e8fccf51d1f089b8b" translate="yes">
          <source>Another advantage of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; is that you can use it to guard against null. Show/hide is best suited for very simple use cases, so when you need a guard, opt instead for &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. Angular will throw an error if a nested expression tries to access a property of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のもう 1つの利点は、nullを防ぐために使用できることです。 Show / hideは非常に単純なユースケースに最も適しているため、ガードが必要な場合は、代わりに &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を選択します。 ネストされた式が &lt;code&gt;null&lt;/code&gt; のプロパティにアクセスしようとすると、Angularはエラーをスローします 。</target>
        </trans-unit>
        <trans-unit id="6fcce88157a90349b33951e206a2c653b84c62ec" translate="yes">
          <source>Another class, &lt;code&gt;EvenBetterLogger&lt;/code&gt;, might display the user name in the log message. This logger gets the user from an injected &lt;code&gt;UserService&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;EvenBetterLogger&lt;/code&gt; という別のクラスは、ログメッセージにユーザー名を表示する場合があります。 このロガーは、挿入された &lt;code&gt;UserService&lt;/code&gt; インスタンスからユーザーを取得します。</target>
        </trans-unit>
        <trans-unit id="7e1638d3363efdfbe5466eef1db2d2342c31fe3e" translate="yes">
          <source>Another example</source>
          <target state="translated">もう一つの例</target>
        </trans-unit>
        <trans-unit id="0ed013f9e94cdc0d63ce5a44b4f989895c245c7d" translate="yes">
          <source>Another example is disabling a button when the component says that it &lt;code&gt;isUnchanged&lt;/code&gt;:</source>
          <target state="translated">別の例は、コンポーネントが &lt;code&gt;isUnchanged&lt;/code&gt; と言ったときにボタンを無効にすることです ：</target>
        </trans-unit>
        <trans-unit id="3c964816bf2def0a4255f7c53c2ee3c595ece4c7" translate="yes">
          <source>Another example shows the component class with a provider for &lt;code&gt;FlowerService&lt;/code&gt;. In this case, the injector looks no further than the current &lt;code&gt;ElementInjector&lt;/code&gt; because it finds the &lt;code&gt;FlowerService&lt;/code&gt; and returns the yellow flower 🌼.</source>
          <target state="translated">別の例は、 &lt;code&gt;FlowerService&lt;/code&gt; のプロバイダーを持つコンポーネントクラスを示しています。 この場合、インジェクターは、 &lt;code&gt;FlowerService&lt;/code&gt; を見つけて黄色い花returnsを返すため、現在の &lt;code&gt;ElementInjector&lt;/code&gt; を探すだけです。</target>
        </trans-unit>
        <trans-unit id="f02c387e6e60b792589c26b7e606d305ef9df377" translate="yes">
          <source>Another is setting a property of a directive:</source>
          <target state="translated">別の方法は、ディレクティブのプロパティを設定することです：</target>
        </trans-unit>
        <trans-unit id="602cc167054f68080e0cc0803ee3cbf5add9046c" translate="yes">
          <source>Another key difference between &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; is that the latter requires you to instantiate both the AngularJS and Angular modules up-front. This means that you have to pay the cost of instantiating the Angular part of the app, even if you don't use any Angular assets until later. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is again less aggressive. It will only instantiate the Angular part when it is required for the first time; that is, as soon as it needs to create a downgraded component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; のもう 1つの重要な違いは、 UpgradeModuleでは、AngularJSとAngularモジュールの両方を事前にインスタンス化する必要があることです。 これは、後でAngularアセットを使用しなくても、アプリのAngular部分をインスタンス化するコストを支払う必要があることを意味します。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は再び攻撃的ではありません。 初めて必要な場合にのみ、Angularパーツをインスタンス化します。 つまり、ダウングレードされたコンポーネントを作成する必要があるとすぐに。</target>
        </trans-unit>
        <trans-unit id="81aea9981f12bfceefc57291e2e46e0a448fc33b" translate="yes">
          <source>Another problem: some HTML elements require all immediate children to be of a specific type. For example, the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element requires &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; children. You can't wrap the &lt;em&gt;options&lt;/em&gt; in a conditional &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">別の問題：一部のHTML要素では、すべての直接の子が特定の型である必要があります。 たとえば、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素には &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; の子が必要です。 条件付きの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; で &lt;em&gt;オプション&lt;/em&gt;をラップすることはできません。</target>
        </trans-unit>
        <trans-unit id="5500271b188473b9589122039f8e0d10390b1818" translate="yes">
          <source>Another reason to re-provide a service at another level is to substitute a &lt;em&gt;more specialized&lt;/em&gt; implementation of that service, deeper in the component tree.</source>
          <target state="translated">別のレベルでサービスを再提供するもう1つの理由は、そのサービスの&lt;em&gt;より特殊な&lt;/em&gt;実装をコンポーネントツリーのより深い場所に置き換えることです。</target>
        </trans-unit>
        <trans-unit id="b4edcd9ca213bdd8b52b2310e46e71e39a3e13ee" translate="yes">
          <source>Another simple way to deploy your Angular app is to use &lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot;&gt;GitHub Pages&lt;/a&gt;.</source>
          <target state="translated">Angularアプリをデプロイするもう1つの簡単な方法は、 &lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot;&gt;GitHub Pages&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="1a0232ed081a1f2af117924de181bf23193259db" translate="yes">
          <source>Another solution to choosing a provider token for non-class dependencies is to define and use an &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; object. The following example shows how to define such a token.</source>
          <target state="translated">非クラス依存関係のプロバイダートークンを選択する別のソリューションは、 &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; オブジェクトを定義して使用することです。 次の例は、このようなトークンを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e18a7fa42b657d430a040fcb6744c6085d9b4ae0" translate="yes">
          <source>Another thing you can do is start adding &lt;em&gt;type safety&lt;/em&gt; to your code. This has actually partially already happened because of the AngularJS typings you installed. TypeScript are checking that you are calling AngularJS APIs correctly when you do things like register components to Angular modules.</source>
          <target state="translated">もう1つできることは、コードに&lt;em&gt;型安全性&lt;/em&gt;を追加することです。 これは、インストールしたAngularJSタイピングが原因で、実際にはすでに部分的に発生しています。 TypeScriptは、Angularモジュールにコンポーネントを登録するなどの操作を行ったときに、AngularJS APIを正しく呼び出していることを確認しています。</target>
        </trans-unit>
        <trans-unit id="c3810aa894a3348cc470b2185cd6df4bf822a9c5" translate="yes">
          <source>Another way to limit provider scope is by adding the service you want to limit to the component&amp;rsquo;s &lt;code&gt;providers&lt;/code&gt; array. Component providers and NgModule providers are independent of each other. This method is helpful for when you want to eagerly load a module that needs a service all to itself. Providing a service in the component limits the service only to that component (other components in the same module can&amp;rsquo;t access it.)</source>
          <target state="translated">プロバイダーの範囲を制限するもう1つの方法は、制限するサービスをコンポーネントの &lt;code&gt;providers&lt;/code&gt; 配列に追加することです。 コンポーネントプロバイダーとNgModuleプロバイダーは互いに独立しています。 このメソッドは、サービス自体を必要とするモジュールを熱心にロードする場合に役立ちます。 コンポーネントにサービスを提供すると、そのコンポーネントのみにサービスが制限されます（同じモジュール内の他のコンポーネントはアクセスできません）。</target>
        </trans-unit>
        <trans-unit id="da3ac8b45123b40210a3b3867ac927476f2704e1" translate="yes">
          <source>Any app developer can use these and other libraries that have been published as npm packages by the Angular team or by third parties. See &lt;a href=&quot;using-libraries&quot;&gt;Using Published Libraries&lt;/a&gt;.</source>
          <target state="translated">アプリ開発者は、Angularチームまたはサードパーティによってnpmパッケージとして公開されているこれらのライブラリやその他のライブラリを使用できます。 &lt;a href=&quot;using-libraries&quot;&gt;公開されたライブラリの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d9e225c8709529016fb0fe3d9aaeca9255591cfb" translate="yes">
          <source>Any changes to the public API surface will be done using the versioning, support, and depreciation policies describe above.</source>
          <target state="translated">パブリックAPIサーフェスの変更は、上記のバージョン管理、サポート、減価償却ポリシーを使用して行われます。</target>
        </trans-unit>
        <trans-unit id="4252573f476e0bf8d0ee4fd8ca2af51dda805825" translate="yes">
          <source>Any class with the &lt;code&gt;@&lt;a href=&quot;component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレータを持つクラス</target>
        </trans-unit>
        <trans-unit id="faa5c260ff9b2e13ba3a7e065117c51a53243e3b" translate="yes">
          <source>Any component created within a lazy loaded module&amp;rsquo;s context, such as by router navigation, gets the local instance of the service, not the instance in the root application injector. Components in external modules continue to receive the instance created for the application root.</source>
          <target state="translated">ルーターナビゲーションなどによって、遅延ロードモジュールのコンテキスト内で作成されたコンポーネントは、ルートアプリケーションインジェクターのインスタンスではなく、サービスのローカルインスタンスを取得します。 外部モジュールのコンポーネントは、アプリケーションルート用に作成されたインスタンスを引き続き受け取ります。</target>
        </trans-unit>
        <trans-unit id="06a75db5d4bcefd57aafb04659c4d9594738124e" translate="yes">
          <source>Any error returned on the &lt;code&gt;Observable&lt;/code&gt; response stream will be wrapped in an &lt;code&gt;&lt;a href=&quot;httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; to provide additional context about the state of the HTTP layer when the error occurred. The error property will contain either a wrapped Error object or the error response returned from the server.</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; 応答ストリームで返されたエラーは、 &lt;code&gt;&lt;a href=&quot;httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; にラップされ、エラーが発生したときのHTTPレイヤーの状態に関する追加のコンテキストを提供します。 errorプロパティには、ラップされたErrorオブジェクトまたはサーバーから返されたエラー応答のいずれかが含まれます。</target>
        </trans-unit>
        <trans-unit id="9b490d3957cd57eaa58b9061b9b93abf6f8fceda" translate="yes">
          <source>Any future tasks or microtasks scheduled from within this function will continue executing from outside of the Angular zone.</source>
          <target state="translated">この関数内からスケジュールされた将来のタスクまたはマイクロタスクは、Angularゾーンの外部から引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="858f110f5dd01bf7e8dc4320e306d0feb61a7a50" translate="yes">
          <source>Any future tasks or microtasks scheduled from within this function will continue executing from within the Angular zone.</source>
          <target state="translated">この関数内からスケジュールされた将来のタスクまたはマイクロタスクは、Angularゾーン内から引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="93532a30b014f85c589d7c068d4130fc1fccc7b1" translate="yes">
          <source>Any observables that the components subscribe to internally should be cleaned up and disposed of during the lifecycle of those components.</source>
          <target state="translated">コンポーネントが内部でサブスクライブするオブザーバブルは、それらのコンポーネントのライフサイクル中にクリーンアップして破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="1ac78989853c9b050e2eda23ff2928dfb610d9c3" translate="yes">
          <source>Any provider defined in the child component tree of the current component (e.g. &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(SomeService) someService: SomeService&lt;/code&gt;)</source>
          <target state="translated">現在のコンポーネントの子コンポーネントツリーで定義されているプロバイダー（例 &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(SomeService) someService: SomeService&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="df5462a835da0acf093fceb883fd8b853fd7d033" translate="yes">
          <source>Any provider defined through a string token (e.g. &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('someToken') someTokenVal: any&lt;/code&gt;)</source>
          <target state="translated">文字列トークン（例： &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('someToken') someTokenVal: any&lt;/code&gt; ）で定義されたプロバイダー</target>
        </trans-unit>
        <trans-unit id="9b53bf1c187ff8e5d85d8461d6cbd8075538730c" translate="yes">
          <source>Any subscribers to the &lt;code&gt;valueChanges&lt;/code&gt; observable receive the new value.</source>
          <target state="translated">&lt;code&gt;valueChanges&lt;/code&gt; オブザーバブルのサブスクライバーは、新しい値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="63ef43a80069c779b3ee5167397831492df1e816" translate="yes">
          <source>Anything that uses a regular expression is worth testing thoroughly. Use simple Jasmine to explore the expected cases and the edge cases.</source>
          <target state="translated">正規表現を使用するものはすべて徹底的にテストする価値があります。 単純なジャスミンを使用して、予想されるケースとエッジケースを調査します。</target>
        </trans-unit>
        <trans-unit id="88cda930404408fa5b6b5bb5ea64822d75f409c3" translate="yes">
          <source>Anything under &lt;code&gt;assets&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;assets&lt;/code&gt; 下にあるもの 。</target>
        </trans-unit>
        <trans-unit id="93cd385e58bd290f15ae342c6fdf3fea9806d612" translate="yes">
          <source>AoT metadata errors</source>
          <target state="translated">AoTメタデータエラー</target>
        </trans-unit>
        <trans-unit id="0b5958b0f53cb499388dd9ee04a106a30b02c5d1" translate="yes">
          <source>Apache</source>
          <target state="translated">Apache</target>
        </trans-unit>
        <trans-unit id="0d6c7d4967052bf08ff030cdd321d82fc75c2851" translate="yes">
          <source>Apart from &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, you can use the rest of the &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; helpers as usual to build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; とは別に、 通常のように残りの &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; ヘルパーを使用して、ハイブリッドアプリケーションを構築できます。 ダウングレードされたモジュールがブートストラップされるまで、つまりダウングレードされたコンポーネントをインスタンス化するまで、Angularピース（ダウングレードされたサービスなど）は利用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="57807d7e38eb807484ab254a0fac6301d23c9944" translate="yes">
          <source>App &lt;code&gt;root module&lt;/code&gt;</source>
          <target state="translated">アプリ &lt;code&gt;root module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5aa3cc756775d4afef149117b0695738c8d5e450" translate="yes">
          <source>App Shell</source>
          <target state="translated">App Shell</target>
        </trans-unit>
        <trans-unit id="7b4fd1b17b918b41d314d1e08cfa7e5547f2b386" translate="yes">
          <source>App shell</source>
          <target state="translated">アプリシェル</target>
        </trans-unit>
        <trans-unit id="f44820b851018adfc0c40223a29fecd82923e3f3" translate="yes">
          <source>App shell is a way to render a portion of your application via a route at build time. It can improve the user experience by quickly launching a static rendered page (a skeleton common to all pages) while the browser downloads the full client version and switches to it automatically after the code loads.</source>
          <target state="translated">アプリシェルは、ビルド時にルートを介してアプリケーションの一部をレンダリングする方法です。 静的レンダリングページ（すべてのページに共通のスケルトン）をすばやく起動し、ブラウザーが完全なクライアントバージョンをダウンロードし、コードのロード後に自動的に切り替えることにより、ユーザーエクスペリエンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="95c4786d84aa1c9b22007dc04178f6b25983cd88" translate="yes">
          <source>App shell is a way to render a portion of your application via a route at build time. This gives users a meaningful first paint of your application that appears quickly because the browser can render static HTML and CSS without the need to initialize JavaScript.</source>
          <target state="translated">アプリシェルは、ビルド時にルートを介してアプリケーションの一部をレンダリングする方法です。 これにより、ブラウザはJavaScriptを初期化することなく静的なHTMLおよびCSSをレンダリングできるため、アプリケーションの最初の意味のあるペイントがすぐに表示されます。</target>
        </trans-unit>
        <trans-unit id="63d67384492343e219bf6928f05ecac25471ffd5" translate="yes">
          <source>App tabs</source>
          <target state="translated">アプリのタブ</target>
        </trans-unit>
        <trans-unit id="540143c662eb90de02a65e482599c49fa15df426" translate="yes">
          <source>App versions</source>
          <target state="translated">アプリのバージョン</target>
        </trans-unit>
        <trans-unit id="75913f9fcc32232a451e534954939bf6b759d88c" translate="yes">
          <source>AppModule</source>
          <target state="translated">AppModule</target>
        </trans-unit>
        <trans-unit id="3bc3e2080ed9e689cda76f06895f83510ab7fc40" translate="yes">
          <source>Append &lt;code&gt;/heroes&lt;/code&gt; to the URL in the browser address bar. You should see the familiar heroes master/detail view.</source>
          <target state="translated">ブラウザのアドレスバーのURLに &lt;code&gt;/heroes&lt;/code&gt; を追加します。 使い慣れたヒーローのマスター/詳細ビューが表示されます。</target>
        </trans-unit>
        <trans-unit id="73973cfd168d40bb8277e2f6044ecdb605409c4e" translate="yes">
          <source>Appendices</source>
          <target state="translated">Appendices</target>
        </trans-unit>
        <trans-unit id="f3f60044b06335eb6c4230e3c39f5e0218445878" translate="yes">
          <source>Appendix</source>
          <target state="translated">Appendix</target>
        </trans-unit>
        <trans-unit id="261d623be7e2a959a5a15cb6df845be318cf00fe" translate="yes">
          <source>Appendix: &lt;code&gt;LocationStrategy&lt;/code&gt; and browser URL styles</source>
          <target state="translated">付録： &lt;code&gt;LocationStrategy&lt;/code&gt; とブラウザーのURLスタイル</target>
        </trans-unit>
        <trans-unit id="01e09299c9c5043bbe3cce453e5e966ce28cdece" translate="yes">
          <source>Appendix: Develop locally with IE</source>
          <target state="translated">付録：IEを使用してローカルで開発する</target>
        </trans-unit>
        <trans-unit id="2399a201033dbd00d9af405e9941b75deec4a79f" translate="yes">
          <source>Appendix: No &lt;code&gt;FilterPipe&lt;/code&gt; or &lt;code&gt;OrderByPipe&lt;/code&gt;</source>
          <target state="translated">付録： &lt;code&gt;FilterPipe&lt;/code&gt; または &lt;code&gt;OrderByPipe&lt;/code&gt; なし</target>
        </trans-unit>
        <trans-unit id="29b3b122df7e77e777ce5cfcd64d2161ed3b1c44" translate="yes">
          <source>Appendix: Test using &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">付録： &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; を使用したテスト</target>
        </trans-unit>
        <trans-unit id="42746499949a4a6af72f7d65e860d0f5ca0c6702" translate="yes">
          <source>Appendix: Upgrading PhoneCat Tests</source>
          <target state="translated">付録：PhoneCatテストのアップグレード</target>
        </trans-unit>
        <trans-unit id="bf96aa3c3ab705a8143ebfc310d65c579728b4f9" translate="yes">
          <source>Appendix: Why add &lt;code&gt;@Input&lt;/code&gt;?</source>
          <target state="translated">付録： &lt;code&gt;@Input&lt;/code&gt; を追加する理由</target>
        </trans-unit>
        <trans-unit id="15354e68bf45ee9bc58f7687ae8aefa5f4126715" translate="yes">
          <source>Appendix: link parameters array</source>
          <target state="translated">付録：リンクパラメーターの配列</target>
        </trans-unit>
        <trans-unit id="a10d6a6e5b58825f456a1c60aceb9233acfe1a06" translate="yes">
          <source>Appends a child to a given parent node in the host element DOM.</source>
          <target state="translated">ホスト要素DOM内の指定された親ノードに子を追加します。</target>
        </trans-unit>
        <trans-unit id="72435c978d47a75814bd8d62487eb4a1c5cb31ca" translate="yes">
          <source>Appends a new value to existing values for a parameter.</source>
          <target state="translated">パラメータの既存の値に新しい値を追加します。</target>
        </trans-unit>
        <trans-unit id="c07e8121475f29caa6a36b6ae4d27742e3366d83" translate="yes">
          <source>Appends a new value to the existing set of values for a header and returns them in a clone of the original instance.</source>
          <target state="translated">ヘッダーの既存の値セットに新しい値を追加し、元のインスタンスのクローンでそれらを返します。</target>
        </trans-unit>
        <trans-unit id="8ea5b66a6bf60adea7d20d7175746bf7940fdf1c" translate="yes">
          <source>Application components often need to share information. You can often use loosely coupled techniques for sharing information, such as data binding and service sharing, but sometimes it makes sense for one component to have a direct reference to another component. You need a direct reference, for instance, to access values or call methods on that component.</source>
          <target state="translated">多くの場合、アプリケーションコンポーネントは情報を共有する必要があります。 多くの場合、データバインディングやサービス共有など、情報を共有するために疎結合手法を使用できますが、1つのコンポーネントが別のコンポーネントへの直接参照を持っていることが理にかなっている場合があります。 たとえば、値にアクセスしたり、そのコンポーネントのメソッドを呼び出したりするには、直接参照が必要です。</target>
        </trans-unit>
        <trans-unit id="f12a2c662c36b27f3825a6d97ac01c1d7cd35295" translate="yes">
          <source>Application configuration files</source>
          <target state="translated">アプリケーション構成ファイル</target>
        </trans-unit>
        <trans-unit id="cfc388605134e26efe5e73bd8340a05bc5c0fa1b" translate="yes">
          <source>Application developers can use the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; to &lt;code&gt;add&lt;/code&gt; a published library for use with an application in the same &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;.</source>
          <target state="translated">アプリケーション開発者は、 &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、同じ&lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペース&lt;/a&gt;内のアプリケーションで使用する公開ライブラリを &lt;code&gt;add&lt;/code&gt; ます 。</target>
        </trans-unit>
        <trans-unit id="a33d5f89e5c84fccd922ef838522228abdaae944" translate="yes">
          <source>Application integration specs can test the interactions of multiple parts spread across folders and modules. They don't really belong to any part in particular, so they don't have a natural home next to any one file.</source>
          <target state="translated">アプリケーション統合仕様では、フォルダーとモジュールにまたがる複数のパーツの相互作用をテストできます。 それらは実際には特にどの部分にも属していないため、1つのファイルの隣に自然なホームがありません。</target>
        </trans-unit>
        <trans-unit id="6703104cd9653acb1e2ab46ed23c7db66b5070c2" translate="yes">
          <source>Application internationalization is a many-faceted area of development, focused on making applications available and user-friendly to a worldwide audience. This page describes Angular's internationalization (i18n) tools, which can help you make your app available in multiple languages.</source>
          <target state="translated">アプリケーションの国際化は、開発の多面的な領域であり、アプリケーションを世界中のユーザーが利用でき、使いやすいものにすることに焦点を当てています。 このページでは、Angularの国際化（i18n）ツールについて説明します。これは、アプリを複数の言語で利用できるようにするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e39567047450a98becc249aa176cdaef7b8b173f" translate="yes">
          <source>Application project files</source>
          <target state="translated">アプリケーションプロジェクトファイル</target>
        </trans-unit>
        <trans-unit id="8e4ad605d8891f443ed5a723fd540aecfca8c921" translate="yes">
          <source>Application source files</source>
          <target state="translated">アプリケーションソースファイル</target>
        </trans-unit>
        <trans-unit id="c57c792b55f79d5a6454ef57144a28767e266988" translate="yes">
          <source>Application structure and NgModules</source>
          <target state="translated">アプリケーション構造とNgModule</target>
        </trans-unit>
        <trans-unit id="0d128f2c09ef2323b0706b60301684346dd9280f" translate="yes">
          <source>Application-specific &lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt; configuration.</source>
          <target state="translated">アプリケーション固有の&lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt;構成。</target>
        </trans-unit>
        <trans-unit id="852183ace80b773b249836fdf431f837dea2630d" translate="yes">
          <source>Application-specific &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; configuration.</source>
          <target state="translated">アプリケーション固有の&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;構成。</target>
        </trans-unit>
        <trans-unit id="4066e5ad49d67457e01b647961a4e8b547f7af40" translate="yes">
          <source>Application-specific &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration, including TypeScript and Angular template compiler options. See &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript Configuration&lt;/a&gt;.</source>
          <target state="translated">TypeScriptおよびAngularテンプレートコンパイラオプションを含む、アプリケーション固有の&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;構成。 &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="99dc2d0240c5a1385595b3dd59d6c536156041c4" translate="yes">
          <source>ApplicationInitStatus</source>
          <target state="translated">ApplicationInitStatus</target>
        </trans-unit>
        <trans-unit id="b39dbb54c7c825fcef1a44e2124b1bb2b58086c8" translate="yes">
          <source>ApplicationModule</source>
          <target state="translated">ApplicationModule</target>
        </trans-unit>
        <trans-unit id="399fe43d84dcab4d8f86ce2f9647859550a7904b" translate="yes">
          <source>ApplicationRef</source>
          <target state="translated">ApplicationRef</target>
        </trans-unit>
        <trans-unit id="a196327a18feb01ef9db58391bd17fb22de7eda2" translate="yes">
          <source>Applications often request JSON data from the server. For example, the app might need a configuration file on the server, &lt;code&gt;config.json&lt;/code&gt;, that specifies resource URLs.</source>
          <target state="translated">多くの場合、アプリケーションはサーバーにJSONデータを要求します。 たとえば、アプリはリソースURLを指定するサーバー上の構成ファイル &lt;code&gt;config.json&lt;/code&gt; を必要とする場合があります。</target>
        </trans-unit>
        <trans-unit id="f0629fc80e38645caefd8ff8a582d44f1f864f7a" translate="yes">
          <source>Applications often restrict access to a feature area based on who the user is. You could permit access only to authenticated users or to users with a specific role. You might block or limit access until the user's account is activated.</source>
          <target state="translated">アプリケーションは、多くの場合、ユーザーが誰であるかに基づいて機能領域へのアクセスを制限します。 認証されたユーザーまたは特定のロールを持つユーザーのみにアクセスを許可できます。 ユーザーのアカウントがアクティブになるまで、アクセスをブロックまたは制限できます。</target>
        </trans-unit>
        <trans-unit id="38ff861aa4a446344adef0afc1e488d02130c3f4" translate="yes">
          <source>Applications should use the &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; services to interact with application route state.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスを使用して、アプリケーションルート状態と対話する必要があります。</target>
        </trans-unit>
        <trans-unit id="db68ba2d12235e40251d82b803326c61a95f231a" translate="yes">
          <source>Applies an array of commands to the current URL tree and creates a new URL tree.</source>
          <target state="translated">コマンドの配列を現在のURLツリーに適用し、新しいURLツリーを作成します。</target>
        </trans-unit>
        <trans-unit id="73e49fcb5b988ce38774338e29d9e9c9583cfff5" translate="yes">
          <source>Applies the changes when needed.</source>
          <target state="translated">必要なときに変更を適用します。</target>
        </trans-unit>
        <trans-unit id="8c8b40621714f724e48fb235040b7320d47f4c4a" translate="yes">
          <source>Apply that logic to navigation within the crisis center for which the parent path is &lt;code&gt;/crisis-center&lt;/code&gt;.</source>
          <target state="translated">親パスが &lt;code&gt;/crisis-center&lt;/code&gt; である危機センター内のナビゲーションにそのロジックを適用します。</target>
        </trans-unit>
        <trans-unit id="0d0e2a91303b222bcb13c0011660cfd943c66dc1" translate="yes">
          <source>Apply the &lt;a href=&quot;https://wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;i&gt;single responsibility principle&lt;/i&gt; (SRP)&lt;/a&gt; to all components, services, and other symbols. This helps make the app cleaner, easier to read and maintain, and more testable.</source>
          <target state="translated">すべてのコンポーネント、サービス、およびその他のシンボルに&lt;a href=&quot;https://wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;i&gt;単一責任原則&lt;/i&gt; （SRP）&lt;/a&gt;を適用します。 これにより、アプリがよりきれいになり、読みやすく、保守しやすくなり、テストしやすくなります。</target>
        </trans-unit>
        <trans-unit id="70fadc1252a55edfa904aa436966e9eecc7d3821" translate="yes">
          <source>Apply the attribute directive</source>
          <target state="translated">属性ディレクティブを適用する</target>
        </trans-unit>
        <trans-unit id="81d85d7da74461d1b53ba77a7b92cf43a5bb3128" translate="yes">
          <source>Apply the decorator to the directive class.</source>
          <target state="translated">デコレータをディレクティブクラスに適用します。</target>
        </trans-unit>
        <trans-unit id="45a85d2d0edb8623c0d82d2eb0a9a6cc99f9a2bb" translate="yes">
          <source>Applying routable animations based on the page.</source>
          <target state="translated">ページに基づいてルーティング可能なアニメーションを適用します。</target>
        </trans-unit>
        <trans-unit id="c804b003ae54f7640d1e2bbcc163cd9e623fb3dc" translate="yes">
          <source>Applying the &lt;code&gt;::ng-deep&lt;/code&gt; pseudo-class to any CSS rule completely disables view-encapsulation for that rule. Any style with &lt;code&gt;::ng-deep&lt;/code&gt; applied becomes a global style. In order to scope the specified style to the current component and all its descendants, be sure to include the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; selector before &lt;code&gt;::ng-deep&lt;/code&gt;. If the &lt;code&gt;::ng-deep&lt;/code&gt; combinator is used without the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; pseudo-class selector, the style can bleed into other components.</source>
          <target state="translated">CSSルールに &lt;code&gt;::ng-deep&lt;/code&gt; 擬似クラスを適用すると、そのルールのビューのカプセル化が完全に無効になります。 &lt;code&gt;::ng-deep&lt;/code&gt; 適用されたスタイルはすべてグローバルスタイルになります。 指定されたスタイルを現在のコンポーネントとそのすべての子孫にスコープするには、 &lt;code&gt;::ng-deep&lt;/code&gt; 前に &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; セレクターを含めるようにしてください。 &lt;code&gt;::ng-deep&lt;/code&gt; コンビネータが &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 擬似クラスセレクタなしで使用される場合、スタイルは他のコンポーネントにブリードできます。</target>
        </trans-unit>
        <trans-unit id="5626fa7bcd970831b49f0ca8814b78f9ec4931b4" translate="yes">
          <source>Apps can use the the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to make &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests across domains when the server doesn't support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS protocol&lt;/a&gt;.</source>
          <target state="translated">サーバーが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORSプロトコルを&lt;/a&gt;サポートしていない場合、アプリは &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用してドメイン間で&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;リクエストを行うことができます 。</target>
        </trans-unit>
        <trans-unit id="9e1bbeca79619dc168ee72be62c4c17e14e649d8" translate="yes">
          <source>Apps do not typically need to create their own animation players, but if you do need to, follow these steps:</source>
          <target state="translated">通常、アプリは独自のアニメーションプレーヤーを作成する必要はありませんが、必要な場合は次の手順を実行します。</target>
        </trans-unit>
        <trans-unit id="8a2f874c6db468662ffb58a8875448a198ac499b" translate="yes">
          <source>Apps often POST data to a server. They POST when submitting a form. In the following example, the &lt;code&gt;HeroesService&lt;/code&gt; posts when adding a hero to the database.</source>
          <target state="translated">多くの場合、アプリはサーバーにデータをPOSTします。 フォームを送信するときにPOSTします。 次の例では、ヒーローをデータベースに追加するときに &lt;code&gt;HeroesService&lt;/code&gt; がポストします。</target>
        </trans-unit>
        <trans-unit id="30b7a831fd8ffb7da2ad0a9cf451a0c40ac3345a" translate="yes">
          <source>Apps often define configuration objects with lots of small facts, like the title of the application or the address of a web API endpoint. These configuration objects aren't always instances of a class. They can be object literals, as shown in the following example.</source>
          <target state="translated">アプリは、多くの場合、アプリケーションのタイトルやWeb APIエンドポイントのアドレスなど、多くの小さな事実で構成オブジェクトを定義します。 これらの構成オブジェクトは、常にクラスのインスタンスであるとは限りません。 次の例に示すように、オブジェクトリテラルにすることができます。</target>
        </trans-unit>
        <trans-unit id="382db7830add4fb204b6af3f246c22df74c9e4e7" translate="yes">
          <source>Apps often use an interceptor to set default headers on outgoing requests.</source>
          <target state="translated">多くの場合、アプリはインターセプターを使用して発信要求にデフォルトのヘッダーを設定します。</target>
        </trans-unit>
        <trans-unit id="e361112818e4768cac11b5e923f0fa29d5292891" translate="yes">
          <source>Apps pass a &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; object to &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; in order to configure the app-wide &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service with routes. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; returns a &lt;a href=&quot;../api/core/modulewithproviders&quot;&gt;ModuleWithProviders&lt;/a&gt;. You add that result to the &lt;code&gt;imports&lt;/code&gt; list of the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">アプリは、 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; を使用してアプリ全体の &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスを構成するために、 Routesオブジェクトを &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; に渡します。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;../api/core/modulewithproviders&quot;&gt;ModuleWithProvidersを&lt;/a&gt;返します。 その結果をルート &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; リストに追加します。</target>
        </trans-unit>
        <trans-unit id="cc390285ebab82a2a8d69e9aa75a08e70733597e" translate="yes">
          <source>Apr 18, 2019</source>
          <target state="translated">2019年4月18日</target>
        </trans-unit>
        <trans-unit id="89df6f0f2f5be74f2452247a90bf7057dde93046" translate="yes">
          <source>Apr 18, 2020</source>
          <target state="translated">2020年4月18日</target>
        </trans-unit>
        <trans-unit id="1571960f64dc1bbd85c8afae57c18c2fe87dc77c" translate="yes">
          <source>April 15, 1988</source>
          <target state="translated">1988年4月15日</target>
        </trans-unit>
        <trans-unit id="16639cf778dca6a11a26844b092710e566557dbc" translate="yes">
          <source>Architect</source>
          <target state="translated">Architect</target>
        </trans-unit>
        <trans-unit id="2e99cf09904565828c48434629a7dae4ca7ab60a" translate="yes">
          <source>Architect expects builders to run once (by default) and return. This behavior is not entirely compatible with a builder that watches for changes (like Webpack, for example). Architect can support watch mode, but there are some things to look out for.</source>
          <target state="translated">Architectは、ビルダーが1回（デフォルトで）実行して戻ることを期待しています。 この動作は、変更を監視するビルダー（Webpackなど）とは完全に互換性がありません。 Architectは監視モードをサポートできますが、注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="cb12b45f1feccd3ae9df35525912508afafb94e0" translate="yes">
          <source>Architect is the tool that the CLI uses to perform complex tasks such as compilation, according to provided configurations. The CLI commands run Architect targets such as &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;lint&lt;/code&gt;. Each named target has a default configuration, specified by an &quot;options&quot; object, and an optional set of named alternate configurations in the &quot;configurations&quot; object.</source>
          <target state="translated">Architectは、提供された構成に従って、コンパイルなどの複雑なタスクを実行するためにCLIが使用するツールです。 CLIコマンドは、 &lt;code&gt;build&lt;/code&gt; 、 &lt;code&gt;serve&lt;/code&gt; 、 &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;lint&lt;/code&gt; などのArchitectターゲットを実行します。 各名前付きターゲットには、「options」オブジェクトで指定されたデフォルト構成と、「configurations」オブジェクト内の名前付き代替構成のオプションセットがあります。</target>
        </trans-unit>
        <trans-unit id="87e9ee57ab4d3251e3425b9e1edd8474dc28d887" translate="yes">
          <source>Architect is the tool that the CLI uses to perform complex tasks, such as compilation and test running. Architect is a shell that runs a specified &lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt; to perform a given task, according to a &lt;a href=&quot;glossary#target&quot;&gt;target&lt;/a&gt; configuration. You can define and configure new builders and targets to extend the CLI. See &lt;a href=&quot;cli-builder&quot;&gt;Angular CLI Builders&lt;/a&gt;.</source>
          <target state="translated">Architectは、コンパイルやテスト実行などの複雑なタスクを実行するためにCLIが使用するツールです。 Architectは、 &lt;a href=&quot;glossary#target&quot;&gt;ターゲット&lt;/a&gt;構成に従って、指定された&lt;a href=&quot;glossary#builder&quot;&gt;ビルダー&lt;/a&gt;を実行して特定のタスクを実行するシェルです。 新しいBuilderとターゲットを定義および構成して、CLIを拡張できます。 &lt;a href=&quot;cli-builder&quot;&gt;Angular CLI Buildersを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="68a0175db55fe6829a7c4fdd2c0b28db697a3b08" translate="yes">
          <source>Architect resolves input options for a given target by taking the default options object, then overwriting values from the configuration used (if any), then further overwriting values from the overrides object passed to &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt;. For the Angular CLI, the overrides object is built from command line arguments.</source>
          <target state="translated">Architectは、既定のオプションオブジェクトを取得し、使用されている構成（存在する場合）の値を上書きし、 &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; 渡されたオーバーライドオブジェクトの値をさらに上書きすることにより、特定のターゲットの入力オプションを解決します。 Angular CLIの場合、オーバーライドオブジェクトはコマンドライン引数から構築されます。</target>
        </trans-unit>
        <trans-unit id="650e1a2c31f381d1ef315d6ecb1f9821f346be20" translate="yes">
          <source>Architect runs builders asynchronously. To invoke a builder, you schedule a task to be run when all configuration resolution is complete.</source>
          <target state="translated">Architectはビルダーを非同期で実行します。 ビルダーを呼び出すには、すべての構成の解決が完了したときに実行されるタスクをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="b8187a8b2aa9dac023d1b4014ab0ac3ced813c4c" translate="yes">
          <source>Architect validates the resulting options values against the schema of the builder. If inputs are valid, Architect creates the context and executes the builder.</source>
          <target state="translated">Architectは、ビルダーのスキーマに対して結果のオプション値を検証します。 入力が有効な場合、Architectはコンテキストを作成し、ビルダーを実行します。</target>
        </trans-unit>
        <trans-unit id="a8051a2dd19694f0d3cd62e35d681d609ea33a34" translate="yes">
          <source>Architectural reasons may lead you to restrict access to a service to the application domain where it belongs. For example, the guide sample includes a &lt;code&gt;VillainsListComponent&lt;/code&gt; that displays a list of villains. It gets those villains from a &lt;code&gt;VillainsService&lt;/code&gt;.</source>
          <target state="translated">アーキテクチャ上の理由により、サービスへのアクセスを、それが属するアプリケーションドメインに制限する場合があります。 たとえば、ガイドサンプルには、 &lt;code&gt;VillainsListComponent&lt;/code&gt; のリストを表示するVillainsListComponentが含まれています。 これらの悪役を &lt;code&gt;VillainsService&lt;/code&gt; から取得します。</target>
        </trans-unit>
        <trans-unit id="77cbe978decf7e18ac53e8ff64911f09e83509bc" translate="yes">
          <source>Architecture Overview</source>
          <target state="translated">アーキテクチャの概要</target>
        </trans-unit>
        <trans-unit id="f01976881a77559b65df5022645150a74a52ede0" translate="yes">
          <source>Architecture overview</source>
          <target state="translated">アーキテクチャの概要</target>
        </trans-unit>
        <trans-unit id="2745debaa64a20eedb49d9f14a0b807c87aa2d2a" translate="yes">
          <source>Area</source>
          <target state="translated">Area</target>
        </trans-unit>
        <trans-unit id="ce5e5792e97fe5c7861d6ae9b29cf5a25cc0e70a" translate="yes">
          <source>Argument</source>
          <target state="translated">Argument</target>
        </trans-unit>
        <trans-unit id="6001476930bb93c3e465d55fc3340756fadc4aa9" translate="yes">
          <source>Argument and option names can be given in either &lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase or dash-case&lt;/a&gt;. &lt;code&gt;--myOptionName&lt;/code&gt; is equivalent to &lt;code&gt;--my-option-name&lt;/code&gt;.</source>
          <target state="translated">引数名とオプション名は&lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCaseまたはdash-case&lt;/a&gt;で指定できます。 &lt;code&gt;--myOptionName&lt;/code&gt; は &lt;code&gt;--my-option-name&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="c2f3a054448adb7997b5c36e72f9be845a0b4d34" translate="yes">
          <source>Arguments (dependencies) to the &lt;code&gt;factory&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;factory&lt;/code&gt; 関数への引数（依存関係）。</target>
        </trans-unit>
        <trans-unit id="6b9d43f8a1c9ac290af8a299e9d3af0066551611" translate="yes">
          <source>Arrange to use product data from an external file.</source>
          <target state="translated">外部ファイルの製品データを使用するよう手配します。</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="a2c4769fd815d0f8646a06e09c4545f8498d2d6d" translate="yes">
          <source>Array index</source>
          <target state="translated">配列インデックス</target>
        </trans-unit>
        <trans-unit id="6f34d9dcb007316860a77e1a43c21a988e0aec6d" translate="yes">
          <source>Array of latest values for the controls</source>
          <target state="translated">コントロールの最新値の配列</target>
        </trans-unit>
        <trans-unit id="73e2cda4b11ea7d0351e69232f425f934d2b347b" translate="yes">
          <source>Array of values for the controls</source>
          <target state="translated">コントロールの値の配列</target>
        </trans-unit>
        <trans-unit id="b4549d1caf74aaf959dfe06fbea3422a27392589" translate="yes">
          <source>As &lt;a href=&quot;toh-pt2&quot;&gt;before&lt;/a&gt;, whenever a user clicks on a hero name, the hero detail appears below the hero list. Now the &lt;code&gt;HeroDetailComponent&lt;/code&gt; is presenting those details instead of the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;toh-pt2&quot;&gt;前&lt;/a&gt;と同様に 、ユーザーがヒーロー名をクリックすると、ヒーローの詳細がヒーローリストの下に表示されます。 現在、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; はHeroesComponentの代わりにこれらの詳細を表示してい &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8320fed1ae9fa1073ff9c98aaa4a06e5e4044fa3" translate="yes">
          <source>As a general rule, import modules with providers &lt;em&gt;exactly once&lt;/em&gt;, preferably in the application's &lt;em&gt;root module&lt;/em&gt;. That's also usually the best place to configure, wrap, and override them.</source>
          <target state="translated">原則として、プロバイダーを使用してモジュールを&lt;em&gt;1回だけ&lt;/em&gt; 、できればアプリケーションの&lt;em&gt;ルートモジュール&lt;/em&gt;にインポートします。 また、通常、それらを構成、ラップ、およびオーバーライドするのに最適な場所です。</target>
        </trans-unit>
        <trans-unit id="deffe223d373efbae49c2b4d79dc103d2e7fb62c" translate="yes">
          <source>As a host page for the &quot;Crisis Center&quot; feature, generate a &lt;code&gt;CrisisCenterHome&lt;/code&gt; component in the &lt;code&gt;crisis-center&lt;/code&gt; folder.</source>
          <target state="translated">「Crisis Center」機能のホストページとして、 &lt;code&gt;crisis-center&lt;/code&gt; フォルダーに &lt;code&gt;CrisisCenterHome&lt;/code&gt; コンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="0367e00c5bf2f26492dcf63c921938c118e9f471" translate="yes">
          <source>As a library developer, you can create your own collections of custom schematics to integrate your library with the Angular CLI.</source>
          <target state="translated">ライブラリ開発者は、独自のカスタム回路図のコレクションを作成して、ライブラリをAngular CLIと統合できます。</target>
        </trans-unit>
        <trans-unit id="dae413a6ba6d2275c4b29345c399c39ff53553d6" translate="yes">
          <source>As a plain number, in milliseconds: &lt;code&gt;100&lt;/code&gt;</source>
          <target state="translated">ミリ秒単位の単純な数値： &lt;code&gt;100&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d6c917d0ac550880e60ac6263e147c30d2fadd4" translate="yes">
          <source>As a publisher, you create an &lt;code&gt;Observable&lt;/code&gt; instance that defines a &lt;em&gt;subscriber&lt;/em&gt; function. This is the function that is executed when a consumer calls the &lt;code&gt;subscribe()&lt;/code&gt; method. The subscriber function defines how to obtain or generate values or messages to be published.</source>
          <target state="translated">パブリッシャーとして、 &lt;em&gt;サブスクライバー&lt;/em&gt;関数を定義する &lt;code&gt;Observable&lt;/code&gt; インスタンスを作成します。 これは、コンシューマーが &lt;code&gt;subscribe()&lt;/code&gt; メソッドを呼び出すときに実行される関数です。 サブスクライバー関数は、公開する値またはメッセージを取得または生成する方法を定義します。</target>
        </trans-unit>
        <trans-unit id="90863afd93efc1b713bee9807c95ef1c370a7606" translate="yes">
          <source>As a service &lt;em&gt;tester&lt;/em&gt;, you must at least think about the first level of service dependencies but you &lt;em&gt;can&lt;/em&gt; let Angular DI do the service creation and deal with constructor argument order when you use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; testing utility to provide and create services.</source>
          <target state="translated">サービス&lt;em&gt;テスター&lt;/em&gt;として、少なくともサービスの依存関係の最初のレベルを &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 必要がありますが、 TestBedテストユーティリティを使用してサービスを提供および作成する場合、Angular DIにサービスの作成を行わせ、コンストラクター引数の順序を処理させること&lt;em&gt;ができ&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4b7ecaa28f2dff4ab449f30fd1ccc45445c8a41d" translate="yes">
          <source>As a two-way binding: &lt;code&gt;&amp;lt;my-component [(myValue)]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt;. Since most AngularJS two-way bindings actually only need a one-way binding in practice, &lt;code&gt;&amp;lt;my-component [myValue]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; is often enough.</source>
          <target state="translated">双方向バインディングとして： &lt;code&gt;&amp;lt;my-component [(myValue)]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; 。 実際には、ほとんどのAngularJS双方向バインディングは実際には一方向バインディングのみを必要とするため、多くの場合、 &lt;code&gt;&amp;lt;my-component [myValue]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; で十分です。</target>
        </trans-unit>
        <trans-unit id="70711c31150ebda36f5058c7ef67fc2dc552d337" translate="yes">
          <source>As above, the target is the button's click event.</source>
          <target state="translated">上記のように、ターゲットはボタンのクリックイベントです。</target>
        </trans-unit>
        <trans-unit id="a2fa8220cfc617a4e487c2e9bd8726e63796dd6d" translate="yes">
          <source>As an example, let&amp;rsquo;s create a builder that executes a shell command. To create a builder, use the &lt;code&gt;createBuilder()&lt;/code&gt; CLI Builder function, and return a &lt;code&gt;BuilderOutput&lt;/code&gt; object.</source>
          <target state="translated">例として、シェルコマンドを実行するビルダーを作成しましょう。 ビルダーを作成するには、 &lt;code&gt;createBuilder()&lt;/code&gt; CLI Builder関数を使用して、 &lt;code&gt;BuilderOutput&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a1693faa6c4defc1d4a4ffd82c7efdcbe67d91f3" translate="yes">
          <source>As applications grow in functionality, they also grow in size. The CLI allows you to set size thresholds in your configuration to ensure that parts of your application stay within size boundaries that you define.</source>
          <target state="translated">アプリケーションの機能が大きくなると、サイズも大きくなります。 CLIを使用すると、構成にサイズのしきい値を設定して、アプリケーションの一部が定義したサイズの境界内に収まるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="426d689742e365afbaea750636ace81f4c7d3a54" translate="yes">
          <source>As described above, in reactive forms each form element in the view is directly linked to a form model (&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance). Updates from the view to the model and from the model to the view are synchronous and aren't dependent on the UI rendered. The diagrams below use the same favorite color example to demonstrate how data flows when an input field's value is changed from the view and then from the model.</source>
          <target state="translated">上記のように、リアクティブフォームでは、ビュー内の各フォーム要素はフォームモデル（ &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンス）に直接リンクされます。 ビューからモデルへ、およびモデルからビューへの更新は同期的であり、レンダリングされるUIに依存しません。 以下の図は、同じ好みの色の例を使用して、入力フィールドの値がビューから、そしてモデルから変更されたときのデータの流れを示しています。</target>
        </trans-unit>
        <trans-unit id="880f9c880127736c203edc896434eeab319390fd" translate="yes">
          <source>As discussed earlier, component CSS styles are encapsulated into the component's view and don't affect the rest of the application.</source>
          <target state="translated">前述のように、コンポーネントのCSSスタイルはコンポーネントのビューにカプセル化され、アプリケーションの残りの部分には影響しません。</target>
        </trans-unit>
        <trans-unit id="5b0f7dd7e0658c043afd1da5639cb6335884c9a5" translate="yes">
          <source>As explained in &lt;a href=&quot;testing#compile-components&quot;&gt;&lt;em&gt;Calling compileComponents()&lt;/em&gt;&lt;/a&gt; above, these tests could be run in a non-CLI environment where Angular would have to compile them in the browser.</source>
          <target state="translated">上記の&lt;a href=&quot;testing#compile-components&quot;&gt;&lt;em&gt;compileComponents（）の呼び出しで&lt;/em&gt;&lt;/a&gt;説明したように、これらのテストは、Angularがブラウザーでコンパイルする必要がある非CLI環境で実行できます。</target>
        </trans-unit>
        <trans-unit id="79d75fcadb38a027a00ab11f48886637114c88fe" translate="yes">
          <source>As for any external dependency, you must mock the HTTP backend so your tests can simulate interaction with a remote server. The &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt; library makes it straightforward to set up such mocking.</source>
          <target state="translated">外部依存関係については、HTTPバックエンドをモックして、テストがリモートサーバーとの相互作用をシミュレートできるようにする必要があります。 &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt; ライブラリにより、このようなモックを簡単に設定できます。</target>
        </trans-unit>
        <trans-unit id="0535610d785a6f15d9d14a76e023b8b818afd751" translate="yes">
          <source>As mentioned before, one of the key differences between &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; has to do with change detection and how it is propagated between the two frameworks.</source>
          <target state="translated">前述したように、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; の重要な違いの1つは、変更検出と2つのフレームワーク間での伝播方法に関係しています。</target>
        </trans-unit>
        <trans-unit id="53b618af56c304e8ae9ebf8b1422dcc8b530788c" translate="yes">
          <source>As mentioned earlier, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; needs to know how to instantiate the Angular module. It needs a recipe. You define that recipe by providing a factory function that can create an instance of the Angular module. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; accepts two types of factory functions:</source>
          <target state="translated">前述したように、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、Angularモジュールをインスタンス化する方法を知る必要があります。 レシピが必要です。 Angularモジュールのインスタンスを作成できるファクトリー関数を提供することにより、そのレシピを定義します。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、2種類のファクトリー関数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="6075532c0eead9c5665dc3a24b06aa65dfa58aa5" translate="yes">
          <source>As mentioned in &lt;a href=&quot;dependency-injection-providers#interface-not-valid-token&quot;&gt;DI Providers&lt;/a&gt;, an interface is not a valid DI token because it is a TypeScript artifact that doesn't exist at run time. Use this abstract class interface to get the strong typing of an interface, and also use it as a provider token in the way you would a normal class.</source>
          <target state="translated">&lt;a href=&quot;dependency-injection-providers#interface-not-valid-token&quot;&gt;DIプロバイダー&lt;/a&gt;で説明したように、インターフェイスは実行時に存在しないTypeScriptアーティファクトであるため、有効なDIトークンではありません。 この抽象クラスインターフェイスを使用してインターフェイスの厳密な型付けを取得し、通常のクラスと同じようにプロバイダートークンとして使用します。</target>
        </trans-unit>
        <trans-unit id="b355748c485647b9309423108913382295cddbcc" translate="yes">
          <source>As of Angular version 8, all &lt;code&gt;platform-webworker&lt;/code&gt; APIs are deprecated. This includes both packages: &lt;code&gt;@angular/platform-webworker&lt;/code&gt; and &lt;code&gt;@angular/platform-webworker-dynamic&lt;/code&gt;.</source>
          <target state="translated">Angularバージョン8では、すべての &lt;code&gt;platform-webworker&lt;/code&gt; APIが非推奨になりました。 これには、 &lt;code&gt;@angular/platform-webworker&lt;/code&gt; と &lt;code&gt;@angular/platform-webworker-dynamic&lt;/code&gt; 両方のパッケージが含まれます。</target>
        </trans-unit>
        <trans-unit id="7a5efb4af0cce4e2df85ce6e18e4d43895419baa" translate="yes">
          <source>As of Angular version 8, lazy loading code can be accomplished simply by using the dynamic import syntax &lt;code&gt;import('...')&lt;/code&gt;. In your application, you create a new service that uses dynamic imports to lazy load AngularJS.</source>
          <target state="translated">Angularバージョン8では、動的インポート構文 &lt;code&gt;import('...')&lt;/code&gt; を使用するだけで、遅延ロードコードを実現できます。 アプリケーションで、動的インポートを使用してAngularJSを遅延ロードする新しいサービスを作成します。</target>
        </trans-unit>
        <trans-unit id="1a5d8ac3e628f548a6202a37c401e9210549cc5a" translate="yes">
          <source>As of Typescript 2.0, you can enforce &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;strict null checking&lt;/a&gt; with the &lt;code&gt;--strictNullChecks&lt;/code&gt; flag. TypeScript then ensures that no variable is unintentionally null or undefined.</source>
          <target state="translated">Typescript 2.0では、 &lt;code&gt;--strictNullChecks&lt;/code&gt; フラグを使用して&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;厳密なnullチェック&lt;/a&gt;を実施できます。 その後、TypeScriptは、変数が意図せずにnullまたは未定義にならないようにします。</target>
        </trans-unit>
        <trans-unit id="6c04205c526a4908855b8b9cd7699a33503a185d" translate="yes">
          <source>As service &lt;em&gt;consumer&lt;/em&gt;, you don't worry about any of this. You don't worry about the order of constructor arguments or how they're created.</source>
          <target state="translated">サービス利用&lt;em&gt;者&lt;/em&gt;として、あなたはこれについて心配する必要はありません。 コンストラクタ引数の順序や作成方法について心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="d046d3787fe0555ffbe29692f926aa83f46f12d8" translate="yes">
          <source>As soon as you import the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, this directive becomes active by default on all &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags. You don't need to add a special selector.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートするとすぐに 、このディレクティブはすべての &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグでデフォルトでアクティブになります。 特別なセレクターを追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1c2a6c1dd7997586cb51494b2cd0194944234721" translate="yes">
          <source>As the &lt;code&gt;NgFor&lt;/code&gt; directive loops through the list, it sets and resets properties of its own &lt;em&gt;context&lt;/em&gt; object. These properties can include, but aren't limited to, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;, and a special property named &lt;code&gt;$implicit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NgFor&lt;/code&gt; ディレクティブがリストをループすると、独自の&lt;em&gt;コンテキスト&lt;/em&gt;オブジェクトのプロパティを設定およびリセットします。 これらのプロパティには、 &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;$implicit&lt;/code&gt; という名前の特別なプロパティが含まれますが、これらに限定されません。</target>
        </trans-unit>
        <trans-unit id="cb72e80f48988fd1b9af9fabfe152ff02575aa3d" translate="yes">
          <source>As the &lt;code&gt;isStable&lt;/code&gt; Observable runs outside the zone, the &lt;code&gt;value&lt;/code&gt; field will be updated properly, but the template will not be refreshed!</source>
          <target state="translated">&lt;code&gt;isStable&lt;/code&gt; Observableはゾーン外で実行されるため、 &lt;code&gt;value&lt;/code&gt; フィールドは適切に更新されますが、テンプレートは更新されません！</target>
        </trans-unit>
        <trans-unit id="b2ba4060e4e4afd4ec60303640effc6e19da00de" translate="yes">
          <source>As the app grows, this rule becomes even more important. &lt;a href=&quot;styleguide#toc&quot;&gt;Back to top&lt;/a&gt;</source>
          <target state="translated">アプリが成長するにつれて、このルールはさらに重要になります。 &lt;a href=&quot;styleguide#toc&quot;&gt;トップに戻る&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="83b41c56b3b8492075b0d6fee4f3faaeb4fc7ed3" translate="yes">
          <source>As the diagram shows, use inputs and outputs together in the same manner as using them separately. Here, the child selector is &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;deleteRequest&lt;/code&gt; being &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; properties in the child component class. The property &lt;code&gt;currentItem&lt;/code&gt; and the method &lt;code&gt;crossOffItem()&lt;/code&gt; are both in the parent component class.</source>
          <target state="translated">図が示すように、入力と出力を別々に使用するのと同じ方法で一緒に使用します。 ここでは、子セレクターは &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; で 、 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;deleteRequest&lt;/code&gt; は子コンポーネントクラスの &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; プロパティです。 プロパティ &lt;code&gt;currentItem&lt;/code&gt; とメソッド &lt;code&gt;crossOffItem()&lt;/code&gt; は両方とも親コンポーネントクラスにあります。</target>
        </trans-unit>
        <trans-unit id="576de19f7cd986ea910a0781414027d767fdf59f" translate="yes">
          <source>As the message says, the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; element does not have a &lt;code&gt;colspan&lt;/code&gt; property. This is true because &lt;code&gt;colspan&lt;/code&gt; is an attribute&amp;mdash;&lt;code&gt;colSpan&lt;/code&gt;, with a capital &lt;code&gt;S&lt;/code&gt;, is the corresponding property. Interpolation and property binding can set only &lt;em&gt;properties&lt;/em&gt;, not attributes.</source>
          <target state="translated">メッセージにあるように、 &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 要素には &lt;code&gt;colspan&lt;/code&gt; プロパティがありません。 これは、 &lt;code&gt;colspan&lt;/code&gt; が属性であり、大文字の &lt;code&gt;S&lt;/code&gt; を持つ &lt;code&gt;colSpan&lt;/code&gt; が対応するプロパティであるためです。 補間とプロパティバインディングは、属性ではなく&lt;em&gt;プロパティ&lt;/em&gt;のみ&lt;em&gt;を&lt;/em&gt;設定できます。</target>
        </trans-unit>
        <trans-unit id="44bacbc3e7fdb0b748fcb62abf55c43e15ce9165" translate="yes">
          <source>As the user types in the search box, an input event binding calls the component's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method with the new search box value.</source>
          <target state="translated">ユーザーが検索ボックスに入力すると、入力イベントバインディングは、新しい検索ボックスの値を使用してコンポーネントの &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9055245f3b1e80adc8f94fdba52f5ad34bb44d2d" translate="yes">
          <source>As the validation begins, the &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; delegates to the &lt;code&gt;HeroesService&lt;/code&gt;&lt;code&gt;isAlterEgoTaken()&lt;/code&gt; method with the current control value. At this point the control is marked as &lt;code&gt;pending&lt;/code&gt; and remains in this state until the observable chain returned from the &lt;code&gt;validate()&lt;/code&gt; method completes.</source>
          <target state="translated">検証が開始されると、 &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; は現在のコントロール値を使用して &lt;code&gt;HeroesService&lt;/code&gt; &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; メソッドに委任します。 この時点で、コントロールは &lt;code&gt;pending&lt;/code&gt; としてマークされ、 &lt;code&gt;validate()&lt;/code&gt; メソッドから返されるオブザーバブルチェーンが完了するまでこの状態のままになります。</target>
        </trans-unit>
        <trans-unit id="012a24a970804ecbbe43bf6ba131c69195b1c31f" translate="yes">
          <source>As these validators are all sync validators, you pass them in as the second argument.</source>
          <target state="translated">これらのバリデータはすべて同期バリデータなので、2番目の引数として渡します。</target>
        </trans-unit>
        <trans-unit id="0f45027f55358700d46117f934776e60e6b2ad7a" translate="yes">
          <source>As users enter form data, you'll capture their changes and update an instance of a model. You can't lay out the form until you know what the model looks like.</source>
          <target state="translated">ユーザーがフォームデータを入力すると、変更をキャプチャしてモデルのインスタンスを更新します。 モデルがどのように見えるかがわかるまで、フォームをレイアウトすることはできません。</target>
        </trans-unit>
        <trans-unit id="1b00d72f3724db2eb2f17c415c8acad26e63056a" translate="yes">
          <source>As usual, you write a constructor that asks Angular to inject services that the component requires and reference them as private variables.</source>
          <target state="translated">いつものように、Angularにコンポーネントが必要とするサービスを注入し、それらをプライベート変数として参照するように要求するコンストラクターを作成します。</target>
        </trans-unit>
        <trans-unit id="2a5fa238e4e05c9102523cdc407b74b4b0c63df8" translate="yes">
          <source>As with components, you can add as many directive property bindings as you need by stringing them along in the template. The developer should be able to write the following template HTML to both bind to the &lt;code&gt;AppComponent.color&lt;/code&gt; and fall back to &quot;violet&quot; as the default color.</source>
          <target state="translated">コンポーネントと同様に、テンプレート内で文字列化することにより、必要な数のディレクティブプロパティバインディングを追加できます。 開発者は、次のテンプレートHTMLを記述して、 &lt;code&gt;AppComponent.color&lt;/code&gt; にバインドし、デフォルト色として「バイオレット」にフォールバックできる必要があります。</target>
        </trans-unit>
        <trans-unit id="30b5e960013eb063b20be7ecc6ff05c14a6c57f8" translate="yes">
          <source>As with expressions, avoid writing complex template statements. A method call or simple property assignment should be the norm.</source>
          <target state="translated">式と同様に、複雑なテンプレートステートメントを記述しないでください。 メソッドの呼び出しまたは単純なプロパティの割り当てが標準である必要があります。</target>
        </trans-unit>
        <trans-unit id="07c4c64d5513511be2cb127c82fcb01ee8b7e55a" translate="yes">
          <source>As with expressions, statements can refer only to what's in the statement context such as an event handling method of the component instance.</source>
          <target state="translated">式と同様に、ステートメントは、コンポーネントインスタンスのイベント処理メソッドなど、ステートメントコンテキストにあるもののみを参照できます。</target>
        </trans-unit>
        <trans-unit id="bb901be354860557451c002789bc0c1663e2f0b6" translate="yes">
          <source>As with other directives, you apply a structural directive to a &lt;em&gt;host element&lt;/em&gt;. The directive then does whatever it's supposed to do with that host element and its descendants.</source>
          <target state="translated">他のディレクティブと同様に、構造的なディレクティブを&lt;em&gt;ホスト要素に&lt;/em&gt;適用します。 ディレクティブは、そのホスト要素とその子孫に対して行うべきことをすべて実行します。</target>
        </trans-unit>
        <trans-unit id="1d5b6417cba4ef881daf50c6a534671a6568bcbd" translate="yes">
          <source>As with other structural directives, the &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; can be desugared into the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element form.</source>
          <target state="translated">他の構造ディレクティブと同様に、 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素形式にデシュガーできます。</target>
        </trans-unit>
        <trans-unit id="bf9ee189724da5d4f748ccae4de0e3edcce56bb7" translate="yes">
          <source>As with the &lt;code&gt;HeroesModule&lt;/code&gt;, you must add the &lt;code&gt;CrisisCenterModule&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; the &lt;code&gt;AppRoutingModule&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;HeroesModule&lt;/code&gt; と同様に、 &lt;code&gt;AppModule&lt;/code&gt; &lt;em&gt;前&lt;/em&gt;に &lt;code&gt;AppRoutingModule&lt;/code&gt; AppModuleの &lt;code&gt;imports&lt;/code&gt; 配列に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="7ce201841a7ab6826908ab4e2e8a1bf231d9b18c" translate="yes">
          <source>As with the previous &lt;code&gt;expectOne()&lt;/code&gt;, the test will fail if 0 or 2+ requests satisfy this predicate.</source>
          <target state="translated">前の &lt;code&gt;expectOne()&lt;/code&gt; と同様に、0または2+の要求がこの述部を満たす場合、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="ec0a709258428a25296d9a2a6bba7576693ff220" translate="yes">
          <source>As you can see here, the &lt;code&gt;parentItem&lt;/code&gt; in &lt;code&gt;AppComponent&lt;/code&gt; is a string, which the &lt;code&gt;ItemDetailComponent&lt;/code&gt; expects:</source>
          <target state="translated">ここで見ることができるように、 &lt;code&gt;parentItem&lt;/code&gt; &lt;code&gt;AppComponent&lt;/code&gt; は文字列であり、 &lt;code&gt;ItemDetailComponent&lt;/code&gt; が期待しています：</target>
        </trans-unit>
        <trans-unit id="b8ce8f85bb4b5482efa912931cf27e2ce382563a" translate="yes">
          <source>As you can see, the &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; class implements the &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; interface. In the constructor, we inject the &lt;code&gt;HeroesService&lt;/code&gt; that has the following interface:</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; クラスは &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; インターフェイスを実装しています。 コンストラクターで、次のインターフェイスを持つ &lt;code&gt;HeroesService&lt;/code&gt; を注入します。</target>
        </trans-unit>
        <trans-unit id="f958b9634ee0ca82f703565029116255553f7d8f" translate="yes">
          <source>As you can see, the response object has a &lt;code&gt;body&lt;/code&gt; property of the correct type.</source>
          <target state="translated">ご覧のとおり、応答オブジェクトには正しいタイプの &lt;code&gt;body&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="30b1da4a374a4b82201be5944135fd88e7c2eeb0" translate="yes">
          <source>As you click the button, the displayed date alternates between &quot;&lt;strong&gt;&lt;samp&gt;04/15/1988&lt;/samp&gt;&lt;/strong&gt;&quot; and &quot;&lt;strong&gt;&lt;samp&gt;Friday, April 15, 1988&lt;/samp&gt;&lt;/strong&gt;&quot;.</source>
          <target state="translated">ボタンをクリックすると、表示される日付が「 &lt;strong&gt;&lt;samp&gt;1988年4月15日&lt;/samp&gt;&lt;/strong&gt; 」と「 &lt;strong&gt;&lt;samp&gt;1988年4月15日金曜日&lt;/samp&gt;&lt;/strong&gt; 」の間で&lt;strong&gt;&lt;samp&gt;切り替わり&lt;/samp&gt;&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ab33e4cc94b129cb31d7c97d8407c2606a472c70" translate="yes">
          <source>As you create new interceptors, add them to the &lt;code&gt;httpInterceptorProviders&lt;/code&gt; array and you won't have to revisit the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">新しいインターセプターを作成するときに、それらを &lt;code&gt;httpInterceptorProviders&lt;/code&gt; 配列に追加すると、 AppModuleを再訪する &lt;code&gt;AppModule&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b35cd950e3abf3c41b9d1fee6bfbba54cf41fa95" translate="yes">
          <source>As you may recall, &lt;code&gt;AdDirective&lt;/code&gt; injects &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; into its constructor. This is how the directive accesses the element that you want to use to host the dynamic component.</source>
          <target state="translated">&lt;code&gt;AdDirective&lt;/code&gt; ているかもしれませんが、 AdDirectiveはコンストラクタにViewContainerRefを注入します。 これは、動的コンポーネントをホストするために使用する要素にディレクティブがアクセスする方法です。</target>
        </trans-unit>
        <trans-unit id="66db9819ffe3ed53a6e4700b9705018402a68de2" translate="yes">
          <source>As you might have guessed, you don't need to change anything in the way you bootstrap your existing AngularJS app. Unlike &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;&amp;mdash;which requires some extra steps&amp;mdash; &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is able to take care of bootstrapping the Angular module, as long as you provide the recipe.</source>
          <target state="translated">ご想像のとおり、既存のAngularJSアプリをブートストラップする方法で何かを変更する必要はありません。 追加の手順が必要なUpgradeModuleとは異なり、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; は、レシピを提供している限り、Angularモジュールのブートストラップを処理できます。</target>
        </trans-unit>
        <trans-unit id="b0d2196193897c3d628ff542df1f728e1990a4fd" translate="yes">
          <source>As you near the end of the development process, serving the contents of your output folder from a local web server can give you a better idea of how your application will behave when it is deployed to a remote server. You will need two terminals to get the live-reload experience.</source>
          <target state="translated">開発プロセスの終わりに近づくと、ローカルWebサーバーから出力フォルダーのコンテンツを提供することで、リモートサーバーにデプロイされたときのアプリケーションの動作をよりよく理解できます。 ライブリロードを体験するには、2つの端末が必要です。</target>
        </trans-unit>
        <trans-unit id="5cf5b93ed1e9a45e9ec8c8bf0566005ffc514ad0" translate="yes">
          <source>As you'll be navigating to the &lt;em&gt;Admin Dashboard&lt;/em&gt; route after logging in, you'll update it to handle the query parameters and fragment.</source>
          <target state="translated">ログイン後に&lt;em&gt;管理ダッシュボード&lt;/em&gt;ルートに移動するので、クエリパラメーターとフラグメントを処理するようにルートを更新します。</target>
        </trans-unit>
        <trans-unit id="f0b43016a337094572c49d0ebcd7d6f06663336c" translate="yes">
          <source>As you've learned, a component in an outlet persists until you navigate away to a new component. Secondary outlets are no different in this regard.</source>
          <target state="translated">学習したように、アウトレットのコンポーネントは、新しいコンポーネントに移動するまで持続します。 この点では、二次コンセントも同様です。</target>
        </trans-unit>
        <trans-unit id="e1b726055d199d23cbbaf0bbb7c90f5393684b71" translate="yes">
          <source>As you've seen, multiple components can leverage the same service. Later in this tutorial, the shipping component will use the cart service to retrieve shipping data via HTTP from the &lt;code&gt;shipping.json&lt;/code&gt; file. Here you'll define the &lt;code&gt;get()&lt;/code&gt; method that will be used.</source>
          <target state="translated">これまで見てきたように、複数のコンポーネントが同じサービスを活用できます。 このチュートリアルの後半では、配送コンポーネントはカートサービスを使用して、 &lt;code&gt;shipping.json&lt;/code&gt; ファイルからHTTP経由で配送データを取得します。 ここで、使用する &lt;code&gt;get()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="c81caf6ffe3d326f41b1efc1332f0197102bbbe8" translate="yes">
          <source>As you've worked through the milestones, the application has naturally gotten larger. As you continue to build out feature areas, the overall application size will continue to grow. At some point you'll reach a tipping point where the application takes a long time to load.</source>
          <target state="translated">マイルストーンを進めていくと、アプリケーションは当然大きくなります。 機能領域を構築し続けるにつれて、アプリケーション全体のサイズは拡大し続けます。 ある時点で、アプリケーションのロードに時間がかかる転換点に到達します。</target>
        </trans-unit>
        <trans-unit id="f3171c48f50cadb18be953d56f6aadf2c1470f7e" translate="yes">
          <source>As your app grows, you can organize code relevant for a specific feature. This helps apply clear boundaries for features. With feature modules, you can keep code related to a specific functionality or feature separate from other code. Delineating areas of your app helps with collaboration between developers and teams, separating directives, and managing the size of the root module.</source>
          <target state="translated">アプリが成長するにつれて、特定の機能に関連するコードを整理できます。 これにより、フィーチャに明確な境界を適用できます。 機能モジュールを使用すると、特定の機能または機能に関連するコードを他のコードとは別に保つことができます。 アプリの領域を明確にすると、開発者とチーム間のコラボレーション、ディレクティブの分離、およびルートモジュールのサイズの管理に役立ちます。</target>
        </trans-unit>
        <trans-unit id="ff3222db2ced161973e02584ac4049af0ec6632b" translate="yes">
          <source>Asking the service worker to activate the latest version of the app for the current tab.</source>
          <target state="translated">現在のタブでアプリの最新バージョンをアクティブにするようサービスワーカーに依頼します。</target>
        </trans-unit>
        <trans-unit id="fbc52ac881315f0b01fcb3898c6bbefb4ca717ed" translate="yes">
          <source>Asking the service worker to check the server for new updates.</source>
          <target state="translated">サービスワーカーにサーバーの新しい更新を確認するように依頼します。</target>
        </trans-unit>
        <trans-unit id="269d80f2e6ae0d9c46cde478b4e5500f9c28b64f" translate="yes">
          <source>Assert that the component &lt;code&gt;favoriteColor&lt;/code&gt; property value matches the value from the input.</source>
          <target state="translated">コンポーネントの &lt;code&gt;favoriteColor&lt;/code&gt; プロパティ値が入力からの値と一致することをアサートします。</target>
        </trans-unit>
        <trans-unit id="3add2d771e4f408357de38d3cf1e4671e71d6e99" translate="yes">
          <source>Assert that the component's &lt;code&gt;favoriteColorControl&lt;/code&gt; value matches the value from the input.</source>
          <target state="translated">コンポーネントの &lt;code&gt;favoriteColorControl&lt;/code&gt; 値が入力からの値と一致することをアサートします。</target>
        </trans-unit>
        <trans-unit id="60d381f9c278556bf5f707455aa4e181db801691" translate="yes">
          <source>Assert that the input value matches the value of the &lt;code&gt;favoriteColor&lt;/code&gt; property in the component instance.</source>
          <target state="translated">入力値がコンポーネントインスタンスの &lt;code&gt;favoriteColor&lt;/code&gt; プロパティの値と一致することをアサートします。</target>
        </trans-unit>
        <trans-unit id="2cac1bd12dceb2fce01f7d2c39980b6f3eb123f1" translate="yes">
          <source>Assert that the new value set on the control matches the value in the input.</source>
          <target state="translated">コントロールに設定された新しい値が入力の値と一致することを表明します。</target>
        </trans-unit>
        <trans-unit id="102dbd8a0d9de9bd9ed34eaa50b57bc20f17597a" translate="yes">
          <source>Assert the correct type of the expression bound to the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; input within the template.</source>
          <target state="translated">テンプレート内の &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 入力にバインドされた式の正しいタイプをアサートします。</target>
        </trans-unit>
        <trans-unit id="34ae054cee78e0c6e83c3e3cd694a67e5d64d9d1" translate="yes">
          <source>Asserts the correct type of the context for the template that &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; will render.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; がレンダリングするテンプレートのコンテキストの正しいタイプをアサートします。</target>
        </trans-unit>
        <trans-unit id="64db28c14c3f75eaf3fe6ba74774a54e6cbb89bd" translate="yes">
          <source>Asset groups follow the Typescript interface shown here:</source>
          <target state="translated">アセットグループは、次に示すTypescriptインターフェイスに従います。</target>
        </trans-unit>
        <trans-unit id="d6c9dfdc694085b6f0d02ea7e1e4fd3d4df7e99c" translate="yes">
          <source>Assets configuration</source>
          <target state="translated">資産構成</target>
        </trans-unit>
        <trans-unit id="e6a6bbc5e96926eeccb08d147396e13b4a2aa489" translate="yes">
          <source>Assignments (&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt;)</source>
          <target state="translated">割り当て（ &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;+=&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; 、 &lt;code&gt;...&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7a1a70a899ae4731ff189ca13512ffc94c946adb" translate="yes">
          <source>Assigns this bus to the given zone. Any callbacks attached to channels where runInZone was set to true on initialization will be executed in the given zone.</source>
          <target state="translated">このバスを指定されたゾーンに割り当てます。 初期化時にrunInZoneがtrueに設定されたチャネルに接続されたコールバックは、指定されたゾーンで実行されます。</target>
        </trans-unit>
        <trans-unit id="d242cadc4aa1e98583aee808bc5bd94b0df50df6" translate="yes">
          <source>Assigns this sink to the given zone. Any channels which are initialized with runInZone set to true will wait for the given zone to exit before sending messages.</source>
          <target state="translated">このシンクを指定されたゾーンに割り当てます。 runInZoneをtrueに設定して初期化されたチャネルは、指定されたゾーンが終了するのを待ってからメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="8f94f199baf1d5d8266597ec2112eb1be1c1fb69" translate="yes">
          <source>Assigns this source to the given zone. Any channels which are initialized with runInZone set to true will emit events that will be executed within the given zone.</source>
          <target state="translated">このソースを特定のゾーンに割り当てます。 runInZoneをtrueに設定して初期化されたチャネルは、指定されたゾーン内で実行されるイベントを発行します。</target>
        </trans-unit>
        <trans-unit id="274e2293c4a3f531e996553089413c2aeb58f8c2" translate="yes">
          <source>Associates a named animation state with a set of CSS styles. See &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">名前付きアニメーション状態をCSSスタイルのセットに関連付けます。 &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 参照してください</target>
        </trans-unit>
        <trans-unit id="4ae49ef1cd7752015463f129314f634187b62c7a" translate="yes">
          <source>Associates an animation with an entry trigger that can be attached to an element. See &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">要素にアタッチできるエントリトリガーにアニメーションを関連付けます。 &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="4784eaa8aeb7a762e1180e053368ca4e65b375b2" translate="yes">
          <source>Assume the user is logged into the application at &lt;code&gt;example-bank.com&lt;/code&gt;. The user opens an email and clicks a link to &lt;code&gt;evil.com&lt;/code&gt;, which opens in a new tab.</source>
          <target state="translated">ユーザーが &lt;code&gt;example-bank.com&lt;/code&gt; でアプリケーションにログインしていると仮定します。 ユーザーはメールを開き、 &lt;code&gt;evil.com&lt;/code&gt; へのリンクをクリックします。このリンクは新しいタブで開きます。</target>
        </trans-unit>
        <trans-unit id="e46bf719d36c903e3f4ff538c57fdd22e7050c74" translate="yes">
          <source>Assume you have a library project &lt;code&gt;my-lib&lt;/code&gt; in your Angular workspace. To tell the library how to build the schematics, add a &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; file next to the generated &lt;code&gt;tsconfig.lib.json&lt;/code&gt; file that configures the library build.</source>
          <target state="translated">Angularワークスペースにライブラリプロジェクト &lt;code&gt;my-lib&lt;/code&gt; があるとします。 ライブラリに回路図の構築方法を指示するには、ライブラリ構築を構成する生成された &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; ファイルの隣にtsconfig.schematics.jsonファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="75818174243243561c9a25a5467849a1c2d2c022" translate="yes">
          <source>Assuming &lt;code&gt;dateObj&lt;/code&gt; is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08) in the &lt;em&gt;local&lt;/em&gt; time and locale is 'en-US':</source>
          <target state="translated">&lt;code&gt;dateObj&lt;/code&gt; がローカル時間で（年：2010、月：9、日：3、時間：12 PM、分：05、秒：08）であり、ロケールが「en-US」であると仮定します。</target>
        </trans-unit>
        <trans-unit id="5873ba4b7149a08e105140ef51ae2d0ffcc5d42b" translate="yes">
          <source>Assuming that the CLI &lt;code&gt;ng serve&lt;/code&gt; command is still running, the browser should refresh and display both the application title and the hero name.</source>
          <target state="translated">CLI &lt;code&gt;ng serve&lt;/code&gt; コマンドがまだ実行されていると仮定すると、ブラウザーは更新され、アプリケーションのタイトルとヒーロー名の両方が表示されます。</target>
        </trans-unit>
        <trans-unit id="94f5418a94f3eedc92108d6697fb720a530c5a6c" translate="yes">
          <source>Assuming you already have an app that you created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, create a feature module using the CLI by entering the following command in the root project directory. Replace &lt;code&gt;CustomerDashboard&lt;/code&gt; with the name of your module. You can omit the &quot;Module&quot; suffix from the name because the CLI appends it:</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;で作成したアプリが既にあると仮定して、ルートプロジェクトディレクトリに次のコマンドを入力して、CLIを使用して機能モジュールを作成します。 &lt;code&gt;CustomerDashboard&lt;/code&gt; をモジュールの名前に置き換えます。 CLIが追加するため、名前から「モジュール」サフィックスを省略できます。</target>
        </trans-unit>
        <trans-unit id="8b593995c88f61a609044a01e37e8e4ccc22e065" translate="yes">
          <source>Assumptions</source>
          <target state="translated">Assumptions</target>
        </trans-unit>
        <trans-unit id="850c312e6795e144c4801560d1a8a36931550927" translate="yes">
          <source>Async Validation</source>
          <target state="translated">非同期検証</target>
        </trans-unit>
        <trans-unit id="3d8523026285ca381ac26c6046011d703dc76210" translate="yes">
          <source>Async observable helpers</source>
          <target state="translated">非同期の監視可能なヘルパー</target>
        </trans-unit>
        <trans-unit id="a2115adcf8a7abd68847a06a2ca483273231f7b5" translate="yes">
          <source>Async observables</source>
          <target state="translated">非同期オブザーバブル</target>
        </trans-unit>
        <trans-unit id="66faa9aa7a8da44bac968eb4f9651b0395d1e769" translate="yes">
          <source>Async pipe</source>
          <target state="translated">非同期パイプ</target>
        </trans-unit>
        <trans-unit id="465bdb8533ebb255eef127b77064a4450ccdad5a" translate="yes">
          <source>Async test with &lt;em&gt;async()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;async（）を使用&lt;/em&gt;した非同期テスト</target>
        </trans-unit>
        <trans-unit id="d3dfebbe72d4e3d6b50b5f6205bf253eb9e510d1" translate="yes">
          <source>Async test with &lt;em&gt;fakeAsync()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;fakeAsync（）&lt;/em&gt;を&lt;em&gt;使用した&lt;/em&gt;非同期テスト</target>
        </trans-unit>
        <trans-unit id="a3a2a031d9a78f06359a7d5ceed4a4220e47722c" translate="yes">
          <source>Async validator function composed of all the async validators registered with this directive.</source>
          <target state="translated">このディレクティブで登録されたすべての非同期バリデーターで構成される非同期バリデーター関数。</target>
        </trans-unit>
        <trans-unit id="08889716a00afbaa4f75748cfc88dc19b867511d" translate="yes">
          <source>AsyncPipe</source>
          <target state="translated">AsyncPipe</target>
        </trans-unit>
        <trans-unit id="d3db89bff8169aadf0002b749871c33ae8202bab" translate="yes">
          <source>AsyncValidator</source>
          <target state="translated">AsyncValidator</target>
        </trans-unit>
        <trans-unit id="ffde100172e9b0262a458c11ee4575fc6b847d60" translate="yes">
          <source>AsyncValidatorFn</source>
          <target state="translated">AsyncValidatorFn</target>
        </trans-unit>
        <trans-unit id="3d7fac7964f752248f02c5aa61c85fd417dcfbcf" translate="yes">
          <source>Asynchronous</source>
          <target state="translated">Asynchronous</target>
        </trans-unit>
        <trans-unit id="b3eeded95df5b44a415fcb5e4ef49bdffbb7e6a1" translate="yes">
          <source>At a high level, NgModules are a way to organize Angular apps and they accomplish this through the metadata in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. The metadata falls into three categories:</source>
          <target state="translated">高レベルでは、NgModuleはAngularアプリを整理する方法であり、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターのメタデータを通じてこれを実現します。 メタデータは3つのカテゴリに分類されます。</target>
        </trans-unit>
        <trans-unit id="242134a4310d9dba08222aef54e2257cacc08268" translate="yes">
          <source>At its simplest, a service worker is a script that runs in the web browser and manages caching for an application.</source>
          <target state="translated">最も単純な場合、Service WorkerはWebブラウザーで実行され、アプリケーションのキャッシュを管理するスクリプトです。</target>
        </trans-unit>
        <trans-unit id="8e510f3f50eecae75e2f194727aa6e0658b6fbe6" translate="yes">
          <source>At its simplest, a service worker is a script that runs in the web browser and manages caching for an application. Service workers function as a network proxy. They intercept all outgoing HTTP requests made by the application and can choose how to respond to them.</source>
          <target state="translated">最も単純な場合、Service WorkerはWebブラウザーで実行され、アプリケーションのキャッシュを管理するスクリプトです。 Service Workerはネットワークプロキシとして機能します。 アプリケーションによって行われたすべての発信HTTP要求をインターセプトし、それらへの応答方法を選択できます。</target>
        </trans-unit>
        <trans-unit id="0a86dc5ece1ac9e833952415de9250d745d527c3" translate="yes">
          <source>At the bottom of the template, add an empty HTML form to capture user information.</source>
          <target state="translated">テンプレートの下部に、空のHTMLフォームを追加してユーザー情報をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="0a72f978f7bf5ae9b84f741e034c4300f3de1323" translate="yes">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start&quot;&gt;Your First App&lt;/a&gt;, the online store application has a basic product catalog. The app doesn't have any variable states or navigation. There is one URL, and that URL always displays the &quot;My Store&quot; page with a list of products and their descriptions.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start&quot;&gt;First Appの&lt;/a&gt;最後に、オンラインストアアプリケーションに基本的な製品カタログがあります。 アプリには変数の状態やナビゲーションはありません。 1つのURLがあり、そのURLには常に製品とその説明のリストを含む[マイストア]ページが表示されます。</target>
        </trans-unit>
        <trans-unit id="f3a019d3473bd7c74189945ba7fdf2d2de78293b" translate="yes">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;Managing Data&lt;/a&gt;, the online store application has a product catalog and a shopping cart.</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;データ&lt;/a&gt;の管理の最後に、オンラインストアアプリケーションには製品カタログとショッピングカートがあります。</target>
        </trans-unit>
        <trans-unit id="d55658fc25831b063983ee22a2f5946a2c03370f" translate="yes">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;Routing&lt;/a&gt;, the online store application has a product catalog with two views: a product list and product details. Users can click on a product name from the list to see details in a new view, with a distinct URL (route).</source>
          <target state="translated">&lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;ルーティング&lt;/a&gt;の最後に、オンラインストアアプリケーションには、製品リストと製品詳細の2つのビューを持つ製品カタログがあります。 ユーザーはリストから製品名をクリックして、個別のURL（ルート）で新しいビューに詳細を表示できます。</target>
        </trans-unit>
        <trans-unit id="aa2383077a65ab0c0336fa3575224c0a072cec68" translate="yes">
          <source>At the end of the hero detail template, add a save button with a &lt;code&gt;click&lt;/code&gt; event binding that invokes a new component method named &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="translated">ヒーローの詳細テンプレートの最後に、 &lt;code&gt;save()&lt;/code&gt; という名前の新しいコンポーネントメソッドを呼び出す &lt;code&gt;click&lt;/code&gt; イベントバインディングを含む保存ボタンを追加します。</target>
        </trans-unit>
        <trans-unit id="04e2e3448d97cf88b4c8cf92be8647a5d5df0f65" translate="yes">
          <source>At the end, tests may verify that the app has made no unexpected requests.</source>
          <target state="translated">最後に、アプリが予期しないリクエストを行っていないことをテストで検証できます。</target>
        </trans-unit>
        <trans-unit id="0cb6df513db3bf3228849da6550d8a1fbd416ea9" translate="yes">
          <source>At the moment you're interested in seeing how guards work so the first version does nothing useful. It simply logs to console and &lt;code&gt;returns&lt;/code&gt; true immediately, allowing navigation to proceed:</source>
          <target state="translated">現時点では、ガードがどのように機能するかを見てみたいので、最初のバージョンでは何の役にも立ちません。 コンソールにログを記録し、すぐにtrueを &lt;code&gt;returns&lt;/code&gt; ため、ナビゲーションを続行できます。</target>
        </trans-unit>
        <trans-unit id="9ab7474646e972990366803a61deec9eef2838ea" translate="yes">
          <source>At the moment, &lt;em&gt;any&lt;/em&gt; user can navigate &lt;em&gt;anywhere&lt;/em&gt; in the application &lt;em&gt;anytime&lt;/em&gt;. That's not always the right thing to do.</source>
          <target state="translated">現時点では、 &lt;em&gt;どの&lt;/em&gt;ユーザーでも&lt;em&gt;いつでも&lt;/em&gt;アプリケーション内の&lt;em&gt;任意の場所&lt;/em&gt;に移動できます。 それは常に正しいことではありません。</target>
        </trans-unit>
        <trans-unit id="6a90472fb52fd14133af6b5ed45a846d07c7f8d7" translate="yes">
          <source>At the moment, the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; retrieves the selected crisis. If the crisis is not found, it navigates back to the crisis list view.</source>
          <target state="translated">現時点では、 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; は選択された危機を取得します。 危機が見つからない場合は、危機リストビューに戻ります。</target>
        </trans-unit>
        <trans-unit id="060de0fabf75a3678ad4f86fea6ae7d325cd7a4c" translate="yes">
          <source>At the moment, the &lt;code&gt;HeroesComponent&lt;/code&gt; displays both the list of heroes and the selected hero's details.</source>
          <target state="translated">現在、 &lt;code&gt;HeroesComponent&lt;/code&gt; はヒーローのリストと選択したヒーローの詳細の両方を表示します。</target>
        </trans-unit>
        <trans-unit id="82fe33a58877ad32663a5e6978a18d91edefa44b" translate="yes">
          <source>At the moment, the binding is to an array of strings. In real applications, most bindings are to more specialized objects.</source>
          <target state="translated">現時点では、バインディングは文字列の配列になります。 実際のアプリケーションでは、ほとんどのバインディングはより特化されたオブジェクトへのものです。</target>
        </trans-unit>
        <trans-unit id="bbc8860a6469db18738b3c14f8fcb5e7a919ea3c" translate="yes">
          <source>At the moment, the default color&amp;mdash;the color that prevails until the user picks a highlight color&amp;mdash;is hard-coded as &quot;red&quot;. Let the template developer set the default color.</source>
          <target state="translated">現時点では、デフォルトの色（ユーザーがハイライト色を選択するまでの色）は「赤」としてハードコードされています。 テンプレート開発者にデフォルトの色を設定させてください。</target>
        </trans-unit>
        <trans-unit id="3b5f7eb081d98212ad7a07dd8a9a528a0bc15a1a" translate="yes">
          <source>At the root level of the &lt;code&gt;schematics/&lt;/code&gt; folder, create a &lt;code&gt;collection.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;schematics/&lt;/code&gt; フォルダーのルートレベルで、 &lt;code&gt;collection.json&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="6dde421309dba3de54f0b4271bbd276260c091cc" translate="yes">
          <source>At the top are the import statements. The next section is where you configure the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; by stating what components and directives belong to it (&lt;code&gt;declarations&lt;/code&gt;) as well as which other modules it uses (&lt;code&gt;imports&lt;/code&gt;). For more information on the structure of an &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, be sure to read &lt;a href=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/a&gt;.</source>
          <target state="translated">一番上にimportステートメントがあります。 次のセクションでは、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; を構成する場所で、それに属するコンポーネントとディレクティブ（ &lt;code&gt;declarations&lt;/code&gt; ）、および使用する他のモジュール（ &lt;code&gt;imports&lt;/code&gt; ）を指定します。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; の構造の詳細については、必ず&lt;a href=&quot;bootstrapping&quot;&gt;ブートストラップ&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="883786d3cc76dbd1ed79ce5408eeff3078f7cc41" translate="yes">
          <source>At the top level of &lt;code&gt;angular.json&lt;/code&gt;, a few properties configure the workspace, and a &lt;code&gt;projects&lt;/code&gt; section contains the remaining per-project configuration options. CLI defaults set at the workspace level can be overridden by defaults set at the project level, and defaults set at the project level can be overridden on the command line.</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; の最上位では、いくつかのプロパティがワークスペースを構成し、 &lt;code&gt;projects&lt;/code&gt; セクションには残りのプロジェクトごとの構成オプションが含まれています。 ワークスペースレベルで設定されたCLIのデフォルトは、プロジェクトレベルで設定されたデフォルトでオーバーライドできます。また、プロジェクトレベルで設定されたデフォルトは、コマンドラインでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="0434ec7f407a6a347e8b9b391b94f54a3a508b6b" translate="yes">
          <source>At the top level, paths that begin with &lt;code&gt;/&lt;/code&gt; refer to the root of the application. But child routes &lt;em&gt;extend&lt;/em&gt; the path of the parent route. With each step down the route tree, you add a slash followed by the route path, unless the path is &lt;em&gt;empty&lt;/em&gt;.</source>
          <target state="translated">トップレベルでは、 &lt;code&gt;/&lt;/code&gt; で始まるパスはアプリケーションのルートを参照します。 ただし、子ルートは親ルートのパスを&lt;em&gt;延長&lt;/em&gt;します。 ルートツリーの各ステップで、パスが&lt;em&gt;空&lt;/em&gt;でない限り、ルートパスに続くスラッシュを追加し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3945a27c64e5bd8255624f2566551f7cf697583" translate="yes">
          <source>At this point, Visual Studio is ready. It&amp;rsquo;s a good idea to close Visual Studio and restart it to make sure everything is clean.</source>
          <target state="translated">この時点で、Visual Studioの準備は完了です。 Visual Studioを閉じて再起動し、すべてが正常であることを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="57bf3ff8bf6006519207c4fc0ce314056ecd80b1" translate="yes">
          <source>At this point, all application routes are in place.</source>
          <target state="translated">この時点で、すべてのアプリケーションルートが配置されています。</target>
        </trans-unit>
        <trans-unit id="d94328cb8894f9ca14552461df3b4d75737edab8" translate="yes">
          <source>At this point, users can put items in the cart by clicking &quot;Buy&quot;, but they can't yet see their cart.</source>
          <target state="translated">この時点で、ユーザーは[購入]をクリックしてアイテムをカートに入れることができますが、まだカートを見ることができません。</target>
        </trans-unit>
        <trans-unit id="8bd123a0eac56e2896e3fe55bff44567829141a2" translate="yes">
          <source>At this point, you can switch the two components to use the new service instead of the old one. While you &lt;code&gt;$inject&lt;/code&gt; it as the downgraded &lt;code&gt;phone&lt;/code&gt; factory, it's really an instance of the &lt;code&gt;Phone&lt;/code&gt; class and you annotate its type accordingly:</source>
          <target state="translated">この時点で、2つのコンポーネントを切り替えて、古いサービスではなく新しいサービスを使用できます。 ダウングレードされた &lt;code&gt;phone&lt;/code&gt; 工場として &lt;code&gt;$inject&lt;/code&gt; ている間、それは実際には &lt;code&gt;Phone&lt;/code&gt; クラスのインスタンスであり、それに応じてその型に注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="86a28f831b9d378b2f9f53fe3f306868566a3b98" translate="yes">
          <source>At this point, you've replaced all AngularJS application components with their Angular counterparts, even though you're still serving them from the AngularJS router.</source>
          <target state="translated">この時点で、AngularJSルーターからサービスを提供しているにもかかわらず、すべてのAngularJSアプリケーションコンポーネントを対応するAngularコンポーネントに置き換えました。</target>
        </trans-unit>
        <trans-unit id="881d0e72fd3eb18bc7f9bce749c2a557083835f3" translate="yes">
          <source>Attaches a view so that it will be dirty checked. The view will be automatically detached when it is destroyed. This will throw if the view is already attached to a ViewContainer.</source>
          <target state="translated">ビューがダーティチェックされるようにアタッチします。 ビューは、破棄されると自動的に切り離されます。 これは、ビューがすでにViewContainerにアタッチされている場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="b2a054d9997fa913c6ff1d1261a85f354b37c1d2" translate="yes">
          <source>Attribute (the exception)</source>
          <target state="translated">属性（例外）</target>
        </trans-unit>
        <trans-unit id="7706e49eec94755bbb4164b09d500329ccb21352" translate="yes">
          <source>Attribute Directive Testing</source>
          <target state="translated">属性ディレクティブのテスト</target>
        </trans-unit>
        <trans-unit id="55c1659b17ee19bef5fd528a73b2941e917a57a8" translate="yes">
          <source>Attribute Directives</source>
          <target state="translated">属性ディレクティブ</target>
        </trans-unit>
        <trans-unit id="c334bb508016d6901c14a951eec64345dab38157" translate="yes">
          <source>Attribute binding</source>
          <target state="translated">属性バインディング</target>
        </trans-unit>
        <trans-unit id="d9b950dd914b91e0fb66d15ece878e4a67694934" translate="yes">
          <source>Attribute binding syntax resembles property binding, but instead of an element property between brackets, start with the prefix &lt;code&gt;attr&lt;/code&gt;, followed by a dot (&lt;code&gt;.&lt;/code&gt;), and the name of the attribute. You then set the attribute value, using an expression that resolves to a string, or remove the attribute when the expression resolves to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">属性バインディング構文はプロパティバインディングに似ていますが、角括弧で囲まれた要素プロパティの代わりに、プレフィックス &lt;code&gt;attr&lt;/code&gt; で始まり、その後にドット（ &lt;code&gt;.&lt;/code&gt; ）、属性の名前が続きます。 次に、文字列に解決される式を使用して属性値を設定するか、式が &lt;code&gt;null&lt;/code&gt; に解決されるときに属性を削除します 。</target>
        </trans-unit>
        <trans-unit id="279ab89039ba64c6b0da183f3b7147bf2cea8ccf" translate="yes">
          <source>Attribute directives</source>
          <target state="translated">属性ディレクティブ</target>
        </trans-unit>
        <trans-unit id="5d12ef2a9da048d322efb7149e52d65f30b28dfa" translate="yes">
          <source>Attribute directives listen to and modify the behavior of other HTML elements, attributes, properties, and components. You usually apply them to elements as if they were HTML attributes, hence the name.</source>
          <target state="translated">属性ディレクティブは、他のHTML要素、属性、プロパティ、およびコンポーネントの動作をリッスンして変更します。 通常は、それらをHTML属性であるかのように要素に適用するため、名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="20513020a514d725b1470eb9d9c5e82080471bcc" translate="yes">
          <source>Attribute directives&amp;mdash;change the appearance or behavior of an element, component, or another directive.</source>
          <target state="translated">属性ディレクティブ-要素、コンポーネント、または別のディレクティブの外観または動作を変更します。</target>
        </trans-unit>
        <trans-unit id="8ea298a1d48c262be17e654c22323e471414de8a" translate="yes">
          <source>Attribute, class, and style bindings</source>
          <target state="translated">属性、クラス、およびスタイルのバインディング</target>
        </trans-unit>
        <trans-unit id="1b88cfba520774bf5bca05743d6b49bf17294180" translate="yes">
          <source>Attribute: &lt;code&gt;&amp;lt;comp name=&quot;World&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">属性： &lt;code&gt;&amp;lt;comp name=&quot;World&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba9f41e65786ab28a5cc7739fa9524275b749e4a" translate="yes">
          <source>Auditing Angular applications</source>
          <target state="translated">Angularアプリケーションの監査</target>
        </trans-unit>
        <trans-unit id="ddf0bb467a9afb82ce8505717567f73467a792d6" translate="yes">
          <source>Augmenting native elements</source>
          <target state="translated">ネイティブ要素の増強</target>
        </trans-unit>
        <trans-unit id="66e15602646e8c5a159e78f8d9953cf08b4cdadb" translate="yes">
          <source>Authentication/authorization</source>
          <target state="translated">Authentication/authorization</target>
        </trans-unit>
        <trans-unit id="0efd1e55177485c760611f1570d33e1b5e47d03a" translate="yes">
          <source>Authoring Schematics</source>
          <target state="translated">オーサリング回路図</target>
        </trans-unit>
        <trans-unit id="92b94f5df6479e29b25d986076b0ee811c9a3f18" translate="yes">
          <source>Auto-styling can be used to define a state that depends on layout or other environmental factors.</source>
          <target state="translated">自動スタイル設定を使用して、レイアウトまたはその他の環境要因に依存する状態を定義できます。</target>
        </trans-unit>
        <trans-unit id="a4696360f61ce7b39a54fa976acbcf3c37e4dd61" translate="yes">
          <source>Autocompletion</source>
          <target state="translated">Autocompletion</target>
        </trans-unit>
        <trans-unit id="a8576cba49fa626f39a56bc18330709f71819814" translate="yes">
          <source>Autocompletion can speed up your development time by providing you with contextual possibilities and hints as you type. This example shows autocomplete in an interpolation. As you type it out, you can hit tab to complete.</source>
          <target state="translated">オートコンプリートを使用すると、入力時にコンテキストの可能性とヒントが提供されるため、開発時間が短縮されます。 この例は、補間のオートコンプリートを示しています。 入力するときに、Tabキーを押して完了できます。</target>
        </trans-unit>
        <trans-unit id="2cc042e9fe579c82af6f851ae39215cc25b9ea23" translate="yes">
          <source>Automatic change detection</source>
          <target state="translated">自動変更検出</target>
        </trans-unit>
        <trans-unit id="6eba8d49fe5d13d1fca5b019f42b110fe985ad30" translate="yes">
          <source>Automatic deployment with the CLI</source>
          <target state="translated">CLIを使用した自動展開</target>
        </trans-unit>
        <trans-unit id="8645d08355f818059391b51cb42d575086fb447b" translate="yes">
          <source>Automatic property calculation with wildcards</source>
          <target state="translated">ワイルドカードを使用した自動プロパティ計算</target>
        </trans-unit>
        <trans-unit id="ba24e92f551ffc6d70286e830ff60471df994992" translate="yes">
          <source>Available and activated updates</source>
          <target state="translated">利用可能な有効なアップデート</target>
        </trans-unit>
        <trans-unit id="6b9113ae3a57f7a0dceaa44494d0a520cabe3576" translate="yes">
          <source>Avoid aliasing &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inputs&lt;/code&gt; と &lt;code&gt;outputs&lt;/code&gt; エイリアスを避ける</target>
        </trans-unit>
        <trans-unit id="35d10846ee5de515ce9531aa71d75239dda439f0" translate="yes">
          <source>Avoid referring to enums with complicated initializers or computed properties.</source>
          <target state="translated">複雑な初期化子または計算されたプロパティを持つ列挙型を参照することは避けてください。</target>
        </trans-unit>
        <trans-unit id="a4763469397ba3b0cc9e116ced71e140704d303a" translate="yes">
          <source>Avoid side effects</source>
          <target state="translated">副作用を避ける</target>
        </trans-unit>
        <trans-unit id="8d9ef20f693ba88acc4b2ad8c040f990e01cea96" translate="yes">
          <source>Avoid this error by sticking to the compiler's &lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;restricted expression syntax&lt;/a&gt; when writing Angular metadata and be wary of new or unusual TypeScript features.</source>
          <target state="translated">Angularメタデータを記述するときにコンパイラの&lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;制限された式の構文&lt;/a&gt;に従うことでこのエラーを回避し、新しいまたは異常なTypeScript機能に注意してください。</target>
        </trans-unit>
        <trans-unit id="6f85b2bfcbb0fa2f75065b9806f3edc8026fee56" translate="yes">
          <source>Azure</source>
          <target state="translated">Azure</target>
        </trans-unit>
        <trans-unit id="5f5f6d9b2535d125e7ae46352acf0bb3d116f1ee" translate="yes">
          <source>B, BB &amp;amp; BBB</source>
          <target state="translated">B、BB、BBB</target>
        </trans-unit>
        <trans-unit id="4c55e5e5fc2235cc8c201e69a345f7fab3fb46fa" translate="yes">
          <source>BBBB</source>
          <target state="translated">BBBB</target>
        </trans-unit>
        <trans-unit id="4601044687c40f1a23385d338d02f9fc7f5d512d" translate="yes">
          <source>BBBBB</source>
          <target state="translated">BBBBB</target>
        </trans-unit>
        <trans-unit id="ebdcf0a202669a291a7d498007aa30cf730e825d" translate="yes">
          <source>BEFORE_APP_SERIALIZED</source>
          <target state="translated">BEFORE_APP_SERIALIZED</target>
        </trans-unit>
        <trans-unit id="2cb09bf3a8782ed3fdbd196ecf0ac3ab8e92b47b" translate="yes">
          <source>Back in the &quot;Heroes&quot; workflow, the app accepts every change to a hero immediately without hesitation or validation.</source>
          <target state="translated">「ヒーロー」ワークフローに戻ると、アプリはためらいも検証もなしに、ヒーローへのすべての変更をすぐに受け入れます。</target>
        </trans-unit>
        <trans-unit id="5e754f85ea186e7a88cea5b09eb25dfdcf33a1ed" translate="yes">
          <source>Back in the &lt;code&gt;AppComponent&lt;/code&gt;, import the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; token from the &lt;code&gt;@angular/router&lt;/code&gt; package and the &lt;code&gt;slideInAnimation&lt;/code&gt; from &lt;code&gt;'./animations.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; に戻り 、 &lt;code&gt;@angular/router&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; トークンをインポートし、 &lt;code&gt;'./animations.ts&lt;/code&gt; &lt;code&gt;slideInAnimation&lt;/code&gt; からslideInAnimationをインポートします。</target>
        </trans-unit>
        <trans-unit id="d9c883a905731bc3ab1e5b1797dcc17a576c4565" translate="yes">
          <source>Back to top</source>
          <target state="translated">トップに戻る</target>
        </trans-unit>
        <trans-unit id="f4290a336cc02b12946c3c89719cd2e7d3a69574" translate="yes">
          <source>Backward compatibility with CSS grid</source>
          <target state="translated">CSSグリッドとの下位互換性</target>
        </trans-unit>
        <trans-unit id="f080bd1737639dbd750a023ba99fa346cf943a9f" translate="yes">
          <source>Backward compatibility with Lighthouse</source>
          <target state="translated">Lighthouseとの下位互換性</target>
        </trans-unit>
        <trans-unit id="3578397cf875eb735f9e4ec895bfefcd6ea0e18c" translate="yes">
          <source>Base URL for protractor to connect to.</source>
          <target state="translated">分度器が接続するベースURL。</target>
        </trans-unit>
        <trans-unit id="69488c399a2c06d8cc98c0a654ba1be00ce481f8" translate="yes">
          <source>Base class for Angular Views, provides change detection functionality. A change-detection tree collects all views that are to be checked for changes. Use the methods to add and remove views from the tree, initiate change-detection, and explicitly mark views as &lt;em&gt;dirty&lt;/em&gt;, meaning that they have changed and need to be rerendered.</source>
          <target state="translated">Angularビューの基本クラスは、変更検出機能を提供します。 変更検出ツリーは、変更をチェックするすべてのビューを収集します。 メソッドを使用して、ビューをツリーに追加および削除し、変更検出を開始し、ビューを変更済みとして再描画する必要があることを明示的にマークします。</target>
        </trans-unit>
        <trans-unit id="dc5f559c4c1d7d90f2ea8b32a7e1b1c62788bfb3" translate="yes">
          <source>Base class for a factory that can create a component dynamically. Instantiate a factory for a given type of component with &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt;. Use the resulting &lt;code&gt;ComponentFactory.create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">コンポーネントを動的に作成できるファクトリの基本クラス。 &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt; を使用して、指定されたタイプのコンポーネントのファクトリをインスタンス化します。 結果の &lt;code&gt;ComponentFactory.create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="873cd738027a52aee557333ae0d35f162d826794" translate="yes">
          <source>Base class for a factory that can create a component dynamically. Instantiate a factory for a given type of component with &lt;code&gt;&lt;a href=&quot;core&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt;. Use the resulting &lt;code&gt;ComponentFactory.create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">コンポーネントを動的に作成できるファクトリの基本クラス。 &lt;code&gt;&lt;a href=&quot;core&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt; を使用して、指定されたタイプのコンポーネントのファクトリをインスタンス化します。 結果の &lt;code&gt;ComponentFactory.create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="06b6cf30fccd592a4f7ad01aa440cf8322efc7d5" translate="yes">
          <source>Base class for both &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http/httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;http/httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; の両方の基本クラス。</target>
        </trans-unit>
        <trans-unit id="b72bab4ba60f36cf05e4cf503864db197ec58d1a" translate="yes">
          <source>Base class for both &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; の両方の基本クラス。</target>
        </trans-unit>
        <trans-unit id="d87cd5ed68b6935afddd679162562d7c105b48bf" translate="yes">
          <source>Base class for control directives.</source>
          <target state="translated">制御ディレクティブの基本クラス。</target>
        </trans-unit>
        <trans-unit id="7c8bf5beced837666a3fcfff47faf58811883c9f" translate="yes">
          <source>Base class for query metadata.</source>
          <target state="translated">クエリメタデータの基本クラス。</target>
        </trans-unit>
        <trans-unit id="ae3542392d51807f46bde8565dbb42d8fcc3c899" translate="yes">
          <source>Base for animation data structures.</source>
          <target state="translated">アニメーションデータ構造のベース。</target>
        </trans-unit>
        <trans-unit id="332796bde2e92bb79ea8d8b003db847231db277a" translate="yes">
          <source>Base for events the router goes through, as opposed to events tied to a specific route. Fired one time for any given navigation.</source>
          <target state="translated">特定のルートに関連付けられたイベントとは対照的に、ルーターが通過するイベントのベース。 特定のナビゲーションで1回発生します。</target>
        </trans-unit>
        <trans-unit id="dc0e3cb0c30a7fd999cfb13abd9ca5e0359899bd" translate="yes">
          <source>Base interface for progress events.</source>
          <target state="translated">進捗イベントの基本インターフェイス。</target>
        </trans-unit>
        <trans-unit id="19c642b2c76cffbbba7c48b8234e3965239d1723" translate="yes">
          <source>Base url for the application being built.</source>
          <target state="translated">ビルドされるアプリケーションのベースURL。</target>
        </trans-unit>
        <trans-unit id="c15b8155598bbd0eb4ddda108efeed6d3faaa586" translate="yes">
          <source>Base your decision on your comfort level. Use a flatter structure until there is an obvious value to creating a new folder.</source>
          <target state="translated">快適さのレベルに基づいて決定を下してください。 新しいフォルダーを作成する価値が明らかになるまで、よりフラットな構造を使用します。</target>
        </trans-unit>
        <trans-unit id="457c8d9bebfca77b21842bdcc7ca17bb844fb9ac" translate="yes">
          <source>Based on the &lt;code&gt;--target&lt;/code&gt;, TypeScript adds &lt;em&gt;additional&lt;/em&gt; ambient declarations like &lt;code&gt;Promise&lt;/code&gt; if the target is &lt;code&gt;es6&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--target&lt;/code&gt; に基づいて、ターゲットが &lt;code&gt;es6&lt;/code&gt; の場合、TypeScriptは &lt;code&gt;Promise&lt;/code&gt; のような&lt;em&gt;追加の&lt;/em&gt;アンビエント宣言を追加します。</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes">
          <source>Basic Example</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="04e8ea10d9114654af829cd500f25ab6581dd803" translate="yes">
          <source>Basic deployment to a remote server</source>
          <target state="translated">リモートサーバーへの基本的な展開</target>
        </trans-unit>
        <trans-unit id="653ae9d4bc08db3838f9c6c61951682ba7657958" translate="yes">
          <source>Basic usage and terms</source>
          <target state="translated">基本的な使用法と用語</target>
        </trans-unit>
        <trans-unit id="189ceeabec801d69e58e27b3296832fd339cfd5c" translate="yes">
          <source>Basic workflow</source>
          <target state="translated">基本的なワークフロー</target>
        </trans-unit>
        <trans-unit id="21db9140fd5c55af9b7daf2fcc86cdbecd519ae0" translate="yes">
          <source>Basics of two-way binding</source>
          <target state="translated">双方向バインディングの基本</target>
        </trans-unit>
        <trans-unit id="1276e18d03ecc54657c7ab3b6a5e107e8237506b" translate="yes">
          <source>Basics wrap up</source>
          <target state="translated">基本的なまとめ</target>
        </trans-unit>
        <trans-unit id="381c08b859c05a623a77795b6faef27c11b8be2b" translate="yes">
          <source>Be explicit. Implement the &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface with a type of &lt;code&gt;Crisis&lt;/code&gt;.</source>
          <target state="translated">明示的に。 タイプ &lt;code&gt;Crisis&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; インターフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="1bf79b7186da202dc35b6c9fdce5e4c57c7d1a68" translate="yes">
          <source>Be sure to check that the context exists and throw the appropriate error.</source>
          <target state="translated">コンテキストが存在することを確認し、適切なエラーをスローしてください。</target>
        </trans-unit>
        <trans-unit id="795a90d1a8ee5cbdff797b42bb7461a0906585d9" translate="yes">
          <source>Be sure to create module components as children of this module's top component.</source>
          <target state="translated">モジュールコンポーネントは、このモジュールの最上位コンポーネントの子として作成してください。</target>
        </trans-unit>
        <trans-unit id="7d5bf806d7d027af1dddb36dc70adddb33b479b7" translate="yes">
          <source>Be sure to define custom ids that are unique. If you use the same id for two different text messages, only the first one is extracted, and its translation is used in place of both original text messages.</source>
          <target state="translated">必ず一意のカスタムIDを定義してください。 2つの異なるテキストメッセージに同じIDを使用すると、最初のテキストメッセージのみが抽出され、元の両方のテキストメッセージの代わりにその翻訳が使用されます。</target>
        </trans-unit>
        <trans-unit id="3cb44eeb12ea39170bc603c6fb44cf6110a2d9a2" translate="yes">
          <source>Because &lt;code&gt;HeroDetailComponent&lt;/code&gt; is an Angular component, you must also add it to the &lt;code&gt;declarations&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; はAngularコンポーネントであるため、 AppModuleの &lt;code&gt;declarations&lt;/code&gt; にも追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="71459b0877ea037c4247f79f200b0627331cfde5" translate="yes">
          <source>Because &lt;code&gt;ng serve&lt;/code&gt; does not work with service workers, you must use a separate HTTP server to test your project locally. You can use any HTTP server. The example below uses the &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt; package from npm. To reduce the possibility of conflicts and avoid serving stale content, test on a dedicated port and disable caching.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; はService Workerで動作しないため、プロジェクトをローカルでテストするには別のHTTPサーバーを使用する必要があります。 任意のHTTPサーバーを使用できます。 以下の例では、npmの&lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt;パッケージを使用しています 。 競合の可能性を減らし、古いコンテンツを提供しないようにするには、専用ポートでテストし、キャッシュを無効にします。</target>
        </trans-unit>
        <trans-unit id="342f36e72319b97e67057da06eb0202d32290ccf" translate="yes">
          <source>Because Angular applications are mostly written in TypeScript, you will typically know when a variable is an observable. Although the Angular framework does not enforce a naming convention for observables, you will often see observables named with a trailing &amp;ldquo;$&amp;rdquo; sign.</source>
          <target state="translated">AngularアプリケーションのほとんどはTypeScriptで記述されているため、通常、変数がいつ観測可能になるかがわかります。 Angularフレームワークはオブザーバブルの命名規則を強制しませんが、多くの場合、末尾に「$」記号が付いたオブザーバブルが表示されます。</target>
        </trans-unit>
        <trans-unit id="80706cd8d34e9df3aebbbfc71eb5c40862507ed2" translate="yes">
          <source>Because Bazel constructs a graph out of your targets, you can find lots of useful information.</source>
          <target state="translated">Bazelはターゲットからグラフを作成するため、多くの有用な情報を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="3244368a86d6561aba583792cc03eff7eff140ec" translate="yes">
          <source>Because a Universal app doesn't execute in the browser, some of the browser APIs and capabilities may be missing on the server.</source>
          <target state="translated">ユニバーサルアプリはブラウザで実行されないため、ブラウザAPIと機能の一部がサーバー上にない場合があります。</target>
        </trans-unit>
        <trans-unit id="1f4be1daa693b107a5635c119a5bcab95b440545" translate="yes">
          <source>Because directives and pipes appear in component templates, the Angular compiler incorporates them into compiled component code too.</source>
          <target state="translated">ディレクティブとパイプはコンポーネントテンプレートに表示されるため、Angularコンパイラーはそれらをコンパイル済みコンポーネントコードにも組み込みます。</target>
        </trans-unit>
        <trans-unit id="f73de75658f57ce63ea356bf33e3b7801f62fafb" translate="yes">
          <source>Because each service method returns a different kind of &lt;code&gt;Observable&lt;/code&gt; result, &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; takes a type parameter so it can return the safe value as the type that the app expects.</source>
          <target state="translated">各サービスメソッドは異なる種類の &lt;code&gt;Observable&lt;/code&gt; の結果を返すため、 &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; は型パラメーターを受け取り、アプリが期待する型として安全な値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="46939d4d0ba537e542bde8f87ab09af4cea60a09" translate="yes">
          <source>Because interceptors are (optional) dependencies of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service, you must provide them in the same injector (or a parent of the injector) that provides &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;. Interceptors provided &lt;em&gt;after&lt;/em&gt; DI creates the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; are ignored.</source>
          <target state="translated">インターセプターは（オプションの） &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; サービスの依存関係であるため、 HttpClientを提供する同じインジェクター（またはインジェクターの親）でインターセプターを提供する必要があり &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 。 DIが &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を作成した&lt;em&gt;後に&lt;/em&gt;提供されるインターセプターは無視されます。</target>
        </trans-unit>
        <trans-unit id="ebedc3d0a5c7a3fec99ebbc8e460b97a0d2a4cf2" translate="yes">
          <source>Because interceptors can process the request and response &lt;em&gt;together&lt;/em&gt;, they can do things like time and log an entire HTTP operation.</source>
          <target state="translated">インターセプターは要求と応答を&lt;em&gt;一緒に&lt;/em&gt;処理できるため、時間などの処理を実行し、HTTP操作全体を記録できます。</target>
        </trans-unit>
        <trans-unit id="5d9990b0c02c63922de8ac7eb597a4dbd80a3bf1" translate="yes">
          <source>Because many app components need the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt;, the developer created a &lt;code&gt;SharedModule&lt;/code&gt; to combine these and other frequently requested parts.</source>
          <target state="translated">多くのアプリコンポーネントには &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; とTitleCasePipeが必要なので、開発者は &lt;code&gt;SharedModule&lt;/code&gt; を作成して、これらと他の頻繁にリクエストされる部分を結合します。</target>
        </trans-unit>
        <trans-unit id="7309f02327abcb02906eb27e1961d1e11ff57034" translate="yes">
          <source>Because much AngularJS code is in JavaScript, JavaScript code is shown in the AngularJS column. The Angular code is shown using TypeScript.</source>
          <target state="translated">JavaScriptには多くのAngularJSコードが含まれているため、AngularJS列にJavaScriptコードが表示されます。 Angularコードは、TypeScriptを使用して表示されます。</target>
        </trans-unit>
        <trans-unit id="f63ecad480eaacde83f906bac0c6143c6ea2184e" translate="yes">
          <source>Because observables produce values asynchronously, try/catch will not effectively catch errors. Instead, you handle errors by specifying an &lt;code&gt;error&lt;/code&gt; callback on the observer. Producing an error also causes the observable to clean up subscriptions and stop producing values. An observable can either produce values (calling the &lt;code&gt;next&lt;/code&gt; callback), or it can complete, calling either the &lt;code&gt;complete&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; callback.</source>
          <target state="translated">オブザーバブルは非同期に値を生成するため、try / catchは効果的にエラーをキャッチしません。 代わりに、オブザーバーで &lt;code&gt;error&lt;/code&gt; コールバックを指定してエラーを処理します。 エラーを生成すると、observableはサブスクリプションをクリーンアップし、値の生成を停止します。 オブザーバブルは、値を生成する（ &lt;code&gt;next&lt;/code&gt; コールバックを呼び出す）か、 &lt;code&gt;complete&lt;/code&gt; か、 完了または &lt;code&gt;error&lt;/code&gt; コールバックのいずれかを呼び出して完了することができます。</target>
        </trans-unit>
        <trans-unit id="7b1058fd96afe9d690d0969b15ba453bf7c67528" translate="yes">
          <source>Because of these advantages, observables are used extensively within Angular, and are recommended for app development as well.</source>
          <target state="translated">これらの利点のため、オブザーバブルはAngular内で広く使用されており、アプリ開発にも推奨されています。</target>
        </trans-unit>
        <trans-unit id="a3b6660bf41bb567678e15b0038461e5765da5cb" translate="yes">
          <source>Because of these many obstacles, you should test DOM interaction with unit testing techniques as much as possible.</source>
          <target state="translated">これらの多くの障害のため、可能な限り単体テスト手法でDOM相互作用をテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="772276ca842c13128ca4d0e6c6d501e1f891a5e6" translate="yes">
          <source>Because template-driven forms are in their own module, you need to add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the array of &lt;code&gt;imports&lt;/code&gt; for the application module before you can use forms.</source>
          <target state="translated">テンプレート駆動型フォームは独自のモジュール内にあるため、フォームを使用する前に、アプリケーションモジュールの &lt;code&gt;imports&lt;/code&gt; の配列に &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="f75c667b11d2d8cfaed8c93263c0b980c8478dec" translate="yes">
          <source>Because the &lt;a href=&quot;testing#dashboard-hero-component&quot;&gt;template&lt;/a&gt; passes the hero name through the Angular &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;, the test must match the element value with the upper-cased name.</source>
          <target state="translated">&lt;a href=&quot;testing#dashboard-hero-component&quot;&gt;テンプレート&lt;/a&gt;はAngular &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; を介してヒーロー名を渡すため、テストでは要素値と大文字の名前を一致させる必要があります。</target>
        </trans-unit>
        <trans-unit id="bb19305312e2b1bf07f79171f6856a936e20b002" translate="yes">
          <source>Because the component template uses two-way data binding for the &lt;code&gt;favoriteColor&lt;/code&gt; property, the &lt;code&gt;favoriteColor&lt;/code&gt; property in the component is updated to the value emitted by the &lt;code&gt;ngModelChange&lt;/code&gt; event (&lt;em&gt;Blue&lt;/em&gt;).</source>
          <target state="translated">コンポーネントテンプレートは &lt;code&gt;favoriteColor&lt;/code&gt; プロパティに双方向のデータバインディングを使用するため、コンポーネントの &lt;code&gt;favoriteColor&lt;/code&gt; プロパティは &lt;code&gt;ngModelChange&lt;/code&gt; イベント（ &lt;em&gt;Blue&lt;/em&gt; ）によって発行された値に更新されます。</target>
        </trans-unit>
        <trans-unit id="3559bd87675d83ca7d84212b131b57dd2128c250" translate="yes">
          <source>Because the custom id is the same, both of the elements in the resulting translation contain the same text, &lt;code&gt;Bonjour&lt;/code&gt;:</source>
          <target state="translated">カスタムIDは同じであるため、結果の翻訳の両方の要素に同じテキスト &lt;code&gt;Bonjour&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="ac60673f94b3d3376ab5d403b236e2c865d35a46" translate="yes">
          <source>Because the new module is meant to be lazy-loaded, the command does NOT add a reference for the new feature module to the root application's module file, &lt;code&gt;app.module.ts&lt;/code&gt;. Instead, it adds the declared route, &lt;code&gt;customer-list&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array declared in the module provided as the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">新しいモジュールは遅延ロードされることを意図しているため、このコマンドはルートアプリケーションのモジュールファイル &lt;code&gt;app.module.ts&lt;/code&gt; に新しい機能モジュールの参照を追加しません。 代わりに、宣言されたルート、 &lt;code&gt;customer-list&lt;/code&gt; を &lt;code&gt;--module&lt;/code&gt; オプションとして提供されたモジュールで宣言された &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="8f72bc222c5187cbceca225395ab2edb41eb5670" translate="yes">
          <source>Because the sample tests for this guide are designed to run only in a browser, a &lt;code&gt;nativeElement&lt;/code&gt; in these tests is always an &lt;code&gt;HTMLElement&lt;/code&gt; whose familiar methods and properties you can explore within a test.</source>
          <target state="translated">このガイドのサンプルテストはブラウザでのみ実行されるように設計されている &lt;code&gt;nativeElement&lt;/code&gt; 、これらのテストのnativeElementは常に、テスト内で探索できる使い慣れたメソッドとプロパティを持つ &lt;code&gt;HTMLElement&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5ba2132d051625545e383f4b78d7ded919141bef" translate="yes">
          <source>Because the service method returns an &lt;code&gt;Observable&lt;/code&gt; of configuration data, the component &lt;strong&gt;subscribes&lt;/strong&gt; to the method's return value. The subscription callback copies the data fields into the component's &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; object, which is data-bound in the component template for display.</source>
          <target state="translated">サービスメソッドは設定データの &lt;code&gt;Observable&lt;/code&gt; を返すため、コンポーネントはメソッドの戻り値を&lt;strong&gt;サブスクライブ&lt;/strong&gt;します。 サブスクリプションコールバックは、データフィールドをコンポーネントの構成オブジェクトにコピーします。これは、表示用のコンポーネントテンプレートにデータバインドされます。</target>
        </trans-unit>
        <trans-unit id="8460f3c5a0030447eadc8c95b36ae1865a187e73" translate="yes">
          <source>Because the spy result returns synchronously, the &lt;code&gt;getQuote()&lt;/code&gt; method updates the message on screen immediately &lt;em&gt;after&lt;/em&gt; the first change detection cycle during which Angular calls &lt;code&gt;ngOnInit&lt;/code&gt;.</source>
          <target state="translated">スパイの結果は同期的に返されるため、Angularが &lt;code&gt;ngOnInit&lt;/code&gt; を呼び出す最初の変更検出サイクルの直後&lt;em&gt;に&lt;/em&gt; 、 &lt;code&gt;getQuote()&lt;/code&gt; メソッドが画面上のメッセージを更新します。</target>
        </trans-unit>
        <trans-unit id="ae3ebebb2c33ca11b4aadf44642620433d674fef" translate="yes">
          <source>Because we use routing, we can easily recognize the three types of requests and handle them differently.</source>
          <target state="translated">ルーティングを使用するため、3種類の要求を簡単に認識して、異なる方法で処理できます。</target>
        </trans-unit>
        <trans-unit id="7c1e35fdf2c95e740d747fb6e8d2cb1e5ce349b8" translate="yes">
          <source>Before a view is displayed, Angular evaluates the directives and resolves the binding syntax in the template to modify the HTML elements and the DOM, according to your program data and logic. Angular supports &lt;em&gt;two-way data binding&lt;/em&gt;, meaning that changes in the DOM, such as user choices, are also reflected in your program data.</source>
          <target state="translated">ビューが表示される前に、Angularはディレクティブを評価し、テンプレートのバインディング構文を解決して、プログラムデータとロジックに従ってHTML要素とDOMを変更します。 Angularは&lt;em&gt;双方向のデータバインディングを&lt;/em&gt;サポートしています。つまり、ユーザーの選択など、DOMの変更もプログラムデータに反映されます。</target>
        </trans-unit>
        <trans-unit id="56a2690d6d4ee87e844d5b45b79d0937210c67e9" translate="yes">
          <source>Before discussing how you can use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to create hybrid apps, there are things that you can do to ease the upgrade process even before you begin upgrading. Because the steps are the same regardless of how you upgrade, refer to the &lt;a href=&quot;upgrade#preparation&quot;&gt;Preparation&lt;/a&gt; section of &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; を使用してハイブリッドアプリを作成する方法について説明する前に、アップグレードを開始する前でもアップグレードプロセスを簡単にするためにできることがあります。 手順はアップグレード方法に関係なく同じなので、 &lt;a href=&quot;upgrade&quot;&gt;AngularJSから&lt;/a&gt;のアップグレードの&lt;a href=&quot;upgrade#preparation&quot;&gt;準備&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2bd6921a15a4cc4213b02c123a7b7fdf88397ce4" translate="yes">
          <source>Before doing that, understand the difference between pure and impure, starting with a pure pipe.</source>
          <target state="translated">それを行う前に、純粋なパイプから始めて、純粋と不純の違いを理解してください。</target>
        </trans-unit>
        <trans-unit id="938bfb0cc4fb4eee22c10427c31d0ba174568291" translate="yes">
          <source>Before fully deploying your application, you can test the process, build configuration, and deployed behavior by using one of these interim techniques.</source>
          <target state="translated">アプリケーションを完全にデプロイする前に、これらの暫定的な手法のいずれかを使用して、プロセスをテストし、構成を構築し、動作をデプロイできます。</target>
        </trans-unit>
        <trans-unit id="31ade65586fac3f6c67ae72205b4dfe90fd2d49b" translate="yes">
          <source>Before updating the &lt;code&gt;app-routing.module.ts&lt;/code&gt;, you'll need to consider an important rule. Currently, our empty path route redirects to &lt;code&gt;/heroes&lt;/code&gt;, which redirects to &lt;code&gt;/superheroes&lt;/code&gt;. This &lt;em&gt;won't&lt;/em&gt; work and is by design as the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; handles redirects once at each level of routing configuration. This prevents chaining of redirects, which can lead to endless redirect loops.</source>
          <target state="translated">&lt;code&gt;app-routing.module.ts&lt;/code&gt; を更新する前に、重要なルールを考慮する必要があります。 現在、空のパスルートは &lt;code&gt;/heroes&lt;/code&gt; にリダイレクトされ、これは &lt;code&gt;/superheroes&lt;/code&gt; リダイレクトされます。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; はルーティング構成の各レベルでリダイレクトを1回処理するため、これ&lt;em&gt;は機能せず&lt;/em&gt; 、仕様によるものです。 これにより、リダイレクトの連鎖が防止され、無限のリダイレクトループが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2adebd0eb41e8f1c544074f8aa1193608616af7e" translate="yes">
          <source>Before using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive in a two-way data binding, you must import the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and add it to the NgModule's &lt;code&gt;imports&lt;/code&gt; list. Learn more about the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; in &lt;a href=&quot;forms#ngModel&quot;&gt;Forms&lt;/a&gt;.</source>
          <target state="translated">双方向データバインディングで &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブを使用する前に、 FormsModuleをインポートし、NgModuleの &lt;code&gt;imports&lt;/code&gt; リストに追加する必要があります。 &lt;a href=&quot;forms#ngModel&quot;&gt;Formsの&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; の詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="974b03fe0fa1d7a6ed31bea40eba5437fd1ccda1" translate="yes">
          <source>Before you begin, make sure your development environment includes &lt;code&gt;Node.js&amp;reg;&lt;/code&gt; and an npm package manager.</source>
          <target state="translated">始める前に、開発環境に &lt;code&gt;Node.js&amp;reg;&lt;/code&gt; とnpmパッケージマネージャーが含まれていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="919d29e47188004264e245ab74f85d9fecbc4581" translate="yes">
          <source>Before you can add components you have to define an anchor point to tell Angular where to insert components.</source>
          <target state="translated">コンポーネントを追加する前に、Angularにコンポーネントを挿入する場所を伝えるアンカーポイントを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7480739e4d2bfb1b2c1291af6d204a69a044469" translate="yes">
          <source>Before you can use Angular's HTTP client, you must set up your app to use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">AngularのHTTPクライアントを使用する前に、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を使用するようにアプリを設定する必要があります 。</target>
        </trans-unit>
        <trans-unit id="72fa1b5683e2296972d6d0e97ba335789c635353" translate="yes">
          <source>Before you can use the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, you need to import the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. Most apps do so in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用する前に、Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートする必要があります 。 ほとんどのアプリはルート &lt;code&gt;AppModule&lt;/code&gt; でそうします。</target>
        </trans-unit>
        <trans-unit id="842beb51ca9c5417a27f472386d0e0d52dcc074f" translate="yes">
          <source>Before:</source>
          <target state="translated">Before:</target>
        </trans-unit>
        <trans-unit id="ce372ed4595d7ee7562947bc03d901bf1fa43b3a" translate="yes">
          <source>Begin a main section heading with the markdown &lt;code&gt;##&lt;/code&gt; characters. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; HTML tag.</source>
          <target state="translated">マークダウン &lt;code&gt;##&lt;/code&gt; 文字でメインセクションの見出しを開始します。 または、同等の &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; HTMLタグを記述できます。</target>
        </trans-unit>
        <trans-unit id="77b54c71ffe46696eb1cabec8c578b7430387d98" translate="yes">
          <source>Begin a secondary heading with the markdown &lt;code&gt;###&lt;/code&gt; characters. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; HTML tag.</source>
          <target state="translated">マークダウン &lt;code&gt;###&lt;/code&gt; 文字で2番目の見出しを開始します。 または、同等の &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; HTMLタグを記述できます。</target>
        </trans-unit>
        <trans-unit id="68ffa95f663f190607f3c471b59d100f255b0429" translate="yes">
          <source>Begin by adding &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; to the list of imported symbols.</source>
          <target state="translated">インポートされたシンボルのリストに &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; を追加することから始めます。</target>
        </trans-unit>
        <trans-unit id="8d5d9a6ea323fdd57d9e1215bac5a83bb80d88b5" translate="yes">
          <source>Begin by adding &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; to the list of symbols imported from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/core&lt;/code&gt; からインポートされたシンボルのリストに &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; を追加することから始めます。</target>
        </trans-unit>
        <trans-unit id="c07371f1cc4e4d389c0f8860f26b0137449c4516" translate="yes">
          <source>Begin by imitating the heroes feature:</source>
          <target state="translated">ヒーロー機能を模倣することから始めます。</target>
        </trans-unit>
        <trans-unit id="eee54c68da088a30ccd7f437a9e53e1b0bb1026c" translate="yes">
          <source>Begin by installing TypeScript to the project.</source>
          <target state="translated">TypeScriptをプロジェクトにインストールすることから始めます。</target>
        </trans-unit>
        <trans-unit id="c985c7dda4282902d2451041dfd2a01b559349f8" translate="yes">
          <source>Begin by putting re-usable, preparatory code in a &lt;em&gt;setup&lt;/em&gt; function instead of &lt;code&gt;beforeEach()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; 代わりに再利用可能な準備コードを&lt;em&gt;セットアップ&lt;/em&gt;関数に入れることから始め&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="9dc6969f62da20a6afb1f322ebadb8b41abaac3c" translate="yes">
          <source>Begin with a simple version of the app that navigates between two empty views.</source>
          <target state="translated">2つの空のビュー間をナビゲートするシンプルなバージョンのアプリから始めます。</target>
        </trans-unit>
        <trans-unit id="d6548854aa27000232e1d1aba5f49a3acb40b7ae" translate="yes">
          <source>Begin with the first form of data binding&amp;mdash;interpolation&amp;mdash;to see how much richer template HTML can be.</source>
          <target state="translated">最初の形式のデータバインディング（補間）から始めて、テンプレートHTMLがどれだけリッチになるかを確認します。</target>
        </trans-unit>
        <trans-unit id="592d6d7c575706de86d4d071fdf75790be29837c" translate="yes">
          <source>Beginning with Angular 6.0, the preferred way to create a singleton service is to set &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;root&lt;/code&gt; on the service's &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. This tells Angular to provide the service in the application root.</source>
          <target state="translated">Angular 6.0以降、シングルトンサービスを作成するための好ましい方法は、サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータで、 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;root&lt;/code&gt; に設定することです。 これにより、Angularはアプリケーションルートでサービスを提供するようになります。</target>
        </trans-unit>
        <trans-unit id="3b66259b5d10f5e4dfd17260980e9448c27c8990" translate="yes">
          <source>Behind the scenes, Angular creates a new control for each input element, provided you have set up a &lt;code&gt;name&lt;/code&gt; attribute and two-way binding for each input.</source>
          <target state="translated">背後で、Angularは各入力要素に対して新しいコントロールを作成します。ただし、各入力に対して &lt;code&gt;name&lt;/code&gt; 属性と双方向バインディングを設定している必要があります。</target>
        </trans-unit>
        <trans-unit id="f1577aef7d5c90af9c045dcc7b86cbeeacf9fc65" translate="yes">
          <source>Behind the scenes, Angular sets the &lt;code&gt;logger&lt;/code&gt; parameter to the full service registered under the &lt;code&gt;LoggingService&lt;/code&gt; token, which happens to be the &lt;code&gt;DateLoggerService&lt;/code&gt; instance that was &lt;a href=&quot;dependency-injection-in-action#useclass&quot;&gt;provided above&lt;/a&gt;.</source>
          <target state="translated">背後では、Angularは &lt;code&gt;logger&lt;/code&gt; パラメーターを &lt;code&gt;LoggingService&lt;/code&gt; トークンの下に登録されている完全なサービスに設定します。これは、 &lt;a href=&quot;dependency-injection-in-action#useclass&quot;&gt;上記&lt;/a&gt;で提供された &lt;code&gt;DateLoggerService&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="e82af82e7e882e82e6f17fc0109858d570cb6fa5" translate="yes">
          <source>Behind the scenes, each component sets up its own injector with zero, one, or more providers defined for that component itself.</source>
          <target state="translated">背後で、各コンポーネントは、そのコンポーネント自体に対して定義されたゼロ、1つ、または複数のプロバイダーを使用して独自のインジェクターをセットアップします。</target>
        </trans-unit>
        <trans-unit id="f1b2830245d3e2ff98c8e67a5f1a960600c64153" translate="yes">
          <source>Behind this behavior is the router's &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard. The guard gives you a chance to clean-up or ask the user's permission before navigating away from the current view.</source>
          <target state="translated">この動作の背後には、ルーターの &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; ガードがあります。 ガードは、現在のビューから移動する前に、クリーンアップするか、ユーザーの許可を求める機会を提供します。</target>
        </trans-unit>
        <trans-unit id="3a5f33c6e631fd4b9b6828f4a98022745cdde1db" translate="yes">
          <source>Below is the &quot;Little Tour of Heroes&quot; component.</source>
          <target state="translated">以下は、「リトルツアーオブヒーローズ」コンポーネントです。</target>
        </trans-unit>
        <trans-unit id="a6d54f04eb5f64dea38939b332ee485453c0ed14" translate="yes">
          <source>Below is the content of our example &lt;code&gt;select&lt;/code&gt; ICU expression in the component template:</source>
          <target state="translated">以下は、コンポーネントテンプレートの例の &lt;code&gt;select&lt;/code&gt; ICU式の内容です。</target>
        </trans-unit>
        <trans-unit id="4e0f6ab73f39d0ec2a1809d528963c447a13f3b6" translate="yes">
          <source>Below it add an HTML unordered list (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">その下に、HTML順不同リスト（ &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; ）を追加します</target>
        </trans-unit>
        <trans-unit id="b84a1be2c29811cc7905b853f73dea56408133ea" translate="yes">
          <source>Below the &lt;code&gt;clearCart()&lt;/code&gt; method, define a new &lt;code&gt;getShippingPrices()&lt;/code&gt; method that uses the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;#get()&lt;/code&gt; method to retrieve the shipping data (types and prices).</source>
          <target state="translated">&lt;code&gt;clearCart()&lt;/code&gt; メソッドの下で、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;#get()&lt;/code&gt; メソッドを使用して配送データ（タイプと価格）を取得する新しい &lt;code&gt;getShippingPrices()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="8cc0379f41ff0ba0e46288baf9de039b96b071ca" translate="yes">
          <source>Besides their different API, there are two important internal differences between &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; that affect the behavior of hybrid applications:</source>
          <target state="translated">異なるAPIに加えて、 &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; の間には、ハイブリッドアプリケーションの動作に影響する2つの重要な内部の違いがあります。</target>
        </trans-unit>
        <trans-unit id="9faf878af4c349c49c9509b240e538390447757b" translate="yes">
          <source>Besides using the CLI on the command line, you can also use an interactive development environment like &lt;a href=&quot;https://angularconsole.com/&quot;&gt;Angular Console&lt;/a&gt;, or manipulate files directly in the app's source folder and configuration files.</source>
          <target state="translated">コマンドラインでCLIを使用する以外に、 &lt;a href=&quot;https://angularconsole.com/&quot;&gt;Angular Console&lt;/a&gt;などのインタラクティブな開発環境を使用したり、アプリのソースフォルダーや構成ファイル内のファイルを直接操作したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="eb8de9ce8757ee3c542141ac80ff3b33dc04edff" translate="yes">
          <source>Best practices</source>
          <target state="translated">ベストプラクティス</target>
        </trans-unit>
        <trans-unit id="82ef826d9fb859d576a0907d18d1a66926bd8669" translate="yes">
          <source>Beyond that, you may interleave the two frameworks. You always cross the boundary between the two frameworks by one of two ways:</source>
          <target state="translated">さらに、2つのフレームワークをインターリーブすることもできます。 次の2つの方法のいずれかで、常に2つのフレームワーク間の境界を越えます。</target>
        </trans-unit>
        <trans-unit id="16d85a9f9536bdb143337018c722df8b0f3c81b3" translate="yes">
          <source>Bind component methods to user events, like keystrokes and clicks.</source>
          <target state="translated">キーストロークやクリックなど、コンポーネントメソッドをユーザーイベントにバインドします。</target>
        </trans-unit>
        <trans-unit id="5e9e55d218847019581b70053a614ddd2a5a9018" translate="yes">
          <source>Bind data properties to each form control using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; two-way data-binding syntax.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 双方向データバインディング構文を使用して、各フォームコントロールにデータプロパティをバインドします。</target>
        </trans-unit>
        <trans-unit id="5f1cd87627492a075b5e1b02e1f2c3ff5fdc07ba" translate="yes">
          <source>Bind the &lt;code&gt;HeroesComponent.selectedHero&lt;/code&gt; to the element's &lt;code&gt;hero&lt;/code&gt; property like this.</source>
          <target state="translated">このように、 &lt;code&gt;HeroesComponent.selectedHero&lt;/code&gt; を要素の &lt;code&gt;hero&lt;/code&gt; プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="b2792d4ffa16115ba7c001505491305b2d5c88f6" translate="yes">
          <source>Bind to a second property</source>
          <target state="translated">2番目のプロパティにバインドする</target>
        </trans-unit>
        <trans-unit id="697a78adb0268f346f175f0419a81cb28cea06a1" translate="yes">
          <source>Bind to an &lt;code&gt;@Input&lt;/code&gt; alias</source>
          <target state="translated">&lt;code&gt;@Input&lt;/code&gt; エイリアスにバインドする</target>
        </trans-unit>
        <trans-unit id="5662c554f6ba4f36018195821022c704fa19317c" translate="yes">
          <source>Bind to the &lt;code&gt;MessageService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MessageService&lt;/code&gt; にバインドする</target>
        </trans-unit>
        <trans-unit id="9af2bb479915615a2ff7e67d9debd7fe3d47d969" translate="yes">
          <source>Bind to the &lt;code&gt;click&lt;/code&gt; event</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; イベントにバインドする</target>
        </trans-unit>
        <trans-unit id="21c9dd5766d21c48bc079c417359f429b538c0e9" translate="yes">
          <source>Bind to the &lt;code&gt;hidden&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;hidden&lt;/code&gt; プロパティにバインドする</target>
        </trans-unit>
        <trans-unit id="f2a12bb43f4f20a3308c6e7f43110abc164b3cbe" translate="yes">
          <source>Bind to the &lt;code&gt;href&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; プロパティにバインドします</target>
        </trans-unit>
        <trans-unit id="c50c22644a97886a75576f3ad55786f5139b6a3f" translate="yes">
          <source>Bind to the &lt;code&gt;src&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; プロパティにバインドします</target>
        </trans-unit>
        <trans-unit id="0c74318c4ebf86394efdd83afd59fbdcebcf11b6" translate="yes">
          <source>Binding definition</source>
          <target state="translated">バインディング定義</target>
        </trans-unit>
        <trans-unit id="5839396aa9317f9099934df61297930a2f609f5a" translate="yes">
          <source>Binding expressions in the template that refer to properties of &lt;code&gt;selectedHero&lt;/code&gt;&amp;mdash;expressions like &lt;code&gt;{{selectedHero.name}}&lt;/code&gt;&amp;mdash;&lt;em&gt;must fail&lt;/em&gt; because there is no selected hero.</source>
          <target state="translated">&lt;code&gt;selectedHero&lt;/code&gt; のプロパティを参照するテンプレート内の式（ &lt;code&gt;{{selectedHero.name}}&lt;/code&gt; などの式）は、ヒーローが選択されてい&lt;em&gt;ない&lt;/em&gt;ため&lt;em&gt;失敗する必要が&lt;/em&gt;あります。</target>
        </trans-unit>
        <trans-unit id="1893c99928000b73c034f5d13d20f170b63a568e" translate="yes">
          <source>Binding happens when Angular performs &lt;strong&gt;change detection&lt;/strong&gt;.</source>
          <target state="translated">Angularが&lt;strong&gt;変更検出を&lt;/strong&gt;実行&lt;strong&gt;すると&lt;/strong&gt; 、バインドが発生します。</target>
        </trans-unit>
        <trans-unit id="9f17435a7231c370dd9b277051fa279efb03be5c" translate="yes">
          <source>Binding syntax: an overview</source>
          <target state="translated">バインド構文：概要</target>
        </trans-unit>
        <trans-unit id="d5647a339d9f5d3f491fea7dce9161e510086700" translate="yes">
          <source>Binding targets</source>
          <target state="translated">バインディングターゲット</target>
        </trans-unit>
        <trans-unit id="f1cd0d1adc0c5198881b5fa4d0d0d93ed50065f6" translate="yes">
          <source>Binding to &lt;code&gt;innerText&lt;/code&gt; in &lt;code&gt;platform-server&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;platform-server&lt;/code&gt; &lt;code&gt;innerText&lt;/code&gt; にバインド</target>
        </trans-unit>
        <trans-unit id="41bde9dd651e82f521b541fdc41775c9aa970888" translate="yes">
          <source>Binding to an &lt;code&gt;@Input&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;@Input&lt;/code&gt; プロパティへのバインド</target>
        </trans-unit>
        <trans-unit id="1008f5e8313e01e8a35aaef1612e93ffb2fdf201" translate="yes">
          <source>Binding to user input events</source>
          <target state="translated">ユーザー入力イベントへのバインド</target>
        </trans-unit>
        <trans-unit id="a0900669bf69957ea18b3c6bc31b0c068974fb65" translate="yes">
          <source>Binding types and targets</source>
          <target state="translated">バインディングタイプとターゲット</target>
        </trans-unit>
        <trans-unit id="3d8a515e1c9d4c4474858b033088bbcd501cde60" translate="yes">
          <source>Binding types other than interpolation have a &lt;strong&gt;target name&lt;/strong&gt; to the left of the equal sign, either surrounded by punctuation, &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;()&lt;/code&gt;, or preceded by a prefix: &lt;code&gt;bind-&lt;/code&gt;, &lt;code&gt;on-&lt;/code&gt;, &lt;code&gt;bindon-&lt;/code&gt;.</source>
          <target state="translated">補間以外のバインディングタイプの&lt;strong&gt;ターゲット名&lt;/strong&gt;は、等号の左側にあり、句読点 &lt;code&gt;[]&lt;/code&gt; または &lt;code&gt;()&lt;/code&gt; で囲まれているか、プレフィックスが前に付いています： &lt;code&gt;bind-&lt;/code&gt; 、 &lt;code&gt;on-&lt;/code&gt; 、 &lt;code&gt;bindon-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9489430053bbe362e29d4adc605c0ee490984678" translate="yes">
          <source>Bindings/interpolation</source>
          <target state="translated">Bindings/interpolation</target>
        </trans-unit>
        <trans-unit id="c5508d22bc8524cbfc21537e7df0e0da3d89023d" translate="yes">
          <source>Bindings:</source>
          <target state="translated">Bindings:</target>
        </trans-unit>
        <trans-unit id="6fdec0a2d226423ce21951dc8d539e2b83505cca" translate="yes">
          <source>Binds a host element property (here, the CSS class &lt;code&gt;valid&lt;/code&gt;) to a directive/component property (&lt;code&gt;isValid&lt;/code&gt;).</source>
          <target state="translated">ホスト要素プロパティ（ここでは、 &lt;code&gt;valid&lt;/code&gt; CSSクラス）をディレクティブ/コンポーネントプロパティ（ &lt;code&gt;isValid&lt;/code&gt; ）にバインドします。</target>
        </trans-unit>
        <trans-unit id="2a03f296a2db9a927b9dbda94190effddfbe9a35" translate="yes">
          <source>Binds a property to an interpolated string, for example, &quot;Hello Seabiscuit&quot;. Equivalent to: &lt;code&gt;&amp;lt;div [title]=&quot;'Hello ' + ponyName&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">「Hello Seabiscuit」など、補間された文字列にプロパティをバインドします。 次と同等： &lt;code&gt;&amp;lt;div [title]=&quot;'Hello ' + ponyName&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d7ccc5ce4a07981d8fbbdb0cd830cbe571385e3" translate="yes">
          <source>Binds an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">既存の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; をDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="9ccd1d736a8432535c2d3c15a12d59d85c60d529" translate="yes">
          <source>Binds an existing &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">既存の &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; をDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="16fe924da3cac78aab1564f33684600fc3e54d31" translate="yes">
          <source>Binds attribute &lt;code&gt;role&lt;/code&gt; to the result of expression &lt;code&gt;myAriaRole&lt;/code&gt;.</source>
          <target state="translated">属性 &lt;code&gt;role&lt;/code&gt; を式 &lt;code&gt;myAriaRole&lt;/code&gt; の結果にバインドします。</target>
        </trans-unit>
        <trans-unit id="f54affac6186ad384ce54918e8587b01c740b31d" translate="yes">
          <source>Binds property &lt;code&gt;value&lt;/code&gt; to the result of expression &lt;code&gt;firstName&lt;/code&gt;.</source>
          <target state="translated">プロパティ &lt;code&gt;value&lt;/code&gt; を式 &lt;code&gt;firstName&lt;/code&gt; の結果にバインドします。</target>
        </trans-unit>
        <trans-unit id="f28cdf8e45d544332ba50c27586202007f4d2bd8" translate="yes">
          <source>Binds style property &lt;code&gt;width&lt;/code&gt; to the result of expression &lt;code&gt;mySize&lt;/code&gt; in pixels. Units are optional.</source>
          <target state="translated">スタイルプロパティの &lt;code&gt;width&lt;/code&gt; をピクセル単位の式 &lt;code&gt;mySize&lt;/code&gt; の結果にバインドします。 単位はオプションです。</target>
        </trans-unit>
        <trans-unit id="17a444202922e95677dbac286aa416c23efd0983" translate="yes">
          <source>Binds text content to an interpolated string, for example, &quot;Hello Seabiscuit&quot;.</source>
          <target state="translated">テキストコンテンツを、たとえば「Hello Seabiscuit」などの補間された文字列にバインドします。</target>
        </trans-unit>
        <trans-unit id="8a53a7d5df799e913a7ec437d4dd501a26095ee7" translate="yes">
          <source>Binds the first result of the component content query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponent&lt;/code&gt;) of the class.</source>
          <target state="translated">コンポーネントコンテンツクエリの最初の結果（ &lt;code&gt;myChildComponent&lt;/code&gt; ）をクラスのプロパティ（ myChildComponent ）にバインドします。</target>
        </trans-unit>
        <trans-unit id="d462ed51c89027f3d448e6304b58618b5f4dc0bb" translate="yes">
          <source>Binds the first result of the component view query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponent&lt;/code&gt;) of the class. Not available for directives.</source>
          <target state="translated">コンポーネントビュークエリの最初の結果（ &lt;code&gt;myChildComponent&lt;/code&gt; ）をクラスのプロパティ（ myChildComponent ）にバインドします。 ディレクティブには使用できません。</target>
        </trans-unit>
        <trans-unit id="0e092be7e1c05ee4dd0e489bb77875249aed43ca" translate="yes">
          <source>Binds the presence of CSS classes on the element to the truthiness of the associated map values. The right-hand expression should return {class-name: true/false} map.</source>
          <target state="translated">要素上のCSSクラスの存在を、関連付けられたマップ値の真実性にバインドします。 右側の式は{class-name：true / false}マップを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="671bb5d878441fb7fa959c57f931fb9e81582167" translate="yes">
          <source>Binds the presence of the CSS class &lt;code&gt;extra-sparkle&lt;/code&gt; on the element to the truthiness of the expression &lt;code&gt;isDelightful&lt;/code&gt;.</source>
          <target state="translated">要素上のCSSクラスの &lt;code&gt;extra-sparkle&lt;/code&gt; の存在を、式 &lt;code&gt;isDelightful&lt;/code&gt; の真実性にバインドします。</target>
        </trans-unit>
        <trans-unit id="a75de65e1c312de631f318f4e7d379f7e3b0db7e" translate="yes">
          <source>Binds the results of the component content query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponents&lt;/code&gt;) of the class.</source>
          <target state="translated">コンポーネントコンテンツクエリの結果（ &lt;code&gt;myChildComponents&lt;/code&gt; ）をクラスのプロパティ（ myChildComponents ）にバインドします。</target>
        </trans-unit>
        <trans-unit id="2153c3e38b198c59245e2713a80794aac2809840" translate="yes">
          <source>Binds the results of the component view query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponents&lt;/code&gt;) of the class. Not available for directives.</source>
          <target state="translated">コンポーネントビュークエリ（ &lt;code&gt;myPredicate&lt;/code&gt; ）の結果をクラスのプロパティ（ &lt;code&gt;myChildComponents&lt;/code&gt; ）にバインドします。 ディレクティブには使用できません。</target>
        </trans-unit>
        <trans-unit id="c24315eb20cc1f5a565ec08f29abab31c0925f1a" translate="yes">
          <source>Blob</source>
          <target state="translated">Blob</target>
        </trans-unit>
        <trans-unit id="226ebb87480ef673fc8c86d3504690e25d113738" translate="yes">
          <source>Bodies are not enforced to be immutable, as they can include a reference to any user-defined data type. However, interceptors should take care to preserve idempotence by treating them as such.</source>
          <target state="translated">ボディは、ユーザー定義のデータ型への参照を含めることができるため、不変であるとは限りません。 ただし、インターセプターは、べき等を扱うことにより、べき等を保持するように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="af107074fdc94049367385cfa9e21226f2eb6a09" translate="yes">
          <source>Boolean (marked deprecated in v5): &lt;code&gt;true&lt;/code&gt; for symbol and false for &lt;code&gt;code&lt;/code&gt;.</source>
          <target state="translated">ブール値（v5で廃止予定）：シンボルの &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;code&lt;/code&gt; false。</target>
        </trans-unit>
        <trans-unit id="b4ee3c164f30fd674db7923067c5585c6016a895" translate="yes">
          <source>Boolean and enumerated options</source>
          <target state="translated">ブールおよび列挙オプション</target>
        </trans-unit>
        <trans-unit id="ee3701cfb07b487ff0074c548b7c853abc094675" translate="yes">
          <source>Boolean options have two forms: &lt;code&gt;--thisOption&lt;/code&gt; sets the flag, &lt;code&gt;--noThisOption&lt;/code&gt; clears it. If neither option is supplied, the flag remains in its default state, as listed in the reference documentation.</source>
          <target state="translated">ブールオプションには2つの形式があります &lt;code&gt;--thisOption&lt;/code&gt; はフラグを設定し、 &lt;code&gt;--noThisOption&lt;/code&gt; はフラグをクリアします。 どちらのオプションも指定されていない場合、フラグは参照ドキュメントにリストされているデフォルト状態のままです。</target>
        </trans-unit>
        <trans-unit id="43aac281118e73bd2de105009d38e4c096ce545e" translate="yes">
          <source>Boolean value matching</source>
          <target state="translated">ブール値の一致</target>
        </trans-unit>
        <trans-unit id="22cb4db816b227d666bef5f940023e6d431b8292" translate="yes">
          <source>Boolean values in transitions</source>
          <target state="translated">遷移のブール値</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="984a1c95ee8f803062739b46151930f8fcc64cc3" translate="yes">
          <source>Bootstrap The runtime instance of this class contains a &lt;a href=&quot;upgrademodule#bootstrap&quot;&gt;`bootstrap()`&lt;/a&gt; method, which you use to bootstrap the top level AngularJS module onto an element in the DOM for the hybrid upgrade app.</source>
          <target state="translated">ブートストラップこのクラスのランタイムインスタンスには、 &lt;a href=&quot;upgrademodule#bootstrap&quot;&gt;`bootstrap（）`&lt;/a&gt;メソッドが含まれています。このメソッドを使用して、トップレベルのAngularJSモジュールをハイブリッドアップグレードアプリのDOMの要素にブートストラップします。</target>
        </trans-unit>
        <trans-unit id="b2bfe58675219a1dbbfc6b3475d2142be8257202" translate="yes">
          <source>Bootstrap a hybrid AngularJS / Angular application.</source>
          <target state="translated">ハイブリッドAngularJS / Angularアプリケーションをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="51ee9ae036bd74ef9a86c64b16240b06c2a27ba8" translate="yes">
          <source>Bootstrap a new component at the root level of the application.</source>
          <target state="translated">アプリケーションのルートレベルで新しいコンポーネントをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="e4a6b7f980306983d4418b9e062151bb02f12137" translate="yes">
          <source>Bootstrap an AngularJS application from this NgModule</source>
          <target state="translated">このNgModuleからAngularJSアプリケーションをブートストラップします</target>
        </trans-unit>
        <trans-unit id="c43ac6907ee5f49cf786f03c5183c92913a7be9f" translate="yes">
          <source>Bootstrap process</source>
          <target state="translated">ブートストラッププロセス</target>
        </trans-unit>
        <trans-unit id="f816445d2cdd3ec11a7f0bc29a3553b746ba7f58" translate="yes">
          <source>Bootstrap the &lt;code&gt;AppModule&lt;/code&gt; in &lt;code&gt;main.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; をブートストラップし &lt;code&gt;main.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8e9582bb8e53711c79f2e9de1050077a16c41c3" translate="yes">
          <source>Bootstrap the app with those providers.</source>
          <target state="translated">これらのプロバイダーでアプリをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="09273e0b3502cd35874b01a3ba91c106f87a667f" translate="yes">
          <source>Bootstrapping</source>
          <target state="translated">Bootstrapping</target>
        </trans-unit>
        <trans-unit id="5a7db5fc491694b2f101ec433ecf1bf5688abf3d" translate="yes">
          <source>Bootstrapping a hybrid PhoneCat</source>
          <target state="translated">ハイブリッドPhoneCatのブートストラップ</target>
        </trans-unit>
        <trans-unit id="9aa9a98e544eb5606246801d9bd2a8d5e0833195" translate="yes">
          <source>Bootstrapping hybrid applications</source>
          <target state="translated">ハイブリッドアプリケーションのブートストラップ</target>
        </trans-unit>
        <trans-unit id="09c0fece45f5112a211482199d5921f05490b2bf" translate="yes">
          <source>Bootstrapping of a hybrid Angular application which contains both of the frameworks coexisting in a single application.</source>
          <target state="translated">単一のアプリケーションに共存する両方のフレームワークを含むハイブリッドAngularアプリケーションのブートストラップ。</target>
        </trans-unit>
        <trans-unit id="0ca02e3c0ffaf3a6883168e9851d5db6a98acc44" translate="yes">
          <source>Bootstrapping with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; ブートストラップ（）</target>
        </trans-unit>
        <trans-unit id="be52c694b99b80c209e0ec9f6005df403bbc8030" translate="yes">
          <source>Bootstraps the app, using the root component from the specified &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; のルートコンポーネントを使用して、アプリをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="bc574769bfd4b0921435e1d96eebd017fb7655ce" translate="yes">
          <source>Bootstraps the worker ui.</source>
          <target state="translated">ワーカーUIをブートストラップします。</target>
        </trans-unit>
        <trans-unit id="843c4cada239f4bc2cc6160b3122b53d22b9e4aa" translate="yes">
          <source>Both &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; clear the output folder before they build the project, but only the &lt;code&gt;ng build&lt;/code&gt; command writes the generated build artifacts to the output folder.</source>
          <target state="translated">&lt;code&gt;ng build&lt;/code&gt; と &lt;code&gt;ng serve&lt;/code&gt; は、プロジェクトをビルドする前に出力フォルダーをクリアしますが、生成されたビルドアーティファクトを出力フォルダーに書き込むのは &lt;code&gt;ng build&lt;/code&gt; コマンドのみです。</target>
        </trans-unit>
        <trans-unit id="9ea4794ef24c179c732e4dbb95359c533623f529" translate="yes">
          <source>Both &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; install the packages that are identified in a &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file.</source>
          <target state="translated">&lt;code&gt;npm&lt;/code&gt; と &lt;code&gt;yarn&lt;/code&gt; は、 &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;ファイルで識別されるパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="efd9072be34ddd4cd3ac6531f4cdfce31589a567" translate="yes">
          <source>Both AngularJS and Angular have their own concept of modules to help organize an app into cohesive blocks of functionality.</source>
          <target state="translated">AngularJSとAngularの両方には、アプリを機能のまとまりのあるブロックに整理するのに役立つ独自のモジュールの概念があります。</target>
        </trans-unit>
        <trans-unit id="f8b1d87ddf1e625974551a1a9492af7f227f733c" translate="yes">
          <source>Both AngularJS and Angular have their own concept of modules to help organize an application into cohesive blocks of functionality.</source>
          <target state="translated">AngularJSとAngularの両方には、アプリケーションを凝集した機能ブロックに整理するのに役立つ独自のモジュールの概念があります。</target>
        </trans-unit>
        <trans-unit id="d564c53c4c40f094481604ce9c087637f753034c" translate="yes">
          <source>Both buttons navigate back to the crisis list after save or cancel.</source>
          <target state="translated">両方のボタンは、保存またはキャンセル後に危機リストに戻ります。</target>
        </trans-unit>
        <trans-unit id="64ed4a76603ad54f5413c0e8debcdd97dd1aa9b1" translate="yes">
          <source>Both components and services are simply classes, with &lt;em&gt;decorators&lt;/em&gt; that mark their type and provide metadata that tells Angular how to use them.</source>
          <target state="translated">コンポーネントとサービスはどちらも単なるクラスであり、タイプをマークし、Angularにそれらの使用方法を伝えるメタデータを提供する&lt;em&gt;デコレーター&lt;/em&gt;を備えています。</target>
        </trans-unit>
        <trans-unit id="f690c03e061a7fd137c00dd8ab89db4c52afd0e5" translate="yes">
          <source>Both reactive and template-driven forms share underlying building blocks.</source>
          <target state="translated">リアクティブフォームとテンプレート駆動フォームの両方が、基礎となるビルディングブロックを共有します。</target>
        </trans-unit>
        <trans-unit id="c547c7a0a78e9d790dbe284eb7240f0e366c99c3" translate="yes">
          <source>Both states are temporary; they are saved only for the lifetime of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope&quot;&gt;ServiceWorker instance&lt;/a&gt;. The browser sometimes terminates an idle service worker to conserve memory and processor power, and creates a new service worker instance in response to network events. The new instance starts in the &lt;code&gt;NORMAL&lt;/code&gt; mode, regardless of the state of the previous instance.</source>
          <target state="translated">両方の状態は一時的なものです。 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope&quot;&gt;ServiceWorkerインスタンスの&lt;/a&gt;存続期間中のみ保存されます 。 ブラウザは、メモリとプロセッサの電力を節約するためにアイドル状態のService Workerを終了し、ネットワークイベントに応じて新しいService Workerインスタンスを作成することがあります。 新しいインスタンスは、前のインスタンスの状態に関係なく、 &lt;code&gt;NORMAL&lt;/code&gt; モードで起動します。</target>
        </trans-unit>
        <trans-unit id="2d33f13edcd4c6f3ed84da53d2a75dfa7b13538d" translate="yes">
          <source>Both successful and unsuccessful responses can be delivered via &lt;code&gt;&lt;a href=&quot;../../../core/testing/flush&quot;&gt;flush&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">成功した応答と失敗した応答の両方を、 &lt;code&gt;&lt;a href=&quot;../../../core/testing/flush&quot;&gt;flush&lt;/a&gt;()&lt;/code&gt; 介して配信できます。</target>
        </trans-unit>
        <trans-unit id="14a724638caaef22868a74a59cb2138ec4f02873" translate="yes">
          <source>Break circularities with a forward class reference (&lt;code&gt;forwardRef&lt;/code&gt;)</source>
          <target state="translated">前方クラス参照（ &lt;code&gt;forwardRef&lt;/code&gt; ）で循環性を破る</target>
        </trans-unit>
        <trans-unit id="19e2cd28b09ef3682ded6d1478601de1d625cc30" translate="yes">
          <source>Break the circularity with &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt; を使用して円形性を解除します。</target>
        </trans-unit>
        <trans-unit id="54a2cf5e634dbba0be2bf8a55f79252f5c790bdb" translate="yes">
          <source>Browser</source>
          <target state="translated">Browser</target>
        </trans-unit>
        <trans-unit id="caa7ae8131b0e358dca91885f3b90f7468dff074" translate="yes">
          <source>Browser support</source>
          <target state="translated">ブラウザのサポート</target>
        </trans-unit>
        <trans-unit id="2d988f6baee731e13c5ed58b15e6403c0f5d437c" translate="yes">
          <source>Browser support for custom elements</source>
          <target state="translated">カスタム要素のブラウザーサポート</target>
        </trans-unit>
        <trans-unit id="3e5c46f54fdcf3e89274890de50e1bbd5f0cdb1b" translate="yes">
          <source>BrowserAnimationsModule</source>
          <target state="translated">BrowserAnimationsModule</target>
        </trans-unit>
        <trans-unit id="1b19571f37782c3b7a2529d132b7eeafffb9c8b7" translate="yes">
          <source>BrowserDynamicTestingModule</source>
          <target state="translated">BrowserDynamicTestingModule</target>
        </trans-unit>
        <trans-unit id="489e469aaed844504ea81ebeeb21f713325a5454" translate="yes">
          <source>BrowserModule</source>
          <target state="translated">BrowserModule</target>
        </trans-unit>
        <trans-unit id="39e941a302cc8d62cbd7fd0aa04f1f300f6db868" translate="yes">
          <source>BrowserTestingModule</source>
          <target state="translated">BrowserTestingModule</target>
        </trans-unit>
        <trans-unit id="1170851384c0cf693a98b5cd9a90dfd12e351c34" translate="yes">
          <source>BrowserTransferStateModule</source>
          <target state="translated">BrowserTransferStateModule</target>
        </trans-unit>
        <trans-unit id="b53e7dea10c2c28052bb71dd93c9ae381907b043" translate="yes">
          <source>Browsers (Desktop &amp;amp; Mobile)</source>
          <target state="translated">ブラウザ（デスクトップとモバイル）</target>
        </trans-unit>
        <trans-unit id="7472f880b5ebe7a2522b3da766321267d335a017" translate="yes">
          <source>Browsers can't execute TypeScript directly. Typescript must be &quot;transpiled&quot; into JavaScript using the &lt;em&gt;tsc&lt;/em&gt; compiler, which requires some configuration.</source>
          <target state="translated">ブラウザはTypeScriptを直接実行できません。 Typescriptは、 &lt;em&gt;tsc&lt;/em&gt;コンパイラーを使用してJavaScriptに「変換」する必要があります。これには、いくつかの構成が必要です。</target>
        </trans-unit>
        <trans-unit id="7331906d686c4ec9c7fb5e96c8a75a52e6649767" translate="yes">
          <source>Browsers list The &lt;code&gt;browserslist&lt;/code&gt; configuration file is included in your application &lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;project structure&lt;/a&gt; and provides the minimum browsers your application supports. See the &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist spec&lt;/a&gt; for complete configuration options.</source>
          <target state="translated">ブラウザーリスト &lt;code&gt;browserslist&lt;/code&gt; 構成ファイルは、アプリケーション&lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;プロジェクト構造に&lt;/a&gt;含まれ、アプリケーションがサポートする最小のブラウザーを提供します。 完全な構成オプションについては、 &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslistの仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5fd48f06506544e724e31bc1d27319aa4940aeb2" translate="yes">
          <source>Browsers such as Chrome provide developer tools for interacting with service workers. Such tools can be powerful when used properly, but there are a few things to keep in mind.</source>
          <target state="translated">Chromeなどのブラウザーは、サービスワーカーと対話するための開発者ツールを提供します。 このようなツールは、適切に使用すると強力になりますが、留意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="5f4763bbd263cd5434b3654e03112db678b6b161" translate="yes">
          <source>Build Result</source>
          <target state="translated">ビルド結果</target>
        </trans-unit>
        <trans-unit id="c674564300cade5252a5db51fce3d3eeff1e91ac" translate="yes">
          <source>Build a simple attribute directive</source>
          <target state="translated">単純な属性ディレクティブを作成する</target>
        </trans-unit>
        <trans-unit id="a1ab8e1d24bf4b36f9398025bfb1689b7314ddb9" translate="yes">
          <source>Build an Angular form with a component and template.</source>
          <target state="translated">コンポーネントとテンプレートを使用してAngularフォームを作成します。</target>
        </trans-unit>
        <trans-unit id="0b16ed964ca1d0b9633697442124487216e8c15a" translate="yes">
          <source>Build and launch the app with debugger by clicking the &lt;strong&gt;Run&lt;/strong&gt; button or by pressing &lt;code&gt;F5&lt;/code&gt;.</source>
          <target state="translated">[ &lt;strong&gt;実行&lt;/strong&gt; ]ボタンをクリックするか、 &lt;code&gt;F5&lt;/code&gt; キーを押して、デバッガーでアプリをビルドして起動します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
