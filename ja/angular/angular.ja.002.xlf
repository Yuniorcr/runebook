<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="a8f61986a353cec33f9912399d51a60272c66dba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yarn start&lt;/code&gt; &amp;mdash; starts the doc viewer application so you can see your local changes in the browser.</source>
          <target state="translated">&lt;code&gt;yarn start&lt;/code&gt; &amp;mdash;ブラウザーでローカルの変更を確認できるように、ドキュメントビューアーアプリケーションを開始します。</target>
        </trans-unit>
        <trans-unit id="4a47c4f1c388fec0ee78b60540d0f2936a6933ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{hero.name}}&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, and &lt;code&gt;[hero]&lt;/code&gt; bind program data to and from the DOM, responding to user input. See more about &lt;a href=&quot;architecture-components#data-binding&quot;&gt;data binding&lt;/a&gt; below.</source>
          <target state="translated">&lt;code&gt;{{hero.name}}&lt;/code&gt;, &lt;code&gt;(click)&lt;/code&gt;, and &lt;code&gt;[hero]&lt;/code&gt; bind program data to and from the DOM, responding to user input. See more about &lt;a href=&quot;architecture-components#data-binding&quot;&gt;data binding&lt;/a&gt; below.</target>
        </trans-unit>
        <trans-unit id="ce8bb03646d1aa1e391b18bf0dc9f141af8988a3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt; &lt;code&gt;imports&lt;/code&gt;: specifies the list of other modules that this module depends upon &lt;/em&gt;&lt;code&gt;declaration&lt;/code&gt;: keeps track of your components, pipes, and directives.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;imports&lt;/code&gt; ：このモジュールが&lt;/em&gt; &lt;code&gt;declaration&lt;/code&gt; &lt;em&gt;依存する他のモジュールのリストを指定します&lt;/em&gt;：コンポーネント、パイプ、ディレクティブを追跡します。</target>
        </trans-unit>
        <trans-unit id="6901ee635307862a90c8685577948006aa582f93" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;#docregion&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;#docregion&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fc13798c07d7086830e1860c7c18cfb68ff32d1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; supports only the client half of the XSRF protection scheme.&lt;/em&gt; Your backend service must be configured to set the cookie for your page, and to verify that the header is present on all eligible requests. If not, Angular's default protection will be ineffective.</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; は、XSRF保護スキームの半分のクライアントのみをサポートします。&lt;/em&gt;ページのCookieを設定し、対象となるすべてのリクエストにヘッダーが存在することを確認するように、バックエンドサービスを構成する必要があります。そうでない場合、Angularのデフォルトの保護は無効になります。</target>
        </trans-unit>
        <trans-unit id="69ec5dbc65ac4837948af0d970868ba10b1015d3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;API&lt;/em&gt; pages are generated from Angular source code into the &lt;code&gt;src/generated/docs/api&lt;/code&gt; directory. The doc viewer translates URLs that begin &lt;code&gt;api/&lt;/code&gt; into requests for document JSON files in that directory. This style guide does not discuss creation or maintenance of API pages.</source>
          <target state="translated">&lt;em&gt;API&lt;/em&gt;ページはAngularソースコードから &lt;code&gt;src/generated/docs/api&lt;/code&gt; ディレクトリに生成されます。ドキュメントビューアは、 &lt;code&gt;api/&lt;/code&gt; で始まるURLを、そのディレクトリ内のドキュメントJSONファイルのリクエストに変換します。このスタイルガイドでは、APIページの作成またはメンテナンスについては説明しません。</target>
        </trans-unit>
        <trans-unit id="c007dd5fbc56bc3a320e9507782d1a0ac7c47861" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ActivatedRouteStub&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ActivatedRouteStub&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3a71229a5de4f0f9d2aa46e3ea512b3877c03f19" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;After&lt;/em&gt; creating a component/directive by calling its constructor, Angular calls the lifecycle hook methods in the following sequence at specific moments:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Angularは、コンストラクターを呼び出してコンポーネント/ディレクティブを作成した&lt;em&gt;後&lt;/em&gt;、特定の瞬間に次のシーケンスでライフサイクルフックメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="065ffd3c0498c799282cbc06d1eadf223586baf6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;AfterContent&lt;/em&gt; hooks are similar to the &lt;em&gt;AfterView&lt;/em&gt; hooks. The key difference is in the child component.</source>
          <target state="translated">&lt;em&gt;AfterContent&lt;/em&gt;フックは、&lt;em&gt;AfterView&lt;/em&gt;フックに似ています。主な違いは、子コンポーネントにあります。</target>
        </trans-unit>
        <trans-unit id="395ef8b88f9209f87d46792a4d4d6ac634e2cb6e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Angular couldn't determine the value of the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/enums.html&quot;&gt;enum member&lt;/a&gt; that you referenced in metadata.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Angularは、メタデータで参照した&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/enums.html&quot;&gt;列挙型メンバーの&lt;/a&gt;値を特定できませんでした。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="586cb4e99fce00903fb96bb07955bd3e06ff5aac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Angular elements&lt;/em&gt; are Angular components packaged as &lt;em&gt;custom elements&lt;/em&gt; (also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way.</source>
          <target state="translated">&lt;em&gt;Angular要素&lt;/em&gt;は、&lt;em&gt;カスタム要素&lt;/em&gt;（Webコンポーネントとも呼ばれる）としてパッケージ化されたAngularコンポーネントであり、フレームワークに依存しない方法で新しいHTML要素を定義するためのWeb標準です。</target>
        </trans-unit>
        <trans-unit id="9546777855f498ab5331b6459f740550cfe1c984" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Angular templates are the same as executable code&lt;/em&gt;: HTML, attributes, and binding expressions (but not the values bound) in templates are trusted to be safe. This means that applications must prevent values that an attacker can control from ever making it into the source code of a template. Never generate template source code by concatenating user input and templates. To prevent these vulnerabilities, use the &lt;a href=&quot;security#offline-template-compiler&quot;&gt;offline template compiler&lt;/a&gt;, also known as &lt;em&gt;template injection&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;角度テンプレートは実行可能コードと同じです&lt;/em&gt;。&lt;em&gt;テンプレート内の&lt;/em&gt; HTML、属性、およびバインディング式（バインドされた値ではない）は安全であると信頼されています。これは、攻撃者が制御できる値をテンプレートのソースコードに組み込むことをアプリケーションが防ぐ必要があることを意味します。ユーザー入力とテンプレートを連結してテンプレートソースコードを生成しないでください。これらの脆弱性を防ぐには、&lt;a href=&quot;security#offline-template-compiler&quot;&gt;オフラインテンプレートコンパイラ&lt;/a&gt;（&lt;em&gt;テンプレートインジェクション&lt;/em&gt;とも呼ばれます）を使用して&lt;em&gt;ください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5958e08c5cfe7d7173551e30f187cea105393153" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Angular&lt;/em&gt; is the name for the Angular of today and tomorrow. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all 1.x versions of Angular.</source>
          <target state="translated">&lt;em&gt;Angular&lt;/em&gt;は、今日と明日のAngularの名前です。&lt;em&gt;AngularJS&lt;/em&gt;は、Angularのすべての1.xバージョンの名前です。</target>
        </trans-unit>
        <trans-unit id="eed035a9c235e115c860e73823c5ecf7fcf3331f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Angular&lt;/em&gt; is the name for the Angular of today and tomorrow. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">&lt;em&gt;Angular&lt;/em&gt;は、今日と明日のAngularの名前です。&lt;em&gt;AngularJS&lt;/em&gt;は、Angularのすべてのv1.xバージョンの名前です。</target>
        </trans-unit>
        <trans-unit id="5952fb89a15d3b7da1056c9b97f116a17ede5bef" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Assets&lt;/em&gt; are resources that are part of the app version that update along with the app. They can include resources loaded from the page's origin as well as third-party resources loaded from CDNs and other external URLs. As not all such external URLs may be known at build time, URL patterns can be matched.</source>
          <target state="translated">&lt;em&gt;アセット&lt;/em&gt;は、アプリとともに更新されるアプリバージョンの一部であるリソースです。それらには、ページのオリジンからロードされたリソースや、CDNやその他の外部URLからロードされたサードパーティのリソースを含めることができます。このような外部URLのすべてがビルド時に既知であるとは限らないため、URLパターンを照合できます。</target>
        </trans-unit>
        <trans-unit id="69d8e1ce0bfdeb0ddfe5fd8913e712b4f6ca63aa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Attribute directives&lt;/em&gt; alter the appearance or behavior of an existing element. In templates they look like regular HTML attributes, hence the name.</source>
          <target state="translated">&lt;em&gt;属性ディレクティブ&lt;/em&gt;は、既存の要素の外観または動作を変更します。テンプレートでは、それらは通常のHTML属性のように見えるため、名前になります。</target>
        </trans-unit>
        <trans-unit id="b2813f36d6e997f8cebab354916c0a9dec81a138" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Attribute directives&lt;/em&gt; are used as attributes of elements. The built-in &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;NgStyle&lt;/a&gt; directive in the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; guide, for example, can change several element styles at the same time.</source>
          <target state="translated">&lt;em&gt;属性ディレクティブ&lt;/em&gt;は、要素の属性として使用されます。たとえば、&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;ガイドに組み込まれている&lt;a href=&quot;template-syntax#ngStyle&quot;&gt;NgStyle&lt;/a&gt;ディレクティブは、複数の要素スタイルを同時に変更できます。</target>
        </trans-unit>
        <trans-unit id="2b25234f1872022f772af40e4aaa09acb68ee766" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Barry&lt;/em&gt; is the problem. He needs to reach his parent, &lt;em&gt;Alice&lt;/em&gt;, and also be a parent to &lt;em&gt;Carol&lt;/em&gt;. That means he must both &lt;em&gt;inject&lt;/em&gt; the &lt;code&gt;Parent&lt;/code&gt; class interface to get &lt;em&gt;Alice&lt;/em&gt; and &lt;em&gt;provide&lt;/em&gt; a &lt;code&gt;Parent&lt;/code&gt; to satisfy &lt;em&gt;Carol&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;バリー&lt;/em&gt;が問題です。彼は彼の親、到達する必要が&lt;em&gt;アリスを&lt;/em&gt;、ともに親と&lt;em&gt;キャロル&lt;/em&gt;。つまり、&lt;em&gt;Alice&lt;/em&gt;を取得するために &lt;code&gt;Parent&lt;/code&gt; クラスインターフェイスを&lt;em&gt;注入し&lt;/em&gt;、&lt;em&gt;Carol&lt;/em&gt;を満たす&lt;em&gt;ため&lt;/em&gt;に &lt;code&gt;Parent&lt;/code&gt; を&lt;em&gt;提供する必要&lt;/em&gt;があり&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ceafa15bede54e59e3caf718ff6f16db63f9ef4d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Barry&lt;/em&gt;'s &lt;code&gt;providers&lt;/code&gt; array looks just like &lt;a href=&quot;dependency-injection-navtree#alex-providers&quot;&gt;&lt;em&gt;Alex&lt;/em&gt;'s&lt;/a&gt;. If you're going to keep writing &lt;a href=&quot;dependency-injection-in-action#useexisting&quot;&gt;&lt;em&gt;alias providers&lt;/em&gt;&lt;/a&gt; like this you should create a &lt;a href=&quot;dependency-injection-navtree#provideparent&quot;&gt;helper function&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Barry&lt;/em&gt;の &lt;code&gt;providers&lt;/code&gt; 配列は、&lt;a href=&quot;dependency-injection-navtree#alex-providers&quot;&gt;&lt;em&gt;Alex&lt;/em&gt;の&lt;/a&gt;配列とまったく同じです。このような&lt;a href=&quot;dependency-injection-in-action#useexisting&quot;&gt;&lt;em&gt;エイリアスプロバイダー&lt;/em&gt;&lt;/a&gt;を作成し続ける場合は、&lt;a href=&quot;dependency-injection-navtree#provideparent&quot;&gt;ヘルパー関数&lt;/a&gt;を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="ffd84f19cf2865cc25b381a433fc952fb444e02c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Better security&lt;/em&gt; AOT compiles HTML templates and components into JavaScript files long before they are served to the client. With no templates to read and no risky client-side HTML or JavaScript evaluation, there are fewer opportunities for injection attacks.</source>
          <target state="translated">&lt;em&gt;セキュリティの&lt;/em&gt;向上AOTは、HTMLテンプレートとコンポーネントをJavaScriptファイルにコンパイルしてから、クライアントに提供されます。読み取るテンプレートがなく、危険なクライアント側のHTMLまたはJavaScriptの評価もないため、インジェクション攻撃の機会が少なくなります。</target>
        </trans-unit>
        <trans-unit id="8b254d7eae0875df8a924052f84d51239283fc6e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;By.css()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;By.css()&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="37d9e43de7040e876ad7becb439ffc5775e952ab" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;By.directive&lt;/em&gt; and injected directives</source>
          <target state="translated">&lt;em&gt;By.directive&lt;/em&gt;および注入されたディレクティブ</target>
        </trans-unit>
        <trans-unit id="8f002ea611283ef668bffcecd0471844c198f3c1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Carol&lt;/em&gt;, the third of &lt;em&gt;Alex&lt;/em&gt;'s child components, injects the parent into its &lt;code&gt;parent&lt;/code&gt; parameter, the same way you've done it before.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;&lt;em&gt;Alex&lt;/em&gt;の子コンポーネントの3番目である&lt;em&gt;Carol&lt;/em&gt;は、以前と同じように、親をその &lt;code&gt;parent&lt;/code&gt; パラメーターに注入します。</target>
        </trans-unit>
        <trans-unit id="e226bbb63dc1415f2def6fab6980a317268df241" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Cathy&lt;/em&gt; reports whether or not she has access to &lt;em&gt;Alex&lt;/em&gt; after injecting an &lt;code&gt;AlexComponent&lt;/code&gt; into her constructor:</source>
          <target state="translated">&lt;em&gt;Cathy&lt;/em&gt;は、 &lt;code&gt;AlexComponent&lt;/code&gt; をコンストラクターに注入した後、彼女が&lt;em&gt;Alex&lt;/em&gt;にアクセスできるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="abbe425cd713c08309d85f1d9939f122aaa91cba" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Class-only tests&lt;/em&gt; might be helpful, but attribute directives like this one tend to manipulate the DOM. Isolated unit tests don't touch the DOM and, therefore, do not inspire confidence in the directive's efficacy.</source>
          <target state="translated">&lt;em&gt;クラスのみのテスト&lt;/em&gt;は役立つかもしれませんが、このような属性ディレクティブはDOMを操作する傾向があります。分離された単体テストはDOMに触れないため、ディレクティブの有効性に自信を抱かせません。</target>
        </trans-unit>
        <trans-unit id="134f48c53692e6382be325a4eff6d850e910ab29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ComponentFixture&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ComponentFixture&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6f54b9b080dbd5d504a348454078d9baa805de72" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ComponentFixture&lt;/em&gt; methods</source>
          <target state="translated">&lt;em&gt;ComponentFixture&lt;/em&gt;メソッド</target>
        </trans-unit>
        <trans-unit id="3efddb57e098753e9067aa86308e683ac3626ddb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ComponentFixture&lt;/em&gt; properties</source>
          <target state="translated">&lt;em&gt;ComponentFixture&lt;/em&gt;プロパティ</target>
        </trans-unit>
        <trans-unit id="de017a8e6516b3d590b013b37613d739ef3c888c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Components&lt;/em&gt; are the fundamental building blocks of Angular applications. They display data on the screen, listen for user input, and take action based on that input.</source>
          <target state="translated">&lt;em&gt;コンポーネント&lt;/em&gt;は、Angularアプリケーションの基本的なビルディングブロックです。画面にデータを表示し、ユーザー入力をリッスンし、その入力に基づいてアクションを実行します。</target>
        </trans-unit>
        <trans-unit id="1c707590189069850763d681751a8403359488f9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Components&lt;/em&gt; are the most common of the three directives. You saw a component for the first time in the &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt; tutorial.</source>
          <target state="translated">&lt;em&gt;コンポーネント&lt;/em&gt;は、3つのディレクティブの中で最も一般的です。&lt;a href=&quot;start&quot;&gt;はじめにの&lt;/a&gt;チュートリアルでコンポーネントを初めて見ました。</target>
        </trans-unit>
        <trans-unit id="b9809df22bb86d44dcc30cadc2f4827c6fb092db" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Components&lt;/em&gt; define areas of responsibility in the user interface, or UI, that let you reuse sets of UI functionality. You've already built one with the product list component.</source>
          <target state="translated">&lt;em&gt;コンポーネント&lt;/em&gt;は、UI機能のセットを再利用できるようにするユーザーインターフェイス（UI）の責任領域を定義します。あなたはすでに製品リストコンポーネントでそれを構築しました。</target>
        </trans-unit>
        <trans-unit id="2ae0d4544774c0a2f1dfa97a5d2cb67dce0e3adc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Content projection&lt;/em&gt; is a way to import HTML content from outside the component and insert that content into the component's template in a designated spot.</source>
          <target state="translated">&lt;em&gt;コンテンツプロジェクション&lt;/em&gt;は、コンポーネントの外部からHTMLコンテンツをインポートし、そのコンテンツをコンポーネントのテンプレートの指定された場所に挿入する方法です。</target>
        </trans-unit>
        <trans-unit id="aa3156c9ac2a3416767f72e1d2f0afd30e707790" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;DebugElement&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;DebugElement&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5418052247686b94d38febd220c0d31af14bdd7e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Delete&lt;/em&gt; the &lt;code&gt;#spy&lt;/code&gt; template reference variable and the &lt;code&gt;TODO&lt;/code&gt; as they have served their purpose.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt; &lt;code&gt;#spy&lt;/code&gt; テンプレート参照変数と &lt;code&gt;TODO&lt;/code&gt; を、目的を果たしたものとして&lt;em&gt;削除&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="293e5b567b48da52c3818a727512bb6c44a52dbf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Delete&lt;/em&gt; the &lt;code&gt;{{diagnostic}}&lt;/code&gt; binding at the top as it has served its purpose.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;目的を果たしているため、上部の &lt;code&gt;{{diagnostic}}&lt;/code&gt; バインディングを&lt;em&gt;削除&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="c5bfa6bd57ff0a6e46527403f3ebe19b43423d10" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Dependency injection&lt;/em&gt; (DI) lets you keep your component classes lean and efficient. They don't fetch data from the server, validate user input, or log directly to the console; they delegate such tasks to services.</source>
          <target state="translated">&lt;em&gt;依存性注入&lt;/em&gt;（DI）により、コンポーネントクラスを無駄のない効率的な状態に保つことができます。サーバーからデータをフェッチしたり、ユーザー入力を検証したり、コンソールに直接ログインしたりしません。そのようなタスクをサービスに委任します。</target>
        </trans-unit>
        <trans-unit id="7f9f9236bc656bf34111b8eb4925a617356f7c24" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Detect template errors earlier&lt;/em&gt; The AOT compiler detects and reports template binding errors during the build step before users can see them.</source>
          <target state="translated">&lt;em&gt;テンプレートエラーの早期検出&lt;/em&gt; AOTコンパイラーは、ユーザーが見る前に、ビルドステップ中にテンプレートバインディングエラーを検出して報告します。</target>
        </trans-unit>
        <trans-unit id="d9fdcf19709a97c5a5df931e637d3f46d498cbb5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Directives&lt;/em&gt; must be declared in &lt;a href=&quot;ngmodules&quot;&gt;Angular Modules&lt;/a&gt; in the same manner as &lt;em&gt;components&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ディレクティブ&lt;/em&gt;は、&lt;em&gt;コンポーネント&lt;/em&gt;と同じ方法で&lt;a href=&quot;ngmodules&quot;&gt;Angularモジュール&lt;/a&gt;で宣言する必要があり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3ac132d9d56760a41ad9f01bbaddecf154aa2de4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Downgrading&lt;/em&gt;: The act of making an Angular asset, such as a component or service, available to the AngularJS part of the app.</source>
          <target state="translated">&lt;em&gt;ダウングレード&lt;/em&gt;：コンポーネントやサービスなどのAngularアセットをアプリのAngularJS部分で利用できるようにする行為。</target>
        </trans-unit>
        <trans-unit id="ef26ad95119492987aa4a25ddcfcdc595658c0ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Event binding&lt;/em&gt; lets your app respond to user input in the target environment by updating your application data.</source>
          <target state="translated">&lt;em&gt;イベントバインディングを&lt;/em&gt;使用すると、アプリケーションデータを更新することにより、ターゲット環境でのユーザー入力にアプリが応答できます。</target>
        </trans-unit>
        <trans-unit id="4df73741811265c6f85726aaa7b235c46d9b218a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Every&lt;/em&gt; class that injects this service gets the instance created by the second provider. Even classes declared within the first module get the instance created by the second provider.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;このサービスを注入する&lt;em&gt;すべての&lt;/em&gt;クラスは、2番目のプロバイダーによって作成されたインスタンスを取得します。最初のモジュール内で宣言されたクラスでさえ、2番目のプロバイダーによって作成されたインスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="344942a87d83448be8ec8fcdad5f5192c53e403a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Faster rendering&lt;/em&gt; With AOT, the browser downloads a pre-compiled version of the application. The browser loads executable code so it can render the application immediately, without waiting to compile the app first.</source>
          <target state="translated">&lt;em&gt;より高速なレンダリング&lt;/em&gt; AOTを使用すると、ブラウザーはコンパイル済みのバージョンのアプリケーションをダウンロードします。ブラウザは実行可能コードをロードするため、最初にアプリをコンパイルするのを待たずに、すぐにアプリケーションをレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="b5f53dca8d4eeba9ee2fd66373cd9a894e8e08d5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Faster&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Faster&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="490029b6b63de1a80b702bafe92b64c6faf14e34" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Fewer asynchronous requests&lt;/em&gt; The compiler &lt;em&gt;inlines&lt;/em&gt; external HTML templates and CSS style sheets within the application JavaScript, eliminating separate ajax requests for those source files.</source>
          <target state="translated">&lt;em&gt;非同期要求&lt;/em&gt;の&lt;em&gt;減少&lt;/em&gt;コンパイラーは、アプリケーションのJavaScript内に外部HTMLテンプレートとCSSスタイルシートを&lt;em&gt;インライン化し&lt;/em&gt;、それらのソースファイルに対する個別のajax要求を排除します。</target>
        </trans-unit>
        <trans-unit id="809a0e21fa71f28e44ce8f1e21ea156442081184" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Form validation&lt;/em&gt; is used to validate user input to ensure it's complete and correct. This section covers adding a single validator to a form control and displaying the overall form status. Form validation is covered more extensively in the &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt; guide.</source>
          <target state="translated">&lt;em&gt;フォーム検証&lt;/em&gt;を使用して、ユーザー入力を検証し、完全で正しいことを確認します。このセクションでは、単一のバリデーターをフォームコントロールに追加し、フォーム全体のステータスを表示します。フォーム検証については、&lt;a href=&quot;form-validation&quot;&gt;フォーム検証&lt;/a&gt;ガイドでさらに詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="97e541ccb4adaab49aa56641d3f79526cc23bf56" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Function calls are not supported. Consider replacing the function or lambda with a reference to an exported function.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;関数呼び出しはサポートされていません。関数またはラムダをエクスポートされた関数への参照に置き換えることを検討してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa69d0ab3e0bbad7dfdd0461277bb4b3d9e2f079" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Generation schematics&lt;/em&gt; can tell the &lt;code&gt;ng generate&lt;/code&gt; subcommands how to modify projects, add configurations and scripts, and scaffold artifacts that are defined in your library.</source>
          <target state="translated">&lt;em&gt;生成回路図&lt;/em&gt;は、 &lt;code&gt;ng generate&lt;/code&gt; サブコマンドに、プロジェクトを変更する方法、構成とスクリプトを追加する方法、およびライブラリで定義されている足場のアーティファクトを指示できます。</target>
        </trans-unit>
        <trans-unit id="f0bcccb17c6983207d92208a8e8c5ebabcf055d3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;HTTP Interception&lt;/em&gt; is a major feature of &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;. With interception, you declare &lt;em&gt;interceptors&lt;/em&gt; that inspect and transform HTTP requests from your application to the server. The same interceptors may also inspect and transform the server's responses on their way back to the application. Multiple interceptors form a &lt;em&gt;forward-and-backward&lt;/em&gt; chain of request/response handlers.</source>
          <target state="translated">&lt;em&gt;HTTPインターセプト&lt;/em&gt;は &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 主要な機能です。インターセプトでは、アプリケーションからサーバーへのHTTPリクエストを検査して変換する&lt;em&gt;インターセプター&lt;/em&gt;を宣言します。同じインターセプターは、アプリケーションに戻る途中でサーバーの応答を検査して変換することもできます。複数のインターセプターが、要求/応答ハンドラーの&lt;em&gt;順方向および逆方向の&lt;/em&gt;チェーンを形成します。</target>
        </trans-unit>
        <trans-unit id="865c2dba48dbf6477004a59bb7b007492a7bdec6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;HashLocationStrategy&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;HashLocationStrategy&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d9b8c9e9e9a54b4cb2686f78a88155590f1a53e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Hero&lt;/em&gt; feature routing requirements</source>
          <target state="translated">&lt;em&gt;ヒーロー&lt;/em&gt;機能のルーティング要件</target>
        </trans-unit>
        <trans-unit id="eb02de241182382aa8a99aeb9d6c66c40fb98b02" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;HttpClientTestingModule&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;HttpClientTestingModule&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7784c91c35375783709eab587c4a12206e89e38d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;HttpEvents&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;HttpEvents&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8a33d5bec7c22f6d4d276855e7b462f180c560b6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Inside&lt;/em&gt; the directive the property is known as &lt;code&gt;highlightColor&lt;/code&gt;. &lt;em&gt;Outside&lt;/em&gt; the directive, where you bind to it, it's known as &lt;code&gt;appHighlight&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;ディレクティブ&lt;em&gt;内で&lt;/em&gt;は、プロパティは &lt;code&gt;highlightColor&lt;/code&gt; として知られています。ディレクティブの&lt;em&gt;外で&lt;/em&gt;、バインドする場所は &lt;code&gt;appHighlight&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="a89f541f450ff068747ad627f8271a7400013753" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Internationalization&lt;/em&gt; is the process of designing and preparing your app to be usable in different languages. &lt;em&gt;Localization&lt;/em&gt; is the process of translating your internationalized app into specific languages for particular locales.</source>
          <target state="translated">&lt;em&gt;国際化&lt;/em&gt;とは、さまざまな言語で使用できるようにアプリを設計および準備するプロセスです。&lt;em&gt;ローカリゼーション&lt;/em&gt;は、国際化されたアプリを特定のロケールの特定の言語に翻訳するプロセスです。</target>
        </trans-unit>
        <trans-unit id="b14d7c61a242b417dd29f1107aaa6f524ac37812" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Marketing&lt;/em&gt; pages are similar to guide pages. They're located in the &lt;code&gt;content/marketing&lt;/code&gt; directory. While they can be markdown files, they may be static HTML pages or dynamic HTML pages that render with JSON data.</source>
          <target state="translated">&lt;em&gt;マーケティング&lt;/em&gt;ページはガイドページに似ています。それらは &lt;code&gt;content/marketing&lt;/code&gt; ディレクトリにあります。それらはマークダウンファイルの場合もありますが、JSONデータでレンダリングされる静的HTMLページまたは動的HTMLページの場合があります。</target>
        </trans-unit>
        <trans-unit id="ac572721de16ca6ebd38f43b1610d4c8521e75bb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Matrix URL&lt;/em&gt; notation is an idea first introduced in a &lt;a href=&quot;http://www.w3.org/DesignIssues/MatrixURIs.html&quot;&gt;1996 proposal&lt;/a&gt; by the founder of the web, Tim Berners-Lee.</source>
          <target state="translated">&lt;em&gt;マトリックスURL&lt;/em&gt;表記は、&lt;a href=&quot;http://www.w3.org/DesignIssues/MatrixURIs.html&quot;&gt;1996年の提案で&lt;/a&gt; Webの創設者であるTim Berners-Leeによって最初に導入されたアイデアです。</target>
        </trans-unit>
        <trans-unit id="05ec3bf040660715ee63825a49a13a5b4debb49f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Metadata referenced a function that wasn't exported.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;メタデータが、エクスポートされなかった関数を参照しました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="662378892e17e57af8203c4dfa385b61c78298ad" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Multicasting&lt;/em&gt; is the practice of broadcasting to a list of multiple subscribers in a single execution. With a multicasting observable, you don't register multiple listeners on the document, but instead re-use the first listener and send values out to each subscriber.</source>
          <target state="translated">&lt;em&gt;マルチキャスト&lt;/em&gt;は、1回の実行で複数のサブスクライバーのリストにブロードキャストする方法です。マルチキャストオブザーバブルでは、ドキュメントに複数のリスナーを登録するのではなく、最初のリスナーを再利用して値を各サブスクライバーに送信します。</target>
        </trans-unit>
        <trans-unit id="8acb22b16561eb41938a5ace56c8fdf702ed4dc6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NO_ERRORS_SCHEMA&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;NO_ERRORS_SCHEMA&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="078b9efa11c62c27baf54d72fc2bc6d86c649b97" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note that the HTML image element does not have a closing tag.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;HTML画像要素には終了タグがないことに注意してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b322c6d12f4e067940d10220eef7f17d227393a4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: When using absolute paths, the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; file location must begin with &lt;code&gt;src/app&lt;/code&gt; in order to resolve correctly. For custom &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping&quot;&gt;path mapping with absolute paths&lt;/a&gt;, the &lt;code&gt;baseUrl&lt;/code&gt; and &lt;code&gt;paths&lt;/code&gt; properties in the project &lt;code&gt;tsconfig.json&lt;/code&gt; must be configured.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：絶対パスを使用する場合、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ファイルの場所は、正しく解決するために &lt;code&gt;src/app&lt;/code&gt; で始まる必要があります。カスタムのために&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping&quot;&gt;絶対パスとパス・マッピング&lt;/a&gt;、 &lt;code&gt;baseUrl&lt;/code&gt; に及び &lt;code&gt;paths&lt;/code&gt; プロジェクトのプロパティ &lt;code&gt;tsconfig.json&lt;/code&gt; が構成されなければなりません。</target>
        </trans-unit>
        <trans-unit id="8f5a8c84807804c1921f9174da4957c65cc014f6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;OR&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;OR&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="faccb051fdfb359f41d7d03c3654bd3b199eb902" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;テンプレートコンパイラはこの変数の値を必要とするため、参照できるのは初期化された変数と定数だけです。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="248ecacc61c3c54dd15a3259ad87f0fa52dd2e4b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;ParamMap&lt;/em&gt; API</source>
          <target state="translated">&lt;em&gt;ParamMap&lt;/em&gt; API</target>
        </trans-unit>
        <trans-unit id="d119bbf8791500fe9fb68ed1d9455efad7e60af0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Part of the &lt;a href=&quot;api?query=upgrade%2Fstatic&quot;&gt;upgrade/static&lt;/a&gt; library for hybrid upgrade apps that support AoT compilation.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;AoTコンパイルをサポートするハイブリッドアップグレードアプリの&lt;a href=&quot;api?query=upgrade%2Fstatic&quot;&gt;アップグレード/静的&lt;/a&gt;ライブラリの一部。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed434cf1eaa64e7afaf4a7fbc6df8dcb6e622fb5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Part of the &lt;a href=&quot;api?query=upgrade%2Fstatic&quot;&gt;upgrade/static&lt;/a&gt; library for hybrid upgrade apps that support AoT compilation&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;AoTコンパイルをサポートするハイブリッドアップグレードアプリの&lt;a href=&quot;api?query=upgrade%2Fstatic&quot;&gt;アップグレード/静的&lt;/a&gt;ライブラリの一部&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8f078ca873407286d10e95638f7a70a2c1346a2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Part of the &lt;a href=&quot;api?query=upgrade/static&quot;&gt;upgrade/static&lt;/a&gt; library for hybrid upgrade apps that support AoT compilation.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;AoTコンパイルをサポートするハイブリッドアップグレードアプリの&lt;a href=&quot;api?query=upgrade/static&quot;&gt;アップグレード/静的&lt;/a&gt;ライブラリの一部。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7829bb8e064b9f0128518e96b534c7c073468cc1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Part of the &lt;a href=&quot;api?query=upgrade/static&quot;&gt;upgrade/static&lt;/a&gt; library for hybrid upgrade apps that support AoT compilation&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;AoTコンパイルをサポートするハイブリッドアップグレードアプリの&lt;a href=&quot;api?query=upgrade/static&quot;&gt;アップグレード/静的&lt;/a&gt;ライブラリの一部&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1f9bdedba9183d2622b7e30ce801b8ec8b46dd6f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Pipe&lt;/em&gt; it onto the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method result just before the error handler.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;エラーハンドラーの直前の &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドの結果に&lt;em&gt;パイプ&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="4f09c10ac3025c9f539dab2aa07fc5df8bf2e0e7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Preloading&lt;/em&gt; is something in between. Consider the &lt;em&gt;Crisis Center&lt;/em&gt;. It isn't the first view that a user sees. By default, the &lt;em&gt;Heroes&lt;/em&gt; are the first view. For the smallest initial payload and fastest launch time, you should eagerly load the &lt;code&gt;AppModule&lt;/code&gt; and the &lt;code&gt;HeroesModule&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;プリロード&lt;/em&gt;はその中間にあります。&lt;em&gt;危機管理センター&lt;/em&gt;について考えてみましょう。これは、ユーザーに表示される最初のビューではありません。デフォルトでは、&lt;em&gt;ヒーロー&lt;/em&gt;が最初のビューです。最小の初期ペイロードと最速の起動時間について、あなたは熱心にロードする必要があります &lt;code&gt;AppModule&lt;/code&gt; と &lt;code&gt;HeroesModule&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="47d7289b2eda862a91f5c079397efbfee9c6232e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Property binding&lt;/em&gt; lets you interpolate values that are computed from your application data into the HTML.</source>
          <target state="translated">&lt;em&gt;プロパティバインディングを&lt;/em&gt;使用すると、アプリケーションデータから計算された値をHTMLに補間できます。</target>
        </trans-unit>
        <trans-unit id="08a982fce1c31b173e7e80a34c3693c045f58d46" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Query parameters&lt;/em&gt; and &lt;em&gt;fragments&lt;/em&gt; are also available through the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service. Just like &lt;em&gt;route parameters&lt;/em&gt;, the query parameters and fragments are provided as an &lt;code&gt;Observable&lt;/code&gt;. The updated &lt;em&gt;Crisis Admin&lt;/em&gt; component feeds the &lt;code&gt;Observable&lt;/code&gt; directly into the template using the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;クエリパラメータ&lt;/em&gt;と&lt;em&gt;フラグメント&lt;/em&gt;は、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; サービスからも利用できます。&lt;em&gt;ルートパラメータ&lt;/em&gt;と同様に、クエリパラメータとフラグメントは &lt;code&gt;Observable&lt;/code&gt; として提供されます。更新された&lt;em&gt;Crisis Admin&lt;/em&gt;コンポーネントは、 &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;Observable&lt;/code&gt; をテンプレートに直接フィードします。</target>
        </trans-unit>
        <trans-unit id="570506f6eb096029e4a2225fb5f6568207e54d4c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Reactive forms&lt;/em&gt; provide a model-driven approach to handling form inputs whose values change over time. This guide shows you how to create and update a simple form control, progress to using multiple controls in a group, validate form values, and implement more advanced forms.</source>
          <target state="translated">&lt;em&gt;リアクティブフォーム&lt;/em&gt;は、値が時間とともに変化するフォーム入力を処理するためのモデル駆動型アプローチを提供します。このガイドでは、簡単なフォームコントロールを作成および更新する方法、グループで複数のコントロールを使用する方法、フォームの値を検証する方法、さらに高度なフォームを実装する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="a9dd056dfe8ff5bc4cab7c0cf27bfb6d14059868" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Reactive forms&lt;/em&gt; use existing instances of a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to build a form model. This form model is synced with form input elements through directives to track and communicate changes back to the form model. Changes to the value and status of the controls are provided as observables.</source>
          <target state="translated">&lt;em&gt;反応型フォーム&lt;/em&gt;は、 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の既存のインスタンスを使用してフォームモデルを構築します。このフォームモデルは、ディレクティブを介してフォーム入力要素と同期され、変更を追跡してフォームモデルに伝達します。コントロールの値とステータスの変更は、オブザーバブルとして提供されます。</target>
        </trans-unit>
        <trans-unit id="f4cf523dc45094b6ce89bea3afbfa3fe3c009483" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Reference to a local (non-exported) symbol 'symbol name'. Consider exporting the symbol.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ローカル（エクスポートされていない）シンボル「シンボル名」への参照。シンボルのエクスポートを検討してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="363a8b5871cab50ac9e09344a1b37ed1baaa4a90" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Reference to a non-exported class &lt;class&gt;. Consider exporting the class.&lt;/class&gt;&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;エクスポートされていないクラスへの参照 &lt;class&gt;。クラスのエクスポートを検討してください。&lt;/class&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="54a5ef37e59e0bd95980d6155fb4055ddc3fc182" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;エクスポートされた非構造化変数または定数の参照は、テンプレートコンパイラではサポートされていません。これを単純化して、破壊を回避することを検討してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3474ac0c6a4b87662220f5fe19b7a966b7d4071c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Sanitization&lt;/em&gt; is the inspection of an untrusted value, turning it into a value that's safe to insert into the DOM. In many cases, sanitization doesn't change a value at all. Sanitization depends on context: a value that's harmless in CSS is potentially dangerous in a URL.</source>
          <target state="translated">&lt;em&gt;サニタイズ&lt;/em&gt;とは、信頼できない値を検査して、DOMに安全に挿入できる値に変換することです。多くの場合、サニタイズは値をまったく変更しません。サニタイズはコンテキストに依存します。CSSで無害な値は、URLで潜在的に危険です。</target>
        </trans-unit>
        <trans-unit id="a9a167149261dfc1b8c0b0db666613f379842e1f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Service&lt;/em&gt; is a broad category encompassing any value, function, or feature that an app needs. A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.</source>
          <target state="translated">&lt;em&gt;サービス&lt;/em&gt;は、アプリが必要とするあらゆる価値、機能、または機能を含む幅広いカテゴリです。サービスは通常、目的が明確に定義された狭いクラスです。それは何か特別なことをし、うまくやるべきです。</target>
        </trans-unit>
        <trans-unit id="01d66ee533ca9b312bf287e7f6d0aa2580c75f3e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Smaller Angular framework download size&lt;/em&gt; There's no need to download the Angular compiler if the app is already compiled. The compiler is roughly half of Angular itself, so omitting it dramatically reduces the application payload.</source>
          <target state="translated">&lt;em&gt;小さいAngularフレームワークのダウンロードサイズ&lt;/em&gt;アプリが既にコンパイルされている場合は、Angularコンパイラをダウンロードする必要はありません。コンパイラーはAngular自体の約半分なので、省略するとアプリケーションのペイロードが劇的に減少します。</target>
        </trans-unit>
        <trans-unit id="b95af85a96c738752b3760fc673a646d763d9239" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Snapshot&lt;/em&gt;: the &lt;em&gt;no-observable&lt;/em&gt; alternative</source>
          <target state="translated">&lt;em&gt;スナップショット&lt;/em&gt;：&lt;em&gt;観測できない&lt;/em&gt;代替手段</target>
        </trans-unit>
        <trans-unit id="0268e6c92692f198865ab89c7047504aabd68aec" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Structural Directives&lt;/em&gt; change the structure of the view. Two examples are &lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt; and &lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;. Learn about them in the &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt; guide.</source>
          <target state="translated">&lt;em&gt;構造ディレクティブ&lt;/em&gt;は、ビューの構造を変更します。2つの例は&lt;a href=&quot;template-syntax#ngFor&quot;&gt;NgFor&lt;/a&gt;と&lt;a href=&quot;template-syntax#ngIf&quot;&gt;NgIf&lt;/a&gt;です。それらについては、&lt;a href=&quot;structural-directives&quot;&gt;構造指令&lt;/a&gt;ガイドで確認してください。</target>
        </trans-unit>
        <trans-unit id="860d90e628af7e4ee3c5238f65eb253f93b13449" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Structural directives&lt;/em&gt; alter layout by adding, removing, and replacing elements in the DOM. The example template uses two built-in structural directives to add application logic to how the view is rendered.</source>
          <target state="translated">&lt;em&gt;構造ディレクティブ&lt;/em&gt;は、DOM内の要素を追加、削除、および置換することによってレイアウトを変更します。サンプルテンプレートでは、2つの組み込み構造ディレクティブを使用して、ビューのレンダリング方法にアプリケーションロジックを追加しています。</target>
        </trans-unit>
        <trans-unit id="e6d7fac97f1d09461057cd9221fe5c097dfe4005" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tagged template expressions are not supported in metadata.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;タグ付きテンプレート式はメタデータではサポートされていません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3e9e9a8a1a5e8738a27de3f709f1cb82d9a71276" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Take each item in the &lt;code&gt;items&lt;/code&gt; array, store it in the local &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; looping variable, and make it available to the templated HTML for each iteration.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;items&lt;/code&gt; 配列の各アイテムを取得し、ローカル &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; ループ変数に格納して、反復ごとにテンプレート化されたHTMLで利用できるようにします。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2fa06875412d7dac6a0e90087abc139aed50c586" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Template-driven forms&lt;/em&gt; rely on directives such as &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; create the form model for you, so any changes to the form are communicated through the template.</source>
          <target state="translated">&lt;em&gt;テンプレート駆動フォームは&lt;/em&gt;、 &lt;code&gt;&lt;a href=&quot;forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; などのディレクティブに依存してフォームモデルを作成するため、フォームへの変更はすべてテンプレートを介して伝達されます。</target>
        </trans-unit>
        <trans-unit id="aa22f680299e24b285d35b1c262a85af06ca648c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TestBed.get()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;TestBed.get()&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d63550b290d47aee46d1a6789f742ed781097346" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TestBed&lt;/em&gt; class summary</source>
          <target state="translated">&lt;em&gt;TestBed&lt;/em&gt;クラスの概要</target>
        </trans-unit>
        <trans-unit id="99ae50175202f5d7931a74c80c706a0b6a680586" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;That test fails&lt;/em&gt; with the message:</source>
          <target state="translated">&lt;em&gt;そのテストは次&lt;/em&gt;のメッセージで&lt;em&gt;失敗&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="aafa207c4f833ca254af9566917f30b12ba45347" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The compiler encountered a type and can't determine which module exports that type.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;コンパイラは型を検出しましたが、その型をエクスポートするモジュールを判別できません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d74c294fc302d4f77d3fa27731cb93807343274d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The compiler encountered an expression it didn't understand while evaluating Angular metadata.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;コンパイラは、Angularメタデータの評価中に、理解できない式に遭遇しました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="06a6c953c9867e606d8f4cdd281aafb9321f1848" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The compiler expected a name in an expression it was evaluating.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;コンパイラは、評価している式に名前を期待していました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9b51f341107d1b5a4533522e0fb3960b40794662" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The compiler expected a reference to a symbol at the location specified in the error message.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;コンパイラは、エラーメッセージで指定された場所にあるシンボルへの参照を予期していました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f753a566cadbf0a54e91f0128874b818d733ee7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This&lt;/em&gt; &quot;Authors Doc Style Guide&quot; has its own sample application, located in the &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; folder.</source>
          <target state="translated">&lt;em&gt;この&lt;/em&gt;「Authors Doc Style Guide」には、 &lt;code&gt;content/examples/docs-style-guide&lt;/code&gt; フォルダーに独自のサンプルアプリケーションがあります。</target>
        </trans-unit>
        <trans-unit id="169b0665e7d945802943f3d9a25cd003702d0aef" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This&lt;/em&gt; application won't re-use the &lt;code&gt;HeroDetailComponent&lt;/code&gt;. The user always returns to the hero list to select another hero to view. There's no way to navigate from one hero detail to another hero detail without visiting the list component in between. Therefore, the router creates a new &lt;code&gt;HeroDetailComponent&lt;/code&gt; instance every time.</source>
          <target state="translated">&lt;em&gt;この&lt;/em&gt;アプリケーションは、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; を再利用しません。ユーザーは常にヒーローリストに戻って、表示する別のヒーローを選択します。間にあるリストコンポーネントにアクセスせずに、あるヒーローの詳細から別のヒーローの詳細に移動する方法はありません。したがって、ルーターは毎回新しい &lt;code&gt;HeroDetailComponent&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="a52b17bea7da0ecbd0aed17cfd3e9e73f14205c9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tutorial&lt;/em&gt; pages are exactly like guide pages. The only difference is that they reside in &lt;code&gt;content/tutorial&lt;/code&gt; instead of &lt;code&gt;content/guide&lt;/code&gt; and have URLs like &lt;code&gt;tutorial/{page-name}&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;チュートリアル&lt;/em&gt;ページはガイドページとまったく同じです。唯一の違いは、 &lt;code&gt;content/guide&lt;/code&gt; ではなく &lt;code&gt;content/tutorial&lt;/code&gt; にあり、 &lt;code&gt;tutorial/{page-name}&lt;/code&gt; のようなURLを持っていることです。</target>
        </trans-unit>
        <trans-unit id="120d3eb4e7d3485b193beafc9bc8c5479efb775c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Upgrading&lt;/em&gt;: The act of making an AngularJS asset, such as a component or service, available to the Angular part of the app.</source>
          <target state="translated">&lt;em&gt;アップグレード&lt;/em&gt;：コンポーネントやサービスなどのAngularJSアセットをアプリのAngular部分で利用できるようにする行為。</target>
        </trans-unit>
        <trans-unit id="78ebf0743e202175228a05653cfcaa1364ed5681" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;You're not using Angular yet&lt;/em&gt;. There are no bindings or extra directives, just layout.</source>
          <target state="translated">&lt;em&gt;Angularはまだ使用していません&lt;/em&gt;。バインディングや追加のディレクティブはなく、レイアウトのみです。</target>
        </trans-unit>
        <trans-unit id="fb0f5aee95da7ac03008b89165632e36842077e5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;You&lt;/em&gt; didn't declare the &lt;code&gt;HeroesComponent&lt;/code&gt;. So why did the application work?</source>
          <target state="translated">&lt;em&gt;あなたは&lt;/em&gt;宣言していない &lt;code&gt;HeroesComponent&lt;/code&gt; を。では、なぜアプリケーションは機能したのでしょうか。</target>
        </trans-unit>
        <trans-unit id="9e1edb0454e6b16aaea5552f370f28e047e73304" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;beforeEach()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;beforeEach()&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="216baa2afa5861f0b74b106d296bb98d73a6224a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;click()&lt;/em&gt; helper</source>
          <target state="translated">&lt;em&gt;click（）&lt;/em&gt;ヘルパー</target>
        </trans-unit>
        <trans-unit id="29f4c4139b6200ca221b9124d74016064b434368" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;compileComponents()&lt;/em&gt; is async</source>
          <target state="translated">&lt;em&gt;compileComponents（）&lt;/em&gt;は非同期です</target>
        </trans-unit>
        <trans-unit id="38d0445e86fbdb4692f30a3525335a99ab150ab1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;compileComponents()&lt;/em&gt; is harmless</source>
          <target state="translated">&lt;em&gt;compileComponents（）&lt;/em&gt;は無害です</target>
        </trans-unit>
        <trans-unit id="5b97cfbffa462acf131113c8cf7f991beab51ae2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;configuration&lt;/em&gt;: (optional) The name of a specific configuration override for the given target, as defined in the &lt;code&gt;angular.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;em&gt;configuration&lt;/em&gt;：（オプション） &lt;code&gt;angular.json&lt;/code&gt; ファイルで定義されている、指定されたターゲットの特定の構成オーバーライドの名前。</target>
        </trans-unit>
        <trans-unit id="5e41cc8d42c7e5341dc3d4641bcf50bb17c52be9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;createComponent()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;createComponent()&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c25ee19b8f911b5f3b7054199f7c41e37064b40d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;createComponent()&lt;/em&gt; does not bind data</source>
          <target state="translated">&lt;em&gt;createComponent（）&lt;/em&gt;はデータをバインドしません</target>
        </trans-unit>
        <trans-unit id="2c831ae3a2e9ac2fdd8af0d5a200126c764cb8b7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;detectChanges()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;detectChanges()&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="176db9e47235cfee2230dfad8303d5ecd3d18009" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;id&lt;/em&gt; : A unique id for the schema in the collection.</source>
          <target state="translated">&lt;em&gt;id&lt;/em&gt;：コレクション内のスキーマの一意のID。</target>
        </trans-unit>
        <trans-unit id="f43459df2ceadb1799484a2e69ce7e8e5ae15971" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;name&lt;/em&gt; : The name you want to provide for the created service.</source>
          <target state="translated">&lt;em&gt;name&lt;/em&gt;：作成したサービスに提供する名前。</target>
        </trans-unit>
        <trans-unit id="8ce60f544f10337bbe383f8424ba1122a7a0eb18" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;nativeElement&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;nativeElement&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8b0ff0cab5a64ca20ccaba22d3ff07a237533b7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;path&lt;/em&gt; : Overrides the path provided to the schematic. The default path value is based on the current working directory.</source>
          <target state="translated">&lt;em&gt;path&lt;/em&gt;：回路図に提供されたパスを上書きします。デフォルトのパス値は、現在の作業ディレクトリに基づいています。</target>
        </trans-unit>
        <trans-unit id="e1ccfdc2202382a82e98a4ef2a1654e3c1250168" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;project&lt;/em&gt; : Provides a specific project to run the schematic on. In the schematic, you can provide a default if the option is not provided by the user.</source>
          <target state="translated">&lt;em&gt;project&lt;/em&gt;：回路図を実行する特定のプロジェクトを提供します。回路図では、オプションがユーザーによって提供されない場合、デフォルトを提供できます。</target>
        </trans-unit>
        <trans-unit id="c3b7183021d695d98a340ed6748ebe5b2745b308" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;project&lt;/em&gt;: The name of the Angular CLI project that the target is associated with.</source>
          <target state="translated">&lt;em&gt;project&lt;/em&gt;：ターゲットが関連付けられているAngular CLIプロジェクトの名前。</target>
        </trans-unit>
        <trans-unit id="eefad31c91f082e68f03dc8d54e68fb59e0e69de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;properties&lt;/em&gt; : An object that defines the available options for the schematic.</source>
          <target state="translated">&lt;em&gt;properties&lt;/em&gt;：回路図で使用可能なオプションを定義するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3cf89cfae3daadcbb03fbf20b5b3d2eb64fea707" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;switchMap()&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;switchMap()&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5926491b90817001da9cf5e0c0b45b6795826164" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;target&lt;/em&gt;: A named builder configuration from the &lt;code&gt;architect&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;em&gt;target&lt;/em&gt;： &lt;code&gt;angular.json&lt;/code&gt; ファイルの &lt;code&gt;architect&lt;/code&gt; セクションからの名前付きビルダー構成。</target>
        </trans-unit>
        <trans-unit id="7dfe51231fa708d041bd5816c31f6f1edf96ce2c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;title&lt;/em&gt; : A human-readable description of the schema.</source>
          <target state="translated">&lt;em&gt;title&lt;/em&gt;：人間が読めるスキーマの説明。</target>
        </trans-unit>
        <trans-unit id="d2b3b753924f34bbe7e7a2f70ea409fc426c08e7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;triggerEventHandler&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;triggerEventHandler&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1cc6d5af73f24596b71dcfe3a6d5922d82367eaf" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;type&lt;/em&gt; : A descriptor for the type provided by the properties.</source>
          <target state="translated">&lt;em&gt;type&lt;/em&gt;：プロパティによって提供されるタイプの記述子。</target>
        </trans-unit>
        <trans-unit id="4acdbdb0f77f06d5d31851a95d4a8465f486103c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;whenStable&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;whenStable&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1a376b24abe09164adfc3459c6f6824606003831" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;__index&quot;&gt; __index() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;__index&quot;&gt; __index() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="472f25e8b61e1f0fb6ae19b3f0313fc07e7869b2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;absurl&quot;&gt; absUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;absurl&quot;&gt; absUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c6aadffcee9681cb6a59a777203986c3caa33f1a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;activateupdate&quot;&gt; activateUpdate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;activateupdate&quot;&gt; activateUpdate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a7d246374d7c6a38958c8aead727a6a9aba307a4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;activatewith&quot;&gt; activateWith() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;activatewith&quot;&gt; activateWith() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d168aa593189225e8c1ca52faf34f1955ff3c8db" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addcase&quot;&gt; addCase() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addcase&quot;&gt; addCase() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="149b6f630403daf93a6358db2c192f740e639e6f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addclass&quot;&gt; addClass() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addclass&quot;&gt; addClass() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="70f8fc2f124229e8c1caed99ae1e79742a50808e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addcontrol&quot;&gt; addControl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addcontrol&quot;&gt; addControl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5d0a8498c0bddf15a3d2882d3c51718a49891375" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addeventlistener&quot;&gt; addEventListener() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addeventlistener&quot;&gt; addEventListener() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8b8b10982eff496503b70ee4d1620a6f946f8276" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addformarray&quot;&gt; addFormArray() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addformarray&quot;&gt; addFormArray() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="11adbc280a38e1ba2913c323b8423a76209d02d7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addformgroup&quot;&gt; addFormGroup() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addformgroup&quot;&gt; addFormGroup() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="558125c73b0f62ca5ac74949d03b9ec296390166" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addglobaleventlistener&quot;&gt; addGlobalEventListener() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addglobaleventlistener&quot;&gt; addGlobalEventListener() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="45b8244ccdf4a316776faea20a170f7a986e5efd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addtag&quot;&gt; addTag() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addtag&quot;&gt; addTag() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ca316d275231498c6834ee158b2f86e57ccc2d8e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addtags&quot;&gt; addTags() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addtags&quot;&gt; addTags() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9836ca86a31107893484abd0d6b0cfd1ca331d5d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;addtowindow&quot;&gt; addToWindow() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;addtowindow&quot;&gt; addToWindow() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="97642765558ce7d57067803aeb45d408baf71981" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;all&quot;&gt; all() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;all&quot;&gt; all() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d5b5677eeedabb7fa7652790297f838173cc3b53" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;animate&quot;&gt; animate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;animate&quot;&gt; animate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="86015f9d712dfcb38de5b69ef5312680e362ab11" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;animations&quot;&gt;animations&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;animations&quot;&gt;animations&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="7cbe6ba87936cbb76ce45c044c1c99257c04c5b3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;append&quot;&gt; append() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;append&quot;&gt; append() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ce81aa5ffed279a8fd200f8737526facf6545b27" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;appendchild&quot;&gt; appendChild() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;appendchild&quot;&gt; appendChild() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c272c03d635fd5d1af736b37e10ceb61c3234d67" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;areequal&quot;&gt; areEqual() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;areequal&quot;&gt; areEqual() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8d73054eb910c340c6e5ad0ea8f28cd98365bf39" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;args&quot;&gt;args&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;args&quot;&gt;args&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="401dc350f6c470748a4ad51f5c288288375525ac" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;array&quot;&gt; array() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;array&quot;&gt; array() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="24c0412d42bf9ad22ecc3b9888b87866ee0295e7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;assertinangularzone&quot;&gt; assertInAngularZone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;assertinangularzone&quot;&gt; assertInAngularZone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d5bdcfef1c4b7f462914cce2be7f2b0cf60c9d83" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;assertnotinangularzone&quot;&gt; assertNotInAngularZone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;assertnotinangularzone&quot;&gt; assertNotInAngularZone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ab6df67da9fef6d6084a4443496ff06338796edb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;at&quot;&gt; at() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;at&quot;&gt; at() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9031418484bf94738179be0dafbb755b4558fed6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;attach&quot;&gt; attach() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;attach&quot;&gt; attach() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="115a031de7234e1d4e23e5858bd956b76a47c257" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;attachtozone&quot;&gt; attachToZone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;attachtozone&quot;&gt; attachToZone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="38f86d8972990e7d9a6ae415eeb22a302eca49fb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;attachview&quot;&gt; attachView() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;attachview&quot;&gt; attachView() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="178a3d94206e76c7928fa0a38dbc6a5b45aa10a7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;attachviewafter&quot;&gt; attachViewAfter() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;attachviewafter&quot;&gt; attachViewAfter() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a7982e7b6f6427cd20bbc53a8e22c699217a272c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;attributechangedcallback&quot;&gt; attributeChangedCallback() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;attributechangedcallback&quot;&gt; attributeChangedCallback() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1457e51c9b2ef737949c0fc346cca75506f3989f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;attributename&quot;&gt;attributeName&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;attributename&quot;&gt;attributeName&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="32196c9e8d74a04867f5e1bec29b18768714eb15" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;autodetectchanges&quot;&gt; autoDetectChanges() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;autodetectchanges&quot;&gt; autoDetectChanges() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c585ca2fc0957bbb9c67bdfcee7667595a68e3c7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;back&quot;&gt; back() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;back&quot;&gt; back() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a0cdd11e48402f55c265a2a798898a3b6ec32095" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;beforedestroy&quot;&gt; beforeDestroy() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;beforedestroy&quot;&gt; beforeDestroy() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="09aee1e9a262575fff0a723857332a719aa4dc98" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;begin&quot;&gt; begin() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;begin&quot;&gt; begin() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bca76abedc7a8c31372c63544038679b32af1e1b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bindingpropertyname&quot;&gt;bindingPropertyName&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bindingpropertyname&quot;&gt;bindingPropertyName&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="78ff94c12fc2437fdc45f600e7ecc40c590fac49" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bootstrap&quot;&gt; bootstrap() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bootstrap&quot;&gt; bootstrap() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fb9d73592f471f8fb587b095a74f37ee60233c4c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bootstrap&quot;&gt;bootstrap&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bootstrap&quot;&gt;bootstrap&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="56b8139f15b2068b0f70e0e1a5b6768c0d7479f6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bootstrapmodule&quot;&gt; bootstrapModule() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bootstrapmodule&quot;&gt; bootstrapModule() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="28e8eba2244df3e04893daad1c357a142bd1e11d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bootstrapmodulefactory&quot;&gt; bootstrapModuleFactory() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bootstrapmodulefactory&quot;&gt; bootstrapModuleFactory() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c0375012a1a28ddc92e550f7b67a2ed524eb5b23" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;build&quot;&gt; build() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;build&quot;&gt; build() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b256002ffce0f6ef641cc5cf2558a7e2c9f49e5c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;buildhammer&quot;&gt; buildHammer() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;buildhammer&quot;&gt; buildHammer() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="593a255032ee744481f67cd3bfe3d10f9ce25db2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bypasssecuritytrusthtml&quot;&gt; bypassSecurityTrustHtml() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bypasssecuritytrusthtml&quot;&gt; bypassSecurityTrustHtml() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9f89191df9937b1d40eeac5ccf8c7b52af101824" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bypasssecuritytrustresourceurl&quot;&gt; bypassSecurityTrustResourceUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bypasssecuritytrustresourceurl&quot;&gt; bypassSecurityTrustResourceUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d82d8bc640dfdc9bc452097ad27bc5a0ee2dfcea" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bypasssecuritytrustscript&quot;&gt; bypassSecurityTrustScript() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bypasssecuritytrustscript&quot;&gt; bypassSecurityTrustScript() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d01a5b2a0307fcde2a726a4f5d4d21f4e4d6b6b5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bypasssecuritytruststyle&quot;&gt; bypassSecurityTrustStyle() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bypasssecuritytruststyle&quot;&gt; bypassSecurityTrustStyle() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="85c46b50cd72c8c285e5861d38e4b3b41448afbd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;bypasssecuritytrusturl&quot;&gt; bypassSecurityTrustUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;bypasssecuritytrusturl&quot;&gt; bypassSecurityTrustUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f57cbf372242d92f3ed0a804c1462698d0b81411" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;call-signature&quot;&gt; &lt;i&gt;call signature&lt;/i&gt; &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;call-signature&quot;&gt; &lt;i&gt;コールサイン&lt;/i&gt; &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1478e955f55e09189942355b632af1c406895628" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;canactivate-1&quot;&gt; canActivate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;canactivate-1&quot;&gt; canActivate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3bc29df808bdcca21a775c85034f834f77881e3a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;canactivatechild-1&quot;&gt; canActivateChild() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;canactivatechild-1&quot;&gt; canActivateChild() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="558483015bd84f70651b1bc8d7a82427148957a5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;candeactivate-1&quot;&gt; canDeactivate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;candeactivate-1&quot;&gt; canDeactivate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3e93bb6d9bb3908d8dbcfbac8b6b21cc32ed1321" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;canload-1&quot;&gt; canLoad() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;canload-1&quot;&gt; canLoad() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0f4eaac87113a6a03b4f492fed302a741277f596" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;changedetection&quot;&gt;changeDetection&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;changedetection&quot;&gt;changeDetection&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9dc1ee88787439d5b00c158e54f5e927ad2ea65a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;check&quot;&gt; check() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;check&quot;&gt; check() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="34c5819bfc59a01bb381f34a5c1fbad35cd3f722" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;checkforupdate&quot;&gt; checkForUpdate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;checkforupdate&quot;&gt; checkForUpdate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5b81d063c11cfc45e6eae5161ec321ab4560e3e8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;checknochanges&quot;&gt; checkNoChanges() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;checknochanges&quot;&gt; checkNoChanges() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="eb9cd0e1544cc2c4d9ca2318cc78b31a5c3a2c65" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;clear&quot;&gt; clear() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;clear&quot;&gt; clear() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bd920fcab28bea525eeb5ba0aba7df8fc067cbfc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;clearasyncvalidators&quot;&gt; clearAsyncValidators() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;clearasyncvalidators&quot;&gt; clearAsyncValidators() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0e027194bccc3056bb7450e1a0a008ea0ecc3d4c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;clearcache&quot;&gt; clearCache() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;clearcache&quot;&gt; clearCache() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c587244ae4a15282a12d6cbe78b77520f8dcef0e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;clearcachefor&quot;&gt; clearCacheFor() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;clearcachefor&quot;&gt; clearCacheFor() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="139b1348a360c617745297ec9983aa26abd759f9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;clearvalidators&quot;&gt; clearValidators() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;clearvalidators&quot;&gt; clearValidators() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b25e47be46c2f1b550aae67667e4ae3f9c711de8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;clone&quot;&gt; clone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;clone&quot;&gt; clone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="17303af5fe2c588c6fe87601abacdb810816d557" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;compilecomponents&quot;&gt; compileComponents() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;compilecomponents&quot;&gt; compileComponents() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="eb04b59a673a0947df855df71668942584ace673" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;compose&quot;&gt; compose() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;compose&quot;&gt; compose() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9f2813db855b476497c35d86537ac92d062e7d76" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;composeasync&quot;&gt; composeAsync() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;composeasync&quot;&gt; composeAsync() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="665d2d1bc7ddef2ae6eb1e14f7ef3d554927a866" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;computestyle&quot;&gt; computeStyle() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;computestyle&quot;&gt; computeStyle() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d13bd858f5c64eefd1a79b5824815ff6be0dbb82" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;config&quot;&gt; config() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;config&quot;&gt; config() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="86ed8ffcecd93eb4becd57fa2ce3b012015ddf93" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;configurecompiler&quot;&gt; configureCompiler() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;configurecompiler&quot;&gt; configureCompiler() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0539155553054a7a7a765d01cb2a83dfa426d8ed" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;configuretestingmodule&quot;&gt; configureTestingModule() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;configuretestingmodule&quot;&gt; configureTestingModule() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="20c1361ebbf5532af9a2c35310e23f1beb3a8c80" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;connect&quot;&gt; connect() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;connect&quot;&gt; connect() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1b8da20bf556e45b8ca615e7ee7f4d648ba32ea4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;connectedcallback&quot;&gt; connectedCallback() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;connectedcallback&quot;&gt; connectedCallback() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9dc720a795efcdd3ad33fccf805b6bd3bafb3947" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;construct-signature&quot;&gt; &lt;i&gt;construct signature&lt;/i&gt; &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;construct-signature&quot;&gt; &lt;i&gt;署名を作成する&lt;/i&gt; &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f1b886b9ef7773a8d39a38c02d934d2d1f2ebfb9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;contains&quot;&gt; contains() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;contains&quot;&gt; contains() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d27d11a2ccc104b9283162cc3b9bad17e5a9400e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;containselement&quot;&gt; containsElement() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;containselement&quot;&gt; containsElement() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="05d58580e2dd15e2c3c31a6e554ad9393472c0e6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;control&quot;&gt; control() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;control&quot;&gt; control() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="825b0c74c85ccdec2d2525e955a17755269dd237" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;create&quot;&gt; create() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;create&quot;&gt; create() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="363f3a0f50fd8097dc5f64e85a8290dab77ab473" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createchildfromresolved&quot;&gt; createChildFromResolved() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createchildfromresolved&quot;&gt; createChildFromResolved() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="cfe914074651801ba79a33c9d69a1625e5515448" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createcomment&quot;&gt; createComment() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createcomment&quot;&gt; createComment() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="989027bc6d18d15913d6a7fa20c94662539e9c91" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createcompiler&quot;&gt; createCompiler() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createcompiler&quot;&gt; createCompiler() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b529d5896bee4b68d358c6b936f495b67a7826d0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createcomponent&quot;&gt; createComponent() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createcomponent&quot;&gt; createComponent() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="aa8396e1762a76d94511f0743a340b0ae188c7eb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createelement&quot;&gt; createElement() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createelement&quot;&gt; createElement() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="219cc3b7746ccc4c8122a623d7abf99ce91a0ec3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createembeddedview&quot;&gt; createEmbeddedView() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createembeddedview&quot;&gt; createEmbeddedView() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fff6cd169cf88b0f0a04f2976731800cae76f7aa" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createmessagebroker&quot;&gt; createMessageBroker() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createmessagebroker&quot;&gt; createMessageBroker() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d51fa58cf973888f9e5606f1f96ee416eede360b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createrenderer&quot;&gt; createRenderer() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createrenderer&quot;&gt; createRenderer() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="224b8baed4fff538d3e1a251338655dcd71dc421" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createtemplateanchor&quot;&gt; createTemplateAnchor() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createtemplateanchor&quot;&gt; createTemplateAnchor() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4be2d3d9e185d09f742fb70aa8bb935250c99548" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createtext&quot;&gt; createText() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createtext&quot;&gt; createText() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="05c185c94a91727d4f546915b6006a1339d2db2c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createurltree&quot;&gt; createUrlTree() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createurltree&quot;&gt; createUrlTree() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d0a5273a6d8127da470d3a908c4e0dccda075cac" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;createviewroot&quot;&gt; createViewRoot() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;createviewroot&quot;&gt; createViewRoot() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b4b41b3c1d87d1bfde1512d930b55ef51d356a12" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;css&quot;&gt; css() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;css&quot;&gt; css() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1c7a53c84fb0afb2a9602b280113c26c5f9e3261" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;deactivate&quot;&gt; deactivate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;deactivate&quot;&gt; deactivate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="14a10d76bd629d1a316bd576d1f2d9f085935960" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;declarations&quot;&gt;declarations&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;declarations&quot;&gt;declarations&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ce70499eec84c21759f05886dc31a26eb0accabf" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;decodehash&quot;&gt; decodeHash() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;decodehash&quot;&gt; decodeHash() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f90514ed30420beff5ef07b9585e25dfbc3330e4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;decodekey&quot;&gt; decodeKey() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;decodekey&quot;&gt; decodeKey() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="508e7a8ec2abfa91c0e7436c2413d26557d18165" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;decodepath&quot;&gt; decodePath() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;decodepath&quot;&gt; decodePath() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a829f1a79e7ea5d300321578f521019c414c948a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;decodesearch&quot;&gt; decodeSearch() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;decodesearch&quot;&gt; decodeSearch() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8abd33ede66aa9e66050d025b1b5678b8973e3c5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;decodevalue&quot;&gt; decodeValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;decodevalue&quot;&gt; decodeValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fa309cffa1ce46415a1f78b02643288f1e5bc5c4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;decreasependingrequestcount&quot;&gt; decreasePendingRequestCount() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;decreasependingrequestcount&quot;&gt; decreasePendingRequestCount() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="72c984a081f0f473dcf22c507752cf59f38c5d6d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;delete&quot;&gt; delete() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;delete&quot;&gt; delete() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bcd4a06e49f3713ca80c5b766c28628a0ab9de74" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;destroy&quot;&gt; destroy() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;destroy&quot;&gt; destroy() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d06daaf5b3dc4e96c4114b721fc164d63a5a44de" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;destroyview&quot;&gt; destroyView() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;destroyview&quot;&gt; destroyView() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b0ae6bc1c2c24868886af8f586f3fb8b26932afe" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;detach&quot;&gt; detach() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;detach&quot;&gt; detach() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bcaa5491a68102d2b1d687ff45e16d055094786b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;detachview&quot;&gt; detachView() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;detachview&quot;&gt; detachView() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c76fd299195d2368fd1ee986e90916e2616ae8e7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;detectchanges&quot;&gt; detectChanges() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;detectchanges&quot;&gt; detectChanges() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a8b47d526c4bac847ce2d792e52ea8e7bd95c7c0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;detectcontenttypeheader&quot;&gt; detectContentTypeHeader() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;detectcontenttypeheader&quot;&gt; detectContentTypeHeader() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="21c533a79f35e035b92c24a90de3d599af0aa603" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;diff&quot;&gt; diff() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;diff&quot;&gt; diff() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b16f3f2cce25c6bfb0bc471bb6c7fc599c2d90d8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;directive&quot;&gt; directive() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;directive&quot;&gt; directive() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3c6869949f56c573e33fb80ac0d393e53288a403" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;disable&quot;&gt; disable() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;disable&quot;&gt; disable() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="55fe799685e617c9eef9d263117cedfbb2900777" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;disconnect&quot;&gt; disconnect() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;disconnect&quot;&gt; disconnect() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="43b5b53838daa10d3fc99b45e1d36856a56ce2ac" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;disconnectedcallback&quot;&gt; disconnectedCallback() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;disconnectedcallback&quot;&gt; disconnectedCallback() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bb6bf6ef851c3733bb431f397f852f81bf3eca53" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;dispose&quot;&gt; dispose() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;dispose&quot;&gt; dispose() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="19b2a1e21ed6f011f35ddf5c8d94ceeb347ed452" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;downgradeng2component&quot;&gt; downgradeNg2Component() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;downgradeng2component&quot;&gt; downgradeNg2Component() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8325fecb18e08a15e426d23775db995be06b75f9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;downgradeng2provider&quot;&gt; downgradeNg2Provider() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;downgradeng2provider&quot;&gt; downgradeNg2Provider() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6db871ca48edee2c5b419943e14af8164b66c7ef" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;email&quot;&gt; email() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;email&quot;&gt; email() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ccd1f77e71fc563733c0be759cfd530236ef22c7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;emit&quot;&gt; emit() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;emit&quot;&gt; emit() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="08c31fc58b8320f6d90581f1efb1947e47235b2f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;enable&quot;&gt; enable() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;enable&quot;&gt; enable() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b99376c739fad098c90c29e5e11879955a343e09" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;encapsulation&quot;&gt;encapsulation&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;encapsulation&quot;&gt;encapsulation&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="30aae6c9a45f947a5255c4ec0afb2d239d58a117" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;encodehash&quot;&gt; encodeHash() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;encodehash&quot;&gt; encodeHash() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="eb4adac8e0dbc19e4f63f3111e60e21405103107" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;encodekey&quot;&gt; encodeKey() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;encodekey&quot;&gt; encodeKey() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9a09a0744b01ba5720c822a61b04e68a3542ee87" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;encodepath&quot;&gt; encodePath() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;encodepath&quot;&gt; encodePath() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e0efd04bc2faeac7b0b9f7e453a70b88dccc3c54" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;encodesearch&quot;&gt; encodeSearch() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;encodesearch&quot;&gt; encodeSearch() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8f6f0a569c2745e5b452684de622d12e20a2c18b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;encodevalue&quot;&gt; encodeValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;encodevalue&quot;&gt; encodeValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d07e3434c87d60db531ee090d84a550a76dd949a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;end&quot;&gt; end() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;end&quot;&gt; end() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="71ac3b9bed61f861edd7dc6cb49592a7ab1610ea" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;entrycomponents&quot;&gt;entryComponents&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;entrycomponents&quot;&gt;entryComponents&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1c05262b90c187d8fbb815e184d8ff35905d8794" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;error&quot;&gt; error() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;error&quot;&gt; error() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0209049015efac02b4cd4475bdf3fe84103f7144" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;event&quot;&gt; event() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;event&quot;&gt; event() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="21b0bcffd76915f219cd73de910b3bedc00bdf31" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;eventname&quot;&gt;eventName&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;eventname&quot;&gt;eventName&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a49fe1e01028ab0b89cf3335e77d996af76593da" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;execute&quot;&gt; execute() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;execute&quot;&gt; execute() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="126f04be8df611382518fbb7779e9d9eeca34123" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;expectnone&quot;&gt; expectNone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;expectnone&quot;&gt; expectNone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fb57ae7ff2d06e5437f89843f22832e770c16521" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;expectone&quot;&gt; expectOne() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;expectone&quot;&gt; expectOne() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="488d4d498ed8f8df369ac45ebc2b62cf489728c6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;exportas&quot;&gt;exportAs&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;exportas&quot;&gt;exportAs&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4fb560952fbda49b1d55aed19062bd69249d57c6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;exports&quot;&gt;exports&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;exports&quot;&gt;exports&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a6475ef803d1ce16c20d78981ba6dc2a7c5a9353" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;extend&quot;&gt; extend() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;extend&quot;&gt; extend() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5be0ba524d6f35378de07c45e1871a98eb77baf4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;extract&quot;&gt; extract() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;extract&quot;&gt; extract() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="80db74799d4a530bdf88ece0688765004ce2ef55" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;filter&quot;&gt; filter() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;filter&quot;&gt; filter() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f0205482c8744181b402dbf0feb490d2d1403956" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;find&quot;&gt; find() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;find&quot;&gt; find() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="22c4b5a378f035157c428d33de7397f1a989a2fe" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;findproviders&quot;&gt; findProviders() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;findproviders&quot;&gt; findProviders() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d5d81e63c97a6f8508445a60b8f55c223bb4b8d3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;findtestabilityintree&quot;&gt; findTestabilityInTree() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;findtestabilityintree&quot;&gt; findTestabilityInTree() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c7468c697fda3d038e735f8653ed3d7f592dbbcd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;finish&quot;&gt; finish() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;finish&quot;&gt; finish() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5a9e9cc5e8bc46ed6a038236b8a4d5769a60ad3a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;fireuncheck&quot;&gt; fireUncheck() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;fireuncheck&quot;&gt; fireUncheck() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d2f795c2150d3376e4a2eaf4516c16b6da67e8bd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;flush&quot;&gt; flush() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;flush&quot;&gt; flush() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="20c1fd08aca50746a2330baade29bd7cc98c3677" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;forchild&quot;&gt; forChild() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;forchild&quot;&gt; forChild() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3408de95ed88041f375747ff7bfc944a9bed4cd9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreach&quot;&gt; forEach() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreach&quot;&gt; forEach() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1ef9bd3d0709f39547452f480067c80930ae0512" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreachaddeditem&quot;&gt; forEachAddedItem() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreachaddeditem&quot;&gt; forEachAddedItem() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="48c9c7edd95264deecfc4993af1db65ea05fbf39" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreachchangeditem&quot;&gt; forEachChangedItem() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreachchangeditem&quot;&gt; forEachChangedItem() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="058a3a14cb9292ca4b77a814e3acecfb3c8f1af9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreachidentitychange&quot;&gt; forEachIdentityChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreachidentitychange&quot;&gt; forEachIdentityChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="22933638a0c88ec8ce82ea50f95cefc7b022fdc7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreachitem&quot;&gt; forEachItem() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreachitem&quot;&gt; forEachItem() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3698aac92af412e72448147b7116a0f01ded13a9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreachmoveditem&quot;&gt; forEachMovedItem() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreachmoveditem&quot;&gt; forEachMovedItem() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="99abc353a0dc7e1ae574438cb24c9493a4b2ac3e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreachoperation&quot;&gt; forEachOperation() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreachoperation&quot;&gt; forEachOperation() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1b8b5d9d2d48d58d613af13813849db79ae4a00d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreachpreviousitem&quot;&gt; forEachPreviousItem() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreachpreviousitem&quot;&gt; forEachPreviousItem() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9109350dbfdd545010e15414a90de120bd99bb48" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;foreachremoveditem&quot;&gt; forEachRemovedItem() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;foreachremoveditem&quot;&gt; forEachRemovedItem() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="936bc28b459e8efca47b6494c7a87a92f12eaa5a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;forroot&quot;&gt; forRoot() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;forroot&quot;&gt; forRoot() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="246d6b33e374e3302411b9f7b28184cd22d718fd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;forward&quot;&gt; forward() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;forward&quot;&gt; forward() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f05d9559924d542b02eaecb5ede8decaaffd4140" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;from&quot;&gt; from() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;from&quot;&gt; from() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="190d4fc298a91e04da52b38f9415027f08f957f1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;fromresolvedproviders&quot;&gt; fromResolvedProviders() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;fromresolvedproviders&quot;&gt; fromResolvedProviders() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6de46296b5c9389a652e591f49cfae469d378d63" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;get&quot;&gt; $get() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;get&quot;&gt; $get() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b7f5b8d51289d57413f082d4650dd6efc8d2e2a0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;get&quot;&gt; get() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;get&quot;&gt; get() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="af0d115c0730215333c514038bbb175a5e26517b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getall&quot;&gt; getAll() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getall&quot;&gt; getAll() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3b1387b4de4b3c95ca437b0e09b41267fcaa3baf" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getallrootelements&quot;&gt; getAllRootElements() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getallrootelements&quot;&gt; getAllRootElements() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ebe286937841faf765381c3ceaded8fd158c7054" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getalltestabilities&quot;&gt; getAllTestabilities() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getalltestabilities&quot;&gt; getAllTestabilities() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3c8bbb728c52eca7f5b75a741e93cb277a83e1b2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getbasehref&quot;&gt; getBaseHref() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getbasehref&quot;&gt; getBaseHref() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1f0d1d89c17576a75c323f95dfd2665b8d6ae613" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getbasehreffromdom&quot;&gt; getBaseHrefFromDOM() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getbasehreffromdom&quot;&gt; getBaseHrefFromDOM() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d2ae81c1872757b147cf1bc547d560648292997d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getcontext&quot;&gt; getContext() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getcontext&quot;&gt; getContext() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8560acd51fb3b3998c21cc85d0f7cc67c2f71338" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getcontrol&quot;&gt; getControl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getcontrol&quot;&gt; getControl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b02722426aab0a6df5e6e7c5aaf86bc7cb086f08" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getcurrentnavigation&quot;&gt; getCurrentNavigation() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getcurrentnavigation&quot;&gt; getCurrentNavigation() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b4c2fe380cf89bfa415711edcc92395a94e315f1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getdocument&quot;&gt; getDocument() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getdocument&quot;&gt; getDocument() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e02606c3c3965ef794d2c781428927b85a69e5ce" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;geterror&quot;&gt; getError() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;geterror&quot;&gt; getError() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ceb58cf05d42cf1db618ac6ece2c17dd14e663c0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getformarray&quot;&gt; getFormArray() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getformarray&quot;&gt; getFormArray() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="71bf203349464d45fdeb0869eafac618c224142a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getformgroup&quot;&gt; getFormGroup() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getformgroup&quot;&gt; getFormGroup() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f759a242712ff7d83f1412df1235cfd3db46cc19" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getinputvalue&quot;&gt; getInputValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getinputvalue&quot;&gt; getInputValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="85b5f40982afdb78314deee19f23c668976df688" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getmoduleid&quot;&gt; getModuleId() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getmoduleid&quot;&gt; getModuleId() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9a95858b63576122e7b2b3d584f4732c98fc3818" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getorcreatecontext&quot;&gt; getOrCreateContext() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getorcreatecontext&quot;&gt; getOrCreateContext() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e7e911f09c81047681391b0f383cd391ab158f20" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getpendingrequestcount&quot;&gt; getPendingRequestCount() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getpendingrequestcount&quot;&gt; getPendingRequestCount() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0e6f8e1eda855b411975c62569f198830734cd15" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getpluralcategory&quot;&gt; getPluralCategory() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getpluralcategory&quot;&gt; getPluralCategory() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="088625362d7f90a98f31f94f96ba0cf31ac879fc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getposition&quot;&gt; getPosition() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getposition&quot;&gt; getPosition() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8f8439b01dcb2621d15bfcb597144ecc5f08d7eb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getrawvalue&quot;&gt; getRawValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getrawvalue&quot;&gt; getRawValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a0571121458bb3247ee12e4091551af2b8e5603f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getscrollposition&quot;&gt; getScrollPosition() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getscrollposition&quot;&gt; getScrollPosition() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="495c01a3c452960cc6340c825698e9d04297cf66" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getstate&quot;&gt; getState() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getstate&quot;&gt; getState() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1fc35f2482b42f17fe559848321eadd57f6f03bc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;gettag&quot;&gt; getTag() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;gettag&quot;&gt; getTag() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d416c4f29053d204e68366195b720d25d386a1a7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;gettags&quot;&gt; getTags() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;gettags&quot;&gt; getTags() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5b91b7765421ed6cdba31c681530eacefe601607" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;gettestability&quot;&gt; getTestability() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;gettestability&quot;&gt; getTestability() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fb12db7a07b5e410426c196aa14b674ebefba8da" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;gettitle&quot;&gt; getTitle() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;gettitle&quot;&gt; getTitle() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1c08072d4b2b137747f8931cb18ad220c05df68c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;gettoken&quot;&gt; getToken() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;gettoken&quot;&gt; getToken() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="826d915af7d236d8cb95f5f6fc73006c1cf7243c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getvalue&quot;&gt; getValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getvalue&quot;&gt; getValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bb666c381a3172492d88923eb8b15e2b63d37c71" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;getzone&quot;&gt; getZone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;getzone&quot;&gt; getZone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1c6dcb2dbd27918a2ce3cf95334d00e97328f3ac" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;go&quot;&gt; go() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;go&quot;&gt; go() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b4bdbdf470f234f0eb99510c217c02e05dd5f4f9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;group&quot;&gt; group() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;group&quot;&gt; group() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="14e24686c272175e1857784ab03fbc358ded41e2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;handle&quot;&gt; handle() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;handle&quot;&gt; handle() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="46d8e4667f6773359a9882c9a257ba9c68cdf47f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;handleerror&quot;&gt; handleError() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;handleerror&quot;&gt; handleError() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5f6f857201097baa1b14f4dae14700b5d12a8890" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;has&quot;&gt; has() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;has&quot;&gt; has() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2857fd7bf37326d1aa48ca51a530216097b48f08" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;haschildren&quot;&gt; hasChildren() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;haschildren&quot;&gt; hasChildren() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2f5d48e365ed85901c7c4100bfeedabd40aef180" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;haserror&quot;&gt; hasError() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;haserror&quot;&gt; hasError() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0b1bb32b111a80130f684028a1ee01ecaab3d1b5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;hash&quot;&gt; hash() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;hash&quot;&gt; hash() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="57fed67292499c7eb910af25aa5f36955e7fcd14" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;hashprefix&quot;&gt; hashPrefix() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;hashprefix&quot;&gt; hashPrefix() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="55324e885624e4cf4e0beb7e0dc6b5d8118b7848" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;haskey&quot;&gt; hasKey() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;haskey&quot;&gt; hasKey() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="48f7b0852674c6c9c7f883934f4b55185c68200c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;hasstarted&quot;&gt; hasStarted() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;hasstarted&quot;&gt; hasStarted() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bf832e002e07373a063563d108982b26dab713dc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;head&quot;&gt; head() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;head&quot;&gt; head() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="58f0517250a1bf11118cb3cc6211eb12512214c7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;host&quot;&gt; host() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;host&quot;&gt; host() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3bca8c08412186b7c23a7d50d787530053b209fa" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;host&quot;&gt;host&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;host&quot;&gt;host&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="83abaa630be356c399b455c57c43756aef32f418" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;hostpropertyname&quot;&gt;hostPropertyName&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;hostpropertyname&quot;&gt;hostPropertyName&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1c324a7a1be3b9a28790c7d9f9d3dbb117140d36" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;html5mode&quot;&gt; html5Mode() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;html5mode&quot;&gt; html5Mode() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="00b3e94c1fd542c596799ca8ebca7df6339ea650" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;id&quot;&gt;id&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;id&quot;&gt;id&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="dc7c795842d7739a533bdd385dad417438345b6a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;imports&quot;&gt;imports&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;imports&quot;&gt;imports&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e3d068984914b8f6c32106450789f886ad93ef3c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;increasependingrequestcount&quot;&gt; increasePendingRequestCount() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;increasependingrequestcount&quot;&gt; increasePendingRequestCount() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="43061bf338000c4422d1653385c4da483619d13d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;indexof&quot;&gt; indexOf() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;indexof&quot;&gt; indexOf() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6019a071dbe7478cbc2d8d73c8fe9d363a64cea2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;init&quot;&gt; init() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;init&quot;&gt; init() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="db591a76a07fbe1f883cc08b181ffba860240923" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;initchannel&quot;&gt; initChannel() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;initchannel&quot;&gt; initChannel() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="057d9b9d11339d0ac1c8b0ce85cb9d53c3165313" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;initialnavigation&quot;&gt; initialNavigation() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;initialnavigation&quot;&gt; initialNavigation() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="196edc7f51c21711bd537e675c4c65be83db80b1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;inittestenvironment&quot;&gt; initTestEnvironment() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;inittestenvironment&quot;&gt; initTestEnvironment() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2fb569ab5e89a3cf02cb59f9d5019c3c1cf8ea53" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;inject&quot;&gt; inject() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;inject&quot;&gt; inject() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="7229230301bac1b60c586d42247621def6140343" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;inputs&quot;&gt;inputs&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;inputs&quot;&gt;inputs&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0ca0e45d122031acf0f35c5687acb4a5afa76b8f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;insert&quot;&gt; insert() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;insert&quot;&gt; insert() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="46a82e4dbe6e281bcc5d6debb0dc61e7b5b39d8d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;insertbefore&quot;&gt; insertBefore() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;insertbefore&quot;&gt; insertBefore() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="531e50f15eaf70366aa3c6c6952177cebfe13b11" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;insertrootelement&quot;&gt; insertRootElement() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;insertrootelement&quot;&gt; insertRootElement() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1135586bf5d35664453ee0a2a12761426726cafb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;instantiateresolved&quot;&gt; instantiateResolved() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;instantiateresolved&quot;&gt; instantiateResolved() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bb071cdb75070944faf250f2be4a9ed5c49ce582" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;intercept&quot;&gt; intercept() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;intercept&quot;&gt; intercept() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="52a0f5894f821ba4c8869231b96b6ed5efd1e4d9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;interpolation&quot;&gt;interpolation&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;interpolation&quot;&gt;interpolation&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="88872e932b083dd884e88aafd5c9f070216ef809" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;invokeelementmethod&quot;&gt; invokeElementMethod() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;invokeelementmethod&quot;&gt; invokeElementMethod() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f42fac20c33b44a592a63ba9cd6ebdb020a9a53d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;isactive&quot;&gt; isActive() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;isactive&quot;&gt; isActive() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1d760a3fa192b3af120d68efc77aabfec779c3d3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;iscurrentpathequalto&quot;&gt; isCurrentPathEqualTo() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;iscurrentpathequalto&quot;&gt; isCurrentPathEqualTo() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0f38eba97b08f704ddbf72489231eaccbe6327fb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;isfirstchange&quot;&gt; isFirstChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;isfirstchange&quot;&gt; isFirstChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d608519c9640261cc02d5d85c34425989d65c95b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;isinangularzone&quot;&gt; isInAngularZone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;isinangularzone&quot;&gt; isInAngularZone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="33416355528b486a9cf6c54284bd33ce0578ecab" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;isstable&quot;&gt; isStable() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;isstable&quot;&gt; isStable() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="7f506fef7173ab142cbe9926cfa62400bf236622" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;iswrapped&quot;&gt; isWrapped() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;iswrapped&quot;&gt; isWrapped() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5ee295fcf103d9e8a2d54b8c6bdbf11644ac6cc9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;jit&quot;&gt;jit&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;jit&quot;&gt;jit&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3a7b04645354c1890932a58a9e7999baca67a6ba" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;joinwithslash&quot;&gt; joinWithSlash() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;joinwithslash&quot;&gt; joinWithSlash() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="465df538c05972c1d236ca9cfbc38d787303ff77" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;jsonp&quot;&gt; jsonp() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;jsonp&quot;&gt; jsonp() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="dcb84949209919fa08b0f0c299093229b44e1b01" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;keys&quot;&gt; keys() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;keys&quot;&gt; keys() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c37fbd00c4fa17cd0e1b17b57898ff302cd3d947" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;listen&quot;&gt; listen() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;listen&quot;&gt; listen() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4396124a9ef670c8d363a4272859c425cb9d8b41" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;listenglobal&quot;&gt; listenGlobal() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;listenglobal&quot;&gt; listenGlobal() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="bb1ae5083a6ccba0ab4950b2854266bc8141b6fb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;load&quot;&gt; load() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;load&quot;&gt; load() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a1796e4477170df3fe0e58a4ed295cc12c5f85f8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;map&quot;&gt; map() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;map&quot;&gt; map() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d611c8cead9fda9b808a7c822d3185f69c5f7efb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;markallastouched&quot;&gt; markAllAsTouched() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;markallastouched&quot;&gt; markAllAsTouched() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="91949074c0591daa30a6c82c178329e4722a1f60" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;markasdirty&quot;&gt; markAsDirty() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;markasdirty&quot;&gt; markAsDirty() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="189eea80a8461b25e25195a14e86574ffbdf045b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;markaspending&quot;&gt; markAsPending() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;markaspending&quot;&gt; markAsPending() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c1da5bd0e65db64ad5616e42f9f264401d3802f5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;markaspristine&quot;&gt; markAsPristine() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;markaspristine&quot;&gt; markAsPristine() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="acf7dc6379330edecd5d7a285c41865b4f3c819a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;markastouched&quot;&gt; markAsTouched() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;markastouched&quot;&gt; markAsTouched() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="363dd2b6366ce6494cf7b552a7450ffdc1256ea4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;markasuntouched&quot;&gt; markAsUntouched() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;markasuntouched&quot;&gt; markAsUntouched() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="26bfeda44049e9617dc537270f11b09d56d04c60" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;markforcheck&quot;&gt; markForCheck() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;markforcheck&quot;&gt; markForCheck() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ba254078d0fe34d83d28e4b3d386e85fe54bf014" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;match&quot;&gt; match() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;match&quot;&gt; match() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="470704549687e94be3b9aa04e7273fc2c32af63b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;matcheselement&quot;&gt; matchesElement() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;matcheselement&quot;&gt; matchesElement() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9d72f7fab1bc8c10d69b1ad586253cc647fb0af2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;max&quot;&gt; max() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;max&quot;&gt; max() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e7bd9c1edf8580da0e55709541fce538ea66c13f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;maxlength&quot;&gt; maxLength() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;maxlength&quot;&gt; maxLength() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="7fe74aa3002163842fae624a96b9a371c8035ac4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;merge&quot;&gt; merge() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;merge&quot;&gt; merge() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e6f03a0a325c3c7baabcc9d49bb5e53226e0e0c4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;min&quot;&gt; min() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;min&quot;&gt; min() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fa44e21ec9192335659660995ccf976a59adcc97" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;minlength&quot;&gt; minLength() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;minlength&quot;&gt; minLength() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a037b75c3350b5df0eb9a572007a9421939bf8d0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;moduleid&quot;&gt;moduleId&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;moduleid&quot;&gt;moduleId&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="996358a510a2863da971339a9b5a3f843475c415" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;move&quot;&gt; move() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;move&quot;&gt; move() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d37b0cda34dffa8ffc7c3b05b06c46b49681383d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;name&quot;&gt;name&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;name&quot;&gt;name&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1e8d908fbd7a2190cee2a0a96c1f3b685143ed8b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;navigate&quot;&gt; navigate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;navigate&quot;&gt; navigate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4b0e0b973e7e71369b804e55d8a72d33444d9f07" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;navigatebyurl&quot;&gt; navigateByUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;navigatebyurl&quot;&gt; navigateByUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1409cdd5fec57d6f613e11844904a7bf400b3afa" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;nextsibling&quot;&gt; nextSibling() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;nextsibling&quot;&gt; nextSibling() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0f9de8e3da2fb8ddd7b8246297461ca9cd8474aa" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngaftercontentchecked&quot;&gt; ngAfterContentChecked() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngaftercontentchecked&quot;&gt; ngAfterContentChecked() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="308f8a441ff2e9ee063aeff1e1205d3e2d81d6e7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngaftercontentinit&quot;&gt; ngAfterContentInit() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngaftercontentinit&quot;&gt; ngAfterContentInit() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e38c41dd0066717ff5c6c5cf43f4e3cd61cbe3fa" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngafterviewchecked&quot;&gt; ngAfterViewChecked() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngafterviewchecked&quot;&gt; ngAfterViewChecked() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ffbfaffe05304a3d379c5a8c18d8499464a07763" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngafterviewinit&quot;&gt; ngAfterViewInit() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngafterviewinit&quot;&gt; ngAfterViewInit() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f0de85f6b84b11d79f6e2c99bc64284d0d84b6b8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngdobootstrap&quot;&gt; ngDoBootstrap() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngdobootstrap&quot;&gt; ngDoBootstrap() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="922616d09b9194dc1580531d65384cca84f32ec4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngdocheck&quot;&gt; ngDoCheck() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngdocheck&quot;&gt; ngDoCheck() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0791c04222eb2c98d6a50e854068de3d2c53a51f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngonchanges&quot;&gt; ngOnChanges() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngonchanges&quot;&gt; ngOnChanges() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3ac03e46410a6bbf85361bf64e1a8d87d992d498" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngondestroy&quot;&gt; ngOnDestroy() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngondestroy&quot;&gt; ngOnDestroy() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8a6500b78177a214a3d8db6bda047fbc97538ff3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngoninit&quot;&gt; ngOnInit() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngoninit&quot;&gt; ngOnInit() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="7f6ddf4d0a70bfbe9e26f24783e9e21bc444b289" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ngtemplatecontextguard&quot;&gt; ngTemplateContextGuard() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ngtemplatecontextguard&quot;&gt; ngTemplateContextGuard() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="360bdeb1dd5e2455f36e01b17935621cb7b5fc9e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;normalize&quot;&gt; normalize() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;normalize&quot;&gt; normalize() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6b64d7f8cbf62bbc0236d430faf328a8c241313f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;normalizequeryparams&quot;&gt; normalizeQueryParams() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;normalizequeryparams&quot;&gt; normalizeQueryParams() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="04b12591175ddf7f8e512d035ad1c1a88a243acc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;notifyonchanges&quot;&gt; notifyOnChanges() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;notifyonchanges&quot;&gt; notifyOnChanges() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fcfab55e03ff3dc9a083c46b44d456674405346d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;nullvalidator&quot;&gt; nullValidator() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;nullvalidator&quot;&gt; nullValidator() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9140f25f8f78d1d54142fe6d577b1b00f9f7427d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onchange&quot;&gt; onChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onchange&quot;&gt; onChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="921623c500b53bc072a1352d0863d4946fdfbc5a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onchildoutletcreated&quot;&gt; onChildOutletCreated() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onchildoutletcreated&quot;&gt; onChildOutletCreated() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e5fe2824c06506629c063638b8c2a9c4eec9f8e0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onchildoutletdestroyed&quot;&gt; onChildOutletDestroyed() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onchildoutletdestroyed&quot;&gt; onChildOutletDestroyed() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9aa7088f417a993c1ae2880f7ecb3e16adb38840" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onclick&quot;&gt; onClick() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onclick&quot;&gt; onClick() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="034622f7298a12db693f2d44c9257e9350b79b31" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ondestroy&quot;&gt; onDestroy() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ondestroy&quot;&gt; onDestroy() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b500a29c04ddd096860637c5985262b389cc84b3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ondone&quot;&gt; onDone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ondone&quot;&gt; onDone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4bba9d95803b3ada382bf39d4af4c44e19085584" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onhashchange&quot;&gt; onHashChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onhashchange&quot;&gt; onHashChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="64baa70e7d256cf84aee35d3a28de5411faac233" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;oninit&quot;&gt; onInit() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;oninit&quot;&gt; onInit() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9efb75e7cbfbe34fbe4d8ab87fcfb755aa79bb78" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onoutletdeactivated&quot;&gt; onOutletDeactivated() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onoutletdeactivated&quot;&gt; onOutletDeactivated() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="42a27de81f320fa03d401a4baeb97f199409691c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onoutletreattached&quot;&gt; onOutletReAttached() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onoutletreattached&quot;&gt; onOutletReAttached() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="20fb633c36f75ed45f65d971027dbdaaac064675" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onpopstate&quot;&gt; onPopState() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onpopstate&quot;&gt; onPopState() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fc023776711b43d5cb7e7563337c3cd966897c02" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onreset&quot;&gt; onReset() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onreset&quot;&gt; onReset() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5ff009889b1215b314538ac41f0967fe8cdeb646" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onserialize&quot;&gt; onSerialize() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onserialize&quot;&gt; onSerialize() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f0b0ffd8c18ee42d6ecbfcb4f78ffd3b60c23b1f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onstart&quot;&gt; onStart() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onstart&quot;&gt; onStart() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="91875491ff0d20bee75edba3982fa60a5f6b7c4f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onsubmit&quot;&gt; onSubmit() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onsubmit&quot;&gt; onSubmit() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e560b7ad742824727ebe47a6ca9dfae924fd01ff" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;onurlchange&quot;&gt; onUrlChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;onurlchange&quot;&gt; onUrlChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="09485388c42e4f9dfc83e9fc09664f3a6f071a89" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;options&quot;&gt; options() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;options&quot;&gt; options() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ae01e71dad264df466722891ad1b1afff33abcf1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;outputs&quot;&gt;outputs&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;outputs&quot;&gt;outputs&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c3f298c61a717da259d559f8817c2fc877c44c6a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;overridecomponent&quot;&gt; overrideComponent() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;overridecomponent&quot;&gt; overrideComponent() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="99afb38209320ab0f628b10532d67e5cc19185d2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;overridedirective&quot;&gt; overrideDirective() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;overridedirective&quot;&gt; overrideDirective() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c79b0500db2e199f436753e2f73655ec282ecc5d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;overridemodule&quot;&gt; overrideModule() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;overridemodule&quot;&gt; overrideModule() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6e5db5aaacb136cbf7dbf66e7501b28255a10ac1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;overridepipe&quot;&gt; overridePipe() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;overridepipe&quot;&gt; overridePipe() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ad3cc07ba4c79db96e2fafa53a95c4219891279e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;overrideprovider&quot;&gt; overrideProvider() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;overrideprovider&quot;&gt; overrideProvider() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2a3bd15c398f29ebad011f331d01a1ba5131a0f6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;overridetemplate&quot;&gt; overrideTemplate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;overridetemplate&quot;&gt; overrideTemplate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4df9e2b8ed99b5bbfef116d42c4284ae33fecb98" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;overridetemplateusingtestingmodule&quot;&gt; overrideTemplateUsingTestingModule() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;overridetemplateusingtestingmodule&quot;&gt; overrideTemplateUsingTestingModule() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="57c337cd4b09ddb63da1448b99bff49e7346ad58" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;parentnode&quot;&gt; parentNode() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;parentnode&quot;&gt; parentNode() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="711ee0a50d9737b2a9524d363339722cf9d53d40" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;parse&quot;&gt; $$parse() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;parse&quot;&gt; $$parse() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6e8858058d35c73aaea78e6fbc625d07a842d183" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;parse&quot;&gt; parse() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;parse&quot;&gt; parse() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3b9d2b6f754c6429ea7b09ef6a5dc0a565aa05e7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;parselinkurl&quot;&gt; $$parseLinkUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;parselinkurl&quot;&gt; $$parseLinkUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="05a059348f376298f5a17b66e997989926c74730" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;parseurl&quot;&gt; parseUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;parseurl&quot;&gt; parseUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f2bd03ff5957b958ebee9e3f3b6e7368d6507831" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;patch&quot;&gt; patch() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;patch&quot;&gt; patch() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ab6081811673dcaa0c97de0ccc5c2a80397b7b1b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;patchvalue&quot;&gt; patchValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;patchvalue&quot;&gt; patchValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="079bdb2f82ec2b7ce1d0600447dfbeb6831364be" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;path&quot;&gt; path() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;path&quot;&gt; path() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e5bce74110782802a0840dd2210f6a706339c307" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;pattern&quot;&gt; pattern() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;pattern&quot;&gt; pattern() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="21dd43353f38d1b75bea74a1edf946796fb23dfa" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;pause&quot;&gt; pause() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;pause&quot;&gt; pause() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1030e259c456d4dd5ab16346d8cf40bfcc81df33" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;play&quot;&gt; play() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;play&quot;&gt; play() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="be98e975da4866d934cabe137a7c6545ef8c13a7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;port&quot;&gt; port() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;port&quot;&gt; port() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b9661531e9069f16b87cba1a8995d20d7f5895d5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;post&quot;&gt; post() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;post&quot;&gt; post() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6e7447e677ac925c172cb4e3c92a2a2353e9a081" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;preload&quot;&gt; preload() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;preload&quot;&gt; preload() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0e286893483e8198670cd671fdbd022002fe9f76" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;prepareexternalurl&quot;&gt; prepareExternalUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;prepareexternalurl&quot;&gt; prepareExternalUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8c8569ce1e99c5e651c4a6c3bb550914bb3bc2f4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;preservewhitespaces&quot;&gt;preserveWhitespaces&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;preservewhitespaces&quot;&gt;preserveWhitespaces&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fc53634e09f8d45a88a8716376d8032d345cb155" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;projectnodes&quot;&gt; projectNodes() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;projectnodes&quot;&gt; projectNodes() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5ef0558f1b9d1e01e355a92091efaf1a22cb6a51" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;protocol&quot;&gt; protocol() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;protocol&quot;&gt; protocol() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8d8833fe10276a9bee44b4bbd4b8cc98bf0fd855" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;providedin&quot;&gt;providedIn&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;providedin&quot;&gt;providedIn&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d98b26544caa33d7970f1e8700562e82f0a98c6c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;providers&quot;&gt;providers&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;providers&quot;&gt;providers&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ae467768c531b514317e5f0c0acfc70b3c0796ad" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;pure&quot;&gt;pure&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;pure&quot;&gt;pure&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="69797c29452e4d7843936dedf959686a71274801" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;push&quot;&gt; push() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;push&quot;&gt; push() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4e9dd901dd404f67ed64193c43b654d9cdd2dce6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;pushstate&quot;&gt; pushState() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;pushstate&quot;&gt; pushState() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5e2543713733a622bd57b5be133761d98a81a91e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;put&quot;&gt; put() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;put&quot;&gt; put() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1ba7ca5de1f65b7aabefd3fb3e32bae61bfdfe1a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;queries&quot;&gt;queries&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;queries&quot;&gt;queries&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9cc561da147d2b204f4d3c651fb68ea3ccd5301d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;query&quot;&gt; query() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;query&quot;&gt; query() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="236db9d328da5f26db1014ac6ff7ff2b59707467" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;queryall&quot;&gt; queryAll() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;queryall&quot;&gt; queryAll() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="97bd9db07002b8325907acadd446eb7c571fcb01" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;queryallnodes&quot;&gt; queryAllNodes() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;queryallnodes&quot;&gt; queryAllNodes() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="48f938ee506c6256678fbebea1f2d47e322b92b5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;ready&quot;&gt; ready() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;ready&quot;&gt; ready() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6a8eacb30e3e6941ef92f5e2623340199c68c21e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;reattach&quot;&gt; reattach() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;reattach&quot;&gt; reattach() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="78c45c71245a897960e6edc3ab1716d138e6d319" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;reduce&quot;&gt; reduce() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;reduce&quot;&gt; reduce() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b8f35fa180ee52a4f656c9f7f4d9f58f87cab33c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;register&quot;&gt; register() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;register&quot;&gt; register() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a631168ec6b19194eb131ca757e8347df8d00f97" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;registerapplication&quot;&gt; registerApplication() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;registerapplication&quot;&gt; registerApplication() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="18b608c2b5fabcb688fa6075e4a5165136b27f1f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;registercontrol&quot;&gt; registerControl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;registercontrol&quot;&gt; registerControl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="23df8052401054bfd086d8f0d859078b94007df7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;registerforng1tests&quot;&gt; registerForNg1Tests() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;registerforng1tests&quot;&gt; registerForNg1Tests() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4977666a16475c693a1868417556565589e390f3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;registermethod&quot;&gt; registerMethod() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;registermethod&quot;&gt; registerMethod() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3c612f0c3b1af361e71d8442b780504a42edd13d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;registeronchange&quot;&gt; registerOnChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;registeronchange&quot;&gt; registerOnChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f039faa12aee3316c9f1d0ca13e5a6209c2de088" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;registerondisabledchange&quot;&gt; registerOnDisabledChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;registerondisabledchange&quot;&gt; registerOnDisabledChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="03627b3c09040bb6c3bca41bddd76c8671259d90" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;registerontouched&quot;&gt; registerOnTouched() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;registerontouched&quot;&gt; registerOnTouched() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="341e9880ff7f7690f390aedf17ddfe48fe096d00" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;registeronvalidatorchange&quot;&gt; registerOnValidatorChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;registeronvalidatorchange&quot;&gt; registerOnValidatorChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2f5e18c5a301a84dd105f2f11da7f0c4b74d7028" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;remove&quot;&gt; remove() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;remove&quot;&gt; remove() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3098cc586bea3ff27815849d327b195be8bd19af" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removeat&quot;&gt; removeAt() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removeat&quot;&gt; removeAt() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1beac0d1509c16aae6b3e6795b5221054ef671cb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removeattribute&quot;&gt; removeAttribute() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removeattribute&quot;&gt; removeAttribute() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9aa0f1a435059b2e8f862845cc1164400b354f5d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removechild&quot;&gt; removeChild() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removechild&quot;&gt; removeChild() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e7ed451353f8bd0681ce517957dd95841116169e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removeclass&quot;&gt; removeClass() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removeclass&quot;&gt; removeClass() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6529f481340df3d69f4a6e568e3a465988e82a83" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removecontrol&quot;&gt; removeControl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removecontrol&quot;&gt; removeControl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="cada9fd54481b17cbb739dd84fc60132e5b17d69" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removeformarray&quot;&gt; removeFormArray() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removeformarray&quot;&gt; removeFormArray() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3a68dfdc809992a21bd97d493591c36d703d150d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removeformgroup&quot;&gt; removeFormGroup() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removeformgroup&quot;&gt; removeFormGroup() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a4494c39c5f1d76bfad4940fe642c226790e5577" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removestyle&quot;&gt; removeStyle() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removestyle&quot;&gt; removeStyle() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="7330d3f45ec671fbd62bc9ed669bd88f3e12270b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removetag&quot;&gt; removeTag() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removetag&quot;&gt; removeTag() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8b6967f743b1381dc22725e823a70c74b6031dbc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;removetagelement&quot;&gt; removeTagElement() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;removetagelement&quot;&gt; removeTagElement() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3d27607f782d0697e69712f2508d2a5bedf2a5c5" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;rendercomponent&quot;&gt; renderComponent() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;rendercomponent&quot;&gt; renderComponent() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3b688fa066e8e3207ca5a8eeea5570e2a75bfc55" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;rendertostring&quot;&gt; renderToString() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;rendertostring&quot;&gt; renderToString() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b31bb7acd957470208d00922adff80232213d9d6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;replace&quot;&gt; replace() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;replace&quot;&gt; replace() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e6e288eed1f5f7c69ebabdee742a95c2c772a664" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;replacestate&quot;&gt; replaceState() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;replacestate&quot;&gt; replaceState() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5a10980bce4ccdfd7e1200c92e96efd0dbdc472d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;request&quot;&gt; request() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;request&quot;&gt; request() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2842c9cbd6441abd229c81a6a1134cbc4a43009f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;requestsubscription&quot;&gt; requestSubscription() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;requestsubscription&quot;&gt; requestSubscription() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="88b0189c02cf10caca5e71d503cca57318b6c8b2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;required&quot;&gt; required() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;required&quot;&gt; required() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a4b9a34a3da4ea253a0757b6b3ebdd3b2a24ace4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;requiredtrue&quot;&gt; requiredTrue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;requiredtrue&quot;&gt; requiredTrue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b267d857b0131344314d510772c126d7b27cc11c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;reset&quot;&gt; reset() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;reset&quot;&gt; reset() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d86a3cb82fd96d8cb6acf386e8956e3c47791ad7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resetconfig&quot;&gt; resetConfig() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resetconfig&quot;&gt; resetConfig() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3b1596c4c3455ab1a7b19069dd03e61f3f321cc9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resetform&quot;&gt; resetForm() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resetform&quot;&gt; resetForm() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="75957227ef29083c991473660685f0d210172a61" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resettestenvironment&quot;&gt; resetTestEnvironment() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resettestenvironment&quot;&gt; resetTestEnvironment() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="15d5f4770839472e312b116e78688146e362c1c4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resettestingmodule&quot;&gt; resetTestingModule() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resettestingmodule&quot;&gt; resetTestingModule() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="965c75e330face215acaf6d13aaf7f0cfb6a328d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resolve&quot;&gt; resolve() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resolve&quot;&gt; resolve() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="025dd2c49d93c168cbf0326fe4bb015a20a41cc3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resolve-1&quot;&gt; resolve() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resolve-1&quot;&gt; resolve() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="79ed33ca49b2de4f6ee6ddeb13096056782cfd1d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resolveandcreate&quot;&gt; resolveAndCreate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resolveandcreate&quot;&gt; resolveAndCreate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e44b7e225863c7e96d34dc0cc0fe1251b89cd7cf" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resolveandcreatechild&quot;&gt; resolveAndCreateChild() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resolveandcreatechild&quot;&gt; resolveAndCreateChild() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4cde0806ea4d94eb4de2347048d0068278e9c5c3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resolveandinstantiate&quot;&gt; resolveAndInstantiate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resolveandinstantiate&quot;&gt; resolveAndInstantiate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ab22158fbb58c5be0c990572990e22e4fb825fd1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;resolvecomponentfactory&quot;&gt; resolveComponentFactory() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;resolvecomponentfactory&quot;&gt; resolveComponentFactory() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4e1c9ce9466d90f62fbdd95c714832df8060d687" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;restart&quot;&gt; restart() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;restart&quot;&gt; restart() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9f1ca52ae8082c17d4ab768bc0a67051b8e42808" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;retrieve&quot;&gt; retrieve() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;retrieve&quot;&gt; retrieve() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="94e4bd5878bec9bb95fc67643147536991682b8f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;run&quot;&gt; run() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;run&quot;&gt; run() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="830c48f34fc2b9ca73835cfbf990197c7b75ad44" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;runguarded&quot;&gt; runGuarded() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;runguarded&quot;&gt; runGuarded() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="764504e00085ccdac1524ccde011f71913cec56a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;runonservice&quot;&gt; runOnService() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;runonservice&quot;&gt; runOnService() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="244896470ea04520ccdda95205aa40ad3e4c752e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;runoutsideangular&quot;&gt; runOutsideAngular() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;runoutsideangular&quot;&gt; runOutsideAngular() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="efbbb82802172f66edf0c88f877926f7b4e4f455" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;runtask&quot;&gt; runTask() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;runtask&quot;&gt; runTask() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3c7dd2060e796d580925ad55e9a75440536bfb30" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;sanitize&quot;&gt; sanitize() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;sanitize&quot;&gt; sanitize() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="61d03841f507371539a4d48885355cea053da79e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;schemas&quot;&gt;schemas&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;schemas&quot;&gt;schemas&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f05912ff3c678379fa8424c51a92cdb622fb5b1a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;scrolltoanchor&quot;&gt; scrollToAnchor() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;scrolltoanchor&quot;&gt; scrollToAnchor() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="794dd3be5916d9462bdbafa8e060f0dfacb409c4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;scrolltoposition&quot;&gt; scrollToPosition() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;scrolltoposition&quot;&gt; scrollToPosition() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="435e68b1ad745b50b0c8fe363b984ea12f855531" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;search&quot;&gt; search() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;search&quot;&gt; search() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="27b0be21595a5d282811e7bdcc607ffbedc95df9" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;selector&quot;&gt;selector&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;selector&quot;&gt;selector&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="62d1604cb00106e5c2272d21acaba22cb04f5416" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;selectrootelement&quot;&gt; selectRootElement() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;selectrootelement&quot;&gt; selectRootElement() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="3bd24aa788e8d4e511edf5dbf7c12dfc69ee4eee" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;serialize&quot;&gt; serialize() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;serialize&quot;&gt; serialize() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="20c0cb1f16580ce1d89944af81d6090504dd63b2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;serializebody&quot;&gt; serializeBody() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;serializebody&quot;&gt; serializeBody() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="21460f61054d0b81b3c6a56f09415282d62efe79" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;serializeurl&quot;&gt; serializeUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;serializeurl&quot;&gt; serializeUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fcf401823bca6d0becfe73ec05dcf149dd4f7122" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;set&quot;&gt; set() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;set&quot;&gt; set() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8dd40f57c9533001ebb61a64f9e46e7293395827" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setasyncvalidators&quot;&gt; setAsyncValidators() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setasyncvalidators&quot;&gt; setAsyncValidators() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="43a1ee897bd64ec4ad876e1392c4b7d55d5d2ffd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setattribute&quot;&gt; setAttribute() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setattribute&quot;&gt; setAttribute() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="91db73a4977dc6cf92b2d55e47ecf4153eb167fa" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setbasehref&quot;&gt; setBaseHref() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setbasehref&quot;&gt; setBaseHref() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f0c299c9e42fc85e422c334e5a25233494e6b5a6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setbindingdebuginfo&quot;&gt; setBindingDebugInfo() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setbindingdebuginfo&quot;&gt; setBindingDebugInfo() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="78d591037f219cc64f54a6eabe1de9d94ed70bca" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setcontrol&quot;&gt; setControl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setcontrol&quot;&gt; setControl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2b32512189bb82447656d47fff0643e1503b2628" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setdirty&quot;&gt; setDirty() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setdirty&quot;&gt; setDirty() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4fd894927c715066d582ee3f0a57a0f47edd8ae8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setdisabledstate&quot;&gt; setDisabledState() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setdisabledstate&quot;&gt; setDisabledState() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ced17b6aaddad6155793fa7b976d48323ef6d487" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setelementattribute&quot;&gt; setElementAttribute() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setelementattribute&quot;&gt; setElementAttribute() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="dc0ee12172651e066e3e8cb05e2b1e2797b69202" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setelementclass&quot;&gt; setElementClass() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setelementclass&quot;&gt; setElementClass() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="545a8838696ddaf86ba72c74ef2325fc81f99ea0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setelementproperty&quot;&gt; setElementProperty() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setelementproperty&quot;&gt; setElementProperty() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9cc05a5be61a3f5fdf9ad739c0bc0c4a3d0bdfdc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setelementstyle&quot;&gt; setElementStyle() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setelementstyle&quot;&gt; setElementStyle() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0696d77d35443476884cd20b279bec64fac942e8" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;seterrors&quot;&gt; setErrors() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;seterrors&quot;&gt; setErrors() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="adbcc15c90771f8bf624ac5aeaf6b13871ce539b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;sethistoryscrollrestoration&quot;&gt; setHistoryScrollRestoration() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;sethistoryscrollrestoration&quot;&gt; setHistoryScrollRestoration() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="54d32a5dc6d4e53d95788b6afbc210313ed95cd6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setinitialpath&quot;&gt; setInitialPath() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setinitialpath&quot;&gt; setInitialPath() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="23f875ba1155d0ed1e561f81d5a20981963e2d41" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setinputvalue&quot;&gt; setInputValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setinputvalue&quot;&gt; setInputValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4a2c240de5a7108100ba776e0e6e57738a50a9bb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setoffset&quot;&gt; setOffset() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setoffset&quot;&gt; setOffset() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="60c027588dcd577a8cc7e7c331d527c8a98334ce" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setparent&quot;&gt; setParent() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setparent&quot;&gt; setParent() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="9a54392f69a1eee726c73d68f775bfbc9220a636" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setposition&quot;&gt; setPosition() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setposition&quot;&gt; setPosition() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="5ece4fab6baf6d0145606fdfbe39de54c127fc18" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setproperty&quot;&gt; setProperty() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setproperty&quot;&gt; setProperty() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="189dceca3ac8d28d2a78602d5277e42621996582" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setstyle&quot;&gt; setStyle() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setstyle&quot;&gt; setStyle() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e69a03f1db32afc3f875d12cf8867a7e7c8974a0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;settext&quot;&gt; setText() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;settext&quot;&gt; setText() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0fd3224b517497c0bbffe2589584d40403060f2b" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;settitle&quot;&gt; setTitle() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;settitle&quot;&gt; setTitle() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1e179c880997773f26c40e43166dc996694c0bf2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setuplocationchangelistener&quot;&gt; setUpLocationChangeListener() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setuplocationchangelistener&quot;&gt; setUpLocationChangeListener() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8880ad9443cac40f9bae073793d2dab40e3168bb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setuppreloading&quot;&gt; setUpPreloading() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setuppreloading&quot;&gt; setUpPreloading() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f8edb69c0cab6c64c59ab0df18fa4ed3ad2ffc6e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setvalidators&quot;&gt; setValidators() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setvalidators&quot;&gt; setValidators() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b17d59971e26ebbb4394e2dc88a0df66117c58a0" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;setvalue&quot;&gt; setValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;setvalue&quot;&gt; setValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="500cf06e4e89a82fc4800c1ec16e5907968829f1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;shouldattach&quot;&gt; shouldAttach() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;shouldattach&quot;&gt; shouldAttach() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8ca052ca3fc80333c16f2aa399d2f0fdbb82c5cf" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;shoulddetach&quot;&gt; shouldDetach() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;shoulddetach&quot;&gt; shouldDetach() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="cccf34bd6f524df268d82e9a54c78bd48e5d3364" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;shouldprocessurl&quot;&gt; shouldProcessUrl() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;shouldprocessurl&quot;&gt; shouldProcessUrl() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="71a165d7dae190caad628aa63cfb58ddb24d998f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;shouldreuseroute&quot;&gt; shouldReuseRoute() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;shouldreuseroute&quot;&gt; shouldReuseRoute() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="e30ca575614c0238fc8d10c2e1b7f1945cf9a799" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;simulatehashchange&quot;&gt; simulateHashChange() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;simulatehashchange&quot;&gt; simulateHashChange() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f3dc7ad07821b28ceb46ea6dce477bad2d22afd7" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;simulatepopstate&quot;&gt; simulatePopState() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;simulatepopstate&quot;&gt; simulatePopState() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="341120a595645af02b9f7cf61028adb50ecd2c67" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;simulateurlpop&quot;&gt; simulateUrlPop() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;simulateurlpop&quot;&gt; simulateUrlPop() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="017fd95d4a4b1eec2778be104839df83e994565a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;some&quot;&gt; some() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;some&quot;&gt; some() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1a71b46e9432dded41801bd5fbae9a1ee84a599e" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;state&quot;&gt; state() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;state&quot;&gt; state() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f53940c26d50e1b895efa3272d5d6bc6cfdc3b0f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;store&quot;&gt; store() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;store&quot;&gt; store() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b5b4df686bba99e103c3ddc39f48bdda92b973eb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;striptrailingslash&quot;&gt; stripTrailingSlash() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;striptrailingslash&quot;&gt; stripTrailingSlash() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="579a36bf9cc883e39a7d57672d27b3f2737dda78" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;styles&quot;&gt;styles&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;styles&quot;&gt;styles&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ac29ebbe0ecf784249044ab6e000e60aaad63442" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;styleurls&quot;&gt;styleUrls&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;styleurls&quot;&gt;styleUrls&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b968d338e4f9ee8d2b5cfee90c5dba6160dae5cc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;subscribe&quot;&gt; subscribe() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;subscribe&quot;&gt; subscribe() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ae97301eddbcf9825e1fdcedf3a8bc4fb135f9b4" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;supports&quot;&gt; supports() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;supports&quot;&gt; supports() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="32621f1f72eae9776813bc699a5ddb64e4981735" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;template&quot;&gt;template&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;template&quot;&gt;template&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="38011b5fc676a79b92e91b6b3798249c851ced14" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;templateurl&quot;&gt;templateUrl&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;templateurl&quot;&gt;templateUrl&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c28c2820cf42c26e02a82782fcebb30b9e8ef4ec" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;tick&quot;&gt; tick() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;tick&quot;&gt; tick() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="dad4e5dd0503b00a2fe945a1baccda23b06216e2" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;to&quot;&gt; to() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;to&quot;&gt; to() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="21a1b842a9d1d2357faddfe9d316577f9d67b2cc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;toarray&quot;&gt; toArray() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;toarray&quot;&gt; toArray() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="eb38f275cc115010e4c70ee8a259c2d2b9484d97" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;tojson&quot;&gt; toJson() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;tojson&quot;&gt; toJson() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6dfb02353c0b27b9c119c406fac102f41824e26f" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;tostring&quot;&gt; toString() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;tostring&quot;&gt; toString() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="37d04c948684675e7a813349095af9f4cea44a3d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;transform&quot;&gt; transform() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;transform&quot;&gt; transform() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="510e37b8a1baf8ced82ccd363a1428a21cefae63" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;triggereventhandler&quot;&gt; triggerEventHandler() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;triggereventhandler&quot;&gt; triggerEventHandler() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d2d0213304c4ec67e7d6dceac27ba089dd015e76" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;triggermicrotask&quot;&gt; triggerMicrotask() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;triggermicrotask&quot;&gt; triggerMicrotask() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b07d9c660f8e24836fa232a54e3ca322682f48d1" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;unregisterallapplications&quot;&gt; unregisterAllApplications() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;unregisterallapplications&quot;&gt; unregisterAllApplications() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="32b4380e8293b0e9dda5263c7847889bb80f4fc6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;unregisterapplication&quot;&gt; unregisterApplication() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;unregisterapplication&quot;&gt; unregisterApplication() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="ddd5b63325667d8e1ebf37e4ba3aa17e08ac2ca6" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;unsubscribe&quot;&gt; unsubscribe() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;unsubscribe&quot;&gt; unsubscribe() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c3a82955191c962ec3229eba8b358a1bbc68020c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;unwrap&quot;&gt; unwrap() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;unwrap&quot;&gt; unwrap() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="cb2e298db4ca9dd59d45f7d6a74479510e02af97" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;updatemodel&quot;&gt; updateModel() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;updatemodel&quot;&gt; updateModel() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="deaf128dfd512fb7e8e6bfbbbfff366c73807f83" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;updatetag&quot;&gt; updateTag() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;updatetag&quot;&gt; updateTag() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="667a91bd2a056fba3ae8d232f5e61aec9cc0d480" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;updatevalueandvalidity&quot;&gt; updateValueAndValidity() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;updatevalueandvalidity&quot;&gt; updateValueAndValidity() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="1a312af16964a85245e2d1515768f31b286f3cdd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;upgradeng1component&quot;&gt; upgradeNg1Component() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;upgradeng1component&quot;&gt; upgradeNg1Component() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d4f419d79219d3e6e3835288efa7b15858c613b3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;upgradeng1provider&quot;&gt; upgradeNg1Provider() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;upgradeng1provider&quot;&gt; upgradeNg1Provider() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="a50658ec684adf1de6fe9595ce379876c19305eb" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;url&quot;&gt; url() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;url&quot;&gt; url() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="6c0b5e7bcfeb8f47857f3e4e5be7cdf31603f94c" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;validate&quot;&gt; validate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;validate&quot;&gt; validate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="d0e50f3c6e1518fd58afdf4ea8892f8586d28b3d" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;validatestyleproperty&quot;&gt; validateStyleProperty() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;validatestyleproperty&quot;&gt; validateStyleProperty() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="cea02dae97fd39420deb783a4488da4b7c1bbd19" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;verify&quot;&gt; verify() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;verify&quot;&gt; verify() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f76db5fbd7b657d2535ce38faafde016377cd814" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;viewproviders&quot;&gt;viewProviders&lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;viewproviders&quot;&gt;viewProviders&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="289f18202c00afa198274a7eb3a8bd1f5031e733" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;viewtomodelupdate&quot;&gt; viewToModelUpdate() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;viewtomodelupdate&quot;&gt; viewToModelUpdate() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="58d63dc739b73222aa350279d7308f3ffeed4bd3" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;whenrenderingdone&quot;&gt; whenRenderingDone() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;whenrenderingdone&quot;&gt; whenRenderingDone() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="329dc9b5336157aabcf1dbdd69390d3cbca22a22" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;whenstable&quot;&gt; whenStable() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;whenstable&quot;&gt; whenStable() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c0397a5b50fb5dd090742c8a4b16558cb44446bc" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;withconfig&quot;&gt; withConfig() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;withconfig&quot;&gt; withConfig() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0e42f5ab1ed5259398d599c6bad03b62bf63302a" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;withoptions&quot;&gt; withOptions() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;withoptions&quot;&gt; withOptions() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="88f615377f1f9d59f8391f2d2976c67ffc4469cd" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;withroutes&quot;&gt; withRoutes() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;withroutes&quot;&gt; withRoutes() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="16ece139f123d2910947eb0b306806a03320b056" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;withservertransition&quot;&gt; withServerTransition() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;withservertransition&quot;&gt; withServerTransition() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="b3fdb7a5585829e4fc69fb21a0c7f44de4115385" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;wrap&quot;&gt; wrap() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;wrap&quot;&gt; wrap() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="fbe93c2ca550fb359728cf3d8b5afbc970b206ef" translate="yes" xml:space="preserve">
          <source>&lt;span id=&quot;writevalue&quot;&gt; writeValue() &lt;/span&gt;</source>
          <target state="translated">&lt;span id=&quot;writevalue&quot;&gt; writeValue() &lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="4b1a0f312b01a5723f54666d9ee64c761c413e9a" translate="yes" xml:space="preserve">
          <source>&lt;span name=&quot;getting-started-v0&quot;&gt;Click here to create a new project in StackBlitz.&lt;/span&gt;</source>
          <target state="translated">&lt;span name=&quot;getting-started-v0&quot;&gt;StackBlitzで新しいプロジェクトを作成するには、ここをクリックしてください。&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="0061e2ed66693498025d4ccb68d6899a95d8c1e5" translate="yes" xml:space="preserve">
          <source>&lt;span name=&quot;router&quot;&gt;Live Example from the Router guide&lt;/span&gt;</source>
          <target state="translated">&lt;span name=&quot;router&quot;&gt;ルーターガイドの実例&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="2399fd8f80b20cb284e5ef315b6d7a1ada5d00f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;params&lt;/code&gt;&lt;/strong&gt;&amp;mdash;An &lt;code&gt;Observable&lt;/code&gt; that contains the required and &lt;a href=&quot;router#optional-route-parameters&quot;&gt;optional parameters&lt;/a&gt; specific to the route. Use &lt;code&gt;paramMap&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;params&lt;/code&gt; &lt;/strong&gt; &amp;mdash;ルートに固有の必須および&lt;a href=&quot;router#optional-route-parameters&quot;&gt;オプションのパラメーター&lt;/a&gt;を含む &lt;code&gt;Observable&lt;/code&gt; 。代わりに &lt;code&gt;paramMap&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="b9956320384b1fed329df6dbbcc21732c383010c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;queryParams&lt;/code&gt;&lt;/strong&gt;&amp;mdash;An &lt;code&gt;Observable&lt;/code&gt; that contains the &lt;a href=&quot;router#query-parameters&quot;&gt;query parameters&lt;/a&gt; available to all routes. Use &lt;code&gt;queryParamMap&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;queryParams&lt;/code&gt; &lt;/strong&gt; &amp;mdash;すべてのルートで使用可能な&lt;a href=&quot;router#query-parameters&quot;&gt;クエリパラメータ&lt;/a&gt;を含む &lt;code&gt;Observable&lt;/code&gt; 。代わりに &lt;code&gt;queryParamMap&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="926581d08807c2338d38b3dace8f8a713479af84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Ahead-of-Time&lt;/em&gt; (AOT)&lt;/strong&gt;, which compiles your app at build time.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;ビルド時にアプリをコンパイルする&lt;strong&gt;&lt;em&gt; Ahead-of-Time&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;（AOT）&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9c379b007b1be9cf370b7151e6ef84c68dd997d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Do not click either button yet&lt;/em&gt;&lt;/strong&gt;. Click the browser back button or the &quot;Heroes&quot; link instead.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;まだどちらのボタンもクリックしないでください&lt;/em&gt;&lt;/strong&gt;。代わりに、ブラウザの戻るボタンまたは「ヒーロー」リンクをクリックしてください。</target>
        </trans-unit>
        <trans-unit id="fb71b13de48cff9a792778fd5929e5db42204f7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Just-in-Time&lt;/em&gt; (JIT)&lt;/strong&gt;, which compiles your app in the browser at runtime.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;Just-in-Time&lt;/em&gt;（JIT）は&lt;/strong&gt;、実行時にブラウザーでアプリをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="ec81a30e0811f7baf83e33905aabdb9eea98e772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;bootstrap&lt;/em&gt;&lt;/strong&gt;&amp;mdash;the &lt;em&gt;root&lt;/em&gt; component that Angular creates and inserts into the &lt;code&gt;index.html&lt;/code&gt; host web page.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;ブートストラップ&lt;/em&gt;&lt;/strong&gt; &amp;mdash;Angularが作成し、 &lt;code&gt;index.html&lt;/code&gt; ホストWebページに挿入する&lt;em&gt;ルート&lt;/em&gt;コンポーネント。</target>
        </trans-unit>
        <trans-unit id="ddd00836d36adffc91dbac9dbc07db15b1f07db4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;declarations&lt;/em&gt;&lt;/strong&gt;&amp;mdash;this application's lone component.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;宣言&lt;/em&gt;&lt;/strong&gt; &amp;mdash;このアプリケーションの唯一のコンポーネント。</target>
        </trans-unit>
        <trans-unit id="6ac59a665f8320fb665ffcec31d0d9467adf4b86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;imports&lt;/em&gt;&lt;/strong&gt;&amp;mdash;import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; to have browser specific services such as DOM rendering, sanitization, and location.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;輸入&lt;/em&gt;&lt;/strong&gt; -import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; は、このようなDOMのレンダリング、消毒、および場所として、ブラウザの特定のサービスを持っています。</target>
        </trans-unit>
        <trans-unit id="22e2831b82655d1bb40496c97676096936244773" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;providers&lt;/em&gt;&lt;/strong&gt;&amp;mdash;the service providers.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;プロバイダ&lt;/em&gt;&lt;/strong&gt; &amp;mdash;サービスプロバイダ。</target>
        </trans-unit>
        <trans-unit id="882eada190c140381d5a8e526fb865d24874bfb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/animations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/animations&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b1287514d31e8c3c6afababcc610730c4f7100a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/cli&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/cli&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1dc131efca3c8f0917463bece0f4531fe9ebe560" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/common&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/common&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="24417b89241db89ffc6fa65a2342aaaf28660466" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/compiler&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/compiler&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4ec680bfa1102449876c9a68880656cd1555eb3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/compiler‑cli&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/compiler‑cli&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65f8bf21bf57bdd2832376f96ffe72d631447bac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/core&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/core&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15914ee8a77f1c4eb2d0bae83e20c54241e03205" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/forms&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/forms&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="030b12243885ac96f1b15f1479441c20bffcb6ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/language‑service&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/language‑service&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f47edf9e26bfbe27e99754ca4c3b2a496b81feb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/platform‑browser&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/platform‑browser&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f246406e3c28696ae361b2c9c26e2fb047d2445" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/platform‑browser‑dynamic&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/platform‑browser‑dynamic&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e10a209bf38240aaf01ef6b84740c43f01fae1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular/router&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular/router&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="962b3ab88cd0a07036c416e549be9909517c8807" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@angular‑devkit/build‑angular&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@angular‑devkit/build‑angular&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a111656b379080ca4becca1e6ad5f9c71903258c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;@types/... &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;@types/... &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ba22a9c476d855afaa2849fb1d6cfc75cff0e236" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A component class&lt;/strong&gt; that handles data and functionality. In the previous section, the product data and the &lt;code&gt;share()&lt;/code&gt; method in the component class handle data and functionality, respectively.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;データと機能を処理&lt;strong&gt;するコンポーネントクラス&lt;/strong&gt;。前のセクションでは、コンポーネントクラスの製品データと &lt;code&gt;share()&lt;/code&gt; メソッドがそれぞれデータと機能を処理します。</target>
        </trans-unit>
        <trans-unit id="c7eb6ccc0fec995ea50e2505216865f668106186" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Always &lt;em&gt;subscribe&lt;/em&gt;!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;常に&lt;em&gt;購読&lt;/em&gt;！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4dd3d0fd7d95e54366a4864b8a1949979bc3b5fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Always follow the section heading with at least one blank line.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;常にセクション見出しの後に少なくとも1つの空白行を置いてください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dd28683a1bb9e70a9624bcf2ed6037e597adacfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Always follow the title with at least one blank line.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タイトルの後には必ず少なくとも1行の空白行を入れてください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bae8352445003e5c90f3977a267ce83ab9c6dc6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Always&lt;/strong&gt; follow every opening and closing HTML tag with &lt;em&gt;a blank line&lt;/em&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;すべての開始および終了HTMLタグの後には&lt;strong&gt;必ず&lt;/strong&gt;&lt;em&gt;空白行を入れてください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0c33b9eaeb6663d2ee708f210b56ba8ac8b915f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Always&lt;/strong&gt; specify the complete &lt;em&gt;absolute&lt;/em&gt; path when calling router's &lt;code&gt;navigateByUrl&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ルーターの &lt;code&gt;navigateByUrl&lt;/code&gt; メソッドを呼び出すときは、&lt;strong&gt;常に&lt;/strong&gt;完全&lt;em&gt;な絶対&lt;/em&gt;パスを指定してください。</target>
        </trans-unit>
        <trans-unit id="9f3e51691add91a33a7a92109cd91a63d7337525" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An HTML template&lt;/strong&gt; that determines the UI. In the previous section, the product list's HTML template displays the name, description, and a &quot;Share&quot; button for each product.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;UIを決定&lt;strong&gt;するHTMLテンプレート&lt;/strong&gt;。前のセクションでは、製品リストのHTMLテンプレートに、各製品の名前、説明、および[共有]ボタンが表示されています。</target>
        </trans-unit>
        <trans-unit id="efba267cd8e72994170e372e99a1f3b82d0fdd8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Angular coding style:&lt;/strong&gt; Coding style for example apps and code snippets. Code examples are encouraged for demonstrating how to apply the concepts and features discussed. Angular has a custom framework that enables authors to include code snippets directly from example apps that are automatically tested as part of doc builds. To contribute example code, you must understand Angular itself and the custom framework for Angular doc examples.</source>
          <target state="translated">&lt;strong&gt;Angularコーディングスタイル：&lt;/strong&gt;サンプルアプリやコードスニペットのコーディングスタイル。説明されている概念と機能を適用する方法を示すために、コード例が推奨されます。Angularには、作成者がドキュメントビルドの一部として自動的にテストされるサンプルアプリから直接コードスニペットを含めることができるカスタムフレームワークがあります。サンプルコードを提供するには、Angular自体と、Angular docサンプルのカスタムフレームワークを理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="a5ef1b8117fa06d080da02258ad22b2ad1e0436a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Angular coding style&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;角度コーディングスタイル&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="87fe2d5b4eda11833e9c4e4accff593ce2256438" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Announcement:&lt;/strong&gt; We announce deprecated APIs and features in the &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;change log&lt;/a&gt;. Deprecated APIs appear in the &lt;a href=&quot;api?status=deprecated&quot;&gt;documentation&lt;/a&gt; with &lt;del&gt;strikethrough.&lt;/del&gt; When we announce a deprecation, we also announce a recommended update path. For convenience, &lt;a href=&quot;deprecations&quot;&gt;Deprecations&lt;/a&gt; contains a summary of deprecated APIs and features.</source>
          <target state="translated">&lt;strong&gt;お知らせ：&lt;/strong&gt;非推奨のAPIと機能を&lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;変更ログ&lt;/a&gt;で&lt;strong&gt;お知らせし&lt;/strong&gt;ます。非推奨APIはで表示されます&lt;a href=&quot;api?status=deprecated&quot;&gt;ドキュメント&lt;/a&gt;に&lt;del&gt;取り消し線。&lt;/del&gt;サポート終了を発表する際には、推奨されるアップデートパスも発表します。便宜上、&lt;a href=&quot;deprecations&quot;&gt;Deprecations&lt;/a&gt;には非推奨のAPIと機能の概要が含まれています。</target>
        </trans-unit>
        <trans-unit id="09f4443909d70a113a73e5d66d3a4a18219ba347" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;App navigation&lt;/strong&gt;: request URL with no file extension.</source>
          <target state="translated">&lt;strong&gt;アプリのナビゲーション&lt;/strong&gt;：ファイル拡張子なしのリクエストURL。</target>
        </trans-unit>
        <trans-unit id="6f54e6570b66e2c3ded62294c61703110786eb4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Async validators&lt;/strong&gt;: functions that take a control instance and return a Promise or Observable that later emits a set of validation errors or &lt;code&gt;null&lt;/code&gt;. You can pass these in as the third argument when you instantiate a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非同期バリデーター&lt;/strong&gt;：コントロールインスタンスを取得し、後で一連の検証エラーまたは &lt;code&gt;null&lt;/code&gt; を発行するPromiseまたはObservableを返す関数。 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; をインスタンス化するときに、これらを3番目の引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="3ebeadf3441a9489eb93ce5d5ed66976d77350a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Audience:&lt;/strong&gt; Use this guide &lt;strong&gt;only&lt;/strong&gt; in the context of &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt; or &lt;a href=&quot;upgrade-performance&quot;&gt;Upgrading for Performance&lt;/a&gt;. Those Upgrade guides refer to this Setup guide for information about using the &lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;deprecated QuickStart GitHub repository&lt;/a&gt;, which was created prior to the current Angular &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;対象読者：&lt;/strong&gt;このガイド&lt;strong&gt;は&lt;/strong&gt;、&lt;a href=&quot;upgrade&quot;&gt;AngularJSから&lt;/a&gt;のアップグレードまたは&lt;a href=&quot;upgrade-performance&quot;&gt;パフォーマンス&lt;/a&gt;向上のためのアップグレードのコンテキストで&lt;strong&gt;のみ&lt;/strong&gt;使用してください。これらのアップグレードガイドは、現在のAngular &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;より前に作成された&lt;a href=&quot;https://github.com/angular/quickstart&quot;&gt;非推奨のQuickStart GitHubリポジトリの&lt;/a&gt;使用について、このセットアップガイドを参照しています。</target>
        </trans-unit>
        <trans-unit id="7dba8a2b7938b37de3c2b1537451532b49aec364" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Avoid Angular APIs marked in the documentation as &amp;ldquo;&lt;em&gt;Security Risk&lt;/em&gt;.&amp;rdquo;&lt;/strong&gt; For more information, see the &lt;a href=&quot;security#bypass-security-apis&quot;&gt;Trusting safe values&lt;/a&gt; section of this page.</source>
          <target state="translated">&lt;strong&gt;ドキュメントで「&lt;em&gt;セキュリティリスク&lt;/em&gt;」としてマークされているAngular APIは避けてください。&lt;/strong&gt;詳細については、このページの「&lt;a href=&quot;security#bypass-security-apis&quot;&gt;安全な値を信頼する」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a55ccf85926c09d85cb83bb7465fd1d17da0692b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Avoid&lt;/strong&gt; allowing modules in sibling and parent folders to directly import a module in a &lt;em&gt;lazy loaded feature&lt;/em&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;兄弟および親フォルダー内のモジュールが、&lt;em&gt;遅延読み込み機能で&lt;/em&gt;モジュールを直接インポートすることを許可し&lt;strong&gt;ないでください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="5bb67df40eef8cf924a046e9d9d035e6c2f431b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Avoid&lt;/strong&gt; being so DRY that you sacrifice readability.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;読みやすさを犠牲にするほど乾燥しすぎ&lt;strong&gt;ない&lt;/strong&gt;ようにして&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="55a14c88b43e780842c605b7885479983b8364f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Avoid&lt;/strong&gt; files with multiple components, multiple services, or a mixture.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;複数のコンポーネント、複数のサービス、またはそれらが混在するファイルは&lt;strong&gt;避けてください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="e3061502218edcc28e3ba8b28b46f97875e9aa11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Avoid&lt;/strong&gt; indicates something you should almost never do. Code examples to &lt;em&gt;avoid&lt;/em&gt; have an unmistakable red header.</source>
          <target state="translated">&lt;strong&gt;「避ける&lt;/strong&gt;」は、ほとんどしてはいけ&lt;strong&gt;ない&lt;/strong&gt;ことを示します。&lt;em&gt;回避する&lt;/em&gt;コード例には、紛れもない赤いヘッダーがあります。</target>
        </trans-unit>
        <trans-unit id="68b96579bf2fc47c0cbe1deabcdb44419088aece" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Avoid&lt;/strong&gt; putting app logic in &lt;code&gt;main.ts&lt;/code&gt;. Instead, consider placing it in a component or service.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;アプリのロジックを &lt;code&gt;main.ts&lt;/code&gt; に配置し&lt;strong&gt;ないでください&lt;/strong&gt;。代わりに、コンポーネントまたはサービスに配置することを検討してください。</target>
        </trans-unit>
        <trans-unit id="fdf4caaa3dabe97430fc1e563611b7b8e679a578" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Avoid&lt;/strong&gt; specifying app-wide singleton providers in a &lt;code&gt;SharedModule&lt;/code&gt;. Intentional singletons are OK. Take care.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;SharedModule&lt;/code&gt; でアプリ全体のシングルトンプロバイダー&lt;strong&gt;を&lt;/strong&gt;指定し&lt;strong&gt;ないでください&lt;/strong&gt;。意図的なシングルトンは問題ありません。気を付けて。</target>
        </trans-unit>
        <trans-unit id="b8a1041eb17149955f2f0a0d16ff9273d2ab042f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Avoid&lt;/strong&gt;&lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; aliases except when it serves an important purpose.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;重要な目的を果たす場合を除いて、&lt;em&gt;入力&lt;/em&gt;と&lt;em&gt;出力の&lt;/em&gt;エイリアスは&lt;strong&gt;避けてください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a83121790199c1336a68fc68bd2c38e0d75ff1d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Beta:&lt;/strong&gt; A release that is under active development and testing. A Beta release is indicated by a release tag appended with the &lt;code&gt;beta&lt;/code&gt; identifier, such as &lt;code&gt;8.0.0-beta.0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ベータ：&lt;/strong&gt;開発とテストが活発に行われているリリース。ベータリリースは、 &lt;code&gt;8.0.0-beta.0&lt;/code&gt; などの &lt;code&gt;beta&lt;/code&gt; 識別子が付加されたリリースタグで示されます。</target>
        </trans-unit>
        <trans-unit id="e607dc0101732578d469ccff26859e28e6a36f89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bind to &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;. The &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; directives are &lt;em&gt;structural&lt;/em&gt; directives because they add or remove elements from the DOM.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; に&lt;/strong&gt;&lt;strong&gt;バインドし&lt;/strong&gt;ます。 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; ディレクティブは、&lt;em&gt;構造的な&lt;/em&gt;彼らはDOMから要素を追加したり削除したりするのでディレクティブ。</target>
        </trans-unit>
        <trans-unit id="f01da5ebd921ad9c256a0d1688b34f15c1559d13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bind to &lt;code&gt;[&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;]&lt;/code&gt;&lt;/strong&gt;. You'll get an error if you try to set &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; because &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; is an &lt;em&gt;attribute&lt;/em&gt; directive, not a &lt;em&gt;structural&lt;/em&gt; directive. Rather than touching the DOM directly, it changes the behavior of its companion directives.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;[&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;]&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;バインドし&lt;/strong&gt;ます。 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; は&lt;em&gt;構造&lt;/em&gt;ディレクティブではなく&lt;em&gt;属性&lt;/em&gt;ディレクティブであるため、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; を設定しようとするとエラーが発生します。DOMに直接触れるのではなく、コンパニオンディレクティブの動作を変更します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3ead957e2e891e91a51a4dc45800e2b5b006c16a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Caution:&lt;/strong&gt; Use these HTML5 validation attributes &lt;em&gt;in combination with&lt;/em&gt; the built-in validators provided by Angular's reactive forms. Using these in combination prevents errors when the expression is changed after the template has been checked.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;これらのHTML5検証属性&lt;em&gt;は&lt;/em&gt;、Angularのリアクティブフォームによって提供される組み込みバリデーター&lt;em&gt;と組み合わせて&lt;/em&gt;使用してください。これらを組み合わせて使用​​すると、テンプレートのチェック後に式が変更されたときにエラーが発生しなくなります。</target>
        </trans-unit>
        <trans-unit id="67a2a1278ad976d0be465f436291f5fa409acfdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Completion&lt;/strong&gt; Either the task is fully completed (for example, webpack was supposed to run a number of times), or the builder run was stopped (using &lt;code&gt;BuilderRun.stop()&lt;/code&gt;). Your teardown logic is executed, and Architect unsubscribes from your builder&amp;rsquo;s Observable.</source>
          <target state="translated">&lt;strong&gt;完了&lt;/strong&gt;タスクが完全に完了したか（たとえば、webpackが何度も実行されるはずでした）、またはビルダーの実行が停止されました（ &lt;code&gt;BuilderRun.stop()&lt;/code&gt; を使用）。ティアダウンロジックが実行され、ArchitectはビルダーのObservableからサブスクライブを解除します。</target>
        </trans-unit>
        <trans-unit id="242f5be4da7e8c2c03b6303664ddb295af31197b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Component-specific styles&lt;/strong&gt; that define the look and feel. Though product list does not define any styles, this is where component CSS resides.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ルックアンドフィールを定義する&lt;strong&gt;コンポーネント固有のスタイル&lt;/strong&gt;。製品リストはスタイルを定義していませんが、ここにコンポーネントCSSが存在します。</target>
        </trans-unit>
        <trans-unit id="87b091349eb0d3f0abc63b529c765cca7b258fcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Composability/Grouping:&lt;/strong&gt; Bringing NgModules together and making them available via the &lt;code&gt;imports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; arrays.</source>
          <target state="translated">&lt;strong&gt;構成可能性/グループ化：&lt;/strong&gt; NgModuleを1つにまとめ、 &lt;code&gt;imports&lt;/code&gt; および &lt;code&gt;exports&lt;/code&gt; 配列を介してそれらを使用可能にします。</target>
        </trans-unit>
        <trans-unit id="db36e5fbaa1c90cc36d9b39f8d08fdda2f5a4b51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; adjusting the rules in codelyzer to suit your needs.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;codelyzerのルールをニーズに合わせて調整することを&lt;strong&gt;検討&lt;/strong&gt;してください。</target>
        </trans-unit>
        <trans-unit id="d890fcb5f2895e976d9b2bf259857b4478df93cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; configuring the IDE to hide distracting, irrelevant files such as generated &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.js.map&lt;/code&gt; files.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;生成された &lt;code&gt;.js&lt;/code&gt; ファイルや &lt;code&gt;.js.map&lt;/code&gt; ファイルなど、気が散る無関係なファイルを隠すようにIDEを構成する&lt;strong&gt;ことを検討してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7811c4dddce4fa1adfdb1d5604a05ab7ef764b3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; creating a folder for a component when it has multiple accompanying files (&lt;code&gt;.ts&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt; and &lt;code&gt;.spec&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントに複数の付随ファイル（ &lt;code&gt;.ts&lt;/code&gt; 、 &lt;code&gt;.html&lt;/code&gt; 、 &lt;code&gt;.css&lt;/code&gt; および &lt;code&gt;.spec&lt;/code&gt; ）がある場合は、コンポーネント用のフォルダーを作成することを&lt;strong&gt;検討&lt;/strong&gt;してください。</target>
        </trans-unit>
        <trans-unit id="d57663b06f9042193805f0c48cdfcb0bfcf70931" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; creating sub-folders when a folder reaches seven or more files.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;フォルダーが7つ以上のファイルに達したら、サブフォルダー&lt;strong&gt;を&lt;/strong&gt;作成することを&lt;strong&gt;検討してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6ba75e947bed10b370258a950fe9a5b4bc2690f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; giving components an &lt;em&gt;element&lt;/em&gt; selector, as opposed to &lt;em&gt;attribute&lt;/em&gt; or &lt;em&gt;class&lt;/em&gt; selectors.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;属性&lt;/em&gt;または&lt;em&gt;クラス&lt;/em&gt;セレクターではなく、コンポーネントセレクターに&lt;em&gt;要素&lt;/em&gt;セレクター&lt;strong&gt;を&lt;/strong&gt;与えることを&lt;strong&gt;検討してください&lt;/strong&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f812a0b51c5451dc6933330add82143c3ad4d978" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; guidelines should generally be followed. If you fully understand the meaning behind the guideline and have a good reason to deviate, then do so. Please strive to be consistent.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;一般にガイドラインに従う必要があることを&lt;strong&gt;考慮して&lt;/strong&gt;ください。ガイドラインの背後にある意味を完全に理解していて、逸脱する正当な理由がある場合は、そうしてください。一貫性を保つよう努めてください。</target>
        </trans-unit>
        <trans-unit id="64dd353265db43a7bd136c7a41c37a7d60a6e8c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; limiting files to 400 lines of code.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ファイルを400行のコードに制限することを&lt;strong&gt;検討してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c5cae10665a0270e443186244f5ceddc6e81c097" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; limiting to no more than 75 lines.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;75行以下に制限することを&lt;strong&gt;検討してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4ee032cca6c29ddb2447b42824e44f0fa78c74bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; naming the root module &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ルートモジュールに &lt;code&gt;app.module.ts&lt;/code&gt; という名前を付けることを&lt;strong&gt;検討してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7af92359f20e5a41482d3fde2e56b496f75a820c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; placing &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; on the same line as the property it decorates.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; を、装飾するプロパティと同じ行に配置することを&lt;strong&gt;検討してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="699868a35d32ee19c4bd6a70d513765253f0d7d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; preferring the &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorators.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/directive&quot;&gt;ディレクティブ&lt;/a&gt;および &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;デコレーターの &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; プロパティよりも優先することを&lt;strong&gt;検討してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ed8b86789563c95a9dd085de3fdeb2d098826c9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using &lt;a href=&quot;https://atom.io/packages/angular-2-typescript-snippets&quot;&gt;snippets&lt;/a&gt; for &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; that follow these styles and guidelines.</source>
          <target state="translated">&lt;strong&gt;考えてみましょう&lt;/strong&gt;使用して&lt;a href=&quot;https://atom.io/packages/angular-2-typescript-snippets&quot;&gt;スニペット&lt;/a&gt;用&lt;a href=&quot;https://atom.io/&quot;&gt;のAtom&lt;/a&gt;これらのスタイルとガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="24d4cb492e12f510bdd09e2eea94d855ec75e8f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using &lt;a href=&quot;https://github.com/mhartington/vim-angular2-snippets&quot;&gt;snippets&lt;/a&gt; for &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt; that follow these styles and guidelines.</source>
          <target state="translated">&lt;strong&gt;考えてみましょう&lt;/strong&gt;使用して&lt;a href=&quot;https://github.com/mhartington/vim-angular2-snippets&quot;&gt;スニペット&lt;/a&gt;用&lt;a href=&quot;http://www.vim.org/&quot;&gt;のVim&lt;/a&gt;これらのスタイルとガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="a6f41699986d39d799bceff1c431cd2ab77823b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using &lt;a href=&quot;https://github.com/orizens/sublime-angular2-snippets&quot;&gt;snippets&lt;/a&gt; for &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; that follow these styles and guidelines.</source>
          <target state="translated">&lt;strong&gt;考えてみましょう&lt;/strong&gt;使用して&lt;a href=&quot;https://github.com/orizens/sublime-angular2-snippets&quot;&gt;スニペット&lt;/a&gt;のための&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;崇高なテキスト&lt;/a&gt;これらのスタイルとガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="41ec4d969a410f664dc34b3fd2f353bcb573d205" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2&quot;&gt;snippets&lt;/a&gt; for &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; that follow these styles and guidelines.</source>
          <target state="translated">&lt;strong&gt;考えてみましょう&lt;/strong&gt;使用して&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2&quot;&gt;スニペット&lt;/a&gt;用&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;のVisual Studioのコード&lt;/a&gt;これらのスタイルとガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="634508664461f7cdb59e0e1f093e99597ffb329f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt; using the name SharedModule when the contents of a shared module are referenced across the entire application.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;共有モジュールのコンテンツがアプリケーション全体で参照される場合は、SharedModuleという名前の使用を&lt;strong&gt;検討&lt;/strong&gt;して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b157426ab1709e92e2943d1ac9a63918d7e02346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Consider&lt;/strong&gt;&lt;em&gt;not&lt;/em&gt; providing services in shared modules. Services are usually singletons that are provided once for the entire application or in a particular feature module. There are exceptions, however. For example, in the sample code that follows, notice that the &lt;code&gt;SharedModule&lt;/code&gt; provides &lt;code&gt;FilterTextService&lt;/code&gt;. This is acceptable here because the service is stateless;that is, the consumers of the service aren't impacted by new instances.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;共有モジュールでサービスを提供し&lt;em&gt;ない&lt;/em&gt;ことを&lt;strong&gt;検討してください&lt;/strong&gt;。サービスは通常、アプリケーション全体または特定の機能モジュールで一度提供されるシングルトンです。ただし、例外があります。たとえば、次のサンプルコードでは、 &lt;code&gt;SharedModule&lt;/code&gt; がFilterTextServiceを提供していることに注意して &lt;code&gt;FilterTextService&lt;/code&gt; 。サービスはステートレスであるため、つまり、サービスのコンシューマーが新しいインスタンスの影響を受けないため、これはここで許容されます。</target>
        </trans-unit>
        <trans-unit id="ac00e428f072bd36633594b46edcf64c28c1666e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED&lt;/strong&gt;: Use &lt;code&gt;queryParamsHandling: &quot;preserve&quot;&lt;/code&gt; instead to preserve query parameters for the next navigation.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;：使用 &lt;code&gt;queryParamsHandling: &quot;preserve&quot;&lt;/code&gt; ではなく次のナビゲーション用のクエリパラメータを維持するために。</target>
        </trans-unit>
        <trans-unit id="08eec026d337b1bf8558f293be8118ccaf49af79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DISABLED&lt;/strong&gt;: This control is exempt from validation checks.</source>
          <target state="translated">&lt;strong&gt;DISABLED&lt;/strong&gt;：このコントロールは検証チェックの対象外です。</target>
        </trans-unit>
        <trans-unit id="083896d6fad806eada6448347f24470017fcc823" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Data request&lt;/strong&gt;: request URL that begins &lt;code&gt;/api&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;データ要求&lt;/strong&gt;： &lt;code&gt;/api&lt;/code&gt; で始まる要求URL 。</target>
        </trans-unit>
        <trans-unit id="091d76a7360a830e54feea860f18ff4abd95272f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Declaration syntax&lt;/strong&gt;: It's important to follow the route declaration syntax &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; to allow &lt;code&gt;ngc&lt;/code&gt; to discover the lazy-loaded module and the associated &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. You can find the complete list of allowed syntax constructs &lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;here&lt;/a&gt;. These restrictions will be relaxed with the release of Ivy since it'll no longer use &lt;code&gt;NgFactories&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;宣言構文&lt;/strong&gt;： &lt;code&gt;ngc&lt;/code&gt; が遅延ロードされたモジュールと関連するNgModuleを検出できるようにするには、ルート宣言構文 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;: () =&amp;gt; import('...').then(m =&amp;gt; m.ModuleName)&lt;/code&gt; に従うことが &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; です。許可されている構文構成要素の完全なリストは、&lt;a href=&quot;https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113&quot;&gt;こちらにあります&lt;/a&gt;。これらの制限は &lt;code&gt;NgFactories&lt;/code&gt; 使用しないため、Ivyのリリースで緩和されます。</target>
        </trans-unit>
        <trans-unit id="37acc96ef7149015893622f741759188373e05e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Deprecated since v5. Use &lt;code&gt;&lt;a href=&quot;static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; instead, which also supports &lt;a href=&quot;../../guide/aot-compiler&quot;&gt;Ahead-of-Time compilation&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v5以降非推奨。代わりに &lt;code&gt;&lt;a href=&quot;static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; を使用してください。これは&lt;a href=&quot;../../guide/aot-compiler&quot;&gt;Ahead-of-Timeコンパイル&lt;/a&gt;もサポートしています。</target>
        </trans-unit>
        <trans-unit id="4d4b4254c42c47aa78347eb6f65fba5443ee7b98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Deprecated since v5. Use &lt;code&gt;&lt;a href=&quot;upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; instead, which also supports &lt;a href=&quot;../guide/aot-compiler&quot;&gt;Ahead-of-Time compilation&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v5以降非推奨。代わりに &lt;code&gt;&lt;a href=&quot;upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; を使用してください。これは&lt;a href=&quot;../guide/aot-compiler&quot;&gt;Ahead-of-Timeコンパイル&lt;/a&gt;もサポートしています。</target>
        </trans-unit>
        <trans-unit id="925908e29eee06ea6b1741f8241acf7ccfbd338d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; No replacement</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代替なし</target>
        </trans-unit>
        <trans-unit id="055b744590c12172216b33ec47b42a63844460f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; This will be determined from the list of supported browsers specified in the 'browserslist' file.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;これは、「browserslist」ファイルで指定されたサポートされているブラウザーのリストから決定されます。</target>
        </trans-unit>
        <trans-unit id="a63dda9f368c88ef2fff245cb161403739426aa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;NG_BUILD_PROFILING&quot; environment variable instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &quot;NG_BUILD_PROFILING&quot;環境変数を使用してください。</target>
        </trans-unit>
        <trans-unit id="c18146bb864bb1dbf3954c121c2e2146621b2b6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;skipTests&quot; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「skipTests」を使用してください。</target>
        </trans-unit>
        <trans-unit id="66e19436326424896d1bed787c27b394d738df7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &quot;style&quot; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに「スタイル」を使用してください。</target>
        </trans-unit>
        <trans-unit id="507192ba6170d6bcd2a4ed7f46d17aa201bf0d81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;core/rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="d8389585613c09c90d8257d4b7b4a67921be42ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;core/renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt;) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;core/renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; （および &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; ）を使用してください。</target>
        </trans-unit>
        <trans-unit id="f8726733bf1271b934c806c58289c37fdffbc5eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="7600dac2d80ec1e13a4db993717a94c16d88aea7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="3151ef25a5cdd2ad83ba9f4d2625c2f7b1fb77e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt;) instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;renderertype2&quot;&gt;RendererType2&lt;/a&gt;&lt;/code&gt; （および &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; ）を使用してください。</target>
        </trans-unit>
        <trans-unit id="65e5d991ddb21f4ff9912354e05cb597716afbc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="3b27f889df31aaa0e329ccce7ac8d5b515c1bed8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;static/getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;static/getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="81b8b330a2f0d3d8717253f43f5789f21374f68e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;static/setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;static/setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="68dc4f474fa2f8e171e4994ec68d005eb57ccfa5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="8dcbdcbdc91a1c7c89aee2baf83673a141927cf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Use the &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="42fc55fd12147abc3375b4e99dfc0d2e47cafbac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; all exports of this entry point are deprecated.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;このエントリポイントのすべてのエクスポートは非​​推奨です。</target>
        </trans-unit>
        <trans-unit id="39b5621a21621d0cebccef1406b2807f1f105da0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; from v5</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v5以降</target>
        </trans-unit>
        <trans-unit id="5de335e0f96c2b03317487d21a7fbb0026581bca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; from v5 - slow and brings in a lot of code, Use &lt;code&gt;Injector.create&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v5以降-低速で多くのコードを &lt;code&gt;Injector.create&lt;/code&gt; 代わりにInjector.createを使用してください。</target>
        </trans-unit>
        <trans-unit id="714378cbbe026cb8498d550e875517d6d3c88f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; in Angular v6 and will be removed in Angular v9.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; Angular v6では、Angular v9で削除されます。</target>
        </trans-unit>
        <trans-unit id="64d8aec8e2cb976e2adc6925069eaea4b2c0895a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; in v8, delete after v10. This API should be used only be generated code, and that code should now use ɵɵdefineInjectable instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v8では、v10以降に削除します。このAPIは生成されたコードでのみ使用する必要があり、そのコードは代わりにɵɵdefineInjectableを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d2693e8709789eb21839270cd28f719582d31b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; platform-webworker is deprecated in Angular and will be removed in version 10</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; platform-webworkerはAngularで非推奨になり、バージョン10で削除されます</target>
        </trans-unit>
        <trans-unit id="f07546a2348e6b295898cbaa0322b3fb310e3d02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2c193197c73a206e68c94449c1f2bb78a70fb157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="de8279388462f6f7ebfde5dd634d5703214cce70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;../router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8dc8e6700b79e4b74ede97c2acd1e560680178da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated in favor of the proposed ES dynamic &lt;code&gt;import()&lt;/code&gt; expression, which offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は推奨されないES動的 &lt;code&gt;import()&lt;/code&gt; 式のために非推奨になりました。これは、実行時にESモジュールを動的にロードするためのより自然で標準ベースのメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="5943c4ea89a53aefb708387c97aad12937f2ff21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated in favor of the proposed ES dynamic &lt;code&gt;import()&lt;/code&gt; expression, which offers a more natural and standards-based mechanism to dynamically load an ES module at runtime.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は推奨されないES動的 &lt;code&gt;import()&lt;/code&gt; 式のために非推奨になりました。これは、実行時にESモジュールを動的にロードするためのより自然で標準ベースのメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="81681f4dcbfb6770c53a31c6d928d944d20c6253" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/ngmodulefactoryloader&quot;&gt;NgModuleFactoryLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8c995cc6b5b17eb7ebd3e27c35934db0107fc65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloader&quot;&gt;SystemJsNgModuleLoader&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="873ff8967ff9d397276f3e98e6619d29bd23ca29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the &lt;code&gt;string&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; is deprecated, and &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; is part of its implementation. See &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;string&lt;/code&gt; 形式は非推奨であり、 &lt;code&gt;&lt;a href=&quot;core/systemjsngmoduleloaderconfig&quot;&gt;SystemJsNgModuleLoaderConfig&lt;/a&gt;&lt;/code&gt; はその実装の一部です。詳細については、 &lt;code&gt;&lt;a href=&quot;router/loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2407d5fe7ac13c5cc040854bd720396db1391041" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the Web Tracing Framework is no longer supported in Angular</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; Web Tracing FrameworkはAngularでサポートされなくなりました</target>
        </trans-unit>
        <trans-unit id="a170c8493a393e1a6491d43d6a70b59388a153e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; v4.0.0 - Should not be part of public API.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v4.0.0-パブリックAPIの一部であってはなりません。</target>
        </trans-unit>
        <trans-unit id="6938bb41cd33b5fe739c64f36738c5ddfbcccb7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; v4.0.0 - Use IterableChangeRecord instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; v4.0.0-代わりにIterableChangeRecordを使用してください。</target>
        </trans-unit>
        <trans-unit id="b4a2d9d7036ccea7bde0ff0c57610643265b9bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Deprecated&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35a0a9f9f1b99f34042e07869a539e2e61795ac9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;の使用 &lt;code&gt;&lt;a href=&quot;getangularjsglobal&quot;&gt;getAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="e891144428fcc23c855970e639d89788b9be4a8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;の使用 &lt;code&gt;&lt;a href=&quot;setangularjsglobal&quot;&gt;setAngularJSGlobal&lt;/a&gt;&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="b733cd37134a6600d34fbded83ae0d2c8bda6c96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; from v4.0.0 use Type</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;v4.0.0から&lt;strong&gt;廃止予定&lt;/strong&gt; Typeを使用</target>
        </trans-unit>
        <trans-unit id="2b7884c01f5310ada144bb105a9e85eb66c26786" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; from v5 use the new signature Injector.create(options)</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;v5から非&lt;strong&gt;推奨になり&lt;/strong&gt;ました。新しいシグネチャInjector.create（options）を使用してください。</target>
        </trans-unit>
        <trans-unit id="6d2dec88f3a4c9ce3fef60b256b2e921ddb9bebe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; pending requests are now tracked with zones</source>
          <target state="translated">&lt;strong&gt;非推奨の&lt;/strong&gt;保留中のリクエストはゾーンで追跡されるようになりました</target>
        </trans-unit>
        <trans-unit id="6f0b0e0b151b9e709dfb47c7aa030e85bb10ded7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; pending requests are now tracked with zones.</source>
          <target state="translated">&lt;strong&gt;非推奨の&lt;/strong&gt;保留中のリクエストは、ゾーンで追跡されるようになりました。</target>
        </trans-unit>
        <trans-unit id="1b8bfe60f6374240970e3cfa55d7d3d5565a9b90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; platform-webworker is deprecated in Angular and will be removed in version 10</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;非&lt;strong&gt;推奨の&lt;/strong&gt;プラットフォームウェブワーカーはAngularで非推奨になり、バージョン10で削除されます</target>
        </trans-unit>
        <trans-unit id="f1266d586920ef18ddce67324d995ea05cb70d75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecation period:&lt;/strong&gt; When an API or a feature is deprecated, it will still be present in the &lt;a href=&quot;releases#schedule&quot;&gt;next two major releases&lt;/a&gt;. After that, deprecated APIs and features will be candidates for removal. A deprecation can be announced in any release, but the removal of a deprecated API or feature will happen only in major release. Until a deprecated API or feature is removed, it will be maintained according to the LTS support policy, meaning that only critical and security issues will be fixed.</source>
          <target state="translated">&lt;strong&gt;非推奨期間：&lt;/strong&gt; APIまたは機能が非推奨になっても、&lt;a href=&quot;releases#schedule&quot;&gt;次の2つのメジャーリリース&lt;/a&gt;には引き続き含まれます。その後、廃止されたAPIと機能は削除の候補となります。廃止はどのリリースでも発表できますが、廃止予定のAPIまたは機能の削除はメジャーリリースでのみ行われます。廃止されたAPIまたは機能が削除されるまで、LTSサポートポリシーに従って維持されます。つまり、重大な問題とセキュリティの問題のみが修正されます。</target>
        </trans-unit>
        <trans-unit id="169b22285b5954c65589e3b420ceceefcef8857c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not set a width greater than 700px&lt;/strong&gt;. If you wish to display a larger image, provide a link to the actual image that the user can click on to see the full size image separately as in this example of &lt;code&gt;source-map-explorer&lt;/code&gt; output from the &quot;Ahead-of-time Compilation&quot; guide:</source>
          <target state="translated">&lt;strong&gt;幅を700pxより大きく設定しないでください&lt;/strong&gt;。より大きな画像を表示する場合は、「事前コンパイル」からの &lt;code&gt;source-map-explorer&lt;/code&gt; 出力の例のように、ユーザーがクリックしてフルサイズの画像を個別に表示できる実際の画像へのリンクを提供します。ガイド：</target>
        </trans-unit>
        <trans-unit id="7173a0c15f40867cd98f8476ae7d5cdb6a6bf73e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use the markdown image syntax, ![...](...).&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;マークダウン画像構文！[...]（...）は使用しないでください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f432a37145e9e2323569b0ab88283548219bde9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not write inline code snippets&lt;/strong&gt; unless you have a good reason and the editor's permission to do so. In all other cases, code snippets should be generated automatically from tested code samples.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;正当な理由と編集者の許可がない限り、&lt;strong&gt;インラインコードスニペットを記述しないでください&lt;/strong&gt;。その他の場合はすべて、テスト済みのコードサンプルからコードスニペットを自動的に生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="b68a65a9af9cc3205a64a644f43bc32a38a5b9be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not&lt;/strong&gt; include the &lt;code&gt;node_modules&lt;/code&gt; folder in the project. Let it be a hidden project folder.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;プロジェクトに &lt;code&gt;node_modules&lt;/code&gt; フォルダーを含め&lt;strong&gt;ないでください&lt;/strong&gt;。非表示のプロジェクトフォルダーにします。</target>
        </trans-unit>
        <trans-unit id="8f05db6d262a6a382fc2ef4024ee286a3fcf9e55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; Use lower camel case for naming the selectors of directives.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ディレクティブのセレクターの命名にはキャメル小文字を使用&lt;strong&gt;して&lt;/strong&gt;ください。</target>
        </trans-unit>
        <trans-unit id="756af44694e036aa11de735bfbf199d32f2786b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; append the symbol name with the conventional suffix (such as &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;Service&lt;/code&gt;) for a thing of that type.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;そのタイプのものについては、従来の接尾辞（ &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Module&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Service&lt;/code&gt; など）をシンボル名に付加して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="153352eca009138a1ed3de98b472f90cc0492ab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; append the symbol name with the suffix &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シンボル名にサフィックス &lt;code&gt;Module&lt;/code&gt; を追加して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="37cc7c63695406b59611ab5b71220b9b942cd9a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be DRY (Don't Repeat Yourself).</source>
          <target state="translated">&lt;strong&gt;でください&lt;/strong&gt; DRY（自分を繰り返してはいけない）こと。</target>
        </trans-unit>
        <trans-unit id="c5a1d13d2b57fdec4bb4f3b13a493236cbac36e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be consistent in your choice.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;あなたの選択で一貫しています。</target>
        </trans-unit>
        <trans-unit id="68c41f8439d82dd2f76a9c3edd87b07a05e58ca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; be descriptive with file names and keep the contents of the file to exactly one component.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;ファイル名で記述することと、正確に一つのコンポーネントにファイルの内容を保持します。</target>
        </trans-unit>
        <trans-unit id="c00c45caf95d9b87e21cebc918c822f1c67e55ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create a feature module named &lt;code&gt;SharedModule&lt;/code&gt; in a &lt;code&gt;shared&lt;/code&gt; folder; for example, &lt;code&gt;app/shared/shared.module.ts&lt;/code&gt; defines &lt;code&gt;SharedModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;という名前の機能モジュール作成 &lt;code&gt;SharedModule&lt;/code&gt; で &lt;code&gt;shared&lt;/code&gt; フォルダを、たとえば、 &lt;code&gt;app/shared/shared.module.ts&lt;/code&gt; は &lt;code&gt;SharedModule&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="b3f7274c450f242bd1ba80e7d18c68014eeea065" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create a new service once the service begins to exceed that singular purpose.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;サービスがその単一の目的を超え始めたら、新しいサービスを作成して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7adcd12c026b630a50f2eaa8c3033ca30ea97afa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule for all distinct features in an application; for example, a &lt;code&gt;Heroes&lt;/code&gt; feature.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;アプリケーションのすべての異なる機能に対してNgModuleを作成して&lt;strong&gt;ください&lt;/strong&gt;。たとえば、 &lt;code&gt;Heroes&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="69d3cab88de69451416caa19d56f243518d871ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule for each feature area.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;機能領域ごとにNgModuleを作成&lt;strong&gt;し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3ab22382cbe44c9bb5ecdff51614d741b044724f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create an NgModule in the app's root folder, for example, in &lt;code&gt;/src/app&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ん&lt;/strong&gt;では、例えば、アプリケーションのルートフォルダにNgModuleを作成 &lt;code&gt;/src/app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="931cae31695433c127504b614b08f067dfca3841" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create folders named for the feature area they represent.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;それらが表す機能領域にちなんだ名前のフォルダーを作成&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1296916986b4fe85a5dc6245d682901f7c88adfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; create services with a single responsibility that is encapsulated by its context.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;、そのコンテキストによってカプセル化された単一の責任を持ってサービスを作成します。</target>
        </trans-unit>
        <trans-unit id="3911b104409eb46eaffb8f55baf1bb235a71bca4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; declare all components, directives, and pipes in the &lt;code&gt;SharedModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;内のすべてのコンポーネント、ディレクティブ、およびパイプ宣言 &lt;code&gt;SharedModule&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="cab5a59ccabfc8e97b46f17a6cf05b11ae4c097a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; declare components, directives, and pipes in a shared module when those items will be re-used and referenced by the components declared in other feature modules.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;他の機能モジュールで宣言されたコンポーネントによってそれらのアイテムが再利用および参照される場合は、共有モジュールでコンポーネント、ディレクティブ、およびパイプを宣言&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2e08a28c59698b76a3c21a4c94e7aafedc71ed80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define one thing, such as a service or component, per file.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ファイルごとに、サービスやコンポーネントなど、1つのことを定義&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d68cc4de5d4cfb0cfd8658d935f47e92d04addcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define small functions</source>
          <target state="translated">&lt;strong&gt;でください&lt;/strong&gt;小さな関数を定義します</target>
        </trans-unit>
        <trans-unit id="68498585b290359393f79634b03a1d41b1555619" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; define the structure to follow these four basic guidelines, listed in order of importance.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;重要度の高い順にリストされたこれら4つの基本的なガイドラインに従うように構造を定義して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="fd4aaef7172d067ebe063baf539a3102330db269" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; end the filename of a &lt;em&gt;RoutingModule&lt;/em&gt; with &lt;code&gt;-routing.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ん&lt;/strong&gt;のファイル名を終了&lt;em&gt;RoutingModule&lt;/em&gt;と &lt;code&gt;-routing.module.ts&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="424cdd9134c136b2534980399cb6591450120475" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; export all symbols from the &lt;code&gt;SharedModule&lt;/code&gt; that other feature modules need to use.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;からすべてのシンボルをエクスポート &lt;code&gt;SharedModule&lt;/code&gt; その他のフィーチャモジュールを使用する必要があること。</target>
        </trans-unit>
        <trans-unit id="02fea1f308ef53e59c993bb9bc4366768cca349c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; extract templates and styles into a separate file, when more than 3 lines.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;3行を超える場合は、テンプレートとスタイルを別のファイルに抽出&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cbfa824dec9159053869b1067a3c0d6f3f94ba8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; follow a pattern that describes the symbol's feature then its type. The recommended pattern is &lt;code&gt;feature.type.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シンボルの機能を説明し、次にそのタイプを説明するパターンに従って&lt;strong&gt;ください&lt;/strong&gt;。推奨されるパターンは &lt;code&gt;feature.type.ts&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6eebcad366f314fe260de69a328ff8c2f2670360" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; give the file name the &lt;code&gt;.module.ts&lt;/code&gt; extension.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;ファイル名を与える &lt;code&gt;.module.ts&lt;/code&gt; の拡張子を。</target>
        </trans-unit>
        <trans-unit id="0206f75503529ff71eb1a9f28d948773b91ba4cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; give the filename the conventional suffix (such as &lt;code&gt;.component.ts&lt;/code&gt;, &lt;code&gt;.directive.ts&lt;/code&gt;, &lt;code&gt;.module.ts&lt;/code&gt;, &lt;code&gt;.pipe.ts&lt;/code&gt;, or &lt;code&gt;.service.ts&lt;/code&gt;) for a file of that type.</source>
          <target state="translated">&lt;strong&gt;でください&lt;/strong&gt;（のようなファイル名に、従来の接尾辞を与える &lt;code&gt;.component.ts&lt;/code&gt; 、 &lt;code&gt;.directive.ts&lt;/code&gt; 、 &lt;code&gt;.module.ts&lt;/code&gt; 、 &lt;code&gt;.pipe.ts&lt;/code&gt; 、または &lt;code&gt;.service.ts&lt;/code&gt; そのタイプのファイルのために）。</target>
        </trans-unit>
        <trans-unit id="deca3050ed9d3ec3756dcf8bb288319f1c89aa7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; have a near term view of implementation and a long term vision.</source>
          <target state="translated">&lt;strong&gt;ん&lt;/strong&gt;な実装の短期的視野と長期的なビジョンを持っています。</target>
        </trans-unit>
        <trans-unit id="1ef24dc995d906797c68ee59d06da91798882a97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; implement the lifecycle hook interfaces.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;ライフサイクルフックインタフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="c303aa380fb4cff0efa9842a334e696f89bf8355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; import all modules required by the assets in the &lt;code&gt;SharedModule&lt;/code&gt;; for example, &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ん&lt;/strong&gt;で資産に必要なすべてのモジュールをインポート &lt;code&gt;SharedModule&lt;/code&gt; を。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; やFormsModuleなど &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75234a1890e1015e5a48b582eb574e1f2e81ceb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; include error handling in the bootstrapping logic.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;ブートストラップ・ロジックでのエラー処理が含まれます。</target>
        </trans-unit>
        <trans-unit id="1b4288e4f5e6492bfb85103d603b71c7b7c3fd77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; is one that should always be followed. &lt;em&gt;Always&lt;/em&gt; might be a bit too strong of a word. Guidelines that literally should always be followed are extremely rare. On the other hand, you need a really unusual case for breaking a &lt;em&gt;Do&lt;/em&gt; guideline.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;常に従うべきです。&lt;em&gt;いつも&lt;/em&gt;少し強すぎるかもしれません。文字通り常に従うべきガイドラインは非常にまれです。一方、&lt;em&gt;Do&lt;/em&gt;ガイドラインを破るには、非常に珍しいケースが必要です。</target>
        </trans-unit>
        <trans-unit id="e55242ad22a5996fd3efca619637c447ce0b1b9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; keep a flat folder structure as long as possible.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;できるだけフラットなフォルダ構造を維持して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b5c5e12b6e545709ef990b9b53ec3a1738d52dac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; limit logic in a component to only that required for the view. All other logic should be delegated to services.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;ビューのために必要なことだけにコンポーネントに制限ロジックを。他のすべてのロジックはサービスに委任されるべきです。</target>
        </trans-unit>
        <trans-unit id="a405780eb84b6a3584c8828ad6ff23b25db43802" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;XHR呼び出し、ローカルストレージ、メモリへの格納、またはその他のデータ操作を担当するデータサービスを作成&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2d3f678eccd25f031c48366493647554f7a63190" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; make locating code intuitive, simple, and fast.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;メイク位置決めコードは、直感的でシンプル、そして速いです。</target>
        </trans-unit>
        <trans-unit id="e25d22a2e3f2a399bf9997ba5b8d5226b619b332" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; match the name of the symbol to the name of the file.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シンボルの名前をファイルの名前と一致さ&lt;strong&gt;せてください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a2a468f22f0e2cf16f02d394fd7aa6652b654e29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; move reusable logic to services and keep components simple and focused on their intended purpose.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;サービスに再利用可能なロジックを移動し、簡単なコンポーネントを維持し、それらの意図する目的に焦点を当てました。</target>
        </trans-unit>
        <trans-unit id="67d8007229973bd14357bad9c0f4868c63e332ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name end-to-end test specification files after the feature they test with a suffix of &lt;code&gt;.e2e-spec&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;の接尾辞を持つ彼らは、テスト機能の後に名前のエンド・ツー・エンドのテスト仕様書ファイルを &lt;code&gt;.e2e-spec&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6209ab419f047dd979588da17339d1739a1a5d92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name event handler methods with the prefix &lt;code&gt;on&lt;/code&gt; followed by the event name.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;プレフィックスと名前のイベントハンドラメソッド &lt;code&gt;on&lt;/code&gt; イベント名が続きます。</target>
        </trans-unit>
        <trans-unit id="1536253456bf0e4ec9a7138f3df678a22d93f3bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name events without the prefix &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;接頭辞なし名前のイベントを &lt;code&gt;on&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72fc7ff3699db165b0faefe0a32401113f7e6126" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name test specification files the same as the component they test.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;テスト仕様ファイルには、テストするコンポーネントと同じ名前を付けて&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="89d9cc996675ed4eb14697065bc91a26137ef04b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name test specification files with a suffix of &lt;code&gt;.spec&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;の接尾辞で名前テスト仕様ファイルを &lt;code&gt;.spec&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f5b17289f4aa199b0fec58c91dd947153469638" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the feature module file reflecting the name of the feature area and folder; for example, &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;フィーチャーエリアやフォルダの名前を反映した機能モジュールファイルに名前を付けます。たとえば、 &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d17bb3b39eaea3d8c5b89c34a73ec427f9f22626" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the feature module symbol reflecting the name of the feature area, folder, and file; for example, &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; defines &lt;code&gt;HeroesModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;フィーチャーエリア、フォルダ、およびファイルの名前を反映した機能モジュールのシンボルに名前を付けます。たとえば、 &lt;code&gt;app/heroes/heroes.module.ts&lt;/code&gt; は &lt;code&gt;HeroesModule&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="4a9a26cd9c372572cd4569cca774843691ba0be0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the file such that you instantly know what it contains and represents.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;あなたは即座にそれが含まれていると何を表しているか知っているように、ファイルに名前を付けます。</target>
        </trans-unit>
        <trans-unit id="c70f892ee9de9f7d55a2d38ec2d5b997e6f728cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the module after the feature and folder it resides in.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;モジュールの名前は、それが存在する機能とフォルダーにちなんで&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="efd18b6f8d4abdbb012bd94ccfb7a9da586da549" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the style file &lt;code&gt;[component-name].component.css&lt;/code&gt;, where [component-name] is the component name.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;スタイルファイル名 &lt;code&gt;[component-name].component.css&lt;/code&gt; [コンポーネント名]コンポーネント名です。</target>
        </trans-unit>
        <trans-unit id="c192d2ee4bc6771008c16522374e56e7e5ae7754" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; name the template file &lt;code&gt;[component-name].component.html&lt;/code&gt;, where [component-name] is the component name.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;テンプレートファイル名 &lt;code&gt;[component-name].component.html&lt;/code&gt; [コンポーネント名]コンポーネント名です。</target>
        </trans-unit>
        <trans-unit id="8c99293a7d9e3e2e4eb705e4024c72d986509327" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place private members after public members, alphabetized.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;アルファベット順、パブリックメンバー後にプライベートメンバーを。</target>
        </trans-unit>
        <trans-unit id="bb0ff2ae72c8cf540a6dad4708d9f9596090e2b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place properties up top followed by methods.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;方法に続いてトップまでの場所のプロパティを。</target>
        </trans-unit>
        <trans-unit id="99b2f3501de2951dca9a4141bea2870c4567b742" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; place the feature module in the same named folder as the feature area; for example, in &lt;code&gt;app/heroes&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;機能領域と同じ名前のフォルダ内の機能モジュールを配置。たとえば、 &lt;code&gt;app/heroes&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d5722369208e41b13dca44b65f2447f50c92ce04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; provide a service with the app root injector in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator of the service.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; インジェクタブルデコレータでアプリルートインジェクタを使用してサービスを提供して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d5a28ed423d6944508a340974c6ad496a01b21a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put all of the app's code in a folder named &lt;code&gt;src&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;という名前のフォルダにアプリのコードのすべてを置く &lt;code&gt;src&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2479321a03fa6060bb58392a9372d807820bae8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put bootstrapping and platform logic for the app in a file named &lt;code&gt;main.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;という名前のファイルにアプリのためのブートストラップおよびプラットフォーム・ロジックを置く &lt;code&gt;main.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c919cf33f57f1e80a8e7baa542906d3184f4a29c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put presentation logic in the component class, and not in the template.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;コンポーネントクラスではなく、テンプレートにプレゼンテーションロジックを置きます。</target>
        </trans-unit>
        <trans-unit id="cd801119d3788db0f48b20b6a050db78823a218a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; put the contents of lazy loaded features in a &lt;em&gt;lazy loaded folder&lt;/em&gt;. A typical &lt;em&gt;lazy loaded folder&lt;/em&gt; contains a &lt;em&gt;routing component&lt;/em&gt;, its child components, and their related assets and modules.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;で怠惰なロードされた機能の内容を入れて&lt;em&gt;遅延ロードされたフォルダ&lt;/em&gt;。典型的な&lt;em&gt;遅延読み込みフォルダに&lt;/em&gt;は、&lt;em&gt;ルーティングコンポーネント&lt;/em&gt;、その子コンポーネント、およびそれらに関連するアセットとモジュールが含まれています。</target>
        </trans-unit>
        <trans-unit id="8a8c7e939be120f7d56d6b049da69611efadd66e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; refactor logic for making data operations and interacting with data to a service.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;データ操作を行うと、サービスにデータをやり取りするためのリファクタリング・ロジックを。</target>
        </trans-unit>
        <trans-unit id="2daf2a8ae4842cad7a27f0ac372d33a31a072bd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; specify &lt;em&gt;component-relative&lt;/em&gt; URLs, prefixed with &lt;code&gt;./&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;接頭辞が &lt;code&gt;./&lt;/code&gt; の&lt;em&gt;コンポーネント相対&lt;/em&gt; URLを指定&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1da2147e294f49dc4e51a0fc8aba0cbfd71c3af4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; spell non-element selectors in lower camel case unless the selector is meant to match a native HTML attribute.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;セレクタがネイティブのHTML属性と一致することを意図されていない限り、下キャメルケースには非要素セレクタを綴ります。</target>
        </trans-unit>
        <trans-unit id="19c1158dd3fd6095e86d920452f5e64ee07f3f10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; start small but keep in mind where the app is heading down the road.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;小さなものから始めましょう。ただし、アプリがどこに向かっているかを覚えておいて&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c1bb6de1f52d2c127414fe8186c82bd4d4fb21f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; structure the app such that you can &lt;strong&gt;L&lt;/strong&gt;ocate code quickly, &lt;strong&gt;I&lt;/strong&gt;dentify the code at a glance, keep the &lt;strong&gt;F&lt;/strong&gt;lattest structure you can, and &lt;strong&gt;T&lt;/strong&gt;ry to be DRY.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;な構造にすることができます、このようなアプリ&lt;strong&gt;Lの&lt;/strong&gt;迅速ocateコードを、&lt;strong&gt;私は&lt;/strong&gt;、一目でコードをdentify保つ&lt;strong&gt;F&lt;/strong&gt;することができますlattest構造を、そして&lt;strong&gt;Tの&lt;/strong&gt; ryはDRYします。</target>
        </trans-unit>
        <trans-unit id="447bce5b2ed3be44cfa8271a90f5d28bc8198718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; suffix a &lt;em&gt;RoutingModule&lt;/em&gt; class name with &lt;code&gt;RoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;サフィックス&lt;em&gt;RoutingModule&lt;/em&gt;でクラス名を &lt;code&gt;RoutingModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fed7861c9f089246f8db40e8d0c87eb27430c622" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; suffix a service class name with &lt;code&gt;Service&lt;/code&gt;. For example, something that gets data or heroes should be called a &lt;code&gt;DataService&lt;/code&gt; or a &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Doが&lt;/strong&gt;持つサービスクラス名サフィックス &lt;code&gt;Service&lt;/code&gt; 。たとえば、データまたはヒーローを取得するものは、 &lt;code&gt;DataService&lt;/code&gt; または &lt;code&gt;HeroService&lt;/code&gt; と呼ばれる必要があります。</target>
        </trans-unit>
        <trans-unit id="8c1509076fb6b5c6b9032dee4e08837628485074" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use &lt;a href=&quot;https://www.npmjs.com/package/codelyzer&quot;&gt;codelyzer&lt;/a&gt; to follow this guide.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;使用&lt;a href=&quot;https://www.npmjs.com/package/codelyzer&quot;&gt;codelyzerを&lt;/a&gt;、このガイドに従うこと。</target>
        </trans-unit>
        <trans-unit id="7985aba17e237de853ce430d0b75bfcc3a4a382c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use &lt;em&gt;dashed-case&lt;/em&gt; or &lt;em&gt;kebab-case&lt;/em&gt; for naming the element selectors of components.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントの要素セレクターの命名には、&lt;em&gt;破線のケース&lt;/em&gt;または&lt;em&gt;ケバブのケース&lt;/em&gt;を使用し&lt;em&gt;て&lt;/em&gt;&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="bfac476b71f59566f5127a7d6239c65ac9e76752" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a custom prefix for a component selector. For example, the prefix &lt;code&gt;toh&lt;/code&gt; represents &lt;strong&gt;T&lt;/strong&gt;our &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;H&lt;/strong&gt;eroes and the prefix &lt;code&gt;admin&lt;/code&gt; represents an admin feature area.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントセレクタにはカスタムプレフィックスを使用して&lt;strong&gt;ください&lt;/strong&gt;。たとえば、接頭辞 &lt;code&gt;toh&lt;/code&gt; 表し&lt;strong&gt;Tを&lt;/strong&gt;当社&lt;strong&gt;O&lt;/strong&gt; F &lt;strong&gt;Hの&lt;/strong&gt; eroesとプレフィックス &lt;code&gt;admin&lt;/code&gt; 管理機能の領域を表します。</target>
        </trans-unit>
        <trans-unit id="44139d62100dd05907211954f2365d5e0cf3e624" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a custom prefix for the selector of directives (e.g, the prefix &lt;code&gt;toh&lt;/code&gt; from &lt;strong&gt;T&lt;/strong&gt;our &lt;strong&gt;o&lt;/strong&gt;f &lt;strong&gt;H&lt;/strong&gt;eroes).</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;ディレクティブのセレクタ（例えば、接頭辞のカスタム接頭辞を使用 &lt;code&gt;toh&lt;/code&gt; から&lt;strong&gt;T&lt;/strong&gt;当社&lt;strong&gt;O&lt;/strong&gt; F &lt;strong&gt;Hが&lt;/strong&gt; eroes）。</target>
        </trans-unit>
        <trans-unit id="893cd5a23c6adf14d9224cb52e6f1b4c5b9feb98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a hyphenated, lowercase element selector value; for example, &lt;code&gt;admin-users&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ハイフン付きの小文字の要素セレクター値を使用して&lt;strong&gt;ください&lt;/strong&gt;。たとえば、 &lt;code&gt;admin-users&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00e52512f5585f991fce0b87893122af6eeaa8f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use a prefix that identifies the feature area or the app itself.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;機能領域またはアプリ自体を識別するプレフィックスを使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="865b4dfe299fa61cb13a9f7a99c447b4684571d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use attribute directives when you have presentation logic without a template.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;テンプレートなしでプレゼンテーションロジックを持っている場合、使用属性ディレクティブを。</target>
        </trans-unit>
        <trans-unit id="2d7be5cdb6da4aa9b0f3cc0c614d6e58f2a88ef0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all assets named after what they represent.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;表すものにちなんで名付けられたすべてのアセットには、一貫した名前を使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="319543104179e3aa7703d59df00d4acd56fa2386" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all pipes, named after their feature. The pipe class name should use &lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt; (the general convention for class names), and the corresponding &lt;code&gt;name&lt;/code&gt; string should use &lt;em&gt;lowerCamelCase&lt;/em&gt;. The &lt;code&gt;name&lt;/code&gt; string cannot use hyphens (&quot;dash-case&quot; or &quot;kebab-case&quot;).</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;すべてのパイプには、その機能にちなんで名付けられた一貫した名前を使用して&lt;strong&gt;ください&lt;/strong&gt;。パイプクラス名は&lt;a href=&quot;glossary#case-types&quot;&gt;UpperCamelCase&lt;/a&gt;（クラス名の一般的な規則）を使用し、対応する &lt;code&gt;name&lt;/code&gt; 文字列は&lt;em&gt;lowerCamelCase&lt;/em&gt;を使用する必要があります。 &lt;code&gt;name&lt;/code&gt; 文字列にはハイフン（「ダッシュ・ケース」または「ケバブ・ケース」）を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="b74e052dcc626499e14cf9a52f2bdfa1b5f8157d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all services named after their feature.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;機能にちなんで名付けられたすべてのサービスに一貫した名前を使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4c9c40f42be9d32aaef11f560a7b86ef8a31b067" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent names for all symbols.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;すべてのシンボルに一貫した名前を使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9368fc727343fb9f24f72163850b7f610e8ffe07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use consistent type names for all components following a pattern that describes the component's feature then its type. A recommended pattern is &lt;code&gt;feature.type.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントの機能を説明し、次にそのタイプを説明するパターンに従って、すべてのコンポーネントに一貫したタイプ名を使用して&lt;strong&gt;ください&lt;/strong&gt;。推奨されるパターンは &lt;code&gt;feature.type.ts&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="49866936f0831aaf4d4f204e78c08decd834a494" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use conventional type names including &lt;code&gt;.service&lt;/code&gt;, &lt;code&gt;.component&lt;/code&gt;, &lt;code&gt;.pipe&lt;/code&gt;, &lt;code&gt;.module&lt;/code&gt;, and &lt;code&gt;.directive&lt;/code&gt;. Invent additional type names if you must but take care not to create too many.</source>
          <target state="translated">&lt;strong&gt;ください&lt;/strong&gt;を含む従来型の名前を使用 &lt;code&gt;.service&lt;/code&gt; 、 &lt;code&gt;.component&lt;/code&gt; 、 &lt;code&gt;.pipe&lt;/code&gt; 、 &lt;code&gt;.module&lt;/code&gt; 、および &lt;code&gt;.directive&lt;/code&gt; を。必要な場合は追加の型名を作成しますが、作成しすぎないよう注意してください。</target>
        </trans-unit>
        <trans-unit id="e07d96f35486f1c913032d39f6a0282e34f2b203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use dashes to separate words in the descriptive name.</source>
          <target state="translated">&lt;strong&gt;やる&lt;/strong&gt;わかりやすい名前で別々の単語に使用ダッシュ。</target>
        </trans-unit>
        <trans-unit id="c7aeca36cad47faef79582924c00673db45ff311" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use dots to separate the descriptive name from the type.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;わかりやすい名前とタイプを区切るにはドットを使用&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0920db69d71e308d2a525382582255b9c6d2b7eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ファイルテンプレートまたはスニペットを使用して、一貫したスタイルとパターンに従うようにして&lt;strong&gt;ください&lt;/strong&gt;。以下は、一部のWeb開発エディターおよびIDEのテンプレートまたはスニペットです。</target>
        </trans-unit>
        <trans-unit id="6a1442fe05cfed1932fa984611b4f2d9c111baa9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use services as singletons within the same injector. Use them for sharing data and functionality.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;同じインジェクター内でサービスをシングルトンとして使用して&lt;strong&gt;ください&lt;/strong&gt;。それらを使用して、データと機能を共有します。</target>
        </trans-unit>
        <trans-unit id="d1954bdb66547b33eb125161af1ae51c60026aaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; class decorator instead of the &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; parameter decorator when using types as tokens for the dependencies of a service.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;タイプをサービスの依存関係のトークンとして使用する場合は、 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;パラメータデコレータの代わりに &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; クラスデコレータを使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d96c2d225ea94c0493269430e8e01b86b50377cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; class decorators instead of the &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt; properties of the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/directive&quot;&gt;ディレクティブ&lt;/a&gt;および &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;コンポーネント&lt;/a&gt;メタデータの &lt;code&gt;inputs&lt;/code&gt; および &lt;code&gt;outputs&lt;/code&gt; プロパティの代わりに、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; クラスデコレーターを使用して&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ea6b202748ee468df084f3ffd9d21ef72482343b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do&lt;/strong&gt; use upper camel case for class names.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;クラス名にはキャメル大文字を使用&lt;strong&gt;してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ea712f25fc8e27592da4c153217ffe7c46b0cd58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Don't modify your copy of Angular.&lt;/strong&gt; Private, customized versions of Angular tend to fall behind the current version and may not include important security fixes and enhancements. Instead, share your Angular improvements with the community and make a pull request.</source>
          <target state="translated">&lt;strong&gt;Angularのコピーを変更しないでください。&lt;/strong&gt;Angularのカスタマイズされたプライベートバージョンは、現在のバージョンよりも遅れる傾向があり、重要なセキュリティ修正や拡張機能が含まれていない場合があります。代わりに、Angularの改善点をコミュニティと共有し、プルリクエストを行ってください。</target>
        </trans-unit>
        <trans-unit id="1df1e3b37c9e9487b7a093241b0ebd0b4c61ce3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; Output file path for Build Event Protocol events</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ビルドイベントプロトコルイベントの&lt;strong&gt;実験的&lt;/strong&gt;出力ファイルパス</target>
        </trans-unit>
        <trans-unit id="d7d5340fc1d0f2bcd8470b4e061322e8767162d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; True to create a new app that uses the Ivy rendering engine.</source>
          <target state="translated">&lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; Trueを指定して、Ivyレンダリングエンジンを使用する新しいアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="60e2fc730113a9b4a2361c46a5d80b8917ff611b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fastest :)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;最速:)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a864e18b9ef9c87eb6e54692693e9e87d007a12f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For all other scenarios,&lt;/strong&gt; see the current instructions in &lt;a href=&quot;setup-local&quot;&gt;Setting up the Local Environment and Workspace&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;他のすべてのシナリオ&lt;/strong&gt;については&lt;a href=&quot;setup-local&quot;&gt;、ローカル環境とワークスペースのセットアップの&lt;/a&gt;現在の手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="068e055d581fa26662ca24ee2708b7d339665834" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML&lt;/strong&gt; is used when interpreting a value as HTML, for example, when binding to &lt;code&gt;innerHtml&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;HTML&lt;/strong&gt;は、 &lt;code&gt;innerHtml&lt;/code&gt; にバインドするときなど、値をHTMLとして解釈するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="ec55ce407496fff6cba913b5e8d3de8262020472" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How &lt;em&gt;loadComponent()&lt;/em&gt; chooses an ad&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;loadComponent（）&lt;/em&gt;が広告を選択する方法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a155722272a889f00945465fc2d20e670aa499d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;INVALID&lt;/strong&gt;: This control has failed at least one validation check.</source>
          <target state="translated">&lt;strong&gt;INVALID&lt;/strong&gt;：このコントロールは、少なくとも1つの検証チェックに失敗しました。</target>
        </trans-unit>
        <trans-unit id="f84f922f1b11fef33c1749bfcf9a2a29798cfe29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; the In-memory Web API module has nothing to do with HTTP in Angular.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;インメモリWeb APIモジュールは、AngularのHTTPとは何の関係もありません。</target>
        </trans-unit>
        <trans-unit id="dc98c24cde56582c759cc530a597498b395d72a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;In general:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;一般に：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17cc65cb1582a263a64c49339ffe5f50dc31748a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interpolation&lt;/strong&gt; with double curly braces to display a component property.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンポーネントプロパティを表示するための二重中括弧による&lt;strong&gt;補間&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="68890d13fc54d083b646a4367430a9ad959bf417" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keep current with the latest Angular library releases.&lt;/strong&gt; We regularly update the Angular libraries, and these updates may fix security defects discovered in previous versions. Check the Angular &lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;change log&lt;/a&gt; for security-related updates.</source>
          <target state="translated">&lt;strong&gt;Angularライブラリの最新リリースを最新に保ちます。&lt;/strong&gt;Angularライブラリは定期的に更新されます。これらの更新により、以前のバージョンで発見されたセキュリティ上の欠陥が修正される場合があります。Angularの&lt;a href=&quot;https://github.com/angular/angular/blob/master/CHANGELOG.md&quot;&gt;変更ログ&lt;/a&gt;でセキュリティ関連の更新を確認してください。</target>
        </trans-unit>
        <trans-unit id="564560214da2886c52516ade57692873955f9483" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keep template statements simple&lt;/strong&gt; &amp;mdash; The &lt;code&gt;(blur)&lt;/code&gt; event is bound to two JavaScript statements. The first statement calls &lt;code&gt;addHero&lt;/code&gt;. The second statement, &lt;code&gt;newHero.value=''&lt;/code&gt;, clears the input box after a new hero is added to the list.</source>
          <target state="translated">&lt;strong&gt;テンプレートステートメントをシンプルにする&lt;/strong&gt; &amp;mdash; &lt;code&gt;(blur)&lt;/code&gt; イベントは2つのJavaScriptステートメントにバインドされます。最初のステートメントは &lt;code&gt;addHero&lt;/code&gt; を呼び出します。2番目のステートメント &lt;code&gt;newHero.value=''&lt;/code&gt; は、新しいヒーローがリストに追加された後に入力ボックスをクリアします。</target>
        </trans-unit>
        <trans-unit id="af85710506385e7bb680dd7711977f7a364f111e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Leave the default and the wildcard routes!&lt;/strong&gt; These are concerns at the top level of the application itself.</source>
          <target state="translated">&lt;strong&gt;デフォルトのルートとワイルドカードルートをそのまま使用します。&lt;/strong&gt;これらは、アプリケーション自体の最上位レベルの問題です。</target>
        </trans-unit>
        <trans-unit id="e0c58a4d71e7c20be7a70adb2122afee35358aab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Library developers:&lt;/strong&gt; By default, the CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate library&lt;/code&gt;&lt;/a&gt; creates a &lt;code&gt;package.json&lt;/code&gt; for the new library. That &lt;code&gt;package.json&lt;/code&gt; is used when publishing the library to npm. For more information, see the CLI wiki page &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-create-library&quot;&gt;Library Support&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;ライブラリ開発者：&lt;/strong&gt;デフォルトでは、CLIコマンド&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate library&lt;/code&gt; &lt;/a&gt;は新しいライブラリの &lt;code&gt;package.json&lt;/code&gt; を作成します。その &lt;code&gt;package.json&lt;/code&gt; は、ライブラリをnpmに公開するときに使用されます。詳細については、CLI wikiページ&lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-create-library&quot;&gt;Library Supportを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="86cb86bd9af54ff1bf806625c029fd79461ee4db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Major releases&lt;/strong&gt; contain significant new features, some but minimal developer assistance is expected during the update. When updating to a new major release, you may need to run update scripts, refactor code, run additional tests, and learn new APIs.</source>
          <target state="translated">&lt;strong&gt;メジャーリリースに&lt;/strong&gt;は重要な新機能&lt;strong&gt;が&lt;/strong&gt;含まれていますが、更新中は最小限の開発者支援が期待されます。新しいメジャーリリースに更新するときは、更新スクリプトの実行、コードのリファクタリング、追加のテストの実行、新しいAPIの学習が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="8af40ba30977eb931b9405e6f7f841290c41fd55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Markup style:&lt;/strong&gt; How to include images, tables, alert boxes, and code snippets. Angular docs are written in Markdown, with custom extensions for this site. Correct markup ensures a consistent look-and-feel, and is essential for the doc to build and function correctly.</source>
          <target state="translated">&lt;strong&gt;マークアップスタイル：&lt;/strong&gt;画像、表、警告ボックス、コードスニペットを含める方法。AngularのドキュメントはMarkdownで書かれており、このサイトのカスタム拡張機能が付いています。正しいマークアップは一貫したルックアンドフィールを保証し、ドキュメントが正しく構築され機能するために不可欠です。</target>
        </trans-unit>
        <trans-unit id="049a66297d0463705501f4976e142df77e148c1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Markup style&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;マークアップスタイル&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90b69a62ec932925abbbb8b8f39fa6f5cd1496f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Metadata Properties&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;メタデータプロパティ&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="3fabbc0c229a540fc47f545ceac94d3a9ec3b561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Minor releases&lt;/strong&gt; contain new smaller features. Minor releases are fully backward-compatible; no developer assistance is expected during update, but you can optionally modify your apps and libraries to begin using new APIs, features, and capabilities that were added in the release. We update peer dependencies in minor versions by expanding the supported versions, but we do not require projects to update these dependencies.</source>
          <target state="translated">&lt;strong&gt;マイナーリリースに&lt;/strong&gt;は、新しい小さな機能&lt;strong&gt;が&lt;/strong&gt;含まれています。マイナーリリースは完全に下位互換性があります。更新中は開発者の支援は必要ありませんが、オプションでアプリとライブラリを変更して、リリースで追加された新しいAPI、機能、機能の使用を開始できます。サポートされているバージョンを拡張することで、マイナーバージョンのピアの依存関係を更新しますが、プロジェクトでこれらの依存関係を更新する必要はありません。</target>
        </trans-unit>
        <trans-unit id="72465ffeda7a3882d2d558cd2302a2ff0208ef07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;N.B.&lt;/strong&gt;: The &lt;a href=&quot;docs-style-guide#table-of-contents&quot;&gt;Table-of-contents&lt;/a&gt; generator only considers main (&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;) and secondary (&lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;) headings.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;：&lt;a href=&quot;docs-style-guide#table-of-contents&quot;&gt;目次&lt;/a&gt;ジェネレーターは、メイン（ &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; ）とセカンダリ（ &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; ）の見出しのみを考慮します。</target>
        </trans-unit>
        <trans-unit id="c7c17e9e07c259e730be178446aa8f994896d165" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; In the logical tree, you'll see &lt;code&gt;@Provide&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which are not real HTML attributes but are here to demonstrate what is going on under the hood.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;論理ツリーでは、あなたが表示されます &lt;code&gt;@Provide&lt;/code&gt; を、 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 実際のHTML属性ではなく、フードの下で何が起こっているのかを証明するためにここにいます、。</target>
        </trans-unit>
        <trans-unit id="fc26bb0bac2e87e6a33e03a84d8073a942b5acca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NgModules&lt;/strong&gt; configure the injector and the compiler and help organize related things together.</source>
          <target state="translated">&lt;strong&gt;NgModule&lt;/strong&gt;はインジェクターとコンパイラーを構成し、関連するものを一緒に整理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="abbb940630dae1016ddb8972b14b8a607e45e0da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; After AngularJS is loaded and bootstrapped, listeners such as those wired up in your route configuration will continue to listen for route changes. To ensure listeners are shut down when AngularJS isn't being displayed, configure an &lt;code&gt;otherwise&lt;/code&gt; option with the &lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider&quot;&gt;$routeProvider&lt;/a&gt; that renders an empty template. This assumes all other routes will be handled by Angular.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; AngularJSがロードされてブートストラップされた後、ルート構成で配線されたリスナーなどは、引き続きルートの変更をリッスンします。AngularJSが表示されていないときにリスナーがシャットダウンされるようにするには、空のテンプレートをレンダリングする&lt;a href=&quot;https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider&quot;&gt;$ routeProvider&lt;/a&gt;で &lt;code&gt;otherwise&lt;/code&gt; オプションを構成します。これは、他のすべてのルートがAngularによって処理されることを前提としています。</target>
        </trans-unit>
        <trans-unit id="84565e184a7079ad301db28996a2be189b9b2c40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of Angular version 7, the major versions of Angular core and the CLI are aligned. This means that in order to use the CLI as you develop an Angular app, the version of &lt;code&gt;@angular/core&lt;/code&gt; and the CLI need to be the same.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Angularバージョン7では、AngularコアとCLIのメジャーバージョンが揃っています。つまり、Angularアプリを開発する際にCLIを使用するには、 &lt;code&gt;@angular/core&lt;/code&gt; とCLI のバージョンが同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="fb553c91b74e4311031c53b9d1ea080c9c1c369b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Because the returned control is of the type &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;, you need to provide an explicit type to access the method syntax for the form array instance.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;返されるコントロールは &lt;code&gt;&lt;a href=&quot;../api/forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 型であるため、フォーム配列インスタンスのメソッド構文にアクセスするには、明示的な型を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="173467ffeee0a02f4abdbd1c4b8921f8862973c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Disabling animations application-wide is useful during end-to-end (E2E) testing.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;アプリケーション全体でアニメーションを無効にすると、エンドツーエンド（E2E）テストで役立ちます。</target>
        </trans-unit>
        <trans-unit id="b80bffc3666a8be5dc5959970b1701b5c9fef215" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Display the value for the form group instance in the component template using the &lt;code&gt;value&lt;/code&gt; property and &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;value&lt;/code&gt; プロパティと &lt;code&gt;&lt;a href=&quot;../api/common/jsonpipe&quot;&gt;JsonPipe&lt;/a&gt;&lt;/code&gt; を使用して、コンポーネントテンプレートのフォームグループインスタンスの値を表示します。</target>
        </trans-unit>
        <trans-unit id="849c96b35d21cf32e39f9e8ab9330c42b9df8336" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For a more detailed list of classes and directives provided by &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;reactive-forms#reactive-forms-api&quot;&gt;Reactive forms API&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; によって提供されるクラスとディレクティブの詳細なリストについては、「&lt;a href=&quot;reactive-forms#reactive-forms-api&quot;&gt;リアクティブフォームAPI」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9e34344de4fad6bff6dafd2139188dd68cab0985" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For complete information about each kind of form, see &lt;a href=&quot;reactive-forms&quot;&gt;Reactive Forms&lt;/a&gt; and &lt;a href=&quot;forms&quot;&gt;Template-driven Forms&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;各種&lt;a href=&quot;reactive-forms&quot;&gt;フォームの&lt;/a&gt;詳細については、「リアクティブフォーム」と「&lt;a href=&quot;forms&quot;&gt;テンプレート駆動型フォーム&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6ec506b865466b027c42f0e29f5fc2193f97cb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For our purposes, an element entering or leaving a view is equivalent to being inserted or removed from the DOM.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ここでは、ビューに出入りする要素はDOMに挿入または削除されることと同じです。</target>
        </trans-unit>
        <trans-unit id="b04e34bb1adeef16a72b3f4a0de7ac3b86cc77b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are not using HTTPS, the service worker will only be registered when accessing the app on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; HTTPSを使用していない場合、Service Workerは &lt;code&gt;localhost&lt;/code&gt; 上のアプリにアクセスするときにのみ登録されます。</target>
        </trans-unit>
        <trans-unit id="323b8213066a5d108dce9af40269e4d4acd4ba86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you have a module which has both providers and declarations, you &lt;em&gt;can&lt;/em&gt; use this technique to separate them out and you may see this pattern in legacy apps. However, since Angular 6.0, the best practice for providing services is with the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;あなたがプロバイダとの宣言の両方を持っているモジュールを持っている場合は、あなたが&lt;em&gt;することができ&lt;/em&gt;、それらを分離するために、この技術を使用して、レガシーアプリケーションでこのパターンを見ることができます。ただし、Angular 6.0以降、サービスを提供するためのベストプラクティスは &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; プロパティを使用することです。</target>
        </trans-unit>
        <trans-unit id="93fe757b8f474edb8b919c6de032eb70c090dde4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In the component file, set the trigger that defines the animations as the value of the &lt;code&gt;animations:&lt;/code&gt; property in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;コンポーネントファイルで、アニメーションを定義するトリガーを &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）デコレーターの &lt;code&gt;animations:&lt;/code&gt; プロパティの値として設定します。</target>
        </trans-unit>
        <trans-unit id="544775094b9de2efd4191fb7b06c9b609abd91fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; In this example, you're using a single control. When using the &lt;code&gt;setValue()&lt;/code&gt; method with a form group or form array instance, the value needs to match the structure of the group or array.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この例では、1つのコントロールを使用しています。フォームグループまたはフォーム配列インスタンスで &lt;code&gt;setValue()&lt;/code&gt; メソッドを使用する場合、値はグループまたは配列の構造と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="648089a4ca28a9c812bac324dc26cef959e97c37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Instead of a form control instance for each alias, you can compose another form group instance with additional fields. The process of defining a control for each item is the same.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;各エイリアスのフォームコントロールインスタンスの代わりに、追加のフィールドを持つ別のフォームグループインスタンスを作成できます。各アイテムのコントロールを定義するプロセスは同じです。</target>
        </trans-unit>
        <trans-unit id="bdd767ef6ea48a4df8e51d1d7c169a747290e349" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Please see the &lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;resolution rules&lt;/a&gt; section to understand the relationship between the &lt;code&gt;ModuleInjector&lt;/code&gt; tree and the &lt;code&gt;ElementInjector&lt;/code&gt; tree.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;ModuleInjector&lt;/code&gt; ツリーと &lt;code&gt;ElementInjector&lt;/code&gt; ツリーの関係を理解するには、&lt;a href=&quot;hierarchical-dependency-injection#resolution-rules&quot;&gt;解決ルールの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7630581ca37f1a339343eb6890544c170e7948b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Remember that ngModel directive is defined as a part of Angular FormsModule and you need to include FormsModule in the imports: [...] section of the Angular module metadata, in which you want to use it.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; ngModelディレクティブはAngular FormsModuleの一部として定義されており、使用するAngularモジュールメタデータのimports：[...]セクションにFormsModuleを含める必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d393b3fbba36be410c476749955c63faafa043f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Right now, you'll also want to include the &lt;code&gt;--disable-gpu&lt;/code&gt; flag if you're running on Windows. See &lt;a href=&quot;https://crbug.com/737678&quot;&gt;crbug.com/737678&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;現在、Windowsで実行している場合は、 &lt;code&gt;--disable-gpu&lt;/code&gt; フラグも含める必要があります。&lt;a href=&quot;https://crbug.com/737678&quot;&gt;crbug.com/737678を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="65dd6a1a9c3f6fce10d971d553de5ef7de922d9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See a &lt;a href=&quot;animations#animation-api-summary&quot;&gt;summary of available animation functions&lt;/a&gt; at the end of this guide.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;参照&lt;a href=&quot;animations#animation-api-summary&quot;&gt;可能なアニメーション機能の概要を&lt;/a&gt;、このガイドの最後にあります。</target>
        </trans-unit>
        <trans-unit id="5572bda73663c35675a744e39de8d68631cdcfc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig&quot;&gt;LocationUpgradeConfig&lt;/a&gt;&lt;/code&gt; for more configuration options available to the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgrademodule#config&quot;&gt;LocationUpgradeModule.config()&lt;/a&gt;&lt;/code&gt; メソッドで使用できるその他の構成オプションについては、 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/locationupgradeconfig&quot;&gt;LocationUpgradeConfig&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bfd3b929a9097e1579b3d87589f89c6e691b80a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; See the Material Design website's topic on &lt;a href=&quot;https://material.io/design/motion/speed.html#easing&quot;&gt;Natural easing curves&lt;/a&gt; for general information on easing curves.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;https://material.io/design/motion/speed.html#easing&quot;&gt;イージング曲線&lt;/a&gt;の一般的な情報については、マテリアルデザインWebサイトのトピック「自然なイージング曲線」を参照してください。</target>
        </trans-unit>
        <trans-unit id="258b80c7a9e61906876d0dbda43f1e64c5650b04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Some additional notes on using styles within &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 関数および &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;&lt;/code&gt; 関数内でのスタイルの使用に関するいくつかの追加の注意事項。</target>
        </trans-unit>
        <trans-unit id="5ac4129ff24615dbb03eabbed26139b3a94934ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The 'heroes' string inside the factory refers to the AngularJS &lt;code&gt;HeroesService&lt;/code&gt;. It is common in AngularJS apps to choose a service name for the token, for example &quot;heroes&quot;, and append the &quot;Service&quot; suffix to create the class name.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ファクトリー内の「heroes」ストリングは、AngularJS &lt;code&gt;HeroesService&lt;/code&gt; を参照します。AngularJSアプリでは、トークンのサービス名（「heroes」など）を選択し、「Service」サフィックスを追加してクラス名を作成するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="03b12efce734e6cab7a1ae05993b8844d5d79782" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; function is used to group animation &lt;em&gt;steps&lt;/em&gt;, rather than animated elements.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt;関数は、グループアニメーションに使用される&lt;em&gt;手順&lt;/em&gt;ではなく、アニメーション要素。</target>
        </trans-unit>
        <trans-unit id="ce5009f76e5fedd39d33fd60393d55cde42d6371" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method is a pattern used to register application-wide providers. Read more about application-wide providers in the &lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;Singleton services&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;RouterModule.forRoot&lt;/code&gt; の方法は、アプリケーション全体のプロバイダを登録するために使用されるパターンです。アプリケーション全体のプロバイダーの詳細については、&lt;a href=&quot;singleton-services#forRoot-router&quot;&gt;シングルトンサービス&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="5cab946a01d7e7f66d555faf928fa542eddfcb31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;data&lt;/code&gt; property names that you use can be arbitrary. For example, the name &lt;em&gt;animation&lt;/em&gt; used in the example above is an arbitrary choice.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;data&lt;/code&gt; あなたが任意で使用することをプロパティ名。たとえば、上記の例で使用されている&lt;em&gt;アニメーション&lt;/em&gt;の名前は任意の選択です。</target>
        </trans-unit>
        <trans-unit id="47d12f956cd259b3cf0f6b96b582eb6625c79bfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;opacity&lt;/code&gt;, &lt;code&gt;backgroundColor&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;reusable-animations&quot;&gt;time&lt;/a&gt;&lt;/code&gt; inputs are replaced during runtime.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;height&lt;/code&gt; 、 &lt;code&gt;opacity&lt;/code&gt; 、 &lt;code&gt;backgroundColor&lt;/code&gt; の、そして &lt;code&gt;&lt;a href=&quot;reusable-animations&quot;&gt;time&lt;/a&gt;&lt;/code&gt; の入力は、実行時に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="8de94c6706c2235098f7e6dec03fcc9ce5f419a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The button in the snippet above also has a &lt;code&gt;disabled&lt;/code&gt; binding attached to it to disable the button when &lt;code&gt;profileForm&lt;/code&gt; is invalid. You aren't performing any validation yet, so the button is always enabled. Simple form validation is covered in the &lt;a href=&quot;reactive-forms#simple-form-validation&quot;&gt;Simple form validation&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;上記のスニペットのボタンにも &lt;code&gt;disabled&lt;/code&gt; バインディングがアタッチされており、 &lt;code&gt;profileForm&lt;/code&gt; が無効な場合にボタンを無効にします。まだ検証を行っていないため、ボタンは常に有効になっています。単純なフォームの検証については、&lt;a href=&quot;reactive-forms#simple-form-validation&quot;&gt;単純なフォームの検証の&lt;/a&gt;セクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="0de5049ad50ebc54694924b374d7991952a2f7cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The example app uses &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; so the app does not throw an error, but the principles are the same.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;サンプルアプリでは &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 使用しているため、アプリはエラーをスローしませんが、原理は同じです。</target>
        </trans-unit>
        <trans-unit id="30a44395a19cec398a3a03e8a86843421b55639b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The following example uses &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; methods, which is discussed in the &lt;a href=&quot;complex-animation-sequences#complex-sequence&quot;&gt;complex sequences&lt;/a&gt; page.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;次の例では、&lt;a href=&quot;complex-animation-sequences#complex-sequence&quot;&gt;複雑なシーケンスの&lt;/a&gt;ページで説明されている &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; メソッドを使用しています。</target>
        </trans-unit>
        <trans-unit id="3cb725a34cbbdcad00d542f8a4dcd1262e42f009" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation. When doing so inside a guard, the guard should return &lt;code&gt;false&lt;/code&gt;;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ガードはルーターに他の場所にナビゲートするように指示し、現在のナビゲーションを効果的にキャンセルすることもできます。ガード内でそうする場合、ガードは &lt;code&gt;false&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="b663a8751d00b5e30925212fb1d4057d6634eade" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The hierarchical structure of views is a key factor in the way Angular detects and responds to changes in the DOM and app data.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ビューの階層構造は、AngularがDOMおよびアプリデータの変更を検出してそれに対応する方法の重要な要素です。</target>
        </trans-unit>
        <trans-unit id="1b8e7446cf968ffa0c95e4aded13d71f44252abb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The observable provided to the Router &lt;em&gt;must&lt;/em&gt; also complete. If the observable does not complete, the navigation will not continue.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ルーターに提供されるオブザーバブルも完了する&lt;em&gt;必要が&lt;/em&gt;あります。オブザーバブルが完了しない場合、ナビゲーションは続行されません。</target>
        </trans-unit>
        <trans-unit id="a786ef68a3e2fe7f725ac6134aca12369aa45c68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The transition states must match the &lt;code&gt;data&lt;/code&gt; property value defined in the route configuration.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;遷移状態は、ルート構成で定義された &lt;code&gt;data&lt;/code&gt; プロパティ値と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="23b01bc5dc25a207a691ea975f34d81a2c815bbf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are two example apps where you can see this scenario; the more advanced &lt;span name=&quot;ngmodules&quot;&gt;NgModules live example&lt;/span&gt;, which contains &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; in the routing modules and the &lt;code&gt;GreetingModule&lt;/code&gt;, and the simpler &lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading live example&lt;/span&gt;. For an introductory explanation see the &lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;Lazy Loading Feature Modules&lt;/a&gt; guide.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このシナリオを確認できるアプリの例は2つあります。ルーティングモジュールと &lt;code&gt;GreetingModule&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; を含むより高度な&lt;span name=&quot;ngmodules&quot;&gt;NgModulesライブサンプル&lt;/span&gt;と、より単純な&lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;遅延読み込みライブサンプル&lt;/span&gt;。導入の説明については、&lt;a href=&quot;lazy-loading-ngmodules&quot;&gt;遅延読み込み機能モジュール&lt;/a&gt;ガイドをご覧ください。&lt;span name=&quot;lazy-loading-ngmodules&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="8d3b75f0b175c9c97572c03ae1d5772c234ec639" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; These wrappers help hide the complexity of the &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function. There are more wrappers for different backend technologies at the &lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universal repository&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これらのラッパーは、 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 関数の複雑さを隠すのに役立ちます。&lt;a href=&quot;https://github.com/angular/universal&quot;&gt;Universalリポジトリに&lt;/a&gt;は、さまざまなバックエンドテクノロジー用のラッパーがさらにあります。</target>
        </trans-unit>
        <trans-unit id="f53f2bd5bd0eadea8ec6717cdb6b0c8bc759ea73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This sample server doesn't handle data requests.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このサンプルサーバーは、データ要求を処理しません。</target>
        </trans-unit>
        <trans-unit id="08f8987127087d9842a4e4e5bdd3976ba48ec115" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Use the &lt;code&gt;RouterModule.forRoot&lt;/code&gt; method in the root module, &lt;code&gt;AppModule&lt;/code&gt;, to register top-level application routes and providers. For feature modules, call the &lt;code&gt;RouterModule.forChild&lt;/code&gt; method to register additional routes.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;使用 &lt;code&gt;RouterModule.forRoot&lt;/code&gt; のルートモジュール内のメソッド、 &lt;code&gt;AppModule&lt;/code&gt; 、最上位のアプリケーション経路とプロバイダを登録します。機能モジュールの場合、 &lt;code&gt;RouterModule.forChild&lt;/code&gt; メソッドを呼び出して、追加のルートを登録します。</target>
        </trans-unit>
        <trans-unit id="e9d01ccecc14509f8ee59afc2465d9bda2262e3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Usually, you declare the components and their templates in separate files. For the purposes of understanding how the injection system works, it is useful to look at them from the point of view of a combined logical tree. The term logical distinguishes it from the render tree (your application DOM tree). To mark the locations of where the component templates are located, this guide uses the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; pseudo element, which doesn't actually exist in the render tree and is present for mental model purposes only.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;通常、コンポーネントとそのテンプレートは別々のファイルで宣言します。インジェクションシステムがどのように機能するかを理解するためには、結合された論理ツリーの観点からそれらを見ると役立ちます。論理という用語は、レンダーツリー（アプリケーションのDOMツリー）と区別します。このガイドでは、コンポーネントテンプレートが配置されている場所にマークを付けるために、実際にはRender Treeに存在せず、メンタルモデルの目的でのみ存在する &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 疑似要素を使用します。</target>
        </trans-unit>
        <trans-unit id="70df557fb1fbaae3691456f5ebacd0a025f111c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; We listen to the 'change' event because 'input' events aren't fired for selects in Firefox and IE: &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&quot;&gt;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&lt;/a&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&quot;&gt;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; FirefoxおよびIEの選択に対して「入力」イベントが発生しないため、「変更」イベントをリッスンし&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1024350&quot;&gt;ます&lt;/a&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/&quot;&gt;。https&lt;/a&gt;：//bugzilla.mozilla.org/show_bug.cgi ？id = 1024350 https://developer.microsoft .com / en-us / microsoft-edge / platform / issues / 4660045 /</target>
        </trans-unit>
        <trans-unit id="64f0154c22ebb29b72b8d1f8e6731d45b0bc1411" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you use the CLI to create your app, the root application module &lt;code&gt;app.module.ts&lt;/code&gt; is placed in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; CLIを使用してアプリを作成すると、ルートアプリケーションモジュール &lt;code&gt;app.module.ts&lt;/code&gt; が &lt;code&gt;src/app&lt;/code&gt; フォルダーに配置されます。</target>
        </trans-unit>
        <trans-unit id="de3ce3f39fa05daf713e1064fe0d6b9d129a4efc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Within each &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function call, an element can only be in one state at any given time. However, it's possible for multiple triggers to be active at once.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;各 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 関数呼び出し内では、要素は常に1つの状態にしかなりません。ただし、複数のトリガーを一度にアクティブにすることは可能です。</target>
        </trans-unit>
        <trans-unit id="30cc6ed75f891598162f289c4d2116513f3b3f5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can define the control with just the initial value, but if your controls need sync or async validation, add sync and async validators as the second and third items in the array.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;初期値のみでコントロールを定義できますが、コントロールで同期または非同期の検証が必要な場合は、配列の2番目と3番目の項目として同期および非同期バリデーターを追加します。</target>
        </trans-unit>
        <trans-unit id="93de3f0193cc4096f2bc013adc716b8f8c4795c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can leave all the &lt;code&gt;FlowerService&lt;/code&gt; related code in place as it will allow a comparison with the &lt;code&gt;AnimalService&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;すべて残すことができます &lt;code&gt;FlowerService&lt;/code&gt; それはとの比較ができますような場所に関連するコードを &lt;code&gt;AnimalService&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f5788bdbe71c7954ba5852cebff9a44a86b21bcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;a href=&quot;https://angular.io/generated/zips/universal/universal.zip&quot;&gt;Download the finished sample code&lt;/a&gt;, which runs in a &lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg; Express&lt;/a&gt; server.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node.js&amp;reg;Express&lt;/a&gt;サーバーで実行される&lt;a href=&quot;https://angular.io/generated/zips/universal/universal.zip&quot;&gt;完成したサンプルコードをダウンロードし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5f06fc5732efa20e58ad7d9a972d9aa2088a985d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Any&lt;/em&gt; web server technology can serve a Universal app as long as it can call Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function. The principles and decision points discussed here apply to any web server technology.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Universalの &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; （）関数を呼び出すことができる限り、&lt;em&gt;どの&lt;/em&gt; WebサーバーテクノロジーでもUniversalアプリを提供できます。ここで説明する原則と決定ポイントは、どのWebサーバーテクノロジーにも適用されます。</target>
        </trans-unit>
        <trans-unit id="7b50cff5f4086fcebeb5e570446e27289b40ae27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; references&lt;/strong&gt; go in the &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 参照のみ&lt;/strong&gt;が &lt;code&gt;imports&lt;/code&gt; 配列に入ります。</target>
        </trans-unit>
        <trans-unit id="cee89df418d808246e9b86076caf2b0df6fd2c91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Only one title (&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;) per document!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ドキュメントごとに1つのタイトル（ &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; ）のみ！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5f0b3abaa461296cdd8fc0abbaa308569071229" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;PENDING&lt;/strong&gt;: This control is in the midst of conducting a validation check.</source>
          <target state="translated">&lt;strong&gt;保留中&lt;/strong&gt;：このコントロールは、検証チェックを行っている最中です。</target>
        </trans-unit>
        <trans-unit id="d9fc890426cc94f6989561c4686510d629b8c55d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pass values, not elements&lt;/strong&gt; &amp;mdash; Instead of passing the &lt;code&gt;newHero&lt;/code&gt; into the component's &lt;code&gt;addHero&lt;/code&gt; method, get the input box value and pass &lt;em&gt;that&lt;/em&gt; to &lt;code&gt;addHero&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;要素ではなく値&lt;/strong&gt;を渡す&amp;mdash; &lt;code&gt;newHero&lt;/code&gt; をコンポーネントの &lt;code&gt;addHero&lt;/code&gt; メソッドに渡す代わりに、入力ボックスの値を取得&lt;em&gt;し&lt;/em&gt;て &lt;code&gt;addHero&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="708b277a2f68a14cef92957000b3968f4e41c1c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Patch releases&lt;/strong&gt; are low risk, bug fix releases. No developer assistance is expected during update.</source>
          <target state="translated">&lt;strong&gt;パッチリリース&lt;/strong&gt;はリスクが低く、バグ修正リリースです。アップデート中は開発者の支援は必要ありません。</target>
        </trans-unit>
        <trans-unit id="4c432f70eff95dd8fce9c3f8f8ee240fdb5b538a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</source>
          <target state="translated">&lt;strong&gt;Pitchforkパーカー記号論&lt;/strong&gt;、ルーフパーティーポップアップ&lt;em&gt;パレオ&lt;/em&gt;メッセンジャーバッグクレルカルレストリュフォーyr。記号論のバイラルフリーガンVHS、ショーディッチはマックスウィーニーを破壊します。インテリジェンシアケールチップバイス4ドルトースト、シュリッツ十字架</target>
        </trans-unit>
        <trans-unit id="95a1b4770819e0a29d5da0018adc297164c08a4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pitchfork hoodie semiotics&lt;/strong&gt;, roof party pop-up &lt;em&gt;paleo&lt;/em&gt; messenger messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</source>
          <target state="translated">&lt;strong&gt;Pitchforkパーカー記号論&lt;/strong&gt;、ルーフパーティーポップアップ&lt;em&gt;パレオ&lt;/em&gt;メッセンジャーメッセンジャーバッグクレルカルレストリュフォーyr。記号論のバイラルフリーガンVHS、ショーディッチはマックスウィーニーを破壊します。インテリジェンシアケールチップバイス4ドルトースト、シュリッツ十字架</target>
        </trans-unit>
        <trans-unit id="473d3902f591877838d6a7ab6b5227c1d6bcd07a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Prerequisite:&lt;/strong&gt; Make sure you have &lt;a href=&quot;setup-local#prerequisites&quot;&gt;Node.js&amp;reg; and npm installed&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;前提条件：&lt;/strong&gt;&lt;a href=&quot;setup-local#prerequisites&quot;&gt;Node.js&amp;reg;とnpmがインストールされ&lt;/a&gt;ていることを確認します。</target>
        </trans-unit>
        <trans-unit id="709be87fd84c09acfc000c260a431956877eba9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; are more robust: they're more scalable, reusable, and testable. If forms are a key part of your application, or you're already using reactive patterns for building your application, use reactive forms.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;はより堅牢で、よりスケーラブルで、再利用可能で、テスト可能です。フォームがアプリケーションの重要な部分である場合、またはアプリケーションの構築にすでにリアクティブパターンを使用している場合は、リアクティブフォームを使用します。</target>
        </trans-unit>
        <trans-unit id="e685c5e24ec500b6b876387c87e2a2a6bfdb201e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; define custom validators as &lt;strong&gt;functions&lt;/strong&gt; that receive a control to validate.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;は、検証するコントロールを受け取る&lt;strong&gt;関数&lt;/strong&gt;としてカスタムバリデーター&lt;strong&gt;を&lt;/strong&gt;定義します。</target>
        </trans-unit>
        <trans-unit id="b740b48c800974f154bba8d1b973edfecff1e2dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; keep the data model pure by providing it as an immutable data structure. Each time a change is triggered on the data model, the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance returns a new data model rather than updating the existing data model. This gives you the ability to track unique changes to the data model through the control's observable. This provides one way for change detection to be more efficient because it only needs to update on unique changes. It also follows reactive patterns that integrate with observable operators to transform data.</source>
          <target state="translated">&lt;strong&gt;リアクティブフォーム&lt;/strong&gt;は、不変のデータ構造として提供することにより、データモデルを純粋に保ちます。データモデルで変更がトリガーされる &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; に、FormControlインスタンスは、既存のデータモデルを更新するのではなく、新しいデータモデルを返します。これにより、コントロールのオブザーバブルを通じてデータモデルへの固有の変更を追跡できます。これは、一意の変更でのみ更新する必要があるため、変更検出をより効率的にする1つの方法を提供します。また、観測可能なオペレーターと統合してデータを変換するリアクティブパターンに従います。</target>
        </trans-unit>
        <trans-unit id="fbb97dd1d93d98c721ec3da4ae659eab5c63a582" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reactive forms&lt;/strong&gt; provide access to low-level APIs and synchronous access to the form model, making creating large-scale forms easier.</source>
          <target state="translated">&lt;strong&gt;反応型フォーム&lt;/strong&gt;は、低レベルAPIへのアクセスとフォームモデルへの同期アクセスを提供し、大規模なフォームの作成を容易にします。</target>
        </trans-unit>
        <trans-unit id="838b09b5d8525736cd6aca78332e34f8ca1bb45a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Release candidate:&lt;/strong&gt; A release that is feature complete and in final testing. A release candidate is indicated by a release tag appended with the &lt;code&gt;rc&lt;/code&gt; identifier, such as version &lt;code&gt;8.1.0-rc&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;リリース候補：&lt;/strong&gt;機能が完全で、最終テスト中のリリース。リリース候補は、バージョン &lt;code&gt;8.1.0-rc&lt;/code&gt; などの &lt;code&gt;rc&lt;/code&gt; 識別子が付加されたリリースタグで示されます。</target>
        </trans-unit>
        <trans-unit id="d80cede24d8f6a6f5970fefe563196691a4ff05d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Remember:&lt;/strong&gt; you only get the &lt;em&gt;initial&lt;/em&gt; value of the parameter map with this technique. Stick with the observable &lt;code&gt;paramMap&lt;/code&gt; approach if there's even a chance that the router could re-use the component. This sample stays with the observable &lt;code&gt;paramMap&lt;/code&gt; strategy just in case.</source>
          <target state="translated">&lt;strong&gt;覚えておいてください：&lt;/strong&gt;あなたはこのテクニックでパラメータマップの&lt;em&gt;初期&lt;/em&gt;値を取得するだけです。ルーターがコンポーネントを再利用する可能性さえある場合は、 &lt;code&gt;paramMap&lt;/code&gt; 可能なparamMapアプローチを使用してください。このサンプルは、 &lt;code&gt;paramMap&lt;/code&gt; ため、監視可能なparamMap戦略を使用しています。</target>
        </trans-unit>
        <trans-unit id="4f446c02a52837521e5a6b51894f8db8590518d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reminder:&lt;/strong&gt; The &quot;QuickStart seed&quot; example was created prior to the Angular CLI, so there are some differences between what is described here and an Angular CLI application.</source>
          <target state="translated">&lt;strong&gt;注意：&lt;/strong&gt;「QuickStartシード」の例はAngular CLIより前に作成されたため、ここで説明する内容とAngular CLIアプリケーションとの間にはいくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="14427d3b847d480d9d47f56458454e25d491878e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Resource URL&lt;/strong&gt; is a URL that will be loaded and executed as code, for example, in &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;リソースURL&lt;/strong&gt;は、たとえば &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt; 内のコードとしてロードおよび実行されるURLです。</target>
        </trans-unit>
        <trans-unit id="03049e5993fa21ca8b206a4b8780ca4038880a4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Running&lt;/strong&gt; For example, webpack compiles. This ends when webpack finishes and your builder emits a &lt;code&gt;BuilderOutput&lt;/code&gt; object.</source>
          <target state="translated">&lt;strong&gt;実行中&lt;/strong&gt;たとえば、webpackがコンパイルされます。これは、webpackが終了し、ビルダーが &lt;code&gt;BuilderOutput&lt;/code&gt; オブジェクトを発行すると終了します。</target>
        </trans-unit>
        <trans-unit id="e07d610b5c16aa4b2bdca2a424387d9854e37e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Runtime:&lt;/strong&gt; Injector configuration via the &lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt;ランタイム：&lt;/strong&gt; &lt;code&gt;providers&lt;/code&gt; 配列を介したインジェクター構成。</target>
        </trans-unit>
        <trans-unit id="b31d5dd2a2bc3b46b020204363d5d73e74f48bcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RxJS marble testing&lt;/strong&gt; is a great way to test observable scenarios, both simple and complex. You've likely seen the &lt;a href=&quot;http://rxmarbles.com/&quot;&gt;marble diagrams&lt;/a&gt; that illustrate how observables work. Marble testing uses a similar marble language to specify the observable streams and expectations in your tests.</source>
          <target state="translated">&lt;strong&gt;RxJSの大理石のテスト&lt;/strong&gt;は、観察可能なシナリオを簡単かつ複雑にテストするための優れた方法です。オブザーバブルがどのように機能するかを示す&lt;a href=&quot;http://rxmarbles.com/&quot;&gt;大理石の図&lt;/a&gt;を見たことがあります。大理石のテストでは、同様の大理石の言語を使用して、テストで観測可能なストリームと期待値を指定します。</target>
        </trans-unit>
        <trans-unit id="66fe1d46bd141ee07e93d23bcd1758af621ad8e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See the &lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;を参照してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="43ea0d44435c8b67d128290fc1634480ad748492" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See the Angular syntax in this &lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;こののAngular構文を参照してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6b304202d6b9b7d59ab65a8e6057866905abb614" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static asset&lt;/strong&gt;: all other requests.</source>
          <target state="translated">&lt;strong&gt;静的アセット&lt;/strong&gt;：他のすべてのリクエスト。</target>
        </trans-unit>
        <trans-unit id="cbf65f3b89682af8d30c19f2bd5eb2048c642179" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Static:&lt;/strong&gt; Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured via the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt;静的：&lt;/strong&gt;ディレクティブセレクターについてコンパイラーに指示するコンパイラー構成と、テンプレート内のどこにディレクティブをセレクターマッチングを通じて適用するかを指定します。これは、 &lt;code&gt;declarations&lt;/code&gt; 配列を介して構成されます。</target>
        </trans-unit>
        <trans-unit id="976d3a67076ee0a889e6579cde70008f39c15b63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Style examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スタイルの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="223854d9e937adcab6eba006aec80e64f11c7c6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Style&lt;/strong&gt; is used when binding CSS into the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;CSSを &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; プロパティにバインドするときに&lt;strong&gt;スタイル&lt;/strong&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="8d23c9b31a96802fe5f1117cb148697c5c8938e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sync validators&lt;/strong&gt;: functions that take a control instance and immediately return either a set of validation errors or &lt;code&gt;null&lt;/code&gt;. You can pass these in as the second argument when you instantiate a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;同期バリデーター&lt;/strong&gt;：コントロールインスタンスを取得し、すぐに一連の検証エラーまたは &lt;code&gt;null&lt;/code&gt; を返す関数。 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; をインスタンス化するときに、これらを2番目の引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="736217d05af049a7575b12dd321ddde95c5b4ec4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template binding works with &lt;em&gt;properties&lt;/em&gt; and &lt;em&gt;events&lt;/em&gt;, not &lt;em&gt;attributes&lt;/em&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テンプレートバインディングは、&lt;em&gt;属性&lt;/em&gt;ではなく&lt;em&gt;プロパティ&lt;/em&gt;と&lt;em&gt;イベント&lt;/em&gt;で機能し&lt;em&gt;ます&lt;/em&gt;。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a34fe84a9cb32717df61c02150c2c1128d88b5c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven forms&lt;/strong&gt; are tied to template &lt;strong&gt;directives&lt;/strong&gt;, and must provide custom validator directives that wrap validation functions.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型フォーム&lt;/strong&gt;はテンプレート&lt;strong&gt;ディレクティブ&lt;/strong&gt;に関連付けられており、検証関数をラップするカスタムバリデータディレクティブを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="39611775e2f3c33d40770f7b55ff0283d9358dcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven forms&lt;/strong&gt; are useful for adding a simple form to an app, such as an email list signup form. They're easy to add to an app, but they don't scale as well as reactive forms. If you have very basic form requirements and logic that can be managed solely in the template, use template-driven forms.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型フォーム&lt;/strong&gt;は、メーリングリストの登録フォームなど、シンプルなフォームをアプリに追加するのに役立ちます。アプリに追加するのは簡単ですが、リアクティブフォームほどスケーリングされません。テンプレートのみで管理できる非常に基本的なフォーム要件とロジックがある場合は、テンプレート駆動型フォームを使用します。</target>
        </trans-unit>
        <trans-unit id="f9f368e6ae6f90a6865c211b4fc3f51561734be3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven&lt;/strong&gt; forms focus on simple scenarios, are not as reusable, abstract away the low-level APIs, and provide asynchronous access to the form model. The abstraction with template-driven forms also surfaces in testing, where testing reactive forms requires less setup and no dependence on the change detection cycle when updating and validating the form and data models during testing.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型&lt;/strong&gt;フォームは単純なシナリオに重点を置いており、再利用可能ではなく、低レベルAPIを抽象化し、フォームモデルへの非同期アクセスを提供します。テンプレート駆動型フォームによる抽象化は、テスト中にも表面化します。そこでは、リアクティブフォームのテストに必要な設定が少なく、テスト中にフォームとデータモデルを更新および検証するときに、変更検出サイクルに依存する必要がありません。</target>
        </trans-unit>
        <trans-unit id="81a3d875ca1aa71ccfc79e48c2ebbd3e48d8d04e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Template-driven&lt;/strong&gt; forms rely on mutability with two-way data binding to update the data model in the component as changes are made in the template. Because there are no unique changes to track on the data model when using two-way data binding, change detection is less efficient at determining when updates are required.</source>
          <target state="translated">&lt;strong&gt;テンプレート駆動型&lt;/strong&gt;フォームは、双方向のデータバインディングによる可変性に依存して、テンプレートに変更が加えられたときにコンポーネントのデータモデルを更新します。双方向データバインディングを使用する場合、データモデルで追跡する固有の変更がないため、更新が必要かどうかを判断する際の変更検出の効率は低くなります。</target>
        </trans-unit>
        <trans-unit id="be2ae55753f8c992faf5420a53fdaffa8f81a22e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Angular i18n tools generated the ids for these translation units. Don't change them.&lt;/strong&gt; Each &lt;code&gt;id&lt;/code&gt; depends upon the content of the template text and its assigned meaning. If you change either the text or the meaning, then the &lt;code&gt;id&lt;/code&gt; changes. For more information, see the &lt;strong&gt;&lt;a href=&quot;i18n#custom-id&quot;&gt;translation file maintenance discussion&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;Angular i18nツールは、これらの翻訳単位のIDを生成しました。それらを変更しないでください。&lt;/strong&gt;各 &lt;code&gt;id&lt;/code&gt; は、テンプレートテキストの内容とそれに割り当てられた意味によって異なります。テキストまたは意味のいずれかを変更すると、 &lt;code&gt;id&lt;/code&gt; が変更されます。詳細については、&lt;strong&gt;&lt;a href=&quot;i18n#custom-id&quot;&gt;翻訳ファイルのメンテナンスに関する説明を&lt;/a&gt;&lt;/strong&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a999cce0de293dd0ceb1486c064bdc0e80ff41df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The order of the routes in the configuration matters&lt;/strong&gt; and this is by design. The router uses a &lt;strong&gt;first-match wins&lt;/strong&gt; strategy when matching routes, so more specific routes should be placed above less specific routes. In the configuration above, routes with a static path are listed first, followed by an empty path route, that matches the default route. The wildcard route comes last because it matches &lt;em&gt;every URL&lt;/em&gt; and should be selected &lt;em&gt;only&lt;/em&gt; if no other routes are matched first.</source>
          <target state="translated">&lt;strong&gt;構成内のルートの順序は重要で&lt;/strong&gt;あり、これは設計によるものです。ルーターはルートを照合するときに&lt;strong&gt;最初に一致する勝利&lt;/strong&gt;戦略を使用するので、より具体的なルートをそれほど具体的でないルートの上に配置する必要があります。上記の構成では、静的パスを持つルートが最初にリストされ、その後にデフォルトルートと一致する空のパスルートが続きます。ワイルドカードルートは&lt;em&gt;すべてのURL&lt;/em&gt;に一致するため、最後に来&lt;em&gt;ます&lt;/em&gt;。他に一致するルートが&lt;em&gt;ない&lt;/em&gt;場合に&lt;em&gt;のみ&lt;/em&gt;選択する必要があり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="38184a516af530c7b89c8dcda7bf8522761ad6d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;These same considerations apply to every structural directive, whether built-in or custom.&lt;/strong&gt; Before applying a structural directive, you might want to pause for a moment to consider the consequences of adding and removing elements and of creating and destroying components.</source>
          <target state="translated">&lt;strong&gt;これらの同じ考慮事項は、組み込みかカスタムかにかかわらず、すべての構造ディレクティブに適用されます。&lt;/strong&gt;構造ディレクティブを適用する前に、要素を追加および削除した結果、コンポーネントを作成および破棄した結果を検討するために、少し間を置いておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="fe44a85d9ca6005e7244538960b40e24bc47858c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This Tour of Heroes tutorial&lt;/strong&gt; is the conceptual basis for many examples in this documentation set. Reading this introduction page provides sufficient context for working with those examples. You do not need to do this tutorial to understand those other examples. The Tour of Heroes tutorial is maintained here for context and continuity.</source>
          <target state="translated">&lt;strong&gt;この英雄ツアーのチュートリアル&lt;/strong&gt;は、このドキュメントセットの多くの例の概念的な基礎です。この紹介ページを読むと、これらの例を扱うのに十分なコンテキストが得られます。他の例を理解するために、このチュートリアルを実行する必要はありません。英雄ツアーのチュートリアルは、コンテキストと継続性のためにここで維持されます。</target>
        </trans-unit>
        <trans-unit id="d539cfba0c3e2c6f1af70df43cfa22fe53cecb73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This won't work at all unless you bind to an event&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;イベントにバインドしない限り、これはまったく機能しません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a80aeef417506b373f9b8e1ca32e8927d08fea94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Timing examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タイミングの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc6aade1857b98341ff9104631b04810b85d452" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; When testing Angular service workers, it's a good idea to use an incognito or private window in your browser to ensure the service worker doesn't end up reading from a previous leftover state, which can cause unexpected behavior.</source>
          <target state="translated">&lt;strong&gt;ヒント：&lt;/strong&gt; Angular Service Workerをテストするときは、ブラウザーでシークレットウィンドウまたはプライベートウィンドウを使用して、Service Workerが以前の残りの状態からの読み取りを行わないようにすることをお勧めします。これにより、予期しない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fec66486a30dbc0bea95331ec287393af8d9b44a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Two critical points&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;2つの重要なポイント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4954c4b6c00b45986905694f1b1374d7bc1be911" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TypeScript interfaces are not valid tokens&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TypeScriptインターフェースは有効なトークンではありません&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84d9cdef4598d181c02608e6adb684186a18b296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;URL&lt;/strong&gt; is used for URL properties, such as &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;URLは、&lt;/strong&gt;のようなURLのプロパティに使用され &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; href&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0bcaefa1fa57901abf47489e45d1501b61b8bd8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use template variables to refer to elements&lt;/strong&gt; &amp;mdash; The &lt;code&gt;newHero&lt;/code&gt; template variable refers to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. You can reference &lt;code&gt;newHero&lt;/code&gt; from any sibling or child of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;strong&gt;テンプレート変数を使用して要素を参照する&lt;/strong&gt; &amp;mdash; &lt;code&gt;newHero&lt;/code&gt; テンプレート変数は &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素&lt;strong&gt;を参照します&lt;/strong&gt;。 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素の兄弟または子から &lt;code&gt;newHero&lt;/code&gt; を参照できます。</target>
        </trans-unit>
        <trans-unit id="b677cf735946959b9d7588a08eb43b16500df0e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VALID&lt;/strong&gt;: This control has passed all validation checks.</source>
          <target state="translated">&lt;strong&gt;VALID&lt;/strong&gt;：このコントロールはすべての検証チェックに合格しました。</target>
        </trans-unit>
        <trans-unit id="e1d3bd99f3963d7dd7451baa69dc655142691d45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Version 8 update&lt;/strong&gt;: When you update to version 8, the &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; command performs the transformation automatically. Prior to version 7, the &lt;code&gt;import()&lt;/code&gt; syntax only works in JIT mode (with view engine).</source>
          <target state="translated">&lt;strong&gt;バージョン8の更新&lt;/strong&gt;：&lt;strong&gt;バージョン8に更新する&lt;/strong&gt;と、&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;コマンドは自動的に変換を実行します。バージョン7より前は、 &lt;code&gt;import()&lt;/code&gt; 構文はJITモード（ビューエンジンを使用）でのみ機能します。</target>
        </trans-unit>
        <trans-unit id="5930284e7d08a06d52e13ae68f35a6d5e2eb49dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; calling this method with untrusted user data exposes your application to XSS security risks!</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;信頼できないユーザーデータでこのメソッドを呼び出すと、アプリケーションがXSSセキュリティリスクにさらされます。</target>
        </trans-unit>
        <trans-unit id="f4b21eac31a19fb3c30a451eadfdc629a0028356" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Watching&lt;/strong&gt; Between two runs, watch an external event stream. For example, webpack watches the file system for any changes. This ends when webpack restarts building, and &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; is called. This goes back to step 1.</source>
          <target state="translated">&lt;strong&gt;鑑賞&lt;/strong&gt;二つの実験の間に、外部のイベントストリームを見ます。たとえば、webpackはファイルシステムの変更を監視します。これは、webpackがビルドを再開し、 &lt;code&gt;BuilderContext.reportRunning()&lt;/code&gt; が呼び出されると終了します。これはステップ1に戻ります。</target>
        </trans-unit>
        <trans-unit id="1f4db7a717d8bafa0668ecb47f73ca0cc064ab40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A &lt;code&gt;RoutingModule&lt;/code&gt; is a module dedicated exclusively to configuring the Angular router. A consistent class and file name convention make these modules easy to spot and verify.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;A &lt;code&gt;RoutingModule&lt;/code&gt; は角度ルータの設定に特化したモジュールです。一貫したクラスとファイル名の規則により、これらのモジュールを簡単に見つけて確認できます。</target>
        </trans-unit>
        <trans-unit id="04589d2d9744514af189ea6e3054d6bf9d7d22f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A &lt;em&gt;component relative&lt;/em&gt; URL requires no change when you move the component files, as long as the files stay together.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;&lt;em&gt;コンポーネントの相対&lt;/em&gt;あなたがいる限り、ファイルが一緒にとどまるよう、コンポーネントファイルを移動すると、URLが変更を必要としません。</target>
        </trans-unit>
        <trans-unit id="c0e395c2378de24cfdc67c2df0ed44bfc442cd04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A developer can locate the code and identify what each file represents at a glance. The structure is as flat as it can be and there are no repetitive or redundant names.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;開発者はコードを見つけて、各ファイルが何を表しているかを一目で識別できます。構造は可能な限りフラットであり、繰り返しまたは冗長な名前はありません。</target>
        </trans-unit>
        <trans-unit id="1262a86b3590b85df017625720fbbcdc6d311c34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can easily be isolated for testing.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、テスト用に簡単に分離できます。</target>
        </trans-unit>
        <trans-unit id="d0befcba826a7c12a909b30a127b915f1633d173" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can easily be routed to both eagerly and lazily.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、熱心にも遅延にも簡単にルーティングできます。</target>
        </trans-unit>
        <trans-unit id="d8a9d11884cdfdbe0f14fccb1d35f8d0a08b3f3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module can expose or hide its implementation from other modules.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、その実装を他のモジュールから公開または非表示にすることができます。</target>
        </trans-unit>
        <trans-unit id="eb107a6bf76e17297ad715b7d51e4fb71ad58b07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module defines clear boundaries between specific functionality and other application features.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、特定の機能と他のアプリケーション機能の間の明確な境界を定義します。</target>
        </trans-unit>
        <trans-unit id="6abe63ff1c16959d3bd6cc84f3dc2944004b35d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module helps clarify and make it easier to assign development responsibilities to different teams.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、開発の責任を明確にし、さまざまなチームへの割り当てを容易にするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c683cac77b133fcddf5376450cec6bbebe1f977d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A feature module identifies distinct sets of related components that comprise the feature area.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;機能モジュールは、機能領域を構成する関連コンポーネントの個別のセットを識別します。</target>
        </trans-unit>
        <trans-unit id="85284312bcbd37c13bef3a0c96d45d476790c351" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A lazy loaded feature module that imports that shared module will make its own copy of the service and likely have undesirable results.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;その共有モジュールをインポートする遅延ロードされた機能モジュールは、サービスの独自のコピーを作成し、望ましくない結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="0740926be2e010643c4d521f9c1a255b48ee9178" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; A single component can be the default export for its file which facilitates lazy loading with the router.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;単一のコンポーネントをそのファイルのデフォルトのエクスポートにして、ルーターでの遅延ロードを容易にすることができます。</target>
        </trans-unit>
        <trans-unit id="2811feb73a16c592296e6d07558d99d29370128b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; An element may have more than one attribute directive applied.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;要素には、複数の属性ディレクティブが適用されている場合があります。</target>
        </trans-unit>
        <trans-unit id="07f45f2bfe81970ab8ea36a5d55fe680e01ab2f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Angular allows for an &lt;a href=&quot;template-syntax#binding-syntax&quot;&gt;alternative syntax&lt;/a&gt;&lt;code&gt;on-*&lt;/code&gt;. If the event itself was prefixed with &lt;code&gt;on&lt;/code&gt; this would result in an &lt;code&gt;on-onEvent&lt;/code&gt; binding expression.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angularでは、&lt;a href=&quot;template-syntax#binding-syntax&quot;&gt;代替構文&lt;/a&gt; &lt;code&gt;on-*&lt;/code&gt; を使用できます。イベント自体はが付いていた場合 &lt;code&gt;on&lt;/code&gt; 、このことになる &lt;code&gt;on-onEvent&lt;/code&gt; バインディング式。</target>
        </trans-unit>
        <trans-unit id="9cc424a44b45f6cafa38c31a9508d5e7ed3a747c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Attribute directives don't have an associated template.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;属性ディレクティブにはテンプレートが関連付けられていません。</target>
        </trans-unit>
        <trans-unit id="aa2f8a7961dc97adafb6e602f6fe6d05c58777f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Being DRY is important, but not crucial if it sacrifices the other elements of LIFT. That's why it's called &lt;em&gt;T-DRY&lt;/em&gt;. For example, it's redundant to name a template &lt;code&gt;hero-view.component.html&lt;/code&gt; because with the &lt;code&gt;.html&lt;/code&gt; extension, it is obviously a view. But if something is not obvious or departs from a convention, then spell it out.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;DRYであることは重要ですが、LIFTの他の要素を犠牲にする場合は重要ではありません。それが&lt;em&gt;T-DRY&lt;/em&gt;と呼ばれる理由です。たとえば、テンプレートに &lt;code&gt;hero-view.component.html&lt;/code&gt; という名前を付けることは冗長です。これは、 &lt;code&gt;.html&lt;/code&gt; 拡張子を使用すると、明らかにビューであるためです。しかし、何かが明白ではない、または慣習から逸脱している場合は、それを綴ってください。</target>
        </trans-unit>
        <trans-unit id="46a5882dc1138956f82e9db20a9f116859436e7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Clear service names such as &lt;code&gt;Logger&lt;/code&gt; do not require a suffix.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;Logger&lt;/code&gt; などの明確なサービス名にはサフィックスは必要ありません。</target>
        </trans-unit>
        <trans-unit id="c5e29beaefad891bdb4e78135e60f691b8ac86b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components are easy to identify in the DOM.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンポーネントはDOMで簡単に識別できます。</target>
        </trans-unit>
        <trans-unit id="939cda78012273bade6ae1142aa81a9144c9418e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components have templates containing HTML and optional Angular template syntax. They display content. Developers place components on the page as they would native HTML elements and web components.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンポーネントには、HTMLとオプションのAngularテンプレート構文を含むテンプレートがあります。コンテンツを表示します。開発者は、ネイティブHTML要素やWebコンポーネントと同じように、コンポーネントをページに配置します。</target>
        </trans-unit>
        <trans-unit id="940f7a48e45cacbadbcff27f2d8f20fa574d2cfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Components often have four files (e.g. &lt;code&gt;*.html&lt;/code&gt;, &lt;code&gt;*.css&lt;/code&gt;, &lt;code&gt;*.ts&lt;/code&gt;, and &lt;code&gt;*.spec.ts&lt;/code&gt;) and can clutter a folder quickly.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;多くの場合、コンポーネントには4つのファイル（たとえば、 &lt;code&gt;*.html&lt;/code&gt; 、 &lt;code&gt;*.css&lt;/code&gt; 、 &lt;code&gt;*.ts&lt;/code&gt; 、および &lt;code&gt;*.spec.ts&lt;/code&gt; ）があり、フォルダーがすぐにいっぱいになることがあります。</target>
        </trans-unit>
        <trans-unit id="cfc187a80923daabfa4dee51bab700e352640231" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Consistent conventions make it easy to quickly identify and reference assets of different types.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;一貫した規則により、さまざまなタイプのアセットをすばやく簡単に識別および参照できます。</target>
        </trans-unit>
        <trans-unit id="a4b76ada1e8fb40c5c098a2792e6ab48605b126c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Directives are easily identified.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ディレクティブは簡単に識別できます。</target>
        </trans-unit>
        <trans-unit id="a8ca309d4fd0bb05fc8f73be6ad20dd69c1b4b95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Directly importing and using a module will load it immediately when the intention is to load it on demand.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;モジュールを直接インポートして使用すると、オンデマンドでロードするつもりである場合、すぐにロードされます。</target>
        </trans-unit>
        <trans-unit id="63f93ef339450c1d644d4b8bc49215522e7b59b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Easily identifies the module as the root of the same named feature.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;モジュールを同じ名前の機能のルートとして簡単に識別します。</target>
        </trans-unit>
        <trans-unit id="73dbf9307ea727c571221c71f2cde877ad26415b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Every app requires at least one root NgModule.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;すべてのアプリには、少なくとも1つのルートNgModuleが必要です。</target>
        </trans-unit>
        <trans-unit id="f8912034bee6bd2c5284db5f887a57bef1b8b60e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Follows a consistent convention for the startup logic of an app.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;アプリの起動ロジックの一貫した規則に従います。</target>
        </trans-unit>
        <trans-unit id="b3732e3216913d5a42241b40a6a21935436ea08b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Follows a familiar convention from other technology platforms.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;他のテクノロジープラットフォームの一般的な慣例に従います。</target>
        </trans-unit>
        <trans-unit id="78d7122abd3625d885a97bc3035d8a97f9e45e39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Helps keep the app structure small and easy to maintain in the early stages, while being easy to evolve as the app grows.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;アプリの構造を小さく維持し、初期の段階で維持しやすく、アプリの成長に合わせて簡単に進化できるようにします。</target>
        </trans-unit>
        <trans-unit id="7c687f1cf4f1c9edfdbe38a122d9615679ae98bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Helps reduce the app from becoming cluttered through organizing the content and keeping them aligned with the LIFT guidelines.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンテンツを整理し、それらをLIFTガイドラインに合わせることで、アプリが雑然とするのを減らすのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="01e43bec054057c9a473876587798360338549a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; If you ever need to rename the property or event name associated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;, you can modify it in a single place.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;あなたがこれまでに関連付けられているプロパティまたはイベント名を変更する必要がある場合は &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 、あなたは1つの場所でそれを変更することができます。</target>
        </trans-unit>
        <trans-unit id="83dd1bd67fbbdf59da283e43e28d7ae77a9c9c2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; In most editors, syntax hints and code snippets aren't available when developing inline templates and styles. The Angular TypeScript Language Service (forthcoming) promises to overcome this deficiency for HTML templates in those editors that support it; it won't help with CSS styles.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ほとんどのエディターでは、インラインテンプレートとスタイルを開発する場合、構文ヒントとコードスニペットは使用できません。Angular TypeScript言語サービス（近日公開予定）は、HTMLテンプレートをサポートするエディターでのHTMLテンプレートのこの欠陥を克服することを約束します。CSSスタイルには役立ちません。</target>
        </trans-unit>
        <trans-unit id="ee9f32cdb67462e3204ef0425a24a68553bce2fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; It is easier and more readable to identify which properties in a class are inputs or outputs.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;クラスのどのプロパティが入力または出力であるかを特定する方が簡単で読みやすくなっています。</target>
        </trans-unit>
        <trans-unit id="228cd948e79db9c623be535c25f213d3d3422985" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; It is easier to recognize that a symbol is a component by looking at the template's html.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;テンプレートのhtmlを見ると、シンボルがコンポーネントであることを認識しやすくなります。</target>
        </trans-unit>
        <trans-unit id="79ce411eec9f34adba732b772f52ab1437a5c6df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;テンプレートではなくコンポーネントのプレゼンテーションロジックをクラスに保持すると、テスト容易性、保守性、再利用性が向上します。</target>
        </trans-unit>
        <trans-unit id="d93d6d0f23e181ca837ab7816b2c6cdb20cae929" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the component slim, trim, and focused.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンポーネントをスリムに、トリムし、集中させます。</target>
        </trans-unit>
        <trans-unit id="c74fd3a0f632cf9983d3fc214a237c481bc302ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the element names consistent with the specification for &lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;Custom Elements&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;要素名を&lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;カスタム要素の&lt;/a&gt;仕様と一致させます。</target>
        </trans-unit>
        <trans-unit id="69b13800ded4a6eb0eb25b17500db5601452451b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Keeps the names of the properties defined in the directives that are bound to the view consistent with the attribute names.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ビューにバインドされているディレクティブで定義されているプロパティの名前を属性名と一致させます。</target>
        </trans-unit>
        <trans-unit id="34b110dd651265ca74b8b4ee5f7e525579d16226" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; LIFT provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. To confirm your intuition about a particular structure, ask: &lt;em&gt;can I quickly open and start work in all of the related files for this feature&lt;/em&gt;?</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;LIFTは、拡張性に優れ、モジュール化された一貫性のある構造を提供し、コードをすばやく見つけることで開発者の効率を向上させます。特定の構造に関する直感を確認するには、次のように質問します。&lt;em&gt;この機能に関連するすべてのファイルをすばやく開いて作業を開始できます&lt;/em&gt;か？</target>
        </trans-unit>
        <trans-unit id="1a5aca0a18ca16fb031760f494714dfe8bd1ce00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Large, inline templates and styles obscure the component's purpose and implementation, reducing readability and maintainability.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;大きなインラインテンプレートとスタイルは、コンポーネントの目的と実装を不明瞭にし、可読性と保守性を低下させます。</target>
        </trans-unit>
        <trans-unit id="95b9295db45695636c9832d0ca9938ce26b305a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Lifecycle interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ライフサイクルインターフェイスは、型指定されたメソッドシグネチャを規定します。これらのシグネチャを使用して、スペルと構文の間違いを報告します。</target>
        </trans-unit>
        <trans-unit id="da64dc6c75d0a87ea84b1bfbfac899dd0508402a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスのロジックは単体テストでより簡単に分離でき、コンポーネントの呼び出しロジックは簡単にモックできます。</target>
        </trans-unit>
        <trans-unit id="9c2cd1b895fc5ebbfbcffeab1bba27b93162f5fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic may be reused by multiple components when placed within a service and exposed via a function.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ロジックは、サービス内に配置され、関数を介して公開されると、複数のコンポーネントで再利用できます。</target>
        </trans-unit>
        <trans-unit id="7641b0ce40613b8b7c95fc331cc3600ee9efe337" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Logic will be contained in one place (the component class) instead of being spread in two places.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ロジックは2か所に分散されるのではなく、1か所（コンポーネントクラス）に含まれます。</target>
        </trans-unit>
        <trans-unit id="ac78f5ecc58fb086521b79c28011d6d15366f84d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Makes it easier to locate and identify the root module.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ルートモジュールを見つけて識別するのが容易になります。</target>
        </trans-unit>
        <trans-unit id="c36ddbd1e55599db4b36de94bc8884dcc20080f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Makes it easier to promote and share the component in other apps.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;他のアプリでのコンポーネントの宣伝と共有が簡単になります。</target>
        </trans-unit>
        <trans-unit id="b462dbb835ebea6ff2a4304b884761584cdaaf27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Names of folders and files should clearly convey their intent. For example, &lt;code&gt;app/heroes/hero-list.component.ts&lt;/code&gt; may contain a component that manages a list of heroes.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;フォルダとファイルの名前は、その意図を明確に伝える必要があります。たとえば、 &lt;code&gt;app/heroes/hero-list.component.ts&lt;/code&gt; には、ヒーローのリストを管理するコンポーネントを含めることができます。</target>
        </trans-unit>
        <trans-unit id="2cd26c7cf1e009ca7818e2e37e0cdab8a245cbdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Naming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important. Consistency across a company provides tremendous efficiency.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;命名規則は、一目でコンテンツを検索する一貫した方法を提供するのに役立ちます。プロジェクト内の一貫性は不可欠です。チームとの一貫性が重要です。会社全体の一貫性は、驚異的な効率を提供します。</target>
        </trans-unit>
        <trans-unit id="a16fe1ecf423c1ef637c0ac4e22c582c55ccd18f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; NgModules make it easier to isolate, test, and reuse features.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;NgModuleを使用すると、機能の分離、テスト、再利用が簡単になります。</target>
        </trans-unit>
        <trans-unit id="a2bdf377dda9552be8d4adff954274c392ffa660" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; NgModules make it easy to lazy load routable features.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;NgModuleを使用すると、ルーティング可能な機能のレイジーロードが簡単になります。</target>
        </trans-unit>
        <trans-unit id="2dbc9a54c009895a704681c4abbe2acae1892ffb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; No one wants to search for a file through seven levels of folders. A flat structure is easy to scan.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;7つのレベルのフォルダーを介してファイルを検索する必要はありません。平らな構造はスキャンが簡単です。</target>
        </trans-unit>
        <trans-unit id="371af0d588614975ac80631a6277e61df99b795c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; One component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ファイルごとに1つのコンポーネントを使用すると、変数を共有したり、不要なクロージャーを作成したり、依存関係との不要なカップリングを作成したりする可能性があるファイル内のコンポーネントを組み合わせるときによく発生する隠れたバグを回避できます。</target>
        </trans-unit>
        <trans-unit id="23fe6f97cf7b97c5632fad61a075d9813272f3bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; One component per file makes it far easier to read, maintain, and avoid collisions with teams in source control.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ファイルごとに1つのコンポーネントを使用すると、ソース管理でのチームとの衝突の読み取り、保守、回避がはるかに容易になります。</target>
        </trans-unit>
        <trans-unit id="156a49dd95596cb5e1910e49cfb2894d05e2d1f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Placing members in a consistent sequence makes it easy to read and helps instantly identify which members of the component serve which purpose.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;メンバーを一貫した順序で配置すると、読みやすくなり、コンポーネントのどのメンバーがどの目的を果たしているかを即座に識別できます。</target>
        </trans-unit>
        <trans-unit id="dd52dbb328d25e75e5796399f02fe7e4ef7fcc70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Placing the decorator on the same line &lt;em&gt;usually&lt;/em&gt; makes for shorter code and still easily identifies the property as an input or output. Put it on the line above when doing so is clearly more readable.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;デコレータを同じ行に配置すると、&lt;em&gt;通常&lt;/em&gt;はコードが短くなり、プロパティを入力または出力として簡単に識別できます。読みやすくする場合は、上の行に入れてください。</target>
        </trans-unit>
        <trans-unit id="542f040e61234a8393cc2fb46e57220934925568" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Prevents element name collisions with components in other apps and with native HTML elements.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;要素名が他のアプリのコンポーネントやネイティブHTML要素と衝突するのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="de9657cd860484482d608521d99bff9845e66793" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Prevents name collisions.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;名前の衝突を防ぎます。</target>
        </trans-unit>
        <trans-unit id="67487e9a7b5cc11689cc116920093851725cd844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference modules.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;モジュールをすばやく識別および参照するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="58422644ad41e1a065831ecac64fd138c67589d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference pipes.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;パイプをすばやく識別および参照するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="374a3fec339150ba2b843eaef8697cd18d692310" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify and reference services.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスをすばやく識別および参照するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="2bc680cfe4e4d3c901eb72d30b972fd3ecb5b82e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify end-to-end tests.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;エンドツーエンドのテストをすばやく特定する一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="6b865315fedffc33d1e166f9a0ee0f13e2d4eda7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides a consistent way to quickly identify tests.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;テストを迅速に識別するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="0b4e5eae96ab0e654b4e8d48cd47c3b6355b4593" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides pattern matching for &lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;karma&lt;/a&gt; or other test runners.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;&lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;カルマ&lt;/a&gt;または他のテストランナーのパターンマッチングを提供します。</target>
        </trans-unit>
        <trans-unit id="f5a3f93d744d9f63fd43b9d63144503583c2ce47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Provides pattern matching for test runners and build automation.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;テストランナーとビルドの自動化にパターンマッチングを提供します。</target>
        </trans-unit>
        <trans-unit id="f36b0035ff9bed396c67a5eac59b0adb7b417532" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Removes dependencies and hides implementation details from the component.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;依存関係を削除し、実装の詳細をコンポーネントから隠します。</target>
        </trans-unit>
        <trans-unit id="6bcec3d26a77941dc7b7888da6c96b2adce22833" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Service names such as &lt;code&gt;Credit&lt;/code&gt; are nouns and require a suffix and should be named with a suffix when it is not obvious if it is a service or something else.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;Credit&lt;/code&gt; などのサービス名は名詞であり、サフィックスが必要であり、サービスか他のものかが明確でない場合は、サフィックスを付けて名前を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="2c59855aa491026a9f90d721af2e37c9574062ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Services are ideal for sharing methods across a feature area or an app.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスは、機能領域またはアプリ全体でメソッドを共有するのに理想的です。</target>
        </trans-unit>
        <trans-unit id="d04fc6329854aa92b9b07981287ddf759c80af40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Services are ideal for sharing stateful in-memory data.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスは、ステートフルなインメモリデータの共有に最適です。</target>
        </trans-unit>
        <trans-unit id="0b0c75eb7454de8ebb65df15b000f0f00ac25b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to maintain.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな機能はメンテナンスが簡単です。</target>
        </trans-unit>
        <trans-unit id="46a37119db45b3abde6d62453aa73a346016d9ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to read.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな関数は読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="8ce7e1b2ea1ce4d48a6d89d7d7258cb05a272dec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions are easier to test, especially when they do one thing and serve one purpose.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな関数は、特に1つのことを実行し、1つの目的を果たす場合に、テストが簡単です。</target>
        </trans-unit>
        <trans-unit id="3d5fec2bd249ca55b61637acabe970f213445438" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions help avoid hidden bugs that come with large functions that share variables with external scope, create unwanted closures, or unwanted coupling with dependencies.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな関数は、外部スコープと変数を共有したり、不要なクロージャーを作成したり、依存関係との不要な結合を作成したりする大きな関数に付随する隠れたバグを回避するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d7af862514e2de136fa80a338391a45134a26d69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Small functions promote reuse.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;小さな関数は再利用を促進します。</target>
        </trans-unit>
        <trans-unit id="55fa9a87dc53f6fb8b9cb9c3dbd8b91fa4439d68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Spend less time hunting and pecking for code, and become more efficient. Longer file names are far better than &lt;em&gt;short-but-obscure&lt;/em&gt; abbreviated names.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コードを探したりつまんだりする時間を短縮し、効率を高めます。長いファイル名は、&lt;em&gt;短く&lt;/em&gt;ても&lt;em&gt;あいまいな&lt;/em&gt;省略名よりもはるかに優れています。</target>
        </trans-unit>
        <trans-unit id="bb36cf42c22a06710f9daa2f5cb57ef4f882393d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The &lt;code&gt;./&lt;/code&gt; prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;./&lt;/code&gt; プレフィックスは、相対URLの標準構文です。その接頭辞なしで実行できるAngularの現在の能力に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="6e9d2faf7d97e3162943dd7bd177c19da377b99c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata is only one term to remember and doesn't require extra ES imports.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; メタデータは、覚えておくべき唯一の用語であり、余分なESの輸入を必要としません。</target>
        </trans-unit>
        <trans-unit id="b07e3f7e9bf20cfdb5fcc4963ca7e2dedc827101" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular Dependency Injection (DI) mechanism resolves a service's own dependencies based on the declared types of that service's constructor parameters.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angular Dependency Injection（DI）メカニズムは、サービスのコンストラクターパラメーターの宣言された型に基づいて、サービス自体の依存関係を解決します。</target>
        </trans-unit>
        <trans-unit id="9d2d736f1803c3ddb836cd66dcd10849e6f778d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular HTML parser is case sensitive and recognizes lower camel case.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angular HTMLパーサーは大文字と小文字を区別し、ラクダの小文字を認識します。</target>
        </trans-unit>
        <trans-unit id="278ee06b3b41700c164528c6006a02f08e4b912d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The Angular injector is hierarchical.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;Angularインジェクターは階層的です。</target>
        </trans-unit>
        <trans-unit id="fb4e3183de0370836d208f02797380c826ae8617" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The LIFT guidelines are all covered.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;リフトのガイドラインはすべてカバーされています。</target>
        </trans-unit>
        <trans-unit id="fe9e050bab86c1ffbd191b1a30d210718a5292ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The component's responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;コンポーネントの責任は、ビューの情報の提示と収集です。データを取得する方法を気にする必要はありません。データを要求するユーザーを知っているだけです。データサービスを分離すると、それをデータサービスに取得する方法のロジックが移動し、コンポーネントをより簡単に、ビューに集中させることができます。</target>
        </trans-unit>
        <trans-unit id="a614e3f562640e92be2a71f4d9cfee595dbf229a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The details of data management, such as headers, HTTP methods, caching, error handling, and retry logic, are irrelevant to components and other data consumers.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ヘッダー、HTTPメソッド、キャッシング、エラー処理、再試行ロジックなどのデータ管理の詳細は、コンポーネントや他のデータコンシューマーには関係ありません。</target>
        </trans-unit>
        <trans-unit id="5ac4546d94ce9e713dceaf33efc111a345050f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The folder makes it easy to identify and isolate the feature content.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;このフォルダーを使用すると、機能のコンテンツを簡単に識別して分離できます。</target>
        </trans-unit>
        <trans-unit id="bbf594ac0333396e41fcd880058df192f3ece2a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The metadata declaration attached to the directive is shorter and thus more readable.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ディレクティブに添付されているメタデータ宣言は短く、読みやすくなっています。</target>
        </trans-unit>
        <trans-unit id="d399c257c9692973faee7e2443a4fdaebb5be4fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The naming conventions should simply help find desired code faster and make it easier to understand.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;命名規則は、必要なコードをより速く見つけ、理解しやすくするために役立つはずです。</target>
        </trans-unit>
        <trans-unit id="9023567514f1a5c8648f2d14c2036fa7d2b1cfbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; The property associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; or the method associated with &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; can be modified only in a single place&amp;mdash;in the directive's class. If you use the &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata property, you must modify both the property/method declaration in the directive's class and the metadata in the decorator associated with the directive.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/hostbinding&quot;&gt;HostBinding&lt;/a&gt;&lt;/code&gt; 関連付けられたプロパティまたは &lt;code&gt;@&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 関連付けられたメソッドは、ディレクティブのクラス内の1か所でのみ変更できます。 &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; メタデータプロパティを使用する場合は、ディレクティブのクラスのプロパティ/メソッド宣言と、ディレクティブに関連付けられたデコレータのメタデータの両方を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="f040d63ae1b831a345a8a815f6e19f07b2eb4d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This is consistent with built-in events such as button clicks.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;これは、ボタンのクリックなどの組み込みイベントと一致しています。</target>
        </trans-unit>
        <trans-unit id="0c7fe70cd15a7e29c72a0498423580cfdc75ea61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the service at the component level that needs the new and separate instance.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;2つの異なるコンポーネントがサービスの異なるインスタンスを必要とする場合、これは理想的ではありません。このシナリオでは、新しい個別のインスタンスを必要とするコンポーネントレベルでサービスを提供する方が適切です。</target>
        </trans-unit>
        <trans-unit id="a7340e0f3575e2046047131f4cb62ee616e9870e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; This makes it easier to test (mock or real) the data calls when testing a component that uses a data service.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;これにより、データサービスを使用するコンポーネントをテストするときに、データコールのテスト（モックまたは実際）が容易になります。</target>
        </trans-unit>
        <trans-unit id="5292b998c4720c145931663c9f0afcdab144934a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; To work efficiently you must be able to find files quickly, especially when you do not know (or do not remember) the file &lt;em&gt;names&lt;/em&gt;. Keeping related files near each other in an intuitive location saves time. A descriptive folder structure makes a world of difference to you and the people who come after you.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;効率的に作業するには、特にファイル&lt;em&gt;名が&lt;/em&gt;わからない（または覚えていない）場合に、ファイルをすばやく検索できる必要があります。関連するファイルを直感的な場所で互いに近くに置くと、時間を節約できます。説明的なフォルダ構造は、あなたとあなたの後を追う人々に世界の違いをもたらします。</target>
        </trans-unit>
        <trans-unit id="c04e4c59fda45f1e4aa5dc5f007017f9fd5b3322" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Two names for the same property (one private, one public) is inherently confusing.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;同じプロパティの2つの名前（1つはプライベート、もう1つはパブリック）は本質的に混乱します。</target>
        </trans-unit>
        <trans-unit id="8104706a9f913d8ffb73065297d4460e3560d09b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names make it easy to find a specific file type using an editor or IDE's fuzzy search techniques.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;タイプ名を使用すると、エディターまたはIDEのあいまい検索手法を使用して、特定のファイルタイプを簡単に見つけることができます。</target>
        </trans-unit>
        <trans-unit id="614a4b4cb7643480df4076413389b81e1bf2f0bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names provide a consistent way to quickly identify what is in the file.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;タイプ名は、ファイルの内容をすばやく識別するための一貫した方法を提供します。</target>
        </trans-unit>
        <trans-unit id="dca7d2e6018c2f33185a5723145d3f45ecb49ccd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Type names provide pattern matching for any automated tasks.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;タイプ名は、自動タスクのパターンマッチングを提供します。</target>
        </trans-unit>
        <trans-unit id="5cf32259a6a149b346e42dfc65131b05d787fcf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Unabbreviated type names such as &lt;code&gt;.service&lt;/code&gt; are descriptive and unambiguous. Abbreviations such as &lt;code&gt;.srv&lt;/code&gt;, &lt;code&gt;.svc&lt;/code&gt;, and &lt;code&gt;.serv&lt;/code&gt; can be confusing.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;.serviceなどの &lt;code&gt;.service&lt;/code&gt; ていない型名は説明的で明確です。以下のような略語 &lt;code&gt;.srv&lt;/code&gt; 、 &lt;code&gt;.svc&lt;/code&gt; 、および &lt;code&gt;.serv&lt;/code&gt; が混乱することができます。</target>
        </trans-unit>
        <trans-unit id="cb98cc6d7953db2a6009be749552767d8a34910d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; Upper camel case is conventional for identifying objects that can be instantiated using a constructor.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ラクダの大文字は、コンストラクタを使用してインスタンス化できるオブジェクトを識別するための慣例です。</target>
        </trans-unit>
        <trans-unit id="ad71d03bcb082d586eb4ec09e191fbb81ef4784d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service accepts only dependencies associated with type tokens, the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; syntax is much less verbose compared to using &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; on each individual constructor parameter.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスがタイプトークンに関連付けられた依存関係のみを受け入れる場合、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 構文は、個々のコンストラクターパラメーターで &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; を使用する場合に比べてはるかに簡潔になります。</target>
        </trans-unit>
        <trans-unit id="1e291754420a43c44695cd0d87edc4386d63facb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service has multiple responsibilities, every component or service that injects it now carries the weight of them all.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスに複数の責任がある場合、それを投入するすべてのコンポーネントまたはサービスは、それらすべての重みを担います。</target>
        </trans-unit>
        <trans-unit id="ecd61cbc612d48036b3203a7fcee069dd63437fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When a service has multiple responsibilities, it becomes difficult to test.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスに複数の責任がある場合、テストが困難になります。</target>
        </trans-unit>
        <trans-unit id="94a43d926c75940db64f94d3a768021df0616f72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When there are a lot of files, for example 10+, locating them is easier with a consistent folder structure and more difficult in a flat structure.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ファイルが多数ある場合（10以上など）、ファイルの場所を特定するのは、一貫したフォルダー構造を使用すると簡単になり、フラット構造では困難になります。</target>
        </trans-unit>
        <trans-unit id="cc10eddeefb95f7a75a29a1a0d67027dc62f15bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When you provide the service to a root injector, that instance of the service is shared and available in every class that needs the service. This is ideal when a service is sharing methods or state.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ルートインジェクターにサービスを提供すると、そのサービスのインスタンスが共有され、サービスを必要とするすべてのクラスで利用できます。これは、サービスがメソッドまたは状態を共有している場合に理想的です。</target>
        </trans-unit>
        <trans-unit id="03ef8461d4efc0093bb002ee20959403d2fd5f5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; When you register a service in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; decorator of the service, optimization tools such as those used by the &lt;a href=&quot;cli&quot;&gt;Angular CLI's&lt;/a&gt; production builds can perform tree shaking and remove services that aren't used by your app.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; デコレーターにサービスを登録すると、&lt;a href=&quot;cli&quot;&gt;Angular CLIの&lt;/a&gt;本番環境ビルドで使用されるツールなどの最適化ツールがツリーの揺れを実行し、アプリで使用されていないサービスを削除できます。</target>
        </trans-unit>
        <trans-unit id="8a7c2b004c7ea14b9e097036f546c90cef37a5b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; You don't want each module to have its own separate instance of singleton services. Yet there is a real danger of that happening if the &lt;code&gt;SharedModule&lt;/code&gt; provides a service.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;各モジュールがシングルトンサービスの独自の個別のインスタンスを持つことは望ましくありません。しかし、 &lt;code&gt;SharedModule&lt;/code&gt; がサービスを提供する場合、それが実際に発生する危険があります。</target>
        </trans-unit>
        <trans-unit id="16bf87abbd424a3fed90100dce9703f5bc6cce6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; You should use an alias when the directive name is also an &lt;em&gt;input&lt;/em&gt; property, and the directive name doesn't describe the property.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;ディレクティブ名も&lt;em&gt;入力&lt;/em&gt;プロパティであり、ディレクティブ名がプロパティを説明していない場合は、エイリアスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dfdef4b3079947025cd8bddf4f6530b08c1865b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt; gives reasons for following the previous recommendations.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt;以前の推奨事項に従う理由を示します。</target>
        </trans-unit>
        <trans-unit id="024123ca4b271ded41b1bae659b4fd92d8c26c8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt;&lt;code&gt;SharedModule&lt;/code&gt; exists to make commonly used components, directives and pipes available for use in the templates of components in many other modules.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;SharedModule&lt;/code&gt; は、一般的に使用されるコンポーネント、ディレクティブ、およびパイプを他の多くのモジュールのコンポーネントのテンプレートで使用できるようにするために存在します。</target>
        </trans-unit>
        <trans-unit id="e3678c7a0e748230934da9dd34b2e9b1dba606fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Why?&lt;/strong&gt;&lt;code&gt;SharedModule&lt;/code&gt; will contain components, directives and pipes that may need features from another common module; for example, &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;どうして？&lt;/strong&gt; &lt;code&gt;SharedModule&lt;/code&gt; には、別の共通モジュールの機能が必要になる可能性があるコンポーネント、ディレクティブ、およびパイプが含まれます。例えば、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d8bf39083c5b8bd86f45a0335e844a8767d8843" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Writing style:&lt;/strong&gt; Word usage, grammar, capitalization, and punctuation. Adherence to Angular's writing guidelines ensures a consistent &quot;voice&quot;, helps ensure accuracy of the information, and facilitates use world-wide, by audiences with different backgrounds.</source>
          <target state="translated">&lt;strong&gt;ライティングスタイル：&lt;/strong&gt;単語の使用法、文法、大文字、句読点。Angularのライティングガイドラインを順守することで、一貫した「声」が保証され、情報の正確性が保証され、さまざまな背景を持つ対象者による世界中での使用が容易になります。</target>
        </trans-unit>
        <trans-unit id="c22269fbbd3c4560d644e04e27c3fafe3a3ed683" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Writing style&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;文体&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c4286b19db97cef175c9a3173bfe836d4c98f6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You can run the live example to see the complete reactive and template-driven example code.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ライブサンプルを実行して、完全な反応型およびテンプレート駆動型のサンプルコードを確認できます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47490898496c18c307d4ad5836bfe7ec31a36994" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You don't need to do anything to get &lt;em&gt;typings&lt;/em&gt; files for library packages that include &lt;code&gt;d.ts&lt;/code&gt; files. Angular packages include them already.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;あなたが得るために何かをする必要はありません&lt;em&gt;タイピングを&lt;/em&gt;含めるライブラリパッケージのファイル &lt;code&gt;d.ts&lt;/code&gt; のファイルを。Angularパッケージにはすでに含まれています。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7418ad94c4f5bffad199aa1037f6c20189206d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[(ngModel)]&lt;/strong&gt; is Angular's two-way data binding syntax.</source>
          <target state="translated">&lt;strong&gt;[(ngModel)]&lt;/strong&gt; is Angular's two-way data binding syntax.</target>
        </trans-unit>
        <trans-unit id="3fe1d3b73ec04a4f495bb01dc96b64677028d061" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;codelyzer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;codelyzer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80bda6ac72accbc1ca9816b620a3e9a6b118354f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;descendants&lt;/strong&gt; - True to include all descendants, otherwise include only direct children.</source>
          <target state="translated">&lt;strong&gt;子孫&lt;/strong&gt; -すべての子孫を含める場合はTrue、それ以外の場合は直接の子のみを含めます。</target>
        </trans-unit>
        <trans-unit id="adfdf22704311e6c562267346f98f332e0460601" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jasmine/... &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;jasmine/... &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6371ee47035798a336b02cb24af48b8e42ede972" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;karma/... &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;karma/... &lt;/strong&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
