<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="ac650fccd8ead68e2d8c45cd5891eb0840e3f4a2" translate="yes" xml:space="preserve">
          <source>Declaring directives</source>
          <target state="translated">宣言ディレクティブ</target>
        </trans-unit>
        <trans-unit id="2bc45504ae00fbf29fe8388adb2891f26d16a064" translate="yes" xml:space="preserve">
          <source>Decodes an encoded URL parameter or query-string key.</source>
          <target state="translated">エンコードされた URL パラメータまたはクエリ文字列キーをデコードします。</target>
        </trans-unit>
        <trans-unit id="8aee91813b451b3778fab17f3e6d531cd57b5197" translate="yes" xml:space="preserve">
          <source>Decodes an encoded URL parameter or query-string value.</source>
          <target state="translated">エンコードされたURLパラメータまたはクエリ文字列の値をデコードします。</target>
        </trans-unit>
        <trans-unit id="2038623fc71103952b2ba258516c5f3d7840ecde" translate="yes" xml:space="preserve">
          <source>Decodes the hash from the provided string</source>
          <target state="translated">与えられた文字列からハッシュをデコードします。</target>
        </trans-unit>
        <trans-unit id="7a932704d6c6ef1ef267af7766d9f2e2ad68535b" translate="yes" xml:space="preserve">
          <source>Decodes the path from the provided string</source>
          <target state="translated">指定された文字列からパスをデコードします</target>
        </trans-unit>
        <trans-unit id="dd7d5e9ea24bd4ef7c1fe30602bb817b06e46326" translate="yes" xml:space="preserve">
          <source>Decodes the search objects from the provided string</source>
          <target state="translated">指定された文字列から検索オブジェクトをデコードします。</target>
        </trans-unit>
        <trans-unit id="062e159b6481b23409f9d9fb73b36ad762dc5f1f" translate="yes" xml:space="preserve">
          <source>Decorate &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; properties</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; と &lt;code&gt;output&lt;/code&gt; プロパティを装飾する</target>
        </trans-unit>
        <trans-unit id="efae1157004840ce53744bf4910848b2a54d6036" translate="yes" xml:space="preserve">
          <source>Decorated and data-bound class members must be public.</source>
          <target state="translated">デコレーションされたクラスおよびデータバインドされたクラスのメンバは、パブリックでなければなりません。</target>
        </trans-unit>
        <trans-unit id="8d20855dde10821727be4973f1a1b332029694d1" translate="yes" xml:space="preserve">
          <source>Decorated component class members must be public. You cannot make an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property private or protected.</source>
          <target state="translated">装飾されたコンポーネントクラスのメンバーはパブリックである必要があります。 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティをプライベートまたは保護にすることはできません。</target>
        </trans-unit>
        <trans-unit id="75585dc43ebb9a44de9edabbf4fcb972f67e5b5a" translate="yes" xml:space="preserve">
          <source>Decorator that declares a DOM event to listen for, and provides a handler method to run when that event occurs.</source>
          <target state="translated">リッスンする DOM イベントを宣言し、そのイベントが発生したときに実行するハンドラメソッドを提供する Decorator。</target>
        </trans-unit>
        <trans-unit id="06f314686cda74dbcdc6072d3d30b7b552f3828a" translate="yes" xml:space="preserve">
          <source>Decorator that marks a DOM property as a host-binding property and supplies configuration metadata. Angular automatically checks host property bindings during change detection, and if a binding changes it updates the host element of the directive.</source>
          <target state="translated">DOMプロパティをホストバインディングプロパティとしてマークし、設定メタデータを提供するデコレータです。Angular は変更検出時にホストプロパティのバインディングを自動的にチェックし、バインディングが変更されるとディレクティブのホスト要素を更新します。</target>
        </trans-unit>
        <trans-unit id="542fac39a0c25257bafa494b67a691039e7fe190" translate="yes" xml:space="preserve">
          <source>Decorator that marks a class as an Angular component and provides configuration metadata that determines how the component should be processed, instantiated, and used at runtime.</source>
          <target state="translated">クラスをAngularコンポーネントとしてマークし、実行時にコンポーネントがどのように処理され、インスタンス化され、使用されるべきかを決定する設定メタデータを提供するデコレータです。</target>
        </trans-unit>
        <trans-unit id="54fadbc3c296510749dca2013335bb14188c6861" translate="yes" xml:space="preserve">
          <source>Decorator that marks a class as an Angular directive. You can define your own directives to attach custom behavior to elements in the DOM.</source>
          <target state="translated">クラスを Angular ディレクティブとしてマークするデコレータです。独自のディレクティブを定義して、DOM内の要素にカスタムの振る舞いを付けることができます。</target>
        </trans-unit>
        <trans-unit id="147b75641348b8313862ccda39948337f00188dd" translate="yes" xml:space="preserve">
          <source>Decorator that marks a class as an NgModule and supplies configuration metadata.</source>
          <target state="translated">クラスをNgModuleとしてマークし、設定メタデータを提供するデコレータです。</target>
        </trans-unit>
        <trans-unit id="2c2429c1549c508d15ecd2b546db50f3c94e5597" translate="yes" xml:space="preserve">
          <source>Decorator that marks a class as available to be provided and injected as a dependency.</source>
          <target state="translated">クラスを提供可能なものとしてマークし、依存関係として注入するデコレータ。</target>
        </trans-unit>
        <trans-unit id="39326538b31e6f6885bca1ca78653f5efcdec9dd" translate="yes" xml:space="preserve">
          <source>Decorator that marks a class as pipe and supplies configuration metadata.</source>
          <target state="translated">クラスをパイプとしてマークし、設定メタデータを提供するデコレータ。</target>
        </trans-unit>
        <trans-unit id="b2032e24d27125e464324d9b7df0505927afa011" translate="yes" xml:space="preserve">
          <source>Decorator that marks a class field as an input property and supplies configuration metadata. The input property is bound to a DOM property in the template. During change detection, Angular automatically updates the data property with the DOM property's value.</source>
          <target state="translated">クラスフィールドを入力プロパティとしてマークし、設定メタデータを提供するデコレータ。入力プロパティはテンプレート内のDOMプロパティにバインドされます。変更検出時には、Angularは自動的にDOMプロパティの値でデータプロパティを更新します。</target>
        </trans-unit>
        <trans-unit id="da683e3ad3ee83805b1fd0e2479630efc8c206e2" translate="yes" xml:space="preserve">
          <source>Decorator that marks a class field as an output property and supplies configuration metadata. The DOM property bound to the output property is automatically updated during change detection.</source>
          <target state="translated">クラスフィールドを出力プロパティとしてマークし、設定メタデータを提供するデコレータ。出力プロパティにバインドされた DOM プロパティは、変更検出時に自動的に更新されます。</target>
        </trans-unit>
        <trans-unit id="a2e23b650a15e5c693ca1445133d5ee60d9d20b4" translate="yes" xml:space="preserve">
          <source>Decorators</source>
          <target state="translated">Decorators</target>
        </trans-unit>
        <trans-unit id="da3808ca96b01e8fd16e2a06a7564a7822eb3e4b" translate="yes" xml:space="preserve">
          <source>Decorators are functions that modify JavaScript classes. Angular defines a number of decorators that attach specific kinds of metadata to classes, so that the system knows what those classes mean and how they should work.</source>
          <target state="translated">デコレータはJavaScriptのクラスを修正する関数です。Angularはクラスに特定の種類のメタデータを添付するデコレータをいくつか定義しています。</target>
        </trans-unit>
        <trans-unit id="046771e00752578919124510d90fd88750570b5d" translate="yes" xml:space="preserve">
          <source>Decreases the number of pending request</source>
          <target state="translated">保留中のリクエスト数を減少させる</target>
        </trans-unit>
        <trans-unit id="08b0acb88b65a7c7a047365717b6a16f6993ebf7" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; configuration for projects in the workspace.</source>
          <target state="translated">ワークスペース内のプロジェクトのデフォルトの&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;構成。</target>
        </trans-unit>
        <trans-unit id="e30eaec489000b4a7a0ca6c7d0d4a10f2c02171f" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration for projects in the workspace.</source>
          <target state="translated">ワークスペース内のプロジェクトのデフォルトの&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;構成。</target>
        </trans-unit>
        <trans-unit id="113972ed85a44c2d6f2d83e8313a8702055ff3c6" translate="yes" xml:space="preserve">
          <source>Default Architect builders and targets</source>
          <target state="translated">デフォルトのアーキテクトのビルダーとターゲット</target>
        </trans-unit>
        <trans-unit id="63f359affa8c9e1087e61e45f3bfcc30f98d18a8" translate="yes" xml:space="preserve">
          <source>Default architect configuration</source>
          <target state="translated">デフォルトのアーキテクト構成</target>
        </trans-unit>
        <trans-unit id="a242d3cf5b2a9c6afb60ed18be622df851cb377b" translate="yes" xml:space="preserve">
          <source>Default is currently false.</source>
          <target state="translated">デフォルトは現在falseです。</target>
        </trans-unit>
        <trans-unit id="e8ac2fc6220ae2ee87143ccb049cecea94c63ada" translate="yes" xml:space="preserve">
          <source>Default size-budget type and threshholds for all or parts of your app. You can configure the builder to report a warning or an error when the output reaches or exceeds a threshold size. See &lt;a href=&quot;build#configure-size-budgets&quot;&gt;Configure size budgets&lt;/a&gt;. (Not available in &lt;code&gt;test&lt;/code&gt; section.)</source>
          <target state="translated">アプリのすべてまたは一部のデフォルトのサイズ予算タイプとしきい値。出力がしきい値サイズに達したか超えたときに警告またはエラーを報告するようにビルダーを構成できます。&lt;a href=&quot;build#configure-size-budgets&quot;&gt;サイズの予算の設定を&lt;/a&gt;ご覧ください。（ &lt;code&gt;test&lt;/code&gt; セクションでは使用できません。）</target>
        </trans-unit>
        <trans-unit id="317bbd656753a9dd8ea52dce97e89a2822b25653" translate="yes" xml:space="preserve">
          <source>Default:</source>
          <target state="translated">Default:</target>
        </trans-unit>
        <trans-unit id="61f2d4a71bf558e84e2c3f6097b5299bb8527a31" translate="yes" xml:space="preserve">
          <source>Default: 'registerWhenStable'</source>
          <target state="translated">デフォルト:'registerWhenStable'</target>
        </trans-unit>
        <trans-unit id="a1c65a6502d6516e813657ded5fa271c01c936f3" translate="yes" xml:space="preserve">
          <source>Default: true</source>
          <target state="translated">デフォルト:true</target>
        </trans-unit>
        <trans-unit id="a7d92a6c0d0700d1f5d27cc93561cb698235d75e" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;4200&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;4200&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e534b9bc59cc35ed596e3d52a27c112d3b447fd2" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;AppServerModule&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;AppServerModule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="62d8ddde592aace33cdedc9f7ff5db8124377a35" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;Child&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;Child&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="362a94e8934df56158b8fcf406fef69b1b8b937f" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;Default&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;Default&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31dd447d1e197208263232a14e4b09c98c8c67c1" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;app.server.module.ts&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;app.server.module.ts&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b81035c7cfe4f1f16f706195740b1d641c47660" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;app&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;app&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e9b7f553bf37a6fa503e7ff8fedc3d3ad53296c" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;build&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;build&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef1398e571684d0ff9b89d114b6ad6b76012bcae" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;css&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;css&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ccce1f425ace5df3413f25f2764b65c22b6d468e" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;dist-server&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;dist-server&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1206b7148f935e93d741657612cd60f8df41560e" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a39fc988eabf3af75b55b1c0742c1862b77a46b" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;index.html&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;index.html&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e55a308f669d966d6652e9a98f710ce1efb4890f" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;lib&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;lib&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="150921537b0205c20cf347f2551372c662cf2eeb" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;localhost&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;localhost&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="90996341071c4d663d5773812f29490934b18209" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;main.server.ts&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;main.server.ts&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b886c4fd6b47554356549df40239ed36762fb458" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;none&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;none&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6f12228db7c8844c52da6e16ae4f84912260863" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;production&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;production&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d28195afb50d3af379592d37e9b11e95268a1bc7" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;projects&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;projects&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9ef5f637a575ac24ee799eb1f46529522c6a7b3a" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;prose&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;prose&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d88359db7189adad0dd209dc1e36e2a5a44b389" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;public-api&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;public-api&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc4cdc4a0620bc85c35cc0985ab1171b55ba0a4f" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;serverApp&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;serverApp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="533d1a7b8646f62917b3ab7819ff29878dd1d08e" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;shell&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;shell&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="686319b13675c66420027bd730510aec8bad6955" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;src&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;src&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="94d281a4a89b897b769dc942f7fde6d38df484f7" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52042906c683969c26d75239988b89501df5717e" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;tsconfig.server&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;tsconfig.server&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1de78ccd96cdac76c54716e4bed0bd3eaa38fd4f" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;tsconfig.spec&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;tsconfig.spec&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="019b2c4418deec7387a57c6cd629ac8ccb162060" translate="yes" xml:space="preserve">
          <source>Default:&lt;code&gt;xlf&lt;/code&gt;</source>
          <target state="translated">Default:&lt;code&gt;xlf&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3263c670a9cc238df307d5b499b4b1a389bab6b6" translate="yes" xml:space="preserve">
          <source>DefaultIterableDiffer</source>
          <target state="translated">DefaultIterableDiffer</target>
        </trans-unit>
        <trans-unit id="7b208a18b43c24b5e2e51af667317c6e8445d465" translate="yes" xml:space="preserve">
          <source>DefaultUrlSerializer</source>
          <target state="translated">DefaultUrlSerializer</target>
        </trans-unit>
        <trans-unit id="8fbd4101ec587a6f2d184f0b05bf2bd4fff464cf" translate="yes" xml:space="preserve">
          <source>DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to specify route specific parameters.</source>
          <target state="translated">DefaultUrlSerializer は括弧を使用してセカンダリセグメント (popup:compose など)をシリアライズし、コロン構文を使用してアウトレットを指定し、';parameter=value' 構文 (open=true など)を使用してルート固有のパラメータを指定します。</target>
        </trans-unit>
        <trans-unit id="abfe751e30348995f94251569b887d3adaf69de4" translate="yes" xml:space="preserve">
          <source>DefaultValueAccessor</source>
          <target state="translated">DefaultValueAccessor</target>
        </trans-unit>
        <trans-unit id="5de13986d9c48ec6ea5c80e7b8bf59649abc3508" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;prefetch&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;prefetch&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ce4f933914034630118d09fa2b33f58770d4ad3d" translate="yes" xml:space="preserve">
          <source>Defaults to the value &lt;code&gt;installMode&lt;/code&gt; is set to.</source>
          <target state="translated">デフォルトは &lt;code&gt;installMode&lt;/code&gt; に設定されている値です。</target>
        </trans-unit>
        <trans-unit id="328c354b1f04708298579626e25553ebaa49002c" translate="yes" xml:space="preserve">
          <source>Define &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; methods in the module.</source>
          <target state="translated">モジュールに &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="22a59702bf9ab24e07bb851d8b2e03067d7ac299" translate="yes" xml:space="preserve">
          <source>Define Routes</source>
          <target state="translated">ルートの定義</target>
        </trans-unit>
        <trans-unit id="874a27f286ff33b0061e026eb76ec7da6f71749d" translate="yes" xml:space="preserve">
          <source>Define a &lt;code&gt;shippingCosts&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;shippingCosts&lt;/code&gt; プロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="b3a8f77f9c6f003f8e6a837e9afd3742508ba160" translate="yes" xml:space="preserve">
          <source>Define a Wildcard route</source>
          <target state="translated">ワイルドカードルートの定義</target>
        </trans-unit>
        <trans-unit id="78881e03729d2c91e39e562aa59d679ec0700be8" translate="yes" xml:space="preserve">
          <source>Define a cart service</source>
          <target state="translated">カートサービスの定義</target>
        </trans-unit>
        <trans-unit id="e73d69ecb7fe5bb15e2b8912d9c0513d7ed8e0d6" translate="yes" xml:space="preserve">
          <source>Define a container element for the directive, and specify the switch expression to match against as an attribute:</source>
          <target state="translated">ディレクティブのコンテナ要素を定義し、属性としてマッチする switch 式を指定します。</target>
        </trans-unit>
        <trans-unit id="4855c08ec794427f283e9484dcf713459345e550" translate="yes" xml:space="preserve">
          <source>Define a generation rule</source>
          <target state="translated">世代ルールの定義</target>
        </trans-unit>
        <trans-unit id="628e7d0326beb26578cac423777c9da1cbb5163f" translate="yes" xml:space="preserve">
          <source>Define a link using the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. The &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; defines how the user navigates to the route (or URL) declaratively in the component template.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブを使用してリンクを定義します。 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; は、宣言コンポーネントテンプレート内のルート（またはURL）にどのようにユーザナビゲートを定義します。</target>
        </trans-unit>
        <trans-unit id="37563558345558ee13d439fb5b7c35348e7a2635" translate="yes" xml:space="preserve">
          <source>Define a method to dynamically insert an alias control into the alias's form array. The &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#push&quot;&gt;FormArray.push()&lt;/a&gt;&lt;/code&gt; method inserts the control as a new item in the array.</source>
          <target state="translated">エイリアスコントロールをエイリアスのフォーム配列に動的に挿入するメソッドを定義します。 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#push&quot;&gt;FormArray.push()&lt;/a&gt;&lt;/code&gt; メソッドは、配列内の新しい項目としてコントロールを挿入します。</target>
        </trans-unit>
        <trans-unit id="d4ebbadc64ccb33e53ae57852dd662c43d818940" translate="yes" xml:space="preserve">
          <source>Define a template reference variable on the (enhanced) form element.</source>
          <target state="translated">(enhanced)フォーム要素にテンプレート参照変数を定義します。</target>
        </trans-unit>
        <trans-unit id="cbf1b1ad1692c932aaef851bd68f8cffbe64e05e" translate="yes" xml:space="preserve">
          <source>Define an animation trigger in the &lt;code&gt;animations&lt;/code&gt; section of &lt;code&gt;@&lt;a href=&quot;../core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata. In the template, reference the trigger by name and bind it to a trigger expression that evaluates to a defined animation state, using the following format:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../core/component&quot;&gt;コンポーネント&lt;/a&gt;メタデータの &lt;code&gt;animations&lt;/code&gt; セクションでアニメーショントリガーを定義します。テンプレートで、トリガーを名前で参照し、次の形式を使用して、定義されたアニメーション状態に評価されるトリガー式にバインドします。</target>
        </trans-unit>
        <trans-unit id="4d53180880090d0468ceae9ece0d0eeab097af77" translate="yes" xml:space="preserve">
          <source>Define application-wide providers by specifying &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; on its &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator (in the case of services) or at &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; construction (in the case where tokens are provided). Providers that are created this way automatically are made available to the entire application and don't need to be listed in any module.</source>
          <target state="translated">指定することで、アプリケーション全体のプロバイダーを定義 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; その上 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; （サービスの場合）デコレータかで &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; の（トークンが提供されている場合）の建設。この方法で自動的に作成されたプロバイダーは、アプリケーション全体で利用可能になり、どのモジュールにもリストする必要はありません。</target>
        </trans-unit>
        <trans-unit id="1b6769f88d713bd91aa055cef61c2d4ca6810df8" translate="yes" xml:space="preserve">
          <source>Define dependencies with providers</source>
          <target state="translated">プロバイダとの依存関係を定義する</target>
        </trans-unit>
        <trans-unit id="e49b053cb66815bfa59357251dbbd29728069e8f" translate="yes" xml:space="preserve">
          <source>Define methods to add items to the cart, return cart items, and clear the cart items:</source>
          <target state="translated">カートにアイテムを追加したり、カートのアイテムを返したり、カートのアイテムをクリアしたりするメソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="789974b04cf864fa3f4628b731773113b8537356" translate="yes" xml:space="preserve">
          <source>Define the &lt;code&gt;addToCart()&lt;/code&gt; method, which adds the current product to the cart.</source>
          <target state="translated">現在の商品をカートに追加する &lt;code&gt;addToCart()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="4f877d2d9160c3bb01f894cd4762139f76c9d495" translate="yes" xml:space="preserve">
          <source>Define the &lt;code&gt;heroesUrl&lt;/code&gt; of the form &lt;code&gt;:base/:collectionName&lt;/code&gt; with the address of the heroes resource on the server. Here &lt;code&gt;base&lt;/code&gt; is the resource to which requests are made, and &lt;code&gt;collectionName&lt;/code&gt; is the heroes data object in the &lt;code&gt;in-memory-data-service.ts&lt;/code&gt;.</source>
          <target state="translated">サーバー上のheroesリソースのアドレスを使用して、 &lt;code&gt;:base/:collectionName&lt;/code&gt; という形式の &lt;code&gt;heroesUrl&lt;/code&gt; を定義します。ここで、 &lt;code&gt;base&lt;/code&gt; はリクエストが行われるリソースであり、 &lt;code&gt;collectionName&lt;/code&gt; は &lt;code&gt;in-memory-data-service.ts&lt;/code&gt; のヒーローデータオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="c70d53eb9728a1aae2934e79d7baa2495c32ea14" translate="yes" xml:space="preserve">
          <source>Define the &lt;code&gt;items&lt;/code&gt; property to store the products in the cart.</source>
          <target state="translated">カートに商品を保管するための &lt;code&gt;items&lt;/code&gt; プロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="a0c9b4fb153a9b2aa2a0ffe27f9efbfc6352b817" translate="yes" xml:space="preserve">
          <source>Define the &lt;code&gt;product&lt;/code&gt; property and inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; into the constructor.</source>
          <target state="translated">&lt;code&gt;product&lt;/code&gt; プロパティを定義し、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; をコンストラクターに注入します。</target>
        </trans-unit>
        <trans-unit id="84c2fad3ae9b0db6143be8233d1a024b9e41b52a" translate="yes" xml:space="preserve">
          <source>Define the animation.</source>
          <target state="translated">アニメーションを定義します。</target>
        </trans-unit>
        <trans-unit id="bfed9ed5eab89d68e83fa18efeef2704682d344b" translate="yes" xml:space="preserve">
          <source>Define the checkout form model</source>
          <target state="translated">チェックアウトフォームのモデルを定義する</target>
        </trans-unit>
        <trans-unit id="0b4f1b51993e2e4768aecff95bb66bbdff6b1431" translate="yes" xml:space="preserve">
          <source>Define the crossorigin attribute setting of elements that provide CORS support.</source>
          <target state="translated">CORS サポートを提供する要素の crossorigin 属性設定を定義します。</target>
        </trans-unit>
        <trans-unit id="5f1b50fbd57b7d09235c9899095f8ed6a396e6be" translate="yes" xml:space="preserve">
          <source>Define the get() method</source>
          <target state="translated">get()メソッドの定義</target>
        </trans-unit>
        <trans-unit id="a32aad78bf0eb55c21cb33bbcd2d97c7fd1aefdd" translate="yes" xml:space="preserve">
          <source>Define the output filename cache-busting hashing mode.</source>
          <target state="translated">出力ファイル名のキャッシュバッシングハッシュモードを定義します。</target>
        </trans-unit>
        <trans-unit id="282b2fcaad5a7ff17131438da0fb0640f8f56733" translate="yes" xml:space="preserve">
          <source>Define the rule</source>
          <target state="translated">ルールを定義する</target>
        </trans-unit>
        <trans-unit id="ba464e5934066d9c3251321190d03a7331d806dd" translate="yes" xml:space="preserve">
          <source>Define the shipping page</source>
          <target state="translated">出荷ページの定義</target>
        </trans-unit>
        <trans-unit id="a58c78e105f9508e937f25cab3eae72383adc767" translate="yes" xml:space="preserve">
          <source>Define the view for the new product alert component.</source>
          <target state="translated">新製品アラートコンポーネントのビューを定義します。</target>
        </trans-unit>
        <trans-unit id="7b13873dc1274f371484bc50805a0dac3df464cf" translate="yes" xml:space="preserve">
          <source>Define unique custom ids</source>
          <target state="translated">独自のカスタム ID を定義する</target>
        </trans-unit>
        <trans-unit id="8395204fc3456bdd76cd3188ff9156211b00ced8" translate="yes" xml:space="preserve">
          <source>Define what the router should do if it receives a navigation request to the current URL. Default is &lt;code&gt;ignore&lt;/code&gt;, which causes the router ignores the navigation. This can disable features such as a &quot;refresh&quot; button. Use this option to configure the behavior when navigating to the current URL. Default is 'ignore'.</source>
          <target state="translated">現在のURLへのナビゲーション要求を受信した場合にルーターが行うべきことを定義します。デフォルトは &lt;code&gt;ignore&lt;/code&gt; で、ルーターがナビゲーションを無視します。これにより、「更新」ボタンなどの機能を無効にできます。このオプションを使用して、現在のURLに移動するときの動作を構成します。デフォルトは「無視」です。</target>
        </trans-unit>
        <trans-unit id="6126fbb1cff6a19c4cc8613ea100f32e878c1a6a" translate="yes" xml:space="preserve">
          <source>Define your size boundaries in the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, in a &lt;code&gt;budgets&lt;/code&gt; section for each &lt;a href=&quot;build#app-environments&quot;&gt;configured environment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;build#app-environments&quot;&gt;構成&lt;/a&gt;した各環境の &lt;code&gt;budgets&lt;/code&gt; セクションのCLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; でサイズ境界を定義します。</target>
        </trans-unit>
        <trans-unit id="76be9e6329351c7763ca316248531b72685df7cf" translate="yes" xml:space="preserve">
          <source>Defines &lt;code&gt;AppModule&lt;/code&gt;, the &lt;a href=&quot;bootstrapping&quot;&gt;root module&lt;/a&gt; that tells Angular how to assemble the application. When initially created, it declares only the &lt;code&gt;AppComponent&lt;/code&gt;. Over time, you add more components to declare.</source>
          <target state="translated">定義 &lt;code&gt;AppModule&lt;/code&gt; 、&lt;a href=&quot;bootstrapping&quot;&gt;ルートモジュール&lt;/a&gt;アプリケーションを組み立てるためにどのように角度を伝えます。最初に作成されたときは、 &lt;code&gt;AppComponent&lt;/code&gt; のみを宣言します。徐々に、宣言するコンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="55682d31e3a07ef230dec4ddcde2f669f7002896" translate="yes" xml:space="preserve">
          <source>Defines CSS styles to be stored on a renderer instance.</source>
          <target state="translated">レンダラー インスタンスに保存する CSS スタイルを定義します。</target>
        </trans-unit>
        <trans-unit id="8a33a6051ae78e0871fbf63c733d95d7ea910681" translate="yes" xml:space="preserve">
          <source>Defines a list of animation steps to be run in parallel.</source>
          <target state="translated">並行して実行するアニメーションステップのリストを定義します。</target>
        </trans-unit>
        <trans-unit id="78c95f0e8ccd965b40bcb8fd23f9f9092e2a9686" translate="yes" xml:space="preserve">
          <source>Defines a list of animation steps to be run sequentially, one by one.</source>
          <target state="translated">アニメーションのステップのリストを定義します。</target>
        </trans-unit>
        <trans-unit id="0db16c22a542cb88e353373266c96467ed0d4252" translate="yes" xml:space="preserve">
          <source>Defines a matcher for requests based on URL, method, or both.</source>
          <target state="translated">URL、メソッド、またはその両方に基づいたリクエストに対するマッチアを定義します。</target>
        </trans-unit>
        <trans-unit id="c2ce9d76ca8e2ee509dcc072576dcae0c851ee71" translate="yes" xml:space="preserve">
          <source>Defines a module that contains components, directives, pipes, and providers.</source>
          <target state="translated">コンポーネント、ディレクティブ、パイプ、およびプロバイダを含むモジュールを定義します。</target>
        </trans-unit>
        <trans-unit id="bbcc9025aacb1ee76b9dc1c0b716a4a9597fe43b" translate="yes" xml:space="preserve">
          <source>Defines a schema that allows an NgModule to contain the following:</source>
          <target state="translated">NgModule が以下を含むことを可能にするスキーマを定義します。</target>
        </trans-unit>
        <trans-unit id="5e53cda92b070b9dfacf9234345296fdb80a7883" translate="yes" xml:space="preserve">
          <source>Defines a schema that allows any property on any element.</source>
          <target state="translated">任意の要素に任意のプロパティを許可するスキーマを定義します。</target>
        </trans-unit>
        <trans-unit id="007992afce80ecb791885d624444069de38590c5" translate="yes" xml:space="preserve">
          <source>Defines a scroll position manager. Implemented by &lt;code&gt;BrowserViewportScroller&lt;/code&gt;.</source>
          <target state="translated">スクロール位置マネージャーを定義します。 &lt;code&gt;BrowserViewportScroller&lt;/code&gt; によって実装されます。</target>
        </trans-unit>
        <trans-unit id="7b88e7c5fc78efd9fa6ef4124a65b304796dbf1d" translate="yes" xml:space="preserve">
          <source>Defines a set of animation styles, associating each style with an optional &lt;code&gt;&lt;a href=&quot;animations/animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">アニメーションスタイルのセットを定義し、各スタイルをオプションの &lt;code&gt;&lt;a href=&quot;animations/animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; 値に関連付けます。</target>
        </trans-unit>
        <trans-unit id="09a3e8c545236f497d55055e0050b3a1d47f83e0" translate="yes" xml:space="preserve">
          <source>Defines a set of animation styles, associating each style with an optional &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">アニメーションスタイルのセットを定義し、各スタイルをオプションの &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; 値に関連付けます。</target>
        </trans-unit>
        <trans-unit id="b279dfffcca1a99dcdfe04a5a70d6b73e5880db0" translate="yes" xml:space="preserve">
          <source>Defines a unit test for the root &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">ルート &lt;code&gt;AppComponent&lt;/code&gt; の単体テストを定義します。</target>
        </trans-unit>
        <trans-unit id="e24e54b93247b75499ac7d517abe7411430368a2" translate="yes" xml:space="preserve">
          <source>Defines an animation step that combines styling information with timing information.</source>
          <target state="translated">スタイリング情報とタイミング情報を組み合わせたアニメーションステップを定義します。</target>
        </trans-unit>
        <trans-unit id="c68cc7c5707eabd8219f8b7a1ab574caf776b9b1" translate="yes" xml:space="preserve">
          <source>Defines an array of Routes, each mapping a URL path to a component.</source>
          <target state="translated">ルートの配列を定義します。それぞれが URL パスをコンポーネントにマッピングします。</target>
        </trans-unit>
        <trans-unit id="a01435af040e2619f2e81406c09be7423669e558" translate="yes" xml:space="preserve">
          <source>Defines an interface that acts as a bridge between the Angular forms API and a native element in the DOM.</source>
          <target state="translated">Angular forms APIとDOM内のネイティブ要素との間のブリッジとして機能するインターフェースを定義します。</target>
        </trans-unit>
        <trans-unit id="ccc6a0a5239bfcb1e5069449a5b227d5b6d9c709" translate="yes" xml:space="preserve">
          <source>Defines arbitrary developer-defined data to be stored on a renderer instance. This is useful for renderers that delegate to other renderers.</source>
          <target state="translated">レンダラー インスタンスに格納する任意の開発者定義データを定義します。これは、他のレンダラーに委任するレンダラーに便利です。</target>
        </trans-unit>
        <trans-unit id="21ae664afe89dbb8f43c4e8858a599ffb280b1ca" translate="yes" xml:space="preserve">
          <source>Defines how the router merges parameters, data, and resolved data from parent to child routes. By default ('emptyOnly'), inherits parent parameters only for path-less or component-less routes. Set to 'always' to enable unconditional inheritance of parent parameters.</source>
          <target state="translated">ルータが親ルートから子ルートへのパラメータ、データ、解決済みデータをどのようにマージするかを定義します。デフォルトでは ('emptyOnly')、パスレスまたはコンポーネントレスのルートに対してのみ親パラメータを継承します。always' に設定すると、親パラメータの無条件継承が有効になります。</target>
        </trans-unit>
        <trans-unit id="9dae0aa20ef644eeabd8e272a8434eb94f2bbc5b" translate="yes" xml:space="preserve">
          <source>Defines how the router should navigate to a component based on a URL pattern. Most routes consist of a path and a component type.</source>
          <target state="translated">ルータが URL パターンに基づいてコンポーネントにナビゲートする方法を定義します。ほとんどのルートは、パスとコンポーネントタイプで構成されています。</target>
        </trans-unit>
        <trans-unit id="4464084bf36b2c3f096f20ffccc12a8bf0270c6d" translate="yes" xml:space="preserve">
          <source>Defines infrastructure for dependency injection (DI), internationalization (i18n), and various testing and debugging facilities.</source>
          <target state="translated">依存性注入(DI)、国際化(i18n)、各種テスト・デバッグ機能のためのインフラストラクチャを定義します。</target>
        </trans-unit>
        <trans-unit id="8bfbd8d863007bdc3c17344259758b2b8851eca7" translate="yes" xml:space="preserve">
          <source>Defines one &lt;em&gt;transition&lt;/em&gt; when switching back and forth from the &lt;code&gt;heroes&lt;/code&gt; and &lt;code&gt;hero&lt;/code&gt; routes to ease the component in from the left of the screen as it enters the application view (&lt;code&gt;:enter&lt;/code&gt;), the other to animate the component to the right as it leaves the application view (&lt;code&gt;:leave&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;heroes&lt;/code&gt; と &lt;code&gt;hero&lt;/code&gt; ルートを切り替えるときに1つの&lt;em&gt;遷移&lt;/em&gt;を定義して、コンポーネントがアプリケーションビューに入るときに画面の左側からコンポーネントを容易にします（ &lt;code&gt;:enter&lt;/code&gt; ）。もう1つの&lt;em&gt;遷移&lt;/em&gt;は、コンポーネントがアプリケーションを離れるときにコンポーネントを右にアニメーション化します。ビュー（ &lt;code&gt;:leave&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8d7a191110568ab5d83c750a60f697e422a9245d" translate="yes" xml:space="preserve">
          <source>Defines one or more CSS styles to use in animations. Controls the visual appearance of HTML elements during animations. Uses object syntax.</source>
          <target state="translated">アニメーションで使用する 1 つ以上の CSS スタイルを定義します。アニメーション中の HTML 要素の視覚的な外観を制御します。オブジェクト構文を使用します。</target>
        </trans-unit>
        <trans-unit id="47ba811ee66fe36d02c8356b68d28d19b3ee3fb4" translate="yes" xml:space="preserve">
          <source>Defines routes.</source>
          <target state="translated">ルートを定義します。</target>
        </trans-unit>
        <trans-unit id="20fb4df445edc22891b0b3ae3c0ac48dd6564af3" translate="yes" xml:space="preserve">
          <source>Defines template and style encapsulation options available for Component's &lt;a href=&quot;component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Componentの&lt;a href=&quot;component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; で&lt;/a&gt;使用可能なテンプレートとスタイルのカプセル化オプションを定義します。</target>
        </trans-unit>
        <trans-unit id="3c565d04a28681d37c04fd197dc43af222f944d1" translate="yes" xml:space="preserve">
          <source>Defines template and style encapsulation options available for Component's &lt;a href=&quot;core/component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Componentの&lt;a href=&quot;core/component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; で&lt;/a&gt;使用可能なテンプレートとスタイルのカプセル化オプションを定義します。</target>
        </trans-unit>
        <trans-unit id="bbfc1ff79e2f3d0bdd95b1a8d5f1085d34f7a56a" translate="yes" xml:space="preserve">
          <source>Defines the &lt;code&gt;&lt;a href=&quot;router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; object that maps a URL path to a component, and the &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive that you use to place a routed view in a template, as well as a complete API for configuring, querying, and controlling the router state.</source>
          <target state="translated">URLパスをコンポーネントにマップする &lt;code&gt;&lt;a href=&quot;router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; オブジェクト、およびルーティングされたビューをテンプレートに配置するために使用する &lt;code&gt;&lt;a href=&quot;router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; ディレクティブ、およびルーターの状態を構成、クエリ、および制御するための完全なAPIを定義します。</target>
        </trans-unit>
        <trans-unit id="534e303ed39dff58ed66f8ac03005dc125d30753" translate="yes" xml:space="preserve">
          <source>Defines the HTML template associated with the root &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">ルート &lt;code&gt;AppComponent&lt;/code&gt; に関連付けられたHTMLテンプレートを定義します。</target>
        </trans-unit>
        <trans-unit id="9ad7da76a97f578fd82c2902d762141ba818d760" translate="yes" xml:space="preserve">
          <source>Defines the ServiceWorker registration strategy, which determines when it will be registered with the browser.</source>
          <target state="translated">ServiceWorkerの登録戦略を定義し、ブラウザにいつ登録されるかを決定します。</target>
        </trans-unit>
        <trans-unit id="c0766546ca9b3da0b517bead9277a27997c0cb96" translate="yes" xml:space="preserve">
          <source>Defines the animation sequence between two named states. Uses array syntax.</source>
          <target state="translated">2つの指定された状態間のアニメーションシーケンスを定義します。配列構文を使用します。</target>
        </trans-unit>
        <trans-unit id="97e2e28dd3ded239399b0d95c3ed8d572fb3455e" translate="yes" xml:space="preserve">
          <source>Defines the base CSS stylesheet for the root &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">ルート &lt;code&gt;AppComponent&lt;/code&gt; の基本CSSスタイルシートを定義します。</target>
        </trans-unit>
        <trans-unit id="01c55cf117981d6ba3a6e5a3d0bedf7d4e343f64" translate="yes" xml:space="preserve">
          <source>Defines the build environment.</source>
          <target state="translated">ビルド環境を定義します。</target>
        </trans-unit>
        <trans-unit id="1a958cd561ced232dff4bac1558637eff15ac576" translate="yes" xml:space="preserve">
          <source>Defines the class infrastructure for components, view hierarchies, change detection, rendering, and event handling.</source>
          <target state="translated">コンポーネント、ビュー階層、変更検出、レンダリング、イベント処理のためのクラスインフラストラクチャを定義します。</target>
        </trans-unit>
        <trans-unit id="2f86f744259188a92762d99407d2a67061407cbd" translate="yes" xml:space="preserve">
          <source>Defines the decorators that supply metadata and context for Angular constructs.</source>
          <target state="translated">Angular コンストラクトのメタデータとコンテキストを提供するデコレータを定義します。</target>
        </trans-unit>
        <trans-unit id="ba0f716db5d7d13c6a1369efdafac26719ccd1ba" translate="yes" xml:space="preserve">
          <source>Defines the logic for the app's root component, named &lt;code&gt;AppComponent&lt;/code&gt;. The view associated with this root component becomes the root of the &lt;a href=&quot;glossary#view-hierarchy&quot;&gt;view hierarchy&lt;/a&gt; as you add components and services to your application.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; という名前のアプリのルートコンポーネントのロジックを定義します。アプリケーションにコンポーネントとサービスを追加すると、このルートコンポーネントに関連付けられた&lt;a href=&quot;glossary#view-hierarchy&quot;&gt;ビューがビュー階層の&lt;/a&gt;ルートになります。</target>
        </trans-unit>
        <trans-unit id="de3280c456691c50e69c2238d5588611dcf64274" translate="yes" xml:space="preserve">
          <source>Defines the map of errors returned from failed validation checks.</source>
          <target state="translated">失敗した検証チェックから返されるエラーのマップを定義します。</target>
        </trans-unit>
        <trans-unit id="28c7e2d2a801a8a0fb6945a0de3e43db3a6f14ba" translate="yes" xml:space="preserve">
          <source>Defines the name that can be used in the template to assign this directive to a variable.</source>
          <target state="translated">このディレクティブを変数に代入するためにテンプレートで使用できる名前を定義します。</target>
        </trans-unit>
        <trans-unit id="b6b4c7a96425d13d450553ded2847dcd126f0ea3" translate="yes" xml:space="preserve">
          <source>Defines the root module, named &lt;code&gt;AppModule&lt;/code&gt;, that tells Angular how to assemble the application. Initially declares only the &lt;code&gt;AppComponent&lt;/code&gt;. As you add more components to the app, they must be declared here.</source>
          <target state="translated">アプリケーションのアセンブル方法をAngularに指示する &lt;code&gt;AppModule&lt;/code&gt; という名前のルートモジュールを定義します。最初は &lt;code&gt;AppComponent&lt;/code&gt; のみを宣言します。アプリにコンポーネントを追加するときは、ここでそれらを宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="560b6286688d2764d7435cbfd0ce5f6ab9cefa86" translate="yes" xml:space="preserve">
          <source>Defines the same &lt;code&gt;AppComponent&lt;/code&gt; as the one in the QuickStart playground. It is the &lt;strong&gt;root&lt;/strong&gt; component of what will become a tree of nested components as the application evolves.</source>
          <target state="translated">QuickStartプレイグラウンドの &lt;code&gt;AppComponent&lt;/code&gt; と同じAppComponentを定義します。これは、アプリケーションが進化するにつれてネストされたコンポーネントのツリーになる&lt;strong&gt;ルート&lt;/strong&gt;コンポーネントです。</target>
        </trans-unit>
        <trans-unit id="b65d0b9369faf5bd23746f4543dbee8997bf6546" translate="yes" xml:space="preserve">
          <source>Defines the set of injectable objects that are visible to its view DOM children. See &lt;a href=&quot;component#injecting-a-class-with-a-view-provider&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">ビューのDOMの子に見える注入可能なオブジェクトのセットを定義します。&lt;a href=&quot;component#injecting-a-class-with-a-view-provider&quot;&gt;例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c57680796f5c05c65ea70fadda123a533fb1af6a" translate="yes" xml:space="preserve">
          <source>Defines two transitions. A single trigger can define multiple states and transitions.</source>
          <target state="translated">2 つの遷移を定義します。1つのトリガで複数の状態と遷移を定義することができます。</target>
        </trans-unit>
        <trans-unit id="7e5146bd0be6e84fa59cd48a926fafef0d1cbcea" translate="yes" xml:space="preserve">
          <source>Defines when guards and resolvers will be run. One of</source>
          <target state="translated">ガードとリゾルバをいつ実行するかを定義します。のうちの1つ</target>
        </trans-unit>
        <trans-unit id="fb32691368f716dd067e04f7a8ee40b1b9ebb143" translate="yes" xml:space="preserve">
          <source>Defines when the router updates the browser URL. By default ('deferred'), update after successful navigation. Set to 'eager' if prefer to update the URL at the beginning of navigation. Updating the URL early allows you to handle a failure of navigation by showing an error message with the URL that failed.</source>
          <target state="translated">ルーターがブラウザの URL を更新するタイミングを定義します。デフォルトでは (' deferred')、ナビゲーションが成功した後に更新されます。ナビゲーションの最初にURLを更新したい場合は、'eager'に設定します。早期に URL を更新することで、ナビゲーションの失敗を、失敗した URL と一緒にエラーメッセージを表示することで処理することができます。</target>
        </trans-unit>
        <trans-unit id="8d2f4eea5d5cde290a7eeb369d6476029c3af8e3" translate="yes" xml:space="preserve">
          <source>Defining animations and attaching them to the HTML template</source>
          <target state="translated">アニメーションの定義とHTMLテンプレートへのアタッチ</target>
        </trans-unit>
        <trans-unit id="a94775a237bcaa68bfb274edde5b9619d97f65f9" translate="yes" xml:space="preserve">
          <source>Defining input options with a schema and interfaces</source>
          <target state="translated">スキーマとインターフェースによる入力オプションの定義</target>
        </trans-unit>
        <trans-unit id="5d7bcd8a5d6216d911c4f1a97926e54e4b4a64ed" translate="yes" xml:space="preserve">
          <source>Defining observers</source>
          <target state="translated">オブザーバーの定義</target>
        </trans-unit>
        <trans-unit id="1a54afee3d635be24613550363d5fa3f2b0d1521" translate="yes" xml:space="preserve">
          <source>Defining offsets for keyframes is optional. If you omit them, evenly spaced offsets are automatically assigned. For example, three keyframes without predefined offsets receive offsets of 0, 0.5, and 1. Specifying an offset of 0.8 for the middle transition in the above example might look like this.</source>
          <target state="translated">キーフレームのオフセットの定義はオプションです。省略すると、等間隔のオフセットが自動的に割り当てられます。例えば、事前に定義されたオフセットのない 3 つのキーフレームは、0、0.5、1 のオフセットを受け取ります。 上記の例では、中間のトランジションに 0.8 のオフセットを指定すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="fb29f7869dd96ef9bc914331c5f7a54bfc6ceafd" translate="yes" xml:space="preserve">
          <source>Defining providers</source>
          <target state="translated">プロバイダの定義</target>
        </trans-unit>
        <trans-unit id="2707786a4667e5d5c0add38788eacf634d0b58ab" translate="yes" xml:space="preserve">
          <source>Defining rules and actions</source>
          <target state="translated">ルールと行動の定義</target>
        </trans-unit>
        <trans-unit id="7734b8e4b1060a1574142e1bfdff622419f5f5f2" translate="yes" xml:space="preserve">
          <source>Defining typings for runtime-global libraries</source>
          <target state="translated">ランタイムグローバルライブラリの型付けの定義</target>
        </trans-unit>
        <trans-unit id="f98e5b51e41064e26b1b00bf43b51b2cd9536aa7" translate="yes" xml:space="preserve">
          <source>Definition of builder input options.</source>
          <target state="translated">ビルダー入力オプションの定義</target>
        </trans-unit>
        <trans-unit id="8614b0b8c6edd0a2c9692acd8211609430e927c5" translate="yes" xml:space="preserve">
          <source>Delayed change detection is intentional and useful. It gives the tester an opportunity to inspect and change the state of the component &lt;em&gt;before Angular initiates data binding and calls &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hooks&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">遅延変更の検出は意図的で便利です。これにより、&lt;em&gt;Angularがデータバインディングを開始して&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;&lt;/em&gt;&lt;em&gt;を呼び出す前&lt;/em&gt;に、コンポーネントの状態を検査して変更する機会がテスターに​​与えられ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="df4169e217c104ef8e5feee245891162c13a9a79" translate="yes" xml:space="preserve">
          <source>Delegate complex component logic to services</source>
          <target state="translated">複雑なコンポーネントロジックをサービスに委譲</target>
        </trans-unit>
        <trans-unit id="05e33de9a1c31d4b643efd4d36d5ef6fbd4fd627" translate="yes" xml:space="preserve">
          <source>Delete &lt;code&gt;hero details&lt;/code&gt; from &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; から &lt;code&gt;hero details&lt;/code&gt; を削除する</target>
        </trans-unit>
        <trans-unit id="78b0b276fca4c17945fe88cd786ec59e0c15d70c" translate="yes" xml:space="preserve">
          <source>Delete &lt;code&gt;non-essential&lt;/code&gt; files (optional)</source>
          <target state="translated">&lt;code&gt;non-essential&lt;/code&gt; ファイルを削除する（オプション）</target>
        </trans-unit>
        <trans-unit id="1373669c850d20d42e2554e0658530285be5660e" translate="yes" xml:space="preserve">
          <source>Delete a hero</source>
          <target state="translated">ヒーローを削除する</target>
        </trans-unit>
        <trans-unit id="0994cccfea58fe0bb5c9ac2ef33680eb47a61d93" translate="yes" xml:space="preserve">
          <source>Delete the &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; component at the bottom of the template.</source>
          <target state="translated">テンプレートの下部にある &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; コンポーネントを削除します。</target>
        </trans-unit>
        <trans-unit id="a973efbbe0ce0a3e5b79eca622331ec4d925820a" translate="yes" xml:space="preserve">
          <source>Delete the &lt;code&gt;HEROES&lt;/code&gt; import, because you won't need that anymore. Import the &lt;code&gt;HeroService&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;HEROES&lt;/code&gt; インポートを削除します。これはもう必要ありません。代わりに &lt;code&gt;HeroService&lt;/code&gt; をインポートしてください。</target>
        </trans-unit>
        <trans-unit id="e7d8f3866a3c069435d5667635832c642bf9b44c" translate="yes" xml:space="preserve">
          <source>Delete the &lt;code&gt;app.component.html&lt;/code&gt; file. It is not needed for this example.</source>
          <target state="translated">&lt;code&gt;app.component.html&lt;/code&gt; ファイルを削除します。この例では必要ありません。</target>
        </trans-unit>
        <trans-unit id="ca994d07660cd1da305a6ba89ed4e8687ce0e9d3" translate="yes" xml:space="preserve">
          <source>Delete the output path before building.</source>
          <target state="translated">ビルドする前に出力パスを削除します。</target>
        </trans-unit>
        <trans-unit id="afdb5e7e343531bb63beff413f5040dd3b12f4cb" translate="yes" xml:space="preserve">
          <source>Deletes values for a given header in a clone of the original instance.</source>
          <target state="translated">元のインスタンスのクローン内の指定されたヘッダーの値を削除します。</target>
        </trans-unit>
        <trans-unit id="d41b75d84a6d9a041bf104564c1d9c5136764c75" translate="yes" xml:space="preserve">
          <source>Deleting an item updates the model, and depending on your code, triggers other changes including queries and saving to a remote server. These changes propagate through the system and ultimately display in this and other views.</source>
          <target state="translated">アイテムを削除するとモデルが更新され、コードによっては、クエリやリモートサーバーへの保存などの他の変更がトリガーされます。これらの変更はシステムを介して伝搬し、最終的にこのビューや他のビューに表示されます。</target>
        </trans-unit>
        <trans-unit id="6fead872c57884d832bc66b6ac23b585acb9b62b" translate="yes" xml:space="preserve">
          <source>Deliver an arbitrary &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; (such as a progress event) on the response stream for this request.</source>
          <target state="translated">この要求の応答ストリームで任意の &lt;code&gt;&lt;a href=&quot;../httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; （進行状況イベントなど）を配信します。</target>
        </trans-unit>
        <trans-unit id="423875924fd8466b1dbe99d7be0f04a2683d9a9a" translate="yes" xml:space="preserve">
          <source>Demonstrates a combination of a component and a directive each with its own hooks.</source>
          <target state="translated">コンポーネントとディレクティブの組み合わせを、それぞれが独自のフックを持っていることを示します。</target>
        </trans-unit>
        <trans-unit id="47d82501ff1326e82e567dc777dda0e696f6a6b6" translate="yes" xml:space="preserve">
          <source>Demonstrates every lifecycle hook. Each hook method writes to the on-screen log.</source>
          <target state="translated">すべてのライフサイクルフックをデモします。各フックメソッドは画面上のログに書き込みます。</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="3969438fe2188ea70569a9eba890f3a3be171dfd" translate="yes" xml:space="preserve">
          <source>Dependencies are services or objects that a class needs to perform its function. DI is a coding pattern in which a class asks for dependencies from external sources rather than creating them itself.</source>
          <target state="translated">依存関係とは、クラスがその機能を実行するために必要なサービスやオブジェクトのことです。DI は、クラスが依存関係を自分で作成するのではなく、外部ソースから依存関係を要求するコーディング・パターンです。</target>
        </trans-unit>
        <trans-unit id="9c3a60862c8e32bceb7a5b6cd07121beec7c64c3" translate="yes" xml:space="preserve">
          <source>Dependencies can also be marked as optional:</source>
          <target state="translated">依存関係はオプションとしてマークすることもできます。</target>
        </trans-unit>
        <trans-unit id="5bfedadd6cca6690cbe5a22a3b89eb2c20d39fc3" translate="yes" xml:space="preserve">
          <source>Dependencies can be registered at any level in the component hierarchy. When a component requests a dependency, Angular starts with that component's injector and walks up the injector tree until it finds the first suitable provider. Angular throws an error if it can't find the dependency during that walk.</source>
          <target state="translated">依存関係はコンポーネント階層のどのレベルでも登録できます。コンポーネントが依存関係を要求すると、Angularはそのコンポーネントのインジェクタから始まり、最初の適切なプロバイダが見つかるまでインジェクタツリーを歩きます。その間に依存関係が見つからなかった場合、Angularはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="268069fc500d695525729fb4728b0f714e4272a3" translate="yes" xml:space="preserve">
          <source>Dependencies provided by the root injector can be injected into &lt;em&gt;any&lt;/em&gt; component &lt;em&gt;anywhere&lt;/em&gt; in the application. In some cases, you might want to restrict service availability to a particular region of the application. For instance, you might want to let users explicitly opt in to use a service, rather than letting the root injector provide it automatically.</source>
          <target state="translated">ルートインジェクターによって提供される依存関係は、アプリケーションの&lt;em&gt;任意の場所の&lt;/em&gt;&lt;em&gt;任意の&lt;/em&gt;コンポーネントに注入できます。場合によっては、サービスの可用性をアプリケーションの特定の領域に制限する必要があります。たとえば、ルートインジェクタにサービスを自動的に提供させるのではなく、ユーザーがサービスを使用することを明示的にオプトインできるようにすることができます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1e40e6745211c8a0d091b67c457129398aa29f2f" translate="yes" xml:space="preserve">
          <source>Dependencies whose providers are listed here become available for injection into any component, directive, pipe or service that is a child of this injector. The NgModule used for bootstrapping uses the root injector, and can provide dependencies to any part of the app.</source>
          <target state="translated">ここにリストされているプロバイダを持つ依存関係は、このインジェクタの子であるコンポーネント、ディレクティブ、パイプ、サービスに注入することが可能になります。ブートストラップに使用される NgModule はルートインジェクタを使用し、アプリの任意の部分に依存関係を提供することができます。</target>
        </trans-unit>
        <trans-unit id="39b445f9280a6bde59a9884f1dfcf8f05fcf2ac8" translate="yes" xml:space="preserve">
          <source>Dependencies. See &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;https://docs.npmjs.com/files/package.json&lt;/a&gt;.</source>
          <target state="translated">依存関係。&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;https://docs.npmjs.com/files/package.jsonを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">依存性注入</target>
        </trans-unit>
        <trans-unit id="5587fb39e018b9a0f84498d0af8a56b11662b24b" translate="yes" xml:space="preserve">
          <source>Dependency Injection Guide</source>
          <target state="translated">依存性注入ガイド</target>
        </trans-unit>
        <trans-unit id="67d83ab175192923dcef5418334db7940ccd1d3d" translate="yes" xml:space="preserve">
          <source>Dependency Injection in Action</source>
          <target state="translated">依存性インジェクションの動作</target>
        </trans-unit>
        <trans-unit id="590a5a128f3f7f29bda608d586e731e6794c72b2" translate="yes" xml:space="preserve">
          <source>Dependency Injection in Angular</source>
          <target state="translated">Angularでの依存性インジェクション</target>
        </trans-unit>
        <trans-unit id="94fce4aaf94c5274c2455399844edec7040e85d6" translate="yes" xml:space="preserve">
          <source>Dependency Providers</source>
          <target state="translated">依存関係プロバイダ</target>
        </trans-unit>
        <trans-unit id="abe361ec5ac92ab2b51436412eccfc4c617ee10a" translate="yes" xml:space="preserve">
          <source>Dependency injection</source>
          <target state="translated">依存性の注入</target>
        </trans-unit>
        <trans-unit id="dcbdd3cb88ccf5020d3734dbba5005a8f3e6c83d" translate="yes" xml:space="preserve">
          <source>Dependency injection (DI)</source>
          <target state="translated">依存性注入(DI</target>
        </trans-unit>
        <trans-unit id="38764a3306fa96e3b5ce418928df3310a66e2397" translate="yes" xml:space="preserve">
          <source>Dependency injection (DI), is an important application design pattern. Angular has its own DI framework, which is typically used in the design of Angular applications to increase their efficiency and modularity.</source>
          <target state="translated">依存性注入(DI)は、重要なアプリケーション設計パターンです。Angularには独自のDIフレームワークがあり、一般的にはAngularアプリケーションの効率性とモジュール性を高めるための設計に使用されます。</target>
        </trans-unit>
        <trans-unit id="ac6fed4cfd6415d9a0dddf57401d8893e0a3ccdc" translate="yes" xml:space="preserve">
          <source>Dependency injection configuration</source>
          <target state="translated">依存性注入の設定</target>
        </trans-unit>
        <trans-unit id="e0967671af96737e00c4bc3ee3f86c99ee81217c" translate="yes" xml:space="preserve">
          <source>Dependency injection is front and center in both AngularJS and Angular, but there are some key differences between the two frameworks in how it actually works.</source>
          <target state="translated">依存性インジェクションはAngularJSとAngularの両方で前面に出ていますが、実際にどのように動作するのか、2つのフレームワークの間にはいくつかの重要な違いがあります。</target>
        </trans-unit>
        <trans-unit id="d567259d67cf4d25a3c86741b6f053a3877b2330" translate="yes" xml:space="preserve">
          <source>Dependency injection tokens</source>
          <target state="translated">依存性注入トークン</target>
        </trans-unit>
        <trans-unit id="8721847e3c2cf1f636675fe5ac81839a4deb4ed6" translate="yes" xml:space="preserve">
          <source>Dependency injection tokens are always strings</source>
          <target state="translated">依存性注入トークンは常に文字列です。</target>
        </trans-unit>
        <trans-unit id="a5f4548f589dff9719972f474e3b66d02efcff5b" translate="yes" xml:space="preserve">
          <source>Dependency objects can be simple values like dates, numbers and strings, or shapeless objects like arrays and functions.</source>
          <target state="translated">依存オブジェクトには、日付や数字、文字列などの単純な値や、配列や関数などの形のないオブジェクトがあります。</target>
        </trans-unit>
        <trans-unit id="c536f43fe0086c7768f33a4642a2989f949a129b" translate="yes" xml:space="preserve">
          <source>Dependency on a reflect-metadata polyfill in JIT mode</source>
          <target state="translated">JITモードでのReflect-Metadataポリフィルへの依存性</target>
        </trans-unit>
        <trans-unit id="79565b54bff7bbc8a04b329b75bcbe2a792c5429" translate="yes" xml:space="preserve">
          <source>Dependent values should not change during a single turn of the event loop. If an idempotent expression returns a string or a number, it returns the same string or number when called twice in a row. If the expression returns an object, including an &lt;code&gt;array&lt;/code&gt;, it returns the same object &lt;em&gt;reference&lt;/em&gt; when called twice in a row.</source>
          <target state="translated">依存値は、イベントループの1ターンの間は変更しないでください。べき等式が文字列または数値を返す場合、2回続けて呼び出されると、同じ文字列または数値が返されます。式が &lt;code&gt;array&lt;/code&gt; を含むオブジェクトを返す場合、続けて2回呼び出されると、同じオブジェクト&lt;em&gt;参照&lt;/em&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="cf371c381900a6fd3d60e6ae500e85424e8b9edd" translate="yes" xml:space="preserve">
          <source>Depending on the &lt;code&gt;&lt;a href=&quot;locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; used, &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; persists to the URL's path or the URL's hash segment.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 、使用 &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; URLのパスまたはURLのハッシュセグメントに持続するが。</target>
        </trans-unit>
        <trans-unit id="21832731ace57bad20a7e0620e71a706b969afbf" translate="yes" xml:space="preserve">
          <source>Deploy to GitHub pages</source>
          <target state="translated">GitHubページへのデプロイ</target>
        </trans-unit>
        <trans-unit id="e7db5b15c43d8e69848e15e994c11935e988b38a" translate="yes" xml:space="preserve">
          <source>Deploy your application with &lt;code&gt;firebase deploy&lt;/code&gt;, because the command &lt;code&gt;firebase init&lt;/code&gt; has created a &lt;code&gt;firebase.json&lt;/code&gt; file that tells Firebase how to serve your app.</source>
          <target state="translated">&lt;code&gt;firebase deploy&lt;/code&gt; コマンドを使用してアプリケーションをデプロイします。これは、コマンド &lt;code&gt;firebase init&lt;/code&gt; が、Firebaseにアプリのサービス方法を指示する &lt;code&gt;firebase.json&lt;/code&gt; ファイルを作成したためです。</target>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="d2196ee26d9923cc05a880fb1a76a08b79b7cc48" translate="yes" xml:space="preserve">
          <source>Deployment to</source>
          <target state="translated">への展開</target>
        </trans-unit>
        <trans-unit id="600c4c32abbd0e6044d374f8d9f63e6c5b81d165" translate="yes" xml:space="preserve">
          <source>Deprecated APIs</source>
          <target state="translated">非推奨API</target>
        </trans-unit>
        <trans-unit id="1f787212bb6689c1d785407d5b1bdf211afadeac" translate="yes" xml:space="preserve">
          <source>Deprecated APIs and Features</source>
          <target state="translated">非推奨APIと機能</target>
        </trans-unit>
        <trans-unit id="35ee1fa50278c527aa6abc0d9e07608c509c3bdd" translate="yes" xml:space="preserve">
          <source>Deprecated features</source>
          <target state="translated">非推奨機能</target>
        </trans-unit>
        <trans-unit id="b1c818a3ca95c7aa9b5971979e9cc0dc5c2370da" translate="yes" xml:space="preserve">
          <source>Deprecated:</source>
          <target state="translated">Deprecated:</target>
        </trans-unit>
        <trans-unit id="46e54bf33a4ff01d1ec588f4b0775ec8c766db47" translate="yes" xml:space="preserve">
          <source>DeprecatedCurrencyPipe</source>
          <target state="translated">DeprecatedCurrencyPipe</target>
        </trans-unit>
        <trans-unit id="881e558149c3d7461f7105dcd218606fba5255d4" translate="yes" xml:space="preserve">
          <source>DeprecatedDatePipe</source>
          <target state="translated">DeprecatedDatePipe</target>
        </trans-unit>
        <trans-unit id="a80b002b3b2b9739312dfeff0cd916fcd023473b" translate="yes" xml:space="preserve">
          <source>DeprecatedDecimalPipe</source>
          <target state="translated">DeprecatedDecimalPipe</target>
        </trans-unit>
        <trans-unit id="6ad89b35c430aa53c5d3428e1bd57a5b2e322ecb" translate="yes" xml:space="preserve">
          <source>DeprecatedI18NPipesModule</source>
          <target state="translated">DeprecatedI18NPipesModule</target>
        </trans-unit>
        <trans-unit id="478a6233375e237e3c63a4313edb2aa2efd29eff" translate="yes" xml:space="preserve">
          <source>DeprecatedLoadChildren</source>
          <target state="translated">DeprecatedLoadChildren</target>
        </trans-unit>
        <trans-unit id="fa7601a3ccc28c9e4c84755f153eaaf8ee9582b9" translate="yes" xml:space="preserve">
          <source>DeprecatedPercentPipe</source>
          <target state="translated">DeprecatedPercentPipe</target>
        </trans-unit>
        <trans-unit id="6476c77b7d784c95dbbc590911032f580e3f0bc4" translate="yes" xml:space="preserve">
          <source>Deprecation announced</source>
          <target state="translated">非推奨を発表</target>
        </trans-unit>
        <trans-unit id="5058335bf29d5e3c5f14c109e68c0711e5a7f2dc" translate="yes" xml:space="preserve">
          <source>Deprecation practices</source>
          <target state="translated">非推奨の実践</target>
        </trans-unit>
        <trans-unit id="37d4da9c3e2f3e172d0498996ef3eb3a0f02a619" translate="yes" xml:space="preserve">
          <source>Describes how the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; should be configured as static (that is, without reflection).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を静的（つまりリフレクションなし）として構成する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="0077d6cc8491b4b5017fb89074903642a9fbc3ff" translate="yes" xml:space="preserve">
          <source>Describes how the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; should be configured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 構成方法について説明します。</target>
        </trans-unit>
        <trans-unit id="6600b83d9745dd9a9b042112a73a8a3701ed489a" translate="yes" xml:space="preserve">
          <source>Describes how the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; should be configured as static (that is, without reflection).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を静的（つまりリフレクションなし）として構成する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="f289052a0ab33778b3202d92989357da4acfe96e" translate="yes" xml:space="preserve">
          <source>Describes how the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; should be configured.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 構成方法について説明します。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="4f79b6c5e66c1a9169be45d48f9c57637ecaeef8" translate="yes" xml:space="preserve">
          <source>Designing a class with dependency injection makes the class easier to test. Listing dependencies as constructor parameters may be all you need to test application parts effectively.</source>
          <target state="translated">依存関係のインジェクションでクラスを設計すると、クラスのテストが容易になります。コンストラクタのパラメータとして依存関係をリストアップするだけで、アプリケーションのパーツを効果的にテストすることができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="29438575ddcbe936d3920226aa524c3393a610bf" translate="yes" xml:space="preserve">
          <source>Despite inner animations being disabled, a parent animation can &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; for inner elements located in disabled areas of the template and still animate them if needed. This is also the case for when a sub animation is queried by a parent and then later animated using &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">内部アニメーションが無効になっていても、親アニメーションはテンプレートの無効な領域にある内部要素を &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; して、必要に応じてアニメーション化できます。これは、サブアニメーションが親によって照会され、後で &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; を使用してアニメーション化される場合にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="3d2e8f0ff165e77f918de800977b3bf4c84cf007" translate="yes" xml:space="preserve">
          <source>Destroy the Angular platform and all Angular applications on the page.</source>
          <target state="translated">Angularプラットフォームとページ上のすべてのAngularアプリケーションを破壊します。</target>
        </trans-unit>
        <trans-unit id="6192cea44a795469f201424a686d1f23e3abe2c1" translate="yes" xml:space="preserve">
          <source>Destroy the existing platform.</source>
          <target state="translated">既存のプラットフォームを破壊する。</target>
        </trans-unit>
        <trans-unit id="e232f65b77c6e508c16de7f3b985ec765080941e" translate="yes" xml:space="preserve">
          <source>Destroys a view attached to this container</source>
          <target state="translated">このコンテナに接続されているビューを破棄します。</target>
        </trans-unit>
        <trans-unit id="371555b173a3f42e5532895e8a8625000752c456" translate="yes" xml:space="preserve">
          <source>Destroys all views in this container.</source>
          <target state="translated">このコンテナ内のすべてのビューを破棄します。</target>
        </trans-unit>
        <trans-unit id="ea8b05fa2a4fef33bdb4c22d2fbb88d4595299a7" translate="yes" xml:space="preserve">
          <source>Destroys the animation, after invoking the &lt;code&gt;&lt;a href=&quot;animationplayer#beforeDestroy&quot;&gt;beforeDestroy&lt;/a&gt;()&lt;/code&gt; callback. Calls the &lt;code&gt;onDestroy()&lt;/code&gt; callback when destruction is completed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animationplayer#beforeDestroy&quot;&gt;beforeDestroy&lt;/a&gt;()&lt;/code&gt; コールバックを呼び出した後、アニメーションを破棄します。破棄が完了したときに &lt;code&gt;onDestroy()&lt;/code&gt; コールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ea9bd7e5ed512aff6189ff2afc542da79a36f817" translate="yes" xml:space="preserve">
          <source>Destroys the component instance and all of the data structures associated with it.</source>
          <target state="translated">コンポーネント インスタンスとそれに関連するすべてのデータ構造を破棄します。</target>
        </trans-unit>
        <trans-unit id="9cf6b78e95b5f09265815794782da5cdbeb56f56" translate="yes" xml:space="preserve">
          <source>Destroys the module instance and all of the data structures associated with it.</source>
          <target state="translated">モジュールのインスタンスとそれに関連するすべてのデータ構造を破棄します。</target>
        </trans-unit>
        <trans-unit id="fbb6f7a742a4eb748fc690a4f9d045ccc7e05659" translate="yes" xml:space="preserve">
          <source>Destroys this view and all of the data structures associated with it.</source>
          <target state="translated">このビューとそれに関連するすべてのデータ構造を破棄します。</target>
        </trans-unit>
        <trans-unit id="578ea30d0209bdd1cc7a4e4351b5ad10a4b7a13b" translate="yes" xml:space="preserve">
          <source>Destructured variable or constant not supported</source>
          <target state="translated">構造化された変数または定数はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="83b7a75d5bc1f9e9bbab53fd26eee0eebc347467" translate="yes" xml:space="preserve">
          <source>Desugared</source>
          <target state="translated">Desugared</target>
        </trans-unit>
        <trans-unit id="8d08aa8455a14b811d9b6fe35ed129bab859632f" translate="yes" xml:space="preserve">
          <source>Detach change detector to limit how often check occurs</source>
          <target state="translated">変更検出器を取り外して、チェックの発生頻度を制限する</target>
        </trans-unit>
        <trans-unit id="795a62180e964ae94c53bb9b9985f6f0b5bcd60a" translate="yes" xml:space="preserve">
          <source>Detached views are not checked during change detection runs until they are re-attached, even if they are marked as dirty.</source>
          <target state="translated">分離されたビューは、ダーティとマークされていても、再アタッチされるまで、変更検出の実行中にチェックされません。</target>
        </trans-unit>
        <trans-unit id="b0a9d6f591149520b6b2d78586833388b575e21c" translate="yes" xml:space="preserve">
          <source>DetachedRouteHandle</source>
          <target state="translated">DetachedRouteHandle</target>
        </trans-unit>
        <trans-unit id="020cb0ab4db35fbda482781c20576f39e92991bb" translate="yes" xml:space="preserve">
          <source>Detaches a view from dirty checking again.</source>
          <target state="translated">汚れたチェックからの景色を再び切り離す。</target>
        </trans-unit>
        <trans-unit id="ce080e741c27851c45aad3fbfe35ae9b1e68df51" translate="yes" xml:space="preserve">
          <source>Detaches a view from this container without destroying it. Use along with &lt;code&gt;&lt;a href=&quot;../forms/formarray#insert&quot;&gt;insert()&lt;/a&gt;&lt;/code&gt; to move a view within the current container.</source>
          <target state="translated">ビューを破棄せずにこのコンテナから切り離します。現在のコンテナ内でビューを移動するには、 &lt;code&gt;&lt;a href=&quot;../forms/formarray#insert&quot;&gt;insert()&lt;/a&gt;&lt;/code&gt; と一緒に使用します。</target>
        </trans-unit>
        <trans-unit id="94686a999c0455a3cf8b8386bc0cf59bdde40664" translate="yes" xml:space="preserve">
          <source>Detaches this view from the change-detection tree. A detached view is not checked until it is reattached. Use in combination with &lt;code&gt;&lt;a href=&quot;testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to implement local change detection checks.</source>
          <target state="translated">変更検出ツリーからこのビューを切り離します。デタッチされたビューは、再アタッチされるまでチェックされません。ローカルの変更検出チェックを実装するには、 &lt;code&gt;&lt;a href=&quot;testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; と組み合わせて使用​​します。</target>
        </trans-unit>
        <trans-unit id="e00db26f44f35fb87be8830347a5264c12dde83e" translate="yes" xml:space="preserve">
          <source>Detect and act upon changes that Angular can't or won't detect on its own.</source>
          <target state="translated">Angularが単独では検知できない、あるいは検知できない変更を検知して対処します。</target>
        </trans-unit>
        <trans-unit id="f8a127bfe17898a3b255876bcdf1d1c9fa3928de" translate="yes" xml:space="preserve">
          <source>Detect and act upon changes to input property values with the &lt;code&gt;ngOnChanges()&lt;/code&gt; method of the &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; lifecycle hook interface.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; ライフサイクルフックインターフェースの &lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドを使用して、入力プロパティ値への変更を検出して処理します。</target>
        </trans-unit>
        <trans-unit id="857eba68fb4e46cab2b9953790865f2a5092ebea" translate="yes" xml:space="preserve">
          <source>Detecting that an error occurred is one thing. Interpreting that error and composing a user-friendly response is a bit more involved.</source>
          <target state="translated">エラーが発生したことを検出することは一つのことです。そのエラーを解釈し、ユーザーフレンドリーな応答を構成することは、もう少し複雑です。</target>
        </trans-unit>
        <trans-unit id="f682c256f996e01f2e6e6fb59f14d0e1d884fbad" translate="yes" xml:space="preserve">
          <source>Detecting when an animation is disabled</source>
          <target state="translated">アニメーションが無効化された場合の検出</target>
        </trans-unit>
        <trans-unit id="04d06e3ff3564cb712418d032f6dfa595a2e7af4" translate="yes" xml:space="preserve">
          <source>Determines if a route should be reused</source>
          <target state="translated">ルートを再利用するかどうかを決定する</target>
        </trans-unit>
        <trans-unit id="5cb9846df8e89fd7757c4cecb42b1f09c86afecb" translate="yes" xml:space="preserve">
          <source>Determines if this route (and its subtree) should be detached to be reused later</source>
          <target state="translated">このルート(とそのサブツリー)を切り離して後で再利用するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="d9e64e88b5cb3aba35c3f9b37fc8405f431d8a8f" translate="yes" xml:space="preserve">
          <source>Determines if this route (and its subtree) should be reattached</source>
          <target state="translated">このルート(とそのサブツリー)を再接続するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="bf63974ae0ae184173f6e5b9dd49393bfd79fa35" translate="yes" xml:space="preserve">
          <source>Determines when the router updates the browser URL. By default (&lt;code&gt;&quot;deferred&quot;&lt;/code&gt;), updates the browser URL after navigation has finished. Set to &lt;code&gt;'eager'&lt;/code&gt; to update the browser URL at the beginning of navigation. You can choose to update early so that, if navigation fails, you can show an error message with the URL that failed.</source>
          <target state="translated">ルーターがブラウザーのURLを更新するタイミングを決定します。デフォルト（ &lt;code&gt;&quot;deferred&quot;&lt;/code&gt; ）では、ナビゲーションの完了後にブラウザのURLを更新します。ナビゲーションの開始時にブラウザーのURLを更新するには、 &lt;code&gt;'eager'&lt;/code&gt; に設定します。ナビゲーションが失敗した場合に、失敗したURLを含むエラーメッセージを表示できるように、早期更新を選択できます。</target>
        </trans-unit>
        <trans-unit id="d4d104cdda5ff1053c0418ce564dd52363728bd7" translate="yes" xml:space="preserve">
          <source>Determines which injectors will provide the injectable, by either associating it with an @NgModule or other &lt;code&gt;&lt;a href=&quot;injectortype&quot;&gt;InjectorType&lt;/a&gt;&lt;/code&gt;, or by specifying that this injectable should be provided in the 'root' injector, which will be the application-level injector in most apps.</source>
          <target state="translated">@NgModuleまたは他の &lt;code&gt;&lt;a href=&quot;injectortype&quot;&gt;InjectorType&lt;/a&gt;&lt;/code&gt; に関連付けるか、このインジェクタブルを「ルート」インジェクタに提供するように指定することにより、インジェクタブルを提供するインジェクタを決定します。</target>
        </trans-unit>
        <trans-unit id="999c66c441c3226e0966ddbba9a0c570185161ff" translate="yes" xml:space="preserve">
          <source>Dev server target to run tests against.</source>
          <target state="translated">テストを実行するための開発サーバーのターゲット。</target>
        </trans-unit>
        <trans-unit id="965695ae3b5de08fbcc553664bd700779eca213f" translate="yes" xml:space="preserve">
          <source>DevDependencies</source>
          <target state="translated">DevDependencies</target>
        </trans-unit>
        <trans-unit id="b0608ab1bd96359355856ec5aafa9740f6d63c4d" translate="yes" xml:space="preserve">
          <source>Developer Tools</source>
          <target state="translated">開発者ツール</target>
        </trans-unit>
        <trans-unit id="5083a3489727d560720fdf9a3fef93a68dd6422d" translate="yes" xml:space="preserve">
          <source>Developer-defined state that can be passed to any navigation. Access this value through the &lt;code&gt;Navigation.extras&lt;/code&gt; object returned from &lt;code&gt;router.getCurrentNavigation()&lt;/code&gt; while a navigation is executing.</source>
          <target state="translated">任意のナビゲーションに渡すことができる開発者定義の状態。ナビゲーションの実行中に &lt;code&gt;router.getCurrentNavigation()&lt;/code&gt; から返された &lt;code&gt;Navigation.extras&lt;/code&gt; オブジェクトを通じてこの値にアクセスします。</target>
        </trans-unit>
        <trans-unit id="7d70420c9b5d5dcaf2a90e58e9939aeecc418d9e" translate="yes" xml:space="preserve">
          <source>Developing forms requires design skills (which are out of scope for this page), as well as framework support for &lt;em&gt;two-way data binding, change tracking, validation, and error handling&lt;/em&gt;, which you'll learn about on this page.</source>
          <target state="translated">フォームを開発するには、デザインスキル（このページの範囲外）と、このページで学習する&lt;em&gt;双方向データバインディング、変更追跡、検証、およびエラー処理の&lt;/em&gt;フレームワークサポートが必要です。</target>
        </trans-unit>
        <trans-unit id="31febd42549d5d48fe3c931baf9f040f396e2320" translate="yes" xml:space="preserve">
          <source>Developing schematics for libraries</source>
          <target state="translated">ライブラリ用の回路図の開発</target>
        </trans-unit>
        <trans-unit id="73c1a0ef58c564d4a10d5d0f9429f07214af85c4" translate="yes" xml:space="preserve">
          <source>Dictionary of objects associated with template local variables (e.g. &lt;code&gt;#foo&lt;/code&gt;), keyed by the local variable name.</source>
          <target state="translated">ローカル変数名をキーとする、テンプレートローカル変数（ &lt;code&gt;#foo&lt;/code&gt; など）に関連付けられたオブジェクトのディクショナリ。</target>
        </trans-unit>
        <trans-unit id="d138e770ccb2b52d2c77f539bee53aeb46b6a506" translate="yes" xml:space="preserve">
          <source>Differences with &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; との違い</target>
        </trans-unit>
        <trans-unit id="5205f5f17a0df5d5c03d855d59f41a77eb75f242" translate="yes" xml:space="preserve">
          <source>Different classes can provide the same service. For example, the following code tells the injector to return a &lt;code&gt;BetterLogger&lt;/code&gt; instance when the component asks for a logger using the &lt;code&gt;Logger&lt;/code&gt; token.</source>
          <target state="translated">異なるクラスが同じサービスを提供できます。たとえば、次のコードは、コンポーネントが &lt;code&gt;Logger&lt;/code&gt; トークンを使用してロガーを要求したときに &lt;code&gt;BetterLogger&lt;/code&gt; インスタンスを返すようにインジェクターに指示します。</target>
        </trans-unit>
        <trans-unit id="f312093a46be4a4c362b96e84ae7c5b57668ffd7" translate="yes" xml:space="preserve">
          <source>Different file types have different comment syntax so adjust accordingly.</source>
          <target state="translated">ファイルの種類によってコメントの構文が異なるので、それに応じて調整してください。</target>
        </trans-unit>
        <trans-unit id="8bc5b687513fa24e83b6d7a0c90598defec2723f" translate="yes" xml:space="preserve">
          <source>Different languages have different pluralization rules and grammatical constructions that add complexity to the translation task. You can use regular expressions with the &lt;code&gt;plural&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; clauses to provide patterns that aid translation in these cases.</source>
          <target state="translated">言語によって、複数形化の規則や文法の構成が異なり、翻訳作業が複雑になります。正規表現を &lt;code&gt;plural&lt;/code&gt; 句と &lt;code&gt;select&lt;/code&gt; 句とともに使用して、これらの場合の変換を支援するパターンを提供できます。</target>
        </trans-unit>
        <trans-unit id="fddacc86c58629a7a06e78de09cc7ce3bca5ae83" translate="yes" xml:space="preserve">
          <source>Differential Loading</source>
          <target state="translated">差動荷重</target>
        </trans-unit>
        <trans-unit id="2d7a4dce83d8a83a0203b47ca4aa73a375cb78c8" translate="yes" xml:space="preserve">
          <source>Differential Loading (Two builds w/Conditional Polyfills</source>
          <target state="translated">差動荷重 (条件付きポリフィルを使用した 2 つのビルド)</target>
        </trans-unit>
        <trans-unit id="c0507f371f24db983eb326b7746378ec13825bee" translate="yes" xml:space="preserve">
          <source>Differential builds</source>
          <target state="translated">差動ビルド</target>
        </trans-unit>
        <trans-unit id="ef47150250dc01045ca6f30fdb1d8fa1da1bfb0b" translate="yes" xml:space="preserve">
          <source>Differential loading can be explicitly disabled if it causes unexpected issues or you need to target ES5 specifically for legacy browser support.</source>
          <target state="translated">差動読み込みが予期せぬ問題を引き起こす場合や、レガシー ブラウザのサポートのために ES5 をターゲットにする必要がある場合には、差動読み込みを明示的に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="8d2d01050bb3ebcdc0e9b5c9da3e30627a86ce04" translate="yes" xml:space="preserve">
          <source>Differential loading is a strategy where the CLI builds two separate bundles as part of your deployed application.</source>
          <target state="translated">差動ローディングは、CLIがデプロイされたアプリケーションの一部として2つの別々のバンドルを構築する戦略です。</target>
        </trans-unit>
        <trans-unit id="e6559e68cd586a9e5aba6c76cebb91e98c156533" translate="yes" xml:space="preserve">
          <source>Differential loading is currently only supported when using &lt;code&gt;es2015&lt;/code&gt; as a compilation &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt;. When used with targets higher than &lt;code&gt;es2015&lt;/code&gt;, a warning is emitted during build time.</source>
          <target state="translated">現在、差分ロードは、 &lt;code&gt;es2015&lt;/code&gt; をコンパイル &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; として使用する場合にのみサポートされています。 &lt;code&gt;es2015&lt;/code&gt; より高いターゲットで使用すると、ビルド時に警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="17198706561cb331fc3c7bb7190d791c80826666" translate="yes" xml:space="preserve">
          <source>Differential loading is supported by default with version 8 and later of the Angular CLI. For each application project in your workspace, you can configure how builds are produced based on the &lt;code&gt;browserslist&lt;/code&gt; and &lt;code&gt;tsconfig.json&lt;/code&gt; files in your application project.</source>
          <target state="translated">差分読み込みは、Angular CLIのバージョン8以降でデフォルトでサポートされています。ワークスペース内のアプリケーションプロジェクトごとに、アプリケーションプロジェクトの &lt;code&gt;browserslist&lt;/code&gt; および &lt;code&gt;tsconfig.json&lt;/code&gt; ファイルに基づいて、ビルドの生成方法を構成できます。</target>
        </trans-unit>
        <trans-unit id="58150dc76bf26b88c5c5b48baaa6443ba5314f52" translate="yes" xml:space="preserve">
          <source>Direct use of the DOM APIs and explicit sanitization calls</source>
          <target state="translated">DOM API の直接使用と明示的なサニタイズコール</target>
        </trans-unit>
        <trans-unit id="164e0b79063f11a2936cf830fb48b8c7054cc118" translate="yes" xml:space="preserve">
          <source>Directive</source>
          <target state="translated">Directive</target>
        </trans-unit>
        <trans-unit id="e4adaa9d656e11f46881b340967de4f601ead5c8" translate="yes" xml:space="preserve">
          <source>Directive and component change detection and lifecycle hooks</source>
          <target state="translated">ディレクティブとコンポーネントの変更検出とライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="1682fe77c47d222324b0302bf367d45dd3f72f4c" translate="yes" xml:space="preserve">
          <source>Directive and component instances have a lifecycle as Angular creates, updates, and destroys them. Developers can tap into key moments in that lifecycle by implementing one or more of the &lt;em&gt;lifecycle hook&lt;/em&gt; interfaces in the Angular &lt;code&gt;core&lt;/code&gt; library.</source>
          <target state="translated">ディレクティブとコンポーネントインスタンスは、Angularがインスタンスを作成、更新、破棄するときにライフサイクルを持ちます。開発者は、Angular &lt;code&gt;core&lt;/code&gt; ライブラリに1つ以上の&lt;em&gt;ライフサイクルフック&lt;/em&gt;インターフェースを実装することにより、そのライフサイクルの主要な瞬間を利用できます。</target>
        </trans-unit>
        <trans-unit id="e2654c073ed5bef1dd759fe92dd6b281c300cd6b" translate="yes" xml:space="preserve">
          <source>Directive automatically applied to Angular form controls that sets CSS classes based on control status.</source>
          <target state="translated">コントロールの状態に応じてCSSクラスを設定するAngularフォームコントロールに自動的に適用されるディレクティブです。</target>
        </trans-unit>
        <trans-unit id="75747f644b900a5f32ad06d340d4e026bf285acd" translate="yes" xml:space="preserve">
          <source>Directive automatically applied to Angular form groups that sets CSS classes based on control status (valid/invalid/dirty/etc).</source>
          <target state="translated">制御状態(valid/invalid/dirty/etc)に基づいてCSSクラスを設定するAngularフォームグループに自動的に適用されるディレクティブ。</target>
        </trans-unit>
        <trans-unit id="1fd55803370b29f5f55ad4e143686d9104e72374" translate="yes" xml:space="preserve">
          <source>Directive classes, like component classes, can implement &lt;a href=&quot;../../guide/lifecycle-hooks&quot;&gt;life-cycle hooks&lt;/a&gt; to influence their configuration and behavior.</source>
          <target state="translated">コンポーネントクラスのようなディレクティブクラスは、&lt;a href=&quot;../../guide/lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;を実装して、その構成と動作に影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="c7a712e56a0e276f0e4a48dc5e00f75907a458cd" translate="yes" xml:space="preserve">
          <source>Directive configuration</source>
          <target state="translated">ディレクティブ構成</target>
        </trans-unit>
        <trans-unit id="faa9397afbd793cccd58be80adb509a96a8af6c4" translate="yes" xml:space="preserve">
          <source>Directive custom prefix</source>
          <target state="translated">ディレクティブのカスタムプレフィックス</target>
        </trans-unit>
        <trans-unit id="1731bdcdbdffa1afa963e4872f9861768196adf1" translate="yes" xml:space="preserve">
          <source>Directive selectors</source>
          <target state="translated">指令セレクタ</target>
        </trans-unit>
        <trans-unit id="233b1dbe21adf04a0e287966365f0552786ce49b" translate="yes" xml:space="preserve">
          <source>Directive spelling</source>
          <target state="translated">ディレクティブのスペル</target>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="translated">Directives</target>
        </trans-unit>
        <trans-unit id="134c65a3c9a1183f4e598f629537b52066c32c08" translate="yes" xml:space="preserve">
          <source>Directives and binding markup in a component's template modify views based on program data and logic.</source>
          <target state="translated">コンポーネントのテンプレート内のディレクティブとバインディングマークアップは、プログラムのデータとロジックに基づいてビューを変更します。</target>
        </trans-unit>
        <trans-unit id="06b50e6029735d84376f972c0295eb92cee93b36" translate="yes" xml:space="preserve">
          <source>Directives are &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt;. They must be declared by an NgModule in order to be usable in an app.</source>
          <target state="translated">ディレクティブは&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;宣言可能&lt;/a&gt;です。アプリで使用できるようにするには、NgModuleで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="8bcaad152be1bbb16300fb098f14d0ff672bd855" translate="yes" xml:space="preserve">
          <source>Directives have lifecycle hooks too. A &lt;code&gt;SpyDirective&lt;/code&gt; can log when the element it spies upon is created or destroyed using the &lt;code&gt;ngOnInit&lt;/code&gt; and &lt;code&gt;ngOnDestroy&lt;/code&gt; hooks.</source>
          <target state="translated">ディレクティブにもライフサイクルフックがあります。A &lt;code&gt;SpyDirective&lt;/code&gt; は、要素は、それが作成されるか、または使用して破壊された時にスパイときにログインでき &lt;code&gt;ngOnInit&lt;/code&gt; と &lt;code&gt;ngOnDestroy&lt;/code&gt; フック。</target>
        </trans-unit>
        <trans-unit id="97bea3fa344a86af3d956e5d588feb9cda5f972b" translate="yes" xml:space="preserve">
          <source>Directives overview</source>
          <target state="translated">ディレクティブの概要</target>
        </trans-unit>
        <trans-unit id="26592a9a2f4cddfbb4afebe8ce3df3718441afde" translate="yes" xml:space="preserve">
          <source>Directives that behave like &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; can declare that they want the same treatment by including a static member marker that is a signal to the template compiler to treat them like &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. This static member for &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のように動作するディレクティブは、テンプレートコンパイラに &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のように処理するシグナルである静的メンバーマーカーを含めることで、同じ処理が必要であることを宣言できます。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; のこの静的メンバーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e413521484883d1b26956d0c108786e5176aee96" translate="yes" xml:space="preserve">
          <source>Directives typically raise custom events with an Angular &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;. The directive creates an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; and exposes it as a property. The directive calls &lt;code&gt;EventEmitter.emit(payload)&lt;/code&gt; to fire an event, passing in a message payload, which can be anything. Parent directives listen for the event by binding to this property and accessing the payload through the &lt;code&gt;$event&lt;/code&gt; object.</source>
          <target state="translated">ディレクティブは通常、Angular &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;を使用してカスタムイベントを発生させます。ディレクティブは、 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; を作成し、それをプロパティとして公開します。このディレクティブは、 &lt;code&gt;EventEmitter.emit(payload)&lt;/code&gt; を呼び出してイベントを起動し、メッセージペイロードを渡します。親ディレクティブは、このプロパティにバインドし、 &lt;code&gt;$event&lt;/code&gt; オブジェクトを介してペイロードにアクセスすることにより、イベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="e162e9d83bd60ff3d908ebf32714d5b5149cc574" translate="yes" xml:space="preserve">
          <source>Directly enables or disables all usage analytics for the user, or prompts the user to set the status interactively, or sets the default status for the project.</source>
          <target state="translated">ユーザーのすべての使用状況分析を直接有効または無効にしたり、ユーザーに対話的にステータスを設定するように促したり、プロジェクトのデフォルトのステータスを設定したりします。</target>
        </trans-unit>
        <trans-unit id="1e78a95d04636868cba604820332052c052f098e" translate="yes" xml:space="preserve">
          <source>Disable Angular's development mode, which turns off assertions and other checks within the framework.</source>
          <target state="translated">フレームワーク内のアサーションやその他のチェックをオフにするAngularの開発モードを無効にします。</target>
        </trans-unit>
        <trans-unit id="c502fe3e92db5333454c3f52453a1907dc9251e6" translate="yes" xml:space="preserve">
          <source>Disable animations application-wide</source>
          <target state="translated">アプリケーション全体でアニメーションを無効にする</target>
        </trans-unit>
        <trans-unit id="fa498c6d7585475093bb59ac3e4d903e7d385155" translate="yes" xml:space="preserve">
          <source>Disable checking of a binding expression by surrounding the expression in a call to the &lt;a href=&quot;template-syntax&quot;&gt;&lt;code&gt;$any()&lt;/code&gt; cast pseudo-function&lt;/a&gt;. The compiler treats it as a cast to the &lt;code&gt;any&lt;/code&gt; type just like in TypeScript when a &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt; or &lt;code&gt;as any&lt;/code&gt; cast is used.</source>
          <target state="translated">&lt;a href=&quot;template-syntax&quot;&gt; &lt;code&gt;$any()&lt;/code&gt; キャスト疑似関数の&lt;/a&gt;呼び出しで式を囲むことにより、バインディング式のチェックを無効にします。コンパイラは、 &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt; または &lt;code&gt;as any&lt;/code&gt; キャストが使用されている場合、TypeScriptと同様に、 &lt;code&gt;any&lt;/code&gt; 型へのキャストとしてそれを扱います。</target>
        </trans-unit>
        <trans-unit id="c941ff72a9b24436d3e952f909f1d7e77a6f5100" translate="yes" xml:space="preserve">
          <source>Disable the default XSRF protection.</source>
          <target state="translated">デフォルトのXSRF保護を無効にします。</target>
        </trans-unit>
        <trans-unit id="eb9abe8b988d1d2892f78a259e71850606b0f9bf" translate="yes" xml:space="preserve">
          <source>Disable the form&amp;rsquo;s &lt;em&gt;Submit&lt;/em&gt; button until the form is valid.</source>
          <target state="translated">フォームが有効になるまで、フォームの[ &lt;em&gt;送信&lt;/em&gt; ]ボタンを無効にします。</target>
        </trans-unit>
        <trans-unit id="47dd9d43d5f5f62cbd433b889406a52005ee82ec" translate="yes" xml:space="preserve">
          <source>Disabled controls are exempt from validation checks and are not included in the aggregate value of their ancestor controls.</source>
          <target state="translated">無効化されたコントロールは検証チェックの対象外であり、その祖先コントロールの集合値には含まれません。</target>
        </trans-unit>
        <trans-unit id="5ae642a07e4ba465762a1b462bf162baf3a09029" translate="yes" xml:space="preserve">
          <source>Disables Angular tools.</source>
          <target state="translated">Angularのツールを無効にします。</target>
        </trans-unit>
        <trans-unit id="161f7e4cab69df56dfaa6ff79ced90206f307f8a" translate="yes" xml:space="preserve">
          <source>Disables automatic scroll restoration provided by the browser. See also &lt;a href=&quot;https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration&quot;&gt;window.history.scrollRestoration info&lt;/a&gt;.</source>
          <target state="translated">ブラウザが提供する自動スクロール復元を無効にします。&lt;a href=&quot;https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration&quot;&gt;window.history.scrollRestoration info&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="7239e7edb443b9ef5c9fec4a7006576b15faeffb" translate="yes" xml:space="preserve">
          <source>Disables the control. This means the control is exempt from validation checks and excluded from the aggregate value of any parent. Its status is &lt;code&gt;DISABLED&lt;/code&gt;.</source>
          <target state="translated">コントロールを無効にします。つまり、コントロールは検証チェックから除外され、親の集計値から除外されます。そのステータスは &lt;code&gt;DISABLED&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="49e06b6442e79995b5aa5867bdc26cb341c23f1c" translate="yes" xml:space="preserve">
          <source>Disabling Animations</source>
          <target state="translated">アニメーションを無効にする</target>
        </trans-unit>
        <trans-unit id="f3b4e520315f40e64f137fc24078069b1c75376b" translate="yes" xml:space="preserve">
          <source>Disabling all animations</source>
          <target state="translated">すべてのアニメーションを無効にする</target>
        </trans-unit>
        <trans-unit id="fa56a5729e4b504e45afd1c5470855dbccf0c4c0" translate="yes" xml:space="preserve">
          <source>Disabling an animation on an HTML element</source>
          <target state="translated">HTML 要素のアニメーションを無効にする</target>
        </trans-unit>
        <trans-unit id="1c34c40ced0ea58defc7d87903d8f5e5a3c5df00" translate="yes" xml:space="preserve">
          <source>Disabling type checking using &lt;code&gt;$any()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$any()&lt;/code&gt; を使用して型チェックを無効にする</target>
        </trans-unit>
        <trans-unit id="2cdfcdd1a412a8c6a67bac7adc1e32bbe75bc366" translate="yes" xml:space="preserve">
          <source>Disallow &lt;code&gt;local-part&lt;/code&gt; (the part before the &lt;code&gt;@&lt;/code&gt; symbol) to begin or end with a period (&lt;code&gt;.&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;local-part&lt;/code&gt; （ &lt;code&gt;@&lt;/code&gt; 記号の前の部分）をピリオド（ &lt;code&gt;.&lt;/code&gt; ）で開始または終了することを禁止します。</target>
        </trans-unit>
        <trans-unit id="e8edb13b82dcb96a8fe82f7bae4cd7f33b470b95" translate="yes" xml:space="preserve">
          <source>Disallow &lt;code&gt;local-part&lt;/code&gt; to be longer than 64 characters.</source>
          <target state="translated">&lt;code&gt;local-part&lt;/code&gt; が64文字を超えることを禁止します。</target>
        </trans-unit>
        <trans-unit id="6acc3c163f352ae3c5fcd3ac0f7d7a67ce1d0f50" translate="yes" xml:space="preserve">
          <source>Disallow the whole address to be longer than 254 characters.</source>
          <target state="translated">アドレス全体を254文字以上にすることを禁止します。</target>
        </trans-unit>
        <trans-unit id="17e601d66c409630ceeac0a0e471360854bc32fa" translate="yes" xml:space="preserve">
          <source>Discard all remaining periodic tasks.</source>
          <target state="translated">残っている定期的なタスクをすべて破棄します。</target>
        </trans-unit>
        <trans-unit id="413c48586a41c6e13f4f84647a0a8c96368993ad" translate="yes" xml:space="preserve">
          <source>Disclaimer: The dates are offered as general guidance and may be adjusted by us when necessary to ensure delivery of a high-quality platform.</source>
          <target state="translated">免責事項:日付は一般的なガイダンスとして提供されており、高品質のプラットフォームを確実に提供するために必要に応じて当社が調整することがあります。</target>
        </trans-unit>
        <trans-unit id="8fb937b602b4f2ef21c7fab00ac15de3b3ba49ea" translate="yes" xml:space="preserve">
          <source>Discussion</source>
          <target state="translated">Discussion</target>
        </trans-unit>
        <trans-unit id="6e8d5a186dc622a3626ee7e4c637ddf280fc7288" translate="yes" xml:space="preserve">
          <source>Display a Heroes List</source>
          <target state="translated">英雄一覧を表示する</target>
        </trans-unit>
        <trans-unit id="50ab06bc90999c25d476ad86b84dbf4119bc834a" translate="yes" xml:space="preserve">
          <source>Display additional details about internal operations during execution.</source>
          <target state="translated">実行中の内部操作の詳細を追加表示します。</target>
        </trans-unit>
        <trans-unit id="936697d64458ff8ca788647c7b0045284d1aa4df" translate="yes" xml:space="preserve">
          <source>Display the cart items</source>
          <target state="translated">カートのアイテムを表示する</target>
        </trans-unit>
        <trans-unit id="dfa86afacc9fd4bee56e5c9b2e4c921a1bdc9fe2" translate="yes" xml:space="preserve">
          <source>Display the cart items.</source>
          <target state="translated">カートのアイテムを表示します。</target>
        </trans-unit>
        <trans-unit id="12934993315662c08dc332b832a6fcfe68bd9435" translate="yes" xml:space="preserve">
          <source>Display the current status of &lt;code&gt;profileForm&lt;/code&gt; using interpolation.</source>
          <target state="translated">補間を使用して &lt;code&gt;profileForm&lt;/code&gt; の現在のステータスを表示します。</target>
        </trans-unit>
        <trans-unit id="293c04f1dc27393bab94e0e1df1f4a5820a7e2a8" translate="yes" xml:space="preserve">
          <source>Display the message from &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; からのメッセージを表示する</target>
        </trans-unit>
        <trans-unit id="8391500f52f913bef2f5436777cabddfd5197d63" translate="yes" xml:space="preserve">
          <source>Display the new product alert component as a child of the product list.</source>
          <target state="translated">新製品アラートコンポーネントを製品リストの子として表示します。</target>
        </trans-unit>
        <trans-unit id="187db4f52e17ecfca5ae1efe1dac6099dd2a3091" translate="yes" xml:space="preserve">
          <source>Display validation errors to users and enable/disable form controls.</source>
          <target state="translated">ユーザーに検証エラーを表示し、フォームコントロールを有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="64e4975e075a85e6e6486a7508b2006fea68b3d0" translate="yes" xml:space="preserve">
          <source>Displayed text is sometimes supplied as the value of an attribute, rather than the content of tag. For example, if your template has an image with a &lt;code&gt;title&lt;/code&gt; attribute, the text value of the &lt;code&gt;title&lt;/code&gt; attribute needs to be translated.</source>
          <target state="translated">表示されるテキストは、タグのコンテンツではなく、属性の値として提供される場合があります。あなたのテンプレートが持つイメージがある場合たとえば、 &lt;code&gt;title&lt;/code&gt; 属性を、のテキスト値 &lt;code&gt;title&lt;/code&gt; 属性を翻訳する必要があります。</target>
        </trans-unit>
        <trans-unit id="f76593be8dd0141a5ddaffd2686e576e08afc5b7" translate="yes" xml:space="preserve">
          <source>Displaying Data</source>
          <target state="translated">データの表示</target>
        </trans-unit>
        <trans-unit id="3382d66116a9a6c0577e8a5ed1325809b441a626" translate="yes" xml:space="preserve">
          <source>Displaying a code fragment</source>
          <target state="translated">コードフラグメントの表示</target>
        </trans-unit>
        <trans-unit id="a3d4457b2aebe7498f3aec39f2bcb0dfa5ebf35f" translate="yes" xml:space="preserve">
          <source>Displaying a form control value</source>
          <target state="translated">フォームコントロールの値を表示する</target>
        </trans-unit>
        <trans-unit id="ec7d1c82071d7dc99c5bd5ebb23d191f80fdd12b" translate="yes" xml:space="preserve">
          <source>Displaying dates, number, percentages, and currencies in a local format.</source>
          <target state="translated">日付、数字、パーセント、通貨をローカル形式で表示します。</target>
        </trans-unit>
        <trans-unit id="c9fb97d71900591a885c42ac4de47f4b8ce3cb66" translate="yes" xml:space="preserve">
          <source>Displaying form status</source>
          <target state="translated">フォームの状態を表示する</target>
        </trans-unit>
        <trans-unit id="9a81501c320e1623a9a0ece8fddf13ed90c88c68" translate="yes" xml:space="preserve">
          <source>Displaying heroes</source>
          <target state="translated">英雄の表示</target>
        </trans-unit>
        <trans-unit id="3e10904e7cc24806178428e12412202d516a97ad" translate="yes" xml:space="preserve">
          <source>Displaying multiple routes in named outlets</source>
          <target state="translated">名前付きアウトレットで複数のルートを表示する</target>
        </trans-unit>
        <trans-unit id="437c35fd09d5880b944f92117bf1891a887a73a2" translate="yes" xml:space="preserve">
          <source>Displaying the component</source>
          <target state="translated">コンポーネントの表示</target>
        </trans-unit>
        <trans-unit id="87a45e164b445cbb2662704d3bf176b7ed450902" translate="yes" xml:space="preserve">
          <source>Displaying the first page quickly can be critical for user engagement. &lt;a href=&quot;https://www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/&quot;&gt;53 percent of mobile site visits are abandoned&lt;/a&gt; if pages take longer than 3 seconds to load. Your app may have to launch faster to engage these users before they decide to do something else.</source>
          <target state="translated">最初のページをすばやく表示することは、ユーザーエンゲージメントにとって非常に重要です。ページの読み込みに3秒以上かかると&lt;a href=&quot;https://www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/&quot;&gt;、モバイルサイトへの訪問の53％が放棄さ&lt;/a&gt;れます。これらのユーザーが何か他のことをする前にユーザーを引き付けるには、アプリをより速く起動する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="be6aac75dad35c792e30b1727ff36040ea8fd75b" translate="yes" xml:space="preserve">
          <source>Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees that match the switch expression's pluralization category.</source>
          <target state="translated">スイッチ式の値にマッチする DOM サブツリーを表示します。</target>
        </trans-unit>
        <trans-unit id="4a726d949246170017d0159180d56c3cdb4d23e0" translate="yes" xml:space="preserve">
          <source>Displays a message that the product has been added to the cart</source>
          <target state="translated">商品がカートに追加された旨のメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="15d60f9bd1f4d59065ade7eb83ac01154729d53b" translate="yes" xml:space="preserve">
          <source>Displays the application component for the active URL. Manages navigation from one component to the next.</source>
          <target state="translated">アクティブな URL のアプリケーションコンポーネントを表示します。1つのコンポーネントから次のコンポーネントへのナビゲーションを管理します。</target>
        </trans-unit>
        <trans-unit id="b75673d407de8304eb7361d00582b1562567807f" translate="yes" xml:space="preserve">
          <source>Displays the collection in the order specified by the expression. In this example, the movie title orders the &lt;code&gt;movieList&lt;/code&gt;.</source>
          <target state="translated">式で指定された順序でコレクションを表示します。この例では、映画のタイトルが &lt;code&gt;movieList&lt;/code&gt; を注文しています。</target>
        </trans-unit>
        <trans-unit id="4f25bbe16efc9f89794f9928c10c073638f3c99c" translate="yes" xml:space="preserve">
          <source>Dispose of running hybrid AngularJS / Angular application.</source>
          <target state="translated">実行中のハイブリッドAngularJS/Angularアプリケーションを破棄します。</target>
        </trans-unit>
        <trans-unit id="5f8ab14727ef35723fd40bc395d5a15a9eb1136f" translate="yes" xml:space="preserve">
          <source>Disposes of the router.</source>
          <target state="translated">ルータを廃棄します。</target>
        </trans-unit>
        <trans-unit id="08c2a554ac7554886705572fdeb828f2042d79a9" translate="yes" xml:space="preserve">
          <source>Dive deeper into the capabilities and advanced feature of the Angular DI system in the following pages:</source>
          <target state="translated">次のページでは、Angular DIシステムの機能と高度な機能をより深く掘り下げています。</target>
        </trans-unit>
        <trans-unit id="03779f03f1f9115d62b4f94d8a480686fae463e3" translate="yes" xml:space="preserve">
          <source>Do &lt;em&gt;not&lt;/em&gt; declare the following:</source>
          <target state="translated">次のもの&lt;em&gt;は&lt;/em&gt;宣言し&lt;em&gt;ないで&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="2475d66e74a14160938453ef0e85c7c2d0d851ed" translate="yes" xml:space="preserve">
          <source>Do &lt;em&gt;not&lt;/em&gt; reference the &lt;code&gt;userServiceStub&lt;/code&gt; object that's provided to the testing module in the body of your test. &lt;strong&gt;It does not work!&lt;/strong&gt; The &lt;code&gt;userService&lt;/code&gt; instance injected into the component is a completely &lt;em&gt;different&lt;/em&gt; object, a clone of the provided &lt;code&gt;userServiceStub&lt;/code&gt;.</source>
          <target state="translated">テストの本文でテストモジュールに提供されている &lt;code&gt;userServiceStub&lt;/code&gt; オブジェクトを参照し&lt;em&gt;ない&lt;/em&gt;でください。&lt;strong&gt;それは動作しません！&lt;/strong&gt; &lt;code&gt;userService&lt;/code&gt; コンポーネントに注入インスタンスは完全に&lt;em&gt;異なる&lt;/em&gt;オブジェクト、提供のクローン &lt;code&gt;userServiceStub&lt;/code&gt; 。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="12870bcd74aac23d50d0b29f666f89ec81c28f1f" translate="yes" xml:space="preserve">
          <source>Do a change detection run to make sure there are no pending changes. Throws an exceptions if there are.</source>
          <target state="translated">変更検出を実行して、保留中の変更がないことを確認します。保留されている場合は例外をスローします。</target>
        </trans-unit>
        <trans-unit id="eb2dc836b8c593cdbd90fa95783598016fcbf09f" translate="yes" xml:space="preserve">
          <source>Do a change detection run to make sure there were no changes.</source>
          <target state="translated">変更検出を実行して、変更がなかったことを確認します。</target>
        </trans-unit>
        <trans-unit id="2313636875302c5d743751b15211e002d72e6da2" translate="yes" xml:space="preserve">
          <source>Do not create a node that is both a &lt;em&gt;header&lt;/em&gt; and an &lt;em&gt;item&lt;/em&gt; node. That is, do not specify the &lt;code&gt;url&lt;/code&gt; property of a &lt;em&gt;header&lt;/em&gt; node.</source>
          <target state="translated">&lt;em&gt;ヘッダー&lt;/em&gt;と&lt;em&gt;アイテム&lt;/em&gt;ノードの両方であるノードを作成しないでください。つまり、&lt;em&gt;ヘッダー&lt;/em&gt;ノードの &lt;code&gt;url&lt;/code&gt; プロパティを指定しないでください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="faa0a4df964bbffd5263e64e7f24f3bd50f08908" translate="yes" xml:space="preserve">
          <source>Do not depend on this.</source>
          <target state="translated">これに頼ってはいけません。</target>
        </trans-unit>
        <trans-unit id="1347b0bda514ee25e75111d5f7406049b122ac68" translate="yes" xml:space="preserve">
          <source>Do not import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; in any other module. &lt;em&gt;Feature modules&lt;/em&gt; and &lt;em&gt;lazy-loaded modules&lt;/em&gt; should import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead. They need the common directives. They don't need to re-install the app-wide providers.</source>
          <target state="translated">他のモジュールに &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートしないでください。&lt;em&gt;機能モジュール&lt;/em&gt;と&lt;em&gt;遅延読み込みモジュール&lt;/em&gt;は、代わりに &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポートする必要があります。彼らは共通の指令を必要としています。アプリ全体のプロバイダーを再インストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="b53aacf7cfdb75cab36ee91ea58b40ba72ec414f" translate="yes" xml:space="preserve">
          <source>Do not re-configure &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; after calling &lt;code&gt;createComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;createComponent&lt;/code&gt; を呼び出した後に &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を再構成しないでください。</target>
        </trans-unit>
        <trans-unit id="8a23b6ef2227e6ccff39230682cb9bbb0db07d40" translate="yes" xml:space="preserve">
          <source>Do not re-configure the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; after calling &lt;code&gt;compileComponents()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compileComponents()&lt;/code&gt; を呼び出した後に &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を再構成しないでください。</target>
        </trans-unit>
        <trans-unit id="766289fcaf6f3358a5de785cef51decc48e7fed0" translate="yes" xml:space="preserve">
          <source>Do not refer to ambient types in metadata expressions.</source>
          <target state="translated">メタデータ表現では、アンビエント型を参照しないでください。</target>
        </trans-unit>
        <trans-unit id="d6405f3e12cf5c79eef4bce2326b3e7580784498" translate="yes" xml:space="preserve">
          <source>Do not retry &lt;strong&gt;authentication&lt;/strong&gt; requests, since these should only be initiated by user action. We don't want to lock out user accounts with repeated login requests that the user has not initiated.</source>
          <target state="translated">&lt;strong&gt;認証&lt;/strong&gt;要求はユーザーの操作によってのみ開始されるため、再試行しないでください。ユーザーが開始していないログイン要求が繰り返されることでユーザーアカウントをロックアウトしたくない。</target>
        </trans-unit>
        <trans-unit id="28a19ab23e9fe883d6e7f97200affa843fe8c5f9" translate="yes" xml:space="preserve">
          <source>Do not use &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt; in the same spec as &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用しないでください &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt; を同じ仕様で &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a5db8d50567ea1e510a8a39e340d4f4053b0f11" translate="yes" xml:space="preserve">
          <source>Do not use &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; in the same spec as &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用しないでください &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; を同じ仕様で &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2335b0f690b63608971fef94146a83235635e315" translate="yes" xml:space="preserve">
          <source>Do not use the real path when resolving modules.</source>
          <target state="translated">モジュールを解決する際には、実パスを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="e79dc690e68fe885deb4f02b28c242039901b6e5" translate="yes" xml:space="preserve">
          <source>Do not use this in a production server environment. Use pre-compiled &lt;a href=&quot;../core/ngmodulefactory&quot;&gt;&lt;code&gt;NgModuleFactory&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;rendermodulefactory&quot;&gt;&lt;code&gt;renderModuleFactory&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">本番サーバー環境では使用しないでください。代わりに、あらかじめコンパイルされた&lt;a href=&quot;../core/ngmodulefactory&quot;&gt; &lt;code&gt;NgModuleFactory&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;rendermodulefactory&quot;&gt; &lt;code&gt;renderModuleFactory&lt;/code&gt; &lt;/a&gt;とともに使用してください。</target>
        </trans-unit>
        <trans-unit id="63af3a5e4c9dc50cfdde2fcbffecebe94bfb4d50" translate="yes" xml:space="preserve">
          <source>Do this only in the beginning to avoid accidentally deleting your own tests and git setup!</source>
          <target state="translated">誤って自分のテストや git の設定を削除してしまうのを防ぐために、最初のうちだけはこれを実行しましょう!</target>
        </trans-unit>
        <trans-unit id="20cca558f89d5711c8f3da0efc9477ae18de9033" translate="yes" xml:space="preserve">
          <source>Do this with the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;checkForUpdate()&lt;/a&gt;&lt;/code&gt; method:</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;checkForUpdate()&lt;/a&gt;&lt;/code&gt; メソッドで行います。</target>
        </trans-unit>
        <trans-unit id="78ddf7d15d9eadd3b6e0343a1c6248aa24d007b7" translate="yes" xml:space="preserve">
          <source>Do you need a &lt;code&gt;Routing Module&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;Routing Module&lt;/code&gt; が必要ですか？</target>
        </trans-unit>
        <trans-unit id="974e4b1b193a71bcf82334316bb8290d4d24ce87" translate="yes" xml:space="preserve">
          <source>DoBootstrap</source>
          <target state="translated">DoBootstrap</target>
        </trans-unit>
        <trans-unit id="531f9022ed7522c3f7c2f8318631044b8f144ea4" translate="yes" xml:space="preserve">
          <source>DoCheck</source>
          <target state="translated">DoCheck</target>
        </trans-unit>
        <trans-unit id="fe56da291c49fe9ffdba4c0121544e151ccd5dda" translate="yes" xml:space="preserve">
          <source>Doc generation and tooling</source>
          <target state="translated">ドクの生成とツール</target>
        </trans-unit>
        <trans-unit id="6b23b8dc766283282a9dd088b77fbc4505a2bac3" translate="yes" xml:space="preserve">
          <source>Documentation for using Bazel for frontend projects is linked from &lt;a href=&quot;https://docs.bazel.build/versions/master/bazel-and-javascript.html&quot;&gt;https://docs.bazel.build/versions/master/bazel-and-javascript.html&lt;/a&gt;.</source>
          <target state="translated">フロントエンドプロジェクトでBazelを使用するためのドキュメントは、&lt;a href=&quot;https://docs.bazel.build/versions/master/bazel-and-javascript.html&quot;&gt;https：&lt;/a&gt; //docs.bazel.build/versions/master/bazel-and-javascript.htmlからリンクされています。</target>
        </trans-unit>
        <trans-unit id="636ed57eb2bb3515c8353809df42914e3c29dec9" translate="yes" xml:space="preserve">
          <source>Does &lt;strong&gt;not&lt;/strong&gt; declare components.</source>
          <target state="translated">コンポーネントを宣言し&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7cbd179f94380994e248d01aed9e9b9bcf8589a6" translate="yes" xml:space="preserve">
          <source>Does NOT alter text nodes inside HTML tags such as &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;a href=&quot;../forms/defaultvalueaccessor&quot;&gt;textarea&lt;/a&gt;&amp;gt;&lt;/code&gt;, where whitespace characters are significant.</source>
          <target state="translated">空白文字が重要な &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;&lt;a href=&quot;../forms/defaultvalueaccessor&quot;&gt;textarea&lt;/a&gt;&amp;gt;&lt;/code&gt; などのHTMLタグ内のテキストノードは変更しません。</target>
        </trans-unit>
        <trans-unit id="624064fe82af064c5846c4c65db2781b410f7f8b" translate="yes" xml:space="preserve">
          <source>Does not retrieve elements or directives that are in other components' templates, since a component's template is always a black box to its ancestors.</source>
          <target state="translated">他のコンポーネントのテンプレートにある要素やディレクティブを取得しません。</target>
        </trans-unit>
        <trans-unit id="6ffc672431583e55590e23024e3b6210dab8403c" translate="yes" xml:space="preserve">
          <source>Does not support configuration.</source>
          <target state="translated">設定をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="c74588ae83c3abe096ca0998ef59559ef0320224" translate="yes" xml:space="preserve">
          <source>Does not support parent-child relationship selectors.</source>
          <target state="translated">親子関係セレクタをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="c2c19c3e51742058705ab287b418c0f553709384" translate="yes" xml:space="preserve">
          <source>Doing so adds clarity to the code. But it's not technically necessary. Although &lt;code&gt;AlexComponent&lt;/code&gt; has a &lt;code&gt;name&lt;/code&gt; property, as required by its &lt;code&gt;Base&lt;/code&gt; class, its class signature doesn't mention &lt;code&gt;Parent&lt;/code&gt;.</source>
          <target state="translated">これにより、コードが明確になります。ただし、技術的には必要ありません。が &lt;code&gt;AlexComponent&lt;/code&gt; が持っている &lt;code&gt;name&lt;/code&gt; プロパティをそのことにより、必要に応じて、 &lt;code&gt;Base&lt;/code&gt; クラス、そのクラス署名は言及していない &lt;code&gt;Parent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="651ab4cdc0cde42e12d6952e46d048642d9f36c3" translate="yes" xml:space="preserve">
          <source>Doing this could break lazy-loading into currently running apps, especially if the lazy-loaded chunks use filenames with hashes, which change every version.</source>
          <target state="translated">特に、遅延ロードされたチャンクがハッシュ付きのファイル名を使用している場合は、バージョンごとに変更されます。</target>
        </trans-unit>
        <trans-unit id="fe17586b8fdcc1f1c069a1a6eebd32cd0d75b66c" translate="yes" xml:space="preserve">
          <source>DomSanitizer</source>
          <target state="translated">DomSanitizer</target>
        </trans-unit>
        <trans-unit id="3e53d3f18b0d8a00e18fd9ab729b7a8fae48cac5" translate="yes" xml:space="preserve">
          <source>DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing values to be safe to use in the different DOM contexts.</source>
          <target state="translated">DomSanitizer は、異なる DOM コンテキストで安全に使用できるように値をサニタイズすることで、クロスサイトスクリプティングセキュリティバグ (XSS)を防ぐのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="9b10914d8b0a097ace7176e8973f5c3dee92bb44" translate="yes" xml:space="preserve">
          <source>Domain</source>
          <target state="translated">Domain</target>
        </trans-unit>
        <trans-unit id="edc93410256fe4bcfcc1daf46c49efa65723ce0c" translate="yes" xml:space="preserve">
          <source>Domain feature modules are typically imported exactly once by a larger feature module.</source>
          <target state="translated">ドメインフィーチャモジュールは、通常、より大きなフィーチャモジュールによって一度だけインポートされます。</target>
        </trans-unit>
        <trans-unit id="4fce94c654a674f436b255450f8d45d5c2630c5f" translate="yes" xml:space="preserve">
          <source>Domain feature modules consist mostly of declarations. Only the top component is exported.</source>
          <target state="translated">ドメイン機能モジュールは、ほとんどが宣言で構成されています。トップコンポーネントだけがエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="7d1601315ef4f7067cbdc3059ff63048a59d715e" translate="yes" xml:space="preserve">
          <source>Domain feature modules deliver a user experience dedicated to a particular application domain like editing a customer or placing an order.</source>
          <target state="translated">ドメイン機能モジュールは、顧客の編集や注文など、特定のアプリケーションドメインに特化したユーザー体験を提供します。</target>
        </trans-unit>
        <trans-unit id="8dbbc2071a2038f14ccfa4a11eb9ba7f08805721" translate="yes" xml:space="preserve">
          <source>Domain feature modules rarely have providers. When they do, the lifetime of the provided services should be the same as the lifetime of the module.</source>
          <target state="translated">ドメイン機能モジュールにプロバイダが存在することはほとんどありません。その場合、提供されるサービスの有効期間はモジュールの有効期間と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ef770887f44abfda530598989a0cab61a80d18d4" translate="yes" xml:space="preserve">
          <source>Domain feature modules.</source>
          <target state="translated">ドメイン機能モジュール。</target>
        </trans-unit>
        <trans-unit id="cb3187aa0ca33ec2d7071c6bcfd338ee7a22f4bf" translate="yes" xml:space="preserve">
          <source>Domain-specific libraries</source>
          <target state="translated">ドメイン固有のライブラリ</target>
        </trans-unit>
        <trans-unit id="abde3fdb171993c14d3ae55105d06f6114f07e22" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t send a request if the value stays the same (rapidly hit a character, then backspace, for instance).</source>
          <target state="translated">値が変わらない場合はリクエストを送信しないでください（たとえば、文字をすばやく押してからバックスペースを押す）。</target>
        </trans-unit>
        <trans-unit id="93de9a249143adbeeeb82cbc813b9ce310ec9d8a" translate="yes" xml:space="preserve">
          <source>Don't ascend to ancestors of the node requesting injection.</source>
          <target state="translated">注入を要求するノードの祖先に昇天しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="ce77c0300b3a5f10444391a94340295523b51e8d" translate="yes" xml:space="preserve">
          <source>Don't bother re-exporting pure service modules. Pure service modules don't export &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes that another NgModule could use. For example, there's no point in re-exporting &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; because it doesn't export anything. Its only purpose is to add http service providers to the application as a whole.</source>
          <target state="translated">純粋なサービスモジュールを再エクスポートする必要はありません。ピュアサービスモジュールはエクスポートされません&lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;申告&lt;/a&gt;別NgModuleが使用できるというクラスを。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; は何もエクスポートしないため、再エクスポートしても意味がありません。その唯一の目的は、アプリケーション全体にhttpサービスプロバイダーを追加することです。</target>
        </trans-unit>
        <trans-unit id="6590e628737b5e6b0ef0760c4f85f662467acd91" translate="yes" xml:space="preserve">
          <source>Don't declare the following:</source>
          <target state="translated">次のように宣言してはいけません。</target>
        </trans-unit>
        <trans-unit id="9615d146789f79dc31aca9c405d7130f71c9e375" translate="yes" xml:space="preserve">
          <source>Don't do that here. If the &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value were &lt;code&gt;'prefix'&lt;/code&gt;, &lt;em&gt;every&lt;/em&gt; URL would match &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="translated">ここではそれをしないでください。場合 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; の値であった &lt;code&gt;'prefix'&lt;/code&gt; 、&lt;em&gt;すべての&lt;/em&gt; URLが一致してしまいます &lt;code&gt;''&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65a16276e33123e39c8a4d00d367506a93d1886b" translate="yes" xml:space="preserve">
          <source>Don't eagerly import something from a lazy-loaded module</source>
          <target state="translated">怠惰なモジュールから熱心に何かをインポートしないようにする</target>
        </trans-unit>
        <trans-unit id="41bb59a523c9daf81e4a26d6a2e69fa45bb7816d" translate="yes" xml:space="preserve">
          <source>Don't export the following:</source>
          <target state="translated">次のようにエクスポートしないでください。</target>
        </trans-unit>
        <trans-unit id="98def866f6784d12e1232d4ba1ac26d20f4f4320" translate="yes" xml:space="preserve">
          <source>Don't fetch data in a component constructor. You shouldn't worry that a new component will try to contact a remote server when created under test or before you decide to display it. Constructors should do no more than set the initial local variables to simple values.</source>
          <target state="translated">コンポーネントのコンストラクタでデータをフェッチしないようにしましょう。新しいコンポーネントがテスト中に作成されたときや、表示する前にリモートサーバに連絡しようとすることを心配する必要はありません。コンストラクタは、初期のローカル変数に単純な値を設定する程度にとどめてください。</target>
        </trans-unit>
        <trans-unit id="fc491bacf383f1a73e23a426a3e14781ff636809" translate="yes" xml:space="preserve">
          <source>Don't forget the asterisk (*) in front of &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. It's a critical part of the syntax.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; の前のアスタリスク（*）を忘れないでください。これは構文の重要な部分です。</target>
        </trans-unit>
        <trans-unit id="4f0559c481e0584bb38279fe9351ea488db1fca7" translate="yes" xml:space="preserve">
          <source>Don't forget the asterisk (*) in front of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. It's a critical part of the syntax.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; の前のアスタリスク（*）を忘れないでください。これは構文の重要な部分です。</target>
        </trans-unit>
        <trans-unit id="e5940c21ded73420d9560fb5d88d6ba510bc7cd5" translate="yes" xml:space="preserve">
          <source>Don't forget the asterisk (&lt;code&gt;*&lt;/code&gt;) in front of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. For more information on the asterisk, see the &lt;a href=&quot;structural-directives#the-asterisk--prefix&quot;&gt;asterisk (*) prefix&lt;/a&gt; section of &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; の前のアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）を忘れないでください。アスタリスクの詳細については、&lt;a href=&quot;structural-directives&quot;&gt;構造指令の&lt;/a&gt;&lt;a href=&quot;structural-directives#the-asterisk--prefix&quot;&gt;アスタリスク（*）接頭辞&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c9d7069436c420884018ebec9bd644a89641d14d" translate="yes" xml:space="preserve">
          <source>Don't forget the leading asterisk (*) in &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. It is an essential part of the syntax. For more information, see the &lt;a href=&quot;template-syntax#ngFor&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; の先頭のアスタリスク（*）を忘れないでください。構文の重要な部分です。詳細については、「&lt;a href=&quot;template-syntax#ngFor&quot;&gt;テンプレートの構文&lt;/a&gt;」ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="2f88961494e42906518ac773630f15b9ea4c9613" translate="yes" xml:space="preserve">
          <source>Don't forget the leading asterisk (*) in &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. It is an essential part of the syntax. Read more about &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; in the &lt;a href=&quot;template-syntax#ngIf&quot;&gt;ngIf section&lt;/a&gt; of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; の先頭のアスタリスク（*）を忘れないでください。構文の重要な部分です。詳細読み &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; をし、 &lt;code&gt;*&lt;/code&gt; で&lt;a href=&quot;template-syntax#ngIf&quot;&gt;ngIfセクション&lt;/a&gt;の&lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt;ページ。</target>
        </trans-unit>
        <trans-unit id="240c178f010ce6adf5d28fb137f1d1e68a75490c" translate="yes" xml:space="preserve">
          <source>Don't prefix &lt;code&gt;output&lt;/code&gt; properties</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; プロパティの前に付けない</target>
        </trans-unit>
        <trans-unit id="8b73753946ee9fbedb2c567c98f11e350b60fde4" translate="yes" xml:space="preserve">
          <source>Don't provide any template or style encapsulation.</source>
          <target state="translated">テンプレートやスタイルのカプセル化を提供しないでください。</target>
        </trans-unit>
        <trans-unit id="034cd612a1e6136ca10cbef73016d80fa0900bab" translate="yes" xml:space="preserve">
          <source>Don't verify connected clients are part of allowed hosts.</source>
          <target state="translated">接続されているクライアントが許可されているホストの一部であることを確認しないでください。</target>
        </trans-unit>
        <trans-unit id="80b118003323fb9fdf485b6bd6d8bdfcc8308676" translate="yes" xml:space="preserve">
          <source>Down the road, you can inject a data service to get and save real data or perhaps expose these properties as inputs and outputs (see &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;Input and output properties&lt;/a&gt; on the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page) for binding to a parent component. This is not a concern now and these future changes won't affect the form.</source>
          <target state="translated">道を、あなたが取得し、実際のデータを保存したり、おそらく入力と出力（参照としてこれらのプロパティを公開するデータサービスを注入することができ&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;、入力と出力の性質&lt;/a&gt;上の&lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt;親コンポーネントへの結合についてのページを）。これは現在問題ではなく、これらの将来の変更はフォームに影響しません。</target>
        </trans-unit>
        <trans-unit id="0ccbe0bf2be8bc3e6b41de6c08f0a1498a381e54" translate="yes" xml:space="preserve">
          <source>Downgrading multiple modules</source>
          <target state="translated">複数のモジュールのダウングレード</target>
        </trans-unit>
        <trans-unit id="a479c9c34e878d07b4d67a73a48f432ad7dc53c8" translate="yes" xml:space="preserve">
          <source>Download</source>
          <target state="translated">Download</target>
        </trans-unit>
        <trans-unit id="39c131f45fab5187e42e1e465465b4202e919c7c" translate="yes" xml:space="preserve">
          <source>Download and install the latest &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=48593&quot;&gt;TypeScript for Visual Studio 2015&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=48593&quot;&gt;Visual Studio 2015の&lt;/a&gt;最新のTypeScriptをダウンロードしてインストールします。</target>
        </trans-unit>
        <trans-unit id="b21a44d0dea536c166264bb02f56718f7d476d92" translate="yes" xml:space="preserve">
          <source>Download only</source>
          <target state="translated">ダウンロードのみ</target>
        </trans-unit>
        <trans-unit id="55fd9611f7c571037e9909869ce233197def6aae" translate="yes" xml:space="preserve">
          <source>Download the library schematics project for a completed example of the steps below.</source>
          <target state="translated">ライブラリ回路図プロジェクトをダウンロードして、以下の手順の完成例をご覧ください。</target>
        </trans-unit>
        <trans-unit id="bea9854a0974d8c207fb940eb07b3deedb9b02fd" translate="yes" xml:space="preserve">
          <source>Driver state</source>
          <target state="translated">ドライバの状態</target>
        </trans-unit>
        <trans-unit id="ab8e2234ed8257af73e27e05dd2d529167ccaf7d" translate="yes" xml:space="preserve">
          <source>Duplicate the &lt;code&gt;&amp;lt;&lt;a href=&quot;i18n&quot;&gt;source&lt;/a&gt;/&amp;gt;&lt;/code&gt; tag, rename it &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt;, and then replace its content with the French greeting. If you were working with a more complex translation, you could use the information and context provided by the source, description, and meaning elements to guide your selection of the appropriate French translation.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;a href=&quot;i18n&quot;&gt;source&lt;/a&gt;/&amp;gt;&lt;/code&gt; タグを複製し、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; の名前を変更してから、その内容をフランス語の挨拶に置き換えます。より複雑な翻訳を使用している場合は、ソース、説明、および意味要素によって提供される情報とコンテキストを使用して、適切なフランス語翻訳の選択をガイドできます。</target>
        </trans-unit>
        <trans-unit id="c9bd84cdbb4cc235c347080036b1ba9eb49d0ce1" translate="yes" xml:space="preserve">
          <source>Duration and delay are expressed as a number and optional time unit, such as &quot;1s&quot; or &quot;10ms&quot; for one second and 10 milliseconds, respectively. The default unit is milliseconds.</source>
          <target state="translated">持続時間と遅延時間は、それぞれ1秒、10ミリ秒の場合は「1s」や「10ms」のように、数値と任意の時間単位で表されます。デフォルトの単位はミリ秒です。</target>
        </trans-unit>
        <trans-unit id="bc644b2d562cbf3f13865f41e46fce4f7a86d20e" translate="yes" xml:space="preserve">
          <source>During TypeScript conversion no changes are strictly necessary. But it may be a good idea to convert the unit test code into TypeScript as well.</source>
          <target state="translated">TypeScriptへの変換中は、厳密には何も変更する必要はありません。しかし、ユニットテストのコードをTypeScriptに変換するのは良いアイデアかもしれません。</target>
        </trans-unit>
        <trans-unit id="d2adfdd8629e6ebc57fc1622f87096712d00503e" translate="yes" xml:space="preserve">
          <source>During TypeScript conversion, there is nothing to do to keep E2E tests working. But when you change the bootstrap to that of a Hybrid app, you must make a few changes.</source>
          <target state="translated">TypeScriptの変換中は、E2Eのテストを動作させ続けるために何もすることはありません。しかし、ブートストラップをハイブリッドアプリのそれに変更するときには、いくつかの変更をしなければなりません。</target>
        </trans-unit>
        <trans-unit id="c93ba65421200c8ce9c714d5433120cec0c210c4" translate="yes" xml:space="preserve">
          <source>During a transition, a new view is inserted directly after the old one and both elements appear on screen at the same time. To prevent this, apply additional styling to the host view, and to the removed and inserted child views. The host view must use relative positioning, and the child views must use absolute positioning. Adding styling to the views animates the containers in place, without the DOM moving things around.</source>
          <target state="translated">トランジション中に、新しいビューが古いビューの直後に挿入され、両方の要素が同時に画面に表示されます。これを防ぐには、ホストビューと、削除され挿入された子ビューに追加のスタイリングを適用します。ホストビューは相対位置を使用し、子ビューは絶対位置を使用する必要があります。ビューにスタイリングを追加することで、DOM が物を移動させずにコンテナをアニメーションさせることができます。</target>
        </trans-unit>
        <trans-unit id="7e2134e92266bcb5c8ab8f878ffaec17ab310443" translate="yes" xml:space="preserve">
          <source>During change detection, the &lt;code&gt;ngOnChanges&lt;/code&gt; lifecycle hook is called on the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; directive instance because the value of one of its inputs has changed.</source>
          <target state="translated">変更検出中に、いずれかの入力の値が変更されたため、 &lt;code&gt;ngOnChanges&lt;/code&gt; ライフサイクルフックが &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンスで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9edd1b9999956746c9f323ca67581f2b8c3fce33" translate="yes" xml:space="preserve">
          <source>During checkout, the app will prompt the user for a name and address. So that you can gather that information later, set the &lt;code&gt;checkoutForm&lt;/code&gt; property with a form model containing &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; fields, using the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;#&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;()&lt;/code&gt; method.</source>
          <target state="translated">チェックアウト時に、アプリはユーザーに名前と住所の入力を求めます。後でその情報を収集できるように、 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;#&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;()&lt;/code&gt; ＃&lt;a href=&quot;../api/animations/group&quot;&gt;group&lt;/a&gt;（）メソッドを使用して、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; フィールドを含むフォームモデルで &lt;code&gt;checkoutForm&lt;/code&gt; プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="4cb9093ab586cd348f47d9e6cf2bbfe140c681b4" translate="yes" xml:space="preserve">
          <source>During development, you typically use the &lt;code&gt;ng serve&lt;/code&gt; command to build, watch, and serve the application from local memory, using &lt;a href=&quot;https://webpack.js.org/guides/development/#webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;. When you are ready to deploy, however, you must use the &lt;code&gt;ng build&lt;/code&gt; command to build the app and deploy the build artifacts elsewhere.</source>
          <target state="translated">開発中、通常は &lt;code&gt;ng serve&lt;/code&gt; コマンドを使用して、&lt;a href=&quot;https://webpack.js.org/guides/development/#webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;を使用し、ローカルメモリからアプリケーションをビルド、監視、提供します。ただし、デプロイの準備ができたら、 &lt;code&gt;ng build&lt;/code&gt; コマンドを使用してアプリをビルドし、ビルドアーティファクトを他の場所にデプロイする必要があります。</target>
        </trans-unit>
        <trans-unit id="fae7cf56608f88866b26b0ef5fcc953914fd85c8" translate="yes" xml:space="preserve">
          <source>During each navigation, the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; emits navigation events through the &lt;code&gt;&lt;a href=&quot;../api/router/router#events&quot;&gt;Router.events&lt;/a&gt;&lt;/code&gt; property. These events range from when the navigation starts and ends to many points in between. The full list of navigation events is displayed in the table below.</source>
          <target state="translated">各ナビゲーション中に、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/router/router#events&quot;&gt;Router.events&lt;/a&gt;&lt;/code&gt; プロパティを通じてナビゲーションイベントを発行します。これらのイベントは、ナビゲーションの開始時と終了時から、その間の多くのポイントに及びます。下の表に、ナビゲーションイベントの完全なリストを示します。</target>
        </trans-unit>
        <trans-unit id="24ce380938e6c21372f9336593acfe39017a0043" translate="yes" xml:space="preserve">
          <source>During the process you'll learn how to apply the steps outlined in the &lt;a href=&quot;upgrade#preparation&quot;&gt;preparation guide&lt;/a&gt;. You'll align the application with Angular and also start writing in TypeScript.</source>
          <target state="translated">プロセス中に、&lt;a href=&quot;upgrade#preparation&quot;&gt;準備ガイドで&lt;/a&gt;概説されている手順を適用する方法を学びます。アプリケーションをAngularに合わせ、TypeScriptでの記述を開始します。</target>
        </trans-unit>
        <trans-unit id="e41271d97bfaa9855273d6170cf3c19d4e05bc1f" translate="yes" xml:space="preserve">
          <source>Dynamic Component Loader</source>
          <target state="translated">ダイナミックコンポーネントローダー</target>
        </trans-unit>
        <trans-unit id="a5fdad1da0c422ddbaedc42b6d8523a19935dd4a" translate="yes" xml:space="preserve">
          <source>Dynamic Components</source>
          <target state="translated">ダイナミックコンポーネント</target>
        </trans-unit>
        <trans-unit id="4fd12c3974ec0be44713c8ffa0c687638c292157" translate="yes" xml:space="preserve">
          <source>Dynamic Forms</source>
          <target state="translated">ダイナミックフォーム</target>
        </trans-unit>
        <trans-unit id="58bd26bb61ddef24bc329aa3b9da99eb3679b9b3" translate="yes" xml:space="preserve">
          <source>Dynamic Forms Guide</source>
          <target state="translated">ダイナミックフォームガイド</target>
        </trans-unit>
        <trans-unit id="2bc79dd70e34554001fab0a24198b892ffd956a8" translate="yes" xml:space="preserve">
          <source>Dynamic Template</source>
          <target state="translated">動的テンプレート</target>
        </trans-unit>
        <trans-unit id="5c188df063315960a8284608dfef5d7725223fee" translate="yes" xml:space="preserve">
          <source>Dynamic component loading</source>
          <target state="translated">動的なコンポーネントのローディング</target>
        </trans-unit>
        <trans-unit id="cdadcbd36fff4607a6954bb84c819d544af6edd5" translate="yes" xml:space="preserve">
          <source>Dynamic component loading is not common in most apps beyond the router. If you need to dynamically load components, you must add these components to the &lt;code&gt;entryComponents&lt;/code&gt; list yourself.</source>
          <target state="translated">動的コンポーネントの読み込みは、ルーター以外のほとんどのアプリでは一般的ではありません。コンポーネントを動的にロードする必要がある場合は、これらのコンポーネントを &lt;code&gt;entryComponents&lt;/code&gt; リストに自分で追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd0e82d54ffe53f8d72d2c99cb6529b8b8feb3fb" translate="yes" xml:space="preserve">
          <source>Dynamic controls using form arrays</source>
          <target state="translated">フォーム配列を使用した動的コントロール</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="952ea5c3a4bd5ddb1e84e339d6efb4b6b521651c" translate="yes" xml:space="preserve">
          <source>E (S)</source>
          <target state="translated">E(S</target>
        </trans-unit>
        <trans-unit id="3eda17458aac2e1c39c9e41ff906a98ea0cc80f0" translate="yes" xml:space="preserve">
          <source>E, EE &amp;amp; EEE</source>
          <target state="translated">E、EE、EEE</target>
        </trans-unit>
        <trans-unit id="73589e1476f9ea766e54b42e42ec4d4d0cbca3c2" translate="yes" xml:space="preserve">
          <source>E2E Tests</source>
          <target state="translated">E2Eテスト</target>
        </trans-unit>
        <trans-unit id="dd0bb31f998d693382c796a469b61591c81e45c3" translate="yes" xml:space="preserve">
          <source>E2E test that all children were instantiated and displayed as expected:</source>
          <target state="translated">すべての子がインスタンス化され、期待通りに表示されたことをE2Eテスト。</target>
        </trans-unit>
        <trans-unit id="372bb5d00eb17ebcfa920207dee8bf8fee7270ee" translate="yes" xml:space="preserve">
          <source>E2E tests are difficult to write and perform poorly compared to unit tests. They break easily, often due to changes or misbehavior far removed from the site of breakage.</source>
          <target state="translated">E2E テストは、ユニットテストと比較して、書くのが難しく、パフォーマンスが悪いです。これらのテストは簡単に壊れてしまい、多くの場合、壊れた場所から遠く離れた場所での変更や誤動作が原因となっています。</target>
        </trans-unit>
        <trans-unit id="0a76346e352bd2cb73972ed43857bec080631a12" translate="yes" xml:space="preserve">
          <source>E2E tests are great for high-level validation of the entire system. But they can't give you the comprehensive test coverage that you'd expect from unit tests.</source>
          <target state="translated">E2E テストは、システム全体の高レベルの検証には最適です。しかし、ユニットテストに期待するような包括的なテストカバレッジを提供することはできません。</target>
        </trans-unit>
        <trans-unit id="d102c6f6f30bc1655cbe872e545e462853df6b3c" translate="yes" xml:space="preserve">
          <source>E2E tests can't easily reveal how your components behave when things go wrong, such as missing or bad data, lost connectivity, and remote service failures.</source>
          <target state="translated">E2Eテストでは、データの欠落や不良、接続性の喪失、リモートサービスの障害など、問題が発生したときにコンポーネントがどのように動作するかを簡単に明らかにすることはできません。</target>
        </trans-unit>
        <trans-unit id="0c4e4c7796289ac9278300d31192ad0146ac03c6" translate="yes" xml:space="preserve">
          <source>E2E tests for apps that update a database, send an invoice, or charge a credit card require special tricks and back-doors to prevent accidental corruption of remote resources. It can even be hard to navigate to the component you want to test.</source>
          <target state="translated">E2E テストでは、データベースの更新、請求書の送信、クレジットカードのチャージなどを行うアプリについて、リモートリソースの不慮の破損を防ぐための特別なトリックやバックドアが必要です。テストしたいコンポーネントに移動するのが困難な場合もあります。</target>
        </trans-unit>
        <trans-unit id="589dbe67e40317e7eee2bcd85f1afbc0aa40a3e7" translate="yes" xml:space="preserve">
          <source>E2E tests of input property setter with empty and non-empty names:</source>
          <target state="translated">空の名前と空でない名前を持つ入力プロパティセッターのE2Eテスト。</target>
        </trans-unit>
        <trans-unit id="6d85b2d399967a027efc0d611a548da5bc48a920" translate="yes" xml:space="preserve">
          <source>ECMAScript</source>
          <target state="translated">ECMAScript</target>
        </trans-unit>
        <trans-unit id="bb41be0083d30940a15ed09539a8f13ac977b740" translate="yes" xml:space="preserve">
          <source>EEE (Sun)</source>
          <target state="translated">イーイーイー(日</target>
        </trans-unit>
        <trans-unit id="c49c34e2014a2da270eeae07d730726ffddd3196" translate="yes" xml:space="preserve">
          <source>EEEE</source>
          <target state="translated">EEEE</target>
        </trans-unit>
        <trans-unit id="9169dd1fe0dd70dd346d458bd301545612f3548d" translate="yes" xml:space="preserve">
          <source>EEEE (Sunday)</source>
          <target state="translated">イーイーイーイー(日曜</target>
        </trans-unit>
        <trans-unit id="af660090b01149c4cd9581bca5e30ceaacc675be" translate="yes" xml:space="preserve">
          <source>EEEEE</source>
          <target state="translated">EEEEE</target>
        </trans-unit>
        <trans-unit id="8a1d9b464a3fd8c9e5f06af5b43005029d7c16b1" translate="yes" xml:space="preserve">
          <source>EEEEEE</source>
          <target state="translated">EEEEEE</target>
        </trans-unit>
        <trans-unit id="075901aadfe01a2f6e5ff5be94321e8718fe731b" translate="yes" xml:space="preserve">
          <source>ES Target</source>
          <target state="translated">ESターゲット</target>
        </trans-unit>
        <trans-unit id="5be8585e8dda5d16a9d3e66f70a40dc596a018af" translate="yes" xml:space="preserve">
          <source>ES2015</source>
          <target state="translated">ES2015</target>
        </trans-unit>
        <trans-unit id="0970b9d03521f08c59aa318cd73a8b50d05da427" translate="yes" xml:space="preserve">
          <source>ES2015&lt;a href=&quot;browser-support#classlist&quot;&gt;classList&lt;/a&gt;</source>
          <target state="translated">ES2015&lt;a href=&quot;browser-support#classlist&quot;&gt;classList&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9473da121f41fb7b3b153d3793463561bba99a5e" translate="yes" xml:space="preserve">
          <source>ES5 Browserslist Result</source>
          <target state="translated">ES5 ブラウザリスト結果</target>
        </trans-unit>
        <trans-unit id="f84a7f9916385bc3b3297219fea98468f763a46d" translate="yes" xml:space="preserve">
          <source>ES7/array</source>
          <target state="translated">ES7/array</target>
        </trans-unit>
        <trans-unit id="da9a5dd5bd129c51e47a47b3272ca4e140e15e73" translate="yes" xml:space="preserve">
          <source>EVENT_MANAGER_PLUGINS</source>
          <target state="translated">EVENT_MANAGER_PLUGINS</target>
        </trans-unit>
        <trans-unit id="f9ce18d98faf53ec35f10c3730273055c75abee2" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; exposes a dependency injector with the specific instance of the directive attached to that element.</source>
          <target state="translated">各 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; は、その要素にアタッチされたディレクティブの特定のインスタンスを持つ依存関係インジェクターを公開します。</target>
        </trans-unit>
        <trans-unit id="286e0075a5fff4e5432d6dc93abd9ba356e6dba0" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; provides methods to traverse up and down the route tree to get information from parent, child and sibling routes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; の各 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; は、ルートツリーを上下に移動して親、子、兄弟ルートから情報を取得するメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="98ee5a57eab9498887f027356bcf579d28712aef" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; maps a URL &lt;code&gt;path&lt;/code&gt; to a component. There are &lt;em&gt;no leading slashes&lt;/em&gt; in the &lt;em&gt;path&lt;/em&gt;. The router parses and builds the final URL for you, allowing you to use both relative and absolute paths when navigating between application views.</source>
          <target state="translated">各 &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; はURL &lt;code&gt;path&lt;/code&gt; をコンポーネントにマップします。ありません&lt;em&gt;何も有数スラッシュ&lt;/em&gt;で&lt;em&gt;パス&lt;/em&gt;。ルーターが最終的なURLを解析して構築するため、アプリケーションビュー間を移動するときに相対パスと絶対パスの両方を使用できます。</target>
        </trans-unit>
        <trans-unit id="b838c62689224b4ca27eea5c7a87704e8a67b4b9" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; provides an own &lt;code&gt;&lt;a href=&quot;compiler&quot;&gt;Compiler&lt;/a&gt;&lt;/code&gt; to its injector, that will use the directives/pipes of the ng module for compilation of components.</source>
          <target state="translated">各 &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は独自の &lt;code&gt;&lt;a href=&quot;compiler&quot;&gt;Compiler&lt;/a&gt;&lt;/code&gt; をインジェクタに提供し、コンポーネントのコンパイルにngモジュールのディレクティブ/パイプを使用します。</target>
        </trans-unit>
        <trans-unit id="afd85145d04944e976611f2c1d57bdb27b0e7791" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;HeroBioComponent&lt;/code&gt; can edit a single hero's biography. &lt;code&gt;HeroBioComponent&lt;/code&gt; relies on &lt;code&gt;HeroCacheService&lt;/code&gt; to fetch, cache, and perform other persistence operations on that hero.</source>
          <target state="translated">各 &lt;code&gt;HeroBioComponent&lt;/code&gt; は、単一のヒーローの伝記を編集できます。 &lt;code&gt;HeroBioComponent&lt;/code&gt; は、 &lt;code&gt;HeroCacheService&lt;/code&gt; に依存して、そのヒーローに対して他の永続化操作をフェッチ、キャッシュ、および実行します。</target>
        </trans-unit>
        <trans-unit id="f4731307364ab8c0ca00233e6ebe2ff1235d5b46" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;build&lt;/code&gt; target configuration can include an &lt;code&gt;assets&lt;/code&gt; array that lists files or folders you want to copy as-is when building your project. By default, the &lt;code&gt;src/assets/&lt;/code&gt; folder and &lt;code&gt;src/favicon.ico&lt;/code&gt; are copied over.</source>
          <target state="translated">各 &lt;code&gt;build&lt;/code&gt; ターゲット構成には、プロジェクトのビルド時にそのままコピーするファイルまたはフォルダーをリストする &lt;code&gt;assets&lt;/code&gt; 配列を含めることができます。デフォルトでは、 &lt;code&gt;src/assets/&lt;/code&gt; フォルダーと &lt;code&gt;src/favicon.ico&lt;/code&gt; がコピーされます。</target>
        </trans-unit>
        <trans-unit id="bce41e0b2ee4443f7cf1479faf944656cbc11207" translate="yes" xml:space="preserve">
          <source>Each DOM element on the page is owned exactly by one framework. Whichever framework instantiated the element is the owner. Each framework only updates/interacts with its own DOM elements and ignores others.</source>
          <target state="translated">ページ上の各 DOM 要素は、1 つのフレームワークによって正確に所有されます。要素のインスタンスを作成したフレームワークが所有者です。各フレームワークは自身の DOM 要素を更新/操作するだけで、他の要素は無視されます。</target>
        </trans-unit>
        <trans-unit id="90ab67a33781d98870fed308de0b4ac790f7eec7" translate="yes" xml:space="preserve">
          <source>Each additional app that you create with &lt;code&gt;ng generate application&lt;/code&gt; has a corresponding end-to-end test project, with its own configuration section. When you create a library project with &lt;code&gt;ng generate library&lt;/code&gt;, the library project is also added to the &lt;code&gt;projects&lt;/code&gt; section.</source>
          <target state="translated">&lt;code&gt;ng generate application&lt;/code&gt; 作成する追加の各アプリケーションには、独自の構成セクションを持つ、対応するエンドツーエンドのテストプロジェクトがあります。 &lt;code&gt;ng generate library&lt;/code&gt; を使用してライブラリプロジェクトを作成すると、ライブラリプロジェクトも &lt;code&gt;projects&lt;/code&gt; セクションに追加されます。</target>
        </trans-unit>
        <trans-unit id="fc1c3c3aef455453fc117482bdb289b01b6eead4" translate="yes" xml:space="preserve">
          <source>Each area has its own area root component.</source>
          <target state="translated">各エリアには、それぞれのエリアルート成分があります。</target>
        </trans-unit>
        <trans-unit id="7935d876ab66da316599115544c04f9d078334fb" translate="yes" xml:space="preserve">
          <source>Each area root component has its own router outlet and child routes.</source>
          <target state="translated">各エリアルートコンポーネントは、独自のルーターアウトレットと子ルートを持っています。</target>
        </trans-unit>
        <trans-unit id="78e59ef6547ad3c662e30fa847b04b1ddce59b61" translate="yes" xml:space="preserve">
          <source>Each asset group specifies both a group of resources and a policy that governs them. This policy determines when the resources are fetched and what happens when changes are detected.</source>
          <target state="translated">各アセットグループは、リソースのグループとそれを管理するポリシーの両方を指定します。このポリシーは、リソースがいつ取得されるか、変更が検出されたときに何が起こるかを決定します。</target>
        </trans-unit>
        <trans-unit id="c151d68718ffef6d0eacffc4944821511f35e949" translate="yes" xml:space="preserve">
          <source>Each binding gets its own pipe instance.</source>
          <target state="translated">各バインディングは、それ自身のパイプインスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="d091b6893ccf3885f59067c45c1301d7ee5ee6a4" translate="yes" xml:space="preserve">
          <source>Each bootstrapped component is the base of its own tree of components. Inserting a bootstrapped component usually triggers a cascade of component creations that fill out that tree.</source>
          <target state="translated">各ブートストラップされたコンポーネントは、それ自身のコンポーネント・ツリーのベースとなります。ブートストラップされたコンポーネントを挿入すると、通常は、そのツリーを埋めるコンポーネント作成のカスケードが発生します。</target>
        </trans-unit>
        <trans-unit id="26e7f477d783d9a514df967e209611ec60a31a55" translate="yes" xml:space="preserve">
          <source>Each budget entry is a JSON object with the following properties:</source>
          <target state="translated">各予算項目は、以下のプロパティを持つJSONオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="0a8b076ccfe8cc8605884f50d353ce0d05ae0da5" translate="yes" xml:space="preserve">
          <source>Each component has a &lt;em&gt;host view&lt;/em&gt;, and can have additional &lt;em&gt;embedded views&lt;/em&gt;. An embedded view in component A is the host view of component B, which can in turn have embedded view. This means that there is a &lt;a href=&quot;glossary#view-hierarchy&quot;&gt;view hierarchy&lt;/a&gt; for each component, of which that component's host view is the root.</source>
          <target state="translated">各コンポーネントには&lt;em&gt;ホストビューがあり&lt;/em&gt;、追加の&lt;em&gt;埋め込みビューを&lt;/em&gt;持つことができ&lt;em&gt;ます&lt;/em&gt;。コンポーネントAの埋め込みビューは、コンポーネントBのホストビューであり、埋め込みビューを持つことができます。これは、各コンポーネントの&lt;a href=&quot;glossary#view-hierarchy&quot;&gt;ビュー階層&lt;/a&gt;があり、そのコンポーネントのホストビューがルートであることを意味します。</target>
        </trans-unit>
        <trans-unit id="cdd629c7b0c6876a713f0fae8f947f5dcd9bddb7" translate="yes" xml:space="preserve">
          <source>Each component, service, and filter is in its own source file, as per the &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility&quot;&gt;Rule of 1&lt;/a&gt;.</source>
          <target state="translated">1の&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility&quot;&gt;ルール&lt;/a&gt;に従って、各コンポーネント、サービス、およびフィルターは独自のソースファイルにあります。</target>
        </trans-unit>
        <trans-unit id="a543edae922fea0770d08c1fee4f1f41525fd010" translate="yes" xml:space="preserve">
          <source>Each control is explicitly created in the component class by creating a &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance manually or with &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">各制御は、明示的に作成することにより、コンポーネントクラスに作成され &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; の手動またはでインスタンスを &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8d35b3156ab5bb60d84a0eef93b291d2f5f2608" translate="yes" xml:space="preserve">
          <source>Each definition translates to a &lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt; object which has two things: a &lt;code&gt;path&lt;/code&gt;, the URL path segment for this route; and a &lt;code&gt;component&lt;/code&gt;, the component associated with this route.</source>
          <target state="translated">それぞれの定義はに変換&lt;a href=&quot;../api/router/route&quot;&gt;ルート&lt;/a&gt;二つ持つオブジェクト： &lt;code&gt;path&lt;/code&gt; 、このルートのURLパスセグメントを、そして &lt;code&gt;component&lt;/code&gt; 、このルートに関連付けられているコンポーネント。</target>
        </trans-unit>
        <trans-unit id="6921b51ac3141eb9836e22d8d2b5c211ef71554c" translate="yes" xml:space="preserve">
          <source>Each downgraded component/injectable needs to be explicitly associated with a downgraded module. See &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; for more details.</source>
          <target state="translated">ダウングレードされた各コンポーネント/インジェクタブルは、ダウングレードされたモジュールに明示的に関連付ける必要があります。詳細については、 &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="964518f2ab2a578d6482970abbf1f6d41de5a43c" translate="yes" xml:space="preserve">
          <source>Each feature area resides in its own folder.</source>
          <target state="translated">各機能領域は、それぞれ独自のフォルダに存在します。</target>
        </trans-unit>
        <trans-unit id="579cdc1ac54406dd19dd62a973087397898ead99" translate="yes" xml:space="preserve">
          <source>Each feature has its own Angular feature module.</source>
          <target state="translated">各機能にはそれぞれ独自のAngular機能モジュールがあります。</target>
        </trans-unit>
        <trans-unit id="c1c22426d18f303c0bc0731b497267fdc477bb27" translate="yes" xml:space="preserve">
          <source>Each guideline describes either a good or bad practice, and all have a consistent presentation.</source>
          <target state="translated">各ガイドラインには、良いことも悪いことも記載されており、すべてのガイドラインには一貫した表現がなされています。</target>
        </trans-unit>
        <trans-unit id="b46884375c2f4ef07db5d04e100e45c7f831280d" translate="yes" xml:space="preserve">
          <source>Each hero in the heroes list should have a delete button.</source>
          <target state="translated">ヒーローリストの各ヒーローには削除ボタンがあるはずです。</target>
        </trans-unit>
        <trans-unit id="bd0fa650708acb7f6ffbe8e7c1672a65c1d77539" translate="yes" xml:space="preserve">
          <source>Each input element has a &lt;code&gt;name&lt;/code&gt; property that is required by Angular forms to register the control with the form.</source>
          <target state="translated">各入力要素には、Angularフォームがコントロールをフォームに登録するために必要な &lt;code&gt;name&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="8991cfa20d0f3cc365961eb7850ff907e46e7442" translate="yes" xml:space="preserve">
          <source>Each input element has an &lt;code&gt;id&lt;/code&gt; property that is used by the &lt;code&gt;label&lt;/code&gt; element's &lt;code&gt;for&lt;/code&gt; attribute to match the label to its input control.</source>
          <target state="translated">各入力要素には、ラベルをその入力コントロールに一致させる &lt;code&gt;for&lt;/code&gt; &lt;code&gt;label&lt;/code&gt; 要素のfor属性によって使用される &lt;code&gt;id&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="70cb6ceab5e15f47d5f692e35d9b740e519a062b" translate="yes" xml:space="preserve">
          <source>Each interface has a single hook method whose name is the interface name prefixed with &lt;code&gt;ng&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt; interface has a hook method named &lt;code&gt;ngOnInit()&lt;/code&gt; that Angular calls shortly after creating the component:</source>
          <target state="translated">各インターフェースには、名前が &lt;code&gt;ng&lt;/code&gt; で始まるインターフェース名である単一のフックメソッドがあります。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt; インターフェースには、コンポーネントの作成直後にAngularが呼び出す &lt;code&gt;ngOnInit()&lt;/code&gt; という名前のフックメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="88ebe07ff5ed7d63169a91947c0983cd36bde1c0" translate="yes" xml:space="preserve">
          <source>Each interface has a single hook method whose name is the interface name prefixed with &lt;code&gt;ng&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt; interface has a hook method named &lt;code&gt;ngOnInit&lt;/code&gt;.</source>
          <target state="translated">各インターフェースには、名前が &lt;code&gt;ng&lt;/code&gt; で始まるインターフェース名である単一のフックメソッドがあります。たとえば、 &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt; インターフェースには &lt;code&gt;ngOnInit&lt;/code&gt; という名前のフックメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="736fa5d5b88f601a4b68d26da49837f873c9a8fb" translate="yes" xml:space="preserve">
          <source>Each named configuration can have defaults for any of the options that apply to the various &lt;a href=&quot;glossary#target&quot;&gt;builder targets&lt;/a&gt;, such as &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, and &lt;code&gt;test&lt;/code&gt;. The &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;&lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, and &lt;code&gt;test&lt;/code&gt; commands can then replace files with appropriate versions for your intended target environment.</source>
          <target state="translated">名前付きの各構成には、 &lt;code&gt;build&lt;/code&gt; 、 &lt;code&gt;serve&lt;/code&gt; 、 &lt;code&gt;test&lt;/code&gt; などのさまざまな&lt;a href=&quot;glossary#target&quot;&gt;ビルダーターゲットに&lt;/a&gt;適用されるオプションのデフォルトを設定できます。&lt;a href=&quot;cli&quot;&gt;角度CLIの&lt;/a&gt; &lt;code&gt;build&lt;/code&gt; 、 &lt;code&gt;serve&lt;/code&gt; 、および &lt;code&gt;test&lt;/code&gt; コマンドは、あなたの意図したターゲット環境に適したバージョンのファイルを置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="15e01d9b0088c32204d172b9d23d1982bfb25d78" translate="yes" xml:space="preserve">
          <source>Each named schematic in the collection has the following main parts.</source>
          <target state="translated">コレクション内の各名前付き回路図には、以下の主要部分があります。</target>
        </trans-unit>
        <trans-unit id="329b32865b1001d3b4b288fac86edd40b02aa8fb" translate="yes" xml:space="preserve">
          <source>Each nested &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; can present a custom message for one of the possible validation errors. There are messages for &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;forbiddenName&lt;/code&gt;.</source>
          <target state="translated">ネストされた各 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、考えられる検証エラーの1つに対してカスタムメッセージを表示できます。以下のためのメッセージがある &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;forbiddenName&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="5185bf611cc0f1996c1da943dea939467c034e5d" translate="yes" xml:space="preserve">
          <source>Each of these subjects is introduced in more detail in the following pages.</source>
          <target state="translated">それぞれの科目については、以下のページで詳しく紹介しています。</target>
        </trans-unit>
        <trans-unit id="492742972cab7240263d9a307231b34fd42acbd2" translate="yes" xml:space="preserve">
          <source>Each operator works as follows:</source>
          <target state="translated">各演算子は以下のように動作します。</target>
        </trans-unit>
        <trans-unit id="ee30bb9b05511cb5ca56d1dc673406c8457ba50a" translate="yes" xml:space="preserve">
          <source>Each option associates key with a type, description, and optional alias. The type defines the shape of the value you expect, and the description is displayed when the user requests usage help for your schematic.</source>
          <target state="translated">各オプションは、キーにタイプ、説明、オプションのエイリアスを関連付けます。type は期待する値の形状を定義し、description はユーザが回路図の使用法を要求した際に表示されます。</target>
        </trans-unit>
        <trans-unit id="bb6fa6715460582b0c4be7a4edfd3b729267ae3d" translate="yes" xml:space="preserve">
          <source>Each outlet can have a unique name, determined by the optional &lt;code&gt;name&lt;/code&gt; attribute. The name cannot be set or changed dynamically. If not set, default value is &quot;primary&quot;.</source>
          <target state="translated">各コンセントには、オプションの &lt;code&gt;name&lt;/code&gt; 属性によって決定される一意の名前を付けることができます。名前を動的に設定または変更することはできません。設定しない場合、デフォルト値は「primary」です。</target>
        </trans-unit>
        <trans-unit id="61c9bd127991ee917708f24212eb86c5a2ff2569" translate="yes" xml:space="preserve">
          <source>Each override method takes a &lt;code&gt;&lt;a href=&quot;../api/core/testing/metadataoverride&quot;&gt;MetadataOverride&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the kind of metadata appropriate to the method, that is, the parameter of an &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">各オーバーライドメソッドがかかり &lt;code&gt;&lt;a href=&quot;../api/core/testing/metadataoverride&quot;&gt;MetadataOverride&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; は、のパラメータである方法に関するメタデータを適切なの一種である &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 、又は &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2688d78ae270bd7ee215561bf70670e97db0be1" translate="yes" xml:space="preserve">
          <source>Each pipe instance caches its own URL and data.</source>
          <target state="translated">各パイプインスタンスは、独自の URL とデータをキャッシュします。</target>
        </trans-unit>
        <trans-unit id="8406cc7112c99d403e6f12dc6489847bf043bfb4" translate="yes" xml:space="preserve">
          <source>Each pipe instance only calls the server once.</source>
          <target state="translated">各パイプインスタンスは一度だけサーバーを呼び出します。</target>
        </trans-unit>
        <trans-unit id="8e5917c5d975c851fea3302a396d10e8bcc17992" translate="yes" xml:space="preserve">
          <source>Each product in the list displays the same way, one after another on the page. To iterate over the predefined list of products, put the &lt;code&gt;*&lt;a href=&quot;api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive on a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, as follows:</source>
          <target state="translated">リスト内の各製品は、ページ上で次々と同じように表示されます。事前定義された製品リストを反復処理するには、 &lt;code&gt;*&lt;a href=&quot;api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ように* ngForディレクティブを &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に配置します。</target>
        </trans-unit>
        <trans-unit id="f697215d7bc3aea1a76723758a5870daf7b4cc95" translate="yes" xml:space="preserve">
          <source>Each product now has a &quot;Share&quot; button:</source>
          <target state="translated">各商品に「シェア」ボタンが追加されました。</target>
        </trans-unit>
        <trans-unit id="ec66a0f102f02c3d9406b868fa0c9eeceb3d7411" translate="yes" xml:space="preserve">
          <source>Each request results in the appropriate view for the requested route. The &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function renders the view within the &lt;code&gt;&amp;lt;app&amp;gt;&lt;/code&gt; tag of the template, creating a finished HTML page for the client.</source>
          <target state="translated">各リクエストは、リクエストされたルートに適切なビューをもたらします。 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; 関数は、範囲内のビューをレンダリングする &lt;code&gt;&amp;lt;app&amp;gt;&lt;/code&gt; クライアントのために、完成したHTMLページを作成し、テンプレートのタグ。</target>
        </trans-unit>
        <trans-unit id="b5e7f38d5576f468babd40cdb4dbdec27a0c68b2" translate="yes" xml:space="preserve">
          <source>Each routing module augments the route configuration &lt;em&gt;in the order of import&lt;/em&gt;. If you list &lt;code&gt;AppRoutingModule&lt;/code&gt; first, the wildcard route will be registered &lt;em&gt;before&lt;/em&gt; the hero routes. The wildcard route&amp;mdash;which matches &lt;em&gt;every&lt;/em&gt; URL&amp;mdash;will intercept the attempt to navigate to a hero route.</source>
          <target state="translated">各ルーティングモジュールは、&lt;em&gt;インポート順に&lt;/em&gt;ルート構成&lt;em&gt;を&lt;/em&gt;拡張します。 &lt;code&gt;AppRoutingModule&lt;/code&gt; を最初にリストすると、ワイルドカードルートがヒーロールートの&lt;em&gt;前&lt;/em&gt;に登録されます。ワイルドカードルート（&lt;em&gt;すべての&lt;/em&gt; URLに一致）は、ヒーロールートに移動する試みを阻止します。</target>
        </trans-unit>
        <trans-unit id="168c2ec77caf801e972506d1e6e8beb63b52436b" translate="yes" xml:space="preserve">
          <source>Each schematic runs in a context, represented by a &lt;code&gt;SchematicContext&lt;/code&gt; object.</source>
          <target state="translated">各回路図は、 &lt;code&gt;SchematicContext&lt;/code&gt; オブジェクトによって表されるコンテキストで実行されます。</target>
        </trans-unit>
        <trans-unit id="4825447444d4e18f42f91e26d03b905e996c72be" translate="yes" xml:space="preserve">
          <source>Each script tag has a &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; or &lt;code&gt;nomodule&lt;/code&gt; attribute. Browsers with native support for ES modules only load the scripts with the &lt;code&gt;module&lt;/code&gt; type attribute and ignore scripts with the &lt;code&gt;nomodule&lt;/code&gt; attribute. Legacy browsers only load the scripts with the &lt;code&gt;nomodule&lt;/code&gt; attribute, and ignore the script tags with the &lt;code&gt;module&lt;/code&gt; type that load ES modules.</source>
          <target state="translated">各スクリプトタグには、 &lt;code&gt;type=&quot;module&quot;&lt;/code&gt; または &lt;code&gt;nomodule&lt;/code&gt; 属性があります。ESモジュールをネイティブでサポートしているブラウザは、 &lt;code&gt;module&lt;/code&gt; タイプ属性のスクリプトのみをロードし、 &lt;code&gt;nomodule&lt;/code&gt; 属性のスクリプトは無視します。レガシーブラウザは、 &lt;code&gt;nomodule&lt;/code&gt; 属性を持つスクリプトのみをロードし、ESモジュールをロードする &lt;code&gt;module&lt;/code&gt; タイプのスクリプトタグを無視します。</target>
        </trans-unit>
        <trans-unit id="e75bf221834c2b1fb6b2d823795b2526d503b732" translate="yes" xml:space="preserve">
          <source>Each secondary outlet has its own navigation, independent of the navigation driving the primary outlet. Changing a current route that displays in the primary outlet has no effect on the popup outlet. That's why the popup stays visible as you navigate among the crises and heroes.</source>
          <target state="translated">各セカンダリアウトレットには、プライマリアウトレットを駆動するナビゲーションとは独立した独自のナビゲーションがあります。プライマリーアウトレットに表示されている現在のルートを変更しても、ポップアップアウトレットには何の影響もありません。そのため、危機とヒーローの間をナビゲートしても、ポップアップは表示されたままです。</target>
        </trans-unit>
        <trans-unit id="299e7290b3f2a8d07e58e0a4f9e3128676fb22d4" translate="yes" xml:space="preserve">
          <source>Each section of the configuration file is described below.</source>
          <target state="translated">以下、設定ファイルの各セクションについて説明します。</target>
        </trans-unit>
        <trans-unit id="e9227a7aba828bec8cc740a7da8b3012ad3a4eca" translate="yes" xml:space="preserve">
          <source>Each spy's birth and death marks the birth and death of the attached hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an entry in the &lt;em&gt;Hook Log&lt;/em&gt; as seen here:</source>
          <target state="translated">各スパイの誕生と死マーク添付ヒーローの誕生と死 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; のエントリを持つ&lt;em&gt;フックログ&lt;/em&gt;ここに見られるように：</target>
        </trans-unit>
        <trans-unit id="783713692d2fe672a17ac40ef0511469cdd78009" translate="yes" xml:space="preserve">
          <source>Each string in the array defines some CSS for this component.</source>
          <target state="translated">配列内の各文字列は、このコンポーネントのCSSを定義します。</target>
        </trans-unit>
        <trans-unit id="48476a09dad5d99e11d658a9501cc06cfe59f311" translate="yes" xml:space="preserve">
          <source>Each switch-case statement contains an in-line HTML template or template reference that defines the subtree to be selected if the value of the match expression matches the value of the switch expression.</source>
          <target state="translated">各スイッチケース文には、マッチ式の値がスイッチ式の値と一致した場合に選択されるサブツリーを定義するインライン HTML テンプレートまたはテンプレート参照が含まれています。</target>
        </trans-unit>
        <trans-unit id="2fba55ede002bcad03ef30757908c0ebc006fda9" translate="yes" xml:space="preserve">
          <source>Each target object specifies the &lt;code&gt;builder&lt;/code&gt; for that target, which is the npm package for the tool that Architect runs. In addition, each target has an &lt;code&gt;options&lt;/code&gt; section that configures default options for the target, and a &lt;code&gt;configurations&lt;/code&gt; section that names and specifies alternative configurations for the target. See the example in &lt;a href=&quot;workspace-config#build-target&quot;&gt;Build target&lt;/a&gt; below.</source>
          <target state="translated">各ターゲットオブジェクトは、そのターゲットの &lt;code&gt;builder&lt;/code&gt; を指定します。これは、Architectが実行するツールのnpmパッケージです。さらに、各ターゲットには、ターゲットのデフォルトオプションを構成する &lt;code&gt;options&lt;/code&gt; セクションと、ターゲットの代替構成を指定および指定する &lt;code&gt;configurations&lt;/code&gt; セクションがあります。以下の&lt;a href=&quot;workspace-config#build-target&quot;&gt;ビルドターゲット&lt;/a&gt;の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="3ab19647e721dd81282422e89f7501369e20553f" translate="yes" xml:space="preserve">
          <source>Each tax return component has the following characteristics:</source>
          <target state="translated">各確定申告の構成要素には、以下のような特徴があります。</target>
        </trans-unit>
        <trans-unit id="b9f5cecbb342c5b2c155bd0ede4d1fcb97168969" translate="yes" xml:space="preserve">
          <source>Each time a new alias instance is added, the new form array instance is provided its control based on the index. This allows you to track each individual control when calculating the status and value of the root control.</source>
          <target state="translated">新しいエイリアスインスタンスが追加されるたびに、新しいフォーム配列インスタンスはインデックスに基づいてそのコントロールを提供します。これにより、ルートコントロールの状態と値を計算する際に、個々のコントロールを追跡することができます。</target>
        </trans-unit>
        <trans-unit id="4191b0fc88190e0dfd1f5d02d826834c374a2e8e" translate="yes" xml:space="preserve">
          <source>Each time an animation is triggered in Angular, the parent animation always get priority and child animations are blocked. In order for a child animation to run, the parent animation must query each of the elements containing child animations and then allow the animations to run using the &lt;a href=&quot;../api/animations/animatechild&quot;&gt;&lt;code&gt;animateChild()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Angularでアニメーションがトリガーされるたびに、親アニメーションが常に優先され、子アニメーションはブロックされます。子アニメーションを実行するには、親アニメーションが子アニメーションを含む各要素をクエリし、&lt;a href=&quot;../api/animations/animatechild&quot;&gt; &lt;code&gt;animateChild()&lt;/code&gt; &lt;/a&gt;関数を使用してアニメーションを実行できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="39caf3d6f6d11e7504ee29654c47c89fcaff17d7" translate="yes" xml:space="preserve">
          <source>Each time an animation is triggered in Angular, the parent animation has priority and any child animations are blocked. In order for a child animation to run, the parent animation must query each of the elements containing child animations, and run them using this function.</source>
          <target state="translated">Angularでアニメーションがトリガーされるたびに、親アニメーションが優先され、子アニメーションはブロックされます。子アニメーションを実行するためには、親アニメーションが子アニメーションを含む各要素に問い合わせを行い、この関数を使って実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3cb9d1e78bc6a527f7c2b3ed0e6aadb310220c65" translate="yes" xml:space="preserve">
          <source>Each time items are added, the opacity fade-in animation runs, and each removed item is faded out. When either of these animations occur, the stagger effect is applied after each item's animation is started.</source>
          <target state="translated">アイテムが追加されるたびに不透明度フェードインアニメーションが実行され、削除されたアイテムはフェードアウトされます。いずれかのアニメーションが発生した場合、各アイテムのアニメーションが開始された後にスタッガー効果が適用されます。</target>
        </trans-unit>
        <trans-unit id="840ece201b19a0940e7b47a2f6716b01bcfcf4bd" translate="yes" xml:space="preserve">
          <source>Earlier component tests configured the testing module with a few &lt;code&gt;declarations&lt;/code&gt; like this:</source>
          <target state="translated">以前のコンポーネントテストでは、次のようないくつかの &lt;code&gt;declarations&lt;/code&gt; テストモジュールを構成しました。</target>
        </trans-unit>
        <trans-unit id="8440b9eb7d03917b2509b5baeab2a299ce257eb0" translate="yes" xml:space="preserve">
          <source>Edge</source>
          <target state="translated">Edge</target>
        </trans-unit>
        <trans-unit id="a0dec05e152a15aac76a99730b18fb537af884ce" translate="yes" xml:space="preserve">
          <source>Edit a hero's name in the hero detail view. As you type, the hero name updates the heading at the top of the page. But when you click the &quot;go back button&quot;, the changes are lost.</source>
          <target state="translated">ヒーローの詳細表示でヒーローの名前を編集します。入力すると、ヒーロー名がページ上部の見出しを更新します。しかし、&quot;戻るボタン &quot;をクリックすると、変更は失われます。</target>
        </trans-unit>
        <trans-unit id="7a28f8fdf531d1de8cbfa03f27322c5ebe789231" translate="yes" xml:space="preserve">
          <source>Edit the &lt;code&gt;HeroSearchComponent&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;HeroSearchComponent&lt;/code&gt; クラスを編集する</target>
        </trans-unit>
        <trans-unit id="a3828b5ef8330a0df646970e814f435f04fd02bc" translate="yes" xml:space="preserve">
          <source>Edit the &lt;code&gt;collection.json&lt;/code&gt; file to define the initial schema for your collection.</source>
          <target state="translated">&lt;code&gt;collection.json&lt;/code&gt; ファイルを編集して、コレクションの初期スキーマを定義します。</target>
        </trans-unit>
        <trans-unit id="7073c6d0ea9dffd93fe969dc4169c8dcf848dab5" translate="yes" xml:space="preserve">
          <source>Edit the &lt;code&gt;schematics/collection.json&lt;/code&gt; file to point to the new schematic subfolder, and include a pointer to a schema file that will specify inputs for the new schematic.</source>
          <target state="translated">新しい回路図のサブフォルダーを指すように &lt;code&gt;schematics/collection.json&lt;/code&gt; ファイルを編集し、新しい回路図の入力を指定するスキーマファイルへのポインターを含めます。</target>
        </trans-unit>
        <trans-unit id="243ae2ff9dd324df29ebd119467f5cddf3097987" translate="yes" xml:space="preserve">
          <source>Edit the &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; file to add the following content.</source>
          <target state="translated">&lt;code&gt;tsconfig.schematics.json&lt;/code&gt; ファイルを編集して、次のコンテンツを追加します。</target>
        </trans-unit>
        <trans-unit id="5a6924cb28620025b7daa3b7cbd4b6ce71c3f34b" translate="yes" xml:space="preserve">
          <source>Edit the generated translation file: Translate the extracted text into the target language.</source>
          <target state="translated">生成された翻訳ファイルを編集します。抽出したテキストをターゲット言語に翻訳します。</target>
        </trans-unit>
        <trans-unit id="77da553bb02e4e75712d607e650908e418ab7c9e" translate="yes" xml:space="preserve">
          <source>Edit the hero</source>
          <target state="translated">主人公を編集する</target>
        </trans-unit>
        <trans-unit id="3981b776edea32fe25eceae3ad0387a1b8dc1c18" translate="yes" xml:space="preserve">
          <source>Editing the Bazel configuration may prevent you opting out of Bazel. Custom behaviors driven by Bazel won't be available in other Builders.</source>
          <target state="translated">Bazelの設定を編集すると、Bazelからのオプトアウトができなくなる場合があります。Bazelによって駆動されるカスタムビヘイビアは、他のビルダーでは利用できません。</target>
        </trans-unit>
        <trans-unit id="bfc1131d505eb33e1e38ec6565dbfcbb9f7800fc" translate="yes" xml:space="preserve">
          <source>Either way, the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator tells Angular that this property is &lt;em&gt;public&lt;/em&gt; and available for binding by a parent component. Without &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;, Angular refuses to bind to the property.</source>
          <target state="translated">どちらの方法でも、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; デコレーターはこのプロパティが&lt;em&gt;パブリック&lt;/em&gt;であり、親コンポーネントによるバインディングに使用できることをAngularに通知します。なければ &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 、角度はプロパティにバインドすることを拒否します。</target>
        </trans-unit>
        <trans-unit id="3ea7a1338139564ad098308f10ae612adbafe8eb" translate="yes" xml:space="preserve">
          <source>Element event Component event Directive event</source>
          <target state="translated">要素イベント コンポーネントイベント ディレクティブイベント</target>
        </trans-unit>
        <trans-unit id="78b32d614954e5819e912e04c63058e7347b0a0b" translate="yes" xml:space="preserve">
          <source>Element events may be the more common targets, but Angular looks first to see if the name matches an event property of a known directive, as it does in the following example:</source>
          <target state="translated">要素のイベントがより一般的なターゲットになるかもしれませんが、Angularでは以下の例のように、名前が既知のディレクティブのイベントプロパティと一致するかどうかを最初に調べます。</target>
        </trans-unit>
        <trans-unit id="a8af1f8f4a0f60574a912870fe01652703e8ae51" translate="yes" xml:space="preserve">
          <source>Element properties may be the more common targets, but Angular looks first to see if the name is a property of a known directive, as it is in the following example:</source>
          <target state="translated">要素のプロパティがより一般的なターゲットになるかもしれませんが、以下の例のように、Angularはまず名前が既知のディレクティブのプロパティであるかどうかを調べます。</target>
        </trans-unit>
        <trans-unit id="b814267cbc9b4c2f5dbdcaa48521ab0db7fa228f" translate="yes" xml:space="preserve">
          <source>Element properties named with dash case (&lt;code&gt;-&lt;/code&gt;). Dash case is the naming convention for custom elements.</source>
          <target state="translated">ダッシュケース（ &lt;code&gt;-&lt;/code&gt; ）で名前が付けられた要素プロパティ。ダッシュケースは、カスタム要素の命名規則です。</target>
        </trans-unit>
        <trans-unit id="4281bfd6552b34124101c7945eb3921590e1840a" translate="yes" xml:space="preserve">
          <source>Element property Component property Directive property</source>
          <target state="translated">要素プロパティ コンポーネントプロパティ ディレクティブプロパティ</target>
        </trans-unit>
        <trans-unit id="610e33c435ffd4f9cc64e044bd3fa683e6ff4746" translate="yes" xml:space="preserve">
          <source>ElementRef</source>
          <target state="translated">ElementRef</target>
        </trans-unit>
        <trans-unit id="660c8644c0aebbaa48f6509cbcb09b3790bda043" translate="yes" xml:space="preserve">
          <source>Elements within the &lt;code&gt;[&lt;a href=&quot;ngswitch&quot;&gt;NgSwitch&lt;/a&gt;]&lt;/code&gt; statement but outside of any &lt;code&gt;&lt;a href=&quot;ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; directive are preserved at the location.</source>
          <target state="translated">&lt;code&gt;[&lt;a href=&quot;ngswitch&quot;&gt;NgSwitch&lt;/a&gt;]&lt;/code&gt; ステートメント内で、 &lt;code&gt;&lt;a href=&quot;ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; ディレクティブの外部にある要素は、その場所で保持されます。</target>
        </trans-unit>
        <trans-unit id="7ea6230fc92026aec77cb73b411275cedcb01dd3" translate="yes" xml:space="preserve">
          <source>EmailValidator</source>
          <target state="translated">EmailValidator</target>
        </trans-unit>
        <trans-unit id="bb9641e7481a2ac16a688649131dd37a3702964f" translate="yes" xml:space="preserve">
          <source>Embedded live example</source>
          <target state="translated">埋め込みライブの例</target>
        </trans-unit>
        <trans-unit id="83e20452c44f63af957be29cf282b611c46d2aee" translate="yes" xml:space="preserve">
          <source>EmbeddedViewRef</source>
          <target state="translated">EmbeddedViewRef</target>
        </trans-unit>
        <trans-unit id="43f7a2bd10f700ecb039aad71ad500bb034ce583" translate="yes" xml:space="preserve">
          <source>Embedding the route parameter token, &lt;code&gt;:id&lt;/code&gt;, in the route definition path is a good choice for this scenario because the &lt;code&gt;id&lt;/code&gt; is &lt;em&gt;required&lt;/em&gt; by the &lt;code&gt;HeroDetailComponent&lt;/code&gt; and because the value &lt;code&gt;15&lt;/code&gt; in the path clearly distinguishes the route to &quot;Magneta&quot; from a route for some other hero.</source>
          <target state="translated">ルート定義パスにルートパラメータートークン &lt;code&gt;:id&lt;/code&gt; を埋め込むことは、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; で &lt;code&gt;id&lt;/code&gt; が&lt;em&gt;必要&lt;/em&gt;であり、パスの値 &lt;code&gt;15&lt;/code&gt; が &quot;Magneta&quot;へのルートと一部のルートを明確に区別するため、このシナリオに適しています他のヒーロー。</target>
        </trans-unit>
        <trans-unit id="e76e9c45e6f20e19c4f06dc20c952d47b9038f75" translate="yes" xml:space="preserve">
          <source>Emits an &lt;code&gt;&lt;a href=&quot;updateactivatedevent&quot;&gt;UpdateActivatedEvent&lt;/a&gt;&lt;/code&gt; event whenever the app has been updated to a new version.</source>
          <target state="translated">アプリが新しいバージョンに更新されるたびに、 &lt;code&gt;&lt;a href=&quot;updateactivatedevent&quot;&gt;UpdateActivatedEvent&lt;/a&gt;&lt;/code&gt; イベントを発生させます。</target>
        </trans-unit>
        <trans-unit id="882e9b10d387257fbe1f9c9a65cd1c3691ef6ede" translate="yes" xml:space="preserve">
          <source>Emits an &lt;code&gt;&lt;a href=&quot;updateavailableevent&quot;&gt;UpdateAvailableEvent&lt;/a&gt;&lt;/code&gt; event whenever a new app version is available.</source>
          <target state="translated">アプリの新しいバージョンが利用可能になると、 &lt;code&gt;&lt;a href=&quot;updateavailableevent&quot;&gt;UpdateAvailableEvent&lt;/a&gt;&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="aafa880c3dcedcc027cd4f9e5e8db3bd419db083" translate="yes" xml:space="preserve">
          <source>Emits an event containing a given value.</source>
          <target state="translated">指定された値を含むイベントを送信します。</target>
        </trans-unit>
        <trans-unit id="f75f623ea16165d1b8fa68ae33e82c5562cf68e7" translate="yes" xml:space="preserve">
          <source>Emits an event when the form submission has been triggered.</source>
          <target state="translated">フォーム送信がトリガされたときにイベントを送信します。</target>
        </trans-unit>
        <trans-unit id="43a5c938c92ff76a8b0f08eaed896138bdf6f5e5" translate="yes" xml:space="preserve">
          <source>Emits the currently active &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt;PushSubscription&lt;/a&gt; associated to the Service Worker registration or &lt;code&gt;null&lt;/code&gt; if there is no subscription.</source>
          <target state="translated">Service Worker登録に関連付けられている現在アクティブな&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription&quot;&gt;PushSubscriptionを発行し&lt;/a&gt;ます。サブスクリプションがない場合は &lt;code&gt;null&lt;/code&gt; を発行します。</target>
        </trans-unit>
        <trans-unit id="c6752a2ff06ebb716a84e7511cc420aaa89a5478" translate="yes" xml:space="preserve">
          <source>Emits the payloads of the received push notification messages as well as the action the user interacted with. If no action was used the &lt;code&gt;action&lt;/code&gt; property contains an empty string &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="translated">受信したプッシュ通知メッセージのペイロードと、ユーザーが操作したアクションを発行します。アクションが使用されなかった場合、 &lt;code&gt;action&lt;/code&gt; プロパティには空の文字列 &lt;code&gt;''&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="7e72684bb1ec9f0531eb8c7837750fb0400bd9b2" translate="yes" xml:space="preserve">
          <source>Emits the payloads of the received push notification messages.</source>
          <target state="translated">受信したプッシュ通知メッセージのペイロードを送信します。</target>
        </trans-unit>
        <trans-unit id="4f82187a59b317b0dcc96d315aa6c31be3ea2d81" translate="yes" xml:space="preserve">
          <source>Empties out the async validator list.</source>
          <target state="translated">非同期バリデータリストを空にします。</target>
        </trans-unit>
        <trans-unit id="f7fad72021d0dbe5822e8c652ce49746dc0bda5d" translate="yes" xml:space="preserve">
          <source>Empties out the sync validator list.</source>
          <target state="translated">同期バリデータリストを空にします。</target>
        </trans-unit>
        <trans-unit id="87434da39dfaf08f094f5a8d96e89bd88fe4ac24" translate="yes" xml:space="preserve">
          <source>Empty Path</source>
          <target state="translated">空の道</target>
        </trans-unit>
        <trans-unit id="672ad1b8b8d0a43ea96a232f42837d615b95f825" translate="yes" xml:space="preserve">
          <source>Empty-path route configurations can be used to instantiate components that do not 'consume' any URL segments.</source>
          <target state="translated">空パスルート設定は、URL セグメントを「消費」しないコンポーネントのインスタンスを作成するために使用できます。</target>
        </trans-unit>
        <trans-unit id="5370c69f525b9a37e8e07585264c99f9c59d322c" translate="yes" xml:space="preserve">
          <source>Empty-path routes can have children. In the following example, when navigating to &lt;code&gt;/team/11/user/jim&lt;/code&gt;, the router instantiates the wrapper component with the user component in it.</source>
          <target state="translated">空のパスのルートには、子を含めることができます。次の例では、 &lt;code&gt;/team/11/user/jim&lt;/code&gt; に移動すると、ルーターはユーザーコンポーネントを含むラッパーコンポーネントをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="16129f01e8969b5f4fb2adaad44b03b5d7650d4c" translate="yes" xml:space="preserve">
          <source>Emulate &lt;code&gt;&lt;a href=&quot;viewencapsulation#Native&quot;&gt;Native&lt;/a&gt;&lt;/code&gt; scoping of styles by adding an attribute containing surrogate id to the Host Element and pre-processing the style rules provided via &lt;a href=&quot;component#styles&quot;&gt;styles&lt;/a&gt; or &lt;a href=&quot;component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;, and adding the new Host Element attribute to all selectors.</source>
          <target state="translated">ホスト要素にサロゲートIDを含む属性を追加し、&lt;a href=&quot;component#styles&quot;&gt;スタイル&lt;/a&gt;または&lt;a href=&quot;component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;を介して提供されるスタイルルールを前処理し、すべてのセレクターに新しいホスト要素属性を追加することにより、スタイルの &lt;code&gt;&lt;a href=&quot;viewencapsulation#Native&quot;&gt;Native&lt;/a&gt;&lt;/code&gt; スコープをエミュレートします。</target>
        </trans-unit>
        <trans-unit id="265a9db68ca4a5d6ef8d4fae40f173a071928e99" translate="yes" xml:space="preserve">
          <source>Enable HTTP services</source>
          <target state="translated">HTTP サービスを有効にする</target>
        </trans-unit>
        <trans-unit id="e67083640ced0b81bedd70c022a1ba4bc9884def" translate="yes" xml:space="preserve">
          <source>Enable HttpClient for app</source>
          <target state="translated">アプリの HttpClient を有効にします。</target>
        </trans-unit>
        <trans-unit id="e34ac47784e0cfde79a7151a7989c931f93af556" translate="yes" xml:space="preserve">
          <source>Enable HttpClient for cart service</source>
          <target state="translated">カートサービスのHttpClientを有効にする</target>
        </trans-unit>
        <trans-unit id="fa6eebc6227fc9a918b716c4f215885d40621698" translate="yes" xml:space="preserve">
          <source>Enable access to CLI usage data</source>
          <target state="translated">CLI使用データへのアクセスを有効にする</target>
        </trans-unit>
        <trans-unit id="6d63b68fee5b381bfb9695361afac709eb36b661" translate="yes" xml:space="preserve">
          <source>Enable and define the file watching poll time period in milliseconds.</source>
          <target state="translated">ファイル監視のポーリング期間をミリ秒単位で有効にして定義します。</target>
        </trans-unit>
        <trans-unit id="39128e720765af16eba7528148ad65954348b7b8" translate="yes" xml:space="preserve">
          <source>Enable code coverage reports</source>
          <target state="translated">コードカバレッジレポートを有効にする</target>
        </trans-unit>
        <trans-unit id="e4ed8e6c246b54070d8318341912b462815ca123" translate="yes" xml:space="preserve">
          <source>Enable hot module replacement.</source>
          <target state="translated">ホットモジュールの交換を有効にします。</target>
        </trans-unit>
        <trans-unit id="2becf0fba4ac14d337ccb6df4a33af2c2e4a71ab" translate="yes" xml:space="preserve">
          <source>Enable runtime production mode</source>
          <target state="translated">ランタイムプロダクションモードを有効にする</target>
        </trans-unit>
        <trans-unit id="d80854840d07f800e414541fedcc13a32a5458c2" translate="yes" xml:space="preserve">
          <source>Enable the &lt;code&gt;dead&lt;/code&gt; or &lt;code&gt;IE&lt;/code&gt; browsers in the &lt;code&gt;browserslist&lt;/code&gt; config file by removing the &lt;code&gt;not&lt;/code&gt; keyword in front of them.</source>
          <target state="translated">有効 &lt;code&gt;dead&lt;/code&gt; または &lt;code&gt;IE&lt;/code&gt; でブラウザ &lt;code&gt;browserslist&lt;/code&gt; 除去することにより、設定ファイルを &lt;code&gt;not&lt;/code&gt; 彼らの前にキーワードを。</target>
        </trans-unit>
        <trans-unit id="faa28fb670d9e554df72f4770b4d351a70b2299b" translate="yes" xml:space="preserve">
          <source>Enable users to select a hero from a master list and edit that hero in the details view.</source>
          <target state="translated">ユーザーがマスターリストからヒーローを選択し、詳細ビューでそのヒーローを編集できるようにします。</target>
        </trans-unit>
        <trans-unit id="af82fafd98183ea88b6b2ce709a425bba69efa9a" translate="yes" xml:space="preserve">
          <source>Enabled Angular debug tools that are accessible via your browser's developer console.</source>
          <target state="translated">ブラウザの開発者コンソールからアクセスできるAngularデバッグツールを有効にしました。</target>
        </trans-unit>
        <trans-unit id="fb40fa7ce63184ee9b66dd0bfe91adbe467f8327" translate="yes" xml:space="preserve">
          <source>Enables '@angular-devkit/build-optimizer' optimizations when using the 'aot' option.</source>
          <target state="translated">aot' オプションを使用している場合に '@angular-devkit/build-optimizer' の最適化を有効にします。</target>
        </trans-unit>
        <trans-unit id="f1cc047827e87383481e1ca961b5f9404a67422d" translate="yes" xml:space="preserve">
          <source>Enables a bug fix that corrects relative link resolution in components with empty paths.</source>
          <target state="translated">空のパスを持つコンポーネントの相対リンクの解像度を修正するバグフィックスを有効にします。</target>
        </trans-unit>
        <trans-unit id="ac06417759dacb5336a8ec325b7c27700c913abc" translate="yes" xml:space="preserve">
          <source>Enables a bug fix that corrects relative link resolution in components with empty paths. Example:</source>
          <target state="translated">空のパスを持つコンポーネントの相対リンクの解像度を修正するバグ修正を有効にします。例。</target>
        </trans-unit>
        <trans-unit id="5576cd5af595cb792244725abdde9ed97de0e874" translate="yes" xml:space="preserve">
          <source>Enables conditionally loaded ES2015 polyfills.</source>
          <target state="translated">条件付きでロードされたES2015ポリフィルを有効にします。</target>
        </trans-unit>
        <trans-unit id="d7d0efe84209e6bb673aa9874f497d92f43c4e2a" translate="yes" xml:space="preserve">
          <source>Enables optimization of the build output.</source>
          <target state="translated">ビルド出力の最適化を可能にします。</target>
        </trans-unit>
        <trans-unit id="92aba376f06cee090c7bd7984cb839f8f47ad6c7" translate="yes" xml:space="preserve">
          <source>Enables service worker build support in the CLI.</source>
          <target state="translated">CLIでサービスワーカーのビルドサポートを有効にします。</target>
        </trans-unit>
        <trans-unit id="816d66936a53cc03e36d791ff87d917b08ff2204" translate="yes" xml:space="preserve">
          <source>Enables the &lt;code&gt;&lt;a href=&quot;common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service to read route state from the browser's URL. Angular provides two strategies: &lt;code&gt;&lt;a href=&quot;common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスがブラウザのURLからルート状態を読み取ることができるようにします。Angularは &lt;code&gt;&lt;a href=&quot;common/hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; という 2つの戦略を提供します。</target>
        </trans-unit>
        <trans-unit id="2fde15eb84da07dc5121c8a7b3c654796df3e1a2" translate="yes" xml:space="preserve">
          <source>Enables the &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service to read route state from the browser's URL. Angular provides two strategies: &lt;code&gt;&lt;a href=&quot;hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスがブラウザのURLからルート状態を読み取ることができるようにします。Angularは &lt;code&gt;&lt;a href=&quot;hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; という 2つの戦略を提供します。</target>
        </trans-unit>
        <trans-unit id="ae2bf2b28b78634b6e274b5a4cb6685ee4236774" translate="yes" xml:space="preserve">
          <source>Enables the control. This means the control is included in validation checks and the aggregate value of its parent. Its status recalculates based on its value and its validators.</source>
          <target state="translated">コントロールを有効にします。これはコントロールがバリデーションチェックとその親の集約値に含まれることを意味します。コントロールのステータスは値とバリデータに基づいて再計算されます。</target>
        </trans-unit>
        <trans-unit id="b9e46f25dc7ee87fb5ded014e116953e28110e6a" translate="yes" xml:space="preserve">
          <source>Enables the use of subresource integrity validation.</source>
          <target state="translated">サブリソースの整合性検証の使用を有効にします。</target>
        </trans-unit>
        <trans-unit id="fc5a12db1e324c2b7dd69b3bfe2b8d7c1393abff" translate="yes" xml:space="preserve">
          <source>Enabling polyfills with CLI projects</source>
          <target state="translated">CLIプロジェクトでポリフィルを有効にする</target>
        </trans-unit>
        <trans-unit id="82d97a722f9bd2f260d6872e6e1c1368d68e3771" translate="yes" xml:space="preserve">
          <source>Encapsulates a child animation, that can be run explicitly when the parent is run. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">子アニメーションをカプセル化します。これは、親の実行時に明示的に実行できます。 &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="e67f35b0e15befa6112a86582de589af1eb6509e" translate="yes" xml:space="preserve">
          <source>Encapsulates a child animation, that can be run explicitly when the parent is run. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/animatechild&quot;&gt;animateChild&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">子アニメーションをカプセル化します。これは、親の実行時に明示的に実行できます。 &lt;code&gt;&lt;a href=&quot;animations/animatechild&quot;&gt;animateChild&lt;/a&gt;&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="51602e00df41fab8699fc33a3d66db28f113b648" translate="yes" xml:space="preserve">
          <source>Encapsulates a keyframes sequence. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">キーフレームシーケンスをカプセル化します。 &lt;code&gt;&lt;a href=&quot;animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="eea312371c9c4522fe9d154fe08ec79022831492" translate="yes" xml:space="preserve">
          <source>Encapsulates a keyframes sequence. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">キーフレームシーケンスをカプセル化します。 &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="a4971d06afca83215d81f836e2dd45b2363e2baa" translate="yes" xml:space="preserve">
          <source>Encapsulates a reusable animation, which is a collection of individual animation steps. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; function, and passed to the &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">個別のアニメーションステップのコレクションである再利用可能なアニメーションをカプセル化します。 &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返され、 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="1df96d1474ff38a31de3fee689d9706e16ff0cf7" translate="yes" xml:space="preserve">
          <source>Encapsulates a reusable animation, which is a collection of individual animation steps. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; function, and passed to the &lt;code&gt;&lt;a href=&quot;animations/useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">個別のアニメーションステップのコレクションである再利用可能なアニメーションをカプセル化します。 &lt;code&gt;&lt;a href=&quot;animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返され、 &lt;code&gt;&lt;a href=&quot;animations/useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="6e515e5130b8e32d6fc4afc2cd1acb89a77ff2b1" translate="yes" xml:space="preserve">
          <source>Encapsulates a reusable animation. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">再利用可能なアニメーションをカプセル化します。 &lt;code&gt;&lt;a href=&quot;animations/useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="908ea316bcaabe15d2a8d34c21396e90c859dfc5" translate="yes" xml:space="preserve">
          <source>Encapsulates a reusable animation. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">再利用可能なアニメーションをカプセル化します。 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="e9e77b22ce0e7c1986088f5d83407dea43be6d31" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation group. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">アニメーショングループをカプセル化します。 &lt;code&gt;&lt;a href=&quot;animations/group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="03afdf2ce28b3d3281d4d286b0f0ff4c68848a50" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation group. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">アニメーショングループをカプセル化します。 &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="61a70386ff0fcf13a39642ec4421be17e8e2a47a" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation query. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションクエリをカプセル化します。 &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="716da4381a8b20dbe1fb7dcc1c06b3f846dff79f" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation query. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションクエリをカプセル化します。 &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="989bd79ad47de1872ca95560de7f37d0d0e3a0e5" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation sequence. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションシーケンスをカプセル化します。 &lt;code&gt;&lt;a href=&quot;animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="7da932f27be4de034907616c90fd92e41720ef1c" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation sequence. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションシーケンスをカプセル化します。 &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="5fe29ca1afe02d077482c094aea90fabb2efb91b" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation state by associating a state name with a set of CSS styles. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">状態名をCSSスタイルのセットに関連付けることにより、アニメーションの状態をカプセル化します。 &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="cafcceea439c9d880e4ca5a76ed6a50dd8d4396b" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation state by associating a state name with a set of CSS styles. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">状態名をCSSスタイルのセットに関連付けることにより、アニメーションの状態をカプセル化します。 &lt;code&gt;&lt;a href=&quot;common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="848b7c49de9bb7153581107ae1af63e989ae6480" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation step. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションステップをカプセル化します。インスタンス &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; され、animate（）関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="80c96b46d45590ad7a6e326fa324ed5d0d342266" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation step. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションステップをカプセル化します。インスタンス &lt;code&gt;&lt;a href=&quot;animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; され、animate（）関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="205b24cabe22de4f517ff9953be8f2d04d4fd906" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation style. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションスタイルをカプセル化します。インスタンス化され、 &lt;code&gt;&lt;a href=&quot;animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="28b7fdc6da92b3ee02f32d9b3c5bc61e51f8aa7a" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation style. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションスタイルをカプセル化します。インスタンス化され、 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="0347672b48914062705bfc7b4877d25dc434353d" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation transition. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーション遷移をカプセル化します。 &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="d21db759b804367fab355379fa8f13a93cee565b" translate="yes" xml:space="preserve">
          <source>Encapsulates an animation transition. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーション遷移をカプセル化します。 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 関数によってインスタンス化されて返されます。</target>
        </trans-unit>
        <trans-unit id="9433882cf665f44d956b41fd6eacf7d14fa7342a" translate="yes" xml:space="preserve">
          <source>Encapsulates animation query options. Passed to the &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションクエリオプションをカプセル化します。 &lt;code&gt;&lt;a href=&quot;animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="2731904c5fe656868e3f9d4d06263a10ed9fef1b" translate="yes" xml:space="preserve">
          <source>Encapsulates animation query options. Passed to the &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">アニメーションクエリオプションをカプセル化します。 &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="5b28f5efce82bd292d38c6feae74c4c1b401975a" translate="yes" xml:space="preserve">
          <source>Encapsulates parameters for staggering the start times of a set of animation steps. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">一連のアニメーションステップの開始時間をずらすためのパラメーターをカプセル化します。インスタンス化され、によって返さ &lt;code&gt;&lt;a href=&quot;animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 関数。</target>
        </trans-unit>
        <trans-unit id="5bd43f9c52ef5eae490d0a9249eb0180efef2307" translate="yes" xml:space="preserve">
          <source>Encapsulates parameters for staggering the start times of a set of animation steps. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">一連のアニメーションステップの開始時間をずらすためのパラメーターをカプセル化します。インスタンス化され、によって返さ &lt;code&gt;&lt;a href=&quot;stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; 関数。</target>
        </trans-unit>
        <trans-unit id="ac811c547df2bcc849a4681b3e4d095a334e1748" translate="yes" xml:space="preserve">
          <source>Encodes a key name for a URL parameter or query-string.</source>
          <target state="translated">URL パラメータまたはクエリ文字列のキー名をエンコードします。</target>
        </trans-unit>
        <trans-unit id="4e6d7597b00dee1d9b12f8c3da253b16ded5abb2" translate="yes" xml:space="preserve">
          <source>Encodes the hash from the provided string</source>
          <target state="translated">与えられた文字列からハッシュをエンコードします。</target>
        </trans-unit>
        <trans-unit id="5a0cd9b2e8022370b3b0509a9427ccd7da2f8cec" translate="yes" xml:space="preserve">
          <source>Encodes the path from the provided string</source>
          <target state="translated">指定した文字列からのパスをエンコードします。</target>
        </trans-unit>
        <trans-unit id="c260306266d65e958485bd681dfb08b84f4a2140" translate="yes" xml:space="preserve">
          <source>Encodes the search string from the provided string or object</source>
          <target state="translated">指定された文字列またはオブジェクトから検索文字列をエンコードします。</target>
        </trans-unit>
        <trans-unit id="e03641fe608821032997c71c5a56090f82fc2bdb" translate="yes" xml:space="preserve">
          <source>Encodes the value of a URL parameter or query-string.</source>
          <target state="translated">URL パラメータまたはクエリ文字列の値をエンコードします。</target>
        </trans-unit>
        <trans-unit id="20f40c58b071e9a7277373457706db22c56f22db" translate="yes" xml:space="preserve">
          <source>End-to-End Tests</source>
          <target state="translated">エンドツーエンドテスト</target>
        </trans-unit>
        <trans-unit id="b3f18894771fc8d6f088ca31ff6911e75200c41f" translate="yes" xml:space="preserve">
          <source>End-to-end test files</source>
          <target state="translated">エンドツーエンドのテストファイル</target>
        </trans-unit>
        <trans-unit id="a2365ba72108d31cd3d6c1c16496babe7ef35421" translate="yes" xml:space="preserve">
          <source>Ends a async time range operation. [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been enabled.</source>
          <target state="translated">非同期時間範囲操作を終了します。range]は [wtfStartTimeRange]の戻り値です。 非同期範囲は WTF が有効になっている場合にのみ動作します。</target>
        </trans-unit>
        <trans-unit id="fe030e0ac9483f1774410e532b40c19c3058c1ba" translate="yes" xml:space="preserve">
          <source>Ends the animation, invoking the &lt;code&gt;onDone()&lt;/code&gt; callback.</source>
          <target state="translated">&lt;code&gt;onDone()&lt;/code&gt; コールバックを呼び出してアニメーションを終了します。</target>
        </trans-unit>
        <trans-unit id="6cc1a9c010adc0d963f45d36b2ca51ffbc23ff25" translate="yes" xml:space="preserve">
          <source>Ensure that you are not already in an Angular workspace folder. For example, if you have previously created the Getting Started workspace, change to the parent of that folder.</source>
          <target state="translated">Angularワークスペースのフォルダにまだ入っていないことを確認してください。例えば、以前にGetting Startedワークスペースを作成した場合は、そのフォルダの親に変更します。</target>
        </trans-unit>
        <trans-unit id="945c30b6d2cd9f42f65f94b2363c4b07a4390ca9" translate="yes" xml:space="preserve">
          <source>Enter a URL in the address bar and the browser navigates to a corresponding page.</source>
          <target state="translated">アドレスバーにURLを入力すると、ブラウザは対応するページに移動します。</target>
        </trans-unit>
        <trans-unit id="5b2837eec05b4cbd4f8e485666e49854e6c7fb61" translate="yes" xml:space="preserve">
          <source>Enter a URL in the address bar, and the browser navigates to a corresponding page.</source>
          <target state="translated">アドレスバーにURLを入力すると、ブラウザは対応するページに移動します。</target>
        </trans-unit>
        <trans-unit id="1fd361c250e37b989d268cec38571e912b6b1713" translate="yes" xml:space="preserve">
          <source>Enter a name and click &lt;em&gt;New Hero&lt;/em&gt; again. The app displays a &lt;em&gt;Name is required&lt;/em&gt; error message. You don't want error messages when you create a new (empty) hero. Why are you getting one now?</source>
          <target state="translated">名前を入力して、もう一度[ &lt;em&gt;新しいヒーロー&lt;/em&gt; ]をクリックします。アプリに「&lt;em&gt;名前が必要です」という&lt;/em&gt;エラーメッセージ&lt;em&gt;が&lt;/em&gt;表示されます。新しい（空の）ヒーローを作成するとき、エラーメッセージは必要ありません。なぜ今入手したのですか？</target>
        </trans-unit>
        <trans-unit id="b49822088cea36d8bc8b7f290b066e9029739611" translate="yes" xml:space="preserve">
          <source>Entry Components</source>
          <target state="translated">エントリーコンポーネント</target>
        </trans-unit>
        <trans-unit id="007cbf2ba452e4583d408203d5a0b563eaf1b009" translate="yes" xml:space="preserve">
          <source>Entry and exit transitions:</source>
          <target state="translated">入口と出口のトランジション。</target>
        </trans-unit>
        <trans-unit id="ff9189b5aa6efac11c15287a492b218d79dd096a" translate="yes" xml:space="preserve">
          <source>Entry point exports</source>
          <target state="translated">エントリーポイント輸出</target>
        </trans-unit>
        <trans-unit id="18f73528d44427047489bb703aa3ca755342dbbb" translate="yes" xml:space="preserve">
          <source>Entry points</source>
          <target state="translated">エントリーポイント</target>
        </trans-unit>
        <trans-unit id="3a571a4359b2cd140372e237ef5e3c2c5a6186c5" translate="yes" xml:space="preserve">
          <source>Enumerates the set of data-bound input properties for a directive</source>
          <target state="translated">ディレクティブのデータバインド入力プロパティのセットを列挙します。</target>
        </trans-unit>
        <trans-unit id="64101c05a2cf6652261d1745a418b7e927fca228" translate="yes" xml:space="preserve">
          <source>Enumerates the set of event-bound output properties.</source>
          <target state="translated">イベントバインド出力プロパティのセットを列挙します。</target>
        </trans-unit>
        <trans-unit id="f37a89cbd1a73777b5e65ae13dd77ca3e52051eb" translate="yes" xml:space="preserve">
          <source>Era</source>
          <target state="translated">Era</target>
        </trans-unit>
        <trans-unit id="9c58e3328b0971c008ce1a1e8bfc4788ff407a2c" translate="yes" xml:space="preserve">
          <source>Erase the name.</source>
          <target state="translated">名前を消す。</target>
        </trans-unit>
        <trans-unit id="f5c2b7865df76e15d4c3b162675500c5f27ce98d" translate="yes" xml:space="preserve">
          <source>Error checking</source>
          <target state="translated">エラーチェック</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="31c5a2a3b0e1cc6c9bcf73618e9aab80710648ad" translate="yes" xml:space="preserve">
          <source>Error handling (and specifically recovering from an error) is covered in more detail in a later section.</source>
          <target state="translated">エラー処理(特にエラーからの回復)については、後のセクションで詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="4aab21f64f3ae2fed4694ee476bc130ac9bdcd17" translate="yes" xml:space="preserve">
          <source>Error inspection, interpretation, and resolution is something you want to do in the &lt;em&gt;service&lt;/em&gt;, not in the &lt;em&gt;component&lt;/em&gt;.</source>
          <target state="translated">エラーの検査、解釈、解決は、&lt;em&gt;コンポーネント&lt;/em&gt;ではなく、&lt;em&gt;サービス&lt;/em&gt;で実行したいものです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d1dc7f57ed4361a9994d5f5c1df19b68553d2dcf" translate="yes" xml:space="preserve">
          <source>Error: throw an error. If you are using AOT compilation, the build will fail. If you are using JIT compilation, the app will fail to load.</source>
          <target state="translated">エラー:エラーをスローします。AOTコンパイルを使用している場合、ビルドに失敗します。JITコンパイルを使用している場合、アプリのロードに失敗します。</target>
        </trans-unit>
        <trans-unit id="5ce56d364feb43e7a2088dcd76ace52325393f7b" translate="yes" xml:space="preserve">
          <source>Error: throw if you have missing translations.</source>
          <target state="translated">エラー:翻訳が不足している場合にスローします。</target>
        </trans-unit>
        <trans-unit id="441c4e5aa8c59a894a04039c4f26123cabb982c1" translate="yes" xml:space="preserve">
          <source>ErrorHandler</source>
          <target state="translated">ErrorHandler</target>
        </trans-unit>
        <trans-unit id="e479225976d3687521ab58ddd623c11dd3670242" translate="yes" xml:space="preserve">
          <source>Errors are never okay, even when the status code is in the 2xx success range.</source>
          <target state="translated">エラーは、ステータスコードが2xx成功範囲内であっても、決して大丈夫ではありません。</target>
        </trans-unit>
        <trans-unit id="140f12ddf60a5bdd192c50cefaefa3e1c9f117cf" translate="yes" xml:space="preserve">
          <source>Errors during the build process could result in updated resources without &lt;code&gt;ngsw.json&lt;/code&gt; being updated. The reverse could also happen resulting in an updated &lt;code&gt;ngsw.json&lt;/code&gt; without updated resources.</source>
          <target state="translated">ビルドプロセス中にエラーが発生すると、 &lt;code&gt;ngsw.json&lt;/code&gt; が更新されずにリソースが更新される可能性があります。逆も発生する可能性があり、更新されたリソースなしで &lt;code&gt;ngsw.json&lt;/code&gt; が更新されます。</target>
        </trans-unit>
        <trans-unit id="cd18a877ca7b0ceaa366b88dcd78fd4a5b4438f9" translate="yes" xml:space="preserve">
          <source>Errors in AOT compilation commonly occur because of metadata that does not conform to the compiler's requirements (as described more fully below). For help in understanding and resolving these problems, see &lt;a href=&quot;aot-metadata-errors&quot;&gt;AOT Metadata Errors&lt;/a&gt;.</source>
          <target state="translated">AOTコンパイルのエラーは通常、メタデータがコンパイラーの要件に準拠していないために発生します（以下で詳しく説明します）。これらの問題の理解と解決のヘルプについては、&lt;a href=&quot;aot-metadata-errors&quot;&gt;AOTメタデータエラーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9f5d1776185d17f7f636da072a52b82b51304a31" translate="yes" xml:space="preserve">
          <source>Errors that occur within the service worker will be logged here.</source>
          <target state="translated">サービスワーカー内で発生したエラーは、ここに記録されます。</target>
        </trans-unit>
        <trans-unit id="6eebfc5a8e55779a7589ac3319e418c8eede142b" translate="yes" xml:space="preserve">
          <source>Evaluation of a template expression should have no visible side effects. The expression language itself, or the way you write template expressions, helps to a certain extent; you can't assign a value to anything in a property binding expression nor use the increment and decrement operators.</source>
          <target state="translated">テンプレート式の評価には、目に見える副作用はないはずです。式言語自体、またはテンプレート式の書き方はある程度助けになります。</target>
        </trans-unit>
        <trans-unit id="850e9818f40adbc977c81ae6399f41133a13fd54" translate="yes" xml:space="preserve">
          <source>Even a small form such as this one can produce a mess of tortured conditional setup and CSS element selection.</source>
          <target state="translated">このような小さなフォームでも、拷問のような条件設定とCSS要素の選択がゴチャゴチャになってしまいます。</target>
        </trans-unit>
        <trans-unit id="3769401ed313e5329253644819bfce1f955dbb33" translate="yes" xml:space="preserve">
          <source>Even accounting for these differences you can still have dependency injection interoperability. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; resolves the differences and makes everything work seamlessly:</source>
          <target state="translated">これらの違いを考慮しても、依存性注入の相互運用性を維持できます。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; は違いを解決し、すべてがシームレスに機能するようにします。</target>
        </trans-unit>
        <trans-unit id="e16b061e3708e3fc68014096083cafee7c7ce978" translate="yes" xml:space="preserve">
          <source>Even across a fast reliable network, round-trip delays can introduce significant latency when loading the application. Using a service worker to reduce dependency on the network can significantly improve the user experience.</source>
          <target state="translated">高速で信頼性の高いネットワークであっても、アプリケーションをロードする際に往復の遅延が発生することがあります。サービスワーカーを使用してネットワークへの依存を減らすことで、ユーザーエクスペリエンスを大幅に向上させることができます。</target>
        </trans-unit>
        <trans-unit id="2d077313c4f8be84916129e534e1c9472b805611" translate="yes" xml:space="preserve">
          <source>Even though the components declared by &lt;code&gt;SharedModule&lt;/code&gt; might not bind with &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; and there may be no need for &lt;code&gt;SharedModule&lt;/code&gt; to import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;SharedModule&lt;/code&gt; can still export &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; without listing it among its &lt;code&gt;imports&lt;/code&gt;. This way, you can give other modules access to &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; without having to import it directly into the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">コンポーネントがによって宣言されていても &lt;code&gt;SharedModule&lt;/code&gt; と結合しないことがあります &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; とは必要ないかもしれ &lt;code&gt;SharedModule&lt;/code&gt; 輸入に &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;SharedModule&lt;/code&gt; まだすることができ、輸出 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; その間、それをリストせずに &lt;code&gt;imports&lt;/code&gt; 。このようにして、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;デコレーターに直接インポートしなくても、他のモジュールが &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; にアクセスできるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="3ac2045e3dc81152fb554884060276dbdd76671d" translate="yes" xml:space="preserve">
          <source>Even thought the component is instantiated in AngularJS, it will be using Angular syntax. This has to be done, this way because we must follow Angular components do not declare how the attributes should be interpreted.</source>
          <target state="translated">コンポーネントがAngularJSでインスタンス化されていると思っても、Angularの構文を使うことになります。Angularコンポーネントは属性がどのように解釈されるべきかを宣言していないので、このようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="ad8919ace091b14011c6439cfd5e1707b58f5abd" translate="yes" xml:space="preserve">
          <source>Event</source>
          <target state="translated">Event</target>
        </trans-unit>
        <trans-unit id="a4b8c14cddb2f1885a3b5243af7a8673f906232d" translate="yes" xml:space="preserve">
          <source>Event and property</source>
          <target state="translated">イベントとプロパティ</target>
        </trans-unit>
        <trans-unit id="653b2d725355aff89cbe9374190b125e15219f77" translate="yes" xml:space="preserve">
          <source>Event binding</source>
          <target state="translated">イベントバインディング</target>
        </trans-unit>
        <trans-unit id="8861df64fa83a4b1d28dece2f39cadeb0dc09bc4" translate="yes" xml:space="preserve">
          <source>Event binding &lt;code&gt;( )&lt;/code&gt;</source>
          <target state="translated">イベントバインディング &lt;code&gt;( )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa9823491ce467db213d22bc6b83c462e08f3718" translate="yes" xml:space="preserve">
          <source>Event binding &lt;code&gt;(event)&lt;/code&gt;</source>
          <target state="translated">イベントバインディング &lt;code&gt;(event)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77b48624494a6f0a9df34e45edd94c677ed6320e" translate="yes" xml:space="preserve">
          <source>Event binding allows you to listen for certain events such as keystrokes, mouse movements, clicks, and touches. For an example demonstrating all of the points in this section, see the &lt;span name=&quot;event-binding&quot;&gt;event binding example&lt;/span&gt;.</source>
          <target state="translated">イベントバインディングを使用すると、キーストローク、マウスの動き、クリック、タッチなどの特定のイベントをリッスンできます。このセクションのすべてのポイントを示す例については、&lt;span name=&quot;event-binding&quot;&gt;イベントバインディングの例を&lt;/span&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="87f25a7f8c6489fdeb43b0e84d80feee4996cddd" translate="yes" xml:space="preserve">
          <source>Event emitter for producing the &lt;code&gt;ngModelChange&lt;/code&gt; event after the view model updates.</source>
          <target state="translated">ビューモデルの更新後に &lt;code&gt;ngModelChange&lt;/code&gt; イベントを生成するためのイベントエミッター。</target>
        </trans-unit>
        <trans-unit id="b128948626495abc382e1e64d3eeecac95ddb8c7" translate="yes" xml:space="preserve">
          <source>Event emitter for the &quot;ngSubmit&quot; event</source>
          <target state="translated">ngSubmit&quot; イベントのイベントエミッタ</target>
        </trans-unit>
        <trans-unit id="8b38de0eda9857ebdbcd12bdbd0e63305b36cc10" translate="yes" xml:space="preserve">
          <source>Event: &lt;code&gt;&amp;lt;comp (close)=&quot;doSomething()&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">イベント： &lt;code&gt;&amp;lt;comp (close)=&quot;doSomething()&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5876adadbcd068acd9f996c259fbd067d5cbf8d9" translate="yes" xml:space="preserve">
          <source>EventEmitter</source>
          <target state="translated">EventEmitter</target>
        </trans-unit>
        <trans-unit id="913641e09266e8cb48d5e95316fd86cbe16755ba" translate="yes" xml:space="preserve">
          <source>EventManager</source>
          <target state="translated">EventManager</target>
        </trans-unit>
        <trans-unit id="fe344110e73a74f72736069ed919c062c627ec74" translate="yes" xml:space="preserve">
          <source>Events API</source>
          <target state="translated">イベント API</target>
        </trans-unit>
        <trans-unit id="8da7c1c5bd31b41021042d6be49c271cb61391f5" translate="yes" xml:space="preserve">
          <source>Eventually you'll get them from a remote data server. For now, you'll create some &lt;em&gt;mock heroes&lt;/em&gt; and pretend they came from the server.</source>
          <target state="translated">最終的には、リモートデータサーバーから取得します。ここでは、いくつかの&lt;em&gt;模擬ヒーロー&lt;/em&gt;を作成し、それらがサーバーから来たものに見せかけます。</target>
        </trans-unit>
        <trans-unit id="1f103dec1c98bfc6accaa7ec6f90d5f9d7a5b16c" translate="yes" xml:space="preserve">
          <source>Every Angular app has a &lt;em&gt;root module&lt;/em&gt;, conventionally named &lt;code&gt;AppModule&lt;/code&gt;, which provides the bootstrap mechanism that launches the application. An app typically contains many functional modules.</source>
          <target state="translated">すべてのAngularアプリには、通常は &lt;code&gt;AppModule&lt;/code&gt; という名前の&lt;em&gt;ルートモジュール&lt;/em&gt;があり、アプリケーションを起動するブートストラップメカニズムを提供します。アプリには通常、多くの機能モジュールが含まれています。</target>
        </trans-unit>
        <trans-unit id="6daf3b062f03c71d4fae2209ffdc85e874f89f66" translate="yes" xml:space="preserve">
          <source>Every Angular app has at least one NgModule class, &lt;a href=&quot;bootstrapping&quot;&gt;the &lt;em&gt;root module&lt;/em&gt;&lt;/a&gt;, which is conventionally named &lt;code&gt;AppModule&lt;/code&gt; and resides in a file named &lt;code&gt;app.module.ts&lt;/code&gt;. You launch your app by &lt;em&gt;bootstrapping&lt;/em&gt; the root NgModule.</source>
          <target state="translated">すべてのAngularアプリには、少なくとも1つのNgModuleクラスで&lt;a href=&quot;bootstrapping&quot;&gt;ある&lt;em&gt;ルートモジュール&lt;/em&gt;&lt;/a&gt;があり&lt;em&gt;ます&lt;/em&gt;。これは、通常 &lt;code&gt;AppModule&lt;/code&gt; という名前で、 &lt;code&gt;app.module.ts&lt;/code&gt; という名前のファイルにあります。ルートNgModuleを&lt;em&gt;ブートストラップし&lt;/em&gt;てアプリを起動します。</target>
        </trans-unit>
        <trans-unit id="483c63e0bfa0f7ca6f63472bc5879db0599afb08" translate="yes" xml:space="preserve">
          <source>Every Angular app has at least one module, the root module. You &lt;a href=&quot;bootstrapping&quot;&gt;bootstrap&lt;/a&gt; that module to launch the application.</source>
          <target state="translated">すべてのAngularアプリには、少なくとも1つのモジュール、ルートモジュールがあります。あなたは、&lt;a href=&quot;bootstrapping&quot;&gt;ブートストラップ&lt;/a&gt;アプリケーションを起動するためにそのモジュールを。</target>
        </trans-unit>
        <trans-unit id="820ed242310301e24986112a7cff648414c77911" translate="yes" xml:space="preserve">
          <source>Every Angular application has a root module. By convention, the class is called &lt;code&gt;AppModule&lt;/code&gt; and resides in a file named &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">すべてのAngularアプリケーションにはルートモジュールがあります。慣例では、クラスが呼び出され &lt;code&gt;AppModule&lt;/code&gt; という名前のファイルにして存在 &lt;code&gt;app.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c35630c98a82ad178da0ab9c1b5acf827ada573b" translate="yes" xml:space="preserve">
          <source>Every Angular application has at least one component, the &lt;em&gt;root component&lt;/em&gt; that connects a component hierarchy with the page document object model (DOM). Each component defines a class that contains application data and logic, and is associated with an HTML &lt;em&gt;template&lt;/em&gt; that defines a view to be displayed in a target environment.</source>
          <target state="translated">すべてのAngularアプリケーションには、コンポーネント階層をページドキュメントオブジェクトモデル（DOM）に接続する&lt;em&gt;ルートコンポーネントで&lt;/em&gt;ある、少なくとも1つのコンポーネントがあります。各コンポーネントは、アプリケーションデータとロジックを含むクラスを定義し、ターゲット環境に表示されるビューを定義するHTML &lt;em&gt;テンプレートに&lt;/em&gt;関連付けられています。</target>
        </trans-unit>
        <trans-unit id="21950ef1d3b08fa378394db102c287c7e9d9c230" translate="yes" xml:space="preserve">
          <source>Every app is different. Developers have various levels of experience and comfort with the available choices. Some suggestions and guidelines appear to have wide appeal.</source>
          <target state="translated">すべてのアプリは異なります。開発者は様々なレベルの経験を持ち、利用可能な選択肢の中で快適に過ごすことができます。いくつかの提案やガイドラインは、幅広い魅力を持っているように見えます。</target>
        </trans-unit>
        <trans-unit id="53c892053be276bc3b640b778522647ac9691d78" translate="yes" xml:space="preserve">
          <source>Every application starts out with what seems like a simple task: get data, transform them, and show them to users. Getting data could be as simple as creating a local variable or as complex as streaming data over a WebSocket.</source>
          <target state="translated">すべてのアプリケーションは、データを取得し、変換し、ユーザーに見せるという簡単な作業から始まります。データを取得することは、ローカル変数を作成するのと同じくらい簡単なことかもしれませんし、WebSocketを介してデータをストリーミングするのと同じくらい複雑なことかもしれません。</target>
        </trans-unit>
        <trans-unit id="9801e8ee8ba60600fa9d73e2004199dd124e627e" translate="yes" xml:space="preserve">
          <source>Every component must be declared in &lt;em&gt;exactly one&lt;/em&gt;&lt;a href=&quot;../guide/ngmodules&quot;&gt;NgModule&lt;/a&gt;.</source>
          <target state="translated">すべてのコンポーネントは&lt;em&gt;1つの&lt;/em&gt;&lt;a href=&quot;../guide/ngmodules&quot;&gt;NgModuleで&lt;/a&gt;宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="4952a251d677b65b9b459f62edb6a04fc9616121" translate="yes" xml:space="preserve">
          <source>Every guide document must have a title.</source>
          <target state="translated">すべてのガイド文書にはタイトルが必要です。</target>
        </trans-unit>
        <trans-unit id="5fa540bcfc1b39a5cf26b4f552a9a0a6f39ad11c" translate="yes" xml:space="preserve">
          <source>Every guide page file is stored in the &lt;code&gt;content/guide&lt;/code&gt; directory. Although the &lt;a href=&quot;docs-style-guide#navigation&quot;&gt;side navigation&lt;/a&gt; panel displays as a hierarchy, the directory is flat with no sub-folders. The flat folder approach allows us to shuffle the apparent navigation structure without moving page files or redirecting old page URLs.</source>
          <target state="translated">すべてのガイドページファイルは、 &lt;code&gt;content/guide&lt;/code&gt; ディレクトリに保存されます。が&lt;a href=&quot;docs-style-guide#navigation&quot;&gt;側ナビゲーション&lt;/a&gt;階層としてパネルディスプレイ、ディレクトリがないサブフォルダを有する平坦です。フラットフォルダーアプローチでは、ページファイルを移動したり、古いページのURLをリダイレクトしたりすることなく、見かけ上のナビゲーション構造をシャッフルできます。</target>
        </trans-unit>
        <trans-unit id="d886ac38f851fdbc187ae78a3b2d9fde9be44cd7" translate="yes" xml:space="preserve">
          <source>Every node in the route tree is an &lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; instance that knows about the &quot;consumed&quot; URL segments, the extracted parameters, and the resolved data. Use the &lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; properties to traverse the tree from any node.</source>
          <target state="translated">ルートツリーのすべてのノードは、「消費された」URLセグメント、抽出されたパラメーター、および解決されたデータを &lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; インスタンスです。 &lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; プロパティを使用して、任意のノードからツリーをトラバースします。</target>
        </trans-unit>
        <trans-unit id="6ea96237603d72502bbf6d1b0c42d01f5d2953c0" translate="yes" xml:space="preserve">
          <source>Every progress event triggers change detection, so only turn them on if you truly intend to report progress in the UI.</source>
          <target state="translated">進行状況イベントごとに変更検出がトリガーされるので、本当に UI の進行状況を報告するつもりがある場合にのみ、それらをオンにしてください。</target>
        </trans-unit>
        <trans-unit id="17c7f64d3ab0ca40b52599a400116103f22c8a8e" translate="yes" xml:space="preserve">
          <source>Every public member of a &lt;strong&gt;source&lt;/strong&gt; directive is automatically available for binding. You don't have to do anything special to access a directive member in a template expression or statement.</source>
          <target state="translated">&lt;strong&gt;ソース&lt;/strong&gt;ディレクティブのすべてのパブリックメンバーは、バインドに自動的に使用できます。テンプレート式またはステートメントのディレクティブメンバーにアクセスするために特別なことを行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="6959a0f4b289947cd2d331836fef67bd073a351f" translate="yes" xml:space="preserve">
          <source>Every section header tag is also an anchor point. Another guide page could add a link to this section by writing:</source>
          <target state="translated">すべてのセクションのヘッダータグはアンカーポイントでもあります。別のガイドページでは、このセクションへのリンクを記述することで追加することができます。</target>
        </trans-unit>
        <trans-unit id="c8e693ec5796b6575855ec18bba79c7fff143e85" translate="yes" xml:space="preserve">
          <source>Every time the user opens or refreshes the application, the Angular service worker checks for updates to the app by looking for updates to the &lt;code&gt;ngsw.json&lt;/code&gt; manifest. If an update is found, it is downloaded and cached automatically, and will be served the next time the application is loaded.</source>
          <target state="translated">ユーザーがアプリケーションを開いたり更新したりするたびに、Angular Service Workerは &lt;code&gt;ngsw.json&lt;/code&gt; マニフェストの更新を探して、アプリの更新を確認します。更新が見つかると、自動的にダウンロードおよびキャッシュされ、次にアプリケーションがロードされたときに提供されます。</target>
        </trans-unit>
        <trans-unit id="60c10c60832a627bfc41ff772bb8e682f844116f" translate="yes" xml:space="preserve">
          <source>Every time the user types in the textbox, the binding calls &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; with the textbox value, a &quot;search term&quot;. The &lt;code&gt;searchTerms&lt;/code&gt; becomes an &lt;code&gt;Observable&lt;/code&gt; emitting a steady stream of search terms.</source>
          <target state="translated">ユーザーがテキストボックスに入力するたびに、バインディングはテキストボックスの値「検索語」を使用して &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; を呼び出します。 &lt;code&gt;searchTerms&lt;/code&gt; なり &lt;code&gt;Observable&lt;/code&gt; 検索用語の安定した流れを放出します。</target>
        </trans-unit>
        <trans-unit id="2b78a4e000844a3c8634d1a650f3134c90e5f8f0" translate="yes" xml:space="preserve">
          <source>Every time the value of a form control changes, Angular runs validation and generates either a list of validation errors, which results in an INVALID status, or null, which results in a VALID status.</source>
          <target state="translated">フォームコントロールの値が変更されるたびに、Angularはバリデーションを実行し、バリデーションエラーのリストを生成します。</target>
        </trans-unit>
        <trans-unit id="dd09c3f326ebf515fdc2fa5975f51318b625c562" translate="yes" xml:space="preserve">
          <source>Every view that matches is rendered.</source>
          <target state="translated">一致するすべてのビューがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="c9ea72aa6a33f1cea5f19cd4eda459ed163d0bc3" translate="yes" xml:space="preserve">
          <source>Everything &lt;em&gt;outside&lt;/em&gt; the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; string stays with the host element (the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;) as it moves inside the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;. In this example, the &lt;code&gt;[&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;]=&quot;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&quot;&lt;/code&gt; stays on the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 文字列の&lt;em&gt;外に&lt;/em&gt;あるものはすべて、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; の内部に移動しても、ホスト要素（ &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ）に残ります。この例では、 &lt;code&gt;[&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;]=&quot;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&quot;&lt;/code&gt; &lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt; ] = &quot; &lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt; &quot;は &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; のままです。</target>
        </trans-unit>
        <trans-unit id="a52acc5c2622b4afcf25f3277cbd5a9d6275504c" translate="yes" xml:space="preserve">
          <source>Everything DOM and browser related, especially the pieces that help render into the DOM. This package also includes the &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModuleFactory&quot;&gt;bootstrapModuleFactory()&lt;/a&gt;&lt;/code&gt; method for bootstrapping applications for production builds that pre-compile with &lt;a href=&quot;aot-compiler&quot;&gt;AOT&lt;/a&gt;.</source>
          <target state="translated">DOMとブラウザに関連するすべてのもの、特にDOMへのレンダリングに役立つ部分。このパッケージには、&lt;a href=&quot;aot-compiler&quot;&gt;AOT&lt;/a&gt;でプリコンパイルされるプロダクションビルドのアプリケーションをブートストラップするための &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModuleFactory&quot;&gt;bootstrapModuleFactory()&lt;/a&gt;&lt;/code&gt; メソッドも含まれています。</target>
        </trans-unit>
        <trans-unit id="7fd19dd2368b5260e38d43ada7e94513c17625e5" translate="yes" xml:space="preserve">
          <source>Everything seems fine while you move about &lt;em&gt;within&lt;/em&gt; the app. But you'll see the problem right away if you refresh the browser or paste a link to an app page (called a &quot;deep link&quot;) into the browser address bar.</source>
          <target state="translated">アプリ&lt;em&gt;内&lt;/em&gt;を移動している間、すべてが正常に見えます。ただし、ブラウザーを更新するか、アプリのページへのリンク（「ディープリンク」と呼ばれます）をブラウザーのアドレスバーに貼り付けると、すぐに問題が発生します。</target>
        </trans-unit>
        <trans-unit id="476f59850ff759c08ef96a5b6f90743c095365fc" translate="yes" xml:space="preserve">
          <source>Everything that happens in the application runs inside the Angular zone. This is true whether the event originated in AngularJS or Angular code. The zone triggers Angular change detection after every event.</source>
          <target state="translated">アプリケーションで起こることはすべてAngularゾーン内で実行されます。これはイベントがAngularJSで発生したものであってもAngularコードで発生したものであっても当てはまります。ゾーンはすべてのイベントの後にAngularの変更検出をトリガーします。</target>
        </trans-unit>
        <trans-unit id="9904fc0bd7ef239d341a3f70df40d72cd9447a03" translate="yes" xml:space="preserve">
          <source>Examine the &lt;code&gt;src/app/app.component.ts&lt;/code&gt; file which defines two nested &lt;em&gt;#docregions&lt;/em&gt;.</source>
          <target state="translated">2つのネストされた&lt;em&gt;#docregions&lt;/em&gt;を定義する &lt;code&gt;src/app/app.component.ts&lt;/code&gt; ファイルを調べます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5bf18639605f3caf4766a97251e8f8fcdd388c0f" translate="yes" xml:space="preserve">
          <source>Examine the body and attempt to infer an appropriate MIME type for it.</source>
          <target state="translated">ボディを調べて、それに適した MIME タイプを推論しようとする。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="bc3538d0e01fab1a96b015d871befd4a7a613a0f" translate="yes" xml:space="preserve">
          <source>Example 1: an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;</source>
          <target state="translated">例1： &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c56ea49918b9baed94cf4bc0ee9f324efc8841a" translate="yes" xml:space="preserve">
          <source>Example 2</source>
          <target state="translated">例2</target>
        </trans-unit>
        <trans-unit id="c208d29c3a351702191cb12e42073c3aa92627a0" translate="yes" xml:space="preserve">
          <source>Example 2: a disabled button</source>
          <target state="translated">例2:無効化されたボタン</target>
        </trans-unit>
        <trans-unit id="f190c0373d03310809073d92f082eb8d1d07c49f" translate="yes" xml:space="preserve">
          <source>Example URLs:</source>
          <target state="translated">URLの例。</target>
        </trans-unit>
        <trans-unit id="64675219f6669783f53ac9c46b6042ac0e46004c" translate="yes" xml:space="preserve">
          <source>Example Value</source>
          <target state="translated">値の例</target>
        </trans-unit>
        <trans-unit id="7039ac7707efb335a98c12c3a2c84c943ba9b684" translate="yes" xml:space="preserve">
          <source>Example app structure</source>
          <target state="translated">アプリの構造例</target>
        </trans-unit>
        <trans-unit id="23197357f47cd7e9bcf255c1cd16f93e563c65f5" translate="yes" xml:space="preserve">
          <source>Example as TypeScript Decorator</source>
          <target state="translated">TypeScript デコレーターとしての例</target>
        </trans-unit>
        <trans-unit id="c96a08d329d79a2b34cde16eedb321e8c9af503a" translate="yes" xml:space="preserve">
          <source>Example of bad code</source>
          <target state="translated">不良コードの例</target>
        </trans-unit>
        <trans-unit id="0edfaaea0352e467e77e2d8e3cc50c76e32a8be0" translate="yes" xml:space="preserve">
          <source>Example patterns:</source>
          <target state="translated">パターン例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="003cb62ea56f8a36ffee819f126d05f79c0725ab" translate="yes" xml:space="preserve">
          <source>Example: A Popup Service</source>
          <target state="translated">例 ポップアップサービス</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="8a5c84373e05e765edba8087863e2d37b82fce37" translate="yes" xml:space="preserve">
          <source>Examples are given in &lt;code&gt;en-US&lt;/code&gt; locale.</source>
          <target state="translated">&lt;code&gt;en-US&lt;/code&gt; ロケールで例を示します。</target>
        </trans-unit>
        <trans-unit id="1a7d33f1e6ba692996c2f56fc305909ff9aba274" translate="yes" xml:space="preserve">
          <source>Examples of such scoped &lt;code&gt;HeroService&lt;/code&gt; singletons appear throughout the accompanying sample code, including &lt;code&gt;HeroBiosComponent&lt;/code&gt;, &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;, and &lt;code&gt;HeroesBaseComponent&lt;/code&gt;. Each of these components has its own &lt;code&gt;HeroService&lt;/code&gt; instance managing its own independent collection of heroes.</source>
          <target state="translated">そのようなスコープの例 &lt;code&gt;HeroService&lt;/code&gt; のシングルトンには、添付のサンプルコードを通して見える &lt;code&gt;HeroBiosComponent&lt;/code&gt; 、 &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; 、及び &lt;code&gt;HeroesBaseComponent&lt;/code&gt; 。これらの各コンポーネントには、独自のヒーローのコレクションを管理する独自の &lt;code&gt;HeroService&lt;/code&gt; インスタンスがあります。</target>
        </trans-unit>
        <trans-unit id="3f48849cd5523c2b69943155168b9778d339d47f" translate="yes" xml:space="preserve">
          <source>Executes a queried inner animation element within an animation sequence.</source>
          <target state="translated">アニメーションシーケンス内で、問い合わせのあった内側のアニメーション要素を実行します。</target>
        </trans-unit>
        <trans-unit id="61fe7283501d71d99c4ec0fd7a0535276f539aee" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;fn&lt;/code&gt; function synchronously in Angular's parent zone and returns value returned by the function.</source>
          <target state="translated">Angularの親ゾーンで同期的に &lt;code&gt;fn&lt;/code&gt; 関数を実行し、関数から返された値を返します。</target>
        </trans-unit>
        <trans-unit id="c46f1081e2a78d1668459efc5a4bfbdd070dbc68" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;fn&lt;/code&gt; function synchronously within the Angular zone and returns value returned by the function.</source>
          <target state="translated">Angularゾーン内で同期的に &lt;code&gt;fn&lt;/code&gt; 関数を実行し、関数から返された値を返します。</target>
        </trans-unit>
        <trans-unit id="d5ccdb0421f01b4d923f1b0285c7aef4a7e41120" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;fn&lt;/code&gt; function synchronously within the Angular zone as a task and returns value returned by the function.</source>
          <target state="translated">実行 &lt;code&gt;fn&lt;/code&gt; 同期関数によって返されるタスクと戻り値として角度ゾーン内の機能。</target>
        </trans-unit>
        <trans-unit id="14cc91675585ad5953e8dc0628dacd93df3a1453" translate="yes" xml:space="preserve">
          <source>Existing &lt;code&gt;token&lt;/code&gt; to return. (Equivalent to &lt;code&gt;injector.get(&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;)&lt;/code&gt;)</source>
          <target state="translated">返す既存の &lt;code&gt;token&lt;/code&gt; 。（ &lt;code&gt;injector.get(&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;)&lt;/code&gt; と同等）</target>
        </trans-unit>
        <trans-unit id="320f39c06ef464dd0024c09f761558945533dc7d" translate="yes" xml:space="preserve">
          <source>ExistingProvider</source>
          <target state="translated">ExistingProvider</target>
        </trans-unit>
        <trans-unit id="cc2dec566751219059d9f8763a354f8762f0a111" translate="yes" xml:space="preserve">
          <source>ExistingSansProvider</source>
          <target state="translated">ExistingSansProvider</target>
        </trans-unit>
        <trans-unit id="4c4dcf4591979506d035a6ac9394f2530bb0a00e" translate="yes" xml:space="preserve">
          <source>Expect that a single request has been made which matches the given URL, and return its mock.</source>
          <target state="translated">与えられた URL にマッチするリクエストが一つだけ行われたことを期待して、そのモックを返します。</target>
        </trans-unit>
        <trans-unit id="09745b035a7bff7b32ffdade443909f9f0114f0d" translate="yes" xml:space="preserve">
          <source>Expect that a single request has been made which matches the given condition, and return its mock.</source>
          <target state="translated">与えられた条件にマッチするリクエストが一つあったことを期待して、そのモックを返します。</target>
        </trans-unit>
        <trans-unit id="a6eb24a59dddd06afae77ef7bb648d8870f43d27" translate="yes" xml:space="preserve">
          <source>Expect that a single request has been made which matches the given parameters, and return its mock.</source>
          <target state="translated">与えられたパラメータにマッチする単一のリクエストが行われたことを期待し、そのモックを返します。</target>
        </trans-unit>
        <trans-unit id="0b87e12001cb43938518503996b08243ca0cf034" translate="yes" xml:space="preserve">
          <source>Expect that a single request has been made which matches the given predicate function, and return its mock.</source>
          <target state="translated">与えられた述語関数にマッチするリクエストが一つだけ行われたことを期待し、そのモックを返します。</target>
        </trans-unit>
        <trans-unit id="f422cf2a93648f51c72b81baaadce94d4f9a23f5" translate="yes" xml:space="preserve">
          <source>Expect that no requests have been made which match the given URL.</source>
          <target state="translated">指定された URL に一致するリクエストが行われていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="e8d12406299d4ed82875bbb2f88105f188e80475" translate="yes" xml:space="preserve">
          <source>Expect that no requests have been made which match the given condition.</source>
          <target state="translated">指定された条件に一致するリクエストが行われていないことを期待します。</target>
        </trans-unit>
        <trans-unit id="ba3b284a816662d49b2560b24229c09966daf2d1" translate="yes" xml:space="preserve">
          <source>Expect that no requests have been made which match the given parameters.</source>
          <target state="translated">与えられたパラメータにマッチするリクエストが行われていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="4efe1b49671948d5bd952bb7856f5548f402044a" translate="yes" xml:space="preserve">
          <source>Expect that no requests have been made which match the given predicate function.</source>
          <target state="translated">与えられた述語関数にマッチするリクエストが行われていないことを期待します。</target>
        </trans-unit>
        <trans-unit id="c36ea39d115e54d57c3e4f6133d6e9fe7be806a9" translate="yes" xml:space="preserve">
          <source>Expecting and answering requests</source>
          <target state="translated">リクエストの期待と回答</target>
        </trans-unit>
        <trans-unit id="0d113a5dec63637c0ea24bb949a1452cadd75bd8" translate="yes" xml:space="preserve">
          <source>Experienced developers agree that components should be cheap and safe to construct.</source>
          <target state="translated">経験豊富な開発者は、コンポーネントは安くて安全に構築できるものであるべきだということに同意しています。</target>
        </trans-unit>
        <trans-unit id="6d79bd8554e5a6e5e29f39873b7262a75b37e699" translate="yes" xml:space="preserve">
          <source>Experiment with these possibilities at your leisure.</source>
          <target state="translated">これらの可能性を自由に試してみてください。</target>
        </trans-unit>
        <trans-unit id="151cc3279d56b07805e6451e1fc2e21759b64665" translate="yes" xml:space="preserve">
          <source>Explore Angular's inventory of built-in pipes in the &lt;a href=&quot;api?type=pipe&quot;&gt;API Reference&lt;/a&gt;. Try writing a custom pipe and perhaps contributing it to the community.</source>
          <target state="translated">Angularの組み込みパイプの一覧を&lt;a href=&quot;api?type=pipe&quot;&gt;APIリファレンスで調べてください&lt;/a&gt;。カスタムパイプを作成して、コミュニティに貢献してみてください。</target>
        </trans-unit>
        <trans-unit id="0b142311de0506d50c14f42d89ab5fba534af5e4" translate="yes" xml:space="preserve">
          <source>Explore the options and combinations on your own.</source>
          <target state="translated">選択肢や組み合わせを自分で探ってみましょう。</target>
        </trans-unit>
        <trans-unit id="e2f8ba18099b12842f93d8420df1de465b8b78d8" translate="yes" xml:space="preserve">
          <source>Exponential backoff</source>
          <target state="translated">指数的バックオフ</target>
        </trans-unit>
        <trans-unit id="4e81c81e62d9821e35d6968289a5da62123f95a5" translate="yes" xml:space="preserve">
          <source>Exponential backoff is a technique in which you retry an API after failure, making the time in between retries longer after each consecutive failure, with a maximum number of retries after which the request is considered to have failed. This can be quite complex to implement with promises and other methods of tracking AJAX calls. With observables, it is very easy:</source>
          <target state="translated">指数的バックオフは失敗した後にAPIを再試行するテクニックで、リクエストが失敗したとみなされた後の最大再試行回数で、各連続した失敗の後に再試行の間の時間を長くします。これはプロミスとAJAXコールを追跡する他のメソッドで実装するには非常に複雑になります。観測値を使えば、非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="b2d600564a4eeee05a74ffc3d3b30646d2efbd86" translate="yes" xml:space="preserve">
          <source>Export &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes that components in &lt;em&gt;other&lt;/em&gt; NgModules are able to reference in their templates. These are your &lt;em&gt;public&lt;/em&gt; classes. If you don't export a declarable class, it stays &lt;em&gt;private&lt;/em&gt;, visible only to other components declared in this NgModule.</source>
          <target state="translated">&lt;em&gt;他の&lt;/em&gt; NgModuleのコンポーネントがテンプレートで参照できる&lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;宣言可能な&lt;/a&gt;クラスをエクスポートします。これらは&lt;em&gt;公開&lt;/em&gt;クラスです。宣言可能&lt;em&gt;な&lt;/em&gt;クラスをエクスポートしない場合、クラスは&lt;em&gt;プライベートの&lt;/em&gt;ままで、このNgModuleで宣言された他のコンポーネントからのみ可視です。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3f8b89ece198f478a08332010ebd982d8d15de3" translate="yes" xml:space="preserve">
          <source>Export it from the file where you wrote it.</source>
          <target state="translated">書いたファイルからエクスポートします。</target>
        </trans-unit>
        <trans-unit id="01d9a0ac1caef5b7463f6a6cc45c04c774154790" translate="yes" xml:space="preserve">
          <source>Exported declarations are the module's &lt;em&gt;public API&lt;/em&gt;. A component in another module can &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;use&lt;/a&gt;&lt;em&gt;this&lt;/em&gt; module's &lt;code&gt;UserComponent&lt;/code&gt; if it imports this module and this module exports &lt;code&gt;UserComponent&lt;/code&gt;.</source>
          <target state="translated">エクスポートされた宣言は、モジュールの&lt;em&gt;パブリックAPI&lt;/em&gt;です。別のモジュール内のコンポーネントができます&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;使用して&lt;/a&gt;&lt;em&gt;、この&lt;/em&gt;モジュールの &lt;code&gt;UserComponent&lt;/code&gt; を、それがこのモジュールと、このモジュールの輸出輸入場合 &lt;code&gt;UserComponent&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="0e16537914a0163e01ecd7e0945bc56c50eb3849" translate="yes" xml:space="preserve">
          <source>Exports</source>
          <target state="translated">Exports</target>
        </trans-unit>
        <trans-unit id="9e7c4c507448f86f52a7f79a35434aa602954321" translate="yes" xml:space="preserve">
          <source>Exports &lt;code&gt;&lt;a href=&quot;../browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; with additional &lt;a href=&quot;../../../guide/glossary#provider&quot;&gt;dependency-injection providers&lt;/a&gt; for use with animations. See &lt;a href=&quot;../../../guide/animations&quot;&gt;Animations&lt;/a&gt;.</source>
          <target state="translated">アニメーションで使用するために、追加の&lt;a href=&quot;../../../guide/glossary#provider&quot;&gt;依存性注入プロバイダー&lt;/a&gt;と共に &lt;code&gt;&lt;a href=&quot;../browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をエクスポートします。&lt;a href=&quot;../../../guide/animations&quot;&gt;アニメーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b48d98d31db3b67ff452be710bcaa0679dddb978" translate="yes" xml:space="preserve">
          <source>Exports &lt;code&gt;&lt;a href=&quot;browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; with additional &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;dependency-injection providers&lt;/a&gt; for use with animations. See &lt;a href=&quot;../../guide/animations&quot;&gt;Animations&lt;/a&gt;.</source>
          <target state="translated">アニメーションで使用するために、追加の&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;依存性注入プロバイダー&lt;/a&gt;と共に &lt;code&gt;&lt;a href=&quot;browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をエクスポートします。&lt;a href=&quot;../../guide/animations&quot;&gt;アニメーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="41502da065d88fa29c02515549f2ef881718d2ef" translate="yes" xml:space="preserve">
          <source>Exports a constant named &lt;code&gt;slideInAnimation&lt;/code&gt; set to an animation trigger named &lt;em&gt;&lt;code&gt;routeAnimation&lt;/code&gt;&lt;/em&gt;;</source>
          <target state="translated">&lt;code&gt;slideInAnimation&lt;/code&gt; セットという名前の定数をrouteAnimationという名前のアニメーショントリガーに&lt;em&gt; &lt;code&gt;routeAnimation&lt;/code&gt; &lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b3015612e62943ffe8d3d9bd16015f003caf27a4" translate="yes" xml:space="preserve">
          <source>Exports all the basic Angular directives and pipes, such as &lt;code&gt;&lt;a href=&quot;common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt;, and so on. Re-exported by &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is included automatically in the root &lt;code&gt;AppModule&lt;/code&gt; when you create a new app with the CLI &lt;code&gt;new&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; などのすべての基本的なAngularディレクティブとパイプをエクスポートします。CLIの &lt;code&gt;new&lt;/code&gt; コマンドを使用して新しいアプリを作成すると、ルート &lt;code&gt;AppModule&lt;/code&gt; に自動的に含まれる &lt;code&gt;&lt;a href=&quot;platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; によって再エクスポートされます。</target>
        </trans-unit>
        <trans-unit id="2694c141ab9c7bb5e48066c90e9cad70c5d09313" translate="yes" xml:space="preserve">
          <source>Exports all the basic Angular directives and pipes, such as &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt;, and so on. Re-exported by &lt;code&gt;&lt;a href=&quot;../platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is included automatically in the root &lt;code&gt;AppModule&lt;/code&gt; when you create a new app with the CLI &lt;code&gt;new&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; などのすべての基本的なAngularディレクティブとパイプをエクスポートします。CLIの &lt;code&gt;new&lt;/code&gt; コマンドを使用して新しいアプリを作成すると、ルート &lt;code&gt;AppModule&lt;/code&gt; に自動的に含まれる &lt;code&gt;&lt;a href=&quot;../platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; によって再エクスポートされます。</target>
        </trans-unit>
        <trans-unit id="6795e3188c42a45041eef8aa7e1f578ba6e66b5a" translate="yes" xml:space="preserve">
          <source>Exports required infrastructure for all Angular apps. Included by default in all Angular apps created with the CLI &lt;code&gt;new&lt;/code&gt; command. Re-exports &lt;code&gt;&lt;a href=&quot;../common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt;, making their exports and providers available to all apps.</source>
          <target state="translated">すべてのAngularアプリに必要なインフラストラクチャをエクスポートします。CLIの &lt;code&gt;new&lt;/code&gt; コマンドで作成されたすべてのAngularアプリにデフォルトで含まれています。 &lt;code&gt;&lt;a href=&quot;../common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; を再エクスポートし、それらのエクスポートとプロバイダーをすべてのアプリで利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="1658cf2c7cfb18562b2e6455248a43094677b401" translate="yes" xml:space="preserve">
          <source>Exports required infrastructure for all Angular apps. Included by default in all Angular apps created with the CLI &lt;code&gt;new&lt;/code&gt; command. Re-exports &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt;, making their exports and providers available to all apps.</source>
          <target state="translated">すべてのAngularアプリに必要なインフラストラクチャをエクスポートします。CLIの &lt;code&gt;new&lt;/code&gt; コマンドで作成されたすべてのAngularアプリにデフォルトで含まれています。 &lt;code&gt;&lt;a href=&quot;common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;core/applicationmodule&quot;&gt;ApplicationModule&lt;/a&gt;&lt;/code&gt; を再エクスポートし、それらのエクスポートとプロバイダーをすべてのアプリで利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="f2ba8fed8d15900671cce4edf095bd055d04eaf8" translate="yes" xml:space="preserve">
          <source>Exports the required infrastructure and directives for reactive forms, making them available for import by NgModules that import this module.</source>
          <target state="translated">リアクティブフォームに必要なインフラストラクチャとディレクティブをエクスポートし、このモジュールをインポートする NgModules からインポートできるようにします。</target>
        </trans-unit>
        <trans-unit id="cf940b173d6f27a08c3413c736e512605c260d5a" translate="yes" xml:space="preserve">
          <source>Exports the required providers and directives for template-driven forms, making them available for import by NgModules that import this module.</source>
          <target state="translated">テンプレート駆動型フォームに必要なプロバイダとディレクティブをエクスポートし、このモジュールをインポートする NgModules がインポートできるようにします。</target>
        </trans-unit>
        <trans-unit id="4a41b115841e5fbc7cf1b18afb3b83dcc3891f13" translate="yes" xml:space="preserve">
          <source>Expression binding</source>
          <target state="translated">表情のバインディング</target>
        </trans-unit>
        <trans-unit id="1c2f7d3b6d050a5090df922638bfad2dec21b4cc" translate="yes" xml:space="preserve">
          <source>Expression context</source>
          <target state="translated">表現コンテキスト</target>
        </trans-unit>
        <trans-unit id="251f6bb4517daac85b87bb0755a86fb3c179c9de" translate="yes" xml:space="preserve">
          <source>Expression form not supported</source>
          <target state="translated">表現形式はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="7ea5c0a470ed5a320359df1794918f299c3b7f04" translate="yes" xml:space="preserve">
          <source>Expression guidelines</source>
          <target state="translated">表現ガイドライン</target>
        </trans-unit>
        <trans-unit id="5be453a082738df0fbb95e05d3e768fb61344326" translate="yes" xml:space="preserve">
          <source>Expression syntax limitations</source>
          <target state="translated">表現構文の制限</target>
        </trans-unit>
        <trans-unit id="7b223b9fc21308f80b1f8910f97dd7bff5c30ac0" translate="yes" xml:space="preserve">
          <source>Expression: &lt;code&gt;&amp;lt;comp [name]=&quot;username&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">式： &lt;code&gt;&amp;lt;comp [name]=&quot;username&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="67424e47eeb543e15096b4627ceaf8f617ded945" translate="yes" xml:space="preserve">
          <source>Expressions should finish quickly or the user experience may drag, especially on slower devices. Consider caching values when their computation is expensive.</source>
          <target state="translated">式を素早く終了させないと、特に遅いデバイスではユーザーエクスペリエンスが低下する可能性があります。値の計算にコストがかかる場合は、値のキャッシュを検討してください。</target>
        </trans-unit>
        <trans-unit id="4e67701453b98c6aa13406f479207d8dbab6eeea" translate="yes" xml:space="preserve">
          <source>Extend the &lt;code&gt;AuthGuard&lt;/code&gt; to protect when navigating between the &lt;code&gt;admin&lt;/code&gt; routes. Open &lt;code&gt;auth.guard.ts&lt;/code&gt; and add the &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; interface to the imported tokens from the router package.</source>
          <target state="translated">&lt;code&gt;AuthGuard&lt;/code&gt; を拡張して、 &lt;code&gt;admin&lt;/code&gt; ルート間を移動するときに保護します。 &lt;code&gt;auth.guard.ts&lt;/code&gt; を開き、 &lt;code&gt;&lt;a href=&quot;../api/router/canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;&lt;/code&gt; インターフェースをルーターパッケージからインポートしたトークンに追加します。</target>
        </trans-unit>
        <trans-unit id="78dcf13062dfaf21c3fb6554eca5eab8f3b3813c" translate="yes" xml:space="preserve">
          <source>Extend this base class to implement custom rendering. By default, Angular renders a template into DOM. You can use custom rendering to intercept rendering calls, or to render to something other than DOM.</source>
          <target state="translated">この基底クラスを拡張してカスタムレンダリングを実装します。デフォルトではAngularはテンプレートをDOMにレンダリングします。レンダリングコールをインターセプトしたり、DOM以外にレンダリングしたりするためにカスタムレンダリングを使うことができます。</target>
        </trans-unit>
        <trans-unit id="dc92ca4b94985f880635d936b5ae59b3e5edc4c2" translate="yes" xml:space="preserve">
          <source>Extended interactions between a data service and the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; can be complex and difficult to mock with spies.</source>
          <target state="translated">データサービスと &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; の間の拡張された対話は複雑で、スパイを模倣するのが困難な場合があります。</target>
        </trans-unit>
        <trans-unit id="8b211f855a434be61c61a4c8dba34349d28c811e" translate="yes" xml:space="preserve">
          <source>Extends &lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt;&lt;/a&gt; for Angular by adding the &lt;code&gt;&lt;a href=&quot;eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">Angular用の&lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt; &lt;/a&gt;を拡張するために、 &lt;code&gt;&lt;a href=&quot;eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="dfc0709b546a7a92e728bffa766a855dff062384" translate="yes" xml:space="preserve">
          <source>Extensibility through NgModule imports is a primary goal of the NgModule system. Merging NgModule providers into the application injector makes it easy for a module library to enrich the entire application with new services. By adding the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; once, every application component can make HTTP requests.</source>
          <target state="translated">NgModuleインポートによる拡張性は、NgModuleシステムの主要な目標です。NgModuleプロバイダーをアプリケーションインジェクターにマージすると、モジュールライブラリがアプリケーション全体に新しいサービスを簡単に追加できます。 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を一度追加することで、すべてのアプリケーションコンポーネントがHTTPリクエストを行うことができます。</target>
        </trans-unit>
        <trans-unit id="941a3f639b19a9b73ed93ee36698dac421a92539" translate="yes" xml:space="preserve">
          <source>External and global style files</source>
          <target state="translated">外部スタイルファイルとグローバルスタイルファイル</target>
        </trans-unit>
        <trans-unit id="c2dba996d324b0c203c96719673d909e6e8ef0d1" translate="yes" xml:space="preserve">
          <source>ExtraOptions</source>
          <target state="translated">ExtraOptions</target>
        </trans-unit>
        <trans-unit id="f4c7ceadda503dc9b045dfbe183ee849d4cde2dd" translate="yes" xml:space="preserve">
          <source>Extract all licenses in a separate file.</source>
          <target state="translated">すべてのライセンスを別のファイルに展開します。</target>
        </trans-unit>
        <trans-unit id="2d497a65ab08388cae16fc3633cb443f795a662b" translate="yes" xml:space="preserve">
          <source>Extract css from global styles into css files instead of js ones.</source>
          <target state="translated">グローバルスタイルからcssをjsの代わりにcssファイルに抽出します。</target>
        </trans-unit>
        <trans-unit id="edcdeca05b2685d5d99bdabc04cc42c9b1caa148" translate="yes" xml:space="preserve">
          <source>Extract templates and styles to their own files</source>
          <target state="translated">テンプレートとスタイルを独自のファイルに抽出</target>
        </trans-unit>
        <trans-unit id="fbf4a03e0810426f0735a9f354fd8e8fa7711591" translate="yes" xml:space="preserve">
          <source>Extract the &lt;code&gt;id&lt;/code&gt; from the route</source>
          <target state="translated">ルートから &lt;code&gt;id&lt;/code&gt; を抽出します</target>
        </trans-unit>
        <trans-unit id="264fdaa93431a7bc1ddb2c5f37762583f253762b" translate="yes" xml:space="preserve">
          <source>Extract the &lt;code&gt;id&lt;/code&gt; route parameter</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; routeパラメータを抽出します</target>
        </trans-unit>
        <trans-unit id="71b1b86ebc85d12dee5fceed6512d0a9de6c0462" translate="yes" xml:space="preserve">
          <source>Extracting localizable text into a file that you can send out to be translated.</source>
          <target state="translated">ローカライズ可能なテキストを、翻訳して送り出せるファイルに抽出します。</target>
        </trans-unit>
        <trans-unit id="07271f756965cd3fc145c36cc34b953de23f0be0" translate="yes" xml:space="preserve">
          <source>Extracts i18n messages from source code.</source>
          <target state="translated">ソースコードからi18nメッセージを抽出します。</target>
        </trans-unit>
        <trans-unit id="27865d88125d0d3c86f80a0d8ec5973e323d2f1a" translate="yes" xml:space="preserve">
          <source>Extracts the part of the URL that should be handled by the router. The rest of the URL will remain untouched.</source>
          <target state="translated">ルーターが処理すべき URL の部分を抽出します。残りの URL は手つかずのままになります。</target>
        </trans-unit>
        <trans-unit id="9fb4f1d17ef878fbfbe96076658397ad86bd5264" translate="yes" xml:space="preserve">
          <source>FILES</source>
          <target state="translated">FILES</target>
        </trans-unit>
        <trans-unit id="5ec4d531411beddc087228583dbee8c24ec275c5" translate="yes" xml:space="preserve">
          <source>Facilitate web crawlers (SEO)</source>
          <target state="translated">ウェブクローラー(SEO)の円滑化</target>
        </trans-unit>
        <trans-unit id="0cff306d02212a5fb8b4278c3cb5a0c5adaa8578" translate="yes" xml:space="preserve">
          <source>Facilitate web crawlers through &lt;a href=&quot;https://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf&quot;&gt;search engine optimization (SEO)&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf&quot;&gt;検索エンジン最適化（SEO）&lt;/a&gt;によってWebクローラーを促進する</target>
        </trans-unit>
        <trans-unit id="22360fe45691380a6abe3870500a10494004451a" translate="yes" xml:space="preserve">
          <source>Factory function which can return an instance of an object represented by a key.</source>
          <target state="translated">キーで表されるオブジェクトのインスタンスを返すことができるファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="9db5e3ce04fe9341654a228ff462554c1799f4b0" translate="yes" xml:space="preserve">
          <source>Factory functions must be exported, named functions. The AOT compiler does not support lambda expressions (&quot;arrow functions&quot;) for factory functions.</source>
          <target state="translated">ファクトリー関数は、関数名を付けてエクスポートする必要があります。AOT コンパイラは工場関数のラムダ式(「矢印関数」)をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="9c3623fa8d663dbe5f5fc0902ec6339381d8c3a8" translate="yes" xml:space="preserve">
          <source>Factory method that returns an instance of the $locationShim</source>
          <target state="translated">のインスタンスを返すファクトリメソッド</target>
        </trans-unit>
        <trans-unit id="3881c8ff14ca5b27a9e6003fc51568bda04676ec" translate="yes" xml:space="preserve">
          <source>Factory providers</source>
          <target state="translated">工場の提供者</target>
        </trans-unit>
        <trans-unit id="bd15eb5e476a7673ffd19497be46407f1482aeca" translate="yes" xml:space="preserve">
          <source>Factory providers: &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ファクトリープロバイダー： &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d28d31751c9ae2080733690359256390a562cf2d" translate="yes" xml:space="preserve">
          <source>Factory used to create new strategies for each NgElement instance.</source>
          <target state="translated">各NgElementインスタンスの新しいストラテジーを作成するためのファクトリー。</target>
        </trans-unit>
        <trans-unit id="57ed3e29bc0b10573d967d11e5e31aca1f76bac8" translate="yes" xml:space="preserve">
          <source>FactoryProvider</source>
          <target state="translated">FactoryProvider</target>
        </trans-unit>
        <trans-unit id="704269b7abb2943ffc9b1a4c538f6a50b5f6a9e3" translate="yes" xml:space="preserve">
          <source>FactorySansProvider</source>
          <target state="translated">FactorySansProvider</target>
        </trans-unit>
        <trans-unit id="140f278d5afda10341fae9ebc6cec13da6d7d5de" translate="yes" xml:space="preserve">
          <source>Fail-safe</source>
          <target state="translated">Fail-safe</target>
        </trans-unit>
        <trans-unit id="c771b9357d9ed785767364181303bab73d06c8a7" translate="yes" xml:space="preserve">
          <source>Failed requests can be retried easily.</source>
          <target state="translated">失敗したリクエストは簡単に再試行することができます。</target>
        </trans-unit>
        <trans-unit id="60e796c101570c158dc15bfc77cbfa969a98202a" translate="yes" xml:space="preserve">
          <source>Fallback configuration examples</source>
          <target state="translated">フォールバック設定例</target>
        </trans-unit>
        <trans-unit id="8db6a2f1d3b7e19e518ffa8979d7ad15359af460" translate="yes" xml:space="preserve">
          <source>Fast</source>
          <target state="translated">Fast</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">Feature</target>
        </trans-unit>
        <trans-unit id="d15ce705a0760aa0d74e8b742b908052209ab42b" translate="yes" xml:space="preserve">
          <source>Feature (for routing)</source>
          <target state="translated">機能(ルーティング用</target>
        </trans-unit>
        <trans-unit id="e0e655b7b96f5679636a195d016f1315d474dbc2" translate="yes" xml:space="preserve">
          <source>Feature Module</source>
          <target state="translated">機能モジュール</target>
        </trans-unit>
        <trans-unit id="ae73d39983f27537395a45d0ca6a07cf131b0a2f" translate="yes" xml:space="preserve">
          <source>Feature Modules</source>
          <target state="translated">機能モジュール</target>
        </trans-unit>
        <trans-unit id="bb5acf03a7329b562675669cb070d3d9ad06b7fd" translate="yes" xml:space="preserve">
          <source>Feature area routes rarely (if ever) cross with routes of other features.</source>
          <target state="translated">フィーチャーエリアのルートが他のフィーチャーのルートと交差することはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="02f821fca6279d01d9f480f97f0900a9651fa152" translate="yes" xml:space="preserve">
          <source>Feature modules</source>
          <target state="translated">機能モジュール</target>
        </trans-unit>
        <trans-unit id="a38902e95440d30cb0d4dfb2fcfecf803cecd865" translate="yes" xml:space="preserve">
          <source>Feature modules are NgModules for the purpose of organizing code.</source>
          <target state="translated">フィーチャーモジュールは、コードの整理を目的としたNgModulesです。</target>
        </trans-unit>
        <trans-unit id="c8e5aeaa7dd1fd777c6a3b8e55cdf8ce15e9ca39" translate="yes" xml:space="preserve">
          <source>Feature modules are modules you create around specific application business domains, user workflows, and utility collections. They support your app by containing a particular feature, such as routes, services, widgets, etc. To conceptualize what a feature module might be in your app, consider that if you would put the files related to a certain functionality, like a search, in one folder, that the contents of that folder would be a feature module that you might call your &lt;code&gt;SearchModule&lt;/code&gt;. It would contain all of the components, routing, and templates that would make up the search functionality.</source>
          <target state="translated">機能モジュールは、特定のアプリケーションビジネスドメイン、ユーザーワークフロー、ユーティリティコレクションを中心に作成するモジュールです。ルート、サービス、ウィジェットなどの特定の機能を含めることでアプリをサポートします。アプリの機能モジュールが何であるかを概念化するには、検索などの特定の機能に関連するファイルを配置する場合、 1つのフォルダーでは、そのフォルダーのコンテンツは &lt;code&gt;SearchModule&lt;/code&gt; と呼ばれる機能モジュールになります。検索機能を構成するすべてのコンポーネント、ルーティング、およびテンプレートが含まれます。</target>
        </trans-unit>
        <trans-unit id="2d370eb3e0cb88f60b0ad36c32be6367b1bc12b1" translate="yes" xml:space="preserve">
          <source>Feature modules vs. root modules</source>
          <target state="translated">機能モジュールとルートモジュールの比較</target>
        </trans-unit>
        <trans-unit id="30d433e3dc5c7d9c3c2476cf88fcc2993919b275" translate="yes" xml:space="preserve">
          <source>Feature, AppModule</source>
          <target state="translated">機能、AppModule</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="7386694791e5d866f123cf883931b4babba599e3" translate="yes" xml:space="preserve">
          <source>Features and APIs that were deprecated in v6 or earlier are candidates for removal in version 9 or any later major version. For information about Angular's deprecation and removal practices, see &lt;a href=&quot;releases#deprecation-practices&quot;&gt;Angular Release Practices&lt;/a&gt;.</source>
          <target state="translated">v6以前で廃止された機能とAPIは、バージョン9以降のメジャーバージョンで削除される可能性があります。Angularの非推奨と削除のプラクティスについては、&lt;a href=&quot;releases#deprecation-practices&quot;&gt;Angularリリースプラクティスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="c8d7677e19495f21da984fe4e2829b7ca91b27c7" translate="yes" xml:space="preserve">
          <source>Feedback</source>
          <target state="translated">Feedback</target>
        </trans-unit>
        <trans-unit id="09051c1f9086308637f6293f73473c42514dca6c" translate="yes" xml:space="preserve">
          <source>Feel free to unsubscribe anyway. It is harmless and never a bad practice.</source>
          <target state="translated">とにかく気軽に購読を解除してください。それは無害であり、決して悪い習慣ではありません。</target>
        </trans-unit>
        <trans-unit id="d7b8f7b8afaa214c58f7a34291b2fd711807ee31" translate="yes" xml:space="preserve">
          <source>Fetch data before navigating</source>
          <target state="translated">移動する前にデータを取得する</target>
        </trans-unit>
        <trans-unit id="c326a4660b674d2f6ea82687a1e1abae2337541f" translate="yes" xml:space="preserve">
          <source>Field</source>
          <target state="translated">Field</target>
        </trans-unit>
        <trans-unit id="d2a01ccdcf7f8842874a563f805737c9e9eccfb1" translate="yes" xml:space="preserve">
          <source>Field type</source>
          <target state="translated">フィールドタイプ</target>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="translated">File</target>
        </trans-unit>
        <trans-unit id="2aabcfc2668a910cfcd432d597ea7e5c171cf855" translate="yes" xml:space="preserve">
          <source>File Name</source>
          <target state="translated">ファイル名</target>
        </trans-unit>
        <trans-unit id="6e75764f6be72d64faaa7cd05889744083a1ffec" translate="yes" xml:space="preserve">
          <source>File Names</source>
          <target state="translated">ファイル名</target>
        </trans-unit>
        <trans-unit id="2d334eb4e2ffc4a7b13f835350407bcaeabdf12f" translate="yes" xml:space="preserve">
          <source>File structure conventions</source>
          <target state="translated">ファイル構造の規則</target>
        </trans-unit>
        <trans-unit id="d8e22f8227ce02443a1edaaa12b696d7cbf01c92" translate="yes" xml:space="preserve">
          <source>File templates and snippets</source>
          <target state="translated">ファイルテンプレートとスニペット</target>
        </trans-unit>
        <trans-unit id="063edefb4c2d1701a0ed78694d38ac8c815553ef" translate="yes" xml:space="preserve">
          <source>Files at the top level of &lt;code&gt;src/&lt;/code&gt; support testing and running your application. Subfolders contain the application source and application-specific configuration.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; 最上位レベルのファイルは、アプリケーションのテストと実行をサポートしています。サブフォルダーには、アプリケーションソースとアプリケーション固有の構成が含まれます。</target>
        </trans-unit>
        <trans-unit id="2581c717d3705e36d5ae42648104d74ef10e9967" translate="yes" xml:space="preserve">
          <source>Files in that folder, such as &lt;code&gt;src/style-paths/_variables.scss&lt;/code&gt;, can be imported from anywhere in your project without the need for a relative path:</source>
          <target state="translated">&lt;code&gt;src/style-paths/_variables.scss&lt;/code&gt; などのそのフォルダー内のファイルは、相対パスを必要とせずにプロジェクトの任意の場所からインポートできます。</target>
        </trans-unit>
        <trans-unit id="6230bbabc49370876e25014799db0c6c42172a85" translate="yes" xml:space="preserve">
          <source>Files inside &lt;code&gt;src/&lt;/code&gt; &quot;belong&quot; to your app. Add new Typescript, HTML and CSS files inside the &lt;code&gt;src/&lt;/code&gt; directory, most of them inside &lt;code&gt;src/app&lt;/code&gt;, unless told to do otherwise.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; 内のファイルはアプリに「属します」。特に指示がない限り、新しいTypescript、HTML、CSSファイルを &lt;code&gt;src/&lt;/code&gt; ディレクトリ内に追加します。ほとんどのファイルは &lt;code&gt;src/app&lt;/code&gt; 内に追加します。</target>
        </trans-unit>
        <trans-unit id="93b86013967961de693f58926e9367d098d2436a" translate="yes" xml:space="preserve">
          <source>Files outside &lt;code&gt;src/&lt;/code&gt; concern building, deploying, and testing your app. They include configuration files and external dependencies.</source>
          <target state="translated">&lt;code&gt;src/&lt;/code&gt; 外のファイルは、アプリのビルド、デプロイ、テストに関係しています。これには、構成ファイルと外部依存関係が含まれます。</target>
        </trans-unit>
        <trans-unit id="8e7b503470f31aa4ba3e1eb4f0c06d4336be101d" translate="yes" xml:space="preserve">
          <source>Files to exclude from linting.</source>
          <target state="translated">リンティングから除外するファイル。</target>
        </trans-unit>
        <trans-unit id="eb8f826c74af1c4e8b030a3ffa7a58e9214f5b1a" translate="yes" xml:space="preserve">
          <source>Files to include in linting.</source>
          <target state="translated">リンティングに含めるファイル。</target>
        </trans-unit>
        <trans-unit id="cd9a5554356141790a82e86864449b480ac00a5e" translate="yes" xml:space="preserve">
          <source>Filipino</source>
          <target state="translated">Filipino</target>
        </trans-unit>
        <trans-unit id="e8f5b7dc089747a4157273eab897b73c8e3f284f" translate="yes" xml:space="preserve">
          <source>Filter animation example</source>
          <target state="translated">フィルターアニメーションの例</target>
        </trans-unit>
        <trans-unit id="9075edca21736af901d2add18e4d9491f2452b4d" translate="yes" xml:space="preserve">
          <source>Filtering</source>
          <target state="translated">Filtering</target>
        </trans-unit>
        <trans-unit id="9b0ee140852ac450ad6053b54418dea6211f531b" translate="yes" xml:space="preserve">
          <source>Filtering and especially sorting are expensive operations. The user experience can degrade severely for even moderate-sized lists when Angular calls these pipe methods many times per second. &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; have often been abused in AngularJS apps, leading to complaints that Angular itself is slow. That charge is fair in the indirect sense that AngularJS prepared this performance trap by offering &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt; in the first place.</source>
          <target state="translated">フィルタリング、特にソートは、コストのかかる操作です。 Angularがこれらのパイプメソッドを毎秒何度も呼び出すと、中程度のサイズのリストでもユーザーエクスペリエンスが大幅に低下する可能性があります。 &lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;orderBy&lt;/code&gt; は、AngularJSアプリで頻繁に悪用されており、Angular自体が遅いという不満を引き起こしています。 AngularJSが &lt;code&gt;orderBy&lt;/code&gt; &lt;code&gt;filter&lt;/code&gt; とorderByを提供することでこのパフォーマンストラップを準備したという間接的な意味では、この料金は公平です。</target>
        </trans-unit>
        <trans-unit id="9e87f3431466c092c7183f3e099c67b1fc572eed" translate="yes" xml:space="preserve">
          <source>Filtering request URLs</source>
          <target state="translated">リクエストURLのフィルタリング</target>
        </trans-unit>
        <trans-unit id="9abf0754128b4f71327ecb4a6bd618b08cb61dcb" translate="yes" xml:space="preserve">
          <source>Filtering streams</source>
          <target state="translated">ストリームのフィルタリング</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="841d791c3a7198d7e6ba6397710459d775ed9052" translate="yes" xml:space="preserve">
          <source>Filters/pipes</source>
          <target state="translated">Filters/pipes</target>
        </trans-unit>
        <trans-unit id="06779fd25acbc603a9bd6406d87a230939736eea" translate="yes" xml:space="preserve">
          <source>Final ad banner</source>
          <target state="translated">最終的な広告バナー</target>
        </trans-unit>
        <trans-unit id="c95c48f17753442181cc82b3983b3c08478efff3" translate="yes" xml:space="preserve">
          <source>Final code review</source>
          <target state="translated">最終的なコードレビュー</target>
        </trans-unit>
        <trans-unit id="f46cb47bf9a0adc86c8ac38dba064e1d91fdcb22" translate="yes" xml:space="preserve">
          <source>Final setup and tests</source>
          <target state="translated">最終設定とテスト</target>
        </trans-unit>
        <trans-unit id="ae46b591c407d86033096dfd0bcfee30c0486784" translate="yes" xml:space="preserve">
          <source>Final thoughts</source>
          <target state="translated">最終的な感想</target>
        </trans-unit>
        <trans-unit id="4cef14b8b04cb3c50ec7df190ada6f1ad74b814c" translate="yes" xml:space="preserve">
          <source>Finally, bootstrap the &lt;code&gt;AppModule&lt;/code&gt; in &lt;code&gt;app/main.ts&lt;/code&gt;. This file has been configured as the application entrypoint in &lt;code&gt;systemjs.config.js&lt;/code&gt;, so it is already being loaded by the browser.</source>
          <target state="translated">最後に、 &lt;code&gt;AppModule&lt;/code&gt; を &lt;code&gt;app/main.ts&lt;/code&gt; にブートストラップします。このファイルは &lt;code&gt;systemjs.config.js&lt;/code&gt; のアプリケーションエントリポイントとして構成されているため、ブラウザによってすでにロードされています。</target>
        </trans-unit>
        <trans-unit id="8cefc5f3cabe0ea72b2a2073202c61d828592c62" translate="yes" xml:space="preserve">
          <source>Finally, display an instance of the form in the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">最後に、 &lt;code&gt;AppComponent&lt;/code&gt; シェルでフォームのインスタンスを表示します。</target>
        </trans-unit>
        <trans-unit id="dd499b8ded3996759fb45ad0ef6860245639edf3" translate="yes" xml:space="preserve">
          <source>Finally, from &lt;code&gt;index.html&lt;/code&gt;, remove all references to AngularJS scripts and jQuery. When you're done, this is what it should look like:</source>
          <target state="translated">最後に、 &lt;code&gt;index.html&lt;/code&gt; から、AngularJSスクリプトとjQueryへのすべての参照を削除します。完了すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="5a0259c749fca2e9b33bd242db1b258ce408c109" translate="yes" xml:space="preserve">
          <source>Finally, kick off the whole process, by bootstraping your top level Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最後に、最上位のAngular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; をブートストラップすることで、プロセス全体を開始します。</target>
        </trans-unit>
        <trans-unit id="9f5dcff9e3e40c297f9a2469f9d67baa2a5b4842" translate="yes" xml:space="preserve">
          <source>Finally, revisit both of the component tests when you switch to the Angular router. For the details component, provide a mock of Angular &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; object instead of using the AngularJS &lt;code&gt;$routeParams&lt;/code&gt;.</source>
          <target state="translated">最後に、Angularルーターに切り替えるときに、両方のコンポーネントテストに再度アクセスします。詳細コンポーネントについては、AngularJS &lt;code&gt;$routeParams&lt;/code&gt; を使用する代わりに、Angular &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; オブジェクトのモックを提供します。</target>
        </trans-unit>
        <trans-unit id="4270c1b28f19e0dc4576a96f91d31a39cbc8c57d" translate="yes" xml:space="preserve">
          <source>Finally, the rule factory must return a rule.</source>
          <target state="translated">最後に、ルールファクトリーはルールを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="d3f3588d5a318073d8770cabe8b8356205db6a84" translate="yes" xml:space="preserve">
          <source>Finally, the server returns the rendered page to the client.</source>
          <target state="translated">最後に、サーバーはレンダリングされたページをクライアントに返します。</target>
        </trans-unit>
        <trans-unit id="1888b8a1c59ae1c4c42740747f0691eb7a40faaa" translate="yes" xml:space="preserve">
          <source>Finally, update the product list component to receive output from the product alerts component.</source>
          <target state="translated">最後に、製品リストコンポーネントを更新して、製品アラートコンポーネントからの出力を受け取るようにします。</target>
        </trans-unit>
        <trans-unit id="d2307f9b99deb8de24da0878bde936ef2a11e271" translate="yes" xml:space="preserve">
          <source>Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.</source>
          <target state="translated">最後に、RouterLink の祖先に RouterLinkActive ディレクティブを適用することができます。</target>
        </trans-unit>
        <trans-unit id="b3e1d9bc243d1e42b5cab907612678c6d025611d" translate="yes" xml:space="preserve">
          <source>Finally, you can bind to a specific class name. Angular adds the class when the template expression evaluates to truthy. It removes the class when the expression is falsy.</source>
          <target state="translated">最後に、特定のクラス名にバインドすることができます。Angularはテンプレート式がtruthyと評価されたときにクラスを追加します。式がfalsyの場合はクラスを削除します。</target>
        </trans-unit>
        <trans-unit id="9f8e28a14842dd8a21fd4417e69d8929246f2eb3" translate="yes" xml:space="preserve">
          <source>Finally, you should add some npm scripts in &lt;code&gt;package.json&lt;/code&gt; to compile the TypeScript files to JavaScript (based on the &lt;code&gt;tsconfig.json&lt;/code&gt; configuration file):</source>
          <target state="translated">最後に、（ &lt;code&gt;tsconfig.json&lt;/code&gt; 構成ファイルに基づいて）TypeScriptファイルをJavaScriptにコンパイルするために、 &lt;code&gt;package.json&lt;/code&gt; にいくつかのnpmスクリプトを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc68dbba7d47e62aa4d6bec04a624372cc2d728b" translate="yes" xml:space="preserve">
          <source>Find a parent by its class interface</source>
          <target state="translated">クラスインターフェースから親を探す</target>
        </trans-unit>
        <trans-unit id="19572de919c02ddeb5074d287366d16ac151d4e6" translate="yes" xml:space="preserve">
          <source>Find a parent component of known type</source>
          <target state="translated">既知の型の親コンポーネントを探す</target>
        </trans-unit>
        <trans-unit id="a2ea659f3e398cb1397f96d2e04f71ac6ae5eba4" translate="yes" xml:space="preserve">
          <source>Find a parent in a tree with &lt;code&gt;@SkipSelf()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@SkipSelf()&lt;/code&gt; を使用してツリー内で親を見つける</target>
        </trans-unit>
        <trans-unit id="6888669f18c56df1d694cf79843c2e4b00c6059a" translate="yes" xml:space="preserve">
          <source>Find out more in the &lt;a href=&quot;../guide/animations&quot;&gt;animations guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/animations&quot;&gt;アニメーションガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e5804ca617365de337f619c9afc81454ab7c97f7" translate="yes" xml:space="preserve">
          <source>Find out more in the &lt;a href=&quot;../guide/forms-overview&quot;&gt;Forms Overview&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/forms-overview&quot;&gt;フォームの概要を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e1f7853d2e5b874c8499b3a8977fbd15328d107c" translate="yes" xml:space="preserve">
          <source>Find providers by name</source>
          <target state="translated">名前からプロバイダを探す</target>
        </trans-unit>
        <trans-unit id="90ac0cee96d91541ca1bd28dfc35a71280d5beec" translate="yes" xml:space="preserve">
          <source>Find testability of a node in the Tree</source>
          <target state="translated">ツリー内のノードのテスト可能性を見つける</target>
        </trans-unit>
        <trans-unit id="2ba4f7019a119d1c278150f603171c988560b7cb" translate="yes" xml:space="preserve">
          <source>Find the &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling&quot;&gt;Network Throttling&lt;/a&gt; dropdown on the far right of the menu bar.</source>
          <target state="translated">メニューバーの右端にある[ &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling&quot;&gt;ネットワークスロットル&lt;/a&gt; ]ドロップダウンを見つけます。</target>
        </trans-unit>
        <trans-unit id="4e5f4621355c6bff62bda1359ee32eebff1a583e" translate="yes" xml:space="preserve">
          <source>Find the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag for &lt;em&gt;Name&lt;/em&gt; and update it like this:</source>
          <target state="translated">&lt;em&gt;Nameの&lt;/em&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; タグを見つけて、次のように更新します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e2bbe5210ef2d786fc3ededbe956159663446c80" translate="yes" xml:space="preserve">
          <source>Find the &lt;code&gt;getHeroes&lt;/code&gt; method and replace it with the following code (shown side-by-side with the previous version for comparison)</source>
          <target state="translated">&lt;code&gt;getHeroes&lt;/code&gt; メソッドを見つけて、次のコードに置き換えます（比較のために、以前のバージョンと並べて表示されています）。</target>
        </trans-unit>
        <trans-unit id="910dec36e9d395b1a239c2cce267478bbbb83541" translate="yes" xml:space="preserve">
          <source>Find the header for your page. For example, a guide page that describes an Angular feature is probably a child of the &lt;code&gt;Fundamentals&lt;/code&gt; header.</source>
          <target state="translated">ページのヘッダーを見つけます。たとえば、Angular機能を説明するガイドページは、おそらく &lt;code&gt;Fundamentals&lt;/code&gt; ヘッダーの子です。</target>
        </trans-unit>
        <trans-unit id="9e66577055c6ddf016c5f26c4b7258884b805c8a" translate="yes" xml:space="preserve">
          <source>Find the way back</source>
          <target state="translated">帰り道を探す</target>
        </trans-unit>
        <trans-unit id="0d7801dbbf5469288357290bb162caf0067841ca" translate="yes" xml:space="preserve">
          <source>Find this example in &lt;span name=&quot;dependency-injection-in-action&quot;&gt;live code&lt;/span&gt; and confirm that the three &lt;code&gt;HeroBioComponent&lt;/code&gt; instances have their own cached hero data.</source>
          <target state="translated">この例を&lt;span name=&quot;dependency-injection-in-action&quot;&gt;ライブコード&lt;/span&gt;で見つけ、3つの &lt;code&gt;HeroBioComponent&lt;/code&gt; インスタンスに独自のキャッシュされたヒーローデータがあることを確認します。</target>
        </trans-unit>
        <trans-unit id="f36f5acbf34ac69639274bcce5d1e810ae127fca" translate="yes" xml:space="preserve">
          <source>Finding the current version of Angular</source>
          <target state="translated">Angularの現在のバージョンを見つける</target>
        </trans-unit>
        <trans-unit id="a410edc016bc1e604c19b7f4a7ebcb201ee6cc63" translate="yes" xml:space="preserve">
          <source>Finds one or more inner elements within the current element that is being animated within a sequence. Use with &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">シーケンス内でアニメーション化されている現在の要素内の1つ以上の内部要素を検索します。 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; で使用します。</target>
        </trans-unit>
        <trans-unit id="577fef4c15c29c2eed55b75361375e09cbaa0af3" translate="yes" xml:space="preserve">
          <source>Finds one or more inner elements within the current element that is being animated within a sequence. Use with &lt;code&gt;&lt;a href=&quot;animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">シーケンス内でアニメーション化されている現在の要素内の1つ以上の内部要素を検索します。 &lt;code&gt;&lt;a href=&quot;animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; で使用します。</target>
        </trans-unit>
        <trans-unit id="353aec05ef3a3f9483fe393d93648f628a744b2e" translate="yes" xml:space="preserve">
          <source>Fine tune control</source>
          <target state="translated">微調整制御</target>
        </trans-unit>
        <trans-unit id="5f133c80f125f45ee0dbdf789783d6285b5c326c" translate="yes" xml:space="preserve">
          <source>Firebase hosting</source>
          <target state="translated">ファイアーベースホスティング</target>
        </trans-unit>
        <trans-unit id="b4ee6522335b033249255b4cc1d572993282aafb" translate="yes" xml:space="preserve">
          <source>Firefox</source>
          <target state="translated">Firefox</target>
        </trans-unit>
        <trans-unit id="968dba49182e0be459fe515125d03648ade8af6c" translate="yes" xml:space="preserve">
          <source>First ensure that the service to be downgraded is provided in an &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; that will be part of the upgrade application. For example, let's assume we have defined &lt;code&gt;HeroesService&lt;/code&gt;</source>
          <target state="translated">まず、ダウングレードするサービスが、アップグレードアプリケーションの一部となる &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; で提供されていることを確認します。たとえば、 &lt;code&gt;HeroesService&lt;/code&gt; を定義したとしましょう</target>
        </trans-unit>
        <trans-unit id="aa13eff7c345cc62b2731261d890c5269c439d82" translate="yes" xml:space="preserve">
          <source>First import the &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; and add it to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">最初に &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; をインポートし、それを &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="55ec6779573313fe242323b78b075f04a155c1c4" translate="yes" xml:space="preserve">
          <source>First string for comparison</source>
          <target state="translated">比較のための最初の文字列</target>
        </trans-unit>
        <trans-unit id="01e119ef3e252a37cc72a2fdfd6760ca6763b655" translate="yes" xml:space="preserve">
          <source>First we must create a directive that will wrap the validator function. We provide it as the validator using the &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; token. If you are not sure why, or you do not fully understand the syntax, revisit the previous &lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;section&lt;/a&gt;.</source>
          <target state="translated">まず、バリデーター関数をラップするディレクティブを作成する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; トークンを使用してバリデーターとして提供します。理由がわからない場合、または構文を完全に理解していない場合は、前の&lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;セクション&lt;/a&gt;に戻ってください。</target>
        </trans-unit>
        <trans-unit id="4c224c3de52b6310e67cad9019284eef1dbe6d21" translate="yes" xml:space="preserve">
          <source>First we retrieve the child controls by calling the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;'s &lt;a href=&quot;../api/forms/abstractcontrol#get&quot;&gt;get&lt;/a&gt; method. Then we simply compare the values of the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt; controls.</source>
          <target state="translated">まず、 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の&lt;a href=&quot;../api/forms/abstractcontrol#get&quot;&gt;get&lt;/a&gt;メソッドを呼び出して、子コントロールを取得します。その後、我々は、単にの値を比較 &lt;code&gt;name&lt;/code&gt; や &lt;code&gt;alterEgo&lt;/code&gt; コントロールを。</target>
        </trans-unit>
        <trans-unit id="6c9d5cfff1d8258e5ca5251b7474441553db359a" translate="yes" xml:space="preserve">
          <source>First you extend the router import statement to include the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service symbol:</source>
          <target state="translated">まず、ルーターインポートステートメントを拡張して、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; サービスシンボルを含めます。</target>
        </trans-unit>
        <trans-unit id="006f3b6fcf861b0234e3eb24d6b99a89daf9bdae" translate="yes" xml:space="preserve">
          <source>First you surround that fragment in the source file with a named &lt;em&gt;docregion&lt;/em&gt; as described &lt;a href=&quot;docs-style-guide#source-code-markup&quot;&gt;below&lt;/a&gt;. Then you reference that &lt;em&gt;docregion&lt;/em&gt; in the &lt;code&gt;region&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; like this</source>
          <target state="translated">まず、&lt;a href=&quot;docs-style-guide#source-code-markup&quot;&gt;以下で&lt;/a&gt;説明するように、ソースファイルのフラグメントを名前付きの&lt;em&gt;docregionで囲み&lt;/em&gt;ます。そして、あなたはその参照&lt;em&gt;docregionを&lt;/em&gt;中 &lt;code&gt;region&lt;/code&gt; の属性 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; このように</target>
        </trans-unit>
        <trans-unit id="e38156d4774c97193b83dc70c370d862e8a4f69b" translate="yes" xml:space="preserve">
          <source>First, &lt;code&gt;AppRoutingModule&lt;/code&gt; imports &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; so the app can have routing functionality. The next import, &lt;code&gt;HeroesComponent&lt;/code&gt;, will give the Router somewhere to go once you configure the routes.</source>
          <target state="translated">まず、 &lt;code&gt;AppRoutingModule&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; をインポートするため、アプリにルーティング機能を持たせることができます。次のインポートである &lt;code&gt;HeroesComponent&lt;/code&gt; は、ルートを構成するとルーターをどこかに移動します。</target>
        </trans-unit>
        <trans-unit id="4fa3397063608fa99c181a29835aaf19ff75226e" translate="yes" xml:space="preserve">
          <source>First, be sure to import &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; in the child component class:</source>
          <target state="translated">まず、子コンポーネントクラスに &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; を必ずインポートしてください。</target>
        </trans-unit>
        <trans-unit id="56f9dfae7fe63b98aad45e38a0217d3cd8feb04f" translate="yes" xml:space="preserve">
          <source>First, create an &lt;code&gt;AnimalService&lt;/code&gt; with an &lt;code&gt;emoji&lt;/code&gt; property of 🐳 (whale):</source>
          <target state="translated">最初に、 &lt;code&gt;emoji&lt;/code&gt; プロパティがw（クジラ）の &lt;code&gt;AnimalService&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="c9e7758b50d1db77a7de19f37f3c0dc57b86cfaa" translate="yes" xml:space="preserve">
          <source>First, ensure that &lt;code&gt;src/index.html&lt;/code&gt; is set as the start page. Right-click &lt;code&gt;index.html&lt;/code&gt; in Solution Explorer and select option &lt;code&gt;Set As Start Page&lt;/code&gt;.</source>
          <target state="translated">最初に、 &lt;code&gt;src/index.html&lt;/code&gt; が開始ページとして設定されていることを確認します。ソリューションエクスプローラーで &lt;code&gt;index.html&lt;/code&gt; を右クリックし、[ &lt;code&gt;Set As Start Page&lt;/code&gt; ]オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="fcd358a07ec06cfd9f03f3dce181ba1549395226" translate="yes" xml:space="preserve">
          <source>First, import the schematics definitions you will need. The Schematics framework offers many utility functions to create and use rules when running a schematic.</source>
          <target state="translated">まず、必要な回路図の定義をインポートします。スケマティクスフレームワークには、スケマティクスを実行する際にルールを作成して使用するための多くのユーティリティ関数が用意されています。</target>
        </trans-unit>
        <trans-unit id="d87ce0595d0d8921c001ee9447f191878b1ada86" translate="yes" xml:space="preserve">
          <source>First, it sets the &lt;code&gt;currentAdIndex&lt;/code&gt; by taking whatever it currently is plus one, dividing that by the length of the &lt;code&gt;AdItem&lt;/code&gt; array, and using the &lt;em&gt;remainder&lt;/em&gt; as the new &lt;code&gt;currentAdIndex&lt;/code&gt; value. Then, it uses that value to select an &lt;code&gt;adItem&lt;/code&gt; from the array.</source>
          <target state="translated">まず、設定 &lt;code&gt;currentAdIndex&lt;/code&gt; の長さによってそれを割ること、それが現在どのような撮影によってプラス一つ &lt;code&gt;AdItem&lt;/code&gt; のアレイ、及び用い&lt;em&gt;残りを&lt;/em&gt;新しいとして &lt;code&gt;currentAdIndex&lt;/code&gt; の値。次に、その値を使用して配列から &lt;code&gt;adItem&lt;/code&gt; を選択します。</target>
        </trans-unit>
        <trans-unit id="14157ae1fec131fa629d1b92aee617e08eeb5f90" translate="yes" xml:space="preserve">
          <source>First, remove the &lt;code&gt;ng-app&lt;/code&gt; attribute from &lt;code&gt;index.html&lt;/code&gt;. Then import &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;, and override its &lt;code&gt;ngDoBootstrap&lt;/code&gt; method:</source>
          <target state="translated">まず、 &lt;code&gt;index.html&lt;/code&gt; から &lt;code&gt;ng-app&lt;/code&gt; 属性を削除します。次に、インポート &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;AppModule&lt;/code&gt; 、及びその上書き &lt;code&gt;ngDoBootstrap&lt;/code&gt; の方法を：</target>
        </trans-unit>
        <trans-unit id="13ba5cc308cd8a4055d4553f319b826982eac734" translate="yes" xml:space="preserve">
          <source>First, use the child's selector, here &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt;, as a directive within the parent component template. Then, use &lt;a href=&quot;template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt; to bind the property in the child to the property of the parent.</source>
          <target state="translated">まず、子のセレクター（ここでは &lt;code&gt;&amp;lt;app-item-detail&amp;gt;&lt;/code&gt; ）を親コンポーネントテンプレート内のディレクティブとして使用します。次に、&lt;a href=&quot;template-syntax#property-binding&quot;&gt;プロパティバインディング&lt;/a&gt;を使用して、子のプロパティを親のプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="9647450b7ff56001720b551df6dcc0a33e9ca5a8" translate="yes" xml:space="preserve">
          <source>First, you have to import references to the &lt;code&gt;&lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; decorator and the &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt; lifecycle hook.</source>
          <target state="translated">最初に、 &lt;code&gt;&lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; デコレーターと &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt; ライフサイクルフックへの参照をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="025340734ec5d57ee79e8d037ce0de5cd9fffa35" translate="yes" xml:space="preserve">
          <source>First, you'll set up the checkout form model. The form model is the source of truth for the status of the form and is defined in the component class.</source>
          <target state="translated">まず、チェックアウトのフォームモデルを設定します。フォームモデルはフォームの状態の真理の源であり、コンポーネントクラスで定義されています。</target>
        </trans-unit>
        <trans-unit id="f85d85326853baf05275197db6d10fd7ad94a38d" translate="yes" xml:space="preserve">
          <source>Fixes linting errors (may overwrite linted files).</source>
          <target state="translated">lintingエラーを修正(lintedファイルを上書きする可能性がある)。</target>
        </trans-unit>
        <trans-unit id="845cf578b2efea633be3f3f6070c477978db19d2" translate="yes" xml:space="preserve">
          <source>Fixture for debugging and testing a component.</source>
          <target state="translated">コンポーネントのデバッグとテスト用の固定具。</target>
        </trans-unit>
        <trans-unit id="47027d345cd1b888dd24d533746624ba383f61c3" translate="yes" xml:space="preserve">
          <source>Flag to prevent building an app shell.</source>
          <target state="translated">アプリシェルをビルドしないようにするためのフラグ。</target>
        </trans-unit>
        <trans-unit id="c38db9c9703b1880f1fb4cc292db33fcfd41bfef" translate="yes" xml:space="preserve">
          <source>Flags for renderer-specific style modifiers.</source>
          <target state="translated">レンダラー固有のスタイル修飾子のフラグ。</target>
        </trans-unit>
        <trans-unit id="23f8b52bc03b06820d6fbf3a3116fc3217e1c3d2" translate="yes" xml:space="preserve">
          <source>Flags for style variations to remove, if set. ???</source>
          <target state="translated">設定されていれば削除するスタイルのバリエーションのフラグ。???</target>
        </trans-unit>
        <trans-unit id="7419f582323423b571d0e8104b85663f8483a737" translate="yes" xml:space="preserve">
          <source>Flags for style variations. No flags are set by default.</source>
          <target state="translated">スタイルのバリエーションのためのフラグ。デフォルトではフラグは設定されていません。</target>
        </trans-unit>
        <trans-unit id="79c9e13ab7d502c6c70eca7c038f62d6c49fda0d" translate="yes" xml:space="preserve">
          <source>Flat</source>
          <target state="translated">Flat</target>
        </trans-unit>
        <trans-unit id="aef62e073c9538aa87c8c38c1a8bf61bded98e36" translate="yes" xml:space="preserve">
          <source>Floating images</source>
          <target state="translated">フローティング画像</target>
        </trans-unit>
        <trans-unit id="13f80ff3ae7d009b1e01b88f21afe2491230965e" translate="yes" xml:space="preserve">
          <source>Floating within a subsection</source>
          <target state="translated">サブセクション内でのフローティング</target>
        </trans-unit>
        <trans-unit id="3f72320cb9eb3892311c36e1201deb897716e20a" translate="yes" xml:space="preserve">
          <source>Flush any pending microtasks.</source>
          <target state="translated">保留中のマイクロタスクはすべて洗い流してください。</target>
        </trans-unit>
        <trans-unit id="1313760637068e67ab353348deb675e763580ff0" translate="yes" xml:space="preserve">
          <source>FlyingHeroesPipe</source>
          <target state="translated">FlyingHeroesPipe</target>
        </trans-unit>
        <trans-unit id="99407d81116edc10941a2ff4ec9acfbf36986d2a" translate="yes" xml:space="preserve">
          <source>FnArg</source>
          <target state="translated">FnArg</target>
        </trans-unit>
        <trans-unit id="674038e3b673c8e05950f1b1b8076bd2888c3b23" translate="yes" xml:space="preserve">
          <source>Focus on the &lt;code&gt;overrideComponent&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;overrideComponent&lt;/code&gt; メソッドに注目してください。</target>
        </trans-unit>
        <trans-unit id="be96b0e964115bda6f5295db5f73a0974e889ff3" translate="yes" xml:space="preserve">
          <source>Focus on the binding syntax: &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]=&quot;...&quot;&lt;/code&gt;.</source>
          <target state="translated">バインディング構文に焦点を当てます： &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]=&quot;...&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba0c349131fd653362da503d9138988c231e9862" translate="yes" xml:space="preserve">
          <source>Focus on the component's template.</source>
          <target state="translated">コンポーネントのテンプレートに注目してください。</target>
        </trans-unit>
        <trans-unit id="f18ba6e3dca6a56b206e311fd8d02d70252a5f8a" translate="yes" xml:space="preserve">
          <source>Focus on the constructor parameters.</source>
          <target state="translated">コンストラクタのパラメータに注目してください。</target>
        </trans-unit>
        <trans-unit id="99a92a1737d6303412bc431ba1e6ab979fe2f4f1" translate="yes" xml:space="preserve">
          <source>Focus on the following three TypeScript (&lt;code&gt;.ts&lt;/code&gt;) files in the &lt;strong&gt;&lt;code&gt;/src&lt;/code&gt;&lt;/strong&gt; folder.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;/src&lt;/code&gt; &lt;/strong&gt;フォルダーにある次の3つのTypeScript（ &lt;code&gt;.ts&lt;/code&gt; ）ファイルに注目してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a846cc83c7322e6b47e27db868c9dc21caecc84c" translate="yes" xml:space="preserve">
          <source>Focus on the spy.</source>
          <target state="translated">スパイに集中して</target>
        </trans-unit>
        <trans-unit id="f75aee18c2edafe7ea1d576022a1b8458bd9dd44" translate="yes" xml:space="preserve">
          <source>Focus on the template:</source>
          <target state="translated">テンプレートを中心に。</target>
        </trans-unit>
        <trans-unit id="8b610be124aa3a40ce1b39d37fc11b0b04c6263e" translate="yes" xml:space="preserve">
          <source>Foldable</source>
          <target state="translated">Foldable</target>
        </trans-unit>
        <trans-unit id="57b7ec24a9b1313c299b9748f089e1707332463e" translate="yes" xml:space="preserve">
          <source>Foldable syntax</source>
          <target state="translated">折りたたみ可能な構文</target>
        </trans-unit>
        <trans-unit id="8545108042043a15c515d62cdfb13f4185ac9c95" translate="yes" xml:space="preserve">
          <source>Follow the AngularJS Style Guide</source>
          <target state="translated">AngularJSスタイルガイドに従う</target>
        </trans-unit>
        <trans-unit id="11c7ef116d47d698a7592c21c0ecd9f0b8006417" translate="yes" xml:space="preserve">
          <source>Follow the instructions in &lt;a href=&quot;setup-local&quot;&gt;Local Environment Setup&lt;/a&gt; to create a starter Angular app using the CLI command &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;setup-local&quot;&gt;ローカル環境設定の&lt;/a&gt;指示に従って、CLIコマンド&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;を使用してスターターAngularアプリを作成します。</target>
        </trans-unit>
        <trans-unit id="cbba88aeff252999f7189b7c5791e6b635b7d58f" translate="yes" xml:space="preserve">
          <source>Follow the prompts to select the &lt;code&gt;Firebase&lt;/code&gt; project you are creating for hosting.</source>
          <target state="translated">プロンプトに従って、ホスティング用に作成している &lt;code&gt;Firebase&lt;/code&gt; プロジェクトを選択します。</target>
        </trans-unit>
        <trans-unit id="9290916a8ada6d592efd89d4b0ce3854336f1797" translate="yes" xml:space="preserve">
          <source>Follow these steps:</source>
          <target state="translated">以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="80fc20b87aee155bca3d86ee5c873949fa8a32e0" translate="yes" xml:space="preserve">
          <source>Follow this convention when you write similar modules with configurable service providers.</source>
          <target state="translated">設定可能なサービスプロバイダを使用して同様のモジュールを書く場合は、この規則に従ってください。</target>
        </trans-unit>
        <trans-unit id="ac5a22ef48584da5d4a3bf95e83238cf1a90ec1c" translate="yes" xml:space="preserve">
          <source>Following is all the code discussed in this page.</source>
          <target state="translated">このページで取り上げたコードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="528abf3dd48bf1a361c849a3e5d23ed3a8e477b4" translate="yes" xml:space="preserve">
          <source>Following the same pattern as with the &lt;code&gt;FlowerService&lt;/code&gt;, inject the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;AppComponent&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;FlowerService&lt;/code&gt; の場合と同じパターンに従って、 &lt;code&gt;AnimalService&lt;/code&gt; を &lt;code&gt;AppComponent&lt;/code&gt; クラスに挿入します。</target>
        </trans-unit>
        <trans-unit id="954d922028bc7e30f824816d4fa2677158b0313f" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;glossary#universal&quot;&gt;Universal&lt;/a&gt;, you can reduce the code rendered in the HTML page by setting styles optimization to &lt;code&gt;true&lt;/code&gt; and styles source maps to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#universal&quot;&gt;ユニバーサル&lt;/a&gt;、あなたはにスタイルの最適化を設定することで、HTMLページにレンダリングコード減らすことができ &lt;code&gt;true&lt;/code&gt; とスタイルソースはにマップ &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01162b62b308e6eea867c12d8bc4942259834c93" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, 'M/d/yy, h:mm a'&lt;code&gt;(Example:&lt;/code&gt;6/15/15, 9:03 AM`)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 'M / D / YY、H：MMのA' &lt;code&gt;(Example:&lt;/code&gt; 6/15/15、午前9時03 AM`）</target>
        </trans-unit>
        <trans-unit id="87cbdf03fb63d9818c63c6f32dd96510ce36f71a" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'EEEE, MMMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; zzzz'&lt;/code&gt; (Example: &lt;code&gt;&lt;a href=&quot;weekday#Monday&quot;&gt;Monday&lt;/a&gt;, June 15, 2015 at 9:03:01 AM GMT+01:00&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'EEEE, MMMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; zzzz'&lt;/code&gt; （例： &lt;code&gt;&lt;a href=&quot;weekday#Monday&quot;&gt;Monday&lt;/a&gt;, June 15, 2015 at 9:03:01 AM GMT+01:00&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8125fcff305766783603f665ed203f09c7127e92" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'MMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;'&lt;/code&gt; (Example: &lt;code&gt;Jun 15, 2015, 9:03:01 AM&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'MMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;'&lt;/code&gt; （例： &lt;code&gt;Jun 15, 2015, 9:03:01 AM&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bb6b5a9d378e0fa8d1fc57f33040f3883a3465f0" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;en-US&lt;/code&gt;, &lt;code&gt;'MMMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; z'&lt;/code&gt; (Example: &lt;code&gt;June 15, 2015 at 9:03:01 AM GMT+1&lt;/code&gt;)</source>
          <target state="translated">用 &lt;code&gt;en-US&lt;/code&gt; 、 &lt;code&gt;'MMMM d, y, h:mm:ss &lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; z'&lt;/code&gt; （例： &lt;code&gt;June 15, 2015 at 9:03:01 AM GMT+1&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="615c1a0449b23b9b11bdc05ef40763586f9c816e" translate="yes" xml:space="preserve">
          <source>For AOT compilation, include the &lt;code&gt;--aot&lt;/code&gt; option with the &lt;code&gt;ng build&lt;/code&gt; or &lt;code&gt;ng serve&lt;/code&gt; command:</source>
          <target state="translated">AOTコンパイルの場合は、 &lt;code&gt;ng build&lt;/code&gt; コマンドまたは &lt;code&gt;ng serve&lt;/code&gt; コマンドに &lt;code&gt;--aot&lt;/code&gt; オプションを含めます。</target>
        </trans-unit>
        <trans-unit id="366254ac553179e02b799a6f00c72532a5afc495" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;, the values of enabled controls as an array.</source>
          <target state="translated">用 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; 、アレイとして有効にコントロールの値。</target>
        </trans-unit>
        <trans-unit id="fed41b2d73d63d1a8ff91591ee7067e07e3bd040" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, the current value.</source>
          <target state="translated">以下のために &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 、現在の値。</target>
        </trans-unit>
        <trans-unit id="8a4deee0bdf8c15ca3196a32013eae0eedb59494" translate="yes" xml:space="preserve">
          <source>For a complete list of locales supported by Angular, see &lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales&quot;&gt;the Angular repository&lt;/a&gt;.</source>
          <target state="translated">Angularがサポートするロケールの完全なリストについて&lt;a href=&quot;https://github.com/angular/angular/tree/master/packages/common/locales&quot;&gt;は、Angularリポジトリを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3f85eb5b33c42136f7f1e0ea2567c82a8da57cb1" translate="yes" xml:space="preserve">
          <source>For a demonstration of the syntax and code snippets in this section, see the &lt;span name=&quot;binding-syntax&quot;&gt;binding syntax example&lt;/span&gt;.</source>
          <target state="translated">このセクションの構文とコードスニペットのデモについては、&lt;span name=&quot;binding-syntax&quot;&gt;バインディング構文の例を&lt;/span&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0db23d1180e42942344c6da322408ea0d6dccba7" translate="yes" xml:space="preserve">
          <source>For a demonstration of the syntax and code snippets in this section, see the &lt;span name=&quot;template-reference-variables&quot;&gt;template reference variables example&lt;/span&gt;.</source>
          <target state="translated">このセクションの構文とコードスニペットのデモについては、&lt;span name=&quot;template-reference-variables&quot;&gt;テンプレート参照変数の例を&lt;/span&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="b37874a6cbfb3027c0ab76729338e5dbcb431c0b" translate="yes" xml:space="preserve">
          <source>For a demonstration of the syntax and code snippets in this section, see the &lt;span name=&quot;two-way-binding&quot;&gt;two-way binding example&lt;/span&gt;.</source>
          <target state="translated">このセクションの構文とコードスニペットのデモについては、&lt;span name=&quot;two-way-binding&quot;&gt;双方向バインディングの例を&lt;/span&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="dca82a3371da568933815b1a8dcec9ba11807d39" translate="yes" xml:space="preserve">
          <source>For a disabled &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, the values of all controls as an object with a key-value pair for each member of the group.</source>
          <target state="translated">無効な &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の場合、グループの各メンバーのキーと値のペアを持つオブジェクトとしてのすべてのコントロールの値。</target>
        </trans-unit>
        <trans-unit id="45a561ba7c1c51805ef39bb6a87cdaafee124e29" translate="yes" xml:space="preserve">
          <source>For a list of DOM events, see: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/Events&lt;/a&gt;.</source>
          <target state="translated">DOMイベントのリストについては、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;https&lt;/a&gt;：//developer.mozilla.org/en-US/docs/Web/Eventsを参照してください。</target>
        </trans-unit>
        <trans-unit id="2dd5f6af9f382ca67ac129bad7cd5aa1a0565560" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion of the differences and their implications, see &lt;a href=&quot;../../../guide/upgrade-performance&quot;&gt;Upgrading for Performance&lt;/a&gt;.</source>
          <target state="translated">違いとその影響の詳細については、「&lt;a href=&quot;../../../guide/upgrade-performance&quot;&gt;パフォーマンスのためのアップグレード」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cc66a61178ac7b88b12368f21d5b48b2c671f9ef" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion of these concepts, see &lt;a href=&quot;architecture-components&quot;&gt;Introduction to components&lt;/a&gt;.</source>
          <target state="translated">これらの概念の詳細については、&lt;a href=&quot;architecture-components&quot;&gt;コンポーネントの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c337b01d15862c6742dfaef9e2e117a14e2fd2dd" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion, see &lt;a href=&quot;architecture-modules&quot;&gt;Introduction to modules&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;architecture-modules&quot;&gt;モジュールの概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="586ff2e84338f7def76edce5c6f12aee801fda77" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion, see &lt;a href=&quot;architecture-services&quot;&gt;Introduction to services and DI&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;architecture-services&quot;&gt;サービスとDIの概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d4cd5e4bd0778cad7950bd52a42ef74913046ae2" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion, see &lt;a href=&quot;router&quot;&gt;Routing and navigation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーションを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a73e93b07219a0df7b025b0a73e4e86089de6972" translate="yes" xml:space="preserve">
          <source>For a more detailed look at different techniques and concepts surrounding SSR, please check out this &lt;a href=&quot;https://developers.google.com/web/updates/2019/02/rendering-on-the-web&quot;&gt;article&lt;/a&gt;.</source>
          <target state="translated">SSRに関するさまざまな手法と概念の詳細については、こちらの&lt;a href=&quot;https://developers.google.com/web/updates/2019/02/rendering-on-the-web&quot;&gt;記事&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="750cd369db6afa2ea7217c34574571bcfa6f38c2" translate="yes" xml:space="preserve">
          <source>For a more strikingly visual effect, hide the data entry area and display something else.</source>
          <target state="translated">より印象的な視覚効果を得るためには、データ入力エリアを隠して別のものを表示します。</target>
        </trans-unit>
        <trans-unit id="2022eb522814df1f6325470271058257eb784f7a" translate="yes" xml:space="preserve">
          <source>For a multi-project workspace, application-specific end-to-end tests are in the project root, under &lt;code&gt;projects/project-name/e2e/&lt;/code&gt;.</source>
          <target state="translated">マルチプロジェクトワークスペースの場合、アプリケーション固有のエンドツーエンドテストは、プロジェクトルートの &lt;code&gt;projects/project-name/e2e/&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="6c8a4e5ce7ca87cad38cdc266c34765f3cdeb6a6" translate="yes" xml:space="preserve">
          <source>For a newly created Angular application, the default &lt;code&gt;browserslist&lt;/code&gt; looks like this:</source>
          <target state="translated">新しく作成されたAngularアプリケーションの場合、デフォルトの &lt;code&gt;browserslist&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="30a03f66c5fbc0ab53ccc165e51d54b263f55130" translate="yes" xml:space="preserve">
          <source>For a sample app using the app-wide singleton service that this page describes, see the  showcasing all the documented features of NgModules.</source>
          <target state="translated">このページで説明するアプリ全体のシングルトンサービスを使用したサンプルアプリについては、NgModulesのすべてのドキュメント化された機能のショーケースを参照してください。</target>
        </trans-unit>
        <trans-unit id="81c70c1467ee563fc554cbd57f1ad105403d7b92" translate="yes" xml:space="preserve">
          <source>For a server that supports a cookie-based XSRF protection system, use directly to configure XSRF protection with the correct cookie and header names.</source>
          <target state="translated">クッキーベースのXSRF保護システムをサポートしているサーバでは、正しいクッキー名とヘッダ名でXSRF保護を設定するために直接使用します。</target>
        </trans-unit>
        <trans-unit id="92ef30ec204c92904139cd32d14c7f56b8daa6a7" translate="yes" xml:space="preserve">
          <source>For a service, instead of using &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt;, specify &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; on the service's &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator, which makes the service automatically available to the whole application and thus singleton by default.</source>
          <target state="translated">サービスの場合、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; を使用する代わりに、サービスの &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;（）デコレーターで &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; を指定します。これにより、サービスがアプリケーション全体で自動的に使用可能になり、デフォルトでシングルトンになります。</target>
        </trans-unit>
        <trans-unit id="e8211f18ec4be55c727117b3cb53d82d2e117ab5" translate="yes" xml:space="preserve">
          <source>For a single-application workspace, the &lt;code&gt;src/&lt;/code&gt; subfolder of the workspace contains the source files (application logic, data, and assets) for the root application. For a multi-project workspace, additional projects in the &lt;code&gt;projects/&lt;/code&gt; folder contain a &lt;code&gt;project-name/src/&lt;/code&gt; subfolder with the same structure.</source>
          <target state="translated">単一アプリケーションワークスペースの場合、ワークスペースの &lt;code&gt;src/&lt;/code&gt; サブフォルダーには、ルートアプリケーションのソースファイル（アプリケーションロジック、データ、およびアセット）が含まれています。マルチプロジェクトワークスペースの場合、 &lt;code&gt;projects/&lt;/code&gt; フォルダー内の追加プロジェクトには、同じ構造の &lt;code&gt;project-name/src/&lt;/code&gt; サブフォルダーが含まれます。</target>
        </trans-unit>
        <trans-unit id="1aeb7084240197448ee7922cc65cd19b115f0503" translate="yes" xml:space="preserve">
          <source>For a use case in which &lt;code&gt;TestBed.get()&lt;/code&gt; does not work, see the &lt;a href=&quot;testing#component-override&quot;&gt;&lt;em&gt;Override component providers&lt;/em&gt;&lt;/a&gt; section that explains when and why you must get the service from the component's injector instead.</source>
          <target state="translated">&lt;code&gt;TestBed.get()&lt;/code&gt; が機能しないユースケースについては、代わりにコンポーネントのインジェクターからサービスを取得する必要がある理由と理由を説明している「&lt;a href=&quot;testing#component-override&quot;&gt;&lt;em&gt;コンポーネントプロバイダー&lt;/em&gt;&lt;/a&gt;の&lt;em&gt;オーバーライド」&lt;/em&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a56e67dc7e67f63fd67f62752b90970cdfa316a7" translate="yes" xml:space="preserve">
          <source>For a working app showcasing the resolution modifiers that this section covers, see the &lt;span name=&quot;resolution-modifiers&quot;&gt;resolution modifiers example&lt;/span&gt;.</source>
          <target state="translated">このセクションで説明する解像度修飾子を紹介する実際のアプリについては、&lt;span name=&quot;resolution-modifiers&quot;&gt;解像度修飾子の例を&lt;/span&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="b4d3ace35db801146c90ad64f7e68f94dffe96e6" translate="yes" xml:space="preserve">
          <source>For accessibility, always set the &lt;code&gt;alt&lt;/code&gt; attribute with a meaningful description of the image.</source>
          <target state="translated">アクセシビリティを &lt;code&gt;alt&lt;/code&gt; するために、常に画像のわかりやすい説明をalt属性に設定してください。</target>
        </trans-unit>
        <trans-unit id="08c197fce1dfb8440b4fadb4a18a680eb4703951" translate="yes" xml:space="preserve">
          <source>For additional guidelines and instructions on preparing an application for AOT compilation, see &lt;a href=&quot;https://medium.com/sparkles-blog/angular-writing-aot-friendly-applications-7b64c8afbe3f&quot;&gt;Angular: Writing AOT-friendly applications&lt;/a&gt;.</source>
          <target state="translated">アプリケーションをAOTコンパイル用に準備するための追加のガイドラインと手順については、&lt;a href=&quot;https://medium.com/sparkles-blog/angular-writing-aot-friendly-applications-7b64c8afbe3f&quot;&gt;Angular：Writing AOT-friendly applicationsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d02c51c70344581110641be00d5525e6d5b83bbc" translate="yes" xml:space="preserve">
          <source>For additional recommendations and examples, see:</source>
          <target state="translated">追加の推奨事項や例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="e5f519be37c93f048158115b0ff95a3f9cb7a9d2" translate="yes" xml:space="preserve">
          <source>For an enabled &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, the values of enabled controls as an object with a key-value pair for each member of the group.</source>
          <target state="translated">有効な &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の場合、有効なコントロールの値は、グループの各メンバーのキーと値のペアを持つオブジェクトとして。</target>
        </trans-unit>
        <trans-unit id="35fcfc95bf3f643ffc0e8e4b7a7a3e3d173e2e42" translate="yes" xml:space="preserve">
          <source>For an example app showcasing all the techniques that NgModules related pages cover, see the live example. For explanations on the individual techniques, visit the relevant NgModule pages under the NgModules section.</source>
          <target state="translated">NgModules 関連ページがカバーするすべてのテクニックを紹介するアプリの例は、ライブの例を参照してください。個々のテクニックの説明については、NgModulesセクションのNgModule関連ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9439fadc0091afb2c4f7db52e6361412bc108c20" translate="yes" xml:space="preserve">
          <source>For an existing application, you have to manually add the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; and defining a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; within your application.</source>
          <target state="translated">既存のアプリケーションの場合、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を手動で追加し、アプリケーション内で &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="0dfb27895771ef6dca5967dbe2c4298ec82610d4" translate="yes" xml:space="preserve">
          <source>For an extended example, see &lt;a href=&quot;../../guide/dependency-injection-in-action#optional&quot;&gt;&quot;Dependency Injection Guide&quot;&lt;/a&gt;.</source>
          <target state="translated">詳細な例については、&lt;a href=&quot;../../guide/dependency-injection-in-action#optional&quot;&gt;「依存性注入ガイド」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dbba5915671a316c7a339feaa343882d79960f93" translate="yes" xml:space="preserve">
          <source>For an in-depth introduction to issues and techniques for designing accessible applications, see the &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/#what_is_accessibility&quot;&gt;Accessibility&lt;/a&gt; section of the Google's &lt;a href=&quot;https://developers.google.com/web/fundamentals/&quot;&gt;Web Fundamentals&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/#what_is_accessibility&quot;&gt;アクセシブル&lt;/a&gt;なアプリケーションを設計するための問題と手法の詳細については、Googleの&lt;a href=&quot;https://developers.google.com/web/fundamentals/&quot;&gt;ウェブの基礎&lt;/a&gt;のアクセシビリティセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="02d5c37942e06265530fb10df1a081ea18901c63" translate="yes" xml:space="preserve">
          <source>For any dependency that you need in your app, you must register a provider with the app's injector, so that the injector can use the provider to create new instances. For a service, the provider is typically the service class itself.</source>
          <target state="translated">アプリで必要な依存関係については、アプリのインジェクタにプロバイダを登録する必要があります。サービスの場合、プロバイダは通常、サービス クラス自体です。</target>
        </trans-unit>
        <trans-unit id="4cc9bd9ca012eb99d48275d26071684014874aee" translate="yes" xml:space="preserve">
          <source>For applications that do not use the Angular service worker, refreshing now would display Chrome's Internet disconnected page that says &quot;There is no Internet connection&quot;.</source>
          <target state="translated">Angularのサービスワーカーを使っていないアプリケーションの場合、今すぐリフレッシュするとChromeの「インターネットに接続されていません」というページが表示されてしまいます。</target>
        </trans-unit>
        <trans-unit id="4e085192902c042727c03a5e288669b2ed78933e" translate="yes" xml:space="preserve">
          <source>For applications that use a module loader, TypeScript imports and exports (which are really ECMAScript 2015 imports and exports) can be used to organize code into modules.</source>
          <target state="translated">モジュールローダーを使用するアプリケーションでは、TypeScript のインポートとエクスポート(これは実際には ECMAScript 2015 のインポートとエクスポートです)を使用して、コードをモジュールに整理することができます。</target>
        </trans-unit>
        <trans-unit id="82065dd0d194076720bd160e9ef4ea6f38ae23b4" translate="yes" xml:space="preserve">
          <source>For apps that run in the browser, import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; in the root &lt;code&gt;AppModule&lt;/code&gt; because it provides services that are essential to launch and run a browser app. &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;&amp;rsquo;s providers are for the whole app so it should only be in the root module, not in feature modules. Feature modules only need the common directives in &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;; they don&amp;rsquo;t need to re-install app-wide providers.</source>
          <target state="translated">ブラウザーで実行するアプリの場合は、ブラウザーアプリを起動して実行するために不可欠なサービスを提供するため、ルート &lt;code&gt;AppModule&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートします。 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; のプロバイダーはアプリ全体を対象としているため、機能モジュールではなく、ルートモジュールにのみ配置する必要があります。機能モジュールは &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; の共通ディレクティブのみを必要とします。アプリ全体のプロバイダーを再インストールする必要はありません。</target>
        </trans-unit>
        <trans-unit id="71739e2e72f69ca13115636123c21e230580b17e" translate="yes" xml:space="preserve">
          <source>For apps that use routing</source>
          <target state="translated">ルーティングを使用するアプリの場合</target>
        </trans-unit>
        <trans-unit id="d6454be884bb001961f7873a56e27650c1d20938" translate="yes" xml:space="preserve">
          <source>For block code snippets, we generally prefer to display code with the Angular documentation &lt;em&gt;code-example&lt;/em&gt; component represented by the &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tag. The &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tag has a &lt;code&gt;header&lt;/code&gt; attribute that you use to identify the file that the example comes from. The header should be used whenever possible to establish the context of the example. See &lt;a href=&quot;docs-style-guide#code-snippets-and-code-samples&quot;&gt;Code snippets and code examples&lt;/a&gt; for more details.</source>
          <target state="translated">ブロックコードスニペットの場合、通常、 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; タグで表されるAngularドキュメントの&lt;em&gt;コード例&lt;/em&gt;コンポーネントを使用してコードを表示することを好みます。 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; タグは &lt;code&gt;header&lt;/code&gt; あなたは例がから来ているファイルを識別するために使用する属性を。ヘッダーは、例のコンテキストを確立するために可能な限り使用する必要があります。詳細については、&lt;a href=&quot;docs-style-guide#code-snippets-and-code-samples&quot;&gt;コードスニペットとコード例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="71540f69257e7ef9f20551f9d8e74cdfb9693cc2" translate="yes" xml:space="preserve">
          <source>For cases where this is unavoidable, use the built-in Angular sanitization functions. Sanitize untrusted values with the &lt;a href=&quot;../api/platform-browser/domsanitizer#sanitize&quot;&gt;DomSanitizer.sanitize&lt;/a&gt; method and the appropriate &lt;code&gt;&lt;a href=&quot;../api/core/securitycontext&quot;&gt;SecurityContext&lt;/a&gt;&lt;/code&gt;. That function also accepts values that were marked as trusted using the &lt;code&gt;bypassSecurityTrust&lt;/code&gt;... functions, and will not sanitize them, as &lt;a href=&quot;security#bypass-security-apis&quot;&gt;described below&lt;/a&gt;.</source>
          <target state="translated">これが避けられない場合は、組み込みのAngularサニタイズ関数を使用してください。&lt;a href=&quot;../api/platform-browser/domsanitizer#sanitize&quot;&gt;DomSanitizer.sanitize&lt;/a&gt;メソッドと適切な &lt;code&gt;&lt;a href=&quot;../api/core/securitycontext&quot;&gt;SecurityContext&lt;/a&gt;&lt;/code&gt; を使用して、信頼できない値を無害化します。この関数は、 &lt;code&gt;bypassSecurityTrust&lt;/code&gt; ...関数を使用して信頼できるとマークされた値も受け入れ、&lt;a href=&quot;security#bypass-security-apis&quot;&gt;以下で説明するように&lt;/a&gt;それらをサニタイズしません。</target>
        </trans-unit>
        <trans-unit id="8a39b3875e189eb4ca0c89b960bcc8cb4271675d" translate="yes" xml:space="preserve">
          <source>For comparison, the demo shows both methods. One button adds the popup using the dynamic-loading method, and the other uses the custom element. You can see that the result is the same; only the preparation is different.</source>
          <target state="translated">比較のために、デモでは両方の方法を示しています。一方のボタンはダイナミック ロード メソッドを使用してポップアップを追加し、もう一方のボタンはカスタム要素を使用しています。結果が同じであることがわかります。</target>
        </trans-unit>
        <trans-unit id="865a0de0e84df467f2e752ab54699a7f5954a151" translate="yes" xml:space="preserve">
          <source>For context, consider setting a &lt;em&gt;single&lt;/em&gt; style value with &lt;a href=&quot;template-syntax#style-binding&quot;&gt;style binding&lt;/a&gt;, without &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンテキストについては、 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; を使用せずに、&lt;a href=&quot;template-syntax#style-binding&quot;&gt;スタイルバインディング&lt;/a&gt;で&lt;em&gt;単一の&lt;/em&gt;スタイル値を設定することを検討してください。</target>
        </trans-unit>
        <trans-unit id="8bc830cbd7287563c25d1d3389827fb12f3a8001" translate="yes" xml:space="preserve">
          <source>For custom classes or interfaces used in components or service, check whether they depend on additional classes or interfaces that also need to be migrated.</source>
          <target state="translated">コンポーネントやサービスで使用されるカスタムクラスやインターフェイスについては、それらが追加のクラスやインターフェイスに依存しているかどうかを確認し、それらも移行する必要があります。</target>
        </trans-unit>
        <trans-unit id="3c55a614865ad2c11b1723c5f48adafb226d2339" translate="yes" xml:space="preserve">
          <source>For data or logic that isn't associated with a specific view, and that you want to share across components, you create a &lt;em&gt;service&lt;/em&gt; class. A service class definition is immediately preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. The decorator provides the metadata that allows other providers to be &lt;strong&gt;injected&lt;/strong&gt; as dependencies into your class.</source>
          <target state="translated">特定のビューに関連付けられておらず、コンポーネント間で共有するデータまたはロジックについては、&lt;em&gt;サービス&lt;/em&gt;クラスを作成し&lt;em&gt;ます&lt;/em&gt;。サービスクラス定義の直前には、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータがあります。デコレーターは、他のプロバイダーを依存関係としてクラスに&lt;strong&gt;挿入&lt;/strong&gt;できるようにするメタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="ba3f9f9ba909015786f607f654afb1de87571018" translate="yes" xml:space="preserve">
          <source>For detailed information and guidance on updating your application, see the interactive &lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guide&lt;/a&gt;.</source>
          <target state="translated">アプリケーションの更新に関する詳細情報とガイダンスについては、インタラクティブな&lt;a href=&quot;https://update.angular.io/&quot;&gt;Angular Update Guideを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3c0f77845d6547228c1544a3261cba4f83b3a74" translate="yes" xml:space="preserve">
          <source>For detailed usage information, see the &lt;a href=&quot;../../guide/router&quot;&gt;Routing Guide&lt;/a&gt;.</source>
          <target state="translated">使用方法の詳細については、&lt;a href=&quot;../../guide/router&quot;&gt;ルーティングガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f1475c5e9774d7a4a828ca68604b8f34d2642f0e" translate="yes" xml:space="preserve">
          <source>For details about &lt;code&gt;tsconfig.json&lt;/code&gt;, see the official &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript wiki&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;tsconfig.json&lt;/code&gt; の詳細については、公式の&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript wikiを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4bab4f7c1f186fde5dd33b6553841cab367c91c7" translate="yes" xml:space="preserve">
          <source>For details about changes between versions, and information about updating from previous releases, see the Releases tab on GitHub: &lt;a href=&quot;https://github.com/angular/angular-cli/releases&quot;&gt;https://github.com/angular/angular-cli/releases&lt;/a&gt;</source>
          <target state="translated">バージョン間の変更の詳細と、以前のリリースからの更新については、GitHubの[リリース]タブを参照して&lt;a href=&quot;https://github.com/angular/angular-cli/releases&quot;&gt;ください&lt;/a&gt;：https : //github.com/angular/angular-cli/releases</target>
        </trans-unit>
        <trans-unit id="23766cd9b30ec2bf351ff63c0849a0f6f387aa95" translate="yes" xml:space="preserve">
          <source>For details of these data structure and syntax, see the &lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/schematics/README.md&quot;&gt;Schematics README&lt;/a&gt;.</source>
          <target state="translated">これらのデータ構造と構文の詳細については、&lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/schematics/README.md&quot;&gt;回路図のREADMEを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="541fccad9c0f3d4d19e2c625af6f980747075926" translate="yes" xml:space="preserve">
          <source>For each aspect of style, the following table explains where to find the primary guidelines and what this Angular Documentation Style Guide offers.</source>
          <target state="translated">スタイルの各側面について、以下の表では、主要なガイドラインがどこにあるか、このAngular Documentation Style Guideでは何を提供しているかを説明しています。</target>
        </trans-unit>
        <trans-unit id="a0e64be003f64e5e53c53df41839088c920fc00a" translate="yes" xml:space="preserve">
          <source>For each component listed here, Angular creates a &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; and stores it in the &lt;code&gt;&lt;a href=&quot;componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ここにリストされているコンポーネントごとに、Angularは &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; を作成し、それをComponentFactoryResolverに格納し &lt;code&gt;&lt;a href=&quot;componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="add8347c026ab345310af632fb1bca00afd1317e" translate="yes" xml:space="preserve">
          <source>For each match:</source>
          <target state="translated">一試合ごとに。</target>
        </trans-unit>
        <trans-unit id="6b06187ade59dfe6abfc2250cd1459d4dbed3837" translate="yes" xml:space="preserve">
          <source>For each of these elements, use &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; to set the same initial style for the element. Make it invisible and use &lt;code&gt;transform&lt;/code&gt; to move it out of position so that it can slide into place.</source>
          <target state="translated">これらの各要素について、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; を使用して、要素に同じ初期スタイルを設定します。それを非表示にして、 &lt;code&gt;transform&lt;/code&gt; を使用して位置から移動し、所定の位置にスライドできるようにします。</target>
        </trans-unit>
        <trans-unit id="296a1f382667ab3a9cb177eb53e0592ff7e4bf62" translate="yes" xml:space="preserve">
          <source>For each translation source file, there must be at least one language translation file for the resulting translation.</source>
          <target state="translated">各翻訳ソースファイルには、結果として得られる翻訳のための少なくとも1つの言語翻訳ファイルが必要です。</target>
        </trans-unit>
        <trans-unit id="f475cf41b7700ea33baa6ae4dbc1042f33b1e212" translate="yes" xml:space="preserve">
          <source>For elements entering or leaving a page (inserted or removed from the DOM), you can make the animations conditional. For example, use &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; with the animation trigger in the HTML template.</source>
          <target state="translated">ページに出入りする要素（DOMに挿入またはDOMから削除）の場合、アニメーションを条件付きにすることができます。たとえば、HTMLテンプレートのアニメーショントリガーで &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="33c47e78379e5f8c12f7ffa6ef6ee132951e2a7d" translate="yes" xml:space="preserve">
          <source>For event binding, define the name of the target event within parenthesis and specify a template statement, in quotes, to the right of the equals. Angular then sets up an event handler for the target event. When the event is raised, the handler executes the template statement.</source>
          <target state="translated">イベントバインディングでは、括弧内にターゲットイベントの名前を定義し、等号の右に引用符でテンプレート文を指定します。そしてAngularはターゲットイベントのイベントハンドラを設定します。イベントが発生すると、ハンドラはテンプレート文を実行します。</target>
        </trans-unit>
        <trans-unit id="d7b7cbd57eaa134c7d6bdd77cb83b62a700f7de3" translate="yes" xml:space="preserve">
          <source>For event handling:</source>
          <target state="translated">イベント処理のために。</target>
        </trans-unit>
        <trans-unit id="e9f25525aed49da6509dcc93159089fed66c4a10" translate="yes" xml:space="preserve">
          <source>For every Angular component you write, you may define not only an HTML template, but also the CSS styles that go with that template, specifying any selectors, rules, and media queries that you need.</source>
          <target state="translated">Angularコンポーネントを書くたびに、HTMLテンプレートだけでなく、そのテンプレートに対応するCSSスタイルを定義し、必要なセレクタやルール、メディアクエリを指定することができます。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="4d6913e010e0058aed0de321b5d366d10bad9a9e" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/build_angular/src/browser&quot;&gt;BrowserBuilder&lt;/a&gt; runs a &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; build for a browser target and &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/build_angular/src/karma&quot;&gt;KarmaBuilder&lt;/a&gt; starts the Karma server and runs a webpack build for unit tests.</source>
          <target state="translated">例えば、&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/build_angular/src/browser&quot;&gt;BrowserBuilderは&lt;/a&gt;走る&lt;a href=&quot;https://webpack.js.org/&quot;&gt;のWebPACKの&lt;/a&gt;ブラウザターゲットのビルドをして&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/build_angular/src/karma&quot;&gt;KarmaBuilderは&lt;/a&gt;カルマサーバを起動し、ユニットテストのためのWebPACKのビルドを実行します。</target>
        </trans-unit>
        <trans-unit id="80491223b62ca89010c42d30ab7078fdf403f816" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;HeroListComponent&lt;/code&gt; has a &lt;code&gt;heroes&lt;/code&gt; property that holds an array of heroes. Its &lt;code&gt;selectHero()&lt;/code&gt; method sets a &lt;code&gt;selectedHero&lt;/code&gt; property when the user clicks to choose a hero from that list. The component acquires the heroes from a service, which is a TypeScript &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties&quot;&gt;parameter property&lt;/a&gt; on the constructor. The service is provided to the component through the dependency injection system.</source>
          <target state="translated">たとえば、 &lt;code&gt;HeroListComponent&lt;/code&gt; には、 &lt;code&gt;heroes&lt;/code&gt; の配列を保持するheroesプロパティがあります。その &lt;code&gt;selectHero()&lt;/code&gt; メソッドは、ユーザーがクリックしてそのリストからヒーローを選択したときに、 &lt;code&gt;selectedHero&lt;/code&gt; プロパティを設定します。コンポーネントは、コンストラクターのTypeScript &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties&quot;&gt;パラメータープロパティ&lt;/a&gt;であるサービスからヒーローを取得します。サービスは、依存性注入システムを介してコンポーネントに提供されます。</target>
        </trans-unit>
        <trans-unit id="b6aa917da6b6eeb1890dd5111f497f98b6683379" translate="yes" xml:space="preserve">
          <source>For example, Angular can inject &lt;code&gt;HeroListComponent&lt;/code&gt; with both the &lt;code&gt;HeroService&lt;/code&gt; provided in &lt;code&gt;HeroComponent&lt;/code&gt; and the &lt;code&gt;UserService&lt;/code&gt; provided in &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">例えば、角度は、注入することができる &lt;code&gt;HeroListComponent&lt;/code&gt; を両方と &lt;code&gt;HeroService&lt;/code&gt; に設け &lt;code&gt;HeroComponent&lt;/code&gt; と &lt;code&gt;UserService&lt;/code&gt; の中に設けられ &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="82d24ea45789f45e5fa4e90e30c668abcffbfce7" translate="yes" xml:space="preserve">
          <source>For example, a built-in builder for linting is defined in the package &lt;code&gt;@angular-devkit/build_angular:tslint&lt;/code&gt;, which uses the &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; tool to perform linting, with a configuration specified in a &lt;code&gt;tslint.json&lt;/code&gt; file.</source>
          <target state="translated">たとえば、 &lt;code&gt;@angular-devkit/build_angular:tslint&lt;/code&gt; ビルダーは、パッケージ@ angular-devkit / build_angular：tslintで定義されて &lt;code&gt;tslint.json&lt;/code&gt; ます。これは、tslint.jsonファイルで指定された構成で、&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;ツールを使用してlintingを実行します。</target>
        </trans-unit>
        <trans-unit id="732fad8249ef09aa9ab6fe01f4372cc002fca1c2" translate="yes" xml:space="preserve">
          <source>For example, a transition of &lt;code&gt;open =&amp;gt; *&lt;/code&gt; applies when the element's state changes from open to anything else.</source>
          <target state="translated">たとえば、 &lt;code&gt;open =&amp;gt; *&lt;/code&gt; 遷移は、要素の状態がオープンから他の状態に変化したときに適用されます。</target>
        </trans-unit>
        <trans-unit id="25f66f9c3ad7f2808ac5ea2976e1fc3d55ba5553" translate="yes" xml:space="preserve">
          <source>For example, an editing component that needs a private copy of a caching service should register the service with the component. Then each new instance of the component gets its own cached service instance. The changes that editor makes in its service don't touch the instances elsewhere in the application.</source>
          <target state="translated">例えば、キャッシュサービスのプライベートコピーを必要とする編集コンポーネントは、そのサービスをコンポーネントに登録しなければなりません。そうすると、コンポーネントの各新しいインスタンスは、それ自身のキャッシュされたサービスのインスタンスを取得します。エディタがそのサービスで行う変更は、アプリケーションの他の場所にあるインスタンスには触れません。</target>
        </trans-unit>
        <trans-unit id="739cb885493d2787dba9c93f52ae62f7f74aeac8" translate="yes" xml:space="preserve">
          <source>For example, consider the following component:</source>
          <target state="translated">例えば、次のようなコンポーネントを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="77309a0ead13cf82a0f2d21ff03d6d13581cbf6a" translate="yes" xml:space="preserve">
          <source>For example, consider the following function:</source>
          <target state="translated">例えば、次のような関数を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="dc3716dac11d8351ec07f6539fd77189eac41acb" translate="yes" xml:space="preserve">
          <source>For example, consider the following route configuration where the parent route has two children.</source>
          <target state="translated">たとえば、親ルートに子ルートが 2 つある場合の次のルート構成を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b4f0c5afbbac2af41a81085ea8ed62d709c36ddc" translate="yes" xml:space="preserve">
          <source>For example, for the default &lt;code&gt;en-US&lt;/code&gt; locale, the code &lt;code&gt;USD&lt;/code&gt; can be represented by the narrow symbol &lt;code&gt;$&lt;/code&gt; or the wide symbol &lt;code&gt;US$&lt;/code&gt;.</source>
          <target state="translated">たとえば、デフォルトの &lt;code&gt;en-US&lt;/code&gt; ロケールの場合、コード &lt;code&gt;USD&lt;/code&gt; は狭い記号 &lt;code&gt;$&lt;/code&gt; または広い記号 &lt;code&gt;US$&lt;/code&gt; で表すことができます。</target>
        </trans-unit>
        <trans-unit id="2fe7e7470440d10c52ecb62d35898eb8bd34b72a" translate="yes" xml:space="preserve">
          <source>For example, for the following &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">たとえば、次の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="c8c075f684e624819ce3836008614ddc832ae598" translate="yes" xml:space="preserve">
          <source>For example, here is a template for the Tutorial's &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">たとえば、以下はチュートリアルの &lt;code&gt;HeroListComponent&lt;/code&gt; のテンプレートです。</target>
        </trans-unit>
        <trans-unit id="2a7d61883c2231b9e61654a0869917789d9575c0" translate="yes" xml:space="preserve">
          <source>For example, if a library uses the &lt;code&gt;public_api.ts&lt;/code&gt; file as the library index of the module, the &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;code&gt;files&lt;/code&gt; field would be &lt;code&gt;[&quot;public_api.ts&quot;]&lt;/code&gt;. The &lt;code&gt;flatModuleOutFile&lt;/code&gt; options could then be set to (for example) &lt;code&gt;&quot;index.js&quot;&lt;/code&gt;, which produces &lt;code&gt;index.d.ts&lt;/code&gt; and &lt;code&gt;index.metadata.json&lt;/code&gt; files. The &lt;code&gt;module&lt;/code&gt; field of the library's &lt;code&gt;package.json&lt;/code&gt; would be &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; and the &lt;code&gt;typings&lt;/code&gt; field would be &lt;code&gt;&quot;index.d.ts&quot;&lt;/code&gt;.</source>
          <target state="translated">たとえば、ライブラリがモジュールのライブラリインデックスとして &lt;code&gt;public_api.ts&lt;/code&gt; ファイルを使用する場合、 &lt;code&gt;tsconfig.json&lt;/code&gt; &lt;code&gt;files&lt;/code&gt; フィールドは &lt;code&gt;[&quot;public_api.ts&quot;]&lt;/code&gt; になります。 &lt;code&gt;flatModuleOutFile&lt;/code&gt; のオプションは、その後、（例えば）に設定することができ &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; 生産、 &lt;code&gt;index.d.ts&lt;/code&gt; と &lt;code&gt;index.metadata.json&lt;/code&gt; ファイルを。 &lt;code&gt;module&lt;/code&gt; ライブラリのフィールドの &lt;code&gt;package.json&lt;/code&gt; はだろう &lt;code&gt;&quot;index.js&quot;&lt;/code&gt; と &lt;code&gt;typings&lt;/code&gt; フィールドは次のようになり &lt;code&gt;&quot;index.d.ts&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b81a21f01e25a665c1c9400ac1c5b89dc572aa7b" translate="yes" xml:space="preserve">
          <source>For example, if the French version of your application is served from &lt;a href=&quot;https://example.com/fr/&quot;&gt;https://example.com/fr/&lt;/a&gt;, configure the build for the French version as follows.</source>
          <target state="translated">たとえば、アプリケーションのフランス語バージョンが&lt;a href=&quot;https://example.com/fr/&quot;&gt;https://example.com/fr/&lt;/a&gt;から提供されている場合、フランス語バージョンのビルドを次のように構成します。</target>
        </trans-unit>
        <trans-unit id="a33aa4930d3aff657073486b8fed408d9c29db44" translate="yes" xml:space="preserve">
          <source>For example, if you need the optional &lt;a href=&quot;http://caniuse.com/#feat=web-animation&quot;&gt;web animations polyfill&lt;/a&gt;, you could install it with &lt;code&gt;npm&lt;/code&gt;, using the following command (or the &lt;code&gt;yarn&lt;/code&gt; equivalent):</source>
          <target state="translated">たとえば、オプションの&lt;a href=&quot;http://caniuse.com/#feat=web-animation&quot;&gt;Webアニメーションpolyfill&lt;/a&gt;が必要な場合は、次のコマンド（または同等の &lt;code&gt;yarn&lt;/code&gt; ）を使用して &lt;code&gt;npm&lt;/code&gt; でインストールできます。</target>
        </trans-unit>
        <trans-unit id="c22fe616dc591e5618b6ef992b62f4f3ae8f9bf5" translate="yes" xml:space="preserve">
          <source>For example, imagine a hero detail AngularJS component directive with one input and one output:</source>
          <target state="translated">例えば、入力と出力が1つのAngularJSコンポーネントディレクティブを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="9497ba845db03e6deeadaf9eeb58a4e88d893d5f" translate="yes" xml:space="preserve">
          <source>For example, import Angular's &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator from the &lt;code&gt;@angular/core&lt;/code&gt; library like this.</source>
          <target state="translated">たとえば、次のように &lt;code&gt;@angular/core&lt;/code&gt; ライブラリからAngularの &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータをインポートします。</target>
        </trans-unit>
        <trans-unit id="2c9480456f714aaa0550fa7da62cd14883843469" translate="yes" xml:space="preserve">
          <source>For example, in the following &lt;code&gt;SelfComponent&lt;/code&gt;, notice the injected &lt;code&gt;LeafService&lt;/code&gt; in the constructor.</source>
          <target state="translated">たとえば、次の &lt;code&gt;SelfComponent&lt;/code&gt; では、コンストラクターに挿入された &lt;code&gt;LeafService&lt;/code&gt; に注目してください。</target>
        </trans-unit>
        <trans-unit id="8428be5de3c94ec35c0505f75175025745d09917" translate="yes" xml:space="preserve">
          <source>For example, instead of creating a custom element for a new variety of button, you can create a component that uses an attribute selector with a native &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element. This most commonly applies to &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;, but can be used with many other types of element.</source>
          <target state="translated">たとえば、さまざまなボタンのカスタム要素を作成する代わりに、ネイティブの &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素で属性セレクターを使用するコンポーネントを作成できます。これは、最も一般的に適用され &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; が、要素の多くの他のタイプと一緒に使用することができます。</target>
        </trans-unit>
        <trans-unit id="fc0eca467862c90d9efa8e862b3587a8516e1e51" translate="yes" xml:space="preserve">
          <source>For example, it is &lt;em&gt;OK&lt;/em&gt; to use a downgraded service in an upgraded component that is only used from a downgraded Angular component provided by the same Angular module as the injectable, but it is &lt;em&gt;not OK&lt;/em&gt; to use it in an AngularJS component that may be used independently of Angular or use it in a downgraded Angular component from a different module.</source>
          <target state="translated">たとえば、インジェクタブルと同じAngularモジュールによって提供されるダウングレードされたAngularコンポーネントからのみ使用されるアップグレードされたコンポーネントでダウングレードされたサービスを使用することは&lt;em&gt;問題&lt;/em&gt;あり&lt;em&gt;ません&lt;/em&gt;が、使用される可能性があるAngularJSコンポーネントでそれを使用すること&lt;em&gt;は問題です&lt;/em&gt; Angularとは独立して、または別のモジュールからダウングレードされたAngularコンポーネントで使用します。</target>
        </trans-unit>
        <trans-unit id="a530aeb597282a353eb4d4d6d60ae2538af8352d" translate="yes" xml:space="preserve">
          <source>For example, server-side applications can't reference browser-only global objects such as &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;navigator&lt;/code&gt;, or &lt;code&gt;location&lt;/code&gt;.</source>
          <target state="translated">たとえば、サーバー側のアプリケーションは、 &lt;code&gt;window&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;navigator&lt;/code&gt; 、または &lt;code&gt;location&lt;/code&gt; などのブラウザのみのグローバルオブジェクトを参照できません。</target>
        </trans-unit>
        <trans-unit id="51c9d0d42d97cb3dc764d10dcc6d02499fe9694c" translate="yes" xml:space="preserve">
          <source>For example, suppose &lt;code&gt;HeroService&lt;/code&gt; must hide &lt;em&gt;secret&lt;/em&gt; heroes from normal users. Only authorized users should see secret heroes.</source>
          <target state="translated">たとえば、 &lt;code&gt;HeroService&lt;/code&gt; が通常のユーザーから&lt;em&gt;秘密の&lt;/em&gt;ヒーローを隠す必要があるとします。許可されたユーザーだけが秘密のヒーローを見るべきです。</target>
        </trans-unit>
        <trans-unit id="6b4cc94083c8a1f80c798bd5b2740e8280186eba" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a library named &lt;code&gt;d3&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;d3&lt;/code&gt; という名前のライブラリがあるとします。</target>
        </trans-unit>
        <trans-unit id="9cf9a7d912b31fc9ca8f7e31178ff59413bd7823" translate="yes" xml:space="preserve">
          <source>For example, suppose you want the code base to have a minimum of 80% code coverage. To enable this, open the &lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt; test platform configuration file, &lt;code&gt;karma.conf.js&lt;/code&gt;, and add the following in the &lt;code&gt;coverageIstanbulReporter:&lt;/code&gt; key.</source>
          <target state="translated">たとえば、コードベースのコードカバレッジを80％以上にする必要があるとします。これを有効にするには、&lt;a href=&quot;https://karma-runner.github.io&quot;&gt;Karma&lt;/a&gt;テストプラットフォーム構成ファイル &lt;code&gt;karma.conf.js&lt;/code&gt; を開き、 &lt;code&gt;coverageIstanbulReporter:&lt;/code&gt; キーに以下を追加します。</target>
        </trans-unit>
        <trans-unit id="50af682ddaaa55b01d052b01aa7cf905686b0845" translate="yes" xml:space="preserve">
          <source>For example, suppose you want to update the Angular Material library.</source>
          <target state="translated">例えば、Angular Materialライブラリをアップデートしたいとします。</target>
        </trans-unit>
        <trans-unit id="8c1ddb2e15f1cddcbdbcc32d6cc7eb48668f91d9" translate="yes" xml:space="preserve">
          <source>For example, the &quot;serve&quot; target for a newly generated app has a predefined alternate configuration named &quot;production&quot;.</source>
          <target state="translated">例えば、新しく生成されたアプリの &quot;サーブ &quot;ターゲットには、&quot;production &quot;という名前の事前定義された代替構成があります。</target>
        </trans-unit>
        <trans-unit id="cc73b8c8adf28b76d8cfa49ae3ca83692737c35f" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;https://material.angular.io/guide/schematics&quot;&gt;&lt;code&gt;@angular/material&lt;/code&gt;&lt;/a&gt; schematic tells the &lt;code&gt;add&lt;/code&gt; command to install and set up Angular Material and theming, and register new starter components that can be created with &lt;code&gt;ng generate&lt;/code&gt;. You can look at this one as an example and model for your own add schematic.</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://material.angular.io/guide/schematics&quot;&gt; &lt;code&gt;@angular/material&lt;/code&gt; &lt;/a&gt;回路図は、Angular Materialとテーマをインストールおよび設定し、 &lt;code&gt;ng generate&lt;/code&gt; で作成できる新しいスターターコンポーネントを登録するように &lt;code&gt;add&lt;/code&gt; コマンドに指示します。あなたはこれをあなた自身の追加回路図の例とモデルとして見ることができます。</target>
        </trans-unit>
        <trans-unit id="67592c68e2ac00ea2d43029031e1ca81f42456e3" translate="yes" xml:space="preserve">
          <source>For example, the Architect builder invoked by the &lt;code&gt;ng build&lt;/code&gt; command to compile a project uses a particular build tool, and has a default configuration whose values can be overridden on the command line. The &lt;code&gt;build&lt;/code&gt; target also defines an alternate configuration for a &quot;production&quot; build, that can be invoked with the &lt;code&gt;--prod&lt;/code&gt; flag on the &lt;code&gt;build&lt;/code&gt; command.</source>
          <target state="translated">たとえば、プロジェクトをコンパイルする &lt;code&gt;ng build&lt;/code&gt; にng buildコマンドによって呼び出されたArchitectビルダーは、特定のビルドツールを使用し、コマンドラインで値をオーバーライドできるデフォルトの構成を持っています。 &lt;code&gt;build&lt;/code&gt; ターゲットも用いて呼び出すことができる「生産」のビルドのための代替構成を定義 &lt;code&gt;--prod&lt;/code&gt; にフラグ &lt;code&gt;build&lt;/code&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="456036b268aa96f0d5baa4b16b7b44a79b22f13f" translate="yes" xml:space="preserve">
          <source>For example, the collector can evaluate the expression &lt;code&gt;1 + 2 + 3 + 4&lt;/code&gt; and replace it with the result, &lt;code&gt;10&lt;/code&gt;. This process is called &lt;em&gt;folding&lt;/em&gt;. An expression that can be reduced in this manner is &lt;em&gt;foldable&lt;/em&gt;.</source>
          <target state="translated">たとえば、コレクターは式 &lt;code&gt;1 + 2 + 3 + 4&lt;/code&gt; を評価し、それを結果 &lt;code&gt;10&lt;/code&gt; に置き換えることができます。このプロセスは&lt;em&gt;フォールディング&lt;/em&gt;と呼ばれます。この方法で削減できる表現は&lt;em&gt;折りたたみ式&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="2f7aeac99d50d45ab995bb01629c8d23060ea8aa" translate="yes" xml:space="preserve">
          <source>For example, the component might render first on the server as part of a strategy to make the application launch faster on poorly connected devices. The server-side renderer might not support the full HTML element API. If it doesn't support &lt;code&gt;querySelector&lt;/code&gt;, the previous test could fail.</source>
          <target state="translated">たとえば、コンポーネントは、適切に接続されていないデバイスでアプリケーションをより速く起動するための戦略の一環として、最初にサーバーでレンダリングする場合があります。サーバー側レンダラーは、完全なHTML要素APIをサポートしていない場合があります。 &lt;code&gt;querySelector&lt;/code&gt; をサポートしていない場合、前のテストは失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="bb48f3cec557aac01648a938091dba4a6beb45dc" translate="yes" xml:space="preserve">
          <source>For example, the default asset paths can be represented in more detail using the following objects.</source>
          <target state="translated">例えば、デフォルトのアセットパスは、以下のオブジェクトを使用してより詳細に表現することができます。</target>
        </trans-unit>
        <trans-unit id="ef9fd37dd42bb3ceaffed96656df1ed72a8779fa" translate="yes" xml:space="preserve">
          <source>For example, the following CLI command generates a &lt;code&gt;BannerComponent&lt;/code&gt; in the &lt;code&gt;app/banner&lt;/code&gt; folder (with inline template and styles):</source>
          <target state="translated">たとえば、次のCLIコマンドは、 &lt;code&gt;app/banner&lt;/code&gt; フォルダーに（インラインテンプレートとスタイルを使用して） &lt;code&gt;BannerComponent&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="8e517bddb93ce781c7476fd73f84439d73846cfb" translate="yes" xml:space="preserve">
          <source>For example, the following command automatically deploys a project to Firebase.</source>
          <target state="translated">例えば、以下のコマンドはプロジェクトを自動的にFirebaseにデプロイします。</target>
        </trans-unit>
        <trans-unit id="d8927bb5a286f843d8058d130909cac403f48606" translate="yes" xml:space="preserve">
          <source>For example, the following command generates an NgModule that can use routing.</source>
          <target state="translated">例えば、以下のコマンドはルーティングを使用できるNgModuleを生成します。</target>
        </trans-unit>
        <trans-unit id="da0b61ba544cc7d6caa5e9d00194681f6e850326" translate="yes" xml:space="preserve">
          <source>For example, the string &quot;1s 100ms ease-out&quot; specifies a duration of 1000 milliseconds, and delay of 100 ms, and the &quot;ease-out&quot; easing style, which decelerates near the end of the duration.</source>
          <target state="translated">例えば、文字列 &quot;1s 100ms ease-out &quot;は、持続時間1000ミリ秒、遅延時間100ミリ秒を指定し、持続時間の終わり付近で減速する &quot;ease-out &quot;のイージングスタイルを指定しています。</target>
        </trans-unit>
        <trans-unit id="a9d7730eccbd0e92f23996837e3a8f11bef70174" translate="yes" xml:space="preserve">
          <source>For example, the string &lt;code&gt;3d12h&lt;/code&gt; will cache content for up to three and a half days.</source>
          <target state="translated">たとえば、文字列 &lt;code&gt;3d12h&lt;/code&gt; はコンテンツを最大3日半キャッシュします。</target>
        </trans-unit>
        <trans-unit id="e4708f232b7a2d860945bf98f596301e9e4e5e00" translate="yes" xml:space="preserve">
          <source>For example, the string &lt;code&gt;5s30u&lt;/code&gt; will translate to five seconds and 30 milliseconds of network timeout.</source>
          <target state="translated">たとえば、文字列 &lt;code&gt;5s30u&lt;/code&gt; は5秒30ミリ秒のネットワークタイムアウトに変換されます。</target>
        </trans-unit>
        <trans-unit id="8d6864b09909a8d7bd1794440def9f0c31acd333" translate="yes" xml:space="preserve">
          <source>For example, to create an observable equivalent to the &lt;code&gt;of(1, 2, 3)&lt;/code&gt; above, you could do something like this:</source>
          <target state="translated">たとえば、上記の &lt;code&gt;of(1, 2, 3)&lt;/code&gt; と同等のオブザーバブルを作成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="7e21a6e50d611a4b649e738293bcbf7e12410528" translate="yes" xml:space="preserve">
          <source>For example, to get a &lt;code&gt;name&lt;/code&gt; control nested within a &lt;code&gt;person&lt;/code&gt; sub-group:</source>
          <target state="translated">たとえば、 &lt;code&gt;person&lt;/code&gt; サブグループ内にネストされた &lt;code&gt;name&lt;/code&gt; コントロールを取得するには：</target>
        </trans-unit>
        <trans-unit id="2795d73c033ee5a4023bcbd6348118e04af1633f" translate="yes" xml:space="preserve">
          <source>For example, to use the &lt;a href=&quot;https://getbootstrap.com/docs/4.0/getting-started/introduction/&quot;&gt;Bootstrap 4&lt;/a&gt; library, first install the library and its dependencies using the npm package manager:</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://getbootstrap.com/docs/4.0/getting-started/introduction/&quot;&gt;Bootstrap 4&lt;/a&gt;ライブラリを使用するには、まずnpmパッケージマネージャを使用してライブラリとその依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="006077040eb38468b8a356d61c048734a3075b00" translate="yes" xml:space="preserve">
          <source>For example, when binding a URL in an &lt;code&gt;&amp;lt;&lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; [href]=&quot;someValue&quot;&amp;gt;&lt;/code&gt; hyperlink, &lt;code&gt;someValue&lt;/code&gt; will be sanitized so that an attacker cannot inject e.g. a &lt;code&gt;javascript:&lt;/code&gt; URL that would execute code on the website.</source>
          <target state="translated">でURLバインドするときたとえば、 &lt;code&gt;&amp;lt;&lt;a href=&quot;../router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; [href]=&quot;someValue&quot;&amp;gt;&lt;/code&gt; ハイパーリンクを、 &lt;code&gt;someValue&lt;/code&gt; のは、攻撃者が注入例えばAことができないようにサニタイズされる &lt;code&gt;javascript:&lt;/code&gt; ウェブサイト上でコードを実行するURL。</target>
        </trans-unit>
        <trans-unit id="b388ee63c404c11c431ffc8a9f8669aaee012a90" translate="yes" xml:space="preserve">
          <source>For example, when bootstrapping an application, you can register many initializers using the same token.</source>
          <target state="translated">例えば、アプリケーションをブートストラップする際に、同じトークンを使って多くのイニシャライザを登録することができます。</target>
        </trans-unit>
        <trans-unit id="c63512e47f4e0eb59f4eb999a84ea7e0803892b1" translate="yes" xml:space="preserve">
          <source>For example, you can create a new &lt;code&gt;HeroListComponent&lt;/code&gt; with a mock service that you can manipulate under test.</source>
          <target state="translated">たとえば、テスト下で操作できるモックサービスを使用して新しい &lt;code&gt;HeroListComponent&lt;/code&gt; を作成できます。</target>
        </trans-unit>
        <trans-unit id="8ddf8e31fd2cd24dbe4fa042da0cd05fcfd17053" translate="yes" xml:space="preserve">
          <source>For example, you can use the following built-in tokens as hooks into the framework&amp;rsquo;s bootstrapping and initialization process. A provider object can associate any of these injection tokens with one or more callback functions that take app-specific initialization actions.</source>
          <target state="translated">たとえば、次の組み込みトークンをフレームワークのブートストラップおよび初期化プロセスへのフックとして使用できます。プロバイダーオブジェクトは、これらの注入トークンのいずれかを、アプリ固有の初期化アクションを実行する1つ以上のコールバック関数に関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="227e297b37600eeafa53dd30d8eb145e25eb475b" translate="yes" xml:space="preserve">
          <source>For example, you cannot write something like this:</source>
          <target state="translated">例えば、こんなことは書けません。</target>
        </trans-unit>
        <trans-unit id="6530568924d585f2b40d86e5a6d6c3b09418ac8d" translate="yes" xml:space="preserve">
          <source>For example, you could have an expression that invoked a property or method that had side effects. The expression could call something like &lt;code&gt;getFoo()&lt;/code&gt; where only you know what &lt;code&gt;getFoo()&lt;/code&gt; does. If &lt;code&gt;getFoo()&lt;/code&gt; changes something and you happen to be binding to that something, Angular may or may not display the changed value. Angular may detect the change and throw a warning error. As a best practice, stick to properties and to methods that return values and avoid side effects.</source>
          <target state="translated">たとえば、副作用のあるプロパティまたはメソッドを呼び出す式があるとします。式は何か呼び出すことができます &lt;code&gt;getFoo()&lt;/code&gt; だけが知っている &lt;code&gt;getFoo()&lt;/code&gt; ありませんが。場合 &lt;code&gt;getFoo()&lt;/code&gt; 何かを変更し、あなたはその何かに結合することが起こる、角度を変えたり値が表示されない場合があります。Angularは変更を検出して警告エラーをスローするかもしれません。ベストプラクティスとして、プロパティと、値を返し、副作用を回避するメソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="a1343721229e7e188c70b76a4f95e58cac86554e" translate="yes" xml:space="preserve">
          <source>For example, you may have defined a class and used it as an injection token in a providers array but neglected to export that class.</source>
          <target state="translated">たとえば、クラスを定義して、それをプロバイダの配列でインジェクショントークンとして使用していたのに、そのクラスをエクスポートするのを怠っていたとします。</target>
        </trans-unit>
        <trans-unit id="a95056eee3d11f52730201526a72543e3338d239" translate="yes" xml:space="preserve">
          <source>For example, you may have set a providers &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; property to a locally defined function that you neglected to export.</source>
          <target state="translated">たとえば、プロバイダーの &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; プロパティを、エクスポートを無視したローカルで定義された関数に設定している場合があります。</target>
        </trans-unit>
        <trans-unit id="c3c0aadf2ed6d001641bc13306f6ac7b0b287585" translate="yes" xml:space="preserve">
          <source>For example, you might decide to cache certain requests and responses to improve performance. You can delegate caching to an interceptor without disturbing your existing data services.</source>
          <target state="translated">例えば、パフォーマンスを向上させるために特定のリクエストとレスポンスをキャッシュすることにしたとします。既存のデータサービスに影響を与えることなく、インターセプターにキャッシングを委任することができます。</target>
        </trans-unit>
        <trans-unit id="e751c1896b9ea59e8e0965c8d8ab0167c1bd2f31" translate="yes" xml:space="preserve">
          <source>For example, you might have an Angular service called &lt;code&gt;Heroes&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;Heroes&lt;/code&gt; というAngularサービスがあるとします。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="24fca8b61903d711384e8ca51c4fd0aeb8d16945" translate="yes" xml:space="preserve">
          <source>For filtering flying heroes, consider an &lt;em&gt;impure pipe&lt;/em&gt;.</source>
          <target state="translated">飛んでいるヒーローをフィルタリングするには、&lt;em&gt;不純なパイプを&lt;/em&gt;検討してください。</target>
        </trans-unit>
        <trans-unit id="a56d6b42d3843beb14525eb1fdcd50e555380dbb" translate="yes" xml:space="preserve">
          <source>For full details of these and other tools, see the &lt;a href=&quot;https://material.angular.io/cdk/a11y/overview&quot;&gt;Angular CDK accessibility overview&lt;/a&gt;.</source>
          <target state="translated">これらのツールやその他のツールの詳細については、&lt;a href=&quot;https://material.angular.io/cdk/a11y/overview&quot;&gt;Angular CDKのユーザー補助の概要を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="7c3da04950adb31c0e9528561719f0563708a66f" translate="yes" xml:space="preserve">
          <source>For further details, see &lt;a href=&quot;../guide/workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/workspace-config&quot;&gt;ワークスペースの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b36de5c112631348d0b348bcbb31a5891c39f0e" translate="yes" xml:space="preserve">
          <source>For help with individual commands, use the &lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt; option with the command.</source>
          <target state="translated">個々のコマンドのヘルプを表示するには、コマンドで &lt;code&gt;--help&lt;/code&gt; または &lt;code&gt;-h&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="86f2ce0f795377b7a0b29bb81dd3283d86dbb647" translate="yes" xml:space="preserve">
          <source>For hypothetical examples such as illustrations of configuration options in a JSON file, you should still use The &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tag with the &lt;code&gt;header&lt;/code&gt; attribute to identify the context.</source>
          <target state="translated">JSONファイルの構成オプションの図などの架空の例については、 &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; タグを &lt;code&gt;header&lt;/code&gt; 属性と共に使用して、コンテキストを識別してください。</target>
        </trans-unit>
        <trans-unit id="701f4b7981f107d65ba50aa05880028cb7034894" translate="yes" xml:space="preserve">
          <source>For information about CSRF at the Open Web Application Security Project (OWASP), see &lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29&quot;&gt;Cross-Site Request Forgery (CSRF)&lt;/a&gt; and &lt;a href=&quot;https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet&quot;&gt;Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet&lt;/a&gt;. The Stanford University paper &lt;a href=&quot;https://seclab.stanford.edu/websec/csrf/csrf.pdf&quot;&gt;Robust Defenses for Cross-Site Request Forgery&lt;/a&gt; is a rich source of detail.</source>
          <target state="translated">Open Web Application Security Project（OWASP）での&lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29&quot;&gt;CSRF&lt;/a&gt;については、クロスサイトリクエストフォージェリ（CSRF）および&lt;a href=&quot;https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet&quot;&gt;クロスサイトリクエストフォージェリ（CSRF）防止に関するチートシートを参照してください&lt;/a&gt;。スタンフォード大学の論文「&lt;a href=&quot;https://seclab.stanford.edu/websec/csrf/csrf.pdf&quot;&gt;Cross-Site Request ForgeryのRobust Defenses」&lt;/a&gt;は、豊富な詳細情報源です。</target>
        </trans-unit>
        <trans-unit id="a2cf14543e26d1b0e1e0f2335126cea8a8caa66e" translate="yes" xml:space="preserve">
          <source>For information about how the Angular CLI handles packages see the following guides:</source>
          <target state="translated">Angular CLIがどのようにパッケージを扱うかについては、以下のガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="0f291831cc0ce65674be94754322d757e2b548ab" translate="yes" xml:space="preserve">
          <source>For information about our versioning policy and practices&amp;mdash;including support and deprecation practices, as well as the release schedule&amp;mdash;see &lt;a href=&quot;releases&quot;&gt;Angular versioning and releases&lt;/a&gt;.</source>
          <target state="translated">サポートと非推奨のプラクティス、リリーススケジュールなど、バージョニングのポリシーとプラクティスについては、&lt;a href=&quot;releases&quot;&gt;Angularのバージョニングとリリースを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="eae0e5c59a3541a14b503b2a4d5cecd660bf5771" translate="yes" xml:space="preserve">
          <source>For instance &lt;code&gt;['/team', teamId, 'user', userName, {details: true}]&lt;/code&gt; means that we want to generate a link to &lt;code&gt;/team/11/user/bob;details=true&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;['/team', teamId, 'user', userName, {details: true}]&lt;/code&gt; は、 &lt;code&gt;/team/11/user/bob;details=true&lt;/code&gt; へのリンクを生成することを意味します。</target>
        </trans-unit>
        <trans-unit id="cc3c5ecad11774911020f831e44bc9e139c75862" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;&lt;a href=&quot;forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt; is used when the &lt;code&gt;token&lt;/code&gt; which we need to refer to for the purposes of DI is declared, but not yet defined. It is also used when the &lt;code&gt;token&lt;/code&gt; which we use when creating a query is not yet defined.</source>
          <target state="translated">たとえば、DIの目的で参照する必要がある &lt;code&gt;token&lt;/code&gt; が宣言されているが、まだ定義されていない場合、 &lt;code&gt;&lt;a href=&quot;forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt; が使用されます。また、クエリの作成時に使用する &lt;code&gt;token&lt;/code&gt; がまだ定義されていない場合にも使用されます。</target>
        </trans-unit>
        <trans-unit id="7e37c9ce1affc33e83f25b7d7154d81e800947bf" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;&lt;a href=&quot;hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; produces URLs like &lt;code&gt;&lt;a href=&quot;http://example.com#/foo&quot;&gt;http://example.com#/foo&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; produces &lt;code&gt;&lt;a href=&quot;http://example.com/foo&quot;&gt;http://example.com/foo&lt;/a&gt;&lt;/code&gt; as an equivalent URL.</source>
          <target state="translated">例えば、 &lt;code&gt;&lt;a href=&quot;hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; はのようなURL生成し &lt;code&gt;&lt;a href=&quot;http://example.com#/foo&quot;&gt;http://example.com#/foo&lt;/a&gt;&lt;/code&gt; 、そして &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; は生産 &lt;code&gt;&lt;a href=&quot;http://example.com/foo&quot;&gt;http://example.com/foo&lt;/a&gt;&lt;/code&gt; を同等のURLとして。</target>
        </trans-unit>
        <trans-unit id="6055b44a38f88f4c957889644057f9b1f221cb1f" translate="yes" xml:space="preserve">
          <source>For instance, if the current url is &lt;code&gt;/user/(box//aux:team)&lt;/code&gt;.</source>
          <target state="translated">たとえば、現在のURLが &lt;code&gt;/user/(box//aux:team)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f3d492765d65a0f3c73975be81507c9a1cba6c5" translate="yes" xml:space="preserve">
          <source>For instance, if you call &lt;code&gt;location.go('/foo')&lt;/code&gt;, the browser's URL will become &lt;code&gt;example.com#/foo&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;location.go('/foo')&lt;/code&gt; を呼び出すと、ブラウザのURLは &lt;code&gt;example.com#/foo&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="27aaad8b83676d93a0529ecbf18c1e23d1f6429a" translate="yes" xml:space="preserve">
          <source>For instance, if you provide an &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;'/my/app'&lt;/code&gt; and call &lt;code&gt;location.go('/foo')&lt;/code&gt;, the browser's URL will become &lt;code&gt;example.com/my/app/foo&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;'/my/app'&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; を指定して &lt;code&gt;location.go('/foo')&lt;/code&gt; を呼び出すと、ブラウザのURLは &lt;code&gt;example.com/my/app/foo&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="dae1fb6e3f2f55f859e189cf275d906d8b055a79" translate="yes" xml:space="preserve">
          <source>For instance, in the phone detail component spec, you can use ES2015 features like arrow functions and block-scoped variables and benefit from the type definitions of the AngularJS services you're consuming:</source>
          <target state="translated">例えば、電話の詳細コンポーネントの仕様では、矢印関数やブロックスコープ変数のようなES2015の機能を使用することができ、消費するAngularJSサービスの型定義の恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="ab978344d1e1b6148ef12f8d47b1a3c34578d91b" translate="yes" xml:space="preserve">
          <source>For instance, suppose you have an observable that makes an API request and maps to the response from the server. If the server returns an error or the value doesn&amp;rsquo;t exist, an error is produced. If you catch this error and supply a default value, your stream continues to process values rather than erroring out.</source>
          <target state="translated">たとえば、APIリクエストを作成し、サーバーからのレスポンスにマッピングするオブザーバブルがあるとします。サーバーがエラーを返すか、値が存在しない場合、エラーが生成されます。このエラーをキャッチしてデフォルト値を指定すると、ストリームはエラーを出力するのではなく、値を処理し続けます。</target>
        </trans-unit>
        <trans-unit id="38b9a9017b740354544e1593b7fba7b1889452c5" translate="yes" xml:space="preserve">
          <source>For instance, to install typings for &lt;code&gt;jasmine&lt;/code&gt; you run &lt;code&gt;npm install @types/jasmine --save-dev&lt;/code&gt;.</source>
          <target state="translated">例えば、のためにタイピングをインストールするには、 &lt;code&gt;jasmine&lt;/code&gt; 、あなたは実行 &lt;code&gt;npm install @types/jasmine --save-dev&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53450900d28528df93272d0c91263f304542a049" translate="yes" xml:space="preserve">
          <source>For loading the details of a single phone into the phone detail component.</source>
          <target state="translated">1台の電話機の詳細を電話機詳細コンポーネントにロードするためのものです。</target>
        </trans-unit>
        <trans-unit id="1d590a93d1ae3053ab803edbe0f51bf6d8db8992" translate="yes" xml:space="preserve">
          <source>For loading the list of all phones into the phone list component.</source>
          <target state="translated">すべての電話機のリストを電話機リストコンポーネントに読み込むためのものです。</target>
        </trans-unit>
        <trans-unit id="e95847f8698a025ef652972368513ade33eb21d8" translate="yes" xml:space="preserve">
          <source>For localization, you can use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to generate most of the boilerplate necessary to create files for translators, and to publish your app in multiple languages. After you have set up your app to use i18n, the CLI can help you with the following steps:</source>
          <target state="translated">ローカリゼーションでは、&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;を使用して、翻訳者用のファイルを作成し、アプリを複数の言語で公開するために必要なボイラープレートのほとんどを生成できます。i18nを使用するようにアプリを設定した後、CLIは次の手順で役立ちます。</target>
        </trans-unit>
        <trans-unit id="8f7790f93e8b73fbe836729c76c4b92a223f010e" translate="yes" xml:space="preserve">
          <source>For more about how the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command works, see &lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/docs/specifications/update.md&quot;&gt;Update Command&lt;/a&gt;.</source>
          <target state="translated">方法の詳細については &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; コマンドの作品は、見る&lt;a href=&quot;https://github.com/angular/angular-cli/blob/master/docs/specifications/update.md&quot;&gt;更新コマンドを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="912b038c1b77176f84399bef3e1cfee27863c9b3" translate="yes" xml:space="preserve">
          <source>For more detail on how these work, see the previous sections on &lt;a href=&quot;template-syntax#input&quot;&gt;Input&lt;/a&gt; and &lt;a href=&quot;template-syntax#output&quot;&gt;Output&lt;/a&gt;. To see it in action, see the &lt;span name=&quot;inputs-outputs&quot;&gt;Inputs and Outputs Example&lt;/span&gt;.</source>
          <target state="translated">これらの機能の詳細については、前のセクションの「&lt;a href=&quot;template-syntax#input&quot;&gt;入力」&lt;/a&gt;および「&lt;a href=&quot;template-syntax#output&quot;&gt;出力&lt;/a&gt;」を参照してください。実際の動作を確認するには、「&lt;span name=&quot;inputs-outputs&quot;&gt;入力と出力の例」&lt;/span&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="817ec49fe835be920c9756e3ebba4f2ed83c6036" translate="yes" xml:space="preserve">
          <source>For more detail, including how to build your own custom directives, see &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; and &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">独自のカスタムディレクティブを作成する方法など、詳細については、「&lt;a href=&quot;attribute-directives&quot;&gt;属性ディレクティブ&lt;/a&gt;と&lt;a href=&quot;structural-directives&quot;&gt;構造&lt;/a&gt;ディレクティブ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e189779c6fd202a0e50304bc10f229865ed3c8b7" translate="yes" xml:space="preserve">
          <source>For more detailed information on services, see the &lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;Services&lt;/a&gt; chapter of the &lt;a href=&quot;tutorial&quot;&gt;Tour of Heroes tutorial&lt;/a&gt;.</source>
          <target state="translated">サービスの詳細については、&lt;a href=&quot;tutorial&quot;&gt;Tour of Heroesチュートリアルの&lt;/a&gt;&lt;a href=&quot;../tutorial/toh-pt4&quot;&gt;サービスの&lt;/a&gt;章を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ff70ff85a85dfbc47459e089f85be3b2926fddc" translate="yes" xml:space="preserve">
          <source>For more detailed information, see the &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt; section.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;dependency-injection&quot;&gt;依存性注入」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd4ecc8635e0be85c7897afd61378d70b90b6b28" translate="yes" xml:space="preserve">
          <source>For more details about how to create scripts to generate an app in multiple languages and how to set up Apache 2 and NGINX to serve them from different subdirectories, read &lt;a href=&quot;https://dev.to/angular/deploying-an-i18n-angular-app-with-angular-cli-2fb9&quot;&gt;this tutorial by Philippe Martin&lt;/a&gt;.</source>
          <target state="translated">複数の言語でアプリを生成するスクリプトを作成する方法と、Apache 2とNGINXを設定してさまざまなサブディレクトリからそれらを提供する方法の詳細については&lt;a href=&quot;https://dev.to/angular/deploying-an-i18n-angular-app-with-angular-cli-2fb9&quot;&gt;、Philippe Martinによるこのチュートリアル&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="41392c8a8ac6697970a5dcaa180c8d729b9b32eb" translate="yes" xml:space="preserve">
          <source>For more details of what these look like and how to create them, see:</source>
          <target state="translated">これらがどのように見えるのか、どのように作成するのかの詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="0ef0eba5fb7aae6b3476d97afd599d01fa9968a9" translate="yes" xml:space="preserve">
          <source>For more details on how a library project is structured you can refer the &lt;a href=&quot;file-structure#library-project-files&quot;&gt;Library Project Files&lt;/a&gt;</source>
          <target state="translated">ライブラリプロジェクトの構造の詳細については、&lt;a href=&quot;file-structure#library-project-files&quot;&gt;ライブラリプロジェクトファイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ada7f6da9294e4c6d791dd9a0e5489db9a0be9b5" translate="yes" xml:space="preserve">
          <source>For more details on how to use &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; see &lt;a href=&quot;../../../guide/upgrade-performance&quot;&gt;Upgrading for Performance&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; の使用方法の詳細については、「&lt;a href=&quot;../../../guide/upgrade-performance&quot;&gt;Upgrading for Performance&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="78f4d0c22be01be28b6d0944e470a26d5823dfc5" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;../../guide/dependency-injection&quot;&gt;&quot;Dependency Injection Guide&quot;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../guide/dependency-injection&quot;&gt;「依存性注入ガイド」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="70d1fffe15b1f2e36ca7f113920e6fe75c98a33b" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt;MDN HTMLTableCellElement&lt;/a&gt; documentation.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt;MDN HTMLTableCellElementの&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="cefa1996491841c464ce6d8b900601e8930a2e82" translate="yes" xml:space="preserve">
          <source>For more in-depth information on the implementation, see the &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/language-service/src/types.ts&quot;&gt;Angular Language Service API&lt;/a&gt;.</source>
          <target state="translated">実装の詳細については、&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/language-service/src/types.ts&quot;&gt;Angular Language Service APIを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="571c1a07f9b9eb717ea03c74bcc70570fb6aa857" translate="yes" xml:space="preserve">
          <source>For more information about Angular browser support, see &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">Angularブラウザーサポートの詳細については、「&lt;a href=&quot;browser-support&quot;&gt;ブラウザーサポート&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b83bc230f5f7ebae3640de4b47c95fd664eb9cd9" translate="yes" xml:space="preserve">
          <source>For more information about Unicode locale identifiers, see the &lt;a href=&quot;http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers&quot;&gt;CLDR core spec&lt;/a&gt;.</source>
          <target state="translated">Unicodeロケール識別子の詳細については、&lt;a href=&quot;http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers&quot;&gt;CLDRコア仕様を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="78841bd0bb58922e17fdaa94b801397143a15d5e" translate="yes" xml:space="preserve">
          <source>For more information about browser support, see the &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/#browser_support&quot;&gt;browser support&lt;/a&gt; section of &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers: an Introduction&lt;/a&gt;, Jake Archibald's &lt;a href=&quot;https://jakearchibald.github.io/isserviceworkerready/&quot;&gt;Is Serviceworker ready?&lt;/a&gt;, and &lt;a href=&quot;http://caniuse.com/#feat=serviceworkers&quot;&gt;Can I Use&lt;/a&gt;.</source>
          <target state="translated">ブラウザーサポートの詳細については、&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers：はじめに&lt;/a&gt;、Jake Archibald's &lt;a href=&quot;https://jakearchibald.github.io/isserviceworkerready/&quot;&gt;Is Serviceworker ready？&lt;/a&gt;の&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/#browser_support&quot;&gt;ブラウザーサポート&lt;/a&gt;セクションを参照してください。、および&lt;a href=&quot;http://caniuse.com/#feat=serviceworkers&quot;&gt;使用できます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="24f2585c0836152206284cf4cff3db56510414ea" translate="yes" xml:space="preserve">
          <source>For more information about components and how they interact with templates, see &lt;a href=&quot;guide/architecture-components&quot;&gt;Introduction to Components&lt;/a&gt;.</source>
          <target state="translated">コンポーネントおよびコンポーネントとテンプレートとの相互作用の詳細については&lt;a href=&quot;guide/architecture-components&quot;&gt;、コンポーネントの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="236e2ef1974979ffd7d8a223a6a77807f766066b" translate="yes" xml:space="preserve">
          <source>For more information about how Google handles security issues, see &lt;a href=&quot;https://www.google.com/about/appsecurity/&quot;&gt;Google's security philosophy&lt;/a&gt;.</source>
          <target state="translated">Googleがセキュリティ問題を処理する方法の詳細については、&lt;a href=&quot;https://www.google.com/about/appsecurity/&quot;&gt;Googleのセキュリティ理念を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="9964a9dc9a78ceda93aaa2a631966ffc6fd1170f" translate="yes" xml:space="preserve">
          <source>For more information about polyfills, see &lt;a href=&quot;https://www.webcomponents.org/polyfills&quot;&gt;polyfill documentation&lt;/a&gt;.</source>
          <target state="translated">ポリフィルの詳細については、&lt;a href=&quot;https://www.webcomponents.org/polyfills&quot;&gt;ポリフィルのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d350f1532969099e56068a5d118f77bf4cc913d5" translate="yes" xml:space="preserve">
          <source>For more information about rules and utility methods, see &lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/schematics#provided-rules&quot;&gt;Provided Rules&lt;/a&gt;.</source>
          <target state="translated">ルールとユーティリティメソッドの詳細については、「&lt;a href=&quot;https://github.com/angular/angular-cli/tree/master/packages/angular_devkit/schematics#provided-rules&quot;&gt;提供されるルール」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="03cbb1e65c44554cf14a341ae94bf0b620b95b32" translate="yes" xml:space="preserve">
          <source>For more information about service workers in general, see &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers: an Introduction&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot;&gt;Service Workers&lt;/a&gt;全般の詳細については、Service Workers：はじめにを参照してください。</target>
        </trans-unit>
        <trans-unit id="90f304817a574dd3b93fbb1931e98aa85432d6ea" translate="yes" xml:space="preserve">
          <source>For more information about template input variables, see &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">テンプレート入力変数の詳細については、&lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;構造指令を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bf7f0f7f896a271fc989b9cb322f11d5d7c62a96" translate="yes" xml:space="preserve">
          <source>For more information about the Angular files generated by &lt;code&gt;ng new&lt;/code&gt;, see &lt;a href=&quot;file-structure&quot;&gt;Workspace and Project File Structure&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; によって生成されるAngularファイルの詳細については、「&lt;a href=&quot;file-structure&quot;&gt;ワークスペースとプロジェクトファイルの構造」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="52e6ac022078001a32995d871b8d2865025cbf63" translate="yes" xml:space="preserve">
          <source>For more information about the attacks and mitigations described below, see &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Guide_Project&quot;&gt;OWASP Guide Project&lt;/a&gt;.</source>
          <target state="translated">以下で説明する攻撃と緩和策の詳細については、&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Guide_Project&quot;&gt;OWASPガイドプロジェクトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6be97dad894b1a23556e4ce27d58b024db4a0eb4" translate="yes" xml:space="preserve">
          <source>For more information about the full capabilities of Angular's template syntax, see &lt;a href=&quot;guide/template-syntax&quot;&gt;Template Syntax&lt;/a&gt;.</source>
          <target state="translated">角度のテンプレート構文の完全な機能の詳細については、&lt;a href=&quot;guide/template-syntax&quot;&gt;テンプレートの構文を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74fc37bf8585f335d9717920574f7eae721aca6f" translate="yes" xml:space="preserve">
          <source>For more information about using &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;http&quot;&gt;HttpClient guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; 使用の詳細については、&lt;a href=&quot;http&quot;&gt;HttpClientガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="386ad298bea4b0e435d841329d791530a7524e88" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;../api/common/ngif&quot;&gt;API documentation about NgIf&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/common/ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt; 、参照&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIfに関するAPIドキュメントを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="05beb7f7c6d3b64d67d1a432a8304f888a8cf09e" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;ngOnInit()&lt;/code&gt;, see &lt;a href=&quot;../guide/lifecycle-hooks&quot;&gt;Lifecycle hooks&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;ngOnInit()&lt;/code&gt; 、参照&lt;a href=&quot;../guide/lifecycle-hooks&quot;&gt;ライフサイクルフックを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f185be688fdab6f10dcf39ed8cac95b298927682" translate="yes" xml:space="preserve">
          <source>For more information on Angular dependency injection, see the &lt;a href=&quot;dependency-injection-providers&quot;&gt;DI Providers&lt;/a&gt; and &lt;a href=&quot;dependency-injection-in-action&quot;&gt;DI in Action&lt;/a&gt; guides.</source>
          <target state="translated">Angular依存関係注入の詳細については、&lt;a href=&quot;dependency-injection-providers&quot;&gt;DIプロバイダー&lt;/a&gt;および&lt;a href=&quot;dependency-injection-in-action&quot;&gt;DI in Action&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="730302ee5a734f817027f2bf006e032d293b1565" translate="yes" xml:space="preserve">
          <source>For more information on JavaScript modules, see &lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;JavaScript/ECMAScript modules&lt;/a&gt;.</source>
          <target state="translated">JavaScriptモジュールの詳細については、&lt;a href=&quot;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&quot;&gt;JavaScript / ECMAScriptモジュールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ff27f98155df9560762be8e0a01925036e0e246e" translate="yes" xml:space="preserve">
          <source>For more information on NgModules, see:</source>
          <target state="translated">NgModulesの詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="57fdf07c80db57f529b49d5e717affd9c35a3d1d" translate="yes" xml:space="preserve">
          <source>For more information on injector hierarchy and scoping, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt; and the &lt;a href=&quot;dependency-injection&quot;&gt;DI Guide&lt;/a&gt;.</source>
          <target state="translated">インジェクターの階層とスコープの詳細については、「&lt;a href=&quot;providers&quot;&gt;プロバイダー」&lt;/a&gt;および「&lt;a href=&quot;dependency-injection&quot;&gt;DIガイド」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81c534993810f308b62b4817239b03fdf30981b3" translate="yes" xml:space="preserve">
          <source>For more information on modules, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">モジュールの詳細については、&lt;a href=&quot;ngmodules&quot;&gt;NgModulesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="39452ffd652d163dc4e0fa8775c0130ecde8f80a" translate="yes" xml:space="preserve">
          <source>For more information on modules, see the &lt;a href=&quot;architecture#modules&quot;&gt;Modules&lt;/a&gt; section of the &lt;a href=&quot;architecture&quot;&gt;Architecture Overview&lt;/a&gt;.</source>
          <target state="translated">モジュールの詳細については、「&lt;a href=&quot;architecture&quot;&gt;アーキテクチャの概要」の&lt;/a&gt;「&lt;a href=&quot;architecture#modules&quot;&gt;モジュール」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="07e059ddbe4be008aaf0428ed61a37ef6ebcdbc0" translate="yes" xml:space="preserve">
          <source>For more information on property binding, see the &lt;a href=&quot;template-syntax#property-binding&quot;&gt;Property binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">プロパティバインディングの詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#property-binding&quot;&gt;プロパティバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="5a8dd2a9dd16c5cd2521045ec3553f71dc3ecef4" translate="yes" xml:space="preserve">
          <source>For more information on routing, see the &lt;a href=&quot;router#router-link&quot;&gt;RouterLink binding&lt;/a&gt; section of the &lt;a href=&quot;router&quot;&gt;Routing &amp;amp; Navigation&lt;/a&gt; page.</source>
          <target state="translated">ルーティングの詳細については、「&lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;」ページの「&lt;a href=&quot;router#router-link&quot;&gt;RouterLinkバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="794dd6e4bcfee67b081b6f8fe8556f70c59633f8" translate="yes" xml:space="preserve">
          <source>For more information on style binding, see the &lt;a href=&quot;template-syntax#style-binding&quot;&gt;Style binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">スタイルバインディングの詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#style-binding&quot;&gt;スタイルバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c30b04fe7f32dfdadff87cbb4e8025359204a143" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; directive, see &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;NgStyle&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; のディレクティブを参照してください&lt;a href=&quot;template-syntax#ngStyle&quot;&gt;NgStyleの&lt;/a&gt;のセクション&lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt;のページを。</target>
        </trans-unit>
        <trans-unit id="8952f7b930f6e954e3b60a48a8cbcaedd9b31542" translate="yes" xml:space="preserve">
          <source>For more information on the acceptable range for each of these numbers and other details see your native internationalization library.</source>
          <target state="translated">これらの数値の許容範囲やその他の詳細については、ネイティブの国際化ライブラリを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd88bdbd389d58114d341cf8d34f28359dc62a54" translate="yes" xml:space="preserve">
          <source>For more information on two-way binding with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModel&amp;mdash;Two-way binding to form elements with &lt;code&gt;[(ngModel)]&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用した双方向バインディングの詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの&lt;a href=&quot;template-syntax#ngModel&quot;&gt; &lt;code&gt;[(ngModel)]&lt;/code&gt; &lt;/a&gt;セクションを使用してフォーム要素にNgModel&amp;mdash;双方向バインディングを参照してください。</target>
        </trans-unit>
        <trans-unit id="99d287becb11b19affa20313753722427b8a4c4b" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;workspace-config&quot;&gt;ワークスペースの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="10968353b5aa385ae26af5f3b92c0f4f65a140ed" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;router#activated-route&quot;&gt;Router guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;router#activated-route&quot;&gt;ルーターガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f8a289a1d967f8d205c8f5814a3cc02a8c2ffaf8" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;template-syntax#other-bindings&quot;&gt;Attribute, class, and style bindings&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#other-bindings&quot;&gt;属性、クラス、およびスタイルバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="769195363ef40e5cc39446645a5fac8af82ad174" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;template-syntax#property-binding&quot;&gt;Property binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;」ページの「&lt;a href=&quot;template-syntax#property-binding&quot;&gt;プロパティバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1ad6b4e720e85666693541a6437ca7c180df2ef6" translate="yes" xml:space="preserve">
          <source>For more information, refer to &lt;a href=&quot;styleguide#file-tree&quot;&gt;this folder and file structure example.&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;styleguide#file-tree&quot;&gt;このフォルダーとファイル構造の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d2a41c7e3c796f9e2c894a9039e362a5b0903ca" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../guide/browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../guide/browser-support&quot;&gt;ブラウザのサポートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
