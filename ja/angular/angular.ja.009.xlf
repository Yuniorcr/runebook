<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="">
    <body>
      <group id="">
        <trans-unit id="3ab5deb39f9c7a1a879f01f3a89332be8ff505de" translate="yes">
          <source>Many guides tell a story. In that story, the app evolves incrementally, often with simplistic or incomplete code along the way.</source>
          <target state="translated">多くのガイドが物語を語ります。 そのストーリーでは、アプリは段階的に進化し、多くの場合、途中で単純化または不完全なコードが使用されます。</target>
        </trans-unit>
        <trans-unit id="087124921eb33f7e338ea00e25240b971be1f766" translate="yes">
          <source>Many interceptors are only concerned with the outgoing request and simply return the event stream from &lt;code&gt;next.handle()&lt;/code&gt; without modifying it.</source>
          <target state="translated">多くのインターセプターは、発信要求のみに関心があり、変更せずに &lt;code&gt;next.handle()&lt;/code&gt; からイベントストリームを返します。</target>
        </trans-unit>
        <trans-unit id="0d466227c3ceaced415c72a362876ff6eef8934e" translate="yes">
          <source>Many libraries include definition files in their npm packages where both the TypeScript compiler and editors can find them. Angular is one such library. The &lt;code&gt;node_modules/@angular/core/&lt;/code&gt; folder of any Angular application contains several &lt;code&gt;d.ts&lt;/code&gt; files that describe parts of Angular.</source>
          <target state="translated">多くのライブラリには、TypeScriptコンパイラとエディタの両方がそれらを見つけることができる定義ファイルがnpmパッケージに含まれています。 Angularはそのようなライブラリの1つです。 Angularアプリケーションの &lt;code&gt;node_modules/@angular/core/&lt;/code&gt; フォルダーには、Angularの一部を記述するいくつかの &lt;code&gt;d.ts&lt;/code&gt; ファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="9a5e32c0e28524dc6612566940bcead3465d22d7" translate="yes">
          <source>Many libraries&amp;mdash;jQuery, Jasmine, and Lodash among them&amp;mdash;do &lt;em&gt;not&lt;/em&gt; include &lt;code&gt;d.ts&lt;/code&gt; files in their npm packages. Fortunately, either their authors or community contributors have created separate &lt;code&gt;d.ts&lt;/code&gt; files for these libraries and published them in well-known locations.</source>
          <target state="translated">多くのライブラリ（jQuery、Jasmine、およびLodashが含ま &lt;code&gt;d.ts&lt;/code&gt; ます）では、npmパッケージにd.tsファイルが含まれてい&lt;em&gt;ません&lt;/em&gt; 。 幸いなことに、著者またはコミュニティの貢献者は、これらのライブラリ用に別々の &lt;code&gt;d.ts&lt;/code&gt; ファイルを作成し、よく知られている場所で公開しました。</target>
        </trans-unit>
        <trans-unit id="ff9a14500d4b27838588c153e0ce6118bde4d3dc" translate="yes">
          <source>Many servers require extra headers for save operations. For example, they may require a &quot;Content-Type&quot; header to explicitly declare the MIME type of the request body; or the server may require an authorization token.</source>
          <target state="translated">多くのサーバーでは、保存操作のために追加のヘッダーが必要です。 たとえば、リクエスト本文のMIMEタイプを明示的に宣言するために「Content-Type」ヘッダーが必要な場合があります。 または、サーバーが認証トークンを必要とする場合があります。</target>
        </trans-unit>
        <trans-unit id="def2eba59562958fa4a005f8070d692ef8502312" translate="yes">
          <source>Mapping</source>
          <target state="translated">Mapping</target>
        </trans-unit>
        <trans-unit id="5bf26159333bb0d591492f96ca2581ad9f4c90e3" translate="yes">
          <source>Mapping values to different types</source>
          <target state="translated">異なるタイプへの値のマッピング</target>
        </trans-unit>
        <trans-unit id="b0227d5b874883ace3269140fb46b470e3787118" translate="yes">
          <source>Maps a value to a string that pluralizes the value according to locale rules.</source>
          <target state="translated">ロケールの規則に従って値を複数形にする文字列に値をマップします。</target>
        </trans-unit>
        <trans-unit id="b7ef7ab0b381d0f8a5fb0d490f85aca22d85119c" translate="yes">
          <source>Maps class properties to host element bindings for properties, attributes, and events, using a set of key-value pairs.</source>
          <target state="translated">一連のキーと値のペアを使用して、プロパティ、属性、およびイベントのホスト要素バインディングにクラスプロパティをマップします。</target>
        </trans-unit>
        <trans-unit id="57cafd2d2e26c1f59483ef5f063c9e987cbdfa9c" translate="yes">
          <source>Maps gesture event names to a set of configuration options that specify overrides to the default values for specific properties.</source>
          <target state="translated">ジェスチャイベント名を、特定のプロパティの既定値への上書きを指定する一連の構成オプションにマップします。</target>
        </trans-unit>
        <trans-unit id="1c7e24fff6616d8c4782b59d907d55d2247857e6" translate="yes">
          <source>Marble error testing</source>
          <target state="translated">大理石エラーテスト</target>
        </trans-unit>
        <trans-unit id="d80fdfe3e44fb2d131f4020c8562cfb36d7d1d87" translate="yes">
          <source>Mark static text messages in your component templates for translation.</source>
          <target state="translated">コンポーネントテンプレートの静的テキストメッセージに翻訳用のマークを付けます。</target>
        </trans-unit>
        <trans-unit id="633286acdeeb25d4557c214aacb8517fd371099a" translate="yes">
          <source>Mark text with the i18n attribute</source>
          <target state="translated">i18n属性でテキストをマークする</target>
        </trans-unit>
        <trans-unit id="a5f9500a0b279f38bcdf05b09a7ba44c7259acbd" translate="yes">
          <source>Markdown and HTML</source>
          <target state="translated">マークダウンとHTML</target>
        </trans-unit>
        <trans-unit id="a926e63e15068ff8778fa46fbc6837498e696ece" translate="yes">
          <source>Markdown is easier to read and to edit than HTML. Many editors (including Visual Studio Code) can render markdown as you type it.</source>
          <target state="translated">MarkdownはHTMLよりも読みやすく、編集が簡単です。 多くのエディター（Visual Studio Codeを含む）は、入力時にマークダウンをレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="9f0d79ae62e9049fa1e61d4f8b8e8288b7d10547" translate="yes">
          <source>Marker interface for a value that's safe to use as HTML.</source>
          <target state="translated">HTMLとして安全に使用できる値のマーカーインターフェイス。</target>
        </trans-unit>
        <trans-unit id="44077f17738066476a04b77cb7234d0debe282d2" translate="yes">
          <source>Marker interface for a value that's safe to use as JavaScript.</source>
          <target state="translated">JavaScriptとして安全に使用できる値のマーカーインターフェイス。</target>
        </trans-unit>
        <trans-unit id="be2b798ee79aee95e8ba7f58d4db583d7d3cc18f" translate="yes">
          <source>Marker interface for a value that's safe to use as a URL linking to a document.</source>
          <target state="translated">ドキュメントにリンクするURLとして安全に使用できる値のマーカーインターフェイス。</target>
        </trans-unit>
        <trans-unit id="32be8ca4a80edc7adb498046a934af4df142acf7" translate="yes">
          <source>Marker interface for a value that's safe to use as a URL to load executable code from.</source>
          <target state="translated">実行可能コードをロードするURLとして安全に使用できる値のマーカーインターフェイス。</target>
        </trans-unit>
        <trans-unit id="190d929880596b3b2b1cb9976fcf09cbb71177c2" translate="yes">
          <source>Marker interface for a value that's safe to use as style (CSS).</source>
          <target state="translated">スタイルとして安全に使用できる値（CSS）のマーカーインターフェイス。</target>
        </trans-unit>
        <trans-unit id="00fae9ebcd6da81c3826a15ac752fd939ce5eb00" translate="yes">
          <source>Marker interface for a value that's safe to use in a particular context.</source>
          <target state="translated">特定のコンテキストで安全に使用できる値のマーカーインターフェイス。</target>
        </trans-unit>
        <trans-unit id="7047a10aa10b4d12f4e613cf4dfce9686986f075" translate="yes">
          <source>Marking a class with &lt;code&gt;@&lt;a href=&quot;injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; ensures that the compiler will generate the necessary metadata to create the class's dependencies when the class is injected.</source>
          <target state="translated">クラスを &lt;code&gt;@&lt;a href=&quot;injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; マークすると、コンパイラーは、クラスが挿入されたときにクラスの依存関係を作成するために必要なメタデータを生成します。</target>
        </trans-unit>
        <trans-unit id="a51bf3c267b34206e81fa68deca3d45075eeee05" translate="yes">
          <source>Marks &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; as dynamic, so Angular can be notified when options change.</source>
          <target state="translated">&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; を動的としてマークするため、オプションが変更されたときにAngularに通知できます。</target>
        </trans-unit>
        <trans-unit id="3dc949f2a0597e37dc5b503716ae5f0e2f4b5974" translate="yes">
          <source>Marks a percent format. The % symbol may change position, but must be retained.</source>
          <target state="translated">パーセント形式をマークします。 ％記号は位置を変更できますが、保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ffc0d3065eb521574c575da104ec2bcd56a74fb" translate="yes">
          <source>Marks a scientific format. The E symbol may change position, but must be retained.</source>
          <target state="translated">科学フォーマットをマークします。 Eシンボルは位置を変更できますが、保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="1d02022cd7fdf010c85cd457ac4036958d4745ee" translate="yes">
          <source>Marks a style as important.</source>
          <target state="translated">スタイルを重要としてマークします。</target>
        </trans-unit>
        <trans-unit id="b2b2ab983e8070eed76188fa87beffd689c5582e" translate="yes">
          <source>Marks a style as using dash case naming (this-is-dash-case).</source>
          <target state="translated">ダッシュケースの名前付け（this-is-dash-case）を使用してスタイルをマークします。</target>
        </trans-unit>
        <trans-unit id="90c3dbaa648c20c8ae2b5d0ba25e4a55271d3fe3" translate="yes">
          <source>Marks the control and all its descendant controls as &lt;code&gt;touched&lt;/code&gt;.</source>
          <target state="translated">コントロールとそのすべての子孫コントロールを &lt;code&gt;touched&lt;/code&gt; としてマークします。</target>
        </trans-unit>
        <trans-unit id="8f1de67b463040e84913b0550b5655cbe8552c2c" translate="yes">
          <source>Marks the control as &lt;code&gt;dirty&lt;/code&gt;. A control becomes dirty when the control's value is changed through the UI; compare &lt;code&gt;markAsTouched&lt;/code&gt;.</source>
          <target state="translated">コントロールを &lt;code&gt;dirty&lt;/code&gt; としてマークします。 コントロールの値がUIを介して変更されると、コントロールはダーティになります。 &lt;code&gt;markAsTouched&lt;/code&gt; を比較します 。</target>
        </trans-unit>
        <trans-unit id="d03d77a3f8d7fddaddf5702243ae9f9ddd1ef1a5" translate="yes">
          <source>Marks the control as &lt;code&gt;pending&lt;/code&gt;.</source>
          <target state="translated">コントロールを &lt;code&gt;pending&lt;/code&gt; としてマークします。</target>
        </trans-unit>
        <trans-unit id="b79edb0843b4f3787d92ef573b73fc0dd74f0a69" translate="yes">
          <source>Marks the control as &lt;code&gt;pristine&lt;/code&gt;.</source>
          <target state="translated">コントロールを &lt;code&gt;pristine&lt;/code&gt; としてマークします。</target>
        </trans-unit>
        <trans-unit id="552c55c7009312a2c5dbdf86a2db78335f5bd874" translate="yes">
          <source>Marks the control as &lt;code&gt;touched&lt;/code&gt;. A control is touched by focus and blur events that do not change the value.</source>
          <target state="translated">コントロールを &lt;code&gt;touched&lt;/code&gt; としてマークします。 コントロールは、値を変更しないフォーカスおよびぼかしイベントによって影響を受けます。</target>
        </trans-unit>
        <trans-unit id="5524b15df7708a4abd2f3007a9d0154920e67189" translate="yes">
          <source>Marks the control as &lt;code&gt;untouched&lt;/code&gt;.</source>
          <target state="translated">コントロールを &lt;code&gt;untouched&lt;/code&gt; 処理としてマークします。</target>
        </trans-unit>
        <trans-unit id="6fcdec153eea4e2ac1e84b45e481c3d80f5b6baf" translate="yes">
          <source>Marks the location to load the component of the active route.</source>
          <target state="translated">アクティブなルートのコンポーネントをロードする場所をマークします。</target>
        </trans-unit>
        <trans-unit id="a41c002f76c3ddbf33397cf9ff9ed88bed7302f6" translate="yes">
          <source>Master/Detail</source>
          <target state="translated">Master/Detail</target>
        </trans-unit>
        <trans-unit id="304698ef1300bc95aac9c2ab2903870bbadeafe7" translate="yes">
          <source>Master/Detail Components</source>
          <target state="translated">マスター/詳細コンポーネント</target>
        </trans-unit>
        <trans-unit id="33b81af9fbc2d9c1087f3875a223180927975556" translate="yes">
          <source>Match all nodes.</source>
          <target state="translated">すべてのノードに一致します。</target>
        </trans-unit>
        <trans-unit id="862bd048c883526c17675c397beda22c96b40900" translate="yes">
          <source>Match elements by the given CSS selector.</source>
          <target state="translated">指定されたCSSセレクターで要素を一致させます。</target>
        </trans-unit>
        <trans-unit id="de7cd1fb52ce1262b94846eb2616193d9955bd7d" translate="yes">
          <source>Match nodes that have the given directive present.</source>
          <target state="translated">指定されたディレクティブが存在するノードに一致します。</target>
        </trans-unit>
        <trans-unit id="13373cb22c6ad40bbf34a683cdf6768383178147" translate="yes">
          <source>Matching Strategy</source>
          <target state="translated">マッチング戦略</target>
        </trans-unit>
        <trans-unit id="2165a9c034ed5b6a48ce499a7a677bec7360624c" translate="yes">
          <source>Matching navigation request URLs</source>
          <target state="translated">一致するナビゲーションリクエストURL</target>
        </trans-unit>
        <trans-unit id="dbb284068a8e79111daf2b152754d63af5c2bdfc" translate="yes">
          <source>Material Design - Accessibility</source>
          <target state="translated">マテリアルデザイン-アクセシビリティ</target>
        </trans-unit>
        <trans-unit id="df12f07bc0e225d9c61b2b656a300cdd45f507df" translate="yes">
          <source>MaxLengthValidator</source>
          <target state="translated">MaxLengthValidator</target>
        </trans-unit>
        <trans-unit id="473e3e4d9bb69399b43203fb2abd81e292e9e263" translate="yes">
          <source>May 2020</source>
          <target state="translated">2020年5月</target>
        </trans-unit>
        <trans-unit id="45162abb05f5b85bc23b63651e7596aec882297e" translate="yes">
          <source>May 28, 2019</source>
          <target state="translated">2019年5月28日</target>
        </trans-unit>
        <trans-unit id="075977785e25f435a3132423b18227a4f5235ed3" translate="yes">
          <source>May 3, 2018</source>
          <target state="translated">2018年5月3日</target>
        </trans-unit>
        <trans-unit id="36961ecd57a84b27841f0a2a11c493049b963beb" translate="yes">
          <source>May be removed in</source>
          <target state="translated">で削除される場合があります</target>
        </trans-unit>
        <trans-unit id="56ffd7dc3d16ef45b28d718b5c2cfa58db3cb7c9" translate="yes">
          <source>Maybe the user must login (&lt;em&gt;authenticate&lt;/em&gt;) first.</source>
          <target state="translated">たぶん、ユーザーは最初にログイン（ &lt;em&gt;認証&lt;/em&gt; ）する必要があります。</target>
        </trans-unit>
        <trans-unit id="4d735c27534318526d192c543b4e9405990246b9" translate="yes">
          <source>Maybe you should fetch some data before you display the target component.</source>
          <target state="translated">ターゲットコンポーネントを表示する前に、いくつかのデータをフェッチする必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="ecba223c35670a6e86840d57758c584dece4e5bd" translate="yes">
          <source>Meanwhile, the &lt;code&gt;ng test&lt;/code&gt; command is watching for changes.</source>
          <target state="translated">一方、 &lt;code&gt;ng test&lt;/code&gt; コマンドは変更を監視しています。</target>
        </trans-unit>
        <trans-unit id="a97e11deff98f07fcbcf99a459c11a3c3e7b23bd" translate="yes">
          <source>Measure performance</source>
          <target state="translated">パフォーマンスを測定する</target>
        </trans-unit>
        <trans-unit id="6853c98a6f4358bbfed1b3b9c81d308649299b0f" translate="yes">
          <source>Member</source>
          <target state="translated">Member</target>
        </trans-unit>
        <trans-unit id="562b14416156af926fbe5520e33d1259d2d35346" translate="yes">
          <source>Member sequence</source>
          <target state="translated">メンバーシーケンス</target>
        </trans-unit>
        <trans-unit id="1cb449c1126609b4b41e1d87f65f0d7cd19b49b9" translate="yes">
          <source>Members</source>
          <target state="translated">Members</target>
        </trans-unit>
        <trans-unit id="9b3d1dc4ad715fe4de1ae0b9194d4370157ddaf0" translate="yes">
          <source>Mental Model</source>
          <target state="translated">メンタルモデル</target>
        </trans-unit>
        <trans-unit id="10da0871d51e1e7527c73418f0b5e05f8c658d03" translate="yes">
          <source>Merge the completed translation file into the app</source>
          <target state="translated">完成した翻訳ファイルをアプリにマージします</target>
        </trans-unit>
        <trans-unit id="2a609a2760470dc00f6136d3cd668b933ca52d9c" translate="yes">
          <source>Merge the completed translation file into the app. To do this, use the Angular CLI &lt;code&gt;build&lt;/code&gt; command to compile the app, choosing a &lt;a href=&quot;i18n#merge-aot&quot;&gt;locale-specific configuration&lt;/a&gt;, or specifying the following command options.</source>
          <target state="translated">完成した翻訳ファイルをアプリにマージします。 これを行うには、Angular CLI &lt;code&gt;build&lt;/code&gt; コマンドを使用してアプリをコンパイルし、 &lt;a href=&quot;i18n#merge-aot&quot;&gt;ロケール固有の構成を&lt;/a&gt;選択するか、次のコマンドオプションを指定します。</target>
        </trans-unit>
        <trans-unit id="07aad0adaeb1b9587492cfc8d874f6329f6f3303" translate="yes">
          <source>Merge with the AOT compiler</source>
          <target state="translated">AOTコンパイラとマージする</target>
        </trans-unit>
        <trans-unit id="c7298c2c9e49a103b04a2845d24a7349008b9ace" translate="yes">
          <source>Merge with the JIT compiler</source>
          <target state="translated">JITコンパイラーとマージする</target>
        </trans-unit>
        <trans-unit id="14b78ed779ba1eb639111b5d329607a36c3d898a" translate="yes">
          <source>Merges the URL fragment with the rest of the URL.</source>
          <target state="translated">URLフラグメントを残りのURLとマージします。</target>
        </trans-unit>
        <trans-unit id="78fe5ba55408c7f7dd7e147b86f12ef53c069049" translate="yes">
          <source>Message Bus is a low level API used to communicate between the UI and the background. Communication is based on a channel abstraction. Messages published in a given channel to one MessageBusSink are received on the same channel by the corresponding MessageBusSource.</source>
          <target state="translated">メッセージバスは、UIとバックグラウンドの間の通信に使用される低レベルAPIです。 通信は、チャネルの抽象化に基づいています。 特定のチャネルで1つのMessageBusSinkに発行されたメッセージは、対応するMessageBusSourceによって同じチャネルで受信されます。</target>
        </trans-unit>
        <trans-unit id="2dab758b8876c8b70aca537b47bed380873c05c0" translate="yes">
          <source>MessageBus</source>
          <target state="translated">MessageBus</target>
        </trans-unit>
        <trans-unit id="377ba52cb68adfe51dfa40983b46202e3d247f62" translate="yes">
          <source>MessageBusSink</source>
          <target state="translated">MessageBusSink</target>
        </trans-unit>
        <trans-unit id="7b95de765223d1ee58a9bfdab4c83e74e091ea77" translate="yes">
          <source>MessageBusSource</source>
          <target state="translated">MessageBusSource</target>
        </trans-unit>
        <trans-unit id="8d546a6dea9ff90d517b51c25b35319931ae4e04" translate="yes">
          <source>Meta</source>
          <target state="translated">Meta</target>
        </trans-unit>
        <trans-unit id="f2c1a4c9748a88a08eaf983137499ccf3d4c7989" translate="yes">
          <source>MetaDefinition</source>
          <target state="translated">MetaDefinition</target>
        </trans-unit>
        <trans-unit id="6ccc5b519461c9c2782b08d2d5a7e8da0ba54fee" translate="yes">
          <source>Metadata referenced a class that wasn't exported.</source>
          <target state="translated">メタデータは、エクスポートされなかったクラスを参照しました。</target>
        </trans-unit>
        <trans-unit id="8cad26c08ab5ecd7a9c21bb39395f684cfb8ecb3" translate="yes">
          <source>Metadata restrictions</source>
          <target state="translated">メタデータの制限</target>
        </trans-unit>
        <trans-unit id="ab3b4516f2c1a87d9dfae0c84ef113acfc85f0cf" translate="yes">
          <source>Metadata rewriting</source>
          <target state="translated">メタデータの書き換え</target>
        </trans-unit>
        <trans-unit id="2547750cd9950647e35dcc7fa8dcb5fb52010b6b" translate="yes">
          <source>MetadataOverride</source>
          <target state="translated">MetadataOverride</target>
        </trans-unit>
        <trans-unit id="480e00bb1250ab6146f449570c842c7c7cab2c7a" translate="yes">
          <source>Method called when the &quot;reset&quot; event is triggered on the form.</source>
          <target state="translated">フォームで「リセット」イベントがトリガーされたときに呼び出されるメソッド。</target>
        </trans-unit>
        <trans-unit id="132133a9bf0ca23e222be0882410cbfec7ff46ae" translate="yes">
          <source>Method called when the &quot;submit&quot; event is triggered on the form. Triggers the &lt;code&gt;ngSubmit&lt;/code&gt; emitter to emit the &quot;submit&quot; event as its payload.</source>
          <target state="translated">フォームで「送信」イベントがトリガーされたときに呼び出されるメソッド。 &lt;code&gt;ngSubmit&lt;/code&gt; エミッターをトリガーして、ペイロードとして「submit」イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="77eedcf2b5cf5aca17dce41ae4f2edaf94a576d1" translate="yes">
          <source>Method called with the &quot;submit&quot; event is triggered on the form. Triggers the &lt;code&gt;ngSubmit&lt;/code&gt; emitter to emit the &quot;submit&quot; event as its payload.</source>
          <target state="translated">「submit」イベントで呼び出されたメソッドは、フォームでトリガーされます。 &lt;code&gt;ngSubmit&lt;/code&gt; エミッターをトリガーして、ペイロードとして「submit」イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="92616c3b3e965ff16f8bd06a8dfb39101a4fc463" translate="yes">
          <source>Method that performs async validation against the provided control.</source>
          <target state="translated">提供されたコントロールに対して非同期検証を実行するメソッド。</target>
        </trans-unit>
        <trans-unit id="c19dc7e253af2ee1407e8d9064b68d932b344563" translate="yes">
          <source>Method that performs synchronous validation against the provided control.</source>
          <target state="translated">提供されたコントロールに対して同期検証を実行するメソッド。</target>
        </trans-unit>
        <trans-unit id="90b5e6212c0847c1da847315da7a0359b0afb290" translate="yes">
          <source>Method that sets up the control directive in this group, re-calculates its value and validity, and adds the instance to the internal list of directives.</source>
          <target state="translated">このグループに制御ディレクティブを設定し、その値と有効性を再計算して、インスタンスをディレクティブの内部リストに追加するメソッド。</target>
        </trans-unit>
        <trans-unit id="098addd3604051290701c4c812f2f17a5ed71cb0" translate="yes">
          <source>Method that validates whether an email address is valid. Returns the validation result if enabled, otherwise null.</source>
          <target state="translated">電子メールアドレスが有効かどうかを検証するメソッド。 有効な場合は検証結果を返し、そうでない場合はnullを返します。</target>
        </trans-unit>
        <trans-unit id="c85869ac84887bcd71ff90a6fb9ca514cb7dcdaa" translate="yes">
          <source>Method that validates whether or not the checkbox has been checked. Returns the validation result if enabled, otherwise null.</source>
          <target state="translated">チェックボックスがチェックされているかどうかを検証するメソッド。 有効な場合は検証結果を返し、そうでない場合はnullを返します。</target>
        </trans-unit>
        <trans-unit id="48f36a75a0315ffb51df39974f381e0a30e8148a" translate="yes">
          <source>Method that validates whether the control is empty. Returns the validation result if enabled, otherwise null.</source>
          <target state="translated">コントロールが空かどうかを検証するメソッド。 有効な場合は検証結果を返し、そうでない場合はnullを返します。</target>
        </trans-unit>
        <trans-unit id="e96a9ab385eda11dceec9653619ee92018e6cfe4" translate="yes">
          <source>Method that validates whether the value exceeds the maximum length requirement.</source>
          <target state="translated">値が最大長の要件を超えているかどうかを検証するメソッド。</target>
        </trans-unit>
        <trans-unit id="864cb6a938903c3d56892f757005022941bcbaeb" translate="yes">
          <source>Method that validates whether the value matches the the pattern requirement.</source>
          <target state="translated">値がパターン要件に一致するかどうかを検証するメソッド。</target>
        </trans-unit>
        <trans-unit id="ea2d5bd9900eebf7f3fa6babe94a92b45aa3c20f" translate="yes">
          <source>Method that validates whether the value meets a minimum length requirement. Returns the validation result if enabled, otherwise null.</source>
          <target state="translated">値が最小長の要件を満たしているかどうかを検証するメソッド。 有効な場合は検証結果を返し、そうでない場合はnullを返します。</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="524524cbb5b4b2229234a47887f5e9c638264059" translate="yes">
          <source>Microsyntax</source>
          <target state="translated">Microsyntax</target>
        </trans-unit>
        <trans-unit id="84f2b1f0407883abc0db1634152996a1cb6aa51a" translate="yes">
          <source>Microsyntax examples</source>
          <target state="translated">マイクロシンタックスの例</target>
        </trans-unit>
        <trans-unit id="2f237d0f44a4dbb3f810838d2ac6ea080d483864" translate="yes">
          <source>Microsyntax must meet the following requirements:</source>
          <target state="translated">Microsyntaxは、次の要件を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="ce722bab1d29b667c5659a8d93babb0ee7cd6bf0" translate="yes">
          <source>Migrating URLs with Redirects</source>
          <target state="translated">リダイレクトを使用したURLの移行</target>
        </trans-unit>
        <trans-unit id="8b1f7baec0a8d71c3b7eb7e093d50dc32a658e5e" translate="yes">
          <source>Migrating from deprecated ngForm selector</source>
          <target state="translated">非推奨のngFormセレクターからの移行</target>
        </trans-unit>
        <trans-unit id="2cf1ac4c5fad3f46f8cde9c888e9614c3f4b4d74" translate="yes">
          <source>Migrating to TypeScript</source>
          <target state="translated">TypeScriptへの移行</target>
        </trans-unit>
        <trans-unit id="84d1190e29283bf0f4ad613b2113c7efd5959343" translate="yes">
          <source>Milestone 1: Getting started</source>
          <target state="translated">マイルストーン1：はじめに</target>
        </trans-unit>
        <trans-unit id="1fe4150b974da173f97716c525126ab3b909f127" translate="yes">
          <source>Milestone 2: &lt;code&gt;Routing module&lt;/code&gt;</source>
          <target state="translated">マイルストーン2： &lt;code&gt;Routing module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c337c88510afb27e2a36ed64161e29051dcc17e" translate="yes">
          <source>Milestone 3 wrap up</source>
          <target state="translated">マイルストーン3のまとめ</target>
        </trans-unit>
        <trans-unit id="9e7f5537b3a1147a578fd90233e37be8a9162e9e" translate="yes">
          <source>Milestone 3: Heroes feature</source>
          <target state="translated">マイルストーン3：ヒーロー機能</target>
        </trans-unit>
        <trans-unit id="a8ed87e79aacfd84ef3a400ffedede75156338d8" translate="yes">
          <source>Milestone 4: Crisis center feature</source>
          <target state="translated">マイルストーン4：危機センター機能</target>
        </trans-unit>
        <trans-unit id="a5c25699c061c8160f7fc2ce1003ec7d13aa30f9" translate="yes">
          <source>Milestone 5: Route guards</source>
          <target state="translated">マイルストーン5：ルートガード</target>
        </trans-unit>
        <trans-unit id="0f50f36dae7e1d4742bb457f84c0fef8eba58343" translate="yes">
          <source>Milestone 6: Asynchronous routing</source>
          <target state="translated">マイルストーン6：非同期ルーティング</target>
        </trans-unit>
        <trans-unit id="f751d8d1afda5d9262251ac57eecbfcb1f899a51" translate="yes">
          <source>MinLengthValidator</source>
          <target state="translated">MinLengthValidator</target>
        </trans-unit>
        <trans-unit id="fb46992893d351666c27b0a415b676a77c7ee574" translate="yes">
          <source>Minification: removes excess whitespace, comments, and optional tokens.</source>
          <target state="translated">縮小：余分な空白、コメント、およびオプションのトークンを削除します。</target>
        </trans-unit>
        <trans-unit id="c1335d3e7a03c5a9cce93a720fba00fd5265fb99" translate="yes">
          <source>Minute</source>
          <target state="translated">Minute</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="16fa591982d3b4278712ac09b90a4922db040308" translate="yes">
          <source>Misko Hevery, Angular team lead, &lt;a href=&quot;http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/&quot;&gt;explains why&lt;/a&gt; you should avoid complex constructor logic.</source>
          <target state="translated">AngularチームリーダーのMisko Heveryが、複雑なコンストラクターロジックを避けるべき&lt;a href=&quot;http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/&quot;&gt;理由&lt;/a&gt;を説明します。</target>
        </trans-unit>
        <trans-unit id="703b52e4c78301393192ea76eb4bc94c5b907bc0" translate="yes">
          <source>MissingTranslationStrategy</source>
          <target state="translated">MissingTranslationStrategy</target>
        </trans-unit>
        <trans-unit id="de77f58be307fbadb3d77dd95b849dc214ccfab0" translate="yes">
          <source>Mock implementation of URL state.</source>
          <target state="translated">URL状態のモック実装。</target>
        </trans-unit>
        <trans-unit id="07d5c4c262b2b0b021359260309ee66c01a76480" translate="yes">
          <source>Mock platform location config</source>
          <target state="translated">モックプラットフォームの場所の構成</target>
        </trans-unit>
        <trans-unit id="eb83e91107904331a02f5abe4036d95facce7db3" translate="yes">
          <source>MockAnimationDriver</source>
          <target state="translated">MockAnimationDriver</target>
        </trans-unit>
        <trans-unit id="335ab995be87b2b6bd940e1d03e2b34a7e3eeaa4" translate="yes">
          <source>MockAnimationPlayer</source>
          <target state="translated">MockAnimationPlayer</target>
        </trans-unit>
        <trans-unit id="f7a2983b9bb4694e0f876db78913b39727db220a" translate="yes">
          <source>MockLocationStrategy</source>
          <target state="translated">MockLocationStrategy</target>
        </trans-unit>
        <trans-unit id="0b9824686806e7bfae181b4737b528bde308f05f" translate="yes">
          <source>MockPlatformLocation</source>
          <target state="translated">MockPlatformLocation</target>
        </trans-unit>
        <trans-unit id="4cbc2d522fcb43d224fa5c6b76ce39ee982868b4" translate="yes">
          <source>MockPlatformLocationConfig</source>
          <target state="translated">MockPlatformLocationConfig</target>
        </trans-unit>
        <trans-unit id="ebd0f455b81fff65b45f1c47d58ddc0faf0798f3" translate="yes">
          <source>Mocking the &lt;code&gt;HeroService&lt;/code&gt; with a spy is a &lt;a href=&quot;testing#component-with-async-service&quot;&gt;familiar story&lt;/a&gt;. But the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; has a complicated API and is entwined with other services and application preconditions. Might it be difficult to mock?</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; をスパイでock笑するのは&lt;a href=&quot;testing#component-with-async-service&quot;&gt;おなじみの話&lt;/a&gt;です。 ただし、 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; には複雑なAPIがあり、他のサービスやアプリケーションの前提条件と絡み合っています。 モックするのは難しいでしょうか？</target>
        </trans-unit>
        <trans-unit id="23bbdbe479db228f7aba0b175aac34547f4314d3" translate="yes">
          <source>Modern HTML5 browsers support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt;, a technique that changes a browser's location and history without triggering a server page request. The router can compose a &quot;natural&quot; URL that is indistinguishable from one that would otherwise require a page load.</source>
          <target state="translated">最新のHTML5ブラウザーは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushStateを&lt;/a&gt;サポートしています。これは、サーバーページのリクエストをトリガーすることなくブラウザーの場所と履歴を変更する手法です。 ルーターは、ページの読み込みを必要とするURLと区別できない「自然な」URLを作成できます。</target>
        </trans-unit>
        <trans-unit id="58be99d59597df4a8a4a0fb43095939149b83985" translate="yes">
          <source>Modern HTML5 browsers were the first to support &lt;code&gt;pushState&lt;/code&gt; which is why many people refer to these URLs as &quot;HTML5 style&quot; URLs.</source>
          <target state="translated">最近のHTML5ブラウザーは、 &lt;code&gt;pushState&lt;/code&gt; をサポートする最初のブラウザーでした。そのため、多くの人がこれらのURLを「HTML5スタイル」URLと呼んでいます。</target>
        </trans-unit>
        <trans-unit id="80a9b9104684e0b295509cc06f13b718760c5caf" translate="yes">
          <source>Modifies how Angular-specific annotations are emitted to improve tree-shaking. Non-Angular annotations are not affected. One of &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt; fields&lt;/code&gt; (the default) or &lt;code&gt;decorators&lt;/code&gt;.</source>
          <target state="translated">ツリーシェーキングを改善するために、Angular固有の注釈の発行方法を変更します。 Angular以外の注釈は影響を受けません。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;static&lt;/a&gt; fields&lt;/code&gt; （デフォルト）または &lt;code&gt;decorators&lt;/code&gt; のいずれか。</target>
        </trans-unit>
        <trans-unit id="cc7ff7ee06a62fc36531c86475e22a93d4a1e0a6" translate="yes">
          <source>Modify the &lt;code&gt;AppComponent&lt;/code&gt; template to display the generated &lt;code&gt;MessagesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; テンプレートを変更して、生成された &lt;code&gt;MessagesComponent&lt;/code&gt; を表示します 。</target>
        </trans-unit>
        <trans-unit id="0ef4a7efa3f16c8f795941775e6a66532831c3a3" translate="yes">
          <source>Modify the &lt;code&gt;getHeroes()&lt;/code&gt; method to send a message when the heroes are fetched.</source>
          <target state="translated">ヒーローがフェッチされたときにメッセージを送信するように &lt;code&gt;getHeroes()&lt;/code&gt; メソッドを変更します。</target>
        </trans-unit>
        <trans-unit id="10c13dcc0265e5906cfc4a542b66b25f6d62212e" translate="yes">
          <source>Modify the &lt;code&gt;hero.name&lt;/code&gt; binding like this.</source>
          <target state="translated">&lt;code&gt;hero.name&lt;/code&gt; バインディングを次のように変更します。</target>
        </trans-unit>
        <trans-unit id="5eeba3514c27591094b26ccc5837d1b62e194be9" translate="yes">
          <source>Modify the birthday template to give the date pipe a format parameter. After formatting the hero's April 15th birthday, it renders as &lt;strong&gt;&lt;samp&gt;04/15/88&lt;/samp&gt;&lt;/strong&gt;:</source>
          <target state="translated">誕生日テンプレートを変更して、日付パイプに形式パラメーターを指定します。 ヒーローの4月15日の誕生日をフォーマットした後、 &lt;strong&gt;&lt;samp&gt;88&lt;/samp&gt;&lt;/strong&gt;年4月15日としてレンダリングされ&lt;strong&gt;&lt;samp&gt;ます&lt;/samp&gt;&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3a6a2ab557de6edc89b72b34323f3607bac9938" translate="yes">
          <source>Modify the constructor with a parameter that declares a &lt;strong&gt;public&lt;/strong&gt;&lt;code&gt;messageService&lt;/code&gt; property. Angular will inject the singleton &lt;code&gt;MessageService&lt;/code&gt; into that property when it creates the &lt;code&gt;MessagesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;パブリック&lt;/strong&gt; &lt;code&gt;messageService&lt;/code&gt; プロパティを宣言するパラメーターでコンストラクターを変更します。 Angularは、 &lt;code&gt;MessagesComponent&lt;/code&gt; を作成するときにシングルトン &lt;code&gt;MessageService&lt;/code&gt; をそのプロパティに挿入します。</target>
        </trans-unit>
        <trans-unit id="8db4b324dab2ee65b6c8b4f66ee5197f73664826" translate="yes">
          <source>Modify the constructor with a parameter that declares a private &lt;code&gt;messageService&lt;/code&gt; property. Angular will inject the singleton &lt;code&gt;MessageService&lt;/code&gt; into that property when it creates the &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">プライベート &lt;code&gt;messageService&lt;/code&gt; プロパティを宣言するパラメーターでコンストラクターを変更します。 Angularは、 &lt;code&gt;HeroService&lt;/code&gt; の作成時にシングルトン &lt;code&gt;MessageService&lt;/code&gt; をそのプロパティに挿入します。</target>
        </trans-unit>
        <trans-unit id="46335c03984eaea4bfc49a97cc9e4e862ba5c9c5" translate="yes">
          <source>Modify the product list template to display a list of product names.</source>
          <target state="translated">製品リストテンプレートを変更して、製品名のリストを表示します。</target>
        </trans-unit>
        <trans-unit id="9ccdcb96da8448b66bbb23944ef85480f6a81c18" translate="yes">
          <source>Modify the product name anchor to include a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">製品名のアンカーを変更して &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="29d676092fd3b82fea0f5f61d949f483413f1596" translate="yes">
          <source>Modify the provider search with &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; してプロバイダー検索を変更します</target>
        </trans-unit>
        <trans-unit id="19ec6ac1f2fe1db0f7776f97f8f25f623c03a54f" translate="yes">
          <source>Modify the shipping component so it uses the cart service to retrieve shipping data via HTTP from the &lt;code&gt;shipping.json&lt;/code&gt; file.</source>
          <target state="translated">配送コンポーネントを変更して、カートサービスを使用して、 &lt;code&gt;shipping.json&lt;/code&gt; ファイルからHTTP経由で配送データを取得します。</target>
        </trans-unit>
        <trans-unit id="a71e3ca8556ba87e0586d38955b00229cd03b500" translate="yes">
          <source>Modifying service visibility</source>
          <target state="translated">サービスの可視性の変更</target>
        </trans-unit>
        <trans-unit id="ea0138705c92deb3917ddd4c3cff8c92e2fb6233" translate="yes">
          <source>Module classes.</source>
          <target state="translated">モジュールクラス。</target>
        </trans-unit>
        <trans-unit id="cda57df2a3d077bfd5559abcb122e7349f720de0" translate="yes">
          <source>Module import order matters</source>
          <target state="translated">モジュールのインポート順序が重要</target>
        </trans-unit>
        <trans-unit id="5dc38d6fa3dcc4cf39b8db1c475e686f12efe193" translate="yes">
          <source>ModuleA can import ModuleB and also export it, making exports from ModuleB available to an NgModule that imports ModuleA.</source>
          <target state="translated">ModuleAはModuleBをインポートし、エクスポートすることもできます。これにより、ModuleBからのエクスポートを、ModuleAをインポートするNgModuleで利用できます。</target>
        </trans-unit>
        <trans-unit id="2945d77f42e28cfe14ba3f93a865d1c129b38216" translate="yes">
          <source>ModuleWithComponentFactories</source>
          <target state="translated">ModuleWithComponentFactories</target>
        </trans-unit>
        <trans-unit id="a2cad372306851e8187272e8705eb7fbae776699" translate="yes">
          <source>ModuleWithProviders</source>
          <target state="translated">ModuleWithProviders</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="cbb52651bba4b11cbbaf37425680365863c9322e" translate="yes">
          <source>Modules are a great way to organize an application and extend it with capabilities from external libraries.</source>
          <target state="translated">モジュールは、アプリケーションを整理し、外部ライブラリの機能を使用してアプリケーションを拡張するための優れた方法です。</target>
        </trans-unit>
        <trans-unit id="fe4301f4b2f595077bcee66f968585f08404b7f7" translate="yes">
          <source>Modules can also add services to the application. Such services might be internally developed, like something you'd develop yourself or come from outside sources, such as the Angular router and HTTP client.</source>
          <target state="translated">モジュールは、アプリケーションにサービスを追加することもできます。 そのようなサービスは、自分で開発したり、AngularルーターやHTTPクライアントなどの外部ソースから取得したりするような、内部で開発されたものです。</target>
        </trans-unit>
        <trans-unit id="58965a390855c470aaa4a09ccac9ba69ee7a054e" translate="yes">
          <source>Modules can be loaded eagerly when the application starts or lazy loaded asynchronously by the router.</source>
          <target state="translated">モジュールは、アプリケーションの起動時に積極的にロードするか、ルーターによって非同期に遅延ロードすることができます。</target>
        </trans-unit>
        <trans-unit id="f50194953d2e7e6bdd59a4d3ee2aaae0bbda2598" translate="yes">
          <source>Modules/controllers/components</source>
          <target state="translated">Modules/controllers/components</target>
        </trans-unit>
        <trans-unit id="082bc378cd60e17a38d99898b21955299c5b60c8" translate="yes">
          <source>Month</source>
          <target state="translated">Month</target>
        </trans-unit>
        <trans-unit id="a45fef53594d1fcc4e0101683c5b8c0bbfd29322" translate="yes">
          <source>Month standalone</source>
          <target state="translated">スタンドアロン月</target>
        </trans-unit>
        <trans-unit id="285cbfd86d2712f997a553edc043839f80e15a86" translate="yes">
          <source>More about Angular Modules</source>
          <target state="translated">Angularモジュールの詳細</target>
        </trans-unit>
        <trans-unit id="034d5415dd930b4522a1a546a37325fc07716881" translate="yes">
          <source>More async tests</source>
          <target state="translated">より多くの非同期テスト</target>
        </trans-unit>
        <trans-unit id="107edeaffa793d17ea2a11dd81321be774d5550e" translate="yes">
          <source>More explicit, created in component class</source>
          <target state="translated">より明示的、コンポーネントクラスで作成</target>
        </trans-unit>
        <trans-unit id="5dcfdc862ee7250234afbe800300e3bf7c0e983b" translate="yes">
          <source>More generally, &lt;a href=&quot;ngmodule-faq#q-component-or-module&quot;&gt;prefer registering providers in NgModules&lt;/a&gt; to registering in components.</source>
          <target state="translated">より一般的には、コンポーネントで登録するよりも&lt;a href=&quot;ngmodule-faq#q-component-or-module&quot;&gt;NgModuleでプロバイダーを登録することをお勧め&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="90761839140dd40f1e73ba92c7a7d7f6c3c29ecb" translate="yes">
          <source>More generally, the text between the braces is a &lt;strong&gt;template expression&lt;/strong&gt; that Angular first &lt;strong&gt;evaluates&lt;/strong&gt; and then &lt;strong&gt;converts to a string&lt;/strong&gt;. The following interpolation illustrates the point by adding two numbers:</source>
          <target state="translated">より一般的には、中括弧の間のテキストは、Angularが最初に&lt;strong&gt;評価&lt;/strong&gt; &lt;strong&gt;してから文字列に変換する&lt;/strong&gt; &lt;strong&gt;テンプレート式&lt;/strong&gt;です。 次の補間は、2つの数値を追加することでポイントを示しています。</target>
        </trans-unit>
        <trans-unit id="f925f9bea399a4c9a234cd8ef31a89c2955d37e0" translate="yes">
          <source>More information</source>
          <target state="translated">詳しくは</target>
        </trans-unit>
        <trans-unit id="18b69b015ce1bb08b1d7f945b8f4827eea44c52b" translate="yes">
          <source>More often, you don't know when the data has changed, especially in applications that mutate data in many ways, perhaps in application locations far away. A component in such an application usually can't know about those changes. Moreover, it's unwise to distort the component design to accommodate a pipe. Strive to keep the component class independent of the HTML. The component should be unaware of pipes.</source>
          <target state="translated">多くの場合、特に多くの方法でデータを変更するアプリケーション、特に遠く離れたアプリケーションの場所で、データがいつ変更されたかはわかりません。 そのようなアプリケーションのコンポーネントは、通常、それらの変更について知ることができません。 さらに、パイプを収容するためにコンポーネントの設計をゆがめることは賢明ではありません。 コンポーネントクラスをHTMLに依存しないようにします。 コンポーネントはパイプを認識しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="d928892e47e7260978557dc968c874ed2cfe145a" translate="yes">
          <source>More on Angular animations</source>
          <target state="translated">Angularアニメーションの詳細</target>
        </trans-unit>
        <trans-unit id="45236483e1db8ccbe6b2bb2a6df4fb11ea1eea26" translate="yes">
          <source>More on Angular modules</source>
          <target state="translated">Angularモジュールの詳細</target>
        </trans-unit>
        <trans-unit id="30355a8434d77ad96fabc7dee39b2cc652238bd9" translate="yes">
          <source>More on Angular service workers</source>
          <target state="translated">Angular Service Workerの詳細</target>
        </trans-unit>
        <trans-unit id="81c82a995a55ad69e8128fc7312d961606e7f5f3" translate="yes">
          <source>More on NgModules</source>
          <target state="translated">NgModuleの詳細</target>
        </trans-unit>
        <trans-unit id="449b3f717be4de68542ad59a9f59fd4c409e15e2" translate="yes">
          <source>More on NgModules and routing</source>
          <target state="translated">NgModuleとルーティングの詳細</target>
        </trans-unit>
        <trans-unit id="38770c6d961b928928d4e9cb1e204b09def009dc" translate="yes">
          <source>More on accessibility</source>
          <target state="translated">アクセシビリティの詳細</target>
        </trans-unit>
        <trans-unit id="b513ad5d9f2910284480f5def84c8bfd15e9429f" translate="yes">
          <source>More on dependency injection</source>
          <target state="translated">依存性注入の詳細</target>
        </trans-unit>
        <trans-unit id="e287def2e221998b4df76590b35a8fcb3a3d5c6f" translate="yes">
          <source>More overrides</source>
          <target state="translated">より多くのオーバーライド</target>
        </trans-unit>
        <trans-unit id="07a448ec5491d4e27e09f682b963835667c1081a" translate="yes">
          <source>More precisely, the redisplay occurs after some kind of asynchronous event related to the view, such as a keystroke, a timer completion, or a response to an HTTP request.</source>
          <target state="translated">より正確には、再表示は、キーストローク、タイマー完了、HTTP要求への応答など、ビューに関連する何らかの非同期イベントの後に発生します。</target>
        </trans-unit>
        <trans-unit id="aec5f46f01ea145b2890502695f0be4ed736f483" translate="yes">
          <source>More rarely, an interceptor may handle the request entirely, and compose a new event stream instead of invoking &lt;code&gt;next.handle()&lt;/code&gt;. This is an acceptable behavior, but keep in mind that further interceptors will be skipped entirely.</source>
          <target state="translated">まれに、インターセプターがリクエストを完全に処理し、 &lt;code&gt;next.handle()&lt;/code&gt; を呼び出す代わりに新しいイベントストリームを作成する場合があります。 これは許容可能な動作ですが、それ以上のインターセプターは完全にスキップされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9773bd6daaf69947cac6ad3df92c6b1ce39a7a26" translate="yes">
          <source>Most &lt;code&gt;.js&lt;/code&gt; files are &lt;em&gt;git&lt;/em&gt;-ignored. If you want to include an ignored code file in your project and display it in a guide you must &lt;em&gt;un-ignore&lt;/em&gt; it.</source>
          <target state="translated">ほとんどの &lt;code&gt;.js&lt;/code&gt; ファイルは&lt;em&gt;gitで&lt;/em&gt;無視されます。 無視されたコードファイルをプロジェクトに含めてガイドに表示する場合は、 &lt;em&gt;無視しない&lt;/em&gt;でください。</target>
        </trans-unit>
        <trans-unit id="0d51e03cc5530b81cb20e9ecd7e7ab908caaccc1" translate="yes">
          <source>Most Visual Studio developers like to press the F5 key and see the IIS server come up. To use the IIS server with the Getting Started app, you must make the following three changes.</source>
          <target state="translated">ほとんどのVisual Studio開発者は、F5キーを押してIISサーバーが表示されるのを見るのが好きです。 Getting StartedアプリでIISサーバーを使用するには、次の3つの変更を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="24e64566ad7a8ccb4a3e9b304e753550d0942726" translate="yes">
          <source>Most application developers won't need to add components to the &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">ほとんどのアプリケーション開発者は、コンポーネントを &lt;code&gt;entryComponents&lt;/code&gt; に追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="e11e7f319de45fe5979a6e095d54297622091f9b" translate="yes">
          <source>Most apps are translated into more than one other language. For this reason, it is standard practice for the project structure to reflect the entire internationalization effort.</source>
          <target state="translated">ほとんどのアプリは他の複数の言語に翻訳されています。 このため、プロジェクト構造が国際化の取り組み全体を反映するのは標準的な方法です。</target>
        </trans-unit>
        <trans-unit id="d19f74cc4bdf32f4c998305d04803fe40cd8d21f" translate="yes">
          <source>Most apps strive for a consistent look across the application. The CLI generated an empty &lt;code&gt;styles.css&lt;/code&gt; for this purpose. Put your application-wide styles there.</source>
          <target state="translated">ほとんどのアプリは、アプリケーション全体で一貫した外観を目指しています。 CLIは、この目的のために空の &lt;code&gt;styles.css&lt;/code&gt; を生成しました。 アプリケーション全体のスタイルをそこに配置します。</target>
        </trans-unit>
        <trans-unit id="8853a6f7c581a58d06a62a20b221bab8653cf6b7" translate="yes">
          <source>Most commands, and some options, have aliases. Aliases are shown in the syntax statement for each command.</source>
          <target state="translated">ほとんどのコマンドと一部のオプションにはエイリアスがあります。 エイリアスは、各コマンドの構文ステートメントに表示されます。</target>
        </trans-unit>
        <trans-unit id="55e283fb52cf31d8715e41cd5807d100e35c86b0" translate="yes">
          <source>Most components are not quite this simple, of course. Many of them have &lt;em&gt;inputs and outputs&lt;/em&gt; that connect them to the outside world. An Angular hero detail component with inputs and outputs might look like this:</source>
          <target state="translated">もちろん、ほとんどのコンポーネントはそれほど単純ではありません。 それらの多くには、外部と接続する&lt;em&gt;入力と出力&lt;/em&gt;が&lt;em&gt;あります&lt;/em&gt; 。 入力と出力を備えたAngular hero detailコンポーネントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="7a4cf09953c1681276d4b3e72e5a109325790f25" translate="yes">
          <source>Most developers should always implement a Routing Module for the sake of consistency. It keeps the code clean when configuration becomes complex. It makes testing the feature module easier. Its existence calls attention to the fact that a module is routed. It is where developers expect to find and expand routing configuration.</source>
          <target state="translated">ほとんどの開発者は、一貫性のために常にルーティングモジュールを実装する必要があります。 構成が複雑になったときにコードをクリーンに保ちます。 機能モジュールのテストが簡単になります。 その存在は、モジュールがルーティングされるという事実に注意を喚起します。 開発者がルーティング構成を見つけて拡張することを期待する場所です。</target>
        </trans-unit>
        <trans-unit id="c4f333a6b53d02b01658733f28ee1218f17a41f6" translate="yes">
          <source>Most front-end applications communicate with backend services over the HTTP protocol. Modern browsers support two different APIs for making HTTP requests: the &lt;code&gt;XMLHttpRequest&lt;/code&gt; interface and the &lt;code&gt;fetch()&lt;/code&gt; API.</source>
          <target state="translated">ほとんどのフロントエンドアプリケーションは、HTTPプロトコルを介してバックエンドサービスと通信します。 最新のブラウザは、HTTPリクエストを行うための2つの異なるAPI、 &lt;code&gt;XMLHttpRequest&lt;/code&gt; インターフェイスと &lt;code&gt;fetch()&lt;/code&gt; APIをサポートしています。</target>
        </trans-unit>
        <trans-unit id="719527a89875cadc610efdc78a5bced86462ab1b" translate="yes">
          <source>Most interceptors call &lt;code&gt;next.handle()&lt;/code&gt; so that the request flows through to the next interceptor and, eventually, the backend handler. An interceptor &lt;em&gt;could&lt;/em&gt; skip calling &lt;code&gt;next.handle()&lt;/code&gt;, short-circuit the chain, and &lt;a href=&quot;http#caching&quot;&gt;return its own &lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; with an artificial server response.</source>
          <target state="translated">ほとんどのインターセプターは &lt;code&gt;next.handle()&lt;/code&gt; 呼び出して、要求が次のインターセプター、そして最終的にはバックエンドハンドラーに流れるようにします。 インターセプター&lt;em&gt;は&lt;/em&gt; &lt;code&gt;next.handle()&lt;/code&gt; 呼び出しをスキップし、チェーンを短絡させ、人工的なサーバー応答で&lt;a href=&quot;http#caching&quot;&gt;自身の &lt;code&gt;Observable&lt;/code&gt; &lt;/a&gt;を返すことができます。</target>
        </trans-unit>
        <trans-unit id="ca1e26016b81b69914d27a86f57ab285fe288001" translate="yes">
          <source>Most interceptors inspect the request on the way in and forward the (perhaps altered) request to the &lt;code&gt;handle()&lt;/code&gt; method of the &lt;code&gt;next&lt;/code&gt; object which implements the &lt;a href=&quot;../api/common/http/httphandler&quot;&gt;&lt;code&gt;HttpHandler&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">ほとんどのインターセプターは、途中でリクエストを検査し、（おそらく変更された）リクエストを&lt;a href=&quot;../api/common/http/httphandler&quot;&gt; &lt;code&gt;HttpHandler&lt;/code&gt; &lt;/a&gt;インターフェースを実装する &lt;code&gt;next&lt;/code&gt; オブジェクトの &lt;code&gt;handle()&lt;/code&gt; メソッドに転送します。</target>
        </trans-unit>
        <trans-unit id="808548a8b44fb0eb4077020c87c8c6fe9736695c" translate="yes">
          <source>Most interceptors transform the outgoing request before passing it to the next interceptor in the chain, by calling &lt;code&gt;next.handle(transformedReq)&lt;/code&gt;. An interceptor may transform the response event stream as well, by applying additional RxJS operators on the stream returned by &lt;code&gt;next.handle()&lt;/code&gt;.</source>
          <target state="translated">ほとんどのインターセプターは、 &lt;code&gt;next.handle(transformedReq)&lt;/code&gt; 呼び出すことにより、チェーン内の次のインターセプターに渡す前に発信要求を変換します。 インターセプターは、 &lt;code&gt;next.handle()&lt;/code&gt; によって返されたストリームに追加のRxJS演算子を適用することにより、応答イベントストリームも変換できます。</target>
        </trans-unit>
        <trans-unit id="fd61c99374f34bfc3a631f8a23fdbca310a9c019" translate="yes">
          <source>Most of the ad banner implementation is in &lt;code&gt;ad-banner.component.ts&lt;/code&gt;. To keep things simple in this example, the HTML is in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator's &lt;code&gt;template&lt;/code&gt; property as a template string.</source>
          <target state="translated">広告バナーの実装のほとんどは &lt;code&gt;ad-banner.component.ts&lt;/code&gt; にあります。 この例では、物事を単純にするために、HTMLはテンプレート文字列として &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータの &lt;code&gt;template&lt;/code&gt; プロパティにあります。</target>
        </trans-unit>
        <trans-unit id="8dfb823a50df03ab9a32b94b5a3e90b2fe18890c" translate="yes">
          <source>Most of these initial checks are triggered by Angular's first rendering of &lt;em&gt;unrelated data elsewhere on the page&lt;/em&gt;. Mere mousing into another &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; triggers a call. Relatively few calls reveal actual changes to pertinent data. Clearly our implementation must be very lightweight or the user experience suffers.</source>
          <target state="translated">これらの初期チェックのほとんどは、Angular &lt;em&gt;がページ上の他の場所にある無関係なデータを&lt;/em&gt;最初にレンダリングすることによってトリガーされ&lt;em&gt;ます&lt;/em&gt; 。 別の &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; にマウスを合わせると、呼び出しがトリガーされます。 比較的少数の呼び出しで、関連データの実際の変更が明らかになります。 明らかに、実装は非常に軽量でなければなりません。さもないとユーザーエクスペリエンスが低下します。</target>
        </trans-unit>
        <trans-unit id="271a4fd1d564b640eb5094017d2dded69641207f" translate="yes">
          <source>Most pages display a table of contents (TOC). The TOC appears in the right panel when the viewport is wide. When narrow, the TOC appears in an expandable/collapsible region near the top of the page.</source>
          <target state="translated">ほとんどのページには目次（TOC）が表示されます。 ビューポートが広い場合、目次が右側のパネルに表示されます。 狭い場合、TOCはページの上部近くの展開可能/折りたたみ可能な領域に表示されます。</target>
        </trans-unit>
        <trans-unit id="72b1b590f111f607313721f1526c34d7c9d57c9d" translate="yes">
          <source>Most people find this browser output easier to read than the console log. You can click on a test row to re-run just that test or click on a description to re-run the tests in the selected test group (&quot;test suite&quot;).</source>
          <target state="translated">ほとんどの人は、このブラウザの出力はコンソールログよりも読みやすいと感じています。 テスト行をクリックしてそのテストのみを再実行するか、説明をクリックして選択したテストグループ（「テストスイート」）のテストを再実行できます。</target>
        </trans-unit>
        <trans-unit id="de981406b5235d22ec1a551a7d57ba6fdbb6fdb9" translate="yes">
          <source>Most routing applications should add a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element to the &lt;code&gt;index.html&lt;/code&gt; as the first child in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag to tell the router how to compose navigation URLs.</source>
          <target state="translated">ほとんどのルーティングアプリケーションでは、 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; タグの最初の子として &lt;code&gt;index.html&lt;/code&gt; に &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 要素を追加して、ナビゲーションURLの作成方法をルーターに指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="a1ce49a28c994105e2b80e086138ea97fc5a2102" translate="yes">
          <source>Most test suites in this guide call &lt;code&gt;beforeEach()&lt;/code&gt; to set the preconditions for each &lt;code&gt;it()&lt;/code&gt; test and rely on the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; to create classes and inject services.</source>
          <target state="translated">このガイドのほとんどのテストスイートは &lt;code&gt;beforeEach()&lt;/code&gt; を呼び出して各 &lt;code&gt;it()&lt;/code&gt; テストの前提条件を設定し、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; に依存してクラスを作成し、サービスを注入します。</target>
        </trans-unit>
        <trans-unit id="e9435e64807b34b81e3b5c20def5bfc7dd89cb82" translate="yes">
          <source>Most updates to the Angular service worker are transparent to the app&amp;mdash;the old caches are still valid and content is still served normally. However, occasionally a bugfix or feature in the Angular service worker requires the invalidation of old caches. In this case, the app will be refreshed transparently from the network.</source>
          <target state="translated">Angular Service Workerへのほとんどの更新はアプリに対して透過的です。古いキャッシュは引き続き有効であり、コンテンツは通常どおり提供されます。 ただし、Angular Service Workerのバグ修正または機能により、古いキャッシュの無効化が必要になる場合があります。 この場合、アプリはネットワークから透過的に更新されます。</target>
        </trans-unit>
        <trans-unit id="a80b931f6f0bc3139ea3c812478b2f81351f0b0e" translate="yes">
          <source>Most web APIs support a &lt;em&gt;get by id&lt;/em&gt; request in the form &lt;code&gt;:baseURL/:id&lt;/code&gt;.</source>
          <target state="translated">ほとんどのWeb APIは、 &lt;code&gt;:baseURL/:id&lt;/code&gt; 形式の&lt;em&gt;IDによる取得&lt;/em&gt;リクエストをサポートしてい&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="20da40e26940fbe216c818a6961898cc6adaf59c" translate="yes">
          <source>Motion greatly enhances the user experience, so animations give users a chance to detect the application's response to their actions.</source>
          <target state="translated">Motionはユーザーエクスペリエンスを大幅に向上させるため、アニメーションを使用すると、ユーザーのアクションに対するアプリケーションの応答を検出できます。</target>
        </trans-unit>
        <trans-unit id="088f61a80f05141c5fbb3d893761e6ecfb686430" translate="yes">
          <source>Move the &lt;code&gt;app/index.html&lt;/code&gt; file to the project root directory. Then change the development server root path in &lt;code&gt;package.json&lt;/code&gt; to also point to the project root instead of &lt;code&gt;app&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;app/index.html&lt;/code&gt; ファイルをプロジェクトのルートディレクトリに移動します。 次に、 &lt;code&gt;package.json&lt;/code&gt; の開発サーバーのルートパスを &lt;code&gt;app&lt;/code&gt; の代わりにプロジェクトルートも指すように変更します。</target>
        </trans-unit>
        <trans-unit id="72dfef3298f9e4d3621d27b7823ec1135e13b975" translate="yes">
          <source>Move the placeholder &lt;code&gt;hero-list&lt;/code&gt; folder that's in the &lt;code&gt;app&lt;/code&gt; into the &lt;code&gt;heroes&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; のプレースホルダー &lt;code&gt;hero-list&lt;/code&gt; フォルダーを &lt;code&gt;heroes&lt;/code&gt; フォルダーに移動します。</target>
        </trans-unit>
        <trans-unit id="e1647670a82c1749f387c5f2944002192fcd91b5" translate="yes">
          <source>Moves a view to a new location in this container.</source>
          <target state="translated">ビューをこのコンテナの新しい場所に移動します。</target>
        </trans-unit>
        <trans-unit id="44759830117daa31d1321a9d8804af42279988cb" translate="yes">
          <source>Multi-value example</source>
          <target state="translated">複数値の例</target>
        </trans-unit>
        <trans-unit id="85768b6bf1094b92415a9e43d68a4719e2932d41" translate="yes">
          <source>Multicasting</source>
          <target state="translated">Multicasting</target>
        </trans-unit>
        <trans-unit id="ccd10a4daff631270a3f7ab6ab0a36a86a3adfe1" translate="yes">
          <source>Multicasting observables take a bit more setup, but they can be useful for certain applications. Later we will look at tools that simplify the process of multicasting, allowing you to take any observable and make it multicasting.</source>
          <target state="translated">マルチキャストオブザーバブルはもう少しセットアップが必要ですが、特定のアプリケーションに役立ちます。 後で、マルチキャスティングのプロセスを単純化するツールを見ていきます。これにより、観測可能なものをすべて取得して、マルチキャスティングにすることができます。</target>
        </trans-unit>
        <trans-unit id="23ff52e403edc6ed596c8767589449944d382d73" translate="yes">
          <source>Multiple Outlets</source>
          <target state="translated">複数のアウトレット</target>
        </trans-unit>
        <trans-unit id="71e10f5d94b0738202ebc0ae107e33ad89e21fa6" translate="yes">
          <source>Multiple animation triggers</source>
          <target state="translated">複数のアニメーショントリガー</target>
        </trans-unit>
        <trans-unit id="403737f5a0e994d747fc5829da9da44f4098d631" translate="yes">
          <source>Multiple project file structure</source>
          <target state="translated">複数プロジェクトのファイル構造</target>
        </trans-unit>
        <trans-unit id="4c38246227539ea95edb3bb120c7f680c9dae722" translate="yes">
          <source>Multiple projects</source>
          <target state="translated">複数のプロジェクト</target>
        </trans-unit>
        <trans-unit id="1f8642040031aeb5f8e1c1b6956da9c26f01da5c" translate="yes">
          <source>Multiple providers can be associated with a single token in other areas as well. For example, you can register a custom form validator using the built-in &lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt; token, and provide multiple instances of a given validator provider by using the &lt;code&gt;multi: true&lt;/code&gt; property in the provider object. Angular adds your custom validators to the existing collection.</source>
          <target state="translated">他の領域でも、複数のプロバイダーを単一のトークンに関連付けることができます。 たとえば、組み込みの&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;トークンを使用してカスタムフォームバリデーターを登録し、プロバイダーオブジェクトの &lt;code&gt;multi: true&lt;/code&gt; プロパティを使用して、特定のバリデータープロバイダーの複数のインスタンスを提供できます。 Angularは、既存のコレクションにカスタムバリデーターを追加します。</target>
        </trans-unit>
        <trans-unit id="baa333de91b3ba325c66257efd5cac4be7a52608" translate="yes">
          <source>Multiple service instances (sandboxing)</source>
          <target state="translated">複数のサービスインスタンス（サンドボックス化）</target>
        </trans-unit>
        <trans-unit id="d4a98ed21d0eb6791f1cbe537aad455031c8c19f" translate="yes">
          <source>Multiple static segments can be merged into one (e.g., &lt;code&gt;['/team/11/user', userName, {details: true}]&lt;/code&gt;).</source>
          <target state="translated">複数の静的セグメントを1つにマージできます（例： &lt;code&gt;['/team/11/user', userName, {details: true}]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3d3de9de8b139d37d7c691156addb32d1f622228" translate="yes">
          <source>Must be executed from within a workspace directory. When a project name is not supplied, it will execute for all projects.</source>
          <target state="translated">ワークスペースディレクトリ内から実行する必要があります。 プロジェクト名が指定されていない場合、すべてのプロジェクトに対して実行されます。</target>
        </trans-unit>
        <trans-unit id="88c3578f358497ee57de0669c6df27b6d72fc10c" translate="yes">
          <source>Must be used in the context of a factory function such as one defined for an &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;. Throws an error if not called from such a context.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; に対して定義されているようなファクトリー関数のコンテキストで使用する必要があります。 そのようなコンテキストから呼び出されない場合、エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="0b79f8e4890c8608e67c29a1e344d765772f2753" translate="yes">
          <source>Mutability</source>
          <target state="translated">Mutability</target>
        </trans-unit>
        <trans-unit id="07ca44c83d180ec16ed67d72f6f53a30504adb70" translate="yes">
          <source>Mutable</source>
          <target state="translated">Mutable</target>
        </trans-unit>
        <trans-unit id="e579a1d025aaf38d74ab8d2625e6b8a4f3a2f7a5" translate="yes">
          <source>NG_ASYNC_VALIDATORS</source>
          <target state="translated">NG_ASYNC_VALIDATORS</target>
        </trans-unit>
        <trans-unit id="effab8d59fa7c123d4b29984483832e4f491e319" translate="yes">
          <source>NG_VALIDATORS</source>
          <target state="translated">NG_VALIDATORS</target>
        </trans-unit>
        <trans-unit id="c7807450dc4b5e96ac6d57d5f6877820a3ba310a" translate="yes">
          <source>NG_VALUE_ACCESSOR</source>
          <target state="translated">NG_VALUE_ACCESSOR</target>
        </trans-unit>
        <trans-unit id="8c6abbe86b9a3dd54d847c73d2fcb02c7646f939" translate="yes">
          <source>NOTE:</source>
          <target state="translated">NOTE:</target>
        </trans-unit>
        <trans-unit id="52577a8f79e784bd49f26a4184f5c685b9352790" translate="yes">
          <source>NOTE: In the future this class will implement an &lt;code&gt;Observable&lt;/code&gt; interface.</source>
          <target state="translated">注：将来、このクラスは &lt;code&gt;Observable&lt;/code&gt; インターフェイスを実装します。</target>
        </trans-unit>
        <trans-unit id="a0698704ab187d839adc3f2a3ee28d874c2bb329" translate="yes">
          <source>NOTE: These are not necessarily the actual operations which were applied to the original &lt;code&gt;Iterable&lt;/code&gt;, rather these are a set of computed operations which may not be the same as the ones applied.</source>
          <target state="translated">注：これらは必ずしも元の &lt;code&gt;Iterable&lt;/code&gt; に適用された実際の操作とは限りません。むしろ、これらは適用された操作とは異なる計算された操作のセットです。</target>
        </trans-unit>
        <trans-unit id="6812b1bc0c0646ebecf1e212f6b701a4c00f9e0e" translate="yes">
          <source>NOTE: the basic behavior described below is handled automatically when using the NgUniversal Express schematic, this is helpful when trying to understand the underlying behavior or replicate it without using the schematic.</source>
          <target state="translated">注：以下で説明する基本的な動作は、NgUniversal Express回路図を使用すると自動的に処理されます。これは、回路図を使用せずに基本的な動作を理解したり複製したりするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="7d67ee9446bfc0dbf4127f0fae8b6858be3024db" translate="yes">
          <source>NO_ERRORS_SCHEMA</source>
          <target state="translated">NO_ERRORS_SCHEMA</target>
        </trans-unit>
        <trans-unit id="7d94ebbf07f5417771d7c7fd06f208703494bf50" translate="yes">
          <source>NPM</source>
          <target state="translated">NPM</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="ac0bd3f0f21026a506ecdfde4d06d7cf1b932ed6" translate="yes">
          <source>Name expected</source>
          <target state="translated">予想される名前</target>
        </trans-unit>
        <trans-unit id="1c87abf672363192eb82a7c84d215c41d1df8f0a" translate="yes">
          <source>Name of a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; object where the component can be placed when the path matches.</source>
          <target state="translated">パスが一致したときにコンポーネントを配置できる &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; オブジェクトの名前。</target>
        </trans-unit>
        <trans-unit id="efaff6470fe74eff20a22d907e5996c60bcd343d" translate="yes">
          <source>Name of the file to output.</source>
          <target state="translated">出力するファイルの名前。</target>
        </trans-unit>
        <trans-unit id="edb8b69d52b5234d914940a2c7dab34536d5b737" translate="yes">
          <source>Named &lt;em&gt;#docregions&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;#docregionsという&lt;/em&gt;名前</target>
        </trans-unit>
        <trans-unit id="565f8abd08ab76aca7ede4a593565f082212bd51" translate="yes">
          <source>Named outlets are the targets of &lt;em&gt;secondary routes&lt;/em&gt;.</source>
          <target state="translated">名前付きコンセントは&lt;em&gt;二次ルート&lt;/em&gt;のターゲットです。</target>
        </trans-unit>
        <trans-unit id="19c58cf746e1fa01bb3ddb3e978299e1e6439626" translate="yes">
          <source>Named schematics</source>
          <target state="translated">名前付き回路図</target>
        </trans-unit>
        <trans-unit id="a46171efa120e3814dee92fef224b89628e2e912" translate="yes">
          <source>Names of the parameters in the map.</source>
          <target state="translated">マップ内のパラメーターの名前。</target>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="b421e345572cd6dda9871ac0f2b12a8589699460" translate="yes">
          <source>Naming conventions are hugely important to maintainability and readability. This guide recommends naming conventions for the file name and the symbol name.</source>
          <target state="translated">命名規則は、保守性と可読性にとって非常に重要です。 このガイドでは、ファイル名とシンボル名の命名規則を推奨しています。</target>
        </trans-unit>
        <trans-unit id="8098b332f1cda7a125158650b5bd36b36600d729" translate="yes">
          <source>Naming conventions for observables</source>
          <target state="translated">オブザーバブルの命名規則</target>
        </trans-unit>
        <trans-unit id="697edbe4acd10b9466b672837ee81bd016c23b79" translate="yes">
          <source>Narrow</source>
          <target state="translated">Narrow</target>
        </trans-unit>
        <trans-unit id="3cd6eb0659a1205c3d2f1ffbb5b2fe40d9662271" translate="yes">
          <source>Native HTML elements capture a number of standard interaction patterns that are important to accessibility. When authoring Angular components, you should re-use these native elements directly when possible, rather than re-implementing well-supported behaviors.</source>
          <target state="translated">ネイティブHTML要素は、アクセシビリティにとって重要な多くの標準的な対話パターンをキャプチャします。 Angularコンポーネントを作成するときは、十分にサポートされている動作を再実装するのではなく、可能であればこれらのネイティブ要素を直接再使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa7431b75f62e3afb7b428a378241bb10eefd2d8" translate="yes">
          <source>Navigate based on the provided URL, which must be absolute.</source>
          <target state="translated">指定されたURLに基​​づいてナビゲートします。絶対URLでなければなりません。</target>
        </trans-unit>
        <trans-unit id="f00a310453dd24d0871c004718114fd725896517" translate="yes">
          <source>Navigate based on the provided array of commands and a starting point. If no starting route is provided, the navigation is absolute.</source>
          <target state="translated">提供されたコマンドの配列と開始点に基づいてナビゲートします。 開始ルートが提供されていない場合、ナビゲーションは絶対です。</target>
        </trans-unit>
        <trans-unit id="bcb28231ae5f2e6c19b1274bbb244e4f8f8c72f0" translate="yes">
          <source>Navigate imperatively from one component to another.</source>
          <target state="translated">あるコンポーネントから別のコンポーネントに命令的に移動します。</target>
        </trans-unit>
        <trans-unit id="afb677fe70fdcfa21d17515809a52b37d92143ff" translate="yes">
          <source>Navigate the Component Tree with DI</source>
          <target state="translated">DIを使用してコンポーネントツリーをナビゲートする</target>
        </trans-unit>
        <trans-unit id="801cddba8606ab904bff03cf42dc9bb7afdbae2f" translate="yes">
          <source>Navigate the component tree with DI</source>
          <target state="translated">DIを使用してコンポーネントツリーをナビゲートする</target>
        </trans-unit>
        <trans-unit id="054bf40cd5a09bac00514f6220f471f85443770e" translate="yes">
          <source>Navigate to crisis list with a relative URL</source>
          <target state="translated">相対URLで危機リストに移動します</target>
        </trans-unit>
        <trans-unit id="eac113305c9e93a9fafdff869950c44bded467f6" translate="yes">
          <source>Navigate to the &lt;em&gt;Crisis Center&lt;/em&gt; and click &quot;Contact&quot;. you should see something like the following URL in the browser address bar.</source>
          <target state="translated">&lt;em&gt;危機センター&lt;/em&gt;に移動し、「連絡先」をクリックします。 ブラウザのアドレスバーに次のようなURLが表示されます。</target>
        </trans-unit>
        <trans-unit id="4518e36712637adff17a3524e56ca5f8ec3f952b" translate="yes">
          <source>Navigates back in the platform's history.</source>
          <target state="translated">プラットフォームの履歴に戻ります。</target>
        </trans-unit>
        <trans-unit id="44c635e70030c2a900ac2aefff93eea69863e5e9" translate="yes">
          <source>Navigates forward in the platform's history.</source>
          <target state="translated">プラットフォームの履歴内を前方に移動します。</target>
        </trans-unit>
        <trans-unit id="82436f50f9049884de9b6c3ba1b99e9bb2c9a879" translate="yes">
          <source>Navigating back to the list component</source>
          <target state="translated">リストコンポーネントに戻る</target>
        </trans-unit>
        <trans-unit id="0c008352e202507d43afb72eafc5744d9a6d7dc5" translate="yes">
          <source>Navigating to a component (&lt;em&gt;Heroes&lt;/em&gt; link to &quot;Heroes List&quot;).</source>
          <target state="translated">コンポーネントへの移動（ &lt;em&gt;ヒーロー&lt;/em&gt;は「ヒーローリスト」にリンクします）。</target>
        </trans-unit>
        <trans-unit id="c20b119c54829ceba5297456fc93df8fbc3a285b" translate="yes">
          <source>Navigating to hero details</source>
          <target state="translated">ヒーローの詳細への移動</target>
        </trans-unit>
        <trans-unit id="cf03cf2e9cdf95a20af09137dfb9071db0c31bf2" translate="yes">
          <source>Navigation</source>
          <target state="translated">Navigation</target>
        </trans-unit>
        <trans-unit id="0503c11edd28859dcfc3851d2db9b7108c99b553" translate="yes">
          <source>Navigation via &lt;code&gt;routerLinks&lt;/code&gt; works correctly because they use the native anchor (&lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;) tags. You can go from the Dashboard to the Heroes page and back. You can click a hero on the Dashboard page to display its Details page.</source>
          <target state="translated">&lt;code&gt;routerLinks&lt;/code&gt; を介したナビゲーションは、ネイティブアンカー（ &amp;lt;a&amp;gt; ）タグを使用するため、正しく機能します。 ダッシュボードからヒーローページに戻って戻ることができます。 [ダッシュボード]ページでヒーローをクリックすると、その詳細ページが表示されます。</target>
        </trans-unit>
        <trans-unit id="f6f45edabb536117eaaa8a31a3009ee45b02798c" translate="yes">
          <source>NavigationCancel</source>
          <target state="translated">NavigationCancel</target>
        </trans-unit>
        <trans-unit id="3df2bbafb8bef3ad3c14903257e2b80c2ecf4d7f" translate="yes">
          <source>NavigationEnd</source>
          <target state="translated">NavigationEnd</target>
        </trans-unit>
        <trans-unit id="3c6b9a9761701b6696dc96c14cded08327b354ca" translate="yes">
          <source>NavigationError</source>
          <target state="translated">NavigationError</target>
        </trans-unit>
        <trans-unit id="5537ca588f865cbeab3cdfff2f7d54ef22a4b2fa" translate="yes">
          <source>NavigationExtras</source>
          <target state="translated">NavigationExtras</target>
        </trans-unit>
        <trans-unit id="1a9c98c134db2cf2bf2aca63b0b8e192816b3996" translate="yes">
          <source>NavigationStart</source>
          <target state="translated">NavigationStart</target>
        </trans-unit>
        <trans-unit id="45c7f55490f4d99e23fc1cb2f73c00322d0d19be" translate="yes">
          <source>Nearby tests can reveal how a part works in context.</source>
          <target state="translated">近くのテストでは、部品がコンテキストでどのように機能するかを明らかにできます。</target>
        </trans-unit>
        <trans-unit id="08ac0f840e3c990cb29508186b00fbf0c6c41cf3" translate="yes">
          <source>Negative glob patterns are not supported.</source>
          <target state="translated">負のグロブパターンはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="6ab1f3cff45310ffbcb338033e822fd00c603e04" translate="yes">
          <source>Neither &lt;code&gt;tap&lt;/code&gt; nor &lt;code&gt;finalize&lt;/code&gt; touch the values of the observable stream returned to the caller.</source>
          <target state="translated">&lt;code&gt;tap&lt;/code&gt; も &lt;code&gt;finalize&lt;/code&gt; も、呼び出し元に返される観測可能なストリームの値に触れません。</target>
        </trans-unit>
        <trans-unit id="a660d66d678c2aa12932b6114b6a06a470213bb0" translate="yes">
          <source>Nested &lt;em&gt;#docregions&lt;/em&gt;</source>
          <target state="translated">ネストされた&lt;em&gt;#docregions&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8471e4625a027b35641c7d539e57cd28b22856d9" translate="yes">
          <source>Nested component tests</source>
          <target state="translated">ネストされたコンポーネントのテスト</target>
        </trans-unit>
        <trans-unit id="02ab9a0c82c26f180ecdcc2524a370078d4cdf6f" translate="yes">
          <source>Nested service dependencies</source>
          <target state="translated">ネストされたサービスの依存関係</target>
        </trans-unit>
        <trans-unit id="91890a92af602dc34a0759b4044a9376f87b16a8" translate="yes">
          <source>Nesting plural and select ICU expressions</source>
          <target state="translated">複数のネストとICU式の選択</target>
        </trans-unit>
        <trans-unit id="1bd711a21d476e6fe66700859fd27013606d0d82" translate="yes">
          <source>Netlify</source>
          <target state="translated">Netlify</target>
        </trans-unit>
        <trans-unit id="16ec400266d5ef58ca82e995098af63f1923ec9d" translate="yes">
          <source>Never directly import lazy loaded folders</source>
          <target state="translated">遅延読み込みフォルダーを直接インポートしない</target>
        </trans-unit>
        <trans-unit id="6403f2b7eb2aaafe6de34cbf2a029b01afebc512" translate="yes">
          <source>New</source>
          <target state="translated">New</target>
        </trans-unit>
        <trans-unit id="9fc705094d287067f1988a6a0801f2814fac8b45" translate="yes">
          <source>New &lt;a href=&quot;template-syntax#expression-operators&quot;&gt;template expression operators&lt;/a&gt;, such as &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;?.&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; などの新しい&lt;a href=&quot;template-syntax#expression-operators&quot;&gt;テンプレート式演算子&lt;/a&gt; 、 &lt;code&gt;?.&lt;/code&gt; そして &lt;code&gt;!&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6499c7afe8658c4357e133e2d725379e590d06cd" translate="yes">
          <source>New code</source>
          <target state="translated">新しいコード</target>
        </trans-unit>
        <trans-unit id="3d9d5612da2d5b4b00ea65cc9544cb150870d63e" translate="yes">
          <source>New instances</source>
          <target state="translated">新しいインスタンス</target>
        </trans-unit>
        <trans-unit id="faf5319f3ab931a2424080ebd66686013025fb48" translate="yes">
          <source>New locale id</source>
          <target state="translated">新しいロケールID</target>
        </trans-unit>
        <trans-unit id="2272b187b02a451ebb5ad8639f2bf94e07550870" translate="yes">
          <source>New to web development?</source>
          <target state="translated">Web開発は初めてですか？</target>
        </trans-unit>
        <trans-unit id="dc8f1ce4cebeca9a38c685a3b23068407d2e91a9" translate="yes">
          <source>Next is &lt;code&gt;QuestionControlService&lt;/code&gt;, a simple service for transforming the questions to a &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. In a nutshell, the form group consumes the metadata from the question model and allows you to specify default values and validation rules.</source>
          <target state="translated">次は &lt;code&gt;QuestionControlService&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 。これは、質問をFormGroupに変換するためのシンプルなサービスです。 簡単に言うと、フォームグループは質問モデルのメタデータを使用し、デフォルト値と検証ルールを指定できます。</target>
        </trans-unit>
        <trans-unit id="11fc14203dd0f4441645a9c34d5dd022905f56e4" translate="yes">
          <source>Next steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="e54feaad576821078eba1e93f7c9c60ca70fb2c0" translate="yes">
          <source>Next steps: tools and techniques</source>
          <target state="translated">次のステップ：ツールとテクニック</target>
        </trans-unit>
        <trans-unit id="b2a1fb63b77a247c65e2949fd2731d2882b12b5e" translate="yes">
          <source>Next, &lt;code&gt;AppRoutingModule&lt;/code&gt; exports &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; so it will be available throughout the app.</source>
          <target state="translated">次に、 &lt;code&gt;AppRoutingModule&lt;/code&gt; はRouterModuleをエクスポートして、アプリ全体で使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="e40a87bc30a63dbca742228db43c858138ed67f9" translate="yes">
          <source>Next, add &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; along with &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; to the constructor for the &lt;code&gt;Animal Service&lt;/code&gt; in &lt;code&gt;child.component.ts&lt;/code&gt;. Here are &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; constructor :</source>
          <target state="translated">次に、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; を &lt;code&gt;child.component.ts&lt;/code&gt; の &lt;code&gt;Animal Service&lt;/code&gt; のコンストラクターに追加します。 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; コンストラクターの &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; は次のとおり です 。</target>
        </trans-unit>
        <trans-unit id="2cbe1b3e5150553c875832797ecdc536a1901705" translate="yes">
          <source>Next, add a &lt;code&gt;data&lt;/code&gt; object to the routes for &lt;code&gt;HeroListComponent&lt;/code&gt; and &lt;code&gt;HeroDetailComponent&lt;/code&gt;. Transitions are based on &lt;code&gt;states&lt;/code&gt; and you'll use the &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; data from the route to provide a named animation &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; for the transitions.</source>
          <target state="translated">次に、 &lt;code&gt;data&lt;/code&gt; オブジェクトを &lt;code&gt;HeroListComponent&lt;/code&gt; と &lt;code&gt;HeroDetailComponent&lt;/code&gt; のルートに追加します 。 遷移は &lt;code&gt;states&lt;/code&gt; 基づいており、ルートからの &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;&lt;/code&gt; データを使用して、遷移に名前付きのアニメーション &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="fbe6d180136a82d27c10482de8b67fe1e78e0fb9" translate="yes">
          <source>Next, add a &lt;code&gt;deleteHero()&lt;/code&gt; method to &lt;code&gt;HeroService&lt;/code&gt; like this.</source>
          <target state="translated">次に、このように &lt;code&gt;deleteHero()&lt;/code&gt; メソッドを &lt;code&gt;HeroService&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="ca91b2e786e0c6a170fc3962eee3d4548b237fa8" translate="yes">
          <source>Next, add the following to &lt;code&gt;app.component.html&lt;/code&gt; to take advantage of content projection.</source>
          <target state="translated">次に、以下を &lt;code&gt;app.component.html&lt;/code&gt; に追加して、コンテンツの投影を活用します。</target>
        </trans-unit>
        <trans-unit id="146403171474dcf7255cdeee43c31023cf1d1e42" translate="yes">
          <source>Next, convert your current JavaScript files into TypeScript. Since TypeScript is a super-set of ECMAScript 2015, which in turn is a super-set of ECMAScript 5, you can simply switch the file extensions from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.ts&lt;/code&gt; and everything will work just like it did before. As the TypeScript compiler runs, it emits the corresponding &lt;code&gt;.js&lt;/code&gt; file for every &lt;code&gt;.ts&lt;/code&gt; file and the compiled JavaScript is what actually gets executed. If you start the project HTTP server with &lt;code&gt;npm start&lt;/code&gt;, you should see the fully functional application in your browser.</source>
          <target state="translated">次に、現在のJavaScriptファイルをTypeScriptに変換します。 TypeScriptはECMAScript 2015のスーパーセットであり、ECMAScript 5のスーパーセットであるため、ファイル拡張子を &lt;code&gt;.js&lt;/code&gt; から &lt;code&gt;.ts&lt;/code&gt; に切り替えるだけで、すべてが以前と同じように機能します。 TypeScriptコンパイラが実行されると、すべての &lt;code&gt;.ts&lt;/code&gt; ファイルに対応する &lt;code&gt;.js&lt;/code&gt; ファイルが生成され、コンパイルされたJavaScriptが実際に実行されます。 &lt;code&gt;npm start&lt;/code&gt; を使用してプロジェクトHTTPサーバーを起動すると 、ブラウザに完全に機能するアプリケーションが表示されます。</target>
        </trans-unit>
        <trans-unit id="29f04404e03c09595b5fbbccda8157911c3d6215" translate="yes">
          <source>Next, create an &lt;code&gt;addNewItem()&lt;/code&gt; method in the same component class:</source>
          <target state="translated">次に、同じコンポーネントクラスに &lt;code&gt;addNewItem()&lt;/code&gt; メソッドを作成します。</target>
        </trans-unit>
        <trans-unit id="78e562daa79a3e6eee49cbc86a107a82253ffd45" translate="yes">
          <source>Next, create an &lt;code&gt;app.module.ts&lt;/code&gt; file and add the following &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; class:</source>
          <target state="translated">次に、 &lt;code&gt;app.module.ts&lt;/code&gt; ファイルを作成し、次の &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; クラスを追加します。</target>
        </trans-unit>
        <trans-unit id="5a14bd3e0ad6c2dc72723721eabbe8211d5f62a4" translate="yes">
          <source>Next, define the behavior that should happen when the user clicks the button. Recall that it's the parent, product list component&amp;mdash;not the product alerts component&amp;mdash;that acts when the child raises the event. In &lt;code&gt;product-list.component.ts&lt;/code&gt;, define an &lt;code&gt;onNotify()&lt;/code&gt; method, similar to the &lt;code&gt;share()&lt;/code&gt; method:</source>
          <target state="translated">次に、ユーザーがボタンをクリックしたときに発生する動作を定義します。 子がイベントを発生させたときに機能するのは、製品アラートコンポーネントではなく、親である製品リストコンポーネントであることを思い出してください。 &lt;code&gt;product-list.component.ts&lt;/code&gt; で、 &lt;code&gt;onNotify()&lt;/code&gt; メソッドに似たonNotify（）メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="159e605a4cc3040ba1837fc4fc9937ebc9ada940" translate="yes">
          <source>Next, generate the supporting components.</source>
          <target state="translated">次に、サポートコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="02c66793fe3c348fdc1c4c83dd6b949eef1aae70" translate="yes">
          <source>Next, implement the &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivateChild&quot;&gt;canActivateChild&lt;/a&gt;()&lt;/code&gt; method which takes the same arguments as the &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivate&quot;&gt;canActivate&lt;/a&gt;()&lt;/code&gt; method: an &lt;code&gt;&lt;a href=&quot;../api/router/activatedroutesnapshot&quot;&gt;ActivatedRouteSnapshot&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivateChild&quot;&gt;canActivateChild&lt;/a&gt;()&lt;/code&gt; method can return an &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; or &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt; for async checks and a &lt;code&gt;boolean&lt;/code&gt; for sync checks. This one returns a &lt;code&gt;boolean&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivateChild&quot;&gt;canActivateChild&lt;/a&gt;()&lt;/code&gt; メソッドと同じ引数を &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivate&quot;&gt;canActivate&lt;/a&gt;()&lt;/code&gt; メソッドを &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; ます： &lt;code&gt;&lt;a href=&quot;../api/router/activatedroutesnapshot&quot;&gt;ActivatedRouteSnapshot&lt;/a&gt;&lt;/code&gt; およびRouterStateSnapshotです。 &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivateChild&quot;&gt;canActivateChild&lt;/a&gt;()&lt;/code&gt; メソッドは、非同期チェックの場合は &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; または &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt; を返し、同期チェックの場合は &lt;code&gt;boolean&lt;/code&gt; を返すことができます。 これは &lt;code&gt;boolean&lt;/code&gt; 返します：</target>
        </trans-unit>
        <trans-unit id="1ce7cdbebf308621f531b33a618f458772e93ac6" translate="yes">
          <source>Next, import the &lt;code&gt;AdminModule&lt;/code&gt; into &lt;code&gt;app.module.ts&lt;/code&gt; and add it to the &lt;code&gt;imports&lt;/code&gt; array to register the admin routes.</source>
          <target state="translated">次に、 &lt;code&gt;AdminModule&lt;/code&gt; を &lt;code&gt;app.module.ts&lt;/code&gt; にインポートし、それを &lt;code&gt;imports&lt;/code&gt; 配列に追加して、管理ルートを登録します。</target>
        </trans-unit>
        <trans-unit id="1ba62cbb6eeadeb0cb95f3e2261d2a087737673f" translate="yes">
          <source>Next, in the &lt;code&gt;AppComponent&lt;/code&gt;, &lt;code&gt;app.component.html&lt;/code&gt;, add the tag &lt;code&gt;&amp;lt;app-customer-dashboard&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;app.component.html&lt;/code&gt; で、タグ &lt;code&gt;&amp;lt;app-customer-dashboard&amp;gt;&lt;/code&gt; を追加します 。</target>
        </trans-unit>
        <trans-unit id="ceee8a4c64453c5c9dc92d2e36c028a333a12d42" translate="yes">
          <source>Next, in the child component template, add the following:</source>
          <target state="translated">次に、子コンポーネントテンプレートで、次を追加します。</target>
        </trans-unit>
        <trans-unit id="51909826c31cf2634e91d573fc593a2ca3b40e50" translate="yes">
          <source>Next, in the parent component class, &lt;code&gt;app.component.ts&lt;/code&gt;, designate a value for &lt;code&gt;currentItem&lt;/code&gt;:</source>
          <target state="translated">次に、親コンポーネントクラス &lt;code&gt;app.component.ts&lt;/code&gt; で 、 &lt;code&gt;currentItem&lt;/code&gt; の値を指定します。</target>
        </trans-unit>
        <trans-unit id="733d4f56880fe5b33b54901da865905016d628e2" translate="yes">
          <source>Next, in the parent's template, bind the parent's method to the child's event. Put the child selector, here &lt;code&gt;&amp;lt;app-item-output&amp;gt;&lt;/code&gt;, within the parent component's template, &lt;code&gt;app.component.html&lt;/code&gt;.</source>
          <target state="translated">次に、親のテンプレートで、親のメソッドを子のイベントにバインドします。 子セレクター、ここでは &lt;code&gt;&amp;lt;app-item-output&amp;gt;&lt;/code&gt; を親コンポーネントのテンプレート &lt;code&gt;app.component.html&lt;/code&gt; 内に配置します。</target>
        </trans-unit>
        <trans-unit id="16bbcfa504ba8fa467c5555baf8b098e75790d4b" translate="yes">
          <source>Next, inject the child &lt;code&gt;CountdownTimerComponent&lt;/code&gt; into the private &lt;code&gt;timerComponent&lt;/code&gt; property via the &lt;code&gt;@&lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; property decoration.</source>
          <target state="translated">次に、 &lt;code&gt;@&lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; プロパティデコレーションを介して、子 &lt;code&gt;CountdownTimerComponent&lt;/code&gt; をprivate &lt;code&gt;timerComponent&lt;/code&gt; プロパティに挿入します。</target>
        </trans-unit>
        <trans-unit id="f71324dbd9f317e01f00a710d2d8e578d23b46a8" translate="yes">
          <source>Next, make a change to the application, and watch the service worker install the update.</source>
          <target state="translated">次に、アプリケーションに変更を加え、Service Workerが更新をインストールするのを確認します。</target>
        </trans-unit>
        <trans-unit id="acfae61a91a6b0c1993304859ab3d89fe934c5b5" translate="yes">
          <source>Next, make sure your &lt;code&gt;child.component.html&lt;/code&gt; contains the following:</source>
          <target state="translated">次に、 &lt;code&gt;child.component.html&lt;/code&gt; に次が含まれていることを確認します。</target>
        </trans-unit>
        <trans-unit id="39b90f5c6fb337d84f53f2af04d454c24099f6d0" translate="yes">
          <source>Next, open &lt;code&gt;admin-routing.module.ts&lt;/code&gt;, import the &lt;code&gt;AuthGuard&lt;/code&gt; class, and update the admin route with a &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivate&quot;&gt;canActivate&lt;/a&gt;&lt;/code&gt; guard property that references it:</source>
          <target state="translated">次に、 &lt;code&gt;admin-routing.module.ts&lt;/code&gt; を開き、 &lt;code&gt;AuthGuard&lt;/code&gt; クラスをインポートし、それを参照する &lt;code&gt;&lt;a href=&quot;../api/router/route#canActivate&quot;&gt;canActivate&lt;/a&gt;&lt;/code&gt; ガードプロパティで管理ルートを更新します。</target>
        </trans-unit>
        <trans-unit id="9238d3dd88f48f6f024b03a222d53eac661496c6" translate="yes">
          <source>Next, pass this request object to the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt;HttpClient.request()&lt;/a&gt;&lt;/code&gt; method, which returns an &lt;code&gt;Observable&lt;/code&gt; of &lt;code&gt;HttpEvents&lt;/code&gt;, the same events processed by interceptors:</source>
          <target state="translated">次に、このリクエストオブジェクトを &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#request&quot;&gt;HttpClient.request()&lt;/a&gt;&lt;/code&gt; メソッドに &lt;code&gt;HttpEvents&lt;/code&gt; ます。HttpClient.request （）メソッドは、 HttpEventsの &lt;code&gt;Observable&lt;/code&gt; を返します。これは、インターセプターによって処理された同じイベントです。</target>
        </trans-unit>
        <trans-unit id="433326a8e38824bb8f9a3cd7191eee156cde4fcf" translate="yes">
          <source>Next, provide the interceptor in the providers for the server &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">次に、サーバー &lt;code&gt;AppModule&lt;/code&gt; のプロバイダーにインターセプターを提供します。</target>
        </trans-unit>
        <trans-unit id="7081de89008cec58d5674fcc6bbf610061f2490f" translate="yes">
          <source>Next, specify that interface as the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; call's type parameter in the service.</source>
          <target state="translated">次に、そのインターフェイスをサービスの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; 呼び出しのtypeパラメーターとして指定します。</target>
        </trans-unit>
        <trans-unit id="e5070e8750ad2ec511978e2fe0b2557afd4ace02" translate="yes">
          <source>Next, still in the &lt;code&gt;AppModule&lt;/code&gt;, add &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array:</source>
          <target state="translated">次に、まだ &lt;code&gt;AppModule&lt;/code&gt; で、 &lt;code&gt;imports&lt;/code&gt; 配列に &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を追加します 。</target>
        </trans-unit>
        <trans-unit id="0c52312ed7a332374c1934fe59d2405fafdb84b4" translate="yes">
          <source>Next, still in the child, decorate a property with &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; in the component class. The following example &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; is called &lt;code&gt;newItemEvent&lt;/code&gt; and its type is &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;, which means it's an event.</source>
          <target state="translated">次に、まだ子で、コンポーネントクラスの &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; でプロパティを装飾します。 次の例の &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; は &lt;code&gt;newItemEvent&lt;/code&gt; と呼ばれ、そのタイプは &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; です 。これはイベントであることを意味します。</target>
        </trans-unit>
        <trans-unit id="e01f7c08a26720fb75063452fd9b610ef7552b09" translate="yes">
          <source>Next, take a look at &lt;code&gt;customers.module.ts&lt;/code&gt;. If you&amp;rsquo;re using the CLI and following the steps outlined in this page, you don&amp;rsquo;t have to do anything here.</source>
          <target state="translated">次に、 &lt;code&gt;customers.module.ts&lt;/code&gt; を見てください。 CLIを使用しており、このページで説明されている手順に従っている場合、ここで何もする必要はありません。</target>
        </trans-unit>
        <trans-unit id="9a052540461ab5d2b2db93b6978d55fc263fc2ce" translate="yes">
          <source>Next, to provide better user experience, we show an appropriate error message when the form is invalid.</source>
          <target state="translated">次に、ユーザーエクスペリエンスを向上させるために、フォームが無効な場合に適切なエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="f1e950c928e2e7ecce05f57f8953855497127af3" translate="yes">
          <source>Next, update the &lt;code&gt;app.module.ts&lt;/code&gt; file, removing &lt;code&gt;RouterModule.forRoot&lt;/code&gt; in the &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">次に、 &lt;code&gt;app.module.ts&lt;/code&gt; ファイルを更新し、 &lt;code&gt;imports&lt;/code&gt; 配列から &lt;code&gt;RouterModule.forRoot&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="8b2be34383d8449d30e79266ca4b72b931faa752" translate="yes">
          <source>Next, update the template. At the moment it displays the hero's &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Fix that to display only the hero's &lt;code&gt;name&lt;/code&gt; property.</source>
          <target state="translated">次に、テンプレートを更新します。 現時点では、ヒーローの &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; 表示されます。 ヒーローの &lt;code&gt;name&lt;/code&gt; プロパティのみを表示するように修正します。</target>
        </trans-unit>
        <trans-unit id="1f382d5fee30f4adf3e70cf9278956bd6336fceb" translate="yes">
          <source>Next, we have to add the directive to the html template. Since the validator must be registered at the highest level in the form, we put the directive on the &lt;code&gt;form&lt;/code&gt; tag.</source>
          <target state="translated">次に、ディレクティブをhtmlテンプレートに追加する必要があります。 バリデーターはフォームの最上位に登録する必要があるため、ディレクティブを &lt;code&gt;form&lt;/code&gt; タグに配置します。</target>
        </trans-unit>
        <trans-unit id="a45433b56d573a43bfea8e8b40a108062db3dc5f" translate="yes">
          <source>Next, you&amp;rsquo;ll need a feature module with a component to route to. To make one, enter the following command in the terminal, where &lt;code&gt;customers&lt;/code&gt; is the name of the feature module, and &lt;code&gt;customer-list&lt;/code&gt; is the route path for loading the &lt;code&gt;customers&lt;/code&gt; component:</source>
          <target state="translated">次に、ルーティングするコンポーネントを備えた機能モジュールが必要になります。 作成するには、ターミナルで次のコマンドを入力します。ここで、 &lt;code&gt;customers&lt;/code&gt; は機能モジュールの名前で、 &lt;code&gt;customer-list&lt;/code&gt; は &lt;code&gt;customers&lt;/code&gt; コンポーネントをロードするためのルートパスです。</target>
        </trans-unit>
        <trans-unit id="6a96057b587190d68c3d35e191fa2ede8a5fda71" translate="yes">
          <source>Next, you'll add a checkout form at the bottom of the &quot;Cart&quot; page.</source>
          <target state="translated">次に、「カート」ページの下部にチェックアウトフォームを追加します。</target>
        </trans-unit>
        <trans-unit id="07fddc141a40d546f782e352de75a718fa77dd61" translate="yes">
          <source>Next, you'll bootstrap the application as a &lt;em&gt;hybrid application&lt;/em&gt; that supports both AngularJS and Angular components. After that, you can start converting the individual pieces to Angular.</source>
          <target state="translated">次に、アプリケーションを、AngularJSとAngularコンポーネントの両方をサポートする&lt;em&gt;ハイブリッドアプリケーション&lt;/em&gt;としてブートストラップします。 その後、個々のピースのAngularへの変換を開始できます。</target>
        </trans-unit>
        <trans-unit id="2f6a7f292bb2d34dbd24f570eb6ae36cda4a9b60" translate="yes">
          <source>Next, you'll update the &lt;code&gt;HeroesModule&lt;/code&gt; metadata.</source>
          <target state="translated">次に、 &lt;code&gt;HeroesModule&lt;/code&gt; メタデータを更新します。</target>
        </trans-unit>
        <trans-unit id="ea8bc738c3f2744292fff210de01e1a19b19be37" translate="yes">
          <source>Next, you're targeting the &lt;code&gt;viewContainerRef&lt;/code&gt; that exists on this specific instance of the component. How do you know it's this specific instance? Because it's referring to &lt;code&gt;adHost&lt;/code&gt; and &lt;code&gt;adHost&lt;/code&gt; is the directive you set up earlier to tell Angular where to insert dynamic components.</source>
          <target state="translated">次に、コンポーネントのこの特定のインスタンスに存在する &lt;code&gt;viewContainerRef&lt;/code&gt; をターゲットにしています。 この特定のインスタンスであることをどのように知っていますか？ これは &lt;code&gt;adHost&lt;/code&gt; を参照しているため、 &lt;code&gt;adHost&lt;/code&gt; は、動的コンポーネントを挿入する場所をAngularに指示するために以前に設定したディレクティブです。</target>
        </trans-unit>
        <trans-unit id="930eb31163a442c119ddb1c29beebf413aa587d6" translate="yes">
          <source>NgClass</source>
          <target state="translated">NgClass</target>
        </trans-unit>
        <trans-unit id="0d21e79d490fb36429b0b5383645cbd92e7c485d" translate="yes">
          <source>NgClassBase</source>
          <target state="translated">NgClassBase</target>
        </trans-unit>
        <trans-unit id="cd9579a5feabe299336ff967716146f9e748e162" translate="yes">
          <source>NgComponentOutlet</source>
          <target state="translated">NgComponentOutlet</target>
        </trans-unit>
        <trans-unit id="3a340289aa623d264812176c87b9df65b745eace" translate="yes">
          <source>NgControl</source>
          <target state="translated">NgControl</target>
        </trans-unit>
        <trans-unit id="b3e08af5e72c076c24ba32a201a892e6632cb131" translate="yes">
          <source>NgControlStatus</source>
          <target state="translated">NgControlStatus</target>
        </trans-unit>
        <trans-unit id="b51a5a43dd26d66af41091781019c47195f9b60a" translate="yes">
          <source>NgControlStatusGroup</source>
          <target state="translated">NgControlStatusGroup</target>
        </trans-unit>
        <trans-unit id="69619e32876644e9b1f5a2e22a9ef35084b08aca" translate="yes">
          <source>NgElement</source>
          <target state="translated">NgElement</target>
        </trans-unit>
        <trans-unit id="835f1ff7eab741dfdcaf682956ac9649ed577345" translate="yes">
          <source>NgElementConfig</source>
          <target state="translated">NgElementConfig</target>
        </trans-unit>
        <trans-unit id="98abd1d6e9741a567557dd4f65dccdf66d959765" translate="yes">
          <source>NgElementConstructor</source>
          <target state="translated">NgElementConstructor</target>
        </trans-unit>
        <trans-unit id="836c0c8ba2c663fc3e59a2e9222f0246032f1f34" translate="yes">
          <source>NgElementStrategy</source>
          <target state="translated">NgElementStrategy</target>
        </trans-unit>
        <trans-unit id="d381bec5e272dc31ba3247a1a00ea382b9a3ed51" translate="yes">
          <source>NgElementStrategyEvent</source>
          <target state="translated">NgElementStrategyEvent</target>
        </trans-unit>
        <trans-unit id="4fe27239d38e87b6129179225480ede5cd8cf8fe" translate="yes">
          <source>NgElementStrategyFactory</source>
          <target state="translated">NgElementStrategyFactory</target>
        </trans-unit>
        <trans-unit id="91fd7e01a74c4728b2f19ff04aea391d049f80c2" translate="yes">
          <source>NgForOf</source>
          <target state="translated">NgForOf</target>
        </trans-unit>
        <trans-unit id="4dc7fbec31709e6db39e0116840dab3ee663f864" translate="yes">
          <source>NgForOfContext</source>
          <target state="translated">NgForOfContext</target>
        </trans-unit>
        <trans-unit id="9aa1623811bf5374405945b7fc6cbdf5180993ff" translate="yes">
          <source>NgForm</source>
          <target state="translated">NgForm</target>
        </trans-unit>
        <trans-unit id="02e8e8f0c3435c34f302cb262a5526aa0b3f90c3" translate="yes">
          <source>NgFormSelectorWarning</source>
          <target state="translated">NgFormSelectorWarning</target>
        </trans-unit>
        <trans-unit id="0d47835d748f32561764d51a4ebf5edaa996ec7e" translate="yes">
          <source>NgIf</source>
          <target state="translated">NgIf</target>
        </trans-unit>
        <trans-unit id="53ee9a1d3ac7229df365ec02e217a300949c950a" translate="yes">
          <source>NgIf case study</source>
          <target state="translated">NgIfのケーススタディ</target>
        </trans-unit>
        <trans-unit id="2d6fa6fc357e35051e9a8ca6cfad6ca37f2129d7" translate="yes">
          <source>NgIfContext</source>
          <target state="translated">NgIfContext</target>
        </trans-unit>
        <trans-unit id="ca835c7256b39ca88da22b194239e465c9067c74" translate="yes">
          <source>NgIterable</source>
          <target state="translated">NgIterable</target>
        </trans-unit>
        <trans-unit id="bccec7397e5a239c6d5be00ac97ab89ed6fe7be6" translate="yes">
          <source>NgLocaleLocalization</source>
          <target state="translated">NgLocaleLocalization</target>
        </trans-unit>
        <trans-unit id="67ebfc8308dd70a519e24ec7c811ccef8c29b7e6" translate="yes">
          <source>NgLocalization</source>
          <target state="translated">NgLocalization</target>
        </trans-unit>
        <trans-unit id="44f2da1aebd949bcff94aed08f70c531acb21927" translate="yes">
          <source>NgModel</source>
          <target state="translated">NgModel</target>
        </trans-unit>
        <trans-unit id="8718c24f215be269df2598be1217e4f3c822d28a" translate="yes">
          <source>NgModelGroup</source>
          <target state="translated">NgModelGroup</target>
        </trans-unit>
        <trans-unit id="37a85283effde9e3159a93126429f93b63988ed9" translate="yes">
          <source>NgModule</source>
          <target state="translated">NgModule</target>
        </trans-unit>
        <trans-unit id="c719e20685cae40b647e31dae4879f5d3a54f894" translate="yes">
          <source>NgModule &lt;code&gt;providers&lt;/code&gt; array</source>
          <target state="translated">NgModule &lt;code&gt;providers&lt;/code&gt; 配列</target>
        </trans-unit>
        <trans-unit id="2751d87c0801c1eab05e6a0adc782aaa4e94ee39" translate="yes">
          <source>NgModule API</source>
          <target state="translated">NgModule API</target>
        </trans-unit>
        <trans-unit id="b477384b8930ceaefd252e2e359370e78a8e4520" translate="yes">
          <source>NgModule FAQs</source>
          <target state="translated">NgModule FAQ</target>
        </trans-unit>
        <trans-unit id="51eaf01e53c72676e2b6eb26a767d791f7fb0cf3" translate="yes">
          <source>NgModule classes</source>
          <target state="translated">NgModuleクラス</target>
        </trans-unit>
        <trans-unit id="c7c9934f0c6a24ed4a931d6152b5d880f2efc05c" translate="yes">
          <source>NgModule for testing.</source>
          <target state="translated">テスト用のNgModule。</target>
        </trans-unit>
        <trans-unit id="5d256907f0513eaec7592330caaf62b23fe30e80" translate="yes">
          <source>NgModule metadata</source>
          <target state="translated">NgModuleメタデータ</target>
        </trans-unit>
        <trans-unit id="6d4f86141e2372c863cb09375b2963d442ad5abf" translate="yes">
          <source>NgModule metadata does the following:</source>
          <target state="translated">NgModuleメタデータは次のことを行います。</target>
        </trans-unit>
        <trans-unit id="fbfbd629d3532c0c5def39d3746df2b0de63b951" translate="yes">
          <source>NgModule to install on the client side while using the &lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; to transfer state from server to client.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; を使用してサーバーからクライアントに状態を転送しながら、クライアント側にインストールするNgModule。</target>
        </trans-unit>
        <trans-unit id="3d7075e87c06ced7063e0b71ef4410314d05aa75" translate="yes">
          <source>NgModule to install on the client side while using the &lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; to transfer state from server to client.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; を使用してサーバーからクライアントに状態を転送しながら、クライアント側にインストールするNgModule。</target>
        </trans-unit>
        <trans-unit id="6ec1e1bc15b91062588d5b99a08cf07a76b7ecce" translate="yes">
          <source>NgModule to install on the server side while using the &lt;code&gt;&lt;a href=&quot;../platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; to transfer state from server to client.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; を使用してサーバーからクライアントに状態を転送するときにサーバー側にインストールするNgModule。</target>
        </trans-unit>
        <trans-unit id="4ef7dee469070a640beccb48d4c3f3f99ab65599" translate="yes">
          <source>NgModule to install on the server side while using the &lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; to transfer state from server to client.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; を使用してサーバーからクライアントに状態を転送するときにサーバー側にインストールするNgModule。</target>
        </trans-unit>
        <trans-unit id="a7cee648f99bd3da3cdb1992b2ccb2673f5e2b1a" translate="yes">
          <source>NgModuleFactory</source>
          <target state="translated">NgModuleFactory</target>
        </trans-unit>
        <trans-unit id="477b488285e5a668e6c4458c6708e191a4f4ffcb" translate="yes">
          <source>NgModuleFactoryLoader</source>
          <target state="translated">NgModuleFactoryLoader</target>
        </trans-unit>
        <trans-unit id="24ae0c9b5f5ee9d08572d93983f958413a610153" translate="yes">
          <source>NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory</source>
          <target state="translated">SystemJSを使用してNgModuleFactoryをロードするNgModuleFactoryLoader</target>
        </trans-unit>
        <trans-unit id="5b38b75ac64edf288c87958d77f610c468c097c4" translate="yes">
          <source>NgModuleRef</source>
          <target state="translated">NgModuleRef</target>
        </trans-unit>
        <trans-unit id="3aa15d9e9ccc479546d40db5fc5285973a466031" translate="yes">
          <source>NgModules</source>
          <target state="translated">NgModules</target>
        </trans-unit>
        <trans-unit id="8b38c143e329e8014a252fd083bf2f3a43e15e8c" translate="yes">
          <source>NgModules and JavaScript modules</source>
          <target state="translated">NgModuleとJavaScriptモジュール</target>
        </trans-unit>
        <trans-unit id="b70b73f6df8f1327b6458e4f41dc64fef86047ca" translate="yes">
          <source>NgModules and components</source>
          <target state="translated">NgModuleとコンポーネント</target>
        </trans-unit>
        <trans-unit id="0ad7d0bd2ccc1ce8cf9d363fc9f9ed9fe4b3a05d" translate="yes">
          <source>NgModules are a great way to selectively aggregate classes from other NgModules and re-export them in a consolidated, convenience module.</source>
          <target state="translated">NgModuleは、他のNgModuleからクラスを選択的に集約し、統合された便利なモジュールに再エクスポートするための優れた方法です。</target>
        </trans-unit>
        <trans-unit id="54c3135ae726bd7ade61dd62fbecc04c2da09b7e" translate="yes">
          <source>NgModules are classes decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator&amp;rsquo;s &lt;code&gt;imports&lt;/code&gt; array tells Angular what other NgModules the current module needs. The modules in the &lt;code&gt;imports&lt;/code&gt; array are different than JavaScript modules because they are NgModules rather than regular JavaScript modules. Classes with an &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator are by convention kept in their own files, but what makes them an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; isn&amp;rsquo;t being in their own file, like JavaScript modules; it&amp;rsquo;s the presence of &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; and its metadata.</source>
          <target state="translated">NgModuleは &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装飾されたクラスです 。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターの &lt;code&gt;imports&lt;/code&gt; 配列は、現在のモジュールに必要な他のNgModuleをAngularに伝えます。 &lt;code&gt;imports&lt;/code&gt; 配列のモジュールは、通常のJavaScriptモジュールではなくNgModuleであるため、JavaScriptモジュールとは異なります。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータを持つクラスは慣例により独自のファイルに保持されますが、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; を作成する理由は、JavaScriptモジュールのように独自のファイルにはありません。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; とそのメタデータの存在です。</target>
        </trans-unit>
        <trans-unit id="b4911a8df8b9a60b2d04af43909cad3497a0627b" translate="yes">
          <source>NgModules are typically named after the file in which the exported thing is defined. For example, the Angular &lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt; class belongs to a feature module named &lt;code&gt;date_pipe&lt;/code&gt; in the file &lt;code&gt;date_pipe.ts&lt;/code&gt;. You import them from an Angular &lt;a href=&quot;glossary#scoped-package&quot;&gt;scoped package&lt;/a&gt; such as &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">NgModuleは通常、エクスポートされたものが定義されているファイルにちなんで名前が付けられます。 たとえば、Angular &lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;クラスは、ファイル &lt;code&gt;date_pipe.ts&lt;/code&gt; 内のdate_pipeという名前の機能モジュールに属します。 &lt;code&gt;@angular/core&lt;/code&gt; などのAngular &lt;a href=&quot;glossary#scoped-package&quot;&gt;スコープパッケージ&lt;/a&gt;からインポートします。</target>
        </trans-unit>
        <trans-unit id="a8f03b79bd627a2c287c8259f3048620ba16a568" translate="yes">
          <source>NgModules consolidate components, directives, and pipes into cohesive blocks of functionality, each focused on a feature area, application business domain, workflow, or common collection of utilities.</source>
          <target state="translated">NgModuleは、コンポーネント、ディレクティブ、およびパイプを機能のまとまりのあるブロックに統合し、それぞれが機能領域、アプリケーションビジネスドメイン、ワークフロー、またはユーティリティの一般的なコレクションに焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="af643352073d83c59890eb84260d804d31e0be0f" translate="yes">
          <source>NgModules help organize an application into cohesive blocks of functionality.</source>
          <target state="translated">NgModuleは、アプリケーションを機能のまとまりのあるブロックに整理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d4f6a7850f2ca66c7a969e4238c4738a152c5e4d" translate="yes">
          <source>NgModules or components that are loaded on launch are called eager-loaded, to distinguish them from those that are loaded at run time (lazy-loaded). See &lt;a href=&quot;glossary#lazy-load&quot;&gt;lazy loading&lt;/a&gt;.</source>
          <target state="translated">起動時にロードされるNgModuleまたはコンポーネントは、実行時にロード（遅延ロード）されるものと区別するために、イーガーロードと呼ばれます。 &lt;a href=&quot;glossary#lazy-load&quot;&gt;遅延読み込みを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="62163a6746cd8611053224f510e2d133d17b33a4" translate="yes">
          <source>NgModules provide a &lt;em&gt;compilation context&lt;/em&gt; for their components. A root NgModule always has a root component that is created during bootstrap, but any NgModule can include any number of additional components, which can be loaded through the router or created through the template. The components that belong to an NgModule share a compilation context.</source>
          <target state="translated">NgModuleは、コンポーネントの&lt;em&gt;コンパイルコンテキスト&lt;/em&gt;を提供します。 ルートNgModuleには、ブートストラップ中に作成されるルートコンポーネントが常にありますが、NgModuleには任意の数の追加コンポーネントを含めることができます。これらの追加コンポーネントは、ルーターを介して読み込むか、テンプレートを使用して作成できます。 NgModuleに属するコンポーネントは、コンパイルコンテキストを共有します。</target>
        </trans-unit>
        <trans-unit id="3d52094431f1a451325421f288758094e3331fff" translate="yes">
          <source>NgModules, defined with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator, serve the same purpose:</source>
          <target state="translated">NgModuleデコレータで定義された &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; は、同じ目的を果たします。</target>
        </trans-unit>
        <trans-unit id="ecddffd553c00625c6d1948c47408a7bc2694041" translate="yes">
          <source>NgPlural</source>
          <target state="translated">NgPlural</target>
        </trans-unit>
        <trans-unit id="33e70ef97ddaac0d361c0f2e5595fdcc13aeb0b9" translate="yes">
          <source>NgPluralCase</source>
          <target state="translated">NgPluralCase</target>
        </trans-unit>
        <trans-unit id="e95570f3c97debdfeeba52d6ae0c387d6d857374" translate="yes">
          <source>NgProbeToken</source>
          <target state="translated">NgProbeToken</target>
        </trans-unit>
        <trans-unit id="4dce6f191737f1f14519d03138656f14a86f9c04" translate="yes">
          <source>NgSelectOption</source>
          <target state="translated">NgSelectOption</target>
        </trans-unit>
        <trans-unit id="035fa85010deff8f88890ceff27680fb494ca12e" translate="yes">
          <source>NgStyle</source>
          <target state="translated">NgStyle</target>
        </trans-unit>
        <trans-unit id="6be560439ddbed642468cfe1832ecbd191286f36" translate="yes">
          <source>NgStyleBase</source>
          <target state="translated">NgStyleBase</target>
        </trans-unit>
        <trans-unit id="c6808c2a4dadb4d167ed51609818e1586d73ba91" translate="yes">
          <source>NgSwitch</source>
          <target state="translated">NgSwitch</target>
        </trans-unit>
        <trans-unit id="75e734dbca4c572780c0f22ca962996575a8fe74" translate="yes">
          <source>NgSwitch is like the JavaScript &lt;code&gt;switch&lt;/code&gt; statement. It displays one element from among several possible elements, based on a switch condition. Angular puts only the selected element into the DOM.</source>
          <target state="translated">NgSwitchはJavaScriptの &lt;code&gt;switch&lt;/code&gt; ステートメントに似ています。 スイッチ条件に基づいて、いくつかの可能な要素の中から1つの要素を表示します。 Angularは、選択された要素のみをDOMに配置します。</target>
        </trans-unit>
        <trans-unit id="489a9f825ab046358569d6f7ba386545da71ed2e" translate="yes">
          <source>NgSwitchCase</source>
          <target state="translated">NgSwitchCase</target>
        </trans-unit>
        <trans-unit id="2c6d09678694058cf231ebcbf7f5dbf708b69abe" translate="yes">
          <source>NgSwitchDefault</source>
          <target state="translated">NgSwitchDefault</target>
        </trans-unit>
        <trans-unit id="172dadbce868c96252d96cade7229e7bd5b8a58d" translate="yes">
          <source>NgTemplateOutlet</source>
          <target state="translated">NgTemplateOutlet</target>
        </trans-unit>
        <trans-unit id="d485146c2e39cc1a08c6b776692e4bf78a47870a" translate="yes">
          <source>NgZone</source>
          <target state="translated">NgZone</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="be9710b3ab6837da4f52eccc6e0f5d30d6cb9090" translate="yes">
          <source>No Angular &lt;em&gt;filter&lt;/em&gt; or &lt;em&gt;orderBy&lt;/em&gt; filters</source>
          <target state="translated">Angular&lt;em&gt;フィルター&lt;/em&gt;または&lt;em&gt;orderBy&lt;/em&gt;フィルターなし</target>
        </trans-unit>
        <trans-unit id="818604a049b51e447ca9452e0724b91621cdd14d" translate="yes">
          <source>No arrow functions</source>
          <target state="translated">矢印機能なし</target>
        </trans-unit>
        <trans-unit id="93fd1717bd078eecc13bf4593e2c07b31921ef32" translate="yes">
          <source>No brackets. No parentheses. Just &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; set to a string.</source>
          <target state="translated">括弧なし。 括弧なし。 ただ &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; を文字列に設定します。</target>
        </trans-unit>
        <trans-unit id="e0e6790b758e9ad2708594454268be14a1fb2e80" translate="yes">
          <source>No directive or component will implement all of the lifecycle hooks. Angular only calls a directive/component hook method &lt;em&gt;if it is defined&lt;/em&gt;.</source>
          <target state="translated">すべてのライフサイクルフックを実装するディレクティブやコンポーネントはありません。 Angularは、ディレクティブ/コンポーネントフックメソッド&lt;em&gt;が定義されて&lt;/em&gt;いる&lt;em&gt;場合に&lt;/em&gt;のみ呼び出します。</target>
        </trans-unit>
        <trans-unit id="19791c97515fc46a0f70d4d720439311b44e04dd" translate="yes">
          <source>No pipe</source>
          <target state="translated">パイプなし</target>
        </trans-unit>
        <trans-unit id="d01cbbaac61e63c969eafc5bea6f8bf228e6b366" translate="yes">
          <source>No preloading at all which is the default. Lazy loaded feature areas are still loaded on demand.</source>
          <target state="translated">デフォルトであるプリロードはまったくありません。 遅延ロードされた機能エリアは、引き続きオンデマンドでロードされます。</target>
        </trans-unit>
        <trans-unit id="016f7b6391a97aa02bddbd40845410a8c78ab7db" translate="yes">
          <source>No support for the bitwise operators such as &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; などのビットごとの演算子はサポートされていません および</target>
        </trans-unit>
        <trans-unit id="bd3e4268add64f72ae4ddbdf062a3d7555bc454b" translate="yes">
          <source>No unidirectional flow worries with &lt;code&gt;AfterContent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AfterContent&lt;/code&gt; による単方向フローの心配はありません</target>
        </trans-unit>
        <trans-unit id="a17d14eafac1937732100c20aae31c6593b0b98c" translate="yes">
          <source>No visible side effects</source>
          <target state="translated">目に見える副作用なし</target>
        </trans-unit>
        <trans-unit id="5587ffa9dbf62fd17a4559efe1a31d50d010d763" translate="yes">
          <source>No-op method to remove the form array.</source>
          <target state="translated">フォーム配列を削除するノーオペレーションメソッド。</target>
        </trans-unit>
        <trans-unit id="a462ef1cea806d3dcc1ea1738cd91a1aeedf0b36" translate="yes">
          <source>No-op method to remove the form group.</source>
          <target state="translated">フォームグループを削除する操作なしの方法。</target>
        </trans-unit>
        <trans-unit id="6a8da9a88f886e4153126f39d675bd3b766cccb9" translate="yes">
          <source>NoPreloading</source>
          <target state="translated">NoPreloading</target>
        </trans-unit>
        <trans-unit id="1710b1a221c7361f089e2a52fcf70b3fd33585f1" translate="yes">
          <source>Nobody reads the &lt;code&gt;appUnless&lt;/code&gt; property so it doesn't need a getter.</source>
          <target state="translated">誰も &lt;code&gt;appUnless&lt;/code&gt; プロパティを読み取らないため、ゲッターは必要ありません。</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="2e417e3eedf2707d935f79ec1cd1ef89ab55a380" translate="yes">
          <source>Non-Angular classes and objects, such as strings, numbers, functions, entity models, configurations, business logic, and helper classes</source>
          <target state="translated">文字列、数値、関数、エンティティモデル、構成、ビジネスロジック、ヘルパークラスなどの非Angularのクラスとオブジェクト</target>
        </trans-unit>
        <trans-unit id="218b9057d9cc78dd657173bed27a6200c0a95fae" translate="yes">
          <source>Non-Angular classes and objects, such as strings, numbers, functions, entity models, configurations, business logic, and helper classes.</source>
          <target state="translated">文字列、数値、関数、エンティティモデル、構成、ビジネスロジック、ヘルパークラスなどの非Angularのクラスとオブジェクト。</target>
        </trans-unit>
        <trans-unit id="cb4967cfbd4130cd4553ec35331b3a3ab44adc71" translate="yes">
          <source>Non-Angular elements named with dash case (&lt;code&gt;-&lt;/code&gt;).</source>
          <target state="translated">ダッシュケース（ &lt;code&gt;-&lt;/code&gt; ）で名前が付けられた非Angular要素。</target>
        </trans-unit>
        <trans-unit id="4b8e6a57d88b7ccf4c24e15e2a0995483d56359b" translate="yes">
          <source>Non-CSS style files</source>
          <target state="translated">非CSSスタイルファイル</target>
        </trans-unit>
        <trans-unit id="4341230c37df0f830ce3196200bdc4eaa8b1649d" translate="yes">
          <source>Non-class dependencies</source>
          <target state="translated">非クラスの依存関係</target>
        </trans-unit>
        <trans-unit id="ded852d4e83379796827d611754f95a7036735ee" translate="yes">
          <source>Non-declarable objects such as services, functions, configurations, and entity models.</source>
          <target state="translated">サービス、関数、構成、エンティティモデルなどの宣言不可能なオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8d47a7281ff53fb1a6797410ef0833cdc906ffa9" translate="yes">
          <source>Non-null type assertion operator</source>
          <target state="translated">非ヌル型のアサーション演算子</target>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="1d352db5f8dd17cd63b401e2ed0e9c468bffd2e7" translate="yes">
          <source>None of the &lt;em&gt;class-only&lt;/em&gt; tests above can answer key questions about how the components actually behave on screen.</source>
          <target state="translated">上記の&lt;em&gt;クラスのみの&lt;/em&gt;テストでは、コンポーネントが画面上で実際にどのように動作するかについての重要な質問に答えることはできません。</target>
        </trans-unit>
        <trans-unit id="a5b6d6e9ec12f5f8ee4edd54f85c6ad46277ecd8" translate="yes">
          <source>Nonetheless, it's good practice to add interfaces to TypeScript directive classes in order to benefit from strong typing and editor tooling.</source>
          <target state="translated">それにもかかわらず、強力なタイピングとエディターツールの恩恵を受けるために、TypeScriptディレクティブクラスにインターフェイスを追加することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="736b4cd6b71b8bdb48cb01730dfaee48e2392e16" translate="yes">
          <source>NoopAnimationPlayer</source>
          <target state="translated">NoopAnimationPlayer</target>
        </trans-unit>
        <trans-unit id="70f82949d3496e317e02bfe915266dc2dded0fe7" translate="yes">
          <source>NoopAnimationsModule</source>
          <target state="translated">NoopAnimationsModule</target>
        </trans-unit>
        <trans-unit id="12561ae2fb444110d629b1206986eb95f41f11a1" translate="yes">
          <source>Normalizes URL parameters by prepending with &lt;code&gt;?&lt;/code&gt; if needed.</source>
          <target state="translated">&lt;code&gt;?&lt;/code&gt; 前に付けてURLパラメーターを正規化します 必要に応じて。</target>
        </trans-unit>
        <trans-unit id="ade4e4610aadfb20b6f050681409585d91cbef29" translate="yes">
          <source>Normalizes a URL path by stripping any trailing slashes.</source>
          <target state="translated">末尾のスラッシュを削除して、URLパスを正規化します。</target>
        </trans-unit>
        <trans-unit id="18495c5e726b97b87446a944fb49811a2e5920ab" translate="yes">
          <source>Normalizes an external URL path. If the given URL doesn't begin with a leading slash (&lt;code&gt;'/'&lt;/code&gt;), adds one before normalizing. Adds a hash if &lt;code&gt;&lt;a href=&quot;hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; is in use, or the &lt;code&gt;&lt;a href=&quot;app_base_href&quot;&gt;APP_BASE_HREF&lt;/a&gt;&lt;/code&gt; if the &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; is in use.</source>
          <target state="translated">外部URLパスを正規化します。 指定されたURLが先頭のスラッシュ（ &lt;code&gt;'/'&lt;/code&gt; ）で始まらない場合、正規化する前に1つ追加します。 &lt;code&gt;&lt;a href=&quot;hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; が使用中の場合はハッシュを追加し、 PathLocationStrategyが使用中の場合はAPP_BASE_HREFを追加します。</target>
        </trans-unit>
        <trans-unit id="678371611e9955b829a518950afa7eca6ce63f39" translate="yes">
          <source>Normalizes the URL from the provided string</source>
          <target state="translated">指定された文字列からURLを正規化します</target>
        </trans-unit>
        <trans-unit id="2e3d0802a56f44230e6b62bf9349e52129f8767b" translate="yes">
          <source>Normalizes the URL from the provided string, search, hash, and base URL parameters</source>
          <target state="translated">指定された文字列、検索、ハッシュ、およびベースURLパラメーターからURLを正規化します</target>
        </trans-unit>
        <trans-unit id="a1eeaaf174120ccf4a2abdf3240f1954f256c7d7" translate="yes">
          <source>Normalizes the URL path for this location.</source>
          <target state="translated">この場所のURLパスを正規化します。</target>
        </trans-unit>
        <trans-unit id="3d018be8074135d14814ec6947f77060d77bf92a" translate="yes">
          <source>Normalizes the given path and compares to the current normalized path.</source>
          <target state="translated">指定されたパスを正規化し、現在の正規化されたパスと比較します。</target>
        </trans-unit>
        <trans-unit id="fe5c4e0c718a72401fd1df547a30a83f706b43e1" translate="yes">
          <source>Normally the starting point for search is at the point of injection. However, in this case &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;s are special in that they also include their own &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt;, which is why the search starts at &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; belonging to &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt;. (This would not be the case for a directive matched at the same location).</source>
          <target state="translated">通常、検索の開始点は注入点です。 ただし、この場合、 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; は、独自の &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; も含むという点で特別です。そのため、 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; に属する &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; で検索が開始されます。 （これは、同じ場所で一致したディレクティブの場合ではありません）。</target>
        </trans-unit>
        <trans-unit id="cd9f6de0a5276d4f18217b8f9147f1ef687011bc" translate="yes">
          <source>Normally, Angular automatically sanitizes the URL, disables the dangerous code, and in development mode, logs this action to the console. To prevent this, mark the URL value as a trusted URL using the &lt;code&gt;bypassSecurityTrustUrl&lt;/code&gt; call:</source>
          <target state="translated">通常、Angularは自動的にURLをサニタイズし、危険なコードを無効にし、開発モードではこのアクションをコンソールに記録します。 これを防ぐには、 &lt;code&gt;bypassSecurityTrustUrl&lt;/code&gt; 呼び出しを使用して、URL値を信頼できるURLとしてマークします。</target>
        </trans-unit>
        <trans-unit id="389d7bbe04b98e76d49e7b50a7e6d1c1c26ed9fb" translate="yes">
          <source>Norwegian Bokm&amp;aring;l</source>
          <target state="translated">ノルウェー語ブークモール</target>
        </trans-unit>
        <trans-unit id="253ffb44e9d7dbc97a80decedaf0ffe8b9751cee" translate="yes">
          <source>Not a number. Example: NaN</source>
          <target state="translated">数ではありません。 例：NaN</target>
        </trans-unit>
        <trans-unit id="c6e0e3f4d0bcc4a8a0945c4e32515b50d6f90e4a" translate="yes">
          <source>Not all APIs return JSON data. In this next example, a &lt;code&gt;DownloaderService&lt;/code&gt; method reads a text file from the server and logs the file contents, before returning those contents to the caller as an &lt;code&gt;Observable&amp;lt;string&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">すべてのAPIがJSONデータを返すわけではありません。 次の例では、 &lt;code&gt;DownloaderService&lt;/code&gt; メソッドがサーバーからテキストファイルを読み取り、ファイルの内容をログに記録してから、それらの内容を &lt;code&gt;Observable&amp;lt;string&amp;gt;&lt;/code&gt; として呼び出し元に返します。</target>
        </trans-unit>
        <trans-unit id="777b939bfaa3119dd1cc037b06134232b6fd79ee" translate="yes">
          <source>Not all browsers support the latest ECMAScript standard, but you can use a &lt;a href=&quot;glossary#transpile&quot;&gt;transpiler&lt;/a&gt; (like &lt;a href=&quot;glossary#typescript&quot;&gt;TypeScript&lt;/a&gt;) to write code using the latest features, which will then be transpiled to code that runs on versions that are supported by browsers.</source>
          <target state="translated">すべてのブラウザーが最新のECMAScript標準をサポートしているわけではありませんが、 &lt;a href=&quot;glossary#transpile&quot;&gt;トランスパイラー&lt;/a&gt; （ &lt;a href=&quot;glossary#typescript&quot;&gt;TypeScriptなど&lt;/a&gt; ）を使用して、ブラウザーでサポートされているバージョンで実行されるコードに変換される最新の機能を使用してコードを記述することができます。</target>
        </trans-unit>
        <trans-unit id="fa81708719f13e6a91ca9e3a6b7fc812211ec4fd" translate="yes">
          <source>Not all dependencies are classes. Sometimes you want to inject a string, function, or object.</source>
          <target state="translated">すべての依存関係がクラスであるわけではありません。 文字列、関数、またはオブジェクトを挿入したい場合があります。</target>
        </trans-unit>
        <trans-unit id="4b22c361d6175142654cd9ef350fb28ba6d01cdc" translate="yes">
          <source>Not all kinds of AngularJS directives can be upgraded. The directive really has to be a &lt;em&gt;component directive&lt;/em&gt;, with the characteristics &lt;a href=&quot;upgrade#using-component-directives&quot;&gt;described in the preparation guide above&lt;/a&gt;. The safest bet for ensuring compatibility is using the &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;component API&lt;/a&gt; introduced in AngularJS 1.5.</source>
          <target state="translated">すべての種類のAngularJSディレクティブをアップグレードできるわけではありません。 ディレクティブは本当に&lt;em&gt;コンポーネントディレクティブ&lt;/em&gt;でなければなりません、 &lt;a href=&quot;upgrade#using-component-directives&quot;&gt;上の準備ガイドで説明された&lt;/a&gt;特性で。 互換性を確保するための最も安全な方法は、AngularJS 1.5で導入された&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;コンポーネントAPI&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="0e26062ec2eb9351d044478dea4c629208506235" translate="yes">
          <source>Not impressed? Think about it for a moment. What would you have to do to wire the button's enable/disabled state to the form's validity without Angular's help?</source>
          <target state="translated">感心しません？ 少し考えてみてください。 Angularの助けを借りずに、ボタンの有効/無効状態をフォームの有効性にワイヤリングするには、何をしなければなりませんか？</target>
        </trans-unit>
        <trans-unit id="db247da90a20bc16a7bf2b86e5130f25cc599a75" translate="yes">
          <source>Not part of public API.</source>
          <target state="translated">パブリックAPIの一部ではありません。</target>
        </trans-unit>
        <trans-unit id="6c418c4740b6cfe7654ca9d7efbe5548bc96337a" translate="yes">
          <source>Note also that this Observable runs outside of the Angular zone, which means that the code in the subscription to this Observable will not trigger the change detection.</source>
          <target state="translated">また、このObservableはAngularゾーンの外側で実行されることに注意してください。つまり、このObservableのサブスクリプション内のコードは変更検出をトリガーしません。</target>
        </trans-unit>
        <trans-unit id="08223ff3b23c6a47e3a0ef6e2e8ac775f3d44a6a" translate="yes">
          <source>Note how &lt;code&gt;sendRequest&lt;/code&gt;&lt;em&gt;intercepts the response&lt;/em&gt; on its way back to the application. It &lt;em&gt;pipes&lt;/em&gt; the response through the &lt;code&gt;tap()&lt;/code&gt; operator, whose callback adds the response to the cache.</source>
          <target state="translated">&lt;code&gt;sendRequest&lt;/code&gt; は、アプリケーションに戻る途中で&lt;em&gt;応答&lt;/em&gt;を&lt;em&gt;インターセプトする&lt;/em&gt;方法に注意してください。 コールバックをキャッシュに追加するコールバックの &lt;code&gt;tap()&lt;/code&gt; 演算子を介して応答を&lt;em&gt;パイプ&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="aeec8e9f93a274d7472bacdd358a15a6916f1341" translate="yes">
          <source>Note how the &lt;code&gt;linenums&lt;/code&gt; attribute in the &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; explicitly enables numbering for all panes. The &lt;code&gt;linenums&lt;/code&gt; attribute in the second pane disables line numbering for &lt;em&gt;itself only&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; の &lt;code&gt;linenums&lt;/code&gt; 属性がすべてのペインの番号付けを明示的に有効にする方法に注意してください。 2番目のペインの &lt;code&gt;linenums&lt;/code&gt; 属性は、 &lt;em&gt;それ自体の&lt;/em&gt;行番号&lt;em&gt;のみを&lt;/em&gt;無効にします。</target>
        </trans-unit>
        <trans-unit id="c152807d6c8f8e4db411c5cb24fabab3f316cbed" translate="yes">
          <source>Note how the setup code assigns a test hero (&lt;code&gt;expectedHero&lt;/code&gt;) to the component's &lt;code&gt;hero&lt;/code&gt; property, emulating the way the &lt;code&gt;DashboardComponent&lt;/code&gt; would set it via the property binding in its repeater.</source>
          <target state="translated">セットアップコードがテストヒーロー（ &lt;code&gt;expectedHero&lt;/code&gt; ）をコンポーネントの &lt;code&gt;hero&lt;/code&gt; プロパティに割り当て、 &lt;code&gt;DashboardComponent&lt;/code&gt; コンポーネントがリピーターのプロパティバインディングを介して設定する方法をエミュレートする方法に注意してください。</target>
        </trans-unit>
        <trans-unit id="a281167ca6f3f3d6ce6cf851b7d39c49313bd017" translate="yes">
          <source>Note on performance</source>
          <target state="translated">パフォーマンスに関する注意</target>
        </trans-unit>
        <trans-unit id="1ecc6c31ae894d6c11152c8fe4320e22dd9e10d1" translate="yes">
          <source>Note that &lt;code&gt;AppModule&lt;/code&gt; declares both application components, &lt;code&gt;AppComponent&lt;/code&gt; and &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; は &lt;code&gt;AppComponent&lt;/code&gt; と &lt;code&gt;HeroesComponent&lt;/code&gt; の両方のアプリケーションコンポーネントを宣言することに注意してください。</target>
        </trans-unit>
        <trans-unit id="23b7e3ea6da8cd0785f61b0a58466e85e03fb3e9" translate="yes">
          <source>Note that &lt;code&gt;history.state&lt;/code&gt; does not pass an object equality test because the router adds the &lt;code&gt;navigationId&lt;/code&gt; on each navigation.</source>
          <target state="translated">ルーターは各ナビゲーションに &lt;code&gt;navigationId&lt;/code&gt; を追加するため、 &lt;code&gt;history.state&lt;/code&gt; はオブジェクト等価テストに合格しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="371ce977d55087713aef1e408da4250d837a2de7" translate="yes">
          <source>Note that a &lt;code&gt;next()&lt;/code&gt; function could receive, for instance, message strings, or event objects, numeric values, or structures, depending on context. As a general term, we refer to data published by an observable as a &lt;em&gt;stream&lt;/em&gt;. Any type of value can be represented with an observable, and the values are published as a stream.</source>
          <target state="translated">&lt;code&gt;next()&lt;/code&gt; 関数は、コンテキストに応じて、たとえばメッセージ文字列、イベントオブジェクト、数値、または構造体を受け取ることができます。 一般的な用語として、オブザーバブルによって発行されたデータを&lt;em&gt;ストリーム&lt;/em&gt;と呼び&lt;em&gt;ます&lt;/em&gt; 。 任意のタイプの値をオブザーバブルで表すことができ、値はストリームとして公開されます。</target>
        </trans-unit>
        <trans-unit id="c91511586f712ff71725e5f19eb4c2db2e15c2c8" translate="yes">
          <source>Note that a &lt;em&gt;style property&lt;/em&gt; name can be written in either &lt;a href=&quot;glossary#dash-case&quot;&gt;dash-case&lt;/a&gt;, as shown above, or &lt;a href=&quot;glossary#camelcase&quot;&gt;camelCase&lt;/a&gt;, such as &lt;code&gt;fontSize&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;スタイルプロパティ&lt;/em&gt;名は、上記のように&lt;a href=&quot;glossary#dash-case&quot;&gt;dash-case&lt;/a&gt;または &lt;code&gt;fontSize&lt;/code&gt; などの&lt;a href=&quot;glossary#camelcase&quot;&gt;camelCaseで記述&lt;/a&gt;できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2e816deca44793ddded333f88d02c4f0e6a2a7b2" translate="yes">
          <source>Note that an empty path route inherits its parent's parameters and data.</source>
          <target state="translated">空のパスルートは、その親のパラメーターとデータを継承することに注意してください。</target>
        </trans-unit>
        <trans-unit id="4f8d89dfcf5854efbd42160b602988ec718c432b" translate="yes">
          <source>Note that at least one blank line must follow both the opening and closing &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags. A blank line before the closing &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; is customary but not required.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; タグの開始タグと終了タグの両方の後に、少なくとも1行の空白行が続く必要があることに注意してください。 終了 &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 前の空白行は慣例ですが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="9b626f4af6531e5f4974b843b016802cb9727623" translate="yes">
          <source>Note that canceling a previous &lt;code&gt;searchHeroes()&lt;/code&gt; Observable doesn't actually abort a pending HTTP request. Unwanted results are simply discarded before they reach your application code.</source>
          <target state="translated">以前の &lt;code&gt;searchHeroes()&lt;/code&gt; Observableをキャンセルしても、保留中のHTTP要求は実際には中止されないことに注意してください。 不要な結果は、アプリケーションコードに到達する前に単に破棄されます。</target>
        </trans-unit>
        <trans-unit id="f7658c270146f742e3ed9bf3731556300413061f" translate="yes">
          <source>Note that even though you are in an AngularJS template, &lt;strong&gt;you're using Angular attribute syntax to bind the inputs and outputs&lt;/strong&gt;. This is a requirement for downgraded components. The expressions themselves are still regular AngularJS expressions.</source>
          <target state="translated">AngularJSテンプレート&lt;strong&gt;を使用&lt;/strong&gt;している場合でも、 &lt;strong&gt;Angular属性構文を使用して入力と出力をバインド&lt;/strong&gt;していることに注意してください。 これは、ダウングレードされたコンポーネントの要件です。 式自体は、まだ通常のAngularJS式です。</target>
        </trans-unit>
        <trans-unit id="17b350c0decc0b8e8ef8ad4265e3e25f8978757d" translate="yes">
          <source>Note that following two providers are not equal:</source>
          <target state="translated">次の2つのプロバイダーは等しくないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c9e8240c7cf8f7e89866ec2b04033f2ee8c17466" translate="yes">
          <source>Note that if you edit the proxy configuration file, you must relaunch the &lt;code&gt;ng serve&lt;/code&gt; process to make your changes effective.</source>
          <target state="translated">プロキシ構成ファイルを編集する場合、 &lt;code&gt;ng serve&lt;/code&gt; プロセスを再起動して、変更を有効にする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ff8a845004bcc17b79e75f4722a9a47d76c32c9e" translate="yes">
          <source>Note that just as a form group contains a group of controls, the &lt;em&gt;profile form&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; is bound to the &lt;code&gt;form&lt;/code&gt; element with the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; directive, creating a communication layer between the model and the form containing the inputs. The &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; input provided by the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; directive binds each individual input to the form control defined in &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. The form controls communicate with their respective elements. They also communicate changes to the form group instance, which provides the source of truth for the model value.</source>
          <target state="translated">フォームグループにコントロールのグループが含まれるのと同様に、 &lt;em&gt;プロファイルフォーム&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; ディレクティブで &lt;code&gt;form&lt;/code&gt; 要素にバインドされ、モデルと入力を含むフォームの間に通信レイヤーが作成されることに注意してください 。 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;FormControlName&lt;/a&gt;&lt;/code&gt; ディレクティブによって提供される &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 入力は、個々の入力を &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; で定義されたフォームコントロールにバインドします。 フォームコントロールは、それぞれの要素と通信します。 また、フォームグループインスタンスへの変更を通知します。これは、モデル値の真実のソースを提供します。</target>
        </trans-unit>
        <trans-unit id="bb4d1a4548c7df19999e19b754abea2e55c5b7a1" translate="yes">
          <source>Note that libraries are intended to be used by Angular apps. To add Angular functionality to non-Angular web apps, you can use &lt;a href=&quot;elements&quot;&gt;Angular custom elements&lt;/a&gt;.</source>
          <target state="translated">ライブラリは、Angularアプリで使用されることを意図していることに注意してください。 Angular機能を非AngularWebアプリに追加するには、 &lt;a href=&quot;elements&quot;&gt;Angularカスタム要素を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="7ffe0242b2ab4216014a3cdb02468b566ba763c0" translate="yes">
          <source>Note that sequences of &lt;code&gt;&amp;amp;ngsp;&lt;/code&gt; are still collapsed to just one space character when the &lt;code&gt;&lt;a href=&quot;component#preserveWhitespaces&quot;&gt;preserveWhitespaces&lt;/a&gt;&lt;/code&gt; option is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;ngsp;&lt;/code&gt; シーケンスに注意してください。 &lt;code&gt;&lt;a href=&quot;component#preserveWhitespaces&quot;&gt;preserveWhitespaces&lt;/a&gt;&lt;/code&gt; オプションが &lt;code&gt;false&lt;/code&gt; に設定されている場合、まだ1つのスペース文字に折りたたまれています 。</target>
        </trans-unit>
        <trans-unit id="351b13372de295a6f697a0c13c719516a9c8ad6d" translate="yes">
          <source>Note that the &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt;&lt;em&gt;options&lt;/em&gt; value is a String that identifies the single data type of the response. A single overload version of the method handles each response type. The value of &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; cannot be a union, as the combined signature could imply.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; &lt;em&gt;オプションの&lt;/em&gt;値は、 応答の単一のデータ型を識別する文字列であることに注意してください。 メソッドの単一のオーバーロードバージョンが各応答タイプを処理します。 &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; の値は、結合された署名が暗示する可能性があるため、ユニオンにはできません。</target>
        </trans-unit>
        <trans-unit id="ff72644092676c60c465ebbeff0102fd3d910a95" translate="yes">
          <source>Note that the &lt;code&gt;it()&lt;/code&gt; function receives an argument of the following form.</source>
          <target state="translated">&lt;code&gt;it()&lt;/code&gt; 関数は、次の形式の引数を受け取ることに注意してください。</target>
        </trans-unit>
        <trans-unit id="34c69b110792ba8e5360583e38093c34f592ed9f" translate="yes">
          <source>Note that the &lt;code&gt;ngDirectiveDef&lt;/code&gt; property's code is switched depending if VE is present or not (this allows for the binding code to be set only for newer versions of Angular).</source>
          <target state="translated">&lt;code&gt;ngDirectiveDef&lt;/code&gt; プロパティのコードは、VEが存在するかどうかに応じて切り替えられることに注意してください（これにより、Angularの新しいバージョンにのみバインディングコードを設定できます）。</target>
        </trans-unit>
        <trans-unit id="3eada5ddfb3fe75b9f5c78a68d447fd421206301" translate="yes">
          <source>Note that the &lt;code&gt;notification&lt;/code&gt; property does &lt;strong&gt;not&lt;/strong&gt; contain a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification&quot;&gt;Notification&lt;/a&gt; object but rather a &lt;a href=&quot;https://notifications.spec.whatwg.org/#dictdef-notificationoptions&quot;&gt;NotificationOptions&lt;/a&gt; object that also includes the &lt;code&gt;title&lt;/code&gt; of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification&quot;&gt;Notification&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;notification&lt;/code&gt; プロパティには&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification&quot;&gt;Notification&lt;/a&gt;オブジェクトが含まれ&lt;strong&gt;ず&lt;/strong&gt; 、 Notificationオブジェクトの &lt;code&gt;title&lt;/code&gt; も含むNotificationOptionsオブジェクトが含まれることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a04c213fee3ffca8a5d0f569f12ebd7f77b67863" translate="yes">
          <source>Note that the &lt;code&gt;projects&lt;/code&gt; section of the configuration file does not correspond exactly to the workspace file structure.</source>
          <target state="translated">構成ファイルの &lt;code&gt;projects&lt;/code&gt; セクションは、ワークスペースファイルの構造と正確に対応していないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6989a436d4daeec411945fd1ba3b22481eeefaaa" translate="yes">
          <source>Note that the &lt;code&gt;send()&lt;/code&gt; method simulates latency by waiting a second before &quot;sending&quot; the message and closing the popup.</source>
          <target state="translated">&lt;code&gt;send()&lt;/code&gt; メソッドは、メッセージを「送信」してポップアップを閉じる前に1秒待機することにより、待ち時間をシミュレートすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cda08a86a9d72586f755e0d251c62fa6f93164fc" translate="yes">
          <source>Note that the &lt;em&gt;Submit&lt;/em&gt; button is disabled, and the &quot;required&quot; bar to the left of the input control changes from green to red.</source>
          <target state="translated">[ &lt;em&gt;送信&lt;/em&gt; ]ボタンが無効になり、入力コントロールの左側の[必須]バーが緑から赤に変わることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ece94366823fee671395805609d6a79af7a6a2da" translate="yes">
          <source>Note that the code referenced on these pages is available as a live example.</source>
          <target state="translated">これらのページで参照されているコードは、実際の例として利用できます。</target>
        </trans-unit>
        <trans-unit id="ef3cdbe1eac1af4f319fa3cd4702af2572876e7f" translate="yes">
          <source>Note that the translation unit &lt;code&gt;id=introductionHeader&lt;/code&gt; is derived from the &lt;a href=&quot;i18n#custom-id&quot;&gt;custom &lt;code&gt;id&lt;/code&gt;&lt;/a&gt; that you set earlier, but without the &lt;code&gt;@@&lt;/code&gt; prefix required in the source HTML.</source>
          <target state="translated">翻訳単位 &lt;code&gt;id=introductionHeader&lt;/code&gt; は、以前に設定した&lt;a href=&quot;i18n#custom-id&quot;&gt;カスタム &lt;code&gt;id&lt;/code&gt; &lt;/a&gt;から派生しますが、ソースHTMLには &lt;code&gt;@@&lt;/code&gt; プレフィックスは必要ありません。</target>
        </trans-unit>
        <trans-unit id="d9dec383a5fa4e7e3d1bde69011b0bab8664efb1" translate="yes">
          <source>Note that the value of the component's &lt;code&gt;quote&lt;/code&gt; property passes through an &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt;. That means the property returns either a &lt;code&gt;Promise&lt;/code&gt; or an &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">コンポーネントの &lt;code&gt;quote&lt;/code&gt; プロパティの値は &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; を通過することに注意してください。 つまり、プロパティは &lt;code&gt;Promise&lt;/code&gt; または &lt;code&gt;Observable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8af192be64614a476062c8741e1ff62807509a16" translate="yes">
          <source>Note that these transformations can influence DOM nodes layout, although impact should be minimal.</source>
          <target state="translated">これらの変換はDOMノードのレイアウトに影響を与える可能性がありますが、影響は最小限である必要があります。</target>
        </trans-unit>
        <trans-unit id="08e64abef6e8f8eb83708761218250d9e7c3a3ec" translate="yes">
          <source>Note that this AngularJS is an element directive (&lt;code&gt;restrict: 'E'&lt;/code&gt;) called &lt;code&gt;heroDetail&lt;/code&gt;. An AngularJS element directive is matched based on its &lt;em&gt;name&lt;/em&gt;. &lt;em&gt;The &lt;code&gt;selector&lt;/code&gt; metadata of the downgraded Angular component is ignored.&lt;/em&gt;</source>
          <target state="translated">このAngularJSは &lt;code&gt;heroDetail&lt;/code&gt; と呼ばれる要素ディレクティブ（ &lt;code&gt;restrict: 'E'&lt;/code&gt; ）であることに注意してください。 AngularJS要素ディレクティブは、その&lt;em&gt;名前に&lt;/em&gt;基づいて照合されます。 &lt;em&gt;ダウングレードされたAngularコンポーネントの &lt;code&gt;selector&lt;/code&gt; メタデータは無視されます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8395a5810b920638cc768b89d9fffa47ac18586" translate="yes">
          <source>Note that this example doesn't need to use &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この例では &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; を使用する必要がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="421e165c199e48890baa747e72133bfe28cb9468" translate="yes">
          <source>Note that this feature is designed to be used with &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; and it will only work with animations that are assigned using the Angular animation library. CSS keyframes and transitions are not handled by this API.</source>
          <target state="translated">この機能は &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 使用するように設計されており、Angularアニメーションライブラリを使用して割り当てられたアニメーションでのみ機能することに注意してください。 CSSキーフレームと遷移は、このAPIによって処理されません。</target>
        </trans-unit>
        <trans-unit id="91d89d44f2b80821dee75ead449fb42cd0120b82" translate="yes">
          <source>Note that this is true for any kind of polling done by your application. Check the &lt;a href=&quot;../api/core/applicationref#isStable&quot;&gt;isStable&lt;/a&gt; documentation for more information.</source>
          <target state="translated">これは、アプリケーションによって行われるあらゆる種類のポーリングに当てはまることに注意してください。 詳細については、 &lt;a href=&quot;../api/core/applicationref#isStable&quot;&gt;isStableの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d6bb4ab06dccbc865c75f8c110a1f644eead5884" translate="yes">
          <source>Note that this syntax is only necessary for attribute &lt;em&gt;bindings&lt;/em&gt;. Static ARIA attributes require no extra syntax.</source>
          <target state="translated">この構文は属性&lt;em&gt;バインディングに&lt;/em&gt;のみ必要であることに注意してください。 静的ARIA属性には追加の構文は必要ありません。</target>
        </trans-unit>
        <trans-unit id="ec12aa6967ca02e1c10b021742d62a604dd21e02" translate="yes">
          <source>Note that timezone correction is not applied to an ISO string that has no time component, such as &quot;2016-09-19&quot;</source>
          <target state="translated">タイムゾーン補正は、「2016-09-19」などの時間コンポーネントを持たないISO文字列には適用されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c830565880b49e4eeb62db7c303088ac3a720c20" translate="yes">
          <source>Note that we check if:</source>
          <target state="translated">以下をチェックすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1ef5d74df63ffb44b460059539d2472fd656e4d3" translate="yes">
          <source>Note that we must do the following:</source>
          <target state="translated">以下を実行する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6fd7daeb5d32df96dc1e97e8776e1f8a9ef86814" translate="yes">
          <source>Note that when you call the &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; function within a &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; or a &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call, execution does not continue to the next instruction until each of the inner animation steps have completed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 呼び出し内で &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 関数を呼び出す場合、各内部アニメーションステップが完了するまで、実行は次の命令に継続しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="be893394cee0a145ef756f47231d1847f588f89f" translate="yes">
          <source>Note that you are bootstrapping the AngularJS module from inside &lt;code&gt;ngDoBootstrap&lt;/code&gt;. The arguments are the same as you would pass to &lt;code&gt;angular.bootstrap&lt;/code&gt; if you were manually bootstrapping AngularJS: the root element of the application; and an array of the AngularJS 1.x modules that you want to load.</source>
          <target state="translated">&lt;code&gt;ngDoBootstrap&lt;/code&gt; 内からAngularJSモジュールをブートストラップしていることに注意してください。 引数は、AngularJSを手動でブートストラップした場合、 &lt;code&gt;angular.bootstrap&lt;/code&gt; に渡すのと同じです。アプリケーションのルート要素。 そして、ロードしたいAngularJS 1.xモジュールの配列。</target>
        </trans-unit>
        <trans-unit id="cf695c0a43431597310e3a096780bdf1a25a0a2a" translate="yes">
          <source>Note that you do not add a &lt;code&gt;bootstrap&lt;/code&gt; declaration to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator, since AngularJS will own the root template of the application.</source>
          <target state="translated">AngularJSはアプリケーションのルートテンプレートを所有するため、 &lt;code&gt;bootstrap&lt;/code&gt; 宣言を &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターに追加しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="adb0b88be476a8167b20fa7f79cb326e9c071ed0" translate="yes">
          <source>Note that you generally don't wrap a floating image in a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">通常、フローティング画像を &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; 要素でラップしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4a8f294ffa6daaf2b5c139214569f54000eef3b3" translate="yes">
          <source>Note that you will also need to add any styles or scripts to the &lt;code&gt;test&lt;/code&gt; builder if you need them for unit tests. See also &lt;a href=&quot;using-libraries#using-runtime-global-libraries-inside-your-app&quot;&gt;Using runtime-global libraries inside your app&lt;/a&gt;.</source>
          <target state="translated">ユニットテストに必要な場合は、 &lt;code&gt;test&lt;/code&gt; ビルダーにスタイルまたはスクリプトを追加する必要があることに注意してください。 &lt;a href=&quot;using-libraries#using-runtime-global-libraries-inside-your-app&quot;&gt;アプリ内でのランタイムグローバルライブラリの使用&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1c018b75d4dd18f6059b6d8161aef4013d7ce967" translate="yes">
          <source>Note that, for Angular apps, we prefer combining operators with pipes, rather than chaining. Chaining is used in many RxJS examples.</source>
          <target state="translated">Angularアプリの場合、チェーンではなく、演算子をパイプと組み合わせるほうが好ましいことに注意してください。 チェーンは、多くのRxJSの例で使用されています。</target>
        </trans-unit>
        <trans-unit id="4b45d8a6390f37dc310a52b481d3394cf640e928" translate="yes">
          <source>Note that, in addition to these options for configuring a directive, you can control a component's runtime behavior by implementing life-cycle hooks. For more information, see the &lt;a href=&quot;../../guide/lifecycle-hooks&quot;&gt;Lifecycle Hooks&lt;/a&gt; guide.</source>
          <target state="translated">ディレクティブを設定するためのこれらのオプションに加えて、ライフサイクルフックを実装することにより、コンポーネントの実行時の動作を制御できることに注意してください。 詳細については、 &lt;a href=&quot;../../guide/lifecycle-hooks&quot;&gt;ライフサイクルフック&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="285f98e8d01e4962eff6724b78a3c6724d0931e6" translate="yes">
          <source>Note that:</source>
          <target state="translated">ご了承ください：</target>
        </trans-unit>
        <trans-unit id="79ec0a3a3410a9394d865a734738613b13696ade" translate="yes">
          <source>Note the &lt;code&gt;multi: true&lt;/code&gt; option. This required setting tells Angular that &lt;code&gt;&lt;a href=&quot;../api/common/http/http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; is a token for a &lt;em&gt;multiprovider&lt;/em&gt; that injects an array of values, rather than a single value.</source>
          <target state="translated">&lt;code&gt;multi: true&lt;/code&gt; オプションに注意してください。 この必須設定は、 &lt;code&gt;&lt;a href=&quot;../api/common/http/http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; が単一の値ではなく、値の配列を注入する&lt;em&gt;マルチ&lt;/em&gt; プロバイダーのトークンであることをAngularに伝えます。</target>
        </trans-unit>
        <trans-unit id="d6b7cf1b943cb4ca234f1fab970190b16a27ac91" translate="yes">
          <source>Note the backticks ( ` ) that define a JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;&lt;em&gt;template literal&lt;/em&gt;&lt;/a&gt; for embedding the &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; を埋め込むためのJavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;&lt;em&gt;テンプレートリテラル&lt;/em&gt;&lt;/a&gt;を定義するバックティック（ `）に注意してください。</target>
        </trans-unit>
        <trans-unit id="48705657f490f3c04c65c3eeda89c8bf0e4d4e85" translate="yes">
          <source>Note the following key points:</source>
          <target state="translated">次の重要な点に注意してください。</target>
        </trans-unit>
        <trans-unit id="20d78a8e421517dfc8501178399cb2a435e63306" translate="yes">
          <source>Note the following:</source>
          <target state="translated">次のことに注意してください。</target>
        </trans-unit>
        <trans-unit id="dab531dc7a8ff3633c010ee3956d7a697965ef13" translate="yes">
          <source>Note two important points about &lt;code&gt;isStable&lt;/code&gt;, demonstrated in the examples below:</source>
          <target state="translated">以下の例で示されている &lt;code&gt;isStable&lt;/code&gt; に関する2つの重要な点に注意してください。</target>
        </trans-unit>
        <trans-unit id="06abd960aeb0fb638122d836dc3ba0400f8fc4fe" translate="yes">
          <source>Note, adding try-finally block around the work to ensure that &lt;code&gt;&lt;a href=&quot;wtfleave&quot;&gt;wtfLeave&lt;/a&gt;&lt;/code&gt; gets called can negatively impact the performance of your application. For this reason we recommend that you don't add them to ensure that &lt;code&gt;&lt;a href=&quot;wtfleave&quot;&gt;wtfLeave&lt;/a&gt;&lt;/code&gt; gets called. In production &lt;code&gt;&lt;a href=&quot;wtfleave&quot;&gt;wtfLeave&lt;/a&gt;&lt;/code&gt; is a noop and so try-finally block has no value. When debugging perf issues, skipping &lt;code&gt;&lt;a href=&quot;wtfleave&quot;&gt;wtfLeave&lt;/a&gt;&lt;/code&gt;, do to exception, will produce incorrect trace, but presence of exception signifies logic error which needs to be fixed before the app should be profiled. Add try-finally only when you expect that an exception is expected during normal execution while profiling.</source>
          <target state="translated">作業の前後にtry-finallyブロックを追加して、 &lt;code&gt;&lt;a href=&quot;wtfleave&quot;&gt;wtfLeave&lt;/a&gt;&lt;/code&gt; が呼び出されるようにすると、アプリケーションのパフォーマンスに悪影響が及ぶ可能性があることに注意してください。 このため、 &lt;code&gt;&lt;a href=&quot;wtfleave&quot;&gt;wtfLeave&lt;/a&gt;&lt;/code&gt; が確実に呼び出されるように追加しないことをお勧めします。 実 &lt;code&gt;&lt;a href=&quot;wtfleave&quot;&gt;wtfLeave&lt;/a&gt;&lt;/code&gt; は、 wtfLeaveは操作されないため、try-finallyブロックには値がありません。 perfの問題をデバッグするときに、 &lt;code&gt;&lt;a href=&quot;wtfleave&quot;&gt;wtfLeave&lt;/a&gt;&lt;/code&gt; をスキップして例外を実行すると、不正なトレースが生成されますが、例外の存在は、アプリのプロファイルを作成する前に修正する必要がある論理エラーを示します。 プロファイリング中の通常の実行中に例外が予想される場合にのみ、try-finallyを追加します。</target>
        </trans-unit>
        <trans-unit id="eb68d0df1914477a443a6cf208a67f3509b99949" translate="yes">
          <source>Note: Angular API and CLI reference docs are generated from source code and/or related source files, which may have other markup styles and other ways of including code examples.</source>
          <target state="translated">注：Angular APIおよびCLIリファレンスドキュメントは、ソースコードおよび/または関連するソースファイルから生成されます。これらのソースファイルには、他のマークアップスタイルや、コード例を含める他の方法があります。</target>
        </trans-unit>
        <trans-unit id="ff636c630822e543aff0ab34cf9b6830952f048c" translate="yes">
          <source>Note: Document might not be available in the Application Context when Application and Rendering Contexts are not the same (e.g. when running the application in a Web Worker).</source>
          <target state="translated">注：アプリケーションコンテキストとレンダリングコンテキストが同じでない場合（Webワーカーでアプリケーションを実行する場合など）、アプリケーションコンテキストでドキュメントを使用できない場合があります。</target>
        </trans-unit>
        <trans-unit id="8bd8b1cd4fae0cc49dd6a27ba7f0ab23bbc6b08a" translate="yes">
          <source>Note: This works for JIT and AOTed components as well.</source>
          <target state="translated">注：これは、JITおよびAOTedコンポーネントでも機能します。</target>
        </trans-unit>
        <trans-unit id="97967d1a85f3b5492d61dd355f4be7d12006ee7c" translate="yes">
          <source>Note: Use &lt;code&gt;&lt;a href=&quot;testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; in tests. It will be set to either &lt;code&gt;TestBedViewEngine&lt;/code&gt; or &lt;code&gt;TestBedRender3&lt;/code&gt; according to the compiler used.</source>
          <target state="translated">注：テストでは &lt;code&gt;&lt;a href=&quot;testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を使用してください。 使用されるコンパイラに応じて、 &lt;code&gt;TestBedViewEngine&lt;/code&gt; または &lt;code&gt;TestBedRender3&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="418efdf508a0626a97351f56a820e24ec7fc1046" translate="yes">
          <source>Note: for performance reasons, Angular only runs async validators if all sync validators pass. Each must complete before errors are set.</source>
          <target state="translated">注：パフォーマンス上の理由から、Angularはすべての同期バリデーターが合格した場合にのみ非同期バリデーターを実行します。 エラーを設定する前に、それぞれを完了する必要があります。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="602f8eac033454f2990ff3d64fb991793d948731" translate="yes">
          <source>Notice how a hero is added:</source>
          <target state="translated">ヒーローの追加方法に注目してください。</target>
        </trans-unit>
        <trans-unit id="91a83f73eff71bb169090a9c9cc3574feccd6052" translate="yes">
          <source>Notice how the test uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;&lt;em&gt;destructuring assignment&lt;/em&gt;&lt;/a&gt; to extract the setup variables that it needs.</source>
          <target state="translated">テストで必要なセットアップ変数を抽出するために、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;&lt;em&gt;破壊割り当て&lt;/em&gt;&lt;/a&gt;がどのように使用されるかに注意してください。</target>
        </trans-unit>
        <trans-unit id="25e723887b9236f1ebd791dfe2095875e35d36a8" translate="yes">
          <source>Notice that &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; no longer provides a (fake) &lt;code&gt;HeroService&lt;/code&gt; because it's &lt;a href=&quot;testing#spy-stub&quot;&gt;not needed&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; &lt;a href=&quot;testing#spy-stub&quot;&gt;は必要ない&lt;/a&gt;ため、（偽の） &lt;code&gt;HeroService&lt;/code&gt; を提供しないことに注意してください 。</target>
        </trans-unit>
        <trans-unit id="7b500bf30eab2f8529bfd5af81ba25174f2a3133" translate="yes">
          <source>Notice that Angular frequently calls &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt;, often when there are no changes of interest. Write lean hook methods to avoid performance problems.</source>
          <target state="translated">多くの場合、Angularは &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;()&lt;/code&gt; 頻繁に呼び出すことに注意してください。 パフォーマンスの問題を回避するために、リーンフックメソッドを記述します。</target>
        </trans-unit>
        <trans-unit id="4c964d9b66e51dcb8dee8e30d5c4fa9a97be13f9" translate="yes">
          <source>Notice that all of the files the browser needs to render this application are cached. The &lt;code&gt;ngsw-config.json&lt;/code&gt; boilerplate configuration is set up to cache the specific resources used by the CLI:</source>
          <target state="translated">ブラウザがこのアプリケーションをレンダリングするために必要なすべてのファイルがキャッシュされていることに注意してください。 &lt;code&gt;ngsw-config.json&lt;/code&gt; ボイラープレート構成は、CLIで使用される特定のリソースをキャッシュするように設定されています。</target>
        </trans-unit>
        <trans-unit id="1cbe3b7b1030eb6319dda67c737f79e1a57d4ed5" translate="yes">
          <source>Notice that even though the &lt;a href=&quot;dependency-injection-in-action#optional&quot;&gt;@Optional&lt;/a&gt; qualifier is there for safety, the  confirms that the &lt;code&gt;alex&lt;/code&gt; parameter is set.</source>
          <target state="translated">安全のために&lt;a href=&quot;dependency-injection-in-action#optional&quot;&gt;@Optional&lt;/a&gt;修飾子がありますが、 &lt;code&gt;alex&lt;/code&gt; パラメーターが設定されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="9475b2943f5dbda5c95807297eaddbdaad75c9f5" translate="yes">
          <source>Notice that if you subscribe twice, there will be two separate streams, each emitting values every second. It looks something like this:</source>
          <target state="translated">2回サブスクライブすると、2つの個別のストリームがあり、それぞれが毎秒値を発行することに注意してください。 次のようになります。</target>
        </trans-unit>
        <trans-unit id="97f017994bfe8b1e812dafb1f5d643ba23e61b6f" translate="yes">
          <source>Notice that it doesn't have any members. It never grows no matter how many members you add to the class, as long as those members are typed but not implemented.</source>
          <target state="translated">メンバーがないことに注意してください。 クラスに追加するメンバーの数に関係なく、それらのメンバーが入力されているが実装されていない限り、決して成長しません。</target>
        </trans-unit>
        <trans-unit id="0ec892a756caf966d2763c064eb008689f0edb3d" translate="yes">
          <source>Notice that the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; tag is tucked between the &lt;code&gt;&amp;lt;after-content&amp;gt;&lt;/code&gt; tags. Never put content between a component's element tags &lt;em&gt;unless you intend to project that content into the component&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; タグが &lt;code&gt;&amp;lt;after-content&amp;gt;&lt;/code&gt; タグの間に挟まれていることに注意してください。 コンポーネントに&lt;em&gt;そのコンテンツを投影するつもりでない限り&lt;/em&gt; 、コンポーネントの要素タグの間にコンテンツを置か&lt;em&gt;ないでください&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="64fd2d77e6abc918867382efcabdd9b7a7b79574" translate="yes">
          <source>Notice that the &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; references and &lt;code&gt;declarations&lt;/code&gt; array are unnecessary, so are no longer part of &lt;code&gt;AppRoutingModule&lt;/code&gt;. The following sections explain the rest of the &lt;code&gt;AppRoutingModule&lt;/code&gt; in more detail.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 参照と &lt;code&gt;declarations&lt;/code&gt; 配列は不要であるため、 &lt;code&gt;AppRoutingModule&lt;/code&gt; の一部ではなくなっていることに注意してください 。 以下のセクションでは、 &lt;code&gt;AppRoutingModule&lt;/code&gt; の残りの部分について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="9a5f30892f2e4c0cac80275e27a0c184cd91d9f1" translate="yes">
          <source>Notice that the &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method &lt;em&gt;can&lt;/em&gt; return synchronously; it returns &lt;code&gt;true&lt;/code&gt; immediately if there is no crisis or there are no pending changes. But it can also return a &lt;code&gt;Promise&lt;/code&gt; or an &lt;code&gt;Observable&lt;/code&gt; and the router will wait for that to resolve to truthy (navigate) or falsy (stay put).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; メソッド&lt;em&gt;は&lt;/em&gt;同期的に戻る&lt;em&gt;ことができることに&lt;/em&gt;注意してください 。 危機がないか、保留中の変更がない場合は、すぐに &lt;code&gt;true&lt;/code&gt; を返します 。 しかし、 &lt;code&gt;Promise&lt;/code&gt; または &lt;code&gt;Observable&lt;/code&gt; を返すこともでき、ルーターはそれが真実（ナビゲーション）または偽（プットステイ）に解決するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="23c9ab227663b5cf313e312746e88c04a1e2e07c" translate="yes">
          <source>Notice that the &lt;code&gt;Logger&lt;/code&gt; service also has the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator, even though it might not need its own dependencies. In fact, the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator is &lt;strong&gt;required for all services&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; サービスには、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータもありますが、独自の依存関係は必要ありません。 実際、 &lt;strong&gt;すべてのサービスに&lt;/strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータが&lt;strong&gt;必要です&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="de256ece17b6a4cc0716680bb469bb36ad1f8368" translate="yes">
          <source>Notice that the &lt;code&gt;beforeEach()&lt;/code&gt; is asynchronous and calls &lt;code&gt;TestBed.compileComponents&lt;/code&gt; because the &lt;code&gt;HeroDetailComponent&lt;/code&gt; has an external template and css file.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; には外部テンプレートとcssファイルがあるため、 &lt;code&gt;beforeEach()&lt;/code&gt; は非同期で &lt;code&gt;TestBed.compileComponents&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="0d3f60aa30d029934a47b09b0a3bbb9af25f070e" translate="yes">
          <source>Notice that the &lt;code&gt;path&lt;/code&gt; is set to an empty string. This is because the path in &lt;code&gt;AppRoutingModule&lt;/code&gt; is already set to &lt;code&gt;customers&lt;/code&gt;, so this route in the &lt;code&gt;CustomersRoutingModule&lt;/code&gt;, is already within the &lt;code&gt;customers&lt;/code&gt; context. Every route in this routing module is a child route.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; が空の文字列に設定されていることに注意してください。 これは、 &lt;code&gt;AppRoutingModule&lt;/code&gt; のパスが既に &lt;code&gt;customers&lt;/code&gt; に設定されているため、 &lt;code&gt;CustomersRoutingModule&lt;/code&gt; のこのルートはすでに &lt;code&gt;customers&lt;/code&gt; コンテキスト内にあるためです 。 このルーティングモジュールのすべてのルートは子ルートです。</target>
        </trans-unit>
        <trans-unit id="3a9f36d86bfc13a1174d686677fc0501b0897fee" translate="yes">
          <source>Notice that the Jasmine test is synchronous. There's no &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt;. Marble testing uses a test scheduler to simulate the passage of time in a synchronous test.</source>
          <target state="translated">Jasmineテストは同期であることに注意してください。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; ありません。 大理石テストでは、テストスケジューラを使用して、同期テストの時間経過をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="f0cde8607c8b99c991ac239f92c2c9536f2f3650" translate="yes">
          <source>Notice that the URL in the preview window changes. The final segment is &lt;code&gt;products/1&lt;/code&gt;.</source>
          <target state="translated">プレビューウィンドウのURLが変更されることに注意してください。 最終セグメントは &lt;code&gt;products/1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4027ee1272622553868202a87e3af69ab1150cd2" translate="yes">
          <source>Notice that the app stopped working when you added &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; を追加すると、アプリが機能しなくなったことに注意してください 。</target>
        </trans-unit>
        <trans-unit id="32381adc36dd84f9ba0e64036e01484a6eccfa6e" translate="yes">
          <source>Notice that the binding is to the &lt;code&gt;disabled&lt;/code&gt; property of the button's DOM element, &lt;strong&gt;not&lt;/strong&gt; the attribute. This applies to data-binding in general. Data-binding works with &lt;em&gt;properties&lt;/em&gt; of DOM elements, components, and directives, not HTML &lt;em&gt;attributes&lt;/em&gt;.</source>
          <target state="translated">バインディングは、属性で&lt;strong&gt;はなく&lt;/strong&gt; 、ボタンのDOM要素の &lt;code&gt;disabled&lt;/code&gt; プロパティに対するものであることに注意してください。 これは一般にデータバインディングに適用されます。 データバインディングは、HTML &lt;em&gt;属性&lt;/em&gt;ではなく、DOM要素、コンポーネント、およびディレクティブの&lt;em&gt;プロパティ&lt;/em&gt;で機能し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="afe74458a6eda7ec5253735cae32222403b5c053" translate="yes">
          <source>Notice that the configured builder for the project is different from the default builder for app projects. This builder, among other things, ensures that the library is always built with the &lt;a href=&quot;aot-compiler&quot;&gt;AoT compiler&lt;/a&gt;, without the need to specify the &lt;code&gt;--prod&lt;/code&gt; flag.</source>
          <target state="translated">プロジェクトに構成されたビルダーは、アプリプロジェクトのデフォルトビルダーとは異なることに注意してください。 このビルダーは、とりわけ、-- &lt;code&gt;--prod&lt;/code&gt; フラグを指定する必要なく、ライブラリが常に&lt;a href=&quot;aot-compiler&quot;&gt;AoTコンパイラー&lt;/a&gt;でビルドされるようにします。</target>
        </trans-unit>
        <trans-unit id="bf29db2d2b68a942b7a233c23775f60dc8fd0262" translate="yes">
          <source>Notice that the lazy-loading syntax uses &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; followed by a function that uses the browser's built-in &lt;code&gt;import('...')&lt;/code&gt; syntax for dynamic imports. The import path is the relative path to the module.</source>
          <target state="translated">遅延読み込み構文は &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; を使用し、その後に動的インポートにブラウザーの組み込み &lt;code&gt;import('...')&lt;/code&gt; 構文を使用する関数が続くことに注意してください。 インポートパスは、モジュールへの相対パスです。</target>
        </trans-unit>
        <trans-unit id="b1b8ffb679119622c1d7f7f438fb3bcdac1936e7" translate="yes">
          <source>Notice that the name and alterEgo are sibling controls. To evaluate both controls in a single custom validator, we should perform the validation in a common ancestor control: the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. That way, we can query the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; for the child controls which will allow us to compare their values.</source>
          <target state="translated">名前とalterEgoは兄弟コントロールであることに注意してください。 単一のカスタムバリデータで両方のコントロールを評価するには、共通の祖先コントロールである &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; で検証を実行する必要があります。 そのようにして、子コントロールの &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; にクエリを実行して、値を比較できます。</target>
        </trans-unit>
        <trans-unit id="de3049b45f385b162d074321887e74505bfcc3bc" translate="yes">
          <source>Notice that the new service imports the Angular &lt;code&gt;&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; symbol and annotates the class with the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. This marks the class as one that participates in the &lt;em&gt;dependency injection system&lt;/em&gt;. The &lt;code&gt;HeroService&lt;/code&gt; class is going to provide an injectable service, and it can also have its own injected dependencies. It doesn't have any dependencies yet, but &lt;a href=&quot;toh-pt4#inject-message-service&quot;&gt;it will soon&lt;/a&gt;.</source>
          <target state="translated">新しいサービスがAngular &lt;code&gt;&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt; シンボルをインポートし、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータでクラスに注釈を付けていることに注意してください。 これにより、クラスは&lt;em&gt;依存性注入システムに&lt;/em&gt;参加するものとしてマークされ&lt;em&gt;ます&lt;/em&gt; 。 &lt;code&gt;HeroService&lt;/code&gt; クラスは注入可能なサービスを提供しますが、独自の注入された依存関係を持つこともできます。 まだ依存関係はありませんが、 &lt;a href=&quot;toh-pt4#inject-message-service&quot;&gt;すぐになり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d8c9e9c01ffc24a0bbd5e28c410125ecb2379d79" translate="yes">
          <source>Notice that the parent &lt;code&gt;crisis-center&lt;/code&gt; route has a &lt;code&gt;children&lt;/code&gt; property with a single route containing the &lt;code&gt;CrisisListComponent&lt;/code&gt;. The &lt;code&gt;CrisisListComponent&lt;/code&gt; route also has a &lt;code&gt;children&lt;/code&gt; array with two routes.</source>
          <target state="translated">親の &lt;code&gt;crisis-center&lt;/code&gt; ルートには、 &lt;code&gt;CrisisListComponent&lt;/code&gt; を含む単一のルートを持つ &lt;code&gt;children&lt;/code&gt; プロパティがあることに注意してください 。 &lt;code&gt;CrisisListComponent&lt;/code&gt; ルートには、2つのルートを持つ子配列もあります。</target>
        </trans-unit>
        <trans-unit id="59f693c9d311f5b6a161e98f66d3f66c45891328" translate="yes">
          <source>Notice that the path goes up a level using the &lt;code&gt;../&lt;/code&gt; syntax. If the current crisis &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;, the resulting path back to the crisis list is &lt;code&gt;/crisis-center/;id=3;foo=foo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;../&lt;/code&gt; 構文を使用して、パスが1レベル上がることに注意してください。 現在の危機 &lt;code&gt;id&lt;/code&gt; が &lt;code&gt;3&lt;/code&gt; の場合、危機リストに戻るパスは &lt;code&gt;/crisis-center/;id=3;foo=foo&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="764a2d4b65ee2443447964e923fcc96061c4bb18" translate="yes">
          <source>Notice that the quote element displays the placeholder value (&lt;code&gt;'...'&lt;/code&gt;) after &lt;code&gt;ngOnInit()&lt;/code&gt;. The first quote hasn't arrived yet.</source>
          <target state="translated">quote要素は &lt;code&gt;ngOnInit()&lt;/code&gt; 後にプレースホルダー値（ &lt;code&gt;'...'&lt;/code&gt; ）を表示することに注意してください。 最初の引用はまだ届いていません。</target>
        </trans-unit>
        <trans-unit id="4a000921d2c433893d3386ba1934a919231e53ac" translate="yes">
          <source>Notice that this example captures the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#subscription&quot;&gt;subscription&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; when the &lt;code&gt;AstronautComponent&lt;/code&gt; is destroyed. This is a memory-leak guard step. There is no actual risk in this app because the lifetime of a &lt;code&gt;AstronautComponent&lt;/code&gt; is the same as the lifetime of the app itself. That &lt;em&gt;would not&lt;/em&gt; always be true in a more complex application.</source>
          <target state="translated">この例は、 &lt;code&gt;AstronautComponent&lt;/code&gt; が破棄されるときに &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#subscription&quot;&gt;subscription&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; をキャプチャすることに注意してください。 これは、メモリリークガードのステップです。 &lt;code&gt;AstronautComponent&lt;/code&gt; の寿命はアプリ自体の寿命と同じであるため、このアプリに実際のリスクはありません。 これ&lt;em&gt;は&lt;/em&gt; 、より複雑なアプリケーションで&lt;em&gt;は&lt;/em&gt;必ずしも当てはまり&lt;em&gt;ません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0d61f1eb2b9b620cece14307b29d5408a54c3f6" translate="yes">
          <source>Notice that this handler returns an RxJS &lt;a href=&quot;http#rxjs&quot;&gt;&lt;code&gt;ErrorObservable&lt;/code&gt;&lt;/a&gt; with a user-friendly error message. Consumers of the service expect service methods to return an &lt;code&gt;Observable&lt;/code&gt; of some kind, even a &quot;bad&quot; one.</source>
          <target state="translated">このハンドラーは、ユーザーフレンドリーなエラーメッセージとともにRxJS &lt;a href=&quot;http#rxjs&quot;&gt; &lt;code&gt;ErrorObservable&lt;/code&gt; &lt;/a&gt;を返すことに注意してください。 サービスのコンシューマーは、サービスメソッドが何らかの種類の &lt;code&gt;Observable&lt;/code&gt; を返すことを期待しています。</target>
        </trans-unit>
        <trans-unit id="62ab125fbed21c4a8952408ef0b14de7325e3998" translate="yes">
          <source>Notice that under the &quot;Size&quot; column, the requests state is &lt;code&gt;(from ServiceWorker)&lt;/code&gt;. This means that the resources are not being loaded from the network. Instead, they are being loaded from the service worker's cache.</source>
          <target state="translated">[サイズ]列の下のリクエストの状態は &lt;code&gt;(from ServiceWorker)&lt;/code&gt; です。 これは、リソースがネットワークからロードされていないことを意味します。 代わりに、サービスワーカーのキャッシュから読み込まれます。</target>
        </trans-unit>
        <trans-unit id="63648c03d3e6427709280eccf49221c86f710380" translate="yes">
          <source>Notice that you &lt;em&gt;inject&lt;/em&gt; the &lt;code&gt;AuthService&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; in the constructor. You haven't provided the &lt;code&gt;AuthService&lt;/code&gt; yet but it's good to know that you can inject helpful services into routing guards.</source>
          <target state="translated">&lt;code&gt;AuthService&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を&lt;em&gt;挿入&lt;/em&gt;することに注意してください。 &lt;code&gt;AuthService&lt;/code&gt; をまだ提供していませんが、有用なサービスをルーティングガードに挿入できることを知っておくと便利です。</target>
        </trans-unit>
        <trans-unit id="d08df7bfba3ae90e07f5d834f49e5d5c467ac993" translate="yes">
          <source>Notice that you also added a &lt;code&gt;name&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag and set it to &quot;name&quot;, which makes sense for the hero's name. Any unique value will do, but using a descriptive name is helpful. Defining a &lt;code&gt;name&lt;/code&gt; attribute is a requirement when using &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; in combination with a form.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 属性も &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; タグに追加し、それを「name」に設定していることに注意してください。これはヒーローの名前にとって意味があります。 任意の一意の値を使用できますが、わかりやすい名前を使用すると便利です。 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; をフォームと組み合わせて使用​​する場合、 &lt;code&gt;name&lt;/code&gt; 属性を定義することは必須です。</target>
        </trans-unit>
        <trans-unit id="58f22daabed29966ba88b05f45459d68f1b23998" translate="yes">
          <source>Notice that you captured the factory provider in an exported variable, &lt;code&gt;heroServiceProvider&lt;/code&gt;. This extra step makes the factory provider reusable. You can configure a provider of &lt;code&gt;HeroService&lt;/code&gt; with this variable wherever you need it. In this sample, you need it only in &lt;code&gt;HeroesComponent&lt;/code&gt;, where &lt;code&gt;heroServiceProvider&lt;/code&gt; replaces &lt;code&gt;HeroService&lt;/code&gt; in the metadata &lt;code&gt;providers&lt;/code&gt; array.</source>
          <target state="translated">エクスポートされた変数 &lt;code&gt;heroServiceProvider&lt;/code&gt; でファクトリプロバイダーをキャプチャしたことに注意してください。 この追加手順により、ファクトリプロバイダーが再利用可能になります。 &lt;code&gt;HeroService&lt;/code&gt; のプロバイダーは、必要に応じてこの変数で構成できます。 このサンプルでは、​​メタデータ &lt;code&gt;providers&lt;/code&gt; 配列の &lt;code&gt;HeroService&lt;/code&gt; を &lt;code&gt;heroServiceProvider&lt;/code&gt; に置き換えるHeroesComponentでのみ必要です 。</target>
        </trans-unit>
        <trans-unit id="cc972f991724148e05496475d3f68dbf24cf9d49" translate="yes">
          <source>Notice that you don't call &lt;strong&gt;new&lt;/strong&gt; to create an instance of the &lt;code&gt;AppComponent&lt;/code&gt; class. Angular is creating an instance for you. How?</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; クラスのインスタンスを作成するために&lt;strong&gt;new&lt;/strong&gt;を呼び出さないことに注意してください。 Angularはインスタンスを作成しています。 どうやって？</target>
        </trans-unit>
        <trans-unit id="657010025921c4cba9d77c07d871864c621aceef" translate="yes">
          <source>Notice that you keep injecting the &lt;code&gt;MessageService&lt;/code&gt; but since you'll call it so frequently, wrap it in a private &lt;code&gt;&lt;a href=&quot;../api/animations/browser/testing/mockanimationdriver#log&quot;&gt;log&lt;/a&gt;()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;MessageService&lt;/code&gt; を挿入し続けますが、頻繁に呼び出すため、プライベート &lt;code&gt;&lt;a href=&quot;../api/animations/browser/testing/mockanimationdriver#log&quot;&gt;log&lt;/a&gt;()&lt;/code&gt; メソッドでラップすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4e3000d46be8e51b7f3b4b07993ea04eeafacab1" translate="yes">
          <source>Notice that you're importing the &lt;code&gt;map&lt;/code&gt; operator of the RxJS &lt;code&gt;Observable&lt;/code&gt; separately. Do this for every RxJS operator.</source>
          <target state="translated">RxJS &lt;code&gt;Observable&lt;/code&gt; の &lt;code&gt;map&lt;/code&gt; 演算子を個別にインポートしていることに注意してください。 すべてのRxJSオペレーターに対してこれを行います。</target>
        </trans-unit>
        <trans-unit id="0fe973a854de016beb47da7cff87ced09a70d998" translate="yes">
          <source>Notice that:</source>
          <target state="translated">次のことに注意してください。</target>
        </trans-unit>
        <trans-unit id="224c6bd0b406b3c1b902663fe54c62ec5beba85d" translate="yes">
          <source>Notice the &lt;code&gt;:id&lt;/code&gt; token in the path. That creates a slot in the path for a &lt;strong&gt;Route Parameter&lt;/strong&gt;. In this case, the router will insert the &lt;code&gt;id&lt;/code&gt; of a hero into that slot.</source>
          <target state="translated">パスの &lt;code&gt;:id&lt;/code&gt; トークンに注意してください 。 これにより、 &lt;strong&gt;ルートパラメータの&lt;/strong&gt;パスにスロットが作成されます。 この場合、ルーターはヒーローの &lt;code&gt;id&lt;/code&gt; をそのスロットに挿入します。</target>
        </trans-unit>
        <trans-unit id="f8ad08dbe7eecf2fed7e6c40ee0d2fa66fb61639" translate="yes">
          <source>Notice the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator. It adds metadata to the class that makes the directive's &lt;code&gt;highlightColor&lt;/code&gt; property available for binding.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; デコレータに注目してください。 クラスにメタデータを追加して、ディレクティブの &lt;code&gt;highlightColor&lt;/code&gt; プロパティをバインディングに使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="6634b0a0f0be00fbe2e39031dc79ddc4d0ee464d" translate="yes">
          <source>Notice the &lt;code&gt;@&lt;a href=&quot;api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator. This indicates that the following class is a component. It provides metadata about the component, including its selector, templates, and styles.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータに注目してください。 これは、次のクラスがコンポーネントであることを示しています。 セレクター、テンプレート、スタイルなど、コンポーネントに関するメタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="c60b94afc6109f221d514f644a8ae5ea5a5efbee" translate="yes">
          <source>Notice the &lt;code&gt;hero&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; double-quoted instruction; it is an example of a template input variable. Read more about template input variables in the &lt;a href=&quot;template-syntax#microsyntax&quot;&gt;microsyntax&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">二重引用符で囲まれた &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 命令の &lt;code&gt;hero&lt;/code&gt; に注目してください。 これは、テンプレート入力変数の例です。 [ &lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文]&lt;/a&gt;ページの[ &lt;a href=&quot;template-syntax#microsyntax&quot;&gt;マイクロ&lt;/a&gt; 構文 ]セクションでテンプレート入力変数の詳細を確認してください。</target>
        </trans-unit>
        <trans-unit id="4562d3406b71c08ed4a9cb8f2b93ad983529d493" translate="yes">
          <source>Notice the declaration of &lt;code&gt;heroes$&lt;/code&gt; as an &lt;code&gt;Observable&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Observable&lt;/code&gt; としての &lt;code&gt;heroes$&lt;/code&gt; の宣言に注意してください。</target>
        </trans-unit>
        <trans-unit id="311928a764ab8a87b147a4229e9425b4654dfce5" translate="yes">
          <source>Notice the difference between the &lt;code&gt;colspan&lt;/code&gt; attribute and the &lt;code&gt;colSpan&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;colspan&lt;/code&gt; 属性と &lt;code&gt;colSpan&lt;/code&gt; プロパティの違いに注意してください。</target>
        </trans-unit>
        <trans-unit id="8837254f576af82cbf792e9988deb4cbfb60d7fb" translate="yes">
          <source>Notice the odd behavior in the live example: when you add flying heroes, none of them are displayed under &quot;Heroes who fly.&quot;</source>
          <target state="translated">ライブ例の奇妙な動作に注意してください。空飛ぶヒーローを追加すると、「空を飛ぶヒーロー」の下に表示されません。</target>
        </trans-unit>
        <trans-unit id="3a87dd19c1d892167b8ee74d68f5611cfda16020" translate="yes">
          <source>Notice the other syntax differences: The (*) before &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is required; the &lt;code&gt;let&lt;/code&gt; keyword identifies &lt;code&gt;movie&lt;/code&gt; as an input variable; the list preposition is &lt;code&gt;of&lt;/code&gt;, not &lt;code&gt;in&lt;/code&gt;.</source>
          <target state="translated">他の構文の違いに注意してください &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 前の（*）は必須です。 &lt;code&gt;let&lt;/code&gt; キーワードは、 &lt;code&gt;movie&lt;/code&gt; を入力変数として識別します。 リストの前置詞は &lt;code&gt;of&lt;/code&gt; 、ではありません。</target>
        </trans-unit>
        <trans-unit id="f0c91a28238ae10d905cde46e87869f168fa3578" translate="yes">
          <source>Notice this component can present any type of question in your model. You only have two types of questions at this point but you can imagine many more. The &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; determines which type of question to display.</source>
          <target state="translated">このコンポーネントは、モデル内のあらゆるタイプの質問を提示できることに注意してください。 この時点では2種類の質問しかありませんが、さらに多くの質問を想像できます。 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; は、表示する質問のタイプを決定します。</target>
        </trans-unit>
        <trans-unit id="296e3dde9ed08cdaed0a40934e1b325ca788c45d" translate="yes">
          <source>Notice, we don't use the &lt;code&gt;new&lt;/code&gt; operator because we explicitly want to have the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; resolve all of the object's dependencies automatically.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; にオブジェクトのすべての依存関係を自動的に解決させたいので、 &lt;code&gt;new&lt;/code&gt; 演算子を使用しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="628a306f408fb8f97d2799fd6d3657d63ec32e11" translate="yes">
          <source>Notification type</source>
          <target state="translated">通知タイプ</target>
        </trans-unit>
        <trans-unit id="8600e4a94a4556b41e58d1919c7c370cb706b618" translate="yes">
          <source>Notifies that an error has been delivered.</source>
          <target state="translated">エラーが配信されたことを通知します。</target>
        </trans-unit>
        <trans-unit id="42b070aa5cb4c0fbe5ccad26df6cf2f1864252f1" translate="yes">
          <source>Notifies when code enters Angular Zone. This gets fired first on VM Turn.</source>
          <target state="translated">コードがAngular Zoneに入ると通知します。 これは、VM Turnで最初に起動されます。</target>
        </trans-unit>
        <trans-unit id="be6b88a10b80bebba1fd14aa8e278d92410f068d" translate="yes">
          <source>Notifies when the last &lt;code&gt;onMicrotaskEmpty&lt;/code&gt; has run and there are no more microtasks, which implies we are about to relinquish VM turn. This event gets called just once.</source>
          <target state="translated">最後の &lt;code&gt;onMicrotaskEmpty&lt;/code&gt; が実行され、 マイクロタスクがもうないことを通知します。これは、VMターンを放棄しようとしていることを意味します。 このイベントは一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e334aa61249c5a9f4d3c93e17830a67cfd2596a6" translate="yes">
          <source>Notifies when there is no more microtasks enqueued in the current VM Turn. This is a hint for Angular to do change detection, which may enqueue more microtasks. For this reason this event can fire multiple times per VM Turn.</source>
          <target state="translated">現在のVMターンにキューに入れられたマイクロタスクがなくなったことを通知します。 これは、Angularが変更検出を行うためのヒントであり、より多くのマイクロタスクをキューに入れることができます。 このため、このイベントはVMターンごとに複数回発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="91196a4bb4525bb970608d38f446c43b9434f902" translate="yes">
          <source>Nougat (7.0), Marshmallow (6.0), Lollipop (5.0, 5.1), KitKat (4.4)</source>
          <target state="translated">ヌガー（7.0）、マシュマロ（6.0）、ロリポップ（5.0、5.1）、キットカット（4.4）</target>
        </trans-unit>
        <trans-unit id="d9499aa3edb773a42335b31a89b82134a0aa14d8" translate="yes">
          <source>Nov 28, 2019</source>
          <target state="translated">2019年11月28日</target>
        </trans-unit>
        <trans-unit id="1965edd2281e8c818ff89aadca53b4c61e55465e" translate="yes">
          <source>Nov 28, 2020</source>
          <target state="translated">2020年11月28日</target>
        </trans-unit>
        <trans-unit id="39f0affb54c0e760316554da0b339f4060ec9e40" translate="yes">
          <source>Nov 3, 2018</source>
          <target state="translated">2018年11月3日</target>
        </trans-unit>
        <trans-unit id="59cb4cac574d164db8af25ffc6bef61b907f0ac8" translate="yes">
          <source>Nov 3, 2019</source>
          <target state="translated">2019年11月3日</target>
        </trans-unit>
        <trans-unit id="e3b82040565bb4be6b11f778a2e3df327ed20a3b" translate="yes">
          <source>Now</source>
          <target state="translated">Now</target>
        </trans-unit>
        <trans-unit id="dbbf3b93a5f06490dbad6953e20f867b07ab34cf" translate="yes">
          <source>Now &lt;a href=&quot;docs-style-guide#ugly-anchors&quot;&gt;link to that custom anchor name&lt;/a&gt; as you did before.</source>
          <target state="translated">ここで、以前と同じ&lt;a href=&quot;docs-style-guide#ugly-anchors&quot;&gt;ように、そのカスタムアンカー名にリンクし&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="0a9b3f9877bccae6c0bc6b63cbf2455a67b5c7aa" translate="yes">
          <source>Now &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; returns an &lt;code&gt;Observable&lt;/code&gt; of type &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; rather than just the JSON data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; は、JSONデータだけでなく、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 型の &lt;code&gt;Observable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="081aba198c945280ea9a8d78da36d3b8ee68a0d2" translate="yes">
          <source>Now add a test that gets the component's element from &lt;code&gt;fixture.nativeElement&lt;/code&gt; and looks for the expected text.</source>
          <target state="translated">次に、 &lt;code&gt;fixture.nativeElement&lt;/code&gt; からコンポーネントの要素を取得し、予想されるテキストを検索するテストを追加します。</target>
        </trans-unit>
        <trans-unit id="a5e41bfa864085cc0d6942881475d0e793dc00ca" translate="yes">
          <source>Now apply that reasoning to the following example:</source>
          <target state="translated">次に、その推論を次の例に適用します。</target>
        </trans-unit>
        <trans-unit id="78b9f4fb848bc82eecf129603e91b1eca3652e57" translate="yes">
          <source>Now click the &lt;em&gt;Crisis Center&lt;/em&gt; link for a list of ongoing crises.</source>
          <target state="translated">&lt;em&gt;危機センターの&lt;/em&gt;リンクをクリックして、進行中の危機のリストをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2d9df8448a20deb27391d24d300f8607281087e8" translate="yes">
          <source>Now clicking &quot;New Hero&quot; resets both the form and its control flags.</source>
          <target state="translated">[新しいヒーロー]をクリックすると、フォームとその制御フラグの両方がリセットされます。</target>
        </trans-unit>
        <trans-unit id="3bcd3030a2143c83e66b7b122008421eddf2dd05" translate="yes">
          <source>Now conditionally exclude a &lt;em&gt;select&lt;/em&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ここで、条件付きで &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; で &lt;em&gt;select&lt;/em&gt; &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; を除外し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3252058bb77eeb5aa82eb998ca811799962d99d" translate="yes">
          <source>Now consider a lazy loaded module that also provides a service called &lt;code&gt;UserService&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;UserService&lt;/code&gt; と呼ばれるサービスも提供する遅延ロードされたモジュールを検討します 。</target>
        </trans-unit>
        <trans-unit id="92831a218c46c49fe732c9afcdca563a9895a096" translate="yes">
          <source>Now convert the template of this component into Angular syntax. The search controls replace the AngularJS &lt;code&gt;$ctrl&lt;/code&gt; expressions with Angular's two-way &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; binding syntax:</source>
          <target state="translated">次に、このコンポーネントのテンプレートをAngular構文に変換します。 検索コントロールは、AngularJS &lt;code&gt;$ctrl&lt;/code&gt; 式をAngularの双方向 &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; バインディング構文に置き換えます：</target>
        </trans-unit>
        <trans-unit id="a6db90e40d4dc7881bb7b39d5fc9aa711d321b27" translate="yes">
          <source>Now create a new &lt;code&gt;app.module.ts&lt;/code&gt; with the minimum &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; class:</source>
          <target state="translated">次に、最小の &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; クラスで新しい &lt;code&gt;app.module.ts&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="95a24eeedcc9308fdb1cbf8aa172fa9e0eb25d1b" translate="yes">
          <source>Now create the root &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; class called &lt;code&gt;AppModule&lt;/code&gt;. There is already a file named &lt;code&gt;app.module.ts&lt;/code&gt; that holds the AngularJS module. Rename it to &lt;code&gt;app.module.ajs.ts&lt;/code&gt; and update the corresponding script name in the &lt;code&gt;index.html&lt;/code&gt; as well. The file contents remain:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; という &lt;code&gt;AppModule&lt;/code&gt; ルートNgModuleクラスを作成します。 AngularJSモジュールを保持する &lt;code&gt;app.module.ts&lt;/code&gt; という名前のファイルが既にあります。 名前を &lt;code&gt;app.module.ajs.ts&lt;/code&gt; に変更し、 &lt;code&gt;index.html&lt;/code&gt; 内の対応するスクリプト名も更新します。 ファイルの内容は残ります：</target>
        </trans-unit>
        <trans-unit id="05dfc259a7fb160418b361d767e881fb864d19be" translate="yes">
          <source>Now demonstrate it in a harness component whose template defines two bindings to this pipe, both requesting the heroes from the &lt;code&gt;heroes.json&lt;/code&gt; file.</source>
          <target state="translated">次に、テンプレートがこのパイプへの2つのバインディングを定義するハーネスコンポーネントでそれを示します。どちらも &lt;code&gt;heroes.json&lt;/code&gt; ファイルからヒーローを要求します。</target>
        </trans-unit>
        <trans-unit id="461b4bc6c19d75290ddf943ec76dd7b2a1ad9862" translate="yes">
          <source>Now deprecated:</source>
          <target state="translated">廃止予定：</target>
        </trans-unit>
        <trans-unit id="964026c5dae68aec5890167594d69dd0acb0b225" translate="yes">
          <source>Now edit the &lt;code&gt;AdminDashboardComponent&lt;/code&gt; to display the log of preloaded routes.</source>
          <target state="translated">次に、 &lt;code&gt;AdminDashboardComponent&lt;/code&gt; を編集して、プリロードされたルートのログを表示します。</target>
        </trans-unit>
        <trans-unit id="d9ae4a25f96d363e4216ca6bb99b2ba1b57adbf6" translate="yes">
          <source>Now edit the generated &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; to look as follows:</source>
          <target state="translated">生成された &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; を次のように編集します。</target>
        </trans-unit>
        <trans-unit id="823a17a1466ae3779c585b18502cd6a9d65b08f2" translate="yes">
          <source>Now extend the observable result with the &lt;code&gt;pipe()&lt;/code&gt; method and give it a &lt;code&gt;catchError()&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;pipe()&lt;/code&gt; メソッドで観察可能な結果を​​拡張し、 &lt;code&gt;catchError()&lt;/code&gt; 演算子を与えます。</target>
        </trans-unit>
        <trans-unit id="4a0fb32572aab0cfb89d0154c3f108563b519f2d" translate="yes">
          <source>Now if you delete the Name, you violate the &quot;required&quot; rule, which is duly noted in the error message. The &lt;em&gt;Submit&lt;/em&gt; button is also disabled.</source>
          <target state="translated">名前を削除すると、「必須」ルールに違反することになります。これは、エラーメッセージに明記されています。 [ &lt;em&gt;送信&lt;/em&gt; ]ボタンも無効になります。</target>
        </trans-unit>
        <trans-unit id="1e286649605b4cdcc3d7475cda8c6eddeef913f5" translate="yes">
          <source>Now imagine a hosting parent component that binds to the &lt;code&gt;deleteRequest&lt;/code&gt; event of the &lt;code&gt;ItemDetailComponent&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;deleteRequest&lt;/code&gt; イベントにバインドするホスティング親コンポーネントを想像して &lt;code&gt;ItemDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="357f377145f4963391f7ad2b484687b5ec422a31" translate="yes">
          <source>Now import and declare the newly created pipe and remove the filter &amp;lt;script&amp;gt; tag from &lt;code&gt;index.html&lt;/code&gt;:</source>
          <target state="translated">新しく作成されたパイプをインポートして宣言し、 &lt;code&gt;index.html&lt;/code&gt; からフィルター&amp;lt;script&amp;gt;タグを削除します。</target>
        </trans-unit>
        <trans-unit id="cf7170cc3ead79baf3672126979190cfd6d31f29" translate="yes">
          <source>Now import the &lt;code&gt;AuthGuard&lt;/code&gt; into the &lt;code&gt;AppRoutingModule&lt;/code&gt; and add the &lt;code&gt;AuthGuard&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; array property for the &lt;code&gt;admin&lt;/code&gt; route. The completed admin route looks like this:</source>
          <target state="translated">ここで、 &lt;code&gt;AuthGuard&lt;/code&gt; をAppRoutingModuleにインポートし、 &lt;code&gt;admin&lt;/code&gt; ルートの &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; 配列プロパティに &lt;code&gt;AuthGuard&lt;/code&gt; を追加します。 完成した管理ルートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="31b836f3574819289be4274fa8741846071b4a3c" translate="yes">
          <source>Now launch the TypeScript compiler from the command line in watch mode:</source>
          <target state="translated">次に、監視モードでコマンドラインからTypeScriptコンパイラを起動します。</target>
        </trans-unit>
        <trans-unit id="cea9bc4df5ef0aed4f96da7f3e5fba85c3a68113" translate="yes">
          <source>Now let&amp;rsquo;s add some logic to it. The following code retrieves the command and arguments from the user options, spawns the new process, and waits for the process to finish. If the process is successful (returns a code of 0), it resolves the return value.</source>
          <target state="translated">それでは、それにいくつかのロジックを追加しましょう。 次のコードは、ユーザーオプションからコマンドと引数を取得し、新しいプロセスを生成して、プロセスが終了するのを待ちます。 プロセスが成功した場合（コード0を返します）、戻り値を解決します。</target>
        </trans-unit>
        <trans-unit id="b24abf9dc185858f14c376ab8788987c0f0a50c3" translate="yes">
          <source>Now look at how the browser and service worker handle the updated application.</source>
          <target state="translated">次に、ブラウザとサービスワーカーが更新されたアプリケーションをどのように処理するかを見てください。</target>
        </trans-unit>
        <trans-unit id="fc5182118ed2d7a9f52a68efa9e2275c52a1ec71" translate="yes">
          <source>Now look at the component's template:</source>
          <target state="translated">次に、コンポーネントのテンプレートを見てください。</target>
        </trans-unit>
        <trans-unit id="75a25734338df521e44ff13a270203cce683ac11" translate="yes">
          <source>Now requests made in the course of your tests will hit the testing backend instead of the normal backend.</source>
          <target state="translated">これで、テスト中に行われたリクエストは、通常のバックエンドではなくテストバックエンドにヒットします。</target>
        </trans-unit>
        <trans-unit id="98a01892c59d53b9056b9b561655ffe86dc1b126" translate="yes">
          <source>Now run the app and look at the &lt;em&gt;Name&lt;/em&gt; input box. Follow these steps &lt;em&gt;precisely&lt;/em&gt;:</source>
          <target state="translated">次に、アプリを実行して、[ &lt;em&gt;名前]&lt;/em&gt;入力ボックスを確認します。 以下の手順を&lt;em&gt;正確に&lt;/em&gt;実行してください。</target>
        </trans-unit>
        <trans-unit id="d7dac50e126237aea132e235b38b0a6e9b8645c1" translate="yes">
          <source>Now run the app. It should display the title and hero name:</source>
          <target state="translated">ここでアプリを実行します。 タイトルとヒーロー名が表示されます：</target>
        </trans-unit>
        <trans-unit id="7e1ecc0ef3d5a53d92ccefa181700e0018c5594b" translate="yes">
          <source>Now run the application to see the &lt;code&gt;HighlightDirective&lt;/code&gt; in action.</source>
          <target state="translated">次に、アプリケーションを実行して、 &lt;code&gt;HighlightDirective&lt;/code&gt; の動作を確認します。</target>
        </trans-unit>
        <trans-unit id="6054ca5587a773649913d761d56148660e33f0bd" translate="yes">
          <source>Now set the remaining &lt;code&gt;phone-detail.component.ts&lt;/code&gt; as follows:</source>
          <target state="translated">次に、残りの &lt;code&gt;phone-detail.component.ts&lt;/code&gt; を次のように設定します。</target>
        </trans-unit>
        <trans-unit id="3c367bf53fb80a0788621b443cbb2320bb48a842" translate="yes">
          <source>Now take note of the &lt;code&gt;afterGetHeroes()&lt;/code&gt; method. Your first instinct might have been to create an &lt;code&gt;ngOnInit&lt;/code&gt; method in &lt;code&gt;SortedHeroesComponent&lt;/code&gt; and do the sorting there. But Angular calls the &lt;em&gt;derived&lt;/em&gt; class's &lt;code&gt;ngOnInit&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; calling the base class's &lt;code&gt;ngOnInit&lt;/code&gt; so you'd be sorting the heroes array &lt;em&gt;before they arrived&lt;/em&gt;. That produces a nasty error.</source>
          <target state="translated">次に、 &lt;code&gt;afterGetHeroes()&lt;/code&gt; メソッドに注意してください。 最初の本能は、 &lt;code&gt;ngOnInit&lt;/code&gt; メソッドを作成し、 そこでソートを行うことでした。 しかし、Angularは基本クラスの &lt;code&gt;ngOnInit&lt;/code&gt; を呼び出す&lt;em&gt;前に&lt;/em&gt; &lt;em&gt;派生&lt;/em&gt;クラスの &lt;code&gt;ngOnInit&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;呼び出すため、ヒーロー配列&lt;em&gt;が到着する前に&lt;/em&gt;並べ替えます。 それは厄介なエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="4447e662db5544ac0f0492a9b2c3e8a626d75280" translate="yes">
          <source>Now that the &lt;code&gt;FlowerService&lt;/code&gt; is provided in the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator, when the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; requests the service, the injector has only to look as far as the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;'s own &lt;code&gt;ElementInjector&lt;/code&gt;. It won't have to continue the search any further through the injector tree.</source>
          <target state="translated">&lt;code&gt;FlowerService&lt;/code&gt; が &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータで提供されるようになったので、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; がサービスを要求すると、インジェクターは &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; 自身の &lt;code&gt;ElementInjector&lt;/code&gt; を調べるだけで済みます。 インジェクターツリー全体で検索を続行する必要はありません。</target>
        </trans-unit>
        <trans-unit id="677d9053c3ba894e81177f9315671eed54630726" translate="yes">
          <source>Now that the &lt;code&gt;getQuote()&lt;/code&gt; spy is returning async observables, most of your tests will have to be async as well.</source>
          <target state="translated">&lt;code&gt;getQuote()&lt;/code&gt; スパイが非同期オブザーバブルを返しているので、テストの大部分も非同期にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e7dba8db77a8b9e3fc01e876c00ece6f37c8bb39" translate="yes">
          <source>Now that the router has a route to &lt;code&gt;HeroDetailComponent&lt;/code&gt;, fix the dashboard hero links to navigate via the &lt;em&gt;parameterized&lt;/em&gt; dashboard route.</source>
          <target state="translated">ルーターには &lt;code&gt;HeroDetailComponent&lt;/code&gt; へのルートがあるので 、ダッシュボードのヒーローリンクを修正して、 &lt;em&gt;パラメーター化された&lt;/em&gt;ダッシュボードルートを介してナビゲートし&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="e8cec91b2dc9134fb641c13185ee27ced9a52649" translate="yes">
          <source>Now that you are loading &lt;code&gt;phone.service.ts&lt;/code&gt; through an import that is resolved by SystemJS, you should &lt;strong&gt;remove the &amp;lt;script&amp;gt; tag&lt;/strong&gt; for the service from &lt;code&gt;index.html&lt;/code&gt;. This is something you'll do to all components as you upgrade them. Simultaneously with the AngularJS to Angular upgrade you're also migrating code from scripts to modules.</source>
          <target state="translated">&lt;code&gt;phone.service.ts&lt;/code&gt; によって解決されるインポートを介してphone.service.tsをロードしているため、 &lt;code&gt;index.html&lt;/code&gt; からサービスの&lt;strong&gt;&amp;lt;script&amp;gt;タグ&lt;/strong&gt;を&lt;strong&gt;削除&lt;/strong&gt;する必要があります。 これは、アップグレード時にすべてのコンポーネントに対して行うことです。 AngularJSからAngularへのアップグレードと同時に、スクリプトからモジュールにコードを移行します。</target>
        </trans-unit>
        <trans-unit id="c231a5ec89ef8ef9f64c4f0e518e58b1a0bcd9fb" translate="yes">
          <source>Now that you have TypeScript though, you can start benefiting from some of its features. There's a lot of value the language can provide to AngularJS applications.</source>
          <target state="translated">ただし、TypeScriptを入手したので、その機能の一部を活用することができます。 言語がAngularJSアプリケーションに提供できる価値はたくさんあります。</target>
        </trans-unit>
        <trans-unit id="d44c17683408615d821c56fc329cea0839ab82ba" translate="yes">
          <source>Now that you have defined the complete model you are ready to create components to represent the dynamic form.</source>
          <target state="translated">完全なモデルを定義したので、動的フォームを表すコンポーネントを作成する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="aae173e030893a651c868d22964d991589939b3b" translate="yes">
          <source>Now that you have routes for the &lt;code&gt;Heroes&lt;/code&gt; module, register them with the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; via the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;&lt;em&gt;almost&lt;/em&gt; as you did in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Heroes&lt;/code&gt; モジュール用のルートができたので、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; &lt;em&gt;ほぼ同じ&lt;/em&gt;ように、それらをRouterModule経由で &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 登録します。</target>
        </trans-unit>
        <trans-unit id="3f5b424b133920495485a847554103b82eeb3505" translate="yes">
          <source>Now that you have the infrastructure in place, you can define the main function that performs the modifications you need in the user's project.</source>
          <target state="translated">インフラストラクチャが整ったので、ユーザーのプロジェクトで必要な変更を実行するメイン関数を定義できます。</target>
        </trans-unit>
        <trans-unit id="b593c745cc74a1a73f70dfc1d0de951807013f5a" translate="yes">
          <source>Now that you have the project name, use it to retrieve the project-specific configuration information.</source>
          <target state="translated">プロジェクト名がわかったので、それを使用してプロジェクト固有の構成情報を取得します。</target>
        </trans-unit>
        <trans-unit id="cbd3a712023bfce03175f02bdf61f587361932b7" translate="yes">
          <source>Now that you're binding via the alias to the &lt;code&gt;highlightColor&lt;/code&gt;, modify the &lt;code&gt;onMouseEnter()&lt;/code&gt; method to use that property. If someone neglects to bind to &lt;code&gt;appHighlight&lt;/code&gt;, highlight the host element in red:</source>
          <target state="translated">エイリアスを介して &lt;code&gt;highlightColor&lt;/code&gt; にバインドしている &lt;code&gt;onMouseEnter()&lt;/code&gt; 、 onMouseEnter（）メソッドを変更してそのプロパティを使用します。 誰かが &lt;code&gt;appHighlight&lt;/code&gt; へのバインドを怠ると、ホスト要素を赤で強調表示します。</target>
        </trans-unit>
        <trans-unit id="8bbf1d4af673e0b229add086221708378695d8ed" translate="yes">
          <source>Now that you've seen how service workers cache your application, the next step is understanding how updates work.</source>
          <target state="translated">サービスワーカーがアプリケーションをキャッシュする方法を確認したので、次のステップは更新の仕組みを理解することです。</target>
        </trans-unit>
        <trans-unit id="62d90a93219268bf854caa0f84caf30ae4950dfe" translate="yes">
          <source>Now that your app can retrieve shipping data, you'll create a shipping component and associated template.</source>
          <target state="translated">アプリで配送データを取得できるようになったので、配送コンポーネントと関連テンプレートを作成します。</target>
        </trans-unit>
        <trans-unit id="18ccff9591e7981502d0c80f45b1c65d454c2b2e" translate="yes">
          <source>Now that your library is installed, you can run the schematic using the &lt;code&gt;ng generate&lt;/code&gt; command.</source>
          <target state="translated">ライブラリがインストールされたので、 &lt;code&gt;ng generate&lt;/code&gt; コマンドを使用して回路図を実行できます。</target>
        </trans-unit>
        <trans-unit id="994c06a9b3c626637f501e115a4a53bcc288cdfa" translate="yes">
          <source>Now the &lt;code&gt;AppModule&lt;/code&gt; knows about the feature module. If you were to add any service providers to the feature module, &lt;code&gt;AppModule&lt;/code&gt; would know about those too, as would any other feature modules. However, NgModules don&amp;rsquo;t expose their components.</source>
          <target state="translated">これで、 &lt;code&gt;AppModule&lt;/code&gt; は機能モジュールを認識します。 サービスプロバイダーを機能モジュールに追加する場合、 &lt;code&gt;AppModule&lt;/code&gt; は他の機能モジュールと同様にそれらについても認識します。 ただし、NgModuleはコンポーネントを公開しません。</target>
        </trans-unit>
        <trans-unit id="16422286fda1a8b63ef0a3cb704ce7f9dc48bb65" translate="yes">
          <source>Now the app has no access to network interaction.</source>
          <target state="translated">これで、アプリはネットワークインタラクションにアクセスできなくなりました。</target>
        </trans-unit>
        <trans-unit id="7add14e56319552fd92d2fc69fcc07e1a53b1142" translate="yes">
          <source>Now the app needs to show something else while the form is in the submitted state. Add the following HTML below the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapper you just wrote:</source>
          <target state="translated">ここで、フォームが送信された状態にある間、アプリは他の何かを表示する必要があります。 作成した &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; ラッパーの下に次のHTMLを追加します。</target>
        </trans-unit>
        <trans-unit id="04cbffd3b0130ad6c489cd7fc1fef24c43c3b6c7" translate="yes">
          <source>Now the child component has an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; for sending data to the parent and a method for raising an event. The next step is in the parent.</source>
          <target state="translated">現在、子コンポーネントには、親にデータを送信するための &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; と、イベントを発生させるメソッドがあります。 次のステップは親にあります。</target>
        </trans-unit>
        <trans-unit id="986f2c2b3de015effe713ac1a8299881bda3d82b" translate="yes">
          <source>Now the heroes appear in an unordered list.</source>
          <target state="translated">これで、ヒーローは順不同リストに表示されます。</target>
        </trans-unit>
        <trans-unit id="c558e1a9f826a6713ebc54a22692a56e087b7384" translate="yes">
          <source>Now the important hooks for component manipulation and inspection are neatly organized and accessible from an instance of &lt;code&gt;Page&lt;/code&gt;.</source>
          <target state="translated">コンポーネントの操作と検査のための重要なフックがきちんと整理され、 &lt;code&gt;Page&lt;/code&gt; のインスタンスからアクセスできるようになりました。</target>
        </trans-unit>
        <trans-unit id="34948bb00fba567aba833324a1c5ef72aacfd251" translate="yes">
          <source>Now the tests can control the component's hero directly by manipulating the spy-stub's &lt;code&gt;testHero&lt;/code&gt; and confirm that service methods were called.</source>
          <target state="translated">これで、テストは、 &lt;code&gt;testHero&lt;/code&gt; のtestHeroを操作してコンポーネントのヒーローを直接制御し、サービスメソッドが呼び出されたことを確認できます。</target>
        </trans-unit>
        <trans-unit id="79d069966db064de949cb3973e9deb864abd2d5b" translate="yes">
          <source>Now there are two AngularJS components using an Angular service! The components don't need to be aware of this, though the fact that the service returns observables and not promises is a bit of a giveaway. In any case, what you've achieved is a migration of a service to Angular without having to yet migrate the components that use it.</source>
          <target state="translated">現在、Angularサービスを使用する2つのAngularJSコンポーネントがあります！ コンポーネントはこれを意識する必要はありませんが、サービスが約束ではなくオブザーバブルを返すという事実はちょっとしたプレゼントです。 いずれにせよ、達成したことは、サービスを使用するコンポーネントをまだ移行することなく、サービスをAngularに移行することです。</target>
        </trans-unit>
        <trans-unit id="f57fe9ffc1bae9ad4f8dd8de9bd630ea15635769" translate="yes">
          <source>Now there's a new &lt;code&gt;&amp;lt;hero-contact&amp;gt;&lt;/code&gt; element between the &lt;code&gt;&amp;lt;hero-bio&amp;gt;&lt;/code&gt; tags. Angular &lt;em&gt;projects&lt;/em&gt;, or &lt;em&gt;transcludes&lt;/em&gt;, the corresponding &lt;code&gt;HeroContactComponent&lt;/code&gt; into the &lt;code&gt;HeroBioComponent&lt;/code&gt; view, placing it in the &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; slot of the &lt;code&gt;HeroBioComponent&lt;/code&gt; template.</source>
          <target state="translated">&lt;code&gt;&amp;lt;hero-bio&amp;gt;&lt;/code&gt; タグの間に新しい &lt;code&gt;&amp;lt;hero-contact&amp;gt;&lt;/code&gt; 要素が追加されました。 Angular&lt;em&gt;プロジェクト&lt;/em&gt; 、または対応する &lt;code&gt;HeroContactComponent&lt;/code&gt; を &lt;code&gt;HeroBioComponent&lt;/code&gt; ビューに&lt;em&gt;トランスクルードし&lt;/em&gt; 、 &lt;code&gt;HeroBioComponent&lt;/code&gt; テンプレートの &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; スロットに配置します。</target>
        </trans-unit>
        <trans-unit id="86530dec4e89aee683ff53e54908378941b3cfc5" translate="yes">
          <source>Now update the &lt;code&gt;AppModule&lt;/code&gt; to import this &lt;code&gt;AppRoutingModule&lt;/code&gt; and also the declare the root &lt;code&gt;AppComponent&lt;/code&gt; as the bootstrap component. That tells Angular that it should bootstrap the app with the &lt;em&gt;root&lt;/em&gt;&lt;code&gt;AppComponent&lt;/code&gt; and insert its view into the host web page.</source>
          <target state="translated">ここで &lt;code&gt;AppModule&lt;/code&gt; を更新して、このAppRoutingModuleをインポートし、ルート &lt;code&gt;AppComponent&lt;/code&gt; をブートストラップコンポーネントとして宣言します。 これは、 &lt;em&gt;ルート&lt;/em&gt; &lt;code&gt;AppComponent&lt;/code&gt; でアプリをブートストラップし、そのビューをホストWebページに挿入する必要があることをAngularに伝えます。</target>
        </trans-unit>
        <trans-unit id="ef7f7bf54822569df51016f2eea7f62a075f7da1" translate="yes">
          <source>Now use the Angular &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; directive in the template to display each item in the &lt;code&gt;heroes&lt;/code&gt; list.</source>
          <target state="translated">次に、テンプレートでAngular &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して、 &lt;code&gt;heroes&lt;/code&gt; リストの各アイテムを表示します。</target>
        </trans-unit>
        <trans-unit id="c5e8df4d912ab2294d4d374cc7572c8aa34fd245" translate="yes">
          <source>Now we can register the &lt;code&gt;&lt;a href=&quot;downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;&lt;/code&gt; factory function for the service on an AngularJS module.</source>
          <target state="translated">これで、AngularJSモジュールのサービスの &lt;code&gt;&lt;a href=&quot;downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;&lt;/code&gt; ファクトリー関数を登録できます。</target>
        </trans-unit>
        <trans-unit id="bbfe9f3467ea9d1c7a4aa835517f0ff9aab5c43b" translate="yes">
          <source>Now we'll add a new behavior:</source>
          <target state="translated">次に、新しい動作を追加します。</target>
        </trans-unit>
        <trans-unit id="528d2e0908f98fa3efc83ae32c0f20bf07aa4ba7" translate="yes">
          <source>Now when the user clicks a hero in the list, the &lt;code&gt;selectedHero&lt;/code&gt; changes. When the &lt;code&gt;selectedHero&lt;/code&gt; changes, the &lt;em&gt;property binding&lt;/em&gt; updates &lt;code&gt;hero&lt;/code&gt; and the &lt;code&gt;HeroDetailComponent&lt;/code&gt; displays the new hero.</source>
          <target state="translated">ユーザーがリスト内のヒーローをクリックすると、 &lt;code&gt;selectedHero&lt;/code&gt; が変更されます。 &lt;code&gt;selectedHero&lt;/code&gt; が変更されると、 &lt;em&gt;プロパティバインディング&lt;/em&gt;が &lt;code&gt;hero&lt;/code&gt; を更新し、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; が新しいヒーローを表示します。</target>
        </trans-unit>
        <trans-unit id="6b2f0b55b26a6856bc208626d11d23230d46684e" translate="yes">
          <source>Now when the user visits &lt;code&gt;/sidekicks&lt;/code&gt;, or any other invalid URL, the browser displays &quot;Page not found&quot;. The browser address bar continues to point to the invalid URL.</source>
          <target state="translated">ユーザーが &lt;code&gt;/sidekicks&lt;/code&gt; またはその他の無効なURLにアクセスすると、ブラウザーに「ページが見つかりません」と表示されます。 ブラウザのアドレスバーは、引き続き無効なURLを指します。</target>
        </trans-unit>
        <trans-unit id="f18771d1acfd3f12792bd6860e4c6e5e7b69fe39" translate="yes">
          <source>Now when you use Angular CLI build commands such as &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt;, Bazel is used behind the scenes. Outputs from Bazel appear in the &lt;code&gt;dist/bin&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;ng build&lt;/code&gt; や &lt;code&gt;ng serve&lt;/code&gt; などのAngular CLIビルドコマンドを使用すると、Bazelが舞台裏で使用されます。 Bazelからの出力は、 &lt;code&gt;dist/bin&lt;/code&gt; フォルダーに表示されます。</target>
        </trans-unit>
        <trans-unit id="c7a0ab3599c8865f3372601be75f741199232fc1" translate="yes">
          <source>Now wrap the Angular &lt;code&gt;Heroes&lt;/code&gt; in an &lt;em&gt;AngularJS factory function&lt;/em&gt; using &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; and plug the factory into an AngularJS module. The name of the AngularJS dependency is up to you:</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; を使用してAngular &lt;code&gt;Heroes&lt;/code&gt; を&lt;em&gt;AngularJSファクトリー関数&lt;/em&gt;でラップし、ファクトリーをAngularJSモジュールにプラグインします。 AngularJS依存関係の名前はあなた次第です。</target>
        </trans-unit>
        <trans-unit id="b53b500dedb6cbfa865600fcab08edc6dcc7f98c" translate="yes">
          <source>Now you are responsible for chaining promises, handling errors, and calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; at the appropriate moments.</source>
          <target state="translated">これで、適切なタイミングでプロミスのチェーン、エラーの処理、および &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; 呼び出しを行うことができます。</target>
        </trans-unit>
        <trans-unit id="bf3218e36c36c89f9fee5810ace8f73165c4690d" translate="yes">
          <source>Now you can add a simpler, more meaningful parent provider to your components.</source>
          <target state="translated">これで、よりシンプルで意味のある親プロバイダーをコンポーネントに追加できます。</target>
        </trans-unit>
        <trans-unit id="8e751b56a276d93f307ef9bedf14488b9d1a112b" translate="yes">
          <source>Now you can bootstrap &lt;code&gt;AppModule&lt;/code&gt; using the &lt;code&gt;platformBrowserDynamic.bootstrapModule&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;platformBrowserDynamic.bootstrapModule&lt;/code&gt; メソッドを使用して &lt;code&gt;AppModule&lt;/code&gt; をブートストラップできるようになりました 。</target>
        </trans-unit>
        <trans-unit id="5b3a1e136b1ed93fc9d6cc4cd3e580ac201d867b" translate="yes">
          <source>Now you can inject the configuration object into any constructor that needs it, with the help of an &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; parameter decorator.</source>
          <target state="translated">これで、 &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;()&lt;/code&gt; パラメーターデコレーターの助けを借りて、構成オブジェクトをそれを必要とする任意のコンストラクターに注入できます。</target>
        </trans-unit>
        <trans-unit id="92781f6a0d78ccaff03bcde26ff2133b15b2c96d" translate="yes">
          <source>Now you can load Angular via SystemJS. You'll add the Angular polyfills and the SystemJS config to the end of the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section, and then you'll use &lt;code&gt;System.import&lt;/code&gt; to load the actual application:</source>
          <target state="translated">これで、SystemJSを介してAngularをロードできます。 Angular polyfillsとSystemJS configを &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; セクションの最後に追加し、 &lt;code&gt;System.import&lt;/code&gt; を使用して実際のアプリケーションをロードします。</target>
        </trans-unit>
        <trans-unit id="671596674e3bd86db46df7786e3533ea2f9ec0b8" translate="yes">
          <source>Now you can run the following commands to use the &lt;code&gt;--no-sandbox&lt;/code&gt; flag:</source>
          <target state="translated">次のコマンドを実行して、 &lt;code&gt;--no-sandbox&lt;/code&gt; フラグを使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="a632b016e2d489b2a5e6887cbe4b9669e8232050" translate="yes">
          <source>Now you can use this function to create an observable that publishes keydown events:</source>
          <target state="translated">これで、この関数を使用して、キーダウンイベントを発行するオブザーバブルを作成できます。</target>
        </trans-unit>
        <trans-unit id="16250db81b906938bfea1e09f9e36f390523963f" translate="yes">
          <source>Now you can write a test that expects a GET Request to occur and provides a mock response.</source>
          <target state="translated">これで、GETリクエストの発生を想定し、模擬応答を提供するテストを作成できます。</target>
        </trans-unit>
        <trans-unit id="356534438954877109de052a08e665aecd075a19" translate="yes">
          <source>Now you could use your &lt;code&gt;ItemDirective&lt;/code&gt; in a component. This example uses &lt;code&gt;AppModule&lt;/code&gt;, but you'd do it the same way for a feature module. For more about directives, see &lt;a href=&quot;attribute-directives&quot;&gt;Attribute Directives&lt;/a&gt; and &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;. You'd also use the same technique for &lt;a href=&quot;pipes&quot;&gt;pipes&lt;/a&gt; and components.</source>
          <target state="translated">これで、コンポーネントで &lt;code&gt;ItemDirective&lt;/code&gt; を使用できます。 この例では &lt;code&gt;AppModule&lt;/code&gt; を使用していますが、機能モジュールに対しても同じ方法で実行できます。 ディレクティブの詳細については、 &lt;a href=&quot;attribute-directives&quot;&gt;属性ディレクティブ&lt;/a&gt;と&lt;a href=&quot;structural-directives&quot;&gt;構造&lt;/a&gt;ディレクティブを参照してください。 &lt;a href=&quot;pipes&quot;&gt;パイプ&lt;/a&gt;とコンポーネントにも同じテクニックを使用します。</target>
        </trans-unit>
        <trans-unit id="08b3b4b158b49b816ee798f564ecf6070bd36d04" translate="yes">
          <source>Now you have a reason. You'd like to send the id of the current hero with the navigation request so that the &lt;code&gt;HeroListComponent&lt;/code&gt; can highlight that hero in its list. This is a &lt;em&gt;nice-to-have&lt;/em&gt; feature; the list will display perfectly well without it.</source>
          <target state="translated">これには理由があります。 &lt;code&gt;HeroListComponent&lt;/code&gt; がそのヒーローをリスト内で強調表示できるように、ナビゲーションリクエストで現在のヒーローのIDを送信する必要があります。 これは&lt;em&gt;便利な&lt;/em&gt;機能です。 リストはそれなしでも完璧に表示されます。</target>
        </trans-unit>
        <trans-unit id="e3f68c2bd54737b5c6746e2a67e9c5ba506525fc" translate="yes">
          <source>Now you have given the user a safeguard against unsaved changes.</source>
          <target state="translated">これで、保存されていない変更に対する保護手段がユーザーに与えられました。</target>
        </trans-unit>
        <trans-unit id="1e8ad82e05d360e9326ee3754fdc722c68635783" translate="yes">
          <source>Now you have routes configured and a place to render them, but how do you navigate? The URL could arrive directly from the browser address bar. But most of the time you navigate as a result of some user action such as the click of an anchor tag.</source>
          <target state="translated">ルートが設定され、それらをレンダリングする場所ができましたが、どのようにナビゲートしますか？ URLは、ブラウザのアドレスバーから直接届きます。 ただし、ほとんどの場合、アンカータグのクリックなどのユーザーアクションの結果としてナビゲートします。</target>
        </trans-unit>
        <trans-unit id="b8c6e28101d2f0f1ed27e2a0e238ac7868512ff9" translate="yes">
          <source>Now you know how to use:</source>
          <target state="translated">これで使用方法がわかりました。</target>
        </trans-unit>
        <trans-unit id="e45e3fae7d5230f9b1d361a75f6be79b5239cb1e" translate="yes">
          <source>Now you need a component to demonstrate the pipe.</source>
          <target state="translated">ここで、パイプをデモンストレーションするためのコンポーネントが必要です。</target>
        </trans-unit>
        <trans-unit id="4865f9da84f736082da0ef0ad2c1a4452653ff0e" translate="yes">
          <source>Now you need to display, listen, and extract at the same time.</source>
          <target state="translated">次に、表示、聴取、および抽出を同時に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="00d327498fa04d0aaac0be71048c528436ce2590" translate="yes">
          <source>Now you need to downgrade the Angular component so you can use it in AngularJS. Instead of registering a component, you register a &lt;code&gt;phoneList&lt;/code&gt;&lt;em&gt;directive&lt;/em&gt;, a downgraded version of the Angular component.</source>
          <target state="translated">次に、AngularJSで使用できるように、Angularコンポーネントをダウングレードする必要があります。 コンポーネントを登録する代わりに、Angularコンポーネントのダウングレードバージョンである &lt;code&gt;phoneList&lt;/code&gt; &lt;em&gt;ディレクティブ&lt;/em&gt;を登録します。</target>
        </trans-unit>
        <trans-unit id="fabcfe9c39b7ee5e5ed15fce8613e94110abca6e" translate="yes">
          <source>Now you should see both values in the browser:</source>
          <target state="translated">これで、ブラウザーに両方の値が表示されます。</target>
        </trans-unit>
        <trans-unit id="1105126bb0a082c27dd2fce38db2b1d997ad4d8a" translate="yes">
          <source>Now you take the &lt;code&gt;Observables&lt;/code&gt; returned by the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods and &lt;em&gt;pipe them through&lt;/em&gt; to the error handler.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドによって返される &lt;code&gt;Observables&lt;/code&gt; を取得し、エラーハンドラーに&lt;em&gt;パイプ&lt;/em&gt;処理します。</target>
        </trans-unit>
        <trans-unit id="7c76b1b8a7d7aaadbd28641ed869fde4cd933d60" translate="yes">
          <source>Now you'll add a new hero in this form. Place a &lt;em&gt;New Hero&lt;/em&gt; button at the bottom of the form and bind its click event to a &lt;code&gt;newHero&lt;/code&gt; component method.</source>
          <target state="translated">次に、このフォームに新しいヒーローを追加します。 フォームの下部に&lt;em&gt;New Hero&lt;/em&gt;ボタンを配置し、そのクリックイベントを &lt;code&gt;newHero&lt;/code&gt; コンポーネントメソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="26617f4ec7367082b5f75aa3b416bfdad0724a39" translate="yes">
          <source>Now you'll find new files in the Angular workspace:</source>
          <target state="translated">これで、Angularワークスペースに新しいファイルが見つかります。</target>
        </trans-unit>
        <trans-unit id="2d3847dde2903544e105c418a10a089b32c1dd6f" translate="yes">
          <source>Now you're able to serve everything from the project root to the web browser. But you do &lt;em&gt;not&lt;/em&gt; want to have to change all the image and data paths used in the application code to match the development setup. For that reason, you'll add a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag to &lt;code&gt;index.html&lt;/code&gt;, which will cause relative URLs to be resolved back to the &lt;code&gt;/app&lt;/code&gt; directory:</source>
          <target state="translated">これで、プロジェクトルートからWebブラウザまですべてを提供できるようになりました。 ただし、開発セットアップに合わせて、アプリケーションコードで使用されるすべてのイメージとデータパスを変更する必要はあり&lt;em&gt;ませ&lt;/em&gt;ん。 そのため、 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; タグを &lt;code&gt;index.html&lt;/code&gt; に追加します。これにより、相対URLが &lt;code&gt;/app&lt;/code&gt; ディレクトリに解決されます。</target>
        </trans-unit>
        <trans-unit id="363d917bd91f09c26b866a93a351a24478afcbb7" translate="yes">
          <source>Now you're ready to upgrade the Phone service itself. Replace the ngResource-based service in &lt;code&gt;phone.service.ts&lt;/code&gt; with a TypeScript class decorated as &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">これで、電話サービス自体をアップグレードする準備が整いました。 phone.service.tsのngResourceベースのサービスを、 &lt;code&gt;phone.service.ts&lt;/code&gt; として装飾されたTypeScriptクラスに置き換えます。</target>
        </trans-unit>
        <trans-unit id="a17920b9482ce1526748ebaf014e32af7b4ed95d" translate="yes">
          <source>Now you're running both AngularJS and Angular at the same time. That's pretty exciting! You're not running any actual Angular components yet. That's next.</source>
          <target state="translated">これで、AngularJSとAngularの両方を同時に実行しています。 とてもエキサイティングです！ 実際のAngularコンポーネントはまだ実行していません。 次です。</target>
        </trans-unit>
        <trans-unit id="c5c23b237493ba58118ecd74acb24f6f9116315f" translate="yes">
          <source>Now, TypeScript can infer the correct type the same way it does for built-in elements:</source>
          <target state="translated">現在、TypeScriptは、組み込み要素の場合と同じ方法で正しい型を推測できます。</target>
        </trans-unit>
        <trans-unit id="3073c011b4b03879fb8a69030fdf30c2deaac0bd" translate="yes">
          <source>Now, build the project:</source>
          <target state="translated">次に、プロジェクトをビルドします。</target>
        </trans-unit>
        <trans-unit id="e58d24f967ec605a4277e1e12ff5ad0a0072076d" translate="yes">
          <source>Now, consider that &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; simply injects the &lt;code&gt;FlowerService&lt;/code&gt;:</source>
          <target state="translated">ここで、 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; が単に &lt;code&gt;FlowerService&lt;/code&gt; を注入することを考慮してください ：</target>
        </trans-unit>
        <trans-unit id="385db9851e8dc59eb84001ba56b61b83700866e3" translate="yes">
          <source>Now, in addition to the title that renders by default, the &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; template renders too:</source>
          <target state="translated">これで、デフォルトでレンダリングされるタイトルに加えて、 &lt;code&gt;CustomerDashboardComponent&lt;/code&gt; テンプレートもレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="0f211056413d313893fd33573b60be910667bdea" translate="yes">
          <source>Now, in order to see the &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; working, add the following to the parent's template:</source>
          <target state="translated">ここで、 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 機能することを確認するために、次を親のテンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="9816372ece2e5b46145f86d307b0ae1bede3b9e4" translate="yes">
          <source>Now, in the &lt;code&gt;ChildComponent&lt;/code&gt; class, add a provider for &lt;code&gt;FlowerService&lt;/code&gt; to demonstrate more complex resolution rules in the upcoming sections:</source>
          <target state="translated">次に、 &lt;code&gt;ChildComponent&lt;/code&gt; クラスにFlowerServiceのプロバイダーを追加して、今後のセクションでより複雑な解決規則を示します。</target>
        </trans-unit>
        <trans-unit id="164448af25ecb5d5af743c8f0404254be8b97103" translate="yes">
          <source>Now, on every HTTP request made on the server, this interceptor will fire and replace the request URL with the absolute URL provided in the Express &lt;code&gt;Request&lt;/code&gt; object.</source>
          <target state="translated">これで、サーバーで行われたすべてのHTTPリクエストで、このインターセプターが起動し、リクエストURLをExpress &lt;code&gt;Request&lt;/code&gt; オブジェクトで提供された絶対URLに置き換えます。</target>
        </trans-unit>
        <trans-unit id="e673af9c12c7e8dae720c59a0aa4117bfe1a7584" translate="yes">
          <source>Now, put it all together in a micro-app that can display a list of heroes and add new heroes to the list. The user can add a hero by typing the hero's name in the input box and clicking &lt;strong&gt;Add&lt;/strong&gt;.</source>
          <target state="translated">さて、ヒーローのリストを表示し、リストに新しいヒーローを追加できるマイクロアプリにすべてをまとめます。 ユーザーは、入力ボックスにヒーローの名前を入力し、[ &lt;strong&gt;追加&lt;/strong&gt; ] &lt;strong&gt;を&lt;/strong&gt;クリックしてヒーローを&lt;strong&gt;追加でき&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cb9abbba83c51ed21e4fde40ffb5f6a4d73e60ca" translate="yes">
          <source>Now, when the user clicks on a name in the product list, the router navigates you to the distinct URL for the product, swaps out the product list component for the product details component, and displays the product details.</source>
          <target state="translated">これで、ユーザーが製品リストの名前をクリックすると、ルーターは製品の個別のURLに移動し、製品リストコンポーネントを製品詳細コンポーネントに交換し、製品詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="68ad64394ecf25c54bd8b619f657dede48d26165" translate="yes">
          <source>Now, you can click on the &lt;em&gt;Admin&lt;/em&gt; button, which takes you to the &lt;em&gt;Login&lt;/em&gt; page with the provided &lt;code&gt;queryParamMap&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt;. After you click the login button, notice that you have been redirected to the &lt;code&gt;Admin Dashboard&lt;/code&gt; page with the query parameters and fragment still intact in the address bar.</source>
          <target state="translated">これで、 &lt;em&gt;管理&lt;/em&gt;ボタンをクリックして、提供された &lt;code&gt;queryParamMap&lt;/code&gt; と &lt;code&gt;fragment&lt;/code&gt; のある&lt;em&gt;ログイン&lt;/em&gt;ページに移動できます。 ログインボタンをクリックすると、アドレスバーにクエリパラメータとフラグメントがそのまま表示された状態で、 &lt;code&gt;Admin Dashboard&lt;/code&gt; ページにリダイレクトされたことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1e8fdc533e7ebf361eee022748adf90dbdd429b0" translate="yes">
          <source>Number of bytes uploaded or downloaded.</source>
          <target state="translated">アップロードまたはダウンロードされたバイト数。</target>
        </trans-unit>
        <trans-unit id="8e3ed072350bf6896bfd56e3372a8adbb401f793" translate="yes">
          <source>Number of child segments</source>
          <target state="translated">子セグメントの数</target>
        </trans-unit>
        <trans-unit id="980b65576d0aa6729d710f3af55159749210dffd" translate="yes">
          <source>NumberFormatStyle</source>
          <target state="translated">NumberFormatStyle</target>
        </trans-unit>
        <trans-unit id="669cf27771d36a7a86ce7ca843b106933857036b" translate="yes">
          <source>NumberSymbol</source>
          <target state="translated">NumberSymbol</target>
        </trans-unit>
        <trans-unit id="f6886cefb07980bc0c752b8e9f1ae3bffc341dd5" translate="yes">
          <source>NumberValueAccessor</source>
          <target state="translated">NumberValueAccessor</target>
        </trans-unit>
        <trans-unit id="ea7a1484b29f720f95c48a50411655a57d7b5eea" translate="yes">
          <source>Numbers are formatted using patterns, like &lt;code&gt;#,###.00&lt;/code&gt;. For example, the pattern &lt;code&gt;#,###.00&lt;/code&gt; when used to format the number 12345.678 could result in &quot;12'345,678&quot;. That would happen if the grouping separator for your language is an apostrophe, and the decimal separator is a comma.</source>
          <target state="translated">番号は、 &lt;code&gt;#,###.00&lt;/code&gt; などのパターンを使用してフォーマットされます。 たとえば、番号12345.678のフォーマットに使用されるパターン &lt;code&gt;#,###.00&lt;/code&gt; は、「12'345,678」になる可能性があります。 これは、言語のグループ化区切り記号がアポストロフィであり、小数点区切り記号がコンマの場合に発生します。</target>
        </trans-unit>
        <trans-unit id="30a62380404b3b267a5c4e21b5e111455d09031e" translate="yes">
          <source>Numeric</source>
          <target state="translated">Numeric</target>
        </trans-unit>
        <trans-unit id="f61f58717243894f8209850e6dfa27b4866bcd15" translate="yes">
          <source>Numeric: 1 digit</source>
          <target state="translated">数値：1桁</target>
        </trans-unit>
        <trans-unit id="c897da7ae95620ddc7ab4eaba13d88ee997ba04d" translate="yes">
          <source>Numeric: 2 digits + zero padded</source>
          <target state="translated">数値：2桁+ゼロ埋め込み</target>
        </trans-unit>
        <trans-unit id="ac85e289a5111a49c093b32446dacd1413a69c3e" translate="yes">
          <source>Numeric: 3 digits + zero padded</source>
          <target state="translated">数値：3桁+ゼロ詰め</target>
        </trans-unit>
        <trans-unit id="9c0c408032d6d01311f2e91f8ee8db893fffb761" translate="yes">
          <source>Numeric: 3 digits + zero padded (= milliseconds)</source>
          <target state="translated">数値：3桁+ゼロ埋め込み（=ミリ秒）</target>
        </trans-unit>
        <trans-unit id="6aafe96d17fdf0fc3b92893d2c4193c2158eab30" translate="yes">
          <source>Numeric: 4 digits or more + zero padded</source>
          <target state="translated">数値：4桁以上+ゼロ詰め</target>
        </trans-unit>
        <trans-unit id="b25a8cc7dee6909ece362fa9930471d58a49bce6" translate="yes">
          <source>Numeric: minimum digits</source>
          <target state="translated">数値：最小桁</target>
        </trans-unit>
        <trans-unit id="d459255f682464b4bc2d85fd539283259e417475" translate="yes">
          <source>O, OO &amp;amp; OOO</source>
          <target state="translated">O、OO、OOO</target>
        </trans-unit>
        <trans-unit id="de972b449781e8b363165664000a140bc87f8bef" translate="yes">
          <source>OOOO</source>
          <target state="translated">OOOO</target>
        </trans-unit>
        <trans-unit id="e70d3bd602e4616ed521dbc75b821aaa43066442" translate="yes">
          <source>OPTIONS PROPERTIES</source>
          <target state="translated">オプションのプロパティ</target>
        </trans-unit>
        <trans-unit id="1abfd8fa9e86107dd0aaf00ccf53b9d31cdd4ba7" translate="yes">
          <source>OR install it with npm: &lt;code&gt;npm install -g typescript@latest&lt;/code&gt;.</source>
          <target state="translated">または &lt;code&gt;npm install -g typescript@latest&lt;/code&gt; します： npm install -g typescript @ latest</target>
        </trans-unit>
        <trans-unit id="99e39cba79f65e281b455366f9242549288d5dcf" translate="yes">
          <source>OS/X (bash)</source>
          <target state="translated">OS / X（bash）</target>
        </trans-unit>
        <trans-unit id="c92258fa87a7fd87bfb0eac39b2cad3876c1531d" translate="yes">
          <source>Observable</source>
          <target state="translated">Observable</target>
        </trans-unit>
        <trans-unit id="785a3f3b0ea9d70aa55967dc49e804eb212006fc" translate="yes">
          <source>Observable &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">Observable &lt;code&gt;HeroService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6e2fb333ea04d6d296092c9bdec270aaafff8db" translate="yes">
          <source>Observable creation functions</source>
          <target state="translated">観察可能な作成関数</target>
        </trans-unit>
        <trans-unit id="62e8435b07b0e929cc1dffa87e53ebbceb45ce20" translate="yes">
          <source>Observable data</source>
          <target state="translated">観測可能なデータ</target>
        </trans-unit>
        <trans-unit id="0f83ae35ff248bf8cb655221ad8206b62264675a" translate="yes">
          <source>Observable execution errors are delivered to the subscriber's error handler, and the subscriber automatically unsubscribes from the observable.</source>
          <target state="translated">観察可能な実行エラーはサブスクライバーのエラーハンドラーに配信され、サブスクライバーは自動的にオブザーバブルのサブスクリプションを解除します。</target>
        </trans-unit>
        <trans-unit id="90874d5fd2f5124aeb81b5ae417389012587a628" translate="yes">
          <source>Observable subscriptions are cancellable. Unsubscribing removes the listener from receiving further values, and notifies the subscriber function to cancel work.</source>
          <target state="translated">観察可能なサブスクリプションはキャンセル可能です。 サブスクライブを解除すると、リスナーはそれ以上の値を受信できなくなり、サブスクライバー関数に作業をキャンセルするよう通知します。</target>
        </trans-unit>
        <trans-unit id="8136b5b444e74956953de6d7e21de45a7208ed8b" translate="yes">
          <source>Observables</source>
          <target state="translated">Observables</target>
        </trans-unit>
        <trans-unit id="30e14d185eeb8490cc7c75c30432edec8f889146" translate="yes">
          <source>Observables &lt;code&gt;subscribe()&lt;/code&gt; is responsible for handling errors. Promises push errors to the child promises. This makes observables useful for centralized and predictable error handling.</source>
          <target state="translated">Observables &lt;code&gt;subscribe()&lt;/code&gt; はエラーの処理を担当します。 Promiseは、子Promiseにエラーをプッシュします。 これにより、オブザーバブルは、集中化された予測可能なエラー処理に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8966e8f44fb07002812ce2f223c191c58f1d0d9d" translate="yes">
          <source>Observables and operators</source>
          <target state="translated">オブザーバブルと演算子</target>
        </trans-unit>
        <trans-unit id="2c0a8f53cdda10ab0bd4d5887abc2a699e9095ee" translate="yes">
          <source>Observables are declarative&amp;mdash;that is, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.</source>
          <target state="translated">オブザーバブルは宣言的です。つまり、値を公開するための関数を定義しますが、コンシューマがサブスクライブするまで実行されません。 サブスクライブしたコンシューマーは、機能が完了するか、サブスクライブを解除するまで通知を受け取ります。</target>
        </trans-unit>
        <trans-unit id="93ab2117177a7d20d9111101ecd4f4e38e6f877b" translate="yes">
          <source>Observables are declarative; computation does not start until subscription. Promises execute immediately on creation. This makes observables useful for defining recipes that can be run whenever you need the result.</source>
          <target state="translated">オブザーバブルは宣言的です。 サブスクリプションまで計算は開始されません。 Promiseは作成時にすぐに実行されます。 これにより、オブザーバブルは、結果が必要なときにいつでも実行できるレシピを定義するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b160012c6166e34c5bdefa46dcac19c1bac94227" translate="yes">
          <source>Observables are not executed until a consumer subscribes. The &lt;code&gt;subscribe()&lt;/code&gt; executes the defined behavior once, and it can be called again. Each subscription has its own computation. Resubscription causes recomputation of values.</source>
          <target state="translated">オブザーバブルは、コンシューマーがサブスクライブするまで実行されません。 &lt;code&gt;subscribe()&lt;/code&gt; は定義された動作を1回実行し、再度呼び出すことができます。 各サブスクリプションには独自の計算があります。 再サブスクリプションにより、値が再計算されます。</target>
        </trans-unit>
        <trans-unit id="2e102ee69c779948f1ae41fc642ce5644eb359da" translate="yes">
          <source>Observables are often compared to promises. Here are some key differences:</source>
          <target state="translated">オブザーバブルはしばしば約束と比較されます。 主な違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9bb28d4febb9104ac022af5489313da08d4e8b56" translate="yes">
          <source>Observables are very similar to event handlers that use the events API. Both techniques define notification handlers, and use them to process multiple values delivered over time. Subscribing to an observable is equivalent to adding an event listener. One significant difference is that you can configure an observable to transform an event before passing the event to the handler.</source>
          <target state="translated">オブザーバブルは、イベントAPIを使用するイベントハンドラーに非常に似ています。 どちらの手法も通知ハンドラーを定義し、それらを使用して、時間の経過とともに配信される複数の値を処理します。 オブザーバブルをサブスクライブすることは、イベントリスナーを追加することと同じです。 大きな違いの1つは、イベントをハンドラーに渡す前にイベントを変換するようにオブザーバブルを構成できることです。</target>
        </trans-unit>
        <trans-unit id="1e59290cc3930f973e0b29f99ba859aad65b89ac" translate="yes">
          <source>Observables behave somewhat differently from the alternative techniques in each of these situations, but offer some significant advantages. Here are detailed comparisons of the differences.</source>
          <target state="translated">オブザーバブルの動作は、これらの各状況の代替技術とは多少異なりますが、いくつかの重要な利点があります。 違いの詳細な比較を次に示します。</target>
        </trans-unit>
        <trans-unit id="29b86c845413a3110f1c6984def0e28e9af725a3" translate="yes">
          <source>Observables can deliver single or multiple values of any type to subscribers, either synchronously (as a function delivers a value to its caller) or on a schedule. A subscriber receives notification of new values as they are produced and notification of either normal completion or error completion.</source>
          <target state="translated">オブザーバブルは、同期的に（関数が呼び出し元に値を配信するように）またはスケジュールに従って、任意のタイプの単一または複数の値をサブスクライバーに配信できます。 サブスクライバーは、新しい値が生成されると、正常な完了またはエラー完了の通知を受け取ります。</target>
        </trans-unit>
        <trans-unit id="e64a10ecf32eddcfb93b7609d0a93da2a9d645b7" translate="yes">
          <source>Observables can simplify the implementation of type-ahead suggestions. Typically, a type-ahead has to do a series of separate tasks:</source>
          <target state="translated">オブザーバブルは、先行入力の提案の実装を簡素化できます。 通常、先行入力は一連の個別のタスクを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="54ed5cd5266bdfeb305f4a9d721d88b6f8ac158e" translate="yes">
          <source>Observables compared to arrays</source>
          <target state="translated">配列と比較したオブザーバブル</target>
        </trans-unit>
        <trans-unit id="33061d9aa51ad55e0e39ece1c9fce85ebbe96428" translate="yes">
          <source>Observables compared to events API</source>
          <target state="translated">イベントAPIと比較したオブザーバブル</target>
        </trans-unit>
        <trans-unit id="7e83cd6a82ab26bd772a156a7d590b954e6b51bd" translate="yes">
          <source>Observables compared to other techniques</source>
          <target state="translated">他の技術と比較したオブザーバブル</target>
        </trans-unit>
        <trans-unit id="5855fd77921e99a1e777d7a837b5fc8fbfedaf31" translate="yes">
          <source>Observables compared to promises</source>
          <target state="translated">約束と比較したオブザーバブル</target>
        </trans-unit>
        <trans-unit id="4d544e0f81246ce890ad290e4eb8a63576d6546d" translate="yes">
          <source>Observables differentiate between chaining and subscription. Promises only have &lt;code&gt;.then()&lt;/code&gt; clauses. This makes observables useful for creating complex transformation recipes to be used by other part of the system, without causing the work to be executed.</source>
          <target state="translated">オブザーバブルは、チェーンとサブスクリプションを区別します。 &lt;code&gt;.then()&lt;/code&gt; は.then（）句のみがあります。 これにより、オブザーバブルは、作業を実行せずに、システムの他の部分で使用される複雑な変換レシピを作成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4f31634276ae0b6d7da9429fe6a77b639c9c5b4a" translate="yes">
          <source>Observables differentiate between transformation function such as a map and subscription. Only subscription activates the subscriber function to start computing the values.</source>
          <target state="translated">オブザーバブルは、マップやサブスクリプションなどの変換機能を区別します。 サブスクリプションのみがサブスクライバー機能をアクティブにして、値の計算を開始します。</target>
        </trans-unit>
        <trans-unit id="2542058ccb21f3ec072eb961a2e4af69d7704ac0" translate="yes">
          <source>Observables do not mutate the server response (as can occur through chained &lt;code&gt;.then()&lt;/code&gt; calls on promises). Instead, you can use a series of operators to transform values as needed.</source>
          <target state="translated">オブザーバブルは、サーバーの応答を変更しません（ &lt;code&gt;.then()&lt;/code&gt; 連鎖.then（）呼び出しで発生する可能性があります）。 代わりに、一連の演算子を使用して、必要に応じて値を変換できます。</target>
        </trans-unit>
        <trans-unit id="d64b02b67e25d074f407a93f93433a03bc63e743" translate="yes">
          <source>Observables in Angular</source>
          <target state="translated">Angularのオブザーバブル</target>
        </trans-unit>
        <trans-unit id="9d8868d84d679957521451004f5fad171a308cdd" translate="yes">
          <source>Observables provide many values. Promises provide one. This makes observables useful for getting multiple values over time.</source>
          <target state="translated">オブザーバブルは多くの値を提供します。 約束は1つを提供します。 これにより、経時的に複数の値を取得するためにオブザーバブルが役立ちます。</target>
        </trans-unit>
        <trans-unit id="109c7ef3fece22c5a2d3b858b2a395fe70285d16" translate="yes">
          <source>Observables provide support for passing messages between publishers and subscribers in your application. Observables offer significant benefits over other techniques for event handling, asynchronous programming, and handling multiple values.</source>
          <target state="translated">Observableは、アプリケーションのパブリッシャーとサブスクライバーの間でメッセージを渡すためのサポートを提供します。 オブザーバブルは、イベント処理、非同期プログラミング、および複数の値を処理するための他の手法よりも大きな利点を提供します。</target>
        </trans-unit>
        <trans-unit id="461ebaa1f07be70daced315214b9277178250b82" translate="yes">
          <source>Observations</source>
          <target state="translated">Observations</target>
        </trans-unit>
        <trans-unit id="4225298b274ef1bf2a3a26f4929b85790965a9dd" translate="yes">
          <source>Obtaining a component reference is a bit tricky in Angular. Angular components themselves do not have a tree that you can inspect or navigate programmatically. The parent-child relationship is indirect, established through the components' &lt;a href=&quot;glossary#view&quot;&gt;view objects&lt;/a&gt;.</source>
          <target state="translated">コンポーネント参照を取得することは、Angularでは少し注意が必要です。 Angularコンポーネント自体には、プログラムで検査またはナビゲートできるツリーがありません。 親子関係は間接的であり、コンポーネントの&lt;a href=&quot;glossary#view&quot;&gt;ビューオブジェクト&lt;/a&gt;を通じて確立されます 。</target>
        </trans-unit>
        <trans-unit id="5c35043d70a29551f83f6e081cebe2ff9400c970" translate="yes">
          <source>Occasionally APIs change formats in a way that is not backward-compatible. A new version of the app may not be compatible with the old API format and thus may not be compatible with existing cached resources from that API.</source>
          <target state="translated">時折、APIは後方互換性のない方法でフォーマットを変更します。 アプリの新しいバージョンは、古いAPI形式と互換性がない可能性があるため、そのAPIの既存のキャッシュリソースと互換性がない可能性があります。</target>
        </trans-unit>
        <trans-unit id="16303cc54c8dfe2f9470baf107ce29acea50d287" translate="yes">
          <source>Occasionally, it may be necessary to examine the Angular service worker in a running state to investigate issues or to ensure that it is operating as designed. Browsers provide built-in tools for debugging service workers and the Angular service worker itself includes useful debugging features.</source>
          <target state="translated">場合によっては、問題を調査したり、設計どおりに動作していることを確認するために、実行中の状態のAngular Service Workerを調べることが必要になる場合があります。 ブラウザには、Service Workerをデバッグするための組み込みツールが用意されており、Angular Service Worker自体には便利なデバッグ機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="07da3eb47577618d394c3fa8b0a5590861dab816" translate="yes">
          <source>Oct 18, 2018</source>
          <target state="translated">2018年10月18日</target>
        </trans-unit>
        <trans-unit id="25cfa189f2f5f94f39538dcc8442014aa9fc4b86" translate="yes">
          <source>October/November 2019</source>
          <target state="translated">2019年10月/ 11月</target>
        </trans-unit>
        <trans-unit id="8c0697187ec5c3bf075b63a3ce1c75bbd5841f7c" translate="yes">
          <source>Of course it catches errors in much the same manner &lt;a href=&quot;http#error-details&quot;&gt;described above&lt;/a&gt;.</source>
          <target state="translated">もちろん、 &lt;a href=&quot;http#error-details&quot;&gt;上記&lt;/a&gt;とほぼ同じ方法でエラーをキャッチします。</target>
        </trans-unit>
        <trans-unit id="2d89f448342550836237d3ab6b17deef13e83f94" translate="yes">
          <source>Of course specs that test the test helpers belong in the &lt;code&gt;test&lt;/code&gt; folder, next to their corresponding helper files.</source>
          <target state="translated">もちろん、テストヘルパーをテストする仕様は、対応するヘルパーファイルの隣の &lt;code&gt;test&lt;/code&gt; フォルダーに属します。</target>
        </trans-unit>
        <trans-unit id="9fcca52a438d7d41edd046584c4cc1cdfc971762" translate="yes">
          <source>Of course you could reach into the DOM with standard JavaScript and attach event listeners manually. There are at least three problems with &lt;em&gt;that&lt;/em&gt; approach:</source>
          <target state="translated">もちろん、標準のJavaScriptを使用してDOMにアクセスし、イベントリスナーを手動でアタッチできます。 このアプローチには少なくとも3つの問題があります。</target>
        </trans-unit>
        <trans-unit id="e35b2ed1b9fd7dd8c47eb313124eb5710d9f1f7b" translate="yes">
          <source>Of course, &lt;code&gt;HeroListComponent&lt;/code&gt; should do something with the injected &lt;code&gt;HeroService&lt;/code&gt;. Here's the revised component, making use of the injected service, side-by-side with the previous version for comparison.</source>
          <target state="translated">もちろん、 &lt;code&gt;HeroListComponent&lt;/code&gt; は注入された &lt;code&gt;HeroService&lt;/code&gt; で何かを行う必要があります。 注入されたサービスを利用して、比較のために以前のバージョンと並べて、修正されたコンポーネントを次に示します。</target>
        </trans-unit>
        <trans-unit id="ce667716547fa82bc8795ad7ef205e9410193ed0" translate="yes">
          <source>Offset</source>
          <target state="translated">Offset</target>
        </trans-unit>
        <trans-unit id="615221e93de5702f56502c83077e51e2f8408f40" translate="yes">
          <source>Often this function will be implemented using an ES dynamic &lt;code&gt;import()&lt;/code&gt; expression. For example:</source>
          <target state="translated">多くの場合、この関数はES dynamic &lt;code&gt;import()&lt;/code&gt; 式を使用して実装されます。 例えば：</target>
        </trans-unit>
        <trans-unit id="d99af778bebf475f57e3b69188e55ece9df9bc8d" translate="yes">
          <source>Often you want to focus on a fragment of code within a sample code file. In this example, you focus on the &lt;code&gt;AppModule&lt;/code&gt; class and its &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">多くの場合、サンプルコードファイル内のコードの断片に焦点を当てたいと思います。 この例では、 &lt;code&gt;AppModule&lt;/code&gt; クラスとその &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータに注目します。</target>
        </trans-unit>
        <trans-unit id="6a974c828df3ce86f0234cc962dac890d85796c0" translate="yes">
          <source>Old locale id</source>
          <target state="translated">古いロケールID</target>
        </trans-unit>
        <trans-unit id="1a1c62dd1450a03f009ca93d48c9895be797329d" translate="yes">
          <source>Older browsers send page requests to the server when the location URL changes &lt;em&gt;unless&lt;/em&gt; the change occurs after a &quot;#&quot; (called the &quot;hash&quot;). Routers can take advantage of this exception by composing in-application route URLs with hashes. Here's a &quot;hash URL&quot; that routes to the &lt;em&gt;Crisis Center&lt;/em&gt;.</source>
          <target state="translated">古いブラウザは、「＃」（「ハッシュ」と呼ばれる）の後に変更が発生し&lt;em&gt;ない限り&lt;/em&gt; 、ロケーションURLが変更されるとサーバーにページ要求を送信します。 ルーターは、アプリケーション内のルートURLをハッシュで構成することにより、この例外を利用できます。 &lt;em&gt;Crisis Centerに&lt;/em&gt;ルーティングする「ハッシュURL」を次に示します。</target>
        </trans-unit>
        <trans-unit id="d7bf167cbc746627b0166d7d071acf973da01c80" translate="yes">
          <source>Omitting the &lt;code&gt;header&lt;/code&gt; is fine when the source of the fragment is obvious. We just said that this is a fragment of the &lt;code&gt;app.module.ts&lt;/code&gt; file which was displayed immediately above, in full, with a header. There's no need to repeat the header.</source>
          <target state="translated">フラグメントのソースが明らかな場合は、 &lt;code&gt;header&lt;/code&gt; を省略しても問題ありません。 これは &lt;code&gt;app.module.ts&lt;/code&gt; ファイルのフラグメントであり、ヘッダーのすぐ上に完全に表示されていると言ったばかりです。 ヘッダーを繰り返す必要はありません。</target>
        </trans-unit>
        <trans-unit id="4760b07578f04790c584723795bd92c547ce1e0d" translate="yes">
          <source>Omitting the brackets will render the string &lt;code&gt;parentItem&lt;/code&gt;, not the value of &lt;code&gt;parentItem&lt;/code&gt;.</source>
          <target state="translated">角かっこを省略すると、 &lt;code&gt;parentItem&lt;/code&gt; の値ではなく、文字列parentItemがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="105acb5fda378d6915b87ac3556c85450ef17416" translate="yes">
          <source>On blur</source>
          <target state="translated">ぼかしで</target>
        </trans-unit>
        <trans-unit id="588d59c0ad2974cf644028bc97eebdd2c225b2a3" translate="yes">
          <source>On blur (or equivalent), your class should call the registered function to allow the forms API to update itself:</source>
          <target state="translated">ぼかし（または同等）で、クラスは登録された関数を呼び出して、フォームAPIが自身を更新できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="6c3cc300b22876a2d1a6c0fc79479dd3e48948f5" translate="yes">
          <source>On each anchor tag, you see a &lt;a href=&quot;template-syntax#property-binding&quot;&gt;property binding&lt;/a&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive that look like &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;=&quot;...&quot;&lt;/code&gt;.</source>
          <target state="translated">各アンカータグには、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;=&quot;...&quot;&lt;/code&gt; ように見える &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; ディレクティブに&lt;a href=&quot;template-syntax#property-binding&quot;&gt;バインドさ&lt;/a&gt;れたプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="45078ffe0a81d3978333faab763b71dee6d9bb2d" translate="yes">
          <source>On the &lt;code&gt;form&lt;/code&gt; tag, use an &lt;code&gt;ngSubmit&lt;/code&gt; event binding to listen for the form submission and call the &lt;code&gt;onSubmit()&lt;/code&gt; method with the &lt;code&gt;checkoutForm&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;form&lt;/code&gt; タグで、 &lt;code&gt;ngSubmit&lt;/code&gt; イベントバインディングを使用してフォーム送信をリッスンし、 &lt;code&gt;checkoutForm&lt;/code&gt; 値を指定して &lt;code&gt;onSubmit()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="bce75253ed75225f3fea391146a1bd210b810b5a" translate="yes">
          <source>On the GitHub project page, configure it to &lt;a href=&quot;https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch&quot;&gt;publish from the docs folder&lt;/a&gt;.</source>
          <target state="translated">GitHubプロジェクトページで&lt;a href=&quot;https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch&quot;&gt;、docsフォルダーから公開する&lt;/a&gt;ように構成します 。</target>
        </trans-unit>
        <trans-unit id="6ba6c65ce153f17047b9448c5c54cb5a79ea138b" translate="yes">
          <source>On the first terminal, run the &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt; command&lt;/a&gt; in &lt;em&gt;watch&lt;/em&gt; mode to compile the application to the &lt;code&gt;dist&lt;/code&gt; folder.</source>
          <target state="translated">最初の端末で、 &lt;em&gt;ウォッチ&lt;/em&gt;モードで&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; コマンドを&lt;/a&gt;実行して、アプリケーションを &lt;code&gt;dist&lt;/code&gt; フォルダーにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="47752c1f35e05bd5db3ee359b4ac43da09e4a796" translate="yes">
          <source>On the next tick, the task to set the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance value is executed.</source>
          <target state="translated">次のティックで、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンス値を設定するタスクが実行されます。</target>
        </trans-unit>
        <trans-unit id="cf3f308df6ab2f1567aae6a568a47bb60903252d" translate="yes">
          <source>On the other hand, &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two&quot;&gt;psychologists believe&lt;/a&gt; that humans start to struggle when the number of adjacent interesting things exceeds nine. So when a folder has ten or more files, it may be time to create subfolders.</source>
          <target state="translated">一方、 &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two&quot;&gt;心理学者は&lt;/a&gt; 、隣接する興味深いものの数が9を超えると 、人間は苦労し始めると考えています。 したがって、フォルダーに10個以上のファイルがある場合は、サブフォルダーを作成するときがあります。</target>
        </trans-unit>
        <trans-unit id="dde7eb7169ccbdd8ad081e58137b9af3cf2cef5e" translate="yes">
          <source>On the positive side, showing the element again is quick. The component's previous state is preserved and ready to display. The component doesn't re-initialize&amp;mdash;an operation that could be expensive. So hiding and showing is sometimes the right thing to do.</source>
          <target state="translated">プラス面では、要素を再度表示するのは簡単です。 コンポーネントの以前の状態は保持され、表示する準備ができています。 コンポーネントは再初期化されません。操作は高価になる可能性があります。 そのため、非表示にすることは正しいことです。</target>
        </trans-unit>
        <trans-unit id="8038ccc0dad229b1a3cf1eed833be0b2ac0ea190" translate="yes">
          <source>On the right, move the &lt;code&gt;$(PATH)&lt;/code&gt; entry above the &lt;code&gt;$(DevEnvDir&lt;/code&gt;) entries. This tells Visual Studio to use the external tools (such as npm) found in the global path before using its own version of the external tools.</source>
          <target state="translated">右側で、 &lt;code&gt;$(PATH)&lt;/code&gt; エントリを &lt;code&gt;$(DevEnvDir&lt;/code&gt; ）エントリの上に移動します。 これにより、独自のバージョンの外部ツールを使用する前に、グローバルパスにある外部ツール（npmなど）を使用するようにVisual Studioに指示します。</target>
        </trans-unit>
        <trans-unit id="278c09ed5190baee2bf3aee083bd563eecb54bef" translate="yes">
          <source>On the second terminal, install a web server (such as &lt;a href=&quot;https://github.com/johnpapa/lite-server&quot;&gt;lite-server&lt;/a&gt;), and run it against the output folder. For example:</source>
          <target state="translated">2番目の端末で、Webサーバー（ &lt;a href=&quot;https://github.com/johnpapa/lite-server&quot;&gt;lite-server&lt;/a&gt;など）をインストールし、出力フォルダーに対して実行します。 例えば：</target>
        </trans-unit>
        <trans-unit id="2a183574e64873dfb0e40e4ab36cd5076c09843a" translate="yes">
          <source>OnChanges</source>
          <target state="translated">OnChanges</target>
        </trans-unit>
        <trans-unit id="9d34c39bf776e320711c925c3b5f2ad48e75d5fd" translate="yes">
          <source>OnDestroy</source>
          <target state="translated">OnDestroy</target>
        </trans-unit>
        <trans-unit id="cb2b8c8bff23f0b5284bd4f85d2c9e04b704d932" translate="yes">
          <source>OnInit</source>
          <target state="translated">OnInit</target>
        </trans-unit>
        <trans-unit id="95acf127018688ca75dbc54f96c64b42301bcd48" translate="yes">
          <source>Once data arrives, you could push their raw &lt;code&gt;toString&lt;/code&gt; values directly to the view, but that rarely makes for a good user experience. For example, in most use cases, users prefer to see a date in a simple format like</source>
          <target state="translated">データが到着したら、その生の &lt;code&gt;toString&lt;/code&gt; 値を直接ビューにプッシュできますが、ユーザーエクスペリエンスが向上することはほとんどありません。 たとえば、ほとんどのユースケースでは、ユーザーは次のような単純な形式で日付を表示することを好みます</target>
        </trans-unit>
        <trans-unit id="dbc9b4b1e5f7c2efd3f7952edf2b5e8ee385e053" translate="yes">
          <source>Once deployed, visit &lt;a href=&quot;https://your-firebase-project-name.firebaseapp.com&quot;&gt;https://your-firebase-project-name.firebaseapp.com&lt;/a&gt; to see it live!</source>
          <target state="translated">デプロイしたら、 &lt;a href=&quot;https://your-firebase-project-name.firebaseapp.com&quot;&gt;https：//your-firebase-project-name.firebaseapp.comにアクセス&lt;/a&gt;してライブで確認してください！</target>
        </trans-unit>
        <trans-unit id="327e2bf497d4756dd8b46b905bd1bc8bc1d4a344" translate="yes">
          <source>Once done, you can load SystemJS and other dependencies, and also switch the configuration for loading application files so that they are &lt;em&gt;not&lt;/em&gt; included to the page by Karma. You'll let the shim and SystemJS load them.</source>
          <target state="translated">完了したら、SystemJSおよびその他の依存関係をロードし、アプリケーションファイルをロードするための構成を切り替えて、Karmaによってページに含まれ&lt;em&gt;ない&lt;/em&gt;ようにすることが&lt;em&gt;でき&lt;/em&gt;ます。 シムとSystemJSにそれらをロードさせます。</target>
        </trans-unit>
        <trans-unit id="515a285ae6999eab70e56bb9b650918ca621d734" translate="yes">
          <source>Once included, the CLI will include the stylesheet, whether the link tag's href URL is relative to the application root or the component file.</source>
          <target state="translated">リンクタグのhref URLがアプリケーションルートまたはコンポーネントファイルに関連しているかどうかに関係なく、CLIにスタイルシートが含まれます。</target>
        </trans-unit>
        <trans-unit id="be979100be0f130068c6ce22440c04aade32c248" translate="yes">
          <source>Once the &lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; is ready, you can simply add its selector, &lt;code&gt;appForbiddenName&lt;/code&gt;, to any input element to activate it. For example:</source>
          <target state="translated">&lt;code&gt;ForbiddenValidatorDirective&lt;/code&gt; の準備ができたら、セレクター &lt;code&gt;appForbiddenName&lt;/code&gt; を任意の入力要素に追加して、それをアクティブにすることができます。 例えば：</target>
        </trans-unit>
        <trans-unit id="fa30d75339e67b98b3d75fc951ba0ee759735569" translate="yes">
          <source>Once the app warms up, you'll see a row of navigation buttons and the &lt;em&gt;Heroes&lt;/em&gt; view with its list of heroes.</source>
          <target state="translated">アプリがウォームアップされると、ナビゲーションボタンの行とヒーローのリストが表示された&lt;em&gt;ヒーロー&lt;/em&gt;ビューが表示されます。</target>
        </trans-unit>
        <trans-unit id="7afe0d112e482623769881f408f2b0ec643e2bf4" translate="yes">
          <source>Once the application loads the initial route, the &lt;code&gt;CrisisCenterModule&lt;/code&gt; is preloaded. Verify this by logging in to the &lt;code&gt;Admin&lt;/code&gt; feature area and noting that the &lt;code&gt;crisis-center&lt;/code&gt; is listed in the &lt;code&gt;Preloaded Modules&lt;/code&gt;. It's also logged to the browser's console.</source>
          <target state="translated">アプリケーションが初期ルートをロードすると、 &lt;code&gt;CrisisCenterModule&lt;/code&gt; がプリロードされます。 これを確認するには、 &lt;code&gt;Admin&lt;/code&gt; 機能エリアにログインし、 &lt;code&gt;crisis-center&lt;/code&gt; が &lt;code&gt;Preloaded Modules&lt;/code&gt; されたモジュールにリストされていることを確認します。 また、ブラウザのコンソールにも記録されます。</target>
        </trans-unit>
        <trans-unit id="0ff45c4702b7e2b1b69b310c107de6727e84ae7a" translate="yes">
          <source>Once the package is installed, add the following to the &lt;code&gt;&quot;compilerOptions&quot;&lt;/code&gt; section of your project's &lt;code&gt;tsconfig.json&lt;/code&gt;.</source>
          <target state="translated">パッケージがインストールされたら、プロジェクトの &lt;code&gt;tsconfig.json&lt;/code&gt; の &lt;code&gt;&quot;compilerOptions&quot;&lt;/code&gt; セクションに次を追加します。</target>
        </trans-unit>
        <trans-unit id="c231f7af231bb23e243ffe3f2f118fe7793497d8" translate="yes">
          <source>Once these are done, run:</source>
          <target state="translated">これらが完了したら、次を実行します。</target>
        </trans-unit>
        <trans-unit id="bab093e960e981510826adeb3fd471f0884f6381" translate="yes">
          <source>Once this is done we can get hold of services via the Angular &lt;code&gt;&lt;a href=&quot;../../../core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; as normal. Services that are (or have dependencies on) an upgraded AngularJS service, will be instantiated as needed by the AngularJS &lt;code&gt;&lt;a href=&quot;../upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これが完了すると、通常どおりAngular &lt;code&gt;&lt;a href=&quot;../../../core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; を介してサービスを取得できます。 アップグレードされたAngularJSサービスである（または依存関係がある）サービスは、AngularJS &lt;code&gt;&lt;a href=&quot;../upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; によって必要に応じてインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="a289b477923250939e59f73b39cbad472ba133be" translate="yes">
          <source>Once this is done we can get hold of services via the AngularJS &lt;code&gt;&lt;a href=&quot;../upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; as normal. Services that are (or have dependencies on) a downgraded Angular service, will be instantiated as needed by the Angular root &lt;code&gt;&lt;a href=&quot;../../../core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これが完了すると、AngularJS &lt;code&gt;&lt;a href=&quot;../upgrademodule#%24injector&quot;&gt;$injector&lt;/a&gt;&lt;/code&gt; を介して通常どおりサービスを取得できます。 ダウングレードされたAngularサービスである（または依存関係がある）サービスは、Angularルート &lt;code&gt;&lt;a href=&quot;../../../core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; によって必要に応じてインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="20b9175c244a12b84f5bd15eed125eb5c0f3bcda" translate="yes">
          <source>Once you have the source code downloaded and unzipped, use the &lt;a href=&quot;https://angularconsole.com&quot;&gt;Angular Console&lt;/a&gt; to serve the application, or you install &lt;code&gt;Node.js&lt;/code&gt; and have the Angular CLI installed.</source>
          <target state="translated">ソースコードをダウンロードして解凍したら、 &lt;a href=&quot;https://angularconsole.com&quot;&gt;Angular Console&lt;/a&gt;を使用してアプリケーションを提供するか、 &lt;code&gt;Node.js&lt;/code&gt; をインストールしてAngular CLIをインストールします。</target>
        </trans-unit>
        <trans-unit id="e30ba625ee999d939a41ca3dd591e3de71f57409" translate="yes">
          <source>Once you import a library using the &quot;scripts&quot; array, you should &lt;strong&gt;not&lt;/strong&gt; import it using an import statement in your TypeScript code (such as &lt;code&gt;import * as $ from 'jquery';&lt;/code&gt;). If you do, you'll end up with two different copies of the library: one imported as a global library, and one imported as a module. This is especially bad for libraries with plugins, like JQuery, because each copy will have different plugins.</source>
          <target state="translated">「scripts」配列を使用してライブラリをインポートしたら、TypeScriptコードのimportステートメント（ &lt;code&gt;import * as $ from 'jquery';&lt;/code&gt; など ）を使用してインポートしないでください。 そうすると、ライブラリの2つの異なるコピーが作成されます。1つはグローバルライブラリとしてインポートされ、もう1つはモジュールとしてインポートされます。 これは、JQueryのようなプラグインを持つライブラリにとって特に悪いです。なぜなら、各コピーには異なるプラグインがあるからです。</target>
        </trans-unit>
        <trans-unit id="1d66884cd418d38436558a48d6c0b2f3a74b4d00" translate="yes">
          <source>Once you introduce the Angular Router, using the Angular Router triggers navigations through the unified location service, still providing a single source for navigating with AngularJS and Angular.</source>
          <target state="translated">Angular Routerを導入すると、Angular Routerを使用して統合された位置情報サービスを介したナビゲーションがトリガーされ、AngularJSとAngularでナビゲートするための単一のソースが提供されます。</target>
        </trans-unit>
        <trans-unit id="ee023cd0dabed619dfa80fc59fd42f6a58a8470a" translate="yes">
          <source>Once you start the upgrade process and bring in SystemJS, configuration changes are needed for Karma. You need to let SystemJS load all the new Angular code, which can be done with the following kind of shim file:</source>
          <target state="translated">アップグレードプロセスを開始してSystemJSを取り込むと、Karmaの構成を変更する必要があります。 SystemJSにすべての新しいAngularコードをロードさせる必要があります。これは、次の種類のshimファイルで実行できます。</target>
        </trans-unit>
        <trans-unit id="092473dca34a9d2cc876a77d26a67e1896159e42" translate="yes">
          <source>Once you're running a hybrid app, you can start the gradual process of upgrading code. One of the more common patterns for doing that is to use an Angular component in an AngularJS context. This could be a completely new component or one that was previously AngularJS but has been rewritten for Angular.</source>
          <target state="translated">ハイブリッドアプリを実行したら、コードの段階的なアップグレードプロセスを開始できます。 それを行うためのより一般的なパターンの1つは、AngularJSコンテキストでAngularコンポーネントを使用することです。 これは、完全に新しいコンポーネント、または以前はAngularJSであったがAngular用に書き直されたコンポーネントである可能性があります。</target>
        </trans-unit>
        <trans-unit id="bd7a98f13e48be54bf5eaab3ea48f2d471fc1382" translate="yes">
          <source>One &lt;code&gt;#docregion&lt;/code&gt; comment mentions &lt;strong&gt;&lt;em&gt;two&lt;/em&gt;&lt;/strong&gt; region names as does an &lt;code&gt;#enddocregion&lt;/code&gt; comment. This is a convenient way to start (or stop) multiple regions on the same code line. You could have put these comments on separate lines and many authors prefer to do so.</source>
          <target state="translated">1つの &lt;code&gt;#docregion&lt;/code&gt; コメントは、 &lt;code&gt;#enddocregion&lt;/code&gt; コメントと同様に&lt;strong&gt;&lt;em&gt;2つの&lt;/em&gt;&lt;/strong&gt;リージョン名に言及しています。 これは、同じコード行で複数の領域を開始（または停止）する便利な方法です。 これらのコメントを別々の行に書くこともできますし、多くの著者はそうすることを好みます。</target>
        </trans-unit>
        <trans-unit id="8ac08bd7d3b020ac62f793bae708a96397cd94c4" translate="yes">
          <source>One alternative is to provide and inject the configuration object in an NgModule like &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">1つの代替方法は、AppModuleなどの &lt;code&gt;AppModule&lt;/code&gt; で構成オブジェクトを提供および注入することです 。</target>
        </trans-unit>
        <trans-unit id="87135e35d744d977c20d6f84a74947e0d0ebccf8" translate="yes">
          <source>One approach is to configure the testing module from the individual pieces as in this example:</source>
          <target state="translated">1つのアプローチは、この例のように個々のピースからテストモジュールを構成することです。</target>
        </trans-unit>
        <trans-unit id="5fe1a5bfbd76c9b1017d3107c26a761463dc1042" translate="yes">
          <source>One approach is to dedicate a folder to localization and store related assets, such as internationalization files, there.</source>
          <target state="translated">1つのアプローチは、国際化ファイルなどの関連資産をローカライズおよび保存するためにフォルダーを専用にすることです。</target>
        </trans-unit>
        <trans-unit id="7200dfd4929de965d1957e81038031eddafa439a" translate="yes">
          <source>One important assertion this disables verifies that a change detection pass does not result in additional changes to any bindings (also known as unidirectional data flow).</source>
          <target state="translated">これを無効にする1つの重要なアサーションは、変更検出パスがバインディング（単方向データフローとも呼ばれる）に追加の変更をもたらさないことを検証します。</target>
        </trans-unit>
        <trans-unit id="65845d985000af3d6718bb9d79cd3a31684a2820" translate="yes">
          <source>One of &quot;application&quot; or &quot;library&quot;. An application can run independently in a browser, while a library cannot.</source>
          <target state="translated">「アプリケーション」または「ライブラリ」のいずれか。 アプリケーションはブラウザで独立して実行できますが、ライブラリは実行できません。</target>
        </trans-unit>
        <trans-unit id="8fb8337f3d8781cba55e079191d8a366b930d1b0" translate="yes">
          <source>One of &lt;code&gt;enabled&lt;/code&gt; or &lt;code&gt;disabled&lt;/code&gt;. When set to &lt;code&gt;enabled&lt;/code&gt;, the initial navigation starts before the root component is created. The bootstrap is blocked until the initial navigation is complete. This value is required for &lt;a href=&quot;../../guide/universal&quot;&gt;server-side rendering&lt;/a&gt; to work. When set to &lt;code&gt;disabled&lt;/code&gt;, the initial navigation is not performed. The location listener is set up before the root component gets created. Use if there is a reason to have more control over when the router starts its initial navigation due to some complex initialization logic.</source>
          <target state="translated">&lt;code&gt;enabled&lt;/code&gt; または &lt;code&gt;disabled&lt;/code&gt; のいずれか。 &lt;code&gt;enabled&lt;/code&gt; に設定すると、ルートコンポーネントが作成される前に初期ナビゲーションが開始されます。 ブートストラップは、最初のナビゲーションが完了するまでブロックされます。 この値は、 &lt;a href=&quot;../../guide/universal&quot;&gt;サーバー側レンダリングが機能&lt;/a&gt;するために必要です。 &lt;code&gt;disabled&lt;/code&gt; に設定すると、最初のナビゲーションは実行されません。 ロケーションリスナーは、ルートコンポーネントが作成される前に設定されます。 複雑な初期化ロジックが原因で、ルーターが最初のナビゲーションを開始するタイミングをさらに制御する理由がある場合に使用します。</target>
        </trans-unit>
        <trans-unit id="a6c04af86844f30e490ab3f542226d29b027b666" translate="yes">
          <source>One of the best ways to keep your project bug free is through a test suite, but it's easy to forget to run tests all the time. Continuous integration (CI) servers let you set up your project repository so that your tests run on every commit and pull request.</source>
          <target state="translated">プロジェクトにバグがないようにする最良の方法の1つは、テストスイートを使用することですが、常にテストを実行するのを忘れがちです。 継続的統合（CI）サーバーを使用すると、プロジェクトリポジトリをセットアップして、コミットおよびプルリクエストごとにテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="7652911aa9bead58c24b042fdf387cb71098df8e" translate="yes">
          <source>One of the documentation design goals is that guide page code snippets should be examples of real, working code.</source>
          <target state="translated">ドキュメントの設計目標の1つは、ガイドページのコードスニペットを実際の実際のコードの例にすることです。</target>
        </trans-unit>
        <trans-unit id="edf6d16acb64bc01a6c63397cc7093717e206bbb" translate="yes">
          <source>One of the easiest ways to get your site live is to host it using Firebase.</source>
          <target state="translated">サイトを公開する最も簡単な方法の1つは、Firebaseを使用してサイトをホストすることです。</target>
        </trans-unit>
        <trans-unit id="1ee15e3b19e2a210511409a92e03792bca31bb83" translate="yes">
          <source>One of the keys to a successful upgrade is to do it incrementally, by running the two frameworks side by side in the same application, and porting AngularJS components to Angular one by one. This makes it possible to upgrade even large and complex applications without disrupting other business, because the work can be done collaboratively and spread over a period of time. The &lt;code&gt;upgrade&lt;/code&gt; module in Angular has been designed to make incremental upgrading seamless.</source>
          <target state="translated">アップグレードを成功させるための鍵の1つは、同じアプリケーションで2つのフレームワークを並べて実行し、AngularJSコンポーネントを1つずつAngularに移植することにより、段階的にアップグレードすることです。 これにより、他のビジネスを中断することなく、大規模で複雑なアプリケーションをアップグレードすることが可能になります。これは、作業が共同で行われ、一定期間にわたって分散されるためです。 Angularの &lt;code&gt;upgrade&lt;/code&gt; モジュールは、増分アップグレードをシームレスにするように設計されています。</target>
        </trans-unit>
        <trans-unit id="d321b4c2f612d92d87ff9ca870c2d0c179cdda08" translate="yes">
          <source>One of the potential side effects of long caching is inadvertently caching an invalid resource. In a normal HTTP cache, a hard refresh or cache expiration limits the negative effects of caching an invalid file. A service worker ignores such constraints and effectively long caches the entire app. Consequently, it is essential that the service worker gets the correct content.</source>
          <target state="translated">長いキャッシュの潜在的な副作用の1つは、無効なリソースを誤ってキャッシュすることです。 通常のHTTPキャッシュでは、ハードリフレッシュまたはキャッシュの有効期限により、無効なファイルのキャッシュによる悪影響が制限されます。 サービスワーカーはこのような制約を無視し、アプリ全体を事実上キャッシュします。 したがって、サービスワーカーが正しいコンテンツを取得することが不可欠です。</target>
        </trans-unit>
        <trans-unit id="39157ef46c453ad66cda0bcf9fdbe691e4af8017" translate="yes">
          <source>One of the primary tools provided by ngUpgrade is called the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;. This is a module that contains utilities for bootstrapping and managing hybrid applications that support both Angular and AngularJS code.</source>
          <target state="translated">ngUpgradeが提供する主要なツールの1つはUpgradeModuleと呼ばれます。 これは、AngularコードとAngularJSコードの両方をサポートするハイブリッドアプリケーションのブートストラップと管理のためのユーティリティを含むモジュールです。</target>
        </trans-unit>
        <trans-unit id="026249664bc8e8d6d2e8f156fab107887e23bd3a" translate="yes">
          <source>One of the primary use cases for attribute binding is to set ARIA attributes, as in this example:</source>
          <target state="translated">属性バインディングの主な使用例の1つは、次の例のようにARIA属性を設定することです。</target>
        </trans-unit>
        <trans-unit id="afe0dd72b9bf1774a092f344805f3e7ef7abc41b" translate="yes">
          <source>One or more animation &lt;code&gt;&lt;a href=&quot;../animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; calls, containing &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; definitions. See the &lt;a href=&quot;../../guide/animations&quot;&gt;Animations guide&lt;/a&gt; and animations API documentation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 定義を含む1つ以上のアニメーション &lt;code&gt;&lt;a href=&quot;../animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 呼び出し。 &lt;a href=&quot;../../guide/animations&quot;&gt;アニメーションガイド&lt;/a&gt;とアニメーションAPIドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="823e563bcdba98c7d6093dcfc55a78207defc67c" translate="yes">
          <source>One or more animation objects to which this transition applies.</source>
          <target state="translated">この遷移が適用される1つ以上のアニメーションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="da759f83f6bf9b8c9d78c28d5e9f2fa981792d78" translate="yes">
          <source>One or more animation objects, as returned by the &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; function, that form a transformation from one state to another. A sequence is used by default when you pass an array.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 関数によって返される、1つの状態から別の状態への変換を形成する1つ以上のアニメーションオブジェクト。 配列を渡すと、デフォルトでシーケンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="1643c273cbb0a7a1eed375f2d3d7841d30d1664b" translate="yes">
          <source>One or more animation or style steps that form this group.</source>
          <target state="translated">このグループを形成する1つ以上のアニメーションまたはスタイルステップ。</target>
        </trans-unit>
        <trans-unit id="b2ed7e15cf363a7dca7330d77d500b84201d044a" translate="yes">
          <source>One or more animation step objects.</source>
          <target state="translated">1つ以上のアニメーションステップオブジェクト。</target>
        </trans-unit>
        <trans-unit id="dd1f0301234f3998d35c0883fa4f08599e4ae657" translate="yes">
          <source>One or more animation steps to apply to the queried element or elements. An array is treated as an animation sequence.</source>
          <target state="translated">クエリされた要素に適用する1つ以上のアニメーションステップ。 配列はアニメーションシーケンスとして扱われます。</target>
        </trans-unit>
        <trans-unit id="9e17caf2c0eba6c76dde189f27869a66bc4e5950" translate="yes">
          <source>One or more animation steps.</source>
          <target state="translated">1つ以上のアニメーションステップ。</target>
        </trans-unit>
        <trans-unit id="ad87ad7668abb3c7f54e88720c5c83a975d7feb6" translate="yes">
          <source>One or more inline CSS stylesheets to use in this component.</source>
          <target state="translated">このコンポーネントで使用する1つ以上のインラインCSSスタイルシート。</target>
        </trans-unit>
        <trans-unit id="da19d141279f273421caa38456cde51272cb39b9" translate="yes">
          <source>One or more names for the defined state in a comma-separated string. The following reserved state names can be supplied to define a style for specific use cases:</source>
          <target state="translated">コンマ区切りの文字列で定義された状態の1つ以上の名前。 次の予約済みの状態名を指定して、特定のユースケースのスタイルを定義できます。</target>
        </trans-unit>
        <trans-unit id="5acf36149f7249268bf1fa59ce379718ab723d7d" translate="yes">
          <source>One or more relative paths or absolute URLs for files containing CSS stylesheets to use in this component.</source>
          <target state="translated">このコンポーネントで使用するCSSスタイルシートを含むファイルの1つ以上の相対パスまたは絶対URL。</target>
        </trans-unit>
        <trans-unit id="d2b112eb5877cd6ceff82ee1872d5467977d0478" translate="yes">
          <source>One ore more animation steps.</source>
          <target state="translated">1つ以上のアニメーションステップ。</target>
        </trans-unit>
        <trans-unit id="bc6546ec3391e69cc2df4ab134819aa8d7fa2247" translate="yes">
          <source>One solution is to provide the full URL to your application on the server, and write an interceptor that can retrieve this value and prepend it to the request URL. If you're using the &lt;code&gt;ngExpressEngine&lt;/code&gt;, as shown in the example in this guide, half the work is already done. We'll assume this is the case, but it's trivial to provide the same functionality.</source>
          <target state="translated">1つの解決策は、サーバー上のアプリケーションに完全なURLを提供し、この値を取得して要求URLに追加できるインターセプターを作成することです。 このガイドの例に示すように、 &lt;code&gt;ngExpressEngine&lt;/code&gt; を使用している場合、作業の半分はすでに完了しています。 これが当てはまると仮定しますが、同じ機能を提供するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="753743a1d555d2fcf0a1662a1071b664d83c738e" translate="yes">
          <source>One structural directive per host element</source>
          <target state="translated">ホスト要素ごとに1つの構造ディレクティブ</target>
        </trans-unit>
        <trans-unit id="3b7633c4b4f29521eb279a7629c957fbf11af7a0" translate="yes">
          <source>One way to do this is to set the &lt;code&gt;styles&lt;/code&gt; property in the component metadata. The &lt;code&gt;styles&lt;/code&gt; property takes an array of strings that contain CSS code. Usually you give it one string, as in the following example:</source>
          <target state="translated">これを行う1つの方法は、コンポーネントメタデータで &lt;code&gt;styles&lt;/code&gt; プロパティを設定することです 。 &lt;code&gt;styles&lt;/code&gt; プロパティは、CSSコードを含む文字列の配列を取ります。 通常、次の例のように、1つの文字列を指定します。</target>
        </trans-unit>
        <trans-unit id="23ea1e883846bbb530a2fe226ccf6808e34961c4" translate="yes">
          <source>One-time string initialization</source>
          <target state="translated">一度限りの文字列初期化</target>
        </trans-unit>
        <trans-unit id="8024b5d6502faee6dc86d7b2f70631381695e2d5" translate="yes">
          <source>One-way binding</source>
          <target state="translated">一方向バインディング</target>
        </trans-unit>
        <trans-unit id="570d87b426698fc5798b7b0e16f1eb0d46a80468" translate="yes">
          <source>One-way in</source>
          <target state="translated">片道</target>
        </trans-unit>
        <trans-unit id="99ddecd7df26d55bb66476c089ef805d296bb917" translate="yes">
          <source>One-wayfrom data sourceto view target</source>
          <target state="translated">データソースからビューターゲットへの一方向</target>
        </trans-unit>
        <trans-unit id="90fe11aa4a00441084772bf9d6a5020805e0059d" translate="yes">
          <source>One-wayfrom view targetto data source</source>
          <target state="translated">ビューのターゲットからデータソースへの一方向</target>
        </trans-unit>
        <trans-unit id="a6cc2fba9407219b07b35ced58c4123361f7f171" translate="yes">
          <source>Only &lt;code&gt;title&lt;/code&gt; is required. See &lt;code&gt;Notification&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties&quot;&gt;instance properties&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; のみが必要です。 &lt;code&gt;Notification&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties&quot;&gt;インスタンスのプロパティを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ef29c8c292e917c833bea85f0a931b52cf64587b" translate="yes">
          <source>Only a few people are authorized to write marketing pages. This style guide does not discuss creation or maintenance of marketing pages.</source>
          <target state="translated">マーケティングページの作成を許可されている人はごくわずかです。 このスタイルガイドでは、マーケティングページの作成または保守については説明しません。</target>
        </trans-unit>
        <trans-unit id="13048324cb0340a9fbff441b7dfd6985aef1ce2c" translate="yes">
          <source>Only call &lt;a href=&quot;aot-compiler#supported-functions&quot;&gt;functions supported&lt;/a&gt; by the compiler.</source>
          <target state="translated">コンパイラが&lt;a href=&quot;aot-compiler#supported-functions&quot;&gt;サポート&lt;/a&gt;する関数のみを呼び出します 。</target>
        </trans-unit>
        <trans-unit id="b83384edb39f8a49694fc87942417d24231ac44e" translate="yes">
          <source>Only call &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; in the root &lt;code&gt;AppRoutingModule&lt;/code&gt; (or the &lt;code&gt;AppModule&lt;/code&gt; if that's where you register top level application routes). In any other module, you must call the &lt;strong&gt;&lt;code&gt;RouterModule.forChild&lt;/code&gt;&lt;/strong&gt; method to register additional routes.</source>
          <target state="translated">ルート &lt;code&gt;AppRoutingModule&lt;/code&gt; （またはトップレベルのアプリケーションルートを登録する場合は &lt;code&gt;AppModule&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; でRouterModule.forRoot（）のみを呼び出します。 他のモジュールでは、 &lt;strong&gt; &lt;code&gt;RouterModule.forChild&lt;/code&gt; &lt;/strong&gt;メソッドを呼び出して追加のルートを登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="7520351348a84ecf70cf22fcdb8e3dd1a7b77f80" translate="yes">
          <source>Only call and import a &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; result in the root application module, &lt;code&gt;AppModule&lt;/code&gt;. Avoid importing it in any other module, particularly in a lazy-loaded module. For more information on &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; see &lt;a href=&quot;singleton-services#the-forroot-pattern&quot;&gt;the &lt;code&gt;forRoot()&lt;/code&gt; pattern&lt;/a&gt; section of the &lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt; guide.</source>
          <target state="translated">ルートアプリケーションモジュール &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 結果を呼び出してインポートするだけ &lt;code&gt;AppModule&lt;/code&gt; 。 他のモジュール、特に遅延ロードされたモジュールではインポートしないでください。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 詳細については、 &lt;a href=&quot;singleton-services&quot;&gt;Singleton Services&lt;/a&gt;ガイド&lt;a href=&quot;singleton-services#the-forroot-pattern&quot;&gt;の &lt;code&gt;forRoot()&lt;/code&gt; パターンの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b69003587c867e7e340524002fd1fa86252f3e32" translate="yes">
          <source>Only call this helper once per spec.</source>
          <target state="translated">このヘルパーは、仕様ごとに1回だけ呼び出してください。</target>
        </trans-unit>
        <trans-unit id="6aa9ccc779fdff35f7ff277e0df6325b119d6fc7" translate="yes">
          <source>Only initialized variables and constants</source>
          <target state="translated">初期化された変数と定数のみ</target>
        </trans-unit>
        <trans-unit id="579011de1d1d6760beff0e58edfe23acc7999e43" translate="yes">
          <source>Only perform a migration, does not update the installed version.</source>
          <target state="translated">移行のみを実行し、インストールされているバージョンを更新しません。</target>
        </trans-unit>
        <trans-unit id="d5948c9e6e775727987047ca9af9b8a29758babf" translate="yes">
          <source>Only present if the responseType was &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="translated">responseTypeが &lt;code&gt;text&lt;/code&gt; の場合にのみ存在します 。</target>
        </trans-unit>
        <trans-unit id="07a621a1056b71ac908fc1c5cb0788cffa208462" translate="yes">
          <source>Only reference exported symbols after &lt;a href=&quot;aot-compiler#code-folding&quot;&gt;code folding&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;aot-compiler#code-folding&quot;&gt;コードの折りたたみ&lt;/a&gt;後、エクスポートされたシンボルのみを参照します 。</target>
        </trans-unit>
        <trans-unit id="9e67718ded8b6cd36fa81294f9254fb2753c502b" translate="yes">
          <source>Only requests whose URLs match &lt;em&gt;any&lt;/em&gt; of the non-negative URLs/patterns and &lt;em&gt;none&lt;/em&gt; of the negative ones will be considered navigation requests. The URL query will be ignored when matching.</source>
          <target state="translated">URLが非負のURL /パターンの&lt;em&gt;いずれか&lt;/em&gt;に一致し&lt;em&gt;、&lt;/em&gt;負のURL /パターンに一致し&lt;em&gt;ない&lt;/em&gt;要求のみがナビゲーション要求と見なされます。 一致する場合、URLクエリは無視されます。</target>
        </trans-unit>
        <trans-unit id="fae8b36196c2d7c9bc82e024818e47073fff7e2b" translate="yes">
          <source>Only some of the features of &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/%24compile&quot;&gt;Directive Definition Object&lt;/a&gt; are supported:</source>
          <target state="translated">&lt;a href=&quot;https://docs.angularjs.org/api/ng/service/%24compile&quot;&gt;ディレクティブ定義オブジェクトの&lt;/a&gt;機能の一部のみがサポートされています：</target>
        </trans-unit>
        <trans-unit id="0a4f1cd58a04fbb4f4579ee87ee3d34b9e5ff5d0" translate="yes">
          <source>Only the &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; method resolves the configuration and overrides through the &lt;code&gt;angular.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; メソッドのみが設定を解決し、 &lt;code&gt;angular.json&lt;/code&gt; ファイルを介してオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="badba1b20de1ae8cafa9eb1a80fd811428d174c8" translate="yes">
          <source>Only the &lt;code&gt;en-US&lt;/code&gt; locale data comes with Angular. To localize dates in another language, you must import the corresponding locale data. See the &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;I18n guide&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;en-US&lt;/code&gt; ロケールデータのみがAngularに付属しています。 別の言語で日付をローカライズするには、対応するロケールデータをインポートする必要があります。 詳細については、 &lt;a href=&quot;../../guide/i18n#i18n-pipes&quot;&gt;I18nガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="572abade960d96039060d52044e78dceb7d7938a" translate="yes">
          <source>Only the last three lines of this file actually test the component and all they do is assert that Angular can create the component.</source>
          <target state="translated">このファイルの最後の3行のみが実際にコンポーネントをテストし、Angularがコンポーネントを作成できると断言するだけです。</target>
        </trans-unit>
        <trans-unit id="2e5a80e20dec34a84bde9cf545eeeeea83b35c8a" translate="yes">
          <source>Only the root &lt;code&gt;AppModule&lt;/code&gt; should import the &lt;code&gt;GreetingModule&lt;/code&gt;. If a lazy-loaded module imports it too, the app can generate &lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;multiple instances&lt;/a&gt; of a service.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; のみが &lt;code&gt;GreetingModule&lt;/code&gt; をインポートする必要があります。 遅延ロードされたモジュールもそれをインポートする場合、アプリはサービスの&lt;a href=&quot;ngmodule-faq#q-why-bad&quot;&gt;複数のインスタンス&lt;/a&gt;を生成できます 。</target>
        </trans-unit>
        <trans-unit id="74e3616af019ff0e94847007cfa986e9df5014a6" translate="yes">
          <source>Only the selected event test differs. It confirms that the selected &lt;code&gt;DashboardHeroComponent&lt;/code&gt; hero really does find its way up through the event binding to the host component.</source>
          <target state="translated">選択したイベントテストのみが異なります。 選択された &lt;code&gt;DashboardHeroComponent&lt;/code&gt; ヒーローが、ホストコンポーネントへのイベントバインディングを介して実際に道を見つけることを確認します。</target>
        </trans-unit>
        <trans-unit id="89b591ffb9d7baafdc98bbbe94b530bb355b3c0c" translate="yes">
          <source>Only used by the &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; でのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="bc45afb720e55cd7cc85109d4c9b039dd76dd61e" translate="yes">
          <source>Open &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; again in the same window. What happens?</source>
          <target state="translated">同じウィンドウで&lt;a href=&quot;http://localhost:8080&quot;&gt;http：// localhost：8080を&lt;/a&gt;再度開きます。 何が起こるのですか？</target>
        </trans-unit>
        <trans-unit id="e14a50b5520dfc18fa7fd543847099aa7bf163b3" translate="yes">
          <source>Open &lt;code&gt;AppModule&lt;/code&gt; (&lt;code&gt;app.module.ts&lt;/code&gt;) and import the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; symbol from the &lt;code&gt;@angular/forms&lt;/code&gt; library.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; （ &lt;code&gt;app.module.ts&lt;/code&gt; ）を開き、 &lt;code&gt;@angular/forms&lt;/code&gt; ライブラリから &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; シンボルをインポートします。</target>
        </trans-unit>
        <trans-unit id="866e5d6d1b334d49b032f539b556b797ab19627b" translate="yes">
          <source>Open &lt;code&gt;AppRoutingModule&lt;/code&gt; and import &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; を開き、 HeroDetailComponentをインポートし &lt;code&gt;HeroDetailComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77b65d6f30f279da483a0d2c5aaba8330bf5b22c" translate="yes">
          <source>Open &lt;code&gt;HeroService&lt;/code&gt; and add the following &lt;code&gt;getHero()&lt;/code&gt; method with the &lt;code&gt;id&lt;/code&gt; after the &lt;code&gt;getHeroes()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; を開き、 &lt;code&gt;getHeroes()&lt;/code&gt; メソッドの後に &lt;code&gt;id&lt;/code&gt; 持つ次の &lt;code&gt;getHero()&lt;/code&gt; メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="6528dd724b3ac4dd5196042f0d94caa2d32dadd1" translate="yes">
          <source>Open &lt;code&gt;MessageService&lt;/code&gt; and replace its contents with the following.</source>
          <target state="translated">&lt;code&gt;MessageService&lt;/code&gt; を開き、その内容を次のものに置き換えます。</target>
        </trans-unit>
        <trans-unit id="114ada4e4b53ed8da2233d3cd7f02423629b9fa6" translate="yes">
          <source>Open &lt;code&gt;MessagesComponent&lt;/code&gt; and import the &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MessagesComponent&lt;/code&gt; を開き、 &lt;code&gt;MessageService&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="575e23715adc35c1ca9c9988eec386e7d5b9930f" translate="yes">
          <source>Open &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.module.ts&lt;/code&gt; を開きます 。</target>
        </trans-unit>
        <trans-unit id="6f1bf6a125bfb50f13854676105a2329271b6e9f" translate="yes">
          <source>Open &lt;code&gt;auth.guard.ts&lt;/code&gt;. Import the &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; interface from &lt;code&gt;@angular/router&lt;/code&gt;. Add it to the &lt;code&gt;AuthGuard&lt;/code&gt; class's &lt;code&gt;implements&lt;/code&gt; list. Then implement &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; as follows:</source>
          <target state="translated">&lt;code&gt;auth.guard.ts&lt;/code&gt; を開きます 。 &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; インターフェイスを &lt;code&gt;@angular/router&lt;/code&gt; からインポートします 。 &lt;code&gt;AuthGuard&lt;/code&gt; クラスの &lt;code&gt;implements&lt;/code&gt; リストに追加します。 次に、次のように &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; を実装します。</target>
        </trans-unit>
        <trans-unit id="8f675910d99209c8ea86aae1435d8e6b43b9f03e" translate="yes">
          <source>Open &lt;code&gt;cart.component.html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cart.component.html&lt;/code&gt; を開きます 。</target>
        </trans-unit>
        <trans-unit id="67023797578e456d2b4fa45dabd73a9085bab993" translate="yes">
          <source>Open &lt;code&gt;cart.component.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cart.component.ts&lt;/code&gt; を開きます 。</target>
        </trans-unit>
        <trans-unit id="65c46c6f2ef1fbde016d6d946f5a25b4ae0d2a91" translate="yes">
          <source>Open &lt;code&gt;cart.service.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cart.service.ts&lt;/code&gt; を開きます 。</target>
        </trans-unit>
        <trans-unit id="a8fee58d1a2ab9cadaac9e77183557a479d795f7" translate="yes">
          <source>Open &lt;code&gt;index.ts&lt;/code&gt; and add the source code for your schematic factory function.</source>
          <target state="translated">&lt;code&gt;index.ts&lt;/code&gt; を開き、回路図ファクトリ関数のソースコードを追加します。</target>
        </trans-unit>
        <trans-unit id="7a47392ec87ed3fa0526ec688ceb94b3c13d0fab" translate="yes">
          <source>Open &lt;code&gt;messages.fr.xlf&lt;/code&gt; and find the first &lt;code&gt;&amp;lt;trans-unit&amp;gt;&lt;/code&gt; section:</source>
          <target state="translated">&lt;code&gt;messages.fr.xlf&lt;/code&gt; を開き、最初の &lt;code&gt;&amp;lt;trans-unit&amp;gt;&lt;/code&gt; セクションを見つけます。</target>
        </trans-unit>
        <trans-unit id="a4699e771c7b3370ae4b31ec47a6bd32c0039860" translate="yes">
          <source>Open &lt;code&gt;product-alerts.component.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;product-alerts.component.ts&lt;/code&gt; を開きます 。</target>
        </trans-unit>
        <trans-unit id="744a94e1819e7f241acdc65fb4e349d1e473016d" translate="yes">
          <source>Open &lt;code&gt;product-details.component.html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;product-details.component.html&lt;/code&gt; を開きます 。</target>
        </trans-unit>
        <trans-unit id="34812c7c2caeda4260035a1583f3d72e244de16c" translate="yes">
          <source>Open &lt;code&gt;product-details.component.ts&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;product-details.component.ts&lt;/code&gt; を開きます</target>
        </trans-unit>
        <trans-unit id="59a593e0c1b9760c313846329148117b6cbc5c11" translate="yes">
          <source>Open &lt;code&gt;product-details.component.ts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;product-details.component.ts&lt;/code&gt; を開きます 。</target>
        </trans-unit>
        <trans-unit id="815ff9ebb4b718dcd77b32609931e5d6576472b8" translate="yes">
          <source>Open &lt;code&gt;product-list.component.html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;product-list.component.html&lt;/code&gt; を開きます 。</target>
        </trans-unit>
        <trans-unit id="cfffaf36792bb58305ebbee9817c3529bb1994a4" translate="yes">
          <source>Open &lt;code&gt;src/app/app.component.html&lt;/code&gt; for editing.</source>
          <target state="translated">&lt;code&gt;src/app/app.component.html&lt;/code&gt; を編集用に開きます。</target>
        </trans-unit>
        <trans-unit id="ebd4ad14ad8a6413334d21a410aee323b90b5fee" translate="yes">
          <source>Open &lt;code&gt;src/app/app.module.ts&lt;/code&gt; and find &lt;code&gt;HeroesComponent&lt;/code&gt; imported near the top.</source>
          <target state="translated">&lt;code&gt;src/app/app.module.ts&lt;/code&gt; を開き、上部近くにインポートされたHeroesComponentを見つけます。</target>
        </trans-unit>
        <trans-unit id="c7eb0eeb40c71d849cfff0b2075c26d8908b64a9" translate="yes">
          <source>Open &lt;code&gt;src/styles.css&lt;/code&gt; and add the code below to the file.</source>
          <target state="translated">&lt;code&gt;src/styles.css&lt;/code&gt; を開き、以下のコードをファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="c0f74d2bdd1d19520402b98d21d64adcade48a22" translate="yes">
          <source>Open a browser and navigate to &lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt;. You should see the familiar Tour of Heroes dashboard page.</source>
          <target state="translated">ブラウザーを開き、 &lt;a href=&quot;http://localhost:4000/&quot;&gt;http：// localhost：4000 /に&lt;/a&gt;移動します 。 おなじみのTour of Heroesダッシュボードページが表示されます。</target>
        </trans-unit>
        <trans-unit id="a792da65891040da84e7d8ecdd221eef49bd99aa" translate="yes">
          <source>Open a terminal window in the project folder and enter the following commands for your environment:</source>
          <target state="translated">プロジェクトフォルダでターミナルウィンドウを開き、環境に応じて次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="f090fea76949747ac7a39fd3966bbdf3f37972e1" translate="yes">
          <source>Open developer console (e.g. in Chrome Ctrl + Shift + j)</source>
          <target state="translated">開発者コンソールを開きます（例：Chrome Ctrl + Shift + j）</target>
        </trans-unit>
        <trans-unit id="9e65fb97fc048133e412914c11615f23951a6bf0" translate="yes">
          <source>Open the &lt;code&gt;1st.spec.ts&lt;/code&gt; test file (Control/Command-P, then start typing the name of the file).</source>
          <target state="translated">&lt;code&gt;1st.spec.ts&lt;/code&gt; テストファイルを開きます（Control / Command-P、次にファイル名の入力を開始します）。</target>
        </trans-unit>
        <trans-unit id="b9c91187aa8b3d7b05434bda6b05e4913111c0a2" translate="yes">
          <source>Open the &lt;code&gt;AppComponent&lt;/code&gt; template and replace the &lt;code&gt;&amp;lt;app-heroes&amp;gt;&lt;/code&gt; element with a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; テンプレートを開き、 &lt;code&gt;&amp;lt;app-heroes&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; 要素に置き換えます 。</target>
        </trans-unit>
        <trans-unit id="c3916758644e0166882ccb24cabed0c5e9049368" translate="yes">
          <source>Open the &lt;code&gt;AppRoutingModule&lt;/code&gt; and add a new &lt;code&gt;admin&lt;/code&gt; route to its &lt;code&gt;appRoutes&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; を開き、 appRoutes配列に新しい &lt;code&gt;admin&lt;/code&gt; ルートを追加します。</target>
        </trans-unit>
        <trans-unit id="eab95545204defbcf8502f2c0be34aa6ff2ed363" translate="yes">
          <source>Open the &lt;code&gt;AppRoutingModule&lt;/code&gt; and add a new &lt;code&gt;compose&lt;/code&gt; route to the &lt;code&gt;appRoutes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; を開き、新しい &lt;code&gt;compose&lt;/code&gt; ルートをappRoutesに追加します。</target>
        </trans-unit>
        <trans-unit id="93778baa50a00162fcfb0d8a4b4552d47a6709f6" translate="yes">
          <source>Open the &lt;code&gt;DashboardComponent&lt;/code&gt; template and add the hero search element, &lt;code&gt;&amp;lt;app-hero-search&amp;gt;&lt;/code&gt;, to the bottom of the markup.</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; テンプレートを開き、ヒーロー検索要素 &lt;code&gt;&amp;lt;app-hero-search&amp;gt;&lt;/code&gt; をマークアップの下部に追加します 。</target>
        </trans-unit>
        <trans-unit id="eaffbfda7513b495e182c9e77848b7226285fb11" translate="yes">
          <source>Open the &lt;code&gt;HeroDetailComponent&lt;/code&gt; class file and import the &lt;code&gt;Hero&lt;/code&gt; symbol.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; クラスファイルを開き、 &lt;code&gt;Hero&lt;/code&gt; シンボルをインポートします。</target>
        </trans-unit>
        <trans-unit id="d89496e624794a432ec7dcad00fed8f07ed6cf98" translate="yes">
          <source>Open the &lt;code&gt;HeroService&lt;/code&gt; file and import the &lt;code&gt;Observable&lt;/code&gt; and &lt;code&gt;of&lt;/code&gt; symbols from RxJS.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; ファイルを開き、 RxJSから &lt;code&gt;Observable&lt;/code&gt; およびシンボルをインポートします。</target>
        </trans-unit>
        <trans-unit id="2379d746e66efdc602707b136bc2410835734b2d" translate="yes">
          <source>Open the &lt;code&gt;HeroesComponent&lt;/code&gt; class file and import the mock &lt;code&gt;HEROES&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; クラスファイルを開き、モック &lt;code&gt;HEROES&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="4e1699bc86ad2b587090e75c61450dd6e875e027" translate="yes">
          <source>Open the &lt;code&gt;HeroesComponent&lt;/code&gt; class file.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; クラスファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="83c289ffb9fb3d0dab1e733b8cab3e6a6f24f60d" translate="yes">
          <source>Open the &lt;code&gt;HeroesComponent&lt;/code&gt; template (&lt;code&gt;heroes/heroes.component.html&lt;/code&gt;) and delete the &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; element from the bottom.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; テンプレート（ &lt;code&gt;heroes/heroes.component.html&lt;/code&gt; ）を開き、下から &lt;code&gt;&amp;lt;app-hero-detail&amp;gt;&lt;/code&gt; 要素を削除します。</target>
        </trans-unit>
        <trans-unit id="249249b46403ef9737f6987ffc4dd5822252889f" translate="yes">
          <source>Open the &lt;code&gt;HeroesComponent&lt;/code&gt; template file and make the following changes:</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートファイルを開き、次の変更を行います。</target>
        </trans-unit>
        <trans-unit id="3451050e4c99553749d7111ce9833a422f635602" translate="yes">
          <source>Open the &lt;code&gt;heroes.component.css&lt;/code&gt; file and paste in the private CSS styles for the &lt;code&gt;HeroesComponent&lt;/code&gt;. You'll find them in the &lt;a href=&quot;toh-pt2#final-code-review&quot;&gt;final code review&lt;/a&gt; at the bottom of this guide.</source>
          <target state="translated">&lt;code&gt;heroes.component.css&lt;/code&gt; ファイルを開き、 HeroesComponentのプライベートCSSスタイルを貼り付けます。 これらは、このガイドの&lt;a href=&quot;toh-pt2#final-code-review&quot;&gt;最後&lt;/a&gt;にある最終的なコードレビューで確認できます。</target>
        </trans-unit>
        <trans-unit id="73a2d411e7db91151fae4870e606389ac95fb4e0" translate="yes">
          <source>Open the &lt;code&gt;heroes.component.html&lt;/code&gt; template file. Delete the default text generated by the Angular CLI and replace it with a data binding to the new &lt;code&gt;hero&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;heroes.component.html&lt;/code&gt; テンプレートファイルを開きます。 Angular CLIによって生成されたデフォルトテキストを削除し、新しい &lt;code&gt;hero&lt;/code&gt; プロパティへのデータバインディングに置き換えます。</target>
        </trans-unit>
        <trans-unit id="c94edf93f3dd2b62d3b03f689b7b2aadcd4920c8" translate="yes">
          <source>Open the &lt;code&gt;product-alerts.component.html&lt;/code&gt; template and replace the placeholder paragraph with a &quot;Notify Me&quot; button that appears if the product price is over $700.</source>
          <target state="translated">&lt;code&gt;product-alerts.component.html&lt;/code&gt; テンプレートを開き、プレースホルダーの段落を、製品価格が700ドルを超える場合に表示される[通知]ボタンに置​​き換えます。</target>
        </trans-unit>
        <trans-unit id="6400d025b8fa34953bdda2b672a0538df017c791" translate="yes">
          <source>Open the &lt;strong&gt;Options&lt;/strong&gt; dialog with &lt;code&gt;Tools&lt;/code&gt; | &lt;code&gt;Options&lt;/code&gt;.</source>
          <target state="translated">[ &lt;code&gt;Tools&lt;/code&gt; ] | [ &lt;strong&gt;オプション&lt;/strong&gt; ]ダイアログを開きます 。 &lt;code&gt;Options&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9ed0bc4c0172c2fbba0c946c0c54e37389851b02" translate="yes">
          <source>Open the Chrome Dev Tools and go to the Network tab.</source>
          <target state="translated">Chrome Dev Toolsを開き、[ネットワーク]タブに移動します。</target>
        </trans-unit>
        <trans-unit id="2ac40a79b7d99bdb53db696ee46f27dcf412ea9a" translate="yes">
          <source>Open the browser developer tools and look in the console for an error message like this:</source>
          <target state="translated">ブラウザー開発者ツールを開き、コンソールで次のようなエラーメッセージを探します。</target>
        </trans-unit>
        <trans-unit id="dc9e01a5ad80b61c63b2e99ced4361bbecdee205" translate="yes">
          <source>Open the browser's &amp;ldquo;Developer Tools&amp;rdquo; (&lt;code&gt;Ctrl-Shift-I&lt;/code&gt; on Windows; &lt;code&gt;Command-Option-I&lt;/code&gt; in macOS).</source>
          <target state="translated">ブラウザの「開発ツール」を開きます（Windowsでは &lt;code&gt;Ctrl-Shift-I&lt;/code&gt; &lt;code&gt;Command-Option-I&lt;/code&gt; 、macOSではCommand-Option-I ）。</target>
        </trans-unit>
        <trans-unit id="9fadc1acc9a9be8e0bf71561bf2a7d42a969832d" translate="yes">
          <source>Open the component class file (&lt;code&gt;app.component.ts&lt;/code&gt;) and change the value of the &lt;code&gt;title&lt;/code&gt; property to 'Tour of Heroes'.</source>
          <target state="translated">コンポーネントクラスファイル（ &lt;code&gt;app.component.ts&lt;/code&gt; ）を開き、 &lt;code&gt;title&lt;/code&gt; プロパティの値を「Tour of Heroes」に変更します。</target>
        </trans-unit>
        <trans-unit id="2a512fe716528dcc59149d91e20e0f28d4ad253a" translate="yes">
          <source>Open the component template file (&lt;code&gt;app.component.html&lt;/code&gt;) and delete the default template generated by the Angular CLI. Replace it with the following line of HTML.</source>
          <target state="translated">コンポーネントテンプレートファイル（ &lt;code&gt;app.component.html&lt;/code&gt; ）を開き、Angular CLIによって生成されたデフォルトのテンプレートを削除します。 HTMLの次の行に置き換えます。</target>
        </trans-unit>
        <trans-unit id="734452c8b2541f55d9ae29a00ef4de74215d7e9d" translate="yes">
          <source>Open the project in your favorite editor or IDE and navigate to the &lt;code&gt;src/app&lt;/code&gt; folder to make some changes to the starter app.</source>
          <target state="translated">お気に入りのエディターまたはIDEでプロジェクトを開き、 &lt;code&gt;src/app&lt;/code&gt; フォルダーに移動して、スターターアプリにいくつかの変更を加えます。</target>
        </trans-unit>
        <trans-unit id="459015ea8246d6e4993d6740f8d4c742f2771b80" translate="yes">
          <source>Opens the official Angular documentation (angular.io) in a browser, and searches for a given keyword.</source>
          <target state="translated">公式のAngularドキュメント（angular.io）をブラウザで開き、特定のキーワードを検索します。</target>
        </trans-unit>
        <trans-unit id="64cfd431ce17e3c9550646a51c01d3e44db9beeb" translate="yes">
          <source>Opens the url in default browser.</source>
          <target state="translated">デフォルトのブラウザでURLを開きます。</target>
        </trans-unit>
        <trans-unit id="19c9c9ed8477a3a275bcf0fa3f27c69151b58b7d" translate="yes">
          <source>Opera</source>
          <target state="translated">Opera</target>
        </trans-unit>
        <trans-unit id="430d32076eb256f0fb1db5fd1333254c368ef1ba" translate="yes">
          <source>Operation</source>
          <target state="translated">Operation</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="55da9031f2999cb3d83e442304b4dcdf4c71eb07" translate="yes">
          <source>Operators are functions that build on the observables foundation to enable sophisticated manipulation of collections. For example, RxJS defines operators such as &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/querylist#filter&quot;&gt;filter()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;concat()&lt;/code&gt;, and &lt;code&gt;flatMap()&lt;/code&gt;.</source>
          <target state="translated">演算子は、コレクションの高度な操作を可能にするためにobservablesの基盤の上に構築される関数です。 たとえば、RxJSは &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/querylist#filter&quot;&gt;filter()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;concat()&lt;/code&gt; 、 &lt;code&gt;flatMap()&lt;/code&gt; などの演算子を定義します。</target>
        </trans-unit>
        <trans-unit id="fb6aba7d760dae5cbe0e7867f22c9c01e7fc584c" translate="yes">
          <source>Operators such as &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, &lt;code&gt;instanceof&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;typeof&lt;/code&gt; 、 &lt;code&gt;instanceof&lt;/code&gt; などの演算子</target>
        </trans-unit>
        <trans-unit id="78a67b274716fa5e61a869350cc8edc511b03285" translate="yes">
          <source>Operators take configuration options, and they return a function that takes a source observable. When executing this returned function, the operator observes the source observable&amp;rsquo;s emitted values, transforms them, and returns a new observable of those transformed values. Here is a simple example:</source>
          <target state="translated">オペレーターは構成オプションを取り、ソースオブザーバブルを受け取る関数を返します。 この返された関数を実行するとき、オペレーターはソースオブザーバブルの出力値を観察し、それらを変換し、それらの変換された値の新しいオブザーバブルを返します。 以下に簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="aa7b517ed2c8c9eece687a703e1244e651136d90" translate="yes">
          <source>Optimization and source map configuration</source>
          <target state="translated">最適化とソースマップの構成</target>
        </trans-unit>
        <trans-unit id="a58c5cb025a62662cf44702a6d527a8c87a03712" translate="yes">
          <source>Opting into Angular Ivy</source>
          <target state="translated">Angular Ivyへのオプトイン</target>
        </trans-unit>
        <trans-unit id="ac18808e2e8e393149e16402b330eb2d7a36ad06" translate="yes">
          <source>Opting out of differential loading</source>
          <target state="translated">差荷重のオプトアウト</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="75bca5f8db26fdc8df7cc72ba6934a8ea6df9ba3" translate="yes">
          <source>Option names are prefixed with a double dash (--). Option aliases are prefixed with a single dash (-). Arguments are not prefixed. For example:</source>
          <target state="translated">オプション名の前には二重ダッシュ（-）が付きます。 オプションエイリアスの先頭には、ダッシュ（-）が1つ付きます。 引数には接頭辞が付きません。 例えば：</target>
        </trans-unit>
        <trans-unit id="0c6c4102d4dfec3b1aa41117e0e344046c58a151" translate="yes">
          <source>Optional</source>
          <target state="translated">Optional</target>
        </trans-unit>
        <trans-unit id="dc81f35d5cb2a85d02d09449720e3b4d0e563a55" translate="yes">
          <source>Optional browser features to polyfill</source>
          <target state="translated">ポリフィルするオプションのブラウザ機能</target>
        </trans-unit>
        <trans-unit id="e49ff74bc21a29fb180a1ac29c34980ae57fe46b" translate="yes">
          <source>Optional component/template files to replicate.</source>
          <target state="translated">複製するオプションのコンポーネント/テンプレートファイル。</target>
        </trans-unit>
        <trans-unit id="7346e4d45825ec177eaaa77f3cf50927846f5271" translate="yes">
          <source>Optional dependencies</source>
          <target state="translated">オプションの依存関係</target>
        </trans-unit>
        <trans-unit id="ab510470f25bfcd81d4210f3e4091efd6f1cfab3" translate="yes">
          <source>Optional information takes other forms. Search criteria are often loosely structured, e.g., &lt;code&gt;name='wind*'&lt;/code&gt;. Multiple values are common&amp;mdash;&lt;code&gt;after='12/31/2015' &amp;amp; before='1/1/2017'&lt;/code&gt;&amp;mdash;in no particular order&amp;mdash;&lt;code&gt;before='1/1/2017' &amp;amp; after='12/31/2015'&lt;/code&gt;&amp;mdash; in a variety of formats&amp;mdash;&lt;code&gt;during='currentYear'&lt;/code&gt;.</source>
          <target state="translated">オプション情報は他の形式を取ります。 多くの場合、検索条件は大まかに構造化されています（例： &lt;code&gt;name='wind*'&lt;/code&gt; 。 複数の値が一般的です&amp;mdash; &lt;code&gt;after='12/31/2015' &amp;amp; before='1/1/2017'&lt;/code&gt; 31/2015 '＆before =' 1/1/2017 ' &amp;mdash;順不同&amp;mdash; &lt;code&gt;before='1/1/2017' &amp;amp; after='12/31/2015'&lt;/code&gt; 1/1/2017 '＆after = '12 / 31/2015' &amp;mdash;さまざまな形式で&amp;mdash; &lt;code&gt;during='currentYear'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="400c931b4be3d7d0c08ae1d7d4b3a2706e5eb95a" translate="yes">
          <source>Optional parameters are the ideal vehicle for conveying arbitrarily complex information during navigation. Optional parameters aren't involved in pattern matching and afford flexibility of expression.</source>
          <target state="translated">オプションのパラメーターは、ナビゲーション中に任意の複雑な情報を伝達するための理想的な手段です。 オプションのパラメーターはパターンマッチングに関与せず、表現の柔軟性を提供します。</target>
        </trans-unit>
        <trans-unit id="6856aec35674ad76cddfd02f6ff177082b78ea73" translate="yes">
          <source>Optional. A handler for an error notification. An error halts execution of the observable instance.</source>
          <target state="translated">オプション。 エラー通知のハンドラー。 エラーが発生すると、オブザーバブルインスタンスの実行が停止します。</target>
        </trans-unit>
        <trans-unit id="29f601f024ebc56d9feeca9e17e7bdf0b57d1cc9" translate="yes">
          <source>Optional. A handler for the execution-complete notification. Delayed values can continue to be delivered to the next handler after execution is complete.</source>
          <target state="translated">オプション。 実行完了通知のハンドラー。 遅延値は、実行が完了した後、次のハンドラーに引き続き配信されます。</target>
        </trans-unit>
        <trans-unit id="6dcae3623c0d8f13dc4392798d18296e66017e4e" translate="yes">
          <source>Optional. Default is &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;''&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3381f35deada3fd6b019d74a7bf617a8c9b493e9" translate="yes">
          <source>Optional. Default is &lt;code&gt;'OK'&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;'OK'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0337f034b870c06d392a0cffaa1649d167036e8a" translate="yes">
          <source>Optional. Default is &lt;code&gt;'USD'&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;'USD'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5a3bb62c2d7f0552954f10cb2f8bff843cedd8ff" translate="yes">
          <source>Optional. Default is &lt;code&gt;'en'&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;'en'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5c14de4b5a52901ab45f1f50c8f6f8c388535cca" translate="yes">
          <source>Optional. Default is &lt;code&gt;'imperative'&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;'imperative'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1e7d75e9cc2bea632ff7da41006632ee60f1ced8" translate="yes">
          <source>Optional. Default is &lt;code&gt;'mediumDate'&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;'mediumDate'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fb608f50cfb6774b712c37f877def2a0f761ae95" translate="yes">
          <source>Optional. Default is &lt;code&gt;'path'&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;'path'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1e74ea3046dea21fa1f199a43b2d9d2777651c96" translate="yes">
          <source>Optional. Default is &lt;code&gt;'symbol'&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;'symbol'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="83edc8035c7f93c13ecad123dc62e1a4b3f07969" translate="yes">
          <source>Optional. Default is &lt;code&gt;(e: &lt;a href=&quot;../../core/missingtranslationstrategy#Error&quot;&gt;Error&lt;/a&gt;) =&amp;gt; { }&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;(e: &lt;a href=&quot;../../core/missingtranslationstrategy#Error&quot;&gt;Error&lt;/a&gt;) =&amp;gt; { }&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f0fb4c3880567dd79f680c0df074813a3f8092e6" translate="yes">
          <source>Optional. Default is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0cc77783c426198beca7a5061e2fbc8d0f73d22e" translate="yes">
          <source>Optional. Default is &lt;code&gt;200&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;200&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6cdfbb9d0c95f30183d4605789d3423494cbc47e" translate="yes">
          <source>Optional. Default is &lt;code&gt;&lt;a href=&quot;serializertypes#PRIMITIVE&quot;&gt;SerializerTypes.PRIMITIVE&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;&lt;a href=&quot;serializertypes#PRIMITIVE&quot;&gt;SerializerTypes.PRIMITIVE&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0fec7dfbf05401bca2791634d7c6a7bfc7067aa9" translate="yes">
          <source>Optional. Default is &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f9fc6f9d8254c0e45b0c64754677e088f1d113ca" translate="yes">
          <source>Optional. Default is &lt;code&gt;defaultComparator&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;defaultComparator&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9145bb534991daf57f7701301bbf91899e9dd502" translate="yes">
          <source>Optional. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0055788f2ca22e20c975392f22c77a2081447880" translate="yes">
          <source>Optional. Default is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="81e97dcaaa41ca3300b210af9cb347aabd6782bc" translate="yes">
          <source>Optional. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="78bbe710af81960b2e485bb4d19548f797e8de4a" translate="yes">
          <source>Optional. Default is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ea504f3d8a30bf5b2b0407a00c52804459c0a173" translate="yes">
          <source>Optional. Default is &lt;code&gt;{ skipLocationChange: false }&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;{ skipLocationChange: false }&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7fe43eedc240161af52040b1459232628c4db09f" translate="yes">
          <source>Optional. Default is &lt;code&gt;{} as HttpParamsOptions&lt;/code&gt;.</source>
          <target state="translated">オプション。 &lt;code&gt;{} as HttpParamsOptions&lt;/code&gt; デフォルトは{}です 。</target>
        </trans-unit>
        <trans-unit id="3b2bf12eb0f92f428cfb65113da6b250b10dcd6c" translate="yes">
          <source>Optional. Default is &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">オプション。 デフォルトは &lt;code&gt;{}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="90fef798a39f3038503c95933f2112a7de384039" translate="yes">
          <source>Optional. If specified, this callback will be invoked whenever the set of pending macrotasks changes. If this callback returns true doneCb will not be invoked and no further updates will be issued.</source>
          <target state="translated">オプション。 指定されている場合、このコールバックは、保留中のマクロタスクのセットが変更されるたびに呼び出されます。 このコールバックがtrueを返す場合、doneCbは呼び出されず、それ以上の更新は発行されません。</target>
        </trans-unit>
        <trans-unit id="40872feaf230ffad9bd8997564d231308c95c3b6" translate="yes">
          <source>Optional. The maximum time to wait for Angular to become stable. If not specified, whenStable() will wait forever.</source>
          <target state="translated">オプション。 Angularが安定するのを待つ最大時間。 指定しない場合、whenStable（）は永久に待機します。</target>
        </trans-unit>
        <trans-unit id="8875354ce564cd553c2341c2da111e365d05b6b2" translate="yes">
          <source>Optionally signal to the renderer whether this element is a host element or not</source>
          <target state="translated">オプションで、この要素がホスト要素であるかどうかをレンダラーに通知します</target>
        </trans-unit>
        <trans-unit id="c86bfd6abd0b43e24c33c522408b8b56e4ddafca" translate="yes">
          <source>Optionally, a component can be mounted onto a DOM element that does not match the componentType's selector.</source>
          <target state="translated">オプションで、componentTypeのセレクターと一致しないDOM要素にコンポーネントをマウントできます。</target>
        </trans-unit>
        <trans-unit id="5f8c1c2b5b21a8e5430392924dd15f7e26c0baf4" translate="yes">
          <source>Optionally, you can configure the Angular CLI to use &lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt; as the build tool. For more information, see &lt;a href=&quot;guide/bazel&quot;&gt;Building with Bazel&lt;/a&gt;.</source>
          <target state="translated">オプションで、ビルドツールとして&lt;a href=&quot;https://docs.bazel.build&quot;&gt;Bazel&lt;/a&gt;を使用するように、Angular CLIを構成できます。 詳細については&lt;a href=&quot;guide/bazel&quot;&gt;、Bazel&lt;/a&gt;を使用したビルドを参照してください。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="3743e45daa27c13ec520d24349acdbca83290cec" translate="yes">
          <source>Options are given by the CLI user, context is provided by and provides access to the CLI Builder API, and the developer provides the behavior.</source>
          <target state="translated">オプションはCLIユーザーによって指定され、コンテキストはCLI Builder APIによって提供され、CLI Builder APIへのアクセスを提供し、開発者は動作を提供します。</target>
        </trans-unit>
        <trans-unit id="c9e5f370318c8dc3cee1fa76cecc61e59ecfc94b" translate="yes">
          <source>Options for creating a compiler</source>
          <target state="translated">コンパイラを作成するためのオプション</target>
        </trans-unit>
        <trans-unit id="2ef5635a8b4edbca1d90b4b8a045e7ee555d7f8b" translate="yes">
          <source>Options that control animation styling and timing.</source>
          <target state="translated">アニメーションのスタイルとタイミングを制御するオプション。</target>
        </trans-unit>
        <trans-unit id="5a3320daae4255b587f501a2828c3b8e5b2672a6" translate="yes">
          <source>Options that control the navigation strategy.</source>
          <target state="translated">ナビゲーション戦略を制御するオプション。</target>
        </trans-unit>
        <trans-unit id="2312d0dae9bb6c6b2553204f4b8553b015206073" translate="yes">
          <source>Options that modify the navigation strategy.</source>
          <target state="translated">ナビゲーション戦略を変更するオプション。</target>
        </trans-unit>
        <trans-unit id="ec6b4a1f161a0c97e8e2157d877fd1afa52dbed1" translate="yes">
          <source>Options that specify files can be given as absolute paths, or as paths relative to the current working directory, which is generally either the workspace or project root.</source>
          <target state="translated">ファイルを指定するオプションは、絶対パスとして、または現在の作業ディレクトリ（通常はワークスペースまたはプロジェクトルート）に対する相対パスとして指定できます。</target>
        </trans-unit>
        <trans-unit id="bfe27583e1d225b9a1db1842931adaae7fcd0d72" translate="yes">
          <source>Or inside the &lt;code&gt;beforeEach()&lt;/code&gt; if you prefer to inject the service as part of your setup.</source>
          <target state="translated">または、セットアップの一部としてサービスを注入する場合は、 &lt;code&gt;beforeEach()&lt;/code&gt; 内で。</target>
        </trans-unit>
        <trans-unit id="a258d20dbff14fba0a26b7e4ddee32d7abd12c5d" translate="yes">
          <source>Or make the subscription callback run inside the zone.</source>
          <target state="translated">または、サブスクリプションコールバックをゾーン内で実行します。</target>
        </trans-unit>
        <trans-unit id="3936f7ad23900ec7726977342c7a6b87c57e0e00" translate="yes">
          <source>Or something could go wrong on the client-side such as a network error that prevents the request from completing successfully or an exception thrown in an RxJS operator. These errors produce JavaScript &lt;code&gt;ErrorEvent&lt;/code&gt; objects.</source>
          <target state="translated">または、リクエストが正常に完了できないネットワークエラーや、RxJSオペレーターでスローされた例外など、クライアント側で何かが間違っている可能性があります。 これらのエラーはJavaScript &lt;code&gt;ErrorEvent&lt;/code&gt; オブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="72e34d9cf1be96305161a84b1004a86ff4a17579" translate="yes">
          <source>Or to use the production configuration.</source>
          <target state="translated">または、実稼働構成を使用します。</target>
        </trans-unit>
        <trans-unit id="df84bcd15a086370c882bf60c8fb48753585c091" translate="yes">
          <source>Or you might not use a pipe at all. It may be better to pursue the pipe's purpose with a property of the component, a point that's discussed later in this page.</source>
          <target state="translated">または、パイプをまったく使用しない場合があります。 コンポーネントのプロパティを使用してパイプの目的を追求することをお勧めします。この点については、このページで後述します。</target>
        </trans-unit>
        <trans-unit id="8444fcb4a82e33b055c10eaa5c1b216aee784066" translate="yes">
          <source>Organize the app and routes into &lt;em&gt;feature areas&lt;/em&gt; using modules.</source>
          <target state="translated">モジュールを使用してアプリとルートを&lt;em&gt;機能エリアに整理&lt;/em&gt;します。</target>
        </trans-unit>
        <trans-unit id="b2d968710497d4eceae60b1c6ec749f251693530" translate="yes">
          <source>Organize the app into &lt;em&gt;feature areas&lt;/em&gt;.</source>
          <target state="translated">アプリを&lt;em&gt;機能エリアに&lt;/em&gt;整理し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac43c4bfe64883c7de293b099023b616edb5a462" translate="yes">
          <source>Organizing the application features into modules.</source>
          <target state="translated">アプリケーション機能をモジュールに整理します。</target>
        </trans-unit>
        <trans-unit id="ca86c62ddb9a806787e14a0b0b8237317a5018fc" translate="yes">
          <source>Organizing your code into distinct functional modules helps in managing development of complex applications, and in designing for reusability. In addition, this technique lets you take advantage of &lt;em&gt;lazy-loading&lt;/em&gt;&amp;mdash;that is, loading modules on demand&amp;mdash;to minimize the amount of code that needs to be loaded at startup.</source>
          <target state="translated">コードを個別の機能モジュールに編成すると、複雑なアプリケーションの開発を管理したり、再利用性を考慮した設計に役立ちます。 さらに、この手法を使用すると、 &lt;em&gt;遅延読み込み、&lt;/em&gt;つまりオンデマンドでモジュールを読み込むことができ、起動時に読み込む必要のあるコードの量を最小限に抑えることができます。</target>
        </trans-unit>
        <trans-unit id="83a39e002d71684b8b3fb6274fcd611217931dbe" translate="yes">
          <source>Other &lt;em&gt;routed component&lt;/em&gt; tests need a test double for &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">他の&lt;em&gt;ルーティングされたコンポーネントの&lt;/em&gt;テストには、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; のテストダブルが必要です。</target>
        </trans-unit>
        <trans-unit id="0869cfde2d1aeea3f26a14c997de0f03f2a1126a" translate="yes">
          <source>Other APIs may bury the data that you want within an object. You might have to dig that data out by processing the &lt;code&gt;Observable&lt;/code&gt; result with the RxJS &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">他のAPIは、オブジェクト内に必要なデータを埋め込む場合があります。 RxJS &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; 演算子で &lt;code&gt;Observable&lt;/code&gt; 結果を処理することにより、そのデータを掘り出さなければならない場合があります。</target>
        </trans-unit>
        <trans-unit id="4025c5882dbf33b768634c48c91716e3d8aa323b" translate="yes">
          <source>Other Angular lifecycle hooks</source>
          <target state="translated">他のAngularライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="5e20c28f5514d747bf0651a3cf8b661c19763b23" translate="yes">
          <source>Other Angular sub-systems may have their own lifecycle hooks apart from these component hooks.</source>
          <target state="translated">他のAngularサブシステムには、これらのコンポーネントフックとは別に独自のライフサイクルフックがあります。</target>
        </trans-unit>
        <trans-unit id="d04236090d90fbbdc04e8b5da31968890f7552f4" translate="yes">
          <source>Other aspects of an outgoing request can be configured via the options object passed as the last argument to the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">送信リクエストの他の側面は、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドへの最後の引数として渡されるオプションオブジェクトを介して設定できます。</target>
        </trans-unit>
        <trans-unit id="d16d34594c634bd0715de111d850d0ef95ffa572" translate="yes">
          <source>Other handlers are less forgiving. For example, the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive expects an object with a &lt;code&gt;button&lt;/code&gt; property that identifies which mouse button (if any) was pressed during the click. The &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive throws an error if the event object is missing.</source>
          <target state="translated">他のハンドラーはあまり寛容ではありません。 たとえば、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブは、クリック中にどのマウスボタン（存在する場合）が押されたかを識別する &lt;code&gt;button&lt;/code&gt; プロパティを持つオブジェクトを想定しています。 イベントオブジェクトが見つからない場合、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; ディレクティブはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="288870d1724dd02a5ce433fe90e6e2f3ed869b96" translate="yes">
          <source>Other notable differences from JavaScript syntax include:</source>
          <target state="translated">JavaScriptシンタックスとのその他の顕著な違いは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a8586ddfb0b549d5d774ad5cd6ad4b33ff4bae3a" translate="yes">
          <source>Other reasons the Angular service worker might change the version of a running app are normal events:</source>
          <target state="translated">Angular Service Workerが実行中のアプリのバージョンを変更する可能性があるその他の理由は、通常のイベントです：</target>
        </trans-unit>
        <trans-unit id="73e8fe3faf09a56f69f9f940eebba0662dab6a8e" translate="yes">
          <source>Other test frameworks</source>
          <target state="translated">その他のテストフレームワーク</target>
        </trans-unit>
        <trans-unit id="59c884e51b962ab65dd7fc3b9aedc26de661abe9" translate="yes">
          <source>Other types of providers can create their values &lt;em&gt;lazily&lt;/em&gt;; that is, when they're needed for injection.</source>
          <target state="translated">他のタイプのプロバイダーは、値を&lt;em&gt;遅延的に&lt;/em&gt;作成できます。 つまり、注入に必要なときです。</target>
        </trans-unit>
        <trans-unit id="4e7f217ab819a609a1f778b51855488efb2ea0c0" translate="yes">
          <source>Our community values respectful, supportive communication. Please consult and adhere to the &lt;a href=&quot;https://github.com/angular/code-of-conduct/blob/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;.</source>
          <target state="translated">私たちのコミュニティは、敬意と協力的なコミュニケーションを大切にしています。 &lt;a href=&quot;https://github.com/angular/code-of-conduct/blob/master/CODE_OF_CONDUCT.md&quot;&gt;行動規範&lt;/a&gt;を参照し、遵守してください。</target>
        </trans-unit>
        <trans-unit id="071db634a9379fcd1ebd5baffe4fc841d7fa31c4" translate="yes">
          <source>Out of the box, the router either never preloads, or preloads every lazy load module. The &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; also supports &lt;a href=&quot;router#custom-preloading&quot;&gt;custom preloading strategies&lt;/a&gt; for fine control over which modules to preload and when.</source>
          <target state="translated">デフォルトでは、ルーターは事前ロードしないか、すべての遅延ロードモジュールを事前ロードします。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; は、どのモジュールをいつプリロードするかを細かく制御するための&lt;a href=&quot;router#custom-preloading&quot;&gt;カスタムプリロード戦略&lt;/a&gt;もサポートしています。</target>
        </trans-unit>
        <trans-unit id="150cdbc41b7f6e9b339465271d64901643a57549" translate="yes">
          <source>Outgoing URL parameters.</source>
          <target state="translated">発信URLパラメーター。</target>
        </trans-unit>
        <trans-unit id="d4bad590de3d2a64d6a24b3e9f2674b2cf5369fd" translate="yes">
          <source>Outgoing headers for this request.</source>
          <target state="translated">このリクエストの送信ヘッダー。</target>
        </trans-unit>
        <trans-unit id="4a81f898e5e4474a5618b8f023842ea200ddda8a" translate="yes">
          <source>OutletContext</source>
          <target state="translated">OutletContext</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="31e493f13af084077b8a318788983f0e5d60c016" translate="yes">
          <source>Output a code coverage report.</source>
          <target state="translated">コードカバレッジレポートを出力します。</target>
        </trans-unit>
        <trans-unit id="2faf6bd753b0ce65551933b80f4bd5d1808345e3" translate="yes">
          <source>Output format (prose, json, stylish, verbose, pmd, msbuild, checkstyle, vso, fileslist).</source>
          <target state="translated">出力形式（prose、json、stylish、verbose、pmd、msbuild、checkstyle、vso、fileslist）。</target>
        </trans-unit>
        <trans-unit id="baa9407a9473bc756b7b02207560d4a49a43e8d1" translate="yes">
          <source>Output format for the generated file.</source>
          <target state="translated">生成されたファイルの出力形式。</target>
        </trans-unit>
        <trans-unit id="8f5d71b7c43000821c2489a9cdfcaad176dd4714" translate="yes">
          <source>Output in-file eval sourcemaps.</source>
          <target state="translated">ファイル内評価ソースマップを出力します。</target>
        </trans-unit>
        <trans-unit id="ca4409ba27dc1d2a8784894950db67da52a31ddb" translate="yes">
          <source>Output options</source>
          <target state="translated">出力オプション</target>
        </trans-unit>
        <trans-unit id="3cb7e94de5a4f52643bcf28b38d7272c4e70dc3f" translate="yes">
          <source>Output profile events for Chrome profiler.</source>
          <target state="translated">Chromeプロファイラーのプロファイルイベントを出力します。</target>
        </trans-unit>
        <trans-unit id="6f1e775f7bd32d3f5bef06b33589003e7104614b" translate="yes">
          <source>Output sourcemaps.</source>
          <target state="translated">出力ソースマップ。</target>
        </trans-unit>
        <trans-unit id="140a5bc951788cb85b964b9b11b49aa36ddda04b" translate="yes">
          <source>Outputs Angular CLI version.</source>
          <target state="translated">Angular CLIバージョンを出力します。</target>
        </trans-unit>
        <trans-unit id="67fda2a70b40411a45cd0693789fc25606a8181d" translate="yes">
          <source>Overall JSON structure</source>
          <target state="translated">全体的なJSON構造</target>
        </trans-unit>
        <trans-unit id="0370569258170210e172c329a95a11cd7907a5cd" translate="yes">
          <source>Overall application performance is affected in cases where the user stays on Angular-rendered pages because the AngularJS framework and application are still loaded and running, even if they are never accessed.</source>
          <target state="translated">AngularJSフレームワークとアプリケーションはアクセスされていなくてもロードされ、実行されているため、ユーザーがAngularレンダリングされたページに留まる場合、アプリケーション全体のパフォーマンスが影響を受けます。</target>
        </trans-unit>
        <trans-unit id="177a68e88431bcd2dbcca1a54072f3b5e904f4c5" translate="yes">
          <source>Overall structural guidelines</source>
          <target state="translated">全体的な構造ガイドライン</target>
        </trans-unit>
        <trans-unit id="d0611499e594109b02f051b3c268baf908e73abb" translate="yes">
          <source>Overload #1</source>
          <target state="translated">過負荷＃1</target>
        </trans-unit>
        <trans-unit id="8f61a01a0fcd57ff4e2afa8443e05ab873d1f7eb" translate="yes">
          <source>Overload #10</source>
          <target state="translated">過負荷＃10</target>
        </trans-unit>
        <trans-unit id="5092d306bd8547dad81e4e6bb075aa8c7301ec7a" translate="yes">
          <source>Overload #11</source>
          <target state="translated">過負荷＃11</target>
        </trans-unit>
        <trans-unit id="708ab9510c7e38c88f006b391797e1d466773093" translate="yes">
          <source>Overload #12</source>
          <target state="translated">過負荷＃12</target>
        </trans-unit>
        <trans-unit id="29c87afbd834728ebd526e5d252d5e3ef7aad9af" translate="yes">
          <source>Overload #13</source>
          <target state="translated">過負荷＃13</target>
        </trans-unit>
        <trans-unit id="c4f23330e96a7c9954b7624fd51cb9e702277387" translate="yes">
          <source>Overload #14</source>
          <target state="translated">過負荷＃14</target>
        </trans-unit>
        <trans-unit id="5875cb2297c8b6a099963c7348d618e9d77bed46" translate="yes">
          <source>Overload #15</source>
          <target state="translated">過負荷＃15</target>
        </trans-unit>
        <trans-unit id="7571f668025673eebc39fc687f625bd5f2b6872e" translate="yes">
          <source>Overload #16</source>
          <target state="translated">オーバーロード＃16</target>
        </trans-unit>
        <trans-unit id="d656b1e8a7b592004dc4fce8abbcb8d292732108" translate="yes">
          <source>Overload #17</source>
          <target state="translated">オーバーロード＃17</target>
        </trans-unit>
        <trans-unit id="b9e7b378fae999a47e0e9fc977aed102fcf991d7" translate="yes">
          <source>Overload #2</source>
          <target state="translated">過負荷＃2</target>
        </trans-unit>
        <trans-unit id="4503cfa5e2771e6382a0e066463069671128efb1" translate="yes">
          <source>Overload #3</source>
          <target state="translated">過負荷＃3</target>
        </trans-unit>
        <trans-unit id="91e294e149f13e0c4620355553caeb9afb0d6534" translate="yes">
          <source>Overload #4</source>
          <target state="translated">オーバーロード＃4</target>
        </trans-unit>
        <trans-unit id="4e01b3b424f3a462a7589dc84c2863d0ef63e27e" translate="yes">
          <source>Overload #5</source>
          <target state="translated">オーバーロード＃5</target>
        </trans-unit>
        <trans-unit id="7e86a19e6f128d7c6324adfb89f38179bd257846" translate="yes">
          <source>Overload #6</source>
          <target state="translated">過負荷＃6</target>
        </trans-unit>
        <trans-unit id="f2ecfac37d94de7fcca719eb867422193b7dfabe" translate="yes">
          <source>Overload #7</source>
          <target state="translated">過負荷＃7</target>
        </trans-unit>
        <trans-unit id="1d21149070575307aa140758d30f3023fe51b855" translate="yes">
          <source>Overload #8</source>
          <target state="translated">過負荷＃8</target>
        </trans-unit>
        <trans-unit id="8d9cffbc651127c0793f004f812707630de70ca3" translate="yes">
          <source>Overload #9</source>
          <target state="translated">過負荷＃9</target>
        </trans-unit>
        <trans-unit id="631bc5aa25f06fafc9a23994bb1eabdf6877fe11" translate="yes">
          <source>Override component providers</source>
          <target state="translated">コンポーネントプロバイダーをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="cc6d9f903f785852001169fdcf9d21c0dc2dcfda" translate="yes">
          <source>Override specs in the protractor config.</source>
          <target state="translated">分度器の設定で仕様をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="82569e1af4411a3ca5a500d77442e4d926659dfc" translate="yes">
          <source>Override suite in the protractor config.</source>
          <target state="translated">分度器設定のスイートをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="95dd7f1f63e72a369de142c6a9ccb5f7656a8603" translate="yes">
          <source>Override which browsers tests are run against.</source>
          <target state="translated">テスト対象のブラウザをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="3945eec03a2fbff43b9a0124637fa3ddd8817e70" translate="yes">
          <source>Overrides the default encapsulation start and end delimiters (&lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;)</source>
          <target state="translated">デフォルトのカプセル化開始および終了区切り文字（ &lt;code&gt;{{&lt;/code&gt; および &lt;code&gt;}}&lt;/code&gt; ）をオーバーライドします</target>
        </trans-unit>
        <trans-unit id="a3e6276d4238b83d8b34b8690b18af3da84bd359" translate="yes">
          <source>Overrides the template of the given component, compiling the template in the context of the TestingModule.</source>
          <target state="translated">指定されたコンポーネントのテンプレートをオーバーライドし、TestingModuleのコンテキストでテンプレートをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="3851edd380abbaab34e148361e486f13f53d606d" translate="yes">
          <source>Overriding disablement of inner animations</source>
          <target state="translated">内部アニメーションの無効化のオーバーライド</target>
        </trans-unit>
        <trans-unit id="7f56c915b749465438fc24153a743680f744796e" translate="yes">
          <source>Overriding the base class's &lt;code&gt;afterGetHeroes()&lt;/code&gt; method solves the problem.</source>
          <target state="translated">基本クラスの &lt;code&gt;afterGetHeroes()&lt;/code&gt; メソッドをオーバーライドすると、問題が解決します。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="2746a08dacca4229b0af233daabfa9fd97dc5ee8" translate="yes">
          <source>Overview of Angular Libraries</source>
          <target state="translated">Angularライブラリの概要</target>
        </trans-unit>
        <trans-unit id="a1077753c31ecdcb7f35db71ad27322b7cf6eadb" translate="yes">
          <source>Overwrites all providers for the given token with the given provider definition.</source>
          <target state="translated">指定されたトークンのすべてのプロバイダーを、指定されたプロバイダー定義で上書きします。</target>
        </trans-unit>
        <trans-unit id="3292eb3a99ca7abf1d1290994cdfe7c7707593aa" translate="yes">
          <source>PACKAGE_ROOT_URL</source>
          <target state="translated">PACKAGE_ROOT_URL</target>
        </trans-unit>
        <trans-unit id="d3029193fe6a512053aa03be9cefd3922b2e590a" translate="yes">
          <source>PATCH Example</source>
          <target state="translated">パッチの例</target>
        </trans-unit>
        <trans-unit id="55dc4ff75c8aba5ba9283f3021f8a6cf480a42ff" translate="yes">
          <source>PLATFORM_ID</source>
          <target state="translated">PLATFORM_ID</target>
        </trans-unit>
        <trans-unit id="eebc664eb359e840c8da6c5793091d6785b6a05c" translate="yes">
          <source>PLATFORM_INITIALIZER</source>
          <target state="translated">PLATFORM_INITIALIZER</target>
        </trans-unit>
        <trans-unit id="397a769801b979d889ebd77a4332cd956babc6c8" translate="yes">
          <source>PRIMARY_OUTLET</source>
          <target state="translated">PRIMARY_OUTLET</target>
        </trans-unit>
        <trans-unit id="270be4f67efbcd132dfcd88a1e60b5ca9c489764" translate="yes">
          <source>PROPERTY</source>
          <target state="translated">PROPERTY</target>
        </trans-unit>
        <trans-unit id="64ae0efa4ecf6712c9bb96d5b026f94653c2db16" translate="yes">
          <source>PURPOSE</source>
          <target state="translated">PURPOSE</target>
        </trans-unit>
        <trans-unit id="7431e3df243c5be33cffa0b28ca2a76b93f0538c" translate="yes">
          <source>Package</source>
          <target state="translated">Package</target>
        </trans-unit>
        <trans-unit id="d6406a88383eedf30b977d2bb0232aff0842dafc" translate="yes">
          <source>Package name</source>
          <target state="translated">パッケージ名</target>
        </trans-unit>
        <trans-unit id="45ab97346b3ce00e0f00b6991ed88c0b88a73912" translate="yes">
          <source>Packages to support the &lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt; test library.</source>
          <target state="translated">&lt;a href=&quot;https://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt;テストライブラリをサポートするパッケージ。</target>
        </trans-unit>
        <trans-unit id="2957f306bb6cf56d4d975d8b62e2053e57cf4b92" translate="yes">
          <source>Packages to support the &lt;a href=&quot;https://www.npmjs.com/package/karma&quot;&gt;karma&lt;/a&gt; test runner.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/karma&quot;&gt;カルマ&lt;/a&gt;テストランナーをサポートするパッケージ。</target>
        </trans-unit>
        <trans-unit id="c3bf6af63f1304d786eda4276c19d026531db799" translate="yes">
          <source>Packaging functionality as a library forces the artifacts in the library to be decoupled from the application's business logic. This can help to avoid various bad practices or architecture mistakes that can make it difficult to decouple and reuse code in the future.</source>
          <target state="translated">機能をライブラリとしてパッケージ化すると、ライブラリ内のアーティファクトがアプリケーションのビジネスロジックから強制的に切り離されます。 これにより、将来のコードの分離と再利用が困難になる可能性のあるさまざまな悪い習慣やアーキテクチャの間違いを避けることができます。</target>
        </trans-unit>
        <trans-unit id="19a78c06faafad0c2d397e4dec6632383ee88e00" translate="yes">
          <source>Page URLs mirror the &lt;code&gt;content&lt;/code&gt; file structure. The URL for the page of a guide is in the form &lt;code&gt;guide/{page-name}&lt;/code&gt;. The page for &lt;em&gt;this&lt;/em&gt; &quot;Authors Style Guide&quot; is located at &lt;code&gt;content/guide/docs-style-guide.md&lt;/code&gt; and its URL is &lt;code&gt;guide/docs-style-guide&lt;/code&gt;.</source>
          <target state="translated">ページURLは &lt;code&gt;content&lt;/code&gt; ファイル構造を反映しています。 ガイドのページのURLは、 &lt;code&gt;guide/{page-name}&lt;/code&gt; 形式です。 &lt;em&gt;この&lt;/em&gt; 「Authors Style Guide」のページは &lt;code&gt;content/guide/docs-style-guide.md&lt;/code&gt; あり、そのURLは &lt;code&gt;guide/docs-style-guide&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="66f986b3cfa975a766863176b860bdf5fd800365" translate="yes">
          <source>Parallel animation using group() function</source>
          <target state="translated">group（）関数を使用した並列アニメーション</target>
        </trans-unit>
        <trans-unit id="65ff6d96cab9fb6bd409ea5ef8e9b9343f89cc06" translate="yes">
          <source>ParamMap</source>
          <target state="translated">ParamMap</target>
        </trans-unit>
        <trans-unit id="d402babc9a4a78fce14eb88c847eb02e3d8f7c21" translate="yes">
          <source>Parameter decorator for a directive constructor that designates a host-element attribute whose value is injected as a constant string literal.</source>
          <target state="translated">値が定数文字列リテラルとして挿入されるホスト要素属性を指定するディレクティブコンストラクターのパラメーターデコレータ。</target>
        </trans-unit>
        <trans-unit id="831563a593704f674d85a360973bb4a6e18835d6" translate="yes">
          <source>Parameter decorator on a dependency parameter of a class constructor that specifies a custom provider of the dependency.</source>
          <target state="translated">依存関係のカスタムプロバイダーを指定するクラスコンストラクターの依存関係パラメーターのパラメーターデコレーター。</target>
        </trans-unit>
        <trans-unit id="bc4b1b77d0964b6c5e91f132ad5df2d2d9ad36ed" translate="yes">
          <source>Parameter decorator on a view-provider parameter of a class constructor that tells the DI framework to resolve the view by checking injectors of child elements, and stop when reaching the host element of the current component.</source>
          <target state="translated">クラスコンストラクターのビュープロバイダーパラメーターのパラメーターデコレーターは、子要素のインジェクターをチェックしてビューを解決し、現在のコンポーネントのホスト要素に到達したときに停止するようにDIフレームワークに指示します。</target>
        </trans-unit>
        <trans-unit id="5b25852d9fb793500a6dc605fb628540f9433473" translate="yes">
          <source>Parameter decorator that configures a content query.</source>
          <target state="translated">コンテンツクエリを構成するパラメーターデコレータ。</target>
        </trans-unit>
        <trans-unit id="053dd21e29405d85267d6cc081cfcf47598f70a8" translate="yes">
          <source>Parameter decorator that configures a view query.</source>
          <target state="translated">ビュークエリを構成するパラメーターデコレータ。</target>
        </trans-unit>
        <trans-unit id="85e20474c1527f9306bff0cfaccf100267656cf2" translate="yes">
          <source>Parameter decorator to be used on constructor parameters, which marks the parameter as being an optional dependency. The DI framework provides null if the dependency is not found.</source>
          <target state="translated">コンストラクターパラメーターで使用されるパラメーターデコレーター。パラメーターをオプションの依存関係としてマークします。 依存関係が見つからない場合、DIフレームワークはnullを提供します。</target>
        </trans-unit>
        <trans-unit id="c2ddd04bc605e651c5613b54a00087d189942d04" translate="yes">
          <source>Parameter decorator to be used on constructor parameters, which tells the DI framework to start dependency resolution from the local injector.</source>
          <target state="translated">コンストラクターパラメーターで使用されるパラメーターデコレーター。ローカルインジェクターから依存関係の解決を開始するようにDIフレームワークに指示します。</target>
        </trans-unit>
        <trans-unit id="157fde4baebaef726eb1b06b5a661dc750ad4abd" translate="yes">
          <source>Parameter decorator to be used on constructor parameters, which tells the DI framework to start dependency resolution from the parent injector. Resolution works upward through the injector hierarchy, so the local injector is not checked for a provider.</source>
          <target state="translated">コンストラクターパラメーターで使用されるパラメーターデコレーター。これは、親インジェクターから依存関係の解決を開始するようにDIフレームワークに指示します。 解決策は、インジェクター階層を介して上方に機能するため、プロバイダーのローカルインジェクターはチェックされません。</target>
        </trans-unit>
        <trans-unit id="3934332701ff1e27ece937a553b42f8f0ad8f656" translate="yes">
          <source>Parameterizing a pipe</source>
          <target state="translated">パイプのパラメーター化</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="6ff1901d0a038d4eb5ed3f50bfd077678c801964" translate="yes">
          <source>Parameters that can be passed to the state when it is invoked. 0 or more key-value pairs.</source>
          <target state="translated">呼び出された状態に渡すことができるパラメーター。 0以上のキーと値のペア。</target>
        </trans-unit>
        <trans-unit id="dc124689c7040d627a2c6490eec999443990ba30" translate="yes">
          <source>Params</source>
          <target state="translated">Params</target>
        </trans-unit>
        <trans-unit id="c1993903d38c874b1312f7b6813a8ce87bc0bb8a" translate="yes">
          <source>Parent and children communicate via a service</source>
          <target state="translated">親と子がサービスを介して通信する</target>
        </trans-unit>
        <trans-unit id="4471f19ebf37cc8c31fe0b43635ff1a0ee9f70f7" translate="yes">
          <source>Parent calls an &lt;code&gt;@ViewChild()&lt;/code&gt;</source>
          <target state="translated">親が &lt;code&gt;@ViewChild()&lt;/code&gt; 呼び出します</target>
        </trans-unit>
        <trans-unit id="4d96bf3b564400b974a226b8c74842c6a32a7c8b" translate="yes">
          <source>Parent class interface</source>
          <target state="translated">親クラスインターフェイス</target>
        </trans-unit>
        <trans-unit id="836b9b7477bb5f75f34ca246e807cef5547ba120" translate="yes">
          <source>Parent interacts with child via &lt;code&gt;local variable&lt;/code&gt;</source>
          <target state="translated">親は &lt;code&gt;local variable&lt;/code&gt; 介して子と対話します</target>
        </trans-unit>
        <trans-unit id="3cef6a03c19c22a5eec3970bccbcc20fd40e1f72" translate="yes">
          <source>Parent listens for child event</source>
          <target state="translated">親は子イベントをリッスンします</target>
        </trans-unit>
        <trans-unit id="e17a3012940a44fa306224280da31476b2092626" translate="yes">
          <source>Parent of this injector.</source>
          <target state="translated">このインジェクターの親。</target>
        </trans-unit>
        <trans-unit id="f414d1ba1615873fb1a234e831c16c4292615b4f" translate="yes">
          <source>Parent-child animations</source>
          <target state="translated">親子アニメーション</target>
        </trans-unit>
        <trans-unit id="f9627107a88876f4aaf6d7e0b0c19984c3a631ae" translate="yes">
          <source>Parentheses</source>
          <target state="translated">Parentheses</target>
        </trans-unit>
        <trans-unit id="67149a9c481a8457cbf816d6fea3adcb470b442e" translate="yes">
          <source>Parentheses surround the secondary route.</source>
          <target state="translated">括弧は二次ルートを囲みます。</target>
        </trans-unit>
        <trans-unit id="7828527ba71c0f809df73eeb15889ee37f247d0e" translate="yes">
          <source>Parse a url into a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">URLを &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; に解析します</target>
        </trans-unit>
        <trans-unit id="a151757f9ee40aa876b0dbcc84e4a2aa94447743" translate="yes">
          <source>Parse it out.</source>
          <target state="translated">解析します。</target>
        </trans-unit>
        <trans-unit id="21b772698ca345c10d56cee00a81a1873d6be651" translate="yes">
          <source>Parses a string into a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">文字列を &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; に解析します</target>
        </trans-unit>
        <trans-unit id="9575281e0031a8b0350c2eeda96853602dd5d106" translate="yes">
          <source>Parses a url into a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">URLを &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; に解析します</target>
        </trans-unit>
        <trans-unit id="3f69f39a9aa00c24352272d42d08bac986bea81a" translate="yes">
          <source>Parses the URL string based on the base URL</source>
          <target state="translated">ベースURLに基​​づいてURL文字列を解析します</target>
        </trans-unit>
        <trans-unit id="8e18f1e2be4cc0236c8b76f29e1cd45d2b15350b" translate="yes">
          <source>Parses the provided URL and its relative URL.</source>
          <target state="translated">指定されたURLとその相対URLを解析します。</target>
        </trans-unit>
        <trans-unit id="2f4f13dd90b74e75be72e0b0a7d45ab267e86ade" translate="yes">
          <source>Parses the provided URL, and sets the current URL to the parsed result.</source>
          <target state="translated">指定されたURLを解析し、現在のURLを解析結果に設定します。</target>
        </trans-unit>
        <trans-unit id="746181cbabd0c36524106f51d0af82d41570a46e" translate="yes">
          <source>Partial file naming</source>
          <target state="translated">部分的なファイル命名</target>
        </trans-unit>
        <trans-unit id="9e9f00d71de9e4d80ccd990b60112c8313eff691" translate="yes">
          <source>Partial model updates</source>
          <target state="translated">部分的なモデルの更新</target>
        </trans-unit>
        <trans-unit id="f0cd834d38b36d38705bc70770c4cea0080eb4e4" translate="yes">
          <source>Partner and third party libraries also support the Angular CLI with add schematics. For example, &lt;code&gt;@ng-bootstrap/schematics&lt;/code&gt; adds &lt;a href=&quot;https://ng-bootstrap.github.io/&quot;&gt;ng-bootstrap&lt;/a&gt; to an app, and &lt;code&gt;@clr/angular&lt;/code&gt; installs and sets up &lt;a href=&quot;https://vmware.github.io/clarity/documentation/v1.0/get-started&quot;&gt;Clarity from VMWare&lt;/a&gt;.</source>
          <target state="translated">パートナーおよびサードパーティのライブラリも、回路図を追加してAngular CLIをサポートしています。 たとえば、 &lt;code&gt;@ng-bootstrap/schematics&lt;/code&gt; は&lt;a href=&quot;https://ng-bootstrap.github.io/&quot;&gt;ng-bootstrap&lt;/a&gt;をアプリに追加し、 &lt;code&gt;@clr/angular&lt;/code&gt; は&lt;a href=&quot;https://vmware.github.io/clarity/documentation/v1.0/get-started&quot;&gt;VMWareからClarityを&lt;/a&gt;インストールして設定します。</target>
        </trans-unit>
        <trans-unit id="3650cc18c9eac296b13d1cef29399885fc68316d" translate="yes">
          <source>Pass data from parent to child with input binding</source>
          <target state="translated">入力バインディングを使用して親から子にデータを渡す</target>
        </trans-unit>
        <trans-unit id="df2e98f78fbb7324e2bec4b099d5f2f17892f388" translate="yes">
          <source>Pass information along in route parameters and subscribe to them in the component.</source>
          <target state="translated">ルートパラメータで情報を渡し、コンポーネントでサブスクライブします。</target>
        </trans-unit>
        <trans-unit id="fe77eeb6f42e114596e23ea10653268f27e5369a" translate="yes">
          <source>Pass required and optional information in route parameters.</source>
          <target state="translated">ルートパラメータで必須およびオプションの情報を渡します。</target>
        </trans-unit>
        <trans-unit id="eaad3660dba745abb2af17f84c5e548a0b8fa5cb" translate="yes">
          <source>Pass the current product as input to the component using property binding.</source>
          <target state="translated">プロパティバインディングを使用して、現在の製品をコンポーネントへの入力として渡します。</target>
        </trans-unit>
        <trans-unit id="07f766c03ee41526736042244dadd75506ed0e75" translate="yes">
          <source>Pass this schematic to the &quot;run&quot; command to create a service worker</source>
          <target state="translated">この回路図を「実行」コマンドに渡して、サービスワーカーを作成します。</target>
        </trans-unit>
        <trans-unit id="4467a947dcb3a498f2fc37f1fabd02c54aa219ba" translate="yes">
          <source>Pass this schematic to the &quot;run&quot; command to set up server-side rendering for an app.</source>
          <target state="translated">この回路図を「実行」コマンドに渡して、アプリのサーバー側レンダリングを設定します。</target>
        </trans-unit>
        <trans-unit id="2b751fc327a7dcfe9593f5a21354e60d3d30f7ec" translate="yes">
          <source>Pass values into the directive with an &lt;code&gt;@Input&lt;/code&gt; data binding</source>
          <target state="translated">&lt;code&gt;@Input&lt;/code&gt; データバインディングを使用してディレクティブに値を渡す</target>
        </trans-unit>
        <trans-unit id="368ddeb092dc46040eca0b1a6cfa21412c4b8367" translate="yes">
          <source>Passing &lt;code&gt;$event&lt;/code&gt; is a dubious practice</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 渡すことは疑わしい習慣です</target>
        </trans-unit>
        <trans-unit id="62ef1a584ee91b9705f1be01a036cc0c411dcab9" translate="yes">
          <source>Passing a new search term directly to the &lt;code&gt;searchHeroes()&lt;/code&gt; after every user keystroke would create an excessive amount of HTTP requests, taxing server resources and burning through data plans.</source>
          <target state="translated">ユーザーがキーを &lt;code&gt;searchHeroes()&lt;/code&gt; 新しい検索語をsearchHeroes（）に直接渡すと、過剰な量のHTTP要求が作成され、サーバーリソースに負担がかかり 、データプランが焼き尽くされます。</target>
        </trans-unit>
        <trans-unit id="e2bbd329b24cf69e01673970ea66bf2ff35c9952" translate="yes">
          <source>Passing an array of components to &lt;code&gt;AdBannerComponent&lt;/code&gt; allows for a dynamic list of ads without static elements in the template.</source>
          <target state="translated">コンポーネントの配列を &lt;code&gt;AdBannerComponent&lt;/code&gt; に渡すと、テンプレートに静的な要素がなくても広告の動的なリストを作成できます。</target>
        </trans-unit>
        <trans-unit id="bc42a93af5a6fbbd2ecca30823e18bc2dbb8ae90" translate="yes">
          <source>Passing in an object</source>
          <target state="translated">オブジェクトを渡す</target>
        </trans-unit>
        <trans-unit id="b7d6a4aaf033efc2986f8101aa454963315188d2" translate="yes">
          <source>Patch the value for a form group</source>
          <target state="translated">フォームグループの値にパッチを適用する</target>
        </trans-unit>
        <trans-unit id="e1ebe08030715ff940b0006753144b1569e485c7" translate="yes">
          <source>Patch the values for controls in a form array</source>
          <target state="translated">フォーム配列内のコントロールの値にパッチを適用します</target>
        </trans-unit>
        <trans-unit id="22baf0cbd4ac01a3a661f6b4a84fa5f4139cf6e2" translate="yes">
          <source>Patches the value of a control.</source>
          <target state="translated">コントロールの値にパッチを適用します。</target>
        </trans-unit>
        <trans-unit id="6572cb7b9b9f6c29e37ee8eb322fed0d80cde71b" translate="yes">
          <source>Patches the value of the &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;. It accepts an array that matches the structure of the control, and does its best to match the values to the correct controls in the group.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; の値にパッチを適用します。 コントロールの構造に一致する配列を受け入れ、値をグループ内の正しいコントロールに一致させるために最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="a944295e5bcdd2a5628b77126984be5da56bb988" translate="yes">
          <source>Patches the value of the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. It accepts an object with control names as keys, and does its best to match the values to the correct controls in the group.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; の値にパッチを適用します。 キーとしてコントロール名を持つオブジェクトを受け入れ、値をグループ内の正しいコントロールに一致させるために最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="93876a08e24d20da2d2cb67a1189d78e885ee57d" translate="yes">
          <source>Patches the value of the control. Abstract method (implemented in sub-classes).</source>
          <target state="translated">コントロールの値をパッチします。 抽象メソッド（サブクラスで実装）。</target>
        </trans-unit>
        <trans-unit id="cc5d607fa4a4609de63f99f862138c6e03b4ebd4" translate="yes">
          <source>Patching the model value</source>
          <target state="translated">モデル値のパッチ</target>
        </trans-unit>
        <trans-unit id="3ed43a3a0f94a6fcdbd58ae09a894cc13b04e3f4" translate="yes">
          <source>Path to ngsw-config.json.</source>
          <target state="translated">ngsw-config.jsonへのパス。</target>
        </trans-unit>
        <trans-unit id="25c4cfd28cef041116c7b7bc8ca15e425574289e" translate="yes">
          <source>Path where output will be placed.</source>
          <target state="translated">出力が配置されるパス。</target>
        </trans-unit>
        <trans-unit id="3e73f0447cc860168aee757b0d6aef190f943545" translate="yes">
          <source>PathLocationStrategy</source>
          <target state="translated">PathLocationStrategy</target>
        </trans-unit>
        <trans-unit id="a6403199acd619a42efcc7f425ecb2021ce7030b" translate="yes">
          <source>Paths should always begin with forward slash (/). This method adds the forward slash if it is missing.</source>
          <target state="translated">パスは常にスラッシュ（/）で始まる必要があります。 このメソッドは、スラッシュがない場合に追加します。</target>
        </trans-unit>
        <trans-unit id="0f5281baa789f97c9906c0a66900d4d98d83c86c" translate="yes">
          <source>PatternValidator</source>
          <target state="translated">PatternValidator</target>
        </trans-unit>
        <trans-unit id="c4f9246ecd5466bdbf698a993ebf846997223d97" translate="yes">
          <source>Pauses the animation.</source>
          <target state="translated">アニメーションを一時停止します。</target>
        </trans-unit>
        <trans-unit id="324f2140ef6b85ef93f8bf84e950a2247c40e8ce" translate="yes">
          <source>Pay attention to two key points:</source>
          <target state="translated">2つの重要な点に注意してください。</target>
        </trans-unit>
        <trans-unit id="6408f1628187dc531274b7c13aa99eaeb03fa803" translate="yes">
          <source>Peek-a-boo</source>
          <target state="translated">Peek-a-boo</target>
        </trans-unit>
        <trans-unit id="13f06dc9c51750db799af134ce604fc3cf1692f2" translate="yes">
          <source>Peek-a-boo: all hooks</source>
          <target state="translated">ピーカブー：すべてのフック</target>
        </trans-unit>
        <trans-unit id="f943c63d4bfbd73cac05e58aae5f5ff04d7953c2" translate="yes">
          <source>Per user tracking</source>
          <target state="translated">ユーザーごとの追跡</target>
        </trans-unit>
        <trans-unit id="99cc4a62a98bf7d2d79141044c8c69fe6edc8108" translate="yes">
          <source>PercentPipe</source>
          <target state="translated">PercentPipe</target>
        </trans-unit>
        <trans-unit id="88cb2244486eb9636a4247dc700316395faa8a97" translate="yes">
          <source>Percentage: &lt;code&gt;'100%'&lt;/code&gt;</source>
          <target state="translated">割合： &lt;code&gt;'100%'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0535a7ecad192b6b512e9d676fda57d50cf93916" translate="yes">
          <source>Perform a basic update to the current stable release of the core framework and CLI by running the following command.</source>
          <target state="translated">次のコマンドを実行して、コアフレームワークとCLIの現在の安定リリースの基本的な更新を実行します。</target>
        </trans-unit>
        <trans-unit id="7b2260710aee7a5a916a9a3a4ee71922a6ec05aa" translate="yes">
          <source>Perform the &lt;em&gt;clone-to-launch&lt;/em&gt; steps with these terminal commands.</source>
          <target state="translated">これらの端末コマンドを使用し&lt;em&gt;て&lt;/em&gt; 、 &lt;em&gt;クローンから起動までの&lt;/em&gt;手順を実行します。</target>
        </trans-unit>
        <trans-unit id="7b1a76c1f8658975e4cacb3ec1edbbdfdbbd3a11" translate="yes">
          <source>Performs HTTP requests. This service is available as an injectable class, with methods to perform HTTP requests. Each request method has multiple signatures, and the return type varies based on the signature that is called (mainly the values of &lt;code&gt;observe&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http/httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">HTTP要求を実行します。 このサービスは、HTTP要求を実行するメソッドを備えた注入可能なクラスとして利用できます。 各リクエストメソッドには複数の署名があり、返される型は呼び出される署名（主に &lt;code&gt;observe&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http/httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; の値）に基づいて異なります。</target>
        </trans-unit>
        <trans-unit id="8cf74d87b6b851d3e13b233d78cf31bba72f4aa5" translate="yes">
          <source>Performs HTTP requests. This service is available as an injectable class, with methods to perform HTTP requests. Each request method has multiple signatures, and the return type varies based on the signature that is called (mainly the values of &lt;code&gt;observe&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">HTTP要求を実行します。 このサービスは、HTTP要求を実行するメソッドを備えた注入可能なクラスとして利用できます。 各リクエストメソッドには複数の署名があり、返される型は呼び出される署名（主に &lt;code&gt;observe&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; の値）に基づいて異なります。</target>
        </trans-unit>
        <trans-unit id="5e0e579f20aa9017b5a5bf405d088b06d077d8f7" translate="yes">
          <source>Performs a filter match for matches.</source>
          <target state="translated">一致のフィルター一致を実行します。</target>
        </trans-unit>
        <trans-unit id="fbd3a6414f86c350ce21057bcf85969bb71fd694" translate="yes">
          <source>Performs case matching. For internal use only.</source>
          <target state="translated">大文字と小文字のマッチングを実行します。 内部使用のみ。</target>
        </trans-unit>
        <trans-unit id="f0fa815ee0f8e7502cd323f53be4dda642caf766" translate="yes">
          <source>Perhaps the user is not authorized to navigate to the target component.</source>
          <target state="translated">おそらく、ユーザーはターゲットコンポーネントに移動する権限がありません。</target>
        </trans-unit>
        <trans-unit id="e625cc94f99a276ea88e61fb38b01e628e4b07df" translate="yes">
          <source>Perhaps you declared &quot;x&quot; in an application sub-module but forgot to export it. The &quot;x&quot; class isn't visible to other modules until you add it to the &lt;code&gt;exports&lt;/code&gt; list.</source>
          <target state="translated">おそらく、アプリケーションのサブモジュールで「x」を宣言したが、それをエクスポートするのを忘れた可能性があります。 「x」クラスは、 &lt;code&gt;exports&lt;/code&gt; リストに追加するまで他のモジュールには表示されません。</target>
        </trans-unit>
        <trans-unit id="170a28a9db6d27d7212fc6dc249434a57517e7bc" translate="yes">
          <source>Period</source>
          <target state="translated">Period</target>
        </trans-unit>
        <trans-unit id="e4d27eecd313d8ce6f2608a84068369790772864" translate="yes">
          <source>Period standalone*</source>
          <target state="translated">期間スタンドアロン*</target>
        </trans-unit>
        <trans-unit id="c8753a38d0545756f3a8227f0ed2c2c7057a2d66" translate="yes">
          <source>Period*</source>
          <target state="translated">Period*</target>
        </trans-unit>
        <trans-unit id="ccba310cee50783e1688d63df45ac1024b3e01aa" translate="yes">
          <source>Permitting direct access to the DOM can make your application more vulnerable to XSS attacks. Carefully review any use of &lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; in your code. For more detail, see the &lt;a href=&quot;http://g.co/ng/security&quot;&gt;Security Guide&lt;/a&gt;.</source>
          <target state="translated">DOMへの直接アクセスを許可すると、アプリケーションがXSS攻撃に対してより脆弱になる可能性があります。 コード内の &lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; の使用を慎重に確認してください。 詳細については、 &lt;a href=&quot;http://g.co/ng/security&quot;&gt;セキュリティガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="57ebb57a4f9074cb590c1b05b3cb709fdf0c51f5" translate="yes">
          <source>Phase 1 is &lt;em&gt;code analysis&lt;/em&gt;. In this phase, the TypeScript compiler and &lt;em&gt;AOT collector&lt;/em&gt; create a representation of the source. The collector does not attempt to interpret the metadata it collects. It represents the metadata as best it can and records errors when it detects a metadata syntax violation.</source>
          <target state="translated">フェーズ1は&lt;em&gt;コード分​​析&lt;/em&gt;です。 このフェーズでは、TypeScriptコンパイラと&lt;em&gt;AOTコレクター&lt;/em&gt;がソースの表現を作成します。 コレクターは、収集したメタデータの解釈を試みません。 可能な限りメタデータを表し、メタデータ構文違反を検出するとエラーを記録します。</target>
        </trans-unit>
        <trans-unit id="ea959a9545e7ce4a4e4dc0c349397d6d0488c3af" translate="yes">
          <source>Phase 1: Code analysis</source>
          <target state="translated">フェーズ1：コード分析</target>
        </trans-unit>
        <trans-unit id="84c11744869d4f423f9ea1e9f82a1dc1b2a0f234" translate="yes">
          <source>Phase 2 is &lt;em&gt;code generation&lt;/em&gt;. In this phase, the compiler's &lt;code&gt;StaticReflector&lt;/code&gt; interprets the metadata collected in phase 1, performs additional validation of the metadata, and throws an error if it detects a metadata restriction violation.</source>
          <target state="translated">フェーズ2は&lt;em&gt;コード生成&lt;/em&gt;です。 このフェーズでは、コンパイラの &lt;code&gt;StaticReflector&lt;/code&gt; はフェーズ1で収集されたメタデータを解釈し、メタデータの追加検証を実行し、メタデータ制限違反を検出するとエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="85d4cb139676a6815bfd11962f2a145d28733afc" translate="yes">
          <source>Phase 2: code generation</source>
          <target state="translated">フェーズ2：コード生成</target>
        </trans-unit>
        <trans-unit id="1a6ada06034d6ecf65dcdf9ce5f10b8bbd0c42a6" translate="yes">
          <source>Phase 3 is &lt;em&gt;template type checking&lt;/em&gt;. In this optional phase, the Angular &lt;em&gt;template compiler&lt;/em&gt; uses the TypeScript compiler to validate the binding expressions in templates. You can enable this phase explicitly by setting the &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; configuration option; see &lt;a href=&quot;angular-compiler-options&quot;&gt;Angular compiler options&lt;/a&gt;.</source>
          <target state="translated">フェーズ3は&lt;em&gt;テンプレートタイプチェック&lt;/em&gt;です。 このオプションフェーズでは、Angular &lt;em&gt;テンプレートコンパイラ&lt;/em&gt;はTypeScriptコンパイラを使用して、テンプレート内のバインディング式を検証します。 &lt;code&gt;fullTemplateTypeCheck&lt;/code&gt; 構成オプションを設定することにより、このフェーズを明示的に有効にできます。 &lt;a href=&quot;angular-compiler-options&quot;&gt;Angularコンパイラオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8b248fc2361f1f33d985ac6fd0375650ea1e867b" translate="yes">
          <source>Phase 3: Template type checking</source>
          <target state="translated">フェーズ3：テンプレートタイプのチェック</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
