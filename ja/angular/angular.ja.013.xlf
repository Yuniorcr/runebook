<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="42da70226282f1977da6d7ab28f8de7521500fdd" translate="yes">
          <source>The following example initializes the control with a form state object. The &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;disabled&lt;/code&gt; keys are required in this case.</source>
          <target state="translated">次の例では、フォーム状態オブジェクトを使用してコントロールを初期化します。 この &lt;code&gt;value&lt;/code&gt; 、 値と &lt;code&gt;disabled&lt;/code&gt; キーが必要です。</target>
        </trans-unit>
        <trans-unit id="a2bb4e5bcae5441af519dafa4dbfbb031b95886b" translate="yes">
          <source>The following example initializes the control with a sync validator.</source>
          <target state="translated">次の例では、同期検証でコントロールを初期化します。</target>
        </trans-unit>
        <trans-unit id="3b75e86861a97b045bc93ed007c41a8143776dfe" translate="yes">
          <source>The following example of non-tree-shakable providers in Angular configures a service provider for the injector of an NgModule.</source>
          <target state="translated">Angularのツリーシェーカブルではないプロバイダーの次の例は、NgModuleのインジェクターのサービスプロバイダーを構成します。</target>
        </trans-unit>
        <trans-unit id="ec9e15e6d86e0c21d5745d7731be95a7ec60e570" translate="yes">
          <source>The following example of the long form is from the JSON schema for the schematic that the CLI uses to &lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;generate applications&lt;/a&gt;. It defines the prompt that allows users to choose which style preprocessor they want to use for the application being created. By using the long form, the schematic can provide more explicit formatting of the menu choices.</source>
          <target state="translated">次の長い形式の例は、CLIが&lt;a href=&quot;https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56&quot;&gt;アプリケーション&lt;/a&gt;を生成するために使用する回路図のJSONスキーマからのものです 。 ユーザーが作成中のアプリケーションに使用するスタイルプリプロセッサを選択できるようにするプロンプトを定義します。 長い形式を使用することにより、回路図はメニュー選択のより明確なフォーマットを提供できます。</target>
        </trans-unit>
        <trans-unit id="4f37dc68477f1bcc7af7bb9d791a86fea3c7c903" translate="yes">
          <source>The following example puts &lt;code&gt;MinimalLogger&lt;/code&gt; to use in a simplified version of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;MinimalLogger&lt;/code&gt; をHeroOfTheMonthComponentの簡易バージョンで使用します。</target>
        </trans-unit>
        <trans-unit id="6e9fea711c729f49958474fdb5f92f9b366656d5" translate="yes">
          <source>The following example queries for inner elements and animates them individually using &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">次の例では、内部要素を照会し、 &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; を使用して個別にアニメーション化します。</target>
        </trans-unit>
        <trans-unit id="f694530f5219eedcd4de38cb0d70bea2e6819f53" translate="yes">
          <source>The following example re-implements the previous test with &lt;code&gt;DebugElement.query()&lt;/code&gt; and the browser's &lt;code&gt;By.css&lt;/code&gt; method.</source>
          <target state="translated">次の例は、 &lt;code&gt;DebugElement.query()&lt;/code&gt; とブラウザーの &lt;code&gt;By.css&lt;/code&gt; メソッドを使用して、以前のテストを再実装します。</target>
        </trans-unit>
        <trans-unit id="3382236c8e2f90c0af65e6c8d53fd60d3630e149" translate="yes">
          <source>The following example registers a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; with first name and last name controls, and listens for the &lt;em&gt;ngSubmit&lt;/em&gt; event when the button is clicked.</source>
          <target state="translated">次の例では、 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; を名と姓のコントロールで登録し、ボタンがクリックされたときに&lt;em&gt;ngSubmit&lt;/em&gt;イベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="7d806233c265cf7577c4168fb2ec4e2bbcf34c20" translate="yes">
          <source>The following example registers a custom validator directive. Adding the validator to the existing collection of validators requires the &lt;code&gt;multi: true&lt;/code&gt; option.</source>
          <target state="translated">次の例では、カスタム検証ディレクティブを登録します。 バリデータを既存のバリデータのコレクションに追加するには、 &lt;code&gt;multi: true&lt;/code&gt; オプションが必要です。</target>
        </trans-unit>
        <trans-unit id="01ae3fed79d829eaaae19c04e6f33068fa10cc52" translate="yes">
          <source>The following example registers a nested &lt;em&gt;name&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; within an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;, and provides methods to retrieve the nested &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and individual controls.</source>
          <target state="translated">次の例は、既存の &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 内にネストされた&lt;em&gt;名前&lt;/em&gt; FormGroupを登録し、ネストされた &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; および個々のコントロールを取得するメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="322a6b3ef3f219a7bbd14499563b3ea72dcbac17" translate="yes">
          <source>The following example returns a control with an initial value in a disabled state.</source>
          <target state="translated">次の例では、無効な状態の初期値を持つコントロールを返します。</target>
        </trans-unit>
        <trans-unit id="bd9a13546ebb781b29fe8fced2d785a6e6d63b38" translate="yes">
          <source>The following example rewrites the method with types:</source>
          <target state="translated">次の例では、メソッドを型で書き換えます。</target>
        </trans-unit>
        <trans-unit id="c6ec9dd1508ebf2608cf1ab6c08758e8aba93be1" translate="yes">
          <source>The following example sets the &lt;code&gt;OnPush&lt;/code&gt; change-detection strategy for a component (&lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckOnce&lt;/a&gt;&lt;/code&gt;, rather than the default &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt;), then forces a second check after an interval. See &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;live demo&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;OnPush&lt;/code&gt; 変更検出戦略（デフォルトの &lt;code&gt;&lt;a href=&quot;changedetectorref&quot;&gt;CheckAlways&lt;/a&gt;&lt;/code&gt; ではなくCheckOnce ）を設定し、一定間隔の後に2番目のチェックを強制します。 &lt;a href=&quot;http://plnkr.co/edit/GC512b?p=preview&quot;&gt;ライブデモを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="2b7471662574d24b0b47321a72e97d944e3b5e0c" translate="yes">
          <source>The following example shows &lt;code&gt;NgFor&lt;/code&gt; applied to a simple &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. (Don't forget the asterisk (&lt;code&gt;*&lt;/code&gt;) in front of &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">次の例は、単純な &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; に適用される &lt;code&gt;NgFor&lt;/code&gt; を示しています。 （ &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; の前にあるアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）を忘れないでください。）</target>
        </trans-unit>
        <trans-unit id="c562dfbb69c1a98a82e37e0a6c0f37cf9ac5b1f6" translate="yes">
          <source>The following example shows an event binding that implements a click handler:</source>
          <target state="translated">次の例は、クリックハンドラーを実装するイベントバインディングを示しています。</target>
        </trans-unit>
        <trans-unit id="38acb08759fa7468886194d08506e9a0ce5417d4" translate="yes">
          <source>The following example shows controls using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; within a form:</source>
          <target state="translated">次の例は、フォーム内で &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用するコントロールを示しています。</target>
        </trans-unit>
        <trans-unit id="e1e7f20571895e868a1c8bbfb2febc742c23aa30" translate="yes">
          <source>The following example shows how a service class is properly marked so that a supporting service can be injected upon creation.</source>
          <target state="translated">次の例は、作成時にサポートサービスを注入できるように、サービスクラスが適切にマークされる方法を示しています。</target>
        </trans-unit>
        <trans-unit id="be72fc12fe5cf4dad5083e92e226c1dd40573ed3" translate="yes">
          <source>The following example shows how cases can be nested:</source>
          <target state="translated">次の例は、ケースをネストする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2b046373177ebf89ea2deca1d2f5103060b13b2b" translate="yes">
          <source>The following example shows how queries are defined and when their results are available in lifecycle hooks:</source>
          <target state="translated">次の例は、クエリの定義方法と、その結果がライフサイクルフックで利用可能な場合を示しています。</target>
        </trans-unit>
        <trans-unit id="c077632398f31fdc18f53e137b5295be8371c9e1" translate="yes">
          <source>The following example shows how the router can populate the &lt;code&gt;entryComponents&lt;/code&gt; field of an NgModule based on a router configuration that refers to components.</source>
          <target state="translated">次の例は、コンポーネントを参照するルーター構成に基づいて、NgModuleの &lt;code&gt;entryComponents&lt;/code&gt; フィールドにルーターがどのように入力できるかを示しています。</target>
        </trans-unit>
        <trans-unit id="66e1fdebf35092f3863e2ae7d931c94e7887b327" translate="yes">
          <source>The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例は、ngModelバインディングに接続された入力にチェックボックスに必要なバリデーターを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="368867db6cc44008c62a0af9b4d9460201a18a2f" translate="yes">
          <source>The following example shows how to add a maximum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例は、ngModelバインディングに接続された入力に最大長バリデーターを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d7fbccbb32b0f48876d290f593a4fb03cdd589f5" translate="yes">
          <source>The following example shows how to add a minimum length validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例は、ngModelバインディングに接続された入力に最小長バリデーターを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="4f808c8af5c2d51dc9eb174377afd8b05d67af5d" translate="yes">
          <source>The following example shows how to add a pattern validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例は、ngModelバインディングに接続された入力にパターンバリデーターを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="fff28e8f05131a85b2053d418fcdb7c05fec28f8" translate="yes">
          <source>The following example shows how to add an email validator to an input attached to an ngModel binding.</source>
          <target state="translated">次の例は、ngModelバインディングに接続された入力に電子メールバリデーターを追加する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1c6423f6e2b9133747ffa3e301b8f9cca3c1a40b" translate="yes">
          <source>The following example shows how to build a dynamic ad banner.</source>
          <target state="translated">次の例は、動的な広告バナーを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ee45e1a32fc4fd748ecba48456000a2fcf666eb2" translate="yes">
          <source>The following example shows how to capture the form values from the &quot;ngSubmit&quot; event.</source>
          <target state="translated">次の例は、「ngSubmit」イベントからフォーム値をキャプチャする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="6daf8cd22d12b0f67faa1ae29e1763c675f0abe5" translate="yes">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;iterablediffer&quot;&gt;&lt;code&gt;IterableDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">次の例は、このコンポーネントとその子のインジェクターにのみ適用される工場の既存のリストを拡張する方法を示しています。 この手順は、新しい&lt;a href=&quot;iterablediffer&quot;&gt; &lt;code&gt;IterableDiffer&lt;/code&gt; を&lt;/a&gt;利用可能にするために必要なすべてです。</target>
        </trans-unit>
        <trans-unit id="83d90a3054ebd2d5ef9a349704d34a8e5393cb26" translate="yes">
          <source>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new &lt;a href=&quot;keyvaluediffer&quot;&gt;&lt;code&gt;KeyValueDiffer&lt;/code&gt;&lt;/a&gt; available.</source>
          <target state="translated">次の例は、このコンポーネントとその子のインジェクターにのみ適用される工場の既存のリストを拡張する方法を示しています。 この手順は、新しい&lt;a href=&quot;keyvaluediffer&quot;&gt; &lt;code&gt;KeyValueDiffer&lt;/code&gt; を&lt;/a&gt;使用可能にするために必要なすべてです。</target>
        </trans-unit>
        <trans-unit id="6b4c2655698aa0d2203e75b1289d0487cadd44e2" translate="yes">
          <source>The following example shows how to find and focus the main content header in the DOM after navigation.</source>
          <target state="translated">次の例は、ナビゲーション後にDOMのメインコンテンツヘッダーを見つけてフォーカスする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="51b27d39b057cf93861bc4cc7466e579ed4f5751" translate="yes">
          <source>The following example shows how to make a simple progress bar accessible by using host binding to control accessibility-related attributes.</source>
          <target state="translated">次の例は、ホストバインドを使用してアクセシビリティ関連の属性を制御することにより、シンプルなプログレスバーにアクセスできるようにする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="7a085757bc3f13deb2551df0f93cb8afa2b12e6b" translate="yes">
          <source>The following example shows how to register multiple form controls within a form group and set their value.</source>
          <target state="translated">次の例は、フォームグループ内に複数のフォームコントロールを登録し、それらの値を設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a4a8014d1e2c1017305a9a1388855d8f4840149a" translate="yes">
          <source>The following example shows how to set up an &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; in a child component that pushes data you enter in an HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to an array in the parent component.</source>
          <target state="translated">次の例は、HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; に入力したデータを親コンポーネントの配列にプッシュする子コンポーネントに &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; を設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="59c573eec5946e813c45e18762fdeb1633ef0ed4" translate="yes">
          <source>The following example shows how to use a checkbox with a reactive form.</source>
          <target state="translated">次の例は、リアクティブフォームでチェックボックスを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cc2f6dbf31261ec056919eb80f43040dc8866c26" translate="yes">
          <source>The following example shows how to use a number input with a reactive form.</source>
          <target state="translated">次の例は、リアクティブフォームで数値入力を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cbeaaa1764396b191a1fa427696ca459afa3e019" translate="yes">
          <source>The following example shows how to use a range input with a reactive form.</source>
          <target state="translated">次の例は、リアクティブフォームで範囲入力を使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2958492ec328342f9b159f183a274c8962939e29" translate="yes">
          <source>The following example shows how to use an input element that activates the default value accessor (in this case, a text field).</source>
          <target state="translated">次の例は、デフォルト値のアクセサー（この場合はテキストフィールド）をアクティブにするinput要素の使用方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1373b177c05a62a912a3ee24e9df3148944e063e" translate="yes">
          <source>The following example shows how to use more than one case to display the same view:</source>
          <target state="translated">次の例は、複数のケースを使用して同じビューを表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="57f6f5878666eda756817f7b7efb36774821b332" translate="yes">
          <source>The following example shows how to use this feature:</source>
          <target state="translated">次の例は、この機能の使用方法を示しています。</target>
        </trans-unit>
        <trans-unit id="6afcdea92b2f9be1919de79ba7cbfe3d0ac7d219" translate="yes">
          <source>The following example shows how to use this token to configure the root app injector with a base href value, so that the DI framework can supply the dependency anywhere in the app.</source>
          <target state="translated">次の例は、このトークンを使用してルートアプリインジェクターをベースhref値で構成し、DIフレームワークがアプリ内の任意の場所に依存関係を提供できるようにする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5d099819839fc1d380d48e3ae14ffad753838d5c" translate="yes">
          <source>The following example shows that &lt;code&gt;AppComponent&lt;/code&gt; declares its dependence on &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContext&lt;/code&gt;.</source>
          <target state="translated">次の例は、 &lt;code&gt;AppComponent&lt;/code&gt; が &lt;code&gt;LoggerService&lt;/code&gt; と &lt;code&gt;UserContext&lt;/code&gt; への依存を宣言することを示しています。</target>
        </trans-unit>
        <trans-unit id="9eab0e12b63f05899de75dd09db3f2df2fc6187d" translate="yes">
          <source>The following example shows the result of transforming various strings into title case.</source>
          <target state="translated">次の例は、さまざまな文字列をタイトルケースに変換した結果を示しています。</target>
        </trans-unit>
        <trans-unit id="997f1dc43f8aed6fbbf9fd368a2a5dd9ea934b79" translate="yes">
          <source>The following example shows the shorthand syntax with some options, contained in an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">次の例は、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素に含まれるいくつかのオプションを含む簡略構文を示しています。</target>
        </trans-unit>
        <trans-unit id="a09b23068c66780f14d250956e96be5e43143ec4" translate="yes">
          <source>The following example shows the tree-shakable equivalent to the &lt;code&gt;ServiceModule&lt;/code&gt; example above.</source>
          <target state="translated">次の例は、上記の &lt;code&gt;ServiceModule&lt;/code&gt; の例と同等のツリーシェーカブルを示しています。</target>
        </trans-unit>
        <trans-unit id="1d184cef72e57c09334c7d9ea86b425dc3afa8c4" translate="yes">
          <source>The following example shows two event emitters that emit on an interval. One emits an output every second, while the other emits every five seconds.</source>
          <target state="translated">次の例は、間隔で放出する2つのイベントエミッタを示しています。 1つは1秒ごとに出力を放出し、もう1つは5秒ごとに放出します。</target>
        </trans-unit>
        <trans-unit id="1dffb0edfdea8768fda5ebffcf29790b5b84c38b" translate="yes">
          <source>The following example shows you an alternate way to set the name attribute. The name attribute is used within a custom form component, and the name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; property serves a different purpose.</source>
          <target state="translated">次の例は、name属性を設定する別の方法を示しています。 name属性はカスタムフォームコンポーネント内で使用され、name &lt;code&gt;@&lt;a href=&quot;../core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; プロパティは別の目的を果たします。</target>
        </trans-unit>
        <trans-unit id="988b27a653275f3bff65878a5b895d72cd36c77e" translate="yes">
          <source>The following example shows you how to change the &quot;updateOn&quot; option from its default using ngFormOptions.</source>
          <target state="translated">次の例は、ngFormOptionsを使用して「updateOn」オプションをデフォルトから変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1e3b26c117fe86b059fd6e1a2232c67d9b63c33b" translate="yes">
          <source>The following example shows you how to combine controls together in a sub-group of the form.</source>
          <target state="translated">次の例は、フォームのサブグループでコントロールを組み合わせる方法を示しています。</target>
        </trans-unit>
        <trans-unit id="7d204404893de6271980acee275f77cae148739b" translate="yes">
          <source>The following example shows you how to display the current value using interpolation in the template.</source>
          <target state="translated">次の例は、テンプレートで補間を使用して現在の値を表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="9dc1f820ec5c4e31a3ed11dfe150c2b8b75987f2" translate="yes">
          <source>The following example shows you how to use a standalone ngModel control within a form. This controls the display of the form, but doesn't contain form data.</source>
          <target state="translated">次の例は、フォーム内でスタンドアロンngModelコントロールを使用する方法を示しています。 これはフォームの表示を制御しますが、フォームデータは含まれません。</target>
        </trans-unit>
        <trans-unit id="0a96a492f032a547b6f9125b434d8ea060fd4733" translate="yes">
          <source>The following example stores the provided function as an internal method.</source>
          <target state="translated">次の例では、提供された関数を内部メソッドとして保存します。</target>
        </trans-unit>
        <trans-unit id="dff5d128062231c449f19fedce3237c98b922507" translate="yes">
          <source>The following example targets all &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements, from the host element down through this component to all of its child elements in the DOM.</source>
          <target state="translated">次の例では、ホスト要素からこのコンポーネントを介してDOM内のすべての子要素まで、すべての &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; 要素を対象としています。</target>
        </trans-unit>
        <trans-unit id="fa3b01423ddb68412ec695cd4482c822e7a7e696" translate="yes">
          <source>The following example tries to set the component's &lt;code&gt;template&lt;/code&gt; property to the value of the exported &lt;code&gt;someTemplate&lt;/code&gt; variable which is declared but &lt;em&gt;unassigned&lt;/em&gt;.</source>
          <target state="translated">次の例では、コンポーネントの &lt;code&gt;template&lt;/code&gt; プロパティを、宣言されているが&lt;em&gt;未割り当ての&lt;/em&gt;エクスポートされた &lt;code&gt;someTemplate&lt;/code&gt; 変数の値に設定しようとします。</target>
        </trans-unit>
        <trans-unit id="251fedbc0f6af371679f4fa156ce7e3909346a2e" translate="yes">
          <source>The following example uses a template reference variable to implement a keystroke loopback in a simple template.</source>
          <target state="translated">次の例では、テンプレート参照変数を使用して、単純なテンプレートにキーストロークループバックを実装します。</target>
        </trans-unit>
        <trans-unit id="44de5ab363b46660288190c053d7a6213ed61eaa" translate="yes">
          <source>The following example uses auto-styling to allow a component to animate from a height of 0 up to the height of the parent element:</source>
          <target state="translated">次の例では、自動スタイリングを使用して、コンポーネントが高さ0から親要素の高さまでアニメーション化できるようにします。</target>
        </trans-unit>
        <trans-unit id="069cb9c50eee1cb12d158d3323cefcaab458ccbe" translate="yes">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access individual controls within the group using dot syntax.</source>
          <target state="translated">次の例では、 &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt;メソッドを使用して、ドット構文を使用してグループ内の個々のコントロールにアクセスします。</target>
        </trans-unit>
        <trans-unit id="d4b4122ac3506b5e300f9fe1f7412e28b945f0eb" translate="yes">
          <source>The following example uses the &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt; method to access the associated &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">次の例では、 &lt;a href=&quot;abstractcontrol#get&quot;&gt;get&lt;/a&gt;メソッドを使用して、関連する &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; にアクセスします</target>
        </trans-unit>
        <trans-unit id="0ec44a3326cea8016f405a38962d167a49282ce9" translate="yes">
          <source>The following example uses the &lt;code&gt;ignore&lt;/code&gt; field to exclude certain files in the assets folder from being copied into the build:</source>
          <target state="translated">次の例では、 &lt;code&gt;ignore&lt;/code&gt; フィールドを使用して、アセットフォルダー内の特定のファイルをビルドにコピーしないようにします。</target>
        </trans-unit>
        <trans-unit id="ca768a6447856248e05d7cc58b53fac8ddd37f3d" translate="yes">
          <source>The following example uses the decorator to inject the string literal &lt;code&gt;text&lt;/code&gt;.</source>
          <target state="translated">次の例では、デコレータを使用して文字列リテラル &lt;code&gt;text&lt;/code&gt; を挿入します 。</target>
        </trans-unit>
        <trans-unit id="eb5ef26847f4c6bb4576ebd5051a24fffc69f9b8" translate="yes">
          <source>The following example writes a value to the native DOM element.</source>
          <target state="translated">次の例では、値をネイティブDOM要素に書き込みます。</target>
        </trans-unit>
        <trans-unit id="72f05bc4e050c0a036b7ee9e401d609482e4015f" translate="yes">
          <source>The following examples create animation styles that collect a set of CSS property values:</source>
          <target state="translated">次の例では、一連のCSSプロパティ値を収集するアニメーションスタイルを作成します。</target>
        </trans-unit>
        <trans-unit id="459e7a5210520be2ebdc86dc38684f6553aa04d7" translate="yes">
          <source>The following examples define transitions between the two defined states (and default states), using various options:</source>
          <target state="translated">次の例では、さまざまなオプションを使用して、2つの定義済み状態（およびデフォルト状態）間の遷移を定義します。</target>
        </trans-unit>
        <trans-unit id="6c7c13798e2458b819d456bfdd01d7da3d7c6730" translate="yes">
          <source>The following examples demonstrate how to modify default change-detection behavior to perform explicit detection when needed.</source>
          <target state="translated">次の例は、デフォルトの変更検出動作を変更して、必要なときに明示的な検出を実行する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a2dba34eb7491a58432ad4932be25b6ceb269f40" translate="yes">
          <source>The following examples revisit two of the &lt;code&gt;TwainComponent&lt;/code&gt; tests with marble testing.</source>
          <target state="translated">次の例では、大理石テストを &lt;code&gt;TwainComponent&lt;/code&gt; して2つのTwainComponentテストを再検討します。</target>
        </trans-unit>
        <trans-unit id="fe4d1dc55bed59fbfefe7303b68660eabb2d82d0" translate="yes">
          <source>The following examples show a simple standalone control using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次の例は、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用した単純なスタンドアロンコントロールを示しています。</target>
        </trans-unit>
        <trans-unit id="4fc88102b63983b94153026634db490e12748eb6" translate="yes">
          <source>The following examples show how to use a select control in a reactive form.</source>
          <target state="translated">次の例は、リアクティブフォームで選択コントロールを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="237f9f6e9900e6f0dc1fc654e095fe6275c71b7a" translate="yes">
          <source>The following examples show various &lt;code&gt;timings&lt;/code&gt; specifications.</source>
          <target state="translated">次の例は、さまざまな &lt;code&gt;timings&lt;/code&gt; 仕様を示しています。</target>
        </trans-unit>
        <trans-unit id="5f4d2b0076660bb96fee07f703fa6b241bb56e96" translate="yes">
          <source>The following examples shows how to register a standalone control and set its value.</source>
          <target state="translated">次の例は、スタンドアロンコントロールを登録し、その値を設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8514f98ee54c6d7f9e2628e3962d79053cdd4d14" translate="yes">
          <source>The following exported values can be aliased to local variables:</source>
          <target state="translated">次のエクスポートされた値は、ローカル変数にエイリアスできます。</target>
        </trans-unit>
        <trans-unit id="62e616b6d0095e3bb10360974145d786228761d7" translate="yes">
          <source>The following format message in the component template binds to the component's &lt;code&gt;gender&lt;/code&gt; property, which outputs one of the following string values: &quot;male&quot;, &quot;female&quot; or &quot;other&quot;. The message maps those values to the appropriate translations:</source>
          <target state="translated">コンポーネントテンプレート内の次のフォーマットメッセージは、コンポーネントの &lt;code&gt;gender&lt;/code&gt; プロパティにバインドし、次の文字列値のいずれかを出力します： &quot;male&quot;、 &quot;female&quot;、または &quot;other&quot;。 メッセージは、これらの値を適切な翻訳にマップします。</target>
        </trans-unit>
        <trans-unit id="257cd6c433a723247e55e6b1ea41d9b5ac15489c" translate="yes">
          <source>The following hooks take action based on changing values &lt;em&gt;within the child view&lt;/em&gt;, which can only be reached by querying for the child view via the property decorated with &lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChild&lt;/a&gt;.</source>
          <target state="translated">次のフックは&lt;em&gt;、子ビュー内の&lt;/em&gt;値の変更に基づいてアクションを実行し&lt;em&gt;ます&lt;/em&gt; 。これは、 &lt;a href=&quot;../api/core/viewchild&quot;&gt;@ViewChildで&lt;/a&gt;装飾されたプロパティを介して子ビューを照会することによってのみ到達できます。</target>
        </trans-unit>
        <trans-unit id="e81974601b5eeac5fe055890e3562d697f17cbf9" translate="yes">
          <source>The following image shows the effect of mousing over the &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">次の画像は、 &lt;code&gt;&amp;lt;hero-bios-and-contacts&amp;gt;&lt;/code&gt; タグを介したマウスの影響を示しています。</target>
        </trans-unit>
        <trans-unit id="0be1b281c327a57359a32dbec200dbb405ead34f" translate="yes">
          <source>The following invokes the defined animation with a call to &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt;, passing in override parameter values.</source>
          <target state="translated">以下は &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; を呼び出して定義されたアニメーションを呼び出し、オーバーライドパラメーター値を渡します。</target>
        </trans-unit>
        <trans-unit id="27db2b5bc00e4f188ea46c5deb7fb5587ac85224" translate="yes">
          <source>The following is a &lt;code&gt;setCurrentStyles()&lt;/code&gt; method that sets a component property, &lt;code&gt;currentStyles&lt;/code&gt;, with an object that defines three styles, based on the state of three other component properties:</source>
          <target state="translated">以下は、コンポーネントプロパティ &lt;code&gt;currentStyles&lt;/code&gt; を 、他の3つのコンポーネントプロパティの状態に基づいて3つのスタイルを定義するオブジェクトで設定する &lt;code&gt;setCurrentStyles()&lt;/code&gt; メソッドです。</target>
        </trans-unit>
        <trans-unit id="610692584293dfd2fb6fcb4af8bd9c779e7a454d" translate="yes">
          <source>The following is a child &lt;code&gt;CountdownTimerComponent&lt;/code&gt; that repeatedly counts down to zero and launches a rocket. It has &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods that control the clock and it displays a countdown status message in its own template.</source>
          <target state="translated">以下は、ゼロまで繰り返しカウントダウンしてロケットを発射する子 &lt;code&gt;CountdownTimerComponent&lt;/code&gt; です。 クロックを制御する &lt;code&gt;start&lt;/code&gt; および &lt;code&gt;stop&lt;/code&gt; メソッドがあり、独自のテンプレートにカウントダウンステータスメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="7326f4531184dc8d93c37051d97ac9e13cd1c12e" translate="yes">
          <source>The following is a typical example.</source>
          <target state="translated">以下は典型的な例です。</target>
        </trans-unit>
        <trans-unit id="55843c76bb937b5c99ade8fb44814616949b7628" translate="yes">
          <source>The following is an example of how the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; view trees are combined into a single logical tree:</source>
          <target state="translated">以下は、 &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; ビューツリーが単一の論理ツリーにどのように結合されるかの例です。</target>
        </trans-unit>
        <trans-unit id="664fbc064070f409303fb12c41e2bb73522bd8a0" translate="yes">
          <source>The following is an example of how you can use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to link the two modules.</source>
          <target state="translated">以下は、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; を使用して2つのモジュールをリンクする方法の例です。</target>
        </trans-unit>
        <trans-unit id="8607bb858867baa84b109da9d0c1ff3859efd04b" translate="yes">
          <source>The following is an example of specifying a bootstrapped component, &lt;code&gt;AppComponent&lt;/code&gt;, in a basic &lt;code&gt;app.module.ts&lt;/code&gt;:</source>
          <target state="translated">以下は、基本的な &lt;code&gt;app.module.ts&lt;/code&gt; でブートストラップされたコンポーネント &lt;code&gt;AppComponent&lt;/code&gt; を指定する例です。</target>
        </trans-unit>
        <trans-unit id="453ca73d33c283d35d71394c3a21baf84fabbce3" translate="yes">
          <source>The following is an example of writing the disabled property to a native DOM element:</source>
          <target state="translated">無効なプロパティをネイティブDOM要素に書き込む例を次に示します。</target>
        </trans-unit>
        <trans-unit id="8fb7a4128454c301515b108ffaddee95b06eee50" translate="yes">
          <source>The following line adds the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppRoutingModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array and configures it with the &lt;code&gt;routes&lt;/code&gt; in one step by calling &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">次の行は、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;AppRoutingModule&lt;/code&gt; &lt;code&gt;imports&lt;/code&gt; 配列に追加し、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 呼び出すことにより、1ステップで &lt;code&gt;routes&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="301a3f6c250317996f1a7e73563e3c1f2daa213c" translate="yes">
          <source>The following matcher matches HTML files.</source>
          <target state="translated">次のマッチャーはHTMLファイルに一致します。</target>
        </trans-unit>
        <trans-unit id="085ddba18b2c5265e10006f356e68568d4824afc" translate="yes">
          <source>The following options are available for configuring the AoT template compiler.</source>
          <target state="translated">次のオプションは、AoTテンプレートコンパイラの構成に使用できます。</target>
        </trans-unit>
        <trans-unit id="bc78819d810ff269dc610903ab67d72f0566f184" translate="yes">
          <source>The following pattern is deprecated:</source>
          <target state="translated">次のパターンは非推奨です。</target>
        </trans-unit>
        <trans-unit id="dfcc5dab05630152017f437c01aea4388857e4f2" translate="yes">
          <source>The following polyfills are used to test the framework itself. They are a good starting point for an application.</source>
          <target state="translated">次のポリフィルは、フレームワーク自体をテストするために使用されます。 これらは、アプリケーションの開始点として適しています。</target>
        </trans-unit>
        <trans-unit id="e3d0650581e15a43999d42a2416501047b4f3a7b" translate="yes">
          <source>The following properties, at the top level of the file, configure the workspace.</source>
          <target state="translated">ファイルの最上位にある次のプロパティは、ワークスペースを構成します。</target>
        </trans-unit>
        <trans-unit id="7e985ef8314fd51479546a4ad9e18907e6515ed5" translate="yes">
          <source>The following provider object uses the &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; key to associate the variable with the &lt;code&gt;Logger&lt;/code&gt; token.</source>
          <target state="translated">次のプロバイダーオブジェクトは &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; キーを使用して、変数を &lt;code&gt;Logger&lt;/code&gt; トークンに関連付けます。</target>
        </trans-unit>
        <trans-unit id="99189183b4cb84682cca267b2e990eeba8a565d5" translate="yes">
          <source>The following route creates sibling components with multiple outlets. When navigating to &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt;, the router creates the 'Team' component next to the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</source>
          <target state="translated">次のルートは、複数のコンセントを持つ兄弟コンポーネントを作成します。 &lt;code&gt;/team/11(aux:chat/jim)&lt;/code&gt; と、ルーターは「チャット」コンポーネントの隣に「チーム」コンポーネントを作成します。 「チャット」コンポーネントは「aux」アウトレットに配置されます。</target>
        </trans-unit>
        <trans-unit id="9dd6c9b80bc0194ec4f3aac76cae7d2d01f577d8" translate="yes">
          <source>The following route specifies that when navigating to, for example, &lt;code&gt;/team/11/user/bob&lt;/code&gt;, the router creates the 'Team' component with the 'User' child component in it.</source>
          <target state="translated">次のルートは、たとえば &lt;code&gt;/team/11/user/bob&lt;/code&gt; に移動するときに、ルーターが「ユーザー」子コンポーネントを含む「チーム」コンポーネントを作成することを指定します。</target>
        </trans-unit>
        <trans-unit id="98cd7483f8aba2a02696564fcb82530e8aa235b9" translate="yes">
          <source>The following route uses the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; property to ignore a segment of a given URL when looking for a child path.</source>
          <target state="translated">次のルートでは、 &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; プロパティを使用して、子パスを検索するときに特定のURLのセグメントを無視します。</target>
        </trans-unit>
        <trans-unit id="2b01e0c8059fc0401e8549e70d7dcf5bc5f7ee96" translate="yes">
          <source>The following route uses wild-card notation to specify a component that is always instantiated regardless of where you navigate to.</source>
          <target state="translated">次のルートでは、ワイルドカード表記を使用して、ナビゲート先に関係なく常にインスタンス化されるコンポーネントを指定します。</target>
        </trans-unit>
        <trans-unit id="a6454d98dfd985ac59580f707d0a349be9a74d91" translate="yes">
          <source>The following section refactors the &lt;code&gt;ProfileEditor&lt;/code&gt; component to use the form builder service to create form control and form group instances.</source>
          <target state="translated">次のセクションでは、 &lt;code&gt;ProfileEditor&lt;/code&gt; コンポーネントをリファクタリングして、フォームビルダーサービスを使用してフォームコントロールおよびフォームグループインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="5465ea2f359e32bfe1a37ff57e84812529ef826d" translate="yes">
          <source>The following sections excerpt methods of the sample's &lt;code&gt;HeroesService&lt;/code&gt;.</source>
          <target state="translated">次のセクションでは、サンプルの &lt;code&gt;HeroesService&lt;/code&gt; のメソッドを抜粋します。</target>
        </trans-unit>
        <trans-unit id="a76c578936ab27254fb8d939de7a81db9437d38c" translate="yes">
          <source>The following sections, comprising most of this guide, explore common component testing scenarios</source>
          <target state="translated">このガイドの大部分を構成する次のセクションでは、一般的なコンポーネントのテストシナリオについて説明します。</target>
        </trans-unit>
        <trans-unit id="7fdb271994a4a327f199629fee13b3b5218174bf" translate="yes">
          <source>The following selectors are supported.</source>
          <target state="translated">以下のセレクターがサポートされています。</target>
        </trans-unit>
        <trans-unit id="5b0248f72441058a2d81893bf871c0a2c0bb3d1c" translate="yes">
          <source>The following shows &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; guarding two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s. The &lt;code&gt;currentCustomer&lt;/code&gt; name appears only when there is a &lt;code&gt;currentCustomer&lt;/code&gt;. The &lt;code&gt;nullCustomer&lt;/code&gt; will not be displayed as long as it is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">以下は、2つの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; をガードする &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; を示しています。 &lt;code&gt;currentCustomer&lt;/code&gt; 名は、 &lt;code&gt;currentCustomer&lt;/code&gt; がある場合にのみ表示されます 。 &lt;code&gt;nullCustomer&lt;/code&gt; は、 &lt;code&gt;null&lt;/code&gt; である限り表示されません。</target>
        </trans-unit>
        <trans-unit id="d137ad25db2cc877ca5df59f56e9a6b890ee5500" translate="yes">
          <source>The following shows the new and the old implementations side-by-side.</source>
          <target state="translated">以下に、新しい実装と古い実装を並べて示します。</target>
        </trans-unit>
        <trans-unit id="e1bd79b4d2db06b7589c87d8dbd16316e269179c" translate="yes">
          <source>The following shows use with the &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; decorator, and allows for a null result.</source>
          <target state="translated">次の例では、 &lt;code&gt;@&lt;a href=&quot;optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; デコレータの使用方法を示しており、nullの結果を許可しています。</target>
        </trans-unit>
        <trans-unit id="f6128302a128007a3c40e5752360cf21b438bb75" translate="yes">
          <source>The following simple example injects a class into a component using the view provider specified in component metadata:</source>
          <target state="translated">次の簡単な例では、コンポーネントメタデータで指定されたビュープロバイダーを使用して、クラスをコンポーネントに挿入します。</target>
        </trans-unit>
        <trans-unit id="01444f8aa1fd63fbea66ed3fbc4d76b3181f9147" translate="yes">
          <source>The following snippet shows how a component can implement this interface to define an on-changes handler for an input property.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して、入力プロパティの変更時ハンドラを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a2cf27e61d910f2a3062d16cd2b48905ec197f2c" translate="yes">
          <source>The following snippet shows how a component can implement this interface to define its own after-check functionality.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して、独自のチェック後機能を定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="02c938106305027d23ab75882704caf8994a7b24" translate="yes">
          <source>The following snippet shows how a component can implement this interface to define its own content initialization method.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自のコンテンツ初期化メソッドを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0e8fbeff69628590a0b295ba498767902ead9d66" translate="yes">
          <source>The following snippet shows how a component can implement this interface to define its own custom clean-up method.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自のカスタムクリーンアップメソッドを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="411e84ca8d7c03f76c1b14b61d983ec8bab6408f" translate="yes">
          <source>The following snippet shows how a component can implement this interface to define its own initialization method.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自の初期化メソッドを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="94805b48a3f8993b901ee028c3968016d01e3964" translate="yes">
          <source>The following snippet shows how a component can implement this interface to define its own view initialization method.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して独自のビュー初期化メソッドを定義する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1aff607a58501ecf10894e98220ffe4cf493e1de" translate="yes">
          <source>The following snippet shows how a component can implement this interface to invoke it own change-detection cycle.</source>
          <target state="translated">次のスニペットは、コンポーネントがこのインターフェイスを実装して、独自の変更検出サイクルを呼び出す方法を示しています。</target>
        </trans-unit>
        <trans-unit id="385410d96fd0d1ada306ab805640a6a9fe3ab05f" translate="yes">
          <source>The following support packages are included as dependencies in the default &lt;code&gt;package.json&lt;/code&gt; file for a new Angular workspace.</source>
          <target state="translated">次のサポートパッケージは、新しいAngularワークスペースのデフォルトの &lt;code&gt;package.json&lt;/code&gt; ファイルに依存関係として含まれています。</target>
        </trans-unit>
        <trans-unit id="79640a37e7e2636b4e4ea578ebf213b6e60d68d0" translate="yes">
          <source>The following table contains our current target release dates for the next two major versions of Angular:</source>
          <target state="translated">次の表には、Angularの次の2つのメジャーバージョンの現在のターゲットリリース日が含まれています。</target>
        </trans-unit>
        <trans-unit id="4ca2b1e7ed53f03929a56107550cff032e43e862" translate="yes">
          <source>The following table demonstrates how Angular desugars microsyntax.</source>
          <target state="translated">次の表は、Angularがマイクロシンタックスをどのように脱糖するかを示しています。</target>
        </trans-unit>
        <trans-unit id="7733978f307b95f03a15335e16eb927c523fa06b" translate="yes">
          <source>The following table describes which expressions the collector can and cannot fold:</source>
          <target state="translated">次の表は、コレクターが折りたたみ可能な式と折りたたみできない式を示しています。</target>
        </trans-unit>
        <trans-unit id="4e03431838c501d28cce8ddc5c46d3be138f46e9" translate="yes">
          <source>The following table provides the status for Angular versions under support.</source>
          <target state="translated">次の表に、サポート対象のAngularバージョンのステータスを示します。</target>
        </trans-unit>
        <trans-unit id="d96b5c739c1826895418b2145bbddbdded331ea4" translate="yes">
          <source>The following table summarizes the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">次の表は、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータプロパティをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="94f36be6c96bfbef3f8339094d4d44cbc04cfe6a" translate="yes">
          <source>The following table summarizes the key characteristics of each feature module group.</source>
          <target state="translated">次の表は、各機能モジュールグループの主要な特性をまとめたものです。</target>
        </trans-unit>
        <trans-unit id="fec16611f597670fac267bce5d690f6c5abe4600" translate="yes">
          <source>The following tables describe each portion of the microsyntax grammar.</source>
          <target state="translated">次の表は、マイクロ構文の文法の各部分を説明しています。</target>
        </trans-unit>
        <trans-unit id="4ce840172e7aa3dbc7025dbe2e8ba9084075ce24" translate="yes">
          <source>The following template binds the value of &lt;code&gt;htmlSnippet&lt;/code&gt;, once by interpolating it into an element's content, and once by binding it to the &lt;code&gt;innerHTML&lt;/code&gt; property of an element:</source>
          <target state="translated">次のテンプレートは、 &lt;code&gt;htmlSnippet&lt;/code&gt; の値を、要素のコンテンツに内挿することによって1回、要素の &lt;code&gt;innerHTML&lt;/code&gt; プロパティにバインドすることによって1回バインドします。</target>
        </trans-unit>
        <trans-unit id="95542803d1818e7b9ddf8543ea3d2f5e00675e56" translate="yes">
          <source>The following template breaks down into two separate &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances, an outer one and an inner one.</source>
          <target state="translated">次のテンプレートは、外側と内側の2つの別々の &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; インスタンスに分類されます。</target>
        </trans-unit>
        <trans-unit id="0cd0ff39268d1599e7449c7cc25bc25785f4bad2" translate="yes">
          <source>The following test alternative calls the native element's own &lt;code&gt;click()&lt;/code&gt; method, which is perfectly fine for &lt;em&gt;this component&lt;/em&gt;.</source>
          <target state="translated">次のテスト代替は、ネイティブ要素の &lt;code&gt;click()&lt;/code&gt; メソッドを呼び出し&lt;em&gt;ます&lt;/em&gt; 。 &lt;em&gt;この&lt;/em&gt;メソッドは、 &lt;em&gt;このコンポーネントに最適&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="3e38312f70780e3491f68ec661365696be0e3289" translate="yes">
          <source>The following test clicks the displayed hero and confirms that &lt;code&gt;Router.navigateByUrl&lt;/code&gt; is called with the expected url.</source>
          <target state="translated">次のテストでは、表示されたヒーローをクリックして、予想されるURLで &lt;code&gt;Router.navigateByUrl&lt;/code&gt; が呼び出されることを確認します。</target>
        </trans-unit>
        <trans-unit id="a6dfa1bb416d8e0295cb8c255d10104e0c62ad38" translate="yes">
          <source>The following test confirms the expected behavior when the service returns an &lt;code&gt;ErrorObservable&lt;/code&gt;.</source>
          <target state="translated">次のテストは、サービスが &lt;code&gt;ErrorObservable&lt;/code&gt; を返すときの予想される動作を確認します。</target>
        </trans-unit>
        <trans-unit id="eeefd0a90ed65af64e72aa2c46c4435e2cb08978" translate="yes">
          <source>The following test verifies that the hero name is propagated to the template via a binding.</source>
          <target state="translated">次のテストでは、ヒーロー名がバインディングを介してテンプレートに伝播されることを確認します。</target>
        </trans-unit>
        <trans-unit id="669b416d81d58828e3baeba2592b6d7bdb997a78" translate="yes">
          <source>The following test verifies the data flow from model to view.</source>
          <target state="translated">次のテストは、モデルからビューへのデータフローを検証します。</target>
        </trans-unit>
        <trans-unit id="9493bee7e41e07ddded061eefd4c86697f978133" translate="yes">
          <source>The following test verifies the data flow from view to model.</source>
          <target state="translated">次のテストは、ビューからモデルへのデータフローを検証します。</target>
        </trans-unit>
        <trans-unit id="f74f9a34c41218f6c8d1f966bf27413f11fe65fe" translate="yes">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a reactive form.</source>
          <target state="translated">次のテストでは、前述のお気に入りのカラーコンポーネントを使用して、ビューからモデルへ、およびリアクティブフォームのモデルからビューへのデータフローを検証します。</target>
        </trans-unit>
        <trans-unit id="43b51a454408bcc622da34659c907ba79ec26345" translate="yes">
          <source>The following tests use the favorite color components mentioned earlier to verify the data flows from view to model and model to view for a template-driven form.</source>
          <target state="translated">次のテストでは、前述のお気に入りのカラーコンポーネントを使用して、テンプレートドリブンフォームのビューからモデルおよびモデルへのデータフローを検証します。</target>
        </trans-unit>
        <trans-unit id="7fd03907907ea2e83f365fb45a4c105b4acdfd13" translate="yes">
          <source>The following top-level configuration properties are available for each project, under &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以下のトップレベルの設定プロパティは、プロジェクトの下の各プロジェクトで使用できます &lt;code&gt;projects:&amp;lt;project_name&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75147566e331317e0ebd38d4c23e1fe75b6e9f20" translate="yes">
          <source>The form control assigned to &lt;code&gt;name&lt;/code&gt; is displayed when the component is added to a template.</source>
          <target state="translated">コンポーネントがテンプレートに追加されると、 &lt;code&gt;name&lt;/code&gt; 割り当てられたフォームコントロールが表示されます。</target>
        </trans-unit>
        <trans-unit id="2230bb7f6f181d5dab7f244d6c86fa35f9398e04" translate="yes">
          <source>The form has the following structure:</source>
          <target state="translated">フォームの構造は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b34e294f68df7549c748b9444818ff001b758168" translate="yes">
          <source>The form input element emits an &quot;input&quot; event with the latest value.</source>
          <target state="translated">フォーム入力要素は、最新の値を持つ「入力」イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="a8655729b1ee08ecff05e7625d507f952f92fcd0" translate="yes">
          <source>The form model is defined in the component class. To reflect the model in the view, you'll need a checkout form.</source>
          <target state="translated">フォームモデルは、コンポーネントクラスで定義されます。 ビューにモデルを反映するには、チェックアウトフォームが必要です。</target>
        </trans-unit>
        <trans-unit id="0ee382bec575b1f6da6bbb9cd31af78bff011d9e" translate="yes">
          <source>The form model is the source of truth for the control, so when you click the button, the value of the input is changed within the component class, overriding its current value.</source>
          <target state="translated">フォームモデルはコントロールの真のソースであるため、ボタンをクリックすると、コンポーネントクラス内で入力の値が変更され、現在の値が上書きされます。</target>
        </trans-unit>
        <trans-unit id="2b5a84ea0eb09a364844c5d9b46df413273dce48" translate="yes">
          <source>The form no longer exports any directives, and instead uses the &lt;code&gt;name&lt;/code&gt; getter defined in the component class.</source>
          <target state="translated">フォームはディレクティブをエクスポートしなくなり、代わりにコンポーネントクラスで定義されたゲッター &lt;code&gt;name&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c4afd0129b7e117b92146615638d0e4e2006fecc" translate="yes">
          <source>The format for the currency indicator. One of the following:</source>
          <target state="translated">通貨インジケーターの形式。 次のいずれか：</target>
        </trans-unit>
        <trans-unit id="eee651f151097d3f793f7dd68113adcb34cf7213" translate="yes">
          <source>The format type.</source>
          <target state="translated">形式タイプ。</target>
        </trans-unit>
        <trans-unit id="cd068df6dcd825ce5052a96a9a61c9e6c6f8bd76" translate="yes">
          <source>The format, &lt;code&gt;wide&lt;/code&gt; or &lt;code&gt;narrow&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wide&lt;/code&gt; または &lt;code&gt;narrow&lt;/code&gt; の形式。</target>
        </trans-unit>
        <trans-unit id="526712cace2051a3820458eac477a227870a4798" translate="yes">
          <source>The fragment of the URL</source>
          <target state="translated">URLのフラグメント</target>
        </trans-unit>
        <trans-unit id="0d182f34bb720d02d0ff9daf3877acfc53926309" translate="yes">
          <source>The framework passes the event argument&amp;mdash;represented by &lt;code&gt;$event&lt;/code&gt;&amp;mdash;to the handler method, and the method processes it:</source>
          <target state="translated">フレームワークは、 &lt;code&gt;$event&lt;/code&gt; 表されるイベント引数をハンドラーメソッドに渡し、メソッドはそれを処理します。</target>
        </trans-unit>
        <trans-unit id="cb343064f13dd87a34e507dfccab96b02bd2aebe" translate="yes">
          <source>The full URL string</source>
          <target state="translated">完全なURL文字列</target>
        </trans-unit>
        <trans-unit id="88085ca27e5b06d61296a4f74c271a308a999e84" translate="yes">
          <source>The full URL string.</source>
          <target state="translated">完全なURL文字列。</target>
        </trans-unit>
        <trans-unit id="7f0cbd8363677df2b3ea5c867b26387e1ee8078d" translate="yes">
          <source>The full path for the TypeScript configuration file, relative to the current workspace.</source>
          <target state="translated">現在のワークスペースを基準とした、TypeScript構成ファイルの絶対パス。</target>
        </trans-unit>
        <trans-unit id="8023b8cae23a8f17607eebcdfccedf1316888f2a" translate="yes">
          <source>The full path for the main entry point to the app, relative to the current workspace.</source>
          <target state="translated">現在のワークスペースを基準にした、アプリへのメインエントリポイントのフルパス。</target>
        </trans-unit>
        <trans-unit id="9fcf0e0bdd67b2fc8e34d78b3c0248617ad77ccf" translate="yes">
          <source>The full path for the new output directory, relative to the current workspace.</source>
          <target state="translated">現在のワークスペースを基準にした、新しい出力ディレクトリの絶対パス。</target>
        </trans-unit>
        <trans-unit id="eed94568aa1a8e2503cf46beaf9ea9475b325fba" translate="yes">
          <source>The full path for the polyfills file, relative to the current workspace.</source>
          <target state="translated">現在のワークスペースに相対的な、ポリフィルファイルのフルパス。</target>
        </trans-unit>
        <trans-unit id="72ca397dc507125a0d20ad46ccbf197c1c42a7a1" translate="yes">
          <source>The full response including the body was received.</source>
          <target state="translated">ボディを含む完全な応答が受信されました。</target>
        </trans-unit>
        <trans-unit id="e6503b9b0cc09112e25c5a60b6304d09a44f4ed9" translate="yes">
          <source>The full source for the final version of the app can be seen and downloaded from the live example.</source>
          <target state="translated">アプリの最終バージョンの完全なソースは、ライブサンプルから確認およびダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="ae6e08f7e449effe9eff51219d47a00a65d9c956" translate="yes">
          <source>The function is actually a factory that takes a regular expression to detect a &lt;em&gt;specific&lt;/em&gt; forbidden name and returns a validator function.</source>
          <target state="translated">この関数は実際には、 &lt;em&gt;特定の&lt;/em&gt;禁止された名前を検出するための正規表現を受け取り、バリデーター関数を返すファクトリーです。</target>
        </trans-unit>
        <trans-unit id="48c80eeebb68498080f87297bd6cc25ebeabb884" translate="yes">
          <source>The function receives two inputs, the iteration index and the node object ID.</source>
          <target state="translated">この関数は、反復インデックスとノードオブジェクトIDの2つの入力を受け取ります。</target>
        </trans-unit>
        <trans-unit id="be32b3ac1b2eb072a21ff75621b7e08425ea08f2" translate="yes">
          <source>The function retrieves candidate heroes from the &lt;code&gt;HeroService&lt;/code&gt;, takes &lt;code&gt;2&lt;/code&gt; of them to be the runners-up, and returns their concatenated names. Look at the  for the full source code.</source>
          <target state="translated">この関数は、 &lt;code&gt;HeroService&lt;/code&gt; からヒーロー候補を取得し、そのうち &lt;code&gt;2&lt;/code&gt; 人を次点者として、連結された名前を返します。 完全なソースコードをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a09d2a5d397e66aa18cf75d4bb9e37f09ac8bfb3" translate="yes">
          <source>The function returns the string of names, which Angular than injects into the &lt;code&gt;runnersUp&lt;/code&gt; parameter of &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt;.</source>
          <target state="translated">この関数は名前の文字列を返し、Angularは &lt;code&gt;runnersUp&lt;/code&gt; パラメーターに &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="fc8a8d17b8274bbc32ca0cfca58f30d95ef0f38d" translate="yes">
          <source>The function takes a winning &lt;code&gt;Hero&lt;/code&gt; and a &lt;code&gt;HeroService&lt;/code&gt; as arguments. Angular supplies these arguments from injected values identified by the two &lt;em&gt;tokens&lt;/em&gt; in the &lt;code&gt;deps&lt;/code&gt; array.</source>
          <target state="translated">この関数は、勝者の &lt;code&gt;Hero&lt;/code&gt; と &lt;code&gt;HeroService&lt;/code&gt; を引数として受け取ります。 Angularは、 &lt;code&gt;deps&lt;/code&gt; 配列内の2つの&lt;em&gt;トークン&lt;/em&gt;によって識別される注入値からこれらの引数を提供します。</target>
        </trans-unit>
        <trans-unit id="7fd4d00a7d9c89b4d22e796a799455efec2aec0f" translate="yes">
          <source>The function that determines the asynchronous validity of this control.</source>
          <target state="translated">このコントロールの非同期の有効性を決定する関数。</target>
        </trans-unit>
        <trans-unit id="75f21eecd9b997cf943218446152125dac02ddc1" translate="yes">
          <source>The function that determines the synchronous validity of this control.</source>
          <target state="translated">このコントロールの同期有効性を決定する関数。</target>
        </trans-unit>
        <trans-unit id="65f7a04d29635cdb37413f0c3e472d4e275bd987" translate="yes">
          <source>The functional API provided by the &lt;code&gt;@angular/animations&lt;/code&gt; module provides a domain-specific language (DSL) for creating and controlling animations in Angular applications. See the &lt;a href=&quot;../api/animations&quot;&gt;API reference&lt;/a&gt; for a complete listing and syntax details of the core functions and related data structures.</source>
          <target state="translated">&lt;code&gt;@angular/animations&lt;/code&gt; モジュールによって提供される機能APIは、Angularアプリケーションでアニメーションを作成および制御するためのドメイン固有言語（DSL）を提供します。 コア関数と関連データ構造の完全なリストと構文の詳細については、 &lt;a href=&quot;../api/animations&quot;&gt;APIリファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="39cc10df89d390f57860b9af6c0adb017e7434d2" translate="yes">
          <source>The gathering of CLI analytics data is disabled by default, and must be enabled at the project level by individual users. It cannot be enabled at the project level for all users.</source>
          <target state="translated">CLI分析データの収集はデフォルトで無効になっており、個々のユーザーがプロジェクトレベルで有効にする必要があります。 すべてのユーザーに対してプロジェクトレベルで有効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="fdd0a7a0c40007f4996ec51aa08759927de0515e" translate="yes">
          <source>The generated &lt;code&gt;ngsw-config.json&lt;/code&gt; includes a limited list of cachable fonts and images extentions. In some cases, you might want to modify the glob pattern to suit your needs.</source>
          <target state="translated">生成された &lt;code&gt;ngsw-config.json&lt;/code&gt; には、 キャッシュ可能なフォントと画像の拡張子の限定リストが含まれています。 場合によっては、ニーズに合わせてグロブパターンを変更することができます。</target>
        </trans-unit>
        <trans-unit id="4a279bf5db87a97440dc1aee59aa3be18678bef7" translate="yes">
          <source>The generated &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; is as follows:</source>
          <target state="translated">生成された &lt;code&gt;src/app/highlight.directive.ts&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e616c4f20e747c4816f0eec1d31528b85dafd2e4" translate="yes">
          <source>The generated file looks like this:</source>
          <target state="translated">生成されたファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="04803306c35b1db59a8611c4f1c5567aec8e4351" translate="yes">
          <source>The generated output would look something like this:</source>
          <target state="translated">生成される出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="141073788fe40a99ac2d4c89d2b31fce8314ca6b" translate="yes">
          <source>The generator creates starter files for all three parts of the component:</source>
          <target state="translated">ジェネレーターは、コンポーネントの3つの部分すべてのスターターファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="bf05807c104db04e8ba4b4172fe1e0d537908a8f" translate="yes">
          <source>The generic &lt;code&gt;ng run&lt;/code&gt; CLI command takes as its first argument a target string of the form &lt;em&gt;project:target[:configuration]&lt;/em&gt;.</source>
          <target state="translated">一般的な &lt;code&gt;ng run&lt;/code&gt; CLIコマンドは、その最初の引数として形式&lt;em&gt;project：target [：configuration]の&lt;/em&gt;ターゲット文字列を取り&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ec0f9f9bac30ff11b631988c34462992f22407b" translate="yes">
          <source>The given URL path.</source>
          <target state="translated">指定されたURLパス。</target>
        </trans-unit>
        <trans-unit id="ab814f412c1f1d0bae00400afb55a1234e1acc6e" translate="yes">
          <source>The goal is to group the &lt;code&gt;Crisis Center&lt;/code&gt; management routes under the &lt;code&gt;admin&lt;/code&gt; path. You don't need a component to do it. A &lt;em&gt;component-less&lt;/em&gt; route makes it easier to &lt;a href=&quot;router#can-activate-child-guard&quot;&gt;guard child routes&lt;/a&gt;.</source>
          <target state="translated">目標は、 &lt;code&gt;admin&lt;/code&gt; パスの下に &lt;code&gt;Crisis Center&lt;/code&gt; 管理ルートをグループ化することです。 それを行うためにコンポーネントは必要ありません。 &lt;em&gt;コンポーネントなしの&lt;/em&gt;ルートにより、 &lt;a href=&quot;router#can-activate-child-guard&quot;&gt;子ルートを&lt;/a&gt;簡単に保護できます。</target>
        </trans-unit>
        <trans-unit id="7e3f53bd2e127f2d6cf985d6eab8a081c2e42cae" translate="yes">
          <source>The greater danger is that &lt;strong&gt;a future rewording of the header text would break&lt;/strong&gt; a link to this section.</source>
          <target state="translated">より大きな危険は&lt;strong&gt;、ヘッダーテキストの将来の言い回しが&lt;/strong&gt;このセクションへのリンクを&lt;strong&gt;壊す&lt;/strong&gt;ことです。</target>
        </trans-unit>
        <trans-unit id="1459c8d453ff8ac4153c0dff3f06d25103f5fe41" translate="yes">
          <source>The grouping element may break the template appearance because CSS styles neither expect nor accommodate the new layout. For example, suppose you have the following paragraph layout.</source>
          <target state="translated">CSSスタイルは新しいレイアウトを想定も収容もしないため、グループ化要素はテンプレートの外観を損なう可能性があります。 たとえば、次の段落レイアウトがあるとします。</target>
        </trans-unit>
        <trans-unit id="186b7c1a6bbbaa6de4d2aef72af8c57b23e404a3" translate="yes">
          <source>The guard &lt;em&gt;might&lt;/em&gt; return its boolean answer synchronously. But in many cases, the guard can't produce an answer synchronously. The guard could ask the user a question, save changes to the server, or fetch fresh data. These are all asynchronous operations.</source>
          <target state="translated">ガード&lt;em&gt;は&lt;/em&gt;ブール応答を同期的に返す場合があります。 しかし多くの場合、ガードは同期的に回答を作成できません。 ガードは、ユーザーに質問したり、変更をサーバーに保存したり、新しいデータを取得したりできます。 これらはすべて非同期操作です。</target>
        </trans-unit>
        <trans-unit id="0fb3fdf4c451ff27c87e95fb3c718c6ebc299464" translate="yes">
          <source>The guide assumes that you're familiar with building basic Angular apps, as described in the following sections:</source>
          <target state="translated">このガイドでは、次のセクションで説明するように、基本的なAngularアプリの構築に精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="1e22bed2867320095b59b4361abac2b59605d915" translate="yes">
          <source>The guide presents tests of a sample application created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;. This sample application is much like the one created in the &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial&lt;/a&gt;. The sample application and all tests in this guide are available for inspection and experimentation:</source>
          <target state="translated">このガイドは、 &lt;a href=&quot;cli&quot;&gt;Angular CLIで&lt;/a&gt;作成されたサンプルアプリケーションのテストを示しています 。 このサンプルアプリケーションは、 &lt;a href=&quot;tutorial&quot;&gt;&lt;em&gt;Tour of Heroes&lt;/em&gt;チュートリアル&lt;em&gt;で&lt;/em&gt;&lt;/a&gt;作成したものとよく似ています。 このガイドのサンプルアプリケーションとすべてのテストは、検査と実験に使用できます。</target>
        </trans-unit>
        <trans-unit id="421303822387da04a3b56e711c4f3ea0bceaf8e8" translate="yes">
          <source>The guide proceeds as a sequence of milestones as if you were building the app step-by-step. But, it is not a tutorial and it glosses over details of Angular application construction that are more thoroughly covered elsewhere in the documentation.</source>
          <target state="translated">ガイドは、アプリを段階的に作成しているかのように、一連のマイルストーンとして進みます。 しかし、これはチュートリアルではなく、ドキュメントの別の場所でより詳細に説明されているAngularアプリケーションの構成の詳細を説明しています。</target>
        </trans-unit>
        <trans-unit id="56409968972545a88fbd9eded9e76b93ccbbcd50" translate="yes">
          <source>The guideline uses the shortcut &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; to represent those various files. Using this shortcut makes this guide's file structures easier to read and more terse.</source>
          <target state="translated">ガイドラインでは、ショートカット &lt;code&gt;hero.component.ts|html|css|spec&lt;/code&gt; を使用して、これらのさまざまなファイルを表します。 このショートカットを使用すると、このガイドのファイル構造が読みやすくなり、簡潔になります。</target>
        </trans-unit>
        <trans-unit id="a864f76394ca2c5a51fde927a0643f0c50460ce3" translate="yes">
          <source>The guidelines described here serve two purposes:</source>
          <target state="translated">ここで説明するガイドラインには、2つの目的があります。</target>
        </trans-unit>
        <trans-unit id="1888c94c63bc6d73016893cf4e85b80718910a2a" translate="yes">
          <source>The handlers delegate to a helper method that sets the color on the host DOM element, &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">ハンドラーは、ホストDOM要素 &lt;code&gt;el&lt;/code&gt; の色を設定するヘルパーメソッドに委任します。</target>
        </trans-unit>
        <trans-unit id="46bf71e9a7c208fa128b6a06edf63925677b2a2e" translate="yes">
          <source>The has string</source>
          <target state="translated">has文字列</target>
        </trans-unit>
        <trans-unit id="36d211182de9d369a5c0e06f411a8bd524c5be83" translate="yes">
          <source>The header name for which to append the value or values.</source>
          <target state="translated">値を追加するヘッダー名。</target>
        </trans-unit>
        <trans-unit id="f7ae4cade9263fbb970a7b0cf00131afd1c12bb5" translate="yes">
          <source>The header name from which to retrieve values.</source>
          <target state="translated">値を取得するヘッダー名。</target>
        </trans-unit>
        <trans-unit id="5c71c1c8b2b761ca699cfa043cb799e05f3e6574" translate="yes">
          <source>The header name to check for existence.</source>
          <target state="translated">存在を確認するヘッダー名。</target>
        </trans-unit>
        <trans-unit id="1af3be1a7d51a18f36d735ad45a99c8687d62de5" translate="yes">
          <source>The header name.</source>
          <target state="translated">ヘッダー名。</target>
        </trans-unit>
        <trans-unit id="1fb8a670c061e1780c533d1cfa92b7cada304777" translate="yes">
          <source>The helper method, &lt;code&gt;highlight&lt;/code&gt;, was extracted from the constructor. The revised constructor simply declares the injected &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ヘルパーメソッド &lt;code&gt;highlight&lt;/code&gt; は、コンストラクターから抽出されました。 改訂されたコンストラクタは、注入された &lt;code&gt;el: &lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 宣言するだけです 。</target>
        </trans-unit>
        <trans-unit id="77deeab503fd68fae60b1683faba0eaee8d11b6b" translate="yes">
          <source>The helper sets up global variables to hold the shared Angular and AngularJS injectors.</source>
          <target state="translated">ヘルパーは、共有のAngularおよびAngularJSインジェクターを保持するグローバル変数を設定します。</target>
        </trans-unit>
        <trans-unit id="4ae082078f4b7ac534ba00e2fb2f643830e768fa" translate="yes">
          <source>The hero &lt;em&gt;Alter Ego&lt;/em&gt; is optional so you can leave that be.</source>
          <target state="translated">主人公の&lt;em&gt;アルターエゴ&lt;/em&gt;はオプションなので、そのままにすることができます。</target>
        </trans-unit>
        <trans-unit id="71c6566d940a46db02f0c867ecf070621fd765b9" translate="yes">
          <source>The hero agency is planning an ad campaign with several different ads cycling through the banner. New ad components are added frequently by several different teams. This makes it impractical to use a template with a static component structure.</source>
          <target state="translated">主人公の代理店は、いくつかの異なる広告がバナーを循環する広告キャンペーンを計画しています。 新しい広告コンポーネントは、いくつかの異なるチームによって頻繁に追加されます。 このため、静的コンポーネント構造を持つテンプレートを使用することは実用的ではありません。</target>
        </trans-unit>
        <trans-unit id="8763e74d500e6e70efa6309067129b019b2ca2e7" translate="yes">
          <source>The hero editor.</source>
          <target state="translated">ヒーローエディター。</target>
        </trans-unit>
        <trans-unit id="0728ae26bedae4b1d12eb889d15f0b5193a7c81f" translate="yes">
          <source>The hero form uses the &lt;code&gt;.ng-valid&lt;/code&gt; and &lt;code&gt;.ng-invalid&lt;/code&gt; classes to set the color of each form control's border.</source>
          <target state="translated">ヒーローフォームは、 &lt;code&gt;.ng-valid&lt;/code&gt; および &lt;code&gt;.ng-invalid&lt;/code&gt; クラスを使用して、各フォームコントロールの境界線の色を設定します。</target>
        </trans-unit>
        <trans-unit id="21d7974b34602306dfbd0d2ab859c721b4a0b3f4" translate="yes">
          <source>The hero items in the &lt;code&gt;HeroesComponent&lt;/code&gt; are &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements whose click events are bound to the component's &lt;code&gt;onSelect()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; 内のヒーローアイテムは、クリックイベントがコンポーネントの &lt;code&gt;onSelect()&lt;/code&gt; メソッドにバインドされている &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素です。</target>
        </trans-unit>
        <trans-unit id="592678c7214943d825426d0e4505fa4a585ef418" translate="yes">
          <source>The hero must choose one superpower from a fixed list of agency-approved powers. You maintain that list internally (in &lt;code&gt;HeroFormComponent&lt;/code&gt;).</source>
          <target state="translated">主人公は、機関が承認した権限の固定リストから1つの超大国を選択する必要があります。 そのリストを内部的に（ &lt;code&gt;HeroFormComponent&lt;/code&gt; で ）維持します。</target>
        </trans-unit>
        <trans-unit id="473bad574572a351e437cb9cd6317f908f41d643" translate="yes">
          <source>The hero routes are currently defined in &lt;em&gt;two&lt;/em&gt; places: in the &lt;code&gt;HeroesRoutingModule&lt;/code&gt;, by way of the &lt;code&gt;HeroesModule&lt;/code&gt;, and in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">現在、ヒーローのルートは、 &lt;code&gt;HeroesRoutingModule&lt;/code&gt; 、 &lt;code&gt;HeroesModule&lt;/code&gt; 経由 、およびAppRoutingModuleの &lt;em&gt;2つの&lt;/em&gt;場所で定義されてい &lt;code&gt;AppRoutingModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ea57673d1088103c595c56fde675da1370e3de5" translate="yes">
          <source>The heroes feature has two interacting components, the hero list and the hero detail. The list view is self-sufficient; you navigate to it, it gets a list of heroes and displays them.</source>
          <target state="translated">ヒーロー機能には、相互作用する2つのコンポーネント、ヒーローリストとヒーロー詳細があります。 リストビューは自己完結型です。 そこにナビゲートすると、ヒーローのリストを取得して表示します。</target>
        </trans-unit>
        <trans-unit id="f0c577a68776a18a7768c488dfda878388c07de5" translate="yes">
          <source>The heroes feature module is almost complete, but what is a feature without some smooth transitions?</source>
          <target state="translated">ヒーローの機能モジュールはほぼ完成していますが、スムーズな移行を伴わない機能とは何ですか？</target>
        </trans-unit>
        <trans-unit id="79f13609e0fe6dc3309e380f997fe13b9aeef97b" translate="yes">
          <source>The heroes list should be attractive and should respond visually when users hover over and select a hero from the list.</source>
          <target state="translated">ヒーローリストは魅力的である必要があり、ユーザーがホバーしてリストからヒーローを選択すると視覚的に応答する必要があります。</target>
        </trans-unit>
        <trans-unit id="d763cf67760997b5781cdf955015acbbec99c511" translate="yes">
          <source>The heroes web API expects a special header in HTTP save requests. That header is in the &lt;code&gt;httpOptions&lt;/code&gt; constant defined in the &lt;code&gt;HeroService&lt;/code&gt;. Add the following to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">heroes Web APIは、HTTPセーブリクエストに特別なヘッダーが必要です。 そのヘッダーは、 &lt;code&gt;httpOptions&lt;/code&gt; 定義された &lt;code&gt;HeroService&lt;/code&gt; 定数にあります 。 &lt;code&gt;HeroService&lt;/code&gt; クラスに次を追加します。</target>
        </trans-unit>
        <trans-unit id="608f0a4d7c94f588eb779efe72dc12c1fb0cf77f" translate="yes">
          <source>The host &lt;code&gt;OnChangesParentComponent&lt;/code&gt; binds to them like this:</source>
          <target state="translated">ホスト &lt;code&gt;OnChangesParentComponent&lt;/code&gt; は、次のようにそれらにバインドします。</target>
        </trans-unit>
        <trans-unit id="d475d2c0839b834e5922c40096508e379732daa1" translate="yes">
          <source>The host dependency injector. For example, the root element's component instance injector.</source>
          <target state="translated">ホスト依存性インジェクター。 たとえば、ルート要素のコンポーネントインスタンスインジェクター。</target>
        </trans-unit>
        <trans-unit id="2bd45aa129171fd60686da527ebfb1ef5a231daf" translate="yes">
          <source>The host or anchor &lt;a href=&quot;../../guide/glossary#element&quot;&gt;element&lt;/a&gt; for this component instance.</source>
          <target state="translated">このコンポーネントインスタンスのホストまたはアンカー&lt;a href=&quot;../../guide/glossary#element&quot;&gt;要素&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="61778c1078d4aebe3161ba35e60e62c15c8e7eba" translate="yes">
          <source>The i18n template translation process has four phases:</source>
          <target state="translated">i18nテンプレートの翻訳プロセスには4つのフェーズがあります。</target>
        </trans-unit>
        <trans-unit id="3bb0192b3b6c38a7290682d21f4eba34e038374d" translate="yes">
          <source>The identities of elements in the iterator can change while the data does not. This can happen, for example, if the iterator is produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response produces objects with different identities, and Angular must tear down the entire DOM and rebuild it (as if all old elements were deleted and all new elements inserted).</source>
          <target state="translated">反復子の要素のIDは変更できますが、データは変更できません。 これは、たとえば、反復子がRPCからサーバーに生成され、そのRPCが再実行される場合に発生する可能性があります。 データが変更されていない場合でも、2番目の応答は異なるIDのオブジェクトを生成し、AngularはDOM全体を破棄して再構築する必要があります（すべての古い要素が削除され、すべての新しい要素が挿入されたかのように）。</target>
        </trans-unit>
        <trans-unit id="ac727768ada490816c6d8682036d5ff4e29f9e9f" translate="yes">
          <source>The identity validator implements the &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; interface. It takes an Angular control object as an argument and returns either null if the form is valid, or &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="translated">IDバリデーターは &lt;code&gt;&lt;a href=&quot;../api/forms/validatorfn&quot;&gt;ValidatorFn&lt;/a&gt;&lt;/code&gt; インターフェースを実装します。 Angularコントロールオブジェクトを引数として受け取り、フォームが有効な場合はnullを返し、そうでない場合は &lt;code&gt;&lt;a href=&quot;../api/forms/validationerrors&quot;&gt;ValidationErrors&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1244038c275380a06d0292b3f58a8b0808bee9d4" translate="yes">
          <source>The immediate &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; children. Walk the tree by descending through &lt;code&gt;children&lt;/code&gt;.</source>
          <target state="translated">直接の &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; の子。 &lt;code&gt;children&lt;/code&gt; 降りて木を歩いてください。</target>
        </trans-unit>
        <trans-unit id="f77264c0b692bee3b01df77a4b0b94e2da9de660" translate="yes">
          <source>The immediate goal is to test the &lt;code&gt;DashboardHeroComponent&lt;/code&gt;, not the &lt;code&gt;DashboardComponent&lt;/code&gt;, so, try the second and third options.</source>
          <target state="translated">当面の目標は、 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; ではなくDashboardHeroComponentをテストすることなので、2番目と3番目のオプションを試してください。</target>
        </trans-unit>
        <trans-unit id="34262de4d07947d5d97708446c0ec864a64190a5" translate="yes">
          <source>The implementation in &lt;em&gt;this&lt;/em&gt; tutorial will continue to deliver &lt;em&gt;mock heroes&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;この&lt;/em&gt;チュートリアルの実装は&lt;em&gt;、&lt;/em&gt;引き続き&lt;em&gt;模擬ヒーロー&lt;/em&gt;を提供します。</target>
        </trans-unit>
        <trans-unit id="e94c2bbfc1793deccefaf24d2d6ac1efaedf0ef3" translate="yes">
          <source>The important bit in the &lt;code&gt;server.ts&lt;/code&gt; file is the &lt;code&gt;ngExpressEngine()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;server.ts&lt;/code&gt; ファイルの重要な部分は、 &lt;code&gt;ngExpressEngine()&lt;/code&gt; 関数です。</target>
        </trans-unit>
        <trans-unit id="4e58b37a7644668715bd2ab968359ab5ecae4a62" translate="yes">
          <source>The imported &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; symbol provides Angular the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">インポートされた &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; シンボルは、Angularに &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレータを提供します。</target>
        </trans-unit>
        <trans-unit id="5eeb64088704a52b165f30312582ba6990110783" translate="yes">
          <source>The imports at the top of the array are JavaScript import statements while the &lt;code&gt;imports&lt;/code&gt; array within &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; is Angular specific. For more information on the difference, see &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript Modules vs. NgModules&lt;/a&gt;.</source>
          <target state="translated">配列の最上部のインポートはJavaScriptインポートステートメントであり、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 内の &lt;code&gt;imports&lt;/code&gt; 配列はAngular固有です。 違いの詳細については、 &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScriptモジュールとNgModulesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8ad0735a040b2f744ace16714d841b50eb7a90b9" translate="yes">
          <source>The impure</source>
          <target state="translated">不純</target>
        </trans-unit>
        <trans-unit id="47a8f6ad06b99c5e37173f0330783e47b4a54b62" translate="yes">
          <source>The increment and decrement operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;</source>
          <target state="translated">インクリメントおよびデクリメント演算子 &lt;code&gt;++&lt;/code&gt; および &lt;code&gt;--&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01460b62b5e6cc1d2c666542b25ca8af1ab36172" translate="yes">
          <source>The index at which to insert the new component's host view into this container. If not specified, appends the new view as the last entry.</source>
          <target state="translated">このコンテナに新しいコンポーネントのホストビューを挿入するインデックス。 指定しない場合、最後のエントリとして新しいビューを追加します。</target>
        </trans-unit>
        <trans-unit id="28088325c17c4696121e5d42d44e8ba470905c1b" translate="yes">
          <source>The individual form controls are now collected within a group. A &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance provides its model value as an object reduced from the values of each control in the group. A form group instance has the same properties (such as &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;untouched&lt;/code&gt;) and methods (such as &lt;code&gt;setValue()&lt;/code&gt;) as a form control instance.</source>
          <target state="translated">個々のフォームコントロールは、グループ内で収集されるようになりました。 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンスは、モデル値を、グループ内の各コントロールの値から削減されたオブジェクトとして提供します。 フォームグループインスタンスには、フォームコントロールインスタンスと同じプロパティ（ &lt;code&gt;value&lt;/code&gt; や &lt;code&gt;setValue()&lt;/code&gt; など）とメソッド（ setValue（）など）があります。</target>
        </trans-unit>
        <trans-unit id="7b9f0a384d42c6657ae3c3a445c88ae80d87dd5f" translate="yes">
          <source>The initial &lt;code&gt;size&lt;/code&gt; is an input value from a property binding. Clicking the buttons increases or decreases the &lt;code&gt;size&lt;/code&gt;, within min/max value constraints, and then raises, or emits, the &lt;code&gt;sizeChange&lt;/code&gt; event with the adjusted size.</source>
          <target state="translated">初期 &lt;code&gt;size&lt;/code&gt; は、プロパティバインディングからの入力値です。 ボタンをクリックすると、最小値/最大値の制約内で &lt;code&gt;size&lt;/code&gt; が増減し、調整されたサイズで &lt;code&gt;sizeChange&lt;/code&gt; イベントが発生または発生します。</target>
        </trans-unit>
        <trans-unit id="f4f9e997670b8acc1e6bb32a313594d221ffead4" translate="yes">
          <source>The initial &lt;code&gt;tsconfig.json&lt;/code&gt; for an Angular app typically looks like this example:</source>
          <target state="translated">Angularアプリの最初の &lt;code&gt;tsconfig.json&lt;/code&gt; は通常、次の例のようになります。</target>
        </trans-unit>
        <trans-unit id="9b0d2a1d3adcf62fd7edfaae947dfbf0fa526cbd" translate="yes">
          <source>The initial admin routing configuration:</source>
          <target state="translated">初期管理ルーティング構成：</target>
        </trans-unit>
        <trans-unit id="5c133f6e7cbbe3a8e6d914657ad0e65a743fcb2c" translate="yes">
          <source>The initial app created by &lt;code&gt;ng new&lt;/code&gt; is at the top level of the workspace file structure.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; によって作成された最初のアプリは、ワークスペースファイル構造の最上位にあります。</target>
        </trans-unit>
        <trans-unit id="7b9c95f356d9d8aaf3b5a580d30becc255eceae3" translate="yes">
          <source>The initial app project contains a simple Welcome app, ready to run.</source>
          <target state="translated">最初のアプリプロジェクトには、すぐに実行できるシンプルなWelcomeアプリが含まれています。</target>
        </trans-unit>
        <trans-unit id="1c618598365a8b0089eeb0d06f473e1e7f5e9801" translate="yes">
          <source>The initial app that you create with &lt;code&gt;ng new app_name&lt;/code&gt; is listed under &quot;projects&quot;:</source>
          <target state="translated">&lt;code&gt;ng new app_name&lt;/code&gt; で作成した最初のアプリは、「プロジェクト」の下にリストされます。</target>
        </trans-unit>
        <trans-unit id="fccb43ed5c07fe0c3365da2b045c6f6d6ee71c9c" translate="yes">
          <source>The initial schema that you have created tells the CLI where to find the schematic that supports the &lt;code&gt;ng add&lt;/code&gt; command. Now you are ready to create that schematic.</source>
          <target state="translated">作成した初期スキーマは、 &lt;code&gt;ng add&lt;/code&gt; コマンドをサポートする回路図の場所をCLIに指示します。 これで、回路図を作成する準備が整いました。</target>
        </trans-unit>
        <trans-unit id="274d6987906a4ae7a1535a899b14ab18fe115084" translate="yes">
          <source>The initial schematic gets the same name as the project folder, and is generated in &lt;code&gt;src/hello-world&lt;/code&gt;. You can add related schematics to this collection, and modify the generated skeleton code to define your schematic's functionality. Each schematic name must be unique within the collection.</source>
          <target state="translated">最初の回路図はプロジェクトフォルダーと同じ名前を取得し、 &lt;code&gt;src/hello-world&lt;/code&gt; 生成されます 。 関連する回路図をこのコレクションに追加し、生成されたスケルトンコードを変更して、回路図の機能を定義できます。 各回路図名は、コレクション内で一意である必要があります。</target>
        </trans-unit>
        <trans-unit id="fe3d0e9c54c6b1dffc213d25bb122ab550dcfc75" translate="yes">
          <source>The injection token for the event-manager plug-in service.</source>
          <target state="translated">イベントマネージャープラグインサービスのインジェクショントークン。</target>
        </trans-unit>
        <trans-unit id="1383ded669e589d4e6653269a2fad194b6361cf5" translate="yes">
          <source>The injector determines the starting location in the logical tree and an ending location of the search. The injector begins with the starting location and looks for the token at each level in the logical tree. If the token is found it is returned.</source>
          <target state="translated">インジェクターは、論理ツリーの開始位置と検索の終了位置を決定します。 インジェクターは開始位置から始まり、論理ツリーの各レベルでトークンを探します。 トークンが見つかった場合は返されます。</target>
        </trans-unit>
        <trans-unit id="909976c4bf2fdb45732e4e4857727780da327ef6" translate="yes">
          <source>The injector is responsible for creating service instances and injecting them into classes like &lt;code&gt;HeroListComponent&lt;/code&gt;. You rarely create an Angular injector yourself. Angular creates injectors for you as it executes the app, starting with the &lt;em&gt;root injector&lt;/em&gt; that it creates during the &lt;a href=&quot;bootstrapping&quot;&gt;bootstrap process&lt;/a&gt;.</source>
          <target state="translated">インジェクターは、サービスインスタンスを作成し、それらを &lt;code&gt;HeroListComponent&lt;/code&gt; などのクラスに注入する役割を果たします。 自分でAngularインジェクターを作成することはめったにありません。 Angularは、 &lt;a href=&quot;bootstrapping&quot;&gt;ブートストラッププロセス&lt;/a&gt;中に作成した&lt;em&gt;ルートインジェクター&lt;/em&gt;から開始して、アプリを実行するときに&lt;em&gt;インジェクター&lt;/em&gt;を作成します 。</target>
        </trans-unit>
        <trans-unit id="391362c6611913ba88dda520d9dcb87894ef5621" translate="yes">
          <source>The injector needs providers for both this new logging service and its dependent &lt;code&gt;UserService&lt;/code&gt;. Configure this alternative logger with the &lt;code&gt;useClass&lt;/code&gt; provider-definition key, like &lt;code&gt;BetterLogger&lt;/code&gt;. The following array specifies both providers in the &lt;code&gt;providers&lt;/code&gt; metadata option of the parent module or component.</source>
          <target state="translated">インジェクターには、この新しいロギングサービスとその依存 &lt;code&gt;UserService&lt;/code&gt; の両方のプロバイダーが必要です。 &lt;code&gt;useClass&lt;/code&gt; プロバイダー定義キーを使用して、この代替ロガーを構成します。 次の配列は、親モジュールまたはコンポーネントの &lt;code&gt;providers&lt;/code&gt; メタデータオプションで両方のプロバイダーを指定します。</target>
        </trans-unit>
        <trans-unit id="6dc65614e224404ed54dd6ea0d9ada092c4337fc" translate="yes">
          <source>The injector provides the dependency value by invoking a factory function, that you provide as the value of the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; key. Notice that this form of provider has a third key, &lt;code&gt;deps&lt;/code&gt;, which specifies dependencies for the &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">インジェクターは、ファクトリー関数を呼び出すことにより依存値を提供します。これは、 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; キーの値として提供します。 この形式のプロバイダーには、 &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 関数の依存関係を指定する3番目のキー &lt;code&gt;deps&lt;/code&gt; があることに注意してください 。</target>
        </trans-unit>
        <trans-unit id="c95f5722ed83490db02364ac66c92b54bf76fcb4" translate="yes">
          <source>The injector that contains all of the providers of the NgModule.</source>
          <target state="translated">NgModuleのすべてのプロバイダーを含むインジェクター。</target>
        </trans-unit>
        <trans-unit id="81535b8cfa3709335ca6968ad04963647fb0e43c" translate="yes">
          <source>The injector to use as the parent for the new component.</source>
          <target state="translated">新しいコンポーネントの親として使用するインジェクター。</target>
        </trans-unit>
        <trans-unit id="e753944a9f0476e23faa1642765ef1111249bf50" translate="yes">
          <source>The injector to use for retrieving the component's factory.</source>
          <target state="translated">コンポーネントのファクトリーを取得するために使用するインジェクター。</target>
        </trans-unit>
        <trans-unit id="e9818ffe0b5312214e6049d23aa468b35f9eca71" translate="yes">
          <source>The inner, &lt;code&gt;class-skeleton&lt;/code&gt; region appears twice, once to capture the code that opens the class definition and once to capture the code that closes the class definition.</source>
          <target state="translated">内側の &lt;code&gt;class-skeleton&lt;/code&gt; 領域は2回表示されます。1回はクラス定義を開くコードをキャプチャするため、もう1回はクラス定義を閉じるコードをキャプチャするためです。</target>
        </trans-unit>
        <trans-unit id="97d15b5fd5023fac9a06d495428eae8299fd604c" translate="yes">
          <source>The input element emits an &quot;input&quot; event with the value &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">input要素は、値が&lt;em&gt;Blueの&lt;/em&gt; 「input」イベントを&lt;em&gt;発行し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="45f218bc069eb983ea0aa82f12ad5468e38fbc56" translate="yes">
          <source>The inputs of the component.</source>
          <target state="translated">コンポーネントの入力。</target>
        </trans-unit>
        <trans-unit id="9ef9848eb3b4dd6a2af93f2352e54e04d6d6e735" translate="yes">
          <source>The instance of the component class created by &lt;code&gt;TestBed.createComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TestBed.createComponent&lt;/code&gt; によって作成されたコンポーネントクラスのインスタンス。</target>
        </trans-unit>
        <trans-unit id="c42b5877f82b6791369b1b504388d13d671ec5cd" translate="yes">
          <source>The instance of the root component class.</source>
          <target state="translated">ルートコンポーネントクラスのインスタンス。</target>
        </trans-unit>
        <trans-unit id="796a3b1682a165dd05dc7257a0f42400175385a8" translate="yes">
          <source>The instance to convert.</source>
          <target state="translated">変換するインスタンス。</target>
        </trans-unit>
        <trans-unit id="f38cf766ca85d67c16df92fd25bac9022b740c83" translate="yes">
          <source>The interesting part of the URL follows the &lt;code&gt;...&lt;/code&gt;:</source>
          <target state="translated">URLの興味深い部分は &lt;code&gt;...&lt;/code&gt; に続きます 。</target>
        </trans-unit>
        <trans-unit id="702e5fcb69842a35326d93ae27b71240dfadc43a" translate="yes">
          <source>The interfaces are optional for JavaScript and Typescript developers from a purely technical perspective. The JavaScript language doesn't have interfaces. Angular can't see TypeScript interfaces at runtime because they disappear from the transpiled JavaScript.</source>
          <target state="translated">インターフェイスは、純粋に技術的な観点から、JavaScriptおよびTypescript開発者にとってオプションです。 JavaScript言語にはインターフェースがありません。 Angularは、変換されたJavaScriptから消えるため、実行時にTypeScriptインターフェースを見ることができません。</target>
        </trans-unit>
        <trans-unit id="73fe62cb28dec38fb5ac135676c55e085cff63ba" translate="yes">
          <source>The internal &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">内部 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="64d50ef5373d507409c34fbaedaf9a35c68a6991" translate="yes">
          <source>The internal Architect tool delegates work to handler functions called &lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builders&lt;/em&gt;&lt;/a&gt;. A builder handler function receives two arguments; a set of input &lt;code&gt;options&lt;/code&gt; (a JSON object), and a &lt;code&gt;context&lt;/code&gt; (a &lt;code&gt;BuilderContext&lt;/code&gt; object).</source>
          <target state="translated">内部のArchitectツールは、 &lt;a href=&quot;glossary#builder&quot;&gt;&lt;em&gt;builder&lt;/em&gt;&lt;/a&gt;と呼ばれるハンドラー関数に作業を委任します。 ビルダーハンドラー関数は2つの引数を受け取ります。 入力 &lt;code&gt;options&lt;/code&gt; セット（JSONオブジェクト）、および &lt;code&gt;context&lt;/code&gt; （ &lt;code&gt;BuilderContext&lt;/code&gt; オブジェクト）。</target>
        </trans-unit>
        <trans-unit id="1b4b0b78851e7752da5d2f642ad23a0e8de7822f" translate="yes">
          <source>The interpolation braces in &lt;code&gt;{{1 + 1}}&lt;/code&gt; surround the template expression &lt;code&gt;1 + 1&lt;/code&gt;. In the property binding, a template expression appears in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{1 + 1}}&lt;/code&gt; の補間ブレースは、テンプレート式 &lt;code&gt;1 + 1&lt;/code&gt; を囲みます。 プロパティバインディングでは、テンプレート式が &lt;code&gt;[property]=&quot;expression&quot;&lt;/code&gt; ように &lt;code&gt;=&lt;/code&gt; 記号の右側に引用符で囲まれて表示されます。</target>
        </trans-unit>
        <trans-unit id="93f9b2c51a7af4c4eb35603e8cb48e22004d9e33" translate="yes">
          <source>The interpolation live example demonstrates all of the syntax and code snippets described in this section.</source>
          <target state="translated">補間ライブの例は、このセクションで説明されているすべての構文とコードスニペットを示しています。</target>
        </trans-unit>
        <trans-unit id="c6187909f50cd0be17663a5d887e024df5706953" translate="yes">
          <source>The item.</source>
          <target state="translated">アイテム。</target>
        </trans-unit>
        <trans-unit id="b27c5c8196dbfc8a53c04f22e7d7da67c2563040" translate="yes">
          <source>The key is a supported event name to be configured, and the options object contains a set of properties, with override values to be applied to the named recognizer event. For example, to disable recognition of the rotate event, specify &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt;.</source>
          <target state="translated">キーは構成するサポートされているイベント名であり、optionsオブジェクトには一連のプロパティが含まれ、指定された認識エンジンイベントにオーバーライド値が適用されます。 たとえば、rotateイベントの認識を無効にするには、 &lt;code&gt;{&quot;rotate&quot;: {&quot;enable&quot;: false}}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3afe8949a36dd6edcd0b52b40e17cb1882c7d22a" translate="yes">
          <source>The key is the DOM event that the directive listens to. To listen to global events, add the target to the event name. The target can be &lt;code&gt;window&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt;.</source>
          <target state="translated">キーは、ディレクティブがリッスンするDOMイベントです。 グローバルイベントをリッスンするには、イベント名にターゲットを追加します。 ターゲットは、 &lt;code&gt;window&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;body&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7889af82f4b022dadb547ae2824efe7a6bb47207" translate="yes">
          <source>The key is to make the code more reusable, easier to read, and less mistake prone.</source>
          <target state="translated">重要なのは、コードをより再利用可能にし、読みやすくし、ミスを起こしにくくすることです。</target>
        </trans-unit>
        <trans-unit id="cdbe02fa8964f612bbf73ee656e19f8d119c6afa" translate="yes">
          <source>The key name.</source>
          <target state="translated">キー名。</target>
        </trans-unit>
        <trans-unit id="d0fa848ad3856bedad82e6c7874b70da382521e0" translate="yes">
          <source>The key point here is that you have to export it so you can import it elsewhere. Next, import it into the NgModule, in this example &lt;code&gt;app.module.ts&lt;/code&gt;, with a JavaScript import statement:</source>
          <target state="translated">ここで重要なのは、他の場所にインポートできるようにエクスポートする必要があるということです。 次に、JavaScript importステートメントを使用して、 &lt;code&gt;app.module.ts&lt;/code&gt; にインポートします（この例ではapp.module.ts ）。</target>
        </trans-unit>
        <trans-unit id="5da31d71b1f60f0adaeccb267bd7eb24f7673f75" translate="yes">
          <source>The key point is that you control the hero job application questions entirely through the objects returned from &lt;code&gt;QuestionService&lt;/code&gt;. Questionnaire maintenance is a simple matter of adding, updating, and removing objects from the &lt;code&gt;questions&lt;/code&gt; array.</source>
          <target state="translated">重要な点は、 &lt;code&gt;QuestionService&lt;/code&gt; から返されたオブジェクトを通じて、ヒーロージョブアプリケーションの質問を完全に制御することです。 アンケートの保守は、オブジェクトを &lt;code&gt;questions&lt;/code&gt; 配列に追加、更新、削除するだけの簡単な問題です。</target>
        </trans-unit>
        <trans-unit id="5d0681bffbfdd03e7e32f7464f13ef4c498fb543" translate="yes">
          <source>The key takeaway is that when binding to a child component's property in a parent component&amp;mdash;that is, what's in square brackets&amp;mdash;you must decorate the property with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component.</source>
          <target state="translated">重要な点は、親コンポーネントの子コンポーネントのプロパティにバインドするとき（つまり、角括弧で囲まれたもの &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 、子コンポーネントの@ &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt; （）でプロパティを装飾する必要があることです。</target>
        </trans-unit>
        <trans-unit id="6c5cd796012caba3f50ab44f1a501f9433b217c1" translate="yes">
          <source>The key thing to understand about a hybrid application is that every element in the DOM is owned by exactly one of the two frameworks. The other framework ignores it. If an element is owned by AngularJS, Angular treats it as if it didn't exist, and vice versa.</source>
          <target state="translated">ハイブリッドアプリケーションについて理解する重要なことは、DOMのすべての要素が2つのフレームワークのいずれか1つによって正確に所有されていることです。 他のフレームワークはそれを無視します。 要素がAngularJSに所有されている場合、Angularはそれが存在しないかのように処理し、逆も同様です。</target>
        </trans-unit>
        <trans-unit id="82a5cbcd9ee629368a7dbf46b633770937978193" translate="yes">
          <source>The keyword to search for, as provided in the search bar in angular.io.</source>
          <target state="translated">angle.ioの検索バーで提供される、検索するキーワード。</target>
        </trans-unit>
        <trans-unit id="7139f105d9119f519815353fa125bb9a5a6a2aef" translate="yes">
          <source>The language is simply HTML5. You're presenting two of the &lt;code&gt;Hero&lt;/code&gt; fields, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;alterEgo&lt;/code&gt;, and opening them up for user input in input boxes.</source>
          <target state="translated">言語は単純にHTML5です。 &lt;code&gt;Hero&lt;/code&gt; フィールドの2つ、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;alterEgo&lt;/code&gt; を提示し 、それらを入力ボックスでのユーザー入力用に開きます。</target>
        </trans-unit>
        <trans-unit id="feb75538a2560e199fdfa7762dd5353f05b9f3bf" translate="yes">
          <source>The last line of the log is the most important. It shows that Karma ran three tests that all passed.</source>
          <target state="translated">ログの最後の行が最も重要です。 Karmaが3つのテストを実行し、すべてが合格したことを示しています。</target>
        </trans-unit>
        <trans-unit id="a7b74ae411865b1ed27412a302e7dcc77c02a30f" translate="yes">
          <source>The last step, verifying that no requests remain outstanding, is common enough for you to move it into an &lt;code&gt;afterEach()&lt;/code&gt; step:</source>
          <target state="translated">未処理の要求が残っていないことを確認する最後のステップは、 &lt;code&gt;afterEach()&lt;/code&gt; ステップに移動するのに十分な一般的なものです。</target>
        </trans-unit>
        <trans-unit id="6634b9650ac8fa95d9ff2877842e12f8d187606e" translate="yes">
          <source>The last update tick/run counters give the time since specific events happened related to the idle queue. The &quot;Last update run&quot; counter shows the last time idle tasks were actually executed. &quot;Last update tick&quot; shows the time since the last event after which the queue might be processed.</source>
          <target state="translated">最終更新ティック/実行カウンターは、アイドルキューに関連する特定のイベントが発生してからの時間を示します。 「最後の更新の実行」カウンターは、アイドルタスクが実際に実行された最後の時間を示します。 「最終更新ティック」には、最後のイベントからキューが処理されるまでの時間が表示されます。</target>
        </trans-unit>
        <trans-unit id="7505ed32fffc9d3847991eef5fbba124922106c7" translate="yes">
          <source>The lazy loaded scenario</source>
          <target state="translated">遅延読み込みのシナリオ</target>
        </trans-unit>
        <trans-unit id="c3bdd32d919036a2592743a6c73032960479a538" translate="yes">
          <source>The lazy loading and re-configuration happen just once, when the route is &lt;em&gt;first&lt;/em&gt; requested; the module and routes are available immediately for subsequent requests.</source>
          <target state="translated">遅延読み込みと再構成は、ルートが&lt;em&gt;最初に&lt;/em&gt;要求されたときに一度だけ行われます。 モジュールとルートは、後続のリクエストですぐに利用できます。</target>
        </trans-unit>
        <trans-unit id="c57c903a85bd033e12fde20ee11764d762c10386" translate="yes">
          <source>The library must be rebuilt on every change. When linking a library, make sure that the build step runs in watch mode, and that the library's &lt;code&gt;package.json&lt;/code&gt; configuration points at the correct entry points. For example, &lt;code&gt;main&lt;/code&gt; should point at a JavaScript file, not a TypeScript file.</source>
          <target state="translated">ライブラリは、変更のたびに再構築する必要があります。 ライブラリをリンクするときは、ビルドステップが監視モードで実行され、ライブラリの &lt;code&gt;package.json&lt;/code&gt; 構成が正しいエントリポイントを指していることを確認してください。 たとえば、 &lt;code&gt;main&lt;/code&gt; はTypeScriptファイルではなくJavaScriptファイルを指す必要があります。</target>
        </trans-unit>
        <trans-unit id="44499b604f2c8a7fb9248b301fa86fbddbe0d759" translate="yes">
          <source>The links are styled as colored blocks by the &lt;code&gt;dashboard.component.css&lt;/code&gt;.</source>
          <target state="translated">リンクは、 &lt;code&gt;dashboard.component.css&lt;/code&gt; によって色付きブロックとしてスタイル設定されます。</target>
        </trans-unit>
        <trans-unit id="70f5c6325d761fe1e544503d9e54f38c460d44c0" translate="yes">
          <source>The links don't go anywhere yet but &lt;a href=&quot;toh-pt5#hero-details&quot;&gt;they will shortly&lt;/a&gt;.</source>
          <target state="translated">リンクはまだどこにも行きませんが&lt;a href=&quot;toh-pt5#hero-details&quot;&gt;、まもなく&lt;/a&gt;行くでしょう 。</target>
        </trans-unit>
        <trans-unit id="1a2bdb6c32f442bc5dc6ab7fffdac703a44af59c" translate="yes">
          <source>The linting configuration to use.</source>
          <target state="translated">使用するリンティング設定。</target>
        </trans-unit>
        <trans-unit id="cb5b67e650373461ed8bddbd8ff4e58af97dc7be" translate="yes">
          <source>The list of async validators applied to control.</source>
          <target state="translated">コントロールに適用される非同期検証のリスト。</target>
        </trans-unit>
        <trans-unit id="a0b532d757d03e389d179b94a37fe57febba7478" translate="yes">
          <source>The list of children of this group</source>
          <target state="translated">このグループの子のリスト</target>
        </trans-unit>
        <trans-unit id="795b91e111cdd26a419fb100996cd8d6c70ea1eb" translate="yes">
          <source>The list of heroes is unchanged. No hero row is highlighted.</source>
          <target state="translated">ヒーローのリストは変更されていません。 ヒーロー行は強調表示されません。</target>
        </trans-unit>
        <trans-unit id="49857ea47c4cab38f72361229ffb02aa45872afe" translate="yes">
          <source>The list of heroes.</source>
          <target state="translated">ヒーローのリスト。</target>
        </trans-unit>
        <trans-unit id="5fa24d8b936262f7c95d2d68e29587ae556a36db" translate="yes">
          <source>The list of validators applied to a control.</source>
          <target state="translated">コントロールに適用されるバリデーターのリスト。</target>
        </trans-unit>
        <trans-unit id="0aadeca54e3dfecbee61ea33dcad37c9d04279da" translate="yes">
          <source>The live example &lt;em&gt;does&lt;/em&gt; highlight the selected row because it demonstrates the final state of the application which includes the steps you're &lt;em&gt;about&lt;/em&gt; to cover. At the moment this guide is describing the state of affairs &lt;em&gt;prior&lt;/em&gt; to those steps.</source>
          <target state="translated">ライブの例では、対象のステップを含むアプリケーションの最終状態を示すため、選択した行&lt;em&gt;が&lt;/em&gt;強調表示されます。 現時点では、このガイドでは、これらの手順を実行する&lt;em&gt;前&lt;/em&gt;の状況について説明しています。</target>
        </trans-unit>
        <trans-unit id="901614f59731b265c4298a51f6591ca36d90b9ba" translate="yes">
          <source>The live example demonstrates all of the syntax and code snippets described in this page.</source>
          <target state="translated">ライブの例は、このページで説明されているすべての構文とコードスニペットを示しています。</target>
        </trans-unit>
        <trans-unit id="7c99dbd847d2edb666ec41151e3e184ee3bbc26b" translate="yes">
          <source>The live example demonstrates the lifecycle hooks in action through a series of exercises presented as components under the control of the root &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">ライブの例では、ルート &lt;code&gt;AppComponent&lt;/code&gt; の制御下でコンポーネントとして提示される一連の演習を通じて、動作中のライフサイクルフックを示します。</target>
        </trans-unit>
        <trans-unit id="8e604124b200d483830f1b601a11ceaa96f50692" translate="yes">
          <source>The locale (&lt;code&gt;fr&lt;/code&gt; or &lt;code&gt;en-US&lt;/code&gt; for instance).</source>
          <target state="translated">ロケール（たとえば、 &lt;code&gt;fr&lt;/code&gt; または &lt;code&gt;en-US&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bc0d61c0534e7b5e89350cd2ca0eac665647cb36" translate="yes">
          <source>The locale code.</source>
          <target state="translated">ロケールコード。</target>
        </trans-unit>
        <trans-unit id="dd0ba90791fe2c1551d163b9e264ade3c06599d7" translate="yes">
          <source>The locale identifiers used by CLDR and Angular are based on &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;. These specifications change over time; the following table maps previous identifiers to current ones at time of writing:</source>
          <target state="translated">CLDRおよびAngularで使用されるロケール識別子は、 &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47に&lt;/a&gt;基づいています 。 これらの仕様は時間とともに変化します。 次の表は、執筆時点で以前の識別子を現在の識別子にマップしています。</target>
        </trans-unit>
        <trans-unit id="3654c4df9d402ec66e65601b3977777d4df35e6d" translate="yes">
          <source>The location strategy.</source>
          <target state="translated">ロケーション戦略。</target>
        </trans-unit>
        <trans-unit id="7b62a0bd0b13a459b84264c8b7eac3dce9b81198" translate="yes">
          <source>The log entries appear as the string value of the &lt;em&gt;power&lt;/em&gt; property changes. But the &lt;code&gt;ngOnChanges&lt;/code&gt; does not catch changes to &lt;code&gt;hero.name&lt;/code&gt; That's surprising at first.</source>
          <target state="translated">&lt;em&gt;電源&lt;/em&gt;プロパティの文字列値が変更されると、ログエントリが表示されます。 しかし、 &lt;code&gt;ngOnChanges&lt;/code&gt; はhero.nameの変更をキャッチしません。最初は驚くことです。</target>
        </trans-unit>
        <trans-unit id="5371caa0a34b7cd92da5480bcaa60ece14b870cf" translate="yes">
          <source>The logic tree for this example of &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; is as follows:</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; の例の論理ツリーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="17661a2f13ce821c0bf724013752f42c941fc3fb" translate="yes">
          <source>The logical tree looks like this with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; in &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">論理ツリーは、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; の &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; で次のようになります 。</target>
        </trans-unit>
        <trans-unit id="6c1735a0aa10b7541d3734c71e401644ee7a31a3" translate="yes">
          <source>The logical tree representation shows why this is:</source>
          <target state="translated">論理ツリー表現は、これが次の理由を示しています。</target>
        </trans-unit>
        <trans-unit id="1d531fc78d2d733781719c1f451152d073ed41f9" translate="yes">
          <source>The main Angular modules for animations are &lt;code&gt;@angular/animations&lt;/code&gt; and &lt;code&gt;@angular/platform-browser&lt;/code&gt;. When you create a new project using the CLI, these dependencies are automatically added to your project.</source>
          <target state="translated">アニメーションの主なAngularモジュールは &lt;code&gt;@angular/animations&lt;/code&gt; と &lt;code&gt;@angular/platform-browser&lt;/code&gt; 。 CLIを使用して新しいプロジェクトを作成すると、これらの依存関係がプロジェクトに自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="7263be48b2699ade73a8888b18237441585c4155" translate="yes">
          <source>The main CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;, contains a &lt;code&gt;fileReplacements&lt;/code&gt; section in the configuration for each build target, which allows you to replace any file with a target-specific version of that file. This is useful for including target-specific code or variables in a build that targets a specific environment, such as production or staging.</source>
          <target state="translated">メインのCLI構成ファイル、 &lt;code&gt;angular.json&lt;/code&gt; には、各ビルドターゲットの構成に &lt;code&gt;fileReplacements&lt;/code&gt; セクションが含まれています。これにより、任意のファイルをそのファイルのターゲット固有バージョンに置き換えることができます。 これは、実稼働やステージングなど、特定の環境をターゲットとするビルドにターゲット固有のコードまたは変数を含めるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bc356e186170cb322f0a32a7caaa8cd2b339ae78" translate="yes">
          <source>The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; or&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags here manually.</source>
          <target state="translated">誰かがサイトにアクセスしたときに提供されるメインのHTMLページ。 CLIは、アプリの構築時にすべてのJavaScriptファイルとCSSファイルを自動的に追加するため、通常、ここに &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; タグまたは&amp;lt;link&amp;gt;タグを手動で追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="17744529805032738d2ce1337233da25a724ce4c" translate="yes">
          <source>The main entry point for your application. Compiles the application with the &lt;a href=&quot;glossary#jit&quot;&gt;JIT compiler&lt;/a&gt; and bootstraps the application's root module (AppModule) to run in the browser. You can also use the &lt;a href=&quot;aot-compiler&quot;&gt;AOT compiler&lt;/a&gt; without changing any code by appending the &lt;code&gt;--aot&lt;/code&gt; flag to the CLI &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt; commands.</source>
          <target state="translated">アプリケーションのメインエントリポイント。 &lt;a href=&quot;glossary#jit&quot;&gt;JITコンパイラーで&lt;/a&gt;アプリケーションをコンパイルし、ブラウザーで実行するためにアプリケーションのルートモジュール（AppModule）をブートストラップします。 また、CLI &lt;code&gt;build&lt;/code&gt; および &lt;code&gt;serve&lt;/code&gt; コマンドに &lt;code&gt;--aot&lt;/code&gt; フラグを追加することにより、コードを変更せずに&lt;a href=&quot;aot-compiler&quot;&gt;AOTコンパイラー&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="d0f2908e2176918f5ec05936850fcaeb40f2aee6" translate="yes">
          <source>The main entry point for your unit tests, with some Angular-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">ユニットテストのメインエントリポイント。Angular固有の構成もあります。 通常、このファイルを編集する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5b6bdd0aa0401fe9344207ee1da20b9b5122cf9c" translate="yes">
          <source>The main entry point for your unit tests, with some library-specific configuration. You don't typically need to edit this file.</source>
          <target state="translated">いくつかのライブラリ固有の構成を使用した、単体テストのメインエントリポイント。 通常、このファイルを編集する必要はありません。</target>
        </trans-unit>
        <trans-unit id="82234ab06c7273360d9dcd17147814d4ef5d22aa" translate="yes">
          <source>The main form is visible from the start because the &lt;code&gt;submitted&lt;/code&gt; property is false until you submit the form, as this fragment from the &lt;code&gt;HeroFormComponent&lt;/code&gt; shows:</source>
          <target state="translated">&lt;code&gt;HeroFormComponent&lt;/code&gt; のこのフラグメントが示すように、フォームを送信するまで送信 &lt;code&gt;submitted&lt;/code&gt; プロパティはfalseであるため、メインフォームは最初から表示されます。</target>
        </trans-unit>
        <trans-unit id="89228ab70b4f42a9a833463f6fddc8df700cd69f" translate="yes">
          <source>The main section heading should be followed by a blank line and then the content for that heading.</source>
          <target state="translated">メインセクションの見出しの後に空白行が続き、その見出しの内容が続きます。</target>
        </trans-unit>
        <trans-unit id="bedc39e25a378ea1e74b444633eb2567c1be4edd" translate="yes">
          <source>The marble library constructs the corresponding observable, which the test sets as the &lt;code&gt;getQuote&lt;/code&gt; spy's return value.</source>
          <target state="translated">大理石ライブラリは、対応するオブザーバブルを構築します。これは、テストが &lt;code&gt;getQuote&lt;/code&gt; スパイの戻り値として設定します。</target>
        </trans-unit>
        <trans-unit id="c152d7d77841879fc15850ada302d9a7604f9a5f" translate="yes">
          <source>The markdown is as follows:</source>
          <target state="translated">マークダウンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8748eb03cd3a2a31a452da21e18e8fe67fa2c88f" translate="yes">
          <source>The markup for the above example is:</source>
          <target state="translated">上記の例のマークアップは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="82140eb18cda68dafbe96adfecdd4de9ecc691a0" translate="yes">
          <source>The match url, &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt;, will rewrite every request. You'll have to adjust this if you want some requests to get through, such as web API requests.</source>
          <target state="translated">一致URL &lt;code&gt;&amp;lt;match url=&quot;.*&quot; /&amp;gt;&lt;/code&gt; 、すべてのリクエストを書き換えます。 Web APIリクエストなど、いくつかのリクエストを通過させる場合は、これを調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ad0897b9ee03f741fd1c01511860b55ea1d75e0" translate="yes">
          <source>The matrix parameters associated with a segment</source>
          <target state="translated">セグメントに関連付けられたマトリックスパラメーター</target>
        </trans-unit>
        <trans-unit id="a76d5b3e6982be276ae88de5739d5fed54638bd2" translate="yes">
          <source>The matrix parameters scoped to this route</source>
          <target state="translated">このルートをスコープとするマトリックスパラメーター</target>
        </trans-unit>
        <trans-unit id="90e33c849863252496fc8d6d880afd0e291d9d8e" translate="yes">
          <source>The maximum threshold for error relative to the baseline.</source>
          <target state="translated">ベースラインに対するエラーの最大しきい値。</target>
        </trans-unit>
        <trans-unit id="53883cb7c75145e23e98e86bbe3bd3c7cc0a7688" translate="yes">
          <source>The maximum threshold for warning relative to the baseline.</source>
          <target state="translated">ベースラインに対する警告の最大しきい値。</target>
        </trans-unit>
        <trans-unit id="87bec61d846af1bc84cef595bb56f5dd04dd2458" translate="yes">
          <source>The messages will look better when you add the private CSS styles to &lt;code&gt;messages.component.css&lt;/code&gt; as listed in one of the &lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;&quot;final code review&quot;&lt;/a&gt; tabs below.</source>
          <target state="translated">以下の&lt;a href=&quot;toh-pt4#final-code-review&quot;&gt;「最終コードレビュー」&lt;/a&gt;タブの1つにリストされているように、プライベートCSSスタイルを &lt;code&gt;messages.component.css&lt;/code&gt; に追加すると、メッセージの外観が良くなります。</target>
        </trans-unit>
        <trans-unit id="f85700447fab8625b23e50aafd91dead8193e775" translate="yes">
          <source>The metadata for a component class associates it with a &lt;em&gt;template&lt;/em&gt; that defines a view. A template combines ordinary HTML with Angular &lt;em&gt;directives&lt;/em&gt; and &lt;em&gt;binding markup&lt;/em&gt; that allow Angular to modify the HTML before rendering it for display.</source>
          <target state="translated">コンポーネントクラスのメタデータは、ビューを定義する&lt;em&gt;テンプレートに&lt;/em&gt;関連付けます。 テンプレートは、Angularが表示用にレンダリングする前にHTMLを変更できるようにする、Angular &lt;em&gt;ディレクティブ&lt;/em&gt;と&lt;em&gt;バインディングマークアップ&lt;/em&gt;と通常のHTMLを組み合わせます。</target>
        </trans-unit>
        <trans-unit id="b6b4287af878accde817a3a3ec85445a29b32903" translate="yes">
          <source>The metadata for a component tells Angular where to get the major building blocks that it needs to create and present the component and its view. In particular, it associates a &lt;em&gt;template&lt;/em&gt; with the component, either directly with inline code, or by reference. Together, the component and its template describe a &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="translated">コンポーネントのメタデータは、コンポーネントとそのビューを作成して表示するために必要な主要なビルディングブロックを取得する場所をAngularに伝えます。 特に、インラインコードを直接使用するか、参照によって、 &lt;em&gt;テンプレート&lt;/em&gt;をコンポーネントに関連付けます。 コンポーネントとそのテンプレートは一緒に&lt;em&gt;ビューを&lt;/em&gt;記述し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f487cef4aac90b4da53c7fc9e447312b42cba73" translate="yes">
          <source>The metadata for a service class provides the information Angular needs to make it available to components through &lt;em&gt;dependency injection (DI)&lt;/em&gt;.</source>
          <target state="translated">サービスクラスのメタデータは、Angularが&lt;em&gt;依存性注入（DI）&lt;/em&gt;を通じてコン​​ポーネントで利用できるようにするために必要な情報を提供します。</target>
        </trans-unit>
        <trans-unit id="da2ac4fe5a7aeb6c5ff2fac4828b395f67c727b6" translate="yes">
          <source>The method is called &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; because you configure the router at the application's root level. The &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method supplies the service providers and directives needed for routing, and performs the initial navigation based on the current browser URL.</source>
          <target state="translated">アプリケーションのルートレベルでルーターを構成するため、このメソッドは &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; と呼ばれます。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドは、ルーティングに必要なサービスプロバイダーとディレクティブを提供し、現在のブラウザーのURLに基​​づいて初期ナビゲーションを実行します。</target>
        </trans-unit>
        <trans-unit id="f94bbf603605c0e2d8cf99c4a32636376256c78c" translate="yes">
          <source>The method returns immediately with an empty array if there is no search term. The rest of it closely resembles &lt;code&gt;getHeroes()&lt;/code&gt;, the only significant difference being the URL, which includes a query string with the search term.</source>
          <target state="translated">このメソッドは、検索語がない場合、空の配列ですぐに戻ります。 残りの部分は &lt;code&gt;getHeroes()&lt;/code&gt; 非常に似ていますが、唯一の重要な違いはURLであり、これには検索語を含むクエリ文字列が含まれます。</target>
        </trans-unit>
        <trans-unit id="b8bd6826e2d0fcb10e3e7991b3567fdd80af26cd" translate="yes">
          <source>The method that is called when the disabled status changes.</source>
          <target state="translated">無効ステータスが変更されたときに呼び出されるメソッド。</target>
        </trans-unit>
        <trans-unit id="ce97f7be34496d68074082adcce30ef92c9fdc1b" translate="yes">
          <source>The method that is called when the value changes</source>
          <target state="translated">値が変更されたときに呼び出されるメソッド</target>
        </trans-unit>
        <trans-unit id="6db6edec01a98f400bce87dd07f007a8049e3a79" translate="yes">
          <source>The methods now return observables of type &lt;code&gt;PhoneData&lt;/code&gt; and &lt;code&gt;PhoneData[]&lt;/code&gt;. This is a type you don't have yet. Add a simple interface for it:</source>
          <target state="translated">メソッドは、タイプ &lt;code&gt;PhoneData&lt;/code&gt; および &lt;code&gt;PhoneData[]&lt;/code&gt; オブザーバブルを返すようになりました 。 これはまだ持っていないタイプです。 シンプルなインターフェースを追加します：</target>
        </trans-unit>
        <trans-unit id="1f8e626c9a26aabb72b198cad89d9bbfb757820a" translate="yes">
          <source>The microsyntax parser title-cases all directives and prefixes them with the directive's attribute name, such as &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. For example, the &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; input properties, &lt;code&gt;of&lt;/code&gt; and &lt;code&gt;trackBy&lt;/code&gt;, become &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt;, respectively. That's how the directive learns that the list is &lt;code&gt;heroes&lt;/code&gt; and the track-by function is &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">microsyntaxパーサーは、すべてのディレクティブをタイトルケースし、ディレクティブの属性名（ &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; など）をプレフィックスとして付けます。 たとえば、 &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;trackBy&lt;/code&gt; のngFor入力プロパティは、それぞれ &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/ngforof#ngForTrackBy&quot;&gt;ngForTrackBy&lt;/a&gt;&lt;/code&gt; になります。 これは、リストが &lt;code&gt;heroes&lt;/code&gt; あり、トラックバイ関数が &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#trackById&quot;&gt;trackById&lt;/a&gt;&lt;/code&gt; であることをディレクティブが学習する方法です 。</target>
        </trans-unit>
        <trans-unit id="2f96b0734984c3136ba1534c85bf98f17087789f" translate="yes">
          <source>The microtasks queue is drained at the very start of this function and after any timer callback has been executed.</source>
          <target state="translated">マイクロタスクキューは、この関数の最初とタイマーコールバックが実行された後に排出されます。</target>
        </trans-unit>
        <trans-unit id="e526a37fcc75b530dfc85c73dede19ed15c064c6" translate="yes">
          <source>The minification hazard is also compelling, if less obvious. Imagine a sorting pipe applied to a list of heroes. The list might be sorted by hero &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;planet&lt;/code&gt; of origin properties in the following way:</source>
          <target state="translated">明らかでない場合、縮小の危険性も説得力があります。 ヒーローのリストに並べ替えパイプが適用されることを想像してください。 リストは、ヒーロー &lt;code&gt;name&lt;/code&gt; と起源の &lt;code&gt;planet&lt;/code&gt; のプロパティで次のようにソートされます。</target>
        </trans-unit>
        <trans-unit id="bd932f1b587e9efc31a4eaca3808cc0ea987cfe9" translate="yes">
          <source>The minimum requirement for developing Angular applications with Visual Studio is Update 3. Earlier versions do not follow the best practices for developing applications with TypeScript. To view your version of Visual Studio 2015, go to &lt;code&gt;Help | About Visual Studio&lt;/code&gt;.</source>
          <target state="translated">Visual StudioでAngularアプリケーションを開発するための最小要件はUpdate 3です。以前のバージョンは、TypeScriptでアプリケーションを開発するためのベストプラクティスに従っていません。 Visual Studio 2015のバージョンを表示するには、[ &lt;code&gt;Help | About Visual Studio&lt;/code&gt; Visual Studioについて 。</target>
        </trans-unit>
        <trans-unit id="68295edfe2e8f66e1f3a2395dc30f8973b6dac7d" translate="yes">
          <source>The minimum threshold for error relative to the baseline.</source>
          <target state="translated">ベースラインに対するエラーの最小しきい値。</target>
        </trans-unit>
        <trans-unit id="cd6ff93775e18fec4a2607b05a0e4e27b92ea554" translate="yes">
          <source>The minimum threshold for warning relative to the baseline.</source>
          <target state="translated">ベースラインに対する警告の最小しきい値。</target>
        </trans-unit>
        <trans-unit id="0b1963b4bbd40e94677e855aa6f7fa65aebec820" translate="yes">
          <source>The missing &lt;code&gt;FormsModule&lt;/code&gt;</source>
          <target state="translated">不足している &lt;code&gt;FormsModule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d2da31ed6256743738e7430a7ee34e71e732e9c" translate="yes">
          <source>The model matcher relies on AngularJS &lt;code&gt;ng-model&lt;/code&gt;</source>
          <target state="translated">モデルマッチャーは、AngularJS &lt;code&gt;ng-model&lt;/code&gt; に依存しています</target>
        </trans-unit>
        <trans-unit id="1b612c6bfda69609e1109102317e5bc624c35366" translate="yes">
          <source>The module ID of the module that contains the component. The component must be able to resolve relative URLs for templates and styles. SystemJS exposes the &lt;code&gt;__moduleName&lt;/code&gt; variable within each module. In CommonJS, this can be set to &lt;code&gt;module.id&lt;/code&gt;.</source>
          <target state="translated">コンポーネントを含むモジュールのモジュールID。 コンポーネントは、テンプレートとスタイルの相対URLを解決できる必要があります。 SystemJSは、各モジュール内で &lt;code&gt;__moduleName&lt;/code&gt; 変数を公開します。 CommonJSでは、これは &lt;code&gt;module.id&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="7d1e56193d42e549f91f73ce49b0feaa87bbedad" translate="yes">
          <source>The module ID to use for importing a flat module (when &lt;code&gt;flatModuleOutFile&lt;/code&gt; is true). References generated by the template compiler use this module name when importing symbols from the flat module. Ignored if &lt;code&gt;flatModuleOutFile&lt;/code&gt; is false.</source>
          <target state="translated">フラットモジュールのインポートに使用するモジュールID（ &lt;code&gt;flatModuleOutFile&lt;/code&gt; がtrueの場合）。 テンプレートコンパイラによって生成された参照は、フラットモジュールからシンボルをインポートするときにこのモジュール名を使用します。 &lt;code&gt;flatModuleOutFile&lt;/code&gt; がfalseの場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="5455a8d2855bb168b7bc39366f2e640359d610c2" translate="yes">
          <source>The module definition passed to &lt;code&gt;configureTestingModule&lt;/code&gt; is a subset of the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata properties.</source>
          <target state="translated">&lt;code&gt;configureTestingModule&lt;/code&gt; に渡されるモジュール定義は、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータプロパティのサブセットです。</target>
        </trans-unit>
        <trans-unit id="f9ff3126a97dd2fd2099d3e56f0696f54b70dd23" translate="yes">
          <source>The module's &lt;code&gt;declarations&lt;/code&gt; array tells Angular which components belong to that module. As you create more components, add them to &lt;code&gt;declarations&lt;/code&gt;.</source>
          <target state="translated">モジュールの &lt;code&gt;declarations&lt;/code&gt; 配列は、どのコンポーネントがそのモジュールに属するかをAngularに伝えます。 さらにコンポーネントを作成したら、それらを &lt;code&gt;declarations&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="77ab0288332bb3f75ca93faaa0848559f0efc9c4" translate="yes">
          <source>The module's &lt;code&gt;imports&lt;/code&gt; array appears exclusively in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata object. It tells Angular about other NgModules that this particular module needs to function properly.</source>
          <target state="translated">モジュールの &lt;code&gt;imports&lt;/code&gt; 配列は、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータオブジェクトにのみ表示されます。 この特定のモジュールが適切に機能する必要があることを他のNgModuleについてAngularに伝えます。</target>
        </trans-unit>
        <trans-unit id="37bab47b6d2fddd6ff6f0de2be55dffe5f0d68d5" translate="yes">
          <source>The modules sets up the router to be used for testing. It provides spy implementations of &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt;, and &lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt;&lt;code&gt;NgModuleFactoryLoader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モジュールは、テストに使用するルーターをセットアップします。 &lt;code&gt;&lt;a href=&quot;../../common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; 、および&lt;a href=&quot;../../core/ngmodulefactoryloader&quot;&gt; &lt;code&gt;NgModuleFactoryLoader&lt;/code&gt; の&lt;/a&gt;スパイ実装を提供します。</target>
        </trans-unit>
        <trans-unit id="b8f968dae1b11cc243c9d8715ef10f99f4c40e38" translate="yes">
          <source>The most common property binding sets an element property to a component property value. An example is binding the &lt;code&gt;src&lt;/code&gt; property of an image element to a component's &lt;code&gt;itemImageUrl&lt;/code&gt; property:</source>
          <target state="translated">最も一般的なプロパティバインディングは、要素プロパティをコンポーネントプロパティ値に設定します。 例として、画像要素の &lt;code&gt;src&lt;/code&gt; プロパティをコンポーネントの &lt;code&gt;itemImageUrl&lt;/code&gt; プロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="0e2d09ba31c42d96a1468928f0746f68810289cf" translate="yes">
          <source>The most common use of schematics, however, is to integrate an Angular library with the Angular CLI. You can do this by creating the schematic files directly within the library project in an Angular workspace, without using the Schematics CLI. See &lt;a href=&quot;schematics-for-libraries&quot;&gt;Schematics for Libraries&lt;/a&gt;.</source>
          <target state="translated">ただし、回路図の最も一般的な使用法は、AngularライブラリをAngular CLIに統合することです。 これを行うには、Schematics CLIを使用せずに、Angularワークスペースのライブラリプロジェクト内で回路図ファイルを直接作成します。 &lt;a href=&quot;schematics-for-libraries&quot;&gt;ライブラリの回路図を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f03ef21da8a8d1525f2de629dfd2cc725b3a1d3c" translate="yes">
          <source>The most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don't require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via &lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt; and if needed, these tasks can reenter the Angular zone via &lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;.</source>
          <target state="translated">このサービスの最も一般的な使用法は、AngularがUIの更新やエラー処理を処理する必要のない1つ以上の非同期タスクで構成される作業を開始するときのパフォーマンスを最適化することです。 そのようなタスクは&lt;a href=&quot;ngzone#runOutsideAngular&quot;&gt;runOutsideAngular&lt;/a&gt;を介して開始でき、必要に応じてこれらのタスクは&lt;a href=&quot;ngzone#run&quot;&gt;run&lt;/a&gt;を介してAngularゾーンに再入できます 。</target>
        </trans-unit>
        <trans-unit id="d721ef30c8c2d93ee7d6cc51782e960cbb70e267" translate="yes">
          <source>The most common validation is making a field required. This section describes how to add a required validation to the &lt;code&gt;firstName&lt;/code&gt; control.</source>
          <target state="translated">最も一般的な検証は、フィールドを必須にすることです。 このセクションでは、必要な検証を &lt;code&gt;firstName&lt;/code&gt; コントロールに追加する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="5bfdb12a001db3d37570c28c95a12f339133fefb" translate="yes">
          <source>The most common way to get a hold of shared services is through Angular &lt;a href=&quot;dependency-injection&quot;&gt;dependency injection&lt;/a&gt;, rather than through the module system (importing a module will result in a new service instance, which is not a typical usage).</source>
          <target state="translated">共有サービスを手に入れる最も一般的な方法は、モジュールシステムではなく、Angular &lt;a href=&quot;dependency-injection&quot;&gt;依存性注入&lt;/a&gt;です（モジュールをインポートすると、新しいサービスインスタンスが作成されますが、これは一般的な使用方法ではありません）。</target>
        </trans-unit>
        <trans-unit id="a8d2e49dd96691f76f1b0107dae749dd4d4cfd1a" translate="yes">
          <source>The most important &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator annotates the top-level &lt;strong&gt;AppModule&lt;/strong&gt; class.</source>
          <target state="translated">最も重要な &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレータは、トップレベルの&lt;strong&gt;AppModule&lt;/strong&gt;クラスに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="696217913dab3bcc82d27ff3f8a194e99b19b4d3" translate="yes">
          <source>The most recent stable released version of Angular appears in the &lt;a href=&quot;../index&quot;&gt;Angular documentation&lt;/a&gt; at the bottom of the left side navigation. For example, &lt;code&gt;stable (v5.2.9)&lt;/code&gt;.</source>
          <target state="translated">Angularの最新の安定リリースバージョンは、左側のナビゲーションの下部にある&lt;a href=&quot;../index&quot;&gt;Angularドキュメントに&lt;/a&gt;表示されます。 たとえば、 &lt;code&gt;stable (v5.2.9)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b203ac14927d287cb1b24febc038b8400723e19" translate="yes">
          <source>The most straight forward way to get accurate typings is to cast the return value of the relevant DOM methods to the correct type. For that, you can use the &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; types (both exported from &lt;code&gt;@angular/elements&lt;/code&gt;):</source>
          <target state="translated">正確な型付けを取得する最も簡単な方法は、関連するDOMメソッドの戻り値を正しい型にキャストすることです。 そのために、 &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/elements/withproperties&quot;&gt;WithProperties&lt;/a&gt;&lt;/code&gt; タイプ（両方とも &lt;code&gt;@angular/elements&lt;/code&gt; からエクスポートされた）を使用できます。</target>
        </trans-unit>
        <trans-unit id="6a00a106ce13b09ae830b89d6a9ec79692548add" translate="yes">
          <source>The name control sets up two built-in validators&amp;mdash;&lt;code&gt;Validators.required&lt;/code&gt; and &lt;code&gt;Validators.minLength(4)&lt;/code&gt;&amp;mdash;and one custom validator, &lt;code&gt;forbiddenNameValidator&lt;/code&gt;. For more details see the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;Custom validators&lt;/a&gt; section in this guide.</source>
          <target state="translated">名前コントロールは、2つのビルトインバリデーター &lt;code&gt;Validators.required&lt;/code&gt; および &lt;code&gt;Validators.minLength(4)&lt;/code&gt; &amp;mdash;と1つのカスタムバリデーター &lt;code&gt;forbiddenNameValidator&lt;/code&gt; をセットアップします。 詳細については、このガイドの「 &lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデータ」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd303e4295a148f60c77b1b8f935a0d9785ceabf" translate="yes">
          <source>The name for the control</source>
          <target state="translated">コントロールの名前</target>
        </trans-unit>
        <trans-unit id="3f5bffaecc38c665fdf4934a9248d6901b121e04" translate="yes">
          <source>The name of binding variable</source>
          <target state="translated">バインディング変数の名前</target>
        </trans-unit>
        <trans-unit id="ee11a869e2d385aca970768492e28306d0c02610" translate="yes">
          <source>The name of related Universal app.</source>
          <target state="translated">関連するユニバーサルアプリの名前。</target>
        </trans-unit>
        <trans-unit id="f31111a73d24d0ea080510639dab3203d39876c6" translate="yes">
          <source>The name of the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; used to render the route. For an unnamed outlet, the outlet name is &lt;em&gt;primary&lt;/em&gt;.</source>
          <target state="translated">ルートのレンダリングに使用される &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; の名前。 名前のないアウトレットの場合、アウトレット名は&lt;em&gt;primary&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="2830e043f06ce13b7965727721f4eeda24ae55dd" translate="yes">
          <source>The name of the DOM property to which the input property is bound.</source>
          <target state="translated">入力プロパティがバインドされるDOMプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="9ea6252fe6bfcbe28e4a7dbd02f705de12a2b425" translate="yes">
          <source>The name of the DOM property to which the output property is bound.</source>
          <target state="translated">出力プロパティがバインドされるDOMプロパティの名前。</target>
        </trans-unit>
        <trans-unit id="a34788f4dbd8d335c3d16d2725eb10d84db5f8eb" translate="yes">
          <source>The name of the Karma configuration file.</source>
          <target state="translated">Karma構成ファイルの名前。</target>
        </trans-unit>
        <trans-unit id="7bc259cccdbc4feb53380144d564c6c9acfe48ea" translate="yes">
          <source>The name of the NgModule.</source>
          <target state="translated">NgModuleの名前。</target>
        </trans-unit>
        <trans-unit id="31c15168aefcb147a81f6d56a4fb545633af3cbb" translate="yes">
          <source>The name of the Protractor configuration file.</source>
          <target state="translated">分度器構成ファイルの名前。</target>
        </trans-unit>
        <trans-unit id="a5161c8757038b183e435833dbc3d24f71cae7ec" translate="yes">
          <source>The name of the TSLint configuration file.</source>
          <target state="translated">TSLint構成ファイルの名前。</target>
        </trans-unit>
        <trans-unit id="f4e2073f1c9d163ee7d923261881502e64ca10d8" translate="yes">
          <source>The name of the TypeScript configuration file for tests.</source>
          <target state="translated">テスト用のTypeScript構成ファイルの名前。</target>
        </trans-unit>
        <trans-unit id="ca18d6818e4f88c372ec7928897bf20767d10b87" translate="yes">
          <source>The name of the TypeScript configuration file.</source>
          <target state="translated">TypeScript構成ファイルの名前。</target>
        </trans-unit>
        <trans-unit id="23b607725624b97d6681994d12395b88f5004fa9" translate="yes">
          <source>The name of the application directory.</source>
          <target state="translated">アプリケーションディレクトリの名前。</target>
        </trans-unit>
        <trans-unit id="9bf434ae63b3e0efedb894f4541221d8148e3143" translate="yes">
          <source>The name of the application folder.</source>
          <target state="translated">アプリケーションフォルダーの名前。</target>
        </trans-unit>
        <trans-unit id="98dd415e8f45a9d589f3ab22fe8844e6831aaeb3" translate="yes">
          <source>The name of the attribute that has changed.</source>
          <target state="translated">変更された属性の名前。</target>
        </trans-unit>
        <trans-unit id="51e356de047f692621f1ac826eda16393c2f1d57" translate="yes">
          <source>The name of the attribute whose value can be injected.</source>
          <target state="translated">値を挿入できる属性の名前。</target>
        </trans-unit>
        <trans-unit id="0049c017534779feed3c5a4e10e97646ee097a91" translate="yes">
          <source>The name of the bundle (for &lt;code&gt;type=bundle&lt;/code&gt;).</source>
          <target state="translated">バンドルの名前（ &lt;code&gt;type=bundle&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b095d5334d88f321e32a2bec17d4998f29183ab5" translate="yes">
          <source>The name of the component.</source>
          <target state="translated">コンポーネントの名前。</target>
        </trans-unit>
        <trans-unit id="298fb556486176a59b92ee293ee40dc19082796f" translate="yes">
          <source>The name of the enum.</source>
          <target state="translated">列挙の名前。</target>
        </trans-unit>
        <trans-unit id="4ac12cbaf7ddc32136d2246eea1e25012d5463a2" translate="yes">
          <source>The name of the event to listen for.</source>
          <target state="translated">待機するイベントの名前。</target>
        </trans-unit>
        <trans-unit id="3effaffa0019768d26589b5c5f6cbf735fb6f172" translate="yes">
          <source>The name of the index file</source>
          <target state="translated">インデックスファイルの名前</target>
        </trans-unit>
        <trans-unit id="d4bad0ca50233e344d10d5f4399e54a6b4d776fb" translate="yes">
          <source>The name of the interface.</source>
          <target state="translated">インターフェースの名前。</target>
        </trans-unit>
        <trans-unit id="e0dae223e862076c307be059fb3da2195512e15e" translate="yes">
          <source>The name of the library.</source>
          <target state="translated">ライブラリの名前。</target>
        </trans-unit>
        <trans-unit id="0e4e86dc522df63f846535a545048ecb92d2ef5a" translate="yes">
          <source>The name of the main entry-point file.</source>
          <target state="translated">メインエントリポイントファイルの名前。</target>
        </trans-unit>
        <trans-unit id="1ae438b15dd77fd8ad30e891d288ec894f9c8b5a" translate="yes">
          <source>The name of the new app.</source>
          <target state="translated">新しいアプリの名前。</target>
        </trans-unit>
        <trans-unit id="c05ae963758a0b1ea71e624aa37d935aad1862cc" translate="yes">
          <source>The name of the new class.</source>
          <target state="translated">新しいクラスの名前。</target>
        </trans-unit>
        <trans-unit id="1cc12f20eb95c9010460b29584ae08cc288e4233" translate="yes">
          <source>The name of the new directive.</source>
          <target state="translated">新しいディレクティブの名前。</target>
        </trans-unit>
        <trans-unit id="e94c910c3587ab8593febb3f805bcd0616accd65" translate="yes">
          <source>The name of the new route guard.</source>
          <target state="translated">新しいルートガードの名前。</target>
        </trans-unit>
        <trans-unit id="05fef20c845e23cfb269d81a5518f8c2dc19a116" translate="yes">
          <source>The name of the new workspace and initial project.</source>
          <target state="translated">新しいワークスペースと初期プロジェクトの名前。</target>
        </trans-unit>
        <trans-unit id="4f3f5dc853fd89760b7214e5ccac1a838a94a12a" translate="yes">
          <source>The name of the pipe.</source>
          <target state="translated">パイプの名前。</target>
        </trans-unit>
        <trans-unit id="84108afbf0ae3d52386033a2d683d8a1ae512bb7" translate="yes">
          <source>The name of the polyfills file.</source>
          <target state="translated">ポリフィルファイルの名前。</target>
        </trans-unit>
        <trans-unit id="60a0ead0a1aaa4e2f2b4233c956828d7b450a96e" translate="yes">
          <source>The name of the project in which to create the enum. Default is the configured default project for the workspace.</source>
          <target state="translated">列挙を作成するプロジェクトの名前。 デフォルトは、ワークスペースに構成されたデフォルトのプロジェクトです。</target>
        </trans-unit>
        <trans-unit id="acc889a5813553b91add89b3f03c313d7a4b86e6" translate="yes">
          <source>The name of the project to build. Can be an application or a library.</source>
          <target state="translated">ビルドするプロジェクトの名前。 アプリケーションまたはライブラリにすることができます。</target>
        </trans-unit>
        <trans-unit id="5db5ca31c4c34286b71367170d486bbec874adc3" translate="yes">
          <source>The name of the project to deploy.</source>
          <target state="translated">デプロイするプロジェクトの名前。</target>
        </trans-unit>
        <trans-unit id="877a3cd4d86d1c683955bcdb8afd34543824fbc6" translate="yes">
          <source>The name of the project to lint.</source>
          <target state="translated">リントするプロジェクトの名前。</target>
        </trans-unit>
        <trans-unit id="0c0ea6bda23de88805444a87357d6fc67352074e" translate="yes">
          <source>The name of the project.</source>
          <target state="translated">プロジェクトの名前。</target>
        </trans-unit>
        <trans-unit id="5cca2fedb252b808c68e0001d796a768f14fe5b8" translate="yes">
          <source>The name of the related client app.</source>
          <target state="translated">関連するクライアントアプリの名前。</target>
        </trans-unit>
        <trans-unit id="0e1d1073f831d9e075296e86ca7a2b766cf84ddc" translate="yes">
          <source>The name of the related client app. Required in place of &quot;project&quot;.</source>
          <target state="translated">関連するクライアントアプリの名前。 「プロジェクト」の代わりに必要です。</target>
        </trans-unit>
        <trans-unit id="2b4489e5f4e2653828a596bc22eebe8452c680c4" translate="yes">
          <source>The name of the root NgModule class.</source>
          <target state="translated">ルートNgModuleクラスの名前。</target>
        </trans-unit>
        <trans-unit id="39f772f8508b793cd949b7d95f84bb953733b091" translate="yes">
          <source>The name of the root NgModule file.</source>
          <target state="translated">ルートNgModuleファイルの名前。</target>
        </trans-unit>
        <trans-unit id="b9c1e32c2285950cd5c0ea125336cadcabee7ee5" translate="yes">
          <source>The name of the root module class.</source>
          <target state="translated">ルートモジュールクラスの名前。</target>
        </trans-unit>
        <trans-unit id="e79f3a656af3a23c870229cdcf812e615d254ba2" translate="yes">
          <source>The name of the root module file</source>
          <target state="translated">ルートモジュールファイルの名前</target>
        </trans-unit>
        <trans-unit id="d1af03b5050c51d9047b1136086eb139e2bfa56a" translate="yes">
          <source>The name of the routing module should parallel the name of its companion module, using the suffix &quot;Routing&quot;. For example, &lt;code&gt;FooModule&lt;/code&gt; in &lt;code&gt;foo.module.ts&lt;/code&gt; has a routing module named &lt;code&gt;FooRoutingModule&lt;/code&gt; in &lt;code&gt;foo-routing.module.ts&lt;/code&gt;. If the companion module is the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;AppRoutingModule&lt;/code&gt; adds router configuration to its imports with &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt;. All other routing modules are children that import &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt;.</source>
          <target state="translated">ルーティングモジュールの名前は、接尾辞「Routing」を使用して、コンパニオンモジュールの名前と同じにする必要があります。 たとえば、 &lt;code&gt;FooModule&lt;/code&gt; &lt;code&gt;foo.module.ts&lt;/code&gt; は、 &lt;code&gt;foo-routing.module.ts&lt;/code&gt; にFooRoutingModuleという名前のルーティングモジュールがあります。 コンパニオンモジュールがルート &lt;code&gt;AppModule&lt;/code&gt; である場合、 &lt;code&gt;AppRoutingModule&lt;/code&gt; は &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt; を使用してインポートにルーター構成を追加します。 他のすべてのルーティングモジュールは、 &lt;code&gt;RouterModule.forChild(routes)&lt;/code&gt; をインポートする子です。</target>
        </trans-unit>
        <trans-unit id="5cb7b85a598a028b7c4208d8cba347b086c65cad" translate="yes">
          <source>The name of the service.</source>
          <target state="translated">サービスの名前。</target>
        </trans-unit>
        <trans-unit id="eb80b5650274c357613ae29fbc7ee992a7295266" translate="yes">
          <source>The name of the state from which the animation is triggered.</source>
          <target state="translated">アニメーションがトリガーされる状態の名前。</target>
        </trans-unit>
        <trans-unit id="642538b3255d34b3733d341540a32bdf0783bc44" translate="yes">
          <source>The name of the state in which the animation completes.</source>
          <target state="translated">アニメーションが完了する状態の名前。</target>
        </trans-unit>
        <trans-unit id="9e83f52375e1bbe1dd110ed6d2d07fc578d60fbe" translate="yes">
          <source>The name of the style.</source>
          <target state="translated">スタイルの名前。</target>
        </trans-unit>
        <trans-unit id="d5dd95f899057794c059b568058ef2fda9777be8" translate="yes">
          <source>The name of the test entry-point file.</source>
          <target state="translated">テストエントリポイントファイルの名前。</target>
        </trans-unit>
        <trans-unit id="f00cd6c1142679bd0fe1c3ebd4ca78600af96a2c" translate="yes">
          <source>The name of the worker.</source>
          <target state="translated">ワーカーの名前。</target>
        </trans-unit>
        <trans-unit id="6c69a9d664620bbeca7664bd75d1ad6ed2baaaed" translate="yes">
          <source>The names of package(s) to update.</source>
          <target state="translated">更新するパッケージの名前。</target>
        </trans-unit>
        <trans-unit id="1abdc0f45b3ba1f3f4aab750a1abd18ac0401e50" translate="yes">
          <source>The namespace for the new element.</source>
          <target state="translated">新しい要素の名前空間。</target>
        </trans-unit>
        <trans-unit id="9443280c899669a2c6c547ccf058f0563c8d9971" translate="yes">
          <source>The namespace in which the attribute is defined.</source>
          <target state="translated">属性が定義されている名前空間。</target>
        </trans-unit>
        <trans-unit id="5706a1bb56e527d4bef0f37bae074bd6120e33cc" translate="yes">
          <source>The namespace.</source>
          <target state="translated">名前空間。</target>
        </trans-unit>
        <trans-unit id="5de4b279d3860800c1274a15257bfb7aa3d5e166" translate="yes">
          <source>The native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element doesn't have a &lt;code&gt;form&lt;/code&gt; property, but the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive does, which allows disabling the submit button if the &lt;code&gt;itemForm.form.valid&lt;/code&gt; is invalid and passing the entire form control tree to the parent component's &lt;code&gt;onSubmit()&lt;/code&gt; method.</source>
          <target state="translated">ネイティブの &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素には &lt;code&gt;form&lt;/code&gt; プロパティはありませんが、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブにはあります。これにより、 &lt;code&gt;itemForm.form.valid&lt;/code&gt; が無効な場合に送信ボタンを無効にし、フォームコントロールツリー全体を親コンポーネントの &lt;code&gt;onSubmit()&lt;/code&gt; メソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f53c7525b5762013b1501a0e4c46863466a89451" translate="yes">
          <source>The native DOM element at the root of the component.</source>
          <target state="translated">コンポーネントのルートにあるネイティブDOM要素。</target>
        </trans-unit>
        <trans-unit id="29761c2a932d59dd3f7b79be5a29968749831e65" translate="yes">
          <source>The native element at the root of the component.</source>
          <target state="translated">コンポーネントのルートにあるネイティブ要素。</target>
        </trans-unit>
        <trans-unit id="dff590b09b3db22a6980b41fca483eda9e9a641b" translate="yes">
          <source>The navigation links at the top, left, and bottom of the screen are generated from the JSON configuration file, &lt;code&gt;content/navigation.json&lt;/code&gt;.</source>
          <target state="translated">画面の上部、左、および下部のナビゲーションリンクは、JSON構成ファイル &lt;code&gt;content/navigation.json&lt;/code&gt; から生成されます。</target>
        </trans-unit>
        <trans-unit id="3403c9d3de501a04ade350bc06e6b24f8560df85" translate="yes">
          <source>The navigation state that was previously supplied to the &lt;code&gt;pushState&lt;/code&gt; call, when the navigation is triggered by a &lt;code&gt;popstate&lt;/code&gt; event. Otherwise null.</source>
          <target state="translated">ナビゲーションが &lt;code&gt;popstate&lt;/code&gt; イベントによってトリガーされたときに、 &lt;code&gt;pushState&lt;/code&gt; 呼び出しに以前に提供されたナビゲーション状態。 それ以外の場合はnull。</target>
        </trans-unit>
        <trans-unit id="4c5c2daf86d485506deecd53ed0077e779f790db" translate="yes">
          <source>The need for this polyfill was removed in Angular version 8.0 (&lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;see #14473&lt;/a&gt;), rendering the presence of the poylfill in most Angular applications unnecessary. Because the polyfill can be depended on by 3rd-party libraries, instead of removing it from all Angular projects, we are deprecating the requirement for this polyfill as of version 8.0. This should give library authors and application developers sufficient time to evaluate if they need the polyfill, and perform any refactoring necessary to remove the dependency on it.</source>
          <target state="translated">このポリフィルの必要性はAngularバージョン8.0で削除され（ &lt;a href=&quot;https://github.com/angular/angular-cli/pull/14473&quot;&gt;＃14473を参照&lt;/a&gt; ）、ほとんどのAngularアプリケーションでpoylfillの存在が不要になりました。 ポリフィルはすべてのAngularプロジェクトから削除するのではなく、サードパーティのライブラリに依存する可能性があるため、バージョン8.0以降、このポリフィルの要件は廃止されます。 これにより、ライブラリ作成者およびアプリケーション開発者は、ポリフィルが必要かどうかを評価し、その依存関係を削除するために必要なリファクタリングを実行するのに十分な時間を確保できます。</target>
        </trans-unit>
        <trans-unit id="9926b8eddb28f5b61fe9e5c8e2449b04b9fca67b" translate="yes">
          <source>The net result is an AngularJS directive called &lt;code&gt;heroDetail&lt;/code&gt;, that you can use like any other directive in AngularJS templates.</source>
          <target state="translated">最終結果は、 &lt;code&gt;heroDetail&lt;/code&gt; と呼ばれるAngularJSディレクティブです。これは、AngularJSテンプレートの他のディレクティブと同様に使用できます。</target>
        </trans-unit>
        <trans-unit id="363efe528cca3a39d4ac1f20d51e40123493e611" translate="yes">
          <source>The new &lt;code&gt;Phone&lt;/code&gt; service has the same features as the original, &lt;code&gt;ngResource&lt;/code&gt;-based service. Because it's an Angular service, you register it with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">新しい &lt;code&gt;Phone&lt;/code&gt; サービスには、元の &lt;code&gt;ngResource&lt;/code&gt; ベースのサービスと同じ機能があります。 これはAngularサービスであるため、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; プロバイダーに登録します：</target>
        </trans-unit>
        <trans-unit id="df21a5f33d940b8fd543f9a1645f478b67bd8405" translate="yes">
          <source>The new &lt;code&gt;PhoneListComponent&lt;/code&gt; uses the Angular &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive, located in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;. Add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports, declare the new &lt;code&gt;PhoneListComponent&lt;/code&gt; and finally add it to &lt;code&gt;entryComponents&lt;/code&gt; since you downgraded it:</source>
          <target state="translated">新しい &lt;code&gt;PhoneListComponent&lt;/code&gt; は、 FormsModuleにあるAngular &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; ディレクティブを使用します。 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; のインポートに追加し、新しい &lt;code&gt;PhoneListComponent&lt;/code&gt; を宣言し、最後にダウングレードしてから &lt;code&gt;entryComponents&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="b4153d9c7e00866dc99a220129088a88c0dd7d73" translate="yes">
          <source>The new API is a smaller, easier, and more powerful way to make HTTP requests in Angular. The new API simplifies the default ergonomics: There is no need to map by invoking the &lt;code&gt;.json()&lt;/code&gt; method. It also supports typed return values and interceptors.</source>
          <target state="translated">新しいAPIは、AngularでHTTPリクエストを行うための、より小さく、より簡単で、より強力な方法です。 新しいAPIは、デフォルトのエルゴノミクスを簡素化します &lt;code&gt;.json()&lt;/code&gt; メソッドを呼び出してマッピングする必要はありません。 型付きの戻り値とインターセプターもサポートします。</target>
        </trans-unit>
        <trans-unit id="4ba87e5244a7f2ae127d3527851072feaa64a3a5" translate="yes">
          <source>The new app's configuration appears in the &lt;code&gt;projects&lt;/code&gt; section of the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, under its project name.</source>
          <target state="translated">新しいアプリの構成は、 &lt;code&gt;angular.json&lt;/code&gt; ワークスペース構成ファイルの &lt;code&gt;projects&lt;/code&gt; セクションのプロジェクト名の下に表示されます。</target>
        </trans-unit>
        <trans-unit id="97e1064b6ccb7a71d78b43cbdff3f66b187e3101" translate="yes">
          <source>The new application is running in Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">新しいアプリケーションはAngularゾーンで実行されているため、 &lt;code&gt;$apply()&lt;/code&gt; 呼び出しは不要になりました。</target>
        </trans-unit>
        <trans-unit id="1207f1b47a2ceddd5399dbc4b8537238ef541e74" translate="yes">
          <source>The new application is running in an Angular zone, and therefore it no longer needs calls to &lt;code&gt;$apply()&lt;/code&gt;.</source>
          <target state="translated">新しいアプリケーションはAngularゾーンで実行されているため、 &lt;code&gt;$apply()&lt;/code&gt; 呼び出しは不要になりました。</target>
        </trans-unit>
        <trans-unit id="b35b343343c03348a9572e3228bb3c952b9ac234" translate="yes">
          <source>The new child node.</source>
          <target state="translated">新しい子ノード。</target>
        </trans-unit>
        <trans-unit id="9840b56c4f6874ecf576985d09a05dbfa2eb89c5" translate="yes">
          <source>The new child nodes.</source>
          <target state="translated">新しい子ノード。</target>
        </trans-unit>
        <trans-unit id="4b58eb8174eac708d6b4490ec1c0c1d10ce4c92f" translate="yes">
          <source>The new product alert component takes a product as input from the product list. With that input, it shows or hides the &quot;Notify Me&quot; button, based on the price of the product. The Phone XL price is over $700, so the &quot;Notify Me&quot; button appears on that product.</source>
          <target state="translated">新しい製品アラートコンポーネントは、製品リストから製品を入力として受け取ります。 その入力により、製品の価格に基づいて「通知」ボタンを表示または非表示にします。 Phone XLの価格は700ドルを超えているため、その製品に[通知]ボタンが表示されます。</target>
        </trans-unit>
        <trans-unit id="e6f1054918bbc968acfe9e3749cce36a53bf28d3" translate="yes">
          <source>The new project is automatically configured for Ivy. Specifically, the enableIvy option is set to &lt;code&gt;true&lt;/code&gt; in the project's &lt;code&gt;tsconfig.app.json&lt;/code&gt; file.</source>
          <target state="translated">新しいプロジェクトは、Ivy用に自動的に構成されます。 具体的には、プロジェクトの &lt;code&gt;tsconfig.app.json&lt;/code&gt; ファイルでenableIvyオプションが &lt;code&gt;true&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="d6aa8f89505f75cf8c09ee6eb7157b95f50f181b" translate="yes">
          <source>The new shipping component isn't hooked into any other component yet, but you can see it in the preview pane by entering the URL specified by its route. The URL has the pattern: &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; where the &lt;code&gt;getting-started.stackblitz.io&lt;/code&gt; part may be different for your StackBlitz project.</source>
          <target state="translated">新しい出荷コンポーネントはまだ他のコンポーネントにフックされていませんが、ルートで指定されたURLを入力することでプレビューペインに表示できます。 URLのパターンは &lt;code&gt;https://getting-started.stackblitz.io/shipping&lt;/code&gt; です。ここで、get-started.stackblitz.ioの部分はStackBlitzプロジェクトによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="3743d1eecb933641cda77a717298bd354faf0984" translate="yes">
          <source>The new value</source>
          <target state="translated">新しい価値</target>
        </trans-unit>
        <trans-unit id="021d55f858f59001a051bc43ae234648f75e1184" translate="yes">
          <source>The new value emitted by &lt;code&gt;ngModelChange&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelChange&lt;/code&gt; によって発行された新しい値。</target>
        </trans-unit>
        <trans-unit id="c8570bda1df02aa4830c29774e26bf3a60827bab" translate="yes">
          <source>The new value for the control that matches the structure of the group.</source>
          <target state="translated">グループの構造に一致するコントロールの新しい値。</target>
        </trans-unit>
        <trans-unit id="ad6dd37b94567d0ed30940d4cbe011a866a03911" translate="yes">
          <source>The new value for the control.</source>
          <target state="translated">コントロールの新しい値。</target>
        </trans-unit>
        <trans-unit id="2118e7142b9bc910be772dcc7fd3cdf8497c8881" translate="yes">
          <source>The new value for the directive's control.</source>
          <target state="translated">ディレクティブのコントロールの新しい値。</target>
        </trans-unit>
        <trans-unit id="bdb50e4b11bfbe575629c662f2a9a5650543a293" translate="yes">
          <source>The new value for the element</source>
          <target state="translated">要素の新しい値</target>
        </trans-unit>
        <trans-unit id="7b746bb6b747d0bb853f7c9fc94c0337260bae7e" translate="yes">
          <source>The new value for the form.</source>
          <target state="translated">フォームの新しい値。</target>
        </trans-unit>
        <trans-unit id="61b8b2c4fe44f460d9964c15d7ca4f73c9a6c794" translate="yes">
          <source>The new value for the view</source>
          <target state="translated">ビューの新しい値</target>
        </trans-unit>
        <trans-unit id="021a9d13fa37792c9492e99195cbcb8204d81b7b" translate="yes">
          <source>The new value for the view model.</source>
          <target state="translated">ビューモデルの新しい値。</target>
        </trans-unit>
        <trans-unit id="b9b227961e3d04545a92b5ce44cb233f0e0e2e32" translate="yes">
          <source>The new value of the attribute.</source>
          <target state="translated">属性の新しい値。</target>
        </trans-unit>
        <trans-unit id="979eb5744be34e7601501a529cdae1a63ed19682" translate="yes">
          <source>The new value or array of values.</source>
          <target state="translated">新しい値または値の配列。</target>
        </trans-unit>
        <trans-unit id="7b08063f6e4b837b85157e98f41e7848cc96e9ca" translate="yes">
          <source>The new value to add.</source>
          <target state="translated">追加する新しい値。</target>
        </trans-unit>
        <trans-unit id="5846611ef08161b895e9cfae56a1ecdbe7079b9d" translate="yes">
          <source>The new value.</source>
          <target state="translated">新しい値。</target>
        </trans-unit>
        <trans-unit id="f0ee706f3bb39b349be9aafea079617b78668c88" translate="yes">
          <source>The new version waits for the &lt;code&gt;Observable&lt;/code&gt; to emit the array of heroes&amp;mdash;which could happen now or several minutes from now. The &lt;code&gt;subscribe()&lt;/code&gt; method passes the emitted array to the callback, which sets the component's &lt;code&gt;heroes&lt;/code&gt; property.</source>
          <target state="translated">新しいバージョンは、 &lt;code&gt;Observable&lt;/code&gt; がヒーローのアレイを放出するのを待機します。これは、現在または数分後に発生する可能性があります。 &lt;code&gt;subscribe()&lt;/code&gt; メソッドは、発行された配列をコールバックに渡します。コールバックは、コンポーネントの &lt;code&gt;heroes&lt;/code&gt; プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="c61fd74c6478e58dddf9101895e08ed5f52a84e1" translate="yes">
          <source>The new workspace folder is given the specified project name, and contains configuration files at the top level.</source>
          <target state="translated">新しいワークスペースフォルダーには、指定されたプロジェクト名が与えられ、最上位に構成ファイルが含まれます。</target>
        </trans-unit>
        <trans-unit id="ba1a5a973d20feba0e6b33242fbe750ff2e79612" translate="yes">
          <source>The next example captures the &lt;code&gt;index&lt;/code&gt; in a variable named &lt;code&gt;i&lt;/code&gt; and displays it with the item name.</source>
          <target state="translated">次の例では、 &lt;code&gt;i&lt;/code&gt; という名前の変数で &lt;code&gt;index&lt;/code&gt; をキャプチャし、アイテム名とともに表示します。</target>
        </trans-unit>
        <trans-unit id="84bf25f63e5b5153b6a3a8c5328d60b284fe5dc3" translate="yes">
          <source>The next example displays multiple code tabs, each with its own header. It demonstrates control over display of line numbers at both the &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; levels.</source>
          <target state="translated">次の例では、それぞれ独自のヘッダーを持つ複数のコードタブを表示します。 &lt;code&gt;&amp;lt;code-tabs&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;code-pane&amp;gt;&lt;/code&gt; レベルと&amp;lt;code-pane&amp;gt;レベルの両方で行番号の表示を制御する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="7c3416618b3de0af96c0f13e3867441de913c924" translate="yes">
          <source>The next example targets the host element again, but only when it also has the &lt;code&gt;active&lt;/code&gt; CSS class.</source>
          <target state="translated">次の例では、ホスト要素を再びターゲットにしていますが、 &lt;code&gt;active&lt;/code&gt; CSSクラスもある場合のみです。</target>
        </trans-unit>
        <trans-unit id="4a21e1e01c2158020152df86d39427a773fea8dd" translate="yes">
          <source>The next examples focus on hook details.</source>
          <target state="translated">次の例では、フックの詳細に焦点を当てます。</target>
        </trans-unit>
        <trans-unit id="e227a13b6f5a7d5bee882fe1ac94c2d4c537d093" translate="yes">
          <source>The next few sections review some of the coding choices in the app.</source>
          <target state="translated">次のいくつかのセクションでは、アプリのコーディングの選択肢のいくつかを確認します。</target>
        </trans-unit>
        <trans-unit id="d607f1c8543b34b78c9b0ce11c65aed7ab530f0e" translate="yes">
          <source>The next interceptor in the chain, or the backend if no interceptors remain in the chain.</source>
          <target state="translated">チェーン内の次のインターセプター、またはチェーンにインターセプターが残っていない場合はバックエンド。</target>
        </trans-unit>
        <trans-unit id="3e4bb896f2f48b5d9aa0754ab76dc8fdd2fa0d3b" translate="yes">
          <source>The next parent injector in the hierarchy is the &lt;code&gt;NullInjector()&lt;/code&gt;, which is the top of the tree. If you've gone so far up the tree that you are looking for a service in the &lt;code&gt;NullInjector()&lt;/code&gt;, you'll get an error unless you've used &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; because ultimately, everything ends at the &lt;code&gt;NullInjector()&lt;/code&gt; and it returns an error or, in the case of &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;. For more information on &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, see the &lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt;&lt;code&gt;@Optional()&lt;/code&gt; section&lt;/a&gt; of this guide.</source>
          <target state="translated">階層内の次の親インジェクターは、ツリーの最上部である &lt;code&gt;NullInjector()&lt;/code&gt; です。 &lt;code&gt;NullInjector()&lt;/code&gt; でサービスを探しているツリーまで進んでいる場合、最終的にすべてが &lt;code&gt;NullInjector()&lt;/code&gt; で終わるため、 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 使用しない限りエラーが発生します。エラーを返すか、 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 場合は &lt;code&gt;null&lt;/code&gt; を返します 。 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 詳細については、このガイドの&lt;a href=&quot;hierarchical-dependency-injection#optional&quot;&gt; &lt;code&gt;@Optional()&lt;/code&gt; セクションを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="2215641d1cc412c6d30b3543117da1326b1d8612" translate="yes">
          <source>The next part of the file is where you configure your routes. &lt;em&gt;Routes&lt;/em&gt; tell the Router which view to display when a user clicks a link or pastes a URL into the browser address bar.</source>
          <target state="translated">ファイルの次の部分は、ルートを構成する場所です。 &lt;em&gt;ルート&lt;/em&gt;は、ユーザーがリンクをクリックしたとき、またはブラウザーのアドレスバーにURLを貼り付けたときに表示するビューをルーターに伝えます。</target>
        </trans-unit>
        <trans-unit id="ffbc544c39aedf6dbed7b7a9601dc1ca2eadd500" translate="yes">
          <source>The next section expands the app's capabilities by adding a new component&amp;mdash;a product alert&amp;mdash;as a child of the product list component.</source>
          <target state="translated">次のセクションでは、新しいコンポーネント（製品アラート）を製品リストコンポーネントの子として追加することにより、アプリの機能を拡張します。</target>
        </trans-unit>
        <trans-unit id="e1966fcbb6a04574ff0577930e9c4f4e9d6e0dcf" translate="yes">
          <source>The next section shows how to use template reference variables to address this problem.</source>
          <target state="translated">次のセクションでは、テンプレート参照変数を使用してこの問題に対処する方法を示します。</target>
        </trans-unit>
        <trans-unit id="b8bc4af8ca3880db42ed25822aa4664e92d79782" translate="yes">
          <source>The next section though, where &lt;code&gt;InspectorComponent&lt;/code&gt; is a child component of &lt;code&gt;ChildComponent&lt;/code&gt;, &lt;code&gt;InspectorComponent&lt;/code&gt; is inside the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;, so when it asks for the &lt;code&gt;AnimalService&lt;/code&gt;, it sees the 🐶 (puppy).</source>
          <target state="translated">ただし、 &lt;code&gt;InspectorComponent&lt;/code&gt; が &lt;code&gt;ChildComponent&lt;/code&gt; の子コンポーネントである次のセクションでは、 &lt;code&gt;InspectorComponent&lt;/code&gt; は &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 内にあるため、 &lt;code&gt;AnimalService&lt;/code&gt; を要求すると、🐶（子犬）が表示されます。</target>
        </trans-unit>
        <trans-unit id="d59c51bbebc61089285e2a0c88cc2af2c45f0029" translate="yes">
          <source>The next step is to add a binding to the &lt;code&gt;ChildComponent&lt;/code&gt; template.</source>
          <target state="translated">次のステップは、 &lt;code&gt;ChildComponent&lt;/code&gt; テンプレートにバインディングを追加することです。</target>
        </trans-unit>
        <trans-unit id="1ac5a9d05f16c0b0c07e2483f2426a42fa242157" translate="yes">
          <source>The next step is to bind the property in the parent component's template. In this example, the parent component template is &lt;code&gt;app.component.html&lt;/code&gt;.</source>
          <target state="translated">次のステップは、親コンポーネントのテンプレートのプロパティをバインドすることです。 この例では、親コンポーネントのテンプレートは &lt;code&gt;app.component.html&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="06656dd8fd58ec3c830e42d3bef15b1d6ea80756" translate="yes">
          <source>The next step is to create a new alert feature that takes a product as an input. The alert checks the product's price, and, if the price is greater than $700, displays a &quot;Notify Me&quot; button that lets users sign up for notifications when the product goes on sale.</source>
          <target state="translated">次のステップは、製品を入力として受け取る新しいアラート機能を作成することです。 アラートは製品の価格を確認し、価格が700ドルを超える場合は、製品が発売されたときにユーザーが通知にサインアップできる[通知]ボタンを表示します。</target>
        </trans-unit>
        <trans-unit id="90b831079de1c7557999e837b31d0f72e7c2ee44" translate="yes">
          <source>The next step is to define an object model that can describe all scenarios needed by the form functionality. The hero application process involves a form with a lot of questions. The &lt;em&gt;question&lt;/em&gt; is the most fundamental object in the model.</source>
          <target state="translated">次の手順では、フォーム機能に必要なすべてのシナリオを記述することができるオブジェクトモデルを定義します。 ヒーローの申請プロセスには、多くの質問があるフォームが含まれます。 &lt;em&gt;質問&lt;/em&gt;は、モデルの最も基本的なオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="fb2e63ba1bd8fdeb7779c136f5fcfde3c35d6213" translate="yes">
          <source>The next version of the documentation is available at &lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;. This includes any documentation for Beta or Release Candidate features and APIs.</source>
          <target state="translated">ドキュメントの次のバージョンは&lt;a href=&quot;https://next.angular.io&quot;&gt;next.angular.io&lt;/a&gt;で入手できます。 これには、ベータ版またはリリース候補版の機能とAPIのドキュメントが含まれます。</target>
        </trans-unit>
        <trans-unit id="4a180ac00e9f3dbf51f785693d56733d6c28e423" translate="yes">
          <source>The ng module for the server.</source>
          <target state="translated">サーバーのngモジュール。</target>
        </trans-unit>
        <trans-unit id="31db521a10f7d13d6ad0164b67edb26307449751" translate="yes">
          <source>The ng module for the worker app side.</source>
          <target state="translated">ワーカーアプリ側のngモジュール。</target>
        </trans-unit>
        <trans-unit id="86a442380fdcdb994033a6dea7124eb5d66e6cae" translate="yes">
          <source>The ngUpgrade library in Angular is a very useful tool for upgrading anything but the smallest of applications. With it you can mix and match AngularJS and Angular components in the same application and have them interoperate seamlessly. That means you don't have to do the upgrade work all at once, since there's a natural coexistence between the two frameworks during the transition period.</source>
          <target state="translated">AngularのngUpgradeライブラリは、最小のアプリケーション以外をアップグレードするための非常に便利なツールです。 これを使用すると、同じアプリケーション内でAngularJSとAngularコンポーネントを組み合わせて一致させ、シームレスに相互運用できます。 つまり、移行期間中に2つのフレームワーク間に自然な共存があるため、アップグレード作業を一度に行う必要はありません。</target>
        </trans-unit>
        <trans-unit id="0107243ec8cbe329d40de532f38d6e455ea3c867" translate="yes">
          <source>The node.</source>
          <target state="translated">ノード。</target>
        </trans-unit>
        <trans-unit id="04ba803c94c0cf27fa47cf0f40112d507c07b504" translate="yes">
          <source>The non-null assertion operator ( &lt;code&gt;!&lt;/code&gt; )</source>
          <target state="translated">非ヌルのアサーション演算子（ &lt;code&gt;!&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b8aa84c688682535f84bf8169abdd6d8bb08e9fc" translate="yes">
          <source>The non-null assertion operator should be used sparingly as refactoring of the component might break this constraint.</source>
          <target state="translated">コンポーネントのリファクタリングによりこの制約が破られる可能性があるため、非ヌルのアサーション演算子は控えめに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="931e7b111d738b68a612433a6d150f27f4217c3a" translate="yes">
          <source>The non-null assertion operator, &lt;code&gt;!&lt;/code&gt;, is optional with the exception that you must use it when you turn on strict null checks.</source>
          <target state="translated">NULL以外のアサーション演算子 &lt;code&gt;!&lt;/code&gt; 、厳密なヌルチェックをオンにするときに使用する必要があることを除いて、オプションです。</target>
        </trans-unit>
        <trans-unit id="064948efac2b67f533858ab0ec1a225c30e6d6d0" translate="yes">
          <source>The npm package for the build tool used to create this target. The default builder for an application (&lt;code&gt;ng build myApp&lt;/code&gt;) is &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt;, which uses the &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; package bundler. Note that a different builder is used for building a library (&lt;code&gt;ng build myLib&lt;/code&gt;).</source>
          <target state="translated">このターゲットの作成に使用されるビルドツールのnpmパッケージ。 アプリケーションのデフォルトのビルダー（ &lt;code&gt;ng build myApp&lt;/code&gt; ）は &lt;code&gt;@angular-devkit/build-angular:&lt;a href=&quot;../api/animations/browser&quot;&gt;browser&lt;/a&gt;&lt;/code&gt; であり、 &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;パッケージbundlerを使用します。 ライブラリの構築には別のビルダーが使用されることに注意してください（ &lt;code&gt;ng build myLib&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="10d444c3a0885867d29c65fc0e0878dd94476c43" translate="yes">
          <source>The npm packages for the &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;mandatory&lt;/em&gt; polyfills&lt;/a&gt; (such as &lt;code&gt;zone.js&lt;/code&gt;) are installed automatically for you when you create your project with &lt;code&gt;ng new&lt;/code&gt;, and their corresponding &lt;code&gt;import&lt;/code&gt; statements are already enabled in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file.</source>
          <target state="translated">&lt;code&gt;ng new&lt;/code&gt; を使用してプロジェクトを作成すると、 &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;&lt;em&gt;必須の&lt;/em&gt;ポリフィル&lt;/a&gt; （ zone.jsなど）のnpmパッケージが自動的にインストールされ、対応する &lt;code&gt;import&lt;/code&gt; ステートメントが &lt;code&gt;src/polyfills.ts&lt;/code&gt; 構成ファイルで既に有効になっています。</target>
        </trans-unit>
        <trans-unit id="9b47812f77184b9bdc5b1bad108b3a1b65438513" translate="yes">
          <source>The number to be formatted as a percentage.</source>
          <target state="translated">パーセントとしてフォーマットされる数値。</target>
        </trans-unit>
        <trans-unit id="f5e154c108150e674adc32b02686eba52434ecc2" translate="yes">
          <source>The number to be formatted as currency.</source>
          <target state="translated">通貨としてフォーマットされる数値。</target>
        </trans-unit>
        <trans-unit id="b8da88e922ca8c42e90b1e7116243bf395b37127" translate="yes">
          <source>The number to be formatted.</source>
          <target state="translated">フォーマットする番号。</target>
        </trans-unit>
        <trans-unit id="3f218a15291c3c94b883e1d87d28d7c7a5476b0c" translate="yes">
          <source>The number to format.</source>
          <target state="translated">フォーマットする番号。</target>
        </trans-unit>
        <trans-unit id="3b8a293a9d221bf54d50d885baa3a93087f6de40" translate="yes">
          <source>The object that matches the structure of the group.</source>
          <target state="translated">グループの構造に一致するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="1ed19258bb078822c2e224f36b5e607033a8910c" translate="yes">
          <source>The observable &lt;code&gt;Subscription&lt;/code&gt; will be handled by the &lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; and the component's &lt;code&gt;hero&lt;/code&gt; property will be (re)set with the retrieved hero.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;AsyncPipe&lt;/a&gt;&lt;/code&gt; 可能な &lt;code&gt;Subscription&lt;/code&gt; はAsyncPipeによって処理され、コンポーネントの &lt;code&gt;hero&lt;/code&gt; プロパティは取得されたヒーローで（リセット）設定されます。</target>
        </trans-unit>
        <trans-unit id="9652db2fe25fc5b8589f982bd18c51dc7f8cff2d" translate="yes">
          <source>The observable events of related services, such as &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt;, are not triggered.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#available&quot;&gt;SwUpdate.available&lt;/a&gt;&lt;/code&gt; などの関連サービスの監視可能なイベントはトリガーされません。</target>
        </trans-unit>
        <trans-unit id="9a424717c78d2ac09e12f0cde7f7e48fa3de1bd5" translate="yes">
          <source>The observable returned must be finite, meaning it must complete at some point. To convert an infinite observable into a finite one, pipe the observable through a filtering operator such as &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, or &lt;code&gt;takeUntil&lt;/code&gt;.</source>
          <target state="translated">返されるオブザーバブルは有限でなければなりません。つまり、ある時点で完了する必要があります。 無限のオブザーバブルを有限のオブザーバブルに変換するには、 &lt;code&gt;first&lt;/code&gt; 、 &lt;code&gt;last&lt;/code&gt; 、 &lt;code&gt;take&lt;/code&gt; 、 &lt;code&gt;takeUntil&lt;/code&gt; などのフィルタリング演算子を介してオブザーバブルをパイプします。</target>
        </trans-unit>
        <trans-unit id="3294239ebf17d384dfbf808355d9e127fde196ec" translate="yes">
          <source>The official name of our builder is now &lt;code&gt;@example/command-runner:command&lt;/code&gt;. The first part of this is the package name (resolved using node resolution), and the second part is the builder name (resolved using the &lt;code&gt;builders.json&lt;/code&gt; file).</source>
          <target state="translated">ビルダーの公式名は &lt;code&gt;@example/command-runner:command&lt;/code&gt; 。 この最初の部分はパッケージ名（ノード解決を使用して解決）、2番目の部分はビルダー名（ &lt;code&gt;builders.json&lt;/code&gt; ファイルを使用して解決）です。</target>
        </trans-unit>
        <trans-unit id="6da0f2f589e2727df45996f865813ce81bafd8dc" translate="yes">
          <source>The offline template compiler prevents a whole class of vulnerabilities called template injection, and greatly improves application performance. Use the offline template compiler in production deployments; don't dynamically generate templates. Angular trusts template code, so generating templates, in particular templates containing user data, circumvents Angular's built-in protections. For information about dynamically constructing forms in a safe way, see the &lt;a href=&quot;dynamic-form&quot;&gt;Dynamic Forms&lt;/a&gt; guide page.</source>
          <target state="translated">オフラインテンプレートコンパイラは、テンプレートインジェクションと呼ばれる脆弱性のクラス全体を防ぎ、アプリケーションのパフォーマンスを大幅に向上させます。 実稼働環境でオフラインテンプレートコンパイラを使用します。 テンプレートを動的に生成しないでください。 Angularはテンプレートコードを信頼するため、テンプレート、特にユーザーデータを含むテンプレートを生成すると、Angularの組み込み保護が回避されます。 安全な方法でフォームを動的に構築する方法については、 &lt;a href=&quot;dynamic-form&quot;&gt;動的フォーム&lt;/a&gt;ガイドページを参照してください。</target>
        </trans-unit>
        <trans-unit id="6c7235c164fd39687b519a25c40e459410556d6a" translate="yes">
          <source>The only resources that have hashes in the &lt;code&gt;ngsw.json&lt;/code&gt; manifest are resources that were present in the &lt;code&gt;dist&lt;/code&gt; directory at the time the manifest was built. Other resources, especially those loaded from CDNs, have content that is unknown at build time or are updated more frequently than the app is deployed.</source>
          <target state="translated">&lt;code&gt;ngsw.json&lt;/code&gt; マニフェストにハッシュを持つ唯一のリソースは、マニフェストの作成時に &lt;code&gt;dist&lt;/code&gt; ディレクトリに存在していたリソースです。 他のリソース、特にCDNからロードされたリソースには、ビルド時に不明なコンテンツがあるか、アプリがデプロイされるよりも頻繁に更新されます。</target>
        </trans-unit>
        <trans-unit id="f4bcd43dc4907e02b316af7146976c21f6e2dfd6" translate="yes">
          <source>The only step needed to provide initial &lt;code&gt;ng add&lt;/code&gt; support is to trigger an installation task using the &lt;code&gt;SchematicContext&lt;/code&gt;. The task uses the user's preferred package manager to add the library to the project's &lt;code&gt;package.json&lt;/code&gt; configuration file, and install it in the project&amp;rsquo;s &lt;code&gt;node_modules&lt;/code&gt; directory.</source>
          <target state="translated">初期 &lt;code&gt;ng add&lt;/code&gt; サポートを提供するために必要な唯一のステップは、 &lt;code&gt;SchematicContext&lt;/code&gt; を使用してインストールタスクをトリガーすることです。 タスクは、ユーザーの優先パッケージマネージャーを使用してライブラリをプロジェクトの &lt;code&gt;package.json&lt;/code&gt; 構成ファイルに追加し、プロジェクトの &lt;code&gt;node_modules&lt;/code&gt; ディレクトリにインストールします。</target>
        </trans-unit>
        <trans-unit id="2912e68aa8582b70396e57e3457bf64276abecb2" translate="yes">
          <source>The only substantive change is the pipe in the template. You can confirm in the live example that the &lt;em&gt;flying heroes&lt;/em&gt; display updates as you add heroes, even when you mutate the &lt;code&gt;heroes&lt;/code&gt; array.</source>
          <target state="translated">唯一の実質的な変更は、テンプレート内のパイプです。 ライブの例では、 &lt;code&gt;heroes&lt;/code&gt; 配列を変更した場合でも、ヒーローを追加すると&lt;em&gt;飛行ヒーローが&lt;/em&gt;更新を表示することを確認できます。</target>
        </trans-unit>
        <trans-unit id="f109536b44b3294896f12b200cc7c6870edc45c6" translate="yes">
          <source>The optional &lt;code&gt;aliases&lt;/code&gt; array specifies one or more strings that can be used to invoke the schematic. For example, the schematic for the Angular CLI &amp;ldquo;generate&amp;rdquo; command has an alias &amp;ldquo;g&amp;rdquo;, allowing you to use the command &lt;code&gt;ng g&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;aliases&lt;/code&gt; 配列は、回路図を呼び出すために使用できる1つ以上の文字列を指定します。 たとえば、Angular CLIの「generate」コマンドの回路図にはエイリアス「g」があり、コマンド &lt;code&gt;ng g&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="0bf8db3667ef2b53d6cae67ff56052e554006755" translate="yes">
          <source>The optional &lt;code&gt;foo&lt;/code&gt; route parameter is harmless and continues to be ignored.</source>
          <target state="translated">オプションの &lt;code&gt;foo&lt;/code&gt; routeパラメーターは無害であり、無視され続けます。</target>
        </trans-unit>
        <trans-unit id="c3e1faed39e73b09b3398a7ff71cedb3207da8d3" translate="yes">
          <source>The optional &lt;code&gt;schema&lt;/code&gt; property points to a JSON schema file that defines the command-line options available to the schematic.</source>
          <target state="translated">オプションの &lt;code&gt;schema&lt;/code&gt; プロパティは、回路図で使用可能なコマンドラインオプションを定義するJSONスキーマファイルを指します。</target>
        </trans-unit>
        <trans-unit id="c789a1755156dab1f29d2365875888242e710fed" translate="yes">
          <source>The optional route parameters are not separated by &quot;?&quot; and &quot;&amp;amp;&quot; as they would be in the URL query string. They are &lt;strong&gt;separated by semicolons &quot;;&quot;&lt;/strong&gt; This is &lt;em&gt;matrix URL&lt;/em&gt; notation&amp;mdash;something you may not have seen before.</source>
          <target state="translated">オプションのルートパラメータは「？」で区切られていません およびURLクエリ文字列にある「＆」。 これらは&lt;strong&gt;セミコロン「;」で区切られています&lt;/strong&gt; これは、 &lt;em&gt;マトリックスURL&lt;/em&gt;表記です。これまで見たことがないかもしれません。</target>
        </trans-unit>
        <trans-unit id="8a35351d188a98c16c0b786429358c0c165ee4c9" translate="yes">
          <source>The options &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;styles&lt;/code&gt;, and &lt;code&gt;scripts&lt;/code&gt; can have either simple path string values, or object values with specific fields. The &lt;code&gt;sourceMap&lt;/code&gt; and &lt;code&gt;optimization&lt;/code&gt; options can be set to a simple Boolean value with a command flag, but can also be given a complex value using the configuration file. The following sections provide more details of how these complex values are used in each case.</source>
          <target state="translated">オプションの &lt;code&gt;assets&lt;/code&gt; 、 &lt;code&gt;styles&lt;/code&gt; 、および &lt;code&gt;scripts&lt;/code&gt; は、単純なパス文字列値、または特定のフィールドを持つオブジェクト値のいずれかを含めることができます。 &lt;code&gt;sourceMap&lt;/code&gt; および &lt;code&gt;optimization&lt;/code&gt; オプションは、コマンドフラグを使用して単純なブール値に設定できますが、構成ファイルを使用して複雑な値を指定することもできます。 次のセクションでは、これらの複雑な値が各ケースでどのように使用されるかについて詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="5a7271913fb719bd7b5e39dde45d44587b784fb2" translate="yes">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the array level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">optionsオブジェクトは、各子コントロールの &lt;code&gt;updateOn&lt;/code&gt; プロパティのデフォルト値を設定するために使用されます。 配列レベルで &lt;code&gt;updateOn&lt;/code&gt; を &lt;code&gt;'blur'&lt;/code&gt; に設定すると、子が異なる &lt;code&gt;updateOn&lt;/code&gt; 値を明示的に指定していない限り、すべての子コントロールはデフォルトで「blur」になります。</target>
        </trans-unit>
        <trans-unit id="6e5341d5e74eb1a6542f76853fe596992c982b9a" translate="yes">
          <source>The options object is used to set a default value for each child control's &lt;code&gt;updateOn&lt;/code&gt; property. If you set &lt;code&gt;updateOn&lt;/code&gt; to &lt;code&gt;'blur'&lt;/code&gt; at the group level, all child controls default to 'blur', unless the child has explicitly specified a different &lt;code&gt;updateOn&lt;/code&gt; value.</source>
          <target state="translated">optionsオブジェクトは、各子コントロールの &lt;code&gt;updateOn&lt;/code&gt; プロパティのデフォルト値を設定するために使用されます。 グループレベルで &lt;code&gt;updateOn&lt;/code&gt; を &lt;code&gt;'blur'&lt;/code&gt; に設定した場合、子が異なる &lt;code&gt;updateOn&lt;/code&gt; 値を明示的に指定していない限り、すべての子コントロールはデフォルトで「blur」になります。</target>
        </trans-unit>
        <trans-unit id="746585f9d309cd4a0ba0d2fbf9b96110e934c17e" translate="yes">
          <source>The options object provides default values for the two inputs that we defined; &lt;code&gt;command&lt;/code&gt;, which is the Unix command to execute, and &lt;code&gt;args&lt;/code&gt;, an array that contains the file to operate on.</source>
          <target state="translated">optionsオブジェクトは、定義した2つの入力のデフォルト値を提供します。 &lt;code&gt;command&lt;/code&gt; は実行するUnixコマンドで、 &lt;code&gt;args&lt;/code&gt; は操作対象のファイルを含む配列です。</target>
        </trans-unit>
        <trans-unit id="a808828e19354aac449233df39a10e00fae8dee0" translate="yes">
          <source>The options provide configuration metadata that determines how the directive should be processed, instantiated and used at runtime.</source>
          <target state="translated">これらのオプションは、実行時にディレクティブを処理、インスタンス化、および使用する方法を決定する構成メタデータを提供します。</target>
        </trans-unit>
        <trans-unit id="05c7ae2f84882bcfa37ddd31c179aced5dca729d" translate="yes">
          <source>The order of class declaration matters in TypeScript. You can't refer directly to a class until it's been defined.</source>
          <target state="translated">TypeScriptでは、クラス宣言の順序が重要です。 定義されるまで、クラスを直接参照することはできません。</target>
        </trans-unit>
        <trans-unit id="6c7cad94283dc8992d7c11c563fd215a38191432" translate="yes">
          <source>The order of route configuration matters. The router accepts the first route that matches a navigation request path.</source>
          <target state="translated">ルート構成の順序が重要です。 ルーターは、ナビゲーション要求パスに一致する最初のルートを受け入れます。</target>
        </trans-unit>
        <trans-unit id="41216db2f85115d74834c152bfa23e599dd9f3f6" translate="yes">
          <source>The original &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states, with the original changes in height, color, and opacity, occurring over a timeframe of 1 second</source>
          <target state="translated">元の &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;closed&lt;/code&gt; 状態。高さ、色、不透明度の元の変化が1秒の時間枠で発生します</target>
        </trans-unit>
        <trans-unit id="5c3fc45bc2db2f7c8beca6fdc1270fdd65714fae" translate="yes">
          <source>The original response continues untouched back up through the chain of interceptors to the application caller.</source>
          <target state="translated">元の応答は、インターセプターのチェーンを介してアプリケーション呼び出し元にそのままバックアップされます。</target>
        </trans-unit>
        <trans-unit id="8475e386138bc203bd52458f303f075a4b824138" translate="yes">
          <source>The other feature module's routing module is configured similarly.</source>
          <target state="translated">他の機能モジュールのルーティングモジュールも同様に構成されます。</target>
        </trans-unit>
        <trans-unit id="ac2033a02f00fb6e865ead163931aca26717c78d" translate="yes">
          <source>The other possible &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value is &lt;code&gt;'prefix'&lt;/code&gt; which tells the router to match the redirect route when the &lt;em&gt;remaining&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;begins&lt;/em&gt;&lt;/strong&gt; with the redirect route's &lt;em&gt;prefix&lt;/em&gt; path.</source>
          <target state="translated">他の可能な &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 値は &lt;code&gt;'prefix'&lt;/code&gt; これは、 &lt;em&gt;残りの&lt;/em&gt; URL &lt;strong&gt;&lt;em&gt;が&lt;/em&gt;&lt;/strong&gt;リダイレクトルートの&lt;em&gt;プレフィックス&lt;/em&gt;パスで&lt;strong&gt;&lt;em&gt;始まる&lt;/em&gt;&lt;/strong&gt;場合に、リダイレクトルートと一致するようにルーターに指示します。</target>
        </trans-unit>
        <trans-unit id="683021b4260938edc921d666701a253150e18ddb" translate="yes">
          <source>The outer and inner &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instances are assembled into views as follows:</source>
          <target state="translated">外側と内側の &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; インスタンスは、次のようにビューにアセンブルされます。</target>
        </trans-unit>
        <trans-unit id="db438b04615ada9c6a8e0f3ec02854c6d2f5ac5b" translate="yes">
          <source>The outgoing HTTP request method.</source>
          <target state="translated">発信HTTPリクエストメソッド。</target>
        </trans-unit>
        <trans-unit id="ab71fe70e254aa60e106538ded89aa5355abd19f" translate="yes">
          <source>The outgoing URL with all URL parameters set.</source>
          <target state="translated">すべてのURLパラメーターが設定された発信URL。</target>
        </trans-unit>
        <trans-unit id="29b0a52a0f9e42ada2a44024b4ce3442efa10abc" translate="yes">
          <source>The outgoing request object to handle.</source>
          <target state="translated">処理する発信要求オブジェクト。</target>
        </trans-unit>
        <trans-unit id="4e584659815c873b9863b2023a8d1da485d88c69" translate="yes">
          <source>The outlet name of the route</source>
          <target state="translated">ルートのアウトレット名</target>
        </trans-unit>
        <trans-unit id="427ee8154382c38b7d171dfb79623a53e63a0fd6" translate="yes">
          <source>The outlet name of the route, a constant.</source>
          <target state="translated">ルートのアウトレット名、定数。</target>
        </trans-unit>
        <trans-unit id="bcedcd9799379281170f96329a0199438fc48892" translate="yes">
          <source>The output array will be ordered by keys. By default the comparator will be by Unicode point value. You can optionally pass a compareFn if your keys are complex types.</source>
          <target state="translated">出力配列はキー順に並べられます。 デフォルトでは、コンパレータはUnicodeポイント値に基づいています。 キーが複合型の場合、オプションでcompareFnを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="7e3805c6cd01668729e336d07b3bf6176de112bf" translate="yes">
          <source>The output directory for build results.</source>
          <target state="translated">ビルド結果の出力ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="3f8aa866a39412d582722989844ba25d2bbcc37b" translate="yes">
          <source>The output folder is &lt;code&gt;dist/project-name/&lt;/code&gt; by default. To output to a different folder, change the &lt;code&gt;outputPath&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">出力フォルダーは、デフォルトでは &lt;code&gt;dist/project-name/&lt;/code&gt; です。 別のフォルダーに出力するには、 &lt;code&gt;outputPath&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="fa555da87eea14ed125658bcb8bbbf275e304596" translate="yes">
          <source>The output in the view would be:</source>
          <target state="translated">ビューの出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="61eeb6aa93a200e68991925d7feb4a198a9bbc45" translate="yes">
          <source>The output locations are printed in the output.</source>
          <target state="translated">出力場所は出力に印刷されます。</target>
        </trans-unit>
        <trans-unit id="36f38bb92f919b4487aa12bfc0fbbe03a7e4f8ef" translate="yes">
          <source>The outputs of the component.</source>
          <target state="translated">コンポーネントの出力。</target>
        </trans-unit>
        <trans-unit id="b8c774af30b04ee8bc9afcca4c83e98bbbdacecb" translate="yes">
          <source>The overall structure of the &lt;code&gt;updateHero()&lt;/code&gt; method is similar to that of &lt;code&gt;getHeroes()&lt;/code&gt;, but it uses &lt;code&gt;http.put()&lt;/code&gt; to persist the changed hero on the server. Add the following to the &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;updateHero()&lt;/code&gt; メソッドの全体的な構造は &lt;code&gt;getHeroes()&lt;/code&gt; 構造と似ていますが、 http.put（）を使用して、変更されたヒーローをサーバーに永続化します。 以下を &lt;code&gt;HeroService&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="12119367c4766736842fde0c43c23fc7012b447d" translate="yes">
          <source>The override tests</source>
          <target state="translated">オーバーライドテスト</target>
        </trans-unit>
        <trans-unit id="cecd7ea3164b66bdc1ebb3846e85c8cad94a7d0d" translate="yes">
          <source>The package to be added.</source>
          <target state="translated">追加するパッケージ。</target>
        </trans-unit>
        <trans-unit id="605c3739fd71bc00a4ed1ba45664e517e73bc270" translate="yes">
          <source>The packages listed in the &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; are essential to &lt;em&gt;running&lt;/em&gt; applications.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; セクションにリストされているパッケージは、アプリケーションの&lt;em&gt;実行に&lt;/em&gt;不可欠です。</target>
        </trans-unit>
        <trans-unit id="80dcc126c1685ed6246cc6c4e4f678dbe5b7a91b" translate="yes">
          <source>The packages listed in the &lt;code&gt;devDependencies&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt; help you develop the application on your local machine. You don't deploy them with the production application.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;devDependencies&lt;/code&gt; セクションにリストされているパッケージは、ローカルマシンでアプリケーションを開発するのに役立ちます。 本番アプリケーションでそれらをデプロイすることはありません。</target>
        </trans-unit>
        <trans-unit id="a91b89dd5ef65469422d3ef6e3e02edce3d9a4f2" translate="yes">
          <source>The page is reloaded/refreshed.</source>
          <target state="translated">ページがリロード/更新されます。</target>
        </trans-unit>
        <trans-unit id="b2b646185b55821ee60d26f71064b66b6eee386d" translate="yes">
          <source>The page no longer displays properly because you changed the hero from a string to an object.</source>
          <target state="translated">ヒーローを文字列からオブジェクトに変更したため、ページは正しく表示されなくなりました。</target>
        </trans-unit>
        <trans-unit id="45bba286f5d6066ed3bf3bcd1c4ffd4a6469b7b6" translate="yes">
          <source>The page requests an update be immediately activated via the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">このページは、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; サービスを介してすぐに更新をアクティブにするように要求します。</target>
        </trans-unit>
        <trans-unit id="d7114b73bd8fae35327a37dbe1c3217b440f55ff" translate="yes">
          <source>The page you see is the &lt;em&gt;application shell&lt;/em&gt;. The shell is controlled by an Angular &lt;strong&gt;component&lt;/strong&gt; named &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">表示されるページは&lt;em&gt;アプリケーションシェル&lt;/em&gt;です。 シェルは、 &lt;code&gt;AppComponent&lt;/code&gt; という名前のAngular &lt;strong&gt;コンポーネント&lt;/strong&gt;によって制御されます 。</target>
        </trans-unit>
        <trans-unit id="dc0d5bcdb4927dad0eb89021491daf6f6e13f7e8" translate="yes">
          <source>The parameter name.</source>
          <target state="translated">パラメータ名。</target>
        </trans-unit>
        <trans-unit id="f11e186d7179311f50be914a4fe6431b1ffd3f4d" translate="yes">
          <source>The parameter simultaneously defines a private &lt;code&gt;heroService&lt;/code&gt; property and identifies it as a &lt;code&gt;HeroService&lt;/code&gt; injection site.</source>
          <target state="translated">このパラメーターは、プライベート &lt;code&gt;heroService&lt;/code&gt; プロパティを同時に定義し、 &lt;code&gt;HeroService&lt;/code&gt; インジェクションサイトとして識別します。</target>
        </trans-unit>
        <trans-unit id="a471c31a25dfc4c5093392a2386d76746208b100" translate="yes">
          <source>The parameter value can be any valid template expression, (see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;Template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page) such as a string literal or a component property. In other words, you can control the format through a binding the same way you control the birthday value through a binding.</source>
          <target state="translated">パラメータ値には、文字列リテラルやコンポーネントプロパティなど、有効なテンプレート式（[ &lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文]&lt;/a&gt;ページの[ &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式]&lt;/a&gt;セクションを参照）を使用できます。 つまり、バインディングを介して誕生日の値を制御するのと同じ方法で、バインディングを介して形式を制御できます。</target>
        </trans-unit>
        <trans-unit id="a2f2e40ff634b01ef533833632126053be3035ce" translate="yes">
          <source>The parent &lt;code&gt;AppComponent&lt;/code&gt; doesn't need to know about the dependencies of dependencies. Declare what's needed in the constructor (in this case &lt;code&gt;LoggerService&lt;/code&gt; and &lt;code&gt;UserContextService&lt;/code&gt;) and the framework resolves the nested dependencies.</source>
          <target state="translated">親 &lt;code&gt;AppComponent&lt;/code&gt; は、依存関係の依存関係について知る必要はありません。 コンストラクターで必要なもの（この場合は &lt;code&gt;LoggerService&lt;/code&gt; および &lt;code&gt;UserContextService&lt;/code&gt; ）を宣言すると、フレームワークはネストされた依存関係を解決します。</target>
        </trans-unit>
        <trans-unit id="eb7dc6ea9c849b17c83ab843ef634a845e0cc4b4" translate="yes">
          <source>The parent &lt;code&gt;HeroBiosComponent&lt;/code&gt; binds a value to &lt;code&gt;heroId&lt;/code&gt;. &lt;code&gt;ngOnInit&lt;/code&gt; passes that ID to the service, which fetches and caches the hero. The getter for the &lt;code&gt;hero&lt;/code&gt; property pulls the cached hero from the service. The template displays this data-bound property.</source>
          <target state="translated">親の &lt;code&gt;HeroBiosComponent&lt;/code&gt; は、値をheroIdにバインドします。 &lt;code&gt;ngOnInit&lt;/code&gt; はそのIDをサービスに渡し、サービスはヒーローを取得してキャッシュします。 &lt;code&gt;hero&lt;/code&gt; プロパティのゲッターは、キャッシュされたヒーローをサービスから取得します。 テンプレートには、このデータバインドプロパティが表示されます。</target>
        </trans-unit>
        <trans-unit id="6cd3e3252a82b27dd42c44952cca27ac0ef0a581" translate="yes">
          <source>The parent &lt;code&gt;VoteTakerComponent&lt;/code&gt; binds an event handler called &lt;code&gt;onVoted()&lt;/code&gt; that responds to the child event payload &lt;code&gt;$event&lt;/code&gt; and updates a counter.</source>
          <target state="translated">親の &lt;code&gt;VoteTakerComponent&lt;/code&gt; は、子イベントペイロード &lt;code&gt;$event&lt;/code&gt; 応答してカウンターを更新する &lt;code&gt;onVoted()&lt;/code&gt; というイベントハンドラーをバインドします。</target>
        </trans-unit>
        <trans-unit id="a6895c8ceeed733901d1a5ee2c80a8927e951506" translate="yes">
          <source>The parent component cannot data bind to the child's &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; methods nor to its &lt;code&gt;seconds&lt;/code&gt; property.</source>
          <target state="translated">親コンポーネントは、子の &lt;code&gt;start&lt;/code&gt; および &lt;code&gt;stop&lt;/code&gt; メソッドやその &lt;code&gt;seconds&lt;/code&gt; プロパティにデータバインドできません。</target>
        </trans-unit>
        <trans-unit id="ccf3b5f4773641faf3c55a350577e0c6cd3528dd" translate="yes">
          <source>The parent component class and template</source>
          <target state="translated">親コンポーネントクラスとテンプレート</target>
        </trans-unit>
        <trans-unit id="b69dbb3eb5bb7d6ff61f200cca2db7e39afc938d" translate="yes">
          <source>The parent control.</source>
          <target state="translated">親コントロール。</target>
        </trans-unit>
        <trans-unit id="1d5682396420bbc4186bac1b479e30f0a2e910c6" translate="yes">
          <source>The parent must cooperate by providing an &lt;em&gt;alias&lt;/em&gt; to itself in the name of a class interface token.</source>
          <target state="translated">親は、クラスインターフェイストークンの名前で自分自身に&lt;em&gt;エイリアス&lt;/em&gt;を提供することで協力する必要があります。</target>
        </trans-unit>
        <trans-unit id="934dc6ecfaf214b64d3b92a5c9d8431b54cdb963" translate="yes">
          <source>The parent node in the url tree</source>
          <target state="translated">URLツリーの親ノード</target>
        </trans-unit>
        <trans-unit id="8fd36ababa58725780954fcf5f9d1c970d8528ab" translate="yes">
          <source>The parent node.</source>
          <target state="translated">親ノード。</target>
        </trans-unit>
        <trans-unit id="0a0f0dc2aaf6c1c595258b9e8784715a84b50c67" translate="yes">
          <source>The parent of this player, if any.</source>
          <target state="translated">このプレーヤーの親（ある場合）。</target>
        </trans-unit>
        <trans-unit id="67d15ddca6f8e438ee84b955f2b25fe3a494f70e" translate="yes">
          <source>The parent of this route in the router state tree</source>
          <target state="translated">ルーター状態ツリー内のこのルートの親</target>
        </trans-unit>
        <trans-unit id="2903a28e9071275ef7593599182782527f1f0ab5" translate="yes">
          <source>The parent of this route in the router state tree.</source>
          <target state="translated">ルーター状態ツリー内のこのルートの親。</target>
        </trans-unit>
        <trans-unit id="da18e4e25f47d18df9195287587b131efcbb8846" translate="yes">
          <source>The parentheses around &lt;code&gt;click&lt;/code&gt; tell Angular to listen for the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element's &lt;code&gt;click&lt;/code&gt; event. When the user clicks in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, Angular executes the &lt;code&gt;onSelect(hero)&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; 囲む括弧は、Angularに &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;click&lt;/code&gt; イベントをリッスンするように指示します 。 ユーザーが &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; をクリックすると、Angularは &lt;code&gt;onSelect(hero)&lt;/code&gt; 式を実行します。</target>
        </trans-unit>
        <trans-unit id="29591102485816b32c99b4b31ce4e781fbd9a2cd" translate="yes">
          <source>The partial response body as downloaded so far.</source>
          <target state="translated">これまでにダウンロードされた部分応答本文。</target>
        </trans-unit>
        <trans-unit id="a0035afe05127ba28a95a7b2b648e50cf8b95d4b" translate="yes">
          <source>The passed-in providers can be an array of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;, or a recursive array of more providers.</source>
          <target state="translated">渡されるプロバイダーは、 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; の配列、またはより多くのプロバイダーの再帰的配列にすることができます。</target>
        </trans-unit>
        <trans-unit id="23b9cd25cc8870c80722d2ac4c13f170a781fd85" translate="yes">
          <source>The pasted HTML refers to a &lt;code&gt;selectedHero&lt;/code&gt;. The new &lt;code&gt;HeroDetailComponent&lt;/code&gt; can present &lt;em&gt;any&lt;/em&gt; hero, not just a selected hero. So replace &quot;selectedHero&quot; with &quot;hero&quot; everywhere in the template.</source>
          <target state="translated">貼り付けられたHTMLは &lt;code&gt;selectedHero&lt;/code&gt; を参照します。 新しい &lt;code&gt;HeroDetailComponent&lt;/code&gt; は、選択されたヒーローだけでなく、 &lt;em&gt;任意の&lt;/em&gt;ヒーローを表示できます。 そのため、テンプレートのすべての場所で「selectedHero」を「hero」に置き換えます。</target>
        </trans-unit>
        <trans-unit id="2571c9d77bbaccfdb1c7e7ad5cf492440d3e60a6" translate="yes">
          <source>The path at which to create the library's public API file, relative to the workspace root.</source>
          <target state="translated">ライブラリのパブリックAPIファイルを作成するパス。ワークスペースのルートを基準にします。</target>
        </trans-unit>
        <trans-unit id="deb5ccf2b009e5d123d0a690e376af4b80917816" translate="yes">
          <source>The path can be absolute or relative to the current working directory where the command is executed. For example, to run the schematic we just generated (which has no required options), use the following command.</source>
          <target state="translated">パスは、絶対パスでも、コマンドが実行される現在の作業ディレクトリからの相対パスでもかまいません。 たとえば、生成した回路図（必要なオプションはありません）を実行するには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="c044146e6280c52cf5a46b481e94eb7064916400" translate="yes">
          <source>The path from the root of the router state tree to this route</source>
          <target state="translated">ルーター状態ツリーのルートからこのルートへのパス</target>
        </trans-unit>
        <trans-unit id="ffce671b3d1acbfaba292b2709f2546bc87cd1c1" translate="yes">
          <source>The path from the root of the router state tree to this route.</source>
          <target state="translated">ルーター状態ツリーのルートからこのルートへのパス。</target>
        </trans-unit>
        <trans-unit id="7815a518ee4716a2b1120142147e7d95775a8e78" translate="yes">
          <source>The path of the source directory.</source>
          <target state="translated">ソースディレクトリのパス。</target>
        </trans-unit>
        <trans-unit id="5a4facd2991ea2981fac7027d7268d40140867a3" translate="yes">
          <source>The path part of a URL segment</source>
          <target state="translated">URLセグメントのパス部分</target>
        </trans-unit>
        <trans-unit id="57501241fca71416c36ef15c3a51d7c6e44f1317" translate="yes">
          <source>The path string</source>
          <target state="translated">パス文字列</target>
        </trans-unit>
        <trans-unit id="1a9c4ada156081d91a1927cd0a28c70af244c81e" translate="yes">
          <source>The path to match against. Cannot be used together with a custom &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; function. A URL string that uses router matching notation. Can be a wild card (&lt;code&gt;**&lt;/code&gt;) that matches any URL (see Usage Notes below). Default is &quot;/&quot; (the root path).</source>
          <target state="translated">照合するパス。 カスタム &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; 関数と一緒に使用することはできません。 ルーター一致表記を使用するURL文字列。 任意のURLに一致するワイルドカード（ &lt;code&gt;**&lt;/code&gt; ）にすることができます（以下の使用上の注意を参照）。 デフォルトは「/」（ルートパス）です。</target>
        </trans-unit>
        <trans-unit id="9ea7c1cb9a5d01a52764c83bce6591f48a706bc8" translate="yes">
          <source>The path to the 'street' control from the root form would be 'address' -&amp;gt; 'street'.</source>
          <target state="translated">ルートフォームから「ストリート」コントロールへのパスは、「アドレス」-&amp;gt;「ストリート」になります。</target>
        </trans-unit>
        <trans-unit id="3ef9964ab8f09b8e12ab9dd768d9f14677db6668" translate="yes">
          <source>The path to this group from the top-level directive.</source>
          <target state="translated">最上位ディレクティブからこのグループへのパス。</target>
        </trans-unit>
        <trans-unit id="81b3c5aa5a142e56a8cc65e9cb4384f3838d042c" translate="yes">
          <source>The path to this group.</source>
          <target state="translated">このグループへのパス。</target>
        </trans-unit>
        <trans-unit id="c5155f988648d9eafa70e267b1c2b7d6a2bb54ed" translate="yes">
          <source>The path where new projects will be created, relative to the new workspace root.</source>
          <target state="translated">新しいワークスペースのルートを基準にした、新しいプロジェクトが作成されるパス。</target>
        </trans-unit>
        <trans-unit id="6bff124c5ff1260658dbe66420f0ad585635ee2f" translate="yes">
          <source>The path where style resources will be placed, relative to outputPath.</source>
          <target state="translated">outputPathを基準にした、スタイルリソースが配置されるパス。</target>
        </trans-unit>
        <trans-unit id="efc330a017153f448a0111c70f94ac011295b24b" translate="yes">
          <source>The path-match strategy 'full' matches against the entire URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.</source>
          <target state="translated">パス一致戦略 'full'は、URL全体と一致します。 empty-pathルートをリダイレクトするときにこれを行うことが重要です。 それ以外の場合、空のパスはURLのプレフィックスであるため、ルーターはリダイレクト先に移動してもリダイレクトを適用し、無限ループを作成します。</target>
        </trans-unit>
        <trans-unit id="7aedc08e6bf2368ad910279f0b057e807d83e9f8" translate="yes">
          <source>The path-matching strategy, one of 'prefix' or 'full'. Default is 'prefix'.</source>
          <target state="translated">「prefix」または「full」のいずれかのパスマッチング戦略。 デフォルトは「prefix」です。</target>
        </trans-unit>
        <trans-unit id="10817689f142f9440662eeb6d05887794bb18bb9" translate="yes">
          <source>The pathname where the app will be served.</source>
          <target state="translated">アプリが提供されるパス名。</target>
        </trans-unit>
        <trans-unit id="ddea77aa7e88eee7c5407247c21aa1d815f8f4fa" translate="yes">
          <source>The pipe class implements the &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; interface's &lt;code&gt;transform&lt;/code&gt; method that accepts an input value followed by optional parameters and returns the transformed value.</source>
          <target state="translated">pipeクラスは &lt;code&gt;&lt;a href=&quot;../api/core/pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; インターフェイスの &lt;code&gt;transform&lt;/code&gt; メソッドを実装します。このメソッドは、オプションのパラメーターが続く入力値を受け入れ、変換された値を返します。</target>
        </trans-unit>
        <trans-unit id="f73953d503dce99e3f2e6da39da4ce7debe6ac7d" translate="yes">
          <source>The pipe name to use in template bindings. Typically uses &lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCase&lt;/a&gt; because the name cannot contain hyphens.</source>
          <target state="translated">テンプレートバインディングで使用するパイプ名。 名前にハイフンを含めることはできないため、通常は&lt;a href=&quot;../../guide/glossary#case-types&quot;&gt;lowerCamelCaseを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="345412f14368a1f164257004a17666a92c69e9a0" translate="yes">
          <source>The pipe operator (&lt;code&gt;|&lt;/code&gt;)</source>
          <target state="translated">パイプ演算子（ &lt;code&gt;|&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="47f93ef7f7a798e2556f7e8b9c63fade54c0a39a" translate="yes">
          <source>The pipe operator has a higher precedence than the ternary operator (&lt;code&gt;?:&lt;/code&gt;), which means &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; is parsed as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt;. Nevertheless, for a number of reasons, the pipe operator cannot be used without parentheses in the first and second operands of &lt;code&gt;?:&lt;/code&gt;. A good practice is to use parentheses in the third operand too.</source>
          <target state="translated">パイプ演算子の優先順位は、三項演算子（ &lt;code&gt;?:&lt;/code&gt; ：）よりも高く、これは &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : c | x&lt;/code&gt; b：c | xは &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt; ? b : (c | x)&lt;/code&gt; として解析されます b：（c | x） 。 それにもかかわらず、いくつかの理由により、パイプ演算子は &lt;code&gt;?:&lt;/code&gt; 第1および第2オペランドに括弧なしでは使用できません。 第3オペランドにも括弧を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ed50cd1104edcdf07f478c9622d53824cc197dcf" translate="yes">
          <source>The pipe operator passes the result of an expression on the left to a pipe function on the right.</source>
          <target state="translated">パイプ演算子は、左側の式の結果を右側のパイプ関数に渡します。</target>
        </trans-unit>
        <trans-unit id="8eb7ba48d7c30018b592c2a263ffe9de1745ef67" translate="yes">
          <source>The pipes discussed earlier in this page are implemented with pure functions. The built-in &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; is a pure pipe with a pure function implementation. So are the &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; and &lt;code&gt;FlyingHeroesPipe&lt;/code&gt;. A few steps back, you reviewed the &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;&amp;mdash;an impure pipe with a pure function.</source>
          <target state="translated">このページで前述したパイプは、純粋な関数で実装されています。 組み込みの &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; は、純粋な関数実装を備えた純粋なパイプです。 &lt;code&gt;ExponentialStrengthPipe&lt;/code&gt; と &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; も同様です。 少し前に、 &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; （純粋な関数を持つ不純なパイプ）を確認しました。</target>
        </trans-unit>
        <trans-unit id="120783f4944d7609420e4fa2d8de1cd7b96a2fd4" translate="yes">
          <source>The popup should stay open, even when switching between pages in the application, until the user closes it by sending the message or canceling. Clearly you can't put the popup in the same outlet as the other pages.</source>
          <target state="translated">ユーザーがメッセージを送信するかキャンセルすることによって閉じるまで、アプリケーション内のページを切り替えるときでも、ポップアップは開いたままでなければなりません。 明らかに、他のページと同じアウトレットにポップアップを配置することはできません。</target>
        </trans-unit>
        <trans-unit id="bfe8a90e0b39cf0e03648ad7ceb8f68c1e9609e0" translate="yes">
          <source>The port to use to serve the application.</source>
          <target state="translated">アプリケーションの提供に使用するポート。</target>
        </trans-unit>
        <trans-unit id="d900c6fbbdec6ccc354680413a57b4ab661e72cc" translate="yes">
          <source>The practice of cloning a request to set new headers is so common that there's a &lt;code&gt;setHeaders&lt;/code&gt; shortcut for it:</source>
          <target state="translated">新しいヘッダーを設定する要求を複製する方法は非常に一般的であるため、 &lt;code&gt;setHeaders&lt;/code&gt; ショートカットがあります。</target>
        </trans-unit>
        <trans-unit id="d79f7ddd3370cdaec456ab22eea48dab91ad8972" translate="yes">
          <source>The practices described in this document apply to Angular 2.0 and later. If you are currently using AngularJS, see &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">このドキュメントで説明されているプラ​​クティスは、Angular 2.0以降に適用されます。 現在AngularJSを使用している場合は&lt;a href=&quot;upgrade&quot;&gt;、AngularJSからのアップグレードを&lt;/a&gt;参照してください。 &lt;em&gt;AngularJS&lt;/em&gt;は、Angularのすべてのv1.xバージョンの名前です。</target>
        </trans-unit>
        <trans-unit id="1b61f5ed114256e63478f78b9527841ff42f1f55" translate="yes">
          <source>The predicate is any method that takes a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; and returns a &lt;em&gt;truthy&lt;/em&gt; value. The following example finds all &lt;code&gt;DebugElements&lt;/code&gt; with a reference to a template local variable named &quot;content&quot;:</source>
          <target state="translated">述語は、 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; を取り、 &lt;em&gt;真理&lt;/em&gt;値を返す&lt;em&gt;メソッド&lt;/em&gt;です。 次の例では、「content」という名前のテンプレートローカル変数への参照を持つすべての &lt;code&gt;DebugElements&lt;/code&gt; を検索します。</target>
        </trans-unit>
        <trans-unit id="ce3e8a27555504e35c1b0cf83f429a0f13cb6911" translate="yes">
          <source>The preemptive error message tells you to compile explicitly with &lt;code&gt;compileComponents()&lt;/code&gt;.</source>
          <target state="translated">プリエンプティブなエラーメッセージは、 &lt;code&gt;compileComponents()&lt;/code&gt; を使用して明示的にコンパイルするように指示します。</target>
        </trans-unit>
        <trans-unit id="531aa0c92c5d9b66edd1abb9d99a1c78f864e5f1" translate="yes">
          <source>The preferred solution is to add a &lt;code&gt;redirect&lt;/code&gt; route that translates the initial relative URL (&lt;code&gt;''&lt;/code&gt;) to the desired default path (&lt;code&gt;/heroes&lt;/code&gt;). The browser address bar shows &lt;code&gt;.../heroes&lt;/code&gt; as if you'd navigated there directly.</source>
          <target state="translated">推奨される解決策は、初期相対URL（ &lt;code&gt;''&lt;/code&gt; ）を目的のデフォルトパス（ &lt;code&gt;/heroes&lt;/code&gt; ）に変換する &lt;code&gt;redirect&lt;/code&gt; ルートを追加することです。 ブラウザのアドレスバーには、そこに直接移動したかのように &lt;code&gt;.../heroes&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="323804b4601311b642368194508cfb069c1a6100" translate="yes">
          <source>The preferred way to configure the strategy is to add a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt; element&lt;/a&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">戦略を設定する好ましい方法は、 &lt;code&gt;index.html&lt;/code&gt; の &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&amp;lt;base href&amp;gt;要素&lt;/a&gt;タグを追加することです。</target>
        </trans-unit>
        <trans-unit id="be94b295da6b6dfbe7f415ce1a95d804f5cc29c3" translate="yes">
          <source>The preferred way to un-ignore a file is to update the &lt;code&gt;content/examples/.gitignore&lt;/code&gt; like this:</source>
          <target state="translated">ファイルの無視を &lt;code&gt;content/examples/.gitignore&lt;/code&gt; する好ましい方法は、 次のようにcontent / examples / .gitignoreを更新することです：</target>
        </trans-unit>
        <trans-unit id="1f0086cdbedbb14fe8c9bfa9cacc9506b54363c6" translate="yes">
          <source>The prefix to apply to generated selectors for the initial project.</source>
          <target state="translated">初期プロジェクト用に生成されたセレクターに適用するプレフィックス。</target>
        </trans-unit>
        <trans-unit id="25c273d85b73af2578dc0a29b3ba9b91dc63aba8" translate="yes">
          <source>The prefix to apply to the generated component selector.</source>
          <target state="translated">生成されたコンポーネントセレクタに適用するプレフィックス。</target>
        </trans-unit>
        <trans-unit id="cfd2a19c32615eb586fdc1467f3daf305549c48a" translate="yes">
          <source>The preloader optimistically loads all router configurations to make navigations into lazily-loaded sections of the application faster.</source>
          <target state="translated">プリローダーは、すべてのルーター構成を楽観的にロードして、アプリケーションの遅延ロードセクションへのナビゲーションを高速化します。</target>
        </trans-unit>
        <trans-unit id="f42acc2b5381961d93f1b9bb1b38efec3174a5c2" translate="yes">
          <source>The preloader runs in the background. When the router bootstraps, the preloader starts listening to all navigation events. After every such event, the preloader will check if any configurations can be loaded lazily.</source>
          <target state="translated">プリローダーはバックグラウンドで実行されます。 ルーターがブートストラップすると、プリローダーはすべてのナビゲーションイベントのリッスンを開始します。 このようなイベントが発生するたびに、プリローダーは構成を遅延ロードできるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="5d55f652f32922a327beff0bc5b2217e949bdf3d" translate="yes">
          <source>The presence of &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tags in the component's template.</source>
          <target state="translated">コンポーネントのテンプレート内の &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; タグの存在。</target>
        </trans-unit>
        <trans-unit id="00d3e678b5578ba56bc0d2cfcaf26815fef02171" translate="yes">
          <source>The presence of the implicit template object has implications for the nesting of structural directives. For more on this subject, see &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">暗黙的なテンプレートオブジェクトの存在は、構造的なディレクティブのネストに影響を与えます。 このテーマの詳細については、 &lt;a href=&quot;../../guide/structural-directives#one-per-element&quot;&gt;構造ディレクティブを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b42061155850ee530a76aac5296dde7e21feb2b3" translate="yes">
          <source>The presence of this method is a signal to the Ivy template type-check compiler that the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; structural directive renders its template with a specific context type.</source>
          <target state="translated">このメソッドの存在は、 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 構造ディレクティブが特定のコンテキストタイプでテンプレートをレンダリングするというIvyテンプレートタイプチェックコンパイラへのシグナルです。</target>
        </trans-unit>
        <trans-unit id="86f41d9e1229109e3648daa0169e96c673c401bf" translate="yes">
          <source>The presence of this static field is a signal to the Ivy template type check compiler that when the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; structural directive renders its template, the type of the expression bound to &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; should be narrowed in some way. For &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;, the binding expression itself is used to narrow its type, which allows the strictNullChecks feature of TypeScript to work with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この静的フィールドの存在は、 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; 構造ディレクティブがテンプレートをレンダリングするときに、 ngIfにバインドされた式のタイプを何らかの方法で狭める必要があるというIvyテンプレートタイプチェックコンパイラへの &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; です。 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; の場合、バインディング式自体を使用して型を &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ます。これにより、TypeScriptのstrictNullChecks機能がNgIfで機能できるようになります。</target>
        </trans-unit>
        <trans-unit id="d3d52fcf10501054e6ada11540d5b2872f70a568" translate="yes">
          <source>The preview pane immediately updates to display the name of each product in the list.</source>
          <target state="translated">プレビューペインがすぐに更新され、リスト内の各製品の名前が表示されます。</target>
        </trans-unit>
        <trans-unit id="e48d8699ea4367c454a0431ca00856d48e5fe151" translate="yes">
          <source>The previous &lt;code&gt;TwainComponent&lt;/code&gt; tests simulated an asynchronous observable response from the &lt;code&gt;TwainService&lt;/code&gt; with the &lt;code&gt;asyncData&lt;/code&gt; and &lt;code&gt;asyncError&lt;/code&gt; utilities.</source>
          <target state="translated">以前の &lt;code&gt;TwainComponent&lt;/code&gt; テストでは、 &lt;code&gt;asyncData&lt;/code&gt; および &lt;code&gt;asyncError&lt;/code&gt; ユーティリティを &lt;code&gt;TwainService&lt;/code&gt; して、 TwainServiceからの非同期の監視可能な応答をシミュレートしました。</target>
        </trans-unit>
        <trans-unit id="5364db2c3b6e95db6ec36a33c11635ccee48e801" translate="yes">
          <source>The previous &lt;em&gt;Hero of the Month&lt;/em&gt; example used the &lt;code&gt;MinimalLogger&lt;/code&gt; class as the token for a provider of &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MinimalLogger&lt;/code&gt; &lt;em&gt;ヒーローの&lt;/em&gt;例では、 LoggerServiceのプロバイダーのトークンとしてMinimalLoggerクラスを使用し &lt;code&gt;LoggerService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab5d9f1002775378705c23acd28f52fb378eb33d" translate="yes">
          <source>The previous example presents such a name collision. The component has a &lt;code&gt;customer&lt;/code&gt; property and the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; defines a &lt;code&gt;customer&lt;/code&gt; template variable.</source>
          <target state="translated">前の例では、このような名前の衝突を示しています。 コンポーネントには &lt;code&gt;customer&lt;/code&gt; プロパティがあり、 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;customer&lt;/code&gt; テンプレート変数を定義します。</target>
        </trans-unit>
        <trans-unit id="3ec517832673bf93688f5797ba759fb5bcbd4451" translate="yes">
          <source>The previous page showed how to &lt;a href=&quot;displaying-data&quot;&gt;display data&lt;/a&gt;. This page demonstrated event binding techniques.</source>
          <target state="translated">前のページでは、 &lt;a href=&quot;displaying-data&quot;&gt;データの表示&lt;/a&gt;方法を示しました。 このページでは、イベントバインドの手法を示しました。</target>
        </trans-unit>
        <trans-unit id="40f4c684187ee76e174e3c81ad8531be7d342ffe" translate="yes">
          <source>The previous sections of this guide referred to RxJS &lt;code&gt;Observables&lt;/code&gt; and operators such as &lt;code&gt;catchError&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt;. You will encounter more RxJS artifacts as you continue below.</source>
          <target state="translated">このガイドの前のセクションでは、RxJS &lt;code&gt;Observables&lt;/code&gt; と &lt;code&gt;catchError&lt;/code&gt; や &lt;code&gt;retry&lt;/code&gt; などの演算子に言及していました。 以下に進むと、より多くのRxJSアーティファクトが発生します。</target>
        </trans-unit>
        <trans-unit id="36939dd7e21e25efe97977bcc704881e41916a95" translate="yes">
          <source>The previous simple example showed passing in a string. To pass in an object, the syntax and thinking are the same.</source>
          <target state="translated">前の簡単な例では、文字列を渡すことを示しました。 オブジェクトを渡すための構文と考え方は同じです。</target>
        </trans-unit>
        <trans-unit id="56f2a62246eea5c3c9cdaa4780c32f7e493575ed" translate="yes">
          <source>The previous tests played the role of the host &lt;code&gt;DashboardComponent&lt;/code&gt; themselves. But does the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; work correctly when properly data-bound to a host component?</source>
          <target state="translated">前のテストは、ホスト &lt;code&gt;DashboardComponent&lt;/code&gt; 自体の役割を果たしました。 しかし、 &lt;code&gt;DashboardHeroComponent&lt;/code&gt; は、ホストコンポーネントに適切にデータバインドされると正しく機能しますか？</target>
        </trans-unit>
        <trans-unit id="5bf3abe312936fd7f8c715b3c6575f72f4cc1b47" translate="yes">
          <source>The previous value of the attribute.</source>
          <target state="translated">属性の以前の値。</target>
        </trans-unit>
        <trans-unit id="1dfa467560796beba789d3214a05abeb3f64d6a8" translate="yes">
          <source>The previous version assigns an array of heroes to the component's &lt;code&gt;heroes&lt;/code&gt; property. The assignment occurs &lt;em&gt;synchronously&lt;/em&gt;, as if the server could return heroes instantly or the browser could freeze the UI while it waited for the server's response.</source>
          <target state="translated">前のバージョンでは、ヒーローの配列をコンポーネントの &lt;code&gt;heroes&lt;/code&gt; プロパティに割り当てました。 サーバーが即座にヒーローを返したり、ブラウザがサーバーの応答を待っている間にUIをフリーズしたりするように、割り当ては&lt;em&gt;同期的&lt;/em&gt;に行われます。</target>
        </trans-unit>
        <trans-unit id="72231ecb9078c4b31429d32906f226cb03e9377c" translate="yes">
          <source>The primary navigation part has changed; the secondary route is the same.</source>
          <target state="translated">主要なナビゲーション部分が変更されました。 セカンダリルートは同じです。</target>
        </trans-unit>
        <trans-unit id="3c9d8bf0259e3eb63f943c6785b8b6a011914253" translate="yes">
          <source>The primary routing outlet.</source>
          <target state="translated">プライマリルーティングアウトレット。</target>
        </trans-unit>
        <trans-unit id="486f9745b09ef70dd0d395c0292014660ec3a6b7" translate="yes">
          <source>The process of &lt;code&gt;HeroService&lt;/code&gt; injection looks something like this.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; インジェクションのプロセスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f2e3b6f36c0c22bc94631be9ba69dd603b5d41ff" translate="yes">
          <source>The product details component already uses the cart service (&lt;code&gt;CartService&lt;/code&gt;) to add products to the cart.</source>
          <target state="translated">製品詳細コンポーネントはすでにカートサービス（ &lt;code&gt;CartService&lt;/code&gt; ）を使用して製品をカートに追加しています。</target>
        </trans-unit>
        <trans-unit id="8021e87038c33d08539a200b856644645d4e9ce1" translate="yes">
          <source>The product details component handles the display of each product. The Angular Router displays components based on the browser's URL and your defined routes. You'll use the Angular Router to combine the &lt;code&gt;products&lt;/code&gt; data and route information to display the specific details for each product.</source>
          <target state="translated">製品詳細コンポーネントは、各製品の表示を処理します。 Angular Routerは、ブラウザのURLと定義されたルートに基づいてコンポーネントを表示します。 Angular Routerを使用して、 &lt;code&gt;products&lt;/code&gt; データとルート情報を組み合わせて、各製品の特定の詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="7eb6cfe553c75eff3acf81ec96aea3ac0265c8bb" translate="yes">
          <source>The project also contains some animations. You won't upgrade them in this version of the guide. Turn to the &lt;a href=&quot;animations&quot;&gt;Angular animations&lt;/a&gt; guide to learn about that.</source>
          <target state="translated">プロジェクトには、いくつかのアニメーションも含まれています。 このバージョンのガイドではそれらをアップグレードしません。 それについては、 &lt;a href=&quot;animations&quot;&gt;Angularアニメーション&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="cb22493e5247fcf1b73099aacb2b51c7edb8e5bf" translate="yes">
          <source>The project you create with the CLI is immediately ready to test. Just run the &lt;a href=&quot;cli/test&quot;&gt;&lt;code&gt;ng test&lt;/code&gt;&lt;/a&gt; CLI command:</source>
          <target state="translated">CLIで作成したプロジェクトはすぐにテストする準備ができています。 &lt;a href=&quot;cli/test&quot;&gt; &lt;code&gt;ng test&lt;/code&gt; &lt;/a&gt; CLIコマンドを実行するだけです：</target>
        </trans-unit>
        <trans-unit id="a1cfa2d4e83385878d411d839ce7a7cdbd9c013f" translate="yes">
          <source>The projected content of &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; sees the 🐳 (whale), not the 🐶 (puppy), because the 🐶 (puppy) is inside the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; can only see the 🐶 (puppy) if it is also within the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; の投影されたコンテンツは、🐳（子犬）ではなく🐳（クジラ）を参照します。これは、）（子犬）が &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; の中にあるためです。 &lt;code&gt;&amp;lt;app-inspector&amp;gt;&lt;/code&gt; は、 &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; 内にある場合にのみ🐶（子犬）を見ることができます。</target>
        </trans-unit>
        <trans-unit id="6e36792ea583ac976f37bafa9de7316d9520835d" translate="yes">
          <source>The prompt runtime automatically validates the provided response against the constraints provided in the JSON schema. If the value is not acceptable, the user is prompted for a new value. This ensures that any values passed to the schematic meet the expectations of the schematic's implementation, so that you do not need to add additional checks within the schematic's code.</source>
          <target state="translated">プロンプトランタイムは、JSONスキーマで提供された制約に対して、提供された応答を自動的に検証します。 値が受け入れられない場合、ユーザーは新しい値の入力を求められます。 これにより、回路図に渡されるすべての値が回路図の実装の期待を満たし、回路図のコード内に追加のチェックを追加する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="7cf0ecec69996d92571eb4e4bd556aced4c3efe0" translate="yes">
          <source>The properties of an &lt;code&gt;$event&lt;/code&gt; object vary depending on the type of DOM event. For example, a mouse event includes different information than an input box editing event.</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; オブジェクトのプロパティは、DOMイベントのタイプによって異なります。 たとえば、マウスイベントには、入力ボックス編集イベントとは異なる情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="97a76f1a52bc3c879b21278ea18563262a1e410d" translate="yes">
          <source>The properties of the &lt;code&gt;nativeElement&lt;/code&gt; depend upon the runtime environment. You could be running these tests on a &lt;em&gt;non-browser&lt;/em&gt; platform that doesn't have a DOM or whose DOM-emulation doesn't support the full &lt;code&gt;HTMLElement&lt;/code&gt; API.</source>
          <target state="translated">&lt;code&gt;nativeElement&lt;/code&gt; のプロパティはランタイム環境に依存します。 これらのテストは、DOMを持たない、またはDOMエミュレーションが完全な &lt;code&gt;HTMLElement&lt;/code&gt; APIをサポートしない&lt;em&gt;非ブラウザー&lt;/em&gt;プラットフォームで実行できます。</target>
        </trans-unit>
        <trans-unit id="c04dcd4d9e3fdfb316a49d102b3473f76bd1e0d6" translate="yes">
          <source>The property name.</source>
          <target state="translated">プロパティ名。</target>
        </trans-unit>
        <trans-unit id="7df460d20d043603559a67d7974d835f9f0eed3f" translate="yes">
          <source>The provided classes are added to the element when the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; becomes the current active route.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; が現在のアクティブルートになると、提供されたクラスが要素に追加されます。</target>
        </trans-unit>
        <trans-unit id="5b4910a760b25a51893dd6345e06c7f8b33600d7" translate="yes">
          <source>The provider factory function (returned by &lt;code&gt;runnersUpFactory()&lt;/code&gt;) returns the actual dependency object, the string of names.</source>
          <target state="translated">プロバイダーファクトリ関数（ &lt;code&gt;runnersUpFactory()&lt;/code&gt; によって返される）は、実際の依存関係オブジェクト、名前の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="b4c17117d8a92a8817f56060d61fb1bd4c763cc5" translate="yes">
          <source>The provider object can have a third option, &lt;code&gt;multi: true&lt;/code&gt;, which you can use with &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; to register multiple handlers for the provide event.</source>
          <target state="translated">プロバイダーオブジェクトには3番目のオプション &lt;code&gt;multi: true&lt;/code&gt; があり、 &lt;code&gt;&lt;a href=&quot;../api/core/app_initializer&quot;&gt;APP_INITIALIZER&lt;/a&gt;&lt;/code&gt; とともに使用して、提供イベントの複数のハンドラーを登録できます。</target>
        </trans-unit>
        <trans-unit id="02b3d62f3fe1096d970290346afe693026ae8245" translate="yes">
          <source>The providers array is where you list the services the app needs. When you list services here, they are available app-wide. You can scope them when using feature modules and lazy loading. For more information, see &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt;.</source>
          <target state="translated">プロバイダー配列は、アプリが必要とするサービスをリストする場所です。 ここにサービスをリストすると、アプリ全体で利用できます。 機能モジュールと遅延読み込みを使用する場合、それらをスコープできます。 詳細については、 &lt;a href=&quot;providers&quot;&gt;プロバイダーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dbfe5beb656c4962d3cf4b97d176386634f50d45" translate="yes">
          <source>The public API for schematics defines classes that represent the basic concepts.</source>
          <target state="translated">スケマティックのパブリックAPIは、基本概念を表すクラスを定義します。</target>
        </trans-unit>
        <trans-unit id="de6f6ac52bec399fd6660c2b4b054e9a39440b12" translate="yes">
          <source>The public API for your library is maintained in the &lt;code&gt;public-api.ts&lt;/code&gt; file in your library folder. Anything exported from this file is made public when your library is imported into an application. Use an NgModule to expose services and components.</source>
          <target state="translated">ライブラリのパブリックAPIは、ライブラリフォルダーの &lt;code&gt;public-api.ts&lt;/code&gt; ファイルで維持されます。 ライブラリがアプリケーションにインポートされると、このファイルからエクスポートされたものはすべて公開されます。 NgModuleを使用して、サービスとコンポーネントを公開します。</target>
        </trans-unit>
        <trans-unit id="d054d0b6719a9e60f44011ba13eb8f4c3e083451" translate="yes">
          <source>The query parameters shared by all the routes</source>
          <target state="translated">すべてのルートで共有されるクエリパラメーター</target>
        </trans-unit>
        <trans-unit id="4231089991bd8ff6dd16d350b35cc226cbd300f3" translate="yes">
          <source>The query params of the URL</source>
          <target state="translated">URLのクエリパラメーター</target>
        </trans-unit>
        <trans-unit id="2e3c5b3a02d06abe266f2cfa14e56837b6f3527d" translate="yes">
          <source>The query results to store</source>
          <target state="translated">保存するクエリ結果</target>
        </trans-unit>
        <trans-unit id="ad7aeea31c0c6f526df9d9af5712f3c533c2d889" translate="yes">
          <source>The query returns &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; wrappers around the matching elements.</source>
          <target state="translated">クエリは、一致する要素を &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; ラッパーを返します。</target>
        </trans-unit>
        <trans-unit id="420962f6ff64d28c5e044d0cc2355bfc2ea5030a" translate="yes">
          <source>The query returns a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; for the paragraph.</source>
          <target state="translated">クエリは、 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d9af7bb5d4e8ad84a327ab8455d86b884cbad452" translate="yes">
          <source>The quick-info feature allows you to hover to see where components, directives, modules, and so on come from. You can then click &quot;Go to definition&quot; or press F12 to go directly to the definition.</source>
          <target state="translated">クイック情報機能を使用すると、コンポーネント、ディレクティブ、モジュールなどがどこから来たのかを確認できます。 次に、[定義に移動]をクリックするか、F12を押して直接定義に移動します。</target>
        </trans-unit>
        <trans-unit id="50926fb8f24e0f7a0c8fd99de16fa0fdad121aad" translate="yes">
          <source>The reader requests a page by its Page URL. The doc viewer fetches the corresponding JSON file, interprets it, and renders it as fully-formed HTML page.</source>
          <target state="translated">リーダーは、ページURLでページをリクエストします。 ドキュメントビューアーは、対応するJSONファイルを取得して解釈し、完全な形式のHTMLページとしてレンダリングします。</target>
        </trans-unit>
        <trans-unit id="161d1b9d874c147636f786db6462e2b921a846dc" translate="yes">
          <source>The real &lt;code&gt;RouterLinkDirective&lt;/code&gt; is quite complicated and entangled with other components and directives of the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. It requires challenging setup to mock and use in tests.</source>
          <target state="translated">実際の &lt;code&gt;RouterLinkDirective&lt;/code&gt; は非常に複雑で、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; の他のコンポーネントやディレクティブと絡み合っています。 モックを作成してテストで使用するには、難しい設定が必要です。</target>
        </trans-unit>
        <trans-unit id="7ceba990815347e65fc419a07143830d7018fac5" translate="yes">
          <source>The reason is &lt;em&gt;tree shaking&lt;/em&gt;. For production apps you want to load the smallest, fastest code possible. The code should contain only the classes that you actually need. It should exclude a component that's never used, whether or not that component is declared.</source>
          <target state="translated">理由は&lt;em&gt;木が揺れること&lt;/em&gt;です。 本番アプリの場合、可能な限り最小で最速のコードをロードする必要があります。 コードには、実際に必要なクラスのみを含める必要があります。 そのコンポーネントが宣言されているかどうかにかかわらず、決して使用されないコンポーネントを除外する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a078f105d135e610ac0d0702bdd6e7a40c0fae9" translate="yes">
          <source>The reason is simplicity. Structural directives can do complex things with the host element and its descendents. When two directives lay claim to the same host element, which one takes precedence? Which should go first, the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;NgFor&lt;/code&gt;? Can the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; cancel the effect of the &lt;code&gt;NgFor&lt;/code&gt;? If so (and it seems like it should be so), how should Angular generalize the ability to cancel for other structural directives?</source>
          <target state="translated">その理由は単純さです。 構造ディレクティブは、ホスト要素とその子孫で複雑なことを実行できます。 2つのディレクティブが同じホスト要素を要求する場合、どちらが優先されますか？ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; とNgForのどちらが先に行くべきですか？ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; はNgForの効果をキャンセルできますか？ もしそうなら（そしてそうあるべきだと思われる）、Angularは他の構造的な指令のためにキャンセルする能力をどのように一般化すべきですか？</target>
        </trans-unit>
        <trans-unit id="fafb040a487d878e72e67cd8a770eb670b009039" translate="yes">
          <source>The recently-developed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; Web Platform feature is currently supported natively in a number of browsers. Support is pending or planned in other browsers.</source>
          <target state="translated">最近開発された&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;カスタム要素&lt;/a&gt; Webプラットフォーム機能は、現在、多くのブラウザーでネイティブにサポートされています。 他のブラウザでのサポートは保留中または計画中です。</target>
        </trans-unit>
        <trans-unit id="fa75dd5d0bada1f47ade184135ab747fbf80a41c" translate="yes">
          <source>The redirect path can be relative, as shown in this example, or absolute. If we change the &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; value in the example to the absolute URL segment '/user/:name', the result URL is also absolute, '/user/jim'.</source>
          <target state="translated">リダイレクトパスは、この例に示すように相対パスでも、絶対パスでもかまいません。 例の &lt;code&gt;&lt;a href=&quot;route#redirectTo&quot;&gt;redirectTo&lt;/a&gt;&lt;/code&gt; 値を絶対URLセグメント「/ user /：name」に変更すると、結果のURLも絶対「/ user / jim」になります。</target>
        </trans-unit>
        <trans-unit id="ce8f45225aa19c5dcf369c6d23b7264529fa54d7" translate="yes">
          <source>The reference value of itemForm, without the ngForm attribute value, would be the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement&quot;&gt;HTMLFormElement&lt;/a&gt;. There is, however, a difference between a Component and a Directive in that a &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; will be referenced without specifying the attribute value, and a &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; will not change the implicit reference (that is, the element).</source>
          <target state="translated">itemFormの参照値は、ngForm属性値なしでHTMLFormElementになります。 ただし、属性値を指定せずに &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; が参照されるという点でコンポーネントとディレクティブには違いがあり、 &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; は暗黙的な参照（つまり要素）を変更しません。</target>
        </trans-unit>
        <trans-unit id="3e74d5a063ed6ad113dcb0dc04276262826975d9" translate="yes">
          <source>The reference variable&amp;rsquo;s &lt;code&gt;valid&lt;/code&gt; property on input controls to check if a control is valid and show/hide error messages.</source>
          <target state="translated">入力コントロールの参照変数の &lt;code&gt;valid&lt;/code&gt; プロパティ。コントロールが有効かどうかを確認し、エラーメッセージを表示/非表示します。</target>
        </trans-unit>
        <trans-unit id="8e1c54c7687dd1cbc34b9457b4da8f1141636f2c" translate="yes">
          <source>The registered async validator function for the control</source>
          <target state="translated">コントロールの登録済み非同期検証機能</target>
        </trans-unit>
        <trans-unit id="14569c3edda6f10cb9b8ea1799a88a50904561f7" translate="yes">
          <source>The registered callback function called when a blur event occurs on the input element.</source>
          <target state="translated">入力要素でblurイベントが発生したときに呼び出される登録済みコールバック関数。</target>
        </trans-unit>
        <trans-unit id="83a100bf5139d939736b31435c736c0e17e4ef73" translate="yes">
          <source>The registered callback function called when a change event occurs on the input element.</source>
          <target state="translated">入力要素で変更イベントが発生したときに呼び出される登録済みコールバック関数。</target>
        </trans-unit>
        <trans-unit id="8325421c1589c4b1cafcd0c9b1b460010fe4dabd" translate="yes">
          <source>The registered callback function called when a change or input event occurs on the input element.</source>
          <target state="translated">入力要素で変更または入力イベントが発生したときに呼び出される登録済みコールバック関数。</target>
        </trans-unit>
        <trans-unit id="60864d0a7b033aeeb5697aea8e9fe00704ce69b5" translate="yes">
          <source>The registered callback function called when an input event occurs on the input element.</source>
          <target state="translated">入力イベントが入力要素で発生したときに呼び出される登録済みコールバック関数。</target>
        </trans-unit>
        <trans-unit id="3f720157232b77c5ba1d4c879a427fa93efc8bc0" translate="yes">
          <source>The registered synchronous validator function for the control</source>
          <target state="translated">コントロールの登録済み同期検証機能</target>
        </trans-unit>
        <trans-unit id="611af0e0b9e0bf773539c9b919be8a53d47c0b03" translate="yes">
          <source>The related &lt;code&gt;HeroDetailComponent&lt;/code&gt; tests will assert that methods of the &lt;code&gt;HeroDetailService&lt;/code&gt; were called by spying on the service methods. Accordingly, the stub implements its methods as spies:</source>
          <target state="translated">関連する &lt;code&gt;HeroDetailComponent&lt;/code&gt; テストは、 &lt;code&gt;HeroDetailService&lt;/code&gt; のメソッドがサービスメソッドをスパイすることによって呼び出されたことをアサートします。 したがって、スタブはそのメソッドをスパイとして実装します。</target>
        </trans-unit>
        <trans-unit id="0eb0173de0887207bb65b45ebe9f9fe125988a13" translate="yes">
          <source>The relative path or absolute URL of a template file for an Angular component. If provided, do not supply an inline template using &lt;code&gt;template&lt;/code&gt;.</source>
          <target state="translated">Angularコンポーネントのテンプレートファイルの相対パスまたは絶対URL。 指定されている場合、templateを使用してインラインテンプレートを提供しないで &lt;code&gt;template&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2a5f769df13524fc33173a60f95e5ebec2a8cc9" translate="yes">
          <source>The relevant &lt;em&gt;Crisis Center&lt;/em&gt; code for this milestone follows.</source>
          <target state="translated">このマイルストーンに関連する&lt;em&gt;危機センターの&lt;/em&gt;コードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fde1ac3dfd43433ca4e661ed9e84a40407308eaf" translate="yes">
          <source>The remainder of this page discusses selected exercises in further detail.</source>
          <target state="translated">このページの残りの部分では、選択した演習についてさらに詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="c8e8b3d7ca0d64b17a2fb3f293951af67e52afb0" translate="yes">
          <source>The remaining tests confirm the logic of the component when the service returns different values. The second test validates the effect of changing the user name. The third test checks that the component displays the proper message when there is no logged-in user.</source>
          <target state="translated">残りのテストでは、サービスが異なる値を返すときにコンポーネントのロジックを確認します。 2番目のテストでは、ユーザー名を変更した効果を検証します。 3番目のテストでは、ログインしているユーザーがいない場合にコンポーネントが適切なメッセージを表示することを確認します。</target>
        </trans-unit>
        <trans-unit id="d7142c777489862d6522489ad8690b6cad01d02e" translate="yes">
          <source>The repeater matcher relies on AngularJS &lt;code&gt;ng-repeat&lt;/code&gt;</source>
          <target state="translated">リピーターマッチャーは、AngularJS &lt;code&gt;ng-repeat&lt;/code&gt; に依存しています</target>
        </trans-unit>
        <trans-unit id="91ad245b7614259a383728070796f36b7c6a8e1a" translate="yes">
          <source>The request body</source>
          <target state="translated">リクエスト本文</target>
        </trans-unit>
        <trans-unit id="8baeab2869311562a541f4781282737e0d643863" translate="yes">
          <source>The request body, or &lt;code&gt;null&lt;/code&gt; if one isn't set.</source>
          <target state="translated">リクエストの本文。設定されていない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6f77845fbe311e08dbeaef52a6fd2daf4e328ed" translate="yes">
          <source>The request object.</source>
          <target state="translated">リクエストオブジェクト。</target>
        </trans-unit>
        <trans-unit id="295297cd89c4bbc0045b1baf52143c439e6a5d78" translate="yes">
          <source>The request was sent out over the wire.</source>
          <target state="translated">リクエストは有線で送信されました。</target>
        </trans-unit>
        <trans-unit id="cc47fc94ef80a1928c330c84f157fee95dfbc73f" translate="yes">
          <source>The requests keep forwarding up until Angular finds an injector that can handle the request or runs out of ancestor &lt;code&gt;ElementInjector&lt;/code&gt;s.</source>
          <target state="translated">要求は、Angularが要求を処理できるインジェクターを見つけるか、先祖 &lt;code&gt;ElementInjector&lt;/code&gt; を使い果たすまで転送を続けます。</target>
        </trans-unit>
        <trans-unit id="4bca2438c6c78d7f3598583261e82a87e4585f19" translate="yes">
          <source>The required character width.</source>
          <target state="translated">必要な文字幅。</target>
        </trans-unit>
        <trans-unit id="e78685155e9f5bf3ed47c8190c17fafaf81b4db7" translate="yes">
          <source>The required grammatical form.</source>
          <target state="translated">必要な文法形式。</target>
        </trans-unit>
        <trans-unit id="6a56567a9d466e6d132c390ae6771774b8bf936d" translate="yes">
          <source>The resource URL.</source>
          <target state="translated">リソースURL。</target>
        </trans-unit>
        <trans-unit id="2806bdfe81615de27dd71c7273cdcf5fec886325" translate="yes">
          <source>The resources to add/update.</source>
          <target state="translated">追加/更新するリソース。</target>
        </trans-unit>
        <trans-unit id="722bde3a779c6b7c44b072db8c9bef73a7dcee92" translate="yes">
          <source>The resources to edit.</source>
          <target state="translated">編集するリソース。</target>
        </trans-unit>
        <trans-unit id="b3b51cad36d2295674a88b5feb5f325a8dd9c5d1" translate="yes">
          <source>The response body doesn't return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</source>
          <target state="translated">応答本文は、必要なすべてのデータを返しません。 サーバーは、アプリケーションワークフローにとって重要な特定の条件を示すために、特別なヘッダーまたはステータスコードを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="9b93e53ea5820a1f628a4de1e5b36ddaf81f432c" translate="yes">
          <source>The response body, or &lt;code&gt;null&lt;/code&gt; if one was not returned.</source>
          <target state="translated">応答の本文。返されなかった場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99668b05017e2aa5e864a17012f39fce4777e24e" translate="yes">
          <source>The response status code and headers were received.</source>
          <target state="translated">応答ステータスコードとヘッダーが受信されました。</target>
        </trans-unit>
        <trans-unit id="31138b87e6e07d760fa91a8f35bc7d6cef938655" translate="yes">
          <source>The rest are stubs.</source>
          <target state="translated">残りはスタブです。</target>
        </trans-unit>
        <trans-unit id="527a427539693b3f88205ed83bab6a41153d480e" translate="yes">
          <source>The rest of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, including its class attribute, moved inside the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">class属性を含む残りの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; は、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素内に移動しました。</target>
        </trans-unit>
        <trans-unit id="c743d737d76a8c6fba14ac64a1884a8a176429a0" translate="yes">
          <source>The rest of the articles in this section specifically address the Angular implementation of service workers.</source>
          <target state="translated">このセクションの残りの記事では、特にサービスワーカーのAngular実装について説明します。</target>
        </trans-unit>
        <trans-unit id="62158bbbf1c618865ea1d81d423f963b4dce87ef" translate="yes">
          <source>The rest of the file is boilerplate setup code anticipating more advanced tests that &lt;em&gt;might&lt;/em&gt; become necessary if the component evolves into something substantial.</source>
          <target state="translated">ファイルの残りは、コンポーネントが実質的な何かに進化した場合に必要になる&lt;em&gt;可能性の&lt;/em&gt;ある、より高度なテストを予測する定型的なセットアップコードです。</target>
        </trans-unit>
        <trans-unit id="72f013f648fdb7d77ec051dfbd8e0aae42973747" translate="yes">
          <source>The rest of the scenario code relies on other Angular features and techniques that you can learn about elsewhere in the documentation. You can review it and download it from the live example.</source>
          <target state="translated">シナリオの残りのコードは、ドキュメントの他の場所で学習できる他のAngularの機能とテクニックに依存しています。 これを確認して、ライブサンプルからダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="9db844629762b7e377da3fb6860ee3d92e73f3e4" translate="yes">
          <source>The result is shown below, with the hero's telephone number from &lt;code&gt;HeroContactComponent&lt;/code&gt; projected above the hero description.</source>
          <target state="translated">結果を以下に示します。ヒーローの説明の上に &lt;code&gt;HeroContactComponent&lt;/code&gt; からのヒーローの電話番号が投影されています。</target>
        </trans-unit>
        <trans-unit id="cf49885d2cf1bce6d0595e7a953482bda25b0935" translate="yes">
          <source>The result of an expression might require some transformation before you're ready to use it in a binding. For example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.</source>
          <target state="translated">式の結果は、バインディングで使用する準備ができる前に、何らかの変換を必要とする場合があります。 たとえば、数値を通貨として表示したり、テキストを大文字に変更したり、リストをフィルター処理して並べ替えたりできます。</target>
        </trans-unit>
        <trans-unit id="70660d474935bb5c58cc521f6669d3b23f3ad648" translate="yes">
          <source>The result of the expression is passed to the pipe's &lt;code&gt;transform()&lt;/code&gt; method.</source>
          <target state="translated">式の結果は、パイプの &lt;code&gt;transform()&lt;/code&gt; メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="bf135bfcdaf4cfe03aad3aa70f5998ea60da6489" translate="yes">
          <source>The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.</source>
          <target state="translated">このパイプの結果は、入力が変更されたときに再評価されません。 変更検出サイクルごとに日付を再フォーマットする必要を回避するには、日付を不変オブジェクトとして扱い、パイプを再度実行する必要があるときに参照を変更します。</target>
        </trans-unit>
        <trans-unit id="826ce97508a4661aa985a17e8919e5c33ad0cebf" translate="yes">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; class should look like this:</source>
          <target state="translated">結果の &lt;code&gt;CartComponent&lt;/code&gt; クラスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="a571031ddb791d5885d8b255dffe7c11b80344d0" translate="yes">
          <source>The resulting &lt;code&gt;CartComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">結果の &lt;code&gt;CartComponent&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="abe704b8eceeacf1b67a89d121ecca1aade1a14f" translate="yes">
          <source>The resulting configuration does not wire up AngularJS digests to Zone hooks. It is the responsibility of the test writer to call &lt;code&gt;$rootScope.$apply&lt;/code&gt;, as necessary, to trigger AngularJS handlers of async events from Angular.</source>
          <target state="translated">結果の構成は、AngularJSダイジェストをゾーンフックに結び付けません。 テストライターは、必要に応じて &lt;code&gt;$rootScope.$apply&lt;/code&gt; を呼び出して、Angularからの非同期イベントのAngularJSハンドラーをトリガーします。</target>
        </trans-unit>
        <trans-unit id="bcbab465692903fa7cd8359d43327dd68fd697f4" translate="yes">
          <source>The resulting crisis center is a foundation for introducing a new concept&amp;mdash;&lt;strong&gt;child routing&lt;/strong&gt;. You can leave &lt;em&gt;Heroes&lt;/em&gt; in its current state as a contrast with the &lt;em&gt;Crisis Center&lt;/em&gt; and decide later if the differences are worthwhile.</source>
          <target state="translated">結果として生じる危機センターは、新しい概念である&lt;strong&gt;子ルーティング&lt;/strong&gt;を導入するための基盤です。 &lt;em&gt;危機センター&lt;/em&gt;との対比として&lt;em&gt;ヒーロー&lt;/em&gt;を現在の状態のままにして、違いが価値があるかどうかを後で決めることができます。</target>
        </trans-unit>
        <trans-unit id="de4d48c6b6c99ee6545e5af2a4c9556b34785c31" translate="yes">
          <source>The resulting path is &lt;code&gt;/crisis-center/1&lt;/code&gt;.</source>
          <target state="translated">結果のパスは &lt;code&gt;/crisis-center/1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3119670930697faa92fa40415fd5310703990877" translate="yes">
          <source>The reusable animation to start.</source>
          <target state="translated">開始する再利用可能なアニメーション。</target>
        </trans-unit>
        <trans-unit id="c31f00e06ff51792a57ab30c7e7548ddc8902084" translate="yes">
          <source>The revised &lt;code&gt;CachingInterceptor&lt;/code&gt; sets up a server request whether there's a cached value or not, using the same &lt;code&gt;sendRequest()&lt;/code&gt; method described &lt;a href=&quot;http#send-request&quot;&gt;above&lt;/a&gt;. The &lt;code&gt;results$&lt;/code&gt; observable will make the request when subscribed.</source>
          <target state="translated">修正された &lt;code&gt;CachingInterceptor&lt;/code&gt; は、上記と同じ &lt;code&gt;sendRequest()&lt;/code&gt; メソッドを使用して、キャッシュされた値があるかどうかにかかわらずサーバー要求をセットアップします。 サブスクライブされると、 &lt;code&gt;results$&lt;/code&gt; observableがリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="be95ae4bd6dde666442aa0c4fe5f5b09117ba06c" translate="yes">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; class file should look like this:</source>
          <target state="translated">改訂された &lt;code&gt;HeroesComponent&lt;/code&gt; クラスファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="8f5283cba25861d79d0e19a7a740a98060be3788" translate="yes">
          <source>The revised &lt;code&gt;HeroesComponent&lt;/code&gt; template should look like this:</source>
          <target state="translated">改訂された &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="63cda66359a819e7cbb619142c9b706aff15c48f" translate="yes">
          <source>The root &lt;code&gt;AppComponent&lt;/code&gt; is the application shell. It has a title, a navigation bar with two links, and a router outlet where the router swaps components on and off the page. Here's what you get:</source>
          <target state="translated">ルート &lt;code&gt;AppComponent&lt;/code&gt; はアプリケーションシェルです。 タイトル、2つのリンクがあるナビゲーションバー、およびルーターがページのオンとオフでコンポーネントを交換するルーターアウトレットがあります。 以下が得られます。</target>
        </trans-unit>
        <trans-unit id="0f0329ffe5ecceeb131961f70f4acb552bdcbfe8" translate="yes">
          <source>The root &lt;code&gt;AppModule&lt;/code&gt; is the only module that should import service modules.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; は、サービスモジュールをインポートする唯一のモジュールです。</target>
        </trans-unit>
        <trans-unit id="92c90ae30fd5c691212cf46563dac3961bb08cdc" translate="yes">
          <source>The root application module, &lt;code&gt;AppModule&lt;/code&gt;, of almost every browser application should import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/platform-browser&lt;/code&gt;.</source>
          <target state="translated">ほとんどすべてのブラウザーアプリケーションのルートアプリケーションモジュール &lt;code&gt;AppModule&lt;/code&gt; は 、 &lt;code&gt;@angular/platform-browser&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="bbda7caf7baa01267a84d3e9deab3bbca8a3fdbd" translate="yes">
          <source>The root directory of the app.</source>
          <target state="translated">アプリのルートディレクトリ。</target>
        </trans-unit>
        <trans-unit id="6a64de3e02b9fca633213b81541751cd41ab0a11" translate="yes">
          <source>The root element to search from</source>
          <target state="translated">検索元のルート要素</target>
        </trans-unit>
        <trans-unit id="671d824111bab81ec8318377b2e219bfaa96820d" translate="yes">
          <source>The root folder for this project's files, relative to the workspace folder. Empty for the initial app, which resides at the top level of the workspace.</source>
          <target state="translated">ワークスペースフォルダーを基準とした、このプロジェクトのファイルのルートフォルダー。 ワークスペースの最上位にある最初のアプリでは空です。</target>
        </trans-unit>
        <trans-unit id="54dbf3939551d85e7abddf427d6a6ad0d92df9b4" translate="yes">
          <source>The root folder for this project's source files.</source>
          <target state="translated">このプロジェクトのソースファイルのルートフォルダ。</target>
        </trans-unit>
        <trans-unit id="b1ec0372f1cddf50e90c0a7dde345a963fecb42f" translate="yes">
          <source>The root module is all you need in a simple application with a few components. As the app grows, you refactor the root module into &lt;a href=&quot;feature-modules&quot;&gt;feature modules&lt;/a&gt; that represent collections of related functionality. You then import these modules into the root module.</source>
          <target state="translated">ルートモジュールは、いくつかのコンポーネントを備えたシンプルなアプリケーションで必要なものすべてです。 アプリが成長するにつれて、ルートモジュールをリファクタリングして、関連する機能のコレクションを表す&lt;a href=&quot;feature-modules&quot;&gt;機能モジュールに&lt;/a&gt;します。 次に、これらのモジュールをルートモジュールにインポートします。</target>
        </trans-unit>
        <trans-unit id="da27980955945e04ad4a054ed93c8229a2cdc100" translate="yes">
          <source>The root nodes for this embedded view.</source>
          <target state="translated">この埋め込みビューのルートノード。</target>
        </trans-unit>
        <trans-unit id="3397f990a2e5dcb255a1ff4ae7da260d1d6f2244" translate="yes">
          <source>The root of the problem is at least one of the components involved in the test specifies an external template or CSS file as the following version of the &lt;code&gt;BannerComponent&lt;/code&gt; does.</source>
          <target state="translated">問題の根本は、次のバージョンの &lt;code&gt;BannerComponent&lt;/code&gt; が行うように、テストに関係するコンポーネントの少なくとも1つが外部テンプレートまたはCSSファイルを指定していることです。</target>
        </trans-unit>
        <trans-unit id="43d23a95dcd95d02fff170aa27124ad27dadf776" translate="yes">
          <source>The root of the router state</source>
          <target state="translated">ルーター状態のルート</target>
        </trans-unit>
        <trans-unit id="4972cd8af27405ae6af97b76c474d6f24b212689" translate="yes">
          <source>The root of the router state.</source>
          <target state="translated">ルーター状態のルート。</target>
        </trans-unit>
        <trans-unit id="2877c97510f1f533a0813b5a4c64f21f27b1ea42" translate="yes">
          <source>The root segment group of the URL tree</source>
          <target state="translated">URLツリーのルートセグメントグループ</target>
        </trans-unit>
        <trans-unit id="3c8a01ed9794c16c0a0e02ced63c7a78d14e47e4" translate="yes">
          <source>The route array for the new configuration.</source>
          <target state="translated">新しい構成のルート配列。</target>
        </trans-unit>
        <trans-unit id="bef3a96e68be9a7e3e4e120593f324d30c516bbd" translate="yes">
          <source>The route configuration to provide.</source>
          <target state="translated">提供するルート構成。</target>
        </trans-unit>
        <trans-unit id="c73d7a5fdb6e04fbea56a19afdcaf95a1328d979" translate="yes">
          <source>The route configuration used for the route that contains the origin path.</source>
          <target state="translated">起点パスを含むルートに使用されるルート構成。</target>
        </trans-unit>
        <trans-unit id="4e196abefd449c7a38cdaa9e24641456ced4d25e" translate="yes">
          <source>The route parameters correspond to the path variables defined in the route. The &lt;code&gt;productId&lt;/code&gt; is provided from the URL that was matched to the route. You use the &lt;code&gt;productId&lt;/code&gt; to display the details for each unique product.</source>
          <target state="translated">ルートパラメータは、ルートで定義されたパス変数に対応します。 &lt;code&gt;productId&lt;/code&gt; は、ルートに一致したURLから提供されます。 &lt;code&gt;productId&lt;/code&gt; を使用して、一意の各製品の詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="66d3701516f8bcdfaf06a82d17fcdba4c47e9b5a" translate="yes">
          <source>The route path and parameters are available through an injected router service called the &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;. It has a great deal of useful information including:</source>
          <target state="translated">ルートパスとパラメーターは、 &lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;と呼ばれる注入されたルーターサービスを通じて利用できます。 以下を含む多くの有用な情報があります。</target>
        </trans-unit>
        <trans-unit id="d1f012c5745d0ca7adf488982b001bebc88d2038" translate="yes">
          <source>The route path for a lazy-loaded module. When supplied, creates a component in the new module, and adds the route to that component in the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array declared in the module provided in the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">遅延ロードされたモジュールのルートパス。 指定されると、新しいモジュールにコンポーネントを作成し、-- &lt;code&gt;--module&lt;/code&gt; オプションで提供されるモジュールで宣言された &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列にそのコンポーネントへのルートを追加します。</target>
        </trans-unit>
        <trans-unit id="f851c13eed7f013f3276fc1f09b0556e9f7b748d" translate="yes">
          <source>The route to consider.</source>
          <target state="translated">検討するルート。</target>
        </trans-unit>
        <trans-unit id="e5fc4b54a42e423066458d8e19e63d73e48616e9" translate="yes">
          <source>The route's parent &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; when this route is a &lt;a href=&quot;router#child-routing-component&quot;&gt;child route&lt;/a&gt;.</source>
          <target state="translated">このルートが&lt;a href=&quot;router#child-routing-component&quot;&gt;子ルート&lt;/a&gt;である場合のルートの親 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff45d5a87a74679f399b1959935f568d12a35bbf" translate="yes">
          <source>The router &lt;code&gt;navigate&lt;/code&gt; method takes the same one-item &lt;em&gt;link parameters array&lt;/em&gt; that you can bind to a &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; directive. It holds the &lt;em&gt;path to the &lt;code&gt;HeroListComponent&lt;/code&gt;&lt;/em&gt;:</source>
          <target state="translated">ルーター &lt;code&gt;navigate&lt;/code&gt; メソッドは、 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;]&lt;/code&gt; ディレクティブにバインドできる同じ1項目の&lt;em&gt;リンクパラメーター配列&lt;/em&gt;を受け取ります 。 &lt;em&gt; &lt;code&gt;HeroListComponent&lt;/code&gt; へ&lt;/em&gt;の&lt;em&gt;パスを&lt;/em&gt;保持し&lt;em&gt;ます&lt;/em&gt; ：</target>
        </trans-unit>
        <trans-unit id="e6adcc63174d5c2a81f7c61ec96d14f7c1aa0c0c" translate="yes">
          <source>The router adds the lazy module's providers and the providers of its imported NgModules to this child injector.</source>
          <target state="translated">ルーターは、遅延モジュールのプロバイダーとインポートされたNgModuleのプロバイダーをこの子インジェクターに追加します。</target>
        </trans-unit>
        <trans-unit id="464e7a2dded2eb7cef76bc15857f7a52ef5cb36b" translate="yes">
          <source>The router assumed that your route specification targeted the &lt;em&gt;unnamed&lt;/em&gt; primary outlet and created these objects for you.</source>
          <target state="translated">ルーターは、ルート指定が&lt;em&gt;名前のない&lt;/em&gt;プライマリアウトレットをターゲットにしていると想定し、これらのオブジェクトを作成しました。</target>
        </trans-unit>
        <trans-unit id="86314416e2f5eb8bbfe8d314a88dba892d7a1414" translate="yes">
          <source>The router calls the &lt;code&gt;preload&lt;/code&gt; method with two arguments:</source>
          <target state="translated">ルーターは、次の2つの引数を使用して &lt;code&gt;preload&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="0b7b212269847557351f8b5a3f629304f4a10730" translate="yes">
          <source>The router composes the destination URL from the array like this: &lt;code&gt;localhost:4200/hero/15&lt;/code&gt;.</source>
          <target state="translated">ルーターは、 &lt;code&gt;localhost:4200/hero/15&lt;/code&gt; ような配列から宛先URLを構成します。</target>
        </trans-unit>
        <trans-unit id="3e64c73914c5847d2de53b2cd6e0ad0774bfb328" translate="yes">
          <source>The router defines navigation among views on a single page, as opposed to navigation among pages. It interprets URL-like links to determine which views to create or destroy, and which components to load or unload. It allows you to take advantage of &lt;a href=&quot;glossary#lazy-load&quot;&gt;lazy loading&lt;/a&gt; in your Angular apps.</source>
          <target state="translated">ルーターは、ページ間のナビゲーションではなく、単一ページ上のビュー間のナビゲーションを定義します。 URLに似たリンクを解釈して、作成または破棄するビュー、およびロードまたはアンロードするコンポーネントを決定します。 これにより、Angularアプリで&lt;a href=&quot;glossary#lazy-load&quot;&gt;遅延読み込み&lt;/a&gt;を利用できます。</target>
        </trans-unit>
        <trans-unit id="c17670c71f8c023ad90633a12d89c42440504772" translate="yes">
          <source>The router displays the components of these routes in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;CrisisCenterComponent&lt;/code&gt;, not in the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;AppComponent&lt;/code&gt; shell.</source>
          <target state="translated">ルーターは、 &lt;code&gt;AppComponent&lt;/code&gt; シェルの &lt;code&gt;CrisisCenterComponent&lt;/code&gt; ではなく、 CrisisCenterComponentの &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; にこれらのルートのコンポーネントを表示します。</target>
        </trans-unit>
        <trans-unit id="5c928e0d20717c8c5f4b3a4efd2288875d0f9b06" translate="yes">
          <source>The router draws upon its registry of definitions when the browser URL changes or when application code tells the router to navigate along a route path.</source>
          <target state="translated">ブラウザーのURLが変更されたとき、またはアプリケーションコードがルーターにルートパスに沿ってナビゲートするように指示したとき、ルーターは定義のレジストリを使用します。</target>
        </trans-unit>
        <trans-unit id="a093fc77d863ec9bd9a835484c18df4bd2839243" translate="yes">
          <source>The router embedded the &lt;code&gt;id&lt;/code&gt; value in the navigation URL because you had defined it as a route parameter with an &lt;code&gt;:id&lt;/code&gt; placeholder token in the route &lt;code&gt;path&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; で &lt;code&gt;:id&lt;/code&gt; プレースホルダートークンを使用してルートパラメーターとして定義したため、ルーターはナビゲーションURLに &lt;code&gt;id&lt;/code&gt; 値を埋め込みました。</target>
        </trans-unit>
        <trans-unit id="0703ea253b9b207877f837c0ebf348dabd5b539b" translate="yes">
          <source>The router extracts the route parameter (&lt;code&gt;id:15&lt;/code&gt;) from the URL and supplies it to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; via the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; service.</source>
          <target state="translated">ルーターはURLからルートパラメーター（ &lt;code&gt;id:15&lt;/code&gt; ）を &lt;code&gt;HeroDetailComponent&lt;/code&gt; し、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; サービスを介してHeroDetailComponentに提供します。</target>
        </trans-unit>
        <trans-unit id="36f288f65a85dc5f52b243320808ca5d7d00fb50" translate="yes">
          <source>The router interprets a link URL according to your app's view navigation rules and data state. You can navigate to new views when the user clicks a button or selects from a drop box, or in response to some other stimulus from any source. The router logs activity in the browser's history, so the back and forward buttons work as well.</source>
          <target state="translated">ルーターは、アプリのビューナビゲーションルールとデータ状態に従ってリンクURLを解釈します。 ユーザーがボタンをクリックするか、ドロップボックスから選択するか、ソースからの他の刺激に応じて、新しいビューに移動できます。 ルータはブラウザの履歴にアクティビティを記録するため、戻るボタンと進むボタンも機能します。</target>
        </trans-unit>
        <trans-unit id="40f94c674310a595511f95be3e481296d4f01b3b" translate="yes">
          <source>The router is keeping track of two separate branches in a navigation tree and generating a representation of that tree in the URL.</source>
          <target state="translated">ルーターは、ナビゲーションツリーで2つの別々のブランチを追跡し、URLでそのツリーの表現を生成しています。</target>
        </trans-unit>
        <trans-unit id="6f1fff5319d8f72c72ec0476e40e8b1da2d77ed9" translate="yes">
          <source>The router link directive always treats the provided input as a delta to the current url.</source>
          <target state="translated">ルーターリンクディレクティブは、提供された入力を常に現在のURLへのデルタとして扱います。</target>
        </trans-unit>
        <trans-unit id="170614389397ec9d97f973262e58d5663453a227" translate="yes">
          <source>The router maps URL-like paths to views instead of pages. When a user performs an action, such as clicking a link, that would load a new page in the browser, the router intercepts the browser's behavior, and shows or hides view hierarchies.</source>
          <target state="translated">ルーターは、URLのようなパスをページではなくビューにマップします。 ユーザーがリンクをクリックするなど、ブラウザーに新しいページを読み込むアクションを実行すると、ルーターはブラウザーの動作をインターセプトし、ビュー階層を表示または非表示にします。</target>
        </trans-unit>
        <trans-unit id="45c7188ec7a83f5f718d2d88747d152f1b97733f" translate="yes">
          <source>The router matches such &lt;em&gt;absolute&lt;/em&gt; paths to routes starting from the top of the route configuration.</source>
          <target state="translated">ルーターは、そのような&lt;em&gt;絶対&lt;/em&gt;パスをルート構成の先頭から始まるルートに一致させます。</target>
        </trans-unit>
        <trans-unit id="05d009d175fdb7f12138aac1b07043d6aa4d44ba" translate="yes">
          <source>The router merges the parameters, data, and resolve of the componentless parent into the parameters, data, and resolve of the children.</source>
          <target state="translated">ルーターは、コンポーネントレスの親のパラメーター、データ、および解決を、子のパラメーター、データ、および解決にマージします。</target>
        </trans-unit>
        <trans-unit id="67b6bd438f9d975bb93513d155cfcc4f597fa576" translate="yes">
          <source>The router module navigates among your app pages when the browser URL changes. For more information, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">ルーターモジュールは、ブラウザーのURLが変更されると、アプリページ間を移動します。 詳細については、 &lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be14d8494a5c5cba61dae579b492b85dc78e0eca" translate="yes">
          <source>The router outlet serves as a placeholder when the routed components will be rendered below it.</source>
          <target state="translated">ルーターアウトレットは、ルーティングされたコンポーネントがその下にレンダリングされるときにプレースホルダーとして機能します。</target>
        </trans-unit>
        <trans-unit id="736e289b0385ec3ddda27eea926de4105245493a" translate="yes">
          <source>The router selects the route with a &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;first match wins&lt;/em&gt;&lt;/a&gt; strategy. Wildcard routes are the least specific routes in the route configuration. Be sure it is the &lt;em&gt;last&lt;/em&gt; route in the configuration.</source>
          <target state="translated">ルーターは、 &lt;a href=&quot;router#example-config&quot;&gt;&lt;em&gt;最初に一致した勝ち&lt;/em&gt;&lt;/a&gt;戦略でルートを選択します。 ワイルドカードルートは、ルート構成で最も具体性の低いルートです。 設定の&lt;em&gt;最後の&lt;/em&gt;ルートであることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e483aae32dfdd13e3ceb796d853bc5f1c51b3ffb" translate="yes">
          <source>The router sets the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; method's &lt;code&gt;route&lt;/code&gt; parameter to the intended destination URL. The &lt;code&gt;checkLogin()&lt;/code&gt; method redirects to that URL once the user has logged in.</source>
          <target state="translated">ルーターは、 &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; メソッドの &lt;code&gt;route&lt;/code&gt; パラメーターを目的の宛先URLに設定します。 &lt;code&gt;checkLogin()&lt;/code&gt; メソッドは、ユーザーがログインするとそのURLにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="ed56f7656ac08b3e0ee8155fb0a3581dada87c03" translate="yes">
          <source>The router supports both styles with two &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; providers:</source>
          <target state="translated">ルーターは、2つの &lt;code&gt;&lt;a href=&quot;../api/common/locationstrategy&quot;&gt;LocationStrategy&lt;/a&gt;&lt;/code&gt; プロバイダーで両方のスタイルをサポートします。</target>
        </trans-unit>
        <trans-unit id="a62638a6e21e4759de70853b67830c5266f6a0ab" translate="yes">
          <source>The router supports directory-like syntax in a &lt;em&gt;link parameters list&lt;/em&gt; to help guide route name lookup:</source>
          <target state="translated">ルーターは、 &lt;em&gt;リンクパラメーターリスト&lt;/em&gt;でディレクトリのような構文をサポートし、ルート名の検索を支援します。</target>
        </trans-unit>
        <trans-unit id="8bf5781b34bee9259b2e2f8cf4416f1697ff1181" translate="yes">
          <source>The router supports multiple guard interfaces:</source>
          <target state="translated">ルータは複数のガードインターフェイスをサポートします。</target>
        </trans-unit>
        <trans-unit id="c0bca771ad18c103f1c47fc1e5a1d2836da9bf81" translate="yes">
          <source>The router supports navigation with optional parameters as well as required route parameters. Define &lt;em&gt;optional&lt;/em&gt; parameters in a separate object &lt;em&gt;after&lt;/em&gt; you define the required route parameters.</source>
          <target state="translated">ルーターは、オプションのパラメーターと必要なルートパラメーターを使用したナビゲーションをサポートしています。 必要なルートパラメータを定義した&lt;em&gt;後&lt;/em&gt; 、別のオブジェクトで&lt;em&gt;オプションの&lt;/em&gt;パラメータを定義します。</target>
        </trans-unit>
        <trans-unit id="b44e894ea1b945e0628e82828fbe796cf336ea56" translate="yes">
          <source>The router uses the browser's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt; for navigation. Thanks to &lt;code&gt;pushState&lt;/code&gt;, you can make in-app URL paths look the way you want them to look, e.g. &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt;. The in-app URLs can be indistinguishable from server URLs.</source>
          <target state="translated">ルーターは、ナビゲーションにブラウザーの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries&quot;&gt;history.pushState&lt;/a&gt;を使用します。 &lt;code&gt;pushState&lt;/code&gt; のおかげで、アプリ内のURLパスを、たとえば &lt;code&gt;localhost:4200/crisis-center&lt;/code&gt; ように見た目どおりにすることができます。 アプリ内URLはサーバーURLと見分けがつかない場合があります。</target>
        </trans-unit>
        <trans-unit id="53d9befd3cd261f060f5decb29960135724d8489" translate="yes">
          <source>The router works at the root level so if you put providers in a component, even &lt;code&gt;AppComponent&lt;/code&gt;, lazy loaded modules, which rely on the router, can&amp;rsquo;t see them.</source>
          <target state="translated">ルーターはルートレベルで動作するため、コンポーネントにプロバイダーを配置すると、ルーターに依存する遅延ロードされたモジュールである &lt;code&gt;AppComponent&lt;/code&gt; でさえ、それらを見ることができません。</target>
        </trans-unit>
        <trans-unit id="0ba9dade3e3b9ffdda20ce10c97f537f8ff12442" translate="yes">
          <source>The router's &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface is optional. The &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; doesn't inherit from a base class. The router looks for that method and calls it if found.</source>
          <target state="translated">ルーターの &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; インターフェイスはオプションです。 &lt;code&gt;CrisisDetailResolverService&lt;/code&gt; は基本クラスから継承しません。 ルーターはそのメソッドを探し、見つかった場合は呼び出します。</target>
        </trans-unit>
        <trans-unit id="40bd61970480593d5a81861e4cee600f3fafc0bf" translate="yes">
          <source>The routes are no longer in one file. They are distributed across two modules, &lt;code&gt;AppRoutingModule&lt;/code&gt; and &lt;code&gt;HeroesRoutingModule&lt;/code&gt;.</source>
          <target state="translated">ルートは1つのファイルにありません。 それらは &lt;code&gt;AppRoutingModule&lt;/code&gt; と &lt;code&gt;HeroesRoutingModule&lt;/code&gt; の 2つのモジュールに分散されています。</target>
        </trans-unit>
        <trans-unit id="c8bfeafd59576a5466c5d56c7ed9d1a4b51bcaed" translate="yes">
          <source>The running application displays three heroes:</source>
          <target state="translated">実行中のアプリケーションには3人のヒーローが表示されます。</target>
        </trans-unit>
        <trans-unit id="d2037d2f70edf3081cd81efee594d118f23f5b88" translate="yes">
          <source>The safe navigation operator ( &lt;code&gt;?&lt;/code&gt; ) and null property paths</source>
          <target state="translated">安全なナビゲーション演算子（ &lt;code&gt;?&lt;/code&gt; ）とnullプロパティパス</target>
        </trans-unit>
        <trans-unit id="e085db54661fcc65281a95cf0450e05e179ee59e" translate="yes">
          <source>The safe navigation operator (&lt;code&gt;?&lt;/code&gt;) means that the &lt;code&gt;employer&lt;/code&gt; field is optional and if &lt;code&gt;undefined&lt;/code&gt;, the rest of the expression should be ignored.</source>
          <target state="translated">安全なナビゲーション演算子（ &lt;code&gt;?&lt;/code&gt; ）は、 &lt;code&gt;employer&lt;/code&gt; フィールドがオプションであり、 &lt;code&gt;undefined&lt;/code&gt; 場合、式の残りの部分が無視されることを意味します。</target>
        </trans-unit>
        <trans-unit id="59c72d8464ed8d8df3745406023437ff7ed29782" translate="yes">
          <source>The safest way to get the injected service, the way that &lt;strong&gt;&lt;em&gt;always works&lt;/em&gt;&lt;/strong&gt;, is to &lt;strong&gt;get it from the injector of the &lt;em&gt;component-under-test&lt;/em&gt;&lt;/strong&gt;. The component injector is a property of the fixture's &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;イン&lt;/em&gt;ジェクト&lt;/strong&gt;されたサービスを取得する最も安全な方法、つまり&lt;strong&gt;&lt;em&gt;常に機能&lt;/em&gt;&lt;/strong&gt;する方法&lt;strong&gt;は、 &lt;em&gt;テスト対象のコンポーネント&lt;/em&gt;のインジェクターから取得すること&lt;/strong&gt;です。 コンポーネントインジェクターは、フィクスチャの &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; のプロパティです。</target>
        </trans-unit>
        <trans-unit id="939660064b29633f3b868d36327576ca89ac09ec" translate="yes">
          <source>The same built-in validators that are available as attributes in template-driven forms, such as &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, are all available to use as functions from the &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; class. For a full list of built-in validators, see the &lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; API reference.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; など、テンプレート駆動型フォームの属性として使用できるビルトインバリデーターはすべて、 &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; クラスの関数として使用できます。 組み込みバリデーターの完全なリストについては、 &lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt; APIリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="067302b47e77195f2f26c14e3937a22efcc89d72" translate="yes">
          <source>The same configuration options can also be provided through the CLI with your existing &lt;code&gt;production&lt;/code&gt; configuration.</source>
          <target state="translated">CLIを介して、既存の &lt;code&gt;production&lt;/code&gt; 構成で同じ構成オプションを提供することもできます。</target>
        </trans-unit>
        <trans-unit id="16cde22da225d9a04d00eca0b15817fbe6af3692" translate="yes">
          <source>The sample app and its translation file are now as follows:</source>
          <target state="translated">サンプルアプリとその翻訳ファイルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2018f14311878602d2320f5e56ba6ac75859ef04" translate="yes">
          <source>The sample app does not require a data server. It relies on the &lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;, which replaces the &lt;em&gt;HttpClient&lt;/em&gt; module's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;. The replacement service simulates the behavior of a REST-like backend.</source>
          <target state="translated">サンプルアプリにはデータサーバーは必要ありません。 &lt;em&gt;HttpClient&lt;/em&gt;モジュールの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; を置き換える&lt;a href=&quot;https://github.com/angular/in-memory-web-api/blob/master/README.md&quot;&gt;Angular &lt;em&gt;in-memory-web-api&lt;/em&gt;&lt;/a&gt;に依存しています。 置換サービスは、RESTのようなバックエンドの動作をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="d9639d7d5642ac0cfa45c5189886107eb05e6058" translate="yes">
          <source>The sample app for this guide doesn't have a server that accepts uploaded files. The &lt;code&gt;UploadInterceptor&lt;/code&gt; in &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; intercepts and short-circuits upload requests by returning an observable of simulated events.</source>
          <target state="translated">このガイドのサンプルアプリには、アップロードされたファイルを受け入れるサーバーがありません。 &lt;code&gt;app/http-interceptors/upload-interceptor.ts&lt;/code&gt; の &lt;code&gt;UploadInterceptor&lt;/code&gt; は、シミュレートされたイベントのオブザーバブルを返すことにより、アップロードリクエストをインターセプトおよびショートさせます。</target>
        </trans-unit>
        <trans-unit id="18a8f2d6b2521db5c000b09605bd6653cdd054b3" translate="yes">
          <source>The sample app for this guide includes a simplified version of the &quot;Tour of Heroes&quot; example that fetches heroes and enables users to add, delete, and update them.</source>
          <target state="translated">このガイドのサンプルアプリには、ヒーローを取得し、ユーザーがそれらを追加、削除、および更新できるようにする「ヒーローのツアー」サンプルの簡易バージョンが含まれています。</target>
        </trans-unit>
        <trans-unit id="006cff79a45782fa6207fcb043d6c24706576a90" translate="yes">
          <source>The sample app has an &lt;code&gt;AuthService&lt;/code&gt; that produces an authorization token. Here is its &lt;code&gt;AuthInterceptor&lt;/code&gt; that injects that service to get the token and adds an authorization header with that token to every outgoing request:</source>
          <target state="translated">サンプルアプリには、認証トークンを生成する &lt;code&gt;AuthService&lt;/code&gt; があります。 トークンを取得するためにそのサービスを挿入し、すべての発信リクエストにそのトークンを含む認証ヘッダーを追加する &lt;code&gt;AuthInterceptor&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4b25f5e76871ab40b71bff3adfc28a5e339486c0" translate="yes">
          <source>The sample app imports &lt;code&gt;GreetingModule&lt;/code&gt; and uses its &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method one time, in &lt;code&gt;AppModule&lt;/code&gt;. Registering it once like this prevents multiple instances.</source>
          <target state="translated">サンプルアプリは &lt;code&gt;GreetingModule&lt;/code&gt; をインポートし、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドを1回使用します。 このように一度登録すると、複数のインスタンスが防止されます。</target>
        </trans-unit>
        <trans-unit id="bbdc02b77eadf3cafece29a3b6adb0bfb784c563" translate="yes">
          <source>The sample application</source>
          <target state="translated">サンプルアプリケーション</target>
        </trans-unit>
        <trans-unit id="3bad0c6f1f3a97ac6c5ed1daf3fec0440d87ec3a" translate="yes">
          <source>The sample application doesn't talk to a server. Fortunately, you have another way to demonstrate an asynchronous router hook.</source>
          <target state="translated">サンプルアプリケーションはサーバーと通信しません。 幸いなことに、非同期ルーターフックを示す別の方法があります。</target>
        </trans-unit>
        <trans-unit id="2103219c7d79a26e0ff1f6660f7abac30fdaafba" translate="yes">
          <source>The sample application in action</source>
          <target state="translated">動作中のサンプルアプリケーション</target>
        </trans-unit>
        <trans-unit id="1127033a52632203fbf3f5f1079ad39c14f5ea44" translate="yes">
          <source>The sample application's &lt;code&gt;HighlightDirective&lt;/code&gt; sets the background color of an element based on either a data bound color or a default color (lightgray). It also sets a custom property of the element (&lt;code&gt;customProperty&lt;/code&gt;) to &lt;code&gt;true&lt;/code&gt; for no reason other than to show that it can.</source>
          <target state="translated">サンプルアプリケーションの &lt;code&gt;HighlightDirective&lt;/code&gt; は、データバインドカラーまたはデフォルトカラー（ライトグレー）に基づいて要素の背景色を設定します。 また、要素のカスタムプロパティ（ &lt;code&gt;customProperty&lt;/code&gt; ）を &lt;code&gt;true&lt;/code&gt; に設定しますが、それが可能であることを示す以外の理由はありません。</target>
        </trans-unit>
        <trans-unit id="dc8fd67bc712a242a84db80063d64dc1c8dbd84a" translate="yes">
          <source>The sample code applies the directive's &lt;code&gt;myHighlight&lt;/code&gt; attribute to two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, first without a value (yielding the default color) and then with an assigned color value.</source>
          <target state="translated">サンプルコードでは、ディレクティブの &lt;code&gt;myHighlight&lt;/code&gt; 属性を2つの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; タグに適用します。最初は値なし（デフォルトの色を生成）で、次に割り当てられた色値があります。</target>
        </trans-unit>
        <trans-unit id="6231d5bf243f4874525430c1c1584ebea7435e57" translate="yes">
          <source>The sample in this guide uses the default XLIFF 1.2 format.</source>
          <target state="translated">このガイドのサンプルでは、​​デフォルトのXLIFF 1.2形式を使用しています。</target>
        </trans-unit>
        <trans-unit id="180848306acfa9ca7d56cebe3f38672d87a67bb8" translate="yes">
          <source>The sample includes an &lt;em&gt;npm package search&lt;/em&gt; feature.</source>
          <target state="translated">サンプルには、 &lt;em&gt;npmパッケージ検索&lt;/em&gt;機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="845d81bff91c35f9ca3a0e8902c70651cdbae3e9" translate="yes">
          <source>The sample routing application does not include routing by default. When you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to create a project that will use routing, set the &lt;code&gt;--routing&lt;/code&gt; option for the project or app, and for each NgModule. When you create or initialize a new project (using the CLI &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command) or a new app (using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate app&lt;/code&gt;&lt;/a&gt; command), specify the &lt;code&gt;--routing&lt;/code&gt; option. This tells the CLI to include the &lt;code&gt;@angular/router&lt;/code&gt; npm package and create a file named &lt;code&gt;app-routing.module.ts&lt;/code&gt;. You can then use routing in any NgModule that you add to the project or app.</source>
          <target state="translated">サンプルのルーティングアプリケーションには、デフォルトではルーティングが含まれていません。 &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;を使用してルーティングを使用するプロジェクトを作成する場合、プロジェクトまたはアプリ、および各NgModuleに &lt;code&gt;--routing&lt;/code&gt; オプションを設定します。 新しいプロジェクト（CLI &lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;コマンドを使用）または新しいアプリ（ &lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate app&lt;/code&gt; &lt;/a&gt;コマンドを使用）を作成または初期化するときに、 &lt;code&gt;--routing&lt;/code&gt; オプションを指定します。 これは、 &lt;code&gt;@angular/router&lt;/code&gt; npmパッケージを含めて &lt;code&gt;app-routing.module.ts&lt;/code&gt; という名前のファイルを作成するようにCLIに指示します。 その後、プロジェクトまたはアプリに追加するNgModuleでルーティングを使用できます。</target>
        </trans-unit>
        <trans-unit id="48715b36d405c3c723bb6e1a83d110dfa8e48522" translate="yes">
          <source>The sample source code for this page, located in &lt;code&gt;context/examples/docs-style-guide&lt;/code&gt;, contains examples of every code snippet markup described in this section.</source>
          <target state="translated">&lt;code&gt;context/examples/docs-style-guide&lt;/code&gt; にあるこのページのサンプルソースコードには、このセクションで説明するすべてのコードスニペットマークアップの例が含まれています。</target>
        </trans-unit>
        <trans-unit id="f97b4d7dd36c622166d42d22b9b96141f0cd7661" translate="yes">
          <source>The sample web server for this guide is based on the popular &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; framework.</source>
          <target state="translated">このガイドのサンプルWebサーバーは、一般的な&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;フレームワークに基づいています。</target>
        </trans-unit>
        <trans-unit id="f1d88c2387cd1e3449b58fad506e327b13a8cf48" translate="yes">
          <source>The sample's &lt;code&gt;CraigComponent&lt;/code&gt; explores this question. &lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;Looking back&lt;/a&gt;, you see that the &lt;code&gt;Alex&lt;/code&gt; component &lt;em&gt;extends&lt;/em&gt; (&lt;em&gt;inherits&lt;/em&gt;) from a class named &lt;code&gt;Base&lt;/code&gt;.</source>
          <target state="translated">サンプルの &lt;code&gt;CraigComponent&lt;/code&gt; はこの質問を調査します。 &lt;a href=&quot;dependency-injection-navtree#alex&quot;&gt;振り返ってみる&lt;/a&gt;と、 &lt;code&gt;Alex&lt;/code&gt; コンポーネント&lt;em&gt;が&lt;/em&gt; &lt;code&gt;Base&lt;/code&gt; というクラスから&lt;em&gt;拡張&lt;/em&gt; （ &lt;em&gt;継承&lt;/em&gt; ）されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="b7f1caebac3561b1bd11adb25a659f920576c1e5" translate="yes">
          <source>The schema defines the types and default values of variables used in the schematic. For example, the hypothetical &quot;Hello World&quot; schematic might have the following schema.</source>
          <target state="translated">スキーマは、回路図で使用される変数のタイプとデフォルト値を定義します。 たとえば、架空の「Hello World」回路図には次のスキーマがあります。</target>
        </trans-unit>
        <trans-unit id="28cbf3d458ff001f8ea8f2ca87d3187c8823c817" translate="yes">
          <source>The schema for a &lt;code&gt;stackblitz.json&lt;/code&gt; hasn't been documented yet but looking at the &lt;code&gt;stackblitz.json&lt;/code&gt; files in the example folders should tell you most of what you need to know.</source>
          <target state="translated">&lt;code&gt;stackblitz.json&lt;/code&gt; のスキーマはまだ文書化されていませんが、サンプルフォルダー内の &lt;code&gt;stackblitz.json&lt;/code&gt; ファイルを見ると、 知っておくべきほとんどのことがわかります。</target>
        </trans-unit>
        <trans-unit id="4ddb5588b2b1fc36ef16d673582bc1ea813181ee" translate="yes">
          <source>The schematic collection can be a powerful tool for creating, modifying, and maintaining any software project, but is particularly useful for customizing Angular projects to suit the particular needs of your own organization. You might use schematics, for example, to generate commonly-used UI patterns or specific components, using predefined templates or layouts. You can use schematics to enforce architectural rules and conventions, making your projects consistent and inter-operative.</source>
          <target state="translated">回路図コレクションは、ソフトウェアプロジェクトを作成、変更、および保守するための強力なツールになりますが、Angularプロジェクトをカスタマイズして自分の組織の特定のニーズに合わせるのに特に役立ちます。 たとえば、事前定義されたテンプレートまたはレイアウトを使用して、一般的に使用されるUIパターンまたは特定のコンポーネントを生成するために、回路図を使用できます。 回路図を使用して、アーキテクチャの規則と規則を適用し、プロジェクトの一貫性と相互運用性を実現できます。</target>
        </trans-unit>
        <trans-unit id="93cfe4e4adbbfded84c6c8f071cc59a7887190fb" translate="yes">
          <source>The schematic or collection:schematic to generate.</source>
          <target state="translated">生成する回路図またはコレクション：回路図。</target>
        </trans-unit>
        <trans-unit id="644126d257f84f676df9b8c93031e7697e56a4cb" translate="yes">
          <source>The scope for the new routing module.</source>
          <target state="translated">新しいルーティングモジュールのスコープ。</target>
        </trans-unit>
        <trans-unit id="5d45510eb393444a2c062d97a89bb09d19beb1e7" translate="yes">
          <source>The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</source>
          <target state="translated">参照変数のスコープはテンプレート全体です。 したがって、同じテンプレートで同じ変数名を複数回定義しないでください。実行時の値は予測不能です。</target>
        </trans-unit>
        <trans-unit id="5760dd13dc5237be2a7e34da16871a6fc9a53718" translate="yes">
          <source>The scope of the service instance is the parent component and its children. Components outside this component subtree have no access to the service or their communications.</source>
          <target state="translated">サービスインスタンスのスコープは、親コンポーネントとその子です。 このコンポーネントサブツリー外のコンポーネントは、サービスまたはその通信にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="ed54e7c3473aae483d10d6a344247055bd214d68" translate="yes">
          <source>The scoping rules outlined earlier apply to each of these loading patterns.</source>
          <target state="translated">前述のスコープ規則は、これらの負荷パターンのそれぞれに適用されます。</target>
        </trans-unit>
        <trans-unit id="6ca21198000899209ea533a19e8cd0f64d9427fc" translate="yes">
          <source>The search box on the Dashboard page is ignored.</source>
          <target state="translated">[ダッシュボード]ページの検索ボックスは無視されます。</target>
        </trans-unit>
        <trans-unit id="42ac7068ce0b0eff086a7cd61efd10c482ea26ac" translate="yes">
          <source>The search object</source>
          <target state="translated">検索オブジェクト</target>
        </trans-unit>
        <trans-unit id="986d1babf2cbea214b8a121acd469431369cde38" translate="yes">
          <source>The second &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; aliases the child component property name &lt;code&gt;masterName&lt;/code&gt; as &lt;code&gt;'master'&lt;/code&gt;.</source>
          <target state="translated">2番目の &lt;code&gt;masterName&lt;/code&gt; は、子コンポーネントプロパティ名masterNameを &lt;code&gt;'master'&lt;/code&gt; としてエイリアスします。</target>
        </trans-unit>
        <trans-unit id="890b72d0bae3cb1fcd8858dc63a35a3adb6d2b0e" translate="yes">
          <source>The second and third test reveal an important limitation. The Angular testing environment does &lt;em&gt;not&lt;/em&gt; know that the test changed the component's &lt;code&gt;title&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; service responds to &lt;em&gt;asynchronous activities&lt;/em&gt; such as promise resolution, timers, and DOM events. But a direct, synchronous update of the component property is invisible. The test must call &lt;code&gt;fixture.detectChanges()&lt;/code&gt; manually to trigger another cycle of change detection.</source>
          <target state="translated">2番目と3番目のテストでは、重要な制限が明らかになりました。 Angularテスト環境は、テストによってコンポーネントの &lt;code&gt;title&lt;/code&gt; 変更されたことを認識しませ&lt;em&gt;ん&lt;/em&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixtureautodetect&quot;&gt;ComponentFixtureAutoDetect&lt;/a&gt;&lt;/code&gt; サービスは、Promise解決、タイマー、DOMイベントなどの&lt;em&gt;非同期アクティビティに&lt;/em&gt;応答します。 ただし、コンポーネントプロパティの直接の同期更新は表示されません。 このテストでは、 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; 手動で呼び出して、変更検出の別のサイクルをトリガーする必要があります。</target>
        </trans-unit>
        <trans-unit id="834aabaa20612a9062cae3e29b9e961cdcdb7ef5" translate="yes">
          <source>The second argument in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method takes an object for additional configuration options. The &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#preloadingStrategy&quot;&gt;preloadingStrategy&lt;/a&gt;&lt;/code&gt; is one of those options. Add the &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; token to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; call:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドの2番目の引数は、追加の構成オプションのオブジェクトを受け取ります。 &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#preloadingStrategy&quot;&gt;preloadingStrategy&lt;/a&gt;&lt;/code&gt; はこれらのオプションの1つです。 &lt;code&gt;&lt;a href=&quot;../api/router/preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; トークンを &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 呼び出しに追加します。</target>
        </trans-unit>
        <trans-unit id="67420eba778c81bceda710b2f41019a12b62d5ce" translate="yes">
          <source>The second argument, &lt;code&gt;delay&lt;/code&gt;, has the same syntax as &lt;code&gt;duration&lt;/code&gt;. For example:</source>
          <target state="translated">2番目の引数 &lt;code&gt;delay&lt;/code&gt; の構文は &lt;code&gt;duration&lt;/code&gt; と同じです。 例えば：</target>
        </trans-unit>
        <trans-unit id="e4728132b472fdaf23f6157a81e7c259035ede28" translate="yes">
          <source>The second bundle contains code in the old ES5 syntax, along with all necessary polyfills. This results in a larger bundle size, but supports older browsers.</source>
          <target state="translated">2番目のバンドルには、必要なすべてのポリフィルとともに、古いES5構文のコードが含まれています。 これにより、バンドルサイズが大きくなりますが、古いブラウザがサポートされます。</target>
        </trans-unit>
        <trans-unit id="acd35964f6f0d51879b94ba5f5c61077dd99875c" translate="yes">
          <source>The second element is a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with an &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt;. You know it's an event binding because the part to the left of the equal sign is in parentheses, &lt;code&gt;(click)&lt;/code&gt;.</source>
          <target state="translated">2番目の要素は、 &lt;a href=&quot;template-syntax#event-binding&quot;&gt;イベントバインディングを&lt;/a&gt;持つ &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; です。 等号の左側の部分が括弧で囲まれているため、イベントバインドであることがわかり &lt;code&gt;(click)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc449d513e1cc929356564804a02d3b22062ddbc" translate="yes">
          <source>The second example demonstrates passing in the &lt;code&gt;$event&lt;/code&gt; object, which provides details about the event to the component.</source>
          <target state="translated">2番目の例は、イベントに関する詳細をコンポーネントに提供する &lt;code&gt;$event&lt;/code&gt; オブジェクトの受け渡しを示しています。</target>
        </trans-unit>
        <trans-unit id="ad0d312637a21eae4b82436cf870b90d8c9345ee" translate="yes">
          <source>The second example demonstrates passing in the &lt;code&gt;$event&lt;/code&gt; object, which provides details about the event to the controller.</source>
          <target state="translated">2番目の例は、コントローラーにイベントの詳細を提供する &lt;code&gt;$event&lt;/code&gt; オブジェクトを渡す方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3b637601413f91f94772399c112fac361b60d0c5" translate="yes">
          <source>The second item identifies the child route details about a particular crisis (&lt;code&gt;/:id&lt;/code&gt;).</source>
          <target state="translated">2番目の項目は、特定の危機に関する子ルートの詳細を識別します（ &lt;code&gt;/:id&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="31c7c11b46015d9e7e37751c373ace9c44818123" translate="yes">
          <source>The second kind of entry component occurs in a route definition like this:</source>
          <target state="translated">2番目の種類のエントリコンポーネントは、次のようなルート定義で発生します。</target>
        </trans-unit>
        <trans-unit id="80d2b152141df0551d01e052076dd9a2bf659174" translate="yes">
          <source>The second parameter identifies this as a &lt;code&gt;plural&lt;/code&gt; translation type.</source>
          <target state="translated">2番目のパラメーターは、これを &lt;code&gt;plural&lt;/code&gt; 翻訳タイプとして識別します。</target>
        </trans-unit>
        <trans-unit id="2ad7a68528bfceb60940f6593bc4a5c0d6da5983" translate="yes">
          <source>The second parameter to the Jasmine matcher (e.g., &lt;code&gt;'expected name'&lt;/code&gt;) is an optional failure label. If the expectation fails, Jasmine appends this label to the expectation failure message. In a spec with multiple expectations, it can help clarify what went wrong and which expectation failed.</source>
          <target state="translated">Jasmine matcherの2番目のパラメーター（例： &lt;code&gt;'expected name'&lt;/code&gt; ）は、オプションの障害ラベルです。 期待が失敗した場合、Jasmineはこのラベルを期待失敗メッセージに追加します。 複数の期待がある仕様では、何が間違っていて、どの期待が失敗したかを明確にするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="75e29b682d0d5764eb407c6ced980c4bbb5fe3df" translate="yes">
          <source>The second parameter, &lt;code&gt;extraProviders&lt;/code&gt;, is optional. It lets you specify dependency providers that apply only when running on this server. You can do this when your app needs information that can only be determined by the currently running server instance. One example could be the running server's &lt;em&gt;origin&lt;/em&gt;, which could be used to &lt;a href=&quot;universal#http-urls&quot;&gt;calculate absolute HTTP URLs&lt;/a&gt; if not using the &lt;code&gt;Request&lt;/code&gt; token as shown above.</source>
          <target state="translated">2番目のパラメーター &lt;code&gt;extraProviders&lt;/code&gt; はオプションです。 このサーバーで実行されている場合にのみ適用される依存関係プロバイダーを指定できます。 これは、現在実行中のサーバーインスタンスによってのみ判断できる情報がアプリに必要な場合に実行できます。 1つの例としては、実行中のサーバーの&lt;em&gt;origin&lt;/em&gt;があります。これは、上記のように &lt;code&gt;Request&lt;/code&gt; トークンを使用しない場合に&lt;a href=&quot;universal#http-urls&quot;&gt;絶対HTTP URL&lt;/a&gt;を計算するために使用できます。</target>
        </trans-unit>
        <trans-unit id="022dba050c6e8639ff2efe745f9496f6a07db6c0" translate="yes">
          <source>The second property is a provider definition object, which tells the injector how to create the dependency value. The provider-definition key can be &lt;code&gt;useClass&lt;/code&gt;, as in the example. It can also be &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt;. Each of these keys provides a different type of dependency, as discussed below.</source>
          <target state="translated">2番目のプロパティはプロバイダー定義オブジェクトで、インジェクターに依存関係値の作成方法を指示します。 プロバイダー定義キーは、例のように &lt;code&gt;useClass&lt;/code&gt; にすることができます。 &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; にすることもできます。 以下で説明するように、これらの各キーは異なるタイプの依存関係を提供します。</target>
        </trans-unit>
        <trans-unit id="fe60b9d875a80248b494fbc59dbdf2537b6de57a" translate="yes">
          <source>The second provider substitutes &lt;code&gt;DateLoggerService&lt;/code&gt; for &lt;code&gt;LoggerService&lt;/code&gt;. &lt;code&gt;LoggerService&lt;/code&gt; is already registered at the &lt;code&gt;AppComponent&lt;/code&gt; level. When this child component requests &lt;code&gt;LoggerService&lt;/code&gt;, it receives a &lt;code&gt;DateLoggerService&lt;/code&gt; instance instead.</source>
          <target state="translated">2番目のプロバイダーは、 &lt;code&gt;LoggerService&lt;/code&gt; の代わりに &lt;code&gt;DateLoggerService&lt;/code&gt; を使用します。 &lt;code&gt;LoggerService&lt;/code&gt; はすでに &lt;code&gt;AppComponent&lt;/code&gt; レベルで登録されています。 この子コンポーネントが &lt;code&gt;LoggerService&lt;/code&gt; を要求すると 、代わりに &lt;code&gt;DateLoggerService&lt;/code&gt; インスタンスを受け取ります。</target>
        </trans-unit>
        <trans-unit id="0e6434f6538db6265436fe3ae1f9a0d66262b187" translate="yes">
          <source>The second specifies a literal string resource to use for the &lt;code&gt;TITLE&lt;/code&gt; token. The &lt;code&gt;TITLE&lt;/code&gt; provider token is &lt;em&gt;not&lt;/em&gt; a class, but is instead a special kind of provider lookup key called an &lt;a href=&quot;dependency-injection-in-action#injection-token&quot;&gt;injection token&lt;/a&gt;, represented by an &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">2番目は、 &lt;code&gt;TITLE&lt;/code&gt; トークンに使用するリテラル文字列リソースを指定します。 &lt;code&gt;TITLE&lt;/code&gt; プロバイダートークンはクラスではなく、 &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; インスタンスで表される&lt;a href=&quot;dependency-injection-in-action#injection-token&quot;&gt;インジェクショントークン&lt;/a&gt;と呼ばれる特別な種類のプロバイダールックアップキーです。</target>
        </trans-unit>
        <trans-unit id="cc2fae3d6572ac8d718bd250497aa8031b7f47a3" translate="yes">
          <source>The second translation unit, immediately below the first one, contains the &lt;code&gt;select&lt;/code&gt; message. Translate that as well.</source>
          <target state="translated">最初の翻訳単位のすぐ下にある2番目の翻訳単位には、 &lt;code&gt;select&lt;/code&gt; メッセージが含まれています 。 それも翻訳してください。</target>
        </trans-unit>
        <trans-unit id="322bf6fe354feb0ed8eefdb996e96edbf6d504a6" translate="yes">
          <source>The second unit contains the complete nested expression:</source>
          <target state="translated">2番目のユニットには、完全なネストされた式が含まれます。</target>
        </trans-unit>
        <trans-unit id="fd3336ba8ecc74fbec8d08991026da2b43cbb769" translate="yes">
          <source>The second, synchronous &lt;code&gt;beforeEach()&lt;/code&gt; contains the remaining setup steps, which include creating the component and querying for elements to inspect.</source>
          <target state="translated">2番目の同期 &lt;code&gt;beforeEach()&lt;/code&gt; には、コンポーネントの作成や検査する要素のクエリなど、残りのセットアップ手順が含まれます。</target>
        </trans-unit>
        <trans-unit id="ccbbf197c57bcf4dcf2acbe9b02811d4fb7292ef" translate="yes">
          <source>The secondary heading should be followed by a blank line and then the content for that heading.</source>
          <target state="translated">2番目の見出しの後に空白行が続き、その見出しの内容が続きます。</target>
        </trans-unit>
        <trans-unit id="9bbf6669b097783c6f5e9731d8bd819d03e19f1c" translate="yes">
          <source>The secondary route consists of an outlet name (&lt;code&gt;popup&lt;/code&gt;), a &lt;code&gt;colon&lt;/code&gt; separator, and the secondary route path (&lt;code&gt;compose&lt;/code&gt;).</source>
          <target state="translated">セカンダリルートは、アウトレット名（ &lt;code&gt;popup&lt;/code&gt; ）、 &lt;code&gt;colon&lt;/code&gt; セパレータ、およびセカンダリルートパス（ &lt;code&gt;compose&lt;/code&gt; ）で構成されます。</target>
        </trans-unit>
        <trans-unit id="5974edf352069a00dd09a93b85b1e1cf03f0a232" translate="yes">
          <source>The selector tells Angular to plug this root component into the &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; element on the host web page when the application launches.</source>
          <target state="translated">セレクターは、アプリケーションの起動時にこのルートコンポーネントをホストWebページの &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; 要素にプラグインするようにAngularに指示します。</target>
        </trans-unit>
        <trans-unit id="e950633873ec03732fd9736996584fa6ed62259d" translate="yes">
          <source>The separation of concerns here is the same as with &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, which are used for other CLI commands that touch your code (such as &lt;code&gt;ng generate&lt;/code&gt;).</source>
          <target state="translated">ここでの懸念の分離は、コードに触れる他のCLIコマンド（ &lt;code&gt;ng generate&lt;/code&gt; など）に使用される&lt;a href=&quot;glossary#schematic&quot;&gt;スケマティック&lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="81aeb61d2e22f8b8d9459e05b501bced326adf60" translate="yes">
          <source>The sequence of log messages follows the prescribed hook calling order: &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; (3x), &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; (3x), &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; (3x), and &lt;code&gt;&lt;a href=&quot;../api/core/ondestroy&quot;&gt;OnDestroy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ログメッセージのシーケンスは、規定のフック呼び出し順序に従います： &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/oninit&quot;&gt;OnInit&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; （3x）、 &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentinit&quot;&gt;AfterContentInit&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; （3x）、 &lt;code&gt;&lt;a href=&quot;../api/core/afterviewinit&quot;&gt;AfterViewInit&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; （3x）、および &lt;code&gt;&lt;a href=&quot;../api/core/ondestroy&quot;&gt;OnDestroy&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18ae83b605e538232ca7b3bc82c832eb67e352a0" translate="yes">
          <source>The sequence of router events is as follows:</source>
          <target state="translated">ルーターイベントのシーケンスは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1737d4ed6f800daea7476c0c70a1734eb7ce1928" translate="yes">
          <source>The server (&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node Express&lt;/a&gt; in this guide's example) passes client requests for application pages to the NgUniversal &lt;code&gt;ngExpressEngine&lt;/code&gt;. Under the hood, this calls Universal's &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; function, while providing caching and other helpful utilities.</source>
          <target state="translated">サーバー（このガイドの例では&lt;a href=&quot;https://expressjs.com/&quot;&gt;Node Express&lt;/a&gt; ）は、アプリケーションページのクライアントリクエストをNgUniversal &lt;code&gt;ngExpressEngine&lt;/code&gt; に渡します。 &lt;code&gt;&lt;a href=&quot;../api/platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;()&lt;/code&gt; は、これはUniversalのrenderModuleFactory （）関数を呼び出しますが、キャッシングやその他の有用なユーティリティを提供します。</target>
        </trans-unit>
        <trans-unit id="b91c33e79c6d8ce1f35c11a0064ccf17c1206386" translate="yes">
          <source>The server platform that supports the runtime compiler.</source>
          <target state="translated">ランタイムコンパイラをサポートするサーバープラットフォーム。</target>
        </trans-unit>
        <trans-unit id="fdc7974bddc4251d37c899dec154f7616873a7f7" translate="yes">
          <source>The server should respond with a single hero rather than an array of heroes.</source>
          <target state="translated">サーバーは、ヒーローの配列ではなく、単一のヒーローで応答する必要があります。</target>
        </trans-unit>
        <trans-unit id="eca5a8837e9ee160489059a172e9ebc977dd83cd" translate="yes">
          <source>The server will automatically reload your browser when new files are output.</source>
          <target state="translated">新しいファイルが出力されると、サーバーは自動的にブラウザーをリロードします。</target>
        </trans-unit>
        <trans-unit id="0d9613e884c4d7057875fd99d39be99f233ae206" translate="yes">
          <source>The server's data API determines the shape of the JSON data. The &lt;em&gt;Tour of Heroes&lt;/em&gt; data API returns the hero data as an array.</source>
          <target state="translated">サーバーのデータAPIがJSONデータの形状を決定します。 &lt;em&gt;Tour of Heroes&lt;/em&gt;データAPIは、ヒーローデータを配列として返します。</target>
        </trans-unit>
        <trans-unit id="d608ede8654d1838eb5137faa0d8ed16a87869ad" translate="yes">
          <source>The server-rendered app still launches quickly but the full client app may take seconds to load.</source>
          <target state="translated">サーバーレンダリングされたアプリは引き続き迅速に起動しますが、完全なクライアントアプリの読み込みには数秒かかる場合があります。</target>
        </trans-unit>
        <trans-unit id="e791eab073e4d3b4cd8bc1aca0e02dd44233a6e7" translate="yes">
          <source>The service can be instantiated by configuring a factory function, as in the following example.</source>
          <target state="translated">次の例のように、ファクトリ関数を構成することにより、サービスをインスタンス化できます。</target>
        </trans-unit>
        <trans-unit id="b01cb6b08662ccfbcebed41545cd05a24d2577c4" translate="yes">
          <source>The service exposes its cache of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; and two methods: one to &lt;code&gt;add()&lt;/code&gt; a message to the cache and another to &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; the cache.</source>
          <target state="translated">サービスは、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#messages&quot;&gt;messages&lt;/a&gt;&lt;/code&gt; キャッシュと2つのメソッドを公開します 。1つはキャッシュにメッセージを &lt;code&gt;add()&lt;/code&gt; 、もう1つはキャッシュを &lt;code&gt;&lt;a href=&quot;../api/forms/formarray#clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="8fbb599e20de587b80201a2202b3533ea4c17924" translate="yes">
          <source>The service itself is a class that the CLI generated and that's decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;. By default, this decorator has a &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property, which creates a provider for the service. In this case, &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; specifies that Angular should provide the service in the root injector.</source>
          <target state="translated">サービス自体は、CLIが生成したクラスであり、 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装飾されています。 デフォルトでは、このデコレーターには、サービスのプロバイダーを作成するgivenInプロパティがあります。 この場合、 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; は、Angularがルートインジェクターでサービスを提供することを指定します。</target>
        </trans-unit>
        <trans-unit id="a8d86534f286c4014047b48e39157c9ac642d3f4" translate="yes">
          <source>The service provided by the root &lt;code&gt;AppModule&lt;/code&gt; takes precedence over services provided by imported NgModules. The &lt;code&gt;AppModule&lt;/code&gt; always wins.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; によって提供されるサービスは、インポートされたNgModuleによって提供されるサービスよりも優先されます。 &lt;code&gt;AppModule&lt;/code&gt; は常に勝ちます。</target>
        </trans-unit>
        <trans-unit id="e4c344300d7fd4d9f966ba1a8642b3e11076118a" translate="yes">
          <source>The service uses the &lt;code&gt;import()&lt;/code&gt; method to load your bundled AngularJS application lazily. This decreases the initial bundle size of your application as you're not loading code your user doesn't need yet. You also need to provide a way to &lt;em&gt;bootstrap&lt;/em&gt; the application manually after it has been loaded. AngularJS provides a way to manually bootstrap an application using the &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angular.bootstrap()&lt;/a&gt; method with a provided HTML element. Your AngularJS app should also expose a &lt;code&gt;bootstrap&lt;/code&gt; method that bootstraps the AngularJS app.</source>
          <target state="translated">サービスは &lt;code&gt;import()&lt;/code&gt; メソッドを使用して、バンドルされたAngularJSアプリケーションを遅延的にロードします。 これにより、ユーザーがまだ必要としないコードをロードしていないため、アプリケーションの初期バンドルサイズが小さくなります。 また、アプリケーションがロードされた後に手動で&lt;em&gt;ブートストラップ&lt;/em&gt;する方法を提供する必要があります。 AngularJSは、提供されたHTML要素で&lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.bootstrap&quot;&gt;angle.bootstrap（）&lt;/a&gt;メソッドを使用して、アプリケーションを手動でブートストラップする方法を提供します。 また、AngularJSアプリは、AngularJSアプリをブートストラップする &lt;code&gt;bootstrap&lt;/code&gt; メソッドを公開する必要があります。</target>
        </trans-unit>
        <trans-unit id="dc4b5f46b09780ea494a593541c8cc9fef7174dd" translate="yes">
          <source>The service worker conserves bandwidth when possible. Resources are only downloaded if they've changed.</source>
          <target state="translated">Service Workerは、可能であれば帯域幅を節約します。 リソースは、変更された場合にのみダウンロードされます。</target>
        </trans-unit>
        <trans-unit id="73a76971f818809f629500d6b5210621468c33c3" translate="yes">
          <source>The service worker installed the updated version of your app &lt;em&gt;in the background&lt;/em&gt;, and the next time the page is loaded or reloaded, the service worker switches to the latest version.</source>
          <target state="translated">Service Workerはアプリの更新されたバージョンを&lt;em&gt;バックグラウンド&lt;/em&gt;でインストールし、次にページがロードまたはリロードされると、Service Workerは最新バージョンに切り替えます。</target>
        </trans-unit>
        <trans-unit id="cc0df69a7bfbd6545911d095948cf97558edba0d" translate="yes">
          <source>The set of NgModules whose exported &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt; are available to templates in this module.</source>
          <target state="translated">エクスポートされた&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;宣言&lt;/a&gt;がこのモジュールのテンプレートで利用できるNgModuleのセット。</target>
        </trans-unit>
        <trans-unit id="abd06758e4687a7c44919fabc0c064aac2354cc2" translate="yes">
          <source>The set of components that are bootstrapped when this module is bootstrapped. The components listed here are automatically added to &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">このモジュールがブートストラップされるときにブートストラップされるコンポーネントのセット。 ここにリストされているコンポーネントは、 &lt;code&gt;entryComponents&lt;/code&gt; に自動的に追加されます 。</target>
        </trans-unit>
        <trans-unit id="32d438c2e575af5904ec9ce7fda3a5333ad0ee04" translate="yes">
          <source>The set of components to compile when this NgModule is defined, so that they can be dynamically loaded into the view.</source>
          <target state="translated">このNgModuleが定義されたときにコンパイルするコンポーネントのセット。これにより、コンポーネントをビューに動的にロードできます。</target>
        </trans-unit>
        <trans-unit id="5fb26e057f395ff1c2bbe69c4c8605bab3259d00" translate="yes">
          <source>The set of components, directives, and pipes (&lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;declarables&lt;/a&gt;) that belong to this module.</source>
          <target state="translated">このモジュールに属するコンポーネント、ディレクティブ、およびパイプ（ &lt;a href=&quot;../../guide/glossary#declarable&quot;&gt;宣言可能&lt;/a&gt; ）のセット。</target>
        </trans-unit>
        <trans-unit id="7b2caf88051dc93e4146531fb1b86232037cd52e" translate="yes">
          <source>The set of components, directives, and pipes declared in this NgModule that can be used in the template of any component that is part of an NgModule that imports this NgModule. Exported declarations are the module's public API.</source>
          <target state="translated">このNgModuleで宣言されるコンポーネント、ディレクティブ、およびパイプのセット。このNgModuleをインポートするNgModuleの一部であるコンポーネントのテンプレートで使用できます。 エクスポートされた宣言は、モジュールのパブリックAPIです。</target>
        </trans-unit>
        <trans-unit id="0c259b27e27fec00cdb957688cd4f00e39150e77" translate="yes">
          <source>The set of injectable objects that are available in the injector of this module.</source>
          <target state="translated">このモジュールのインジェクターで利用可能なインジェクト可能なオブジェクトのセット。</target>
        </trans-unit>
        <trans-unit id="d5765ec9ddf94071c5020c93344913452a009948" translate="yes">
          <source>The set of questions you've defined for the job application is returned from the &lt;code&gt;QuestionService&lt;/code&gt;. In a real app you'd retrieve these questions from storage.</source>
          <target state="translated">求人応募用に定義した一連の質問が &lt;code&gt;QuestionService&lt;/code&gt; から返されます。 実際のアプリでは、これらの質問をストレージから取得します。</target>
        </trans-unit>
        <trans-unit id="21e915a97b647841a3c77d6bb5bc493db4e59530" translate="yes">
          <source>The set of schemas that declare elements to be allowed in the NgModule. Elements and properties that are neither Angular components nor directives must be declared in a schema.</source>
          <target state="translated">NgModuleで許可される要素を宣言するスキーマのセット。 Angularコンポーネントでもディレクティブでもない要素とプロパティは、スキーマで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="f833bd6b1e79171a431acd5cc244779fb79402e4" translate="yes">
          <source>The set of selectors that are available to a template include those declared here, and those that are exported from imported NgModules.</source>
          <target state="translated">テンプレートで使用できるセレクターのセットには、ここで宣言されたものと、インポートされたNgModulesからエクスポートされたものが含まれます。</target>
        </trans-unit>
        <trans-unit id="b6a30893f8633b1e28a52635e18ed8118090a942" translate="yes">
          <source>The setter of the &lt;code&gt;name&lt;/code&gt; input property in the child &lt;code&gt;NameChildComponent&lt;/code&gt; trims the whitespace from a name and replaces an empty value with default text.</source>
          <target state="translated">子 &lt;code&gt;NameChildComponent&lt;/code&gt; の &lt;code&gt;name&lt;/code&gt; 入力プロパティのセッターは、 名前から空白を削除し 、空の値をデフォルトのテキストに置き換えます。</target>
        </trans-unit>
        <trans-unit id="882e77e815d86faba535964e8ae6e6a1f26ffa49" translate="yes">
          <source>The setup for the &lt;em&gt;test-host&lt;/em&gt; tests is similar to the setup for the stand-alone tests:</source>
          <target state="translated">&lt;em&gt;テストホスト&lt;/em&gt;テストのセットアップは、スタンドアロンテストのセットアップと同様です。</target>
        </trans-unit>
        <trans-unit id="52f4e19d49b1e5a67a00d5af99c62cbc1c7875a5" translate="yes">
          <source>The shadow-dom-piercing descendant combinator is deprecated and support is being &lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;removed from major browsers and tools&lt;/a&gt;. As such, in v4 we deprecated support in Angular for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;. Until removal, &lt;code&gt;::ng-deep&lt;/code&gt; is preferred for broader compatibility with the tools.</source>
          <target state="translated">shadow-dom-piercing子孫コンビネーターは非推奨になり&lt;a href=&quot;https://developers.google.com/web/updates/2017/10/remove-shadow-piercing&quot;&gt;、主要なブラウザーとツールから&lt;/a&gt;サポートが削除されます 。 そのため、v4では、 &lt;code&gt;/deep/&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;::ng-deep&lt;/code&gt; 3つすべてに対するAngularのサポートを廃止しました。 削除するまで、ツールとの幅広い互換性のために &lt;code&gt;::ng-deep&lt;/code&gt; が推奨されます。</target>
        </trans-unit>
        <trans-unit id="e2b9108143779ec04ceb04bcde0783f4eb419bdf" translate="yes">
          <source>The shadow-piercing descendant combinator is deprecated and &lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;support is being removed from major browsers&lt;/a&gt; and tools. As such we plan to drop support in Angular (for all 3 of &lt;code&gt;/deep/&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;::ng-deep&lt;/code&gt;). Until then &lt;code&gt;::ng-deep&lt;/code&gt; should be preferred for a broader compatibility with the tools.</source>
          <target state="translated">シャドウピアスの子孫コンビネータは廃止&lt;a href=&quot;https://www.chromestatus.com/features/6750456638341120&quot;&gt;され、主要なブラウザ&lt;/a&gt;とツールからサポートが削除されています。 そのため、Angularのサポートを廃止する予定です（ &lt;code&gt;/deep/&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;::ng-deep&lt;/code&gt; 3つすべて）。 それまでは、ツールとの幅広い互換性のために &lt;code&gt;::ng-deep&lt;/code&gt; を優先する必要があります。</target>
        </trans-unit>
        <trans-unit id="d1572bbd4b2543d39de382abeaa39b959a062225" translate="yes">
          <source>The shim first loads the SystemJS configuration, then Angular's test support libraries, and then the application's spec files themselves.</source>
          <target state="translated">シムは最初にSystemJS構成をロードし、次にAngularのテストサポートライブラリをロードし、次にアプリケーションの仕様ファイル自体をロードします。</target>
        </trans-unit>
        <trans-unit id="d9c0ff4882b7ddca991893d98816e7055727d7c4" translate="yes">
          <source>The shorthand form expands into a long form that uses the &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; selector on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element. The content of the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element is the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element that held the short-form directive.</source>
          <target state="translated">短縮形は、 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素で &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;ngForOf&lt;/a&gt;&lt;/code&gt; セレクターを使用する長い形式に展開されます。 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素のコンテンツは、短い形式のディレクティブを保持した &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素です。</target>
        </trans-unit>
        <trans-unit id="553922474ce1ca6a6f30eca0ff378d2e094bbbe1" translate="yes">
          <source>The shorthand syntax &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; expands into two separate template specifications for the &quot;then&quot; and &quot;else&quot; clauses. For example, consider the following shorthand statement, that is meant to show a loading page while waiting for data to be loaded.</source>
          <target state="translated">簡略構文 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; は、「then」節と「else」節の2つの別個のテンプレート仕様に展開されます。 たとえば、次の速記文を考えてみましょう。これは、データの読み込みを待機している間に読み込みページを表示することを意図しています。</target>
        </trans-unit>
        <trans-unit id="153a8913765ac20b181614adc3911db7022d20a6" translate="yes">
          <source>The single parameter accepted is an initialization hash. Any properties of the response passed there will override the default values.</source>
          <target state="translated">受け入れられる単一のパラメーターは初期化ハッシュです。 渡された応答のプロパティは、デフォルト値をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="7ae02ec48c2aa6b29e8bf62369aed78347f97d35" translate="yes">
          <source>The smallest grouping of display elements that can be created and destroyed together. Angular renders a view under the control of one or more &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, especially &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; directives and their companion &lt;a href=&quot;glossary#template&quot;&gt;templates&lt;/a&gt;.</source>
          <target state="translated">一緒に作成および破棄できる表示要素の最小グループ。 Angularは、1つ以上の&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt; 、特に&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;ディレクティブとそのコンパニオン&lt;a href=&quot;glossary#template&quot;&gt;テンプレート&lt;/a&gt;の制御下でビューをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="fd28324682f0c17450b3cf5ed2f78e84c835aa30" translate="yes">
          <source>The sneaky spy directive is simple, consisting almost entirely of &lt;code&gt;ngOnInit()&lt;/code&gt; and &lt;code&gt;ngOnDestroy()&lt;/code&gt; hooks that log messages to the parent via an injected &lt;code&gt;LoggerService&lt;/code&gt;.</source>
          <target state="translated">卑劣なspyディレクティブはシンプルで、ほぼ完全に &lt;code&gt;ngOnDestroy()&lt;/code&gt; フックとngOnDestroy（）フックで構成され、注入された &lt;code&gt;LoggerService&lt;/code&gt; を介して親にメッセージを記録します。</target>
        </trans-unit>
        <trans-unit id="a51977b23bb7ecc232209e8d1327212e8a3ebfb7" translate="yes">
          <source>The source code for this tutorial and the complete &lt;em&gt;Tour of Heroes&lt;/em&gt; global styles are available in the live example.</source>
          <target state="translated">このチュートリアルのソースコードと完全な&lt;em&gt;Tour of Heroes&lt;/em&gt;グローバルスタイルは、ライブサンプルで利用できます。</target>
        </trans-unit>
        <trans-unit id="197396630d371033ea63576d710b5005e3bd9ab9" translate="yes">
          <source>The source component's injector.</source>
          <target state="translated">ソースコンポーネントのインジェクター。</target>
        </trans-unit>
        <trans-unit id="26d4b7c388a1bdb518c645561859bb64e0fbf361" translate="yes">
          <source>The source of truth provides the value and status of the form element at a given point in time. In reactive forms, the form model is the source of truth. In the example above, the form model is the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">真実のソースは、特定の時点でのフォーム要素の値とステータスを提供します。 リアクティブフォームでは、フォームモデルが真実の源です。 上記の例では、フォームモデルは &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="711481c7ae759061bd5e4428a64fc27d4832dd02" translate="yes">
          <source>The spy is designed such that any call to &lt;code&gt;getQuote&lt;/code&gt; receives an observable with a test quote. Unlike the real &lt;code&gt;getQuote()&lt;/code&gt; method, this spy bypasses the server and returns a synchronous observable whose value is available immediately.</source>
          <target state="translated">スパイは、 &lt;code&gt;getQuote&lt;/code&gt; を呼び出すと、テストクォート付きのObservableを受け取るように設計されています。 実際の &lt;code&gt;getQuote()&lt;/code&gt; メソッドとは異なり、このスパイはサーバーをバイパスし、値がすぐに利用可能な同期オブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="90b43b9097739862d0cb30d76b768225cec8d2a5" translate="yes">
          <source>The starter app's structure looks like this:</source>
          <target state="translated">スターターアプリの構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="8fa84009f343b37f2c309935ebef67d3cf1bb17d" translate="yes">
          <source>The state name, unique within the component.</source>
          <target state="translated">コンポーネント内で一意の状態名。</target>
        </trans-unit>
        <trans-unit id="8ba0f66a562868f6f0949ad17ceaa5aa9040735a" translate="yes">
          <source>The state object is defined by &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt;, and contains any developer-defined state value, as well as a unique ID that the router assigns to every router transition/navigation.</source>
          <target state="translated">状態オブジェクトは &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; によって定義され、開発者が定義した状態値と、ルーターがすべてのルーター遷移/ナビゲーションに割り当てる一意のIDを含みます。</target>
        </trans-unit>
        <trans-unit id="29682628931d961e1dc643e174f6cb46d55f3a40" translate="yes">
          <source>The statement context may also refer to properties of the template's own context. In the following examples, the template &lt;code&gt;$event&lt;/code&gt; object, a &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;template input variable&lt;/a&gt; (&lt;code&gt;let hero&lt;/code&gt;), and a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt; (&lt;code&gt;#heroForm&lt;/code&gt;) are passed to an event handling method of the component.</source>
          <target state="translated">ステートメントコンテキストは、テンプレート自体のコンテキストのプロパティも参照する場合があります。 次の例では、テンプレートの &lt;code&gt;$event&lt;/code&gt; オブジェクト、 &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;テンプレート入力変数&lt;/a&gt; （ &lt;code&gt;let hero&lt;/code&gt; ）、および&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;テンプレート参照変数&lt;/a&gt; （ &lt;code&gt;#heroForm&lt;/code&gt; ）がコンポーネントのイベント処理メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="ee7031536fc9f3201d33e673cc50dc352588d037" translate="yes">
          <source>The static and resolved data of this route</source>
          <target state="translated">このルートの静的および解決されたデータ</target>
        </trans-unit>
        <trans-unit id="6079268a1495ab3832f3c122c48c8debcb04466b" translate="yes">
          <source>The steps are the same as using the &lt;code&gt;providers&lt;/code&gt; array, with the exception of using the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array instead.</source>
          <target state="translated">手順は、代わりに &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列を使用することを除いて、 &lt;code&gt;providers&lt;/code&gt; 配列を使用する場合と同じです。</target>
        </trans-unit>
        <trans-unit id="7019f7ed50fbce076b2ffcd0fd378bb53f9230fa" translate="yes">
          <source>The steps below outline the data flow from model to view when the &lt;code&gt;favoriteColor&lt;/code&gt; changes from &lt;em&gt;Blue&lt;/em&gt; to &lt;em&gt;Red&lt;/em&gt;.</source>
          <target state="translated">以下の手順は、 &lt;code&gt;favoriteColor&lt;/code&gt; が&lt;em&gt;Blue&lt;/em&gt;から&lt;em&gt;Redに&lt;/em&gt;変わるときのモデルからビューへのデータフローの概要を示しています。</target>
        </trans-unit>
        <trans-unit id="8f083b699a0e24cfb31552a7c5515dedc3bffa68" translate="yes">
          <source>The steps below outline the data flow from model to view.</source>
          <target state="translated">以下の手順では、モデルからビューへのデータフローの概要を説明します。</target>
        </trans-unit>
        <trans-unit id="d6d931d512cd5180e215ff2bd54df9514cdbd37a" translate="yes">
          <source>The steps below outline the data flow from view to model when the input value changes from &lt;em&gt;Red&lt;/em&gt; to &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">以下の手順は、入力値が&lt;em&gt;Red&lt;/em&gt;から&lt;em&gt;Blueに&lt;/em&gt;変わるときのビューからモデルへのデータフローの概要を示しています。</target>
        </trans-unit>
        <trans-unit id="cf66d9ec419458eca31557b6784e06c3d74c7302" translate="yes">
          <source>The steps below outline the data flow from view to model.</source>
          <target state="translated">以下の手順は、ビューからモデルへのデータフローの概要を示しています。</target>
        </trans-unit>
        <trans-unit id="93bcd38a5f62ce5f433e4b3619e142ff10dbf2d5" translate="yes">
          <source>The steps below show you how to do the following:</source>
          <target state="translated">以下の手順は、次の方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b62b2ca3bd1da7bcd7ed67d55220aa0c687e3b42" translate="yes">
          <source>The strategy that controls how a component is transformed in a custom element.</source>
          <target state="translated">カスタム要素でコンポーネントを変換する方法を制御する戦略。</target>
        </trans-unit>
        <trans-unit id="930fe4769070145b5d1902f6b39df80e384668cc" translate="yes">
          <source>The strategy that the default change detector uses to detect changes. When set, takes effect the next time change detection is triggered.</source>
          <target state="translated">デフォルトの変更検出機能が変更を検出するために使用する戦略。 設定すると、次に変更検出がトリガーされたときに有効になります。</target>
        </trans-unit>
        <trans-unit id="bf8be7fcf53ea5a196bf46985745bd43109fefe5" translate="yes">
          <source>The strict checks of the &lt;code&gt;setValue()&lt;/code&gt; method help catch nesting errors in complex forms, while &lt;code&gt;patchValue()&lt;/code&gt; fails silently on those errors.</source>
          <target state="translated">&lt;code&gt;setValue()&lt;/code&gt; メソッドの厳密なチェックは、複雑なフォームのネストエラーをキャッチするのに役立ちますが、 &lt;code&gt;patchValue()&lt;/code&gt; はこれらのエラーでサイレントに失敗します。</target>
        </trans-unit>
        <trans-unit id="372bafa1bce494ea990979dd34c53dd96c7cc2ca" translate="yes">
          <source>The string assigned to &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; is not a &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expression&lt;/a&gt;. Rather, it's a &lt;em&gt;microsyntax&lt;/em&gt;&amp;mdash;a little language of its own that Angular interprets. The string &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; means:</source>
          <target state="translated">&lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 割り当てられた文字列は、 &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式で&lt;/a&gt;はありません。 むしろ、それは&lt;em&gt;マイクロシンタックス&lt;/em&gt;であり、Angularが解釈する独自の小さな言語です。 文字列 &lt;code&gt;&quot;let &lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt; of items&quot;&lt;/code&gt; は次を意味します。</target>
        </trans-unit>
        <trans-unit id="e44daa65c98054f261ccfa5f7cf11e49ee653d27" translate="yes">
          <source>The string form of &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; is deprecated (see &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt;). The function form (&lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt;) should be used instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; の文字列形式は非推奨です（ &lt;code&gt;&lt;a href=&quot;deprecatedloadchildren&quot;&gt;DeprecatedLoadChildren&lt;/a&gt;&lt;/code&gt; を参照）。 代わりに関数フォーム（ &lt;code&gt;&lt;a href=&quot;loadchildrencallback&quot;&gt;LoadChildrenCallback&lt;/a&gt;&lt;/code&gt; ）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5e2186518aafc34e0de597f98ce5a35b638ef12" translate="yes">
          <source>The string is a fixed value that you can put directly into the template.</source>
          <target state="translated">文字列は、テンプレートに直接入力できる固定値です。</target>
        </trans-unit>
        <trans-unit id="ee37f1eaca83dd9bb097b5466bff65a943fac485" translate="yes">
          <source>The string to transform to lower case.</source>
          <target state="translated">小文字に変換する文字列。</target>
        </trans-unit>
        <trans-unit id="cb45bf71782ca8d0a97a51a6af91cbb4a490dedc" translate="yes">
          <source>The string to transform to title case.</source>
          <target state="translated">タイトルケースに変換する文字列。</target>
        </trans-unit>
        <trans-unit id="417a5ce2ca98d102c22ce8871b11edab28c7f8e7" translate="yes">
          <source>The string to transform to upper case.</source>
          <target state="translated">大文字に変換する文字列。</target>
        </trans-unit>
        <trans-unit id="79bdda991ab152b790e3070b35eb8fda7e4c2b45" translate="yes">
          <source>The structure of an NgModule is the same whether it is a root module or a feature module. In the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which, like the root module, lets you use the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator; the second imports &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;, which contributes many common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt;. Feature modules import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, which is only imported once in the root module. &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; only contains information for common directives such as &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; which are needed in most templates, whereas &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; configures the Angular app for the browser which needs to be done only once.</source>
          <target state="translated">NgModuleの構造は、ルートモジュールでも機能モジュールでも同じです。 CLIで生成された機能モジュールでは、ファイルの上部に2つのJavaScriptインポートステートメントがあります。最初のインポートでは &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; がインポートされ、ルートモジュールと同様に &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターを使用できます。 2番目は、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; などの多くの一般的なディレクティブに寄与するCommonModuleをインポートします。 機能モジュールは &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; の代わりに &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポートします。BrowserModuleは、ルートモジュールに一度だけインポートされます。 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; には、ほとんどのテンプレートで必要な &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; などの一般的なディレクティブの情報のみが含まれていますが、 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; は、一度だけ実行する必要があるブラウザ用にAngularアプリを構成します。</target>
        </trans-unit>
        <trans-unit id="de78df528fc5f787d89545140bece8187c6b8538" translate="yes">
          <source>The stub selectors match the selectors for the corresponding real components. But their templates and classes are empty.</source>
          <target state="translated">スタブセレクターは、対応する実コンポーネントのセレクターと一致します。 しかし、それらのテンプレートとクラスは空です。</target>
        </trans-unit>
        <trans-unit id="a2d59788c70b71518e84d399dc1f8c1b1995a79e" translate="yes">
          <source>The styles specified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata &lt;em&gt;apply only within the template of that component&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータで指定されたスタイル&lt;em&gt;は、そのコンポーネントのテンプレート内でのみ適用&lt;/em&gt;され&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="f48dea481324aa0b7a7a250484ea3649910069fd" translate="yes">
          <source>The suggested polyfills are the ones that run full Angular applications. You may need additional polyfills to support features not covered by this list. Note that polyfills cannot magically transform an old, slow browser into a modern, fast one.</source>
          <target state="translated">推奨されるポリフィルは、完全なAngularアプリケーションを実行するものです。 このリストに含まれていない機能をサポートするために、追加のポリフィルが必要になる場合があります。 ポリフィルは、古い低速のブラウザを魔法のように現代的な高速ブラウザに変換できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="629cf41ae2bb443d131c775aab136684c9761d9b" translate="yes">
          <source>The switch directives are particularly useful for adding and removing &lt;em&gt;component elements&lt;/em&gt;. This example switches among four &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; components defined in the &lt;code&gt;item-switch.components.ts&lt;/code&gt; file. Each component has an &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;input property&lt;/a&gt; which is bound to the &lt;code&gt;currentItem&lt;/code&gt; of the parent component.</source>
          <target state="translated">switchディレクティブは、 &lt;em&gt;コンポーネント要素の&lt;/em&gt;追加と削除に特に役立ち&lt;em&gt;ます&lt;/em&gt; 。 この例では、 &lt;code&gt;item-switch.components.ts&lt;/code&gt; ファイルで定義されている4つの &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; コンポーネントを切り替えます。 各コンポーネントには、親コンポーネントの &lt;code&gt;currentItem&lt;/code&gt; にバインドされた &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;template-syntax#inputs-outputs&quot;&gt;入力プロパティが&lt;/a&gt;あります。</target>
        </trans-unit>
        <trans-unit id="cb1898cd24b327b717bb4aef090ad4e9542fafed" translate="yes">
          <source>The switch from the &lt;em&gt;local variable&lt;/em&gt; to the &lt;em&gt;ViewChild&lt;/em&gt; technique is solely for the purpose of demonstration.</source>
          <target state="translated">&lt;em&gt;ローカル変数&lt;/em&gt;から&lt;em&gt;ViewChild&lt;/em&gt;テクニックへの&lt;em&gt;切り替え&lt;/em&gt;は、デモンストレーションのみを目的としています。</target>
        </trans-unit>
        <trans-unit id="40988748687c9ee6daa755f997551a5b4a1441e8" translate="yes">
          <source>The switch value assigned to &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;hero.emotion&lt;/code&gt;) determines which (if any) of the switch cases are displayed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;hero.emotion&lt;/code&gt; ）に割り当てられたスイッチ値は、表示されるスイッチケース（存在する場合）を決定します。</target>
        </trans-unit>
        <trans-unit id="9a62c528f0a931f89b2287d8a503aed1f8009829" translate="yes">
          <source>The symbol to localize.</source>
          <target state="translated">ローカライズするシンボル。</target>
        </trans-unit>
        <trans-unit id="4ed679bf2daa47968c73d3b3701e2547464b78f8" translate="yes">
          <source>The synchronous &lt;em&gt;beforeEach&lt;/em&gt;</source>
          <target state="translated">同期&lt;em&gt;beforeEach&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="abbd548fb3da1a05f8609c8a3757af73c0e7704c" translate="yes">
          <source>The synchronous validators registered with this group.</source>
          <target state="translated">このグループに登録された同期バリデーター。</target>
        </trans-unit>
        <trans-unit id="d372dcb466775574685c3fae862c265b2b17aef2" translate="yes">
          <source>The syntax in this example is as follows:</source>
          <target state="translated">この例の構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7e8b4d98df92da09eb34184a7a9efa8bfa65588d" translate="yes">
          <source>The syntax may seem strange to you but users are unlikely to notice or care as long as the URL can be emailed and pasted into a browser address bar as this one can.</source>
          <target state="translated">構文は奇妙に思えるかもしれませんが、URLを電子メールで送信してブラウザのアドレスバーに貼り付けることができる限り、ユーザーが気づいたり気にしたりすることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="5f242d259e92ca5a53c10705d273887b830471cd" translate="yes">
          <source>The table below summarizes the key differences between reactive and template-driven forms.</source>
          <target state="translated">次の表は、リアクティブフォームとテンプレート駆動フォームの主な違いをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="08365a3c201aa0c652bb798a6188518150b14a2a" translate="yes">
          <source>The target event determines the shape of the &lt;code&gt;$event&lt;/code&gt; object. If the target event is a native DOM element event, then &lt;code&gt;$event&lt;/code&gt; is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM event object&lt;/a&gt;, with properties such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;target.value&lt;/code&gt;.</source>
          <target state="translated">ターゲットイベントは、 &lt;code&gt;$event&lt;/code&gt; オブジェクトの形状を決定します。 ターゲットイベントがネイティブDOM要素イベントである場合、 &lt;code&gt;$event&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;target.value&lt;/code&gt; などのプロパティを持つ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOMイベントオブジェクト&lt;/a&gt; です 。</target>
        </trans-unit>
        <trans-unit id="088749979b09bfd46d68e94f37fbfac7f9f02497" translate="yes">
          <source>The target in the square brackets, &lt;code&gt;[]&lt;/code&gt;, is the property you decorate with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; in the child component. The binding source, the part to the right of the equal sign, is the data that the parent component passes to the nested component.</source>
          <target state="translated">角かっこ内のターゲット &lt;code&gt;[]&lt;/code&gt; は、子コンポーネントで &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; で修飾するプロパティです。 等号の右側の部分であるバインディングソースは、親コンポーネントがネストされたコンポーネントに渡すデータです。</target>
        </trans-unit>
        <trans-unit id="ea8a5033f54ae9c4081d5ab74a38829cd1975b5f" translate="yes">
          <source>The target named &quot;touch&quot; uses our builder, which we published to &lt;code&gt;@example/command-runner&lt;/code&gt;. (See &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;Publishing your Library&lt;/a&gt;)</source>
          <target state="translated">「touch」という名前のターゲットは、 &lt;code&gt;@example/command-runner&lt;/code&gt; 公開したビルダーを使用します。 （ &lt;a href=&quot;creating-libraries#publishing-your-library&quot;&gt;ライブラリの公開を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="83189c190de1ae321a2890e3cde83b83c7039a71" translate="yes">
          <source>The target property accepts a string value.</source>
          <target state="translated">ターゲットプロパティは文字列値を受け入れます。</target>
        </trans-unit>
        <trans-unit id="9803929ad21484881b4d3f6acabd34faf9ef3af2" translate="yes">
          <source>The target to apply service worker to.</source>
          <target state="translated">Service Workerを適用するターゲット。</target>
        </trans-unit>
        <trans-unit id="758b33e79798a18b4b5d7ce28a40f40423430f66" translate="yes">
          <source>The target to apply web worker to.</source>
          <target state="translated">Web Workerを適用するターゲット。</target>
        </trans-unit>
        <trans-unit id="4832cdf5716df7acd57fe0ac87672a04e59ff3aa" translate="yes">
          <source>The target, &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt;, which is an &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; property in the child component class, receives its value from the parent's property, &lt;code&gt;currentItem&lt;/code&gt;. When you click delete, the child component raises an event, &lt;code&gt;deleteRequest&lt;/code&gt;, which is the argument for the parent's &lt;code&gt;crossOffItem()&lt;/code&gt; method.</source>
          <target state="translated">子コンポーネントクラスの &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; プロパティであるターゲット &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; は、親のプロパティ &lt;code&gt;currentItem&lt;/code&gt; から値を受け取ります。 [削除]をクリックすると、子コンポーネントはイベント &lt;code&gt;deleteRequest&lt;/code&gt; を発生させます 。これは、親の &lt;code&gt;crossOffItem()&lt;/code&gt; メソッドの引数です。</target>
        </trans-unit>
        <trans-unit id="cd2fa7e7402ff15d8269c74078e6ca3033630d4e" translate="yes">
          <source>The telltale signs of &lt;em&gt;content projection&lt;/em&gt; are twofold:</source>
          <target state="translated">&lt;em&gt;コンテンツの投影&lt;/em&gt;の明確な兆候は2つあります。</target>
        </trans-unit>
        <trans-unit id="e2a40647498302ae30e3c37d356dbc6aee8a2f1c" translate="yes">
          <source>The template and style filenames reference the HTML and CSS files that StackBlitz generates.</source>
          <target state="translated">テンプレートとスタイルのファイル名は、StackBlitzが生成するHTMLファイルとCSSファイルを参照します。</target>
        </trans-unit>
        <trans-unit id="c4786e4078a2207abe9c4cfa9d1d9cf3ab9a3992" translate="yes">
          <source>The template associated with a component binds an animation trigger to an element.</source>
          <target state="translated">コンポーネントに関連付けられたテンプレートは、アニメーショントリガーを要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="7456b59897a0fe9f7fab60b1fd5714f118ee168e" translate="yes">
          <source>The template associated with this component makes use of the defined trigger by binding to an element within its template code.</source>
          <target state="translated">このコンポーネントに関連付けられたテンプレートは、テンプレートコード内の要素にバインドすることにより、定義されたトリガーを利用します。</target>
        </trans-unit>
        <trans-unit id="ad2640340c3b2204b3e2187d3156835ccc870fd9" translate="yes">
          <source>The template displays the two component properties using double curly brace interpolation:</source>
          <target state="translated">テンプレートは、二重中括弧補間を使用して2つのコンポーネントプロパティを表示します。</target>
        </trans-unit>
        <trans-unit id="576bb8173300bc75c8165cf5e1686bbdae4c4807" translate="yes">
          <source>The template expression inside the double quotes, &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt;, looks and behaves much like TypeScript. When the component's list of heroes has more than three items, Angular adds the paragraph to the DOM and the message appears. If there are three or fewer items, Angular omits the paragraph, so no message appears. For more information, see the &lt;a href=&quot;template-syntax#template-expressions&quot;&gt;template expressions&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">二重引用符内のテンプレート式 &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;heroes.length &amp;gt; 3&quot;&lt;/code&gt; 、TypeScriptのように見え、動作します。 コンポーネントのヒーローのリストに3つ以上のアイテムがある場合、Angularは段落をDOMに追加し、メッセージが表示されます。 アイテムが3つ以下の場合、Angularは段落を省略しますので、メッセージは表示されません。 詳細については、「 &lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt; 」ページの&lt;a href=&quot;template-syntax#template-expressions&quot;&gt;テンプレート式&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="06a26eec315b228b84cdf45c3df4a6172bf6d5de" translate="yes">
          <source>The template expression should evaluate to the type of value that the target property expects. Return a string if the target property expects a string, a number if it expects a number, an object if it expects an object, and so on.</source>
          <target state="translated">テンプレート式は、ターゲットプロパティが期待する値のタイプに評価される必要があります。 ターゲットプロパティが文字列を期待している場合は文字列を返し、数字を期待している場合は数字を、オブジェクトを期待している場合はオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="c2d8c395975bbaf307f8b6ad3d0e90daae25b98a" translate="yes">
          <source>The template expression to the right of the equals (=) contains a space-delimited string of CSS classes that the Router will add when this link is active (and remove when the link is inactive). You set the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; directive to a string of classes such as &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; or bind it to a component property that returns such a string.</source>
          <target state="translated">等号（=）の右側のテンプレート式には、このリンクがアクティブなときにルーターが追加する（およびリンクが非アクティブなときに削除する）CSSクラスのスペース区切り文字列が含まれます。 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;RouterLinkActive&lt;/a&gt;&lt;/code&gt; ディレクティブを &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;]=&quot;'active fluffy'&quot;&lt;/code&gt; などのクラスの文字列に設定するか、そのような文字列を返すコンポーネントプロパティにバインドします。</target>
        </trans-unit>
        <trans-unit id="c4a5ffd1d833be7be8234c4da4123676ff8d6c69" translate="yes">
          <source>The template input elements do &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレート入力要素は &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用し&lt;em&gt;ません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="e42a3efc7ee16d8ee04f26132d4fe495e4010874" translate="yes">
          <source>The template is a multi-line string within ECMAScript 2015 backticks (&lt;code&gt;`&lt;/code&gt;). The backtick (&lt;code&gt;`&lt;/code&gt;)&amp;mdash;which is &lt;em&gt;not&lt;/em&gt; the same character as a single quote (&lt;code&gt;'&lt;/code&gt;)&amp;mdash;allows you to compose a string over several lines, which makes the HTML more readable.</source>
          <target state="translated">テンプレートは、ECMAScript 2015バックティック（ &lt;code&gt;`&lt;/code&gt; ）内の複数行の文字列です。 一重引用符（ &lt;code&gt;'&lt;/code&gt; ）と同じ文字では&lt;em&gt;ない&lt;/em&gt;バックティック（ &lt;code&gt;`&lt;/code&gt; ）を使用すると、複数行にわたって文字列を構成でき、HTMLが読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="3bfaca46091594f4d1d50328af755b641a1f6fb4" translate="yes">
          <source>The template is compiled within the context of an NgModule&amp;mdash;the NgModule within which the template's component is declared&amp;mdash;which determines the set of selectors using the following rules:</source>
          <target state="translated">テンプレートは、次のルールを使用してセレクターのセットを決定するNgModule（テンプレートのコンポーネントが宣言されているNgModule）のコンテキスト内でコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="08d9755e408a260636b09bfef92316faea44cef4" translate="yes">
          <source>The template is completely self contained. It doesn't bind to the component, and the component does nothing.</source>
          <target state="translated">テンプレートは完全に自己完結型です。 コンポーネントにバインドせず、コンポーネントは何もしません。</target>
        </trans-unit>
        <trans-unit id="70313244a4cd1e80d96df911743747c5b1d0a1c0" translate="yes">
          <source>The template options object, &lt;code&gt;angularCompilerOptions&lt;/code&gt;, is a sibling to the &lt;code&gt;compilerOptions&lt;/code&gt; object that supplies standard options to the TypeScript compiler.</source>
          <target state="translated">テンプレートオプションオブジェクト、 &lt;code&gt;angularCompilerOptions&lt;/code&gt; は、TypeScriptコンパイラに標準オプションを提供する &lt;code&gt;compilerOptions&lt;/code&gt; オブジェクトの兄弟です。</target>
        </trans-unit>
        <trans-unit id="51b07ca66a0c80d8a3f63013141583e49737c085" translate="yes">
          <source>The template reference variable named &lt;code&gt;box&lt;/code&gt;, declared on the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, refers to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element itself. The code uses the &lt;code&gt;box&lt;/code&gt; variable to get the input element's &lt;code&gt;value&lt;/code&gt; and display it with interpolation between &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素で宣言された &lt;code&gt;box&lt;/code&gt; という名前のテンプレート参照変数は、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素自体を参照します。 コードは、 &lt;code&gt;box&lt;/code&gt; 変数を使用して入力要素の &lt;code&gt;value&lt;/code&gt; を取得し、 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; タグ間の補間で表示します。</target>
        </trans-unit>
        <trans-unit id="de2262f6eff650096d5ec2a922c11474976de6e1" translate="yes">
          <source>The template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.</source>
          <target state="translated">テンプレート構文は、プロパティバインディングにあまり適していないシナリオに特化した一方向のバインディングを提供します。</target>
        </trans-unit>
        <trans-unit id="083a3f1dd8ef9b722e60e2598176af5110f9dbf5" translate="yes">
          <source>The test assumes (correctly in this case) that the runtime event handler&amp;mdash;the component's &lt;code&gt;click()&lt;/code&gt; method&amp;mdash;doesn't care about the event object.</source>
          <target state="translated">テストでは、（この場合は正しく）ランタイムイベントハンドラー &lt;code&gt;click()&lt;/code&gt; コンポーネントのclick（）メソッド）がイベントオブジェクトを気にしないと想定しています。</target>
        </trans-unit>
        <trans-unit id="3fee678255a89c608b1621887a0565d3703b71c4" translate="yes">
          <source>The test configuration can use the &lt;code&gt;SharedModule&lt;/code&gt; too as seen in this alternative setup:</source>
          <target state="translated">この代替セットアップで見られるように、テスト構成では &lt;code&gt;SharedModule&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="9b3f7b35cc6454035e62b2373f127b23cbdae65d" translate="yes">
          <source>The test consumes that spy in the same way it did earlier.</source>
          <target state="translated">テストでは、以前と同じ方法でスパイが消費されます。</target>
        </trans-unit>
        <trans-unit id="64d8dd78adadc9a255e228a4c2bdbf4eb2d5cae3" translate="yes">
          <source>The test detects that event through its subscription to &lt;code&gt;selected&lt;/code&gt;.</source>
          <target state="translated">テストは、 &lt;code&gt;selected&lt;/code&gt; へのサブスクリプションを通じてそのイベントを検出します。</target>
        </trans-unit>
        <trans-unit id="8a9ff9ce0ff2aea3ea5d9b5e4c05171faa52806f" translate="yes">
          <source>The test fails when the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; tries to create the component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; がコンポーネントを作成しようとすると、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="dc61697c7a24dc30137c8a1be726e1064a8ae44b" translate="yes">
          <source>The test file extension &lt;strong&gt;must be &lt;code&gt;.spec.ts&lt;/code&gt;&lt;/strong&gt; so that tooling can identify it as a file with tests (AKA, a &lt;em&gt;spec&lt;/em&gt; file).</source>
          <target state="translated">テストファイルの拡張子&lt;strong&gt;は &lt;code&gt;.spec.ts&lt;/code&gt; である必要があります。&lt;/strong&gt;これにより、ツールがテストを含むファイル（ &lt;strong&gt;別名&lt;/strong&gt; 、 &lt;em&gt;spec&lt;/em&gt;ファイル）として識別することができます。</target>
        </trans-unit>
        <trans-unit id="e1c2770aafe4156298be6944b33c74e2f41bc2b8" translate="yes">
          <source>The test host sets the component's &lt;code&gt;hero&lt;/code&gt; input property with its test hero. It binds the component's &lt;code&gt;selected&lt;/code&gt; event with its &lt;code&gt;onSelected&lt;/code&gt; handler, which records the emitted hero in its &lt;code&gt;selectedHero&lt;/code&gt; property.</source>
          <target state="translated">テストホストは、コンポーネントの &lt;code&gt;hero&lt;/code&gt; 入力プロパティをテストヒーローに設定します。 コンポーネントの &lt;code&gt;selected&lt;/code&gt; イベントを &lt;code&gt;onSelected&lt;/code&gt; ハンドラーにバインドします。このハンドラーは、 &lt;code&gt;selectedHero&lt;/code&gt; ヒーローをselectedHeroプロパティに記録します。</target>
        </trans-unit>
        <trans-unit id="3f2fe2155132bb0d67244809298ea98ce16fe29e" translate="yes">
          <source>The test must wait for the &lt;code&gt;getQuote()&lt;/code&gt; observable to emit the next quote. Instead of calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt;, it calls &lt;code&gt;fixture.whenStable()&lt;/code&gt;.</source>
          <target state="translated">テストは、 &lt;code&gt;getQuote()&lt;/code&gt; オブザーバブルが次のクォートを発行するまで待機する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; を呼び出す代わりに、 &lt;code&gt;fixture.whenStable()&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="eae43c82340aebd9536a260fd2377f5061a497ef" translate="yes">
          <source>The test resumes within the promise callback, which calls &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; to update the quote element with the expected text.</source>
          <target state="translated">テストは、promiseコールバック内で再開します &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; コールバックは、 detectChanges（）を呼び出して、予想されるテキストでquote要素を更新します。</target>
        </trans-unit>
        <trans-unit id="9991de36b4ebc0ec198e7d693844d908feef9de2" translate="yes">
          <source>The test suite setup provided the same router spy &lt;a href=&quot;testing#routing-component&quot;&gt;described above&lt;/a&gt; which spies on the router without actually navigating.</source>
          <target state="translated">テストスイートのセットアップでは、実際にナビゲートせずにルーターをスパイ&lt;a href=&quot;testing#routing-component&quot;&gt;する上記&lt;/a&gt;と同じルータースパイが提供されました。</target>
        </trans-unit>
        <trans-unit id="6e4274a8f1842c774f28cff1fab41deb042b588a" translate="yes">
          <source>The test triggered a &quot;click&quot; event with a &lt;code&gt;null&lt;/code&gt; event object.</source>
          <target state="translated">テストは、 &lt;code&gt;null&lt;/code&gt; イベントオブジェクトで「クリック」イベントをトリガーしました。</target>
        </trans-unit>
        <trans-unit id="64322dc55f479cb397712aa1ca434f09788d33d9" translate="yes">
          <source>The testing goal is to verify that such bindings work as expected. The tests should set input values and listen for output events.</source>
          <target state="translated">テストの目標は、このようなバインディングが期待どおりに機能することを確認することです。 テストでは、入力値を設定し、出力イベントをリッスンする必要があります。</target>
        </trans-unit>
        <trans-unit id="6e2010246d07d1175ff55b50a4ac15be59351555" translate="yes">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) call it for you so there is rarely a reason for you to call it yourself.</source>
          <target state="translated">テストシム（ &lt;code&gt;karma-test-shim&lt;/code&gt; 、 &lt;code&gt;browser-test-shim&lt;/code&gt; ）がそれを呼び出すため、自分で呼び出す理由はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="148b2781f0537830461040ebc4675f60de170e4e" translate="yes">
          <source>The testing shims (&lt;code&gt;karma-test-shim&lt;/code&gt;, &lt;code&gt;browser-test-shim&lt;/code&gt;) establish the &lt;a href=&quot;testing&quot;&gt;initial test environment&lt;/a&gt; and a default testing module. The default testing module is configured with basic declaratives and some Angular service substitutes that every tester needs.</source>
          <target state="translated">テストシム（ &lt;code&gt;karma-test-shim&lt;/code&gt; 、 &lt;code&gt;browser-test-shim&lt;/code&gt; ）は、 &lt;a href=&quot;testing&quot;&gt;初期テスト環境&lt;/a&gt;とデフォルトのテストモジュールを確立します。 デフォルトのテストモジュールは、基本的な宣言とすべてのテスターが必要とするいくつかのAngularサービスの代替で構成されます。</target>
        </trans-unit>
        <trans-unit id="32d01fc5844e040dbbc5a7fa7fc314aed7f8af26" translate="yes">
          <source>The tests described in this guide are in &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt;. There are also tests of an application data service that call &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt;.</source>
          <target state="translated">このガイドで説明されているテストは &lt;code&gt;src/testing/http-client.spec.ts&lt;/code&gt; ます。 &lt;code&gt;src/app/heroes/heroes.service.spec.ts&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を呼び出すアプリケーションデータサービスのテストもあります。</target>
        </trans-unit>
        <trans-unit id="c46d6deffac15f691e67af3e7802efbd62c6f4b5" translate="yes">
          <source>The tests in this guide are designed to run in a browser so a &lt;code&gt;nativeElement&lt;/code&gt; value will always be an &lt;code&gt;HTMLElement&lt;/code&gt; or one of its derived classes.</source>
          <target state="translated">このガイドのテストはブラウザーで実行するように設計されているため、 &lt;code&gt;nativeElement&lt;/code&gt; 値は常に &lt;code&gt;HTMLElement&lt;/code&gt; またはその派生クラスの1つになります。</target>
        </trans-unit>
        <trans-unit id="97411629b7777fd387f17c68fd54b77f893a322d" translate="yes">
          <source>The tests in this guide only call &lt;code&gt;compileComponents&lt;/code&gt; when necessary.</source>
          <target state="translated">このガイドのテストは、必要な場合にのみ &lt;code&gt;compileComponents&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b9b3c07155cb24bc62c23428c9b9b89113dffe1f" translate="yes">
          <source>The tests need access to the (stub) &lt;code&gt;UserService&lt;/code&gt; injected into the &lt;code&gt;WelcomeComponent&lt;/code&gt;.</source>
          <target state="translated">テストでは、 &lt;code&gt;WelcomeComponent&lt;/code&gt; に挿入された（スタブ） &lt;code&gt;UserService&lt;/code&gt; にアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="552798847cfd969bee03bd536ec0eaa7b9abccb0" translate="yes">
          <source>The tests themselves are almost identical to the stand-alone version:</source>
          <target state="translated">テスト自体は、スタンドアロンバージョンとほとんど同じです。</target>
        </trans-unit>
        <trans-unit id="f24377c82eb7c604520a6472b6cdeda1e15d8e75" translate="yes">
          <source>The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.</source>
          <target state="translated">中括弧の間のテキストは、多くの場合、コンポーネントプロパティの名前です。 Angularは、その名前を対応するコンポーネントプロパティの文字列値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="7001ead9ab548d59ed3b0b0d47f9fc2feadd5c3b" translate="yes">
          <source>The text string.</source>
          <target state="translated">テキスト文字列。</target>
        </trans-unit>
        <trans-unit id="019a0c6e6325000b9ec468afe8f97d5dd0f39c5b" translate="yes">
          <source>The textbox should both &lt;em&gt;display&lt;/em&gt; the hero's &lt;code&gt;name&lt;/code&gt; property and &lt;em&gt;update&lt;/em&gt; that property as the user types. That means data flows from the component class &lt;em&gt;out to the screen&lt;/em&gt; and from the screen &lt;em&gt;back to the class&lt;/em&gt;.</source>
          <target state="translated">テキストボックスは、ヒーローの &lt;code&gt;name&lt;/code&gt; プロパティを&lt;em&gt;表示&lt;/em&gt;し、ユーザーが入力&lt;em&gt;するときに&lt;/em&gt;そのプロパティを&lt;em&gt;更新&lt;/em&gt;する必要があります。 つまり、データはコンポーネントクラス&lt;em&gt;から画面に&lt;/em&gt;流れ&lt;em&gt;、画面&lt;/em&gt;から&lt;em&gt;クラスに戻り&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="9c58df2e0d216969a6b8f76eb1c801e78a85b760" translate="yes">
          <source>The third argument, &lt;code&gt;easing&lt;/code&gt;, controls how the animation &lt;a href=&quot;http://easings.net/&quot;&gt;accelerates and decelerates&lt;/a&gt; during its runtime. For example, &lt;code&gt;ease-in&lt;/code&gt; causes the animation to begin slowly, and to pick up speed as it progresses.</source>
          <target state="translated">3番目の引数 &lt;code&gt;easing&lt;/code&gt; は 、ランタイム中にアニメーションを&lt;a href=&quot;http://easings.net/&quot;&gt;加速および減速&lt;/a&gt;する方法を制御します。 たとえば、 &lt;code&gt;ease-in&lt;/code&gt; と、アニメーションの開始が遅くなり、進行するにつれて速度が上がります。</target>
        </trans-unit>
        <trans-unit id="02b20036ccb6a097e5d6133a873e25f13d920be9" translate="yes">
          <source>The third parameter defines a pluralization pattern consisting of pluralization categories and their matching values.</source>
          <target state="translated">3番目のパラメーターは、複数化カテゴリーとそれらのマッチング値で構成される複数化パターンを定義します。</target>
        </trans-unit>
        <trans-unit id="e1fbe17ffff22abb0345952cf457c1a79e7059ef" translate="yes">
          <source>The threshold for error relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">ベースラインに対するエラーのしきい値（最小および最大）。</target>
        </trans-unit>
        <trans-unit id="60c47ee6ec4aee3d2f301fc3d304a4955e681b57" translate="yes">
          <source>The threshold for warning relative to the baseline (min &amp;amp; max).</source>
          <target state="translated">ベースラインに対する警告のしきい値（最小および最大）。</target>
        </trans-unit>
        <trans-unit id="c4b55d03441bffab6eec1d8c5b1ac161eb54aa13" translate="yes">
          <source>The time it takes the animation to complete, in milliseconds.</source>
          <target state="translated">アニメーションの完了にかかる時間（ミリ秒単位）。</target>
        </trans-unit>
        <trans-unit id="39672ec6c077499845ec25181d8fdddc36ce80f6" translate="yes">
          <source>The time zone. A time zone offset from GMT (such as &lt;code&gt;'+0430'&lt;/code&gt;), or a standard UTC/GMT or continental US time zone abbreviation. If not specified, uses host system settings.</source>
          <target state="translated">タイムゾーン。 GMTからのタイムゾーンオフセット（ &lt;code&gt;'+0430'&lt;/code&gt; ）、または標準のUTC / GMTまたは米国本土のタイムゾーンの略語。 指定しない場合、ホストシステム設定を使用します。</target>
        </trans-unit>
        <trans-unit id="20e4e50a13a151170196f0e0befe4c1c2ba96789" translate="yes">
          <source>The timing data for the step.</source>
          <target state="translated">ステップのタイミングデータ。</target>
        </trans-unit>
        <trans-unit id="3a5862865c9788bb436ccfadcc4ca1e2e0ed4f85" translate="yes">
          <source>The timing data for the steps.</source>
          <target state="translated">ステップのタイミングデータ。</target>
        </trans-unit>
        <trans-unit id="9bb53d35a2e2718224cdb5414e304756bc3d18c6" translate="yes">
          <source>The title should appear at the top of the physical page. Begin the title with the markdown &lt;code&gt;#&lt;/code&gt; character. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">タイトルは、物理ページの上部に表示されます。 タイトルをマークダウン &lt;code&gt;#&lt;/code&gt; 文字で開始します。 または、同等の &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; を記述できます。</target>
        </trans-unit>
        <trans-unit id="7392074d5488bfada1cba2db29c9e3aaea938dec" translate="yes">
          <source>The tool that the CLI uses to perform complex tasks such as compilation and test running, according to a provided configuration. Architect is a shell that runs a &lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt; (defined in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;) with a given &lt;a href=&quot;glossary#target&quot;&gt;target configuration&lt;/a&gt;.</source>
          <target state="translated">提供された構成に従って、CLIがコンパイルやテスト実行などの複雑なタスクを実行するために使用するツール。 Architectは、指定された&lt;a href=&quot;glossary#target&quot;&gt;ターゲット構成で&lt;/a&gt; &lt;a href=&quot;glossary#builder&quot;&gt;ビルダー&lt;/a&gt; （ &lt;a href=&quot;glossary#npm-package&quot;&gt;npmパッケージで&lt;/a&gt;定義）を実行するシェルです。</target>
        </trans-unit>
        <trans-unit id="a41ed1a3c20f3b032ce6bf341b07b3ff788f0e6c" translate="yes">
          <source>The top level of the root project folder for a collection contains configuration files, a &lt;code&gt;node_modules&lt;/code&gt; folder, and a &lt;code&gt;src/&lt;/code&gt; folder. The &lt;code&gt;src/&lt;/code&gt; folder contains subfolders for named schematics in the collection, and a schema, &lt;code&gt;collection.json&lt;/code&gt;, which describes the collected schematics. Each schematic is created with a name, description, and factory function.</source>
          <target state="translated">コレクションのルートプロジェクトフォルダーの最上位には、構成ファイル、 &lt;code&gt;node_modules&lt;/code&gt; フォルダー、および &lt;code&gt;src/&lt;/code&gt; フォルダーが含まれます。 &lt;code&gt;src/&lt;/code&gt; フォルダーには、コレクション内の名前付き回路図のサブフォルダーと、収集された回路図を記述するスキーマcollection.jsonが含まれています。 各回路図は、名前、説明、および工場出荷時の機能で作成されます。</target>
        </trans-unit>
        <trans-unit id="3f8c3bac42ac19a6aeec66ddbb65426c9445956b" translate="yes">
          <source>The top paragraph is in the DOM. The bottom, disused paragraph is not; in its place is a comment about &quot;bindings&quot; (more about that &lt;a href=&quot;structural-directives#asterisk&quot;&gt;later&lt;/a&gt;).</source>
          <target state="translated">一番上の段落はDOMにあります。 下の、使われていない段落はそうではありません。 その代わりに、「バインディング」に関するコメントがあります（これについては&lt;a href=&quot;structural-directives#asterisk&quot;&gt;後で説明します&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="00501897b059678bdf07befdac7616fe6a03505a" translate="yes">
          <source>The top-level directive for this control if present, otherwise null.</source>
          <target state="translated">このコントロールのトップレベルディレクティブが存在する場合は、そうでない場合はnull。</target>
        </trans-unit>
        <trans-unit id="aa4c65514687fcb647bd478319e8cd7a18baae19" translate="yes">
          <source>The top-level directive for this group if present, otherwise null.</source>
          <target state="translated">このグループの最上位ディレクティブが存在する場合は、そうでない場合はnull。</target>
        </trans-unit>
        <trans-unit id="7f59f229151882c691c9c4dbd40db2c8cf35cf79" translate="yes">
          <source>The top-level form directive for the control.</source>
          <target state="translated">コントロールのトップレベルのフォームディレクティブ。</target>
        </trans-unit>
        <trans-unit id="aa96b6dd3b9c83ecd894feff632ccdcd8ce5055e" translate="yes">
          <source>The total run time of the animation, in milliseconds.</source>
          <target state="translated">アニメーションの合計実行時間（ミリ秒単位）。</target>
        </trans-unit>
        <trans-unit id="14aee0513a51a8b6574f4395af2536721cbd0b69" translate="yes">
          <source>The transition from the server-rendered app to the client app happens quickly on a development machine, but you should always test your apps in real-world scenarios.</source>
          <target state="translated">サーバーレンダリングされたアプリからクライアントアプリへの移行は開発マシンで迅速に行われますが、実際のシナリオでは常にアプリをテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="2b2c02e508d78290b606f3c251693a83d5dd77d7" translate="yes">
          <source>The translation file format.</source>
          <target state="translated">翻訳ファイル形式。</target>
        </trans-unit>
        <trans-unit id="a01d8be6610dc7e8ff92abc660e7a063be84ddba" translate="yes">
          <source>The translation file.</source>
          <target state="translated">翻訳ファイル。</target>
        </trans-unit>
        <trans-unit id="566718f0b46f66443c966e183abd9ebc1557a5c4" translate="yes">
          <source>The translation process that transforms one version of JavaScript to another version; for example, down-leveling ES2015 to the older ES5 version.</source>
          <target state="translated">JavaScriptの1つのバージョンを別のバージョンに変換する翻訳プロセス。 たとえば、ES2015を古いES5バージョンにダウンレベルします。</target>
        </trans-unit>
        <trans-unit id="2fd93ca59b690739d63aaf50fa1d89967d7ba17a" translate="yes">
          <source>The translator may also need to know the meaning or intent of the text message within this particular app context.</source>
          <target state="translated">翻訳者は、この特定のアプリコンテキスト内のテキストメッセージの意味または意図を知る必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="6cbae59239e49c4968e3b2022136d5ac4b8dd7eb" translate="yes">
          <source>The trigger name, used to associate it with an element. Unique within the component.</source>
          <target state="translated">要素に関連付けるために使用されるトリガー名。 コンポーネント内で一意です。</target>
        </trans-unit>
        <trans-unit id="599b7384324d0565d53e3693b7036e321e474501" translate="yes">
          <source>The tutorial's &quot;in-memory web API&quot; module, a demo and development tool, intercepts all HTTP calls and simulates the behavior of a remote data server. In practice, you would remove that module and register your web API middleware on the server here.</source>
          <target state="translated">チュートリアルの「インメモリWeb API」モジュールであるデモおよび開発ツールは、すべてのHTTP呼び出しをインターセプトし、リモートデータサーバーの動作をシミュレートします。 実際には、このモジュールを削除して、Web APIミドルウェアをサーバーに登録します。</target>
        </trans-unit>
        <trans-unit id="29c54a0ff6d263b78d0ad5a2dc608fb24dc18c92" translate="yes">
          <source>The tutorial's &lt;code&gt;HeroService&lt;/code&gt; and &lt;code&gt;HeroSearchService&lt;/code&gt; delegate to the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; module to fetch application data. These services send requests to &lt;em&gt;relative&lt;/em&gt; URLs such as &lt;code&gt;api/heroes&lt;/code&gt;. In a Universal app, HTTP URLs must be &lt;em&gt;absolute&lt;/em&gt; (for example, &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt;). This means you need to change your services to make requests with absolute URLs when running on the server and with relative URLs when running in the browser.</source>
          <target state="translated">チュートリアルの &lt;code&gt;HeroService&lt;/code&gt; と &lt;code&gt;HeroSearchService&lt;/code&gt; は、Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; モジュールに委任して、アプリケーションデータを取得します。 これらのサービスは、 &lt;code&gt;api/heroes&lt;/code&gt; などの&lt;em&gt;相対&lt;/em&gt; URLにリクエストを送信します。 ユニバーサルアプリでは、HTTP URLは&lt;em&gt;絶対である&lt;/em&gt;必要があります（たとえば、 &lt;code&gt;https://my-server.com/api/heroes&lt;/code&gt; ）。 つまり、サーバーで実行する場合は絶対URLで、ブラウザーで実行する場合は相対URLでリクエストを行うようにサービスを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="afc05ea2dd3769a2464a65395b0f8fc1046a9410" translate="yes">
          <source>The two build systems support different things, and even where they support the same things, they do those things differently. This means that the TypeScript source can result in different JavaScript code in a built library than it would in a built application.</source>
          <target state="translated">2つのビルドシステムは異なることをサポートしており、同じものをサポートしている場合でも、それらの方法は異なります。 これは、TypeScriptソースが、ビルドされたアプリケーションとは異なるビルドされたライブラリのJavaScriptコードをもたらす可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="3d6bab88072a051c166e9e7471ac45c3b0a3264e" translate="yes">
          <source>The two components will have a parent/child relationship. The parent &lt;code&gt;HeroesComponent&lt;/code&gt; will control the child &lt;code&gt;HeroDetailComponent&lt;/code&gt; by sending it a new hero to display whenever the user selects a hero from the list.</source>
          <target state="translated">2つのコンポーネントには、親子関係があります。 親 &lt;code&gt;HeroesComponent&lt;/code&gt; は、ユーザーがリストからヒーローを選択するたびに表示する新しいヒーローを送信することにより、子HeroDetailComponentを制御します。</target>
        </trans-unit>
        <trans-unit id="5afe858ace0f507f6e00dcce82eccd00126d0833" translate="yes">
          <source>The two types of validators are passed in separately as the second and third arg respectively, or together as part of an options object.</source>
          <target state="translated">2種類のバリデーターは、それぞれ2番目と3番目の引数として別々に渡されるか、オプションオブジェクトの一部として一緒に渡されます。</target>
        </trans-unit>
        <trans-unit id="b4abd53c0253243e985b7e065cc9f874147ab4e8" translate="yes">
          <source>The two update events, &lt;code&gt;available&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt;, are &lt;code&gt;Observable&lt;/code&gt; properties of &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;available&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activated&quot;&gt;activated&lt;/a&gt;&lt;/code&gt; の2つの更新イベントは、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate&quot;&gt;SwUpdate&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Observable&lt;/code&gt; プロパティです。</target>
        </trans-unit>
        <trans-unit id="1dbdba75ae5eb9e9bc50a6b2bc270a30ddeeee80" translate="yes">
          <source>The two-way binding syntax is a great convenience compared to separate property and event bindings. It would be convenient to use two-way binding with HTML form elements like &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;. However, no native HTML element follows the &lt;code&gt;x&lt;/code&gt; value and &lt;code&gt;xChange&lt;/code&gt; event pattern.</source>
          <target state="translated">双方向のバインディング構文は、個別のプロパティバインディングとイベントバインディングに比べて非常に便利です。 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; などのHTMLフォーム要素で双方向バインディングを使用すると便利です。 ただし、 &lt;code&gt;x&lt;/code&gt; 値と &lt;code&gt;xChange&lt;/code&gt; イベントパターンに従うネイティブHTML要素はありません。</target>
        </trans-unit>
        <trans-unit id="552f44eabf3bee5b16dbbe6d805c5e4727da9fe7" translate="yes">
          <source>The two-way binding syntax is really just syntactic sugar for a &lt;em&gt;property&lt;/em&gt; binding and an &lt;em&gt;event&lt;/em&gt; binding. Angular desugars the &lt;code&gt;SizerComponent&lt;/code&gt; binding into this:</source>
          <target state="translated">双方向バインディング構文は、実際には、 &lt;em&gt;プロパティ&lt;/em&gt;バインディングと&lt;em&gt;イベント&lt;/em&gt;バインディングの単なる構文上の砂糖です。 Angularは、 &lt;code&gt;SizerComponent&lt;/code&gt; バインディングをこれに脱糖します。</target>
        </trans-unit>
        <trans-unit id="6513ae7688b62a5255ebc4d625abc9be33526ee7" translate="yes">
          <source>The type checker also throws an error if it can't determine whether a variable will be &lt;code&gt;null&lt;/code&gt; or undefined at runtime. You tell the type checker not to throw an error by applying the postfix &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;non-null assertion operator, !&lt;/a&gt;.</source>
          <target state="translated">型チェッカーは、実行時に変数が &lt;code&gt;null&lt;/code&gt; か未定義かを判断できない場合にもエラーをスローします。 postfix &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator&quot;&gt;non-n assertion operator！を&lt;/a&gt;適用することにより、タイプチェッカーにエラーをスローしないように指示します。 。</target>
        </trans-unit>
        <trans-unit id="81dce0b481d7ac34dd874fc96a0c29f5d10a16ae" translate="yes">
          <source>The type of budget. One of:</source>
          <target state="translated">予算のタイプ。 の一つ：</target>
        </trans-unit>
        <trans-unit id="c15292902555eb7a2059d3f203806ac34a995f12" translate="yes">
          <source>The type of component the factory will create.</source>
          <target state="translated">ファクトリが作成するコンポーネントのタイプ。</target>
        </trans-unit>
        <trans-unit id="7c0884d61dcbf36812f4f429d57a3fd536285ae5" translate="yes">
          <source>The type of numeric value to be formatted (such as &lt;code&gt;Decimal&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">フォーマットされる数値のタイプ（ &lt;code&gt;Decimal&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;numberformatstyle#Currency&quot;&gt;Currency&lt;/a&gt;&lt;/code&gt; など）</target>
        </trans-unit>
        <trans-unit id="1914de4f10fd251ed62f048b8948f40fc99532fb" translate="yes">
          <source>The type of object that &lt;a href=&quot;viewchildren&quot;&gt;&lt;code&gt;ViewChildren&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;contentchildren&quot;&gt;&lt;code&gt;ContentChildren&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;querylist&quot;&gt;&lt;code&gt;QueryList&lt;/code&gt;&lt;/a&gt; provide.</source>
          <target state="translated">&lt;a href=&quot;viewchildren&quot;&gt; &lt;code&gt;ViewChildren&lt;/code&gt; &lt;/a&gt; 、 &lt;a href=&quot;contentchildren&quot;&gt; &lt;code&gt;ContentChildren&lt;/code&gt; &lt;/a&gt; 、および&lt;a href=&quot;querylist&quot;&gt; &lt;code&gt;QueryList&lt;/code&gt; が&lt;/a&gt;提供するオブジェクトのタイプ。</target>
        </trans-unit>
        <trans-unit id="2cee06caf5b085e8040bc4dd74a44cf2669ac0d4" translate="yes">
          <source>The type of this component (as created by a &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; class).</source>
          <target state="translated">このコンポーネントのタイプ（ &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; クラスによって作成されたもの）。</target>
        </trans-unit>
        <trans-unit id="351e662a9168935a10d637a721b52c3db93d0b18" translate="yes">
          <source>The type parameter, &lt;code&gt;T&lt;/code&gt;, is the kind of metadata you'd pass to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator:</source>
          <target state="translated">タイプパラメータ &lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータに渡すメタデータの種類です。</target>
        </trans-unit>
        <trans-unit id="92e0731044a01c861010ac8dd3364de0bab42484" translate="yes">
          <source>The type parameter, while optional, conveys the dependency's type to developers and tooling. The token description is another developer aid.</source>
          <target state="translated">typeパラメーターはオプションですが、依存関係のタイプを開発者とツールに伝えます。 トークンの説明は、開発者向けの別の補助手段です。</target>
        </trans-unit>
        <trans-unit id="fdab28b804a5bc2df8ed953cd182dcd879bebcd0" translate="yes">
          <source>The underlying native element or &lt;code&gt;null&lt;/code&gt; if direct access to native elements is not supported (e.g. when the application runs in a web worker).</source>
          <target state="translated">基礎となるネイティブ要素、またはネイティブ要素への直接アクセスがサポートされていない場合は &lt;code&gt;null&lt;/code&gt; （アプリケーションがWebワーカーで実行されている場合など）。</target>
        </trans-unit>
        <trans-unit id="f9fb3d4a522a7d59fc653358ee450cd39cd54d77" translate="yes">
          <source>The unit test files themselves also need to be switched to Angular when their production counterparts are switched. The specs for the checkmark pipe are probably the most straightforward, as the pipe has no dependencies:</source>
          <target state="translated">ユニットテストファイル自体も、対応する製品を切り替えるときに、Angularに切り替える必要があります。 パイプには依存関係がないため、チェックマークパイプの仕様はおそらく最も簡単です。</target>
        </trans-unit>
        <trans-unit id="7b843cdeff59d7337d09dffec8474c659f368f17" translate="yes">
          <source>The unit test for the phone service is a bit more involved. You need to switch from the mocked-out AngularJS &lt;code&gt;$httpBackend&lt;/code&gt; to a mocked-out Angular Http backend.</source>
          <target state="translated">電話サービスの単体テストはもう少し複雑です。 モックアウトされたAngularJS &lt;code&gt;$httpBackend&lt;/code&gt; からモックアウトされたAngular Httpバックエンドに切り替える必要があります。</target>
        </trans-unit>
        <trans-unit id="789acab94f4da6bd1b31fd8d53475bbe9758d87a" translate="yes">
          <source>The updated &lt;code&gt;HeroesRoutingModule&lt;/code&gt; looks like this:</source>
          <target state="translated">更新された &lt;code&gt;HeroesRoutingModule&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="987de19a86a67d115685949783bff6fddad8b8ee" translate="yes">
          <source>The upgrade NgModule.</source>
          <target state="translated">アップグレードNgModule。</target>
        </trans-unit>
        <trans-unit id="d44b088804cbf01923d7400df118887612abd201" translate="yes">
          <source>The url from which this snapshot was created</source>
          <target state="translated">このスナップショットの作成元のURL</target>
        </trans-unit>
        <trans-unit id="0ee83b79b718d1a4ec36d1b3d58ebe726ac3e494" translate="yes">
          <source>The url serialization strategy is customizable. You can make all URLs case insensitive by providing a custom UrlSerializer.</source>
          <target state="translated">URLシリアル化戦略はカスタマイズ可能です。 カスタムUrlSerializerを提供することにより、すべてのURLの大文字と小文字を区別しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="ad97874a0022a010e0155677ec6967027c4314b9" translate="yes">
          <source>The use of &lt;code&gt;name&lt;/code&gt; attributes for validation and form-element change tracking.</source>
          <target state="translated">検証およびフォーム要素の変更追跡のための &lt;code&gt;name&lt;/code&gt; 属性の使用。</target>
        </trans-unit>
        <trans-unit id="9154043e44b5d932b8c61e6a2f25ebf4ef5aea92" translate="yes">
          <source>The user calls the &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; method, which updates the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">ユーザーは、 &lt;code&gt;favoriteColorControl.setValue()&lt;/code&gt; メソッドを呼び出して、 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 値を更新します。</target>
        </trans-unit>
        <trans-unit id="0a5976d96dbc10bd55988a4a489b75fc9937bde4" translate="yes">
          <source>The user can select a hero and see that hero's details.</source>
          <target state="translated">ユーザーはヒーローを選択し、そのヒーローの詳細を見ることができます。</target>
        </trans-unit>
        <trans-unit id="aa661a59e3356526e5cd2452506236a954f28c3e" translate="yes">
          <source>The user needs a way to open the popup. Open the &lt;code&gt;AppComponent&lt;/code&gt; and add a &quot;Contact&quot; link.</source>
          <target state="translated">ユーザーにはポップアップを開く方法が必要です。 &lt;code&gt;AppComponent&lt;/code&gt; を開き、「連絡先」リンクを追加します。</target>
        </trans-unit>
        <trans-unit id="369264e6d1f498d1106a6d3877d3ee5e43560ae5" translate="yes">
          <source>The user should be able to get to these details in three ways.</source>
          <target state="translated">ユーザーは3つの方法でこれらの詳細にアクセスできる必要があります。</target>
        </trans-unit>
        <trans-unit id="bbafb9f9e9d3caf33087f60e1818944be5dd3d9b" translate="yes">
          <source>The user should be able to navigate back and forth between the &lt;code&gt;DashboardComponent&lt;/code&gt; and the &lt;code&gt;HeroesComponent&lt;/code&gt; by clicking links in the navigation area near the top of the page.</source>
          <target state="translated">ユーザーは、ページの上部近くのナビゲーション領域にあるリンクをクリックして、 &lt;code&gt;DashboardComponent&lt;/code&gt; と &lt;code&gt;HeroesComponent&lt;/code&gt; の間を行き来できます。</target>
        </trans-unit>
        <trans-unit id="e9cc50a2572132b6fe866bbf0976206cd31bec89" translate="yes">
          <source>The user should be able to submit this form after filling it in. The &lt;em&gt;Submit&lt;/em&gt; button at the bottom of the form does nothing on its own, but it will trigger a form submit because of its type (&lt;code&gt;type=&quot;submit&quot;&lt;/code&gt;).</source>
          <target state="translated">ユーザーは、入力後にこのフォームを送信できる必要があります。フォームの下部にある[ &lt;em&gt;送信&lt;/em&gt; ]ボタンはそれ自体では何もしませんが、そのタイプ（ &lt;code&gt;type=&quot;submit&quot;&lt;/code&gt; ）のためにフォーム送信をトリガーします。</target>
        </trans-unit>
        <trans-unit id="01ba075c2899372b1eb9a9b167514bce8549789e" translate="yes">
          <source>The user types &lt;em&gt;Blue&lt;/em&gt; into the input element.</source>
          <target state="translated">ユーザーが入力要素に&lt;em&gt;青&lt;/em&gt;を入力します。</target>
        </trans-unit>
        <trans-unit id="746db581b79b8e44db4102f1f4a9027db5fb21fd" translate="yes">
          <source>The user types a value into the input element, in this case the favorite color &lt;em&gt;Blue&lt;/em&gt;.</source>
          <target state="translated">ユーザーは入力要素に値を入力します。この場合、お気に入りの色は&lt;em&gt;Blue&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="0f5eade11b7a8a4872382f56342ccc7dae30caf1" translate="yes">
          <source>The validation status of the control. There are four possible validation status values:</source>
          <target state="translated">コントロールの検証ステータス。 次の4つの有効な検証ステータス値があります。</target>
        </trans-unit>
        <trans-unit id="98b77f9877456963068b672348f174d66942c7cb" translate="yes">
          <source>The validation uses the TypeScript type checker and the options supplied to the TypeScript compiler to control how detailed the type validation is. For example, if the &lt;code&gt;strictTypeChecks&lt;/code&gt; is specified, the error &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; is reported as well as the above error message.</source>
          <target state="translated">検証では、TypeScript型チェッカーとTypeScriptコンパイラに提供されるオプションを使用して、型検証の詳細度を制御します。 たとえば、 &lt;code&gt;strictTypeChecks&lt;/code&gt; が指定されている場合、エラー &lt;code&gt;my.component.ts.MyComponent.html(1,1): : Object is possibly 'undefined'&lt;/code&gt; が上記のエラーメッセージとともに報告されます。</target>
        </trans-unit>
        <trans-unit id="0d21ce6b8675f7d9e43afcf309b4fddb296bc7b1" translate="yes">
          <source>The validator code is as follows:</source>
          <target state="translated">検証コードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e446494ebae458b5aea2681dfd535005a9fb5001" translate="yes">
          <source>The value</source>
          <target state="translated">値</target>
        </trans-unit>
        <trans-unit id="b3ab44397f0e829c1263e8d41c48f13f570826c7" translate="yes">
          <source>The value accessor for the control</source>
          <target state="translated">コントロールの値アクセサー</target>
        </trans-unit>
        <trans-unit id="516bd69561122628d42ad25e8281d2c0a9abe779" translate="yes">
          <source>The value for each day of the week, based on the &lt;code&gt;en-US&lt;/code&gt; locale</source>
          <target state="translated">&lt;code&gt;en-US&lt;/code&gt; ロケールに基づいた各曜日の値</target>
        </trans-unit>
        <trans-unit id="c2748ca458055ddfd5db76827b1b28c8b741c19c" translate="yes">
          <source>The value is the statement to execute when the event occurs. If the statement evaluates to &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;preventDefault&lt;/code&gt; is applied on the DOM event. A handler method can refer to the &lt;code&gt;$event&lt;/code&gt; local variable.</source>
          <target state="translated">値は、イベントが発生したときに実行するステートメントです。 ステートメントが &lt;code&gt;false&lt;/code&gt; と評価された場合、 &lt;code&gt;preventDefault&lt;/code&gt; がDOMイベントに適用されます。 ハンドラーメソッドは、 &lt;code&gt;$event&lt;/code&gt; ローカル変数を参照できます。</target>
        </trans-unit>
        <trans-unit id="a8273c4bd416c41f6f045c126981755bb55c2fa6" translate="yes">
          <source>The value of &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; has the &lt;code&gt;any&lt;/code&gt; type. Later you'll encounter the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; and it too has the &lt;code&gt;any&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#nativeElement&quot;&gt;ComponentFixture.nativeElement&lt;/a&gt;&lt;/code&gt; の値には &lt;code&gt;any&lt;/code&gt; タイプがあります。 後で &lt;code&gt;&lt;a href=&quot;../api/core/debugelement#nativeElement&quot;&gt;DebugElement.nativeElement&lt;/a&gt;&lt;/code&gt; に遭遇し、それにも &lt;code&gt;any&lt;/code&gt; タイプがあります。</target>
        </trans-unit>
        <trans-unit id="0ad903e2fa7af996e920297f63f7b7748e6d5872" translate="yes">
          <source>The value of &lt;em&gt;settingOrProject&lt;/em&gt; is one of the following.</source>
          <target state="translated">&lt;em&gt;settingOrProject&lt;/em&gt;の値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="74c4007c0c9568fe1d9f263c845a7b9cdffe9674" translate="yes">
          <source>The value of a &lt;em&gt;value provider&lt;/em&gt; must be defined before you specify it here. The title string literal is immediately available. The &lt;code&gt;someHero&lt;/code&gt; variable in this example was set earlier in the file as shown below. You can't use a variable whose value will be defined later.</source>
          <target state="translated">ここで指定する前に、 &lt;em&gt;値プロバイダー&lt;/em&gt;の値を定義する必要があります。 タイトル文字列リテラルはすぐに利用できます。 この例の &lt;code&gt;someHero&lt;/code&gt; 変数は、以下に示すようにファイル内で以前に設定されました。 値が後で定義される変数は使用できません。</target>
        </trans-unit>
        <trans-unit id="9e40077c9021d6667f8d32f6871c8f00bc068d9d" translate="yes">
          <source>The value of the iterable expression, which can be used as a &lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;template input variable&lt;/a&gt;.</source>
          <target state="translated">反復可能な式の値。 &lt;a href=&quot;../../guide/structural-directives#template-input-variable&quot;&gt;テンプレート入力変数&lt;/a&gt;として使用できます 。</target>
        </trans-unit>
        <trans-unit id="e5b7782babd6cd47ebb1077395fdc52934d8acaf" translate="yes">
          <source>The value or values to delete for the given header.</source>
          <target state="translated">指定されたヘッダーに対して削除する値。</target>
        </trans-unit>
        <trans-unit id="c3a47c38e67f33789b5fcdb66f3ebef0b8ae5f17" translate="yes">
          <source>The value or values to set or overide for the given header.</source>
          <target state="translated">指定されたヘッダーに設定またはオーバーライドする値。</target>
        </trans-unit>
        <trans-unit id="2b048ad41afe70b72be36c6e88e6bdc321667a94" translate="yes">
          <source>The value to emit.</source>
          <target state="translated">放出する値。</target>
        </trans-unit>
        <trans-unit id="1d37da7064bd8c9a2adb3a8365e6b179578a33bb" translate="yes">
          <source>The value to inject.</source>
          <target state="translated">注入する値。</target>
        </trans-unit>
        <trans-unit id="965b65af75152cd8483b194aca89f3d4a3563d3b" translate="yes">
          <source>The value to remove, if provided.</source>
          <target state="translated">削除する値（指定されている場合）。</target>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes">
          <source>The value.</source>
          <target state="translated">値。</target>
        </trans-unit>
        <trans-unit id="752b8837b88dbea5e1b07283811801b832bbf900" translate="yes">
          <source>The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only boolean, number, string, null and non-class objects will be serialized and deserialzied in a non-lossy manner.</source>
          <target state="translated">ストア内の値は、JSON.stringify / JSON.parseを使用してシリアライズ/デシリアライズされます。 したがって、boolean、number、string、null、および非クラスオブジェクトのみが、非損失の方法でシリアル化および逆シリアル化されます。</target>
        </trans-unit>
        <trans-unit id="52ff44818e20f7220d3cd6a6457d439574feaba5" translate="yes">
          <source>The variable &lt;code&gt;heroForm&lt;/code&gt; is now a reference to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive that governs the form as a whole.</source>
          <target state="translated">変数 &lt;code&gt;heroForm&lt;/code&gt; は、フォーム全体を管理する &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; ディレクティブへの参照になりました 。</target>
        </trans-unit>
        <trans-unit id="3f524c06d92d1f81ab05583d4d275b72aa86fd3a" translate="yes">
          <source>The version identifier of the app is determined by the contents of all resources, and it changes if any of them change. In practice, the version is determined by the contents of the &lt;code&gt;ngsw.json&lt;/code&gt; file, which includes hashes for all known content. If any of the cached files change, the file's hash will change in &lt;code&gt;ngsw.json&lt;/code&gt;, causing the Angular service worker to treat the active set of files as a new version.</source>
          <target state="translated">アプリのバージョン識別子は、すべてのリソースのコンテンツによって決定され、リソースのいずれかが変更されると変更されます。 実際には、バージョンは &lt;code&gt;ngsw.json&lt;/code&gt; ファイルのコンテンツによって決定されます。これには、すべての既知のコンテンツのハッシュが含まれます。 キャッシュされたファイルのいずれかが変更されると、 &lt;code&gt;ngsw.json&lt;/code&gt; でファイルのハッシュが変更され、Angularサービスワーカーはアクティブなファイルセットを新しいバージョンとして扱います。</target>
        </trans-unit>
        <trans-unit id="61010f814fd314444171513bbb7090fb2e7c56e3" translate="yes">
          <source>The version number is incremented based on the level of change included in the release.</source>
          <target state="translated">バージョン番号は、リリースに含まれる変更のレベルに基づいて増加します。</target>
        </trans-unit>
        <trans-unit id="a40aa756483f3a5f523498855f5257b57156b5a8" translate="yes">
          <source>The view encapsulation strategy to use in the initial project.</source>
          <target state="translated">初期プロジェクトで使用するビューのカプセル化戦略。</target>
        </trans-unit>
        <trans-unit id="fa51a23f655a6d3d42ddb64f7327a8e642728256" translate="yes">
          <source>The view encapsulation strategy to use in the new app.</source>
          <target state="translated">新しいアプリで使用するビューのカプセル化戦略。</target>
        </trans-unit>
        <trans-unit id="fcf377037a7d42bc71c7f002d89b4f46b0d68cfa" translate="yes">
          <source>The view encapsulation strategy to use in the new component.</source>
          <target state="translated">新しいコンポーネントで使用するビューのカプセル化戦略。</target>
        </trans-unit>
        <trans-unit id="3f5b538e2927dd6de153329e296a74a421bc0c36" translate="yes">
          <source>The view encapsulation type, which determines how styles are applied to DOM elements. One of</source>
          <target state="translated">ビューのカプセル化タイプ。DOM要素にスタイルを適用する方法を決定します。 の一つ</target>
        </trans-unit>
        <trans-unit id="52604a8e00ae2362f799cae913f8150372948692" translate="yes">
          <source>The view hierarchy doesn't imply a component hierarchy. Views that are embedded in the context of a particular hierarchy can be host views of other components. Those components can be in the same NgModule as the hosting component, or belong to other NgModules.</source>
          <target state="translated">ビュー階層は、コンポーネント階層を意味するものではありません。 特定の階層のコンテキストに埋め込まれたビューは、他のコンポーネントのホストビューにすることができます。 これらのコンポーネントは、ホストコンポーネントと同じNgModuleにあるか、他のNgModuleに属することができます。</target>
        </trans-unit>
        <trans-unit id="c7838a7b8c734a7282cb30df6d8616064238194b" translate="yes">
          <source>The view to insert.</source>
          <target state="translated">挿入するビュー。</target>
        </trans-unit>
        <trans-unit id="4ea024c3fe94500d702337f77198fe17d570e08e" translate="yes">
          <source>The view to move.</source>
          <target state="translated">移動するビュー。</target>
        </trans-unit>
        <trans-unit id="64ae54575a804f27c02ce687200e683460668cdb" translate="yes">
          <source>The view to query.</source>
          <target state="translated">クエリするビュー。</target>
        </trans-unit>
        <trans-unit id="f7eca5f51435a85c65dffa7d0a3287d518cfc6d9" translate="yes">
          <source>The virtual file system is represented by a &lt;code&gt;Tree&lt;/code&gt;. The &lt;code&gt;Tree&lt;/code&gt; data structure contains a &lt;em&gt;base&lt;/em&gt; (a set of files that already exists) and a &lt;em&gt;staging area&lt;/em&gt; (a list of changes to be applied to the base). When making modifications, you don't actually change the base, but add those modifications to the staging area.</source>
          <target state="translated">仮想ファイルシステムは &lt;code&gt;Tree&lt;/code&gt; で表されます。 &lt;code&gt;Tree&lt;/code&gt; データ構造には、 &lt;em&gt;ベース&lt;/em&gt; （既存のファイルのセット）と&lt;em&gt;ステージング領域&lt;/em&gt; （ベースに適用される変更のリスト）が含まれています。 変更を行う場合、実際にベースを変更するのではなく、それらの変更をステージング領域に追加します。</target>
        </trans-unit>
        <trans-unit id="2cefd7f9cff91ac8ee2cb82756abed3d99ad82ad" translate="yes">
          <source>The web is used by a wide variety of people, including those who have visual or motor impairments. A variety of assistive technologies are available that make it much easier for these groups to interact with web-based software applications. In addition, designing an application to be more accessible generally improves the user experience for all users.</source>
          <target state="translated">ウェブは、視覚障害または運動障害のある人を含む、さまざまな人々によって使用されています。 これらのグループがWebベースのソフトウェアアプリケーションと簡単に対話できるようにするさまざまな支援技術が利用できます。 さらに、よりアクセスしやすいようにアプリケーションを設計すると、一般にすべてのユーザーのユーザーエクスペリエンスが向上します。</target>
        </trans-unit>
        <trans-unit id="0870b1ddd7a401e28edca7748851260cf0d812b1" translate="yes">
          <source>The web server must distinguish &lt;em&gt;app page requests&lt;/em&gt; from other kinds of requests.</source>
          <target state="translated">Webサーバーは、 &lt;em&gt;アプリページのリクエスト&lt;/em&gt;を他の種類のリクエストと区別する必要があります。</target>
        </trans-unit>
        <trans-unit id="3bcd56955050ccb3584a4da36608073e9ca82456" translate="yes">
          <source>The wildcard state &lt;code&gt;*&lt;/code&gt; matches to &lt;em&gt;any&lt;/em&gt; state, including &lt;code&gt;void&lt;/code&gt;.</source>
          <target state="translated">ワイルドカード状態 &lt;code&gt;*&lt;/code&gt; は、 &lt;code&gt;void&lt;/code&gt; を含む&lt;em&gt;すべての&lt;/em&gt;状態に一致します 。</target>
        </trans-unit>
        <trans-unit id="cdfa623802e57793c0a1db6ff9d61453c796514c" translate="yes">
          <source>The word &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; in the interpolation binding, right after the pipe operator ( | ), activates the built-in &lt;code&gt;UppercasePipe&lt;/code&gt;.</source>
          <target state="translated">パイプ演算子（|）の直後の補間バインディングの単語 &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;uppercase&lt;/a&gt;&lt;/code&gt; は、組み込みの &lt;code&gt;UppercasePipe&lt;/code&gt; をアクティブにします。</target>
        </trans-unit>
        <trans-unit id="b02e653c1a608596d35a7fd022b60a7182b55381" translate="yes">
          <source>The wording of each guideline indicates how strong the recommendation is.</source>
          <target state="translated">各ガイドラインの文言は、推奨事項の強さを示しています。</target>
        </trans-unit>
        <trans-unit id="7c860c7e7f5c46dabbf52c5dc7a52a91bc246694" translate="yes">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you add Angular assets to the &lt;code&gt;angular.module&lt;/code&gt; property. In Angular, you create one or more classes adorned with an &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator that describes Angular assets in metadata. The differences blossom from there.</source>
          <target state="translated">それらの詳細は、アーキテクチャと実装がまったく異なります。 AngularJSでは、Angularアセットを &lt;code&gt;angular.module&lt;/code&gt; プロパティに追加します。 Angularでは、メタデータ内のAngularアセットを記述する &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターで装飾された1つ以上のクラスを作成します。 そこから違いが開花します。</target>
        </trans-unit>
        <trans-unit id="1c9f03dfa8dacad02e2c3ca38cbf5ee7fdadd4d0" translate="yes">
          <source>Their details are quite different in architecture and implementation. In AngularJS, you create a module by specifying its name and dependencies with &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module()&lt;/a&gt;. Then you can add assets using its various methods. In Angular, you create a class adorned with an &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt; decorator that describes assets in metadata.</source>
          <target state="translated">それらの詳細は、アーキテクチャと実装がまったく異なります。 AngularJSでは、 &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.module&quot;&gt;angular.module（）&lt;/a&gt;で名前と依存関係を指定してモジュールを作成します。 その後、さまざまなメソッドを使用してアセットを追加できます。 Angularでは、メタデータ内のアセットを記述する&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;デコレーターで装飾されたクラスを作成します。</target>
        </trans-unit>
        <trans-unit id="4a746b75626a8bf1b8d141962d550672ee26a9a0" translate="yes">
          <source>Then Angular calls the &lt;code&gt;ngAfterViewInit&lt;/code&gt; lifecycle hook at which time it is &lt;em&gt;too late&lt;/em&gt; to update the parent view's display of the countdown seconds. Angular's unidirectional data flow rule prevents updating the parent view's in the same cycle. The app has to &lt;em&gt;wait one turn&lt;/em&gt; before it can display the seconds.</source>
          <target state="translated">次に、Angularは &lt;code&gt;ngAfterViewInit&lt;/code&gt; ライフサイクルフックを呼び出しますが、この時点では、カウントダウン秒の親ビューの表示を更新するには&lt;em&gt;遅すぎ&lt;/em&gt;ます。 Angularの単方向データフロールールは、同じサイクルで親ビューの更新を防ぎます。 アプリは秒を表示する前に&lt;em&gt;1ターン待つ&lt;/em&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="dbecf897d73ac2b6641e82fba7920890079f1124" translate="yes">
          <source>Then add &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata's &lt;code&gt;imports&lt;/code&gt; array, which contains a list of external modules that the app needs.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータの &lt;code&gt;imports&lt;/code&gt; 配列に追加します。この配列には、アプリが必要とする外部モジュールのリストが含まれています。</target>
        </trans-unit>
        <trans-unit id="302c6ab52d600acc4553bea66d084dd5f7f37330" translate="yes">
          <source>Then add a &lt;em&gt;parameterized&lt;/em&gt; route to the &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; array that matches the path pattern to the &lt;em&gt;hero detail&lt;/em&gt; view.</source>
          <target state="translated">次に、 &lt;em&gt;ヒーロー&lt;/em&gt;パターンの&lt;em&gt;詳細&lt;/em&gt;ビューへのパスパターンに一致する &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; 配列に&lt;em&gt;パラメーター化された&lt;/em&gt;ルートを追加し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="7087a31795c1cc6622e1648ea10337e6e7796752" translate="yes">
          <source>Then add it to the &lt;code&gt;providers&lt;/code&gt; array of the testing module configuration:</source>
          <target state="translated">次に、テストモジュール構成の &lt;code&gt;providers&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="476c63ff60da4bb61e86cb5f4efd206fa03aa9dc" translate="yes">
          <source>Then add the &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; and continue with the setup of the &lt;em&gt;service-under-test&lt;/em&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/common/http/testing/httpclienttestingmodule&quot;&gt;HttpClientTestingModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; に追加し、 &lt;em&gt;テスト対象サービス&lt;/em&gt;のセットアップを続行します。</target>
        </trans-unit>
        <trans-unit id="1bfa821c841240ffbf8adf699d29a6b8346ac678" translate="yes">
          <source>Then add two event handlers that respond when the mouse enters or leaves, each adorned by the &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">次に、マウスが出入りするときに応答する2つのイベントハンドラーを追加します。各イベントハンドラーは &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; デコレータで装飾されています。</target>
        </trans-unit>
        <trans-unit id="2077cb3e1b43eb4d0aa0bdfb4e87ddd6fe05d012" translate="yes">
          <source>Then change &lt;code&gt;main-aot.ts&lt;/code&gt; to bootstrap the &lt;code&gt;AppComponentFactory&lt;/code&gt; that was generated by the AOT compiler:</source>
          <target state="translated">次に、 &lt;code&gt;main-aot.ts&lt;/code&gt; を変更して、AOTコンパイラーによって生成されたAppComponentFactoryをブートストラップし &lt;code&gt;AppComponentFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f98a3b01b00f3cdc0645e1bb016df36002ccc41" translate="yes">
          <source>Then create some HTML to try it.</source>
          <target state="translated">次に、いくつかのHTMLを作成して試してください。</target>
        </trans-unit>
        <trans-unit id="ed0c20efaf787e9c5968245911ff8d07f8f0da7a" translate="yes">
          <source>Then declare them in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration next to the components, directives, and pipes that need to be real.</source>
          <target state="translated">次に、コンポーネント、ディレクティブ、および実際に必要なパイプの横にある &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成でそれらを宣言します。</target>
        </trans-unit>
        <trans-unit id="e412dc563abd459ce251cf7cfccd9f863136e63b" translate="yes">
          <source>Then each test invokes &lt;code&gt;setup()&lt;/code&gt; in its first line, before continuing with steps that manipulate the test subject and assert expectations.</source>
          <target state="translated">次に、各テストは最初の行で &lt;code&gt;setup()&lt;/code&gt; を呼び出してから、テストサブジェクトを操作して期待を表明する手順を続行します。</target>
        </trans-unit>
        <trans-unit id="150a9555cd5004b3999517db04d6f79faab05564" translate="yes">
          <source>Then exercise the component class, remembering to call the &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hook methods&lt;/a&gt; as Angular does when running the app.</source>
          <target state="translated">次に、コンポーネントクラスを実行し、アプリの実行時にAngularが行うように&lt;a href=&quot;lifecycle-hooks&quot;&gt;ライフサイクルフックメソッド&lt;/a&gt;を呼び出すことを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="fb4a68d7b2f52dce99079de606d30ebaa5bb531f" translate="yes">
          <source>Then go to &lt;code&gt;localhost:4200&lt;/code&gt; where you should see &amp;ldquo;app works!&amp;rdquo; and three buttons.</source>
          <target state="translated">次に &lt;code&gt;localhost:4200&lt;/code&gt; 移動すると、「app works！」が表示されます。 と3つのボタン。</target>
        </trans-unit>
        <trans-unit id="38933987a79b6e0405d4682b79b28629cbf06cda" translate="yes">
          <source>Then import and add it to the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;providers array&lt;/em&gt; like this:</source>
          <target state="translated">次に、 &lt;code&gt;AppModule&lt;/code&gt; ようにAppModule &lt;em&gt;プロバイダー配列に&lt;/em&gt;インポートして追加し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba51c703735b0a9ca10a1f38c791fa66ebf4dc99" translate="yes">
          <source>Then inject &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; into your Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; and use it to bootstrap the top level &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJS module&lt;/a&gt; in the &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method.</source>
          <target state="translated">次に、Angular &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; を挿入し、それを使用して、 &lt;code&gt;ngDoBootstrap()&lt;/code&gt; メソッドで最上位の&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module&quot;&gt;AngularJSモジュール&lt;/a&gt;をブートストラップします 。</target>
        </trans-unit>
        <trans-unit id="ea80e24f31be172808e0a76630ab02df1fbba4cf" translate="yes">
          <source>Then inject it inside a test by calling &lt;code&gt;TestBed.get()&lt;/code&gt; with the service class as the argument.</source>
          <target state="translated">次に、サービスクラスを引数として &lt;code&gt;TestBed.get()&lt;/code&gt; を呼び出して、テスト内に挿入します。</target>
        </trans-unit>
        <trans-unit id="ed47e3226a89095f74e2f4a490e662cccb0ebbc0" translate="yes">
          <source>Then modify the &lt;code&gt;app.component.ts&lt;/code&gt; file by changing the template and the body of the component.</source>
          <target state="translated">次に、テンプレートとコンポーネントの本文を変更して、 &lt;code&gt;app.component.ts&lt;/code&gt; ファイルを変更します。</target>
        </trans-unit>
        <trans-unit id="8f2ea7f19a02db5f1bb037406ad378d2b4d2753b" translate="yes">
          <source>Then provide and inject &lt;em&gt;both the&lt;/em&gt;&lt;strong&gt;component&lt;/strong&gt;&lt;em&gt;and the service&lt;/em&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成で&lt;strong&gt;コンポーネント&lt;/strong&gt; &lt;em&gt;とサービスの&lt;/em&gt; &lt;em&gt;両方を&lt;/em&gt;提供および注入します。</target>
        </trans-unit>
        <trans-unit id="6575d9ffd1443fafb383b5f99065fc07d42c1e8a" translate="yes">
          <source>Then provide the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; in the main module:</source>
          <target state="translated">次に、メインモジュールで &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="5cd36815d6513b0d19bf87503dfe0afab93f9fa9" translate="yes">
          <source>Then reload with &lt;code&gt;Cmd+r&lt;/code&gt; or &lt;code&gt;Ctrl+r&lt;/code&gt;, depending on your platform.</source>
          <target state="translated">次に、プラットフォームに応じて &lt;code&gt;Cmd+r&lt;/code&gt; または &lt;code&gt;Ctrl+r&lt;/code&gt; でリロードします。</target>
        </trans-unit>
        <trans-unit id="62acde2949df74c80c6b969effb470f5543854f7" translate="yes">
          <source>Then the following link &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; will generate the link &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt;.</source>
          <target state="translated">次に、次のリンク &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; [&lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;]=&quot;['/user/jim']&quot;&amp;gt;Jim&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; は、リンク &lt;code&gt;/user/(jim//aux:team)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="31a24e38017cc0ca331b2c164af11448fb71f88f" translate="yes">
          <source>Then use the service inside your component by injecting it in the component constructor using its class as a type annotation:</source>
          <target state="translated">次に、クラスを型注釈として使用してコンポーネントコンストラクターにサービスを注入することにより、コンポーネント内でサービスを使用します。</target>
        </trans-unit>
        <trans-unit id="3d28664e3228d12b67d0ad4e11b39b8bfa234399" translate="yes">
          <source>Then you can assert that the quote element displays the expected text.</source>
          <target state="translated">次に、quote要素が期待されるテキストを表示することをアサートできます。</target>
        </trans-unit>
        <trans-unit id="fb5aa1a656847347c6ad33e809979b893a2a0af1" translate="yes">
          <source>Then you can use the &quot;upgraded&quot; AngularJS service by injecting it into an Angular component or service.</source>
          <target state="translated">次に、Angularコンポーネントまたはサービスにインジェクトすることにより、「アップグレードされた」AngularJSサービスを使用できます。</target>
        </trans-unit>
        <trans-unit id="7235d5f78eb3fc75c9de23a894249dff7395ce21" translate="yes">
          <source>Then you create a child component (B) that defines its own, &lt;em&gt;specialized&lt;/em&gt; providers for &lt;code&gt;CarService&lt;/code&gt; and &lt;code&gt;EngineService&lt;/code&gt; that have special capabilities suitable for whatever is going on in component (B).</source>
          <target state="translated">次に、コンポーネント（B）で &lt;code&gt;EngineService&lt;/code&gt; れていることに適した特別な機能を持つ &lt;code&gt;CarService&lt;/code&gt; およびEngineServiceの独自の&lt;em&gt;専門&lt;/em&gt;プロバイダーを定義する子コンポーネント（B）を作成します。</target>
        </trans-unit>
        <trans-unit id="13b7250037e2791c30d8b2b60220889c166804a2" translate="yes">
          <source>Then you inject the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;HeroListComponent&lt;/code&gt; constructor.</source>
          <target state="translated">次に、 &lt;code&gt;HeroListComponent&lt;/code&gt; コンストラクターに &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を注入します。</target>
        </trans-unit>
        <trans-unit id="06b87cc1eeb739adae3341e69733b9a6c335c899" translate="yes">
          <source>Then you should define an Angular provider to be included in your &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;providers&lt;/code&gt; property.</source>
          <target state="translated">次に、Angularプロバイダーを定義して、 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;providers&lt;/code&gt; プロパティに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="3996f4d02c86b0214c6856fbd020c552536ef23e" translate="yes">
          <source>Then you tell the &lt;code&gt;HeroService&lt;/code&gt; to fetch the hero with that &lt;code&gt;id&lt;/code&gt; and return the result of the &lt;code&gt;HeroService&lt;/code&gt; request.</source>
          <target state="translated">次に、その &lt;code&gt;id&lt;/code&gt; を持つヒーローを取得し、 &lt;code&gt;HeroService&lt;/code&gt; リクエストの結果を返すように &lt;code&gt;HeroService&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="ed06e960c3c34ee183cdb9c0a6a2a5d5f20a03f6" translate="yes">
          <source>Then, another animation can be called when the current animation finishes. For example, the button goes from the &lt;code&gt;inProgress&lt;/code&gt; state to the &lt;code&gt;closed&lt;/code&gt; state when the API call is completed.</source>
          <target state="translated">その後、現在のアニメーションが終了すると、別のアニメーションを呼び出すことができます。 たとえば、API呼び出しが完了すると、ボタンは &lt;code&gt;inProgress&lt;/code&gt; 状態から &lt;code&gt;closed&lt;/code&gt; 状態になります。</target>
        </trans-unit>
        <trans-unit id="edf82d0382f477967edce3fb6b12681334c96dc8" translate="yes">
          <source>Then, when some component injects &lt;code&gt;UserService&lt;/code&gt;, Angular finds it in the app root injector, and delivers the app-wide singleton service. No problem.</source>
          <target state="translated">次に、一部のコンポーネントが &lt;code&gt;UserService&lt;/code&gt; を注入すると、Angularはアプリルートインジェクターでそれを見つけ、アプリ全体のシングルトンサービスを配信します。 問題ない。</target>
        </trans-unit>
        <trans-unit id="c3a0ceb7d76985503f10a062c39d4ecc9f73b6e5" translate="yes">
          <source>Then, when you need that file&amp;rsquo;s code in another file, you import it like this:</source>
          <target state="translated">次に、別のファイルにそのファイルのコードが必要な場合、次のようにインポートします。</target>
        </trans-unit>
        <trans-unit id="7f94783b2fdbdd4b5788239abe980a7f9c2a0feb" translate="yes">
          <source>Then, you change into your library directory to build the schematic</source>
          <target state="translated">次に、ライブラリディレクトリに移動して、回路図を作成します</target>
        </trans-unit>
        <trans-unit id="b558f2a5f6c20368ac31efe8ab04dc45d807c8b6" translate="yes">
          <source>There are &lt;em&gt;important differences&lt;/em&gt; in the way the router treats these &lt;em&gt;child routes&lt;/em&gt;.</source>
          <target state="translated">ルータがこれらの&lt;em&gt;子ルートを&lt;/em&gt;扱う方法に&lt;em&gt;重要な違い&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="566ab24996dda55d07b696f9fcb91995338b7d7a" translate="yes">
          <source>There are a few cases where you give a component an attribute, such as when you want to augment a built-in element. For example, &lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;Material Design&lt;/a&gt; uses this technique with &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt;. However, you wouldn't use this technique on a custom element.</source>
          <target state="translated">組み込みの要素を拡張したい場合など、コンポーネントに属性を指定する場合がいくつかあります。 たとえば、 &lt;a href=&quot;https://material.angular.io/components/button/overview&quot;&gt;Material Design&lt;/a&gt;はこの手法を &lt;code&gt;&amp;lt;button mat-button&amp;gt;&lt;/code&gt; とともに使用します 。 ただし、この手法はカスタム要素には使用しません。</target>
        </trans-unit>
        <trans-unit id="4a44db3593849baa6fd286f1a9dad3ee4be9f41f" translate="yes">
          <source>There are a few exceptional observables where this is not necessary. The &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; observables are among the exceptions.</source>
          <target state="translated">これが必要ではないいくつかの例外的な観測量があります。 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; observablesは例外です。</target>
        </trans-unit>
        <trans-unit id="1e9c60f04e3a15c6ff01e79a5018c059fb20d209" translate="yes">
          <source>There are a few limited reasons why the Angular service worker might change the version of a running app. Some of them are error conditions:</source>
          <target state="translated">Angular Service Workerが実行中のアプリのバージョンを変更する可能性がある理由はいくつかあります。 それらのいくつかはエラー状態です：</target>
        </trans-unit>
        <trans-unit id="a6013a4fe41dc5c7411d2f89c39f1e20616a17ba" translate="yes">
          <source>There are a few options if you want to get correct types for your custom elements. Let's assume you create a &lt;code&gt;my-dialog&lt;/code&gt; custom element based on the following component:</source>
          <target state="translated">カスタム要素の正しい型を取得したい場合、いくつかのオプションがあります。 次のコンポーネントに基づいて &lt;code&gt;my-dialog&lt;/code&gt; カスタム要素を作成するとします。</target>
        </trans-unit>
        <trans-unit id="3191a1618b8faa99c49daa031fba849003a13bd3" translate="yes">
          <source>There are a few rules in particular that will make it much easier to do &lt;em&gt;an incremental upgrade&lt;/em&gt; using the Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; module:</source>
          <target state="translated">特に、Angular &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; モジュールを使用し&lt;em&gt;てインクリメンタルアップグレード&lt;/em&gt;をはるかに簡単にするいくつかのルールがあります。</target>
        </trans-unit>
        <trans-unit id="a01d9115f3a3ad52c673da81193da8c683b0a1c6" translate="yes">
          <source>There are a few things to note, though:</source>
          <target state="translated">ただし、注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="cdc057156f4a0afc834e3e15f4b4be9942560eb6" translate="yes">
          <source>There are a number of options for modifying the default search behavior, using &lt;em&gt;parameter decorators&lt;/em&gt; on the service-valued parameters of a class constructor.</source>
          <target state="translated">クラスコンストラクターのサービス値パラメーターに&lt;em&gt;パラメーターデコレーター&lt;/em&gt;を使用して、既定の検索動作を変更するためのオプションがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="c676ec6b692f6df001e20a544ca9a4ac7cc35255" translate="yes">
          <source>There are also completions within elements. Any elements you have as a component selector will show up in the completion list.</source>
          <target state="translated">要素内にも補完があります。 コンポーネントセレクタとして持っている要素は、補完リストに表示されます。</target>
        </trans-unit>
        <trans-unit id="2b0041e80379dba90a5c135457752493c4e52ac4" translate="yes">
          <source>There are configuration files for both the &lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScript test runner&lt;/a&gt; and &lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractor&lt;/a&gt; end-to-end testing tool, which you must adjust to start Chrome without sandboxing.</source>
          <target state="translated">&lt;a href=&quot;https://karma-runner.github.io/latest/config/configuration-file.html&quot;&gt;Karma JavaScriptテストランナー&lt;/a&gt;と&lt;a href=&quot;https://www.protractortest.org/#/api-overview&quot;&gt;Protractor&lt;/a&gt;エンドツーエンドテストツールの両方の構成ファイルがあり、サンドボックス化せずにChromeを起動するには調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="8f70e6e9da25ad1b098bbc6719f6c5877729d762" translate="yes">
          <source>There are five general categories of feature modules which tend to fall into the following groups:</source>
          <target state="translated">機能モジュールには、次のグループに分類される傾向がある5つの一般的なカテゴリがあります。</target>
        </trans-unit>
        <trans-unit id="9d24499582f9d74be4e55dfd292e78d548d73a51" translate="yes">
          <source>There are many more interceptors in the complete sample code.</source>
          <target state="translated">完全なサンプルコードには、さらに多くのインターセプターがあります。</target>
        </trans-unit>
        <trans-unit id="a08951de0f1de6bd2f6e60bba79ba111ed7ae1d7" translate="yes">
          <source>There are many resources to complement the Angular docs. Mozilla's MDN docs include both &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt; introductions. &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript's docs&lt;/a&gt; include a 5-minute tutorial. Various online course platforms, such as &lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt; and &lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;, also cover web development basics.</source>
          <target state="translated">Angularドキュメントを補完する多くのリソースがあります。 MozillaのMDNドキュメントには、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML&quot;&gt;HTML&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScriptの&lt;/a&gt;両方の紹介が含まれています。 &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScriptのドキュメントに&lt;/a&gt;は、5分間のチュートリアルが含まれています。 &lt;a href=&quot;http://www.udemy.com&quot;&gt;Udemy&lt;/a&gt;や&lt;a href=&quot;https://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt;などのさまざまなオンラインコースプラットフォームも、Web開発の基本をカバーしています。</target>
        </trans-unit>
        <trans-unit id="66ad0af28f7ac3d95ccbf0739cccfa8af77155a9" translate="yes">
          <source>There are many ways to structure AngularJS applications. When you begin to upgrade these applications to Angular, some will turn out to be much more easy to work with than others. There are a few key techniques and patterns that you can apply to future proof apps even before you begin the migration.</source>
          <target state="translated">AngularJSアプリケーションを構造化するには多くの方法があります。 これらのアプリケーションをAngularにアップグレードし始めると、一部のアプリケーションは他のアプリケーションよりもはるかに使いやすいことがわかります。 移行を開始する前であっても、将来の使用に耐えるアプリに適用できるいくつかの重要なテクニックとパターンがあります。</target>
        </trans-unit>
        <trans-unit id="00d98f0576741a1e108297fca91f90e751881e55" translate="yes">
          <source>There are multiple ways to prevent this:</source>
          <target state="translated">これを防ぐには複数の方法があります。</target>
        </trans-unit>
        <trans-unit id="ff870a40c32b15241e0dc290ffe99e696ec7e316" translate="yes">
          <source>There are new requirements for the Tour of Heroes app:</source>
          <target state="translated">Tour of Heroesアプリには新しい要件があります：</target>
        </trans-unit>
        <trans-unit id="b7c35a18e43689374a55ffc6988124f5f7c095f9" translate="yes">
          <source>There are no easy answers to these questions. Prohibiting multiple structural directives makes them moot. There's an easy solution for this use case: put the &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; on a container element that wraps the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; element. One or both elements can be an &lt;a href=&quot;structural-directives#ngcontainer&quot;&gt;&lt;code&gt;ng-container&lt;/code&gt;&lt;/a&gt; so you don't have to introduce extra levels of HTML.</source>
          <target state="translated">これらの質問に対する簡単な答えはありません。 複数の構造的指令を禁止すると、それらは意味がなくなります。 このユースケースには簡単な解決策があります。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 要素をラップするコンテナ要素に* ngIfを配置します。 一方または両方の要素を&lt;a href=&quot;structural-directives#ngcontainer&quot;&gt; &lt;code&gt;ng-container&lt;/code&gt; &lt;/a&gt;することができるため、余分なレベルのHTMLを導入する必要はありません。</target>
        </trans-unit>
        <trans-unit id="93b4d15b36f576847810650de967eae2da32c1f5" translate="yes">
          <source>There are no parameters for this parent route so you're done with it.</source>
          <target state="translated">この親ルートにはパラメーターがないため、これで完了です。</target>
        </trans-unit>
        <trans-unit id="fcf8d135851b80ffbe87dcd35d86d4ad22ed02e6" translate="yes">
          <source>There are no parameters.</source>
          <target state="translated">パラメーターはありません。</target>
        </trans-unit>
        <trans-unit id="347acdbd61105fadd07872f8156b46696cb3b692" translate="yes">
          <source>There are only two changes. The &lt;code&gt;template&lt;/code&gt; is simply the new element tag identified by the component's &lt;code&gt;selector&lt;/code&gt; property. This displays the hero form when the application component is loaded. Don't forget to remove the &lt;code&gt;name&lt;/code&gt; field from the class body as well.</source>
          <target state="translated">変更点は2つだけです。 &lt;code&gt;template&lt;/code&gt; は、コンポーネントの &lt;code&gt;selector&lt;/code&gt; プロパティによって識別される新しい要素タグです。 これにより、アプリケーションコンポーネントがロードされたときにヒーローフォームが表示されます。 クラス本体から &lt;code&gt;name&lt;/code&gt; フィールドも削除することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="159f34be61579ceb6ae8d16ef7ee7eeb786eef01" translate="yes">
          <source>There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others. Although Circle CI and Travis CI are paid services, they are provided free for open source projects. You can create a public project on GitHub and add these services without paying. Contributions to the Angular repo are automatically run through a whole suite of Circle CI tests.</source>
          <target state="translated">Circle CIやTravis CIなどの有料CIサービスがあり、Jenkinsなどを使用して独自のCIサービスを無料でホストすることもできます。 Circle CIとTravis CIは有料サービスですが、オープンソースプロジェクトには無料で提供されます。 GitHubで公開プロジェクトを作成し、これらのサービスを無料で追加できます。 Angularリポジトリへの貢献は、Circle CIテストのスイート全体で自動的に実行されます。</target>
        </trans-unit>
        <trans-unit id="879cd324a70c4c96acf893c99d3b9dc84ee024ff" translate="yes">
          <source>There are several examples over the next few sections.</source>
          <target state="translated">次のいくつかのセクションにはいくつかの例があります。</target>
        </trans-unit>
        <trans-unit id="2cf39c6658c13b371aa454d5575113ab2b716d55" translate="yes">
          <source>There are several notable changes here:</source>
          <target state="translated">ここにはいくつかの注目すべき変更点があります。</target>
        </trans-unit>
        <trans-unit id="b3ecb535a2ce87ce6aa9dd8adc9feb06a8b4ddfd" translate="yes">
          <source>There are several ways to add styles to a component:</source>
          <target state="translated">コンポーネントにスタイルを追加するには、いくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="1b266b00929430b0621b4b49767764faeeeeab85" translate="yes">
          <source>There are three categories of directive:</source>
          <target state="translated">ディレクティブには3つのカテゴリがあります。</target>
        </trans-unit>
        <trans-unit id="38597e951fad51067690768d9f762544a13ddd71" translate="yes">
          <source>There are three different &lt;em&gt;urgency levels&lt;/em&gt; used to style the alerts based on the severity or importance of the content.</source>
          <target state="translated">コンテンツの重大度または重要度に基づいてアラートをスタイル設定するために使用される3つの異なる&lt;em&gt;緊急度レベル&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="e76077d148cfb3df1507661f67b5067f5ff2d5a6" translate="yes">
          <source>There are three kinds of directives in Angular:</source>
          <target state="translated">Angularには3種類のディレクティブがあります。</target>
        </trans-unit>
        <trans-unit id="25e737b2092b55d9eb5f239e56b9516518d5f446" translate="yes">
          <source>There are three main reasons to create a Universal version of your app.</source>
          <target state="translated">アプリのユニバーサルバージョンを作成する主な理由は3つあります。</target>
        </trans-unit>
        <trans-unit id="a4f700c6eaa2262317c0d957e29675f3621c94d0" translate="yes">
          <source>There are three main steps to setting up a lazy-loaded feature module:</source>
          <target state="translated">遅延ロードされた機能モジュールをセットアップするには、主に3つの手順があります。</target>
        </trans-unit>
        <trans-unit id="165573f1548a8f99cacaaa3440578c4519f99108" translate="yes">
          <source>There are three phases of AOT compilation.</source>
          <target state="translated">AOTコンパイルには3つのフェーズがあります。</target>
        </trans-unit>
        <trans-unit id="ab9b96e090b917419a7b4b07d60725578c370783" translate="yes">
          <source>There are three significant differences from &lt;code&gt;getHeroes()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;getHeroes()&lt;/code&gt; とは3つの重要な違いがあります。</target>
        </trans-unit>
        <trans-unit id="9dd01b7be4e57b57b1627f79224ce07af7d2d99e" translate="yes">
          <source>There are three supported input types.</source>
          <target state="translated">サポートされている入力タイプは3つあります。</target>
        </trans-unit>
        <trans-unit id="f5034306f8346e549a24ab826839194a108f3818" translate="yes">
          <source>There are two categories of pipes: &lt;em&gt;pure&lt;/em&gt; and &lt;em&gt;impure&lt;/em&gt;. Pipes are pure by default. Every pipe you've seen so far has been pure. You make a pipe impure by setting its pure flag to false. You could make the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; impure like this:</source>
          <target state="translated">パイプには、 &lt;em&gt;純粋&lt;/em&gt;と&lt;em&gt;不純の&lt;/em&gt; 2つのカテゴリがあります。 パイプはデフォルトで純粋です。 これまでに見たパイプはすべて純粋です。 純粋なフラグをfalseに設定して、パイプを不純にします。 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; を次のように不純にすることができます。</target>
        </trans-unit>
        <trans-unit id="c0d0261683ac70f77d2cb64caaaa6be2e633442f" translate="yes">
          <source>There are two changes:</source>
          <target state="translated">2つの変更点があります。</target>
        </trans-unit>
        <trans-unit id="0757ae2710d35ffd65d63c8e4408b8f8b222e032" translate="yes">
          <source>There are two important things to keep in mind when using Web Workers in Angular projects:</source>
          <target state="translated">AngularプロジェクトでWeb Workersを使用する際には、2つの重要な留意事項があります。</target>
        </trans-unit>
        <trans-unit id="ed5307db9a7ed9a50bdf282cc464f6252ca2c8b1" translate="yes">
          <source>There are two independent frameworks running in a single application, each framework treats the other as a black box.</source>
          <target state="translated">単一のアプリケーションで実行される2つの独立したフレームワークがあり、各フレームワークは他方をブラックボックスとして扱います。</target>
        </trans-unit>
        <trans-unit id="ad6b0f208e637f748bf275b29c341ba579e95709" translate="yes">
          <source>There are two injector hierarchies in Angular:</source>
          <target state="translated">Angularには2つのインジェクター階層があります。</target>
        </trans-unit>
        <trans-unit id="43178632845a92d22afa35ca0676f6eb7a1f7062" translate="yes">
          <source>There are two kinds of generated attributes:</source>
          <target state="translated">生成される属性には次の2種類があります。</target>
        </trans-unit>
        <trans-unit id="ae6efc4f0655823ca7f29eb7bf3eefe1625ce1e5" translate="yes">
          <source>There are two main kinds of entry components:</source>
          <target state="translated">エントリコンポーネントには、主に2つの種類があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
